
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  08009268  08009268  00019268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f8  080099f8  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  080099f8  080099f8  000199f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a00  08009a00  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a00  08009a00  00019a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a04  08009a04  00019a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08009a08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  20000238  08009c3c  00020238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  08009c3c  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204b4  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ff0  00000000  00000000  00040718  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000109ec  00000000  00000000  00044708  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001688  00000000  00000000  000550f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016f8  00000000  00000000  00056780  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a5c1  00000000  00000000  00057e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00014b48  00000000  00000000  00072439  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00094d01  00000000  00000000  00086f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011bc82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004de8  00000000  00000000  0011bd00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800924c 	.word	0x0800924c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	0800924c 	.word	0x0800924c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 1;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000f98:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 8000f9a:	f000 ffc9 	bl	8001f30 <DWT_Delay>

}
 8000f9e:	bd08      	pop	{r3, pc}

08000fa0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000fa0:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fa2:	b938      	cbnz	r0, 8000fb4 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <NRF24_csn+0x24>)
 8000fa8:	8819      	ldrh	r1, [r3, #0]
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <NRF24_csn+0x28>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	f001 fc97 	bl	80028e0 <HAL_GPIO_WritePin>
}
 8000fb2:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <NRF24_csn+0x24>)
 8000fb8:	8819      	ldrh	r1, [r3, #0]
 8000fba:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <NRF24_csn+0x28>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	f001 fc8f 	bl	80028e0 <HAL_GPIO_WritePin>
 8000fc2:	e7f6      	b.n	8000fb2 <NRF24_csn+0x12>
 8000fc4:	20000256 	.word	0x20000256
 8000fc8:	20000258 	.word	0x20000258

08000fcc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000fcc:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000fce:	b938      	cbnz	r0, 8000fe0 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <NRF24_ce+0x24>)
 8000fd4:	8819      	ldrh	r1, [r3, #0]
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <NRF24_ce+0x28>)
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	f001 fc81 	bl	80028e0 <HAL_GPIO_WritePin>
}
 8000fde:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <NRF24_ce+0x24>)
 8000fe4:	8819      	ldrh	r1, [r3, #0]
 8000fe6:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <NRF24_ce+0x28>)
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	f001 fc79 	bl	80028e0 <HAL_GPIO_WritePin>
 8000fee:	e7f6      	b.n	8000fde <NRF24_ce+0x12>
 8000ff0:	20000254 	.word	0x20000254
 8000ff4:	20000258 	.word	0x20000258

08000ff8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff ffce 	bl	8000fa0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001004:	f004 041f 	and.w	r4, r4, #31
 8001008:	a902      	add	r1, sp, #8
 800100a:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 800100e:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <NRF24_read_register+0x40>)
 8001010:	2302      	movs	r3, #2
 8001012:	2201      	movs	r2, #1
 8001014:	4620      	mov	r0, r4
 8001016:	f002 f977 	bl	8003308 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1,2);
 800101a:	2302      	movs	r3, #2
 800101c:	2201      	movs	r2, #1
 800101e:	f10d 0105 	add.w	r1, sp, #5
 8001022:	4620      	mov	r0, r4
 8001024:	f002 fb54 	bl	80036d0 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	retData = spiBuf[1];
 8001028:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 800102c:	2001      	movs	r0, #1
 800102e:	f7ff ffb7 	bl	8000fa0 <NRF24_csn>
	return retData;
}
 8001032:	4620      	mov	r0, r4
 8001034:	b002      	add	sp, #8
 8001036:	bd10      	pop	{r4, pc}
 8001038:	2000025c 	.word	0x2000025c

0800103c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800103c:	b570      	push	{r4, r5, r6, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	4604      	mov	r4, r0
 8001042:	460d      	mov	r5, r1
 8001044:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff ffaa 	bl	8000fa0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800104c:	f004 041f 	and.w	r4, r4, #31
 8001050:	a902      	add	r1, sp, #8
 8001052:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8001056:	4c08      	ldr	r4, [pc, #32]	; (8001078 <NRF24_read_registerN+0x3c>)
 8001058:	2302      	movs	r3, #2
 800105a:	2201      	movs	r2, #1
 800105c:	4620      	mov	r0, r4
 800105e:	f002 f953 	bl	8003308 <HAL_SPI_Transmit>
	//while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, len,2);
 8001062:	2302      	movs	r3, #2
 8001064:	4632      	mov	r2, r6
 8001066:	4629      	mov	r1, r5
 8001068:	4620      	mov	r0, r4
 800106a:	f002 fb31 	bl	80036d0 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff ff96 	bl	8000fa0 <NRF24_csn>
}
 8001074:	b002      	add	sp, #8
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	2000025c 	.word	0x2000025c

0800107c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800107c:	b530      	push	{r4, r5, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	4604      	mov	r4, r0
 8001082:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff ff8b 	bl	8000fa0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800108a:	f044 0420 	orr.w	r4, r4, #32
 800108e:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 8001092:	f88d 5005 	strb.w	r5, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2,2);
 8001096:	2302      	movs	r3, #2
 8001098:	461a      	mov	r2, r3
 800109a:	a901      	add	r1, sp, #4
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <NRF24_write_register+0x30>)
 800109e:	f002 f933 	bl	8003308 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff ff7c 	bl	8000fa0 <NRF24_csn>
}
 80010a8:	b003      	add	sp, #12
 80010aa:	bd30      	pop	{r4, r5, pc}
 80010ac:	2000025c 	.word	0x2000025c

080010b0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	4604      	mov	r4, r0
 80010b6:	460d      	mov	r5, r1
 80010b8:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff ff70 	bl	8000fa0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80010c0:	f044 0420 	orr.w	r4, r4, #32
 80010c4:	a902      	add	r1, sp, #8
 80010c6:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 80010ca:	4c08      	ldr	r4, [pc, #32]	; (80010ec <NRF24_write_registerN+0x3c>)
 80010cc:	2302      	movs	r3, #2
 80010ce:	2201      	movs	r2, #1
 80010d0:	4620      	mov	r0, r4
 80010d2:	f002 f919 	bl	8003308 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len,2);
 80010d6:	2302      	movs	r3, #2
 80010d8:	4632      	mov	r2, r6
 80010da:	4629      	mov	r1, r5
 80010dc:	4620      	mov	r0, r4
 80010de:	f002 f913 	bl	8003308 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f7ff ff5c 	bl	8000fa0 <NRF24_csn>
}
 80010e8:	b002      	add	sp, #8
 80010ea:	bd70      	pop	{r4, r5, r6, pc}
 80010ec:	2000025c 	.word	0x2000025c

080010f0 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80010f0:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80010f2:	21ff      	movs	r1, #255	; 0xff
 80010f4:	20e1      	movs	r0, #225	; 0xe1
 80010f6:	f7ff ffc1 	bl	800107c <NRF24_write_register>
}
 80010fa:	bd08      	pop	{r3, pc}

080010fc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80010fc:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80010fe:	21ff      	movs	r1, #255	; 0xff
 8001100:	20e2      	movs	r0, #226	; 0xe2
 8001102:	f7ff ffbb 	bl	800107c <NRF24_write_register>
}
 8001106:	bd08      	pop	{r3, pc}

08001108 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001108:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800110a:	2007      	movs	r0, #7
 800110c:	f7ff ff74 	bl	8000ff8 <NRF24_read_register>
	return statReg;
}
 8001110:	bd08      	pop	{r3, pc}
	...

08001114 <NRF24_startListening>:
	NRF24_powerDown();

}
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001114:	b508      	push	{r3, lr}
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff ff6e 	bl	8000ff8 <NRF24_read_register>
 800111c:	f040 0103 	orr.w	r1, r0, #3
 8001120:	b2c9      	uxtb	r1, r1
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff ffaa 	bl	800107c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <NRF24_startListening+0x40>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	4313      	orrs	r3, r2
 8001130:	d10a      	bne.n	8001148 <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 8001132:	f7ff ffdd 	bl	80010f0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001136:	f7ff ffe1 	bl	80010fc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f7ff ff46 	bl	8000fcc <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001140:	2096      	movs	r0, #150	; 0x96
 8001142:	f7ff ff29 	bl	8000f98 <NRF24_DelayMicroSeconds>
}
 8001146:	bd08      	pop	{r3, pc}
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8001148:	2205      	movs	r2, #5
 800114a:	4902      	ldr	r1, [pc, #8]	; (8001154 <NRF24_startListening+0x40>)
 800114c:	200a      	movs	r0, #10
 800114e:	f7ff ffaf 	bl	80010b0 <NRF24_write_registerN>
 8001152:	e7ee      	b.n	8001132 <NRF24_startListening+0x1e>
 8001154:	200002f8 	.word	0x200002f8

08001158 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001158:	b510      	push	{r4, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 8001160:	4604      	mov	r4, r0
 8001162:	b920      	cbnz	r0, 800116e <NRF24_openReadingPipe+0x16>
		pipe0_reading_address = address;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <NRF24_openReadingPipe+0x60>)
 8001166:	e9dd 0100 	ldrd	r0, r1, [sp]
 800116a:	e9c3 0100 	strd	r0, r1, [r3]

	if(number <= 6)
 800116e:	2c06      	cmp	r4, #6
 8001170:	d818      	bhi.n	80011a4 <NRF24_openReadingPipe+0x4c>
	{
		if(number < 2)
 8001172:	2c01      	cmp	r4, #1
 8001174:	d918      	bls.n	80011a8 <NRF24_openReadingPipe+0x50>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001176:	2201      	movs	r2, #1
 8001178:	4669      	mov	r1, sp
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <NRF24_openReadingPipe+0x64>)
 800117c:	5d18      	ldrb	r0, [r3, r4]
 800117e:	f7ff ff97 	bl	80010b0 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <NRF24_openReadingPipe+0x68>)
 8001184:	7819      	ldrb	r1, [r3, #0]
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <NRF24_openReadingPipe+0x6c>)
 8001188:	5d18      	ldrb	r0, [r3, r4]
 800118a:	f7ff ff77 	bl	800107c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800118e:	2002      	movs	r0, #2
 8001190:	f7ff ff32 	bl	8000ff8 <NRF24_read_register>
 8001194:	b240      	sxtb	r0, r0
 8001196:	2101      	movs	r1, #1
 8001198:	40a1      	lsls	r1, r4
 800119a:	4301      	orrs	r1, r0
 800119c:	b2c9      	uxtb	r1, r1
 800119e:	2002      	movs	r0, #2
 80011a0:	f7ff ff6c 	bl	800107c <NRF24_write_register>
	}

}
 80011a4:	b002      	add	sp, #8
 80011a6:	bd10      	pop	{r4, pc}
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80011a8:	2205      	movs	r2, #5
 80011aa:	4669      	mov	r1, sp
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <NRF24_openReadingPipe+0x64>)
 80011ae:	5d18      	ldrb	r0, [r3, r4]
 80011b0:	f7ff ff7e 	bl	80010b0 <NRF24_write_registerN>
 80011b4:	e7e5      	b.n	8001182 <NRF24_openReadingPipe+0x2a>
 80011b6:	bf00      	nop
 80011b8:	200002f8 	.word	0x200002f8
 80011bc:	08009268 	.word	0x08009268
 80011c0:	200002f4 	.word	0x200002f4
 80011c4:	08009270 	.word	0x08009270

080011c8 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80011c8:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80011ca:	f001 010f 	and.w	r1, r1, #15
 80011ce:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80011d2:	b2c9      	uxtb	r1, r1
 80011d4:	2004      	movs	r0, #4
 80011d6:	f7ff ff51 	bl	800107c <NRF24_write_register>
}
 80011da:	bd08      	pop	{r3, pc}

080011dc <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80011dc:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80011de:	4601      	mov	r1, r0
 80011e0:	287f      	cmp	r0, #127	; 0x7f
 80011e2:	bf28      	it	cs
 80011e4:	217f      	movcs	r1, #127	; 0x7f
 80011e6:	2005      	movs	r0, #5
 80011e8:	f7ff ff48 	bl	800107c <NRF24_write_register>
}
 80011ec:	bd08      	pop	{r3, pc}
	...

080011f0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 80011f0:	2820      	cmp	r0, #32
 80011f2:	bf28      	it	cs
 80011f4:	2020      	movcs	r0, #32
 80011f6:	4b01      	ldr	r3, [pc, #4]	; (80011fc <NRF24_setPayloadSize+0xc>)
 80011f8:	7018      	strb	r0, [r3, #0]
}
 80011fa:	4770      	bx	lr
 80011fc:	200002f4 	.word	0x200002f4

08001200 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8001200:	4b01      	ldr	r3, [pc, #4]	; (8001208 <NRF24_getPayloadSize+0x8>)
 8001202:	7818      	ldrb	r0, [r3, #0]
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200002f4 	.word	0x200002f4

0800120c <NRF24_read_payload>:
{
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	4606      	mov	r6, r0
 8001212:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001214:	f7ff fff4 	bl	8001200 <NRF24_getPayloadSize>
 8001218:	4604      	mov	r4, r0
 800121a:	42a8      	cmp	r0, r5
 800121c:	d817      	bhi.n	800124e <NRF24_read_payload+0x42>
	NRF24_csn(0);
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff febe 	bl	8000fa0 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001224:	a902      	add	r1, sp, #8
 8001226:	2361      	movs	r3, #97	; 0x61
 8001228:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1,2);
 800122c:	4d09      	ldr	r5, [pc, #36]	; (8001254 <NRF24_read_payload+0x48>)
 800122e:	2302      	movs	r3, #2
 8001230:	2201      	movs	r2, #1
 8001232:	4628      	mov	r0, r5
 8001234:	f002 f868 	bl	8003308 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len,2);
 8001238:	2302      	movs	r3, #2
 800123a:	b2a2      	uxth	r2, r4
 800123c:	4631      	mov	r1, r6
 800123e:	4628      	mov	r0, r5
 8001240:	f002 fa46 	bl	80036d0 <HAL_SPI_Receive>
	NRF24_csn(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff feab 	bl	8000fa0 <NRF24_csn>
}
 800124a:	b002      	add	sp, #8
 800124c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800124e:	462c      	mov	r4, r5
 8001250:	e7e5      	b.n	800121e <NRF24_read_payload+0x12>
 8001252:	bf00      	nop
 8001254:	2000025c 	.word	0x2000025c

08001258 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001258:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800125a:	2060      	movs	r0, #96	; 0x60
 800125c:	f7ff fecc 	bl	8000ff8 <NRF24_read_register>
}
 8001260:	bd08      	pop	{r3, pc}

08001262 <NRF24_read>:
{
 8001262:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 8001264:	f7ff ffd2 	bl	800120c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001268:	2017      	movs	r0, #23
 800126a:	f7ff fec5 	bl	8000ff8 <NRF24_read_register>
 800126e:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 8001272:	f7ff ff43 	bl	80010fc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001276:	f7ff ffef 	bl	8001258 <NRF24_getDynamicPayloadSize>
}
 800127a:	4620      	mov	r0, r4
 800127c:	bd10      	pop	{r4, pc}

0800127e <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 800127e:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001280:	201d      	movs	r0, #29
 8001282:	f7ff feb9 	bl	8000ff8 <NRF24_read_register>
 8001286:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800128a:	201d      	movs	r0, #29
 800128c:	f7ff fef6 	bl	800107c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001290:	2100      	movs	r1, #0
 8001292:	201c      	movs	r0, #28
 8001294:	f7ff fef2 	bl	800107c <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 8001298:	bd08      	pop	{r3, pc}

0800129a <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800129a:	b508      	push	{r3, lr}
	if ( enable )
 800129c:	b920      	cbnz	r0, 80012a8 <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 800129e:	2100      	movs	r1, #0
 80012a0:	2001      	movs	r0, #1
 80012a2:	f7ff feeb 	bl	800107c <NRF24_write_register>
}
 80012a6:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 80012a8:	213f      	movs	r1, #63	; 0x3f
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff fee6 	bl	800107c <NRF24_write_register>
 80012b0:	e7f9      	b.n	80012a6 <NRF24_setAutoAck+0xc>

080012b2 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80012b2:	b510      	push	{r4, lr}
 80012b4:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80012b6:	2006      	movs	r0, #6
 80012b8:	f7ff fe9e 	bl	8000ff8 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012bc:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 80012c0:	2c03      	cmp	r4, #3
 80012c2:	d009      	beq.n	80012d8 <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 80012c4:	2c02      	cmp	r4, #2
 80012c6:	d00d      	beq.n	80012e4 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 80012c8:	2c01      	cmp	r4, #1
 80012ca:	d00e      	beq.n	80012ea <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 80012cc:	b134      	cbz	r4, 80012dc <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 80012ce:	2c04      	cmp	r4, #4
 80012d0:	d104      	bne.n	80012dc <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012d2:	f041 0106 	orr.w	r1, r1, #6
 80012d6:	e001      	b.n	80012dc <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012d8:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 80012dc:	2006      	movs	r0, #6
 80012de:	f7ff fecd 	bl	800107c <NRF24_write_register>
}
 80012e2:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 80012e4:	f041 0104 	orr.w	r1, r1, #4
 80012e8:	e7f8      	b.n	80012dc <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 80012ea:	f041 0102 	orr.w	r1, r1, #2
 80012ee:	e7f5      	b.n	80012dc <NRF24_setPALevel+0x2a>

080012f0 <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80012f0:	b538      	push	{r3, r4, r5, lr}
 80012f2:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80012f4:	2006      	movs	r0, #6
 80012f6:	f7ff fe7f 	bl	8000ff8 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80012fa:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 80012fe:	2d02      	cmp	r5, #2
 8001300:	d00c      	beq.n	800131c <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 8001302:	2d01      	cmp	r5, #1
 8001304:	d00d      	beq.n	8001322 <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 8001306:	4621      	mov	r1, r4
 8001308:	2006      	movs	r0, #6
 800130a:	f7ff feb7 	bl	800107c <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800130e:	2006      	movs	r0, #6
 8001310:	f7ff fe72 	bl	8000ff8 <NRF24_read_register>
 8001314:	42a0      	cmp	r0, r4
 8001316:	d007      	beq.n	8001328 <NRF24_setDataRate+0x38>
	bool result = false;
 8001318:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 800131a:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 800131c:	f044 0420 	orr.w	r4, r4, #32
 8001320:	e7f1      	b.n	8001306 <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 8001322:	f044 0408 	orr.w	r4, r4, #8
 8001326:	e7ee      	b.n	8001306 <NRF24_setDataRate+0x16>
		result = true;
 8001328:	2001      	movs	r0, #1
 800132a:	e7f6      	b.n	800131a <NRF24_setDataRate+0x2a>

0800132c <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800132c:	b510      	push	{r4, lr}
 800132e:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fe61 	bl	8000ff8 <NRF24_read_register>
 8001336:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 800133a:	b11c      	cbz	r4, 8001344 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 800133c:	2c01      	cmp	r4, #1
 800133e:	d005      	beq.n	800134c <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 8001340:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fe99 	bl	800107c <NRF24_write_register>
}
 800134a:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 800134c:	f041 0108 	orr.w	r1, r1, #8
 8001350:	e7f8      	b.n	8001344 <NRF24_setCRCLength+0x18>

08001352 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001352:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fe4f 	bl	8000ff8 <NRF24_read_register>
 800135a:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fe8c 	bl	800107c <NRF24_write_register>
}
 8001364:	bd08      	pop	{r3, pc}

08001366 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001366:	b570      	push	{r4, r5, r6, lr}
 8001368:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 800136a:	f7ff fecd 	bl	8001108 <NRF24_get_status>
 800136e:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2501      	movne	r5, #1
 8001378:	2500      	moveq	r5, #0

	if (result)
 800137a:	d00b      	beq.n	8001394 <NRF24_availablePipe+0x2e>
 800137c:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 800137e:	b116      	cbz	r6, 8001386 <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001380:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8001384:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	2007      	movs	r0, #7
 800138a:	f7ff fe77 	bl	800107c <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 800138e:	f014 0f20 	tst.w	r4, #32
 8001392:	d101      	bne.n	8001398 <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 8001394:	4628      	mov	r0, r5
 8001396:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001398:	2120      	movs	r1, #32
 800139a:	2007      	movs	r0, #7
 800139c:	f7ff fe6e 	bl	800107c <NRF24_write_register>
 80013a0:	e7f8      	b.n	8001394 <NRF24_availablePipe+0x2e>

080013a2 <NRF24_available>:
{
 80013a2:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff ffde 	bl	8001366 <NRF24_availablePipe>
}
 80013aa:	bd08      	pop	{r3, pc}

080013ac <NRF24_writeAckPayload>:
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4604      	mov	r4, r0
 80013b0:	460d      	mov	r5, r1
	const uint8_t* current = (uint8_t *)buf;
	const uint8_t max_payload_size = 32;
	uint8_t data_len = MIN(len,max_payload_size);
 80013b2:	2a20      	cmp	r2, #32
 80013b4:	bf28      	it	cs
 80013b6:	2220      	movcs	r2, #32
 80013b8:	4616      	mov	r6, r2

	NRF24_csn(0);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fdf0 	bl	8000fa0 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80013c0:	f004 0007 	and.w	r0, r4, #7
 80013c4:	4632      	mov	r2, r6
 80013c6:	4629      	mov	r1, r5
 80013c8:	f040 00a8 	orr.w	r0, r0, #168	; 0xa8
 80013cc:	f7ff fe70 	bl	80010b0 <NRF24_write_registerN>
	NRF24_csn(1);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff fde5 	bl	8000fa0 <NRF24_csn>
}
 80013d6:	bd70      	pop	{r4, r5, r6, pc}

080013d8 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80013d8:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013da:	2170      	movs	r1, #112	; 0x70
 80013dc:	2007      	movs	r0, #7
 80013de:	f7ff fe4d 	bl	800107c <NRF24_write_register>
}
 80013e2:	bd08      	pop	{r3, pc}

080013e4 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80013e4:	b500      	push	{lr}
 80013e6:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fdd9 	bl	8000fa0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80013ee:	2350      	movs	r3, #80	; 0x50
 80013f0:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 80013f4:	2373      	movs	r3, #115	; 0x73
 80013f6:	f88d 3005 	strb.w	r3, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2,2);
 80013fa:	2302      	movs	r3, #2
 80013fc:	461a      	mov	r2, r3
 80013fe:	a901      	add	r1, sp, #4
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <NRF24_ACTIVATE_cmd+0x30>)
 8001402:	f001 ff81 	bl	8003308 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}

	NRF24_csn(1);
 8001406:	2001      	movs	r0, #1
 8001408:	f7ff fdca 	bl	8000fa0 <NRF24_csn>
}
 800140c:	b003      	add	sp, #12
 800140e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001412:	bf00      	nop
 8001414:	2000025c 	.word	0x2000025c

08001418 <NRF24_enableAckPayload>:
{
 8001418:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800141a:	201d      	movs	r0, #29
 800141c:	f7ff fdec 	bl	8000ff8 <NRF24_read_register>
 8001420:	f040 0106 	orr.w	r1, r0, #6
 8001424:	b2c9      	uxtb	r1, r1
 8001426:	201d      	movs	r0, #29
 8001428:	f7ff fe28 	bl	800107c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800142c:	201d      	movs	r0, #29
 800142e:	f7ff fde3 	bl	8000ff8 <NRF24_read_register>
 8001432:	b148      	cbz	r0, 8001448 <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001434:	201c      	movs	r0, #28
 8001436:	f7ff fddf 	bl	8000ff8 <NRF24_read_register>
 800143a:	f040 0103 	orr.w	r1, r0, #3
 800143e:	b2c9      	uxtb	r1, r1
 8001440:	201c      	movs	r0, #28
 8001442:	f7ff fe1b 	bl	800107c <NRF24_write_register>
}
 8001446:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 8001448:	f7ff ffcc 	bl	80013e4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800144c:	201d      	movs	r0, #29
 800144e:	f7ff fdd3 	bl	8000ff8 <NRF24_read_register>
 8001452:	f040 0106 	orr.w	r1, r0, #6
 8001456:	b2c9      	uxtb	r1, r1
 8001458:	201d      	movs	r0, #29
 800145a:	f7ff fe0f 	bl	800107c <NRF24_write_register>
 800145e:	e7e9      	b.n	8001434 <NRF24_enableAckPayload+0x1c>

08001460 <NRF24_begin>:
{
 8001460:	b082      	sub	sp, #8
 8001462:	b570      	push	{r4, r5, r6, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	4606      	mov	r6, r0
 8001468:	460d      	mov	r5, r1
 800146a:	4614      	mov	r4, r2
 800146c:	9307      	str	r3, [sp, #28]
	memcpy(&nrf24_hspi, &hspi2, sizeof(hspi2));
 800146e:	2258      	movs	r2, #88	; 0x58
 8001470:	4961      	ldr	r1, [pc, #388]	; (80015f8 <NRF24_begin+0x198>)
 8001472:	4862      	ldr	r0, [pc, #392]	; (80015fc <NRF24_begin+0x19c>)
 8001474:	f004 f9bf 	bl	80057f6 <memcpy>
	nrf24_PORT = nrf24PORT;
 8001478:	4b61      	ldr	r3, [pc, #388]	; (8001600 <NRF24_begin+0x1a0>)
 800147a:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800147c:	4b61      	ldr	r3, [pc, #388]	; (8001604 <NRF24_begin+0x1a4>)
 800147e:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001480:	4b61      	ldr	r3, [pc, #388]	; (8001608 <NRF24_begin+0x1a8>)
 8001482:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff fd8b 	bl	8000fa0 <NRF24_csn>
	NRF24_ce(0);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff fd9e 	bl	8000fcc <NRF24_ce>
	HAL_Delay(5);
 8001490:	2005      	movs	r0, #5
 8001492:	f000 fd8f 	bl	8001fb4 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8001496:	2108      	movs	r1, #8
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff fdef 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800149e:	213f      	movs	r1, #63	; 0x3f
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff fdeb 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80014a6:	2103      	movs	r1, #3
 80014a8:	2002      	movs	r0, #2
 80014aa:	f7ff fde7 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80014ae:	2103      	movs	r1, #3
 80014b0:	4608      	mov	r0, r1
 80014b2:	f7ff fde3 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80014b6:	2103      	movs	r1, #3
 80014b8:	2004      	movs	r0, #4
 80014ba:	f7ff fddf 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80014be:	2102      	movs	r1, #2
 80014c0:	2005      	movs	r0, #5
 80014c2:	f7ff fddb 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80014c6:	210f      	movs	r1, #15
 80014c8:	2006      	movs	r0, #6
 80014ca:	f7ff fdd7 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80014ce:	210e      	movs	r1, #14
 80014d0:	2007      	movs	r0, #7
 80014d2:	f7ff fdd3 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80014d6:	2100      	movs	r1, #0
 80014d8:	2008      	movs	r0, #8
 80014da:	f7ff fdcf 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80014de:	2100      	movs	r1, #0
 80014e0:	2009      	movs	r0, #9
 80014e2:	f7ff fdcb 	bl	800107c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80014e6:	24e7      	movs	r4, #231	; 0xe7
 80014e8:	f88d 4004 	strb.w	r4, [sp, #4]
 80014ec:	f88d 4003 	strb.w	r4, [sp, #3]
 80014f0:	f88d 4002 	strb.w	r4, [sp, #2]
 80014f4:	f88d 4001 	strb.w	r4, [sp, #1]
 80014f8:	ad02      	add	r5, sp, #8
 80014fa:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80014fe:	2205      	movs	r2, #5
 8001500:	4629      	mov	r1, r5
 8001502:	200a      	movs	r0, #10
 8001504:	f7ff fdd4 	bl	80010b0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8001508:	23c2      	movs	r3, #194	; 0xc2
 800150a:	f88d 3004 	strb.w	r3, [sp, #4]
 800150e:	f88d 3003 	strb.w	r3, [sp, #3]
 8001512:	f88d 3002 	strb.w	r3, [sp, #2]
 8001516:	f88d 3001 	strb.w	r3, [sp, #1]
 800151a:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800151e:	2205      	movs	r2, #5
 8001520:	4629      	mov	r1, r5
 8001522:	200b      	movs	r0, #11
 8001524:	f7ff fdc4 	bl	80010b0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001528:	21c3      	movs	r1, #195	; 0xc3
 800152a:	200c      	movs	r0, #12
 800152c:	f7ff fda6 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001530:	21c4      	movs	r1, #196	; 0xc4
 8001532:	200d      	movs	r0, #13
 8001534:	f7ff fda2 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001538:	21c5      	movs	r1, #197	; 0xc5
 800153a:	200e      	movs	r0, #14
 800153c:	f7ff fd9e 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001540:	21c6      	movs	r1, #198	; 0xc6
 8001542:	200f      	movs	r0, #15
 8001544:	f7ff fd9a 	bl	800107c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001548:	f88d 4004 	strb.w	r4, [sp, #4]
 800154c:	f88d 4003 	strb.w	r4, [sp, #3]
 8001550:	f88d 4002 	strb.w	r4, [sp, #2]
 8001554:	f88d 4001 	strb.w	r4, [sp, #1]
 8001558:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800155c:	2205      	movs	r2, #5
 800155e:	4629      	mov	r1, r5
 8001560:	2010      	movs	r0, #16
 8001562:	f7ff fda5 	bl	80010b0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001566:	2100      	movs	r1, #0
 8001568:	2011      	movs	r0, #17
 800156a:	f7ff fd87 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800156e:	2100      	movs	r1, #0
 8001570:	2012      	movs	r0, #18
 8001572:	f7ff fd83 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001576:	2100      	movs	r1, #0
 8001578:	2013      	movs	r0, #19
 800157a:	f7ff fd7f 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800157e:	2100      	movs	r1, #0
 8001580:	2014      	movs	r0, #20
 8001582:	f7ff fd7b 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001586:	2100      	movs	r1, #0
 8001588:	2015      	movs	r0, #21
 800158a:	f7ff fd77 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800158e:	2100      	movs	r1, #0
 8001590:	2016      	movs	r0, #22
 8001592:	f7ff fd73 	bl	800107c <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8001596:	f7ff ff25 	bl	80013e4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800159a:	2100      	movs	r1, #0
 800159c:	201c      	movs	r0, #28
 800159e:	f7ff fd6d 	bl	800107c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80015a2:	2100      	movs	r1, #0
 80015a4:	201d      	movs	r0, #29
 80015a6:	f7ff fd69 	bl	800107c <NRF24_write_register>
	NRF24_setRetries(15, 15);
 80015aa:	210f      	movs	r1, #15
 80015ac:	4608      	mov	r0, r1
 80015ae:	f7ff fe0b 	bl	80011c8 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 80015b2:	2002      	movs	r0, #2
 80015b4:	f7ff fe7d 	bl	80012b2 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fe99 	bl	80012f0 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 80015be:	2002      	movs	r0, #2
 80015c0:	f7ff feb4 	bl	800132c <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 80015c4:	f7ff fe5b 	bl	800127e <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 80015c8:	2020      	movs	r0, #32
 80015ca:	f7ff fe11 	bl	80011f0 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff fe63 	bl	800129a <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 80015d4:	f7ff ff20 	bl	8001418 <NRF24_enableAckPayload>
	NRF24_resetStatus();
 80015d8:	f7ff fefe 	bl	80013d8 <NRF24_resetStatus>
	NRF24_setChannel(76);
 80015dc:	204c      	movs	r0, #76	; 0x4c
 80015de:	f7ff fdfd 	bl	80011dc <NRF24_setChannel>
	NRF24_flush_tx();
 80015e2:	f7ff fd85 	bl	80010f0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80015e6:	f7ff fd89 	bl	80010fc <NRF24_flush_rx>
	NRF24_powerDown();
 80015ea:	f7ff feb2 	bl	8001352 <NRF24_powerDown>
}
 80015ee:	b002      	add	sp, #8
 80015f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80015f4:	b002      	add	sp, #8
 80015f6:	4770      	bx	lr
 80015f8:	20000938 	.word	0x20000938
 80015fc:	2000025c 	.word	0x2000025c
 8001600:	20000258 	.word	0x20000258
 8001604:	20000256 	.word	0x20000256
 8001608:	20000254 	.word	0x20000254

0800160c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001610:	ac07      	add	r4, sp, #28
 8001612:	4dc4      	ldr	r5, [pc, #784]	; (8001924 <printRadioSettings+0x318>)
 8001614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	f824 3b02 	strh.w	r3, [r4], #2
 8001626:	0c1b      	lsrs	r3, r3, #16
 8001628:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800162a:	a807      	add	r0, sp, #28
 800162c:	f7fe fdd8 	bl	80001e0 <strlen>
 8001630:	230a      	movs	r3, #10
 8001632:	b282      	uxth	r2, r0
 8001634:	a907      	add	r1, sp, #28
 8001636:	48bc      	ldr	r0, [pc, #752]	; (8001928 <printRadioSettings+0x31c>)
 8001638:	f002 fea4 	bl	8004384 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fcdb 	bl	8000ff8 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8001642:	f010 0f08 	tst.w	r0, #8
 8001646:	f000 8261 	beq.w	8001b0c <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800164a:	f010 0f04 	tst.w	r0, #4
 800164e:	f000 8251 	beq.w	8001af4 <printRadioSettings+0x4e8>
 8001652:	ac07      	add	r4, sp, #28
 8001654:	4db5      	ldr	r5, [pc, #724]	; (800192c <printRadioSettings+0x320>)
 8001656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800165e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001662:	a807      	add	r0, sp, #28
 8001664:	f7fe fdbc 	bl	80001e0 <strlen>
 8001668:	4caf      	ldr	r4, [pc, #700]	; (8001928 <printRadioSettings+0x31c>)
 800166a:	230a      	movs	r3, #10
 800166c:	b282      	uxth	r2, r0
 800166e:	a907      	add	r1, sp, #28
 8001670:	4620      	mov	r0, r4
 8001672:	f002 fe87 	bl	8004384 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff fcbe 	bl	8000ff8 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800167c:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001680:	9303      	str	r3, [sp, #12]
 8001682:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001698:	f000 0201 	and.w	r2, r0, #1
 800169c:	49a4      	ldr	r1, [pc, #656]	; (8001930 <printRadioSettings+0x324>)
 800169e:	a807      	add	r0, sp, #28
 80016a0:	f004 ff00 	bl	80064a4 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a4:	a807      	add	r0, sp, #28
 80016a6:	f7fe fd9b 	bl	80001e0 <strlen>
 80016aa:	230a      	movs	r3, #10
 80016ac:	b282      	uxth	r2, r0
 80016ae:	a907      	add	r1, sp, #28
 80016b0:	4620      	mov	r0, r4
 80016b2:	f002 fe67 	bl	8004384 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80016b6:	2002      	movs	r0, #2
 80016b8:	f7ff fc9e 	bl	8000ff8 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016bc:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80016c0:	9303      	str	r3, [sp, #12]
 80016c2:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80016d8:	f000 0201 	and.w	r2, r0, #1
 80016dc:	4995      	ldr	r1, [pc, #596]	; (8001934 <printRadioSettings+0x328>)
 80016de:	a807      	add	r0, sp, #28
 80016e0:	f004 fee0 	bl	80064a4 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e4:	a807      	add	r0, sp, #28
 80016e6:	f7fe fd7b 	bl	80001e0 <strlen>
 80016ea:	230a      	movs	r3, #10
 80016ec:	b282      	uxth	r2, r0
 80016ee:	a907      	add	r1, sp, #28
 80016f0:	4620      	mov	r0, r4
 80016f2:	f002 fe47 	bl	8004384 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80016f6:	2003      	movs	r0, #3
 80016f8:	f7ff fc7e 	bl	8000ff8 <NRF24_read_register>
 80016fc:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001700:	3202      	adds	r2, #2
 8001702:	498d      	ldr	r1, [pc, #564]	; (8001938 <printRadioSettings+0x32c>)
 8001704:	a807      	add	r0, sp, #28
 8001706:	f004 fecd 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170a:	a807      	add	r0, sp, #28
 800170c:	f7fe fd68 	bl	80001e0 <strlen>
 8001710:	230a      	movs	r3, #10
 8001712:	b282      	uxth	r2, r0
 8001714:	a907      	add	r1, sp, #28
 8001716:	4620      	mov	r0, r4
 8001718:	f002 fe34 	bl	8004384 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800171c:	2005      	movs	r0, #5
 800171e:	f7ff fc6b 	bl	8000ff8 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001722:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001726:	4985      	ldr	r1, [pc, #532]	; (800193c <printRadioSettings+0x330>)
 8001728:	a807      	add	r0, sp, #28
 800172a:	f004 febb 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172e:	a807      	add	r0, sp, #28
 8001730:	f7fe fd56 	bl	80001e0 <strlen>
 8001734:	230a      	movs	r3, #10
 8001736:	b282      	uxth	r2, r0
 8001738:	a907      	add	r1, sp, #28
 800173a:	4620      	mov	r0, r4
 800173c:	f002 fe22 	bl	8004384 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001740:	2006      	movs	r0, #6
 8001742:	f7ff fc59 	bl	8000ff8 <NRF24_read_register>
 8001746:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001748:	f010 0f08 	tst.w	r0, #8
 800174c:	f000 81e5 	beq.w	8001b1a <printRadioSettings+0x50e>
 8001750:	ad07      	add	r5, sp, #28
 8001752:	4e7b      	ldr	r6, [pc, #492]	; (8001940 <printRadioSettings+0x334>)
 8001754:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001758:	e896 0003 	ldmia.w	r6, {r0, r1}
 800175c:	f845 0b04 	str.w	r0, [r5], #4
 8001760:	f825 1b02 	strh.w	r1, [r5], #2
 8001764:	0c09      	lsrs	r1, r1, #16
 8001766:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001768:	a807      	add	r0, sp, #28
 800176a:	f7fe fd39 	bl	80001e0 <strlen>
 800176e:	230a      	movs	r3, #10
 8001770:	b282      	uxth	r2, r0
 8001772:	a907      	add	r1, sp, #28
 8001774:	486c      	ldr	r0, [pc, #432]	; (8001928 <printRadioSettings+0x31c>)
 8001776:	f002 fe05 	bl	8004384 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 800177a:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800177e:	2c00      	cmp	r4, #0
 8001780:	f000 81d8 	beq.w	8001b34 <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001784:	2c01      	cmp	r4, #1
 8001786:	f000 81dc 	beq.w	8001b42 <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800178a:	2c02      	cmp	r4, #2
 800178c:	f000 81e0 	beq.w	8001b50 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001790:	2c03      	cmp	r4, #3
 8001792:	f000 81e7 	beq.w	8001b64 <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001796:	a807      	add	r0, sp, #28
 8001798:	f7fe fd22 	bl	80001e0 <strlen>
 800179c:	4c62      	ldr	r4, [pc, #392]	; (8001928 <printRadioSettings+0x31c>)
 800179e:	230a      	movs	r3, #10
 80017a0:	b282      	uxth	r2, r0
 80017a2:	a907      	add	r1, sp, #28
 80017a4:	4620      	mov	r0, r4
 80017a6:	f002 fded 	bl	8004384 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80017aa:	2205      	movs	r2, #5
 80017ac:	a905      	add	r1, sp, #20
 80017ae:	200a      	movs	r0, #10
 80017b0:	f7ff fc44 	bl	800103c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80017b4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80017b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80017bc:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80017c0:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80017c4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80017c8:	9502      	str	r5, [sp, #8]
 80017ca:	9001      	str	r0, [sp, #4]
 80017cc:	9100      	str	r1, [sp, #0]
 80017ce:	495d      	ldr	r1, [pc, #372]	; (8001944 <printRadioSettings+0x338>)
 80017d0:	a807      	add	r0, sp, #28
 80017d2:	f004 fe67 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017d6:	a807      	add	r0, sp, #28
 80017d8:	f7fe fd02 	bl	80001e0 <strlen>
 80017dc:	230a      	movs	r3, #10
 80017de:	b282      	uxth	r2, r0
 80017e0:	a907      	add	r1, sp, #28
 80017e2:	4620      	mov	r0, r4
 80017e4:	f002 fdce 	bl	8004384 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80017e8:	2205      	movs	r2, #5
 80017ea:	a905      	add	r1, sp, #20
 80017ec:	200b      	movs	r0, #11
 80017ee:	f7ff fc25 	bl	800103c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80017f2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80017f6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80017fa:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80017fe:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001802:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001806:	9502      	str	r5, [sp, #8]
 8001808:	9001      	str	r0, [sp, #4]
 800180a:	9100      	str	r1, [sp, #0]
 800180c:	494e      	ldr	r1, [pc, #312]	; (8001948 <printRadioSettings+0x33c>)
 800180e:	a807      	add	r0, sp, #28
 8001810:	f004 fe48 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001814:	a807      	add	r0, sp, #28
 8001816:	f7fe fce3 	bl	80001e0 <strlen>
 800181a:	230a      	movs	r3, #10
 800181c:	b282      	uxth	r2, r0
 800181e:	a907      	add	r1, sp, #28
 8001820:	4620      	mov	r0, r4
 8001822:	f002 fdaf 	bl	8004384 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001826:	2201      	movs	r2, #1
 8001828:	a905      	add	r1, sp, #20
 800182a:	200c      	movs	r0, #12
 800182c:	f7ff fc06 	bl	800103c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001830:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001834:	4945      	ldr	r1, [pc, #276]	; (800194c <printRadioSettings+0x340>)
 8001836:	a807      	add	r0, sp, #28
 8001838:	f004 fe34 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800183c:	a807      	add	r0, sp, #28
 800183e:	f7fe fccf 	bl	80001e0 <strlen>
 8001842:	230a      	movs	r3, #10
 8001844:	b282      	uxth	r2, r0
 8001846:	a907      	add	r1, sp, #28
 8001848:	4620      	mov	r0, r4
 800184a:	f002 fd9b 	bl	8004384 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800184e:	2201      	movs	r2, #1
 8001850:	a905      	add	r1, sp, #20
 8001852:	200d      	movs	r0, #13
 8001854:	f7ff fbf2 	bl	800103c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001858:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800185c:	493c      	ldr	r1, [pc, #240]	; (8001950 <printRadioSettings+0x344>)
 800185e:	a807      	add	r0, sp, #28
 8001860:	f004 fe20 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001864:	a807      	add	r0, sp, #28
 8001866:	f7fe fcbb 	bl	80001e0 <strlen>
 800186a:	230a      	movs	r3, #10
 800186c:	b282      	uxth	r2, r0
 800186e:	a907      	add	r1, sp, #28
 8001870:	4620      	mov	r0, r4
 8001872:	f002 fd87 	bl	8004384 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001876:	2201      	movs	r2, #1
 8001878:	a905      	add	r1, sp, #20
 800187a:	200e      	movs	r0, #14
 800187c:	f7ff fbde 	bl	800103c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001880:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001884:	4933      	ldr	r1, [pc, #204]	; (8001954 <printRadioSettings+0x348>)
 8001886:	a807      	add	r0, sp, #28
 8001888:	f004 fe0c 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800188c:	a807      	add	r0, sp, #28
 800188e:	f7fe fca7 	bl	80001e0 <strlen>
 8001892:	230a      	movs	r3, #10
 8001894:	b282      	uxth	r2, r0
 8001896:	a907      	add	r1, sp, #28
 8001898:	4620      	mov	r0, r4
 800189a:	f002 fd73 	bl	8004384 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800189e:	2201      	movs	r2, #1
 80018a0:	a905      	add	r1, sp, #20
 80018a2:	200f      	movs	r0, #15
 80018a4:	f7ff fbca 	bl	800103c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018a8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80018ac:	492a      	ldr	r1, [pc, #168]	; (8001958 <printRadioSettings+0x34c>)
 80018ae:	a807      	add	r0, sp, #28
 80018b0:	f004 fdf8 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018b4:	a807      	add	r0, sp, #28
 80018b6:	f7fe fc93 	bl	80001e0 <strlen>
 80018ba:	230a      	movs	r3, #10
 80018bc:	b282      	uxth	r2, r0
 80018be:	a907      	add	r1, sp, #28
 80018c0:	4620      	mov	r0, r4
 80018c2:	f002 fd5f 	bl	8004384 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80018c6:	2205      	movs	r2, #5
 80018c8:	a905      	add	r1, sp, #20
 80018ca:	2010      	movs	r0, #16
 80018cc:	f7ff fbb6 	bl	800103c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018d0:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80018d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80018d8:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80018dc:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80018e0:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80018e4:	9502      	str	r5, [sp, #8]
 80018e6:	9001      	str	r0, [sp, #4]
 80018e8:	9100      	str	r1, [sp, #0]
 80018ea:	491c      	ldr	r1, [pc, #112]	; (800195c <printRadioSettings+0x350>)
 80018ec:	a807      	add	r0, sp, #28
 80018ee:	f004 fdd9 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018f2:	a807      	add	r0, sp, #28
 80018f4:	f7fe fc74 	bl	80001e0 <strlen>
 80018f8:	230a      	movs	r3, #10
 80018fa:	b282      	uxth	r2, r0
 80018fc:	a907      	add	r1, sp, #28
 80018fe:	4620      	mov	r0, r4
 8001900:	f002 fd40 	bl	8004384 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001904:	2011      	movs	r0, #17
 8001906:	f7ff fb77 	bl	8000ff8 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800190a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800190e:	4914      	ldr	r1, [pc, #80]	; (8001960 <printRadioSettings+0x354>)
 8001910:	a807      	add	r0, sp, #28
 8001912:	f004 fdc7 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001916:	a807      	add	r0, sp, #28
 8001918:	f7fe fc62 	bl	80001e0 <strlen>
 800191c:	230a      	movs	r3, #10
 800191e:	b282      	uxth	r2, r0
 8001920:	e020      	b.n	8001964 <printRadioSettings+0x358>
 8001922:	bf00      	nop
 8001924:	08009278 	.word	0x08009278
 8001928:	200002b4 	.word	0x200002b4
 800192c:	080092ac 	.word	0x080092ac
 8001930:	080092f8 	.word	0x080092f8
 8001934:	0800933c 	.word	0x0800933c
 8001938:	08009388 	.word	0x08009388
 800193c:	080093a4 	.word	0x080093a4
 8001940:	080093b8 	.word	0x080093b8
 8001944:	08009438 	.word	0x08009438
 8001948:	08009468 	.word	0x08009468
 800194c:	08009498 	.word	0x08009498
 8001950:	080094c0 	.word	0x080094c0
 8001954:	080094e8 	.word	0x080094e8
 8001958:	08009510 	.word	0x08009510
 800195c:	08009538 	.word	0x08009538
 8001960:	08009564 	.word	0x08009564
 8001964:	a907      	add	r1, sp, #28
 8001966:	4620      	mov	r0, r4
 8001968:	f002 fd0c 	bl	8004384 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800196c:	2012      	movs	r0, #18
 800196e:	f7ff fb43 	bl	8000ff8 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001972:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001976:	498a      	ldr	r1, [pc, #552]	; (8001ba0 <printRadioSettings+0x594>)
 8001978:	a807      	add	r0, sp, #28
 800197a:	f004 fd93 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800197e:	a807      	add	r0, sp, #28
 8001980:	f7fe fc2e 	bl	80001e0 <strlen>
 8001984:	230a      	movs	r3, #10
 8001986:	b282      	uxth	r2, r0
 8001988:	a907      	add	r1, sp, #28
 800198a:	4620      	mov	r0, r4
 800198c:	f002 fcfa 	bl	8004384 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001990:	2013      	movs	r0, #19
 8001992:	f7ff fb31 	bl	8000ff8 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001996:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800199a:	4982      	ldr	r1, [pc, #520]	; (8001ba4 <printRadioSettings+0x598>)
 800199c:	a807      	add	r0, sp, #28
 800199e:	f004 fd81 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019a2:	a807      	add	r0, sp, #28
 80019a4:	f7fe fc1c 	bl	80001e0 <strlen>
 80019a8:	230a      	movs	r3, #10
 80019aa:	b282      	uxth	r2, r0
 80019ac:	a907      	add	r1, sp, #28
 80019ae:	4620      	mov	r0, r4
 80019b0:	f002 fce8 	bl	8004384 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80019b4:	2014      	movs	r0, #20
 80019b6:	f7ff fb1f 	bl	8000ff8 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019ba:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80019be:	497a      	ldr	r1, [pc, #488]	; (8001ba8 <printRadioSettings+0x59c>)
 80019c0:	a807      	add	r0, sp, #28
 80019c2:	f004 fd6f 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019c6:	a807      	add	r0, sp, #28
 80019c8:	f7fe fc0a 	bl	80001e0 <strlen>
 80019cc:	230a      	movs	r3, #10
 80019ce:	b282      	uxth	r2, r0
 80019d0:	a907      	add	r1, sp, #28
 80019d2:	4620      	mov	r0, r4
 80019d4:	f002 fcd6 	bl	8004384 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80019d8:	2015      	movs	r0, #21
 80019da:	f7ff fb0d 	bl	8000ff8 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019de:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80019e2:	4972      	ldr	r1, [pc, #456]	; (8001bac <printRadioSettings+0x5a0>)
 80019e4:	a807      	add	r0, sp, #28
 80019e6:	f004 fd5d 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ea:	a807      	add	r0, sp, #28
 80019ec:	f7fe fbf8 	bl	80001e0 <strlen>
 80019f0:	230a      	movs	r3, #10
 80019f2:	b282      	uxth	r2, r0
 80019f4:	a907      	add	r1, sp, #28
 80019f6:	4620      	mov	r0, r4
 80019f8:	f002 fcc4 	bl	8004384 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80019fc:	2016      	movs	r0, #22
 80019fe:	f7ff fafb 	bl	8000ff8 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a02:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001a06:	496a      	ldr	r1, [pc, #424]	; (8001bb0 <printRadioSettings+0x5a4>)
 8001a08:	a807      	add	r0, sp, #28
 8001a0a:	f004 fd4b 	bl	80064a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a0e:	a807      	add	r0, sp, #28
 8001a10:	f7fe fbe6 	bl	80001e0 <strlen>
 8001a14:	230a      	movs	r3, #10
 8001a16:	b282      	uxth	r2, r0
 8001a18:	a907      	add	r1, sp, #28
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f002 fcb2 	bl	8004384 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001a20:	201c      	movs	r0, #28
 8001a22:	f7ff fae9 	bl	8000ff8 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a26:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001a2a:	9303      	str	r3, [sp, #12]
 8001a2c:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001a42:	f000 0201 	and.w	r2, r0, #1
 8001a46:	495b      	ldr	r1, [pc, #364]	; (8001bb4 <printRadioSettings+0x5a8>)
 8001a48:	a807      	add	r0, sp, #28
 8001a4a:	f004 fd2b 	bl	80064a4 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a4e:	a807      	add	r0, sp, #28
 8001a50:	f7fe fbc6 	bl	80001e0 <strlen>
 8001a54:	230a      	movs	r3, #10
 8001a56:	b282      	uxth	r2, r0
 8001a58:	a907      	add	r1, sp, #28
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f002 fc92 	bl	8004384 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001a60:	201d      	movs	r0, #29
 8001a62:	f7ff fac9 	bl	8000ff8 <NRF24_read_register>
 8001a66:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001a68:	f010 0f04 	tst.w	r0, #4
 8001a6c:	f000 8081 	beq.w	8001b72 <printRadioSettings+0x566>
 8001a70:	ac07      	add	r4, sp, #28
 8001a72:	4d51      	ldr	r5, [pc, #324]	; (8001bb8 <printRadioSettings+0x5ac>)
 8001a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a7c:	f844 0b04 	str.w	r0, [r4], #4
 8001a80:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a82:	a807      	add	r0, sp, #28
 8001a84:	f7fe fbac 	bl	80001e0 <strlen>
 8001a88:	230a      	movs	r3, #10
 8001a8a:	b282      	uxth	r2, r0
 8001a8c:	a907      	add	r1, sp, #28
 8001a8e:	484b      	ldr	r0, [pc, #300]	; (8001bbc <printRadioSettings+0x5b0>)
 8001a90:	f002 fc78 	bl	8004384 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001a94:	f016 0f02 	tst.w	r6, #2
 8001a98:	d178      	bne.n	8001b8c <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001a9a:	ac07      	add	r4, sp, #28
 8001a9c:	4d48      	ldr	r5, [pc, #288]	; (8001bc0 <printRadioSettings+0x5b4>)
 8001a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aa6:	c403      	stmia	r4!, {r0, r1}
 8001aa8:	f824 2b02 	strh.w	r2, [r4], #2
 8001aac:	0c12      	lsrs	r2, r2, #16
 8001aae:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ab0:	a807      	add	r0, sp, #28
 8001ab2:	f7fe fb95 	bl	80001e0 <strlen>
 8001ab6:	4e41      	ldr	r6, [pc, #260]	; (8001bbc <printRadioSettings+0x5b0>)
 8001ab8:	230a      	movs	r3, #10
 8001aba:	b282      	uxth	r2, r0
 8001abc:	a907      	add	r1, sp, #28
 8001abe:	4630      	mov	r0, r6
 8001ac0:	f002 fc60 	bl	8004384 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001ac4:	ac07      	add	r4, sp, #28
 8001ac6:	4d3f      	ldr	r5, [pc, #252]	; (8001bc4 <printRadioSettings+0x5b8>)
 8001ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	f824 3b02 	strh.w	r3, [r4], #2
 8001ada:	0c1b      	lsrs	r3, r3, #16
 8001adc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ade:	a807      	add	r0, sp, #28
 8001ae0:	f7fe fb7e 	bl	80001e0 <strlen>
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	b282      	uxth	r2, r0
 8001ae8:	a907      	add	r1, sp, #28
 8001aea:	4630      	mov	r0, r6
 8001aec:	f002 fc4a 	bl	8004384 <HAL_UART_Transmit>
}
 8001af0:	b020      	add	sp, #128	; 0x80
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001af4:	ac07      	add	r4, sp, #28
 8001af6:	4d34      	ldr	r5, [pc, #208]	; (8001bc8 <printRadioSettings+0x5bc>)
 8001af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b00:	c403      	stmia	r4!, {r0, r1}
 8001b02:	f824 2b02 	strh.w	r2, [r4], #2
 8001b06:	0c12      	lsrs	r2, r2, #16
 8001b08:	7022      	strb	r2, [r4, #0]
 8001b0a:	e5aa      	b.n	8001662 <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001b0c:	ac07      	add	r4, sp, #28
 8001b0e:	4d2f      	ldr	r5, [pc, #188]	; (8001bcc <printRadioSettings+0x5c0>)
 8001b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b14:	682b      	ldr	r3, [r5, #0]
 8001b16:	6023      	str	r3, [r4, #0]
 8001b18:	e5a3      	b.n	8001662 <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001b1a:	ad07      	add	r5, sp, #28
 8001b1c:	4e2c      	ldr	r6, [pc, #176]	; (8001bd0 <printRadioSettings+0x5c4>)
 8001b1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b22:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001b26:	f845 0b04 	str.w	r0, [r5], #4
 8001b2a:	f825 1b02 	strh.w	r1, [r5], #2
 8001b2e:	0c09      	lsrs	r1, r1, #16
 8001b30:	7029      	strb	r1, [r5, #0]
 8001b32:	e619      	b.n	8001768 <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001b34:	ac07      	add	r4, sp, #28
 8001b36:	4d27      	ldr	r5, [pc, #156]	; (8001bd4 <printRadioSettings+0x5c8>)
 8001b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3c:	682b      	ldr	r3, [r5, #0]
 8001b3e:	6023      	str	r3, [r4, #0]
 8001b40:	e629      	b.n	8001796 <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001b42:	ac07      	add	r4, sp, #28
 8001b44:	4d24      	ldr	r5, [pc, #144]	; (8001bd8 <printRadioSettings+0x5cc>)
 8001b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4a:	682b      	ldr	r3, [r5, #0]
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	e622      	b.n	8001796 <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001b50:	ac07      	add	r4, sp, #28
 8001b52:	4d22      	ldr	r5, [pc, #136]	; (8001bdc <printRadioSettings+0x5d0>)
 8001b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	f824 3b02 	strh.w	r3, [r4], #2
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	7023      	strb	r3, [r4, #0]
 8001b62:	e618      	b.n	8001796 <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001b64:	ac07      	add	r4, sp, #28
 8001b66:	4d1e      	ldr	r5, [pc, #120]	; (8001be0 <printRadioSettings+0x5d4>)
 8001b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	8023      	strh	r3, [r4, #0]
 8001b70:	e611      	b.n	8001796 <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001b72:	ac07      	add	r4, sp, #28
 8001b74:	4d1b      	ldr	r5, [pc, #108]	; (8001be4 <printRadioSettings+0x5d8>)
 8001b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b7e:	f844 0b04 	str.w	r0, [r4], #4
 8001b82:	f824 1b02 	strh.w	r1, [r4], #2
 8001b86:	0c09      	lsrs	r1, r1, #16
 8001b88:	7021      	strb	r1, [r4, #0]
 8001b8a:	e77a      	b.n	8001a82 <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001b8c:	ac07      	add	r4, sp, #28
 8001b8e:	4d16      	ldr	r5, [pc, #88]	; (8001be8 <printRadioSettings+0x5dc>)
 8001b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b98:	c403      	stmia	r4!, {r0, r1}
 8001b9a:	8022      	strh	r2, [r4, #0]
 8001b9c:	e788      	b.n	8001ab0 <printRadioSettings+0x4a4>
 8001b9e:	bf00      	nop
 8001ba0:	08009580 	.word	0x08009580
 8001ba4:	0800959c 	.word	0x0800959c
 8001ba8:	080095b8 	.word	0x080095b8
 8001bac:	080095d4 	.word	0x080095d4
 8001bb0:	080095f0 	.word	0x080095f0
 8001bb4:	0800960c 	.word	0x0800960c
 8001bb8:	08009658 	.word	0x08009658
 8001bbc:	200002b4 	.word	0x200002b4
 8001bc0:	080096a4 	.word	0x080096a4
 8001bc4:	08009278 	.word	0x08009278
 8001bc8:	080092c8 	.word	0x080092c8
 8001bcc:	080092e4 	.word	0x080092e4
 8001bd0:	080093d0 	.word	0x080093d0
 8001bd4:	080093e8 	.word	0x080093e8
 8001bd8:	080093fc 	.word	0x080093fc
 8001bdc:	08009410 	.word	0x08009410
 8001be0:	08009424 	.word	0x08009424
 8001be4:	08009670 	.word	0x08009670
 8001be8:	08009688 	.word	0x08009688

08001bec <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001bec:	b084      	sub	sp, #16
 8001bee:	b430      	push	{r4, r5}
 8001bf0:	ac02      	add	r4, sp, #8
 8001bf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001bf6:	4c07      	ldr	r4, [pc, #28]	; (8001c14 <nrf24_DebugUART_Init+0x28>)
 8001bf8:	ad02      	add	r5, sp, #8
 8001bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001c0e:	bc30      	pop	{r4, r5}
 8001c10:	b004      	add	sp, #16
 8001c12:	4770      	bx	lr
 8001c14:	200002b4 	.word	0x200002b4

08001c18 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 8001c18:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <pid_calculate_roll+0xac>)
 8001c1e:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8001c22:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <pid_calculate_roll+0xb0>)
 8001c24:	edd3 6a00 	vldr	s13, [r3]
 8001c28:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <pid_calculate_roll+0xb4>)
 8001c2e:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8001c32:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <pid_calculate_roll+0xb8>)
 8001c34:	edd3 7a00 	vldr	s15, [r3]
 8001c38:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8001c3c:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001cd4 <pid_calculate_roll+0xbc>
 8001c40:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <pid_calculate_roll+0xc0>)
 8001c46:	ed93 7a00 	vldr	s14, [r3]
 8001c4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c4e:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <pid_calculate_roll+0xc4>)
 8001c54:	ed93 6a00 	vldr	s12, [r3]
 8001c58:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8001c5c:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8001c60:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <pid_calculate_roll+0xc8>)
 8001c62:	ed92 6a00 	vldr	s12, [r2]
 8001c66:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001c6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ce4 <pid_calculate_roll+0xcc>)
 8001c6c:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8001c70:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8001c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <pid_calculate_roll+0xd0>)
 8001c7e:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <pid_calculate_roll+0xd4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	425a      	negs	r2, r3
 8001c88:	ee07 2a10 	vmov	s14, r2
 8001c8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c98:	d40c      	bmi.n	8001cb4 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 8001c9a:	ee07 3a10 	vmov	s14, r3
 8001c9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	dd06      	ble.n	8001cba <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <pid_calculate_roll+0xd0>)
 8001cae:	ed83 7a00 	vstr	s14, [r3]
 8001cb2:	e002      	b.n	8001cba <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <pid_calculate_roll+0xd0>)
 8001cb6:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <pid_calculate_roll+0xd0>)
 8001cbc:	ed93 0a00 	vldr	s0, [r3]
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000030c 	.word	0x2000030c
 8001cc8:	20000018 	.word	0x20000018
 8001ccc:	20000448 	.word	0x20000448
 8001cd0:	20000014 	.word	0x20000014
 8001cd4:	3b012912 	.word	0x3b012912
 8001cd8:	20000454 	.word	0x20000454
 8001cdc:	20000310 	.word	0x20000310
 8001ce0:	20000010 	.word	0x20000010
 8001ce4:	20000434 	.word	0x20000434
 8001ce8:	20000314 	.word	0x20000314
 8001cec:	2000001c 	.word	0x2000001c

08001cf0 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <reset_pid_roll+0x14>)
 8001cf4:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <reset_pid_roll+0x18>)
 8001cf8:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <reset_pid_roll+0x1c>)
 8001cfc:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <reset_pid_roll+0x20>)
 8001d00:	6013      	str	r3, [r2, #0]

}
 8001d02:	4770      	bx	lr
 8001d04:	20000448 	.word	0x20000448
 8001d08:	20000454 	.word	0x20000454
 8001d0c:	20000434 	.word	0x20000434
 8001d10:	20000314 	.word	0x20000314

08001d14 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 8001d14:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <pid_calculate_pitch+0xac>)
 8001d1a:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <pid_calculate_pitch+0xb0>)
 8001d20:	edd3 6a00 	vldr	s13, [r3]
 8001d24:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <pid_calculate_pitch+0xb4>)
 8001d2a:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <pid_calculate_pitch+0xb8>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8001d38:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001dd0 <pid_calculate_pitch+0xbc>
 8001d3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <pid_calculate_pitch+0xc0>)
 8001d42:	ed93 7a00 	vldr	s14, [r3]
 8001d46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d4a:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <pid_calculate_pitch+0xc4>)
 8001d50:	ed93 6a00 	vldr	s12, [r3]
 8001d54:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8001d58:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <pid_calculate_pitch+0xc8>)
 8001d5e:	ed92 6a00 	vldr	s12, [r2]
 8001d62:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001d66:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <pid_calculate_pitch+0xcc>)
 8001d68:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 8001d6c:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8001d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <pid_calculate_pitch+0xd0>)
 8001d7a:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <pid_calculate_pitch+0xd4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	425a      	negs	r2, r3
 8001d84:	ee07 2a10 	vmov	s14, r2
 8001d88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	d40c      	bmi.n	8001db0 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8001d96:	ee07 3a10 	vmov	s14, r3
 8001d9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	dd06      	ble.n	8001db6 <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <pid_calculate_pitch+0xd0>)
 8001daa:	ed83 7a00 	vstr	s14, [r3]
 8001dae:	e002      	b.n	8001db6 <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <pid_calculate_pitch+0xd0>)
 8001db2:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <pid_calculate_pitch+0xd0>)
 8001db8:	ed93 0a00 	vldr	s0, [r3]
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000300 	.word	0x20000300
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000440 	.word	0x20000440
 8001dcc:	20000004 	.word	0x20000004
 8001dd0:	3b012912 	.word	0x3b012912
 8001dd4:	20000444 	.word	0x20000444
 8001dd8:	20000304 	.word	0x20000304
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000438 	.word	0x20000438
 8001de4:	20000308 	.word	0x20000308
 8001de8:	2000000c 	.word	0x2000000c

08001dec <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <reset_pid_pitch+0x14>)
 8001df0:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8001df2:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <reset_pid_pitch+0x18>)
 8001df4:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <reset_pid_pitch+0x1c>)
 8001df8:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <reset_pid_pitch+0x20>)
 8001dfc:	6013      	str	r3, [r2, #0]

}
 8001dfe:	4770      	bx	lr
 8001e00:	20000440 	.word	0x20000440
 8001e04:	20000444 	.word	0x20000444
 8001e08:	20000438 	.word	0x20000438
 8001e0c:	20000308 	.word	0x20000308

08001e10 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = IMU_yaw_value - yaw_setpoint;
 8001e10:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <pid_calculate_yaw+0xac>)
 8001e16:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <pid_calculate_yaw+0xb0>)
 8001e1c:	edd3 6a00 	vldr	s13, [r3]
 8001e20:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <pid_calculate_yaw+0xb4>)
 8001e26:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 8001e2a:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <pid_calculate_yaw+0xb8>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8001e34:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001ecc <pid_calculate_yaw+0xbc>
 8001e38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <pid_calculate_yaw+0xc0>)
 8001e3e:	ed93 7a00 	vldr	s14, [r3]
 8001e42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e46:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <pid_calculate_yaw+0xc4>)
 8001e4c:	ed93 6a00 	vldr	s12, [r3]
 8001e50:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8001e54:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <pid_calculate_yaw+0xc8>)
 8001e5a:	ed92 6a00 	vldr	s12, [r2]
 8001e5e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <pid_calculate_yaw+0xcc>)
 8001e64:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 8001e68:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 8001e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <pid_calculate_yaw+0xd0>)
 8001e76:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <pid_calculate_yaw+0xd4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	425a      	negs	r2, r3
 8001e80:	ee07 2a10 	vmov	s14, r2
 8001e84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e90:	d40c      	bmi.n	8001eac <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 8001e92:	ee07 3a10 	vmov	s14, r3
 8001e96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	dd06      	ble.n	8001eb2 <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <pid_calculate_yaw+0xd0>)
 8001ea6:	ed83 7a00 	vstr	s14, [r3]
 8001eaa:	e002      	b.n	8001eb2 <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <pid_calculate_yaw+0xd0>)
 8001eae:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <pid_calculate_yaw+0xd0>)
 8001eb4:	ed93 0a00 	vldr	s0, [r3]
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000318 	.word	0x20000318
 8001ec0:	20000028 	.word	0x20000028
 8001ec4:	20000450 	.word	0x20000450
 8001ec8:	20000024 	.word	0x20000024
 8001ecc:	3b012912 	.word	0x3b012912
 8001ed0:	2000044c 	.word	0x2000044c
 8001ed4:	2000031c 	.word	0x2000031c
 8001ed8:	20000020 	.word	0x20000020
 8001edc:	2000043c 	.word	0x2000043c
 8001ee0:	20000320 	.word	0x20000320
 8001ee4:	2000002c 	.word	0x2000002c

08001ee8 <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	4a04      	ldr	r2, [pc, #16]	; (8001efc <reset_pid_yaw+0x14>)
 8001eec:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <reset_pid_yaw+0x18>)
 8001ef0:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <reset_pid_yaw+0x1c>)
 8001ef4:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <reset_pid_yaw+0x20>)
 8001ef8:	6013      	str	r3, [r2, #0]

}
 8001efa:	4770      	bx	lr
 8001efc:	20000450 	.word	0x20000450
 8001f00:	2000044c 	.word	0x2000044c
 8001f04:	2000043c 	.word	0x2000043c
 8001f08:	20000320 	.word	0x20000320

08001f0c <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001f0c:	4a06      	ldr	r2, [pc, #24]	; (8001f28 <DWT_Init+0x1c>)
 8001f0e:	68d3      	ldr	r3, [r2, #12]
 8001f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f14:	60d3      	str	r3, [r2, #12]
        //DWT->LAR = 0xC5ACCE55;
        DWT->CYCCNT = 0;
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <DWT_Init+0x20>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000edf0 	.word	0xe000edf0
 8001f2c:	e0001000 	.word	0xe0001000

08001f30 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <DWT_Delay+0x20>)
 8001f32:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <DWT_Delay+0x24>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <DWT_Delay+0x28>)
 8001f3a:	fba1 1303 	umull	r1, r3, r1, r3
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <DWT_Delay+0x20>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	4283      	cmp	r3, r0
 8001f4c:	d3fa      	bcc.n	8001f44 <DWT_Delay+0x14>
}
 8001f4e:	4770      	bx	lr
 8001f50:	e0001000 	.word	0xe0001000
 8001f54:	20000060 	.word	0x20000060
 8001f58:	431bde83 	.word	0x431bde83

08001f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_Init+0x30>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f66:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f6e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f76:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 f82f 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f003 f980 	bl	8005284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f003 f952 	bl	800522c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001f88:	2000      	movs	r0, #0
 8001f8a:	bd08      	pop	{r3, pc}
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <HAL_IncTick+0x10>)
 8001f92:	6811      	ldr	r1, [r2, #0]
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_IncTick+0x14>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	440b      	add	r3, r1
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000458 	.word	0x20000458
 8001fa4:	20000030 	.word	0x20000030

08001fa8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fa8:	4b01      	ldr	r3, [pc, #4]	; (8001fb0 <HAL_GetTick+0x8>)
 8001faa:	6818      	ldr	r0, [r3, #0]
}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000458 	.word	0x20000458

08001fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb4:	b538      	push	{r3, r4, r5, lr}
 8001fb6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff fff6 	bl	8001fa8 <HAL_GetTick>
 8001fbc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fbe:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001fc2:	d002      	beq.n	8001fca <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_Delay+0x24>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fca:	f7ff ffed 	bl	8001fa8 <HAL_GetTick>
 8001fce:	1b40      	subs	r0, r0, r5
 8001fd0:	42a0      	cmp	r0, r4
 8001fd2:	d3fa      	bcc.n	8001fca <HAL_Delay+0x16>
  {
  }
}
 8001fd4:	bd38      	pop	{r3, r4, r5, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000030 	.word	0x20000030

08001fdc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001fde:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	0200      	lsls	r0, r0, #8
 8001fea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fee:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001ff0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001ff4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001ff8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002000:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_NVIC_SetPriority+0x60>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200a:	f1c3 0407 	rsb	r4, r3, #7
 800200e:	2c04      	cmp	r4, #4
 8002010:	bf28      	it	cs
 8002012:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002014:	1d1d      	adds	r5, r3, #4
 8002016:	2d06      	cmp	r5, #6
 8002018:	d918      	bls.n	800204c <HAL_NVIC_SetPriority+0x4c>
 800201a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002020:	fa05 f404 	lsl.w	r4, r5, r4
 8002024:	ea21 0104 	bic.w	r1, r1, r4
 8002028:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800202a:	fa05 f303 	lsl.w	r3, r5, r3
 800202e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002032:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002034:	2800      	cmp	r0, #0
 8002036:	db0b      	blt.n	8002050 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	0109      	lsls	r1, r1, #4
 800203a:	b2c9      	uxtb	r1, r1
 800203c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002040:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002044:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002048:	bc30      	pop	{r4, r5}
 800204a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204c:	2300      	movs	r3, #0
 800204e:	e7e5      	b.n	800201c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	f000 000f 	and.w	r0, r0, #15
 8002054:	0109      	lsls	r1, r1, #4
 8002056:	b2c9      	uxtb	r1, r1
 8002058:	4b02      	ldr	r3, [pc, #8]	; (8002064 <HAL_NVIC_SetPriority+0x64>)
 800205a:	5419      	strb	r1, [r3, r0]
 800205c:	e7f4      	b.n	8002048 <HAL_NVIC_SetPriority+0x48>
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00
 8002064:	e000ed14 	.word	0xe000ed14

08002068 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002068:	2800      	cmp	r0, #0
 800206a:	db07      	blt.n	800207c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206c:	f000 021f 	and.w	r2, r0, #31
 8002070:	0940      	lsrs	r0, r0, #5
 8002072:	2301      	movs	r3, #1
 8002074:	4093      	lsls	r3, r2
 8002076:	4a02      	ldr	r2, [pc, #8]	; (8002080 <HAL_NVIC_EnableIRQ+0x18>)
 8002078:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002084:	b168      	cbz	r0, 80020a2 <HAL_CRC_Init+0x1e>
{
 8002086:	b510      	push	{r4, lr}
 8002088:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800208a:	7943      	ldrb	r3, [r0, #5]
 800208c:	b12b      	cbz	r3, 800209a <HAL_CRC_Init+0x16>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800208e:	2302      	movs	r3, #2
 8002090:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002092:	2301      	movs	r3, #1
 8002094:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8002096:	2000      	movs	r0, #0
}
 8002098:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800209a:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 800209c:	f002 fb8e 	bl	80047bc <HAL_CRC_MspInit>
 80020a0:	e7f5      	b.n	800208e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80020a2:	2001      	movs	r0, #1
}
 80020a4:	4770      	bx	lr

080020a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a6:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020a8:	6805      	ldr	r5, [r0, #0]
 80020aa:	682c      	ldr	r4, [r5, #0]
 80020ac:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80020b0:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020b2:	6804      	ldr	r4, [r0, #0]
 80020b4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b6:	6883      	ldr	r3, [r0, #8]
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d005      	beq.n	80020c8 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80020bc:	6803      	ldr	r3, [r0, #0]
 80020be:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80020c0:	6803      	ldr	r3, [r0, #0]
 80020c2:	60da      	str	r2, [r3, #12]
  }
}
 80020c4:	bc30      	pop	{r4, r5}
 80020c6:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80020c8:	6803      	ldr	r3, [r0, #0]
 80020ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80020cc:	6803      	ldr	r3, [r0, #0]
 80020ce:	60d9      	str	r1, [r3, #12]
 80020d0:	e7f8      	b.n	80020c4 <DMA_SetConfig+0x1e>
	...

080020d4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d4:	6802      	ldr	r2, [r0, #0]
 80020d6:	b2d3      	uxtb	r3, r2
 80020d8:	3b10      	subs	r3, #16
 80020da:	490b      	ldr	r1, [pc, #44]	; (8002108 <DMA_CalcBaseAndBitshift+0x34>)
 80020dc:	fba1 1303 	umull	r1, r3, r1, r3
 80020e0:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020e2:	490a      	ldr	r1, [pc, #40]	; (800210c <DMA_CalcBaseAndBitshift+0x38>)
 80020e4:	5cc9      	ldrb	r1, [r1, r3]
 80020e6:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d806      	bhi.n	80020fa <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ec:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80020f0:	f022 0203 	bic.w	r2, r2, #3
 80020f4:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80020f6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80020f8:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020fa:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80020fe:	f022 0203 	bic.w	r2, r2, #3
 8002102:	3204      	adds	r2, #4
 8002104:	6582      	str	r2, [r0, #88]	; 0x58
 8002106:	e7f6      	b.n	80020f6 <DMA_CalcBaseAndBitshift+0x22>
 8002108:	aaaaaaab 	.word	0xaaaaaaab
 800210c:	080096c0 	.word	0x080096c0

08002110 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002110:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002112:	6982      	ldr	r2, [r0, #24]
 8002114:	b992      	cbnz	r2, 800213c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002116:	2b01      	cmp	r3, #1
 8002118:	d00a      	beq.n	8002130 <DMA_CheckFifoParam+0x20>
 800211a:	b11b      	cbz	r3, 8002124 <DMA_CheckFifoParam+0x14>
 800211c:	2b02      	cmp	r3, #2
 800211e:	d001      	beq.n	8002124 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2000      	movs	r0, #0
 8002122:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002124:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002126:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800212a:	d12c      	bne.n	8002186 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2000      	movs	r0, #0
 800212e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002130:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002132:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002136:	d028      	beq.n	800218a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002138:	2000      	movs	r0, #0
 800213a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800213c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002140:	d005      	beq.n	800214e <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002142:	2b02      	cmp	r3, #2
 8002144:	d929      	bls.n	800219a <DMA_CheckFifoParam+0x8a>
 8002146:	2b03      	cmp	r3, #3
 8002148:	d015      	beq.n	8002176 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800214a:	2000      	movs	r0, #0
 800214c:	4770      	bx	lr
    switch (tmp)
 800214e:	2b03      	cmp	r3, #3
 8002150:	d803      	bhi.n	800215a <DMA_CheckFifoParam+0x4a>
 8002152:	e8df f003 	tbb	[pc, r3]
 8002156:	041c      	.short	0x041c
 8002158:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2000      	movs	r0, #0
 800215c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800215e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002160:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002164:	d115      	bne.n	8002192 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2000      	movs	r0, #0
 8002168:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800216a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800216c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002170:	d011      	beq.n	8002196 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002172:	2000      	movs	r0, #0
 8002174:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002176:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002178:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800217c:	d001      	beq.n	8002182 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800217e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002180:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2000      	movs	r0, #0
 8002184:	4770      	bx	lr
        status = HAL_ERROR;
 8002186:	2001      	movs	r0, #1
 8002188:	4770      	bx	lr
        status = HAL_ERROR;
 800218a:	2001      	movs	r0, #1
 800218c:	4770      	bx	lr
      status = HAL_ERROR;
 800218e:	2001      	movs	r0, #1
 8002190:	4770      	bx	lr
        status = HAL_ERROR;
 8002192:	2001      	movs	r0, #1
 8002194:	4770      	bx	lr
        status = HAL_ERROR;
 8002196:	2001      	movs	r0, #1
 8002198:	4770      	bx	lr
      status = HAL_ERROR;
 800219a:	2001      	movs	r0, #1
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_DMA_Init>:
{
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff ff00 	bl	8001fa8 <HAL_GetTick>
  if(hdma == NULL)
 80021a8:	2c00      	cmp	r4, #0
 80021aa:	d05b      	beq.n	8002264 <HAL_DMA_Init+0xc4>
 80021ac:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80021ae:	2300      	movs	r3, #0
 80021b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80021b4:	2302      	movs	r3, #2
 80021b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80021ba:	6822      	ldr	r2, [r4, #0]
 80021bc:	6813      	ldr	r3, [r2, #0]
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	f012 0f01 	tst.w	r2, #1
 80021cc:	d00a      	beq.n	80021e4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ce:	f7ff feeb 	bl	8001fa8 <HAL_GetTick>
 80021d2:	1b40      	subs	r0, r0, r5
 80021d4:	2805      	cmp	r0, #5
 80021d6:	d9f5      	bls.n	80021c4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d8:	2320      	movs	r3, #32
 80021da:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021dc:	2003      	movs	r0, #3
 80021de:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80021e4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021e6:	4820      	ldr	r0, [pc, #128]	; (8002268 <HAL_DMA_Init+0xc8>)
 80021e8:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ea:	6861      	ldr	r1, [r4, #4]
 80021ec:	68a2      	ldr	r2, [r4, #8]
 80021ee:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f4:	6921      	ldr	r1, [r4, #16]
 80021f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f8:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	69a1      	ldr	r1, [r4, #24]
 80021fe:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002200:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002204:	6a21      	ldr	r1, [r4, #32]
 8002206:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002208:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800220a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800220c:	2904      	cmp	r1, #4
 800220e:	d01e      	beq.n	800224e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002210:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002212:	6826      	ldr	r6, [r4, #0]
 8002214:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002216:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800221a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800221c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221e:	2b04      	cmp	r3, #4
 8002220:	d107      	bne.n	8002232 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002224:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002226:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002228:	b11b      	cbz	r3, 8002232 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800222a:	4620      	mov	r0, r4
 800222c:	f7ff ff70 	bl	8002110 <DMA_CheckFifoParam>
 8002230:	b990      	cbnz	r0, 8002258 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002232:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff ff4d 	bl	80020d4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800223a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800223c:	233f      	movs	r3, #63	; 0x3f
 800223e:	4093      	lsls	r3, r2
 8002240:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002242:	2000      	movs	r0, #0
 8002244:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002246:	2301      	movs	r3, #1
 8002248:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800224c:	e7c9      	b.n	80021e2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800224e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002250:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002252:	4301      	orrs	r1, r0
 8002254:	430a      	orrs	r2, r1
 8002256:	e7db      	b.n	8002210 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002258:	2340      	movs	r3, #64	; 0x40
 800225a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800225c:	2001      	movs	r0, #1
 800225e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002262:	e7be      	b.n	80021e2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002264:	2001      	movs	r0, #1
 8002266:	e7bc      	b.n	80021e2 <HAL_DMA_Init+0x42>
 8002268:	f010803f 	.word	0xf010803f

0800226c <HAL_DMA_Start_IT>:
{
 800226c:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800226e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002270:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002274:	2c01      	cmp	r4, #1
 8002276:	d031      	beq.n	80022dc <HAL_DMA_Start_IT+0x70>
 8002278:	2401      	movs	r4, #1
 800227a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800227e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002282:	b2e4      	uxtb	r4, r4
 8002284:	2c01      	cmp	r4, #1
 8002286:	d004      	beq.n	8002292 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002288:	2300      	movs	r3, #0
 800228a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800228e:	2002      	movs	r0, #2
}
 8002290:	bd38      	pop	{r3, r4, r5, pc}
 8002292:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002294:	2002      	movs	r0, #2
 8002296:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800229a:	2000      	movs	r0, #0
 800229c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff ff01 	bl	80020a6 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80022a6:	233f      	movs	r3, #63	; 0x3f
 80022a8:	4093      	lsls	r3, r2
 80022aa:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022ac:	6822      	ldr	r2, [r4, #0]
 80022ae:	6813      	ldr	r3, [r2, #0]
 80022b0:	f043 0316 	orr.w	r3, r3, #22
 80022b4:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	6953      	ldr	r3, [r2, #20]
 80022ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022be:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80022c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022c2:	b123      	cbz	r3, 80022ce <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 80022c4:	6822      	ldr	r2, [r4, #0]
 80022c6:	6813      	ldr	r3, [r2, #0]
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80022ce:	6822      	ldr	r2, [r4, #0]
 80022d0:	6813      	ldr	r3, [r2, #0]
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022d8:	2000      	movs	r0, #0
 80022da:	e7d9      	b.n	8002290 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80022dc:	2002      	movs	r0, #2
 80022de:	e7d7      	b.n	8002290 <HAL_DMA_Start_IT+0x24>

080022e0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d003      	beq.n	80022f2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
 80022f0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80022f2:	2305      	movs	r3, #5
 80022f4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80022f8:	6802      	ldr	r2, [r0, #0]
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002302:	2000      	movs	r0, #0
}
 8002304:	4770      	bx	lr
	...

08002308 <HAL_DMA_IRQHandler>:
{
 8002308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230a:	b083      	sub	sp, #12
 800230c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002312:	4b72      	ldr	r3, [pc, #456]	; (80024dc <HAL_DMA_IRQHandler+0x1d4>)
 8002314:	681d      	ldr	r5, [r3, #0]
 8002316:	4b72      	ldr	r3, [pc, #456]	; (80024e0 <HAL_DMA_IRQHandler+0x1d8>)
 8002318:	fba3 3505 	umull	r3, r5, r3, r5
 800231c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002320:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002322:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002324:	2308      	movs	r3, #8
 8002326:	4093      	lsls	r3, r2
 8002328:	4233      	tst	r3, r6
 800232a:	d010      	beq.n	800234e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800232c:	6803      	ldr	r3, [r0, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	f012 0f04 	tst.w	r2, #4
 8002334:	d00b      	beq.n	800234e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	f022 0204 	bic.w	r2, r2, #4
 800233c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800233e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002340:	2308      	movs	r3, #8
 8002342:	4093      	lsls	r3, r2
 8002344:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002346:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800234e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002350:	2301      	movs	r3, #1
 8002352:	4093      	lsls	r3, r2
 8002354:	4233      	tst	r3, r6
 8002356:	d009      	beq.n	800236c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	6952      	ldr	r2, [r2, #20]
 800235c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002360:	d004      	beq.n	800236c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002362:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002364:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800236e:	2304      	movs	r3, #4
 8002370:	4093      	lsls	r3, r2
 8002372:	4233      	tst	r3, r6
 8002374:	d009      	beq.n	800238a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002376:	6822      	ldr	r2, [r4, #0]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	f012 0f02 	tst.w	r2, #2
 800237e:	d004      	beq.n	800238a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002380:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002382:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800238a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800238c:	2310      	movs	r3, #16
 800238e:	4093      	lsls	r3, r2
 8002390:	4233      	tst	r3, r6
 8002392:	d024      	beq.n	80023de <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	f012 0f08 	tst.w	r2, #8
 800239c:	d01f      	beq.n	80023de <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800239e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80023a8:	d00d      	beq.n	80023c6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80023b0:	d104      	bne.n	80023bc <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80023b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023b4:	b19b      	cbz	r3, 80023de <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80023b6:	4620      	mov	r0, r4
 80023b8:	4798      	blx	r3
 80023ba:	e010      	b.n	80023de <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80023be:	b173      	cbz	r3, 80023de <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80023c0:	4620      	mov	r0, r4
 80023c2:	4798      	blx	r3
 80023c4:	e00b      	b.n	80023de <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80023cc:	d103      	bne.n	80023d6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	f022 0208 	bic.w	r2, r2, #8
 80023d4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80023d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023d8:	b10b      	cbz	r3, 80023de <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80023da:	4620      	mov	r0, r4
 80023dc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80023e0:	2320      	movs	r3, #32
 80023e2:	4093      	lsls	r3, r2
 80023e4:	4233      	tst	r3, r6
 80023e6:	d055      	beq.n	8002494 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	f012 0f10 	tst.w	r2, #16
 80023f0:	d050      	beq.n	8002494 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023f2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023f4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	d00e      	beq.n	800241c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002406:	d033      	beq.n	8002470 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800240e:	d12a      	bne.n	8002466 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002410:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002412:	2b00      	cmp	r3, #0
 8002414:	d03e      	beq.n	8002494 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002416:	4620      	mov	r0, r4
 8002418:	4798      	blx	r3
 800241a:	e03b      	b.n	8002494 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800241c:	6822      	ldr	r2, [r4, #0]
 800241e:	6813      	ldr	r3, [r2, #0]
 8002420:	f023 0316 	bic.w	r3, r3, #22
 8002424:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002426:	6822      	ldr	r2, [r4, #0]
 8002428:	6953      	ldr	r3, [r2, #20]
 800242a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800242e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002432:	b1a3      	cbz	r3, 800245e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002434:	6822      	ldr	r2, [r4, #0]
 8002436:	6813      	ldr	r3, [r2, #0]
 8002438:	f023 0308 	bic.w	r3, r3, #8
 800243c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002440:	233f      	movs	r3, #63	; 0x3f
 8002442:	4093      	lsls	r3, r2
 8002444:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002446:	2300      	movs	r3, #0
 8002448:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800244c:	2301      	movs	r3, #1
 800244e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002452:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002454:	2b00      	cmp	r3, #0
 8002456:	d03f      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002458:	4620      	mov	r0, r4
 800245a:	4798      	blx	r3
 800245c:	e03c      	b.n	80024d8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800245e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e7      	bne.n	8002434 <HAL_DMA_IRQHandler+0x12c>
 8002464:	e7eb      	b.n	800243e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002466:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002468:	b1a3      	cbz	r3, 8002494 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800246a:	4620      	mov	r0, r4
 800246c:	4798      	blx	r3
 800246e:	e011      	b.n	8002494 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002476:	d109      	bne.n	800248c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	f022 0210 	bic.w	r2, r2, #16
 800247e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002480:	2300      	movs	r3, #0
 8002482:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002486:	2301      	movs	r3, #1
 8002488:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800248c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800248e:	b10b      	cbz	r3, 8002494 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002490:	4620      	mov	r0, r4
 8002492:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002494:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002496:	b1fb      	cbz	r3, 80024d8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002498:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800249a:	f013 0f01 	tst.w	r3, #1
 800249e:	d017      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80024a0:	2305      	movs	r3, #5
 80024a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80024a6:	6822      	ldr	r2, [r4, #0]
 80024a8:	6813      	ldr	r3, [r2, #0]
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80024b0:	9b01      	ldr	r3, [sp, #4]
 80024b2:	3301      	adds	r3, #1
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	42ab      	cmp	r3, r5
 80024b8:	d804      	bhi.n	80024c4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f013 0f01 	tst.w	r3, #1
 80024c2:	d1f5      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80024c4:	2300      	movs	r3, #0
 80024c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80024d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80024d2:	b10b      	cbz	r3, 80024d8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80024d4:	4620      	mov	r0, r4
 80024d6:	4798      	blx	r3
}
 80024d8:	b003      	add	sp, #12
 80024da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024dc:	20000060 	.word	0x20000060
 80024e0:	1b4e81b5 	.word	0x1b4e81b5

080024e4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f013 0f10 	tst.w	r3, #16
 80024ec:	d007      	beq.n	80024fe <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024ee:	4a26      	ldr	r2, [pc, #152]	; (8002588 <FLASH_SetErrorCode+0xa4>)
 80024f0:	69d3      	ldr	r3, [r2, #28]
 80024f2:	f043 0310 	orr.w	r3, r3, #16
 80024f6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 80024fa:	2210      	movs	r2, #16
 80024fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f013 0f20 	tst.w	r3, #32
 8002506:	d007      	beq.n	8002518 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002508:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <FLASH_SetErrorCode+0xa4>)
 800250a:	69d3      	ldr	r3, [r2, #28]
 800250c:	f043 0308 	orr.w	r3, r3, #8
 8002510:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 8002514:	2220      	movs	r2, #32
 8002516:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002520:	d007      	beq.n	8002532 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002522:	4a19      	ldr	r2, [pc, #100]	; (8002588 <FLASH_SetErrorCode+0xa4>)
 8002524:	69d3      	ldr	r3, [r2, #28]
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f013 0f80 	tst.w	r3, #128	; 0x80
 800253a:	d007      	beq.n	800254c <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800253c:	4a12      	ldr	r2, [pc, #72]	; (8002588 <FLASH_SetErrorCode+0xa4>)
 800253e:	69d3      	ldr	r3, [r2, #28]
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002554:	d008      	beq.n	8002568 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002556:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <FLASH_SetErrorCode+0xa4>)
 8002558:	69d3      	ldr	r3, [r2, #28]
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 8002562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002566:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f013 0f02 	tst.w	r3, #2
 8002570:	d007      	beq.n	8002582 <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <FLASH_SetErrorCode+0xa4>)
 8002574:	69d3      	ldr	r3, [r2, #28]
 8002576:	f043 0320 	orr.w	r3, r3, #32
 800257a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800257c:	4b01      	ldr	r3, [pc, #4]	; (8002584 <FLASH_SetErrorCode+0xa0>)
 800257e:	2202      	movs	r2, #2
 8002580:	60da      	str	r2, [r3, #12]
  }
}
 8002582:	4770      	bx	lr
 8002584:	40023c00 	.word	0x40023c00
 8002588:	2000045c 	.word	0x2000045c

0800258c <HAL_FLASH_EndOfOperationCallback>:
}
 800258c:	4770      	bx	lr

0800258e <HAL_FLASH_OperationErrorCallback>:
}
 800258e:	4770      	bx	lr

08002590 <HAL_FLASH_IRQHandler>:
{
 8002590:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_FLASH_IRQHandler+0xec>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 800259a:	d013      	beq.n	80025c4 <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800259c:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d03b      	beq.n	800261e <HAL_FLASH_IRQHandler+0x8e>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d03c      	beq.n	800262a <HAL_FLASH_IRQHandler+0x9a>
      addresstmp = pFlash.Address;
 80025b0:	4b33      	ldr	r3, [pc, #204]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 80025b2:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 80025b4:	f7ff ff96 	bl	80024e4 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff ffe8 	bl	800258e <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_FLASH_IRQHandler+0xec>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f013 0f01 	tst.w	r3, #1
 80025cc:	d013      	beq.n	80025f6 <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_FLASH_IRQHandler+0xec>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80025d4:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	4293      	cmp	r3, r2
 80025dc:	d028      	beq.n	8002630 <HAL_FLASH_IRQHandler+0xa0>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80025de:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d041      	beq.n	800266c <HAL_FLASH_IRQHandler+0xdc>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 80025ea:	6958      	ldr	r0, [r3, #20]
 80025ec:	f7ff ffce 	bl	800258c <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80025f0:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b97b      	cbnz	r3, 800261c <HAL_FLASH_IRQHandler+0x8c>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_FLASH_IRQHandler+0xec>)
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002604:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800260c:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002614:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 8002618:	2200      	movs	r2, #0
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 8002620:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 8002622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002626:	60da      	str	r2, [r3, #12]
 8002628:	e7c4      	b.n	80025b4 <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 800262c:	691c      	ldr	r4, [r3, #16]
 800262e:	e7c1      	b.n	80025b4 <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	3a01      	subs	r2, #1
 8002636:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	b15b      	cbz	r3, 8002654 <HAL_FLASH_IRQHandler+0xc4>
        addresstmp = pFlash.Sector;
 800263c:	4c10      	ldr	r4, [pc, #64]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 800263e:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002640:	f7ff ffa4 	bl	800258c <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 8002644:	68e3      	ldr	r3, [r4, #12]
 8002646:	3301      	adds	r3, #1
 8002648:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 800264a:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800264c:	7a21      	ldrb	r1, [r4, #8]
 800264e:	f000 f819 	bl	8002684 <FLASH_Erase_Sector>
 8002652:	e7d0      	b.n	80025f6 <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 8002656:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800265a:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 8002660:	f000 f83c 	bl	80026dc <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff ff91 	bl	800258c <HAL_FLASH_EndOfOperationCallback>
 800266a:	e7c4      	b.n	80025f6 <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 800266c:	f000 f836 	bl	80026dc <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_FLASH_IRQHandler+0xf0>)
 8002672:	6918      	ldr	r0, [r3, #16]
 8002674:	f7ff ff8a 	bl	800258c <HAL_FLASH_EndOfOperationCallback>
 8002678:	e7ba      	b.n	80025f0 <HAL_FLASH_IRQHandler+0x60>
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	2000045c 	.word	0x2000045c

08002684 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002684:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002686:	b149      	cbz	r1, 800269c <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002688:	2901      	cmp	r1, #1
 800268a:	d021      	beq.n	80026d0 <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800268c:	2902      	cmp	r1, #2
 800268e:	d002      	beq.n	8002696 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002690:	f44f 7440 	mov.w	r4, #768	; 0x300
 8002694:	e003      	b.n	800269e <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8002696:	f44f 7400 	mov.w	r4, #512	; 0x200
 800269a:	e000      	b.n	800269e <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 800269c:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <FLASH_Erase_Sector+0x54>)
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80026a6:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	4322      	orrs	r2, r4
 80026ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80026b4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80026bc:	f040 0002 	orr.w	r0, r0, #2
 80026c0:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026c8:	611a      	str	r2, [r3, #16]
}
 80026ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026ce:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80026d0:	f44f 7480 	mov.w	r4, #256	; 0x100
 80026d4:	e7e3      	b.n	800269e <FLASH_Erase_Sector+0x1a>
 80026d6:	bf00      	nop
 80026d8:	40023c00 	.word	0x40023c00

080026dc <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80026dc:	4b16      	ldr	r3, [pc, #88]	; (8002738 <FLASH_FlushCaches+0x5c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80026e4:	d010      	beq.n	8002708 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80026e6:	4b14      	ldr	r3, [pc, #80]	; (8002738 <FLASH_FlushCaches+0x5c>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026ee:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fe:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002706:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <FLASH_FlushCaches+0x5c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002710:	d010      	beq.n	8002734 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <FLASH_FlushCaches+0x5c>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800272a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002732:	601a      	str	r2, [r3, #0]
  }
}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023c00 	.word	0x40023c00

0800273c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273c:	2300      	movs	r3, #0
 800273e:	2b0f      	cmp	r3, #15
 8002740:	f200 80c5 	bhi.w	80028ce <HAL_GPIO_Init+0x192>
{
 8002744:	b4f0      	push	{r4, r5, r6, r7}
 8002746:	b082      	sub	sp, #8
 8002748:	e039      	b.n	80027be <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274a:	2204      	movs	r2, #4
 800274c:	e000      	b.n	8002750 <HAL_GPIO_Init+0x14>
 800274e:	2200      	movs	r2, #0
 8002750:	40b2      	lsls	r2, r6
 8002752:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002754:	3402      	adds	r4, #2
 8002756:	4e5e      	ldr	r6, [pc, #376]	; (80028d0 <HAL_GPIO_Init+0x194>)
 8002758:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275c:	4a5d      	ldr	r2, [pc, #372]	; (80028d4 <HAL_GPIO_Init+0x198>)
 800275e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002760:	43ea      	mvns	r2, r5
 8002762:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002766:	684f      	ldr	r7, [r1, #4]
 8002768:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800276c:	d001      	beq.n	8002772 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800276e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002772:	4c58      	ldr	r4, [pc, #352]	; (80028d4 <HAL_GPIO_Init+0x198>)
 8002774:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002776:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002778:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800277c:	684f      	ldr	r7, [r1, #4]
 800277e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002782:	d001      	beq.n	8002788 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002784:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002788:	4c52      	ldr	r4, [pc, #328]	; (80028d4 <HAL_GPIO_Init+0x198>)
 800278a:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800278e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002792:	684f      	ldr	r7, [r1, #4]
 8002794:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002798:	d001      	beq.n	800279e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800279a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800279e:	4c4d      	ldr	r4, [pc, #308]	; (80028d4 <HAL_GPIO_Init+0x198>)
 80027a0:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80027a2:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027a6:	684e      	ldr	r6, [r1, #4]
 80027a8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80027ac:	d001      	beq.n	80027b2 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80027ae:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80027b2:	4c48      	ldr	r4, [pc, #288]	; (80028d4 <HAL_GPIO_Init+0x198>)
 80027b4:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	3301      	adds	r3, #1
 80027b8:	2b0f      	cmp	r3, #15
 80027ba:	f200 8085 	bhi.w	80028c8 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 80027be:	2201      	movs	r2, #1
 80027c0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c2:	680c      	ldr	r4, [r1, #0]
 80027c4:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80027c8:	42aa      	cmp	r2, r5
 80027ca:	d1f4      	bne.n	80027b6 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027cc:	684c      	ldr	r4, [r1, #4]
 80027ce:	2c02      	cmp	r4, #2
 80027d0:	d001      	beq.n	80027d6 <HAL_GPIO_Init+0x9a>
 80027d2:	2c12      	cmp	r4, #18
 80027d4:	d110      	bne.n	80027f8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 80027d6:	08de      	lsrs	r6, r3, #3
 80027d8:	3608      	adds	r6, #8
 80027da:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027de:	f003 0407 	and.w	r4, r3, #7
 80027e2:	00a7      	lsls	r7, r4, #2
 80027e4:	240f      	movs	r4, #15
 80027e6:	40bc      	lsls	r4, r7
 80027e8:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ec:	690c      	ldr	r4, [r1, #16]
 80027ee:	40bc      	lsls	r4, r7
 80027f0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 80027f4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80027f8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fa:	005f      	lsls	r7, r3, #1
 80027fc:	2603      	movs	r6, #3
 80027fe:	40be      	lsls	r6, r7
 8002800:	43f6      	mvns	r6, r6
 8002802:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002806:	684c      	ldr	r4, [r1, #4]
 8002808:	f004 0403 	and.w	r4, r4, #3
 800280c:	40bc      	lsls	r4, r7
 800280e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002812:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002814:	684c      	ldr	r4, [r1, #4]
 8002816:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800281a:	f1bc 0f01 	cmp.w	ip, #1
 800281e:	d903      	bls.n	8002828 <HAL_GPIO_Init+0xec>
 8002820:	2c11      	cmp	r4, #17
 8002822:	d001      	beq.n	8002828 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002824:	2c12      	cmp	r4, #18
 8002826:	d110      	bne.n	800284a <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8002828:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800282a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282e:	68cc      	ldr	r4, [r1, #12]
 8002830:	40bc      	lsls	r4, r7
 8002832:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8002836:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002838:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800283a:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800283e:	684c      	ldr	r4, [r1, #4]
 8002840:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002844:	409c      	lsls	r4, r3
 8002846:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8002848:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800284a:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800284c:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800284e:	688a      	ldr	r2, [r1, #8]
 8002850:	40ba      	lsls	r2, r7
 8002852:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8002854:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002856:	684a      	ldr	r2, [r1, #4]
 8002858:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800285c:	d0ab      	beq.n	80027b6 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	2200      	movs	r2, #0
 8002860:	9201      	str	r2, [sp, #4]
 8002862:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <HAL_GPIO_Init+0x19c>)
 8002864:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002866:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800286a:	6454      	str	r4, [r2, #68]	; 0x44
 800286c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800286e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002872:	9201      	str	r2, [sp, #4]
 8002874:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002876:	089c      	lsrs	r4, r3, #2
 8002878:	1ca6      	adds	r6, r4, #2
 800287a:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_GPIO_Init+0x194>)
 800287c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	0096      	lsls	r6, r2, #2
 8002886:	220f      	movs	r2, #15
 8002888:	40b2      	lsls	r2, r6
 800288a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288e:	4a13      	ldr	r2, [pc, #76]	; (80028dc <HAL_GPIO_Init+0x1a0>)
 8002890:	4290      	cmp	r0, r2
 8002892:	f43f af5c 	beq.w	800274e <HAL_GPIO_Init+0x12>
 8002896:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800289a:	4290      	cmp	r0, r2
 800289c:	d00e      	beq.n	80028bc <HAL_GPIO_Init+0x180>
 800289e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028a2:	4290      	cmp	r0, r2
 80028a4:	d00c      	beq.n	80028c0 <HAL_GPIO_Init+0x184>
 80028a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028aa:	4290      	cmp	r0, r2
 80028ac:	d00a      	beq.n	80028c4 <HAL_GPIO_Init+0x188>
 80028ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028b2:	4290      	cmp	r0, r2
 80028b4:	f43f af49 	beq.w	800274a <HAL_GPIO_Init+0xe>
 80028b8:	2207      	movs	r2, #7
 80028ba:	e749      	b.n	8002750 <HAL_GPIO_Init+0x14>
 80028bc:	2201      	movs	r2, #1
 80028be:	e747      	b.n	8002750 <HAL_GPIO_Init+0x14>
 80028c0:	2202      	movs	r2, #2
 80028c2:	e745      	b.n	8002750 <HAL_GPIO_Init+0x14>
 80028c4:	2203      	movs	r2, #3
 80028c6:	e743      	b.n	8002750 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80028c8:	b002      	add	sp, #8
 80028ca:	bcf0      	pop	{r4, r5, r6, r7}
 80028cc:	4770      	bx	lr
 80028ce:	4770      	bx	lr
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40013c00 	.word	0x40013c00
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000

080028e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	b912      	cbnz	r2, 80028e8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028e2:	0409      	lsls	r1, r1, #16
 80028e4:	6181      	str	r1, [r0, #24]
  }
}
 80028e6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80028e8:	6181      	str	r1, [r0, #24]
 80028ea:	4770      	bx	lr

080028ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028ec:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4203      	tst	r3, r0
 80028f4:	d100      	bne.n	80028f8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80028f6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028f8:	4b02      	ldr	r3, [pc, #8]	; (8002904 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80028fa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028fc:	f002 fc02 	bl	8005104 <HAL_GPIO_EXTI_Callback>
}
 8002900:	e7f9      	b.n	80028f6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002902:	bf00      	nop
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002908:	2800      	cmp	r0, #0
 800290a:	f000 80be 	beq.w	8002a8a <HAL_I2C_Init+0x182>
{
 800290e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002910:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002912:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002916:	2b00      	cmp	r3, #0
 8002918:	d06b      	beq.n	80029f2 <HAL_I2C_Init+0xea>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800291a:	2324      	movs	r3, #36	; 0x24
 800291c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800292a:	f000 fba7 	bl	800307c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800292e:	6862      	ldr	r2, [r4, #4]
 8002930:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <HAL_I2C_Init+0x18c>)
 8002932:	429a      	cmp	r2, r3
 8002934:	d862      	bhi.n	80029fc <HAL_I2C_Init+0xf4>
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_I2C_Init+0x190>)
 8002938:	4298      	cmp	r0, r3
 800293a:	bf8c      	ite	hi
 800293c:	2300      	movhi	r3, #0
 800293e:	2301      	movls	r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 80a4 	bne.w	8002a8e <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002946:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <HAL_I2C_Init+0x194>)
 8002948:	fba3 2300 	umull	r2, r3, r3, r0
 800294c:	0c9b      	lsrs	r3, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800294e:	6821      	ldr	r1, [r4, #0]
 8002950:	684a      	ldr	r2, [r1, #4]
 8002952:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002956:	431a      	orrs	r2, r3
 8002958:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295a:	6825      	ldr	r5, [r4, #0]
 800295c:	6a2a      	ldr	r2, [r5, #32]
 800295e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002962:	6866      	ldr	r6, [r4, #4]
 8002964:	494b      	ldr	r1, [pc, #300]	; (8002a94 <HAL_I2C_Init+0x18c>)
 8002966:	428e      	cmp	r6, r1
 8002968:	d84e      	bhi.n	8002a08 <HAL_I2C_Init+0x100>
 800296a:	3301      	adds	r3, #1
 800296c:	4313      	orrs	r3, r2
 800296e:	622b      	str	r3, [r5, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002970:	6825      	ldr	r5, [r4, #0]
 8002972:	69e9      	ldr	r1, [r5, #28]
 8002974:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002978:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800297c:	6863      	ldr	r3, [r4, #4]
 800297e:	4a45      	ldr	r2, [pc, #276]	; (8002a94 <HAL_I2C_Init+0x18c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d84b      	bhi.n	8002a1c <HAL_I2C_Init+0x114>
 8002984:	3801      	subs	r0, #1
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fbb0 f3f3 	udiv	r3, r0, r3
 800298c:	3301      	adds	r3, #1
 800298e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002992:	2b04      	cmp	r3, #4
 8002994:	bf38      	it	cc
 8002996:	2304      	movcc	r3, #4
 8002998:	430b      	orrs	r3, r1
 800299a:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800299c:	6821      	ldr	r1, [r4, #0]
 800299e:	680b      	ldr	r3, [r1, #0]
 80029a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80029a4:	69e2      	ldr	r2, [r4, #28]
 80029a6:	6a20      	ldr	r0, [r4, #32]
 80029a8:	4302      	orrs	r2, r0
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029ae:	6821      	ldr	r1, [r4, #0]
 80029b0:	688b      	ldr	r3, [r1, #8]
 80029b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ba:	6922      	ldr	r2, [r4, #16]
 80029bc:	68e0      	ldr	r0, [r4, #12]
 80029be:	4302      	orrs	r2, r0
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c4:	6821      	ldr	r1, [r4, #0]
 80029c6:	68cb      	ldr	r3, [r1, #12]
 80029c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029cc:	6962      	ldr	r2, [r4, #20]
 80029ce:	69a0      	ldr	r0, [r4, #24]
 80029d0:	4302      	orrs	r2, r0
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	6813      	ldr	r3, [r2, #0]
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e0:	2000      	movs	r0, #0
 80029e2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	2320      	movs	r3, #32
 80029e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ea:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 80029f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80029f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80029f6:	f001 ffef 	bl	80049d8 <HAL_I2C_MspInit>
 80029fa:	e78e      	b.n	800291a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029fc:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <HAL_I2C_Init+0x198>)
 80029fe:	4298      	cmp	r0, r3
 8002a00:	bf8c      	ite	hi
 8002a02:	2300      	movhi	r3, #0
 8002a04:	2301      	movls	r3, #1
 8002a06:	e79b      	b.n	8002940 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a08:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4924      	ldr	r1, [pc, #144]	; (8002aa4 <HAL_I2C_Init+0x19c>)
 8002a12:	fba1 1303 	umull	r1, r3, r1, r3
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	3301      	adds	r3, #1
 8002a1a:	e7a7      	b.n	800296c <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a1c:	68a2      	ldr	r2, [r4, #8]
 8002a1e:	b9ba      	cbnz	r2, 8002a50 <HAL_I2C_Init+0x148>
 8002a20:	1e46      	subs	r6, r0, #1
 8002a22:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8002a26:	fbb6 f6f7 	udiv	r6, r6, r7
 8002a2a:	3601      	adds	r6, #1
 8002a2c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002a30:	fab6 f686 	clz	r6, r6
 8002a34:	0976      	lsrs	r6, r6, #5
 8002a36:	bb36      	cbnz	r6, 8002a86 <HAL_I2C_Init+0x17e>
 8002a38:	b9c2      	cbnz	r2, 8002a6c <HAL_I2C_Init+0x164>
 8002a3a:	3801      	subs	r0, #1
 8002a3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002a4a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8002a4e:	e7a3      	b.n	8002998 <HAL_I2C_Init+0x90>
 8002a50:	1e46      	subs	r6, r0, #1
 8002a52:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8002a56:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002a5a:	fbb6 f6f7 	udiv	r6, r6, r7
 8002a5e:	3601      	adds	r6, #1
 8002a60:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002a64:	fab6 f686 	clz	r6, r6
 8002a68:	0976      	lsrs	r6, r6, #5
 8002a6a:	e7e4      	b.n	8002a36 <HAL_I2C_Init+0x12e>
 8002a6c:	3801      	subs	r0, #1
 8002a6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a76:	fbb0 f2f3 	udiv	r2, r0, r3
 8002a7a:	3201      	adds	r2, #1
 8002a7c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002a80:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8002a84:	e788      	b.n	8002998 <HAL_I2C_Init+0x90>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e786      	b.n	8002998 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
}
 8002a8c:	4770      	bx	lr
    return HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e7ae      	b.n	80029f0 <HAL_I2C_Init+0xe8>
 8002a92:	bf00      	nop
 8002a94:	000186a0 	.word	0x000186a0
 8002a98:	001e847f 	.word	0x001e847f
 8002a9c:	431bde83 	.word	0x431bde83
 8002aa0:	003d08ff 	.word	0x003d08ff
 8002aa4:	10624dd3 	.word	0x10624dd3

08002aa8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	f000 81bb 	beq.w	8002e24 <HAL_RCC_OscConfig+0x37c>
{
 8002aae:	b570      	push	{r4, r5, r6, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	f013 0f01 	tst.w	r3, #1
 8002aba:	d03b      	beq.n	8002b34 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002abc:	4ba7      	ldr	r3, [pc, #668]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d02c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac8:	4ba4      	ldr	r3, [pc, #656]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d021      	beq.n	8002b18 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad4:	6863      	ldr	r3, [r4, #4]
 8002ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ada:	d04f      	beq.n	8002b7c <HAL_RCC_OscConfig+0xd4>
 8002adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae0:	d052      	beq.n	8002b88 <HAL_RCC_OscConfig+0xe0>
 8002ae2:	4b9e      	ldr	r3, [pc, #632]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002af2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002af4:	6863      	ldr	r3, [r4, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d050      	beq.n	8002b9c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7ff fa55 	bl	8001fa8 <HAL_GetTick>
 8002afe:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b00:	4b96      	ldr	r3, [pc, #600]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b08:	d114      	bne.n	8002b34 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0a:	f7ff fa4d 	bl	8001fa8 <HAL_GetTick>
 8002b0e:	1b40      	subs	r0, r0, r5
 8002b10:	2864      	cmp	r0, #100	; 0x64
 8002b12:	d9f5      	bls.n	8002b00 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002b14:	2003      	movs	r0, #3
 8002b16:	e18a      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b18:	4b90      	ldr	r3, [pc, #576]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b20:	d0d8      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b22:	4b8e      	ldr	r3, [pc, #568]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b2a:	d003      	beq.n	8002b34 <HAL_RCC_OscConfig+0x8c>
 8002b2c:	6863      	ldr	r3, [r4, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 817a 	beq.w	8002e28 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	f013 0f02 	tst.w	r3, #2
 8002b3a:	d055      	beq.n	8002be8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3c:	4b87      	ldr	r3, [pc, #540]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f013 0f0c 	tst.w	r3, #12
 8002b44:	d03e      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b46:	4b85      	ldr	r3, [pc, #532]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d033      	beq.n	8002bba <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b52:	68e3      	ldr	r3, [r4, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d068      	beq.n	8002c2a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b58:	4b81      	ldr	r3, [pc, #516]	; (8002d60 <HAL_RCC_OscConfig+0x2b8>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7ff fa23 	bl	8001fa8 <HAL_GetTick>
 8002b62:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	4b7d      	ldr	r3, [pc, #500]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f013 0f02 	tst.w	r3, #2
 8002b6c:	d154      	bne.n	8002c18 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7ff fa1b 	bl	8001fa8 <HAL_GetTick>
 8002b72:	1b40      	subs	r0, r0, r5
 8002b74:	2802      	cmp	r0, #2
 8002b76:	d9f5      	bls.n	8002b64 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002b78:	2003      	movs	r0, #3
 8002b7a:	e158      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7c:	4a77      	ldr	r2, [pc, #476]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002b7e:	6813      	ldr	r3, [r2, #0]
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e7b5      	b.n	8002af4 <HAL_RCC_OscConfig+0x4c>
 8002b88:	4b74      	ldr	r3, [pc, #464]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e7ab      	b.n	8002af4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002b9c:	f7ff fa04 	bl	8001fa8 <HAL_GetTick>
 8002ba0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	4b6e      	ldr	r3, [pc, #440]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002baa:	d0c3      	beq.n	8002b34 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bac:	f7ff f9fc 	bl	8001fa8 <HAL_GetTick>
 8002bb0:	1b40      	subs	r0, r0, r5
 8002bb2:	2864      	cmp	r0, #100	; 0x64
 8002bb4:	d9f5      	bls.n	8002ba2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002bb6:	2003      	movs	r0, #3
 8002bb8:	e139      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b68      	ldr	r3, [pc, #416]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002bc2:	d1c6      	bne.n	8002b52 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc4:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f013 0f02 	tst.w	r3, #2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x130>
 8002bce:	68e3      	ldr	r3, [r4, #12]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	e12a      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd8:	4a60      	ldr	r2, [pc, #384]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002be0:	6921      	ldr	r1, [r4, #16]
 8002be2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002be6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	f013 0f08 	tst.w	r3, #8
 8002bee:	d040      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bf0:	6963      	ldr	r3, [r4, #20]
 8002bf2:	b363      	cbz	r3, 8002c4e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf4:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <HAL_RCC_OscConfig+0x2bc>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7ff f9d5 	bl	8001fa8 <HAL_GetTick>
 8002bfe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c00:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c04:	f013 0f02 	tst.w	r3, #2
 8002c08:	d133      	bne.n	8002c72 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0a:	f7ff f9cd 	bl	8001fa8 <HAL_GetTick>
 8002c0e:	1b40      	subs	r0, r0, r5
 8002c10:	2802      	cmp	r0, #2
 8002c12:	d9f5      	bls.n	8002c00 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002c14:	2003      	movs	r0, #3
 8002c16:	e10a      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4a50      	ldr	r2, [pc, #320]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002c1a:	6813      	ldr	r3, [r2, #0]
 8002c1c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c20:	6921      	ldr	r1, [r4, #16]
 8002c22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	e7de      	b.n	8002be8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002c2a:	4b4d      	ldr	r3, [pc, #308]	; (8002d60 <HAL_RCC_OscConfig+0x2b8>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c30:	f7ff f9ba 	bl	8001fa8 <HAL_GetTick>
 8002c34:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c36:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f013 0f02 	tst.w	r3, #2
 8002c3e:	d0d3      	beq.n	8002be8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c40:	f7ff f9b2 	bl	8001fa8 <HAL_GetTick>
 8002c44:	1b40      	subs	r0, r0, r5
 8002c46:	2802      	cmp	r0, #2
 8002c48:	d9f5      	bls.n	8002c36 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002c4a:	2003      	movs	r0, #3
 8002c4c:	e0ef      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4e:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <HAL_RCC_OscConfig+0x2bc>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c54:	f7ff f9a8 	bl	8001fa8 <HAL_GetTick>
 8002c58:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5a:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5e:	f013 0f02 	tst.w	r3, #2
 8002c62:	d006      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c64:	f7ff f9a0 	bl	8001fa8 <HAL_GetTick>
 8002c68:	1b40      	subs	r0, r0, r5
 8002c6a:	2802      	cmp	r0, #2
 8002c6c:	d9f5      	bls.n	8002c5a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8002c6e:	2003      	movs	r0, #3
 8002c70:	e0dd      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	f013 0f04 	tst.w	r3, #4
 8002c78:	d079      	beq.n	8002d6e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7a:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002c82:	d133      	bne.n	8002cec <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c9c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_RCC_OscConfig+0x2c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ca6:	d023      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca8:	68a3      	ldr	r3, [r4, #8]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d034      	beq.n	8002d18 <HAL_RCC_OscConfig+0x270>
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d038      	beq.n	8002d24 <HAL_RCC_OscConfig+0x27c>
 8002cb2:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002cb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	671a      	str	r2, [r3, #112]	; 0x70
 8002cbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cbe:	f022 0204 	bic.w	r2, r2, #4
 8002cc2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc4:	68a3      	ldr	r3, [r4, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d036      	beq.n	8002d38 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7ff f96d 	bl	8001fa8 <HAL_GetTick>
 8002cce:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	f013 0f02 	tst.w	r3, #2
 8002cd8:	d148      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7ff f965 	bl	8001fa8 <HAL_GetTick>
 8002cde:	1b80      	subs	r0, r0, r6
 8002ce0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ce4:	4298      	cmp	r0, r3
 8002ce6:	d9f3      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8002ce8:	2003      	movs	r0, #3
 8002cea:	e0a0      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8002cec:	2500      	movs	r5, #0
 8002cee:	e7d6      	b.n	8002c9e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf0:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <HAL_RCC_OscConfig+0x2c0>)
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002cfa:	f7ff f955 	bl	8001fa8 <HAL_GetTick>
 8002cfe:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCC_OscConfig+0x2c0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d08:	d1ce      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7ff f94d 	bl	8001fa8 <HAL_GetTick>
 8002d0e:	1b80      	subs	r0, r0, r6
 8002d10:	2802      	cmp	r0, #2
 8002d12:	d9f5      	bls.n	8002d00 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002d14:	2003      	movs	r0, #3
 8002d16:	e08a      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d18:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002d1a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	e7cf      	b.n	8002cc4 <HAL_RCC_OscConfig+0x21c>
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002d26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d28:	f042 0204 	orr.w	r2, r2, #4
 8002d2c:	671a      	str	r2, [r3, #112]	; 0x70
 8002d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	671a      	str	r2, [r3, #112]	; 0x70
 8002d36:	e7c5      	b.n	8002cc4 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d38:	f7ff f936 	bl	8001fa8 <HAL_GetTick>
 8002d3c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_RCC_OscConfig+0x2b4>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	f013 0f02 	tst.w	r3, #2
 8002d46:	d011      	beq.n	8002d6c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7ff f92e 	bl	8001fa8 <HAL_GetTick>
 8002d4c:	1b80      	subs	r0, r0, r6
 8002d4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d52:	4298      	cmp	r0, r3
 8002d54:	d9f3      	bls.n	8002d3e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8002d56:	2003      	movs	r0, #3
 8002d58:	e069      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	42470000 	.word	0x42470000
 8002d64:	42470e80 	.word	0x42470e80
 8002d68:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d6c:	b9e5      	cbnz	r5, 8002da8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6e:	69a3      	ldr	r3, [r4, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d05b      	beq.n	8002e2c <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d74:	4a30      	ldr	r2, [pc, #192]	; (8002e38 <HAL_RCC_OscConfig+0x390>)
 8002d76:	6892      	ldr	r2, [r2, #8]
 8002d78:	f002 020c 	and.w	r2, r2, #12
 8002d7c:	2a08      	cmp	r2, #8
 8002d7e:	d058      	beq.n	8002e32 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d017      	beq.n	8002db4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_RCC_OscConfig+0x394>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7ff f90d 	bl	8001fa8 <HAL_GetTick>
 8002d8e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCC_OscConfig+0x390>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d98:	d042      	beq.n	8002e20 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7ff f905 	bl	8001fa8 <HAL_GetTick>
 8002d9e:	1b00      	subs	r0, r0, r4
 8002da0:	2802      	cmp	r0, #2
 8002da2:	d9f5      	bls.n	8002d90 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002da4:	2003      	movs	r0, #3
 8002da6:	e042      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <HAL_RCC_OscConfig+0x390>)
 8002daa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	e7dc      	b.n	8002d6e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_RCC_OscConfig+0x394>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dba:	f7ff f8f5 	bl	8001fa8 <HAL_GetTick>
 8002dbe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCC_OscConfig+0x390>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002dc8:	d006      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dca:	f7ff f8ed 	bl	8001fa8 <HAL_GetTick>
 8002dce:	1b40      	subs	r0, r0, r5
 8002dd0:	2802      	cmp	r0, #2
 8002dd2:	d9f5      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	e02a      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd8:	69e3      	ldr	r3, [r4, #28]
 8002dda:	6a22      	ldr	r2, [r4, #32]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002de0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002de4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002de6:	0852      	lsrs	r2, r2, #1
 8002de8:	3a01      	subs	r2, #1
 8002dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002dee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002df0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002df4:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_RCC_OscConfig+0x390>)
 8002df6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_RCC_OscConfig+0x394>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dfe:	f7ff f8d3 	bl	8001fa8 <HAL_GetTick>
 8002e02:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_RCC_OscConfig+0x390>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e0c:	d106      	bne.n	8002e1c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7ff f8cb 	bl	8001fa8 <HAL_GetTick>
 8002e12:	1b00      	subs	r0, r0, r4
 8002e14:	2802      	cmp	r0, #2
 8002e16:	d9f5      	bls.n	8002e04 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002e18:	2003      	movs	r0, #3
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	e006      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
 8002e20:	2000      	movs	r0, #0
 8002e22:	e004      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8002e24:	2001      	movs	r0, #1
}
 8002e26:	4770      	bx	lr
        return HAL_ERROR;
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8002e2c:	2000      	movs	r0, #0
}
 8002e2e:	b002      	add	sp, #8
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002e32:	2001      	movs	r0, #1
 8002e34:	e7fb      	b.n	8002e2e <HAL_RCC_OscConfig+0x386>
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	42470060 	.word	0x42470060

08002e40 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e40:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d05c      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0xc6>
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	482f      	ldr	r0, [pc, #188]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e52:	4770      	bx	lr
{
 8002e54:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e58:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002e66:	d02b      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e68:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002e70:	461e      	mov	r6, r3
 8002e72:	2700      	movs	r7, #0
 8002e74:	015c      	lsls	r4, r3, #5
 8002e76:	2500      	movs	r5, #0
 8002e78:	1ae4      	subs	r4, r4, r3
 8002e7a:	eb65 0507 	sbc.w	r5, r5, r7
 8002e7e:	01a9      	lsls	r1, r5, #6
 8002e80:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002e84:	01a0      	lsls	r0, r4, #6
 8002e86:	1b00      	subs	r0, r0, r4
 8002e88:	eb61 0105 	sbc.w	r1, r1, r5
 8002e8c:	00cb      	lsls	r3, r1, #3
 8002e8e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e92:	00c4      	lsls	r4, r0, #3
 8002e94:	19a0      	adds	r0, r4, r6
 8002e96:	eb43 0107 	adc.w	r1, r3, r7
 8002e9a:	024b      	lsls	r3, r1, #9
 8002e9c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002ea0:	0244      	lsls	r4, r0, #9
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f7fd fef6 	bl	8000c98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eac:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002eb8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ebc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002ec8:	461e      	mov	r6, r3
 8002eca:	2700      	movs	r7, #0
 8002ecc:	015c      	lsls	r4, r3, #5
 8002ece:	2500      	movs	r5, #0
 8002ed0:	1ae4      	subs	r4, r4, r3
 8002ed2:	eb65 0507 	sbc.w	r5, r5, r7
 8002ed6:	01a9      	lsls	r1, r5, #6
 8002ed8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002edc:	01a0      	lsls	r0, r4, #6
 8002ede:	1b00      	subs	r0, r0, r4
 8002ee0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ee4:	00cb      	lsls	r3, r1, #3
 8002ee6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002eea:	00c4      	lsls	r4, r0, #3
 8002eec:	19a0      	adds	r0, r4, r6
 8002eee:	eb43 0107 	adc.w	r1, r3, r7
 8002ef2:	028b      	lsls	r3, r1, #10
 8002ef4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002ef8:	0284      	lsls	r4, r0, #10
 8002efa:	4620      	mov	r0, r4
 8002efc:	4619      	mov	r1, r3
 8002efe:	2300      	movs	r3, #0
 8002f00:	f7fd feca 	bl	8000c98 <__aeabi_uldivmod>
 8002f04:	e7d2      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8002f06:	4803      	ldr	r0, [pc, #12]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	00f42400 	.word	0x00f42400
 8002f14:	007a1200 	.word	0x007a1200

08002f18 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	f000 809d 	beq.w	8003058 <HAL_RCC_ClockConfig+0x140>
{
 8002f1e:	b570      	push	{r4, r5, r6, lr}
 8002f20:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f22:	4b4f      	ldr	r3, [pc, #316]	; (8003060 <HAL_RCC_ClockConfig+0x148>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	428b      	cmp	r3, r1
 8002f2c:	d209      	bcs.n	8002f42 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	b2cb      	uxtb	r3, r1
 8002f30:	4a4b      	ldr	r2, [pc, #300]	; (8003060 <HAL_RCC_ClockConfig+0x148>)
 8002f32:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f34:	6813      	ldr	r3, [r2, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	428b      	cmp	r3, r1
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8002f3e:	2001      	movs	r0, #1
}
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	f013 0f02 	tst.w	r3, #2
 8002f48:	d017      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4a:	f013 0f04 	tst.w	r3, #4
 8002f4e:	d004      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f50:	4a44      	ldr	r2, [pc, #272]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 8002f52:	6893      	ldr	r3, [r2, #8]
 8002f54:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f58:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	f013 0f08 	tst.w	r3, #8
 8002f60:	d004      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f62:	4a40      	ldr	r2, [pc, #256]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 8002f64:	6893      	ldr	r3, [r2, #8]
 8002f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4a3d      	ldr	r2, [pc, #244]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 8002f6e:	6893      	ldr	r3, [r2, #8]
 8002f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f74:	68a0      	ldr	r0, [r4, #8]
 8002f76:	4303      	orrs	r3, r0
 8002f78:	6093      	str	r3, [r2, #8]
 8002f7a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	f013 0f01 	tst.w	r3, #1
 8002f82:	d032      	beq.n	8002fea <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f84:	6863      	ldr	r3, [r4, #4]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d021      	beq.n	8002fce <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8a:	1e9a      	subs	r2, r3, #2
 8002f8c:	2a01      	cmp	r2, #1
 8002f8e:	d925      	bls.n	8002fdc <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	4a34      	ldr	r2, [pc, #208]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	f012 0f02 	tst.w	r2, #2
 8002f98:	d060      	beq.n	800305c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9a:	4932      	ldr	r1, [pc, #200]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 8002f9c:	688a      	ldr	r2, [r1, #8]
 8002f9e:	f022 0203 	bic.w	r2, r2, #3
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002fa6:	f7fe ffff 	bl	8001fa8 <HAL_GetTick>
 8002faa:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	6862      	ldr	r2, [r4, #4]
 8002fb6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fba:	d016      	beq.n	8002fea <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fe fff4 	bl	8001fa8 <HAL_GetTick>
 8002fc0:	1b80      	subs	r0, r0, r6
 8002fc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fc6:	4298      	cmp	r0, r3
 8002fc8:	d9f0      	bls.n	8002fac <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8002fca:	2003      	movs	r0, #3
 8002fcc:	e7b8      	b.n	8002f40 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4a25      	ldr	r2, [pc, #148]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002fd6:	d1e0      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002fd8:	2001      	movs	r0, #1
 8002fda:	e7b1      	b.n	8002f40 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fdc:	4a21      	ldr	r2, [pc, #132]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002fe4:	d1d9      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	e7aa      	b.n	8002f40 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_ClockConfig+0x148>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	42ab      	cmp	r3, r5
 8002ff4:	d909      	bls.n	800300a <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	b2ea      	uxtb	r2, r5
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_RCC_ClockConfig+0x148>)
 8002ffa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	42ab      	cmp	r3, r5
 8003004:	d001      	beq.n	800300a <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8003006:	2001      	movs	r0, #1
 8003008:	e79a      	b.n	8002f40 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	f013 0f04 	tst.w	r3, #4
 8003010:	d006      	beq.n	8003020 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003012:	4a14      	ldr	r2, [pc, #80]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 8003014:	6893      	ldr	r3, [r2, #8]
 8003016:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800301a:	68e1      	ldr	r1, [r4, #12]
 800301c:	430b      	orrs	r3, r1
 800301e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	f013 0f08 	tst.w	r3, #8
 8003026:	d007      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 800302a:	6893      	ldr	r3, [r2, #8]
 800302c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003030:	6921      	ldr	r1, [r4, #16]
 8003032:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003036:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003038:	f7ff ff02 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x14c>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <HAL_RCC_ClockConfig+0x150>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	40d8      	lsrs	r0, r3
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <HAL_RCC_ClockConfig+0x154>)
 800304c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800304e:	2000      	movs	r0, #0
 8003050:	f002 f918 	bl	8005284 <HAL_InitTick>
  return HAL_OK;
 8003054:	2000      	movs	r0, #0
 8003056:	e773      	b.n	8002f40 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003058:	2001      	movs	r0, #1
}
 800305a:	4770      	bx	lr
        return HAL_ERROR;
 800305c:	2001      	movs	r0, #1
 800305e:	e76f      	b.n	8002f40 <HAL_RCC_ClockConfig+0x28>
 8003060:	40023c00 	.word	0x40023c00
 8003064:	40023800 	.word	0x40023800
 8003068:	080096c8 	.word	0x080096c8
 800306c:	20000060 	.word	0x20000060

08003070 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003070:	4b01      	ldr	r3, [pc, #4]	; (8003078 <HAL_RCC_GetHCLKFreq+0x8>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000060 	.word	0x20000060

0800307c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800307c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800307e:	f7ff fff7 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003082:	4b04      	ldr	r3, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800308a:	4a03      	ldr	r2, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800308c:	5cd3      	ldrb	r3, [r2, r3]
}
 800308e:	40d8      	lsrs	r0, r3
 8003090:	bd08      	pop	{r3, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	080096d8 	.word	0x080096d8

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800309e:	f7ff ffe7 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030a2:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80030aa:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
}
 80030ae:	40d8      	lsrs	r0, r3
 80030b0:	bd08      	pop	{r3, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	080096d8 	.word	0x080096d8

080030bc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030bc:	230f      	movs	r3, #15
 80030be:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_GetClockConfig+0x34>)
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	f002 0203 	and.w	r2, r2, #3
 80030c8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80030d0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80030d8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80030e2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_RCC_GetClockConfig+0x38>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	600b      	str	r3, [r1, #0]
}
 80030ee:	4770      	bx	lr
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40023c00 	.word	0x40023c00

080030f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	4605      	mov	r5, r0
 80030fc:	460f      	mov	r7, r1
 80030fe:	4616      	mov	r6, r2
 8003100:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003102:	682b      	ldr	r3, [r5, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	ea37 0303 	bics.w	r3, r7, r3
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	42b3      	cmp	r3, r6
 8003112:	d037      	beq.n	8003184 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003114:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003118:	d0f3      	beq.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800311a:	f7fe ff45 	bl	8001fa8 <HAL_GetTick>
 800311e:	9b06      	ldr	r3, [sp, #24]
 8003120:	1ac0      	subs	r0, r0, r3
 8003122:	42a0      	cmp	r0, r4
 8003124:	d201      	bcs.n	800312a <SPI_WaitFlagStateUntilTimeout+0x32>
 8003126:	2c00      	cmp	r4, #0
 8003128:	d1eb      	bne.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800312a:	682a      	ldr	r2, [r5, #0]
 800312c:	6853      	ldr	r3, [r2, #4]
 800312e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003132:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003134:	686b      	ldr	r3, [r5, #4]
 8003136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800313a:	d00b      	beq.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800313c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800313e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003142:	d014      	beq.n	800316e <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003144:	2301      	movs	r3, #1
 8003146:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800314a:	2300      	movs	r3, #0
 800314c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8003150:	2003      	movs	r0, #3
 8003152:	e018      	b.n	8003186 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003154:	68ab      	ldr	r3, [r5, #8]
 8003156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315a:	d002      	beq.n	8003162 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800315c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003160:	d1ec      	bne.n	800313c <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8003162:	682a      	ldr	r2, [r5, #0]
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e7e6      	b.n	800313c <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 800316e:	682a      	ldr	r2, [r5, #0]
 8003170:	6813      	ldr	r3, [r2, #0]
 8003172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	682a      	ldr	r2, [r5, #0]
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e7df      	b.n	8003144 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8003184:	2000      	movs	r0, #0
}
 8003186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b530      	push	{r4, r5, lr}
 800318a:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800318c:	4c16      	ldr	r4, [pc, #88]	; (80031e8 <SPI_EndRxTxTransaction+0x60>)
 800318e:	6824      	ldr	r4, [r4, #0]
 8003190:	4d16      	ldr	r5, [pc, #88]	; (80031ec <SPI_EndRxTxTransaction+0x64>)
 8003192:	fba5 3404 	umull	r3, r4, r5, r4
 8003196:	0d64      	lsrs	r4, r4, #21
 8003198:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800319c:	fb05 f404 	mul.w	r4, r5, r4
 80031a0:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031a2:	6844      	ldr	r4, [r0, #4]
 80031a4:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80031a8:	d00b      	beq.n	80031c2 <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031aa:	9b03      	ldr	r3, [sp, #12]
 80031ac:	b1c3      	cbz	r3, 80031e0 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80031ae:	9b03      	ldr	r3, [sp, #12]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031b4:	6803      	ldr	r3, [r0, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031bc:	d1f5      	bne.n	80031aa <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e00f      	b.n	80031e2 <SPI_EndRxTxTransaction+0x5a>
 80031c2:	460b      	mov	r3, r1
 80031c4:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031c6:	9200      	str	r2, [sp, #0]
 80031c8:	2200      	movs	r2, #0
 80031ca:	2180      	movs	r1, #128	; 0x80
 80031cc:	f7ff ff94 	bl	80030f8 <SPI_WaitFlagStateUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	b130      	cbz	r0, 80031e2 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031d6:	f043 0320 	orr.w	r3, r3, #32
 80031da:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e000      	b.n	80031e2 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	b005      	add	sp, #20
 80031e6:	bd30      	pop	{r4, r5, pc}
 80031e8:	20000060 	.word	0x20000060
 80031ec:	165e9f81 	.word	0x165e9f81

080031f0 <SPI_EndRxTransaction>:
{
 80031f0:	b510      	push	{r4, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f6:	6840      	ldr	r0, [r0, #4]
 80031f8:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 80031fc:	d016      	beq.n	800322c <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031fe:	6860      	ldr	r0, [r4, #4]
 8003200:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8003204:	d12e      	bne.n	8003264 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003206:	68a3      	ldr	r3, [r4, #8]
 8003208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320c:	d01b      	beq.n	8003246 <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800320e:	9200      	str	r2, [sp, #0]
 8003210:	460b      	mov	r3, r1
 8003212:	2200      	movs	r2, #0
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	4620      	mov	r0, r4
 8003218:	f7ff ff6e 	bl	80030f8 <SPI_WaitFlagStateUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	b350      	cbz	r0, 8003276 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003220:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003222:	f043 0320 	orr.w	r3, r3, #32
 8003226:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e024      	b.n	8003276 <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800322c:	68a3      	ldr	r3, [r4, #8]
 800322e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003232:	d002      	beq.n	800323a <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003238:	d1e1      	bne.n	80031fe <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 800323a:	6820      	ldr	r0, [r4, #0]
 800323c:	6803      	ldr	r3, [r0, #0]
 800323e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003242:	6003      	str	r3, [r0, #0]
 8003244:	e7db      	b.n	80031fe <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003246:	9200      	str	r2, [sp, #0]
 8003248:	460b      	mov	r3, r1
 800324a:	2200      	movs	r2, #0
 800324c:	2101      	movs	r1, #1
 800324e:	4620      	mov	r0, r4
 8003250:	f7ff ff52 	bl	80030f8 <SPI_WaitFlagStateUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	b170      	cbz	r0, 8003276 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003258:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800325a:	f043 0320 	orr.w	r3, r3, #32
 800325e:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e008      	b.n	8003276 <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003264:	9200      	str	r2, [sp, #0]
 8003266:	460b      	mov	r3, r1
 8003268:	2200      	movs	r2, #0
 800326a:	2101      	movs	r1, #1
 800326c:	4620      	mov	r0, r4
 800326e:	f7ff ff43 	bl	80030f8 <SPI_WaitFlagStateUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	b910      	cbnz	r0, 800327c <SPI_EndRxTransaction+0x8c>
}
 8003276:	4618      	mov	r0, r3
 8003278:	b002      	add	sp, #8
 800327a:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800327c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800327e:	f043 0320 	orr.w	r3, r3, #32
 8003282:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e7f6      	b.n	8003276 <SPI_EndRxTransaction+0x86>

08003288 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003288:	2800      	cmp	r0, #0
 800328a:	d03b      	beq.n	8003304 <HAL_SPI_Init+0x7c>
{
 800328c:	b510      	push	{r4, lr}
 800328e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003290:	2300      	movs	r3, #0
 8003292:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003294:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02e      	beq.n	80032fa <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 800329c:	2302      	movs	r3, #2
 800329e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	6813      	ldr	r3, [r2, #0]
 80032a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032aa:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80032ac:	6863      	ldr	r3, [r4, #4]
 80032ae:	68a2      	ldr	r2, [r4, #8]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	68e2      	ldr	r2, [r4, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	6922      	ldr	r2, [r4, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	6962      	ldr	r2, [r4, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	69a2      	ldr	r2, [r4, #24]
 80032c0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80032c4:	4313      	orrs	r3, r2
 80032c6:	69e2      	ldr	r2, [r4, #28]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	6a22      	ldr	r2, [r4, #32]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	430b      	orrs	r3, r1
 80032d4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80032d6:	8b63      	ldrh	r3, [r4, #26]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80032de:	6822      	ldr	r2, [r4, #0]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032e4:	6822      	ldr	r2, [r4, #0]
 80032e6:	69d3      	ldr	r3, [r2, #28]
 80032e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ec:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ee:	2000      	movs	r0, #0
 80032f0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80032f8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80032fa:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80032fe:	f001 ff3f 	bl	8005180 <HAL_SPI_MspInit>
 8003302:	e7cb      	b.n	800329c <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8003304:	2001      	movs	r0, #1
}
 8003306:	4770      	bx	lr

08003308 <HAL_SPI_Transmit>:
{
 8003308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330c:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800330e:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8003312:	2c01      	cmp	r4, #1
 8003314:	f000 80c3 	beq.w	800349e <HAL_SPI_Transmit+0x196>
 8003318:	461d      	mov	r5, r3
 800331a:	4617      	mov	r7, r2
 800331c:	4688      	mov	r8, r1
 800331e:	4604      	mov	r4, r0
 8003320:	2301      	movs	r3, #1
 8003322:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003326:	f7fe fe3f 	bl	8001fa8 <HAL_GetTick>
 800332a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800332c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d009      	beq.n	800334a <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8003336:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003338:	2301      	movs	r3, #1
 800333a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800333e:	2300      	movs	r3, #0
 8003340:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003344:	b002      	add	sp, #8
 8003346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800334a:	f1b8 0f00 	cmp.w	r8, #0
 800334e:	f000 8098 	beq.w	8003482 <HAL_SPI_Transmit+0x17a>
 8003352:	2f00      	cmp	r7, #0
 8003354:	f000 8097 	beq.w	8003486 <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003358:	2303      	movs	r3, #3
 800335a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800335e:	2300      	movs	r3, #0
 8003360:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003362:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003366:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003368:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800336a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800336c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800336e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003370:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003372:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003374:	68a3      	ldr	r3, [r4, #8]
 8003376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337a:	d01c      	beq.n	80033b6 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003384:	d103      	bne.n	800338e <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800338c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800338e:	68e3      	ldr	r3, [r4, #12]
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d015      	beq.n	80033c2 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003396:	6863      	ldr	r3, [r4, #4]
 8003398:	b10b      	cbz	r3, 800339e <HAL_SPI_Transmit+0x96>
 800339a:	2f01      	cmp	r7, #1
 800339c:	d149      	bne.n	8003432 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800339e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033a8:	3301      	adds	r3, #1
 80033aa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80033ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80033b4:	e03d      	b.n	8003432 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 80033b6:	6822      	ldr	r2, [r4, #0]
 80033b8:	6813      	ldr	r3, [r2, #0]
 80033ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e7dc      	b.n	800337c <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c2:	6863      	ldr	r3, [r4, #4]
 80033c4:	b10b      	cbz	r3, 80033ca <HAL_SPI_Transmit+0xc2>
 80033c6:	2f01      	cmp	r7, #1
 80033c8:	d115      	bne.n	80033f6 <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	8812      	ldrh	r2, [r2, #0]
 80033d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033d4:	3302      	adds	r3, #2
 80033d6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80033d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29b      	uxth	r3, r3
 80033de:	86e3      	strh	r3, [r4, #54]	; 0x36
 80033e0:	e009      	b.n	80033f6 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033e2:	f7fe fde1 	bl	8001fa8 <HAL_GetTick>
 80033e6:	1b80      	subs	r0, r0, r6
 80033e8:	42a8      	cmp	r0, r5
 80033ea:	d302      	bcc.n	80033f2 <HAL_SPI_Transmit+0xea>
 80033ec:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80033f0:	d14b      	bne.n	800348a <HAL_SPI_Transmit+0x182>
 80033f2:	2d00      	cmp	r5, #0
 80033f4:	d04b      	beq.n	800348e <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 80033f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02c      	beq.n	8003458 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	f012 0f02 	tst.w	r2, #2
 8003406:	d0ec      	beq.n	80033e2 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003408:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800340e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003410:	3302      	adds	r3, #2
 8003412:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003414:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003416:	3b01      	subs	r3, #1
 8003418:	b29b      	uxth	r3, r3
 800341a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800341c:	e7eb      	b.n	80033f6 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341e:	f7fe fdc3 	bl	8001fa8 <HAL_GetTick>
 8003422:	1b80      	subs	r0, r0, r6
 8003424:	42a8      	cmp	r0, r5
 8003426:	d302      	bcc.n	800342e <HAL_SPI_Transmit+0x126>
 8003428:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800342c:	d131      	bne.n	8003492 <HAL_SPI_Transmit+0x18a>
 800342e:	2d00      	cmp	r5, #0
 8003430:	d031      	beq.n	8003496 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8003432:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003434:	b29b      	uxth	r3, r3
 8003436:	b17b      	cbz	r3, 8003458 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	f012 0f02 	tst.w	r2, #2
 8003440:	d0ed      	beq.n	800341e <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003442:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003448:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800344a:	3301      	adds	r3, #1
 800344c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800344e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003450:	3b01      	subs	r3, #1
 8003452:	b29b      	uxth	r3, r3
 8003454:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003456:	e7ec      	b.n	8003432 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003458:	4632      	mov	r2, r6
 800345a:	4629      	mov	r1, r5
 800345c:	4620      	mov	r0, r4
 800345e:	f7ff fe93 	bl	8003188 <SPI_EndRxTxTransaction>
 8003462:	b108      	cbz	r0, 8003468 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003464:	2320      	movs	r3, #32
 8003466:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003468:	68a3      	ldr	r3, [r4, #8]
 800346a:	b933      	cbnz	r3, 800347a <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	9201      	str	r2, [sp, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800347a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800347c:	b96b      	cbnz	r3, 800349a <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800347e:	2000      	movs	r0, #0
 8003480:	e75a      	b.n	8003338 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003482:	2001      	movs	r0, #1
 8003484:	e758      	b.n	8003338 <HAL_SPI_Transmit+0x30>
 8003486:	2001      	movs	r0, #1
 8003488:	e756      	b.n	8003338 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800348a:	2003      	movs	r0, #3
 800348c:	e754      	b.n	8003338 <HAL_SPI_Transmit+0x30>
 800348e:	2003      	movs	r0, #3
 8003490:	e752      	b.n	8003338 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003492:	2003      	movs	r0, #3
 8003494:	e750      	b.n	8003338 <HAL_SPI_Transmit+0x30>
 8003496:	2003      	movs	r0, #3
 8003498:	e74e      	b.n	8003338 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 800349a:	2001      	movs	r0, #1
 800349c:	e74c      	b.n	8003338 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800349e:	2002      	movs	r0, #2
 80034a0:	e750      	b.n	8003344 <HAL_SPI_Transmit+0x3c>

080034a2 <HAL_SPI_TransmitReceive>:
{
 80034a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034a6:	b083      	sub	sp, #12
 80034a8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80034ac:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80034b0:	2c01      	cmp	r4, #1
 80034b2:	f000 810b 	beq.w	80036cc <HAL_SPI_TransmitReceive+0x22a>
 80034b6:	461d      	mov	r5, r3
 80034b8:	4617      	mov	r7, r2
 80034ba:	460e      	mov	r6, r1
 80034bc:	4604      	mov	r4, r0
 80034be:	2301      	movs	r3, #1
 80034c0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80034c4:	f7fe fd70 	bl	8001fa8 <HAL_GetTick>
 80034c8:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 80034ca:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80034ce:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80034d0:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034d2:	2801      	cmp	r0, #1
 80034d4:	d015      	beq.n	8003502 <HAL_SPI_TransmitReceive+0x60>
 80034d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034da:	d00a      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 80034de:	2201      	movs	r2, #1
 80034e0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034e4:	2200      	movs	r2, #0
 80034e6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	b003      	add	sp, #12
 80034ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034f2:	68a3      	ldr	r3, [r4, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 80db 	bne.w	80036b0 <HAL_SPI_TransmitReceive+0x20e>
 80034fa:	2804      	cmp	r0, #4
 80034fc:	d001      	beq.n	8003502 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
 8003500:	e7ed      	b.n	80034de <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003502:	2e00      	cmp	r6, #0
 8003504:	f000 80d6 	beq.w	80036b4 <HAL_SPI_TransmitReceive+0x212>
 8003508:	2f00      	cmp	r7, #0
 800350a:	f000 80d5 	beq.w	80036b8 <HAL_SPI_TransmitReceive+0x216>
 800350e:	2d00      	cmp	r5, #0
 8003510:	f000 80d4 	beq.w	80036bc <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003514:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b04      	cmp	r3, #4
 800351c:	d002      	beq.n	8003524 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800351e:	2305      	movs	r3, #5
 8003520:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003524:	2300      	movs	r3, #0
 8003526:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003528:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800352a:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800352c:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800352e:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003530:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003532:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8003534:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003536:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003540:	d103      	bne.n	800354a <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003548:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800354a:	68e3      	ldr	r3, [r4, #12]
 800354c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003550:	d010      	beq.n	8003574 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003552:	6863      	ldr	r3, [r4, #4]
 8003554:	b10b      	cbz	r3, 800355a <HAL_SPI_TransmitReceive+0xb8>
 8003556:	2d01      	cmp	r5, #1
 8003558:	d10a      	bne.n	8003570 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800355a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003562:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003564:	3301      	adds	r3, #1
 8003566:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003568:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800356a:	3b01      	subs	r3, #1
 800356c:	b29b      	uxth	r3, r3
 800356e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003570:	2501      	movs	r5, #1
 8003572:	e069      	b.n	8003648 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003574:	6863      	ldr	r3, [r4, #4]
 8003576:	b10b      	cbz	r3, 800357c <HAL_SPI_TransmitReceive+0xda>
 8003578:	2d01      	cmp	r5, #1
 800357a:	d10a      	bne.n	8003592 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	8812      	ldrh	r2, [r2, #0]
 8003582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003584:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003586:	3302      	adds	r3, #2
 8003588:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800358a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800358c:	3b01      	subs	r3, #1
 800358e:	b29b      	uxth	r3, r3
 8003590:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003592:	2501      	movs	r5, #1
 8003594:	e01b      	b.n	80035ce <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	f012 0f01 	tst.w	r2, #1
 800359e:	d00d      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x11a>
 80035a0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80035a2:	b292      	uxth	r2, r2
 80035a4:	b152      	cbz	r2, 80035bc <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035ae:	3302      	adds	r3, #2
 80035b0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80035b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80035ba:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035bc:	f7fe fcf4 	bl	8001fa8 <HAL_GetTick>
 80035c0:	eba0 0009 	sub.w	r0, r0, r9
 80035c4:	4540      	cmp	r0, r8
 80035c6:	d302      	bcc.n	80035ce <HAL_SPI_TransmitReceive+0x12c>
 80035c8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80035cc:	d178      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	b91b      	cbnz	r3, 80035dc <HAL_SPI_TransmitReceive+0x13a>
 80035d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d052      	beq.n	8003682 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	f012 0f02 	tst.w	r2, #2
 80035e4:	d0d7      	beq.n	8003596 <HAL_SPI_TransmitReceive+0xf4>
 80035e6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80035e8:	b292      	uxth	r2, r2
 80035ea:	2a00      	cmp	r2, #0
 80035ec:	d0d3      	beq.n	8003596 <HAL_SPI_TransmitReceive+0xf4>
 80035ee:	2d00      	cmp	r5, #0
 80035f0:	d0d1      	beq.n	8003596 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80035f4:	8812      	ldrh	r2, [r2, #0]
 80035f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035fa:	3302      	adds	r3, #2
 80035fc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80035fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003600:	3b01      	subs	r3, #1
 8003602:	b29b      	uxth	r3, r3
 8003604:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003606:	2500      	movs	r5, #0
 8003608:	e7c5      	b.n	8003596 <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	f012 0f01 	tst.w	r2, #1
 8003612:	d00d      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x18e>
 8003614:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003616:	b292      	uxth	r2, r2
 8003618:	b152      	cbz	r2, 8003630 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800361e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003620:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003622:	3301      	adds	r3, #1
 8003624:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003626:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003628:	3b01      	subs	r3, #1
 800362a:	b29b      	uxth	r3, r3
 800362c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800362e:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003630:	f7fe fcba 	bl	8001fa8 <HAL_GetTick>
 8003634:	eba0 0009 	sub.w	r0, r0, r9
 8003638:	4540      	cmp	r0, r8
 800363a:	d302      	bcc.n	8003642 <HAL_SPI_TransmitReceive+0x1a0>
 800363c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003640:	d140      	bne.n	80036c4 <HAL_SPI_TransmitReceive+0x222>
 8003642:	f1b8 0f00 	cmp.w	r8, #0
 8003646:	d03f      	beq.n	80036c8 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003648:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800364a:	b29b      	uxth	r3, r3
 800364c:	b913      	cbnz	r3, 8003654 <HAL_SPI_TransmitReceive+0x1b2>
 800364e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003650:	b29b      	uxth	r3, r3
 8003652:	b1b3      	cbz	r3, 8003682 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	f012 0f02 	tst.w	r2, #2
 800365c:	d0d5      	beq.n	800360a <HAL_SPI_TransmitReceive+0x168>
 800365e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003660:	b292      	uxth	r2, r2
 8003662:	2a00      	cmp	r2, #0
 8003664:	d0d1      	beq.n	800360a <HAL_SPI_TransmitReceive+0x168>
 8003666:	2d00      	cmp	r5, #0
 8003668:	d0cf      	beq.n	800360a <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800366a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800366c:	7812      	ldrb	r2, [r2, #0]
 800366e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003670:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003672:	3301      	adds	r3, #1
 8003674:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003676:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003678:	3b01      	subs	r3, #1
 800367a:	b29b      	uxth	r3, r3
 800367c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800367e:	2500      	movs	r5, #0
 8003680:	e7c3      	b.n	800360a <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003682:	464a      	mov	r2, r9
 8003684:	4641      	mov	r1, r8
 8003686:	4620      	mov	r0, r4
 8003688:	f7ff fd7e 	bl	8003188 <SPI_EndRxTxTransaction>
 800368c:	4603      	mov	r3, r0
 800368e:	b118      	cbz	r0, 8003698 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003690:	2320      	movs	r3, #32
 8003692:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
    goto error;
 8003696:	e722      	b.n	80034de <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003698:	68a2      	ldr	r2, [r4, #8]
 800369a:	2a00      	cmp	r2, #0
 800369c:	f47f af1f 	bne.w	80034de <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036a0:	9201      	str	r2, [sp, #4]
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	68d1      	ldr	r1, [r2, #12]
 80036a6:	9101      	str	r1, [sp, #4]
 80036a8:	6892      	ldr	r2, [r2, #8]
 80036aa:	9201      	str	r2, [sp, #4]
 80036ac:	9a01      	ldr	r2, [sp, #4]
 80036ae:	e716      	b.n	80034de <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
 80036b2:	e714      	b.n	80034de <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e712      	b.n	80034de <HAL_SPI_TransmitReceive+0x3c>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e710      	b.n	80034de <HAL_SPI_TransmitReceive+0x3c>
 80036bc:	2301      	movs	r3, #1
 80036be:	e70e      	b.n	80034de <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e70c      	b.n	80034de <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e70a      	b.n	80034de <HAL_SPI_TransmitReceive+0x3c>
 80036c8:	2303      	movs	r3, #3
 80036ca:	e708      	b.n	80034de <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 80036cc:	2302      	movs	r3, #2
 80036ce:	e70c      	b.n	80034ea <HAL_SPI_TransmitReceive+0x48>

080036d0 <HAL_SPI_Receive>:
{
 80036d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	4604      	mov	r4, r0
 80036d8:	460f      	mov	r7, r1
 80036da:	4690      	mov	r8, r2
 80036dc:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036de:	6843      	ldr	r3, [r0, #4]
 80036e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e4:	d019      	beq.n	800371a <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 80036e6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	f000 809f 	beq.w	800382e <HAL_SPI_Receive+0x15e>
 80036f0:	2301      	movs	r3, #1
 80036f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80036f6:	f7fe fc57 	bl	8001fa8 <HAL_GetTick>
 80036fa:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80036fc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d015      	beq.n	8003732 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8003706:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003708:	2301      	movs	r3, #1
 800370a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800370e:	2300      	movs	r3, #0
 8003710:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003714:	b002      	add	sp, #8
 8003716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800371a:	6883      	ldr	r3, [r0, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e2      	bne.n	80036e6 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003720:	2304      	movs	r3, #4
 8003722:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003726:	9500      	str	r5, [sp, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	460a      	mov	r2, r1
 800372c:	f7ff feb9 	bl	80034a2 <HAL_SPI_TransmitReceive>
 8003730:	e7f0      	b.n	8003714 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8003732:	2f00      	cmp	r7, #0
 8003734:	d06d      	beq.n	8003812 <HAL_SPI_Receive+0x142>
 8003736:	f1b8 0f00 	cmp.w	r8, #0
 800373a:	d06c      	beq.n	8003816 <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800373c:	2304      	movs	r3, #4
 800373e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003742:	2300      	movs	r3, #0
 8003744:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003746:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003748:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800374c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003750:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003752:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003754:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003756:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003758:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800375a:	68a3      	ldr	r3, [r4, #8]
 800375c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003760:	d00b      	beq.n	800377a <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	f012 0f40 	tst.w	r2, #64	; 0x40
 800376a:	d103      	bne.n	8003774 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003772:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003774:	68e3      	ldr	r3, [r4, #12]
 8003776:	b183      	cbz	r3, 800379a <HAL_SPI_Receive+0xca>
 8003778:	e02c      	b.n	80037d4 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	6813      	ldr	r3, [r2, #0]
 800377e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	e7ed      	b.n	8003762 <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003786:	f7fe fc0f 	bl	8001fa8 <HAL_GetTick>
 800378a:	1b80      	subs	r0, r0, r6
 800378c:	42a8      	cmp	r0, r5
 800378e:	d302      	bcc.n	8003796 <HAL_SPI_Receive+0xc6>
 8003790:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003794:	d141      	bne.n	800381a <HAL_SPI_Receive+0x14a>
 8003796:	2d00      	cmp	r5, #0
 8003798:	d041      	beq.n	800381e <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 800379a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02b      	beq.n	80037fa <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	f012 0f01 	tst.w	r2, #1
 80037aa:	d0ec      	beq.n	8003786 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80037ae:	7b1b      	ldrb	r3, [r3, #12]
 80037b0:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037b4:	3301      	adds	r3, #1
 80037b6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80037b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29b      	uxth	r3, r3
 80037be:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80037c0:	e7eb      	b.n	800379a <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c2:	f7fe fbf1 	bl	8001fa8 <HAL_GetTick>
 80037c6:	1b80      	subs	r0, r0, r6
 80037c8:	42a8      	cmp	r0, r5
 80037ca:	d302      	bcc.n	80037d2 <HAL_SPI_Receive+0x102>
 80037cc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80037d0:	d127      	bne.n	8003822 <HAL_SPI_Receive+0x152>
 80037d2:	b345      	cbz	r5, 8003826 <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 80037d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	b17b      	cbz	r3, 80037fa <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	f012 0f01 	tst.w	r2, #1
 80037e2:	d0ee      	beq.n	80037c2 <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037ec:	3302      	adds	r3, #2
 80037ee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80037f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80037f8:	e7ec      	b.n	80037d4 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037fa:	4632      	mov	r2, r6
 80037fc:	4629      	mov	r1, r5
 80037fe:	4620      	mov	r0, r4
 8003800:	f7ff fcf6 	bl	80031f0 <SPI_EndRxTransaction>
 8003804:	b108      	cbz	r0, 800380a <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003806:	2320      	movs	r3, #32
 8003808:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800380a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800380c:	b96b      	cbnz	r3, 800382a <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800380e:	2000      	movs	r0, #0
 8003810:	e77a      	b.n	8003708 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8003812:	2001      	movs	r0, #1
 8003814:	e778      	b.n	8003708 <HAL_SPI_Receive+0x38>
 8003816:	2001      	movs	r0, #1
 8003818:	e776      	b.n	8003708 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800381a:	2003      	movs	r0, #3
 800381c:	e774      	b.n	8003708 <HAL_SPI_Receive+0x38>
 800381e:	2003      	movs	r0, #3
 8003820:	e772      	b.n	8003708 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8003822:	2003      	movs	r0, #3
 8003824:	e770      	b.n	8003708 <HAL_SPI_Receive+0x38>
 8003826:	2003      	movs	r0, #3
 8003828:	e76e      	b.n	8003708 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800382a:	2001      	movs	r0, #1
 800382c:	e76c      	b.n	8003708 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 800382e:	2002      	movs	r0, #2
 8003830:	e770      	b.n	8003714 <HAL_SPI_Receive+0x44>

08003832 <HAL_SPI_ErrorCallback>:
}
 8003832:	4770      	bx	lr

08003834 <HAL_SPI_IRQHandler>:
{
 8003834:	b530      	push	{r4, r5, lr}
 8003836:	b085      	sub	sp, #20
 8003838:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800383a:	6802      	ldr	r2, [r0, #0]
 800383c:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800383e:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003840:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8003844:	b949      	cbnz	r1, 800385a <HAL_SPI_IRQHandler+0x26>
 8003846:	f013 0f01 	tst.w	r3, #1
 800384a:	d006      	beq.n	800385a <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800384c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003850:	d003      	beq.n	800385a <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 8003852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003854:	4620      	mov	r0, r4
 8003856:	4798      	blx	r3
    return;
 8003858:	e008      	b.n	800386c <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800385a:	f013 0f02 	tst.w	r3, #2
 800385e:	d007      	beq.n	8003870 <HAL_SPI_IRQHandler+0x3c>
 8003860:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003864:	d004      	beq.n	8003870 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8003866:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003868:	4620      	mov	r0, r4
 800386a:	4798      	blx	r3
}
 800386c:	b005      	add	sp, #20
 800386e:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003870:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8003874:	b91d      	cbnz	r5, 800387e <HAL_SPI_IRQHandler+0x4a>
 8003876:	b911      	cbnz	r1, 800387e <HAL_SPI_IRQHandler+0x4a>
 8003878:	f413 7f80 	tst.w	r3, #256	; 0x100
 800387c:	d0f6      	beq.n	800386c <HAL_SPI_IRQHandler+0x38>
 800387e:	f010 0f20 	tst.w	r0, #32
 8003882:	d0f3      	beq.n	800386c <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003884:	b179      	cbz	r1, 80038a6 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003886:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 800388a:	b2c9      	uxtb	r1, r1
 800388c:	2903      	cmp	r1, #3
 800388e:	d053      	beq.n	8003938 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003890:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003892:	f041 0104 	orr.w	r1, r1, #4
 8003896:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003898:	2100      	movs	r1, #0
 800389a:	9100      	str	r1, [sp, #0]
 800389c:	68d1      	ldr	r1, [r2, #12]
 800389e:	9100      	str	r1, [sp, #0]
 80038a0:	6891      	ldr	r1, [r2, #8]
 80038a2:	9100      	str	r1, [sp, #0]
 80038a4:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80038a6:	b165      	cbz	r5, 80038c2 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80038a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80038aa:	f041 0101 	orr.w	r1, r1, #1
 80038ae:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80038b0:	2100      	movs	r1, #0
 80038b2:	9102      	str	r1, [sp, #8]
 80038b4:	6891      	ldr	r1, [r2, #8]
 80038b6:	9102      	str	r1, [sp, #8]
 80038b8:	6811      	ldr	r1, [r2, #0]
 80038ba:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80038be:	6011      	str	r1, [r2, #0]
 80038c0:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80038c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038c6:	d009      	beq.n	80038dc <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80038c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80038ca:	f043 0308 	orr.w	r3, r3, #8
 80038ce:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80038d0:	2300      	movs	r3, #0
 80038d2:	9303      	str	r3, [sp, #12]
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	9303      	str	r3, [sp, #12]
 80038da:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0c4      	beq.n	800386c <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80038e2:	6822      	ldr	r2, [r4, #0]
 80038e4:	6853      	ldr	r3, [r2, #4]
 80038e6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80038ea:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80038f2:	f010 0f03 	tst.w	r0, #3
 80038f6:	d027      	beq.n	8003948 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80038f8:	6822      	ldr	r2, [r4, #0]
 80038fa:	6853      	ldr	r3, [r2, #4]
 80038fc:	f023 0303 	bic.w	r3, r3, #3
 8003900:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003902:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003904:	b14b      	cbz	r3, 800391a <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003906:	4a12      	ldr	r2, [pc, #72]	; (8003950 <HAL_SPI_IRQHandler+0x11c>)
 8003908:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800390a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800390c:	f7fe fce8 	bl	80022e0 <HAL_DMA_Abort_IT>
 8003910:	b118      	cbz	r0, 800391a <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003912:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003918:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800391a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0a5      	beq.n	800386c <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003920:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <HAL_SPI_IRQHandler+0x11c>)
 8003922:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003924:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003926:	f7fe fcdb 	bl	80022e0 <HAL_DMA_Abort_IT>
 800392a:	2800      	cmp	r0, #0
 800392c:	d09e      	beq.n	800386c <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800392e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003934:	6563      	str	r3, [r4, #84]	; 0x54
 8003936:	e799      	b.n	800386c <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003938:	2300      	movs	r3, #0
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	68d3      	ldr	r3, [r2, #12]
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	6893      	ldr	r3, [r2, #8]
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	9b01      	ldr	r3, [sp, #4]
        return;
 8003946:	e791      	b.n	800386c <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 8003948:	4620      	mov	r0, r4
 800394a:	f7ff ff72 	bl	8003832 <HAL_SPI_ErrorCallback>
 800394e:	e78d      	b.n	800386c <HAL_SPI_IRQHandler+0x38>
 8003950:	08003955 	.word	0x08003955

08003954 <SPI_DMAAbortOnError>:
{
 8003954:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003956:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800395c:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800395e:	f7ff ff68 	bl	8003832 <HAL_SPI_ErrorCallback>
}
 8003962:	bd08      	pop	{r3, pc}

08003964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003966:	6a03      	ldr	r3, [r0, #32]
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003972:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003974:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003978:	680d      	ldr	r5, [r1, #0]
 800397a:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800397e:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003982:	688b      	ldr	r3, [r1, #8]
 8003984:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003986:	4d0d      	ldr	r5, [pc, #52]	; (80039bc <TIM_OC1_SetConfig+0x58>)
 8003988:	42a8      	cmp	r0, r5
 800398a:	d009      	beq.n	80039a0 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398c:	4d0b      	ldr	r5, [pc, #44]	; (80039bc <TIM_OC1_SetConfig+0x58>)
 800398e:	42a8      	cmp	r0, r5
 8003990:	d00d      	beq.n	80039ae <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003992:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003994:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003996:	684a      	ldr	r2, [r1, #4]
 8003998:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399a:	6203      	str	r3, [r0, #32]
}
 800399c:	bc70      	pop	{r4, r5, r6}
 800399e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80039a0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80039a4:	68cc      	ldr	r4, [r1, #12]
 80039a6:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80039a8:	f023 0304 	bic.w	r3, r3, #4
 80039ac:	e7ee      	b.n	800398c <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80039b2:	694c      	ldr	r4, [r1, #20]
 80039b4:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80039b6:	698a      	ldr	r2, [r1, #24]
 80039b8:	4322      	orrs	r2, r4
 80039ba:	e7ea      	b.n	8003992 <TIM_OC1_SetConfig+0x2e>
 80039bc:	40010000 	.word	0x40010000

080039c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039c2:	6a03      	ldr	r3, [r0, #32]
 80039c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ce:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039d0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d4:	680d      	ldr	r5, [r1, #0]
 80039d6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039dc:	688d      	ldr	r5, [r1, #8]
 80039de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039e2:	4d0f      	ldr	r5, [pc, #60]	; (8003a20 <TIM_OC3_SetConfig+0x60>)
 80039e4:	42a8      	cmp	r0, r5
 80039e6:	d009      	beq.n	80039fc <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e8:	4d0d      	ldr	r5, [pc, #52]	; (8003a20 <TIM_OC3_SetConfig+0x60>)
 80039ea:	42a8      	cmp	r0, r5
 80039ec:	d00e      	beq.n	8003a0c <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ee:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f0:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039f2:	684a      	ldr	r2, [r1, #4]
 80039f4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f6:	6203      	str	r3, [r0, #32]
}
 80039f8:	bc30      	pop	{r4, r5}
 80039fa:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80039fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a00:	68cd      	ldr	r5, [r1, #12]
 8003a02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a0a:	e7ed      	b.n	80039e8 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a0c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a10:	694d      	ldr	r5, [r1, #20]
 8003a12:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a16:	698d      	ldr	r5, [r1, #24]
 8003a18:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003a1c:	e7e7      	b.n	80039ee <TIM_OC3_SetConfig+0x2e>
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000

08003a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a26:	6a03      	ldr	r3, [r0, #32]
 8003a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a30:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a32:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a34:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a38:	680d      	ldr	r5, [r1, #0]
 8003a3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a42:	688d      	ldr	r5, [r1, #8]
 8003a44:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a48:	4d07      	ldr	r5, [pc, #28]	; (8003a68 <TIM_OC4_SetConfig+0x44>)
 8003a4a:	42a8      	cmp	r0, r5
 8003a4c:	d006      	beq.n	8003a5c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a50:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a52:	684a      	ldr	r2, [r1, #4]
 8003a54:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a56:	6203      	str	r3, [r0, #32]
}
 8003a58:	bc30      	pop	{r4, r5}
 8003a5a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a5c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a60:	694d      	ldr	r5, [r1, #20]
 8003a62:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003a66:	e7f2      	b.n	8003a4e <TIM_OC4_SetConfig+0x2a>
 8003a68:	40010000 	.word	0x40010000

08003a6c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a6c:	6802      	ldr	r2, [r0, #0]
 8003a6e:	68d3      	ldr	r3, [r2, #12]
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a76:	6802      	ldr	r2, [r0, #0]
 8003a78:	6893      	ldr	r3, [r2, #8]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8003a82:	6813      	ldr	r3, [r2, #0]
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6013      	str	r3, [r2, #0]
}
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	4770      	bx	lr

08003a8e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIM_IC_CaptureCallback>:
}
 8003a90:	4770      	bx	lr

08003a92 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIM_TriggerCallback>:
}
 8003a94:	4770      	bx	lr

08003a96 <HAL_TIM_IRQHandler>:
{
 8003a96:	b510      	push	{r4, lr}
 8003a98:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a9a:	6803      	ldr	r3, [r0, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	f012 0f02 	tst.w	r2, #2
 8003aa2:	d011      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	f012 0f02 	tst.w	r2, #2
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aac:	f06f 0202 	mvn.w	r2, #2
 8003ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab6:	6803      	ldr	r3, [r0, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f013 0f03 	tst.w	r3, #3
 8003abe:	d070      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac0:	f7ff ffe6 	bl	8003a90 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	f012 0f04 	tst.w	r2, #4
 8003ad0:	d012      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	f012 0f04 	tst.w	r2, #4
 8003ad8:	d00e      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ada:	f06f 0204 	mvn.w	r2, #4
 8003ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003aec:	d05f      	beq.n	8003bae <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff ffce 	bl	8003a90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af4:	2300      	movs	r3, #0
 8003af6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	f012 0f08 	tst.w	r2, #8
 8003b00:	d012      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	f012 0f08 	tst.w	r2, #8
 8003b08:	d00e      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b0a:	f06f 0208 	mvn.w	r2, #8
 8003b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b10:	2304      	movs	r3, #4
 8003b12:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f013 0f03 	tst.w	r3, #3
 8003b1c:	d04e      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7ff ffb6 	bl	8003a90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b24:	2300      	movs	r3, #0
 8003b26:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	f012 0f10 	tst.w	r2, #16
 8003b30:	d012      	beq.n	8003b58 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	f012 0f10 	tst.w	r2, #16
 8003b38:	d00e      	beq.n	8003b58 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b3a:	f06f 0210 	mvn.w	r2, #16
 8003b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b40:	2308      	movs	r3, #8
 8003b42:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003b4c:	d03d      	beq.n	8003bca <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f7ff ff9e 	bl	8003a90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b54:	2300      	movs	r3, #0
 8003b56:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	f012 0f01 	tst.w	r2, #1
 8003b60:	d003      	beq.n	8003b6a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	f012 0f01 	tst.w	r2, #1
 8003b68:	d136      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b72:	d003      	beq.n	8003b7c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b7a:	d134      	bne.n	8003be6 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b84:	d003      	beq.n	8003b8e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b8c:	d132      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	f012 0f20 	tst.w	r2, #32
 8003b96:	d003      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	f012 0f20 	tst.w	r2, #32
 8003b9e:	d130      	bne.n	8003c02 <HAL_TIM_IRQHandler+0x16c>
}
 8003ba0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	f7ff ff74 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f7ff ff73 	bl	8003a92 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bac:	e78a      	b.n	8003ac4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff ff6d 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7ff ff6c 	bl	8003a92 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bba:	e79b      	b.n	8003af4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff ff66 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f7ff ff65 	bl	8003a92 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bc8:	e7ac      	b.n	8003b24 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7ff ff5f 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f7ff ff5e 	bl	8003a92 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bd6:	e7bd      	b.n	8003b54 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd8:	f06f 0201 	mvn.w	r2, #1
 8003bdc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bde:	4620      	mov	r0, r4
 8003be0:	f001 fa9e 	bl	8005120 <HAL_TIM_PeriodElapsedCallback>
 8003be4:	e7c1      	b.n	8003b6a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003be6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003bec:	4620      	mov	r0, r4
 8003bee:	f000 f983 	bl	8003ef8 <HAL_TIMEx_BreakCallback>
 8003bf2:	e7c3      	b.n	8003b7c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bf8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7ff ff4a 	bl	8003a94 <HAL_TIM_TriggerCallback>
 8003c00:	e7c5      	b.n	8003b8e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c02:	f06f 0220 	mvn.w	r2, #32
 8003c06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f000 f974 	bl	8003ef6 <HAL_TIMEx_CommutCallback>
}
 8003c0e:	e7c7      	b.n	8003ba0 <HAL_TIM_IRQHandler+0x10a>

08003c10 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003c10:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c12:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <TIM_Base_SetConfig+0x98>)
 8003c14:	4290      	cmp	r0, r2
 8003c16:	d00e      	beq.n	8003c36 <TIM_Base_SetConfig+0x26>
 8003c18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c1c:	d00b      	beq.n	8003c36 <TIM_Base_SetConfig+0x26>
 8003c1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003c22:	4290      	cmp	r0, r2
 8003c24:	d007      	beq.n	8003c36 <TIM_Base_SetConfig+0x26>
 8003c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c2a:	4290      	cmp	r0, r2
 8003c2c:	d003      	beq.n	8003c36 <TIM_Base_SetConfig+0x26>
 8003c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c32:	4290      	cmp	r0, r2
 8003c34:	d103      	bne.n	8003c3e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c3a:	684a      	ldr	r2, [r1, #4]
 8003c3c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <TIM_Base_SetConfig+0x98>)
 8003c40:	4290      	cmp	r0, r2
 8003c42:	d01a      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c48:	d017      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003c4e:	4290      	cmp	r0, r2
 8003c50:	d013      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c56:	4290      	cmp	r0, r2
 8003c58:	d00f      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c5e:	4290      	cmp	r0, r2
 8003c60:	d00b      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c62:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003c66:	4290      	cmp	r0, r2
 8003c68:	d007      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c6e:	4290      	cmp	r0, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c76:	4290      	cmp	r0, r2
 8003c78:	d103      	bne.n	8003c82 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7e:	68ca      	ldr	r2, [r1, #12]
 8003c80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c86:	694a      	ldr	r2, [r1, #20]
 8003c88:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003c8a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c8c:	688b      	ldr	r3, [r1, #8]
 8003c8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c90:	680b      	ldr	r3, [r1, #0]
 8003c92:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <TIM_Base_SetConfig+0x98>)
 8003c96:	4298      	cmp	r0, r3
 8003c98:	d002      	beq.n	8003ca0 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	6143      	str	r3, [r0, #20]
}
 8003c9e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca0:	690b      	ldr	r3, [r1, #16]
 8003ca2:	6303      	str	r3, [r0, #48]	; 0x30
 8003ca4:	e7f9      	b.n	8003c9a <TIM_Base_SetConfig+0x8a>
 8003ca6:	bf00      	nop
 8003ca8:	40010000 	.word	0x40010000

08003cac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003cac:	b1a8      	cbz	r0, 8003cda <HAL_TIM_Base_Init+0x2e>
{
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cb6:	b15b      	cbz	r3, 8003cd0 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbe:	1d21      	adds	r1, r4, #4
 8003cc0:	6820      	ldr	r0, [r4, #0]
 8003cc2:	f7ff ffa5 	bl	8003c10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003ccc:	2000      	movs	r0, #0
}
 8003cce:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003cd0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003cd4:	f001 fbba 	bl	800544c <HAL_TIM_Base_MspInit>
 8003cd8:	e7ee      	b.n	8003cb8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003cda:	2001      	movs	r0, #1
}
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003cde:	b1a8      	cbz	r0, 8003d0c <HAL_TIM_PWM_Init+0x2e>
{
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ce8:	b15b      	cbz	r3, 8003d02 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf0:	1d21      	adds	r1, r4, #4
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	f7ff ff8c 	bl	8003c10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003cfe:	2000      	movs	r0, #0
}
 8003d00:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003d06:	f001 fb89 	bl	800541c <HAL_TIM_PWM_MspInit>
 8003d0a:	e7ee      	b.n	8003cea <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003d0c:	2001      	movs	r0, #1
}
 8003d0e:	4770      	bx	lr

08003d10 <TIM_OC2_SetConfig>:
{
 8003d10:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d12:	6a03      	ldr	r3, [r0, #32]
 8003d14:	f023 0310 	bic.w	r3, r3, #16
 8003d18:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003d1a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003d1c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003d1e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d20:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d24:	680d      	ldr	r5, [r1, #0]
 8003d26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003d2a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d2e:	688d      	ldr	r5, [r1, #8]
 8003d30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d34:	4d0e      	ldr	r5, [pc, #56]	; (8003d70 <TIM_OC2_SetConfig+0x60>)
 8003d36:	42a8      	cmp	r0, r5
 8003d38:	d009      	beq.n	8003d4e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3a:	4d0d      	ldr	r5, [pc, #52]	; (8003d70 <TIM_OC2_SetConfig+0x60>)
 8003d3c:	42a8      	cmp	r0, r5
 8003d3e:	d00e      	beq.n	8003d5e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8003d40:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003d42:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003d44:	684a      	ldr	r2, [r1, #4]
 8003d46:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003d48:	6203      	str	r3, [r0, #32]
}
 8003d4a:	bc30      	pop	{r4, r5}
 8003d4c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d52:	68cd      	ldr	r5, [r1, #12]
 8003d54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5c:	e7ed      	b.n	8003d3a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d5e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d62:	694d      	ldr	r5, [r1, #20]
 8003d64:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d68:	698d      	ldr	r5, [r1, #24]
 8003d6a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003d6e:	e7e7      	b.n	8003d40 <TIM_OC2_SetConfig+0x30>
 8003d70:	40010000 	.word	0x40010000

08003d74 <HAL_TIM_PWM_ConfigChannel>:
{
 8003d74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003d76:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d066      	beq.n	8003e4c <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003d7e:	460d      	mov	r5, r1
 8003d80:	4604      	mov	r4, r0
 8003d82:	2301      	movs	r3, #1
 8003d84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003d8e:	2a0c      	cmp	r2, #12
 8003d90:	d81a      	bhi.n	8003dc8 <HAL_TIM_PWM_ConfigChannel+0x54>
 8003d92:	e8df f002 	tbb	[pc, r2]
 8003d96:	1907      	.short	0x1907
 8003d98:	19201919 	.word	0x19201919
 8003d9c:	19341919 	.word	0x19341919
 8003da0:	1919      	.short	0x1919
 8003da2:	47          	.byte	0x47
 8003da3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003da4:	6800      	ldr	r0, [r0, #0]
 8003da6:	f7ff fddd 	bl	8003964 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	6993      	ldr	r3, [r2, #24]
 8003dae:	f043 0308 	orr.w	r3, r3, #8
 8003db2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	6993      	ldr	r3, [r2, #24]
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	6993      	ldr	r3, [r2, #24]
 8003dc2:	6929      	ldr	r1, [r5, #16]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003dce:	2000      	movs	r0, #0
 8003dd0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003dd4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd6:	6800      	ldr	r0, [r0, #0]
 8003dd8:	f7ff ff9a 	bl	8003d10 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ddc:	6822      	ldr	r2, [r4, #0]
 8003dde:	6993      	ldr	r3, [r2, #24]
 8003de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003de4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	6993      	ldr	r3, [r2, #24]
 8003dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dee:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	6993      	ldr	r3, [r2, #24]
 8003df4:	6929      	ldr	r1, [r5, #16]
 8003df6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003dfa:	6193      	str	r3, [r2, #24]
      break;
 8003dfc:	e7e4      	b.n	8003dc8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dfe:	6800      	ldr	r0, [r0, #0]
 8003e00:	f7ff fdde 	bl	80039c0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	69d3      	ldr	r3, [r2, #28]
 8003e08:	f043 0308 	orr.w	r3, r3, #8
 8003e0c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e0e:	6822      	ldr	r2, [r4, #0]
 8003e10:	69d3      	ldr	r3, [r2, #28]
 8003e12:	f023 0304 	bic.w	r3, r3, #4
 8003e16:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e18:	6822      	ldr	r2, [r4, #0]
 8003e1a:	69d3      	ldr	r3, [r2, #28]
 8003e1c:	6929      	ldr	r1, [r5, #16]
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	61d3      	str	r3, [r2, #28]
      break;
 8003e22:	e7d1      	b.n	8003dc8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e24:	6800      	ldr	r0, [r0, #0]
 8003e26:	f7ff fdfd 	bl	8003a24 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	69d3      	ldr	r3, [r2, #28]
 8003e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e32:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	69d3      	ldr	r3, [r2, #28]
 8003e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e3c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e3e:	6822      	ldr	r2, [r4, #0]
 8003e40:	69d3      	ldr	r3, [r2, #28]
 8003e42:	6929      	ldr	r1, [r5, #16]
 8003e44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003e48:	61d3      	str	r3, [r2, #28]
      break;
 8003e4a:	e7bd      	b.n	8003dc8 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8003e4c:	2002      	movs	r0, #2
 8003e4e:	e7c1      	b.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0x60>

08003e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e50:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e52:	f001 011f 	and.w	r1, r1, #31
 8003e56:	2301      	movs	r3, #1
 8003e58:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e5c:	6a03      	ldr	r3, [r0, #32]
 8003e5e:	ea23 0304 	bic.w	r3, r3, r4
 8003e62:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e64:	6a03      	ldr	r3, [r0, #32]
 8003e66:	408a      	lsls	r2, r1
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	6203      	str	r3, [r0, #32]
}
 8003e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_TIM_PWM_Start>:
{
 8003e74:	b510      	push	{r4, lr}
 8003e76:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e78:	2201      	movs	r2, #1
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	f7ff ffe8 	bl	8003e50 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <HAL_TIM_PWM_Start+0x38>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00b      	beq.n	8003ea0 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e88:	6822      	ldr	r2, [r4, #0]
 8003e8a:	6893      	ldr	r3, [r2, #8]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	2b06      	cmp	r3, #6
 8003e92:	d003      	beq.n	8003e9c <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8003e94:	6813      	ldr	r3, [r2, #0]
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6013      	str	r3, [r2, #0]
}
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8003ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
 8003ea8:	e7ee      	b.n	8003e88 <HAL_TIM_PWM_Start+0x14>
 8003eaa:	bf00      	nop
 8003eac:	40010000 	.word	0x40010000

08003eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d01c      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8003eb8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8003eba:	2601      	movs	r6, #1
 8003ebc:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec6:	6802      	ldr	r2, [r0, #0]
 8003ec8:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eca:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ecc:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ed0:	680c      	ldr	r4, [r1, #0]
 8003ed2:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed4:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ed8:	684b      	ldr	r3, [r1, #4]
 8003eda:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003edc:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ede:	6802      	ldr	r2, [r0, #0]
 8003ee0:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee2:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003eec:	4618      	mov	r0, r3
}
 8003eee:	bc70      	pop	{r4, r5, r6}
 8003ef0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ef2:	2002      	movs	r0, #2
}
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ef8:	4770      	bx	lr

08003efa <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003efa:	6802      	ldr	r2, [r0, #0]
 8003efc:	68d3      	ldr	r3, [r2, #12]
 8003efe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f02:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f04:	2320      	movs	r3, #32
 8003f06:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8003f0a:	4770      	bx	lr

08003f0c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0c:	6802      	ldr	r2, [r0, #0]
 8003f0e:	68d3      	ldr	r3, [r2, #12]
 8003f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f14:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	6802      	ldr	r2, [r0, #0]
 8003f18:	6953      	ldr	r3, [r2, #20]
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f20:	2320      	movs	r3, #32
 8003f22:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8003f26:	4770      	bx	lr

08003f28 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f28:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b21      	cmp	r3, #33	; 0x21
 8003f30:	d12a      	bne.n	8003f88 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f32:	6883      	ldr	r3, [r0, #8]
 8003f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f38:	d016      	beq.n	8003f68 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f3a:	6a03      	ldr	r3, [r0, #32]
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	6202      	str	r2, [r0, #32]
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	6803      	ldr	r3, [r0, #0]
 8003f44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f46:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003f4e:	b9eb      	cbnz	r3, 8003f8c <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f50:	6802      	ldr	r2, [r0, #0]
 8003f52:	68d3      	ldr	r3, [r2, #12]
 8003f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f58:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f5a:	6802      	ldr	r2, [r0, #0]
 8003f5c:	68d3      	ldr	r3, [r2, #12]
 8003f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f62:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8003f64:	2000      	movs	r0, #0
 8003f66:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f68:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	6802      	ldr	r2, [r0, #0]
 8003f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f72:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f74:	6903      	ldr	r3, [r0, #16]
 8003f76:	b91b      	cbnz	r3, 8003f80 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8003f78:	6a03      	ldr	r3, [r0, #32]
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	6203      	str	r3, [r0, #32]
 8003f7e:	e7e2      	b.n	8003f46 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8003f80:	6a03      	ldr	r3, [r0, #32]
 8003f82:	3301      	adds	r3, #1
 8003f84:	6203      	str	r3, [r0, #32]
 8003f86:	e7de      	b.n	8003f46 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8003f88:	2002      	movs	r0, #2
 8003f8a:	4770      	bx	lr
    return HAL_OK;
 8003f8c:	2000      	movs	r0, #0
  }
}
 8003f8e:	4770      	bx	lr

08003f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f94:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f96:	6802      	ldr	r2, [r0, #0]
 8003f98:	6913      	ldr	r3, [r2, #16]
 8003f9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f9e:	68c1      	ldr	r1, [r0, #12]
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fa4:	6883      	ldr	r3, [r0, #8]
 8003fa6:	6902      	ldr	r2, [r0, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	6942      	ldr	r2, [r0, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	69c2      	ldr	r2, [r0, #28]
 8003fb0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003fb2:	6801      	ldr	r1, [r0, #0]
 8003fb4:	68cb      	ldr	r3, [r1, #12]
 8003fb6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fba:	f023 030c 	bic.w	r3, r3, #12
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fc2:	6802      	ldr	r2, [r0, #0]
 8003fc4:	6953      	ldr	r3, [r2, #20]
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fca:	6981      	ldr	r1, [r0, #24]
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd0:	69c3      	ldr	r3, [r0, #28]
 8003fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd6:	d060      	beq.n	800409a <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fd8:	6803      	ldr	r3, [r0, #0]
 8003fda:	4ab8      	ldr	r2, [pc, #736]	; (80042bc <UART_SetConfig+0x32c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f000 8114 	beq.w	800420a <UART_SetConfig+0x27a>
 8003fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	f000 810f 	beq.w	800420a <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003fec:	f7ff f846 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 8003ff0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ff4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ff8:	6865      	ldr	r5, [r4, #4]
 8003ffa:	00ad      	lsls	r5, r5, #2
 8003ffc:	fbb0 f5f5 	udiv	r5, r0, r5
 8004000:	4faf      	ldr	r7, [pc, #700]	; (80042c0 <UART_SetConfig+0x330>)
 8004002:	fba7 3505 	umull	r3, r5, r7, r5
 8004006:	096d      	lsrs	r5, r5, #5
 8004008:	012e      	lsls	r6, r5, #4
 800400a:	f7ff f837 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 800400e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004012:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004016:	6865      	ldr	r5, [r4, #4]
 8004018:	00ad      	lsls	r5, r5, #2
 800401a:	fbb0 f9f5 	udiv	r9, r0, r5
 800401e:	f7ff f82d 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 8004022:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004026:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800402a:	6865      	ldr	r5, [r4, #4]
 800402c:	00ad      	lsls	r5, r5, #2
 800402e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004032:	fba7 3505 	umull	r3, r5, r7, r5
 8004036:	096d      	lsrs	r5, r5, #5
 8004038:	f04f 0864 	mov.w	r8, #100	; 0x64
 800403c:	fb08 9515 	mls	r5, r8, r5, r9
 8004040:	012d      	lsls	r5, r5, #4
 8004042:	3532      	adds	r5, #50	; 0x32
 8004044:	fba7 3505 	umull	r3, r5, r7, r5
 8004048:	096d      	lsrs	r5, r5, #5
 800404a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800404e:	4435      	add	r5, r6
 8004050:	f7ff f814 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 8004054:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004058:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800405c:	6866      	ldr	r6, [r4, #4]
 800405e:	00b6      	lsls	r6, r6, #2
 8004060:	fbb0 f6f6 	udiv	r6, r0, r6
 8004064:	f7ff f80a 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 8004068:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800406c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004070:	6863      	ldr	r3, [r4, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	fbb0 f0f3 	udiv	r0, r0, r3
 8004078:	fba7 3000 	umull	r3, r0, r7, r0
 800407c:	0940      	lsrs	r0, r0, #5
 800407e:	fb08 6810 	mls	r8, r8, r0, r6
 8004082:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004086:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800408a:	fba7 3708 	umull	r3, r7, r7, r8
 800408e:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	442f      	add	r7, r5
 8004096:	609f      	str	r7, [r3, #8]
    }
  }
}
 8004098:	e10d      	b.n	80042b6 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800409a:	6803      	ldr	r3, [r0, #0]
 800409c:	4a87      	ldr	r2, [pc, #540]	; (80042bc <UART_SetConfig+0x32c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d05b      	beq.n	800415a <UART_SetConfig+0x1ca>
 80040a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d057      	beq.n	800415a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80040aa:	f7fe ffe7 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 80040ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040b6:	6865      	ldr	r5, [r4, #4]
 80040b8:	006d      	lsls	r5, r5, #1
 80040ba:	fbb0 f5f5 	udiv	r5, r0, r5
 80040be:	4f80      	ldr	r7, [pc, #512]	; (80042c0 <UART_SetConfig+0x330>)
 80040c0:	fba7 3505 	umull	r3, r5, r7, r5
 80040c4:	096d      	lsrs	r5, r5, #5
 80040c6:	012e      	lsls	r6, r5, #4
 80040c8:	f7fe ffd8 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 80040cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040d4:	6865      	ldr	r5, [r4, #4]
 80040d6:	006d      	lsls	r5, r5, #1
 80040d8:	fbb0 f9f5 	udiv	r9, r0, r5
 80040dc:	f7fe ffce 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 80040e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040e8:	6865      	ldr	r5, [r4, #4]
 80040ea:	006d      	lsls	r5, r5, #1
 80040ec:	fbb0 f5f5 	udiv	r5, r0, r5
 80040f0:	fba7 3505 	umull	r3, r5, r7, r5
 80040f4:	096d      	lsrs	r5, r5, #5
 80040f6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80040fa:	fb08 9515 	mls	r5, r8, r5, r9
 80040fe:	00ed      	lsls	r5, r5, #3
 8004100:	3532      	adds	r5, #50	; 0x32
 8004102:	fba7 3505 	umull	r3, r5, r7, r5
 8004106:	096d      	lsrs	r5, r5, #5
 8004108:	006d      	lsls	r5, r5, #1
 800410a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800410e:	4435      	add	r5, r6
 8004110:	f7fe ffb4 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 8004114:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004118:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800411c:	6866      	ldr	r6, [r4, #4]
 800411e:	0076      	lsls	r6, r6, #1
 8004120:	fbb0 f6f6 	udiv	r6, r0, r6
 8004124:	f7fe ffaa 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 8004128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800412c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004130:	6863      	ldr	r3, [r4, #4]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fbb0 f3f3 	udiv	r3, r0, r3
 8004138:	fba7 2303 	umull	r2, r3, r7, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	fb08 6813 	mls	r8, r8, r3, r6
 8004142:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004146:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800414a:	fba7 3708 	umull	r3, r7, r7, r8
 800414e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	442f      	add	r7, r5
 8004156:	609f      	str	r7, [r3, #8]
 8004158:	e0ad      	b.n	80042b6 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800415a:	f7fe ff9f 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 800415e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004162:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004166:	6865      	ldr	r5, [r4, #4]
 8004168:	006d      	lsls	r5, r5, #1
 800416a:	fbb0 f5f5 	udiv	r5, r0, r5
 800416e:	4f54      	ldr	r7, [pc, #336]	; (80042c0 <UART_SetConfig+0x330>)
 8004170:	fba7 3505 	umull	r3, r5, r7, r5
 8004174:	096d      	lsrs	r5, r5, #5
 8004176:	012e      	lsls	r6, r5, #4
 8004178:	f7fe ff90 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 800417c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004180:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004184:	6865      	ldr	r5, [r4, #4]
 8004186:	006d      	lsls	r5, r5, #1
 8004188:	fbb0 f9f5 	udiv	r9, r0, r5
 800418c:	f7fe ff86 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8004190:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004194:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004198:	6865      	ldr	r5, [r4, #4]
 800419a:	006d      	lsls	r5, r5, #1
 800419c:	fbb0 f5f5 	udiv	r5, r0, r5
 80041a0:	fba7 3505 	umull	r3, r5, r7, r5
 80041a4:	096d      	lsrs	r5, r5, #5
 80041a6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80041aa:	fb08 9515 	mls	r5, r8, r5, r9
 80041ae:	00ed      	lsls	r5, r5, #3
 80041b0:	3532      	adds	r5, #50	; 0x32
 80041b2:	fba7 3505 	umull	r3, r5, r7, r5
 80041b6:	096d      	lsrs	r5, r5, #5
 80041b8:	006d      	lsls	r5, r5, #1
 80041ba:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80041be:	4435      	add	r5, r6
 80041c0:	f7fe ff6c 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 80041c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041cc:	6866      	ldr	r6, [r4, #4]
 80041ce:	0076      	lsls	r6, r6, #1
 80041d0:	fbb0 f6f6 	udiv	r6, r0, r6
 80041d4:	f7fe ff62 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 80041d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e8:	fba7 2303 	umull	r2, r3, r7, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	fb08 6813 	mls	r8, r8, r3, r6
 80041f2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80041f6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80041fa:	fba7 3708 	umull	r3, r7, r7, r8
 80041fe:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	442f      	add	r7, r5
 8004206:	609f      	str	r7, [r3, #8]
 8004208:	e055      	b.n	80042b6 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800420a:	f7fe ff47 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 800420e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004212:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004216:	6865      	ldr	r5, [r4, #4]
 8004218:	00ad      	lsls	r5, r5, #2
 800421a:	fbb0 f5f5 	udiv	r5, r0, r5
 800421e:	4f28      	ldr	r7, [pc, #160]	; (80042c0 <UART_SetConfig+0x330>)
 8004220:	fba7 3505 	umull	r3, r5, r7, r5
 8004224:	096d      	lsrs	r5, r5, #5
 8004226:	012e      	lsls	r6, r5, #4
 8004228:	f7fe ff38 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 800422c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004230:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004234:	6865      	ldr	r5, [r4, #4]
 8004236:	00ad      	lsls	r5, r5, #2
 8004238:	fbb0 f9f5 	udiv	r9, r0, r5
 800423c:	f7fe ff2e 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8004240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004244:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004248:	6865      	ldr	r5, [r4, #4]
 800424a:	00ad      	lsls	r5, r5, #2
 800424c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004250:	fba7 3505 	umull	r3, r5, r7, r5
 8004254:	096d      	lsrs	r5, r5, #5
 8004256:	f04f 0864 	mov.w	r8, #100	; 0x64
 800425a:	fb08 9515 	mls	r5, r8, r5, r9
 800425e:	012d      	lsls	r5, r5, #4
 8004260:	3532      	adds	r5, #50	; 0x32
 8004262:	fba7 3505 	umull	r3, r5, r7, r5
 8004266:	096d      	lsrs	r5, r5, #5
 8004268:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800426c:	4435      	add	r5, r6
 800426e:	f7fe ff15 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8004272:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004276:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800427a:	6866      	ldr	r6, [r4, #4]
 800427c:	00b6      	lsls	r6, r6, #2
 800427e:	fbb0 f6f6 	udiv	r6, r0, r6
 8004282:	f7fe ff0b 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8004286:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800428a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800428e:	6863      	ldr	r3, [r4, #4]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	fbb0 f0f3 	udiv	r0, r0, r3
 8004296:	fba7 3000 	umull	r3, r0, r7, r0
 800429a:	0940      	lsrs	r0, r0, #5
 800429c:	fb08 6810 	mls	r8, r8, r0, r6
 80042a0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80042a4:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80042a8:	fba7 3708 	umull	r3, r7, r7, r8
 80042ac:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	442f      	add	r7, r5
 80042b4:	609f      	str	r7, [r3, #8]
}
 80042b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ba:	bf00      	nop
 80042bc:	40011000 	.word	0x40011000
 80042c0:	51eb851f 	.word	0x51eb851f

080042c4 <UART_WaitOnFlagUntilTimeout>:
{
 80042c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c8:	4605      	mov	r5, r0
 80042ca:	460f      	mov	r7, r1
 80042cc:	4616      	mov	r6, r2
 80042ce:	4698      	mov	r8, r3
 80042d0:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d2:	682b      	ldr	r3, [r5, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	ea37 0303 	bics.w	r3, r7, r3
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	42b3      	cmp	r3, r6
 80042e2:	d11d      	bne.n	8004320 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80042e4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80042e8:	d0f3      	beq.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042ea:	b12c      	cbz	r4, 80042f8 <UART_WaitOnFlagUntilTimeout+0x34>
 80042ec:	f7fd fe5c 	bl	8001fa8 <HAL_GetTick>
 80042f0:	eba0 0008 	sub.w	r0, r0, r8
 80042f4:	42a0      	cmp	r0, r4
 80042f6:	d9ec      	bls.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f8:	682a      	ldr	r2, [r5, #0]
 80042fa:	68d3      	ldr	r3, [r2, #12]
 80042fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004300:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004302:	682a      	ldr	r2, [r5, #0]
 8004304:	6953      	ldr	r3, [r2, #20]
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800430c:	2320      	movs	r3, #32
 800430e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004312:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8004316:	2300      	movs	r3, #0
 8004318:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 800431c:	2003      	movs	r0, #3
 800431e:	e000      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8004320:	2000      	movs	r0, #0
}
 8004322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004326 <HAL_UART_Init>:
  if (huart == NULL)
 8004326:	b358      	cbz	r0, 8004380 <HAL_UART_Init+0x5a>
{
 8004328:	b510      	push	{r4, lr}
 800432a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800432c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004330:	b30b      	cbz	r3, 8004376 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004332:	2324      	movs	r3, #36	; 0x24
 8004334:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004338:	6822      	ldr	r2, [r4, #0]
 800433a:	68d3      	ldr	r3, [r2, #12]
 800433c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004340:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004342:	4620      	mov	r0, r4
 8004344:	f7ff fe24 	bl	8003f90 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	6913      	ldr	r3, [r2, #16]
 800434c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004350:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004352:	6822      	ldr	r2, [r4, #0]
 8004354:	6953      	ldr	r3, [r2, #20]
 8004356:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800435a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800435c:	6822      	ldr	r2, [r4, #0]
 800435e:	68d3      	ldr	r3, [r2, #12]
 8004360:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004364:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004366:	2000      	movs	r0, #0
 8004368:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800436a:	2320      	movs	r3, #32
 800436c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004370:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8004374:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004376:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800437a:	f001 f923 	bl	80055c4 <HAL_UART_MspInit>
 800437e:	e7d8      	b.n	8004332 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004380:	2001      	movs	r0, #1
}
 8004382:	4770      	bx	lr

08004384 <HAL_UART_Transmit>:
{
 8004384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800438c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	d155      	bne.n	8004442 <HAL_UART_Transmit+0xbe>
 8004396:	4604      	mov	r4, r0
 8004398:	460d      	mov	r5, r1
 800439a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800439c:	2900      	cmp	r1, #0
 800439e:	d055      	beq.n	800444c <HAL_UART_Transmit+0xc8>
 80043a0:	2a00      	cmp	r2, #0
 80043a2:	d055      	beq.n	8004450 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80043a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d053      	beq.n	8004454 <HAL_UART_Transmit+0xd0>
 80043ac:	2301      	movs	r3, #1
 80043ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043b6:	2321      	movs	r3, #33	; 0x21
 80043b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80043bc:	f7fd fdf4 	bl	8001fa8 <HAL_GetTick>
 80043c0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80043c2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80043c6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043ca:	e010      	b.n	80043ee <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043cc:	9600      	str	r6, [sp, #0]
 80043ce:	463b      	mov	r3, r7
 80043d0:	2200      	movs	r2, #0
 80043d2:	2180      	movs	r1, #128	; 0x80
 80043d4:	4620      	mov	r0, r4
 80043d6:	f7ff ff75 	bl	80042c4 <UART_WaitOnFlagUntilTimeout>
 80043da:	2800      	cmp	r0, #0
 80043dc:	d13c      	bne.n	8004458 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80043de:	882b      	ldrh	r3, [r5, #0]
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80043e8:	6923      	ldr	r3, [r4, #16]
 80043ea:	b9c3      	cbnz	r3, 800441e <HAL_UART_Transmit+0x9a>
          pData += 2U;
 80043ec:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80043ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	b1b3      	cbz	r3, 8004422 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 80043f4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043fc:	68a3      	ldr	r3, [r4, #8]
 80043fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004402:	d0e3      	beq.n	80043cc <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004404:	9600      	str	r6, [sp, #0]
 8004406:	463b      	mov	r3, r7
 8004408:	2200      	movs	r2, #0
 800440a:	2180      	movs	r1, #128	; 0x80
 800440c:	4620      	mov	r0, r4
 800440e:	f7ff ff59 	bl	80042c4 <UART_WaitOnFlagUntilTimeout>
 8004412:	bb18      	cbnz	r0, 800445c <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004414:	782a      	ldrb	r2, [r5, #0]
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	3501      	adds	r5, #1
 800441c:	e7e7      	b.n	80043ee <HAL_UART_Transmit+0x6a>
          pData += 1U;
 800441e:	3501      	adds	r5, #1
 8004420:	e7e5      	b.n	80043ee <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004422:	9600      	str	r6, [sp, #0]
 8004424:	463b      	mov	r3, r7
 8004426:	2200      	movs	r2, #0
 8004428:	2140      	movs	r1, #64	; 0x40
 800442a:	4620      	mov	r0, r4
 800442c:	f7ff ff4a 	bl	80042c4 <UART_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	b9a8      	cbnz	r0, 8004460 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8004434:	2220      	movs	r2, #32
 8004436:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800443a:	2200      	movs	r2, #0
 800443c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8004440:	e000      	b.n	8004444 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
}
 8004444:	4618      	mov	r0, r3
 8004446:	b002      	add	sp, #8
 8004448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e7f9      	b.n	8004444 <HAL_UART_Transmit+0xc0>
 8004450:	2301      	movs	r3, #1
 8004452:	e7f7      	b.n	8004444 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8004454:	2302      	movs	r3, #2
 8004456:	e7f5      	b.n	8004444 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e7f3      	b.n	8004444 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e7f1      	b.n	8004444 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e7ef      	b.n	8004444 <HAL_UART_Transmit+0xc0>

08004464 <HAL_UART_Receive_DMA>:
{
 8004464:	b530      	push	{r4, r5, lr}
 8004466:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8004468:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 800446c:	b2e4      	uxtb	r4, r4
 800446e:	2c20      	cmp	r4, #32
 8004470:	d13d      	bne.n	80044ee <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8004472:	2900      	cmp	r1, #0
 8004474:	d03e      	beq.n	80044f4 <HAL_UART_Receive_DMA+0x90>
 8004476:	2a00      	cmp	r2, #0
 8004478:	d03e      	beq.n	80044f8 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 800447a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800447e:	2b01      	cmp	r3, #1
 8004480:	d03c      	beq.n	80044fc <HAL_UART_Receive_DMA+0x98>
 8004482:	4613      	mov	r3, r2
 8004484:	460a      	mov	r2, r1
 8004486:	4604      	mov	r4, r0
 8004488:	2101      	movs	r1, #1
 800448a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 800448e:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8004490:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004492:	2500      	movs	r5, #0
 8004494:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004496:	2122      	movs	r1, #34	; 0x22
 8004498:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800449c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800449e:	4818      	ldr	r0, [pc, #96]	; (8004500 <HAL_UART_Receive_DMA+0x9c>)
 80044a0:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a4:	4817      	ldr	r0, [pc, #92]	; (8004504 <HAL_UART_Receive_DMA+0xa0>)
 80044a6:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044aa:	4817      	ldr	r0, [pc, #92]	; (8004508 <HAL_UART_Receive_DMA+0xa4>)
 80044ac:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 80044ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044b0:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80044b2:	6821      	ldr	r1, [r4, #0]
 80044b4:	3104      	adds	r1, #4
 80044b6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80044b8:	f7fd fed8 	bl	800226c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80044bc:	9501      	str	r5, [sp, #4]
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	9201      	str	r2, [sp, #4]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	9201      	str	r2, [sp, #4]
 80044c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80044ca:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	6953      	ldr	r3, [r2, #20]
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e0:	6822      	ldr	r2, [r4, #0]
 80044e2:	6953      	ldr	r3, [r2, #20]
 80044e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e8:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80044ea:	4628      	mov	r0, r5
 80044ec:	e000      	b.n	80044f0 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 80044ee:	2002      	movs	r0, #2
}
 80044f0:	b003      	add	sp, #12
 80044f2:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 80044f4:	2001      	movs	r0, #1
 80044f6:	e7fb      	b.n	80044f0 <HAL_UART_Receive_DMA+0x8c>
 80044f8:	2001      	movs	r0, #1
 80044fa:	e7f9      	b.n	80044f0 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 80044fc:	2002      	movs	r0, #2
 80044fe:	e7f7      	b.n	80044f0 <HAL_UART_Receive_DMA+0x8c>
 8004500:	0800452b 	.word	0x0800452b
 8004504:	08004607 	.word	0x08004607
 8004508:	08004613 	.word	0x08004613

0800450c <HAL_UART_TxCpltCallback>:
}
 800450c:	4770      	bx	lr

0800450e <UART_EndTransmit_IT>:
{
 800450e:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004510:	6801      	ldr	r1, [r0, #0]
 8004512:	68cb      	ldr	r3, [r1, #12]
 8004514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004518:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800451a:	2320      	movs	r3, #32
 800451c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004520:	f7ff fff4 	bl	800450c <HAL_UART_TxCpltCallback>
}
 8004524:	2000      	movs	r0, #0
 8004526:	bd08      	pop	{r3, pc}

08004528 <HAL_UART_RxCpltCallback>:
}
 8004528:	4770      	bx	lr

0800452a <UART_DMAReceiveCplt>:
{
 800452a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800452c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800452e:	6802      	ldr	r2, [r0, #0]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004536:	d113      	bne.n	8004560 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8004538:	2200      	movs	r2, #0
 800453a:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	68ca      	ldr	r2, [r1, #12]
 8004540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004544:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004546:	6819      	ldr	r1, [r3, #0]
 8004548:	694a      	ldr	r2, [r1, #20]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	694a      	ldr	r2, [r1, #20]
 8004554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004558:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ffe1 	bl	8004528 <HAL_UART_RxCpltCallback>
}
 8004566:	bd08      	pop	{r3, pc}

08004568 <UART_Receive_IT>:
{
 8004568:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800456a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b22      	cmp	r3, #34	; 0x22
 8004572:	d145      	bne.n	8004600 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004574:	6883      	ldr	r3, [r0, #8]
 8004576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457a:	d00e      	beq.n	800459a <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800457c:	6903      	ldr	r3, [r0, #16]
 800457e:	bb03      	cbnz	r3, 80045c2 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004580:	6803      	ldr	r3, [r0, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004586:	1c59      	adds	r1, r3, #1
 8004588:	6281      	str	r1, [r0, #40]	; 0x28
 800458a:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800458c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800458e:	3b01      	subs	r3, #1
 8004590:	b29b      	uxth	r3, r3
 8004592:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004594:	b1f3      	cbz	r3, 80045d4 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8004596:	2000      	movs	r0, #0
 8004598:	e033      	b.n	8004602 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800459a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800459c:	6903      	ldr	r3, [r0, #16]
 800459e:	b943      	cbnz	r3, 80045b2 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045a0:	6803      	ldr	r3, [r0, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a8:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 80045aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045ac:	3302      	adds	r3, #2
 80045ae:	6283      	str	r3, [r0, #40]	; 0x28
 80045b0:	e7ec      	b.n	800458c <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80045b2:	6803      	ldr	r3, [r0, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80045ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045bc:	3301      	adds	r3, #1
 80045be:	6283      	str	r3, [r0, #40]	; 0x28
 80045c0:	e7e4      	b.n	800458c <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045c2:	6803      	ldr	r3, [r0, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80045c8:	1c51      	adds	r1, r2, #1
 80045ca:	6281      	str	r1, [r0, #40]	; 0x28
 80045cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d0:	7013      	strb	r3, [r2, #0]
 80045d2:	e7db      	b.n	800458c <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045d4:	6802      	ldr	r2, [r0, #0]
 80045d6:	68d3      	ldr	r3, [r2, #12]
 80045d8:	f023 0320 	bic.w	r3, r3, #32
 80045dc:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045de:	6802      	ldr	r2, [r0, #0]
 80045e0:	68d3      	ldr	r3, [r2, #12]
 80045e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045e8:	6802      	ldr	r2, [r0, #0]
 80045ea:	6953      	ldr	r3, [r2, #20]
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80045f2:	2320      	movs	r3, #32
 80045f4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80045f8:	f7ff ff96 	bl	8004528 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80045fc:	2000      	movs	r0, #0
 80045fe:	e000      	b.n	8004602 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8004600:	2002      	movs	r0, #2
}
 8004602:	bd08      	pop	{r3, pc}

08004604 <HAL_UART_RxHalfCpltCallback>:
}
 8004604:	4770      	bx	lr

08004606 <UART_DMARxHalfCplt>:
{
 8004606:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8004608:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800460a:	f7ff fffb 	bl	8004604 <HAL_UART_RxHalfCpltCallback>
}
 800460e:	bd08      	pop	{r3, pc}

08004610 <HAL_UART_ErrorCallback>:
}
 8004610:	4770      	bx	lr

08004612 <UART_DMAError>:
{
 8004612:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004614:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800461a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b21      	cmp	r3, #33	; 0x21
 8004622:	d010      	beq.n	8004646 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800462c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b22      	cmp	r3, #34	; 0x22
 8004634:	d011      	beq.n	800465a <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004636:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004638:	f043 0310 	orr.w	r3, r3, #16
 800463c:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800463e:	4620      	mov	r0, r4
 8004640:	f7ff ffe6 	bl	8004610 <HAL_UART_ErrorCallback>
}
 8004644:	bd10      	pop	{r4, pc}
 8004646:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800464a:	2a00      	cmp	r2, #0
 800464c:	d0ea      	beq.n	8004624 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004652:	4620      	mov	r0, r4
 8004654:	f7ff fc51 	bl	8003efa <UART_EndTxTransfer>
 8004658:	e7e4      	b.n	8004624 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800465a:	2a00      	cmp	r2, #0
 800465c:	d0eb      	beq.n	8004636 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800465e:	2300      	movs	r3, #0
 8004660:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004662:	4620      	mov	r0, r4
 8004664:	f7ff fc52 	bl	8003f0c <UART_EndRxTransfer>
 8004668:	e7e5      	b.n	8004636 <UART_DMAError+0x24>
	...

0800466c <HAL_UART_IRQHandler>:
{
 800466c:	b510      	push	{r4, lr}
 800466e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004670:	6802      	ldr	r2, [r0, #0]
 8004672:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004674:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004676:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8004678:	f013 000f 	ands.w	r0, r3, #15
 800467c:	d105      	bne.n	800468a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800467e:	f013 0f20 	tst.w	r3, #32
 8004682:	d002      	beq.n	800468a <HAL_UART_IRQHandler+0x1e>
 8004684:	f011 0f20 	tst.w	r1, #32
 8004688:	d153      	bne.n	8004732 <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800468a:	2800      	cmp	r0, #0
 800468c:	d067      	beq.n	800475e <HAL_UART_IRQHandler+0xf2>
 800468e:	f012 0201 	ands.w	r2, r2, #1
 8004692:	d102      	bne.n	800469a <HAL_UART_IRQHandler+0x2e>
 8004694:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004698:	d061      	beq.n	800475e <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800469a:	f013 0f01 	tst.w	r3, #1
 800469e:	d006      	beq.n	80046ae <HAL_UART_IRQHandler+0x42>
 80046a0:	f411 7f80 	tst.w	r1, #256	; 0x100
 80046a4:	d003      	beq.n	80046ae <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80046a8:	f040 0001 	orr.w	r0, r0, #1
 80046ac:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046ae:	f013 0f04 	tst.w	r3, #4
 80046b2:	d004      	beq.n	80046be <HAL_UART_IRQHandler+0x52>
 80046b4:	b11a      	cbz	r2, 80046be <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80046b8:	f040 0002 	orr.w	r0, r0, #2
 80046bc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046be:	f013 0f02 	tst.w	r3, #2
 80046c2:	d004      	beq.n	80046ce <HAL_UART_IRQHandler+0x62>
 80046c4:	b11a      	cbz	r2, 80046ce <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80046c8:	f040 0004 	orr.w	r0, r0, #4
 80046cc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046ce:	f013 0f08 	tst.w	r3, #8
 80046d2:	d004      	beq.n	80046de <HAL_UART_IRQHandler+0x72>
 80046d4:	b11a      	cbz	r2, 80046de <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80046d8:	f042 0208 	orr.w	r2, r2, #8
 80046dc:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	d048      	beq.n	8004776 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046e4:	f013 0f20 	tst.w	r3, #32
 80046e8:	d002      	beq.n	80046f0 <HAL_UART_IRQHandler+0x84>
 80046ea:	f011 0f20 	tst.w	r1, #32
 80046ee:	d124      	bne.n	800473a <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80046fa:	f012 0f08 	tst.w	r2, #8
 80046fe:	d100      	bne.n	8004702 <HAL_UART_IRQHandler+0x96>
 8004700:	b33b      	cbz	r3, 8004752 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8004702:	4620      	mov	r0, r4
 8004704:	f7ff fc02 	bl	8003f0c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004710:	d01b      	beq.n	800474a <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004718:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800471a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800471c:	b18b      	cbz	r3, 8004742 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800471e:	4a1a      	ldr	r2, [pc, #104]	; (8004788 <HAL_UART_IRQHandler+0x11c>)
 8004720:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004722:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004724:	f7fd fddc 	bl	80022e0 <HAL_DMA_Abort_IT>
 8004728:	b328      	cbz	r0, 8004776 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800472a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800472c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800472e:	4798      	blx	r3
 8004730:	e021      	b.n	8004776 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8004732:	4620      	mov	r0, r4
 8004734:	f7ff ff18 	bl	8004568 <UART_Receive_IT>
      return;
 8004738:	e01d      	b.n	8004776 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 800473a:	4620      	mov	r0, r4
 800473c:	f7ff ff14 	bl	8004568 <UART_Receive_IT>
 8004740:	e7d6      	b.n	80046f0 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8004742:	4620      	mov	r0, r4
 8004744:	f7ff ff64 	bl	8004610 <HAL_UART_ErrorCallback>
 8004748:	e015      	b.n	8004776 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 800474a:	4620      	mov	r0, r4
 800474c:	f7ff ff60 	bl	8004610 <HAL_UART_ErrorCallback>
 8004750:	e011      	b.n	8004776 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8004752:	4620      	mov	r0, r4
 8004754:	f7ff ff5c 	bl	8004610 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	2300      	movs	r3, #0
 800475a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800475c:	e00b      	b.n	8004776 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800475e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004762:	d002      	beq.n	800476a <HAL_UART_IRQHandler+0xfe>
 8004764:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004768:	d106      	bne.n	8004778 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800476a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800476e:	d002      	beq.n	8004776 <HAL_UART_IRQHandler+0x10a>
 8004770:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004774:	d104      	bne.n	8004780 <HAL_UART_IRQHandler+0x114>
}
 8004776:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8004778:	4620      	mov	r0, r4
 800477a:	f7ff fbd5 	bl	8003f28 <UART_Transmit_IT>
    return;
 800477e:	e7fa      	b.n	8004776 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8004780:	4620      	mov	r0, r4
 8004782:	f7ff fec4 	bl	800450e <UART_EndTransmit_IT>
    return;
 8004786:	e7f6      	b.n	8004776 <HAL_UART_IRQHandler+0x10a>
 8004788:	0800478d 	.word	0x0800478d

0800478c <UART_DMAAbortOnError>:
{
 800478c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8004790:	2300      	movs	r3, #0
 8004792:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004794:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004796:	f7ff ff3b 	bl	8004610 <HAL_UART_ErrorCallback>
}
 800479a:	bd08      	pop	{r3, pc}

0800479c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800479c:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 800479e:	4805      	ldr	r0, [pc, #20]	; (80047b4 <MX_CRC_Init+0x18>)
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <MX_CRC_Init+0x1c>)
 80047a2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80047a4:	f7fd fc6e 	bl	8002084 <HAL_CRC_Init>
 80047a8:	b900      	cbnz	r0, 80047ac <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 80047aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80047ac:	f000 fcc4 	bl	8005138 <Error_Handler>
}
 80047b0:	e7fb      	b.n	80047aa <MX_CRC_Init+0xe>
 80047b2:	bf00      	nop
 80047b4:	2000047c 	.word	0x2000047c
 80047b8:	40023000 	.word	0x40023000

080047bc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80047bc:	6802      	ldr	r2, [r0, #0]
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_CRC_MspInit+0x28>)
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d000      	beq.n	80047c6 <HAL_CRC_MspInit+0xa>
 80047c4:	4770      	bx	lr
{
 80047c6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80047c8:	2300      	movs	r3, #0
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <HAL_CRC_MspInit+0x2c>)
 80047ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80047e0:	b002      	add	sp, #8
 80047e2:	4770      	bx	lr
 80047e4:	40023000 	.word	0x40023000
 80047e8:	40023800 	.word	0x40023800

080047ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80047ec:	b500      	push	{lr}
 80047ee:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80047f0:	2200      	movs	r2, #0
 80047f2:	9201      	str	r2, [sp, #4]
 80047f4:	4b09      	ldr	r3, [pc, #36]	; (800481c <MX_DMA_Init+0x30>)
 80047f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047f8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80047fc:	6319      	str	r1, [r3, #48]	; 0x30
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 4, 0);
 8004808:	2104      	movs	r1, #4
 800480a:	2039      	movs	r0, #57	; 0x39
 800480c:	f7fd fbf8 	bl	8002000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004810:	2039      	movs	r0, #57	; 0x39
 8004812:	f7fd fc29 	bl	8002068 <HAL_NVIC_EnableIRQ>

}
 8004816:	b003      	add	sp, #12
 8004818:	f85d fb04 	ldr.w	pc, [sp], #4
 800481c:	40023800 	.word	0x40023800

08004820 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004824:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004826:	2400      	movs	r4, #0
 8004828:	9405      	str	r4, [sp, #20]
 800482a:	9406      	str	r4, [sp, #24]
 800482c:	9407      	str	r4, [sp, #28]
 800482e:	9408      	str	r4, [sp, #32]
 8004830:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004832:	9400      	str	r4, [sp, #0]
 8004834:	4b52      	ldr	r3, [pc, #328]	; (8004980 <MX_GPIO_Init+0x160>)
 8004836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004838:	f042 0204 	orr.w	r2, r2, #4
 800483c:	631a      	str	r2, [r3, #48]	; 0x30
 800483e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004840:	f002 0204 	and.w	r2, r2, #4
 8004844:	9200      	str	r2, [sp, #0]
 8004846:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004848:	9401      	str	r4, [sp, #4]
 800484a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
 8004852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004854:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004858:	9201      	str	r2, [sp, #4]
 800485a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800485c:	9402      	str	r4, [sp, #8]
 800485e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
 8004866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004868:	f002 0201 	and.w	r2, r2, #1
 800486c:	9202      	str	r2, [sp, #8]
 800486e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004870:	9403      	str	r4, [sp, #12]
 8004872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004874:	f042 0202 	orr.w	r2, r2, #2
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
 800487a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487c:	f002 0202 	and.w	r2, r2, #2
 8004880:	9203      	str	r2, [sp, #12]
 8004882:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004884:	9404      	str	r4, [sp, #16]
 8004886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004888:	f042 0208 	orr.w	r2, r2, #8
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004898:	4f3a      	ldr	r7, [pc, #232]	; (8004984 <MX_GPIO_Init+0x164>)
 800489a:	4622      	mov	r2, r4
 800489c:	2120      	movs	r1, #32
 800489e:	4638      	mov	r0, r7
 80048a0:	f7fe f81e 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80048a4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8004994 <MX_GPIO_Init+0x174>
 80048a8:	4622      	mov	r2, r4
 80048aa:	2120      	movs	r1, #32
 80048ac:	4648      	mov	r0, r9
 80048ae:	f7fe f817 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80048b2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8004998 <MX_GPIO_Init+0x178>
 80048b6:	4622      	mov	r2, r4
 80048b8:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80048bc:	4640      	mov	r0, r8
 80048be:	f7fe f80f 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC3 PC4 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80048c2:	f64f 731b 	movw	r3, #65307	; 0xff1b
 80048c6:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048c8:	2503      	movs	r5, #3
 80048ca:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ce:	a905      	add	r1, sp, #20
 80048d0:	4648      	mov	r0, r9
 80048d2:	f7fd ff33 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048d6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048d8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048da:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80048dc:	a905      	add	r1, sp, #20
 80048de:	482a      	ldr	r0, [pc, #168]	; (8004988 <MX_GPIO_Init+0x168>)
 80048e0:	f7fd ff2c 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA6 PA7 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80048e4:	f649 63df 	movw	r3, #40671	; 0x9edf
 80048e8:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048ea:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ec:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ee:	a905      	add	r1, sp, #20
 80048f0:	4638      	mov	r0, r7
 80048f2:	f7fd ff23 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80048f6:	f04f 0a20 	mov.w	sl, #32
 80048fa:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048fe:	2601      	movs	r6, #1
 8004900:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004902:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004904:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004906:	a905      	add	r1, sp, #20
 8004908:	4638      	mov	r0, r7
 800490a:	f7fd ff17 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800490e:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004912:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004914:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004916:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004918:	a905      	add	r1, sp, #20
 800491a:	4648      	mov	r0, r9
 800491c:	f7fd ff0e 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8004920:	2337      	movs	r3, #55	; 0x37
 8004922:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004924:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004926:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004928:	a905      	add	r1, sp, #20
 800492a:	4640      	mov	r0, r8
 800492c:	f7fd ff06 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8004930:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004934:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004936:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493c:	a905      	add	r1, sp, #20
 800493e:	4640      	mov	r0, r8
 8004940:	f7fd fefc 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 8004944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004948:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <MX_GPIO_Init+0x16c>)
 800494c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 8004950:	a905      	add	r1, sp, #20
 8004952:	4638      	mov	r0, r7
 8004954:	f7fd fef2 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004958:	2304      	movs	r3, #4
 800495a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800495c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004960:	a905      	add	r1, sp, #20
 8004962:	480b      	ldr	r0, [pc, #44]	; (8004990 <MX_GPIO_Init+0x170>)
 8004964:	f7fd feea 	bl	800273c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8004968:	4622      	mov	r2, r4
 800496a:	4631      	mov	r1, r6
 800496c:	2017      	movs	r0, #23
 800496e:	f7fd fb47 	bl	8002000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004972:	2017      	movs	r0, #23
 8004974:	f7fd fb78 	bl	8002068 <HAL_NVIC_EnableIRQ>

}
 8004978:	b00a      	add	sp, #40	; 0x28
 800497a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800
 8004984:	40020000 	.word	0x40020000
 8004988:	40021c00 	.word	0x40021c00
 800498c:	10110000 	.word	0x10110000
 8004990:	40020c00 	.word	0x40020c00
 8004994:	40020800 	.word	0x40020800
 8004998:	40020400 	.word	0x40020400

0800499c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800499c:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800499e:	480b      	ldr	r0, [pc, #44]	; (80049cc <MX_I2C2_Init+0x30>)
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <MX_I2C2_Init+0x34>)
 80049a2:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <MX_I2C2_Init+0x38>)
 80049a6:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80049a8:	2300      	movs	r3, #0
 80049aa:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80049ac:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049b2:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049b4:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80049b6:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049b8:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049ba:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80049bc:	f7fd ffa4 	bl	8002908 <HAL_I2C_Init>
 80049c0:	b900      	cbnz	r0, 80049c4 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
  }

}
 80049c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80049c4:	f000 fbb8 	bl	8005138 <Error_Handler>
}
 80049c8:	e7fb      	b.n	80049c2 <MX_I2C2_Init+0x26>
 80049ca:	bf00      	nop
 80049cc:	2000038c 	.word	0x2000038c
 80049d0:	40005800 	.word	0x40005800
 80049d4:	00061a80 	.word	0x00061a80

080049d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80049d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049dc:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049de:	2300      	movs	r3, #0
 80049e0:	9303      	str	r3, [sp, #12]
 80049e2:	9304      	str	r3, [sp, #16]
 80049e4:	9305      	str	r3, [sp, #20]
 80049e6:	9306      	str	r3, [sp, #24]
 80049e8:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 80049ea:	6802      	ldr	r2, [r0, #0]
 80049ec:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <HAL_I2C_MspInit+0x90>)
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d002      	beq.n	80049f8 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80049f2:	b009      	add	sp, #36	; 0x24
 80049f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f8:	2500      	movs	r5, #0
 80049fa:	9501      	str	r5, [sp, #4]
 80049fc:	4c1b      	ldr	r4, [pc, #108]	; (8004a6c <HAL_I2C_MspInit+0x94>)
 80049fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a00:	f043 0302 	orr.w	r3, r3, #2
 8004a04:	6323      	str	r3, [r4, #48]	; 0x30
 8004a06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a16:	f04f 0912 	mov.w	r9, #18
 8004a1a:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a1e:	f04f 0801 	mov.w	r8, #1
 8004a22:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a26:	2703      	movs	r7, #3
 8004a28:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2e:	4e10      	ldr	r6, [pc, #64]	; (8004a70 <HAL_I2C_MspInit+0x98>)
 8004a30:	a903      	add	r1, sp, #12
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7fd fe82 	bl	800273c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a38:	2308      	movs	r3, #8
 8004a3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a3c:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a40:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a44:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004a46:	2309      	movs	r3, #9
 8004a48:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a4a:	a903      	add	r1, sp, #12
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7fd fe75 	bl	800273c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004a52:	9502      	str	r5, [sp, #8]
 8004a54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a5a:	6423      	str	r3, [r4, #64]	; 0x40
 8004a5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a62:	9302      	str	r3, [sp, #8]
 8004a64:	9b02      	ldr	r3, [sp, #8]
}
 8004a66:	e7c4      	b.n	80049f2 <HAL_I2C_MspInit+0x1a>
 8004a68:	40005800 	.word	0x40005800
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40020400 	.word	0x40020400

08004a74 <GPS_init>:


struct GPS_ GPS;


void GPS_init() {
 8004a74:	b508      	push	{r3, lr}

	for (int i = 0; i < GPS_BUFFERSIZE; ++i) {
 8004a76:	2300      	movs	r3, #0
 8004a78:	e003      	b.n	8004a82 <GPS_init+0xe>
		GPS_RX_Buffer[i] = 0;
 8004a7a:	4a07      	ldr	r2, [pc, #28]	; (8004a98 <GPS_init+0x24>)
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < GPS_BUFFERSIZE; ++i) {
 8004a80:	3301      	adds	r3, #1
 8004a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a86:	dbf8      	blt.n	8004a7a <GPS_init+0x6>
	}

	HAL_UART_Receive_DMA(&huart6, GPS_RX_Buffer, GPS_BUFFERSIZE);
 8004a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a8c:	4902      	ldr	r1, [pc, #8]	; (8004a98 <GPS_init+0x24>)
 8004a8e:	4803      	ldr	r0, [pc, #12]	; (8004a9c <GPS_init+0x28>)
 8004a90:	f7ff fce8 	bl	8004464 <HAL_UART_Receive_DMA>


}
 8004a94:	bd08      	pop	{r3, pc}
 8004a96:	bf00      	nop
 8004a98:	200004e0 	.word	0x200004e0
 8004a9c:	20000ab0 	.word	0x20000ab0

08004aa0 <getGPSData>:
	}
	//}

}

void getGPSData(uint8_t *ack_payload_1){
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4604      	mov	r4, r0

	//Goto element [1]
	ack_payload_1++;

	//[1] = no of sattelites tracked
	*ack_payload_1 = GPS.sattelite_no;
 8004aa4:	4d23      	ldr	r5, [pc, #140]	; (8004b34 <getGPSData+0x94>)
 8004aa6:	7e2b      	ldrb	r3, [r5, #24]
 8004aa8:	7043      	strb	r3, [r0, #1]
	ack_payload_1++;
	//[2] = Fix quality
	*ack_payload_1 = GPS.fix_quality;
 8004aaa:	7e6b      	ldrb	r3, [r5, #25]
 8004aac:	7083      	strb	r3, [r0, #2]
	ack_payload_1++;
	//[3] = Day
	*ack_payload_1 = GPS.Day;
 8004aae:	782b      	ldrb	r3, [r5, #0]
 8004ab0:	70c3      	strb	r3, [r0, #3]
	ack_payload_1++;
	//[4] = Month
	*ack_payload_1 = GPS.Month;
 8004ab2:	786b      	ldrb	r3, [r5, #1]
 8004ab4:	7103      	strb	r3, [r0, #4]
	ack_payload_1++;
	//[5] = Year
	*ack_payload_1 = GPS.Year;
 8004ab6:	78ab      	ldrb	r3, [r5, #2]
 8004ab8:	7143      	strb	r3, [r0, #5]
	ack_payload_1++;
	//[6] = Hour
	*ack_payload_1 = GPS.Hours;
 8004aba:	78eb      	ldrb	r3, [r5, #3]
 8004abc:	7183      	strb	r3, [r0, #6]
	ack_payload_1++;
	//[7] = Minutes
	*ack_payload_1 = GPS.Minutes;
 8004abe:	792a      	ldrb	r2, [r5, #4]
 8004ac0:	71c2      	strb	r2, [r0, #7]
	ack_payload_1++;
	//[8] = Hours
	*ack_payload_1 = GPS.Hours;
 8004ac2:	7203      	strb	r3, [r0, #8]
	ack_payload_1++;

	//[9] - [10] = GPS speed in KM/H
	int16_t GPS_speed_tx = round(GPS.Speed * 100);
 8004ac4:	ed95 7a04 	vldr	s14, [r5, #16]
 8004ac8:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8004b38 <getGPSData+0x98>
 8004acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad0:	ee17 0a90 	vmov	r0, s15
 8004ad4:	f7fb fd40 	bl	8000558 <__aeabi_f2d>
 8004ad8:	ec41 0b10 	vmov	d0, r0, r1
 8004adc:	f000 fe02 	bl	80056e4 <round>
 8004ae0:	ec51 0b10 	vmov	r0, r1, d0
 8004ae4:	f7fc f840 	bl	8000b68 <__aeabi_d2iz>
 8004ae8:	b200      	sxth	r0, r0
	*ack_payload_1 = GPS_speed_tx;
 8004aea:	7260      	strb	r0, [r4, #9]
	ack_payload_1++;
	*ack_payload_1 = GPS_speed_tx >> 8;
 8004aec:	1200      	asrs	r0, r0, #8
 8004aee:	72a0      	strb	r0, [r4, #10]
	ack_payload_1++;

	//[11] - [14] = Longitude
	unsigned char temp[sizeof(float)];
	memcpy(temp, &GPS.Longitude, sizeof(GPS.Longitude));
 8004af0:	68ab      	ldr	r3, [r5, #8]

	*ack_payload_1 = temp[0];
 8004af2:	72e3      	strb	r3, [r4, #11]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8004af4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004af8:	7322      	strb	r2, [r4, #12]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8004afa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004afe:	7362      	strb	r2, [r4, #13]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8004b00:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8004b04:	73a3      	strb	r3, [r4, #14]
	ack_payload_1++;

	//[15] - [18] = Longitude
	memcpy(temp, &GPS.Latitude, sizeof(GPS.Latitude));
 8004b06:	68eb      	ldr	r3, [r5, #12]

	*ack_payload_1 = temp[0];
 8004b08:	73e3      	strb	r3, [r4, #15]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8004b0a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004b0e:	7422      	strb	r2, [r4, #16]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8004b10:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004b14:	7462      	strb	r2, [r4, #17]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8004b16:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8004b1a:	74a3      	strb	r3, [r4, #18]
	ack_payload_1++;


	//[19] - [22] = Longitude
	memcpy(temp, &GPS.Altitude, sizeof(GPS.Altitude));
 8004b1c:	696b      	ldr	r3, [r5, #20]

	*ack_payload_1 = temp[0];
 8004b1e:	74e3      	strb	r3, [r4, #19]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8004b20:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004b24:	7522      	strb	r2, [r4, #20]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8004b26:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004b2a:	7562      	strb	r2, [r4, #21]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8004b2c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8004b30:	75a3      	strb	r3, [r4, #22]
	ack_payload_1++;


}
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	200008c8 	.word	0x200008c8
 8004b38:	42c80000 	.word	0x42c80000

08004b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b3c:	b530      	push	{r4, r5, lr}
 8004b3e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b40:	2230      	movs	r2, #48	; 0x30
 8004b42:	2100      	movs	r1, #0
 8004b44:	a808      	add	r0, sp, #32
 8004b46:	f000 fe61 	bl	800580c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b4a:	2400      	movs	r4, #0
 8004b4c:	9403      	str	r4, [sp, #12]
 8004b4e:	9404      	str	r4, [sp, #16]
 8004b50:	9405      	str	r4, [sp, #20]
 8004b52:	9406      	str	r4, [sp, #24]
 8004b54:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b56:	9401      	str	r4, [sp, #4]
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <SystemClock_Config+0x88>)
 8004b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b6c:	9402      	str	r4, [sp, #8]
 8004b6e:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <SystemClock_Config+0x8c>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b7e:	9302      	str	r3, [sp, #8]
 8004b80:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b82:	2502      	movs	r5, #2
 8004b84:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b86:	2301      	movs	r3, #1
 8004b88:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b8a:	2310      	movs	r3, #16
 8004b8c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b8e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b90:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004b92:	2308      	movs	r3, #8
 8004b94:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004b96:	2364      	movs	r3, #100	; 0x64
 8004b98:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b9a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ba0:	a808      	add	r0, sp, #32
 8004ba2:	f7fd ff81 	bl	8002aa8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ba6:	230f      	movs	r3, #15
 8004ba8:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004baa:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bac:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bb2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004bb4:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004bb6:	2103      	movs	r1, #3
 8004bb8:	a803      	add	r0, sp, #12
 8004bba:	f7fe f9ad 	bl	8002f18 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8004bbe:	b015      	add	sp, #84	; 0x54
 8004bc0:	bd30      	pop	{r4, r5, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40007000 	.word	0x40007000

08004bcc <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8004bcc:	4b01      	ldr	r3, [pc, #4]	; (8004bd4 <PWM1_Set+0x8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6358      	str	r0, [r3, #52]	; 0x34
}
 8004bd2:	4770      	bx	lr
 8004bd4:	200009d0 	.word	0x200009d0

08004bd8 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8004bd8:	4b01      	ldr	r3, [pc, #4]	; (8004be0 <PWM2_Set+0x8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6398      	str	r0, [r3, #56]	; 0x38

}
 8004bde:	4770      	bx	lr
 8004be0:	200009d0 	.word	0x200009d0

08004be4 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8004be4:	4b01      	ldr	r3, [pc, #4]	; (8004bec <PWM3_Set+0x8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8004bea:	4770      	bx	lr
 8004bec:	200009d0 	.word	0x200009d0

08004bf0 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8004bf0:	4b01      	ldr	r3, [pc, #4]	; (8004bf8 <PWM4_Set+0x8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6418      	str	r0, [r3, #64]	; 0x40
}
 8004bf6:	4770      	bx	lr
 8004bf8:	200009d0 	.word	0x200009d0

08004bfc <main>:
{
 8004bfc:	b500      	push	{lr}
 8004bfe:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8004c00:	f7fd f9ac 	bl	8001f5c <HAL_Init>
  SystemClock_Config();
 8004c04:	f7ff ff9a 	bl	8004b3c <SystemClock_Config>
  MX_GPIO_Init();
 8004c08:	f7ff fe0a 	bl	8004820 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c0c:	f7ff fdee 	bl	80047ec <MX_DMA_Init>
  MX_I2C2_Init();
 8004c10:	f7ff fec4 	bl	800499c <MX_I2C2_Init>
  MX_TIM4_Init();
 8004c14:	f000 fc5e 	bl	80054d4 <MX_TIM4_Init>
  MX_SPI2_Init();
 8004c18:	f000 fa90 	bl	800513c <MX_SPI2_Init>
  MX_CRC_Init();
 8004c1c:	f7ff fdbe 	bl	800479c <MX_CRC_Init>
  MX_TIM11_Init();
 8004c20:	f000 fbe4 	bl	80053ec <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8004c24:	f000 fcb4 	bl	8005590 <MX_USART6_UART_Init>
	GPS_init();
 8004c28:	f7ff ff24 	bl	8004a74 <GPS_init>
	DWT_Init(); //Enable some of the MCUs special registers so we can get microsecond (us) delays
 8004c2c:	f7fd f96e 	bl	8001f0c <DWT_Init>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 8004c30:	4c28      	ldr	r4, [pc, #160]	; (8004cd4 <main+0xd8>)
 8004c32:	2254      	movs	r2, #84	; 0x54
 8004c34:	1d21      	adds	r1, r4, #4
 8004c36:	4668      	mov	r0, sp
 8004c38:	f000 fddd 	bl	80057f6 <memcpy>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c46:	4824      	ldr	r0, [pc, #144]	; (8004cd8 <main+0xdc>)
 8004c48:	f7fc fc0a 	bl	8001460 <NRF24_begin>
	nrf24_DebugUART_Init(huart6);
 8004c4c:	4e23      	ldr	r6, [pc, #140]	; (8004cdc <main+0xe0>)
 8004c4e:	466c      	mov	r4, sp
 8004c50:	f106 0510 	add.w	r5, r6, #16
 8004c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004c64:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004c68:	f7fc ffc0 	bl	8001bec <nrf24_DebugUART_Init>
	NRF24_enableAckPayload();
 8004c6c:	f7fc fbd4 	bl	8001418 <NRF24_enableAckPayload>
	NRF24_setAutoAck(true);
 8004c70:	2001      	movs	r0, #1
 8004c72:	f7fc fb12 	bl	800129a <NRF24_setAutoAck>
	NRF24_openReadingPipe(1, TxpipeAddrs);
 8004c76:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <main+0xe4>)
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	f7fc fa6b 	bl	8001158 <NRF24_openReadingPipe>
	NRF24_startListening();
 8004c82:	f7fc fa47 	bl	8001114 <NRF24_startListening>
	printRadioSettings();
 8004c86:	f7fc fcc1 	bl	800160c <printRadioSettings>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004c8a:	4c16      	ldr	r4, [pc, #88]	; (8004ce4 <main+0xe8>)
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7ff f8f0 	bl	8003e74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004c94:	2104      	movs	r1, #4
 8004c96:	4620      	mov	r0, r4
 8004c98:	f7ff f8ec 	bl	8003e74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004c9c:	2108      	movs	r1, #8
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f7ff f8e8 	bl	8003e74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004ca4:	210c      	movs	r1, #12
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f7ff f8e4 	bl	8003e74 <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8004cac:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004cb0:	f7ff ff8c 	bl	8004bcc <PWM1_Set>
	PWM2_Set(2500);
 8004cb4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004cb8:	f7ff ff8e 	bl	8004bd8 <PWM2_Set>
	PWM3_Set(2500);
 8004cbc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004cc0:	f7ff ff90 	bl	8004be4 <PWM3_Set>
	PWM4_Set(2500);
 8004cc4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004cc8:	f7ff ff92 	bl	8004bf0 <PWM4_Set>
		main_loop = 1;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <main+0xec>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e7fb      	b.n	8004ccc <main+0xd0>
 8004cd4:	20000938 	.word	0x20000938
 8004cd8:	40020400 	.word	0x40020400
 8004cdc:	20000ab0 	.word	0x20000ab0
 8004ce0:	20000058 	.word	0x20000058
 8004ce4:	200009d0 	.word	0x200009d0
 8004ce8:	20000340 	.word	0x20000340

08004cec <map>:
	//	if (GPIO_Pin == kill_Pin && main_loop) {
	//		//kill();
	//	}

}
float map(int x, int in_min, int in_max, int out_min, int out_max) {
 8004cec:	b410      	push	{r4}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004cee:	1a40      	subs	r0, r0, r1
 8004cf0:	9c01      	ldr	r4, [sp, #4]
 8004cf2:	1ae4      	subs	r4, r4, r3
 8004cf4:	fb04 f000 	mul.w	r0, r4, r0
 8004cf8:	1a52      	subs	r2, r2, r1
 8004cfa:	fb90 f0f2 	sdiv	r0, r0, r2
 8004cfe:	18c3      	adds	r3, r0, r3
 8004d00:	ee00 3a10 	vmov	s0, r3
}
 8004d04:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <unpackRxData>:

// Unpack received 32 byte payload from transmitter, see documentation for specification details
void unpackRxData() {

	L_Joystick_XPos = (RxData[0] & 0xFF) | (RxData[1] << 8);
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <unpackRxData+0x48>)
 8004d12:	781a      	ldrb	r2, [r3, #0]
 8004d14:	7859      	ldrb	r1, [r3, #1]
 8004d16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d1a:	4910      	ldr	r1, [pc, #64]	; (8004d5c <unpackRxData+0x4c>)
 8004d1c:	800a      	strh	r2, [r1, #0]
	L_Joystick_YPos = (RxData[2] & 0xFF) | (RxData[3] << 8);
 8004d1e:	789a      	ldrb	r2, [r3, #2]
 8004d20:	78d9      	ldrb	r1, [r3, #3]
 8004d22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d26:	490e      	ldr	r1, [pc, #56]	; (8004d60 <unpackRxData+0x50>)
 8004d28:	800a      	strh	r2, [r1, #0]
	R_Joystick_XPos = (RxData[4] & 0xFF) | (RxData[5] << 8);
 8004d2a:	791a      	ldrb	r2, [r3, #4]
 8004d2c:	7959      	ldrb	r1, [r3, #5]
 8004d2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d32:	490c      	ldr	r1, [pc, #48]	; (8004d64 <unpackRxData+0x54>)
 8004d34:	800a      	strh	r2, [r1, #0]
	R_Joystick_YPos = (RxData[6] & 0xFF) | (RxData[7] << 8);
 8004d36:	799a      	ldrb	r2, [r3, #6]
 8004d38:	79d9      	ldrb	r1, [r3, #7]
 8004d3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d3e:	490a      	ldr	r1, [pc, #40]	; (8004d68 <unpackRxData+0x58>)
 8004d40:	800a      	strh	r2, [r1, #0]

	airmode = (RxData[8] >> 0) & 1;
 8004d42:	7a1b      	ldrb	r3, [r3, #8]
 8004d44:	f003 0101 	and.w	r1, r3, #1
 8004d48:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <unpackRxData+0x5c>)
 8004d4a:	7011      	strb	r1, [r2, #0]

	kill_rx = (RxData[8] >> 1) & 1;
 8004d4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d50:	4a07      	ldr	r2, [pc, #28]	; (8004d70 <unpackRxData+0x60>)
 8004d52:	7013      	strb	r3, [r2, #0]
	//	//Remap
	//	pitch_p_gain = (float) roll_p_rx / 100;
	//	pitch_i_gain = (float) roll_i_rx / 100;
	//	pitch_d_gain = (float) roll_d_rx / 100;

}
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000914 	.word	0x20000914
 8004d5c:	20000324 	.word	0x20000324
 8004d60:	20000054 	.word	0x20000054
 8004d64:	20000908 	.word	0x20000908
 8004d68:	20000936 	.word	0x20000936
 8004d6c:	20000326 	.word	0x20000326
 8004d70:	2000033c 	.word	0x2000033c

08004d74 <packAckPayData_0>:

//	Pack acknowledge payload data 0 - sent every control loop, which will be sent back to controller once drone has successfully
//	received a payload from it
void packAckPayData_0() {
 8004d74:	b510      	push	{r4, lr}
 8004d76:	ed2d 8b02 	vpush	{d8}

	//ID for packet 0
	AckPayload_0[0] = 0x00;
 8004d7a:	4c26      	ldr	r4, [pc, #152]	; (8004e14 <packAckPayData_0+0xa0>)
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	7023      	strb	r3, [r4, #0]

	//Next 2 bytes = Battery level
	AckPayload_0[1] = batteryLevel;
 8004d80:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <packAckPayData_0+0xa4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	7063      	strb	r3, [r4, #1]
	AckPayload_0[2] = batteryLevel >> 8;
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	70a3      	strb	r3, [r4, #2]

	//Next 4 bytes = IMU Roll
	int16_t roll_tx = round(imu_roll * 100);
 8004d8a:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <packAckPayData_0+0xa8>)
 8004d8c:	edd3 7a00 	vldr	s15, [r3]
 8004d90:	ed9f 8a23 	vldr	s16, [pc, #140]	; 8004e20 <packAckPayData_0+0xac>
 8004d94:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004d98:	ee17 0a90 	vmov	r0, s15
 8004d9c:	f7fb fbdc 	bl	8000558 <__aeabi_f2d>
 8004da0:	ec41 0b10 	vmov	d0, r0, r1
 8004da4:	f000 fc9e 	bl	80056e4 <round>
 8004da8:	ec51 0b10 	vmov	r0, r1, d0
 8004dac:	f7fb fedc 	bl	8000b68 <__aeabi_d2iz>
 8004db0:	b200      	sxth	r0, r0
	AckPayload_0[3] = roll_tx;
 8004db2:	70e0      	strb	r0, [r4, #3]
	AckPayload_0[4] = roll_tx >> 8;
 8004db4:	1200      	asrs	r0, r0, #8
 8004db6:	7120      	strb	r0, [r4, #4]

	//Next  4 bytes = IMU Pitch
	int16_t pitch_tx = round(imu_pitch * 100);
 8004db8:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <packAckPayData_0+0xb0>)
 8004dba:	edd3 7a00 	vldr	s15, [r3]
 8004dbe:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004dc2:	ee17 0a90 	vmov	r0, s15
 8004dc6:	f7fb fbc7 	bl	8000558 <__aeabi_f2d>
 8004dca:	ec41 0b10 	vmov	d0, r0, r1
 8004dce:	f000 fc89 	bl	80056e4 <round>
 8004dd2:	ec51 0b10 	vmov	r0, r1, d0
 8004dd6:	f7fb fec7 	bl	8000b68 <__aeabi_d2iz>
 8004dda:	b200      	sxth	r0, r0
	AckPayload_0[5] = pitch_tx;
 8004ddc:	7160      	strb	r0, [r4, #5]
	AckPayload_0[6] = pitch_tx >> 8;
 8004dde:	1200      	asrs	r0, r0, #8
 8004de0:	71a0      	strb	r0, [r4, #6]

	//Next  4 bytes = IMU Yaw
	int16_t yaw_tx = round(imu_yaw * 100);
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <packAckPayData_0+0xb4>)
 8004de4:	edd3 7a00 	vldr	s15, [r3]
 8004de8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004dec:	ee17 0a90 	vmov	r0, s15
 8004df0:	f7fb fbb2 	bl	8000558 <__aeabi_f2d>
 8004df4:	ec41 0b10 	vmov	d0, r0, r1
 8004df8:	f000 fc74 	bl	80056e4 <round>
 8004dfc:	ec51 0b10 	vmov	r0, r1, d0
 8004e00:	f7fb feb2 	bl	8000b68 <__aeabi_d2iz>
 8004e04:	b200      	sxth	r0, r0
	AckPayload_0[7] = yaw_tx;
 8004e06:	71e0      	strb	r0, [r4, #7]
	AckPayload_0[8] = yaw_tx >> 8;
 8004e08:	1200      	asrs	r0, r0, #8
 8004e0a:	7220      	strb	r0, [r4, #8]

}
 8004e0c:	ecbd 8b02 	vpop	{d8}
 8004e10:	bd10      	pop	{r4, pc}
 8004e12:	bf00      	nop
 8004e14:	200008e8 	.word	0x200008e8
 8004e18:	20000328 	.word	0x20000328
 8004e1c:	2000090c 	.word	0x2000090c
 8004e20:	42c80000 	.word	0x42c80000
 8004e24:	20000910 	.word	0x20000910
 8004e28:	20000484 	.word	0x20000484

08004e2c <packAckPayData_1>:

//	Pack acknowledge payload data 1 - sent every second, contains GPS data
void packAckPayData_1() {
 8004e2c:	b508      	push	{r3, lr}

	//ID for packet 1
	AckPayload_1[0] = 0xFF;
 8004e2e:	4803      	ldr	r0, [pc, #12]	; (8004e3c <packAckPayData_1+0x10>)
 8004e30:	23ff      	movs	r3, #255	; 0xff
 8004e32:	7003      	strb	r3, [r0, #0]

	//Pass array into GPS driver, will modify it
	getGPSData(AckPayload_1);
 8004e34:	f7ff fe34 	bl	8004aa0 <getGPSData>

}
 8004e38:	bd08      	pop	{r3, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000034 	.word	0x20000034

08004e40 <pulse_posedge_handler>:
	if (main_loop) {
 8004e40:	4b97      	ldr	r3, [pc, #604]	; (80050a0 <pulse_posedge_handler+0x260>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b903      	cbnz	r3, 8004e48 <pulse_posedge_handler+0x8>
 8004e46:	4770      	bx	lr
void pulse_posedge_handler() {
 8004e48:	b530      	push	{r4, r5, lr}
 8004e4a:	b083      	sub	sp, #12
		packAckPayData_0();
 8004e4c:	f7ff ff92 	bl	8004d74 <packAckPayData_0>
		if (loop_counter == CRTL_LOOP_FREQ - 1) {
 8004e50:	4b94      	ldr	r3, [pc, #592]	; (80050a4 <pulse_posedge_handler+0x264>)
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	f000 80ac 	beq.w	8004fb6 <pulse_posedge_handler+0x176>
			loop_counter++;
 8004e5e:	3301      	adds	r3, #1
 8004e60:	4a90      	ldr	r2, [pc, #576]	; (80050a4 <pulse_posedge_handler+0x264>)
 8004e62:	8013      	strh	r3, [r2, #0]
		if (NRF24_available()) {
 8004e64:	f7fc fa9d 	bl	80013a2 <NRF24_available>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	f040 80aa 	bne.w	8004fc2 <pulse_posedge_handler+0x182>
			packetsLostCtr++;
 8004e6e:	4a8e      	ldr	r2, [pc, #568]	; (80050a8 <pulse_posedge_handler+0x268>)
 8004e70:	8813      	ldrh	r3, [r2, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	8013      	strh	r3, [r2, #0]
		if (airmode) {
 8004e76:	4b8d      	ldr	r3, [pc, #564]	; (80050ac <pulse_posedge_handler+0x26c>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8102 	beq.w	8005084 <pulse_posedge_handler+0x244>
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, 0);
 8004e80:	eddf 0a8b 	vldr	s1, [pc, #556]	; 80050b0 <pulse_posedge_handler+0x270>
 8004e84:	2000      	movs	r0, #0
 8004e86:	4b8b      	ldr	r3, [pc, #556]	; (80050b4 <pulse_posedge_handler+0x274>)
 8004e88:	ed93 0a00 	vldr	s0, [r3]
 8004e8c:	f7fc ff42 	bl	8001d14 <pid_calculate_pitch>
 8004e90:	4b89      	ldr	r3, [pc, #548]	; (80050b8 <pulse_posedge_handler+0x278>)
 8004e92:	ed83 0a00 	vstr	s0, [r3]
			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 8004e96:	4b89      	ldr	r3, [pc, #548]	; (80050bc <pulse_posedge_handler+0x27c>)
 8004e98:	edd3 0a00 	vldr	s1, [r3]
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	4b88      	ldr	r3, [pc, #544]	; (80050c0 <pulse_posedge_handler+0x280>)
 8004ea0:	ed93 0a00 	vldr	s0, [r3]
 8004ea4:	f7fc feb8 	bl	8001c18 <pid_calculate_roll>
 8004ea8:	4b86      	ldr	r3, [pc, #536]	; (80050c4 <pulse_posedge_handler+0x284>)
 8004eaa:	ed83 0a00 	vstr	s0, [r3]
			pid_output_yaw = pid_calculate_yaw(imu_yaw, 0, yaw_setpoint);
 8004eae:	4b86      	ldr	r3, [pc, #536]	; (80050c8 <pulse_posedge_handler+0x288>)
 8004eb0:	edd3 0a00 	vldr	s1, [r3]
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	4b85      	ldr	r3, [pc, #532]	; (80050cc <pulse_posedge_handler+0x28c>)
 8004eb8:	ed93 0a00 	vldr	s0, [r3]
 8004ebc:	f7fc ffa8 	bl	8001e10 <pid_calculate_yaw>
 8004ec0:	4b83      	ldr	r3, [pc, #524]	; (80050d0 <pulse_posedge_handler+0x290>)
 8004ec2:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 8004ec6:	4b83      	ldr	r3, [pc, #524]	; (80050d4 <pulse_posedge_handler+0x294>)
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	4b7e      	ldr	r3, [pc, #504]	; (80050c4 <pulse_posedge_handler+0x284>)
 8004ecc:	edd3 7a00 	vldr	s15, [r3]
 8004ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ed4:	ee17 1a90 	vmov	r1, s15
 8004ed8:	1a42      	subs	r2, r0, r1
 8004eda:	4b77      	ldr	r3, [pc, #476]	; (80050b8 <pulse_posedge_handler+0x278>)
 8004edc:	edd3 7a00 	vldr	s15, [r3]
 8004ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ee4:	ee17 3a90 	vmov	r3, s15
 8004ee8:	1ad4      	subs	r4, r2, r3
 8004eea:	4d7b      	ldr	r5, [pc, #492]	; (80050d8 <pulse_posedge_handler+0x298>)
 8004eec:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 8004eee:	441a      	add	r2, r3
 8004ef0:	4d7a      	ldr	r5, [pc, #488]	; (80050dc <pulse_posedge_handler+0x29c>)
 8004ef2:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 8004ef4:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 8004ef6:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 8004ef8:	4d79      	ldr	r5, [pc, #484]	; (80050e0 <pulse_posedge_handler+0x2a0>)
 8004efa:	6028      	str	r0, [r5, #0]
				+ (int) pid_output_pitch;
 8004efc:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 8004efe:	4979      	ldr	r1, [pc, #484]	; (80050e4 <pulse_posedge_handler+0x2a4>)
 8004f00:	600b      	str	r3, [r1, #0]
		if (esc1_total < ESC_MIN) {
 8004f02:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8004f06:	428c      	cmp	r4, r1
 8004f08:	dc03      	bgt.n	8004f12 <pulse_posedge_handler+0xd2>
			esc1_total = ESC_MIN;
 8004f0a:	4973      	ldr	r1, [pc, #460]	; (80050d8 <pulse_posedge_handler+0x298>)
 8004f0c:	f240 44e2 	movw	r4, #1250	; 0x4e2
 8004f10:	600c      	str	r4, [r1, #0]
		if (esc1_total > ESC_MAX) {
 8004f12:	4971      	ldr	r1, [pc, #452]	; (80050d8 <pulse_posedge_handler+0x298>)
 8004f14:	680c      	ldr	r4, [r1, #0]
 8004f16:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004f1a:	428c      	cmp	r4, r1
 8004f1c:	dd03      	ble.n	8004f26 <pulse_posedge_handler+0xe6>
			esc1_total = ESC_MAX;
 8004f1e:	496e      	ldr	r1, [pc, #440]	; (80050d8 <pulse_posedge_handler+0x298>)
 8004f20:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8004f24:	600c      	str	r4, [r1, #0]
		if (esc2_total < ESC_MIN) {
 8004f26:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8004f2a:	428a      	cmp	r2, r1
 8004f2c:	dc03      	bgt.n	8004f36 <pulse_posedge_handler+0xf6>
			esc2_total = ESC_MIN;
 8004f2e:	4a6b      	ldr	r2, [pc, #428]	; (80050dc <pulse_posedge_handler+0x29c>)
 8004f30:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8004f34:	6011      	str	r1, [r2, #0]
		if (esc2_total > ESC_MAX) {
 8004f36:	4a69      	ldr	r2, [pc, #420]	; (80050dc <pulse_posedge_handler+0x29c>)
 8004f38:	6811      	ldr	r1, [r2, #0]
 8004f3a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004f3e:	4291      	cmp	r1, r2
 8004f40:	dd03      	ble.n	8004f4a <pulse_posedge_handler+0x10a>
			esc2_total = ESC_MAX;
 8004f42:	4a66      	ldr	r2, [pc, #408]	; (80050dc <pulse_posedge_handler+0x29c>)
 8004f44:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004f48:	6011      	str	r1, [r2, #0]
		if (esc3_total < ESC_MIN) {
 8004f4a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8004f4e:	4290      	cmp	r0, r2
 8004f50:	dc03      	bgt.n	8004f5a <pulse_posedge_handler+0x11a>
			esc3_total = ESC_MIN;
 8004f52:	4a63      	ldr	r2, [pc, #396]	; (80050e0 <pulse_posedge_handler+0x2a0>)
 8004f54:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8004f58:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 8004f5a:	4a61      	ldr	r2, [pc, #388]	; (80050e0 <pulse_posedge_handler+0x2a0>)
 8004f5c:	6811      	ldr	r1, [r2, #0]
 8004f5e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004f62:	4291      	cmp	r1, r2
 8004f64:	dd03      	ble.n	8004f6e <pulse_posedge_handler+0x12e>
			esc3_total = ESC_MAX;
 8004f66:	4a5e      	ldr	r2, [pc, #376]	; (80050e0 <pulse_posedge_handler+0x2a0>)
 8004f68:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004f6c:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 8004f6e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8004f72:	4293      	cmp	r3, r2
 8004f74:	dc03      	bgt.n	8004f7e <pulse_posedge_handler+0x13e>
			esc4_total = ESC_MIN;
 8004f76:	4b5b      	ldr	r3, [pc, #364]	; (80050e4 <pulse_posedge_handler+0x2a4>)
 8004f78:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8004f7c:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 8004f7e:	4b59      	ldr	r3, [pc, #356]	; (80050e4 <pulse_posedge_handler+0x2a4>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004f86:	429a      	cmp	r2, r3
 8004f88:	dd03      	ble.n	8004f92 <pulse_posedge_handler+0x152>
			esc4_total = ESC_MAX;
 8004f8a:	4b56      	ldr	r3, [pc, #344]	; (80050e4 <pulse_posedge_handler+0x2a4>)
 8004f8c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004f90:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8004f92:	4b51      	ldr	r3, [pc, #324]	; (80050d8 <pulse_posedge_handler+0x298>)
 8004f94:	8818      	ldrh	r0, [r3, #0]
 8004f96:	f7ff fe19 	bl	8004bcc <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8004f9a:	4b50      	ldr	r3, [pc, #320]	; (80050dc <pulse_posedge_handler+0x29c>)
 8004f9c:	8818      	ldrh	r0, [r3, #0]
 8004f9e:	f7ff fe1b 	bl	8004bd8 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8004fa2:	4b4f      	ldr	r3, [pc, #316]	; (80050e0 <pulse_posedge_handler+0x2a0>)
 8004fa4:	8818      	ldrh	r0, [r3, #0]
 8004fa6:	f7ff fe1d 	bl	8004be4 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8004faa:	4b4e      	ldr	r3, [pc, #312]	; (80050e4 <pulse_posedge_handler+0x2a4>)
 8004fac:	8818      	ldrh	r0, [r3, #0]
 8004fae:	f7ff fe1f 	bl	8004bf0 <PWM4_Set>
}
 8004fb2:	b003      	add	sp, #12
 8004fb4:	bd30      	pop	{r4, r5, pc}
			packAckPayData_1();
 8004fb6:	f7ff ff39 	bl	8004e2c <packAckPayData_1>
			loop_counter = 0;
 8004fba:	4b3a      	ldr	r3, [pc, #232]	; (80050a4 <pulse_posedge_handler+0x264>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	801a      	strh	r2, [r3, #0]
 8004fc0:	e750      	b.n	8004e64 <pulse_posedge_handler+0x24>
			NRF24_read(RxData, 32);
 8004fc2:	2120      	movs	r1, #32
 8004fc4:	4848      	ldr	r0, [pc, #288]	; (80050e8 <pulse_posedge_handler+0x2a8>)
 8004fc6:	f7fc f94c 	bl	8001262 <NRF24_read>
			packetsLostCtr = 0;
 8004fca:	4b37      	ldr	r3, [pc, #220]	; (80050a8 <pulse_posedge_handler+0x268>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	801a      	strh	r2, [r3, #0]
			if (loop_counter == CRTL_LOOP_FREQ - 1) {
 8004fd0:	4b34      	ldr	r3, [pc, #208]	; (80050a4 <pulse_posedge_handler+0x264>)
 8004fd2:	881a      	ldrh	r2, [r3, #0]
 8004fd4:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d04d      	beq.n	8005078 <pulse_posedge_handler+0x238>
				NRF24_writeAckPayload(1, AckPayload_0, 32);
 8004fdc:	2220      	movs	r2, #32
 8004fde:	4943      	ldr	r1, [pc, #268]	; (80050ec <pulse_posedge_handler+0x2ac>)
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f7fc f9e3 	bl	80013ac <NRF24_writeAckPayload>
			unpackRxData();
 8004fe6:	f7ff fe93 	bl	8004d10 <unpackRxData>
			throttle = map(L_Joystick_YPos, 850, 3300, ESC_MIN, ESC_MAX);
 8004fea:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <pulse_posedge_handler+0x2b0>)
 8004fec:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004ff0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004ffa:	f640 42e4 	movw	r2, #3300	; 0xce4
 8004ffe:	f240 3152 	movw	r1, #850	; 0x352
 8005002:	f7ff fe73 	bl	8004cec <map>
 8005006:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800500a:	ee17 3a90 	vmov	r3, s15
 800500e:	4a31      	ldr	r2, [pc, #196]	; (80050d4 <pulse_posedge_handler+0x294>)
 8005010:	edc2 7a00 	vstr	s15, [r2]
			if (throttle < ESC_MIN + 200) {
 8005014:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8005018:	4293      	cmp	r3, r2
 800501a:	dc03      	bgt.n	8005024 <pulse_posedge_handler+0x1e4>
				throttle = ESC_MIN;
 800501c:	4b2d      	ldr	r3, [pc, #180]	; (80050d4 <pulse_posedge_handler+0x294>)
 800501e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8005022:	601a      	str	r2, [r3, #0]
			if (throttle > ESC_MAX - 200) {
 8005024:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <pulse_posedge_handler+0x294>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800502c:	429a      	cmp	r2, r3
 800502e:	dd03      	ble.n	8005038 <pulse_posedge_handler+0x1f8>
				throttle = ESC_MAX;
 8005030:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <pulse_posedge_handler+0x294>)
 8005032:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005036:	601a      	str	r2, [r3, #0]
			roll_setpoint = map(R_Joystick_XPos, 340, 3960, -MAX_ANGLE, MAX_ANGLE);
 8005038:	4b2e      	ldr	r3, [pc, #184]	; (80050f4 <pulse_posedge_handler+0x2b4>)
 800503a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800503e:	2414      	movs	r4, #20
 8005040:	9400      	str	r4, [sp, #0]
 8005042:	f06f 0313 	mvn.w	r3, #19
 8005046:	f640 7278 	movw	r2, #3960	; 0xf78
 800504a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800504e:	f7ff fe4d 	bl	8004cec <map>
 8005052:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <pulse_posedge_handler+0x27c>)
 8005054:	ed83 0a00 	vstr	s0, [r3]
			pitch_setpoint = map(R_Joystick_YPos, 350, 4000, -MAX_ANGLE, MAX_ANGLE);
 8005058:	4b27      	ldr	r3, [pc, #156]	; (80050f8 <pulse_posedge_handler+0x2b8>)
 800505a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800505e:	9400      	str	r4, [sp, #0]
 8005060:	f06f 0313 	mvn.w	r3, #19
 8005064:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005068:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800506c:	f7ff fe3e 	bl	8004cec <map>
 8005070:	4b22      	ldr	r3, [pc, #136]	; (80050fc <pulse_posedge_handler+0x2bc>)
 8005072:	ed83 0a00 	vstr	s0, [r3]
 8005076:	e6fe      	b.n	8004e76 <pulse_posedge_handler+0x36>
				NRF24_writeAckPayload(1, AckPayload_1, 32);
 8005078:	2220      	movs	r2, #32
 800507a:	4921      	ldr	r1, [pc, #132]	; (8005100 <pulse_posedge_handler+0x2c0>)
 800507c:	2001      	movs	r0, #1
 800507e:	f7fc f995 	bl	80013ac <NRF24_writeAckPayload>
 8005082:	e7b0      	b.n	8004fe6 <pulse_posedge_handler+0x1a6>
			pid_output_roll = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	4a0f      	ldr	r2, [pc, #60]	; (80050c4 <pulse_posedge_handler+0x284>)
 8005088:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 800508a:	4a0b      	ldr	r2, [pc, #44]	; (80050b8 <pulse_posedge_handler+0x278>)
 800508c:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 800508e:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <pulse_posedge_handler+0x290>)
 8005090:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8005092:	f7fc fe2d 	bl	8001cf0 <reset_pid_roll>
			reset_pid_pitch();
 8005096:	f7fc fea9 	bl	8001dec <reset_pid_pitch>
			reset_pid_yaw();
 800509a:	f7fc ff25 	bl	8001ee8 <reset_pid_yaw>
 800509e:	e712      	b.n	8004ec6 <pulse_posedge_handler+0x86>
 80050a0:	20000340 	.word	0x20000340
 80050a4:	2000033e 	.word	0x2000033e
 80050a8:	20000342 	.word	0x20000342
 80050ac:	20000326 	.word	0x20000326
 80050b0:	00000000 	.word	0x00000000
 80050b4:	20000910 	.word	0x20000910
 80050b8:	20000344 	.word	0x20000344
 80050bc:	20000354 	.word	0x20000354
 80050c0:	2000090c 	.word	0x2000090c
 80050c4:	20000348 	.word	0x20000348
 80050c8:	2000035c 	.word	0x2000035c
 80050cc:	20000484 	.word	0x20000484
 80050d0:	2000034c 	.word	0x2000034c
 80050d4:	20000358 	.word	0x20000358
 80050d8:	2000032c 	.word	0x2000032c
 80050dc:	20000330 	.word	0x20000330
 80050e0:	20000334 	.word	0x20000334
 80050e4:	20000338 	.word	0x20000338
 80050e8:	20000914 	.word	0x20000914
 80050ec:	200008e8 	.word	0x200008e8
 80050f0:	20000054 	.word	0x20000054
 80050f4:	20000908 	.word	0x20000908
 80050f8:	20000936 	.word	0x20000936
 80050fc:	20000350 	.word	0x20000350
 8005100:	20000034 	.word	0x20000034

08005104 <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == PWM_INT_Pin && main_loop) {
 8005104:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005108:	d000      	beq.n	800510c <HAL_GPIO_EXTI_Callback+0x8>
 800510a:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800510c:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_INT_Pin && main_loop) {
 800510e:	4b03      	ldr	r3, [pc, #12]	; (800511c <HAL_GPIO_EXTI_Callback+0x18>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	b903      	cbnz	r3, 8005116 <HAL_GPIO_EXTI_Callback+0x12>
}
 8005114:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 8005116:	f7ff fe93 	bl	8004e40 <pulse_posedge_handler>
}
 800511a:	e7fb      	b.n	8005114 <HAL_GPIO_EXTI_Callback+0x10>
 800511c:	20000340 	.word	0x20000340

08005120 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005122:	6802      	ldr	r2, [r0, #0]
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8005126:	429a      	cmp	r2, r3
 8005128:	d000      	beq.n	800512c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800512a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800512c:	f7fc ff30 	bl	8001f90 <HAL_IncTick>
}
 8005130:	e7fb      	b.n	800512a <HAL_TIM_PeriodElapsedCallback+0xa>
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000

08005138 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005138:	4770      	bx	lr
	...

0800513c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800513c:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 800513e:	480e      	ldr	r0, [pc, #56]	; (8005178 <MX_SPI2_Init+0x3c>)
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <MX_SPI2_Init+0x40>)
 8005142:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005144:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005148:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800514a:	2300      	movs	r3, #0
 800514c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800514e:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005150:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005152:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005158:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800515a:	2220      	movs	r2, #32
 800515c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800515e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005160:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005162:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005164:	230a      	movs	r3, #10
 8005166:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005168:	f7fe f88e 	bl	8003288 <HAL_SPI_Init>
 800516c:	b900      	cbnz	r0, 8005170 <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 800516e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005170:	f7ff ffe2 	bl	8005138 <Error_Handler>
}
 8005174:	e7fb      	b.n	800516e <MX_SPI2_Init+0x32>
 8005176:	bf00      	nop
 8005178:	20000938 	.word	0x20000938
 800517c:	40003800 	.word	0x40003800

08005180 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005182:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005184:	2300      	movs	r3, #0
 8005186:	9303      	str	r3, [sp, #12]
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	9305      	str	r3, [sp, #20]
 800518c:	9306      	str	r3, [sp, #24]
 800518e:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8005190:	6802      	ldr	r2, [r0, #0]
 8005192:	4b23      	ldr	r3, [pc, #140]	; (8005220 <HAL_SPI_MspInit+0xa0>)
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005198:	b009      	add	sp, #36	; 0x24
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800519c:	2400      	movs	r4, #0
 800519e:	9400      	str	r4, [sp, #0]
 80051a0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80051a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051aa:	641a      	str	r2, [r3, #64]	; 0x40
 80051ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80051b2:	9200      	str	r2, [sp, #0]
 80051b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051b6:	9401      	str	r4, [sp, #4]
 80051b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ba:	f042 0204 	orr.w	r2, r2, #4
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
 80051c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c2:	f002 0204 	and.w	r2, r2, #4
 80051c6:	9201      	str	r2, [sp, #4]
 80051c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ca:	9402      	str	r4, [sp, #8]
 80051cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ce:	f042 0202 	orr.w	r2, r2, #2
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051de:	2304      	movs	r3, #4
 80051e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e2:	2702      	movs	r7, #2
 80051e4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e6:	2603      	movs	r6, #3
 80051e8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051ea:	2505      	movs	r5, #5
 80051ec:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ee:	a903      	add	r1, sp, #12
 80051f0:	480c      	ldr	r0, [pc, #48]	; (8005224 <HAL_SPI_MspInit+0xa4>)
 80051f2:	f7fd faa3 	bl	800273c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80051f6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80051fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fe:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005200:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005202:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005204:	a903      	add	r1, sp, #12
 8005206:	4808      	ldr	r0, [pc, #32]	; (8005228 <HAL_SPI_MspInit+0xa8>)
 8005208:	f7fd fa98 	bl	800273c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800520c:	4622      	mov	r2, r4
 800520e:	4629      	mov	r1, r5
 8005210:	2024      	movs	r0, #36	; 0x24
 8005212:	f7fc fef5 	bl	8002000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005216:	2024      	movs	r0, #36	; 0x24
 8005218:	f7fc ff26 	bl	8002068 <HAL_NVIC_EnableIRQ>
}
 800521c:	e7bc      	b.n	8005198 <HAL_SPI_MspInit+0x18>
 800521e:	bf00      	nop
 8005220:	40003800 	.word	0x40003800
 8005224:	40020800 	.word	0x40020800
 8005228:	40020400 	.word	0x40020400

0800522c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800522c:	b510      	push	{r4, lr}
 800522e:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005230:	2400      	movs	r4, #0
 8005232:	9400      	str	r4, [sp, #0]
 8005234:	4b12      	ldr	r3, [pc, #72]	; (8005280 <HAL_MspInit+0x54>)
 8005236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800523c:	645a      	str	r2, [r3, #68]	; 0x44
 800523e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005240:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005244:	9200      	str	r2, [sp, #0]
 8005246:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005248:	9401      	str	r4, [sp, #4]
 800524a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800524c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 2, 0);
 800525c:	4622      	mov	r2, r4
 800525e:	2102      	movs	r1, #2
 8005260:	2004      	movs	r0, #4
 8005262:	f7fc fecd 	bl	8002000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005266:	2004      	movs	r0, #4
 8005268:	f7fc fefe 	bl	8002068 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 2, 0);
 800526c:	4622      	mov	r2, r4
 800526e:	2102      	movs	r1, #2
 8005270:	2005      	movs	r0, #5
 8005272:	f7fc fec5 	bl	8002000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005276:	2005      	movs	r0, #5
 8005278:	f7fc fef6 	bl	8002068 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800527c:	b002      	add	sp, #8
 800527e:	bd10      	pop	{r4, pc}
 8005280:	40023800 	.word	0x40023800

08005284 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005284:	b510      	push	{r4, lr}
 8005286:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005288:	2200      	movs	r2, #0
 800528a:	4601      	mov	r1, r0
 800528c:	2019      	movs	r0, #25
 800528e:	f7fc feb7 	bl	8002000 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005292:	2019      	movs	r0, #25
 8005294:	f7fc fee8 	bl	8002068 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005298:	2400      	movs	r4, #0
 800529a:	9401      	str	r4, [sp, #4]
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <HAL_InitTick+0x68>)
 800529e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052b0:	a902      	add	r1, sp, #8
 80052b2:	a803      	add	r0, sp, #12
 80052b4:	f7fd ff02 	bl	80030bc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80052b8:	f7fd fef0 	bl	800309c <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <HAL_InitTick+0x6c>)
 80052be:	fba3 2300 	umull	r2, r3, r3, r0
 80052c2:	0c9b      	lsrs	r3, r3, #18
 80052c4:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80052c6:	480b      	ldr	r0, [pc, #44]	; (80052f4 <HAL_InitTick+0x70>)
 80052c8:	4a0b      	ldr	r2, [pc, #44]	; (80052f8 <HAL_InitTick+0x74>)
 80052ca:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80052cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052d0:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80052d2:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80052d4:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052d6:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80052d8:	f7fe fce8 	bl	8003cac <HAL_TIM_Base_Init>
 80052dc:	b110      	cbz	r0, 80052e4 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80052de:	2001      	movs	r0, #1
}
 80052e0:	b008      	add	sp, #32
 80052e2:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 80052e4:	4803      	ldr	r0, [pc, #12]	; (80052f4 <HAL_InitTick+0x70>)
 80052e6:	f7fe fbc1 	bl	8003a6c <HAL_TIM_Base_Start_IT>
 80052ea:	e7f9      	b.n	80052e0 <HAL_InitTick+0x5c>
 80052ec:	40023800 	.word	0x40023800
 80052f0:	431bde83 	.word	0x431bde83
 80052f4:	20000990 	.word	0x20000990
 80052f8:	40010000 	.word	0x40010000

080052fc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80052fc:	4770      	bx	lr

080052fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052fe:	e7fe      	b.n	80052fe <HardFault_Handler>

08005300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005300:	e7fe      	b.n	8005300 <MemManage_Handler>

08005302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005302:	e7fe      	b.n	8005302 <BusFault_Handler>

08005304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005304:	e7fe      	b.n	8005304 <UsageFault_Handler>

08005306 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005306:	4770      	bx	lr

08005308 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005308:	4770      	bx	lr

0800530a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800530a:	4770      	bx	lr

0800530c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800530c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800530e:	f7fd f93f 	bl	8002590 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8005312:	bd08      	pop	{r3, pc}

08005314 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005314:	4770      	bx	lr

08005316 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005316:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005318:	f44f 7080 	mov.w	r0, #256	; 0x100
 800531c:	f7fd fae6 	bl	80028ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005320:	bd08      	pop	{r3, pc}
	...

08005324 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005324:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005326:	4802      	ldr	r0, [pc, #8]	; (8005330 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8005328:	f7fe fbb5 	bl	8003a96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800532c:	bd08      	pop	{r3, pc}
 800532e:	bf00      	nop
 8005330:	20000990 	.word	0x20000990

08005334 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005334:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005336:	4802      	ldr	r0, [pc, #8]	; (8005340 <SPI2_IRQHandler+0xc>)
 8005338:	f7fe fa7c 	bl	8003834 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800533c:	bd08      	pop	{r3, pc}
 800533e:	bf00      	nop
 8005340:	20000938 	.word	0x20000938

08005344 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005346:	4802      	ldr	r0, [pc, #8]	; (8005350 <DMA2_Stream1_IRQHandler+0xc>)
 8005348:	f7fc ffde 	bl	8002308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800534c:	bd08      	pop	{r3, pc}
 800534e:	bf00      	nop
 8005350:	20000a50 	.word	0x20000a50

08005354 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005354:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005356:	4802      	ldr	r0, [pc, #8]	; (8005360 <USART6_IRQHandler+0xc>)
 8005358:	f7ff f988 	bl	800466c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800535c:	bd08      	pop	{r3, pc}
 800535e:	bf00      	nop
 8005360:	20000ab0 	.word	0x20000ab0

08005364 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005364:	b508      	push	{r3, lr}
 8005366:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005368:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <_sbrk+0x34>)
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	b142      	cbz	r2, 8005380 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800536e:	4a0a      	ldr	r2, [pc, #40]	; (8005398 <_sbrk+0x34>)
 8005370:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005372:	4403      	add	r3, r0
 8005374:	466a      	mov	r2, sp
 8005376:	4293      	cmp	r3, r2
 8005378:	d806      	bhi.n	8005388 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800537a:	4a07      	ldr	r2, [pc, #28]	; (8005398 <_sbrk+0x34>)
 800537c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800537e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8005380:	4a05      	ldr	r2, [pc, #20]	; (8005398 <_sbrk+0x34>)
 8005382:	4906      	ldr	r1, [pc, #24]	; (800539c <_sbrk+0x38>)
 8005384:	6011      	str	r1, [r2, #0]
 8005386:	e7f2      	b.n	800536e <_sbrk+0xa>
		errno = ENOMEM;
 8005388:	f000 f9f6 	bl	8005778 <__errno>
 800538c:	230c      	movs	r3, #12
 800538e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005394:	e7f3      	b.n	800537e <_sbrk+0x1a>
 8005396:	bf00      	nop
 8005398:	20000360 	.word	0x20000360
 800539c:	20000af8 	.word	0x20000af8

080053a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053a0:	490f      	ldr	r1, [pc, #60]	; (80053e0 <SystemInit+0x40>)
 80053a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80053a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <SystemInit+0x44>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80053b8:	2000      	movs	r0, #0
 80053ba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80053c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053c6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80053c8:	4a07      	ldr	r2, [pc, #28]	; (80053e8 <SystemInit+0x48>)
 80053ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053d2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80053d4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053da:	608b      	str	r3, [r1, #8]
#endif
}
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	e000ed00 	.word	0xe000ed00
 80053e4:	40023800 	.word	0x40023800
 80053e8:	24003010 	.word	0x24003010

080053ec <MX_TIM11_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80053ec:	b508      	push	{r3, lr}

  htim11.Instance = TIM11;
 80053ee:	4809      	ldr	r0, [pc, #36]	; (8005414 <MX_TIM11_Init+0x28>)
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <MX_TIM11_Init+0x2c>)
 80053f2:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100;
 80053f4:	2364      	movs	r3, #100	; 0x64
 80053f6:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053f8:	2300      	movs	r3, #0
 80053fa:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 80053fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005400:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005402:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005404:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005406:	f7fe fc51 	bl	8003cac <HAL_TIM_Base_Init>
 800540a:	b900      	cbnz	r0, 800540e <MX_TIM11_Init+0x22>
  {
    Error_Handler();
  }

}
 800540c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800540e:	f7ff fe93 	bl	8005138 <Error_Handler>
}
 8005412:	e7fb      	b.n	800540c <MX_TIM11_Init+0x20>
 8005414:	20000a10 	.word	0x20000a10
 8005418:	40014800 	.word	0x40014800

0800541c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 800541c:	6802      	ldr	r2, [r0, #0]
 800541e:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HAL_TIM_PWM_MspInit+0x28>)
 8005420:	429a      	cmp	r2, r3
 8005422:	d000      	beq.n	8005426 <HAL_TIM_PWM_MspInit+0xa>
 8005424:	4770      	bx	lr
{
 8005426:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005428:	2300      	movs	r3, #0
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <HAL_TIM_PWM_MspInit+0x2c>)
 800542e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005430:	f042 0204 	orr.w	r2, r2, #4
 8005434:	641a      	str	r2, [r3, #64]	; 0x40
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005440:	b002      	add	sp, #8
 8005442:	4770      	bx	lr
 8005444:	40000800 	.word	0x40000800
 8005448:	40023800 	.word	0x40023800

0800544c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM11)
 800544c:	6802      	ldr	r2, [r0, #0]
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <HAL_TIM_Base_MspInit+0x28>)
 8005450:	429a      	cmp	r2, r3
 8005452:	d000      	beq.n	8005456 <HAL_TIM_Base_MspInit+0xa>
 8005454:	4770      	bx	lr
{
 8005456:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005458:	2300      	movs	r3, #0
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	4b06      	ldr	r3, [pc, #24]	; (8005478 <HAL_TIM_Base_MspInit+0x2c>)
 800545e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005460:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005464:	645a      	str	r2, [r3, #68]	; 0x44
 8005466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8005470:	b002      	add	sp, #8
 8005472:	4770      	bx	lr
 8005474:	40014800 	.word	0x40014800
 8005478:	40023800 	.word	0x40023800

0800547c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800547c:	b500      	push	{lr}
 800547e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005480:	2300      	movs	r3, #0
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	9302      	str	r3, [sp, #8]
 8005486:	9303      	str	r3, [sp, #12]
 8005488:	9304      	str	r3, [sp, #16]
 800548a:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 800548c:	6802      	ldr	r2, [r0, #0]
 800548e:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <HAL_TIM_MspPostInit+0x4c>)
 8005490:	429a      	cmp	r2, r3
 8005492:	d002      	beq.n	800549a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005494:	b007      	add	sp, #28
 8005496:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_TIM_MspPostInit+0x50>)
 80054a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a2:	f042 0202 	orr.w	r2, r2, #2
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80054b2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80054b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b8:	2302      	movs	r3, #2
 80054ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054be:	a901      	add	r1, sp, #4
 80054c0:	4803      	ldr	r0, [pc, #12]	; (80054d0 <HAL_TIM_MspPostInit+0x54>)
 80054c2:	f7fd f93b 	bl	800273c <HAL_GPIO_Init>
}
 80054c6:	e7e5      	b.n	8005494 <HAL_TIM_MspPostInit+0x18>
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40023800 	.word	0x40023800
 80054d0:	40020400 	.word	0x40020400

080054d4 <MX_TIM4_Init>:
{
 80054d4:	b500      	push	{lr}
 80054d6:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054d8:	2300      	movs	r3, #0
 80054da:	9308      	str	r3, [sp, #32]
 80054dc:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	9302      	str	r3, [sp, #8]
 80054e2:	9303      	str	r3, [sp, #12]
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	9305      	str	r3, [sp, #20]
 80054e8:	9306      	str	r3, [sp, #24]
 80054ea:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80054ec:	4826      	ldr	r0, [pc, #152]	; (8005588 <MX_TIM4_Init+0xb4>)
 80054ee:	4a27      	ldr	r2, [pc, #156]	; (800558c <MX_TIM4_Init+0xb8>)
 80054f0:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9;
 80054f2:	2209      	movs	r2, #9
 80054f4:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054f6:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 20000;
 80054f8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80054fc:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054fe:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005500:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005502:	f7fe fbec 	bl	8003cde <HAL_TIM_PWM_Init>
 8005506:	bb68      	cbnz	r0, 8005564 <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005508:	2300      	movs	r3, #0
 800550a:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800550c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800550e:	a908      	add	r1, sp, #32
 8005510:	481d      	ldr	r0, [pc, #116]	; (8005588 <MX_TIM4_Init+0xb4>)
 8005512:	f7fe fccd 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8005516:	bb40      	cbnz	r0, 800556a <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005518:	2360      	movs	r3, #96	; 0x60
 800551a:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800551c:	2200      	movs	r2, #0
 800551e:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005520:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005522:	2304      	movs	r3, #4
 8005524:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005526:	eb0d 0103 	add.w	r1, sp, r3
 800552a:	4817      	ldr	r0, [pc, #92]	; (8005588 <MX_TIM4_Init+0xb4>)
 800552c:	f7fe fc22 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8005530:	b9f0      	cbnz	r0, 8005570 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005532:	2204      	movs	r2, #4
 8005534:	eb0d 0102 	add.w	r1, sp, r2
 8005538:	4813      	ldr	r0, [pc, #76]	; (8005588 <MX_TIM4_Init+0xb4>)
 800553a:	f7fe fc1b 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 800553e:	b9d0      	cbnz	r0, 8005576 <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005540:	2208      	movs	r2, #8
 8005542:	a901      	add	r1, sp, #4
 8005544:	4810      	ldr	r0, [pc, #64]	; (8005588 <MX_TIM4_Init+0xb4>)
 8005546:	f7fe fc15 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 800554a:	b9b8      	cbnz	r0, 800557c <MX_TIM4_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800554c:	220c      	movs	r2, #12
 800554e:	a901      	add	r1, sp, #4
 8005550:	480d      	ldr	r0, [pc, #52]	; (8005588 <MX_TIM4_Init+0xb4>)
 8005552:	f7fe fc0f 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8005556:	b9a0      	cbnz	r0, 8005582 <MX_TIM4_Init+0xae>
  HAL_TIM_MspPostInit(&htim4);
 8005558:	480b      	ldr	r0, [pc, #44]	; (8005588 <MX_TIM4_Init+0xb4>)
 800555a:	f7ff ff8f 	bl	800547c <HAL_TIM_MspPostInit>
}
 800555e:	b00b      	add	sp, #44	; 0x2c
 8005560:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005564:	f7ff fde8 	bl	8005138 <Error_Handler>
 8005568:	e7ce      	b.n	8005508 <MX_TIM4_Init+0x34>
    Error_Handler();
 800556a:	f7ff fde5 	bl	8005138 <Error_Handler>
 800556e:	e7d3      	b.n	8005518 <MX_TIM4_Init+0x44>
    Error_Handler();
 8005570:	f7ff fde2 	bl	8005138 <Error_Handler>
 8005574:	e7dd      	b.n	8005532 <MX_TIM4_Init+0x5e>
    Error_Handler();
 8005576:	f7ff fddf 	bl	8005138 <Error_Handler>
 800557a:	e7e1      	b.n	8005540 <MX_TIM4_Init+0x6c>
    Error_Handler();
 800557c:	f7ff fddc 	bl	8005138 <Error_Handler>
 8005580:	e7e4      	b.n	800554c <MX_TIM4_Init+0x78>
    Error_Handler();
 8005582:	f7ff fdd9 	bl	8005138 <Error_Handler>
 8005586:	e7e7      	b.n	8005558 <MX_TIM4_Init+0x84>
 8005588:	200009d0 	.word	0x200009d0
 800558c:	40000800 	.word	0x40000800

08005590 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005590:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8005592:	480a      	ldr	r0, [pc, #40]	; (80055bc <MX_USART6_UART_Init+0x2c>)
 8005594:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <MX_USART6_UART_Init+0x30>)
 8005596:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 9600;
 8005598:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800559c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800559e:	2300      	movs	r3, #0
 80055a0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80055a2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80055a4:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80055a6:	220c      	movs	r2, #12
 80055a8:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055aa:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80055ac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80055ae:	f7fe feba 	bl	8004326 <HAL_UART_Init>
 80055b2:	b900      	cbnz	r0, 80055b6 <MX_USART6_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 80055b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80055b6:	f7ff fdbf 	bl	8005138 <Error_Handler>
}
 80055ba:	e7fb      	b.n	80055b4 <MX_USART6_UART_Init+0x24>
 80055bc:	20000ab0 	.word	0x20000ab0
 80055c0:	40011400 	.word	0x40011400

080055c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80055c4:	b530      	push	{r4, r5, lr}
 80055c6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055c8:	2300      	movs	r3, #0
 80055ca:	9303      	str	r3, [sp, #12]
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	9305      	str	r3, [sp, #20]
 80055d0:	9306      	str	r3, [sp, #24]
 80055d2:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 80055d4:	6802      	ldr	r2, [r0, #0]
 80055d6:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <HAL_UART_MspInit+0xbc>)
 80055d8:	429a      	cmp	r2, r3
 80055da:	d001      	beq.n	80055e0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART6_MspInit 1 */
    // Enable RX idle interrupt, which we use to handle variable-length messages
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
  /* USER CODE END USART6_MspInit 1 */
  }
}
 80055dc:	b009      	add	sp, #36	; 0x24
 80055de:	bd30      	pop	{r4, r5, pc}
 80055e0:	4604      	mov	r4, r0
    __HAL_RCC_USART6_CLK_ENABLE();
 80055e2:	2500      	movs	r5, #0
 80055e4:	9501      	str	r5, [sp, #4]
 80055e6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80055ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ec:	f042 0220 	orr.w	r2, r2, #32
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
 80055f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055f4:	f002 0220 	and.w	r2, r2, #32
 80055f8:	9201      	str	r2, [sp, #4]
 80055fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055fc:	9502      	str	r5, [sp, #8]
 80055fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005600:	f042 0204 	orr.w	r2, r2, #4
 8005604:	631a      	str	r2, [r3, #48]	; 0x30
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	9302      	str	r3, [sp, #8]
 800560e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005610:	23c0      	movs	r3, #192	; 0xc0
 8005612:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005614:	2302      	movs	r3, #2
 8005616:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005618:	2301      	movs	r3, #1
 800561a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800561c:	2303      	movs	r3, #3
 800561e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005620:	2308      	movs	r3, #8
 8005622:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005624:	a903      	add	r1, sp, #12
 8005626:	4817      	ldr	r0, [pc, #92]	; (8005684 <HAL_UART_MspInit+0xc0>)
 8005628:	f7fd f888 	bl	800273c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800562c:	4816      	ldr	r0, [pc, #88]	; (8005688 <HAL_UART_MspInit+0xc4>)
 800562e:	4b17      	ldr	r3, [pc, #92]	; (800568c <HAL_UART_MspInit+0xc8>)
 8005630:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005632:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8005636:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005638:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800563a:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800563c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005640:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005642:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005644:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800564a:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800564c:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800564e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005650:	f7fc fda6 	bl	80021a0 <HAL_DMA_Init>
 8005654:	b980      	cbnz	r0, 8005678 <HAL_UART_MspInit+0xb4>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <HAL_UART_MspInit+0xc4>)
 8005658:	6363      	str	r3, [r4, #52]	; 0x34
 800565a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 4, 0);
 800565c:	2200      	movs	r2, #0
 800565e:	2104      	movs	r1, #4
 8005660:	2047      	movs	r0, #71	; 0x47
 8005662:	f7fc fccd 	bl	8002000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005666:	2047      	movs	r0, #71	; 0x47
 8005668:	f7fc fcfe 	bl	8002068 <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
 800566c:	6822      	ldr	r2, [r4, #0]
 800566e:	68d3      	ldr	r3, [r2, #12]
 8005670:	f043 0310 	orr.w	r3, r3, #16
 8005674:	60d3      	str	r3, [r2, #12]
}
 8005676:	e7b1      	b.n	80055dc <HAL_UART_MspInit+0x18>
      Error_Handler();
 8005678:	f7ff fd5e 	bl	8005138 <Error_Handler>
 800567c:	e7eb      	b.n	8005656 <HAL_UART_MspInit+0x92>
 800567e:	bf00      	nop
 8005680:	40011400 	.word	0x40011400
 8005684:	40020800 	.word	0x40020800
 8005688:	20000a50 	.word	0x20000a50
 800568c:	40026428 	.word	0x40026428

08005690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005694:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005696:	e003      	b.n	80056a0 <LoopCopyDataInit>

08005698 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800569a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800569c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800569e:	3104      	adds	r1, #4

080056a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056a0:	480b      	ldr	r0, [pc, #44]	; (80056d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056a2:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056a8:	d3f6      	bcc.n	8005698 <CopyDataInit>
  ldr  r2, =_sbss
 80056aa:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056ac:	e002      	b.n	80056b4 <LoopFillZerobss>

080056ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056b0:	f842 3b04 	str.w	r3, [r2], #4

080056b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056b8:	d3f9      	bcc.n	80056ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056ba:	f7ff fe71 	bl	80053a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056be:	f000 f861 	bl	8005784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056c2:	f7ff fa9b 	bl	8004bfc <main>
  bx  lr    
 80056c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80056c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80056cc:	08009a08 	.word	0x08009a08
  ldr  r0, =_sdata
 80056d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80056d4:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 80056d8:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 80056dc:	20000af4 	.word	0x20000af4

080056e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056e0:	e7fe      	b.n	80056e0 <ADC_IRQHandler>
	...

080056e4 <round>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	ec57 6b10 	vmov	r6, r7, d0
 80056ea:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80056ee:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80056f2:	2c13      	cmp	r4, #19
 80056f4:	463b      	mov	r3, r7
 80056f6:	463d      	mov	r5, r7
 80056f8:	dc17      	bgt.n	800572a <round+0x46>
 80056fa:	2c00      	cmp	r4, #0
 80056fc:	da09      	bge.n	8005712 <round+0x2e>
 80056fe:	3401      	adds	r4, #1
 8005700:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8005704:	d103      	bne.n	800570e <round+0x2a>
 8005706:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800570a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800570e:	2100      	movs	r1, #0
 8005710:	e02c      	b.n	800576c <round+0x88>
 8005712:	4a18      	ldr	r2, [pc, #96]	; (8005774 <round+0x90>)
 8005714:	4122      	asrs	r2, r4
 8005716:	4217      	tst	r7, r2
 8005718:	d100      	bne.n	800571c <round+0x38>
 800571a:	b19e      	cbz	r6, 8005744 <round+0x60>
 800571c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005720:	4123      	asrs	r3, r4
 8005722:	442b      	add	r3, r5
 8005724:	ea23 0302 	bic.w	r3, r3, r2
 8005728:	e7f1      	b.n	800570e <round+0x2a>
 800572a:	2c33      	cmp	r4, #51	; 0x33
 800572c:	dd0d      	ble.n	800574a <round+0x66>
 800572e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005732:	d107      	bne.n	8005744 <round+0x60>
 8005734:	4630      	mov	r0, r6
 8005736:	4639      	mov	r1, r7
 8005738:	ee10 2a10 	vmov	r2, s0
 800573c:	f7fa fdae 	bl	800029c <__adddf3>
 8005740:	4606      	mov	r6, r0
 8005742:	460f      	mov	r7, r1
 8005744:	ec47 6b10 	vmov	d0, r6, r7
 8005748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800574a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800574e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005752:	40d0      	lsrs	r0, r2
 8005754:	4206      	tst	r6, r0
 8005756:	d0f5      	beq.n	8005744 <round+0x60>
 8005758:	2201      	movs	r2, #1
 800575a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800575e:	fa02 f404 	lsl.w	r4, r2, r4
 8005762:	1931      	adds	r1, r6, r4
 8005764:	bf28      	it	cs
 8005766:	189b      	addcs	r3, r3, r2
 8005768:	ea21 0100 	bic.w	r1, r1, r0
 800576c:	461f      	mov	r7, r3
 800576e:	460e      	mov	r6, r1
 8005770:	e7e8      	b.n	8005744 <round+0x60>
 8005772:	bf00      	nop
 8005774:	000fffff 	.word	0x000fffff

08005778 <__errno>:
 8005778:	4b01      	ldr	r3, [pc, #4]	; (8005780 <__errno+0x8>)
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20000064 	.word	0x20000064

08005784 <__libc_init_array>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	4e0d      	ldr	r6, [pc, #52]	; (80057bc <__libc_init_array+0x38>)
 8005788:	4c0d      	ldr	r4, [pc, #52]	; (80057c0 <__libc_init_array+0x3c>)
 800578a:	1ba4      	subs	r4, r4, r6
 800578c:	10a4      	asrs	r4, r4, #2
 800578e:	2500      	movs	r5, #0
 8005790:	42a5      	cmp	r5, r4
 8005792:	d109      	bne.n	80057a8 <__libc_init_array+0x24>
 8005794:	4e0b      	ldr	r6, [pc, #44]	; (80057c4 <__libc_init_array+0x40>)
 8005796:	4c0c      	ldr	r4, [pc, #48]	; (80057c8 <__libc_init_array+0x44>)
 8005798:	f003 fd58 	bl	800924c <_init>
 800579c:	1ba4      	subs	r4, r4, r6
 800579e:	10a4      	asrs	r4, r4, #2
 80057a0:	2500      	movs	r5, #0
 80057a2:	42a5      	cmp	r5, r4
 80057a4:	d105      	bne.n	80057b2 <__libc_init_array+0x2e>
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057ac:	4798      	blx	r3
 80057ae:	3501      	adds	r5, #1
 80057b0:	e7ee      	b.n	8005790 <__libc_init_array+0xc>
 80057b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057b6:	4798      	blx	r3
 80057b8:	3501      	adds	r5, #1
 80057ba:	e7f2      	b.n	80057a2 <__libc_init_array+0x1e>
 80057bc:	08009a00 	.word	0x08009a00
 80057c0:	08009a00 	.word	0x08009a00
 80057c4:	08009a00 	.word	0x08009a00
 80057c8:	08009a04 	.word	0x08009a04

080057cc <__locale_ctype_ptr_l>:
 80057cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80057d0:	4770      	bx	lr

080057d2 <__ascii_mbtowc>:
 80057d2:	b082      	sub	sp, #8
 80057d4:	b901      	cbnz	r1, 80057d8 <__ascii_mbtowc+0x6>
 80057d6:	a901      	add	r1, sp, #4
 80057d8:	b142      	cbz	r2, 80057ec <__ascii_mbtowc+0x1a>
 80057da:	b14b      	cbz	r3, 80057f0 <__ascii_mbtowc+0x1e>
 80057dc:	7813      	ldrb	r3, [r2, #0]
 80057de:	600b      	str	r3, [r1, #0]
 80057e0:	7812      	ldrb	r2, [r2, #0]
 80057e2:	1c10      	adds	r0, r2, #0
 80057e4:	bf18      	it	ne
 80057e6:	2001      	movne	r0, #1
 80057e8:	b002      	add	sp, #8
 80057ea:	4770      	bx	lr
 80057ec:	4610      	mov	r0, r2
 80057ee:	e7fb      	b.n	80057e8 <__ascii_mbtowc+0x16>
 80057f0:	f06f 0001 	mvn.w	r0, #1
 80057f4:	e7f8      	b.n	80057e8 <__ascii_mbtowc+0x16>

080057f6 <memcpy>:
 80057f6:	b510      	push	{r4, lr}
 80057f8:	1e43      	subs	r3, r0, #1
 80057fa:	440a      	add	r2, r1
 80057fc:	4291      	cmp	r1, r2
 80057fe:	d100      	bne.n	8005802 <memcpy+0xc>
 8005800:	bd10      	pop	{r4, pc}
 8005802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800580a:	e7f7      	b.n	80057fc <memcpy+0x6>

0800580c <memset>:
 800580c:	4402      	add	r2, r0
 800580e:	4603      	mov	r3, r0
 8005810:	4293      	cmp	r3, r2
 8005812:	d100      	bne.n	8005816 <memset+0xa>
 8005814:	4770      	bx	lr
 8005816:	f803 1b01 	strb.w	r1, [r3], #1
 800581a:	e7f9      	b.n	8005810 <memset+0x4>

0800581c <__cvt>:
 800581c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	ec55 4b10 	vmov	r4, r5, d0
 8005824:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005826:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800582a:	2d00      	cmp	r5, #0
 800582c:	460e      	mov	r6, r1
 800582e:	4691      	mov	r9, r2
 8005830:	4619      	mov	r1, r3
 8005832:	bfb8      	it	lt
 8005834:	4622      	movlt	r2, r4
 8005836:	462b      	mov	r3, r5
 8005838:	f027 0720 	bic.w	r7, r7, #32
 800583c:	bfbb      	ittet	lt
 800583e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005842:	461d      	movlt	r5, r3
 8005844:	2300      	movge	r3, #0
 8005846:	232d      	movlt	r3, #45	; 0x2d
 8005848:	bfb8      	it	lt
 800584a:	4614      	movlt	r4, r2
 800584c:	2f46      	cmp	r7, #70	; 0x46
 800584e:	700b      	strb	r3, [r1, #0]
 8005850:	d004      	beq.n	800585c <__cvt+0x40>
 8005852:	2f45      	cmp	r7, #69	; 0x45
 8005854:	d100      	bne.n	8005858 <__cvt+0x3c>
 8005856:	3601      	adds	r6, #1
 8005858:	2102      	movs	r1, #2
 800585a:	e000      	b.n	800585e <__cvt+0x42>
 800585c:	2103      	movs	r1, #3
 800585e:	ab03      	add	r3, sp, #12
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	ab02      	add	r3, sp, #8
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	4632      	mov	r2, r6
 8005868:	4653      	mov	r3, sl
 800586a:	ec45 4b10 	vmov	d0, r4, r5
 800586e:	f001 fd83 	bl	8007378 <_dtoa_r>
 8005872:	2f47      	cmp	r7, #71	; 0x47
 8005874:	4680      	mov	r8, r0
 8005876:	d102      	bne.n	800587e <__cvt+0x62>
 8005878:	f019 0f01 	tst.w	r9, #1
 800587c:	d026      	beq.n	80058cc <__cvt+0xb0>
 800587e:	2f46      	cmp	r7, #70	; 0x46
 8005880:	eb08 0906 	add.w	r9, r8, r6
 8005884:	d111      	bne.n	80058aa <__cvt+0x8e>
 8005886:	f898 3000 	ldrb.w	r3, [r8]
 800588a:	2b30      	cmp	r3, #48	; 0x30
 800588c:	d10a      	bne.n	80058a4 <__cvt+0x88>
 800588e:	2200      	movs	r2, #0
 8005890:	2300      	movs	r3, #0
 8005892:	4620      	mov	r0, r4
 8005894:	4629      	mov	r1, r5
 8005896:	f7fb f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800589a:	b918      	cbnz	r0, 80058a4 <__cvt+0x88>
 800589c:	f1c6 0601 	rsb	r6, r6, #1
 80058a0:	f8ca 6000 	str.w	r6, [sl]
 80058a4:	f8da 3000 	ldr.w	r3, [sl]
 80058a8:	4499      	add	r9, r3
 80058aa:	2200      	movs	r2, #0
 80058ac:	2300      	movs	r3, #0
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7fb f911 	bl	8000ad8 <__aeabi_dcmpeq>
 80058b6:	b938      	cbnz	r0, 80058c8 <__cvt+0xac>
 80058b8:	2230      	movs	r2, #48	; 0x30
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	454b      	cmp	r3, r9
 80058be:	d205      	bcs.n	80058cc <__cvt+0xb0>
 80058c0:	1c59      	adds	r1, r3, #1
 80058c2:	9103      	str	r1, [sp, #12]
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e7f8      	b.n	80058ba <__cvt+0x9e>
 80058c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058d0:	eba3 0308 	sub.w	r3, r3, r8
 80058d4:	4640      	mov	r0, r8
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	b004      	add	sp, #16
 80058da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080058de <__exponent>:
 80058de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e0:	2900      	cmp	r1, #0
 80058e2:	4604      	mov	r4, r0
 80058e4:	bfba      	itte	lt
 80058e6:	4249      	neglt	r1, r1
 80058e8:	232d      	movlt	r3, #45	; 0x2d
 80058ea:	232b      	movge	r3, #43	; 0x2b
 80058ec:	2909      	cmp	r1, #9
 80058ee:	f804 2b02 	strb.w	r2, [r4], #2
 80058f2:	7043      	strb	r3, [r0, #1]
 80058f4:	dd20      	ble.n	8005938 <__exponent+0x5a>
 80058f6:	f10d 0307 	add.w	r3, sp, #7
 80058fa:	461f      	mov	r7, r3
 80058fc:	260a      	movs	r6, #10
 80058fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8005902:	fb06 1115 	mls	r1, r6, r5, r1
 8005906:	3130      	adds	r1, #48	; 0x30
 8005908:	2d09      	cmp	r5, #9
 800590a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800590e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005912:	4629      	mov	r1, r5
 8005914:	dc09      	bgt.n	800592a <__exponent+0x4c>
 8005916:	3130      	adds	r1, #48	; 0x30
 8005918:	3b02      	subs	r3, #2
 800591a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800591e:	42bb      	cmp	r3, r7
 8005920:	4622      	mov	r2, r4
 8005922:	d304      	bcc.n	800592e <__exponent+0x50>
 8005924:	1a10      	subs	r0, r2, r0
 8005926:	b003      	add	sp, #12
 8005928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800592a:	4613      	mov	r3, r2
 800592c:	e7e7      	b.n	80058fe <__exponent+0x20>
 800592e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005932:	f804 2b01 	strb.w	r2, [r4], #1
 8005936:	e7f2      	b.n	800591e <__exponent+0x40>
 8005938:	2330      	movs	r3, #48	; 0x30
 800593a:	4419      	add	r1, r3
 800593c:	7083      	strb	r3, [r0, #2]
 800593e:	1d02      	adds	r2, r0, #4
 8005940:	70c1      	strb	r1, [r0, #3]
 8005942:	e7ef      	b.n	8005924 <__exponent+0x46>

08005944 <_printf_float>:
 8005944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005948:	b08d      	sub	sp, #52	; 0x34
 800594a:	460c      	mov	r4, r1
 800594c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005950:	4616      	mov	r6, r2
 8005952:	461f      	mov	r7, r3
 8005954:	4605      	mov	r5, r0
 8005956:	f002 fdef 	bl	8008538 <_localeconv_r>
 800595a:	6803      	ldr	r3, [r0, #0]
 800595c:	9304      	str	r3, [sp, #16]
 800595e:	4618      	mov	r0, r3
 8005960:	f7fa fc3e 	bl	80001e0 <strlen>
 8005964:	2300      	movs	r3, #0
 8005966:	930a      	str	r3, [sp, #40]	; 0x28
 8005968:	f8d8 3000 	ldr.w	r3, [r8]
 800596c:	9005      	str	r0, [sp, #20]
 800596e:	3307      	adds	r3, #7
 8005970:	f023 0307 	bic.w	r3, r3, #7
 8005974:	f103 0208 	add.w	r2, r3, #8
 8005978:	f894 a018 	ldrb.w	sl, [r4, #24]
 800597c:	f8d4 b000 	ldr.w	fp, [r4]
 8005980:	f8c8 2000 	str.w	r2, [r8]
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800598c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005990:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005994:	9307      	str	r3, [sp, #28]
 8005996:	f8cd 8018 	str.w	r8, [sp, #24]
 800599a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800599e:	4ba7      	ldr	r3, [pc, #668]	; (8005c3c <_printf_float+0x2f8>)
 80059a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059a4:	f7fb f8ca 	bl	8000b3c <__aeabi_dcmpun>
 80059a8:	bb70      	cbnz	r0, 8005a08 <_printf_float+0xc4>
 80059aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059ae:	4ba3      	ldr	r3, [pc, #652]	; (8005c3c <_printf_float+0x2f8>)
 80059b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059b4:	f7fb f8a4 	bl	8000b00 <__aeabi_dcmple>
 80059b8:	bb30      	cbnz	r0, 8005a08 <_printf_float+0xc4>
 80059ba:	2200      	movs	r2, #0
 80059bc:	2300      	movs	r3, #0
 80059be:	4640      	mov	r0, r8
 80059c0:	4649      	mov	r1, r9
 80059c2:	f7fb f893 	bl	8000aec <__aeabi_dcmplt>
 80059c6:	b110      	cbz	r0, 80059ce <_printf_float+0x8a>
 80059c8:	232d      	movs	r3, #45	; 0x2d
 80059ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ce:	4a9c      	ldr	r2, [pc, #624]	; (8005c40 <_printf_float+0x2fc>)
 80059d0:	4b9c      	ldr	r3, [pc, #624]	; (8005c44 <_printf_float+0x300>)
 80059d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80059d6:	bf8c      	ite	hi
 80059d8:	4690      	movhi	r8, r2
 80059da:	4698      	movls	r8, r3
 80059dc:	2303      	movs	r3, #3
 80059de:	f02b 0204 	bic.w	r2, fp, #4
 80059e2:	6123      	str	r3, [r4, #16]
 80059e4:	6022      	str	r2, [r4, #0]
 80059e6:	f04f 0900 	mov.w	r9, #0
 80059ea:	9700      	str	r7, [sp, #0]
 80059ec:	4633      	mov	r3, r6
 80059ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80059f0:	4621      	mov	r1, r4
 80059f2:	4628      	mov	r0, r5
 80059f4:	f000 f9e6 	bl	8005dc4 <_printf_common>
 80059f8:	3001      	adds	r0, #1
 80059fa:	f040 808d 	bne.w	8005b18 <_printf_float+0x1d4>
 80059fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a02:	b00d      	add	sp, #52	; 0x34
 8005a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a08:	4642      	mov	r2, r8
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4649      	mov	r1, r9
 8005a10:	f7fb f894 	bl	8000b3c <__aeabi_dcmpun>
 8005a14:	b110      	cbz	r0, 8005a1c <_printf_float+0xd8>
 8005a16:	4a8c      	ldr	r2, [pc, #560]	; (8005c48 <_printf_float+0x304>)
 8005a18:	4b8c      	ldr	r3, [pc, #560]	; (8005c4c <_printf_float+0x308>)
 8005a1a:	e7da      	b.n	80059d2 <_printf_float+0x8e>
 8005a1c:	6861      	ldr	r1, [r4, #4]
 8005a1e:	1c4b      	adds	r3, r1, #1
 8005a20:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005a24:	a80a      	add	r0, sp, #40	; 0x28
 8005a26:	d13e      	bne.n	8005aa6 <_printf_float+0x162>
 8005a28:	2306      	movs	r3, #6
 8005a2a:	6063      	str	r3, [r4, #4]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005a32:	ab09      	add	r3, sp, #36	; 0x24
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	ec49 8b10 	vmov	d0, r8, r9
 8005a3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a3e:	6022      	str	r2, [r4, #0]
 8005a40:	f8cd a004 	str.w	sl, [sp, #4]
 8005a44:	6861      	ldr	r1, [r4, #4]
 8005a46:	4628      	mov	r0, r5
 8005a48:	f7ff fee8 	bl	800581c <__cvt>
 8005a4c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005a50:	2b47      	cmp	r3, #71	; 0x47
 8005a52:	4680      	mov	r8, r0
 8005a54:	d109      	bne.n	8005a6a <_printf_float+0x126>
 8005a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a58:	1cd8      	adds	r0, r3, #3
 8005a5a:	db02      	blt.n	8005a62 <_printf_float+0x11e>
 8005a5c:	6862      	ldr	r2, [r4, #4]
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	dd47      	ble.n	8005af2 <_printf_float+0x1ae>
 8005a62:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a66:	fa5f fa8a 	uxtb.w	sl, sl
 8005a6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a70:	d824      	bhi.n	8005abc <_printf_float+0x178>
 8005a72:	3901      	subs	r1, #1
 8005a74:	4652      	mov	r2, sl
 8005a76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a7a:	9109      	str	r1, [sp, #36]	; 0x24
 8005a7c:	f7ff ff2f 	bl	80058de <__exponent>
 8005a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a82:	1813      	adds	r3, r2, r0
 8005a84:	2a01      	cmp	r2, #1
 8005a86:	4681      	mov	r9, r0
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	dc02      	bgt.n	8005a92 <_printf_float+0x14e>
 8005a8c:	6822      	ldr	r2, [r4, #0]
 8005a8e:	07d1      	lsls	r1, r2, #31
 8005a90:	d501      	bpl.n	8005a96 <_printf_float+0x152>
 8005a92:	3301      	adds	r3, #1
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0a5      	beq.n	80059ea <_printf_float+0xa6>
 8005a9e:	232d      	movs	r3, #45	; 0x2d
 8005aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa4:	e7a1      	b.n	80059ea <_printf_float+0xa6>
 8005aa6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005aaa:	f000 8177 	beq.w	8005d9c <_printf_float+0x458>
 8005aae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005ab2:	d1bb      	bne.n	8005a2c <_printf_float+0xe8>
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	d1b9      	bne.n	8005a2c <_printf_float+0xe8>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e7b6      	b.n	8005a2a <_printf_float+0xe6>
 8005abc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005ac0:	d119      	bne.n	8005af6 <_printf_float+0x1b2>
 8005ac2:	2900      	cmp	r1, #0
 8005ac4:	6863      	ldr	r3, [r4, #4]
 8005ac6:	dd0c      	ble.n	8005ae2 <_printf_float+0x19e>
 8005ac8:	6121      	str	r1, [r4, #16]
 8005aca:	b913      	cbnz	r3, 8005ad2 <_printf_float+0x18e>
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	07d2      	lsls	r2, r2, #31
 8005ad0:	d502      	bpl.n	8005ad8 <_printf_float+0x194>
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	440b      	add	r3, r1
 8005ad6:	6123      	str	r3, [r4, #16]
 8005ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ada:	65a3      	str	r3, [r4, #88]	; 0x58
 8005adc:	f04f 0900 	mov.w	r9, #0
 8005ae0:	e7d9      	b.n	8005a96 <_printf_float+0x152>
 8005ae2:	b913      	cbnz	r3, 8005aea <_printf_float+0x1a6>
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	07d0      	lsls	r0, r2, #31
 8005ae8:	d501      	bpl.n	8005aee <_printf_float+0x1aa>
 8005aea:	3302      	adds	r3, #2
 8005aec:	e7f3      	b.n	8005ad6 <_printf_float+0x192>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e7f1      	b.n	8005ad6 <_printf_float+0x192>
 8005af2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005af6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005afa:	4293      	cmp	r3, r2
 8005afc:	db05      	blt.n	8005b0a <_printf_float+0x1c6>
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	07d1      	lsls	r1, r2, #31
 8005b04:	d5e8      	bpl.n	8005ad8 <_printf_float+0x194>
 8005b06:	3301      	adds	r3, #1
 8005b08:	e7e5      	b.n	8005ad6 <_printf_float+0x192>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bfd4      	ite	le
 8005b0e:	f1c3 0302 	rsble	r3, r3, #2
 8005b12:	2301      	movgt	r3, #1
 8005b14:	4413      	add	r3, r2
 8005b16:	e7de      	b.n	8005ad6 <_printf_float+0x192>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	055a      	lsls	r2, r3, #21
 8005b1c:	d407      	bmi.n	8005b2e <_printf_float+0x1ea>
 8005b1e:	6923      	ldr	r3, [r4, #16]
 8005b20:	4642      	mov	r2, r8
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d12b      	bne.n	8005b84 <_printf_float+0x240>
 8005b2c:	e767      	b.n	80059fe <_printf_float+0xba>
 8005b2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005b32:	f240 80dc 	bls.w	8005cee <_printf_float+0x3aa>
 8005b36:	2200      	movs	r2, #0
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b3e:	f7fa ffcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d033      	beq.n	8005bae <_printf_float+0x26a>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4a41      	ldr	r2, [pc, #260]	; (8005c50 <_printf_float+0x30c>)
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	47b8      	blx	r7
 8005b50:	3001      	adds	r0, #1
 8005b52:	f43f af54 	beq.w	80059fe <_printf_float+0xba>
 8005b56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	db02      	blt.n	8005b64 <_printf_float+0x220>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	07d8      	lsls	r0, r3, #31
 8005b62:	d50f      	bpl.n	8005b84 <_printf_float+0x240>
 8005b64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f43f af45 	beq.w	80059fe <_printf_float+0xba>
 8005b74:	f04f 0800 	mov.w	r8, #0
 8005b78:	f104 091a 	add.w	r9, r4, #26
 8005b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	4543      	cmp	r3, r8
 8005b82:	dc09      	bgt.n	8005b98 <_printf_float+0x254>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	079b      	lsls	r3, r3, #30
 8005b88:	f100 8103 	bmi.w	8005d92 <_printf_float+0x44e>
 8005b8c:	68e0      	ldr	r0, [r4, #12]
 8005b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b90:	4298      	cmp	r0, r3
 8005b92:	bfb8      	it	lt
 8005b94:	4618      	movlt	r0, r3
 8005b96:	e734      	b.n	8005a02 <_printf_float+0xbe>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	464a      	mov	r2, r9
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f43f af2b 	beq.w	80059fe <_printf_float+0xba>
 8005ba8:	f108 0801 	add.w	r8, r8, #1
 8005bac:	e7e6      	b.n	8005b7c <_printf_float+0x238>
 8005bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	dc2b      	bgt.n	8005c0c <_printf_float+0x2c8>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4a26      	ldr	r2, [pc, #152]	; (8005c50 <_printf_float+0x30c>)
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f af1d 	beq.w	80059fe <_printf_float+0xba>
 8005bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc6:	b923      	cbnz	r3, 8005bd2 <_printf_float+0x28e>
 8005bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bca:	b913      	cbnz	r3, 8005bd2 <_printf_float+0x28e>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07d9      	lsls	r1, r3, #31
 8005bd0:	d5d8      	bpl.n	8005b84 <_printf_float+0x240>
 8005bd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b8      	blx	r7
 8005bdc:	3001      	adds	r0, #1
 8005bde:	f43f af0e 	beq.w	80059fe <_printf_float+0xba>
 8005be2:	f04f 0900 	mov.w	r9, #0
 8005be6:	f104 0a1a 	add.w	sl, r4, #26
 8005bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bec:	425b      	negs	r3, r3
 8005bee:	454b      	cmp	r3, r9
 8005bf0:	dc01      	bgt.n	8005bf6 <_printf_float+0x2b2>
 8005bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf4:	e794      	b.n	8005b20 <_printf_float+0x1dc>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4652      	mov	r2, sl
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b8      	blx	r7
 8005c00:	3001      	adds	r0, #1
 8005c02:	f43f aefc 	beq.w	80059fe <_printf_float+0xba>
 8005c06:	f109 0901 	add.w	r9, r9, #1
 8005c0a:	e7ee      	b.n	8005bea <_printf_float+0x2a6>
 8005c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c10:	429a      	cmp	r2, r3
 8005c12:	bfa8      	it	ge
 8005c14:	461a      	movge	r2, r3
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	4691      	mov	r9, r2
 8005c1a:	dd07      	ble.n	8005c2c <_printf_float+0x2e8>
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4642      	mov	r2, r8
 8005c22:	4628      	mov	r0, r5
 8005c24:	47b8      	blx	r7
 8005c26:	3001      	adds	r0, #1
 8005c28:	f43f aee9 	beq.w	80059fe <_printf_float+0xba>
 8005c2c:	f104 031a 	add.w	r3, r4, #26
 8005c30:	f04f 0b00 	mov.w	fp, #0
 8005c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c38:	9306      	str	r3, [sp, #24]
 8005c3a:	e015      	b.n	8005c68 <_printf_float+0x324>
 8005c3c:	7fefffff 	.word	0x7fefffff
 8005c40:	080096ee 	.word	0x080096ee
 8005c44:	080096ea 	.word	0x080096ea
 8005c48:	080096f6 	.word	0x080096f6
 8005c4c:	080096f2 	.word	0x080096f2
 8005c50:	080096fa 	.word	0x080096fa
 8005c54:	2301      	movs	r3, #1
 8005c56:	9a06      	ldr	r2, [sp, #24]
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	f43f aecd 	beq.w	80059fe <_printf_float+0xba>
 8005c64:	f10b 0b01 	add.w	fp, fp, #1
 8005c68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c6c:	ebaa 0309 	sub.w	r3, sl, r9
 8005c70:	455b      	cmp	r3, fp
 8005c72:	dcef      	bgt.n	8005c54 <_printf_float+0x310>
 8005c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	44d0      	add	r8, sl
 8005c7c:	db15      	blt.n	8005caa <_printf_float+0x366>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	07da      	lsls	r2, r3, #31
 8005c82:	d412      	bmi.n	8005caa <_printf_float+0x366>
 8005c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c88:	eba3 020a 	sub.w	r2, r3, sl
 8005c8c:	eba3 0a01 	sub.w	sl, r3, r1
 8005c90:	4592      	cmp	sl, r2
 8005c92:	bfa8      	it	ge
 8005c94:	4692      	movge	sl, r2
 8005c96:	f1ba 0f00 	cmp.w	sl, #0
 8005c9a:	dc0e      	bgt.n	8005cba <_printf_float+0x376>
 8005c9c:	f04f 0800 	mov.w	r8, #0
 8005ca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ca4:	f104 091a 	add.w	r9, r4, #26
 8005ca8:	e019      	b.n	8005cde <_printf_float+0x39a>
 8005caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d1e5      	bne.n	8005c84 <_printf_float+0x340>
 8005cb8:	e6a1      	b.n	80059fe <_printf_float+0xba>
 8005cba:	4653      	mov	r3, sl
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d1e9      	bne.n	8005c9c <_printf_float+0x358>
 8005cc8:	e699      	b.n	80059fe <_printf_float+0xba>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	464a      	mov	r2, r9
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f ae92 	beq.w	80059fe <_printf_float+0xba>
 8005cda:	f108 0801 	add.w	r8, r8, #1
 8005cde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ce2:	1a9b      	subs	r3, r3, r2
 8005ce4:	eba3 030a 	sub.w	r3, r3, sl
 8005ce8:	4543      	cmp	r3, r8
 8005cea:	dcee      	bgt.n	8005cca <_printf_float+0x386>
 8005cec:	e74a      	b.n	8005b84 <_printf_float+0x240>
 8005cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cf0:	2a01      	cmp	r2, #1
 8005cf2:	dc01      	bgt.n	8005cf8 <_printf_float+0x3b4>
 8005cf4:	07db      	lsls	r3, r3, #31
 8005cf6:	d53a      	bpl.n	8005d6e <_printf_float+0x42a>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4642      	mov	r2, r8
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f ae7b 	beq.w	80059fe <_printf_float+0xba>
 8005d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	f108 0801 	add.w	r8, r8, #1
 8005d18:	f43f ae71 	beq.w	80059fe <_printf_float+0xba>
 8005d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f7fa fed5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d2e:	b9c8      	cbnz	r0, 8005d64 <_printf_float+0x420>
 8005d30:	4653      	mov	r3, sl
 8005d32:	4642      	mov	r2, r8
 8005d34:	4631      	mov	r1, r6
 8005d36:	4628      	mov	r0, r5
 8005d38:	47b8      	blx	r7
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d10e      	bne.n	8005d5c <_printf_float+0x418>
 8005d3e:	e65e      	b.n	80059fe <_printf_float+0xba>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4652      	mov	r2, sl
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f43f ae57 	beq.w	80059fe <_printf_float+0xba>
 8005d50:	f108 0801 	add.w	r8, r8, #1
 8005d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d56:	3b01      	subs	r3, #1
 8005d58:	4543      	cmp	r3, r8
 8005d5a:	dcf1      	bgt.n	8005d40 <_printf_float+0x3fc>
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d62:	e6de      	b.n	8005b22 <_printf_float+0x1de>
 8005d64:	f04f 0800 	mov.w	r8, #0
 8005d68:	f104 0a1a 	add.w	sl, r4, #26
 8005d6c:	e7f2      	b.n	8005d54 <_printf_float+0x410>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e7df      	b.n	8005d32 <_printf_float+0x3ee>
 8005d72:	2301      	movs	r3, #1
 8005d74:	464a      	mov	r2, r9
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	f43f ae3e 	beq.w	80059fe <_printf_float+0xba>
 8005d82:	f108 0801 	add.w	r8, r8, #1
 8005d86:	68e3      	ldr	r3, [r4, #12]
 8005d88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d8a:	1a9b      	subs	r3, r3, r2
 8005d8c:	4543      	cmp	r3, r8
 8005d8e:	dcf0      	bgt.n	8005d72 <_printf_float+0x42e>
 8005d90:	e6fc      	b.n	8005b8c <_printf_float+0x248>
 8005d92:	f04f 0800 	mov.w	r8, #0
 8005d96:	f104 0919 	add.w	r9, r4, #25
 8005d9a:	e7f4      	b.n	8005d86 <_printf_float+0x442>
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	f43f ae8b 	beq.w	8005ab8 <_printf_float+0x174>
 8005da2:	2300      	movs	r3, #0
 8005da4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005da8:	ab09      	add	r3, sp, #36	; 0x24
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	ec49 8b10 	vmov	d0, r8, r9
 8005db0:	6022      	str	r2, [r4, #0]
 8005db2:	f8cd a004 	str.w	sl, [sp, #4]
 8005db6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f7ff fd2e 	bl	800581c <__cvt>
 8005dc0:	4680      	mov	r8, r0
 8005dc2:	e648      	b.n	8005a56 <_printf_float+0x112>

08005dc4 <_printf_common>:
 8005dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	4691      	mov	r9, r2
 8005dca:	461f      	mov	r7, r3
 8005dcc:	688a      	ldr	r2, [r1, #8]
 8005dce:	690b      	ldr	r3, [r1, #16]
 8005dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	bfb8      	it	lt
 8005dd8:	4613      	movlt	r3, r2
 8005dda:	f8c9 3000 	str.w	r3, [r9]
 8005dde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005de2:	4606      	mov	r6, r0
 8005de4:	460c      	mov	r4, r1
 8005de6:	b112      	cbz	r2, 8005dee <_printf_common+0x2a>
 8005de8:	3301      	adds	r3, #1
 8005dea:	f8c9 3000 	str.w	r3, [r9]
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	0699      	lsls	r1, r3, #26
 8005df2:	bf42      	ittt	mi
 8005df4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005df8:	3302      	addmi	r3, #2
 8005dfa:	f8c9 3000 	strmi.w	r3, [r9]
 8005dfe:	6825      	ldr	r5, [r4, #0]
 8005e00:	f015 0506 	ands.w	r5, r5, #6
 8005e04:	d107      	bne.n	8005e16 <_printf_common+0x52>
 8005e06:	f104 0a19 	add.w	sl, r4, #25
 8005e0a:	68e3      	ldr	r3, [r4, #12]
 8005e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	42ab      	cmp	r3, r5
 8005e14:	dc28      	bgt.n	8005e68 <_printf_common+0xa4>
 8005e16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	3300      	adds	r3, #0
 8005e1e:	bf18      	it	ne
 8005e20:	2301      	movne	r3, #1
 8005e22:	0692      	lsls	r2, r2, #26
 8005e24:	d42d      	bmi.n	8005e82 <_printf_common+0xbe>
 8005e26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	47c0      	blx	r8
 8005e30:	3001      	adds	r0, #1
 8005e32:	d020      	beq.n	8005e76 <_printf_common+0xb2>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	68e5      	ldr	r5, [r4, #12]
 8005e38:	f8d9 2000 	ldr.w	r2, [r9]
 8005e3c:	f003 0306 	and.w	r3, r3, #6
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	bf08      	it	eq
 8005e44:	1aad      	subeq	r5, r5, r2
 8005e46:	68a3      	ldr	r3, [r4, #8]
 8005e48:	6922      	ldr	r2, [r4, #16]
 8005e4a:	bf0c      	ite	eq
 8005e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e50:	2500      	movne	r5, #0
 8005e52:	4293      	cmp	r3, r2
 8005e54:	bfc4      	itt	gt
 8005e56:	1a9b      	subgt	r3, r3, r2
 8005e58:	18ed      	addgt	r5, r5, r3
 8005e5a:	f04f 0900 	mov.w	r9, #0
 8005e5e:	341a      	adds	r4, #26
 8005e60:	454d      	cmp	r5, r9
 8005e62:	d11a      	bne.n	8005e9a <_printf_common+0xd6>
 8005e64:	2000      	movs	r0, #0
 8005e66:	e008      	b.n	8005e7a <_printf_common+0xb6>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4652      	mov	r2, sl
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	4630      	mov	r0, r6
 8005e70:	47c0      	blx	r8
 8005e72:	3001      	adds	r0, #1
 8005e74:	d103      	bne.n	8005e7e <_printf_common+0xba>
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7e:	3501      	adds	r5, #1
 8005e80:	e7c3      	b.n	8005e0a <_printf_common+0x46>
 8005e82:	18e1      	adds	r1, r4, r3
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	2030      	movs	r0, #48	; 0x30
 8005e88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e8c:	4422      	add	r2, r4
 8005e8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e96:	3302      	adds	r3, #2
 8005e98:	e7c5      	b.n	8005e26 <_printf_common+0x62>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	47c0      	blx	r8
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d0e6      	beq.n	8005e76 <_printf_common+0xb2>
 8005ea8:	f109 0901 	add.w	r9, r9, #1
 8005eac:	e7d8      	b.n	8005e60 <_printf_common+0x9c>
	...

08005eb0 <_printf_i>:
 8005eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005eb8:	460c      	mov	r4, r1
 8005eba:	7e09      	ldrb	r1, [r1, #24]
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	296e      	cmp	r1, #110	; 0x6e
 8005ec0:	4617      	mov	r7, r2
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	4698      	mov	r8, r3
 8005ec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ec8:	f000 80b3 	beq.w	8006032 <_printf_i+0x182>
 8005ecc:	d822      	bhi.n	8005f14 <_printf_i+0x64>
 8005ece:	2963      	cmp	r1, #99	; 0x63
 8005ed0:	d036      	beq.n	8005f40 <_printf_i+0x90>
 8005ed2:	d80a      	bhi.n	8005eea <_printf_i+0x3a>
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	f000 80b9 	beq.w	800604c <_printf_i+0x19c>
 8005eda:	2958      	cmp	r1, #88	; 0x58
 8005edc:	f000 8083 	beq.w	8005fe6 <_printf_i+0x136>
 8005ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ee8:	e032      	b.n	8005f50 <_printf_i+0xa0>
 8005eea:	2964      	cmp	r1, #100	; 0x64
 8005eec:	d001      	beq.n	8005ef2 <_printf_i+0x42>
 8005eee:	2969      	cmp	r1, #105	; 0x69
 8005ef0:	d1f6      	bne.n	8005ee0 <_printf_i+0x30>
 8005ef2:	6820      	ldr	r0, [r4, #0]
 8005ef4:	6813      	ldr	r3, [r2, #0]
 8005ef6:	0605      	lsls	r5, r0, #24
 8005ef8:	f103 0104 	add.w	r1, r3, #4
 8005efc:	d52a      	bpl.n	8005f54 <_printf_i+0xa4>
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6011      	str	r1, [r2, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	da03      	bge.n	8005f0e <_printf_i+0x5e>
 8005f06:	222d      	movs	r2, #45	; 0x2d
 8005f08:	425b      	negs	r3, r3
 8005f0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005f0e:	486f      	ldr	r0, [pc, #444]	; (80060cc <_printf_i+0x21c>)
 8005f10:	220a      	movs	r2, #10
 8005f12:	e039      	b.n	8005f88 <_printf_i+0xd8>
 8005f14:	2973      	cmp	r1, #115	; 0x73
 8005f16:	f000 809d 	beq.w	8006054 <_printf_i+0x1a4>
 8005f1a:	d808      	bhi.n	8005f2e <_printf_i+0x7e>
 8005f1c:	296f      	cmp	r1, #111	; 0x6f
 8005f1e:	d020      	beq.n	8005f62 <_printf_i+0xb2>
 8005f20:	2970      	cmp	r1, #112	; 0x70
 8005f22:	d1dd      	bne.n	8005ee0 <_printf_i+0x30>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	f043 0320 	orr.w	r3, r3, #32
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	e003      	b.n	8005f36 <_printf_i+0x86>
 8005f2e:	2975      	cmp	r1, #117	; 0x75
 8005f30:	d017      	beq.n	8005f62 <_printf_i+0xb2>
 8005f32:	2978      	cmp	r1, #120	; 0x78
 8005f34:	d1d4      	bne.n	8005ee0 <_printf_i+0x30>
 8005f36:	2378      	movs	r3, #120	; 0x78
 8005f38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f3c:	4864      	ldr	r0, [pc, #400]	; (80060d0 <_printf_i+0x220>)
 8005f3e:	e055      	b.n	8005fec <_printf_i+0x13c>
 8005f40:	6813      	ldr	r3, [r2, #0]
 8005f42:	1d19      	adds	r1, r3, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6011      	str	r1, [r2, #0]
 8005f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f50:	2301      	movs	r3, #1
 8005f52:	e08c      	b.n	800606e <_printf_i+0x1be>
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6011      	str	r1, [r2, #0]
 8005f58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f5c:	bf18      	it	ne
 8005f5e:	b21b      	sxthne	r3, r3
 8005f60:	e7cf      	b.n	8005f02 <_printf_i+0x52>
 8005f62:	6813      	ldr	r3, [r2, #0]
 8005f64:	6825      	ldr	r5, [r4, #0]
 8005f66:	1d18      	adds	r0, r3, #4
 8005f68:	6010      	str	r0, [r2, #0]
 8005f6a:	0628      	lsls	r0, r5, #24
 8005f6c:	d501      	bpl.n	8005f72 <_printf_i+0xc2>
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	e002      	b.n	8005f78 <_printf_i+0xc8>
 8005f72:	0668      	lsls	r0, r5, #25
 8005f74:	d5fb      	bpl.n	8005f6e <_printf_i+0xbe>
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	4854      	ldr	r0, [pc, #336]	; (80060cc <_printf_i+0x21c>)
 8005f7a:	296f      	cmp	r1, #111	; 0x6f
 8005f7c:	bf14      	ite	ne
 8005f7e:	220a      	movne	r2, #10
 8005f80:	2208      	moveq	r2, #8
 8005f82:	2100      	movs	r1, #0
 8005f84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f88:	6865      	ldr	r5, [r4, #4]
 8005f8a:	60a5      	str	r5, [r4, #8]
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	f2c0 8095 	blt.w	80060bc <_printf_i+0x20c>
 8005f92:	6821      	ldr	r1, [r4, #0]
 8005f94:	f021 0104 	bic.w	r1, r1, #4
 8005f98:	6021      	str	r1, [r4, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d13d      	bne.n	800601a <_printf_i+0x16a>
 8005f9e:	2d00      	cmp	r5, #0
 8005fa0:	f040 808e 	bne.w	80060c0 <_printf_i+0x210>
 8005fa4:	4665      	mov	r5, ip
 8005fa6:	2a08      	cmp	r2, #8
 8005fa8:	d10b      	bne.n	8005fc2 <_printf_i+0x112>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	07db      	lsls	r3, r3, #31
 8005fae:	d508      	bpl.n	8005fc2 <_printf_i+0x112>
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	6862      	ldr	r2, [r4, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	bfde      	ittt	le
 8005fb8:	2330      	movle	r3, #48	; 0x30
 8005fba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fbe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005fc2:	ebac 0305 	sub.w	r3, ip, r5
 8005fc6:	6123      	str	r3, [r4, #16]
 8005fc8:	f8cd 8000 	str.w	r8, [sp]
 8005fcc:	463b      	mov	r3, r7
 8005fce:	aa03      	add	r2, sp, #12
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7ff fef6 	bl	8005dc4 <_printf_common>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d14d      	bne.n	8006078 <_printf_i+0x1c8>
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fe0:	b005      	add	sp, #20
 8005fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fe6:	4839      	ldr	r0, [pc, #228]	; (80060cc <_printf_i+0x21c>)
 8005fe8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005fec:	6813      	ldr	r3, [r2, #0]
 8005fee:	6821      	ldr	r1, [r4, #0]
 8005ff0:	1d1d      	adds	r5, r3, #4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6015      	str	r5, [r2, #0]
 8005ff6:	060a      	lsls	r2, r1, #24
 8005ff8:	d50b      	bpl.n	8006012 <_printf_i+0x162>
 8005ffa:	07ca      	lsls	r2, r1, #31
 8005ffc:	bf44      	itt	mi
 8005ffe:	f041 0120 	orrmi.w	r1, r1, #32
 8006002:	6021      	strmi	r1, [r4, #0]
 8006004:	b91b      	cbnz	r3, 800600e <_printf_i+0x15e>
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	f022 0220 	bic.w	r2, r2, #32
 800600c:	6022      	str	r2, [r4, #0]
 800600e:	2210      	movs	r2, #16
 8006010:	e7b7      	b.n	8005f82 <_printf_i+0xd2>
 8006012:	064d      	lsls	r5, r1, #25
 8006014:	bf48      	it	mi
 8006016:	b29b      	uxthmi	r3, r3
 8006018:	e7ef      	b.n	8005ffa <_printf_i+0x14a>
 800601a:	4665      	mov	r5, ip
 800601c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006020:	fb02 3311 	mls	r3, r2, r1, r3
 8006024:	5cc3      	ldrb	r3, [r0, r3]
 8006026:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800602a:	460b      	mov	r3, r1
 800602c:	2900      	cmp	r1, #0
 800602e:	d1f5      	bne.n	800601c <_printf_i+0x16c>
 8006030:	e7b9      	b.n	8005fa6 <_printf_i+0xf6>
 8006032:	6813      	ldr	r3, [r2, #0]
 8006034:	6825      	ldr	r5, [r4, #0]
 8006036:	6961      	ldr	r1, [r4, #20]
 8006038:	1d18      	adds	r0, r3, #4
 800603a:	6010      	str	r0, [r2, #0]
 800603c:	0628      	lsls	r0, r5, #24
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	d501      	bpl.n	8006046 <_printf_i+0x196>
 8006042:	6019      	str	r1, [r3, #0]
 8006044:	e002      	b.n	800604c <_printf_i+0x19c>
 8006046:	066a      	lsls	r2, r5, #25
 8006048:	d5fb      	bpl.n	8006042 <_printf_i+0x192>
 800604a:	8019      	strh	r1, [r3, #0]
 800604c:	2300      	movs	r3, #0
 800604e:	6123      	str	r3, [r4, #16]
 8006050:	4665      	mov	r5, ip
 8006052:	e7b9      	b.n	8005fc8 <_printf_i+0x118>
 8006054:	6813      	ldr	r3, [r2, #0]
 8006056:	1d19      	adds	r1, r3, #4
 8006058:	6011      	str	r1, [r2, #0]
 800605a:	681d      	ldr	r5, [r3, #0]
 800605c:	6862      	ldr	r2, [r4, #4]
 800605e:	2100      	movs	r1, #0
 8006060:	4628      	mov	r0, r5
 8006062:	f7fa f8c5 	bl	80001f0 <memchr>
 8006066:	b108      	cbz	r0, 800606c <_printf_i+0x1bc>
 8006068:	1b40      	subs	r0, r0, r5
 800606a:	6060      	str	r0, [r4, #4]
 800606c:	6863      	ldr	r3, [r4, #4]
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	2300      	movs	r3, #0
 8006072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006076:	e7a7      	b.n	8005fc8 <_printf_i+0x118>
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	462a      	mov	r2, r5
 800607c:	4639      	mov	r1, r7
 800607e:	4630      	mov	r0, r6
 8006080:	47c0      	blx	r8
 8006082:	3001      	adds	r0, #1
 8006084:	d0aa      	beq.n	8005fdc <_printf_i+0x12c>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	079b      	lsls	r3, r3, #30
 800608a:	d413      	bmi.n	80060b4 <_printf_i+0x204>
 800608c:	68e0      	ldr	r0, [r4, #12]
 800608e:	9b03      	ldr	r3, [sp, #12]
 8006090:	4298      	cmp	r0, r3
 8006092:	bfb8      	it	lt
 8006094:	4618      	movlt	r0, r3
 8006096:	e7a3      	b.n	8005fe0 <_printf_i+0x130>
 8006098:	2301      	movs	r3, #1
 800609a:	464a      	mov	r2, r9
 800609c:	4639      	mov	r1, r7
 800609e:	4630      	mov	r0, r6
 80060a0:	47c0      	blx	r8
 80060a2:	3001      	adds	r0, #1
 80060a4:	d09a      	beq.n	8005fdc <_printf_i+0x12c>
 80060a6:	3501      	adds	r5, #1
 80060a8:	68e3      	ldr	r3, [r4, #12]
 80060aa:	9a03      	ldr	r2, [sp, #12]
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	42ab      	cmp	r3, r5
 80060b0:	dcf2      	bgt.n	8006098 <_printf_i+0x1e8>
 80060b2:	e7eb      	b.n	800608c <_printf_i+0x1dc>
 80060b4:	2500      	movs	r5, #0
 80060b6:	f104 0919 	add.w	r9, r4, #25
 80060ba:	e7f5      	b.n	80060a8 <_printf_i+0x1f8>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1ac      	bne.n	800601a <_printf_i+0x16a>
 80060c0:	7803      	ldrb	r3, [r0, #0]
 80060c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ca:	e76c      	b.n	8005fa6 <_printf_i+0xf6>
 80060cc:	080096fc 	.word	0x080096fc
 80060d0:	0800970d 	.word	0x0800970d

080060d4 <_scanf_float>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	469a      	mov	sl, r3
 80060da:	688b      	ldr	r3, [r1, #8]
 80060dc:	4616      	mov	r6, r2
 80060de:	1e5a      	subs	r2, r3, #1
 80060e0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80060e4:	b087      	sub	sp, #28
 80060e6:	bf83      	ittte	hi
 80060e8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80060ec:	189b      	addhi	r3, r3, r2
 80060ee:	9301      	strhi	r3, [sp, #4]
 80060f0:	2300      	movls	r3, #0
 80060f2:	bf86      	itte	hi
 80060f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80060f8:	608b      	strhi	r3, [r1, #8]
 80060fa:	9301      	strls	r3, [sp, #4]
 80060fc:	680b      	ldr	r3, [r1, #0]
 80060fe:	4688      	mov	r8, r1
 8006100:	f04f 0b00 	mov.w	fp, #0
 8006104:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006108:	f848 3b1c 	str.w	r3, [r8], #28
 800610c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006110:	4607      	mov	r7, r0
 8006112:	460c      	mov	r4, r1
 8006114:	4645      	mov	r5, r8
 8006116:	465a      	mov	r2, fp
 8006118:	46d9      	mov	r9, fp
 800611a:	f8cd b008 	str.w	fp, [sp, #8]
 800611e:	68a1      	ldr	r1, [r4, #8]
 8006120:	b181      	cbz	r1, 8006144 <_scanf_float+0x70>
 8006122:	6833      	ldr	r3, [r6, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b49      	cmp	r3, #73	; 0x49
 8006128:	d071      	beq.n	800620e <_scanf_float+0x13a>
 800612a:	d84d      	bhi.n	80061c8 <_scanf_float+0xf4>
 800612c:	2b39      	cmp	r3, #57	; 0x39
 800612e:	d840      	bhi.n	80061b2 <_scanf_float+0xde>
 8006130:	2b31      	cmp	r3, #49	; 0x31
 8006132:	f080 8088 	bcs.w	8006246 <_scanf_float+0x172>
 8006136:	2b2d      	cmp	r3, #45	; 0x2d
 8006138:	f000 8090 	beq.w	800625c <_scanf_float+0x188>
 800613c:	d815      	bhi.n	800616a <_scanf_float+0x96>
 800613e:	2b2b      	cmp	r3, #43	; 0x2b
 8006140:	f000 808c 	beq.w	800625c <_scanf_float+0x188>
 8006144:	f1b9 0f00 	cmp.w	r9, #0
 8006148:	d003      	beq.n	8006152 <_scanf_float+0x7e>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	3a01      	subs	r2, #1
 8006154:	2a01      	cmp	r2, #1
 8006156:	f200 80ea 	bhi.w	800632e <_scanf_float+0x25a>
 800615a:	4545      	cmp	r5, r8
 800615c:	f200 80dc 	bhi.w	8006318 <_scanf_float+0x244>
 8006160:	2601      	movs	r6, #1
 8006162:	4630      	mov	r0, r6
 8006164:	b007      	add	sp, #28
 8006166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616a:	2b2e      	cmp	r3, #46	; 0x2e
 800616c:	f000 809f 	beq.w	80062ae <_scanf_float+0x1da>
 8006170:	2b30      	cmp	r3, #48	; 0x30
 8006172:	d1e7      	bne.n	8006144 <_scanf_float+0x70>
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	f410 7f80 	tst.w	r0, #256	; 0x100
 800617a:	d064      	beq.n	8006246 <_scanf_float+0x172>
 800617c:	9b01      	ldr	r3, [sp, #4]
 800617e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006182:	6020      	str	r0, [r4, #0]
 8006184:	f109 0901 	add.w	r9, r9, #1
 8006188:	b11b      	cbz	r3, 8006192 <_scanf_float+0xbe>
 800618a:	3b01      	subs	r3, #1
 800618c:	3101      	adds	r1, #1
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	60a1      	str	r1, [r4, #8]
 8006192:	68a3      	ldr	r3, [r4, #8]
 8006194:	3b01      	subs	r3, #1
 8006196:	60a3      	str	r3, [r4, #8]
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	3301      	adds	r3, #1
 800619c:	6123      	str	r3, [r4, #16]
 800619e:	6873      	ldr	r3, [r6, #4]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	6073      	str	r3, [r6, #4]
 80061a6:	f340 80ac 	ble.w	8006302 <_scanf_float+0x22e>
 80061aa:	6833      	ldr	r3, [r6, #0]
 80061ac:	3301      	adds	r3, #1
 80061ae:	6033      	str	r3, [r6, #0]
 80061b0:	e7b5      	b.n	800611e <_scanf_float+0x4a>
 80061b2:	2b45      	cmp	r3, #69	; 0x45
 80061b4:	f000 8085 	beq.w	80062c2 <_scanf_float+0x1ee>
 80061b8:	2b46      	cmp	r3, #70	; 0x46
 80061ba:	d06a      	beq.n	8006292 <_scanf_float+0x1be>
 80061bc:	2b41      	cmp	r3, #65	; 0x41
 80061be:	d1c1      	bne.n	8006144 <_scanf_float+0x70>
 80061c0:	2a01      	cmp	r2, #1
 80061c2:	d1bf      	bne.n	8006144 <_scanf_float+0x70>
 80061c4:	2202      	movs	r2, #2
 80061c6:	e046      	b.n	8006256 <_scanf_float+0x182>
 80061c8:	2b65      	cmp	r3, #101	; 0x65
 80061ca:	d07a      	beq.n	80062c2 <_scanf_float+0x1ee>
 80061cc:	d818      	bhi.n	8006200 <_scanf_float+0x12c>
 80061ce:	2b54      	cmp	r3, #84	; 0x54
 80061d0:	d066      	beq.n	80062a0 <_scanf_float+0x1cc>
 80061d2:	d811      	bhi.n	80061f8 <_scanf_float+0x124>
 80061d4:	2b4e      	cmp	r3, #78	; 0x4e
 80061d6:	d1b5      	bne.n	8006144 <_scanf_float+0x70>
 80061d8:	2a00      	cmp	r2, #0
 80061da:	d146      	bne.n	800626a <_scanf_float+0x196>
 80061dc:	f1b9 0f00 	cmp.w	r9, #0
 80061e0:	d145      	bne.n	800626e <_scanf_float+0x19a>
 80061e2:	6821      	ldr	r1, [r4, #0]
 80061e4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80061e8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80061ec:	d13f      	bne.n	800626e <_scanf_float+0x19a>
 80061ee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80061f2:	6021      	str	r1, [r4, #0]
 80061f4:	2201      	movs	r2, #1
 80061f6:	e02e      	b.n	8006256 <_scanf_float+0x182>
 80061f8:	2b59      	cmp	r3, #89	; 0x59
 80061fa:	d01e      	beq.n	800623a <_scanf_float+0x166>
 80061fc:	2b61      	cmp	r3, #97	; 0x61
 80061fe:	e7de      	b.n	80061be <_scanf_float+0xea>
 8006200:	2b6e      	cmp	r3, #110	; 0x6e
 8006202:	d0e9      	beq.n	80061d8 <_scanf_float+0x104>
 8006204:	d815      	bhi.n	8006232 <_scanf_float+0x15e>
 8006206:	2b66      	cmp	r3, #102	; 0x66
 8006208:	d043      	beq.n	8006292 <_scanf_float+0x1be>
 800620a:	2b69      	cmp	r3, #105	; 0x69
 800620c:	d19a      	bne.n	8006144 <_scanf_float+0x70>
 800620e:	f1bb 0f00 	cmp.w	fp, #0
 8006212:	d138      	bne.n	8006286 <_scanf_float+0x1b2>
 8006214:	f1b9 0f00 	cmp.w	r9, #0
 8006218:	d197      	bne.n	800614a <_scanf_float+0x76>
 800621a:	6821      	ldr	r1, [r4, #0]
 800621c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006220:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006224:	d195      	bne.n	8006152 <_scanf_float+0x7e>
 8006226:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800622a:	6021      	str	r1, [r4, #0]
 800622c:	f04f 0b01 	mov.w	fp, #1
 8006230:	e011      	b.n	8006256 <_scanf_float+0x182>
 8006232:	2b74      	cmp	r3, #116	; 0x74
 8006234:	d034      	beq.n	80062a0 <_scanf_float+0x1cc>
 8006236:	2b79      	cmp	r3, #121	; 0x79
 8006238:	d184      	bne.n	8006144 <_scanf_float+0x70>
 800623a:	f1bb 0f07 	cmp.w	fp, #7
 800623e:	d181      	bne.n	8006144 <_scanf_float+0x70>
 8006240:	f04f 0b08 	mov.w	fp, #8
 8006244:	e007      	b.n	8006256 <_scanf_float+0x182>
 8006246:	eb12 0f0b 	cmn.w	r2, fp
 800624a:	f47f af7b 	bne.w	8006144 <_scanf_float+0x70>
 800624e:	6821      	ldr	r1, [r4, #0]
 8006250:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006254:	6021      	str	r1, [r4, #0]
 8006256:	702b      	strb	r3, [r5, #0]
 8006258:	3501      	adds	r5, #1
 800625a:	e79a      	b.n	8006192 <_scanf_float+0xbe>
 800625c:	6821      	ldr	r1, [r4, #0]
 800625e:	0608      	lsls	r0, r1, #24
 8006260:	f57f af70 	bpl.w	8006144 <_scanf_float+0x70>
 8006264:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006268:	e7f4      	b.n	8006254 <_scanf_float+0x180>
 800626a:	2a02      	cmp	r2, #2
 800626c:	d047      	beq.n	80062fe <_scanf_float+0x22a>
 800626e:	f1bb 0f01 	cmp.w	fp, #1
 8006272:	d003      	beq.n	800627c <_scanf_float+0x1a8>
 8006274:	f1bb 0f04 	cmp.w	fp, #4
 8006278:	f47f af64 	bne.w	8006144 <_scanf_float+0x70>
 800627c:	f10b 0b01 	add.w	fp, fp, #1
 8006280:	fa5f fb8b 	uxtb.w	fp, fp
 8006284:	e7e7      	b.n	8006256 <_scanf_float+0x182>
 8006286:	f1bb 0f03 	cmp.w	fp, #3
 800628a:	d0f7      	beq.n	800627c <_scanf_float+0x1a8>
 800628c:	f1bb 0f05 	cmp.w	fp, #5
 8006290:	e7f2      	b.n	8006278 <_scanf_float+0x1a4>
 8006292:	f1bb 0f02 	cmp.w	fp, #2
 8006296:	f47f af55 	bne.w	8006144 <_scanf_float+0x70>
 800629a:	f04f 0b03 	mov.w	fp, #3
 800629e:	e7da      	b.n	8006256 <_scanf_float+0x182>
 80062a0:	f1bb 0f06 	cmp.w	fp, #6
 80062a4:	f47f af4e 	bne.w	8006144 <_scanf_float+0x70>
 80062a8:	f04f 0b07 	mov.w	fp, #7
 80062ac:	e7d3      	b.n	8006256 <_scanf_float+0x182>
 80062ae:	6821      	ldr	r1, [r4, #0]
 80062b0:	0588      	lsls	r0, r1, #22
 80062b2:	f57f af47 	bpl.w	8006144 <_scanf_float+0x70>
 80062b6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80062ba:	6021      	str	r1, [r4, #0]
 80062bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80062c0:	e7c9      	b.n	8006256 <_scanf_float+0x182>
 80062c2:	6821      	ldr	r1, [r4, #0]
 80062c4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80062c8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80062cc:	d006      	beq.n	80062dc <_scanf_float+0x208>
 80062ce:	0548      	lsls	r0, r1, #21
 80062d0:	f57f af38 	bpl.w	8006144 <_scanf_float+0x70>
 80062d4:	f1b9 0f00 	cmp.w	r9, #0
 80062d8:	f43f af3b 	beq.w	8006152 <_scanf_float+0x7e>
 80062dc:	0588      	lsls	r0, r1, #22
 80062de:	bf58      	it	pl
 80062e0:	9802      	ldrpl	r0, [sp, #8]
 80062e2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80062e6:	bf58      	it	pl
 80062e8:	eba9 0000 	subpl.w	r0, r9, r0
 80062ec:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80062f0:	bf58      	it	pl
 80062f2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80062f6:	6021      	str	r1, [r4, #0]
 80062f8:	f04f 0900 	mov.w	r9, #0
 80062fc:	e7ab      	b.n	8006256 <_scanf_float+0x182>
 80062fe:	2203      	movs	r2, #3
 8006300:	e7a9      	b.n	8006256 <_scanf_float+0x182>
 8006302:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006306:	9205      	str	r2, [sp, #20]
 8006308:	4631      	mov	r1, r6
 800630a:	4638      	mov	r0, r7
 800630c:	4798      	blx	r3
 800630e:	9a05      	ldr	r2, [sp, #20]
 8006310:	2800      	cmp	r0, #0
 8006312:	f43f af04 	beq.w	800611e <_scanf_float+0x4a>
 8006316:	e715      	b.n	8006144 <_scanf_float+0x70>
 8006318:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800631c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006320:	4632      	mov	r2, r6
 8006322:	4638      	mov	r0, r7
 8006324:	4798      	blx	r3
 8006326:	6923      	ldr	r3, [r4, #16]
 8006328:	3b01      	subs	r3, #1
 800632a:	6123      	str	r3, [r4, #16]
 800632c:	e715      	b.n	800615a <_scanf_float+0x86>
 800632e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006332:	2b06      	cmp	r3, #6
 8006334:	d80a      	bhi.n	800634c <_scanf_float+0x278>
 8006336:	f1bb 0f02 	cmp.w	fp, #2
 800633a:	d968      	bls.n	800640e <_scanf_float+0x33a>
 800633c:	f1ab 0b03 	sub.w	fp, fp, #3
 8006340:	fa5f fb8b 	uxtb.w	fp, fp
 8006344:	eba5 0b0b 	sub.w	fp, r5, fp
 8006348:	455d      	cmp	r5, fp
 800634a:	d14b      	bne.n	80063e4 <_scanf_float+0x310>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	05da      	lsls	r2, r3, #23
 8006350:	d51f      	bpl.n	8006392 <_scanf_float+0x2be>
 8006352:	055b      	lsls	r3, r3, #21
 8006354:	d468      	bmi.n	8006428 <_scanf_float+0x354>
 8006356:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	2965      	cmp	r1, #101	; 0x65
 800635e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006362:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8006366:	6123      	str	r3, [r4, #16]
 8006368:	d00d      	beq.n	8006386 <_scanf_float+0x2b2>
 800636a:	2945      	cmp	r1, #69	; 0x45
 800636c:	d00b      	beq.n	8006386 <_scanf_float+0x2b2>
 800636e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006372:	4632      	mov	r2, r6
 8006374:	4638      	mov	r0, r7
 8006376:	4798      	blx	r3
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800637e:	3b01      	subs	r3, #1
 8006380:	f1a5 0b02 	sub.w	fp, r5, #2
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800638a:	4632      	mov	r2, r6
 800638c:	4638      	mov	r0, r7
 800638e:	4798      	blx	r3
 8006390:	465d      	mov	r5, fp
 8006392:	6826      	ldr	r6, [r4, #0]
 8006394:	f016 0610 	ands.w	r6, r6, #16
 8006398:	d17a      	bne.n	8006490 <_scanf_float+0x3bc>
 800639a:	702e      	strb	r6, [r5, #0]
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a6:	d142      	bne.n	800642e <_scanf_float+0x35a>
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	eba9 0303 	sub.w	r3, r9, r3
 80063ae:	425a      	negs	r2, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d149      	bne.n	8006448 <_scanf_float+0x374>
 80063b4:	2200      	movs	r2, #0
 80063b6:	4641      	mov	r1, r8
 80063b8:	4638      	mov	r0, r7
 80063ba:	f000 fea5 	bl	8007108 <_strtod_r>
 80063be:	6825      	ldr	r5, [r4, #0]
 80063c0:	f8da 3000 	ldr.w	r3, [sl]
 80063c4:	f015 0f02 	tst.w	r5, #2
 80063c8:	f103 0204 	add.w	r2, r3, #4
 80063cc:	ec59 8b10 	vmov	r8, r9, d0
 80063d0:	f8ca 2000 	str.w	r2, [sl]
 80063d4:	d043      	beq.n	800645e <_scanf_float+0x38a>
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	e9c3 8900 	strd	r8, r9, [r3]
 80063dc:	68e3      	ldr	r3, [r4, #12]
 80063de:	3301      	adds	r3, #1
 80063e0:	60e3      	str	r3, [r4, #12]
 80063e2:	e6be      	b.n	8006162 <_scanf_float+0x8e>
 80063e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80063ec:	4632      	mov	r2, r6
 80063ee:	4638      	mov	r0, r7
 80063f0:	4798      	blx	r3
 80063f2:	6923      	ldr	r3, [r4, #16]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	6123      	str	r3, [r4, #16]
 80063f8:	e7a6      	b.n	8006348 <_scanf_float+0x274>
 80063fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063fe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006402:	4632      	mov	r2, r6
 8006404:	4638      	mov	r0, r7
 8006406:	4798      	blx	r3
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	3b01      	subs	r3, #1
 800640c:	6123      	str	r3, [r4, #16]
 800640e:	4545      	cmp	r5, r8
 8006410:	d8f3      	bhi.n	80063fa <_scanf_float+0x326>
 8006412:	e6a5      	b.n	8006160 <_scanf_float+0x8c>
 8006414:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006418:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800641c:	4632      	mov	r2, r6
 800641e:	4638      	mov	r0, r7
 8006420:	4798      	blx	r3
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	3b01      	subs	r3, #1
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	4545      	cmp	r5, r8
 800642a:	d8f3      	bhi.n	8006414 <_scanf_float+0x340>
 800642c:	e698      	b.n	8006160 <_scanf_float+0x8c>
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0bf      	beq.n	80063b4 <_scanf_float+0x2e0>
 8006434:	9904      	ldr	r1, [sp, #16]
 8006436:	230a      	movs	r3, #10
 8006438:	4632      	mov	r2, r6
 800643a:	3101      	adds	r1, #1
 800643c:	4638      	mov	r0, r7
 800643e:	f000 feef 	bl	8007220 <_strtol_r>
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	9d04      	ldr	r5, [sp, #16]
 8006446:	1ac2      	subs	r2, r0, r3
 8006448:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800644c:	429d      	cmp	r5, r3
 800644e:	bf28      	it	cs
 8006450:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006454:	490f      	ldr	r1, [pc, #60]	; (8006494 <_scanf_float+0x3c0>)
 8006456:	4628      	mov	r0, r5
 8006458:	f000 f824 	bl	80064a4 <siprintf>
 800645c:	e7aa      	b.n	80063b4 <_scanf_float+0x2e0>
 800645e:	f015 0504 	ands.w	r5, r5, #4
 8006462:	d1b8      	bne.n	80063d6 <_scanf_float+0x302>
 8006464:	681f      	ldr	r7, [r3, #0]
 8006466:	ee10 2a10 	vmov	r2, s0
 800646a:	464b      	mov	r3, r9
 800646c:	ee10 0a10 	vmov	r0, s0
 8006470:	4649      	mov	r1, r9
 8006472:	f7fa fb63 	bl	8000b3c <__aeabi_dcmpun>
 8006476:	b128      	cbz	r0, 8006484 <_scanf_float+0x3b0>
 8006478:	4628      	mov	r0, r5
 800647a:	f000 f80d 	bl	8006498 <nanf>
 800647e:	ed87 0a00 	vstr	s0, [r7]
 8006482:	e7ab      	b.n	80063dc <_scanf_float+0x308>
 8006484:	4640      	mov	r0, r8
 8006486:	4649      	mov	r1, r9
 8006488:	f7fa fbb6 	bl	8000bf8 <__aeabi_d2f>
 800648c:	6038      	str	r0, [r7, #0]
 800648e:	e7a5      	b.n	80063dc <_scanf_float+0x308>
 8006490:	2600      	movs	r6, #0
 8006492:	e666      	b.n	8006162 <_scanf_float+0x8e>
 8006494:	0800971e 	.word	0x0800971e

08006498 <nanf>:
 8006498:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80064a0 <nanf+0x8>
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	7fc00000 	.word	0x7fc00000

080064a4 <siprintf>:
 80064a4:	b40e      	push	{r1, r2, r3}
 80064a6:	b500      	push	{lr}
 80064a8:	b09c      	sub	sp, #112	; 0x70
 80064aa:	ab1d      	add	r3, sp, #116	; 0x74
 80064ac:	9002      	str	r0, [sp, #8]
 80064ae:	9006      	str	r0, [sp, #24]
 80064b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064b4:	4809      	ldr	r0, [pc, #36]	; (80064dc <siprintf+0x38>)
 80064b6:	9107      	str	r1, [sp, #28]
 80064b8:	9104      	str	r1, [sp, #16]
 80064ba:	4909      	ldr	r1, [pc, #36]	; (80064e0 <siprintf+0x3c>)
 80064bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c0:	9105      	str	r1, [sp, #20]
 80064c2:	6800      	ldr	r0, [r0, #0]
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	a902      	add	r1, sp, #8
 80064c8:	f002 fd5c 	bl	8008f84 <_svfiprintf_r>
 80064cc:	9b02      	ldr	r3, [sp, #8]
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	b01c      	add	sp, #112	; 0x70
 80064d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d8:	b003      	add	sp, #12
 80064da:	4770      	bx	lr
 80064dc:	20000064 	.word	0x20000064
 80064e0:	ffff0208 	.word	0xffff0208

080064e4 <sulp>:
 80064e4:	b570      	push	{r4, r5, r6, lr}
 80064e6:	4604      	mov	r4, r0
 80064e8:	460d      	mov	r5, r1
 80064ea:	ec45 4b10 	vmov	d0, r4, r5
 80064ee:	4616      	mov	r6, r2
 80064f0:	f002 fb04 	bl	8008afc <__ulp>
 80064f4:	ec51 0b10 	vmov	r0, r1, d0
 80064f8:	b17e      	cbz	r6, 800651a <sulp+0x36>
 80064fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80064fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006502:	2b00      	cmp	r3, #0
 8006504:	dd09      	ble.n	800651a <sulp+0x36>
 8006506:	051b      	lsls	r3, r3, #20
 8006508:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800650c:	2400      	movs	r4, #0
 800650e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006512:	4622      	mov	r2, r4
 8006514:	462b      	mov	r3, r5
 8006516:	f7fa f877 	bl	8000608 <__aeabi_dmul>
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	0000      	movs	r0, r0
	...

08006520 <_strtod_l>:
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	461f      	mov	r7, r3
 8006526:	b0a1      	sub	sp, #132	; 0x84
 8006528:	2300      	movs	r3, #0
 800652a:	4681      	mov	r9, r0
 800652c:	4638      	mov	r0, r7
 800652e:	460e      	mov	r6, r1
 8006530:	9217      	str	r2, [sp, #92]	; 0x5c
 8006532:	931c      	str	r3, [sp, #112]	; 0x70
 8006534:	f001 fffe 	bl	8008534 <__localeconv_l>
 8006538:	4680      	mov	r8, r0
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	f7f9 fe50 	bl	80001e0 <strlen>
 8006540:	f04f 0a00 	mov.w	sl, #0
 8006544:	4604      	mov	r4, r0
 8006546:	f04f 0b00 	mov.w	fp, #0
 800654a:	961b      	str	r6, [sp, #108]	; 0x6c
 800654c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800654e:	781a      	ldrb	r2, [r3, #0]
 8006550:	2a0d      	cmp	r2, #13
 8006552:	d832      	bhi.n	80065ba <_strtod_l+0x9a>
 8006554:	2a09      	cmp	r2, #9
 8006556:	d236      	bcs.n	80065c6 <_strtod_l+0xa6>
 8006558:	2a00      	cmp	r2, #0
 800655a:	d03e      	beq.n	80065da <_strtod_l+0xba>
 800655c:	2300      	movs	r3, #0
 800655e:	930d      	str	r3, [sp, #52]	; 0x34
 8006560:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006562:	782b      	ldrb	r3, [r5, #0]
 8006564:	2b30      	cmp	r3, #48	; 0x30
 8006566:	f040 80ac 	bne.w	80066c2 <_strtod_l+0x1a2>
 800656a:	786b      	ldrb	r3, [r5, #1]
 800656c:	2b58      	cmp	r3, #88	; 0x58
 800656e:	d001      	beq.n	8006574 <_strtod_l+0x54>
 8006570:	2b78      	cmp	r3, #120	; 0x78
 8006572:	d167      	bne.n	8006644 <_strtod_l+0x124>
 8006574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	ab1c      	add	r3, sp, #112	; 0x70
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	9702      	str	r7, [sp, #8]
 800657e:	ab1d      	add	r3, sp, #116	; 0x74
 8006580:	4a88      	ldr	r2, [pc, #544]	; (80067a4 <_strtod_l+0x284>)
 8006582:	a91b      	add	r1, sp, #108	; 0x6c
 8006584:	4648      	mov	r0, r9
 8006586:	f001 fcfe 	bl	8007f86 <__gethex>
 800658a:	f010 0407 	ands.w	r4, r0, #7
 800658e:	4606      	mov	r6, r0
 8006590:	d005      	beq.n	800659e <_strtod_l+0x7e>
 8006592:	2c06      	cmp	r4, #6
 8006594:	d12b      	bne.n	80065ee <_strtod_l+0xce>
 8006596:	3501      	adds	r5, #1
 8006598:	2300      	movs	r3, #0
 800659a:	951b      	str	r5, [sp, #108]	; 0x6c
 800659c:	930d      	str	r3, [sp, #52]	; 0x34
 800659e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f040 859a 	bne.w	80070da <_strtod_l+0xbba>
 80065a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065a8:	b1e3      	cbz	r3, 80065e4 <_strtod_l+0xc4>
 80065aa:	4652      	mov	r2, sl
 80065ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80065b0:	ec43 2b10 	vmov	d0, r2, r3
 80065b4:	b021      	add	sp, #132	; 0x84
 80065b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ba:	2a2b      	cmp	r2, #43	; 0x2b
 80065bc:	d015      	beq.n	80065ea <_strtod_l+0xca>
 80065be:	2a2d      	cmp	r2, #45	; 0x2d
 80065c0:	d004      	beq.n	80065cc <_strtod_l+0xac>
 80065c2:	2a20      	cmp	r2, #32
 80065c4:	d1ca      	bne.n	800655c <_strtod_l+0x3c>
 80065c6:	3301      	adds	r3, #1
 80065c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80065ca:	e7bf      	b.n	800654c <_strtod_l+0x2c>
 80065cc:	2201      	movs	r2, #1
 80065ce:	920d      	str	r2, [sp, #52]	; 0x34
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1c2      	bne.n	8006560 <_strtod_l+0x40>
 80065da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 8579 	bne.w	80070d6 <_strtod_l+0xbb6>
 80065e4:	4652      	mov	r2, sl
 80065e6:	465b      	mov	r3, fp
 80065e8:	e7e2      	b.n	80065b0 <_strtod_l+0x90>
 80065ea:	2200      	movs	r2, #0
 80065ec:	e7ef      	b.n	80065ce <_strtod_l+0xae>
 80065ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80065f0:	b13a      	cbz	r2, 8006602 <_strtod_l+0xe2>
 80065f2:	2135      	movs	r1, #53	; 0x35
 80065f4:	a81e      	add	r0, sp, #120	; 0x78
 80065f6:	f002 fb79 	bl	8008cec <__copybits>
 80065fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80065fc:	4648      	mov	r0, r9
 80065fe:	f001 ffe5 	bl	80085cc <_Bfree>
 8006602:	3c01      	subs	r4, #1
 8006604:	2c04      	cmp	r4, #4
 8006606:	d806      	bhi.n	8006616 <_strtod_l+0xf6>
 8006608:	e8df f004 	tbb	[pc, r4]
 800660c:	1714030a 	.word	0x1714030a
 8006610:	0a          	.byte	0x0a
 8006611:	00          	.byte	0x00
 8006612:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006616:	0730      	lsls	r0, r6, #28
 8006618:	d5c1      	bpl.n	800659e <_strtod_l+0x7e>
 800661a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800661e:	e7be      	b.n	800659e <_strtod_l+0x7e>
 8006620:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006624:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006626:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800662a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800662e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006632:	e7f0      	b.n	8006616 <_strtod_l+0xf6>
 8006634:	f8df b170 	ldr.w	fp, [pc, #368]	; 80067a8 <_strtod_l+0x288>
 8006638:	e7ed      	b.n	8006616 <_strtod_l+0xf6>
 800663a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800663e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006642:	e7e8      	b.n	8006616 <_strtod_l+0xf6>
 8006644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	921b      	str	r2, [sp, #108]	; 0x6c
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b30      	cmp	r3, #48	; 0x30
 800664e:	d0f9      	beq.n	8006644 <_strtod_l+0x124>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0a4      	beq.n	800659e <_strtod_l+0x7e>
 8006654:	2301      	movs	r3, #1
 8006656:	2500      	movs	r5, #0
 8006658:	9306      	str	r3, [sp, #24]
 800665a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800665c:	9308      	str	r3, [sp, #32]
 800665e:	9507      	str	r5, [sp, #28]
 8006660:	9505      	str	r5, [sp, #20]
 8006662:	220a      	movs	r2, #10
 8006664:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006666:	7807      	ldrb	r7, [r0, #0]
 8006668:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800666c:	b2d9      	uxtb	r1, r3
 800666e:	2909      	cmp	r1, #9
 8006670:	d929      	bls.n	80066c6 <_strtod_l+0x1a6>
 8006672:	4622      	mov	r2, r4
 8006674:	f8d8 1000 	ldr.w	r1, [r8]
 8006678:	f002 fd8c 	bl	8009194 <strncmp>
 800667c:	2800      	cmp	r0, #0
 800667e:	d031      	beq.n	80066e4 <_strtod_l+0x1c4>
 8006680:	2000      	movs	r0, #0
 8006682:	9c05      	ldr	r4, [sp, #20]
 8006684:	9004      	str	r0, [sp, #16]
 8006686:	463b      	mov	r3, r7
 8006688:	4602      	mov	r2, r0
 800668a:	2b65      	cmp	r3, #101	; 0x65
 800668c:	d001      	beq.n	8006692 <_strtod_l+0x172>
 800668e:	2b45      	cmp	r3, #69	; 0x45
 8006690:	d114      	bne.n	80066bc <_strtod_l+0x19c>
 8006692:	b924      	cbnz	r4, 800669e <_strtod_l+0x17e>
 8006694:	b910      	cbnz	r0, 800669c <_strtod_l+0x17c>
 8006696:	9b06      	ldr	r3, [sp, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d09e      	beq.n	80065da <_strtod_l+0xba>
 800669c:	2400      	movs	r4, #0
 800669e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80066a0:	1c73      	adds	r3, r6, #1
 80066a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80066a4:	7873      	ldrb	r3, [r6, #1]
 80066a6:	2b2b      	cmp	r3, #43	; 0x2b
 80066a8:	d078      	beq.n	800679c <_strtod_l+0x27c>
 80066aa:	2b2d      	cmp	r3, #45	; 0x2d
 80066ac:	d070      	beq.n	8006790 <_strtod_l+0x270>
 80066ae:	f04f 0c00 	mov.w	ip, #0
 80066b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80066b6:	2f09      	cmp	r7, #9
 80066b8:	d97c      	bls.n	80067b4 <_strtod_l+0x294>
 80066ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80066bc:	f04f 0e00 	mov.w	lr, #0
 80066c0:	e09a      	b.n	80067f8 <_strtod_l+0x2d8>
 80066c2:	2300      	movs	r3, #0
 80066c4:	e7c7      	b.n	8006656 <_strtod_l+0x136>
 80066c6:	9905      	ldr	r1, [sp, #20]
 80066c8:	2908      	cmp	r1, #8
 80066ca:	bfdd      	ittte	le
 80066cc:	9907      	ldrle	r1, [sp, #28]
 80066ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80066d2:	9307      	strle	r3, [sp, #28]
 80066d4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80066d8:	9b05      	ldr	r3, [sp, #20]
 80066da:	3001      	adds	r0, #1
 80066dc:	3301      	adds	r3, #1
 80066de:	9305      	str	r3, [sp, #20]
 80066e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80066e2:	e7bf      	b.n	8006664 <_strtod_l+0x144>
 80066e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066e6:	191a      	adds	r2, r3, r4
 80066e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80066ea:	9a05      	ldr	r2, [sp, #20]
 80066ec:	5d1b      	ldrb	r3, [r3, r4]
 80066ee:	2a00      	cmp	r2, #0
 80066f0:	d037      	beq.n	8006762 <_strtod_l+0x242>
 80066f2:	9c05      	ldr	r4, [sp, #20]
 80066f4:	4602      	mov	r2, r0
 80066f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80066fa:	2909      	cmp	r1, #9
 80066fc:	d913      	bls.n	8006726 <_strtod_l+0x206>
 80066fe:	2101      	movs	r1, #1
 8006700:	9104      	str	r1, [sp, #16]
 8006702:	e7c2      	b.n	800668a <_strtod_l+0x16a>
 8006704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	921b      	str	r2, [sp, #108]	; 0x6c
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	3001      	adds	r0, #1
 800670e:	2b30      	cmp	r3, #48	; 0x30
 8006710:	d0f8      	beq.n	8006704 <_strtod_l+0x1e4>
 8006712:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006716:	2a08      	cmp	r2, #8
 8006718:	f200 84e4 	bhi.w	80070e4 <_strtod_l+0xbc4>
 800671c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800671e:	9208      	str	r2, [sp, #32]
 8006720:	4602      	mov	r2, r0
 8006722:	2000      	movs	r0, #0
 8006724:	4604      	mov	r4, r0
 8006726:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800672a:	f100 0101 	add.w	r1, r0, #1
 800672e:	d012      	beq.n	8006756 <_strtod_l+0x236>
 8006730:	440a      	add	r2, r1
 8006732:	eb00 0c04 	add.w	ip, r0, r4
 8006736:	4621      	mov	r1, r4
 8006738:	270a      	movs	r7, #10
 800673a:	458c      	cmp	ip, r1
 800673c:	d113      	bne.n	8006766 <_strtod_l+0x246>
 800673e:	1821      	adds	r1, r4, r0
 8006740:	2908      	cmp	r1, #8
 8006742:	f104 0401 	add.w	r4, r4, #1
 8006746:	4404      	add	r4, r0
 8006748:	dc19      	bgt.n	800677e <_strtod_l+0x25e>
 800674a:	9b07      	ldr	r3, [sp, #28]
 800674c:	210a      	movs	r1, #10
 800674e:	fb01 e303 	mla	r3, r1, r3, lr
 8006752:	9307      	str	r3, [sp, #28]
 8006754:	2100      	movs	r1, #0
 8006756:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006758:	1c58      	adds	r0, r3, #1
 800675a:	901b      	str	r0, [sp, #108]	; 0x6c
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	4608      	mov	r0, r1
 8006760:	e7c9      	b.n	80066f6 <_strtod_l+0x1d6>
 8006762:	9805      	ldr	r0, [sp, #20]
 8006764:	e7d3      	b.n	800670e <_strtod_l+0x1ee>
 8006766:	2908      	cmp	r1, #8
 8006768:	f101 0101 	add.w	r1, r1, #1
 800676c:	dc03      	bgt.n	8006776 <_strtod_l+0x256>
 800676e:	9b07      	ldr	r3, [sp, #28]
 8006770:	437b      	muls	r3, r7
 8006772:	9307      	str	r3, [sp, #28]
 8006774:	e7e1      	b.n	800673a <_strtod_l+0x21a>
 8006776:	2910      	cmp	r1, #16
 8006778:	bfd8      	it	le
 800677a:	437d      	mulle	r5, r7
 800677c:	e7dd      	b.n	800673a <_strtod_l+0x21a>
 800677e:	2c10      	cmp	r4, #16
 8006780:	bfdc      	itt	le
 8006782:	210a      	movle	r1, #10
 8006784:	fb01 e505 	mlale	r5, r1, r5, lr
 8006788:	e7e4      	b.n	8006754 <_strtod_l+0x234>
 800678a:	2301      	movs	r3, #1
 800678c:	9304      	str	r3, [sp, #16]
 800678e:	e781      	b.n	8006694 <_strtod_l+0x174>
 8006790:	f04f 0c01 	mov.w	ip, #1
 8006794:	1cb3      	adds	r3, r6, #2
 8006796:	931b      	str	r3, [sp, #108]	; 0x6c
 8006798:	78b3      	ldrb	r3, [r6, #2]
 800679a:	e78a      	b.n	80066b2 <_strtod_l+0x192>
 800679c:	f04f 0c00 	mov.w	ip, #0
 80067a0:	e7f8      	b.n	8006794 <_strtod_l+0x274>
 80067a2:	bf00      	nop
 80067a4:	08009724 	.word	0x08009724
 80067a8:	7ff00000 	.word	0x7ff00000
 80067ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067ae:	1c5f      	adds	r7, r3, #1
 80067b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b30      	cmp	r3, #48	; 0x30
 80067b6:	d0f9      	beq.n	80067ac <_strtod_l+0x28c>
 80067b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80067bc:	2f08      	cmp	r7, #8
 80067be:	f63f af7d 	bhi.w	80066bc <_strtod_l+0x19c>
 80067c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80067c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067c8:	930a      	str	r3, [sp, #40]	; 0x28
 80067ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067cc:	1c5f      	adds	r7, r3, #1
 80067ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80067d6:	f1b8 0f09 	cmp.w	r8, #9
 80067da:	d937      	bls.n	800684c <_strtod_l+0x32c>
 80067dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067de:	1a7f      	subs	r7, r7, r1
 80067e0:	2f08      	cmp	r7, #8
 80067e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80067e6:	dc37      	bgt.n	8006858 <_strtod_l+0x338>
 80067e8:	45be      	cmp	lr, r7
 80067ea:	bfa8      	it	ge
 80067ec:	46be      	movge	lr, r7
 80067ee:	f1bc 0f00 	cmp.w	ip, #0
 80067f2:	d001      	beq.n	80067f8 <_strtod_l+0x2d8>
 80067f4:	f1ce 0e00 	rsb	lr, lr, #0
 80067f8:	2c00      	cmp	r4, #0
 80067fa:	d151      	bne.n	80068a0 <_strtod_l+0x380>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f47f aece 	bne.w	800659e <_strtod_l+0x7e>
 8006802:	9a06      	ldr	r2, [sp, #24]
 8006804:	2a00      	cmp	r2, #0
 8006806:	f47f aeca 	bne.w	800659e <_strtod_l+0x7e>
 800680a:	9a04      	ldr	r2, [sp, #16]
 800680c:	2a00      	cmp	r2, #0
 800680e:	f47f aee4 	bne.w	80065da <_strtod_l+0xba>
 8006812:	2b4e      	cmp	r3, #78	; 0x4e
 8006814:	d027      	beq.n	8006866 <_strtod_l+0x346>
 8006816:	dc21      	bgt.n	800685c <_strtod_l+0x33c>
 8006818:	2b49      	cmp	r3, #73	; 0x49
 800681a:	f47f aede 	bne.w	80065da <_strtod_l+0xba>
 800681e:	49a0      	ldr	r1, [pc, #640]	; (8006aa0 <_strtod_l+0x580>)
 8006820:	a81b      	add	r0, sp, #108	; 0x6c
 8006822:	f001 fde3 	bl	80083ec <__match>
 8006826:	2800      	cmp	r0, #0
 8006828:	f43f aed7 	beq.w	80065da <_strtod_l+0xba>
 800682c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800682e:	499d      	ldr	r1, [pc, #628]	; (8006aa4 <_strtod_l+0x584>)
 8006830:	3b01      	subs	r3, #1
 8006832:	a81b      	add	r0, sp, #108	; 0x6c
 8006834:	931b      	str	r3, [sp, #108]	; 0x6c
 8006836:	f001 fdd9 	bl	80083ec <__match>
 800683a:	b910      	cbnz	r0, 8006842 <_strtod_l+0x322>
 800683c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800683e:	3301      	adds	r3, #1
 8006840:	931b      	str	r3, [sp, #108]	; 0x6c
 8006842:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006ab8 <_strtod_l+0x598>
 8006846:	f04f 0a00 	mov.w	sl, #0
 800684a:	e6a8      	b.n	800659e <_strtod_l+0x7e>
 800684c:	210a      	movs	r1, #10
 800684e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006852:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006856:	e7b8      	b.n	80067ca <_strtod_l+0x2aa>
 8006858:	46be      	mov	lr, r7
 800685a:	e7c8      	b.n	80067ee <_strtod_l+0x2ce>
 800685c:	2b69      	cmp	r3, #105	; 0x69
 800685e:	d0de      	beq.n	800681e <_strtod_l+0x2fe>
 8006860:	2b6e      	cmp	r3, #110	; 0x6e
 8006862:	f47f aeba 	bne.w	80065da <_strtod_l+0xba>
 8006866:	4990      	ldr	r1, [pc, #576]	; (8006aa8 <_strtod_l+0x588>)
 8006868:	a81b      	add	r0, sp, #108	; 0x6c
 800686a:	f001 fdbf 	bl	80083ec <__match>
 800686e:	2800      	cmp	r0, #0
 8006870:	f43f aeb3 	beq.w	80065da <_strtod_l+0xba>
 8006874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b28      	cmp	r3, #40	; 0x28
 800687a:	d10e      	bne.n	800689a <_strtod_l+0x37a>
 800687c:	aa1e      	add	r2, sp, #120	; 0x78
 800687e:	498b      	ldr	r1, [pc, #556]	; (8006aac <_strtod_l+0x58c>)
 8006880:	a81b      	add	r0, sp, #108	; 0x6c
 8006882:	f001 fdc7 	bl	8008414 <__hexnan>
 8006886:	2805      	cmp	r0, #5
 8006888:	d107      	bne.n	800689a <_strtod_l+0x37a>
 800688a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800688c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006890:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006894:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006898:	e681      	b.n	800659e <_strtod_l+0x7e>
 800689a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006ac0 <_strtod_l+0x5a0>
 800689e:	e7d2      	b.n	8006846 <_strtod_l+0x326>
 80068a0:	ebae 0302 	sub.w	r3, lr, r2
 80068a4:	9306      	str	r3, [sp, #24]
 80068a6:	9b05      	ldr	r3, [sp, #20]
 80068a8:	9807      	ldr	r0, [sp, #28]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bf08      	it	eq
 80068ae:	4623      	moveq	r3, r4
 80068b0:	2c10      	cmp	r4, #16
 80068b2:	9305      	str	r3, [sp, #20]
 80068b4:	46a0      	mov	r8, r4
 80068b6:	bfa8      	it	ge
 80068b8:	f04f 0810 	movge.w	r8, #16
 80068bc:	f7f9 fe2a 	bl	8000514 <__aeabi_ui2d>
 80068c0:	2c09      	cmp	r4, #9
 80068c2:	4682      	mov	sl, r0
 80068c4:	468b      	mov	fp, r1
 80068c6:	dc13      	bgt.n	80068f0 <_strtod_l+0x3d0>
 80068c8:	9b06      	ldr	r3, [sp, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f43f ae67 	beq.w	800659e <_strtod_l+0x7e>
 80068d0:	9b06      	ldr	r3, [sp, #24]
 80068d2:	dd7a      	ble.n	80069ca <_strtod_l+0x4aa>
 80068d4:	2b16      	cmp	r3, #22
 80068d6:	dc61      	bgt.n	800699c <_strtod_l+0x47c>
 80068d8:	4a75      	ldr	r2, [pc, #468]	; (8006ab0 <_strtod_l+0x590>)
 80068da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80068de:	e9de 0100 	ldrd	r0, r1, [lr]
 80068e2:	4652      	mov	r2, sl
 80068e4:	465b      	mov	r3, fp
 80068e6:	f7f9 fe8f 	bl	8000608 <__aeabi_dmul>
 80068ea:	4682      	mov	sl, r0
 80068ec:	468b      	mov	fp, r1
 80068ee:	e656      	b.n	800659e <_strtod_l+0x7e>
 80068f0:	4b6f      	ldr	r3, [pc, #444]	; (8006ab0 <_strtod_l+0x590>)
 80068f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80068f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80068fa:	f7f9 fe85 	bl	8000608 <__aeabi_dmul>
 80068fe:	4606      	mov	r6, r0
 8006900:	4628      	mov	r0, r5
 8006902:	460f      	mov	r7, r1
 8006904:	f7f9 fe06 	bl	8000514 <__aeabi_ui2d>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4630      	mov	r0, r6
 800690e:	4639      	mov	r1, r7
 8006910:	f7f9 fcc4 	bl	800029c <__adddf3>
 8006914:	2c0f      	cmp	r4, #15
 8006916:	4682      	mov	sl, r0
 8006918:	468b      	mov	fp, r1
 800691a:	ddd5      	ble.n	80068c8 <_strtod_l+0x3a8>
 800691c:	9b06      	ldr	r3, [sp, #24]
 800691e:	eba4 0808 	sub.w	r8, r4, r8
 8006922:	4498      	add	r8, r3
 8006924:	f1b8 0f00 	cmp.w	r8, #0
 8006928:	f340 8096 	ble.w	8006a58 <_strtod_l+0x538>
 800692c:	f018 030f 	ands.w	r3, r8, #15
 8006930:	d00a      	beq.n	8006948 <_strtod_l+0x428>
 8006932:	495f      	ldr	r1, [pc, #380]	; (8006ab0 <_strtod_l+0x590>)
 8006934:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006938:	4652      	mov	r2, sl
 800693a:	465b      	mov	r3, fp
 800693c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006940:	f7f9 fe62 	bl	8000608 <__aeabi_dmul>
 8006944:	4682      	mov	sl, r0
 8006946:	468b      	mov	fp, r1
 8006948:	f038 080f 	bics.w	r8, r8, #15
 800694c:	d073      	beq.n	8006a36 <_strtod_l+0x516>
 800694e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006952:	dd47      	ble.n	80069e4 <_strtod_l+0x4c4>
 8006954:	2400      	movs	r4, #0
 8006956:	46a0      	mov	r8, r4
 8006958:	9407      	str	r4, [sp, #28]
 800695a:	9405      	str	r4, [sp, #20]
 800695c:	2322      	movs	r3, #34	; 0x22
 800695e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006ab8 <_strtod_l+0x598>
 8006962:	f8c9 3000 	str.w	r3, [r9]
 8006966:	f04f 0a00 	mov.w	sl, #0
 800696a:	9b07      	ldr	r3, [sp, #28]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f43f ae16 	beq.w	800659e <_strtod_l+0x7e>
 8006972:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006974:	4648      	mov	r0, r9
 8006976:	f001 fe29 	bl	80085cc <_Bfree>
 800697a:	9905      	ldr	r1, [sp, #20]
 800697c:	4648      	mov	r0, r9
 800697e:	f001 fe25 	bl	80085cc <_Bfree>
 8006982:	4641      	mov	r1, r8
 8006984:	4648      	mov	r0, r9
 8006986:	f001 fe21 	bl	80085cc <_Bfree>
 800698a:	9907      	ldr	r1, [sp, #28]
 800698c:	4648      	mov	r0, r9
 800698e:	f001 fe1d 	bl	80085cc <_Bfree>
 8006992:	4621      	mov	r1, r4
 8006994:	4648      	mov	r0, r9
 8006996:	f001 fe19 	bl	80085cc <_Bfree>
 800699a:	e600      	b.n	800659e <_strtod_l+0x7e>
 800699c:	9a06      	ldr	r2, [sp, #24]
 800699e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80069a2:	4293      	cmp	r3, r2
 80069a4:	dbba      	blt.n	800691c <_strtod_l+0x3fc>
 80069a6:	4d42      	ldr	r5, [pc, #264]	; (8006ab0 <_strtod_l+0x590>)
 80069a8:	f1c4 040f 	rsb	r4, r4, #15
 80069ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80069b0:	4652      	mov	r2, sl
 80069b2:	465b      	mov	r3, fp
 80069b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069b8:	f7f9 fe26 	bl	8000608 <__aeabi_dmul>
 80069bc:	9b06      	ldr	r3, [sp, #24]
 80069be:	1b1c      	subs	r4, r3, r4
 80069c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80069c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069c8:	e78d      	b.n	80068e6 <_strtod_l+0x3c6>
 80069ca:	f113 0f16 	cmn.w	r3, #22
 80069ce:	dba5      	blt.n	800691c <_strtod_l+0x3fc>
 80069d0:	4a37      	ldr	r2, [pc, #220]	; (8006ab0 <_strtod_l+0x590>)
 80069d2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80069d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80069da:	4650      	mov	r0, sl
 80069dc:	4659      	mov	r1, fp
 80069de:	f7f9 ff3d 	bl	800085c <__aeabi_ddiv>
 80069e2:	e782      	b.n	80068ea <_strtod_l+0x3ca>
 80069e4:	2300      	movs	r3, #0
 80069e6:	4e33      	ldr	r6, [pc, #204]	; (8006ab4 <_strtod_l+0x594>)
 80069e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80069ec:	4650      	mov	r0, sl
 80069ee:	4659      	mov	r1, fp
 80069f0:	461d      	mov	r5, r3
 80069f2:	f1b8 0f01 	cmp.w	r8, #1
 80069f6:	dc21      	bgt.n	8006a3c <_strtod_l+0x51c>
 80069f8:	b10b      	cbz	r3, 80069fe <_strtod_l+0x4de>
 80069fa:	4682      	mov	sl, r0
 80069fc:	468b      	mov	fp, r1
 80069fe:	4b2d      	ldr	r3, [pc, #180]	; (8006ab4 <_strtod_l+0x594>)
 8006a00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006a04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006a08:	4652      	mov	r2, sl
 8006a0a:	465b      	mov	r3, fp
 8006a0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006a10:	f7f9 fdfa 	bl	8000608 <__aeabi_dmul>
 8006a14:	4b28      	ldr	r3, [pc, #160]	; (8006ab8 <_strtod_l+0x598>)
 8006a16:	460a      	mov	r2, r1
 8006a18:	400b      	ands	r3, r1
 8006a1a:	4928      	ldr	r1, [pc, #160]	; (8006abc <_strtod_l+0x59c>)
 8006a1c:	428b      	cmp	r3, r1
 8006a1e:	4682      	mov	sl, r0
 8006a20:	d898      	bhi.n	8006954 <_strtod_l+0x434>
 8006a22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a26:	428b      	cmp	r3, r1
 8006a28:	bf86      	itte	hi
 8006a2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006ac4 <_strtod_l+0x5a4>
 8006a2e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006a32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006a36:	2300      	movs	r3, #0
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	e077      	b.n	8006b2c <_strtod_l+0x60c>
 8006a3c:	f018 0f01 	tst.w	r8, #1
 8006a40:	d006      	beq.n	8006a50 <_strtod_l+0x530>
 8006a42:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fddd 	bl	8000608 <__aeabi_dmul>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	3501      	adds	r5, #1
 8006a52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006a56:	e7cc      	b.n	80069f2 <_strtod_l+0x4d2>
 8006a58:	d0ed      	beq.n	8006a36 <_strtod_l+0x516>
 8006a5a:	f1c8 0800 	rsb	r8, r8, #0
 8006a5e:	f018 020f 	ands.w	r2, r8, #15
 8006a62:	d00a      	beq.n	8006a7a <_strtod_l+0x55a>
 8006a64:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <_strtod_l+0x590>)
 8006a66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a6a:	4650      	mov	r0, sl
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	f7f9 fef3 	bl	800085c <__aeabi_ddiv>
 8006a76:	4682      	mov	sl, r0
 8006a78:	468b      	mov	fp, r1
 8006a7a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006a7e:	d0da      	beq.n	8006a36 <_strtod_l+0x516>
 8006a80:	f1b8 0f1f 	cmp.w	r8, #31
 8006a84:	dd20      	ble.n	8006ac8 <_strtod_l+0x5a8>
 8006a86:	2400      	movs	r4, #0
 8006a88:	46a0      	mov	r8, r4
 8006a8a:	9407      	str	r4, [sp, #28]
 8006a8c:	9405      	str	r4, [sp, #20]
 8006a8e:	2322      	movs	r3, #34	; 0x22
 8006a90:	f04f 0a00 	mov.w	sl, #0
 8006a94:	f04f 0b00 	mov.w	fp, #0
 8006a98:	f8c9 3000 	str.w	r3, [r9]
 8006a9c:	e765      	b.n	800696a <_strtod_l+0x44a>
 8006a9e:	bf00      	nop
 8006aa0:	080096ef 	.word	0x080096ef
 8006aa4:	0800987c 	.word	0x0800987c
 8006aa8:	080096f7 	.word	0x080096f7
 8006aac:	08009738 	.word	0x08009738
 8006ab0:	08009910 	.word	0x08009910
 8006ab4:	080098e8 	.word	0x080098e8
 8006ab8:	7ff00000 	.word	0x7ff00000
 8006abc:	7ca00000 	.word	0x7ca00000
 8006ac0:	fff80000 	.word	0xfff80000
 8006ac4:	7fefffff 	.word	0x7fefffff
 8006ac8:	f018 0310 	ands.w	r3, r8, #16
 8006acc:	bf18      	it	ne
 8006ace:	236a      	movne	r3, #106	; 0x6a
 8006ad0:	4da0      	ldr	r5, [pc, #640]	; (8006d54 <_strtod_l+0x834>)
 8006ad2:	9304      	str	r3, [sp, #16]
 8006ad4:	4650      	mov	r0, sl
 8006ad6:	4659      	mov	r1, fp
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f1b8 0f00 	cmp.w	r8, #0
 8006ade:	f300 810a 	bgt.w	8006cf6 <_strtod_l+0x7d6>
 8006ae2:	b10b      	cbz	r3, 8006ae8 <_strtod_l+0x5c8>
 8006ae4:	4682      	mov	sl, r0
 8006ae6:	468b      	mov	fp, r1
 8006ae8:	9b04      	ldr	r3, [sp, #16]
 8006aea:	b1bb      	cbz	r3, 8006b1c <_strtod_l+0x5fc>
 8006aec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006af0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	4659      	mov	r1, fp
 8006af8:	dd10      	ble.n	8006b1c <_strtod_l+0x5fc>
 8006afa:	2b1f      	cmp	r3, #31
 8006afc:	f340 8107 	ble.w	8006d0e <_strtod_l+0x7ee>
 8006b00:	2b34      	cmp	r3, #52	; 0x34
 8006b02:	bfde      	ittt	le
 8006b04:	3b20      	suble	r3, #32
 8006b06:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006b0a:	fa02 f303 	lslle.w	r3, r2, r3
 8006b0e:	f04f 0a00 	mov.w	sl, #0
 8006b12:	bfcc      	ite	gt
 8006b14:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006b18:	ea03 0b01 	andle.w	fp, r3, r1
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2300      	movs	r3, #0
 8006b20:	4650      	mov	r0, sl
 8006b22:	4659      	mov	r1, fp
 8006b24:	f7f9 ffd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d1ac      	bne.n	8006a86 <_strtod_l+0x566>
 8006b2c:	9b07      	ldr	r3, [sp, #28]
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	9a05      	ldr	r2, [sp, #20]
 8006b32:	9908      	ldr	r1, [sp, #32]
 8006b34:	4623      	mov	r3, r4
 8006b36:	4648      	mov	r0, r9
 8006b38:	f001 fd9a 	bl	8008670 <__s2b>
 8006b3c:	9007      	str	r0, [sp, #28]
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f43f af08 	beq.w	8006954 <_strtod_l+0x434>
 8006b44:	9a06      	ldr	r2, [sp, #24]
 8006b46:	9b06      	ldr	r3, [sp, #24]
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	f1c3 0300 	rsb	r3, r3, #0
 8006b4e:	bfa8      	it	ge
 8006b50:	2300      	movge	r3, #0
 8006b52:	930e      	str	r3, [sp, #56]	; 0x38
 8006b54:	2400      	movs	r4, #0
 8006b56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006b5a:	9316      	str	r3, [sp, #88]	; 0x58
 8006b5c:	46a0      	mov	r8, r4
 8006b5e:	9b07      	ldr	r3, [sp, #28]
 8006b60:	4648      	mov	r0, r9
 8006b62:	6859      	ldr	r1, [r3, #4]
 8006b64:	f001 fcfe 	bl	8008564 <_Balloc>
 8006b68:	9005      	str	r0, [sp, #20]
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	f43f aef6 	beq.w	800695c <_strtod_l+0x43c>
 8006b70:	9b07      	ldr	r3, [sp, #28]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	3202      	adds	r2, #2
 8006b76:	f103 010c 	add.w	r1, r3, #12
 8006b7a:	0092      	lsls	r2, r2, #2
 8006b7c:	300c      	adds	r0, #12
 8006b7e:	f7fe fe3a 	bl	80057f6 <memcpy>
 8006b82:	aa1e      	add	r2, sp, #120	; 0x78
 8006b84:	a91d      	add	r1, sp, #116	; 0x74
 8006b86:	ec4b ab10 	vmov	d0, sl, fp
 8006b8a:	4648      	mov	r0, r9
 8006b8c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006b90:	f002 f82a 	bl	8008be8 <__d2b>
 8006b94:	901c      	str	r0, [sp, #112]	; 0x70
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f43f aee0 	beq.w	800695c <_strtod_l+0x43c>
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	4648      	mov	r0, r9
 8006ba0:	f001 fdf2 	bl	8008788 <__i2b>
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f43f aed8 	beq.w	800695c <_strtod_l+0x43c>
 8006bac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006bae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	bfab      	itete	ge
 8006bb4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006bb6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006bb8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006bba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006bbc:	bfac      	ite	ge
 8006bbe:	18f7      	addge	r7, r6, r3
 8006bc0:	1b9d      	sublt	r5, r3, r6
 8006bc2:	9b04      	ldr	r3, [sp, #16]
 8006bc4:	1af6      	subs	r6, r6, r3
 8006bc6:	4416      	add	r6, r2
 8006bc8:	4b63      	ldr	r3, [pc, #396]	; (8006d58 <_strtod_l+0x838>)
 8006bca:	3e01      	subs	r6, #1
 8006bcc:	429e      	cmp	r6, r3
 8006bce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006bd2:	f280 80af 	bge.w	8006d34 <_strtod_l+0x814>
 8006bd6:	1b9b      	subs	r3, r3, r6
 8006bd8:	2b1f      	cmp	r3, #31
 8006bda:	eba2 0203 	sub.w	r2, r2, r3
 8006bde:	f04f 0101 	mov.w	r1, #1
 8006be2:	f300 809b 	bgt.w	8006d1c <_strtod_l+0x7fc>
 8006be6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bea:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bec:	2300      	movs	r3, #0
 8006bee:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf0:	18be      	adds	r6, r7, r2
 8006bf2:	9b04      	ldr	r3, [sp, #16]
 8006bf4:	42b7      	cmp	r7, r6
 8006bf6:	4415      	add	r5, r2
 8006bf8:	441d      	add	r5, r3
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	bfa8      	it	ge
 8006bfe:	4633      	movge	r3, r6
 8006c00:	42ab      	cmp	r3, r5
 8006c02:	bfa8      	it	ge
 8006c04:	462b      	movge	r3, r5
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	bfc2      	ittt	gt
 8006c0a:	1af6      	subgt	r6, r6, r3
 8006c0c:	1aed      	subgt	r5, r5, r3
 8006c0e:	1aff      	subgt	r7, r7, r3
 8006c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c12:	b1bb      	cbz	r3, 8006c44 <_strtod_l+0x724>
 8006c14:	4641      	mov	r1, r8
 8006c16:	461a      	mov	r2, r3
 8006c18:	4648      	mov	r0, r9
 8006c1a:	f001 fe55 	bl	80088c8 <__pow5mult>
 8006c1e:	4680      	mov	r8, r0
 8006c20:	2800      	cmp	r0, #0
 8006c22:	f43f ae9b 	beq.w	800695c <_strtod_l+0x43c>
 8006c26:	4601      	mov	r1, r0
 8006c28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c2a:	4648      	mov	r0, r9
 8006c2c:	f001 fdb5 	bl	800879a <__multiply>
 8006c30:	900c      	str	r0, [sp, #48]	; 0x30
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f43f ae92 	beq.w	800695c <_strtod_l+0x43c>
 8006c38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c3a:	4648      	mov	r0, r9
 8006c3c:	f001 fcc6 	bl	80085cc <_Bfree>
 8006c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c42:	931c      	str	r3, [sp, #112]	; 0x70
 8006c44:	2e00      	cmp	r6, #0
 8006c46:	dc7a      	bgt.n	8006d3e <_strtod_l+0x81e>
 8006c48:	9b06      	ldr	r3, [sp, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	dd08      	ble.n	8006c60 <_strtod_l+0x740>
 8006c4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c50:	9905      	ldr	r1, [sp, #20]
 8006c52:	4648      	mov	r0, r9
 8006c54:	f001 fe38 	bl	80088c8 <__pow5mult>
 8006c58:	9005      	str	r0, [sp, #20]
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	f43f ae7e 	beq.w	800695c <_strtod_l+0x43c>
 8006c60:	2d00      	cmp	r5, #0
 8006c62:	dd08      	ble.n	8006c76 <_strtod_l+0x756>
 8006c64:	462a      	mov	r2, r5
 8006c66:	9905      	ldr	r1, [sp, #20]
 8006c68:	4648      	mov	r0, r9
 8006c6a:	f001 fe7b 	bl	8008964 <__lshift>
 8006c6e:	9005      	str	r0, [sp, #20]
 8006c70:	2800      	cmp	r0, #0
 8006c72:	f43f ae73 	beq.w	800695c <_strtod_l+0x43c>
 8006c76:	2f00      	cmp	r7, #0
 8006c78:	dd08      	ble.n	8006c8c <_strtod_l+0x76c>
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	463a      	mov	r2, r7
 8006c7e:	4648      	mov	r0, r9
 8006c80:	f001 fe70 	bl	8008964 <__lshift>
 8006c84:	4680      	mov	r8, r0
 8006c86:	2800      	cmp	r0, #0
 8006c88:	f43f ae68 	beq.w	800695c <_strtod_l+0x43c>
 8006c8c:	9a05      	ldr	r2, [sp, #20]
 8006c8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c90:	4648      	mov	r0, r9
 8006c92:	f001 fed5 	bl	8008a40 <__mdiff>
 8006c96:	4604      	mov	r4, r0
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	f43f ae5f 	beq.w	800695c <_strtod_l+0x43c>
 8006c9e:	68c3      	ldr	r3, [r0, #12]
 8006ca0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60c3      	str	r3, [r0, #12]
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	f001 feb0 	bl	8008a0c <__mcmp>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	da55      	bge.n	8006d5c <_strtod_l+0x83c>
 8006cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cb2:	b9e3      	cbnz	r3, 8006cee <_strtod_l+0x7ce>
 8006cb4:	f1ba 0f00 	cmp.w	sl, #0
 8006cb8:	d119      	bne.n	8006cee <_strtod_l+0x7ce>
 8006cba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cbe:	b9b3      	cbnz	r3, 8006cee <_strtod_l+0x7ce>
 8006cc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cc4:	0d1b      	lsrs	r3, r3, #20
 8006cc6:	051b      	lsls	r3, r3, #20
 8006cc8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006ccc:	d90f      	bls.n	8006cee <_strtod_l+0x7ce>
 8006cce:	6963      	ldr	r3, [r4, #20]
 8006cd0:	b913      	cbnz	r3, 8006cd8 <_strtod_l+0x7b8>
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	dd0a      	ble.n	8006cee <_strtod_l+0x7ce>
 8006cd8:	4621      	mov	r1, r4
 8006cda:	2201      	movs	r2, #1
 8006cdc:	4648      	mov	r0, r9
 8006cde:	f001 fe41 	bl	8008964 <__lshift>
 8006ce2:	4641      	mov	r1, r8
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	f001 fe91 	bl	8008a0c <__mcmp>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	dc67      	bgt.n	8006dbe <_strtod_l+0x89e>
 8006cee:	9b04      	ldr	r3, [sp, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d171      	bne.n	8006dd8 <_strtod_l+0x8b8>
 8006cf4:	e63d      	b.n	8006972 <_strtod_l+0x452>
 8006cf6:	f018 0f01 	tst.w	r8, #1
 8006cfa:	d004      	beq.n	8006d06 <_strtod_l+0x7e6>
 8006cfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d00:	f7f9 fc82 	bl	8000608 <__aeabi_dmul>
 8006d04:	2301      	movs	r3, #1
 8006d06:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d0a:	3508      	adds	r5, #8
 8006d0c:	e6e5      	b.n	8006ada <_strtod_l+0x5ba>
 8006d0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	ea03 0a0a 	and.w	sl, r3, sl
 8006d1a:	e6ff      	b.n	8006b1c <_strtod_l+0x5fc>
 8006d1c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006d20:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006d24:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006d28:	36e2      	adds	r6, #226	; 0xe2
 8006d2a:	fa01 f306 	lsl.w	r3, r1, r6
 8006d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d30:	910f      	str	r1, [sp, #60]	; 0x3c
 8006d32:	e75d      	b.n	8006bf0 <_strtod_l+0x6d0>
 8006d34:	2300      	movs	r3, #0
 8006d36:	930a      	str	r3, [sp, #40]	; 0x28
 8006d38:	2301      	movs	r3, #1
 8006d3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d3c:	e758      	b.n	8006bf0 <_strtod_l+0x6d0>
 8006d3e:	4632      	mov	r2, r6
 8006d40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d42:	4648      	mov	r0, r9
 8006d44:	f001 fe0e 	bl	8008964 <__lshift>
 8006d48:	901c      	str	r0, [sp, #112]	; 0x70
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f47f af7c 	bne.w	8006c48 <_strtod_l+0x728>
 8006d50:	e604      	b.n	800695c <_strtod_l+0x43c>
 8006d52:	bf00      	nop
 8006d54:	08009750 	.word	0x08009750
 8006d58:	fffffc02 	.word	0xfffffc02
 8006d5c:	465d      	mov	r5, fp
 8006d5e:	f040 8086 	bne.w	8006e6e <_strtod_l+0x94e>
 8006d62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d68:	b32a      	cbz	r2, 8006db6 <_strtod_l+0x896>
 8006d6a:	4aaf      	ldr	r2, [pc, #700]	; (8007028 <_strtod_l+0xb08>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d153      	bne.n	8006e18 <_strtod_l+0x8f8>
 8006d70:	9b04      	ldr	r3, [sp, #16]
 8006d72:	4650      	mov	r0, sl
 8006d74:	b1d3      	cbz	r3, 8006dac <_strtod_l+0x88c>
 8006d76:	4aad      	ldr	r2, [pc, #692]	; (800702c <_strtod_l+0xb0c>)
 8006d78:	402a      	ands	r2, r5
 8006d7a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006d7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d82:	d816      	bhi.n	8006db2 <_strtod_l+0x892>
 8006d84:	0d12      	lsrs	r2, r2, #20
 8006d86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	4298      	cmp	r0, r3
 8006d90:	d142      	bne.n	8006e18 <_strtod_l+0x8f8>
 8006d92:	4ba7      	ldr	r3, [pc, #668]	; (8007030 <_strtod_l+0xb10>)
 8006d94:	429d      	cmp	r5, r3
 8006d96:	d102      	bne.n	8006d9e <_strtod_l+0x87e>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f43f addf 	beq.w	800695c <_strtod_l+0x43c>
 8006d9e:	4ba3      	ldr	r3, [pc, #652]	; (800702c <_strtod_l+0xb0c>)
 8006da0:	402b      	ands	r3, r5
 8006da2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006da6:	f04f 0a00 	mov.w	sl, #0
 8006daa:	e7a0      	b.n	8006cee <_strtod_l+0x7ce>
 8006dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006db0:	e7ed      	b.n	8006d8e <_strtod_l+0x86e>
 8006db2:	460b      	mov	r3, r1
 8006db4:	e7eb      	b.n	8006d8e <_strtod_l+0x86e>
 8006db6:	bb7b      	cbnz	r3, 8006e18 <_strtod_l+0x8f8>
 8006db8:	f1ba 0f00 	cmp.w	sl, #0
 8006dbc:	d12c      	bne.n	8006e18 <_strtod_l+0x8f8>
 8006dbe:	9904      	ldr	r1, [sp, #16]
 8006dc0:	4a9a      	ldr	r2, [pc, #616]	; (800702c <_strtod_l+0xb0c>)
 8006dc2:	465b      	mov	r3, fp
 8006dc4:	b1f1      	cbz	r1, 8006e04 <_strtod_l+0x8e4>
 8006dc6:	ea02 010b 	and.w	r1, r2, fp
 8006dca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006dce:	dc19      	bgt.n	8006e04 <_strtod_l+0x8e4>
 8006dd0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006dd4:	f77f ae5b 	ble.w	8006a8e <_strtod_l+0x56e>
 8006dd8:	4a96      	ldr	r2, [pc, #600]	; (8007034 <_strtod_l+0xb14>)
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006de0:	4650      	mov	r0, sl
 8006de2:	4659      	mov	r1, fp
 8006de4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006de8:	f7f9 fc0e 	bl	8000608 <__aeabi_dmul>
 8006dec:	4682      	mov	sl, r0
 8006dee:	468b      	mov	fp, r1
 8006df0:	2900      	cmp	r1, #0
 8006df2:	f47f adbe 	bne.w	8006972 <_strtod_l+0x452>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f47f adbb 	bne.w	8006972 <_strtod_l+0x452>
 8006dfc:	2322      	movs	r3, #34	; 0x22
 8006dfe:	f8c9 3000 	str.w	r3, [r9]
 8006e02:	e5b6      	b.n	8006972 <_strtod_l+0x452>
 8006e04:	4013      	ands	r3, r2
 8006e06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e0a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e12:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006e16:	e76a      	b.n	8006cee <_strtod_l+0x7ce>
 8006e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1a:	b193      	cbz	r3, 8006e42 <_strtod_l+0x922>
 8006e1c:	422b      	tst	r3, r5
 8006e1e:	f43f af66 	beq.w	8006cee <_strtod_l+0x7ce>
 8006e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e24:	9a04      	ldr	r2, [sp, #16]
 8006e26:	4650      	mov	r0, sl
 8006e28:	4659      	mov	r1, fp
 8006e2a:	b173      	cbz	r3, 8006e4a <_strtod_l+0x92a>
 8006e2c:	f7ff fb5a 	bl	80064e4 <sulp>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e38:	f7f9 fa30 	bl	800029c <__adddf3>
 8006e3c:	4682      	mov	sl, r0
 8006e3e:	468b      	mov	fp, r1
 8006e40:	e755      	b.n	8006cee <_strtod_l+0x7ce>
 8006e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e44:	ea13 0f0a 	tst.w	r3, sl
 8006e48:	e7e9      	b.n	8006e1e <_strtod_l+0x8fe>
 8006e4a:	f7ff fb4b 	bl	80064e4 <sulp>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e56:	f7f9 fa1f 	bl	8000298 <__aeabi_dsub>
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4682      	mov	sl, r0
 8006e60:	468b      	mov	fp, r1
 8006e62:	f7f9 fe39 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f47f ae11 	bne.w	8006a8e <_strtod_l+0x56e>
 8006e6c:	e73f      	b.n	8006cee <_strtod_l+0x7ce>
 8006e6e:	4641      	mov	r1, r8
 8006e70:	4620      	mov	r0, r4
 8006e72:	f001 ff08 	bl	8008c86 <__ratio>
 8006e76:	ec57 6b10 	vmov	r6, r7, d0
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e80:	ee10 0a10 	vmov	r0, s0
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 fe3b 	bl	8000b00 <__aeabi_dcmple>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d077      	beq.n	8006f7e <_strtod_l+0xa5e>
 8006e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d04a      	beq.n	8006f2a <_strtod_l+0xa0a>
 8006e94:	4b68      	ldr	r3, [pc, #416]	; (8007038 <_strtod_l+0xb18>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e9c:	4f66      	ldr	r7, [pc, #408]	; (8007038 <_strtod_l+0xb18>)
 8006e9e:	2600      	movs	r6, #0
 8006ea0:	4b62      	ldr	r3, [pc, #392]	; (800702c <_strtod_l+0xb0c>)
 8006ea2:	402b      	ands	r3, r5
 8006ea4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ea8:	4b64      	ldr	r3, [pc, #400]	; (800703c <_strtod_l+0xb1c>)
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	f040 80ce 	bne.w	800704c <_strtod_l+0xb2c>
 8006eb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006eb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006eb8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8006ebc:	ec4b ab10 	vmov	d0, sl, fp
 8006ec0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006ec4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ec8:	f001 fe18 	bl	8008afc <__ulp>
 8006ecc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ed0:	ec53 2b10 	vmov	r2, r3, d0
 8006ed4:	f7f9 fb98 	bl	8000608 <__aeabi_dmul>
 8006ed8:	4652      	mov	r2, sl
 8006eda:	465b      	mov	r3, fp
 8006edc:	f7f9 f9de 	bl	800029c <__adddf3>
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4952      	ldr	r1, [pc, #328]	; (800702c <_strtod_l+0xb0c>)
 8006ee4:	4a56      	ldr	r2, [pc, #344]	; (8007040 <_strtod_l+0xb20>)
 8006ee6:	4019      	ands	r1, r3
 8006ee8:	4291      	cmp	r1, r2
 8006eea:	4682      	mov	sl, r0
 8006eec:	d95b      	bls.n	8006fa6 <_strtod_l+0xa86>
 8006eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d103      	bne.n	8006f00 <_strtod_l+0x9e0>
 8006ef8:	9b08      	ldr	r3, [sp, #32]
 8006efa:	3301      	adds	r3, #1
 8006efc:	f43f ad2e 	beq.w	800695c <_strtod_l+0x43c>
 8006f00:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007030 <_strtod_l+0xb10>
 8006f04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006f08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f0a:	4648      	mov	r0, r9
 8006f0c:	f001 fb5e 	bl	80085cc <_Bfree>
 8006f10:	9905      	ldr	r1, [sp, #20]
 8006f12:	4648      	mov	r0, r9
 8006f14:	f001 fb5a 	bl	80085cc <_Bfree>
 8006f18:	4641      	mov	r1, r8
 8006f1a:	4648      	mov	r0, r9
 8006f1c:	f001 fb56 	bl	80085cc <_Bfree>
 8006f20:	4621      	mov	r1, r4
 8006f22:	4648      	mov	r0, r9
 8006f24:	f001 fb52 	bl	80085cc <_Bfree>
 8006f28:	e619      	b.n	8006b5e <_strtod_l+0x63e>
 8006f2a:	f1ba 0f00 	cmp.w	sl, #0
 8006f2e:	d11a      	bne.n	8006f66 <_strtod_l+0xa46>
 8006f30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f34:	b9eb      	cbnz	r3, 8006f72 <_strtod_l+0xa52>
 8006f36:	2200      	movs	r2, #0
 8006f38:	4b3f      	ldr	r3, [pc, #252]	; (8007038 <_strtod_l+0xb18>)
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	f7f9 fdd5 	bl	8000aec <__aeabi_dcmplt>
 8006f42:	b9c8      	cbnz	r0, 8006f78 <_strtod_l+0xa58>
 8006f44:	4630      	mov	r0, r6
 8006f46:	4639      	mov	r1, r7
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4b3e      	ldr	r3, [pc, #248]	; (8007044 <_strtod_l+0xb24>)
 8006f4c:	f7f9 fb5c 	bl	8000608 <__aeabi_dmul>
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f58:	9618      	str	r6, [sp, #96]	; 0x60
 8006f5a:	9319      	str	r3, [sp, #100]	; 0x64
 8006f5c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006f60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006f64:	e79c      	b.n	8006ea0 <_strtod_l+0x980>
 8006f66:	f1ba 0f01 	cmp.w	sl, #1
 8006f6a:	d102      	bne.n	8006f72 <_strtod_l+0xa52>
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	f43f ad8e 	beq.w	8006a8e <_strtod_l+0x56e>
 8006f72:	2200      	movs	r2, #0
 8006f74:	4b34      	ldr	r3, [pc, #208]	; (8007048 <_strtod_l+0xb28>)
 8006f76:	e78f      	b.n	8006e98 <_strtod_l+0x978>
 8006f78:	2600      	movs	r6, #0
 8006f7a:	4f32      	ldr	r7, [pc, #200]	; (8007044 <_strtod_l+0xb24>)
 8006f7c:	e7ea      	b.n	8006f54 <_strtod_l+0xa34>
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <_strtod_l+0xb24>)
 8006f80:	4630      	mov	r0, r6
 8006f82:	4639      	mov	r1, r7
 8006f84:	2200      	movs	r2, #0
 8006f86:	f7f9 fb3f 	bl	8000608 <__aeabi_dmul>
 8006f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	460f      	mov	r7, r1
 8006f90:	b933      	cbnz	r3, 8006fa0 <_strtod_l+0xa80>
 8006f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f96:	9010      	str	r0, [sp, #64]	; 0x40
 8006f98:	9311      	str	r3, [sp, #68]	; 0x44
 8006f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f9e:	e7df      	b.n	8006f60 <_strtod_l+0xa40>
 8006fa0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006fa4:	e7f9      	b.n	8006f9a <_strtod_l+0xa7a>
 8006fa6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006faa:	9b04      	ldr	r3, [sp, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1ab      	bne.n	8006f08 <_strtod_l+0x9e8>
 8006fb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006fb4:	0d1b      	lsrs	r3, r3, #20
 8006fb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fb8:	051b      	lsls	r3, r3, #20
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	465d      	mov	r5, fp
 8006fbe:	d1a3      	bne.n	8006f08 <_strtod_l+0x9e8>
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f7f9 fdd0 	bl	8000b68 <__aeabi_d2iz>
 8006fc8:	f7f9 fab4 	bl	8000534 <__aeabi_i2d>
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4602      	mov	r2, r0
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7f9 f960 	bl	8000298 <__aeabi_dsub>
 8006fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fda:	4606      	mov	r6, r0
 8006fdc:	460f      	mov	r7, r1
 8006fde:	b933      	cbnz	r3, 8006fee <_strtod_l+0xace>
 8006fe0:	f1ba 0f00 	cmp.w	sl, #0
 8006fe4:	d103      	bne.n	8006fee <_strtod_l+0xace>
 8006fe6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8006fea:	2d00      	cmp	r5, #0
 8006fec:	d06d      	beq.n	80070ca <_strtod_l+0xbaa>
 8006fee:	a30a      	add	r3, pc, #40	; (adr r3, 8007018 <_strtod_l+0xaf8>)
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	f7f9 fd78 	bl	8000aec <__aeabi_dcmplt>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	f47f acb8 	bne.w	8006972 <_strtod_l+0x452>
 8007002:	a307      	add	r3, pc, #28	; (adr r3, 8007020 <_strtod_l+0xb00>)
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	4630      	mov	r0, r6
 800700a:	4639      	mov	r1, r7
 800700c:	f7f9 fd8c 	bl	8000b28 <__aeabi_dcmpgt>
 8007010:	2800      	cmp	r0, #0
 8007012:	f43f af79 	beq.w	8006f08 <_strtod_l+0x9e8>
 8007016:	e4ac      	b.n	8006972 <_strtod_l+0x452>
 8007018:	94a03595 	.word	0x94a03595
 800701c:	3fdfffff 	.word	0x3fdfffff
 8007020:	35afe535 	.word	0x35afe535
 8007024:	3fe00000 	.word	0x3fe00000
 8007028:	000fffff 	.word	0x000fffff
 800702c:	7ff00000 	.word	0x7ff00000
 8007030:	7fefffff 	.word	0x7fefffff
 8007034:	39500000 	.word	0x39500000
 8007038:	3ff00000 	.word	0x3ff00000
 800703c:	7fe00000 	.word	0x7fe00000
 8007040:	7c9fffff 	.word	0x7c9fffff
 8007044:	3fe00000 	.word	0x3fe00000
 8007048:	bff00000 	.word	0xbff00000
 800704c:	9b04      	ldr	r3, [sp, #16]
 800704e:	b333      	cbz	r3, 800709e <_strtod_l+0xb7e>
 8007050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007052:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007056:	d822      	bhi.n	800709e <_strtod_l+0xb7e>
 8007058:	a327      	add	r3, pc, #156	; (adr r3, 80070f8 <_strtod_l+0xbd8>)
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	4630      	mov	r0, r6
 8007060:	4639      	mov	r1, r7
 8007062:	f7f9 fd4d 	bl	8000b00 <__aeabi_dcmple>
 8007066:	b1a0      	cbz	r0, 8007092 <_strtod_l+0xb72>
 8007068:	4639      	mov	r1, r7
 800706a:	4630      	mov	r0, r6
 800706c:	f7f9 fda4 	bl	8000bb8 <__aeabi_d2uiz>
 8007070:	2800      	cmp	r0, #0
 8007072:	bf08      	it	eq
 8007074:	2001      	moveq	r0, #1
 8007076:	f7f9 fa4d 	bl	8000514 <__aeabi_ui2d>
 800707a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800707c:	4606      	mov	r6, r0
 800707e:	460f      	mov	r7, r1
 8007080:	bb03      	cbnz	r3, 80070c4 <_strtod_l+0xba4>
 8007082:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007086:	9012      	str	r0, [sp, #72]	; 0x48
 8007088:	9313      	str	r3, [sp, #76]	; 0x4c
 800708a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800708e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007094:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007096:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	930b      	str	r3, [sp, #44]	; 0x2c
 800709e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80070a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80070a6:	f001 fd29 	bl	8008afc <__ulp>
 80070aa:	4650      	mov	r0, sl
 80070ac:	ec53 2b10 	vmov	r2, r3, d0
 80070b0:	4659      	mov	r1, fp
 80070b2:	f7f9 faa9 	bl	8000608 <__aeabi_dmul>
 80070b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070ba:	f7f9 f8ef 	bl	800029c <__adddf3>
 80070be:	4682      	mov	sl, r0
 80070c0:	468b      	mov	fp, r1
 80070c2:	e772      	b.n	8006faa <_strtod_l+0xa8a>
 80070c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80070c8:	e7df      	b.n	800708a <_strtod_l+0xb6a>
 80070ca:	a30d      	add	r3, pc, #52	; (adr r3, 8007100 <_strtod_l+0xbe0>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f7f9 fd0c 	bl	8000aec <__aeabi_dcmplt>
 80070d4:	e79c      	b.n	8007010 <_strtod_l+0xaf0>
 80070d6:	2300      	movs	r3, #0
 80070d8:	930d      	str	r3, [sp, #52]	; 0x34
 80070da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	f7ff ba61 	b.w	80065a6 <_strtod_l+0x86>
 80070e4:	2b65      	cmp	r3, #101	; 0x65
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	f43f ab4e 	beq.w	800678a <_strtod_l+0x26a>
 80070ee:	2101      	movs	r1, #1
 80070f0:	4614      	mov	r4, r2
 80070f2:	9104      	str	r1, [sp, #16]
 80070f4:	f7ff bacb 	b.w	800668e <_strtod_l+0x16e>
 80070f8:	ffc00000 	.word	0xffc00000
 80070fc:	41dfffff 	.word	0x41dfffff
 8007100:	94a03595 	.word	0x94a03595
 8007104:	3fcfffff 	.word	0x3fcfffff

08007108 <_strtod_r>:
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <_strtod_r+0x18>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	b410      	push	{r4}
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	4c04      	ldr	r4, [pc, #16]	; (8007124 <_strtod_r+0x1c>)
 8007112:	2b00      	cmp	r3, #0
 8007114:	bf08      	it	eq
 8007116:	4623      	moveq	r3, r4
 8007118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800711c:	f7ff ba00 	b.w	8006520 <_strtod_l>
 8007120:	20000064 	.word	0x20000064
 8007124:	200000c8 	.word	0x200000c8

08007128 <_strtol_l.isra.0>:
 8007128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800712c:	4680      	mov	r8, r0
 800712e:	4689      	mov	r9, r1
 8007130:	4692      	mov	sl, r2
 8007132:	461e      	mov	r6, r3
 8007134:	460f      	mov	r7, r1
 8007136:	463d      	mov	r5, r7
 8007138:	9808      	ldr	r0, [sp, #32]
 800713a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800713e:	f7fe fb45 	bl	80057cc <__locale_ctype_ptr_l>
 8007142:	4420      	add	r0, r4
 8007144:	7843      	ldrb	r3, [r0, #1]
 8007146:	f013 0308 	ands.w	r3, r3, #8
 800714a:	d132      	bne.n	80071b2 <_strtol_l.isra.0+0x8a>
 800714c:	2c2d      	cmp	r4, #45	; 0x2d
 800714e:	d132      	bne.n	80071b6 <_strtol_l.isra.0+0x8e>
 8007150:	787c      	ldrb	r4, [r7, #1]
 8007152:	1cbd      	adds	r5, r7, #2
 8007154:	2201      	movs	r2, #1
 8007156:	2e00      	cmp	r6, #0
 8007158:	d05d      	beq.n	8007216 <_strtol_l.isra.0+0xee>
 800715a:	2e10      	cmp	r6, #16
 800715c:	d109      	bne.n	8007172 <_strtol_l.isra.0+0x4a>
 800715e:	2c30      	cmp	r4, #48	; 0x30
 8007160:	d107      	bne.n	8007172 <_strtol_l.isra.0+0x4a>
 8007162:	782b      	ldrb	r3, [r5, #0]
 8007164:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007168:	2b58      	cmp	r3, #88	; 0x58
 800716a:	d14f      	bne.n	800720c <_strtol_l.isra.0+0xe4>
 800716c:	786c      	ldrb	r4, [r5, #1]
 800716e:	2610      	movs	r6, #16
 8007170:	3502      	adds	r5, #2
 8007172:	2a00      	cmp	r2, #0
 8007174:	bf14      	ite	ne
 8007176:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800717a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800717e:	2700      	movs	r7, #0
 8007180:	fbb1 fcf6 	udiv	ip, r1, r6
 8007184:	4638      	mov	r0, r7
 8007186:	fb06 1e1c 	mls	lr, r6, ip, r1
 800718a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800718e:	2b09      	cmp	r3, #9
 8007190:	d817      	bhi.n	80071c2 <_strtol_l.isra.0+0x9a>
 8007192:	461c      	mov	r4, r3
 8007194:	42a6      	cmp	r6, r4
 8007196:	dd23      	ble.n	80071e0 <_strtol_l.isra.0+0xb8>
 8007198:	1c7b      	adds	r3, r7, #1
 800719a:	d007      	beq.n	80071ac <_strtol_l.isra.0+0x84>
 800719c:	4584      	cmp	ip, r0
 800719e:	d31c      	bcc.n	80071da <_strtol_l.isra.0+0xb2>
 80071a0:	d101      	bne.n	80071a6 <_strtol_l.isra.0+0x7e>
 80071a2:	45a6      	cmp	lr, r4
 80071a4:	db19      	blt.n	80071da <_strtol_l.isra.0+0xb2>
 80071a6:	fb00 4006 	mla	r0, r0, r6, r4
 80071aa:	2701      	movs	r7, #1
 80071ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071b0:	e7eb      	b.n	800718a <_strtol_l.isra.0+0x62>
 80071b2:	462f      	mov	r7, r5
 80071b4:	e7bf      	b.n	8007136 <_strtol_l.isra.0+0xe>
 80071b6:	2c2b      	cmp	r4, #43	; 0x2b
 80071b8:	bf04      	itt	eq
 80071ba:	1cbd      	addeq	r5, r7, #2
 80071bc:	787c      	ldrbeq	r4, [r7, #1]
 80071be:	461a      	mov	r2, r3
 80071c0:	e7c9      	b.n	8007156 <_strtol_l.isra.0+0x2e>
 80071c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80071c6:	2b19      	cmp	r3, #25
 80071c8:	d801      	bhi.n	80071ce <_strtol_l.isra.0+0xa6>
 80071ca:	3c37      	subs	r4, #55	; 0x37
 80071cc:	e7e2      	b.n	8007194 <_strtol_l.isra.0+0x6c>
 80071ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80071d2:	2b19      	cmp	r3, #25
 80071d4:	d804      	bhi.n	80071e0 <_strtol_l.isra.0+0xb8>
 80071d6:	3c57      	subs	r4, #87	; 0x57
 80071d8:	e7dc      	b.n	8007194 <_strtol_l.isra.0+0x6c>
 80071da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80071de:	e7e5      	b.n	80071ac <_strtol_l.isra.0+0x84>
 80071e0:	1c7b      	adds	r3, r7, #1
 80071e2:	d108      	bne.n	80071f6 <_strtol_l.isra.0+0xce>
 80071e4:	2322      	movs	r3, #34	; 0x22
 80071e6:	f8c8 3000 	str.w	r3, [r8]
 80071ea:	4608      	mov	r0, r1
 80071ec:	f1ba 0f00 	cmp.w	sl, #0
 80071f0:	d107      	bne.n	8007202 <_strtol_l.isra.0+0xda>
 80071f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f6:	b102      	cbz	r2, 80071fa <_strtol_l.isra.0+0xd2>
 80071f8:	4240      	negs	r0, r0
 80071fa:	f1ba 0f00 	cmp.w	sl, #0
 80071fe:	d0f8      	beq.n	80071f2 <_strtol_l.isra.0+0xca>
 8007200:	b10f      	cbz	r7, 8007206 <_strtol_l.isra.0+0xde>
 8007202:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007206:	f8ca 9000 	str.w	r9, [sl]
 800720a:	e7f2      	b.n	80071f2 <_strtol_l.isra.0+0xca>
 800720c:	2430      	movs	r4, #48	; 0x30
 800720e:	2e00      	cmp	r6, #0
 8007210:	d1af      	bne.n	8007172 <_strtol_l.isra.0+0x4a>
 8007212:	2608      	movs	r6, #8
 8007214:	e7ad      	b.n	8007172 <_strtol_l.isra.0+0x4a>
 8007216:	2c30      	cmp	r4, #48	; 0x30
 8007218:	d0a3      	beq.n	8007162 <_strtol_l.isra.0+0x3a>
 800721a:	260a      	movs	r6, #10
 800721c:	e7a9      	b.n	8007172 <_strtol_l.isra.0+0x4a>
	...

08007220 <_strtol_r>:
 8007220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007222:	4c06      	ldr	r4, [pc, #24]	; (800723c <_strtol_r+0x1c>)
 8007224:	4d06      	ldr	r5, [pc, #24]	; (8007240 <_strtol_r+0x20>)
 8007226:	6824      	ldr	r4, [r4, #0]
 8007228:	6a24      	ldr	r4, [r4, #32]
 800722a:	2c00      	cmp	r4, #0
 800722c:	bf08      	it	eq
 800722e:	462c      	moveq	r4, r5
 8007230:	9400      	str	r4, [sp, #0]
 8007232:	f7ff ff79 	bl	8007128 <_strtol_l.isra.0>
 8007236:	b003      	add	sp, #12
 8007238:	bd30      	pop	{r4, r5, pc}
 800723a:	bf00      	nop
 800723c:	20000064 	.word	0x20000064
 8007240:	200000c8 	.word	0x200000c8

08007244 <__ascii_wctomb>:
 8007244:	b149      	cbz	r1, 800725a <__ascii_wctomb+0x16>
 8007246:	2aff      	cmp	r2, #255	; 0xff
 8007248:	bf85      	ittet	hi
 800724a:	238a      	movhi	r3, #138	; 0x8a
 800724c:	6003      	strhi	r3, [r0, #0]
 800724e:	700a      	strbls	r2, [r1, #0]
 8007250:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007254:	bf98      	it	ls
 8007256:	2001      	movls	r0, #1
 8007258:	4770      	bx	lr
 800725a:	4608      	mov	r0, r1
 800725c:	4770      	bx	lr

0800725e <quorem>:
 800725e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007262:	6903      	ldr	r3, [r0, #16]
 8007264:	690c      	ldr	r4, [r1, #16]
 8007266:	42a3      	cmp	r3, r4
 8007268:	4680      	mov	r8, r0
 800726a:	f2c0 8082 	blt.w	8007372 <quorem+0x114>
 800726e:	3c01      	subs	r4, #1
 8007270:	f101 0714 	add.w	r7, r1, #20
 8007274:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007278:	f100 0614 	add.w	r6, r0, #20
 800727c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007280:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007284:	eb06 030c 	add.w	r3, r6, ip
 8007288:	3501      	adds	r5, #1
 800728a:	eb07 090c 	add.w	r9, r7, ip
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	fbb0 f5f5 	udiv	r5, r0, r5
 8007294:	b395      	cbz	r5, 80072fc <quorem+0x9e>
 8007296:	f04f 0a00 	mov.w	sl, #0
 800729a:	4638      	mov	r0, r7
 800729c:	46b6      	mov	lr, r6
 800729e:	46d3      	mov	fp, sl
 80072a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80072a4:	b293      	uxth	r3, r2
 80072a6:	fb05 a303 	mla	r3, r5, r3, sl
 80072aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	ebab 0303 	sub.w	r3, fp, r3
 80072b4:	0c12      	lsrs	r2, r2, #16
 80072b6:	f8de b000 	ldr.w	fp, [lr]
 80072ba:	fb05 a202 	mla	r2, r5, r2, sl
 80072be:	fa13 f38b 	uxtah	r3, r3, fp
 80072c2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80072c6:	fa1f fb82 	uxth.w	fp, r2
 80072ca:	f8de 2000 	ldr.w	r2, [lr]
 80072ce:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80072d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072dc:	4581      	cmp	r9, r0
 80072de:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80072e2:	f84e 3b04 	str.w	r3, [lr], #4
 80072e6:	d2db      	bcs.n	80072a0 <quorem+0x42>
 80072e8:	f856 300c 	ldr.w	r3, [r6, ip]
 80072ec:	b933      	cbnz	r3, 80072fc <quorem+0x9e>
 80072ee:	9b01      	ldr	r3, [sp, #4]
 80072f0:	3b04      	subs	r3, #4
 80072f2:	429e      	cmp	r6, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	d330      	bcc.n	800735a <quorem+0xfc>
 80072f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80072fc:	4640      	mov	r0, r8
 80072fe:	f001 fb85 	bl	8008a0c <__mcmp>
 8007302:	2800      	cmp	r0, #0
 8007304:	db25      	blt.n	8007352 <quorem+0xf4>
 8007306:	3501      	adds	r5, #1
 8007308:	4630      	mov	r0, r6
 800730a:	f04f 0c00 	mov.w	ip, #0
 800730e:	f857 2b04 	ldr.w	r2, [r7], #4
 8007312:	f8d0 e000 	ldr.w	lr, [r0]
 8007316:	b293      	uxth	r3, r2
 8007318:	ebac 0303 	sub.w	r3, ip, r3
 800731c:	0c12      	lsrs	r2, r2, #16
 800731e:	fa13 f38e 	uxtah	r3, r3, lr
 8007322:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007326:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800732a:	b29b      	uxth	r3, r3
 800732c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007330:	45b9      	cmp	r9, r7
 8007332:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007336:	f840 3b04 	str.w	r3, [r0], #4
 800733a:	d2e8      	bcs.n	800730e <quorem+0xb0>
 800733c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007340:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007344:	b92a      	cbnz	r2, 8007352 <quorem+0xf4>
 8007346:	3b04      	subs	r3, #4
 8007348:	429e      	cmp	r6, r3
 800734a:	461a      	mov	r2, r3
 800734c:	d30b      	bcc.n	8007366 <quorem+0x108>
 800734e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007352:	4628      	mov	r0, r5
 8007354:	b003      	add	sp, #12
 8007356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735a:	6812      	ldr	r2, [r2, #0]
 800735c:	3b04      	subs	r3, #4
 800735e:	2a00      	cmp	r2, #0
 8007360:	d1ca      	bne.n	80072f8 <quorem+0x9a>
 8007362:	3c01      	subs	r4, #1
 8007364:	e7c5      	b.n	80072f2 <quorem+0x94>
 8007366:	6812      	ldr	r2, [r2, #0]
 8007368:	3b04      	subs	r3, #4
 800736a:	2a00      	cmp	r2, #0
 800736c:	d1ef      	bne.n	800734e <quorem+0xf0>
 800736e:	3c01      	subs	r4, #1
 8007370:	e7ea      	b.n	8007348 <quorem+0xea>
 8007372:	2000      	movs	r0, #0
 8007374:	e7ee      	b.n	8007354 <quorem+0xf6>
	...

08007378 <_dtoa_r>:
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	ec57 6b10 	vmov	r6, r7, d0
 8007380:	b097      	sub	sp, #92	; 0x5c
 8007382:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007384:	9106      	str	r1, [sp, #24]
 8007386:	4604      	mov	r4, r0
 8007388:	920b      	str	r2, [sp, #44]	; 0x2c
 800738a:	9312      	str	r3, [sp, #72]	; 0x48
 800738c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007390:	e9cd 6700 	strd	r6, r7, [sp]
 8007394:	b93d      	cbnz	r5, 80073a6 <_dtoa_r+0x2e>
 8007396:	2010      	movs	r0, #16
 8007398:	f001 f8dc 	bl	8008554 <malloc>
 800739c:	6260      	str	r0, [r4, #36]	; 0x24
 800739e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073a2:	6005      	str	r5, [r0, #0]
 80073a4:	60c5      	str	r5, [r0, #12]
 80073a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073a8:	6819      	ldr	r1, [r3, #0]
 80073aa:	b151      	cbz	r1, 80073c2 <_dtoa_r+0x4a>
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	604a      	str	r2, [r1, #4]
 80073b0:	2301      	movs	r3, #1
 80073b2:	4093      	lsls	r3, r2
 80073b4:	608b      	str	r3, [r1, #8]
 80073b6:	4620      	mov	r0, r4
 80073b8:	f001 f908 	bl	80085cc <_Bfree>
 80073bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	1e3b      	subs	r3, r7, #0
 80073c4:	bfbb      	ittet	lt
 80073c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073ca:	9301      	strlt	r3, [sp, #4]
 80073cc:	2300      	movge	r3, #0
 80073ce:	2201      	movlt	r2, #1
 80073d0:	bfac      	ite	ge
 80073d2:	f8c8 3000 	strge.w	r3, [r8]
 80073d6:	f8c8 2000 	strlt.w	r2, [r8]
 80073da:	4baf      	ldr	r3, [pc, #700]	; (8007698 <_dtoa_r+0x320>)
 80073dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80073e0:	ea33 0308 	bics.w	r3, r3, r8
 80073e4:	d114      	bne.n	8007410 <_dtoa_r+0x98>
 80073e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	9b00      	ldr	r3, [sp, #0]
 80073f0:	b923      	cbnz	r3, 80073fc <_dtoa_r+0x84>
 80073f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f000 8542 	beq.w	8007e80 <_dtoa_r+0xb08>
 80073fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80076ac <_dtoa_r+0x334>
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 8544 	beq.w	8007e90 <_dtoa_r+0xb18>
 8007408:	f10b 0303 	add.w	r3, fp, #3
 800740c:	f000 bd3e 	b.w	8007e8c <_dtoa_r+0xb14>
 8007410:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007414:	2200      	movs	r2, #0
 8007416:	2300      	movs	r3, #0
 8007418:	4630      	mov	r0, r6
 800741a:	4639      	mov	r1, r7
 800741c:	f7f9 fb5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007420:	4681      	mov	r9, r0
 8007422:	b168      	cbz	r0, 8007440 <_dtoa_r+0xc8>
 8007424:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007426:	2301      	movs	r3, #1
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8524 	beq.w	8007e7a <_dtoa_r+0xb02>
 8007432:	4b9a      	ldr	r3, [pc, #616]	; (800769c <_dtoa_r+0x324>)
 8007434:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007436:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	f000 bd28 	b.w	8007e90 <_dtoa_r+0xb18>
 8007440:	aa14      	add	r2, sp, #80	; 0x50
 8007442:	a915      	add	r1, sp, #84	; 0x54
 8007444:	ec47 6b10 	vmov	d0, r6, r7
 8007448:	4620      	mov	r0, r4
 800744a:	f001 fbcd 	bl	8008be8 <__d2b>
 800744e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007452:	9004      	str	r0, [sp, #16]
 8007454:	2d00      	cmp	r5, #0
 8007456:	d07c      	beq.n	8007552 <_dtoa_r+0x1da>
 8007458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800745c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007460:	46b2      	mov	sl, r6
 8007462:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800746a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800746e:	2200      	movs	r2, #0
 8007470:	4b8b      	ldr	r3, [pc, #556]	; (80076a0 <_dtoa_r+0x328>)
 8007472:	4650      	mov	r0, sl
 8007474:	4659      	mov	r1, fp
 8007476:	f7f8 ff0f 	bl	8000298 <__aeabi_dsub>
 800747a:	a381      	add	r3, pc, #516	; (adr r3, 8007680 <_dtoa_r+0x308>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f7f9 f8c2 	bl	8000608 <__aeabi_dmul>
 8007484:	a380      	add	r3, pc, #512	; (adr r3, 8007688 <_dtoa_r+0x310>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	f7f8 ff07 	bl	800029c <__adddf3>
 800748e:	4606      	mov	r6, r0
 8007490:	4628      	mov	r0, r5
 8007492:	460f      	mov	r7, r1
 8007494:	f7f9 f84e 	bl	8000534 <__aeabi_i2d>
 8007498:	a37d      	add	r3, pc, #500	; (adr r3, 8007690 <_dtoa_r+0x318>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f9 f8b3 	bl	8000608 <__aeabi_dmul>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4630      	mov	r0, r6
 80074a8:	4639      	mov	r1, r7
 80074aa:	f7f8 fef7 	bl	800029c <__adddf3>
 80074ae:	4606      	mov	r6, r0
 80074b0:	460f      	mov	r7, r1
 80074b2:	f7f9 fb59 	bl	8000b68 <__aeabi_d2iz>
 80074b6:	2200      	movs	r2, #0
 80074b8:	4682      	mov	sl, r0
 80074ba:	2300      	movs	r3, #0
 80074bc:	4630      	mov	r0, r6
 80074be:	4639      	mov	r1, r7
 80074c0:	f7f9 fb14 	bl	8000aec <__aeabi_dcmplt>
 80074c4:	b148      	cbz	r0, 80074da <_dtoa_r+0x162>
 80074c6:	4650      	mov	r0, sl
 80074c8:	f7f9 f834 	bl	8000534 <__aeabi_i2d>
 80074cc:	4632      	mov	r2, r6
 80074ce:	463b      	mov	r3, r7
 80074d0:	f7f9 fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 80074d4:	b908      	cbnz	r0, 80074da <_dtoa_r+0x162>
 80074d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80074da:	f1ba 0f16 	cmp.w	sl, #22
 80074de:	d859      	bhi.n	8007594 <_dtoa_r+0x21c>
 80074e0:	4970      	ldr	r1, [pc, #448]	; (80076a4 <_dtoa_r+0x32c>)
 80074e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80074e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ee:	f7f9 fb1b 	bl	8000b28 <__aeabi_dcmpgt>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d050      	beq.n	8007598 <_dtoa_r+0x220>
 80074f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80074fa:	2300      	movs	r3, #0
 80074fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80074fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007500:	1b5d      	subs	r5, r3, r5
 8007502:	f1b5 0801 	subs.w	r8, r5, #1
 8007506:	bf49      	itett	mi
 8007508:	f1c5 0301 	rsbmi	r3, r5, #1
 800750c:	2300      	movpl	r3, #0
 800750e:	9305      	strmi	r3, [sp, #20]
 8007510:	f04f 0800 	movmi.w	r8, #0
 8007514:	bf58      	it	pl
 8007516:	9305      	strpl	r3, [sp, #20]
 8007518:	f1ba 0f00 	cmp.w	sl, #0
 800751c:	db3e      	blt.n	800759c <_dtoa_r+0x224>
 800751e:	2300      	movs	r3, #0
 8007520:	44d0      	add	r8, sl
 8007522:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	9b06      	ldr	r3, [sp, #24]
 800752a:	2b09      	cmp	r3, #9
 800752c:	f200 8090 	bhi.w	8007650 <_dtoa_r+0x2d8>
 8007530:	2b05      	cmp	r3, #5
 8007532:	bfc4      	itt	gt
 8007534:	3b04      	subgt	r3, #4
 8007536:	9306      	strgt	r3, [sp, #24]
 8007538:	9b06      	ldr	r3, [sp, #24]
 800753a:	f1a3 0302 	sub.w	r3, r3, #2
 800753e:	bfcc      	ite	gt
 8007540:	2500      	movgt	r5, #0
 8007542:	2501      	movle	r5, #1
 8007544:	2b03      	cmp	r3, #3
 8007546:	f200 808f 	bhi.w	8007668 <_dtoa_r+0x2f0>
 800754a:	e8df f003 	tbb	[pc, r3]
 800754e:	7f7d      	.short	0x7f7d
 8007550:	7131      	.short	0x7131
 8007552:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007556:	441d      	add	r5, r3
 8007558:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800755c:	2820      	cmp	r0, #32
 800755e:	dd13      	ble.n	8007588 <_dtoa_r+0x210>
 8007560:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007564:	9b00      	ldr	r3, [sp, #0]
 8007566:	fa08 f800 	lsl.w	r8, r8, r0
 800756a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800756e:	fa23 f000 	lsr.w	r0, r3, r0
 8007572:	ea48 0000 	orr.w	r0, r8, r0
 8007576:	f7f8 ffcd 	bl	8000514 <__aeabi_ui2d>
 800757a:	2301      	movs	r3, #1
 800757c:	4682      	mov	sl, r0
 800757e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007582:	3d01      	subs	r5, #1
 8007584:	9313      	str	r3, [sp, #76]	; 0x4c
 8007586:	e772      	b.n	800746e <_dtoa_r+0xf6>
 8007588:	9b00      	ldr	r3, [sp, #0]
 800758a:	f1c0 0020 	rsb	r0, r0, #32
 800758e:	fa03 f000 	lsl.w	r0, r3, r0
 8007592:	e7f0      	b.n	8007576 <_dtoa_r+0x1fe>
 8007594:	2301      	movs	r3, #1
 8007596:	e7b1      	b.n	80074fc <_dtoa_r+0x184>
 8007598:	900f      	str	r0, [sp, #60]	; 0x3c
 800759a:	e7b0      	b.n	80074fe <_dtoa_r+0x186>
 800759c:	9b05      	ldr	r3, [sp, #20]
 800759e:	eba3 030a 	sub.w	r3, r3, sl
 80075a2:	9305      	str	r3, [sp, #20]
 80075a4:	f1ca 0300 	rsb	r3, sl, #0
 80075a8:	9307      	str	r3, [sp, #28]
 80075aa:	2300      	movs	r3, #0
 80075ac:	930e      	str	r3, [sp, #56]	; 0x38
 80075ae:	e7bb      	b.n	8007528 <_dtoa_r+0x1b0>
 80075b0:	2301      	movs	r3, #1
 80075b2:	930a      	str	r3, [sp, #40]	; 0x28
 80075b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	dd59      	ble.n	800766e <_dtoa_r+0x2f6>
 80075ba:	9302      	str	r3, [sp, #8]
 80075bc:	4699      	mov	r9, r3
 80075be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075c0:	2200      	movs	r2, #0
 80075c2:	6072      	str	r2, [r6, #4]
 80075c4:	2204      	movs	r2, #4
 80075c6:	f102 0014 	add.w	r0, r2, #20
 80075ca:	4298      	cmp	r0, r3
 80075cc:	6871      	ldr	r1, [r6, #4]
 80075ce:	d953      	bls.n	8007678 <_dtoa_r+0x300>
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 ffc7 	bl	8008564 <_Balloc>
 80075d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d8:	6030      	str	r0, [r6, #0]
 80075da:	f1b9 0f0e 	cmp.w	r9, #14
 80075de:	f8d3 b000 	ldr.w	fp, [r3]
 80075e2:	f200 80e6 	bhi.w	80077b2 <_dtoa_r+0x43a>
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	f000 80e3 	beq.w	80077b2 <_dtoa_r+0x43a>
 80075ec:	ed9d 7b00 	vldr	d7, [sp]
 80075f0:	f1ba 0f00 	cmp.w	sl, #0
 80075f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80075f8:	dd74      	ble.n	80076e4 <_dtoa_r+0x36c>
 80075fa:	4a2a      	ldr	r2, [pc, #168]	; (80076a4 <_dtoa_r+0x32c>)
 80075fc:	f00a 030f 	and.w	r3, sl, #15
 8007600:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007604:	ed93 7b00 	vldr	d7, [r3]
 8007608:	ea4f 162a 	mov.w	r6, sl, asr #4
 800760c:	06f0      	lsls	r0, r6, #27
 800760e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007612:	d565      	bpl.n	80076e0 <_dtoa_r+0x368>
 8007614:	4b24      	ldr	r3, [pc, #144]	; (80076a8 <_dtoa_r+0x330>)
 8007616:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800761a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800761e:	f7f9 f91d 	bl	800085c <__aeabi_ddiv>
 8007622:	e9cd 0100 	strd	r0, r1, [sp]
 8007626:	f006 060f 	and.w	r6, r6, #15
 800762a:	2503      	movs	r5, #3
 800762c:	4f1e      	ldr	r7, [pc, #120]	; (80076a8 <_dtoa_r+0x330>)
 800762e:	e04c      	b.n	80076ca <_dtoa_r+0x352>
 8007630:	2301      	movs	r3, #1
 8007632:	930a      	str	r3, [sp, #40]	; 0x28
 8007634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007636:	4453      	add	r3, sl
 8007638:	f103 0901 	add.w	r9, r3, #1
 800763c:	9302      	str	r3, [sp, #8]
 800763e:	464b      	mov	r3, r9
 8007640:	2b01      	cmp	r3, #1
 8007642:	bfb8      	it	lt
 8007644:	2301      	movlt	r3, #1
 8007646:	e7ba      	b.n	80075be <_dtoa_r+0x246>
 8007648:	2300      	movs	r3, #0
 800764a:	e7b2      	b.n	80075b2 <_dtoa_r+0x23a>
 800764c:	2300      	movs	r3, #0
 800764e:	e7f0      	b.n	8007632 <_dtoa_r+0x2ba>
 8007650:	2501      	movs	r5, #1
 8007652:	2300      	movs	r3, #0
 8007654:	9306      	str	r3, [sp, #24]
 8007656:	950a      	str	r5, [sp, #40]	; 0x28
 8007658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800765c:	9302      	str	r3, [sp, #8]
 800765e:	4699      	mov	r9, r3
 8007660:	2200      	movs	r2, #0
 8007662:	2312      	movs	r3, #18
 8007664:	920b      	str	r2, [sp, #44]	; 0x2c
 8007666:	e7aa      	b.n	80075be <_dtoa_r+0x246>
 8007668:	2301      	movs	r3, #1
 800766a:	930a      	str	r3, [sp, #40]	; 0x28
 800766c:	e7f4      	b.n	8007658 <_dtoa_r+0x2e0>
 800766e:	2301      	movs	r3, #1
 8007670:	9302      	str	r3, [sp, #8]
 8007672:	4699      	mov	r9, r3
 8007674:	461a      	mov	r2, r3
 8007676:	e7f5      	b.n	8007664 <_dtoa_r+0x2ec>
 8007678:	3101      	adds	r1, #1
 800767a:	6071      	str	r1, [r6, #4]
 800767c:	0052      	lsls	r2, r2, #1
 800767e:	e7a2      	b.n	80075c6 <_dtoa_r+0x24e>
 8007680:	636f4361 	.word	0x636f4361
 8007684:	3fd287a7 	.word	0x3fd287a7
 8007688:	8b60c8b3 	.word	0x8b60c8b3
 800768c:	3fc68a28 	.word	0x3fc68a28
 8007690:	509f79fb 	.word	0x509f79fb
 8007694:	3fd34413 	.word	0x3fd34413
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	080096fb 	.word	0x080096fb
 80076a0:	3ff80000 	.word	0x3ff80000
 80076a4:	08009910 	.word	0x08009910
 80076a8:	080098e8 	.word	0x080098e8
 80076ac:	08009882 	.word	0x08009882
 80076b0:	07f1      	lsls	r1, r6, #31
 80076b2:	d508      	bpl.n	80076c6 <_dtoa_r+0x34e>
 80076b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076bc:	f7f8 ffa4 	bl	8000608 <__aeabi_dmul>
 80076c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076c4:	3501      	adds	r5, #1
 80076c6:	1076      	asrs	r6, r6, #1
 80076c8:	3708      	adds	r7, #8
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	d1f0      	bne.n	80076b0 <_dtoa_r+0x338>
 80076ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076d6:	f7f9 f8c1 	bl	800085c <__aeabi_ddiv>
 80076da:	e9cd 0100 	strd	r0, r1, [sp]
 80076de:	e01a      	b.n	8007716 <_dtoa_r+0x39e>
 80076e0:	2502      	movs	r5, #2
 80076e2:	e7a3      	b.n	800762c <_dtoa_r+0x2b4>
 80076e4:	f000 80a0 	beq.w	8007828 <_dtoa_r+0x4b0>
 80076e8:	f1ca 0600 	rsb	r6, sl, #0
 80076ec:	4b9f      	ldr	r3, [pc, #636]	; (800796c <_dtoa_r+0x5f4>)
 80076ee:	4fa0      	ldr	r7, [pc, #640]	; (8007970 <_dtoa_r+0x5f8>)
 80076f0:	f006 020f 	and.w	r2, r6, #15
 80076f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007700:	f7f8 ff82 	bl	8000608 <__aeabi_dmul>
 8007704:	e9cd 0100 	strd	r0, r1, [sp]
 8007708:	1136      	asrs	r6, r6, #4
 800770a:	2300      	movs	r3, #0
 800770c:	2502      	movs	r5, #2
 800770e:	2e00      	cmp	r6, #0
 8007710:	d17f      	bne.n	8007812 <_dtoa_r+0x49a>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e1      	bne.n	80076da <_dtoa_r+0x362>
 8007716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 8087 	beq.w	800782c <_dtoa_r+0x4b4>
 800771e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007722:	2200      	movs	r2, #0
 8007724:	4b93      	ldr	r3, [pc, #588]	; (8007974 <_dtoa_r+0x5fc>)
 8007726:	4630      	mov	r0, r6
 8007728:	4639      	mov	r1, r7
 800772a:	f7f9 f9df 	bl	8000aec <__aeabi_dcmplt>
 800772e:	2800      	cmp	r0, #0
 8007730:	d07c      	beq.n	800782c <_dtoa_r+0x4b4>
 8007732:	f1b9 0f00 	cmp.w	r9, #0
 8007736:	d079      	beq.n	800782c <_dtoa_r+0x4b4>
 8007738:	9b02      	ldr	r3, [sp, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	dd35      	ble.n	80077aa <_dtoa_r+0x432>
 800773e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007742:	9308      	str	r3, [sp, #32]
 8007744:	4639      	mov	r1, r7
 8007746:	2200      	movs	r2, #0
 8007748:	4b8b      	ldr	r3, [pc, #556]	; (8007978 <_dtoa_r+0x600>)
 800774a:	4630      	mov	r0, r6
 800774c:	f7f8 ff5c 	bl	8000608 <__aeabi_dmul>
 8007750:	e9cd 0100 	strd	r0, r1, [sp]
 8007754:	9f02      	ldr	r7, [sp, #8]
 8007756:	3501      	adds	r5, #1
 8007758:	4628      	mov	r0, r5
 800775a:	f7f8 feeb 	bl	8000534 <__aeabi_i2d>
 800775e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007762:	f7f8 ff51 	bl	8000608 <__aeabi_dmul>
 8007766:	2200      	movs	r2, #0
 8007768:	4b84      	ldr	r3, [pc, #528]	; (800797c <_dtoa_r+0x604>)
 800776a:	f7f8 fd97 	bl	800029c <__adddf3>
 800776e:	4605      	mov	r5, r0
 8007770:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007774:	2f00      	cmp	r7, #0
 8007776:	d15d      	bne.n	8007834 <_dtoa_r+0x4bc>
 8007778:	2200      	movs	r2, #0
 800777a:	4b81      	ldr	r3, [pc, #516]	; (8007980 <_dtoa_r+0x608>)
 800777c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007780:	f7f8 fd8a 	bl	8000298 <__aeabi_dsub>
 8007784:	462a      	mov	r2, r5
 8007786:	4633      	mov	r3, r6
 8007788:	e9cd 0100 	strd	r0, r1, [sp]
 800778c:	f7f9 f9cc 	bl	8000b28 <__aeabi_dcmpgt>
 8007790:	2800      	cmp	r0, #0
 8007792:	f040 8288 	bne.w	8007ca6 <_dtoa_r+0x92e>
 8007796:	462a      	mov	r2, r5
 8007798:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800779c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077a0:	f7f9 f9a4 	bl	8000aec <__aeabi_dcmplt>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f040 827c 	bne.w	8007ca2 <_dtoa_r+0x92a>
 80077aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077ae:	e9cd 2300 	strd	r2, r3, [sp]
 80077b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f2c0 8150 	blt.w	8007a5a <_dtoa_r+0x6e2>
 80077ba:	f1ba 0f0e 	cmp.w	sl, #14
 80077be:	f300 814c 	bgt.w	8007a5a <_dtoa_r+0x6e2>
 80077c2:	4b6a      	ldr	r3, [pc, #424]	; (800796c <_dtoa_r+0x5f4>)
 80077c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80077c8:	ed93 7b00 	vldr	d7, [r3]
 80077cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80077d4:	f280 80d8 	bge.w	8007988 <_dtoa_r+0x610>
 80077d8:	f1b9 0f00 	cmp.w	r9, #0
 80077dc:	f300 80d4 	bgt.w	8007988 <_dtoa_r+0x610>
 80077e0:	f040 825e 	bne.w	8007ca0 <_dtoa_r+0x928>
 80077e4:	2200      	movs	r2, #0
 80077e6:	4b66      	ldr	r3, [pc, #408]	; (8007980 <_dtoa_r+0x608>)
 80077e8:	ec51 0b17 	vmov	r0, r1, d7
 80077ec:	f7f8 ff0c 	bl	8000608 <__aeabi_dmul>
 80077f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077f4:	f7f9 f98e 	bl	8000b14 <__aeabi_dcmpge>
 80077f8:	464f      	mov	r7, r9
 80077fa:	464e      	mov	r6, r9
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f040 8234 	bne.w	8007c6a <_dtoa_r+0x8f2>
 8007802:	2331      	movs	r3, #49	; 0x31
 8007804:	f10b 0501 	add.w	r5, fp, #1
 8007808:	f88b 3000 	strb.w	r3, [fp]
 800780c:	f10a 0a01 	add.w	sl, sl, #1
 8007810:	e22f      	b.n	8007c72 <_dtoa_r+0x8fa>
 8007812:	07f2      	lsls	r2, r6, #31
 8007814:	d505      	bpl.n	8007822 <_dtoa_r+0x4aa>
 8007816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800781a:	f7f8 fef5 	bl	8000608 <__aeabi_dmul>
 800781e:	3501      	adds	r5, #1
 8007820:	2301      	movs	r3, #1
 8007822:	1076      	asrs	r6, r6, #1
 8007824:	3708      	adds	r7, #8
 8007826:	e772      	b.n	800770e <_dtoa_r+0x396>
 8007828:	2502      	movs	r5, #2
 800782a:	e774      	b.n	8007716 <_dtoa_r+0x39e>
 800782c:	f8cd a020 	str.w	sl, [sp, #32]
 8007830:	464f      	mov	r7, r9
 8007832:	e791      	b.n	8007758 <_dtoa_r+0x3e0>
 8007834:	4b4d      	ldr	r3, [pc, #308]	; (800796c <_dtoa_r+0x5f4>)
 8007836:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800783a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800783e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007840:	2b00      	cmp	r3, #0
 8007842:	d047      	beq.n	80078d4 <_dtoa_r+0x55c>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	2000      	movs	r0, #0
 800784a:	494e      	ldr	r1, [pc, #312]	; (8007984 <_dtoa_r+0x60c>)
 800784c:	f7f9 f806 	bl	800085c <__aeabi_ddiv>
 8007850:	462a      	mov	r2, r5
 8007852:	4633      	mov	r3, r6
 8007854:	f7f8 fd20 	bl	8000298 <__aeabi_dsub>
 8007858:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800785c:	465d      	mov	r5, fp
 800785e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007862:	f7f9 f981 	bl	8000b68 <__aeabi_d2iz>
 8007866:	4606      	mov	r6, r0
 8007868:	f7f8 fe64 	bl	8000534 <__aeabi_i2d>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007874:	f7f8 fd10 	bl	8000298 <__aeabi_dsub>
 8007878:	3630      	adds	r6, #48	; 0x30
 800787a:	f805 6b01 	strb.w	r6, [r5], #1
 800787e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007882:	e9cd 0100 	strd	r0, r1, [sp]
 8007886:	f7f9 f931 	bl	8000aec <__aeabi_dcmplt>
 800788a:	2800      	cmp	r0, #0
 800788c:	d163      	bne.n	8007956 <_dtoa_r+0x5de>
 800788e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007892:	2000      	movs	r0, #0
 8007894:	4937      	ldr	r1, [pc, #220]	; (8007974 <_dtoa_r+0x5fc>)
 8007896:	f7f8 fcff 	bl	8000298 <__aeabi_dsub>
 800789a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800789e:	f7f9 f925 	bl	8000aec <__aeabi_dcmplt>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	f040 80b7 	bne.w	8007a16 <_dtoa_r+0x69e>
 80078a8:	eba5 030b 	sub.w	r3, r5, fp
 80078ac:	429f      	cmp	r7, r3
 80078ae:	f77f af7c 	ble.w	80077aa <_dtoa_r+0x432>
 80078b2:	2200      	movs	r2, #0
 80078b4:	4b30      	ldr	r3, [pc, #192]	; (8007978 <_dtoa_r+0x600>)
 80078b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078ba:	f7f8 fea5 	bl	8000608 <__aeabi_dmul>
 80078be:	2200      	movs	r2, #0
 80078c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078c4:	4b2c      	ldr	r3, [pc, #176]	; (8007978 <_dtoa_r+0x600>)
 80078c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078ca:	f7f8 fe9d 	bl	8000608 <__aeabi_dmul>
 80078ce:	e9cd 0100 	strd	r0, r1, [sp]
 80078d2:	e7c4      	b.n	800785e <_dtoa_r+0x4e6>
 80078d4:	462a      	mov	r2, r5
 80078d6:	4633      	mov	r3, r6
 80078d8:	f7f8 fe96 	bl	8000608 <__aeabi_dmul>
 80078dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078e0:	eb0b 0507 	add.w	r5, fp, r7
 80078e4:	465e      	mov	r6, fp
 80078e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078ea:	f7f9 f93d 	bl	8000b68 <__aeabi_d2iz>
 80078ee:	4607      	mov	r7, r0
 80078f0:	f7f8 fe20 	bl	8000534 <__aeabi_i2d>
 80078f4:	3730      	adds	r7, #48	; 0x30
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078fe:	f7f8 fccb 	bl	8000298 <__aeabi_dsub>
 8007902:	f806 7b01 	strb.w	r7, [r6], #1
 8007906:	42ae      	cmp	r6, r5
 8007908:	e9cd 0100 	strd	r0, r1, [sp]
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	d126      	bne.n	8007960 <_dtoa_r+0x5e8>
 8007912:	4b1c      	ldr	r3, [pc, #112]	; (8007984 <_dtoa_r+0x60c>)
 8007914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007918:	f7f8 fcc0 	bl	800029c <__adddf3>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007924:	f7f9 f900 	bl	8000b28 <__aeabi_dcmpgt>
 8007928:	2800      	cmp	r0, #0
 800792a:	d174      	bne.n	8007a16 <_dtoa_r+0x69e>
 800792c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007930:	2000      	movs	r0, #0
 8007932:	4914      	ldr	r1, [pc, #80]	; (8007984 <_dtoa_r+0x60c>)
 8007934:	f7f8 fcb0 	bl	8000298 <__aeabi_dsub>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007940:	f7f9 f8d4 	bl	8000aec <__aeabi_dcmplt>
 8007944:	2800      	cmp	r0, #0
 8007946:	f43f af30 	beq.w	80077aa <_dtoa_r+0x432>
 800794a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800794e:	2b30      	cmp	r3, #48	; 0x30
 8007950:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007954:	d002      	beq.n	800795c <_dtoa_r+0x5e4>
 8007956:	f8dd a020 	ldr.w	sl, [sp, #32]
 800795a:	e04a      	b.n	80079f2 <_dtoa_r+0x67a>
 800795c:	4615      	mov	r5, r2
 800795e:	e7f4      	b.n	800794a <_dtoa_r+0x5d2>
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <_dtoa_r+0x600>)
 8007962:	f7f8 fe51 	bl	8000608 <__aeabi_dmul>
 8007966:	e9cd 0100 	strd	r0, r1, [sp]
 800796a:	e7bc      	b.n	80078e6 <_dtoa_r+0x56e>
 800796c:	08009910 	.word	0x08009910
 8007970:	080098e8 	.word	0x080098e8
 8007974:	3ff00000 	.word	0x3ff00000
 8007978:	40240000 	.word	0x40240000
 800797c:	401c0000 	.word	0x401c0000
 8007980:	40140000 	.word	0x40140000
 8007984:	3fe00000 	.word	0x3fe00000
 8007988:	e9dd 6700 	ldrd	r6, r7, [sp]
 800798c:	465d      	mov	r5, fp
 800798e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007992:	4630      	mov	r0, r6
 8007994:	4639      	mov	r1, r7
 8007996:	f7f8 ff61 	bl	800085c <__aeabi_ddiv>
 800799a:	f7f9 f8e5 	bl	8000b68 <__aeabi_d2iz>
 800799e:	4680      	mov	r8, r0
 80079a0:	f7f8 fdc8 	bl	8000534 <__aeabi_i2d>
 80079a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079a8:	f7f8 fe2e 	bl	8000608 <__aeabi_dmul>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4630      	mov	r0, r6
 80079b2:	4639      	mov	r1, r7
 80079b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80079b8:	f7f8 fc6e 	bl	8000298 <__aeabi_dsub>
 80079bc:	f805 6b01 	strb.w	r6, [r5], #1
 80079c0:	eba5 060b 	sub.w	r6, r5, fp
 80079c4:	45b1      	cmp	r9, r6
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	d139      	bne.n	8007a40 <_dtoa_r+0x6c8>
 80079cc:	f7f8 fc66 	bl	800029c <__adddf3>
 80079d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079d4:	4606      	mov	r6, r0
 80079d6:	460f      	mov	r7, r1
 80079d8:	f7f9 f8a6 	bl	8000b28 <__aeabi_dcmpgt>
 80079dc:	b9c8      	cbnz	r0, 8007a12 <_dtoa_r+0x69a>
 80079de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079e2:	4630      	mov	r0, r6
 80079e4:	4639      	mov	r1, r7
 80079e6:	f7f9 f877 	bl	8000ad8 <__aeabi_dcmpeq>
 80079ea:	b110      	cbz	r0, 80079f2 <_dtoa_r+0x67a>
 80079ec:	f018 0f01 	tst.w	r8, #1
 80079f0:	d10f      	bne.n	8007a12 <_dtoa_r+0x69a>
 80079f2:	9904      	ldr	r1, [sp, #16]
 80079f4:	4620      	mov	r0, r4
 80079f6:	f000 fde9 	bl	80085cc <_Bfree>
 80079fa:	2300      	movs	r3, #0
 80079fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079fe:	702b      	strb	r3, [r5, #0]
 8007a00:	f10a 0301 	add.w	r3, sl, #1
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 8241 	beq.w	8007e90 <_dtoa_r+0xb18>
 8007a0e:	601d      	str	r5, [r3, #0]
 8007a10:	e23e      	b.n	8007e90 <_dtoa_r+0xb18>
 8007a12:	f8cd a020 	str.w	sl, [sp, #32]
 8007a16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a1a:	2a39      	cmp	r2, #57	; 0x39
 8007a1c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007a20:	d108      	bne.n	8007a34 <_dtoa_r+0x6bc>
 8007a22:	459b      	cmp	fp, r3
 8007a24:	d10a      	bne.n	8007a3c <_dtoa_r+0x6c4>
 8007a26:	9b08      	ldr	r3, [sp, #32]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	9308      	str	r3, [sp, #32]
 8007a2c:	2330      	movs	r3, #48	; 0x30
 8007a2e:	f88b 3000 	strb.w	r3, [fp]
 8007a32:	465b      	mov	r3, fp
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	3201      	adds	r2, #1
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	e78c      	b.n	8007956 <_dtoa_r+0x5de>
 8007a3c:	461d      	mov	r5, r3
 8007a3e:	e7ea      	b.n	8007a16 <_dtoa_r+0x69e>
 8007a40:	2200      	movs	r2, #0
 8007a42:	4b9b      	ldr	r3, [pc, #620]	; (8007cb0 <_dtoa_r+0x938>)
 8007a44:	f7f8 fde0 	bl	8000608 <__aeabi_dmul>
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	460f      	mov	r7, r1
 8007a50:	f7f9 f842 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d09a      	beq.n	800798e <_dtoa_r+0x616>
 8007a58:	e7cb      	b.n	80079f2 <_dtoa_r+0x67a>
 8007a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a5c:	2a00      	cmp	r2, #0
 8007a5e:	f000 808b 	beq.w	8007b78 <_dtoa_r+0x800>
 8007a62:	9a06      	ldr	r2, [sp, #24]
 8007a64:	2a01      	cmp	r2, #1
 8007a66:	dc6e      	bgt.n	8007b46 <_dtoa_r+0x7ce>
 8007a68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	d067      	beq.n	8007b3e <_dtoa_r+0x7c6>
 8007a6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a72:	9f07      	ldr	r7, [sp, #28]
 8007a74:	9d05      	ldr	r5, [sp, #20]
 8007a76:	9a05      	ldr	r2, [sp, #20]
 8007a78:	2101      	movs	r1, #1
 8007a7a:	441a      	add	r2, r3
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	9205      	str	r2, [sp, #20]
 8007a80:	4498      	add	r8, r3
 8007a82:	f000 fe81 	bl	8008788 <__i2b>
 8007a86:	4606      	mov	r6, r0
 8007a88:	2d00      	cmp	r5, #0
 8007a8a:	dd0c      	ble.n	8007aa6 <_dtoa_r+0x72e>
 8007a8c:	f1b8 0f00 	cmp.w	r8, #0
 8007a90:	dd09      	ble.n	8007aa6 <_dtoa_r+0x72e>
 8007a92:	4545      	cmp	r5, r8
 8007a94:	9a05      	ldr	r2, [sp, #20]
 8007a96:	462b      	mov	r3, r5
 8007a98:	bfa8      	it	ge
 8007a9a:	4643      	movge	r3, r8
 8007a9c:	1ad2      	subs	r2, r2, r3
 8007a9e:	9205      	str	r2, [sp, #20]
 8007aa0:	1aed      	subs	r5, r5, r3
 8007aa2:	eba8 0803 	sub.w	r8, r8, r3
 8007aa6:	9b07      	ldr	r3, [sp, #28]
 8007aa8:	b1eb      	cbz	r3, 8007ae6 <_dtoa_r+0x76e>
 8007aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d067      	beq.n	8007b80 <_dtoa_r+0x808>
 8007ab0:	b18f      	cbz	r7, 8007ad6 <_dtoa_r+0x75e>
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	463a      	mov	r2, r7
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 ff06 	bl	80088c8 <__pow5mult>
 8007abc:	9a04      	ldr	r2, [sp, #16]
 8007abe:	4601      	mov	r1, r0
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 fe69 	bl	800879a <__multiply>
 8007ac8:	9904      	ldr	r1, [sp, #16]
 8007aca:	9008      	str	r0, [sp, #32]
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 fd7d 	bl	80085cc <_Bfree>
 8007ad2:	9b08      	ldr	r3, [sp, #32]
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	9b07      	ldr	r3, [sp, #28]
 8007ad8:	1bda      	subs	r2, r3, r7
 8007ada:	d004      	beq.n	8007ae6 <_dtoa_r+0x76e>
 8007adc:	9904      	ldr	r1, [sp, #16]
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 fef2 	bl	80088c8 <__pow5mult>
 8007ae4:	9004      	str	r0, [sp, #16]
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 fe4d 	bl	8008788 <__i2b>
 8007aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007af0:	4607      	mov	r7, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 81d0 	beq.w	8007e98 <_dtoa_r+0xb20>
 8007af8:	461a      	mov	r2, r3
 8007afa:	4601      	mov	r1, r0
 8007afc:	4620      	mov	r0, r4
 8007afe:	f000 fee3 	bl	80088c8 <__pow5mult>
 8007b02:	9b06      	ldr	r3, [sp, #24]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	4607      	mov	r7, r0
 8007b08:	dc40      	bgt.n	8007b8c <_dtoa_r+0x814>
 8007b0a:	9b00      	ldr	r3, [sp, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d139      	bne.n	8007b84 <_dtoa_r+0x80c>
 8007b10:	9b01      	ldr	r3, [sp, #4]
 8007b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d136      	bne.n	8007b88 <_dtoa_r+0x810>
 8007b1a:	9b01      	ldr	r3, [sp, #4]
 8007b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b20:	0d1b      	lsrs	r3, r3, #20
 8007b22:	051b      	lsls	r3, r3, #20
 8007b24:	b12b      	cbz	r3, 8007b32 <_dtoa_r+0x7ba>
 8007b26:	9b05      	ldr	r3, [sp, #20]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	9305      	str	r3, [sp, #20]
 8007b2c:	f108 0801 	add.w	r8, r8, #1
 8007b30:	2301      	movs	r3, #1
 8007b32:	9307      	str	r3, [sp, #28]
 8007b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d12a      	bne.n	8007b90 <_dtoa_r+0x818>
 8007b3a:	2001      	movs	r0, #1
 8007b3c:	e030      	b.n	8007ba0 <_dtoa_r+0x828>
 8007b3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b44:	e795      	b.n	8007a72 <_dtoa_r+0x6fa>
 8007b46:	9b07      	ldr	r3, [sp, #28]
 8007b48:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007b4c:	42bb      	cmp	r3, r7
 8007b4e:	bfbf      	itttt	lt
 8007b50:	9b07      	ldrlt	r3, [sp, #28]
 8007b52:	9707      	strlt	r7, [sp, #28]
 8007b54:	1afa      	sublt	r2, r7, r3
 8007b56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007b58:	bfbb      	ittet	lt
 8007b5a:	189b      	addlt	r3, r3, r2
 8007b5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007b5e:	1bdf      	subge	r7, r3, r7
 8007b60:	2700      	movlt	r7, #0
 8007b62:	f1b9 0f00 	cmp.w	r9, #0
 8007b66:	bfb5      	itete	lt
 8007b68:	9b05      	ldrlt	r3, [sp, #20]
 8007b6a:	9d05      	ldrge	r5, [sp, #20]
 8007b6c:	eba3 0509 	sublt.w	r5, r3, r9
 8007b70:	464b      	movge	r3, r9
 8007b72:	bfb8      	it	lt
 8007b74:	2300      	movlt	r3, #0
 8007b76:	e77e      	b.n	8007a76 <_dtoa_r+0x6fe>
 8007b78:	9f07      	ldr	r7, [sp, #28]
 8007b7a:	9d05      	ldr	r5, [sp, #20]
 8007b7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007b7e:	e783      	b.n	8007a88 <_dtoa_r+0x710>
 8007b80:	9a07      	ldr	r2, [sp, #28]
 8007b82:	e7ab      	b.n	8007adc <_dtoa_r+0x764>
 8007b84:	2300      	movs	r3, #0
 8007b86:	e7d4      	b.n	8007b32 <_dtoa_r+0x7ba>
 8007b88:	9b00      	ldr	r3, [sp, #0]
 8007b8a:	e7d2      	b.n	8007b32 <_dtoa_r+0x7ba>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9307      	str	r3, [sp, #28]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007b96:	6918      	ldr	r0, [r3, #16]
 8007b98:	f000 fda8 	bl	80086ec <__hi0bits>
 8007b9c:	f1c0 0020 	rsb	r0, r0, #32
 8007ba0:	4440      	add	r0, r8
 8007ba2:	f010 001f 	ands.w	r0, r0, #31
 8007ba6:	d047      	beq.n	8007c38 <_dtoa_r+0x8c0>
 8007ba8:	f1c0 0320 	rsb	r3, r0, #32
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	dd3b      	ble.n	8007c28 <_dtoa_r+0x8b0>
 8007bb0:	9b05      	ldr	r3, [sp, #20]
 8007bb2:	f1c0 001c 	rsb	r0, r0, #28
 8007bb6:	4403      	add	r3, r0
 8007bb8:	9305      	str	r3, [sp, #20]
 8007bba:	4405      	add	r5, r0
 8007bbc:	4480      	add	r8, r0
 8007bbe:	9b05      	ldr	r3, [sp, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dd05      	ble.n	8007bd0 <_dtoa_r+0x858>
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	9904      	ldr	r1, [sp, #16]
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 fecb 	bl	8008964 <__lshift>
 8007bce:	9004      	str	r0, [sp, #16]
 8007bd0:	f1b8 0f00 	cmp.w	r8, #0
 8007bd4:	dd05      	ble.n	8007be2 <_dtoa_r+0x86a>
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	4642      	mov	r2, r8
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 fec2 	bl	8008964 <__lshift>
 8007be0:	4607      	mov	r7, r0
 8007be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007be4:	b353      	cbz	r3, 8007c3c <_dtoa_r+0x8c4>
 8007be6:	4639      	mov	r1, r7
 8007be8:	9804      	ldr	r0, [sp, #16]
 8007bea:	f000 ff0f 	bl	8008a0c <__mcmp>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	da24      	bge.n	8007c3c <_dtoa_r+0x8c4>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	220a      	movs	r2, #10
 8007bf6:	9904      	ldr	r1, [sp, #16]
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f000 fcfe 	bl	80085fa <__multadd>
 8007bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c00:	9004      	str	r0, [sp, #16]
 8007c02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 814d 	beq.w	8007ea6 <_dtoa_r+0xb2e>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4631      	mov	r1, r6
 8007c10:	220a      	movs	r2, #10
 8007c12:	4620      	mov	r0, r4
 8007c14:	f000 fcf1 	bl	80085fa <__multadd>
 8007c18:	9b02      	ldr	r3, [sp, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	dc4f      	bgt.n	8007cc0 <_dtoa_r+0x948>
 8007c20:	9b06      	ldr	r3, [sp, #24]
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	dd4c      	ble.n	8007cc0 <_dtoa_r+0x948>
 8007c26:	e011      	b.n	8007c4c <_dtoa_r+0x8d4>
 8007c28:	d0c9      	beq.n	8007bbe <_dtoa_r+0x846>
 8007c2a:	9a05      	ldr	r2, [sp, #20]
 8007c2c:	331c      	adds	r3, #28
 8007c2e:	441a      	add	r2, r3
 8007c30:	9205      	str	r2, [sp, #20]
 8007c32:	441d      	add	r5, r3
 8007c34:	4498      	add	r8, r3
 8007c36:	e7c2      	b.n	8007bbe <_dtoa_r+0x846>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	e7f6      	b.n	8007c2a <_dtoa_r+0x8b2>
 8007c3c:	f1b9 0f00 	cmp.w	r9, #0
 8007c40:	dc38      	bgt.n	8007cb4 <_dtoa_r+0x93c>
 8007c42:	9b06      	ldr	r3, [sp, #24]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	dd35      	ble.n	8007cb4 <_dtoa_r+0x93c>
 8007c48:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c4c:	9b02      	ldr	r3, [sp, #8]
 8007c4e:	b963      	cbnz	r3, 8007c6a <_dtoa_r+0x8f2>
 8007c50:	4639      	mov	r1, r7
 8007c52:	2205      	movs	r2, #5
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 fcd0 	bl	80085fa <__multadd>
 8007c5a:	4601      	mov	r1, r0
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	9804      	ldr	r0, [sp, #16]
 8007c60:	f000 fed4 	bl	8008a0c <__mcmp>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	f73f adcc 	bgt.w	8007802 <_dtoa_r+0x48a>
 8007c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c6c:	465d      	mov	r5, fp
 8007c6e:	ea6f 0a03 	mvn.w	sl, r3
 8007c72:	f04f 0900 	mov.w	r9, #0
 8007c76:	4639      	mov	r1, r7
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 fca7 	bl	80085cc <_Bfree>
 8007c7e:	2e00      	cmp	r6, #0
 8007c80:	f43f aeb7 	beq.w	80079f2 <_dtoa_r+0x67a>
 8007c84:	f1b9 0f00 	cmp.w	r9, #0
 8007c88:	d005      	beq.n	8007c96 <_dtoa_r+0x91e>
 8007c8a:	45b1      	cmp	r9, r6
 8007c8c:	d003      	beq.n	8007c96 <_dtoa_r+0x91e>
 8007c8e:	4649      	mov	r1, r9
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 fc9b 	bl	80085cc <_Bfree>
 8007c96:	4631      	mov	r1, r6
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 fc97 	bl	80085cc <_Bfree>
 8007c9e:	e6a8      	b.n	80079f2 <_dtoa_r+0x67a>
 8007ca0:	2700      	movs	r7, #0
 8007ca2:	463e      	mov	r6, r7
 8007ca4:	e7e1      	b.n	8007c6a <_dtoa_r+0x8f2>
 8007ca6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007caa:	463e      	mov	r6, r7
 8007cac:	e5a9      	b.n	8007802 <_dtoa_r+0x48a>
 8007cae:	bf00      	nop
 8007cb0:	40240000 	.word	0x40240000
 8007cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 80fa 	beq.w	8007eb4 <_dtoa_r+0xb3c>
 8007cc0:	2d00      	cmp	r5, #0
 8007cc2:	dd05      	ble.n	8007cd0 <_dtoa_r+0x958>
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	462a      	mov	r2, r5
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fe4b 	bl	8008964 <__lshift>
 8007cce:	4606      	mov	r6, r0
 8007cd0:	9b07      	ldr	r3, [sp, #28]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d04c      	beq.n	8007d70 <_dtoa_r+0x9f8>
 8007cd6:	6871      	ldr	r1, [r6, #4]
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fc43 	bl	8008564 <_Balloc>
 8007cde:	6932      	ldr	r2, [r6, #16]
 8007ce0:	3202      	adds	r2, #2
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	0092      	lsls	r2, r2, #2
 8007ce6:	f106 010c 	add.w	r1, r6, #12
 8007cea:	300c      	adds	r0, #12
 8007cec:	f7fd fd83 	bl	80057f6 <memcpy>
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fe35 	bl	8008964 <__lshift>
 8007cfa:	9b00      	ldr	r3, [sp, #0]
 8007cfc:	f8cd b014 	str.w	fp, [sp, #20]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	46b1      	mov	r9, r6
 8007d06:	9307      	str	r3, [sp, #28]
 8007d08:	4606      	mov	r6, r0
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	9804      	ldr	r0, [sp, #16]
 8007d0e:	f7ff faa6 	bl	800725e <quorem>
 8007d12:	4649      	mov	r1, r9
 8007d14:	4605      	mov	r5, r0
 8007d16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d1a:	9804      	ldr	r0, [sp, #16]
 8007d1c:	f000 fe76 	bl	8008a0c <__mcmp>
 8007d20:	4632      	mov	r2, r6
 8007d22:	9000      	str	r0, [sp, #0]
 8007d24:	4639      	mov	r1, r7
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 fe8a 	bl	8008a40 <__mdiff>
 8007d2c:	68c3      	ldr	r3, [r0, #12]
 8007d2e:	4602      	mov	r2, r0
 8007d30:	bb03      	cbnz	r3, 8007d74 <_dtoa_r+0x9fc>
 8007d32:	4601      	mov	r1, r0
 8007d34:	9008      	str	r0, [sp, #32]
 8007d36:	9804      	ldr	r0, [sp, #16]
 8007d38:	f000 fe68 	bl	8008a0c <__mcmp>
 8007d3c:	9a08      	ldr	r2, [sp, #32]
 8007d3e:	4603      	mov	r3, r0
 8007d40:	4611      	mov	r1, r2
 8007d42:	4620      	mov	r0, r4
 8007d44:	9308      	str	r3, [sp, #32]
 8007d46:	f000 fc41 	bl	80085cc <_Bfree>
 8007d4a:	9b08      	ldr	r3, [sp, #32]
 8007d4c:	b9a3      	cbnz	r3, 8007d78 <_dtoa_r+0xa00>
 8007d4e:	9a06      	ldr	r2, [sp, #24]
 8007d50:	b992      	cbnz	r2, 8007d78 <_dtoa_r+0xa00>
 8007d52:	9a07      	ldr	r2, [sp, #28]
 8007d54:	b982      	cbnz	r2, 8007d78 <_dtoa_r+0xa00>
 8007d56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d5a:	d029      	beq.n	8007db0 <_dtoa_r+0xa38>
 8007d5c:	9b00      	ldr	r3, [sp, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	dd01      	ble.n	8007d66 <_dtoa_r+0x9ee>
 8007d62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007d66:	9b05      	ldr	r3, [sp, #20]
 8007d68:	1c5d      	adds	r5, r3, #1
 8007d6a:	f883 8000 	strb.w	r8, [r3]
 8007d6e:	e782      	b.n	8007c76 <_dtoa_r+0x8fe>
 8007d70:	4630      	mov	r0, r6
 8007d72:	e7c2      	b.n	8007cfa <_dtoa_r+0x982>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e7e3      	b.n	8007d40 <_dtoa_r+0x9c8>
 8007d78:	9a00      	ldr	r2, [sp, #0]
 8007d7a:	2a00      	cmp	r2, #0
 8007d7c:	db04      	blt.n	8007d88 <_dtoa_r+0xa10>
 8007d7e:	d125      	bne.n	8007dcc <_dtoa_r+0xa54>
 8007d80:	9a06      	ldr	r2, [sp, #24]
 8007d82:	bb1a      	cbnz	r2, 8007dcc <_dtoa_r+0xa54>
 8007d84:	9a07      	ldr	r2, [sp, #28]
 8007d86:	bb0a      	cbnz	r2, 8007dcc <_dtoa_r+0xa54>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	ddec      	ble.n	8007d66 <_dtoa_r+0x9ee>
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	9904      	ldr	r1, [sp, #16]
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 fde7 	bl	8008964 <__lshift>
 8007d96:	4639      	mov	r1, r7
 8007d98:	9004      	str	r0, [sp, #16]
 8007d9a:	f000 fe37 	bl	8008a0c <__mcmp>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	dc03      	bgt.n	8007daa <_dtoa_r+0xa32>
 8007da2:	d1e0      	bne.n	8007d66 <_dtoa_r+0x9ee>
 8007da4:	f018 0f01 	tst.w	r8, #1
 8007da8:	d0dd      	beq.n	8007d66 <_dtoa_r+0x9ee>
 8007daa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dae:	d1d8      	bne.n	8007d62 <_dtoa_r+0x9ea>
 8007db0:	9b05      	ldr	r3, [sp, #20]
 8007db2:	9a05      	ldr	r2, [sp, #20]
 8007db4:	1c5d      	adds	r5, r3, #1
 8007db6:	2339      	movs	r3, #57	; 0x39
 8007db8:	7013      	strb	r3, [r2, #0]
 8007dba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dbe:	2b39      	cmp	r3, #57	; 0x39
 8007dc0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007dc4:	d04f      	beq.n	8007e66 <_dtoa_r+0xaee>
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	7013      	strb	r3, [r2, #0]
 8007dca:	e754      	b.n	8007c76 <_dtoa_r+0x8fe>
 8007dcc:	9a05      	ldr	r2, [sp, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f102 0501 	add.w	r5, r2, #1
 8007dd4:	dd06      	ble.n	8007de4 <_dtoa_r+0xa6c>
 8007dd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dda:	d0e9      	beq.n	8007db0 <_dtoa_r+0xa38>
 8007ddc:	f108 0801 	add.w	r8, r8, #1
 8007de0:	9b05      	ldr	r3, [sp, #20]
 8007de2:	e7c2      	b.n	8007d6a <_dtoa_r+0x9f2>
 8007de4:	9a02      	ldr	r2, [sp, #8]
 8007de6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007dea:	eba5 030b 	sub.w	r3, r5, fp
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d021      	beq.n	8007e36 <_dtoa_r+0xabe>
 8007df2:	2300      	movs	r3, #0
 8007df4:	220a      	movs	r2, #10
 8007df6:	9904      	ldr	r1, [sp, #16]
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fbfe 	bl	80085fa <__multadd>
 8007dfe:	45b1      	cmp	r9, r6
 8007e00:	9004      	str	r0, [sp, #16]
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	f04f 020a 	mov.w	r2, #10
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	d105      	bne.n	8007e1c <_dtoa_r+0xaa4>
 8007e10:	f000 fbf3 	bl	80085fa <__multadd>
 8007e14:	4681      	mov	r9, r0
 8007e16:	4606      	mov	r6, r0
 8007e18:	9505      	str	r5, [sp, #20]
 8007e1a:	e776      	b.n	8007d0a <_dtoa_r+0x992>
 8007e1c:	f000 fbed 	bl	80085fa <__multadd>
 8007e20:	4631      	mov	r1, r6
 8007e22:	4681      	mov	r9, r0
 8007e24:	2300      	movs	r3, #0
 8007e26:	220a      	movs	r2, #10
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 fbe6 	bl	80085fa <__multadd>
 8007e2e:	4606      	mov	r6, r0
 8007e30:	e7f2      	b.n	8007e18 <_dtoa_r+0xaa0>
 8007e32:	f04f 0900 	mov.w	r9, #0
 8007e36:	2201      	movs	r2, #1
 8007e38:	9904      	ldr	r1, [sp, #16]
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fd92 	bl	8008964 <__lshift>
 8007e40:	4639      	mov	r1, r7
 8007e42:	9004      	str	r0, [sp, #16]
 8007e44:	f000 fde2 	bl	8008a0c <__mcmp>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	dcb6      	bgt.n	8007dba <_dtoa_r+0xa42>
 8007e4c:	d102      	bne.n	8007e54 <_dtoa_r+0xadc>
 8007e4e:	f018 0f01 	tst.w	r8, #1
 8007e52:	d1b2      	bne.n	8007dba <_dtoa_r+0xa42>
 8007e54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e58:	2b30      	cmp	r3, #48	; 0x30
 8007e5a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007e5e:	f47f af0a 	bne.w	8007c76 <_dtoa_r+0x8fe>
 8007e62:	4615      	mov	r5, r2
 8007e64:	e7f6      	b.n	8007e54 <_dtoa_r+0xadc>
 8007e66:	4593      	cmp	fp, r2
 8007e68:	d105      	bne.n	8007e76 <_dtoa_r+0xafe>
 8007e6a:	2331      	movs	r3, #49	; 0x31
 8007e6c:	f10a 0a01 	add.w	sl, sl, #1
 8007e70:	f88b 3000 	strb.w	r3, [fp]
 8007e74:	e6ff      	b.n	8007c76 <_dtoa_r+0x8fe>
 8007e76:	4615      	mov	r5, r2
 8007e78:	e79f      	b.n	8007dba <_dtoa_r+0xa42>
 8007e7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007ee0 <_dtoa_r+0xb68>
 8007e7e:	e007      	b.n	8007e90 <_dtoa_r+0xb18>
 8007e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007ee4 <_dtoa_r+0xb6c>
 8007e86:	b11b      	cbz	r3, 8007e90 <_dtoa_r+0xb18>
 8007e88:	f10b 0308 	add.w	r3, fp, #8
 8007e8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	4658      	mov	r0, fp
 8007e92:	b017      	add	sp, #92	; 0x5c
 8007e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e98:	9b06      	ldr	r3, [sp, #24]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	f77f ae35 	ble.w	8007b0a <_dtoa_r+0x792>
 8007ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ea2:	9307      	str	r3, [sp, #28]
 8007ea4:	e649      	b.n	8007b3a <_dtoa_r+0x7c2>
 8007ea6:	9b02      	ldr	r3, [sp, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dc03      	bgt.n	8007eb4 <_dtoa_r+0xb3c>
 8007eac:	9b06      	ldr	r3, [sp, #24]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	f73f aecc 	bgt.w	8007c4c <_dtoa_r+0x8d4>
 8007eb4:	465d      	mov	r5, fp
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	9804      	ldr	r0, [sp, #16]
 8007eba:	f7ff f9d0 	bl	800725e <quorem>
 8007ebe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007ec2:	f805 8b01 	strb.w	r8, [r5], #1
 8007ec6:	9a02      	ldr	r2, [sp, #8]
 8007ec8:	eba5 030b 	sub.w	r3, r5, fp
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	ddb0      	ble.n	8007e32 <_dtoa_r+0xaba>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	220a      	movs	r2, #10
 8007ed4:	9904      	ldr	r1, [sp, #16]
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 fb8f 	bl	80085fa <__multadd>
 8007edc:	9004      	str	r0, [sp, #16]
 8007ede:	e7ea      	b.n	8007eb6 <_dtoa_r+0xb3e>
 8007ee0:	080096fa 	.word	0x080096fa
 8007ee4:	08009879 	.word	0x08009879

08007ee8 <rshift>:
 8007ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eea:	6906      	ldr	r6, [r0, #16]
 8007eec:	114b      	asrs	r3, r1, #5
 8007eee:	429e      	cmp	r6, r3
 8007ef0:	f100 0414 	add.w	r4, r0, #20
 8007ef4:	dd30      	ble.n	8007f58 <rshift+0x70>
 8007ef6:	f011 011f 	ands.w	r1, r1, #31
 8007efa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007efe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007f02:	d108      	bne.n	8007f16 <rshift+0x2e>
 8007f04:	4621      	mov	r1, r4
 8007f06:	42b2      	cmp	r2, r6
 8007f08:	460b      	mov	r3, r1
 8007f0a:	d211      	bcs.n	8007f30 <rshift+0x48>
 8007f0c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007f10:	f841 3b04 	str.w	r3, [r1], #4
 8007f14:	e7f7      	b.n	8007f06 <rshift+0x1e>
 8007f16:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007f1a:	f1c1 0c20 	rsb	ip, r1, #32
 8007f1e:	40cd      	lsrs	r5, r1
 8007f20:	3204      	adds	r2, #4
 8007f22:	4623      	mov	r3, r4
 8007f24:	42b2      	cmp	r2, r6
 8007f26:	4617      	mov	r7, r2
 8007f28:	d30c      	bcc.n	8007f44 <rshift+0x5c>
 8007f2a:	601d      	str	r5, [r3, #0]
 8007f2c:	b105      	cbz	r5, 8007f30 <rshift+0x48>
 8007f2e:	3304      	adds	r3, #4
 8007f30:	1b1a      	subs	r2, r3, r4
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f38:	bf08      	it	eq
 8007f3a:	2300      	moveq	r3, #0
 8007f3c:	6102      	str	r2, [r0, #16]
 8007f3e:	bf08      	it	eq
 8007f40:	6143      	streq	r3, [r0, #20]
 8007f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f44:	683f      	ldr	r7, [r7, #0]
 8007f46:	fa07 f70c 	lsl.w	r7, r7, ip
 8007f4a:	433d      	orrs	r5, r7
 8007f4c:	f843 5b04 	str.w	r5, [r3], #4
 8007f50:	f852 5b04 	ldr.w	r5, [r2], #4
 8007f54:	40cd      	lsrs	r5, r1
 8007f56:	e7e5      	b.n	8007f24 <rshift+0x3c>
 8007f58:	4623      	mov	r3, r4
 8007f5a:	e7e9      	b.n	8007f30 <rshift+0x48>

08007f5c <__hexdig_fun>:
 8007f5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f60:	2b09      	cmp	r3, #9
 8007f62:	d802      	bhi.n	8007f6a <__hexdig_fun+0xe>
 8007f64:	3820      	subs	r0, #32
 8007f66:	b2c0      	uxtb	r0, r0
 8007f68:	4770      	bx	lr
 8007f6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f6e:	2b05      	cmp	r3, #5
 8007f70:	d801      	bhi.n	8007f76 <__hexdig_fun+0x1a>
 8007f72:	3847      	subs	r0, #71	; 0x47
 8007f74:	e7f7      	b.n	8007f66 <__hexdig_fun+0xa>
 8007f76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	d801      	bhi.n	8007f82 <__hexdig_fun+0x26>
 8007f7e:	3827      	subs	r0, #39	; 0x27
 8007f80:	e7f1      	b.n	8007f66 <__hexdig_fun+0xa>
 8007f82:	2000      	movs	r0, #0
 8007f84:	4770      	bx	lr

08007f86 <__gethex>:
 8007f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	b08b      	sub	sp, #44	; 0x2c
 8007f8c:	468a      	mov	sl, r1
 8007f8e:	9002      	str	r0, [sp, #8]
 8007f90:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007f92:	9306      	str	r3, [sp, #24]
 8007f94:	4690      	mov	r8, r2
 8007f96:	f000 facd 	bl	8008534 <__localeconv_l>
 8007f9a:	6803      	ldr	r3, [r0, #0]
 8007f9c:	9303      	str	r3, [sp, #12]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7f8 f91e 	bl	80001e0 <strlen>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	9001      	str	r0, [sp, #4]
 8007fa8:	4403      	add	r3, r0
 8007faa:	f04f 0b00 	mov.w	fp, #0
 8007fae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007fb2:	9307      	str	r3, [sp, #28]
 8007fb4:	f8da 3000 	ldr.w	r3, [sl]
 8007fb8:	3302      	adds	r3, #2
 8007fba:	461f      	mov	r7, r3
 8007fbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007fc0:	2830      	cmp	r0, #48	; 0x30
 8007fc2:	d06c      	beq.n	800809e <__gethex+0x118>
 8007fc4:	f7ff ffca 	bl	8007f5c <__hexdig_fun>
 8007fc8:	4604      	mov	r4, r0
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d16a      	bne.n	80080a4 <__gethex+0x11e>
 8007fce:	9a01      	ldr	r2, [sp, #4]
 8007fd0:	9903      	ldr	r1, [sp, #12]
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	f001 f8de 	bl	8009194 <strncmp>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d166      	bne.n	80080aa <__gethex+0x124>
 8007fdc:	9b01      	ldr	r3, [sp, #4]
 8007fde:	5cf8      	ldrb	r0, [r7, r3]
 8007fe0:	18fe      	adds	r6, r7, r3
 8007fe2:	f7ff ffbb 	bl	8007f5c <__hexdig_fun>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d062      	beq.n	80080b0 <__gethex+0x12a>
 8007fea:	4633      	mov	r3, r6
 8007fec:	7818      	ldrb	r0, [r3, #0]
 8007fee:	2830      	cmp	r0, #48	; 0x30
 8007ff0:	461f      	mov	r7, r3
 8007ff2:	f103 0301 	add.w	r3, r3, #1
 8007ff6:	d0f9      	beq.n	8007fec <__gethex+0x66>
 8007ff8:	f7ff ffb0 	bl	8007f5c <__hexdig_fun>
 8007ffc:	fab0 f580 	clz	r5, r0
 8008000:	096d      	lsrs	r5, r5, #5
 8008002:	4634      	mov	r4, r6
 8008004:	f04f 0b01 	mov.w	fp, #1
 8008008:	463a      	mov	r2, r7
 800800a:	4616      	mov	r6, r2
 800800c:	3201      	adds	r2, #1
 800800e:	7830      	ldrb	r0, [r6, #0]
 8008010:	f7ff ffa4 	bl	8007f5c <__hexdig_fun>
 8008014:	2800      	cmp	r0, #0
 8008016:	d1f8      	bne.n	800800a <__gethex+0x84>
 8008018:	9a01      	ldr	r2, [sp, #4]
 800801a:	9903      	ldr	r1, [sp, #12]
 800801c:	4630      	mov	r0, r6
 800801e:	f001 f8b9 	bl	8009194 <strncmp>
 8008022:	b950      	cbnz	r0, 800803a <__gethex+0xb4>
 8008024:	b954      	cbnz	r4, 800803c <__gethex+0xb6>
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	18f4      	adds	r4, r6, r3
 800802a:	4622      	mov	r2, r4
 800802c:	4616      	mov	r6, r2
 800802e:	3201      	adds	r2, #1
 8008030:	7830      	ldrb	r0, [r6, #0]
 8008032:	f7ff ff93 	bl	8007f5c <__hexdig_fun>
 8008036:	2800      	cmp	r0, #0
 8008038:	d1f8      	bne.n	800802c <__gethex+0xa6>
 800803a:	b10c      	cbz	r4, 8008040 <__gethex+0xba>
 800803c:	1ba4      	subs	r4, r4, r6
 800803e:	00a4      	lsls	r4, r4, #2
 8008040:	7833      	ldrb	r3, [r6, #0]
 8008042:	2b50      	cmp	r3, #80	; 0x50
 8008044:	d001      	beq.n	800804a <__gethex+0xc4>
 8008046:	2b70      	cmp	r3, #112	; 0x70
 8008048:	d140      	bne.n	80080cc <__gethex+0x146>
 800804a:	7873      	ldrb	r3, [r6, #1]
 800804c:	2b2b      	cmp	r3, #43	; 0x2b
 800804e:	d031      	beq.n	80080b4 <__gethex+0x12e>
 8008050:	2b2d      	cmp	r3, #45	; 0x2d
 8008052:	d033      	beq.n	80080bc <__gethex+0x136>
 8008054:	1c71      	adds	r1, r6, #1
 8008056:	f04f 0900 	mov.w	r9, #0
 800805a:	7808      	ldrb	r0, [r1, #0]
 800805c:	f7ff ff7e 	bl	8007f5c <__hexdig_fun>
 8008060:	1e43      	subs	r3, r0, #1
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b18      	cmp	r3, #24
 8008066:	d831      	bhi.n	80080cc <__gethex+0x146>
 8008068:	f1a0 0210 	sub.w	r2, r0, #16
 800806c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008070:	f7ff ff74 	bl	8007f5c <__hexdig_fun>
 8008074:	1e43      	subs	r3, r0, #1
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b18      	cmp	r3, #24
 800807a:	d922      	bls.n	80080c2 <__gethex+0x13c>
 800807c:	f1b9 0f00 	cmp.w	r9, #0
 8008080:	d000      	beq.n	8008084 <__gethex+0xfe>
 8008082:	4252      	negs	r2, r2
 8008084:	4414      	add	r4, r2
 8008086:	f8ca 1000 	str.w	r1, [sl]
 800808a:	b30d      	cbz	r5, 80080d0 <__gethex+0x14a>
 800808c:	f1bb 0f00 	cmp.w	fp, #0
 8008090:	bf0c      	ite	eq
 8008092:	2706      	moveq	r7, #6
 8008094:	2700      	movne	r7, #0
 8008096:	4638      	mov	r0, r7
 8008098:	b00b      	add	sp, #44	; 0x2c
 800809a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809e:	f10b 0b01 	add.w	fp, fp, #1
 80080a2:	e78a      	b.n	8007fba <__gethex+0x34>
 80080a4:	2500      	movs	r5, #0
 80080a6:	462c      	mov	r4, r5
 80080a8:	e7ae      	b.n	8008008 <__gethex+0x82>
 80080aa:	463e      	mov	r6, r7
 80080ac:	2501      	movs	r5, #1
 80080ae:	e7c7      	b.n	8008040 <__gethex+0xba>
 80080b0:	4604      	mov	r4, r0
 80080b2:	e7fb      	b.n	80080ac <__gethex+0x126>
 80080b4:	f04f 0900 	mov.w	r9, #0
 80080b8:	1cb1      	adds	r1, r6, #2
 80080ba:	e7ce      	b.n	800805a <__gethex+0xd4>
 80080bc:	f04f 0901 	mov.w	r9, #1
 80080c0:	e7fa      	b.n	80080b8 <__gethex+0x132>
 80080c2:	230a      	movs	r3, #10
 80080c4:	fb03 0202 	mla	r2, r3, r2, r0
 80080c8:	3a10      	subs	r2, #16
 80080ca:	e7cf      	b.n	800806c <__gethex+0xe6>
 80080cc:	4631      	mov	r1, r6
 80080ce:	e7da      	b.n	8008086 <__gethex+0x100>
 80080d0:	1bf3      	subs	r3, r6, r7
 80080d2:	3b01      	subs	r3, #1
 80080d4:	4629      	mov	r1, r5
 80080d6:	2b07      	cmp	r3, #7
 80080d8:	dc49      	bgt.n	800816e <__gethex+0x1e8>
 80080da:	9802      	ldr	r0, [sp, #8]
 80080dc:	f000 fa42 	bl	8008564 <_Balloc>
 80080e0:	9b01      	ldr	r3, [sp, #4]
 80080e2:	f100 0914 	add.w	r9, r0, #20
 80080e6:	f04f 0b00 	mov.w	fp, #0
 80080ea:	f1c3 0301 	rsb	r3, r3, #1
 80080ee:	4605      	mov	r5, r0
 80080f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80080f4:	46da      	mov	sl, fp
 80080f6:	9308      	str	r3, [sp, #32]
 80080f8:	42b7      	cmp	r7, r6
 80080fa:	d33b      	bcc.n	8008174 <__gethex+0x1ee>
 80080fc:	9804      	ldr	r0, [sp, #16]
 80080fe:	f840 ab04 	str.w	sl, [r0], #4
 8008102:	eba0 0009 	sub.w	r0, r0, r9
 8008106:	1080      	asrs	r0, r0, #2
 8008108:	6128      	str	r0, [r5, #16]
 800810a:	0147      	lsls	r7, r0, #5
 800810c:	4650      	mov	r0, sl
 800810e:	f000 faed 	bl	80086ec <__hi0bits>
 8008112:	f8d8 6000 	ldr.w	r6, [r8]
 8008116:	1a3f      	subs	r7, r7, r0
 8008118:	42b7      	cmp	r7, r6
 800811a:	dd64      	ble.n	80081e6 <__gethex+0x260>
 800811c:	1bbf      	subs	r7, r7, r6
 800811e:	4639      	mov	r1, r7
 8008120:	4628      	mov	r0, r5
 8008122:	f000 fdfd 	bl	8008d20 <__any_on>
 8008126:	4682      	mov	sl, r0
 8008128:	b178      	cbz	r0, 800814a <__gethex+0x1c4>
 800812a:	1e7b      	subs	r3, r7, #1
 800812c:	1159      	asrs	r1, r3, #5
 800812e:	f003 021f 	and.w	r2, r3, #31
 8008132:	f04f 0a01 	mov.w	sl, #1
 8008136:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800813a:	fa0a f202 	lsl.w	r2, sl, r2
 800813e:	420a      	tst	r2, r1
 8008140:	d003      	beq.n	800814a <__gethex+0x1c4>
 8008142:	4553      	cmp	r3, sl
 8008144:	dc46      	bgt.n	80081d4 <__gethex+0x24e>
 8008146:	f04f 0a02 	mov.w	sl, #2
 800814a:	4639      	mov	r1, r7
 800814c:	4628      	mov	r0, r5
 800814e:	f7ff fecb 	bl	8007ee8 <rshift>
 8008152:	443c      	add	r4, r7
 8008154:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008158:	42a3      	cmp	r3, r4
 800815a:	da52      	bge.n	8008202 <__gethex+0x27c>
 800815c:	4629      	mov	r1, r5
 800815e:	9802      	ldr	r0, [sp, #8]
 8008160:	f000 fa34 	bl	80085cc <_Bfree>
 8008164:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008166:	2300      	movs	r3, #0
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	27a3      	movs	r7, #163	; 0xa3
 800816c:	e793      	b.n	8008096 <__gethex+0x110>
 800816e:	3101      	adds	r1, #1
 8008170:	105b      	asrs	r3, r3, #1
 8008172:	e7b0      	b.n	80080d6 <__gethex+0x150>
 8008174:	1e73      	subs	r3, r6, #1
 8008176:	9305      	str	r3, [sp, #20]
 8008178:	9a07      	ldr	r2, [sp, #28]
 800817a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <__gethex+0x22e>
 8008182:	f1bb 0f20 	cmp.w	fp, #32
 8008186:	d107      	bne.n	8008198 <__gethex+0x212>
 8008188:	9b04      	ldr	r3, [sp, #16]
 800818a:	f8c3 a000 	str.w	sl, [r3]
 800818e:	3304      	adds	r3, #4
 8008190:	f04f 0a00 	mov.w	sl, #0
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	46d3      	mov	fp, sl
 8008198:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800819c:	f7ff fede 	bl	8007f5c <__hexdig_fun>
 80081a0:	f000 000f 	and.w	r0, r0, #15
 80081a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80081a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80081ac:	f10b 0b04 	add.w	fp, fp, #4
 80081b0:	9b05      	ldr	r3, [sp, #20]
 80081b2:	e00d      	b.n	80081d0 <__gethex+0x24a>
 80081b4:	9b05      	ldr	r3, [sp, #20]
 80081b6:	9a08      	ldr	r2, [sp, #32]
 80081b8:	4413      	add	r3, r2
 80081ba:	42bb      	cmp	r3, r7
 80081bc:	d3e1      	bcc.n	8008182 <__gethex+0x1fc>
 80081be:	4618      	mov	r0, r3
 80081c0:	9a01      	ldr	r2, [sp, #4]
 80081c2:	9903      	ldr	r1, [sp, #12]
 80081c4:	9309      	str	r3, [sp, #36]	; 0x24
 80081c6:	f000 ffe5 	bl	8009194 <strncmp>
 80081ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d1d8      	bne.n	8008182 <__gethex+0x1fc>
 80081d0:	461e      	mov	r6, r3
 80081d2:	e791      	b.n	80080f8 <__gethex+0x172>
 80081d4:	1eb9      	subs	r1, r7, #2
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 fda2 	bl	8008d20 <__any_on>
 80081dc:	2800      	cmp	r0, #0
 80081de:	d0b2      	beq.n	8008146 <__gethex+0x1c0>
 80081e0:	f04f 0a03 	mov.w	sl, #3
 80081e4:	e7b1      	b.n	800814a <__gethex+0x1c4>
 80081e6:	da09      	bge.n	80081fc <__gethex+0x276>
 80081e8:	1bf7      	subs	r7, r6, r7
 80081ea:	4629      	mov	r1, r5
 80081ec:	463a      	mov	r2, r7
 80081ee:	9802      	ldr	r0, [sp, #8]
 80081f0:	f000 fbb8 	bl	8008964 <__lshift>
 80081f4:	1be4      	subs	r4, r4, r7
 80081f6:	4605      	mov	r5, r0
 80081f8:	f100 0914 	add.w	r9, r0, #20
 80081fc:	f04f 0a00 	mov.w	sl, #0
 8008200:	e7a8      	b.n	8008154 <__gethex+0x1ce>
 8008202:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008206:	42a0      	cmp	r0, r4
 8008208:	dd6a      	ble.n	80082e0 <__gethex+0x35a>
 800820a:	1b04      	subs	r4, r0, r4
 800820c:	42a6      	cmp	r6, r4
 800820e:	dc2e      	bgt.n	800826e <__gethex+0x2e8>
 8008210:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008214:	2b02      	cmp	r3, #2
 8008216:	d022      	beq.n	800825e <__gethex+0x2d8>
 8008218:	2b03      	cmp	r3, #3
 800821a:	d024      	beq.n	8008266 <__gethex+0x2e0>
 800821c:	2b01      	cmp	r3, #1
 800821e:	d115      	bne.n	800824c <__gethex+0x2c6>
 8008220:	42a6      	cmp	r6, r4
 8008222:	d113      	bne.n	800824c <__gethex+0x2c6>
 8008224:	2e01      	cmp	r6, #1
 8008226:	dc0b      	bgt.n	8008240 <__gethex+0x2ba>
 8008228:	9a06      	ldr	r2, [sp, #24]
 800822a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	2301      	movs	r3, #1
 8008232:	612b      	str	r3, [r5, #16]
 8008234:	f8c9 3000 	str.w	r3, [r9]
 8008238:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800823a:	2762      	movs	r7, #98	; 0x62
 800823c:	601d      	str	r5, [r3, #0]
 800823e:	e72a      	b.n	8008096 <__gethex+0x110>
 8008240:	1e71      	subs	r1, r6, #1
 8008242:	4628      	mov	r0, r5
 8008244:	f000 fd6c 	bl	8008d20 <__any_on>
 8008248:	2800      	cmp	r0, #0
 800824a:	d1ed      	bne.n	8008228 <__gethex+0x2a2>
 800824c:	4629      	mov	r1, r5
 800824e:	9802      	ldr	r0, [sp, #8]
 8008250:	f000 f9bc 	bl	80085cc <_Bfree>
 8008254:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008256:	2300      	movs	r3, #0
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	2750      	movs	r7, #80	; 0x50
 800825c:	e71b      	b.n	8008096 <__gethex+0x110>
 800825e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0e1      	beq.n	8008228 <__gethex+0x2a2>
 8008264:	e7f2      	b.n	800824c <__gethex+0x2c6>
 8008266:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1dd      	bne.n	8008228 <__gethex+0x2a2>
 800826c:	e7ee      	b.n	800824c <__gethex+0x2c6>
 800826e:	1e67      	subs	r7, r4, #1
 8008270:	f1ba 0f00 	cmp.w	sl, #0
 8008274:	d131      	bne.n	80082da <__gethex+0x354>
 8008276:	b127      	cbz	r7, 8008282 <__gethex+0x2fc>
 8008278:	4639      	mov	r1, r7
 800827a:	4628      	mov	r0, r5
 800827c:	f000 fd50 	bl	8008d20 <__any_on>
 8008280:	4682      	mov	sl, r0
 8008282:	117a      	asrs	r2, r7, #5
 8008284:	2301      	movs	r3, #1
 8008286:	f007 071f 	and.w	r7, r7, #31
 800828a:	fa03 f707 	lsl.w	r7, r3, r7
 800828e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008292:	4621      	mov	r1, r4
 8008294:	421f      	tst	r7, r3
 8008296:	4628      	mov	r0, r5
 8008298:	bf18      	it	ne
 800829a:	f04a 0a02 	orrne.w	sl, sl, #2
 800829e:	1b36      	subs	r6, r6, r4
 80082a0:	f7ff fe22 	bl	8007ee8 <rshift>
 80082a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80082a8:	2702      	movs	r7, #2
 80082aa:	f1ba 0f00 	cmp.w	sl, #0
 80082ae:	d048      	beq.n	8008342 <__gethex+0x3bc>
 80082b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d015      	beq.n	80082e4 <__gethex+0x35e>
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d017      	beq.n	80082ec <__gethex+0x366>
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d109      	bne.n	80082d4 <__gethex+0x34e>
 80082c0:	f01a 0f02 	tst.w	sl, #2
 80082c4:	d006      	beq.n	80082d4 <__gethex+0x34e>
 80082c6:	f8d9 3000 	ldr.w	r3, [r9]
 80082ca:	ea4a 0a03 	orr.w	sl, sl, r3
 80082ce:	f01a 0f01 	tst.w	sl, #1
 80082d2:	d10e      	bne.n	80082f2 <__gethex+0x36c>
 80082d4:	f047 0710 	orr.w	r7, r7, #16
 80082d8:	e033      	b.n	8008342 <__gethex+0x3bc>
 80082da:	f04f 0a01 	mov.w	sl, #1
 80082de:	e7d0      	b.n	8008282 <__gethex+0x2fc>
 80082e0:	2701      	movs	r7, #1
 80082e2:	e7e2      	b.n	80082aa <__gethex+0x324>
 80082e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082e6:	f1c3 0301 	rsb	r3, r3, #1
 80082ea:	9315      	str	r3, [sp, #84]	; 0x54
 80082ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0f0      	beq.n	80082d4 <__gethex+0x34e>
 80082f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80082f6:	f105 0314 	add.w	r3, r5, #20
 80082fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80082fe:	eb03 010a 	add.w	r1, r3, sl
 8008302:	f04f 0c00 	mov.w	ip, #0
 8008306:	4618      	mov	r0, r3
 8008308:	f853 2b04 	ldr.w	r2, [r3], #4
 800830c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008310:	d01c      	beq.n	800834c <__gethex+0x3c6>
 8008312:	3201      	adds	r2, #1
 8008314:	6002      	str	r2, [r0, #0]
 8008316:	2f02      	cmp	r7, #2
 8008318:	f105 0314 	add.w	r3, r5, #20
 800831c:	d138      	bne.n	8008390 <__gethex+0x40a>
 800831e:	f8d8 2000 	ldr.w	r2, [r8]
 8008322:	3a01      	subs	r2, #1
 8008324:	42b2      	cmp	r2, r6
 8008326:	d10a      	bne.n	800833e <__gethex+0x3b8>
 8008328:	1171      	asrs	r1, r6, #5
 800832a:	2201      	movs	r2, #1
 800832c:	f006 061f 	and.w	r6, r6, #31
 8008330:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008334:	fa02 f606 	lsl.w	r6, r2, r6
 8008338:	421e      	tst	r6, r3
 800833a:	bf18      	it	ne
 800833c:	4617      	movne	r7, r2
 800833e:	f047 0720 	orr.w	r7, r7, #32
 8008342:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008344:	601d      	str	r5, [r3, #0]
 8008346:	9b06      	ldr	r3, [sp, #24]
 8008348:	601c      	str	r4, [r3, #0]
 800834a:	e6a4      	b.n	8008096 <__gethex+0x110>
 800834c:	4299      	cmp	r1, r3
 800834e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008352:	d8d8      	bhi.n	8008306 <__gethex+0x380>
 8008354:	68ab      	ldr	r3, [r5, #8]
 8008356:	4599      	cmp	r9, r3
 8008358:	db12      	blt.n	8008380 <__gethex+0x3fa>
 800835a:	6869      	ldr	r1, [r5, #4]
 800835c:	9802      	ldr	r0, [sp, #8]
 800835e:	3101      	adds	r1, #1
 8008360:	f000 f900 	bl	8008564 <_Balloc>
 8008364:	692a      	ldr	r2, [r5, #16]
 8008366:	3202      	adds	r2, #2
 8008368:	f105 010c 	add.w	r1, r5, #12
 800836c:	4683      	mov	fp, r0
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	300c      	adds	r0, #12
 8008372:	f7fd fa40 	bl	80057f6 <memcpy>
 8008376:	4629      	mov	r1, r5
 8008378:	9802      	ldr	r0, [sp, #8]
 800837a:	f000 f927 	bl	80085cc <_Bfree>
 800837e:	465d      	mov	r5, fp
 8008380:	692b      	ldr	r3, [r5, #16]
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008388:	612a      	str	r2, [r5, #16]
 800838a:	2201      	movs	r2, #1
 800838c:	615a      	str	r2, [r3, #20]
 800838e:	e7c2      	b.n	8008316 <__gethex+0x390>
 8008390:	692a      	ldr	r2, [r5, #16]
 8008392:	454a      	cmp	r2, r9
 8008394:	dd0b      	ble.n	80083ae <__gethex+0x428>
 8008396:	2101      	movs	r1, #1
 8008398:	4628      	mov	r0, r5
 800839a:	f7ff fda5 	bl	8007ee8 <rshift>
 800839e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083a2:	3401      	adds	r4, #1
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	f6ff aed9 	blt.w	800815c <__gethex+0x1d6>
 80083aa:	2701      	movs	r7, #1
 80083ac:	e7c7      	b.n	800833e <__gethex+0x3b8>
 80083ae:	f016 061f 	ands.w	r6, r6, #31
 80083b2:	d0fa      	beq.n	80083aa <__gethex+0x424>
 80083b4:	449a      	add	sl, r3
 80083b6:	f1c6 0620 	rsb	r6, r6, #32
 80083ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80083be:	f000 f995 	bl	80086ec <__hi0bits>
 80083c2:	42b0      	cmp	r0, r6
 80083c4:	dbe7      	blt.n	8008396 <__gethex+0x410>
 80083c6:	e7f0      	b.n	80083aa <__gethex+0x424>

080083c8 <L_shift>:
 80083c8:	f1c2 0208 	rsb	r2, r2, #8
 80083cc:	0092      	lsls	r2, r2, #2
 80083ce:	b570      	push	{r4, r5, r6, lr}
 80083d0:	f1c2 0620 	rsb	r6, r2, #32
 80083d4:	6843      	ldr	r3, [r0, #4]
 80083d6:	6804      	ldr	r4, [r0, #0]
 80083d8:	fa03 f506 	lsl.w	r5, r3, r6
 80083dc:	432c      	orrs	r4, r5
 80083de:	40d3      	lsrs	r3, r2
 80083e0:	6004      	str	r4, [r0, #0]
 80083e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80083e6:	4288      	cmp	r0, r1
 80083e8:	d3f4      	bcc.n	80083d4 <L_shift+0xc>
 80083ea:	bd70      	pop	{r4, r5, r6, pc}

080083ec <__match>:
 80083ec:	b530      	push	{r4, r5, lr}
 80083ee:	6803      	ldr	r3, [r0, #0]
 80083f0:	3301      	adds	r3, #1
 80083f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f6:	b914      	cbnz	r4, 80083fe <__match+0x12>
 80083f8:	6003      	str	r3, [r0, #0]
 80083fa:	2001      	movs	r0, #1
 80083fc:	bd30      	pop	{r4, r5, pc}
 80083fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008402:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008406:	2d19      	cmp	r5, #25
 8008408:	bf98      	it	ls
 800840a:	3220      	addls	r2, #32
 800840c:	42a2      	cmp	r2, r4
 800840e:	d0f0      	beq.n	80083f2 <__match+0x6>
 8008410:	2000      	movs	r0, #0
 8008412:	e7f3      	b.n	80083fc <__match+0x10>

08008414 <__hexnan>:
 8008414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008418:	680b      	ldr	r3, [r1, #0]
 800841a:	6801      	ldr	r1, [r0, #0]
 800841c:	115f      	asrs	r7, r3, #5
 800841e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008422:	f013 031f 	ands.w	r3, r3, #31
 8008426:	b087      	sub	sp, #28
 8008428:	bf18      	it	ne
 800842a:	3704      	addne	r7, #4
 800842c:	2500      	movs	r5, #0
 800842e:	1f3e      	subs	r6, r7, #4
 8008430:	4682      	mov	sl, r0
 8008432:	4690      	mov	r8, r2
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	f847 5c04 	str.w	r5, [r7, #-4]
 800843a:	46b1      	mov	r9, r6
 800843c:	4634      	mov	r4, r6
 800843e:	9502      	str	r5, [sp, #8]
 8008440:	46ab      	mov	fp, r5
 8008442:	784a      	ldrb	r2, [r1, #1]
 8008444:	1c4b      	adds	r3, r1, #1
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	b342      	cbz	r2, 800849c <__hexnan+0x88>
 800844a:	4610      	mov	r0, r2
 800844c:	9105      	str	r1, [sp, #20]
 800844e:	9204      	str	r2, [sp, #16]
 8008450:	f7ff fd84 	bl	8007f5c <__hexdig_fun>
 8008454:	2800      	cmp	r0, #0
 8008456:	d143      	bne.n	80084e0 <__hexnan+0xcc>
 8008458:	9a04      	ldr	r2, [sp, #16]
 800845a:	9905      	ldr	r1, [sp, #20]
 800845c:	2a20      	cmp	r2, #32
 800845e:	d818      	bhi.n	8008492 <__hexnan+0x7e>
 8008460:	9b02      	ldr	r3, [sp, #8]
 8008462:	459b      	cmp	fp, r3
 8008464:	dd13      	ble.n	800848e <__hexnan+0x7a>
 8008466:	454c      	cmp	r4, r9
 8008468:	d206      	bcs.n	8008478 <__hexnan+0x64>
 800846a:	2d07      	cmp	r5, #7
 800846c:	dc04      	bgt.n	8008478 <__hexnan+0x64>
 800846e:	462a      	mov	r2, r5
 8008470:	4649      	mov	r1, r9
 8008472:	4620      	mov	r0, r4
 8008474:	f7ff ffa8 	bl	80083c8 <L_shift>
 8008478:	4544      	cmp	r4, r8
 800847a:	d944      	bls.n	8008506 <__hexnan+0xf2>
 800847c:	2300      	movs	r3, #0
 800847e:	f1a4 0904 	sub.w	r9, r4, #4
 8008482:	f844 3c04 	str.w	r3, [r4, #-4]
 8008486:	f8cd b008 	str.w	fp, [sp, #8]
 800848a:	464c      	mov	r4, r9
 800848c:	461d      	mov	r5, r3
 800848e:	9903      	ldr	r1, [sp, #12]
 8008490:	e7d7      	b.n	8008442 <__hexnan+0x2e>
 8008492:	2a29      	cmp	r2, #41	; 0x29
 8008494:	d14a      	bne.n	800852c <__hexnan+0x118>
 8008496:	3102      	adds	r1, #2
 8008498:	f8ca 1000 	str.w	r1, [sl]
 800849c:	f1bb 0f00 	cmp.w	fp, #0
 80084a0:	d044      	beq.n	800852c <__hexnan+0x118>
 80084a2:	454c      	cmp	r4, r9
 80084a4:	d206      	bcs.n	80084b4 <__hexnan+0xa0>
 80084a6:	2d07      	cmp	r5, #7
 80084a8:	dc04      	bgt.n	80084b4 <__hexnan+0xa0>
 80084aa:	462a      	mov	r2, r5
 80084ac:	4649      	mov	r1, r9
 80084ae:	4620      	mov	r0, r4
 80084b0:	f7ff ff8a 	bl	80083c8 <L_shift>
 80084b4:	4544      	cmp	r4, r8
 80084b6:	d928      	bls.n	800850a <__hexnan+0xf6>
 80084b8:	4643      	mov	r3, r8
 80084ba:	f854 2b04 	ldr.w	r2, [r4], #4
 80084be:	f843 2b04 	str.w	r2, [r3], #4
 80084c2:	42a6      	cmp	r6, r4
 80084c4:	d2f9      	bcs.n	80084ba <__hexnan+0xa6>
 80084c6:	2200      	movs	r2, #0
 80084c8:	f843 2b04 	str.w	r2, [r3], #4
 80084cc:	429e      	cmp	r6, r3
 80084ce:	d2fb      	bcs.n	80084c8 <__hexnan+0xb4>
 80084d0:	6833      	ldr	r3, [r6, #0]
 80084d2:	b91b      	cbnz	r3, 80084dc <__hexnan+0xc8>
 80084d4:	4546      	cmp	r6, r8
 80084d6:	d127      	bne.n	8008528 <__hexnan+0x114>
 80084d8:	2301      	movs	r3, #1
 80084da:	6033      	str	r3, [r6, #0]
 80084dc:	2005      	movs	r0, #5
 80084de:	e026      	b.n	800852e <__hexnan+0x11a>
 80084e0:	3501      	adds	r5, #1
 80084e2:	2d08      	cmp	r5, #8
 80084e4:	f10b 0b01 	add.w	fp, fp, #1
 80084e8:	dd06      	ble.n	80084f8 <__hexnan+0xe4>
 80084ea:	4544      	cmp	r4, r8
 80084ec:	d9cf      	bls.n	800848e <__hexnan+0x7a>
 80084ee:	2300      	movs	r3, #0
 80084f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80084f4:	2501      	movs	r5, #1
 80084f6:	3c04      	subs	r4, #4
 80084f8:	6822      	ldr	r2, [r4, #0]
 80084fa:	f000 000f 	and.w	r0, r0, #15
 80084fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008502:	6020      	str	r0, [r4, #0]
 8008504:	e7c3      	b.n	800848e <__hexnan+0x7a>
 8008506:	2508      	movs	r5, #8
 8008508:	e7c1      	b.n	800848e <__hexnan+0x7a>
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0df      	beq.n	80084d0 <__hexnan+0xbc>
 8008510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008514:	f1c3 0320 	rsb	r3, r3, #32
 8008518:	fa22 f303 	lsr.w	r3, r2, r3
 800851c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008520:	401a      	ands	r2, r3
 8008522:	f847 2c04 	str.w	r2, [r7, #-4]
 8008526:	e7d3      	b.n	80084d0 <__hexnan+0xbc>
 8008528:	3e04      	subs	r6, #4
 800852a:	e7d1      	b.n	80084d0 <__hexnan+0xbc>
 800852c:	2004      	movs	r0, #4
 800852e:	b007      	add	sp, #28
 8008530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008534 <__localeconv_l>:
 8008534:	30f0      	adds	r0, #240	; 0xf0
 8008536:	4770      	bx	lr

08008538 <_localeconv_r>:
 8008538:	4b04      	ldr	r3, [pc, #16]	; (800854c <_localeconv_r+0x14>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6a18      	ldr	r0, [r3, #32]
 800853e:	4b04      	ldr	r3, [pc, #16]	; (8008550 <_localeconv_r+0x18>)
 8008540:	2800      	cmp	r0, #0
 8008542:	bf08      	it	eq
 8008544:	4618      	moveq	r0, r3
 8008546:	30f0      	adds	r0, #240	; 0xf0
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000064 	.word	0x20000064
 8008550:	200000c8 	.word	0x200000c8

08008554 <malloc>:
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <malloc+0xc>)
 8008556:	4601      	mov	r1, r0
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	f000 bc5f 	b.w	8008e1c <_malloc_r>
 800855e:	bf00      	nop
 8008560:	20000064 	.word	0x20000064

08008564 <_Balloc>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008568:	4604      	mov	r4, r0
 800856a:	460e      	mov	r6, r1
 800856c:	b93d      	cbnz	r5, 800857e <_Balloc+0x1a>
 800856e:	2010      	movs	r0, #16
 8008570:	f7ff fff0 	bl	8008554 <malloc>
 8008574:	6260      	str	r0, [r4, #36]	; 0x24
 8008576:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800857a:	6005      	str	r5, [r0, #0]
 800857c:	60c5      	str	r5, [r0, #12]
 800857e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008580:	68eb      	ldr	r3, [r5, #12]
 8008582:	b183      	cbz	r3, 80085a6 <_Balloc+0x42>
 8008584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800858c:	b9b8      	cbnz	r0, 80085be <_Balloc+0x5a>
 800858e:	2101      	movs	r1, #1
 8008590:	fa01 f506 	lsl.w	r5, r1, r6
 8008594:	1d6a      	adds	r2, r5, #5
 8008596:	0092      	lsls	r2, r2, #2
 8008598:	4620      	mov	r0, r4
 800859a:	f000 fbe2 	bl	8008d62 <_calloc_r>
 800859e:	b160      	cbz	r0, 80085ba <_Balloc+0x56>
 80085a0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80085a4:	e00e      	b.n	80085c4 <_Balloc+0x60>
 80085a6:	2221      	movs	r2, #33	; 0x21
 80085a8:	2104      	movs	r1, #4
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fbd9 	bl	8008d62 <_calloc_r>
 80085b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b2:	60e8      	str	r0, [r5, #12]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e4      	bne.n	8008584 <_Balloc+0x20>
 80085ba:	2000      	movs	r0, #0
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	6802      	ldr	r2, [r0, #0]
 80085c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80085c4:	2300      	movs	r3, #0
 80085c6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085ca:	e7f7      	b.n	80085bc <_Balloc+0x58>

080085cc <_Bfree>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80085d0:	4606      	mov	r6, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	b93c      	cbnz	r4, 80085e6 <_Bfree+0x1a>
 80085d6:	2010      	movs	r0, #16
 80085d8:	f7ff ffbc 	bl	8008554 <malloc>
 80085dc:	6270      	str	r0, [r6, #36]	; 0x24
 80085de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085e2:	6004      	str	r4, [r0, #0]
 80085e4:	60c4      	str	r4, [r0, #12]
 80085e6:	b13d      	cbz	r5, 80085f8 <_Bfree+0x2c>
 80085e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80085ea:	686a      	ldr	r2, [r5, #4]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085f2:	6029      	str	r1, [r5, #0]
 80085f4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80085f8:	bd70      	pop	{r4, r5, r6, pc}

080085fa <__multadd>:
 80085fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085fe:	690d      	ldr	r5, [r1, #16]
 8008600:	461f      	mov	r7, r3
 8008602:	4606      	mov	r6, r0
 8008604:	460c      	mov	r4, r1
 8008606:	f101 0c14 	add.w	ip, r1, #20
 800860a:	2300      	movs	r3, #0
 800860c:	f8dc 0000 	ldr.w	r0, [ip]
 8008610:	b281      	uxth	r1, r0
 8008612:	fb02 7101 	mla	r1, r2, r1, r7
 8008616:	0c0f      	lsrs	r7, r1, #16
 8008618:	0c00      	lsrs	r0, r0, #16
 800861a:	fb02 7000 	mla	r0, r2, r0, r7
 800861e:	b289      	uxth	r1, r1
 8008620:	3301      	adds	r3, #1
 8008622:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008626:	429d      	cmp	r5, r3
 8008628:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800862c:	f84c 1b04 	str.w	r1, [ip], #4
 8008630:	dcec      	bgt.n	800860c <__multadd+0x12>
 8008632:	b1d7      	cbz	r7, 800866a <__multadd+0x70>
 8008634:	68a3      	ldr	r3, [r4, #8]
 8008636:	42ab      	cmp	r3, r5
 8008638:	dc12      	bgt.n	8008660 <__multadd+0x66>
 800863a:	6861      	ldr	r1, [r4, #4]
 800863c:	4630      	mov	r0, r6
 800863e:	3101      	adds	r1, #1
 8008640:	f7ff ff90 	bl	8008564 <_Balloc>
 8008644:	6922      	ldr	r2, [r4, #16]
 8008646:	3202      	adds	r2, #2
 8008648:	f104 010c 	add.w	r1, r4, #12
 800864c:	4680      	mov	r8, r0
 800864e:	0092      	lsls	r2, r2, #2
 8008650:	300c      	adds	r0, #12
 8008652:	f7fd f8d0 	bl	80057f6 <memcpy>
 8008656:	4621      	mov	r1, r4
 8008658:	4630      	mov	r0, r6
 800865a:	f7ff ffb7 	bl	80085cc <_Bfree>
 800865e:	4644      	mov	r4, r8
 8008660:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008664:	3501      	adds	r5, #1
 8008666:	615f      	str	r7, [r3, #20]
 8008668:	6125      	str	r5, [r4, #16]
 800866a:	4620      	mov	r0, r4
 800866c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008670 <__s2b>:
 8008670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008674:	460c      	mov	r4, r1
 8008676:	4615      	mov	r5, r2
 8008678:	461f      	mov	r7, r3
 800867a:	2209      	movs	r2, #9
 800867c:	3308      	adds	r3, #8
 800867e:	4606      	mov	r6, r0
 8008680:	fb93 f3f2 	sdiv	r3, r3, r2
 8008684:	2100      	movs	r1, #0
 8008686:	2201      	movs	r2, #1
 8008688:	429a      	cmp	r2, r3
 800868a:	db20      	blt.n	80086ce <__s2b+0x5e>
 800868c:	4630      	mov	r0, r6
 800868e:	f7ff ff69 	bl	8008564 <_Balloc>
 8008692:	9b08      	ldr	r3, [sp, #32]
 8008694:	6143      	str	r3, [r0, #20]
 8008696:	2d09      	cmp	r5, #9
 8008698:	f04f 0301 	mov.w	r3, #1
 800869c:	6103      	str	r3, [r0, #16]
 800869e:	dd19      	ble.n	80086d4 <__s2b+0x64>
 80086a0:	f104 0809 	add.w	r8, r4, #9
 80086a4:	46c1      	mov	r9, r8
 80086a6:	442c      	add	r4, r5
 80086a8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80086ac:	4601      	mov	r1, r0
 80086ae:	3b30      	subs	r3, #48	; 0x30
 80086b0:	220a      	movs	r2, #10
 80086b2:	4630      	mov	r0, r6
 80086b4:	f7ff ffa1 	bl	80085fa <__multadd>
 80086b8:	45a1      	cmp	r9, r4
 80086ba:	d1f5      	bne.n	80086a8 <__s2b+0x38>
 80086bc:	eb08 0405 	add.w	r4, r8, r5
 80086c0:	3c08      	subs	r4, #8
 80086c2:	1b2d      	subs	r5, r5, r4
 80086c4:	1963      	adds	r3, r4, r5
 80086c6:	42bb      	cmp	r3, r7
 80086c8:	db07      	blt.n	80086da <__s2b+0x6a>
 80086ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ce:	0052      	lsls	r2, r2, #1
 80086d0:	3101      	adds	r1, #1
 80086d2:	e7d9      	b.n	8008688 <__s2b+0x18>
 80086d4:	340a      	adds	r4, #10
 80086d6:	2509      	movs	r5, #9
 80086d8:	e7f3      	b.n	80086c2 <__s2b+0x52>
 80086da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086de:	4601      	mov	r1, r0
 80086e0:	3b30      	subs	r3, #48	; 0x30
 80086e2:	220a      	movs	r2, #10
 80086e4:	4630      	mov	r0, r6
 80086e6:	f7ff ff88 	bl	80085fa <__multadd>
 80086ea:	e7eb      	b.n	80086c4 <__s2b+0x54>

080086ec <__hi0bits>:
 80086ec:	0c02      	lsrs	r2, r0, #16
 80086ee:	0412      	lsls	r2, r2, #16
 80086f0:	4603      	mov	r3, r0
 80086f2:	b9b2      	cbnz	r2, 8008722 <__hi0bits+0x36>
 80086f4:	0403      	lsls	r3, r0, #16
 80086f6:	2010      	movs	r0, #16
 80086f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80086fc:	bf04      	itt	eq
 80086fe:	021b      	lsleq	r3, r3, #8
 8008700:	3008      	addeq	r0, #8
 8008702:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008706:	bf04      	itt	eq
 8008708:	011b      	lsleq	r3, r3, #4
 800870a:	3004      	addeq	r0, #4
 800870c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008710:	bf04      	itt	eq
 8008712:	009b      	lsleq	r3, r3, #2
 8008714:	3002      	addeq	r0, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	db06      	blt.n	8008728 <__hi0bits+0x3c>
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	d503      	bpl.n	8008726 <__hi0bits+0x3a>
 800871e:	3001      	adds	r0, #1
 8008720:	4770      	bx	lr
 8008722:	2000      	movs	r0, #0
 8008724:	e7e8      	b.n	80086f8 <__hi0bits+0xc>
 8008726:	2020      	movs	r0, #32
 8008728:	4770      	bx	lr

0800872a <__lo0bits>:
 800872a:	6803      	ldr	r3, [r0, #0]
 800872c:	f013 0207 	ands.w	r2, r3, #7
 8008730:	4601      	mov	r1, r0
 8008732:	d00b      	beq.n	800874c <__lo0bits+0x22>
 8008734:	07da      	lsls	r2, r3, #31
 8008736:	d423      	bmi.n	8008780 <__lo0bits+0x56>
 8008738:	0798      	lsls	r0, r3, #30
 800873a:	bf49      	itett	mi
 800873c:	085b      	lsrmi	r3, r3, #1
 800873e:	089b      	lsrpl	r3, r3, #2
 8008740:	2001      	movmi	r0, #1
 8008742:	600b      	strmi	r3, [r1, #0]
 8008744:	bf5c      	itt	pl
 8008746:	600b      	strpl	r3, [r1, #0]
 8008748:	2002      	movpl	r0, #2
 800874a:	4770      	bx	lr
 800874c:	b298      	uxth	r0, r3
 800874e:	b9a8      	cbnz	r0, 800877c <__lo0bits+0x52>
 8008750:	0c1b      	lsrs	r3, r3, #16
 8008752:	2010      	movs	r0, #16
 8008754:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008758:	bf04      	itt	eq
 800875a:	0a1b      	lsreq	r3, r3, #8
 800875c:	3008      	addeq	r0, #8
 800875e:	071a      	lsls	r2, r3, #28
 8008760:	bf04      	itt	eq
 8008762:	091b      	lsreq	r3, r3, #4
 8008764:	3004      	addeq	r0, #4
 8008766:	079a      	lsls	r2, r3, #30
 8008768:	bf04      	itt	eq
 800876a:	089b      	lsreq	r3, r3, #2
 800876c:	3002      	addeq	r0, #2
 800876e:	07da      	lsls	r2, r3, #31
 8008770:	d402      	bmi.n	8008778 <__lo0bits+0x4e>
 8008772:	085b      	lsrs	r3, r3, #1
 8008774:	d006      	beq.n	8008784 <__lo0bits+0x5a>
 8008776:	3001      	adds	r0, #1
 8008778:	600b      	str	r3, [r1, #0]
 800877a:	4770      	bx	lr
 800877c:	4610      	mov	r0, r2
 800877e:	e7e9      	b.n	8008754 <__lo0bits+0x2a>
 8008780:	2000      	movs	r0, #0
 8008782:	4770      	bx	lr
 8008784:	2020      	movs	r0, #32
 8008786:	4770      	bx	lr

08008788 <__i2b>:
 8008788:	b510      	push	{r4, lr}
 800878a:	460c      	mov	r4, r1
 800878c:	2101      	movs	r1, #1
 800878e:	f7ff fee9 	bl	8008564 <_Balloc>
 8008792:	2201      	movs	r2, #1
 8008794:	6144      	str	r4, [r0, #20]
 8008796:	6102      	str	r2, [r0, #16]
 8008798:	bd10      	pop	{r4, pc}

0800879a <__multiply>:
 800879a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879e:	4614      	mov	r4, r2
 80087a0:	690a      	ldr	r2, [r1, #16]
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	bfb8      	it	lt
 80087a8:	460b      	movlt	r3, r1
 80087aa:	4688      	mov	r8, r1
 80087ac:	bfbc      	itt	lt
 80087ae:	46a0      	movlt	r8, r4
 80087b0:	461c      	movlt	r4, r3
 80087b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80087b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80087ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80087c2:	eb07 0609 	add.w	r6, r7, r9
 80087c6:	42b3      	cmp	r3, r6
 80087c8:	bfb8      	it	lt
 80087ca:	3101      	addlt	r1, #1
 80087cc:	f7ff feca 	bl	8008564 <_Balloc>
 80087d0:	f100 0514 	add.w	r5, r0, #20
 80087d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80087d8:	462b      	mov	r3, r5
 80087da:	2200      	movs	r2, #0
 80087dc:	4573      	cmp	r3, lr
 80087de:	d316      	bcc.n	800880e <__multiply+0x74>
 80087e0:	f104 0214 	add.w	r2, r4, #20
 80087e4:	f108 0114 	add.w	r1, r8, #20
 80087e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80087ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	9b00      	ldr	r3, [sp, #0]
 80087f4:	9201      	str	r2, [sp, #4]
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d80c      	bhi.n	8008814 <__multiply+0x7a>
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	dd03      	ble.n	8008806 <__multiply+0x6c>
 80087fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008802:	2b00      	cmp	r3, #0
 8008804:	d05d      	beq.n	80088c2 <__multiply+0x128>
 8008806:	6106      	str	r6, [r0, #16]
 8008808:	b003      	add	sp, #12
 800880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880e:	f843 2b04 	str.w	r2, [r3], #4
 8008812:	e7e3      	b.n	80087dc <__multiply+0x42>
 8008814:	f8b2 b000 	ldrh.w	fp, [r2]
 8008818:	f1bb 0f00 	cmp.w	fp, #0
 800881c:	d023      	beq.n	8008866 <__multiply+0xcc>
 800881e:	4689      	mov	r9, r1
 8008820:	46ac      	mov	ip, r5
 8008822:	f04f 0800 	mov.w	r8, #0
 8008826:	f859 4b04 	ldr.w	r4, [r9], #4
 800882a:	f8dc a000 	ldr.w	sl, [ip]
 800882e:	b2a3      	uxth	r3, r4
 8008830:	fa1f fa8a 	uxth.w	sl, sl
 8008834:	fb0b a303 	mla	r3, fp, r3, sl
 8008838:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800883c:	f8dc 4000 	ldr.w	r4, [ip]
 8008840:	4443      	add	r3, r8
 8008842:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008846:	fb0b 840a 	mla	r4, fp, sl, r8
 800884a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800884e:	46e2      	mov	sl, ip
 8008850:	b29b      	uxth	r3, r3
 8008852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008856:	454f      	cmp	r7, r9
 8008858:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800885c:	f84a 3b04 	str.w	r3, [sl], #4
 8008860:	d82b      	bhi.n	80088ba <__multiply+0x120>
 8008862:	f8cc 8004 	str.w	r8, [ip, #4]
 8008866:	9b01      	ldr	r3, [sp, #4]
 8008868:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800886c:	3204      	adds	r2, #4
 800886e:	f1ba 0f00 	cmp.w	sl, #0
 8008872:	d020      	beq.n	80088b6 <__multiply+0x11c>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	4689      	mov	r9, r1
 8008878:	46a8      	mov	r8, r5
 800887a:	f04f 0b00 	mov.w	fp, #0
 800887e:	f8b9 c000 	ldrh.w	ip, [r9]
 8008882:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008886:	fb0a 440c 	mla	r4, sl, ip, r4
 800888a:	445c      	add	r4, fp
 800888c:	46c4      	mov	ip, r8
 800888e:	b29b      	uxth	r3, r3
 8008890:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008894:	f84c 3b04 	str.w	r3, [ip], #4
 8008898:	f859 3b04 	ldr.w	r3, [r9], #4
 800889c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80088a0:	0c1b      	lsrs	r3, r3, #16
 80088a2:	fb0a b303 	mla	r3, sl, r3, fp
 80088a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80088aa:	454f      	cmp	r7, r9
 80088ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80088b0:	d805      	bhi.n	80088be <__multiply+0x124>
 80088b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80088b6:	3504      	adds	r5, #4
 80088b8:	e79b      	b.n	80087f2 <__multiply+0x58>
 80088ba:	46d4      	mov	ip, sl
 80088bc:	e7b3      	b.n	8008826 <__multiply+0x8c>
 80088be:	46e0      	mov	r8, ip
 80088c0:	e7dd      	b.n	800887e <__multiply+0xe4>
 80088c2:	3e01      	subs	r6, #1
 80088c4:	e799      	b.n	80087fa <__multiply+0x60>
	...

080088c8 <__pow5mult>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	4615      	mov	r5, r2
 80088ce:	f012 0203 	ands.w	r2, r2, #3
 80088d2:	4606      	mov	r6, r0
 80088d4:	460f      	mov	r7, r1
 80088d6:	d007      	beq.n	80088e8 <__pow5mult+0x20>
 80088d8:	3a01      	subs	r2, #1
 80088da:	4c21      	ldr	r4, [pc, #132]	; (8008960 <__pow5mult+0x98>)
 80088dc:	2300      	movs	r3, #0
 80088de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088e2:	f7ff fe8a 	bl	80085fa <__multadd>
 80088e6:	4607      	mov	r7, r0
 80088e8:	10ad      	asrs	r5, r5, #2
 80088ea:	d035      	beq.n	8008958 <__pow5mult+0x90>
 80088ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088ee:	b93c      	cbnz	r4, 8008900 <__pow5mult+0x38>
 80088f0:	2010      	movs	r0, #16
 80088f2:	f7ff fe2f 	bl	8008554 <malloc>
 80088f6:	6270      	str	r0, [r6, #36]	; 0x24
 80088f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088fc:	6004      	str	r4, [r0, #0]
 80088fe:	60c4      	str	r4, [r0, #12]
 8008900:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008908:	b94c      	cbnz	r4, 800891e <__pow5mult+0x56>
 800890a:	f240 2171 	movw	r1, #625	; 0x271
 800890e:	4630      	mov	r0, r6
 8008910:	f7ff ff3a 	bl	8008788 <__i2b>
 8008914:	2300      	movs	r3, #0
 8008916:	f8c8 0008 	str.w	r0, [r8, #8]
 800891a:	4604      	mov	r4, r0
 800891c:	6003      	str	r3, [r0, #0]
 800891e:	f04f 0800 	mov.w	r8, #0
 8008922:	07eb      	lsls	r3, r5, #31
 8008924:	d50a      	bpl.n	800893c <__pow5mult+0x74>
 8008926:	4639      	mov	r1, r7
 8008928:	4622      	mov	r2, r4
 800892a:	4630      	mov	r0, r6
 800892c:	f7ff ff35 	bl	800879a <__multiply>
 8008930:	4639      	mov	r1, r7
 8008932:	4681      	mov	r9, r0
 8008934:	4630      	mov	r0, r6
 8008936:	f7ff fe49 	bl	80085cc <_Bfree>
 800893a:	464f      	mov	r7, r9
 800893c:	106d      	asrs	r5, r5, #1
 800893e:	d00b      	beq.n	8008958 <__pow5mult+0x90>
 8008940:	6820      	ldr	r0, [r4, #0]
 8008942:	b938      	cbnz	r0, 8008954 <__pow5mult+0x8c>
 8008944:	4622      	mov	r2, r4
 8008946:	4621      	mov	r1, r4
 8008948:	4630      	mov	r0, r6
 800894a:	f7ff ff26 	bl	800879a <__multiply>
 800894e:	6020      	str	r0, [r4, #0]
 8008950:	f8c0 8000 	str.w	r8, [r0]
 8008954:	4604      	mov	r4, r0
 8008956:	e7e4      	b.n	8008922 <__pow5mult+0x5a>
 8008958:	4638      	mov	r0, r7
 800895a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895e:	bf00      	nop
 8008960:	080099d8 	.word	0x080099d8

08008964 <__lshift>:
 8008964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008968:	460c      	mov	r4, r1
 800896a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800896e:	6923      	ldr	r3, [r4, #16]
 8008970:	6849      	ldr	r1, [r1, #4]
 8008972:	eb0a 0903 	add.w	r9, sl, r3
 8008976:	68a3      	ldr	r3, [r4, #8]
 8008978:	4607      	mov	r7, r0
 800897a:	4616      	mov	r6, r2
 800897c:	f109 0501 	add.w	r5, r9, #1
 8008980:	42ab      	cmp	r3, r5
 8008982:	db32      	blt.n	80089ea <__lshift+0x86>
 8008984:	4638      	mov	r0, r7
 8008986:	f7ff fded 	bl	8008564 <_Balloc>
 800898a:	2300      	movs	r3, #0
 800898c:	4680      	mov	r8, r0
 800898e:	f100 0114 	add.w	r1, r0, #20
 8008992:	461a      	mov	r2, r3
 8008994:	4553      	cmp	r3, sl
 8008996:	db2b      	blt.n	80089f0 <__lshift+0x8c>
 8008998:	6920      	ldr	r0, [r4, #16]
 800899a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800899e:	f104 0314 	add.w	r3, r4, #20
 80089a2:	f016 021f 	ands.w	r2, r6, #31
 80089a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089ae:	d025      	beq.n	80089fc <__lshift+0x98>
 80089b0:	f1c2 0e20 	rsb	lr, r2, #32
 80089b4:	2000      	movs	r0, #0
 80089b6:	681e      	ldr	r6, [r3, #0]
 80089b8:	468a      	mov	sl, r1
 80089ba:	4096      	lsls	r6, r2
 80089bc:	4330      	orrs	r0, r6
 80089be:	f84a 0b04 	str.w	r0, [sl], #4
 80089c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80089c6:	459c      	cmp	ip, r3
 80089c8:	fa20 f00e 	lsr.w	r0, r0, lr
 80089cc:	d814      	bhi.n	80089f8 <__lshift+0x94>
 80089ce:	6048      	str	r0, [r1, #4]
 80089d0:	b108      	cbz	r0, 80089d6 <__lshift+0x72>
 80089d2:	f109 0502 	add.w	r5, r9, #2
 80089d6:	3d01      	subs	r5, #1
 80089d8:	4638      	mov	r0, r7
 80089da:	f8c8 5010 	str.w	r5, [r8, #16]
 80089de:	4621      	mov	r1, r4
 80089e0:	f7ff fdf4 	bl	80085cc <_Bfree>
 80089e4:	4640      	mov	r0, r8
 80089e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ea:	3101      	adds	r1, #1
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	e7c7      	b.n	8008980 <__lshift+0x1c>
 80089f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80089f4:	3301      	adds	r3, #1
 80089f6:	e7cd      	b.n	8008994 <__lshift+0x30>
 80089f8:	4651      	mov	r1, sl
 80089fa:	e7dc      	b.n	80089b6 <__lshift+0x52>
 80089fc:	3904      	subs	r1, #4
 80089fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a02:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a06:	459c      	cmp	ip, r3
 8008a08:	d8f9      	bhi.n	80089fe <__lshift+0x9a>
 8008a0a:	e7e4      	b.n	80089d6 <__lshift+0x72>

08008a0c <__mcmp>:
 8008a0c:	6903      	ldr	r3, [r0, #16]
 8008a0e:	690a      	ldr	r2, [r1, #16]
 8008a10:	1a9b      	subs	r3, r3, r2
 8008a12:	b530      	push	{r4, r5, lr}
 8008a14:	d10c      	bne.n	8008a30 <__mcmp+0x24>
 8008a16:	0092      	lsls	r2, r2, #2
 8008a18:	3014      	adds	r0, #20
 8008a1a:	3114      	adds	r1, #20
 8008a1c:	1884      	adds	r4, r0, r2
 8008a1e:	4411      	add	r1, r2
 8008a20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a28:	4295      	cmp	r5, r2
 8008a2a:	d003      	beq.n	8008a34 <__mcmp+0x28>
 8008a2c:	d305      	bcc.n	8008a3a <__mcmp+0x2e>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4618      	mov	r0, r3
 8008a32:	bd30      	pop	{r4, r5, pc}
 8008a34:	42a0      	cmp	r0, r4
 8008a36:	d3f3      	bcc.n	8008a20 <__mcmp+0x14>
 8008a38:	e7fa      	b.n	8008a30 <__mcmp+0x24>
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a3e:	e7f7      	b.n	8008a30 <__mcmp+0x24>

08008a40 <__mdiff>:
 8008a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a44:	460d      	mov	r5, r1
 8008a46:	4607      	mov	r7, r0
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	4614      	mov	r4, r2
 8008a4e:	f7ff ffdd 	bl	8008a0c <__mcmp>
 8008a52:	1e06      	subs	r6, r0, #0
 8008a54:	d108      	bne.n	8008a68 <__mdiff+0x28>
 8008a56:	4631      	mov	r1, r6
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f7ff fd83 	bl	8008564 <_Balloc>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a68:	bfa4      	itt	ge
 8008a6a:	4623      	movge	r3, r4
 8008a6c:	462c      	movge	r4, r5
 8008a6e:	4638      	mov	r0, r7
 8008a70:	6861      	ldr	r1, [r4, #4]
 8008a72:	bfa6      	itte	ge
 8008a74:	461d      	movge	r5, r3
 8008a76:	2600      	movge	r6, #0
 8008a78:	2601      	movlt	r6, #1
 8008a7a:	f7ff fd73 	bl	8008564 <_Balloc>
 8008a7e:	692b      	ldr	r3, [r5, #16]
 8008a80:	60c6      	str	r6, [r0, #12]
 8008a82:	6926      	ldr	r6, [r4, #16]
 8008a84:	f105 0914 	add.w	r9, r5, #20
 8008a88:	f104 0214 	add.w	r2, r4, #20
 8008a8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a94:	f100 0514 	add.w	r5, r0, #20
 8008a98:	f04f 0e00 	mov.w	lr, #0
 8008a9c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008aa0:	f859 4b04 	ldr.w	r4, [r9], #4
 8008aa4:	fa1e f18a 	uxtah	r1, lr, sl
 8008aa8:	b2a3      	uxth	r3, r4
 8008aaa:	1ac9      	subs	r1, r1, r3
 8008aac:	0c23      	lsrs	r3, r4, #16
 8008aae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008ab2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008ab6:	b289      	uxth	r1, r1
 8008ab8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008abc:	45c8      	cmp	r8, r9
 8008abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008ac2:	4694      	mov	ip, r2
 8008ac4:	f845 3b04 	str.w	r3, [r5], #4
 8008ac8:	d8e8      	bhi.n	8008a9c <__mdiff+0x5c>
 8008aca:	45bc      	cmp	ip, r7
 8008acc:	d304      	bcc.n	8008ad8 <__mdiff+0x98>
 8008ace:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008ad2:	b183      	cbz	r3, 8008af6 <__mdiff+0xb6>
 8008ad4:	6106      	str	r6, [r0, #16]
 8008ad6:	e7c5      	b.n	8008a64 <__mdiff+0x24>
 8008ad8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008adc:	fa1e f381 	uxtah	r3, lr, r1
 8008ae0:	141a      	asrs	r2, r3, #16
 8008ae2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008af0:	f845 3b04 	str.w	r3, [r5], #4
 8008af4:	e7e9      	b.n	8008aca <__mdiff+0x8a>
 8008af6:	3e01      	subs	r6, #1
 8008af8:	e7e9      	b.n	8008ace <__mdiff+0x8e>
	...

08008afc <__ulp>:
 8008afc:	4b12      	ldr	r3, [pc, #72]	; (8008b48 <__ulp+0x4c>)
 8008afe:	ee10 2a90 	vmov	r2, s1
 8008b02:	401a      	ands	r2, r3
 8008b04:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dd04      	ble.n	8008b16 <__ulp+0x1a>
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	4619      	mov	r1, r3
 8008b10:	ec41 0b10 	vmov	d0, r0, r1
 8008b14:	4770      	bx	lr
 8008b16:	425b      	negs	r3, r3
 8008b18:	151b      	asrs	r3, r3, #20
 8008b1a:	2b13      	cmp	r3, #19
 8008b1c:	f04f 0000 	mov.w	r0, #0
 8008b20:	f04f 0100 	mov.w	r1, #0
 8008b24:	dc04      	bgt.n	8008b30 <__ulp+0x34>
 8008b26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008b2a:	fa42 f103 	asr.w	r1, r2, r3
 8008b2e:	e7ef      	b.n	8008b10 <__ulp+0x14>
 8008b30:	3b14      	subs	r3, #20
 8008b32:	2b1e      	cmp	r3, #30
 8008b34:	f04f 0201 	mov.w	r2, #1
 8008b38:	bfda      	itte	le
 8008b3a:	f1c3 031f 	rsble	r3, r3, #31
 8008b3e:	fa02 f303 	lslle.w	r3, r2, r3
 8008b42:	4613      	movgt	r3, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	e7e3      	b.n	8008b10 <__ulp+0x14>
 8008b48:	7ff00000 	.word	0x7ff00000

08008b4c <__b2d>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	6905      	ldr	r5, [r0, #16]
 8008b50:	f100 0714 	add.w	r7, r0, #20
 8008b54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008b58:	1f2e      	subs	r6, r5, #4
 8008b5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f7ff fdc4 	bl	80086ec <__hi0bits>
 8008b64:	f1c0 0320 	rsb	r3, r0, #32
 8008b68:	280a      	cmp	r0, #10
 8008b6a:	600b      	str	r3, [r1, #0]
 8008b6c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008be4 <__b2d+0x98>
 8008b70:	dc14      	bgt.n	8008b9c <__b2d+0x50>
 8008b72:	f1c0 0e0b 	rsb	lr, r0, #11
 8008b76:	fa24 f10e 	lsr.w	r1, r4, lr
 8008b7a:	42b7      	cmp	r7, r6
 8008b7c:	ea41 030c 	orr.w	r3, r1, ip
 8008b80:	bf34      	ite	cc
 8008b82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b86:	2100      	movcs	r1, #0
 8008b88:	3015      	adds	r0, #21
 8008b8a:	fa04 f000 	lsl.w	r0, r4, r0
 8008b8e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008b92:	ea40 0201 	orr.w	r2, r0, r1
 8008b96:	ec43 2b10 	vmov	d0, r2, r3
 8008b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b9c:	42b7      	cmp	r7, r6
 8008b9e:	bf3a      	itte	cc
 8008ba0:	f1a5 0608 	subcc.w	r6, r5, #8
 8008ba4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ba8:	2100      	movcs	r1, #0
 8008baa:	380b      	subs	r0, #11
 8008bac:	d015      	beq.n	8008bda <__b2d+0x8e>
 8008bae:	4084      	lsls	r4, r0
 8008bb0:	f1c0 0520 	rsb	r5, r0, #32
 8008bb4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008bb8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008bbc:	42be      	cmp	r6, r7
 8008bbe:	fa21 fc05 	lsr.w	ip, r1, r5
 8008bc2:	ea44 030c 	orr.w	r3, r4, ip
 8008bc6:	bf8c      	ite	hi
 8008bc8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008bcc:	2400      	movls	r4, #0
 8008bce:	fa01 f000 	lsl.w	r0, r1, r0
 8008bd2:	40ec      	lsrs	r4, r5
 8008bd4:	ea40 0204 	orr.w	r2, r0, r4
 8008bd8:	e7dd      	b.n	8008b96 <__b2d+0x4a>
 8008bda:	ea44 030c 	orr.w	r3, r4, ip
 8008bde:	460a      	mov	r2, r1
 8008be0:	e7d9      	b.n	8008b96 <__b2d+0x4a>
 8008be2:	bf00      	nop
 8008be4:	3ff00000 	.word	0x3ff00000

08008be8 <__d2b>:
 8008be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bec:	460e      	mov	r6, r1
 8008bee:	2101      	movs	r1, #1
 8008bf0:	ec59 8b10 	vmov	r8, r9, d0
 8008bf4:	4615      	mov	r5, r2
 8008bf6:	f7ff fcb5 	bl	8008564 <_Balloc>
 8008bfa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008bfe:	4607      	mov	r7, r0
 8008c00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c04:	bb34      	cbnz	r4, 8008c54 <__d2b+0x6c>
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	f1b8 0300 	subs.w	r3, r8, #0
 8008c0c:	d027      	beq.n	8008c5e <__d2b+0x76>
 8008c0e:	a802      	add	r0, sp, #8
 8008c10:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008c14:	f7ff fd89 	bl	800872a <__lo0bits>
 8008c18:	9900      	ldr	r1, [sp, #0]
 8008c1a:	b1f0      	cbz	r0, 8008c5a <__d2b+0x72>
 8008c1c:	9a01      	ldr	r2, [sp, #4]
 8008c1e:	f1c0 0320 	rsb	r3, r0, #32
 8008c22:	fa02 f303 	lsl.w	r3, r2, r3
 8008c26:	430b      	orrs	r3, r1
 8008c28:	40c2      	lsrs	r2, r0
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	9201      	str	r2, [sp, #4]
 8008c2e:	9b01      	ldr	r3, [sp, #4]
 8008c30:	61bb      	str	r3, [r7, #24]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	bf14      	ite	ne
 8008c36:	2102      	movne	r1, #2
 8008c38:	2101      	moveq	r1, #1
 8008c3a:	6139      	str	r1, [r7, #16]
 8008c3c:	b1c4      	cbz	r4, 8008c70 <__d2b+0x88>
 8008c3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008c42:	4404      	add	r4, r0
 8008c44:	6034      	str	r4, [r6, #0]
 8008c46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c4a:	6028      	str	r0, [r5, #0]
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	b003      	add	sp, #12
 8008c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c58:	e7d5      	b.n	8008c06 <__d2b+0x1e>
 8008c5a:	6179      	str	r1, [r7, #20]
 8008c5c:	e7e7      	b.n	8008c2e <__d2b+0x46>
 8008c5e:	a801      	add	r0, sp, #4
 8008c60:	f7ff fd63 	bl	800872a <__lo0bits>
 8008c64:	9b01      	ldr	r3, [sp, #4]
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	2101      	movs	r1, #1
 8008c6a:	6139      	str	r1, [r7, #16]
 8008c6c:	3020      	adds	r0, #32
 8008c6e:	e7e5      	b.n	8008c3c <__d2b+0x54>
 8008c70:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008c74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c78:	6030      	str	r0, [r6, #0]
 8008c7a:	6918      	ldr	r0, [r3, #16]
 8008c7c:	f7ff fd36 	bl	80086ec <__hi0bits>
 8008c80:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c84:	e7e1      	b.n	8008c4a <__d2b+0x62>

08008c86 <__ratio>:
 8008c86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8a:	4688      	mov	r8, r1
 8008c8c:	4669      	mov	r1, sp
 8008c8e:	4681      	mov	r9, r0
 8008c90:	f7ff ff5c 	bl	8008b4c <__b2d>
 8008c94:	a901      	add	r1, sp, #4
 8008c96:	4640      	mov	r0, r8
 8008c98:	ec57 6b10 	vmov	r6, r7, d0
 8008c9c:	f7ff ff56 	bl	8008b4c <__b2d>
 8008ca0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ca4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ca8:	eba3 0c02 	sub.w	ip, r3, r2
 8008cac:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008cb6:	ec5b ab10 	vmov	sl, fp, d0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bfce      	itee	gt
 8008cbe:	463a      	movgt	r2, r7
 8008cc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008cc4:	465a      	movle	r2, fp
 8008cc6:	4659      	mov	r1, fp
 8008cc8:	463d      	mov	r5, r7
 8008cca:	bfd4      	ite	le
 8008ccc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008cd0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	ee10 2a10 	vmov	r2, s0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4629      	mov	r1, r5
 8008cde:	f7f7 fdbd 	bl	800085c <__aeabi_ddiv>
 8008ce2:	ec41 0b10 	vmov	d0, r0, r1
 8008ce6:	b003      	add	sp, #12
 8008ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cec <__copybits>:
 8008cec:	3901      	subs	r1, #1
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	1149      	asrs	r1, r1, #5
 8008cf2:	6914      	ldr	r4, [r2, #16]
 8008cf4:	3101      	adds	r1, #1
 8008cf6:	f102 0314 	add.w	r3, r2, #20
 8008cfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008cfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d02:	42a3      	cmp	r3, r4
 8008d04:	4602      	mov	r2, r0
 8008d06:	d303      	bcc.n	8008d10 <__copybits+0x24>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	428a      	cmp	r2, r1
 8008d0c:	d305      	bcc.n	8008d1a <__copybits+0x2e>
 8008d0e:	bd10      	pop	{r4, pc}
 8008d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d14:	f840 2b04 	str.w	r2, [r0], #4
 8008d18:	e7f3      	b.n	8008d02 <__copybits+0x16>
 8008d1a:	f842 3b04 	str.w	r3, [r2], #4
 8008d1e:	e7f4      	b.n	8008d0a <__copybits+0x1e>

08008d20 <__any_on>:
 8008d20:	f100 0214 	add.w	r2, r0, #20
 8008d24:	6900      	ldr	r0, [r0, #16]
 8008d26:	114b      	asrs	r3, r1, #5
 8008d28:	4298      	cmp	r0, r3
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	db11      	blt.n	8008d52 <__any_on+0x32>
 8008d2e:	dd0a      	ble.n	8008d46 <__any_on+0x26>
 8008d30:	f011 011f 	ands.w	r1, r1, #31
 8008d34:	d007      	beq.n	8008d46 <__any_on+0x26>
 8008d36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d3a:	fa24 f001 	lsr.w	r0, r4, r1
 8008d3e:	fa00 f101 	lsl.w	r1, r0, r1
 8008d42:	428c      	cmp	r4, r1
 8008d44:	d10b      	bne.n	8008d5e <__any_on+0x3e>
 8008d46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d803      	bhi.n	8008d56 <__any_on+0x36>
 8008d4e:	2000      	movs	r0, #0
 8008d50:	bd10      	pop	{r4, pc}
 8008d52:	4603      	mov	r3, r0
 8008d54:	e7f7      	b.n	8008d46 <__any_on+0x26>
 8008d56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d5a:	2900      	cmp	r1, #0
 8008d5c:	d0f5      	beq.n	8008d4a <__any_on+0x2a>
 8008d5e:	2001      	movs	r0, #1
 8008d60:	e7f6      	b.n	8008d50 <__any_on+0x30>

08008d62 <_calloc_r>:
 8008d62:	b538      	push	{r3, r4, r5, lr}
 8008d64:	fb02 f401 	mul.w	r4, r2, r1
 8008d68:	4621      	mov	r1, r4
 8008d6a:	f000 f857 	bl	8008e1c <_malloc_r>
 8008d6e:	4605      	mov	r5, r0
 8008d70:	b118      	cbz	r0, 8008d7a <_calloc_r+0x18>
 8008d72:	4622      	mov	r2, r4
 8008d74:	2100      	movs	r1, #0
 8008d76:	f7fc fd49 	bl	800580c <memset>
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008d80 <_free_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4605      	mov	r5, r0
 8008d84:	2900      	cmp	r1, #0
 8008d86:	d045      	beq.n	8008e14 <_free_r+0x94>
 8008d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d8c:	1f0c      	subs	r4, r1, #4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bfb8      	it	lt
 8008d92:	18e4      	addlt	r4, r4, r3
 8008d94:	f000 fa29 	bl	80091ea <__malloc_lock>
 8008d98:	4a1f      	ldr	r2, [pc, #124]	; (8008e18 <_free_r+0x98>)
 8008d9a:	6813      	ldr	r3, [r2, #0]
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	b933      	cbnz	r3, 8008dae <_free_r+0x2e>
 8008da0:	6063      	str	r3, [r4, #4]
 8008da2:	6014      	str	r4, [r2, #0]
 8008da4:	4628      	mov	r0, r5
 8008da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008daa:	f000 ba1f 	b.w	80091ec <__malloc_unlock>
 8008dae:	42a3      	cmp	r3, r4
 8008db0:	d90c      	bls.n	8008dcc <_free_r+0x4c>
 8008db2:	6821      	ldr	r1, [r4, #0]
 8008db4:	1862      	adds	r2, r4, r1
 8008db6:	4293      	cmp	r3, r2
 8008db8:	bf04      	itt	eq
 8008dba:	681a      	ldreq	r2, [r3, #0]
 8008dbc:	685b      	ldreq	r3, [r3, #4]
 8008dbe:	6063      	str	r3, [r4, #4]
 8008dc0:	bf04      	itt	eq
 8008dc2:	1852      	addeq	r2, r2, r1
 8008dc4:	6022      	streq	r2, [r4, #0]
 8008dc6:	6004      	str	r4, [r0, #0]
 8008dc8:	e7ec      	b.n	8008da4 <_free_r+0x24>
 8008dca:	4613      	mov	r3, r2
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	b10a      	cbz	r2, 8008dd4 <_free_r+0x54>
 8008dd0:	42a2      	cmp	r2, r4
 8008dd2:	d9fa      	bls.n	8008dca <_free_r+0x4a>
 8008dd4:	6819      	ldr	r1, [r3, #0]
 8008dd6:	1858      	adds	r0, r3, r1
 8008dd8:	42a0      	cmp	r0, r4
 8008dda:	d10b      	bne.n	8008df4 <_free_r+0x74>
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	4401      	add	r1, r0
 8008de0:	1858      	adds	r0, r3, r1
 8008de2:	4282      	cmp	r2, r0
 8008de4:	6019      	str	r1, [r3, #0]
 8008de6:	d1dd      	bne.n	8008da4 <_free_r+0x24>
 8008de8:	6810      	ldr	r0, [r2, #0]
 8008dea:	6852      	ldr	r2, [r2, #4]
 8008dec:	605a      	str	r2, [r3, #4]
 8008dee:	4401      	add	r1, r0
 8008df0:	6019      	str	r1, [r3, #0]
 8008df2:	e7d7      	b.n	8008da4 <_free_r+0x24>
 8008df4:	d902      	bls.n	8008dfc <_free_r+0x7c>
 8008df6:	230c      	movs	r3, #12
 8008df8:	602b      	str	r3, [r5, #0]
 8008dfa:	e7d3      	b.n	8008da4 <_free_r+0x24>
 8008dfc:	6820      	ldr	r0, [r4, #0]
 8008dfe:	1821      	adds	r1, r4, r0
 8008e00:	428a      	cmp	r2, r1
 8008e02:	bf04      	itt	eq
 8008e04:	6811      	ldreq	r1, [r2, #0]
 8008e06:	6852      	ldreq	r2, [r2, #4]
 8008e08:	6062      	str	r2, [r4, #4]
 8008e0a:	bf04      	itt	eq
 8008e0c:	1809      	addeq	r1, r1, r0
 8008e0e:	6021      	streq	r1, [r4, #0]
 8008e10:	605c      	str	r4, [r3, #4]
 8008e12:	e7c7      	b.n	8008da4 <_free_r+0x24>
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	bf00      	nop
 8008e18:	20000364 	.word	0x20000364

08008e1c <_malloc_r>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	1ccd      	adds	r5, r1, #3
 8008e20:	f025 0503 	bic.w	r5, r5, #3
 8008e24:	3508      	adds	r5, #8
 8008e26:	2d0c      	cmp	r5, #12
 8008e28:	bf38      	it	cc
 8008e2a:	250c      	movcc	r5, #12
 8008e2c:	2d00      	cmp	r5, #0
 8008e2e:	4606      	mov	r6, r0
 8008e30:	db01      	blt.n	8008e36 <_malloc_r+0x1a>
 8008e32:	42a9      	cmp	r1, r5
 8008e34:	d903      	bls.n	8008e3e <_malloc_r+0x22>
 8008e36:	230c      	movs	r3, #12
 8008e38:	6033      	str	r3, [r6, #0]
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	bd70      	pop	{r4, r5, r6, pc}
 8008e3e:	f000 f9d4 	bl	80091ea <__malloc_lock>
 8008e42:	4a21      	ldr	r2, [pc, #132]	; (8008ec8 <_malloc_r+0xac>)
 8008e44:	6814      	ldr	r4, [r2, #0]
 8008e46:	4621      	mov	r1, r4
 8008e48:	b991      	cbnz	r1, 8008e70 <_malloc_r+0x54>
 8008e4a:	4c20      	ldr	r4, [pc, #128]	; (8008ecc <_malloc_r+0xb0>)
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	b91b      	cbnz	r3, 8008e58 <_malloc_r+0x3c>
 8008e50:	4630      	mov	r0, r6
 8008e52:	f000 f98f 	bl	8009174 <_sbrk_r>
 8008e56:	6020      	str	r0, [r4, #0]
 8008e58:	4629      	mov	r1, r5
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f000 f98a 	bl	8009174 <_sbrk_r>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d124      	bne.n	8008eae <_malloc_r+0x92>
 8008e64:	230c      	movs	r3, #12
 8008e66:	6033      	str	r3, [r6, #0]
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f000 f9bf 	bl	80091ec <__malloc_unlock>
 8008e6e:	e7e4      	b.n	8008e3a <_malloc_r+0x1e>
 8008e70:	680b      	ldr	r3, [r1, #0]
 8008e72:	1b5b      	subs	r3, r3, r5
 8008e74:	d418      	bmi.n	8008ea8 <_malloc_r+0x8c>
 8008e76:	2b0b      	cmp	r3, #11
 8008e78:	d90f      	bls.n	8008e9a <_malloc_r+0x7e>
 8008e7a:	600b      	str	r3, [r1, #0]
 8008e7c:	50cd      	str	r5, [r1, r3]
 8008e7e:	18cc      	adds	r4, r1, r3
 8008e80:	4630      	mov	r0, r6
 8008e82:	f000 f9b3 	bl	80091ec <__malloc_unlock>
 8008e86:	f104 000b 	add.w	r0, r4, #11
 8008e8a:	1d23      	adds	r3, r4, #4
 8008e8c:	f020 0007 	bic.w	r0, r0, #7
 8008e90:	1ac3      	subs	r3, r0, r3
 8008e92:	d0d3      	beq.n	8008e3c <_malloc_r+0x20>
 8008e94:	425a      	negs	r2, r3
 8008e96:	50e2      	str	r2, [r4, r3]
 8008e98:	e7d0      	b.n	8008e3c <_malloc_r+0x20>
 8008e9a:	428c      	cmp	r4, r1
 8008e9c:	684b      	ldr	r3, [r1, #4]
 8008e9e:	bf16      	itet	ne
 8008ea0:	6063      	strne	r3, [r4, #4]
 8008ea2:	6013      	streq	r3, [r2, #0]
 8008ea4:	460c      	movne	r4, r1
 8008ea6:	e7eb      	b.n	8008e80 <_malloc_r+0x64>
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	6849      	ldr	r1, [r1, #4]
 8008eac:	e7cc      	b.n	8008e48 <_malloc_r+0x2c>
 8008eae:	1cc4      	adds	r4, r0, #3
 8008eb0:	f024 0403 	bic.w	r4, r4, #3
 8008eb4:	42a0      	cmp	r0, r4
 8008eb6:	d005      	beq.n	8008ec4 <_malloc_r+0xa8>
 8008eb8:	1a21      	subs	r1, r4, r0
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f000 f95a 	bl	8009174 <_sbrk_r>
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d0cf      	beq.n	8008e64 <_malloc_r+0x48>
 8008ec4:	6025      	str	r5, [r4, #0]
 8008ec6:	e7db      	b.n	8008e80 <_malloc_r+0x64>
 8008ec8:	20000364 	.word	0x20000364
 8008ecc:	20000368 	.word	0x20000368

08008ed0 <__ssputs_r>:
 8008ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	688e      	ldr	r6, [r1, #8]
 8008ed6:	429e      	cmp	r6, r3
 8008ed8:	4682      	mov	sl, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	4690      	mov	r8, r2
 8008ede:	4699      	mov	r9, r3
 8008ee0:	d837      	bhi.n	8008f52 <__ssputs_r+0x82>
 8008ee2:	898a      	ldrh	r2, [r1, #12]
 8008ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ee8:	d031      	beq.n	8008f4e <__ssputs_r+0x7e>
 8008eea:	6825      	ldr	r5, [r4, #0]
 8008eec:	6909      	ldr	r1, [r1, #16]
 8008eee:	1a6f      	subs	r7, r5, r1
 8008ef0:	6965      	ldr	r5, [r4, #20]
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ef8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008efc:	f109 0301 	add.w	r3, r9, #1
 8008f00:	443b      	add	r3, r7
 8008f02:	429d      	cmp	r5, r3
 8008f04:	bf38      	it	cc
 8008f06:	461d      	movcc	r5, r3
 8008f08:	0553      	lsls	r3, r2, #21
 8008f0a:	d530      	bpl.n	8008f6e <__ssputs_r+0x9e>
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f7ff ff85 	bl	8008e1c <_malloc_r>
 8008f12:	4606      	mov	r6, r0
 8008f14:	b950      	cbnz	r0, 8008f2c <__ssputs_r+0x5c>
 8008f16:	230c      	movs	r3, #12
 8008f18:	f8ca 3000 	str.w	r3, [sl]
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f22:	81a3      	strh	r3, [r4, #12]
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f2c:	463a      	mov	r2, r7
 8008f2e:	6921      	ldr	r1, [r4, #16]
 8008f30:	f7fc fc61 	bl	80057f6 <memcpy>
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3e:	81a3      	strh	r3, [r4, #12]
 8008f40:	6126      	str	r6, [r4, #16]
 8008f42:	6165      	str	r5, [r4, #20]
 8008f44:	443e      	add	r6, r7
 8008f46:	1bed      	subs	r5, r5, r7
 8008f48:	6026      	str	r6, [r4, #0]
 8008f4a:	60a5      	str	r5, [r4, #8]
 8008f4c:	464e      	mov	r6, r9
 8008f4e:	454e      	cmp	r6, r9
 8008f50:	d900      	bls.n	8008f54 <__ssputs_r+0x84>
 8008f52:	464e      	mov	r6, r9
 8008f54:	4632      	mov	r2, r6
 8008f56:	4641      	mov	r1, r8
 8008f58:	6820      	ldr	r0, [r4, #0]
 8008f5a:	f000 f92d 	bl	80091b8 <memmove>
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	1b9b      	subs	r3, r3, r6
 8008f62:	60a3      	str	r3, [r4, #8]
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	441e      	add	r6, r3
 8008f68:	6026      	str	r6, [r4, #0]
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	e7dc      	b.n	8008f28 <__ssputs_r+0x58>
 8008f6e:	462a      	mov	r2, r5
 8008f70:	f000 f93d 	bl	80091ee <_realloc_r>
 8008f74:	4606      	mov	r6, r0
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d1e2      	bne.n	8008f40 <__ssputs_r+0x70>
 8008f7a:	6921      	ldr	r1, [r4, #16]
 8008f7c:	4650      	mov	r0, sl
 8008f7e:	f7ff feff 	bl	8008d80 <_free_r>
 8008f82:	e7c8      	b.n	8008f16 <__ssputs_r+0x46>

08008f84 <_svfiprintf_r>:
 8008f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f88:	461d      	mov	r5, r3
 8008f8a:	898b      	ldrh	r3, [r1, #12]
 8008f8c:	061f      	lsls	r7, r3, #24
 8008f8e:	b09d      	sub	sp, #116	; 0x74
 8008f90:	4680      	mov	r8, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	4616      	mov	r6, r2
 8008f96:	d50f      	bpl.n	8008fb8 <_svfiprintf_r+0x34>
 8008f98:	690b      	ldr	r3, [r1, #16]
 8008f9a:	b96b      	cbnz	r3, 8008fb8 <_svfiprintf_r+0x34>
 8008f9c:	2140      	movs	r1, #64	; 0x40
 8008f9e:	f7ff ff3d 	bl	8008e1c <_malloc_r>
 8008fa2:	6020      	str	r0, [r4, #0]
 8008fa4:	6120      	str	r0, [r4, #16]
 8008fa6:	b928      	cbnz	r0, 8008fb4 <_svfiprintf_r+0x30>
 8008fa8:	230c      	movs	r3, #12
 8008faa:	f8c8 3000 	str.w	r3, [r8]
 8008fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb2:	e0c8      	b.n	8009146 <_svfiprintf_r+0x1c2>
 8008fb4:	2340      	movs	r3, #64	; 0x40
 8008fb6:	6163      	str	r3, [r4, #20]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	9309      	str	r3, [sp, #36]	; 0x24
 8008fbc:	2320      	movs	r3, #32
 8008fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fc2:	2330      	movs	r3, #48	; 0x30
 8008fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fc8:	9503      	str	r5, [sp, #12]
 8008fca:	f04f 0b01 	mov.w	fp, #1
 8008fce:	4637      	mov	r7, r6
 8008fd0:	463d      	mov	r5, r7
 8008fd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008fd6:	b10b      	cbz	r3, 8008fdc <_svfiprintf_r+0x58>
 8008fd8:	2b25      	cmp	r3, #37	; 0x25
 8008fda:	d13e      	bne.n	800905a <_svfiprintf_r+0xd6>
 8008fdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8008fe0:	d00b      	beq.n	8008ffa <_svfiprintf_r+0x76>
 8008fe2:	4653      	mov	r3, sl
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4640      	mov	r0, r8
 8008fea:	f7ff ff71 	bl	8008ed0 <__ssputs_r>
 8008fee:	3001      	adds	r0, #1
 8008ff0:	f000 80a4 	beq.w	800913c <_svfiprintf_r+0x1b8>
 8008ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff6:	4453      	add	r3, sl
 8008ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8008ffa:	783b      	ldrb	r3, [r7, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 809d 	beq.w	800913c <_svfiprintf_r+0x1b8>
 8009002:	2300      	movs	r3, #0
 8009004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800900c:	9304      	str	r3, [sp, #16]
 800900e:	9307      	str	r3, [sp, #28]
 8009010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009014:	931a      	str	r3, [sp, #104]	; 0x68
 8009016:	462f      	mov	r7, r5
 8009018:	2205      	movs	r2, #5
 800901a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800901e:	4850      	ldr	r0, [pc, #320]	; (8009160 <_svfiprintf_r+0x1dc>)
 8009020:	f7f7 f8e6 	bl	80001f0 <memchr>
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	b9d0      	cbnz	r0, 800905e <_svfiprintf_r+0xda>
 8009028:	06d9      	lsls	r1, r3, #27
 800902a:	bf44      	itt	mi
 800902c:	2220      	movmi	r2, #32
 800902e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009032:	071a      	lsls	r2, r3, #28
 8009034:	bf44      	itt	mi
 8009036:	222b      	movmi	r2, #43	; 0x2b
 8009038:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800903c:	782a      	ldrb	r2, [r5, #0]
 800903e:	2a2a      	cmp	r2, #42	; 0x2a
 8009040:	d015      	beq.n	800906e <_svfiprintf_r+0xea>
 8009042:	9a07      	ldr	r2, [sp, #28]
 8009044:	462f      	mov	r7, r5
 8009046:	2000      	movs	r0, #0
 8009048:	250a      	movs	r5, #10
 800904a:	4639      	mov	r1, r7
 800904c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009050:	3b30      	subs	r3, #48	; 0x30
 8009052:	2b09      	cmp	r3, #9
 8009054:	d94d      	bls.n	80090f2 <_svfiprintf_r+0x16e>
 8009056:	b1b8      	cbz	r0, 8009088 <_svfiprintf_r+0x104>
 8009058:	e00f      	b.n	800907a <_svfiprintf_r+0xf6>
 800905a:	462f      	mov	r7, r5
 800905c:	e7b8      	b.n	8008fd0 <_svfiprintf_r+0x4c>
 800905e:	4a40      	ldr	r2, [pc, #256]	; (8009160 <_svfiprintf_r+0x1dc>)
 8009060:	1a80      	subs	r0, r0, r2
 8009062:	fa0b f000 	lsl.w	r0, fp, r0
 8009066:	4318      	orrs	r0, r3
 8009068:	9004      	str	r0, [sp, #16]
 800906a:	463d      	mov	r5, r7
 800906c:	e7d3      	b.n	8009016 <_svfiprintf_r+0x92>
 800906e:	9a03      	ldr	r2, [sp, #12]
 8009070:	1d11      	adds	r1, r2, #4
 8009072:	6812      	ldr	r2, [r2, #0]
 8009074:	9103      	str	r1, [sp, #12]
 8009076:	2a00      	cmp	r2, #0
 8009078:	db01      	blt.n	800907e <_svfiprintf_r+0xfa>
 800907a:	9207      	str	r2, [sp, #28]
 800907c:	e004      	b.n	8009088 <_svfiprintf_r+0x104>
 800907e:	4252      	negs	r2, r2
 8009080:	f043 0302 	orr.w	r3, r3, #2
 8009084:	9207      	str	r2, [sp, #28]
 8009086:	9304      	str	r3, [sp, #16]
 8009088:	783b      	ldrb	r3, [r7, #0]
 800908a:	2b2e      	cmp	r3, #46	; 0x2e
 800908c:	d10c      	bne.n	80090a8 <_svfiprintf_r+0x124>
 800908e:	787b      	ldrb	r3, [r7, #1]
 8009090:	2b2a      	cmp	r3, #42	; 0x2a
 8009092:	d133      	bne.n	80090fc <_svfiprintf_r+0x178>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	1d1a      	adds	r2, r3, #4
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	9203      	str	r2, [sp, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	bfb8      	it	lt
 80090a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090a4:	3702      	adds	r7, #2
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	4d2e      	ldr	r5, [pc, #184]	; (8009164 <_svfiprintf_r+0x1e0>)
 80090aa:	7839      	ldrb	r1, [r7, #0]
 80090ac:	2203      	movs	r2, #3
 80090ae:	4628      	mov	r0, r5
 80090b0:	f7f7 f89e 	bl	80001f0 <memchr>
 80090b4:	b138      	cbz	r0, 80090c6 <_svfiprintf_r+0x142>
 80090b6:	2340      	movs	r3, #64	; 0x40
 80090b8:	1b40      	subs	r0, r0, r5
 80090ba:	fa03 f000 	lsl.w	r0, r3, r0
 80090be:	9b04      	ldr	r3, [sp, #16]
 80090c0:	4303      	orrs	r3, r0
 80090c2:	3701      	adds	r7, #1
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	7839      	ldrb	r1, [r7, #0]
 80090c8:	4827      	ldr	r0, [pc, #156]	; (8009168 <_svfiprintf_r+0x1e4>)
 80090ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ce:	2206      	movs	r2, #6
 80090d0:	1c7e      	adds	r6, r7, #1
 80090d2:	f7f7 f88d 	bl	80001f0 <memchr>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d038      	beq.n	800914c <_svfiprintf_r+0x1c8>
 80090da:	4b24      	ldr	r3, [pc, #144]	; (800916c <_svfiprintf_r+0x1e8>)
 80090dc:	bb13      	cbnz	r3, 8009124 <_svfiprintf_r+0x1a0>
 80090de:	9b03      	ldr	r3, [sp, #12]
 80090e0:	3307      	adds	r3, #7
 80090e2:	f023 0307 	bic.w	r3, r3, #7
 80090e6:	3308      	adds	r3, #8
 80090e8:	9303      	str	r3, [sp, #12]
 80090ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ec:	444b      	add	r3, r9
 80090ee:	9309      	str	r3, [sp, #36]	; 0x24
 80090f0:	e76d      	b.n	8008fce <_svfiprintf_r+0x4a>
 80090f2:	fb05 3202 	mla	r2, r5, r2, r3
 80090f6:	2001      	movs	r0, #1
 80090f8:	460f      	mov	r7, r1
 80090fa:	e7a6      	b.n	800904a <_svfiprintf_r+0xc6>
 80090fc:	2300      	movs	r3, #0
 80090fe:	3701      	adds	r7, #1
 8009100:	9305      	str	r3, [sp, #20]
 8009102:	4619      	mov	r1, r3
 8009104:	250a      	movs	r5, #10
 8009106:	4638      	mov	r0, r7
 8009108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800910c:	3a30      	subs	r2, #48	; 0x30
 800910e:	2a09      	cmp	r2, #9
 8009110:	d903      	bls.n	800911a <_svfiprintf_r+0x196>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0c8      	beq.n	80090a8 <_svfiprintf_r+0x124>
 8009116:	9105      	str	r1, [sp, #20]
 8009118:	e7c6      	b.n	80090a8 <_svfiprintf_r+0x124>
 800911a:	fb05 2101 	mla	r1, r5, r1, r2
 800911e:	2301      	movs	r3, #1
 8009120:	4607      	mov	r7, r0
 8009122:	e7f0      	b.n	8009106 <_svfiprintf_r+0x182>
 8009124:	ab03      	add	r3, sp, #12
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	4622      	mov	r2, r4
 800912a:	4b11      	ldr	r3, [pc, #68]	; (8009170 <_svfiprintf_r+0x1ec>)
 800912c:	a904      	add	r1, sp, #16
 800912e:	4640      	mov	r0, r8
 8009130:	f7fc fc08 	bl	8005944 <_printf_float>
 8009134:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009138:	4681      	mov	r9, r0
 800913a:	d1d6      	bne.n	80090ea <_svfiprintf_r+0x166>
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	065b      	lsls	r3, r3, #25
 8009140:	f53f af35 	bmi.w	8008fae <_svfiprintf_r+0x2a>
 8009144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009146:	b01d      	add	sp, #116	; 0x74
 8009148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914c:	ab03      	add	r3, sp, #12
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	4622      	mov	r2, r4
 8009152:	4b07      	ldr	r3, [pc, #28]	; (8009170 <_svfiprintf_r+0x1ec>)
 8009154:	a904      	add	r1, sp, #16
 8009156:	4640      	mov	r0, r8
 8009158:	f7fc feaa 	bl	8005eb0 <_printf_i>
 800915c:	e7ea      	b.n	8009134 <_svfiprintf_r+0x1b0>
 800915e:	bf00      	nop
 8009160:	080099e4 	.word	0x080099e4
 8009164:	080099ea 	.word	0x080099ea
 8009168:	080099ee 	.word	0x080099ee
 800916c:	08005945 	.word	0x08005945
 8009170:	08008ed1 	.word	0x08008ed1

08009174 <_sbrk_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4c06      	ldr	r4, [pc, #24]	; (8009190 <_sbrk_r+0x1c>)
 8009178:	2300      	movs	r3, #0
 800917a:	4605      	mov	r5, r0
 800917c:	4608      	mov	r0, r1
 800917e:	6023      	str	r3, [r4, #0]
 8009180:	f7fc f8f0 	bl	8005364 <_sbrk>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_sbrk_r+0x1a>
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	b103      	cbz	r3, 800918e <_sbrk_r+0x1a>
 800918c:	602b      	str	r3, [r5, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	20000af0 	.word	0x20000af0

08009194 <strncmp>:
 8009194:	b510      	push	{r4, lr}
 8009196:	b16a      	cbz	r2, 80091b4 <strncmp+0x20>
 8009198:	3901      	subs	r1, #1
 800919a:	1884      	adds	r4, r0, r2
 800919c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80091a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d103      	bne.n	80091b0 <strncmp+0x1c>
 80091a8:	42a0      	cmp	r0, r4
 80091aa:	d001      	beq.n	80091b0 <strncmp+0x1c>
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1f5      	bne.n	800919c <strncmp+0x8>
 80091b0:	1a98      	subs	r0, r3, r2
 80091b2:	bd10      	pop	{r4, pc}
 80091b4:	4610      	mov	r0, r2
 80091b6:	e7fc      	b.n	80091b2 <strncmp+0x1e>

080091b8 <memmove>:
 80091b8:	4288      	cmp	r0, r1
 80091ba:	b510      	push	{r4, lr}
 80091bc:	eb01 0302 	add.w	r3, r1, r2
 80091c0:	d807      	bhi.n	80091d2 <memmove+0x1a>
 80091c2:	1e42      	subs	r2, r0, #1
 80091c4:	4299      	cmp	r1, r3
 80091c6:	d00a      	beq.n	80091de <memmove+0x26>
 80091c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80091d0:	e7f8      	b.n	80091c4 <memmove+0xc>
 80091d2:	4283      	cmp	r3, r0
 80091d4:	d9f5      	bls.n	80091c2 <memmove+0xa>
 80091d6:	1881      	adds	r1, r0, r2
 80091d8:	1ad2      	subs	r2, r2, r3
 80091da:	42d3      	cmn	r3, r2
 80091dc:	d100      	bne.n	80091e0 <memmove+0x28>
 80091de:	bd10      	pop	{r4, pc}
 80091e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80091e8:	e7f7      	b.n	80091da <memmove+0x22>

080091ea <__malloc_lock>:
 80091ea:	4770      	bx	lr

080091ec <__malloc_unlock>:
 80091ec:	4770      	bx	lr

080091ee <_realloc_r>:
 80091ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f0:	4607      	mov	r7, r0
 80091f2:	4614      	mov	r4, r2
 80091f4:	460e      	mov	r6, r1
 80091f6:	b921      	cbnz	r1, 8009202 <_realloc_r+0x14>
 80091f8:	4611      	mov	r1, r2
 80091fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091fe:	f7ff be0d 	b.w	8008e1c <_malloc_r>
 8009202:	b922      	cbnz	r2, 800920e <_realloc_r+0x20>
 8009204:	f7ff fdbc 	bl	8008d80 <_free_r>
 8009208:	4625      	mov	r5, r4
 800920a:	4628      	mov	r0, r5
 800920c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920e:	f000 f814 	bl	800923a <_malloc_usable_size_r>
 8009212:	42a0      	cmp	r0, r4
 8009214:	d20f      	bcs.n	8009236 <_realloc_r+0x48>
 8009216:	4621      	mov	r1, r4
 8009218:	4638      	mov	r0, r7
 800921a:	f7ff fdff 	bl	8008e1c <_malloc_r>
 800921e:	4605      	mov	r5, r0
 8009220:	2800      	cmp	r0, #0
 8009222:	d0f2      	beq.n	800920a <_realloc_r+0x1c>
 8009224:	4631      	mov	r1, r6
 8009226:	4622      	mov	r2, r4
 8009228:	f7fc fae5 	bl	80057f6 <memcpy>
 800922c:	4631      	mov	r1, r6
 800922e:	4638      	mov	r0, r7
 8009230:	f7ff fda6 	bl	8008d80 <_free_r>
 8009234:	e7e9      	b.n	800920a <_realloc_r+0x1c>
 8009236:	4635      	mov	r5, r6
 8009238:	e7e7      	b.n	800920a <_realloc_r+0x1c>

0800923a <_malloc_usable_size_r>:
 800923a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800923e:	1f18      	subs	r0, r3, #4
 8009240:	2b00      	cmp	r3, #0
 8009242:	bfbc      	itt	lt
 8009244:	580b      	ldrlt	r3, [r1, r0]
 8009246:	18c0      	addlt	r0, r0, r3
 8009248:	4770      	bx	lr
	...

0800924c <_init>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	bf00      	nop
 8009250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009252:	bc08      	pop	{r3}
 8009254:	469e      	mov	lr, r3
 8009256:	4770      	bx	lr

08009258 <_fini>:
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	bf00      	nop
 800925c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800925e:	bc08      	pop	{r3}
 8009260:	469e      	mov	lr, r3
 8009262:	4770      	bx	lr
