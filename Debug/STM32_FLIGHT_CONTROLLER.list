
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f458  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b48  0800f5f8  0800f5f8  0001f5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010140  08010140  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  08010140  08010140  00020140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010148  08010148  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010148  08010148  00020148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801014c  0801014c  0002014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08010150  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006428  20000258  080103a4  00030258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006680  080103a4  00036680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036032  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006550  00000000  00000000  000662b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000181b5  00000000  00000000  0006c806  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000020d8  00000000  00000000  000849c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002348  00000000  00000000  00086a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001f59f  00000000  00000000  00088de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00020110  00000000  00000000  000a837f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a8f91  00000000  00000000  000c848f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00171420  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074a0  00000000  00000000  0017149c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f5e0 	.word	0x0800f5e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800f5e0 	.word	0x0800f5e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f98:	b500      	push	{lr}
 8000f9a:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f9c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000fa0:	f88d 200d 	strb.w	r2, [sp, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2302      	movs	r3, #2
 8000faa:	aa03      	add	r2, sp, #12
 8000fac:	4601      	mov	r1, r0
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <writeByte+0x24>)
 8000fb0:	f002 fda4 	bl	8003afc <HAL_I2C_Master_Transmit>
}
 8000fb4:	b005      	add	sp, #20
 8000fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fba:	bf00      	nop
 8000fbc:	20004a9c 	.word	0x20004a9c

08000fc0 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	b084      	sub	sp, #16
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000fc4:	a904      	add	r1, sp, #16
 8000fc6:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000fca:	4605      	mov	r5, r0
 8000fcc:	4c09      	ldr	r4, [pc, #36]	; (8000ff4 <readByte+0x34>)
 8000fce:	260a      	movs	r6, #10
 8000fd0:	9600      	str	r6, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f002 fd8f 	bl	8003afc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8000fde:	9600      	str	r6, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	aa03      	add	r2, sp, #12
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f002 fe42 	bl	8003c70 <HAL_I2C_Master_Receive>

	return data[0];
}
 8000fec:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	20004a9c 	.word	0x20004a9c

08000ff8 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000ff8:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	21d0      	movs	r1, #208	; 0xd0
 8001000:	f002 ff9e 	bl	8003f40 <HAL_I2C_IsDeviceReady>
 8001004:	b100      	cbz	r0, 8001008 <imu_init+0x10>
 8001006:	e7fe      	b.n	8001006 <imu_init+0xe>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8001008:	2120      	movs	r1, #32
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <imu_init+0x3c>)
 800100c:	f002 fa8a 	bl	8003524 <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001010:	2275      	movs	r2, #117	; 0x75
 8001012:	21d1      	movs	r1, #209	; 0xd1
 8001014:	20d0      	movs	r0, #208	; 0xd0
 8001016:	f7ff ffd3 	bl	8000fc0 <readByte>
 800101a:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 800101c:	2871      	cmp	r0, #113	; 0x71
 800101e:	d106      	bne.n	800102e <imu_init+0x36>
		printf("MPU9250 online..\r\n");
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <imu_init+0x40>)
 8001022:	f00a ff71 	bl	800bf08 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8001026:	4621      	mov	r1, r4
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <imu_init+0x44>)
 800102a:	f00a fef9 	bl	800be20 <iprintf>
}
 800102e:	2000      	movs	r0, #0
 8001030:	bd10      	pop	{r4, pc}
 8001032:	bf00      	nop
 8001034:	40020000 	.word	0x40020000
 8001038:	0800f64c 	.word	0x0800f64c
 800103c:	0800f660 	.word	0x0800f660

08001040 <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 8001040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	4688      	mov	r8, r1
 8001048:	461c      	mov	r4, r3
 800104a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 800104c:	a908      	add	r1, sp, #32
 800104e:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001052:	4e0e      	ldr	r6, [pc, #56]	; (800108c <readBytes+0x4c>)
 8001054:	270a      	movs	r7, #10
 8001056:	9700      	str	r7, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	460a      	mov	r2, r1
 800105c:	4601      	mov	r1, r0
 800105e:	4630      	mov	r0, r6
 8001060:	f002 fd4c 	bl	8003afc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001064:	9700      	str	r7, [sp, #0]
 8001066:	4623      	mov	r3, r4
 8001068:	aa04      	add	r2, sp, #16
 800106a:	4641      	mov	r1, r8
 800106c:	4630      	mov	r0, r6
 800106e:	f002 fdff 	bl	8003c70 <HAL_I2C_Master_Receive>

	for (int ii = 0; ii < count; ii++) {
 8001072:	2300      	movs	r3, #0
 8001074:	e005      	b.n	8001082 <readBytes+0x42>
		dest[ii] = data[ii];
 8001076:	aa08      	add	r2, sp, #32
 8001078:	441a      	add	r2, r3
 800107a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800107e:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 8001080:	3301      	adds	r3, #1
 8001082:	429c      	cmp	r4, r3
 8001084:	dcf7      	bgt.n	8001076 <readBytes+0x36>
	}
}
 8001086:	b008      	add	sp, #32
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800108c:	20004a9c 	.word	0x20004a9c

08001090 <getMres>:

void getMres() {

	switch (Mscale) {
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <getMres+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b113      	cbz	r3, 800109c <getMres+0xc>
 8001096:	2b01      	cmp	r3, #1
 8001098:	d004      	beq.n	80010a4 <getMres+0x14>
 800109a:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <getMres+0x20>)
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <getMres+0x24>)
 80010a0:	601a      	str	r2, [r3, #0]
		break;
 80010a2:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <getMres+0x20>)
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <getMres+0x28>)
 80010a8:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010aa:	4770      	bx	lr
 80010ac:	20000001 	.word	0x20000001
 80010b0:	20004b34 	.word	0x20004b34
 80010b4:	40a4d84e 	.word	0x40a4d84e
 80010b8:	3fa4d84e 	.word	0x3fa4d84e

080010bc <getGres>:

void getGres() {
	switch (Gscale) {
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <getGres+0x30>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d812      	bhi.n	80010ea <getGres+0x2e>
 80010c4:	e8df f003 	tbb	[pc, r3]
 80010c8:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <getGres+0x34>)
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <getGres+0x38>)
 80010d0:	601a      	str	r2, [r3, #0]
		break;
 80010d2:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <getGres+0x34>)
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <getGres+0x3c>)
 80010d8:	601a      	str	r2, [r3, #0]
		break;
 80010da:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <getGres+0x34>)
 80010de:	4a07      	ldr	r2, [pc, #28]	; (80010fc <getGres+0x40>)
 80010e0:	601a      	str	r2, [r3, #0]
		break;
 80010e2:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <getGres+0x34>)
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <getGres+0x44>)
 80010e8:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010ea:	4770      	bx	lr
 80010ec:	20000275 	.word	0x20000275
 80010f0:	20004b18 	.word	0x20004b18
 80010f4:	3bfa0000 	.word	0x3bfa0000
 80010f8:	3c7a0000 	.word	0x3c7a0000
 80010fc:	3cfa0000 	.word	0x3cfa0000
 8001100:	3d7a0000 	.word	0x3d7a0000

08001104 <getAres>:

void getAres() {
	switch (Ascale) {
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <getAres+0x38>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d816      	bhi.n	800113a <getAres+0x36>
 800110c:	e8df f003 	tbb	[pc, r3]
 8001110:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <getAres+0x3c>)
 8001116:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800111a:	601a      	str	r2, [r3, #0]
		break;
 800111c:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <getAres+0x3c>)
 8001120:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001124:	601a      	str	r2, [r3, #0]
		break;
 8001126:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <getAres+0x3c>)
 800112a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800112e:	601a      	str	r2, [r3, #0]
		break;
 8001130:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 8001132:	4b03      	ldr	r3, [pc, #12]	; (8001140 <getAres+0x3c>)
 8001134:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001138:	601a      	str	r2, [r3, #0]
		break;
	}
}
 800113a:	4770      	bx	lr
 800113c:	20000274 	.word	0x20000274
 8001140:	20004b0c 	.word	0x20004b0c

08001144 <readAccelData>:

void readAccelData(int16_t * destination) {
 8001144:	b510      	push	{r4, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800114a:	ab02      	add	r3, sp, #8
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2306      	movs	r3, #6
 8001150:	223b      	movs	r2, #59	; 0x3b
 8001152:	21d1      	movs	r1, #209	; 0xd1
 8001154:	20d0      	movs	r0, #208	; 0xd0
 8001156:	f7ff ff73 	bl	8001040 <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800115a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800115e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001166:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001168:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800116c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001170:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001174:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001176:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800117a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800117e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001182:	80a3      	strh	r3, [r4, #4]
}
 8001184:	b004      	add	sp, #16
 8001186:	bd10      	pop	{r4, pc}

08001188 <readGyroData>:

void readGyroData(int16_t * destination) {
 8001188:	b510      	push	{r4, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800118e:	ab02      	add	r3, sp, #8
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2306      	movs	r3, #6
 8001194:	2243      	movs	r2, #67	; 0x43
 8001196:	21d1      	movs	r1, #209	; 0xd1
 8001198:	20d0      	movs	r0, #208	; 0xd0
 800119a:	f7ff ff51 	bl	8001040 <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800119e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80011a2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80011a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011aa:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80011ac:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80011b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011b8:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011ba:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011be:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011c6:	80a3      	strh	r3, [r4, #4]
}
 80011c8:	b004      	add	sp, #16
 80011ca:	bd10      	pop	{r4, pc}

080011cc <readMagData>:

void readMagData(int16_t * destination) {
 80011cc:	b510      	push	{r4, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	//if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set

		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7, &rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
 80011d2:	ab02      	add	r3, sp, #8
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2307      	movs	r3, #7
 80011d8:	2203      	movs	r2, #3
 80011da:	2119      	movs	r1, #25
 80011dc:	2018      	movs	r0, #24
 80011de:	f7ff ff2f 	bl	8001040 <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 80011e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 80011e6:	f013 0f08 	tst.w	r3, #8
 80011ea:	d114      	bne.n	8001216 <readMagData+0x4a>
			destination[0] =
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 80011ec:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80011f0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80011f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 80011f8:	8023      	strh	r3, [r4, #0]
			destination[1] =
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 80011fa:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80011fe:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001202:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 8001206:	8063      	strh	r3, [r4, #2]
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 8001208:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800120c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001210:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 8001214:	80a3      	strh	r3, [r4, #4]
		}
	//}
}
 8001216:	b004      	add	sp, #16
 8001218:	bd10      	pop	{r4, pc}

0800121a <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 800121a:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	216b      	movs	r1, #107	; 0x6b
 8001220:	20d0      	movs	r0, #208	; 0xd0
 8001222:	f7ff feb9 	bl	8000f98 <writeByte>
	HAL_Delay(100);
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f001 feec 	bl	8003004 <HAL_Delay>
}
 800122c:	bd08      	pop	{r3, pc}
	...

08001230 <initAK8963>:

void initAK8963(float * destination) {
 8001230:	b510      	push	{r4, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001236:	2200      	movs	r2, #0
 8001238:	210a      	movs	r1, #10
 800123a:	2018      	movs	r0, #24
 800123c:	f7ff feac 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001240:	200a      	movs	r0, #10
 8001242:	f001 fedf 	bl	8003004 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001246:	220f      	movs	r2, #15
 8001248:	210a      	movs	r1, #10
 800124a:	2018      	movs	r0, #24
 800124c:	f7ff fea4 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001250:	200a      	movs	r0, #10
 8001252:	f001 fed7 	bl	8003004 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 8001256:	ab03      	add	r3, sp, #12
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2303      	movs	r3, #3
 800125c:	2210      	movs	r2, #16
 800125e:	2119      	movs	r1, #25
 8001260:	2018      	movs	r0, #24
 8001262:	f7ff feed 	bl	8001040 <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001266:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800126a:	3b80      	subs	r3, #128	; 0x80
 800126c:	ee07 3a10 	vmov	s14, r3
 8001270:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001274:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80012ec <initAK8963+0xbc>
 8001278:	ee27 7a06 	vmul.f32	s14, s14, s12
 800127c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001280:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001284:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001288:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800128c:	3b80      	subs	r3, #128	; 0x80
 800128e:	ee07 3a10 	vmov	s14, r3
 8001292:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001296:	ee27 7a06 	vmul.f32	s14, s14, s12
 800129a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800129e:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 80012a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012a6:	3b80      	subs	r3, #128	; 0x80
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80012b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012b8:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012bc:	2200      	movs	r2, #0
 80012be:	210a      	movs	r1, #10
 80012c0:	2018      	movs	r0, #24
 80012c2:	f7ff fe69 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 80012c6:	200a      	movs	r0, #10
 80012c8:	f001 fe9c 	bl	8003004 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <initAK8963+0xc0>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <initAK8963+0xc4>)
 80012d2:	7812      	ldrb	r2, [r2, #0]
 80012d4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	210a      	movs	r1, #10
 80012dc:	2018      	movs	r0, #24
 80012de:	f7ff fe5b 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 80012e2:	200a      	movs	r0, #10
 80012e4:	f001 fe8e 	bl	8003004 <HAL_Delay>
}
 80012e8:	b004      	add	sp, #16
 80012ea:	bd10      	pop	{r4, pc}
 80012ec:	3b800000 	.word	0x3b800000
 80012f0:	20000001 	.word	0x20000001
 80012f4:	20000000 	.word	0x20000000

080012f8 <initMPU9250>:
	    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
	    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];

}

void initMPU9250() {
 80012f8:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80012fa:	2200      	movs	r2, #0
 80012fc:	216b      	movs	r1, #107	; 0x6b
 80012fe:	20d0      	movs	r0, #208	; 0xd0
 8001300:	f7ff fe4a 	bl	8000f98 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001304:	2064      	movs	r0, #100	; 0x64
 8001306:	f001 fe7d 	bl	8003004 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800130a:	2201      	movs	r2, #1
 800130c:	216b      	movs	r1, #107	; 0x6b
 800130e:	20d0      	movs	r0, #208	; 0xd0
 8001310:	f7ff fe42 	bl	8000f98 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 8001314:	2200      	movs	r2, #0
 8001316:	211a      	movs	r1, #26
 8001318:	20d0      	movs	r0, #208	; 0xd0
 800131a:	f7ff fe3d 	bl	8000f98 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 800131e:	2200      	movs	r2, #0
 8001320:	2119      	movs	r1, #25
 8001322:	20d0      	movs	r0, #208	; 0xd0
 8001324:	f7ff fe38 	bl	8000f98 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001328:	221b      	movs	r2, #27
 800132a:	21d1      	movs	r1, #209	; 0xd1
 800132c:	4608      	mov	r0, r1
 800132e:	f7ff fe47 	bl	8000fc0 <readByte>
 8001332:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001334:	f000 021f 	and.w	r2, r0, #31
 8001338:	211b      	movs	r1, #27
 800133a:	20d0      	movs	r0, #208	; 0xd0
 800133c:	f7ff fe2c 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001340:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001344:	211b      	movs	r1, #27
 8001346:	20d0      	movs	r0, #208	; 0xd0
 8001348:	f7ff fe26 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <initMPU9250+0xd8>)
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	211b      	movs	r1, #27
 8001358:	20d0      	movs	r0, #208	; 0xd0
 800135a:	f7ff fe1d 	bl	8000f98 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 800135e:	221c      	movs	r2, #28
 8001360:	21d1      	movs	r1, #209	; 0xd1
 8001362:	4608      	mov	r0, r1
 8001364:	f7ff fe2c 	bl	8000fc0 <readByte>
 8001368:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 800136a:	f000 021f 	and.w	r2, r0, #31
 800136e:	211c      	movs	r1, #28
 8001370:	20d0      	movs	r0, #208	; 0xd0
 8001372:	f7ff fe11 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001376:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 800137a:	211c      	movs	r1, #28
 800137c:	20d0      	movs	r0, #208	; 0xd0
 800137e:	f7ff fe0b 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <initMPU9250+0xdc>)
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	211c      	movs	r1, #28
 800138e:	20d0      	movs	r0, #208	; 0xd0
 8001390:	f7ff fe02 	bl	8000f98 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 8001394:	221d      	movs	r2, #29
 8001396:	21d1      	movs	r1, #209	; 0xd1
 8001398:	4608      	mov	r0, r1
 800139a:	f7ff fe11 	bl	8000fc0 <readByte>
 800139e:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80013a0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013a4:	211d      	movs	r1, #29
 80013a6:	20d0      	movs	r0, #208	; 0xd0
 80013a8:	f7ff fdf6 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80013ac:	f044 0203 	orr.w	r2, r4, #3
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	211d      	movs	r1, #29
 80013b4:	20d0      	movs	r0, #208	; 0xd0
 80013b6:	f7ff fdef 	bl	8000f98 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013ba:	2222      	movs	r2, #34	; 0x22
 80013bc:	2137      	movs	r1, #55	; 0x37
 80013be:	20d0      	movs	r0, #208	; 0xd0
 80013c0:	f7ff fdea 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013c4:	2201      	movs	r2, #1
 80013c6:	2138      	movs	r1, #56	; 0x38
 80013c8:	20d0      	movs	r0, #208	; 0xd0
 80013ca:	f7ff fde5 	bl	8000f98 <writeByte>
}
 80013ce:	bd10      	pop	{r4, pc}
 80013d0:	20000275 	.word	0x20000275
 80013d4:	20000274 	.word	0x20000274

080013d8 <MPU9250SelfTest>:
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
}

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 80013d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013dc:	ed2d 8b08 	vpush	{d8-d11}
 80013e0:	b093      	sub	sp, #76	; 0x4c
 80013e2:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 80013e4:	2400      	movs	r4, #0
 80013e6:	9410      	str	r4, [sp, #64]	; 0x40
 80013e8:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80013ec:	4622      	mov	r2, r4
 80013ee:	2119      	movs	r1, #25
 80013f0:	20d0      	movs	r0, #208	; 0xd0
 80013f2:	f7ff fdd1 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80013f6:	2202      	movs	r2, #2
 80013f8:	211a      	movs	r1, #26
 80013fa:	20d0      	movs	r0, #208	; 0xd0
 80013fc:	f7ff fdcc 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 8001400:	2201      	movs	r2, #1
 8001402:	211b      	movs	r1, #27
 8001404:	20d0      	movs	r0, #208	; 0xd0
 8001406:	f7ff fdc7 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800140a:	2202      	movs	r2, #2
 800140c:	211d      	movs	r1, #29
 800140e:	20d0      	movs	r0, #208	; 0xd0
 8001410:	f7ff fdc2 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 8001414:	2201      	movs	r2, #1
 8001416:	211c      	movs	r1, #28
 8001418:	20d0      	movs	r0, #208	; 0xd0
 800141a:	f7ff fdbd 	bl	8000f98 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800141e:	e051      	b.n	80014c4 <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001420:	ae10      	add	r6, sp, #64	; 0x40
 8001422:	9600      	str	r6, [sp, #0]
 8001424:	2306      	movs	r3, #6
 8001426:	223b      	movs	r2, #59	; 0x3b
 8001428:	21d1      	movs	r1, #209	; 0xd1
 800142a:	20d0      	movs	r0, #208	; 0xd0
 800142c:	f7ff fe08 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001430:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001434:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001438:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800143c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8001440:	4413      	add	r3, r2
 8001442:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001446:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800144a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800144e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001452:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8001456:	4413      	add	r3, r2
 8001458:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800145c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001460:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001464:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001468:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800146c:	4413      	add	r3, r2
 800146e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001472:	9600      	str	r6, [sp, #0]
 8001474:	2306      	movs	r3, #6
 8001476:	2243      	movs	r2, #67	; 0x43
 8001478:	21d1      	movs	r1, #209	; 0xd1
 800147a:	20d0      	movs	r0, #208	; 0xd0
 800147c:	f7ff fde0 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001480:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001484:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001488:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800148c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8001490:	4413      	add	r3, r2
 8001492:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001496:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800149a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800149e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014a2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80014a6:	4413      	add	r3, r2
 80014a8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80014ac:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80014b0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80014b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014b8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80014bc:	4413      	add	r3, r2
 80014be:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80014c2:	3401      	adds	r4, #1
 80014c4:	2cc7      	cmp	r4, #199	; 0xc7
 80014c6:	ddab      	ble.n	8001420 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80014c8:	2400      	movs	r4, #0
 80014ca:	e016      	b.n	80014fa <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 80014cc:	ab12      	add	r3, sp, #72	; 0x48
 80014ce:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80014d2:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 80014d6:	48c0      	ldr	r0, [pc, #768]	; (80017d8 <MPU9250SelfTest+0x400>)
 80014d8:	fb80 6302 	smull	r6, r3, r0, r2
 80014dc:	17d2      	asrs	r2, r2, #31
 80014de:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80014e2:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 80014e6:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 80014ea:	fb80 2003 	smull	r2, r0, r0, r3
 80014ee:	17db      	asrs	r3, r3, #31
 80014f0:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 80014f4:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80014f8:	3401      	adds	r4, #1
 80014fa:	2c02      	cmp	r4, #2
 80014fc:	dde6      	ble.n	80014cc <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80014fe:	22e0      	movs	r2, #224	; 0xe0
 8001500:	211c      	movs	r1, #28
 8001502:	20d0      	movs	r0, #208	; 0xd0
 8001504:	f7ff fd48 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001508:	22e0      	movs	r2, #224	; 0xe0
 800150a:	211b      	movs	r1, #27
 800150c:	20d0      	movs	r0, #208	; 0xd0
 800150e:	f7ff fd43 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001512:	2019      	movs	r0, #25
 8001514:	f001 fd76 	bl	8003004 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001518:	2400      	movs	r4, #0
 800151a:	e051      	b.n	80015c0 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800151c:	ae10      	add	r6, sp, #64	; 0x40
 800151e:	9600      	str	r6, [sp, #0]
 8001520:	2306      	movs	r3, #6
 8001522:	223b      	movs	r2, #59	; 0x3b
 8001524:	21d1      	movs	r1, #209	; 0xd1
 8001526:	20d0      	movs	r0, #208	; 0xd0
 8001528:	f7ff fd8a 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800152c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001530:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001534:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001538:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800153c:	4413      	add	r3, r2
 800153e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001542:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001546:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800154a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800154e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8001552:	4413      	add	r3, r2
 8001554:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001558:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800155c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001560:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001564:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8001568:	4413      	add	r3, r2
 800156a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800156e:	9600      	str	r6, [sp, #0]
 8001570:	2306      	movs	r3, #6
 8001572:	2243      	movs	r2, #67	; 0x43
 8001574:	21d1      	movs	r1, #209	; 0xd1
 8001576:	20d0      	movs	r0, #208	; 0xd0
 8001578:	f7ff fd62 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800157c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001580:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001584:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001588:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800158c:	4413      	add	r3, r2
 800158e:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001592:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001596:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800159a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800159e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80015a2:	4413      	add	r3, r2
 80015a4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80015a8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80015ac:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80015b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015b4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80015b8:	4413      	add	r3, r2
 80015ba:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80015be:	3401      	adds	r4, #1
 80015c0:	2cc7      	cmp	r4, #199	; 0xc7
 80015c2:	ddab      	ble.n	800151c <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80015c4:	2400      	movs	r4, #0
 80015c6:	e016      	b.n	80015f6 <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 80015c8:	ab12      	add	r3, sp, #72	; 0x48
 80015ca:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80015ce:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 80015d2:	4881      	ldr	r0, [pc, #516]	; (80017d8 <MPU9250SelfTest+0x400>)
 80015d4:	fb80 6302 	smull	r6, r3, r0, r2
 80015d8:	17d2      	asrs	r2, r2, #31
 80015da:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80015de:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 80015e2:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 80015e6:	fb80 2003 	smull	r2, r0, r0, r3
 80015ea:	17db      	asrs	r3, r3, #31
 80015ec:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 80015f0:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80015f4:	3401      	adds	r4, #1
 80015f6:	2c02      	cmp	r4, #2
 80015f8:	dde6      	ble.n	80015c8 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 80015fa:	2200      	movs	r2, #0
 80015fc:	211c      	movs	r1, #28
 80015fe:	20d0      	movs	r0, #208	; 0xd0
 8001600:	f7ff fcca 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 8001604:	2200      	movs	r2, #0
 8001606:	211b      	movs	r1, #27
 8001608:	20d0      	movs	r0, #208	; 0xd0
 800160a:	f7ff fcc5 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 800160e:	2019      	movs	r0, #25
 8001610:	f001 fcf8 	bl	8003004 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001614:	220d      	movs	r2, #13
 8001616:	21d1      	movs	r1, #209	; 0xd1
 8001618:	20d0      	movs	r0, #208	; 0xd0
 800161a:	f7ff fcd1 	bl	8000fc0 <readByte>
 800161e:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001622:	220e      	movs	r2, #14
 8001624:	21d1      	movs	r1, #209	; 0xd1
 8001626:	20d0      	movs	r0, #208	; 0xd0
 8001628:	f7ff fcca 	bl	8000fc0 <readByte>
 800162c:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001630:	220f      	movs	r2, #15
 8001632:	21d1      	movs	r1, #209	; 0xd1
 8001634:	20d0      	movs	r0, #208	; 0xd0
 8001636:	f7ff fcc3 	bl	8000fc0 <readByte>
 800163a:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800163e:	2200      	movs	r2, #0
 8001640:	21d1      	movs	r1, #209	; 0xd1
 8001642:	20d0      	movs	r0, #208	; 0xd0
 8001644:	f7ff fcbc 	bl	8000fc0 <readByte>
 8001648:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800164c:	2201      	movs	r2, #1
 800164e:	21d1      	movs	r1, #209	; 0xd1
 8001650:	20d0      	movs	r0, #208	; 0xd0
 8001652:	f7ff fcb5 	bl	8000fc0 <readByte>
 8001656:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800165a:	2202      	movs	r2, #2
 800165c:	21d1      	movs	r1, #209	; 0xd1
 800165e:	20d0      	movs	r0, #208	; 0xd0
 8001660:	f7ff fcae 	bl	8000fc0 <readByte>
 8001664:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001668:	eef8 7a48 	vcvt.f32.u32	s15, s16
 800166c:	ee17 0a90 	vmov	r0, s15
 8001670:	f7fe ff72 	bl	8000558 <__aeabi_f2d>
 8001674:	2200      	movs	r2, #0
 8001676:	4b59      	ldr	r3, [pc, #356]	; (80017dc <MPU9250SelfTest+0x404>)
 8001678:	f7fe fe0e 	bl	8000298 <__aeabi_dsub>
 800167c:	ed9f 8b52 	vldr	d8, [pc, #328]	; 80017c8 <MPU9250SelfTest+0x3f0>
 8001680:	ec41 0b11 	vmov	d1, r0, r1
 8001684:	eeb0 0a48 	vmov.f32	s0, s16
 8001688:	eef0 0a68 	vmov.f32	s1, s17
 800168c:	f008 f9bc 	bl	8009a08 <pow>
 8001690:	a34f      	add	r3, pc, #316	; (adr r3, 80017d0 <MPU9250SelfTest+0x3f8>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	ec51 0b10 	vmov	r0, r1, d0
 800169a:	f7fe ffb5 	bl	8000608 <__aeabi_dmul>
 800169e:	f7ff faab 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 80016a2:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 80016a4:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 80016a8:	ee17 0a90 	vmov	r0, s15
 80016ac:	f7fe ff54 	bl	8000558 <__aeabi_f2d>
 80016b0:	2200      	movs	r2, #0
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <MPU9250SelfTest+0x404>)
 80016b4:	f7fe fdf0 	bl	8000298 <__aeabi_dsub>
 80016b8:	ec41 0b11 	vmov	d1, r0, r1
 80016bc:	eeb0 0a48 	vmov.f32	s0, s16
 80016c0:	eef0 0a68 	vmov.f32	s1, s17
 80016c4:	f008 f9a0 	bl	8009a08 <pow>
 80016c8:	a341      	add	r3, pc, #260	; (adr r3, 80017d0 <MPU9250SelfTest+0x3f8>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	ec51 0b10 	vmov	r0, r1, d0
 80016d2:	f7fe ff99 	bl	8000608 <__aeabi_dmul>
 80016d6:	f7ff fa8f 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 80016da:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 80016dc:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 80016e0:	ee17 0a90 	vmov	r0, s15
 80016e4:	f7fe ff38 	bl	8000558 <__aeabi_f2d>
 80016e8:	2200      	movs	r2, #0
 80016ea:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <MPU9250SelfTest+0x404>)
 80016ec:	f7fe fdd4 	bl	8000298 <__aeabi_dsub>
 80016f0:	ec41 0b11 	vmov	d1, r0, r1
 80016f4:	eeb0 0a48 	vmov.f32	s0, s16
 80016f8:	eef0 0a68 	vmov.f32	s1, s17
 80016fc:	f008 f984 	bl	8009a08 <pow>
 8001700:	a333      	add	r3, pc, #204	; (adr r3, 80017d0 <MPU9250SelfTest+0x3f8>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	ec51 0b10 	vmov	r0, r1, d0
 800170a:	f7fe ff7d 	bl	8000608 <__aeabi_dmul>
 800170e:	f7ff fa73 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 8001712:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8001714:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 8001718:	ee17 0a90 	vmov	r0, s15
 800171c:	f7fe ff1c 	bl	8000558 <__aeabi_f2d>
 8001720:	2200      	movs	r2, #0
 8001722:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <MPU9250SelfTest+0x404>)
 8001724:	f7fe fdb8 	bl	8000298 <__aeabi_dsub>
 8001728:	ec41 0b11 	vmov	d1, r0, r1
 800172c:	eeb0 0a48 	vmov.f32	s0, s16
 8001730:	eef0 0a68 	vmov.f32	s1, s17
 8001734:	f008 f968 	bl	8009a08 <pow>
 8001738:	a325      	add	r3, pc, #148	; (adr r3, 80017d0 <MPU9250SelfTest+0x3f8>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	ec51 0b10 	vmov	r0, r1, d0
 8001742:	f7fe ff61 	bl	8000608 <__aeabi_dmul>
 8001746:	f7ff fa57 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 800174a:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 800174c:	eef8 7a69 	vcvt.f32.u32	s15, s19
 8001750:	ee17 0a90 	vmov	r0, s15
 8001754:	f7fe ff00 	bl	8000558 <__aeabi_f2d>
 8001758:	2200      	movs	r2, #0
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MPU9250SelfTest+0x404>)
 800175c:	f7fe fd9c 	bl	8000298 <__aeabi_dsub>
 8001760:	ec41 0b11 	vmov	d1, r0, r1
 8001764:	eeb0 0a48 	vmov.f32	s0, s16
 8001768:	eef0 0a68 	vmov.f32	s1, s17
 800176c:	f008 f94c 	bl	8009a08 <pow>
 8001770:	a317      	add	r3, pc, #92	; (adr r3, 80017d0 <MPU9250SelfTest+0x3f8>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	ec51 0b10 	vmov	r0, r1, d0
 800177a:	f7fe ff45 	bl	8000608 <__aeabi_dmul>
 800177e:	f7ff fa3b 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001782:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001784:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001788:	ee17 0a90 	vmov	r0, s15
 800178c:	f7fe fee4 	bl	8000558 <__aeabi_f2d>
 8001790:	2200      	movs	r2, #0
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MPU9250SelfTest+0x404>)
 8001794:	f7fe fd80 	bl	8000298 <__aeabi_dsub>
 8001798:	ec41 0b11 	vmov	d1, r0, r1
 800179c:	eeb0 0a48 	vmov.f32	s0, s16
 80017a0:	eef0 0a68 	vmov.f32	s1, s17
 80017a4:	f008 f930 	bl	8009a08 <pow>
 80017a8:	a309      	add	r3, pc, #36	; (adr r3, 80017d0 <MPU9250SelfTest+0x3f8>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	ec51 0b10 	vmov	r0, r1, d0
 80017b2:	f7fe ff29 	bl	8000608 <__aeabi_dmul>
 80017b6:	f7ff fa1f 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 80017ba:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80017bc:	f04f 0800 	mov.w	r8, #0
 80017c0:	e05f      	b.n	8001882 <MPU9250SelfTest+0x4aa>
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	c28f5c29 	.word	0xc28f5c29
 80017cc:	3ff028f5 	.word	0x3ff028f5
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40a47800 	.word	0x40a47800
 80017d8:	51eb851f 	.word	0x51eb851f
 80017dc:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 80017e0:	ab12      	add	r3, sp, #72	; 0x48
 80017e2:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 80017e6:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 80017ea:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 80017ee:	1ac0      	subs	r0, r0, r3
 80017f0:	ee07 0a90 	vmov	s15, r0
 80017f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f8:	ee17 0a90 	vmov	r0, s15
 80017fc:	f7fe feac 	bl	8000558 <__aeabi_f2d>
 8001800:	2200      	movs	r2, #0
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <MPU9250SelfTest+0x4bc>)
 8001804:	f7fe ff00 	bl	8000608 <__aeabi_dmul>
 8001808:	4606      	mov	r6, r0
 800180a:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 800180c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001810:	ab12      	add	r3, sp, #72	; 0x48
 8001812:	444b      	add	r3, r9
 8001814:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001818:	f7fe fe9e 	bl	8000558 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 800181c:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4630      	mov	r0, r6
 8001824:	4639      	mov	r1, r7
 8001826:	f7ff f819 	bl	800085c <__aeabi_ddiv>
 800182a:	f7ff f9e5 	bl	8000bf8 <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 800182e:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001832:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001836:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 800183a:	1ac0      	subs	r0, r0, r3
 800183c:	ee07 0a90 	vmov	s15, r0
 8001840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001844:	ee17 0a90 	vmov	r0, s15
 8001848:	f7fe fe86 	bl	8000558 <__aeabi_f2d>
 800184c:	2200      	movs	r2, #0
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MPU9250SelfTest+0x4bc>)
 8001850:	f7fe feda 	bl	8000608 <__aeabi_dmul>
 8001854:	4606      	mov	r6, r0
 8001856:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001858:	f108 0403 	add.w	r4, r8, #3
 800185c:	00a4      	lsls	r4, r4, #2
 800185e:	ab12      	add	r3, sp, #72	; 0x48
 8001860:	4423      	add	r3, r4
 8001862:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001866:	f7fe fe77 	bl	8000558 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 800186a:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4630      	mov	r0, r6
 8001872:	4639      	mov	r1, r7
 8001874:	f7fe fff2 	bl	800085c <__aeabi_ddiv>
 8001878:	f7ff f9be 	bl	8000bf8 <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 800187c:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 800187e:	f108 0801 	add.w	r8, r8, #1
 8001882:	f1b8 0f02 	cmp.w	r8, #2
 8001886:	ddab      	ble.n	80017e0 <MPU9250SelfTest+0x408>
	}

}
 8001888:	b013      	add	sp, #76	; 0x4c
 800188a:	ecbd 8b08 	vpop	{d8-d11}
 800188e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001892:	bf00      	nop
 8001894:	40590000 	.word	0x40590000

08001898 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 8001898:	b508      	push	{r3, lr}
	resetMPU9250();
 800189a:	f7ff fcbe 	bl	800121a <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 800189e:	480e      	ldr	r0, [pc, #56]	; (80018d8 <imu_calibrate+0x40>)
 80018a0:	f7ff fd9a 	bl	80013d8 <MPU9250SelfTest>
	HAL_Delay(500);
 80018a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a8:	f001 fbac 	bl	8003004 <HAL_Delay>
	HAL_Delay(500);
 80018ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b0:	f001 fba8 	bl	8003004 <HAL_Delay>
	initMPU9250();
 80018b4:	f7ff fd20 	bl	80012f8 <initMPU9250>
	initAK8963(magCalibration);
 80018b8:	4808      	ldr	r0, [pc, #32]	; (80018dc <imu_calibrate+0x44>)
 80018ba:	f7ff fcb9 	bl	8001230 <initAK8963>
	HAL_Delay(500);
 80018be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c2:	f001 fb9f 	bl	8003004 <HAL_Delay>
	getAres(); // Get accelerometer sensitivity
 80018c6:	f7ff fc1d 	bl	8001104 <getAres>
	getGres(); // Get gyro sensitivity
 80018ca:	f7ff fbf7 	bl	80010bc <getGres>
	getMres(); // Get magnetometer sensitivity
 80018ce:	f7ff fbdf 	bl	8001090 <getMres>
}
 80018d2:	2000      	movs	r0, #0
 80018d4:	bd08      	pop	{r3, pc}
 80018d6:	bf00      	nop
 80018d8:	20004a84 	.word	0x20004a84
 80018dc:	2000001c 	.word	0x2000001c

080018e0 <MahonyQuaternionUpdate>:
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 80018e0:	ee61 7a01 	vmul.f32	s15, s2, s2
		float gz, float mx, float my, float mz) {
 80018e4:	b530      	push	{r4, r5, lr}
	norm = sqrt(ax * ax + ay * ay + az * az);
 80018e6:	eee0 7aa0 	vfma.f32	s15, s1, s1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 80018ea:	4cb9      	ldr	r4, [pc, #740]	; (8001bd0 <MahonyQuaternionUpdate+0x2f0>)
		float gz, float mx, float my, float mz) {
 80018ec:	ed2d 8b10 	vpush	{d8-d15}
	norm = sqrt(ax * ax + ay * ay + az * az);
 80018f0:	eee0 7a00 	vfma.f32	s15, s0, s0
		float gz, float mx, float my, float mz) {
 80018f4:	b089      	sub	sp, #36	; 0x24
 80018f6:	eeb0 aa41 	vmov.f32	s20, s2
	norm = sqrt(ax * ax + ay * ay + az * az);
 80018fa:	ee17 0a90 	vmov	r0, s15
		float gz, float mx, float my, float mz) {
 80018fe:	eeb0 ca61 	vmov.f32	s24, s3
 8001902:	eeb0 ea42 	vmov.f32	s28, s4
 8001906:	eef0 da62 	vmov.f32	s27, s5
 800190a:	eef0 ba43 	vmov.f32	s23, s6
 800190e:	eeb0 ba63 	vmov.f32	s22, s7
 8001912:	eef0 ca44 	vmov.f32	s25, s8
 8001916:	eef0 8a60 	vmov.f32	s17, s1
 800191a:	eeb0 8a40 	vmov.f32	s16, s0
	norm = sqrt(ax * ax + ay * ay + az * az);
 800191e:	f7fe fe1b 	bl	8000558 <__aeabi_f2d>
 8001922:	ec41 0b10 	vmov	d0, r0, r1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001926:	ed94 9a00 	vldr	s18, [r4]
 800192a:	ed94 da01 	vldr	s26, [r4, #4]
 800192e:	edd4 aa02 	vldr	s21, [r4, #8]
 8001932:	edd4 9a03 	vldr	s19, [r4, #12]
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001936:	f008 f9d7 	bl	8009ce8 <sqrt>
 800193a:	ec51 0b10 	vmov	r0, r1, d0
 800193e:	f7ff f95b 	bl	8000bf8 <__aeabi_d2f>
 8001942:	ee0e 0a90 	vmov	s29, r0
	if (norm == 0.0f)
 8001946:	eef5 ea40 	vcmp.f32	s29, #0.0
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d103      	bne.n	8001958 <MahonyQuaternionUpdate+0x78>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001950:	b009      	add	sp, #36	; 0x24
 8001952:	ecbd 8b10 	vpop	{d8-d15}
 8001956:	bd30      	pop	{r4, r5, pc}
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001958:	ee6c 7aac 	vmul.f32	s15, s25, s25
 800195c:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8001960:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8001964:	ee17 0a90 	vmov	r0, s15
 8001968:	f7fe fdf6 	bl	8000558 <__aeabi_f2d>
 800196c:	ec41 0b10 	vmov	d0, r0, r1
 8001970:	f008 f9ba 	bl	8009ce8 <sqrt>
 8001974:	ec51 0b10 	vmov	r0, r1, d0
 8001978:	f7ff f93e 	bl	8000bf8 <__aeabi_d2f>
 800197c:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001980:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001988:	d0e2      	beq.n	8001950 <MahonyQuaternionUpdate+0x70>
	norm = 1.0f / norm;        // use reciprocal for division
 800198a:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
	norm = 1.0f / norm;        // use reciprocal for division
 800198e:	ee8f 4a27 	vdiv.f32	s8, s30, s15
 8001992:	2500      	movs	r5, #0
	float q4q4 = q4 * q4;
 8001994:	ee29 6aa9 	vmul.f32	s12, s19, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001998:	ee2d 7a4d 	vnmul.f32	s14, s26, s26
	float q2q3 = q2 * q3;
 800199c:	ee6d 6a2a 	vmul.f32	s13, s26, s21
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019a0:	ee77 7a46 	vsub.f32	s15, s14, s12
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019a4:	eef1 5a49 	vneg.f32	s11, s18
 80019a8:	eef0 4a46 	vmov.f32	s9, s12
 80019ac:	eef6 fa00 	vmov.f32	s31, #96	; 0x3f000000  0.5
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019b0:	eef0 3a66 	vmov.f32	s7, s13
	my *= norm;
 80019b4:	ee2b ba04 	vmul.f32	s22, s22, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019b8:	eee5 6aa9 	vfma.f32	s13, s11, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019bc:	eee9 3a29 	vfma.f32	s7, s18, s19
 80019c0:	ee77 7aaf 	vadd.f32	s15, s15, s31
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019c4:	eeea 4aaa 	vfma.f32	s9, s21, s21
	float q3q4 = q3 * q4;
 80019c8:	ee2a 5aa9 	vmul.f32	s10, s21, s19
	mx *= norm;
 80019cc:	ee6b ba84 	vmul.f32	s23, s23, s8
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019d0:	ee67 7a8b 	vmul.f32	s15, s15, s22
	norm = 1.0f / norm;        // use reciprocal for division
 80019d4:	ee8f 1a2e 	vdiv.f32	s2, s30, s29
			+ 2.0f * mz * (q3q4 - q1q2);
 80019d8:	eeb0 3a45 	vmov.f32	s6, s10
	mz *= norm;
 80019dc:	ee6c ea84 	vmul.f32	s29, s25, s8
	float q2q4 = q2 * q4;
 80019e0:	ee6d ca29 	vmul.f32	s25, s26, s19
			+ 2.0f * mz * (q3q4 - q1q2);
 80019e4:	eea5 3a8d 	vfma.f32	s6, s11, s26
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019e8:	ee7f 4ae4 	vsub.f32	s9, s31, s9
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019ec:	eee3 7aab 	vfma.f32	s15, s7, s23
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019f0:	ee66 3a8b 	vmul.f32	s7, s13, s22
			+ 2.0f * mz * (q2q4 + q1q3);
 80019f4:	eeb0 4a6c 	vmov.f32	s8, s25
 80019f8:	eea9 4a2a 	vfma.f32	s8, s18, s21
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019fc:	eee4 3aab 	vfma.f32	s7, s9, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a00:	eee3 7a2e 	vfma.f32	s15, s6, s29
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a04:	eee4 3a2e 	vfma.f32	s7, s8, s29
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a08:	ee77 7aa7 	vadd.f32	s15, s15, s15
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a0c:	ee73 3aa3 	vadd.f32	s7, s7, s7
	bx = sqrt((hx * hx) + (hy * hy));
 8001a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
	ax *= norm;
 8001a14:	ee28 8a01 	vmul.f32	s16, s16, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001a18:	eee3 7aa3 	vfma.f32	s15, s7, s7
	ay *= norm;
 8001a1c:	ee68 8a81 	vmul.f32	s17, s17, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001a20:	ee17 0a90 	vmov	r0, s15
	az *= norm;
 8001a24:	ee2a aa01 	vmul.f32	s20, s20, s2
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a28:	ed8d 7a07 	vstr	s14, [sp, #28]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a2c:	ed8d 6a06 	vstr	s12, [sp, #24]
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a30:	ed8d 5a05 	vstr	s10, [sp, #20]
 8001a34:	edcd 5a04 	vstr	s11, [sp, #16]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a38:	edcd 6a03 	vstr	s13, [sp, #12]
 8001a3c:	edcd 4a02 	vstr	s9, [sp, #8]
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a40:	ed8d 4a01 	vstr	s8, [sp, #4]
	bx = sqrt((hx * hx) + (hy * hy));
 8001a44:	f7fe fd88 	bl	8000558 <__aeabi_f2d>
 8001a48:	ec41 0b10 	vmov	d0, r0, r1
 8001a4c:	f008 f94c 	bl	8009ce8 <sqrt>
 8001a50:	ec51 0b10 	vmov	r0, r1, d0
 8001a54:	f7ff f8d0 	bl	8000bf8 <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a58:	ed9d 5a05 	vldr	s10, [sp, #20]
 8001a5c:	eddd 5a04 	vldr	s11, [sp, #16]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001a60:	ed9d 7a07 	vldr	s14, [sp, #28]
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001a64:	ed9d 6a06 	vldr	s12, [sp, #24]
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001a68:	eddd 4a02 	vldr	s9, [sp, #8]
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001a6c:	ed9d 4a01 	vldr	s8, [sp, #4]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001a70:	eddd 6a03 	vldr	s13, [sp, #12]
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001a74:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <MahonyQuaternionUpdate+0x2f4>)
		eInt[0] = 0.0f;     // prevent integral wind up
 8001a76:	4b58      	ldr	r3, [pc, #352]	; (8001bd8 <MahonyQuaternionUpdate+0x2f8>)
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a78:	eea9 5a0d 	vfma.f32	s10, s18, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001a7c:	601d      	str	r5, [r3, #0]
		eInt[1] = 0.0f;
 8001a7e:	605d      	str	r5, [r3, #4]
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a80:	eee5 caaa 	vfma.f32	s25, s11, s21
		eInt[2] = 0.0f;
 8001a84:	609d      	str	r5, [r3, #8]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001a86:	eeb1 3a6a 	vneg.f32	s6, s21
 8001a8a:	eef0 5a47 	vmov.f32	s11, s14
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a8e:	ee65 7a0b 	vmul.f32	s15, s10, s22
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001a92:	eee3 5a2a 	vfma.f32	s11, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a96:	eeec 7aab 	vfma.f32	s15, s25, s23
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001a9a:	ee75 5aaf 	vadd.f32	s11, s11, s31
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001a9e:	eea9 7a09 	vfma.f32	s14, s18, s18
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001aa2:	eee5 7aae 	vfma.f32	s15, s11, s29
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001aa6:	eea3 7a2a 	vfma.f32	s14, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001aaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
	bx = sqrt((hx * hx) + (hy * hy));
 8001aae:	ee03 0a90 	vmov	s7, r0
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ab2:	ee37 6a06 	vadd.f32	s12, s14, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ab6:	ee2c 3aa7 	vmul.f32	s6, s25, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001aba:	ee7c caac 	vadd.f32	s25, s25, s25
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001abe:	eea4 3aa3 	vfma.f32	s6, s9, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001ac2:	ee66 4a48 	vnmul.f32	s9, s12, s16
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001ac6:	ee25 7aa7 	vmul.f32	s14, s11, s15
	vy = 2.0f * (q1q2 + q3q4);
 8001aca:	ee75 5a05 	vadd.f32	s11, s10, s10
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001ace:	eeea 4a2c 	vfma.f32	s9, s20, s25
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001ad2:	eea4 7a23 	vfma.f32	s14, s8, s7
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001ad6:	ee25 1aca 	vnmul.f32	s2, s11, s20
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001ada:	ee65 7a27 	vmul.f32	s15, s10, s15
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001ade:	eea8 1a86 	vfma.f32	s2, s17, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ae2:	ee33 5a03 	vadd.f32	s10, s6, s6
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001ae6:	eee6 7aa3 	vfma.f32	s15, s13, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001aea:	eef0 6a64 	vmov.f32	s13, s9
 8001aee:	eeee 6a85 	vfma.f32	s13, s29, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001af2:	ee37 7a07 	vadd.f32	s14, s14, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001af6:	ee6c cae8 	vnmul.f32	s25, s25, s17
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001afa:	eeab 1a07 	vfma.f32	s2, s22, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001afe:	eee8 ca25 	vfma.f32	s25, s16, s11
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001b02:	eeeb 6ac7 	vfms.f32	s13, s23, s14
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001b06:	ee77 7aa7 	vadd.f32	s15, s15, s15
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b0a:	eeb0 8a6a 	vmov.f32	s16, s21
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b0e:	eeae 1ae7 	vfms.f32	s2, s29, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b12:	eeeb caa7 	vfma.f32	s25, s23, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001b16:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	gy = gy + Kp * ey + Ki * eInt[1];
 8001b1a:	eea6 eaa7 	vfma.f32	s28, s13, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001b1e:	eea1 ca27 	vfma.f32	s24, s2, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b22:	eeeb ca45 	vfms.f32	s25, s22, s10
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b26:	ee6a 6a8e 	vmul.f32	s13, s21, s28
	gz = gz + Kp * ez + Ki * eInt[2];
 8001b2a:	eeec daa7 	vfma.f32	s27, s25, s15
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b2e:	eeed 6a0c 	vfma.f32	s13, s26, s24
 8001b32:	edd2 7a00 	vldr	s15, [r2]
 8001b36:	eee9 6aad 	vfma.f32	s13, s19, s27
 8001b3a:	ee67 faaf 	vmul.f32	s31, s15, s31
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b3e:	ee29 7a8c 	vmul.f32	s14, s19, s24
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b42:	eea6 9aef 	vfms.f32	s18, s13, s31
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b46:	ee6e 7a69 	vnmul.f32	s15, s28, s19
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b4a:	eead 7a6d 	vfms.f32	s14, s26, s27
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b4e:	eeea 7aad 	vfma.f32	s15, s21, s27
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b52:	eeae 7a09 	vfma.f32	s14, s28, s18
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b56:	eeec 7a09 	vfma.f32	s15, s24, s18
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b5a:	eea7 8a2f 	vfma.f32	s16, s14, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b5e:	ee2c ca6a 	vnmul.f32	s24, s24, s21
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b62:	eef0 8a4d 	vmov.f32	s17, s26
 8001b66:	eee7 8aaf 	vfma.f32	s17, s15, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b6a:	eead ca0e 	vfma.f32	s24, s26, s28
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b6e:	ee68 7a08 	vmul.f32	s15, s16, s16
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b72:	eead ca89 	vfma.f32	s24, s27, s18
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b76:	eee8 7aa8 	vfma.f32	s15, s17, s17
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b7a:	eeec 9a2f 	vfma.f32	s19, s24, s31
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b7e:	eee9 7a09 	vfma.f32	s15, s18, s18
 8001b82:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8001b86:	ee17 0a90 	vmov	r0, s15
 8001b8a:	f7fe fce5 	bl	8000558 <__aeabi_f2d>
 8001b8e:	ec41 0b10 	vmov	d0, r0, r1
 8001b92:	f008 f8a9 	bl	8009ce8 <sqrt>
 8001b96:	ec51 0b10 	vmov	r0, r1, d0
 8001b9a:	f7ff f82d 	bl	8000bf8 <__aeabi_d2f>
	norm = 1.0f / norm;
 8001b9e:	ee07 0a90 	vmov	s15, r0
 8001ba2:	eecf 7a27 	vdiv.f32	s15, s30, s15
	q[1] = q2 * norm;
 8001ba6:	ee68 8aa7 	vmul.f32	s17, s17, s15
	q[2] = q3 * norm;
 8001baa:	ee28 8a27 	vmul.f32	s16, s16, s15
	q[3] = q4 * norm;
 8001bae:	ee69 9aa7 	vmul.f32	s19, s19, s15
	q[0] = q1 * norm;
 8001bb2:	ee29 9a27 	vmul.f32	s18, s18, s15
	q[1] = q2 * norm;
 8001bb6:	edc4 8a01 	vstr	s17, [r4, #4]
	q[2] = q3 * norm;
 8001bba:	ed84 8a02 	vstr	s16, [r4, #8]
	q[3] = q4 * norm;
 8001bbe:	edc4 9a03 	vstr	s19, [r4, #12]
	q[0] = q1 * norm;
 8001bc2:	ed84 9a00 	vstr	s18, [r4]
}
 8001bc6:	b009      	add	sp, #36	; 0x24
 8001bc8:	ecbd 8b10 	vpop	{d8-d15}
 8001bcc:	bd30      	pop	{r4, r5, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000040 	.word	0x20000040
 8001bd4:	2000027c 	.word	0x2000027c
 8001bd8:	20000280 	.word	0x20000280
 8001bdc:	00000000 	.word	0x00000000

08001be0 <calc_RollPitchYaw>:
void calc_RollPitchYaw(float *roll, float *pitch, float *yaw, float *yaw_rate) {
 8001be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001be4:	4607      	mov	r7, r0
 8001be6:	4689      	mov	r9, r1
 8001be8:	4690      	mov	r8, r2
 8001bea:	461c      	mov	r4, r3
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 8001bec:	223a      	movs	r2, #58	; 0x3a
 8001bee:	21d1      	movs	r1, #209	; 0xd1
 8001bf0:	20d0      	movs	r0, #208	; 0xd0
 8001bf2:	f7ff f9e5 	bl	8000fc0 <readByte>
 8001bf6:	f010 0f01 	tst.w	r0, #1
 8001bfa:	f040 80eb 	bne.w	8001dd4 <calc_RollPitchYaw+0x1f4>
	*yaw_rate = gz;
 8001bfe:	4bde      	ldr	r3, [pc, #888]	; (8001f78 <calc_RollPitchYaw+0x398>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6023      	str	r3, [r4, #0]
	Now = htim11.Instance->CNT;
 8001c04:	4bdd      	ldr	r3, [pc, #884]	; (8001f7c <calc_RollPitchYaw+0x39c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c10:	4bdb      	ldr	r3, [pc, #876]	; (8001f80 <calc_RollPitchYaw+0x3a0>)
 8001c12:	edc3 7a00 	vstr	s15, [r3]
	if(Now - lastUpdate < 0){
 8001c16:	4bdb      	ldr	r3, [pc, #876]	; (8001f84 <calc_RollPitchYaw+0x3a4>)
 8001c18:	edd3 6a00 	vldr	s13, [r3]
 8001c1c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8001c20:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	f100 818e 	bmi.w	8001f48 <calc_RollPitchYaw+0x368>
	deltat = (float) ((Now - lastUpdate) * (1 / (TIMER_CLK_FREQ / 100.0f))); // set integration time by time elapsed since last filter update
 8001c2c:	eddf 6ad6 	vldr	s13, [pc, #856]	; 8001f88 <calc_RollPitchYaw+0x3a8>
 8001c30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c34:	4bd5      	ldr	r3, [pc, #852]	; (8001f8c <calc_RollPitchYaw+0x3ac>)
 8001c36:	ed83 7a00 	vstr	s14, [r3]
	lastUpdate = Now;
 8001c3a:	4bd2      	ldr	r3, [pc, #840]	; (8001f84 <calc_RollPitchYaw+0x3a4>)
 8001c3c:	edc3 7a00 	vstr	s15, [r3]
	sum += deltat;
 8001c40:	4ed3      	ldr	r6, [pc, #844]	; (8001f90 <calc_RollPitchYaw+0x3b0>)
 8001c42:	edd6 7a00 	vldr	s15, [r6]
 8001c46:	4bd1      	ldr	r3, [pc, #836]	; (8001f8c <calc_RollPitchYaw+0x3ac>)
 8001c48:	ed93 7a00 	vldr	s14, [r3]
 8001c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c50:	edc6 7a00 	vstr	s15, [r6]
	sumCount++;
 8001c54:	4dcf      	ldr	r5, [pc, #828]	; (8001f94 <calc_RollPitchYaw+0x3b4>)
 8001c56:	682b      	ldr	r3, [r5, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	602b      	str	r3, [r5, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 8001c5c:	4bce      	ldr	r3, [pc, #824]	; (8001f98 <calc_RollPitchYaw+0x3b8>)
 8001c5e:	edd3 1a00 	vldr	s3, [r3]
 8001c62:	eddf 7ace 	vldr	s15, [pc, #824]	; 8001f9c <calc_RollPitchYaw+0x3bc>
 8001c66:	ee61 1aa7 	vmul.f32	s3, s3, s15
 8001c6a:	4bcd      	ldr	r3, [pc, #820]	; (8001fa0 <calc_RollPitchYaw+0x3c0>)
 8001c6c:	ed93 2a00 	vldr	s4, [r3]
 8001c70:	ee22 2a27 	vmul.f32	s4, s4, s15
 8001c74:	4bc0      	ldr	r3, [pc, #768]	; (8001f78 <calc_RollPitchYaw+0x398>)
 8001c76:	edd3 2a00 	vldr	s5, [r3]
 8001c7a:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8001c7e:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8001fa4 <calc_RollPitchYaw+0x3c4>
 8001c82:	4bc9      	ldr	r3, [pc, #804]	; (8001fa8 <calc_RollPitchYaw+0x3c8>)
 8001c84:	ed93 4a00 	vldr	s8, [r3]
 8001c88:	4bc8      	ldr	r3, [pc, #800]	; (8001fac <calc_RollPitchYaw+0x3cc>)
 8001c8a:	edd3 3a00 	vldr	s7, [r3]
 8001c8e:	4bc8      	ldr	r3, [pc, #800]	; (8001fb0 <calc_RollPitchYaw+0x3d0>)
 8001c90:	ed93 3a00 	vldr	s6, [r3]
 8001c94:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 8001c98:	ee82 2a27 	vdiv.f32	s4, s4, s15
 8001c9c:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8001ca0:	4bc4      	ldr	r3, [pc, #784]	; (8001fb4 <calc_RollPitchYaw+0x3d4>)
 8001ca2:	ed93 1a00 	vldr	s2, [r3]
 8001ca6:	4bc4      	ldr	r3, [pc, #784]	; (8001fb8 <calc_RollPitchYaw+0x3d8>)
 8001ca8:	edd3 0a00 	vldr	s1, [r3]
 8001cac:	4bc3      	ldr	r3, [pc, #780]	; (8001fbc <calc_RollPitchYaw+0x3dc>)
 8001cae:	ed93 0a00 	vldr	s0, [r3]
 8001cb2:	f7ff fe15 	bl	80018e0 <MahonyQuaternionUpdate>
	*yaw = atan2f(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8001cb6:	4cc2      	ldr	r4, [pc, #776]	; (8001fc0 <calc_RollPitchYaw+0x3e0>)
 8001cb8:	edd4 6a01 	vldr	s13, [r4, #4]
 8001cbc:	ed94 7a02 	vldr	s14, [r4, #8]
 8001cc0:	ee26 0a87 	vmul.f32	s0, s13, s14
 8001cc4:	edd4 7a00 	vldr	s15, [r4]
 8001cc8:	edd4 0a03 	vldr	s1, [r4, #12]
 8001ccc:	ee27 6aa0 	vmul.f32	s12, s15, s1
 8001cd0:	ee30 0a06 	vadd.f32	s0, s0, s12
 8001cd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cd8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8001cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ce0:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001ce4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ce8:	ee60 0aa0 	vmul.f32	s1, s1, s1
 8001cec:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8001cf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001cf4:	f008 f8aa 	bl	8009e4c <atan2f>
 8001cf8:	ed88 0a00 	vstr	s0, [r8]
	*pitch = -asinf(2.0 * (q[1] * q[3] - q[0] * q[2]));
 8001cfc:	ed94 0a01 	vldr	s0, [r4, #4]
 8001d00:	edd4 7a03 	vldr	s15, [r4, #12]
 8001d04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001d08:	edd4 7a00 	vldr	s15, [r4]
 8001d0c:	ed94 7a02 	vldr	s14, [r4, #8]
 8001d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d14:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001d18:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001d1c:	f008 f83e 	bl	8009d9c <asinf>
 8001d20:	eeb1 0a40 	vneg.f32	s0, s0
 8001d24:	ed89 0a00 	vstr	s0, [r9]
	*roll = atan2f(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8001d28:	edd4 7a00 	vldr	s15, [r4]
 8001d2c:	edd4 6a01 	vldr	s13, [r4, #4]
 8001d30:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8001d34:	ed94 7a02 	vldr	s14, [r4, #8]
 8001d38:	edd4 0a03 	vldr	s1, [r4, #12]
 8001d3c:	ee27 6a20 	vmul.f32	s12, s14, s1
 8001d40:	ee30 0a06 	vadd.f32	s0, s0, s12
 8001d44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d48:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8001d4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d50:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001d54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d58:	ee60 0aa0 	vmul.f32	s1, s1, s1
 8001d5c:	ee77 0aa0 	vadd.f32	s1, s15, s1
 8001d60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001d64:	f008 f872 	bl	8009e4c <atan2f>
 8001d68:	ed87 0a00 	vstr	s0, [r7]
	*pitch *= 180.0 / PI;
 8001d6c:	f8d9 0000 	ldr.w	r0, [r9]
 8001d70:	f7fe fbf2 	bl	8000558 <__aeabi_f2d>
 8001d74:	a37c      	add	r3, pc, #496	; (adr r3, 8001f68 <calc_RollPitchYaw+0x388>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fc45 	bl	8000608 <__aeabi_dmul>
 8001d7e:	f7fe ff3b 	bl	8000bf8 <__aeabi_d2f>
 8001d82:	f8c9 0000 	str.w	r0, [r9]
	*yaw *= 180.0 / PI;
 8001d86:	f8d8 0000 	ldr.w	r0, [r8]
 8001d8a:	f7fe fbe5 	bl	8000558 <__aeabi_f2d>
 8001d8e:	a376      	add	r3, pc, #472	; (adr r3, 8001f68 <calc_RollPitchYaw+0x388>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f7fe fc38 	bl	8000608 <__aeabi_dmul>
 8001d98:	f7fe ff2e 	bl	8000bf8 <__aeabi_d2f>
	*yaw -=  -0.6; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8001d9c:	f7fe fbdc 	bl	8000558 <__aeabi_f2d>
 8001da0:	a373      	add	r3, pc, #460	; (adr r3, 8001f70 <calc_RollPitchYaw+0x390>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fa79 	bl	800029c <__adddf3>
 8001daa:	f7fe ff25 	bl	8000bf8 <__aeabi_d2f>
 8001dae:	f8c8 0000 	str.w	r0, [r8]
	*roll *= 180.0 / PI;
 8001db2:	6838      	ldr	r0, [r7, #0]
 8001db4:	f7fe fbd0 	bl	8000558 <__aeabi_f2d>
 8001db8:	a36b      	add	r3, pc, #428	; (adr r3, 8001f68 <calc_RollPitchYaw+0x388>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fc23 	bl	8000608 <__aeabi_dmul>
 8001dc2:	f7fe ff19 	bl	8000bf8 <__aeabi_d2f>
 8001dc6:	6038      	str	r0, [r7, #0]
	sum = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6033      	str	r3, [r6, #0]
	sumCount = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	602b      	str	r3, [r5, #0]
}
 8001dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		readAccelData(accelCount);  // Read the x/y/z adc values
 8001dd4:	4d7b      	ldr	r5, [pc, #492]	; (8001fc4 <calc_RollPitchYaw+0x3e4>)
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	f7ff f9b4 	bl	8001144 <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 8001ddc:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001de0:	ee07 3a10 	vmov	s14, r3
 8001de4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001de8:	4b77      	ldr	r3, [pc, #476]	; (8001fc8 <calc_RollPitchYaw+0x3e8>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <calc_RollPitchYaw+0x3ec>)
 8001df4:	edd3 6a00 	vldr	s13, [r3]
 8001df8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001dfc:	4a6f      	ldr	r2, [pc, #444]	; (8001fbc <calc_RollPitchYaw+0x3dc>)
 8001dfe:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 8001e02:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8001e06:	ee07 2a10 	vmov	s14, r2
 8001e0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e12:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e16:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001e1a:	4a67      	ldr	r2, [pc, #412]	; (8001fb8 <calc_RollPitchYaw+0x3d8>)
 8001e1c:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 8001e20:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8001e24:	ee07 2a10 	vmov	s14, r2
 8001e28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e30:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e38:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <calc_RollPitchYaw+0x3d4>)
 8001e3a:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 8001e3e:	4d64      	ldr	r5, [pc, #400]	; (8001fd0 <calc_RollPitchYaw+0x3f0>)
 8001e40:	4628      	mov	r0, r5
 8001e42:	f7ff f9a1 	bl	8001188 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8001e46:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001e4a:	ee07 3a10 	vmov	s14, r3
 8001e4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e52:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <calc_RollPitchYaw+0x3f4>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e5c:	4b5e      	ldr	r3, [pc, #376]	; (8001fd8 <calc_RollPitchYaw+0x3f8>)
 8001e5e:	edd3 6a00 	vldr	s13, [r3]
 8001e62:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001e66:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <calc_RollPitchYaw+0x3b8>)
 8001e68:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8001e6c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8001e70:	ee07 2a10 	vmov	s14, r2
 8001e74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e80:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001e84:	4a46      	ldr	r2, [pc, #280]	; (8001fa0 <calc_RollPitchYaw+0x3c0>)
 8001e86:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8001e8a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8001e8e:	ee07 2a10 	vmov	s14, r2
 8001e92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ea2:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <calc_RollPitchYaw+0x398>)
 8001ea4:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 8001ea8:	4d4c      	ldr	r5, [pc, #304]	; (8001fdc <calc_RollPitchYaw+0x3fc>)
 8001eaa:	4628      	mov	r0, r5
 8001eac:	f7ff f98e 	bl	80011cc <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 8001eb0:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001eb4:	ee06 3a90 	vmov	s13, r3
 8001eb8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001ebc:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <calc_RollPitchYaw+0x400>)
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec6:	4a47      	ldr	r2, [pc, #284]	; (8001fe4 <calc_RollPitchYaw+0x404>)
 8001ec8:	ed92 7a00 	vldr	s14, [r2]
 8001ecc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001ed0:	4b45      	ldr	r3, [pc, #276]	; (8001fe8 <calc_RollPitchYaw+0x408>)
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	ee76 6ac7 	vsub.f32	s13, s13, s14
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 8001eda:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8001ede:	ee07 1a10 	vmov	s14, r1
 8001ee2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ee6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eea:	ed92 6a01 	vldr	s12, [r2, #4]
 8001eee:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001ef2:	ed93 6a01 	vldr	s12, [r3, #4]
 8001ef6:	ee37 7a46 	vsub.f32	s14, s14, s12
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 8001efa:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8001efe:	ee06 1a10 	vmov	s12, r1
 8001f02:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001f06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001f0a:	ed92 6a02 	vldr	s12, [r2, #8]
 8001f0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001f12:	ed93 6a02 	vldr	s12, [r3, #8]
 8001f16:	ee77 7ac6 	vsub.f32	s15, s15, s12
		mx *= magscale[0];
 8001f1a:	4b34      	ldr	r3, [pc, #208]	; (8001fec <calc_RollPitchYaw+0x40c>)
 8001f1c:	ed93 6a00 	vldr	s12, [r3]
 8001f20:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001f24:	4a21      	ldr	r2, [pc, #132]	; (8001fac <calc_RollPitchYaw+0x3cc>)
 8001f26:	edc2 6a00 	vstr	s13, [r2]
		my *= magscale[1];
 8001f2a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f2e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f32:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <calc_RollPitchYaw+0x3d0>)
 8001f34:	ed82 7a00 	vstr	s14, [r2]
		mz *= magscale[2];
 8001f38:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <calc_RollPitchYaw+0x3c8>)
 8001f42:	edc3 7a00 	vstr	s15, [r3]
 8001f46:	e65a      	b.n	8001bfe <calc_RollPitchYaw+0x1e>
		deltat = (float) (((65535-lastUpdate)+Now) * (1 / (TIMER_CLK_FREQ / 100.0f)));
 8001f48:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001ff0 <calc_RollPitchYaw+0x410>
 8001f4c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001f50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f54:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001f88 <calc_RollPitchYaw+0x3a8>
 8001f58:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <calc_RollPitchYaw+0x3ac>)
 8001f5e:	ed83 7a00 	vstr	s14, [r3]
 8001f62:	e66a      	b.n	8001c3a <calc_RollPitchYaw+0x5a>
 8001f64:	f3af 8000 	nop.w
 8001f68:	0d03cf26 	.word	0x0d03cf26
 8001f6c:	404ca5dc 	.word	0x404ca5dc
 8001f70:	33333333 	.word	0x33333333
 8001f74:	3fe33333 	.word	0x3fe33333
 8001f78:	20004b14 	.word	0x20004b14
 8001f7c:	20005270 	.word	0x20005270
 8001f80:	20000278 	.word	0x20000278
 8001f84:	2000028c 	.word	0x2000028c
 8001f88:	358637bd 	.word	0x358637bd
 8001f8c:	2000027c 	.word	0x2000027c
 8001f90:	20000290 	.word	0x20000290
 8001f94:	20000294 	.word	0x20000294
 8001f98:	20004b38 	.word	0x20004b38
 8001f9c:	40490fdb 	.word	0x40490fdb
 8001fa0:	20004af0 	.word	0x20004af0
 8001fa4:	43340000 	.word	0x43340000
 8001fa8:	20004b1c 	.word	0x20004b1c
 8001fac:	20004b40 	.word	0x20004b40
 8001fb0:	20004b04 	.word	0x20004b04
 8001fb4:	20004af4 	.word	0x20004af4
 8001fb8:	20004b3c 	.word	0x20004b3c
 8001fbc:	20004b08 	.word	0x20004b08
 8001fc0:	20000040 	.word	0x20000040
 8001fc4:	20004a7c 	.word	0x20004a7c
 8001fc8:	20004b0c 	.word	0x20004b0c
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	20004afc 	.word	0x20004afc
 8001fd4:	20004b18 	.word	0x20004b18
 8001fd8:	20000010 	.word	0x20000010
 8001fdc:	20004b24 	.word	0x20004b24
 8001fe0:	20004b34 	.word	0x20004b34
 8001fe4:	2000001c 	.word	0x2000001c
 8001fe8:	20000028 	.word	0x20000028
 8001fec:	20000034 	.word	0x20000034
 8001ff0:	477fff00 	.word	0x477fff00

08001ff4 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 1;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001ff4:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 8001ff6:	f000 ffc3 	bl	8002f80 <DWT_Delay>

}
 8001ffa:	bd08      	pop	{r3, pc}

08001ffc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001ffc:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001ffe:	b938      	cbnz	r0, 8002010 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <NRF24_csn+0x24>)
 8002004:	8819      	ldrh	r1, [r3, #0]
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <NRF24_csn+0x28>)
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	f001 fa85 	bl	8003518 <HAL_GPIO_WritePin>
}
 800200e:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8002010:	2201      	movs	r2, #1
 8002012:	4b03      	ldr	r3, [pc, #12]	; (8002020 <NRF24_csn+0x24>)
 8002014:	8819      	ldrh	r1, [r3, #0]
 8002016:	4b03      	ldr	r3, [pc, #12]	; (8002024 <NRF24_csn+0x28>)
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	f001 fa7d 	bl	8003518 <HAL_GPIO_WritePin>
 800201e:	e7f6      	b.n	800200e <NRF24_csn+0x12>
 8002020:	2000029a 	.word	0x2000029a
 8002024:	2000029c 	.word	0x2000029c

08002028 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8002028:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800202a:	b938      	cbnz	r0, 800203c <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <NRF24_ce+0x24>)
 8002030:	8819      	ldrh	r1, [r3, #0]
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <NRF24_ce+0x28>)
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	f001 fa6f 	bl	8003518 <HAL_GPIO_WritePin>
}
 800203a:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800203c:	2201      	movs	r2, #1
 800203e:	4b03      	ldr	r3, [pc, #12]	; (800204c <NRF24_ce+0x24>)
 8002040:	8819      	ldrh	r1, [r3, #0]
 8002042:	4b03      	ldr	r3, [pc, #12]	; (8002050 <NRF24_ce+0x28>)
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	f001 fa67 	bl	8003518 <HAL_GPIO_WritePin>
 800204a:	e7f6      	b.n	800203a <NRF24_ce+0x12>
 800204c:	20000298 	.word	0x20000298
 8002050:	2000029c 	.word	0x2000029c

08002054 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8002054:	b510      	push	{r4, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff ffce 	bl	8001ffc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002060:	f004 041f 	and.w	r4, r4, #31
 8002064:	a902      	add	r1, sp, #8
 8002066:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 800206a:	4c0a      	ldr	r4, [pc, #40]	; (8002094 <NRF24_read_register+0x40>)
 800206c:	2302      	movs	r3, #2
 800206e:	2201      	movs	r2, #1
 8002070:	4620      	mov	r0, r4
 8002072:	f002 fc57 	bl	8004924 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1,2);
 8002076:	2302      	movs	r3, #2
 8002078:	2201      	movs	r2, #1
 800207a:	f10d 0105 	add.w	r1, sp, #5
 800207e:	4620      	mov	r0, r4
 8002080:	f002 fe34 	bl	8004cec <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	retData = spiBuf[1];
 8002084:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff ffb7 	bl	8001ffc <NRF24_csn>
	return retData;
}
 800208e:	4620      	mov	r0, r4
 8002090:	b002      	add	sp, #8
 8002092:	bd10      	pop	{r4, pc}
 8002094:	200002a0 	.word	0x200002a0

08002098 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	4604      	mov	r4, r0
 800209e:	460d      	mov	r5, r1
 80020a0:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff ffaa 	bl	8001ffc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80020a8:	f004 041f 	and.w	r4, r4, #31
 80020ac:	a902      	add	r1, sp, #8
 80020ae:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 80020b2:	4c08      	ldr	r4, [pc, #32]	; (80020d4 <NRF24_read_registerN+0x3c>)
 80020b4:	2302      	movs	r3, #2
 80020b6:	2201      	movs	r2, #1
 80020b8:	4620      	mov	r0, r4
 80020ba:	f002 fc33 	bl	8004924 <HAL_SPI_Transmit>
	//while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, len,2);
 80020be:	2302      	movs	r3, #2
 80020c0:	4632      	mov	r2, r6
 80020c2:	4629      	mov	r1, r5
 80020c4:	4620      	mov	r0, r4
 80020c6:	f002 fe11 	bl	8004cec <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f7ff ff96 	bl	8001ffc <NRF24_csn>
}
 80020d0:	b002      	add	sp, #8
 80020d2:	bd70      	pop	{r4, r5, r6, pc}
 80020d4:	200002a0 	.word	0x200002a0

080020d8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80020d8:	b530      	push	{r4, r5, lr}
 80020da:	b083      	sub	sp, #12
 80020dc:	4604      	mov	r4, r0
 80020de:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff ff8b 	bl	8001ffc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80020e6:	f044 0420 	orr.w	r4, r4, #32
 80020ea:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80020ee:	f88d 5005 	strb.w	r5, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2,10);
 80020f2:	230a      	movs	r3, #10
 80020f4:	2202      	movs	r2, #2
 80020f6:	a901      	add	r1, sp, #4
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <NRF24_write_register+0x30>)
 80020fa:	f002 fc13 	bl	8004924 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80020fe:	2001      	movs	r0, #1
 8002100:	f7ff ff7c 	bl	8001ffc <NRF24_csn>
}
 8002104:	b003      	add	sp, #12
 8002106:	bd30      	pop	{r4, r5, pc}
 8002108:	200002a0 	.word	0x200002a0

0800210c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	4604      	mov	r4, r0
 8002112:	460d      	mov	r5, r1
 8002114:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002116:	2000      	movs	r0, #0
 8002118:	f7ff ff70 	bl	8001ffc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800211c:	f044 0420 	orr.w	r4, r4, #32
 8002120:	a902      	add	r1, sp, #8
 8002122:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8002126:	4c08      	ldr	r4, [pc, #32]	; (8002148 <NRF24_write_registerN+0x3c>)
 8002128:	2302      	movs	r3, #2
 800212a:	2201      	movs	r2, #1
 800212c:	4620      	mov	r0, r4
 800212e:	f002 fbf9 	bl	8004924 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len,2);
 8002132:	2302      	movs	r3, #2
 8002134:	4632      	mov	r2, r6
 8002136:	4629      	mov	r1, r5
 8002138:	4620      	mov	r0, r4
 800213a:	f002 fbf3 	bl	8004924 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800213e:	2001      	movs	r0, #1
 8002140:	f7ff ff5c 	bl	8001ffc <NRF24_csn>
}
 8002144:	b002      	add	sp, #8
 8002146:	bd70      	pop	{r4, r5, r6, pc}
 8002148:	200002a0 	.word	0x200002a0

0800214c <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800214c:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800214e:	21ff      	movs	r1, #255	; 0xff
 8002150:	20e1      	movs	r0, #225	; 0xe1
 8002152:	f7ff ffc1 	bl	80020d8 <NRF24_write_register>
}
 8002156:	bd08      	pop	{r3, pc}

08002158 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8002158:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800215a:	21ff      	movs	r1, #255	; 0xff
 800215c:	20e2      	movs	r0, #226	; 0xe2
 800215e:	f7ff ffbb 	bl	80020d8 <NRF24_write_register>
}
 8002162:	bd08      	pop	{r3, pc}

08002164 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8002164:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8002166:	2007      	movs	r0, #7
 8002168:	f7ff ff74 	bl	8002054 <NRF24_read_register>
	return statReg;
}
 800216c:	bd08      	pop	{r3, pc}
	...

08002170 <NRF24_startListening>:
	NRF24_powerDown();

}
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002170:	b508      	push	{r3, lr}
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002172:	2000      	movs	r0, #0
 8002174:	f7ff ff6e 	bl	8002054 <NRF24_read_register>
 8002178:	f040 0103 	orr.w	r1, r0, #3
 800217c:	b2c9      	uxtb	r1, r1
 800217e:	2000      	movs	r0, #0
 8002180:	f7ff ffaa 	bl	80020d8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <NRF24_startListening+0x40>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	4313      	orrs	r3, r2
 800218c:	d10a      	bne.n	80021a4 <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 800218e:	f7ff ffdd 	bl	800214c <NRF24_flush_tx>
	NRF24_flush_rx();
 8002192:	f7ff ffe1 	bl	8002158 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8002196:	2001      	movs	r0, #1
 8002198:	f7ff ff46 	bl	8002028 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 800219c:	2096      	movs	r0, #150	; 0x96
 800219e:	f7ff ff29 	bl	8001ff4 <NRF24_DelayMicroSeconds>
}
 80021a2:	bd08      	pop	{r3, pc}
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80021a4:	2205      	movs	r2, #5
 80021a6:	4902      	ldr	r1, [pc, #8]	; (80021b0 <NRF24_startListening+0x40>)
 80021a8:	200a      	movs	r0, #10
 80021aa:	f7ff ffaf 	bl	800210c <NRF24_write_registerN>
 80021ae:	e7ee      	b.n	800218e <NRF24_startListening+0x1e>
 80021b0:	20000340 	.word	0x20000340

080021b4 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80021b4:	b510      	push	{r4, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 80021bc:	4604      	mov	r4, r0
 80021be:	b920      	cbnz	r0, 80021ca <NRF24_openReadingPipe+0x16>
		pipe0_reading_address = address;
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <NRF24_openReadingPipe+0x60>)
 80021c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80021c6:	e9c3 0100 	strd	r0, r1, [r3]

	if(number <= 6)
 80021ca:	2c06      	cmp	r4, #6
 80021cc:	d818      	bhi.n	8002200 <NRF24_openReadingPipe+0x4c>
	{
		if(number < 2)
 80021ce:	2c01      	cmp	r4, #1
 80021d0:	d918      	bls.n	8002204 <NRF24_openReadingPipe+0x50>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80021d2:	2201      	movs	r2, #1
 80021d4:	4669      	mov	r1, sp
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <NRF24_openReadingPipe+0x64>)
 80021d8:	5d18      	ldrb	r0, [r3, r4]
 80021da:	f7ff ff97 	bl	800210c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <NRF24_openReadingPipe+0x68>)
 80021e0:	7819      	ldrb	r1, [r3, #0]
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <NRF24_openReadingPipe+0x6c>)
 80021e4:	5d18      	ldrb	r0, [r3, r4]
 80021e6:	f7ff ff77 	bl	80020d8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80021ea:	2002      	movs	r0, #2
 80021ec:	f7ff ff32 	bl	8002054 <NRF24_read_register>
 80021f0:	b240      	sxtb	r0, r0
 80021f2:	2101      	movs	r1, #1
 80021f4:	40a1      	lsls	r1, r4
 80021f6:	4301      	orrs	r1, r0
 80021f8:	b2c9      	uxtb	r1, r1
 80021fa:	2002      	movs	r0, #2
 80021fc:	f7ff ff6c 	bl	80020d8 <NRF24_write_register>
	}

}
 8002200:	b002      	add	sp, #8
 8002202:	bd10      	pop	{r4, pc}
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8002204:	2205      	movs	r2, #5
 8002206:	4669      	mov	r1, sp
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <NRF24_openReadingPipe+0x64>)
 800220a:	5d18      	ldrb	r0, [r3, r4]
 800220c:	f7ff ff7e 	bl	800210c <NRF24_write_registerN>
 8002210:	e7e5      	b.n	80021de <NRF24_openReadingPipe+0x2a>
 8002212:	bf00      	nop
 8002214:	20000340 	.word	0x20000340
 8002218:	0800f678 	.word	0x0800f678
 800221c:	20000338 	.word	0x20000338
 8002220:	0800f680 	.word	0x0800f680

08002224 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8002224:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8002226:	f001 010f 	and.w	r1, r1, #15
 800222a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800222e:	b2c9      	uxtb	r1, r1
 8002230:	2004      	movs	r0, #4
 8002232:	f7ff ff51 	bl	80020d8 <NRF24_write_register>
}
 8002236:	bd08      	pop	{r3, pc}

08002238 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8002238:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800223a:	4601      	mov	r1, r0
 800223c:	287f      	cmp	r0, #127	; 0x7f
 800223e:	bf28      	it	cs
 8002240:	217f      	movcs	r1, #127	; 0x7f
 8002242:	2005      	movs	r0, #5
 8002244:	f7ff ff48 	bl	80020d8 <NRF24_write_register>
}
 8002248:	bd08      	pop	{r3, pc}
	...

0800224c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 800224c:	2820      	cmp	r0, #32
 800224e:	bf28      	it	cs
 8002250:	2020      	movcs	r0, #32
 8002252:	4b01      	ldr	r3, [pc, #4]	; (8002258 <NRF24_setPayloadSize+0xc>)
 8002254:	7018      	strb	r0, [r3, #0]
}
 8002256:	4770      	bx	lr
 8002258:	20000338 	.word	0x20000338

0800225c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 800225c:	4b01      	ldr	r3, [pc, #4]	; (8002264 <NRF24_getPayloadSize+0x8>)
 800225e:	7818      	ldrb	r0, [r3, #0]
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000338 	.word	0x20000338

08002268 <NRF24_read_payload>:
{
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	4606      	mov	r6, r0
 800226e:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002270:	f7ff fff4 	bl	800225c <NRF24_getPayloadSize>
 8002274:	4604      	mov	r4, r0
 8002276:	42a8      	cmp	r0, r5
 8002278:	d817      	bhi.n	80022aa <NRF24_read_payload+0x42>
	NRF24_csn(0);
 800227a:	2000      	movs	r0, #0
 800227c:	f7ff febe 	bl	8001ffc <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8002280:	a902      	add	r1, sp, #8
 8002282:	2361      	movs	r3, #97	; 0x61
 8002284:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1,10);
 8002288:	4d09      	ldr	r5, [pc, #36]	; (80022b0 <NRF24_read_payload+0x48>)
 800228a:	230a      	movs	r3, #10
 800228c:	2201      	movs	r2, #1
 800228e:	4628      	mov	r0, r5
 8002290:	f002 fb48 	bl	8004924 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len,10);
 8002294:	230a      	movs	r3, #10
 8002296:	b2a2      	uxth	r2, r4
 8002298:	4631      	mov	r1, r6
 800229a:	4628      	mov	r0, r5
 800229c:	f002 fd26 	bl	8004cec <HAL_SPI_Receive>
	NRF24_csn(1);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7ff feab 	bl	8001ffc <NRF24_csn>
}
 80022a6:	b002      	add	sp, #8
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80022aa:	462c      	mov	r4, r5
 80022ac:	e7e5      	b.n	800227a <NRF24_read_payload+0x12>
 80022ae:	bf00      	nop
 80022b0:	200002a0 	.word	0x200002a0

080022b4 <NRF24_read>:
{
 80022b4:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 80022b6:	f7ff ffd7 	bl	8002268 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80022ba:	2017      	movs	r0, #23
 80022bc:	f7ff feca 	bl	8002054 <NRF24_read_register>
 80022c0:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 80022c4:	f7ff ff48 	bl	8002158 <NRF24_flush_rx>
}
 80022c8:	4620      	mov	r0, r4
 80022ca:	bd10      	pop	{r4, pc}

080022cc <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 80022cc:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80022ce:	201d      	movs	r0, #29
 80022d0:	f7ff fec0 	bl	8002054 <NRF24_read_register>
 80022d4:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80022d8:	201d      	movs	r0, #29
 80022da:	f7ff fefd 	bl	80020d8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80022de:	2100      	movs	r1, #0
 80022e0:	201c      	movs	r0, #28
 80022e2:	f7ff fef9 	bl	80020d8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 80022e6:	bd08      	pop	{r3, pc}

080022e8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80022e8:	b508      	push	{r3, lr}
	if ( enable )
 80022ea:	b920      	cbnz	r0, 80022f6 <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 80022ec:	2100      	movs	r1, #0
 80022ee:	2001      	movs	r0, #1
 80022f0:	f7ff fef2 	bl	80020d8 <NRF24_write_register>
}
 80022f4:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 80022f6:	213f      	movs	r1, #63	; 0x3f
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7ff feed 	bl	80020d8 <NRF24_write_register>
 80022fe:	e7f9      	b.n	80022f4 <NRF24_setAutoAck+0xc>

08002300 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8002300:	b510      	push	{r4, lr}
 8002302:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002304:	2006      	movs	r0, #6
 8002306:	f7ff fea5 	bl	8002054 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800230a:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 800230e:	2c03      	cmp	r4, #3
 8002310:	d009      	beq.n	8002326 <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 8002312:	2c02      	cmp	r4, #2
 8002314:	d00d      	beq.n	8002332 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 8002316:	2c01      	cmp	r4, #1
 8002318:	d00e      	beq.n	8002338 <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 800231a:	b134      	cbz	r4, 800232a <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 800231c:	2c04      	cmp	r4, #4
 800231e:	d104      	bne.n	800232a <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002320:	f041 0106 	orr.w	r1, r1, #6
 8002324:	e001      	b.n	800232a <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002326:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 800232a:	2006      	movs	r0, #6
 800232c:	f7ff fed4 	bl	80020d8 <NRF24_write_register>
}
 8002330:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 8002332:	f041 0104 	orr.w	r1, r1, #4
 8002336:	e7f8      	b.n	800232a <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 8002338:	f041 0102 	orr.w	r1, r1, #2
 800233c:	e7f5      	b.n	800232a <NRF24_setPALevel+0x2a>

0800233e <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800233e:	b538      	push	{r3, r4, r5, lr}
 8002340:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002342:	2006      	movs	r0, #6
 8002344:	f7ff fe86 	bl	8002054 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8002348:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 800234c:	2d02      	cmp	r5, #2
 800234e:	d00c      	beq.n	800236a <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 8002350:	2d01      	cmp	r5, #1
 8002352:	d00d      	beq.n	8002370 <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 8002354:	4621      	mov	r1, r4
 8002356:	2006      	movs	r0, #6
 8002358:	f7ff febe 	bl	80020d8 <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800235c:	2006      	movs	r0, #6
 800235e:	f7ff fe79 	bl	8002054 <NRF24_read_register>
 8002362:	42a0      	cmp	r0, r4
 8002364:	d007      	beq.n	8002376 <NRF24_setDataRate+0x38>
	bool result = false;
 8002366:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 8002368:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 800236a:	f044 0420 	orr.w	r4, r4, #32
 800236e:	e7f1      	b.n	8002354 <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 8002370:	f044 0408 	orr.w	r4, r4, #8
 8002374:	e7ee      	b.n	8002354 <NRF24_setDataRate+0x16>
		result = true;
 8002376:	2001      	movs	r0, #1
 8002378:	e7f6      	b.n	8002368 <NRF24_setDataRate+0x2a>

0800237a <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800237a:	b510      	push	{r4, lr}
 800237c:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff fe68 	bl	8002054 <NRF24_read_register>
 8002384:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 8002388:	b11c      	cbz	r4, 8002392 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 800238a:	2c01      	cmp	r4, #1
 800238c:	d005      	beq.n	800239a <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 800238e:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff fea0 	bl	80020d8 <NRF24_write_register>
}
 8002398:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 800239a:	f041 0108 	orr.w	r1, r1, #8
 800239e:	e7f8      	b.n	8002392 <NRF24_setCRCLength+0x18>

080023a0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80023a0:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff fe56 	bl	8002054 <NRF24_read_register>
 80023a8:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fe93 	bl	80020d8 <NRF24_write_register>
}
 80023b2:	bd08      	pop	{r3, pc}

080023b4 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 80023b8:	f7ff fed4 	bl	8002164 <NRF24_get_status>
 80023bc:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf14      	ite	ne
 80023c4:	2501      	movne	r5, #1
 80023c6:	2500      	moveq	r5, #0

	if (result)
 80023c8:	d00b      	beq.n	80023e2 <NRF24_availablePipe+0x2e>
 80023ca:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 80023cc:	b116      	cbz	r6, 80023d4 <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80023ce:	f3c0 0342 	ubfx	r3, r0, #1, #3
 80023d2:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80023d4:	2140      	movs	r1, #64	; 0x40
 80023d6:	2007      	movs	r0, #7
 80023d8:	f7ff fe7e 	bl	80020d8 <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 80023dc:	f014 0f20 	tst.w	r4, #32
 80023e0:	d101      	bne.n	80023e6 <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 80023e2:	4628      	mov	r0, r5
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80023e6:	2120      	movs	r1, #32
 80023e8:	2007      	movs	r0, #7
 80023ea:	f7ff fe75 	bl	80020d8 <NRF24_write_register>
 80023ee:	e7f8      	b.n	80023e2 <NRF24_availablePipe+0x2e>

080023f0 <NRF24_available>:
{
 80023f0:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7ff ffde 	bl	80023b4 <NRF24_availablePipe>
}
 80023f8:	bd08      	pop	{r3, pc}

080023fa <NRF24_writeAckPayload>:
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80023fa:	b570      	push	{r4, r5, r6, lr}
 80023fc:	4604      	mov	r4, r0
 80023fe:	460d      	mov	r5, r1
	const uint8_t* current = (uint8_t *)buf;
	const uint8_t max_payload_size = 32;
	uint8_t data_len = MIN(len,max_payload_size);
 8002400:	2a20      	cmp	r2, #32
 8002402:	bf28      	it	cs
 8002404:	2220      	movcs	r2, #32
 8002406:	4616      	mov	r6, r2

	NRF24_csn(0);
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff fdf7 	bl	8001ffc <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 800240e:	f004 0007 	and.w	r0, r4, #7
 8002412:	4632      	mov	r2, r6
 8002414:	4629      	mov	r1, r5
 8002416:	f040 00a8 	orr.w	r0, r0, #168	; 0xa8
 800241a:	f7ff fe77 	bl	800210c <NRF24_write_registerN>
	NRF24_csn(1);
 800241e:	2001      	movs	r0, #1
 8002420:	f7ff fdec 	bl	8001ffc <NRF24_csn>
}
 8002424:	bd70      	pop	{r4, r5, r6, pc}

08002426 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8002426:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002428:	2170      	movs	r1, #112	; 0x70
 800242a:	2007      	movs	r0, #7
 800242c:	f7ff fe54 	bl	80020d8 <NRF24_write_register>
}
 8002430:	bd08      	pop	{r3, pc}
	...

08002434 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8002434:	b500      	push	{lr}
 8002436:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8002438:	2000      	movs	r0, #0
 800243a:	f7ff fddf 	bl	8001ffc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800243e:	2350      	movs	r3, #80	; 0x50
 8002440:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 8002444:	2373      	movs	r3, #115	; 0x73
 8002446:	f88d 3005 	strb.w	r3, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2,2);
 800244a:	2302      	movs	r3, #2
 800244c:	461a      	mov	r2, r3
 800244e:	a901      	add	r1, sp, #4
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <NRF24_ACTIVATE_cmd+0x30>)
 8002452:	f002 fa67 	bl	8004924 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}

	NRF24_csn(1);
 8002456:	2001      	movs	r0, #1
 8002458:	f7ff fdd0 	bl	8001ffc <NRF24_csn>
}
 800245c:	b003      	add	sp, #12
 800245e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002462:	bf00      	nop
 8002464:	200002a0 	.word	0x200002a0

08002468 <NRF24_enableAckPayload>:
{
 8002468:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800246a:	201d      	movs	r0, #29
 800246c:	f7ff fdf2 	bl	8002054 <NRF24_read_register>
 8002470:	f040 0106 	orr.w	r1, r0, #6
 8002474:	b2c9      	uxtb	r1, r1
 8002476:	201d      	movs	r0, #29
 8002478:	f7ff fe2e 	bl	80020d8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800247c:	201d      	movs	r0, #29
 800247e:	f7ff fde9 	bl	8002054 <NRF24_read_register>
 8002482:	b148      	cbz	r0, 8002498 <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002484:	201c      	movs	r0, #28
 8002486:	f7ff fde5 	bl	8002054 <NRF24_read_register>
 800248a:	f040 0103 	orr.w	r1, r0, #3
 800248e:	b2c9      	uxtb	r1, r1
 8002490:	201c      	movs	r0, #28
 8002492:	f7ff fe21 	bl	80020d8 <NRF24_write_register>
}
 8002496:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 8002498:	f7ff ffcc 	bl	8002434 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800249c:	201d      	movs	r0, #29
 800249e:	f7ff fdd9 	bl	8002054 <NRF24_read_register>
 80024a2:	f040 0106 	orr.w	r1, r0, #6
 80024a6:	b2c9      	uxtb	r1, r1
 80024a8:	201d      	movs	r0, #29
 80024aa:	f7ff fe15 	bl	80020d8 <NRF24_write_register>
 80024ae:	e7e9      	b.n	8002484 <NRF24_enableAckPayload+0x1c>

080024b0 <NRF24_begin>:
{
 80024b0:	b082      	sub	sp, #8
 80024b2:	b570      	push	{r4, r5, r6, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	4606      	mov	r6, r0
 80024b8:	460d      	mov	r5, r1
 80024ba:	4614      	mov	r4, r2
 80024bc:	a906      	add	r1, sp, #24
 80024be:	f841 3f04 	str.w	r3, [r1, #4]!
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80024c2:	2258      	movs	r2, #88	; 0x58
 80024c4:	4861      	ldr	r0, [pc, #388]	; (800264c <NRF24_begin+0x19c>)
 80024c6:	f008 fe5a 	bl	800b17e <memcpy>
	nrf24_PORT = nrf24PORT;
 80024ca:	4b61      	ldr	r3, [pc, #388]	; (8002650 <NRF24_begin+0x1a0>)
 80024cc:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80024ce:	4b61      	ldr	r3, [pc, #388]	; (8002654 <NRF24_begin+0x1a4>)
 80024d0:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80024d2:	4b61      	ldr	r3, [pc, #388]	; (8002658 <NRF24_begin+0x1a8>)
 80024d4:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7ff fd90 	bl	8001ffc <NRF24_csn>
	NRF24_ce(0);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff fda3 	bl	8002028 <NRF24_ce>
	HAL_Delay(5);
 80024e2:	2005      	movs	r0, #5
 80024e4:	f000 fd8e 	bl	8003004 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 80024e8:	2108      	movs	r1, #8
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff fdf4 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80024f0:	213f      	movs	r1, #63	; 0x3f
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff fdf0 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80024f8:	2103      	movs	r1, #3
 80024fa:	2002      	movs	r0, #2
 80024fc:	f7ff fdec 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8002500:	2103      	movs	r1, #3
 8002502:	4608      	mov	r0, r1
 8002504:	f7ff fde8 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8002508:	2103      	movs	r1, #3
 800250a:	2004      	movs	r0, #4
 800250c:	f7ff fde4 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8002510:	2102      	movs	r1, #2
 8002512:	2005      	movs	r0, #5
 8002514:	f7ff fde0 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8002518:	210f      	movs	r1, #15
 800251a:	2006      	movs	r0, #6
 800251c:	f7ff fddc 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8002520:	210e      	movs	r1, #14
 8002522:	2007      	movs	r0, #7
 8002524:	f7ff fdd8 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8002528:	2100      	movs	r1, #0
 800252a:	2008      	movs	r0, #8
 800252c:	f7ff fdd4 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8002530:	2100      	movs	r1, #0
 8002532:	2009      	movs	r0, #9
 8002534:	f7ff fdd0 	bl	80020d8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8002538:	24e7      	movs	r4, #231	; 0xe7
 800253a:	f88d 4004 	strb.w	r4, [sp, #4]
 800253e:	f88d 4003 	strb.w	r4, [sp, #3]
 8002542:	f88d 4002 	strb.w	r4, [sp, #2]
 8002546:	f88d 4001 	strb.w	r4, [sp, #1]
 800254a:	ad02      	add	r5, sp, #8
 800254c:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8002550:	2205      	movs	r2, #5
 8002552:	4629      	mov	r1, r5
 8002554:	200a      	movs	r0, #10
 8002556:	f7ff fdd9 	bl	800210c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800255a:	23c2      	movs	r3, #194	; 0xc2
 800255c:	f88d 3004 	strb.w	r3, [sp, #4]
 8002560:	f88d 3003 	strb.w	r3, [sp, #3]
 8002564:	f88d 3002 	strb.w	r3, [sp, #2]
 8002568:	f88d 3001 	strb.w	r3, [sp, #1]
 800256c:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8002570:	2205      	movs	r2, #5
 8002572:	4629      	mov	r1, r5
 8002574:	200b      	movs	r0, #11
 8002576:	f7ff fdc9 	bl	800210c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800257a:	21c3      	movs	r1, #195	; 0xc3
 800257c:	200c      	movs	r0, #12
 800257e:	f7ff fdab 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8002582:	21c4      	movs	r1, #196	; 0xc4
 8002584:	200d      	movs	r0, #13
 8002586:	f7ff fda7 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800258a:	21c5      	movs	r1, #197	; 0xc5
 800258c:	200e      	movs	r0, #14
 800258e:	f7ff fda3 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8002592:	21c6      	movs	r1, #198	; 0xc6
 8002594:	200f      	movs	r0, #15
 8002596:	f7ff fd9f 	bl	80020d8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800259a:	f88d 4004 	strb.w	r4, [sp, #4]
 800259e:	f88d 4003 	strb.w	r4, [sp, #3]
 80025a2:	f88d 4002 	strb.w	r4, [sp, #2]
 80025a6:	f88d 4001 	strb.w	r4, [sp, #1]
 80025aa:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80025ae:	2205      	movs	r2, #5
 80025b0:	4629      	mov	r1, r5
 80025b2:	2010      	movs	r0, #16
 80025b4:	f7ff fdaa 	bl	800210c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80025b8:	2100      	movs	r1, #0
 80025ba:	2011      	movs	r0, #17
 80025bc:	f7ff fd8c 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80025c0:	2100      	movs	r1, #0
 80025c2:	2012      	movs	r0, #18
 80025c4:	f7ff fd88 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80025c8:	2100      	movs	r1, #0
 80025ca:	2013      	movs	r0, #19
 80025cc:	f7ff fd84 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80025d0:	2100      	movs	r1, #0
 80025d2:	2014      	movs	r0, #20
 80025d4:	f7ff fd80 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80025d8:	2100      	movs	r1, #0
 80025da:	2015      	movs	r0, #21
 80025dc:	f7ff fd7c 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80025e0:	2100      	movs	r1, #0
 80025e2:	2016      	movs	r0, #22
 80025e4:	f7ff fd78 	bl	80020d8 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 80025e8:	f7ff ff24 	bl	8002434 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80025ec:	2100      	movs	r1, #0
 80025ee:	201c      	movs	r0, #28
 80025f0:	f7ff fd72 	bl	80020d8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80025f4:	2100      	movs	r1, #0
 80025f6:	201d      	movs	r0, #29
 80025f8:	f7ff fd6e 	bl	80020d8 <NRF24_write_register>
	NRF24_setRetries(15, 15);
 80025fc:	210f      	movs	r1, #15
 80025fe:	4608      	mov	r0, r1
 8002600:	f7ff fe10 	bl	8002224 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 8002604:	2002      	movs	r0, #2
 8002606:	f7ff fe7b 	bl	8002300 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_2MBPS);
 800260a:	2001      	movs	r0, #1
 800260c:	f7ff fe97 	bl	800233e <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8002610:	2002      	movs	r0, #2
 8002612:	f7ff feb2 	bl	800237a <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 8002616:	f7ff fe59 	bl	80022cc <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 800261a:	2020      	movs	r0, #32
 800261c:	f7ff fe16 	bl	800224c <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 8002620:	2001      	movs	r0, #1
 8002622:	f7ff fe61 	bl	80022e8 <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 8002626:	f7ff ff1f 	bl	8002468 <NRF24_enableAckPayload>
	NRF24_resetStatus();
 800262a:	f7ff fefc 	bl	8002426 <NRF24_resetStatus>
	NRF24_setChannel(56);
 800262e:	2038      	movs	r0, #56	; 0x38
 8002630:	f7ff fe02 	bl	8002238 <NRF24_setChannel>
	NRF24_flush_tx();
 8002634:	f7ff fd8a 	bl	800214c <NRF24_flush_tx>
	NRF24_flush_rx();
 8002638:	f7ff fd8e 	bl	8002158 <NRF24_flush_rx>
	NRF24_powerDown();
 800263c:	f7ff feb0 	bl	80023a0 <NRF24_powerDown>
}
 8002640:	b002      	add	sp, #8
 8002642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002646:	b002      	add	sp, #8
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	200002a0 	.word	0x200002a0
 8002650:	2000029c 	.word	0x2000029c
 8002654:	2000029a 	.word	0x2000029a
 8002658:	20000298 	.word	0x20000298

0800265c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002660:	ac07      	add	r4, sp, #28
 8002662:	4dc4      	ldr	r5, [pc, #784]	; (8002974 <printRadioSettings+0x318>)
 8002664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800266c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002670:	682b      	ldr	r3, [r5, #0]
 8002672:	f824 3b02 	strh.w	r3, [r4], #2
 8002676:	0c1b      	lsrs	r3, r3, #16
 8002678:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800267a:	a807      	add	r0, sp, #28
 800267c:	f7fd fdb0 	bl	80001e0 <strlen>
 8002680:	230a      	movs	r3, #10
 8002682:	b282      	uxth	r2, r0
 8002684:	a907      	add	r1, sp, #28
 8002686:	48bc      	ldr	r0, [pc, #752]	; (8002978 <printRadioSettings+0x31c>)
 8002688:	f003 f92c 	bl	80058e4 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff fce1 	bl	8002054 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8002692:	f010 0f08 	tst.w	r0, #8
 8002696:	f000 8261 	beq.w	8002b5c <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800269a:	f010 0f04 	tst.w	r0, #4
 800269e:	f000 8251 	beq.w	8002b44 <printRadioSettings+0x4e8>
 80026a2:	ac07      	add	r4, sp, #28
 80026a4:	4db5      	ldr	r5, [pc, #724]	; (800297c <printRadioSettings+0x320>)
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80026b2:	a807      	add	r0, sp, #28
 80026b4:	f7fd fd94 	bl	80001e0 <strlen>
 80026b8:	4caf      	ldr	r4, [pc, #700]	; (8002978 <printRadioSettings+0x31c>)
 80026ba:	230a      	movs	r3, #10
 80026bc:	b282      	uxth	r2, r0
 80026be:	a907      	add	r1, sp, #28
 80026c0:	4620      	mov	r0, r4
 80026c2:	f003 f90f 	bl	80058e4 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7ff fcc4 	bl	8002054 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80026cc:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80026d0:	9303      	str	r3, [sp, #12]
 80026d2:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80026e8:	f000 0201 	and.w	r2, r0, #1
 80026ec:	49a4      	ldr	r1, [pc, #656]	; (8002980 <printRadioSettings+0x324>)
 80026ee:	a807      	add	r0, sp, #28
 80026f0:	f009 fc18 	bl	800bf24 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80026f4:	a807      	add	r0, sp, #28
 80026f6:	f7fd fd73 	bl	80001e0 <strlen>
 80026fa:	230a      	movs	r3, #10
 80026fc:	b282      	uxth	r2, r0
 80026fe:	a907      	add	r1, sp, #28
 8002700:	4620      	mov	r0, r4
 8002702:	f003 f8ef 	bl	80058e4 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8002706:	2002      	movs	r0, #2
 8002708:	f7ff fca4 	bl	8002054 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800270c:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002710:	9303      	str	r3, [sp, #12]
 8002712:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002716:	9302      	str	r3, [sp, #8]
 8002718:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002728:	f000 0201 	and.w	r2, r0, #1
 800272c:	4995      	ldr	r1, [pc, #596]	; (8002984 <printRadioSettings+0x328>)
 800272e:	a807      	add	r0, sp, #28
 8002730:	f009 fbf8 	bl	800bf24 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002734:	a807      	add	r0, sp, #28
 8002736:	f7fd fd53 	bl	80001e0 <strlen>
 800273a:	230a      	movs	r3, #10
 800273c:	b282      	uxth	r2, r0
 800273e:	a907      	add	r1, sp, #28
 8002740:	4620      	mov	r0, r4
 8002742:	f003 f8cf 	bl	80058e4 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8002746:	2003      	movs	r0, #3
 8002748:	f7ff fc84 	bl	8002054 <NRF24_read_register>
 800274c:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8002750:	3202      	adds	r2, #2
 8002752:	498d      	ldr	r1, [pc, #564]	; (8002988 <printRadioSettings+0x32c>)
 8002754:	a807      	add	r0, sp, #28
 8002756:	f009 fbe5 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800275a:	a807      	add	r0, sp, #28
 800275c:	f7fd fd40 	bl	80001e0 <strlen>
 8002760:	230a      	movs	r3, #10
 8002762:	b282      	uxth	r2, r0
 8002764:	a907      	add	r1, sp, #28
 8002766:	4620      	mov	r0, r4
 8002768:	f003 f8bc 	bl	80058e4 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800276c:	2005      	movs	r0, #5
 800276e:	f7ff fc71 	bl	8002054 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8002772:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8002776:	4985      	ldr	r1, [pc, #532]	; (800298c <printRadioSettings+0x330>)
 8002778:	a807      	add	r0, sp, #28
 800277a:	f009 fbd3 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800277e:	a807      	add	r0, sp, #28
 8002780:	f7fd fd2e 	bl	80001e0 <strlen>
 8002784:	230a      	movs	r3, #10
 8002786:	b282      	uxth	r2, r0
 8002788:	a907      	add	r1, sp, #28
 800278a:	4620      	mov	r0, r4
 800278c:	f003 f8aa 	bl	80058e4 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8002790:	2006      	movs	r0, #6
 8002792:	f7ff fc5f 	bl	8002054 <NRF24_read_register>
 8002796:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8002798:	f010 0f08 	tst.w	r0, #8
 800279c:	f000 81e5 	beq.w	8002b6a <printRadioSettings+0x50e>
 80027a0:	ad07      	add	r5, sp, #28
 80027a2:	4e7b      	ldr	r6, [pc, #492]	; (8002990 <printRadioSettings+0x334>)
 80027a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80027ac:	f845 0b04 	str.w	r0, [r5], #4
 80027b0:	f825 1b02 	strh.w	r1, [r5], #2
 80027b4:	0c09      	lsrs	r1, r1, #16
 80027b6:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027b8:	a807      	add	r0, sp, #28
 80027ba:	f7fd fd11 	bl	80001e0 <strlen>
 80027be:	230a      	movs	r3, #10
 80027c0:	b282      	uxth	r2, r0
 80027c2:	a907      	add	r1, sp, #28
 80027c4:	486c      	ldr	r0, [pc, #432]	; (8002978 <printRadioSettings+0x31c>)
 80027c6:	f003 f88d 	bl	80058e4 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 80027ca:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80027ce:	2c00      	cmp	r4, #0
 80027d0:	f000 81d8 	beq.w	8002b84 <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80027d4:	2c01      	cmp	r4, #1
 80027d6:	f000 81dc 	beq.w	8002b92 <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80027da:	2c02      	cmp	r4, #2
 80027dc:	f000 81e0 	beq.w	8002ba0 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80027e0:	2c03      	cmp	r4, #3
 80027e2:	f000 81e7 	beq.w	8002bb4 <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027e6:	a807      	add	r0, sp, #28
 80027e8:	f7fd fcfa 	bl	80001e0 <strlen>
 80027ec:	4c62      	ldr	r4, [pc, #392]	; (8002978 <printRadioSettings+0x31c>)
 80027ee:	230a      	movs	r3, #10
 80027f0:	b282      	uxth	r2, r0
 80027f2:	a907      	add	r1, sp, #28
 80027f4:	4620      	mov	r0, r4
 80027f6:	f003 f875 	bl	80058e4 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80027fa:	2205      	movs	r2, #5
 80027fc:	a905      	add	r1, sp, #20
 80027fe:	200a      	movs	r0, #10
 8002800:	f7ff fc4a 	bl	8002098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002804:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002808:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800280c:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002810:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002814:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002818:	9502      	str	r5, [sp, #8]
 800281a:	9001      	str	r0, [sp, #4]
 800281c:	9100      	str	r1, [sp, #0]
 800281e:	495d      	ldr	r1, [pc, #372]	; (8002994 <printRadioSettings+0x338>)
 8002820:	a807      	add	r0, sp, #28
 8002822:	f009 fb7f 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002826:	a807      	add	r0, sp, #28
 8002828:	f7fd fcda 	bl	80001e0 <strlen>
 800282c:	230a      	movs	r3, #10
 800282e:	b282      	uxth	r2, r0
 8002830:	a907      	add	r1, sp, #28
 8002832:	4620      	mov	r0, r4
 8002834:	f003 f856 	bl	80058e4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8002838:	2205      	movs	r2, #5
 800283a:	a905      	add	r1, sp, #20
 800283c:	200b      	movs	r0, #11
 800283e:	f7ff fc2b 	bl	8002098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002842:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002846:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800284a:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800284e:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002852:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002856:	9502      	str	r5, [sp, #8]
 8002858:	9001      	str	r0, [sp, #4]
 800285a:	9100      	str	r1, [sp, #0]
 800285c:	494e      	ldr	r1, [pc, #312]	; (8002998 <printRadioSettings+0x33c>)
 800285e:	a807      	add	r0, sp, #28
 8002860:	f009 fb60 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002864:	a807      	add	r0, sp, #28
 8002866:	f7fd fcbb 	bl	80001e0 <strlen>
 800286a:	230a      	movs	r3, #10
 800286c:	b282      	uxth	r2, r0
 800286e:	a907      	add	r1, sp, #28
 8002870:	4620      	mov	r0, r4
 8002872:	f003 f837 	bl	80058e4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8002876:	2201      	movs	r2, #1
 8002878:	a905      	add	r1, sp, #20
 800287a:	200c      	movs	r0, #12
 800287c:	f7ff fc0c 	bl	8002098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002880:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002884:	4945      	ldr	r1, [pc, #276]	; (800299c <printRadioSettings+0x340>)
 8002886:	a807      	add	r0, sp, #28
 8002888:	f009 fb4c 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800288c:	a807      	add	r0, sp, #28
 800288e:	f7fd fca7 	bl	80001e0 <strlen>
 8002892:	230a      	movs	r3, #10
 8002894:	b282      	uxth	r2, r0
 8002896:	a907      	add	r1, sp, #28
 8002898:	4620      	mov	r0, r4
 800289a:	f003 f823 	bl	80058e4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800289e:	2201      	movs	r2, #1
 80028a0:	a905      	add	r1, sp, #20
 80028a2:	200d      	movs	r0, #13
 80028a4:	f7ff fbf8 	bl	8002098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80028a8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80028ac:	493c      	ldr	r1, [pc, #240]	; (80029a0 <printRadioSettings+0x344>)
 80028ae:	a807      	add	r0, sp, #28
 80028b0:	f009 fb38 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028b4:	a807      	add	r0, sp, #28
 80028b6:	f7fd fc93 	bl	80001e0 <strlen>
 80028ba:	230a      	movs	r3, #10
 80028bc:	b282      	uxth	r2, r0
 80028be:	a907      	add	r1, sp, #28
 80028c0:	4620      	mov	r0, r4
 80028c2:	f003 f80f 	bl	80058e4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80028c6:	2201      	movs	r2, #1
 80028c8:	a905      	add	r1, sp, #20
 80028ca:	200e      	movs	r0, #14
 80028cc:	f7ff fbe4 	bl	8002098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80028d0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80028d4:	4933      	ldr	r1, [pc, #204]	; (80029a4 <printRadioSettings+0x348>)
 80028d6:	a807      	add	r0, sp, #28
 80028d8:	f009 fb24 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028dc:	a807      	add	r0, sp, #28
 80028de:	f7fd fc7f 	bl	80001e0 <strlen>
 80028e2:	230a      	movs	r3, #10
 80028e4:	b282      	uxth	r2, r0
 80028e6:	a907      	add	r1, sp, #28
 80028e8:	4620      	mov	r0, r4
 80028ea:	f002 fffb 	bl	80058e4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80028ee:	2201      	movs	r2, #1
 80028f0:	a905      	add	r1, sp, #20
 80028f2:	200f      	movs	r0, #15
 80028f4:	f7ff fbd0 	bl	8002098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80028f8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80028fc:	492a      	ldr	r1, [pc, #168]	; (80029a8 <printRadioSettings+0x34c>)
 80028fe:	a807      	add	r0, sp, #28
 8002900:	f009 fb10 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002904:	a807      	add	r0, sp, #28
 8002906:	f7fd fc6b 	bl	80001e0 <strlen>
 800290a:	230a      	movs	r3, #10
 800290c:	b282      	uxth	r2, r0
 800290e:	a907      	add	r1, sp, #28
 8002910:	4620      	mov	r0, r4
 8002912:	f002 ffe7 	bl	80058e4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8002916:	2205      	movs	r2, #5
 8002918:	a905      	add	r1, sp, #20
 800291a:	2010      	movs	r0, #16
 800291c:	f7ff fbbc 	bl	8002098 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002920:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002924:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002928:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800292c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002930:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002934:	9502      	str	r5, [sp, #8]
 8002936:	9001      	str	r0, [sp, #4]
 8002938:	9100      	str	r1, [sp, #0]
 800293a:	491c      	ldr	r1, [pc, #112]	; (80029ac <printRadioSettings+0x350>)
 800293c:	a807      	add	r0, sp, #28
 800293e:	f009 faf1 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002942:	a807      	add	r0, sp, #28
 8002944:	f7fd fc4c 	bl	80001e0 <strlen>
 8002948:	230a      	movs	r3, #10
 800294a:	b282      	uxth	r2, r0
 800294c:	a907      	add	r1, sp, #28
 800294e:	4620      	mov	r0, r4
 8002950:	f002 ffc8 	bl	80058e4 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8002954:	2011      	movs	r0, #17
 8002956:	f7ff fb7d 	bl	8002054 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800295a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800295e:	4914      	ldr	r1, [pc, #80]	; (80029b0 <printRadioSettings+0x354>)
 8002960:	a807      	add	r0, sp, #28
 8002962:	f009 fadf 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002966:	a807      	add	r0, sp, #28
 8002968:	f7fd fc3a 	bl	80001e0 <strlen>
 800296c:	230a      	movs	r3, #10
 800296e:	b282      	uxth	r2, r0
 8002970:	e020      	b.n	80029b4 <printRadioSettings+0x358>
 8002972:	bf00      	nop
 8002974:	0800f688 	.word	0x0800f688
 8002978:	200002f8 	.word	0x200002f8
 800297c:	0800f6bc 	.word	0x0800f6bc
 8002980:	0800f708 	.word	0x0800f708
 8002984:	0800f74c 	.word	0x0800f74c
 8002988:	0800f798 	.word	0x0800f798
 800298c:	0800f7b4 	.word	0x0800f7b4
 8002990:	0800f7c8 	.word	0x0800f7c8
 8002994:	0800f848 	.word	0x0800f848
 8002998:	0800f878 	.word	0x0800f878
 800299c:	0800f8a8 	.word	0x0800f8a8
 80029a0:	0800f8d0 	.word	0x0800f8d0
 80029a4:	0800f8f8 	.word	0x0800f8f8
 80029a8:	0800f920 	.word	0x0800f920
 80029ac:	0800f948 	.word	0x0800f948
 80029b0:	0800f974 	.word	0x0800f974
 80029b4:	a907      	add	r1, sp, #28
 80029b6:	4620      	mov	r0, r4
 80029b8:	f002 ff94 	bl	80058e4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80029bc:	2012      	movs	r0, #18
 80029be:	f7ff fb49 	bl	8002054 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80029c2:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80029c6:	498a      	ldr	r1, [pc, #552]	; (8002bf0 <printRadioSettings+0x594>)
 80029c8:	a807      	add	r0, sp, #28
 80029ca:	f009 faab 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029ce:	a807      	add	r0, sp, #28
 80029d0:	f7fd fc06 	bl	80001e0 <strlen>
 80029d4:	230a      	movs	r3, #10
 80029d6:	b282      	uxth	r2, r0
 80029d8:	a907      	add	r1, sp, #28
 80029da:	4620      	mov	r0, r4
 80029dc:	f002 ff82 	bl	80058e4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80029e0:	2013      	movs	r0, #19
 80029e2:	f7ff fb37 	bl	8002054 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80029e6:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80029ea:	4982      	ldr	r1, [pc, #520]	; (8002bf4 <printRadioSettings+0x598>)
 80029ec:	a807      	add	r0, sp, #28
 80029ee:	f009 fa99 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029f2:	a807      	add	r0, sp, #28
 80029f4:	f7fd fbf4 	bl	80001e0 <strlen>
 80029f8:	230a      	movs	r3, #10
 80029fa:	b282      	uxth	r2, r0
 80029fc:	a907      	add	r1, sp, #28
 80029fe:	4620      	mov	r0, r4
 8002a00:	f002 ff70 	bl	80058e4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8002a04:	2014      	movs	r0, #20
 8002a06:	f7ff fb25 	bl	8002054 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a0a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a0e:	497a      	ldr	r1, [pc, #488]	; (8002bf8 <printRadioSettings+0x59c>)
 8002a10:	a807      	add	r0, sp, #28
 8002a12:	f009 fa87 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a16:	a807      	add	r0, sp, #28
 8002a18:	f7fd fbe2 	bl	80001e0 <strlen>
 8002a1c:	230a      	movs	r3, #10
 8002a1e:	b282      	uxth	r2, r0
 8002a20:	a907      	add	r1, sp, #28
 8002a22:	4620      	mov	r0, r4
 8002a24:	f002 ff5e 	bl	80058e4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8002a28:	2015      	movs	r0, #21
 8002a2a:	f7ff fb13 	bl	8002054 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a2e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a32:	4972      	ldr	r1, [pc, #456]	; (8002bfc <printRadioSettings+0x5a0>)
 8002a34:	a807      	add	r0, sp, #28
 8002a36:	f009 fa75 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a3a:	a807      	add	r0, sp, #28
 8002a3c:	f7fd fbd0 	bl	80001e0 <strlen>
 8002a40:	230a      	movs	r3, #10
 8002a42:	b282      	uxth	r2, r0
 8002a44:	a907      	add	r1, sp, #28
 8002a46:	4620      	mov	r0, r4
 8002a48:	f002 ff4c 	bl	80058e4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8002a4c:	2016      	movs	r0, #22
 8002a4e:	f7ff fb01 	bl	8002054 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a52:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a56:	496a      	ldr	r1, [pc, #424]	; (8002c00 <printRadioSettings+0x5a4>)
 8002a58:	a807      	add	r0, sp, #28
 8002a5a:	f009 fa63 	bl	800bf24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a5e:	a807      	add	r0, sp, #28
 8002a60:	f7fd fbbe 	bl	80001e0 <strlen>
 8002a64:	230a      	movs	r3, #10
 8002a66:	b282      	uxth	r2, r0
 8002a68:	a907      	add	r1, sp, #28
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f002 ff3a 	bl	80058e4 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8002a70:	201c      	movs	r0, #28
 8002a72:	f7ff faef 	bl	8002054 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a76:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002a7a:	9303      	str	r3, [sp, #12]
 8002a7c:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002a92:	f000 0201 	and.w	r2, r0, #1
 8002a96:	495b      	ldr	r1, [pc, #364]	; (8002c04 <printRadioSettings+0x5a8>)
 8002a98:	a807      	add	r0, sp, #28
 8002a9a:	f009 fa43 	bl	800bf24 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a9e:	a807      	add	r0, sp, #28
 8002aa0:	f7fd fb9e 	bl	80001e0 <strlen>
 8002aa4:	230a      	movs	r3, #10
 8002aa6:	b282      	uxth	r2, r0
 8002aa8:	a907      	add	r1, sp, #28
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f002 ff1a 	bl	80058e4 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002ab0:	201d      	movs	r0, #29
 8002ab2:	f7ff facf 	bl	8002054 <NRF24_read_register>
 8002ab6:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002ab8:	f010 0f04 	tst.w	r0, #4
 8002abc:	f000 8081 	beq.w	8002bc2 <printRadioSettings+0x566>
 8002ac0:	ac07      	add	r4, sp, #28
 8002ac2:	4d51      	ldr	r5, [pc, #324]	; (8002c08 <printRadioSettings+0x5ac>)
 8002ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002acc:	f844 0b04 	str.w	r0, [r4], #4
 8002ad0:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002ad2:	a807      	add	r0, sp, #28
 8002ad4:	f7fd fb84 	bl	80001e0 <strlen>
 8002ad8:	230a      	movs	r3, #10
 8002ada:	b282      	uxth	r2, r0
 8002adc:	a907      	add	r1, sp, #28
 8002ade:	484b      	ldr	r0, [pc, #300]	; (8002c0c <printRadioSettings+0x5b0>)
 8002ae0:	f002 ff00 	bl	80058e4 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002ae4:	f016 0f02 	tst.w	r6, #2
 8002ae8:	d178      	bne.n	8002bdc <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002aea:	ac07      	add	r4, sp, #28
 8002aec:	4d48      	ldr	r5, [pc, #288]	; (8002c10 <printRadioSettings+0x5b4>)
 8002aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002af6:	c403      	stmia	r4!, {r0, r1}
 8002af8:	f824 2b02 	strh.w	r2, [r4], #2
 8002afc:	0c12      	lsrs	r2, r2, #16
 8002afe:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b00:	a807      	add	r0, sp, #28
 8002b02:	f7fd fb6d 	bl	80001e0 <strlen>
 8002b06:	4e41      	ldr	r6, [pc, #260]	; (8002c0c <printRadioSettings+0x5b0>)
 8002b08:	230a      	movs	r3, #10
 8002b0a:	b282      	uxth	r2, r0
 8002b0c:	a907      	add	r1, sp, #28
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f002 fee8 	bl	80058e4 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002b14:	ac07      	add	r4, sp, #28
 8002b16:	4d3f      	ldr	r5, [pc, #252]	; (8002c14 <printRadioSettings+0x5b8>)
 8002b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	f824 3b02 	strh.w	r3, [r4], #2
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b2e:	a807      	add	r0, sp, #28
 8002b30:	f7fd fb56 	bl	80001e0 <strlen>
 8002b34:	230a      	movs	r3, #10
 8002b36:	b282      	uxth	r2, r0
 8002b38:	a907      	add	r1, sp, #28
 8002b3a:	4630      	mov	r0, r6
 8002b3c:	f002 fed2 	bl	80058e4 <HAL_UART_Transmit>
}
 8002b40:	b020      	add	sp, #128	; 0x80
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8002b44:	ac07      	add	r4, sp, #28
 8002b46:	4d34      	ldr	r5, [pc, #208]	; (8002c18 <printRadioSettings+0x5bc>)
 8002b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b50:	c403      	stmia	r4!, {r0, r1}
 8002b52:	f824 2b02 	strh.w	r2, [r4], #2
 8002b56:	0c12      	lsrs	r2, r2, #16
 8002b58:	7022      	strb	r2, [r4, #0]
 8002b5a:	e5aa      	b.n	80026b2 <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8002b5c:	ac07      	add	r4, sp, #28
 8002b5e:	4d2f      	ldr	r5, [pc, #188]	; (8002c1c <printRadioSettings+0x5c0>)
 8002b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	6023      	str	r3, [r4, #0]
 8002b68:	e5a3      	b.n	80026b2 <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8002b6a:	ad07      	add	r5, sp, #28
 8002b6c:	4e2c      	ldr	r6, [pc, #176]	; (8002c20 <printRadioSettings+0x5c4>)
 8002b6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b72:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002b76:	f845 0b04 	str.w	r0, [r5], #4
 8002b7a:	f825 1b02 	strh.w	r1, [r5], #2
 8002b7e:	0c09      	lsrs	r1, r1, #16
 8002b80:	7029      	strb	r1, [r5, #0]
 8002b82:	e619      	b.n	80027b8 <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002b84:	ac07      	add	r4, sp, #28
 8002b86:	4d27      	ldr	r5, [pc, #156]	; (8002c24 <printRadioSettings+0x5c8>)
 8002b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b8c:	682b      	ldr	r3, [r5, #0]
 8002b8e:	6023      	str	r3, [r4, #0]
 8002b90:	e629      	b.n	80027e6 <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002b92:	ac07      	add	r4, sp, #28
 8002b94:	4d24      	ldr	r5, [pc, #144]	; (8002c28 <printRadioSettings+0x5cc>)
 8002b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b9a:	682b      	ldr	r3, [r5, #0]
 8002b9c:	6023      	str	r3, [r4, #0]
 8002b9e:	e622      	b.n	80027e6 <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002ba0:	ac07      	add	r4, sp, #28
 8002ba2:	4d22      	ldr	r5, [pc, #136]	; (8002c2c <printRadioSettings+0x5d0>)
 8002ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ba8:	682b      	ldr	r3, [r5, #0]
 8002baa:	f824 3b02 	strh.w	r3, [r4], #2
 8002bae:	0c1b      	lsrs	r3, r3, #16
 8002bb0:	7023      	strb	r3, [r4, #0]
 8002bb2:	e618      	b.n	80027e6 <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002bb4:	ac07      	add	r4, sp, #28
 8002bb6:	4d1e      	ldr	r5, [pc, #120]	; (8002c30 <printRadioSettings+0x5d4>)
 8002bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	8023      	strh	r3, [r4, #0]
 8002bc0:	e611      	b.n	80027e6 <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002bc2:	ac07      	add	r4, sp, #28
 8002bc4:	4d1b      	ldr	r5, [pc, #108]	; (8002c34 <printRadioSettings+0x5d8>)
 8002bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bce:	f844 0b04 	str.w	r0, [r4], #4
 8002bd2:	f824 1b02 	strh.w	r1, [r4], #2
 8002bd6:	0c09      	lsrs	r1, r1, #16
 8002bd8:	7021      	strb	r1, [r4, #0]
 8002bda:	e77a      	b.n	8002ad2 <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002bdc:	ac07      	add	r4, sp, #28
 8002bde:	4d16      	ldr	r5, [pc, #88]	; (8002c38 <printRadioSettings+0x5dc>)
 8002be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002be4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002be8:	c403      	stmia	r4!, {r0, r1}
 8002bea:	8022      	strh	r2, [r4, #0]
 8002bec:	e788      	b.n	8002b00 <printRadioSettings+0x4a4>
 8002bee:	bf00      	nop
 8002bf0:	0800f990 	.word	0x0800f990
 8002bf4:	0800f9ac 	.word	0x0800f9ac
 8002bf8:	0800f9c8 	.word	0x0800f9c8
 8002bfc:	0800f9e4 	.word	0x0800f9e4
 8002c00:	0800fa00 	.word	0x0800fa00
 8002c04:	0800fa1c 	.word	0x0800fa1c
 8002c08:	0800fa68 	.word	0x0800fa68
 8002c0c:	200002f8 	.word	0x200002f8
 8002c10:	0800fab4 	.word	0x0800fab4
 8002c14:	0800f688 	.word	0x0800f688
 8002c18:	0800f6d8 	.word	0x0800f6d8
 8002c1c:	0800f6f4 	.word	0x0800f6f4
 8002c20:	0800f7e0 	.word	0x0800f7e0
 8002c24:	0800f7f8 	.word	0x0800f7f8
 8002c28:	0800f80c 	.word	0x0800f80c
 8002c2c:	0800f820 	.word	0x0800f820
 8002c30:	0800f834 	.word	0x0800f834
 8002c34:	0800fa80 	.word	0x0800fa80
 8002c38:	0800fa98 	.word	0x0800fa98

08002c3c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	b430      	push	{r4, r5}
 8002c40:	ac02      	add	r4, sp, #8
 8002c42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8002c46:	4c07      	ldr	r4, [pc, #28]	; (8002c64 <nrf24_DebugUART_Init+0x28>)
 8002c48:	ad02      	add	r5, sp, #8
 8002c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002c5e:	bc30      	pop	{r4, r5}
 8002c60:	b004      	add	sp, #16
 8002c62:	4770      	bx	lr
 8002c64:	200002f8 	.word	0x200002f8

08002c68 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = roll_setpoint - IMU_roll_value;
 8002c68:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <pid_calculate_roll+0xac>)
 8002c6e:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8002c72:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <pid_calculate_roll+0xb0>)
 8002c74:	edd3 6a00 	vldr	s13, [r3]
 8002c78:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <pid_calculate_roll+0xb4>)
 8002c7e:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <pid_calculate_roll+0xb8>)
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002c8c:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002d24 <pid_calculate_roll+0xbc>
 8002c90:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <pid_calculate_roll+0xc0>)
 8002c96:	ed93 7a00 	vldr	s14, [r3]
 8002c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c9e:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <pid_calculate_roll+0xc4>)
 8002ca4:	ed93 6a00 	vldr	s12, [r3]
 8002ca8:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002cac:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <pid_calculate_roll+0xc8>)
 8002cb2:	ed92 6a00 	vldr	s12, [r2]
 8002cb6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002cba:	4a1e      	ldr	r2, [pc, #120]	; (8002d34 <pid_calculate_roll+0xcc>)
 8002cbc:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8002cc0:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8002cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <pid_calculate_roll+0xd0>)
 8002cce:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <pid_calculate_roll+0xd4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	425a      	negs	r2, r3
 8002cd8:	ee07 2a10 	vmov	s14, r2
 8002cdc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce8:	d40c      	bmi.n	8002d04 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 8002cea:	ee07 3a10 	vmov	s14, r3
 8002cee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfa:	dd06      	ble.n	8002d0a <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <pid_calculate_roll+0xd0>)
 8002cfe:	ed83 7a00 	vstr	s14, [r3]
 8002d02:	e002      	b.n	8002d0a <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <pid_calculate_roll+0xd0>)
 8002d06:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <pid_calculate_roll+0xd0>)
 8002d0c:	ed93 0a00 	vldr	s0, [r3]
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000354 	.word	0x20000354
 8002d18:	20004c18 	.word	0x20004c18
 8002d1c:	20004b58 	.word	0x20004b58
 8002d20:	20004bdc 	.word	0x20004bdc
 8002d24:	3b015038 	.word	0x3b015038
 8002d28:	20004b64 	.word	0x20004b64
 8002d2c:	20000358 	.word	0x20000358
 8002d30:	20004bec 	.word	0x20004bec
 8002d34:	20004b44 	.word	0x20004b44
 8002d38:	2000035c 	.word	0x2000035c
 8002d3c:	20000054 	.word	0x20000054

08002d40 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <reset_pid_roll+0x14>)
 8002d44:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <reset_pid_roll+0x18>)
 8002d48:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <reset_pid_roll+0x1c>)
 8002d4c:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 8002d4e:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <reset_pid_roll+0x20>)
 8002d50:	6013      	str	r3, [r2, #0]

}
 8002d52:	4770      	bx	lr
 8002d54:	20004b58 	.word	0x20004b58
 8002d58:	20004b64 	.word	0x20004b64
 8002d5c:	20004b44 	.word	0x20004b44
 8002d60:	2000035c 	.word	0x2000035c

08002d64 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = pitch_setpoint - IMU_pitch_value ;
 8002d64:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8002d68:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <pid_calculate_pitch+0xac>)
 8002d6a:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 8002d6e:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <pid_calculate_pitch+0xb0>)
 8002d70:	edd3 6a00 	vldr	s13, [r3]
 8002d74:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002d78:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <pid_calculate_pitch+0xb4>)
 8002d7a:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8002d7e:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <pid_calculate_pitch+0xb8>)
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002d88:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002e20 <pid_calculate_pitch+0xbc>
 8002d8c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <pid_calculate_pitch+0xc0>)
 8002d92:	ed93 7a00 	vldr	s14, [r3]
 8002d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d9a:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <pid_calculate_pitch+0xc4>)
 8002da0:	ed93 6a00 	vldr	s12, [r3]
 8002da4:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002da8:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002dac:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <pid_calculate_pitch+0xc8>)
 8002dae:	ed92 6a00 	vldr	s12, [r2]
 8002db2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002db6:	4a1e      	ldr	r2, [pc, #120]	; (8002e30 <pid_calculate_pitch+0xcc>)
 8002db8:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 8002dbc:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8002dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <pid_calculate_pitch+0xd0>)
 8002dca:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <pid_calculate_pitch+0xd4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	425a      	negs	r2, r3
 8002dd4:	ee07 2a10 	vmov	s14, r2
 8002dd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	d40c      	bmi.n	8002e00 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8002de6:	ee07 3a10 	vmov	s14, r3
 8002dea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df6:	dd06      	ble.n	8002e06 <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <pid_calculate_pitch+0xd0>)
 8002dfa:	ed83 7a00 	vstr	s14, [r3]
 8002dfe:	e002      	b.n	8002e06 <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <pid_calculate_pitch+0xd0>)
 8002e02:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <pid_calculate_pitch+0xd0>)
 8002e08:	ed93 0a00 	vldr	s0, [r3]
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000348 	.word	0x20000348
 8002e14:	20004c14 	.word	0x20004c14
 8002e18:	20004b50 	.word	0x20004b50
 8002e1c:	20004bd4 	.word	0x20004bd4
 8002e20:	3b015038 	.word	0x3b015038
 8002e24:	20004b54 	.word	0x20004b54
 8002e28:	2000034c 	.word	0x2000034c
 8002e2c:	20004c1c 	.word	0x20004c1c
 8002e30:	20004b48 	.word	0x20004b48
 8002e34:	20000350 	.word	0x20000350
 8002e38:	20000050 	.word	0x20000050

08002e3c <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <reset_pid_pitch+0x14>)
 8002e40:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <reset_pid_pitch+0x18>)
 8002e44:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8002e46:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <reset_pid_pitch+0x1c>)
 8002e48:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 8002e4a:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <reset_pid_pitch+0x20>)
 8002e4c:	6013      	str	r3, [r2, #0]

}
 8002e4e:	4770      	bx	lr
 8002e50:	20004b50 	.word	0x20004b50
 8002e54:	20004b54 	.word	0x20004b54
 8002e58:	20004b48 	.word	0x20004b48
 8002e5c:	20000350 	.word	0x20000350

08002e60 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = yaw_setpoint - IMU_yaw_value;
 8002e60:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8002e64:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <pid_calculate_yaw+0xac>)
 8002e66:	edc3 0a00 	vstr	s1, [r3]
//	else
//		yaw_error = yaw_error;//do nothing


	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 8002e6a:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <pid_calculate_yaw+0xb0>)
 8002e6c:	edd3 6a00 	vldr	s13, [r3]
 8002e70:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <pid_calculate_yaw+0xb4>)
 8002e76:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 8002e7a:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <pid_calculate_yaw+0xb8>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002e84:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002f1c <pid_calculate_yaw+0xbc>
 8002e88:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <pid_calculate_yaw+0xc0>)
 8002e8e:	ed93 7a00 	vldr	s14, [r3]
 8002e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e96:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <pid_calculate_yaw+0xc4>)
 8002e9c:	ed93 6a00 	vldr	s12, [r3]
 8002ea0:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002ea4:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <pid_calculate_yaw+0xc8>)
 8002eaa:	ed92 6a00 	vldr	s12, [r2]
 8002eae:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002eb2:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <pid_calculate_yaw+0xcc>)
 8002eb4:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 8002eb8:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 8002ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <pid_calculate_yaw+0xd0>)
 8002ec6:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <pid_calculate_yaw+0xd4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	425a      	negs	r2, r3
 8002ed0:	ee07 2a10 	vmov	s14, r2
 8002ed4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	d40c      	bmi.n	8002efc <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 8002ee2:	ee07 3a10 	vmov	s14, r3
 8002ee6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef2:	dd06      	ble.n	8002f02 <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <pid_calculate_yaw+0xd0>)
 8002ef6:	ed83 7a00 	vstr	s14, [r3]
 8002efa:	e002      	b.n	8002f02 <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <pid_calculate_yaw+0xd0>)
 8002efe:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <pid_calculate_yaw+0xd0>)
 8002f04:	ed93 0a00 	vldr	s0, [r3]
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000360 	.word	0x20000360
 8002f10:	20004bd8 	.word	0x20004bd8
 8002f14:	20004b60 	.word	0x20004b60
 8002f18:	20004bb0 	.word	0x20004bb0
 8002f1c:	3b015038 	.word	0x3b015038
 8002f20:	20004b5c 	.word	0x20004b5c
 8002f24:	20000364 	.word	0x20000364
 8002f28:	20004b8c 	.word	0x20004b8c
 8002f2c:	20004b4c 	.word	0x20004b4c
 8002f30:	20000368 	.word	0x20000368
 8002f34:	20000058 	.word	0x20000058

08002f38 <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <reset_pid_yaw+0x14>)
 8002f3c:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 8002f3e:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <reset_pid_yaw+0x18>)
 8002f40:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8002f42:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <reset_pid_yaw+0x1c>)
 8002f44:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <reset_pid_yaw+0x20>)
 8002f48:	6013      	str	r3, [r2, #0]

}
 8002f4a:	4770      	bx	lr
 8002f4c:	20004b60 	.word	0x20004b60
 8002f50:	20004b5c 	.word	0x20004b5c
 8002f54:	20004b4c 	.word	0x20004b4c
 8002f58:	20000368 	.word	0x20000368

08002f5c <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002f5c:	4a06      	ldr	r2, [pc, #24]	; (8002f78 <DWT_Init+0x1c>)
 8002f5e:	68d3      	ldr	r3, [r2, #12]
 8002f60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f64:	60d3      	str	r3, [r2, #12]
        //DWT->LAR = 0xC5ACCE55;
        DWT->CYCCNT = 0;
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <DWT_Init+0x20>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000edf0 	.word	0xe000edf0
 8002f7c:	e0001000 	.word	0xe0001000

08002f80 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT, delayTicks = us * (SystemCoreClock/1000000);
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <DWT_Delay+0x20>)
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <DWT_Delay+0x24>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <DWT_Delay+0x28>)
 8002f8a:	fba1 1303 	umull	r1, r3, r1, r3
 8002f8e:	0c9b      	lsrs	r3, r3, #18
 8002f90:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <DWT_Delay+0x20>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	4283      	cmp	r3, r0
 8002f9c:	d3fa      	bcc.n	8002f94 <DWT_Delay+0x14>
}
 8002f9e:	4770      	bx	lr
 8002fa0:	e0001000 	.word	0xe0001000
 8002fa4:	20000070 	.word	0x20000070
 8002fa8:	431bde83 	.word	0x431bde83

08002fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fac:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_Init+0x30>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fbe:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc8:	2003      	movs	r0, #3
 8002fca:	f000 f82f 	bl	800302c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f005 fdf0 	bl	8008bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fd4:	f005 fdbc 	bl	8008b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002fd8:	2000      	movs	r0, #0
 8002fda:	bd08      	pop	{r3, pc}
 8002fdc:	40023c00 	.word	0x40023c00

08002fe0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002fe0:	4a03      	ldr	r2, [pc, #12]	; (8002ff0 <HAL_IncTick+0x10>)
 8002fe2:	6811      	ldr	r1, [r2, #0]
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_IncTick+0x14>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	440b      	add	r3, r1
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20004b68 	.word	0x20004b68
 8002ff4:	2000005c 	.word	0x2000005c

08002ff8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ff8:	4b01      	ldr	r3, [pc, #4]	; (8003000 <HAL_GetTick+0x8>)
 8002ffa:	6818      	ldr	r0, [r3, #0]
}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20004b68 	.word	0x20004b68

08003004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003004:	b538      	push	{r3, r4, r5, lr}
 8003006:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003008:	f7ff fff6 	bl	8002ff8 <HAL_GetTick>
 800300c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003012:	d002      	beq.n	800301a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <HAL_Delay+0x24>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800301a:	f7ff ffed 	bl	8002ff8 <HAL_GetTick>
 800301e:	1b40      	subs	r0, r0, r5
 8003020:	42a0      	cmp	r0, r4
 8003022:	d3fa      	bcc.n	800301a <HAL_Delay+0x16>
  {
  }
}
 8003024:	bd38      	pop	{r3, r4, r5, pc}
 8003026:	bf00      	nop
 8003028:	2000005c 	.word	0x2000005c

0800302c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800302c:	4a07      	ldr	r2, [pc, #28]	; (800304c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800302e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003030:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003038:	0200      	lsls	r0, r0, #8
 800303a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8003040:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8003044:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003048:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003050:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003052:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <HAL_NVIC_SetPriority+0x60>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800305a:	f1c3 0407 	rsb	r4, r3, #7
 800305e:	2c04      	cmp	r4, #4
 8003060:	bf28      	it	cs
 8003062:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003064:	1d1d      	adds	r5, r3, #4
 8003066:	2d06      	cmp	r5, #6
 8003068:	d918      	bls.n	800309c <HAL_NVIC_SetPriority+0x4c>
 800306a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	f04f 35ff 	mov.w	r5, #4294967295
 8003070:	fa05 f404 	lsl.w	r4, r5, r4
 8003074:	ea21 0104 	bic.w	r1, r1, r4
 8003078:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800307a:	fa05 f303 	lsl.w	r3, r5, r3
 800307e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003082:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003084:	2800      	cmp	r0, #0
 8003086:	db0b      	blt.n	80030a0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	0109      	lsls	r1, r1, #4
 800308a:	b2c9      	uxtb	r1, r1
 800308c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003090:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003094:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003098:	bc30      	pop	{r4, r5}
 800309a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309c:	2300      	movs	r3, #0
 800309e:	e7e5      	b.n	800306c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	f000 000f 	and.w	r0, r0, #15
 80030a4:	0109      	lsls	r1, r1, #4
 80030a6:	b2c9      	uxtb	r1, r1
 80030a8:	4b02      	ldr	r3, [pc, #8]	; (80030b4 <HAL_NVIC_SetPriority+0x64>)
 80030aa:	5419      	strb	r1, [r3, r0]
 80030ac:	e7f4      	b.n	8003098 <HAL_NVIC_SetPriority+0x48>
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00
 80030b4:	e000ed14 	.word	0xe000ed14

080030b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80030b8:	2800      	cmp	r0, #0
 80030ba:	db07      	blt.n	80030cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030bc:	f000 021f 	and.w	r2, r0, #31
 80030c0:	0940      	lsrs	r0, r0, #5
 80030c2:	2301      	movs	r3, #1
 80030c4:	4093      	lsls	r3, r2
 80030c6:	4a02      	ldr	r2, [pc, #8]	; (80030d0 <HAL_NVIC_EnableIRQ+0x18>)
 80030c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030d4:	b168      	cbz	r0, 80030f2 <HAL_CRC_Init+0x1e>
{
 80030d6:	b510      	push	{r4, lr}
 80030d8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030da:	7943      	ldrb	r3, [r0, #5]
 80030dc:	b12b      	cbz	r3, 80030ea <HAL_CRC_Init+0x16>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80030de:	2302      	movs	r3, #2
 80030e0:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80030e2:	2301      	movs	r3, #1
 80030e4:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80030e6:	2000      	movs	r0, #0
}
 80030e8:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80030ea:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80030ec:	f005 fa24 	bl	8008538 <HAL_CRC_MspInit>
 80030f0:	e7f5      	b.n	80030de <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80030f2:	2001      	movs	r0, #1
}
 80030f4:	4770      	bx	lr

080030f6 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d003      	beq.n	8003108 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003104:	2001      	movs	r0, #1
 8003106:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003108:	2305      	movs	r3, #5
 800310a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800310e:	6802      	ldr	r2, [r0, #0]
 8003110:	6813      	ldr	r3, [r2, #0]
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003118:	2000      	movs	r0, #0
}
 800311a:	4770      	bx	lr

0800311c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f013 0f10 	tst.w	r3, #16
 8003124:	d007      	beq.n	8003136 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003126:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <FLASH_SetErrorCode+0xa4>)
 8003128:	69d3      	ldr	r3, [r2, #28]
 800312a:	f043 0310 	orr.w	r3, r3, #16
 800312e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 8003132:	2210      	movs	r2, #16
 8003134:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003136:	4b21      	ldr	r3, [pc, #132]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f013 0f20 	tst.w	r3, #32
 800313e:	d007      	beq.n	8003150 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <FLASH_SetErrorCode+0xa4>)
 8003142:	69d3      	ldr	r3, [r2, #28]
 8003144:	f043 0308 	orr.w	r3, r3, #8
 8003148:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 800314c:	2220      	movs	r2, #32
 800314e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003150:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003158:	d007      	beq.n	800316a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800315a:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <FLASH_SetErrorCode+0xa4>)
 800315c:	69d3      	ldr	r3, [r2, #28]
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003164:	4b15      	ldr	r3, [pc, #84]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 8003166:	2240      	movs	r2, #64	; 0x40
 8003168:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800316a:	4b14      	ldr	r3, [pc, #80]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003172:	d007      	beq.n	8003184 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003174:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <FLASH_SetErrorCode+0xa4>)
 8003176:	69d3      	ldr	r3, [r2, #28]
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 8003180:	2280      	movs	r2, #128	; 0x80
 8003182:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003184:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f413 7f80 	tst.w	r3, #256	; 0x100
 800318c:	d008      	beq.n	80031a0 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800318e:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <FLASH_SetErrorCode+0xa4>)
 8003190:	69d3      	ldr	r3, [r2, #28]
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 800319a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800319e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f013 0f02 	tst.w	r3, #2
 80031a8:	d007      	beq.n	80031ba <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <FLASH_SetErrorCode+0xa4>)
 80031ac:	69d3      	ldr	r3, [r2, #28]
 80031ae:	f043 0320 	orr.w	r3, r3, #32
 80031b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80031b4:	4b01      	ldr	r3, [pc, #4]	; (80031bc <FLASH_SetErrorCode+0xa0>)
 80031b6:	2202      	movs	r2, #2
 80031b8:	60da      	str	r2, [r3, #12]
  }
}
 80031ba:	4770      	bx	lr
 80031bc:	40023c00 	.word	0x40023c00
 80031c0:	20004b6c 	.word	0x20004b6c

080031c4 <HAL_FLASH_EndOfOperationCallback>:
}
 80031c4:	4770      	bx	lr

080031c6 <HAL_FLASH_OperationErrorCallback>:
}
 80031c6:	4770      	bx	lr

080031c8 <HAL_FLASH_IRQHandler>:
{
 80031c8:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80031ca:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <HAL_FLASH_IRQHandler+0xec>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 80031d2:	d013      	beq.n	80031fc <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80031d4:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d03b      	beq.n	8003256 <HAL_FLASH_IRQHandler+0x8e>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d03c      	beq.n	8003262 <HAL_FLASH_IRQHandler+0x9a>
      addresstmp = pFlash.Address;
 80031e8:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 80031ea:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 80031ec:	f7ff ff96 	bl	800311c <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80031f0:	4620      	mov	r0, r4
 80031f2:	f7ff ffe8 	bl	80031c6 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80031fc:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_FLASH_IRQHandler+0xec>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f013 0f01 	tst.w	r3, #1
 8003204:	d013      	beq.n	800322e <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003206:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <HAL_FLASH_IRQHandler+0xec>)
 8003208:	2201      	movs	r2, #1
 800320a:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800320c:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4293      	cmp	r3, r2
 8003214:	d028      	beq.n	8003268 <HAL_FLASH_IRQHandler+0xa0>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8003216:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d041      	beq.n	80032a4 <HAL_FLASH_IRQHandler+0xdc>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003220:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003222:	6958      	ldr	r0, [r3, #20]
 8003224:	f7ff ffce 	bl	80031c4 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	b97b      	cbnz	r3, 8003254 <HAL_FLASH_IRQHandler+0x8c>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8003234:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <HAL_FLASH_IRQHandler+0xec>)
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800323c:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003244:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800324c:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003250:	2200      	movs	r2, #0
 8003252:	761a      	strb	r2, [r3, #24]
}
 8003254:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 8003256:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003258:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800325a:	f04f 32ff 	mov.w	r2, #4294967295
 800325e:	60da      	str	r2, [r3, #12]
 8003260:	e7c4      	b.n	80031ec <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003264:	691c      	ldr	r4, [r3, #16]
 8003266:	e7c1      	b.n	80031ec <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	3a01      	subs	r2, #1
 800326e:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	b15b      	cbz	r3, 800328c <HAL_FLASH_IRQHandler+0xc4>
        addresstmp = pFlash.Sector;
 8003274:	4c10      	ldr	r4, [pc, #64]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003276:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003278:	f7ff ffa4 	bl	80031c4 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 800327c:	68e3      	ldr	r3, [r4, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 8003282:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8003284:	7a21      	ldrb	r1, [r4, #8]
 8003286:	f000 f819 	bl	80032bc <FLASH_Erase_Sector>
 800328a:	e7d0      	b.n	800322e <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 800328e:	f04f 34ff 	mov.w	r4, #4294967295
 8003292:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 8003298:	f000 f83c 	bl	8003314 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800329c:	4620      	mov	r0, r4
 800329e:	f7ff ff91 	bl	80031c4 <HAL_FLASH_EndOfOperationCallback>
 80032a2:	e7c4      	b.n	800322e <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 80032a4:	f000 f836 	bl	8003314 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_FLASH_IRQHandler+0xf0>)
 80032aa:	6918      	ldr	r0, [r3, #16]
 80032ac:	f7ff ff8a 	bl	80031c4 <HAL_FLASH_EndOfOperationCallback>
 80032b0:	e7ba      	b.n	8003228 <HAL_FLASH_IRQHandler+0x60>
 80032b2:	bf00      	nop
 80032b4:	40023c00 	.word	0x40023c00
 80032b8:	20004b6c 	.word	0x20004b6c

080032bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80032bc:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80032be:	b149      	cbz	r1, 80032d4 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80032c0:	2901      	cmp	r1, #1
 80032c2:	d021      	beq.n	8003308 <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80032c4:	2902      	cmp	r1, #2
 80032c6:	d002      	beq.n	80032ce <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80032c8:	f44f 7440 	mov.w	r4, #768	; 0x300
 80032cc:	e003      	b.n	80032d6 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 80032ce:	f44f 7400 	mov.w	r4, #512	; 0x200
 80032d2:	e000      	b.n	80032d6 <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 80032d4:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <FLASH_Erase_Sector+0x54>)
 80032d8:	6919      	ldr	r1, [r3, #16]
 80032da:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80032de:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	4322      	orrs	r2, r4
 80032e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80032ec:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80032f4:	f040 0002 	orr.w	r0, r0, #2
 80032f8:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003300:	611a      	str	r2, [r3, #16]
}
 8003302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003306:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003308:	f44f 7480 	mov.w	r4, #256	; 0x100
 800330c:	e7e3      	b.n	80032d6 <FLASH_Erase_Sector+0x1a>
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00

08003314 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <FLASH_FlushCaches+0x5c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f413 7f00 	tst.w	r3, #512	; 0x200
 800331c:	d010      	beq.n	8003340 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <FLASH_FlushCaches+0x5c>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003326:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003336:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333e:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <FLASH_FlushCaches+0x5c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003348:	d010      	beq.n	800336c <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <FLASH_FlushCaches+0x5c>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003352:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003362:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800336a:	601a      	str	r2, [r3, #0]
  }
}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40023c00 	.word	0x40023c00

08003374 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003374:	2300      	movs	r3, #0
 8003376:	2b0f      	cmp	r3, #15
 8003378:	f200 80c5 	bhi.w	8003506 <HAL_GPIO_Init+0x192>
{
 800337c:	b4f0      	push	{r4, r5, r6, r7}
 800337e:	b082      	sub	sp, #8
 8003380:	e039      	b.n	80033f6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003382:	2204      	movs	r2, #4
 8003384:	e000      	b.n	8003388 <HAL_GPIO_Init+0x14>
 8003386:	2200      	movs	r2, #0
 8003388:	40b2      	lsls	r2, r6
 800338a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800338c:	3402      	adds	r4, #2
 800338e:	4e5e      	ldr	r6, [pc, #376]	; (8003508 <HAL_GPIO_Init+0x194>)
 8003390:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003394:	4a5d      	ldr	r2, [pc, #372]	; (800350c <HAL_GPIO_Init+0x198>)
 8003396:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003398:	43ea      	mvns	r2, r5
 800339a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800339e:	684f      	ldr	r7, [r1, #4]
 80033a0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80033a4:	d001      	beq.n	80033aa <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80033a6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80033aa:	4c58      	ldr	r4, [pc, #352]	; (800350c <HAL_GPIO_Init+0x198>)
 80033ac:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80033ae:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80033b0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b4:	684f      	ldr	r7, [r1, #4]
 80033b6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80033ba:	d001      	beq.n	80033c0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80033bc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80033c0:	4c52      	ldr	r4, [pc, #328]	; (800350c <HAL_GPIO_Init+0x198>)
 80033c2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033c4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ca:	684f      	ldr	r7, [r1, #4]
 80033cc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80033d0:	d001      	beq.n	80033d6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80033d2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80033d6:	4c4d      	ldr	r4, [pc, #308]	; (800350c <HAL_GPIO_Init+0x198>)
 80033d8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80033da:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80033dc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033de:	684e      	ldr	r6, [r1, #4]
 80033e0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80033e4:	d001      	beq.n	80033ea <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80033e6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80033ea:	4c48      	ldr	r4, [pc, #288]	; (800350c <HAL_GPIO_Init+0x198>)
 80033ec:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	3301      	adds	r3, #1
 80033f0:	2b0f      	cmp	r3, #15
 80033f2:	f200 8085 	bhi.w	8003500 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 80033f6:	2201      	movs	r2, #1
 80033f8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fa:	680c      	ldr	r4, [r1, #0]
 80033fc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003400:	42aa      	cmp	r2, r5
 8003402:	d1f4      	bne.n	80033ee <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003404:	684c      	ldr	r4, [r1, #4]
 8003406:	2c02      	cmp	r4, #2
 8003408:	d001      	beq.n	800340e <HAL_GPIO_Init+0x9a>
 800340a:	2c12      	cmp	r4, #18
 800340c:	d110      	bne.n	8003430 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 800340e:	08de      	lsrs	r6, r3, #3
 8003410:	3608      	adds	r6, #8
 8003412:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003416:	f003 0407 	and.w	r4, r3, #7
 800341a:	00a7      	lsls	r7, r4, #2
 800341c:	240f      	movs	r4, #15
 800341e:	40bc      	lsls	r4, r7
 8003420:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003424:	690c      	ldr	r4, [r1, #16]
 8003426:	40bc      	lsls	r4, r7
 8003428:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 800342c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003430:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003432:	005f      	lsls	r7, r3, #1
 8003434:	2603      	movs	r6, #3
 8003436:	40be      	lsls	r6, r7
 8003438:	43f6      	mvns	r6, r6
 800343a:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800343e:	684c      	ldr	r4, [r1, #4]
 8003440:	f004 0403 	and.w	r4, r4, #3
 8003444:	40bc      	lsls	r4, r7
 8003446:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800344a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800344c:	684c      	ldr	r4, [r1, #4]
 800344e:	f104 3cff 	add.w	ip, r4, #4294967295
 8003452:	f1bc 0f01 	cmp.w	ip, #1
 8003456:	d903      	bls.n	8003460 <HAL_GPIO_Init+0xec>
 8003458:	2c11      	cmp	r4, #17
 800345a:	d001      	beq.n	8003460 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800345c:	2c12      	cmp	r4, #18
 800345e:	d110      	bne.n	8003482 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8003460:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003462:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003466:	68cc      	ldr	r4, [r1, #12]
 8003468:	40bc      	lsls	r4, r7
 800346a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800346e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003470:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003472:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003476:	684c      	ldr	r4, [r1, #4]
 8003478:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800347c:	409c      	lsls	r4, r3
 800347e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8003480:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003482:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003484:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003486:	688a      	ldr	r2, [r1, #8]
 8003488:	40ba      	lsls	r2, r7
 800348a:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 800348c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800348e:	684a      	ldr	r2, [r1, #4]
 8003490:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003494:	d0ab      	beq.n	80033ee <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003496:	2200      	movs	r2, #0
 8003498:	9201      	str	r2, [sp, #4]
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_GPIO_Init+0x19c>)
 800349c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800349e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80034a2:	6454      	str	r4, [r2, #68]	; 0x44
 80034a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80034aa:	9201      	str	r2, [sp, #4]
 80034ac:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80034ae:	089c      	lsrs	r4, r3, #2
 80034b0:	1ca6      	adds	r6, r4, #2
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <HAL_GPIO_Init+0x194>)
 80034b4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	0096      	lsls	r6, r2, #2
 80034be:	220f      	movs	r2, #15
 80034c0:	40b2      	lsls	r2, r6
 80034c2:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034c6:	4a13      	ldr	r2, [pc, #76]	; (8003514 <HAL_GPIO_Init+0x1a0>)
 80034c8:	4290      	cmp	r0, r2
 80034ca:	f43f af5c 	beq.w	8003386 <HAL_GPIO_Init+0x12>
 80034ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034d2:	4290      	cmp	r0, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_GPIO_Init+0x180>
 80034d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034da:	4290      	cmp	r0, r2
 80034dc:	d00c      	beq.n	80034f8 <HAL_GPIO_Init+0x184>
 80034de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034e2:	4290      	cmp	r0, r2
 80034e4:	d00a      	beq.n	80034fc <HAL_GPIO_Init+0x188>
 80034e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034ea:	4290      	cmp	r0, r2
 80034ec:	f43f af49 	beq.w	8003382 <HAL_GPIO_Init+0xe>
 80034f0:	2207      	movs	r2, #7
 80034f2:	e749      	b.n	8003388 <HAL_GPIO_Init+0x14>
 80034f4:	2201      	movs	r2, #1
 80034f6:	e747      	b.n	8003388 <HAL_GPIO_Init+0x14>
 80034f8:	2202      	movs	r2, #2
 80034fa:	e745      	b.n	8003388 <HAL_GPIO_Init+0x14>
 80034fc:	2203      	movs	r2, #3
 80034fe:	e743      	b.n	8003388 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003500:	b002      	add	sp, #8
 8003502:	bcf0      	pop	{r4, r5, r6, r7}
 8003504:	4770      	bx	lr
 8003506:	4770      	bx	lr
 8003508:	40013800 	.word	0x40013800
 800350c:	40013c00 	.word	0x40013c00
 8003510:	40023800 	.word	0x40023800
 8003514:	40020000 	.word	0x40020000

08003518 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003518:	b912      	cbnz	r2, 8003520 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800351a:	0409      	lsls	r1, r1, #16
 800351c:	6181      	str	r1, [r0, #24]
  }
}
 800351e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003520:	6181      	str	r1, [r0, #24]
 8003522:	4770      	bx	lr

08003524 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003524:	6943      	ldr	r3, [r0, #20]
 8003526:	ea31 0303 	bics.w	r3, r1, r3
 800352a:	d001      	beq.n	8003530 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800352c:	6181      	str	r1, [r0, #24]
  }
}
 800352e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003530:	0409      	lsls	r1, r1, #16
 8003532:	6181      	str	r1, [r0, #24]
 8003534:	4770      	bx	lr
	...

08003538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003538:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	4203      	tst	r3, r0
 8003540:	d100      	bne.n	8003544 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003542:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003546:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003548:	f005 f8de 	bl	8008708 <HAL_GPIO_EXTI_Callback>
}
 800354c:	e7f9      	b.n	8003542 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800354e:	bf00      	nop
 8003550:	40013c00 	.word	0x40013c00

08003554 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003554:	6803      	ldr	r3, [r0, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800355c:	d011      	beq.n	8003582 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003562:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003564:	2300      	movs	r3, #0
 8003566:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003568:	2220      	movs	r2, #32
 800356a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003572:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003574:	f042 0204 	orr.w	r2, r2, #4
 8003578:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 800357e:	2001      	movs	r0, #1
 8003580:	4770      	bx	lr
  }
  return HAL_OK;
 8003582:	2000      	movs	r0, #0
}
 8003584:	4770      	bx	lr

08003586 <I2C_WaitOnFlagUntilTimeout>:
{
 8003586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003588:	4606      	mov	r6, r0
 800358a:	460c      	mov	r4, r1
 800358c:	4617      	mov	r7, r2
 800358e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003590:	e022      	b.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7ff fd31 	bl	8002ff8 <HAL_GetTick>
 8003596:	9b06      	ldr	r3, [sp, #24]
 8003598:	1ac0      	subs	r0, r0, r3
 800359a:	42a8      	cmp	r0, r5
 800359c:	d800      	bhi.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x1a>
 800359e:	b9dd      	cbnz	r5, 80035d8 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035a4:	2220      	movs	r2, #32
 80035a6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035aa:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ae:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80035b0:	f042 0220 	orr.w	r2, r2, #32
 80035b4:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80035b6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80035ba:	2001      	movs	r0, #1
 80035bc:	e01a      	b.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035be:	6833      	ldr	r3, [r6, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	ea24 0303 	bic.w	r3, r4, r3
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	429f      	cmp	r7, r3
 80035d0:	d10f      	bne.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80035d6:	d1dc      	bne.n	8003592 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d8:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d0ee      	beq.n	80035be <I2C_WaitOnFlagUntilTimeout+0x38>
 80035e0:	6833      	ldr	r3, [r6, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	ea24 0303 	bic.w	r3, r4, r3
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	e7ed      	b.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 80035f2:	2000      	movs	r0, #0
}
 80035f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80035f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f8:	4604      	mov	r4, r0
 80035fa:	460d      	mov	r5, r1
 80035fc:	4616      	mov	r6, r2
 80035fe:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003600:	e03c      	b.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003608:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003610:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003612:	2300      	movs	r3, #0
 8003614:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003616:	2220      	movs	r2, #32
 8003618:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003620:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003622:	f042 0204 	orr.w	r2, r2, #4
 8003626:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003628:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800362c:	2001      	movs	r0, #1
 800362e:	e033      	b.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003630:	f7ff fce2 	bl	8002ff8 <HAL_GetTick>
 8003634:	1bc0      	subs	r0, r0, r7
 8003636:	42b0      	cmp	r0, r6
 8003638:	d800      	bhi.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 800363a:	b9fe      	cbnz	r6, 800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800363c:	2300      	movs	r3, #0
 800363e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	2220      	movs	r2, #32
 8003642:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003646:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800364a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800364c:	f042 0220 	orr.w	r2, r2, #32
 8003650:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003652:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003656:	2001      	movs	r0, #1
 8003658:	e01e      	b.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	ea25 0303 	bic.w	r3, r5, r3
 8003662:	b29b      	uxth	r3, r3
 8003664:	3300      	adds	r3, #0
 8003666:	bf18      	it	ne
 8003668:	2301      	movne	r3, #1
 800366a:	b1a3      	cbz	r3, 8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003674:	d1c5      	bne.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8003676:	f1b6 3fff 	cmp.w	r6, #4294967295
 800367a:	d1d9      	bne.n	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800367c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8003680:	2b01      	cmp	r3, #1
 8003682:	d0ea      	beq.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	ea25 0303 	bic.w	r3, r5, r3
 800368c:	b29b      	uxth	r3, r3
 800368e:	3300      	adds	r3, #0
 8003690:	bf18      	it	ne
 8003692:	2301      	movne	r3, #1
 8003694:	e7e9      	b.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8003696:	2000      	movs	r0, #0
}
 8003698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800369c <I2C_MasterRequestWrite>:
{
 800369c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369e:	b083      	sub	sp, #12
 80036a0:	4604      	mov	r4, r0
 80036a2:	460f      	mov	r7, r1
 80036a4:	4615      	mov	r5, r2
 80036a6:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d00d      	beq.n	80036ca <I2C_MasterRequestWrite+0x2e>
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d00b      	beq.n	80036ca <I2C_MasterRequestWrite+0x2e>
 80036b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036b6:	d008      	beq.n	80036ca <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80036ba:	2b12      	cmp	r3, #18
 80036bc:	d10a      	bne.n	80036d4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036be:	6802      	ldr	r2, [r0, #0]
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e004      	b.n	80036d4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	6813      	ldr	r3, [r2, #0]
 80036ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d4:	9600      	str	r6, [sp, #0]
 80036d6:	462b      	mov	r3, r5
 80036d8:	2200      	movs	r2, #0
 80036da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036de:	4620      	mov	r0, r4
 80036e0:	f7ff ff51 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 80036e4:	bb18      	cbnz	r0, 800372e <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036e6:	6923      	ldr	r3, [r4, #16]
 80036e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ec:	d10d      	bne.n	800370a <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80036f4:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036f6:	4633      	mov	r3, r6
 80036f8:	462a      	mov	r2, r5
 80036fa:	4910      	ldr	r1, [pc, #64]	; (800373c <I2C_MasterRequestWrite+0xa0>)
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7ff ff7a 	bl	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	b1a0      	cbz	r0, 8003730 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e012      	b.n	8003730 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800370a:	11fb      	asrs	r3, r7, #7
 800370c:	6822      	ldr	r2, [r4, #0]
 800370e:	f003 0306 	and.w	r3, r3, #6
 8003712:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003716:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003718:	4633      	mov	r3, r6
 800371a:	462a      	mov	r2, r5
 800371c:	4908      	ldr	r1, [pc, #32]	; (8003740 <I2C_MasterRequestWrite+0xa4>)
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff ff69 	bl	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003724:	b938      	cbnz	r0, 8003736 <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	b2ff      	uxtb	r7, r7
 800372a:	611f      	str	r7, [r3, #16]
 800372c:	e7e3      	b.n	80036f6 <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	b003      	add	sp, #12
 8003734:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e7fa      	b.n	8003730 <I2C_MasterRequestWrite+0x94>
 800373a:	bf00      	nop
 800373c:	00010002 	.word	0x00010002
 8003740:	00010008 	.word	0x00010008

08003744 <I2C_MasterRequestRead>:
{
 8003744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	4604      	mov	r4, r0
 800374c:	460d      	mov	r5, r1
 800374e:	4616      	mov	r6, r2
 8003750:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003752:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003754:	6801      	ldr	r1, [r0, #0]
 8003756:	680b      	ldr	r3, [r1, #0]
 8003758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800375c:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800375e:	2a08      	cmp	r2, #8
 8003760:	d00d      	beq.n	800377e <I2C_MasterRequestRead+0x3a>
 8003762:	2a01      	cmp	r2, #1
 8003764:	d00b      	beq.n	800377e <I2C_MasterRequestRead+0x3a>
 8003766:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800376a:	d008      	beq.n	800377e <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800376c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800376e:	2b11      	cmp	r3, #17
 8003770:	d10a      	bne.n	8003788 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003772:	6802      	ldr	r2, [r0, #0]
 8003774:	6813      	ldr	r3, [r2, #0]
 8003776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e004      	b.n	8003788 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	6813      	ldr	r3, [r2, #0]
 8003782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003786:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003788:	9700      	str	r7, [sp, #0]
 800378a:	4633      	mov	r3, r6
 800378c:	2200      	movs	r2, #0
 800378e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff fef7 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 8003798:	2800      	cmp	r0, #0
 800379a:	d149      	bne.n	8003830 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800379c:	6923      	ldr	r3, [r4, #16]
 800379e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a2:	d10f      	bne.n	80037c4 <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	f045 0501 	orr.w	r5, r5, #1
 80037aa:	b2ed      	uxtb	r5, r5
 80037ac:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ae:	463b      	mov	r3, r7
 80037b0:	4632      	mov	r2, r6
 80037b2:	4923      	ldr	r1, [pc, #140]	; (8003840 <I2C_MasterRequestRead+0xfc>)
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff ff1e 	bl	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2800      	cmp	r0, #0
 80037be:	d038      	beq.n	8003832 <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e036      	b.n	8003832 <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037c4:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80037c8:	f008 0806 	and.w	r8, r8, #6
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80037d2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037d4:	463b      	mov	r3, r7
 80037d6:	4632      	mov	r2, r6
 80037d8:	491a      	ldr	r1, [pc, #104]	; (8003844 <I2C_MasterRequestRead+0x100>)
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff ff0b 	bl	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e0:	b108      	cbz	r0, 80037e6 <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e025      	b.n	8003832 <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	b2ed      	uxtb	r5, r5
 80037ea:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ec:	463b      	mov	r3, r7
 80037ee:	4632      	mov	r2, r6
 80037f0:	4913      	ldr	r1, [pc, #76]	; (8003840 <I2C_MasterRequestRead+0xfc>)
 80037f2:	4620      	mov	r0, r4
 80037f4:	f7ff feff 	bl	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f8:	b108      	cbz	r0, 80037fe <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e019      	b.n	8003832 <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fe:	2200      	movs	r2, #0
 8003800:	9203      	str	r2, [sp, #12]
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	6959      	ldr	r1, [r3, #20]
 8003806:	9103      	str	r1, [sp, #12]
 8003808:	6999      	ldr	r1, [r3, #24]
 800380a:	9103      	str	r1, [sp, #12]
 800380c:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003814:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003816:	9700      	str	r7, [sp, #0]
 8003818:	4633      	mov	r3, r6
 800381a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800381e:	4620      	mov	r0, r4
 8003820:	f7ff feb1 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 8003824:	b948      	cbnz	r0, 800383a <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003826:	6822      	ldr	r2, [r4, #0]
 8003828:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800382c:	6113      	str	r3, [r2, #16]
 800382e:	e7be      	b.n	80037ae <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
}
 8003832:	4618      	mov	r0, r3
 8003834:	b004      	add	sp, #16
 8003836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e7f9      	b.n	8003832 <I2C_MasterRequestRead+0xee>
 800383e:	bf00      	nop
 8003840:	00010002 	.word	0x00010002
 8003844:	00010008 	.word	0x00010008

08003848 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4604      	mov	r4, r0
 800384c:	460d      	mov	r5, r1
 800384e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003858:	d11c      	bne.n	8003894 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800385a:	4620      	mov	r0, r4
 800385c:	f7ff fe7a 	bl	8003554 <I2C_IsAcknowledgeFailed>
 8003860:	b9d0      	cbnz	r0, 8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003862:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003866:	d0f3      	beq.n	8003850 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003868:	f7ff fbc6 	bl	8002ff8 <HAL_GetTick>
 800386c:	1b80      	subs	r0, r0, r6
 800386e:	42a8      	cmp	r0, r5
 8003870:	d801      	bhi.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003872:	2d00      	cmp	r5, #0
 8003874:	d1ec      	bne.n	8003850 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003876:	2300      	movs	r3, #0
 8003878:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800387a:	2220      	movs	r2, #32
 800387c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003886:	f042 0220 	orr.w	r2, r2, #32
 800388a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800388c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003890:	2001      	movs	r0, #1
 8003892:	e000      	b.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003894:	2000      	movs	r0, #0
}
 8003896:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003898:	2001      	movs	r0, #1
 800389a:	e7fc      	b.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

0800389c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	4604      	mov	r4, r0
 80038a0:	460d      	mov	r5, r1
 80038a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f013 0f04 	tst.w	r3, #4
 80038ac:	d11c      	bne.n	80038e8 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff fe50 	bl	8003554 <I2C_IsAcknowledgeFailed>
 80038b4:	b9d0      	cbnz	r0, 80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80038b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80038ba:	d0f3      	beq.n	80038a4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038bc:	f7ff fb9c 	bl	8002ff8 <HAL_GetTick>
 80038c0:	1b80      	subs	r0, r0, r6
 80038c2:	42a8      	cmp	r0, r5
 80038c4:	d801      	bhi.n	80038ca <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d1ec      	bne.n	80038a4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ce:	2220      	movs	r2, #32
 80038d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038da:	f042 0220 	orr.w	r2, r2, #32
 80038de:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80038e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80038e4:	2001      	movs	r0, #1
 80038e6:	e000      	b.n	80038ea <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80038e8:	2000      	movs	r0, #0
}
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80038ec:	2001      	movs	r0, #1
 80038ee:	e7fc      	b.n	80038ea <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080038f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	4605      	mov	r5, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003900:	d129      	bne.n	8003956 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	f012 0f10 	tst.w	r2, #16
 8003908:	d115      	bne.n	8003936 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7ff fb75 	bl	8002ff8 <HAL_GetTick>
 800390e:	1b80      	subs	r0, r0, r6
 8003910:	42a0      	cmp	r0, r4
 8003912:	d801      	bhi.n	8003918 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8003914:	2c00      	cmp	r4, #0
 8003916:	d1ef      	bne.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003918:	2300      	movs	r3, #0
 800391a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800391c:	2220      	movs	r2, #32
 800391e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003922:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003926:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003928:	f042 0220 	orr.w	r2, r2, #32
 800392c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800392e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003932:	2001      	movs	r0, #1
}
 8003934:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003936:	f06f 0210 	mvn.w	r2, #16
 800393a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800393c:	2300      	movs	r3, #0
 800393e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003940:	2220      	movs	r2, #32
 8003942:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003946:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800394a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800394c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800394e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003952:	2001      	movs	r0, #1
 8003954:	e7ee      	b.n	8003934 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8003956:	2000      	movs	r0, #0
 8003958:	e7ec      	b.n	8003934 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

0800395c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800395c:	2800      	cmp	r0, #0
 800395e:	f000 80be 	beq.w	8003ade <HAL_I2C_Init+0x182>
{
 8003962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003964:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003966:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800396a:	2b00      	cmp	r3, #0
 800396c:	d06b      	beq.n	8003a46 <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800396e:	2324      	movs	r3, #36	; 0x24
 8003970:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003974:	6822      	ldr	r2, [r4, #0]
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800397e:	f000 fe8b 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003982:	6862      	ldr	r2, [r4, #4]
 8003984:	4b58      	ldr	r3, [pc, #352]	; (8003ae8 <HAL_I2C_Init+0x18c>)
 8003986:	429a      	cmp	r2, r3
 8003988:	d862      	bhi.n	8003a50 <HAL_I2C_Init+0xf4>
 800398a:	4b58      	ldr	r3, [pc, #352]	; (8003aec <HAL_I2C_Init+0x190>)
 800398c:	4298      	cmp	r0, r3
 800398e:	bf8c      	ite	hi
 8003990:	2300      	movhi	r3, #0
 8003992:	2301      	movls	r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	f040 80a4 	bne.w	8003ae2 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 800399a:	4b55      	ldr	r3, [pc, #340]	; (8003af0 <HAL_I2C_Init+0x194>)
 800399c:	fba3 2300 	umull	r2, r3, r3, r0
 80039a0:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a2:	6821      	ldr	r1, [r4, #0]
 80039a4:	684a      	ldr	r2, [r1, #4]
 80039a6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80039aa:	431a      	orrs	r2, r3
 80039ac:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ae:	6825      	ldr	r5, [r4, #0]
 80039b0:	6a2a      	ldr	r2, [r5, #32]
 80039b2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80039b6:	6866      	ldr	r6, [r4, #4]
 80039b8:	494b      	ldr	r1, [pc, #300]	; (8003ae8 <HAL_I2C_Init+0x18c>)
 80039ba:	428e      	cmp	r6, r1
 80039bc:	d84e      	bhi.n	8003a5c <HAL_I2C_Init+0x100>
 80039be:	3301      	adds	r3, #1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039c4:	6825      	ldr	r5, [r4, #0]
 80039c6:	69e9      	ldr	r1, [r5, #28]
 80039c8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80039cc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80039d0:	6863      	ldr	r3, [r4, #4]
 80039d2:	4a45      	ldr	r2, [pc, #276]	; (8003ae8 <HAL_I2C_Init+0x18c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d84b      	bhi.n	8003a70 <HAL_I2C_Init+0x114>
 80039d8:	3801      	subs	r0, #1
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e0:	3301      	adds	r3, #1
 80039e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	bf38      	it	cc
 80039ea:	2304      	movcc	r3, #4
 80039ec:	430b      	orrs	r3, r1
 80039ee:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039f0:	6821      	ldr	r1, [r4, #0]
 80039f2:	680b      	ldr	r3, [r1, #0]
 80039f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039f8:	69e2      	ldr	r2, [r4, #28]
 80039fa:	6a20      	ldr	r0, [r4, #32]
 80039fc:	4302      	orrs	r2, r0
 80039fe:	4313      	orrs	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a02:	6821      	ldr	r1, [r4, #0]
 8003a04:	688b      	ldr	r3, [r1, #8]
 8003a06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a0e:	6922      	ldr	r2, [r4, #16]
 8003a10:	68e0      	ldr	r0, [r4, #12]
 8003a12:	4302      	orrs	r2, r0
 8003a14:	4313      	orrs	r3, r2
 8003a16:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a18:	6821      	ldr	r1, [r4, #0]
 8003a1a:	68cb      	ldr	r3, [r1, #12]
 8003a1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a20:	6962      	ldr	r2, [r4, #20]
 8003a22:	69a0      	ldr	r0, [r4, #24]
 8003a24:	4302      	orrs	r2, r0
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003a2a:	6822      	ldr	r2, [r4, #0]
 8003a2c:	6813      	ldr	r3, [r2, #0]
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a34:	2000      	movs	r0, #0
 8003a36:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	2320      	movs	r3, #32
 8003a3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003a46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003a4a:	f004 ff53 	bl	80088f4 <HAL_I2C_MspInit>
 8003a4e:	e78e      	b.n	800396e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a50:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <HAL_I2C_Init+0x198>)
 8003a52:	4298      	cmp	r0, r3
 8003a54:	bf8c      	ite	hi
 8003a56:	2300      	movhi	r3, #0
 8003a58:	2301      	movls	r3, #1
 8003a5a:	e79b      	b.n	8003994 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a5c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	4924      	ldr	r1, [pc, #144]	; (8003af8 <HAL_I2C_Init+0x19c>)
 8003a66:	fba1 1303 	umull	r1, r3, r1, r3
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	e7a7      	b.n	80039c0 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a70:	68a2      	ldr	r2, [r4, #8]
 8003a72:	b9ba      	cbnz	r2, 8003aa4 <HAL_I2C_Init+0x148>
 8003a74:	1e46      	subs	r6, r0, #1
 8003a76:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8003a7a:	fbb6 f6f7 	udiv	r6, r6, r7
 8003a7e:	3601      	adds	r6, #1
 8003a80:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003a84:	fab6 f686 	clz	r6, r6
 8003a88:	0976      	lsrs	r6, r6, #5
 8003a8a:	bb36      	cbnz	r6, 8003ada <HAL_I2C_Init+0x17e>
 8003a8c:	b9c2      	cbnz	r2, 8003ac0 <HAL_I2C_Init+0x164>
 8003a8e:	3801      	subs	r0, #1
 8003a90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003a9e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003aa2:	e7a3      	b.n	80039ec <HAL_I2C_Init+0x90>
 8003aa4:	1e46      	subs	r6, r0, #1
 8003aa6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003aaa:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003aae:	fbb6 f6f7 	udiv	r6, r6, r7
 8003ab2:	3601      	adds	r6, #1
 8003ab4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003ab8:	fab6 f686 	clz	r6, r6
 8003abc:	0976      	lsrs	r6, r6, #5
 8003abe:	e7e4      	b.n	8003a8a <HAL_I2C_Init+0x12e>
 8003ac0:	3801      	subs	r0, #1
 8003ac2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ac6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003aca:	fbb0 f2f3 	udiv	r2, r0, r3
 8003ace:	3201      	adds	r2, #1
 8003ad0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003ad4:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003ad8:	e788      	b.n	80039ec <HAL_I2C_Init+0x90>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e786      	b.n	80039ec <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003ade:	2001      	movs	r0, #1
}
 8003ae0:	4770      	bx	lr
    return HAL_ERROR;
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	e7ae      	b.n	8003a44 <HAL_I2C_Init+0xe8>
 8003ae6:	bf00      	nop
 8003ae8:	000186a0 	.word	0x000186a0
 8003aec:	001e847f 	.word	0x001e847f
 8003af0:	431bde83 	.word	0x431bde83
 8003af4:	003d08ff 	.word	0x003d08ff
 8003af8:	10624dd3 	.word	0x10624dd3

08003afc <HAL_I2C_Master_Transmit>:
{
 8003afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	4604      	mov	r4, r0
 8003b04:	460e      	mov	r6, r1
 8003b06:	4690      	mov	r8, r2
 8003b08:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003b0a:	f7ff fa75 	bl	8002ff8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d004      	beq.n	8003b22 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8003b18:	2602      	movs	r6, #2
}
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	b004      	add	sp, #16
 8003b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b22:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b24:	9000      	str	r0, [sp, #0]
 8003b26:	2319      	movs	r3, #25
 8003b28:	2201      	movs	r2, #1
 8003b2a:	494f      	ldr	r1, [pc, #316]	; (8003c68 <HAL_I2C_Master_Transmit+0x16c>)
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff fd2a 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	f040 8091 	bne.w	8003c5a <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8003b38:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	f000 808e 	beq.w	8003c5e <HAL_I2C_Master_Transmit+0x162>
 8003b42:	2301      	movs	r3, #1
 8003b44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	f012 0f01 	tst.w	r2, #1
 8003b50:	d103      	bne.n	8003b5a <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b62:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b64:	2321      	movs	r3, #33	; 0x21
 8003b66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b70:	2300      	movs	r3, #0
 8003b72:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003b74:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b78:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b7c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <HAL_I2C_Master_Transmit+0x170>)
 8003b80:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b82:	462b      	mov	r3, r5
 8003b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b86:	4631      	mov	r1, r6
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f7ff fd87 	bl	800369c <I2C_MasterRequestWrite>
 8003b8e:	4606      	mov	r6, r0
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d166      	bne.n	8003c62 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b94:	2300      	movs	r3, #0
 8003b96:	9303      	str	r3, [sp, #12]
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	9203      	str	r2, [sp, #12]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	9303      	str	r3, [sp, #12]
 8003ba2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003ba4:	e012      	b.n	8003bcc <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d001      	beq.n	8003bb0 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8003bac:	2601      	movs	r6, #1
 8003bae:	e7b4      	b.n	8003b1a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	6813      	ldr	r3, [r2, #0]
 8003bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb8:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003bba:	2601      	movs	r6, #1
 8003bbc:	e7ad      	b.n	8003b1a <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bbe:	462a      	mov	r2, r5
 8003bc0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f7ff fe6a 	bl	800389c <I2C_WaitOnBTFFlagUntilTimeout>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d12c      	bne.n	8003c26 <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8003bcc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d035      	beq.n	8003c3e <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd2:	462a      	mov	r2, r5
 8003bd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff fe36 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d1e2      	bne.n	8003ba6 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003be8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003bea:	1c4b      	adds	r3, r1, #1
 8003bec:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003bee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003bf6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	6950      	ldr	r0, [r2, #20]
 8003c02:	f010 0f04 	tst.w	r0, #4
 8003c06:	d0da      	beq.n	8003bbe <HAL_I2C_Master_Transmit+0xc2>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0d8      	beq.n	8003bbe <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c0c:	784b      	ldrb	r3, [r1, #1]
 8003c0e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c12:	3301      	adds	r3, #1
 8003c14:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003c16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003c1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c20:	3b01      	subs	r3, #1
 8003c22:	8523      	strh	r3, [r4, #40]	; 0x28
 8003c24:	e7cb      	b.n	8003bbe <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d001      	beq.n	8003c30 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8003c2c:	2601      	movs	r6, #1
 8003c2e:	e774      	b.n	8003b1a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c30:	6822      	ldr	r2, [r4, #0]
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c38:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003c3a:	2601      	movs	r6, #1
 8003c3c:	e76d      	b.n	8003b1a <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	6822      	ldr	r2, [r4, #0]
 8003c40:	6813      	ldr	r3, [r2, #0]
 8003c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c46:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	2320      	movs	r3, #32
 8003c4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003c54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003c58:	e75f      	b.n	8003b1a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8003c5a:	2602      	movs	r6, #2
 8003c5c:	e75d      	b.n	8003b1a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003c5e:	2602      	movs	r6, #2
 8003c60:	e75b      	b.n	8003b1a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8003c62:	2601      	movs	r6, #1
 8003c64:	e759      	b.n	8003b1a <HAL_I2C_Master_Transmit+0x1e>
 8003c66:	bf00      	nop
 8003c68:	00100002 	.word	0x00100002
 8003c6c:	ffff0000 	.word	0xffff0000

08003c70 <HAL_I2C_Master_Receive>:
{
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	4604      	mov	r4, r0
 8003c78:	460e      	mov	r6, r1
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003c7e:	f7ff f9bb 	bl	8002ff8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c82:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d004      	beq.n	8003c96 <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8003c8c:	2602      	movs	r6, #2
}
 8003c8e:	4630      	mov	r0, r6
 8003c90:	b006      	add	sp, #24
 8003c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c96:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c98:	9000      	str	r0, [sp, #0]
 8003c9a:	2319      	movs	r3, #25
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	499e      	ldr	r1, [pc, #632]	; (8003f18 <HAL_I2C_Master_Receive+0x2a8>)
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f7ff fc70 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	f040 8134 	bne.w	8003f14 <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 8003cac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	f000 8137 	beq.w	8003f24 <HAL_I2C_Master_Receive+0x2b4>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	f012 0f01 	tst.w	r2, #1
 8003cc4:	d103      	bne.n	8003cce <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cce:	6822      	ldr	r2, [r4, #0]
 8003cd0:	6813      	ldr	r3, [r2, #0]
 8003cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cd6:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003cd8:	2322      	movs	r3, #34	; 0x22
 8003cda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cde:	2310      	movs	r3, #16
 8003ce0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003ce8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cec:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cf0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf2:	4b8a      	ldr	r3, [pc, #552]	; (8003f1c <HAL_I2C_Master_Receive+0x2ac>)
 8003cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cfa:	4631      	mov	r1, r6
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7ff fd21 	bl	8003744 <I2C_MasterRequestRead>
 8003d02:	4606      	mov	r6, r0
 8003d04:	2800      	cmp	r0, #0
 8003d06:	f040 810f 	bne.w	8003f28 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 8003d0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d0c:	b95b      	cbnz	r3, 8003d26 <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	9302      	str	r3, [sp, #8]
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	9202      	str	r2, [sp, #8]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	9202      	str	r2, [sp, #8]
 8003d1a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e077      	b.n	8003e16 <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d00f      	beq.n	8003d4a <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d01f      	beq.n	8003d6e <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	6813      	ldr	r3, [r2, #0]
 8003d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d36:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9305      	str	r3, [sp, #20]
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	9205      	str	r2, [sp, #20]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	9305      	str	r3, [sp, #20]
 8003d46:	9b05      	ldr	r3, [sp, #20]
 8003d48:	e065      	b.n	8003e16 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	6813      	ldr	r3, [r2, #0]
 8003d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d52:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d54:	2300      	movs	r3, #0
 8003d56:	9303      	str	r3, [sp, #12]
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	9203      	str	r2, [sp, #12]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	9203      	str	r2, [sp, #12]
 8003d62:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e053      	b.n	8003e16 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d76:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d78:	6822      	ldr	r2, [r4, #0]
 8003d7a:	6813      	ldr	r3, [r2, #0]
 8003d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d80:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	9304      	str	r3, [sp, #16]
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	9204      	str	r2, [sp, #16]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	9304      	str	r3, [sp, #16]
 8003d90:	9b04      	ldr	r3, [sp, #16]
 8003d92:	e040      	b.n	8003e16 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d94:	462a      	mov	r2, r5
 8003d96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f7ff fda9 	bl	80038f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	f040 80c4 	bne.w	8003f2c <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003daa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dae:	3301      	adds	r3, #1
 8003db0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003db2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003db4:	3b01      	subs	r3, #1
 8003db6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003db8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003dc0:	e029      	b.n	8003e16 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dc2:	9500      	str	r5, [sp, #0]
 8003dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4955      	ldr	r1, [pc, #340]	; (8003f20 <HAL_I2C_Master_Receive+0x2b0>)
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f7ff fbdb 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	f040 80ad 	bne.w	8003f30 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	6813      	ldr	r3, [r2, #0]
 8003dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dde:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003de6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003de8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003dea:	1c53      	adds	r3, r2, #1
 8003dec:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003dee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003df4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e04:	3301      	adds	r3, #1
 8003e06:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003e08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003e0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d072      	beq.n	8003f02 <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d849      	bhi.n	8003eb4 <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d0b7      	beq.n	8003d94 <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d0cc      	beq.n	8003dc2 <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e28:	9500      	str	r5, [sp, #0]
 8003e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	493c      	ldr	r1, [pc, #240]	; (8003f20 <HAL_I2C_Master_Receive+0x2b0>)
 8003e30:	4620      	mov	r0, r4
 8003e32:	f7ff fba8 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d17c      	bne.n	8003f34 <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	6813      	ldr	r3, [r2, #0]
 8003e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e42:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e4a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e4e:	3301      	adds	r3, #1
 8003e50:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003e52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e54:	3b01      	subs	r3, #1
 8003e56:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003e58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e60:	9500      	str	r5, [sp, #0]
 8003e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e64:	2200      	movs	r2, #0
 8003e66:	492e      	ldr	r1, [pc, #184]	; (8003f20 <HAL_I2C_Master_Receive+0x2b0>)
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f7ff fb8c 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d162      	bne.n	8003f38 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e72:	6822      	ldr	r2, [r4, #0]
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e82:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003e84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e86:	1c53      	adds	r3, r2, #1
 8003e88:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003e8a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003e90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003ea4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003eaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003eb2:	e7b0      	b.n	8003e16 <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb4:	462a      	mov	r2, r5
 8003eb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f7ff fd19 	bl	80038f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d13c      	bne.n	8003f3c <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ec8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003eca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ecc:	1c53      	adds	r3, r2, #1
 8003ece:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003ed0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	6959      	ldr	r1, [r3, #20]
 8003ee2:	f011 0f04 	tst.w	r1, #4
 8003ee6:	d096      	beq.n	8003e16 <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eee:	3301      	adds	r3, #1
 8003ef0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003ef2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003ef8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003f00:	e789      	b.n	8003e16 <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f02:	2320      	movs	r3, #32
 8003f04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003f0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003f12:	e6bc      	b.n	8003c8e <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 8003f14:	2602      	movs	r6, #2
 8003f16:	e6ba      	b.n	8003c8e <HAL_I2C_Master_Receive+0x1e>
 8003f18:	00100002 	.word	0x00100002
 8003f1c:	ffff0000 	.word	0xffff0000
 8003f20:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8003f24:	2602      	movs	r6, #2
 8003f26:	e6b2      	b.n	8003c8e <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8003f28:	2601      	movs	r6, #1
 8003f2a:	e6b0      	b.n	8003c8e <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003f2c:	2601      	movs	r6, #1
 8003f2e:	e6ae      	b.n	8003c8e <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003f30:	2601      	movs	r6, #1
 8003f32:	e6ac      	b.n	8003c8e <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003f34:	2601      	movs	r6, #1
 8003f36:	e6aa      	b.n	8003c8e <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003f38:	2601      	movs	r6, #1
 8003f3a:	e6a8      	b.n	8003c8e <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8003f3c:	2601      	movs	r6, #1
 8003f3e:	e6a6      	b.n	8003c8e <HAL_I2C_Master_Receive+0x1e>

08003f40 <HAL_I2C_IsDeviceReady>:
{
 8003f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f44:	b085      	sub	sp, #20
 8003f46:	4604      	mov	r4, r0
 8003f48:	4688      	mov	r8, r1
 8003f4a:	4691      	mov	r9, r2
 8003f4c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003f4e:	f7ff f853 	bl	8002ff8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f52:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d004      	beq.n	8003f66 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	b005      	add	sp, #20
 8003f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f66:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f68:	9000      	str	r0, [sp, #0]
 8003f6a:	2319      	movs	r3, #25
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4954      	ldr	r1, [pc, #336]	; (80040c0 <HAL_I2C_IsDeviceReady+0x180>)
 8003f70:	4620      	mov	r0, r4
 8003f72:	f7ff fb08 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	f040 8097 	bne.w	80040aa <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 8003f7c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	f000 8094 	beq.w	80040ae <HAL_I2C_IsDeviceReady+0x16e>
 8003f86:	2301      	movs	r3, #1
 8003f88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	f012 0f01 	tst.w	r2, #1
 8003f94:	d103      	bne.n	8003f9e <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	6813      	ldr	r3, [r2, #0]
 8003fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa8:	2324      	movs	r3, #36	; 0x24
 8003faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fb2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003fb6:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8003fb8:	2701      	movs	r7, #1
 8003fba:	e034      	b.n	8004026 <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fbc:	23a0      	movs	r3, #160	; 0xa0
 8003fbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fca:	6959      	ldr	r1, [r3, #20]
 8003fcc:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fd0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fd8:	d009      	beq.n	8003fee <HAL_I2C_IsDeviceReady+0xae>
 8003fda:	b942      	cbnz	r2, 8003fee <HAL_I2C_IsDeviceReady+0xae>
 8003fdc:	b939      	cbnz	r1, 8003fee <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	f7ff f80b 	bl	8002ff8 <HAL_GetTick>
 8003fe2:	1b80      	subs	r0, r0, r6
 8003fe4:	42a8      	cmp	r0, r5
 8003fe6:	d8e9      	bhi.n	8003fbc <HAL_I2C_IsDeviceReady+0x7c>
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	d1ea      	bne.n	8003fc2 <HAL_I2C_IsDeviceReady+0x82>
 8003fec:	e7e6      	b.n	8003fbc <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	f012 0f02 	tst.w	r2, #2
 8003ffc:	d131      	bne.n	8004062 <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004004:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800400c:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800400e:	9600      	str	r6, [sp, #0]
 8004010:	2319      	movs	r3, #25
 8004012:	2201      	movs	r2, #1
 8004014:	492a      	ldr	r1, [pc, #168]	; (80040c0 <HAL_I2C_IsDeviceReady+0x180>)
 8004016:	4620      	mov	r0, r4
 8004018:	f7ff fab5 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 800401c:	2800      	cmp	r0, #0
 800401e:	d14c      	bne.n	80040ba <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8004020:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8004022:	454f      	cmp	r7, r9
 8004024:	d239      	bcs.n	800409a <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	6813      	ldr	r3, [r2, #0]
 800402a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402e:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004030:	9600      	str	r6, [sp, #0]
 8004032:	462b      	mov	r3, r5
 8004034:	2200      	movs	r2, #0
 8004036:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800403a:	4620      	mov	r0, r4
 800403c:	f7ff faa3 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 8004040:	2800      	cmp	r0, #0
 8004042:	d136      	bne.n	80040b2 <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 800404a:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 800404c:	f7fe ffd4 	bl	8002ff8 <HAL_GetTick>
 8004050:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800405a:	6959      	ldr	r1, [r3, #20]
 800405c:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004060:	e7b6      	b.n	8003fd0 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004068:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	9303      	str	r3, [sp, #12]
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	9203      	str	r2, [sp, #12]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	9303      	str	r3, [sp, #12]
 8004078:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800407a:	9600      	str	r6, [sp, #0]
 800407c:	2319      	movs	r3, #25
 800407e:	2201      	movs	r2, #1
 8004080:	490f      	ldr	r1, [pc, #60]	; (80040c0 <HAL_I2C_IsDeviceReady+0x180>)
 8004082:	4620      	mov	r0, r4
 8004084:	f7ff fa7f 	bl	8003586 <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	b9a0      	cbnz	r0, 80040b6 <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 800408c:	2220      	movs	r2, #32
 800408e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8004092:	2200      	movs	r2, #0
 8004094:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8004098:	e761      	b.n	8003f5e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 800409a:	2320      	movs	r3, #32
 800409c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80040a0:	2300      	movs	r3, #0
 80040a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e759      	b.n	8003f5e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
 80040ac:	e757      	b.n	8003f5e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80040ae:	2302      	movs	r3, #2
 80040b0:	e755      	b.n	8003f5e <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e753      	b.n	8003f5e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e751      	b.n	8003f5e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e74f      	b.n	8003f5e <HAL_I2C_IsDeviceReady+0x1e>
 80040be:	bf00      	nop
 80040c0:	00100002 	.word	0x00100002

080040c4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040c4:	2800      	cmp	r0, #0
 80040c6:	f000 81bb 	beq.w	8004440 <HAL_RCC_OscConfig+0x37c>
{
 80040ca:	b570      	push	{r4, r5, r6, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d0:	6803      	ldr	r3, [r0, #0]
 80040d2:	f013 0f01 	tst.w	r3, #1
 80040d6:	d03b      	beq.n	8004150 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d8:	4ba7      	ldr	r3, [pc, #668]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d02c      	beq.n	800413e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e4:	4ba4      	ldr	r3, [pc, #656]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d021      	beq.n	8004134 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f0:	6863      	ldr	r3, [r4, #4]
 80040f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f6:	d04f      	beq.n	8004198 <HAL_RCC_OscConfig+0xd4>
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d052      	beq.n	80041a4 <HAL_RCC_OscConfig+0xe0>
 80040fe:	4b9e      	ldr	r3, [pc, #632]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800410e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004110:	6863      	ldr	r3, [r4, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d050      	beq.n	80041b8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fe ff6f 	bl	8002ff8 <HAL_GetTick>
 800411a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411c:	4b96      	ldr	r3, [pc, #600]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004124:	d114      	bne.n	8004150 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004126:	f7fe ff67 	bl	8002ff8 <HAL_GetTick>
 800412a:	1b40      	subs	r0, r0, r5
 800412c:	2864      	cmp	r0, #100	; 0x64
 800412e:	d9f5      	bls.n	800411c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004130:	2003      	movs	r0, #3
 8004132:	e18a      	b.n	800444a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004134:	4b90      	ldr	r3, [pc, #576]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800413c:	d0d8      	beq.n	80040f0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413e:	4b8e      	ldr	r3, [pc, #568]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004146:	d003      	beq.n	8004150 <HAL_RCC_OscConfig+0x8c>
 8004148:	6863      	ldr	r3, [r4, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 817a 	beq.w	8004444 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	f013 0f02 	tst.w	r3, #2
 8004156:	d055      	beq.n	8004204 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004158:	4b87      	ldr	r3, [pc, #540]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f013 0f0c 	tst.w	r3, #12
 8004160:	d03e      	beq.n	80041e0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004162:	4b85      	ldr	r3, [pc, #532]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800416a:	2b08      	cmp	r3, #8
 800416c:	d033      	beq.n	80041d6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800416e:	68e3      	ldr	r3, [r4, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d068      	beq.n	8004246 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004174:	4b81      	ldr	r3, [pc, #516]	; (800437c <HAL_RCC_OscConfig+0x2b8>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fe ff3d 	bl	8002ff8 <HAL_GetTick>
 800417e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f013 0f02 	tst.w	r3, #2
 8004188:	d154      	bne.n	8004234 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418a:	f7fe ff35 	bl	8002ff8 <HAL_GetTick>
 800418e:	1b40      	subs	r0, r0, r5
 8004190:	2802      	cmp	r0, #2
 8004192:	d9f5      	bls.n	8004180 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004194:	2003      	movs	r0, #3
 8004196:	e158      	b.n	800444a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004198:	4a77      	ldr	r2, [pc, #476]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e7b5      	b.n	8004110 <HAL_RCC_OscConfig+0x4c>
 80041a4:	4b74      	ldr	r3, [pc, #464]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e7ab      	b.n	8004110 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80041b8:	f7fe ff1e 	bl	8002ff8 <HAL_GetTick>
 80041bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041be:	4b6e      	ldr	r3, [pc, #440]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80041c6:	d0c3      	beq.n	8004150 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c8:	f7fe ff16 	bl	8002ff8 <HAL_GetTick>
 80041cc:	1b40      	subs	r0, r0, r5
 80041ce:	2864      	cmp	r0, #100	; 0x64
 80041d0:	d9f5      	bls.n	80041be <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80041d2:	2003      	movs	r0, #3
 80041d4:	e139      	b.n	800444a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d6:	4b68      	ldr	r3, [pc, #416]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80041de:	d1c6      	bne.n	800416e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e0:	4b65      	ldr	r3, [pc, #404]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f013 0f02 	tst.w	r3, #2
 80041e8:	d004      	beq.n	80041f4 <HAL_RCC_OscConfig+0x130>
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80041f0:	2001      	movs	r0, #1
 80041f2:	e12a      	b.n	800444a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f4:	4a60      	ldr	r2, [pc, #384]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80041fc:	6921      	ldr	r1, [r4, #16]
 80041fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004202:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	f013 0f08 	tst.w	r3, #8
 800420a:	d040      	beq.n	800428e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800420c:	6963      	ldr	r3, [r4, #20]
 800420e:	b363      	cbz	r3, 800426a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004210:	4b5b      	ldr	r3, [pc, #364]	; (8004380 <HAL_RCC_OscConfig+0x2bc>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004216:	f7fe feef 	bl	8002ff8 <HAL_GetTick>
 800421a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421c:	4b56      	ldr	r3, [pc, #344]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 800421e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004220:	f013 0f02 	tst.w	r3, #2
 8004224:	d133      	bne.n	800428e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004226:	f7fe fee7 	bl	8002ff8 <HAL_GetTick>
 800422a:	1b40      	subs	r0, r0, r5
 800422c:	2802      	cmp	r0, #2
 800422e:	d9f5      	bls.n	800421c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004230:	2003      	movs	r0, #3
 8004232:	e10a      	b.n	800444a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004234:	4a50      	ldr	r2, [pc, #320]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800423c:	6921      	ldr	r1, [r4, #16]
 800423e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	e7de      	b.n	8004204 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8004246:	4b4d      	ldr	r3, [pc, #308]	; (800437c <HAL_RCC_OscConfig+0x2b8>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800424c:	f7fe fed4 	bl	8002ff8 <HAL_GetTick>
 8004250:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	4b49      	ldr	r3, [pc, #292]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f013 0f02 	tst.w	r3, #2
 800425a:	d0d3      	beq.n	8004204 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425c:	f7fe fecc 	bl	8002ff8 <HAL_GetTick>
 8004260:	1b40      	subs	r0, r0, r5
 8004262:	2802      	cmp	r0, #2
 8004264:	d9f5      	bls.n	8004252 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8004266:	2003      	movs	r0, #3
 8004268:	e0ef      	b.n	800444a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426a:	4b45      	ldr	r3, [pc, #276]	; (8004380 <HAL_RCC_OscConfig+0x2bc>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004270:	f7fe fec2 	bl	8002ff8 <HAL_GetTick>
 8004274:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004276:	4b40      	ldr	r3, [pc, #256]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427a:	f013 0f02 	tst.w	r3, #2
 800427e:	d006      	beq.n	800428e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004280:	f7fe feba 	bl	8002ff8 <HAL_GetTick>
 8004284:	1b40      	subs	r0, r0, r5
 8004286:	2802      	cmp	r0, #2
 8004288:	d9f5      	bls.n	8004276 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800428a:	2003      	movs	r0, #3
 800428c:	e0dd      	b.n	800444a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	f013 0f04 	tst.w	r3, #4
 8004294:	d079      	beq.n	800438a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004296:	4b38      	ldr	r3, [pc, #224]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800429e:	d133      	bne.n	8004308 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a0:	2300      	movs	r3, #0
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80042a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80042b8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ba:	4b32      	ldr	r3, [pc, #200]	; (8004384 <HAL_RCC_OscConfig+0x2c0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80042c2:	d023      	beq.n	800430c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c4:	68a3      	ldr	r3, [r4, #8]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d034      	beq.n	8004334 <HAL_RCC_OscConfig+0x270>
 80042ca:	2b05      	cmp	r3, #5
 80042cc:	d038      	beq.n	8004340 <HAL_RCC_OscConfig+0x27c>
 80042ce:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80042d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	671a      	str	r2, [r3, #112]	; 0x70
 80042d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042da:	f022 0204 	bic.w	r2, r2, #4
 80042de:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e0:	68a3      	ldr	r3, [r4, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d036      	beq.n	8004354 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fe fe87 	bl	8002ff8 <HAL_GetTick>
 80042ea:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ec:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	f013 0f02 	tst.w	r3, #2
 80042f4:	d148      	bne.n	8004388 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fe fe7f 	bl	8002ff8 <HAL_GetTick>
 80042fa:	1b80      	subs	r0, r0, r6
 80042fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004300:	4298      	cmp	r0, r3
 8004302:	d9f3      	bls.n	80042ec <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8004304:	2003      	movs	r0, #3
 8004306:	e0a0      	b.n	800444a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8004308:	2500      	movs	r5, #0
 800430a:	e7d6      	b.n	80042ba <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430c:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <HAL_RCC_OscConfig+0x2c0>)
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004314:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004316:	f7fe fe6f 	bl	8002ff8 <HAL_GetTick>
 800431a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <HAL_RCC_OscConfig+0x2c0>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004324:	d1ce      	bne.n	80042c4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fe fe67 	bl	8002ff8 <HAL_GetTick>
 800432a:	1b80      	subs	r0, r0, r6
 800432c:	2802      	cmp	r0, #2
 800432e:	d9f5      	bls.n	800431c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8004330:	2003      	movs	r0, #3
 8004332:	e08a      	b.n	800444a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004334:	4a10      	ldr	r2, [pc, #64]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004336:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6713      	str	r3, [r2, #112]	; 0x70
 800433e:	e7cf      	b.n	80042e0 <HAL_RCC_OscConfig+0x21c>
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 8004342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004344:	f042 0204 	orr.w	r2, r2, #4
 8004348:	671a      	str	r2, [r3, #112]	; 0x70
 800434a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800434c:	f042 0201 	orr.w	r2, r2, #1
 8004350:	671a      	str	r2, [r3, #112]	; 0x70
 8004352:	e7c5      	b.n	80042e0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004354:	f7fe fe50 	bl	8002ff8 <HAL_GetTick>
 8004358:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f013 0f02 	tst.w	r3, #2
 8004362:	d011      	beq.n	8004388 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004364:	f7fe fe48 	bl	8002ff8 <HAL_GetTick>
 8004368:	1b80      	subs	r0, r0, r6
 800436a:	f241 3388 	movw	r3, #5000	; 0x1388
 800436e:	4298      	cmp	r0, r3
 8004370:	d9f3      	bls.n	800435a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8004372:	2003      	movs	r0, #3
 8004374:	e069      	b.n	800444a <HAL_RCC_OscConfig+0x386>
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	42470000 	.word	0x42470000
 8004380:	42470e80 	.word	0x42470e80
 8004384:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004388:	b9e5      	cbnz	r5, 80043c4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438a:	69a3      	ldr	r3, [r4, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d05b      	beq.n	8004448 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004390:	4a30      	ldr	r2, [pc, #192]	; (8004454 <HAL_RCC_OscConfig+0x390>)
 8004392:	6892      	ldr	r2, [r2, #8]
 8004394:	f002 020c 	and.w	r2, r2, #12
 8004398:	2a08      	cmp	r2, #8
 800439a:	d058      	beq.n	800444e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439c:	2b02      	cmp	r3, #2
 800439e:	d017      	beq.n	80043d0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a0:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_RCC_OscConfig+0x394>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a6:	f7fe fe27 	bl	8002ff8 <HAL_GetTick>
 80043aa:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ac:	4b29      	ldr	r3, [pc, #164]	; (8004454 <HAL_RCC_OscConfig+0x390>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80043b4:	d042      	beq.n	800443c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b6:	f7fe fe1f 	bl	8002ff8 <HAL_GetTick>
 80043ba:	1b00      	subs	r0, r0, r4
 80043bc:	2802      	cmp	r0, #2
 80043be:	d9f5      	bls.n	80043ac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80043c0:	2003      	movs	r0, #3
 80043c2:	e042      	b.n	800444a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c4:	4a23      	ldr	r2, [pc, #140]	; (8004454 <HAL_RCC_OscConfig+0x390>)
 80043c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80043c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6413      	str	r3, [r2, #64]	; 0x40
 80043ce:	e7dc      	b.n	800438a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80043d0:	4b21      	ldr	r3, [pc, #132]	; (8004458 <HAL_RCC_OscConfig+0x394>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043d6:	f7fe fe0f 	bl	8002ff8 <HAL_GetTick>
 80043da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043dc:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_RCC_OscConfig+0x390>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80043e4:	d006      	beq.n	80043f4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fe fe07 	bl	8002ff8 <HAL_GetTick>
 80043ea:	1b40      	subs	r0, r0, r5
 80043ec:	2802      	cmp	r0, #2
 80043ee:	d9f5      	bls.n	80043dc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80043f0:	2003      	movs	r0, #3
 80043f2:	e02a      	b.n	800444a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f4:	69e3      	ldr	r3, [r4, #28]
 80043f6:	6a22      	ldr	r2, [r4, #32]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043fc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004400:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004402:	0852      	lsrs	r2, r2, #1
 8004404:	3a01      	subs	r2, #1
 8004406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800440a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800440c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004410:	4a10      	ldr	r2, [pc, #64]	; (8004454 <HAL_RCC_OscConfig+0x390>)
 8004412:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004414:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_RCC_OscConfig+0x394>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800441a:	f7fe fded 	bl	8002ff8 <HAL_GetTick>
 800441e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x390>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004428:	d106      	bne.n	8004438 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7fe fde5 	bl	8002ff8 <HAL_GetTick>
 800442e:	1b00      	subs	r0, r0, r4
 8004430:	2802      	cmp	r0, #2
 8004432:	d9f5      	bls.n	8004420 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8004434:	2003      	movs	r0, #3
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004438:	2000      	movs	r0, #0
 800443a:	e006      	b.n	800444a <HAL_RCC_OscConfig+0x386>
 800443c:	2000      	movs	r0, #0
 800443e:	e004      	b.n	800444a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8004440:	2001      	movs	r0, #1
}
 8004442:	4770      	bx	lr
        return HAL_ERROR;
 8004444:	2001      	movs	r0, #1
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8004448:	2000      	movs	r0, #0
}
 800444a:	b002      	add	sp, #8
 800444c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800444e:	2001      	movs	r0, #1
 8004450:	e7fb      	b.n	800444a <HAL_RCC_OscConfig+0x386>
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	42470060 	.word	0x42470060

0800445c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800445c:	4b32      	ldr	r3, [pc, #200]	; (8004528 <HAL_RCC_GetSysClockFreq+0xcc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b04      	cmp	r3, #4
 8004466:	d05c      	beq.n	8004522 <HAL_RCC_GetSysClockFreq+0xc6>
 8004468:	2b08      	cmp	r3, #8
 800446a:	d001      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800446c:	482f      	ldr	r0, [pc, #188]	; (800452c <HAL_RCC_GetSysClockFreq+0xd0>)
 800446e:	4770      	bx	lr
{
 8004470:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004474:	4b2c      	ldr	r3, [pc, #176]	; (8004528 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004482:	d02b      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004484:	4b28      	ldr	r3, [pc, #160]	; (8004528 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800448c:	461e      	mov	r6, r3
 800448e:	2700      	movs	r7, #0
 8004490:	015c      	lsls	r4, r3, #5
 8004492:	2500      	movs	r5, #0
 8004494:	1ae4      	subs	r4, r4, r3
 8004496:	eb65 0507 	sbc.w	r5, r5, r7
 800449a:	01a9      	lsls	r1, r5, #6
 800449c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80044a0:	01a0      	lsls	r0, r4, #6
 80044a2:	1b00      	subs	r0, r0, r4
 80044a4:	eb61 0105 	sbc.w	r1, r1, r5
 80044a8:	00cb      	lsls	r3, r1, #3
 80044aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80044ae:	00c4      	lsls	r4, r0, #3
 80044b0:	19a0      	adds	r0, r4, r6
 80044b2:	eb43 0107 	adc.w	r1, r3, r7
 80044b6:	024b      	lsls	r3, r1, #9
 80044b8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80044bc:	0244      	lsls	r4, r0, #9
 80044be:	4620      	mov	r0, r4
 80044c0:	4619      	mov	r1, r3
 80044c2:	2300      	movs	r3, #0
 80044c4:	f7fc fbe8 	bl	8000c98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044c8:	4b17      	ldr	r3, [pc, #92]	; (8004528 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80044d0:	3301      	adds	r3, #1
 80044d2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80044d4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80044d8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80044e4:	461e      	mov	r6, r3
 80044e6:	2700      	movs	r7, #0
 80044e8:	015c      	lsls	r4, r3, #5
 80044ea:	2500      	movs	r5, #0
 80044ec:	1ae4      	subs	r4, r4, r3
 80044ee:	eb65 0507 	sbc.w	r5, r5, r7
 80044f2:	01a9      	lsls	r1, r5, #6
 80044f4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80044f8:	01a0      	lsls	r0, r4, #6
 80044fa:	1b00      	subs	r0, r0, r4
 80044fc:	eb61 0105 	sbc.w	r1, r1, r5
 8004500:	00cb      	lsls	r3, r1, #3
 8004502:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004506:	00c4      	lsls	r4, r0, #3
 8004508:	19a0      	adds	r0, r4, r6
 800450a:	eb43 0107 	adc.w	r1, r3, r7
 800450e:	028b      	lsls	r3, r1, #10
 8004510:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004514:	0284      	lsls	r4, r0, #10
 8004516:	4620      	mov	r0, r4
 8004518:	4619      	mov	r1, r3
 800451a:	2300      	movs	r3, #0
 800451c:	f7fc fbbc 	bl	8000c98 <__aeabi_uldivmod>
 8004520:	e7d2      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8004522:	4803      	ldr	r0, [pc, #12]	; (8004530 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800
 800452c:	00f42400 	.word	0x00f42400
 8004530:	007a1200 	.word	0x007a1200

08004534 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004534:	2800      	cmp	r0, #0
 8004536:	f000 809d 	beq.w	8004674 <HAL_RCC_ClockConfig+0x140>
{
 800453a:	b570      	push	{r4, r5, r6, lr}
 800453c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800453e:	4b4f      	ldr	r3, [pc, #316]	; (800467c <HAL_RCC_ClockConfig+0x148>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	428b      	cmp	r3, r1
 8004548:	d209      	bcs.n	800455e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	b2cb      	uxtb	r3, r1
 800454c:	4a4b      	ldr	r2, [pc, #300]	; (800467c <HAL_RCC_ClockConfig+0x148>)
 800454e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004550:	6813      	ldr	r3, [r2, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	428b      	cmp	r3, r1
 8004558:	d001      	beq.n	800455e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800455a:	2001      	movs	r0, #1
}
 800455c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f013 0f02 	tst.w	r3, #2
 8004564:	d017      	beq.n	8004596 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004566:	f013 0f04 	tst.w	r3, #4
 800456a:	d004      	beq.n	8004576 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800456c:	4a44      	ldr	r2, [pc, #272]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 800456e:	6893      	ldr	r3, [r2, #8]
 8004570:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004574:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	f013 0f08 	tst.w	r3, #8
 800457c:	d004      	beq.n	8004588 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800457e:	4a40      	ldr	r2, [pc, #256]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 8004580:	6893      	ldr	r3, [r2, #8]
 8004582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004586:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004588:	4a3d      	ldr	r2, [pc, #244]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 800458a:	6893      	ldr	r3, [r2, #8]
 800458c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004590:	68a0      	ldr	r0, [r4, #8]
 8004592:	4303      	orrs	r3, r0
 8004594:	6093      	str	r3, [r2, #8]
 8004596:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	f013 0f01 	tst.w	r3, #1
 800459e:	d032      	beq.n	8004606 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a0:	6863      	ldr	r3, [r4, #4]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d021      	beq.n	80045ea <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a6:	1e9a      	subs	r2, r3, #2
 80045a8:	2a01      	cmp	r2, #1
 80045aa:	d925      	bls.n	80045f8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	4a34      	ldr	r2, [pc, #208]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	f012 0f02 	tst.w	r2, #2
 80045b4:	d060      	beq.n	8004678 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045b6:	4932      	ldr	r1, [pc, #200]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 80045b8:	688a      	ldr	r2, [r1, #8]
 80045ba:	f022 0203 	bic.w	r2, r2, #3
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80045c2:	f7fe fd19 	bl	8002ff8 <HAL_GetTick>
 80045c6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c8:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	6862      	ldr	r2, [r4, #4]
 80045d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80045d6:	d016      	beq.n	8004606 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d8:	f7fe fd0e 	bl	8002ff8 <HAL_GetTick>
 80045dc:	1b80      	subs	r0, r0, r6
 80045de:	f241 3388 	movw	r3, #5000	; 0x1388
 80045e2:	4298      	cmp	r0, r3
 80045e4:	d9f0      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80045e6:	2003      	movs	r0, #3
 80045e8:	e7b8      	b.n	800455c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4a25      	ldr	r2, [pc, #148]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80045f2:	d1e0      	bne.n	80045b6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80045f4:	2001      	movs	r0, #1
 80045f6:	e7b1      	b.n	800455c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f8:	4a21      	ldr	r2, [pc, #132]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004600:	d1d9      	bne.n	80045b6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004602:	2001      	movs	r0, #1
 8004604:	e7aa      	b.n	800455c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004606:	4b1d      	ldr	r3, [pc, #116]	; (800467c <HAL_RCC_ClockConfig+0x148>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	42ab      	cmp	r3, r5
 8004610:	d909      	bls.n	8004626 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	b2ea      	uxtb	r2, r5
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_RCC_ClockConfig+0x148>)
 8004616:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	42ab      	cmp	r3, r5
 8004620:	d001      	beq.n	8004626 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8004622:	2001      	movs	r0, #1
 8004624:	e79a      	b.n	800455c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	f013 0f04 	tst.w	r3, #4
 800462c:	d006      	beq.n	800463c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800462e:	4a14      	ldr	r2, [pc, #80]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 8004630:	6893      	ldr	r3, [r2, #8]
 8004632:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004636:	68e1      	ldr	r1, [r4, #12]
 8004638:	430b      	orrs	r3, r1
 800463a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	f013 0f08 	tst.w	r3, #8
 8004642:	d007      	beq.n	8004654 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004644:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 8004646:	6893      	ldr	r3, [r2, #8]
 8004648:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800464c:	6921      	ldr	r1, [r4, #16]
 800464e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004652:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004654:	f7ff ff02 	bl	800445c <HAL_RCC_GetSysClockFreq>
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCC_ClockConfig+0x14c>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <HAL_RCC_ClockConfig+0x150>)
 8004662:	5cd3      	ldrb	r3, [r2, r3]
 8004664:	40d8      	lsrs	r0, r3
 8004666:	4b08      	ldr	r3, [pc, #32]	; (8004688 <HAL_RCC_ClockConfig+0x154>)
 8004668:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800466a:	2000      	movs	r0, #0
 800466c:	f004 faa2 	bl	8008bb4 <HAL_InitTick>
  return HAL_OK;
 8004670:	2000      	movs	r0, #0
 8004672:	e773      	b.n	800455c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004674:	2001      	movs	r0, #1
}
 8004676:	4770      	bx	lr
        return HAL_ERROR;
 8004678:	2001      	movs	r0, #1
 800467a:	e76f      	b.n	800455c <HAL_RCC_ClockConfig+0x28>
 800467c:	40023c00 	.word	0x40023c00
 8004680:	40023800 	.word	0x40023800
 8004684:	0800fb10 	.word	0x0800fb10
 8004688:	20000070 	.word	0x20000070

0800468c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800468c:	4b01      	ldr	r3, [pc, #4]	; (8004694 <HAL_RCC_GetHCLKFreq+0x8>)
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000070 	.word	0x20000070

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800469a:	f7ff fff7 	bl	800468c <HAL_RCC_GetHCLKFreq>
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80046a6:	4a03      	ldr	r2, [pc, #12]	; (80046b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80046a8:	5cd3      	ldrb	r3, [r2, r3]
}
 80046aa:	40d8      	lsrs	r0, r3
 80046ac:	bd08      	pop	{r3, pc}
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	0800fb20 	.word	0x0800fb20

080046b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046ba:	f7ff ffe7 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046be:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80046c6:	4a03      	ldr	r2, [pc, #12]	; (80046d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80046c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80046ca:	40d8      	lsrs	r0, r3
 80046cc:	bd08      	pop	{r3, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	0800fb20 	.word	0x0800fb20

080046d8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046d8:	230f      	movs	r3, #15
 80046da:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCC_GetClockConfig+0x34>)
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	f002 0203 	and.w	r2, r2, #3
 80046e4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80046ec:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80046f4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	08db      	lsrs	r3, r3, #3
 80046fa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80046fe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <HAL_RCC_GetClockConfig+0x38>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	600b      	str	r3, [r1, #0]
}
 800470a:	4770      	bx	lr
 800470c:	40023800 	.word	0x40023800
 8004710:	40023c00 	.word	0x40023c00

08004714 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	4605      	mov	r5, r0
 8004718:	460f      	mov	r7, r1
 800471a:	4616      	mov	r6, r2
 800471c:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	ea37 0303 	bics.w	r3, r7, r3
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	42b3      	cmp	r3, r6
 800472e:	d037      	beq.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004730:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004734:	d0f3      	beq.n	800471e <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004736:	f7fe fc5f 	bl	8002ff8 <HAL_GetTick>
 800473a:	9b06      	ldr	r3, [sp, #24]
 800473c:	1ac0      	subs	r0, r0, r3
 800473e:	42a0      	cmp	r0, r4
 8004740:	d201      	bcs.n	8004746 <SPI_WaitFlagStateUntilTimeout+0x32>
 8004742:	2c00      	cmp	r4, #0
 8004744:	d1eb      	bne.n	800471e <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004746:	682a      	ldr	r2, [r5, #0]
 8004748:	6853      	ldr	r3, [r2, #4]
 800474a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800474e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004750:	686b      	ldr	r3, [r5, #4]
 8004752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004756:	d00b      	beq.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004758:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475e:	d014      	beq.n	800478a <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004760:	2301      	movs	r3, #1
 8004762:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004766:	2300      	movs	r3, #0
 8004768:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 800476c:	2003      	movs	r0, #3
 800476e:	e018      	b.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004770:	68ab      	ldr	r3, [r5, #8]
 8004772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004776:	d002      	beq.n	800477e <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477c:	d1ec      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 800477e:	682a      	ldr	r2, [r5, #0]
 8004780:	6813      	ldr	r3, [r2, #0]
 8004782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e7e6      	b.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 800478a:	682a      	ldr	r2, [r5, #0]
 800478c:	6813      	ldr	r3, [r2, #0]
 800478e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	682a      	ldr	r2, [r5, #0]
 8004796:	6813      	ldr	r3, [r2, #0]
 8004798:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e7df      	b.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80047a0:	2000      	movs	r0, #0
}
 80047a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b530      	push	{r4, r5, lr}
 80047a6:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047a8:	4c16      	ldr	r4, [pc, #88]	; (8004804 <SPI_EndRxTxTransaction+0x60>)
 80047aa:	6824      	ldr	r4, [r4, #0]
 80047ac:	4d16      	ldr	r5, [pc, #88]	; (8004808 <SPI_EndRxTxTransaction+0x64>)
 80047ae:	fba5 3404 	umull	r3, r4, r5, r4
 80047b2:	0d64      	lsrs	r4, r4, #21
 80047b4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80047b8:	fb05 f404 	mul.w	r4, r5, r4
 80047bc:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047be:	6844      	ldr	r4, [r0, #4]
 80047c0:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80047c4:	d00b      	beq.n	80047de <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047c6:	9b03      	ldr	r3, [sp, #12]
 80047c8:	b1c3      	cbz	r3, 80047fc <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047d0:	6803      	ldr	r3, [r0, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80047d8:	d1f5      	bne.n	80047c6 <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e00f      	b.n	80047fe <SPI_EndRxTxTransaction+0x5a>
 80047de:	460b      	mov	r3, r1
 80047e0:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047e2:	9200      	str	r2, [sp, #0]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	f7ff ff94 	bl	8004714 <SPI_WaitFlagStateUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	b130      	cbz	r0, 80047fe <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047f2:	f043 0320 	orr.w	r3, r3, #32
 80047f6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e000      	b.n	80047fe <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	b005      	add	sp, #20
 8004802:	bd30      	pop	{r4, r5, pc}
 8004804:	20000070 	.word	0x20000070
 8004808:	165e9f81 	.word	0x165e9f81

0800480c <SPI_EndRxTransaction>:
{
 800480c:	b510      	push	{r4, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004812:	6840      	ldr	r0, [r0, #4]
 8004814:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004818:	d016      	beq.n	8004848 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481a:	6860      	ldr	r0, [r4, #4]
 800481c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004820:	d12e      	bne.n	8004880 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004822:	68a3      	ldr	r3, [r4, #8]
 8004824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004828:	d01b      	beq.n	8004862 <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800482a:	9200      	str	r2, [sp, #0]
 800482c:	460b      	mov	r3, r1
 800482e:	2200      	movs	r2, #0
 8004830:	2180      	movs	r1, #128	; 0x80
 8004832:	4620      	mov	r0, r4
 8004834:	f7ff ff6e 	bl	8004714 <SPI_WaitFlagStateUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	b350      	cbz	r0, 8004892 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800483e:	f043 0320 	orr.w	r3, r3, #32
 8004842:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e024      	b.n	8004892 <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004848:	68a3      	ldr	r3, [r4, #8]
 800484a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484e:	d002      	beq.n	8004856 <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004854:	d1e1      	bne.n	800481a <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 8004856:	6820      	ldr	r0, [r4, #0]
 8004858:	6803      	ldr	r3, [r0, #0]
 800485a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485e:	6003      	str	r3, [r0, #0]
 8004860:	e7db      	b.n	800481a <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004862:	9200      	str	r2, [sp, #0]
 8004864:	460b      	mov	r3, r1
 8004866:	2200      	movs	r2, #0
 8004868:	2101      	movs	r1, #1
 800486a:	4620      	mov	r0, r4
 800486c:	f7ff ff52 	bl	8004714 <SPI_WaitFlagStateUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	b170      	cbz	r0, 8004892 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004874:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004876:	f043 0320 	orr.w	r3, r3, #32
 800487a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e008      	b.n	8004892 <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004880:	9200      	str	r2, [sp, #0]
 8004882:	460b      	mov	r3, r1
 8004884:	2200      	movs	r2, #0
 8004886:	2101      	movs	r1, #1
 8004888:	4620      	mov	r0, r4
 800488a:	f7ff ff43 	bl	8004714 <SPI_WaitFlagStateUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	b910      	cbnz	r0, 8004898 <SPI_EndRxTransaction+0x8c>
}
 8004892:	4618      	mov	r0, r3
 8004894:	b002      	add	sp, #8
 8004896:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004898:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800489a:	f043 0320 	orr.w	r3, r3, #32
 800489e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e7f6      	b.n	8004892 <SPI_EndRxTransaction+0x86>

080048a4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d03b      	beq.n	8004920 <HAL_SPI_Init+0x7c>
{
 80048a8:	b510      	push	{r4, lr}
 80048aa:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80048b0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02e      	beq.n	8004916 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 80048b8:	2302      	movs	r3, #2
 80048ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	6813      	ldr	r3, [r2, #0]
 80048c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	68a2      	ldr	r2, [r4, #8]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	68e2      	ldr	r2, [r4, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	6922      	ldr	r2, [r4, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	6962      	ldr	r2, [r4, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	69a2      	ldr	r2, [r4, #24]
 80048dc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80048e0:	4313      	orrs	r3, r2
 80048e2:	69e2      	ldr	r2, [r4, #28]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	6a22      	ldr	r2, [r4, #32]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80048ec:	6822      	ldr	r2, [r4, #0]
 80048ee:	430b      	orrs	r3, r1
 80048f0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80048f2:	8b63      	ldrh	r3, [r4, #26]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048fa:	6822      	ldr	r2, [r4, #0]
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	69d3      	ldr	r3, [r2, #28]
 8004904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004908:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800490a:	2000      	movs	r0, #0
 800490c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800490e:	2301      	movs	r3, #1
 8004910:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004914:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004916:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800491a:	f004 f8cb 	bl	8008ab4 <HAL_SPI_MspInit>
 800491e:	e7cb      	b.n	80048b8 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
}
 8004922:	4770      	bx	lr

08004924 <HAL_SPI_Transmit>:
{
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800492a:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800492e:	2c01      	cmp	r4, #1
 8004930:	f000 80c3 	beq.w	8004aba <HAL_SPI_Transmit+0x196>
 8004934:	461d      	mov	r5, r3
 8004936:	4617      	mov	r7, r2
 8004938:	4688      	mov	r8, r1
 800493a:	4604      	mov	r4, r0
 800493c:	2301      	movs	r3, #1
 800493e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004942:	f7fe fb59 	bl	8002ff8 <HAL_GetTick>
 8004946:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004948:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b01      	cmp	r3, #1
 8004950:	d009      	beq.n	8004966 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8004952:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004954:	2301      	movs	r3, #1
 8004956:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800495a:	2300      	movs	r3, #0
 800495c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004960:	b002      	add	sp, #8
 8004962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004966:	f1b8 0f00 	cmp.w	r8, #0
 800496a:	f000 8098 	beq.w	8004a9e <HAL_SPI_Transmit+0x17a>
 800496e:	2f00      	cmp	r7, #0
 8004970:	f000 8097 	beq.w	8004aa2 <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004974:	2303      	movs	r3, #3
 8004976:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800497a:	2300      	movs	r3, #0
 800497c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800497e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004982:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004984:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004986:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004988:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800498a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800498c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800498e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004990:	68a3      	ldr	r3, [r4, #8]
 8004992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004996:	d01c      	beq.n	80049d2 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80049a0:	d103      	bne.n	80049aa <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049aa:	68e3      	ldr	r3, [r4, #12]
 80049ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b0:	d015      	beq.n	80049de <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b2:	6863      	ldr	r3, [r4, #4]
 80049b4:	b10b      	cbz	r3, 80049ba <HAL_SPI_Transmit+0x96>
 80049b6:	2f01      	cmp	r7, #1
 80049b8:	d149      	bne.n	8004a4e <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	7812      	ldrb	r2, [r2, #0]
 80049c0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049c4:	3301      	adds	r3, #1
 80049c6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80049c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	86e3      	strh	r3, [r4, #54]	; 0x36
 80049d0:	e03d      	b.n	8004a4e <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e7dc      	b.n	8004998 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049de:	6863      	ldr	r3, [r4, #4]
 80049e0:	b10b      	cbz	r3, 80049e6 <HAL_SPI_Transmit+0xc2>
 80049e2:	2f01      	cmp	r7, #1
 80049e4:	d115      	bne.n	8004a12 <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	8812      	ldrh	r2, [r2, #0]
 80049ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049f0:	3302      	adds	r3, #2
 80049f2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80049f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	86e3      	strh	r3, [r4, #54]	; 0x36
 80049fc:	e009      	b.n	8004a12 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049fe:	f7fe fafb 	bl	8002ff8 <HAL_GetTick>
 8004a02:	1b80      	subs	r0, r0, r6
 8004a04:	42a8      	cmp	r0, r5
 8004a06:	d302      	bcc.n	8004a0e <HAL_SPI_Transmit+0xea>
 8004a08:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004a0c:	d14b      	bne.n	8004aa6 <HAL_SPI_Transmit+0x182>
 8004a0e:	2d00      	cmp	r5, #0
 8004a10:	d04b      	beq.n	8004aaa <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 8004a12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d02c      	beq.n	8004a74 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	f012 0f02 	tst.w	r2, #2
 8004a22:	d0ec      	beq.n	80049fe <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a24:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a26:	8812      	ldrh	r2, [r2, #0]
 8004a28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004a30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004a38:	e7eb      	b.n	8004a12 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a3a:	f7fe fadd 	bl	8002ff8 <HAL_GetTick>
 8004a3e:	1b80      	subs	r0, r0, r6
 8004a40:	42a8      	cmp	r0, r5
 8004a42:	d302      	bcc.n	8004a4a <HAL_SPI_Transmit+0x126>
 8004a44:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004a48:	d131      	bne.n	8004aae <HAL_SPI_Transmit+0x18a>
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	d031      	beq.n	8004ab2 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8004a4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	b17b      	cbz	r3, 8004a74 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	f012 0f02 	tst.w	r2, #2
 8004a5c:	d0ed      	beq.n	8004a3a <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a60:	7812      	ldrb	r2, [r2, #0]
 8004a62:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a66:	3301      	adds	r3, #1
 8004a68:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004a6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004a72:	e7ec      	b.n	8004a4e <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a74:	4632      	mov	r2, r6
 8004a76:	4629      	mov	r1, r5
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff fe93 	bl	80047a4 <SPI_EndRxTxTransaction>
 8004a7e:	b108      	cbz	r0, 8004a84 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a80:	2320      	movs	r3, #32
 8004a82:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a84:	68a3      	ldr	r3, [r4, #8]
 8004a86:	b933      	cbnz	r3, 8004a96 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	9201      	str	r2, [sp, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a98:	b96b      	cbnz	r3, 8004ab6 <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	e75a      	b.n	8004954 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	e758      	b.n	8004954 <HAL_SPI_Transmit+0x30>
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	e756      	b.n	8004954 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004aa6:	2003      	movs	r0, #3
 8004aa8:	e754      	b.n	8004954 <HAL_SPI_Transmit+0x30>
 8004aaa:	2003      	movs	r0, #3
 8004aac:	e752      	b.n	8004954 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004aae:	2003      	movs	r0, #3
 8004ab0:	e750      	b.n	8004954 <HAL_SPI_Transmit+0x30>
 8004ab2:	2003      	movs	r0, #3
 8004ab4:	e74e      	b.n	8004954 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	e74c      	b.n	8004954 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8004aba:	2002      	movs	r0, #2
 8004abc:	e750      	b.n	8004960 <HAL_SPI_Transmit+0x3c>

08004abe <HAL_SPI_TransmitReceive>:
{
 8004abe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004ac8:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004acc:	2c01      	cmp	r4, #1
 8004ace:	f000 810b 	beq.w	8004ce8 <HAL_SPI_TransmitReceive+0x22a>
 8004ad2:	461d      	mov	r5, r3
 8004ad4:	4617      	mov	r7, r2
 8004ad6:	460e      	mov	r6, r1
 8004ad8:	4604      	mov	r4, r0
 8004ada:	2301      	movs	r3, #1
 8004adc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004ae0:	f7fe fa8a 	bl	8002ff8 <HAL_GetTick>
 8004ae4:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8004ae6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8004aea:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8004aec:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004aee:	2801      	cmp	r0, #1
 8004af0:	d015      	beq.n	8004b1e <HAL_SPI_TransmitReceive+0x60>
 8004af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af6:	d00a      	beq.n	8004b0e <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004afa:	2201      	movs	r2, #1
 8004afc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b00:	2200      	movs	r2, #0
 8004b02:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	b003      	add	sp, #12
 8004b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b0e:	68a3      	ldr	r3, [r4, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 80db 	bne.w	8004ccc <HAL_SPI_TransmitReceive+0x20e>
 8004b16:	2804      	cmp	r0, #4
 8004b18:	d001      	beq.n	8004b1e <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e7ed      	b.n	8004afa <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b1e:	2e00      	cmp	r6, #0
 8004b20:	f000 80d6 	beq.w	8004cd0 <HAL_SPI_TransmitReceive+0x212>
 8004b24:	2f00      	cmp	r7, #0
 8004b26:	f000 80d5 	beq.w	8004cd4 <HAL_SPI_TransmitReceive+0x216>
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	f000 80d4 	beq.w	8004cd8 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b30:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d002      	beq.n	8004b40 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b3a:	2305      	movs	r3, #5
 8004b3c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b44:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b46:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b48:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b4a:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b4c:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b4e:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8004b50:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b52:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b5c:	d103      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b64:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b66:	68e3      	ldr	r3, [r4, #12]
 8004b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6c:	d010      	beq.n	8004b90 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b6e:	6863      	ldr	r3, [r4, #4]
 8004b70:	b10b      	cbz	r3, 8004b76 <HAL_SPI_TransmitReceive+0xb8>
 8004b72:	2d01      	cmp	r5, #1
 8004b74:	d10a      	bne.n	8004b8c <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	7812      	ldrb	r2, [r2, #0]
 8004b7c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b80:	3301      	adds	r3, #1
 8004b82:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004b84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004b8c:	2501      	movs	r5, #1
 8004b8e:	e069      	b.n	8004c64 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	b10b      	cbz	r3, 8004b98 <HAL_SPI_TransmitReceive+0xda>
 8004b94:	2d01      	cmp	r5, #1
 8004b96:	d10a      	bne.n	8004bae <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	8812      	ldrh	r2, [r2, #0]
 8004b9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ba2:	3302      	adds	r3, #2
 8004ba4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004ba6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004bae:	2501      	movs	r5, #1
 8004bb0:	e01b      	b.n	8004bea <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	f012 0f01 	tst.w	r2, #1
 8004bba:	d00d      	beq.n	8004bd8 <HAL_SPI_TransmitReceive+0x11a>
 8004bbc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004bbe:	b292      	uxth	r2, r2
 8004bc0:	b152      	cbz	r2, 8004bd8 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bca:	3302      	adds	r3, #2
 8004bcc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004bce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004bd6:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bd8:	f7fe fa0e 	bl	8002ff8 <HAL_GetTick>
 8004bdc:	eba0 0009 	sub.w	r0, r0, r9
 8004be0:	4540      	cmp	r0, r8
 8004be2:	d302      	bcc.n	8004bea <HAL_SPI_TransmitReceive+0x12c>
 8004be4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004be8:	d178      	bne.n	8004cdc <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	b91b      	cbnz	r3, 8004bf8 <HAL_SPI_TransmitReceive+0x13a>
 8004bf0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d052      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	f012 0f02 	tst.w	r2, #2
 8004c00:	d0d7      	beq.n	8004bb2 <HAL_SPI_TransmitReceive+0xf4>
 8004c02:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004c04:	b292      	uxth	r2, r2
 8004c06:	2a00      	cmp	r2, #0
 8004c08:	d0d3      	beq.n	8004bb2 <HAL_SPI_TransmitReceive+0xf4>
 8004c0a:	2d00      	cmp	r5, #0
 8004c0c:	d0d1      	beq.n	8004bb2 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c10:	8812      	ldrh	r2, [r2, #0]
 8004c12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c16:	3302      	adds	r3, #2
 8004c18:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004c1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004c22:	2500      	movs	r5, #0
 8004c24:	e7c5      	b.n	8004bb2 <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	f012 0f01 	tst.w	r2, #1
 8004c2e:	d00d      	beq.n	8004c4c <HAL_SPI_TransmitReceive+0x18e>
 8004c30:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004c32:	b292      	uxth	r2, r2
 8004c34:	b152      	cbz	r2, 8004c4c <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c3e:	3301      	adds	r3, #1
 8004c40:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004c4a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c4c:	f7fe f9d4 	bl	8002ff8 <HAL_GetTick>
 8004c50:	eba0 0009 	sub.w	r0, r0, r9
 8004c54:	4540      	cmp	r0, r8
 8004c56:	d302      	bcc.n	8004c5e <HAL_SPI_TransmitReceive+0x1a0>
 8004c58:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004c5c:	d140      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x222>
 8004c5e:	f1b8 0f00 	cmp.w	r8, #0
 8004c62:	d03f      	beq.n	8004ce4 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	b913      	cbnz	r3, 8004c70 <HAL_SPI_TransmitReceive+0x1b2>
 8004c6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	b1b3      	cbz	r3, 8004c9e <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	f012 0f02 	tst.w	r2, #2
 8004c78:	d0d5      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x168>
 8004c7a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004c7c:	b292      	uxth	r2, r2
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	d0d1      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x168>
 8004c82:	2d00      	cmp	r5, #0
 8004c84:	d0cf      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004c8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c8e:	3301      	adds	r3, #1
 8004c90:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004c92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004c9a:	2500      	movs	r5, #0
 8004c9c:	e7c3      	b.n	8004c26 <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c9e:	464a      	mov	r2, r9
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f7ff fd7e 	bl	80047a4 <SPI_EndRxTxTransaction>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	b118      	cbz	r0, 8004cb4 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cac:	2320      	movs	r3, #32
 8004cae:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
    goto error;
 8004cb2:	e722      	b.n	8004afa <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cb4:	68a2      	ldr	r2, [r4, #8]
 8004cb6:	2a00      	cmp	r2, #0
 8004cb8:	f47f af1f 	bne.w	8004afa <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cbc:	9201      	str	r2, [sp, #4]
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	68d1      	ldr	r1, [r2, #12]
 8004cc2:	9101      	str	r1, [sp, #4]
 8004cc4:	6892      	ldr	r2, [r2, #8]
 8004cc6:	9201      	str	r2, [sp, #4]
 8004cc8:	9a01      	ldr	r2, [sp, #4]
 8004cca:	e716      	b.n	8004afa <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e714      	b.n	8004afa <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e712      	b.n	8004afa <HAL_SPI_TransmitReceive+0x3c>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e710      	b.n	8004afa <HAL_SPI_TransmitReceive+0x3c>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e70e      	b.n	8004afa <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e70c      	b.n	8004afa <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e70a      	b.n	8004afa <HAL_SPI_TransmitReceive+0x3c>
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e708      	b.n	8004afa <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e70c      	b.n	8004b06 <HAL_SPI_TransmitReceive+0x48>

08004cec <HAL_SPI_Receive>:
{
 8004cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	460f      	mov	r7, r1
 8004cf6:	4690      	mov	r8, r2
 8004cf8:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cfa:	6843      	ldr	r3, [r0, #4]
 8004cfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d00:	d019      	beq.n	8004d36 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8004d02:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	f000 809f 	beq.w	8004e4a <HAL_SPI_Receive+0x15e>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004d12:	f7fe f971 	bl	8002ff8 <HAL_GetTick>
 8004d16:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d18:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d015      	beq.n	8004d4e <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8004d22:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004d24:	2301      	movs	r3, #1
 8004d26:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004d30:	b002      	add	sp, #8
 8004d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d36:	6883      	ldr	r3, [r0, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e2      	bne.n	8004d02 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d42:	9500      	str	r5, [sp, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	460a      	mov	r2, r1
 8004d48:	f7ff feb9 	bl	8004abe <HAL_SPI_TransmitReceive>
 8004d4c:	e7f0      	b.n	8004d30 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8004d4e:	2f00      	cmp	r7, #0
 8004d50:	d06d      	beq.n	8004e2e <HAL_SPI_Receive+0x142>
 8004d52:	f1b8 0f00 	cmp.w	r8, #0
 8004d56:	d06c      	beq.n	8004e32 <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d58:	2304      	movs	r3, #4
 8004d5a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d62:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d64:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d68:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d6c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d6e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d70:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d72:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d74:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d76:	68a3      	ldr	r3, [r4, #8]
 8004d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7c:	d00b      	beq.n	8004d96 <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004d86:	d103      	bne.n	8004d90 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d8e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d90:	68e3      	ldr	r3, [r4, #12]
 8004d92:	b183      	cbz	r3, 8004db6 <HAL_SPI_Receive+0xca>
 8004d94:	e02c      	b.n	8004df0 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 8004d96:	6822      	ldr	r2, [r4, #0]
 8004d98:	6813      	ldr	r3, [r2, #0]
 8004d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	e7ed      	b.n	8004d7e <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da2:	f7fe f929 	bl	8002ff8 <HAL_GetTick>
 8004da6:	1b80      	subs	r0, r0, r6
 8004da8:	42a8      	cmp	r0, r5
 8004daa:	d302      	bcc.n	8004db2 <HAL_SPI_Receive+0xc6>
 8004dac:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004db0:	d141      	bne.n	8004e36 <HAL_SPI_Receive+0x14a>
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	d041      	beq.n	8004e3a <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 8004db6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d02b      	beq.n	8004e16 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	f012 0f01 	tst.w	r2, #1
 8004dc6:	d0ec      	beq.n	8004da2 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004dca:	7b1b      	ldrb	r3, [r3, #12]
 8004dcc:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004dd4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004ddc:	e7eb      	b.n	8004db6 <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dde:	f7fe f90b 	bl	8002ff8 <HAL_GetTick>
 8004de2:	1b80      	subs	r0, r0, r6
 8004de4:	42a8      	cmp	r0, r5
 8004de6:	d302      	bcc.n	8004dee <HAL_SPI_Receive+0x102>
 8004de8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004dec:	d127      	bne.n	8004e3e <HAL_SPI_Receive+0x152>
 8004dee:	b345      	cbz	r5, 8004e42 <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8004df0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	b17b      	cbz	r3, 8004e16 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	f012 0f01 	tst.w	r2, #1
 8004dfe:	d0ee      	beq.n	8004dde <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e08:	3302      	adds	r3, #2
 8004e0a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004e0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004e14:	e7ec      	b.n	8004df0 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e16:	4632      	mov	r2, r6
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff fcf6 	bl	800480c <SPI_EndRxTransaction>
 8004e20:	b108      	cbz	r0, 8004e26 <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e22:	2320      	movs	r3, #32
 8004e24:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e28:	b96b      	cbnz	r3, 8004e46 <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	e77a      	b.n	8004d24 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8004e2e:	2001      	movs	r0, #1
 8004e30:	e778      	b.n	8004d24 <HAL_SPI_Receive+0x38>
 8004e32:	2001      	movs	r0, #1
 8004e34:	e776      	b.n	8004d24 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8004e36:	2003      	movs	r0, #3
 8004e38:	e774      	b.n	8004d24 <HAL_SPI_Receive+0x38>
 8004e3a:	2003      	movs	r0, #3
 8004e3c:	e772      	b.n	8004d24 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8004e3e:	2003      	movs	r0, #3
 8004e40:	e770      	b.n	8004d24 <HAL_SPI_Receive+0x38>
 8004e42:	2003      	movs	r0, #3
 8004e44:	e76e      	b.n	8004d24 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8004e46:	2001      	movs	r0, #1
 8004e48:	e76c      	b.n	8004d24 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8004e4a:	2002      	movs	r0, #2
 8004e4c:	e770      	b.n	8004d30 <HAL_SPI_Receive+0x44>
	...

08004e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e52:	6a03      	ldr	r3, [r0, #32]
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e5e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e60:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e64:	680d      	ldr	r5, [r1, #0]
 8004e66:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e6a:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e6e:	688b      	ldr	r3, [r1, #8]
 8004e70:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e72:	4d0d      	ldr	r5, [pc, #52]	; (8004ea8 <TIM_OC1_SetConfig+0x58>)
 8004e74:	42a8      	cmp	r0, r5
 8004e76:	d009      	beq.n	8004e8c <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e78:	4d0b      	ldr	r5, [pc, #44]	; (8004ea8 <TIM_OC1_SetConfig+0x58>)
 8004e7a:	42a8      	cmp	r0, r5
 8004e7c:	d00d      	beq.n	8004e9a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e80:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e82:	684a      	ldr	r2, [r1, #4]
 8004e84:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e86:	6203      	str	r3, [r0, #32]
}
 8004e88:	bc70      	pop	{r4, r5, r6}
 8004e8a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e8c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004e90:	68cc      	ldr	r4, [r1, #12]
 8004e92:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e94:	f023 0304 	bic.w	r3, r3, #4
 8004e98:	e7ee      	b.n	8004e78 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004e9e:	694c      	ldr	r4, [r1, #20]
 8004ea0:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ea2:	698a      	ldr	r2, [r1, #24]
 8004ea4:	4322      	orrs	r2, r4
 8004ea6:	e7ea      	b.n	8004e7e <TIM_OC1_SetConfig+0x2e>
 8004ea8:	40010000 	.word	0x40010000

08004eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eae:	6a03      	ldr	r3, [r0, #32]
 8004eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eba:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ebc:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec0:	680d      	ldr	r5, [r1, #0]
 8004ec2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ec8:	688d      	ldr	r5, [r1, #8]
 8004eca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ece:	4d0f      	ldr	r5, [pc, #60]	; (8004f0c <TIM_OC3_SetConfig+0x60>)
 8004ed0:	42a8      	cmp	r0, r5
 8004ed2:	d009      	beq.n	8004ee8 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed4:	4d0d      	ldr	r5, [pc, #52]	; (8004f0c <TIM_OC3_SetConfig+0x60>)
 8004ed6:	42a8      	cmp	r0, r5
 8004ed8:	d00e      	beq.n	8004ef8 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eda:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004edc:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ede:	684a      	ldr	r2, [r1, #4]
 8004ee0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee2:	6203      	str	r3, [r0, #32]
}
 8004ee4:	bc30      	pop	{r4, r5}
 8004ee6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eec:	68cd      	ldr	r5, [r1, #12]
 8004eee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ef2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ef6:	e7ed      	b.n	8004ed4 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ef8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004efc:	694d      	ldr	r5, [r1, #20]
 8004efe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f02:	698d      	ldr	r5, [r1, #24]
 8004f04:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004f08:	e7e7      	b.n	8004eda <TIM_OC3_SetConfig+0x2e>
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000

08004f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f12:	6a03      	ldr	r3, [r0, #32]
 8004f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f20:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f24:	680d      	ldr	r5, [r1, #0]
 8004f26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f2e:	688d      	ldr	r5, [r1, #8]
 8004f30:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f34:	4d07      	ldr	r5, [pc, #28]	; (8004f54 <TIM_OC4_SetConfig+0x44>)
 8004f36:	42a8      	cmp	r0, r5
 8004f38:	d006      	beq.n	8004f48 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f3c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f3e:	684a      	ldr	r2, [r1, #4]
 8004f40:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	6203      	str	r3, [r0, #32]
}
 8004f44:	bc30      	pop	{r4, r5}
 8004f46:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f48:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f4c:	694d      	ldr	r5, [r1, #20]
 8004f4e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004f52:	e7f2      	b.n	8004f3a <TIM_OC4_SetConfig+0x2a>
 8004f54:	40010000 	.word	0x40010000

08004f58 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5e:	6802      	ldr	r2, [r0, #0]
 8004f60:	6893      	ldr	r3, [r2, #8]
 8004f62:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	2b06      	cmp	r3, #6
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8004f6a:	6813      	ldr	r3, [r2, #0]
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004f78:	2000      	movs	r0, #0
 8004f7a:	4770      	bx	lr

08004f7c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f7c:	6802      	ldr	r2, [r0, #0]
 8004f7e:	68d3      	ldr	r3, [r2, #12]
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f86:	6802      	ldr	r2, [r0, #0]
 8004f88:	6893      	ldr	r3, [r2, #8]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	6013      	str	r3, [r2, #0]
}
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_TIM_IC_CaptureCallback>:
}
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_TIM_TriggerCallback>:
}
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_TIM_IRQHandler>:
{
 8004fa6:	b510      	push	{r4, lr}
 8004fa8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004faa:	6803      	ldr	r3, [r0, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	f012 0f02 	tst.w	r2, #2
 8004fb2:	d011      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	f012 0f02 	tst.w	r2, #2
 8004fba:	d00d      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fbc:	f06f 0202 	mvn.w	r2, #2
 8004fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fc6:	6803      	ldr	r3, [r0, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f013 0f03 	tst.w	r3, #3
 8004fce:	d070      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004fd0:	f7ff ffe6 	bl	8004fa0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	f012 0f04 	tst.w	r2, #4
 8004fe0:	d012      	beq.n	8005008 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	f012 0f04 	tst.w	r2, #4
 8004fe8:	d00e      	beq.n	8005008 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fea:	f06f 0204 	mvn.w	r2, #4
 8004fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004ffc:	d05f      	beq.n	80050be <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	4620      	mov	r0, r4
 8005000:	f7ff ffce 	bl	8004fa0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005004:	2300      	movs	r3, #0
 8005006:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	f012 0f08 	tst.w	r2, #8
 8005010:	d012      	beq.n	8005038 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	f012 0f08 	tst.w	r2, #8
 8005018:	d00e      	beq.n	8005038 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800501a:	f06f 0208 	mvn.w	r2, #8
 800501e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005020:	2304      	movs	r3, #4
 8005022:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f013 0f03 	tst.w	r3, #3
 800502c:	d04e      	beq.n	80050cc <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	4620      	mov	r0, r4
 8005030:	f7ff ffb6 	bl	8004fa0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005034:	2300      	movs	r3, #0
 8005036:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	f012 0f10 	tst.w	r2, #16
 8005040:	d012      	beq.n	8005068 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	f012 0f10 	tst.w	r2, #16
 8005048:	d00e      	beq.n	8005068 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800504a:	f06f 0210 	mvn.w	r2, #16
 800504e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005050:	2308      	movs	r3, #8
 8005052:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	f413 7f40 	tst.w	r3, #768	; 0x300
 800505c:	d03d      	beq.n	80050da <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800505e:	4620      	mov	r0, r4
 8005060:	f7ff ff9e 	bl	8004fa0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005064:	2300      	movs	r3, #0
 8005066:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	f012 0f01 	tst.w	r2, #1
 8005070:	d003      	beq.n	800507a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	f012 0f01 	tst.w	r2, #1
 8005078:	d136      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005082:	d003      	beq.n	800508c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	f012 0f80 	tst.w	r2, #128	; 0x80
 800508a:	d134      	bne.n	80050f6 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	f012 0f40 	tst.w	r2, #64	; 0x40
 800509c:	d132      	bne.n	8005104 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	f012 0f20 	tst.w	r2, #32
 80050a6:	d003      	beq.n	80050b0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	f012 0f20 	tst.w	r2, #32
 80050ae:	d130      	bne.n	8005112 <HAL_TIM_IRQHandler+0x16c>
}
 80050b0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b2:	f7ff ff74 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b6:	4620      	mov	r0, r4
 80050b8:	f7ff ff73 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
 80050bc:	e78a      	b.n	8004fd4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	4620      	mov	r0, r4
 80050c0:	f7ff ff6d 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	4620      	mov	r0, r4
 80050c6:	f7ff ff6c 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
 80050ca:	e79b      	b.n	8005004 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050cc:	4620      	mov	r0, r4
 80050ce:	f7ff ff66 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7ff ff65 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
 80050d8:	e7ac      	b.n	8005034 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050da:	4620      	mov	r0, r4
 80050dc:	f7ff ff5f 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7ff ff5e 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
 80050e6:	e7bd      	b.n	8005064 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e8:	f06f 0201 	mvn.w	r2, #1
 80050ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ee:	4620      	mov	r0, r4
 80050f0:	f003 fcb0 	bl	8008a54 <HAL_TIM_PeriodElapsedCallback>
 80050f4:	e7c1      	b.n	800507a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 f9b3 	bl	8005468 <HAL_TIMEx_BreakCallback>
 8005102:	e7c3      	b.n	800508c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005104:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005108:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800510a:	4620      	mov	r0, r4
 800510c:	f7ff ff4a 	bl	8004fa4 <HAL_TIM_TriggerCallback>
 8005110:	e7c5      	b.n	800509e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005112:	f06f 0220 	mvn.w	r2, #32
 8005116:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005118:	4620      	mov	r0, r4
 800511a:	f000 f9a4 	bl	8005466 <HAL_TIMEx_CommutCallback>
}
 800511e:	e7c7      	b.n	80050b0 <HAL_TIM_IRQHandler+0x10a>

08005120 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005120:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005122:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <TIM_Base_SetConfig+0x98>)
 8005124:	4290      	cmp	r0, r2
 8005126:	d00e      	beq.n	8005146 <TIM_Base_SetConfig+0x26>
 8005128:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800512c:	d00b      	beq.n	8005146 <TIM_Base_SetConfig+0x26>
 800512e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005132:	4290      	cmp	r0, r2
 8005134:	d007      	beq.n	8005146 <TIM_Base_SetConfig+0x26>
 8005136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800513a:	4290      	cmp	r0, r2
 800513c:	d003      	beq.n	8005146 <TIM_Base_SetConfig+0x26>
 800513e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005142:	4290      	cmp	r0, r2
 8005144:	d103      	bne.n	800514e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800514a:	684a      	ldr	r2, [r1, #4]
 800514c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514e:	4a1a      	ldr	r2, [pc, #104]	; (80051b8 <TIM_Base_SetConfig+0x98>)
 8005150:	4290      	cmp	r0, r2
 8005152:	d01a      	beq.n	800518a <TIM_Base_SetConfig+0x6a>
 8005154:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005158:	d017      	beq.n	800518a <TIM_Base_SetConfig+0x6a>
 800515a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800515e:	4290      	cmp	r0, r2
 8005160:	d013      	beq.n	800518a <TIM_Base_SetConfig+0x6a>
 8005162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005166:	4290      	cmp	r0, r2
 8005168:	d00f      	beq.n	800518a <TIM_Base_SetConfig+0x6a>
 800516a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800516e:	4290      	cmp	r0, r2
 8005170:	d00b      	beq.n	800518a <TIM_Base_SetConfig+0x6a>
 8005172:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005176:	4290      	cmp	r0, r2
 8005178:	d007      	beq.n	800518a <TIM_Base_SetConfig+0x6a>
 800517a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800517e:	4290      	cmp	r0, r2
 8005180:	d003      	beq.n	800518a <TIM_Base_SetConfig+0x6a>
 8005182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005186:	4290      	cmp	r0, r2
 8005188:	d103      	bne.n	8005192 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800518a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518e:	68ca      	ldr	r2, [r1, #12]
 8005190:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005196:	694a      	ldr	r2, [r1, #20]
 8005198:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800519a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800519c:	688b      	ldr	r3, [r1, #8]
 800519e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80051a0:	680b      	ldr	r3, [r1, #0]
 80051a2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <TIM_Base_SetConfig+0x98>)
 80051a6:	4298      	cmp	r0, r3
 80051a8:	d002      	beq.n	80051b0 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80051aa:	2301      	movs	r3, #1
 80051ac:	6143      	str	r3, [r0, #20]
}
 80051ae:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80051b0:	690b      	ldr	r3, [r1, #16]
 80051b2:	6303      	str	r3, [r0, #48]	; 0x30
 80051b4:	e7f9      	b.n	80051aa <TIM_Base_SetConfig+0x8a>
 80051b6:	bf00      	nop
 80051b8:	40010000 	.word	0x40010000

080051bc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80051bc:	b1a8      	cbz	r0, 80051ea <HAL_TIM_Base_Init+0x2e>
{
 80051be:	b510      	push	{r4, lr}
 80051c0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80051c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051c6:	b15b      	cbz	r3, 80051e0 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	2302      	movs	r3, #2
 80051ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ce:	1d21      	adds	r1, r4, #4
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	f7ff ffa5 	bl	8005120 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80051dc:	2000      	movs	r0, #0
}
 80051de:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80051e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80051e4:	f003 fdfe 	bl	8008de4 <HAL_TIM_Base_MspInit>
 80051e8:	e7ee      	b.n	80051c8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80051ea:	2001      	movs	r0, #1
}
 80051ec:	4770      	bx	lr

080051ee <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80051ee:	b1a8      	cbz	r0, 800521c <HAL_TIM_PWM_Init+0x2e>
{
 80051f0:	b510      	push	{r4, lr}
 80051f2:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80051f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051f8:	b15b      	cbz	r3, 8005212 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80051fa:	2302      	movs	r3, #2
 80051fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005200:	1d21      	adds	r1, r4, #4
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	f7ff ff8c 	bl	8005120 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005208:	2301      	movs	r3, #1
 800520a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800520e:	2000      	movs	r0, #0
}
 8005210:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005212:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005216:	f003 fdcd 	bl	8008db4 <HAL_TIM_PWM_MspInit>
 800521a:	e7ee      	b.n	80051fa <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800521c:	2001      	movs	r0, #1
}
 800521e:	4770      	bx	lr

08005220 <TIM_OC2_SetConfig>:
{
 8005220:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005222:	6a03      	ldr	r3, [r0, #32]
 8005224:	f023 0310 	bic.w	r3, r3, #16
 8005228:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800522a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800522c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800522e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005230:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	680d      	ldr	r5, [r1, #0]
 8005236:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800523a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800523e:	688d      	ldr	r5, [r1, #8]
 8005240:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005244:	4d0e      	ldr	r5, [pc, #56]	; (8005280 <TIM_OC2_SetConfig+0x60>)
 8005246:	42a8      	cmp	r0, r5
 8005248:	d009      	beq.n	800525e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	4d0d      	ldr	r5, [pc, #52]	; (8005280 <TIM_OC2_SetConfig+0x60>)
 800524c:	42a8      	cmp	r0, r5
 800524e:	d00e      	beq.n	800526e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8005250:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005252:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005254:	684a      	ldr	r2, [r1, #4]
 8005256:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005258:	6203      	str	r3, [r0, #32]
}
 800525a:	bc30      	pop	{r4, r5}
 800525c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800525e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005262:	68cd      	ldr	r5, [r1, #12]
 8005264:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800526c:	e7ed      	b.n	800524a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800526e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005272:	694d      	ldr	r5, [r1, #20]
 8005274:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005278:	698d      	ldr	r5, [r1, #24]
 800527a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800527e:	e7e7      	b.n	8005250 <TIM_OC2_SetConfig+0x30>
 8005280:	40010000 	.word	0x40010000

08005284 <HAL_TIM_PWM_ConfigChannel>:
{
 8005284:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005286:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d066      	beq.n	800535c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800528e:	460d      	mov	r5, r1
 8005290:	4604      	mov	r4, r0
 8005292:	2301      	movs	r3, #1
 8005294:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	2302      	movs	r3, #2
 800529a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800529e:	2a0c      	cmp	r2, #12
 80052a0:	d81a      	bhi.n	80052d8 <HAL_TIM_PWM_ConfigChannel+0x54>
 80052a2:	e8df f002 	tbb	[pc, r2]
 80052a6:	1907      	.short	0x1907
 80052a8:	19201919 	.word	0x19201919
 80052ac:	19341919 	.word	0x19341919
 80052b0:	1919      	.short	0x1919
 80052b2:	47          	.byte	0x47
 80052b3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052b4:	6800      	ldr	r0, [r0, #0]
 80052b6:	f7ff fdcb 	bl	8004e50 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ba:	6822      	ldr	r2, [r4, #0]
 80052bc:	6993      	ldr	r3, [r2, #24]
 80052be:	f043 0308 	orr.w	r3, r3, #8
 80052c2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	6993      	ldr	r3, [r2, #24]
 80052c8:	f023 0304 	bic.w	r3, r3, #4
 80052cc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052ce:	6822      	ldr	r2, [r4, #0]
 80052d0:	6993      	ldr	r3, [r2, #24]
 80052d2:	6929      	ldr	r1, [r5, #16]
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80052d8:	2301      	movs	r3, #1
 80052da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80052de:	2000      	movs	r0, #0
 80052e0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80052e4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e6:	6800      	ldr	r0, [r0, #0]
 80052e8:	f7ff ff9a 	bl	8005220 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	6993      	ldr	r3, [r2, #24]
 80052f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052f4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	6993      	ldr	r3, [r2, #24]
 80052fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052fe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005300:	6822      	ldr	r2, [r4, #0]
 8005302:	6993      	ldr	r3, [r2, #24]
 8005304:	6929      	ldr	r1, [r5, #16]
 8005306:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800530a:	6193      	str	r3, [r2, #24]
      break;
 800530c:	e7e4      	b.n	80052d8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800530e:	6800      	ldr	r0, [r0, #0]
 8005310:	f7ff fdcc 	bl	8004eac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005314:	6822      	ldr	r2, [r4, #0]
 8005316:	69d3      	ldr	r3, [r2, #28]
 8005318:	f043 0308 	orr.w	r3, r3, #8
 800531c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800531e:	6822      	ldr	r2, [r4, #0]
 8005320:	69d3      	ldr	r3, [r2, #28]
 8005322:	f023 0304 	bic.w	r3, r3, #4
 8005326:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005328:	6822      	ldr	r2, [r4, #0]
 800532a:	69d3      	ldr	r3, [r2, #28]
 800532c:	6929      	ldr	r1, [r5, #16]
 800532e:	430b      	orrs	r3, r1
 8005330:	61d3      	str	r3, [r2, #28]
      break;
 8005332:	e7d1      	b.n	80052d8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005334:	6800      	ldr	r0, [r0, #0]
 8005336:	f7ff fdeb 	bl	8004f10 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	69d3      	ldr	r3, [r2, #28]
 800533e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005342:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005344:	6822      	ldr	r2, [r4, #0]
 8005346:	69d3      	ldr	r3, [r2, #28]
 8005348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800534c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800534e:	6822      	ldr	r2, [r4, #0]
 8005350:	69d3      	ldr	r3, [r2, #28]
 8005352:	6929      	ldr	r1, [r5, #16]
 8005354:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005358:	61d3      	str	r3, [r2, #28]
      break;
 800535a:	e7bd      	b.n	80052d8 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800535c:	2002      	movs	r0, #2
 800535e:	e7c1      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x60>

08005360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005360:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005362:	f001 011f 	and.w	r1, r1, #31
 8005366:	2301      	movs	r3, #1
 8005368:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800536c:	6a03      	ldr	r3, [r0, #32]
 800536e:	ea23 0304 	bic.w	r3, r3, r4
 8005372:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005374:	6a03      	ldr	r3, [r0, #32]
 8005376:	408a      	lsls	r2, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	6203      	str	r3, [r0, #32]
}
 800537c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <HAL_TIM_PWM_Start>:
{
 8005384:	b510      	push	{r4, lr}
 8005386:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005388:	2201      	movs	r2, #1
 800538a:	6800      	ldr	r0, [r0, #0]
 800538c:	f7ff ffe8 	bl	8005360 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <HAL_TIM_PWM_Start+0x38>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00b      	beq.n	80053b0 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005398:	6822      	ldr	r2, [r4, #0]
 800539a:	6893      	ldr	r3, [r2, #8]
 800539c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a0:	2b06      	cmp	r3, #6
 80053a2:	d003      	beq.n	80053ac <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 80053a4:	6813      	ldr	r3, [r2, #0]
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	6013      	str	r3, [r2, #0]
}
 80053ac:	2000      	movs	r0, #0
 80053ae:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80053b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053b6:	645a      	str	r2, [r3, #68]	; 0x44
 80053b8:	e7ee      	b.n	8005398 <HAL_TIM_PWM_Start+0x14>
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000

080053c0 <HAL_TIM_PWM_Stop>:
{
 80053c0:	b510      	push	{r4, lr}
 80053c2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053c4:	2200      	movs	r2, #0
 80053c6:	6800      	ldr	r0, [r0, #0]
 80053c8:	f7ff ffca 	bl	8005360 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	4a13      	ldr	r2, [pc, #76]	; (800541c <HAL_TIM_PWM_Stop+0x5c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <HAL_TIM_PWM_Stop+0x3c>
  __HAL_TIM_DISABLE(htim);
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	6a19      	ldr	r1, [r3, #32]
 80053d8:	f241 1211 	movw	r2, #4369	; 0x1111
 80053dc:	4211      	tst	r1, r2
 80053de:	d108      	bne.n	80053f2 <HAL_TIM_PWM_Stop+0x32>
 80053e0:	6a19      	ldr	r1, [r3, #32]
 80053e2:	f240 4244 	movw	r2, #1092	; 0x444
 80053e6:	4211      	tst	r1, r2
 80053e8:	d103      	bne.n	80053f2 <HAL_TIM_PWM_Stop+0x32>
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80053f8:	2000      	movs	r0, #0
 80053fa:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80053fc:	6a19      	ldr	r1, [r3, #32]
 80053fe:	f241 1211 	movw	r2, #4369	; 0x1111
 8005402:	4211      	tst	r1, r2
 8005404:	d1e6      	bne.n	80053d4 <HAL_TIM_PWM_Stop+0x14>
 8005406:	6a19      	ldr	r1, [r3, #32]
 8005408:	f240 4244 	movw	r2, #1092	; 0x444
 800540c:	4211      	tst	r1, r2
 800540e:	d1e1      	bne.n	80053d4 <HAL_TIM_PWM_Stop+0x14>
 8005410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005416:	645a      	str	r2, [r3, #68]	; 0x44
 8005418:	e7dc      	b.n	80053d4 <HAL_TIM_PWM_Stop+0x14>
 800541a:	bf00      	nop
 800541c:	40010000 	.word	0x40010000

08005420 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005420:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d01c      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8005428:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800542a:	2601      	movs	r6, #1
 800542c:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	2302      	movs	r3, #2
 8005432:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005436:	6802      	ldr	r2, [r0, #0]
 8005438:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800543a:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800543c:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005440:	680c      	ldr	r4, [r1, #0]
 8005442:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005444:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005448:	684b      	ldr	r3, [r1, #4]
 800544a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800544c:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800544e:	6802      	ldr	r2, [r0, #0]
 8005450:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005452:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005456:	2300      	movs	r3, #0
 8005458:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800545c:	4618      	mov	r0, r3
}
 800545e:	bc70      	pop	{r4, r5, r6}
 8005460:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005462:	2002      	movs	r0, #2
}
 8005464:	4770      	bx	lr

08005466 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005466:	4770      	bx	lr

08005468 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005468:	4770      	bx	lr

0800546a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546a:	6802      	ldr	r2, [r0, #0]
 800546c:	68d3      	ldr	r3, [r2, #12]
 800546e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005472:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005474:	6802      	ldr	r2, [r0, #0]
 8005476:	6953      	ldr	r3, [r2, #20]
 8005478:	f023 0301 	bic.w	r3, r3, #1
 800547c:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800547e:	2320      	movs	r3, #32
 8005480:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8005484:	4770      	bx	lr

08005486 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005486:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b21      	cmp	r3, #33	; 0x21
 800548e:	d12a      	bne.n	80054e6 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005490:	6883      	ldr	r3, [r0, #8]
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005496:	d016      	beq.n	80054c6 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005498:	6a03      	ldr	r3, [r0, #32]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	6202      	str	r2, [r0, #32]
 800549e:	781a      	ldrb	r2, [r3, #0]
 80054a0:	6803      	ldr	r3, [r0, #0]
 80054a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054a4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	84c3      	strh	r3, [r0, #38]	; 0x26
 80054ac:	b9eb      	cbnz	r3, 80054ea <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054ae:	6802      	ldr	r2, [r0, #0]
 80054b0:	68d3      	ldr	r3, [r2, #12]
 80054b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b6:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054b8:	6802      	ldr	r2, [r0, #0]
 80054ba:	68d3      	ldr	r3, [r2, #12]
 80054bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c0:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 80054c2:	2000      	movs	r0, #0
 80054c4:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054c6:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	6802      	ldr	r2, [r0, #0]
 80054cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d0:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054d2:	6903      	ldr	r3, [r0, #16]
 80054d4:	b91b      	cbnz	r3, 80054de <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80054d6:	6a03      	ldr	r3, [r0, #32]
 80054d8:	3302      	adds	r3, #2
 80054da:	6203      	str	r3, [r0, #32]
 80054dc:	e7e2      	b.n	80054a4 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80054de:	6a03      	ldr	r3, [r0, #32]
 80054e0:	3301      	adds	r3, #1
 80054e2:	6203      	str	r3, [r0, #32]
 80054e4:	e7de      	b.n	80054a4 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80054e6:	2002      	movs	r0, #2
 80054e8:	4770      	bx	lr
    return HAL_OK;
 80054ea:	2000      	movs	r0, #0
  }
}
 80054ec:	4770      	bx	lr
	...

080054f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f4:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054f6:	6802      	ldr	r2, [r0, #0]
 80054f8:	6913      	ldr	r3, [r2, #16]
 80054fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054fe:	68c1      	ldr	r1, [r0, #12]
 8005500:	430b      	orrs	r3, r1
 8005502:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005504:	6883      	ldr	r3, [r0, #8]
 8005506:	6902      	ldr	r2, [r0, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	6942      	ldr	r2, [r0, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	69c2      	ldr	r2, [r0, #28]
 8005510:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005512:	6801      	ldr	r1, [r0, #0]
 8005514:	68cb      	ldr	r3, [r1, #12]
 8005516:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800551a:	f023 030c 	bic.w	r3, r3, #12
 800551e:	4313      	orrs	r3, r2
 8005520:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005522:	6802      	ldr	r2, [r0, #0]
 8005524:	6953      	ldr	r3, [r2, #20]
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	6981      	ldr	r1, [r0, #24]
 800552c:	430b      	orrs	r3, r1
 800552e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005530:	69c3      	ldr	r3, [r0, #28]
 8005532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005536:	d060      	beq.n	80055fa <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005538:	6803      	ldr	r3, [r0, #0]
 800553a:	4ab8      	ldr	r2, [pc, #736]	; (800581c <UART_SetConfig+0x32c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	f000 8114 	beq.w	800576a <UART_SetConfig+0x27a>
 8005542:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005546:	4293      	cmp	r3, r2
 8005548:	f000 810f 	beq.w	800576a <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800554c:	f7ff f8a4 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005550:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005554:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005558:	6865      	ldr	r5, [r4, #4]
 800555a:	00ad      	lsls	r5, r5, #2
 800555c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005560:	4faf      	ldr	r7, [pc, #700]	; (8005820 <UART_SetConfig+0x330>)
 8005562:	fba7 3505 	umull	r3, r5, r7, r5
 8005566:	096d      	lsrs	r5, r5, #5
 8005568:	012e      	lsls	r6, r5, #4
 800556a:	f7ff f895 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 800556e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005572:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005576:	6865      	ldr	r5, [r4, #4]
 8005578:	00ad      	lsls	r5, r5, #2
 800557a:	fbb0 f9f5 	udiv	r9, r0, r5
 800557e:	f7ff f88b 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005582:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005586:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800558a:	6865      	ldr	r5, [r4, #4]
 800558c:	00ad      	lsls	r5, r5, #2
 800558e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005592:	fba7 3505 	umull	r3, r5, r7, r5
 8005596:	096d      	lsrs	r5, r5, #5
 8005598:	f04f 0864 	mov.w	r8, #100	; 0x64
 800559c:	fb08 9515 	mls	r5, r8, r5, r9
 80055a0:	012d      	lsls	r5, r5, #4
 80055a2:	3532      	adds	r5, #50	; 0x32
 80055a4:	fba7 3505 	umull	r3, r5, r7, r5
 80055a8:	096d      	lsrs	r5, r5, #5
 80055aa:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80055ae:	4435      	add	r5, r6
 80055b0:	f7ff f872 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 80055b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055bc:	6866      	ldr	r6, [r4, #4]
 80055be:	00b6      	lsls	r6, r6, #2
 80055c0:	fbb0 f6f6 	udiv	r6, r0, r6
 80055c4:	f7ff f868 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 80055c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055d0:	6863      	ldr	r3, [r4, #4]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80055d8:	fba7 3000 	umull	r3, r0, r7, r0
 80055dc:	0940      	lsrs	r0, r0, #5
 80055de:	fb08 6810 	mls	r8, r8, r0, r6
 80055e2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80055e6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80055ea:	fba7 3708 	umull	r3, r7, r7, r8
 80055ee:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	442f      	add	r7, r5
 80055f6:	609f      	str	r7, [r3, #8]
    }
  }
}
 80055f8:	e10d      	b.n	8005816 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055fa:	6803      	ldr	r3, [r0, #0]
 80055fc:	4a87      	ldr	r2, [pc, #540]	; (800581c <UART_SetConfig+0x32c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d05b      	beq.n	80056ba <UART_SetConfig+0x1ca>
 8005602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005606:	4293      	cmp	r3, r2
 8005608:	d057      	beq.n	80056ba <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800560a:	f7ff f845 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 800560e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005612:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005616:	6865      	ldr	r5, [r4, #4]
 8005618:	006d      	lsls	r5, r5, #1
 800561a:	fbb0 f5f5 	udiv	r5, r0, r5
 800561e:	4f80      	ldr	r7, [pc, #512]	; (8005820 <UART_SetConfig+0x330>)
 8005620:	fba7 3505 	umull	r3, r5, r7, r5
 8005624:	096d      	lsrs	r5, r5, #5
 8005626:	012e      	lsls	r6, r5, #4
 8005628:	f7ff f836 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 800562c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005634:	6865      	ldr	r5, [r4, #4]
 8005636:	006d      	lsls	r5, r5, #1
 8005638:	fbb0 f9f5 	udiv	r9, r0, r5
 800563c:	f7ff f82c 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005640:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005644:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005648:	6865      	ldr	r5, [r4, #4]
 800564a:	006d      	lsls	r5, r5, #1
 800564c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005650:	fba7 3505 	umull	r3, r5, r7, r5
 8005654:	096d      	lsrs	r5, r5, #5
 8005656:	f04f 0864 	mov.w	r8, #100	; 0x64
 800565a:	fb08 9515 	mls	r5, r8, r5, r9
 800565e:	00ed      	lsls	r5, r5, #3
 8005660:	3532      	adds	r5, #50	; 0x32
 8005662:	fba7 3505 	umull	r3, r5, r7, r5
 8005666:	096d      	lsrs	r5, r5, #5
 8005668:	006d      	lsls	r5, r5, #1
 800566a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800566e:	4435      	add	r5, r6
 8005670:	f7ff f812 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005674:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005678:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800567c:	6866      	ldr	r6, [r4, #4]
 800567e:	0076      	lsls	r6, r6, #1
 8005680:	fbb0 f6f6 	udiv	r6, r0, r6
 8005684:	f7ff f808 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005688:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800568c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005690:	6863      	ldr	r3, [r4, #4]
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	fbb0 f3f3 	udiv	r3, r0, r3
 8005698:	fba7 2303 	umull	r2, r3, r7, r3
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	fb08 6813 	mls	r8, r8, r3, r6
 80056a2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80056a6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80056aa:	fba7 3708 	umull	r3, r7, r7, r8
 80056ae:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	442f      	add	r7, r5
 80056b6:	609f      	str	r7, [r3, #8]
 80056b8:	e0ad      	b.n	8005816 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80056ba:	f7fe fffd 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 80056be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056c6:	6865      	ldr	r5, [r4, #4]
 80056c8:	006d      	lsls	r5, r5, #1
 80056ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80056ce:	4f54      	ldr	r7, [pc, #336]	; (8005820 <UART_SetConfig+0x330>)
 80056d0:	fba7 3505 	umull	r3, r5, r7, r5
 80056d4:	096d      	lsrs	r5, r5, #5
 80056d6:	012e      	lsls	r6, r5, #4
 80056d8:	f7fe ffee 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 80056dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056e4:	6865      	ldr	r5, [r4, #4]
 80056e6:	006d      	lsls	r5, r5, #1
 80056e8:	fbb0 f9f5 	udiv	r9, r0, r5
 80056ec:	f7fe ffe4 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 80056f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056f8:	6865      	ldr	r5, [r4, #4]
 80056fa:	006d      	lsls	r5, r5, #1
 80056fc:	fbb0 f5f5 	udiv	r5, r0, r5
 8005700:	fba7 3505 	umull	r3, r5, r7, r5
 8005704:	096d      	lsrs	r5, r5, #5
 8005706:	f04f 0864 	mov.w	r8, #100	; 0x64
 800570a:	fb08 9515 	mls	r5, r8, r5, r9
 800570e:	00ed      	lsls	r5, r5, #3
 8005710:	3532      	adds	r5, #50	; 0x32
 8005712:	fba7 3505 	umull	r3, r5, r7, r5
 8005716:	096d      	lsrs	r5, r5, #5
 8005718:	006d      	lsls	r5, r5, #1
 800571a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800571e:	4435      	add	r5, r6
 8005720:	f7fe ffca 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 8005724:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005728:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800572c:	6866      	ldr	r6, [r4, #4]
 800572e:	0076      	lsls	r6, r6, #1
 8005730:	fbb0 f6f6 	udiv	r6, r0, r6
 8005734:	f7fe ffc0 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 8005738:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800573c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	fbb0 f3f3 	udiv	r3, r0, r3
 8005748:	fba7 2303 	umull	r2, r3, r7, r3
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	fb08 6813 	mls	r8, r8, r3, r6
 8005752:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005756:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800575a:	fba7 3708 	umull	r3, r7, r7, r8
 800575e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	442f      	add	r7, r5
 8005766:	609f      	str	r7, [r3, #8]
 8005768:	e055      	b.n	8005816 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800576a:	f7fe ffa5 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 800576e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005772:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005776:	6865      	ldr	r5, [r4, #4]
 8005778:	00ad      	lsls	r5, r5, #2
 800577a:	fbb0 f5f5 	udiv	r5, r0, r5
 800577e:	4f28      	ldr	r7, [pc, #160]	; (8005820 <UART_SetConfig+0x330>)
 8005780:	fba7 3505 	umull	r3, r5, r7, r5
 8005784:	096d      	lsrs	r5, r5, #5
 8005786:	012e      	lsls	r6, r5, #4
 8005788:	f7fe ff96 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 800578c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005790:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005794:	6865      	ldr	r5, [r4, #4]
 8005796:	00ad      	lsls	r5, r5, #2
 8005798:	fbb0 f9f5 	udiv	r9, r0, r5
 800579c:	f7fe ff8c 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 80057a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057a8:	6865      	ldr	r5, [r4, #4]
 80057aa:	00ad      	lsls	r5, r5, #2
 80057ac:	fbb0 f5f5 	udiv	r5, r0, r5
 80057b0:	fba7 3505 	umull	r3, r5, r7, r5
 80057b4:	096d      	lsrs	r5, r5, #5
 80057b6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80057ba:	fb08 9515 	mls	r5, r8, r5, r9
 80057be:	012d      	lsls	r5, r5, #4
 80057c0:	3532      	adds	r5, #50	; 0x32
 80057c2:	fba7 3505 	umull	r3, r5, r7, r5
 80057c6:	096d      	lsrs	r5, r5, #5
 80057c8:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80057cc:	4435      	add	r5, r6
 80057ce:	f7fe ff73 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 80057d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057da:	6866      	ldr	r6, [r4, #4]
 80057dc:	00b6      	lsls	r6, r6, #2
 80057de:	fbb0 f6f6 	udiv	r6, r0, r6
 80057e2:	f7fe ff69 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 80057e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057ee:	6863      	ldr	r3, [r4, #4]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80057f6:	fba7 3000 	umull	r3, r0, r7, r0
 80057fa:	0940      	lsrs	r0, r0, #5
 80057fc:	fb08 6810 	mls	r8, r8, r0, r6
 8005800:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005804:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005808:	fba7 3708 	umull	r3, r7, r7, r8
 800580c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	442f      	add	r7, r5
 8005814:	609f      	str	r7, [r3, #8]
}
 8005816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800581a:	bf00      	nop
 800581c:	40011000 	.word	0x40011000
 8005820:	51eb851f 	.word	0x51eb851f

08005824 <UART_WaitOnFlagUntilTimeout>:
{
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	4605      	mov	r5, r0
 800582a:	460f      	mov	r7, r1
 800582c:	4616      	mov	r6, r2
 800582e:	4698      	mov	r8, r3
 8005830:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005832:	682b      	ldr	r3, [r5, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	ea37 0303 	bics.w	r3, r7, r3
 800583a:	bf0c      	ite	eq
 800583c:	2301      	moveq	r3, #1
 800583e:	2300      	movne	r3, #0
 8005840:	42b3      	cmp	r3, r6
 8005842:	d11d      	bne.n	8005880 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005844:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005848:	d0f3      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800584a:	b12c      	cbz	r4, 8005858 <UART_WaitOnFlagUntilTimeout+0x34>
 800584c:	f7fd fbd4 	bl	8002ff8 <HAL_GetTick>
 8005850:	eba0 0008 	sub.w	r0, r0, r8
 8005854:	42a0      	cmp	r0, r4
 8005856:	d9ec      	bls.n	8005832 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005858:	682a      	ldr	r2, [r5, #0]
 800585a:	68d3      	ldr	r3, [r2, #12]
 800585c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005860:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	682a      	ldr	r2, [r5, #0]
 8005864:	6953      	ldr	r3, [r2, #20]
 8005866:	f023 0301 	bic.w	r3, r3, #1
 800586a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800586c:	2320      	movs	r3, #32
 800586e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005872:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8005876:	2300      	movs	r3, #0
 8005878:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 800587c:	2003      	movs	r0, #3
 800587e:	e000      	b.n	8005882 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8005880:	2000      	movs	r0, #0
}
 8005882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005886 <HAL_UART_Init>:
  if (huart == NULL)
 8005886:	b358      	cbz	r0, 80058e0 <HAL_UART_Init+0x5a>
{
 8005888:	b510      	push	{r4, lr}
 800588a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800588c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005890:	b30b      	cbz	r3, 80058d6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005892:	2324      	movs	r3, #36	; 0x24
 8005894:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	68d3      	ldr	r3, [r2, #12]
 800589c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058a0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80058a2:	4620      	mov	r0, r4
 80058a4:	f7ff fe24 	bl	80054f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	6913      	ldr	r3, [r2, #16]
 80058ac:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80058b0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	6953      	ldr	r3, [r2, #20]
 80058b6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80058ba:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	68d3      	ldr	r3, [r2, #12]
 80058c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058c4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c6:	2000      	movs	r0, #0
 80058c8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80058ca:	2320      	movs	r3, #32
 80058cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80058d0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80058d4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80058d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80058da:	f003 ffdb 	bl	8009894 <HAL_UART_MspInit>
 80058de:	e7d8      	b.n	8005892 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80058e0:	2001      	movs	r0, #1
}
 80058e2:	4770      	bx	lr

080058e4 <HAL_UART_Transmit>:
{
 80058e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80058ec:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d155      	bne.n	80059a2 <HAL_UART_Transmit+0xbe>
 80058f6:	4604      	mov	r4, r0
 80058f8:	460d      	mov	r5, r1
 80058fa:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80058fc:	2900      	cmp	r1, #0
 80058fe:	d055      	beq.n	80059ac <HAL_UART_Transmit+0xc8>
 8005900:	2a00      	cmp	r2, #0
 8005902:	d055      	beq.n	80059b0 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8005904:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005908:	2b01      	cmp	r3, #1
 800590a:	d053      	beq.n	80059b4 <HAL_UART_Transmit+0xd0>
 800590c:	2301      	movs	r3, #1
 800590e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005912:	2300      	movs	r3, #0
 8005914:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005916:	2321      	movs	r3, #33	; 0x21
 8005918:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800591c:	f7fd fb6c 	bl	8002ff8 <HAL_GetTick>
 8005920:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005922:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005926:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800592a:	e010      	b.n	800594e <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800592c:	9600      	str	r6, [sp, #0]
 800592e:	463b      	mov	r3, r7
 8005930:	2200      	movs	r2, #0
 8005932:	2180      	movs	r1, #128	; 0x80
 8005934:	4620      	mov	r0, r4
 8005936:	f7ff ff75 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 800593a:	2800      	cmp	r0, #0
 800593c:	d13c      	bne.n	80059b8 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800593e:	882b      	ldrh	r3, [r5, #0]
 8005940:	6822      	ldr	r2, [r4, #0]
 8005942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005946:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005948:	6923      	ldr	r3, [r4, #16]
 800594a:	b9c3      	cbnz	r3, 800597e <HAL_UART_Transmit+0x9a>
          pData += 2U;
 800594c:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800594e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005950:	b29b      	uxth	r3, r3
 8005952:	b1b3      	cbz	r3, 8005982 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8005954:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005956:	3b01      	subs	r3, #1
 8005958:	b29b      	uxth	r3, r3
 800595a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800595c:	68a3      	ldr	r3, [r4, #8]
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	d0e3      	beq.n	800592c <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005964:	9600      	str	r6, [sp, #0]
 8005966:	463b      	mov	r3, r7
 8005968:	2200      	movs	r2, #0
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	4620      	mov	r0, r4
 800596e:	f7ff ff59 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 8005972:	bb18      	cbnz	r0, 80059bc <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005974:	782a      	ldrb	r2, [r5, #0]
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	3501      	adds	r5, #1
 800597c:	e7e7      	b.n	800594e <HAL_UART_Transmit+0x6a>
          pData += 1U;
 800597e:	3501      	adds	r5, #1
 8005980:	e7e5      	b.n	800594e <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005982:	9600      	str	r6, [sp, #0]
 8005984:	463b      	mov	r3, r7
 8005986:	2200      	movs	r2, #0
 8005988:	2140      	movs	r1, #64	; 0x40
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff ff4a 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	b9a8      	cbnz	r0, 80059c0 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8005994:	2220      	movs	r2, #32
 8005996:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800599a:	2200      	movs	r2, #0
 800599c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 80059a0:	e000      	b.n	80059a4 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 80059a2:	2302      	movs	r3, #2
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	b002      	add	sp, #8
 80059a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e7f9      	b.n	80059a4 <HAL_UART_Transmit+0xc0>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e7f7      	b.n	80059a4 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 80059b4:	2302      	movs	r3, #2
 80059b6:	e7f5      	b.n	80059a4 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e7f3      	b.n	80059a4 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e7f1      	b.n	80059a4 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e7ef      	b.n	80059a4 <HAL_UART_Transmit+0xc0>

080059c4 <HAL_UART_TxCpltCallback>:
}
 80059c4:	4770      	bx	lr

080059c6 <UART_EndTransmit_IT>:
{
 80059c6:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059c8:	6801      	ldr	r1, [r0, #0]
 80059ca:	68cb      	ldr	r3, [r1, #12]
 80059cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d0:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80059d2:	2320      	movs	r3, #32
 80059d4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80059d8:	f7ff fff4 	bl	80059c4 <HAL_UART_TxCpltCallback>
}
 80059dc:	2000      	movs	r0, #0
 80059de:	bd08      	pop	{r3, pc}

080059e0 <HAL_UART_RxCpltCallback>:
}
 80059e0:	4770      	bx	lr

080059e2 <UART_Receive_IT>:
{
 80059e2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059e4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b22      	cmp	r3, #34	; 0x22
 80059ec:	d145      	bne.n	8005a7a <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059ee:	6883      	ldr	r3, [r0, #8]
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f4:	d00e      	beq.n	8005a14 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059f6:	6903      	ldr	r3, [r0, #16]
 80059f8:	bb03      	cbnz	r3, 8005a3c <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059fa:	6803      	ldr	r3, [r0, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a00:	1c59      	adds	r1, r3, #1
 8005a02:	6281      	str	r1, [r0, #40]	; 0x28
 8005a04:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8005a06:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005a0e:	b1f3      	cbz	r3, 8005a4e <UART_Receive_IT+0x6c>
    return HAL_OK;
 8005a10:	2000      	movs	r0, #0
 8005a12:	e033      	b.n	8005a7c <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005a14:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a16:	6903      	ldr	r3, [r0, #16]
 8005a18:	b943      	cbnz	r3, 8005a2c <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a1a:	6803      	ldr	r3, [r0, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a22:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8005a24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a26:	3302      	adds	r3, #2
 8005a28:	6283      	str	r3, [r0, #40]	; 0x28
 8005a2a:	e7ec      	b.n	8005a06 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005a2c:	6803      	ldr	r3, [r0, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8005a34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a36:	3301      	adds	r3, #1
 8005a38:	6283      	str	r3, [r0, #40]	; 0x28
 8005a3a:	e7e4      	b.n	8005a06 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a3c:	6803      	ldr	r3, [r0, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005a42:	1c51      	adds	r1, r2, #1
 8005a44:	6281      	str	r1, [r0, #40]	; 0x28
 8005a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a4a:	7013      	strb	r3, [r2, #0]
 8005a4c:	e7db      	b.n	8005a06 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a4e:	6802      	ldr	r2, [r0, #0]
 8005a50:	68d3      	ldr	r3, [r2, #12]
 8005a52:	f023 0320 	bic.w	r3, r3, #32
 8005a56:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a58:	6802      	ldr	r2, [r0, #0]
 8005a5a:	68d3      	ldr	r3, [r2, #12]
 8005a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a60:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a62:	6802      	ldr	r2, [r0, #0]
 8005a64:	6953      	ldr	r3, [r2, #20]
 8005a66:	f023 0301 	bic.w	r3, r3, #1
 8005a6a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005a72:	f7ff ffb5 	bl	80059e0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8005a76:	2000      	movs	r0, #0
 8005a78:	e000      	b.n	8005a7c <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8005a7a:	2002      	movs	r0, #2
}
 8005a7c:	bd08      	pop	{r3, pc}

08005a7e <HAL_UART_ErrorCallback>:
}
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UART_IRQHandler>:
{
 8005a80:	b510      	push	{r4, lr}
 8005a82:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a84:	6802      	ldr	r2, [r0, #0]
 8005a86:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a88:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a8a:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8005a8c:	f013 000f 	ands.w	r0, r3, #15
 8005a90:	d105      	bne.n	8005a9e <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a92:	f013 0f20 	tst.w	r3, #32
 8005a96:	d002      	beq.n	8005a9e <HAL_UART_IRQHandler+0x1e>
 8005a98:	f011 0f20 	tst.w	r1, #32
 8005a9c:	d153      	bne.n	8005b46 <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d067      	beq.n	8005b72 <HAL_UART_IRQHandler+0xf2>
 8005aa2:	f012 0201 	ands.w	r2, r2, #1
 8005aa6:	d102      	bne.n	8005aae <HAL_UART_IRQHandler+0x2e>
 8005aa8:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005aac:	d061      	beq.n	8005b72 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005aae:	f013 0f01 	tst.w	r3, #1
 8005ab2:	d006      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x42>
 8005ab4:	f411 7f80 	tst.w	r1, #256	; 0x100
 8005ab8:	d003      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005abc:	f040 0001 	orr.w	r0, r0, #1
 8005ac0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ac2:	f013 0f04 	tst.w	r3, #4
 8005ac6:	d004      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x52>
 8005ac8:	b11a      	cbz	r2, 8005ad2 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005acc:	f040 0002 	orr.w	r0, r0, #2
 8005ad0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ad2:	f013 0f02 	tst.w	r3, #2
 8005ad6:	d004      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x62>
 8005ad8:	b11a      	cbz	r2, 8005ae2 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ada:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005adc:	f040 0004 	orr.w	r0, r0, #4
 8005ae0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ae2:	f013 0f08 	tst.w	r3, #8
 8005ae6:	d004      	beq.n	8005af2 <HAL_UART_IRQHandler+0x72>
 8005ae8:	b11a      	cbz	r2, 8005af2 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005aec:	f042 0208 	orr.w	r2, r2, #8
 8005af0:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005af2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	d048      	beq.n	8005b8a <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005af8:	f013 0f20 	tst.w	r3, #32
 8005afc:	d002      	beq.n	8005b04 <HAL_UART_IRQHandler+0x84>
 8005afe:	f011 0f20 	tst.w	r1, #32
 8005b02:	d124      	bne.n	8005b4e <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b0e:	f012 0f08 	tst.w	r2, #8
 8005b12:	d100      	bne.n	8005b16 <HAL_UART_IRQHandler+0x96>
 8005b14:	b33b      	cbz	r3, 8005b66 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8005b16:	4620      	mov	r0, r4
 8005b18:	f7ff fca7 	bl	800546a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005b24:	d01b      	beq.n	8005b5e <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b26:	695a      	ldr	r2, [r3, #20]
 8005b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005b2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b30:	b18b      	cbz	r3, 8005b56 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b32:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <HAL_UART_IRQHandler+0x11c>)
 8005b34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b36:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005b38:	f7fd fadd 	bl	80030f6 <HAL_DMA_Abort_IT>
 8005b3c:	b328      	cbz	r0, 8005b8a <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b3e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005b40:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005b42:	4798      	blx	r3
 8005b44:	e021      	b.n	8005b8a <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8005b46:	4620      	mov	r0, r4
 8005b48:	f7ff ff4b 	bl	80059e2 <UART_Receive_IT>
      return;
 8005b4c:	e01d      	b.n	8005b8a <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f7ff ff47 	bl	80059e2 <UART_Receive_IT>
 8005b54:	e7d6      	b.n	8005b04 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8005b56:	4620      	mov	r0, r4
 8005b58:	f7ff ff91 	bl	8005a7e <HAL_UART_ErrorCallback>
 8005b5c:	e015      	b.n	8005b8a <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7ff ff8d 	bl	8005a7e <HAL_UART_ErrorCallback>
 8005b64:	e011      	b.n	8005b8a <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8005b66:	4620      	mov	r0, r4
 8005b68:	f7ff ff89 	bl	8005a7e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005b70:	e00b      	b.n	8005b8a <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b76:	d002      	beq.n	8005b7e <HAL_UART_IRQHandler+0xfe>
 8005b78:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005b7c:	d106      	bne.n	8005b8c <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b82:	d002      	beq.n	8005b8a <HAL_UART_IRQHandler+0x10a>
 8005b84:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005b88:	d104      	bne.n	8005b94 <HAL_UART_IRQHandler+0x114>
}
 8005b8a:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f7ff fc7a 	bl	8005486 <UART_Transmit_IT>
    return;
 8005b92:	e7fa      	b.n	8005b8a <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8005b94:	4620      	mov	r0, r4
 8005b96:	f7ff ff16 	bl	80059c6 <UART_EndTransmit_IT>
    return;
 8005b9a:	e7f6      	b.n	8005b8a <HAL_UART_IRQHandler+0x10a>
 8005b9c:	08005ba1 	.word	0x08005ba1

08005ba0 <UART_DMAAbortOnError>:
{
 8005ba0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ba2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ba8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005baa:	f7ff ff68 	bl	8005a7e <HAL_UART_ErrorCallback>
}
 8005bae:	bd08      	pop	{r3, pc}

08005bb0 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8005bb0:	2884      	cmp	r0, #132	; 0x84
 8005bb2:	d001      	beq.n	8005bb8 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8005bb4:	3003      	adds	r0, #3
 8005bb6:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005bb8:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8005bba:	4770      	bx	lr

08005bbc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005bbc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005bbe:	f001 f86d 	bl	8006c9c <vTaskStartScheduler>
  
  return osOK;
}
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	bd08      	pop	{r3, pc}

08005bc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005bc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	4604      	mov	r4, r0
 8005bce:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005bd0:	6945      	ldr	r5, [r0, #20]
 8005bd2:	b1a5      	cbz	r5, 8005bfe <osThreadCreate+0x38>
 8005bd4:	6986      	ldr	r6, [r0, #24]
 8005bd6:	b196      	cbz	r6, 8005bfe <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bd8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8005bdc:	f8d0 9000 	ldr.w	r9, [r0]
 8005be0:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8005be4:	f7ff ffe4 	bl	8005bb0 <makeFreeRtosPriority>
 8005be8:	6922      	ldr	r2, [r4, #16]
 8005bea:	9602      	str	r6, [sp, #8]
 8005bec:	9501      	str	r5, [sp, #4]
 8005bee:	9000      	str	r0, [sp, #0]
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	f000 ffe5 	bl	8006bc4 <xTaskCreateStatic>
 8005bfa:	9005      	str	r0, [sp, #20]
 8005bfc:	e013      	b.n	8005c26 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bfe:	6865      	ldr	r5, [r4, #4]
 8005c00:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c02:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c06:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8005c0a:	f7ff ffd1 	bl	8005bb0 <makeFreeRtosPriority>
 8005c0e:	ab05      	add	r3, sp, #20
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	9000      	str	r0, [sp, #0]
 8005c14:	463b      	mov	r3, r7
 8005c16:	fa1f f288 	uxth.w	r2, r8
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f001 f80a 	bl	8006c36 <xTaskCreate>
 8005c22:	2801      	cmp	r0, #1
 8005c24:	d103      	bne.n	8005c2e <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005c26:	9805      	ldr	r0, [sp, #20]
}
 8005c28:	b007      	add	sp, #28
 8005c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e7fa      	b.n	8005c28 <osThreadCreate+0x62>

08005c32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005c32:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005c34:	4603      	mov	r3, r0
 8005c36:	b900      	cbnz	r0, 8005c3a <osDelay+0x8>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 f9a6 	bl	8006f8c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c40:	2000      	movs	r0, #0
 8005c42:	bd08      	pop	{r3, pc}

08005c44 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005c44:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005c46:	6841      	ldr	r1, [r0, #4]
 8005c48:	b119      	cbz	r1, 8005c52 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	f000 fbb3 	bl	80063b6 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005c50:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8005c52:	2001      	movs	r0, #1
 8005c54:	f000 fba4 	bl	80063a0 <xQueueCreateMutex>
 8005c58:	e7fa      	b.n	8005c50 <osMutexCreate+0xc>

08005c5a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c5a:	f100 0308 	add.w	r3, r0, #8
 8005c5e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c60:	f04f 32ff 	mov.w	r2, #4294967295
 8005c64:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c66:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c68:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c6e:	4770      	bx	lr

08005c70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c74:	4770      	bx	lr

08005c76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c76:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c78:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c82:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c84:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005c86:	6803      	ldr	r3, [r0, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	6003      	str	r3, [r0, #0]
}
 8005c8c:	4770      	bx	lr

08005c8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c8e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c90:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c92:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005c96:	d002      	beq.n	8005c9e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c98:	f100 0208 	add.w	r2, r0, #8
 8005c9c:	e002      	b.n	8005ca4 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c9e:	6902      	ldr	r2, [r0, #16]
 8005ca0:	e004      	b.n	8005cac <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6853      	ldr	r3, [r2, #4]
 8005ca6:	681c      	ldr	r4, [r3, #0]
 8005ca8:	42ac      	cmp	r4, r5
 8005caa:	d9fa      	bls.n	8005ca2 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cac:	6853      	ldr	r3, [r2, #4]
 8005cae:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005cb0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cb2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cb4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cb6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005cb8:	6803      	ldr	r3, [r0, #0]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	6003      	str	r3, [r0, #0]
}
 8005cbe:	bc30      	pop	{r4, r5}
 8005cc0:	4770      	bx	lr

08005cc2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005cc2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cc4:	6842      	ldr	r2, [r0, #4]
 8005cc6:	6881      	ldr	r1, [r0, #8]
 8005cc8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cca:	6882      	ldr	r2, [r0, #8]
 8005ccc:	6841      	ldr	r1, [r0, #4]
 8005cce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	4282      	cmp	r2, r0
 8005cd4:	d006      	beq.n	8005ce4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	3a01      	subs	r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ce0:	6818      	ldr	r0, [r3, #0]
}
 8005ce2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ce4:	6882      	ldr	r2, [r0, #8]
 8005ce6:	605a      	str	r2, [r3, #4]
 8005ce8:	e7f5      	b.n	8005cd6 <uxListRemove+0x14>

08005cea <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005cea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cec:	b123      	cbz	r3, 8005cf8 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005cee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f1c0 0007 	rsb	r0, r0, #7
 8005cf6:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005cf8:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8005cfa:	4770      	bx	lr

08005cfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d00:	f001 fcb8 	bl	8007674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d004      	beq.n	8005d16 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8005d0c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8005d0e:	f001 fcd3 	bl	80076b8 <vPortExitCritical>

	return xReturn;
}
 8005d12:	4620      	mov	r0, r4
 8005d14:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8005d16:	2401      	movs	r4, #1
 8005d18:	e7f9      	b.n	8005d0e <prvIsQueueFull+0x12>

08005d1a <prvIsQueueEmpty>:
{
 8005d1a:	b510      	push	{r4, lr}
 8005d1c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005d1e:	f001 fca9 	bl	8007674 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d24:	b123      	cbz	r3, 8005d30 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8005d26:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005d28:	f001 fcc6 	bl	80076b8 <vPortExitCritical>
}
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8005d30:	2401      	movs	r4, #1
 8005d32:	e7f9      	b.n	8005d28 <prvIsQueueEmpty+0xe>

08005d34 <prvCopyDataToQueue>:
{
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	4604      	mov	r4, r0
 8005d38:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d3a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005d3e:	b95a      	cbnz	r2, 8005d58 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d40:	6803      	ldr	r3, [r0, #0]
 8005d42:	b11b      	cbz	r3, 8005d4c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005d44:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d46:	3501      	adds	r5, #1
 8005d48:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8005d4a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005d4c:	6840      	ldr	r0, [r0, #4]
 8005d4e:	f001 fb1b 	bl	8007388 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	6063      	str	r3, [r4, #4]
 8005d56:	e7f6      	b.n	8005d46 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005d58:	b96e      	cbnz	r6, 8005d76 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005d5a:	6880      	ldr	r0, [r0, #8]
 8005d5c:	f005 fa0f 	bl	800b17e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005d60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d62:	68a3      	ldr	r3, [r4, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d68:	6862      	ldr	r2, [r4, #4]
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d319      	bcc.n	8005da2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005d72:	2000      	movs	r0, #0
 8005d74:	e7e7      	b.n	8005d46 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d76:	68c0      	ldr	r0, [r0, #12]
 8005d78:	f005 fa01 	bl	800b17e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005d7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d7e:	4252      	negs	r2, r2
 8005d80:	68e3      	ldr	r3, [r4, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d86:	6821      	ldr	r1, [r4, #0]
 8005d88:	428b      	cmp	r3, r1
 8005d8a:	d202      	bcs.n	8005d92 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005d8c:	6863      	ldr	r3, [r4, #4]
 8005d8e:	441a      	add	r2, r3
 8005d90:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005d92:	2e02      	cmp	r6, #2
 8005d94:	d001      	beq.n	8005d9a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005d96:	2000      	movs	r0, #0
 8005d98:	e7d5      	b.n	8005d46 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d9a:	b125      	cbz	r5, 8005da6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005d9c:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8005d9e:	2000      	movs	r0, #0
 8005da0:	e7d1      	b.n	8005d46 <prvCopyDataToQueue+0x12>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e7cf      	b.n	8005d46 <prvCopyDataToQueue+0x12>
 8005da6:	2000      	movs	r0, #0
 8005da8:	e7cd      	b.n	8005d46 <prvCopyDataToQueue+0x12>

08005daa <prvUnlockQueue>:
{
 8005daa:	b538      	push	{r3, r4, r5, lr}
 8005dac:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005dae:	f001 fc61 	bl	8007674 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005db2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005db6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005db8:	e003      	b.n	8005dc2 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005dba:	f001 fa3d 	bl	8007238 <vTaskMissedYield>
			--cTxLock;
 8005dbe:	3c01      	subs	r4, #1
 8005dc0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dc2:	2c00      	cmp	r4, #0
 8005dc4:	dd08      	ble.n	8005dd8 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005dc8:	b133      	cbz	r3, 8005dd8 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dca:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005dce:	f001 f993 	bl	80070f8 <xTaskRemoveFromEventList>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d0f3      	beq.n	8005dbe <prvUnlockQueue+0x14>
 8005dd6:	e7f0      	b.n	8005dba <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8005dd8:	23ff      	movs	r3, #255	; 0xff
 8005dda:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005dde:	f001 fc6b 	bl	80076b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005de2:	f001 fc47 	bl	8007674 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005de6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005dea:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dec:	e003      	b.n	8005df6 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8005dee:	f001 fa23 	bl	8007238 <vTaskMissedYield>
				--cRxLock;
 8005df2:	3c01      	subs	r4, #1
 8005df4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005df6:	2c00      	cmp	r4, #0
 8005df8:	dd08      	ble.n	8005e0c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dfa:	692b      	ldr	r3, [r5, #16]
 8005dfc:	b133      	cbz	r3, 8005e0c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dfe:	f105 0010 	add.w	r0, r5, #16
 8005e02:	f001 f979 	bl	80070f8 <xTaskRemoveFromEventList>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d0f3      	beq.n	8005df2 <prvUnlockQueue+0x48>
 8005e0a:	e7f0      	b.n	8005dee <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8005e0c:	23ff      	movs	r3, #255	; 0xff
 8005e0e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005e12:	f001 fc51 	bl	80076b8 <vPortExitCritical>
}
 8005e16:	bd38      	pop	{r3, r4, r5, pc}

08005e18 <xQueueGenericReset>:
{
 8005e18:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005e1a:	b940      	cbnz	r0, 8005e2e <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	e7fe      	b.n	8005e2c <xQueueGenericReset+0x14>
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8005e32:	f001 fc1f 	bl	8007674 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005e36:	6821      	ldr	r1, [r4, #0]
 8005e38:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e3c:	fb03 1002 	mla	r0, r3, r2, r1
 8005e40:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e42:	2000      	movs	r0, #0
 8005e44:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e46:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005e48:	3a01      	subs	r2, #1
 8005e4a:	fb02 1303 	mla	r3, r2, r3, r1
 8005e4e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e50:	23ff      	movs	r3, #255	; 0xff
 8005e52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005e5a:	b9a5      	cbnz	r5, 8005e86 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	b91b      	cbnz	r3, 8005e68 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005e60:	f001 fc2a 	bl	80076b8 <vPortExitCritical>
}
 8005e64:	2001      	movs	r0, #1
 8005e66:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e68:	f104 0010 	add.w	r0, r4, #16
 8005e6c:	f001 f944 	bl	80070f8 <xTaskRemoveFromEventList>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d0f5      	beq.n	8005e60 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8005e74:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <xQueueGenericReset+0x80>)
 8005e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	e7ec      	b.n	8005e60 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e86:	f104 0010 	add.w	r0, r4, #16
 8005e8a:	f7ff fee6 	bl	8005c5a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005e92:	f7ff fee2 	bl	8005c5a <vListInitialise>
 8005e96:	e7e3      	b.n	8005e60 <xQueueGenericReset+0x48>
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <prvInitialiseNewQueue>:
{
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	461e      	mov	r6, r3
 8005ea2:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	b9b1      	cbnz	r1, 8005ed6 <prvInitialiseNewQueue+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ea8:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005eaa:	63e5      	str	r5, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005eac:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f7ff ffb1 	bl	8005e18 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005eb6:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 8005eba:	4b1f      	ldr	r3, [pc, #124]	; (8005f38 <prvInitialiseNewQueue+0x9c>)
 8005ebc:	8819      	ldrh	r1, [r3, #0]
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f003 f868 	bl	8008f94 <prvTraceSetQueueNumberHigh16>
 8005ec4:	f003 f88e 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 8005ec8:	f003 f84e 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <prvInitialiseNewQueue+0xa0>)
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	4218      	tst	r0, r3
 8005ed2:	d102      	bne.n	8005eda <prvInitialiseNewQueue+0x3e>
}
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	e7e7      	b.n	8005eaa <prvInitialiseNewQueue+0xe>
	traceQUEUE_CREATE( pxNewQueue );
 8005eda:	4620      	mov	r0, r4
 8005edc:	f003 f855 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 8005ee0:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <prvInitialiseNewQueue+0xa0>)
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	4218      	tst	r0, r3
 8005ee6:	d0f5      	beq.n	8005ed4 <prvInitialiseNewQueue+0x38>
 8005ee8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d8f1      	bhi.n	8005ed4 <prvInitialiseNewQueue+0x38>
 8005ef0:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <prvInitialiseNewQueue+0x5c>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f0d 	.word	0x08005f0d
 8005efc:	08005f23 	.word	0x08005f23
 8005f00:	08005ed5 	.word	0x08005ed5
 8005f04:	08005f19 	.word	0x08005f19
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	462a      	mov	r2, r5
 8005f0e:	4621      	mov	r1, r4
 8005f10:	2011      	movs	r0, #17
 8005f12:	f003 fc6d 	bl	80097f0 <prvTraceStoreEvent2>
 8005f16:	e7dd      	b.n	8005ed4 <prvInitialiseNewQueue+0x38>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	2012      	movs	r0, #18
 8005f1c:	f003 fc32 	bl	8009784 <prvTraceStoreEvent1>
 8005f20:	e7d8      	b.n	8005ed4 <prvInitialiseNewQueue+0x38>
 8005f22:	4621      	mov	r1, r4
 8005f24:	2013      	movs	r0, #19
 8005f26:	f003 fc2d 	bl	8009784 <prvTraceStoreEvent1>
 8005f2a:	e7d3      	b.n	8005ed4 <prvInitialiseNewQueue+0x38>
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	2017      	movs	r0, #23
 8005f30:	f003 fc28 	bl	8009784 <prvTraceStoreEvent1>
}
 8005f34:	e7ce      	b.n	8005ed4 <prvInitialiseNewQueue+0x38>
 8005f36:	bf00      	nop
 8005f38:	20000074 	.word	0x20000074
 8005f3c:	20000076 	.word	0x20000076

08005f40 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f40:	b940      	cbnz	r0, 8005f54 <xQueueGenericCreateStatic+0x14>
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	e7fe      	b.n	8005f52 <xQueueGenericCreateStatic+0x12>
	{
 8005f54:	b510      	push	{r4, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8005f5a:	b153      	cbz	r3, 8005f72 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f5c:	b192      	cbz	r2, 8005f84 <xQueueGenericCreateStatic+0x44>
 8005f5e:	b989      	cbnz	r1, 8005f84 <xQueueGenericCreateStatic+0x44>
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	e7fe      	b.n	8005f70 <xQueueGenericCreateStatic+0x30>
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	e7fe      	b.n	8005f82 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f84:	b94a      	cbnz	r2, 8005f9a <xQueueGenericCreateStatic+0x5a>
 8005f86:	b141      	cbz	r1, 8005f9a <xQueueGenericCreateStatic+0x5a>
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	e7fe      	b.n	8005f98 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f9a:	2050      	movs	r0, #80	; 0x50
 8005f9c:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f9e:	9803      	ldr	r0, [sp, #12]
 8005fa0:	2850      	cmp	r0, #80	; 0x50
 8005fa2:	d008      	beq.n	8005fb6 <xQueueGenericCreateStatic+0x76>
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	e7fe      	b.n	8005fb4 <xQueueGenericCreateStatic+0x74>
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fc0:	9400      	str	r4, [sp, #0]
 8005fc2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005fc6:	f7ff ff69 	bl	8005e9c <prvInitialiseNewQueue>
	}
 8005fca:	4620      	mov	r0, r4
 8005fcc:	b004      	add	sp, #16
 8005fce:	bd10      	pop	{r4, pc}

08005fd0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fd0:	b940      	cbnz	r0, 8005fe4 <xQueueGenericCreate+0x14>
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	e7fe      	b.n	8005fe2 <xQueueGenericCreate+0x12>
	{
 8005fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	4604      	mov	r4, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8005fea:	b111      	cbz	r1, 8005ff2 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fec:	fb01 f000 	mul.w	r0, r1, r0
 8005ff0:	e000      	b.n	8005ff4 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	4615      	mov	r5, r2
 8005ff6:	460e      	mov	r6, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005ff8:	3050      	adds	r0, #80	; 0x50
 8005ffa:	f001 fcf1 	bl	80079e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005ffe:	4607      	mov	r7, r0
 8006000:	b168      	cbz	r0, 800601e <xQueueGenericCreate+0x4e>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006002:	2300      	movs	r3, #0
 8006004:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006008:	9000      	str	r0, [sp, #0]
 800600a:	462b      	mov	r3, r5
 800600c:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8006010:	4631      	mov	r1, r6
 8006012:	4620      	mov	r0, r4
 8006014:	f7ff ff42 	bl	8005e9c <prvInitialiseNewQueue>
	}
 8006018:	4638      	mov	r0, r7
 800601a:	b003      	add	sp, #12
 800601c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800601e:	f002 ffe1 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 8006022:	f002 ffa1 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <xQueueGenericCreate+0xa8>)
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	4218      	tst	r0, r3
 800602c:	d0f4      	beq.n	8006018 <xQueueGenericCreate+0x48>
 800602e:	2d04      	cmp	r5, #4
 8006030:	d8f2      	bhi.n	8006018 <xQueueGenericCreate+0x48>
 8006032:	a301      	add	r3, pc, #4	; (adr r3, 8006038 <xQueueGenericCreate+0x68>)
 8006034:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8006038:	0800604d 	.word	0x0800604d
 800603c:	08006063 	.word	0x08006063
 8006040:	08006019 	.word	0x08006019
 8006044:	08006059 	.word	0x08006059
 8006048:	0800606d 	.word	0x0800606d
 800604c:	4622      	mov	r2, r4
 800604e:	2100      	movs	r1, #0
 8006050:	2041      	movs	r0, #65	; 0x41
 8006052:	f003 fbcd 	bl	80097f0 <prvTraceStoreEvent2>
 8006056:	e7df      	b.n	8006018 <xQueueGenericCreate+0x48>
 8006058:	2100      	movs	r1, #0
 800605a:	2042      	movs	r0, #66	; 0x42
 800605c:	f003 fb92 	bl	8009784 <prvTraceStoreEvent1>
 8006060:	e7da      	b.n	8006018 <xQueueGenericCreate+0x48>
 8006062:	2100      	movs	r1, #0
 8006064:	2043      	movs	r0, #67	; 0x43
 8006066:	f003 fb8d 	bl	8009784 <prvTraceStoreEvent1>
 800606a:	e7d5      	b.n	8006018 <xQueueGenericCreate+0x48>
 800606c:	2100      	movs	r1, #0
 800606e:	2047      	movs	r0, #71	; 0x47
 8006070:	f003 fb88 	bl	8009784 <prvTraceStoreEvent1>
		return pxNewQueue;
 8006074:	e7d0      	b.n	8006018 <xQueueGenericCreate+0x48>
 8006076:	bf00      	nop
 8006078:	20000076 	.word	0x20000076

0800607c <xQueueGenericSend>:
{
 800607c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800607e:	b085      	sub	sp, #20
 8006080:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006082:	b160      	cbz	r0, 800609e <xQueueGenericSend+0x22>
 8006084:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006086:	b999      	cbnz	r1, 80060b0 <xQueueGenericSend+0x34>
 8006088:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800608a:	b18a      	cbz	r2, 80060b0 <xQueueGenericSend+0x34>
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	e7fe      	b.n	800609c <xQueueGenericSend+0x20>
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	e7fe      	b.n	80060ae <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d10b      	bne.n	80060cc <xQueueGenericSend+0x50>
 80060b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80060b6:	2a01      	cmp	r2, #1
 80060b8:	d008      	beq.n	80060cc <xQueueGenericSend+0x50>
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	e7fe      	b.n	80060ca <xQueueGenericSend+0x4e>
 80060cc:	461d      	mov	r5, r3
 80060ce:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060d0:	f001 f8c6 	bl	8007260 <xTaskGetSchedulerState>
 80060d4:	b950      	cbnz	r0, 80060ec <xQueueGenericSend+0x70>
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	b153      	cbz	r3, 80060f0 <xQueueGenericSend+0x74>
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	e7fe      	b.n	80060ea <xQueueGenericSend+0x6e>
 80060ec:	2700      	movs	r7, #0
 80060ee:	e0bd      	b.n	800626c <xQueueGenericSend+0x1f0>
 80060f0:	2700      	movs	r7, #0
 80060f2:	e0bb      	b.n	800626c <xQueueGenericSend+0x1f0>
				traceQUEUE_SEND( pxQueue );
 80060f4:	f002 ff76 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 80060f8:	f002 ff36 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 80060fc:	4ba0      	ldr	r3, [pc, #640]	; (8006380 <xQueueGenericSend+0x304>)
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	4218      	tst	r0, r3
 8006102:	d111      	bne.n	8006128 <xQueueGenericSend+0xac>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006104:	462a      	mov	r2, r5
 8006106:	4631      	mov	r1, r6
 8006108:	4620      	mov	r0, r4
 800610a:	f7ff fe13 	bl	8005d34 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800610e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006110:	bb83      	cbnz	r3, 8006174 <xQueueGenericSend+0xf8>
					else if( xYieldRequired != pdFALSE )
 8006112:	2800      	cmp	r0, #0
 8006114:	d03b      	beq.n	800618e <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8006116:	4b9b      	ldr	r3, [pc, #620]	; (8006384 <xQueueGenericSend+0x308>)
 8006118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	e032      	b.n	800618e <xQueueGenericSend+0x112>
				traceQUEUE_SEND( pxQueue );
 8006128:	4620      	mov	r0, r4
 800612a:	f002 ff2e 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 800612e:	4b94      	ldr	r3, [pc, #592]	; (8006380 <xQueueGenericSend+0x304>)
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	4218      	tst	r0, r3
 8006134:	d0e6      	beq.n	8006104 <xQueueGenericSend+0x88>
 8006136:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800613a:	2b04      	cmp	r3, #4
 800613c:	d8e2      	bhi.n	8006104 <xQueueGenericSend+0x88>
 800613e:	e8df f003 	tbb	[pc, r3]
 8006142:	1403      	.short	0x1403
 8006144:	0d0d      	.short	0x0d0d
 8006146:	14          	.byte	0x14
 8006147:	00          	.byte	0x00
 8006148:	b935      	cbnz	r5, 8006158 <xQueueGenericSend+0xdc>
 800614a:	2050      	movs	r0, #80	; 0x50
 800614c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800614e:	3201      	adds	r2, #1
 8006150:	4621      	mov	r1, r4
 8006152:	f003 fb4d 	bl	80097f0 <prvTraceStoreEvent2>
 8006156:	e7d5      	b.n	8006104 <xQueueGenericSend+0x88>
 8006158:	20c0      	movs	r0, #192	; 0xc0
 800615a:	e7f7      	b.n	800614c <xQueueGenericSend+0xd0>
 800615c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800615e:	3201      	adds	r2, #1
 8006160:	4621      	mov	r1, r4
 8006162:	2051      	movs	r0, #81	; 0x51
 8006164:	f003 fb44 	bl	80097f0 <prvTraceStoreEvent2>
 8006168:	e7cc      	b.n	8006104 <xQueueGenericSend+0x88>
 800616a:	4621      	mov	r1, r4
 800616c:	2052      	movs	r0, #82	; 0x52
 800616e:	f003 fb09 	bl	8009784 <prvTraceStoreEvent1>
 8006172:	e7c7      	b.n	8006104 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006174:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006178:	f000 ffbe 	bl	80070f8 <xTaskRemoveFromEventList>
 800617c:	b138      	cbz	r0, 800618e <xQueueGenericSend+0x112>
							queueYIELD_IF_USING_PREEMPTION();
 800617e:	4b81      	ldr	r3, [pc, #516]	; (8006384 <xQueueGenericSend+0x308>)
 8006180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800618e:	f001 fa93 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 8006192:	2001      	movs	r0, #1
}
 8006194:	b005      	add	sp, #20
 8006196:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8006198:	f001 fa8e 	bl	80076b8 <vPortExitCritical>
					traceQUEUE_SEND_FAILED( pxQueue );
 800619c:	f002 ff22 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 80061a0:	f002 fee2 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 80061a4:	4b76      	ldr	r3, [pc, #472]	; (8006380 <xQueueGenericSend+0x304>)
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	4218      	tst	r0, r3
 80061aa:	f000 80dd 	beq.w	8006368 <xQueueGenericSend+0x2ec>
 80061ae:	4620      	mov	r0, r4
 80061b0:	f002 feeb 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 80061b4:	4b72      	ldr	r3, [pc, #456]	; (8006380 <xQueueGenericSend+0x304>)
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	4218      	tst	r0, r3
 80061ba:	f000 80d7 	beq.w	800636c <xQueueGenericSend+0x2f0>
 80061be:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	f200 80d4 	bhi.w	8006370 <xQueueGenericSend+0x2f4>
 80061c8:	e8df f003 	tbb	[pc, r3]
 80061cc:	0d0d1403 	.word	0x0d0d1403
 80061d0:	14          	.byte	0x14
 80061d1:	00          	.byte	0x00
 80061d2:	b935      	cbnz	r5, 80061e2 <xQueueGenericSend+0x166>
 80061d4:	2053      	movs	r0, #83	; 0x53
 80061d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80061d8:	4621      	mov	r1, r4
 80061da:	f003 fb09 	bl	80097f0 <prvTraceStoreEvent2>
					return errQUEUE_FULL;
 80061de:	2000      	movs	r0, #0
					traceQUEUE_SEND_FAILED( pxQueue );
 80061e0:	e7d8      	b.n	8006194 <xQueueGenericSend+0x118>
 80061e2:	20c1      	movs	r0, #193	; 0xc1
 80061e4:	e7f7      	b.n	80061d6 <xQueueGenericSend+0x15a>
 80061e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80061e8:	4621      	mov	r1, r4
 80061ea:	2054      	movs	r0, #84	; 0x54
 80061ec:	f003 fb00 	bl	80097f0 <prvTraceStoreEvent2>
					return errQUEUE_FULL;
 80061f0:	2000      	movs	r0, #0
					traceQUEUE_SEND_FAILED( pxQueue );
 80061f2:	e7cf      	b.n	8006194 <xQueueGenericSend+0x118>
 80061f4:	4621      	mov	r1, r4
 80061f6:	2055      	movs	r0, #85	; 0x55
 80061f8:	f003 fac4 	bl	8009784 <prvTraceStoreEvent1>
					return errQUEUE_FULL;
 80061fc:	2000      	movs	r0, #0
					traceQUEUE_SEND_FAILED( pxQueue );
 80061fe:	e7c9      	b.n	8006194 <xQueueGenericSend+0x118>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006200:	a802      	add	r0, sp, #8
 8006202:	f000 ffcd 	bl	80071a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006206:	2701      	movs	r7, #1
 8006208:	e03f      	b.n	800628a <xQueueGenericSend+0x20e>
		prvLockQueue( pxQueue );
 800620a:	2300      	movs	r3, #0
 800620c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006210:	e047      	b.n	80062a2 <xQueueGenericSend+0x226>
 8006212:	2300      	movs	r3, #0
 8006214:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006218:	e049      	b.n	80062ae <xQueueGenericSend+0x232>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800621a:	4620      	mov	r0, r4
 800621c:	f002 feb5 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 8006220:	4b57      	ldr	r3, [pc, #348]	; (8006380 <xQueueGenericSend+0x304>)
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	4218      	tst	r0, r3
 8006226:	d056      	beq.n	80062d6 <xQueueGenericSend+0x25a>
 8006228:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800622c:	2b04      	cmp	r3, #4
 800622e:	d852      	bhi.n	80062d6 <xQueueGenericSend+0x25a>
 8006230:	e8df f003 	tbb	[pc, r3]
 8006234:	0c0c1203 	.word	0x0c0c1203
 8006238:	12          	.byte	0x12
 8006239:	00          	.byte	0x00
 800623a:	b92d      	cbnz	r5, 8006248 <xQueueGenericSend+0x1cc>
 800623c:	2056      	movs	r0, #86	; 0x56
 800623e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006240:	4621      	mov	r1, r4
 8006242:	f003 fad5 	bl	80097f0 <prvTraceStoreEvent2>
 8006246:	e046      	b.n	80062d6 <xQueueGenericSend+0x25a>
 8006248:	20c2      	movs	r0, #194	; 0xc2
 800624a:	e7f8      	b.n	800623e <xQueueGenericSend+0x1c2>
 800624c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800624e:	4621      	mov	r1, r4
 8006250:	2057      	movs	r0, #87	; 0x57
 8006252:	f003 facd 	bl	80097f0 <prvTraceStoreEvent2>
 8006256:	e03e      	b.n	80062d6 <xQueueGenericSend+0x25a>
 8006258:	4621      	mov	r1, r4
 800625a:	2058      	movs	r0, #88	; 0x58
 800625c:	f003 fa92 	bl	8009784 <prvTraceStoreEvent1>
 8006260:	e039      	b.n	80062d6 <xQueueGenericSend+0x25a>
				prvUnlockQueue( pxQueue );
 8006262:	4620      	mov	r0, r4
 8006264:	f7ff fda1 	bl	8005daa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006268:	f000 fe08 	bl	8006e7c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800626c:	f001 fa02 	bl	8007674 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006270:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006272:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006274:	429a      	cmp	r2, r3
 8006276:	f4ff af3d 	bcc.w	80060f4 <xQueueGenericSend+0x78>
 800627a:	2d02      	cmp	r5, #2
 800627c:	f43f af3a 	beq.w	80060f4 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006280:	9b01      	ldr	r3, [sp, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d088      	beq.n	8006198 <xQueueGenericSend+0x11c>
				else if( xEntryTimeSet == pdFALSE )
 8006286:	2f00      	cmp	r7, #0
 8006288:	d0ba      	beq.n	8006200 <xQueueGenericSend+0x184>
		taskEXIT_CRITICAL();
 800628a:	f001 fa15 	bl	80076b8 <vPortExitCritical>
		vTaskSuspendAll();
 800628e:	f000 fd3b 	bl	8006d08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006292:	f001 f9ef 	bl	8007674 <vPortEnterCritical>
 8006296:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800629a:	b25b      	sxtb	r3, r3
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d0b3      	beq.n	800620a <xQueueGenericSend+0x18e>
 80062a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80062a6:	b25b      	sxtb	r3, r3
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ac:	d0b1      	beq.n	8006212 <xQueueGenericSend+0x196>
 80062ae:	f001 fa03 	bl	80076b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062b2:	a901      	add	r1, sp, #4
 80062b4:	a802      	add	r0, sp, #8
 80062b6:	f000 ff7f 	bl	80071b8 <xTaskCheckForTimeOut>
 80062ba:	bb08      	cbnz	r0, 8006300 <xQueueGenericSend+0x284>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062bc:	4620      	mov	r0, r4
 80062be:	f7ff fd1d 	bl	8005cfc <prvIsQueueFull>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d0cd      	beq.n	8006262 <xQueueGenericSend+0x1e6>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80062c6:	f002 fe8d 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 80062ca:	f002 fe4d 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 80062ce:	4b2c      	ldr	r3, [pc, #176]	; (8006380 <xQueueGenericSend+0x304>)
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	4218      	tst	r0, r3
 80062d4:	d1a1      	bne.n	800621a <xQueueGenericSend+0x19e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062d6:	9901      	ldr	r1, [sp, #4]
 80062d8:	f104 0010 	add.w	r0, r4, #16
 80062dc:	f000 fef4 	bl	80070c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062e0:	4620      	mov	r0, r4
 80062e2:	f7ff fd62 	bl	8005daa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062e6:	f000 fdc9 	bl	8006e7c <xTaskResumeAll>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d1be      	bne.n	800626c <xQueueGenericSend+0x1f0>
					portYIELD_WITHIN_API();
 80062ee:	4b25      	ldr	r3, [pc, #148]	; (8006384 <xQueueGenericSend+0x308>)
 80062f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	e7b5      	b.n	800626c <xQueueGenericSend+0x1f0>
			prvUnlockQueue( pxQueue );
 8006300:	4620      	mov	r0, r4
 8006302:	f7ff fd52 	bl	8005daa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006306:	f000 fdb9 	bl	8006e7c <xTaskResumeAll>
			traceQUEUE_SEND_FAILED( pxQueue );
 800630a:	f002 fe6b 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 800630e:	f002 fe2b 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8006312:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <xQueueGenericSend+0x304>)
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	4218      	tst	r0, r3
 8006318:	d02c      	beq.n	8006374 <xQueueGenericSend+0x2f8>
 800631a:	4620      	mov	r0, r4
 800631c:	f002 fe35 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 8006320:	4b17      	ldr	r3, [pc, #92]	; (8006380 <xQueueGenericSend+0x304>)
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	4218      	tst	r0, r3
 8006326:	d027      	beq.n	8006378 <xQueueGenericSend+0x2fc>
 8006328:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800632c:	2b04      	cmp	r3, #4
 800632e:	d825      	bhi.n	800637c <xQueueGenericSend+0x300>
 8006330:	e8df f003 	tbb	[pc, r3]
 8006334:	0d0d1403 	.word	0x0d0d1403
 8006338:	14          	.byte	0x14
 8006339:	00          	.byte	0x00
 800633a:	b935      	cbnz	r5, 800634a <xQueueGenericSend+0x2ce>
 800633c:	2053      	movs	r0, #83	; 0x53
 800633e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006340:	4621      	mov	r1, r4
 8006342:	f003 fa55 	bl	80097f0 <prvTraceStoreEvent2>
			return errQUEUE_FULL;
 8006346:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 8006348:	e724      	b.n	8006194 <xQueueGenericSend+0x118>
 800634a:	20c1      	movs	r0, #193	; 0xc1
 800634c:	e7f7      	b.n	800633e <xQueueGenericSend+0x2c2>
 800634e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006350:	4621      	mov	r1, r4
 8006352:	2054      	movs	r0, #84	; 0x54
 8006354:	f003 fa4c 	bl	80097f0 <prvTraceStoreEvent2>
			return errQUEUE_FULL;
 8006358:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 800635a:	e71b      	b.n	8006194 <xQueueGenericSend+0x118>
 800635c:	4621      	mov	r1, r4
 800635e:	2055      	movs	r0, #85	; 0x55
 8006360:	f003 fa10 	bl	8009784 <prvTraceStoreEvent1>
			return errQUEUE_FULL;
 8006364:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 8006366:	e715      	b.n	8006194 <xQueueGenericSend+0x118>
					return errQUEUE_FULL;
 8006368:	2000      	movs	r0, #0
 800636a:	e713      	b.n	8006194 <xQueueGenericSend+0x118>
 800636c:	2000      	movs	r0, #0
 800636e:	e711      	b.n	8006194 <xQueueGenericSend+0x118>
 8006370:	2000      	movs	r0, #0
 8006372:	e70f      	b.n	8006194 <xQueueGenericSend+0x118>
			return errQUEUE_FULL;
 8006374:	2000      	movs	r0, #0
 8006376:	e70d      	b.n	8006194 <xQueueGenericSend+0x118>
 8006378:	2000      	movs	r0, #0
 800637a:	e70b      	b.n	8006194 <xQueueGenericSend+0x118>
 800637c:	2000      	movs	r0, #0
 800637e:	e709      	b.n	8006194 <xQueueGenericSend+0x118>
 8006380:	20000076 	.word	0x20000076
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8006388:	b148      	cbz	r0, 800639e <prvInitialiseMutex+0x16>
	{
 800638a:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 800638c:	2100      	movs	r1, #0
 800638e:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006390:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006392:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006394:	460b      	mov	r3, r1
 8006396:	460a      	mov	r2, r1
 8006398:	f7ff fe70 	bl	800607c <xQueueGenericSend>
	}
 800639c:	bd08      	pop	{r3, pc}
 800639e:	4770      	bx	lr

080063a0 <xQueueCreateMutex>:
	{
 80063a0:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80063a2:	4602      	mov	r2, r0
 80063a4:	2100      	movs	r1, #0
 80063a6:	2001      	movs	r0, #1
 80063a8:	f7ff fe12 	bl	8005fd0 <xQueueGenericCreate>
 80063ac:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80063ae:	f7ff ffeb 	bl	8006388 <prvInitialiseMutex>
	}
 80063b2:	4620      	mov	r0, r4
 80063b4:	bd10      	pop	{r4, pc}

080063b6 <xQueueCreateMutexStatic>:
	{
 80063b6:	b510      	push	{r4, lr}
 80063b8:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80063ba:	9000      	str	r0, [sp, #0]
 80063bc:	460b      	mov	r3, r1
 80063be:	2200      	movs	r2, #0
 80063c0:	4611      	mov	r1, r2
 80063c2:	2001      	movs	r0, #1
 80063c4:	f7ff fdbc 	bl	8005f40 <xQueueGenericCreateStatic>
 80063c8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80063ca:	f7ff ffdd 	bl	8006388 <prvInitialiseMutex>
	}
 80063ce:	4620      	mov	r0, r4
 80063d0:	b002      	add	sp, #8
 80063d2:	bd10      	pop	{r4, pc}

080063d4 <MyWrapper>:
{
 80063d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80063d8:	b158      	cbz	r0, 80063f2 <MyWrapper+0x1e>
 80063da:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80063dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80063de:	b18b      	cbz	r3, 8006404 <MyWrapper+0x30>
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	e7fe      	b.n	80063f0 <MyWrapper+0x1c>
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	e7fe      	b.n	8006402 <MyWrapper+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006404:	6803      	ldr	r3, [r0, #0]
 8006406:	b34b      	cbz	r3, 800645c <MyWrapper+0x88>
 8006408:	4616      	mov	r6, r2
 800640a:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800640c:	f001 fa5c 	bl	80078c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006410:	f3ef 8711 	mrs	r7, BASEPRI
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006424:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800642a:	454b      	cmp	r3, r9
 800642c:	d948      	bls.n	80064c0 <MyWrapper+0xec>
			const int8_t cTxLock = pxQueue->cTxLock;
 800642e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8006432:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006434:	4620      	mov	r0, r4
 8006436:	f002 fda8 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 800643a:	4b35      	ldr	r3, [pc, #212]	; (8006510 <MyWrapper+0x13c>)
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	4218      	tst	r0, r3
 8006440:	d01f      	beq.n	8006482 <MyWrapper+0xae>
 8006442:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006446:	b1ab      	cbz	r3, 8006474 <MyWrapper+0xa0>
 8006448:	3b02      	subs	r3, #2
 800644a:	2b01      	cmp	r3, #1
 800644c:	d819      	bhi.n	8006482 <MyWrapper+0xae>
 800644e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006450:	3201      	adds	r2, #1
 8006452:	4621      	mov	r1, r4
 8006454:	205a      	movs	r0, #90	; 0x5a
 8006456:	f003 f9cb 	bl	80097f0 <prvTraceStoreEvent2>
 800645a:	e012      	b.n	8006482 <MyWrapper+0xae>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800645c:	6843      	ldr	r3, [r0, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0d2      	beq.n	8006408 <MyWrapper+0x34>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	e7fe      	b.n	8006472 <MyWrapper+0x9e>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006474:	b9e6      	cbnz	r6, 80064b0 <MyWrapper+0xdc>
 8006476:	2059      	movs	r0, #89	; 0x59
 8006478:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800647a:	3201      	adds	r2, #1
 800647c:	4621      	mov	r1, r4
 800647e:	f003 f9b7 	bl	80097f0 <prvTraceStoreEvent2>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006482:	f109 0301 	add.w	r3, r9, #1
 8006486:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8006488:	f1b5 3fff 	cmp.w	r5, #4294967295
 800648c:	d112      	bne.n	80064b4 <MyWrapper+0xe0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800648e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006490:	b3a3      	cbz	r3, 80064fc <MyWrapper+0x128>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006492:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006496:	f000 fe2f 	bl	80070f8 <xTaskRemoveFromEventList>
 800649a:	b388      	cbz	r0, 8006500 <MyWrapper+0x12c>
							if( pxHigherPriorityTaskWoken != NULL )
 800649c:	f1b8 0f00 	cmp.w	r8, #0
 80064a0:	d030      	beq.n	8006504 <MyWrapper+0x130>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064a2:	2001      	movs	r0, #1
 80064a4:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064a8:	f387 8811 	msr	BASEPRI, r7
}
 80064ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80064b0:	20c3      	movs	r0, #195	; 0xc3
 80064b2:	e7e1      	b.n	8006478 <MyWrapper+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064b4:	1c6b      	adds	r3, r5, #1
 80064b6:	b25b      	sxtb	r3, r3
 80064b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80064bc:	2001      	movs	r0, #1
 80064be:	e7f3      	b.n	80064a8 <MyWrapper+0xd4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80064c0:	4620      	mov	r0, r4
 80064c2:	f002 fd62 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 80064c6:	4b12      	ldr	r3, [pc, #72]	; (8006510 <MyWrapper+0x13c>)
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	4218      	tst	r0, r3
 80064cc:	d01c      	beq.n	8006508 <MyWrapper+0x134>
 80064ce:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80064d2:	b14b      	cbz	r3, 80064e8 <MyWrapper+0x114>
 80064d4:	3b02      	subs	r3, #2
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d818      	bhi.n	800650c <MyWrapper+0x138>
 80064da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80064dc:	4621      	mov	r1, r4
 80064de:	205d      	movs	r0, #93	; 0x5d
 80064e0:	f003 f986 	bl	80097f0 <prvTraceStoreEvent2>
			xReturn = errQUEUE_FULL;
 80064e4:	2000      	movs	r0, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80064e6:	e7df      	b.n	80064a8 <MyWrapper+0xd4>
 80064e8:	b936      	cbnz	r6, 80064f8 <MyWrapper+0x124>
 80064ea:	205c      	movs	r0, #92	; 0x5c
 80064ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80064ee:	4621      	mov	r1, r4
 80064f0:	f003 f97e 	bl	80097f0 <prvTraceStoreEvent2>
			xReturn = errQUEUE_FULL;
 80064f4:	2000      	movs	r0, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80064f6:	e7d7      	b.n	80064a8 <MyWrapper+0xd4>
 80064f8:	20c4      	movs	r0, #196	; 0xc4
 80064fa:	e7f7      	b.n	80064ec <MyWrapper+0x118>
			xReturn = pdPASS;
 80064fc:	2001      	movs	r0, #1
 80064fe:	e7d3      	b.n	80064a8 <MyWrapper+0xd4>
 8006500:	2001      	movs	r0, #1
 8006502:	e7d1      	b.n	80064a8 <MyWrapper+0xd4>
 8006504:	2001      	movs	r0, #1
 8006506:	e7cf      	b.n	80064a8 <MyWrapper+0xd4>
			xReturn = errQUEUE_FULL;
 8006508:	2000      	movs	r0, #0
 800650a:	e7cd      	b.n	80064a8 <MyWrapper+0xd4>
 800650c:	2000      	movs	r0, #0
 800650e:	e7cb      	b.n	80064a8 <MyWrapper+0xd4>
 8006510:	20000076 	.word	0x20000076

08006514 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 8006514:	b508      	push	{r3, lr}
 8006516:	2200      	movs	r2, #0
 8006518:	f7ff ff5c 	bl	80063d4 <MyWrapper>
 800651c:	bd08      	pop	{r3, pc}
	...

08006520 <xQueueSemaphoreTake>:
{
 8006520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006522:	b085      	sub	sp, #20
 8006524:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006526:	b940      	cbnz	r0, 800653a <xQueueSemaphoreTake+0x1a>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	e7fe      	b.n	8006538 <xQueueSemaphoreTake+0x18>
 800653a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800653c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800653e:	b143      	cbz	r3, 8006552 <xQueueSemaphoreTake+0x32>
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	e7fe      	b.n	8006550 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006552:	f000 fe85 	bl	8007260 <xTaskGetSchedulerState>
 8006556:	b950      	cbnz	r0, 800656e <xQueueSemaphoreTake+0x4e>
 8006558:	9b01      	ldr	r3, [sp, #4]
 800655a:	b15b      	cbz	r3, 8006574 <xQueueSemaphoreTake+0x54>
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	e7fe      	b.n	800656c <xQueueSemaphoreTake+0x4c>
 800656e:	2500      	movs	r5, #0
 8006570:	462f      	mov	r7, r5
 8006572:	e0c2      	b.n	80066fa <xQueueSemaphoreTake+0x1da>
 8006574:	2500      	movs	r5, #0
 8006576:	462f      	mov	r7, r5
 8006578:	e0bf      	b.n	80066fa <xQueueSemaphoreTake+0x1da>
				traceQUEUE_RECEIVE( pxQueue );
 800657a:	f002 fd33 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 800657e:	f002 fcf3 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8006582:	4ba7      	ldr	r3, [pc, #668]	; (8006820 <xQueueSemaphoreTake+0x300>)
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	4218      	tst	r0, r3
 8006588:	d016      	beq.n	80065b8 <xQueueSemaphoreTake+0x98>
 800658a:	4620      	mov	r0, r4
 800658c:	f002 fcfd 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 8006590:	4ba3      	ldr	r3, [pc, #652]	; (8006820 <xQueueSemaphoreTake+0x300>)
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	4218      	tst	r0, r3
 8006596:	d00f      	beq.n	80065b8 <xQueueSemaphoreTake+0x98>
 8006598:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800659c:	2b04      	cmp	r3, #4
 800659e:	d80b      	bhi.n	80065b8 <xQueueSemaphoreTake+0x98>
 80065a0:	e8df f003 	tbb	[pc, r3]
 80065a4:	26262e03 	.word	0x26262e03
 80065a8:	2e          	.byte	0x2e
 80065a9:	00          	.byte	0x00
 80065aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065ac:	3b01      	subs	r3, #1
 80065ae:	9a01      	ldr	r2, [sp, #4]
 80065b0:	4621      	mov	r1, r4
 80065b2:	2060      	movs	r0, #96	; 0x60
 80065b4:	f002 fec4 	bl	8009340 <prvTraceStoreEvent3>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065b8:	3e01      	subs	r6, #1
 80065ba:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	b913      	cbnz	r3, 80065c6 <xQueueSemaphoreTake+0xa6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80065c0:	f000 ffde 	bl	8007580 <pvTaskIncrementMutexHeldCount>
 80065c4:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	b163      	cbz	r3, 80065e4 <xQueueSemaphoreTake+0xc4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ca:	f104 0010 	add.w	r0, r4, #16
 80065ce:	f000 fd93 	bl	80070f8 <xTaskRemoveFromEventList>
 80065d2:	b138      	cbz	r0, 80065e4 <xQueueSemaphoreTake+0xc4>
						queueYIELD_IF_USING_PREEMPTION();
 80065d4:	4b93      	ldr	r3, [pc, #588]	; (8006824 <xQueueSemaphoreTake+0x304>)
 80065d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80065e4:	f001 f868 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 80065e8:	2501      	movs	r5, #1
}
 80065ea:	4628      	mov	r0, r5
 80065ec:	b005      	add	sp, #20
 80065ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
 80065f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065f2:	3b01      	subs	r3, #1
 80065f4:	9a01      	ldr	r2, [sp, #4]
 80065f6:	4621      	mov	r1, r4
 80065f8:	2061      	movs	r0, #97	; 0x61
 80065fa:	f002 fea1 	bl	8009340 <prvTraceStoreEvent3>
 80065fe:	e7db      	b.n	80065b8 <xQueueSemaphoreTake+0x98>
 8006600:	9a01      	ldr	r2, [sp, #4]
 8006602:	4621      	mov	r1, r4
 8006604:	2062      	movs	r0, #98	; 0x62
 8006606:	f003 f8f3 	bl	80097f0 <prvTraceStoreEvent2>
 800660a:	e7d5      	b.n	80065b8 <xQueueSemaphoreTake+0x98>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800660c:	b145      	cbz	r5, 8006620 <xQueueSemaphoreTake+0x100>
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	e7fe      	b.n	800661e <xQueueSemaphoreTake+0xfe>
					taskEXIT_CRITICAL();
 8006620:	f001 f84a 	bl	80076b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006624:	f002 fcde 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 8006628:	f002 fc9e 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 800662c:	4b7c      	ldr	r3, [pc, #496]	; (8006820 <xQueueSemaphoreTake+0x300>)
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	4218      	tst	r0, r3
 8006632:	d0da      	beq.n	80065ea <xQueueSemaphoreTake+0xca>
 8006634:	4620      	mov	r0, r4
 8006636:	f002 fca8 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 800663a:	4b79      	ldr	r3, [pc, #484]	; (8006820 <xQueueSemaphoreTake+0x300>)
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	4218      	tst	r0, r3
 8006640:	d0d3      	beq.n	80065ea <xQueueSemaphoreTake+0xca>
 8006642:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006646:	2b04      	cmp	r3, #4
 8006648:	d8cf      	bhi.n	80065ea <xQueueSemaphoreTake+0xca>
 800664a:	e8df f003 	tbb	[pc, r3]
 800664e:	1103      	.short	0x1103
 8006650:	0a0a      	.short	0x0a0a
 8006652:	11          	.byte	0x11
 8006653:	00          	.byte	0x00
 8006654:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006656:	9a01      	ldr	r2, [sp, #4]
 8006658:	4621      	mov	r1, r4
 800665a:	2063      	movs	r0, #99	; 0x63
 800665c:	f002 fe70 	bl	8009340 <prvTraceStoreEvent3>
 8006660:	e7c3      	b.n	80065ea <xQueueSemaphoreTake+0xca>
 8006662:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006664:	9a01      	ldr	r2, [sp, #4]
 8006666:	4621      	mov	r1, r4
 8006668:	2064      	movs	r0, #100	; 0x64
 800666a:	f002 fe69 	bl	8009340 <prvTraceStoreEvent3>
 800666e:	e7bc      	b.n	80065ea <xQueueSemaphoreTake+0xca>
 8006670:	9a01      	ldr	r2, [sp, #4]
 8006672:	4621      	mov	r1, r4
 8006674:	2065      	movs	r0, #101	; 0x65
 8006676:	f003 f8bb 	bl	80097f0 <prvTraceStoreEvent2>
 800667a:	e7b6      	b.n	80065ea <xQueueSemaphoreTake+0xca>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800667c:	a802      	add	r0, sp, #8
 800667e:	f000 fd8f 	bl	80071a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006682:	2701      	movs	r7, #1
 8006684:	e045      	b.n	8006712 <xQueueSemaphoreTake+0x1f2>
		prvLockQueue( pxQueue );
 8006686:	2300      	movs	r3, #0
 8006688:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800668c:	e04d      	b.n	800672a <xQueueSemaphoreTake+0x20a>
 800668e:	2300      	movs	r3, #0
 8006690:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006694:	e04f      	b.n	8006736 <xQueueSemaphoreTake+0x216>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8006696:	4620      	mov	r0, r4
 8006698:	f002 fc77 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 800669c:	4b60      	ldr	r3, [pc, #384]	; (8006820 <xQueueSemaphoreTake+0x300>)
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	4218      	tst	r0, r3
 80066a2:	d05c      	beq.n	800675e <xQueueSemaphoreTake+0x23e>
 80066a4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d858      	bhi.n	800675e <xQueueSemaphoreTake+0x23e>
 80066ac:	e8df f003 	tbb	[pc, r3]
 80066b0:	0a0a1103 	.word	0x0a0a1103
 80066b4:	11          	.byte	0x11
 80066b5:	00          	.byte	0x00
 80066b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066b8:	9a01      	ldr	r2, [sp, #4]
 80066ba:	4621      	mov	r1, r4
 80066bc:	2066      	movs	r0, #102	; 0x66
 80066be:	f002 fe3f 	bl	8009340 <prvTraceStoreEvent3>
 80066c2:	e04c      	b.n	800675e <xQueueSemaphoreTake+0x23e>
 80066c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066c6:	9a01      	ldr	r2, [sp, #4]
 80066c8:	4621      	mov	r1, r4
 80066ca:	2067      	movs	r0, #103	; 0x67
 80066cc:	f002 fe38 	bl	8009340 <prvTraceStoreEvent3>
 80066d0:	e045      	b.n	800675e <xQueueSemaphoreTake+0x23e>
 80066d2:	9a01      	ldr	r2, [sp, #4]
 80066d4:	4621      	mov	r1, r4
 80066d6:	2068      	movs	r0, #104	; 0x68
 80066d8:	f003 f88a 	bl	80097f0 <prvTraceStoreEvent2>
 80066dc:	e03f      	b.n	800675e <xQueueSemaphoreTake+0x23e>
						taskENTER_CRITICAL();
 80066de:	f000 ffc9 	bl	8007674 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80066e2:	6860      	ldr	r0, [r4, #4]
 80066e4:	f000 fdcc 	bl	8007280 <xTaskPriorityInherit>
 80066e8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80066ea:	f000 ffe5 	bl	80076b8 <vPortExitCritical>
 80066ee:	e039      	b.n	8006764 <xQueueSemaphoreTake+0x244>
				prvUnlockQueue( pxQueue );
 80066f0:	4620      	mov	r0, r4
 80066f2:	f7ff fb5a 	bl	8005daa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066f6:	f000 fbc1 	bl	8006e7c <xTaskResumeAll>
		taskENTER_CRITICAL();
 80066fa:	f000 ffbb 	bl	8007674 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066fe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006700:	2e00      	cmp	r6, #0
 8006702:	f47f af3a 	bne.w	800657a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006706:	9b01      	ldr	r3, [sp, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f43f af7f 	beq.w	800660c <xQueueSemaphoreTake+0xec>
				else if( xEntryTimeSet == pdFALSE )
 800670e:	2f00      	cmp	r7, #0
 8006710:	d0b4      	beq.n	800667c <xQueueSemaphoreTake+0x15c>
		taskEXIT_CRITICAL();
 8006712:	f000 ffd1 	bl	80076b8 <vPortExitCritical>
		vTaskSuspendAll();
 8006716:	f000 faf7 	bl	8006d08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800671a:	f000 ffab 	bl	8007674 <vPortEnterCritical>
 800671e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006722:	b25b      	sxtb	r3, r3
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d0ad      	beq.n	8006686 <xQueueSemaphoreTake+0x166>
 800672a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800672e:	b25b      	sxtb	r3, r3
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d0ab      	beq.n	800668e <xQueueSemaphoreTake+0x16e>
 8006736:	f000 ffbf 	bl	80076b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800673a:	a901      	add	r1, sp, #4
 800673c:	a802      	add	r0, sp, #8
 800673e:	f000 fd3b 	bl	80071b8 <xTaskCheckForTimeOut>
 8006742:	bb20      	cbnz	r0, 800678e <xQueueSemaphoreTake+0x26e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006744:	4620      	mov	r0, r4
 8006746:	f7ff fae8 	bl	8005d1a <prvIsQueueEmpty>
 800674a:	2800      	cmp	r0, #0
 800674c:	d0d0      	beq.n	80066f0 <xQueueSemaphoreTake+0x1d0>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800674e:	f002 fc49 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 8006752:	f002 fc09 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8006756:	4b32      	ldr	r3, [pc, #200]	; (8006820 <xQueueSemaphoreTake+0x300>)
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	4218      	tst	r0, r3
 800675c:	d19b      	bne.n	8006696 <xQueueSemaphoreTake+0x176>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0bc      	beq.n	80066de <xQueueSemaphoreTake+0x1be>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006764:	9901      	ldr	r1, [sp, #4]
 8006766:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800676a:	f000 fcad 	bl	80070c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800676e:	4620      	mov	r0, r4
 8006770:	f7ff fb1b 	bl	8005daa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006774:	f000 fb82 	bl	8006e7c <xTaskResumeAll>
 8006778:	2800      	cmp	r0, #0
 800677a:	d1be      	bne.n	80066fa <xQueueSemaphoreTake+0x1da>
					portYIELD_WITHIN_API();
 800677c:	4b29      	ldr	r3, [pc, #164]	; (8006824 <xQueueSemaphoreTake+0x304>)
 800677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	e7b5      	b.n	80066fa <xQueueSemaphoreTake+0x1da>
			prvUnlockQueue( pxQueue );
 800678e:	4620      	mov	r0, r4
 8006790:	f7ff fb0b 	bl	8005daa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006794:	f000 fb72 	bl	8006e7c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006798:	4620      	mov	r0, r4
 800679a:	f7ff fabe 	bl	8005d1a <prvIsQueueEmpty>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d0ab      	beq.n	80066fa <xQueueSemaphoreTake+0x1da>
					if( xInheritanceOccurred != pdFALSE )
 80067a2:	b155      	cbz	r5, 80067ba <xQueueSemaphoreTake+0x29a>
						taskENTER_CRITICAL();
 80067a4:	f000 ff66 	bl	8007674 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80067a8:	4620      	mov	r0, r4
 80067aa:	f7ff fa9e 	bl	8005cea <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80067ae:	4601      	mov	r1, r0
 80067b0:	6860      	ldr	r0, [r4, #4]
 80067b2:	f000 fe65 	bl	8007480 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80067b6:	f000 ff7f 	bl	80076b8 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80067ba:	f002 fc13 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 80067be:	f002 fbd3 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 80067c2:	4b17      	ldr	r3, [pc, #92]	; (8006820 <xQueueSemaphoreTake+0x300>)
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	4218      	tst	r0, r3
 80067c8:	d026      	beq.n	8006818 <xQueueSemaphoreTake+0x2f8>
 80067ca:	4620      	mov	r0, r4
 80067cc:	f002 fbdd 	bl	8008f8a <prvTraceGetQueueNumberHigh16>
 80067d0:	4b13      	ldr	r3, [pc, #76]	; (8006820 <xQueueSemaphoreTake+0x300>)
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	4218      	tst	r0, r3
 80067d6:	d021      	beq.n	800681c <xQueueSemaphoreTake+0x2fc>
 80067d8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d823      	bhi.n	8006828 <xQueueSemaphoreTake+0x308>
 80067e0:	e8df f003 	tbb	[pc, r3]
 80067e4:	0b0b1303 	.word	0x0b0b1303
 80067e8:	13          	.byte	0x13
 80067e9:	00          	.byte	0x00
 80067ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067ec:	9a01      	ldr	r2, [sp, #4]
 80067ee:	4621      	mov	r1, r4
 80067f0:	2063      	movs	r0, #99	; 0x63
 80067f2:	f002 fda5 	bl	8009340 <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 80067f6:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80067f8:	e6f7      	b.n	80065ea <xQueueSemaphoreTake+0xca>
 80067fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067fc:	9a01      	ldr	r2, [sp, #4]
 80067fe:	4621      	mov	r1, r4
 8006800:	2064      	movs	r0, #100	; 0x64
 8006802:	f002 fd9d 	bl	8009340 <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 8006806:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006808:	e6ef      	b.n	80065ea <xQueueSemaphoreTake+0xca>
 800680a:	9a01      	ldr	r2, [sp, #4]
 800680c:	4621      	mov	r1, r4
 800680e:	2065      	movs	r0, #101	; 0x65
 8006810:	f002 ffee 	bl	80097f0 <prvTraceStoreEvent2>
				return errQUEUE_EMPTY;
 8006814:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006816:	e6e8      	b.n	80065ea <xQueueSemaphoreTake+0xca>
				return errQUEUE_EMPTY;
 8006818:	2500      	movs	r5, #0
 800681a:	e6e6      	b.n	80065ea <xQueueSemaphoreTake+0xca>
 800681c:	2500      	movs	r5, #0
 800681e:	e6e4      	b.n	80065ea <xQueueSemaphoreTake+0xca>
 8006820:	20000076 	.word	0x20000076
 8006824:	e000ed04 	.word	0xe000ed04
 8006828:	2500      	movs	r5, #0
 800682a:	e6de      	b.n	80065ea <xQueueSemaphoreTake+0xca>

0800682c <uxQueueGetQueueNumber>:
	}
 800682c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800682e:	4770      	bx	lr

08006830 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8006830:	6481      	str	r1, [r0, #72]	; 0x48
	}
 8006832:	4770      	bx	lr

08006834 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006834:	4b08      	ldr	r3, [pc, #32]	; (8006858 <prvResetNextTaskUnblockTime+0x24>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	b13b      	cbz	r3, 800684c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <prvResetNextTaskUnblockTime+0x24>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	4b05      	ldr	r3, [pc, #20]	; (800685c <prvResetNextTaskUnblockTime+0x28>)
 8006848:	601a      	str	r2, [r3, #0]
	}
}
 800684a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800684c:	4b03      	ldr	r3, [pc, #12]	; (800685c <prvResetNextTaskUnblockTime+0x28>)
 800684e:	f04f 32ff 	mov.w	r2, #4294967295
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000370 	.word	0x20000370
 800685c:	20000444 	.word	0x20000444

08006860 <prvInitialiseNewTask>:
{
 8006860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006864:	4681      	mov	r9, r0
 8006866:	460d      	mov	r5, r1
 8006868:	4617      	mov	r7, r2
 800686a:	469a      	mov	sl, r3
 800686c:	9e08      	ldr	r6, [sp, #32]
 800686e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8006872:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006874:	0092      	lsls	r2, r2, #2
 8006876:	21a5      	movs	r1, #165	; 0xa5
 8006878:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800687a:	f004 fc8b 	bl	800b194 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800687e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006880:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8006884:	3a01      	subs	r2, #1
 8006886:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800688a:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800688e:	2300      	movs	r3, #0
 8006890:	2b0f      	cmp	r3, #15
 8006892:	d807      	bhi.n	80068a4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006894:	5ce9      	ldrb	r1, [r5, r3]
 8006896:	18e2      	adds	r2, r4, r3
 8006898:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800689c:	5cea      	ldrb	r2, [r5, r3]
 800689e:	b10a      	cbz	r2, 80068a4 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068a0:	3301      	adds	r3, #1
 80068a2:	e7f5      	b.n	8006890 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068a4:	2300      	movs	r3, #0
 80068a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068aa:	2e06      	cmp	r6, #6
 80068ac:	d900      	bls.n	80068b0 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068ae:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 80068b0:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80068b2:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068b4:	2500      	movs	r5, #0
 80068b6:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068b8:	1d20      	adds	r0, r4, #4
 80068ba:	f7ff f9d9 	bl	8005c70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068be:	f104 0018 	add.w	r0, r4, #24
 80068c2:	f7ff f9d5 	bl	8005c70 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068c6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c8:	f1c6 0607 	rsb	r6, r6, #7
 80068cc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068ce:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80068d0:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068d2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068d6:	4652      	mov	r2, sl
 80068d8:	4649      	mov	r1, r9
 80068da:	4638      	mov	r0, r7
 80068dc:	f000 fe9c 	bl	8007618 <pxPortInitialiseStack>
 80068e0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80068e2:	f1b8 0f00 	cmp.w	r8, #0
 80068e6:	d001      	beq.n	80068ec <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068e8:	f8c8 4000 	str.w	r4, [r8]
}
 80068ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080068f0 <prvInitialiseTaskLists>:
{
 80068f0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068f2:	2400      	movs	r4, #0
 80068f4:	e007      	b.n	8006906 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068f6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80068fa:	0093      	lsls	r3, r2, #2
 80068fc:	480e      	ldr	r0, [pc, #56]	; (8006938 <prvInitialiseTaskLists+0x48>)
 80068fe:	4418      	add	r0, r3
 8006900:	f7ff f9ab 	bl	8005c5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006904:	3401      	adds	r4, #1
 8006906:	2c06      	cmp	r4, #6
 8006908:	d9f5      	bls.n	80068f6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800690a:	4d0c      	ldr	r5, [pc, #48]	; (800693c <prvInitialiseTaskLists+0x4c>)
 800690c:	4628      	mov	r0, r5
 800690e:	f7ff f9a4 	bl	8005c5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006912:	4c0b      	ldr	r4, [pc, #44]	; (8006940 <prvInitialiseTaskLists+0x50>)
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff f9a0 	bl	8005c5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800691a:	480a      	ldr	r0, [pc, #40]	; (8006944 <prvInitialiseTaskLists+0x54>)
 800691c:	f7ff f99d 	bl	8005c5a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006920:	4809      	ldr	r0, [pc, #36]	; (8006948 <prvInitialiseTaskLists+0x58>)
 8006922:	f7ff f99a 	bl	8005c5a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006926:	4809      	ldr	r0, [pc, #36]	; (800694c <prvInitialiseTaskLists+0x5c>)
 8006928:	f7ff f997 	bl	8005c5a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800692c:	4b08      	ldr	r3, [pc, #32]	; (8006950 <prvInitialiseTaskLists+0x60>)
 800692e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006930:	4b08      	ldr	r3, [pc, #32]	; (8006954 <prvInitialiseTaskLists+0x64>)
 8006932:	601c      	str	r4, [r3, #0]
}
 8006934:	bd38      	pop	{r3, r4, r5, pc}
 8006936:	bf00      	nop
 8006938:	20000378 	.word	0x20000378
 800693c:	2000041c 	.word	0x2000041c
 8006940:	20000430 	.word	0x20000430
 8006944:	2000044c 	.word	0x2000044c
 8006948:	20000478 	.word	0x20000478
 800694c:	20000464 	.word	0x20000464
 8006950:	20000370 	.word	0x20000370
 8006954:	20000374 	.word	0x20000374

08006958 <prvAddNewTaskToReadyList>:
{
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800695c:	f000 fe8a 	bl	8007674 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006960:	4a3e      	ldr	r2, [pc, #248]	; (8006a5c <prvAddNewTaskToReadyList+0x104>)
 8006962:	6813      	ldr	r3, [r2, #0]
 8006964:	3301      	adds	r3, #1
 8006966:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006968:	4b3d      	ldr	r3, [pc, #244]	; (8006a60 <prvAddNewTaskToReadyList+0x108>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	b15b      	cbz	r3, 8006986 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800696e:	4b3d      	ldr	r3, [pc, #244]	; (8006a64 <prvAddNewTaskToReadyList+0x10c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	b96b      	cbnz	r3, 8006990 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006974:	4b3a      	ldr	r3, [pc, #232]	; (8006a60 <prvAddNewTaskToReadyList+0x108>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800697c:	429a      	cmp	r2, r3
 800697e:	d807      	bhi.n	8006990 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8006980:	4b37      	ldr	r3, [pc, #220]	; (8006a60 <prvAddNewTaskToReadyList+0x108>)
 8006982:	601c      	str	r4, [r3, #0]
 8006984:	e004      	b.n	8006990 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8006986:	4b36      	ldr	r3, [pc, #216]	; (8006a60 <prvAddNewTaskToReadyList+0x108>)
 8006988:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d04f      	beq.n	8006a30 <prvAddNewTaskToReadyList+0xd8>
		uxTaskNumber++;
 8006990:	4a35      	ldr	r2, [pc, #212]	; (8006a68 <prvAddNewTaskToReadyList+0x110>)
 8006992:	6813      	ldr	r3, [r2, #0]
 8006994:	3301      	adds	r3, #1
 8006996:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006998:	6463      	str	r3, [r4, #68]	; 0x44
		traceTASK_CREATE( pxNewTCB );
 800699a:	b1fc      	cbz	r4, 80069dc <prvAddNewTaskToReadyList+0x84>
 800699c:	4620      	mov	r0, r4
 800699e:	f002 fb05 	bl	8008fac <prvAddTaskToStackMonitor>
 80069a2:	f104 0534 	add.w	r5, r4, #52	; 0x34
 80069a6:	4629      	mov	r1, r5
 80069a8:	4620      	mov	r0, r4
 80069aa:	f002 fb7f 	bl	80090ac <prvTraceSaveObjectSymbol>
 80069ae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80069b0:	4620      	mov	r0, r4
 80069b2:	f002 fbb5 	bl	8009120 <prvTraceSaveObjectData>
 80069b6:	4623      	mov	r3, r4
 80069b8:	462a      	mov	r2, r5
 80069ba:	2103      	movs	r1, #3
 80069bc:	2001      	movs	r0, #1
 80069be:	f002 fd6d 	bl	800949c <prvTraceStoreStringEvent>
 80069c2:	4b2a      	ldr	r3, [pc, #168]	; (8006a6c <prvAddNewTaskToReadyList+0x114>)
 80069c4:	8819      	ldrh	r1, [r3, #0]
 80069c6:	4620      	mov	r0, r4
 80069c8:	f002 fad3 	bl	8008f72 <prvTraceSetTaskNumberHigh16>
 80069cc:	f002 fb0a 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 80069d0:	f002 faca 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 80069d4:	4b26      	ldr	r3, [pc, #152]	; (8006a70 <prvAddNewTaskToReadyList+0x118>)
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	4218      	tst	r0, r3
 80069da:	d12c      	bne.n	8006a36 <prvAddNewTaskToReadyList+0xde>
		prvAddTaskToReadyList( pxNewTCB );
 80069dc:	4620      	mov	r0, r4
 80069de:	f002 fac3 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 80069e2:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <prvAddNewTaskToReadyList+0x118>)
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	4218      	tst	r0, r3
 80069e8:	d132      	bne.n	8006a50 <prvAddNewTaskToReadyList+0xf8>
 80069ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069ec:	2201      	movs	r2, #1
 80069ee:	409a      	lsls	r2, r3
 80069f0:	4920      	ldr	r1, [pc, #128]	; (8006a74 <prvAddNewTaskToReadyList+0x11c>)
 80069f2:	6808      	ldr	r0, [r1, #0]
 80069f4:	4302      	orrs	r2, r0
 80069f6:	600a      	str	r2, [r1, #0]
 80069f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80069fc:	009a      	lsls	r2, r3, #2
 80069fe:	1d21      	adds	r1, r4, #4
 8006a00:	481d      	ldr	r0, [pc, #116]	; (8006a78 <prvAddNewTaskToReadyList+0x120>)
 8006a02:	4410      	add	r0, r2
 8006a04:	f7ff f937 	bl	8005c76 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006a08:	f000 fe56 	bl	80076b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006a0c:	4b15      	ldr	r3, [pc, #84]	; (8006a64 <prvAddNewTaskToReadyList+0x10c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	b16b      	cbz	r3, 8006a2e <prvAddNewTaskToReadyList+0xd6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a12:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <prvAddNewTaskToReadyList+0x108>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d207      	bcs.n	8006a2e <prvAddNewTaskToReadyList+0xd6>
			taskYIELD_IF_USING_PREEMPTION();
 8006a1e:	4b17      	ldr	r3, [pc, #92]	; (8006a7c <prvAddNewTaskToReadyList+0x124>)
 8006a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	f3bf 8f6f 	isb	sy
}
 8006a2e:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8006a30:	f7ff ff5e 	bl	80068f0 <prvInitialiseTaskLists>
 8006a34:	e7ac      	b.n	8006990 <prvAddNewTaskToReadyList+0x38>
		traceTASK_CREATE( pxNewTCB );
 8006a36:	4620      	mov	r0, r4
 8006a38:	f002 fa96 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8006a3c:	4b0c      	ldr	r3, [pc, #48]	; (8006a70 <prvAddNewTaskToReadyList+0x118>)
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	4218      	tst	r0, r3
 8006a42:	d0cb      	beq.n	80069dc <prvAddNewTaskToReadyList+0x84>
 8006a44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006a46:	4621      	mov	r1, r4
 8006a48:	2010      	movs	r0, #16
 8006a4a:	f002 fed1 	bl	80097f0 <prvTraceStoreEvent2>
 8006a4e:	e7c5      	b.n	80069dc <prvAddNewTaskToReadyList+0x84>
		prvAddTaskToReadyList( pxNewTCB );
 8006a50:	4621      	mov	r1, r4
 8006a52:	2030      	movs	r0, #48	; 0x30
 8006a54:	f002 fe96 	bl	8009784 <prvTraceStoreEvent1>
 8006a58:	e7c7      	b.n	80069ea <prvAddNewTaskToReadyList+0x92>
 8006a5a:	bf00      	nop
 8006a5c:	20000404 	.word	0x20000404
 8006a60:	2000036c 	.word	0x2000036c
 8006a64:	20000460 	.word	0x20000460
 8006a68:	20000414 	.word	0x20000414
 8006a6c:	20000074 	.word	0x20000074
 8006a70:	20000076 	.word	0x20000076
 8006a74:	20000418 	.word	0x20000418
 8006a78:	20000378 	.word	0x20000378
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <prvDeleteTCB>:
	{
 8006a80:	b510      	push	{r4, lr}
 8006a82:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a84:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8006a88:	b933      	cbnz	r3, 8006a98 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8006a8a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006a8c:	f001 f848 	bl	8007b20 <vPortFree>
				vPortFree( pxTCB );
 8006a90:	4620      	mov	r0, r4
 8006a92:	f001 f845 	bl	8007b20 <vPortFree>
	}
 8006a96:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d00a      	beq.n	8006ab2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d0fa      	beq.n	8006a96 <prvDeleteTCB+0x16>
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	e7fe      	b.n	8006ab0 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8006ab2:	f001 f835 	bl	8007b20 <vPortFree>
 8006ab6:	e7ee      	b.n	8006a96 <prvDeleteTCB+0x16>

08006ab8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <prvCheckTasksWaitingTermination+0x40>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	b1d3      	cbz	r3, 8006af4 <prvCheckTasksWaitingTermination+0x3c>
{
 8006abe:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8006ac0:	f000 fdd8 	bl	8007674 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006ac4:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <prvCheckTasksWaitingTermination+0x44>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aca:	1d20      	adds	r0, r4, #4
 8006acc:	f7ff f8f9 	bl	8005cc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ad0:	4a0b      	ldr	r2, [pc, #44]	; (8006b00 <prvCheckTasksWaitingTermination+0x48>)
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ad8:	4a07      	ldr	r2, [pc, #28]	; (8006af8 <prvCheckTasksWaitingTermination+0x40>)
 8006ada:	6813      	ldr	r3, [r2, #0]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8006ae0:	f000 fdea 	bl	80076b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f7ff ffcb 	bl	8006a80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aea:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <prvCheckTasksWaitingTermination+0x40>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e6      	bne.n	8006ac0 <prvCheckTasksWaitingTermination+0x8>
}
 8006af2:	bd10      	pop	{r4, pc}
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000408 	.word	0x20000408
 8006afc:	20000478 	.word	0x20000478
 8006b00:	20000404 	.word	0x20000404

08006b04 <prvIdleTask>:
{
 8006b04:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8006b06:	f7ff ffd7 	bl	8006ab8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b0a:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <prvIdleTask+0x20>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d9f9      	bls.n	8006b06 <prvIdleTask+0x2>
				taskYIELD();
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <prvIdleTask+0x24>)
 8006b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	e7f0      	b.n	8006b06 <prvIdleTask+0x2>
 8006b24:	20000378 	.word	0x20000378
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	4604      	mov	r4, r0
 8006b30:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b32:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006b34:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b36:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <prvAddCurrentTaskToDelayedList+0x80>)
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	3004      	adds	r0, #4
 8006b3c:	f7ff f8c1 	bl	8005cc2 <uxListRemove>
 8006b40:	b950      	cbnz	r0, 8006b58 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006b42:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <prvAddCurrentTaskToDelayedList+0x80>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b48:	2301      	movs	r3, #1
 8006b4a:	fa03 f202 	lsl.w	r2, r3, r2
 8006b4e:	4918      	ldr	r1, [pc, #96]	; (8006bb0 <prvAddCurrentTaskToDelayedList+0x84>)
 8006b50:	680b      	ldr	r3, [r1, #0]
 8006b52:	ea23 0302 	bic.w	r3, r3, r2
 8006b56:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b58:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006b5c:	d013      	beq.n	8006b86 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b5e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b60:	4b12      	ldr	r3, [pc, #72]	; (8006bac <prvAddCurrentTaskToDelayedList+0x80>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006b66:	42a5      	cmp	r5, r4
 8006b68:	d816      	bhi.n	8006b98 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b6a:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <prvAddCurrentTaskToDelayedList+0x88>)
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <prvAddCurrentTaskToDelayedList+0x80>)
 8006b70:	6819      	ldr	r1, [r3, #0]
 8006b72:	3104      	adds	r1, #4
 8006b74:	f7ff f88b 	bl	8005c8e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b78:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <prvAddCurrentTaskToDelayedList+0x8c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	d912      	bls.n	8006ba6 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8006b80:	4b0d      	ldr	r3, [pc, #52]	; (8006bb8 <prvAddCurrentTaskToDelayedList+0x8c>)
 8006b82:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b84:	e00f      	b.n	8006ba6 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	d0e9      	beq.n	8006b5e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b8a:	4b08      	ldr	r3, [pc, #32]	; (8006bac <prvAddCurrentTaskToDelayedList+0x80>)
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	3104      	adds	r1, #4
 8006b90:	480a      	ldr	r0, [pc, #40]	; (8006bbc <prvAddCurrentTaskToDelayedList+0x90>)
 8006b92:	f7ff f870 	bl	8005c76 <vListInsertEnd>
 8006b96:	e006      	b.n	8006ba6 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b98:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b9a:	6818      	ldr	r0, [r3, #0]
 8006b9c:	4b03      	ldr	r3, [pc, #12]	; (8006bac <prvAddCurrentTaskToDelayedList+0x80>)
 8006b9e:	6819      	ldr	r1, [r3, #0]
 8006ba0:	3104      	adds	r1, #4
 8006ba2:	f7ff f874 	bl	8005c8e <vListInsert>
}
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}
 8006ba8:	2000048c 	.word	0x2000048c
 8006bac:	2000036c 	.word	0x2000036c
 8006bb0:	20000418 	.word	0x20000418
 8006bb4:	20000370 	.word	0x20000370
 8006bb8:	20000444 	.word	0x20000444
 8006bbc:	20000464 	.word	0x20000464
 8006bc0:	20000374 	.word	0x20000374

08006bc4 <xTaskCreateStatic>:
	{
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006bca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8006bcc:	b945      	cbnz	r5, 8006be0 <xTaskCreateStatic+0x1c>
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	e7fe      	b.n	8006bde <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8006be0:	b944      	cbnz	r4, 8006bf4 <xTaskCreateStatic+0x30>
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	e7fe      	b.n	8006bf2 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bf4:	265c      	movs	r6, #92	; 0x5c
 8006bf6:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bf8:	9e04      	ldr	r6, [sp, #16]
 8006bfa:	2e5c      	cmp	r6, #92	; 0x5c
 8006bfc:	d008      	beq.n	8006c10 <xTaskCreateStatic+0x4c>
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	e7fe      	b.n	8006c0e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c10:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c12:	2502      	movs	r5, #2
 8006c14:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c18:	2500      	movs	r5, #0
 8006c1a:	9503      	str	r5, [sp, #12]
 8006c1c:	9402      	str	r4, [sp, #8]
 8006c1e:	ad05      	add	r5, sp, #20
 8006c20:	9501      	str	r5, [sp, #4]
 8006c22:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006c24:	9500      	str	r5, [sp, #0]
 8006c26:	f7ff fe1b 	bl	8006860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7ff fe94 	bl	8006958 <prvAddNewTaskToReadyList>
	}
 8006c30:	9805      	ldr	r0, [sp, #20]
 8006c32:	b006      	add	sp, #24
 8006c34:	bd70      	pop	{r4, r5, r6, pc}

08006c36 <xTaskCreate>:
	{
 8006c36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	4688      	mov	r8, r1
 8006c40:	4615      	mov	r5, r2
 8006c42:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c44:	0090      	lsls	r0, r2, #2
 8006c46:	f000 fecb 	bl	80079e0 <pvPortMalloc>
			if( pxStack != NULL )
 8006c4a:	b308      	cbz	r0, 8006c90 <xTaskCreate+0x5a>
 8006c4c:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c4e:	205c      	movs	r0, #92	; 0x5c
 8006c50:	f000 fec6 	bl	80079e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006c54:	4604      	mov	r4, r0
 8006c56:	b1b8      	cbz	r0, 8006c88 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8006c58:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8006c5a:	b1e4      	cbz	r4, 8006c96 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c62:	9303      	str	r3, [sp, #12]
 8006c64:	9402      	str	r4, [sp, #8]
 8006c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	464b      	mov	r3, r9
 8006c70:	462a      	mov	r2, r5
 8006c72:	4641      	mov	r1, r8
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff fdf3 	bl	8006860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7ff fe6c 	bl	8006958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c80:	2001      	movs	r0, #1
	}
 8006c82:	b005      	add	sp, #20
 8006c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f000 ff49 	bl	8007b20 <vPortFree>
 8006c8e:	e7e4      	b.n	8006c5a <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	e7f5      	b.n	8006c82 <xTaskCreate+0x4c>
 8006c96:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006c9a:	e7f2      	b.n	8006c82 <xTaskCreate+0x4c>

08006c9c <vTaskStartScheduler>:
{
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ca0:	2400      	movs	r4, #0
 8006ca2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ca4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ca6:	aa07      	add	r2, sp, #28
 8006ca8:	a906      	add	r1, sp, #24
 8006caa:	a805      	add	r0, sp, #20
 8006cac:	f001 fcc6 	bl	800863c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cb0:	9b05      	ldr	r3, [sp, #20]
 8006cb2:	9302      	str	r3, [sp, #8]
 8006cb4:	9b06      	ldr	r3, [sp, #24]
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	9400      	str	r4, [sp, #0]
 8006cba:	4623      	mov	r3, r4
 8006cbc:	9a07      	ldr	r2, [sp, #28]
 8006cbe:	490d      	ldr	r1, [pc, #52]	; (8006cf4 <vTaskStartScheduler+0x58>)
 8006cc0:	480d      	ldr	r0, [pc, #52]	; (8006cf8 <vTaskStartScheduler+0x5c>)
 8006cc2:	f7ff ff7f 	bl	8006bc4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006cc6:	b908      	cbnz	r0, 8006ccc <vTaskStartScheduler+0x30>
}
 8006cc8:	b008      	add	sp, #32
 8006cca:	bd10      	pop	{r4, pc}
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cdc:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <vTaskStartScheduler+0x60>)
 8006cde:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <vTaskStartScheduler+0x64>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <vTaskStartScheduler+0x68>)
 8006cec:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006cee:	f000 fd63 	bl	80077b8 <xPortStartScheduler>
 8006cf2:	e7e9      	b.n	8006cc8 <vTaskStartScheduler+0x2c>
 8006cf4:	0800fad0 	.word	0x0800fad0
 8006cf8:	08006b05 	.word	0x08006b05
 8006cfc:	20000444 	.word	0x20000444
 8006d00:	20000460 	.word	0x20000460
 8006d04:	2000048c 	.word	0x2000048c

08006d08 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006d08:	4a02      	ldr	r2, [pc, #8]	; (8006d14 <vTaskSuspendAll+0xc>)
 8006d0a:	6813      	ldr	r3, [r2, #0]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	6013      	str	r3, [r2, #0]
}
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20000410 	.word	0x20000410

08006d18 <xTaskIncrementTick>:
{
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 8006d1a:	4b4b      	ldr	r3, [pc, #300]	; (8006e48 <xTaskIncrementTick+0x130>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d002      	beq.n	8006d28 <xTaskIncrementTick+0x10>
 8006d22:	4b4a      	ldr	r3, [pc, #296]	; (8006e4c <xTaskIncrementTick+0x134>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	b91b      	cbnz	r3, 8006d30 <xTaskIncrementTick+0x18>
 8006d28:	4a49      	ldr	r2, [pc, #292]	; (8006e50 <xTaskIncrementTick+0x138>)
 8006d2a:	6813      	ldr	r3, [r2, #0]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	4b45      	ldr	r3, [pc, #276]	; (8006e48 <xTaskIncrementTick+0x130>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	b1ab      	cbz	r3, 8006d62 <xTaskIncrementTick+0x4a>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d36:	4b44      	ldr	r3, [pc, #272]	; (8006e48 <xTaskIncrementTick+0x130>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d178      	bne.n	8006e30 <xTaskIncrementTick+0x118>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d3e:	4b45      	ldr	r3, [pc, #276]	; (8006e54 <xTaskIncrementTick+0x13c>)
 8006d40:	681e      	ldr	r6, [r3, #0]
 8006d42:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006d44:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d46:	b9fe      	cbnz	r6, 8006d88 <xTaskIncrementTick+0x70>
			taskSWITCH_DELAYED_LISTS();
 8006d48:	4b43      	ldr	r3, [pc, #268]	; (8006e58 <xTaskIncrementTick+0x140>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	b17b      	cbz	r3, 8006d70 <xTaskIncrementTick+0x58>
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	e7fe      	b.n	8006d60 <xTaskIncrementTick+0x48>
	traceTASK_INCREMENT_TICK( xTickCount );
 8006d62:	4b3c      	ldr	r3, [pc, #240]	; (8006e54 <xTaskIncrementTick+0x13c>)
 8006d64:	6819      	ldr	r1, [r3, #0]
 8006d66:	3101      	adds	r1, #1
 8006d68:	2031      	movs	r0, #49	; 0x31
 8006d6a:	f002 fd0b 	bl	8009784 <prvTraceStoreEvent1>
 8006d6e:	e7e2      	b.n	8006d36 <xTaskIncrementTick+0x1e>
			taskSWITCH_DELAYED_LISTS();
 8006d70:	4a39      	ldr	r2, [pc, #228]	; (8006e58 <xTaskIncrementTick+0x140>)
 8006d72:	6811      	ldr	r1, [r2, #0]
 8006d74:	4b39      	ldr	r3, [pc, #228]	; (8006e5c <xTaskIncrementTick+0x144>)
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	6010      	str	r0, [r2, #0]
 8006d7a:	6019      	str	r1, [r3, #0]
 8006d7c:	4a38      	ldr	r2, [pc, #224]	; (8006e60 <xTaskIncrementTick+0x148>)
 8006d7e:	6813      	ldr	r3, [r2, #0]
 8006d80:	3301      	adds	r3, #1
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	f7ff fd56 	bl	8006834 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d88:	4b36      	ldr	r3, [pc, #216]	; (8006e64 <xTaskIncrementTick+0x14c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	42b3      	cmp	r3, r6
 8006d8e:	d940      	bls.n	8006e12 <xTaskIncrementTick+0xfa>
BaseType_t xSwitchRequired = pdFALSE;
 8006d90:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d92:	4b35      	ldr	r3, [pc, #212]	; (8006e68 <xTaskIncrementTick+0x150>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006d9c:	009a      	lsls	r2, r3, #2
 8006d9e:	4b33      	ldr	r3, [pc, #204]	; (8006e6c <xTaskIncrementTick+0x154>)
 8006da0:	589b      	ldr	r3, [r3, r2]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d949      	bls.n	8006e3a <xTaskIncrementTick+0x122>
				xSwitchRequired = pdTRUE;
 8006da6:	2501      	movs	r5, #1
 8006da8:	e047      	b.n	8006e3a <xTaskIncrementTick+0x122>
							xSwitchRequired = pdTRUE;
 8006daa:	2501      	movs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dac:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <xTaskIncrementTick+0x140>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d02f      	beq.n	8006e16 <xTaskIncrementTick+0xfe>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006db6:	4b28      	ldr	r3, [pc, #160]	; (8006e58 <xTaskIncrementTick+0x140>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006dbe:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006dc0:	429e      	cmp	r6, r3
 8006dc2:	d32d      	bcc.n	8006e20 <xTaskIncrementTick+0x108>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dc4:	1d27      	adds	r7, r4, #4
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f7fe ff7b 	bl	8005cc2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006dce:	b11b      	cbz	r3, 8006dd8 <xTaskIncrementTick+0xc0>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dd0:	f104 0018 	add.w	r0, r4, #24
 8006dd4:	f7fe ff75 	bl	8005cc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f002 f8c5 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8006dde:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <xTaskIncrementTick+0x158>)
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	4218      	tst	r0, r3
 8006de4:	d11f      	bne.n	8006e26 <xTaskIncrementTick+0x10e>
 8006de6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006de8:	2201      	movs	r2, #1
 8006dea:	409a      	lsls	r2, r3
 8006dec:	4921      	ldr	r1, [pc, #132]	; (8006e74 <xTaskIncrementTick+0x15c>)
 8006dee:	6808      	ldr	r0, [r1, #0]
 8006df0:	4302      	orrs	r2, r0
 8006df2:	600a      	str	r2, [r1, #0]
 8006df4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006df8:	009a      	lsls	r2, r3, #2
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	481b      	ldr	r0, [pc, #108]	; (8006e6c <xTaskIncrementTick+0x154>)
 8006dfe:	4410      	add	r0, r2
 8006e00:	f7fe ff39 	bl	8005c76 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006e06:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <xTaskIncrementTick+0x150>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d2cc      	bcs.n	8006daa <xTaskIncrementTick+0x92>
 8006e10:	e7cc      	b.n	8006dac <xTaskIncrementTick+0x94>
BaseType_t xSwitchRequired = pdFALSE;
 8006e12:	2500      	movs	r5, #0
 8006e14:	e7ca      	b.n	8006dac <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e16:	4b13      	ldr	r3, [pc, #76]	; (8006e64 <xTaskIncrementTick+0x14c>)
 8006e18:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1c:	601a      	str	r2, [r3, #0]
					break;
 8006e1e:	e7b8      	b.n	8006d92 <xTaskIncrementTick+0x7a>
						xNextTaskUnblockTime = xItemValue;
 8006e20:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <xTaskIncrementTick+0x14c>)
 8006e22:	6013      	str	r3, [r2, #0]
						break;
 8006e24:	e7b5      	b.n	8006d92 <xTaskIncrementTick+0x7a>
					prvAddTaskToReadyList( pxTCB );
 8006e26:	4621      	mov	r1, r4
 8006e28:	2030      	movs	r0, #48	; 0x30
 8006e2a:	f002 fcab 	bl	8009784 <prvTraceStoreEvent1>
 8006e2e:	e7da      	b.n	8006de6 <xTaskIncrementTick+0xce>
		++uxPendedTicks;
 8006e30:	4a06      	ldr	r2, [pc, #24]	; (8006e4c <xTaskIncrementTick+0x134>)
 8006e32:	6813      	ldr	r3, [r2, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006e38:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <xTaskIncrementTick+0x160>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <xTaskIncrementTick+0x12a>
			xSwitchRequired = pdTRUE;
 8006e40:	2501      	movs	r5, #1
}
 8006e42:	4628      	mov	r0, r5
 8006e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000410 	.word	0x20000410
 8006e4c:	2000040c 	.word	0x2000040c
 8006e50:	20004a70 	.word	0x20004a70
 8006e54:	2000048c 	.word	0x2000048c
 8006e58:	20000370 	.word	0x20000370
 8006e5c:	20000374 	.word	0x20000374
 8006e60:	20000448 	.word	0x20000448
 8006e64:	20000444 	.word	0x20000444
 8006e68:	2000036c 	.word	0x2000036c
 8006e6c:	20000378 	.word	0x20000378
 8006e70:	20000076 	.word	0x20000076
 8006e74:	20000418 	.word	0x20000418
 8006e78:	20000490 	.word	0x20000490

08006e7c <xTaskResumeAll>:
{
 8006e7c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8006e7e:	4b39      	ldr	r3, [pc, #228]	; (8006f64 <xTaskResumeAll+0xe8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	b943      	cbnz	r3, 8006e96 <xTaskResumeAll+0x1a>
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	e7fe      	b.n	8006e94 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8006e96:	f000 fbed 	bl	8007674 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006e9a:	4b32      	ldr	r3, [pc, #200]	; (8006f64 <xTaskResumeAll+0xe8>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	3a01      	subs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d159      	bne.n	8006f5c <xTaskResumeAll+0xe0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ea8:	4b2f      	ldr	r3, [pc, #188]	; (8006f68 <xTaskResumeAll+0xec>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	b94b      	cbnz	r3, 8006ec2 <xTaskResumeAll+0x46>
BaseType_t xAlreadyYielded = pdFALSE;
 8006eae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006eb0:	f000 fc02 	bl	80076b8 <vPortExitCritical>
}
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
					prvAddTaskToReadyList( pxTCB );
 8006eb8:	4621      	mov	r1, r4
 8006eba:	2030      	movs	r0, #48	; 0x30
 8006ebc:	f002 fc62 	bl	8009784 <prvTraceStoreEvent1>
 8006ec0:	e015      	b.n	8006eee <xTaskResumeAll+0x72>
TCB_t *pxTCB = NULL;
 8006ec2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ec4:	4b29      	ldr	r3, [pc, #164]	; (8006f6c <xTaskResumeAll+0xf0>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	b353      	cbz	r3, 8006f20 <xTaskResumeAll+0xa4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006eca:	4b28      	ldr	r3, [pc, #160]	; (8006f6c <xTaskResumeAll+0xf0>)
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ed0:	f104 0018 	add.w	r0, r4, #24
 8006ed4:	f7fe fef5 	bl	8005cc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed8:	1d25      	adds	r5, r4, #4
 8006eda:	4628      	mov	r0, r5
 8006edc:	f7fe fef1 	bl	8005cc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f002 f841 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8006ee6:	4b22      	ldr	r3, [pc, #136]	; (8006f70 <xTaskResumeAll+0xf4>)
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	4218      	tst	r0, r3
 8006eec:	d1e4      	bne.n	8006eb8 <xTaskResumeAll+0x3c>
 8006eee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	409a      	lsls	r2, r3
 8006ef4:	491f      	ldr	r1, [pc, #124]	; (8006f74 <xTaskResumeAll+0xf8>)
 8006ef6:	6808      	ldr	r0, [r1, #0]
 8006ef8:	4302      	orrs	r2, r0
 8006efa:	600a      	str	r2, [r1, #0]
 8006efc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f00:	009a      	lsls	r2, r3, #2
 8006f02:	4629      	mov	r1, r5
 8006f04:	481c      	ldr	r0, [pc, #112]	; (8006f78 <xTaskResumeAll+0xfc>)
 8006f06:	4410      	add	r0, r2
 8006f08:	f7fe feb5 	bl	8005c76 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f0e:	4b1b      	ldr	r3, [pc, #108]	; (8006f7c <xTaskResumeAll+0x100>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3d5      	bcc.n	8006ec4 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8006f18:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <xTaskResumeAll+0x104>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	e7d1      	b.n	8006ec4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8006f20:	b10c      	cbz	r4, 8006f26 <xTaskResumeAll+0xaa>
					prvResetNextTaskUnblockTime();
 8006f22:	f7ff fc87 	bl	8006834 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f26:	4b17      	ldr	r3, [pc, #92]	; (8006f84 <xTaskResumeAll+0x108>)
 8006f28:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f2a:	b154      	cbz	r4, 8006f42 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 8006f2c:	f7ff fef4 	bl	8006d18 <xTaskIncrementTick>
 8006f30:	b110      	cbz	r0, 8006f38 <xTaskResumeAll+0xbc>
								xYieldPending = pdTRUE;
 8006f32:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <xTaskResumeAll+0x104>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f38:	3c01      	subs	r4, #1
 8006f3a:	d1f7      	bne.n	8006f2c <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8006f3c:	4b11      	ldr	r3, [pc, #68]	; (8006f84 <xTaskResumeAll+0x108>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006f42:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <xTaskResumeAll+0x104>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	b15b      	cbz	r3, 8006f60 <xTaskResumeAll+0xe4>
					taskYIELD_IF_USING_PREEMPTION();
 8006f48:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <xTaskResumeAll+0x10c>)
 8006f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006f58:	2401      	movs	r4, #1
 8006f5a:	e7a9      	b.n	8006eb0 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8006f5c:	2400      	movs	r4, #0
 8006f5e:	e7a7      	b.n	8006eb0 <xTaskResumeAll+0x34>
 8006f60:	2400      	movs	r4, #0
 8006f62:	e7a5      	b.n	8006eb0 <xTaskResumeAll+0x34>
 8006f64:	20000410 	.word	0x20000410
 8006f68:	20000404 	.word	0x20000404
 8006f6c:	2000044c 	.word	0x2000044c
 8006f70:	20000076 	.word	0x20000076
 8006f74:	20000418 	.word	0x20000418
 8006f78:	20000378 	.word	0x20000378
 8006f7c:	2000036c 	.word	0x2000036c
 8006f80:	20000490 	.word	0x20000490
 8006f84:	2000040c 	.word	0x2000040c
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <vTaskDelay>:
	{
 8006f8c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f8e:	b308      	cbz	r0, 8006fd4 <vTaskDelay+0x48>
 8006f90:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <vTaskDelay+0x5c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	b143      	cbz	r3, 8006faa <vTaskDelay+0x1e>
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	e7fe      	b.n	8006fa8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006faa:	f7ff fead 	bl	8006d08 <vTaskSuspendAll>
				traceTASK_DELAY();
 8006fae:	f002 f819 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 8006fb2:	f001 ffd9 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <vTaskDelay+0x60>)
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	4218      	tst	r0, r3
 8006fbc:	d003      	beq.n	8006fc6 <vTaskDelay+0x3a>
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	207a      	movs	r0, #122	; 0x7a
 8006fc2:	f002 fbdf 	bl	8009784 <prvTraceStoreEvent1>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f7ff fdaf 	bl	8006b2c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006fce:	f7ff ff55 	bl	8006e7c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006fd2:	b938      	cbnz	r0, 8006fe4 <vTaskDelay+0x58>
			portYIELD_WITHIN_API();
 8006fd4:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <vTaskDelay+0x64>)
 8006fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	f3bf 8f6f 	isb	sy
	}
 8006fe4:	bd10      	pop	{r4, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000410 	.word	0x20000410
 8006fec:	20000076 	.word	0x20000076
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ff4:	4b2d      	ldr	r3, [pc, #180]	; (80070ac <vTaskSwitchContext+0xb8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	b11b      	cbz	r3, 8007002 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006ffa:	4b2d      	ldr	r3, [pc, #180]	; (80070b0 <vTaskSwitchContext+0xbc>)
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007002:	4b2b      	ldr	r3, [pc, #172]	; (80070b0 <vTaskSwitchContext+0xbc>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007008:	4b2a      	ldr	r3, [pc, #168]	; (80070b4 <vTaskSwitchContext+0xc0>)
 800700a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800700c:	fab3 f383 	clz	r3, r3
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f1c3 031f 	rsb	r3, r3, #31
 8007016:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800701a:	008a      	lsls	r2, r1, #2
 800701c:	4926      	ldr	r1, [pc, #152]	; (80070b8 <vTaskSwitchContext+0xc4>)
 800701e:	588a      	ldr	r2, [r1, r2]
 8007020:	b942      	cbnz	r2, 8007034 <vTaskSwitchContext+0x40>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	e7fe      	b.n	8007032 <vTaskSwitchContext+0x3e>
{
 8007034:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007036:	4820      	ldr	r0, [pc, #128]	; (80070b8 <vTaskSwitchContext+0xc4>)
 8007038:	009a      	lsls	r2, r3, #2
 800703a:	18d4      	adds	r4, r2, r3
 800703c:	00a1      	lsls	r1, r4, #2
 800703e:	4401      	add	r1, r0
 8007040:	684c      	ldr	r4, [r1, #4]
 8007042:	6864      	ldr	r4, [r4, #4]
 8007044:	604c      	str	r4, [r1, #4]
 8007046:	441a      	add	r2, r3
 8007048:	0091      	lsls	r1, r2, #2
 800704a:	3108      	adds	r1, #8
 800704c:	4408      	add	r0, r1
 800704e:	4284      	cmp	r4, r0
 8007050:	d017      	beq.n	8007082 <vTaskSwitchContext+0x8e>
 8007052:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007056:	009a      	lsls	r2, r3, #2
 8007058:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <vTaskSwitchContext+0xc4>)
 800705a:	4413      	add	r3, r2
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	4b16      	ldr	r3, [pc, #88]	; (80070bc <vTaskSwitchContext+0xc8>)
 8007062:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
 8007064:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <vTaskSwitchContext+0xcc>)
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	f001 ffbb 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 800706e:	f001 ff7b 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <vTaskSwitchContext+0xd0>)
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	4218      	tst	r0, r3
 8007078:	d10a      	bne.n	8007090 <vTaskSwitchContext+0x9c>
 800707a:	4b11      	ldr	r3, [pc, #68]	; (80070c0 <vTaskSwitchContext+0xcc>)
 800707c:	2202      	movs	r2, #2
 800707e:	601a      	str	r2, [r3, #0]
}
 8007080:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007082:	6861      	ldr	r1, [r4, #4]
 8007084:	480c      	ldr	r0, [pc, #48]	; (80070b8 <vTaskSwitchContext+0xc4>)
 8007086:	2214      	movs	r2, #20
 8007088:	fb02 0203 	mla	r2, r2, r3, r0
 800708c:	6051      	str	r1, [r2, #4]
 800708e:	e7e0      	b.n	8007052 <vTaskSwitchContext+0x5e>
		traceTASK_SWITCHED_IN();
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <vTaskSwitchContext+0xc8>)
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	f001 ffaa 	bl	8008fec <prvIsNewTCB>
 8007098:	2800      	cmp	r0, #0
 800709a:	d0ee      	beq.n	800707a <vTaskSwitchContext+0x86>
 800709c:	4b07      	ldr	r3, [pc, #28]	; (80070bc <vTaskSwitchContext+0xc8>)
 800709e:	6819      	ldr	r1, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a4:	2037      	movs	r0, #55	; 0x37
 80070a6:	f002 fba3 	bl	80097f0 <prvTraceStoreEvent2>
 80070aa:	e7e6      	b.n	800707a <vTaskSwitchContext+0x86>
 80070ac:	20000410 	.word	0x20000410
 80070b0:	20000490 	.word	0x20000490
 80070b4:	20000418 	.word	0x20000418
 80070b8:	20000378 	.word	0x20000378
 80070bc:	2000036c 	.word	0x2000036c
 80070c0:	20004a6c 	.word	0x20004a6c
 80070c4:	20000076 	.word	0x20000076

080070c8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80070c8:	b940      	cbnz	r0, 80070dc <vTaskPlaceOnEventList+0x14>
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	e7fe      	b.n	80070da <vTaskPlaceOnEventList+0x12>
{
 80070dc:	b510      	push	{r4, lr}
 80070de:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070e0:	4b04      	ldr	r3, [pc, #16]	; (80070f4 <vTaskPlaceOnEventList+0x2c>)
 80070e2:	6819      	ldr	r1, [r3, #0]
 80070e4:	3118      	adds	r1, #24
 80070e6:	f7fe fdd2 	bl	8005c8e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070ea:	2101      	movs	r1, #1
 80070ec:	4620      	mov	r0, r4
 80070ee:	f7ff fd1d 	bl	8006b2c <prvAddCurrentTaskToDelayedList>
}
 80070f2:	bd10      	pop	{r4, pc}
 80070f4:	2000036c 	.word	0x2000036c

080070f8 <xTaskRemoveFromEventList>:
{
 80070f8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80070fa:	68c3      	ldr	r3, [r0, #12]
 80070fc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80070fe:	b944      	cbnz	r4, 8007112 <xTaskRemoveFromEventList+0x1a>
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	e7fe      	b.n	8007110 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007112:	f104 0518 	add.w	r5, r4, #24
 8007116:	4628      	mov	r0, r5
 8007118:	f7fe fdd3 	bl	8005cc2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800711c:	4b19      	ldr	r3, [pc, #100]	; (8007184 <xTaskRemoveFromEventList+0x8c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	bb43      	cbnz	r3, 8007174 <xTaskRemoveFromEventList+0x7c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007122:	1d25      	adds	r5, r4, #4
 8007124:	4628      	mov	r0, r5
 8007126:	f7fe fdcc 	bl	8005cc2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800712a:	4620      	mov	r0, r4
 800712c:	f001 ff1c 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8007130:	4b15      	ldr	r3, [pc, #84]	; (8007188 <xTaskRemoveFromEventList+0x90>)
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	4218      	tst	r0, r3
 8007136:	d118      	bne.n	800716a <xTaskRemoveFromEventList+0x72>
 8007138:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800713a:	2201      	movs	r2, #1
 800713c:	409a      	lsls	r2, r3
 800713e:	4913      	ldr	r1, [pc, #76]	; (800718c <xTaskRemoveFromEventList+0x94>)
 8007140:	6808      	ldr	r0, [r1, #0]
 8007142:	4302      	orrs	r2, r0
 8007144:	600a      	str	r2, [r1, #0]
 8007146:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800714a:	009a      	lsls	r2, r3, #2
 800714c:	4629      	mov	r1, r5
 800714e:	4810      	ldr	r0, [pc, #64]	; (8007190 <xTaskRemoveFromEventList+0x98>)
 8007150:	4410      	add	r0, r2
 8007152:	f7fe fd90 	bl	8005c76 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007156:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007158:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <xTaskRemoveFromEventList+0x9c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	429a      	cmp	r2, r3
 8007160:	d90d      	bls.n	800717e <xTaskRemoveFromEventList+0x86>
		xYieldPending = pdTRUE;
 8007162:	2001      	movs	r0, #1
 8007164:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <xTaskRemoveFromEventList+0xa0>)
 8007166:	6018      	str	r0, [r3, #0]
}
 8007168:	bd38      	pop	{r3, r4, r5, pc}
		prvAddTaskToReadyList( pxUnblockedTCB );
 800716a:	4621      	mov	r1, r4
 800716c:	2030      	movs	r0, #48	; 0x30
 800716e:	f002 fb09 	bl	8009784 <prvTraceStoreEvent1>
 8007172:	e7e1      	b.n	8007138 <xTaskRemoveFromEventList+0x40>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007174:	4629      	mov	r1, r5
 8007176:	4809      	ldr	r0, [pc, #36]	; (800719c <xTaskRemoveFromEventList+0xa4>)
 8007178:	f7fe fd7d 	bl	8005c76 <vListInsertEnd>
 800717c:	e7eb      	b.n	8007156 <xTaskRemoveFromEventList+0x5e>
		xReturn = pdFALSE;
 800717e:	2000      	movs	r0, #0
	return xReturn;
 8007180:	e7f2      	b.n	8007168 <xTaskRemoveFromEventList+0x70>
 8007182:	bf00      	nop
 8007184:	20000410 	.word	0x20000410
 8007188:	20000076 	.word	0x20000076
 800718c:	20000418 	.word	0x20000418
 8007190:	20000378 	.word	0x20000378
 8007194:	2000036c 	.word	0x2000036c
 8007198:	20000490 	.word	0x20000490
 800719c:	2000044c 	.word	0x2000044c

080071a0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071a0:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <vTaskInternalSetTimeOutState+0x10>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071a6:	4b03      	ldr	r3, [pc, #12]	; (80071b4 <vTaskInternalSetTimeOutState+0x14>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6043      	str	r3, [r0, #4]
}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20000448 	.word	0x20000448
 80071b4:	2000048c 	.word	0x2000048c

080071b8 <xTaskCheckForTimeOut>:
{
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80071ba:	b150      	cbz	r0, 80071d2 <xTaskCheckForTimeOut+0x1a>
 80071bc:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80071be:	b989      	cbnz	r1, 80071e4 <xTaskCheckForTimeOut+0x2c>
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	e7fe      	b.n	80071d0 <xTaskCheckForTimeOut+0x18>
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	e7fe      	b.n	80071e2 <xTaskCheckForTimeOut+0x2a>
 80071e4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 80071e6:	f000 fa45 	bl	8007674 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80071ea:	4b11      	ldr	r3, [pc, #68]	; (8007230 <xTaskCheckForTimeOut+0x78>)
 80071ec:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071ee:	6868      	ldr	r0, [r5, #4]
 80071f0:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d016      	beq.n	8007228 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071fa:	682f      	ldr	r7, [r5, #0]
 80071fc:	4e0d      	ldr	r6, [pc, #52]	; (8007234 <xTaskCheckForTimeOut+0x7c>)
 80071fe:	6836      	ldr	r6, [r6, #0]
 8007200:	42b7      	cmp	r7, r6
 8007202:	d001      	beq.n	8007208 <xTaskCheckForTimeOut+0x50>
 8007204:	4288      	cmp	r0, r1
 8007206:	d911      	bls.n	800722c <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007208:	4293      	cmp	r3, r2
 800720a:	d803      	bhi.n	8007214 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007210:	2401      	movs	r4, #1
 8007212:	e005      	b.n	8007220 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007218:	4628      	mov	r0, r5
 800721a:	f7ff ffc1 	bl	80071a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800721e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007220:	f000 fa4a 	bl	80076b8 <vPortExitCritical>
}
 8007224:	4620      	mov	r0, r4
 8007226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8007228:	2400      	movs	r4, #0
 800722a:	e7f9      	b.n	8007220 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 800722c:	2401      	movs	r4, #1
 800722e:	e7f7      	b.n	8007220 <xTaskCheckForTimeOut+0x68>
 8007230:	2000048c 	.word	0x2000048c
 8007234:	20000448 	.word	0x20000448

08007238 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007238:	4b01      	ldr	r3, [pc, #4]	; (8007240 <vTaskMissedYield+0x8>)
 800723a:	2201      	movs	r2, #1
 800723c:	601a      	str	r2, [r3, #0]
}
 800723e:	4770      	bx	lr
 8007240:	20000490 	.word	0x20000490

08007244 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 8007244:	b108      	cbz	r0, 800724a <uxTaskGetTaskNumber+0x6>
			uxReturn = pxTCB->uxTaskNumber;
 8007246:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007248:	4770      	bx	lr
			uxReturn = 0U;
 800724a:	2000      	movs	r0, #0
	}
 800724c:	4770      	bx	lr

0800724e <vTaskSetTaskNumber>:
		if( xTask != NULL )
 800724e:	b100      	cbz	r0, 8007252 <vTaskSetTaskNumber+0x4>
			pxTCB->uxTaskNumber = uxHandle;
 8007250:	6481      	str	r1, [r0, #72]	; 0x48
	}
 8007252:	4770      	bx	lr

08007254 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8007254:	4b01      	ldr	r3, [pc, #4]	; (800725c <xTaskGetCurrentTaskHandle+0x8>)
 8007256:	6818      	ldr	r0, [r3, #0]
	}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	2000036c 	.word	0x2000036c

08007260 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007260:	4b05      	ldr	r3, [pc, #20]	; (8007278 <xTaskGetSchedulerState+0x18>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	b133      	cbz	r3, 8007274 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007266:	4b05      	ldr	r3, [pc, #20]	; (800727c <xTaskGetSchedulerState+0x1c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	b10b      	cbz	r3, 8007270 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800726c:	2000      	movs	r0, #0
	}
 800726e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8007270:	2002      	movs	r0, #2
 8007272:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007274:	2001      	movs	r0, #1
 8007276:	4770      	bx	lr
 8007278:	20000460 	.word	0x20000460
 800727c:	20000410 	.word	0x20000410

08007280 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8007280:	2800      	cmp	r0, #0
 8007282:	d077      	beq.n	8007374 <xTaskPriorityInherit+0xf4>
	{
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007288:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800728a:	4a3b      	ldr	r2, [pc, #236]	; (8007378 <xTaskPriorityInherit+0xf8>)
 800728c:	6812      	ldr	r2, [r2, #0]
 800728e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007290:	4293      	cmp	r3, r2
 8007292:	d265      	bcs.n	8007360 <xTaskPriorityInherit+0xe0>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007294:	6982      	ldr	r2, [r0, #24]
 8007296:	2a00      	cmp	r2, #0
 8007298:	db05      	blt.n	80072a6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729a:	4a37      	ldr	r2, [pc, #220]	; (8007378 <xTaskPriorityInherit+0xf8>)
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80072a0:	f1c2 0207 	rsb	r2, r2, #7
 80072a4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80072a6:	6961      	ldr	r1, [r4, #20]
 80072a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80072ac:	009a      	lsls	r2, r3, #2
 80072ae:	4b33      	ldr	r3, [pc, #204]	; (800737c <xTaskPriorityInherit+0xfc>)
 80072b0:	4413      	add	r3, r2
 80072b2:	4299      	cmp	r1, r3
 80072b4:	d00d      	beq.n	80072d2 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072b6:	4b30      	ldr	r3, [pc, #192]	; (8007378 <xTaskPriorityInherit+0xf8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80072be:	f001 fe91 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 80072c2:	f001 fe51 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 80072c6:	4b2e      	ldr	r3, [pc, #184]	; (8007380 <xTaskPriorityInherit+0x100>)
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	4218      	tst	r0, r3
 80072cc:	d136      	bne.n	800733c <xTaskPriorityInherit+0xbc>
				xReturn = pdTRUE;
 80072ce:	2001      	movs	r0, #1
	}
 80072d0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072d2:	1d25      	adds	r5, r4, #4
 80072d4:	4628      	mov	r0, r5
 80072d6:	f7fe fcf4 	bl	8005cc2 <uxListRemove>
 80072da:	b1d0      	cbz	r0, 8007312 <xTaskPriorityInherit+0x92>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072dc:	4b26      	ldr	r3, [pc, #152]	; (8007378 <xTaskPriorityInherit+0xf8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80072e4:	4620      	mov	r0, r4
 80072e6:	f001 fe3f 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 80072ea:	4b25      	ldr	r3, [pc, #148]	; (8007380 <xTaskPriorityInherit+0x100>)
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	4218      	tst	r0, r3
 80072f0:	d11f      	bne.n	8007332 <xTaskPriorityInherit+0xb2>
 80072f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072f4:	2201      	movs	r2, #1
 80072f6:	409a      	lsls	r2, r3
 80072f8:	4922      	ldr	r1, [pc, #136]	; (8007384 <xTaskPriorityInherit+0x104>)
 80072fa:	6808      	ldr	r0, [r1, #0]
 80072fc:	4302      	orrs	r2, r0
 80072fe:	600a      	str	r2, [r1, #0]
 8007300:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007304:	009a      	lsls	r2, r3, #2
 8007306:	4629      	mov	r1, r5
 8007308:	481c      	ldr	r0, [pc, #112]	; (800737c <xTaskPriorityInherit+0xfc>)
 800730a:	4410      	add	r0, r2
 800730c:	f7fe fcb3 	bl	8005c76 <vListInsertEnd>
 8007310:	e7d5      	b.n	80072be <xTaskPriorityInherit+0x3e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007312:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007314:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007318:	008a      	lsls	r2, r1, #2
 800731a:	4918      	ldr	r1, [pc, #96]	; (800737c <xTaskPriorityInherit+0xfc>)
 800731c:	588a      	ldr	r2, [r1, r2]
 800731e:	2a00      	cmp	r2, #0
 8007320:	d1dc      	bne.n	80072dc <xTaskPriorityInherit+0x5c>
 8007322:	2201      	movs	r2, #1
 8007324:	409a      	lsls	r2, r3
 8007326:	4917      	ldr	r1, [pc, #92]	; (8007384 <xTaskPriorityInherit+0x104>)
 8007328:	680b      	ldr	r3, [r1, #0]
 800732a:	ea23 0302 	bic.w	r3, r3, r2
 800732e:	600b      	str	r3, [r1, #0]
 8007330:	e7d4      	b.n	80072dc <xTaskPriorityInherit+0x5c>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007332:	4621      	mov	r1, r4
 8007334:	2030      	movs	r0, #48	; 0x30
 8007336:	f002 fa25 	bl	8009784 <prvTraceStoreEvent1>
 800733a:	e7da      	b.n	80072f2 <xTaskPriorityInherit+0x72>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800733c:	4620      	mov	r0, r4
 800733e:	f001 fe13 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8007342:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <xTaskPriorityInherit+0x100>)
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	4218      	tst	r0, r3
 8007348:	d101      	bne.n	800734e <xTaskPriorityInherit+0xce>
				xReturn = pdTRUE;
 800734a:	2001      	movs	r0, #1
 800734c:	e7c0      	b.n	80072d0 <xTaskPriorityInherit+0x50>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <xTaskPriorityInherit+0xf8>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007354:	4621      	mov	r1, r4
 8007356:	2005      	movs	r0, #5
 8007358:	f002 fa4a 	bl	80097f0 <prvTraceStoreEvent2>
				xReturn = pdTRUE;
 800735c:	2001      	movs	r0, #1
 800735e:	e7b7      	b.n	80072d0 <xTaskPriorityInherit+0x50>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007360:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <xTaskPriorityInherit+0xf8>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	429a      	cmp	r2, r3
 800736a:	d201      	bcs.n	8007370 <xTaskPriorityInherit+0xf0>
					xReturn = pdTRUE;
 800736c:	2001      	movs	r0, #1
		return xReturn;
 800736e:	e7af      	b.n	80072d0 <xTaskPriorityInherit+0x50>
	BaseType_t xReturn = pdFALSE;
 8007370:	2000      	movs	r0, #0
 8007372:	e7ad      	b.n	80072d0 <xTaskPriorityInherit+0x50>
 8007374:	2000      	movs	r0, #0
	}
 8007376:	4770      	bx	lr
 8007378:	2000036c 	.word	0x2000036c
 800737c:	20000378 	.word	0x20000378
 8007380:	20000076 	.word	0x20000076
 8007384:	20000418 	.word	0x20000418

08007388 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007388:	2800      	cmp	r0, #0
 800738a:	d06a      	beq.n	8007462 <xTaskPriorityDisinherit+0xda>
	{
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007390:	4b37      	ldr	r3, [pc, #220]	; (8007470 <xTaskPriorityDisinherit+0xe8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4283      	cmp	r3, r0
 8007396:	d008      	beq.n	80073aa <xTaskPriorityDisinherit+0x22>
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	e7fe      	b.n	80073a8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80073aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80073ac:	b943      	cbnz	r3, 80073c0 <xTaskPriorityDisinherit+0x38>
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	e7fe      	b.n	80073be <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80073c0:	3b01      	subs	r3, #1
 80073c2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073c4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80073c6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80073c8:	4291      	cmp	r1, r2
 80073ca:	d04c      	beq.n	8007466 <xTaskPriorityDisinherit+0xde>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d14c      	bne.n	800746a <xTaskPriorityDisinherit+0xe2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073d0:	1d05      	adds	r5, r0, #4
 80073d2:	4628      	mov	r0, r5
 80073d4:	f7fe fc75 	bl	8005cc2 <uxListRemove>
 80073d8:	b970      	cbnz	r0, 80073f8 <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80073dc:	2314      	movs	r3, #20
 80073de:	fb03 f302 	mul.w	r3, r3, r2
 80073e2:	4924      	ldr	r1, [pc, #144]	; (8007474 <xTaskPriorityDisinherit+0xec>)
 80073e4:	58cb      	ldr	r3, [r1, r3]
 80073e6:	b93b      	cbnz	r3, 80073f8 <xTaskPriorityDisinherit+0x70>
 80073e8:	2301      	movs	r3, #1
 80073ea:	fa03 f202 	lsl.w	r2, r3, r2
 80073ee:	4922      	ldr	r1, [pc, #136]	; (8007478 <xTaskPriorityDisinherit+0xf0>)
 80073f0:	680b      	ldr	r3, [r1, #0]
 80073f2:	ea23 0302 	bic.w	r3, r3, r2
 80073f6:	600b      	str	r3, [r1, #0]
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80073f8:	f001 fdf4 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 80073fc:	f001 fdb4 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8007400:	4b1e      	ldr	r3, [pc, #120]	; (800747c <xTaskPriorityDisinherit+0xf4>)
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	4218      	tst	r0, r3
 8007406:	d00b      	beq.n	8007420 <xTaskPriorityDisinherit+0x98>
 8007408:	4620      	mov	r0, r4
 800740a:	f001 fdad 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 800740e:	4b1b      	ldr	r3, [pc, #108]	; (800747c <xTaskPriorityDisinherit+0xf4>)
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	4218      	tst	r0, r3
 8007414:	d004      	beq.n	8007420 <xTaskPriorityDisinherit+0x98>
 8007416:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007418:	4621      	mov	r1, r4
 800741a:	2006      	movs	r0, #6
 800741c:	f002 f9e8 	bl	80097f0 <prvTraceStoreEvent2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007420:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007422:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007424:	f1c3 0307 	rsb	r3, r3, #7
 8007428:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800742a:	4620      	mov	r0, r4
 800742c:	f001 fd9c 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8007430:	4b12      	ldr	r3, [pc, #72]	; (800747c <xTaskPriorityDisinherit+0xf4>)
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	4218      	tst	r0, r3
 8007436:	d003      	beq.n	8007440 <xTaskPriorityDisinherit+0xb8>
 8007438:	4621      	mov	r1, r4
 800743a:	2030      	movs	r0, #48	; 0x30
 800743c:	f002 f9a2 	bl	8009784 <prvTraceStoreEvent1>
 8007440:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007442:	2401      	movs	r4, #1
 8007444:	fa04 f302 	lsl.w	r3, r4, r2
 8007448:	490b      	ldr	r1, [pc, #44]	; (8007478 <xTaskPriorityDisinherit+0xf0>)
 800744a:	6808      	ldr	r0, [r1, #0]
 800744c:	4303      	orrs	r3, r0
 800744e:	600b      	str	r3, [r1, #0]
 8007450:	4629      	mov	r1, r5
 8007452:	4b08      	ldr	r3, [pc, #32]	; (8007474 <xTaskPriorityDisinherit+0xec>)
 8007454:	2014      	movs	r0, #20
 8007456:	fb00 3002 	mla	r0, r0, r2, r3
 800745a:	f7fe fc0c 	bl	8005c76 <vListInsertEnd>
					xReturn = pdTRUE;
 800745e:	4620      	mov	r0, r4
	}
 8007460:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8007462:	2000      	movs	r0, #0
	}
 8007464:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8007466:	2000      	movs	r0, #0
 8007468:	e7fa      	b.n	8007460 <xTaskPriorityDisinherit+0xd8>
 800746a:	2000      	movs	r0, #0
		return xReturn;
 800746c:	e7f8      	b.n	8007460 <xTaskPriorityDisinherit+0xd8>
 800746e:	bf00      	nop
 8007470:	2000036c 	.word	0x2000036c
 8007474:	20000378 	.word	0x20000378
 8007478:	20000418 	.word	0x20000418
 800747c:	20000076 	.word	0x20000076

08007480 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8007480:	2800      	cmp	r0, #0
 8007482:	d074      	beq.n	800756e <vTaskPriorityDisinheritAfterTimeout+0xee>
	{
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8007488:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800748a:	b943      	cbnz	r3, 800749e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	e7fe      	b.n	800749c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800749e:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80074a0:	428d      	cmp	r5, r1
 80074a2:	d200      	bcs.n	80074a6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074a4:	460d      	mov	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80074a8:	42aa      	cmp	r2, r5
 80074aa:	d001      	beq.n	80074b0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d000      	beq.n	80074b2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80074b0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80074b2:	4b2f      	ldr	r3, [pc, #188]	; (8007570 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	d108      	bne.n	80074cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	e7fe      	b.n	80074ca <vTaskPriorityDisinheritAfterTimeout+0x4a>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80074cc:	f001 fd8a 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 80074d0:	f001 fd4a 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 80074d4:	4b27      	ldr	r3, [pc, #156]	; (8007574 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	4218      	tst	r0, r3
 80074da:	d00b      	beq.n	80074f4 <vTaskPriorityDisinheritAfterTimeout+0x74>
 80074dc:	4620      	mov	r0, r4
 80074de:	f001 fd43 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 80074e2:	4b24      	ldr	r3, [pc, #144]	; (8007574 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	4218      	tst	r0, r3
 80074e8:	d004      	beq.n	80074f4 <vTaskPriorityDisinheritAfterTimeout+0x74>
 80074ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80074ec:	4621      	mov	r1, r4
 80074ee:	2006      	movs	r0, #6
 80074f0:	f002 f97e 	bl	80097f0 <prvTraceStoreEvent2>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80074f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
 80074f6:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074f8:	69a2      	ldr	r2, [r4, #24]
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	db02      	blt.n	8007504 <vTaskPriorityDisinheritAfterTimeout+0x84>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074fe:	f1c5 0507 	rsb	r5, r5, #7
 8007502:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007504:	6962      	ldr	r2, [r4, #20]
 8007506:	491c      	ldr	r1, [pc, #112]	; (8007578 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007508:	2014      	movs	r0, #20
 800750a:	fb00 1303 	mla	r3, r0, r3, r1
 800750e:	429a      	cmp	r2, r3
 8007510:	d1ce      	bne.n	80074b0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007512:	1d25      	adds	r5, r4, #4
 8007514:	4628      	mov	r0, r5
 8007516:	f7fe fbd4 	bl	8005cc2 <uxListRemove>
 800751a:	b970      	cbnz	r0, 800753a <vTaskPriorityDisinheritAfterTimeout+0xba>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800751c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800751e:	2314      	movs	r3, #20
 8007520:	fb03 f302 	mul.w	r3, r3, r2
 8007524:	4914      	ldr	r1, [pc, #80]	; (8007578 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007526:	58cb      	ldr	r3, [r1, r3]
 8007528:	b93b      	cbnz	r3, 800753a <vTaskPriorityDisinheritAfterTimeout+0xba>
 800752a:	2301      	movs	r3, #1
 800752c:	fa03 f202 	lsl.w	r2, r3, r2
 8007530:	4912      	ldr	r1, [pc, #72]	; (800757c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007532:	680b      	ldr	r3, [r1, #0]
 8007534:	ea23 0302 	bic.w	r3, r3, r2
 8007538:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800753a:	4620      	mov	r0, r4
 800753c:	f001 fd14 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8007540:	4b0c      	ldr	r3, [pc, #48]	; (8007574 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	4218      	tst	r0, r3
 8007546:	d003      	beq.n	8007550 <vTaskPriorityDisinheritAfterTimeout+0xd0>
 8007548:	4621      	mov	r1, r4
 800754a:	2030      	movs	r0, #48	; 0x30
 800754c:	f002 f91a 	bl	8009784 <prvTraceStoreEvent1>
 8007550:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007552:	2301      	movs	r3, #1
 8007554:	4093      	lsls	r3, r2
 8007556:	4909      	ldr	r1, [pc, #36]	; (800757c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007558:	6808      	ldr	r0, [r1, #0]
 800755a:	4303      	orrs	r3, r0
 800755c:	600b      	str	r3, [r1, #0]
 800755e:	4629      	mov	r1, r5
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007562:	2014      	movs	r0, #20
 8007564:	fb00 3002 	mla	r0, r0, r2, r3
 8007568:	f7fe fb85 	bl	8005c76 <vListInsertEnd>
	}
 800756c:	e7a0      	b.n	80074b0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800756e:	4770      	bx	lr
 8007570:	2000036c 	.word	0x2000036c
 8007574:	20000076 	.word	0x20000076
 8007578:	20000378 	.word	0x20000378
 800757c:	20000418 	.word	0x20000418

08007580 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <pvTaskIncrementMutexHeldCount+0x18>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	b123      	cbz	r3, 8007590 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007586:	4b04      	ldr	r3, [pc, #16]	; (8007598 <pvTaskIncrementMutexHeldCount+0x18>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800758c:	3301      	adds	r3, #1
 800758e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8007590:	4b01      	ldr	r3, [pc, #4]	; (8007598 <pvTaskIncrementMutexHeldCount+0x18>)
 8007592:	6818      	ldr	r0, [r3, #0]
	}
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	2000036c 	.word	0x2000036c

0800759c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800759c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075a2:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <prvTaskExitError+0x3c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075aa:	d008      	beq.n	80075be <prvTaskExitError+0x22>
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	e7fe      	b.n	80075bc <prvTaskExitError+0x20>
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0fc      	beq.n	80075ce <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075d4:	b002      	add	sp, #8
 80075d6:	4770      	bx	lr
 80075d8:	20000060 	.word	0x20000060

080075dc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075dc:	4808      	ldr	r0, [pc, #32]	; (8007600 <prvPortStartFirstTask+0x24>)
 80075de:	6800      	ldr	r0, [r0, #0]
 80075e0:	6800      	ldr	r0, [r0, #0]
 80075e2:	f380 8808 	msr	MSP, r0
 80075e6:	f04f 0000 	mov.w	r0, #0
 80075ea:	f380 8814 	msr	CONTROL, r0
 80075ee:	b662      	cpsie	i
 80075f0:	b661      	cpsie	f
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	df00      	svc	0
 80075fc:	bf00      	nop
 80075fe:	0000      	.short	0x0000
 8007600:	e000ed08 	.word	0xe000ed08

08007604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007614 <vPortEnableVFP+0x10>
 8007608:	6801      	ldr	r1, [r0, #0]
 800760a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800760e:	6001      	str	r1, [r0, #0]
 8007610:	4770      	bx	lr
 8007612:	0000      	.short	0x0000
 8007614:	e000ed88 	.word	0xe000ed88

08007618 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800761c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007620:	f021 0101 	bic.w	r1, r1, #1
 8007624:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <pxPortInitialiseStack+0x28>)
 800762a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800762e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007632:	f06f 0302 	mvn.w	r3, #2
 8007636:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800763a:	3844      	subs	r0, #68	; 0x44
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	0800759d 	.word	0x0800759d
	...

08007650 <SVC_Handler>:
	__asm volatile (
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <pxCurrentTCBConst2>)
 8007652:	6819      	ldr	r1, [r3, #0]
 8007654:	6808      	ldr	r0, [r1, #0]
 8007656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	f380 8809 	msr	PSP, r0
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f04f 0000 	mov.w	r0, #0
 8007666:	f380 8811 	msr	BASEPRI, r0
 800766a:	4770      	bx	lr
 800766c:	f3af 8000 	nop.w

08007670 <pxCurrentTCBConst2>:
 8007670:	2000036c 	.word	0x2000036c

08007674 <vPortEnterCritical>:
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007684:	4a0a      	ldr	r2, [pc, #40]	; (80076b0 <vPortEnterCritical+0x3c>)
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	3301      	adds	r3, #1
 800768a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800768c:	2b01      	cmp	r3, #1
 800768e:	d000      	beq.n	8007692 <vPortEnterCritical+0x1e>
}
 8007690:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007692:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <vPortEnterCritical+0x40>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f013 0fff 	tst.w	r3, #255	; 0xff
 800769a:	d0f9      	beq.n	8007690 <vPortEnterCritical+0x1c>
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	e7fe      	b.n	80076ac <vPortEnterCritical+0x38>
 80076ae:	bf00      	nop
 80076b0:	20000060 	.word	0x20000060
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80076b8:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <vPortExitCritical+0x28>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	b943      	cbnz	r3, 80076d0 <vPortExitCritical+0x18>
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	e7fe      	b.n	80076ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80076d0:	3b01      	subs	r3, #1
 80076d2:	4a03      	ldr	r2, [pc, #12]	; (80076e0 <vPortExitCritical+0x28>)
 80076d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076d6:	b90b      	cbnz	r3, 80076dc <vPortExitCritical+0x24>
	__asm volatile
 80076d8:	f383 8811 	msr	BASEPRI, r3
}
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	20000060 	.word	0x20000060
	...

080076f0 <PendSV_Handler>:
	__asm volatile
 80076f0:	f3ef 8009 	mrs	r0, PSP
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	4b15      	ldr	r3, [pc, #84]	; (8007750 <pxCurrentTCBConst>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	f01e 0f10 	tst.w	lr, #16
 8007700:	bf08      	it	eq
 8007702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770a:	6010      	str	r0, [r2, #0]
 800770c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007714:	f380 8811 	msr	BASEPRI, r0
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f7ff fc68 	bl	8006ff4 <vTaskSwitchContext>
 8007724:	f04f 0000 	mov.w	r0, #0
 8007728:	f380 8811 	msr	BASEPRI, r0
 800772c:	bc09      	pop	{r0, r3}
 800772e:	6819      	ldr	r1, [r3, #0]
 8007730:	6808      	ldr	r0, [r1, #0]
 8007732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007736:	f01e 0f10 	tst.w	lr, #16
 800773a:	bf08      	it	eq
 800773c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007740:	f380 8809 	msr	PSP, r0
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	f3af 8000 	nop.w

08007750 <pxCurrentTCBConst>:
 8007750:	2000036c 	.word	0x2000036c

08007754 <SysTick_Handler>:
{
 8007754:	b508      	push	{r3, lr}
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007766:	f7ff fad7 	bl	8006d18 <xTaskIncrementTick>
 800776a:	b118      	cbz	r0, 8007774 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800776c:	4b03      	ldr	r3, [pc, #12]	; (800777c <SysTick_Handler+0x28>)
 800776e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007772:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007774:	2300      	movs	r3, #0
 8007776:	f383 8811 	msr	BASEPRI, r3
}
 800777a:	bd08      	pop	{r3, pc}
 800777c:	e000ed04 	.word	0xe000ed04

08007780 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <vPortSetupTimerInterrupt+0x24>)
 8007782:	2300      	movs	r3, #0
 8007784:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007786:	4908      	ldr	r1, [pc, #32]	; (80077a8 <vPortSetupTimerInterrupt+0x28>)
 8007788:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800778a:	4b08      	ldr	r3, [pc, #32]	; (80077ac <vPortSetupTimerInterrupt+0x2c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4908      	ldr	r1, [pc, #32]	; (80077b0 <vPortSetupTimerInterrupt+0x30>)
 8007790:	fba1 1303 	umull	r1, r3, r1, r3
 8007794:	099b      	lsrs	r3, r3, #6
 8007796:	3b01      	subs	r3, #1
 8007798:	4906      	ldr	r1, [pc, #24]	; (80077b4 <vPortSetupTimerInterrupt+0x34>)
 800779a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800779c:	2307      	movs	r3, #7
 800779e:	6013      	str	r3, [r2, #0]
}
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	e000e010 	.word	0xe000e010
 80077a8:	e000e018 	.word	0xe000e018
 80077ac:	20000070 	.word	0x20000070
 80077b0:	10624dd3 	.word	0x10624dd3
 80077b4:	e000e014 	.word	0xe000e014

080077b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077b8:	4b3a      	ldr	r3, [pc, #232]	; (80078a4 <xPortStartScheduler+0xec>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	4b3a      	ldr	r3, [pc, #232]	; (80078a8 <xPortStartScheduler+0xf0>)
 80077be:	429a      	cmp	r2, r3
 80077c0:	d00d      	beq.n	80077de <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077c2:	4b38      	ldr	r3, [pc, #224]	; (80078a4 <xPortStartScheduler+0xec>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	4b39      	ldr	r3, [pc, #228]	; (80078ac <xPortStartScheduler+0xf4>)
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d111      	bne.n	80077f0 <xPortStartScheduler+0x38>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	e7fe      	b.n	80077dc <xPortStartScheduler+0x24>
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	e7fe      	b.n	80077ee <xPortStartScheduler+0x36>
{
 80077f0:	b510      	push	{r4, lr}
 80077f2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077f4:	4b2e      	ldr	r3, [pc, #184]	; (80078b0 <xPortStartScheduler+0xf8>)
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	b2d2      	uxtb	r2, r2
 80077fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077fc:	22ff      	movs	r2, #255	; 0xff
 80077fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007808:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800780c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007810:	4a28      	ldr	r2, [pc, #160]	; (80078b4 <xPortStartScheduler+0xfc>)
 8007812:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007814:	4b28      	ldr	r3, [pc, #160]	; (80078b8 <xPortStartScheduler+0x100>)
 8007816:	2207      	movs	r2, #7
 8007818:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800781a:	e009      	b.n	8007830 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800781c:	4a26      	ldr	r2, [pc, #152]	; (80078b8 <xPortStartScheduler+0x100>)
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	3b01      	subs	r3, #1
 8007822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007824:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	b2db      	uxtb	r3, r3
 800782c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007830:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007834:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007838:	d1f0      	bne.n	800781c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800783a:	4b1f      	ldr	r3, [pc, #124]	; (80078b8 <xPortStartScheduler+0x100>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b03      	cmp	r3, #3
 8007840:	d008      	beq.n	8007854 <xPortStartScheduler+0x9c>
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	e7fe      	b.n	8007852 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007854:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800785a:	4a17      	ldr	r2, [pc, #92]	; (80078b8 <xPortStartScheduler+0x100>)
 800785c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	4a13      	ldr	r2, [pc, #76]	; (80078b0 <xPortStartScheduler+0xf8>)
 8007864:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007866:	4b15      	ldr	r3, [pc, #84]	; (80078bc <xPortStartScheduler+0x104>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800786e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007876:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007878:	f7ff ff82 	bl	8007780 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800787c:	2400      	movs	r4, #0
 800787e:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <xPortStartScheduler+0x108>)
 8007880:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8007882:	f7ff febf 	bl	8007604 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007886:	4a0f      	ldr	r2, [pc, #60]	; (80078c4 <xPortStartScheduler+0x10c>)
 8007888:	6813      	ldr	r3, [r2, #0]
 800788a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800788e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007890:	f7ff fea4 	bl	80075dc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007894:	f7ff fbae 	bl	8006ff4 <vTaskSwitchContext>
	prvTaskExitError();
 8007898:	f7ff fe80 	bl	800759c <prvTaskExitError>
}
 800789c:	4620      	mov	r0, r4
 800789e:	b002      	add	sp, #8
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	bf00      	nop
 80078a4:	e000ed00 	.word	0xe000ed00
 80078a8:	410fc271 	.word	0x410fc271
 80078ac:	410fc270 	.word	0x410fc270
 80078b0:	e000e400 	.word	0xe000e400
 80078b4:	20000494 	.word	0x20000494
 80078b8:	20000498 	.word	0x20000498
 80078bc:	e000ed20 	.word	0xe000ed20
 80078c0:	20000060 	.word	0x20000060
 80078c4:	e000ef34 	.word	0xe000ef34

080078c8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078c8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078cc:	2b0f      	cmp	r3, #15
 80078ce:	d90f      	bls.n	80078f0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078d0:	4a10      	ldr	r2, [pc, #64]	; (8007914 <vPortValidateInterruptPriority+0x4c>)
 80078d2:	5c9b      	ldrb	r3, [r3, r2]
 80078d4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078d6:	4a10      	ldr	r2, [pc, #64]	; (8007918 <vPortValidateInterruptPriority+0x50>)
 80078d8:	7812      	ldrb	r2, [r2, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d908      	bls.n	80078f0 <vPortValidateInterruptPriority+0x28>
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	e7fe      	b.n	80078ee <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078f0:	4b0a      	ldr	r3, [pc, #40]	; (800791c <vPortValidateInterruptPriority+0x54>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078f8:	4a09      	ldr	r2, [pc, #36]	; (8007920 <vPortValidateInterruptPriority+0x58>)
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d908      	bls.n	8007912 <vPortValidateInterruptPriority+0x4a>
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	e7fe      	b.n	8007910 <vPortValidateInterruptPriority+0x48>
	}
 8007912:	4770      	bx	lr
 8007914:	e000e3f0 	.word	0xe000e3f0
 8007918:	20000494 	.word	0x20000494
 800791c:	e000ed0c 	.word	0xe000ed0c
 8007920:	20000498 	.word	0x20000498

08007924 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007924:	4a12      	ldr	r2, [pc, #72]	; (8007970 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007926:	f012 0f07 	tst.w	r2, #7
 800792a:	d01e      	beq.n	800796a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800792c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800792e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007932:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8007936:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007938:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800793a:	480e      	ldr	r0, [pc, #56]	; (8007974 <prvHeapInit+0x50>)
 800793c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800793e:	2100      	movs	r1, #0
 8007940:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007942:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007944:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007946:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800794a:	480b      	ldr	r0, [pc, #44]	; (8007978 <prvHeapInit+0x54>)
 800794c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800794e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007950:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007952:	1a99      	subs	r1, r3, r2
 8007954:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007956:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007958:	4b08      	ldr	r3, [pc, #32]	; (800797c <prvHeapInit+0x58>)
 800795a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800795c:	4b08      	ldr	r3, [pc, #32]	; (8007980 <prvHeapInit+0x5c>)
 800795e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007960:	4b08      	ldr	r3, [pc, #32]	; (8007984 <prvHeapInit+0x60>)
 8007962:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007966:	601a      	str	r2, [r3, #0]
}
 8007968:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800796a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800796e:	e7e4      	b.n	800793a <prvHeapInit+0x16>
 8007970:	200004a0 	.word	0x200004a0
 8007974:	200040ac 	.word	0x200040ac
 8007978:	2000049c 	.word	0x2000049c
 800797c:	200040a8 	.word	0x200040a8
 8007980:	200040a4 	.word	0x200040a4
 8007984:	200040a0 	.word	0x200040a0

08007988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007988:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800798a:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <prvInsertBlockIntoFreeList+0x50>)
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	4282      	cmp	r2, r0
 8007990:	d31b      	bcc.n	80079ca <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007992:	6859      	ldr	r1, [r3, #4]
 8007994:	185c      	adds	r4, r3, r1
 8007996:	4284      	cmp	r4, r0
 8007998:	d103      	bne.n	80079a2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800799a:	6840      	ldr	r0, [r0, #4]
 800799c:	4401      	add	r1, r0
 800799e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079a0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079a2:	6841      	ldr	r1, [r0, #4]
 80079a4:	1844      	adds	r4, r0, r1
 80079a6:	42a2      	cmp	r2, r4
 80079a8:	d113      	bne.n	80079d2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079aa:	4c0c      	ldr	r4, [pc, #48]	; (80079dc <prvInsertBlockIntoFreeList+0x54>)
 80079ac:	6824      	ldr	r4, [r4, #0]
 80079ae:	42a2      	cmp	r2, r4
 80079b0:	d00d      	beq.n	80079ce <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079b2:	6852      	ldr	r2, [r2, #4]
 80079b4:	4411      	add	r1, r2
 80079b6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079be:	4298      	cmp	r0, r3
 80079c0:	d000      	beq.n	80079c4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079c2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079c8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079ca:	4613      	mov	r3, r2
 80079cc:	e7de      	b.n	800798c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079ce:	6004      	str	r4, [r0, #0]
 80079d0:	e7f5      	b.n	80079be <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079d2:	6002      	str	r2, [r0, #0]
 80079d4:	e7f3      	b.n	80079be <prvInsertBlockIntoFreeList+0x36>
 80079d6:	bf00      	nop
 80079d8:	200040ac 	.word	0x200040ac
 80079dc:	2000049c 	.word	0x2000049c

080079e0 <pvPortMalloc>:
{
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80079e4:	f7ff f990 	bl	8006d08 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80079e8:	4b46      	ldr	r3, [pc, #280]	; (8007b04 <pvPortMalloc+0x124>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	b1bb      	cbz	r3, 8007a1e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079ee:	4b46      	ldr	r3, [pc, #280]	; (8007b08 <pvPortMalloc+0x128>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	421c      	tst	r4, r3
 80079f4:	d176      	bne.n	8007ae4 <pvPortMalloc+0x104>
			if( xWantedSize > 0 )
 80079f6:	b1ac      	cbz	r4, 8007a24 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 80079f8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079fa:	f014 0f07 	tst.w	r4, #7
 80079fe:	d011      	beq.n	8007a24 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a00:	f024 0407 	bic.w	r4, r4, #7
 8007a04:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a06:	f004 0307 	and.w	r3, r4, #7
 8007a0a:	b15b      	cbz	r3, 8007a24 <pvPortMalloc+0x44>
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	e7fe      	b.n	8007a1c <pvPortMalloc+0x3c>
			prvHeapInit();
 8007a1e:	f7ff ff81 	bl	8007924 <prvHeapInit>
 8007a22:	e7e4      	b.n	80079ee <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a24:	2c00      	cmp	r4, #0
 8007a26:	d05f      	beq.n	8007ae8 <pvPortMalloc+0x108>
 8007a28:	4b38      	ldr	r3, [pc, #224]	; (8007b0c <pvPortMalloc+0x12c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	d35d      	bcc.n	8007aec <pvPortMalloc+0x10c>
				pxBlock = xStart.pxNextFreeBlock;
 8007a30:	4b37      	ldr	r3, [pc, #220]	; (8007b10 <pvPortMalloc+0x130>)
 8007a32:	681e      	ldr	r6, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a34:	e001      	b.n	8007a3a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8007a36:	4633      	mov	r3, r6
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a38:	4616      	mov	r6, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a3a:	6872      	ldr	r2, [r6, #4]
 8007a3c:	42a2      	cmp	r2, r4
 8007a3e:	d202      	bcs.n	8007a46 <pvPortMalloc+0x66>
 8007a40:	6832      	ldr	r2, [r6, #0]
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d1f7      	bne.n	8007a36 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8007a46:	4a2f      	ldr	r2, [pc, #188]	; (8007b04 <pvPortMalloc+0x124>)
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	42b2      	cmp	r2, r6
 8007a4c:	d050      	beq.n	8007af0 <pvPortMalloc+0x110>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a4e:	681d      	ldr	r5, [r3, #0]
 8007a50:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a52:	6832      	ldr	r2, [r6, #0]
 8007a54:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a56:	6873      	ldr	r3, [r6, #4]
 8007a58:	1b1b      	subs	r3, r3, r4
 8007a5a:	2b10      	cmp	r3, #16
 8007a5c:	d910      	bls.n	8007a80 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a5e:	1930      	adds	r0, r6, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a60:	f010 0f07 	tst.w	r0, #7
 8007a64:	d008      	beq.n	8007a78 <pvPortMalloc+0x98>
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	e7fe      	b.n	8007a76 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a78:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a7a:	6074      	str	r4, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a7c:	f7ff ff84 	bl	8007988 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a80:	6872      	ldr	r2, [r6, #4]
 8007a82:	4922      	ldr	r1, [pc, #136]	; (8007b0c <pvPortMalloc+0x12c>)
 8007a84:	680b      	ldr	r3, [r1, #0]
 8007a86:	1a9b      	subs	r3, r3, r2
 8007a88:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a8a:	4922      	ldr	r1, [pc, #136]	; (8007b14 <pvPortMalloc+0x134>)
 8007a8c:	6809      	ldr	r1, [r1, #0]
 8007a8e:	428b      	cmp	r3, r1
 8007a90:	d201      	bcs.n	8007a96 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a92:	4920      	ldr	r1, [pc, #128]	; (8007b14 <pvPortMalloc+0x134>)
 8007a94:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a96:	4b1c      	ldr	r3, [pc, #112]	; (8007b08 <pvPortMalloc+0x128>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6033      	str	r3, [r6, #0]
		traceMALLOC( pvReturn, xWantedSize );
 8007aa2:	b11d      	cbz	r5, 8007aac <pvPortMalloc+0xcc>
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <pvPortMalloc+0x138>)
 8007aa6:	6813      	ldr	r3, [r2, #0]
 8007aa8:	4423      	add	r3, r4
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	f001 fa9a 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 8007ab0:	f001 fa5a 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8007ab4:	4b19      	ldr	r3, [pc, #100]	; (8007b1c <pvPortMalloc+0x13c>)
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	4218      	tst	r0, r3
 8007aba:	d005      	beq.n	8007ac8 <pvPortMalloc+0xe8>
 8007abc:	b1d5      	cbz	r5, 8007af4 <pvPortMalloc+0x114>
 8007abe:	4622      	mov	r2, r4
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	2038      	movs	r0, #56	; 0x38
 8007ac4:	f001 fe94 	bl	80097f0 <prvTraceStoreEvent2>
	( void ) xTaskResumeAll();
 8007ac8:	f7ff f9d8 	bl	8006e7c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007acc:	f015 0f07 	tst.w	r5, #7
 8007ad0:	d016      	beq.n	8007b00 <pvPortMalloc+0x120>
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	e7fe      	b.n	8007ae2 <pvPortMalloc+0x102>
void *pvReturn = NULL;
 8007ae4:	2500      	movs	r5, #0
 8007ae6:	e7e1      	b.n	8007aac <pvPortMalloc+0xcc>
 8007ae8:	2500      	movs	r5, #0
 8007aea:	e7df      	b.n	8007aac <pvPortMalloc+0xcc>
 8007aec:	2500      	movs	r5, #0
 8007aee:	e7dd      	b.n	8007aac <pvPortMalloc+0xcc>
 8007af0:	2500      	movs	r5, #0
 8007af2:	e7db      	b.n	8007aac <pvPortMalloc+0xcc>
		traceMALLOC( pvReturn, xWantedSize );
 8007af4:	4622      	mov	r2, r4
 8007af6:	4629      	mov	r1, r5
 8007af8:	20e9      	movs	r0, #233	; 0xe9
 8007afa:	f001 fe79 	bl	80097f0 <prvTraceStoreEvent2>
 8007afe:	e7e3      	b.n	8007ac8 <pvPortMalloc+0xe8>
}
 8007b00:	4628      	mov	r0, r5
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	2000049c 	.word	0x2000049c
 8007b08:	200040a0 	.word	0x200040a0
 8007b0c:	200040a4 	.word	0x200040a4
 8007b10:	200040ac 	.word	0x200040ac
 8007b14:	200040a8 	.word	0x200040a8
 8007b18:	20004a68 	.word	0x20004a68
 8007b1c:	20000076 	.word	0x20000076

08007b20 <vPortFree>:
	if( pv != NULL )
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d043      	beq.n	8007bac <vPortFree+0x8c>
{
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8007b28:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b2c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007b30:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <vPortFree+0x90>)
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	4213      	tst	r3, r2
 8007b36:	d108      	bne.n	8007b4a <vPortFree+0x2a>
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	e7fe      	b.n	8007b48 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b4a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007b4e:	b141      	cbz	r1, 8007b62 <vPortFree+0x42>
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	e7fe      	b.n	8007b60 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b62:	ea23 0302 	bic.w	r3, r3, r2
 8007b66:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007b6a:	f7ff f8cd 	bl	8006d08 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b6e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007b72:	4a10      	ldr	r2, [pc, #64]	; (8007bb4 <vPortFree+0x94>)
 8007b74:	6813      	ldr	r3, [r2, #0]
 8007b76:	440b      	add	r3, r1
 8007b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 8007b7a:	4a0f      	ldr	r2, [pc, #60]	; (8007bb8 <vPortFree+0x98>)
 8007b7c:	6813      	ldr	r3, [r2, #0]
 8007b7e:	1a5b      	subs	r3, r3, r1
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	f001 fa2f 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 8007b86:	f001 f9ef 	bl	8008f68 <prvTraceGetTaskNumberHigh16>
 8007b8a:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <vPortFree+0x9c>)
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	4218      	tst	r0, r3
 8007b90:	d006      	beq.n	8007ba0 <vPortFree+0x80>
 8007b92:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8007b96:	4252      	negs	r2, r2
 8007b98:	4621      	mov	r1, r4
 8007b9a:	2039      	movs	r0, #57	; 0x39
 8007b9c:	f001 fe28 	bl	80097f0 <prvTraceStoreEvent2>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f7ff fef1 	bl	8007988 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007ba6:	f7ff f969 	bl	8006e7c <xTaskResumeAll>
}
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	200040a0 	.word	0x200040a0
 8007bb4:	200040a4 	.word	0x200040a4
 8007bb8:	20004a68 	.word	0x20004a68
 8007bbc:	20000076 	.word	0x20000076

08007bc0 <RF_init>:
float yaw_d_gain;

/////////////////////////////////////////////////////////////////
////////////////////// Init NRF24L01 Module /////////////////////
/////////////////////////////////////////////////////////////////
void RF_init() {
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	b096      	sub	sp, #88	; 0x58

#if NRF24
	DWT_Init(); //Enable some of the MCUs special registers so we can get microsecond (us) delays
 8007bc4:	f7fb f9ca 	bl	8002f5c <DWT_Init>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 8007bc8:	4c1e      	ldr	r4, [pc, #120]	; (8007c44 <RF_init+0x84>)
 8007bca:	2254      	movs	r2, #84	; 0x54
 8007bcc:	1d21      	adds	r1, r4, #4
 8007bce:	4668      	mov	r0, sp
 8007bd0:	f003 fad5 	bl	800b17e <memcpy>
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007bde:	481a      	ldr	r0, [pc, #104]	; (8007c48 <RF_init+0x88>)
 8007be0:	f7fa fc66 	bl	80024b0 <NRF24_begin>
	nrf24_DebugUART_Init(huart6);
 8007be4:	4e19      	ldr	r6, [pc, #100]	; (8007c4c <RF_init+0x8c>)
 8007be6:	466c      	mov	r4, sp
 8007be8:	f106 0510 	add.w	r5, r6, #16
 8007bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bf4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007bfc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007c00:	f7fb f81c 	bl	8002c3c <nrf24_DebugUART_Init>
	NRF24_enableAckPayload();
 8007c04:	f7fa fc30 	bl	8002468 <NRF24_enableAckPayload>
	NRF24_setAutoAck(true);
 8007c08:	2001      	movs	r0, #1
 8007c0a:	f7fa fb6d 	bl	80022e8 <NRF24_setAutoAck>
	NRF24_openReadingPipe(1, TxpipeAddrs);
 8007c0e:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <RF_init+0x90>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	2001      	movs	r0, #1
 8007c16:	f7fa facd 	bl	80021b4 <NRF24_openReadingPipe>
	NRF24_startListening();
 8007c1a:	f7fa faa9 	bl	8002170 <NRF24_startListening>

	printRadioSettings();
 8007c1e:	f7fa fd1d 	bl	800265c <printRadioSettings>

	Rx_Data.kill_rx = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	4a0b      	ldr	r2, [pc, #44]	; (8007c54 <RF_init+0x94>)
 8007c26:	7253      	strb	r3, [r2, #9]

	for (int i = 0; i < 32; ++i) {
 8007c28:	e007      	b.n	8007c3a <RF_init+0x7a>

		RxData[i] = 0;
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	490a      	ldr	r1, [pc, #40]	; (8007c58 <RF_init+0x98>)
 8007c2e:	54ca      	strb	r2, [r1, r3]
		AckPayload_0[i] = 0;
 8007c30:	490a      	ldr	r1, [pc, #40]	; (8007c5c <RF_init+0x9c>)
 8007c32:	54ca      	strb	r2, [r1, r3]
		AckPayload_1[i] = 0;
 8007c34:	490a      	ldr	r1, [pc, #40]	; (8007c60 <RF_init+0xa0>)
 8007c36:	54ca      	strb	r2, [r1, r3]
	for (int i = 0; i < 32; ++i) {
 8007c38:	3301      	adds	r3, #1
 8007c3a:	2b1f      	cmp	r3, #31
 8007c3c:	ddf5      	ble.n	8007c2a <RF_init+0x6a>
	}
#endif

}
 8007c3e:	b016      	add	sp, #88	; 0x58
 8007c40:	bd70      	pop	{r4, r5, r6, pc}
 8007c42:	bf00      	nop
 8007c44:	20005158 	.word	0x20005158
 8007c48:	40020400 	.word	0x40020400
 8007c4c:	2000663c 	.word	0x2000663c
 8007c50:	20000068 	.word	0x20000068
 8007c54:	20004be0 	.word	0x20004be0
 8007c58:	20004bf0 	.word	0x20004bf0
 8007c5c:	20004bb4 	.word	0x20004bb4
 8007c60:	20004b90 	.word	0x20004b90

08007c64 <packAckPayData_0>:

}

//	Pack acknowledge payload data 0 - sent every control loop, which will be sent back to controller once drone has successfully
//	received a payload from it
void packAckPayData_0(float roll, float pitch, float yaw) {
 8007c64:	b510      	push	{r4, lr}
 8007c66:	ed2d 8b04 	vpush	{d8-d9}
 8007c6a:	eeb0 9a60 	vmov.f32	s18, s1
 8007c6e:	eef0 8a41 	vmov.f32	s17, s2

	//ID for packet 0
	AckPayload_0[0] = 0x03;
 8007c72:	4c21      	ldr	r4, [pc, #132]	; (8007cf8 <packAckPayData_0+0x94>)
 8007c74:	2303      	movs	r3, #3
 8007c76:	7023      	strb	r3, [r4, #0]

	//Next 2 bytes = Battery level
	AckPayload_0[1] = batteryLevel;
 8007c78:	4b20      	ldr	r3, [pc, #128]	; (8007cfc <packAckPayData_0+0x98>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	7063      	strb	r3, [r4, #1]
	AckPayload_0[2] = batteryLevel >> 8;
 8007c7e:	0a1b      	lsrs	r3, r3, #8
 8007c80:	70a3      	strb	r3, [r4, #2]

	//Next 4 bytes = IMU Roll
	int16_t roll_tx = round(roll * 100);
 8007c82:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8007d00 <packAckPayData_0+0x9c>
 8007c86:	ee60 7a08 	vmul.f32	s15, s0, s16
 8007c8a:	ee17 0a90 	vmov	r0, s15
 8007c8e:	f7f8 fc63 	bl	8000558 <__aeabi_f2d>
 8007c92:	ec41 0b10 	vmov	d0, r0, r1
 8007c96:	f001 fe6d 	bl	8009974 <round>
 8007c9a:	ec51 0b10 	vmov	r0, r1, d0
 8007c9e:	f7f8 ff63 	bl	8000b68 <__aeabi_d2iz>
 8007ca2:	b200      	sxth	r0, r0
	AckPayload_0[3] = roll_tx;
 8007ca4:	70e0      	strb	r0, [r4, #3]
	AckPayload_0[4] = roll_tx >> 8;
 8007ca6:	1200      	asrs	r0, r0, #8
 8007ca8:	7120      	strb	r0, [r4, #4]

	//Next  4 bytes = IMU Pitch
	int16_t pitch_tx = round(pitch * 100);
 8007caa:	ee69 7a08 	vmul.f32	s15, s18, s16
 8007cae:	ee17 0a90 	vmov	r0, s15
 8007cb2:	f7f8 fc51 	bl	8000558 <__aeabi_f2d>
 8007cb6:	ec41 0b10 	vmov	d0, r0, r1
 8007cba:	f001 fe5b 	bl	8009974 <round>
 8007cbe:	ec51 0b10 	vmov	r0, r1, d0
 8007cc2:	f7f8 ff51 	bl	8000b68 <__aeabi_d2iz>
 8007cc6:	b200      	sxth	r0, r0
	AckPayload_0[5] = pitch_tx;
 8007cc8:	7160      	strb	r0, [r4, #5]
	AckPayload_0[6] = pitch_tx >> 8;
 8007cca:	1200      	asrs	r0, r0, #8
 8007ccc:	71a0      	strb	r0, [r4, #6]

	//Next  4 bytes = IMU Yaw
	int16_t yaw_tx = round(yaw * 100);
 8007cce:	ee68 7a88 	vmul.f32	s15, s17, s16
 8007cd2:	ee17 0a90 	vmov	r0, s15
 8007cd6:	f7f8 fc3f 	bl	8000558 <__aeabi_f2d>
 8007cda:	ec41 0b10 	vmov	d0, r0, r1
 8007cde:	f001 fe49 	bl	8009974 <round>
 8007ce2:	ec51 0b10 	vmov	r0, r1, d0
 8007ce6:	f7f8 ff3f 	bl	8000b68 <__aeabi_d2iz>
 8007cea:	b200      	sxth	r0, r0
	AckPayload_0[7] = yaw_tx;
 8007cec:	71e0      	strb	r0, [r4, #7]
	AckPayload_0[8] = yaw_tx >> 8;
 8007cee:	1200      	asrs	r0, r0, #8
 8007cf0:	7220      	strb	r0, [r4, #8]

}
 8007cf2:	ecbd 8b04 	vpop	{d8-d9}
 8007cf6:	bd10      	pop	{r4, pc}
 8007cf8:	20004bb4 	.word	0x20004bb4
 8007cfc:	200040b4 	.word	0x200040b4
 8007d00:	42c80000 	.word	0x42c80000

08007d04 <kill>:
}

/*
 *  Kill function disables PWM outputs, turning off motors
 */
void kill() {
 8007d04:	b510      	push	{r4, lr}
	htim4.Instance->CCR1 = 1250;
 8007d06:	4c0c      	ldr	r4, [pc, #48]	; (8007d38 <kill+0x34>)
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007d0e:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = 1250;
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 1250;
 8007d12:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 1250;
 8007d14:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8007d16:	2100      	movs	r1, #0
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f7fd fb51 	bl	80053c0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8007d1e:	2104      	movs	r1, #4
 8007d20:	4620      	mov	r0, r4
 8007d22:	f7fd fb4d 	bl	80053c0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8007d26:	2108      	movs	r1, #8
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f7fd fb49 	bl	80053c0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8007d2e:	210c      	movs	r1, #12
 8007d30:	4620      	mov	r0, r4
 8007d32:	f7fd fb45 	bl	80053c0 <HAL_TIM_PWM_Stop>
}
 8007d36:	bd10      	pop	{r4, pc}
 8007d38:	200051f0 	.word	0x200051f0

08007d3c <unpackRxData>:
void unpackRxData() {
 8007d3c:	b508      	push	{r3, lr}
	Rx_Data.L_Joystick_XPos = (RxData[0] & 0xFF) | (RxData[1] << 8);
 8007d3e:	4b4e      	ldr	r3, [pc, #312]	; (8007e78 <unpackRxData+0x13c>)
 8007d40:	7819      	ldrb	r1, [r3, #0]
 8007d42:	785a      	ldrb	r2, [r3, #1]
 8007d44:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8007d48:	4a4c      	ldr	r2, [pc, #304]	; (8007e7c <unpackRxData+0x140>)
 8007d4a:	8011      	strh	r1, [r2, #0]
	Rx_Data.L_Joystick_YPos = (RxData[2] & 0xFF) | (RxData[3] << 8);
 8007d4c:	7899      	ldrb	r1, [r3, #2]
 8007d4e:	78d8      	ldrb	r0, [r3, #3]
 8007d50:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007d54:	8051      	strh	r1, [r2, #2]
	Rx_Data.R_Joystick_XPos = (RxData[4] & 0xFF) | (RxData[5] << 8);
 8007d56:	7919      	ldrb	r1, [r3, #4]
 8007d58:	7958      	ldrb	r0, [r3, #5]
 8007d5a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007d5e:	8091      	strh	r1, [r2, #4]
	Rx_Data.R_Joystick_YPos = (RxData[6] & 0xFF) | (RxData[7] << 8);
 8007d60:	7999      	ldrb	r1, [r3, #6]
 8007d62:	79d8      	ldrb	r0, [r3, #7]
 8007d64:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007d68:	80d1      	strh	r1, [r2, #6]
	Rx_Data.airmode = (RxData[8] >> 0) & 1;
 8007d6a:	7a1b      	ldrb	r3, [r3, #8]
 8007d6c:	f003 0101 	and.w	r1, r3, #1
 8007d70:	7211      	strb	r1, [r2, #8]
	Rx_Data.kill_rx = (RxData[8] >> 1) & 1;
 8007d72:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8007d76:	7251      	strb	r1, [r2, #9]
	if (Rx_Data.kill_rx && RxData[8] <= 0x03) {
 8007d78:	b109      	cbz	r1, 8007d7e <unpackRxData+0x42>
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d978      	bls.n	8007e70 <unpackRxData+0x134>
	uint16_t roll_p_rx = (RxData[9] & 0xFF) | (RxData[10] << 8);
 8007d7e:	4b3e      	ldr	r3, [pc, #248]	; (8007e78 <unpackRxData+0x13c>)
 8007d80:	7a5a      	ldrb	r2, [r3, #9]
 8007d82:	7a99      	ldrb	r1, [r3, #10]
 8007d84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007d88:	ee06 2a90 	vmov	s13, r2
	uint16_t roll_i_rx = (RxData[11] & 0xFF) | (RxData[12] << 8);
 8007d8c:	7ada      	ldrb	r2, [r3, #11]
 8007d8e:	7b19      	ldrb	r1, [r3, #12]
 8007d90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007d94:	ee07 2a10 	vmov	s14, r2
	uint16_t roll_d_rx = (RxData[13] & 0xFF) | (RxData[14] << 8);
 8007d98:	7b5a      	ldrb	r2, [r3, #13]
 8007d9a:	7b99      	ldrb	r1, [r3, #14]
 8007d9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	roll_p_gain = (float) roll_p_rx / 1000;
 8007da0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007da4:	eddf 7a36 	vldr	s15, [pc, #216]	; 8007e80 <unpackRxData+0x144>
 8007da8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8007dac:	4935      	ldr	r1, [pc, #212]	; (8007e84 <unpackRxData+0x148>)
 8007dae:	ed81 6a00 	vstr	s12, [r1]
	roll_i_gain = (float) roll_i_rx / 1000;
 8007db2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007db6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007dba:	4933      	ldr	r1, [pc, #204]	; (8007e88 <unpackRxData+0x14c>)
 8007dbc:	edc1 6a00 	vstr	s13, [r1]
	roll_d_gain = (float) roll_d_rx / 1000;
 8007dc0:	ee07 2a10 	vmov	s14, r2
 8007dc4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007dc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007dcc:	4a2f      	ldr	r2, [pc, #188]	; (8007e8c <unpackRxData+0x150>)
 8007dce:	edc2 6a00 	vstr	s13, [r2]
	uint16_t pitch_p_rx = (RxData[15] & 0xFF) | (RxData[16] << 8);
 8007dd2:	7bda      	ldrb	r2, [r3, #15]
 8007dd4:	7c19      	ldrb	r1, [r3, #16]
 8007dd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007dda:	ee06 2a90 	vmov	s13, r2
	uint16_t pitch_i_rx = (RxData[17] & 0xFF) | (RxData[18] << 8);
 8007dde:	7c5a      	ldrb	r2, [r3, #17]
 8007de0:	7c99      	ldrb	r1, [r3, #18]
 8007de2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007de6:	ee07 2a10 	vmov	s14, r2
	uint16_t pitch_d_rx = (RxData[19] & 0xFF) | (RxData[20] << 8);
 8007dea:	7cda      	ldrb	r2, [r3, #19]
 8007dec:	7d19      	ldrb	r1, [r3, #20]
 8007dee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	pitch_p_gain = (float) pitch_p_rx / 1000;
 8007df2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007df6:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8007dfa:	4925      	ldr	r1, [pc, #148]	; (8007e90 <unpackRxData+0x154>)
 8007dfc:	ed81 6a00 	vstr	s12, [r1]
	pitch_i_gain = (float) pitch_i_rx / 1000;
 8007e00:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007e04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007e08:	4922      	ldr	r1, [pc, #136]	; (8007e94 <unpackRxData+0x158>)
 8007e0a:	edc1 6a00 	vstr	s13, [r1]
	pitch_d_gain = (float) pitch_d_rx / 1000;
 8007e0e:	ee07 2a10 	vmov	s14, r2
 8007e12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007e16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007e1a:	4a1f      	ldr	r2, [pc, #124]	; (8007e98 <unpackRxData+0x15c>)
 8007e1c:	edc2 6a00 	vstr	s13, [r2]
	uint16_t yaw_p_rx = (RxData[21] & 0xFF) | (RxData[22] << 8);
 8007e20:	7d5a      	ldrb	r2, [r3, #21]
 8007e22:	7d99      	ldrb	r1, [r3, #22]
 8007e24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007e28:	ee06 2a90 	vmov	s13, r2
	uint16_t yaw_i_rx = (RxData[23] & 0xFF) | (RxData[24] << 8);
 8007e2c:	7dda      	ldrb	r2, [r3, #23]
 8007e2e:	7e19      	ldrb	r1, [r3, #24]
 8007e30:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007e34:	ee07 2a10 	vmov	s14, r2
	uint16_t yaw_d_rx = (RxData[25] & 0xFF) | (RxData[26] << 8);
 8007e38:	7e5a      	ldrb	r2, [r3, #25]
 8007e3a:	7e9b      	ldrb	r3, [r3, #26]
 8007e3c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	yaw_p_gain = (float) yaw_p_rx / 1000;
 8007e40:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007e44:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8007e48:	4b14      	ldr	r3, [pc, #80]	; (8007e9c <unpackRxData+0x160>)
 8007e4a:	ed83 6a00 	vstr	s12, [r3]
	yaw_i_gain = (float) yaw_i_rx / 1000;
 8007e4e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007e52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007e56:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <unpackRxData+0x164>)
 8007e58:	edc3 6a00 	vstr	s13, [r3]
	yaw_d_gain = (float) yaw_d_rx / 1000;
 8007e5c:	ee07 2a10 	vmov	s14, r2
 8007e60:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007e64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007e68:	4b0e      	ldr	r3, [pc, #56]	; (8007ea4 <unpackRxData+0x168>)
 8007e6a:	edc3 6a00 	vstr	s13, [r3]
}
 8007e6e:	bd08      	pop	{r3, pc}
		kill();
 8007e70:	f7ff ff48 	bl	8007d04 <kill>
 8007e74:	e783      	b.n	8007d7e <unpackRxData+0x42>
 8007e76:	bf00      	nop
 8007e78:	20004bf0 	.word	0x20004bf0
 8007e7c:	20004be0 	.word	0x20004be0
 8007e80:	447a0000 	.word	0x447a0000
 8007e84:	20004c18 	.word	0x20004c18
 8007e88:	20004bdc 	.word	0x20004bdc
 8007e8c:	20004bec 	.word	0x20004bec
 8007e90:	20004c14 	.word	0x20004c14
 8007e94:	20004bd4 	.word	0x20004bd4
 8007e98:	20004c1c 	.word	0x20004c1c
 8007e9c:	20004bd8 	.word	0x20004bd8
 8007ea0:	20004bb0 	.word	0x20004bb0
 8007ea4:	20004b8c 	.word	0x20004b8c

08007ea8 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007ea8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007eac:	ee32 2a61 	vsub.f32	s4, s4, s3
 8007eb0:	ee20 2a02 	vmul.f32	s4, s0, s4
 8007eb4:	ee31 1a60 	vsub.f32	s2, s2, s1
 8007eb8:	ee82 0a01 	vdiv.f32	s0, s4, s2
}
 8007ebc:	ee30 0a21 	vadd.f32	s0, s0, s3
 8007ec0:	4770      	bx	lr
 8007ec2:	0000      	movs	r0, r0
 8007ec4:	0000      	movs	r0, r0
	...

08007ec8 <RF_TxRx>:
		float yaw) {
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	ed2d 8b04 	vpush	{d8-d9}
 8007ece:	460e      	mov	r6, r1
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	461d      	mov	r5, r3
 8007ed4:	eeb0 8a40 	vmov.f32	s16, s0
 8007ed8:	eef0 8a60 	vmov.f32	s17, s1
 8007edc:	eeb0 9a41 	vmov.f32	s18, s2
	if (NRF24_available()) {
 8007ee0:	f7fa fa86 	bl	80023f0 <NRF24_available>
 8007ee4:	b938      	cbnz	r0, 8007ef6 <RF_TxRx+0x2e>
		packetsLostCtr++;
 8007ee6:	4b7c      	ldr	r3, [pc, #496]	; (80080d8 <RF_TxRx+0x210>)
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	3001      	adds	r0, #1
 8007eec:	6018      	str	r0, [r3, #0]
		return packetsLostCtr;
 8007eee:	b280      	uxth	r0, r0
}
 8007ef0:	ecbd 8b04 	vpop	{d8-d9}
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
		NRF24_read(RxData, 32);
 8007ef6:	2120      	movs	r1, #32
 8007ef8:	4878      	ldr	r0, [pc, #480]	; (80080dc <RF_TxRx+0x214>)
 8007efa:	f7fa f9db 	bl	80022b4 <NRF24_read>
		packAckPayData_0(roll, pitch, yaw);
 8007efe:	eeb0 1a49 	vmov.f32	s2, s18
 8007f02:	eef0 0a68 	vmov.f32	s1, s17
 8007f06:	eeb0 0a48 	vmov.f32	s0, s16
 8007f0a:	f7ff feab 	bl	8007c64 <packAckPayData_0>
		packetsLostCtr = 0;
 8007f0e:	4b72      	ldr	r3, [pc, #456]	; (80080d8 <RF_TxRx+0x210>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]
		if (loop_counter == CRTL_LOOP_FREQ - 1) {
 8007f14:	4b72      	ldr	r3, [pc, #456]	; (80080e0 <RF_TxRx+0x218>)
 8007f16:	881a      	ldrh	r2, [r3, #0]
 8007f18:	f240 13f3 	movw	r3, #499	; 0x1f3
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	f000 80cd 	beq.w	80080bc <RF_TxRx+0x1f4>
			NRF24_writeAckPayload(1, AckPayload_0, 32);
 8007f22:	2220      	movs	r2, #32
 8007f24:	496f      	ldr	r1, [pc, #444]	; (80080e4 <RF_TxRx+0x21c>)
 8007f26:	2001      	movs	r0, #1
 8007f28:	f7fa fa67 	bl	80023fa <NRF24_writeAckPayload>
		unpackRxData();
 8007f2c:	f7ff ff06 	bl	8007d3c <unpackRxData>
		Rx_Data.R_Joystick_YPos = 4096 - Rx_Data.R_Joystick_YPos;
 8007f30:	4b6d      	ldr	r3, [pc, #436]	; (80080e8 <RF_TxRx+0x220>)
 8007f32:	88da      	ldrh	r2, [r3, #6]
 8007f34:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8007f38:	80da      	strh	r2, [r3, #6]
		Rx_Data.R_Joystick_XPos = 4096 - Rx_Data.R_Joystick_XPos;
 8007f3a:	889a      	ldrh	r2, [r3, #4]
 8007f3c:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8007f40:	809a      	strh	r2, [r3, #4]
		*throttle = map(Rx_Data.L_Joystick_YPos, 850, 3300, ESC_MIN, ESC_MAX);
 8007f42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007f46:	ee00 3a10 	vmov	s0, r3
 8007f4a:	ed9f 2a68 	vldr	s4, [pc, #416]	; 80080ec <RF_TxRx+0x224>
 8007f4e:	eddf 1a68 	vldr	s3, [pc, #416]	; 80080f0 <RF_TxRx+0x228>
 8007f52:	ed9f 1a68 	vldr	s2, [pc, #416]	; 80080f4 <RF_TxRx+0x22c>
 8007f56:	eddf 0a68 	vldr	s1, [pc, #416]	; 80080f8 <RF_TxRx+0x230>
 8007f5a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8007f5e:	f7ff ffa3 	bl	8007ea8 <map>
 8007f62:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8007f66:	ee10 3a10 	vmov	r3, s0
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	8033      	strh	r3, [r6, #0]
		if (*throttle < ESC_MIN + 200) {
 8007f6e:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d802      	bhi.n	8007f7c <RF_TxRx+0xb4>
			*throttle = ESC_MIN;
 8007f76:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8007f7a:	8033      	strh	r3, [r6, #0]
		if (*throttle > ESC_MAX - 200) {
 8007f7c:	8832      	ldrh	r2, [r6, #0]
 8007f7e:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d902      	bls.n	8007f8c <RF_TxRx+0xc4>
			*throttle = ESC_MAX;
 8007f86:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007f8a:	8033      	strh	r3, [r6, #0]
		*r_setpoint = map(Rx_Data.R_Joystick_XPos, 350, 3940, -MAX_ANGLE,
 8007f8c:	4b56      	ldr	r3, [pc, #344]	; (80080e8 <RF_TxRx+0x220>)
 8007f8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007f92:	ee00 3a10 	vmov	s0, r3
 8007f96:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8007f9a:	eefb 1a04 	vmov.f32	s3, #180	; 0xc1a00000 -20.0
 8007f9e:	ed9f 1a57 	vldr	s2, [pc, #348]	; 80080fc <RF_TxRx+0x234>
 8007fa2:	eddf 0a57 	vldr	s1, [pc, #348]	; 8008100 <RF_TxRx+0x238>
 8007fa6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8007faa:	f7ff ff7d 	bl	8007ea8 <map>
		*r_setpoint += 1;
 8007fae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007fb2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007fb6:	ed85 0a00 	vstr	s0, [r5]
		if (*r_setpoint > MAX_ANGLE)
 8007fba:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8007fbe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc6:	dd01      	ble.n	8007fcc <RF_TxRx+0x104>
			*r_setpoint = (float) MAX_ANGLE;
 8007fc8:	edc5 7a00 	vstr	s15, [r5]
		if (*r_setpoint < -MAX_ANGLE)
 8007fcc:	ed95 7a00 	vldr	s14, [r5]
 8007fd0:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 8007fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fdc:	d501      	bpl.n	8007fe2 <RF_TxRx+0x11a>
			*r_setpoint = (float) -MAX_ANGLE;
 8007fde:	edc5 7a00 	vstr	s15, [r5]
		*p_setpoint = map(Rx_Data.R_Joystick_YPos, 370, 3980, -MAX_ANGLE,
 8007fe2:	4b41      	ldr	r3, [pc, #260]	; (80080e8 <RF_TxRx+0x220>)
 8007fe4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007fe8:	ee00 3a10 	vmov	s0, r3
 8007fec:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8007ff0:	eefb 1a04 	vmov.f32	s3, #180	; 0xc1a00000 -20.0
 8007ff4:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8008104 <RF_TxRx+0x23c>
 8007ff8:	eddf 0a43 	vldr	s1, [pc, #268]	; 8008108 <RF_TxRx+0x240>
 8007ffc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8008000:	f7ff ff52 	bl	8007ea8 <map>
 8008004:	ed84 0a00 	vstr	s0, [r4]
		if (*p_setpoint > MAX_ANGLE)
 8008008:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800800c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008014:	dd01      	ble.n	800801a <RF_TxRx+0x152>
			*p_setpoint = (float) MAX_ANGLE;
 8008016:	edc4 7a00 	vstr	s15, [r4]
		if (*p_setpoint < -MAX_ANGLE)
 800801a:	ed94 7a00 	vldr	s14, [r4]
 800801e:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 8008022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800802a:	d501      	bpl.n	8008030 <RF_TxRx+0x168>
			*p_setpoint = (float) -MAX_ANGLE;
 800802c:	edc4 7a00 	vstr	s15, [r4]
		yaw_rx = map(Rx_Data.L_Joystick_XPos, 260, 3900, -YAW_TURN_RATE,
 8008030:	4b2d      	ldr	r3, [pc, #180]	; (80080e8 <RF_TxRx+0x220>)
 8008032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008036:	ee00 3a10 	vmov	s0, r3
 800803a:	ed9f 8a34 	vldr	s16, [pc, #208]	; 800810c <RF_TxRx+0x244>
 800803e:	eeb0 2a48 	vmov.f32	s4, s16
 8008042:	eddf 1a33 	vldr	s3, [pc, #204]	; 8008110 <RF_TxRx+0x248>
 8008046:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8008114 <RF_TxRx+0x24c>
 800804a:	eddf 0a33 	vldr	s1, [pc, #204]	; 8008118 <RF_TxRx+0x250>
 800804e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8008052:	f7ff ff29 	bl	8007ea8 <map>
 8008056:	4b31      	ldr	r3, [pc, #196]	; (800811c <RF_TxRx+0x254>)
 8008058:	ed83 0a00 	vstr	s0, [r3]
		if (yaw_rx > YAW_TURN_RATE) {
 800805c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8008060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008064:	dd01      	ble.n	800806a <RF_TxRx+0x1a2>
			yaw_rx = YAW_TURN_RATE;
 8008066:	ed83 8a00 	vstr	s16, [r3]
		if (yaw_rx < -YAW_TURN_RATE) {
 800806a:	4b2c      	ldr	r3, [pc, #176]	; (800811c <RF_TxRx+0x254>)
 800806c:	ed93 7a00 	vldr	s14, [r3]
 8008070:	eddf 7a27 	vldr	s15, [pc, #156]	; 8008110 <RF_TxRx+0x248>
 8008074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807c:	d501      	bpl.n	8008082 <RF_TxRx+0x1ba>
			yaw_rx = -YAW_TURN_RATE;
 800807e:	edc3 7a00 	vstr	s15, [r3]
		if (yaw_rx > -0.1 && yaw_rx < 0.1) {
 8008082:	4b26      	ldr	r3, [pc, #152]	; (800811c <RF_TxRx+0x254>)
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	f7f8 fa67 	bl	8000558 <__aeabi_f2d>
 800808a:	4604      	mov	r4, r0
 800808c:	460d      	mov	r5, r1
 800808e:	a30e      	add	r3, pc, #56	; (adr r3, 80080c8 <RF_TxRx+0x200>)
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f7f8 fd48 	bl	8000b28 <__aeabi_dcmpgt>
 8008098:	b150      	cbz	r0, 80080b0 <RF_TxRx+0x1e8>
 800809a:	a30d      	add	r3, pc, #52	; (adr r3, 80080d0 <RF_TxRx+0x208>)
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	4620      	mov	r0, r4
 80080a2:	4629      	mov	r1, r5
 80080a4:	f7f8 fd22 	bl	8000aec <__aeabi_dcmplt>
 80080a8:	b110      	cbz	r0, 80080b0 <RF_TxRx+0x1e8>
			yaw_rx = 0.0000000f;
 80080aa:	4b1c      	ldr	r3, [pc, #112]	; (800811c <RF_TxRx+0x254>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
		(*y_setpoint) = yaw_rx;
 80080b0:	4b1a      	ldr	r3, [pc, #104]	; (800811c <RF_TxRx+0x254>)
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	9b08      	ldr	r3, [sp, #32]
 80080b6:	601a      	str	r2, [r3, #0]
	return 0;
 80080b8:	2000      	movs	r0, #0
 80080ba:	e719      	b.n	8007ef0 <RF_TxRx+0x28>
			NRF24_writeAckPayload(1, AckPayload_1, 32);
 80080bc:	2220      	movs	r2, #32
 80080be:	4918      	ldr	r1, [pc, #96]	; (8008120 <RF_TxRx+0x258>)
 80080c0:	2001      	movs	r0, #1
 80080c2:	f7fa f99a 	bl	80023fa <NRF24_writeAckPayload>
 80080c6:	e731      	b.n	8007f2c <RF_TxRx+0x64>
 80080c8:	9999999a 	.word	0x9999999a
 80080cc:	bfb99999 	.word	0xbfb99999
 80080d0:	9999999a 	.word	0x9999999a
 80080d4:	3fb99999 	.word	0x3fb99999
 80080d8:	200040bc 	.word	0x200040bc
 80080dc:	20004bf0 	.word	0x20004bf0
 80080e0:	200040b8 	.word	0x200040b8
 80080e4:	20004bb4 	.word	0x20004bb4
 80080e8:	20004be0 	.word	0x20004be0
 80080ec:	451c4000 	.word	0x451c4000
 80080f0:	449c4000 	.word	0x449c4000
 80080f4:	454e4000 	.word	0x454e4000
 80080f8:	44548000 	.word	0x44548000
 80080fc:	45764000 	.word	0x45764000
 8008100:	43af0000 	.word	0x43af0000
 8008104:	4578c000 	.word	0x4578c000
 8008108:	43b90000 	.word	0x43b90000
 800810c:	43340000 	.word	0x43340000
 8008110:	c3340000 	.word	0xc3340000
 8008114:	4573c000 	.word	0x4573c000
 8008118:	43820000 	.word	0x43820000
 800811c:	200040c0 	.word	0x200040c0
 8008120:	20004b90 	.word	0x20004b90

08008124 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8008124:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 8008126:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 8008128:	4293      	cmp	r3, r2
 800812a:	d902      	bls.n	8008132 <_GetAvailWriteSpace+0xe>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  } else {
    r = RdOff - WrOff - 1u;
 800812c:	1a9b      	subs	r3, r3, r2
 800812e:	1e58      	subs	r0, r3, #1
  }
  return r;
}
 8008130:	4770      	bx	lr
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008132:	6880      	ldr	r0, [r0, #8]
 8008134:	1a80      	subs	r0, r0, r2
 8008136:	4403      	add	r3, r0
 8008138:	1e58      	subs	r0, r3, #1
 800813a:	4770      	bx	lr

0800813c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008140:	4605      	mov	r5, r0
 8008142:	4688      	mov	r8, r1
 8008144:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
 8008146:	68c7      	ldr	r7, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008148:	6884      	ldr	r4, [r0, #8]
 800814a:	1be4      	subs	r4, r4, r7
  if (Rem > NumBytes) {
 800814c:	4294      	cmp	r4, r2
 800814e:	d80e      	bhi.n	800816e <_WriteNoCheck+0x32>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8008150:	6840      	ldr	r0, [r0, #4]
 8008152:	4622      	mov	r2, r4
 8008154:	4438      	add	r0, r7
 8008156:	f003 f812 	bl	800b17e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800815a:	1b36      	subs	r6, r6, r4
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800815c:	4632      	mov	r2, r6
 800815e:	eb08 0104 	add.w	r1, r8, r4
 8008162:	6868      	ldr	r0, [r5, #4]
 8008164:	f003 f80b 	bl	800b17e <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8008168:	60ee      	str	r6, [r5, #12]
}
 800816a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 800816e:	6840      	ldr	r0, [r0, #4]
 8008170:	4438      	add	r0, r7
 8008172:	f003 f804 	bl	800b17e <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8008176:	443e      	add	r6, r7
 8008178:	60ee      	str	r6, [r5, #12]
 800817a:	e7f6      	b.n	800816a <_WriteNoCheck+0x2e>

0800817c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800817c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008180:	4606      	mov	r6, r0
 8008182:	4688      	mov	r8, r1
 8008184:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
 8008186:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
 8008188:	f04f 0900 	mov.w	r9, #0
 800818c:	e01a      	b.n	80081c4 <_WriteBlocking+0x48>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800818e:	68b2      	ldr	r2, [r6, #8]
 8008190:	1b64      	subs	r4, r4, r5
 8008192:	4414      	add	r4, r2
 8008194:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8008196:	68b3      	ldr	r3, [r6, #8]
 8008198:	1b5c      	subs	r4, r3, r5
 800819a:	4294      	cmp	r4, r2
 800819c:	bf28      	it	cs
 800819e:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80081a0:	42bc      	cmp	r4, r7
 80081a2:	bf28      	it	cs
 80081a4:	463c      	movcs	r4, r7
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 80081a6:	6870      	ldr	r0, [r6, #4]
 80081a8:	4622      	mov	r2, r4
 80081aa:	4641      	mov	r1, r8
 80081ac:	4428      	add	r0, r5
 80081ae:	f002 ffe6 	bl	800b17e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80081b2:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
 80081b4:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
 80081b6:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
 80081b8:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
 80081ba:	68b3      	ldr	r3, [r6, #8]
 80081bc:	42ab      	cmp	r3, r5
 80081be:	d007      	beq.n	80081d0 <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
 80081c0:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 80081c2:	b13f      	cbz	r7, 80081d4 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80081c4:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
 80081c6:	42a5      	cmp	r5, r4
 80081c8:	d2e1      	bcs.n	800818e <_WriteBlocking+0x12>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80081ca:	1b64      	subs	r4, r4, r5
 80081cc:	1e62      	subs	r2, r4, #1
 80081ce:	e7e2      	b.n	8008196 <_WriteBlocking+0x1a>
      WrOff = 0u;
 80081d0:	2500      	movs	r5, #0
 80081d2:	e7f5      	b.n	80081c0 <_WriteBlocking+0x44>
}
 80081d4:	4648      	mov	r0, r9
 80081d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080081dc <_DoInit>:
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80081dc:	4b10      	ldr	r3, [pc, #64]	; (8008220 <_DoInit+0x44>)
 80081de:	2203      	movs	r2, #3
 80081e0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80081e2:	615a      	str	r2, [r3, #20]
  p->aUp[0].sName         = "Terminal";
 80081e4:	490f      	ldr	r1, [pc, #60]	; (8008224 <_DoInit+0x48>)
 80081e6:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80081e8:	4a0f      	ldr	r2, [pc, #60]	; (8008228 <_DoInit+0x4c>)
 80081ea:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80081ec:	2240      	movs	r2, #64	; 0x40
 80081ee:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80081f0:	2200      	movs	r2, #0
 80081f2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80081f4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80081f6:	62da      	str	r2, [r3, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
 80081f8:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80081fa:	490c      	ldr	r1, [pc, #48]	; (800822c <_DoInit+0x50>)
 80081fc:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80081fe:	2110      	movs	r1, #16
 8008200:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008202:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008204:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008206:	675a      	str	r2, [r3, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 8008208:	4a09      	ldr	r2, [pc, #36]	; (8008230 <_DoInit+0x54>)
 800820a:	6810      	ldr	r0, [r2, #0]
 800820c:	f8c3 0007 	str.w	r0, [r3, #7]
  strcpy(&p->acID[0], "SEGGER");
 8008210:	4a08      	ldr	r2, [pc, #32]	; (8008234 <_DoInit+0x58>)
 8008212:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008216:	6018      	str	r0, [r3, #0]
 8008218:	8099      	strh	r1, [r3, #4]
  p->acID[6] = ' ';
 800821a:	2220      	movs	r2, #32
 800821c:	719a      	strb	r2, [r3, #6]
}
 800821e:	4770      	bx	lr
 8008220:	20004c20 	.word	0x20004c20
 8008224:	0800fad8 	.word	0x0800fad8
 8008228:	200040d4 	.word	0x200040d4
 800822c:	200040c4 	.word	0x200040c4
 8008230:	0800fae4 	.word	0x0800fae4
 8008234:	0800fae8 	.word	0x0800fae8

08008238 <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	460f      	mov	r7, r1
 800823c:	4616      	mov	r6, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800823e:	1c43      	adds	r3, r0, #1
 8008240:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008244:	00dd      	lsls	r5, r3, #3
 8008246:	4b17      	ldr	r3, [pc, #92]	; (80082a4 <SEGGER_RTT_WriteNoLock+0x6c>)
 8008248:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800824a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800824e:	00c2      	lsls	r2, r0, #3
 8008250:	4413      	add	r3, r2
 8008252:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008254:	2c01      	cmp	r4, #1
 8008256:	d010      	beq.n	800827a <SEGGER_RTT_WriteNoLock+0x42>
 8008258:	b11c      	cbz	r4, 8008262 <SEGGER_RTT_WriteNoLock+0x2a>
 800825a:	2c02      	cmp	r4, #2
 800825c:	d01b      	beq.n	8008296 <SEGGER_RTT_WriteNoLock+0x5e>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
 800825e:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
 8008260:	e017      	b.n	8008292 <SEGGER_RTT_WriteNoLock+0x5a>
    Avail = _GetAvailWriteSpace(pRing);
 8008262:	4628      	mov	r0, r5
 8008264:	f7ff ff5e 	bl	8008124 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 8008268:	4286      	cmp	r6, r0
 800826a:	d812      	bhi.n	8008292 <SEGGER_RTT_WriteNoLock+0x5a>
      _WriteNoCheck(pRing, pData, NumBytes);
 800826c:	4632      	mov	r2, r6
 800826e:	4639      	mov	r1, r7
 8008270:	4628      	mov	r0, r5
 8008272:	f7ff ff63 	bl	800813c <_WriteNoCheck>
      Status = NumBytes;
 8008276:	4634      	mov	r4, r6
 8008278:	e00b      	b.n	8008292 <SEGGER_RTT_WriteNoLock+0x5a>
    Avail = _GetAvailWriteSpace(pRing);
 800827a:	4628      	mov	r0, r5
 800827c:	f7ff ff52 	bl	8008124 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 8008280:	4634      	mov	r4, r6
 8008282:	4286      	cmp	r6, r0
 8008284:	bf28      	it	cs
 8008286:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 8008288:	4622      	mov	r2, r4
 800828a:	4639      	mov	r1, r7
 800828c:	4628      	mov	r0, r5
 800828e:	f7ff ff55 	bl	800813c <_WriteNoCheck>
}
 8008292:	4620      	mov	r0, r4
 8008294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8008296:	4632      	mov	r2, r6
 8008298:	4628      	mov	r0, r5
 800829a:	f7ff ff6f 	bl	800817c <_WriteBlocking>
 800829e:	4604      	mov	r4, r0
    break;
 80082a0:	e7f7      	b.n	8008292 <SEGGER_RTT_WriteNoLock+0x5a>
 80082a2:	bf00      	nop
 80082a4:	20004c20 	.word	0x20004c20

080082a8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	4605      	mov	r5, r0
 80082ac:	460e      	mov	r6, r1
 80082ae:	4617      	mov	r7, r2
  unsigned Status;
  //
  INIT();
 80082b0:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <SEGGER_RTT_Write+0x30>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	b16b      	cbz	r3, 80082d2 <SEGGER_RTT_Write+0x2a>
  SEGGER_RTT_LOCK();
 80082b6:	f3ef 8411 	mrs	r4, BASEPRI
 80082ba:	f04f 0120 	mov.w	r1, #32
 80082be:	f381 8811 	msr	BASEPRI, r1
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80082c2:	463a      	mov	r2, r7
 80082c4:	4631      	mov	r1, r6
 80082c6:	4628      	mov	r0, r5
 80082c8:	f7ff ffb6 	bl	8008238 <SEGGER_RTT_WriteNoLock>
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 80082cc:	f384 8811 	msr	BASEPRI, r4
  //
  return Status;
}
 80082d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 80082d2:	f7ff ff83 	bl	80081dc <_DoInit>
 80082d6:	e7ee      	b.n	80082b6 <SEGGER_RTT_Write+0xe>
 80082d8:	20004c20 	.word	0x20004c20

080082dc <CL_init>:





void CL_init() {
 80082dc:	b510      	push	{r4, lr}
#if IMU

	//Start timer 11, used for integral calculations
	HAL_TIM_Base_Start(&htim11);
 80082de:	480e      	ldr	r0, [pc, #56]	; (8008318 <CL_init+0x3c>)
 80082e0:	f7fc fe3a 	bl	8004f58 <HAL_TIM_Base_Start>

	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 80082e4:	480d      	ldr	r0, [pc, #52]	; (800831c <CL_init+0x40>)
 80082e6:	f7f8 fe87 	bl	8000ff8 <imu_init>
 80082ea:	b188      	cbz	r0, 8008310 <CL_init+0x34>
	/////////////////////////////////////////////////////////////////
	////////////////////////// Init timers for PWM //////////////////
	/////////////////////////////////////////////////////////////////

	//Start up PWMs
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80082ec:	4c0c      	ldr	r4, [pc, #48]	; (8008320 <CL_init+0x44>)
 80082ee:	2100      	movs	r1, #0
 80082f0:	4620      	mov	r0, r4
 80082f2:	f7fd f847 	bl	8005384 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80082f6:	2104      	movs	r1, #4
 80082f8:	4620      	mov	r0, r4
 80082fa:	f7fd f843 	bl	8005384 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80082fe:	2108      	movs	r1, #8
 8008300:	4620      	mov	r0, r4
 8008302:	f7fd f83f 	bl	8005384 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8008306:	210c      	movs	r1, #12
 8008308:	4620      	mov	r0, r4
 800830a:	f7fd f83b 	bl	8005384 <HAL_TIM_PWM_Start>
//	PWM1_Set(2500);
//	PWM2_Set(2500);
//	PWM3_Set(2500);
//	PWM4_Set(2500);

}
 800830e:	bd10      	pop	{r4, pc}
		imu_calibrate();
 8008310:	f7f9 fac2 	bl	8001898 <imu_calibrate>
 8008314:	e7ea      	b.n	80082ec <CL_init+0x10>
 8008316:	bf00      	nop
 8008318:	20005270 	.word	0x20005270
 800831c:	20004a9c 	.word	0x20004a9c
 8008320:	200051f0 	.word	0x200051f0

08008324 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8008324:	4b01      	ldr	r3, [pc, #4]	; (800832c <PWM1_Set+0x8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6358      	str	r0, [r3, #52]	; 0x34
}
 800832a:	4770      	bx	lr
 800832c:	200051f0 	.word	0x200051f0

08008330 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8008330:	4b01      	ldr	r3, [pc, #4]	; (8008338 <PWM2_Set+0x8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6398      	str	r0, [r3, #56]	; 0x38

}
 8008336:	4770      	bx	lr
 8008338:	200051f0 	.word	0x200051f0

0800833c <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 800833c:	4b01      	ldr	r3, [pc, #4]	; (8008344 <PWM3_Set+0x8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8008342:	4770      	bx	lr
 8008344:	200051f0 	.word	0x200051f0

08008348 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8008348:	4b01      	ldr	r3, [pc, #4]	; (8008350 <PWM4_Set+0x8>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6418      	str	r0, [r3, #64]	; 0x40
}
 800834e:	4770      	bx	lr
 8008350:	200051f0 	.word	0x200051f0

08008354 <CL_main>:
void CL_main(bool airmode, uint16_t throttle, float pitch_setpoint, float roll_setpoint, float yaw_setpoint, float *roll, float *pitch, float *yaw ) {
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	ed2d 8b04 	vpush	{d8-d9}
 800835a:	4605      	mov	r5, r0
 800835c:	460c      	mov	r4, r1
 800835e:	eeb0 9a40 	vmov.f32	s18, s0
 8008362:	eef0 8a60 	vmov.f32	s17, s1
 8008366:	eeb0 8a41 	vmov.f32	s16, s2
 800836a:	4619      	mov	r1, r3
	calc_RollPitchYaw(&imu_roll, pitch, NULL, yaw);
 800836c:	9b08      	ldr	r3, [sp, #32]
 800836e:	2200      	movs	r2, #0
 8008370:	485e      	ldr	r0, [pc, #376]	; (80084ec <CL_main+0x198>)
 8008372:	f7f9 fc35 	bl	8001be0 <calc_RollPitchYaw>
	if (airmode && throttle > 1250) {
 8008376:	b125      	cbz	r5, 8008382 <CL_main+0x2e>
 8008378:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800837c:	429c      	cmp	r4, r3
 800837e:	f200 8093 	bhi.w	80084a8 <CL_main+0x154>
		pid_output_roll = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	4a5a      	ldr	r2, [pc, #360]	; (80084f0 <CL_main+0x19c>)
 8008386:	6013      	str	r3, [r2, #0]
		pid_output_pitch = 0;
 8008388:	4a5a      	ldr	r2, [pc, #360]	; (80084f4 <CL_main+0x1a0>)
 800838a:	6013      	str	r3, [r2, #0]
		pid_output_yaw = 0;
 800838c:	4a5a      	ldr	r2, [pc, #360]	; (80084f8 <CL_main+0x1a4>)
 800838e:	6013      	str	r3, [r2, #0]
		reset_pid_roll();
 8008390:	f7fa fcd6 	bl	8002d40 <reset_pid_roll>
		reset_pid_pitch();
 8008394:	f7fa fd52 	bl	8002e3c <reset_pid_pitch>
		reset_pid_yaw();
 8008398:	f7fa fdce 	bl	8002f38 <reset_pid_yaw>
	esc1_total = throttle + (int) pid_output_roll + (int) pid_output_pitch + (int) pid_output_yaw;
 800839c:	4b54      	ldr	r3, [pc, #336]	; (80084f0 <CL_main+0x19c>)
 800839e:	edd3 7a00 	vldr	s15, [r3]
 80083a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083a6:	ee17 1a90 	vmov	r1, s15
 80083aa:	1863      	adds	r3, r4, r1
 80083ac:	4a51      	ldr	r2, [pc, #324]	; (80084f4 <CL_main+0x1a0>)
 80083ae:	edd2 7a00 	vldr	s15, [r2]
 80083b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083b6:	ee17 0a90 	vmov	r0, s15
 80083ba:	181d      	adds	r5, r3, r0
 80083bc:	4a4e      	ldr	r2, [pc, #312]	; (80084f8 <CL_main+0x1a4>)
 80083be:	edd2 7a00 	vldr	s15, [r2]
 80083c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083c6:	ee17 2a90 	vmov	r2, s15
 80083ca:	4415      	add	r5, r2
 80083cc:	4e4b      	ldr	r6, [pc, #300]	; (80084fc <CL_main+0x1a8>)
 80083ce:	6035      	str	r5, [r6, #0]
	esc2_total = throttle + (int) pid_output_roll - (int) pid_output_pitch - (int) pid_output_yaw;
 80083d0:	1a1b      	subs	r3, r3, r0
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	4e4a      	ldr	r6, [pc, #296]	; (8008500 <CL_main+0x1ac>)
 80083d6:	6033      	str	r3, [r6, #0]
	esc3_total = throttle - (int) pid_output_roll + (int) pid_output_pitch - (int) pid_output_yaw;
 80083d8:	1a61      	subs	r1, r4, r1
 80083da:	1844      	adds	r4, r0, r1
 80083dc:	1aa4      	subs	r4, r4, r2
 80083de:	4e49      	ldr	r6, [pc, #292]	; (8008504 <CL_main+0x1b0>)
 80083e0:	6034      	str	r4, [r6, #0]
	esc4_total = throttle - (int) pid_output_roll - (int) pid_output_pitch + (int) pid_output_yaw;
 80083e2:	1a09      	subs	r1, r1, r0
 80083e4:	4411      	add	r1, r2
 80083e6:	4a48      	ldr	r2, [pc, #288]	; (8008508 <CL_main+0x1b4>)
 80083e8:	6011      	str	r1, [r2, #0]
	if (esc1_total < ESC_MIN) {
 80083ea:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80083ee:	4295      	cmp	r5, r2
 80083f0:	dc03      	bgt.n	80083fa <CL_main+0xa6>
		esc1_total = ESC_MIN;
 80083f2:	4a42      	ldr	r2, [pc, #264]	; (80084fc <CL_main+0x1a8>)
 80083f4:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80083f8:	6010      	str	r0, [r2, #0]
	if (esc1_total > ESC_MAX) {
 80083fa:	4a40      	ldr	r2, [pc, #256]	; (80084fc <CL_main+0x1a8>)
 80083fc:	6810      	ldr	r0, [r2, #0]
 80083fe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008402:	4290      	cmp	r0, r2
 8008404:	dd03      	ble.n	800840e <CL_main+0xba>
		esc1_total = ESC_MAX;
 8008406:	4a3d      	ldr	r2, [pc, #244]	; (80084fc <CL_main+0x1a8>)
 8008408:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800840c:	6010      	str	r0, [r2, #0]
	if (esc2_total < ESC_MIN) {
 800840e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8008412:	4293      	cmp	r3, r2
 8008414:	dc03      	bgt.n	800841e <CL_main+0xca>
		esc2_total = ESC_MIN;
 8008416:	4b3a      	ldr	r3, [pc, #232]	; (8008500 <CL_main+0x1ac>)
 8008418:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800841c:	601a      	str	r2, [r3, #0]
	if (esc2_total > ESC_MAX) {
 800841e:	4b38      	ldr	r3, [pc, #224]	; (8008500 <CL_main+0x1ac>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8008426:	429a      	cmp	r2, r3
 8008428:	dd03      	ble.n	8008432 <CL_main+0xde>
		esc2_total = ESC_MAX;
 800842a:	4b35      	ldr	r3, [pc, #212]	; (8008500 <CL_main+0x1ac>)
 800842c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008430:	601a      	str	r2, [r3, #0]
	if (esc3_total < ESC_MIN) {
 8008432:	f240 43e1 	movw	r3, #1249	; 0x4e1
 8008436:	429c      	cmp	r4, r3
 8008438:	dc03      	bgt.n	8008442 <CL_main+0xee>
		esc3_total = ESC_MIN;
 800843a:	4b32      	ldr	r3, [pc, #200]	; (8008504 <CL_main+0x1b0>)
 800843c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008440:	601a      	str	r2, [r3, #0]
	if (esc3_total > ESC_MAX) {
 8008442:	4b30      	ldr	r3, [pc, #192]	; (8008504 <CL_main+0x1b0>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800844a:	429a      	cmp	r2, r3
 800844c:	dd03      	ble.n	8008456 <CL_main+0x102>
		esc3_total = ESC_MAX;
 800844e:	4b2d      	ldr	r3, [pc, #180]	; (8008504 <CL_main+0x1b0>)
 8008450:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008454:	601a      	str	r2, [r3, #0]
	if (esc4_total < ESC_MIN) {
 8008456:	f240 43e1 	movw	r3, #1249	; 0x4e1
 800845a:	4299      	cmp	r1, r3
 800845c:	dc03      	bgt.n	8008466 <CL_main+0x112>
		esc4_total = ESC_MIN;
 800845e:	4b2a      	ldr	r3, [pc, #168]	; (8008508 <CL_main+0x1b4>)
 8008460:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008464:	601a      	str	r2, [r3, #0]
	if (esc4_total > ESC_MAX) {
 8008466:	4b28      	ldr	r3, [pc, #160]	; (8008508 <CL_main+0x1b4>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800846e:	429a      	cmp	r2, r3
 8008470:	dd03      	ble.n	800847a <CL_main+0x126>
		esc4_total = ESC_MAX;
 8008472:	4b25      	ldr	r3, [pc, #148]	; (8008508 <CL_main+0x1b4>)
 8008474:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008478:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 800847a:	4b20      	ldr	r3, [pc, #128]	; (80084fc <CL_main+0x1a8>)
 800847c:	8818      	ldrh	r0, [r3, #0]
 800847e:	f7ff ff51 	bl	8008324 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8008482:	4b1f      	ldr	r3, [pc, #124]	; (8008500 <CL_main+0x1ac>)
 8008484:	8818      	ldrh	r0, [r3, #0]
 8008486:	f7ff ff53 	bl	8008330 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 800848a:	4b1e      	ldr	r3, [pc, #120]	; (8008504 <CL_main+0x1b0>)
 800848c:	8818      	ldrh	r0, [r3, #0]
 800848e:	f7ff ff55 	bl	800833c <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8008492:	4b1d      	ldr	r3, [pc, #116]	; (8008508 <CL_main+0x1b4>)
 8008494:	8818      	ldrh	r0, [r3, #0]
 8008496:	f7ff ff57 	bl	8008348 <PWM4_Set>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800849a:	2120      	movs	r1, #32
 800849c:	481b      	ldr	r0, [pc, #108]	; (800850c <CL_main+0x1b8>)
 800849e:	f7fb f841 	bl	8003524 <HAL_GPIO_TogglePin>
}
 80084a2:	ecbd 8b04 	vpop	{d8-d9}
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
		pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, pitch_setpoint);
 80084a8:	eef0 0a49 	vmov.f32	s1, s18
 80084ac:	2000      	movs	r0, #0
 80084ae:	4b18      	ldr	r3, [pc, #96]	; (8008510 <CL_main+0x1bc>)
 80084b0:	ed93 0a00 	vldr	s0, [r3]
 80084b4:	f7fa fc56 	bl	8002d64 <pid_calculate_pitch>
 80084b8:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <CL_main+0x1a0>)
 80084ba:	ed83 0a00 	vstr	s0, [r3]
		pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 80084be:	eef0 0a68 	vmov.f32	s1, s17
 80084c2:	2000      	movs	r0, #0
 80084c4:	4b09      	ldr	r3, [pc, #36]	; (80084ec <CL_main+0x198>)
 80084c6:	ed93 0a00 	vldr	s0, [r3]
 80084ca:	f7fa fbcd 	bl	8002c68 <pid_calculate_roll>
 80084ce:	4b08      	ldr	r3, [pc, #32]	; (80084f0 <CL_main+0x19c>)
 80084d0:	ed83 0a00 	vstr	s0, [r3]
		pid_output_yaw = pid_calculate_yaw(imu_yaw_rate, 0, yaw_setpoint);
 80084d4:	eef0 0a48 	vmov.f32	s1, s16
 80084d8:	2000      	movs	r0, #0
 80084da:	4b0e      	ldr	r3, [pc, #56]	; (8008514 <CL_main+0x1c0>)
 80084dc:	ed93 0a00 	vldr	s0, [r3]
 80084e0:	f7fa fcbe 	bl	8002e60 <pid_calculate_yaw>
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <CL_main+0x1a4>)
 80084e6:	ed83 0a00 	vstr	s0, [r3]
 80084ea:	e757      	b.n	800839c <CL_main+0x48>
 80084ec:	20004128 	.word	0x20004128
 80084f0:	20004134 	.word	0x20004134
 80084f4:	20004130 	.word	0x20004130
 80084f8:	20004138 	.word	0x20004138
 80084fc:	20004114 	.word	0x20004114
 8008500:	20004118 	.word	0x20004118
 8008504:	2000411c 	.word	0x2000411c
 8008508:	20004120 	.word	0x20004120
 800850c:	40020800 	.word	0x40020800
 8008510:	20004124 	.word	0x20004124
 8008514:	2000412c 	.word	0x2000412c

08008518 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8008518:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 800851a:	4805      	ldr	r0, [pc, #20]	; (8008530 <MX_CRC_Init+0x18>)
 800851c:	4b05      	ldr	r3, [pc, #20]	; (8008534 <MX_CRC_Init+0x1c>)
 800851e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008520:	f7fa fdd8 	bl	80030d4 <HAL_CRC_Init>
 8008524:	b900      	cbnz	r0, 8008528 <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 8008526:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008528:	f000 faa0 	bl	8008a6c <Error_Handler>
}
 800852c:	e7fb      	b.n	8008526 <MX_CRC_Init+0xe>
 800852e:	bf00      	nop
 8008530:	20004cc8 	.word	0x20004cc8
 8008534:	40023000 	.word	0x40023000

08008538 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8008538:	6802      	ldr	r2, [r0, #0]
 800853a:	4b09      	ldr	r3, [pc, #36]	; (8008560 <HAL_CRC_MspInit+0x28>)
 800853c:	429a      	cmp	r2, r3
 800853e:	d000      	beq.n	8008542 <HAL_CRC_MspInit+0xa>
 8008540:	4770      	bx	lr
{
 8008542:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008544:	2300      	movs	r3, #0
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	4b06      	ldr	r3, [pc, #24]	; (8008564 <HAL_CRC_MspInit+0x2c>)
 800854a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800854c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008550:	631a      	str	r2, [r3, #48]	; 0x30
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800855c:	b002      	add	sp, #8
 800855e:	4770      	bx	lr
 8008560:	40023000 	.word	0x40023000
 8008564:	40023800 	.word	0x40023800

08008568 <StartControlLoop>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 8008568:	b500      	push	{lr}
 800856a:	b083      	sub	sp, #12
  /* USER CODE BEGIN StartControlLoop */

	CL_init();
 800856c:	f7ff feb6 	bl	80082dc <CL_init>
	//HAL_TIM_Base_Start(&htim10);
	xSemaphoreGiveFromISR(PWM_Sem, NULL);
 8008570:	2100      	movs	r1, #0
 8008572:	4b18      	ldr	r3, [pc, #96]	; (80085d4 <StartControlLoop+0x6c>)
 8008574:	6818      	ldr	r0, [r3, #0]
 8008576:	f7fd ffcd 	bl	8006514 <xQueueGiveFromISR>
 800857a:	e002      	b.n	8008582 <StartControlLoop+0x1a>
					&TxRx.pitch, &TxRx.yaw);
			xSemaphoreGive(RFDataMutexHandle);
		}

		//2ms = 500Hz rate
		osDelay(2);
 800857c:	2002      	movs	r0, #2
 800857e:	f7fd fb58 	bl	8005c32 <osDelay>
		main_loop = 1;
 8008582:	4b15      	ldr	r3, [pc, #84]	; (80085d8 <StartControlLoop+0x70>)
 8008584:	2201      	movs	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(PWM_Sem, portMAX_DELAY)) {
 8008588:	f04f 31ff 	mov.w	r1, #4294967295
 800858c:	4b11      	ldr	r3, [pc, #68]	; (80085d4 <StartControlLoop+0x6c>)
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	f7fd ffc6 	bl	8006520 <xQueueSemaphoreTake>
 8008594:	2800      	cmp	r0, #0
 8008596:	d0f1      	beq.n	800857c <StartControlLoop+0x14>
			xSemaphoreTake(RFDataMutexHandle, portMAX_DELAY);
 8008598:	4c10      	ldr	r4, [pc, #64]	; (80085dc <StartControlLoop+0x74>)
 800859a:	f04f 31ff 	mov.w	r1, #4294967295
 800859e:	6820      	ldr	r0, [r4, #0]
 80085a0:	f7fd ffbe 	bl	8006520 <xQueueSemaphoreTake>
			CL_main(TxRx.airmode, TxRx.throttle, TxRx.pitch_setpoint,
 80085a4:	4a0e      	ldr	r2, [pc, #56]	; (80085e0 <StartControlLoop+0x78>)
 80085a6:	ed12 1a02 	vldr	s2, [r2, #-8]
 80085aa:	ed52 0a03 	vldr	s1, [r2, #-12]
 80085ae:	ed12 0a04 	vldr	s0, [r2, #-16]
 80085b2:	f832 1c12 	ldrh.w	r1, [r2, #-18]
 80085b6:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 80085ba:	1d13      	adds	r3, r2, #4
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	4613      	mov	r3, r2
 80085c0:	3a04      	subs	r2, #4
 80085c2:	f7ff fec7 	bl	8008354 <CL_main>
			xSemaphoreGive(RFDataMutexHandle);
 80085c6:	2300      	movs	r3, #0
 80085c8:	461a      	mov	r2, r3
 80085ca:	4619      	mov	r1, r3
 80085cc:	6820      	ldr	r0, [r4, #0]
 80085ce:	f7fd fd55 	bl	800607c <xQueueGenericSend>
 80085d2:	e7d3      	b.n	800857c <StartControlLoop+0x14>
 80085d4:	2000514c 	.word	0x2000514c
 80085d8:	2000413c 	.word	0x2000413c
 80085dc:	20005154 	.word	0x20005154
 80085e0:	20005144 	.word	0x20005144

080085e4 <StartGPSUpdate>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSUpdate */
void StartGPSUpdate(void const * argument)
{
 80085e4:	b508      	push	{r3, lr}

#endif

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80085e6:	2001      	movs	r0, #1
 80085e8:	f7fd fb23 	bl	8005c32 <osDelay>
 80085ec:	e7fb      	b.n	80085e6 <StartGPSUpdate+0x2>
	...

080085f0 <StartNRF24>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartNRF24 */
void StartNRF24(void const * argument)
{
 80085f0:	b500      	push	{lr}
 80085f2:	b083      	sub	sp, #12
  /* USER CODE BEGIN StartNRF24 */

	RF_init();
 80085f4:	f7ff fae4 	bl	8007bc0 <RF_init>
	/* Infinite loop */
	for (;;) {

		xSemaphoreTake(RFDataMutexHandle, portMAX_DELAY);
 80085f8:	4c0e      	ldr	r4, [pc, #56]	; (8008634 <StartNRF24+0x44>)
 80085fa:	f04f 31ff 	mov.w	r1, #4294967295
 80085fe:	6820      	ldr	r0, [r4, #0]
 8008600:	f7fd ff8e 	bl	8006520 <xQueueSemaphoreTake>
		RF_TxRx(&TxRx.airmode, &TxRx.throttle, &TxRx.pitch_setpoint,
 8008604:	480c      	ldr	r0, [pc, #48]	; (8008638 <StartNRF24+0x48>)
 8008606:	f100 030c 	add.w	r3, r0, #12
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	ed90 1a06 	vldr	s2, [r0, #24]
 8008610:	edd0 0a05 	vldr	s1, [r0, #20]
 8008614:	ed90 0a04 	vldr	s0, [r0, #16]
 8008618:	f100 0308 	add.w	r3, r0, #8
 800861c:	1d02      	adds	r2, r0, #4
 800861e:	1c81      	adds	r1, r0, #2
 8008620:	f7ff fc52 	bl	8007ec8 <RF_TxRx>
				&TxRx.roll_setpoint, &TxRx.yaw_setpoint, TxRx.roll, TxRx.pitch,
				TxRx.yaw);
	    xSemaphoreGive(RFDataMutexHandle);
 8008624:	2300      	movs	r3, #0
 8008626:	461a      	mov	r2, r3
 8008628:	4619      	mov	r1, r3
 800862a:	6820      	ldr	r0, [r4, #0]
 800862c:	f7fd fd26 	bl	800607c <xQueueGenericSend>
 8008630:	e7e2      	b.n	80085f8 <StartNRF24+0x8>
 8008632:	bf00      	nop
 8008634:	20005154 	.word	0x20005154
 8008638:	20005130 	.word	0x20005130

0800863c <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800863c:	4b03      	ldr	r3, [pc, #12]	; (800864c <vApplicationGetIdleTaskMemory+0x10>)
 800863e:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008640:	4b03      	ldr	r3, [pc, #12]	; (8008650 <vApplicationGetIdleTaskMemory+0x14>)
 8008642:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008644:	2380      	movs	r3, #128	; 0x80
 8008646:	6013      	str	r3, [r2, #0]
}
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	20004340 	.word	0x20004340
 8008650:	20004140 	.word	0x20004140

08008654 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	b09a      	sub	sp, #104	; 0x68
  osMutexDef(GPSDataMutex);
 8008658:	2400      	movs	r4, #0
 800865a:	9418      	str	r4, [sp, #96]	; 0x60
 800865c:	9419      	str	r4, [sp, #100]	; 0x64
  GPSDataMutexHandle = osMutexCreate(osMutex(GPSDataMutex));
 800865e:	a818      	add	r0, sp, #96	; 0x60
 8008660:	f7fd faf0 	bl	8005c44 <osMutexCreate>
 8008664:	4b21      	ldr	r3, [pc, #132]	; (80086ec <MX_FREERTOS_Init+0x98>)
 8008666:	6018      	str	r0, [r3, #0]
  osMutexDef(RFDataMutex);
 8008668:	9416      	str	r4, [sp, #88]	; 0x58
 800866a:	9417      	str	r4, [sp, #92]	; 0x5c
  RFDataMutexHandle = osMutexCreate(osMutex(RFDataMutex));
 800866c:	a816      	add	r0, sp, #88	; 0x58
 800866e:	f7fd fae9 	bl	8005c44 <osMutexCreate>
 8008672:	4b1f      	ldr	r3, [pc, #124]	; (80086f0 <MX_FREERTOS_Init+0x9c>)
 8008674:	6018      	str	r0, [r3, #0]
	vSemaphoreCreateBinary(PWM_Sem);
 8008676:	2203      	movs	r2, #3
 8008678:	4621      	mov	r1, r4
 800867a:	2001      	movs	r0, #1
 800867c:	f7fd fca8 	bl	8005fd0 <xQueueGenericCreate>
 8008680:	4b1c      	ldr	r3, [pc, #112]	; (80086f4 <MX_FREERTOS_Init+0xa0>)
 8008682:	6018      	str	r0, [r3, #0]
 8008684:	b120      	cbz	r0, 8008690 <MX_FREERTOS_Init+0x3c>
 8008686:	4623      	mov	r3, r4
 8008688:	4622      	mov	r2, r4
 800868a:	4621      	mov	r1, r4
 800868c:	f7fd fcf6 	bl	800607c <xQueueGenericSend>
  osThreadDef(ControlLoop, StartControlLoop, osPriorityRealtime, 0, 1024);
 8008690:	4c19      	ldr	r4, [pc, #100]	; (80086f8 <MX_FREERTOS_Init+0xa4>)
 8008692:	ad0f      	add	r5, sp, #60	; 0x3c
 8008694:	4626      	mov	r6, r4
 8008696:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800869a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800869e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ControlLoopHandle = osThreadCreate(osThread(ControlLoop), NULL);
 80086a2:	2100      	movs	r1, #0
 80086a4:	a80f      	add	r0, sp, #60	; 0x3c
 80086a6:	f7fd fa8e 	bl	8005bc6 <osThreadCreate>
 80086aa:	4b14      	ldr	r3, [pc, #80]	; (80086fc <MX_FREERTOS_Init+0xa8>)
 80086ac:	6018      	str	r0, [r3, #0]
  osThreadDef(GPSUpdate, StartGPSUpdate, osPriorityNormal, 0, 128);
 80086ae:	ad08      	add	r5, sp, #32
 80086b0:	f104 061c 	add.w	r6, r4, #28
 80086b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80086b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086b8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80086bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSUpdateHandle = osThreadCreate(osThread(GPSUpdate), NULL);
 80086c0:	2100      	movs	r1, #0
 80086c2:	a808      	add	r0, sp, #32
 80086c4:	f7fd fa7f 	bl	8005bc6 <osThreadCreate>
 80086c8:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <MX_FREERTOS_Init+0xac>)
 80086ca:	6018      	str	r0, [r3, #0]
  osThreadDef(NRF24, StartNRF24, osPriorityRealtime, 0, 1024);
 80086cc:	ad01      	add	r5, sp, #4
 80086ce:	3438      	adds	r4, #56	; 0x38
 80086d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80086d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  NRF24Handle = osThreadCreate(osThread(NRF24), NULL);
 80086dc:	2100      	movs	r1, #0
 80086de:	a801      	add	r0, sp, #4
 80086e0:	f7fd fa71 	bl	8005bc6 <osThreadCreate>
 80086e4:	4b07      	ldr	r3, [pc, #28]	; (8008704 <MX_FREERTOS_Init+0xb0>)
 80086e6:	6018      	str	r0, [r3, #0]
}
 80086e8:	b01a      	add	sp, #104	; 0x68
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	20005150 	.word	0x20005150
 80086f0:	20005154 	.word	0x20005154
 80086f4:	2000514c 	.word	0x2000514c
 80086f8:	0800f5f8 	.word	0x0800f5f8
 80086fc:	20004cd4 	.word	0x20004cd4
 8008700:	20004cd8 	.word	0x20004cd8
 8008704:	20004cd0 	.word	0x20004cd0

08008708 <HAL_GPIO_EXTI_Callback>:

//////GPIO interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	//GPIO pin configured to capture rising edge interrupt of PWM signals
	if (GPIO_Pin == PWM_INT_Pin && main_loop) {
 8008708:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800870c:	d000      	beq.n	8008710 <HAL_GPIO_EXTI_Callback+0x8>
 800870e:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8008710:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_INT_Pin && main_loop) {
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <HAL_GPIO_EXTI_Callback+0x20>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	b903      	cbnz	r3, 800871a <HAL_GPIO_EXTI_Callback+0x12>

	//	if (GPIO_Pin == kill_Pin && main_loop) {
	//		//kill();
	//	}

}
 8008718:	bd08      	pop	{r3, pc}
		xSemaphoreGiveFromISR(PWM_Sem, NULL);
 800871a:	2100      	movs	r1, #0
 800871c:	4b03      	ldr	r3, [pc, #12]	; (800872c <HAL_GPIO_EXTI_Callback+0x24>)
 800871e:	6818      	ldr	r0, [r3, #0]
 8008720:	f7fd fef8 	bl	8006514 <xQueueGiveFromISR>
}
 8008724:	e7f8      	b.n	8008718 <HAL_GPIO_EXTI_Callback+0x10>
 8008726:	bf00      	nop
 8008728:	2000413c 	.word	0x2000413c
 800872c:	2000514c 	.word	0x2000514c

08008730 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8008730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008734:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008736:	2400      	movs	r4, #0
 8008738:	9405      	str	r4, [sp, #20]
 800873a:	9406      	str	r4, [sp, #24]
 800873c:	9407      	str	r4, [sp, #28]
 800873e:	9408      	str	r4, [sp, #32]
 8008740:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008742:	9400      	str	r4, [sp, #0]
 8008744:	4b55      	ldr	r3, [pc, #340]	; (800889c <MX_GPIO_Init+0x16c>)
 8008746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008748:	f042 0204 	orr.w	r2, r2, #4
 800874c:	631a      	str	r2, [r3, #48]	; 0x30
 800874e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008750:	f002 0204 	and.w	r2, r2, #4
 8008754:	9200      	str	r2, [sp, #0]
 8008756:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008758:	9401      	str	r4, [sp, #4]
 800875a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800875c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008760:	631a      	str	r2, [r3, #48]	; 0x30
 8008762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008764:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008768:	9201      	str	r2, [sp, #4]
 800876a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800876c:	9402      	str	r4, [sp, #8]
 800876e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008770:	f042 0201 	orr.w	r2, r2, #1
 8008774:	631a      	str	r2, [r3, #48]	; 0x30
 8008776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008778:	f002 0201 	and.w	r2, r2, #1
 800877c:	9202      	str	r2, [sp, #8]
 800877e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008780:	9403      	str	r4, [sp, #12]
 8008782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008784:	f042 0202 	orr.w	r2, r2, #2
 8008788:	631a      	str	r2, [r3, #48]	; 0x30
 800878a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800878c:	f002 0202 	and.w	r2, r2, #2
 8008790:	9203      	str	r2, [sp, #12]
 8008792:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008794:	9404      	str	r4, [sp, #16]
 8008796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008798:	f042 0208 	orr.w	r2, r2, #8
 800879c:	631a      	str	r2, [r3, #48]	; 0x30
 800879e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a0:	f003 0308 	and.w	r3, r3, #8
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80087a8:	4e3d      	ldr	r6, [pc, #244]	; (80088a0 <MX_GPIO_Init+0x170>)
 80087aa:	4622      	mov	r2, r4
 80087ac:	2120      	movs	r1, #32
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7fa feb2 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80087b4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80088b4 <MX_GPIO_Init+0x184>
 80087b8:	4622      	mov	r2, r4
 80087ba:	2120      	movs	r1, #32
 80087bc:	4648      	mov	r0, r9
 80087be:	f7fa feab 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80087c2:	4f38      	ldr	r7, [pc, #224]	; (80088a4 <MX_GPIO_Init+0x174>)
 80087c4:	4622      	mov	r2, r4
 80087c6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80087ca:	4638      	mov	r0, r7
 80087cc:	f7fa fea4 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC3 PC4 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80087d0:	f64f 731b 	movw	r3, #65307	; 0xff1b
 80087d4:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087d6:	2503      	movs	r5, #3
 80087d8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087da:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087dc:	a905      	add	r1, sp, #20
 80087de:	4648      	mov	r0, r9
 80087e0:	f7fa fdc8 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80087e4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087e6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80087ea:	a905      	add	r1, sp, #20
 80087ec:	482e      	ldr	r0, [pc, #184]	; (80088a8 <MX_GPIO_Init+0x178>)
 80087ee:	f7fa fdc1 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA6 PA7 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80087f2:	f649 63df 	movw	r3, #40671	; 0x9edf
 80087f6:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087f8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087fa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087fc:	a905      	add	r1, sp, #20
 80087fe:	4630      	mov	r0, r6
 8008800:	f7fa fdb8 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008804:	f04f 0a20 	mov.w	sl, #32
 8008808:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800880c:	f04f 0801 	mov.w	r8, #1
 8008810:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008814:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008816:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008818:	a905      	add	r1, sp, #20
 800881a:	4630      	mov	r0, r6
 800881c:	f7fa fdaa 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008820:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008824:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008828:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800882a:	f04f 0a02 	mov.w	sl, #2
 800882e:	f8cd a020 	str.w	sl, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008832:	a905      	add	r1, sp, #20
 8008834:	4648      	mov	r0, r9
 8008836:	f7fa fd9d 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800883a:	2337      	movs	r3, #55	; 0x37
 800883c:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800883e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008840:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008842:	a905      	add	r1, sp, #20
 8008844:	4638      	mov	r0, r7
 8008846:	f7fa fd95 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800884a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800884e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008850:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008854:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008856:	f8cd a020 	str.w	sl, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800885a:	a905      	add	r1, sp, #20
 800885c:	4638      	mov	r0, r7
 800885e:	f7fa fd89 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 8008862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008866:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008868:	4b10      	ldr	r3, [pc, #64]	; (80088ac <MX_GPIO_Init+0x17c>)
 800886a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800886c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 800886e:	a905      	add	r1, sp, #20
 8008870:	4630      	mov	r0, r6
 8008872:	f7fa fd7f 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008876:	2304      	movs	r3, #4
 8008878:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800887a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800887c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800887e:	a905      	add	r1, sp, #20
 8008880:	480b      	ldr	r0, [pc, #44]	; (80088b0 <MX_GPIO_Init+0x180>)
 8008882:	f7fa fd77 	bl	8003374 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8008886:	4622      	mov	r2, r4
 8008888:	2107      	movs	r1, #7
 800888a:	2017      	movs	r0, #23
 800888c:	f7fa fbe0 	bl	8003050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008890:	2017      	movs	r0, #23
 8008892:	f7fa fc11 	bl	80030b8 <HAL_NVIC_EnableIRQ>

}
 8008896:	b00a      	add	sp, #40	; 0x28
 8008898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889c:	40023800 	.word	0x40023800
 80088a0:	40020000 	.word	0x40020000
 80088a4:	40020400 	.word	0x40020400
 80088a8:	40021c00 	.word	0x40021c00
 80088ac:	10110000 	.word	0x10110000
 80088b0:	40020c00 	.word	0x40020c00
 80088b4:	40020800 	.word	0x40020800

080088b8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80088b8:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80088ba:	480b      	ldr	r0, [pc, #44]	; (80088e8 <MX_I2C2_Init+0x30>)
 80088bc:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <MX_I2C2_Init+0x34>)
 80088be:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80088c0:	4b0b      	ldr	r3, [pc, #44]	; (80088f0 <MX_I2C2_Init+0x38>)
 80088c2:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80088c4:	2300      	movs	r3, #0
 80088c6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80088c8:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80088ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80088ce:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80088d0:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80088d2:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80088d4:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80088d6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80088d8:	f7fb f840 	bl	800395c <HAL_I2C_Init>
 80088dc:	b900      	cbnz	r0, 80088e0 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
  }

}
 80088de:	bd08      	pop	{r3, pc}
    Error_Handler();
 80088e0:	f000 f8c4 	bl	8008a6c <Error_Handler>
}
 80088e4:	e7fb      	b.n	80088de <MX_I2C2_Init+0x26>
 80088e6:	bf00      	nop
 80088e8:	20004a9c 	.word	0x20004a9c
 80088ec:	40005800 	.word	0x40005800
 80088f0:	00061a80 	.word	0x00061a80

080088f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80088f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088f8:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088fa:	2300      	movs	r3, #0
 80088fc:	9303      	str	r3, [sp, #12]
 80088fe:	9304      	str	r3, [sp, #16]
 8008900:	9305      	str	r3, [sp, #20]
 8008902:	9306      	str	r3, [sp, #24]
 8008904:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8008906:	6802      	ldr	r2, [r0, #0]
 8008908:	4b1e      	ldr	r3, [pc, #120]	; (8008984 <HAL_I2C_MspInit+0x90>)
 800890a:	429a      	cmp	r2, r3
 800890c:	d002      	beq.n	8008914 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800890e:	b009      	add	sp, #36	; 0x24
 8008910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008914:	2500      	movs	r5, #0
 8008916:	9501      	str	r5, [sp, #4]
 8008918:	4c1b      	ldr	r4, [pc, #108]	; (8008988 <HAL_I2C_MspInit+0x94>)
 800891a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800891c:	f043 0302 	orr.w	r3, r3, #2
 8008920:	6323      	str	r3, [r4, #48]	; 0x30
 8008922:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800892c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008930:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008932:	f04f 0912 	mov.w	r9, #18
 8008936:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800893a:	f04f 0801 	mov.w	r8, #1
 800893e:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008942:	2703      	movs	r7, #3
 8008944:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008946:	2304      	movs	r3, #4
 8008948:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800894a:	4e10      	ldr	r6, [pc, #64]	; (800898c <HAL_I2C_MspInit+0x98>)
 800894c:	a903      	add	r1, sp, #12
 800894e:	4630      	mov	r0, r6
 8008950:	f7fa fd10 	bl	8003374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008954:	2308      	movs	r3, #8
 8008956:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008958:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800895c:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008960:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8008962:	2309      	movs	r3, #9
 8008964:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008966:	a903      	add	r1, sp, #12
 8008968:	4630      	mov	r0, r6
 800896a:	f7fa fd03 	bl	8003374 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800896e:	9502      	str	r5, [sp, #8]
 8008970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008976:	6423      	str	r3, [r4, #64]	; 0x40
 8008978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800897a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800897e:	9302      	str	r3, [sp, #8]
 8008980:	9b02      	ldr	r3, [sp, #8]
}
 8008982:	e7c4      	b.n	800890e <HAL_I2C_MspInit+0x1a>
 8008984:	40005800 	.word	0x40005800
 8008988:	40023800 	.word	0x40023800
 800898c:	40020400 	.word	0x40020400

08008990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008990:	b530      	push	{r4, r5, lr}
 8008992:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008994:	2230      	movs	r2, #48	; 0x30
 8008996:	2100      	movs	r1, #0
 8008998:	a808      	add	r0, sp, #32
 800899a:	f002 fbfb 	bl	800b194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800899e:	2400      	movs	r4, #0
 80089a0:	9403      	str	r4, [sp, #12]
 80089a2:	9404      	str	r4, [sp, #16]
 80089a4:	9405      	str	r4, [sp, #20]
 80089a6:	9406      	str	r4, [sp, #24]
 80089a8:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80089aa:	9401      	str	r4, [sp, #4]
 80089ac:	4b1a      	ldr	r3, [pc, #104]	; (8008a18 <SystemClock_Config+0x88>)
 80089ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80089b4:	641a      	str	r2, [r3, #64]	; 0x40
 80089b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80089c0:	9402      	str	r4, [sp, #8]
 80089c2:	4b16      	ldr	r3, [pc, #88]	; (8008a1c <SystemClock_Config+0x8c>)
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089d2:	9302      	str	r3, [sp, #8]
 80089d4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80089d6:	2502      	movs	r5, #2
 80089d8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80089da:	2301      	movs	r3, #1
 80089dc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80089de:	2310      	movs	r3, #16
 80089e0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80089e2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80089e4:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80089e6:	2308      	movs	r3, #8
 80089e8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80089ea:	2364      	movs	r3, #100	; 0x64
 80089ec:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80089ee:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80089f0:	2304      	movs	r3, #4
 80089f2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80089f4:	a808      	add	r0, sp, #32
 80089f6:	f7fb fb65 	bl	80040c4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80089fa:	230f      	movs	r3, #15
 80089fc:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80089fe:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a00:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a06:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a08:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008a0a:	2103      	movs	r1, #3
 8008a0c:	a803      	add	r0, sp, #12
 8008a0e:	f7fb fd91 	bl	8004534 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8008a12:	b015      	add	sp, #84	; 0x54
 8008a14:	bd30      	pop	{r4, r5, pc}
 8008a16:	bf00      	nop
 8008a18:	40023800 	.word	0x40023800
 8008a1c:	40007000 	.word	0x40007000

08008a20 <main>:
{
 8008a20:	b508      	push	{r3, lr}
  HAL_Init();
 8008a22:	f7fa fac3 	bl	8002fac <HAL_Init>
  SystemClock_Config();
 8008a26:	f7ff ffb3 	bl	8008990 <SystemClock_Config>
  MX_GPIO_Init();
 8008a2a:	f7ff fe81 	bl	8008730 <MX_GPIO_Init>
  MX_I2C2_Init();
 8008a2e:	f7ff ff43 	bl	80088b8 <MX_I2C2_Init>
  MX_TIM4_Init();
 8008a32:	f000 fa37 	bl	8008ea4 <MX_TIM4_Init>
  MX_SPI2_Init();
 8008a36:	f000 f81b 	bl	8008a70 <MX_SPI2_Init>
  MX_CRC_Init();
 8008a3a:	f7ff fd6d 	bl	8008518 <MX_CRC_Init>
  MX_TIM11_Init();
 8008a3e:	f000 f9a1 	bl	8008d84 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8008a42:	f000 ff0d 	bl	8009860 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8008a46:	f000 f983 	bl	8008d50 <MX_TIM10_Init>
  MX_FREERTOS_Init(); 
 8008a4a:	f7ff fe03 	bl	8008654 <MX_FREERTOS_Init>
  osKernelStart();
 8008a4e:	f7fd f8b5 	bl	8005bbc <osKernelStart>
 8008a52:	e7fe      	b.n	8008a52 <main+0x32>

08008a54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8008a56:	6802      	ldr	r2, [r0, #0]
 8008a58:	4b03      	ldr	r3, [pc, #12]	; (8008a68 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d000      	beq.n	8008a60 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008a5e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8008a60:	f7fa fabe 	bl	8002fe0 <HAL_IncTick>
}
 8008a64:	e7fb      	b.n	8008a5e <HAL_TIM_PeriodElapsedCallback+0xa>
 8008a66:	bf00      	nop
 8008a68:	40010000 	.word	0x40010000

08008a6c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008a6c:	4770      	bx	lr
	...

08008a70 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008a70:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8008a72:	480e      	ldr	r0, [pc, #56]	; (8008aac <MX_SPI2_Init+0x3c>)
 8008a74:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <MX_SPI2_Init+0x40>)
 8008a76:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008a78:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008a7c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008a82:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a84:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008a86:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a8c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008a8e:	2220      	movs	r2, #32
 8008a90:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008a92:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008a94:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a96:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008a98:	230a      	movs	r3, #10
 8008a9a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008a9c:	f7fb ff02 	bl	80048a4 <HAL_SPI_Init>
 8008aa0:	b900      	cbnz	r0, 8008aa4 <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 8008aa2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008aa4:	f7ff ffe2 	bl	8008a6c <Error_Handler>
}
 8008aa8:	e7fb      	b.n	8008aa2 <MX_SPI2_Init+0x32>
 8008aaa:	bf00      	nop
 8008aac:	20005158 	.word	0x20005158
 8008ab0:	40003800 	.word	0x40003800

08008ab4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ab6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ab8:	2300      	movs	r3, #0
 8008aba:	9303      	str	r3, [sp, #12]
 8008abc:	9304      	str	r3, [sp, #16]
 8008abe:	9305      	str	r3, [sp, #20]
 8008ac0:	9306      	str	r3, [sp, #24]
 8008ac2:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8008ac4:	6802      	ldr	r2, [r0, #0]
 8008ac6:	4b1f      	ldr	r3, [pc, #124]	; (8008b44 <HAL_SPI_MspInit+0x90>)
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d001      	beq.n	8008ad0 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008acc:	b009      	add	sp, #36	; 0x24
 8008ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008ad0:	2400      	movs	r4, #0
 8008ad2:	9400      	str	r4, [sp, #0]
 8008ad4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8008ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ade:	641a      	str	r2, [r3, #64]	; 0x40
 8008ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ae2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008ae6:	9200      	str	r2, [sp, #0]
 8008ae8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008aea:	9401      	str	r4, [sp, #4]
 8008aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aee:	f042 0204 	orr.w	r2, r2, #4
 8008af2:	631a      	str	r2, [r3, #48]	; 0x30
 8008af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008af6:	f002 0204 	and.w	r2, r2, #4
 8008afa:	9201      	str	r2, [sp, #4]
 8008afc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008afe:	9402      	str	r4, [sp, #8]
 8008b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b02:	f042 0202 	orr.w	r2, r2, #2
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30
 8008b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008b12:	2304      	movs	r3, #4
 8008b14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b16:	2702      	movs	r7, #2
 8008b18:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b1a:	2603      	movs	r6, #3
 8008b1c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008b1e:	2505      	movs	r5, #5
 8008b20:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b22:	a903      	add	r1, sp, #12
 8008b24:	4808      	ldr	r0, [pc, #32]	; (8008b48 <HAL_SPI_MspInit+0x94>)
 8008b26:	f7fa fc25 	bl	8003374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8008b2a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8008b2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b30:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b32:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b34:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008b36:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b38:	a903      	add	r1, sp, #12
 8008b3a:	4804      	ldr	r0, [pc, #16]	; (8008b4c <HAL_SPI_MspInit+0x98>)
 8008b3c:	f7fa fc1a 	bl	8003374 <HAL_GPIO_Init>
}
 8008b40:	e7c4      	b.n	8008acc <HAL_SPI_MspInit+0x18>
 8008b42:	bf00      	nop
 8008b44:	40003800 	.word	0x40003800
 8008b48:	40020800 	.word	0x40020800
 8008b4c:	40020400 	.word	0x40020400

08008b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008b50:	b510      	push	{r4, lr}
 8008b52:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b54:	2400      	movs	r4, #0
 8008b56:	9400      	str	r4, [sp, #0]
 8008b58:	4b15      	ldr	r3, [pc, #84]	; (8008bb0 <HAL_MspInit+0x60>)
 8008b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b60:	645a      	str	r2, [r3, #68]	; 0x44
 8008b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b64:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008b68:	9200      	str	r2, [sp, #0]
 8008b6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b6c:	9401      	str	r4, [sp, #4]
 8008b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008b74:	641a      	str	r2, [r3, #64]	; 0x40
 8008b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008b80:	4622      	mov	r2, r4
 8008b82:	210f      	movs	r1, #15
 8008b84:	f06f 0001 	mvn.w	r0, #1
 8008b88:	f7fa fa62 	bl	8003050 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 11, 0);
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	210b      	movs	r1, #11
 8008b90:	2004      	movs	r0, #4
 8008b92:	f7fa fa5d 	bl	8003050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8008b96:	2004      	movs	r0, #4
 8008b98:	f7fa fa8e 	bl	80030b8 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 10, 0);
 8008b9c:	4622      	mov	r2, r4
 8008b9e:	210a      	movs	r1, #10
 8008ba0:	2005      	movs	r0, #5
 8008ba2:	f7fa fa55 	bl	8003050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8008ba6:	2005      	movs	r0, #5
 8008ba8:	f7fa fa86 	bl	80030b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008bac:	b002      	add	sp, #8
 8008bae:	bd10      	pop	{r4, pc}
 8008bb0:	40023800 	.word	0x40023800

08008bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4601      	mov	r1, r0
 8008bbc:	2019      	movs	r0, #25
 8008bbe:	f7fa fa47 	bl	8003050 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8008bc2:	2019      	movs	r0, #25
 8008bc4:	f7fa fa78 	bl	80030b8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8008bc8:	2400      	movs	r4, #0
 8008bca:	9401      	str	r4, [sp, #4]
 8008bcc:	4b13      	ldr	r3, [pc, #76]	; (8008c1c <HAL_InitTick+0x68>)
 8008bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bd0:	f042 0201 	orr.w	r2, r2, #1
 8008bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8008bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008be0:	a902      	add	r1, sp, #8
 8008be2:	a803      	add	r0, sp, #12
 8008be4:	f7fb fd78 	bl	80046d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008be8:	f7fb fd66 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008bec:	4b0c      	ldr	r3, [pc, #48]	; (8008c20 <HAL_InitTick+0x6c>)
 8008bee:	fba3 2300 	umull	r2, r3, r3, r0
 8008bf2:	0c9b      	lsrs	r3, r3, #18
 8008bf4:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8008bf6:	480b      	ldr	r0, [pc, #44]	; (8008c24 <HAL_InitTick+0x70>)
 8008bf8:	4a0b      	ldr	r2, [pc, #44]	; (8008c28 <HAL_InitTick+0x74>)
 8008bfa:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8008bfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008c00:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8008c02:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8008c04:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c06:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8008c08:	f7fc fad8 	bl	80051bc <HAL_TIM_Base_Init>
 8008c0c:	b110      	cbz	r0, 8008c14 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008c0e:	2001      	movs	r0, #1
}
 8008c10:	b008      	add	sp, #32
 8008c12:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8008c14:	4803      	ldr	r0, [pc, #12]	; (8008c24 <HAL_InitTick+0x70>)
 8008c16:	f7fc f9b1 	bl	8004f7c <HAL_TIM_Base_Start_IT>
 8008c1a:	e7f9      	b.n	8008c10 <HAL_InitTick+0x5c>
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	431bde83 	.word	0x431bde83
 8008c24:	200051b0 	.word	0x200051b0
 8008c28:	40010000 	.word	0x40010000

08008c2c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008c2c:	4770      	bx	lr

08008c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c2e:	e7fe      	b.n	8008c2e <HardFault_Handler>

08008c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c30:	e7fe      	b.n	8008c30 <MemManage_Handler>

08008c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c32:	e7fe      	b.n	8008c32 <BusFault_Handler>

08008c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c34:	e7fe      	b.n	8008c34 <UsageFault_Handler>

08008c36 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c36:	4770      	bx	lr

08008c38 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8008c38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8008c3a:	f7fa fac5 	bl	80031c8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8008c3e:	bd08      	pop	{r3, pc}

08008c40 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8008c40:	4770      	bx	lr

08008c42 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008c42:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8008c44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008c48:	f7fa fc76 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008c4c:	bd08      	pop	{r3, pc}
	...

08008c50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008c50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008c52:	4803      	ldr	r0, [pc, #12]	; (8008c60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8008c54:	f7fc f9a7 	bl	8004fa6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8008c58:	4802      	ldr	r0, [pc, #8]	; (8008c64 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8008c5a:	f7fc f9a4 	bl	8004fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008c5e:	bd08      	pop	{r3, pc}
 8008c60:	200051b0 	.word	0x200051b0
 8008c64:	20005230 	.word	0x20005230

08008c68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008c68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8008c6a:	4802      	ldr	r0, [pc, #8]	; (8008c74 <USART6_IRQHandler+0xc>)
 8008c6c:	f7fc ff08 	bl	8005a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	//UART_timeout();
  /* USER CODE END USART6_IRQn 1 */
}
 8008c70:	bd08      	pop	{r3, pc}
 8008c72:	bf00      	nop
 8008c74:	2000663c 	.word	0x2000663c

08008c78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c7e:	2400      	movs	r4, #0
 8008c80:	e004      	b.n	8008c8c <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8008c82:	f3af 8000 	nop.w
 8008c86:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c88:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8008c8a:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c8c:	42b4      	cmp	r4, r6
 8008c8e:	dbf8      	blt.n	8008c82 <_read+0xa>
	}

return len;
}
 8008c90:	4630      	mov	r0, r6
 8008c92:	bd70      	pop	{r4, r5, r6, pc}

08008c94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c98:	2400      	movs	r4, #0
 8008c9a:	e005      	b.n	8008ca8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8008c9c:	1c4d      	adds	r5, r1, #1
 8008c9e:	7808      	ldrb	r0, [r1, #0]
 8008ca0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ca4:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8008ca6:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ca8:	42b4      	cmp	r4, r6
 8008caa:	dbf7      	blt.n	8008c9c <_write+0x8>
	}
	return len;
}
 8008cac:	4630      	mov	r0, r6
 8008cae:	bd70      	pop	{r4, r5, r6, pc}

08008cb0 <_close>:

int _close(int file)
{
	return -1;
}
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	4770      	bx	lr

08008cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8008cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cba:	604b      	str	r3, [r1, #4]
	return 0;
}
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	4770      	bx	lr

08008cc0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	4770      	bx	lr

08008cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	4770      	bx	lr

08008cc8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008cc8:	b508      	push	{r3, lr}
 8008cca:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008ccc:	4a0b      	ldr	r2, [pc, #44]	; (8008cfc <_sbrk+0x34>)
 8008cce:	6812      	ldr	r2, [r2, #0]
 8008cd0:	b142      	cbz	r2, 8008ce4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8008cd2:	4a0a      	ldr	r2, [pc, #40]	; (8008cfc <_sbrk+0x34>)
 8008cd4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8008cd6:	4403      	add	r3, r0
 8008cd8:	466a      	mov	r2, sp
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d806      	bhi.n	8008cec <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8008cde:	4a07      	ldr	r2, [pc, #28]	; (8008cfc <_sbrk+0x34>)
 8008ce0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8008ce2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8008ce4:	4a05      	ldr	r2, [pc, #20]	; (8008cfc <_sbrk+0x34>)
 8008ce6:	4906      	ldr	r1, [pc, #24]	; (8008d00 <_sbrk+0x38>)
 8008ce8:	6011      	str	r1, [r2, #0]
 8008cea:	e7f2      	b.n	8008cd2 <_sbrk+0xa>
		errno = ENOMEM;
 8008cec:	f002 fa08 	bl	800b100 <__errno>
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8008cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf8:	e7f3      	b.n	8008ce2 <_sbrk+0x1a>
 8008cfa:	bf00      	nop
 8008cfc:	2000439c 	.word	0x2000439c
 8008d00:	20006680 	.word	0x20006680

08008d04 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d04:	490f      	ldr	r1, [pc, #60]	; (8008d44 <SystemInit+0x40>)
 8008d06:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008d0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008d12:	4b0d      	ldr	r3, [pc, #52]	; (8008d48 <SystemInit+0x44>)
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	f042 0201 	orr.w	r2, r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008d26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d2a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008d2c:	4a07      	ldr	r2, [pc, #28]	; (8008d4c <SystemInit+0x48>)
 8008d2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d36:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008d38:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008d3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d3e:	608b      	str	r3, [r1, #8]
#endif
}
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	e000ed00 	.word	0xe000ed00
 8008d48:	40023800 	.word	0x40023800
 8008d4c:	24003010 	.word	0x24003010

08008d50 <MX_TIM10_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8008d50:	b508      	push	{r3, lr}

  htim10.Instance = TIM10;
 8008d52:	480a      	ldr	r0, [pc, #40]	; (8008d7c <MX_TIM10_Init+0x2c>)
 8008d54:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <MX_TIM10_Init+0x30>)
 8008d56:	6003      	str	r3, [r0, #0]
  htim10.Init.Prescaler = 10000;
 8008d58:	f242 7310 	movw	r3, #10000	; 0x2710
 8008d5c:	6043      	str	r3, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 1000;
 8008d62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d66:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d68:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d6a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8008d6c:	f7fc fa26 	bl	80051bc <HAL_TIM_Base_Init>
 8008d70:	b900      	cbnz	r0, 8008d74 <MX_TIM10_Init+0x24>
  {
    Error_Handler();
  }

}
 8008d72:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008d74:	f7ff fe7a 	bl	8008a6c <Error_Handler>
}
 8008d78:	e7fb      	b.n	8008d72 <MX_TIM10_Init+0x22>
 8008d7a:	bf00      	nop
 8008d7c:	20005230 	.word	0x20005230
 8008d80:	40014400 	.word	0x40014400

08008d84 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8008d84:	b508      	push	{r3, lr}

  htim11.Instance = TIM11;
 8008d86:	4809      	ldr	r0, [pc, #36]	; (8008dac <MX_TIM11_Init+0x28>)
 8008d88:	4b09      	ldr	r3, [pc, #36]	; (8008db0 <MX_TIM11_Init+0x2c>)
 8008d8a:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100;
 8008d8c:	2364      	movs	r3, #100	; 0x64
 8008d8e:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d90:	2300      	movs	r3, #0
 8008d92:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 8008d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d98:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d9a:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d9c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8008d9e:	f7fc fa0d 	bl	80051bc <HAL_TIM_Base_Init>
 8008da2:	b900      	cbnz	r0, 8008da6 <MX_TIM11_Init+0x22>
  {
    Error_Handler();
  }

}
 8008da4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008da6:	f7ff fe61 	bl	8008a6c <Error_Handler>
}
 8008daa:	e7fb      	b.n	8008da4 <MX_TIM11_Init+0x20>
 8008dac:	20005270 	.word	0x20005270
 8008db0:	40014800 	.word	0x40014800

08008db4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 8008db4:	6802      	ldr	r2, [r0, #0]
 8008db6:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <HAL_TIM_PWM_MspInit+0x28>)
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d000      	beq.n	8008dbe <HAL_TIM_PWM_MspInit+0xa>
 8008dbc:	4770      	bx	lr
{
 8008dbe:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9301      	str	r3, [sp, #4]
 8008dc4:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <HAL_TIM_PWM_MspInit+0x2c>)
 8008dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dc8:	f042 0204 	orr.w	r2, r2, #4
 8008dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	9301      	str	r3, [sp, #4]
 8008dd6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8008dd8:	b002      	add	sp, #8
 8008dda:	4770      	bx	lr
 8008ddc:	40000800 	.word	0x40000800
 8008de0:	40023800 	.word	0x40023800

08008de4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008de4:	b500      	push	{lr}
 8008de6:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM10)
 8008de8:	6803      	ldr	r3, [r0, #0]
 8008dea:	4a15      	ldr	r2, [pc, #84]	; (8008e40 <HAL_TIM_Base_MspInit+0x5c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d005      	beq.n	8008dfc <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM11)
 8008df0:	4a14      	ldr	r2, [pc, #80]	; (8008e44 <HAL_TIM_Base_MspInit+0x60>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d016      	beq.n	8008e24 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8008df6:	b003      	add	sp, #12
 8008df8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	9100      	str	r1, [sp, #0]
 8008e00:	4b11      	ldr	r3, [pc, #68]	; (8008e48 <HAL_TIM_Base_MspInit+0x64>)
 8008e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008e08:	645a      	str	r2, [r3, #68]	; 0x44
 8008e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8008e14:	460a      	mov	r2, r1
 8008e16:	2019      	movs	r0, #25
 8008e18:	f7fa f91a 	bl	8003050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008e1c:	2019      	movs	r0, #25
 8008e1e:	f7fa f94b 	bl	80030b8 <HAL_NVIC_EnableIRQ>
 8008e22:	e7e8      	b.n	8008df6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8008e24:	2300      	movs	r3, #0
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	4b07      	ldr	r3, [pc, #28]	; (8008e48 <HAL_TIM_Base_MspInit+0x64>)
 8008e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e2c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008e30:	645a      	str	r2, [r3, #68]	; 0x44
 8008e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	9b01      	ldr	r3, [sp, #4]
}
 8008e3c:	e7db      	b.n	8008df6 <HAL_TIM_Base_MspInit+0x12>
 8008e3e:	bf00      	nop
 8008e40:	40014400 	.word	0x40014400
 8008e44:	40014800 	.word	0x40014800
 8008e48:	40023800 	.word	0x40023800

08008e4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008e4c:	b500      	push	{lr}
 8008e4e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e50:	2300      	movs	r3, #0
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	9302      	str	r3, [sp, #8]
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 8008e5c:	6802      	ldr	r2, [r0, #0]
 8008e5e:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <HAL_TIM_MspPostInit+0x4c>)
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d002      	beq.n	8008e6a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008e64:	b007      	add	sp, #28
 8008e66:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <HAL_TIM_MspPostInit+0x50>)
 8008e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e72:	f042 0202 	orr.w	r2, r2, #2
 8008e76:	631a      	str	r2, [r3, #48]	; 0x30
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008e82:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008e86:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e88:	2302      	movs	r3, #2
 8008e8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008e8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e8e:	a901      	add	r1, sp, #4
 8008e90:	4803      	ldr	r0, [pc, #12]	; (8008ea0 <HAL_TIM_MspPostInit+0x54>)
 8008e92:	f7fa fa6f 	bl	8003374 <HAL_GPIO_Init>
}
 8008e96:	e7e5      	b.n	8008e64 <HAL_TIM_MspPostInit+0x18>
 8008e98:	40000800 	.word	0x40000800
 8008e9c:	40023800 	.word	0x40023800
 8008ea0:	40020400 	.word	0x40020400

08008ea4 <MX_TIM4_Init>:
{
 8008ea4:	b500      	push	{lr}
 8008ea6:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9308      	str	r3, [sp, #32]
 8008eac:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008eae:	9301      	str	r3, [sp, #4]
 8008eb0:	9302      	str	r3, [sp, #8]
 8008eb2:	9303      	str	r3, [sp, #12]
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	9305      	str	r3, [sp, #20]
 8008eb8:	9306      	str	r3, [sp, #24]
 8008eba:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8008ebc:	4826      	ldr	r0, [pc, #152]	; (8008f58 <MX_TIM4_Init+0xb4>)
 8008ebe:	4a27      	ldr	r2, [pc, #156]	; (8008f5c <MX_TIM4_Init+0xb8>)
 8008ec0:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9;
 8008ec2:	2209      	movs	r2, #9
 8008ec4:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ec6:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 20000;
 8008ec8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008ecc:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ece:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ed0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008ed2:	f7fc f98c 	bl	80051ee <HAL_TIM_PWM_Init>
 8008ed6:	bb68      	cbnz	r0, 8008f34 <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008edc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008ede:	a908      	add	r1, sp, #32
 8008ee0:	481d      	ldr	r0, [pc, #116]	; (8008f58 <MX_TIM4_Init+0xb4>)
 8008ee2:	f7fc fa9d 	bl	8005420 <HAL_TIMEx_MasterConfigSynchronization>
 8008ee6:	bb40      	cbnz	r0, 8008f3a <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ee8:	2360      	movs	r3, #96	; 0x60
 8008eea:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8008eec:	2200      	movs	r2, #0
 8008eee:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ef0:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8008ef2:	2304      	movs	r3, #4
 8008ef4:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ef6:	eb0d 0103 	add.w	r1, sp, r3
 8008efa:	4817      	ldr	r0, [pc, #92]	; (8008f58 <MX_TIM4_Init+0xb4>)
 8008efc:	f7fc f9c2 	bl	8005284 <HAL_TIM_PWM_ConfigChannel>
 8008f00:	b9f0      	cbnz	r0, 8008f40 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008f02:	2204      	movs	r2, #4
 8008f04:	eb0d 0102 	add.w	r1, sp, r2
 8008f08:	4813      	ldr	r0, [pc, #76]	; (8008f58 <MX_TIM4_Init+0xb4>)
 8008f0a:	f7fc f9bb 	bl	8005284 <HAL_TIM_PWM_ConfigChannel>
 8008f0e:	b9d0      	cbnz	r0, 8008f46 <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008f10:	2208      	movs	r2, #8
 8008f12:	a901      	add	r1, sp, #4
 8008f14:	4810      	ldr	r0, [pc, #64]	; (8008f58 <MX_TIM4_Init+0xb4>)
 8008f16:	f7fc f9b5 	bl	8005284 <HAL_TIM_PWM_ConfigChannel>
 8008f1a:	b9b8      	cbnz	r0, 8008f4c <MX_TIM4_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f1c:	220c      	movs	r2, #12
 8008f1e:	a901      	add	r1, sp, #4
 8008f20:	480d      	ldr	r0, [pc, #52]	; (8008f58 <MX_TIM4_Init+0xb4>)
 8008f22:	f7fc f9af 	bl	8005284 <HAL_TIM_PWM_ConfigChannel>
 8008f26:	b9a0      	cbnz	r0, 8008f52 <MX_TIM4_Init+0xae>
  HAL_TIM_MspPostInit(&htim4);
 8008f28:	480b      	ldr	r0, [pc, #44]	; (8008f58 <MX_TIM4_Init+0xb4>)
 8008f2a:	f7ff ff8f 	bl	8008e4c <HAL_TIM_MspPostInit>
}
 8008f2e:	b00b      	add	sp, #44	; 0x2c
 8008f30:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008f34:	f7ff fd9a 	bl	8008a6c <Error_Handler>
 8008f38:	e7ce      	b.n	8008ed8 <MX_TIM4_Init+0x34>
    Error_Handler();
 8008f3a:	f7ff fd97 	bl	8008a6c <Error_Handler>
 8008f3e:	e7d3      	b.n	8008ee8 <MX_TIM4_Init+0x44>
    Error_Handler();
 8008f40:	f7ff fd94 	bl	8008a6c <Error_Handler>
 8008f44:	e7dd      	b.n	8008f02 <MX_TIM4_Init+0x5e>
    Error_Handler();
 8008f46:	f7ff fd91 	bl	8008a6c <Error_Handler>
 8008f4a:	e7e1      	b.n	8008f10 <MX_TIM4_Init+0x6c>
    Error_Handler();
 8008f4c:	f7ff fd8e 	bl	8008a6c <Error_Handler>
 8008f50:	e7e4      	b.n	8008f1c <MX_TIM4_Init+0x78>
    Error_Handler();
 8008f52:	f7ff fd8b 	bl	8008a6c <Error_Handler>
 8008f56:	e7e7      	b.n	8008f28 <MX_TIM4_Init+0x84>
 8008f58:	200051f0 	.word	0x200051f0
 8008f5c:	40000800 	.word	0x40000800

08008f60 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 8008f60:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8008f62:	f7fd fc63 	bl	800682c <uxQueueGetQueueNumber>
}
 8008f66:	bd08      	pop	{r3, pc}

08008f68 <prvTraceGetTaskNumberHigh16>:
{
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
}

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8008f68:	b508      	push	{r3, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8008f6a:	f7fe f96b 	bl	8007244 <uxTaskGetTaskNumber>
}
 8008f6e:	0c00      	lsrs	r0, r0, #16
 8008f70:	bd08      	pop	{r3, pc}

08008f72 <prvTraceSetTaskNumberHigh16>:
{
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
}

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 8008f72:	b538      	push	{r3, r4, r5, lr}
 8008f74:	4604      	mov	r4, r0
 8008f76:	460d      	mov	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8008f78:	f7fe f964 	bl	8007244 <uxTaskGetTaskNumber>
 8008f7c:	b281      	uxth	r1, r0
 8008f7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008f82:	4620      	mov	r0, r4
 8008f84:	f7fe f963 	bl	800724e <vTaskSetTaskNumber>
}
 8008f88:	bd38      	pop	{r3, r4, r5, pc}

08008f8a <prvTraceGetQueueNumberHigh16>:
{
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
}

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8008f8a:	b508      	push	{r3, lr}
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 8008f8c:	f7ff ffe8 	bl	8008f60 <prvTraceGetQueueNumber>
}
 8008f90:	0c00      	lsrs	r0, r0, #16
 8008f92:	bd08      	pop	{r3, pc}

08008f94 <prvTraceSetQueueNumberHigh16>:
{
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
}

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4604      	mov	r4, r0
 8008f98:	460d      	mov	r5, r1
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8008f9a:	f7ff ffe1 	bl	8008f60 <prvTraceGetQueueNumber>
 8008f9e:	b281      	uxth	r1, r0
 8008fa0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f7fd fc43 	bl	8006830 <vQueueSetQueueNumber>
}
 8008faa:	bd38      	pop	{r3, r4, r5, pc}

08008fac <prvAddTaskToStackMonitor>:
void prvAddTaskToStackMonitor(void* task)
{
	int foundEmptySlot = 0;

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8008fac:	2300      	movs	r3, #0
 8008fae:	2b09      	cmp	r3, #9
 8008fb0:	dc0e      	bgt.n	8008fd0 <prvAddTaskToStackMonitor+0x24>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
 8008fb2:	4a0a      	ldr	r2, [pc, #40]	; (8008fdc <prvAddTaskToStackMonitor+0x30>)
 8008fb4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008fb8:	b10a      	cbz	r2, 8008fbe <prvAddTaskToStackMonitor+0x12>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8008fba:	3301      	adds	r3, #1
 8008fbc:	e7f7      	b.n	8008fae <prvAddTaskToStackMonitor+0x2>
		{
			tasksInStackMonitor[i].tcb = task;
 8008fbe:	4a07      	ldr	r2, [pc, #28]	; (8008fdc <prvAddTaskToStackMonitor+0x30>)
 8008fc0:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 8008fc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fcc:	605a      	str	r2, [r3, #4]
 8008fce:	4770      	bx	lr
		}
	}

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
 8008fd0:	4a03      	ldr	r2, [pc, #12]	; (8008fe0 <prvAddTaskToStackMonitor+0x34>)
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	6013      	str	r3, [r2, #0]
	}
}
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	200043a4 	.word	0x200043a4
 8008fe0:	200043f4 	.word	0x200043f4

08008fe4 <prvTraceGetCurrentTaskHandle>:
 *
 * Function that returns the handle to the currently executing task.
 *
 ******************************************************************************/
void* prvTraceGetCurrentTaskHandle(void)
{
 8008fe4:	b508      	push	{r3, lr}
	return xTaskGetCurrentTaskHandle();
 8008fe6:	f7fe f935 	bl	8007254 <xTaskGetCurrentTaskHandle>
}
 8008fea:	bd08      	pop	{r3, pc}

08008fec <prvIsNewTCB>:
 * Tells if this task is already executing, or if there has been a task-switch.
 * Assumed to be called within a trace hook in kernel context.
 ******************************************************************************/
uint32_t prvIsNewTCB(void* pNewTCB)
{
	if (pCurrentTCB != pNewTCB)
 8008fec:	4b04      	ldr	r3, [pc, #16]	; (8009000 <prvIsNewTCB+0x14>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4283      	cmp	r3, r0
 8008ff2:	d003      	beq.n	8008ffc <prvIsNewTCB+0x10>
	{
		pCurrentTCB = pNewTCB;
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <prvIsNewTCB+0x14>)
 8008ff6:	6018      	str	r0, [r3, #0]
		return 1;
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	4770      	bx	lr
	}
	return 0;
 8008ffc:	2000      	movs	r0, #0
}
 8008ffe:	4770      	bx	lr
 8009000:	200043a0 	.word	0x200043a0

08009004 <writeToRTT>:

	return 0;
}

int32_t writeToRTT(void* ptrData, uint32_t size, int32_t* ptrBytesWritten)
{
 8009004:	b510      	push	{r4, lr}
 8009006:	4614      	mov	r4, r2
	uint32_t bytesWritten = SEGGER_RTT_Write((TRC_CFG_RTT_UP_BUFFER_INDEX), (const char*)ptrData, size);
 8009008:	460a      	mov	r2, r1
 800900a:	4601      	mov	r1, r0
 800900c:	2001      	movs	r0, #1
 800900e:	f7ff f94b 	bl	80082a8 <SEGGER_RTT_Write>
	
	if (ptrBytesWritten != NULL)
 8009012:	b104      	cbz	r4, 8009016 <writeToRTT+0x12>
		*ptrBytesWritten = (int32_t)bytesWritten;
 8009014:	6020      	str	r0, [r4, #0]

	return 0;
}
 8009016:	2000      	movs	r0, #0
 8009018:	bd10      	pop	{r4, pc}
	...

0800901c <prvTraceGetError>:
static const char* prvTraceGetError(int errCode)
{
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (errCode)
 800901c:	3801      	subs	r0, #1
 800901e:	280c      	cmp	r0, #12
 8009020:	d820      	bhi.n	8009064 <prvTraceGetError+0x48>
 8009022:	e8df f000 	tbb	[pc, r0]
 8009026:	1715      	.short	0x1715
 8009028:	071d1b19 	.word	0x071d1b19
 800902c:	0d0b0921 	.word	0x0d0b0921
 8009030:	130f      	.short	0x130f
 8009032:	11          	.byte	0x11
 8009033:	00          	.byte	0x00
	case PSF_WARNING_SYMBOL_TABLE_SLOTS:
		/* There was not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by NoRoomForSymbol. Inspect this
		variable and increase TRC_CFG_SYMBOL_TABLE_SLOTS by at least that value. */

		return "Exceeded SYMBOL_TABLE_SLOTS (see prvTraceGetError)";
 8009034:	480d      	ldr	r0, [pc, #52]	; (800906c <prvTraceGetError+0x50>)
 8009036:	4770      	bx	lr
		/* There was not enough symbol object table slots for storing object
		properties, such as task priorites. The number of missing slots is
		counted by NoRoomForObjectData. Inspect this variable and increase
		TRC_CFG_OBJECT_DATA_SLOTS by at least that value. */

		return "Exceeded OBJECT_DATA_SLOTS (see prvTraceGetError)";
 8009038:	480d      	ldr	r0, [pc, #52]	; (8009070 <prvTraceGetError+0x54>)
 800903a:	4770      	bx	lr
		A PSF event may store maximum 60 bytes payload, including data
		arguments and string characters. For User Events, also the User
		Event Channel (4 bytes) must be squeezed in, if a channel is
		specified (can be NULL). */

		return "String too long (see prvTraceGetError)";
 800903c:	480d      	ldr	r0, [pc, #52]	; (8009074 <prvTraceGetError+0x58>)
 800903e:	4770      	bx	lr

	case PSF_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		return "TRC_STREAM_PORT_READ_DATA returned error (!= 0).";
 8009040:	480d      	ldr	r0, [pc, #52]	; (8009078 <prvTraceGetError+0x5c>)
 8009042:	4770      	bx	lr

	case PSF_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		return "TRC_STREAM_PORT_WRITE_DATA returned error (!= 0).";
 8009044:	480d      	ldr	r0, [pc, #52]	; (800907c <prvTraceGetError+0x60>)
 8009046:	4770      	bx	lr

	case PSF_WARNING_STACKMON_NO_SLOTS:

		return "TRC_STACKMON_MAX_TASKS too small!";
 8009048:	480d      	ldr	r0, [pc, #52]	; (8009080 <prvTraceGetError+0x64>)
 800904a:	4770      	bx	lr

	case PSF_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during vTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		return "Blocking in vTraceEnable (see xTraceGetLastError)";
 800904c:	480d      	ldr	r0, [pc, #52]	; (8009084 <prvTraceGetError+0x68>)
 800904e:	4770      	bx	lr

	case PSF_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		return "Invalid event code (see prvTraceGetError)";
 8009050:	480d      	ldr	r0, [pc, #52]	; (8009088 <prvTraceGetError+0x6c>)
 8009052:	4770      	bx	lr
	case PSF_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		return "Exceeded ISR nesting (see prvTraceGetError)";
 8009054:	480d      	ldr	r0, [pc, #52]	; (800908c <prvTraceGetError+0x70>)
 8009056:	4770      	bx	lr
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		return "DWT not supported (see prvTraceGetError)";
 8009058:	480d      	ldr	r0, [pc, #52]	; (8009090 <prvTraceGetError+0x74>)
 800905a:	4770      	bx	lr
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		return "DWT_CYCCNT not supported (see prvTraceGetError)";
 800905c:	480d      	ldr	r0, [pc, #52]	; (8009094 <prvTraceGetError+0x78>)
 800905e:	4770      	bx	lr

	case PSF_ERROR_TZCTRLTASK_NOT_CREATED:
		/* vTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		return "Could not create TzCtrl (see prvTraceGetError)";
 8009060:	480d      	ldr	r0, [pc, #52]	; (8009098 <prvTraceGetError+0x7c>)
 8009062:	4770      	bx	lr

	}

	return NULL;
 8009064:	2000      	movs	r0, #0
 8009066:	4770      	bx	lr
		return "Exceeded SYMBOL_MAX_LENGTH (see prvTraceGetError)";
 8009068:	480c      	ldr	r0, [pc, #48]	; (800909c <prvTraceGetError+0x80>)
}
 800906a:	4770      	bx	lr
 800906c:	0800fb4c 	.word	0x0800fb4c
 8009070:	0800fbb4 	.word	0x0800fbb4
 8009074:	0800fbe8 	.word	0x0800fbe8
 8009078:	0800fc10 	.word	0x0800fc10
 800907c:	0800fc44 	.word	0x0800fc44
 8009080:	0800fc78 	.word	0x0800fc78
 8009084:	0800fc9c 	.word	0x0800fc9c
 8009088:	0800fcd0 	.word	0x0800fcd0
 800908c:	0800fcfc 	.word	0x0800fcfc
 8009090:	0800fd28 	.word	0x0800fd28
 8009094:	0800fd54 	.word	0x0800fd54
 8009098:	0800fd84 	.word	0x0800fd84
 800909c:	0800fb80 	.word	0x0800fb80

080090a0 <prvGetTimestamp32>:

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 80090a0:	4b01      	ldr	r3, [pc, #4]	; (80090a8 <prvGetTimestamp32+0x8>)
 80090a2:	6818      	ldr	r0, [r3, #0]
	
#if ((TRC_HWTC_TYPE == TRC_OS_TIMER_INCR) || (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR))
	uint32_t ticks = TRACE_GET_OS_TICKS();
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
#endif
}
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	e0001004 	.word	0xe0001004

080090ac <prvTraceSaveObjectSymbol>:
{
 80090ac:	b430      	push	{r4, r5}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ae:	f3ef 8510 	mrs	r5, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b2:	2301      	movs	r3, #1
 80090b4:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 80090b8:	4b15      	ldr	r3, [pc, #84]	; (8009110 <prvTraceSaveObjectSymbol+0x64>)
 80090ba:	681c      	ldr	r4, [r3, #0]
 80090bc:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 80090c0:	d220      	bcs.n	8009104 <prvTraceSaveObjectSymbol+0x58>
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[firstFreeSymbolTableIndex / sizeof(uint32_t)] = (uint32_t)address;
 80090c2:	08a2      	lsrs	r2, r4, #2
 80090c4:	4b13      	ldr	r3, [pc, #76]	; (8009114 <prvTraceSaveObjectSymbol+0x68>)
 80090c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex + sizeof(uint32_t)];
 80090ca:	1d20      	adds	r0, r4, #4
 80090cc:	4418      	add	r0, r3
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 80090ce:	2300      	movs	r3, #0
 80090d0:	2b18      	cmp	r3, #24
 80090d2:	d806      	bhi.n	80090e2 <prvTraceSaveObjectSymbol+0x36>
			ptrSymbol[i] = (uint8_t)name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 80090d4:	5cca      	ldrb	r2, [r1, r3]
 80090d6:	54c2      	strb	r2, [r0, r3]
			if (name[i] == 0)
 80090d8:	5cca      	ldrb	r2, [r1, r3]
 80090da:	b112      	cbz	r2, 80090e2 <prvTraceSaveObjectSymbol+0x36>
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 80090dc:	3301      	adds	r3, #1
 80090de:	e7f7      	b.n	80090d0 <prvTraceSaveObjectSymbol+0x24>
			i++;
 80090e0:	3301      	adds	r3, #1
		while ((name[i] != 0) && i < 128)
 80090e2:	5cca      	ldrb	r2, [r1, r3]
 80090e4:	b10a      	cbz	r2, 80090ea <prvTraceSaveObjectSymbol+0x3e>
 80090e6:	2b7f      	cmp	r3, #127	; 0x7f
 80090e8:	d9fa      	bls.n	80090e0 <prvTraceSaveObjectSymbol+0x34>
		if (i > LongestSymbolName)
 80090ea:	4a0b      	ldr	r2, [pc, #44]	; (8009118 <prvTraceSaveObjectSymbol+0x6c>)
 80090ec:	6812      	ldr	r2, [r2, #0]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d201      	bcs.n	80090f6 <prvTraceSaveObjectSymbol+0x4a>
			LongestSymbolName = i;
 80090f2:	4a09      	ldr	r2, [pc, #36]	; (8009118 <prvTraceSaveObjectSymbol+0x6c>)
 80090f4:	6013      	str	r3, [r2, #0]
		firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
 80090f6:	3420      	adds	r4, #32
 80090f8:	4b05      	ldr	r3, [pc, #20]	; (8009110 <prvTraceSaveObjectSymbol+0x64>)
 80090fa:	601c      	str	r4, [r3, #0]
 80090fc:	f385 8810 	msr	PRIMASK, r5
}
 8009100:	bc30      	pop	{r4, r5}
 8009102:	4770      	bx	lr
		NoRoomForSymbol++;
 8009104:	4a05      	ldr	r2, [pc, #20]	; (800911c <prvTraceSaveObjectSymbol+0x70>)
 8009106:	6813      	ldr	r3, [r2, #0]
 8009108:	3301      	adds	r3, #1
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	e7f6      	b.n	80090fc <prvTraceSaveObjectSymbol+0x50>
 800910e:	bf00      	nop
 8009110:	20004420 	.word	0x20004420
 8009114:	20004564 	.word	0x20004564
 8009118:	200043fc 	.word	0x200043fc
 800911c:	20004408 	.word	0x20004408

08009120 <prvTraceSaveObjectData>:
{
 8009120:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009122:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009126:	2301      	movs	r3, #1
 8009128:	f383 8810 	msr	PRIMASK, r3
	foundSlot = firstFreeObjectDataTableIndex;
 800912c:	4b12      	ldr	r3, [pc, #72]	; (8009178 <prvTraceSaveObjectData+0x58>)
 800912e:	681d      	ldr	r5, [r3, #0]
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8009130:	2300      	movs	r3, #0
 8009132:	42ab      	cmp	r3, r5
 8009134:	d207      	bcs.n	8009146 <prvTraceSaveObjectData+0x26>
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 8009136:	089a      	lsrs	r2, r3, #2
		if (*ptr == (uint32_t)address)
 8009138:	4c10      	ldr	r4, [pc, #64]	; (800917c <prvTraceSaveObjectData+0x5c>)
 800913a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800913e:	4282      	cmp	r2, r0
 8009140:	d002      	beq.n	8009148 <prvTraceSaveObjectData+0x28>
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8009142:	3308      	adds	r3, #8
 8009144:	e7f5      	b.n	8009132 <prvTraceSaveObjectData+0x12>
	foundSlot = firstFreeObjectDataTableIndex;
 8009146:	462b      	mov	r3, r5
	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8009148:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800914c:	d20c      	bcs.n	8009168 <prvTraceSaveObjectData+0x48>
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 800914e:	089a      	lsrs	r2, r3, #2
 8009150:	4c0a      	ldr	r4, [pc, #40]	; (800917c <prvTraceSaveObjectData+0x5c>)
 8009152:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8009156:	3201      	adds	r2, #1
 8009158:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		if (foundSlot == firstFreeObjectDataTableIndex)
 800915c:	42ab      	cmp	r3, r5
 800915e:	d107      	bne.n	8009170 <prvTraceSaveObjectData+0x50>
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8009160:	3508      	adds	r5, #8
 8009162:	4b05      	ldr	r3, [pc, #20]	; (8009178 <prvTraceSaveObjectData+0x58>)
 8009164:	601d      	str	r5, [r3, #0]
 8009166:	e003      	b.n	8009170 <prvTraceSaveObjectData+0x50>
		NoRoomForObjectData++;
 8009168:	4a05      	ldr	r2, [pc, #20]	; (8009180 <prvTraceSaveObjectData+0x60>)
 800916a:	6813      	ldr	r3, [r2, #0]
 800916c:	3301      	adds	r3, #1
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	f386 8810 	msr	PRIMASK, r6
}
 8009174:	bc70      	pop	{r4, r5, r6}
 8009176:	4770      	bx	lr
 8009178:	2000441c 	.word	0x2000441c
 800917c:	20004424 	.word	0x20004424
 8009180:	20004404 	.word	0x20004404

08009184 <prvTraceError>:
{
 8009184:	b538      	push	{r3, r4, r5, lr}
	if (errorCode == PSF_ERROR_NONE)
 8009186:	4b10      	ldr	r3, [pc, #64]	; (80091c8 <prvTraceError+0x44>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	b103      	cbz	r3, 800918e <prvTraceError+0xa>
}
 800918c:	bd38      	pop	{r3, r4, r5, pc}
		errorCode = errCode;
 800918e:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <prvTraceError+0x44>)
 8009190:	6018      	str	r0, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8009192:	1e42      	subs	r2, r0, #1
 8009194:	2301      	movs	r3, #1
 8009196:	fa03 f202 	lsl.w	r2, r3, r2
 800919a:	490c      	ldr	r1, [pc, #48]	; (80091cc <prvTraceError+0x48>)
 800919c:	680b      	ldr	r3, [r1, #0]
 800919e:	4313      	orrs	r3, r2
 80091a0:	600b      	str	r3, [r1, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 80091a2:	4c0b      	ldr	r4, [pc, #44]	; (80091d0 <prvTraceError+0x4c>)
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	f7ff ff39 	bl	800901c <prvTraceGetError>
 80091aa:	4602      	mov	r2, r0
 80091ac:	4629      	mov	r1, r5
 80091ae:	2090      	movs	r0, #144	; 0x90
 80091b0:	f000 f98c 	bl	80094cc <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 80091b4:	4a07      	ldr	r2, [pc, #28]	; (80091d4 <prvTraceError+0x50>)
 80091b6:	6821      	ldr	r1, [r4, #0]
 80091b8:	2090      	movs	r0, #144	; 0x90
 80091ba:	f000 f987 	bl	80094cc <prvTraceStoreSimpleStringEventHelper>
		prvSetRecorderEnabled(0);
 80091be:	2000      	movs	r0, #0
 80091c0:	f000 f876 	bl	80092b0 <prvSetRecorderEnabled>
}
 80091c4:	e7e2      	b.n	800918c <prvTraceError+0x8>
 80091c6:	bf00      	nop
 80091c8:	20004414 	.word	0x20004414
 80091cc:	200043f8 	.word	0x200043f8
 80091d0:	20006638 	.word	0x20006638
 80091d4:	0800fb28 	.word	0x0800fb28

080091d8 <prvTraceStoreEvent>:
{
 80091d8:	b40e      	push	{r1, r2, r3}
 80091da:	b570      	push	{r4, r5, r6, lr}
 80091dc:	b095      	sub	sp, #84	; 0x54
 80091de:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80091e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e6:	d20f      	bcs.n	8009208 <prvTraceStoreEvent+0x30>
 80091e8:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ea:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ee:	2201      	movs	r2, #1
 80091f0:	f382 8810 	msr	PRIMASK, r2
	if (RecorderEnabled)
 80091f4:	4a1e      	ldr	r2, [pc, #120]	; (8009270 <prvTraceStoreEvent+0x98>)
 80091f6:	6812      	ldr	r2, [r2, #0]
 80091f8:	b952      	cbnz	r2, 8009210 <prvTraceStoreEvent+0x38>
 80091fa:	f385 8810 	msr	PRIMASK, r5
}
 80091fe:	b015      	add	sp, #84	; 0x54
 8009200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009204:	b003      	add	sp, #12
 8009206:	4770      	bx	lr
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8009208:	2001      	movs	r0, #1
 800920a:	f7ff ffbb 	bl	8009184 <prvTraceError>
 800920e:	e7f6      	b.n	80091fe <prvTraceStoreEvent+0x26>
	  	int eventSize = (int)sizeof(BaseEvent) + nParam * (int)sizeof(uint32_t);
 8009210:	1c86      	adds	r6, r0, #2
 8009212:	00b6      	lsls	r6, r6, #2
		eventCounter++;
 8009214:	4a17      	ldr	r2, [pc, #92]	; (8009274 <prvTraceStoreEvent+0x9c>)
 8009216:	6811      	ldr	r1, [r2, #0]
 8009218:	3101      	adds	r1, #1
 800921a:	6011      	str	r1, [r2, #0]
				event->base.EventID = eventID | (uint16_t)PARAM_COUNT(nParam);
 800921c:	b282      	uxth	r2, r0
 800921e:	0312      	lsls	r2, r2, #12
 8009220:	b292      	uxth	r2, r2
 8009222:	4313      	orrs	r3, r2
 8009224:	f8ad 3008 	strh.w	r3, [sp, #8]
				event->base.EventCount = (uint16_t)eventCounter;
 8009228:	f8ad 100a 	strh.w	r1, [sp, #10]
				event->base.TS = prvGetTimestamp32();
 800922c:	f7ff ff38 	bl	80090a0 <prvGetTimestamp32>
 8009230:	9003      	str	r0, [sp, #12]
				va_start(vl, eventID);
 8009232:	ab1a      	add	r3, sp, #104	; 0x68
 8009234:	9313      	str	r3, [sp, #76]	; 0x4c
				for (i = 0; i < nParam; i++)
 8009236:	2300      	movs	r3, #0
 8009238:	e00a      	b.n	8009250 <prvTraceStoreEvent+0x78>
					*tmp = va_arg(vl, uint32_t);
 800923a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800923c:	1d11      	adds	r1, r2, #4
 800923e:	9113      	str	r1, [sp, #76]	; 0x4c
 8009240:	6811      	ldr	r1, [r2, #0]
 8009242:	1c9a      	adds	r2, r3, #2
 8009244:	a814      	add	r0, sp, #80	; 0x50
 8009246:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800924a:	f842 1c48 	str.w	r1, [r2, #-72]
				for (i = 0; i < nParam; i++)
 800924e:	3301      	adds	r3, #1
 8009250:	42a3      	cmp	r3, r4
 8009252:	dbf2      	blt.n	800923a <prvTraceStoreEvent+0x62>
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8009254:	aa14      	add	r2, sp, #80	; 0x50
 8009256:	2300      	movs	r3, #0
 8009258:	f842 3d4c 	str.w	r3, [r2, #-76]!
 800925c:	4631      	mov	r1, r6
 800925e:	a802      	add	r0, sp, #8
 8009260:	f7ff fed0 	bl	8009004 <writeToRTT>
 8009264:	2800      	cmp	r0, #0
 8009266:	d0c8      	beq.n	80091fa <prvTraceStoreEvent+0x22>
 8009268:	f000 f864 	bl	8009334 <vTraceStop>
 800926c:	e7c5      	b.n	80091fa <prvTraceStoreEvent+0x22>
 800926e:	bf00      	nop
 8009270:	2000440c 	.word	0x2000440c
 8009274:	20004418 	.word	0x20004418

08009278 <prvTraceStoreTSConfig>:

/* Store the Timestamp Config event */
static void prvTraceStoreTSConfig(void)
{
 8009278:	b500      	push	{lr}
 800927a:	b083      	sub	sp, #12
	/* If not overridden using vTraceSetFrequency, use default value */
	if (timestampFrequency == 0)
 800927c:	4b0a      	ldr	r3, [pc, #40]	; (80092a8 <prvTraceStoreTSConfig+0x30>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	b91b      	cbnz	r3, 800928a <prvTraceStoreTSConfig+0x12>
	{
		timestampFrequency = TRC_HWTC_FREQ_HZ;
 8009282:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <prvTraceStoreTSConfig+0x34>)
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	4b08      	ldr	r3, [pc, #32]	; (80092a8 <prvTraceStoreTSConfig+0x30>)
 8009288:	601a      	str	r2, [r3, #0]
							(uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD),
							(uint32_t)(TRC_HWTC_PERIOD));
	
	#else
	
	prvTraceStoreEvent(4, 
 800928a:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <prvTraceStoreTSConfig+0x30>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	2300      	movs	r3, #0
 8009290:	9301      	str	r3, [sp, #4]
 8009292:	2301      	movs	r3, #1
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800929a:	2102      	movs	r1, #2
 800929c:	2004      	movs	r0, #4
 800929e:	f7ff ff9b 	bl	80091d8 <prvTraceStoreEvent>
						(uint32_t)timestampFrequency,	                    
						(uint32_t)(TRACE_TICK_RATE_HZ),
						(uint32_t)(TRC_HWTC_TYPE),
						(uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD));	
	#endif
}
 80092a2:	b003      	add	sp, #12
 80092a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80092a8:	20004a64 	.word	0x20004a64
 80092ac:	20000070 	.word	0x20000070

080092b0 <prvSetRecorderEnabled>:
	if (RecorderEnabled == isEnabled)
 80092b0:	4b1a      	ldr	r3, [pc, #104]	; (800931c <prvSetRecorderEnabled+0x6c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4283      	cmp	r3, r0
 80092b6:	d02f      	beq.n	8009318 <prvSetRecorderEnabled+0x68>
{
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	4604      	mov	r4, r0
	if (uiTraceSystemState == TRC_STATE_IN_STARTUP)
 80092bc:	4b18      	ldr	r3, [pc, #96]	; (8009320 <prvSetRecorderEnabled+0x70>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	b95b      	cbnz	r3, 80092da <prvSetRecorderEnabled+0x2a>
		currentTask = (void*)HANDLE_NO_TASK;
 80092c2:	2602      	movs	r6, #2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c8:	2301      	movs	r3, #1
 80092ca:	f383 8810 	msr	PRIMASK, r3
    RecorderEnabled = isEnabled;
 80092ce:	4b13      	ldr	r3, [pc, #76]	; (800931c <prvSetRecorderEnabled+0x6c>)
 80092d0:	601c      	str	r4, [r3, #0]
	if (RecorderEnabled)
 80092d2:	b934      	cbnz	r4, 80092e2 <prvSetRecorderEnabled+0x32>
 80092d4:	f385 8810 	msr	PRIMASK, r5
}
 80092d8:	bd70      	pop	{r4, r5, r6, pc}
		currentTask = TRACE_GET_CURRENT_TASK();
 80092da:	f7ff fe83 	bl	8008fe4 <prvTraceGetCurrentTaskHandle>
 80092de:	4606      	mov	r6, r0
 80092e0:	e7f0      	b.n	80092c4 <prvSetRecorderEnabled+0x14>
     	eventCounter = 0;
 80092e2:	4b10      	ldr	r3, [pc, #64]	; (8009324 <prvSetRecorderEnabled+0x74>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
        ISR_stack_index = -1;
 80092e8:	4b0f      	ldr	r3, [pc, #60]	; (8009328 <prvSetRecorderEnabled+0x78>)
 80092ea:	22ff      	movs	r2, #255	; 0xff
 80092ec:	701a      	strb	r2, [r3, #0]
        prvTraceStoreHeader();
 80092ee:	f000 f979 	bl	80095e4 <prvTraceStoreHeader>
		prvTraceStoreSymbolTable();
 80092f2:	f000 f9b5 	bl	8009660 <prvTraceStoreSymbolTable>
    	prvTraceStoreObjectDataTable();
 80092f6:	f000 f9e9 	bl	80096cc <prvTraceStoreObjectDataTable>
    	prvTraceStoreExtensionInfo();
 80092fa:	f000 fa1d 	bl	8009738 <prvTraceStoreExtensionInfo>
        prvTraceStoreEvent3(	PSF_EVENT_TRACE_START,
 80092fe:	4b0b      	ldr	r3, [pc, #44]	; (800932c <prvSetRecorderEnabled+0x7c>)
 8009300:	6819      	ldr	r1, [r3, #0]
 8009302:	4a0b      	ldr	r2, [pc, #44]	; (8009330 <prvSetRecorderEnabled+0x80>)
 8009304:	6813      	ldr	r3, [r2, #0]
 8009306:	1c58      	adds	r0, r3, #1
 8009308:	6010      	str	r0, [r2, #0]
 800930a:	4632      	mov	r2, r6
 800930c:	2001      	movs	r0, #1
 800930e:	f000 f817 	bl	8009340 <prvTraceStoreEvent3>
        prvTraceStoreTSConfig();
 8009312:	f7ff ffb1 	bl	8009278 <prvTraceStoreTSConfig>
 8009316:	e7dd      	b.n	80092d4 <prvSetRecorderEnabled+0x24>
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	2000440c 	.word	0x2000440c
 8009320:	20004a6c 	.word	0x20004a6c
 8009324:	20004418 	.word	0x20004418
 8009328:	20000078 	.word	0x20000078
 800932c:	20004a70 	.word	0x20004a70
 8009330:	20004410 	.word	0x20004410

08009334 <vTraceStop>:
{
 8009334:	b508      	push	{r3, lr}
	prvSetRecorderEnabled(0);
 8009336:	2000      	movs	r0, #0
 8009338:	f7ff ffba 	bl	80092b0 <prvSetRecorderEnabled>
}
 800933c:	bd08      	pop	{r3, pc}
	...

08009340 <prvTraceStoreEvent3>:
{
 8009340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009342:	b087      	sub	sp, #28
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8009344:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009348:	d20e      	bcs.n	8009368 <prvTraceStoreEvent3+0x28>
 800934a:	460f      	mov	r7, r1
 800934c:	4616      	mov	r6, r2
 800934e:	461d      	mov	r5, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009350:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009354:	2301      	movs	r3, #1
 8009356:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 800935a:	4b14      	ldr	r3, [pc, #80]	; (80093ac <prvTraceStoreEvent3+0x6c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	b93b      	cbnz	r3, 8009370 <prvTraceStoreEvent3+0x30>
 8009360:	f384 8810 	msr	PRIMASK, r4
}
 8009364:	b007      	add	sp, #28
 8009366:	bdf0      	pop	{r4, r5, r6, r7, pc}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8009368:	2001      	movs	r0, #1
 800936a:	f7ff ff0b 	bl	8009184 <prvTraceError>
 800936e:	e7f9      	b.n	8009364 <prvTraceStoreEvent3+0x24>
  		eventCounter++;
 8009370:	4a0f      	ldr	r2, [pc, #60]	; (80093b0 <prvTraceStoreEvent3+0x70>)
 8009372:	6813      	ldr	r3, [r2, #0]
 8009374:	3301      	adds	r3, #1
 8009376:	6013      	str	r3, [r2, #0]
				event->base.EventID = eventID | PARAM_COUNT(3);
 8009378:	f440 5040 	orr.w	r0, r0, #12288	; 0x3000
 800937c:	f8ad 0004 	strh.w	r0, [sp, #4]
				event->base.EventCount = (uint16_t)eventCounter;
 8009380:	f8ad 3006 	strh.w	r3, [sp, #6]
				event->base.TS = prvGetTimestamp32();
 8009384:	f7ff fe8c 	bl	80090a0 <prvGetTimestamp32>
 8009388:	9002      	str	r0, [sp, #8]
				event->param1 = (uint32_t)param1;
 800938a:	9703      	str	r7, [sp, #12]
				event->param2 = param2;
 800938c:	9604      	str	r6, [sp, #16]
				event->param3 = param3;
 800938e:	9505      	str	r5, [sp, #20]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8009390:	aa06      	add	r2, sp, #24
 8009392:	2300      	movs	r3, #0
 8009394:	f842 3d18 	str.w	r3, [r2, #-24]!
 8009398:	2114      	movs	r1, #20
 800939a:	a801      	add	r0, sp, #4
 800939c:	f7ff fe32 	bl	8009004 <writeToRTT>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d0dd      	beq.n	8009360 <prvTraceStoreEvent3+0x20>
 80093a4:	f7ff ffc6 	bl	8009334 <vTraceStop>
 80093a8:	e7da      	b.n	8009360 <prvTraceStoreEvent3+0x20>
 80093aa:	bf00      	nop
 80093ac:	2000440c 	.word	0x2000440c
 80093b0:	20004418 	.word	0x20004418

080093b4 <prvTraceStoreStringEventHelper>:
{
 80093b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b8:	b092      	sub	sp, #72	; 0x48
 80093ba:	4605      	mov	r5, r0
 80093bc:	4692      	mov	sl, r2
 80093be:	461c      	mov	r4, r3
 80093c0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
	nStrWords = (len+1+3)/4;
 80093c2:	3304      	adds	r3, #4
 80093c4:	d41c      	bmi.n	8009400 <prvTraceStoreStringEventHelper+0x4c>
	offset = nArgs * 4;
 80093c6:	00ae      	lsls	r6, r5, #2
	nWords = nStrWords + nArgs;
 80093c8:	eb05 03a3 	add.w	r3, r5, r3, asr #2
	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 80093cc:	2b0f      	cmp	r3, #15
 80093ce:	dd0a      	ble.n	80093e6 <prvTraceStoreStringEventHelper+0x32>
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80093d0:	3b0f      	subs	r3, #15
 80093d2:	009b      	lsls	r3, r3, #2
		if (bytesTruncated > MaxBytesTruncated)
 80093d4:	4a2e      	ldr	r2, [pc, #184]	; (8009490 <prvTraceStoreStringEventHelper+0xdc>)
 80093d6:	6812      	ldr	r2, [r2, #0]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d201      	bcs.n	80093e0 <prvTraceStoreStringEventHelper+0x2c>
			MaxBytesTruncated = bytesTruncated;
 80093dc:	4a2c      	ldr	r2, [pc, #176]	; (8009490 <prvTraceStoreStringEventHelper+0xdc>)
 80093de:	6013      	str	r3, [r2, #0]
		len = 15 * 4 - offset;
 80093e0:	f1c6 043c 	rsb	r4, r6, #60	; 0x3c
		nWords = 15;
 80093e4:	230f      	movs	r3, #15
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093e6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ea:	2201      	movs	r2, #1
 80093ec:	f382 8810 	msr	PRIMASK, r2
	if (RecorderEnabled)
 80093f0:	4a28      	ldr	r2, [pc, #160]	; (8009494 <prvTraceStoreStringEventHelper+0xe0>)
 80093f2:	6812      	ldr	r2, [r2, #0]
 80093f4:	b932      	cbnz	r2, 8009404 <prvTraceStoreStringEventHelper+0x50>
 80093f6:	f388 8810 	msr	PRIMASK, r8
}
 80093fa:	b012      	add	sp, #72	; 0x48
 80093fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nStrWords = (len+1+3)/4;
 8009400:	3303      	adds	r3, #3
 8009402:	e7e0      	b.n	80093c6 <prvTraceStoreStringEventHelper+0x12>
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8009404:	f103 0902 	add.w	r9, r3, #2
 8009408:	ea4f 0989 	mov.w	r9, r9, lsl #2
		eventCounter++;
 800940c:	4822      	ldr	r0, [pc, #136]	; (8009498 <prvTraceStoreStringEventHelper+0xe4>)
 800940e:	6802      	ldr	r2, [r0, #0]
 8009410:	3201      	adds	r2, #1
 8009412:	6002      	str	r2, [r0, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8009414:	b29b      	uxth	r3, r3
 8009416:	031b      	lsls	r3, r3, #12
 8009418:	b29b      	uxth	r3, r3
 800941a:	4319      	orrs	r1, r3
 800941c:	f8ad 1004 	strh.w	r1, [sp, #4]
				event->base.EventCount = (uint16_t)eventCounter;
 8009420:	f8ad 2006 	strh.w	r2, [sp, #6]
				event->base.TS = prvGetTimestamp32();
 8009424:	f7ff fe3c 	bl	80090a0 <prvGetTimestamp32>
 8009428:	9002      	str	r0, [sp, #8]
				for (i = 0; i < nArgs; i++)
 800942a:	2300      	movs	r3, #0
 800942c:	e007      	b.n	800943e <prvTraceStoreStringEventHelper+0x8a>
						data32[i] = va_arg(vl, uint32_t);
 800942e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009430:	1d11      	adds	r1, r2, #4
 8009432:	911b      	str	r1, [sp, #108]	; 0x6c
 8009434:	6811      	ldr	r1, [r2, #0]
 8009436:	aa03      	add	r2, sp, #12
 8009438:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (i = 0; i < nArgs; i++)
 800943c:	3301      	adds	r3, #1
 800943e:	42ab      	cmp	r3, r5
 8009440:	da08      	bge.n	8009454 <prvTraceStoreStringEventHelper+0xa0>
					if ((userEvtChannel != NULL) && (i == 0))
 8009442:	f1ba 0f00 	cmp.w	sl, #0
 8009446:	d0f2      	beq.n	800942e <prvTraceStoreStringEventHelper+0x7a>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1f0      	bne.n	800942e <prvTraceStoreStringEventHelper+0x7a>
						data32[i] = (uint32_t)userEvtChannel;
 800944c:	aa03      	add	r2, sp, #12
 800944e:	f842 a023 	str.w	sl, [r2, r3, lsl #2]
 8009452:	e7f3      	b.n	800943c <prvTraceStoreStringEventHelper+0x88>
				for (i = 0; i < len; i++)
 8009454:	2300      	movs	r3, #0
 8009456:	e004      	b.n	8009462 <prvTraceStoreStringEventHelper+0xae>
					data8[offset + i] = str[i];
 8009458:	199a      	adds	r2, r3, r6
 800945a:	5cf8      	ldrb	r0, [r7, r3]
 800945c:	a903      	add	r1, sp, #12
 800945e:	5488      	strb	r0, [r1, r2]
				for (i = 0; i < len; i++)
 8009460:	3301      	adds	r3, #1
 8009462:	429c      	cmp	r4, r3
 8009464:	dcf8      	bgt.n	8009458 <prvTraceStoreStringEventHelper+0xa4>
				if (len < (15 * 4 - offset))
 8009466:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
 800946a:	42a3      	cmp	r3, r4
 800946c:	dd03      	ble.n	8009476 <prvTraceStoreStringEventHelper+0xc2>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 800946e:	4434      	add	r4, r6
 8009470:	ab03      	add	r3, sp, #12
 8009472:	2200      	movs	r2, #0
 8009474:	551a      	strb	r2, [r3, r4]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8009476:	aa12      	add	r2, sp, #72	; 0x48
 8009478:	2300      	movs	r3, #0
 800947a:	f842 3d48 	str.w	r3, [r2, #-72]!
 800947e:	4649      	mov	r1, r9
 8009480:	a801      	add	r0, sp, #4
 8009482:	f7ff fdbf 	bl	8009004 <writeToRTT>
 8009486:	2800      	cmp	r0, #0
 8009488:	d0b5      	beq.n	80093f6 <prvTraceStoreStringEventHelper+0x42>
 800948a:	f7ff ff53 	bl	8009334 <vTraceStop>
 800948e:	e7b2      	b.n	80093f6 <prvTraceStoreStringEventHelper+0x42>
 8009490:	20004400 	.word	0x20004400
 8009494:	2000440c 	.word	0x2000440c
 8009498:	20004418 	.word	0x20004418

0800949c <prvTraceStoreStringEvent>:
{
 800949c:	b40c      	push	{r2, r3}
 800949e:	b510      	push	{r4, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	9c06      	ldr	r4, [sp, #24]
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 80094a4:	2300      	movs	r3, #0
 80094a6:	e000      	b.n	80094aa <prvTraceStoreStringEvent+0xe>
 80094a8:	3301      	adds	r3, #1
 80094aa:	5ce2      	ldrb	r2, [r4, r3]
 80094ac:	b10a      	cbz	r2, 80094b2 <prvTraceStoreStringEvent+0x16>
 80094ae:	2b33      	cmp	r3, #51	; 0x33
 80094b0:	ddfa      	ble.n	80094a8 <prvTraceStoreStringEvent+0xc>
	va_start(vl, str);
 80094b2:	aa07      	add	r2, sp, #28
 80094b4:	9203      	str	r2, [sp, #12]
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, len, str, vl);
 80094b6:	9201      	str	r2, [sp, #4]
 80094b8:	9400      	str	r4, [sp, #0]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f7ff ff7a 	bl	80093b4 <prvTraceStoreStringEventHelper>
}
 80094c0:	b004      	add	sp, #16
 80094c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094c6:	b002      	add	sp, #8
 80094c8:	4770      	bx	lr
	...

080094cc <prvTraceStoreSimpleStringEventHelper>:
{
 80094cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094d0:	b093      	sub	sp, #76	; 0x4c
 80094d2:	4689      	mov	r9, r1
 80094d4:	4615      	mov	r5, r2
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 80094d6:	2400      	movs	r4, #0
 80094d8:	e000      	b.n	80094dc <prvTraceStoreSimpleStringEventHelper+0x10>
 80094da:	3401      	adds	r4, #1
 80094dc:	5d2b      	ldrb	r3, [r5, r4]
 80094de:	b10b      	cbz	r3, 80094e4 <prvTraceStoreSimpleStringEventHelper+0x18>
 80094e0:	2c33      	cmp	r4, #51	; 0x33
 80094e2:	ddfa      	ble.n	80094da <prvTraceStoreSimpleStringEventHelper+0xe>
	nStrWords = (len+1+3)/4;
 80094e4:	1d23      	adds	r3, r4, #4
 80094e6:	d422      	bmi.n	800952e <prvTraceStoreSimpleStringEventHelper+0x62>
 80094e8:	109b      	asrs	r3, r3, #2
	if (userEvtChannel)
 80094ea:	f1b9 0f00 	cmp.w	r9, #0
 80094ee:	d020      	beq.n	8009532 <prvTraceStoreSimpleStringEventHelper+0x66>
		eventID++;
 80094f0:	3001      	adds	r0, #1
 80094f2:	b280      	uxth	r0, r0
		nArgs++;
 80094f4:	2201      	movs	r2, #1
	offset = nArgs * 4;
 80094f6:	0096      	lsls	r6, r2, #2
	nWords = nStrWords + nArgs;
 80094f8:	4413      	add	r3, r2
	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 80094fa:	2b0f      	cmp	r3, #15
 80094fc:	dd0a      	ble.n	8009514 <prvTraceStoreSimpleStringEventHelper+0x48>
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80094fe:	3b0f      	subs	r3, #15
 8009500:	009b      	lsls	r3, r3, #2
		if (bytesTruncated > MaxBytesTruncated)
 8009502:	4a28      	ldr	r2, [pc, #160]	; (80095a4 <prvTraceStoreSimpleStringEventHelper+0xd8>)
 8009504:	6812      	ldr	r2, [r2, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d201      	bcs.n	800950e <prvTraceStoreSimpleStringEventHelper+0x42>
			MaxBytesTruncated = bytesTruncated;
 800950a:	4a26      	ldr	r2, [pc, #152]	; (80095a4 <prvTraceStoreSimpleStringEventHelper+0xd8>)
 800950c:	6013      	str	r3, [r2, #0]
		len = 15 * 4 - offset;
 800950e:	f1c6 043c 	rsb	r4, r6, #60	; 0x3c
		nWords = 15;
 8009512:	230f      	movs	r3, #15
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009514:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009518:	2201      	movs	r2, #1
 800951a:	f382 8810 	msr	PRIMASK, r2
	if (RecorderEnabled)
 800951e:	4a22      	ldr	r2, [pc, #136]	; (80095a8 <prvTraceStoreSimpleStringEventHelper+0xdc>)
 8009520:	6812      	ldr	r2, [r2, #0]
 8009522:	b942      	cbnz	r2, 8009536 <prvTraceStoreSimpleStringEventHelper+0x6a>
 8009524:	f387 8810 	msr	PRIMASK, r7
}
 8009528:	b013      	add	sp, #76	; 0x4c
 800952a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nStrWords = (len+1+3)/4;
 800952e:	3303      	adds	r3, #3
 8009530:	e7da      	b.n	80094e8 <prvTraceStoreSimpleStringEventHelper+0x1c>
	int nArgs = 0;
 8009532:	2200      	movs	r2, #0
 8009534:	e7df      	b.n	80094f6 <prvTraceStoreSimpleStringEventHelper+0x2a>
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8009536:	f103 0802 	add.w	r8, r3, #2
 800953a:	ea4f 0888 	mov.w	r8, r8, lsl #2
		eventCounter++;
 800953e:	491b      	ldr	r1, [pc, #108]	; (80095ac <prvTraceStoreSimpleStringEventHelper+0xe0>)
 8009540:	680a      	ldr	r2, [r1, #0]
 8009542:	3201      	adds	r2, #1
 8009544:	600a      	str	r2, [r1, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8009546:	b29b      	uxth	r3, r3
 8009548:	031b      	lsls	r3, r3, #12
 800954a:	b29b      	uxth	r3, r3
 800954c:	4318      	orrs	r0, r3
 800954e:	f8ad 0004 	strh.w	r0, [sp, #4]
				event->base.EventCount = (uint16_t)eventCounter;
 8009552:	f8ad 2006 	strh.w	r2, [sp, #6]
				event->base.TS = prvGetTimestamp32();
 8009556:	f7ff fda3 	bl	80090a0 <prvGetTimestamp32>
 800955a:	9002      	str	r0, [sp, #8]
				if (userEvtChannel != NULL)
 800955c:	f1b9 0f00 	cmp.w	r9, #0
 8009560:	d001      	beq.n	8009566 <prvTraceStoreSimpleStringEventHelper+0x9a>
					data32[0] = (uint32_t)userEvtChannel;
 8009562:	f8cd 900c 	str.w	r9, [sp, #12]
		nWords = 15;
 8009566:	2300      	movs	r3, #0
 8009568:	e004      	b.n	8009574 <prvTraceStoreSimpleStringEventHelper+0xa8>
					data8[offset + i] = str[i];
 800956a:	199a      	adds	r2, r3, r6
 800956c:	5ce8      	ldrb	r0, [r5, r3]
 800956e:	a903      	add	r1, sp, #12
 8009570:	5488      	strb	r0, [r1, r2]
				for (i = 0; i < len; i++)
 8009572:	3301      	adds	r3, #1
 8009574:	429c      	cmp	r4, r3
 8009576:	dcf8      	bgt.n	800956a <prvTraceStoreSimpleStringEventHelper+0x9e>
				if (len < (15 * 4 - offset))
 8009578:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
 800957c:	42a3      	cmp	r3, r4
 800957e:	dd03      	ble.n	8009588 <prvTraceStoreSimpleStringEventHelper+0xbc>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 8009580:	4434      	add	r4, r6
 8009582:	ab03      	add	r3, sp, #12
 8009584:	2200      	movs	r2, #0
 8009586:	551a      	strb	r2, [r3, r4]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8009588:	aa12      	add	r2, sp, #72	; 0x48
 800958a:	2300      	movs	r3, #0
 800958c:	f842 3d48 	str.w	r3, [r2, #-72]!
 8009590:	4641      	mov	r1, r8
 8009592:	a801      	add	r0, sp, #4
 8009594:	f7ff fd36 	bl	8009004 <writeToRTT>
 8009598:	2800      	cmp	r0, #0
 800959a:	d0c3      	beq.n	8009524 <prvTraceStoreSimpleStringEventHelper+0x58>
 800959c:	f7ff feca 	bl	8009334 <vTraceStop>
 80095a0:	e7c0      	b.n	8009524 <prvTraceStoreSimpleStringEventHelper+0x58>
 80095a2:	bf00      	nop
 80095a4:	20004400 	.word	0x20004400
 80095a8:	2000440c 	.word	0x2000440c
 80095ac:	20004418 	.word	0x20004418

080095b0 <prvTraceWarning>:
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 80095b0:	1e42      	subs	r2, r0, #1
 80095b2:	2301      	movs	r3, #1
 80095b4:	4093      	lsls	r3, r2
 80095b6:	4a09      	ldr	r2, [pc, #36]	; (80095dc <prvTraceWarning+0x2c>)
 80095b8:	6812      	ldr	r2, [r2, #0]
 80095ba:	4213      	tst	r3, r2
 80095bc:	d000      	beq.n	80095c0 <prvTraceWarning+0x10>
 80095be:	4770      	bx	lr
{
 80095c0:	b510      	push	{r4, lr}
		SET_ERROR_WARNING_FLAG(errCode);
 80095c2:	4313      	orrs	r3, r2
 80095c4:	4a05      	ldr	r2, [pc, #20]	; (80095dc <prvTraceWarning+0x2c>)
 80095c6:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <prvTraceWarning+0x30>)
 80095ca:	681c      	ldr	r4, [r3, #0]
 80095cc:	f7ff fd26 	bl	800901c <prvTraceGetError>
 80095d0:	4602      	mov	r2, r0
 80095d2:	4621      	mov	r1, r4
 80095d4:	2090      	movs	r0, #144	; 0x90
 80095d6:	f7ff ff79 	bl	80094cc <prvTraceStoreSimpleStringEventHelper>
}
 80095da:	bd10      	pop	{r4, pc}
 80095dc:	200043f8 	.word	0x200043f8
 80095e0:	20006638 	.word	0x20006638

080095e4 <prvTraceStoreHeader>:
{
 80095e4:	b530      	push	{r4, r5, lr}
 80095e6:	b089      	sub	sp, #36	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095e8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ec:	2301      	movs	r3, #1
 80095ee:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 80095f2:	4b18      	ldr	r3, [pc, #96]	; (8009654 <prvTraceStoreHeader+0x70>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	b323      	cbz	r3, 8009642 <prvTraceStoreHeader+0x5e>
		header->psf = PSFEndianessIdentifier;
 80095f8:	4b17      	ldr	r3, [pc, #92]	; (8009658 <prvTraceStoreHeader+0x74>)
 80095fa:	9302      	str	r3, [sp, #8]
		header->version = FormatVersion;
 80095fc:	2306      	movs	r3, #6
 80095fe:	f8ad 300c 	strh.w	r3, [sp, #12]
		header->platform = TRACE_KERNEL_VERSION;
 8009602:	f641 23a1 	movw	r3, #6817	; 0x1aa1
 8009606:	f8ad 300e 	strh.w	r3, [sp, #14]
		header->options = 0;
 800960a:	2400      	movs	r4, #0
 800960c:	9404      	str	r4, [sp, #16]
		header->heapCounter = trcHeapCounter;
 800960e:	4b13      	ldr	r3, [pc, #76]	; (800965c <prvTraceStoreHeader+0x78>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	9305      	str	r3, [sp, #20]
		header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 8009614:	2320      	movs	r3, #32
 8009616:	f8ad 3018 	strh.w	r3, [sp, #24]
		header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 800961a:	2328      	movs	r3, #40	; 0x28
 800961c:	f8ad 301a 	strh.w	r3, [sp, #26]
		header->objectDataSize = 8;
 8009620:	2208      	movs	r2, #8
 8009622:	f8ad 201c 	strh.w	r2, [sp, #28]
		header->objectDataCount = (TRC_CFG_OBJECT_DATA_SLOTS);
 8009626:	f8ad 301e 	strh.w	r3, [sp, #30]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 800962a:	9401      	str	r4, [sp, #4]
 800962c:	e000      	b.n	8009630 <prvTraceStoreHeader+0x4c>
 800962e:	3401      	adds	r4, #1
 8009630:	aa01      	add	r2, sp, #4
 8009632:	2118      	movs	r1, #24
 8009634:	a802      	add	r0, sp, #8
 8009636:	f7ff fce5 	bl	8009004 <writeToRTT>
 800963a:	2800      	cmp	r0, #0
 800963c:	d1f7      	bne.n	800962e <prvTraceStoreHeader+0x4a>
 800963e:	2c00      	cmp	r4, #0
 8009640:	dc03      	bgt.n	800964a <prvTraceStoreHeader+0x66>
 8009642:	f385 8810 	msr	PRIMASK, r5
}
 8009646:	b009      	add	sp, #36	; 0x24
 8009648:	bd30      	pop	{r4, r5, pc}
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 800964a:	200c      	movs	r0, #12
 800964c:	f7ff ffb0 	bl	80095b0 <prvTraceWarning>
 8009650:	e7f7      	b.n	8009642 <prvTraceStoreHeader+0x5e>
 8009652:	bf00      	nop
 8009654:	2000440c 	.word	0x2000440c
 8009658:	50534600 	.word	0x50534600
 800965c:	20004a68 	.word	0x20004a68

08009660 <prvTraceStoreSymbolTable>:
{
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	b08a      	sub	sp, #40	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009664:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009668:	2301      	movs	r3, #1
 800966a:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 800966e:	4b15      	ldr	r3, [pc, #84]	; (80096c4 <prvTraceStoreSymbolTable+0x64>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	b313      	cbz	r3, 80096ba <prvTraceStoreSymbolTable+0x5a>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 8009674:	2500      	movs	r5, #0
 8009676:	e017      	b.n	80096a8 <prvTraceStoreSymbolTable+0x48>
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8009678:	18e9      	adds	r1, r5, r3
 800967a:	4a13      	ldr	r2, [pc, #76]	; (80096c8 <prvTraceStoreSymbolTable+0x68>)
 800967c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8009680:	aa02      	add	r2, sp, #8
 8009682:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 8009686:	3301      	adds	r3, #1
 8009688:	2b07      	cmp	r3, #7
 800968a:	d9f5      	bls.n	8009678 <prvTraceStoreSymbolTable+0x18>
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 800968c:	2400      	movs	r4, #0
 800968e:	9401      	str	r4, [sp, #4]
 8009690:	e000      	b.n	8009694 <prvTraceStoreSymbolTable+0x34>
 8009692:	3401      	adds	r4, #1
 8009694:	aa01      	add	r2, sp, #4
 8009696:	2120      	movs	r1, #32
 8009698:	a802      	add	r0, sp, #8
 800969a:	f7ff fcb3 	bl	8009004 <writeToRTT>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d1f7      	bne.n	8009692 <prvTraceStoreSymbolTable+0x32>
 80096a2:	2c00      	cmp	r4, #0
 80096a4:	dc05      	bgt.n	80096b2 <prvTraceStoreSymbolTable+0x52>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 80096a6:	3508      	adds	r5, #8
 80096a8:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 80096ac:	d205      	bcs.n	80096ba <prvTraceStoreSymbolTable+0x5a>
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 80096ae:	2300      	movs	r3, #0
 80096b0:	e7ea      	b.n	8009688 <prvTraceStoreSymbolTable+0x28>
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 80096b2:	200c      	movs	r0, #12
 80096b4:	f7ff ff7c 	bl	80095b0 <prvTraceWarning>
 80096b8:	e7f5      	b.n	80096a6 <prvTraceStoreSymbolTable+0x46>
 80096ba:	f386 8810 	msr	PRIMASK, r6
}
 80096be:	b00a      	add	sp, #40	; 0x28
 80096c0:	bd70      	pop	{r4, r5, r6, pc}
 80096c2:	bf00      	nop
 80096c4:	2000440c 	.word	0x2000440c
 80096c8:	20004564 	.word	0x20004564

080096cc <prvTraceStoreObjectDataTable>:
{
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096d0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096d4:	2301      	movs	r3, #1
 80096d6:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 80096da:	4b15      	ldr	r3, [pc, #84]	; (8009730 <prvTraceStoreObjectDataTable+0x64>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	b313      	cbz	r3, 8009726 <prvTraceStoreObjectDataTable+0x5a>
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 80096e0:	2500      	movs	r5, #0
 80096e2:	e018      	b.n	8009716 <prvTraceStoreObjectDataTable+0x4a>
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 80096e4:	18e9      	adds	r1, r5, r3
 80096e6:	4a13      	ldr	r2, [pc, #76]	; (8009734 <prvTraceStoreObjectDataTable+0x68>)
 80096e8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80096ec:	aa02      	add	r2, sp, #8
 80096ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
 80096f2:	3301      	adds	r3, #1
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d9f5      	bls.n	80096e4 <prvTraceStoreObjectDataTable+0x18>
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 80096f8:	2400      	movs	r4, #0
 80096fa:	9401      	str	r4, [sp, #4]
 80096fc:	e000      	b.n	8009700 <prvTraceStoreObjectDataTable+0x34>
 80096fe:	3401      	adds	r4, #1
 8009700:	aa01      	add	r2, sp, #4
 8009702:	2108      	movs	r1, #8
 8009704:	eb0d 0001 	add.w	r0, sp, r1
 8009708:	f7ff fc7c 	bl	8009004 <writeToRTT>
 800970c:	2800      	cmp	r0, #0
 800970e:	d1f6      	bne.n	80096fe <prvTraceStoreObjectDataTable+0x32>
 8009710:	2c00      	cmp	r4, #0
 8009712:	dc04      	bgt.n	800971e <prvTraceStoreObjectDataTable+0x52>
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8009714:	3502      	adds	r5, #2
 8009716:	2d4f      	cmp	r5, #79	; 0x4f
 8009718:	d805      	bhi.n	8009726 <prvTraceStoreObjectDataTable+0x5a>
            for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
 800971a:	2300      	movs	r3, #0
 800971c:	e7ea      	b.n	80096f4 <prvTraceStoreObjectDataTable+0x28>
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 800971e:	200c      	movs	r0, #12
 8009720:	f7ff ff46 	bl	80095b0 <prvTraceWarning>
 8009724:	e7f6      	b.n	8009714 <prvTraceStoreObjectDataTable+0x48>
 8009726:	f386 8810 	msr	PRIMASK, r6
}
 800972a:	b004      	add	sp, #16
 800972c:	bd70      	pop	{r4, r5, r6, pc}
 800972e:	bf00      	nop
 8009730:	2000440c 	.word	0x2000440c
 8009734:	20004424 	.word	0x20004424

08009738 <prvTraceStoreExtensionInfo>:
{
 8009738:	b530      	push	{r4, r5, lr}
 800973a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800973c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009740:	2301      	movs	r3, #1
 8009742:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 8009746:	4b0d      	ldr	r3, [pc, #52]	; (800977c <prvTraceStoreExtensionInfo+0x44>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	b17b      	cbz	r3, 800976c <prvTraceStoreExtensionInfo+0x34>
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 800974c:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <prvTraceStoreExtensionInfo+0x48>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	9300      	str	r3, [sp, #0]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8009752:	2400      	movs	r4, #0
 8009754:	9401      	str	r4, [sp, #4]
 8009756:	e000      	b.n	800975a <prvTraceStoreExtensionInfo+0x22>
 8009758:	3401      	adds	r4, #1
 800975a:	aa01      	add	r2, sp, #4
 800975c:	2104      	movs	r1, #4
 800975e:	4668      	mov	r0, sp
 8009760:	f7ff fc50 	bl	8009004 <writeToRTT>
 8009764:	2800      	cmp	r0, #0
 8009766:	d1f7      	bne.n	8009758 <prvTraceStoreExtensionInfo+0x20>
 8009768:	2c00      	cmp	r4, #0
 800976a:	dc03      	bgt.n	8009774 <prvTraceStoreExtensionInfo+0x3c>
 800976c:	f385 8810 	msr	PRIMASK, r5
}
 8009770:	b003      	add	sp, #12
 8009772:	bd30      	pop	{r4, r5, pc}
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8009774:	200c      	movs	r0, #12
 8009776:	f7ff ff1b 	bl	80095b0 <prvTraceWarning>
 800977a:	e7f7      	b.n	800976c <prvTraceStoreExtensionInfo+0x34>
 800977c:	2000440c 	.word	0x2000440c
 8009780:	2000007c 	.word	0x2000007c

08009784 <prvTraceStoreEvent1>:
{
 8009784:	b530      	push	{r4, r5, lr}
 8009786:	b085      	sub	sp, #20
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8009788:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800978c:	d20c      	bcs.n	80097a8 <prvTraceStoreEvent1+0x24>
 800978e:	460d      	mov	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009790:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009794:	2301      	movs	r3, #1
 8009796:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 800979a:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <prvTraceStoreEvent1+0x64>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	b93b      	cbnz	r3, 80097b0 <prvTraceStoreEvent1+0x2c>
 80097a0:	f384 8810 	msr	PRIMASK, r4
}
 80097a4:	b005      	add	sp, #20
 80097a6:	bd30      	pop	{r4, r5, pc}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80097a8:	2001      	movs	r0, #1
 80097aa:	f7ff fceb 	bl	8009184 <prvTraceError>
 80097ae:	e7f9      	b.n	80097a4 <prvTraceStoreEvent1+0x20>
		eventCounter++;
 80097b0:	4a0e      	ldr	r2, [pc, #56]	; (80097ec <prvTraceStoreEvent1+0x68>)
 80097b2:	6813      	ldr	r3, [r2, #0]
 80097b4:	3301      	adds	r3, #1
 80097b6:	6013      	str	r3, [r2, #0]
				event->base.EventID = eventID | PARAM_COUNT(1);
 80097b8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80097bc:	f8ad 0004 	strh.w	r0, [sp, #4]
				event->base.EventCount = (uint16_t)eventCounter;
 80097c0:	f8ad 3006 	strh.w	r3, [sp, #6]
				event->base.TS = prvGetTimestamp32();
 80097c4:	f7ff fc6c 	bl	80090a0 <prvGetTimestamp32>
 80097c8:	9002      	str	r0, [sp, #8]
				event->param1 = (uint32_t)param1;
 80097ca:	9503      	str	r5, [sp, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 80097cc:	aa04      	add	r2, sp, #16
 80097ce:	2300      	movs	r3, #0
 80097d0:	f842 3d10 	str.w	r3, [r2, #-16]!
 80097d4:	210c      	movs	r1, #12
 80097d6:	a801      	add	r0, sp, #4
 80097d8:	f7ff fc14 	bl	8009004 <writeToRTT>
 80097dc:	2800      	cmp	r0, #0
 80097de:	d0df      	beq.n	80097a0 <prvTraceStoreEvent1+0x1c>
 80097e0:	f7ff fda8 	bl	8009334 <vTraceStop>
 80097e4:	e7dc      	b.n	80097a0 <prvTraceStoreEvent1+0x1c>
 80097e6:	bf00      	nop
 80097e8:	2000440c 	.word	0x2000440c
 80097ec:	20004418 	.word	0x20004418

080097f0 <prvTraceStoreEvent2>:
{
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	b086      	sub	sp, #24
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80097f4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80097f8:	d20d      	bcs.n	8009816 <prvTraceStoreEvent2+0x26>
 80097fa:	460e      	mov	r6, r1
 80097fc:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097fe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009802:	2301      	movs	r3, #1
 8009804:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 8009808:	4b13      	ldr	r3, [pc, #76]	; (8009858 <prvTraceStoreEvent2+0x68>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	b93b      	cbnz	r3, 800981e <prvTraceStoreEvent2+0x2e>
 800980e:	f384 8810 	msr	PRIMASK, r4
}
 8009812:	b006      	add	sp, #24
 8009814:	bd70      	pop	{r4, r5, r6, pc}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8009816:	2001      	movs	r0, #1
 8009818:	f7ff fcb4 	bl	8009184 <prvTraceError>
 800981c:	e7f9      	b.n	8009812 <prvTraceStoreEvent2+0x22>
		eventCounter++;
 800981e:	4a0f      	ldr	r2, [pc, #60]	; (800985c <prvTraceStoreEvent2+0x6c>)
 8009820:	6813      	ldr	r3, [r2, #0]
 8009822:	3301      	adds	r3, #1
 8009824:	6013      	str	r3, [r2, #0]
				event->base.EventID = eventID | PARAM_COUNT(2);
 8009826:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800982a:	f8ad 0008 	strh.w	r0, [sp, #8]
				event->base.EventCount = (uint16_t)eventCounter;
 800982e:	f8ad 300a 	strh.w	r3, [sp, #10]
				event->base.TS = prvGetTimestamp32();
 8009832:	f7ff fc35 	bl	80090a0 <prvGetTimestamp32>
 8009836:	9003      	str	r0, [sp, #12]
				event->param1 = (uint32_t)param1;
 8009838:	9604      	str	r6, [sp, #16]
				event->param2 = param2;
 800983a:	9505      	str	r5, [sp, #20]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 800983c:	aa06      	add	r2, sp, #24
 800983e:	2300      	movs	r3, #0
 8009840:	f842 3d14 	str.w	r3, [r2, #-20]!
 8009844:	2110      	movs	r1, #16
 8009846:	a802      	add	r0, sp, #8
 8009848:	f7ff fbdc 	bl	8009004 <writeToRTT>
 800984c:	2800      	cmp	r0, #0
 800984e:	d0de      	beq.n	800980e <prvTraceStoreEvent2+0x1e>
 8009850:	f7ff fd70 	bl	8009334 <vTraceStop>
 8009854:	e7db      	b.n	800980e <prvTraceStoreEvent2+0x1e>
 8009856:	bf00      	nop
 8009858:	2000440c 	.word	0x2000440c
 800985c:	20004418 	.word	0x20004418

08009860 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8009860:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8009862:	480a      	ldr	r0, [pc, #40]	; (800988c <MX_USART6_UART_Init+0x2c>)
 8009864:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <MX_USART6_UART_Init+0x30>)
 8009866:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8009868:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800986c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800986e:	2300      	movs	r3, #0
 8009870:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009872:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009874:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX;
 8009876:	2208      	movs	r2, #8
 8009878:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800987a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800987c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800987e:	f7fc f802 	bl	8005886 <HAL_UART_Init>
 8009882:	b900      	cbnz	r0, 8009886 <MX_USART6_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8009884:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009886:	f7ff f8f1 	bl	8008a6c <Error_Handler>
}
 800988a:	e7fb      	b.n	8009884 <MX_USART6_UART_Init+0x24>
 800988c:	2000663c 	.word	0x2000663c
 8009890:	40011400 	.word	0x40011400

08009894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009894:	b530      	push	{r4, r5, lr}
 8009896:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009898:	2300      	movs	r3, #0
 800989a:	9303      	str	r3, [sp, #12]
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	9305      	str	r3, [sp, #20]
 80098a0:	9306      	str	r3, [sp, #24]
 80098a2:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 80098a4:	6802      	ldr	r2, [r0, #0]
 80098a6:	4b1c      	ldr	r3, [pc, #112]	; (8009918 <HAL_UART_MspInit+0x84>)
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d001      	beq.n	80098b0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART6_MspInit 1 */
    // Enable RX idle interrupt, which we use to handle variable-length messages
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
  /* USER CODE END USART6_MspInit 1 */
  }
}
 80098ac:	b009      	add	sp, #36	; 0x24
 80098ae:	bd30      	pop	{r4, r5, pc}
 80098b0:	4604      	mov	r4, r0
    __HAL_RCC_USART6_CLK_ENABLE();
 80098b2:	2500      	movs	r5, #0
 80098b4:	9501      	str	r5, [sp, #4]
 80098b6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80098ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098bc:	f042 0220 	orr.w	r2, r2, #32
 80098c0:	645a      	str	r2, [r3, #68]	; 0x44
 80098c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098c4:	f002 0220 	and.w	r2, r2, #32
 80098c8:	9201      	str	r2, [sp, #4]
 80098ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098cc:	9502      	str	r5, [sp, #8]
 80098ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098d0:	f042 0204 	orr.w	r2, r2, #4
 80098d4:	631a      	str	r2, [r3, #48]	; 0x30
 80098d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d8:	f003 0304 	and.w	r3, r3, #4
 80098dc:	9302      	str	r3, [sp, #8]
 80098de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80098e0:	23c0      	movs	r3, #192	; 0xc0
 80098e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098e4:	2302      	movs	r3, #2
 80098e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80098e8:	2301      	movs	r3, #1
 80098ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098ec:	2303      	movs	r3, #3
 80098ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80098f0:	2308      	movs	r3, #8
 80098f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098f4:	a903      	add	r1, sp, #12
 80098f6:	4809      	ldr	r0, [pc, #36]	; (800991c <HAL_UART_MspInit+0x88>)
 80098f8:	f7f9 fd3c 	bl	8003374 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80098fc:	462a      	mov	r2, r5
 80098fe:	2106      	movs	r1, #6
 8009900:	2047      	movs	r0, #71	; 0x47
 8009902:	f7f9 fba5 	bl	8003050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8009906:	2047      	movs	r0, #71	; 0x47
 8009908:	f7f9 fbd6 	bl	80030b8 <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
 800990c:	6822      	ldr	r2, [r4, #0]
 800990e:	68d3      	ldr	r3, [r2, #12]
 8009910:	f043 0310 	orr.w	r3, r3, #16
 8009914:	60d3      	str	r3, [r2, #12]
}
 8009916:	e7c9      	b.n	80098ac <HAL_UART_MspInit+0x18>
 8009918:	40011400 	.word	0x40011400
 800991c:	40020800 	.word	0x40020800

08009920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009958 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009924:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009926:	e003      	b.n	8009930 <LoopCopyDataInit>

08009928 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009928:	4b0c      	ldr	r3, [pc, #48]	; (800995c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800992a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800992c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800992e:	3104      	adds	r1, #4

08009930 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009930:	480b      	ldr	r0, [pc, #44]	; (8009960 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009932:	4b0c      	ldr	r3, [pc, #48]	; (8009964 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009934:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009936:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009938:	d3f6      	bcc.n	8009928 <CopyDataInit>
  ldr  r2, =_sbss
 800993a:	4a0b      	ldr	r2, [pc, #44]	; (8009968 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800993c:	e002      	b.n	8009944 <LoopFillZerobss>

0800993e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800993e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009940:	f842 3b04 	str.w	r3, [r2], #4

08009944 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009944:	4b09      	ldr	r3, [pc, #36]	; (800996c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009946:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009948:	d3f9      	bcc.n	800993e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800994a:	f7ff f9db 	bl	8008d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800994e:	f001 fbdd 	bl	800b10c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009952:	f7ff f865 	bl	8008a20 <main>
  bx  lr    
 8009956:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009958:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800995c:	08010150 	.word	0x08010150
  ldr  r0, =_sdata
 8009960:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009964:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 8009968:	20000258 	.word	0x20000258
  ldr  r3, = _ebss
 800996c:	20006680 	.word	0x20006680

08009970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009970:	e7fe      	b.n	8009970 <ADC_IRQHandler>
	...

08009974 <round>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	ec57 6b10 	vmov	r6, r7, d0
 800997a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800997e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8009982:	2c13      	cmp	r4, #19
 8009984:	463b      	mov	r3, r7
 8009986:	463d      	mov	r5, r7
 8009988:	dc17      	bgt.n	80099ba <round+0x46>
 800998a:	2c00      	cmp	r4, #0
 800998c:	da09      	bge.n	80099a2 <round+0x2e>
 800998e:	3401      	adds	r4, #1
 8009990:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8009994:	d103      	bne.n	800999e <round+0x2a>
 8009996:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800999a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800999e:	2100      	movs	r1, #0
 80099a0:	e02c      	b.n	80099fc <round+0x88>
 80099a2:	4a18      	ldr	r2, [pc, #96]	; (8009a04 <round+0x90>)
 80099a4:	4122      	asrs	r2, r4
 80099a6:	4217      	tst	r7, r2
 80099a8:	d100      	bne.n	80099ac <round+0x38>
 80099aa:	b19e      	cbz	r6, 80099d4 <round+0x60>
 80099ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099b0:	4123      	asrs	r3, r4
 80099b2:	442b      	add	r3, r5
 80099b4:	ea23 0302 	bic.w	r3, r3, r2
 80099b8:	e7f1      	b.n	800999e <round+0x2a>
 80099ba:	2c33      	cmp	r4, #51	; 0x33
 80099bc:	dd0d      	ble.n	80099da <round+0x66>
 80099be:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80099c2:	d107      	bne.n	80099d4 <round+0x60>
 80099c4:	4630      	mov	r0, r6
 80099c6:	4639      	mov	r1, r7
 80099c8:	ee10 2a10 	vmov	r2, s0
 80099cc:	f7f6 fc66 	bl	800029c <__adddf3>
 80099d0:	4606      	mov	r6, r0
 80099d2:	460f      	mov	r7, r1
 80099d4:	ec47 6b10 	vmov	d0, r6, r7
 80099d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099da:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80099de:	f04f 30ff 	mov.w	r0, #4294967295
 80099e2:	40d0      	lsrs	r0, r2
 80099e4:	4206      	tst	r6, r0
 80099e6:	d0f5      	beq.n	80099d4 <round+0x60>
 80099e8:	2201      	movs	r2, #1
 80099ea:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80099ee:	fa02 f404 	lsl.w	r4, r2, r4
 80099f2:	1931      	adds	r1, r6, r4
 80099f4:	bf28      	it	cs
 80099f6:	189b      	addcs	r3, r3, r2
 80099f8:	ea21 0100 	bic.w	r1, r1, r0
 80099fc:	461f      	mov	r7, r3
 80099fe:	460e      	mov	r6, r1
 8009a00:	e7e8      	b.n	80099d4 <round+0x60>
 8009a02:	bf00      	nop
 8009a04:	000fffff 	.word	0x000fffff

08009a08 <pow>:
 8009a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	ed2d 8b04 	vpush	{d8-d9}
 8009a10:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009ce4 <pow+0x2dc>
 8009a14:	b08d      	sub	sp, #52	; 0x34
 8009a16:	ec57 6b10 	vmov	r6, r7, d0
 8009a1a:	ec55 4b11 	vmov	r4, r5, d1
 8009a1e:	f000 fa17 	bl	8009e50 <__ieee754_pow>
 8009a22:	f999 3000 	ldrsb.w	r3, [r9]
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	eeb0 8a40 	vmov.f32	s16, s0
 8009a2e:	eef0 8a60 	vmov.f32	s17, s1
 8009a32:	46c8      	mov	r8, r9
 8009a34:	d05f      	beq.n	8009af6 <pow+0xee>
 8009a36:	4622      	mov	r2, r4
 8009a38:	462b      	mov	r3, r5
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	f7f7 f87d 	bl	8000b3c <__aeabi_dcmpun>
 8009a42:	4683      	mov	fp, r0
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d156      	bne.n	8009af6 <pow+0xee>
 8009a48:	4632      	mov	r2, r6
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f7f7 f874 	bl	8000b3c <__aeabi_dcmpun>
 8009a54:	9001      	str	r0, [sp, #4]
 8009a56:	b1e8      	cbz	r0, 8009a94 <pow+0x8c>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f7 f83a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d046      	beq.n	8009af6 <pow+0xee>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	9302      	str	r3, [sp, #8]
 8009a6c:	4b96      	ldr	r3, [pc, #600]	; (8009cc8 <pow+0x2c0>)
 8009a6e:	9303      	str	r3, [sp, #12]
 8009a70:	4b96      	ldr	r3, [pc, #600]	; (8009ccc <pow+0x2c4>)
 8009a72:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009a76:	2200      	movs	r2, #0
 8009a78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a7c:	9b00      	ldr	r3, [sp, #0]
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a84:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009a88:	d033      	beq.n	8009af2 <pow+0xea>
 8009a8a:	a802      	add	r0, sp, #8
 8009a8c:	f001 f948 	bl	800ad20 <matherr>
 8009a90:	bb48      	cbnz	r0, 8009ae6 <pow+0xde>
 8009a92:	e05d      	b.n	8009b50 <pow+0x148>
 8009a94:	f04f 0a00 	mov.w	sl, #0
 8009a98:	f04f 0b00 	mov.w	fp, #0
 8009a9c:	4652      	mov	r2, sl
 8009a9e:	465b      	mov	r3, fp
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	f7f7 f818 	bl	8000ad8 <__aeabi_dcmpeq>
 8009aa8:	ec4b ab19 	vmov	d9, sl, fp
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d054      	beq.n	8009b5a <pow+0x152>
 8009ab0:	4652      	mov	r2, sl
 8009ab2:	465b      	mov	r3, fp
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	f7f7 f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009abc:	4680      	mov	r8, r0
 8009abe:	b318      	cbz	r0, 8009b08 <pow+0x100>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	9302      	str	r3, [sp, #8]
 8009ac4:	4b80      	ldr	r3, [pc, #512]	; (8009cc8 <pow+0x2c0>)
 8009ac6:	9303      	str	r3, [sp, #12]
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	930a      	str	r3, [sp, #40]	; 0x28
 8009acc:	9b00      	ldr	r3, [sp, #0]
 8009ace:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009ad2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009ad6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0d5      	beq.n	8009a8a <pow+0x82>
 8009ade:	4b7b      	ldr	r3, [pc, #492]	; (8009ccc <pow+0x2c4>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ae8:	b11b      	cbz	r3, 8009af2 <pow+0xea>
 8009aea:	f001 fb09 	bl	800b100 <__errno>
 8009aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af0:	6003      	str	r3, [r0, #0]
 8009af2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009af6:	eeb0 0a48 	vmov.f32	s0, s16
 8009afa:	eef0 0a68 	vmov.f32	s1, s17
 8009afe:	b00d      	add	sp, #52	; 0x34
 8009b00:	ecbd 8b04 	vpop	{d8-d9}
 8009b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b08:	ec45 4b10 	vmov	d0, r4, r5
 8009b0c:	f001 f900 	bl	800ad10 <finite>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d0f0      	beq.n	8009af6 <pow+0xee>
 8009b14:	4652      	mov	r2, sl
 8009b16:	465b      	mov	r3, fp
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f7f6 ffe6 	bl	8000aec <__aeabi_dcmplt>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d0e8      	beq.n	8009af6 <pow+0xee>
 8009b24:	2301      	movs	r3, #1
 8009b26:	9302      	str	r3, [sp, #8]
 8009b28:	4b67      	ldr	r3, [pc, #412]	; (8009cc8 <pow+0x2c0>)
 8009b2a:	9303      	str	r3, [sp, #12]
 8009b2c:	f999 3000 	ldrsb.w	r3, [r9]
 8009b30:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009b34:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b38:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009b3c:	b913      	cbnz	r3, 8009b44 <pow+0x13c>
 8009b3e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009b42:	e7a2      	b.n	8009a8a <pow+0x82>
 8009b44:	4962      	ldr	r1, [pc, #392]	; (8009cd0 <pow+0x2c8>)
 8009b46:	2000      	movs	r0, #0
 8009b48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d19c      	bne.n	8009a8a <pow+0x82>
 8009b50:	f001 fad6 	bl	800b100 <__errno>
 8009b54:	2321      	movs	r3, #33	; 0x21
 8009b56:	6003      	str	r3, [r0, #0]
 8009b58:	e7c5      	b.n	8009ae6 <pow+0xde>
 8009b5a:	eeb0 0a48 	vmov.f32	s0, s16
 8009b5e:	eef0 0a68 	vmov.f32	s1, s17
 8009b62:	f001 f8d5 	bl	800ad10 <finite>
 8009b66:	9000      	str	r0, [sp, #0]
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f040 8081 	bne.w	8009c70 <pow+0x268>
 8009b6e:	ec47 6b10 	vmov	d0, r6, r7
 8009b72:	f001 f8cd 	bl	800ad10 <finite>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d07a      	beq.n	8009c70 <pow+0x268>
 8009b7a:	ec45 4b10 	vmov	d0, r4, r5
 8009b7e:	f001 f8c7 	bl	800ad10 <finite>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d074      	beq.n	8009c70 <pow+0x268>
 8009b86:	ec53 2b18 	vmov	r2, r3, d8
 8009b8a:	ee18 0a10 	vmov	r0, s16
 8009b8e:	4619      	mov	r1, r3
 8009b90:	f7f6 ffd4 	bl	8000b3c <__aeabi_dcmpun>
 8009b94:	f999 9000 	ldrsb.w	r9, [r9]
 8009b98:	4b4b      	ldr	r3, [pc, #300]	; (8009cc8 <pow+0x2c0>)
 8009b9a:	b1b0      	cbz	r0, 8009bca <pow+0x1c2>
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ba2:	9b00      	ldr	r3, [sp, #0]
 8009ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ba6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009baa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009bae:	f1b9 0f00 	cmp.w	r9, #0
 8009bb2:	d0c4      	beq.n	8009b3e <pow+0x136>
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	465b      	mov	r3, fp
 8009bb8:	4650      	mov	r0, sl
 8009bba:	4659      	mov	r1, fp
 8009bbc:	f7f6 fe4e 	bl	800085c <__aeabi_ddiv>
 8009bc0:	f1b9 0f02 	cmp.w	r9, #2
 8009bc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009bc8:	e7c1      	b.n	8009b4e <pow+0x146>
 8009bca:	2203      	movs	r2, #3
 8009bcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bd0:	900a      	str	r0, [sp, #40]	; 0x28
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	4b3e      	ldr	r3, [pc, #248]	; (8009cd4 <pow+0x2cc>)
 8009bda:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009bde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009be2:	f7f6 fd11 	bl	8000608 <__aeabi_dmul>
 8009be6:	4604      	mov	r4, r0
 8009be8:	460d      	mov	r5, r1
 8009bea:	f1b9 0f00 	cmp.w	r9, #0
 8009bee:	d124      	bne.n	8009c3a <pow+0x232>
 8009bf0:	4b39      	ldr	r3, [pc, #228]	; (8009cd8 <pow+0x2d0>)
 8009bf2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009bf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	465b      	mov	r3, fp
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 ff73 	bl	8000aec <__aeabi_dcmplt>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d056      	beq.n	8009cb8 <pow+0x2b0>
 8009c0a:	ec45 4b10 	vmov	d0, r4, r5
 8009c0e:	f001 f893 	bl	800ad38 <rint>
 8009c12:	4622      	mov	r2, r4
 8009c14:	462b      	mov	r3, r5
 8009c16:	ec51 0b10 	vmov	r0, r1, d0
 8009c1a:	f7f6 ff5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c1e:	b920      	cbnz	r0, 8009c2a <pow+0x222>
 8009c20:	4b2e      	ldr	r3, [pc, #184]	; (8009cdc <pow+0x2d4>)
 8009c22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009c26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c2a:	f998 3000 	ldrsb.w	r3, [r8]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d142      	bne.n	8009cb8 <pow+0x2b0>
 8009c32:	f001 fa65 	bl	800b100 <__errno>
 8009c36:	2322      	movs	r3, #34	; 0x22
 8009c38:	e78d      	b.n	8009b56 <pow+0x14e>
 8009c3a:	4b29      	ldr	r3, [pc, #164]	; (8009ce0 <pow+0x2d8>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c42:	4630      	mov	r0, r6
 8009c44:	4652      	mov	r2, sl
 8009c46:	465b      	mov	r3, fp
 8009c48:	4639      	mov	r1, r7
 8009c4a:	f7f6 ff4f 	bl	8000aec <__aeabi_dcmplt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d0eb      	beq.n	8009c2a <pow+0x222>
 8009c52:	ec45 4b10 	vmov	d0, r4, r5
 8009c56:	f001 f86f 	bl	800ad38 <rint>
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	ec51 0b10 	vmov	r0, r1, d0
 8009c62:	f7f6 ff39 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d1df      	bne.n	8009c2a <pow+0x222>
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4b18      	ldr	r3, [pc, #96]	; (8009cd0 <pow+0x2c8>)
 8009c6e:	e7da      	b.n	8009c26 <pow+0x21e>
 8009c70:	2200      	movs	r2, #0
 8009c72:	2300      	movs	r3, #0
 8009c74:	ec51 0b18 	vmov	r0, r1, d8
 8009c78:	f7f6 ff2e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	f43f af3a 	beq.w	8009af6 <pow+0xee>
 8009c82:	ec47 6b10 	vmov	d0, r6, r7
 8009c86:	f001 f843 	bl	800ad10 <finite>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	f43f af33 	beq.w	8009af6 <pow+0xee>
 8009c90:	ec45 4b10 	vmov	d0, r4, r5
 8009c94:	f001 f83c 	bl	800ad10 <finite>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	f43f af2c 	beq.w	8009af6 <pow+0xee>
 8009c9e:	2304      	movs	r3, #4
 8009ca0:	9302      	str	r3, [sp, #8]
 8009ca2:	4b09      	ldr	r3, [pc, #36]	; (8009cc8 <pow+0x2c0>)
 8009ca4:	9303      	str	r3, [sp, #12]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8009caa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009cae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009cb2:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009cb6:	e7b8      	b.n	8009c2a <pow+0x222>
 8009cb8:	a802      	add	r0, sp, #8
 8009cba:	f001 f831 	bl	800ad20 <matherr>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f47f af11 	bne.w	8009ae6 <pow+0xde>
 8009cc4:	e7b5      	b.n	8009c32 <pow+0x22a>
 8009cc6:	bf00      	nop
 8009cc8:	0800fdb4 	.word	0x0800fdb4
 8009ccc:	3ff00000 	.word	0x3ff00000
 8009cd0:	fff00000 	.word	0xfff00000
 8009cd4:	3fe00000 	.word	0x3fe00000
 8009cd8:	47efffff 	.word	0x47efffff
 8009cdc:	c7efffff 	.word	0xc7efffff
 8009ce0:	7ff00000 	.word	0x7ff00000
 8009ce4:	20000080 	.word	0x20000080

08009ce8 <sqrt>:
 8009ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cec:	ed2d 8b02 	vpush	{d8}
 8009cf0:	b08b      	sub	sp, #44	; 0x2c
 8009cf2:	ec55 4b10 	vmov	r4, r5, d0
 8009cf6:	f000 fdb9 	bl	800a86c <__ieee754_sqrt>
 8009cfa:	4b26      	ldr	r3, [pc, #152]	; (8009d94 <sqrt+0xac>)
 8009cfc:	eeb0 8a40 	vmov.f32	s16, s0
 8009d00:	eef0 8a60 	vmov.f32	s17, s1
 8009d04:	f993 6000 	ldrsb.w	r6, [r3]
 8009d08:	1c73      	adds	r3, r6, #1
 8009d0a:	d02a      	beq.n	8009d62 <sqrt+0x7a>
 8009d0c:	4622      	mov	r2, r4
 8009d0e:	462b      	mov	r3, r5
 8009d10:	4620      	mov	r0, r4
 8009d12:	4629      	mov	r1, r5
 8009d14:	f7f6 ff12 	bl	8000b3c <__aeabi_dcmpun>
 8009d18:	4607      	mov	r7, r0
 8009d1a:	bb10      	cbnz	r0, 8009d62 <sqrt+0x7a>
 8009d1c:	f04f 0800 	mov.w	r8, #0
 8009d20:	f04f 0900 	mov.w	r9, #0
 8009d24:	4642      	mov	r2, r8
 8009d26:	464b      	mov	r3, r9
 8009d28:	4620      	mov	r0, r4
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	f7f6 fede 	bl	8000aec <__aeabi_dcmplt>
 8009d30:	b1b8      	cbz	r0, 8009d62 <sqrt+0x7a>
 8009d32:	2301      	movs	r3, #1
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	4b18      	ldr	r3, [pc, #96]	; (8009d98 <sqrt+0xb0>)
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	9708      	str	r7, [sp, #32]
 8009d3c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009d40:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009d44:	b9b6      	cbnz	r6, 8009d74 <sqrt+0x8c>
 8009d46:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009d4a:	4668      	mov	r0, sp
 8009d4c:	f000 ffe8 	bl	800ad20 <matherr>
 8009d50:	b1d0      	cbz	r0, 8009d88 <sqrt+0xa0>
 8009d52:	9b08      	ldr	r3, [sp, #32]
 8009d54:	b11b      	cbz	r3, 8009d5e <sqrt+0x76>
 8009d56:	f001 f9d3 	bl	800b100 <__errno>
 8009d5a:	9b08      	ldr	r3, [sp, #32]
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009d62:	eeb0 0a48 	vmov.f32	s0, s16
 8009d66:	eef0 0a68 	vmov.f32	s1, s17
 8009d6a:	b00b      	add	sp, #44	; 0x2c
 8009d6c:	ecbd 8b02 	vpop	{d8}
 8009d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d74:	4642      	mov	r2, r8
 8009d76:	464b      	mov	r3, r9
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	f7f6 fd6e 	bl	800085c <__aeabi_ddiv>
 8009d80:	2e02      	cmp	r6, #2
 8009d82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d86:	d1e0      	bne.n	8009d4a <sqrt+0x62>
 8009d88:	f001 f9ba 	bl	800b100 <__errno>
 8009d8c:	2321      	movs	r3, #33	; 0x21
 8009d8e:	6003      	str	r3, [r0, #0]
 8009d90:	e7df      	b.n	8009d52 <sqrt+0x6a>
 8009d92:	bf00      	nop
 8009d94:	20000080 	.word	0x20000080
 8009d98:	0800fdb8 	.word	0x0800fdb8

08009d9c <asinf>:
 8009d9c:	b510      	push	{r4, lr}
 8009d9e:	ed2d 8b02 	vpush	{d8}
 8009da2:	4c27      	ldr	r4, [pc, #156]	; (8009e40 <asinf+0xa4>)
 8009da4:	b08a      	sub	sp, #40	; 0x28
 8009da6:	eeb0 8a40 	vmov.f32	s16, s0
 8009daa:	f000 fe0f 	bl	800a9cc <__ieee754_asinf>
 8009dae:	f994 3000 	ldrsb.w	r3, [r4]
 8009db2:	3301      	adds	r3, #1
 8009db4:	eef0 8a40 	vmov.f32	s17, s0
 8009db8:	d03c      	beq.n	8009e34 <asinf+0x98>
 8009dba:	eeb4 8a48 	vcmp.f32	s16, s16
 8009dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc2:	d637      	bvs.n	8009e34 <asinf+0x98>
 8009dc4:	eeb0 0a48 	vmov.f32	s0, s16
 8009dc8:	f001 f984 	bl	800b0d4 <fabsf>
 8009dcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009dd0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd8:	dd2c      	ble.n	8009e34 <asinf+0x98>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	4b19      	ldr	r3, [pc, #100]	; (8009e44 <asinf+0xa8>)
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	ee18 0a10 	vmov	r0, s16
 8009de6:	2300      	movs	r3, #0
 8009de8:	9308      	str	r3, [sp, #32]
 8009dea:	f7f6 fbb5 	bl	8000558 <__aeabi_f2d>
 8009dee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009df6:	4814      	ldr	r0, [pc, #80]	; (8009e48 <asinf+0xac>)
 8009df8:	f000 ff96 	bl	800ad28 <nan>
 8009dfc:	f994 3000 	ldrsb.w	r3, [r4]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009e06:	d104      	bne.n	8009e12 <asinf+0x76>
 8009e08:	f001 f97a 	bl	800b100 <__errno>
 8009e0c:	2321      	movs	r3, #33	; 0x21
 8009e0e:	6003      	str	r3, [r0, #0]
 8009e10:	e004      	b.n	8009e1c <asinf+0x80>
 8009e12:	4668      	mov	r0, sp
 8009e14:	f000 ff84 	bl	800ad20 <matherr>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d0f5      	beq.n	8009e08 <asinf+0x6c>
 8009e1c:	9b08      	ldr	r3, [sp, #32]
 8009e1e:	b11b      	cbz	r3, 8009e28 <asinf+0x8c>
 8009e20:	f001 f96e 	bl	800b100 <__errno>
 8009e24:	9b08      	ldr	r3, [sp, #32]
 8009e26:	6003      	str	r3, [r0, #0]
 8009e28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e2c:	f7f6 fee4 	bl	8000bf8 <__aeabi_d2f>
 8009e30:	ee08 0a90 	vmov	s17, r0
 8009e34:	eeb0 0a68 	vmov.f32	s0, s17
 8009e38:	b00a      	add	sp, #40	; 0x28
 8009e3a:	ecbd 8b02 	vpop	{d8}
 8009e3e:	bd10      	pop	{r4, pc}
 8009e40:	20000080 	.word	0x20000080
 8009e44:	0800fdbd 	.word	0x0800fdbd
 8009e48:	08010131 	.word	0x08010131

08009e4c <atan2f>:
 8009e4c:	f000 bea6 	b.w	800ab9c <__ieee754_atan2f>

08009e50 <__ieee754_pow>:
 8009e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	b091      	sub	sp, #68	; 0x44
 8009e56:	ed8d 1b00 	vstr	d1, [sp]
 8009e5a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009e5e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009e62:	ea58 0302 	orrs.w	r3, r8, r2
 8009e66:	ec57 6b10 	vmov	r6, r7, d0
 8009e6a:	f000 84be 	beq.w	800a7ea <__ieee754_pow+0x99a>
 8009e6e:	4b7a      	ldr	r3, [pc, #488]	; (800a058 <__ieee754_pow+0x208>)
 8009e70:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009e74:	429c      	cmp	r4, r3
 8009e76:	463d      	mov	r5, r7
 8009e78:	ee10 aa10 	vmov	sl, s0
 8009e7c:	dc09      	bgt.n	8009e92 <__ieee754_pow+0x42>
 8009e7e:	d103      	bne.n	8009e88 <__ieee754_pow+0x38>
 8009e80:	b93e      	cbnz	r6, 8009e92 <__ieee754_pow+0x42>
 8009e82:	45a0      	cmp	r8, r4
 8009e84:	dc0d      	bgt.n	8009ea2 <__ieee754_pow+0x52>
 8009e86:	e001      	b.n	8009e8c <__ieee754_pow+0x3c>
 8009e88:	4598      	cmp	r8, r3
 8009e8a:	dc02      	bgt.n	8009e92 <__ieee754_pow+0x42>
 8009e8c:	4598      	cmp	r8, r3
 8009e8e:	d10e      	bne.n	8009eae <__ieee754_pow+0x5e>
 8009e90:	b16a      	cbz	r2, 8009eae <__ieee754_pow+0x5e>
 8009e92:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009e96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009e9a:	ea54 030a 	orrs.w	r3, r4, sl
 8009e9e:	f000 84a4 	beq.w	800a7ea <__ieee754_pow+0x99a>
 8009ea2:	486e      	ldr	r0, [pc, #440]	; (800a05c <__ieee754_pow+0x20c>)
 8009ea4:	b011      	add	sp, #68	; 0x44
 8009ea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eaa:	f000 bf3d 	b.w	800ad28 <nan>
 8009eae:	2d00      	cmp	r5, #0
 8009eb0:	da53      	bge.n	8009f5a <__ieee754_pow+0x10a>
 8009eb2:	4b6b      	ldr	r3, [pc, #428]	; (800a060 <__ieee754_pow+0x210>)
 8009eb4:	4598      	cmp	r8, r3
 8009eb6:	dc4d      	bgt.n	8009f54 <__ieee754_pow+0x104>
 8009eb8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009ebc:	4598      	cmp	r8, r3
 8009ebe:	dd4c      	ble.n	8009f5a <__ieee754_pow+0x10a>
 8009ec0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009ec4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ec8:	2b14      	cmp	r3, #20
 8009eca:	dd26      	ble.n	8009f1a <__ieee754_pow+0xca>
 8009ecc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009ed0:	fa22 f103 	lsr.w	r1, r2, r3
 8009ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d13e      	bne.n	8009f5a <__ieee754_pow+0x10a>
 8009edc:	f001 0101 	and.w	r1, r1, #1
 8009ee0:	f1c1 0b02 	rsb	fp, r1, #2
 8009ee4:	2a00      	cmp	r2, #0
 8009ee6:	d15b      	bne.n	8009fa0 <__ieee754_pow+0x150>
 8009ee8:	4b5b      	ldr	r3, [pc, #364]	; (800a058 <__ieee754_pow+0x208>)
 8009eea:	4598      	cmp	r8, r3
 8009eec:	d124      	bne.n	8009f38 <__ieee754_pow+0xe8>
 8009eee:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009ef2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009ef6:	ea53 030a 	orrs.w	r3, r3, sl
 8009efa:	f000 8476 	beq.w	800a7ea <__ieee754_pow+0x99a>
 8009efe:	4b59      	ldr	r3, [pc, #356]	; (800a064 <__ieee754_pow+0x214>)
 8009f00:	429c      	cmp	r4, r3
 8009f02:	dd2d      	ble.n	8009f60 <__ieee754_pow+0x110>
 8009f04:	f1b9 0f00 	cmp.w	r9, #0
 8009f08:	f280 8473 	bge.w	800a7f2 <__ieee754_pow+0x9a2>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	2100      	movs	r1, #0
 8009f10:	ec41 0b10 	vmov	d0, r0, r1
 8009f14:	b011      	add	sp, #68	; 0x44
 8009f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1a:	2a00      	cmp	r2, #0
 8009f1c:	d13e      	bne.n	8009f9c <__ieee754_pow+0x14c>
 8009f1e:	f1c3 0314 	rsb	r3, r3, #20
 8009f22:	fa48 f103 	asr.w	r1, r8, r3
 8009f26:	fa01 f303 	lsl.w	r3, r1, r3
 8009f2a:	4543      	cmp	r3, r8
 8009f2c:	f040 8469 	bne.w	800a802 <__ieee754_pow+0x9b2>
 8009f30:	f001 0101 	and.w	r1, r1, #1
 8009f34:	f1c1 0b02 	rsb	fp, r1, #2
 8009f38:	4b4b      	ldr	r3, [pc, #300]	; (800a068 <__ieee754_pow+0x218>)
 8009f3a:	4598      	cmp	r8, r3
 8009f3c:	d118      	bne.n	8009f70 <__ieee754_pow+0x120>
 8009f3e:	f1b9 0f00 	cmp.w	r9, #0
 8009f42:	f280 845a 	bge.w	800a7fa <__ieee754_pow+0x9aa>
 8009f46:	4948      	ldr	r1, [pc, #288]	; (800a068 <__ieee754_pow+0x218>)
 8009f48:	4632      	mov	r2, r6
 8009f4a:	463b      	mov	r3, r7
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	f7f6 fc85 	bl	800085c <__aeabi_ddiv>
 8009f52:	e7dd      	b.n	8009f10 <__ieee754_pow+0xc0>
 8009f54:	f04f 0b02 	mov.w	fp, #2
 8009f58:	e7c4      	b.n	8009ee4 <__ieee754_pow+0x94>
 8009f5a:	f04f 0b00 	mov.w	fp, #0
 8009f5e:	e7c1      	b.n	8009ee4 <__ieee754_pow+0x94>
 8009f60:	f1b9 0f00 	cmp.w	r9, #0
 8009f64:	dad2      	bge.n	8009f0c <__ieee754_pow+0xbc>
 8009f66:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009f6a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f6e:	e7cf      	b.n	8009f10 <__ieee754_pow+0xc0>
 8009f70:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009f74:	d106      	bne.n	8009f84 <__ieee754_pow+0x134>
 8009f76:	4632      	mov	r2, r6
 8009f78:	463b      	mov	r3, r7
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	f7f6 fb43 	bl	8000608 <__aeabi_dmul>
 8009f82:	e7c5      	b.n	8009f10 <__ieee754_pow+0xc0>
 8009f84:	4b39      	ldr	r3, [pc, #228]	; (800a06c <__ieee754_pow+0x21c>)
 8009f86:	4599      	cmp	r9, r3
 8009f88:	d10a      	bne.n	8009fa0 <__ieee754_pow+0x150>
 8009f8a:	2d00      	cmp	r5, #0
 8009f8c:	db08      	blt.n	8009fa0 <__ieee754_pow+0x150>
 8009f8e:	ec47 6b10 	vmov	d0, r6, r7
 8009f92:	b011      	add	sp, #68	; 0x44
 8009f94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	f000 bc68 	b.w	800a86c <__ieee754_sqrt>
 8009f9c:	f04f 0b00 	mov.w	fp, #0
 8009fa0:	ec47 6b10 	vmov	d0, r6, r7
 8009fa4:	f000 feab 	bl	800acfe <fabs>
 8009fa8:	ec51 0b10 	vmov	r0, r1, d0
 8009fac:	f1ba 0f00 	cmp.w	sl, #0
 8009fb0:	d127      	bne.n	800a002 <__ieee754_pow+0x1b2>
 8009fb2:	b124      	cbz	r4, 8009fbe <__ieee754_pow+0x16e>
 8009fb4:	4b2c      	ldr	r3, [pc, #176]	; (800a068 <__ieee754_pow+0x218>)
 8009fb6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d121      	bne.n	800a002 <__ieee754_pow+0x1b2>
 8009fbe:	f1b9 0f00 	cmp.w	r9, #0
 8009fc2:	da05      	bge.n	8009fd0 <__ieee754_pow+0x180>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	2000      	movs	r0, #0
 8009fca:	4927      	ldr	r1, [pc, #156]	; (800a068 <__ieee754_pow+0x218>)
 8009fcc:	f7f6 fc46 	bl	800085c <__aeabi_ddiv>
 8009fd0:	2d00      	cmp	r5, #0
 8009fd2:	da9d      	bge.n	8009f10 <__ieee754_pow+0xc0>
 8009fd4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009fd8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009fdc:	ea54 030b 	orrs.w	r3, r4, fp
 8009fe0:	d108      	bne.n	8009ff4 <__ieee754_pow+0x1a4>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	4619      	mov	r1, r3
 8009fea:	f7f6 f955 	bl	8000298 <__aeabi_dsub>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	e7ac      	b.n	8009f4e <__ieee754_pow+0xfe>
 8009ff4:	f1bb 0f01 	cmp.w	fp, #1
 8009ff8:	d18a      	bne.n	8009f10 <__ieee754_pow+0xc0>
 8009ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ffe:	4619      	mov	r1, r3
 800a000:	e786      	b.n	8009f10 <__ieee754_pow+0xc0>
 800a002:	0fed      	lsrs	r5, r5, #31
 800a004:	1e6b      	subs	r3, r5, #1
 800a006:	930d      	str	r3, [sp, #52]	; 0x34
 800a008:	ea5b 0303 	orrs.w	r3, fp, r3
 800a00c:	d102      	bne.n	800a014 <__ieee754_pow+0x1c4>
 800a00e:	4632      	mov	r2, r6
 800a010:	463b      	mov	r3, r7
 800a012:	e7e8      	b.n	8009fe6 <__ieee754_pow+0x196>
 800a014:	4b16      	ldr	r3, [pc, #88]	; (800a070 <__ieee754_pow+0x220>)
 800a016:	4598      	cmp	r8, r3
 800a018:	f340 80fe 	ble.w	800a218 <__ieee754_pow+0x3c8>
 800a01c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a020:	4598      	cmp	r8, r3
 800a022:	dd0a      	ble.n	800a03a <__ieee754_pow+0x1ea>
 800a024:	4b0f      	ldr	r3, [pc, #60]	; (800a064 <__ieee754_pow+0x214>)
 800a026:	429c      	cmp	r4, r3
 800a028:	dc0d      	bgt.n	800a046 <__ieee754_pow+0x1f6>
 800a02a:	f1b9 0f00 	cmp.w	r9, #0
 800a02e:	f6bf af6d 	bge.w	8009f0c <__ieee754_pow+0xbc>
 800a032:	a307      	add	r3, pc, #28	; (adr r3, 800a050 <__ieee754_pow+0x200>)
 800a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a038:	e79f      	b.n	8009f7a <__ieee754_pow+0x12a>
 800a03a:	4b0e      	ldr	r3, [pc, #56]	; (800a074 <__ieee754_pow+0x224>)
 800a03c:	429c      	cmp	r4, r3
 800a03e:	ddf4      	ble.n	800a02a <__ieee754_pow+0x1da>
 800a040:	4b09      	ldr	r3, [pc, #36]	; (800a068 <__ieee754_pow+0x218>)
 800a042:	429c      	cmp	r4, r3
 800a044:	dd18      	ble.n	800a078 <__ieee754_pow+0x228>
 800a046:	f1b9 0f00 	cmp.w	r9, #0
 800a04a:	dcf2      	bgt.n	800a032 <__ieee754_pow+0x1e2>
 800a04c:	e75e      	b.n	8009f0c <__ieee754_pow+0xbc>
 800a04e:	bf00      	nop
 800a050:	8800759c 	.word	0x8800759c
 800a054:	7e37e43c 	.word	0x7e37e43c
 800a058:	7ff00000 	.word	0x7ff00000
 800a05c:	08010131 	.word	0x08010131
 800a060:	433fffff 	.word	0x433fffff
 800a064:	3fefffff 	.word	0x3fefffff
 800a068:	3ff00000 	.word	0x3ff00000
 800a06c:	3fe00000 	.word	0x3fe00000
 800a070:	41e00000 	.word	0x41e00000
 800a074:	3feffffe 	.word	0x3feffffe
 800a078:	2200      	movs	r2, #0
 800a07a:	4b63      	ldr	r3, [pc, #396]	; (800a208 <__ieee754_pow+0x3b8>)
 800a07c:	f7f6 f90c 	bl	8000298 <__aeabi_dsub>
 800a080:	a355      	add	r3, pc, #340	; (adr r3, 800a1d8 <__ieee754_pow+0x388>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	4604      	mov	r4, r0
 800a088:	460d      	mov	r5, r1
 800a08a:	f7f6 fabd 	bl	8000608 <__aeabi_dmul>
 800a08e:	a354      	add	r3, pc, #336	; (adr r3, 800a1e0 <__ieee754_pow+0x390>)
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	4606      	mov	r6, r0
 800a096:	460f      	mov	r7, r1
 800a098:	4620      	mov	r0, r4
 800a09a:	4629      	mov	r1, r5
 800a09c:	f7f6 fab4 	bl	8000608 <__aeabi_dmul>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0a6:	4b59      	ldr	r3, [pc, #356]	; (800a20c <__ieee754_pow+0x3bc>)
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	f7f6 faac 	bl	8000608 <__aeabi_dmul>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	a14c      	add	r1, pc, #304	; (adr r1, 800a1e8 <__ieee754_pow+0x398>)
 800a0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ba:	f7f6 f8ed 	bl	8000298 <__aeabi_dsub>
 800a0be:	4622      	mov	r2, r4
 800a0c0:	462b      	mov	r3, r5
 800a0c2:	f7f6 faa1 	bl	8000608 <__aeabi_dmul>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	4950      	ldr	r1, [pc, #320]	; (800a210 <__ieee754_pow+0x3c0>)
 800a0ce:	f7f6 f8e3 	bl	8000298 <__aeabi_dsub>
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	4689      	mov	r9, r1
 800a0da:	4620      	mov	r0, r4
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f7f6 fa93 	bl	8000608 <__aeabi_dmul>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4640      	mov	r0, r8
 800a0e8:	4649      	mov	r1, r9
 800a0ea:	f7f6 fa8d 	bl	8000608 <__aeabi_dmul>
 800a0ee:	a340      	add	r3, pc, #256	; (adr r3, 800a1f0 <__ieee754_pow+0x3a0>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 fa88 	bl	8000608 <__aeabi_dmul>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a100:	f7f6 f8ca 	bl	8000298 <__aeabi_dsub>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	4604      	mov	r4, r0
 800a10a:	460d      	mov	r5, r1
 800a10c:	4630      	mov	r0, r6
 800a10e:	4639      	mov	r1, r7
 800a110:	f7f6 f8c4 	bl	800029c <__adddf3>
 800a114:	2000      	movs	r0, #0
 800a116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a11a:	4632      	mov	r2, r6
 800a11c:	463b      	mov	r3, r7
 800a11e:	f7f6 f8bb 	bl	8000298 <__aeabi_dsub>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	4620      	mov	r0, r4
 800a128:	4629      	mov	r1, r5
 800a12a:	f7f6 f8b5 	bl	8000298 <__aeabi_dsub>
 800a12e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a130:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a134:	4313      	orrs	r3, r2
 800a136:	4606      	mov	r6, r0
 800a138:	460f      	mov	r7, r1
 800a13a:	f040 81eb 	bne.w	800a514 <__ieee754_pow+0x6c4>
 800a13e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a1f8 <__ieee754_pow+0x3a8>
 800a142:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a146:	2400      	movs	r4, #0
 800a148:	4622      	mov	r2, r4
 800a14a:	462b      	mov	r3, r5
 800a14c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a150:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a154:	f7f6 f8a0 	bl	8000298 <__aeabi_dsub>
 800a158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a15c:	f7f6 fa54 	bl	8000608 <__aeabi_dmul>
 800a160:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a164:	4680      	mov	r8, r0
 800a166:	4689      	mov	r9, r1
 800a168:	4630      	mov	r0, r6
 800a16a:	4639      	mov	r1, r7
 800a16c:	f7f6 fa4c 	bl	8000608 <__aeabi_dmul>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4640      	mov	r0, r8
 800a176:	4649      	mov	r1, r9
 800a178:	f7f6 f890 	bl	800029c <__adddf3>
 800a17c:	4622      	mov	r2, r4
 800a17e:	462b      	mov	r3, r5
 800a180:	4680      	mov	r8, r0
 800a182:	4689      	mov	r9, r1
 800a184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a188:	f7f6 fa3e 	bl	8000608 <__aeabi_dmul>
 800a18c:	460b      	mov	r3, r1
 800a18e:	4604      	mov	r4, r0
 800a190:	460d      	mov	r5, r1
 800a192:	4602      	mov	r2, r0
 800a194:	4649      	mov	r1, r9
 800a196:	4640      	mov	r0, r8
 800a198:	e9cd 4500 	strd	r4, r5, [sp]
 800a19c:	f7f6 f87e 	bl	800029c <__adddf3>
 800a1a0:	4b1c      	ldr	r3, [pc, #112]	; (800a214 <__ieee754_pow+0x3c4>)
 800a1a2:	4299      	cmp	r1, r3
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	460f      	mov	r7, r1
 800a1a8:	468b      	mov	fp, r1
 800a1aa:	f340 82f7 	ble.w	800a79c <__ieee754_pow+0x94c>
 800a1ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a1b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a1b6:	4303      	orrs	r3, r0
 800a1b8:	f000 81ea 	beq.w	800a590 <__ieee754_pow+0x740>
 800a1bc:	a310      	add	r3, pc, #64	; (adr r3, 800a200 <__ieee754_pow+0x3b0>)
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c6:	f7f6 fa1f 	bl	8000608 <__aeabi_dmul>
 800a1ca:	a30d      	add	r3, pc, #52	; (adr r3, 800a200 <__ieee754_pow+0x3b0>)
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	e6d5      	b.n	8009f7e <__ieee754_pow+0x12e>
 800a1d2:	bf00      	nop
 800a1d4:	f3af 8000 	nop.w
 800a1d8:	60000000 	.word	0x60000000
 800a1dc:	3ff71547 	.word	0x3ff71547
 800a1e0:	f85ddf44 	.word	0xf85ddf44
 800a1e4:	3e54ae0b 	.word	0x3e54ae0b
 800a1e8:	55555555 	.word	0x55555555
 800a1ec:	3fd55555 	.word	0x3fd55555
 800a1f0:	652b82fe 	.word	0x652b82fe
 800a1f4:	3ff71547 	.word	0x3ff71547
 800a1f8:	00000000 	.word	0x00000000
 800a1fc:	bff00000 	.word	0xbff00000
 800a200:	8800759c 	.word	0x8800759c
 800a204:	7e37e43c 	.word	0x7e37e43c
 800a208:	3ff00000 	.word	0x3ff00000
 800a20c:	3fd00000 	.word	0x3fd00000
 800a210:	3fe00000 	.word	0x3fe00000
 800a214:	408fffff 	.word	0x408fffff
 800a218:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a21c:	f04f 0200 	mov.w	r2, #0
 800a220:	da05      	bge.n	800a22e <__ieee754_pow+0x3de>
 800a222:	4bd3      	ldr	r3, [pc, #844]	; (800a570 <__ieee754_pow+0x720>)
 800a224:	f7f6 f9f0 	bl	8000608 <__aeabi_dmul>
 800a228:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a22c:	460c      	mov	r4, r1
 800a22e:	1523      	asrs	r3, r4, #20
 800a230:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a234:	4413      	add	r3, r2
 800a236:	9309      	str	r3, [sp, #36]	; 0x24
 800a238:	4bce      	ldr	r3, [pc, #824]	; (800a574 <__ieee754_pow+0x724>)
 800a23a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a23e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a242:	429c      	cmp	r4, r3
 800a244:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a248:	dd08      	ble.n	800a25c <__ieee754_pow+0x40c>
 800a24a:	4bcb      	ldr	r3, [pc, #812]	; (800a578 <__ieee754_pow+0x728>)
 800a24c:	429c      	cmp	r4, r3
 800a24e:	f340 815e 	ble.w	800a50e <__ieee754_pow+0x6be>
 800a252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a254:	3301      	adds	r3, #1
 800a256:	9309      	str	r3, [sp, #36]	; 0x24
 800a258:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a25c:	f04f 0a00 	mov.w	sl, #0
 800a260:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a264:	930c      	str	r3, [sp, #48]	; 0x30
 800a266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a268:	4bc4      	ldr	r3, [pc, #784]	; (800a57c <__ieee754_pow+0x72c>)
 800a26a:	4413      	add	r3, r2
 800a26c:	ed93 7b00 	vldr	d7, [r3]
 800a270:	4629      	mov	r1, r5
 800a272:	ec53 2b17 	vmov	r2, r3, d7
 800a276:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a27a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a27e:	f7f6 f80b 	bl	8000298 <__aeabi_dsub>
 800a282:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a286:	4606      	mov	r6, r0
 800a288:	460f      	mov	r7, r1
 800a28a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a28e:	f7f6 f805 	bl	800029c <__adddf3>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	2000      	movs	r0, #0
 800a298:	49b9      	ldr	r1, [pc, #740]	; (800a580 <__ieee754_pow+0x730>)
 800a29a:	f7f6 fadf 	bl	800085c <__aeabi_ddiv>
 800a29e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	4639      	mov	r1, r7
 800a2aa:	f7f6 f9ad 	bl	8000608 <__aeabi_dmul>
 800a2ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2b2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a2b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9302      	str	r3, [sp, #8]
 800a2be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2c2:	106d      	asrs	r5, r5, #1
 800a2c4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a2c8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	4614      	mov	r4, r2
 800a2d8:	461d      	mov	r5, r3
 800a2da:	f7f6 f995 	bl	8000608 <__aeabi_dmul>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	4639      	mov	r1, r7
 800a2e6:	f7f5 ffd7 	bl	8000298 <__aeabi_dsub>
 800a2ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	460f      	mov	r7, r1
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7f5 ffcf 	bl	8000298 <__aeabi_dsub>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a302:	f7f5 ffc9 	bl	8000298 <__aeabi_dsub>
 800a306:	4642      	mov	r2, r8
 800a308:	464b      	mov	r3, r9
 800a30a:	f7f6 f97d 	bl	8000608 <__aeabi_dmul>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4630      	mov	r0, r6
 800a314:	4639      	mov	r1, r7
 800a316:	f7f5 ffbf 	bl	8000298 <__aeabi_dsub>
 800a31a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a31e:	f7f6 f973 	bl	8000608 <__aeabi_dmul>
 800a322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a326:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a32a:	4610      	mov	r0, r2
 800a32c:	4619      	mov	r1, r3
 800a32e:	f7f6 f96b 	bl	8000608 <__aeabi_dmul>
 800a332:	a37b      	add	r3, pc, #492	; (adr r3, 800a520 <__ieee754_pow+0x6d0>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	4604      	mov	r4, r0
 800a33a:	460d      	mov	r5, r1
 800a33c:	f7f6 f964 	bl	8000608 <__aeabi_dmul>
 800a340:	a379      	add	r3, pc, #484	; (adr r3, 800a528 <__ieee754_pow+0x6d8>)
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	f7f5 ffa9 	bl	800029c <__adddf3>
 800a34a:	4622      	mov	r2, r4
 800a34c:	462b      	mov	r3, r5
 800a34e:	f7f6 f95b 	bl	8000608 <__aeabi_dmul>
 800a352:	a377      	add	r3, pc, #476	; (adr r3, 800a530 <__ieee754_pow+0x6e0>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7f5 ffa0 	bl	800029c <__adddf3>
 800a35c:	4622      	mov	r2, r4
 800a35e:	462b      	mov	r3, r5
 800a360:	f7f6 f952 	bl	8000608 <__aeabi_dmul>
 800a364:	a374      	add	r3, pc, #464	; (adr r3, 800a538 <__ieee754_pow+0x6e8>)
 800a366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36a:	f7f5 ff97 	bl	800029c <__adddf3>
 800a36e:	4622      	mov	r2, r4
 800a370:	462b      	mov	r3, r5
 800a372:	f7f6 f949 	bl	8000608 <__aeabi_dmul>
 800a376:	a372      	add	r3, pc, #456	; (adr r3, 800a540 <__ieee754_pow+0x6f0>)
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	f7f5 ff8e 	bl	800029c <__adddf3>
 800a380:	4622      	mov	r2, r4
 800a382:	462b      	mov	r3, r5
 800a384:	f7f6 f940 	bl	8000608 <__aeabi_dmul>
 800a388:	a36f      	add	r3, pc, #444	; (adr r3, 800a548 <__ieee754_pow+0x6f8>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f5 ff85 	bl	800029c <__adddf3>
 800a392:	4622      	mov	r2, r4
 800a394:	4606      	mov	r6, r0
 800a396:	460f      	mov	r7, r1
 800a398:	462b      	mov	r3, r5
 800a39a:	4620      	mov	r0, r4
 800a39c:	4629      	mov	r1, r5
 800a39e:	f7f6 f933 	bl	8000608 <__aeabi_dmul>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	f7f6 f92d 	bl	8000608 <__aeabi_dmul>
 800a3ae:	4642      	mov	r2, r8
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	460d      	mov	r5, r1
 800a3b4:	464b      	mov	r3, r9
 800a3b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ba:	f7f5 ff6f 	bl	800029c <__adddf3>
 800a3be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3c2:	f7f6 f921 	bl	8000608 <__aeabi_dmul>
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	462b      	mov	r3, r5
 800a3ca:	f7f5 ff67 	bl	800029c <__adddf3>
 800a3ce:	4642      	mov	r2, r8
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	460f      	mov	r7, r1
 800a3d4:	464b      	mov	r3, r9
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	4649      	mov	r1, r9
 800a3da:	f7f6 f915 	bl	8000608 <__aeabi_dmul>
 800a3de:	2200      	movs	r2, #0
 800a3e0:	4b68      	ldr	r3, [pc, #416]	; (800a584 <__ieee754_pow+0x734>)
 800a3e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a3e6:	f7f5 ff59 	bl	800029c <__adddf3>
 800a3ea:	4632      	mov	r2, r6
 800a3ec:	463b      	mov	r3, r7
 800a3ee:	f7f5 ff55 	bl	800029c <__adddf3>
 800a3f2:	9802      	ldr	r0, [sp, #8]
 800a3f4:	460d      	mov	r5, r1
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	4649      	mov	r1, r9
 800a400:	f7f6 f902 	bl	8000608 <__aeabi_dmul>
 800a404:	2200      	movs	r2, #0
 800a406:	4680      	mov	r8, r0
 800a408:	4689      	mov	r9, r1
 800a40a:	4b5e      	ldr	r3, [pc, #376]	; (800a584 <__ieee754_pow+0x734>)
 800a40c:	4620      	mov	r0, r4
 800a40e:	4629      	mov	r1, r5
 800a410:	f7f5 ff42 	bl	8000298 <__aeabi_dsub>
 800a414:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a418:	f7f5 ff3e 	bl	8000298 <__aeabi_dsub>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f7f5 ff38 	bl	8000298 <__aeabi_dsub>
 800a428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a42c:	f7f6 f8ec 	bl	8000608 <__aeabi_dmul>
 800a430:	4622      	mov	r2, r4
 800a432:	4606      	mov	r6, r0
 800a434:	460f      	mov	r7, r1
 800a436:	462b      	mov	r3, r5
 800a438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a43c:	f7f6 f8e4 	bl	8000608 <__aeabi_dmul>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4630      	mov	r0, r6
 800a446:	4639      	mov	r1, r7
 800a448:	f7f5 ff28 	bl	800029c <__adddf3>
 800a44c:	4606      	mov	r6, r0
 800a44e:	460f      	mov	r7, r1
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4640      	mov	r0, r8
 800a456:	4649      	mov	r1, r9
 800a458:	f7f5 ff20 	bl	800029c <__adddf3>
 800a45c:	9802      	ldr	r0, [sp, #8]
 800a45e:	a33c      	add	r3, pc, #240	; (adr r3, 800a550 <__ieee754_pow+0x700>)
 800a460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a464:	4604      	mov	r4, r0
 800a466:	460d      	mov	r5, r1
 800a468:	f7f6 f8ce 	bl	8000608 <__aeabi_dmul>
 800a46c:	4642      	mov	r2, r8
 800a46e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a472:	464b      	mov	r3, r9
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f5 ff0e 	bl	8000298 <__aeabi_dsub>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4630      	mov	r0, r6
 800a482:	4639      	mov	r1, r7
 800a484:	f7f5 ff08 	bl	8000298 <__aeabi_dsub>
 800a488:	a333      	add	r3, pc, #204	; (adr r3, 800a558 <__ieee754_pow+0x708>)
 800a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48e:	f7f6 f8bb 	bl	8000608 <__aeabi_dmul>
 800a492:	a333      	add	r3, pc, #204	; (adr r3, 800a560 <__ieee754_pow+0x710>)
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	4606      	mov	r6, r0
 800a49a:	460f      	mov	r7, r1
 800a49c:	4620      	mov	r0, r4
 800a49e:	4629      	mov	r1, r5
 800a4a0:	f7f6 f8b2 	bl	8000608 <__aeabi_dmul>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	f7f5 fef6 	bl	800029c <__adddf3>
 800a4b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4b2:	4b35      	ldr	r3, [pc, #212]	; (800a588 <__ieee754_pow+0x738>)
 800a4b4:	4413      	add	r3, r2
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f7f5 feef 	bl	800029c <__adddf3>
 800a4be:	4604      	mov	r4, r0
 800a4c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4c2:	460d      	mov	r5, r1
 800a4c4:	f7f6 f836 	bl	8000534 <__aeabi_i2d>
 800a4c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4ca:	4b30      	ldr	r3, [pc, #192]	; (800a58c <__ieee754_pow+0x73c>)
 800a4cc:	4413      	add	r3, r2
 800a4ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	460f      	mov	r7, r1
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	462b      	mov	r3, r5
 800a4da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4de:	f7f5 fedd 	bl	800029c <__adddf3>
 800a4e2:	4642      	mov	r2, r8
 800a4e4:	464b      	mov	r3, r9
 800a4e6:	f7f5 fed9 	bl	800029c <__adddf3>
 800a4ea:	4632      	mov	r2, r6
 800a4ec:	463b      	mov	r3, r7
 800a4ee:	f7f5 fed5 	bl	800029c <__adddf3>
 800a4f2:	9802      	ldr	r0, [sp, #8]
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4fc:	f7f5 fecc 	bl	8000298 <__aeabi_dsub>
 800a500:	4642      	mov	r2, r8
 800a502:	464b      	mov	r3, r9
 800a504:	f7f5 fec8 	bl	8000298 <__aeabi_dsub>
 800a508:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a50c:	e607      	b.n	800a11e <__ieee754_pow+0x2ce>
 800a50e:	f04f 0a01 	mov.w	sl, #1
 800a512:	e6a5      	b.n	800a260 <__ieee754_pow+0x410>
 800a514:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a568 <__ieee754_pow+0x718>
 800a518:	e613      	b.n	800a142 <__ieee754_pow+0x2f2>
 800a51a:	bf00      	nop
 800a51c:	f3af 8000 	nop.w
 800a520:	4a454eef 	.word	0x4a454eef
 800a524:	3fca7e28 	.word	0x3fca7e28
 800a528:	93c9db65 	.word	0x93c9db65
 800a52c:	3fcd864a 	.word	0x3fcd864a
 800a530:	a91d4101 	.word	0xa91d4101
 800a534:	3fd17460 	.word	0x3fd17460
 800a538:	518f264d 	.word	0x518f264d
 800a53c:	3fd55555 	.word	0x3fd55555
 800a540:	db6fabff 	.word	0xdb6fabff
 800a544:	3fdb6db6 	.word	0x3fdb6db6
 800a548:	33333303 	.word	0x33333303
 800a54c:	3fe33333 	.word	0x3fe33333
 800a550:	e0000000 	.word	0xe0000000
 800a554:	3feec709 	.word	0x3feec709
 800a558:	dc3a03fd 	.word	0xdc3a03fd
 800a55c:	3feec709 	.word	0x3feec709
 800a560:	145b01f5 	.word	0x145b01f5
 800a564:	be3e2fe0 	.word	0xbe3e2fe0
 800a568:	00000000 	.word	0x00000000
 800a56c:	3ff00000 	.word	0x3ff00000
 800a570:	43400000 	.word	0x43400000
 800a574:	0003988e 	.word	0x0003988e
 800a578:	000bb679 	.word	0x000bb679
 800a57c:	0800fdc8 	.word	0x0800fdc8
 800a580:	3ff00000 	.word	0x3ff00000
 800a584:	40080000 	.word	0x40080000
 800a588:	0800fde8 	.word	0x0800fde8
 800a58c:	0800fdd8 	.word	0x0800fdd8
 800a590:	a3b4      	add	r3, pc, #720	; (adr r3, 800a864 <__ieee754_pow+0xa14>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	4640      	mov	r0, r8
 800a598:	4649      	mov	r1, r9
 800a59a:	f7f5 fe7f 	bl	800029c <__adddf3>
 800a59e:	4622      	mov	r2, r4
 800a5a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5a4:	462b      	mov	r3, r5
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	4639      	mov	r1, r7
 800a5aa:	f7f5 fe75 	bl	8000298 <__aeabi_dsub>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5b6:	f7f6 fab7 	bl	8000b28 <__aeabi_dcmpgt>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f47f adfe 	bne.w	800a1bc <__ieee754_pow+0x36c>
 800a5c0:	4aa3      	ldr	r2, [pc, #652]	; (800a850 <__ieee754_pow+0xa00>)
 800a5c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	f340 810a 	ble.w	800a7e0 <__ieee754_pow+0x990>
 800a5cc:	151b      	asrs	r3, r3, #20
 800a5ce:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a5d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a5d6:	fa4a f303 	asr.w	r3, sl, r3
 800a5da:	445b      	add	r3, fp
 800a5dc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a5e0:	4e9c      	ldr	r6, [pc, #624]	; (800a854 <__ieee754_pow+0xa04>)
 800a5e2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a5e6:	4116      	asrs	r6, r2
 800a5e8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	ea23 0106 	bic.w	r1, r3, r6
 800a5f2:	f1c2 0214 	rsb	r2, r2, #20
 800a5f6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a5fa:	fa4a fa02 	asr.w	sl, sl, r2
 800a5fe:	f1bb 0f00 	cmp.w	fp, #0
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4620      	mov	r0, r4
 800a608:	4629      	mov	r1, r5
 800a60a:	bfb8      	it	lt
 800a60c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a610:	f7f5 fe42 	bl	8000298 <__aeabi_dsub>
 800a614:	e9cd 0100 	strd	r0, r1, [sp]
 800a618:	4642      	mov	r2, r8
 800a61a:	464b      	mov	r3, r9
 800a61c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a620:	f7f5 fe3c 	bl	800029c <__adddf3>
 800a624:	2000      	movs	r0, #0
 800a626:	a378      	add	r3, pc, #480	; (adr r3, 800a808 <__ieee754_pow+0x9b8>)
 800a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62c:	4604      	mov	r4, r0
 800a62e:	460d      	mov	r5, r1
 800a630:	f7f5 ffea 	bl	8000608 <__aeabi_dmul>
 800a634:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a638:	4606      	mov	r6, r0
 800a63a:	460f      	mov	r7, r1
 800a63c:	4620      	mov	r0, r4
 800a63e:	4629      	mov	r1, r5
 800a640:	f7f5 fe2a 	bl	8000298 <__aeabi_dsub>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	4640      	mov	r0, r8
 800a64a:	4649      	mov	r1, r9
 800a64c:	f7f5 fe24 	bl	8000298 <__aeabi_dsub>
 800a650:	a36f      	add	r3, pc, #444	; (adr r3, 800a810 <__ieee754_pow+0x9c0>)
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	f7f5 ffd7 	bl	8000608 <__aeabi_dmul>
 800a65a:	a36f      	add	r3, pc, #444	; (adr r3, 800a818 <__ieee754_pow+0x9c8>)
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	4680      	mov	r8, r0
 800a662:	4689      	mov	r9, r1
 800a664:	4620      	mov	r0, r4
 800a666:	4629      	mov	r1, r5
 800a668:	f7f5 ffce 	bl	8000608 <__aeabi_dmul>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4640      	mov	r0, r8
 800a672:	4649      	mov	r1, r9
 800a674:	f7f5 fe12 	bl	800029c <__adddf3>
 800a678:	4604      	mov	r4, r0
 800a67a:	460d      	mov	r5, r1
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	4630      	mov	r0, r6
 800a682:	4639      	mov	r1, r7
 800a684:	f7f5 fe0a 	bl	800029c <__adddf3>
 800a688:	4632      	mov	r2, r6
 800a68a:	463b      	mov	r3, r7
 800a68c:	4680      	mov	r8, r0
 800a68e:	4689      	mov	r9, r1
 800a690:	f7f5 fe02 	bl	8000298 <__aeabi_dsub>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4620      	mov	r0, r4
 800a69a:	4629      	mov	r1, r5
 800a69c:	f7f5 fdfc 	bl	8000298 <__aeabi_dsub>
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	4640      	mov	r0, r8
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	f7f5 ffac 	bl	8000608 <__aeabi_dmul>
 800a6b0:	a35b      	add	r3, pc, #364	; (adr r3, 800a820 <__ieee754_pow+0x9d0>)
 800a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	460d      	mov	r5, r1
 800a6ba:	f7f5 ffa5 	bl	8000608 <__aeabi_dmul>
 800a6be:	a35a      	add	r3, pc, #360	; (adr r3, 800a828 <__ieee754_pow+0x9d8>)
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	f7f5 fde8 	bl	8000298 <__aeabi_dsub>
 800a6c8:	4622      	mov	r2, r4
 800a6ca:	462b      	mov	r3, r5
 800a6cc:	f7f5 ff9c 	bl	8000608 <__aeabi_dmul>
 800a6d0:	a357      	add	r3, pc, #348	; (adr r3, 800a830 <__ieee754_pow+0x9e0>)
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	f7f5 fde1 	bl	800029c <__adddf3>
 800a6da:	4622      	mov	r2, r4
 800a6dc:	462b      	mov	r3, r5
 800a6de:	f7f5 ff93 	bl	8000608 <__aeabi_dmul>
 800a6e2:	a355      	add	r3, pc, #340	; (adr r3, 800a838 <__ieee754_pow+0x9e8>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	f7f5 fdd6 	bl	8000298 <__aeabi_dsub>
 800a6ec:	4622      	mov	r2, r4
 800a6ee:	462b      	mov	r3, r5
 800a6f0:	f7f5 ff8a 	bl	8000608 <__aeabi_dmul>
 800a6f4:	a352      	add	r3, pc, #328	; (adr r3, 800a840 <__ieee754_pow+0x9f0>)
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	f7f5 fdcf 	bl	800029c <__adddf3>
 800a6fe:	4622      	mov	r2, r4
 800a700:	462b      	mov	r3, r5
 800a702:	f7f5 ff81 	bl	8000608 <__aeabi_dmul>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4640      	mov	r0, r8
 800a70c:	4649      	mov	r1, r9
 800a70e:	f7f5 fdc3 	bl	8000298 <__aeabi_dsub>
 800a712:	4604      	mov	r4, r0
 800a714:	460d      	mov	r5, r1
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4640      	mov	r0, r8
 800a71c:	4649      	mov	r1, r9
 800a71e:	f7f5 ff73 	bl	8000608 <__aeabi_dmul>
 800a722:	2200      	movs	r2, #0
 800a724:	e9cd 0100 	strd	r0, r1, [sp]
 800a728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a72c:	4620      	mov	r0, r4
 800a72e:	4629      	mov	r1, r5
 800a730:	f7f5 fdb2 	bl	8000298 <__aeabi_dsub>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a73c:	f7f6 f88e 	bl	800085c <__aeabi_ddiv>
 800a740:	4632      	mov	r2, r6
 800a742:	4604      	mov	r4, r0
 800a744:	460d      	mov	r5, r1
 800a746:	463b      	mov	r3, r7
 800a748:	4640      	mov	r0, r8
 800a74a:	4649      	mov	r1, r9
 800a74c:	f7f5 ff5c 	bl	8000608 <__aeabi_dmul>
 800a750:	4632      	mov	r2, r6
 800a752:	463b      	mov	r3, r7
 800a754:	f7f5 fda2 	bl	800029c <__adddf3>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4620      	mov	r0, r4
 800a75e:	4629      	mov	r1, r5
 800a760:	f7f5 fd9a 	bl	8000298 <__aeabi_dsub>
 800a764:	4642      	mov	r2, r8
 800a766:	464b      	mov	r3, r9
 800a768:	f7f5 fd96 	bl	8000298 <__aeabi_dsub>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	2000      	movs	r0, #0
 800a772:	4939      	ldr	r1, [pc, #228]	; (800a858 <__ieee754_pow+0xa08>)
 800a774:	f7f5 fd90 	bl	8000298 <__aeabi_dsub>
 800a778:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a77c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	da2f      	bge.n	800a7e6 <__ieee754_pow+0x996>
 800a786:	4650      	mov	r0, sl
 800a788:	ec43 2b10 	vmov	d0, r2, r3
 800a78c:	f000 fb58 	bl	800ae40 <scalbn>
 800a790:	ec51 0b10 	vmov	r0, r1, d0
 800a794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a798:	f7ff bbf1 	b.w	8009f7e <__ieee754_pow+0x12e>
 800a79c:	4b2f      	ldr	r3, [pc, #188]	; (800a85c <__ieee754_pow+0xa0c>)
 800a79e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a7a2:	429e      	cmp	r6, r3
 800a7a4:	f77f af0c 	ble.w	800a5c0 <__ieee754_pow+0x770>
 800a7a8:	4b2d      	ldr	r3, [pc, #180]	; (800a860 <__ieee754_pow+0xa10>)
 800a7aa:	440b      	add	r3, r1
 800a7ac:	4303      	orrs	r3, r0
 800a7ae:	d00b      	beq.n	800a7c8 <__ieee754_pow+0x978>
 800a7b0:	a325      	add	r3, pc, #148	; (adr r3, 800a848 <__ieee754_pow+0x9f8>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ba:	f7f5 ff25 	bl	8000608 <__aeabi_dmul>
 800a7be:	a322      	add	r3, pc, #136	; (adr r3, 800a848 <__ieee754_pow+0x9f8>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f7ff bbdb 	b.w	8009f7e <__ieee754_pow+0x12e>
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	462b      	mov	r3, r5
 800a7cc:	f7f5 fd64 	bl	8000298 <__aeabi_dsub>
 800a7d0:	4642      	mov	r2, r8
 800a7d2:	464b      	mov	r3, r9
 800a7d4:	f7f6 f99e 	bl	8000b14 <__aeabi_dcmpge>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	f43f aef1 	beq.w	800a5c0 <__ieee754_pow+0x770>
 800a7de:	e7e7      	b.n	800a7b0 <__ieee754_pow+0x960>
 800a7e0:	f04f 0a00 	mov.w	sl, #0
 800a7e4:	e718      	b.n	800a618 <__ieee754_pow+0x7c8>
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	e7d4      	b.n	800a794 <__ieee754_pow+0x944>
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	491a      	ldr	r1, [pc, #104]	; (800a858 <__ieee754_pow+0xa08>)
 800a7ee:	f7ff bb8f 	b.w	8009f10 <__ieee754_pow+0xc0>
 800a7f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7f6:	f7ff bb8b 	b.w	8009f10 <__ieee754_pow+0xc0>
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	f7ff bb87 	b.w	8009f10 <__ieee754_pow+0xc0>
 800a802:	4693      	mov	fp, r2
 800a804:	f7ff bb98 	b.w	8009f38 <__ieee754_pow+0xe8>
 800a808:	00000000 	.word	0x00000000
 800a80c:	3fe62e43 	.word	0x3fe62e43
 800a810:	fefa39ef 	.word	0xfefa39ef
 800a814:	3fe62e42 	.word	0x3fe62e42
 800a818:	0ca86c39 	.word	0x0ca86c39
 800a81c:	be205c61 	.word	0xbe205c61
 800a820:	72bea4d0 	.word	0x72bea4d0
 800a824:	3e663769 	.word	0x3e663769
 800a828:	c5d26bf1 	.word	0xc5d26bf1
 800a82c:	3ebbbd41 	.word	0x3ebbbd41
 800a830:	af25de2c 	.word	0xaf25de2c
 800a834:	3f11566a 	.word	0x3f11566a
 800a838:	16bebd93 	.word	0x16bebd93
 800a83c:	3f66c16c 	.word	0x3f66c16c
 800a840:	5555553e 	.word	0x5555553e
 800a844:	3fc55555 	.word	0x3fc55555
 800a848:	c2f8f359 	.word	0xc2f8f359
 800a84c:	01a56e1f 	.word	0x01a56e1f
 800a850:	3fe00000 	.word	0x3fe00000
 800a854:	000fffff 	.word	0x000fffff
 800a858:	3ff00000 	.word	0x3ff00000
 800a85c:	4090cbff 	.word	0x4090cbff
 800a860:	3f6f3400 	.word	0x3f6f3400
 800a864:	652b82fe 	.word	0x652b82fe
 800a868:	3c971547 	.word	0x3c971547

0800a86c <__ieee754_sqrt>:
 800a86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a870:	4955      	ldr	r1, [pc, #340]	; (800a9c8 <__ieee754_sqrt+0x15c>)
 800a872:	ec55 4b10 	vmov	r4, r5, d0
 800a876:	43a9      	bics	r1, r5
 800a878:	462b      	mov	r3, r5
 800a87a:	462a      	mov	r2, r5
 800a87c:	d112      	bne.n	800a8a4 <__ieee754_sqrt+0x38>
 800a87e:	ee10 2a10 	vmov	r2, s0
 800a882:	ee10 0a10 	vmov	r0, s0
 800a886:	4629      	mov	r1, r5
 800a888:	f7f5 febe 	bl	8000608 <__aeabi_dmul>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	4620      	mov	r0, r4
 800a892:	4629      	mov	r1, r5
 800a894:	f7f5 fd02 	bl	800029c <__adddf3>
 800a898:	4604      	mov	r4, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	ec45 4b10 	vmov	d0, r4, r5
 800a8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a4:	2d00      	cmp	r5, #0
 800a8a6:	ee10 0a10 	vmov	r0, s0
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	dc0f      	bgt.n	800a8ce <__ieee754_sqrt+0x62>
 800a8ae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a8b2:	4330      	orrs	r0, r6
 800a8b4:	d0f2      	beq.n	800a89c <__ieee754_sqrt+0x30>
 800a8b6:	b155      	cbz	r5, 800a8ce <__ieee754_sqrt+0x62>
 800a8b8:	ee10 2a10 	vmov	r2, s0
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f5 fcea 	bl	8000298 <__aeabi_dsub>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	f7f5 ffc8 	bl	800085c <__aeabi_ddiv>
 800a8cc:	e7e4      	b.n	800a898 <__ieee754_sqrt+0x2c>
 800a8ce:	151b      	asrs	r3, r3, #20
 800a8d0:	d073      	beq.n	800a9ba <__ieee754_sqrt+0x14e>
 800a8d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a8d6:	07dd      	lsls	r5, r3, #31
 800a8d8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a8dc:	bf48      	it	mi
 800a8de:	0fc8      	lsrmi	r0, r1, #31
 800a8e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a8e4:	bf44      	itt	mi
 800a8e6:	0049      	lslmi	r1, r1, #1
 800a8e8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a8ec:	2500      	movs	r5, #0
 800a8ee:	1058      	asrs	r0, r3, #1
 800a8f0:	0fcb      	lsrs	r3, r1, #31
 800a8f2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a8f6:	0049      	lsls	r1, r1, #1
 800a8f8:	2316      	movs	r3, #22
 800a8fa:	462c      	mov	r4, r5
 800a8fc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a900:	19a7      	adds	r7, r4, r6
 800a902:	4297      	cmp	r7, r2
 800a904:	bfde      	ittt	le
 800a906:	19bc      	addle	r4, r7, r6
 800a908:	1bd2      	suble	r2, r2, r7
 800a90a:	19ad      	addle	r5, r5, r6
 800a90c:	0fcf      	lsrs	r7, r1, #31
 800a90e:	3b01      	subs	r3, #1
 800a910:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a914:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a918:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a91c:	d1f0      	bne.n	800a900 <__ieee754_sqrt+0x94>
 800a91e:	f04f 0c20 	mov.w	ip, #32
 800a922:	469e      	mov	lr, r3
 800a924:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a928:	42a2      	cmp	r2, r4
 800a92a:	eb06 070e 	add.w	r7, r6, lr
 800a92e:	dc02      	bgt.n	800a936 <__ieee754_sqrt+0xca>
 800a930:	d112      	bne.n	800a958 <__ieee754_sqrt+0xec>
 800a932:	428f      	cmp	r7, r1
 800a934:	d810      	bhi.n	800a958 <__ieee754_sqrt+0xec>
 800a936:	2f00      	cmp	r7, #0
 800a938:	eb07 0e06 	add.w	lr, r7, r6
 800a93c:	da42      	bge.n	800a9c4 <__ieee754_sqrt+0x158>
 800a93e:	f1be 0f00 	cmp.w	lr, #0
 800a942:	db3f      	blt.n	800a9c4 <__ieee754_sqrt+0x158>
 800a944:	f104 0801 	add.w	r8, r4, #1
 800a948:	1b12      	subs	r2, r2, r4
 800a94a:	428f      	cmp	r7, r1
 800a94c:	bf88      	it	hi
 800a94e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a952:	1bc9      	subs	r1, r1, r7
 800a954:	4433      	add	r3, r6
 800a956:	4644      	mov	r4, r8
 800a958:	0052      	lsls	r2, r2, #1
 800a95a:	f1bc 0c01 	subs.w	ip, ip, #1
 800a95e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a962:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a966:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a96a:	d1dd      	bne.n	800a928 <__ieee754_sqrt+0xbc>
 800a96c:	430a      	orrs	r2, r1
 800a96e:	d006      	beq.n	800a97e <__ieee754_sqrt+0x112>
 800a970:	1c5c      	adds	r4, r3, #1
 800a972:	bf13      	iteet	ne
 800a974:	3301      	addne	r3, #1
 800a976:	3501      	addeq	r5, #1
 800a978:	4663      	moveq	r3, ip
 800a97a:	f023 0301 	bicne.w	r3, r3, #1
 800a97e:	106a      	asrs	r2, r5, #1
 800a980:	085b      	lsrs	r3, r3, #1
 800a982:	07e9      	lsls	r1, r5, #31
 800a984:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a988:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a98c:	bf48      	it	mi
 800a98e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a992:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a996:	461c      	mov	r4, r3
 800a998:	e780      	b.n	800a89c <__ieee754_sqrt+0x30>
 800a99a:	0aca      	lsrs	r2, r1, #11
 800a99c:	3815      	subs	r0, #21
 800a99e:	0549      	lsls	r1, r1, #21
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	d0fa      	beq.n	800a99a <__ieee754_sqrt+0x12e>
 800a9a4:	02d6      	lsls	r6, r2, #11
 800a9a6:	d50a      	bpl.n	800a9be <__ieee754_sqrt+0x152>
 800a9a8:	f1c3 0420 	rsb	r4, r3, #32
 800a9ac:	fa21 f404 	lsr.w	r4, r1, r4
 800a9b0:	1e5d      	subs	r5, r3, #1
 800a9b2:	4099      	lsls	r1, r3
 800a9b4:	4322      	orrs	r2, r4
 800a9b6:	1b43      	subs	r3, r0, r5
 800a9b8:	e78b      	b.n	800a8d2 <__ieee754_sqrt+0x66>
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	e7f0      	b.n	800a9a0 <__ieee754_sqrt+0x134>
 800a9be:	0052      	lsls	r2, r2, #1
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	e7ef      	b.n	800a9a4 <__ieee754_sqrt+0x138>
 800a9c4:	46a0      	mov	r8, r4
 800a9c6:	e7bf      	b.n	800a948 <__ieee754_sqrt+0xdc>
 800a9c8:	7ff00000 	.word	0x7ff00000

0800a9cc <__ieee754_asinf>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	ee10 5a10 	vmov	r5, s0
 800a9d2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a9d6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a9da:	ed2d 8b04 	vpush	{d8-d9}
 800a9de:	d10c      	bne.n	800a9fa <__ieee754_asinf+0x2e>
 800a9e0:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800ab5c <__ieee754_asinf+0x190>
 800a9e4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800ab60 <__ieee754_asinf+0x194>
 800a9e8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a9ec:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a9f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a9f4:	ecbd 8b04 	vpop	{d8-d9}
 800a9f8:	bd38      	pop	{r3, r4, r5, pc}
 800a9fa:	dd04      	ble.n	800aa06 <__ieee754_asinf+0x3a>
 800a9fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aa00:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800aa04:	e7f6      	b.n	800a9f4 <__ieee754_asinf+0x28>
 800aa06:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800aa0a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800aa0e:	da0b      	bge.n	800aa28 <__ieee754_asinf+0x5c>
 800aa10:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800aa14:	da52      	bge.n	800aabc <__ieee754_asinf+0xf0>
 800aa16:	eddf 7a53 	vldr	s15, [pc, #332]	; 800ab64 <__ieee754_asinf+0x198>
 800aa1a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800aa1e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800aa22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa26:	dce5      	bgt.n	800a9f4 <__ieee754_asinf+0x28>
 800aa28:	f000 fb54 	bl	800b0d4 <fabsf>
 800aa2c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800aa30:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800aa34:	ee20 8a08 	vmul.f32	s16, s0, s16
 800aa38:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800ab68 <__ieee754_asinf+0x19c>
 800aa3c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ab6c <__ieee754_asinf+0x1a0>
 800aa40:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800ab70 <__ieee754_asinf+0x1a4>
 800aa44:	eea8 7a27 	vfma.f32	s14, s16, s15
 800aa48:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ab74 <__ieee754_asinf+0x1a8>
 800aa4c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa50:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ab78 <__ieee754_asinf+0x1ac>
 800aa54:	eea7 7a88 	vfma.f32	s14, s15, s16
 800aa58:	eddf 7a48 	vldr	s15, [pc, #288]	; 800ab7c <__ieee754_asinf+0x1b0>
 800aa5c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa60:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ab80 <__ieee754_asinf+0x1b4>
 800aa64:	eea7 9a88 	vfma.f32	s18, s15, s16
 800aa68:	eddf 7a46 	vldr	s15, [pc, #280]	; 800ab84 <__ieee754_asinf+0x1b8>
 800aa6c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800aa70:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800ab88 <__ieee754_asinf+0x1bc>
 800aa74:	eea7 7a88 	vfma.f32	s14, s15, s16
 800aa78:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ab8c <__ieee754_asinf+0x1c0>
 800aa7c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa80:	eeb0 0a48 	vmov.f32	s0, s16
 800aa84:	eee7 8a88 	vfma.f32	s17, s15, s16
 800aa88:	f000 f936 	bl	800acf8 <__ieee754_sqrtf>
 800aa8c:	4b40      	ldr	r3, [pc, #256]	; (800ab90 <__ieee754_asinf+0x1c4>)
 800aa8e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800aa92:	429c      	cmp	r4, r3
 800aa94:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800aa98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa9c:	dd3d      	ble.n	800ab1a <__ieee754_asinf+0x14e>
 800aa9e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800aaa2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800ab94 <__ieee754_asinf+0x1c8>
 800aaa6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aaaa:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800ab60 <__ieee754_asinf+0x194>
 800aaae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aab2:	2d00      	cmp	r5, #0
 800aab4:	bfd8      	it	le
 800aab6:	eeb1 0a40 	vnegle.f32	s0, s0
 800aaba:	e79b      	b.n	800a9f4 <__ieee754_asinf+0x28>
 800aabc:	ee60 7a00 	vmul.f32	s15, s0, s0
 800aac0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ab68 <__ieee754_asinf+0x19c>
 800aac4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ab6c <__ieee754_asinf+0x1a0>
 800aac8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ab80 <__ieee754_asinf+0x1b4>
 800aacc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800aad0:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ab74 <__ieee754_asinf+0x1a8>
 800aad4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aad8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800ab78 <__ieee754_asinf+0x1ac>
 800aadc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aae0:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ab7c <__ieee754_asinf+0x1b0>
 800aae4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aae8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800ab70 <__ieee754_asinf+0x1a4>
 800aaec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aaf0:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ab84 <__ieee754_asinf+0x1b8>
 800aaf4:	eee7 6a86 	vfma.f32	s13, s15, s12
 800aaf8:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800ab88 <__ieee754_asinf+0x1bc>
 800aafc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800ab00:	eddf 6a22 	vldr	s13, [pc, #136]	; 800ab8c <__ieee754_asinf+0x1c0>
 800ab04:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab0c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ab10:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ab14:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ab18:	e76c      	b.n	800a9f4 <__ieee754_asinf+0x28>
 800ab1a:	ee10 3a10 	vmov	r3, s0
 800ab1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ab22:	f023 030f 	bic.w	r3, r3, #15
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef1 6a67 	vneg.f32	s13, s15
 800ab2e:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800ab32:	ee70 5a00 	vadd.f32	s11, s0, s0
 800ab36:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ab3a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ab5c <__ieee754_asinf+0x190>
 800ab3e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800ab42:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ab98 <__ieee754_asinf+0x1cc>
 800ab46:	eee5 7a47 	vfms.f32	s15, s10, s14
 800ab4a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800ab4e:	eeb0 6a40 	vmov.f32	s12, s0
 800ab52:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ab56:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ab5a:	e7a8      	b.n	800aaae <__ieee754_asinf+0xe2>
 800ab5c:	b33bbd2e 	.word	0xb33bbd2e
 800ab60:	3fc90fdb 	.word	0x3fc90fdb
 800ab64:	7149f2ca 	.word	0x7149f2ca
 800ab68:	3811ef08 	.word	0x3811ef08
 800ab6c:	3a4f7f04 	.word	0x3a4f7f04
 800ab70:	3e2aaaab 	.word	0x3e2aaaab
 800ab74:	bd241146 	.word	0xbd241146
 800ab78:	3e4e0aa8 	.word	0x3e4e0aa8
 800ab7c:	bea6b090 	.word	0xbea6b090
 800ab80:	3d9dc62e 	.word	0x3d9dc62e
 800ab84:	bf303361 	.word	0xbf303361
 800ab88:	4001572d 	.word	0x4001572d
 800ab8c:	c019d139 	.word	0xc019d139
 800ab90:	3f799999 	.word	0x3f799999
 800ab94:	333bbd2e 	.word	0x333bbd2e
 800ab98:	3f490fdb 	.word	0x3f490fdb

0800ab9c <__ieee754_atan2f>:
 800ab9c:	ee10 2a90 	vmov	r2, s1
 800aba0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800aba4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800aba8:	b510      	push	{r4, lr}
 800abaa:	eef0 7a40 	vmov.f32	s15, s0
 800abae:	dc06      	bgt.n	800abbe <__ieee754_atan2f+0x22>
 800abb0:	ee10 0a10 	vmov	r0, s0
 800abb4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800abb8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800abbc:	dd04      	ble.n	800abc8 <__ieee754_atan2f+0x2c>
 800abbe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800abc2:	eeb0 0a67 	vmov.f32	s0, s15
 800abc6:	bd10      	pop	{r4, pc}
 800abc8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800abcc:	d103      	bne.n	800abd6 <__ieee754_atan2f+0x3a>
 800abce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abd2:	f000 b9ab 	b.w	800af2c <atanf>
 800abd6:	1794      	asrs	r4, r2, #30
 800abd8:	f004 0402 	and.w	r4, r4, #2
 800abdc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800abe0:	b943      	cbnz	r3, 800abf4 <__ieee754_atan2f+0x58>
 800abe2:	2c02      	cmp	r4, #2
 800abe4:	d06e      	beq.n	800acc4 <__ieee754_atan2f+0x128>
 800abe6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800accc <__ieee754_atan2f+0x130>
 800abea:	2c03      	cmp	r4, #3
 800abec:	bf08      	it	eq
 800abee:	eef0 7a47 	vmoveq.f32	s15, s14
 800abf2:	e7e6      	b.n	800abc2 <__ieee754_atan2f+0x26>
 800abf4:	b941      	cbnz	r1, 800ac08 <__ieee754_atan2f+0x6c>
 800abf6:	eddf 7a36 	vldr	s15, [pc, #216]	; 800acd0 <__ieee754_atan2f+0x134>
 800abfa:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800acd4 <__ieee754_atan2f+0x138>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	bfb8      	it	lt
 800ac02:	eef0 7a47 	vmovlt.f32	s15, s14
 800ac06:	e7dc      	b.n	800abc2 <__ieee754_atan2f+0x26>
 800ac08:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ac0c:	d122      	bne.n	800ac54 <__ieee754_atan2f+0xb8>
 800ac0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac12:	d112      	bne.n	800ac3a <__ieee754_atan2f+0x9e>
 800ac14:	2c02      	cmp	r4, #2
 800ac16:	d00a      	beq.n	800ac2e <__ieee754_atan2f+0x92>
 800ac18:	2c03      	cmp	r4, #3
 800ac1a:	d00b      	beq.n	800ac34 <__ieee754_atan2f+0x98>
 800ac1c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800acd8 <__ieee754_atan2f+0x13c>
 800ac20:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800acdc <__ieee754_atan2f+0x140>
 800ac24:	2c01      	cmp	r4, #1
 800ac26:	bf18      	it	ne
 800ac28:	eef0 7a47 	vmovne.f32	s15, s14
 800ac2c:	e7c9      	b.n	800abc2 <__ieee754_atan2f+0x26>
 800ac2e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800ace0 <__ieee754_atan2f+0x144>
 800ac32:	e7c6      	b.n	800abc2 <__ieee754_atan2f+0x26>
 800ac34:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ace4 <__ieee754_atan2f+0x148>
 800ac38:	e7c3      	b.n	800abc2 <__ieee754_atan2f+0x26>
 800ac3a:	2c02      	cmp	r4, #2
 800ac3c:	d042      	beq.n	800acc4 <__ieee754_atan2f+0x128>
 800ac3e:	2c03      	cmp	r4, #3
 800ac40:	d005      	beq.n	800ac4e <__ieee754_atan2f+0xb2>
 800ac42:	2c01      	cmp	r4, #1
 800ac44:	eddf 7a28 	vldr	s15, [pc, #160]	; 800ace8 <__ieee754_atan2f+0x14c>
 800ac48:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800acec <__ieee754_atan2f+0x150>
 800ac4c:	e7eb      	b.n	800ac26 <__ieee754_atan2f+0x8a>
 800ac4e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800accc <__ieee754_atan2f+0x130>
 800ac52:	e7b6      	b.n	800abc2 <__ieee754_atan2f+0x26>
 800ac54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac58:	d0cd      	beq.n	800abf6 <__ieee754_atan2f+0x5a>
 800ac5a:	1a5b      	subs	r3, r3, r1
 800ac5c:	15db      	asrs	r3, r3, #23
 800ac5e:	2b3c      	cmp	r3, #60	; 0x3c
 800ac60:	dc1a      	bgt.n	800ac98 <__ieee754_atan2f+0xfc>
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	da01      	bge.n	800ac6a <__ieee754_atan2f+0xce>
 800ac66:	333c      	adds	r3, #60	; 0x3c
 800ac68:	db19      	blt.n	800ac9e <__ieee754_atan2f+0x102>
 800ac6a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ac6e:	f000 fa31 	bl	800b0d4 <fabsf>
 800ac72:	f000 f95b 	bl	800af2c <atanf>
 800ac76:	eef0 7a40 	vmov.f32	s15, s0
 800ac7a:	2c01      	cmp	r4, #1
 800ac7c:	d012      	beq.n	800aca4 <__ieee754_atan2f+0x108>
 800ac7e:	2c02      	cmp	r4, #2
 800ac80:	d017      	beq.n	800acb2 <__ieee754_atan2f+0x116>
 800ac82:	2c00      	cmp	r4, #0
 800ac84:	d09d      	beq.n	800abc2 <__ieee754_atan2f+0x26>
 800ac86:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800acf0 <__ieee754_atan2f+0x154>
 800ac8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac8e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800acf4 <__ieee754_atan2f+0x158>
 800ac92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac96:	e794      	b.n	800abc2 <__ieee754_atan2f+0x26>
 800ac98:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800acd0 <__ieee754_atan2f+0x134>
 800ac9c:	e7ed      	b.n	800ac7a <__ieee754_atan2f+0xde>
 800ac9e:	eddf 7a13 	vldr	s15, [pc, #76]	; 800acec <__ieee754_atan2f+0x150>
 800aca2:	e7ea      	b.n	800ac7a <__ieee754_atan2f+0xde>
 800aca4:	ee17 3a90 	vmov	r3, s15
 800aca8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800acac:	ee07 3a90 	vmov	s15, r3
 800acb0:	e787      	b.n	800abc2 <__ieee754_atan2f+0x26>
 800acb2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800acf0 <__ieee754_atan2f+0x154>
 800acb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acba:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800acf4 <__ieee754_atan2f+0x158>
 800acbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acc2:	e77e      	b.n	800abc2 <__ieee754_atan2f+0x26>
 800acc4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800acf4 <__ieee754_atan2f+0x158>
 800acc8:	e77b      	b.n	800abc2 <__ieee754_atan2f+0x26>
 800acca:	bf00      	nop
 800accc:	c0490fdb 	.word	0xc0490fdb
 800acd0:	3fc90fdb 	.word	0x3fc90fdb
 800acd4:	bfc90fdb 	.word	0xbfc90fdb
 800acd8:	bf490fdb 	.word	0xbf490fdb
 800acdc:	3f490fdb 	.word	0x3f490fdb
 800ace0:	4016cbe4 	.word	0x4016cbe4
 800ace4:	c016cbe4 	.word	0xc016cbe4
 800ace8:	80000000 	.word	0x80000000
 800acec:	00000000 	.word	0x00000000
 800acf0:	33bbbd2e 	.word	0x33bbbd2e
 800acf4:	40490fdb 	.word	0x40490fdb

0800acf8 <__ieee754_sqrtf>:
 800acf8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800acfc:	4770      	bx	lr

0800acfe <fabs>:
 800acfe:	ec51 0b10 	vmov	r0, r1, d0
 800ad02:	ee10 2a10 	vmov	r2, s0
 800ad06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad0a:	ec43 2b10 	vmov	d0, r2, r3
 800ad0e:	4770      	bx	lr

0800ad10 <finite>:
 800ad10:	ee10 3a90 	vmov	r3, s1
 800ad14:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ad18:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ad1c:	0fc0      	lsrs	r0, r0, #31
 800ad1e:	4770      	bx	lr

0800ad20 <matherr>:
 800ad20:	2000      	movs	r0, #0
 800ad22:	4770      	bx	lr
 800ad24:	0000      	movs	r0, r0
	...

0800ad28 <nan>:
 800ad28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad30 <nan+0x8>
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	00000000 	.word	0x00000000
 800ad34:	7ff80000 	.word	0x7ff80000

0800ad38 <rint>:
 800ad38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad3a:	ec51 0b10 	vmov	r0, r1, d0
 800ad3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ad42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ad46:	2e13      	cmp	r6, #19
 800ad48:	460b      	mov	r3, r1
 800ad4a:	ee10 4a10 	vmov	r4, s0
 800ad4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ad52:	dc56      	bgt.n	800ae02 <rint+0xca>
 800ad54:	2e00      	cmp	r6, #0
 800ad56:	da2b      	bge.n	800adb0 <rint+0x78>
 800ad58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ad5c:	4302      	orrs	r2, r0
 800ad5e:	d023      	beq.n	800ada8 <rint+0x70>
 800ad60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ad64:	4302      	orrs	r2, r0
 800ad66:	4254      	negs	r4, r2
 800ad68:	4314      	orrs	r4, r2
 800ad6a:	0c4b      	lsrs	r3, r1, #17
 800ad6c:	0b24      	lsrs	r4, r4, #12
 800ad6e:	045b      	lsls	r3, r3, #17
 800ad70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ad74:	ea44 0103 	orr.w	r1, r4, r3
 800ad78:	460b      	mov	r3, r1
 800ad7a:	492f      	ldr	r1, [pc, #188]	; (800ae38 <rint+0x100>)
 800ad7c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800ad80:	e9d1 6700 	ldrd	r6, r7, [r1]
 800ad84:	4602      	mov	r2, r0
 800ad86:	4639      	mov	r1, r7
 800ad88:	4630      	mov	r0, r6
 800ad8a:	f7f5 fa87 	bl	800029c <__adddf3>
 800ad8e:	e9cd 0100 	strd	r0, r1, [sp]
 800ad92:	463b      	mov	r3, r7
 800ad94:	4632      	mov	r2, r6
 800ad96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad9a:	f7f5 fa7d 	bl	8000298 <__aeabi_dsub>
 800ad9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ada2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ada6:	4639      	mov	r1, r7
 800ada8:	ec41 0b10 	vmov	d0, r0, r1
 800adac:	b003      	add	sp, #12
 800adae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adb0:	4a22      	ldr	r2, [pc, #136]	; (800ae3c <rint+0x104>)
 800adb2:	4132      	asrs	r2, r6
 800adb4:	ea01 0702 	and.w	r7, r1, r2
 800adb8:	4307      	orrs	r7, r0
 800adba:	d0f5      	beq.n	800ada8 <rint+0x70>
 800adbc:	0852      	lsrs	r2, r2, #1
 800adbe:	4011      	ands	r1, r2
 800adc0:	430c      	orrs	r4, r1
 800adc2:	d00b      	beq.n	800addc <rint+0xa4>
 800adc4:	ea23 0202 	bic.w	r2, r3, r2
 800adc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800adcc:	2e13      	cmp	r6, #19
 800adce:	fa43 f306 	asr.w	r3, r3, r6
 800add2:	bf0c      	ite	eq
 800add4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800add8:	2400      	movne	r4, #0
 800adda:	4313      	orrs	r3, r2
 800addc:	4916      	ldr	r1, [pc, #88]	; (800ae38 <rint+0x100>)
 800adde:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ade2:	4622      	mov	r2, r4
 800ade4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ade8:	4620      	mov	r0, r4
 800adea:	4629      	mov	r1, r5
 800adec:	f7f5 fa56 	bl	800029c <__adddf3>
 800adf0:	e9cd 0100 	strd	r0, r1, [sp]
 800adf4:	4622      	mov	r2, r4
 800adf6:	462b      	mov	r3, r5
 800adf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adfc:	f7f5 fa4c 	bl	8000298 <__aeabi_dsub>
 800ae00:	e7d2      	b.n	800ada8 <rint+0x70>
 800ae02:	2e33      	cmp	r6, #51	; 0x33
 800ae04:	dd07      	ble.n	800ae16 <rint+0xde>
 800ae06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ae0a:	d1cd      	bne.n	800ada8 <rint+0x70>
 800ae0c:	ee10 2a10 	vmov	r2, s0
 800ae10:	f7f5 fa44 	bl	800029c <__adddf3>
 800ae14:	e7c8      	b.n	800ada8 <rint+0x70>
 800ae16:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800ae1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1e:	40f2      	lsrs	r2, r6
 800ae20:	4210      	tst	r0, r2
 800ae22:	d0c1      	beq.n	800ada8 <rint+0x70>
 800ae24:	0852      	lsrs	r2, r2, #1
 800ae26:	4210      	tst	r0, r2
 800ae28:	bf1f      	itttt	ne
 800ae2a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ae2e:	ea20 0202 	bicne.w	r2, r0, r2
 800ae32:	4134      	asrne	r4, r6
 800ae34:	4314      	orrne	r4, r2
 800ae36:	e7d1      	b.n	800addc <rint+0xa4>
 800ae38:	0800fdf8 	.word	0x0800fdf8
 800ae3c:	000fffff 	.word	0x000fffff

0800ae40 <scalbn>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	ec55 4b10 	vmov	r4, r5, d0
 800ae46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	b9aa      	cbnz	r2, 800ae7c <scalbn+0x3c>
 800ae50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ae54:	4323      	orrs	r3, r4
 800ae56:	d03b      	beq.n	800aed0 <scalbn+0x90>
 800ae58:	4b31      	ldr	r3, [pc, #196]	; (800af20 <scalbn+0xe0>)
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	ee10 0a10 	vmov	r0, s0
 800ae62:	f7f5 fbd1 	bl	8000608 <__aeabi_dmul>
 800ae66:	4b2f      	ldr	r3, [pc, #188]	; (800af24 <scalbn+0xe4>)
 800ae68:	429e      	cmp	r6, r3
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	460d      	mov	r5, r1
 800ae6e:	da12      	bge.n	800ae96 <scalbn+0x56>
 800ae70:	a327      	add	r3, pc, #156	; (adr r3, 800af10 <scalbn+0xd0>)
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	f7f5 fbc7 	bl	8000608 <__aeabi_dmul>
 800ae7a:	e009      	b.n	800ae90 <scalbn+0x50>
 800ae7c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ae80:	428a      	cmp	r2, r1
 800ae82:	d10c      	bne.n	800ae9e <scalbn+0x5e>
 800ae84:	ee10 2a10 	vmov	r2, s0
 800ae88:	4620      	mov	r0, r4
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	f7f5 fa06 	bl	800029c <__adddf3>
 800ae90:	4604      	mov	r4, r0
 800ae92:	460d      	mov	r5, r1
 800ae94:	e01c      	b.n	800aed0 <scalbn+0x90>
 800ae96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	3a36      	subs	r2, #54	; 0x36
 800ae9e:	4432      	add	r2, r6
 800aea0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aea4:	428a      	cmp	r2, r1
 800aea6:	dd0b      	ble.n	800aec0 <scalbn+0x80>
 800aea8:	ec45 4b11 	vmov	d1, r4, r5
 800aeac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800af18 <scalbn+0xd8>
 800aeb0:	f000 f917 	bl	800b0e2 <copysign>
 800aeb4:	a318      	add	r3, pc, #96	; (adr r3, 800af18 <scalbn+0xd8>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	ec51 0b10 	vmov	r0, r1, d0
 800aebe:	e7da      	b.n	800ae76 <scalbn+0x36>
 800aec0:	2a00      	cmp	r2, #0
 800aec2:	dd08      	ble.n	800aed6 <scalbn+0x96>
 800aec4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aec8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aecc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aed0:	ec45 4b10 	vmov	d0, r4, r5
 800aed4:	bd70      	pop	{r4, r5, r6, pc}
 800aed6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aeda:	da0d      	bge.n	800aef8 <scalbn+0xb8>
 800aedc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aee0:	429e      	cmp	r6, r3
 800aee2:	ec45 4b11 	vmov	d1, r4, r5
 800aee6:	dce1      	bgt.n	800aeac <scalbn+0x6c>
 800aee8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800af10 <scalbn+0xd0>
 800aeec:	f000 f8f9 	bl	800b0e2 <copysign>
 800aef0:	a307      	add	r3, pc, #28	; (adr r3, 800af10 <scalbn+0xd0>)
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	e7e0      	b.n	800aeba <scalbn+0x7a>
 800aef8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aefc:	3236      	adds	r2, #54	; 0x36
 800aefe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af06:	4620      	mov	r0, r4
 800af08:	4629      	mov	r1, r5
 800af0a:	2200      	movs	r2, #0
 800af0c:	4b06      	ldr	r3, [pc, #24]	; (800af28 <scalbn+0xe8>)
 800af0e:	e7b2      	b.n	800ae76 <scalbn+0x36>
 800af10:	c2f8f359 	.word	0xc2f8f359
 800af14:	01a56e1f 	.word	0x01a56e1f
 800af18:	8800759c 	.word	0x8800759c
 800af1c:	7e37e43c 	.word	0x7e37e43c
 800af20:	43500000 	.word	0x43500000
 800af24:	ffff3cb0 	.word	0xffff3cb0
 800af28:	3c900000 	.word	0x3c900000

0800af2c <atanf>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	ee10 5a10 	vmov	r5, s0
 800af32:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800af36:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800af3a:	eef0 7a40 	vmov.f32	s15, s0
 800af3e:	db10      	blt.n	800af62 <atanf+0x36>
 800af40:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800af44:	dd04      	ble.n	800af50 <atanf+0x24>
 800af46:	ee70 7a00 	vadd.f32	s15, s0, s0
 800af4a:	eeb0 0a67 	vmov.f32	s0, s15
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b088 <atanf+0x15c>
 800af54:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b08c <atanf+0x160>
 800af58:	2d00      	cmp	r5, #0
 800af5a:	bfd8      	it	le
 800af5c:	eef0 7a47 	vmovle.f32	s15, s14
 800af60:	e7f3      	b.n	800af4a <atanf+0x1e>
 800af62:	4b4b      	ldr	r3, [pc, #300]	; (800b090 <atanf+0x164>)
 800af64:	429c      	cmp	r4, r3
 800af66:	dc10      	bgt.n	800af8a <atanf+0x5e>
 800af68:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800af6c:	da0a      	bge.n	800af84 <atanf+0x58>
 800af6e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b094 <atanf+0x168>
 800af72:	ee30 7a07 	vadd.f32	s14, s0, s14
 800af76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af7a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800af7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af82:	dce2      	bgt.n	800af4a <atanf+0x1e>
 800af84:	f04f 33ff 	mov.w	r3, #4294967295
 800af88:	e013      	b.n	800afb2 <atanf+0x86>
 800af8a:	f000 f8a3 	bl	800b0d4 <fabsf>
 800af8e:	4b42      	ldr	r3, [pc, #264]	; (800b098 <atanf+0x16c>)
 800af90:	429c      	cmp	r4, r3
 800af92:	dc4f      	bgt.n	800b034 <atanf+0x108>
 800af94:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800af98:	429c      	cmp	r4, r3
 800af9a:	dc41      	bgt.n	800b020 <atanf+0xf4>
 800af9c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800afa0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800afa4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800afa8:	2300      	movs	r3, #0
 800afaa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800afae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800afb8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b09c <atanf+0x170>
 800afbc:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b0a0 <atanf+0x174>
 800afc0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b0a4 <atanf+0x178>
 800afc4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800afc8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800afcc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b0a8 <atanf+0x17c>
 800afd0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800afd4:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b0ac <atanf+0x180>
 800afd8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800afdc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b0b0 <atanf+0x184>
 800afe0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800afe4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b0b4 <atanf+0x188>
 800afe8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800afec:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b0b8 <atanf+0x18c>
 800aff0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800aff4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b0bc <atanf+0x190>
 800aff8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800affc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b0c0 <atanf+0x194>
 800b000:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b004:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b0c4 <atanf+0x198>
 800b008:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b00c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b010:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b014:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b018:	d121      	bne.n	800b05e <atanf+0x132>
 800b01a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b01e:	e794      	b.n	800af4a <atanf+0x1e>
 800b020:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b024:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b028:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b02c:	2301      	movs	r3, #1
 800b02e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b032:	e7be      	b.n	800afb2 <atanf+0x86>
 800b034:	4b24      	ldr	r3, [pc, #144]	; (800b0c8 <atanf+0x19c>)
 800b036:	429c      	cmp	r4, r3
 800b038:	dc0b      	bgt.n	800b052 <atanf+0x126>
 800b03a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b03e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b042:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b046:	2302      	movs	r3, #2
 800b048:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b050:	e7af      	b.n	800afb2 <atanf+0x86>
 800b052:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b056:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b05a:	2303      	movs	r3, #3
 800b05c:	e7a9      	b.n	800afb2 <atanf+0x86>
 800b05e:	4a1b      	ldr	r2, [pc, #108]	; (800b0cc <atanf+0x1a0>)
 800b060:	491b      	ldr	r1, [pc, #108]	; (800b0d0 <atanf+0x1a4>)
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	441a      	add	r2, r3
 800b066:	440b      	add	r3, r1
 800b068:	edd3 6a00 	vldr	s13, [r3]
 800b06c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b070:	2d00      	cmp	r5, #0
 800b072:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b076:	ed92 7a00 	vldr	s14, [r2]
 800b07a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b07e:	bfb8      	it	lt
 800b080:	eef1 7a67 	vneglt.f32	s15, s15
 800b084:	e761      	b.n	800af4a <atanf+0x1e>
 800b086:	bf00      	nop
 800b088:	bfc90fdb 	.word	0xbfc90fdb
 800b08c:	3fc90fdb 	.word	0x3fc90fdb
 800b090:	3edfffff 	.word	0x3edfffff
 800b094:	7149f2ca 	.word	0x7149f2ca
 800b098:	3f97ffff 	.word	0x3f97ffff
 800b09c:	3c8569d7 	.word	0x3c8569d7
 800b0a0:	3d4bda59 	.word	0x3d4bda59
 800b0a4:	bd6ef16b 	.word	0xbd6ef16b
 800b0a8:	3d886b35 	.word	0x3d886b35
 800b0ac:	3dba2e6e 	.word	0x3dba2e6e
 800b0b0:	3e124925 	.word	0x3e124925
 800b0b4:	3eaaaaab 	.word	0x3eaaaaab
 800b0b8:	bd15a221 	.word	0xbd15a221
 800b0bc:	bd9d8795 	.word	0xbd9d8795
 800b0c0:	bde38e38 	.word	0xbde38e38
 800b0c4:	be4ccccd 	.word	0xbe4ccccd
 800b0c8:	401bffff 	.word	0x401bffff
 800b0cc:	0800fe08 	.word	0x0800fe08
 800b0d0:	0800fe18 	.word	0x0800fe18

0800b0d4 <fabsf>:
 800b0d4:	ee10 3a10 	vmov	r3, s0
 800b0d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0dc:	ee00 3a10 	vmov	s0, r3
 800b0e0:	4770      	bx	lr

0800b0e2 <copysign>:
 800b0e2:	ec51 0b10 	vmov	r0, r1, d0
 800b0e6:	ee11 0a90 	vmov	r0, s3
 800b0ea:	ee10 2a10 	vmov	r2, s0
 800b0ee:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b0f2:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b0f6:	ea41 0300 	orr.w	r3, r1, r0
 800b0fa:	ec43 2b10 	vmov	d0, r2, r3
 800b0fe:	4770      	bx	lr

0800b100 <__errno>:
 800b100:	4b01      	ldr	r3, [pc, #4]	; (800b108 <__errno+0x8>)
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	20000084 	.word	0x20000084

0800b10c <__libc_init_array>:
 800b10c:	b570      	push	{r4, r5, r6, lr}
 800b10e:	4e0d      	ldr	r6, [pc, #52]	; (800b144 <__libc_init_array+0x38>)
 800b110:	4c0d      	ldr	r4, [pc, #52]	; (800b148 <__libc_init_array+0x3c>)
 800b112:	1ba4      	subs	r4, r4, r6
 800b114:	10a4      	asrs	r4, r4, #2
 800b116:	2500      	movs	r5, #0
 800b118:	42a5      	cmp	r5, r4
 800b11a:	d109      	bne.n	800b130 <__libc_init_array+0x24>
 800b11c:	4e0b      	ldr	r6, [pc, #44]	; (800b14c <__libc_init_array+0x40>)
 800b11e:	4c0c      	ldr	r4, [pc, #48]	; (800b150 <__libc_init_array+0x44>)
 800b120:	f004 fa5e 	bl	800f5e0 <_init>
 800b124:	1ba4      	subs	r4, r4, r6
 800b126:	10a4      	asrs	r4, r4, #2
 800b128:	2500      	movs	r5, #0
 800b12a:	42a5      	cmp	r5, r4
 800b12c:	d105      	bne.n	800b13a <__libc_init_array+0x2e>
 800b12e:	bd70      	pop	{r4, r5, r6, pc}
 800b130:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b134:	4798      	blx	r3
 800b136:	3501      	adds	r5, #1
 800b138:	e7ee      	b.n	800b118 <__libc_init_array+0xc>
 800b13a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b13e:	4798      	blx	r3
 800b140:	3501      	adds	r5, #1
 800b142:	e7f2      	b.n	800b12a <__libc_init_array+0x1e>
 800b144:	08010148 	.word	0x08010148
 800b148:	08010148 	.word	0x08010148
 800b14c:	08010148 	.word	0x08010148
 800b150:	0801014c 	.word	0x0801014c

0800b154 <__locale_ctype_ptr_l>:
 800b154:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b158:	4770      	bx	lr

0800b15a <__ascii_mbtowc>:
 800b15a:	b082      	sub	sp, #8
 800b15c:	b901      	cbnz	r1, 800b160 <__ascii_mbtowc+0x6>
 800b15e:	a901      	add	r1, sp, #4
 800b160:	b142      	cbz	r2, 800b174 <__ascii_mbtowc+0x1a>
 800b162:	b14b      	cbz	r3, 800b178 <__ascii_mbtowc+0x1e>
 800b164:	7813      	ldrb	r3, [r2, #0]
 800b166:	600b      	str	r3, [r1, #0]
 800b168:	7812      	ldrb	r2, [r2, #0]
 800b16a:	1c10      	adds	r0, r2, #0
 800b16c:	bf18      	it	ne
 800b16e:	2001      	movne	r0, #1
 800b170:	b002      	add	sp, #8
 800b172:	4770      	bx	lr
 800b174:	4610      	mov	r0, r2
 800b176:	e7fb      	b.n	800b170 <__ascii_mbtowc+0x16>
 800b178:	f06f 0001 	mvn.w	r0, #1
 800b17c:	e7f8      	b.n	800b170 <__ascii_mbtowc+0x16>

0800b17e <memcpy>:
 800b17e:	b510      	push	{r4, lr}
 800b180:	1e43      	subs	r3, r0, #1
 800b182:	440a      	add	r2, r1
 800b184:	4291      	cmp	r1, r2
 800b186:	d100      	bne.n	800b18a <memcpy+0xc>
 800b188:	bd10      	pop	{r4, pc}
 800b18a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b18e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b192:	e7f7      	b.n	800b184 <memcpy+0x6>

0800b194 <memset>:
 800b194:	4402      	add	r2, r0
 800b196:	4603      	mov	r3, r0
 800b198:	4293      	cmp	r3, r2
 800b19a:	d100      	bne.n	800b19e <memset+0xa>
 800b19c:	4770      	bx	lr
 800b19e:	f803 1b01 	strb.w	r1, [r3], #1
 800b1a2:	e7f9      	b.n	800b198 <memset+0x4>

0800b1a4 <__cvt>:
 800b1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a8:	ec55 4b10 	vmov	r4, r5, d0
 800b1ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b1ae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b1b2:	2d00      	cmp	r5, #0
 800b1b4:	460e      	mov	r6, r1
 800b1b6:	4691      	mov	r9, r2
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	bfb8      	it	lt
 800b1bc:	4622      	movlt	r2, r4
 800b1be:	462b      	mov	r3, r5
 800b1c0:	f027 0720 	bic.w	r7, r7, #32
 800b1c4:	bfbb      	ittet	lt
 800b1c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b1ca:	461d      	movlt	r5, r3
 800b1cc:	2300      	movge	r3, #0
 800b1ce:	232d      	movlt	r3, #45	; 0x2d
 800b1d0:	bfb8      	it	lt
 800b1d2:	4614      	movlt	r4, r2
 800b1d4:	2f46      	cmp	r7, #70	; 0x46
 800b1d6:	700b      	strb	r3, [r1, #0]
 800b1d8:	d004      	beq.n	800b1e4 <__cvt+0x40>
 800b1da:	2f45      	cmp	r7, #69	; 0x45
 800b1dc:	d100      	bne.n	800b1e0 <__cvt+0x3c>
 800b1de:	3601      	adds	r6, #1
 800b1e0:	2102      	movs	r1, #2
 800b1e2:	e000      	b.n	800b1e6 <__cvt+0x42>
 800b1e4:	2103      	movs	r1, #3
 800b1e6:	ab03      	add	r3, sp, #12
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	ab02      	add	r3, sp, #8
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	4632      	mov	r2, r6
 800b1f0:	4653      	mov	r3, sl
 800b1f2:	ec45 4b10 	vmov	d0, r4, r5
 800b1f6:	f001 febf 	bl	800cf78 <_dtoa_r>
 800b1fa:	2f47      	cmp	r7, #71	; 0x47
 800b1fc:	4680      	mov	r8, r0
 800b1fe:	d102      	bne.n	800b206 <__cvt+0x62>
 800b200:	f019 0f01 	tst.w	r9, #1
 800b204:	d026      	beq.n	800b254 <__cvt+0xb0>
 800b206:	2f46      	cmp	r7, #70	; 0x46
 800b208:	eb08 0906 	add.w	r9, r8, r6
 800b20c:	d111      	bne.n	800b232 <__cvt+0x8e>
 800b20e:	f898 3000 	ldrb.w	r3, [r8]
 800b212:	2b30      	cmp	r3, #48	; 0x30
 800b214:	d10a      	bne.n	800b22c <__cvt+0x88>
 800b216:	2200      	movs	r2, #0
 800b218:	2300      	movs	r3, #0
 800b21a:	4620      	mov	r0, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	f7f5 fc5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b222:	b918      	cbnz	r0, 800b22c <__cvt+0x88>
 800b224:	f1c6 0601 	rsb	r6, r6, #1
 800b228:	f8ca 6000 	str.w	r6, [sl]
 800b22c:	f8da 3000 	ldr.w	r3, [sl]
 800b230:	4499      	add	r9, r3
 800b232:	2200      	movs	r2, #0
 800b234:	2300      	movs	r3, #0
 800b236:	4620      	mov	r0, r4
 800b238:	4629      	mov	r1, r5
 800b23a:	f7f5 fc4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b23e:	b938      	cbnz	r0, 800b250 <__cvt+0xac>
 800b240:	2230      	movs	r2, #48	; 0x30
 800b242:	9b03      	ldr	r3, [sp, #12]
 800b244:	454b      	cmp	r3, r9
 800b246:	d205      	bcs.n	800b254 <__cvt+0xb0>
 800b248:	1c59      	adds	r1, r3, #1
 800b24a:	9103      	str	r1, [sp, #12]
 800b24c:	701a      	strb	r2, [r3, #0]
 800b24e:	e7f8      	b.n	800b242 <__cvt+0x9e>
 800b250:	f8cd 900c 	str.w	r9, [sp, #12]
 800b254:	9b03      	ldr	r3, [sp, #12]
 800b256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b258:	eba3 0308 	sub.w	r3, r3, r8
 800b25c:	4640      	mov	r0, r8
 800b25e:	6013      	str	r3, [r2, #0]
 800b260:	b004      	add	sp, #16
 800b262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b266 <__exponent>:
 800b266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b268:	2900      	cmp	r1, #0
 800b26a:	4604      	mov	r4, r0
 800b26c:	bfba      	itte	lt
 800b26e:	4249      	neglt	r1, r1
 800b270:	232d      	movlt	r3, #45	; 0x2d
 800b272:	232b      	movge	r3, #43	; 0x2b
 800b274:	2909      	cmp	r1, #9
 800b276:	f804 2b02 	strb.w	r2, [r4], #2
 800b27a:	7043      	strb	r3, [r0, #1]
 800b27c:	dd20      	ble.n	800b2c0 <__exponent+0x5a>
 800b27e:	f10d 0307 	add.w	r3, sp, #7
 800b282:	461f      	mov	r7, r3
 800b284:	260a      	movs	r6, #10
 800b286:	fb91 f5f6 	sdiv	r5, r1, r6
 800b28a:	fb06 1115 	mls	r1, r6, r5, r1
 800b28e:	3130      	adds	r1, #48	; 0x30
 800b290:	2d09      	cmp	r5, #9
 800b292:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b296:	f103 32ff 	add.w	r2, r3, #4294967295
 800b29a:	4629      	mov	r1, r5
 800b29c:	dc09      	bgt.n	800b2b2 <__exponent+0x4c>
 800b29e:	3130      	adds	r1, #48	; 0x30
 800b2a0:	3b02      	subs	r3, #2
 800b2a2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b2a6:	42bb      	cmp	r3, r7
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	d304      	bcc.n	800b2b6 <__exponent+0x50>
 800b2ac:	1a10      	subs	r0, r2, r0
 800b2ae:	b003      	add	sp, #12
 800b2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	e7e7      	b.n	800b286 <__exponent+0x20>
 800b2b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ba:	f804 2b01 	strb.w	r2, [r4], #1
 800b2be:	e7f2      	b.n	800b2a6 <__exponent+0x40>
 800b2c0:	2330      	movs	r3, #48	; 0x30
 800b2c2:	4419      	add	r1, r3
 800b2c4:	7083      	strb	r3, [r0, #2]
 800b2c6:	1d02      	adds	r2, r0, #4
 800b2c8:	70c1      	strb	r1, [r0, #3]
 800b2ca:	e7ef      	b.n	800b2ac <__exponent+0x46>

0800b2cc <_printf_float>:
 800b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d0:	b08d      	sub	sp, #52	; 0x34
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b2d8:	4616      	mov	r6, r2
 800b2da:	461f      	mov	r7, r3
 800b2dc:	4605      	mov	r5, r0
 800b2de:	f003 f8a5 	bl	800e42c <_localeconv_r>
 800b2e2:	6803      	ldr	r3, [r0, #0]
 800b2e4:	9304      	str	r3, [sp, #16]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7f4 ff7a 	bl	80001e0 <strlen>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b2f0:	f8d8 3000 	ldr.w	r3, [r8]
 800b2f4:	9005      	str	r0, [sp, #20]
 800b2f6:	3307      	adds	r3, #7
 800b2f8:	f023 0307 	bic.w	r3, r3, #7
 800b2fc:	f103 0208 	add.w	r2, r3, #8
 800b300:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b304:	f8d4 b000 	ldr.w	fp, [r4]
 800b308:	f8c8 2000 	str.w	r2, [r8]
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b314:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b318:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b31c:	9307      	str	r3, [sp, #28]
 800b31e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b322:	f04f 32ff 	mov.w	r2, #4294967295
 800b326:	4ba7      	ldr	r3, [pc, #668]	; (800b5c4 <_printf_float+0x2f8>)
 800b328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b32c:	f7f5 fc06 	bl	8000b3c <__aeabi_dcmpun>
 800b330:	bb70      	cbnz	r0, 800b390 <_printf_float+0xc4>
 800b332:	f04f 32ff 	mov.w	r2, #4294967295
 800b336:	4ba3      	ldr	r3, [pc, #652]	; (800b5c4 <_printf_float+0x2f8>)
 800b338:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b33c:	f7f5 fbe0 	bl	8000b00 <__aeabi_dcmple>
 800b340:	bb30      	cbnz	r0, 800b390 <_printf_float+0xc4>
 800b342:	2200      	movs	r2, #0
 800b344:	2300      	movs	r3, #0
 800b346:	4640      	mov	r0, r8
 800b348:	4649      	mov	r1, r9
 800b34a:	f7f5 fbcf 	bl	8000aec <__aeabi_dcmplt>
 800b34e:	b110      	cbz	r0, 800b356 <_printf_float+0x8a>
 800b350:	232d      	movs	r3, #45	; 0x2d
 800b352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b356:	4a9c      	ldr	r2, [pc, #624]	; (800b5c8 <_printf_float+0x2fc>)
 800b358:	4b9c      	ldr	r3, [pc, #624]	; (800b5cc <_printf_float+0x300>)
 800b35a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b35e:	bf8c      	ite	hi
 800b360:	4690      	movhi	r8, r2
 800b362:	4698      	movls	r8, r3
 800b364:	2303      	movs	r3, #3
 800b366:	f02b 0204 	bic.w	r2, fp, #4
 800b36a:	6123      	str	r3, [r4, #16]
 800b36c:	6022      	str	r2, [r4, #0]
 800b36e:	f04f 0900 	mov.w	r9, #0
 800b372:	9700      	str	r7, [sp, #0]
 800b374:	4633      	mov	r3, r6
 800b376:	aa0b      	add	r2, sp, #44	; 0x2c
 800b378:	4621      	mov	r1, r4
 800b37a:	4628      	mov	r0, r5
 800b37c:	f000 f9e6 	bl	800b74c <_printf_common>
 800b380:	3001      	adds	r0, #1
 800b382:	f040 808d 	bne.w	800b4a0 <_printf_float+0x1d4>
 800b386:	f04f 30ff 	mov.w	r0, #4294967295
 800b38a:	b00d      	add	sp, #52	; 0x34
 800b38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b390:	4642      	mov	r2, r8
 800b392:	464b      	mov	r3, r9
 800b394:	4640      	mov	r0, r8
 800b396:	4649      	mov	r1, r9
 800b398:	f7f5 fbd0 	bl	8000b3c <__aeabi_dcmpun>
 800b39c:	b110      	cbz	r0, 800b3a4 <_printf_float+0xd8>
 800b39e:	4a8c      	ldr	r2, [pc, #560]	; (800b5d0 <_printf_float+0x304>)
 800b3a0:	4b8c      	ldr	r3, [pc, #560]	; (800b5d4 <_printf_float+0x308>)
 800b3a2:	e7da      	b.n	800b35a <_printf_float+0x8e>
 800b3a4:	6861      	ldr	r1, [r4, #4]
 800b3a6:	1c4b      	adds	r3, r1, #1
 800b3a8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b3ac:	a80a      	add	r0, sp, #40	; 0x28
 800b3ae:	d13e      	bne.n	800b42e <_printf_float+0x162>
 800b3b0:	2306      	movs	r3, #6
 800b3b2:	6063      	str	r3, [r4, #4]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b3ba:	ab09      	add	r3, sp, #36	; 0x24
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	ec49 8b10 	vmov	d0, r8, r9
 800b3c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b3c6:	6022      	str	r2, [r4, #0]
 800b3c8:	f8cd a004 	str.w	sl, [sp, #4]
 800b3cc:	6861      	ldr	r1, [r4, #4]
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f7ff fee8 	bl	800b1a4 <__cvt>
 800b3d4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b3d8:	2b47      	cmp	r3, #71	; 0x47
 800b3da:	4680      	mov	r8, r0
 800b3dc:	d109      	bne.n	800b3f2 <_printf_float+0x126>
 800b3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3e0:	1cd8      	adds	r0, r3, #3
 800b3e2:	db02      	blt.n	800b3ea <_printf_float+0x11e>
 800b3e4:	6862      	ldr	r2, [r4, #4]
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	dd47      	ble.n	800b47a <_printf_float+0x1ae>
 800b3ea:	f1aa 0a02 	sub.w	sl, sl, #2
 800b3ee:	fa5f fa8a 	uxtb.w	sl, sl
 800b3f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b3f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3f8:	d824      	bhi.n	800b444 <_printf_float+0x178>
 800b3fa:	3901      	subs	r1, #1
 800b3fc:	4652      	mov	r2, sl
 800b3fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b402:	9109      	str	r1, [sp, #36]	; 0x24
 800b404:	f7ff ff2f 	bl	800b266 <__exponent>
 800b408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b40a:	1813      	adds	r3, r2, r0
 800b40c:	2a01      	cmp	r2, #1
 800b40e:	4681      	mov	r9, r0
 800b410:	6123      	str	r3, [r4, #16]
 800b412:	dc02      	bgt.n	800b41a <_printf_float+0x14e>
 800b414:	6822      	ldr	r2, [r4, #0]
 800b416:	07d1      	lsls	r1, r2, #31
 800b418:	d501      	bpl.n	800b41e <_printf_float+0x152>
 800b41a:	3301      	adds	r3, #1
 800b41c:	6123      	str	r3, [r4, #16]
 800b41e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b422:	2b00      	cmp	r3, #0
 800b424:	d0a5      	beq.n	800b372 <_printf_float+0xa6>
 800b426:	232d      	movs	r3, #45	; 0x2d
 800b428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b42c:	e7a1      	b.n	800b372 <_printf_float+0xa6>
 800b42e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b432:	f000 8177 	beq.w	800b724 <_printf_float+0x458>
 800b436:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b43a:	d1bb      	bne.n	800b3b4 <_printf_float+0xe8>
 800b43c:	2900      	cmp	r1, #0
 800b43e:	d1b9      	bne.n	800b3b4 <_printf_float+0xe8>
 800b440:	2301      	movs	r3, #1
 800b442:	e7b6      	b.n	800b3b2 <_printf_float+0xe6>
 800b444:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b448:	d119      	bne.n	800b47e <_printf_float+0x1b2>
 800b44a:	2900      	cmp	r1, #0
 800b44c:	6863      	ldr	r3, [r4, #4]
 800b44e:	dd0c      	ble.n	800b46a <_printf_float+0x19e>
 800b450:	6121      	str	r1, [r4, #16]
 800b452:	b913      	cbnz	r3, 800b45a <_printf_float+0x18e>
 800b454:	6822      	ldr	r2, [r4, #0]
 800b456:	07d2      	lsls	r2, r2, #31
 800b458:	d502      	bpl.n	800b460 <_printf_float+0x194>
 800b45a:	3301      	adds	r3, #1
 800b45c:	440b      	add	r3, r1
 800b45e:	6123      	str	r3, [r4, #16]
 800b460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b462:	65a3      	str	r3, [r4, #88]	; 0x58
 800b464:	f04f 0900 	mov.w	r9, #0
 800b468:	e7d9      	b.n	800b41e <_printf_float+0x152>
 800b46a:	b913      	cbnz	r3, 800b472 <_printf_float+0x1a6>
 800b46c:	6822      	ldr	r2, [r4, #0]
 800b46e:	07d0      	lsls	r0, r2, #31
 800b470:	d501      	bpl.n	800b476 <_printf_float+0x1aa>
 800b472:	3302      	adds	r3, #2
 800b474:	e7f3      	b.n	800b45e <_printf_float+0x192>
 800b476:	2301      	movs	r3, #1
 800b478:	e7f1      	b.n	800b45e <_printf_float+0x192>
 800b47a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b47e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b482:	4293      	cmp	r3, r2
 800b484:	db05      	blt.n	800b492 <_printf_float+0x1c6>
 800b486:	6822      	ldr	r2, [r4, #0]
 800b488:	6123      	str	r3, [r4, #16]
 800b48a:	07d1      	lsls	r1, r2, #31
 800b48c:	d5e8      	bpl.n	800b460 <_printf_float+0x194>
 800b48e:	3301      	adds	r3, #1
 800b490:	e7e5      	b.n	800b45e <_printf_float+0x192>
 800b492:	2b00      	cmp	r3, #0
 800b494:	bfd4      	ite	le
 800b496:	f1c3 0302 	rsble	r3, r3, #2
 800b49a:	2301      	movgt	r3, #1
 800b49c:	4413      	add	r3, r2
 800b49e:	e7de      	b.n	800b45e <_printf_float+0x192>
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	055a      	lsls	r2, r3, #21
 800b4a4:	d407      	bmi.n	800b4b6 <_printf_float+0x1ea>
 800b4a6:	6923      	ldr	r3, [r4, #16]
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	47b8      	blx	r7
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d12b      	bne.n	800b50c <_printf_float+0x240>
 800b4b4:	e767      	b.n	800b386 <_printf_float+0xba>
 800b4b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b4ba:	f240 80dc 	bls.w	800b676 <_printf_float+0x3aa>
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4c6:	f7f5 fb07 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d033      	beq.n	800b536 <_printf_float+0x26a>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	4a41      	ldr	r2, [pc, #260]	; (800b5d8 <_printf_float+0x30c>)
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	47b8      	blx	r7
 800b4d8:	3001      	adds	r0, #1
 800b4da:	f43f af54 	beq.w	800b386 <_printf_float+0xba>
 800b4de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	db02      	blt.n	800b4ec <_printf_float+0x220>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	07d8      	lsls	r0, r3, #31
 800b4ea:	d50f      	bpl.n	800b50c <_printf_float+0x240>
 800b4ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	47b8      	blx	r7
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	f43f af45 	beq.w	800b386 <_printf_float+0xba>
 800b4fc:	f04f 0800 	mov.w	r8, #0
 800b500:	f104 091a 	add.w	r9, r4, #26
 800b504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b506:	3b01      	subs	r3, #1
 800b508:	4543      	cmp	r3, r8
 800b50a:	dc09      	bgt.n	800b520 <_printf_float+0x254>
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	079b      	lsls	r3, r3, #30
 800b510:	f100 8103 	bmi.w	800b71a <_printf_float+0x44e>
 800b514:	68e0      	ldr	r0, [r4, #12]
 800b516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b518:	4298      	cmp	r0, r3
 800b51a:	bfb8      	it	lt
 800b51c:	4618      	movlt	r0, r3
 800b51e:	e734      	b.n	800b38a <_printf_float+0xbe>
 800b520:	2301      	movs	r3, #1
 800b522:	464a      	mov	r2, r9
 800b524:	4631      	mov	r1, r6
 800b526:	4628      	mov	r0, r5
 800b528:	47b8      	blx	r7
 800b52a:	3001      	adds	r0, #1
 800b52c:	f43f af2b 	beq.w	800b386 <_printf_float+0xba>
 800b530:	f108 0801 	add.w	r8, r8, #1
 800b534:	e7e6      	b.n	800b504 <_printf_float+0x238>
 800b536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b538:	2b00      	cmp	r3, #0
 800b53a:	dc2b      	bgt.n	800b594 <_printf_float+0x2c8>
 800b53c:	2301      	movs	r3, #1
 800b53e:	4a26      	ldr	r2, [pc, #152]	; (800b5d8 <_printf_float+0x30c>)
 800b540:	4631      	mov	r1, r6
 800b542:	4628      	mov	r0, r5
 800b544:	47b8      	blx	r7
 800b546:	3001      	adds	r0, #1
 800b548:	f43f af1d 	beq.w	800b386 <_printf_float+0xba>
 800b54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b54e:	b923      	cbnz	r3, 800b55a <_printf_float+0x28e>
 800b550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b552:	b913      	cbnz	r3, 800b55a <_printf_float+0x28e>
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	07d9      	lsls	r1, r3, #31
 800b558:	d5d8      	bpl.n	800b50c <_printf_float+0x240>
 800b55a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b55e:	4631      	mov	r1, r6
 800b560:	4628      	mov	r0, r5
 800b562:	47b8      	blx	r7
 800b564:	3001      	adds	r0, #1
 800b566:	f43f af0e 	beq.w	800b386 <_printf_float+0xba>
 800b56a:	f04f 0900 	mov.w	r9, #0
 800b56e:	f104 0a1a 	add.w	sl, r4, #26
 800b572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b574:	425b      	negs	r3, r3
 800b576:	454b      	cmp	r3, r9
 800b578:	dc01      	bgt.n	800b57e <_printf_float+0x2b2>
 800b57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b57c:	e794      	b.n	800b4a8 <_printf_float+0x1dc>
 800b57e:	2301      	movs	r3, #1
 800b580:	4652      	mov	r2, sl
 800b582:	4631      	mov	r1, r6
 800b584:	4628      	mov	r0, r5
 800b586:	47b8      	blx	r7
 800b588:	3001      	adds	r0, #1
 800b58a:	f43f aefc 	beq.w	800b386 <_printf_float+0xba>
 800b58e:	f109 0901 	add.w	r9, r9, #1
 800b592:	e7ee      	b.n	800b572 <_printf_float+0x2a6>
 800b594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b598:	429a      	cmp	r2, r3
 800b59a:	bfa8      	it	ge
 800b59c:	461a      	movge	r2, r3
 800b59e:	2a00      	cmp	r2, #0
 800b5a0:	4691      	mov	r9, r2
 800b5a2:	dd07      	ble.n	800b5b4 <_printf_float+0x2e8>
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	4631      	mov	r1, r6
 800b5a8:	4642      	mov	r2, r8
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	47b8      	blx	r7
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	f43f aee9 	beq.w	800b386 <_printf_float+0xba>
 800b5b4:	f104 031a 	add.w	r3, r4, #26
 800b5b8:	f04f 0b00 	mov.w	fp, #0
 800b5bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5c0:	9306      	str	r3, [sp, #24]
 800b5c2:	e015      	b.n	800b5f0 <_printf_float+0x324>
 800b5c4:	7fefffff 	.word	0x7fefffff
 800b5c8:	0800fdbf 	.word	0x0800fdbf
 800b5cc:	0800fe36 	.word	0x0800fe36
 800b5d0:	0800fe3e 	.word	0x0800fe3e
 800b5d4:	0800fe3a 	.word	0x0800fe3a
 800b5d8:	0800fe42 	.word	0x0800fe42
 800b5dc:	2301      	movs	r3, #1
 800b5de:	9a06      	ldr	r2, [sp, #24]
 800b5e0:	4631      	mov	r1, r6
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	47b8      	blx	r7
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	f43f aecd 	beq.w	800b386 <_printf_float+0xba>
 800b5ec:	f10b 0b01 	add.w	fp, fp, #1
 800b5f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b5f4:	ebaa 0309 	sub.w	r3, sl, r9
 800b5f8:	455b      	cmp	r3, fp
 800b5fa:	dcef      	bgt.n	800b5dc <_printf_float+0x310>
 800b5fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b600:	429a      	cmp	r2, r3
 800b602:	44d0      	add	r8, sl
 800b604:	db15      	blt.n	800b632 <_printf_float+0x366>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	07da      	lsls	r2, r3, #31
 800b60a:	d412      	bmi.n	800b632 <_printf_float+0x366>
 800b60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b60e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b610:	eba3 020a 	sub.w	r2, r3, sl
 800b614:	eba3 0a01 	sub.w	sl, r3, r1
 800b618:	4592      	cmp	sl, r2
 800b61a:	bfa8      	it	ge
 800b61c:	4692      	movge	sl, r2
 800b61e:	f1ba 0f00 	cmp.w	sl, #0
 800b622:	dc0e      	bgt.n	800b642 <_printf_float+0x376>
 800b624:	f04f 0800 	mov.w	r8, #0
 800b628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b62c:	f104 091a 	add.w	r9, r4, #26
 800b630:	e019      	b.n	800b666 <_printf_float+0x39a>
 800b632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b636:	4631      	mov	r1, r6
 800b638:	4628      	mov	r0, r5
 800b63a:	47b8      	blx	r7
 800b63c:	3001      	adds	r0, #1
 800b63e:	d1e5      	bne.n	800b60c <_printf_float+0x340>
 800b640:	e6a1      	b.n	800b386 <_printf_float+0xba>
 800b642:	4653      	mov	r3, sl
 800b644:	4642      	mov	r2, r8
 800b646:	4631      	mov	r1, r6
 800b648:	4628      	mov	r0, r5
 800b64a:	47b8      	blx	r7
 800b64c:	3001      	adds	r0, #1
 800b64e:	d1e9      	bne.n	800b624 <_printf_float+0x358>
 800b650:	e699      	b.n	800b386 <_printf_float+0xba>
 800b652:	2301      	movs	r3, #1
 800b654:	464a      	mov	r2, r9
 800b656:	4631      	mov	r1, r6
 800b658:	4628      	mov	r0, r5
 800b65a:	47b8      	blx	r7
 800b65c:	3001      	adds	r0, #1
 800b65e:	f43f ae92 	beq.w	800b386 <_printf_float+0xba>
 800b662:	f108 0801 	add.w	r8, r8, #1
 800b666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b66a:	1a9b      	subs	r3, r3, r2
 800b66c:	eba3 030a 	sub.w	r3, r3, sl
 800b670:	4543      	cmp	r3, r8
 800b672:	dcee      	bgt.n	800b652 <_printf_float+0x386>
 800b674:	e74a      	b.n	800b50c <_printf_float+0x240>
 800b676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b678:	2a01      	cmp	r2, #1
 800b67a:	dc01      	bgt.n	800b680 <_printf_float+0x3b4>
 800b67c:	07db      	lsls	r3, r3, #31
 800b67e:	d53a      	bpl.n	800b6f6 <_printf_float+0x42a>
 800b680:	2301      	movs	r3, #1
 800b682:	4642      	mov	r2, r8
 800b684:	4631      	mov	r1, r6
 800b686:	4628      	mov	r0, r5
 800b688:	47b8      	blx	r7
 800b68a:	3001      	adds	r0, #1
 800b68c:	f43f ae7b 	beq.w	800b386 <_printf_float+0xba>
 800b690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b694:	4631      	mov	r1, r6
 800b696:	4628      	mov	r0, r5
 800b698:	47b8      	blx	r7
 800b69a:	3001      	adds	r0, #1
 800b69c:	f108 0801 	add.w	r8, r8, #1
 800b6a0:	f43f ae71 	beq.w	800b386 <_printf_float+0xba>
 800b6a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f103 3aff 	add.w	sl, r3, #4294967295
 800b6ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f7f5 fa11 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6b6:	b9c8      	cbnz	r0, 800b6ec <_printf_float+0x420>
 800b6b8:	4653      	mov	r3, sl
 800b6ba:	4642      	mov	r2, r8
 800b6bc:	4631      	mov	r1, r6
 800b6be:	4628      	mov	r0, r5
 800b6c0:	47b8      	blx	r7
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	d10e      	bne.n	800b6e4 <_printf_float+0x418>
 800b6c6:	e65e      	b.n	800b386 <_printf_float+0xba>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	4652      	mov	r2, sl
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	47b8      	blx	r7
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	f43f ae57 	beq.w	800b386 <_printf_float+0xba>
 800b6d8:	f108 0801 	add.w	r8, r8, #1
 800b6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	4543      	cmp	r3, r8
 800b6e2:	dcf1      	bgt.n	800b6c8 <_printf_float+0x3fc>
 800b6e4:	464b      	mov	r3, r9
 800b6e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b6ea:	e6de      	b.n	800b4aa <_printf_float+0x1de>
 800b6ec:	f04f 0800 	mov.w	r8, #0
 800b6f0:	f104 0a1a 	add.w	sl, r4, #26
 800b6f4:	e7f2      	b.n	800b6dc <_printf_float+0x410>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e7df      	b.n	800b6ba <_printf_float+0x3ee>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	464a      	mov	r2, r9
 800b6fe:	4631      	mov	r1, r6
 800b700:	4628      	mov	r0, r5
 800b702:	47b8      	blx	r7
 800b704:	3001      	adds	r0, #1
 800b706:	f43f ae3e 	beq.w	800b386 <_printf_float+0xba>
 800b70a:	f108 0801 	add.w	r8, r8, #1
 800b70e:	68e3      	ldr	r3, [r4, #12]
 800b710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b712:	1a9b      	subs	r3, r3, r2
 800b714:	4543      	cmp	r3, r8
 800b716:	dcf0      	bgt.n	800b6fa <_printf_float+0x42e>
 800b718:	e6fc      	b.n	800b514 <_printf_float+0x248>
 800b71a:	f04f 0800 	mov.w	r8, #0
 800b71e:	f104 0919 	add.w	r9, r4, #25
 800b722:	e7f4      	b.n	800b70e <_printf_float+0x442>
 800b724:	2900      	cmp	r1, #0
 800b726:	f43f ae8b 	beq.w	800b440 <_printf_float+0x174>
 800b72a:	2300      	movs	r3, #0
 800b72c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b730:	ab09      	add	r3, sp, #36	; 0x24
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	ec49 8b10 	vmov	d0, r8, r9
 800b738:	6022      	str	r2, [r4, #0]
 800b73a:	f8cd a004 	str.w	sl, [sp, #4]
 800b73e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b742:	4628      	mov	r0, r5
 800b744:	f7ff fd2e 	bl	800b1a4 <__cvt>
 800b748:	4680      	mov	r8, r0
 800b74a:	e648      	b.n	800b3de <_printf_float+0x112>

0800b74c <_printf_common>:
 800b74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b750:	4691      	mov	r9, r2
 800b752:	461f      	mov	r7, r3
 800b754:	688a      	ldr	r2, [r1, #8]
 800b756:	690b      	ldr	r3, [r1, #16]
 800b758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b75c:	4293      	cmp	r3, r2
 800b75e:	bfb8      	it	lt
 800b760:	4613      	movlt	r3, r2
 800b762:	f8c9 3000 	str.w	r3, [r9]
 800b766:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b76a:	4606      	mov	r6, r0
 800b76c:	460c      	mov	r4, r1
 800b76e:	b112      	cbz	r2, 800b776 <_printf_common+0x2a>
 800b770:	3301      	adds	r3, #1
 800b772:	f8c9 3000 	str.w	r3, [r9]
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	0699      	lsls	r1, r3, #26
 800b77a:	bf42      	ittt	mi
 800b77c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b780:	3302      	addmi	r3, #2
 800b782:	f8c9 3000 	strmi.w	r3, [r9]
 800b786:	6825      	ldr	r5, [r4, #0]
 800b788:	f015 0506 	ands.w	r5, r5, #6
 800b78c:	d107      	bne.n	800b79e <_printf_common+0x52>
 800b78e:	f104 0a19 	add.w	sl, r4, #25
 800b792:	68e3      	ldr	r3, [r4, #12]
 800b794:	f8d9 2000 	ldr.w	r2, [r9]
 800b798:	1a9b      	subs	r3, r3, r2
 800b79a:	42ab      	cmp	r3, r5
 800b79c:	dc28      	bgt.n	800b7f0 <_printf_common+0xa4>
 800b79e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b7a2:	6822      	ldr	r2, [r4, #0]
 800b7a4:	3300      	adds	r3, #0
 800b7a6:	bf18      	it	ne
 800b7a8:	2301      	movne	r3, #1
 800b7aa:	0692      	lsls	r2, r2, #26
 800b7ac:	d42d      	bmi.n	800b80a <_printf_common+0xbe>
 800b7ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	47c0      	blx	r8
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d020      	beq.n	800b7fe <_printf_common+0xb2>
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	68e5      	ldr	r5, [r4, #12]
 800b7c0:	f8d9 2000 	ldr.w	r2, [r9]
 800b7c4:	f003 0306 	and.w	r3, r3, #6
 800b7c8:	2b04      	cmp	r3, #4
 800b7ca:	bf08      	it	eq
 800b7cc:	1aad      	subeq	r5, r5, r2
 800b7ce:	68a3      	ldr	r3, [r4, #8]
 800b7d0:	6922      	ldr	r2, [r4, #16]
 800b7d2:	bf0c      	ite	eq
 800b7d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7d8:	2500      	movne	r5, #0
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	bfc4      	itt	gt
 800b7de:	1a9b      	subgt	r3, r3, r2
 800b7e0:	18ed      	addgt	r5, r5, r3
 800b7e2:	f04f 0900 	mov.w	r9, #0
 800b7e6:	341a      	adds	r4, #26
 800b7e8:	454d      	cmp	r5, r9
 800b7ea:	d11a      	bne.n	800b822 <_printf_common+0xd6>
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	e008      	b.n	800b802 <_printf_common+0xb6>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	4652      	mov	r2, sl
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	47c0      	blx	r8
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	d103      	bne.n	800b806 <_printf_common+0xba>
 800b7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b806:	3501      	adds	r5, #1
 800b808:	e7c3      	b.n	800b792 <_printf_common+0x46>
 800b80a:	18e1      	adds	r1, r4, r3
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	2030      	movs	r0, #48	; 0x30
 800b810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b814:	4422      	add	r2, r4
 800b816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b81a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b81e:	3302      	adds	r3, #2
 800b820:	e7c5      	b.n	800b7ae <_printf_common+0x62>
 800b822:	2301      	movs	r3, #1
 800b824:	4622      	mov	r2, r4
 800b826:	4639      	mov	r1, r7
 800b828:	4630      	mov	r0, r6
 800b82a:	47c0      	blx	r8
 800b82c:	3001      	adds	r0, #1
 800b82e:	d0e6      	beq.n	800b7fe <_printf_common+0xb2>
 800b830:	f109 0901 	add.w	r9, r9, #1
 800b834:	e7d8      	b.n	800b7e8 <_printf_common+0x9c>
	...

0800b838 <_printf_i>:
 800b838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b83c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b840:	460c      	mov	r4, r1
 800b842:	7e09      	ldrb	r1, [r1, #24]
 800b844:	b085      	sub	sp, #20
 800b846:	296e      	cmp	r1, #110	; 0x6e
 800b848:	4617      	mov	r7, r2
 800b84a:	4606      	mov	r6, r0
 800b84c:	4698      	mov	r8, r3
 800b84e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b850:	f000 80b3 	beq.w	800b9ba <_printf_i+0x182>
 800b854:	d822      	bhi.n	800b89c <_printf_i+0x64>
 800b856:	2963      	cmp	r1, #99	; 0x63
 800b858:	d036      	beq.n	800b8c8 <_printf_i+0x90>
 800b85a:	d80a      	bhi.n	800b872 <_printf_i+0x3a>
 800b85c:	2900      	cmp	r1, #0
 800b85e:	f000 80b9 	beq.w	800b9d4 <_printf_i+0x19c>
 800b862:	2958      	cmp	r1, #88	; 0x58
 800b864:	f000 8083 	beq.w	800b96e <_printf_i+0x136>
 800b868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b86c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b870:	e032      	b.n	800b8d8 <_printf_i+0xa0>
 800b872:	2964      	cmp	r1, #100	; 0x64
 800b874:	d001      	beq.n	800b87a <_printf_i+0x42>
 800b876:	2969      	cmp	r1, #105	; 0x69
 800b878:	d1f6      	bne.n	800b868 <_printf_i+0x30>
 800b87a:	6820      	ldr	r0, [r4, #0]
 800b87c:	6813      	ldr	r3, [r2, #0]
 800b87e:	0605      	lsls	r5, r0, #24
 800b880:	f103 0104 	add.w	r1, r3, #4
 800b884:	d52a      	bpl.n	800b8dc <_printf_i+0xa4>
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6011      	str	r1, [r2, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	da03      	bge.n	800b896 <_printf_i+0x5e>
 800b88e:	222d      	movs	r2, #45	; 0x2d
 800b890:	425b      	negs	r3, r3
 800b892:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b896:	486f      	ldr	r0, [pc, #444]	; (800ba54 <_printf_i+0x21c>)
 800b898:	220a      	movs	r2, #10
 800b89a:	e039      	b.n	800b910 <_printf_i+0xd8>
 800b89c:	2973      	cmp	r1, #115	; 0x73
 800b89e:	f000 809d 	beq.w	800b9dc <_printf_i+0x1a4>
 800b8a2:	d808      	bhi.n	800b8b6 <_printf_i+0x7e>
 800b8a4:	296f      	cmp	r1, #111	; 0x6f
 800b8a6:	d020      	beq.n	800b8ea <_printf_i+0xb2>
 800b8a8:	2970      	cmp	r1, #112	; 0x70
 800b8aa:	d1dd      	bne.n	800b868 <_printf_i+0x30>
 800b8ac:	6823      	ldr	r3, [r4, #0]
 800b8ae:	f043 0320 	orr.w	r3, r3, #32
 800b8b2:	6023      	str	r3, [r4, #0]
 800b8b4:	e003      	b.n	800b8be <_printf_i+0x86>
 800b8b6:	2975      	cmp	r1, #117	; 0x75
 800b8b8:	d017      	beq.n	800b8ea <_printf_i+0xb2>
 800b8ba:	2978      	cmp	r1, #120	; 0x78
 800b8bc:	d1d4      	bne.n	800b868 <_printf_i+0x30>
 800b8be:	2378      	movs	r3, #120	; 0x78
 800b8c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8c4:	4864      	ldr	r0, [pc, #400]	; (800ba58 <_printf_i+0x220>)
 800b8c6:	e055      	b.n	800b974 <_printf_i+0x13c>
 800b8c8:	6813      	ldr	r3, [r2, #0]
 800b8ca:	1d19      	adds	r1, r3, #4
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	6011      	str	r1, [r2, #0]
 800b8d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e08c      	b.n	800b9f6 <_printf_i+0x1be>
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6011      	str	r1, [r2, #0]
 800b8e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8e4:	bf18      	it	ne
 800b8e6:	b21b      	sxthne	r3, r3
 800b8e8:	e7cf      	b.n	800b88a <_printf_i+0x52>
 800b8ea:	6813      	ldr	r3, [r2, #0]
 800b8ec:	6825      	ldr	r5, [r4, #0]
 800b8ee:	1d18      	adds	r0, r3, #4
 800b8f0:	6010      	str	r0, [r2, #0]
 800b8f2:	0628      	lsls	r0, r5, #24
 800b8f4:	d501      	bpl.n	800b8fa <_printf_i+0xc2>
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	e002      	b.n	800b900 <_printf_i+0xc8>
 800b8fa:	0668      	lsls	r0, r5, #25
 800b8fc:	d5fb      	bpl.n	800b8f6 <_printf_i+0xbe>
 800b8fe:	881b      	ldrh	r3, [r3, #0]
 800b900:	4854      	ldr	r0, [pc, #336]	; (800ba54 <_printf_i+0x21c>)
 800b902:	296f      	cmp	r1, #111	; 0x6f
 800b904:	bf14      	ite	ne
 800b906:	220a      	movne	r2, #10
 800b908:	2208      	moveq	r2, #8
 800b90a:	2100      	movs	r1, #0
 800b90c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b910:	6865      	ldr	r5, [r4, #4]
 800b912:	60a5      	str	r5, [r4, #8]
 800b914:	2d00      	cmp	r5, #0
 800b916:	f2c0 8095 	blt.w	800ba44 <_printf_i+0x20c>
 800b91a:	6821      	ldr	r1, [r4, #0]
 800b91c:	f021 0104 	bic.w	r1, r1, #4
 800b920:	6021      	str	r1, [r4, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d13d      	bne.n	800b9a2 <_printf_i+0x16a>
 800b926:	2d00      	cmp	r5, #0
 800b928:	f040 808e 	bne.w	800ba48 <_printf_i+0x210>
 800b92c:	4665      	mov	r5, ip
 800b92e:	2a08      	cmp	r2, #8
 800b930:	d10b      	bne.n	800b94a <_printf_i+0x112>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	07db      	lsls	r3, r3, #31
 800b936:	d508      	bpl.n	800b94a <_printf_i+0x112>
 800b938:	6923      	ldr	r3, [r4, #16]
 800b93a:	6862      	ldr	r2, [r4, #4]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	bfde      	ittt	le
 800b940:	2330      	movle	r3, #48	; 0x30
 800b942:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b946:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b94a:	ebac 0305 	sub.w	r3, ip, r5
 800b94e:	6123      	str	r3, [r4, #16]
 800b950:	f8cd 8000 	str.w	r8, [sp]
 800b954:	463b      	mov	r3, r7
 800b956:	aa03      	add	r2, sp, #12
 800b958:	4621      	mov	r1, r4
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7ff fef6 	bl	800b74c <_printf_common>
 800b960:	3001      	adds	r0, #1
 800b962:	d14d      	bne.n	800ba00 <_printf_i+0x1c8>
 800b964:	f04f 30ff 	mov.w	r0, #4294967295
 800b968:	b005      	add	sp, #20
 800b96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b96e:	4839      	ldr	r0, [pc, #228]	; (800ba54 <_printf_i+0x21c>)
 800b970:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b974:	6813      	ldr	r3, [r2, #0]
 800b976:	6821      	ldr	r1, [r4, #0]
 800b978:	1d1d      	adds	r5, r3, #4
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6015      	str	r5, [r2, #0]
 800b97e:	060a      	lsls	r2, r1, #24
 800b980:	d50b      	bpl.n	800b99a <_printf_i+0x162>
 800b982:	07ca      	lsls	r2, r1, #31
 800b984:	bf44      	itt	mi
 800b986:	f041 0120 	orrmi.w	r1, r1, #32
 800b98a:	6021      	strmi	r1, [r4, #0]
 800b98c:	b91b      	cbnz	r3, 800b996 <_printf_i+0x15e>
 800b98e:	6822      	ldr	r2, [r4, #0]
 800b990:	f022 0220 	bic.w	r2, r2, #32
 800b994:	6022      	str	r2, [r4, #0]
 800b996:	2210      	movs	r2, #16
 800b998:	e7b7      	b.n	800b90a <_printf_i+0xd2>
 800b99a:	064d      	lsls	r5, r1, #25
 800b99c:	bf48      	it	mi
 800b99e:	b29b      	uxthmi	r3, r3
 800b9a0:	e7ef      	b.n	800b982 <_printf_i+0x14a>
 800b9a2:	4665      	mov	r5, ip
 800b9a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9a8:	fb02 3311 	mls	r3, r2, r1, r3
 800b9ac:	5cc3      	ldrb	r3, [r0, r3]
 800b9ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	2900      	cmp	r1, #0
 800b9b6:	d1f5      	bne.n	800b9a4 <_printf_i+0x16c>
 800b9b8:	e7b9      	b.n	800b92e <_printf_i+0xf6>
 800b9ba:	6813      	ldr	r3, [r2, #0]
 800b9bc:	6825      	ldr	r5, [r4, #0]
 800b9be:	6961      	ldr	r1, [r4, #20]
 800b9c0:	1d18      	adds	r0, r3, #4
 800b9c2:	6010      	str	r0, [r2, #0]
 800b9c4:	0628      	lsls	r0, r5, #24
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	d501      	bpl.n	800b9ce <_printf_i+0x196>
 800b9ca:	6019      	str	r1, [r3, #0]
 800b9cc:	e002      	b.n	800b9d4 <_printf_i+0x19c>
 800b9ce:	066a      	lsls	r2, r5, #25
 800b9d0:	d5fb      	bpl.n	800b9ca <_printf_i+0x192>
 800b9d2:	8019      	strh	r1, [r3, #0]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	6123      	str	r3, [r4, #16]
 800b9d8:	4665      	mov	r5, ip
 800b9da:	e7b9      	b.n	800b950 <_printf_i+0x118>
 800b9dc:	6813      	ldr	r3, [r2, #0]
 800b9de:	1d19      	adds	r1, r3, #4
 800b9e0:	6011      	str	r1, [r2, #0]
 800b9e2:	681d      	ldr	r5, [r3, #0]
 800b9e4:	6862      	ldr	r2, [r4, #4]
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	f7f4 fc01 	bl	80001f0 <memchr>
 800b9ee:	b108      	cbz	r0, 800b9f4 <_printf_i+0x1bc>
 800b9f0:	1b40      	subs	r0, r0, r5
 800b9f2:	6060      	str	r0, [r4, #4]
 800b9f4:	6863      	ldr	r3, [r4, #4]
 800b9f6:	6123      	str	r3, [r4, #16]
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9fe:	e7a7      	b.n	800b950 <_printf_i+0x118>
 800ba00:	6923      	ldr	r3, [r4, #16]
 800ba02:	462a      	mov	r2, r5
 800ba04:	4639      	mov	r1, r7
 800ba06:	4630      	mov	r0, r6
 800ba08:	47c0      	blx	r8
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	d0aa      	beq.n	800b964 <_printf_i+0x12c>
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	079b      	lsls	r3, r3, #30
 800ba12:	d413      	bmi.n	800ba3c <_printf_i+0x204>
 800ba14:	68e0      	ldr	r0, [r4, #12]
 800ba16:	9b03      	ldr	r3, [sp, #12]
 800ba18:	4298      	cmp	r0, r3
 800ba1a:	bfb8      	it	lt
 800ba1c:	4618      	movlt	r0, r3
 800ba1e:	e7a3      	b.n	800b968 <_printf_i+0x130>
 800ba20:	2301      	movs	r3, #1
 800ba22:	464a      	mov	r2, r9
 800ba24:	4639      	mov	r1, r7
 800ba26:	4630      	mov	r0, r6
 800ba28:	47c0      	blx	r8
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	d09a      	beq.n	800b964 <_printf_i+0x12c>
 800ba2e:	3501      	adds	r5, #1
 800ba30:	68e3      	ldr	r3, [r4, #12]
 800ba32:	9a03      	ldr	r2, [sp, #12]
 800ba34:	1a9b      	subs	r3, r3, r2
 800ba36:	42ab      	cmp	r3, r5
 800ba38:	dcf2      	bgt.n	800ba20 <_printf_i+0x1e8>
 800ba3a:	e7eb      	b.n	800ba14 <_printf_i+0x1dc>
 800ba3c:	2500      	movs	r5, #0
 800ba3e:	f104 0919 	add.w	r9, r4, #25
 800ba42:	e7f5      	b.n	800ba30 <_printf_i+0x1f8>
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1ac      	bne.n	800b9a2 <_printf_i+0x16a>
 800ba48:	7803      	ldrb	r3, [r0, #0]
 800ba4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba52:	e76c      	b.n	800b92e <_printf_i+0xf6>
 800ba54:	0800fe44 	.word	0x0800fe44
 800ba58:	0800fe55 	.word	0x0800fe55

0800ba5c <_scanf_float>:
 800ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba60:	469a      	mov	sl, r3
 800ba62:	688b      	ldr	r3, [r1, #8]
 800ba64:	4616      	mov	r6, r2
 800ba66:	1e5a      	subs	r2, r3, #1
 800ba68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ba6c:	b087      	sub	sp, #28
 800ba6e:	bf83      	ittte	hi
 800ba70:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800ba74:	189b      	addhi	r3, r3, r2
 800ba76:	9301      	strhi	r3, [sp, #4]
 800ba78:	2300      	movls	r3, #0
 800ba7a:	bf86      	itte	hi
 800ba7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ba80:	608b      	strhi	r3, [r1, #8]
 800ba82:	9301      	strls	r3, [sp, #4]
 800ba84:	680b      	ldr	r3, [r1, #0]
 800ba86:	4688      	mov	r8, r1
 800ba88:	f04f 0b00 	mov.w	fp, #0
 800ba8c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ba90:	f848 3b1c 	str.w	r3, [r8], #28
 800ba94:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800ba98:	4607      	mov	r7, r0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	4645      	mov	r5, r8
 800ba9e:	465a      	mov	r2, fp
 800baa0:	46d9      	mov	r9, fp
 800baa2:	f8cd b008 	str.w	fp, [sp, #8]
 800baa6:	68a1      	ldr	r1, [r4, #8]
 800baa8:	b181      	cbz	r1, 800bacc <_scanf_float+0x70>
 800baaa:	6833      	ldr	r3, [r6, #0]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	2b49      	cmp	r3, #73	; 0x49
 800bab0:	d071      	beq.n	800bb96 <_scanf_float+0x13a>
 800bab2:	d84d      	bhi.n	800bb50 <_scanf_float+0xf4>
 800bab4:	2b39      	cmp	r3, #57	; 0x39
 800bab6:	d840      	bhi.n	800bb3a <_scanf_float+0xde>
 800bab8:	2b31      	cmp	r3, #49	; 0x31
 800baba:	f080 8088 	bcs.w	800bbce <_scanf_float+0x172>
 800babe:	2b2d      	cmp	r3, #45	; 0x2d
 800bac0:	f000 8090 	beq.w	800bbe4 <_scanf_float+0x188>
 800bac4:	d815      	bhi.n	800baf2 <_scanf_float+0x96>
 800bac6:	2b2b      	cmp	r3, #43	; 0x2b
 800bac8:	f000 808c 	beq.w	800bbe4 <_scanf_float+0x188>
 800bacc:	f1b9 0f00 	cmp.w	r9, #0
 800bad0:	d003      	beq.n	800bada <_scanf_float+0x7e>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	3a01      	subs	r2, #1
 800badc:	2a01      	cmp	r2, #1
 800bade:	f200 80ea 	bhi.w	800bcb6 <_scanf_float+0x25a>
 800bae2:	4545      	cmp	r5, r8
 800bae4:	f200 80dc 	bhi.w	800bca0 <_scanf_float+0x244>
 800bae8:	2601      	movs	r6, #1
 800baea:	4630      	mov	r0, r6
 800baec:	b007      	add	sp, #28
 800baee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf2:	2b2e      	cmp	r3, #46	; 0x2e
 800baf4:	f000 809f 	beq.w	800bc36 <_scanf_float+0x1da>
 800baf8:	2b30      	cmp	r3, #48	; 0x30
 800bafa:	d1e7      	bne.n	800bacc <_scanf_float+0x70>
 800bafc:	6820      	ldr	r0, [r4, #0]
 800bafe:	f410 7f80 	tst.w	r0, #256	; 0x100
 800bb02:	d064      	beq.n	800bbce <_scanf_float+0x172>
 800bb04:	9b01      	ldr	r3, [sp, #4]
 800bb06:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800bb0a:	6020      	str	r0, [r4, #0]
 800bb0c:	f109 0901 	add.w	r9, r9, #1
 800bb10:	b11b      	cbz	r3, 800bb1a <_scanf_float+0xbe>
 800bb12:	3b01      	subs	r3, #1
 800bb14:	3101      	adds	r1, #1
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	60a1      	str	r1, [r4, #8]
 800bb1a:	68a3      	ldr	r3, [r4, #8]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	60a3      	str	r3, [r4, #8]
 800bb20:	6923      	ldr	r3, [r4, #16]
 800bb22:	3301      	adds	r3, #1
 800bb24:	6123      	str	r3, [r4, #16]
 800bb26:	6873      	ldr	r3, [r6, #4]
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	6073      	str	r3, [r6, #4]
 800bb2e:	f340 80ac 	ble.w	800bc8a <_scanf_float+0x22e>
 800bb32:	6833      	ldr	r3, [r6, #0]
 800bb34:	3301      	adds	r3, #1
 800bb36:	6033      	str	r3, [r6, #0]
 800bb38:	e7b5      	b.n	800baa6 <_scanf_float+0x4a>
 800bb3a:	2b45      	cmp	r3, #69	; 0x45
 800bb3c:	f000 8085 	beq.w	800bc4a <_scanf_float+0x1ee>
 800bb40:	2b46      	cmp	r3, #70	; 0x46
 800bb42:	d06a      	beq.n	800bc1a <_scanf_float+0x1be>
 800bb44:	2b41      	cmp	r3, #65	; 0x41
 800bb46:	d1c1      	bne.n	800bacc <_scanf_float+0x70>
 800bb48:	2a01      	cmp	r2, #1
 800bb4a:	d1bf      	bne.n	800bacc <_scanf_float+0x70>
 800bb4c:	2202      	movs	r2, #2
 800bb4e:	e046      	b.n	800bbde <_scanf_float+0x182>
 800bb50:	2b65      	cmp	r3, #101	; 0x65
 800bb52:	d07a      	beq.n	800bc4a <_scanf_float+0x1ee>
 800bb54:	d818      	bhi.n	800bb88 <_scanf_float+0x12c>
 800bb56:	2b54      	cmp	r3, #84	; 0x54
 800bb58:	d066      	beq.n	800bc28 <_scanf_float+0x1cc>
 800bb5a:	d811      	bhi.n	800bb80 <_scanf_float+0x124>
 800bb5c:	2b4e      	cmp	r3, #78	; 0x4e
 800bb5e:	d1b5      	bne.n	800bacc <_scanf_float+0x70>
 800bb60:	2a00      	cmp	r2, #0
 800bb62:	d146      	bne.n	800bbf2 <_scanf_float+0x196>
 800bb64:	f1b9 0f00 	cmp.w	r9, #0
 800bb68:	d145      	bne.n	800bbf6 <_scanf_float+0x19a>
 800bb6a:	6821      	ldr	r1, [r4, #0]
 800bb6c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800bb70:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bb74:	d13f      	bne.n	800bbf6 <_scanf_float+0x19a>
 800bb76:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bb7a:	6021      	str	r1, [r4, #0]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	e02e      	b.n	800bbde <_scanf_float+0x182>
 800bb80:	2b59      	cmp	r3, #89	; 0x59
 800bb82:	d01e      	beq.n	800bbc2 <_scanf_float+0x166>
 800bb84:	2b61      	cmp	r3, #97	; 0x61
 800bb86:	e7de      	b.n	800bb46 <_scanf_float+0xea>
 800bb88:	2b6e      	cmp	r3, #110	; 0x6e
 800bb8a:	d0e9      	beq.n	800bb60 <_scanf_float+0x104>
 800bb8c:	d815      	bhi.n	800bbba <_scanf_float+0x15e>
 800bb8e:	2b66      	cmp	r3, #102	; 0x66
 800bb90:	d043      	beq.n	800bc1a <_scanf_float+0x1be>
 800bb92:	2b69      	cmp	r3, #105	; 0x69
 800bb94:	d19a      	bne.n	800bacc <_scanf_float+0x70>
 800bb96:	f1bb 0f00 	cmp.w	fp, #0
 800bb9a:	d138      	bne.n	800bc0e <_scanf_float+0x1b2>
 800bb9c:	f1b9 0f00 	cmp.w	r9, #0
 800bba0:	d197      	bne.n	800bad2 <_scanf_float+0x76>
 800bba2:	6821      	ldr	r1, [r4, #0]
 800bba4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800bba8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bbac:	d195      	bne.n	800bada <_scanf_float+0x7e>
 800bbae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bbb2:	6021      	str	r1, [r4, #0]
 800bbb4:	f04f 0b01 	mov.w	fp, #1
 800bbb8:	e011      	b.n	800bbde <_scanf_float+0x182>
 800bbba:	2b74      	cmp	r3, #116	; 0x74
 800bbbc:	d034      	beq.n	800bc28 <_scanf_float+0x1cc>
 800bbbe:	2b79      	cmp	r3, #121	; 0x79
 800bbc0:	d184      	bne.n	800bacc <_scanf_float+0x70>
 800bbc2:	f1bb 0f07 	cmp.w	fp, #7
 800bbc6:	d181      	bne.n	800bacc <_scanf_float+0x70>
 800bbc8:	f04f 0b08 	mov.w	fp, #8
 800bbcc:	e007      	b.n	800bbde <_scanf_float+0x182>
 800bbce:	eb12 0f0b 	cmn.w	r2, fp
 800bbd2:	f47f af7b 	bne.w	800bacc <_scanf_float+0x70>
 800bbd6:	6821      	ldr	r1, [r4, #0]
 800bbd8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800bbdc:	6021      	str	r1, [r4, #0]
 800bbde:	702b      	strb	r3, [r5, #0]
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	e79a      	b.n	800bb1a <_scanf_float+0xbe>
 800bbe4:	6821      	ldr	r1, [r4, #0]
 800bbe6:	0608      	lsls	r0, r1, #24
 800bbe8:	f57f af70 	bpl.w	800bacc <_scanf_float+0x70>
 800bbec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bbf0:	e7f4      	b.n	800bbdc <_scanf_float+0x180>
 800bbf2:	2a02      	cmp	r2, #2
 800bbf4:	d047      	beq.n	800bc86 <_scanf_float+0x22a>
 800bbf6:	f1bb 0f01 	cmp.w	fp, #1
 800bbfa:	d003      	beq.n	800bc04 <_scanf_float+0x1a8>
 800bbfc:	f1bb 0f04 	cmp.w	fp, #4
 800bc00:	f47f af64 	bne.w	800bacc <_scanf_float+0x70>
 800bc04:	f10b 0b01 	add.w	fp, fp, #1
 800bc08:	fa5f fb8b 	uxtb.w	fp, fp
 800bc0c:	e7e7      	b.n	800bbde <_scanf_float+0x182>
 800bc0e:	f1bb 0f03 	cmp.w	fp, #3
 800bc12:	d0f7      	beq.n	800bc04 <_scanf_float+0x1a8>
 800bc14:	f1bb 0f05 	cmp.w	fp, #5
 800bc18:	e7f2      	b.n	800bc00 <_scanf_float+0x1a4>
 800bc1a:	f1bb 0f02 	cmp.w	fp, #2
 800bc1e:	f47f af55 	bne.w	800bacc <_scanf_float+0x70>
 800bc22:	f04f 0b03 	mov.w	fp, #3
 800bc26:	e7da      	b.n	800bbde <_scanf_float+0x182>
 800bc28:	f1bb 0f06 	cmp.w	fp, #6
 800bc2c:	f47f af4e 	bne.w	800bacc <_scanf_float+0x70>
 800bc30:	f04f 0b07 	mov.w	fp, #7
 800bc34:	e7d3      	b.n	800bbde <_scanf_float+0x182>
 800bc36:	6821      	ldr	r1, [r4, #0]
 800bc38:	0588      	lsls	r0, r1, #22
 800bc3a:	f57f af47 	bpl.w	800bacc <_scanf_float+0x70>
 800bc3e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800bc42:	6021      	str	r1, [r4, #0]
 800bc44:	f8cd 9008 	str.w	r9, [sp, #8]
 800bc48:	e7c9      	b.n	800bbde <_scanf_float+0x182>
 800bc4a:	6821      	ldr	r1, [r4, #0]
 800bc4c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800bc50:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bc54:	d006      	beq.n	800bc64 <_scanf_float+0x208>
 800bc56:	0548      	lsls	r0, r1, #21
 800bc58:	f57f af38 	bpl.w	800bacc <_scanf_float+0x70>
 800bc5c:	f1b9 0f00 	cmp.w	r9, #0
 800bc60:	f43f af3b 	beq.w	800bada <_scanf_float+0x7e>
 800bc64:	0588      	lsls	r0, r1, #22
 800bc66:	bf58      	it	pl
 800bc68:	9802      	ldrpl	r0, [sp, #8]
 800bc6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bc6e:	bf58      	it	pl
 800bc70:	eba9 0000 	subpl.w	r0, r9, r0
 800bc74:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800bc78:	bf58      	it	pl
 800bc7a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800bc7e:	6021      	str	r1, [r4, #0]
 800bc80:	f04f 0900 	mov.w	r9, #0
 800bc84:	e7ab      	b.n	800bbde <_scanf_float+0x182>
 800bc86:	2203      	movs	r2, #3
 800bc88:	e7a9      	b.n	800bbde <_scanf_float+0x182>
 800bc8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc8e:	9205      	str	r2, [sp, #20]
 800bc90:	4631      	mov	r1, r6
 800bc92:	4638      	mov	r0, r7
 800bc94:	4798      	blx	r3
 800bc96:	9a05      	ldr	r2, [sp, #20]
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	f43f af04 	beq.w	800baa6 <_scanf_float+0x4a>
 800bc9e:	e715      	b.n	800bacc <_scanf_float+0x70>
 800bca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bca4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bca8:	4632      	mov	r2, r6
 800bcaa:	4638      	mov	r0, r7
 800bcac:	4798      	blx	r3
 800bcae:	6923      	ldr	r3, [r4, #16]
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	6123      	str	r3, [r4, #16]
 800bcb4:	e715      	b.n	800bae2 <_scanf_float+0x86>
 800bcb6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bcba:	2b06      	cmp	r3, #6
 800bcbc:	d80a      	bhi.n	800bcd4 <_scanf_float+0x278>
 800bcbe:	f1bb 0f02 	cmp.w	fp, #2
 800bcc2:	d968      	bls.n	800bd96 <_scanf_float+0x33a>
 800bcc4:	f1ab 0b03 	sub.w	fp, fp, #3
 800bcc8:	fa5f fb8b 	uxtb.w	fp, fp
 800bccc:	eba5 0b0b 	sub.w	fp, r5, fp
 800bcd0:	455d      	cmp	r5, fp
 800bcd2:	d14b      	bne.n	800bd6c <_scanf_float+0x310>
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	05da      	lsls	r2, r3, #23
 800bcd8:	d51f      	bpl.n	800bd1a <_scanf_float+0x2be>
 800bcda:	055b      	lsls	r3, r3, #21
 800bcdc:	d468      	bmi.n	800bdb0 <_scanf_float+0x354>
 800bcde:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bce2:	6923      	ldr	r3, [r4, #16]
 800bce4:	2965      	cmp	r1, #101	; 0x65
 800bce6:	f103 33ff 	add.w	r3, r3, #4294967295
 800bcea:	f105 3bff 	add.w	fp, r5, #4294967295
 800bcee:	6123      	str	r3, [r4, #16]
 800bcf0:	d00d      	beq.n	800bd0e <_scanf_float+0x2b2>
 800bcf2:	2945      	cmp	r1, #69	; 0x45
 800bcf4:	d00b      	beq.n	800bd0e <_scanf_float+0x2b2>
 800bcf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcfa:	4632      	mov	r2, r6
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	4798      	blx	r3
 800bd00:	6923      	ldr	r3, [r4, #16]
 800bd02:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	f1a5 0b02 	sub.w	fp, r5, #2
 800bd0c:	6123      	str	r3, [r4, #16]
 800bd0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd12:	4632      	mov	r2, r6
 800bd14:	4638      	mov	r0, r7
 800bd16:	4798      	blx	r3
 800bd18:	465d      	mov	r5, fp
 800bd1a:	6826      	ldr	r6, [r4, #0]
 800bd1c:	f016 0610 	ands.w	r6, r6, #16
 800bd20:	d17a      	bne.n	800be18 <_scanf_float+0x3bc>
 800bd22:	702e      	strb	r6, [r5, #0]
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bd2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd2e:	d142      	bne.n	800bdb6 <_scanf_float+0x35a>
 800bd30:	9b02      	ldr	r3, [sp, #8]
 800bd32:	eba9 0303 	sub.w	r3, r9, r3
 800bd36:	425a      	negs	r2, r3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d149      	bne.n	800bdd0 <_scanf_float+0x374>
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	4641      	mov	r1, r8
 800bd40:	4638      	mov	r0, r7
 800bd42:	f000 ff21 	bl	800cb88 <_strtod_r>
 800bd46:	6825      	ldr	r5, [r4, #0]
 800bd48:	f8da 3000 	ldr.w	r3, [sl]
 800bd4c:	f015 0f02 	tst.w	r5, #2
 800bd50:	f103 0204 	add.w	r2, r3, #4
 800bd54:	ec59 8b10 	vmov	r8, r9, d0
 800bd58:	f8ca 2000 	str.w	r2, [sl]
 800bd5c:	d043      	beq.n	800bde6 <_scanf_float+0x38a>
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	e9c3 8900 	strd	r8, r9, [r3]
 800bd64:	68e3      	ldr	r3, [r4, #12]
 800bd66:	3301      	adds	r3, #1
 800bd68:	60e3      	str	r3, [r4, #12]
 800bd6a:	e6be      	b.n	800baea <_scanf_float+0x8e>
 800bd6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bd74:	4632      	mov	r2, r6
 800bd76:	4638      	mov	r0, r7
 800bd78:	4798      	blx	r3
 800bd7a:	6923      	ldr	r3, [r4, #16]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	6123      	str	r3, [r4, #16]
 800bd80:	e7a6      	b.n	800bcd0 <_scanf_float+0x274>
 800bd82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd86:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bd8a:	4632      	mov	r2, r6
 800bd8c:	4638      	mov	r0, r7
 800bd8e:	4798      	blx	r3
 800bd90:	6923      	ldr	r3, [r4, #16]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	6123      	str	r3, [r4, #16]
 800bd96:	4545      	cmp	r5, r8
 800bd98:	d8f3      	bhi.n	800bd82 <_scanf_float+0x326>
 800bd9a:	e6a5      	b.n	800bae8 <_scanf_float+0x8c>
 800bd9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bda0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bda4:	4632      	mov	r2, r6
 800bda6:	4638      	mov	r0, r7
 800bda8:	4798      	blx	r3
 800bdaa:	6923      	ldr	r3, [r4, #16]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	6123      	str	r3, [r4, #16]
 800bdb0:	4545      	cmp	r5, r8
 800bdb2:	d8f3      	bhi.n	800bd9c <_scanf_float+0x340>
 800bdb4:	e698      	b.n	800bae8 <_scanf_float+0x8c>
 800bdb6:	9b03      	ldr	r3, [sp, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d0bf      	beq.n	800bd3c <_scanf_float+0x2e0>
 800bdbc:	9904      	ldr	r1, [sp, #16]
 800bdbe:	230a      	movs	r3, #10
 800bdc0:	4632      	mov	r2, r6
 800bdc2:	3101      	adds	r1, #1
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	f000 ff6b 	bl	800cca0 <_strtol_r>
 800bdca:	9b03      	ldr	r3, [sp, #12]
 800bdcc:	9d04      	ldr	r5, [sp, #16]
 800bdce:	1ac2      	subs	r2, r0, r3
 800bdd0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bdd4:	429d      	cmp	r5, r3
 800bdd6:	bf28      	it	cs
 800bdd8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800bddc:	490f      	ldr	r1, [pc, #60]	; (800be1c <_scanf_float+0x3c0>)
 800bdde:	4628      	mov	r0, r5
 800bde0:	f000 f8a0 	bl	800bf24 <siprintf>
 800bde4:	e7aa      	b.n	800bd3c <_scanf_float+0x2e0>
 800bde6:	f015 0504 	ands.w	r5, r5, #4
 800bdea:	d1b8      	bne.n	800bd5e <_scanf_float+0x302>
 800bdec:	681f      	ldr	r7, [r3, #0]
 800bdee:	ee10 2a10 	vmov	r2, s0
 800bdf2:	464b      	mov	r3, r9
 800bdf4:	ee10 0a10 	vmov	r0, s0
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	f7f4 fe9f 	bl	8000b3c <__aeabi_dcmpun>
 800bdfe:	b128      	cbz	r0, 800be0c <_scanf_float+0x3b0>
 800be00:	4628      	mov	r0, r5
 800be02:	f000 f889 	bl	800bf18 <nanf>
 800be06:	ed87 0a00 	vstr	s0, [r7]
 800be0a:	e7ab      	b.n	800bd64 <_scanf_float+0x308>
 800be0c:	4640      	mov	r0, r8
 800be0e:	4649      	mov	r1, r9
 800be10:	f7f4 fef2 	bl	8000bf8 <__aeabi_d2f>
 800be14:	6038      	str	r0, [r7, #0]
 800be16:	e7a5      	b.n	800bd64 <_scanf_float+0x308>
 800be18:	2600      	movs	r6, #0
 800be1a:	e666      	b.n	800baea <_scanf_float+0x8e>
 800be1c:	0800fe66 	.word	0x0800fe66

0800be20 <iprintf>:
 800be20:	b40f      	push	{r0, r1, r2, r3}
 800be22:	4b0a      	ldr	r3, [pc, #40]	; (800be4c <iprintf+0x2c>)
 800be24:	b513      	push	{r0, r1, r4, lr}
 800be26:	681c      	ldr	r4, [r3, #0]
 800be28:	b124      	cbz	r4, 800be34 <iprintf+0x14>
 800be2a:	69a3      	ldr	r3, [r4, #24]
 800be2c:	b913      	cbnz	r3, 800be34 <iprintf+0x14>
 800be2e:	4620      	mov	r0, r4
 800be30:	f001 ff4a 	bl	800dcc8 <__sinit>
 800be34:	ab05      	add	r3, sp, #20
 800be36:	9a04      	ldr	r2, [sp, #16]
 800be38:	68a1      	ldr	r1, [r4, #8]
 800be3a:	9301      	str	r3, [sp, #4]
 800be3c:	4620      	mov	r0, r4
 800be3e:	f003 f9a1 	bl	800f184 <_vfiprintf_r>
 800be42:	b002      	add	sp, #8
 800be44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be48:	b004      	add	sp, #16
 800be4a:	4770      	bx	lr
 800be4c:	20000084 	.word	0x20000084

0800be50 <_puts_r>:
 800be50:	b570      	push	{r4, r5, r6, lr}
 800be52:	460e      	mov	r6, r1
 800be54:	4605      	mov	r5, r0
 800be56:	b118      	cbz	r0, 800be60 <_puts_r+0x10>
 800be58:	6983      	ldr	r3, [r0, #24]
 800be5a:	b90b      	cbnz	r3, 800be60 <_puts_r+0x10>
 800be5c:	f001 ff34 	bl	800dcc8 <__sinit>
 800be60:	69ab      	ldr	r3, [r5, #24]
 800be62:	68ac      	ldr	r4, [r5, #8]
 800be64:	b913      	cbnz	r3, 800be6c <_puts_r+0x1c>
 800be66:	4628      	mov	r0, r5
 800be68:	f001 ff2e 	bl	800dcc8 <__sinit>
 800be6c:	4b23      	ldr	r3, [pc, #140]	; (800befc <_puts_r+0xac>)
 800be6e:	429c      	cmp	r4, r3
 800be70:	d117      	bne.n	800bea2 <_puts_r+0x52>
 800be72:	686c      	ldr	r4, [r5, #4]
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	071b      	lsls	r3, r3, #28
 800be78:	d51d      	bpl.n	800beb6 <_puts_r+0x66>
 800be7a:	6923      	ldr	r3, [r4, #16]
 800be7c:	b1db      	cbz	r3, 800beb6 <_puts_r+0x66>
 800be7e:	3e01      	subs	r6, #1
 800be80:	68a3      	ldr	r3, [r4, #8]
 800be82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be86:	3b01      	subs	r3, #1
 800be88:	60a3      	str	r3, [r4, #8]
 800be8a:	b9e9      	cbnz	r1, 800bec8 <_puts_r+0x78>
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	da2e      	bge.n	800beee <_puts_r+0x9e>
 800be90:	4622      	mov	r2, r4
 800be92:	210a      	movs	r1, #10
 800be94:	4628      	mov	r0, r5
 800be96:	f000 ff15 	bl	800ccc4 <__swbuf_r>
 800be9a:	3001      	adds	r0, #1
 800be9c:	d011      	beq.n	800bec2 <_puts_r+0x72>
 800be9e:	200a      	movs	r0, #10
 800bea0:	e011      	b.n	800bec6 <_puts_r+0x76>
 800bea2:	4b17      	ldr	r3, [pc, #92]	; (800bf00 <_puts_r+0xb0>)
 800bea4:	429c      	cmp	r4, r3
 800bea6:	d101      	bne.n	800beac <_puts_r+0x5c>
 800bea8:	68ac      	ldr	r4, [r5, #8]
 800beaa:	e7e3      	b.n	800be74 <_puts_r+0x24>
 800beac:	4b15      	ldr	r3, [pc, #84]	; (800bf04 <_puts_r+0xb4>)
 800beae:	429c      	cmp	r4, r3
 800beb0:	bf08      	it	eq
 800beb2:	68ec      	ldreq	r4, [r5, #12]
 800beb4:	e7de      	b.n	800be74 <_puts_r+0x24>
 800beb6:	4621      	mov	r1, r4
 800beb8:	4628      	mov	r0, r5
 800beba:	f000 ff63 	bl	800cd84 <__swsetup_r>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d0dd      	beq.n	800be7e <_puts_r+0x2e>
 800bec2:	f04f 30ff 	mov.w	r0, #4294967295
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	2b00      	cmp	r3, #0
 800beca:	da04      	bge.n	800bed6 <_puts_r+0x86>
 800becc:	69a2      	ldr	r2, [r4, #24]
 800bece:	429a      	cmp	r2, r3
 800bed0:	dc06      	bgt.n	800bee0 <_puts_r+0x90>
 800bed2:	290a      	cmp	r1, #10
 800bed4:	d004      	beq.n	800bee0 <_puts_r+0x90>
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	1c5a      	adds	r2, r3, #1
 800beda:	6022      	str	r2, [r4, #0]
 800bedc:	7019      	strb	r1, [r3, #0]
 800bede:	e7cf      	b.n	800be80 <_puts_r+0x30>
 800bee0:	4622      	mov	r2, r4
 800bee2:	4628      	mov	r0, r5
 800bee4:	f000 feee 	bl	800ccc4 <__swbuf_r>
 800bee8:	3001      	adds	r0, #1
 800beea:	d1c9      	bne.n	800be80 <_puts_r+0x30>
 800beec:	e7e9      	b.n	800bec2 <_puts_r+0x72>
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	200a      	movs	r0, #10
 800bef2:	1c5a      	adds	r2, r3, #1
 800bef4:	6022      	str	r2, [r4, #0]
 800bef6:	7018      	strb	r0, [r3, #0]
 800bef8:	e7e5      	b.n	800bec6 <_puts_r+0x76>
 800befa:	bf00      	nop
 800befc:	0800fff0 	.word	0x0800fff0
 800bf00:	08010010 	.word	0x08010010
 800bf04:	0800ffd0 	.word	0x0800ffd0

0800bf08 <puts>:
 800bf08:	4b02      	ldr	r3, [pc, #8]	; (800bf14 <puts+0xc>)
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	6818      	ldr	r0, [r3, #0]
 800bf0e:	f7ff bf9f 	b.w	800be50 <_puts_r>
 800bf12:	bf00      	nop
 800bf14:	20000084 	.word	0x20000084

0800bf18 <nanf>:
 800bf18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf20 <nanf+0x8>
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	7fc00000 	.word	0x7fc00000

0800bf24 <siprintf>:
 800bf24:	b40e      	push	{r1, r2, r3}
 800bf26:	b500      	push	{lr}
 800bf28:	b09c      	sub	sp, #112	; 0x70
 800bf2a:	ab1d      	add	r3, sp, #116	; 0x74
 800bf2c:	9002      	str	r0, [sp, #8]
 800bf2e:	9006      	str	r0, [sp, #24]
 800bf30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf34:	4809      	ldr	r0, [pc, #36]	; (800bf5c <siprintf+0x38>)
 800bf36:	9107      	str	r1, [sp, #28]
 800bf38:	9104      	str	r1, [sp, #16]
 800bf3a:	4909      	ldr	r1, [pc, #36]	; (800bf60 <siprintf+0x3c>)
 800bf3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf40:	9105      	str	r1, [sp, #20]
 800bf42:	6800      	ldr	r0, [r0, #0]
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	a902      	add	r1, sp, #8
 800bf48:	f002 fffa 	bl	800ef40 <_svfiprintf_r>
 800bf4c:	9b02      	ldr	r3, [sp, #8]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	701a      	strb	r2, [r3, #0]
 800bf52:	b01c      	add	sp, #112	; 0x70
 800bf54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf58:	b003      	add	sp, #12
 800bf5a:	4770      	bx	lr
 800bf5c:	20000084 	.word	0x20000084
 800bf60:	ffff0208 	.word	0xffff0208

0800bf64 <sulp>:
 800bf64:	b570      	push	{r4, r5, r6, lr}
 800bf66:	4604      	mov	r4, r0
 800bf68:	460d      	mov	r5, r1
 800bf6a:	ec45 4b10 	vmov	d0, r4, r5
 800bf6e:	4616      	mov	r6, r2
 800bf70:	f002 fda2 	bl	800eab8 <__ulp>
 800bf74:	ec51 0b10 	vmov	r0, r1, d0
 800bf78:	b17e      	cbz	r6, 800bf9a <sulp+0x36>
 800bf7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	dd09      	ble.n	800bf9a <sulp+0x36>
 800bf86:	051b      	lsls	r3, r3, #20
 800bf88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bf8c:	2400      	movs	r4, #0
 800bf8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bf92:	4622      	mov	r2, r4
 800bf94:	462b      	mov	r3, r5
 800bf96:	f7f4 fb37 	bl	8000608 <__aeabi_dmul>
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	0000      	movs	r0, r0
	...

0800bfa0 <_strtod_l>:
 800bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa4:	461f      	mov	r7, r3
 800bfa6:	b0a1      	sub	sp, #132	; 0x84
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4681      	mov	r9, r0
 800bfac:	4638      	mov	r0, r7
 800bfae:	460e      	mov	r6, r1
 800bfb0:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfb2:	931c      	str	r3, [sp, #112]	; 0x70
 800bfb4:	f002 fa38 	bl	800e428 <__localeconv_l>
 800bfb8:	4680      	mov	r8, r0
 800bfba:	6800      	ldr	r0, [r0, #0]
 800bfbc:	f7f4 f910 	bl	80001e0 <strlen>
 800bfc0:	f04f 0a00 	mov.w	sl, #0
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	f04f 0b00 	mov.w	fp, #0
 800bfca:	961b      	str	r6, [sp, #108]	; 0x6c
 800bfcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfce:	781a      	ldrb	r2, [r3, #0]
 800bfd0:	2a0d      	cmp	r2, #13
 800bfd2:	d832      	bhi.n	800c03a <_strtod_l+0x9a>
 800bfd4:	2a09      	cmp	r2, #9
 800bfd6:	d236      	bcs.n	800c046 <_strtod_l+0xa6>
 800bfd8:	2a00      	cmp	r2, #0
 800bfda:	d03e      	beq.n	800c05a <_strtod_l+0xba>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	930d      	str	r3, [sp, #52]	; 0x34
 800bfe0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bfe2:	782b      	ldrb	r3, [r5, #0]
 800bfe4:	2b30      	cmp	r3, #48	; 0x30
 800bfe6:	f040 80ac 	bne.w	800c142 <_strtod_l+0x1a2>
 800bfea:	786b      	ldrb	r3, [r5, #1]
 800bfec:	2b58      	cmp	r3, #88	; 0x58
 800bfee:	d001      	beq.n	800bff4 <_strtod_l+0x54>
 800bff0:	2b78      	cmp	r3, #120	; 0x78
 800bff2:	d167      	bne.n	800c0c4 <_strtod_l+0x124>
 800bff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	ab1c      	add	r3, sp, #112	; 0x70
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	9702      	str	r7, [sp, #8]
 800bffe:	ab1d      	add	r3, sp, #116	; 0x74
 800c000:	4a88      	ldr	r2, [pc, #544]	; (800c224 <_strtod_l+0x284>)
 800c002:	a91b      	add	r1, sp, #108	; 0x6c
 800c004:	4648      	mov	r0, r9
 800c006:	f001 ff38 	bl	800de7a <__gethex>
 800c00a:	f010 0407 	ands.w	r4, r0, #7
 800c00e:	4606      	mov	r6, r0
 800c010:	d005      	beq.n	800c01e <_strtod_l+0x7e>
 800c012:	2c06      	cmp	r4, #6
 800c014:	d12b      	bne.n	800c06e <_strtod_l+0xce>
 800c016:	3501      	adds	r5, #1
 800c018:	2300      	movs	r3, #0
 800c01a:	951b      	str	r5, [sp, #108]	; 0x6c
 800c01c:	930d      	str	r3, [sp, #52]	; 0x34
 800c01e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c020:	2b00      	cmp	r3, #0
 800c022:	f040 859a 	bne.w	800cb5a <_strtod_l+0xbba>
 800c026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c028:	b1e3      	cbz	r3, 800c064 <_strtod_l+0xc4>
 800c02a:	4652      	mov	r2, sl
 800c02c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c030:	ec43 2b10 	vmov	d0, r2, r3
 800c034:	b021      	add	sp, #132	; 0x84
 800c036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03a:	2a2b      	cmp	r2, #43	; 0x2b
 800c03c:	d015      	beq.n	800c06a <_strtod_l+0xca>
 800c03e:	2a2d      	cmp	r2, #45	; 0x2d
 800c040:	d004      	beq.n	800c04c <_strtod_l+0xac>
 800c042:	2a20      	cmp	r2, #32
 800c044:	d1ca      	bne.n	800bfdc <_strtod_l+0x3c>
 800c046:	3301      	adds	r3, #1
 800c048:	931b      	str	r3, [sp, #108]	; 0x6c
 800c04a:	e7bf      	b.n	800bfcc <_strtod_l+0x2c>
 800c04c:	2201      	movs	r2, #1
 800c04e:	920d      	str	r2, [sp, #52]	; 0x34
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	921b      	str	r2, [sp, #108]	; 0x6c
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1c2      	bne.n	800bfe0 <_strtod_l+0x40>
 800c05a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c05c:	961b      	str	r6, [sp, #108]	; 0x6c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f040 8579 	bne.w	800cb56 <_strtod_l+0xbb6>
 800c064:	4652      	mov	r2, sl
 800c066:	465b      	mov	r3, fp
 800c068:	e7e2      	b.n	800c030 <_strtod_l+0x90>
 800c06a:	2200      	movs	r2, #0
 800c06c:	e7ef      	b.n	800c04e <_strtod_l+0xae>
 800c06e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c070:	b13a      	cbz	r2, 800c082 <_strtod_l+0xe2>
 800c072:	2135      	movs	r1, #53	; 0x35
 800c074:	a81e      	add	r0, sp, #120	; 0x78
 800c076:	f002 fe17 	bl	800eca8 <__copybits>
 800c07a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c07c:	4648      	mov	r0, r9
 800c07e:	f002 fa83 	bl	800e588 <_Bfree>
 800c082:	3c01      	subs	r4, #1
 800c084:	2c04      	cmp	r4, #4
 800c086:	d806      	bhi.n	800c096 <_strtod_l+0xf6>
 800c088:	e8df f004 	tbb	[pc, r4]
 800c08c:	1714030a 	.word	0x1714030a
 800c090:	0a          	.byte	0x0a
 800c091:	00          	.byte	0x00
 800c092:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800c096:	0730      	lsls	r0, r6, #28
 800c098:	d5c1      	bpl.n	800c01e <_strtod_l+0x7e>
 800c09a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c09e:	e7be      	b.n	800c01e <_strtod_l+0x7e>
 800c0a0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800c0a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c0a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c0aa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c0ae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c0b2:	e7f0      	b.n	800c096 <_strtod_l+0xf6>
 800c0b4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800c228 <_strtod_l+0x288>
 800c0b8:	e7ed      	b.n	800c096 <_strtod_l+0xf6>
 800c0ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c0be:	f04f 3aff 	mov.w	sl, #4294967295
 800c0c2:	e7e8      	b.n	800c096 <_strtod_l+0xf6>
 800c0c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0c6:	1c5a      	adds	r2, r3, #1
 800c0c8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c0ca:	785b      	ldrb	r3, [r3, #1]
 800c0cc:	2b30      	cmp	r3, #48	; 0x30
 800c0ce:	d0f9      	beq.n	800c0c4 <_strtod_l+0x124>
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d0a4      	beq.n	800c01e <_strtod_l+0x7e>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	2500      	movs	r5, #0
 800c0d8:	9306      	str	r3, [sp, #24]
 800c0da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0dc:	9308      	str	r3, [sp, #32]
 800c0de:	9507      	str	r5, [sp, #28]
 800c0e0:	9505      	str	r5, [sp, #20]
 800c0e2:	220a      	movs	r2, #10
 800c0e4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c0e6:	7807      	ldrb	r7, [r0, #0]
 800c0e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c0ec:	b2d9      	uxtb	r1, r3
 800c0ee:	2909      	cmp	r1, #9
 800c0f0:	d929      	bls.n	800c146 <_strtod_l+0x1a6>
 800c0f2:	4622      	mov	r2, r4
 800c0f4:	f8d8 1000 	ldr.w	r1, [r8]
 800c0f8:	f003 f9ad 	bl	800f456 <strncmp>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d031      	beq.n	800c164 <_strtod_l+0x1c4>
 800c100:	2000      	movs	r0, #0
 800c102:	9c05      	ldr	r4, [sp, #20]
 800c104:	9004      	str	r0, [sp, #16]
 800c106:	463b      	mov	r3, r7
 800c108:	4602      	mov	r2, r0
 800c10a:	2b65      	cmp	r3, #101	; 0x65
 800c10c:	d001      	beq.n	800c112 <_strtod_l+0x172>
 800c10e:	2b45      	cmp	r3, #69	; 0x45
 800c110:	d114      	bne.n	800c13c <_strtod_l+0x19c>
 800c112:	b924      	cbnz	r4, 800c11e <_strtod_l+0x17e>
 800c114:	b910      	cbnz	r0, 800c11c <_strtod_l+0x17c>
 800c116:	9b06      	ldr	r3, [sp, #24]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d09e      	beq.n	800c05a <_strtod_l+0xba>
 800c11c:	2400      	movs	r4, #0
 800c11e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c120:	1c73      	adds	r3, r6, #1
 800c122:	931b      	str	r3, [sp, #108]	; 0x6c
 800c124:	7873      	ldrb	r3, [r6, #1]
 800c126:	2b2b      	cmp	r3, #43	; 0x2b
 800c128:	d078      	beq.n	800c21c <_strtod_l+0x27c>
 800c12a:	2b2d      	cmp	r3, #45	; 0x2d
 800c12c:	d070      	beq.n	800c210 <_strtod_l+0x270>
 800c12e:	f04f 0c00 	mov.w	ip, #0
 800c132:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c136:	2f09      	cmp	r7, #9
 800c138:	d97c      	bls.n	800c234 <_strtod_l+0x294>
 800c13a:	961b      	str	r6, [sp, #108]	; 0x6c
 800c13c:	f04f 0e00 	mov.w	lr, #0
 800c140:	e09a      	b.n	800c278 <_strtod_l+0x2d8>
 800c142:	2300      	movs	r3, #0
 800c144:	e7c7      	b.n	800c0d6 <_strtod_l+0x136>
 800c146:	9905      	ldr	r1, [sp, #20]
 800c148:	2908      	cmp	r1, #8
 800c14a:	bfdd      	ittte	le
 800c14c:	9907      	ldrle	r1, [sp, #28]
 800c14e:	fb02 3301 	mlale	r3, r2, r1, r3
 800c152:	9307      	strle	r3, [sp, #28]
 800c154:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c158:	9b05      	ldr	r3, [sp, #20]
 800c15a:	3001      	adds	r0, #1
 800c15c:	3301      	adds	r3, #1
 800c15e:	9305      	str	r3, [sp, #20]
 800c160:	901b      	str	r0, [sp, #108]	; 0x6c
 800c162:	e7bf      	b.n	800c0e4 <_strtod_l+0x144>
 800c164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c166:	191a      	adds	r2, r3, r4
 800c168:	921b      	str	r2, [sp, #108]	; 0x6c
 800c16a:	9a05      	ldr	r2, [sp, #20]
 800c16c:	5d1b      	ldrb	r3, [r3, r4]
 800c16e:	2a00      	cmp	r2, #0
 800c170:	d037      	beq.n	800c1e2 <_strtod_l+0x242>
 800c172:	9c05      	ldr	r4, [sp, #20]
 800c174:	4602      	mov	r2, r0
 800c176:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c17a:	2909      	cmp	r1, #9
 800c17c:	d913      	bls.n	800c1a6 <_strtod_l+0x206>
 800c17e:	2101      	movs	r1, #1
 800c180:	9104      	str	r1, [sp, #16]
 800c182:	e7c2      	b.n	800c10a <_strtod_l+0x16a>
 800c184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	921b      	str	r2, [sp, #108]	; 0x6c
 800c18a:	785b      	ldrb	r3, [r3, #1]
 800c18c:	3001      	adds	r0, #1
 800c18e:	2b30      	cmp	r3, #48	; 0x30
 800c190:	d0f8      	beq.n	800c184 <_strtod_l+0x1e4>
 800c192:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c196:	2a08      	cmp	r2, #8
 800c198:	f200 84e4 	bhi.w	800cb64 <_strtod_l+0xbc4>
 800c19c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c19e:	9208      	str	r2, [sp, #32]
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c1aa:	f100 0101 	add.w	r1, r0, #1
 800c1ae:	d012      	beq.n	800c1d6 <_strtod_l+0x236>
 800c1b0:	440a      	add	r2, r1
 800c1b2:	eb00 0c04 	add.w	ip, r0, r4
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	270a      	movs	r7, #10
 800c1ba:	458c      	cmp	ip, r1
 800c1bc:	d113      	bne.n	800c1e6 <_strtod_l+0x246>
 800c1be:	1821      	adds	r1, r4, r0
 800c1c0:	2908      	cmp	r1, #8
 800c1c2:	f104 0401 	add.w	r4, r4, #1
 800c1c6:	4404      	add	r4, r0
 800c1c8:	dc19      	bgt.n	800c1fe <_strtod_l+0x25e>
 800c1ca:	9b07      	ldr	r3, [sp, #28]
 800c1cc:	210a      	movs	r1, #10
 800c1ce:	fb01 e303 	mla	r3, r1, r3, lr
 800c1d2:	9307      	str	r3, [sp, #28]
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1d8:	1c58      	adds	r0, r3, #1
 800c1da:	901b      	str	r0, [sp, #108]	; 0x6c
 800c1dc:	785b      	ldrb	r3, [r3, #1]
 800c1de:	4608      	mov	r0, r1
 800c1e0:	e7c9      	b.n	800c176 <_strtod_l+0x1d6>
 800c1e2:	9805      	ldr	r0, [sp, #20]
 800c1e4:	e7d3      	b.n	800c18e <_strtod_l+0x1ee>
 800c1e6:	2908      	cmp	r1, #8
 800c1e8:	f101 0101 	add.w	r1, r1, #1
 800c1ec:	dc03      	bgt.n	800c1f6 <_strtod_l+0x256>
 800c1ee:	9b07      	ldr	r3, [sp, #28]
 800c1f0:	437b      	muls	r3, r7
 800c1f2:	9307      	str	r3, [sp, #28]
 800c1f4:	e7e1      	b.n	800c1ba <_strtod_l+0x21a>
 800c1f6:	2910      	cmp	r1, #16
 800c1f8:	bfd8      	it	le
 800c1fa:	437d      	mulle	r5, r7
 800c1fc:	e7dd      	b.n	800c1ba <_strtod_l+0x21a>
 800c1fe:	2c10      	cmp	r4, #16
 800c200:	bfdc      	itt	le
 800c202:	210a      	movle	r1, #10
 800c204:	fb01 e505 	mlale	r5, r1, r5, lr
 800c208:	e7e4      	b.n	800c1d4 <_strtod_l+0x234>
 800c20a:	2301      	movs	r3, #1
 800c20c:	9304      	str	r3, [sp, #16]
 800c20e:	e781      	b.n	800c114 <_strtod_l+0x174>
 800c210:	f04f 0c01 	mov.w	ip, #1
 800c214:	1cb3      	adds	r3, r6, #2
 800c216:	931b      	str	r3, [sp, #108]	; 0x6c
 800c218:	78b3      	ldrb	r3, [r6, #2]
 800c21a:	e78a      	b.n	800c132 <_strtod_l+0x192>
 800c21c:	f04f 0c00 	mov.w	ip, #0
 800c220:	e7f8      	b.n	800c214 <_strtod_l+0x274>
 800c222:	bf00      	nop
 800c224:	0800fe6c 	.word	0x0800fe6c
 800c228:	7ff00000 	.word	0x7ff00000
 800c22c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c22e:	1c5f      	adds	r7, r3, #1
 800c230:	971b      	str	r7, [sp, #108]	; 0x6c
 800c232:	785b      	ldrb	r3, [r3, #1]
 800c234:	2b30      	cmp	r3, #48	; 0x30
 800c236:	d0f9      	beq.n	800c22c <_strtod_l+0x28c>
 800c238:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c23c:	2f08      	cmp	r7, #8
 800c23e:	f63f af7d 	bhi.w	800c13c <_strtod_l+0x19c>
 800c242:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c248:	930a      	str	r3, [sp, #40]	; 0x28
 800c24a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c24c:	1c5f      	adds	r7, r3, #1
 800c24e:	971b      	str	r7, [sp, #108]	; 0x6c
 800c250:	785b      	ldrb	r3, [r3, #1]
 800c252:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c256:	f1b8 0f09 	cmp.w	r8, #9
 800c25a:	d937      	bls.n	800c2cc <_strtod_l+0x32c>
 800c25c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c25e:	1a7f      	subs	r7, r7, r1
 800c260:	2f08      	cmp	r7, #8
 800c262:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c266:	dc37      	bgt.n	800c2d8 <_strtod_l+0x338>
 800c268:	45be      	cmp	lr, r7
 800c26a:	bfa8      	it	ge
 800c26c:	46be      	movge	lr, r7
 800c26e:	f1bc 0f00 	cmp.w	ip, #0
 800c272:	d001      	beq.n	800c278 <_strtod_l+0x2d8>
 800c274:	f1ce 0e00 	rsb	lr, lr, #0
 800c278:	2c00      	cmp	r4, #0
 800c27a:	d151      	bne.n	800c320 <_strtod_l+0x380>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	f47f aece 	bne.w	800c01e <_strtod_l+0x7e>
 800c282:	9a06      	ldr	r2, [sp, #24]
 800c284:	2a00      	cmp	r2, #0
 800c286:	f47f aeca 	bne.w	800c01e <_strtod_l+0x7e>
 800c28a:	9a04      	ldr	r2, [sp, #16]
 800c28c:	2a00      	cmp	r2, #0
 800c28e:	f47f aee4 	bne.w	800c05a <_strtod_l+0xba>
 800c292:	2b4e      	cmp	r3, #78	; 0x4e
 800c294:	d027      	beq.n	800c2e6 <_strtod_l+0x346>
 800c296:	dc21      	bgt.n	800c2dc <_strtod_l+0x33c>
 800c298:	2b49      	cmp	r3, #73	; 0x49
 800c29a:	f47f aede 	bne.w	800c05a <_strtod_l+0xba>
 800c29e:	49a0      	ldr	r1, [pc, #640]	; (800c520 <_strtod_l+0x580>)
 800c2a0:	a81b      	add	r0, sp, #108	; 0x6c
 800c2a2:	f002 f81d 	bl	800e2e0 <__match>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f43f aed7 	beq.w	800c05a <_strtod_l+0xba>
 800c2ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2ae:	499d      	ldr	r1, [pc, #628]	; (800c524 <_strtod_l+0x584>)
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	a81b      	add	r0, sp, #108	; 0x6c
 800c2b4:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2b6:	f002 f813 	bl	800e2e0 <__match>
 800c2ba:	b910      	cbnz	r0, 800c2c2 <_strtod_l+0x322>
 800c2bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2be:	3301      	adds	r3, #1
 800c2c0:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2c2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c538 <_strtod_l+0x598>
 800c2c6:	f04f 0a00 	mov.w	sl, #0
 800c2ca:	e6a8      	b.n	800c01e <_strtod_l+0x7e>
 800c2cc:	210a      	movs	r1, #10
 800c2ce:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c2d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c2d6:	e7b8      	b.n	800c24a <_strtod_l+0x2aa>
 800c2d8:	46be      	mov	lr, r7
 800c2da:	e7c8      	b.n	800c26e <_strtod_l+0x2ce>
 800c2dc:	2b69      	cmp	r3, #105	; 0x69
 800c2de:	d0de      	beq.n	800c29e <_strtod_l+0x2fe>
 800c2e0:	2b6e      	cmp	r3, #110	; 0x6e
 800c2e2:	f47f aeba 	bne.w	800c05a <_strtod_l+0xba>
 800c2e6:	4990      	ldr	r1, [pc, #576]	; (800c528 <_strtod_l+0x588>)
 800c2e8:	a81b      	add	r0, sp, #108	; 0x6c
 800c2ea:	f001 fff9 	bl	800e2e0 <__match>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	f43f aeb3 	beq.w	800c05a <_strtod_l+0xba>
 800c2f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	2b28      	cmp	r3, #40	; 0x28
 800c2fa:	d10e      	bne.n	800c31a <_strtod_l+0x37a>
 800c2fc:	aa1e      	add	r2, sp, #120	; 0x78
 800c2fe:	498b      	ldr	r1, [pc, #556]	; (800c52c <_strtod_l+0x58c>)
 800c300:	a81b      	add	r0, sp, #108	; 0x6c
 800c302:	f002 f801 	bl	800e308 <__hexnan>
 800c306:	2805      	cmp	r0, #5
 800c308:	d107      	bne.n	800c31a <_strtod_l+0x37a>
 800c30a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c30c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c310:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c314:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c318:	e681      	b.n	800c01e <_strtod_l+0x7e>
 800c31a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c540 <_strtod_l+0x5a0>
 800c31e:	e7d2      	b.n	800c2c6 <_strtod_l+0x326>
 800c320:	ebae 0302 	sub.w	r3, lr, r2
 800c324:	9306      	str	r3, [sp, #24]
 800c326:	9b05      	ldr	r3, [sp, #20]
 800c328:	9807      	ldr	r0, [sp, #28]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	bf08      	it	eq
 800c32e:	4623      	moveq	r3, r4
 800c330:	2c10      	cmp	r4, #16
 800c332:	9305      	str	r3, [sp, #20]
 800c334:	46a0      	mov	r8, r4
 800c336:	bfa8      	it	ge
 800c338:	f04f 0810 	movge.w	r8, #16
 800c33c:	f7f4 f8ea 	bl	8000514 <__aeabi_ui2d>
 800c340:	2c09      	cmp	r4, #9
 800c342:	4682      	mov	sl, r0
 800c344:	468b      	mov	fp, r1
 800c346:	dc13      	bgt.n	800c370 <_strtod_l+0x3d0>
 800c348:	9b06      	ldr	r3, [sp, #24]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f43f ae67 	beq.w	800c01e <_strtod_l+0x7e>
 800c350:	9b06      	ldr	r3, [sp, #24]
 800c352:	dd7a      	ble.n	800c44a <_strtod_l+0x4aa>
 800c354:	2b16      	cmp	r3, #22
 800c356:	dc61      	bgt.n	800c41c <_strtod_l+0x47c>
 800c358:	4a75      	ldr	r2, [pc, #468]	; (800c530 <_strtod_l+0x590>)
 800c35a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c35e:	e9de 0100 	ldrd	r0, r1, [lr]
 800c362:	4652      	mov	r2, sl
 800c364:	465b      	mov	r3, fp
 800c366:	f7f4 f94f 	bl	8000608 <__aeabi_dmul>
 800c36a:	4682      	mov	sl, r0
 800c36c:	468b      	mov	fp, r1
 800c36e:	e656      	b.n	800c01e <_strtod_l+0x7e>
 800c370:	4b6f      	ldr	r3, [pc, #444]	; (800c530 <_strtod_l+0x590>)
 800c372:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c376:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c37a:	f7f4 f945 	bl	8000608 <__aeabi_dmul>
 800c37e:	4606      	mov	r6, r0
 800c380:	4628      	mov	r0, r5
 800c382:	460f      	mov	r7, r1
 800c384:	f7f4 f8c6 	bl	8000514 <__aeabi_ui2d>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4630      	mov	r0, r6
 800c38e:	4639      	mov	r1, r7
 800c390:	f7f3 ff84 	bl	800029c <__adddf3>
 800c394:	2c0f      	cmp	r4, #15
 800c396:	4682      	mov	sl, r0
 800c398:	468b      	mov	fp, r1
 800c39a:	ddd5      	ble.n	800c348 <_strtod_l+0x3a8>
 800c39c:	9b06      	ldr	r3, [sp, #24]
 800c39e:	eba4 0808 	sub.w	r8, r4, r8
 800c3a2:	4498      	add	r8, r3
 800c3a4:	f1b8 0f00 	cmp.w	r8, #0
 800c3a8:	f340 8096 	ble.w	800c4d8 <_strtod_l+0x538>
 800c3ac:	f018 030f 	ands.w	r3, r8, #15
 800c3b0:	d00a      	beq.n	800c3c8 <_strtod_l+0x428>
 800c3b2:	495f      	ldr	r1, [pc, #380]	; (800c530 <_strtod_l+0x590>)
 800c3b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3b8:	4652      	mov	r2, sl
 800c3ba:	465b      	mov	r3, fp
 800c3bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3c0:	f7f4 f922 	bl	8000608 <__aeabi_dmul>
 800c3c4:	4682      	mov	sl, r0
 800c3c6:	468b      	mov	fp, r1
 800c3c8:	f038 080f 	bics.w	r8, r8, #15
 800c3cc:	d073      	beq.n	800c4b6 <_strtod_l+0x516>
 800c3ce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c3d2:	dd47      	ble.n	800c464 <_strtod_l+0x4c4>
 800c3d4:	2400      	movs	r4, #0
 800c3d6:	46a0      	mov	r8, r4
 800c3d8:	9407      	str	r4, [sp, #28]
 800c3da:	9405      	str	r4, [sp, #20]
 800c3dc:	2322      	movs	r3, #34	; 0x22
 800c3de:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c538 <_strtod_l+0x598>
 800c3e2:	f8c9 3000 	str.w	r3, [r9]
 800c3e6:	f04f 0a00 	mov.w	sl, #0
 800c3ea:	9b07      	ldr	r3, [sp, #28]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f43f ae16 	beq.w	800c01e <_strtod_l+0x7e>
 800c3f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c3f4:	4648      	mov	r0, r9
 800c3f6:	f002 f8c7 	bl	800e588 <_Bfree>
 800c3fa:	9905      	ldr	r1, [sp, #20]
 800c3fc:	4648      	mov	r0, r9
 800c3fe:	f002 f8c3 	bl	800e588 <_Bfree>
 800c402:	4641      	mov	r1, r8
 800c404:	4648      	mov	r0, r9
 800c406:	f002 f8bf 	bl	800e588 <_Bfree>
 800c40a:	9907      	ldr	r1, [sp, #28]
 800c40c:	4648      	mov	r0, r9
 800c40e:	f002 f8bb 	bl	800e588 <_Bfree>
 800c412:	4621      	mov	r1, r4
 800c414:	4648      	mov	r0, r9
 800c416:	f002 f8b7 	bl	800e588 <_Bfree>
 800c41a:	e600      	b.n	800c01e <_strtod_l+0x7e>
 800c41c:	9a06      	ldr	r2, [sp, #24]
 800c41e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c422:	4293      	cmp	r3, r2
 800c424:	dbba      	blt.n	800c39c <_strtod_l+0x3fc>
 800c426:	4d42      	ldr	r5, [pc, #264]	; (800c530 <_strtod_l+0x590>)
 800c428:	f1c4 040f 	rsb	r4, r4, #15
 800c42c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c430:	4652      	mov	r2, sl
 800c432:	465b      	mov	r3, fp
 800c434:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c438:	f7f4 f8e6 	bl	8000608 <__aeabi_dmul>
 800c43c:	9b06      	ldr	r3, [sp, #24]
 800c43e:	1b1c      	subs	r4, r3, r4
 800c440:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c444:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c448:	e78d      	b.n	800c366 <_strtod_l+0x3c6>
 800c44a:	f113 0f16 	cmn.w	r3, #22
 800c44e:	dba5      	blt.n	800c39c <_strtod_l+0x3fc>
 800c450:	4a37      	ldr	r2, [pc, #220]	; (800c530 <_strtod_l+0x590>)
 800c452:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c456:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c45a:	4650      	mov	r0, sl
 800c45c:	4659      	mov	r1, fp
 800c45e:	f7f4 f9fd 	bl	800085c <__aeabi_ddiv>
 800c462:	e782      	b.n	800c36a <_strtod_l+0x3ca>
 800c464:	2300      	movs	r3, #0
 800c466:	4e33      	ldr	r6, [pc, #204]	; (800c534 <_strtod_l+0x594>)
 800c468:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c46c:	4650      	mov	r0, sl
 800c46e:	4659      	mov	r1, fp
 800c470:	461d      	mov	r5, r3
 800c472:	f1b8 0f01 	cmp.w	r8, #1
 800c476:	dc21      	bgt.n	800c4bc <_strtod_l+0x51c>
 800c478:	b10b      	cbz	r3, 800c47e <_strtod_l+0x4de>
 800c47a:	4682      	mov	sl, r0
 800c47c:	468b      	mov	fp, r1
 800c47e:	4b2d      	ldr	r3, [pc, #180]	; (800c534 <_strtod_l+0x594>)
 800c480:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c484:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c488:	4652      	mov	r2, sl
 800c48a:	465b      	mov	r3, fp
 800c48c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c490:	f7f4 f8ba 	bl	8000608 <__aeabi_dmul>
 800c494:	4b28      	ldr	r3, [pc, #160]	; (800c538 <_strtod_l+0x598>)
 800c496:	460a      	mov	r2, r1
 800c498:	400b      	ands	r3, r1
 800c49a:	4928      	ldr	r1, [pc, #160]	; (800c53c <_strtod_l+0x59c>)
 800c49c:	428b      	cmp	r3, r1
 800c49e:	4682      	mov	sl, r0
 800c4a0:	d898      	bhi.n	800c3d4 <_strtod_l+0x434>
 800c4a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c4a6:	428b      	cmp	r3, r1
 800c4a8:	bf86      	itte	hi
 800c4aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c544 <_strtod_l+0x5a4>
 800c4ae:	f04f 3aff 	movhi.w	sl, #4294967295
 800c4b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	9304      	str	r3, [sp, #16]
 800c4ba:	e077      	b.n	800c5ac <_strtod_l+0x60c>
 800c4bc:	f018 0f01 	tst.w	r8, #1
 800c4c0:	d006      	beq.n	800c4d0 <_strtod_l+0x530>
 800c4c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ca:	f7f4 f89d 	bl	8000608 <__aeabi_dmul>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	3501      	adds	r5, #1
 800c4d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c4d6:	e7cc      	b.n	800c472 <_strtod_l+0x4d2>
 800c4d8:	d0ed      	beq.n	800c4b6 <_strtod_l+0x516>
 800c4da:	f1c8 0800 	rsb	r8, r8, #0
 800c4de:	f018 020f 	ands.w	r2, r8, #15
 800c4e2:	d00a      	beq.n	800c4fa <_strtod_l+0x55a>
 800c4e4:	4b12      	ldr	r3, [pc, #72]	; (800c530 <_strtod_l+0x590>)
 800c4e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4ea:	4650      	mov	r0, sl
 800c4ec:	4659      	mov	r1, fp
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	f7f4 f9b3 	bl	800085c <__aeabi_ddiv>
 800c4f6:	4682      	mov	sl, r0
 800c4f8:	468b      	mov	fp, r1
 800c4fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c4fe:	d0da      	beq.n	800c4b6 <_strtod_l+0x516>
 800c500:	f1b8 0f1f 	cmp.w	r8, #31
 800c504:	dd20      	ble.n	800c548 <_strtod_l+0x5a8>
 800c506:	2400      	movs	r4, #0
 800c508:	46a0      	mov	r8, r4
 800c50a:	9407      	str	r4, [sp, #28]
 800c50c:	9405      	str	r4, [sp, #20]
 800c50e:	2322      	movs	r3, #34	; 0x22
 800c510:	f04f 0a00 	mov.w	sl, #0
 800c514:	f04f 0b00 	mov.w	fp, #0
 800c518:	f8c9 3000 	str.w	r3, [r9]
 800c51c:	e765      	b.n	800c3ea <_strtod_l+0x44a>
 800c51e:	bf00      	nop
 800c520:	0800fdc0 	.word	0x0800fdc0
 800c524:	0800ffc4 	.word	0x0800ffc4
 800c528:	0800fe3f 	.word	0x0800fe3f
 800c52c:	0800fe80 	.word	0x0800fe80
 800c530:	08010058 	.word	0x08010058
 800c534:	08010030 	.word	0x08010030
 800c538:	7ff00000 	.word	0x7ff00000
 800c53c:	7ca00000 	.word	0x7ca00000
 800c540:	fff80000 	.word	0xfff80000
 800c544:	7fefffff 	.word	0x7fefffff
 800c548:	f018 0310 	ands.w	r3, r8, #16
 800c54c:	bf18      	it	ne
 800c54e:	236a      	movne	r3, #106	; 0x6a
 800c550:	4da0      	ldr	r5, [pc, #640]	; (800c7d4 <_strtod_l+0x834>)
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	4650      	mov	r0, sl
 800c556:	4659      	mov	r1, fp
 800c558:	2300      	movs	r3, #0
 800c55a:	f1b8 0f00 	cmp.w	r8, #0
 800c55e:	f300 810a 	bgt.w	800c776 <_strtod_l+0x7d6>
 800c562:	b10b      	cbz	r3, 800c568 <_strtod_l+0x5c8>
 800c564:	4682      	mov	sl, r0
 800c566:	468b      	mov	fp, r1
 800c568:	9b04      	ldr	r3, [sp, #16]
 800c56a:	b1bb      	cbz	r3, 800c59c <_strtod_l+0x5fc>
 800c56c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c570:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c574:	2b00      	cmp	r3, #0
 800c576:	4659      	mov	r1, fp
 800c578:	dd10      	ble.n	800c59c <_strtod_l+0x5fc>
 800c57a:	2b1f      	cmp	r3, #31
 800c57c:	f340 8107 	ble.w	800c78e <_strtod_l+0x7ee>
 800c580:	2b34      	cmp	r3, #52	; 0x34
 800c582:	bfde      	ittt	le
 800c584:	3b20      	suble	r3, #32
 800c586:	f04f 32ff 	movle.w	r2, #4294967295
 800c58a:	fa02 f303 	lslle.w	r3, r2, r3
 800c58e:	f04f 0a00 	mov.w	sl, #0
 800c592:	bfcc      	ite	gt
 800c594:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c598:	ea03 0b01 	andle.w	fp, r3, r1
 800c59c:	2200      	movs	r2, #0
 800c59e:	2300      	movs	r3, #0
 800c5a0:	4650      	mov	r0, sl
 800c5a2:	4659      	mov	r1, fp
 800c5a4:	f7f4 fa98 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d1ac      	bne.n	800c506 <_strtod_l+0x566>
 800c5ac:	9b07      	ldr	r3, [sp, #28]
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	9a05      	ldr	r2, [sp, #20]
 800c5b2:	9908      	ldr	r1, [sp, #32]
 800c5b4:	4623      	mov	r3, r4
 800c5b6:	4648      	mov	r0, r9
 800c5b8:	f002 f838 	bl	800e62c <__s2b>
 800c5bc:	9007      	str	r0, [sp, #28]
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f43f af08 	beq.w	800c3d4 <_strtod_l+0x434>
 800c5c4:	9a06      	ldr	r2, [sp, #24]
 800c5c6:	9b06      	ldr	r3, [sp, #24]
 800c5c8:	2a00      	cmp	r2, #0
 800c5ca:	f1c3 0300 	rsb	r3, r3, #0
 800c5ce:	bfa8      	it	ge
 800c5d0:	2300      	movge	r3, #0
 800c5d2:	930e      	str	r3, [sp, #56]	; 0x38
 800c5d4:	2400      	movs	r4, #0
 800c5d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c5da:	9316      	str	r3, [sp, #88]	; 0x58
 800c5dc:	46a0      	mov	r8, r4
 800c5de:	9b07      	ldr	r3, [sp, #28]
 800c5e0:	4648      	mov	r0, r9
 800c5e2:	6859      	ldr	r1, [r3, #4]
 800c5e4:	f001 ff9c 	bl	800e520 <_Balloc>
 800c5e8:	9005      	str	r0, [sp, #20]
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	f43f aef6 	beq.w	800c3dc <_strtod_l+0x43c>
 800c5f0:	9b07      	ldr	r3, [sp, #28]
 800c5f2:	691a      	ldr	r2, [r3, #16]
 800c5f4:	3202      	adds	r2, #2
 800c5f6:	f103 010c 	add.w	r1, r3, #12
 800c5fa:	0092      	lsls	r2, r2, #2
 800c5fc:	300c      	adds	r0, #12
 800c5fe:	f7fe fdbe 	bl	800b17e <memcpy>
 800c602:	aa1e      	add	r2, sp, #120	; 0x78
 800c604:	a91d      	add	r1, sp, #116	; 0x74
 800c606:	ec4b ab10 	vmov	d0, sl, fp
 800c60a:	4648      	mov	r0, r9
 800c60c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c610:	f002 fac8 	bl	800eba4 <__d2b>
 800c614:	901c      	str	r0, [sp, #112]	; 0x70
 800c616:	2800      	cmp	r0, #0
 800c618:	f43f aee0 	beq.w	800c3dc <_strtod_l+0x43c>
 800c61c:	2101      	movs	r1, #1
 800c61e:	4648      	mov	r0, r9
 800c620:	f002 f890 	bl	800e744 <__i2b>
 800c624:	4680      	mov	r8, r0
 800c626:	2800      	cmp	r0, #0
 800c628:	f43f aed8 	beq.w	800c3dc <_strtod_l+0x43c>
 800c62c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c62e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c630:	2e00      	cmp	r6, #0
 800c632:	bfab      	itete	ge
 800c634:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c636:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c638:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c63a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c63c:	bfac      	ite	ge
 800c63e:	18f7      	addge	r7, r6, r3
 800c640:	1b9d      	sublt	r5, r3, r6
 800c642:	9b04      	ldr	r3, [sp, #16]
 800c644:	1af6      	subs	r6, r6, r3
 800c646:	4416      	add	r6, r2
 800c648:	4b63      	ldr	r3, [pc, #396]	; (800c7d8 <_strtod_l+0x838>)
 800c64a:	3e01      	subs	r6, #1
 800c64c:	429e      	cmp	r6, r3
 800c64e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c652:	f280 80af 	bge.w	800c7b4 <_strtod_l+0x814>
 800c656:	1b9b      	subs	r3, r3, r6
 800c658:	2b1f      	cmp	r3, #31
 800c65a:	eba2 0203 	sub.w	r2, r2, r3
 800c65e:	f04f 0101 	mov.w	r1, #1
 800c662:	f300 809b 	bgt.w	800c79c <_strtod_l+0x7fc>
 800c666:	fa01 f303 	lsl.w	r3, r1, r3
 800c66a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c66c:	2300      	movs	r3, #0
 800c66e:	930a      	str	r3, [sp, #40]	; 0x28
 800c670:	18be      	adds	r6, r7, r2
 800c672:	9b04      	ldr	r3, [sp, #16]
 800c674:	42b7      	cmp	r7, r6
 800c676:	4415      	add	r5, r2
 800c678:	441d      	add	r5, r3
 800c67a:	463b      	mov	r3, r7
 800c67c:	bfa8      	it	ge
 800c67e:	4633      	movge	r3, r6
 800c680:	42ab      	cmp	r3, r5
 800c682:	bfa8      	it	ge
 800c684:	462b      	movge	r3, r5
 800c686:	2b00      	cmp	r3, #0
 800c688:	bfc2      	ittt	gt
 800c68a:	1af6      	subgt	r6, r6, r3
 800c68c:	1aed      	subgt	r5, r5, r3
 800c68e:	1aff      	subgt	r7, r7, r3
 800c690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c692:	b1bb      	cbz	r3, 800c6c4 <_strtod_l+0x724>
 800c694:	4641      	mov	r1, r8
 800c696:	461a      	mov	r2, r3
 800c698:	4648      	mov	r0, r9
 800c69a:	f002 f8f3 	bl	800e884 <__pow5mult>
 800c69e:	4680      	mov	r8, r0
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	f43f ae9b 	beq.w	800c3dc <_strtod_l+0x43c>
 800c6a6:	4601      	mov	r1, r0
 800c6a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c6aa:	4648      	mov	r0, r9
 800c6ac:	f002 f853 	bl	800e756 <__multiply>
 800c6b0:	900c      	str	r0, [sp, #48]	; 0x30
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	f43f ae92 	beq.w	800c3dc <_strtod_l+0x43c>
 800c6b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6ba:	4648      	mov	r0, r9
 800c6bc:	f001 ff64 	bl	800e588 <_Bfree>
 800c6c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6c2:	931c      	str	r3, [sp, #112]	; 0x70
 800c6c4:	2e00      	cmp	r6, #0
 800c6c6:	dc7a      	bgt.n	800c7be <_strtod_l+0x81e>
 800c6c8:	9b06      	ldr	r3, [sp, #24]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dd08      	ble.n	800c6e0 <_strtod_l+0x740>
 800c6ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c6d0:	9905      	ldr	r1, [sp, #20]
 800c6d2:	4648      	mov	r0, r9
 800c6d4:	f002 f8d6 	bl	800e884 <__pow5mult>
 800c6d8:	9005      	str	r0, [sp, #20]
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	f43f ae7e 	beq.w	800c3dc <_strtod_l+0x43c>
 800c6e0:	2d00      	cmp	r5, #0
 800c6e2:	dd08      	ble.n	800c6f6 <_strtod_l+0x756>
 800c6e4:	462a      	mov	r2, r5
 800c6e6:	9905      	ldr	r1, [sp, #20]
 800c6e8:	4648      	mov	r0, r9
 800c6ea:	f002 f919 	bl	800e920 <__lshift>
 800c6ee:	9005      	str	r0, [sp, #20]
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	f43f ae73 	beq.w	800c3dc <_strtod_l+0x43c>
 800c6f6:	2f00      	cmp	r7, #0
 800c6f8:	dd08      	ble.n	800c70c <_strtod_l+0x76c>
 800c6fa:	4641      	mov	r1, r8
 800c6fc:	463a      	mov	r2, r7
 800c6fe:	4648      	mov	r0, r9
 800c700:	f002 f90e 	bl	800e920 <__lshift>
 800c704:	4680      	mov	r8, r0
 800c706:	2800      	cmp	r0, #0
 800c708:	f43f ae68 	beq.w	800c3dc <_strtod_l+0x43c>
 800c70c:	9a05      	ldr	r2, [sp, #20]
 800c70e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c710:	4648      	mov	r0, r9
 800c712:	f002 f973 	bl	800e9fc <__mdiff>
 800c716:	4604      	mov	r4, r0
 800c718:	2800      	cmp	r0, #0
 800c71a:	f43f ae5f 	beq.w	800c3dc <_strtod_l+0x43c>
 800c71e:	68c3      	ldr	r3, [r0, #12]
 800c720:	930c      	str	r3, [sp, #48]	; 0x30
 800c722:	2300      	movs	r3, #0
 800c724:	60c3      	str	r3, [r0, #12]
 800c726:	4641      	mov	r1, r8
 800c728:	f002 f94e 	bl	800e9c8 <__mcmp>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	da55      	bge.n	800c7dc <_strtod_l+0x83c>
 800c730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c732:	b9e3      	cbnz	r3, 800c76e <_strtod_l+0x7ce>
 800c734:	f1ba 0f00 	cmp.w	sl, #0
 800c738:	d119      	bne.n	800c76e <_strtod_l+0x7ce>
 800c73a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c73e:	b9b3      	cbnz	r3, 800c76e <_strtod_l+0x7ce>
 800c740:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c744:	0d1b      	lsrs	r3, r3, #20
 800c746:	051b      	lsls	r3, r3, #20
 800c748:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c74c:	d90f      	bls.n	800c76e <_strtod_l+0x7ce>
 800c74e:	6963      	ldr	r3, [r4, #20]
 800c750:	b913      	cbnz	r3, 800c758 <_strtod_l+0x7b8>
 800c752:	6923      	ldr	r3, [r4, #16]
 800c754:	2b01      	cmp	r3, #1
 800c756:	dd0a      	ble.n	800c76e <_strtod_l+0x7ce>
 800c758:	4621      	mov	r1, r4
 800c75a:	2201      	movs	r2, #1
 800c75c:	4648      	mov	r0, r9
 800c75e:	f002 f8df 	bl	800e920 <__lshift>
 800c762:	4641      	mov	r1, r8
 800c764:	4604      	mov	r4, r0
 800c766:	f002 f92f 	bl	800e9c8 <__mcmp>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	dc67      	bgt.n	800c83e <_strtod_l+0x89e>
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d171      	bne.n	800c858 <_strtod_l+0x8b8>
 800c774:	e63d      	b.n	800c3f2 <_strtod_l+0x452>
 800c776:	f018 0f01 	tst.w	r8, #1
 800c77a:	d004      	beq.n	800c786 <_strtod_l+0x7e6>
 800c77c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c780:	f7f3 ff42 	bl	8000608 <__aeabi_dmul>
 800c784:	2301      	movs	r3, #1
 800c786:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c78a:	3508      	adds	r5, #8
 800c78c:	e6e5      	b.n	800c55a <_strtod_l+0x5ba>
 800c78e:	f04f 32ff 	mov.w	r2, #4294967295
 800c792:	fa02 f303 	lsl.w	r3, r2, r3
 800c796:	ea03 0a0a 	and.w	sl, r3, sl
 800c79a:	e6ff      	b.n	800c59c <_strtod_l+0x5fc>
 800c79c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c7a0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c7a4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c7a8:	36e2      	adds	r6, #226	; 0xe2
 800c7aa:	fa01 f306 	lsl.w	r3, r1, r6
 800c7ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c7b0:	910f      	str	r1, [sp, #60]	; 0x3c
 800c7b2:	e75d      	b.n	800c670 <_strtod_l+0x6d0>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7bc:	e758      	b.n	800c670 <_strtod_l+0x6d0>
 800c7be:	4632      	mov	r2, r6
 800c7c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c7c2:	4648      	mov	r0, r9
 800c7c4:	f002 f8ac 	bl	800e920 <__lshift>
 800c7c8:	901c      	str	r0, [sp, #112]	; 0x70
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	f47f af7c 	bne.w	800c6c8 <_strtod_l+0x728>
 800c7d0:	e604      	b.n	800c3dc <_strtod_l+0x43c>
 800c7d2:	bf00      	nop
 800c7d4:	0800fe98 	.word	0x0800fe98
 800c7d8:	fffffc02 	.word	0xfffffc02
 800c7dc:	465d      	mov	r5, fp
 800c7de:	f040 8086 	bne.w	800c8ee <_strtod_l+0x94e>
 800c7e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7e8:	b32a      	cbz	r2, 800c836 <_strtod_l+0x896>
 800c7ea:	4aaf      	ldr	r2, [pc, #700]	; (800caa8 <_strtod_l+0xb08>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d153      	bne.n	800c898 <_strtod_l+0x8f8>
 800c7f0:	9b04      	ldr	r3, [sp, #16]
 800c7f2:	4650      	mov	r0, sl
 800c7f4:	b1d3      	cbz	r3, 800c82c <_strtod_l+0x88c>
 800c7f6:	4aad      	ldr	r2, [pc, #692]	; (800caac <_strtod_l+0xb0c>)
 800c7f8:	402a      	ands	r2, r5
 800c7fa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c7fe:	f04f 31ff 	mov.w	r1, #4294967295
 800c802:	d816      	bhi.n	800c832 <_strtod_l+0x892>
 800c804:	0d12      	lsrs	r2, r2, #20
 800c806:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c80a:	fa01 f303 	lsl.w	r3, r1, r3
 800c80e:	4298      	cmp	r0, r3
 800c810:	d142      	bne.n	800c898 <_strtod_l+0x8f8>
 800c812:	4ba7      	ldr	r3, [pc, #668]	; (800cab0 <_strtod_l+0xb10>)
 800c814:	429d      	cmp	r5, r3
 800c816:	d102      	bne.n	800c81e <_strtod_l+0x87e>
 800c818:	3001      	adds	r0, #1
 800c81a:	f43f addf 	beq.w	800c3dc <_strtod_l+0x43c>
 800c81e:	4ba3      	ldr	r3, [pc, #652]	; (800caac <_strtod_l+0xb0c>)
 800c820:	402b      	ands	r3, r5
 800c822:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c826:	f04f 0a00 	mov.w	sl, #0
 800c82a:	e7a0      	b.n	800c76e <_strtod_l+0x7ce>
 800c82c:	f04f 33ff 	mov.w	r3, #4294967295
 800c830:	e7ed      	b.n	800c80e <_strtod_l+0x86e>
 800c832:	460b      	mov	r3, r1
 800c834:	e7eb      	b.n	800c80e <_strtod_l+0x86e>
 800c836:	bb7b      	cbnz	r3, 800c898 <_strtod_l+0x8f8>
 800c838:	f1ba 0f00 	cmp.w	sl, #0
 800c83c:	d12c      	bne.n	800c898 <_strtod_l+0x8f8>
 800c83e:	9904      	ldr	r1, [sp, #16]
 800c840:	4a9a      	ldr	r2, [pc, #616]	; (800caac <_strtod_l+0xb0c>)
 800c842:	465b      	mov	r3, fp
 800c844:	b1f1      	cbz	r1, 800c884 <_strtod_l+0x8e4>
 800c846:	ea02 010b 	and.w	r1, r2, fp
 800c84a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c84e:	dc19      	bgt.n	800c884 <_strtod_l+0x8e4>
 800c850:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c854:	f77f ae5b 	ble.w	800c50e <_strtod_l+0x56e>
 800c858:	4a96      	ldr	r2, [pc, #600]	; (800cab4 <_strtod_l+0xb14>)
 800c85a:	2300      	movs	r3, #0
 800c85c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c860:	4650      	mov	r0, sl
 800c862:	4659      	mov	r1, fp
 800c864:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c868:	f7f3 fece 	bl	8000608 <__aeabi_dmul>
 800c86c:	4682      	mov	sl, r0
 800c86e:	468b      	mov	fp, r1
 800c870:	2900      	cmp	r1, #0
 800c872:	f47f adbe 	bne.w	800c3f2 <_strtod_l+0x452>
 800c876:	2800      	cmp	r0, #0
 800c878:	f47f adbb 	bne.w	800c3f2 <_strtod_l+0x452>
 800c87c:	2322      	movs	r3, #34	; 0x22
 800c87e:	f8c9 3000 	str.w	r3, [r9]
 800c882:	e5b6      	b.n	800c3f2 <_strtod_l+0x452>
 800c884:	4013      	ands	r3, r2
 800c886:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c88a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c88e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c892:	f04f 3aff 	mov.w	sl, #4294967295
 800c896:	e76a      	b.n	800c76e <_strtod_l+0x7ce>
 800c898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c89a:	b193      	cbz	r3, 800c8c2 <_strtod_l+0x922>
 800c89c:	422b      	tst	r3, r5
 800c89e:	f43f af66 	beq.w	800c76e <_strtod_l+0x7ce>
 800c8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8a4:	9a04      	ldr	r2, [sp, #16]
 800c8a6:	4650      	mov	r0, sl
 800c8a8:	4659      	mov	r1, fp
 800c8aa:	b173      	cbz	r3, 800c8ca <_strtod_l+0x92a>
 800c8ac:	f7ff fb5a 	bl	800bf64 <sulp>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8b8:	f7f3 fcf0 	bl	800029c <__adddf3>
 800c8bc:	4682      	mov	sl, r0
 800c8be:	468b      	mov	fp, r1
 800c8c0:	e755      	b.n	800c76e <_strtod_l+0x7ce>
 800c8c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8c4:	ea13 0f0a 	tst.w	r3, sl
 800c8c8:	e7e9      	b.n	800c89e <_strtod_l+0x8fe>
 800c8ca:	f7ff fb4b 	bl	800bf64 <sulp>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8d6:	f7f3 fcdf 	bl	8000298 <__aeabi_dsub>
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2300      	movs	r3, #0
 800c8de:	4682      	mov	sl, r0
 800c8e0:	468b      	mov	fp, r1
 800c8e2:	f7f4 f8f9 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	f47f ae11 	bne.w	800c50e <_strtod_l+0x56e>
 800c8ec:	e73f      	b.n	800c76e <_strtod_l+0x7ce>
 800c8ee:	4641      	mov	r1, r8
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f002 f9a6 	bl	800ec42 <__ratio>
 800c8f6:	ec57 6b10 	vmov	r6, r7, d0
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c900:	ee10 0a10 	vmov	r0, s0
 800c904:	4639      	mov	r1, r7
 800c906:	f7f4 f8fb 	bl	8000b00 <__aeabi_dcmple>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d077      	beq.n	800c9fe <_strtod_l+0xa5e>
 800c90e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c910:	2b00      	cmp	r3, #0
 800c912:	d04a      	beq.n	800c9aa <_strtod_l+0xa0a>
 800c914:	4b68      	ldr	r3, [pc, #416]	; (800cab8 <_strtod_l+0xb18>)
 800c916:	2200      	movs	r2, #0
 800c918:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c91c:	4f66      	ldr	r7, [pc, #408]	; (800cab8 <_strtod_l+0xb18>)
 800c91e:	2600      	movs	r6, #0
 800c920:	4b62      	ldr	r3, [pc, #392]	; (800caac <_strtod_l+0xb0c>)
 800c922:	402b      	ands	r3, r5
 800c924:	930f      	str	r3, [sp, #60]	; 0x3c
 800c926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c928:	4b64      	ldr	r3, [pc, #400]	; (800cabc <_strtod_l+0xb1c>)
 800c92a:	429a      	cmp	r2, r3
 800c92c:	f040 80ce 	bne.w	800cacc <_strtod_l+0xb2c>
 800c930:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c934:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c938:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c93c:	ec4b ab10 	vmov	d0, sl, fp
 800c940:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c944:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c948:	f002 f8b6 	bl	800eab8 <__ulp>
 800c94c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c950:	ec53 2b10 	vmov	r2, r3, d0
 800c954:	f7f3 fe58 	bl	8000608 <__aeabi_dmul>
 800c958:	4652      	mov	r2, sl
 800c95a:	465b      	mov	r3, fp
 800c95c:	f7f3 fc9e 	bl	800029c <__adddf3>
 800c960:	460b      	mov	r3, r1
 800c962:	4952      	ldr	r1, [pc, #328]	; (800caac <_strtod_l+0xb0c>)
 800c964:	4a56      	ldr	r2, [pc, #344]	; (800cac0 <_strtod_l+0xb20>)
 800c966:	4019      	ands	r1, r3
 800c968:	4291      	cmp	r1, r2
 800c96a:	4682      	mov	sl, r0
 800c96c:	d95b      	bls.n	800ca26 <_strtod_l+0xa86>
 800c96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c970:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c974:	4293      	cmp	r3, r2
 800c976:	d103      	bne.n	800c980 <_strtod_l+0x9e0>
 800c978:	9b08      	ldr	r3, [sp, #32]
 800c97a:	3301      	adds	r3, #1
 800c97c:	f43f ad2e 	beq.w	800c3dc <_strtod_l+0x43c>
 800c980:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800cab0 <_strtod_l+0xb10>
 800c984:	f04f 3aff 	mov.w	sl, #4294967295
 800c988:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c98a:	4648      	mov	r0, r9
 800c98c:	f001 fdfc 	bl	800e588 <_Bfree>
 800c990:	9905      	ldr	r1, [sp, #20]
 800c992:	4648      	mov	r0, r9
 800c994:	f001 fdf8 	bl	800e588 <_Bfree>
 800c998:	4641      	mov	r1, r8
 800c99a:	4648      	mov	r0, r9
 800c99c:	f001 fdf4 	bl	800e588 <_Bfree>
 800c9a0:	4621      	mov	r1, r4
 800c9a2:	4648      	mov	r0, r9
 800c9a4:	f001 fdf0 	bl	800e588 <_Bfree>
 800c9a8:	e619      	b.n	800c5de <_strtod_l+0x63e>
 800c9aa:	f1ba 0f00 	cmp.w	sl, #0
 800c9ae:	d11a      	bne.n	800c9e6 <_strtod_l+0xa46>
 800c9b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9b4:	b9eb      	cbnz	r3, 800c9f2 <_strtod_l+0xa52>
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	4b3f      	ldr	r3, [pc, #252]	; (800cab8 <_strtod_l+0xb18>)
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	4639      	mov	r1, r7
 800c9be:	f7f4 f895 	bl	8000aec <__aeabi_dcmplt>
 800c9c2:	b9c8      	cbnz	r0, 800c9f8 <_strtod_l+0xa58>
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	4639      	mov	r1, r7
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	4b3e      	ldr	r3, [pc, #248]	; (800cac4 <_strtod_l+0xb24>)
 800c9cc:	f7f3 fe1c 	bl	8000608 <__aeabi_dmul>
 800c9d0:	4606      	mov	r6, r0
 800c9d2:	460f      	mov	r7, r1
 800c9d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c9d8:	9618      	str	r6, [sp, #96]	; 0x60
 800c9da:	9319      	str	r3, [sp, #100]	; 0x64
 800c9dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c9e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c9e4:	e79c      	b.n	800c920 <_strtod_l+0x980>
 800c9e6:	f1ba 0f01 	cmp.w	sl, #1
 800c9ea:	d102      	bne.n	800c9f2 <_strtod_l+0xa52>
 800c9ec:	2d00      	cmp	r5, #0
 800c9ee:	f43f ad8e 	beq.w	800c50e <_strtod_l+0x56e>
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	4b34      	ldr	r3, [pc, #208]	; (800cac8 <_strtod_l+0xb28>)
 800c9f6:	e78f      	b.n	800c918 <_strtod_l+0x978>
 800c9f8:	2600      	movs	r6, #0
 800c9fa:	4f32      	ldr	r7, [pc, #200]	; (800cac4 <_strtod_l+0xb24>)
 800c9fc:	e7ea      	b.n	800c9d4 <_strtod_l+0xa34>
 800c9fe:	4b31      	ldr	r3, [pc, #196]	; (800cac4 <_strtod_l+0xb24>)
 800ca00:	4630      	mov	r0, r6
 800ca02:	4639      	mov	r1, r7
 800ca04:	2200      	movs	r2, #0
 800ca06:	f7f3 fdff 	bl	8000608 <__aeabi_dmul>
 800ca0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	460f      	mov	r7, r1
 800ca10:	b933      	cbnz	r3, 800ca20 <_strtod_l+0xa80>
 800ca12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca16:	9010      	str	r0, [sp, #64]	; 0x40
 800ca18:	9311      	str	r3, [sp, #68]	; 0x44
 800ca1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca1e:	e7df      	b.n	800c9e0 <_strtod_l+0xa40>
 800ca20:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ca24:	e7f9      	b.n	800ca1a <_strtod_l+0xa7a>
 800ca26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ca2a:	9b04      	ldr	r3, [sp, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1ab      	bne.n	800c988 <_strtod_l+0x9e8>
 800ca30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca34:	0d1b      	lsrs	r3, r3, #20
 800ca36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca38:	051b      	lsls	r3, r3, #20
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	465d      	mov	r5, fp
 800ca3e:	d1a3      	bne.n	800c988 <_strtod_l+0x9e8>
 800ca40:	4639      	mov	r1, r7
 800ca42:	4630      	mov	r0, r6
 800ca44:	f7f4 f890 	bl	8000b68 <__aeabi_d2iz>
 800ca48:	f7f3 fd74 	bl	8000534 <__aeabi_i2d>
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4602      	mov	r2, r0
 800ca50:	4639      	mov	r1, r7
 800ca52:	4630      	mov	r0, r6
 800ca54:	f7f3 fc20 	bl	8000298 <__aeabi_dsub>
 800ca58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca5a:	4606      	mov	r6, r0
 800ca5c:	460f      	mov	r7, r1
 800ca5e:	b933      	cbnz	r3, 800ca6e <_strtod_l+0xace>
 800ca60:	f1ba 0f00 	cmp.w	sl, #0
 800ca64:	d103      	bne.n	800ca6e <_strtod_l+0xace>
 800ca66:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ca6a:	2d00      	cmp	r5, #0
 800ca6c:	d06d      	beq.n	800cb4a <_strtod_l+0xbaa>
 800ca6e:	a30a      	add	r3, pc, #40	; (adr r3, 800ca98 <_strtod_l+0xaf8>)
 800ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca74:	4630      	mov	r0, r6
 800ca76:	4639      	mov	r1, r7
 800ca78:	f7f4 f838 	bl	8000aec <__aeabi_dcmplt>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f47f acb8 	bne.w	800c3f2 <_strtod_l+0x452>
 800ca82:	a307      	add	r3, pc, #28	; (adr r3, 800caa0 <_strtod_l+0xb00>)
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	4630      	mov	r0, r6
 800ca8a:	4639      	mov	r1, r7
 800ca8c:	f7f4 f84c 	bl	8000b28 <__aeabi_dcmpgt>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	f43f af79 	beq.w	800c988 <_strtod_l+0x9e8>
 800ca96:	e4ac      	b.n	800c3f2 <_strtod_l+0x452>
 800ca98:	94a03595 	.word	0x94a03595
 800ca9c:	3fdfffff 	.word	0x3fdfffff
 800caa0:	35afe535 	.word	0x35afe535
 800caa4:	3fe00000 	.word	0x3fe00000
 800caa8:	000fffff 	.word	0x000fffff
 800caac:	7ff00000 	.word	0x7ff00000
 800cab0:	7fefffff 	.word	0x7fefffff
 800cab4:	39500000 	.word	0x39500000
 800cab8:	3ff00000 	.word	0x3ff00000
 800cabc:	7fe00000 	.word	0x7fe00000
 800cac0:	7c9fffff 	.word	0x7c9fffff
 800cac4:	3fe00000 	.word	0x3fe00000
 800cac8:	bff00000 	.word	0xbff00000
 800cacc:	9b04      	ldr	r3, [sp, #16]
 800cace:	b333      	cbz	r3, 800cb1e <_strtod_l+0xb7e>
 800cad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cad2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cad6:	d822      	bhi.n	800cb1e <_strtod_l+0xb7e>
 800cad8:	a327      	add	r3, pc, #156	; (adr r3, 800cb78 <_strtod_l+0xbd8>)
 800cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cade:	4630      	mov	r0, r6
 800cae0:	4639      	mov	r1, r7
 800cae2:	f7f4 f80d 	bl	8000b00 <__aeabi_dcmple>
 800cae6:	b1a0      	cbz	r0, 800cb12 <_strtod_l+0xb72>
 800cae8:	4639      	mov	r1, r7
 800caea:	4630      	mov	r0, r6
 800caec:	f7f4 f864 	bl	8000bb8 <__aeabi_d2uiz>
 800caf0:	2800      	cmp	r0, #0
 800caf2:	bf08      	it	eq
 800caf4:	2001      	moveq	r0, #1
 800caf6:	f7f3 fd0d 	bl	8000514 <__aeabi_ui2d>
 800cafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cafc:	4606      	mov	r6, r0
 800cafe:	460f      	mov	r7, r1
 800cb00:	bb03      	cbnz	r3, 800cb44 <_strtod_l+0xba4>
 800cb02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb06:	9012      	str	r0, [sp, #72]	; 0x48
 800cb08:	9313      	str	r3, [sp, #76]	; 0x4c
 800cb0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cb0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cb12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb16:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cb1a:	1a9b      	subs	r3, r3, r2
 800cb1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb1e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800cb22:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800cb26:	f001 ffc7 	bl	800eab8 <__ulp>
 800cb2a:	4650      	mov	r0, sl
 800cb2c:	ec53 2b10 	vmov	r2, r3, d0
 800cb30:	4659      	mov	r1, fp
 800cb32:	f7f3 fd69 	bl	8000608 <__aeabi_dmul>
 800cb36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cb3a:	f7f3 fbaf 	bl	800029c <__adddf3>
 800cb3e:	4682      	mov	sl, r0
 800cb40:	468b      	mov	fp, r1
 800cb42:	e772      	b.n	800ca2a <_strtod_l+0xa8a>
 800cb44:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800cb48:	e7df      	b.n	800cb0a <_strtod_l+0xb6a>
 800cb4a:	a30d      	add	r3, pc, #52	; (adr r3, 800cb80 <_strtod_l+0xbe0>)
 800cb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb50:	f7f3 ffcc 	bl	8000aec <__aeabi_dcmplt>
 800cb54:	e79c      	b.n	800ca90 <_strtod_l+0xaf0>
 800cb56:	2300      	movs	r3, #0
 800cb58:	930d      	str	r3, [sp, #52]	; 0x34
 800cb5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	f7ff ba61 	b.w	800c026 <_strtod_l+0x86>
 800cb64:	2b65      	cmp	r3, #101	; 0x65
 800cb66:	f04f 0200 	mov.w	r2, #0
 800cb6a:	f43f ab4e 	beq.w	800c20a <_strtod_l+0x26a>
 800cb6e:	2101      	movs	r1, #1
 800cb70:	4614      	mov	r4, r2
 800cb72:	9104      	str	r1, [sp, #16]
 800cb74:	f7ff bacb 	b.w	800c10e <_strtod_l+0x16e>
 800cb78:	ffc00000 	.word	0xffc00000
 800cb7c:	41dfffff 	.word	0x41dfffff
 800cb80:	94a03595 	.word	0x94a03595
 800cb84:	3fcfffff 	.word	0x3fcfffff

0800cb88 <_strtod_r>:
 800cb88:	4b05      	ldr	r3, [pc, #20]	; (800cba0 <_strtod_r+0x18>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	b410      	push	{r4}
 800cb8e:	6a1b      	ldr	r3, [r3, #32]
 800cb90:	4c04      	ldr	r4, [pc, #16]	; (800cba4 <_strtod_r+0x1c>)
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	bf08      	it	eq
 800cb96:	4623      	moveq	r3, r4
 800cb98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb9c:	f7ff ba00 	b.w	800bfa0 <_strtod_l>
 800cba0:	20000084 	.word	0x20000084
 800cba4:	200000e8 	.word	0x200000e8

0800cba8 <_strtol_l.isra.0>:
 800cba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbac:	4680      	mov	r8, r0
 800cbae:	4689      	mov	r9, r1
 800cbb0:	4692      	mov	sl, r2
 800cbb2:	461e      	mov	r6, r3
 800cbb4:	460f      	mov	r7, r1
 800cbb6:	463d      	mov	r5, r7
 800cbb8:	9808      	ldr	r0, [sp, #32]
 800cbba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbbe:	f7fe fac9 	bl	800b154 <__locale_ctype_ptr_l>
 800cbc2:	4420      	add	r0, r4
 800cbc4:	7843      	ldrb	r3, [r0, #1]
 800cbc6:	f013 0308 	ands.w	r3, r3, #8
 800cbca:	d132      	bne.n	800cc32 <_strtol_l.isra.0+0x8a>
 800cbcc:	2c2d      	cmp	r4, #45	; 0x2d
 800cbce:	d132      	bne.n	800cc36 <_strtol_l.isra.0+0x8e>
 800cbd0:	787c      	ldrb	r4, [r7, #1]
 800cbd2:	1cbd      	adds	r5, r7, #2
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d05d      	beq.n	800cc96 <_strtol_l.isra.0+0xee>
 800cbda:	2e10      	cmp	r6, #16
 800cbdc:	d109      	bne.n	800cbf2 <_strtol_l.isra.0+0x4a>
 800cbde:	2c30      	cmp	r4, #48	; 0x30
 800cbe0:	d107      	bne.n	800cbf2 <_strtol_l.isra.0+0x4a>
 800cbe2:	782b      	ldrb	r3, [r5, #0]
 800cbe4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cbe8:	2b58      	cmp	r3, #88	; 0x58
 800cbea:	d14f      	bne.n	800cc8c <_strtol_l.isra.0+0xe4>
 800cbec:	786c      	ldrb	r4, [r5, #1]
 800cbee:	2610      	movs	r6, #16
 800cbf0:	3502      	adds	r5, #2
 800cbf2:	2a00      	cmp	r2, #0
 800cbf4:	bf14      	ite	ne
 800cbf6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800cbfa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800cbfe:	2700      	movs	r7, #0
 800cc00:	fbb1 fcf6 	udiv	ip, r1, r6
 800cc04:	4638      	mov	r0, r7
 800cc06:	fb06 1e1c 	mls	lr, r6, ip, r1
 800cc0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800cc0e:	2b09      	cmp	r3, #9
 800cc10:	d817      	bhi.n	800cc42 <_strtol_l.isra.0+0x9a>
 800cc12:	461c      	mov	r4, r3
 800cc14:	42a6      	cmp	r6, r4
 800cc16:	dd23      	ble.n	800cc60 <_strtol_l.isra.0+0xb8>
 800cc18:	1c7b      	adds	r3, r7, #1
 800cc1a:	d007      	beq.n	800cc2c <_strtol_l.isra.0+0x84>
 800cc1c:	4584      	cmp	ip, r0
 800cc1e:	d31c      	bcc.n	800cc5a <_strtol_l.isra.0+0xb2>
 800cc20:	d101      	bne.n	800cc26 <_strtol_l.isra.0+0x7e>
 800cc22:	45a6      	cmp	lr, r4
 800cc24:	db19      	blt.n	800cc5a <_strtol_l.isra.0+0xb2>
 800cc26:	fb00 4006 	mla	r0, r0, r6, r4
 800cc2a:	2701      	movs	r7, #1
 800cc2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc30:	e7eb      	b.n	800cc0a <_strtol_l.isra.0+0x62>
 800cc32:	462f      	mov	r7, r5
 800cc34:	e7bf      	b.n	800cbb6 <_strtol_l.isra.0+0xe>
 800cc36:	2c2b      	cmp	r4, #43	; 0x2b
 800cc38:	bf04      	itt	eq
 800cc3a:	1cbd      	addeq	r5, r7, #2
 800cc3c:	787c      	ldrbeq	r4, [r7, #1]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	e7c9      	b.n	800cbd6 <_strtol_l.isra.0+0x2e>
 800cc42:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800cc46:	2b19      	cmp	r3, #25
 800cc48:	d801      	bhi.n	800cc4e <_strtol_l.isra.0+0xa6>
 800cc4a:	3c37      	subs	r4, #55	; 0x37
 800cc4c:	e7e2      	b.n	800cc14 <_strtol_l.isra.0+0x6c>
 800cc4e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cc52:	2b19      	cmp	r3, #25
 800cc54:	d804      	bhi.n	800cc60 <_strtol_l.isra.0+0xb8>
 800cc56:	3c57      	subs	r4, #87	; 0x57
 800cc58:	e7dc      	b.n	800cc14 <_strtol_l.isra.0+0x6c>
 800cc5a:	f04f 37ff 	mov.w	r7, #4294967295
 800cc5e:	e7e5      	b.n	800cc2c <_strtol_l.isra.0+0x84>
 800cc60:	1c7b      	adds	r3, r7, #1
 800cc62:	d108      	bne.n	800cc76 <_strtol_l.isra.0+0xce>
 800cc64:	2322      	movs	r3, #34	; 0x22
 800cc66:	f8c8 3000 	str.w	r3, [r8]
 800cc6a:	4608      	mov	r0, r1
 800cc6c:	f1ba 0f00 	cmp.w	sl, #0
 800cc70:	d107      	bne.n	800cc82 <_strtol_l.isra.0+0xda>
 800cc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc76:	b102      	cbz	r2, 800cc7a <_strtol_l.isra.0+0xd2>
 800cc78:	4240      	negs	r0, r0
 800cc7a:	f1ba 0f00 	cmp.w	sl, #0
 800cc7e:	d0f8      	beq.n	800cc72 <_strtol_l.isra.0+0xca>
 800cc80:	b10f      	cbz	r7, 800cc86 <_strtol_l.isra.0+0xde>
 800cc82:	f105 39ff 	add.w	r9, r5, #4294967295
 800cc86:	f8ca 9000 	str.w	r9, [sl]
 800cc8a:	e7f2      	b.n	800cc72 <_strtol_l.isra.0+0xca>
 800cc8c:	2430      	movs	r4, #48	; 0x30
 800cc8e:	2e00      	cmp	r6, #0
 800cc90:	d1af      	bne.n	800cbf2 <_strtol_l.isra.0+0x4a>
 800cc92:	2608      	movs	r6, #8
 800cc94:	e7ad      	b.n	800cbf2 <_strtol_l.isra.0+0x4a>
 800cc96:	2c30      	cmp	r4, #48	; 0x30
 800cc98:	d0a3      	beq.n	800cbe2 <_strtol_l.isra.0+0x3a>
 800cc9a:	260a      	movs	r6, #10
 800cc9c:	e7a9      	b.n	800cbf2 <_strtol_l.isra.0+0x4a>
	...

0800cca0 <_strtol_r>:
 800cca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cca2:	4c06      	ldr	r4, [pc, #24]	; (800ccbc <_strtol_r+0x1c>)
 800cca4:	4d06      	ldr	r5, [pc, #24]	; (800ccc0 <_strtol_r+0x20>)
 800cca6:	6824      	ldr	r4, [r4, #0]
 800cca8:	6a24      	ldr	r4, [r4, #32]
 800ccaa:	2c00      	cmp	r4, #0
 800ccac:	bf08      	it	eq
 800ccae:	462c      	moveq	r4, r5
 800ccb0:	9400      	str	r4, [sp, #0]
 800ccb2:	f7ff ff79 	bl	800cba8 <_strtol_l.isra.0>
 800ccb6:	b003      	add	sp, #12
 800ccb8:	bd30      	pop	{r4, r5, pc}
 800ccba:	bf00      	nop
 800ccbc:	20000084 	.word	0x20000084
 800ccc0:	200000e8 	.word	0x200000e8

0800ccc4 <__swbuf_r>:
 800ccc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc6:	460e      	mov	r6, r1
 800ccc8:	4614      	mov	r4, r2
 800ccca:	4605      	mov	r5, r0
 800cccc:	b118      	cbz	r0, 800ccd6 <__swbuf_r+0x12>
 800ccce:	6983      	ldr	r3, [r0, #24]
 800ccd0:	b90b      	cbnz	r3, 800ccd6 <__swbuf_r+0x12>
 800ccd2:	f000 fff9 	bl	800dcc8 <__sinit>
 800ccd6:	4b21      	ldr	r3, [pc, #132]	; (800cd5c <__swbuf_r+0x98>)
 800ccd8:	429c      	cmp	r4, r3
 800ccda:	d12a      	bne.n	800cd32 <__swbuf_r+0x6e>
 800ccdc:	686c      	ldr	r4, [r5, #4]
 800ccde:	69a3      	ldr	r3, [r4, #24]
 800cce0:	60a3      	str	r3, [r4, #8]
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	071a      	lsls	r2, r3, #28
 800cce6:	d52e      	bpl.n	800cd46 <__swbuf_r+0x82>
 800cce8:	6923      	ldr	r3, [r4, #16]
 800ccea:	b363      	cbz	r3, 800cd46 <__swbuf_r+0x82>
 800ccec:	6923      	ldr	r3, [r4, #16]
 800ccee:	6820      	ldr	r0, [r4, #0]
 800ccf0:	1ac0      	subs	r0, r0, r3
 800ccf2:	6963      	ldr	r3, [r4, #20]
 800ccf4:	b2f6      	uxtb	r6, r6
 800ccf6:	4283      	cmp	r3, r0
 800ccf8:	4637      	mov	r7, r6
 800ccfa:	dc04      	bgt.n	800cd06 <__swbuf_r+0x42>
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f000 ff78 	bl	800dbf4 <_fflush_r>
 800cd04:	bb28      	cbnz	r0, 800cd52 <__swbuf_r+0x8e>
 800cd06:	68a3      	ldr	r3, [r4, #8]
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	60a3      	str	r3, [r4, #8]
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	1c5a      	adds	r2, r3, #1
 800cd10:	6022      	str	r2, [r4, #0]
 800cd12:	701e      	strb	r6, [r3, #0]
 800cd14:	6963      	ldr	r3, [r4, #20]
 800cd16:	3001      	adds	r0, #1
 800cd18:	4283      	cmp	r3, r0
 800cd1a:	d004      	beq.n	800cd26 <__swbuf_r+0x62>
 800cd1c:	89a3      	ldrh	r3, [r4, #12]
 800cd1e:	07db      	lsls	r3, r3, #31
 800cd20:	d519      	bpl.n	800cd56 <__swbuf_r+0x92>
 800cd22:	2e0a      	cmp	r6, #10
 800cd24:	d117      	bne.n	800cd56 <__swbuf_r+0x92>
 800cd26:	4621      	mov	r1, r4
 800cd28:	4628      	mov	r0, r5
 800cd2a:	f000 ff63 	bl	800dbf4 <_fflush_r>
 800cd2e:	b190      	cbz	r0, 800cd56 <__swbuf_r+0x92>
 800cd30:	e00f      	b.n	800cd52 <__swbuf_r+0x8e>
 800cd32:	4b0b      	ldr	r3, [pc, #44]	; (800cd60 <__swbuf_r+0x9c>)
 800cd34:	429c      	cmp	r4, r3
 800cd36:	d101      	bne.n	800cd3c <__swbuf_r+0x78>
 800cd38:	68ac      	ldr	r4, [r5, #8]
 800cd3a:	e7d0      	b.n	800ccde <__swbuf_r+0x1a>
 800cd3c:	4b09      	ldr	r3, [pc, #36]	; (800cd64 <__swbuf_r+0xa0>)
 800cd3e:	429c      	cmp	r4, r3
 800cd40:	bf08      	it	eq
 800cd42:	68ec      	ldreq	r4, [r5, #12]
 800cd44:	e7cb      	b.n	800ccde <__swbuf_r+0x1a>
 800cd46:	4621      	mov	r1, r4
 800cd48:	4628      	mov	r0, r5
 800cd4a:	f000 f81b 	bl	800cd84 <__swsetup_r>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d0cc      	beq.n	800ccec <__swbuf_r+0x28>
 800cd52:	f04f 37ff 	mov.w	r7, #4294967295
 800cd56:	4638      	mov	r0, r7
 800cd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	0800fff0 	.word	0x0800fff0
 800cd60:	08010010 	.word	0x08010010
 800cd64:	0800ffd0 	.word	0x0800ffd0

0800cd68 <__ascii_wctomb>:
 800cd68:	b149      	cbz	r1, 800cd7e <__ascii_wctomb+0x16>
 800cd6a:	2aff      	cmp	r2, #255	; 0xff
 800cd6c:	bf85      	ittet	hi
 800cd6e:	238a      	movhi	r3, #138	; 0x8a
 800cd70:	6003      	strhi	r3, [r0, #0]
 800cd72:	700a      	strbls	r2, [r1, #0]
 800cd74:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd78:	bf98      	it	ls
 800cd7a:	2001      	movls	r0, #1
 800cd7c:	4770      	bx	lr
 800cd7e:	4608      	mov	r0, r1
 800cd80:	4770      	bx	lr
	...

0800cd84 <__swsetup_r>:
 800cd84:	4b32      	ldr	r3, [pc, #200]	; (800ce50 <__swsetup_r+0xcc>)
 800cd86:	b570      	push	{r4, r5, r6, lr}
 800cd88:	681d      	ldr	r5, [r3, #0]
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	b125      	cbz	r5, 800cd9a <__swsetup_r+0x16>
 800cd90:	69ab      	ldr	r3, [r5, #24]
 800cd92:	b913      	cbnz	r3, 800cd9a <__swsetup_r+0x16>
 800cd94:	4628      	mov	r0, r5
 800cd96:	f000 ff97 	bl	800dcc8 <__sinit>
 800cd9a:	4b2e      	ldr	r3, [pc, #184]	; (800ce54 <__swsetup_r+0xd0>)
 800cd9c:	429c      	cmp	r4, r3
 800cd9e:	d10f      	bne.n	800cdc0 <__swsetup_r+0x3c>
 800cda0:	686c      	ldr	r4, [r5, #4]
 800cda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cda6:	b29a      	uxth	r2, r3
 800cda8:	0715      	lsls	r5, r2, #28
 800cdaa:	d42c      	bmi.n	800ce06 <__swsetup_r+0x82>
 800cdac:	06d0      	lsls	r0, r2, #27
 800cdae:	d411      	bmi.n	800cdd4 <__swsetup_r+0x50>
 800cdb0:	2209      	movs	r2, #9
 800cdb2:	6032      	str	r2, [r6, #0]
 800cdb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdb8:	81a3      	strh	r3, [r4, #12]
 800cdba:	f04f 30ff 	mov.w	r0, #4294967295
 800cdbe:	e03e      	b.n	800ce3e <__swsetup_r+0xba>
 800cdc0:	4b25      	ldr	r3, [pc, #148]	; (800ce58 <__swsetup_r+0xd4>)
 800cdc2:	429c      	cmp	r4, r3
 800cdc4:	d101      	bne.n	800cdca <__swsetup_r+0x46>
 800cdc6:	68ac      	ldr	r4, [r5, #8]
 800cdc8:	e7eb      	b.n	800cda2 <__swsetup_r+0x1e>
 800cdca:	4b24      	ldr	r3, [pc, #144]	; (800ce5c <__swsetup_r+0xd8>)
 800cdcc:	429c      	cmp	r4, r3
 800cdce:	bf08      	it	eq
 800cdd0:	68ec      	ldreq	r4, [r5, #12]
 800cdd2:	e7e6      	b.n	800cda2 <__swsetup_r+0x1e>
 800cdd4:	0751      	lsls	r1, r2, #29
 800cdd6:	d512      	bpl.n	800cdfe <__swsetup_r+0x7a>
 800cdd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdda:	b141      	cbz	r1, 800cdee <__swsetup_r+0x6a>
 800cddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cde0:	4299      	cmp	r1, r3
 800cde2:	d002      	beq.n	800cdea <__swsetup_r+0x66>
 800cde4:	4630      	mov	r0, r6
 800cde6:	f001 ffa9 	bl	800ed3c <_free_r>
 800cdea:	2300      	movs	r3, #0
 800cdec:	6363      	str	r3, [r4, #52]	; 0x34
 800cdee:	89a3      	ldrh	r3, [r4, #12]
 800cdf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cdf4:	81a3      	strh	r3, [r4, #12]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	6063      	str	r3, [r4, #4]
 800cdfa:	6923      	ldr	r3, [r4, #16]
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	89a3      	ldrh	r3, [r4, #12]
 800ce00:	f043 0308 	orr.w	r3, r3, #8
 800ce04:	81a3      	strh	r3, [r4, #12]
 800ce06:	6923      	ldr	r3, [r4, #16]
 800ce08:	b94b      	cbnz	r3, 800ce1e <__swsetup_r+0x9a>
 800ce0a:	89a3      	ldrh	r3, [r4, #12]
 800ce0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce14:	d003      	beq.n	800ce1e <__swsetup_r+0x9a>
 800ce16:	4621      	mov	r1, r4
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f001 fb39 	bl	800e490 <__smakebuf_r>
 800ce1e:	89a2      	ldrh	r2, [r4, #12]
 800ce20:	f012 0301 	ands.w	r3, r2, #1
 800ce24:	d00c      	beq.n	800ce40 <__swsetup_r+0xbc>
 800ce26:	2300      	movs	r3, #0
 800ce28:	60a3      	str	r3, [r4, #8]
 800ce2a:	6963      	ldr	r3, [r4, #20]
 800ce2c:	425b      	negs	r3, r3
 800ce2e:	61a3      	str	r3, [r4, #24]
 800ce30:	6923      	ldr	r3, [r4, #16]
 800ce32:	b953      	cbnz	r3, 800ce4a <__swsetup_r+0xc6>
 800ce34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ce3c:	d1ba      	bne.n	800cdb4 <__swsetup_r+0x30>
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}
 800ce40:	0792      	lsls	r2, r2, #30
 800ce42:	bf58      	it	pl
 800ce44:	6963      	ldrpl	r3, [r4, #20]
 800ce46:	60a3      	str	r3, [r4, #8]
 800ce48:	e7f2      	b.n	800ce30 <__swsetup_r+0xac>
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	e7f7      	b.n	800ce3e <__swsetup_r+0xba>
 800ce4e:	bf00      	nop
 800ce50:	20000084 	.word	0x20000084
 800ce54:	0800fff0 	.word	0x0800fff0
 800ce58:	08010010 	.word	0x08010010
 800ce5c:	0800ffd0 	.word	0x0800ffd0

0800ce60 <quorem>:
 800ce60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	6903      	ldr	r3, [r0, #16]
 800ce66:	690c      	ldr	r4, [r1, #16]
 800ce68:	42a3      	cmp	r3, r4
 800ce6a:	4680      	mov	r8, r0
 800ce6c:	f2c0 8082 	blt.w	800cf74 <quorem+0x114>
 800ce70:	3c01      	subs	r4, #1
 800ce72:	f101 0714 	add.w	r7, r1, #20
 800ce76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ce7a:	f100 0614 	add.w	r6, r0, #20
 800ce7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ce82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ce86:	eb06 030c 	add.w	r3, r6, ip
 800ce8a:	3501      	adds	r5, #1
 800ce8c:	eb07 090c 	add.w	r9, r7, ip
 800ce90:	9301      	str	r3, [sp, #4]
 800ce92:	fbb0 f5f5 	udiv	r5, r0, r5
 800ce96:	b395      	cbz	r5, 800cefe <quorem+0x9e>
 800ce98:	f04f 0a00 	mov.w	sl, #0
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	46b6      	mov	lr, r6
 800cea0:	46d3      	mov	fp, sl
 800cea2:	f850 2b04 	ldr.w	r2, [r0], #4
 800cea6:	b293      	uxth	r3, r2
 800cea8:	fb05 a303 	mla	r3, r5, r3, sl
 800ceac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	ebab 0303 	sub.w	r3, fp, r3
 800ceb6:	0c12      	lsrs	r2, r2, #16
 800ceb8:	f8de b000 	ldr.w	fp, [lr]
 800cebc:	fb05 a202 	mla	r2, r5, r2, sl
 800cec0:	fa13 f38b 	uxtah	r3, r3, fp
 800cec4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cec8:	fa1f fb82 	uxth.w	fp, r2
 800cecc:	f8de 2000 	ldr.w	r2, [lr]
 800ced0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ced4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cede:	4581      	cmp	r9, r0
 800cee0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cee4:	f84e 3b04 	str.w	r3, [lr], #4
 800cee8:	d2db      	bcs.n	800cea2 <quorem+0x42>
 800ceea:	f856 300c 	ldr.w	r3, [r6, ip]
 800ceee:	b933      	cbnz	r3, 800cefe <quorem+0x9e>
 800cef0:	9b01      	ldr	r3, [sp, #4]
 800cef2:	3b04      	subs	r3, #4
 800cef4:	429e      	cmp	r6, r3
 800cef6:	461a      	mov	r2, r3
 800cef8:	d330      	bcc.n	800cf5c <quorem+0xfc>
 800cefa:	f8c8 4010 	str.w	r4, [r8, #16]
 800cefe:	4640      	mov	r0, r8
 800cf00:	f001 fd62 	bl	800e9c8 <__mcmp>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	db25      	blt.n	800cf54 <quorem+0xf4>
 800cf08:	3501      	adds	r5, #1
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	f04f 0c00 	mov.w	ip, #0
 800cf10:	f857 2b04 	ldr.w	r2, [r7], #4
 800cf14:	f8d0 e000 	ldr.w	lr, [r0]
 800cf18:	b293      	uxth	r3, r2
 800cf1a:	ebac 0303 	sub.w	r3, ip, r3
 800cf1e:	0c12      	lsrs	r2, r2, #16
 800cf20:	fa13 f38e 	uxtah	r3, r3, lr
 800cf24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cf28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf32:	45b9      	cmp	r9, r7
 800cf34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cf38:	f840 3b04 	str.w	r3, [r0], #4
 800cf3c:	d2e8      	bcs.n	800cf10 <quorem+0xb0>
 800cf3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cf42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cf46:	b92a      	cbnz	r2, 800cf54 <quorem+0xf4>
 800cf48:	3b04      	subs	r3, #4
 800cf4a:	429e      	cmp	r6, r3
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	d30b      	bcc.n	800cf68 <quorem+0x108>
 800cf50:	f8c8 4010 	str.w	r4, [r8, #16]
 800cf54:	4628      	mov	r0, r5
 800cf56:	b003      	add	sp, #12
 800cf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5c:	6812      	ldr	r2, [r2, #0]
 800cf5e:	3b04      	subs	r3, #4
 800cf60:	2a00      	cmp	r2, #0
 800cf62:	d1ca      	bne.n	800cefa <quorem+0x9a>
 800cf64:	3c01      	subs	r4, #1
 800cf66:	e7c5      	b.n	800cef4 <quorem+0x94>
 800cf68:	6812      	ldr	r2, [r2, #0]
 800cf6a:	3b04      	subs	r3, #4
 800cf6c:	2a00      	cmp	r2, #0
 800cf6e:	d1ef      	bne.n	800cf50 <quorem+0xf0>
 800cf70:	3c01      	subs	r4, #1
 800cf72:	e7ea      	b.n	800cf4a <quorem+0xea>
 800cf74:	2000      	movs	r0, #0
 800cf76:	e7ee      	b.n	800cf56 <quorem+0xf6>

0800cf78 <_dtoa_r>:
 800cf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf7c:	ec57 6b10 	vmov	r6, r7, d0
 800cf80:	b097      	sub	sp, #92	; 0x5c
 800cf82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf84:	9106      	str	r1, [sp, #24]
 800cf86:	4604      	mov	r4, r0
 800cf88:	920b      	str	r2, [sp, #44]	; 0x2c
 800cf8a:	9312      	str	r3, [sp, #72]	; 0x48
 800cf8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cf90:	e9cd 6700 	strd	r6, r7, [sp]
 800cf94:	b93d      	cbnz	r5, 800cfa6 <_dtoa_r+0x2e>
 800cf96:	2010      	movs	r0, #16
 800cf98:	f001 faba 	bl	800e510 <malloc>
 800cf9c:	6260      	str	r0, [r4, #36]	; 0x24
 800cf9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cfa2:	6005      	str	r5, [r0, #0]
 800cfa4:	60c5      	str	r5, [r0, #12]
 800cfa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfa8:	6819      	ldr	r1, [r3, #0]
 800cfaa:	b151      	cbz	r1, 800cfc2 <_dtoa_r+0x4a>
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	604a      	str	r2, [r1, #4]
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	4093      	lsls	r3, r2
 800cfb4:	608b      	str	r3, [r1, #8]
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f001 fae6 	bl	800e588 <_Bfree>
 800cfbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	601a      	str	r2, [r3, #0]
 800cfc2:	1e3b      	subs	r3, r7, #0
 800cfc4:	bfbb      	ittet	lt
 800cfc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cfca:	9301      	strlt	r3, [sp, #4]
 800cfcc:	2300      	movge	r3, #0
 800cfce:	2201      	movlt	r2, #1
 800cfd0:	bfac      	ite	ge
 800cfd2:	f8c8 3000 	strge.w	r3, [r8]
 800cfd6:	f8c8 2000 	strlt.w	r2, [r8]
 800cfda:	4baf      	ldr	r3, [pc, #700]	; (800d298 <_dtoa_r+0x320>)
 800cfdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cfe0:	ea33 0308 	bics.w	r3, r3, r8
 800cfe4:	d114      	bne.n	800d010 <_dtoa_r+0x98>
 800cfe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cfe8:	f242 730f 	movw	r3, #9999	; 0x270f
 800cfec:	6013      	str	r3, [r2, #0]
 800cfee:	9b00      	ldr	r3, [sp, #0]
 800cff0:	b923      	cbnz	r3, 800cffc <_dtoa_r+0x84>
 800cff2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cff6:	2800      	cmp	r0, #0
 800cff8:	f000 8542 	beq.w	800da80 <_dtoa_r+0xb08>
 800cffc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cffe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d2ac <_dtoa_r+0x334>
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 8544 	beq.w	800da90 <_dtoa_r+0xb18>
 800d008:	f10b 0303 	add.w	r3, fp, #3
 800d00c:	f000 bd3e 	b.w	800da8c <_dtoa_r+0xb14>
 800d010:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d014:	2200      	movs	r2, #0
 800d016:	2300      	movs	r3, #0
 800d018:	4630      	mov	r0, r6
 800d01a:	4639      	mov	r1, r7
 800d01c:	f7f3 fd5c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d020:	4681      	mov	r9, r0
 800d022:	b168      	cbz	r0, 800d040 <_dtoa_r+0xc8>
 800d024:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d026:	2301      	movs	r3, #1
 800d028:	6013      	str	r3, [r2, #0]
 800d02a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f000 8524 	beq.w	800da7a <_dtoa_r+0xb02>
 800d032:	4b9a      	ldr	r3, [pc, #616]	; (800d29c <_dtoa_r+0x324>)
 800d034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d036:	f103 3bff 	add.w	fp, r3, #4294967295
 800d03a:	6013      	str	r3, [r2, #0]
 800d03c:	f000 bd28 	b.w	800da90 <_dtoa_r+0xb18>
 800d040:	aa14      	add	r2, sp, #80	; 0x50
 800d042:	a915      	add	r1, sp, #84	; 0x54
 800d044:	ec47 6b10 	vmov	d0, r6, r7
 800d048:	4620      	mov	r0, r4
 800d04a:	f001 fdab 	bl	800eba4 <__d2b>
 800d04e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d052:	9004      	str	r0, [sp, #16]
 800d054:	2d00      	cmp	r5, #0
 800d056:	d07c      	beq.n	800d152 <_dtoa_r+0x1da>
 800d058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d05c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d060:	46b2      	mov	sl, r6
 800d062:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d06a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d06e:	2200      	movs	r2, #0
 800d070:	4b8b      	ldr	r3, [pc, #556]	; (800d2a0 <_dtoa_r+0x328>)
 800d072:	4650      	mov	r0, sl
 800d074:	4659      	mov	r1, fp
 800d076:	f7f3 f90f 	bl	8000298 <__aeabi_dsub>
 800d07a:	a381      	add	r3, pc, #516	; (adr r3, 800d280 <_dtoa_r+0x308>)
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	f7f3 fac2 	bl	8000608 <__aeabi_dmul>
 800d084:	a380      	add	r3, pc, #512	; (adr r3, 800d288 <_dtoa_r+0x310>)
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	f7f3 f907 	bl	800029c <__adddf3>
 800d08e:	4606      	mov	r6, r0
 800d090:	4628      	mov	r0, r5
 800d092:	460f      	mov	r7, r1
 800d094:	f7f3 fa4e 	bl	8000534 <__aeabi_i2d>
 800d098:	a37d      	add	r3, pc, #500	; (adr r3, 800d290 <_dtoa_r+0x318>)
 800d09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09e:	f7f3 fab3 	bl	8000608 <__aeabi_dmul>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	f7f3 f8f7 	bl	800029c <__adddf3>
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	460f      	mov	r7, r1
 800d0b2:	f7f3 fd59 	bl	8000b68 <__aeabi_d2iz>
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	4682      	mov	sl, r0
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	4630      	mov	r0, r6
 800d0be:	4639      	mov	r1, r7
 800d0c0:	f7f3 fd14 	bl	8000aec <__aeabi_dcmplt>
 800d0c4:	b148      	cbz	r0, 800d0da <_dtoa_r+0x162>
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	f7f3 fa34 	bl	8000534 <__aeabi_i2d>
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	463b      	mov	r3, r7
 800d0d0:	f7f3 fd02 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0d4:	b908      	cbnz	r0, 800d0da <_dtoa_r+0x162>
 800d0d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d0da:	f1ba 0f16 	cmp.w	sl, #22
 800d0de:	d859      	bhi.n	800d194 <_dtoa_r+0x21c>
 800d0e0:	4970      	ldr	r1, [pc, #448]	; (800d2a4 <_dtoa_r+0x32c>)
 800d0e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d0e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0ee:	f7f3 fd1b 	bl	8000b28 <__aeabi_dcmpgt>
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d050      	beq.n	800d198 <_dtoa_r+0x220>
 800d0f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d100:	1b5d      	subs	r5, r3, r5
 800d102:	f1b5 0801 	subs.w	r8, r5, #1
 800d106:	bf49      	itett	mi
 800d108:	f1c5 0301 	rsbmi	r3, r5, #1
 800d10c:	2300      	movpl	r3, #0
 800d10e:	9305      	strmi	r3, [sp, #20]
 800d110:	f04f 0800 	movmi.w	r8, #0
 800d114:	bf58      	it	pl
 800d116:	9305      	strpl	r3, [sp, #20]
 800d118:	f1ba 0f00 	cmp.w	sl, #0
 800d11c:	db3e      	blt.n	800d19c <_dtoa_r+0x224>
 800d11e:	2300      	movs	r3, #0
 800d120:	44d0      	add	r8, sl
 800d122:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d126:	9307      	str	r3, [sp, #28]
 800d128:	9b06      	ldr	r3, [sp, #24]
 800d12a:	2b09      	cmp	r3, #9
 800d12c:	f200 8090 	bhi.w	800d250 <_dtoa_r+0x2d8>
 800d130:	2b05      	cmp	r3, #5
 800d132:	bfc4      	itt	gt
 800d134:	3b04      	subgt	r3, #4
 800d136:	9306      	strgt	r3, [sp, #24]
 800d138:	9b06      	ldr	r3, [sp, #24]
 800d13a:	f1a3 0302 	sub.w	r3, r3, #2
 800d13e:	bfcc      	ite	gt
 800d140:	2500      	movgt	r5, #0
 800d142:	2501      	movle	r5, #1
 800d144:	2b03      	cmp	r3, #3
 800d146:	f200 808f 	bhi.w	800d268 <_dtoa_r+0x2f0>
 800d14a:	e8df f003 	tbb	[pc, r3]
 800d14e:	7f7d      	.short	0x7f7d
 800d150:	7131      	.short	0x7131
 800d152:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d156:	441d      	add	r5, r3
 800d158:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d15c:	2820      	cmp	r0, #32
 800d15e:	dd13      	ble.n	800d188 <_dtoa_r+0x210>
 800d160:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d164:	9b00      	ldr	r3, [sp, #0]
 800d166:	fa08 f800 	lsl.w	r8, r8, r0
 800d16a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d16e:	fa23 f000 	lsr.w	r0, r3, r0
 800d172:	ea48 0000 	orr.w	r0, r8, r0
 800d176:	f7f3 f9cd 	bl	8000514 <__aeabi_ui2d>
 800d17a:	2301      	movs	r3, #1
 800d17c:	4682      	mov	sl, r0
 800d17e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d182:	3d01      	subs	r5, #1
 800d184:	9313      	str	r3, [sp, #76]	; 0x4c
 800d186:	e772      	b.n	800d06e <_dtoa_r+0xf6>
 800d188:	9b00      	ldr	r3, [sp, #0]
 800d18a:	f1c0 0020 	rsb	r0, r0, #32
 800d18e:	fa03 f000 	lsl.w	r0, r3, r0
 800d192:	e7f0      	b.n	800d176 <_dtoa_r+0x1fe>
 800d194:	2301      	movs	r3, #1
 800d196:	e7b1      	b.n	800d0fc <_dtoa_r+0x184>
 800d198:	900f      	str	r0, [sp, #60]	; 0x3c
 800d19a:	e7b0      	b.n	800d0fe <_dtoa_r+0x186>
 800d19c:	9b05      	ldr	r3, [sp, #20]
 800d19e:	eba3 030a 	sub.w	r3, r3, sl
 800d1a2:	9305      	str	r3, [sp, #20]
 800d1a4:	f1ca 0300 	rsb	r3, sl, #0
 800d1a8:	9307      	str	r3, [sp, #28]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	930e      	str	r3, [sp, #56]	; 0x38
 800d1ae:	e7bb      	b.n	800d128 <_dtoa_r+0x1b0>
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	930a      	str	r3, [sp, #40]	; 0x28
 800d1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	dd59      	ble.n	800d26e <_dtoa_r+0x2f6>
 800d1ba:	9302      	str	r3, [sp, #8]
 800d1bc:	4699      	mov	r9, r3
 800d1be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	6072      	str	r2, [r6, #4]
 800d1c4:	2204      	movs	r2, #4
 800d1c6:	f102 0014 	add.w	r0, r2, #20
 800d1ca:	4298      	cmp	r0, r3
 800d1cc:	6871      	ldr	r1, [r6, #4]
 800d1ce:	d953      	bls.n	800d278 <_dtoa_r+0x300>
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f001 f9a5 	bl	800e520 <_Balloc>
 800d1d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1d8:	6030      	str	r0, [r6, #0]
 800d1da:	f1b9 0f0e 	cmp.w	r9, #14
 800d1de:	f8d3 b000 	ldr.w	fp, [r3]
 800d1e2:	f200 80e6 	bhi.w	800d3b2 <_dtoa_r+0x43a>
 800d1e6:	2d00      	cmp	r5, #0
 800d1e8:	f000 80e3 	beq.w	800d3b2 <_dtoa_r+0x43a>
 800d1ec:	ed9d 7b00 	vldr	d7, [sp]
 800d1f0:	f1ba 0f00 	cmp.w	sl, #0
 800d1f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d1f8:	dd74      	ble.n	800d2e4 <_dtoa_r+0x36c>
 800d1fa:	4a2a      	ldr	r2, [pc, #168]	; (800d2a4 <_dtoa_r+0x32c>)
 800d1fc:	f00a 030f 	and.w	r3, sl, #15
 800d200:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d204:	ed93 7b00 	vldr	d7, [r3]
 800d208:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d20c:	06f0      	lsls	r0, r6, #27
 800d20e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d212:	d565      	bpl.n	800d2e0 <_dtoa_r+0x368>
 800d214:	4b24      	ldr	r3, [pc, #144]	; (800d2a8 <_dtoa_r+0x330>)
 800d216:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d21a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d21e:	f7f3 fb1d 	bl	800085c <__aeabi_ddiv>
 800d222:	e9cd 0100 	strd	r0, r1, [sp]
 800d226:	f006 060f 	and.w	r6, r6, #15
 800d22a:	2503      	movs	r5, #3
 800d22c:	4f1e      	ldr	r7, [pc, #120]	; (800d2a8 <_dtoa_r+0x330>)
 800d22e:	e04c      	b.n	800d2ca <_dtoa_r+0x352>
 800d230:	2301      	movs	r3, #1
 800d232:	930a      	str	r3, [sp, #40]	; 0x28
 800d234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d236:	4453      	add	r3, sl
 800d238:	f103 0901 	add.w	r9, r3, #1
 800d23c:	9302      	str	r3, [sp, #8]
 800d23e:	464b      	mov	r3, r9
 800d240:	2b01      	cmp	r3, #1
 800d242:	bfb8      	it	lt
 800d244:	2301      	movlt	r3, #1
 800d246:	e7ba      	b.n	800d1be <_dtoa_r+0x246>
 800d248:	2300      	movs	r3, #0
 800d24a:	e7b2      	b.n	800d1b2 <_dtoa_r+0x23a>
 800d24c:	2300      	movs	r3, #0
 800d24e:	e7f0      	b.n	800d232 <_dtoa_r+0x2ba>
 800d250:	2501      	movs	r5, #1
 800d252:	2300      	movs	r3, #0
 800d254:	9306      	str	r3, [sp, #24]
 800d256:	950a      	str	r5, [sp, #40]	; 0x28
 800d258:	f04f 33ff 	mov.w	r3, #4294967295
 800d25c:	9302      	str	r3, [sp, #8]
 800d25e:	4699      	mov	r9, r3
 800d260:	2200      	movs	r2, #0
 800d262:	2312      	movs	r3, #18
 800d264:	920b      	str	r2, [sp, #44]	; 0x2c
 800d266:	e7aa      	b.n	800d1be <_dtoa_r+0x246>
 800d268:	2301      	movs	r3, #1
 800d26a:	930a      	str	r3, [sp, #40]	; 0x28
 800d26c:	e7f4      	b.n	800d258 <_dtoa_r+0x2e0>
 800d26e:	2301      	movs	r3, #1
 800d270:	9302      	str	r3, [sp, #8]
 800d272:	4699      	mov	r9, r3
 800d274:	461a      	mov	r2, r3
 800d276:	e7f5      	b.n	800d264 <_dtoa_r+0x2ec>
 800d278:	3101      	adds	r1, #1
 800d27a:	6071      	str	r1, [r6, #4]
 800d27c:	0052      	lsls	r2, r2, #1
 800d27e:	e7a2      	b.n	800d1c6 <_dtoa_r+0x24e>
 800d280:	636f4361 	.word	0x636f4361
 800d284:	3fd287a7 	.word	0x3fd287a7
 800d288:	8b60c8b3 	.word	0x8b60c8b3
 800d28c:	3fc68a28 	.word	0x3fc68a28
 800d290:	509f79fb 	.word	0x509f79fb
 800d294:	3fd34413 	.word	0x3fd34413
 800d298:	7ff00000 	.word	0x7ff00000
 800d29c:	0800fe43 	.word	0x0800fe43
 800d2a0:	3ff80000 	.word	0x3ff80000
 800d2a4:	08010058 	.word	0x08010058
 800d2a8:	08010030 	.word	0x08010030
 800d2ac:	0800ffca 	.word	0x0800ffca
 800d2b0:	07f1      	lsls	r1, r6, #31
 800d2b2:	d508      	bpl.n	800d2c6 <_dtoa_r+0x34e>
 800d2b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d2b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2bc:	f7f3 f9a4 	bl	8000608 <__aeabi_dmul>
 800d2c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d2c4:	3501      	adds	r5, #1
 800d2c6:	1076      	asrs	r6, r6, #1
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	2e00      	cmp	r6, #0
 800d2cc:	d1f0      	bne.n	800d2b0 <_dtoa_r+0x338>
 800d2ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d2d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2d6:	f7f3 fac1 	bl	800085c <__aeabi_ddiv>
 800d2da:	e9cd 0100 	strd	r0, r1, [sp]
 800d2de:	e01a      	b.n	800d316 <_dtoa_r+0x39e>
 800d2e0:	2502      	movs	r5, #2
 800d2e2:	e7a3      	b.n	800d22c <_dtoa_r+0x2b4>
 800d2e4:	f000 80a0 	beq.w	800d428 <_dtoa_r+0x4b0>
 800d2e8:	f1ca 0600 	rsb	r6, sl, #0
 800d2ec:	4b9f      	ldr	r3, [pc, #636]	; (800d56c <_dtoa_r+0x5f4>)
 800d2ee:	4fa0      	ldr	r7, [pc, #640]	; (800d570 <_dtoa_r+0x5f8>)
 800d2f0:	f006 020f 	and.w	r2, r6, #15
 800d2f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d300:	f7f3 f982 	bl	8000608 <__aeabi_dmul>
 800d304:	e9cd 0100 	strd	r0, r1, [sp]
 800d308:	1136      	asrs	r6, r6, #4
 800d30a:	2300      	movs	r3, #0
 800d30c:	2502      	movs	r5, #2
 800d30e:	2e00      	cmp	r6, #0
 800d310:	d17f      	bne.n	800d412 <_dtoa_r+0x49a>
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1e1      	bne.n	800d2da <_dtoa_r+0x362>
 800d316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 8087 	beq.w	800d42c <_dtoa_r+0x4b4>
 800d31e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d322:	2200      	movs	r2, #0
 800d324:	4b93      	ldr	r3, [pc, #588]	; (800d574 <_dtoa_r+0x5fc>)
 800d326:	4630      	mov	r0, r6
 800d328:	4639      	mov	r1, r7
 800d32a:	f7f3 fbdf 	bl	8000aec <__aeabi_dcmplt>
 800d32e:	2800      	cmp	r0, #0
 800d330:	d07c      	beq.n	800d42c <_dtoa_r+0x4b4>
 800d332:	f1b9 0f00 	cmp.w	r9, #0
 800d336:	d079      	beq.n	800d42c <_dtoa_r+0x4b4>
 800d338:	9b02      	ldr	r3, [sp, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	dd35      	ble.n	800d3aa <_dtoa_r+0x432>
 800d33e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d342:	9308      	str	r3, [sp, #32]
 800d344:	4639      	mov	r1, r7
 800d346:	2200      	movs	r2, #0
 800d348:	4b8b      	ldr	r3, [pc, #556]	; (800d578 <_dtoa_r+0x600>)
 800d34a:	4630      	mov	r0, r6
 800d34c:	f7f3 f95c 	bl	8000608 <__aeabi_dmul>
 800d350:	e9cd 0100 	strd	r0, r1, [sp]
 800d354:	9f02      	ldr	r7, [sp, #8]
 800d356:	3501      	adds	r5, #1
 800d358:	4628      	mov	r0, r5
 800d35a:	f7f3 f8eb 	bl	8000534 <__aeabi_i2d>
 800d35e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d362:	f7f3 f951 	bl	8000608 <__aeabi_dmul>
 800d366:	2200      	movs	r2, #0
 800d368:	4b84      	ldr	r3, [pc, #528]	; (800d57c <_dtoa_r+0x604>)
 800d36a:	f7f2 ff97 	bl	800029c <__adddf3>
 800d36e:	4605      	mov	r5, r0
 800d370:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d374:	2f00      	cmp	r7, #0
 800d376:	d15d      	bne.n	800d434 <_dtoa_r+0x4bc>
 800d378:	2200      	movs	r2, #0
 800d37a:	4b81      	ldr	r3, [pc, #516]	; (800d580 <_dtoa_r+0x608>)
 800d37c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d380:	f7f2 ff8a 	bl	8000298 <__aeabi_dsub>
 800d384:	462a      	mov	r2, r5
 800d386:	4633      	mov	r3, r6
 800d388:	e9cd 0100 	strd	r0, r1, [sp]
 800d38c:	f7f3 fbcc 	bl	8000b28 <__aeabi_dcmpgt>
 800d390:	2800      	cmp	r0, #0
 800d392:	f040 8288 	bne.w	800d8a6 <_dtoa_r+0x92e>
 800d396:	462a      	mov	r2, r5
 800d398:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d39c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3a0:	f7f3 fba4 	bl	8000aec <__aeabi_dcmplt>
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	f040 827c 	bne.w	800d8a2 <_dtoa_r+0x92a>
 800d3aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d3ae:	e9cd 2300 	strd	r2, r3, [sp]
 800d3b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f2c0 8150 	blt.w	800d65a <_dtoa_r+0x6e2>
 800d3ba:	f1ba 0f0e 	cmp.w	sl, #14
 800d3be:	f300 814c 	bgt.w	800d65a <_dtoa_r+0x6e2>
 800d3c2:	4b6a      	ldr	r3, [pc, #424]	; (800d56c <_dtoa_r+0x5f4>)
 800d3c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d3c8:	ed93 7b00 	vldr	d7, [r3]
 800d3cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d3d4:	f280 80d8 	bge.w	800d588 <_dtoa_r+0x610>
 800d3d8:	f1b9 0f00 	cmp.w	r9, #0
 800d3dc:	f300 80d4 	bgt.w	800d588 <_dtoa_r+0x610>
 800d3e0:	f040 825e 	bne.w	800d8a0 <_dtoa_r+0x928>
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	4b66      	ldr	r3, [pc, #408]	; (800d580 <_dtoa_r+0x608>)
 800d3e8:	ec51 0b17 	vmov	r0, r1, d7
 800d3ec:	f7f3 f90c 	bl	8000608 <__aeabi_dmul>
 800d3f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3f4:	f7f3 fb8e 	bl	8000b14 <__aeabi_dcmpge>
 800d3f8:	464f      	mov	r7, r9
 800d3fa:	464e      	mov	r6, r9
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	f040 8234 	bne.w	800d86a <_dtoa_r+0x8f2>
 800d402:	2331      	movs	r3, #49	; 0x31
 800d404:	f10b 0501 	add.w	r5, fp, #1
 800d408:	f88b 3000 	strb.w	r3, [fp]
 800d40c:	f10a 0a01 	add.w	sl, sl, #1
 800d410:	e22f      	b.n	800d872 <_dtoa_r+0x8fa>
 800d412:	07f2      	lsls	r2, r6, #31
 800d414:	d505      	bpl.n	800d422 <_dtoa_r+0x4aa>
 800d416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d41a:	f7f3 f8f5 	bl	8000608 <__aeabi_dmul>
 800d41e:	3501      	adds	r5, #1
 800d420:	2301      	movs	r3, #1
 800d422:	1076      	asrs	r6, r6, #1
 800d424:	3708      	adds	r7, #8
 800d426:	e772      	b.n	800d30e <_dtoa_r+0x396>
 800d428:	2502      	movs	r5, #2
 800d42a:	e774      	b.n	800d316 <_dtoa_r+0x39e>
 800d42c:	f8cd a020 	str.w	sl, [sp, #32]
 800d430:	464f      	mov	r7, r9
 800d432:	e791      	b.n	800d358 <_dtoa_r+0x3e0>
 800d434:	4b4d      	ldr	r3, [pc, #308]	; (800d56c <_dtoa_r+0x5f4>)
 800d436:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d43a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d43e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d440:	2b00      	cmp	r3, #0
 800d442:	d047      	beq.n	800d4d4 <_dtoa_r+0x55c>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	2000      	movs	r0, #0
 800d44a:	494e      	ldr	r1, [pc, #312]	; (800d584 <_dtoa_r+0x60c>)
 800d44c:	f7f3 fa06 	bl	800085c <__aeabi_ddiv>
 800d450:	462a      	mov	r2, r5
 800d452:	4633      	mov	r3, r6
 800d454:	f7f2 ff20 	bl	8000298 <__aeabi_dsub>
 800d458:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d45c:	465d      	mov	r5, fp
 800d45e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d462:	f7f3 fb81 	bl	8000b68 <__aeabi_d2iz>
 800d466:	4606      	mov	r6, r0
 800d468:	f7f3 f864 	bl	8000534 <__aeabi_i2d>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d474:	f7f2 ff10 	bl	8000298 <__aeabi_dsub>
 800d478:	3630      	adds	r6, #48	; 0x30
 800d47a:	f805 6b01 	strb.w	r6, [r5], #1
 800d47e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d482:	e9cd 0100 	strd	r0, r1, [sp]
 800d486:	f7f3 fb31 	bl	8000aec <__aeabi_dcmplt>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d163      	bne.n	800d556 <_dtoa_r+0x5de>
 800d48e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d492:	2000      	movs	r0, #0
 800d494:	4937      	ldr	r1, [pc, #220]	; (800d574 <_dtoa_r+0x5fc>)
 800d496:	f7f2 feff 	bl	8000298 <__aeabi_dsub>
 800d49a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d49e:	f7f3 fb25 	bl	8000aec <__aeabi_dcmplt>
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	f040 80b7 	bne.w	800d616 <_dtoa_r+0x69e>
 800d4a8:	eba5 030b 	sub.w	r3, r5, fp
 800d4ac:	429f      	cmp	r7, r3
 800d4ae:	f77f af7c 	ble.w	800d3aa <_dtoa_r+0x432>
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	4b30      	ldr	r3, [pc, #192]	; (800d578 <_dtoa_r+0x600>)
 800d4b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d4ba:	f7f3 f8a5 	bl	8000608 <__aeabi_dmul>
 800d4be:	2200      	movs	r2, #0
 800d4c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d4c4:	4b2c      	ldr	r3, [pc, #176]	; (800d578 <_dtoa_r+0x600>)
 800d4c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4ca:	f7f3 f89d 	bl	8000608 <__aeabi_dmul>
 800d4ce:	e9cd 0100 	strd	r0, r1, [sp]
 800d4d2:	e7c4      	b.n	800d45e <_dtoa_r+0x4e6>
 800d4d4:	462a      	mov	r2, r5
 800d4d6:	4633      	mov	r3, r6
 800d4d8:	f7f3 f896 	bl	8000608 <__aeabi_dmul>
 800d4dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d4e0:	eb0b 0507 	add.w	r5, fp, r7
 800d4e4:	465e      	mov	r6, fp
 800d4e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4ea:	f7f3 fb3d 	bl	8000b68 <__aeabi_d2iz>
 800d4ee:	4607      	mov	r7, r0
 800d4f0:	f7f3 f820 	bl	8000534 <__aeabi_i2d>
 800d4f4:	3730      	adds	r7, #48	; 0x30
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4fe:	f7f2 fecb 	bl	8000298 <__aeabi_dsub>
 800d502:	f806 7b01 	strb.w	r7, [r6], #1
 800d506:	42ae      	cmp	r6, r5
 800d508:	e9cd 0100 	strd	r0, r1, [sp]
 800d50c:	f04f 0200 	mov.w	r2, #0
 800d510:	d126      	bne.n	800d560 <_dtoa_r+0x5e8>
 800d512:	4b1c      	ldr	r3, [pc, #112]	; (800d584 <_dtoa_r+0x60c>)
 800d514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d518:	f7f2 fec0 	bl	800029c <__adddf3>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d524:	f7f3 fb00 	bl	8000b28 <__aeabi_dcmpgt>
 800d528:	2800      	cmp	r0, #0
 800d52a:	d174      	bne.n	800d616 <_dtoa_r+0x69e>
 800d52c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d530:	2000      	movs	r0, #0
 800d532:	4914      	ldr	r1, [pc, #80]	; (800d584 <_dtoa_r+0x60c>)
 800d534:	f7f2 feb0 	bl	8000298 <__aeabi_dsub>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d540:	f7f3 fad4 	bl	8000aec <__aeabi_dcmplt>
 800d544:	2800      	cmp	r0, #0
 800d546:	f43f af30 	beq.w	800d3aa <_dtoa_r+0x432>
 800d54a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d54e:	2b30      	cmp	r3, #48	; 0x30
 800d550:	f105 32ff 	add.w	r2, r5, #4294967295
 800d554:	d002      	beq.n	800d55c <_dtoa_r+0x5e4>
 800d556:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d55a:	e04a      	b.n	800d5f2 <_dtoa_r+0x67a>
 800d55c:	4615      	mov	r5, r2
 800d55e:	e7f4      	b.n	800d54a <_dtoa_r+0x5d2>
 800d560:	4b05      	ldr	r3, [pc, #20]	; (800d578 <_dtoa_r+0x600>)
 800d562:	f7f3 f851 	bl	8000608 <__aeabi_dmul>
 800d566:	e9cd 0100 	strd	r0, r1, [sp]
 800d56a:	e7bc      	b.n	800d4e6 <_dtoa_r+0x56e>
 800d56c:	08010058 	.word	0x08010058
 800d570:	08010030 	.word	0x08010030
 800d574:	3ff00000 	.word	0x3ff00000
 800d578:	40240000 	.word	0x40240000
 800d57c:	401c0000 	.word	0x401c0000
 800d580:	40140000 	.word	0x40140000
 800d584:	3fe00000 	.word	0x3fe00000
 800d588:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d58c:	465d      	mov	r5, fp
 800d58e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d592:	4630      	mov	r0, r6
 800d594:	4639      	mov	r1, r7
 800d596:	f7f3 f961 	bl	800085c <__aeabi_ddiv>
 800d59a:	f7f3 fae5 	bl	8000b68 <__aeabi_d2iz>
 800d59e:	4680      	mov	r8, r0
 800d5a0:	f7f2 ffc8 	bl	8000534 <__aeabi_i2d>
 800d5a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5a8:	f7f3 f82e 	bl	8000608 <__aeabi_dmul>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d5b8:	f7f2 fe6e 	bl	8000298 <__aeabi_dsub>
 800d5bc:	f805 6b01 	strb.w	r6, [r5], #1
 800d5c0:	eba5 060b 	sub.w	r6, r5, fp
 800d5c4:	45b1      	cmp	r9, r6
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	d139      	bne.n	800d640 <_dtoa_r+0x6c8>
 800d5cc:	f7f2 fe66 	bl	800029c <__adddf3>
 800d5d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	460f      	mov	r7, r1
 800d5d8:	f7f3 faa6 	bl	8000b28 <__aeabi_dcmpgt>
 800d5dc:	b9c8      	cbnz	r0, 800d612 <_dtoa_r+0x69a>
 800d5de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	4639      	mov	r1, r7
 800d5e6:	f7f3 fa77 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5ea:	b110      	cbz	r0, 800d5f2 <_dtoa_r+0x67a>
 800d5ec:	f018 0f01 	tst.w	r8, #1
 800d5f0:	d10f      	bne.n	800d612 <_dtoa_r+0x69a>
 800d5f2:	9904      	ldr	r1, [sp, #16]
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f000 ffc7 	bl	800e588 <_Bfree>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d5fe:	702b      	strb	r3, [r5, #0]
 800d600:	f10a 0301 	add.w	r3, sl, #1
 800d604:	6013      	str	r3, [r2, #0]
 800d606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d608:	2b00      	cmp	r3, #0
 800d60a:	f000 8241 	beq.w	800da90 <_dtoa_r+0xb18>
 800d60e:	601d      	str	r5, [r3, #0]
 800d610:	e23e      	b.n	800da90 <_dtoa_r+0xb18>
 800d612:	f8cd a020 	str.w	sl, [sp, #32]
 800d616:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d61a:	2a39      	cmp	r2, #57	; 0x39
 800d61c:	f105 33ff 	add.w	r3, r5, #4294967295
 800d620:	d108      	bne.n	800d634 <_dtoa_r+0x6bc>
 800d622:	459b      	cmp	fp, r3
 800d624:	d10a      	bne.n	800d63c <_dtoa_r+0x6c4>
 800d626:	9b08      	ldr	r3, [sp, #32]
 800d628:	3301      	adds	r3, #1
 800d62a:	9308      	str	r3, [sp, #32]
 800d62c:	2330      	movs	r3, #48	; 0x30
 800d62e:	f88b 3000 	strb.w	r3, [fp]
 800d632:	465b      	mov	r3, fp
 800d634:	781a      	ldrb	r2, [r3, #0]
 800d636:	3201      	adds	r2, #1
 800d638:	701a      	strb	r2, [r3, #0]
 800d63a:	e78c      	b.n	800d556 <_dtoa_r+0x5de>
 800d63c:	461d      	mov	r5, r3
 800d63e:	e7ea      	b.n	800d616 <_dtoa_r+0x69e>
 800d640:	2200      	movs	r2, #0
 800d642:	4b9b      	ldr	r3, [pc, #620]	; (800d8b0 <_dtoa_r+0x938>)
 800d644:	f7f2 ffe0 	bl	8000608 <__aeabi_dmul>
 800d648:	2200      	movs	r2, #0
 800d64a:	2300      	movs	r3, #0
 800d64c:	4606      	mov	r6, r0
 800d64e:	460f      	mov	r7, r1
 800d650:	f7f3 fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 800d654:	2800      	cmp	r0, #0
 800d656:	d09a      	beq.n	800d58e <_dtoa_r+0x616>
 800d658:	e7cb      	b.n	800d5f2 <_dtoa_r+0x67a>
 800d65a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d65c:	2a00      	cmp	r2, #0
 800d65e:	f000 808b 	beq.w	800d778 <_dtoa_r+0x800>
 800d662:	9a06      	ldr	r2, [sp, #24]
 800d664:	2a01      	cmp	r2, #1
 800d666:	dc6e      	bgt.n	800d746 <_dtoa_r+0x7ce>
 800d668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d66a:	2a00      	cmp	r2, #0
 800d66c:	d067      	beq.n	800d73e <_dtoa_r+0x7c6>
 800d66e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d672:	9f07      	ldr	r7, [sp, #28]
 800d674:	9d05      	ldr	r5, [sp, #20]
 800d676:	9a05      	ldr	r2, [sp, #20]
 800d678:	2101      	movs	r1, #1
 800d67a:	441a      	add	r2, r3
 800d67c:	4620      	mov	r0, r4
 800d67e:	9205      	str	r2, [sp, #20]
 800d680:	4498      	add	r8, r3
 800d682:	f001 f85f 	bl	800e744 <__i2b>
 800d686:	4606      	mov	r6, r0
 800d688:	2d00      	cmp	r5, #0
 800d68a:	dd0c      	ble.n	800d6a6 <_dtoa_r+0x72e>
 800d68c:	f1b8 0f00 	cmp.w	r8, #0
 800d690:	dd09      	ble.n	800d6a6 <_dtoa_r+0x72e>
 800d692:	4545      	cmp	r5, r8
 800d694:	9a05      	ldr	r2, [sp, #20]
 800d696:	462b      	mov	r3, r5
 800d698:	bfa8      	it	ge
 800d69a:	4643      	movge	r3, r8
 800d69c:	1ad2      	subs	r2, r2, r3
 800d69e:	9205      	str	r2, [sp, #20]
 800d6a0:	1aed      	subs	r5, r5, r3
 800d6a2:	eba8 0803 	sub.w	r8, r8, r3
 800d6a6:	9b07      	ldr	r3, [sp, #28]
 800d6a8:	b1eb      	cbz	r3, 800d6e6 <_dtoa_r+0x76e>
 800d6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d067      	beq.n	800d780 <_dtoa_r+0x808>
 800d6b0:	b18f      	cbz	r7, 800d6d6 <_dtoa_r+0x75e>
 800d6b2:	4631      	mov	r1, r6
 800d6b4:	463a      	mov	r2, r7
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f001 f8e4 	bl	800e884 <__pow5mult>
 800d6bc:	9a04      	ldr	r2, [sp, #16]
 800d6be:	4601      	mov	r1, r0
 800d6c0:	4606      	mov	r6, r0
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f001 f847 	bl	800e756 <__multiply>
 800d6c8:	9904      	ldr	r1, [sp, #16]
 800d6ca:	9008      	str	r0, [sp, #32]
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f000 ff5b 	bl	800e588 <_Bfree>
 800d6d2:	9b08      	ldr	r3, [sp, #32]
 800d6d4:	9304      	str	r3, [sp, #16]
 800d6d6:	9b07      	ldr	r3, [sp, #28]
 800d6d8:	1bda      	subs	r2, r3, r7
 800d6da:	d004      	beq.n	800d6e6 <_dtoa_r+0x76e>
 800d6dc:	9904      	ldr	r1, [sp, #16]
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f001 f8d0 	bl	800e884 <__pow5mult>
 800d6e4:	9004      	str	r0, [sp, #16]
 800d6e6:	2101      	movs	r1, #1
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f001 f82b 	bl	800e744 <__i2b>
 800d6ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6f0:	4607      	mov	r7, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f000 81d0 	beq.w	800da98 <_dtoa_r+0xb20>
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	4601      	mov	r1, r0
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f001 f8c1 	bl	800e884 <__pow5mult>
 800d702:	9b06      	ldr	r3, [sp, #24]
 800d704:	2b01      	cmp	r3, #1
 800d706:	4607      	mov	r7, r0
 800d708:	dc40      	bgt.n	800d78c <_dtoa_r+0x814>
 800d70a:	9b00      	ldr	r3, [sp, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d139      	bne.n	800d784 <_dtoa_r+0x80c>
 800d710:	9b01      	ldr	r3, [sp, #4]
 800d712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d716:	2b00      	cmp	r3, #0
 800d718:	d136      	bne.n	800d788 <_dtoa_r+0x810>
 800d71a:	9b01      	ldr	r3, [sp, #4]
 800d71c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d720:	0d1b      	lsrs	r3, r3, #20
 800d722:	051b      	lsls	r3, r3, #20
 800d724:	b12b      	cbz	r3, 800d732 <_dtoa_r+0x7ba>
 800d726:	9b05      	ldr	r3, [sp, #20]
 800d728:	3301      	adds	r3, #1
 800d72a:	9305      	str	r3, [sp, #20]
 800d72c:	f108 0801 	add.w	r8, r8, #1
 800d730:	2301      	movs	r3, #1
 800d732:	9307      	str	r3, [sp, #28]
 800d734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d736:	2b00      	cmp	r3, #0
 800d738:	d12a      	bne.n	800d790 <_dtoa_r+0x818>
 800d73a:	2001      	movs	r0, #1
 800d73c:	e030      	b.n	800d7a0 <_dtoa_r+0x828>
 800d73e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d740:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d744:	e795      	b.n	800d672 <_dtoa_r+0x6fa>
 800d746:	9b07      	ldr	r3, [sp, #28]
 800d748:	f109 37ff 	add.w	r7, r9, #4294967295
 800d74c:	42bb      	cmp	r3, r7
 800d74e:	bfbf      	itttt	lt
 800d750:	9b07      	ldrlt	r3, [sp, #28]
 800d752:	9707      	strlt	r7, [sp, #28]
 800d754:	1afa      	sublt	r2, r7, r3
 800d756:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d758:	bfbb      	ittet	lt
 800d75a:	189b      	addlt	r3, r3, r2
 800d75c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d75e:	1bdf      	subge	r7, r3, r7
 800d760:	2700      	movlt	r7, #0
 800d762:	f1b9 0f00 	cmp.w	r9, #0
 800d766:	bfb5      	itete	lt
 800d768:	9b05      	ldrlt	r3, [sp, #20]
 800d76a:	9d05      	ldrge	r5, [sp, #20]
 800d76c:	eba3 0509 	sublt.w	r5, r3, r9
 800d770:	464b      	movge	r3, r9
 800d772:	bfb8      	it	lt
 800d774:	2300      	movlt	r3, #0
 800d776:	e77e      	b.n	800d676 <_dtoa_r+0x6fe>
 800d778:	9f07      	ldr	r7, [sp, #28]
 800d77a:	9d05      	ldr	r5, [sp, #20]
 800d77c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d77e:	e783      	b.n	800d688 <_dtoa_r+0x710>
 800d780:	9a07      	ldr	r2, [sp, #28]
 800d782:	e7ab      	b.n	800d6dc <_dtoa_r+0x764>
 800d784:	2300      	movs	r3, #0
 800d786:	e7d4      	b.n	800d732 <_dtoa_r+0x7ba>
 800d788:	9b00      	ldr	r3, [sp, #0]
 800d78a:	e7d2      	b.n	800d732 <_dtoa_r+0x7ba>
 800d78c:	2300      	movs	r3, #0
 800d78e:	9307      	str	r3, [sp, #28]
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d796:	6918      	ldr	r0, [r3, #16]
 800d798:	f000 ff86 	bl	800e6a8 <__hi0bits>
 800d79c:	f1c0 0020 	rsb	r0, r0, #32
 800d7a0:	4440      	add	r0, r8
 800d7a2:	f010 001f 	ands.w	r0, r0, #31
 800d7a6:	d047      	beq.n	800d838 <_dtoa_r+0x8c0>
 800d7a8:	f1c0 0320 	rsb	r3, r0, #32
 800d7ac:	2b04      	cmp	r3, #4
 800d7ae:	dd3b      	ble.n	800d828 <_dtoa_r+0x8b0>
 800d7b0:	9b05      	ldr	r3, [sp, #20]
 800d7b2:	f1c0 001c 	rsb	r0, r0, #28
 800d7b6:	4403      	add	r3, r0
 800d7b8:	9305      	str	r3, [sp, #20]
 800d7ba:	4405      	add	r5, r0
 800d7bc:	4480      	add	r8, r0
 800d7be:	9b05      	ldr	r3, [sp, #20]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	dd05      	ble.n	800d7d0 <_dtoa_r+0x858>
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	9904      	ldr	r1, [sp, #16]
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f001 f8a9 	bl	800e920 <__lshift>
 800d7ce:	9004      	str	r0, [sp, #16]
 800d7d0:	f1b8 0f00 	cmp.w	r8, #0
 800d7d4:	dd05      	ble.n	800d7e2 <_dtoa_r+0x86a>
 800d7d6:	4639      	mov	r1, r7
 800d7d8:	4642      	mov	r2, r8
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f001 f8a0 	bl	800e920 <__lshift>
 800d7e0:	4607      	mov	r7, r0
 800d7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7e4:	b353      	cbz	r3, 800d83c <_dtoa_r+0x8c4>
 800d7e6:	4639      	mov	r1, r7
 800d7e8:	9804      	ldr	r0, [sp, #16]
 800d7ea:	f001 f8ed 	bl	800e9c8 <__mcmp>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	da24      	bge.n	800d83c <_dtoa_r+0x8c4>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	220a      	movs	r2, #10
 800d7f6:	9904      	ldr	r1, [sp, #16]
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f000 fedc 	bl	800e5b6 <__multadd>
 800d7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d800:	9004      	str	r0, [sp, #16]
 800d802:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 814d 	beq.w	800daa6 <_dtoa_r+0xb2e>
 800d80c:	2300      	movs	r3, #0
 800d80e:	4631      	mov	r1, r6
 800d810:	220a      	movs	r2, #10
 800d812:	4620      	mov	r0, r4
 800d814:	f000 fecf 	bl	800e5b6 <__multadd>
 800d818:	9b02      	ldr	r3, [sp, #8]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	4606      	mov	r6, r0
 800d81e:	dc4f      	bgt.n	800d8c0 <_dtoa_r+0x948>
 800d820:	9b06      	ldr	r3, [sp, #24]
 800d822:	2b02      	cmp	r3, #2
 800d824:	dd4c      	ble.n	800d8c0 <_dtoa_r+0x948>
 800d826:	e011      	b.n	800d84c <_dtoa_r+0x8d4>
 800d828:	d0c9      	beq.n	800d7be <_dtoa_r+0x846>
 800d82a:	9a05      	ldr	r2, [sp, #20]
 800d82c:	331c      	adds	r3, #28
 800d82e:	441a      	add	r2, r3
 800d830:	9205      	str	r2, [sp, #20]
 800d832:	441d      	add	r5, r3
 800d834:	4498      	add	r8, r3
 800d836:	e7c2      	b.n	800d7be <_dtoa_r+0x846>
 800d838:	4603      	mov	r3, r0
 800d83a:	e7f6      	b.n	800d82a <_dtoa_r+0x8b2>
 800d83c:	f1b9 0f00 	cmp.w	r9, #0
 800d840:	dc38      	bgt.n	800d8b4 <_dtoa_r+0x93c>
 800d842:	9b06      	ldr	r3, [sp, #24]
 800d844:	2b02      	cmp	r3, #2
 800d846:	dd35      	ble.n	800d8b4 <_dtoa_r+0x93c>
 800d848:	f8cd 9008 	str.w	r9, [sp, #8]
 800d84c:	9b02      	ldr	r3, [sp, #8]
 800d84e:	b963      	cbnz	r3, 800d86a <_dtoa_r+0x8f2>
 800d850:	4639      	mov	r1, r7
 800d852:	2205      	movs	r2, #5
 800d854:	4620      	mov	r0, r4
 800d856:	f000 feae 	bl	800e5b6 <__multadd>
 800d85a:	4601      	mov	r1, r0
 800d85c:	4607      	mov	r7, r0
 800d85e:	9804      	ldr	r0, [sp, #16]
 800d860:	f001 f8b2 	bl	800e9c8 <__mcmp>
 800d864:	2800      	cmp	r0, #0
 800d866:	f73f adcc 	bgt.w	800d402 <_dtoa_r+0x48a>
 800d86a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d86c:	465d      	mov	r5, fp
 800d86e:	ea6f 0a03 	mvn.w	sl, r3
 800d872:	f04f 0900 	mov.w	r9, #0
 800d876:	4639      	mov	r1, r7
 800d878:	4620      	mov	r0, r4
 800d87a:	f000 fe85 	bl	800e588 <_Bfree>
 800d87e:	2e00      	cmp	r6, #0
 800d880:	f43f aeb7 	beq.w	800d5f2 <_dtoa_r+0x67a>
 800d884:	f1b9 0f00 	cmp.w	r9, #0
 800d888:	d005      	beq.n	800d896 <_dtoa_r+0x91e>
 800d88a:	45b1      	cmp	r9, r6
 800d88c:	d003      	beq.n	800d896 <_dtoa_r+0x91e>
 800d88e:	4649      	mov	r1, r9
 800d890:	4620      	mov	r0, r4
 800d892:	f000 fe79 	bl	800e588 <_Bfree>
 800d896:	4631      	mov	r1, r6
 800d898:	4620      	mov	r0, r4
 800d89a:	f000 fe75 	bl	800e588 <_Bfree>
 800d89e:	e6a8      	b.n	800d5f2 <_dtoa_r+0x67a>
 800d8a0:	2700      	movs	r7, #0
 800d8a2:	463e      	mov	r6, r7
 800d8a4:	e7e1      	b.n	800d86a <_dtoa_r+0x8f2>
 800d8a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d8aa:	463e      	mov	r6, r7
 800d8ac:	e5a9      	b.n	800d402 <_dtoa_r+0x48a>
 800d8ae:	bf00      	nop
 800d8b0:	40240000 	.word	0x40240000
 800d8b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f000 80fa 	beq.w	800dab4 <_dtoa_r+0xb3c>
 800d8c0:	2d00      	cmp	r5, #0
 800d8c2:	dd05      	ble.n	800d8d0 <_dtoa_r+0x958>
 800d8c4:	4631      	mov	r1, r6
 800d8c6:	462a      	mov	r2, r5
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f001 f829 	bl	800e920 <__lshift>
 800d8ce:	4606      	mov	r6, r0
 800d8d0:	9b07      	ldr	r3, [sp, #28]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d04c      	beq.n	800d970 <_dtoa_r+0x9f8>
 800d8d6:	6871      	ldr	r1, [r6, #4]
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f000 fe21 	bl	800e520 <_Balloc>
 800d8de:	6932      	ldr	r2, [r6, #16]
 800d8e0:	3202      	adds	r2, #2
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	0092      	lsls	r2, r2, #2
 800d8e6:	f106 010c 	add.w	r1, r6, #12
 800d8ea:	300c      	adds	r0, #12
 800d8ec:	f7fd fc47 	bl	800b17e <memcpy>
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	4629      	mov	r1, r5
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f001 f813 	bl	800e920 <__lshift>
 800d8fa:	9b00      	ldr	r3, [sp, #0]
 800d8fc:	f8cd b014 	str.w	fp, [sp, #20]
 800d900:	f003 0301 	and.w	r3, r3, #1
 800d904:	46b1      	mov	r9, r6
 800d906:	9307      	str	r3, [sp, #28]
 800d908:	4606      	mov	r6, r0
 800d90a:	4639      	mov	r1, r7
 800d90c:	9804      	ldr	r0, [sp, #16]
 800d90e:	f7ff faa7 	bl	800ce60 <quorem>
 800d912:	4649      	mov	r1, r9
 800d914:	4605      	mov	r5, r0
 800d916:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d91a:	9804      	ldr	r0, [sp, #16]
 800d91c:	f001 f854 	bl	800e9c8 <__mcmp>
 800d920:	4632      	mov	r2, r6
 800d922:	9000      	str	r0, [sp, #0]
 800d924:	4639      	mov	r1, r7
 800d926:	4620      	mov	r0, r4
 800d928:	f001 f868 	bl	800e9fc <__mdiff>
 800d92c:	68c3      	ldr	r3, [r0, #12]
 800d92e:	4602      	mov	r2, r0
 800d930:	bb03      	cbnz	r3, 800d974 <_dtoa_r+0x9fc>
 800d932:	4601      	mov	r1, r0
 800d934:	9008      	str	r0, [sp, #32]
 800d936:	9804      	ldr	r0, [sp, #16]
 800d938:	f001 f846 	bl	800e9c8 <__mcmp>
 800d93c:	9a08      	ldr	r2, [sp, #32]
 800d93e:	4603      	mov	r3, r0
 800d940:	4611      	mov	r1, r2
 800d942:	4620      	mov	r0, r4
 800d944:	9308      	str	r3, [sp, #32]
 800d946:	f000 fe1f 	bl	800e588 <_Bfree>
 800d94a:	9b08      	ldr	r3, [sp, #32]
 800d94c:	b9a3      	cbnz	r3, 800d978 <_dtoa_r+0xa00>
 800d94e:	9a06      	ldr	r2, [sp, #24]
 800d950:	b992      	cbnz	r2, 800d978 <_dtoa_r+0xa00>
 800d952:	9a07      	ldr	r2, [sp, #28]
 800d954:	b982      	cbnz	r2, 800d978 <_dtoa_r+0xa00>
 800d956:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d95a:	d029      	beq.n	800d9b0 <_dtoa_r+0xa38>
 800d95c:	9b00      	ldr	r3, [sp, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	dd01      	ble.n	800d966 <_dtoa_r+0x9ee>
 800d962:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d966:	9b05      	ldr	r3, [sp, #20]
 800d968:	1c5d      	adds	r5, r3, #1
 800d96a:	f883 8000 	strb.w	r8, [r3]
 800d96e:	e782      	b.n	800d876 <_dtoa_r+0x8fe>
 800d970:	4630      	mov	r0, r6
 800d972:	e7c2      	b.n	800d8fa <_dtoa_r+0x982>
 800d974:	2301      	movs	r3, #1
 800d976:	e7e3      	b.n	800d940 <_dtoa_r+0x9c8>
 800d978:	9a00      	ldr	r2, [sp, #0]
 800d97a:	2a00      	cmp	r2, #0
 800d97c:	db04      	blt.n	800d988 <_dtoa_r+0xa10>
 800d97e:	d125      	bne.n	800d9cc <_dtoa_r+0xa54>
 800d980:	9a06      	ldr	r2, [sp, #24]
 800d982:	bb1a      	cbnz	r2, 800d9cc <_dtoa_r+0xa54>
 800d984:	9a07      	ldr	r2, [sp, #28]
 800d986:	bb0a      	cbnz	r2, 800d9cc <_dtoa_r+0xa54>
 800d988:	2b00      	cmp	r3, #0
 800d98a:	ddec      	ble.n	800d966 <_dtoa_r+0x9ee>
 800d98c:	2201      	movs	r2, #1
 800d98e:	9904      	ldr	r1, [sp, #16]
 800d990:	4620      	mov	r0, r4
 800d992:	f000 ffc5 	bl	800e920 <__lshift>
 800d996:	4639      	mov	r1, r7
 800d998:	9004      	str	r0, [sp, #16]
 800d99a:	f001 f815 	bl	800e9c8 <__mcmp>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	dc03      	bgt.n	800d9aa <_dtoa_r+0xa32>
 800d9a2:	d1e0      	bne.n	800d966 <_dtoa_r+0x9ee>
 800d9a4:	f018 0f01 	tst.w	r8, #1
 800d9a8:	d0dd      	beq.n	800d966 <_dtoa_r+0x9ee>
 800d9aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d9ae:	d1d8      	bne.n	800d962 <_dtoa_r+0x9ea>
 800d9b0:	9b05      	ldr	r3, [sp, #20]
 800d9b2:	9a05      	ldr	r2, [sp, #20]
 800d9b4:	1c5d      	adds	r5, r3, #1
 800d9b6:	2339      	movs	r3, #57	; 0x39
 800d9b8:	7013      	strb	r3, [r2, #0]
 800d9ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d9be:	2b39      	cmp	r3, #57	; 0x39
 800d9c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d9c4:	d04f      	beq.n	800da66 <_dtoa_r+0xaee>
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	7013      	strb	r3, [r2, #0]
 800d9ca:	e754      	b.n	800d876 <_dtoa_r+0x8fe>
 800d9cc:	9a05      	ldr	r2, [sp, #20]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f102 0501 	add.w	r5, r2, #1
 800d9d4:	dd06      	ble.n	800d9e4 <_dtoa_r+0xa6c>
 800d9d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d9da:	d0e9      	beq.n	800d9b0 <_dtoa_r+0xa38>
 800d9dc:	f108 0801 	add.w	r8, r8, #1
 800d9e0:	9b05      	ldr	r3, [sp, #20]
 800d9e2:	e7c2      	b.n	800d96a <_dtoa_r+0x9f2>
 800d9e4:	9a02      	ldr	r2, [sp, #8]
 800d9e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d9ea:	eba5 030b 	sub.w	r3, r5, fp
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d021      	beq.n	800da36 <_dtoa_r+0xabe>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	220a      	movs	r2, #10
 800d9f6:	9904      	ldr	r1, [sp, #16]
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f000 fddc 	bl	800e5b6 <__multadd>
 800d9fe:	45b1      	cmp	r9, r6
 800da00:	9004      	str	r0, [sp, #16]
 800da02:	f04f 0300 	mov.w	r3, #0
 800da06:	f04f 020a 	mov.w	r2, #10
 800da0a:	4649      	mov	r1, r9
 800da0c:	4620      	mov	r0, r4
 800da0e:	d105      	bne.n	800da1c <_dtoa_r+0xaa4>
 800da10:	f000 fdd1 	bl	800e5b6 <__multadd>
 800da14:	4681      	mov	r9, r0
 800da16:	4606      	mov	r6, r0
 800da18:	9505      	str	r5, [sp, #20]
 800da1a:	e776      	b.n	800d90a <_dtoa_r+0x992>
 800da1c:	f000 fdcb 	bl	800e5b6 <__multadd>
 800da20:	4631      	mov	r1, r6
 800da22:	4681      	mov	r9, r0
 800da24:	2300      	movs	r3, #0
 800da26:	220a      	movs	r2, #10
 800da28:	4620      	mov	r0, r4
 800da2a:	f000 fdc4 	bl	800e5b6 <__multadd>
 800da2e:	4606      	mov	r6, r0
 800da30:	e7f2      	b.n	800da18 <_dtoa_r+0xaa0>
 800da32:	f04f 0900 	mov.w	r9, #0
 800da36:	2201      	movs	r2, #1
 800da38:	9904      	ldr	r1, [sp, #16]
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 ff70 	bl	800e920 <__lshift>
 800da40:	4639      	mov	r1, r7
 800da42:	9004      	str	r0, [sp, #16]
 800da44:	f000 ffc0 	bl	800e9c8 <__mcmp>
 800da48:	2800      	cmp	r0, #0
 800da4a:	dcb6      	bgt.n	800d9ba <_dtoa_r+0xa42>
 800da4c:	d102      	bne.n	800da54 <_dtoa_r+0xadc>
 800da4e:	f018 0f01 	tst.w	r8, #1
 800da52:	d1b2      	bne.n	800d9ba <_dtoa_r+0xa42>
 800da54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da58:	2b30      	cmp	r3, #48	; 0x30
 800da5a:	f105 32ff 	add.w	r2, r5, #4294967295
 800da5e:	f47f af0a 	bne.w	800d876 <_dtoa_r+0x8fe>
 800da62:	4615      	mov	r5, r2
 800da64:	e7f6      	b.n	800da54 <_dtoa_r+0xadc>
 800da66:	4593      	cmp	fp, r2
 800da68:	d105      	bne.n	800da76 <_dtoa_r+0xafe>
 800da6a:	2331      	movs	r3, #49	; 0x31
 800da6c:	f10a 0a01 	add.w	sl, sl, #1
 800da70:	f88b 3000 	strb.w	r3, [fp]
 800da74:	e6ff      	b.n	800d876 <_dtoa_r+0x8fe>
 800da76:	4615      	mov	r5, r2
 800da78:	e79f      	b.n	800d9ba <_dtoa_r+0xa42>
 800da7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dae0 <_dtoa_r+0xb68>
 800da7e:	e007      	b.n	800da90 <_dtoa_r+0xb18>
 800da80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da82:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dae4 <_dtoa_r+0xb6c>
 800da86:	b11b      	cbz	r3, 800da90 <_dtoa_r+0xb18>
 800da88:	f10b 0308 	add.w	r3, fp, #8
 800da8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da8e:	6013      	str	r3, [r2, #0]
 800da90:	4658      	mov	r0, fp
 800da92:	b017      	add	sp, #92	; 0x5c
 800da94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da98:	9b06      	ldr	r3, [sp, #24]
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	f77f ae35 	ble.w	800d70a <_dtoa_r+0x792>
 800daa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800daa2:	9307      	str	r3, [sp, #28]
 800daa4:	e649      	b.n	800d73a <_dtoa_r+0x7c2>
 800daa6:	9b02      	ldr	r3, [sp, #8]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	dc03      	bgt.n	800dab4 <_dtoa_r+0xb3c>
 800daac:	9b06      	ldr	r3, [sp, #24]
 800daae:	2b02      	cmp	r3, #2
 800dab0:	f73f aecc 	bgt.w	800d84c <_dtoa_r+0x8d4>
 800dab4:	465d      	mov	r5, fp
 800dab6:	4639      	mov	r1, r7
 800dab8:	9804      	ldr	r0, [sp, #16]
 800daba:	f7ff f9d1 	bl	800ce60 <quorem>
 800dabe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dac2:	f805 8b01 	strb.w	r8, [r5], #1
 800dac6:	9a02      	ldr	r2, [sp, #8]
 800dac8:	eba5 030b 	sub.w	r3, r5, fp
 800dacc:	429a      	cmp	r2, r3
 800dace:	ddb0      	ble.n	800da32 <_dtoa_r+0xaba>
 800dad0:	2300      	movs	r3, #0
 800dad2:	220a      	movs	r2, #10
 800dad4:	9904      	ldr	r1, [sp, #16]
 800dad6:	4620      	mov	r0, r4
 800dad8:	f000 fd6d 	bl	800e5b6 <__multadd>
 800dadc:	9004      	str	r0, [sp, #16]
 800dade:	e7ea      	b.n	800dab6 <_dtoa_r+0xb3e>
 800dae0:	0800fe42 	.word	0x0800fe42
 800dae4:	0800ffc1 	.word	0x0800ffc1

0800dae8 <__sflush_r>:
 800dae8:	898a      	ldrh	r2, [r1, #12]
 800daea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daee:	4605      	mov	r5, r0
 800daf0:	0710      	lsls	r0, r2, #28
 800daf2:	460c      	mov	r4, r1
 800daf4:	d458      	bmi.n	800dba8 <__sflush_r+0xc0>
 800daf6:	684b      	ldr	r3, [r1, #4]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	dc05      	bgt.n	800db08 <__sflush_r+0x20>
 800dafc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dafe:	2b00      	cmp	r3, #0
 800db00:	dc02      	bgt.n	800db08 <__sflush_r+0x20>
 800db02:	2000      	movs	r0, #0
 800db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db0a:	2e00      	cmp	r6, #0
 800db0c:	d0f9      	beq.n	800db02 <__sflush_r+0x1a>
 800db0e:	2300      	movs	r3, #0
 800db10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db14:	682f      	ldr	r7, [r5, #0]
 800db16:	6a21      	ldr	r1, [r4, #32]
 800db18:	602b      	str	r3, [r5, #0]
 800db1a:	d032      	beq.n	800db82 <__sflush_r+0x9a>
 800db1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	075a      	lsls	r2, r3, #29
 800db22:	d505      	bpl.n	800db30 <__sflush_r+0x48>
 800db24:	6863      	ldr	r3, [r4, #4]
 800db26:	1ac0      	subs	r0, r0, r3
 800db28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db2a:	b10b      	cbz	r3, 800db30 <__sflush_r+0x48>
 800db2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db2e:	1ac0      	subs	r0, r0, r3
 800db30:	2300      	movs	r3, #0
 800db32:	4602      	mov	r2, r0
 800db34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db36:	6a21      	ldr	r1, [r4, #32]
 800db38:	4628      	mov	r0, r5
 800db3a:	47b0      	blx	r6
 800db3c:	1c43      	adds	r3, r0, #1
 800db3e:	89a3      	ldrh	r3, [r4, #12]
 800db40:	d106      	bne.n	800db50 <__sflush_r+0x68>
 800db42:	6829      	ldr	r1, [r5, #0]
 800db44:	291d      	cmp	r1, #29
 800db46:	d848      	bhi.n	800dbda <__sflush_r+0xf2>
 800db48:	4a29      	ldr	r2, [pc, #164]	; (800dbf0 <__sflush_r+0x108>)
 800db4a:	40ca      	lsrs	r2, r1
 800db4c:	07d6      	lsls	r6, r2, #31
 800db4e:	d544      	bpl.n	800dbda <__sflush_r+0xf2>
 800db50:	2200      	movs	r2, #0
 800db52:	6062      	str	r2, [r4, #4]
 800db54:	04d9      	lsls	r1, r3, #19
 800db56:	6922      	ldr	r2, [r4, #16]
 800db58:	6022      	str	r2, [r4, #0]
 800db5a:	d504      	bpl.n	800db66 <__sflush_r+0x7e>
 800db5c:	1c42      	adds	r2, r0, #1
 800db5e:	d101      	bne.n	800db64 <__sflush_r+0x7c>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	b903      	cbnz	r3, 800db66 <__sflush_r+0x7e>
 800db64:	6560      	str	r0, [r4, #84]	; 0x54
 800db66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db68:	602f      	str	r7, [r5, #0]
 800db6a:	2900      	cmp	r1, #0
 800db6c:	d0c9      	beq.n	800db02 <__sflush_r+0x1a>
 800db6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db72:	4299      	cmp	r1, r3
 800db74:	d002      	beq.n	800db7c <__sflush_r+0x94>
 800db76:	4628      	mov	r0, r5
 800db78:	f001 f8e0 	bl	800ed3c <_free_r>
 800db7c:	2000      	movs	r0, #0
 800db7e:	6360      	str	r0, [r4, #52]	; 0x34
 800db80:	e7c0      	b.n	800db04 <__sflush_r+0x1c>
 800db82:	2301      	movs	r3, #1
 800db84:	4628      	mov	r0, r5
 800db86:	47b0      	blx	r6
 800db88:	1c41      	adds	r1, r0, #1
 800db8a:	d1c8      	bne.n	800db1e <__sflush_r+0x36>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d0c5      	beq.n	800db1e <__sflush_r+0x36>
 800db92:	2b1d      	cmp	r3, #29
 800db94:	d001      	beq.n	800db9a <__sflush_r+0xb2>
 800db96:	2b16      	cmp	r3, #22
 800db98:	d101      	bne.n	800db9e <__sflush_r+0xb6>
 800db9a:	602f      	str	r7, [r5, #0]
 800db9c:	e7b1      	b.n	800db02 <__sflush_r+0x1a>
 800db9e:	89a3      	ldrh	r3, [r4, #12]
 800dba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dba4:	81a3      	strh	r3, [r4, #12]
 800dba6:	e7ad      	b.n	800db04 <__sflush_r+0x1c>
 800dba8:	690f      	ldr	r7, [r1, #16]
 800dbaa:	2f00      	cmp	r7, #0
 800dbac:	d0a9      	beq.n	800db02 <__sflush_r+0x1a>
 800dbae:	0793      	lsls	r3, r2, #30
 800dbb0:	680e      	ldr	r6, [r1, #0]
 800dbb2:	bf08      	it	eq
 800dbb4:	694b      	ldreq	r3, [r1, #20]
 800dbb6:	600f      	str	r7, [r1, #0]
 800dbb8:	bf18      	it	ne
 800dbba:	2300      	movne	r3, #0
 800dbbc:	eba6 0807 	sub.w	r8, r6, r7
 800dbc0:	608b      	str	r3, [r1, #8]
 800dbc2:	f1b8 0f00 	cmp.w	r8, #0
 800dbc6:	dd9c      	ble.n	800db02 <__sflush_r+0x1a>
 800dbc8:	4643      	mov	r3, r8
 800dbca:	463a      	mov	r2, r7
 800dbcc:	6a21      	ldr	r1, [r4, #32]
 800dbce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	47b0      	blx	r6
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	dc06      	bgt.n	800dbe6 <__sflush_r+0xfe>
 800dbd8:	89a3      	ldrh	r3, [r4, #12]
 800dbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbde:	81a3      	strh	r3, [r4, #12]
 800dbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe4:	e78e      	b.n	800db04 <__sflush_r+0x1c>
 800dbe6:	4407      	add	r7, r0
 800dbe8:	eba8 0800 	sub.w	r8, r8, r0
 800dbec:	e7e9      	b.n	800dbc2 <__sflush_r+0xda>
 800dbee:	bf00      	nop
 800dbf0:	20400001 	.word	0x20400001

0800dbf4 <_fflush_r>:
 800dbf4:	b538      	push	{r3, r4, r5, lr}
 800dbf6:	690b      	ldr	r3, [r1, #16]
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	b1db      	cbz	r3, 800dc36 <_fflush_r+0x42>
 800dbfe:	b118      	cbz	r0, 800dc08 <_fflush_r+0x14>
 800dc00:	6983      	ldr	r3, [r0, #24]
 800dc02:	b90b      	cbnz	r3, 800dc08 <_fflush_r+0x14>
 800dc04:	f000 f860 	bl	800dcc8 <__sinit>
 800dc08:	4b0c      	ldr	r3, [pc, #48]	; (800dc3c <_fflush_r+0x48>)
 800dc0a:	429c      	cmp	r4, r3
 800dc0c:	d109      	bne.n	800dc22 <_fflush_r+0x2e>
 800dc0e:	686c      	ldr	r4, [r5, #4]
 800dc10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc14:	b17b      	cbz	r3, 800dc36 <_fflush_r+0x42>
 800dc16:	4621      	mov	r1, r4
 800dc18:	4628      	mov	r0, r5
 800dc1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc1e:	f7ff bf63 	b.w	800dae8 <__sflush_r>
 800dc22:	4b07      	ldr	r3, [pc, #28]	; (800dc40 <_fflush_r+0x4c>)
 800dc24:	429c      	cmp	r4, r3
 800dc26:	d101      	bne.n	800dc2c <_fflush_r+0x38>
 800dc28:	68ac      	ldr	r4, [r5, #8]
 800dc2a:	e7f1      	b.n	800dc10 <_fflush_r+0x1c>
 800dc2c:	4b05      	ldr	r3, [pc, #20]	; (800dc44 <_fflush_r+0x50>)
 800dc2e:	429c      	cmp	r4, r3
 800dc30:	bf08      	it	eq
 800dc32:	68ec      	ldreq	r4, [r5, #12]
 800dc34:	e7ec      	b.n	800dc10 <_fflush_r+0x1c>
 800dc36:	2000      	movs	r0, #0
 800dc38:	bd38      	pop	{r3, r4, r5, pc}
 800dc3a:	bf00      	nop
 800dc3c:	0800fff0 	.word	0x0800fff0
 800dc40:	08010010 	.word	0x08010010
 800dc44:	0800ffd0 	.word	0x0800ffd0

0800dc48 <std>:
 800dc48:	2300      	movs	r3, #0
 800dc4a:	b510      	push	{r4, lr}
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	e9c0 3300 	strd	r3, r3, [r0]
 800dc52:	6083      	str	r3, [r0, #8]
 800dc54:	8181      	strh	r1, [r0, #12]
 800dc56:	6643      	str	r3, [r0, #100]	; 0x64
 800dc58:	81c2      	strh	r2, [r0, #14]
 800dc5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc5e:	6183      	str	r3, [r0, #24]
 800dc60:	4619      	mov	r1, r3
 800dc62:	2208      	movs	r2, #8
 800dc64:	305c      	adds	r0, #92	; 0x5c
 800dc66:	f7fd fa95 	bl	800b194 <memset>
 800dc6a:	4b05      	ldr	r3, [pc, #20]	; (800dc80 <std+0x38>)
 800dc6c:	6263      	str	r3, [r4, #36]	; 0x24
 800dc6e:	4b05      	ldr	r3, [pc, #20]	; (800dc84 <std+0x3c>)
 800dc70:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc72:	4b05      	ldr	r3, [pc, #20]	; (800dc88 <std+0x40>)
 800dc74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dc76:	4b05      	ldr	r3, [pc, #20]	; (800dc8c <std+0x44>)
 800dc78:	6224      	str	r4, [r4, #32]
 800dc7a:	6323      	str	r3, [r4, #48]	; 0x30
 800dc7c:	bd10      	pop	{r4, pc}
 800dc7e:	bf00      	nop
 800dc80:	0800f3d1 	.word	0x0800f3d1
 800dc84:	0800f3f3 	.word	0x0800f3f3
 800dc88:	0800f42b 	.word	0x0800f42b
 800dc8c:	0800f44f 	.word	0x0800f44f

0800dc90 <_cleanup_r>:
 800dc90:	4901      	ldr	r1, [pc, #4]	; (800dc98 <_cleanup_r+0x8>)
 800dc92:	f000 b885 	b.w	800dda0 <_fwalk_reent>
 800dc96:	bf00      	nop
 800dc98:	0800dbf5 	.word	0x0800dbf5

0800dc9c <__sfmoreglue>:
 800dc9c:	b570      	push	{r4, r5, r6, lr}
 800dc9e:	1e4a      	subs	r2, r1, #1
 800dca0:	2568      	movs	r5, #104	; 0x68
 800dca2:	4355      	muls	r5, r2
 800dca4:	460e      	mov	r6, r1
 800dca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dcaa:	f001 f895 	bl	800edd8 <_malloc_r>
 800dcae:	4604      	mov	r4, r0
 800dcb0:	b140      	cbz	r0, 800dcc4 <__sfmoreglue+0x28>
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	e9c0 1600 	strd	r1, r6, [r0]
 800dcb8:	300c      	adds	r0, #12
 800dcba:	60a0      	str	r0, [r4, #8]
 800dcbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dcc0:	f7fd fa68 	bl	800b194 <memset>
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	bd70      	pop	{r4, r5, r6, pc}

0800dcc8 <__sinit>:
 800dcc8:	6983      	ldr	r3, [r0, #24]
 800dcca:	b510      	push	{r4, lr}
 800dccc:	4604      	mov	r4, r0
 800dcce:	bb33      	cbnz	r3, 800dd1e <__sinit+0x56>
 800dcd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800dcd4:	6503      	str	r3, [r0, #80]	; 0x50
 800dcd6:	4b12      	ldr	r3, [pc, #72]	; (800dd20 <__sinit+0x58>)
 800dcd8:	4a12      	ldr	r2, [pc, #72]	; (800dd24 <__sinit+0x5c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	6282      	str	r2, [r0, #40]	; 0x28
 800dcde:	4298      	cmp	r0, r3
 800dce0:	bf04      	itt	eq
 800dce2:	2301      	moveq	r3, #1
 800dce4:	6183      	streq	r3, [r0, #24]
 800dce6:	f000 f81f 	bl	800dd28 <__sfp>
 800dcea:	6060      	str	r0, [r4, #4]
 800dcec:	4620      	mov	r0, r4
 800dcee:	f000 f81b 	bl	800dd28 <__sfp>
 800dcf2:	60a0      	str	r0, [r4, #8]
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f000 f817 	bl	800dd28 <__sfp>
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	60e0      	str	r0, [r4, #12]
 800dcfe:	2104      	movs	r1, #4
 800dd00:	6860      	ldr	r0, [r4, #4]
 800dd02:	f7ff ffa1 	bl	800dc48 <std>
 800dd06:	2201      	movs	r2, #1
 800dd08:	2109      	movs	r1, #9
 800dd0a:	68a0      	ldr	r0, [r4, #8]
 800dd0c:	f7ff ff9c 	bl	800dc48 <std>
 800dd10:	2202      	movs	r2, #2
 800dd12:	2112      	movs	r1, #18
 800dd14:	68e0      	ldr	r0, [r4, #12]
 800dd16:	f7ff ff97 	bl	800dc48 <std>
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	61a3      	str	r3, [r4, #24]
 800dd1e:	bd10      	pop	{r4, pc}
 800dd20:	0800fe28 	.word	0x0800fe28
 800dd24:	0800dc91 	.word	0x0800dc91

0800dd28 <__sfp>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	4b1b      	ldr	r3, [pc, #108]	; (800dd98 <__sfp+0x70>)
 800dd2c:	681e      	ldr	r6, [r3, #0]
 800dd2e:	69b3      	ldr	r3, [r6, #24]
 800dd30:	4607      	mov	r7, r0
 800dd32:	b913      	cbnz	r3, 800dd3a <__sfp+0x12>
 800dd34:	4630      	mov	r0, r6
 800dd36:	f7ff ffc7 	bl	800dcc8 <__sinit>
 800dd3a:	3648      	adds	r6, #72	; 0x48
 800dd3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dd40:	3b01      	subs	r3, #1
 800dd42:	d503      	bpl.n	800dd4c <__sfp+0x24>
 800dd44:	6833      	ldr	r3, [r6, #0]
 800dd46:	b133      	cbz	r3, 800dd56 <__sfp+0x2e>
 800dd48:	6836      	ldr	r6, [r6, #0]
 800dd4a:	e7f7      	b.n	800dd3c <__sfp+0x14>
 800dd4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd50:	b16d      	cbz	r5, 800dd6e <__sfp+0x46>
 800dd52:	3468      	adds	r4, #104	; 0x68
 800dd54:	e7f4      	b.n	800dd40 <__sfp+0x18>
 800dd56:	2104      	movs	r1, #4
 800dd58:	4638      	mov	r0, r7
 800dd5a:	f7ff ff9f 	bl	800dc9c <__sfmoreglue>
 800dd5e:	6030      	str	r0, [r6, #0]
 800dd60:	2800      	cmp	r0, #0
 800dd62:	d1f1      	bne.n	800dd48 <__sfp+0x20>
 800dd64:	230c      	movs	r3, #12
 800dd66:	603b      	str	r3, [r7, #0]
 800dd68:	4604      	mov	r4, r0
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd6e:	4b0b      	ldr	r3, [pc, #44]	; (800dd9c <__sfp+0x74>)
 800dd70:	6665      	str	r5, [r4, #100]	; 0x64
 800dd72:	e9c4 5500 	strd	r5, r5, [r4]
 800dd76:	60a5      	str	r5, [r4, #8]
 800dd78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dd7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800dd80:	2208      	movs	r2, #8
 800dd82:	4629      	mov	r1, r5
 800dd84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd88:	f7fd fa04 	bl	800b194 <memset>
 800dd8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd94:	e7e9      	b.n	800dd6a <__sfp+0x42>
 800dd96:	bf00      	nop
 800dd98:	0800fe28 	.word	0x0800fe28
 800dd9c:	ffff0001 	.word	0xffff0001

0800dda0 <_fwalk_reent>:
 800dda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dda4:	4680      	mov	r8, r0
 800dda6:	4689      	mov	r9, r1
 800dda8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ddac:	2600      	movs	r6, #0
 800ddae:	b914      	cbnz	r4, 800ddb6 <_fwalk_reent+0x16>
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ddba:	3f01      	subs	r7, #1
 800ddbc:	d501      	bpl.n	800ddc2 <_fwalk_reent+0x22>
 800ddbe:	6824      	ldr	r4, [r4, #0]
 800ddc0:	e7f5      	b.n	800ddae <_fwalk_reent+0xe>
 800ddc2:	89ab      	ldrh	r3, [r5, #12]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d907      	bls.n	800ddd8 <_fwalk_reent+0x38>
 800ddc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	d003      	beq.n	800ddd8 <_fwalk_reent+0x38>
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	4640      	mov	r0, r8
 800ddd4:	47c8      	blx	r9
 800ddd6:	4306      	orrs	r6, r0
 800ddd8:	3568      	adds	r5, #104	; 0x68
 800ddda:	e7ee      	b.n	800ddba <_fwalk_reent+0x1a>

0800dddc <rshift>:
 800dddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddde:	6906      	ldr	r6, [r0, #16]
 800dde0:	114b      	asrs	r3, r1, #5
 800dde2:	429e      	cmp	r6, r3
 800dde4:	f100 0414 	add.w	r4, r0, #20
 800dde8:	dd30      	ble.n	800de4c <rshift+0x70>
 800ddea:	f011 011f 	ands.w	r1, r1, #31
 800ddee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ddf2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ddf6:	d108      	bne.n	800de0a <rshift+0x2e>
 800ddf8:	4621      	mov	r1, r4
 800ddfa:	42b2      	cmp	r2, r6
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	d211      	bcs.n	800de24 <rshift+0x48>
 800de00:	f852 3b04 	ldr.w	r3, [r2], #4
 800de04:	f841 3b04 	str.w	r3, [r1], #4
 800de08:	e7f7      	b.n	800ddfa <rshift+0x1e>
 800de0a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800de0e:	f1c1 0c20 	rsb	ip, r1, #32
 800de12:	40cd      	lsrs	r5, r1
 800de14:	3204      	adds	r2, #4
 800de16:	4623      	mov	r3, r4
 800de18:	42b2      	cmp	r2, r6
 800de1a:	4617      	mov	r7, r2
 800de1c:	d30c      	bcc.n	800de38 <rshift+0x5c>
 800de1e:	601d      	str	r5, [r3, #0]
 800de20:	b105      	cbz	r5, 800de24 <rshift+0x48>
 800de22:	3304      	adds	r3, #4
 800de24:	1b1a      	subs	r2, r3, r4
 800de26:	42a3      	cmp	r3, r4
 800de28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800de2c:	bf08      	it	eq
 800de2e:	2300      	moveq	r3, #0
 800de30:	6102      	str	r2, [r0, #16]
 800de32:	bf08      	it	eq
 800de34:	6143      	streq	r3, [r0, #20]
 800de36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de38:	683f      	ldr	r7, [r7, #0]
 800de3a:	fa07 f70c 	lsl.w	r7, r7, ip
 800de3e:	433d      	orrs	r5, r7
 800de40:	f843 5b04 	str.w	r5, [r3], #4
 800de44:	f852 5b04 	ldr.w	r5, [r2], #4
 800de48:	40cd      	lsrs	r5, r1
 800de4a:	e7e5      	b.n	800de18 <rshift+0x3c>
 800de4c:	4623      	mov	r3, r4
 800de4e:	e7e9      	b.n	800de24 <rshift+0x48>

0800de50 <__hexdig_fun>:
 800de50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800de54:	2b09      	cmp	r3, #9
 800de56:	d802      	bhi.n	800de5e <__hexdig_fun+0xe>
 800de58:	3820      	subs	r0, #32
 800de5a:	b2c0      	uxtb	r0, r0
 800de5c:	4770      	bx	lr
 800de5e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800de62:	2b05      	cmp	r3, #5
 800de64:	d801      	bhi.n	800de6a <__hexdig_fun+0x1a>
 800de66:	3847      	subs	r0, #71	; 0x47
 800de68:	e7f7      	b.n	800de5a <__hexdig_fun+0xa>
 800de6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800de6e:	2b05      	cmp	r3, #5
 800de70:	d801      	bhi.n	800de76 <__hexdig_fun+0x26>
 800de72:	3827      	subs	r0, #39	; 0x27
 800de74:	e7f1      	b.n	800de5a <__hexdig_fun+0xa>
 800de76:	2000      	movs	r0, #0
 800de78:	4770      	bx	lr

0800de7a <__gethex>:
 800de7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7e:	b08b      	sub	sp, #44	; 0x2c
 800de80:	468a      	mov	sl, r1
 800de82:	9002      	str	r0, [sp, #8]
 800de84:	9816      	ldr	r0, [sp, #88]	; 0x58
 800de86:	9306      	str	r3, [sp, #24]
 800de88:	4690      	mov	r8, r2
 800de8a:	f000 facd 	bl	800e428 <__localeconv_l>
 800de8e:	6803      	ldr	r3, [r0, #0]
 800de90:	9303      	str	r3, [sp, #12]
 800de92:	4618      	mov	r0, r3
 800de94:	f7f2 f9a4 	bl	80001e0 <strlen>
 800de98:	9b03      	ldr	r3, [sp, #12]
 800de9a:	9001      	str	r0, [sp, #4]
 800de9c:	4403      	add	r3, r0
 800de9e:	f04f 0b00 	mov.w	fp, #0
 800dea2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dea6:	9307      	str	r3, [sp, #28]
 800dea8:	f8da 3000 	ldr.w	r3, [sl]
 800deac:	3302      	adds	r3, #2
 800deae:	461f      	mov	r7, r3
 800deb0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800deb4:	2830      	cmp	r0, #48	; 0x30
 800deb6:	d06c      	beq.n	800df92 <__gethex+0x118>
 800deb8:	f7ff ffca 	bl	800de50 <__hexdig_fun>
 800debc:	4604      	mov	r4, r0
 800debe:	2800      	cmp	r0, #0
 800dec0:	d16a      	bne.n	800df98 <__gethex+0x11e>
 800dec2:	9a01      	ldr	r2, [sp, #4]
 800dec4:	9903      	ldr	r1, [sp, #12]
 800dec6:	4638      	mov	r0, r7
 800dec8:	f001 fac5 	bl	800f456 <strncmp>
 800decc:	2800      	cmp	r0, #0
 800dece:	d166      	bne.n	800df9e <__gethex+0x124>
 800ded0:	9b01      	ldr	r3, [sp, #4]
 800ded2:	5cf8      	ldrb	r0, [r7, r3]
 800ded4:	18fe      	adds	r6, r7, r3
 800ded6:	f7ff ffbb 	bl	800de50 <__hexdig_fun>
 800deda:	2800      	cmp	r0, #0
 800dedc:	d062      	beq.n	800dfa4 <__gethex+0x12a>
 800dede:	4633      	mov	r3, r6
 800dee0:	7818      	ldrb	r0, [r3, #0]
 800dee2:	2830      	cmp	r0, #48	; 0x30
 800dee4:	461f      	mov	r7, r3
 800dee6:	f103 0301 	add.w	r3, r3, #1
 800deea:	d0f9      	beq.n	800dee0 <__gethex+0x66>
 800deec:	f7ff ffb0 	bl	800de50 <__hexdig_fun>
 800def0:	fab0 f580 	clz	r5, r0
 800def4:	096d      	lsrs	r5, r5, #5
 800def6:	4634      	mov	r4, r6
 800def8:	f04f 0b01 	mov.w	fp, #1
 800defc:	463a      	mov	r2, r7
 800defe:	4616      	mov	r6, r2
 800df00:	3201      	adds	r2, #1
 800df02:	7830      	ldrb	r0, [r6, #0]
 800df04:	f7ff ffa4 	bl	800de50 <__hexdig_fun>
 800df08:	2800      	cmp	r0, #0
 800df0a:	d1f8      	bne.n	800defe <__gethex+0x84>
 800df0c:	9a01      	ldr	r2, [sp, #4]
 800df0e:	9903      	ldr	r1, [sp, #12]
 800df10:	4630      	mov	r0, r6
 800df12:	f001 faa0 	bl	800f456 <strncmp>
 800df16:	b950      	cbnz	r0, 800df2e <__gethex+0xb4>
 800df18:	b954      	cbnz	r4, 800df30 <__gethex+0xb6>
 800df1a:	9b01      	ldr	r3, [sp, #4]
 800df1c:	18f4      	adds	r4, r6, r3
 800df1e:	4622      	mov	r2, r4
 800df20:	4616      	mov	r6, r2
 800df22:	3201      	adds	r2, #1
 800df24:	7830      	ldrb	r0, [r6, #0]
 800df26:	f7ff ff93 	bl	800de50 <__hexdig_fun>
 800df2a:	2800      	cmp	r0, #0
 800df2c:	d1f8      	bne.n	800df20 <__gethex+0xa6>
 800df2e:	b10c      	cbz	r4, 800df34 <__gethex+0xba>
 800df30:	1ba4      	subs	r4, r4, r6
 800df32:	00a4      	lsls	r4, r4, #2
 800df34:	7833      	ldrb	r3, [r6, #0]
 800df36:	2b50      	cmp	r3, #80	; 0x50
 800df38:	d001      	beq.n	800df3e <__gethex+0xc4>
 800df3a:	2b70      	cmp	r3, #112	; 0x70
 800df3c:	d140      	bne.n	800dfc0 <__gethex+0x146>
 800df3e:	7873      	ldrb	r3, [r6, #1]
 800df40:	2b2b      	cmp	r3, #43	; 0x2b
 800df42:	d031      	beq.n	800dfa8 <__gethex+0x12e>
 800df44:	2b2d      	cmp	r3, #45	; 0x2d
 800df46:	d033      	beq.n	800dfb0 <__gethex+0x136>
 800df48:	1c71      	adds	r1, r6, #1
 800df4a:	f04f 0900 	mov.w	r9, #0
 800df4e:	7808      	ldrb	r0, [r1, #0]
 800df50:	f7ff ff7e 	bl	800de50 <__hexdig_fun>
 800df54:	1e43      	subs	r3, r0, #1
 800df56:	b2db      	uxtb	r3, r3
 800df58:	2b18      	cmp	r3, #24
 800df5a:	d831      	bhi.n	800dfc0 <__gethex+0x146>
 800df5c:	f1a0 0210 	sub.w	r2, r0, #16
 800df60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df64:	f7ff ff74 	bl	800de50 <__hexdig_fun>
 800df68:	1e43      	subs	r3, r0, #1
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	2b18      	cmp	r3, #24
 800df6e:	d922      	bls.n	800dfb6 <__gethex+0x13c>
 800df70:	f1b9 0f00 	cmp.w	r9, #0
 800df74:	d000      	beq.n	800df78 <__gethex+0xfe>
 800df76:	4252      	negs	r2, r2
 800df78:	4414      	add	r4, r2
 800df7a:	f8ca 1000 	str.w	r1, [sl]
 800df7e:	b30d      	cbz	r5, 800dfc4 <__gethex+0x14a>
 800df80:	f1bb 0f00 	cmp.w	fp, #0
 800df84:	bf0c      	ite	eq
 800df86:	2706      	moveq	r7, #6
 800df88:	2700      	movne	r7, #0
 800df8a:	4638      	mov	r0, r7
 800df8c:	b00b      	add	sp, #44	; 0x2c
 800df8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df92:	f10b 0b01 	add.w	fp, fp, #1
 800df96:	e78a      	b.n	800deae <__gethex+0x34>
 800df98:	2500      	movs	r5, #0
 800df9a:	462c      	mov	r4, r5
 800df9c:	e7ae      	b.n	800defc <__gethex+0x82>
 800df9e:	463e      	mov	r6, r7
 800dfa0:	2501      	movs	r5, #1
 800dfa2:	e7c7      	b.n	800df34 <__gethex+0xba>
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	e7fb      	b.n	800dfa0 <__gethex+0x126>
 800dfa8:	f04f 0900 	mov.w	r9, #0
 800dfac:	1cb1      	adds	r1, r6, #2
 800dfae:	e7ce      	b.n	800df4e <__gethex+0xd4>
 800dfb0:	f04f 0901 	mov.w	r9, #1
 800dfb4:	e7fa      	b.n	800dfac <__gethex+0x132>
 800dfb6:	230a      	movs	r3, #10
 800dfb8:	fb03 0202 	mla	r2, r3, r2, r0
 800dfbc:	3a10      	subs	r2, #16
 800dfbe:	e7cf      	b.n	800df60 <__gethex+0xe6>
 800dfc0:	4631      	mov	r1, r6
 800dfc2:	e7da      	b.n	800df7a <__gethex+0x100>
 800dfc4:	1bf3      	subs	r3, r6, r7
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	4629      	mov	r1, r5
 800dfca:	2b07      	cmp	r3, #7
 800dfcc:	dc49      	bgt.n	800e062 <__gethex+0x1e8>
 800dfce:	9802      	ldr	r0, [sp, #8]
 800dfd0:	f000 faa6 	bl	800e520 <_Balloc>
 800dfd4:	9b01      	ldr	r3, [sp, #4]
 800dfd6:	f100 0914 	add.w	r9, r0, #20
 800dfda:	f04f 0b00 	mov.w	fp, #0
 800dfde:	f1c3 0301 	rsb	r3, r3, #1
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	f8cd 9010 	str.w	r9, [sp, #16]
 800dfe8:	46da      	mov	sl, fp
 800dfea:	9308      	str	r3, [sp, #32]
 800dfec:	42b7      	cmp	r7, r6
 800dfee:	d33b      	bcc.n	800e068 <__gethex+0x1ee>
 800dff0:	9804      	ldr	r0, [sp, #16]
 800dff2:	f840 ab04 	str.w	sl, [r0], #4
 800dff6:	eba0 0009 	sub.w	r0, r0, r9
 800dffa:	1080      	asrs	r0, r0, #2
 800dffc:	6128      	str	r0, [r5, #16]
 800dffe:	0147      	lsls	r7, r0, #5
 800e000:	4650      	mov	r0, sl
 800e002:	f000 fb51 	bl	800e6a8 <__hi0bits>
 800e006:	f8d8 6000 	ldr.w	r6, [r8]
 800e00a:	1a3f      	subs	r7, r7, r0
 800e00c:	42b7      	cmp	r7, r6
 800e00e:	dd64      	ble.n	800e0da <__gethex+0x260>
 800e010:	1bbf      	subs	r7, r7, r6
 800e012:	4639      	mov	r1, r7
 800e014:	4628      	mov	r0, r5
 800e016:	f000 fe61 	bl	800ecdc <__any_on>
 800e01a:	4682      	mov	sl, r0
 800e01c:	b178      	cbz	r0, 800e03e <__gethex+0x1c4>
 800e01e:	1e7b      	subs	r3, r7, #1
 800e020:	1159      	asrs	r1, r3, #5
 800e022:	f003 021f 	and.w	r2, r3, #31
 800e026:	f04f 0a01 	mov.w	sl, #1
 800e02a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e02e:	fa0a f202 	lsl.w	r2, sl, r2
 800e032:	420a      	tst	r2, r1
 800e034:	d003      	beq.n	800e03e <__gethex+0x1c4>
 800e036:	4553      	cmp	r3, sl
 800e038:	dc46      	bgt.n	800e0c8 <__gethex+0x24e>
 800e03a:	f04f 0a02 	mov.w	sl, #2
 800e03e:	4639      	mov	r1, r7
 800e040:	4628      	mov	r0, r5
 800e042:	f7ff fecb 	bl	800dddc <rshift>
 800e046:	443c      	add	r4, r7
 800e048:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e04c:	42a3      	cmp	r3, r4
 800e04e:	da52      	bge.n	800e0f6 <__gethex+0x27c>
 800e050:	4629      	mov	r1, r5
 800e052:	9802      	ldr	r0, [sp, #8]
 800e054:	f000 fa98 	bl	800e588 <_Bfree>
 800e058:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e05a:	2300      	movs	r3, #0
 800e05c:	6013      	str	r3, [r2, #0]
 800e05e:	27a3      	movs	r7, #163	; 0xa3
 800e060:	e793      	b.n	800df8a <__gethex+0x110>
 800e062:	3101      	adds	r1, #1
 800e064:	105b      	asrs	r3, r3, #1
 800e066:	e7b0      	b.n	800dfca <__gethex+0x150>
 800e068:	1e73      	subs	r3, r6, #1
 800e06a:	9305      	str	r3, [sp, #20]
 800e06c:	9a07      	ldr	r2, [sp, #28]
 800e06e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e072:	4293      	cmp	r3, r2
 800e074:	d018      	beq.n	800e0a8 <__gethex+0x22e>
 800e076:	f1bb 0f20 	cmp.w	fp, #32
 800e07a:	d107      	bne.n	800e08c <__gethex+0x212>
 800e07c:	9b04      	ldr	r3, [sp, #16]
 800e07e:	f8c3 a000 	str.w	sl, [r3]
 800e082:	3304      	adds	r3, #4
 800e084:	f04f 0a00 	mov.w	sl, #0
 800e088:	9304      	str	r3, [sp, #16]
 800e08a:	46d3      	mov	fp, sl
 800e08c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e090:	f7ff fede 	bl	800de50 <__hexdig_fun>
 800e094:	f000 000f 	and.w	r0, r0, #15
 800e098:	fa00 f00b 	lsl.w	r0, r0, fp
 800e09c:	ea4a 0a00 	orr.w	sl, sl, r0
 800e0a0:	f10b 0b04 	add.w	fp, fp, #4
 800e0a4:	9b05      	ldr	r3, [sp, #20]
 800e0a6:	e00d      	b.n	800e0c4 <__gethex+0x24a>
 800e0a8:	9b05      	ldr	r3, [sp, #20]
 800e0aa:	9a08      	ldr	r2, [sp, #32]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	42bb      	cmp	r3, r7
 800e0b0:	d3e1      	bcc.n	800e076 <__gethex+0x1fc>
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	9a01      	ldr	r2, [sp, #4]
 800e0b6:	9903      	ldr	r1, [sp, #12]
 800e0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ba:	f001 f9cc 	bl	800f456 <strncmp>
 800e0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d1d8      	bne.n	800e076 <__gethex+0x1fc>
 800e0c4:	461e      	mov	r6, r3
 800e0c6:	e791      	b.n	800dfec <__gethex+0x172>
 800e0c8:	1eb9      	subs	r1, r7, #2
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	f000 fe06 	bl	800ecdc <__any_on>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d0b2      	beq.n	800e03a <__gethex+0x1c0>
 800e0d4:	f04f 0a03 	mov.w	sl, #3
 800e0d8:	e7b1      	b.n	800e03e <__gethex+0x1c4>
 800e0da:	da09      	bge.n	800e0f0 <__gethex+0x276>
 800e0dc:	1bf7      	subs	r7, r6, r7
 800e0de:	4629      	mov	r1, r5
 800e0e0:	463a      	mov	r2, r7
 800e0e2:	9802      	ldr	r0, [sp, #8]
 800e0e4:	f000 fc1c 	bl	800e920 <__lshift>
 800e0e8:	1be4      	subs	r4, r4, r7
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	f100 0914 	add.w	r9, r0, #20
 800e0f0:	f04f 0a00 	mov.w	sl, #0
 800e0f4:	e7a8      	b.n	800e048 <__gethex+0x1ce>
 800e0f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e0fa:	42a0      	cmp	r0, r4
 800e0fc:	dd6a      	ble.n	800e1d4 <__gethex+0x35a>
 800e0fe:	1b04      	subs	r4, r0, r4
 800e100:	42a6      	cmp	r6, r4
 800e102:	dc2e      	bgt.n	800e162 <__gethex+0x2e8>
 800e104:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e108:	2b02      	cmp	r3, #2
 800e10a:	d022      	beq.n	800e152 <__gethex+0x2d8>
 800e10c:	2b03      	cmp	r3, #3
 800e10e:	d024      	beq.n	800e15a <__gethex+0x2e0>
 800e110:	2b01      	cmp	r3, #1
 800e112:	d115      	bne.n	800e140 <__gethex+0x2c6>
 800e114:	42a6      	cmp	r6, r4
 800e116:	d113      	bne.n	800e140 <__gethex+0x2c6>
 800e118:	2e01      	cmp	r6, #1
 800e11a:	dc0b      	bgt.n	800e134 <__gethex+0x2ba>
 800e11c:	9a06      	ldr	r2, [sp, #24]
 800e11e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e122:	6013      	str	r3, [r2, #0]
 800e124:	2301      	movs	r3, #1
 800e126:	612b      	str	r3, [r5, #16]
 800e128:	f8c9 3000 	str.w	r3, [r9]
 800e12c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e12e:	2762      	movs	r7, #98	; 0x62
 800e130:	601d      	str	r5, [r3, #0]
 800e132:	e72a      	b.n	800df8a <__gethex+0x110>
 800e134:	1e71      	subs	r1, r6, #1
 800e136:	4628      	mov	r0, r5
 800e138:	f000 fdd0 	bl	800ecdc <__any_on>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d1ed      	bne.n	800e11c <__gethex+0x2a2>
 800e140:	4629      	mov	r1, r5
 800e142:	9802      	ldr	r0, [sp, #8]
 800e144:	f000 fa20 	bl	800e588 <_Bfree>
 800e148:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e14a:	2300      	movs	r3, #0
 800e14c:	6013      	str	r3, [r2, #0]
 800e14e:	2750      	movs	r7, #80	; 0x50
 800e150:	e71b      	b.n	800df8a <__gethex+0x110>
 800e152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e154:	2b00      	cmp	r3, #0
 800e156:	d0e1      	beq.n	800e11c <__gethex+0x2a2>
 800e158:	e7f2      	b.n	800e140 <__gethex+0x2c6>
 800e15a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1dd      	bne.n	800e11c <__gethex+0x2a2>
 800e160:	e7ee      	b.n	800e140 <__gethex+0x2c6>
 800e162:	1e67      	subs	r7, r4, #1
 800e164:	f1ba 0f00 	cmp.w	sl, #0
 800e168:	d131      	bne.n	800e1ce <__gethex+0x354>
 800e16a:	b127      	cbz	r7, 800e176 <__gethex+0x2fc>
 800e16c:	4639      	mov	r1, r7
 800e16e:	4628      	mov	r0, r5
 800e170:	f000 fdb4 	bl	800ecdc <__any_on>
 800e174:	4682      	mov	sl, r0
 800e176:	117a      	asrs	r2, r7, #5
 800e178:	2301      	movs	r3, #1
 800e17a:	f007 071f 	and.w	r7, r7, #31
 800e17e:	fa03 f707 	lsl.w	r7, r3, r7
 800e182:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e186:	4621      	mov	r1, r4
 800e188:	421f      	tst	r7, r3
 800e18a:	4628      	mov	r0, r5
 800e18c:	bf18      	it	ne
 800e18e:	f04a 0a02 	orrne.w	sl, sl, #2
 800e192:	1b36      	subs	r6, r6, r4
 800e194:	f7ff fe22 	bl	800dddc <rshift>
 800e198:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e19c:	2702      	movs	r7, #2
 800e19e:	f1ba 0f00 	cmp.w	sl, #0
 800e1a2:	d048      	beq.n	800e236 <__gethex+0x3bc>
 800e1a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e1a8:	2b02      	cmp	r3, #2
 800e1aa:	d015      	beq.n	800e1d8 <__gethex+0x35e>
 800e1ac:	2b03      	cmp	r3, #3
 800e1ae:	d017      	beq.n	800e1e0 <__gethex+0x366>
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d109      	bne.n	800e1c8 <__gethex+0x34e>
 800e1b4:	f01a 0f02 	tst.w	sl, #2
 800e1b8:	d006      	beq.n	800e1c8 <__gethex+0x34e>
 800e1ba:	f8d9 3000 	ldr.w	r3, [r9]
 800e1be:	ea4a 0a03 	orr.w	sl, sl, r3
 800e1c2:	f01a 0f01 	tst.w	sl, #1
 800e1c6:	d10e      	bne.n	800e1e6 <__gethex+0x36c>
 800e1c8:	f047 0710 	orr.w	r7, r7, #16
 800e1cc:	e033      	b.n	800e236 <__gethex+0x3bc>
 800e1ce:	f04f 0a01 	mov.w	sl, #1
 800e1d2:	e7d0      	b.n	800e176 <__gethex+0x2fc>
 800e1d4:	2701      	movs	r7, #1
 800e1d6:	e7e2      	b.n	800e19e <__gethex+0x324>
 800e1d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1da:	f1c3 0301 	rsb	r3, r3, #1
 800e1de:	9315      	str	r3, [sp, #84]	; 0x54
 800e1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d0f0      	beq.n	800e1c8 <__gethex+0x34e>
 800e1e6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e1ea:	f105 0314 	add.w	r3, r5, #20
 800e1ee:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e1f2:	eb03 010a 	add.w	r1, r3, sl
 800e1f6:	f04f 0c00 	mov.w	ip, #0
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e200:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e204:	d01c      	beq.n	800e240 <__gethex+0x3c6>
 800e206:	3201      	adds	r2, #1
 800e208:	6002      	str	r2, [r0, #0]
 800e20a:	2f02      	cmp	r7, #2
 800e20c:	f105 0314 	add.w	r3, r5, #20
 800e210:	d138      	bne.n	800e284 <__gethex+0x40a>
 800e212:	f8d8 2000 	ldr.w	r2, [r8]
 800e216:	3a01      	subs	r2, #1
 800e218:	42b2      	cmp	r2, r6
 800e21a:	d10a      	bne.n	800e232 <__gethex+0x3b8>
 800e21c:	1171      	asrs	r1, r6, #5
 800e21e:	2201      	movs	r2, #1
 800e220:	f006 061f 	and.w	r6, r6, #31
 800e224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e228:	fa02 f606 	lsl.w	r6, r2, r6
 800e22c:	421e      	tst	r6, r3
 800e22e:	bf18      	it	ne
 800e230:	4617      	movne	r7, r2
 800e232:	f047 0720 	orr.w	r7, r7, #32
 800e236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e238:	601d      	str	r5, [r3, #0]
 800e23a:	9b06      	ldr	r3, [sp, #24]
 800e23c:	601c      	str	r4, [r3, #0]
 800e23e:	e6a4      	b.n	800df8a <__gethex+0x110>
 800e240:	4299      	cmp	r1, r3
 800e242:	f843 cc04 	str.w	ip, [r3, #-4]
 800e246:	d8d8      	bhi.n	800e1fa <__gethex+0x380>
 800e248:	68ab      	ldr	r3, [r5, #8]
 800e24a:	4599      	cmp	r9, r3
 800e24c:	db12      	blt.n	800e274 <__gethex+0x3fa>
 800e24e:	6869      	ldr	r1, [r5, #4]
 800e250:	9802      	ldr	r0, [sp, #8]
 800e252:	3101      	adds	r1, #1
 800e254:	f000 f964 	bl	800e520 <_Balloc>
 800e258:	692a      	ldr	r2, [r5, #16]
 800e25a:	3202      	adds	r2, #2
 800e25c:	f105 010c 	add.w	r1, r5, #12
 800e260:	4683      	mov	fp, r0
 800e262:	0092      	lsls	r2, r2, #2
 800e264:	300c      	adds	r0, #12
 800e266:	f7fc ff8a 	bl	800b17e <memcpy>
 800e26a:	4629      	mov	r1, r5
 800e26c:	9802      	ldr	r0, [sp, #8]
 800e26e:	f000 f98b 	bl	800e588 <_Bfree>
 800e272:	465d      	mov	r5, fp
 800e274:	692b      	ldr	r3, [r5, #16]
 800e276:	1c5a      	adds	r2, r3, #1
 800e278:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e27c:	612a      	str	r2, [r5, #16]
 800e27e:	2201      	movs	r2, #1
 800e280:	615a      	str	r2, [r3, #20]
 800e282:	e7c2      	b.n	800e20a <__gethex+0x390>
 800e284:	692a      	ldr	r2, [r5, #16]
 800e286:	454a      	cmp	r2, r9
 800e288:	dd0b      	ble.n	800e2a2 <__gethex+0x428>
 800e28a:	2101      	movs	r1, #1
 800e28c:	4628      	mov	r0, r5
 800e28e:	f7ff fda5 	bl	800dddc <rshift>
 800e292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e296:	3401      	adds	r4, #1
 800e298:	42a3      	cmp	r3, r4
 800e29a:	f6ff aed9 	blt.w	800e050 <__gethex+0x1d6>
 800e29e:	2701      	movs	r7, #1
 800e2a0:	e7c7      	b.n	800e232 <__gethex+0x3b8>
 800e2a2:	f016 061f 	ands.w	r6, r6, #31
 800e2a6:	d0fa      	beq.n	800e29e <__gethex+0x424>
 800e2a8:	449a      	add	sl, r3
 800e2aa:	f1c6 0620 	rsb	r6, r6, #32
 800e2ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e2b2:	f000 f9f9 	bl	800e6a8 <__hi0bits>
 800e2b6:	42b0      	cmp	r0, r6
 800e2b8:	dbe7      	blt.n	800e28a <__gethex+0x410>
 800e2ba:	e7f0      	b.n	800e29e <__gethex+0x424>

0800e2bc <L_shift>:
 800e2bc:	f1c2 0208 	rsb	r2, r2, #8
 800e2c0:	0092      	lsls	r2, r2, #2
 800e2c2:	b570      	push	{r4, r5, r6, lr}
 800e2c4:	f1c2 0620 	rsb	r6, r2, #32
 800e2c8:	6843      	ldr	r3, [r0, #4]
 800e2ca:	6804      	ldr	r4, [r0, #0]
 800e2cc:	fa03 f506 	lsl.w	r5, r3, r6
 800e2d0:	432c      	orrs	r4, r5
 800e2d2:	40d3      	lsrs	r3, r2
 800e2d4:	6004      	str	r4, [r0, #0]
 800e2d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2da:	4288      	cmp	r0, r1
 800e2dc:	d3f4      	bcc.n	800e2c8 <L_shift+0xc>
 800e2de:	bd70      	pop	{r4, r5, r6, pc}

0800e2e0 <__match>:
 800e2e0:	b530      	push	{r4, r5, lr}
 800e2e2:	6803      	ldr	r3, [r0, #0]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2ea:	b914      	cbnz	r4, 800e2f2 <__match+0x12>
 800e2ec:	6003      	str	r3, [r0, #0]
 800e2ee:	2001      	movs	r0, #1
 800e2f0:	bd30      	pop	{r4, r5, pc}
 800e2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e2fa:	2d19      	cmp	r5, #25
 800e2fc:	bf98      	it	ls
 800e2fe:	3220      	addls	r2, #32
 800e300:	42a2      	cmp	r2, r4
 800e302:	d0f0      	beq.n	800e2e6 <__match+0x6>
 800e304:	2000      	movs	r0, #0
 800e306:	e7f3      	b.n	800e2f0 <__match+0x10>

0800e308 <__hexnan>:
 800e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30c:	680b      	ldr	r3, [r1, #0]
 800e30e:	6801      	ldr	r1, [r0, #0]
 800e310:	115f      	asrs	r7, r3, #5
 800e312:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e316:	f013 031f 	ands.w	r3, r3, #31
 800e31a:	b087      	sub	sp, #28
 800e31c:	bf18      	it	ne
 800e31e:	3704      	addne	r7, #4
 800e320:	2500      	movs	r5, #0
 800e322:	1f3e      	subs	r6, r7, #4
 800e324:	4682      	mov	sl, r0
 800e326:	4690      	mov	r8, r2
 800e328:	9301      	str	r3, [sp, #4]
 800e32a:	f847 5c04 	str.w	r5, [r7, #-4]
 800e32e:	46b1      	mov	r9, r6
 800e330:	4634      	mov	r4, r6
 800e332:	9502      	str	r5, [sp, #8]
 800e334:	46ab      	mov	fp, r5
 800e336:	784a      	ldrb	r2, [r1, #1]
 800e338:	1c4b      	adds	r3, r1, #1
 800e33a:	9303      	str	r3, [sp, #12]
 800e33c:	b342      	cbz	r2, 800e390 <__hexnan+0x88>
 800e33e:	4610      	mov	r0, r2
 800e340:	9105      	str	r1, [sp, #20]
 800e342:	9204      	str	r2, [sp, #16]
 800e344:	f7ff fd84 	bl	800de50 <__hexdig_fun>
 800e348:	2800      	cmp	r0, #0
 800e34a:	d143      	bne.n	800e3d4 <__hexnan+0xcc>
 800e34c:	9a04      	ldr	r2, [sp, #16]
 800e34e:	9905      	ldr	r1, [sp, #20]
 800e350:	2a20      	cmp	r2, #32
 800e352:	d818      	bhi.n	800e386 <__hexnan+0x7e>
 800e354:	9b02      	ldr	r3, [sp, #8]
 800e356:	459b      	cmp	fp, r3
 800e358:	dd13      	ble.n	800e382 <__hexnan+0x7a>
 800e35a:	454c      	cmp	r4, r9
 800e35c:	d206      	bcs.n	800e36c <__hexnan+0x64>
 800e35e:	2d07      	cmp	r5, #7
 800e360:	dc04      	bgt.n	800e36c <__hexnan+0x64>
 800e362:	462a      	mov	r2, r5
 800e364:	4649      	mov	r1, r9
 800e366:	4620      	mov	r0, r4
 800e368:	f7ff ffa8 	bl	800e2bc <L_shift>
 800e36c:	4544      	cmp	r4, r8
 800e36e:	d944      	bls.n	800e3fa <__hexnan+0xf2>
 800e370:	2300      	movs	r3, #0
 800e372:	f1a4 0904 	sub.w	r9, r4, #4
 800e376:	f844 3c04 	str.w	r3, [r4, #-4]
 800e37a:	f8cd b008 	str.w	fp, [sp, #8]
 800e37e:	464c      	mov	r4, r9
 800e380:	461d      	mov	r5, r3
 800e382:	9903      	ldr	r1, [sp, #12]
 800e384:	e7d7      	b.n	800e336 <__hexnan+0x2e>
 800e386:	2a29      	cmp	r2, #41	; 0x29
 800e388:	d14a      	bne.n	800e420 <__hexnan+0x118>
 800e38a:	3102      	adds	r1, #2
 800e38c:	f8ca 1000 	str.w	r1, [sl]
 800e390:	f1bb 0f00 	cmp.w	fp, #0
 800e394:	d044      	beq.n	800e420 <__hexnan+0x118>
 800e396:	454c      	cmp	r4, r9
 800e398:	d206      	bcs.n	800e3a8 <__hexnan+0xa0>
 800e39a:	2d07      	cmp	r5, #7
 800e39c:	dc04      	bgt.n	800e3a8 <__hexnan+0xa0>
 800e39e:	462a      	mov	r2, r5
 800e3a0:	4649      	mov	r1, r9
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f7ff ff8a 	bl	800e2bc <L_shift>
 800e3a8:	4544      	cmp	r4, r8
 800e3aa:	d928      	bls.n	800e3fe <__hexnan+0xf6>
 800e3ac:	4643      	mov	r3, r8
 800e3ae:	f854 2b04 	ldr.w	r2, [r4], #4
 800e3b2:	f843 2b04 	str.w	r2, [r3], #4
 800e3b6:	42a6      	cmp	r6, r4
 800e3b8:	d2f9      	bcs.n	800e3ae <__hexnan+0xa6>
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f843 2b04 	str.w	r2, [r3], #4
 800e3c0:	429e      	cmp	r6, r3
 800e3c2:	d2fb      	bcs.n	800e3bc <__hexnan+0xb4>
 800e3c4:	6833      	ldr	r3, [r6, #0]
 800e3c6:	b91b      	cbnz	r3, 800e3d0 <__hexnan+0xc8>
 800e3c8:	4546      	cmp	r6, r8
 800e3ca:	d127      	bne.n	800e41c <__hexnan+0x114>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	6033      	str	r3, [r6, #0]
 800e3d0:	2005      	movs	r0, #5
 800e3d2:	e026      	b.n	800e422 <__hexnan+0x11a>
 800e3d4:	3501      	adds	r5, #1
 800e3d6:	2d08      	cmp	r5, #8
 800e3d8:	f10b 0b01 	add.w	fp, fp, #1
 800e3dc:	dd06      	ble.n	800e3ec <__hexnan+0xe4>
 800e3de:	4544      	cmp	r4, r8
 800e3e0:	d9cf      	bls.n	800e382 <__hexnan+0x7a>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3e8:	2501      	movs	r5, #1
 800e3ea:	3c04      	subs	r4, #4
 800e3ec:	6822      	ldr	r2, [r4, #0]
 800e3ee:	f000 000f 	and.w	r0, r0, #15
 800e3f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e3f6:	6020      	str	r0, [r4, #0]
 800e3f8:	e7c3      	b.n	800e382 <__hexnan+0x7a>
 800e3fa:	2508      	movs	r5, #8
 800e3fc:	e7c1      	b.n	800e382 <__hexnan+0x7a>
 800e3fe:	9b01      	ldr	r3, [sp, #4]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d0df      	beq.n	800e3c4 <__hexnan+0xbc>
 800e404:	f04f 32ff 	mov.w	r2, #4294967295
 800e408:	f1c3 0320 	rsb	r3, r3, #32
 800e40c:	fa22 f303 	lsr.w	r3, r2, r3
 800e410:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e414:	401a      	ands	r2, r3
 800e416:	f847 2c04 	str.w	r2, [r7, #-4]
 800e41a:	e7d3      	b.n	800e3c4 <__hexnan+0xbc>
 800e41c:	3e04      	subs	r6, #4
 800e41e:	e7d1      	b.n	800e3c4 <__hexnan+0xbc>
 800e420:	2004      	movs	r0, #4
 800e422:	b007      	add	sp, #28
 800e424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e428 <__localeconv_l>:
 800e428:	30f0      	adds	r0, #240	; 0xf0
 800e42a:	4770      	bx	lr

0800e42c <_localeconv_r>:
 800e42c:	4b04      	ldr	r3, [pc, #16]	; (800e440 <_localeconv_r+0x14>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	6a18      	ldr	r0, [r3, #32]
 800e432:	4b04      	ldr	r3, [pc, #16]	; (800e444 <_localeconv_r+0x18>)
 800e434:	2800      	cmp	r0, #0
 800e436:	bf08      	it	eq
 800e438:	4618      	moveq	r0, r3
 800e43a:	30f0      	adds	r0, #240	; 0xf0
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	20000084 	.word	0x20000084
 800e444:	200000e8 	.word	0x200000e8

0800e448 <__swhatbuf_r>:
 800e448:	b570      	push	{r4, r5, r6, lr}
 800e44a:	460e      	mov	r6, r1
 800e44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e450:	2900      	cmp	r1, #0
 800e452:	b096      	sub	sp, #88	; 0x58
 800e454:	4614      	mov	r4, r2
 800e456:	461d      	mov	r5, r3
 800e458:	da07      	bge.n	800e46a <__swhatbuf_r+0x22>
 800e45a:	2300      	movs	r3, #0
 800e45c:	602b      	str	r3, [r5, #0]
 800e45e:	89b3      	ldrh	r3, [r6, #12]
 800e460:	061a      	lsls	r2, r3, #24
 800e462:	d410      	bmi.n	800e486 <__swhatbuf_r+0x3e>
 800e464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e468:	e00e      	b.n	800e488 <__swhatbuf_r+0x40>
 800e46a:	466a      	mov	r2, sp
 800e46c:	f001 f828 	bl	800f4c0 <_fstat_r>
 800e470:	2800      	cmp	r0, #0
 800e472:	dbf2      	blt.n	800e45a <__swhatbuf_r+0x12>
 800e474:	9a01      	ldr	r2, [sp, #4]
 800e476:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e47a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e47e:	425a      	negs	r2, r3
 800e480:	415a      	adcs	r2, r3
 800e482:	602a      	str	r2, [r5, #0]
 800e484:	e7ee      	b.n	800e464 <__swhatbuf_r+0x1c>
 800e486:	2340      	movs	r3, #64	; 0x40
 800e488:	2000      	movs	r0, #0
 800e48a:	6023      	str	r3, [r4, #0]
 800e48c:	b016      	add	sp, #88	; 0x58
 800e48e:	bd70      	pop	{r4, r5, r6, pc}

0800e490 <__smakebuf_r>:
 800e490:	898b      	ldrh	r3, [r1, #12]
 800e492:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e494:	079d      	lsls	r5, r3, #30
 800e496:	4606      	mov	r6, r0
 800e498:	460c      	mov	r4, r1
 800e49a:	d507      	bpl.n	800e4ac <__smakebuf_r+0x1c>
 800e49c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	6123      	str	r3, [r4, #16]
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	6163      	str	r3, [r4, #20]
 800e4a8:	b002      	add	sp, #8
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}
 800e4ac:	ab01      	add	r3, sp, #4
 800e4ae:	466a      	mov	r2, sp
 800e4b0:	f7ff ffca 	bl	800e448 <__swhatbuf_r>
 800e4b4:	9900      	ldr	r1, [sp, #0]
 800e4b6:	4605      	mov	r5, r0
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f000 fc8d 	bl	800edd8 <_malloc_r>
 800e4be:	b948      	cbnz	r0, 800e4d4 <__smakebuf_r+0x44>
 800e4c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4c4:	059a      	lsls	r2, r3, #22
 800e4c6:	d4ef      	bmi.n	800e4a8 <__smakebuf_r+0x18>
 800e4c8:	f023 0303 	bic.w	r3, r3, #3
 800e4cc:	f043 0302 	orr.w	r3, r3, #2
 800e4d0:	81a3      	strh	r3, [r4, #12]
 800e4d2:	e7e3      	b.n	800e49c <__smakebuf_r+0xc>
 800e4d4:	4b0d      	ldr	r3, [pc, #52]	; (800e50c <__smakebuf_r+0x7c>)
 800e4d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e4d8:	89a3      	ldrh	r3, [r4, #12]
 800e4da:	6020      	str	r0, [r4, #0]
 800e4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4e0:	81a3      	strh	r3, [r4, #12]
 800e4e2:	9b00      	ldr	r3, [sp, #0]
 800e4e4:	6163      	str	r3, [r4, #20]
 800e4e6:	9b01      	ldr	r3, [sp, #4]
 800e4e8:	6120      	str	r0, [r4, #16]
 800e4ea:	b15b      	cbz	r3, 800e504 <__smakebuf_r+0x74>
 800e4ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f000 fff7 	bl	800f4e4 <_isatty_r>
 800e4f6:	b128      	cbz	r0, 800e504 <__smakebuf_r+0x74>
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	f023 0303 	bic.w	r3, r3, #3
 800e4fe:	f043 0301 	orr.w	r3, r3, #1
 800e502:	81a3      	strh	r3, [r4, #12]
 800e504:	89a3      	ldrh	r3, [r4, #12]
 800e506:	431d      	orrs	r5, r3
 800e508:	81a5      	strh	r5, [r4, #12]
 800e50a:	e7cd      	b.n	800e4a8 <__smakebuf_r+0x18>
 800e50c:	0800dc91 	.word	0x0800dc91

0800e510 <malloc>:
 800e510:	4b02      	ldr	r3, [pc, #8]	; (800e51c <malloc+0xc>)
 800e512:	4601      	mov	r1, r0
 800e514:	6818      	ldr	r0, [r3, #0]
 800e516:	f000 bc5f 	b.w	800edd8 <_malloc_r>
 800e51a:	bf00      	nop
 800e51c:	20000084 	.word	0x20000084

0800e520 <_Balloc>:
 800e520:	b570      	push	{r4, r5, r6, lr}
 800e522:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e524:	4604      	mov	r4, r0
 800e526:	460e      	mov	r6, r1
 800e528:	b93d      	cbnz	r5, 800e53a <_Balloc+0x1a>
 800e52a:	2010      	movs	r0, #16
 800e52c:	f7ff fff0 	bl	800e510 <malloc>
 800e530:	6260      	str	r0, [r4, #36]	; 0x24
 800e532:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e536:	6005      	str	r5, [r0, #0]
 800e538:	60c5      	str	r5, [r0, #12]
 800e53a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e53c:	68eb      	ldr	r3, [r5, #12]
 800e53e:	b183      	cbz	r3, 800e562 <_Balloc+0x42>
 800e540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e548:	b9b8      	cbnz	r0, 800e57a <_Balloc+0x5a>
 800e54a:	2101      	movs	r1, #1
 800e54c:	fa01 f506 	lsl.w	r5, r1, r6
 800e550:	1d6a      	adds	r2, r5, #5
 800e552:	0092      	lsls	r2, r2, #2
 800e554:	4620      	mov	r0, r4
 800e556:	f000 fbe2 	bl	800ed1e <_calloc_r>
 800e55a:	b160      	cbz	r0, 800e576 <_Balloc+0x56>
 800e55c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e560:	e00e      	b.n	800e580 <_Balloc+0x60>
 800e562:	2221      	movs	r2, #33	; 0x21
 800e564:	2104      	movs	r1, #4
 800e566:	4620      	mov	r0, r4
 800e568:	f000 fbd9 	bl	800ed1e <_calloc_r>
 800e56c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e56e:	60e8      	str	r0, [r5, #12]
 800e570:	68db      	ldr	r3, [r3, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d1e4      	bne.n	800e540 <_Balloc+0x20>
 800e576:	2000      	movs	r0, #0
 800e578:	bd70      	pop	{r4, r5, r6, pc}
 800e57a:	6802      	ldr	r2, [r0, #0]
 800e57c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e580:	2300      	movs	r3, #0
 800e582:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e586:	e7f7      	b.n	800e578 <_Balloc+0x58>

0800e588 <_Bfree>:
 800e588:	b570      	push	{r4, r5, r6, lr}
 800e58a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e58c:	4606      	mov	r6, r0
 800e58e:	460d      	mov	r5, r1
 800e590:	b93c      	cbnz	r4, 800e5a2 <_Bfree+0x1a>
 800e592:	2010      	movs	r0, #16
 800e594:	f7ff ffbc 	bl	800e510 <malloc>
 800e598:	6270      	str	r0, [r6, #36]	; 0x24
 800e59a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e59e:	6004      	str	r4, [r0, #0]
 800e5a0:	60c4      	str	r4, [r0, #12]
 800e5a2:	b13d      	cbz	r5, 800e5b4 <_Bfree+0x2c>
 800e5a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e5a6:	686a      	ldr	r2, [r5, #4]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5ae:	6029      	str	r1, [r5, #0]
 800e5b0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e5b4:	bd70      	pop	{r4, r5, r6, pc}

0800e5b6 <__multadd>:
 800e5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ba:	690d      	ldr	r5, [r1, #16]
 800e5bc:	461f      	mov	r7, r3
 800e5be:	4606      	mov	r6, r0
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	f101 0c14 	add.w	ip, r1, #20
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	f8dc 0000 	ldr.w	r0, [ip]
 800e5cc:	b281      	uxth	r1, r0
 800e5ce:	fb02 7101 	mla	r1, r2, r1, r7
 800e5d2:	0c0f      	lsrs	r7, r1, #16
 800e5d4:	0c00      	lsrs	r0, r0, #16
 800e5d6:	fb02 7000 	mla	r0, r2, r0, r7
 800e5da:	b289      	uxth	r1, r1
 800e5dc:	3301      	adds	r3, #1
 800e5de:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e5e2:	429d      	cmp	r5, r3
 800e5e4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e5e8:	f84c 1b04 	str.w	r1, [ip], #4
 800e5ec:	dcec      	bgt.n	800e5c8 <__multadd+0x12>
 800e5ee:	b1d7      	cbz	r7, 800e626 <__multadd+0x70>
 800e5f0:	68a3      	ldr	r3, [r4, #8]
 800e5f2:	42ab      	cmp	r3, r5
 800e5f4:	dc12      	bgt.n	800e61c <__multadd+0x66>
 800e5f6:	6861      	ldr	r1, [r4, #4]
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	3101      	adds	r1, #1
 800e5fc:	f7ff ff90 	bl	800e520 <_Balloc>
 800e600:	6922      	ldr	r2, [r4, #16]
 800e602:	3202      	adds	r2, #2
 800e604:	f104 010c 	add.w	r1, r4, #12
 800e608:	4680      	mov	r8, r0
 800e60a:	0092      	lsls	r2, r2, #2
 800e60c:	300c      	adds	r0, #12
 800e60e:	f7fc fdb6 	bl	800b17e <memcpy>
 800e612:	4621      	mov	r1, r4
 800e614:	4630      	mov	r0, r6
 800e616:	f7ff ffb7 	bl	800e588 <_Bfree>
 800e61a:	4644      	mov	r4, r8
 800e61c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e620:	3501      	adds	r5, #1
 800e622:	615f      	str	r7, [r3, #20]
 800e624:	6125      	str	r5, [r4, #16]
 800e626:	4620      	mov	r0, r4
 800e628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e62c <__s2b>:
 800e62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e630:	460c      	mov	r4, r1
 800e632:	4615      	mov	r5, r2
 800e634:	461f      	mov	r7, r3
 800e636:	2209      	movs	r2, #9
 800e638:	3308      	adds	r3, #8
 800e63a:	4606      	mov	r6, r0
 800e63c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e640:	2100      	movs	r1, #0
 800e642:	2201      	movs	r2, #1
 800e644:	429a      	cmp	r2, r3
 800e646:	db20      	blt.n	800e68a <__s2b+0x5e>
 800e648:	4630      	mov	r0, r6
 800e64a:	f7ff ff69 	bl	800e520 <_Balloc>
 800e64e:	9b08      	ldr	r3, [sp, #32]
 800e650:	6143      	str	r3, [r0, #20]
 800e652:	2d09      	cmp	r5, #9
 800e654:	f04f 0301 	mov.w	r3, #1
 800e658:	6103      	str	r3, [r0, #16]
 800e65a:	dd19      	ble.n	800e690 <__s2b+0x64>
 800e65c:	f104 0809 	add.w	r8, r4, #9
 800e660:	46c1      	mov	r9, r8
 800e662:	442c      	add	r4, r5
 800e664:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e668:	4601      	mov	r1, r0
 800e66a:	3b30      	subs	r3, #48	; 0x30
 800e66c:	220a      	movs	r2, #10
 800e66e:	4630      	mov	r0, r6
 800e670:	f7ff ffa1 	bl	800e5b6 <__multadd>
 800e674:	45a1      	cmp	r9, r4
 800e676:	d1f5      	bne.n	800e664 <__s2b+0x38>
 800e678:	eb08 0405 	add.w	r4, r8, r5
 800e67c:	3c08      	subs	r4, #8
 800e67e:	1b2d      	subs	r5, r5, r4
 800e680:	1963      	adds	r3, r4, r5
 800e682:	42bb      	cmp	r3, r7
 800e684:	db07      	blt.n	800e696 <__s2b+0x6a>
 800e686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e68a:	0052      	lsls	r2, r2, #1
 800e68c:	3101      	adds	r1, #1
 800e68e:	e7d9      	b.n	800e644 <__s2b+0x18>
 800e690:	340a      	adds	r4, #10
 800e692:	2509      	movs	r5, #9
 800e694:	e7f3      	b.n	800e67e <__s2b+0x52>
 800e696:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e69a:	4601      	mov	r1, r0
 800e69c:	3b30      	subs	r3, #48	; 0x30
 800e69e:	220a      	movs	r2, #10
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	f7ff ff88 	bl	800e5b6 <__multadd>
 800e6a6:	e7eb      	b.n	800e680 <__s2b+0x54>

0800e6a8 <__hi0bits>:
 800e6a8:	0c02      	lsrs	r2, r0, #16
 800e6aa:	0412      	lsls	r2, r2, #16
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	b9b2      	cbnz	r2, 800e6de <__hi0bits+0x36>
 800e6b0:	0403      	lsls	r3, r0, #16
 800e6b2:	2010      	movs	r0, #16
 800e6b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e6b8:	bf04      	itt	eq
 800e6ba:	021b      	lsleq	r3, r3, #8
 800e6bc:	3008      	addeq	r0, #8
 800e6be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e6c2:	bf04      	itt	eq
 800e6c4:	011b      	lsleq	r3, r3, #4
 800e6c6:	3004      	addeq	r0, #4
 800e6c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e6cc:	bf04      	itt	eq
 800e6ce:	009b      	lsleq	r3, r3, #2
 800e6d0:	3002      	addeq	r0, #2
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	db06      	blt.n	800e6e4 <__hi0bits+0x3c>
 800e6d6:	005b      	lsls	r3, r3, #1
 800e6d8:	d503      	bpl.n	800e6e2 <__hi0bits+0x3a>
 800e6da:	3001      	adds	r0, #1
 800e6dc:	4770      	bx	lr
 800e6de:	2000      	movs	r0, #0
 800e6e0:	e7e8      	b.n	800e6b4 <__hi0bits+0xc>
 800e6e2:	2020      	movs	r0, #32
 800e6e4:	4770      	bx	lr

0800e6e6 <__lo0bits>:
 800e6e6:	6803      	ldr	r3, [r0, #0]
 800e6e8:	f013 0207 	ands.w	r2, r3, #7
 800e6ec:	4601      	mov	r1, r0
 800e6ee:	d00b      	beq.n	800e708 <__lo0bits+0x22>
 800e6f0:	07da      	lsls	r2, r3, #31
 800e6f2:	d423      	bmi.n	800e73c <__lo0bits+0x56>
 800e6f4:	0798      	lsls	r0, r3, #30
 800e6f6:	bf49      	itett	mi
 800e6f8:	085b      	lsrmi	r3, r3, #1
 800e6fa:	089b      	lsrpl	r3, r3, #2
 800e6fc:	2001      	movmi	r0, #1
 800e6fe:	600b      	strmi	r3, [r1, #0]
 800e700:	bf5c      	itt	pl
 800e702:	600b      	strpl	r3, [r1, #0]
 800e704:	2002      	movpl	r0, #2
 800e706:	4770      	bx	lr
 800e708:	b298      	uxth	r0, r3
 800e70a:	b9a8      	cbnz	r0, 800e738 <__lo0bits+0x52>
 800e70c:	0c1b      	lsrs	r3, r3, #16
 800e70e:	2010      	movs	r0, #16
 800e710:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e714:	bf04      	itt	eq
 800e716:	0a1b      	lsreq	r3, r3, #8
 800e718:	3008      	addeq	r0, #8
 800e71a:	071a      	lsls	r2, r3, #28
 800e71c:	bf04      	itt	eq
 800e71e:	091b      	lsreq	r3, r3, #4
 800e720:	3004      	addeq	r0, #4
 800e722:	079a      	lsls	r2, r3, #30
 800e724:	bf04      	itt	eq
 800e726:	089b      	lsreq	r3, r3, #2
 800e728:	3002      	addeq	r0, #2
 800e72a:	07da      	lsls	r2, r3, #31
 800e72c:	d402      	bmi.n	800e734 <__lo0bits+0x4e>
 800e72e:	085b      	lsrs	r3, r3, #1
 800e730:	d006      	beq.n	800e740 <__lo0bits+0x5a>
 800e732:	3001      	adds	r0, #1
 800e734:	600b      	str	r3, [r1, #0]
 800e736:	4770      	bx	lr
 800e738:	4610      	mov	r0, r2
 800e73a:	e7e9      	b.n	800e710 <__lo0bits+0x2a>
 800e73c:	2000      	movs	r0, #0
 800e73e:	4770      	bx	lr
 800e740:	2020      	movs	r0, #32
 800e742:	4770      	bx	lr

0800e744 <__i2b>:
 800e744:	b510      	push	{r4, lr}
 800e746:	460c      	mov	r4, r1
 800e748:	2101      	movs	r1, #1
 800e74a:	f7ff fee9 	bl	800e520 <_Balloc>
 800e74e:	2201      	movs	r2, #1
 800e750:	6144      	str	r4, [r0, #20]
 800e752:	6102      	str	r2, [r0, #16]
 800e754:	bd10      	pop	{r4, pc}

0800e756 <__multiply>:
 800e756:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75a:	4614      	mov	r4, r2
 800e75c:	690a      	ldr	r2, [r1, #16]
 800e75e:	6923      	ldr	r3, [r4, #16]
 800e760:	429a      	cmp	r2, r3
 800e762:	bfb8      	it	lt
 800e764:	460b      	movlt	r3, r1
 800e766:	4688      	mov	r8, r1
 800e768:	bfbc      	itt	lt
 800e76a:	46a0      	movlt	r8, r4
 800e76c:	461c      	movlt	r4, r3
 800e76e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e772:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e77a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e77e:	eb07 0609 	add.w	r6, r7, r9
 800e782:	42b3      	cmp	r3, r6
 800e784:	bfb8      	it	lt
 800e786:	3101      	addlt	r1, #1
 800e788:	f7ff feca 	bl	800e520 <_Balloc>
 800e78c:	f100 0514 	add.w	r5, r0, #20
 800e790:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e794:	462b      	mov	r3, r5
 800e796:	2200      	movs	r2, #0
 800e798:	4573      	cmp	r3, lr
 800e79a:	d316      	bcc.n	800e7ca <__multiply+0x74>
 800e79c:	f104 0214 	add.w	r2, r4, #20
 800e7a0:	f108 0114 	add.w	r1, r8, #20
 800e7a4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e7a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	9b00      	ldr	r3, [sp, #0]
 800e7b0:	9201      	str	r2, [sp, #4]
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d80c      	bhi.n	800e7d0 <__multiply+0x7a>
 800e7b6:	2e00      	cmp	r6, #0
 800e7b8:	dd03      	ble.n	800e7c2 <__multiply+0x6c>
 800e7ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d05d      	beq.n	800e87e <__multiply+0x128>
 800e7c2:	6106      	str	r6, [r0, #16]
 800e7c4:	b003      	add	sp, #12
 800e7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ca:	f843 2b04 	str.w	r2, [r3], #4
 800e7ce:	e7e3      	b.n	800e798 <__multiply+0x42>
 800e7d0:	f8b2 b000 	ldrh.w	fp, [r2]
 800e7d4:	f1bb 0f00 	cmp.w	fp, #0
 800e7d8:	d023      	beq.n	800e822 <__multiply+0xcc>
 800e7da:	4689      	mov	r9, r1
 800e7dc:	46ac      	mov	ip, r5
 800e7de:	f04f 0800 	mov.w	r8, #0
 800e7e2:	f859 4b04 	ldr.w	r4, [r9], #4
 800e7e6:	f8dc a000 	ldr.w	sl, [ip]
 800e7ea:	b2a3      	uxth	r3, r4
 800e7ec:	fa1f fa8a 	uxth.w	sl, sl
 800e7f0:	fb0b a303 	mla	r3, fp, r3, sl
 800e7f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e7f8:	f8dc 4000 	ldr.w	r4, [ip]
 800e7fc:	4443      	add	r3, r8
 800e7fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e802:	fb0b 840a 	mla	r4, fp, sl, r8
 800e806:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e80a:	46e2      	mov	sl, ip
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e812:	454f      	cmp	r7, r9
 800e814:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e818:	f84a 3b04 	str.w	r3, [sl], #4
 800e81c:	d82b      	bhi.n	800e876 <__multiply+0x120>
 800e81e:	f8cc 8004 	str.w	r8, [ip, #4]
 800e822:	9b01      	ldr	r3, [sp, #4]
 800e824:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e828:	3204      	adds	r2, #4
 800e82a:	f1ba 0f00 	cmp.w	sl, #0
 800e82e:	d020      	beq.n	800e872 <__multiply+0x11c>
 800e830:	682b      	ldr	r3, [r5, #0]
 800e832:	4689      	mov	r9, r1
 800e834:	46a8      	mov	r8, r5
 800e836:	f04f 0b00 	mov.w	fp, #0
 800e83a:	f8b9 c000 	ldrh.w	ip, [r9]
 800e83e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e842:	fb0a 440c 	mla	r4, sl, ip, r4
 800e846:	445c      	add	r4, fp
 800e848:	46c4      	mov	ip, r8
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e850:	f84c 3b04 	str.w	r3, [ip], #4
 800e854:	f859 3b04 	ldr.w	r3, [r9], #4
 800e858:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e85c:	0c1b      	lsrs	r3, r3, #16
 800e85e:	fb0a b303 	mla	r3, sl, r3, fp
 800e862:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e866:	454f      	cmp	r7, r9
 800e868:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e86c:	d805      	bhi.n	800e87a <__multiply+0x124>
 800e86e:	f8c8 3004 	str.w	r3, [r8, #4]
 800e872:	3504      	adds	r5, #4
 800e874:	e79b      	b.n	800e7ae <__multiply+0x58>
 800e876:	46d4      	mov	ip, sl
 800e878:	e7b3      	b.n	800e7e2 <__multiply+0x8c>
 800e87a:	46e0      	mov	r8, ip
 800e87c:	e7dd      	b.n	800e83a <__multiply+0xe4>
 800e87e:	3e01      	subs	r6, #1
 800e880:	e799      	b.n	800e7b6 <__multiply+0x60>
	...

0800e884 <__pow5mult>:
 800e884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e888:	4615      	mov	r5, r2
 800e88a:	f012 0203 	ands.w	r2, r2, #3
 800e88e:	4606      	mov	r6, r0
 800e890:	460f      	mov	r7, r1
 800e892:	d007      	beq.n	800e8a4 <__pow5mult+0x20>
 800e894:	3a01      	subs	r2, #1
 800e896:	4c21      	ldr	r4, [pc, #132]	; (800e91c <__pow5mult+0x98>)
 800e898:	2300      	movs	r3, #0
 800e89a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e89e:	f7ff fe8a 	bl	800e5b6 <__multadd>
 800e8a2:	4607      	mov	r7, r0
 800e8a4:	10ad      	asrs	r5, r5, #2
 800e8a6:	d035      	beq.n	800e914 <__pow5mult+0x90>
 800e8a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e8aa:	b93c      	cbnz	r4, 800e8bc <__pow5mult+0x38>
 800e8ac:	2010      	movs	r0, #16
 800e8ae:	f7ff fe2f 	bl	800e510 <malloc>
 800e8b2:	6270      	str	r0, [r6, #36]	; 0x24
 800e8b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8b8:	6004      	str	r4, [r0, #0]
 800e8ba:	60c4      	str	r4, [r0, #12]
 800e8bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e8c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8c4:	b94c      	cbnz	r4, 800e8da <__pow5mult+0x56>
 800e8c6:	f240 2171 	movw	r1, #625	; 0x271
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f7ff ff3a 	bl	800e744 <__i2b>
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	6003      	str	r3, [r0, #0]
 800e8da:	f04f 0800 	mov.w	r8, #0
 800e8de:	07eb      	lsls	r3, r5, #31
 800e8e0:	d50a      	bpl.n	800e8f8 <__pow5mult+0x74>
 800e8e2:	4639      	mov	r1, r7
 800e8e4:	4622      	mov	r2, r4
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f7ff ff35 	bl	800e756 <__multiply>
 800e8ec:	4639      	mov	r1, r7
 800e8ee:	4681      	mov	r9, r0
 800e8f0:	4630      	mov	r0, r6
 800e8f2:	f7ff fe49 	bl	800e588 <_Bfree>
 800e8f6:	464f      	mov	r7, r9
 800e8f8:	106d      	asrs	r5, r5, #1
 800e8fa:	d00b      	beq.n	800e914 <__pow5mult+0x90>
 800e8fc:	6820      	ldr	r0, [r4, #0]
 800e8fe:	b938      	cbnz	r0, 800e910 <__pow5mult+0x8c>
 800e900:	4622      	mov	r2, r4
 800e902:	4621      	mov	r1, r4
 800e904:	4630      	mov	r0, r6
 800e906:	f7ff ff26 	bl	800e756 <__multiply>
 800e90a:	6020      	str	r0, [r4, #0]
 800e90c:	f8c0 8000 	str.w	r8, [r0]
 800e910:	4604      	mov	r4, r0
 800e912:	e7e4      	b.n	800e8de <__pow5mult+0x5a>
 800e914:	4638      	mov	r0, r7
 800e916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e91a:	bf00      	nop
 800e91c:	08010120 	.word	0x08010120

0800e920 <__lshift>:
 800e920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e924:	460c      	mov	r4, r1
 800e926:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e92a:	6923      	ldr	r3, [r4, #16]
 800e92c:	6849      	ldr	r1, [r1, #4]
 800e92e:	eb0a 0903 	add.w	r9, sl, r3
 800e932:	68a3      	ldr	r3, [r4, #8]
 800e934:	4607      	mov	r7, r0
 800e936:	4616      	mov	r6, r2
 800e938:	f109 0501 	add.w	r5, r9, #1
 800e93c:	42ab      	cmp	r3, r5
 800e93e:	db32      	blt.n	800e9a6 <__lshift+0x86>
 800e940:	4638      	mov	r0, r7
 800e942:	f7ff fded 	bl	800e520 <_Balloc>
 800e946:	2300      	movs	r3, #0
 800e948:	4680      	mov	r8, r0
 800e94a:	f100 0114 	add.w	r1, r0, #20
 800e94e:	461a      	mov	r2, r3
 800e950:	4553      	cmp	r3, sl
 800e952:	db2b      	blt.n	800e9ac <__lshift+0x8c>
 800e954:	6920      	ldr	r0, [r4, #16]
 800e956:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e95a:	f104 0314 	add.w	r3, r4, #20
 800e95e:	f016 021f 	ands.w	r2, r6, #31
 800e962:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e966:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e96a:	d025      	beq.n	800e9b8 <__lshift+0x98>
 800e96c:	f1c2 0e20 	rsb	lr, r2, #32
 800e970:	2000      	movs	r0, #0
 800e972:	681e      	ldr	r6, [r3, #0]
 800e974:	468a      	mov	sl, r1
 800e976:	4096      	lsls	r6, r2
 800e978:	4330      	orrs	r0, r6
 800e97a:	f84a 0b04 	str.w	r0, [sl], #4
 800e97e:	f853 0b04 	ldr.w	r0, [r3], #4
 800e982:	459c      	cmp	ip, r3
 800e984:	fa20 f00e 	lsr.w	r0, r0, lr
 800e988:	d814      	bhi.n	800e9b4 <__lshift+0x94>
 800e98a:	6048      	str	r0, [r1, #4]
 800e98c:	b108      	cbz	r0, 800e992 <__lshift+0x72>
 800e98e:	f109 0502 	add.w	r5, r9, #2
 800e992:	3d01      	subs	r5, #1
 800e994:	4638      	mov	r0, r7
 800e996:	f8c8 5010 	str.w	r5, [r8, #16]
 800e99a:	4621      	mov	r1, r4
 800e99c:	f7ff fdf4 	bl	800e588 <_Bfree>
 800e9a0:	4640      	mov	r0, r8
 800e9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a6:	3101      	adds	r1, #1
 800e9a8:	005b      	lsls	r3, r3, #1
 800e9aa:	e7c7      	b.n	800e93c <__lshift+0x1c>
 800e9ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	e7cd      	b.n	800e950 <__lshift+0x30>
 800e9b4:	4651      	mov	r1, sl
 800e9b6:	e7dc      	b.n	800e972 <__lshift+0x52>
 800e9b8:	3904      	subs	r1, #4
 800e9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9be:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9c2:	459c      	cmp	ip, r3
 800e9c4:	d8f9      	bhi.n	800e9ba <__lshift+0x9a>
 800e9c6:	e7e4      	b.n	800e992 <__lshift+0x72>

0800e9c8 <__mcmp>:
 800e9c8:	6903      	ldr	r3, [r0, #16]
 800e9ca:	690a      	ldr	r2, [r1, #16]
 800e9cc:	1a9b      	subs	r3, r3, r2
 800e9ce:	b530      	push	{r4, r5, lr}
 800e9d0:	d10c      	bne.n	800e9ec <__mcmp+0x24>
 800e9d2:	0092      	lsls	r2, r2, #2
 800e9d4:	3014      	adds	r0, #20
 800e9d6:	3114      	adds	r1, #20
 800e9d8:	1884      	adds	r4, r0, r2
 800e9da:	4411      	add	r1, r2
 800e9dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e9e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e9e4:	4295      	cmp	r5, r2
 800e9e6:	d003      	beq.n	800e9f0 <__mcmp+0x28>
 800e9e8:	d305      	bcc.n	800e9f6 <__mcmp+0x2e>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	bd30      	pop	{r4, r5, pc}
 800e9f0:	42a0      	cmp	r0, r4
 800e9f2:	d3f3      	bcc.n	800e9dc <__mcmp+0x14>
 800e9f4:	e7fa      	b.n	800e9ec <__mcmp+0x24>
 800e9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9fa:	e7f7      	b.n	800e9ec <__mcmp+0x24>

0800e9fc <__mdiff>:
 800e9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea00:	460d      	mov	r5, r1
 800ea02:	4607      	mov	r7, r0
 800ea04:	4611      	mov	r1, r2
 800ea06:	4628      	mov	r0, r5
 800ea08:	4614      	mov	r4, r2
 800ea0a:	f7ff ffdd 	bl	800e9c8 <__mcmp>
 800ea0e:	1e06      	subs	r6, r0, #0
 800ea10:	d108      	bne.n	800ea24 <__mdiff+0x28>
 800ea12:	4631      	mov	r1, r6
 800ea14:	4638      	mov	r0, r7
 800ea16:	f7ff fd83 	bl	800e520 <_Balloc>
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ea20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea24:	bfa4      	itt	ge
 800ea26:	4623      	movge	r3, r4
 800ea28:	462c      	movge	r4, r5
 800ea2a:	4638      	mov	r0, r7
 800ea2c:	6861      	ldr	r1, [r4, #4]
 800ea2e:	bfa6      	itte	ge
 800ea30:	461d      	movge	r5, r3
 800ea32:	2600      	movge	r6, #0
 800ea34:	2601      	movlt	r6, #1
 800ea36:	f7ff fd73 	bl	800e520 <_Balloc>
 800ea3a:	692b      	ldr	r3, [r5, #16]
 800ea3c:	60c6      	str	r6, [r0, #12]
 800ea3e:	6926      	ldr	r6, [r4, #16]
 800ea40:	f105 0914 	add.w	r9, r5, #20
 800ea44:	f104 0214 	add.w	r2, r4, #20
 800ea48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ea4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ea50:	f100 0514 	add.w	r5, r0, #20
 800ea54:	f04f 0e00 	mov.w	lr, #0
 800ea58:	f852 ab04 	ldr.w	sl, [r2], #4
 800ea5c:	f859 4b04 	ldr.w	r4, [r9], #4
 800ea60:	fa1e f18a 	uxtah	r1, lr, sl
 800ea64:	b2a3      	uxth	r3, r4
 800ea66:	1ac9      	subs	r1, r1, r3
 800ea68:	0c23      	lsrs	r3, r4, #16
 800ea6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ea6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ea72:	b289      	uxth	r1, r1
 800ea74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ea78:	45c8      	cmp	r8, r9
 800ea7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ea7e:	4694      	mov	ip, r2
 800ea80:	f845 3b04 	str.w	r3, [r5], #4
 800ea84:	d8e8      	bhi.n	800ea58 <__mdiff+0x5c>
 800ea86:	45bc      	cmp	ip, r7
 800ea88:	d304      	bcc.n	800ea94 <__mdiff+0x98>
 800ea8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ea8e:	b183      	cbz	r3, 800eab2 <__mdiff+0xb6>
 800ea90:	6106      	str	r6, [r0, #16]
 800ea92:	e7c5      	b.n	800ea20 <__mdiff+0x24>
 800ea94:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ea98:	fa1e f381 	uxtah	r3, lr, r1
 800ea9c:	141a      	asrs	r2, r3, #16
 800ea9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eaa8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800eaac:	f845 3b04 	str.w	r3, [r5], #4
 800eab0:	e7e9      	b.n	800ea86 <__mdiff+0x8a>
 800eab2:	3e01      	subs	r6, #1
 800eab4:	e7e9      	b.n	800ea8a <__mdiff+0x8e>
	...

0800eab8 <__ulp>:
 800eab8:	4b12      	ldr	r3, [pc, #72]	; (800eb04 <__ulp+0x4c>)
 800eaba:	ee10 2a90 	vmov	r2, s1
 800eabe:	401a      	ands	r2, r3
 800eac0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	dd04      	ble.n	800ead2 <__ulp+0x1a>
 800eac8:	2000      	movs	r0, #0
 800eaca:	4619      	mov	r1, r3
 800eacc:	ec41 0b10 	vmov	d0, r0, r1
 800ead0:	4770      	bx	lr
 800ead2:	425b      	negs	r3, r3
 800ead4:	151b      	asrs	r3, r3, #20
 800ead6:	2b13      	cmp	r3, #19
 800ead8:	f04f 0000 	mov.w	r0, #0
 800eadc:	f04f 0100 	mov.w	r1, #0
 800eae0:	dc04      	bgt.n	800eaec <__ulp+0x34>
 800eae2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800eae6:	fa42 f103 	asr.w	r1, r2, r3
 800eaea:	e7ef      	b.n	800eacc <__ulp+0x14>
 800eaec:	3b14      	subs	r3, #20
 800eaee:	2b1e      	cmp	r3, #30
 800eaf0:	f04f 0201 	mov.w	r2, #1
 800eaf4:	bfda      	itte	le
 800eaf6:	f1c3 031f 	rsble	r3, r3, #31
 800eafa:	fa02 f303 	lslle.w	r3, r2, r3
 800eafe:	4613      	movgt	r3, r2
 800eb00:	4618      	mov	r0, r3
 800eb02:	e7e3      	b.n	800eacc <__ulp+0x14>
 800eb04:	7ff00000 	.word	0x7ff00000

0800eb08 <__b2d>:
 800eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0a:	6905      	ldr	r5, [r0, #16]
 800eb0c:	f100 0714 	add.w	r7, r0, #20
 800eb10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800eb14:	1f2e      	subs	r6, r5, #4
 800eb16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f7ff fdc4 	bl	800e6a8 <__hi0bits>
 800eb20:	f1c0 0320 	rsb	r3, r0, #32
 800eb24:	280a      	cmp	r0, #10
 800eb26:	600b      	str	r3, [r1, #0]
 800eb28:	f8df c074 	ldr.w	ip, [pc, #116]	; 800eba0 <__b2d+0x98>
 800eb2c:	dc14      	bgt.n	800eb58 <__b2d+0x50>
 800eb2e:	f1c0 0e0b 	rsb	lr, r0, #11
 800eb32:	fa24 f10e 	lsr.w	r1, r4, lr
 800eb36:	42b7      	cmp	r7, r6
 800eb38:	ea41 030c 	orr.w	r3, r1, ip
 800eb3c:	bf34      	ite	cc
 800eb3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eb42:	2100      	movcs	r1, #0
 800eb44:	3015      	adds	r0, #21
 800eb46:	fa04 f000 	lsl.w	r0, r4, r0
 800eb4a:	fa21 f10e 	lsr.w	r1, r1, lr
 800eb4e:	ea40 0201 	orr.w	r2, r0, r1
 800eb52:	ec43 2b10 	vmov	d0, r2, r3
 800eb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb58:	42b7      	cmp	r7, r6
 800eb5a:	bf3a      	itte	cc
 800eb5c:	f1a5 0608 	subcc.w	r6, r5, #8
 800eb60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eb64:	2100      	movcs	r1, #0
 800eb66:	380b      	subs	r0, #11
 800eb68:	d015      	beq.n	800eb96 <__b2d+0x8e>
 800eb6a:	4084      	lsls	r4, r0
 800eb6c:	f1c0 0520 	rsb	r5, r0, #32
 800eb70:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800eb74:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800eb78:	42be      	cmp	r6, r7
 800eb7a:	fa21 fc05 	lsr.w	ip, r1, r5
 800eb7e:	ea44 030c 	orr.w	r3, r4, ip
 800eb82:	bf8c      	ite	hi
 800eb84:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800eb88:	2400      	movls	r4, #0
 800eb8a:	fa01 f000 	lsl.w	r0, r1, r0
 800eb8e:	40ec      	lsrs	r4, r5
 800eb90:	ea40 0204 	orr.w	r2, r0, r4
 800eb94:	e7dd      	b.n	800eb52 <__b2d+0x4a>
 800eb96:	ea44 030c 	orr.w	r3, r4, ip
 800eb9a:	460a      	mov	r2, r1
 800eb9c:	e7d9      	b.n	800eb52 <__b2d+0x4a>
 800eb9e:	bf00      	nop
 800eba0:	3ff00000 	.word	0x3ff00000

0800eba4 <__d2b>:
 800eba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eba8:	460e      	mov	r6, r1
 800ebaa:	2101      	movs	r1, #1
 800ebac:	ec59 8b10 	vmov	r8, r9, d0
 800ebb0:	4615      	mov	r5, r2
 800ebb2:	f7ff fcb5 	bl	800e520 <_Balloc>
 800ebb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ebba:	4607      	mov	r7, r0
 800ebbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebc0:	bb34      	cbnz	r4, 800ec10 <__d2b+0x6c>
 800ebc2:	9301      	str	r3, [sp, #4]
 800ebc4:	f1b8 0300 	subs.w	r3, r8, #0
 800ebc8:	d027      	beq.n	800ec1a <__d2b+0x76>
 800ebca:	a802      	add	r0, sp, #8
 800ebcc:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ebd0:	f7ff fd89 	bl	800e6e6 <__lo0bits>
 800ebd4:	9900      	ldr	r1, [sp, #0]
 800ebd6:	b1f0      	cbz	r0, 800ec16 <__d2b+0x72>
 800ebd8:	9a01      	ldr	r2, [sp, #4]
 800ebda:	f1c0 0320 	rsb	r3, r0, #32
 800ebde:	fa02 f303 	lsl.w	r3, r2, r3
 800ebe2:	430b      	orrs	r3, r1
 800ebe4:	40c2      	lsrs	r2, r0
 800ebe6:	617b      	str	r3, [r7, #20]
 800ebe8:	9201      	str	r2, [sp, #4]
 800ebea:	9b01      	ldr	r3, [sp, #4]
 800ebec:	61bb      	str	r3, [r7, #24]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	bf14      	ite	ne
 800ebf2:	2102      	movne	r1, #2
 800ebf4:	2101      	moveq	r1, #1
 800ebf6:	6139      	str	r1, [r7, #16]
 800ebf8:	b1c4      	cbz	r4, 800ec2c <__d2b+0x88>
 800ebfa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ebfe:	4404      	add	r4, r0
 800ec00:	6034      	str	r4, [r6, #0]
 800ec02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec06:	6028      	str	r0, [r5, #0]
 800ec08:	4638      	mov	r0, r7
 800ec0a:	b003      	add	sp, #12
 800ec0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec14:	e7d5      	b.n	800ebc2 <__d2b+0x1e>
 800ec16:	6179      	str	r1, [r7, #20]
 800ec18:	e7e7      	b.n	800ebea <__d2b+0x46>
 800ec1a:	a801      	add	r0, sp, #4
 800ec1c:	f7ff fd63 	bl	800e6e6 <__lo0bits>
 800ec20:	9b01      	ldr	r3, [sp, #4]
 800ec22:	617b      	str	r3, [r7, #20]
 800ec24:	2101      	movs	r1, #1
 800ec26:	6139      	str	r1, [r7, #16]
 800ec28:	3020      	adds	r0, #32
 800ec2a:	e7e5      	b.n	800ebf8 <__d2b+0x54>
 800ec2c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ec30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec34:	6030      	str	r0, [r6, #0]
 800ec36:	6918      	ldr	r0, [r3, #16]
 800ec38:	f7ff fd36 	bl	800e6a8 <__hi0bits>
 800ec3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ec40:	e7e1      	b.n	800ec06 <__d2b+0x62>

0800ec42 <__ratio>:
 800ec42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec46:	4688      	mov	r8, r1
 800ec48:	4669      	mov	r1, sp
 800ec4a:	4681      	mov	r9, r0
 800ec4c:	f7ff ff5c 	bl	800eb08 <__b2d>
 800ec50:	a901      	add	r1, sp, #4
 800ec52:	4640      	mov	r0, r8
 800ec54:	ec57 6b10 	vmov	r6, r7, d0
 800ec58:	f7ff ff56 	bl	800eb08 <__b2d>
 800ec5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ec64:	eba3 0c02 	sub.w	ip, r3, r2
 800ec68:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ec6c:	1a9b      	subs	r3, r3, r2
 800ec6e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ec72:	ec5b ab10 	vmov	sl, fp, d0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	bfce      	itee	gt
 800ec7a:	463a      	movgt	r2, r7
 800ec7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ec80:	465a      	movle	r2, fp
 800ec82:	4659      	mov	r1, fp
 800ec84:	463d      	mov	r5, r7
 800ec86:	bfd4      	ite	le
 800ec88:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ec8c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800ec90:	4630      	mov	r0, r6
 800ec92:	ee10 2a10 	vmov	r2, s0
 800ec96:	460b      	mov	r3, r1
 800ec98:	4629      	mov	r1, r5
 800ec9a:	f7f1 fddf 	bl	800085c <__aeabi_ddiv>
 800ec9e:	ec41 0b10 	vmov	d0, r0, r1
 800eca2:	b003      	add	sp, #12
 800eca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eca8 <__copybits>:
 800eca8:	3901      	subs	r1, #1
 800ecaa:	b510      	push	{r4, lr}
 800ecac:	1149      	asrs	r1, r1, #5
 800ecae:	6914      	ldr	r4, [r2, #16]
 800ecb0:	3101      	adds	r1, #1
 800ecb2:	f102 0314 	add.w	r3, r2, #20
 800ecb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ecba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ecbe:	42a3      	cmp	r3, r4
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	d303      	bcc.n	800eccc <__copybits+0x24>
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	428a      	cmp	r2, r1
 800ecc8:	d305      	bcc.n	800ecd6 <__copybits+0x2e>
 800ecca:	bd10      	pop	{r4, pc}
 800eccc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecd0:	f840 2b04 	str.w	r2, [r0], #4
 800ecd4:	e7f3      	b.n	800ecbe <__copybits+0x16>
 800ecd6:	f842 3b04 	str.w	r3, [r2], #4
 800ecda:	e7f4      	b.n	800ecc6 <__copybits+0x1e>

0800ecdc <__any_on>:
 800ecdc:	f100 0214 	add.w	r2, r0, #20
 800ece0:	6900      	ldr	r0, [r0, #16]
 800ece2:	114b      	asrs	r3, r1, #5
 800ece4:	4298      	cmp	r0, r3
 800ece6:	b510      	push	{r4, lr}
 800ece8:	db11      	blt.n	800ed0e <__any_on+0x32>
 800ecea:	dd0a      	ble.n	800ed02 <__any_on+0x26>
 800ecec:	f011 011f 	ands.w	r1, r1, #31
 800ecf0:	d007      	beq.n	800ed02 <__any_on+0x26>
 800ecf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ecf6:	fa24 f001 	lsr.w	r0, r4, r1
 800ecfa:	fa00 f101 	lsl.w	r1, r0, r1
 800ecfe:	428c      	cmp	r4, r1
 800ed00:	d10b      	bne.n	800ed1a <__any_on+0x3e>
 800ed02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d803      	bhi.n	800ed12 <__any_on+0x36>
 800ed0a:	2000      	movs	r0, #0
 800ed0c:	bd10      	pop	{r4, pc}
 800ed0e:	4603      	mov	r3, r0
 800ed10:	e7f7      	b.n	800ed02 <__any_on+0x26>
 800ed12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed16:	2900      	cmp	r1, #0
 800ed18:	d0f5      	beq.n	800ed06 <__any_on+0x2a>
 800ed1a:	2001      	movs	r0, #1
 800ed1c:	e7f6      	b.n	800ed0c <__any_on+0x30>

0800ed1e <_calloc_r>:
 800ed1e:	b538      	push	{r3, r4, r5, lr}
 800ed20:	fb02 f401 	mul.w	r4, r2, r1
 800ed24:	4621      	mov	r1, r4
 800ed26:	f000 f857 	bl	800edd8 <_malloc_r>
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	b118      	cbz	r0, 800ed36 <_calloc_r+0x18>
 800ed2e:	4622      	mov	r2, r4
 800ed30:	2100      	movs	r1, #0
 800ed32:	f7fc fa2f 	bl	800b194 <memset>
 800ed36:	4628      	mov	r0, r5
 800ed38:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ed3c <_free_r>:
 800ed3c:	b538      	push	{r3, r4, r5, lr}
 800ed3e:	4605      	mov	r5, r0
 800ed40:	2900      	cmp	r1, #0
 800ed42:	d045      	beq.n	800edd0 <_free_r+0x94>
 800ed44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed48:	1f0c      	subs	r4, r1, #4
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	bfb8      	it	lt
 800ed4e:	18e4      	addlt	r4, r4, r3
 800ed50:	f000 fc03 	bl	800f55a <__malloc_lock>
 800ed54:	4a1f      	ldr	r2, [pc, #124]	; (800edd4 <_free_r+0x98>)
 800ed56:	6813      	ldr	r3, [r2, #0]
 800ed58:	4610      	mov	r0, r2
 800ed5a:	b933      	cbnz	r3, 800ed6a <_free_r+0x2e>
 800ed5c:	6063      	str	r3, [r4, #4]
 800ed5e:	6014      	str	r4, [r2, #0]
 800ed60:	4628      	mov	r0, r5
 800ed62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed66:	f000 bbf9 	b.w	800f55c <__malloc_unlock>
 800ed6a:	42a3      	cmp	r3, r4
 800ed6c:	d90c      	bls.n	800ed88 <_free_r+0x4c>
 800ed6e:	6821      	ldr	r1, [r4, #0]
 800ed70:	1862      	adds	r2, r4, r1
 800ed72:	4293      	cmp	r3, r2
 800ed74:	bf04      	itt	eq
 800ed76:	681a      	ldreq	r2, [r3, #0]
 800ed78:	685b      	ldreq	r3, [r3, #4]
 800ed7a:	6063      	str	r3, [r4, #4]
 800ed7c:	bf04      	itt	eq
 800ed7e:	1852      	addeq	r2, r2, r1
 800ed80:	6022      	streq	r2, [r4, #0]
 800ed82:	6004      	str	r4, [r0, #0]
 800ed84:	e7ec      	b.n	800ed60 <_free_r+0x24>
 800ed86:	4613      	mov	r3, r2
 800ed88:	685a      	ldr	r2, [r3, #4]
 800ed8a:	b10a      	cbz	r2, 800ed90 <_free_r+0x54>
 800ed8c:	42a2      	cmp	r2, r4
 800ed8e:	d9fa      	bls.n	800ed86 <_free_r+0x4a>
 800ed90:	6819      	ldr	r1, [r3, #0]
 800ed92:	1858      	adds	r0, r3, r1
 800ed94:	42a0      	cmp	r0, r4
 800ed96:	d10b      	bne.n	800edb0 <_free_r+0x74>
 800ed98:	6820      	ldr	r0, [r4, #0]
 800ed9a:	4401      	add	r1, r0
 800ed9c:	1858      	adds	r0, r3, r1
 800ed9e:	4282      	cmp	r2, r0
 800eda0:	6019      	str	r1, [r3, #0]
 800eda2:	d1dd      	bne.n	800ed60 <_free_r+0x24>
 800eda4:	6810      	ldr	r0, [r2, #0]
 800eda6:	6852      	ldr	r2, [r2, #4]
 800eda8:	605a      	str	r2, [r3, #4]
 800edaa:	4401      	add	r1, r0
 800edac:	6019      	str	r1, [r3, #0]
 800edae:	e7d7      	b.n	800ed60 <_free_r+0x24>
 800edb0:	d902      	bls.n	800edb8 <_free_r+0x7c>
 800edb2:	230c      	movs	r3, #12
 800edb4:	602b      	str	r3, [r5, #0]
 800edb6:	e7d3      	b.n	800ed60 <_free_r+0x24>
 800edb8:	6820      	ldr	r0, [r4, #0]
 800edba:	1821      	adds	r1, r4, r0
 800edbc:	428a      	cmp	r2, r1
 800edbe:	bf04      	itt	eq
 800edc0:	6811      	ldreq	r1, [r2, #0]
 800edc2:	6852      	ldreq	r2, [r2, #4]
 800edc4:	6062      	str	r2, [r4, #4]
 800edc6:	bf04      	itt	eq
 800edc8:	1809      	addeq	r1, r1, r0
 800edca:	6021      	streq	r1, [r4, #0]
 800edcc:	605c      	str	r4, [r3, #4]
 800edce:	e7c7      	b.n	800ed60 <_free_r+0x24>
 800edd0:	bd38      	pop	{r3, r4, r5, pc}
 800edd2:	bf00      	nop
 800edd4:	20004a74 	.word	0x20004a74

0800edd8 <_malloc_r>:
 800edd8:	b570      	push	{r4, r5, r6, lr}
 800edda:	1ccd      	adds	r5, r1, #3
 800eddc:	f025 0503 	bic.w	r5, r5, #3
 800ede0:	3508      	adds	r5, #8
 800ede2:	2d0c      	cmp	r5, #12
 800ede4:	bf38      	it	cc
 800ede6:	250c      	movcc	r5, #12
 800ede8:	2d00      	cmp	r5, #0
 800edea:	4606      	mov	r6, r0
 800edec:	db01      	blt.n	800edf2 <_malloc_r+0x1a>
 800edee:	42a9      	cmp	r1, r5
 800edf0:	d903      	bls.n	800edfa <_malloc_r+0x22>
 800edf2:	230c      	movs	r3, #12
 800edf4:	6033      	str	r3, [r6, #0]
 800edf6:	2000      	movs	r0, #0
 800edf8:	bd70      	pop	{r4, r5, r6, pc}
 800edfa:	f000 fbae 	bl	800f55a <__malloc_lock>
 800edfe:	4a21      	ldr	r2, [pc, #132]	; (800ee84 <_malloc_r+0xac>)
 800ee00:	6814      	ldr	r4, [r2, #0]
 800ee02:	4621      	mov	r1, r4
 800ee04:	b991      	cbnz	r1, 800ee2c <_malloc_r+0x54>
 800ee06:	4c20      	ldr	r4, [pc, #128]	; (800ee88 <_malloc_r+0xb0>)
 800ee08:	6823      	ldr	r3, [r4, #0]
 800ee0a:	b91b      	cbnz	r3, 800ee14 <_malloc_r+0x3c>
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	f000 facf 	bl	800f3b0 <_sbrk_r>
 800ee12:	6020      	str	r0, [r4, #0]
 800ee14:	4629      	mov	r1, r5
 800ee16:	4630      	mov	r0, r6
 800ee18:	f000 faca 	bl	800f3b0 <_sbrk_r>
 800ee1c:	1c43      	adds	r3, r0, #1
 800ee1e:	d124      	bne.n	800ee6a <_malloc_r+0x92>
 800ee20:	230c      	movs	r3, #12
 800ee22:	6033      	str	r3, [r6, #0]
 800ee24:	4630      	mov	r0, r6
 800ee26:	f000 fb99 	bl	800f55c <__malloc_unlock>
 800ee2a:	e7e4      	b.n	800edf6 <_malloc_r+0x1e>
 800ee2c:	680b      	ldr	r3, [r1, #0]
 800ee2e:	1b5b      	subs	r3, r3, r5
 800ee30:	d418      	bmi.n	800ee64 <_malloc_r+0x8c>
 800ee32:	2b0b      	cmp	r3, #11
 800ee34:	d90f      	bls.n	800ee56 <_malloc_r+0x7e>
 800ee36:	600b      	str	r3, [r1, #0]
 800ee38:	50cd      	str	r5, [r1, r3]
 800ee3a:	18cc      	adds	r4, r1, r3
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	f000 fb8d 	bl	800f55c <__malloc_unlock>
 800ee42:	f104 000b 	add.w	r0, r4, #11
 800ee46:	1d23      	adds	r3, r4, #4
 800ee48:	f020 0007 	bic.w	r0, r0, #7
 800ee4c:	1ac3      	subs	r3, r0, r3
 800ee4e:	d0d3      	beq.n	800edf8 <_malloc_r+0x20>
 800ee50:	425a      	negs	r2, r3
 800ee52:	50e2      	str	r2, [r4, r3]
 800ee54:	e7d0      	b.n	800edf8 <_malloc_r+0x20>
 800ee56:	428c      	cmp	r4, r1
 800ee58:	684b      	ldr	r3, [r1, #4]
 800ee5a:	bf16      	itet	ne
 800ee5c:	6063      	strne	r3, [r4, #4]
 800ee5e:	6013      	streq	r3, [r2, #0]
 800ee60:	460c      	movne	r4, r1
 800ee62:	e7eb      	b.n	800ee3c <_malloc_r+0x64>
 800ee64:	460c      	mov	r4, r1
 800ee66:	6849      	ldr	r1, [r1, #4]
 800ee68:	e7cc      	b.n	800ee04 <_malloc_r+0x2c>
 800ee6a:	1cc4      	adds	r4, r0, #3
 800ee6c:	f024 0403 	bic.w	r4, r4, #3
 800ee70:	42a0      	cmp	r0, r4
 800ee72:	d005      	beq.n	800ee80 <_malloc_r+0xa8>
 800ee74:	1a21      	subs	r1, r4, r0
 800ee76:	4630      	mov	r0, r6
 800ee78:	f000 fa9a 	bl	800f3b0 <_sbrk_r>
 800ee7c:	3001      	adds	r0, #1
 800ee7e:	d0cf      	beq.n	800ee20 <_malloc_r+0x48>
 800ee80:	6025      	str	r5, [r4, #0]
 800ee82:	e7db      	b.n	800ee3c <_malloc_r+0x64>
 800ee84:	20004a74 	.word	0x20004a74
 800ee88:	20004a78 	.word	0x20004a78

0800ee8c <__ssputs_r>:
 800ee8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee90:	688e      	ldr	r6, [r1, #8]
 800ee92:	429e      	cmp	r6, r3
 800ee94:	4682      	mov	sl, r0
 800ee96:	460c      	mov	r4, r1
 800ee98:	4690      	mov	r8, r2
 800ee9a:	4699      	mov	r9, r3
 800ee9c:	d837      	bhi.n	800ef0e <__ssputs_r+0x82>
 800ee9e:	898a      	ldrh	r2, [r1, #12]
 800eea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eea4:	d031      	beq.n	800ef0a <__ssputs_r+0x7e>
 800eea6:	6825      	ldr	r5, [r4, #0]
 800eea8:	6909      	ldr	r1, [r1, #16]
 800eeaa:	1a6f      	subs	r7, r5, r1
 800eeac:	6965      	ldr	r5, [r4, #20]
 800eeae:	2302      	movs	r3, #2
 800eeb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eeb4:	fb95 f5f3 	sdiv	r5, r5, r3
 800eeb8:	f109 0301 	add.w	r3, r9, #1
 800eebc:	443b      	add	r3, r7
 800eebe:	429d      	cmp	r5, r3
 800eec0:	bf38      	it	cc
 800eec2:	461d      	movcc	r5, r3
 800eec4:	0553      	lsls	r3, r2, #21
 800eec6:	d530      	bpl.n	800ef2a <__ssputs_r+0x9e>
 800eec8:	4629      	mov	r1, r5
 800eeca:	f7ff ff85 	bl	800edd8 <_malloc_r>
 800eece:	4606      	mov	r6, r0
 800eed0:	b950      	cbnz	r0, 800eee8 <__ssputs_r+0x5c>
 800eed2:	230c      	movs	r3, #12
 800eed4:	f8ca 3000 	str.w	r3, [sl]
 800eed8:	89a3      	ldrh	r3, [r4, #12]
 800eeda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eede:	81a3      	strh	r3, [r4, #12]
 800eee0:	f04f 30ff 	mov.w	r0, #4294967295
 800eee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee8:	463a      	mov	r2, r7
 800eeea:	6921      	ldr	r1, [r4, #16]
 800eeec:	f7fc f947 	bl	800b17e <memcpy>
 800eef0:	89a3      	ldrh	r3, [r4, #12]
 800eef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eefa:	81a3      	strh	r3, [r4, #12]
 800eefc:	6126      	str	r6, [r4, #16]
 800eefe:	6165      	str	r5, [r4, #20]
 800ef00:	443e      	add	r6, r7
 800ef02:	1bed      	subs	r5, r5, r7
 800ef04:	6026      	str	r6, [r4, #0]
 800ef06:	60a5      	str	r5, [r4, #8]
 800ef08:	464e      	mov	r6, r9
 800ef0a:	454e      	cmp	r6, r9
 800ef0c:	d900      	bls.n	800ef10 <__ssputs_r+0x84>
 800ef0e:	464e      	mov	r6, r9
 800ef10:	4632      	mov	r2, r6
 800ef12:	4641      	mov	r1, r8
 800ef14:	6820      	ldr	r0, [r4, #0]
 800ef16:	f000 fb07 	bl	800f528 <memmove>
 800ef1a:	68a3      	ldr	r3, [r4, #8]
 800ef1c:	1b9b      	subs	r3, r3, r6
 800ef1e:	60a3      	str	r3, [r4, #8]
 800ef20:	6823      	ldr	r3, [r4, #0]
 800ef22:	441e      	add	r6, r3
 800ef24:	6026      	str	r6, [r4, #0]
 800ef26:	2000      	movs	r0, #0
 800ef28:	e7dc      	b.n	800eee4 <__ssputs_r+0x58>
 800ef2a:	462a      	mov	r2, r5
 800ef2c:	f000 fb17 	bl	800f55e <_realloc_r>
 800ef30:	4606      	mov	r6, r0
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d1e2      	bne.n	800eefc <__ssputs_r+0x70>
 800ef36:	6921      	ldr	r1, [r4, #16]
 800ef38:	4650      	mov	r0, sl
 800ef3a:	f7ff feff 	bl	800ed3c <_free_r>
 800ef3e:	e7c8      	b.n	800eed2 <__ssputs_r+0x46>

0800ef40 <_svfiprintf_r>:
 800ef40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef44:	461d      	mov	r5, r3
 800ef46:	898b      	ldrh	r3, [r1, #12]
 800ef48:	061f      	lsls	r7, r3, #24
 800ef4a:	b09d      	sub	sp, #116	; 0x74
 800ef4c:	4680      	mov	r8, r0
 800ef4e:	460c      	mov	r4, r1
 800ef50:	4616      	mov	r6, r2
 800ef52:	d50f      	bpl.n	800ef74 <_svfiprintf_r+0x34>
 800ef54:	690b      	ldr	r3, [r1, #16]
 800ef56:	b96b      	cbnz	r3, 800ef74 <_svfiprintf_r+0x34>
 800ef58:	2140      	movs	r1, #64	; 0x40
 800ef5a:	f7ff ff3d 	bl	800edd8 <_malloc_r>
 800ef5e:	6020      	str	r0, [r4, #0]
 800ef60:	6120      	str	r0, [r4, #16]
 800ef62:	b928      	cbnz	r0, 800ef70 <_svfiprintf_r+0x30>
 800ef64:	230c      	movs	r3, #12
 800ef66:	f8c8 3000 	str.w	r3, [r8]
 800ef6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef6e:	e0c8      	b.n	800f102 <_svfiprintf_r+0x1c2>
 800ef70:	2340      	movs	r3, #64	; 0x40
 800ef72:	6163      	str	r3, [r4, #20]
 800ef74:	2300      	movs	r3, #0
 800ef76:	9309      	str	r3, [sp, #36]	; 0x24
 800ef78:	2320      	movs	r3, #32
 800ef7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef7e:	2330      	movs	r3, #48	; 0x30
 800ef80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef84:	9503      	str	r5, [sp, #12]
 800ef86:	f04f 0b01 	mov.w	fp, #1
 800ef8a:	4637      	mov	r7, r6
 800ef8c:	463d      	mov	r5, r7
 800ef8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ef92:	b10b      	cbz	r3, 800ef98 <_svfiprintf_r+0x58>
 800ef94:	2b25      	cmp	r3, #37	; 0x25
 800ef96:	d13e      	bne.n	800f016 <_svfiprintf_r+0xd6>
 800ef98:	ebb7 0a06 	subs.w	sl, r7, r6
 800ef9c:	d00b      	beq.n	800efb6 <_svfiprintf_r+0x76>
 800ef9e:	4653      	mov	r3, sl
 800efa0:	4632      	mov	r2, r6
 800efa2:	4621      	mov	r1, r4
 800efa4:	4640      	mov	r0, r8
 800efa6:	f7ff ff71 	bl	800ee8c <__ssputs_r>
 800efaa:	3001      	adds	r0, #1
 800efac:	f000 80a4 	beq.w	800f0f8 <_svfiprintf_r+0x1b8>
 800efb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb2:	4453      	add	r3, sl
 800efb4:	9309      	str	r3, [sp, #36]	; 0x24
 800efb6:	783b      	ldrb	r3, [r7, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 809d 	beq.w	800f0f8 <_svfiprintf_r+0x1b8>
 800efbe:	2300      	movs	r3, #0
 800efc0:	f04f 32ff 	mov.w	r2, #4294967295
 800efc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efc8:	9304      	str	r3, [sp, #16]
 800efca:	9307      	str	r3, [sp, #28]
 800efcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efd0:	931a      	str	r3, [sp, #104]	; 0x68
 800efd2:	462f      	mov	r7, r5
 800efd4:	2205      	movs	r2, #5
 800efd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800efda:	4850      	ldr	r0, [pc, #320]	; (800f11c <_svfiprintf_r+0x1dc>)
 800efdc:	f7f1 f908 	bl	80001f0 <memchr>
 800efe0:	9b04      	ldr	r3, [sp, #16]
 800efe2:	b9d0      	cbnz	r0, 800f01a <_svfiprintf_r+0xda>
 800efe4:	06d9      	lsls	r1, r3, #27
 800efe6:	bf44      	itt	mi
 800efe8:	2220      	movmi	r2, #32
 800efea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800efee:	071a      	lsls	r2, r3, #28
 800eff0:	bf44      	itt	mi
 800eff2:	222b      	movmi	r2, #43	; 0x2b
 800eff4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eff8:	782a      	ldrb	r2, [r5, #0]
 800effa:	2a2a      	cmp	r2, #42	; 0x2a
 800effc:	d015      	beq.n	800f02a <_svfiprintf_r+0xea>
 800effe:	9a07      	ldr	r2, [sp, #28]
 800f000:	462f      	mov	r7, r5
 800f002:	2000      	movs	r0, #0
 800f004:	250a      	movs	r5, #10
 800f006:	4639      	mov	r1, r7
 800f008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f00c:	3b30      	subs	r3, #48	; 0x30
 800f00e:	2b09      	cmp	r3, #9
 800f010:	d94d      	bls.n	800f0ae <_svfiprintf_r+0x16e>
 800f012:	b1b8      	cbz	r0, 800f044 <_svfiprintf_r+0x104>
 800f014:	e00f      	b.n	800f036 <_svfiprintf_r+0xf6>
 800f016:	462f      	mov	r7, r5
 800f018:	e7b8      	b.n	800ef8c <_svfiprintf_r+0x4c>
 800f01a:	4a40      	ldr	r2, [pc, #256]	; (800f11c <_svfiprintf_r+0x1dc>)
 800f01c:	1a80      	subs	r0, r0, r2
 800f01e:	fa0b f000 	lsl.w	r0, fp, r0
 800f022:	4318      	orrs	r0, r3
 800f024:	9004      	str	r0, [sp, #16]
 800f026:	463d      	mov	r5, r7
 800f028:	e7d3      	b.n	800efd2 <_svfiprintf_r+0x92>
 800f02a:	9a03      	ldr	r2, [sp, #12]
 800f02c:	1d11      	adds	r1, r2, #4
 800f02e:	6812      	ldr	r2, [r2, #0]
 800f030:	9103      	str	r1, [sp, #12]
 800f032:	2a00      	cmp	r2, #0
 800f034:	db01      	blt.n	800f03a <_svfiprintf_r+0xfa>
 800f036:	9207      	str	r2, [sp, #28]
 800f038:	e004      	b.n	800f044 <_svfiprintf_r+0x104>
 800f03a:	4252      	negs	r2, r2
 800f03c:	f043 0302 	orr.w	r3, r3, #2
 800f040:	9207      	str	r2, [sp, #28]
 800f042:	9304      	str	r3, [sp, #16]
 800f044:	783b      	ldrb	r3, [r7, #0]
 800f046:	2b2e      	cmp	r3, #46	; 0x2e
 800f048:	d10c      	bne.n	800f064 <_svfiprintf_r+0x124>
 800f04a:	787b      	ldrb	r3, [r7, #1]
 800f04c:	2b2a      	cmp	r3, #42	; 0x2a
 800f04e:	d133      	bne.n	800f0b8 <_svfiprintf_r+0x178>
 800f050:	9b03      	ldr	r3, [sp, #12]
 800f052:	1d1a      	adds	r2, r3, #4
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	9203      	str	r2, [sp, #12]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	bfb8      	it	lt
 800f05c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f060:	3702      	adds	r7, #2
 800f062:	9305      	str	r3, [sp, #20]
 800f064:	4d2e      	ldr	r5, [pc, #184]	; (800f120 <_svfiprintf_r+0x1e0>)
 800f066:	7839      	ldrb	r1, [r7, #0]
 800f068:	2203      	movs	r2, #3
 800f06a:	4628      	mov	r0, r5
 800f06c:	f7f1 f8c0 	bl	80001f0 <memchr>
 800f070:	b138      	cbz	r0, 800f082 <_svfiprintf_r+0x142>
 800f072:	2340      	movs	r3, #64	; 0x40
 800f074:	1b40      	subs	r0, r0, r5
 800f076:	fa03 f000 	lsl.w	r0, r3, r0
 800f07a:	9b04      	ldr	r3, [sp, #16]
 800f07c:	4303      	orrs	r3, r0
 800f07e:	3701      	adds	r7, #1
 800f080:	9304      	str	r3, [sp, #16]
 800f082:	7839      	ldrb	r1, [r7, #0]
 800f084:	4827      	ldr	r0, [pc, #156]	; (800f124 <_svfiprintf_r+0x1e4>)
 800f086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f08a:	2206      	movs	r2, #6
 800f08c:	1c7e      	adds	r6, r7, #1
 800f08e:	f7f1 f8af 	bl	80001f0 <memchr>
 800f092:	2800      	cmp	r0, #0
 800f094:	d038      	beq.n	800f108 <_svfiprintf_r+0x1c8>
 800f096:	4b24      	ldr	r3, [pc, #144]	; (800f128 <_svfiprintf_r+0x1e8>)
 800f098:	bb13      	cbnz	r3, 800f0e0 <_svfiprintf_r+0x1a0>
 800f09a:	9b03      	ldr	r3, [sp, #12]
 800f09c:	3307      	adds	r3, #7
 800f09e:	f023 0307 	bic.w	r3, r3, #7
 800f0a2:	3308      	adds	r3, #8
 800f0a4:	9303      	str	r3, [sp, #12]
 800f0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0a8:	444b      	add	r3, r9
 800f0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f0ac:	e76d      	b.n	800ef8a <_svfiprintf_r+0x4a>
 800f0ae:	fb05 3202 	mla	r2, r5, r2, r3
 800f0b2:	2001      	movs	r0, #1
 800f0b4:	460f      	mov	r7, r1
 800f0b6:	e7a6      	b.n	800f006 <_svfiprintf_r+0xc6>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	3701      	adds	r7, #1
 800f0bc:	9305      	str	r3, [sp, #20]
 800f0be:	4619      	mov	r1, r3
 800f0c0:	250a      	movs	r5, #10
 800f0c2:	4638      	mov	r0, r7
 800f0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0c8:	3a30      	subs	r2, #48	; 0x30
 800f0ca:	2a09      	cmp	r2, #9
 800f0cc:	d903      	bls.n	800f0d6 <_svfiprintf_r+0x196>
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d0c8      	beq.n	800f064 <_svfiprintf_r+0x124>
 800f0d2:	9105      	str	r1, [sp, #20]
 800f0d4:	e7c6      	b.n	800f064 <_svfiprintf_r+0x124>
 800f0d6:	fb05 2101 	mla	r1, r5, r1, r2
 800f0da:	2301      	movs	r3, #1
 800f0dc:	4607      	mov	r7, r0
 800f0de:	e7f0      	b.n	800f0c2 <_svfiprintf_r+0x182>
 800f0e0:	ab03      	add	r3, sp, #12
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	4622      	mov	r2, r4
 800f0e6:	4b11      	ldr	r3, [pc, #68]	; (800f12c <_svfiprintf_r+0x1ec>)
 800f0e8:	a904      	add	r1, sp, #16
 800f0ea:	4640      	mov	r0, r8
 800f0ec:	f7fc f8ee 	bl	800b2cc <_printf_float>
 800f0f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f0f4:	4681      	mov	r9, r0
 800f0f6:	d1d6      	bne.n	800f0a6 <_svfiprintf_r+0x166>
 800f0f8:	89a3      	ldrh	r3, [r4, #12]
 800f0fa:	065b      	lsls	r3, r3, #25
 800f0fc:	f53f af35 	bmi.w	800ef6a <_svfiprintf_r+0x2a>
 800f100:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f102:	b01d      	add	sp, #116	; 0x74
 800f104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f108:	ab03      	add	r3, sp, #12
 800f10a:	9300      	str	r3, [sp, #0]
 800f10c:	4622      	mov	r2, r4
 800f10e:	4b07      	ldr	r3, [pc, #28]	; (800f12c <_svfiprintf_r+0x1ec>)
 800f110:	a904      	add	r1, sp, #16
 800f112:	4640      	mov	r0, r8
 800f114:	f7fc fb90 	bl	800b838 <_printf_i>
 800f118:	e7ea      	b.n	800f0f0 <_svfiprintf_r+0x1b0>
 800f11a:	bf00      	nop
 800f11c:	0801012c 	.word	0x0801012c
 800f120:	08010132 	.word	0x08010132
 800f124:	08010136 	.word	0x08010136
 800f128:	0800b2cd 	.word	0x0800b2cd
 800f12c:	0800ee8d 	.word	0x0800ee8d

0800f130 <__sfputc_r>:
 800f130:	6893      	ldr	r3, [r2, #8]
 800f132:	3b01      	subs	r3, #1
 800f134:	2b00      	cmp	r3, #0
 800f136:	b410      	push	{r4}
 800f138:	6093      	str	r3, [r2, #8]
 800f13a:	da08      	bge.n	800f14e <__sfputc_r+0x1e>
 800f13c:	6994      	ldr	r4, [r2, #24]
 800f13e:	42a3      	cmp	r3, r4
 800f140:	db01      	blt.n	800f146 <__sfputc_r+0x16>
 800f142:	290a      	cmp	r1, #10
 800f144:	d103      	bne.n	800f14e <__sfputc_r+0x1e>
 800f146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f14a:	f7fd bdbb 	b.w	800ccc4 <__swbuf_r>
 800f14e:	6813      	ldr	r3, [r2, #0]
 800f150:	1c58      	adds	r0, r3, #1
 800f152:	6010      	str	r0, [r2, #0]
 800f154:	7019      	strb	r1, [r3, #0]
 800f156:	4608      	mov	r0, r1
 800f158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f15c:	4770      	bx	lr

0800f15e <__sfputs_r>:
 800f15e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f160:	4606      	mov	r6, r0
 800f162:	460f      	mov	r7, r1
 800f164:	4614      	mov	r4, r2
 800f166:	18d5      	adds	r5, r2, r3
 800f168:	42ac      	cmp	r4, r5
 800f16a:	d101      	bne.n	800f170 <__sfputs_r+0x12>
 800f16c:	2000      	movs	r0, #0
 800f16e:	e007      	b.n	800f180 <__sfputs_r+0x22>
 800f170:	463a      	mov	r2, r7
 800f172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f176:	4630      	mov	r0, r6
 800f178:	f7ff ffda 	bl	800f130 <__sfputc_r>
 800f17c:	1c43      	adds	r3, r0, #1
 800f17e:	d1f3      	bne.n	800f168 <__sfputs_r+0xa>
 800f180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f184 <_vfiprintf_r>:
 800f184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f188:	460c      	mov	r4, r1
 800f18a:	b09d      	sub	sp, #116	; 0x74
 800f18c:	4617      	mov	r7, r2
 800f18e:	461d      	mov	r5, r3
 800f190:	4606      	mov	r6, r0
 800f192:	b118      	cbz	r0, 800f19c <_vfiprintf_r+0x18>
 800f194:	6983      	ldr	r3, [r0, #24]
 800f196:	b90b      	cbnz	r3, 800f19c <_vfiprintf_r+0x18>
 800f198:	f7fe fd96 	bl	800dcc8 <__sinit>
 800f19c:	4b7c      	ldr	r3, [pc, #496]	; (800f390 <_vfiprintf_r+0x20c>)
 800f19e:	429c      	cmp	r4, r3
 800f1a0:	d158      	bne.n	800f254 <_vfiprintf_r+0xd0>
 800f1a2:	6874      	ldr	r4, [r6, #4]
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	0718      	lsls	r0, r3, #28
 800f1a8:	d55e      	bpl.n	800f268 <_vfiprintf_r+0xe4>
 800f1aa:	6923      	ldr	r3, [r4, #16]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d05b      	beq.n	800f268 <_vfiprintf_r+0xe4>
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800f1b4:	2320      	movs	r3, #32
 800f1b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1ba:	2330      	movs	r3, #48	; 0x30
 800f1bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1c0:	9503      	str	r5, [sp, #12]
 800f1c2:	f04f 0b01 	mov.w	fp, #1
 800f1c6:	46b8      	mov	r8, r7
 800f1c8:	4645      	mov	r5, r8
 800f1ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f1ce:	b10b      	cbz	r3, 800f1d4 <_vfiprintf_r+0x50>
 800f1d0:	2b25      	cmp	r3, #37	; 0x25
 800f1d2:	d154      	bne.n	800f27e <_vfiprintf_r+0xfa>
 800f1d4:	ebb8 0a07 	subs.w	sl, r8, r7
 800f1d8:	d00b      	beq.n	800f1f2 <_vfiprintf_r+0x6e>
 800f1da:	4653      	mov	r3, sl
 800f1dc:	463a      	mov	r2, r7
 800f1de:	4621      	mov	r1, r4
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f7ff ffbc 	bl	800f15e <__sfputs_r>
 800f1e6:	3001      	adds	r0, #1
 800f1e8:	f000 80c2 	beq.w	800f370 <_vfiprintf_r+0x1ec>
 800f1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ee:	4453      	add	r3, sl
 800f1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1f2:	f898 3000 	ldrb.w	r3, [r8]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	f000 80ba 	beq.w	800f370 <_vfiprintf_r+0x1ec>
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f206:	9304      	str	r3, [sp, #16]
 800f208:	9307      	str	r3, [sp, #28]
 800f20a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f20e:	931a      	str	r3, [sp, #104]	; 0x68
 800f210:	46a8      	mov	r8, r5
 800f212:	2205      	movs	r2, #5
 800f214:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f218:	485e      	ldr	r0, [pc, #376]	; (800f394 <_vfiprintf_r+0x210>)
 800f21a:	f7f0 ffe9 	bl	80001f0 <memchr>
 800f21e:	9b04      	ldr	r3, [sp, #16]
 800f220:	bb78      	cbnz	r0, 800f282 <_vfiprintf_r+0xfe>
 800f222:	06d9      	lsls	r1, r3, #27
 800f224:	bf44      	itt	mi
 800f226:	2220      	movmi	r2, #32
 800f228:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f22c:	071a      	lsls	r2, r3, #28
 800f22e:	bf44      	itt	mi
 800f230:	222b      	movmi	r2, #43	; 0x2b
 800f232:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f236:	782a      	ldrb	r2, [r5, #0]
 800f238:	2a2a      	cmp	r2, #42	; 0x2a
 800f23a:	d02a      	beq.n	800f292 <_vfiprintf_r+0x10e>
 800f23c:	9a07      	ldr	r2, [sp, #28]
 800f23e:	46a8      	mov	r8, r5
 800f240:	2000      	movs	r0, #0
 800f242:	250a      	movs	r5, #10
 800f244:	4641      	mov	r1, r8
 800f246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f24a:	3b30      	subs	r3, #48	; 0x30
 800f24c:	2b09      	cmp	r3, #9
 800f24e:	d969      	bls.n	800f324 <_vfiprintf_r+0x1a0>
 800f250:	b360      	cbz	r0, 800f2ac <_vfiprintf_r+0x128>
 800f252:	e024      	b.n	800f29e <_vfiprintf_r+0x11a>
 800f254:	4b50      	ldr	r3, [pc, #320]	; (800f398 <_vfiprintf_r+0x214>)
 800f256:	429c      	cmp	r4, r3
 800f258:	d101      	bne.n	800f25e <_vfiprintf_r+0xda>
 800f25a:	68b4      	ldr	r4, [r6, #8]
 800f25c:	e7a2      	b.n	800f1a4 <_vfiprintf_r+0x20>
 800f25e:	4b4f      	ldr	r3, [pc, #316]	; (800f39c <_vfiprintf_r+0x218>)
 800f260:	429c      	cmp	r4, r3
 800f262:	bf08      	it	eq
 800f264:	68f4      	ldreq	r4, [r6, #12]
 800f266:	e79d      	b.n	800f1a4 <_vfiprintf_r+0x20>
 800f268:	4621      	mov	r1, r4
 800f26a:	4630      	mov	r0, r6
 800f26c:	f7fd fd8a 	bl	800cd84 <__swsetup_r>
 800f270:	2800      	cmp	r0, #0
 800f272:	d09d      	beq.n	800f1b0 <_vfiprintf_r+0x2c>
 800f274:	f04f 30ff 	mov.w	r0, #4294967295
 800f278:	b01d      	add	sp, #116	; 0x74
 800f27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27e:	46a8      	mov	r8, r5
 800f280:	e7a2      	b.n	800f1c8 <_vfiprintf_r+0x44>
 800f282:	4a44      	ldr	r2, [pc, #272]	; (800f394 <_vfiprintf_r+0x210>)
 800f284:	1a80      	subs	r0, r0, r2
 800f286:	fa0b f000 	lsl.w	r0, fp, r0
 800f28a:	4318      	orrs	r0, r3
 800f28c:	9004      	str	r0, [sp, #16]
 800f28e:	4645      	mov	r5, r8
 800f290:	e7be      	b.n	800f210 <_vfiprintf_r+0x8c>
 800f292:	9a03      	ldr	r2, [sp, #12]
 800f294:	1d11      	adds	r1, r2, #4
 800f296:	6812      	ldr	r2, [r2, #0]
 800f298:	9103      	str	r1, [sp, #12]
 800f29a:	2a00      	cmp	r2, #0
 800f29c:	db01      	blt.n	800f2a2 <_vfiprintf_r+0x11e>
 800f29e:	9207      	str	r2, [sp, #28]
 800f2a0:	e004      	b.n	800f2ac <_vfiprintf_r+0x128>
 800f2a2:	4252      	negs	r2, r2
 800f2a4:	f043 0302 	orr.w	r3, r3, #2
 800f2a8:	9207      	str	r2, [sp, #28]
 800f2aa:	9304      	str	r3, [sp, #16]
 800f2ac:	f898 3000 	ldrb.w	r3, [r8]
 800f2b0:	2b2e      	cmp	r3, #46	; 0x2e
 800f2b2:	d10e      	bne.n	800f2d2 <_vfiprintf_r+0x14e>
 800f2b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f2b8:	2b2a      	cmp	r3, #42	; 0x2a
 800f2ba:	d138      	bne.n	800f32e <_vfiprintf_r+0x1aa>
 800f2bc:	9b03      	ldr	r3, [sp, #12]
 800f2be:	1d1a      	adds	r2, r3, #4
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	9203      	str	r2, [sp, #12]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	bfb8      	it	lt
 800f2c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2cc:	f108 0802 	add.w	r8, r8, #2
 800f2d0:	9305      	str	r3, [sp, #20]
 800f2d2:	4d33      	ldr	r5, [pc, #204]	; (800f3a0 <_vfiprintf_r+0x21c>)
 800f2d4:	f898 1000 	ldrb.w	r1, [r8]
 800f2d8:	2203      	movs	r2, #3
 800f2da:	4628      	mov	r0, r5
 800f2dc:	f7f0 ff88 	bl	80001f0 <memchr>
 800f2e0:	b140      	cbz	r0, 800f2f4 <_vfiprintf_r+0x170>
 800f2e2:	2340      	movs	r3, #64	; 0x40
 800f2e4:	1b40      	subs	r0, r0, r5
 800f2e6:	fa03 f000 	lsl.w	r0, r3, r0
 800f2ea:	9b04      	ldr	r3, [sp, #16]
 800f2ec:	4303      	orrs	r3, r0
 800f2ee:	f108 0801 	add.w	r8, r8, #1
 800f2f2:	9304      	str	r3, [sp, #16]
 800f2f4:	f898 1000 	ldrb.w	r1, [r8]
 800f2f8:	482a      	ldr	r0, [pc, #168]	; (800f3a4 <_vfiprintf_r+0x220>)
 800f2fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2fe:	2206      	movs	r2, #6
 800f300:	f108 0701 	add.w	r7, r8, #1
 800f304:	f7f0 ff74 	bl	80001f0 <memchr>
 800f308:	2800      	cmp	r0, #0
 800f30a:	d037      	beq.n	800f37c <_vfiprintf_r+0x1f8>
 800f30c:	4b26      	ldr	r3, [pc, #152]	; (800f3a8 <_vfiprintf_r+0x224>)
 800f30e:	bb1b      	cbnz	r3, 800f358 <_vfiprintf_r+0x1d4>
 800f310:	9b03      	ldr	r3, [sp, #12]
 800f312:	3307      	adds	r3, #7
 800f314:	f023 0307 	bic.w	r3, r3, #7
 800f318:	3308      	adds	r3, #8
 800f31a:	9303      	str	r3, [sp, #12]
 800f31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f31e:	444b      	add	r3, r9
 800f320:	9309      	str	r3, [sp, #36]	; 0x24
 800f322:	e750      	b.n	800f1c6 <_vfiprintf_r+0x42>
 800f324:	fb05 3202 	mla	r2, r5, r2, r3
 800f328:	2001      	movs	r0, #1
 800f32a:	4688      	mov	r8, r1
 800f32c:	e78a      	b.n	800f244 <_vfiprintf_r+0xc0>
 800f32e:	2300      	movs	r3, #0
 800f330:	f108 0801 	add.w	r8, r8, #1
 800f334:	9305      	str	r3, [sp, #20]
 800f336:	4619      	mov	r1, r3
 800f338:	250a      	movs	r5, #10
 800f33a:	4640      	mov	r0, r8
 800f33c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f340:	3a30      	subs	r2, #48	; 0x30
 800f342:	2a09      	cmp	r2, #9
 800f344:	d903      	bls.n	800f34e <_vfiprintf_r+0x1ca>
 800f346:	2b00      	cmp	r3, #0
 800f348:	d0c3      	beq.n	800f2d2 <_vfiprintf_r+0x14e>
 800f34a:	9105      	str	r1, [sp, #20]
 800f34c:	e7c1      	b.n	800f2d2 <_vfiprintf_r+0x14e>
 800f34e:	fb05 2101 	mla	r1, r5, r1, r2
 800f352:	2301      	movs	r3, #1
 800f354:	4680      	mov	r8, r0
 800f356:	e7f0      	b.n	800f33a <_vfiprintf_r+0x1b6>
 800f358:	ab03      	add	r3, sp, #12
 800f35a:	9300      	str	r3, [sp, #0]
 800f35c:	4622      	mov	r2, r4
 800f35e:	4b13      	ldr	r3, [pc, #76]	; (800f3ac <_vfiprintf_r+0x228>)
 800f360:	a904      	add	r1, sp, #16
 800f362:	4630      	mov	r0, r6
 800f364:	f7fb ffb2 	bl	800b2cc <_printf_float>
 800f368:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f36c:	4681      	mov	r9, r0
 800f36e:	d1d5      	bne.n	800f31c <_vfiprintf_r+0x198>
 800f370:	89a3      	ldrh	r3, [r4, #12]
 800f372:	065b      	lsls	r3, r3, #25
 800f374:	f53f af7e 	bmi.w	800f274 <_vfiprintf_r+0xf0>
 800f378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f37a:	e77d      	b.n	800f278 <_vfiprintf_r+0xf4>
 800f37c:	ab03      	add	r3, sp, #12
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	4622      	mov	r2, r4
 800f382:	4b0a      	ldr	r3, [pc, #40]	; (800f3ac <_vfiprintf_r+0x228>)
 800f384:	a904      	add	r1, sp, #16
 800f386:	4630      	mov	r0, r6
 800f388:	f7fc fa56 	bl	800b838 <_printf_i>
 800f38c:	e7ec      	b.n	800f368 <_vfiprintf_r+0x1e4>
 800f38e:	bf00      	nop
 800f390:	0800fff0 	.word	0x0800fff0
 800f394:	0801012c 	.word	0x0801012c
 800f398:	08010010 	.word	0x08010010
 800f39c:	0800ffd0 	.word	0x0800ffd0
 800f3a0:	08010132 	.word	0x08010132
 800f3a4:	08010136 	.word	0x08010136
 800f3a8:	0800b2cd 	.word	0x0800b2cd
 800f3ac:	0800f15f 	.word	0x0800f15f

0800f3b0 <_sbrk_r>:
 800f3b0:	b538      	push	{r3, r4, r5, lr}
 800f3b2:	4c06      	ldr	r4, [pc, #24]	; (800f3cc <_sbrk_r+0x1c>)
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	4605      	mov	r5, r0
 800f3b8:	4608      	mov	r0, r1
 800f3ba:	6023      	str	r3, [r4, #0]
 800f3bc:	f7f9 fc84 	bl	8008cc8 <_sbrk>
 800f3c0:	1c43      	adds	r3, r0, #1
 800f3c2:	d102      	bne.n	800f3ca <_sbrk_r+0x1a>
 800f3c4:	6823      	ldr	r3, [r4, #0]
 800f3c6:	b103      	cbz	r3, 800f3ca <_sbrk_r+0x1a>
 800f3c8:	602b      	str	r3, [r5, #0]
 800f3ca:	bd38      	pop	{r3, r4, r5, pc}
 800f3cc:	2000667c 	.word	0x2000667c

0800f3d0 <__sread>:
 800f3d0:	b510      	push	{r4, lr}
 800f3d2:	460c      	mov	r4, r1
 800f3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3d8:	f000 f8e8 	bl	800f5ac <_read_r>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	bfab      	itete	ge
 800f3e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3e2:	89a3      	ldrhlt	r3, [r4, #12]
 800f3e4:	181b      	addge	r3, r3, r0
 800f3e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3ea:	bfac      	ite	ge
 800f3ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3ee:	81a3      	strhlt	r3, [r4, #12]
 800f3f0:	bd10      	pop	{r4, pc}

0800f3f2 <__swrite>:
 800f3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f6:	461f      	mov	r7, r3
 800f3f8:	898b      	ldrh	r3, [r1, #12]
 800f3fa:	05db      	lsls	r3, r3, #23
 800f3fc:	4605      	mov	r5, r0
 800f3fe:	460c      	mov	r4, r1
 800f400:	4616      	mov	r6, r2
 800f402:	d505      	bpl.n	800f410 <__swrite+0x1e>
 800f404:	2302      	movs	r3, #2
 800f406:	2200      	movs	r2, #0
 800f408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f40c:	f000 f87a 	bl	800f504 <_lseek_r>
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f41a:	81a3      	strh	r3, [r4, #12]
 800f41c:	4632      	mov	r2, r6
 800f41e:	463b      	mov	r3, r7
 800f420:	4628      	mov	r0, r5
 800f422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f426:	f000 b829 	b.w	800f47c <_write_r>

0800f42a <__sseek>:
 800f42a:	b510      	push	{r4, lr}
 800f42c:	460c      	mov	r4, r1
 800f42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f432:	f000 f867 	bl	800f504 <_lseek_r>
 800f436:	1c43      	adds	r3, r0, #1
 800f438:	89a3      	ldrh	r3, [r4, #12]
 800f43a:	bf15      	itete	ne
 800f43c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f43e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f446:	81a3      	strheq	r3, [r4, #12]
 800f448:	bf18      	it	ne
 800f44a:	81a3      	strhne	r3, [r4, #12]
 800f44c:	bd10      	pop	{r4, pc}

0800f44e <__sclose>:
 800f44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f452:	f000 b825 	b.w	800f4a0 <_close_r>

0800f456 <strncmp>:
 800f456:	b510      	push	{r4, lr}
 800f458:	b16a      	cbz	r2, 800f476 <strncmp+0x20>
 800f45a:	3901      	subs	r1, #1
 800f45c:	1884      	adds	r4, r0, r2
 800f45e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f462:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f466:	4293      	cmp	r3, r2
 800f468:	d103      	bne.n	800f472 <strncmp+0x1c>
 800f46a:	42a0      	cmp	r0, r4
 800f46c:	d001      	beq.n	800f472 <strncmp+0x1c>
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d1f5      	bne.n	800f45e <strncmp+0x8>
 800f472:	1a98      	subs	r0, r3, r2
 800f474:	bd10      	pop	{r4, pc}
 800f476:	4610      	mov	r0, r2
 800f478:	e7fc      	b.n	800f474 <strncmp+0x1e>
	...

0800f47c <_write_r>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	4c07      	ldr	r4, [pc, #28]	; (800f49c <_write_r+0x20>)
 800f480:	4605      	mov	r5, r0
 800f482:	4608      	mov	r0, r1
 800f484:	4611      	mov	r1, r2
 800f486:	2200      	movs	r2, #0
 800f488:	6022      	str	r2, [r4, #0]
 800f48a:	461a      	mov	r2, r3
 800f48c:	f7f9 fc02 	bl	8008c94 <_write>
 800f490:	1c43      	adds	r3, r0, #1
 800f492:	d102      	bne.n	800f49a <_write_r+0x1e>
 800f494:	6823      	ldr	r3, [r4, #0]
 800f496:	b103      	cbz	r3, 800f49a <_write_r+0x1e>
 800f498:	602b      	str	r3, [r5, #0]
 800f49a:	bd38      	pop	{r3, r4, r5, pc}
 800f49c:	2000667c 	.word	0x2000667c

0800f4a0 <_close_r>:
 800f4a0:	b538      	push	{r3, r4, r5, lr}
 800f4a2:	4c06      	ldr	r4, [pc, #24]	; (800f4bc <_close_r+0x1c>)
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	4605      	mov	r5, r0
 800f4a8:	4608      	mov	r0, r1
 800f4aa:	6023      	str	r3, [r4, #0]
 800f4ac:	f7f9 fc00 	bl	8008cb0 <_close>
 800f4b0:	1c43      	adds	r3, r0, #1
 800f4b2:	d102      	bne.n	800f4ba <_close_r+0x1a>
 800f4b4:	6823      	ldr	r3, [r4, #0]
 800f4b6:	b103      	cbz	r3, 800f4ba <_close_r+0x1a>
 800f4b8:	602b      	str	r3, [r5, #0]
 800f4ba:	bd38      	pop	{r3, r4, r5, pc}
 800f4bc:	2000667c 	.word	0x2000667c

0800f4c0 <_fstat_r>:
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	4c07      	ldr	r4, [pc, #28]	; (800f4e0 <_fstat_r+0x20>)
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	4608      	mov	r0, r1
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	6023      	str	r3, [r4, #0]
 800f4ce:	f7f9 fbf2 	bl	8008cb6 <_fstat>
 800f4d2:	1c43      	adds	r3, r0, #1
 800f4d4:	d102      	bne.n	800f4dc <_fstat_r+0x1c>
 800f4d6:	6823      	ldr	r3, [r4, #0]
 800f4d8:	b103      	cbz	r3, 800f4dc <_fstat_r+0x1c>
 800f4da:	602b      	str	r3, [r5, #0]
 800f4dc:	bd38      	pop	{r3, r4, r5, pc}
 800f4de:	bf00      	nop
 800f4e0:	2000667c 	.word	0x2000667c

0800f4e4 <_isatty_r>:
 800f4e4:	b538      	push	{r3, r4, r5, lr}
 800f4e6:	4c06      	ldr	r4, [pc, #24]	; (800f500 <_isatty_r+0x1c>)
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	4605      	mov	r5, r0
 800f4ec:	4608      	mov	r0, r1
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	f7f9 fbe6 	bl	8008cc0 <_isatty>
 800f4f4:	1c43      	adds	r3, r0, #1
 800f4f6:	d102      	bne.n	800f4fe <_isatty_r+0x1a>
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	b103      	cbz	r3, 800f4fe <_isatty_r+0x1a>
 800f4fc:	602b      	str	r3, [r5, #0]
 800f4fe:	bd38      	pop	{r3, r4, r5, pc}
 800f500:	2000667c 	.word	0x2000667c

0800f504 <_lseek_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4c07      	ldr	r4, [pc, #28]	; (800f524 <_lseek_r+0x20>)
 800f508:	4605      	mov	r5, r0
 800f50a:	4608      	mov	r0, r1
 800f50c:	4611      	mov	r1, r2
 800f50e:	2200      	movs	r2, #0
 800f510:	6022      	str	r2, [r4, #0]
 800f512:	461a      	mov	r2, r3
 800f514:	f7f9 fbd6 	bl	8008cc4 <_lseek>
 800f518:	1c43      	adds	r3, r0, #1
 800f51a:	d102      	bne.n	800f522 <_lseek_r+0x1e>
 800f51c:	6823      	ldr	r3, [r4, #0]
 800f51e:	b103      	cbz	r3, 800f522 <_lseek_r+0x1e>
 800f520:	602b      	str	r3, [r5, #0]
 800f522:	bd38      	pop	{r3, r4, r5, pc}
 800f524:	2000667c 	.word	0x2000667c

0800f528 <memmove>:
 800f528:	4288      	cmp	r0, r1
 800f52a:	b510      	push	{r4, lr}
 800f52c:	eb01 0302 	add.w	r3, r1, r2
 800f530:	d807      	bhi.n	800f542 <memmove+0x1a>
 800f532:	1e42      	subs	r2, r0, #1
 800f534:	4299      	cmp	r1, r3
 800f536:	d00a      	beq.n	800f54e <memmove+0x26>
 800f538:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f53c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f540:	e7f8      	b.n	800f534 <memmove+0xc>
 800f542:	4283      	cmp	r3, r0
 800f544:	d9f5      	bls.n	800f532 <memmove+0xa>
 800f546:	1881      	adds	r1, r0, r2
 800f548:	1ad2      	subs	r2, r2, r3
 800f54a:	42d3      	cmn	r3, r2
 800f54c:	d100      	bne.n	800f550 <memmove+0x28>
 800f54e:	bd10      	pop	{r4, pc}
 800f550:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f554:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f558:	e7f7      	b.n	800f54a <memmove+0x22>

0800f55a <__malloc_lock>:
 800f55a:	4770      	bx	lr

0800f55c <__malloc_unlock>:
 800f55c:	4770      	bx	lr

0800f55e <_realloc_r>:
 800f55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f560:	4607      	mov	r7, r0
 800f562:	4614      	mov	r4, r2
 800f564:	460e      	mov	r6, r1
 800f566:	b921      	cbnz	r1, 800f572 <_realloc_r+0x14>
 800f568:	4611      	mov	r1, r2
 800f56a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f56e:	f7ff bc33 	b.w	800edd8 <_malloc_r>
 800f572:	b922      	cbnz	r2, 800f57e <_realloc_r+0x20>
 800f574:	f7ff fbe2 	bl	800ed3c <_free_r>
 800f578:	4625      	mov	r5, r4
 800f57a:	4628      	mov	r0, r5
 800f57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f57e:	f000 f827 	bl	800f5d0 <_malloc_usable_size_r>
 800f582:	42a0      	cmp	r0, r4
 800f584:	d20f      	bcs.n	800f5a6 <_realloc_r+0x48>
 800f586:	4621      	mov	r1, r4
 800f588:	4638      	mov	r0, r7
 800f58a:	f7ff fc25 	bl	800edd8 <_malloc_r>
 800f58e:	4605      	mov	r5, r0
 800f590:	2800      	cmp	r0, #0
 800f592:	d0f2      	beq.n	800f57a <_realloc_r+0x1c>
 800f594:	4631      	mov	r1, r6
 800f596:	4622      	mov	r2, r4
 800f598:	f7fb fdf1 	bl	800b17e <memcpy>
 800f59c:	4631      	mov	r1, r6
 800f59e:	4638      	mov	r0, r7
 800f5a0:	f7ff fbcc 	bl	800ed3c <_free_r>
 800f5a4:	e7e9      	b.n	800f57a <_realloc_r+0x1c>
 800f5a6:	4635      	mov	r5, r6
 800f5a8:	e7e7      	b.n	800f57a <_realloc_r+0x1c>
	...

0800f5ac <_read_r>:
 800f5ac:	b538      	push	{r3, r4, r5, lr}
 800f5ae:	4c07      	ldr	r4, [pc, #28]	; (800f5cc <_read_r+0x20>)
 800f5b0:	4605      	mov	r5, r0
 800f5b2:	4608      	mov	r0, r1
 800f5b4:	4611      	mov	r1, r2
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	6022      	str	r2, [r4, #0]
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	f7f9 fb5c 	bl	8008c78 <_read>
 800f5c0:	1c43      	adds	r3, r0, #1
 800f5c2:	d102      	bne.n	800f5ca <_read_r+0x1e>
 800f5c4:	6823      	ldr	r3, [r4, #0]
 800f5c6:	b103      	cbz	r3, 800f5ca <_read_r+0x1e>
 800f5c8:	602b      	str	r3, [r5, #0]
 800f5ca:	bd38      	pop	{r3, r4, r5, pc}
 800f5cc:	2000667c 	.word	0x2000667c

0800f5d0 <_malloc_usable_size_r>:
 800f5d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5d4:	1f18      	subs	r0, r3, #4
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	bfbc      	itt	lt
 800f5da:	580b      	ldrlt	r3, [r1, r0]
 800f5dc:	18c0      	addlt	r0, r0, r3
 800f5de:	4770      	bx	lr

0800f5e0 <_init>:
 800f5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e2:	bf00      	nop
 800f5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5e6:	bc08      	pop	{r3}
 800f5e8:	469e      	mov	lr, r3
 800f5ea:	4770      	bx	lr

0800f5ec <_fini>:
 800f5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ee:	bf00      	nop
 800f5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5f2:	bc08      	pop	{r3}
 800f5f4:	469e      	mov	lr, r3
 800f5f6:	4770      	bx	lr
