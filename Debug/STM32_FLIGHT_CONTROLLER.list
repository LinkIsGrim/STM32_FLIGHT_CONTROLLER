
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009244  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  080093e8  080093e8  000193e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f0  080099f0  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099f8  080099f8  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f8  080099f8  000199f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08009a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000228  08009c28  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08009c28  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145d8  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024cf  00000000  00000000  00034830  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cb3c  00000000  00000000  00036cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f68  00000000  00000000  00043840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ef0  00000000  00000000  000447a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00018055  00000000  00000000  00045698  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000b515  00000000  00000000  0005d6ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00090c3e  00000000  00000000  00068c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000f9840  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dcc  00000000  00000000  000f98bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093cc 	.word	0x080093cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	080093cc 	.word	0x080093cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <get_roll>:
}

float get_roll(){

	return roll;
}
 8000f58:	4b01      	ldr	r3, [pc, #4]	; (8000f60 <get_roll+0x8>)
 8000f5a:	ed93 0a00 	vldr	s0, [r3]
 8000f5e:	4770      	bx	lr
 8000f60:	20000378 	.word	0x20000378

08000f64 <get_pitch>:

float get_pitch(){

	return pitch;
}
 8000f64:	4b01      	ldr	r3, [pc, #4]	; (8000f6c <get_pitch+0x8>)
 8000f66:	ed93 0a00 	vldr	s0, [r3]
 8000f6a:	4770      	bx	lr
 8000f6c:	20000374 	.word	0x20000374

08000f70 <timer_reset>:

//	deltat = 0;
//    lastUpdate = Now;


}
 8000f70:	4770      	bx	lr
	...

08000f74 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f74:	b500      	push	{lr}
 8000f76:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f78:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000f7c:	f88d 200d 	strb.w	r2, [sp, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8000f80:	230a      	movs	r3, #10
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2302      	movs	r3, #2
 8000f86:	aa03      	add	r2, sp, #12
 8000f88:	4601      	mov	r1, r0
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <writeByte+0x24>)
 8000f8c:	f002 f83a 	bl	8003004 <HAL_I2C_Master_Transmit>
}
 8000f90:	b005      	add	sp, #20
 8000f92:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f96:	bf00      	nop
 8000f98:	200002e4 	.word	0x200002e4

08000f9c <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000f9c:	b570      	push	{r4, r5, r6, lr}
 8000f9e:	b084      	sub	sp, #16
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000fa0:	a904      	add	r1, sp, #16
 8000fa2:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000fa6:	4605      	mov	r5, r0
 8000fa8:	4c09      	ldr	r4, [pc, #36]	; (8000fd0 <readByte+0x34>)
 8000faa:	260a      	movs	r6, #10
 8000fac:	9600      	str	r6, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f002 f825 	bl	8003004 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8000fba:	9600      	str	r6, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	aa03      	add	r2, sp, #12
 8000fc0:	4629      	mov	r1, r5
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f002 f8d8 	bl	8003178 <HAL_I2C_Master_Receive>

	return data[0];
}
 8000fc8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000fcc:	b004      	add	sp, #16
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
 8000fd0:	200002e4 	.word	0x200002e4

08000fd4 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	4604      	mov	r4, r0
	printf("STM32 Online..\r\n");
 8000fd8:	480f      	ldr	r0, [pc, #60]	; (8001018 <imu_init+0x44>)
 8000fda:	f004 fda1 	bl	8005b20 <puts>
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f002 fa2f 	bl	8003448 <HAL_I2C_IsDeviceReady>
 8000fea:	b100      	cbz	r0, 8000fee <imu_init+0x1a>
 8000fec:	e7fe      	b.n	8000fec <imu_init+0x18>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8000fee:	2120      	movs	r1, #32
 8000ff0:	480a      	ldr	r0, [pc, #40]	; (800101c <imu_init+0x48>)
 8000ff2:	f001 fd2b 	bl	8002a4c <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8000ff6:	2275      	movs	r2, #117	; 0x75
 8000ff8:	21d1      	movs	r1, #209	; 0xd1
 8000ffa:	20d0      	movs	r0, #208	; 0xd0
 8000ffc:	f7ff ffce 	bl	8000f9c <readByte>
 8001000:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 8001002:	2871      	cmp	r0, #113	; 0x71
 8001004:	d106      	bne.n	8001014 <imu_init+0x40>
		printf("MPU9250 online..\r\n");
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <imu_init+0x4c>)
 8001008:	f004 fd8a 	bl	8005b20 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 800100c:	4621      	mov	r1, r4
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <imu_init+0x50>)
 8001010:	f004 fd12 	bl	8005a38 <iprintf>
}
 8001014:	2000      	movs	r0, #0
 8001016:	bd10      	pop	{r4, pc}
 8001018:	08009644 	.word	0x08009644
 800101c:	40020000 	.word	0x40020000
 8001020:	08009654 	.word	0x08009654
 8001024:	08009668 	.word	0x08009668

08001028 <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 8001028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800102c:	b088      	sub	sp, #32
 800102e:	4688      	mov	r8, r1
 8001030:	461c      	mov	r4, r3
 8001032:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8001034:	a908      	add	r1, sp, #32
 8001036:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800103a:	4e0e      	ldr	r6, [pc, #56]	; (8001074 <readBytes+0x4c>)
 800103c:	270a      	movs	r7, #10
 800103e:	9700      	str	r7, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	460a      	mov	r2, r1
 8001044:	4601      	mov	r1, r0
 8001046:	4630      	mov	r0, r6
 8001048:	f001 ffdc 	bl	8003004 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 800104c:	9700      	str	r7, [sp, #0]
 800104e:	4623      	mov	r3, r4
 8001050:	aa04      	add	r2, sp, #16
 8001052:	4641      	mov	r1, r8
 8001054:	4630      	mov	r0, r6
 8001056:	f002 f88f 	bl	8003178 <HAL_I2C_Master_Receive>

	for (int ii = 0; ii < count; ii++) {
 800105a:	2300      	movs	r3, #0
 800105c:	e005      	b.n	800106a <readBytes+0x42>
		dest[ii] = data[ii];
 800105e:	aa08      	add	r2, sp, #32
 8001060:	441a      	add	r2, r3
 8001062:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001066:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 8001068:	3301      	adds	r3, #1
 800106a:	429c      	cmp	r4, r3
 800106c:	dcf7      	bgt.n	800105e <readBytes+0x36>
	}
}
 800106e:	b008      	add	sp, #32
 8001070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001074:	200002e4 	.word	0x200002e4

08001078 <getMres>:

void getMres() {

	switch (Mscale) {
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <getMres+0x1c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b113      	cbz	r3, 8001084 <getMres+0xc>
 800107e:	2b01      	cmp	r3, #1
 8001080:	d004      	beq.n	800108c <getMres+0x14>
 8001082:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <getMres+0x20>)
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <getMres+0x24>)
 8001088:	601a      	str	r2, [r3, #0]
		break;
 800108a:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <getMres+0x20>)
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <getMres+0x28>)
 8001090:	601a      	str	r2, [r3, #0]
		break;
	}
}
 8001092:	4770      	bx	lr
 8001094:	20000001 	.word	0x20000001
 8001098:	2000037c 	.word	0x2000037c
 800109c:	40a4d84e 	.word	0x40a4d84e
 80010a0:	3fa4d84e 	.word	0x3fa4d84e

080010a4 <getGres>:

void getGres() {
	switch (Gscale) {
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <getGres+0x30>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d812      	bhi.n	80010d2 <getGres+0x2e>
 80010ac:	e8df f003 	tbb	[pc, r3]
 80010b0:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <getGres+0x34>)
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <getGres+0x38>)
 80010b8:	601a      	str	r2, [r3, #0]
		break;
 80010ba:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <getGres+0x34>)
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <getGres+0x3c>)
 80010c0:	601a      	str	r2, [r3, #0]
		break;
 80010c2:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <getGres+0x34>)
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <getGres+0x40>)
 80010c8:	601a      	str	r2, [r3, #0]
		break;
 80010ca:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80010cc:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <getGres+0x34>)
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <getGres+0x44>)
 80010d0:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010d2:	4770      	bx	lr
 80010d4:	20000245 	.word	0x20000245
 80010d8:	20000360 	.word	0x20000360
 80010dc:	3bfa0000 	.word	0x3bfa0000
 80010e0:	3c7a0000 	.word	0x3c7a0000
 80010e4:	3cfa0000 	.word	0x3cfa0000
 80010e8:	3d7a0000 	.word	0x3d7a0000

080010ec <getAres>:

void getAres() {
	switch (Ascale) {
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <getAres+0x38>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d816      	bhi.n	8001122 <getAres+0x36>
 80010f4:	e8df f003 	tbb	[pc, r3]
 80010f8:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <getAres+0x3c>)
 80010fe:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001102:	601a      	str	r2, [r3, #0]
		break;
 8001104:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <getAres+0x3c>)
 8001108:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800110c:	601a      	str	r2, [r3, #0]
		break;
 800110e:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <getAres+0x3c>)
 8001112:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001116:	601a      	str	r2, [r3, #0]
		break;
 8001118:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 800111a:	4b03      	ldr	r3, [pc, #12]	; (8001128 <getAres+0x3c>)
 800111c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001120:	601a      	str	r2, [r3, #0]
		break;
	}
}
 8001122:	4770      	bx	lr
 8001124:	20000244 	.word	0x20000244
 8001128:	20000354 	.word	0x20000354

0800112c <readAccelData>:

void readAccelData(int16_t * destination) {
 800112c:	b510      	push	{r4, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001132:	ab02      	add	r3, sp, #8
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2306      	movs	r3, #6
 8001138:	223b      	movs	r2, #59	; 0x3b
 800113a:	21d1      	movs	r1, #209	; 0xd1
 800113c:	20d0      	movs	r0, #208	; 0xd0
 800113e:	f7ff ff73 	bl	8001028 <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001142:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001146:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800114a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800114e:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001150:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001154:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001158:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800115c:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800115e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001162:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001166:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800116a:	80a3      	strh	r3, [r4, #4]
}
 800116c:	b004      	add	sp, #16
 800116e:	bd10      	pop	{r4, pc}

08001170 <readGyroData>:

void readGyroData(int16_t * destination) {
 8001170:	b510      	push	{r4, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001176:	ab02      	add	r3, sp, #8
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2306      	movs	r3, #6
 800117c:	2243      	movs	r2, #67	; 0x43
 800117e:	21d1      	movs	r1, #209	; 0xd1
 8001180:	20d0      	movs	r0, #208	; 0xd0
 8001182:	f7ff ff51 	bl	8001028 <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001186:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800118a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800118e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001192:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001194:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001198:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800119c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011a0:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011a2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011a6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011ae:	80a3      	strh	r3, [r4, #4]
}
 80011b0:	b004      	add	sp, #16
 80011b2:	bd10      	pop	{r4, pc}

080011b4 <readMagData>:

void readMagData(int16_t * destination) {
 80011b4:	b510      	push	{r4, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 80011ba:	2202      	movs	r2, #2
 80011bc:	2119      	movs	r1, #25
 80011be:	2018      	movs	r0, #24
 80011c0:	f7ff feec 	bl	8000f9c <readByte>
 80011c4:	f010 0f01 	tst.w	r0, #1
 80011c8:	d101      	bne.n	80011ce <readMagData+0x1a>
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
		}
	}
}
 80011ca:	b004      	add	sp, #16
 80011cc:	bd10      	pop	{r4, pc}
		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7,
 80011ce:	ab02      	add	r3, sp, #8
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2307      	movs	r3, #7
 80011d4:	2203      	movs	r2, #3
 80011d6:	2119      	movs	r1, #25
 80011d8:	2018      	movs	r0, #24
 80011da:	f7ff ff25 	bl	8001028 <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 80011de:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 80011e2:	f013 0f08 	tst.w	r3, #8
 80011e6:	d1f0      	bne.n	80011ca <readMagData+0x16>
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 80011e8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80011ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80011f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 80011f4:	8023      	strh	r3, [r4, #0]
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 80011f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80011fa:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80011fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 8001202:	8063      	strh	r3, [r4, #2]
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 8001204:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001208:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800120c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 8001210:	80a3      	strh	r3, [r4, #4]
}
 8001212:	e7da      	b.n	80011ca <readMagData+0x16>

08001214 <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 8001214:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	216b      	movs	r1, #107	; 0x6b
 800121a:	20d0      	movs	r0, #208	; 0xd0
 800121c:	f7ff feaa 	bl	8000f74 <writeByte>
	HAL_Delay(100);
 8001220:	2064      	movs	r0, #100	; 0x64
 8001222:	f001 fabd 	bl	80027a0 <HAL_Delay>
}
 8001226:	bd08      	pop	{r3, pc}

08001228 <initAK8963>:

void initAK8963(float * destination) {
 8001228:	b510      	push	{r4, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 800122e:	2200      	movs	r2, #0
 8001230:	210a      	movs	r1, #10
 8001232:	2018      	movs	r0, #24
 8001234:	f7ff fe9e 	bl	8000f74 <writeByte>
	HAL_Delay(10);
 8001238:	200a      	movs	r0, #10
 800123a:	f001 fab1 	bl	80027a0 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 800123e:	220f      	movs	r2, #15
 8001240:	210a      	movs	r1, #10
 8001242:	2018      	movs	r0, #24
 8001244:	f7ff fe96 	bl	8000f74 <writeByte>
	HAL_Delay(10);
 8001248:	200a      	movs	r0, #10
 800124a:	f001 faa9 	bl	80027a0 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 800124e:	ab03      	add	r3, sp, #12
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2303      	movs	r3, #3
 8001254:	2210      	movs	r2, #16
 8001256:	2119      	movs	r1, #25
 8001258:	2018      	movs	r0, #24
 800125a:	f7ff fee5 	bl	8001028 <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 800125e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001262:	3b80      	subs	r3, #128	; 0x80
 8001264:	ee07 3a10 	vmov	s14, r3
 8001268:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800126c:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80012e4 <initAK8963+0xbc>
 8001270:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001278:	ee37 7a26 	vadd.f32	s14, s14, s13
 800127c:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001280:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001284:	3b80      	subs	r3, #128	; 0x80
 8001286:	ee07 3a10 	vmov	s14, r3
 800128a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800128e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001292:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001296:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 800129a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800129e:	3b80      	subs	r3, #128	; 0x80
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80012ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012b0:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012b4:	2200      	movs	r2, #0
 80012b6:	210a      	movs	r1, #10
 80012b8:	2018      	movs	r0, #24
 80012ba:	f7ff fe5b 	bl	8000f74 <writeByte>
	HAL_Delay(10);
 80012be:	200a      	movs	r0, #10
 80012c0:	f001 fa6e 	bl	80027a0 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <initAK8963+0xc0>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4a08      	ldr	r2, [pc, #32]	; (80012ec <initAK8963+0xc4>)
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	210a      	movs	r1, #10
 80012d4:	2018      	movs	r0, #24
 80012d6:	f7ff fe4d 	bl	8000f74 <writeByte>
	HAL_Delay(10);
 80012da:	200a      	movs	r0, #10
 80012dc:	f001 fa60 	bl	80027a0 <HAL_Delay>
}
 80012e0:	b004      	add	sp, #16
 80012e2:	bd10      	pop	{r4, pc}
 80012e4:	3b800000 	.word	0x3b800000
 80012e8:	20000001 	.word	0x20000001
 80012ec:	20000000 	.word	0x20000000

080012f0 <initMPU9250>:

void initMPU9250() {
 80012f0:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80012f2:	2200      	movs	r2, #0
 80012f4:	216b      	movs	r1, #107	; 0x6b
 80012f6:	20d0      	movs	r0, #208	; 0xd0
 80012f8:	f7ff fe3c 	bl	8000f74 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80012fc:	2064      	movs	r0, #100	; 0x64
 80012fe:	f001 fa4f 	bl	80027a0 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001302:	2201      	movs	r2, #1
 8001304:	216b      	movs	r1, #107	; 0x6b
 8001306:	20d0      	movs	r0, #208	; 0xd0
 8001308:	f7ff fe34 	bl	8000f74 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x03);
 800130c:	2203      	movs	r2, #3
 800130e:	211a      	movs	r1, #26
 8001310:	20d0      	movs	r0, #208	; 0xd0
 8001312:	f7ff fe2f 	bl	8000f74 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x04); // Use a 200 Hz rate; the same rate set in CONFIG above
 8001316:	2204      	movs	r2, #4
 8001318:	2119      	movs	r1, #25
 800131a:	20d0      	movs	r0, #208	; 0xd0
 800131c:	f7ff fe2a 	bl	8000f74 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001320:	221b      	movs	r2, #27
 8001322:	21d1      	movs	r1, #209	; 0xd1
 8001324:	4608      	mov	r0, r1
 8001326:	f7ff fe39 	bl	8000f9c <readByte>
 800132a:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 800132c:	f000 021f 	and.w	r2, r0, #31
 8001330:	211b      	movs	r1, #27
 8001332:	20d0      	movs	r0, #208	; 0xd0
 8001334:	f7ff fe1e 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001338:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 800133c:	211b      	movs	r1, #27
 800133e:	20d0      	movs	r0, #208	; 0xd0
 8001340:	f7ff fe18 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <initMPU9250+0xd8>)
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	211b      	movs	r1, #27
 8001350:	20d0      	movs	r0, #208	; 0xd0
 8001352:	f7ff fe0f 	bl	8000f74 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 8001356:	221c      	movs	r2, #28
 8001358:	21d1      	movs	r1, #209	; 0xd1
 800135a:	4608      	mov	r0, r1
 800135c:	f7ff fe1e 	bl	8000f9c <readByte>
 8001360:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001362:	f000 021f 	and.w	r2, r0, #31
 8001366:	211c      	movs	r1, #28
 8001368:	20d0      	movs	r0, #208	; 0xd0
 800136a:	f7ff fe03 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 800136e:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001372:	211c      	movs	r1, #28
 8001374:	20d0      	movs	r0, #208	; 0xd0
 8001376:	f7ff fdfd 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <initMPU9250+0xdc>)
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	211c      	movs	r1, #28
 8001386:	20d0      	movs	r0, #208	; 0xd0
 8001388:	f7ff fdf4 	bl	8000f74 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 800138c:	221d      	movs	r2, #29
 800138e:	21d1      	movs	r1, #209	; 0xd1
 8001390:	4608      	mov	r0, r1
 8001392:	f7ff fe03 	bl	8000f9c <readByte>
 8001396:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001398:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800139c:	211d      	movs	r1, #29
 800139e:	20d0      	movs	r0, #208	; 0xd0
 80013a0:	f7ff fde8 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80013a4:	f044 0203 	orr.w	r2, r4, #3
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	211d      	movs	r1, #29
 80013ac:	20d0      	movs	r0, #208	; 0xd0
 80013ae:	f7ff fde1 	bl	8000f74 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013b2:	2222      	movs	r2, #34	; 0x22
 80013b4:	2137      	movs	r1, #55	; 0x37
 80013b6:	20d0      	movs	r0, #208	; 0xd0
 80013b8:	f7ff fddc 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013bc:	2201      	movs	r2, #1
 80013be:	2138      	movs	r1, #56	; 0x38
 80013c0:	20d0      	movs	r0, #208	; 0xd0
 80013c2:	f7ff fdd7 	bl	8000f74 <writeByte>
}
 80013c6:	bd10      	pop	{r4, pc}
 80013c8:	20000245 	.word	0x20000245
 80013cc:	20000244 	.word	0x20000244

080013d0 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2) {
 80013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d4:	b08c      	sub	sp, #48	; 0x30
 80013d6:	4607      	mov	r7, r0
 80013d8:	460e      	mov	r6, r1
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };
 80013da:	2400      	movs	r4, #0
 80013dc:	9406      	str	r4, [sp, #24]
 80013de:	9407      	str	r4, [sp, #28]
 80013e0:	9408      	str	r4, [sp, #32]
 80013e2:	9403      	str	r4, [sp, #12]
 80013e4:	9404      	str	r4, [sp, #16]
 80013e6:	9405      	str	r4, [sp, #20]

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	216b      	movs	r1, #107	; 0x6b
 80013ec:	20d0      	movs	r0, #208	; 0xd0
 80013ee:	f7ff fdc1 	bl	8000f74 <writeByte>
	HAL_Delay(100);
 80013f2:	2064      	movs	r0, #100	; 0x64
 80013f4:	f001 f9d4 	bl	80027a0 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01);
 80013f8:	2201      	movs	r2, #1
 80013fa:	216b      	movs	r1, #107	; 0x6b
 80013fc:	20d0      	movs	r0, #208	; 0xd0
 80013fe:	f7ff fdb9 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_2, 0x00);
 8001402:	4622      	mov	r2, r4
 8001404:	216c      	movs	r1, #108	; 0x6c
 8001406:	20d0      	movs	r0, #208	; 0xd0
 8001408:	f7ff fdb4 	bl	8000f74 <writeByte>
	HAL_Delay(200);
 800140c:	20c8      	movs	r0, #200	; 0xc8
 800140e:	f001 f9c7 	bl	80027a0 <HAL_Delay>

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x00); // Disable all interrupts
 8001412:	4622      	mov	r2, r4
 8001414:	2138      	movs	r1, #56	; 0x38
 8001416:	20d0      	movs	r0, #208	; 0xd0
 8001418:	f7ff fdac 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00);      // Disable FIFO
 800141c:	4622      	mov	r2, r4
 800141e:	2123      	movs	r1, #35	; 0x23
 8001420:	20d0      	movs	r0, #208	; 0xd0
 8001422:	f7ff fda7 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Turn on internal clock source
 8001426:	4622      	mov	r2, r4
 8001428:	216b      	movs	r1, #107	; 0x6b
 800142a:	20d0      	movs	r0, #208	; 0xd0
 800142c:	f7ff fda2 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001430:	4622      	mov	r2, r4
 8001432:	2124      	movs	r1, #36	; 0x24
 8001434:	20d0      	movs	r0, #208	; 0xd0
 8001436:	f7ff fd9d 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x00); // Disable FIFO and I2C master modes
 800143a:	4622      	mov	r2, r4
 800143c:	216a      	movs	r1, #106	; 0x6a
 800143e:	20d0      	movs	r0, #208	; 0xd0
 8001440:	f7ff fd98 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001444:	220c      	movs	r2, #12
 8001446:	216a      	movs	r1, #106	; 0x6a
 8001448:	20d0      	movs	r0, #208	; 0xd0
 800144a:	f7ff fd93 	bl	8000f74 <writeByte>
	HAL_Delay(15);
 800144e:	200f      	movs	r0, #15
 8001450:	f001 f9a6 	bl	80027a0 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x01); // Set low-pass filter to 188 Hz
 8001454:	2201      	movs	r2, #1
 8001456:	211a      	movs	r1, #26
 8001458:	20d0      	movs	r0, #208	; 0xd0
 800145a:	f7ff fd8b 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set sample rate to 1 kHz
 800145e:	4622      	mov	r2, r4
 8001460:	2119      	movs	r1, #25
 8001462:	20d0      	movs	r0, #208	; 0xd0
 8001464:	f7ff fd86 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001468:	4622      	mov	r2, r4
 800146a:	211b      	movs	r1, #27
 800146c:	20d0      	movs	r0, #208	; 0xd0
 800146e:	f7ff fd81 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001472:	4622      	mov	r2, r4
 8001474:	211c      	movs	r1, #28
 8001476:	20d0      	movs	r0, #208	; 0xd0
 8001478:	f7ff fd7c 	bl	8000f74 <writeByte>

	uint16_t gyrosensitivity = 131;   // = 131 LSB/degrees/sec
	uint16_t accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x40);   // Enable FIFO
 800147c:	2240      	movs	r2, #64	; 0x40
 800147e:	216a      	movs	r1, #106	; 0x6a
 8001480:	20d0      	movs	r0, #208	; 0xd0
 8001482:	f7ff fd77 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001486:	2278      	movs	r2, #120	; 0x78
 8001488:	2123      	movs	r1, #35	; 0x23
 800148a:	20d0      	movs	r0, #208	; 0xd0
 800148c:	f7ff fd72 	bl	8000f74 <writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001490:	2028      	movs	r0, #40	; 0x28
 8001492:	f001 f985 	bl	80027a0 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00); // Disable gyro and accelerometer sensors for FIFO
 8001496:	4622      	mov	r2, r4
 8001498:	2123      	movs	r1, #35	; 0x23
 800149a:	20d0      	movs	r0, #208	; 0xd0
 800149c:	f7ff fd6a 	bl	8000f74 <writeByte>
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80014a0:	ab09      	add	r3, sp, #36	; 0x24
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2302      	movs	r3, #2
 80014a6:	2272      	movs	r2, #114	; 0x72
 80014a8:	21d1      	movs	r1, #209	; 0xd1
 80014aa:	20d0      	movs	r0, #208	; 0xd0
 80014ac:	f7ff fdbc 	bl	8001028 <readBytes>
	fifo_count = ((uint16_t) data[0] << 8) | data[1];
 80014b0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80014b4:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80014b8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 80014bc:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <calibrateMPU9250+0x2a4>)
 80014be:	fba3 3505 	umull	r3, r5, r3, r5
 80014c2:	08ed      	lsrs	r5, r5, #3

	for (ii = 0; ii < packet_count; ii++) {
 80014c4:	e045      	b.n	8001552 <calibrateMPU9250+0x182>
		int16_t accel_temp[3] = { 0, 0, 0 }, gyro_temp[3] = { 0, 0, 0 };
		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_R_W, 12,
 80014c6:	ab09      	add	r3, sp, #36	; 0x24
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	230c      	movs	r3, #12
 80014cc:	2274      	movs	r2, #116	; 0x74
 80014ce:	21d1      	movs	r1, #209	; 0xd1
 80014d0:	20d0      	movs	r0, #208	; 0xd0
 80014d2:	f7ff fda9 	bl	8001028 <readBytes>
				&data[0]); // read data for averaging
		accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]); // Form signed 16-bit integer for each sample in FIFO
 80014d6:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80014da:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 80014de:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
		accel_temp[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 80014e2:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
 80014e6:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 80014ea:	ea40 2e0e 	orr.w	lr, r0, lr, lsl #8
		accel_temp[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 80014ee:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 80014f2:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 80014f6:	ea40 2c0c 	orr.w	ip, r0, ip, lsl #8
		gyro_temp[0] = (int16_t) (((int16_t) data[6] << 8) | data[7]);
 80014fa:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80014fe:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 8001502:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		gyro_temp[1] = (int16_t) (((int16_t) data[8] << 8) | data[9]);
 8001506:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800150a:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800150e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		gyro_temp[2] = (int16_t) (((int16_t) data[10] << 8) | data[11]);
 8001512:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8001516:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800151a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800151e:	9803      	ldr	r0, [sp, #12]
 8001520:	fa00 f088 	sxtah	r0, r0, r8
 8001524:	9003      	str	r0, [sp, #12]
		accel_bias[1] += (int32_t) accel_temp[1];
 8001526:	9804      	ldr	r0, [sp, #16]
 8001528:	fa00 f08e 	sxtah	r0, r0, lr
 800152c:	9004      	str	r0, [sp, #16]
		accel_bias[2] += (int32_t) accel_temp[2];
 800152e:	9805      	ldr	r0, [sp, #20]
 8001530:	fa00 f08c 	sxtah	r0, r0, ip
 8001534:	9005      	str	r0, [sp, #20]
		gyro_bias[0] += (int32_t) gyro_temp[0];
 8001536:	9806      	ldr	r0, [sp, #24]
 8001538:	fa00 f181 	sxtah	r1, r0, r1
 800153c:	9106      	str	r1, [sp, #24]
		gyro_bias[1] += (int32_t) gyro_temp[1];
 800153e:	9907      	ldr	r1, [sp, #28]
 8001540:	fa01 f282 	sxtah	r2, r1, r2
 8001544:	9207      	str	r2, [sp, #28]
		gyro_bias[2] += (int32_t) gyro_temp[2];
 8001546:	9a08      	ldr	r2, [sp, #32]
 8001548:	fa02 f383 	sxtah	r3, r2, r3
 800154c:	9308      	str	r3, [sp, #32]
	for (ii = 0; ii < packet_count; ii++) {
 800154e:	3401      	adds	r4, #1
 8001550:	b2a4      	uxth	r4, r4
 8001552:	42ac      	cmp	r4, r5
 8001554:	d3b7      	bcc.n	80014c6 <calibrateMPU9250+0xf6>

	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001556:	9b03      	ldr	r3, [sp, #12]
 8001558:	fb93 f8f5 	sdiv	r8, r3, r5
	accel_bias[1] /= (int32_t) packet_count;
 800155c:	9b04      	ldr	r3, [sp, #16]
 800155e:	fb93 f4f5 	sdiv	r4, r3, r5
	accel_bias[2] /= (int32_t) packet_count;
 8001562:	9805      	ldr	r0, [sp, #20]
 8001564:	fb90 f0f5 	sdiv	r0, r0, r5
	gyro_bias[0] /= (int32_t) packet_count;
 8001568:	9906      	ldr	r1, [sp, #24]
 800156a:	fb91 f1f5 	sdiv	r1, r1, r5
	gyro_bias[1] /= (int32_t) packet_count;
 800156e:	9a07      	ldr	r2, [sp, #28]
 8001570:	fb92 f2f5 	sdiv	r2, r2, r5
	gyro_bias[2] /= (int32_t) packet_count;
 8001574:	9b08      	ldr	r3, [sp, #32]
 8001576:	fb93 f5f5 	sdiv	r5, r3, r5

	if (accel_bias[2] > 0L) {
 800157a:	2800      	cmp	r0, #0
 800157c:	dd4f      	ble.n	800161e <calibrateMPU9250+0x24e>
		accel_bias[2] -= (int32_t) accelsensitivity;
 800157e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8001582:	9005      	str	r0, [sp, #20]
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
	}

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001584:	424b      	negs	r3, r1
 8001586:	2b00      	cmp	r3, #0
 8001588:	db4d      	blt.n	8001626 <calibrateMPU9250+0x256>
 800158a:	1098      	asrs	r0, r3, #2
 800158c:	129b      	asrs	r3, r3, #10
 800158e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001592:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8001596:	4253      	negs	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	db46      	blt.n	800162a <calibrateMPU9250+0x25a>
 800159c:	1098      	asrs	r0, r3, #2
 800159e:	129b      	asrs	r3, r3, #10
 80015a0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
 80015a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 80015a8:	426b      	negs	r3, r5
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db3f      	blt.n	800162e <calibrateMPU9250+0x25e>
 80015ae:	1098      	asrs	r0, r3, #2
 80015b0:	129b      	asrs	r3, r3, #10
 80015b2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	data[5] = (-gyro_bias[2] / 4) & 0xFF;
 80015b6:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_H, data[2]);
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_L, data[5]);
	 */
	dest1[0] = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 80015ba:	ee07 1a90 	vmov	s15, r1
 80015be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001678 <calibrateMPU9250+0x2a8>
 80015c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ca:	edc7 6a00 	vstr	s13, [r7]
	dest1[1] = (float) gyro_bias[1] / (float) gyrosensitivity;
 80015ce:	ee07 2a90 	vmov	s15, r2
 80015d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015da:	edc7 6a01 	vstr	s13, [r7, #4]
	dest1[2] = (float) gyro_bias[2] / (float) gyrosensitivity;
 80015de:	ee07 5a90 	vmov	s15, r5
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ea:	edc7 6a02 	vstr	s13, [r7, #8]
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80015ee:	ad09      	add	r5, sp, #36	; 0x24
 80015f0:	9500      	str	r5, [sp, #0]
 80015f2:	2302      	movs	r3, #2
 80015f4:	2277      	movs	r2, #119	; 0x77
 80015f6:	21d1      	movs	r1, #209	; 0xd1
 80015f8:	20d0      	movs	r0, #208	; 0xd0
 80015fa:	f7ff fd15 	bl	8001028 <readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, YA_OFFSET_H, 2, &data[0]);
 80015fe:	9500      	str	r5, [sp, #0]
 8001600:	2302      	movs	r3, #2
 8001602:	227a      	movs	r2, #122	; 0x7a
 8001604:	21d1      	movs	r1, #209	; 0xd1
 8001606:	20d0      	movs	r0, #208	; 0xd0
 8001608:	f7ff fd0e 	bl	8001028 <readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ZA_OFFSET_H, 2, &data[0]);
 800160c:	9500      	str	r5, [sp, #0]
 800160e:	2302      	movs	r3, #2
 8001610:	227d      	movs	r2, #125	; 0x7d
 8001612:	21d1      	movs	r1, #209	; 0xd1
 8001614:	20d0      	movs	r0, #208	; 0xd0
 8001616:	f7ff fd07 	bl	8001028 <readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t) data[0] << 8) | data[1];

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = { 0, 0, 0 }; // Define array to hold mask bit for each accelerometer bias axis

	for (ii = 0; ii < 3; ii++) {
 800161a:	2300      	movs	r3, #0
 800161c:	e00b      	b.n	8001636 <calibrateMPU9250+0x266>
		accel_bias[2] += (int32_t) accelsensitivity;
 800161e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8001622:	9005      	str	r0, [sp, #20]
 8001624:	e7ae      	b.n	8001584 <calibrateMPU9250+0x1b4>
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001626:	3303      	adds	r3, #3
 8001628:	e7af      	b.n	800158a <calibrateMPU9250+0x1ba>
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 800162a:	3303      	adds	r3, #3
 800162c:	e7b6      	b.n	800159c <calibrateMPU9250+0x1cc>
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 800162e:	3303      	adds	r3, #3
 8001630:	e7bd      	b.n	80015ae <calibrateMPU9250+0x1de>
	for (ii = 0; ii < 3; ii++) {
 8001632:	3301      	adds	r3, #1
 8001634:	b29b      	uxth	r3, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d9fb      	bls.n	8001632 <calibrateMPU9250+0x262>
	 writeByte(MPU9250_ADDRESS_TX, YA_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_L, data[5]);
	 */
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
 800163a:	ee07 8a90 	vmov	s15, r8
 800163e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001642:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800167c <calibrateMPU9250+0x2ac>
 8001646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164a:	edc6 7a00 	vstr	s15, [r6]
	dest2[1] = (float) accel_bias[1] / (float) accelsensitivity;
 800164e:	ee07 4a90 	vmov	s15, r4
 8001652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165a:	edc6 7a01 	vstr	s15, [r6, #4]
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 800165e:	eddd 7a05 	vldr	s15, [sp, #20]
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166a:	edc6 7a02 	vstr	s15, [r6, #8]
}
 800166e:	b00c      	add	sp, #48	; 0x30
 8001670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001674:	aaaaaaab 	.word	0xaaaaaaab
 8001678:	43030000 	.word	0x43030000
 800167c:	38800000 	.word	0x38800000

08001680 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 8001680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001684:	ed2d 8b08 	vpush	{d8-d11}
 8001688:	b093      	sub	sp, #76	; 0x4c
 800168a:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 800168c:	2400      	movs	r4, #0
 800168e:	9410      	str	r4, [sp, #64]	; 0x40
 8001690:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 8001694:	4622      	mov	r2, r4
 8001696:	2119      	movs	r1, #25
 8001698:	20d0      	movs	r0, #208	; 0xd0
 800169a:	f7ff fc6b 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800169e:	2202      	movs	r2, #2
 80016a0:	211a      	movs	r1, #26
 80016a2:	20d0      	movs	r0, #208	; 0xd0
 80016a4:	f7ff fc66 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 80016a8:	2201      	movs	r2, #1
 80016aa:	211b      	movs	r1, #27
 80016ac:	20d0      	movs	r0, #208	; 0xd0
 80016ae:	f7ff fc61 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80016b2:	2202      	movs	r2, #2
 80016b4:	211d      	movs	r1, #29
 80016b6:	20d0      	movs	r0, #208	; 0xd0
 80016b8:	f7ff fc5c 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 80016bc:	2201      	movs	r2, #1
 80016be:	211c      	movs	r1, #28
 80016c0:	20d0      	movs	r0, #208	; 0xd0
 80016c2:	f7ff fc57 	bl	8000f74 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80016c6:	e051      	b.n	800176c <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80016c8:	ae10      	add	r6, sp, #64	; 0x40
 80016ca:	9600      	str	r6, [sp, #0]
 80016cc:	2306      	movs	r3, #6
 80016ce:	223b      	movs	r2, #59	; 0x3b
 80016d0:	21d1      	movs	r1, #209	; 0xd1
 80016d2:	20d0      	movs	r0, #208	; 0xd0
 80016d4:	f7ff fca8 	bl	8001028 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80016d8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80016dc:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80016e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016e4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80016e8:	4413      	add	r3, r2
 80016ea:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80016ee:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80016f2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80016f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016fa:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80016fe:	4413      	add	r3, r2
 8001700:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001704:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001708:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800170c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001710:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8001714:	4413      	add	r3, r2
 8001716:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800171a:	9600      	str	r6, [sp, #0]
 800171c:	2306      	movs	r3, #6
 800171e:	2243      	movs	r2, #67	; 0x43
 8001720:	21d1      	movs	r1, #209	; 0xd1
 8001722:	20d0      	movs	r0, #208	; 0xd0
 8001724:	f7ff fc80 	bl	8001028 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001728:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800172c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001734:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8001738:	4413      	add	r3, r2
 800173a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800173e:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001742:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8001746:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800174a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800174e:	4413      	add	r3, r2
 8001750:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001754:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001758:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800175c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001760:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8001764:	4413      	add	r3, r2
 8001766:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800176a:	3401      	adds	r4, #1
 800176c:	2cc7      	cmp	r4, #199	; 0xc7
 800176e:	ddab      	ble.n	80016c8 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001770:	2400      	movs	r4, #0
 8001772:	e016      	b.n	80017a2 <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 8001774:	ab12      	add	r3, sp, #72	; 0x48
 8001776:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800177a:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 800177e:	48c0      	ldr	r0, [pc, #768]	; (8001a80 <MPU9250SelfTest+0x400>)
 8001780:	fb80 6302 	smull	r6, r3, r0, r2
 8001784:	17d2      	asrs	r2, r2, #31
 8001786:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 800178a:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 800178e:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 8001792:	fb80 2003 	smull	r2, r0, r0, r3
 8001796:	17db      	asrs	r3, r3, #31
 8001798:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800179c:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80017a0:	3401      	adds	r4, #1
 80017a2:	2c02      	cmp	r4, #2
 80017a4:	dde6      	ble.n	8001774 <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80017a6:	22e0      	movs	r2, #224	; 0xe0
 80017a8:	211c      	movs	r1, #28
 80017aa:	20d0      	movs	r0, #208	; 0xd0
 80017ac:	f7ff fbe2 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80017b0:	22e0      	movs	r2, #224	; 0xe0
 80017b2:	211b      	movs	r1, #27
 80017b4:	20d0      	movs	r0, #208	; 0xd0
 80017b6:	f7ff fbdd 	bl	8000f74 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80017ba:	2019      	movs	r0, #25
 80017bc:	f000 fff0 	bl	80027a0 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80017c0:	2400      	movs	r4, #0
 80017c2:	e051      	b.n	8001868 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80017c4:	ae10      	add	r6, sp, #64	; 0x40
 80017c6:	9600      	str	r6, [sp, #0]
 80017c8:	2306      	movs	r3, #6
 80017ca:	223b      	movs	r2, #59	; 0x3b
 80017cc:	21d1      	movs	r1, #209	; 0xd1
 80017ce:	20d0      	movs	r0, #208	; 0xd0
 80017d0:	f7ff fc2a 	bl	8001028 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80017d4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80017d8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80017dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017e0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80017e4:	4413      	add	r3, r2
 80017e6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80017ea:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80017ee:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80017f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017f6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80017fa:	4413      	add	r3, r2
 80017fc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001800:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001804:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001808:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800180c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8001810:	4413      	add	r3, r2
 8001812:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001816:	9600      	str	r6, [sp, #0]
 8001818:	2306      	movs	r3, #6
 800181a:	2243      	movs	r2, #67	; 0x43
 800181c:	21d1      	movs	r1, #209	; 0xd1
 800181e:	20d0      	movs	r0, #208	; 0xd0
 8001820:	f7ff fc02 	bl	8001028 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001824:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001828:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800182c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001830:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8001834:	4413      	add	r3, r2
 8001836:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800183a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800183e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8001842:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001846:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800184a:	4413      	add	r3, r2
 800184c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001850:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001854:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001858:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800185c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8001860:	4413      	add	r3, r2
 8001862:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001866:	3401      	adds	r4, #1
 8001868:	2cc7      	cmp	r4, #199	; 0xc7
 800186a:	ddab      	ble.n	80017c4 <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 800186c:	2400      	movs	r4, #0
 800186e:	e016      	b.n	800189e <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 8001870:	ab12      	add	r3, sp, #72	; 0x48
 8001872:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8001876:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 800187a:	4881      	ldr	r0, [pc, #516]	; (8001a80 <MPU9250SelfTest+0x400>)
 800187c:	fb80 6302 	smull	r6, r3, r0, r2
 8001880:	17d2      	asrs	r2, r2, #31
 8001882:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8001886:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 800188a:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 800188e:	fb80 2003 	smull	r2, r0, r0, r3
 8001892:	17db      	asrs	r3, r3, #31
 8001894:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001898:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 800189c:	3401      	adds	r4, #1
 800189e:	2c02      	cmp	r4, #2
 80018a0:	dde6      	ble.n	8001870 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 80018a2:	2200      	movs	r2, #0
 80018a4:	211c      	movs	r1, #28
 80018a6:	20d0      	movs	r0, #208	; 0xd0
 80018a8:	f7ff fb64 	bl	8000f74 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 80018ac:	2200      	movs	r2, #0
 80018ae:	211b      	movs	r1, #27
 80018b0:	20d0      	movs	r0, #208	; 0xd0
 80018b2:	f7ff fb5f 	bl	8000f74 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80018b6:	2019      	movs	r0, #25
 80018b8:	f000 ff72 	bl	80027a0 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018bc:	220d      	movs	r2, #13
 80018be:	21d1      	movs	r1, #209	; 0xd1
 80018c0:	20d0      	movs	r0, #208	; 0xd0
 80018c2:	f7ff fb6b 	bl	8000f9c <readByte>
 80018c6:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018ca:	220e      	movs	r2, #14
 80018cc:	21d1      	movs	r1, #209	; 0xd1
 80018ce:	20d0      	movs	r0, #208	; 0xd0
 80018d0:	f7ff fb64 	bl	8000f9c <readByte>
 80018d4:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018d8:	220f      	movs	r2, #15
 80018da:	21d1      	movs	r1, #209	; 0xd1
 80018dc:	20d0      	movs	r0, #208	; 0xd0
 80018de:	f7ff fb5d 	bl	8000f9c <readByte>
 80018e2:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018e6:	2200      	movs	r2, #0
 80018e8:	21d1      	movs	r1, #209	; 0xd1
 80018ea:	20d0      	movs	r0, #208	; 0xd0
 80018ec:	f7ff fb56 	bl	8000f9c <readByte>
 80018f0:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018f4:	2201      	movs	r2, #1
 80018f6:	21d1      	movs	r1, #209	; 0xd1
 80018f8:	20d0      	movs	r0, #208	; 0xd0
 80018fa:	f7ff fb4f 	bl	8000f9c <readByte>
 80018fe:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001902:	2202      	movs	r2, #2
 8001904:	21d1      	movs	r1, #209	; 0xd1
 8001906:	20d0      	movs	r0, #208	; 0xd0
 8001908:	f7ff fb48 	bl	8000f9c <readByte>
 800190c:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001910:	eef8 7a48 	vcvt.f32.u32	s15, s16
 8001914:	ee17 0a90 	vmov	r0, s15
 8001918:	f7fe fe1e 	bl	8000558 <__aeabi_f2d>
 800191c:	2200      	movs	r2, #0
 800191e:	4b59      	ldr	r3, [pc, #356]	; (8001a84 <MPU9250SelfTest+0x404>)
 8001920:	f7fe fcba 	bl	8000298 <__aeabi_dsub>
 8001924:	ed9f 8b52 	vldr	d8, [pc, #328]	; 8001a70 <MPU9250SelfTest+0x3f0>
 8001928:	ec41 0b11 	vmov	d1, r0, r1
 800192c:	eeb0 0a48 	vmov.f32	s0, s16
 8001930:	eef0 0a68 	vmov.f32	s1, s17
 8001934:	f006 f808 	bl	8007948 <pow>
 8001938:	a34f      	add	r3, pc, #316	; (adr r3, 8001a78 <MPU9250SelfTest+0x3f8>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	ec51 0b10 	vmov	r0, r1, d0
 8001942:	f7fe fe61 	bl	8000608 <__aeabi_dmul>
 8001946:	f7ff f937 	bl	8000bb8 <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 800194a:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 800194c:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 8001950:	ee17 0a90 	vmov	r0, s15
 8001954:	f7fe fe00 	bl	8000558 <__aeabi_f2d>
 8001958:	2200      	movs	r2, #0
 800195a:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <MPU9250SelfTest+0x404>)
 800195c:	f7fe fc9c 	bl	8000298 <__aeabi_dsub>
 8001960:	ec41 0b11 	vmov	d1, r0, r1
 8001964:	eeb0 0a48 	vmov.f32	s0, s16
 8001968:	eef0 0a68 	vmov.f32	s1, s17
 800196c:	f005 ffec 	bl	8007948 <pow>
 8001970:	a341      	add	r3, pc, #260	; (adr r3, 8001a78 <MPU9250SelfTest+0x3f8>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	ec51 0b10 	vmov	r0, r1, d0
 800197a:	f7fe fe45 	bl	8000608 <__aeabi_dmul>
 800197e:	f7ff f91b 	bl	8000bb8 <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 8001982:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 8001984:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 8001988:	ee17 0a90 	vmov	r0, s15
 800198c:	f7fe fde4 	bl	8000558 <__aeabi_f2d>
 8001990:	2200      	movs	r2, #0
 8001992:	4b3c      	ldr	r3, [pc, #240]	; (8001a84 <MPU9250SelfTest+0x404>)
 8001994:	f7fe fc80 	bl	8000298 <__aeabi_dsub>
 8001998:	ec41 0b11 	vmov	d1, r0, r1
 800199c:	eeb0 0a48 	vmov.f32	s0, s16
 80019a0:	eef0 0a68 	vmov.f32	s1, s17
 80019a4:	f005 ffd0 	bl	8007948 <pow>
 80019a8:	a333      	add	r3, pc, #204	; (adr r3, 8001a78 <MPU9250SelfTest+0x3f8>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	ec51 0b10 	vmov	r0, r1, d0
 80019b2:	f7fe fe29 	bl	8000608 <__aeabi_dmul>
 80019b6:	f7ff f8ff 	bl	8000bb8 <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 80019ba:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 80019bc:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 80019c0:	ee17 0a90 	vmov	r0, s15
 80019c4:	f7fe fdc8 	bl	8000558 <__aeabi_f2d>
 80019c8:	2200      	movs	r2, #0
 80019ca:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <MPU9250SelfTest+0x404>)
 80019cc:	f7fe fc64 	bl	8000298 <__aeabi_dsub>
 80019d0:	ec41 0b11 	vmov	d1, r0, r1
 80019d4:	eeb0 0a48 	vmov.f32	s0, s16
 80019d8:	eef0 0a68 	vmov.f32	s1, s17
 80019dc:	f005 ffb4 	bl	8007948 <pow>
 80019e0:	a325      	add	r3, pc, #148	; (adr r3, 8001a78 <MPU9250SelfTest+0x3f8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	ec51 0b10 	vmov	r0, r1, d0
 80019ea:	f7fe fe0d 	bl	8000608 <__aeabi_dmul>
 80019ee:	f7ff f8e3 	bl	8000bb8 <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 80019f2:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 80019f4:	eef8 7a69 	vcvt.f32.u32	s15, s19
 80019f8:	ee17 0a90 	vmov	r0, s15
 80019fc:	f7fe fdac 	bl	8000558 <__aeabi_f2d>
 8001a00:	2200      	movs	r2, #0
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <MPU9250SelfTest+0x404>)
 8001a04:	f7fe fc48 	bl	8000298 <__aeabi_dsub>
 8001a08:	ec41 0b11 	vmov	d1, r0, r1
 8001a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8001a10:	eef0 0a68 	vmov.f32	s1, s17
 8001a14:	f005 ff98 	bl	8007948 <pow>
 8001a18:	a317      	add	r3, pc, #92	; (adr r3, 8001a78 <MPU9250SelfTest+0x3f8>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	ec51 0b10 	vmov	r0, r1, d0
 8001a22:	f7fe fdf1 	bl	8000608 <__aeabi_dmul>
 8001a26:	f7ff f8c7 	bl	8000bb8 <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001a2a:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001a2c:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001a30:	ee17 0a90 	vmov	r0, s15
 8001a34:	f7fe fd90 	bl	8000558 <__aeabi_f2d>
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MPU9250SelfTest+0x404>)
 8001a3c:	f7fe fc2c 	bl	8000298 <__aeabi_dsub>
 8001a40:	ec41 0b11 	vmov	d1, r0, r1
 8001a44:	eeb0 0a48 	vmov.f32	s0, s16
 8001a48:	eef0 0a68 	vmov.f32	s1, s17
 8001a4c:	f005 ff7c 	bl	8007948 <pow>
 8001a50:	a309      	add	r3, pc, #36	; (adr r3, 8001a78 <MPU9250SelfTest+0x3f8>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	ec51 0b10 	vmov	r0, r1, d0
 8001a5a:	f7fe fdd5 	bl	8000608 <__aeabi_dmul>
 8001a5e:	f7ff f8ab 	bl	8000bb8 <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 8001a62:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8001a64:	f04f 0800 	mov.w	r8, #0
 8001a68:	e05f      	b.n	8001b2a <MPU9250SelfTest+0x4aa>
 8001a6a:	bf00      	nop
 8001a6c:	f3af 8000 	nop.w
 8001a70:	c28f5c29 	.word	0xc28f5c29
 8001a74:	3ff028f5 	.word	0x3ff028f5
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	40a47800 	.word	0x40a47800
 8001a80:	51eb851f 	.word	0x51eb851f
 8001a84:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001a88:	ab12      	add	r3, sp, #72	; 0x48
 8001a8a:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 8001a8e:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 8001a92:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 8001a96:	1ac0      	subs	r0, r0, r3
 8001a98:	ee07 0a90 	vmov	s15, r0
 8001a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa0:	ee17 0a90 	vmov	r0, s15
 8001aa4:	f7fe fd58 	bl	8000558 <__aeabi_f2d>
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <MPU9250SelfTest+0x4bc>)
 8001aac:	f7fe fdac 	bl	8000608 <__aeabi_dmul>
 8001ab0:	4606      	mov	r6, r0
 8001ab2:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 8001ab4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001ab8:	ab12      	add	r3, sp, #72	; 0x48
 8001aba:	444b      	add	r3, r9
 8001abc:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001ac0:	f7fe fd4a 	bl	8000558 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001ac4:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4630      	mov	r0, r6
 8001acc:	4639      	mov	r1, r7
 8001ace:	f7fe fec5 	bl	800085c <__aeabi_ddiv>
 8001ad2:	f7ff f871 	bl	8000bb8 <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001ad6:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001ada:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001ade:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 8001ae2:	1ac0      	subs	r0, r0, r3
 8001ae4:	ee07 0a90 	vmov	s15, r0
 8001ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aec:	ee17 0a90 	vmov	r0, s15
 8001af0:	f7fe fd32 	bl	8000558 <__aeabi_f2d>
 8001af4:	2200      	movs	r2, #0
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MPU9250SelfTest+0x4bc>)
 8001af8:	f7fe fd86 	bl	8000608 <__aeabi_dmul>
 8001afc:	4606      	mov	r6, r0
 8001afe:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001b00:	f108 0403 	add.w	r4, r8, #3
 8001b04:	00a4      	lsls	r4, r4, #2
 8001b06:	ab12      	add	r3, sp, #72	; 0x48
 8001b08:	4423      	add	r3, r4
 8001b0a:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001b0e:	f7fe fd23 	bl	8000558 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b12:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4630      	mov	r0, r6
 8001b1a:	4639      	mov	r1, r7
 8001b1c:	f7fe fe9e 	bl	800085c <__aeabi_ddiv>
 8001b20:	f7ff f84a 	bl	8000bb8 <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b24:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8001b26:	f108 0801 	add.w	r8, r8, #1
 8001b2a:	f1b8 0f02 	cmp.w	r8, #2
 8001b2e:	ddab      	ble.n	8001a88 <MPU9250SelfTest+0x408>
	}

}
 8001b30:	b013      	add	sp, #76	; 0x4c
 8001b32:	ecbd 8b08 	vpop	{d8-d11}
 8001b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40590000 	.word	0x40590000

08001b40 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 8001b40:	b538      	push	{r3, r4, r5, lr}
	resetMPU9250();
 8001b42:	f7ff fb67 	bl	8001214 <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 8001b46:	4c53      	ldr	r4, [pc, #332]	; (8001c94 <imu_calibrate+0x154>)
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7ff fd99 	bl	8001680 <MPU9250SelfTest>
	printf(	"x-axis self test: acceleration trim within : %f of factory value\n\r", SelfTest[0]);
 8001b4e:	6820      	ldr	r0, [r4, #0]
 8001b50:	f7fe fd02 	bl	8000558 <__aeabi_f2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	484f      	ldr	r0, [pc, #316]	; (8001c98 <imu_calibrate+0x158>)
 8001b5a:	f003 ff6d 	bl	8005a38 <iprintf>
	printf(
 8001b5e:	6860      	ldr	r0, [r4, #4]
 8001b60:	f7fe fcfa 	bl	8000558 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	484c      	ldr	r0, [pc, #304]	; (8001c9c <imu_calibrate+0x15c>)
 8001b6a:	f003 ff65 	bl	8005a38 <iprintf>
	printf(
 8001b6e:	68a0      	ldr	r0, [r4, #8]
 8001b70:	f7fe fcf2 	bl	8000558 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4849      	ldr	r0, [pc, #292]	; (8001ca0 <imu_calibrate+0x160>)
 8001b7a:	f003 ff5d 	bl	8005a38 <iprintf>
	printf("x-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b7e:	68e0      	ldr	r0, [r4, #12]
 8001b80:	f7fe fcea 	bl	8000558 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4846      	ldr	r0, [pc, #280]	; (8001ca4 <imu_calibrate+0x164>)
 8001b8a:	f003 ff55 	bl	8005a38 <iprintf>
	printf("y-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b8e:	6920      	ldr	r0, [r4, #16]
 8001b90:	f7fe fce2 	bl	8000558 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4843      	ldr	r0, [pc, #268]	; (8001ca8 <imu_calibrate+0x168>)
 8001b9a:	f003 ff4d 	bl	8005a38 <iprintf>
	printf("z-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b9e:	6960      	ldr	r0, [r4, #20]
 8001ba0:	f7fe fcda 	bl	8000558 <__aeabi_f2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4840      	ldr	r0, [pc, #256]	; (8001cac <imu_calibrate+0x16c>)
 8001baa:	f003 ff45 	bl	8005a38 <iprintf>
	calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8001bae:	4c40      	ldr	r4, [pc, #256]	; (8001cb0 <imu_calibrate+0x170>)
 8001bb0:	4d40      	ldr	r5, [pc, #256]	; (8001cb4 <imu_calibrate+0x174>)
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	f7ff fc0b 	bl	80013d0 <calibrateMPU9250>
	printf("x gyro bias = %f\n\r", gyroBias[0]);
 8001bba:	6828      	ldr	r0, [r5, #0]
 8001bbc:	f7fe fccc 	bl	8000558 <__aeabi_f2d>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	483c      	ldr	r0, [pc, #240]	; (8001cb8 <imu_calibrate+0x178>)
 8001bc6:	f003 ff37 	bl	8005a38 <iprintf>
	printf("y gyro bias = %f\n\r", gyroBias[1]);
 8001bca:	6868      	ldr	r0, [r5, #4]
 8001bcc:	f7fe fcc4 	bl	8000558 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4839      	ldr	r0, [pc, #228]	; (8001cbc <imu_calibrate+0x17c>)
 8001bd6:	f003 ff2f 	bl	8005a38 <iprintf>
	printf("z gyro bias = %f\n\r", gyroBias[2]);
 8001bda:	68a8      	ldr	r0, [r5, #8]
 8001bdc:	f7fe fcbc 	bl	8000558 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4836      	ldr	r0, [pc, #216]	; (8001cc0 <imu_calibrate+0x180>)
 8001be6:	f003 ff27 	bl	8005a38 <iprintf>
	printf("x accel bias = %f\n\r", accelBias[0]);
 8001bea:	6820      	ldr	r0, [r4, #0]
 8001bec:	f7fe fcb4 	bl	8000558 <__aeabi_f2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4833      	ldr	r0, [pc, #204]	; (8001cc4 <imu_calibrate+0x184>)
 8001bf6:	f003 ff1f 	bl	8005a38 <iprintf>
	printf("y accel bias = %f\n\r", accelBias[1]);
 8001bfa:	6860      	ldr	r0, [r4, #4]
 8001bfc:	f7fe fcac 	bl	8000558 <__aeabi_f2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4830      	ldr	r0, [pc, #192]	; (8001cc8 <imu_calibrate+0x188>)
 8001c06:	f003 ff17 	bl	8005a38 <iprintf>
	printf("z accel bias = %f\n\r", accelBias[2]);
 8001c0a:	68a0      	ldr	r0, [r4, #8]
 8001c0c:	f7fe fca4 	bl	8000558 <__aeabi_f2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	482d      	ldr	r0, [pc, #180]	; (8001ccc <imu_calibrate+0x18c>)
 8001c16:	f003 ff0f 	bl	8005a38 <iprintf>
	initMPU9250();
 8001c1a:	f7ff fb69 	bl	80012f0 <initMPU9250>
	initAK8963(magCalibration);
 8001c1e:	482c      	ldr	r0, [pc, #176]	; (8001cd0 <imu_calibrate+0x190>)
 8001c20:	f7ff fb02 	bl	8001228 <initAK8963>
	printf("Accelerometer full-scale range = %f  g\n\r", 2.0f*(float)(1<<Ascale));
 8001c24:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <imu_calibrate+0x194>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2401      	movs	r4, #1
 8001c2a:	fa04 f303 	lsl.w	r3, r4, r3
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c3a:	ee17 0a90 	vmov	r0, s15
 8001c3e:	f7fe fc8b 	bl	8000558 <__aeabi_f2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4824      	ldr	r0, [pc, #144]	; (8001cd8 <imu_calibrate+0x198>)
 8001c48:	f003 fef6 	bl	8005a38 <iprintf>
	printf("Gyroscope full-scale range = %f  deg/s\n\r", 250.0f*(float)(1<<Gscale));
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <imu_calibrate+0x19c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	409c      	lsls	r4, r3
 8001c52:	ee07 4a90 	vmov	s15, r4
 8001c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ce0 <imu_calibrate+0x1a0>
 8001c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c62:	ee17 0a90 	vmov	r0, s15
 8001c66:	f7fe fc77 	bl	8000558 <__aeabi_f2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	481d      	ldr	r0, [pc, #116]	; (8001ce4 <imu_calibrate+0x1a4>)
 8001c70:	f003 fee2 	bl	8005a38 <iprintf>
	getAres(); // Get accelerometer sensitivity
 8001c74:	f7ff fa3a 	bl	80010ec <getAres>
	getGres(); // Get gyro sensitivity
 8001c78:	f7ff fa14 	bl	80010a4 <getGres>
	getMres(); // Get magnetometer sensitivity
 8001c7c:	f7ff f9fc 	bl	8001078 <getMres>
	magbias[0] = +470.; // User environmental x-axis correction in milliGauss, should be automatically calculated
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <imu_calibrate+0x1a8>)
 8001c82:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <imu_calibrate+0x1ac>)
 8001c84:	601a      	str	r2, [r3, #0]
	magbias[1] = +120.; // User environmental x-axis correction in milliGauss
 8001c86:	4a1a      	ldr	r2, [pc, #104]	; (8001cf0 <imu_calibrate+0x1b0>)
 8001c88:	605a      	str	r2, [r3, #4]
	magbias[2] = +125.; // User environmental x-axis correction in milliGauss
 8001c8a:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <imu_calibrate+0x1b4>)
 8001c8c:	609a      	str	r2, [r3, #8]
}
 8001c8e:	2000      	movs	r0, #0
 8001c90:	bd38      	pop	{r3, r4, r5, pc}
 8001c92:	bf00      	nop
 8001c94:	200002cc 	.word	0x200002cc
 8001c98:	080093e8 	.word	0x080093e8
 8001c9c:	0800942c 	.word	0x0800942c
 8001ca0:	08009470 	.word	0x08009470
 8001ca4:	080094b4 	.word	0x080094b4
 8001ca8:	080094f4 	.word	0x080094f4
 8001cac:	08009534 	.word	0x08009534
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	08009574 	.word	0x08009574
 8001cbc:	08009588 	.word	0x08009588
 8001cc0:	0800959c 	.word	0x0800959c
 8001cc4:	080095b0 	.word	0x080095b0
 8001cc8:	080095c4 	.word	0x080095c4
 8001ccc:	080095d8 	.word	0x080095d8
 8001cd0:	20000260 	.word	0x20000260
 8001cd4:	20000244 	.word	0x20000244
 8001cd8:	080095ec 	.word	0x080095ec
 8001cdc:	20000245 	.word	0x20000245
 8001ce0:	437a0000 	.word	0x437a0000
 8001ce4:	08009618 	.word	0x08009618
 8001ce8:	2000026c 	.word	0x2000026c
 8001cec:	43eb0000 	.word	0x43eb0000
 8001cf0:	42f00000 	.word	0x42f00000
 8001cf4:	42fa0000 	.word	0x42fa0000

08001cf8 <MahonyQuaternionUpdate>:
}

// Similar to Madgwick scheme but uses proportional and integral filtering on the error between estimated reference vectors and
// measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy,
		float gz, float mx, float my, float mz) {
 8001cf8:	b500      	push	{lr}
 8001cfa:	ed2d 8b10 	vpush	{d8-d15}
 8001cfe:	b08d      	sub	sp, #52	; 0x34
 8001d00:	eeb0 ba40 	vmov.f32	s22, s0
 8001d04:	eef0 aa60 	vmov.f32	s21, s1
 8001d08:	eeb0 aa41 	vmov.f32	s20, s2
 8001d0c:	edcd 1a04 	vstr	s3, [sp, #16]
 8001d10:	ed8d 2a05 	vstr	s4, [sp, #20]
 8001d14:	edcd 2a06 	vstr	s5, [sp, #24]
 8001d18:	eef0 da43 	vmov.f32	s27, s6
 8001d1c:	eeb0 da63 	vmov.f32	s26, s7
 8001d20:	eef0 ca44 	vmov.f32	s25, s8

	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001d24:	4be4      	ldr	r3, [pc, #912]	; (80020b8 <MahonyQuaternionUpdate+0x3c0>)
 8001d26:	edd3 9a00 	vldr	s19, [r3]
 8001d2a:	ed93 9a01 	vldr	s18, [r3, #4]
 8001d2e:	edd3 8a02 	vldr	s17, [r3, #8]
 8001d32:	ed93 8a03 	vldr	s16, [r3, #12]
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez;
	float pa, pb, pc;

	// Auxiliary variables to avoid repeated arithmetic
	float q1q1 = q1 * q1;
 8001d36:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8001d3a:	edcd 7a03 	vstr	s15, [sp, #12]
	float q1q2 = q1 * q2;
 8001d3e:	ee69 7a89 	vmul.f32	s15, s19, s18
 8001d42:	edcd 7a00 	vstr	s15, [sp]
	float q1q3 = q1 * q3;
 8001d46:	ee29 faa8 	vmul.f32	s30, s19, s17
	float q1q4 = q1 * q4;
 8001d4a:	ee69 ba88 	vmul.f32	s23, s19, s16
	float q2q2 = q2 * q2;
 8001d4e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8001d52:	edcd 7a01 	vstr	s15, [sp, #4]
	float q2q3 = q2 * q3;
 8001d56:	ee69 fa28 	vmul.f32	s31, s18, s17
	float q2q4 = q2 * q4;
 8001d5a:	ee29 ca08 	vmul.f32	s24, s18, s16
	float q3q3 = q3 * q3;
 8001d5e:	ee68 eaa8 	vmul.f32	s29, s17, s17
	float q3q4 = q3 * q4;
 8001d62:	ee68 7a88 	vmul.f32	s15, s17, s16
 8001d66:	edcd 7a02 	vstr	s15, [sp, #8]
	float q4q4 = q4 * q4;
 8001d6a:	ee28 ea08 	vmul.f32	s28, s16, s16

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d6e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001d72:	ee20 7aa0 	vmul.f32	s14, s1, s1
 8001d76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d7a:	ee21 7a01 	vmul.f32	s14, s2, s2
 8001d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d82:	ee17 0a90 	vmov	r0, s15
 8001d86:	f7fe fbe7 	bl	8000558 <__aeabi_f2d>
 8001d8a:	ec41 0b10 	vmov	d0, r0, r1
 8001d8e:	f005 ff4b 	bl	8007c28 <sqrt>
 8001d92:	ec51 0b10 	vmov	r0, r1, d0
 8001d96:	f7fe ff0f 	bl	8000bb8 <__aeabi_d2f>
 8001d9a:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001d9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d104      	bne.n	8001db2 <MahonyQuaternionUpdate+0xba>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001da8:	b00d      	add	sp, #52	; 0x34
 8001daa:	ecbd 8b10 	vpop	{d8-d15}
 8001dae:	f85d fb04 	ldr.w	pc, [sp], #4
	norm = 1.0f / norm;        // use reciprocal for division
 8001db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	ax *= norm;
 8001dba:	ee2b ba07 	vmul.f32	s22, s22, s14
	ay *= norm;
 8001dbe:	ee6a aa87 	vmul.f32	s21, s21, s14
	az *= norm;
 8001dc2:	ee2a aa07 	vmul.f32	s20, s20, s14
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001dc6:	ee6d 7aad 	vmul.f32	s15, s27, s27
 8001dca:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 8001dce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dd2:	ee2c 7aac 	vmul.f32	s14, s25, s25
 8001dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dda:	ee17 0a90 	vmov	r0, s15
 8001dde:	f7fe fbbb 	bl	8000558 <__aeabi_f2d>
 8001de2:	ec41 0b10 	vmov	d0, r0, r1
 8001de6:	f005 ff1f 	bl	8007c28 <sqrt>
 8001dea:	ec51 0b10 	vmov	r0, r1, d0
 8001dee:	f7fe fee3 	bl	8000bb8 <__aeabi_d2f>
 8001df2:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001df6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	d0d3      	beq.n	8001da8 <MahonyQuaternionUpdate+0xb0>
	norm = 1.0f / norm;        // use reciprocal for division
 8001e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e04:	ee87 7a27 	vdiv.f32	s14, s14, s15
	mx *= norm;
 8001e08:	ee6d da87 	vmul.f32	s27, s27, s14
	my *= norm;
 8001e0c:	ee2d da07 	vmul.f32	s26, s26, s14
	mz *= norm;
 8001e10:	ee6c ca87 	vmul.f32	s25, s25, s14
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e14:	ee7d 6aad 	vadd.f32	s13, s27, s27
 8001e18:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001e1c:	ee76 7a6e 	vsub.f32	s15, s12, s29
 8001e20:	ee77 7ace 	vsub.f32	s15, s15, s28
 8001e24:	edcd 7a08 	vstr	s15, [sp, #32]
 8001e28:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8001e2c:	ee7d 5a0d 	vadd.f32	s11, s26, s26
 8001e30:	ee3f 5aeb 	vsub.f32	s10, s31, s23
 8001e34:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 8001e38:	ee65 7a85 	vmul.f32	s15, s11, s10
 8001e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ 2.0f * mz * (q2q4 + q1q3);
 8001e40:	ee7c 4aac 	vadd.f32	s9, s25, s25
 8001e44:	ee3f 4a0c 	vadd.f32	s8, s30, s24
 8001e48:	ed8d 4a0b 	vstr	s8, [sp, #44]	; 0x2c
 8001e4c:	ee64 7a84 	vmul.f32	s15, s9, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e50:	ee37 7a27 	vadd.f32	s14, s14, s15
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e54:	ee7b 7aaf 	vadd.f32	s15, s23, s31
 8001e58:	edcd 6a07 	vstr	s13, [sp, #28]
 8001e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e60:	eddd 3a01 	vldr	s7, [sp, #4]
 8001e64:	ee76 fa63 	vsub.f32	s31, s12, s7
 8001e68:	ee7f bace 	vsub.f32	s23, s31, s28
 8001e6c:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8001e70:	ee65 baab 	vmul.f32	s23, s11, s23
 8001e74:	ee77 7aab 	vadd.f32	s15, s15, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e78:	ed9d 3a02 	vldr	s6, [sp, #8]
 8001e7c:	eddd 2a00 	vldr	s5, [sp]
 8001e80:	ee73 6a62 	vsub.f32	s13, s6, s5
 8001e84:	eef0 ba64 	vmov.f32	s23, s9
 8001e88:	ee64 6aa6 	vmul.f32	s13, s9, s13
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
	bx = sqrt((hx * hx) + (hy * hy));
 8001e90:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001e94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e98:	ee37 2a27 	vadd.f32	s4, s14, s15
 8001e9c:	ee12 0a10 	vmov	r0, s4
 8001ea0:	f7fe fb5a 	bl	8000558 <__aeabi_f2d>
 8001ea4:	ec41 0b10 	vmov	d0, r0, r1
 8001ea8:	f005 febe 	bl	8007c28 <sqrt>
 8001eac:	ec51 0b10 	vmov	r0, r1, d0
 8001eb0:	f7fe fe82 	bl	8000bb8 <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001eb4:	ee3c ca4f 	vsub.f32	s24, s24, s30
 8001eb8:	eddd 6a07 	vldr	s13, [sp, #28]
 8001ebc:	ee26 7a8c 	vmul.f32	s14, s13, s24
 8001ec0:	eddd 4a00 	vldr	s9, [sp]
 8001ec4:	ed9d 3a02 	vldr	s6, [sp, #8]
 8001ec8:	ee34 5a83 	vadd.f32	s10, s9, s6
 8001ecc:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8001ed0:	ee65 7a85 	vmul.f32	s15, s11, s10
 8001ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ed8:	ee7f 4aee 	vsub.f32	s9, s31, s29
 8001edc:	ee6b 7aa4 	vmul.f32	s15, s23, s9
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001ee4:	ee7c 7a0c 	vadd.f32	s15, s24, s24
	vy = 2.0f * (q1q2 + q3q4);
 8001ee8:	ee35 6a05 	vadd.f32	s12, s10, s10
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001eec:	eddd 5a03 	vldr	s11, [sp, #12]
 8001ef0:	eddd 3a01 	vldr	s7, [sp, #4]
 8001ef4:	ee75 6ae3 	vsub.f32	s13, s11, s7
 8001ef8:	ee76 eaee 	vsub.f32	s29, s13, s29
 8001efc:	ee3e ea8e 	vadd.f32	s28, s29, s28
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001f00:	ee05 0a90 	vmov	s11, r0
 8001f04:	ee75 faa5 	vadd.f32	s31, s11, s11
 8001f08:	eddd 6a08 	vldr	s13, [sp, #32]
 8001f0c:	ee26 faaf 	vmul.f32	s30, s13, s31
 8001f10:	ee37 7a07 	vadd.f32	s14, s14, s14
 8001f14:	ee2c ca07 	vmul.f32	s24, s24, s14
 8001f18:	ee3f ca0c 	vadd.f32	s24, s30, s24
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f1c:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 8001f20:	ee66 5aaf 	vmul.f32	s11, s13, s31
 8001f24:	ee25 5a07 	vmul.f32	s10, s10, s14
 8001f28:	ee75 5a85 	vadd.f32	s11, s11, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f2c:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 8001f30:	ee64 fa2f 	vmul.f32	s31, s8, s31
 8001f34:	ee24 7a87 	vmul.f32	s14, s9, s14
 8001f38:	ee7f fa87 	vadd.f32	s31, s31, s14
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f3c:	ee6a 6a8e 	vmul.f32	s13, s21, s28
 8001f40:	ee2a 7a06 	vmul.f32	s14, s20, s12
 8001f44:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8001f48:	ee2d 7a2f 	vmul.f32	s14, s26, s31
 8001f4c:	ee2c 5aa5 	vmul.f32	s10, s25, s11
 8001f50:	ee37 7a45 	vsub.f32	s14, s14, s10
 8001f54:	ee76 6a87 	vadd.f32	s13, s13, s14
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f58:	ee2a aa27 	vmul.f32	s20, s20, s15
 8001f5c:	ee2b 7a0e 	vmul.f32	s14, s22, s28
 8001f60:	ee3a 7a47 	vsub.f32	s14, s20, s14
 8001f64:	ee6c ca8c 	vmul.f32	s25, s25, s24
 8001f68:	ee6d faaf 	vmul.f32	s31, s27, s31
 8001f6c:	ee7c faef 	vsub.f32	s31, s25, s31
 8001f70:	ee37 7a2f 	vadd.f32	s14, s14, s31
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f74:	ee2b ba06 	vmul.f32	s22, s22, s12
 8001f78:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8001f7c:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8001f80:	ee6d daa5 	vmul.f32	s27, s27, s11
 8001f84:	ee2d da0c 	vmul.f32	s26, s26, s24
 8001f88:	ee3d dacd 	vsub.f32	s26, s27, s26
 8001f8c:	ee77 7a8d 	vadd.f32	s15, s15, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001f90:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <MahonyQuaternionUpdate+0x3c4>)
 8001f92:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80020c0 <MahonyQuaternionUpdate+0x3c8>
 8001f96:	ed83 6a00 	vstr	s12, [r3]
		eInt[1] = 0.0f;
 8001f9a:	ed83 6a01 	vstr	s12, [r3, #4]
		eInt[2] = 0.0f;
 8001f9e:	ed83 6a02 	vstr	s12, [r3, #8]
	gx = gx + Kp * ex + Ki * eInt[0];
 8001fa2:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 8001fa6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001faa:	eddd 4a04 	vldr	s9, [sp, #16]
 8001fae:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8001fb2:	ee76 6a86 	vadd.f32	s13, s13, s12
	gy = gy + Kp * ey + Ki * eInt[1];
 8001fb6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001fba:	eddd 4a05 	vldr	s9, [sp, #20]
 8001fbe:	ee37 7a24 	vadd.f32	s14, s14, s9
 8001fc2:	ee37 7a06 	vadd.f32	s14, s14, s12
	gz = gz + Kp * ez + Ki * eInt[2];
 8001fc6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001fca:	eddd 5a06 	vldr	s11, [sp, #24]
 8001fce:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001fd2:	ee77 7a86 	vadd.f32	s15, s15, s12
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001fd6:	ee69 5a66 	vnmul.f32	s11, s18, s13
 8001fda:	ee28 6a87 	vmul.f32	s12, s17, s14
 8001fde:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8001fe2:	ee28 6a27 	vmul.f32	s12, s16, s15
 8001fe6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <MahonyQuaternionUpdate+0x3cc>)
 8001fec:	ed93 6a00 	vldr	s12, [r3]
 8001ff0:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8001ff4:	ee26 6a05 	vmul.f32	s12, s12, s10
 8001ff8:	ee65 5a86 	vmul.f32	s11, s11, s12
 8001ffc:	ee79 9aa5 	vadd.f32	s19, s19, s11
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8002000:	ee66 aaa9 	vmul.f32	s21, s13, s19
 8002004:	ee68 5aa7 	vmul.f32	s11, s17, s15
 8002008:	ee7a aaa5 	vadd.f32	s21, s21, s11
 800200c:	ee68 5a07 	vmul.f32	s11, s16, s14
 8002010:	ee7a aae5 	vsub.f32	s21, s21, s11
 8002014:	ee66 aa2a 	vmul.f32	s21, s12, s21
 8002018:	ee79 aa2a 	vadd.f32	s21, s18, s21
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 800201c:	ee27 aa29 	vmul.f32	s20, s14, s19
 8002020:	ee69 5a27 	vmul.f32	s11, s18, s15
 8002024:	ee3a aa65 	vsub.f32	s20, s20, s11
 8002028:	ee68 5a26 	vmul.f32	s11, s16, s13
 800202c:	ee3a aa25 	vadd.f32	s20, s20, s11
 8002030:	ee26 aa0a 	vmul.f32	s20, s12, s20
 8002034:	ee38 aa8a 	vadd.f32	s20, s17, s20
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8002038:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800203c:	ee29 9a07 	vmul.f32	s18, s18, s14
 8002040:	ee37 9a89 	vadd.f32	s18, s15, s18
 8002044:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8002048:	ee79 8a68 	vsub.f32	s17, s18, s17
 800204c:	ee66 8a28 	vmul.f32	s17, s12, s17
 8002050:	ee38 8a28 	vadd.f32	s16, s16, s17
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8002054:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8002058:	ee2a 7aaa 	vmul.f32	s14, s21, s21
 800205c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002060:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 8002064:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002068:	ee28 7a08 	vmul.f32	s14, s16, s16
 800206c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002070:	ee17 0a90 	vmov	r0, s15
 8002074:	f7fe fa70 	bl	8000558 <__aeabi_f2d>
 8002078:	ec41 0b10 	vmov	d0, r0, r1
 800207c:	f005 fdd4 	bl	8007c28 <sqrt>
 8002080:	ec51 0b10 	vmov	r0, r1, d0
 8002084:	f7fe fd98 	bl	8000bb8 <__aeabi_d2f>
	norm = 1.0f / norm;
 8002088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800208c:	ee07 0a90 	vmov	s15, r0
 8002090:	eec7 7a27 	vdiv.f32	s15, s14, s15
	q[0] = q1 * norm;
 8002094:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <MahonyQuaternionUpdate+0x3c0>)
 800209a:	edc3 9a00 	vstr	s19, [r3]
	q[1] = q2 * norm;
 800209e:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80020a2:	edc3 aa01 	vstr	s21, [r3, #4]
	q[2] = q3 * norm;
 80020a6:	ee2a aa27 	vmul.f32	s20, s20, s15
 80020aa:	ed83 aa02 	vstr	s20, [r3, #8]
	q[3] = q4 * norm;
 80020ae:	ee28 8a27 	vmul.f32	s16, s16, s15
 80020b2:	ed83 8a03 	vstr	s16, [r3, #12]
 80020b6:	e677      	b.n	8001da8 <MahonyQuaternionUpdate+0xb0>
 80020b8:	2000001c 	.word	0x2000001c
 80020bc:	20000250 	.word	0x20000250
 80020c0:	00000000 	.word	0x00000000
 80020c4:	2000024c 	.word	0x2000024c

080020c8 <calc_RollPitchYaw>:
void calc_RollPitchYaw(int counter_value) {
 80020c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020cc:	ed2d 8b04 	vpush	{d8-d9}
 80020d0:	4604      	mov	r4, r0
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if	 data ready interrupt
 80020d2:	223a      	movs	r2, #58	; 0x3a
 80020d4:	21d1      	movs	r1, #209	; 0xd1
 80020d6:	20d0      	movs	r0, #208	; 0xd0
 80020d8:	f7fe ff60 	bl	8000f9c <readByte>
 80020dc:	f010 0f01 	tst.w	r0, #1
 80020e0:	f040 817a 	bne.w	80023d8 <calc_RollPitchYaw+0x310>
	Now = counter_value;
 80020e4:	4ba8      	ldr	r3, [pc, #672]	; (8002388 <calc_RollPitchYaw+0x2c0>)
 80020e6:	601c      	str	r4, [r3, #0]
	if(Now - lastUpdate < 0){
 80020e8:	4ba8      	ldr	r3, [pc, #672]	; (800238c <calc_RollPitchYaw+0x2c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	1ae2      	subs	r2, r4, r3
 80020ee:	f100 8220 	bmi.w	8002532 <calc_RollPitchYaw+0x46a>
	deltat = (float) ((Now - lastUpdate) * (1 / (100000000.0f / 2000.0f))); // set integration time by time elapsed since last filter update
 80020f2:	ee07 2a90 	vmov	s15, r2
 80020f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fa:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002390 <calc_RollPitchYaw+0x2c8>
 80020fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002102:	4ba4      	ldr	r3, [pc, #656]	; (8002394 <calc_RollPitchYaw+0x2cc>)
 8002104:	edc3 7a00 	vstr	s15, [r3]
	lastUpdate = Now;
 8002108:	4ba0      	ldr	r3, [pc, #640]	; (800238c <calc_RollPitchYaw+0x2c4>)
 800210a:	601c      	str	r4, [r3, #0]
	sum += deltat;
 800210c:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 80023d4 <calc_RollPitchYaw+0x30c>
 8002110:	edda 7a00 	vldr	s15, [sl]
 8002114:	4b9f      	ldr	r3, [pc, #636]	; (8002394 <calc_RollPitchYaw+0x2cc>)
 8002116:	ed93 7a00 	vldr	s14, [r3]
 800211a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800211e:	edca 7a00 	vstr	s15, [sl]
	sumCount++;
 8002122:	4d9d      	ldr	r5, [pc, #628]	; (8002398 <calc_RollPitchYaw+0x2d0>)
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	602b      	str	r3, [r5, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 800212a:	4b9c      	ldr	r3, [pc, #624]	; (800239c <calc_RollPitchYaw+0x2d4>)
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	f7fe fa13 	bl	8000558 <__aeabi_f2d>
 8002132:	a38f      	add	r3, pc, #572	; (adr r3, 8002370 <calc_RollPitchYaw+0x2a8>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe fa66 	bl	8000608 <__aeabi_dmul>
 800213c:	2200      	movs	r2, #0
 800213e:	4b98      	ldr	r3, [pc, #608]	; (80023a0 <calc_RollPitchYaw+0x2d8>)
 8002140:	f7fe fb8c 	bl	800085c <__aeabi_ddiv>
 8002144:	4606      	mov	r6, r0
 8002146:	460f      	mov	r7, r1
 8002148:	4b96      	ldr	r3, [pc, #600]	; (80023a4 <calc_RollPitchYaw+0x2dc>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	f7fe fa04 	bl	8000558 <__aeabi_f2d>
 8002150:	a387      	add	r3, pc, #540	; (adr r3, 8002370 <calc_RollPitchYaw+0x2a8>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe fa57 	bl	8000608 <__aeabi_dmul>
 800215a:	2200      	movs	r2, #0
 800215c:	4b90      	ldr	r3, [pc, #576]	; (80023a0 <calc_RollPitchYaw+0x2d8>)
 800215e:	f7fe fb7d 	bl	800085c <__aeabi_ddiv>
 8002162:	4680      	mov	r8, r0
 8002164:	4689      	mov	r9, r1
 8002166:	4b90      	ldr	r3, [pc, #576]	; (80023a8 <calc_RollPitchYaw+0x2e0>)
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	f7fe f9f5 	bl	8000558 <__aeabi_f2d>
 800216e:	a380      	add	r3, pc, #512	; (adr r3, 8002370 <calc_RollPitchYaw+0x2a8>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe fa48 	bl	8000608 <__aeabi_dmul>
 8002178:	2200      	movs	r2, #0
 800217a:	4b89      	ldr	r3, [pc, #548]	; (80023a0 <calc_RollPitchYaw+0x2d8>)
 800217c:	f7fe fb6e 	bl	800085c <__aeabi_ddiv>
 8002180:	4b8a      	ldr	r3, [pc, #552]	; (80023ac <calc_RollPitchYaw+0x2e4>)
 8002182:	ed93 9a00 	vldr	s18, [r3]
 8002186:	4b8a      	ldr	r3, [pc, #552]	; (80023b0 <calc_RollPitchYaw+0x2e8>)
 8002188:	edd3 8a00 	vldr	s17, [r3]
 800218c:	4b89      	ldr	r3, [pc, #548]	; (80023b4 <calc_RollPitchYaw+0x2ec>)
 800218e:	ed93 8a00 	vldr	s16, [r3]
 8002192:	f7fe fd11 	bl	8000bb8 <__aeabi_d2f>
 8002196:	4683      	mov	fp, r0
 8002198:	4640      	mov	r0, r8
 800219a:	4649      	mov	r1, r9
 800219c:	f7fe fd0c 	bl	8000bb8 <__aeabi_d2f>
 80021a0:	4604      	mov	r4, r0
 80021a2:	4630      	mov	r0, r6
 80021a4:	4639      	mov	r1, r7
 80021a6:	f7fe fd07 	bl	8000bb8 <__aeabi_d2f>
 80021aa:	eeb0 4a49 	vmov.f32	s8, s18
 80021ae:	eef0 3a68 	vmov.f32	s7, s17
 80021b2:	eeb0 3a48 	vmov.f32	s6, s16
 80021b6:	ee02 ba90 	vmov	s5, fp
 80021ba:	ee02 4a10 	vmov	s4, r4
 80021be:	ee01 0a90 	vmov	s3, r0
 80021c2:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <calc_RollPitchYaw+0x2f0>)
 80021c4:	ed93 1a00 	vldr	s2, [r3]
 80021c8:	4b7c      	ldr	r3, [pc, #496]	; (80023bc <calc_RollPitchYaw+0x2f4>)
 80021ca:	edd3 0a00 	vldr	s1, [r3]
 80021ce:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <calc_RollPitchYaw+0x2f8>)
 80021d0:	ed93 0a00 	vldr	s0, [r3]
 80021d4:	f7ff fd90 	bl	8001cf8 <MahonyQuaternionUpdate>
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 80021d8:	4c7a      	ldr	r4, [pc, #488]	; (80023c4 <calc_RollPitchYaw+0x2fc>)
 80021da:	edd4 9a01 	vldr	s19, [r4, #4]
 80021de:	ed94 9a02 	vldr	s18, [r4, #8]
 80021e2:	ee29 7a89 	vmul.f32	s14, s19, s18
 80021e6:	ed94 8a00 	vldr	s16, [r4]
 80021ea:	edd4 8a03 	vldr	s17, [r4, #12]
 80021ee:	ee68 7a28 	vmul.f32	s15, s16, s17
 80021f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f6:	ee17 0a90 	vmov	r0, s15
 80021fa:	f7fe f9ad 	bl	8000558 <__aeabi_f2d>
 80021fe:	4606      	mov	r6, r0
 8002200:	460f      	mov	r7, r1
 8002202:	ee28 8a08 	vmul.f32	s16, s16, s16
 8002206:	ee69 9aa9 	vmul.f32	s19, s19, s19
 800220a:	ee38 8a29 	vadd.f32	s16, s16, s19
 800220e:	ee29 9a09 	vmul.f32	s18, s18, s18
 8002212:	ee38 8a49 	vsub.f32	s16, s16, s18
 8002216:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800221a:	ee78 7a68 	vsub.f32	s15, s16, s17
 800221e:	ee17 0a90 	vmov	r0, s15
 8002222:	f7fe f999 	bl	8000558 <__aeabi_f2d>
 8002226:	4680      	mov	r8, r0
 8002228:	4689      	mov	r9, r1
 800222a:	4632      	mov	r2, r6
 800222c:	463b      	mov	r3, r7
 800222e:	4630      	mov	r0, r6
 8002230:	4639      	mov	r1, r7
 8002232:	f7fe f833 	bl	800029c <__adddf3>
 8002236:	ec49 8b11 	vmov	d1, r8, r9
 800223a:	ec41 0b10 	vmov	d0, r0, r1
 800223e:	f005 fb81 	bl	8007944 <atan2>
 8002242:	ec51 0b10 	vmov	r0, r1, d0
 8002246:	f7fe fcb7 	bl	8000bb8 <__aeabi_d2f>
 800224a:	4e5f      	ldr	r6, [pc, #380]	; (80023c8 <calc_RollPitchYaw+0x300>)
 800224c:	6030      	str	r0, [r6, #0]
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 800224e:	ed94 7a01 	vldr	s14, [r4, #4]
 8002252:	edd4 7a03 	vldr	s15, [r4, #12]
 8002256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225a:	edd4 7a00 	vldr	s15, [r4]
 800225e:	edd4 6a02 	vldr	s13, [r4, #8]
 8002262:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226a:	ee17 0a90 	vmov	r0, s15
 800226e:	f7fe f973 	bl	8000558 <__aeabi_f2d>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	f7fe f811 	bl	800029c <__adddf3>
 800227a:	ec41 0b10 	vmov	d0, r0, r1
 800227e:	f005 fb09 	bl	8007894 <asin>
 8002282:	ec51 0b10 	vmov	r0, r1, d0
 8002286:	f7fe fc97 	bl	8000bb8 <__aeabi_d2f>
 800228a:	4f50      	ldr	r7, [pc, #320]	; (80023cc <calc_RollPitchYaw+0x304>)
 800228c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002290:	6038      	str	r0, [r7, #0]
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]),
 8002292:	ed94 8a00 	vldr	s16, [r4]
 8002296:	edd4 9a01 	vldr	s19, [r4, #4]
 800229a:	ee28 7a29 	vmul.f32	s14, s16, s19
 800229e:	ed94 9a02 	vldr	s18, [r4, #8]
 80022a2:	edd4 8a03 	vldr	s17, [r4, #12]
 80022a6:	ee69 7a28 	vmul.f32	s15, s18, s17
 80022aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ae:	ee17 0a90 	vmov	r0, s15
 80022b2:	f7fe f951 	bl	8000558 <__aeabi_f2d>
 80022b6:	4680      	mov	r8, r0
 80022b8:	4689      	mov	r9, r1
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 80022ba:	ee28 8a08 	vmul.f32	s16, s16, s16
 80022be:	ee69 9aa9 	vmul.f32	s19, s19, s19
 80022c2:	ee38 8a69 	vsub.f32	s16, s16, s19
 80022c6:	ee29 9a09 	vmul.f32	s18, s18, s18
 80022ca:	ee38 8a49 	vsub.f32	s16, s16, s18
 80022ce:	ee68 8aa8 	vmul.f32	s17, s17, s17
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]),
 80022d2:	ee78 7a28 	vadd.f32	s15, s16, s17
 80022d6:	ee17 0a90 	vmov	r0, s15
 80022da:	f7fe f93d 	bl	8000558 <__aeabi_f2d>
 80022de:	ec41 0b18 	vmov	d8, r0, r1
 80022e2:	4642      	mov	r2, r8
 80022e4:	464b      	mov	r3, r9
 80022e6:	4640      	mov	r0, r8
 80022e8:	4649      	mov	r1, r9
 80022ea:	f7fd ffd7 	bl	800029c <__adddf3>
 80022ee:	eeb0 1a48 	vmov.f32	s2, s16
 80022f2:	eef0 1a68 	vmov.f32	s3, s17
 80022f6:	ec41 0b10 	vmov	d0, r0, r1
 80022fa:	f005 fb23 	bl	8007944 <atan2>
 80022fe:	ec51 0b10 	vmov	r0, r1, d0
 8002302:	f7fe fc59 	bl	8000bb8 <__aeabi_d2f>
 8002306:	4604      	mov	r4, r0
	pitch *= 180.0 / PI;
 8002308:	6838      	ldr	r0, [r7, #0]
 800230a:	f7fe f925 	bl	8000558 <__aeabi_f2d>
 800230e:	a31a      	add	r3, pc, #104	; (adr r3, 8002378 <calc_RollPitchYaw+0x2b0>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fe f978 	bl	8000608 <__aeabi_dmul>
 8002318:	f7fe fc4e 	bl	8000bb8 <__aeabi_d2f>
 800231c:	6038      	str	r0, [r7, #0]
	yaw *= 180.0 / PI;
 800231e:	6830      	ldr	r0, [r6, #0]
 8002320:	f7fe f91a 	bl	8000558 <__aeabi_f2d>
 8002324:	a314      	add	r3, pc, #80	; (adr r3, 8002378 <calc_RollPitchYaw+0x2b0>)
 8002326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232a:	f7fe f96d 	bl	8000608 <__aeabi_dmul>
 800232e:	f7fe fc43 	bl	8000bb8 <__aeabi_d2f>
	yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8002332:	f7fe f911 	bl	8000558 <__aeabi_f2d>
 8002336:	a312      	add	r3, pc, #72	; (adr r3, 8002380 <calc_RollPitchYaw+0x2b8>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f7fd ffae 	bl	800029c <__adddf3>
 8002340:	f7fe fc3a 	bl	8000bb8 <__aeabi_d2f>
 8002344:	6030      	str	r0, [r6, #0]
	roll *= 180.0 / PI;
 8002346:	4620      	mov	r0, r4
 8002348:	f7fe f906 	bl	8000558 <__aeabi_f2d>
 800234c:	a30a      	add	r3, pc, #40	; (adr r3, 8002378 <calc_RollPitchYaw+0x2b0>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe f959 	bl	8000608 <__aeabi_dmul>
 8002356:	f7fe fc2f 	bl	8000bb8 <__aeabi_d2f>
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <calc_RollPitchYaw+0x308>)
 800235c:	6018      	str	r0, [r3, #0]
	sum = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	f8ca 3000 	str.w	r3, [sl]
	sumCount = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	602b      	str	r3, [r5, #0]
}
 8002368:	ecbd 8b04 	vpop	{d8-d9}
 800236c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002370:	54442d18 	.word	0x54442d18
 8002374:	400921fb 	.word	0x400921fb
 8002378:	1a63c1f8 	.word	0x1a63c1f8
 800237c:	404ca5dc 	.word	0x404ca5dc
 8002380:	9999999a 	.word	0x9999999a
 8002384:	3ff19999 	.word	0x3ff19999
 8002388:	20000248 	.word	0x20000248
 800238c:	2000025c 	.word	0x2000025c
 8002390:	37a7c5ac 	.word	0x37a7c5ac
 8002394:	2000024c 	.word	0x2000024c
 8002398:	2000027c 	.word	0x2000027c
 800239c:	20000380 	.word	0x20000380
 80023a0:	40668000 	.word	0x40668000
 80023a4:	20000338 	.word	0x20000338
 80023a8:	2000035c 	.word	0x2000035c
 80023ac:	20000364 	.word	0x20000364
 80023b0:	20000388 	.word	0x20000388
 80023b4:	2000034c 	.word	0x2000034c
 80023b8:	2000033c 	.word	0x2000033c
 80023bc:	20000384 	.word	0x20000384
 80023c0:	20000350 	.word	0x20000350
 80023c4:	2000001c 	.word	0x2000001c
 80023c8:	20000368 	.word	0x20000368
 80023cc:	20000374 	.word	0x20000374
 80023d0:	20000378 	.word	0x20000378
 80023d4:	20000278 	.word	0x20000278
		readAccelData(accelCount);  // Read the x/y/z adc values
 80023d8:	4d5e      	ldr	r5, [pc, #376]	; (8002554 <calc_RollPitchYaw+0x48c>)
 80023da:	4628      	mov	r0, r5
 80023dc:	f7fe fea6 	bl	800112c <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 80023e0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80023e4:	ee07 3a10 	vmov	s14, r3
 80023e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023ec:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <calc_RollPitchYaw+0x490>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f6:	4b59      	ldr	r3, [pc, #356]	; (800255c <calc_RollPitchYaw+0x494>)
 80023f8:	edd3 6a00 	vldr	s13, [r3]
 80023fc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002400:	4a57      	ldr	r2, [pc, #348]	; (8002560 <calc_RollPitchYaw+0x498>)
 8002402:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 8002406:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800240a:	ee07 2a10 	vmov	s14, r2
 800240e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002412:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002416:	edd3 6a01 	vldr	s13, [r3, #4]
 800241a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800241e:	4a51      	ldr	r2, [pc, #324]	; (8002564 <calc_RollPitchYaw+0x49c>)
 8002420:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 8002424:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8002428:	ee07 2a10 	vmov	s14, r2
 800242c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002434:	ed93 7a02 	vldr	s14, [r3, #8]
 8002438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <calc_RollPitchYaw+0x4a0>)
 800243e:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 8002442:	4d4a      	ldr	r5, [pc, #296]	; (800256c <calc_RollPitchYaw+0x4a4>)
 8002444:	4628      	mov	r0, r5
 8002446:	f7fe fe93 	bl	8001170 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 800244a:	f9b5 3000 	ldrsh.w	r3, [r5]
 800244e:	ee07 3a10 	vmov	s14, r3
 8002452:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002456:	4b46      	ldr	r3, [pc, #280]	; (8002570 <calc_RollPitchYaw+0x4a8>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002460:	4b44      	ldr	r3, [pc, #272]	; (8002574 <calc_RollPitchYaw+0x4ac>)
 8002462:	edd3 6a00 	vldr	s13, [r3]
 8002466:	ee37 7a66 	vsub.f32	s14, s14, s13
 800246a:	4a43      	ldr	r2, [pc, #268]	; (8002578 <calc_RollPitchYaw+0x4b0>)
 800246c:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8002470:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8002474:	ee07 2a10 	vmov	s14, r2
 8002478:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800247c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002480:	edd3 6a01 	vldr	s13, [r3, #4]
 8002484:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002488:	4a3c      	ldr	r2, [pc, #240]	; (800257c <calc_RollPitchYaw+0x4b4>)
 800248a:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 800248e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8002492:	ee07 2a10 	vmov	s14, r2
 8002496:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800249a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249e:	ed93 7a02 	vldr	s14, [r3, #8]
 80024a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024a6:	4b36      	ldr	r3, [pc, #216]	; (8002580 <calc_RollPitchYaw+0x4b8>)
 80024a8:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 80024ac:	4d35      	ldr	r5, [pc, #212]	; (8002584 <calc_RollPitchYaw+0x4bc>)
 80024ae:	4628      	mov	r0, r5
 80024b0:	f7fe fe80 	bl	80011b4 <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 80024b4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80024b8:	ee07 3a10 	vmov	s14, r3
 80024bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024c0:	4b31      	ldr	r3, [pc, #196]	; (8002588 <calc_RollPitchYaw+0x4c0>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ca:	4a30      	ldr	r2, [pc, #192]	; (800258c <calc_RollPitchYaw+0x4c4>)
 80024cc:	edd2 6a00 	vldr	s13, [r2]
 80024d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024d4:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <calc_RollPitchYaw+0x4c8>)
 80024d6:	edd3 6a00 	vldr	s13, [r3]
 80024da:	ee37 7a66 	vsub.f32	s14, s14, s13
 80024de:	492d      	ldr	r1, [pc, #180]	; (8002594 <calc_RollPitchYaw+0x4cc>)
 80024e0:	ed81 7a00 	vstr	s14, [r1]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80024e4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80024e8:	ee07 1a10 	vmov	s14, r1
 80024ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024f4:	edd2 6a01 	vldr	s13, [r2, #4]
 80024f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8002500:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002504:	4924      	ldr	r1, [pc, #144]	; (8002598 <calc_RollPitchYaw+0x4d0>)
 8002506:	ed81 7a00 	vstr	s14, [r1]
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 800250a:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 800250e:	ee07 1a10 	vmov	s14, r1
 8002512:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251a:	ed92 7a02 	vldr	s14, [r2, #8]
 800251e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002522:	ed93 7a02 	vldr	s14, [r3, #8]
 8002526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <calc_RollPitchYaw+0x4d4>)
 800252c:	edc3 7a00 	vstr	s15, [r3]
 8002530:	e5d8      	b.n	80020e4 <calc_RollPitchYaw+0x1c>
		deltat = (float) (((65535-lastUpdate)+Now) * (1 / (100000000.0f / 2000.0f)));
 8002532:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002536:	33ff      	adds	r3, #255	; 0xff
 8002538:	4423      	add	r3, r4
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002542:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80025a0 <calc_RollPitchYaw+0x4d8>
 8002546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <calc_RollPitchYaw+0x4dc>)
 800254c:	edc3 7a00 	vstr	s15, [r3]
 8002550:	e5da      	b.n	8002108 <calc_RollPitchYaw+0x40>
 8002552:	bf00      	nop
 8002554:	200002c4 	.word	0x200002c4
 8002558:	20000354 	.word	0x20000354
 800255c:	20000004 	.word	0x20000004
 8002560:	20000350 	.word	0x20000350
 8002564:	20000384 	.word	0x20000384
 8002568:	2000033c 	.word	0x2000033c
 800256c:	20000344 	.word	0x20000344
 8002570:	20000360 	.word	0x20000360
 8002574:	20000010 	.word	0x20000010
 8002578:	20000380 	.word	0x20000380
 800257c:	20000338 	.word	0x20000338
 8002580:	2000035c 	.word	0x2000035c
 8002584:	2000036c 	.word	0x2000036c
 8002588:	2000037c 	.word	0x2000037c
 800258c:	20000260 	.word	0x20000260
 8002590:	2000026c 	.word	0x2000026c
 8002594:	20000388 	.word	0x20000388
 8002598:	2000034c 	.word	0x2000034c
 800259c:	20000364 	.word	0x20000364
 80025a0:	37a7c5ac 	.word	0x37a7c5ac
 80025a4:	2000024c 	.word	0x2000024c

080025a8 <pid_calculate_pitch>:
float pid_calculate_pitch(float IMU_pitch_value, int timer_value) {

	//pitch calculations

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 80025a8:	4b44      	ldr	r3, [pc, #272]	; (80026bc <pid_calculate_pitch+0x114>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80025b2:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <pid_calculate_pitch+0x118>)
 80025b4:	ed83 0a00 	vstr	s0, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 80025b8:	4b42      	ldr	r3, [pc, #264]	; (80026c4 <pid_calculate_pitch+0x11c>)
 80025ba:	edd3 6a00 	vldr	s13, [r3]
 80025be:	ee60 6a26 	vmul.f32	s13, s0, s13
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <pid_calculate_pitch+0x120>)
 80025c4:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error);
 80025c8:	4b40      	ldr	r3, [pc, #256]	; (80026cc <pid_calculate_pitch+0x124>)
 80025ca:	ed93 7a00 	vldr	s14, [r3]
 80025ce:	ee20 7a07 	vmul.f32	s14, s0, s14
 80025d2:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <pid_calculate_pitch+0x128>)
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025dc:	ed83 7a00 	vstr	s14, [r3]

	//Clip i component?
		if (pitch_i < -800) {
 80025e0:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80026d4 <pid_calculate_pitch+0x12c>
 80025e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	d544      	bpl.n	8002678 <pid_calculate_pitch+0xd0>
			pitch_i = -800;
 80025ee:	edc3 7a00 	vstr	s15, [r3]
		} else if (pitch_i > 800) {
			pitch_i = 800;
		}

	//Derivative component
	pitch_now = timer_value;
 80025f2:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <pid_calculate_pitch+0x130>)
 80025f4:	6018      	str	r0, [r3, #0]

	if (pitch_now - pitch_last_update < 0) {
 80025f6:	4b39      	ldr	r3, [pc, #228]	; (80026dc <pid_calculate_pitch+0x134>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1ac2      	subs	r2, r0, r3
 80025fc:	d447      	bmi.n	800268e <pid_calculate_pitch+0xe6>
		//Formula for getting timer count into seconds = COUNT * (1/TIMER_CLK)*PRESCALER
		pitch_elapsed_time = (float) (((65535 - pitch_last_update) + pitch_now)* (1 / (100000000.0f / 2000.0f)));

	} else {
		//Otherwise normally the count difference will be positive
		pitch_elapsed_time = (float) ((pitch_now - pitch_last_update) * (1 / (100000000.0f / 2000.0f))); // set integration time by time elapsed since last filter update
 80025fe:	ee07 2a90 	vmov	s15, r2
 8002602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002606:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80026e0 <pid_calculate_pitch+0x138>
 800260a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800260e:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <pid_calculate_pitch+0x13c>)
 8002610:	edc3 7a00 	vstr	s15, [r3]
	}

	pitch_d = pitch_d_gain
			* ((pitch_error - pitch_last_d_error) / pitch_elapsed_time);
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <pid_calculate_pitch+0x140>)
 8002616:	ed93 7a00 	vldr	s14, [r3]
 800261a:	ee30 7a47 	vsub.f32	s14, s0, s14
 800261e:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <pid_calculate_pitch+0x13c>)
 8002620:	ed92 6a00 	vldr	s12, [r2]
 8002624:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8002628:	4a30      	ldr	r2, [pc, #192]	; (80026ec <pid_calculate_pitch+0x144>)
 800262a:	ed92 7a00 	vldr	s14, [r2]
 800262e:	ee67 7a87 	vmul.f32	s15, s15, s14
	pitch_d = pitch_d_gain
 8002632:	4a2f      	ldr	r2, [pc, #188]	; (80026f0 <pid_calculate_pitch+0x148>)
 8002634:	edc2 7a00 	vstr	s15, [r2]
	pitch_last_update = pitch_now;
 8002638:	4a28      	ldr	r2, [pc, #160]	; (80026dc <pid_calculate_pitch+0x134>)
 800263a:	6010      	str	r0, [r2, #0]
	pitch_last_d_error = pitch_error;
 800263c:	ed83 0a00 	vstr	s0, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8002640:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <pid_calculate_pitch+0x128>)
 8002642:	ed93 7a00 	vldr	s14, [r3]
 8002646:	ee76 6a87 	vadd.f32	s13, s13, s14
 800264a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <pid_calculate_pitch+0x14c>)
 8002650:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -800) {
 8002654:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80026d4 <pid_calculate_pitch+0x12c>
 8002658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002660:	d425      	bmi.n	80026ae <pid_calculate_pitch+0x106>
		pitch_output = -800;
	} else if (pitch_output > 800) {
 8002662:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80026f8 <pid_calculate_pitch+0x150>
 8002666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	dd20      	ble.n	80026b2 <pid_calculate_pitch+0x10a>
		pitch_output = 800;
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <pid_calculate_pitch+0x14c>)
 8002672:	ed83 7a00 	vstr	s14, [r3]
 8002676:	e01c      	b.n	80026b2 <pid_calculate_pitch+0x10a>
		} else if (pitch_i > 800) {
 8002678:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80026f8 <pid_calculate_pitch+0x150>
 800267c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002684:	ddb5      	ble.n	80025f2 <pid_calculate_pitch+0x4a>
			pitch_i = 800;
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <pid_calculate_pitch+0x128>)
 8002688:	edc3 7a00 	vstr	s15, [r3]
 800268c:	e7b1      	b.n	80025f2 <pid_calculate_pitch+0x4a>
		pitch_elapsed_time = (float) (((65535 - pitch_last_update) + pitch_now)* (1 / (100000000.0f / 2000.0f)));
 800268e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002692:	33ff      	adds	r3, #255	; 0xff
 8002694:	4403      	add	r3, r0
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800269e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80026e0 <pid_calculate_pitch+0x138>
 80026a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <pid_calculate_pitch+0x13c>)
 80026a8:	edc3 7a00 	vstr	s15, [r3]
 80026ac:	e7b2      	b.n	8002614 <pid_calculate_pitch+0x6c>
		pitch_output = -800;
 80026ae:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <pid_calculate_pitch+0x14c>)
 80026b4:	ed93 0a00 	vldr	s0, [r3]
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000298 	.word	0x20000298
 80026c0:	20000284 	.word	0x20000284
 80026c4:	20000034 	.word	0x20000034
 80026c8:	20000394 	.word	0x20000394
 80026cc:	20000030 	.word	0x20000030
 80026d0:	20000398 	.word	0x20000398
 80026d4:	c4480000 	.word	0xc4480000
 80026d8:	20000290 	.word	0x20000290
 80026dc:	2000028c 	.word	0x2000028c
 80026e0:	37a7c5ac 	.word	0x37a7c5ac
 80026e4:	20000280 	.word	0x20000280
 80026e8:	20000288 	.word	0x20000288
 80026ec:	2000002c 	.word	0x2000002c
 80026f0:	20000390 	.word	0x20000390
 80026f4:	20000294 	.word	0x20000294
 80026f8:	44480000 	.word	0x44480000

080026fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026fc:	b510      	push	{r4, lr}
 80026fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_InitTick+0x40>)
 8002702:	7818      	ldrb	r0, [r3, #0]
 8002704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002708:	fbb3 f3f0 	udiv	r3, r3, r0
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <HAL_InitTick+0x44>)
 800270e:	6810      	ldr	r0, [r2, #0]
 8002710:	fbb0 f0f3 	udiv	r0, r0, r3
 8002714:	f000 f8ac 	bl	8002870 <HAL_SYSTICK_Config>
 8002718:	b968      	cbnz	r0, 8002736 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271a:	2c0f      	cmp	r4, #15
 800271c:	d901      	bls.n	8002722 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800271e:	2001      	movs	r0, #1
 8002720:	e00a      	b.n	8002738 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002722:	2200      	movs	r2, #0
 8002724:	4621      	mov	r1, r4
 8002726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800272a:	f000 f85f 	bl	80027ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_InitTick+0x48>)
 8002730:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2000      	movs	r0, #0
 8002734:	e000      	b.n	8002738 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
}
 8002738:	bd10      	pop	{r4, pc}
 800273a:	bf00      	nop
 800273c:	20000038 	.word	0x20000038
 8002740:	20000050 	.word	0x20000050
 8002744:	2000003c 	.word	0x2000003c

08002748 <HAL_Init>:
{
 8002748:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_Init+0x30>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002752:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800275a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002762:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002764:	2003      	movs	r0, #3
 8002766:	f000 f82f 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800276a:	2000      	movs	r0, #0
 800276c:	f7ff ffc6 	bl	80026fc <HAL_InitTick>
  HAL_MspInit();
 8002770:	f002 fb1e 	bl	8004db0 <HAL_MspInit>
}
 8002774:	2000      	movs	r0, #0
 8002776:	bd08      	pop	{r3, pc}
 8002778:	40023c00 	.word	0x40023c00

0800277c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800277c:	4a03      	ldr	r2, [pc, #12]	; (800278c <HAL_IncTick+0x10>)
 800277e:	6811      	ldr	r1, [r2, #0]
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_IncTick+0x14>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	440b      	add	r3, r1
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	200003a4 	.word	0x200003a4
 8002790:	20000038 	.word	0x20000038

08002794 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002794:	4b01      	ldr	r3, [pc, #4]	; (800279c <HAL_GetTick+0x8>)
 8002796:	6818      	ldr	r0, [r3, #0]
}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	200003a4 	.word	0x200003a4

080027a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff fff6 	bl	8002794 <HAL_GetTick>
 80027a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027aa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80027ae:	d002      	beq.n	80027b6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_Delay+0x24>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027b6:	f7ff ffed 	bl	8002794 <HAL_GetTick>
 80027ba:	1b40      	subs	r0, r0, r5
 80027bc:	42a0      	cmp	r0, r4
 80027be:	d3fa      	bcc.n	80027b6 <HAL_Delay+0x16>
  {
  }
}
 80027c0:	bd38      	pop	{r3, r4, r5, pc}
 80027c2:	bf00      	nop
 80027c4:	20000038 	.word	0x20000038

080027c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c8:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80027ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d4:	0200      	lsls	r0, r0, #8
 80027d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027da:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80027dc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80027e0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80027e4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_NVIC_SetPriority+0x60>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f6:	f1c3 0407 	rsb	r4, r3, #7
 80027fa:	2c04      	cmp	r4, #4
 80027fc:	bf28      	it	cs
 80027fe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002800:	1d1d      	adds	r5, r3, #4
 8002802:	2d06      	cmp	r5, #6
 8002804:	d918      	bls.n	8002838 <HAL_NVIC_SetPriority+0x4c>
 8002806:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800280c:	fa05 f404 	lsl.w	r4, r5, r4
 8002810:	ea21 0104 	bic.w	r1, r1, r4
 8002814:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002816:	fa05 f303 	lsl.w	r3, r5, r3
 800281a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002820:	2800      	cmp	r0, #0
 8002822:	db0b      	blt.n	800283c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	0109      	lsls	r1, r1, #4
 8002826:	b2c9      	uxtb	r1, r1
 8002828:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800282c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002830:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002834:	bc30      	pop	{r4, r5}
 8002836:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002838:	2300      	movs	r3, #0
 800283a:	e7e5      	b.n	8002808 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	f000 000f 	and.w	r0, r0, #15
 8002840:	0109      	lsls	r1, r1, #4
 8002842:	b2c9      	uxtb	r1, r1
 8002844:	4b02      	ldr	r3, [pc, #8]	; (8002850 <HAL_NVIC_SetPriority+0x64>)
 8002846:	5419      	strb	r1, [r3, r0]
 8002848:	e7f4      	b.n	8002834 <HAL_NVIC_SetPriority+0x48>
 800284a:	bf00      	nop
 800284c:	e000ed00 	.word	0xe000ed00
 8002850:	e000ed14 	.word	0xe000ed14

08002854 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002854:	2800      	cmp	r0, #0
 8002856:	db07      	blt.n	8002868 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002858:	f000 021f 	and.w	r2, r0, #31
 800285c:	0940      	lsrs	r0, r0, #5
 800285e:	2301      	movs	r3, #1
 8002860:	4093      	lsls	r3, r2
 8002862:	4a02      	ldr	r2, [pc, #8]	; (800286c <HAL_NVIC_EnableIRQ+0x18>)
 8002864:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100

08002870 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002870:	3801      	subs	r0, #1
 8002872:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002876:	d20a      	bcs.n	800288e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_SYSTICK_Config+0x24>)
 800287a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	4a06      	ldr	r2, [pc, #24]	; (8002898 <HAL_SYSTICK_Config+0x28>)
 800287e:	21f0      	movs	r1, #240	; 0xf0
 8002880:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002884:	2000      	movs	r0, #0
 8002886:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800288e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e010 	.word	0xe000e010
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289c:	2300      	movs	r3, #0
 800289e:	2b0f      	cmp	r3, #15
 80028a0:	f200 80c5 	bhi.w	8002a2e <HAL_GPIO_Init+0x192>
{
 80028a4:	b4f0      	push	{r4, r5, r6, r7}
 80028a6:	b082      	sub	sp, #8
 80028a8:	e039      	b.n	800291e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028aa:	2204      	movs	r2, #4
 80028ac:	e000      	b.n	80028b0 <HAL_GPIO_Init+0x14>
 80028ae:	2200      	movs	r2, #0
 80028b0:	40b2      	lsls	r2, r6
 80028b2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b4:	3402      	adds	r4, #2
 80028b6:	4e5e      	ldr	r6, [pc, #376]	; (8002a30 <HAL_GPIO_Init+0x194>)
 80028b8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028bc:	4a5d      	ldr	r2, [pc, #372]	; (8002a34 <HAL_GPIO_Init+0x198>)
 80028be:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	43ea      	mvns	r2, r5
 80028c2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c6:	684f      	ldr	r7, [r1, #4]
 80028c8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80028cc:	d001      	beq.n	80028d2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80028ce:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80028d2:	4c58      	ldr	r4, [pc, #352]	; (8002a34 <HAL_GPIO_Init+0x198>)
 80028d4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80028d6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028dc:	684f      	ldr	r7, [r1, #4]
 80028de:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80028e2:	d001      	beq.n	80028e8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80028e4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80028e8:	4c52      	ldr	r4, [pc, #328]	; (8002a34 <HAL_GPIO_Init+0x198>)
 80028ea:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ec:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80028ee:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f2:	684f      	ldr	r7, [r1, #4]
 80028f4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80028f8:	d001      	beq.n	80028fe <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80028fa:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80028fe:	4c4d      	ldr	r4, [pc, #308]	; (8002a34 <HAL_GPIO_Init+0x198>)
 8002900:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002902:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002904:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002906:	684e      	ldr	r6, [r1, #4]
 8002908:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800290c:	d001      	beq.n	8002912 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800290e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002912:	4c48      	ldr	r4, [pc, #288]	; (8002a34 <HAL_GPIO_Init+0x198>)
 8002914:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	3301      	adds	r3, #1
 8002918:	2b0f      	cmp	r3, #15
 800291a:	f200 8085 	bhi.w	8002a28 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 800291e:	2201      	movs	r2, #1
 8002920:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002922:	680c      	ldr	r4, [r1, #0]
 8002924:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002928:	42aa      	cmp	r2, r5
 800292a:	d1f4      	bne.n	8002916 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800292c:	684c      	ldr	r4, [r1, #4]
 800292e:	2c02      	cmp	r4, #2
 8002930:	d001      	beq.n	8002936 <HAL_GPIO_Init+0x9a>
 8002932:	2c12      	cmp	r4, #18
 8002934:	d110      	bne.n	8002958 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8002936:	08de      	lsrs	r6, r3, #3
 8002938:	3608      	adds	r6, #8
 800293a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800293e:	f003 0407 	and.w	r4, r3, #7
 8002942:	00a7      	lsls	r7, r4, #2
 8002944:	240f      	movs	r4, #15
 8002946:	40bc      	lsls	r4, r7
 8002948:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	690c      	ldr	r4, [r1, #16]
 800294e:	40bc      	lsls	r4, r7
 8002950:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8002954:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002958:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295a:	005f      	lsls	r7, r3, #1
 800295c:	2603      	movs	r6, #3
 800295e:	40be      	lsls	r6, r7
 8002960:	43f6      	mvns	r6, r6
 8002962:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002966:	684c      	ldr	r4, [r1, #4]
 8002968:	f004 0403 	and.w	r4, r4, #3
 800296c:	40bc      	lsls	r4, r7
 800296e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002972:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002974:	684c      	ldr	r4, [r1, #4]
 8002976:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800297a:	f1bc 0f01 	cmp.w	ip, #1
 800297e:	d903      	bls.n	8002988 <HAL_GPIO_Init+0xec>
 8002980:	2c11      	cmp	r4, #17
 8002982:	d001      	beq.n	8002988 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002984:	2c12      	cmp	r4, #18
 8002986:	d110      	bne.n	80029aa <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8002988:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800298a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298e:	68cc      	ldr	r4, [r1, #12]
 8002990:	40bc      	lsls	r4, r7
 8002992:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8002996:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002998:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800299a:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800299e:	684c      	ldr	r4, [r1, #4]
 80029a0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80029a4:	409c      	lsls	r4, r3
 80029a6:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80029a8:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80029aa:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ac:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ae:	688a      	ldr	r2, [r1, #8]
 80029b0:	40ba      	lsls	r2, r7
 80029b2:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80029b4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b6:	684a      	ldr	r2, [r1, #4]
 80029b8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80029bc:	d0ab      	beq.n	8002916 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2200      	movs	r2, #0
 80029c0:	9201      	str	r2, [sp, #4]
 80029c2:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <HAL_GPIO_Init+0x19c>)
 80029c4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80029c6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80029ca:	6454      	str	r4, [r2, #68]	; 0x44
 80029cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029d2:	9201      	str	r2, [sp, #4]
 80029d4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80029d6:	089c      	lsrs	r4, r3, #2
 80029d8:	1ca6      	adds	r6, r4, #2
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <HAL_GPIO_Init+0x194>)
 80029dc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e0:	f003 0203 	and.w	r2, r3, #3
 80029e4:	0096      	lsls	r6, r2, #2
 80029e6:	220f      	movs	r2, #15
 80029e8:	40b2      	lsls	r2, r6
 80029ea:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ee:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <HAL_GPIO_Init+0x1a0>)
 80029f0:	4290      	cmp	r0, r2
 80029f2:	f43f af5c 	beq.w	80028ae <HAL_GPIO_Init+0x12>
 80029f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029fa:	4290      	cmp	r0, r2
 80029fc:	d00e      	beq.n	8002a1c <HAL_GPIO_Init+0x180>
 80029fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a02:	4290      	cmp	r0, r2
 8002a04:	d00c      	beq.n	8002a20 <HAL_GPIO_Init+0x184>
 8002a06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a0a:	4290      	cmp	r0, r2
 8002a0c:	d00a      	beq.n	8002a24 <HAL_GPIO_Init+0x188>
 8002a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a12:	4290      	cmp	r0, r2
 8002a14:	f43f af49 	beq.w	80028aa <HAL_GPIO_Init+0xe>
 8002a18:	2207      	movs	r2, #7
 8002a1a:	e749      	b.n	80028b0 <HAL_GPIO_Init+0x14>
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	e747      	b.n	80028b0 <HAL_GPIO_Init+0x14>
 8002a20:	2202      	movs	r2, #2
 8002a22:	e745      	b.n	80028b0 <HAL_GPIO_Init+0x14>
 8002a24:	2203      	movs	r2, #3
 8002a26:	e743      	b.n	80028b0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002a28:	b002      	add	sp, #8
 8002a2a:	bcf0      	pop	{r4, r5, r6, r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	4770      	bx	lr
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40013c00 	.word	0x40013c00
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020000 	.word	0x40020000

08002a40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a40:	b912      	cbnz	r2, 8002a48 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a42:	0409      	lsls	r1, r1, #16
 8002a44:	6181      	str	r1, [r0, #24]
  }
}
 8002a46:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002a48:	6181      	str	r1, [r0, #24]
 8002a4a:	4770      	bx	lr

08002a4c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002a4c:	6943      	ldr	r3, [r0, #20]
 8002a4e:	ea31 0303 	bics.w	r3, r1, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a54:	6181      	str	r1, [r0, #24]
  }
}
 8002a56:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a58:	0409      	lsls	r1, r1, #16
 8002a5a:	6181      	str	r1, [r0, #24]
 8002a5c:	4770      	bx	lr

08002a5e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a5e:	6803      	ldr	r3, [r0, #0]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002a66:	d011      	beq.n	8002a8c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a72:	2220      	movs	r2, #32
 8002a74:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002a7e:	f042 0204 	orr.w	r2, r2, #4
 8002a82:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8002a88:	2001      	movs	r0, #1
 8002a8a:	4770      	bx	lr
  }
  return HAL_OK;
 8002a8c:	2000      	movs	r0, #0
}
 8002a8e:	4770      	bx	lr

08002a90 <I2C_WaitOnFlagUntilTimeout>:
{
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	4606      	mov	r6, r0
 8002a94:	460c      	mov	r4, r1
 8002a96:	4617      	mov	r7, r2
 8002a98:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a9a:	e022      	b.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9c:	f7ff fe7a 	bl	8002794 <HAL_GetTick>
 8002aa0:	9b06      	ldr	r3, [sp, #24]
 8002aa2:	1ac0      	subs	r0, r0, r3
 8002aa4:	42a8      	cmp	r0, r5
 8002aa6:	d800      	bhi.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x1a>
 8002aa8:	b9dd      	cbnz	r5, 8002ae2 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ab4:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002aba:	f042 0220 	orr.w	r2, r2, #32
 8002abe:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ac0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	e01a      	b.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac8:	6833      	ldr	r3, [r6, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	ea24 0303 	bic.w	r3, r4, r3
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	429f      	cmp	r7, r3
 8002ada:	d10f      	bne.n	8002afc <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002adc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002ae0:	d1dc      	bne.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d0ee      	beq.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0x38>
 8002aea:	6833      	ldr	r3, [r6, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	ea24 0303 	bic.w	r3, r4, r3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	e7ed      	b.n	8002ad8 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8002afc:	2000      	movs	r0, #0
}
 8002afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	4604      	mov	r4, r0
 8002b04:	460d      	mov	r5, r1
 8002b06:	4616      	mov	r6, r2
 8002b08:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b0a:	e03c      	b.n	8002b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b12:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b1a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b20:	2220      	movs	r2, #32
 8002b22:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b2c:	f042 0204 	orr.w	r2, r2, #4
 8002b30:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002b32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
 8002b38:	e033      	b.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3a:	f7ff fe2b 	bl	8002794 <HAL_GetTick>
 8002b3e:	1bc0      	subs	r0, r0, r7
 8002b40:	42b0      	cmp	r0, r6
 8002b42:	d800      	bhi.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8002b44:	b9fe      	cbnz	r6, 8002b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b56:	f042 0220 	orr.w	r2, r2, #32
 8002b5a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002b60:	2001      	movs	r0, #1
 8002b62:	e01e      	b.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	ea25 0303 	bic.w	r3, r5, r3
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3300      	adds	r3, #0
 8002b70:	bf18      	it	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	b1a3      	cbz	r3, 8002ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b7e:	d1c5      	bne.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8002b80:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8002b84:	d1d9      	bne.n	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b86:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d0ea      	beq.n	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	ea25 0303 	bic.w	r3, r5, r3
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3300      	adds	r3, #0
 8002b9a:	bf18      	it	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	e7e9      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8002ba0:	2000      	movs	r0, #0
}
 8002ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ba4 <I2C_MasterRequestWrite>:
{
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	4604      	mov	r4, r0
 8002baa:	460f      	mov	r7, r1
 8002bac:	4615      	mov	r5, r2
 8002bae:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bb0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d00d      	beq.n	8002bd2 <I2C_MasterRequestWrite+0x2e>
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d00b      	beq.n	8002bd2 <I2C_MasterRequestWrite+0x2e>
 8002bba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bbe:	d008      	beq.n	8002bd2 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002bc2:	2b12      	cmp	r3, #18
 8002bc4:	d10a      	bne.n	8002bdc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc6:	6802      	ldr	r2, [r0, #0]
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	e004      	b.n	8002bdc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd2:	6822      	ldr	r2, [r4, #0]
 8002bd4:	6813      	ldr	r3, [r2, #0]
 8002bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bda:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bdc:	9600      	str	r6, [sp, #0]
 8002bde:	462b      	mov	r3, r5
 8002be0:	2200      	movs	r2, #0
 8002be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7ff ff52 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 8002bec:	bb18      	cbnz	r0, 8002c36 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bee:	6923      	ldr	r3, [r4, #16]
 8002bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bf4:	d10d      	bne.n	8002c12 <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002bfc:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bfe:	4633      	mov	r3, r6
 8002c00:	462a      	mov	r2, r5
 8002c02:	4910      	ldr	r1, [pc, #64]	; (8002c44 <I2C_MasterRequestWrite+0xa0>)
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff ff7b 	bl	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	b1a0      	cbz	r0, 8002c38 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e012      	b.n	8002c38 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c12:	11fb      	asrs	r3, r7, #7
 8002c14:	6822      	ldr	r2, [r4, #0]
 8002c16:	f003 0306 	and.w	r3, r3, #6
 8002c1a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002c1e:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c20:	4633      	mov	r3, r6
 8002c22:	462a      	mov	r2, r5
 8002c24:	4908      	ldr	r1, [pc, #32]	; (8002c48 <I2C_MasterRequestWrite+0xa4>)
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7ff ff6a 	bl	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c2c:	b938      	cbnz	r0, 8002c3e <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	b2ff      	uxtb	r7, r7
 8002c32:	611f      	str	r7, [r3, #16]
 8002c34:	e7e3      	b.n	8002bfe <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	b003      	add	sp, #12
 8002c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e7fa      	b.n	8002c38 <I2C_MasterRequestWrite+0x94>
 8002c42:	bf00      	nop
 8002c44:	00010002 	.word	0x00010002
 8002c48:	00010008 	.word	0x00010008

08002c4c <I2C_MasterRequestRead>:
{
 8002c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	4604      	mov	r4, r0
 8002c54:	460d      	mov	r5, r1
 8002c56:	4616      	mov	r6, r2
 8002c58:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c5a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5c:	6801      	ldr	r1, [r0, #0]
 8002c5e:	680b      	ldr	r3, [r1, #0]
 8002c60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c64:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c66:	2a08      	cmp	r2, #8
 8002c68:	d00d      	beq.n	8002c86 <I2C_MasterRequestRead+0x3a>
 8002c6a:	2a01      	cmp	r2, #1
 8002c6c:	d00b      	beq.n	8002c86 <I2C_MasterRequestRead+0x3a>
 8002c6e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002c72:	d008      	beq.n	8002c86 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c74:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c76:	2b11      	cmp	r3, #17
 8002c78:	d10a      	bne.n	8002c90 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7a:	6802      	ldr	r2, [r0, #0]
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e004      	b.n	8002c90 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c86:	6822      	ldr	r2, [r4, #0]
 8002c88:	6813      	ldr	r3, [r2, #0]
 8002c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c90:	9700      	str	r7, [sp, #0]
 8002c92:	4633      	mov	r3, r6
 8002c94:	2200      	movs	r2, #0
 8002c96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7ff fef8 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d149      	bne.n	8002d38 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ca4:	6923      	ldr	r3, [r4, #16]
 8002ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002caa:	d10f      	bne.n	8002ccc <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	f045 0501 	orr.w	r5, r5, #1
 8002cb2:	b2ed      	uxtb	r5, r5
 8002cb4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	4632      	mov	r2, r6
 8002cba:	4923      	ldr	r1, [pc, #140]	; (8002d48 <I2C_MasterRequestRead+0xfc>)
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7ff ff1f 	bl	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	d038      	beq.n	8002d3a <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e036      	b.n	8002d3a <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ccc:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8002cd0:	f008 0806 	and.w	r8, r8, #6
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002cda:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cdc:	463b      	mov	r3, r7
 8002cde:	4632      	mov	r2, r6
 8002ce0:	491a      	ldr	r1, [pc, #104]	; (8002d4c <I2C_MasterRequestRead+0x100>)
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f7ff ff0c 	bl	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce8:	b108      	cbz	r0, 8002cee <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e025      	b.n	8002d3a <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	b2ed      	uxtb	r5, r5
 8002cf2:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf4:	463b      	mov	r3, r7
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	4913      	ldr	r1, [pc, #76]	; (8002d48 <I2C_MasterRequestRead+0xfc>)
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f7ff ff00 	bl	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d00:	b108      	cbz	r0, 8002d06 <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e019      	b.n	8002d3a <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2200      	movs	r2, #0
 8002d08:	9203      	str	r2, [sp, #12]
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	6959      	ldr	r1, [r3, #20]
 8002d0e:	9103      	str	r1, [sp, #12]
 8002d10:	6999      	ldr	r1, [r3, #24]
 8002d12:	9103      	str	r1, [sp, #12]
 8002d14:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d16:	6819      	ldr	r1, [r3, #0]
 8002d18:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002d1c:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1e:	9700      	str	r7, [sp, #0]
 8002d20:	4633      	mov	r3, r6
 8002d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7ff feb2 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	b948      	cbnz	r0, 8002d42 <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d2e:	6822      	ldr	r2, [r4, #0]
 8002d30:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002d34:	6113      	str	r3, [r2, #16]
 8002d36:	e7be      	b.n	8002cb6 <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	b004      	add	sp, #16
 8002d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e7f9      	b.n	8002d3a <I2C_MasterRequestRead+0xee>
 8002d46:	bf00      	nop
 8002d48:	00010002 	.word	0x00010002
 8002d4c:	00010008 	.word	0x00010008

08002d50 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	4604      	mov	r4, r0
 8002d54:	460d      	mov	r5, r1
 8002d56:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d60:	d11c      	bne.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d62:	4620      	mov	r0, r4
 8002d64:	f7ff fe7b 	bl	8002a5e <I2C_IsAcknowledgeFailed>
 8002d68:	b9d0      	cbnz	r0, 8002da0 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002d6a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002d6e:	d0f3      	beq.n	8002d58 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d70:	f7ff fd10 	bl	8002794 <HAL_GetTick>
 8002d74:	1b80      	subs	r0, r0, r6
 8002d76:	42a8      	cmp	r0, r5
 8002d78:	d801      	bhi.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002d7a:	2d00      	cmp	r5, #0
 8002d7c:	d1ec      	bne.n	8002d58 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d82:	2220      	movs	r2, #32
 8002d84:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d8e:	f042 0220 	orr.w	r2, r2, #32
 8002d92:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002d98:	2001      	movs	r0, #1
 8002d9a:	e000      	b.n	8002d9e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002d9c:	2000      	movs	r0, #0
}
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002da0:	2001      	movs	r0, #1
 8002da2:	e7fc      	b.n	8002d9e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08002da4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	4604      	mov	r4, r0
 8002da8:	460d      	mov	r5, r1
 8002daa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f013 0f04 	tst.w	r3, #4
 8002db4:	d11c      	bne.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff fe51 	bl	8002a5e <I2C_IsAcknowledgeFailed>
 8002dbc:	b9d0      	cbnz	r0, 8002df4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002dc2:	d0f3      	beq.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc4:	f7ff fce6 	bl	8002794 <HAL_GetTick>
 8002dc8:	1b80      	subs	r0, r0, r6
 8002dca:	42a8      	cmp	r0, r5
 8002dcc:	d801      	bhi.n	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002dce:	2d00      	cmp	r5, #0
 8002dd0:	d1ec      	bne.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ddc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002de2:	f042 0220 	orr.w	r2, r2, #32
 8002de6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002de8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
 8002dee:	e000      	b.n	8002df2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002df0:	2000      	movs	r0, #0
}
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002df4:	2001      	movs	r0, #1
 8002df6:	e7fc      	b.n	8002df2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002df8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	4605      	mov	r5, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e08:	d129      	bne.n	8002e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	f012 0f10 	tst.w	r2, #16
 8002e10:	d115      	bne.n	8002e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7ff fcbf 	bl	8002794 <HAL_GetTick>
 8002e16:	1b80      	subs	r0, r0, r6
 8002e18:	42a0      	cmp	r0, r4
 8002e1a:	d801      	bhi.n	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8002e1c:	2c00      	cmp	r4, #0
 8002e1e:	d1ef      	bne.n	8002e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e24:	2220      	movs	r2, #32
 8002e26:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e30:	f042 0220 	orr.w	r2, r2, #32
 8002e34:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002e36:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002e3a:	2001      	movs	r0, #1
}
 8002e3c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e3e:	f06f 0210 	mvn.w	r2, #16
 8002e42:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e52:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e54:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002e56:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	e7ee      	b.n	8002e3c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8002e5e:	2000      	movs	r0, #0
 8002e60:	e7ec      	b.n	8002e3c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08002e64 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002e64:	2800      	cmp	r0, #0
 8002e66:	f000 80be 	beq.w	8002fe6 <HAL_I2C_Init+0x182>
{
 8002e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d06b      	beq.n	8002f4e <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e76:	2324      	movs	r3, #36	; 0x24
 8002e78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002e7c:	6822      	ldr	r2, [r4, #0]
 8002e7e:	6813      	ldr	r3, [r2, #0]
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e86:	f000 fe8b 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e8a:	6862      	ldr	r2, [r4, #4]
 8002e8c:	4b58      	ldr	r3, [pc, #352]	; (8002ff0 <HAL_I2C_Init+0x18c>)
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d862      	bhi.n	8002f58 <HAL_I2C_Init+0xf4>
 8002e92:	4b58      	ldr	r3, [pc, #352]	; (8002ff4 <HAL_I2C_Init+0x190>)
 8002e94:	4298      	cmp	r0, r3
 8002e96:	bf8c      	ite	hi
 8002e98:	2300      	movhi	r3, #0
 8002e9a:	2301      	movls	r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 80a4 	bne.w	8002fea <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8002ea2:	4b55      	ldr	r3, [pc, #340]	; (8002ff8 <HAL_I2C_Init+0x194>)
 8002ea4:	fba3 2300 	umull	r2, r3, r3, r0
 8002ea8:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eaa:	6821      	ldr	r1, [r4, #0]
 8002eac:	684a      	ldr	r2, [r1, #4]
 8002eae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	6825      	ldr	r5, [r4, #0]
 8002eb8:	6a2a      	ldr	r2, [r5, #32]
 8002eba:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ebe:	6866      	ldr	r6, [r4, #4]
 8002ec0:	494b      	ldr	r1, [pc, #300]	; (8002ff0 <HAL_I2C_Init+0x18c>)
 8002ec2:	428e      	cmp	r6, r1
 8002ec4:	d84e      	bhi.n	8002f64 <HAL_I2C_Init+0x100>
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ecc:	6825      	ldr	r5, [r4, #0]
 8002ece:	69e9      	ldr	r1, [r5, #28]
 8002ed0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002ed4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ed8:	6863      	ldr	r3, [r4, #4]
 8002eda:	4a45      	ldr	r2, [pc, #276]	; (8002ff0 <HAL_I2C_Init+0x18c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d84b      	bhi.n	8002f78 <HAL_I2C_Init+0x114>
 8002ee0:	3801      	subs	r0, #1
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf38      	it	cc
 8002ef2:	2304      	movcc	r3, #4
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ef8:	6821      	ldr	r1, [r4, #0]
 8002efa:	680b      	ldr	r3, [r1, #0]
 8002efc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f00:	69e2      	ldr	r2, [r4, #28]
 8002f02:	6a20      	ldr	r0, [r4, #32]
 8002f04:	4302      	orrs	r2, r0
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f0a:	6821      	ldr	r1, [r4, #0]
 8002f0c:	688b      	ldr	r3, [r1, #8]
 8002f0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f16:	6922      	ldr	r2, [r4, #16]
 8002f18:	68e0      	ldr	r0, [r4, #12]
 8002f1a:	4302      	orrs	r2, r0
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f20:	6821      	ldr	r1, [r4, #0]
 8002f22:	68cb      	ldr	r3, [r1, #12]
 8002f24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f28:	6962      	ldr	r2, [r4, #20]
 8002f2a:	69a0      	ldr	r0, [r4, #24]
 8002f2c:	4302      	orrs	r2, r0
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002f32:	6822      	ldr	r2, [r4, #0]
 8002f34:	6813      	ldr	r3, [r2, #0]
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f40:	2320      	movs	r3, #32
 8002f42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f46:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f48:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002f4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002f52:	f001 ff4d 	bl	8004df0 <HAL_I2C_MspInit>
 8002f56:	e78e      	b.n	8002e76 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_I2C_Init+0x198>)
 8002f5a:	4298      	cmp	r0, r3
 8002f5c:	bf8c      	ite	hi
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	2301      	movls	r3, #1
 8002f62:	e79b      	b.n	8002e9c <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4924      	ldr	r1, [pc, #144]	; (8003000 <HAL_I2C_Init+0x19c>)
 8002f6e:	fba1 1303 	umull	r1, r3, r1, r3
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	3301      	adds	r3, #1
 8002f76:	e7a7      	b.n	8002ec8 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f78:	68a2      	ldr	r2, [r4, #8]
 8002f7a:	b9ba      	cbnz	r2, 8002fac <HAL_I2C_Init+0x148>
 8002f7c:	1e46      	subs	r6, r0, #1
 8002f7e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8002f82:	fbb6 f6f7 	udiv	r6, r6, r7
 8002f86:	3601      	adds	r6, #1
 8002f88:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002f8c:	fab6 f686 	clz	r6, r6
 8002f90:	0976      	lsrs	r6, r6, #5
 8002f92:	bb36      	cbnz	r6, 8002fe2 <HAL_I2C_Init+0x17e>
 8002f94:	b9c2      	cbnz	r2, 8002fc8 <HAL_I2C_Init+0x164>
 8002f96:	3801      	subs	r0, #1
 8002f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002fa6:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8002faa:	e7a3      	b.n	8002ef4 <HAL_I2C_Init+0x90>
 8002fac:	1e46      	subs	r6, r0, #1
 8002fae:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8002fb2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002fb6:	fbb6 f6f7 	udiv	r6, r6, r7
 8002fba:	3601      	adds	r6, #1
 8002fbc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002fc0:	fab6 f686 	clz	r6, r6
 8002fc4:	0976      	lsrs	r6, r6, #5
 8002fc6:	e7e4      	b.n	8002f92 <HAL_I2C_Init+0x12e>
 8002fc8:	3801      	subs	r0, #1
 8002fca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002fce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002fd2:	fbb0 f2f3 	udiv	r2, r0, r3
 8002fd6:	3201      	adds	r2, #1
 8002fd8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002fdc:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8002fe0:	e788      	b.n	8002ef4 <HAL_I2C_Init+0x90>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e786      	b.n	8002ef4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002fe6:	2001      	movs	r0, #1
}
 8002fe8:	4770      	bx	lr
    return HAL_ERROR;
 8002fea:	2001      	movs	r0, #1
 8002fec:	e7ae      	b.n	8002f4c <HAL_I2C_Init+0xe8>
 8002fee:	bf00      	nop
 8002ff0:	000186a0 	.word	0x000186a0
 8002ff4:	001e847f 	.word	0x001e847f
 8002ff8:	431bde83 	.word	0x431bde83
 8002ffc:	003d08ff 	.word	0x003d08ff
 8003000:	10624dd3 	.word	0x10624dd3

08003004 <HAL_I2C_Master_Transmit>:
{
 8003004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	4604      	mov	r4, r0
 800300c:	460e      	mov	r6, r1
 800300e:	4690      	mov	r8, r2
 8003010:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003012:	f7ff fbbf 	bl	8002794 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003016:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b20      	cmp	r3, #32
 800301e:	d004      	beq.n	800302a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8003020:	2602      	movs	r6, #2
}
 8003022:	4630      	mov	r0, r6
 8003024:	b004      	add	sp, #16
 8003026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800302a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800302c:	9000      	str	r0, [sp, #0]
 800302e:	2319      	movs	r3, #25
 8003030:	2201      	movs	r2, #1
 8003032:	494f      	ldr	r1, [pc, #316]	; (8003170 <HAL_I2C_Master_Transmit+0x16c>)
 8003034:	4620      	mov	r0, r4
 8003036:	f7ff fd2b 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 800303a:	2800      	cmp	r0, #0
 800303c:	f040 8091 	bne.w	8003162 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8003040:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	f000 808e 	beq.w	8003166 <HAL_I2C_Master_Transmit+0x162>
 800304a:	2301      	movs	r3, #1
 800304c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	f012 0f01 	tst.w	r2, #1
 8003058:	d103      	bne.n	8003062 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003062:	6822      	ldr	r2, [r4, #0]
 8003064:	6813      	ldr	r3, [r2, #0]
 8003066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800306a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800306c:	2321      	movs	r3, #33	; 0x21
 800306e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003072:	2310      	movs	r3, #16
 8003074:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003078:	2300      	movs	r3, #0
 800307a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800307c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003080:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003082:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003084:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003086:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_I2C_Master_Transmit+0x170>)
 8003088:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800308a:	462b      	mov	r3, r5
 800308c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800308e:	4631      	mov	r1, r6
 8003090:	4620      	mov	r0, r4
 8003092:	f7ff fd87 	bl	8002ba4 <I2C_MasterRequestWrite>
 8003096:	4606      	mov	r6, r0
 8003098:	2800      	cmp	r0, #0
 800309a:	d166      	bne.n	800316a <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309c:	2300      	movs	r3, #0
 800309e:	9303      	str	r3, [sp, #12]
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	9203      	str	r2, [sp, #12]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80030ac:	e012      	b.n	80030d4 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80030b4:	2601      	movs	r6, #1
 80030b6:	e7b4      	b.n	8003022 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b8:	6822      	ldr	r2, [r4, #0]
 80030ba:	6813      	ldr	r3, [r2, #0]
 80030bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80030c2:	2601      	movs	r6, #1
 80030c4:	e7ad      	b.n	8003022 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c6:	462a      	mov	r2, r5
 80030c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff fe6a 	bl	8002da4 <I2C_WaitOnBTFFlagUntilTimeout>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d12c      	bne.n	800312e <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 80030d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d035      	beq.n	8003146 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030da:	462a      	mov	r2, r5
 80030dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80030de:	4620      	mov	r0, r4
 80030e0:	f7ff fe36 	bl	8002d50 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e4:	2800      	cmp	r0, #0
 80030e6:	d1e2      	bne.n	80030ae <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	7812      	ldrb	r2, [r2, #0]
 80030ee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030f2:	1c4b      	adds	r3, r1, #1
 80030f4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80030f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	b29b      	uxth	r3, r3
 8003104:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003106:	6822      	ldr	r2, [r4, #0]
 8003108:	6950      	ldr	r0, [r2, #20]
 800310a:	f010 0f04 	tst.w	r0, #4
 800310e:	d0da      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0xc2>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0d8      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003114:	784b      	ldrb	r3, [r1, #1]
 8003116:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800311a:	3301      	adds	r3, #1
 800311c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800311e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003120:	3b01      	subs	r3, #1
 8003122:	b29b      	uxth	r3, r3
 8003124:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003126:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	8523      	strh	r3, [r4, #40]	; 0x28
 800312c:	e7cb      	b.n	80030c6 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003130:	2b04      	cmp	r3, #4
 8003132:	d001      	beq.n	8003138 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8003134:	2601      	movs	r6, #1
 8003136:	e774      	b.n	8003022 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003138:	6822      	ldr	r2, [r4, #0]
 800313a:	6813      	ldr	r3, [r2, #0]
 800313c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003140:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003142:	2601      	movs	r6, #1
 8003144:	e76d      	b.n	8003022 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	6822      	ldr	r2, [r4, #0]
 8003148:	6813      	ldr	r3, [r2, #0]
 800314a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800314e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003150:	2320      	movs	r3, #32
 8003152:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	2300      	movs	r3, #0
 8003158:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800315c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003160:	e75f      	b.n	8003022 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8003162:	2602      	movs	r6, #2
 8003164:	e75d      	b.n	8003022 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003166:	2602      	movs	r6, #2
 8003168:	e75b      	b.n	8003022 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 800316a:	2601      	movs	r6, #1
 800316c:	e759      	b.n	8003022 <HAL_I2C_Master_Transmit+0x1e>
 800316e:	bf00      	nop
 8003170:	00100002 	.word	0x00100002
 8003174:	ffff0000 	.word	0xffff0000

08003178 <HAL_I2C_Master_Receive>:
{
 8003178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	4604      	mov	r4, r0
 8003180:	460e      	mov	r6, r1
 8003182:	4690      	mov	r8, r2
 8003184:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003186:	f7ff fb05 	bl	8002794 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800318a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b20      	cmp	r3, #32
 8003192:	d004      	beq.n	800319e <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8003194:	2602      	movs	r6, #2
}
 8003196:	4630      	mov	r0, r6
 8003198:	b006      	add	sp, #24
 800319a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800319e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a0:	9000      	str	r0, [sp, #0]
 80031a2:	2319      	movs	r3, #25
 80031a4:	2201      	movs	r2, #1
 80031a6:	499e      	ldr	r1, [pc, #632]	; (8003420 <HAL_I2C_Master_Receive+0x2a8>)
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7ff fc71 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	f040 8134 	bne.w	800341c <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 80031b4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f000 8137 	beq.w	800342c <HAL_I2C_Master_Receive+0x2b4>
 80031be:	2301      	movs	r3, #1
 80031c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	f012 0f01 	tst.w	r2, #1
 80031cc:	d103      	bne.n	80031d6 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d6:	6822      	ldr	r2, [r4, #0]
 80031d8:	6813      	ldr	r3, [r2, #0]
 80031da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031de:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031e0:	2322      	movs	r3, #34	; 0x22
 80031e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031e6:	2310      	movs	r3, #16
 80031e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80031f0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031f4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031f8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031fa:	4b8a      	ldr	r3, [pc, #552]	; (8003424 <HAL_I2C_Master_Receive+0x2ac>)
 80031fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031fe:	462b      	mov	r3, r5
 8003200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003202:	4631      	mov	r1, r6
 8003204:	4620      	mov	r0, r4
 8003206:	f7ff fd21 	bl	8002c4c <I2C_MasterRequestRead>
 800320a:	4606      	mov	r6, r0
 800320c:	2800      	cmp	r0, #0
 800320e:	f040 810f 	bne.w	8003430 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 8003212:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003214:	b95b      	cbnz	r3, 800322e <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	9202      	str	r2, [sp, #8]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	9202      	str	r2, [sp, #8]
 8003222:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e077      	b.n	800331e <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 800322e:	2b01      	cmp	r3, #1
 8003230:	d00f      	beq.n	8003252 <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 8003232:	2b02      	cmp	r3, #2
 8003234:	d01f      	beq.n	8003276 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003236:	6822      	ldr	r2, [r4, #0]
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800323e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003240:	2300      	movs	r3, #0
 8003242:	9305      	str	r3, [sp, #20]
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	9205      	str	r2, [sp, #20]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	9305      	str	r3, [sp, #20]
 800324e:	9b05      	ldr	r3, [sp, #20]
 8003250:	e065      	b.n	800331e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003252:	6822      	ldr	r2, [r4, #0]
 8003254:	6813      	ldr	r3, [r2, #0]
 8003256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800325a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325c:	2300      	movs	r3, #0
 800325e:	9303      	str	r3, [sp, #12]
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	9203      	str	r2, [sp, #12]
 8003266:	699a      	ldr	r2, [r3, #24]
 8003268:	9203      	str	r2, [sp, #12]
 800326a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e053      	b.n	800331e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003276:	6822      	ldr	r2, [r4, #0]
 8003278:	6813      	ldr	r3, [r2, #0]
 800327a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003280:	6822      	ldr	r2, [r4, #0]
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003288:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328a:	2300      	movs	r3, #0
 800328c:	9304      	str	r3, [sp, #16]
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	9204      	str	r2, [sp, #16]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	9304      	str	r3, [sp, #16]
 8003298:	9b04      	ldr	r3, [sp, #16]
 800329a:	e040      	b.n	800331e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	462a      	mov	r2, r5
 800329e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff fda9 	bl	8002df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	f040 80c4 	bne.w	8003434 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032b2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80032b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032b6:	3301      	adds	r3, #1
 80032b8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80032ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80032c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80032c8:	e029      	b.n	800331e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ca:	9500      	str	r5, [sp, #0]
 80032cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032ce:	2200      	movs	r2, #0
 80032d0:	4955      	ldr	r1, [pc, #340]	; (8003428 <HAL_I2C_Master_Receive+0x2b0>)
 80032d2:	4620      	mov	r0, r4
 80032d4:	f7ff fbdc 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 80032d8:	2800      	cmp	r0, #0
 80032da:	f040 80ad 	bne.w	8003438 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	6822      	ldr	r2, [r4, #0]
 80032e0:	6813      	ldr	r3, [r2, #0]
 80032e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032ee:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80032f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032f2:	1c53      	adds	r3, r2, #1
 80032f4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80032f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032f8:	3b01      	subs	r3, #1
 80032fa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80032fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29b      	uxth	r3, r3
 8003302:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800330a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800330c:	3301      	adds	r3, #1
 800330e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003310:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003312:	3b01      	subs	r3, #1
 8003314:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003316:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003318:	3b01      	subs	r3, #1
 800331a:	b29b      	uxth	r3, r3
 800331c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800331e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d072      	beq.n	800340a <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8003324:	2b03      	cmp	r3, #3
 8003326:	d849      	bhi.n	80033bc <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8003328:	2b01      	cmp	r3, #1
 800332a:	d0b7      	beq.n	800329c <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 800332c:	2b02      	cmp	r3, #2
 800332e:	d0cc      	beq.n	80032ca <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003330:	9500      	str	r5, [sp, #0]
 8003332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003334:	2200      	movs	r2, #0
 8003336:	493c      	ldr	r1, [pc, #240]	; (8003428 <HAL_I2C_Master_Receive+0x2b0>)
 8003338:	4620      	mov	r0, r4
 800333a:	f7ff fba9 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 800333e:	2800      	cmp	r0, #0
 8003340:	d17c      	bne.n	800343c <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	6813      	ldr	r3, [r2, #0]
 8003346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800334a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003352:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003356:	3301      	adds	r3, #1
 8003358:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800335a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800335c:	3b01      	subs	r3, #1
 800335e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003360:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003362:	3b01      	subs	r3, #1
 8003364:	b29b      	uxth	r3, r3
 8003366:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003368:	9500      	str	r5, [sp, #0]
 800336a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800336c:	2200      	movs	r2, #0
 800336e:	492e      	ldr	r1, [pc, #184]	; (8003428 <HAL_I2C_Master_Receive+0x2b0>)
 8003370:	4620      	mov	r0, r4
 8003372:	f7ff fb8d 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 8003376:	2800      	cmp	r0, #0
 8003378:	d162      	bne.n	8003440 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	6822      	ldr	r2, [r4, #0]
 800337c:	6813      	ldr	r3, [r2, #0]
 800337e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003382:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800338a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800338c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800338e:	1c53      	adds	r3, r2, #1
 8003390:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003392:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003398:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800339a:	3b01      	subs	r3, #1
 800339c:	b29b      	uxth	r3, r3
 800339e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80033a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033a8:	3301      	adds	r3, #1
 80033aa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033ae:	3b01      	subs	r3, #1
 80033b0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80033b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80033ba:	e7b0      	b.n	800331e <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033bc:	462a      	mov	r2, r5
 80033be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033c0:	4620      	mov	r0, r4
 80033c2:	f7ff fd19 	bl	8002df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d13c      	bne.n	8003444 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033d4:	1c53      	adds	r3, r2, #1
 80033d6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80033d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80033de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	6959      	ldr	r1, [r3, #20]
 80033ea:	f011 0f04 	tst.w	r1, #4
 80033ee:	d096      	beq.n	800331e <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80033f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033f6:	3301      	adds	r3, #1
 80033f8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003400:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003402:	3b01      	subs	r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003408:	e789      	b.n	800331e <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800340a:	2320      	movs	r3, #32
 800340c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	2300      	movs	r3, #0
 8003412:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003416:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800341a:	e6bc      	b.n	8003196 <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 800341c:	2602      	movs	r6, #2
 800341e:	e6ba      	b.n	8003196 <HAL_I2C_Master_Receive+0x1e>
 8003420:	00100002 	.word	0x00100002
 8003424:	ffff0000 	.word	0xffff0000
 8003428:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 800342c:	2602      	movs	r6, #2
 800342e:	e6b2      	b.n	8003196 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8003430:	2601      	movs	r6, #1
 8003432:	e6b0      	b.n	8003196 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003434:	2601      	movs	r6, #1
 8003436:	e6ae      	b.n	8003196 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003438:	2601      	movs	r6, #1
 800343a:	e6ac      	b.n	8003196 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 800343c:	2601      	movs	r6, #1
 800343e:	e6aa      	b.n	8003196 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003440:	2601      	movs	r6, #1
 8003442:	e6a8      	b.n	8003196 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8003444:	2601      	movs	r6, #1
 8003446:	e6a6      	b.n	8003196 <HAL_I2C_Master_Receive+0x1e>

08003448 <HAL_I2C_IsDeviceReady>:
{
 8003448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800344c:	b085      	sub	sp, #20
 800344e:	4604      	mov	r4, r0
 8003450:	4688      	mov	r8, r1
 8003452:	4691      	mov	r9, r2
 8003454:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003456:	f7ff f99d 	bl	8002794 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800345a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b20      	cmp	r3, #32
 8003462:	d004      	beq.n	800346e <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
}
 8003466:	4618      	mov	r0, r3
 8003468:	b005      	add	sp, #20
 800346a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800346e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003470:	9000      	str	r0, [sp, #0]
 8003472:	2319      	movs	r3, #25
 8003474:	2201      	movs	r2, #1
 8003476:	4954      	ldr	r1, [pc, #336]	; (80035c8 <HAL_I2C_IsDeviceReady+0x180>)
 8003478:	4620      	mov	r0, r4
 800347a:	f7ff fb09 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 800347e:	2800      	cmp	r0, #0
 8003480:	f040 8097 	bne.w	80035b2 <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 8003484:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003488:	2b01      	cmp	r3, #1
 800348a:	f000 8094 	beq.w	80035b6 <HAL_I2C_IsDeviceReady+0x16e>
 800348e:	2301      	movs	r3, #1
 8003490:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	f012 0f01 	tst.w	r2, #1
 800349c:	d103      	bne.n	80034a6 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	6813      	ldr	r3, [r2, #0]
 80034aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ae:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b0:	2324      	movs	r3, #36	; 0x24
 80034b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ba:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80034be:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 80034c0:	2701      	movs	r7, #1
 80034c2:	e034      	b.n	800352e <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80034c4:	23a0      	movs	r3, #160	; 0xa0
 80034c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034d2:	6959      	ldr	r1, [r3, #20]
 80034d4:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034d8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2ba0      	cmp	r3, #160	; 0xa0
 80034e0:	d009      	beq.n	80034f6 <HAL_I2C_IsDeviceReady+0xae>
 80034e2:	b942      	cbnz	r2, 80034f6 <HAL_I2C_IsDeviceReady+0xae>
 80034e4:	b939      	cbnz	r1, 80034f6 <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034e6:	f7ff f955 	bl	8002794 <HAL_GetTick>
 80034ea:	1b80      	subs	r0, r0, r6
 80034ec:	42a8      	cmp	r0, r5
 80034ee:	d8e9      	bhi.n	80034c4 <HAL_I2C_IsDeviceReady+0x7c>
 80034f0:	2d00      	cmp	r5, #0
 80034f2:	d1ea      	bne.n	80034ca <HAL_I2C_IsDeviceReady+0x82>
 80034f4:	e7e6      	b.n	80034c4 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	2320      	movs	r3, #32
 80034f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	f012 0f02 	tst.w	r2, #2
 8003504:	d131      	bne.n	800356a <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003514:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003516:	9600      	str	r6, [sp, #0]
 8003518:	2319      	movs	r3, #25
 800351a:	2201      	movs	r2, #1
 800351c:	492a      	ldr	r1, [pc, #168]	; (80035c8 <HAL_I2C_IsDeviceReady+0x180>)
 800351e:	4620      	mov	r0, r4
 8003520:	f7ff fab6 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 8003524:	2800      	cmp	r0, #0
 8003526:	d14c      	bne.n	80035c2 <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8003528:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800352a:	454f      	cmp	r7, r9
 800352c:	d239      	bcs.n	80035a2 <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352e:	6822      	ldr	r2, [r4, #0]
 8003530:	6813      	ldr	r3, [r2, #0]
 8003532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003536:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003538:	9600      	str	r6, [sp, #0]
 800353a:	462b      	mov	r3, r5
 800353c:	2200      	movs	r2, #0
 800353e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003542:	4620      	mov	r0, r4
 8003544:	f7ff faa4 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 8003548:	2800      	cmp	r0, #0
 800354a:	d136      	bne.n	80035ba <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8003552:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003554:	f7ff f91e 	bl	8002794 <HAL_GetTick>
 8003558:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003562:	6959      	ldr	r1, [r3, #20]
 8003564:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003568:	e7b6      	b.n	80034d8 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003570:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003572:	2300      	movs	r3, #0
 8003574:	9303      	str	r3, [sp, #12]
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	9203      	str	r2, [sp, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	9303      	str	r3, [sp, #12]
 8003580:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003582:	9600      	str	r6, [sp, #0]
 8003584:	2319      	movs	r3, #25
 8003586:	2201      	movs	r2, #1
 8003588:	490f      	ldr	r1, [pc, #60]	; (80035c8 <HAL_I2C_IsDeviceReady+0x180>)
 800358a:	4620      	mov	r0, r4
 800358c:	f7ff fa80 	bl	8002a90 <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	b9a0      	cbnz	r0, 80035be <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 8003594:	2220      	movs	r2, #32
 8003596:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800359a:	2200      	movs	r2, #0
 800359c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 80035a0:	e761      	b.n	8003466 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80035a2:	2320      	movs	r3, #32
 80035a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80035a8:	2300      	movs	r3, #0
 80035aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e759      	b.n	8003466 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
 80035b4:	e757      	b.n	8003466 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80035b6:	2302      	movs	r3, #2
 80035b8:	e755      	b.n	8003466 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e753      	b.n	8003466 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e751      	b.n	8003466 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e74f      	b.n	8003466 <HAL_I2C_IsDeviceReady+0x1e>
 80035c6:	bf00      	nop
 80035c8:	00100002 	.word	0x00100002

080035cc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035cc:	2800      	cmp	r0, #0
 80035ce:	f000 81bb 	beq.w	8003948 <HAL_RCC_OscConfig+0x37c>
{
 80035d2:	b570      	push	{r4, r5, r6, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d8:	6803      	ldr	r3, [r0, #0]
 80035da:	f013 0f01 	tst.w	r3, #1
 80035de:	d03b      	beq.n	8003658 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035e0:	4ba7      	ldr	r3, [pc, #668]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d02c      	beq.n	8003646 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ec:	4ba4      	ldr	r3, [pc, #656]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d021      	beq.n	800363c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f8:	6863      	ldr	r3, [r4, #4]
 80035fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fe:	d04f      	beq.n	80036a0 <HAL_RCC_OscConfig+0xd4>
 8003600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003604:	d052      	beq.n	80036ac <HAL_RCC_OscConfig+0xe0>
 8003606:	4b9e      	ldr	r3, [pc, #632]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003616:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003618:	6863      	ldr	r3, [r4, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d050      	beq.n	80036c0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7ff f8b9 	bl	8002794 <HAL_GetTick>
 8003622:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003624:	4b96      	ldr	r3, [pc, #600]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800362c:	d114      	bne.n	8003658 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800362e:	f7ff f8b1 	bl	8002794 <HAL_GetTick>
 8003632:	1b40      	subs	r0, r0, r5
 8003634:	2864      	cmp	r0, #100	; 0x64
 8003636:	d9f5      	bls.n	8003624 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8003638:	2003      	movs	r0, #3
 800363a:	e18a      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363c:	4b90      	ldr	r3, [pc, #576]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003644:	d0d8      	beq.n	80035f8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003646:	4b8e      	ldr	r3, [pc, #568]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800364e:	d003      	beq.n	8003658 <HAL_RCC_OscConfig+0x8c>
 8003650:	6863      	ldr	r3, [r4, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 817a 	beq.w	800394c <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	f013 0f02 	tst.w	r3, #2
 800365e:	d055      	beq.n	800370c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003660:	4b87      	ldr	r3, [pc, #540]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f013 0f0c 	tst.w	r3, #12
 8003668:	d03e      	beq.n	80036e8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800366a:	4b85      	ldr	r3, [pc, #532]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	2b08      	cmp	r3, #8
 8003674:	d033      	beq.n	80036de <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003676:	68e3      	ldr	r3, [r4, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d068      	beq.n	800374e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	4b81      	ldr	r3, [pc, #516]	; (8003884 <HAL_RCC_OscConfig+0x2b8>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7ff f887 	bl	8002794 <HAL_GetTick>
 8003686:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	4b7d      	ldr	r3, [pc, #500]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f013 0f02 	tst.w	r3, #2
 8003690:	d154      	bne.n	800373c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003692:	f7ff f87f 	bl	8002794 <HAL_GetTick>
 8003696:	1b40      	subs	r0, r0, r5
 8003698:	2802      	cmp	r0, #2
 800369a:	d9f5      	bls.n	8003688 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800369c:	2003      	movs	r0, #3
 800369e:	e158      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a0:	4a77      	ldr	r2, [pc, #476]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e7b5      	b.n	8003618 <HAL_RCC_OscConfig+0x4c>
 80036ac:	4b74      	ldr	r3, [pc, #464]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e7ab      	b.n	8003618 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80036c0:	f7ff f868 	bl	8002794 <HAL_GetTick>
 80036c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	4b6e      	ldr	r3, [pc, #440]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80036ce:	d0c3      	beq.n	8003658 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d0:	f7ff f860 	bl	8002794 <HAL_GetTick>
 80036d4:	1b40      	subs	r0, r0, r5
 80036d6:	2864      	cmp	r0, #100	; 0x64
 80036d8:	d9f5      	bls.n	80036c6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80036da:	2003      	movs	r0, #3
 80036dc:	e139      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036de:	4b68      	ldr	r3, [pc, #416]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80036e6:	d1c6      	bne.n	8003676 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e8:	4b65      	ldr	r3, [pc, #404]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f013 0f02 	tst.w	r3, #2
 80036f0:	d004      	beq.n	80036fc <HAL_RCC_OscConfig+0x130>
 80036f2:	68e3      	ldr	r3, [r4, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80036f8:	2001      	movs	r0, #1
 80036fa:	e12a      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fc:	4a60      	ldr	r2, [pc, #384]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80036fe:	6813      	ldr	r3, [r2, #0]
 8003700:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003704:	6921      	ldr	r1, [r4, #16]
 8003706:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800370a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	f013 0f08 	tst.w	r3, #8
 8003712:	d040      	beq.n	8003796 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003714:	6963      	ldr	r3, [r4, #20]
 8003716:	b363      	cbz	r3, 8003772 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003718:	4b5b      	ldr	r3, [pc, #364]	; (8003888 <HAL_RCC_OscConfig+0x2bc>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7ff f839 	bl	8002794 <HAL_GetTick>
 8003722:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003724:	4b56      	ldr	r3, [pc, #344]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f013 0f02 	tst.w	r3, #2
 800372c:	d133      	bne.n	8003796 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372e:	f7ff f831 	bl	8002794 <HAL_GetTick>
 8003732:	1b40      	subs	r0, r0, r5
 8003734:	2802      	cmp	r0, #2
 8003736:	d9f5      	bls.n	8003724 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003738:	2003      	movs	r0, #3
 800373a:	e10a      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4a50      	ldr	r2, [pc, #320]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003744:	6921      	ldr	r1, [r4, #16]
 8003746:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	e7de      	b.n	800370c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800374e:	4b4d      	ldr	r3, [pc, #308]	; (8003884 <HAL_RCC_OscConfig+0x2b8>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003754:	f7ff f81e 	bl	8002794 <HAL_GetTick>
 8003758:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	4b49      	ldr	r3, [pc, #292]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f013 0f02 	tst.w	r3, #2
 8003762:	d0d3      	beq.n	800370c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003764:	f7ff f816 	bl	8002794 <HAL_GetTick>
 8003768:	1b40      	subs	r0, r0, r5
 800376a:	2802      	cmp	r0, #2
 800376c:	d9f5      	bls.n	800375a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800376e:	2003      	movs	r0, #3
 8003770:	e0ef      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003772:	4b45      	ldr	r3, [pc, #276]	; (8003888 <HAL_RCC_OscConfig+0x2bc>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003778:	f7ff f80c 	bl	8002794 <HAL_GetTick>
 800377c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377e:	4b40      	ldr	r3, [pc, #256]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 8003780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003782:	f013 0f02 	tst.w	r3, #2
 8003786:	d006      	beq.n	8003796 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003788:	f7ff f804 	bl	8002794 <HAL_GetTick>
 800378c:	1b40      	subs	r0, r0, r5
 800378e:	2802      	cmp	r0, #2
 8003790:	d9f5      	bls.n	800377e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8003792:	2003      	movs	r0, #3
 8003794:	e0dd      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	f013 0f04 	tst.w	r3, #4
 800379c:	d079      	beq.n	8003892 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379e:	4b38      	ldr	r3, [pc, #224]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80037a6:	d133      	bne.n	8003810 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a8:	2300      	movs	r3, #0
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	4b34      	ldr	r3, [pc, #208]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80037ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80037c0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c2:	4b32      	ldr	r3, [pc, #200]	; (800388c <HAL_RCC_OscConfig+0x2c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037ca:	d023      	beq.n	8003814 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	68a3      	ldr	r3, [r4, #8]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d034      	beq.n	800383c <HAL_RCC_OscConfig+0x270>
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d038      	beq.n	8003848 <HAL_RCC_OscConfig+0x27c>
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80037d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	671a      	str	r2, [r3, #112]	; 0x70
 80037e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037e2:	f022 0204 	bic.w	r2, r2, #4
 80037e6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e8:	68a3      	ldr	r3, [r4, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d036      	beq.n	800385c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ee:	f7fe ffd1 	bl	8002794 <HAL_GetTick>
 80037f2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	4b22      	ldr	r3, [pc, #136]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	f013 0f02 	tst.w	r3, #2
 80037fc:	d148      	bne.n	8003890 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fe ffc9 	bl	8002794 <HAL_GetTick>
 8003802:	1b80      	subs	r0, r0, r6
 8003804:	f241 3388 	movw	r3, #5000	; 0x1388
 8003808:	4298      	cmp	r0, r3
 800380a:	d9f3      	bls.n	80037f4 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 800380c:	2003      	movs	r0, #3
 800380e:	e0a0      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8003810:	2500      	movs	r5, #0
 8003812:	e7d6      	b.n	80037c2 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <HAL_RCC_OscConfig+0x2c0>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800381e:	f7fe ffb9 	bl	8002794 <HAL_GetTick>
 8003822:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_OscConfig+0x2c0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f413 7f80 	tst.w	r3, #256	; 0x100
 800382c:	d1ce      	bne.n	80037cc <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382e:	f7fe ffb1 	bl	8002794 <HAL_GetTick>
 8003832:	1b80      	subs	r0, r0, r6
 8003834:	2802      	cmp	r0, #2
 8003836:	d9f5      	bls.n	8003824 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8003838:	2003      	movs	r0, #3
 800383a:	e08a      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383c:	4a10      	ldr	r2, [pc, #64]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 800383e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
 8003846:	e7cf      	b.n	80037e8 <HAL_RCC_OscConfig+0x21c>
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 800384a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800384c:	f042 0204 	orr.w	r2, r2, #4
 8003850:	671a      	str	r2, [r3, #112]	; 0x70
 8003852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	671a      	str	r2, [r3, #112]	; 0x70
 800385a:	e7c5      	b.n	80037e8 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7fe ff9a 	bl	8002794 <HAL_GetTick>
 8003860:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	f013 0f02 	tst.w	r3, #2
 800386a:	d011      	beq.n	8003890 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fe ff92 	bl	8002794 <HAL_GetTick>
 8003870:	1b80      	subs	r0, r0, r6
 8003872:	f241 3388 	movw	r3, #5000	; 0x1388
 8003876:	4298      	cmp	r0, r3
 8003878:	d9f3      	bls.n	8003862 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 800387a:	2003      	movs	r0, #3
 800387c:	e069      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	42470000 	.word	0x42470000
 8003888:	42470e80 	.word	0x42470e80
 800388c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003890:	b9e5      	cbnz	r5, 80038cc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003892:	69a3      	ldr	r3, [r4, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d05b      	beq.n	8003950 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003898:	4a30      	ldr	r2, [pc, #192]	; (800395c <HAL_RCC_OscConfig+0x390>)
 800389a:	6892      	ldr	r2, [r2, #8]
 800389c:	f002 020c 	and.w	r2, r2, #12
 80038a0:	2a08      	cmp	r2, #8
 80038a2:	d058      	beq.n	8003956 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d017      	beq.n	80038d8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_RCC_OscConfig+0x394>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fe ff71 	bl	8002794 <HAL_GetTick>
 80038b2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b4:	4b29      	ldr	r3, [pc, #164]	; (800395c <HAL_RCC_OscConfig+0x390>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038bc:	d042      	beq.n	8003944 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038be:	f7fe ff69 	bl	8002794 <HAL_GetTick>
 80038c2:	1b00      	subs	r0, r0, r4
 80038c4:	2802      	cmp	r0, #2
 80038c6:	d9f5      	bls.n	80038b4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80038c8:	2003      	movs	r0, #3
 80038ca:	e042      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4a23      	ldr	r2, [pc, #140]	; (800395c <HAL_RCC_OscConfig+0x390>)
 80038ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80038d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d4:	6413      	str	r3, [r2, #64]	; 0x40
 80038d6:	e7dc      	b.n	8003892 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80038d8:	4b21      	ldr	r3, [pc, #132]	; (8003960 <HAL_RCC_OscConfig+0x394>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038de:	f7fe ff59 	bl	8002794 <HAL_GetTick>
 80038e2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_RCC_OscConfig+0x390>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038ec:	d006      	beq.n	80038fc <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fe ff51 	bl	8002794 <HAL_GetTick>
 80038f2:	1b40      	subs	r0, r0, r5
 80038f4:	2802      	cmp	r0, #2
 80038f6:	d9f5      	bls.n	80038e4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80038f8:	2003      	movs	r0, #3
 80038fa:	e02a      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fc:	69e3      	ldr	r3, [r4, #28]
 80038fe:	6a22      	ldr	r2, [r4, #32]
 8003900:	4313      	orrs	r3, r2
 8003902:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003904:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003908:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800390a:	0852      	lsrs	r2, r2, #1
 800390c:	3a01      	subs	r2, #1
 800390e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003912:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003914:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003918:	4a10      	ldr	r2, [pc, #64]	; (800395c <HAL_RCC_OscConfig+0x390>)
 800391a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <HAL_RCC_OscConfig+0x394>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003922:	f7fe ff37 	bl	8002794 <HAL_GetTick>
 8003926:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_RCC_OscConfig+0x390>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003930:	d106      	bne.n	8003940 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003932:	f7fe ff2f 	bl	8002794 <HAL_GetTick>
 8003936:	1b00      	subs	r0, r0, r4
 8003938:	2802      	cmp	r0, #2
 800393a:	d9f5      	bls.n	8003928 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800393c:	2003      	movs	r0, #3
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003940:	2000      	movs	r0, #0
 8003942:	e006      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
 8003944:	2000      	movs	r0, #0
 8003946:	e004      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8003948:	2001      	movs	r0, #1
}
 800394a:	4770      	bx	lr
        return HAL_ERROR;
 800394c:	2001      	movs	r0, #1
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8003950:	2000      	movs	r0, #0
}
 8003952:	b002      	add	sp, #8
 8003954:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003956:	2001      	movs	r0, #1
 8003958:	e7fb      	b.n	8003952 <HAL_RCC_OscConfig+0x386>
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	42470060 	.word	0x42470060

08003964 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003964:	4b32      	ldr	r3, [pc, #200]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b04      	cmp	r3, #4
 800396e:	d05c      	beq.n	8003a2a <HAL_RCC_GetSysClockFreq+0xc6>
 8003970:	2b08      	cmp	r3, #8
 8003972:	d001      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003974:	482f      	ldr	r0, [pc, #188]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003976:	4770      	bx	lr
{
 8003978:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800397c:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xcc>)
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800398a:	d02b      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398c:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xcc>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003994:	461e      	mov	r6, r3
 8003996:	2700      	movs	r7, #0
 8003998:	015c      	lsls	r4, r3, #5
 800399a:	2500      	movs	r5, #0
 800399c:	1ae4      	subs	r4, r4, r3
 800399e:	eb65 0507 	sbc.w	r5, r5, r7
 80039a2:	01a9      	lsls	r1, r5, #6
 80039a4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80039a8:	01a0      	lsls	r0, r4, #6
 80039aa:	1b00      	subs	r0, r0, r4
 80039ac:	eb61 0105 	sbc.w	r1, r1, r5
 80039b0:	00cb      	lsls	r3, r1, #3
 80039b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80039b6:	00c4      	lsls	r4, r0, #3
 80039b8:	19a0      	adds	r0, r4, r6
 80039ba:	eb43 0107 	adc.w	r1, r3, r7
 80039be:	024b      	lsls	r3, r1, #9
 80039c0:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80039c4:	0244      	lsls	r4, r0, #9
 80039c6:	4620      	mov	r0, r4
 80039c8:	4619      	mov	r1, r3
 80039ca:	2300      	movs	r3, #0
 80039cc:	f7fd f944 	bl	8000c58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d0:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80039d8:	3301      	adds	r3, #1
 80039da:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80039dc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80039e0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80039ec:	461e      	mov	r6, r3
 80039ee:	2700      	movs	r7, #0
 80039f0:	015c      	lsls	r4, r3, #5
 80039f2:	2500      	movs	r5, #0
 80039f4:	1ae4      	subs	r4, r4, r3
 80039f6:	eb65 0507 	sbc.w	r5, r5, r7
 80039fa:	01a9      	lsls	r1, r5, #6
 80039fc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003a00:	01a0      	lsls	r0, r4, #6
 8003a02:	1b00      	subs	r0, r0, r4
 8003a04:	eb61 0105 	sbc.w	r1, r1, r5
 8003a08:	00cb      	lsls	r3, r1, #3
 8003a0a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003a0e:	00c4      	lsls	r4, r0, #3
 8003a10:	19a0      	adds	r0, r4, r6
 8003a12:	eb43 0107 	adc.w	r1, r3, r7
 8003a16:	028b      	lsls	r3, r1, #10
 8003a18:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003a1c:	0284      	lsls	r4, r0, #10
 8003a1e:	4620      	mov	r0, r4
 8003a20:	4619      	mov	r1, r3
 8003a22:	2300      	movs	r3, #0
 8003a24:	f7fd f918 	bl	8000c58 <__aeabi_uldivmod>
 8003a28:	e7d2      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8003a2a:	4803      	ldr	r0, [pc, #12]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	007a1200 	.word	0x007a1200

08003a3c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	f000 809d 	beq.w	8003b7c <HAL_RCC_ClockConfig+0x140>
{
 8003a42:	b570      	push	{r4, r5, r6, lr}
 8003a44:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a46:	4b4f      	ldr	r3, [pc, #316]	; (8003b84 <HAL_RCC_ClockConfig+0x148>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	428b      	cmp	r3, r1
 8003a50:	d209      	bcs.n	8003a66 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	b2cb      	uxtb	r3, r1
 8003a54:	4a4b      	ldr	r2, [pc, #300]	; (8003b84 <HAL_RCC_ClockConfig+0x148>)
 8003a56:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a58:	6813      	ldr	r3, [r2, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	428b      	cmp	r3, r1
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8003a62:	2001      	movs	r0, #1
}
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	f013 0f02 	tst.w	r3, #2
 8003a6c:	d017      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6e:	f013 0f04 	tst.w	r3, #4
 8003a72:	d004      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4a44      	ldr	r2, [pc, #272]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003a76:	6893      	ldr	r3, [r2, #8]
 8003a78:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a7c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	f013 0f08 	tst.w	r3, #8
 8003a84:	d004      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a86:	4a40      	ldr	r2, [pc, #256]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003a88:	6893      	ldr	r3, [r2, #8]
 8003a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a8e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a90:	4a3d      	ldr	r2, [pc, #244]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003a92:	6893      	ldr	r3, [r2, #8]
 8003a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a98:	68a0      	ldr	r0, [r4, #8]
 8003a9a:	4303      	orrs	r3, r0
 8003a9c:	6093      	str	r3, [r2, #8]
 8003a9e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	f013 0f01 	tst.w	r3, #1
 8003aa6:	d032      	beq.n	8003b0e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa8:	6863      	ldr	r3, [r4, #4]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d021      	beq.n	8003af2 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aae:	1e9a      	subs	r2, r3, #2
 8003ab0:	2a01      	cmp	r2, #1
 8003ab2:	d925      	bls.n	8003b00 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab4:	4a34      	ldr	r2, [pc, #208]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	f012 0f02 	tst.w	r2, #2
 8003abc:	d060      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4932      	ldr	r1, [pc, #200]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003ac0:	688a      	ldr	r2, [r1, #8]
 8003ac2:	f022 0203 	bic.w	r2, r2, #3
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003aca:	f7fe fe63 	bl	8002794 <HAL_GetTick>
 8003ace:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	6862      	ldr	r2, [r4, #4]
 8003ada:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ade:	d016      	beq.n	8003b0e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fe fe58 	bl	8002794 <HAL_GetTick>
 8003ae4:	1b80      	subs	r0, r0, r6
 8003ae6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003aea:	4298      	cmp	r0, r3
 8003aec:	d9f0      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8003aee:	2003      	movs	r0, #3
 8003af0:	e7b8      	b.n	8003a64 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003afa:	d1e0      	bne.n	8003abe <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003afc:	2001      	movs	r0, #1
 8003afe:	e7b1      	b.n	8003a64 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b00:	4a21      	ldr	r2, [pc, #132]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003b08:	d1d9      	bne.n	8003abe <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	e7aa      	b.n	8003a64 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0e:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <HAL_RCC_ClockConfig+0x148>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	42ab      	cmp	r3, r5
 8003b18:	d909      	bls.n	8003b2e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	b2ea      	uxtb	r2, r5
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCC_ClockConfig+0x148>)
 8003b1e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	42ab      	cmp	r3, r5
 8003b28:	d001      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	e79a      	b.n	8003a64 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	f013 0f04 	tst.w	r3, #4
 8003b34:	d006      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b36:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003b38:	6893      	ldr	r3, [r2, #8]
 8003b3a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003b3e:	68e1      	ldr	r1, [r4, #12]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	f013 0f08 	tst.w	r3, #8
 8003b4a:	d007      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4c:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003b4e:	6893      	ldr	r3, [r2, #8]
 8003b50:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b54:	6921      	ldr	r1, [r4, #16]
 8003b56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b5a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b5c:	f7ff ff02 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x14c>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b68:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <HAL_RCC_ClockConfig+0x150>)
 8003b6a:	5cd3      	ldrb	r3, [r2, r3]
 8003b6c:	40d8      	lsrs	r0, r3
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_RCC_ClockConfig+0x154>)
 8003b70:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f7fe fdc2 	bl	80026fc <HAL_InitTick>
  return HAL_OK;
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e773      	b.n	8003a64 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003b7c:	2001      	movs	r0, #1
}
 8003b7e:	4770      	bx	lr
        return HAL_ERROR;
 8003b80:	2001      	movs	r0, #1
 8003b82:	e76f      	b.n	8003a64 <HAL_RCC_ClockConfig+0x28>
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08009688 	.word	0x08009688
 8003b90:	20000050 	.word	0x20000050

08003b94 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003b94:	4b01      	ldr	r3, [pc, #4]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x8>)
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000050 	.word	0x20000050

08003ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ba2:	f7ff fff7 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003bae:	4a03      	ldr	r2, [pc, #12]	; (8003bbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003bb0:	5cd3      	ldrb	r3, [r2, r3]
}
 8003bb2:	40d8      	lsrs	r0, r3
 8003bb4:	bd08      	pop	{r3, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	08009698 	.word	0x08009698

08003bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bc2:	f7ff ffe7 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bc6:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003bce:	4a03      	ldr	r2, [pc, #12]	; (8003bdc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003bd0:	5cd3      	ldrb	r3, [r2, r3]
}
 8003bd2:	40d8      	lsrs	r0, r3
 8003bd4:	bd08      	pop	{r3, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	08009698 	.word	0x08009698

08003be0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be2:	6a03      	ldr	r3, [r0, #32]
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bec:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bee:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bf0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf4:	680d      	ldr	r5, [r1, #0]
 8003bf6:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bfa:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bfe:	688b      	ldr	r3, [r1, #8]
 8003c00:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c02:	4d0d      	ldr	r5, [pc, #52]	; (8003c38 <TIM_OC1_SetConfig+0x58>)
 8003c04:	42a8      	cmp	r0, r5
 8003c06:	d009      	beq.n	8003c1c <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c08:	4d0b      	ldr	r5, [pc, #44]	; (8003c38 <TIM_OC1_SetConfig+0x58>)
 8003c0a:	42a8      	cmp	r0, r5
 8003c0c:	d00d      	beq.n	8003c2a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c10:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c12:	684a      	ldr	r2, [r1, #4]
 8003c14:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c16:	6203      	str	r3, [r0, #32]
}
 8003c18:	bc70      	pop	{r4, r5, r6}
 8003c1a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c1c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003c20:	68cc      	ldr	r4, [r1, #12]
 8003c22:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	e7ee      	b.n	8003c08 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003c2e:	694c      	ldr	r4, [r1, #20]
 8003c30:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c32:	698a      	ldr	r2, [r1, #24]
 8003c34:	4322      	orrs	r2, r4
 8003c36:	e7ea      	b.n	8003c0e <TIM_OC1_SetConfig+0x2e>
 8003c38:	40010000 	.word	0x40010000

08003c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c3e:	6a03      	ldr	r3, [r0, #32]
 8003c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c44:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c4a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c4c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c50:	680d      	ldr	r5, [r1, #0]
 8003c52:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c58:	688d      	ldr	r5, [r1, #8]
 8003c5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c5e:	4d0f      	ldr	r5, [pc, #60]	; (8003c9c <TIM_OC3_SetConfig+0x60>)
 8003c60:	42a8      	cmp	r0, r5
 8003c62:	d009      	beq.n	8003c78 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c64:	4d0d      	ldr	r5, [pc, #52]	; (8003c9c <TIM_OC3_SetConfig+0x60>)
 8003c66:	42a8      	cmp	r0, r5
 8003c68:	d00e      	beq.n	8003c88 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c6e:	684a      	ldr	r2, [r1, #4]
 8003c70:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c72:	6203      	str	r3, [r0, #32]
}
 8003c74:	bc30      	pop	{r4, r5}
 8003c76:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c7c:	68cd      	ldr	r5, [r1, #12]
 8003c7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c86:	e7ed      	b.n	8003c64 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c88:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c8c:	694d      	ldr	r5, [r1, #20]
 8003c8e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c92:	698d      	ldr	r5, [r1, #24]
 8003c94:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003c98:	e7e7      	b.n	8003c6a <TIM_OC3_SetConfig+0x2e>
 8003c9a:	bf00      	nop
 8003c9c:	40010000 	.word	0x40010000

08003ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ca2:	6a03      	ldr	r3, [r0, #32]
 8003ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cae:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb4:	680d      	ldr	r5, [r1, #0]
 8003cb6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cbe:	688d      	ldr	r5, [r1, #8]
 8003cc0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	4d07      	ldr	r5, [pc, #28]	; (8003ce4 <TIM_OC4_SetConfig+0x44>)
 8003cc6:	42a8      	cmp	r0, r5
 8003cc8:	d006      	beq.n	8003cd8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ccc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cce:	684a      	ldr	r2, [r1, #4]
 8003cd0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd2:	6203      	str	r3, [r0, #32]
}
 8003cd4:	bc30      	pop	{r4, r5}
 8003cd6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cd8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cdc:	694d      	ldr	r5, [r1, #20]
 8003cde:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003ce2:	e7f2      	b.n	8003cca <TIM_OC4_SetConfig+0x2a>
 8003ce4:	40010000 	.word	0x40010000

08003ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cea:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cec:	6a04      	ldr	r4, [r0, #32]
 8003cee:	f024 0401 	bic.w	r4, r4, #1
 8003cf2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cf6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cfa:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cfe:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003d02:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d04:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d06:	6203      	str	r3, [r0, #32]
}
 8003d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d10:	6a03      	ldr	r3, [r0, #32]
 8003d12:	f023 0310 	bic.w	r3, r3, #16
 8003d16:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d18:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003d1a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d1c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d20:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d28:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d2c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d2e:	6203      	str	r3, [r0, #32]
}
 8003d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d36:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d3c:	4319      	orrs	r1, r3
 8003d3e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	6081      	str	r1, [r0, #8]
}
 8003d44:	4770      	bx	lr

08003d46 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d46:	6802      	ldr	r2, [r0, #0]
 8003d48:	68d3      	ldr	r3, [r2, #12]
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d50:	6802      	ldr	r2, [r0, #0]
 8003d52:	6893      	ldr	r3, [r2, #8]
 8003d54:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	2b06      	cmp	r3, #6
 8003d5a:	d003      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8003d5c:	6813      	ldr	r3, [r2, #0]
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]
}
 8003d64:	2000      	movs	r0, #0
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIM_PWM_MspInit>:
}
 8003d68:	4770      	bx	lr

08003d6a <HAL_TIM_PeriodElapsedCallback>:
}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003d6c:	4770      	bx	lr

08003d6e <HAL_TIM_IC_CaptureCallback>:
}
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIM_TriggerCallback>:
}
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIM_IRQHandler>:
{
 8003d72:	b510      	push	{r4, lr}
 8003d74:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d76:	6803      	ldr	r3, [r0, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	f012 0f02 	tst.w	r2, #2
 8003d7e:	d011      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	f012 0f02 	tst.w	r2, #2
 8003d86:	d00d      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d88:	f06f 0202 	mvn.w	r2, #2
 8003d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d92:	6803      	ldr	r3, [r0, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f013 0f03 	tst.w	r3, #3
 8003d9a:	d070      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003d9c:	f7ff ffe7 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da0:	2300      	movs	r3, #0
 8003da2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	f012 0f04 	tst.w	r2, #4
 8003dac:	d012      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	f012 0f04 	tst.w	r2, #4
 8003db4:	d00e      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003db6:	f06f 0204 	mvn.w	r2, #4
 8003dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003dc8:	d05f      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f7ff ffcf 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	f012 0f08 	tst.w	r2, #8
 8003ddc:	d012      	beq.n	8003e04 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	f012 0f08 	tst.w	r2, #8
 8003de4:	d00e      	beq.n	8003e04 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de6:	f06f 0208 	mvn.w	r2, #8
 8003dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dec:	2304      	movs	r3, #4
 8003dee:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f013 0f03 	tst.w	r3, #3
 8003df8:	d04e      	beq.n	8003e98 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f7ff ffb7 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e00:	2300      	movs	r3, #0
 8003e02:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	f012 0f10 	tst.w	r2, #16
 8003e0c:	d012      	beq.n	8003e34 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	f012 0f10 	tst.w	r2, #16
 8003e14:	d00e      	beq.n	8003e34 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e16:	f06f 0210 	mvn.w	r2, #16
 8003e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003e28:	d03d      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f7ff ff9f 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e30:	2300      	movs	r3, #0
 8003e32:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	f012 0f01 	tst.w	r2, #1
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	f012 0f01 	tst.w	r2, #1
 8003e44:	d136      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e4e:	d003      	beq.n	8003e58 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e56:	d134      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003e68:	d132      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	f012 0f20 	tst.w	r2, #32
 8003e72:	d003      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	f012 0f20 	tst.w	r2, #32
 8003e7a:	d130      	bne.n	8003ede <HAL_TIM_IRQHandler+0x16c>
}
 8003e7c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7e:	f7ff ff75 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e82:	4620      	mov	r0, r4
 8003e84:	f000 fe12 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
 8003e88:	e78a      	b.n	8003da0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f7ff ff6e 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	4620      	mov	r0, r4
 8003e92:	f000 fe0b 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
 8003e96:	e79b      	b.n	8003dd0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7ff ff67 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f000 fe04 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
 8003ea4:	e7ac      	b.n	8003e00 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f7ff ff60 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	4620      	mov	r0, r4
 8003eae:	f000 fdfd 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
 8003eb2:	e7bd      	b.n	8003e30 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb4:	f06f 0201 	mvn.w	r2, #1
 8003eb8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f7ff ff55 	bl	8003d6a <HAL_TIM_PeriodElapsedCallback>
 8003ec0:	e7c1      	b.n	8003e46 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ec2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ec6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f000 fa1d 	bl	8004308 <HAL_TIMEx_BreakCallback>
 8003ece:	e7c3      	b.n	8003e58 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ed0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ed4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f7ff ff4a 	bl	8003d70 <HAL_TIM_TriggerCallback>
 8003edc:	e7c5      	b.n	8003e6a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ede:	f06f 0220 	mvn.w	r2, #32
 8003ee2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f000 fa0e 	bl	8004306 <HAL_TIMEx_CommutCallback>
}
 8003eea:	e7c7      	b.n	8003e7c <HAL_TIM_IRQHandler+0x10a>

08003eec <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003eec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eee:	4a25      	ldr	r2, [pc, #148]	; (8003f84 <TIM_Base_SetConfig+0x98>)
 8003ef0:	4290      	cmp	r0, r2
 8003ef2:	d00e      	beq.n	8003f12 <TIM_Base_SetConfig+0x26>
 8003ef4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ef8:	d00b      	beq.n	8003f12 <TIM_Base_SetConfig+0x26>
 8003efa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003efe:	4290      	cmp	r0, r2
 8003f00:	d007      	beq.n	8003f12 <TIM_Base_SetConfig+0x26>
 8003f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f06:	4290      	cmp	r0, r2
 8003f08:	d003      	beq.n	8003f12 <TIM_Base_SetConfig+0x26>
 8003f0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f0e:	4290      	cmp	r0, r2
 8003f10:	d103      	bne.n	8003f1a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f16:	684a      	ldr	r2, [r1, #4]
 8003f18:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <TIM_Base_SetConfig+0x98>)
 8003f1c:	4290      	cmp	r0, r2
 8003f1e:	d01a      	beq.n	8003f56 <TIM_Base_SetConfig+0x6a>
 8003f20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f24:	d017      	beq.n	8003f56 <TIM_Base_SetConfig+0x6a>
 8003f26:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003f2a:	4290      	cmp	r0, r2
 8003f2c:	d013      	beq.n	8003f56 <TIM_Base_SetConfig+0x6a>
 8003f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f32:	4290      	cmp	r0, r2
 8003f34:	d00f      	beq.n	8003f56 <TIM_Base_SetConfig+0x6a>
 8003f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f3a:	4290      	cmp	r0, r2
 8003f3c:	d00b      	beq.n	8003f56 <TIM_Base_SetConfig+0x6a>
 8003f3e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003f42:	4290      	cmp	r0, r2
 8003f44:	d007      	beq.n	8003f56 <TIM_Base_SetConfig+0x6a>
 8003f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f4a:	4290      	cmp	r0, r2
 8003f4c:	d003      	beq.n	8003f56 <TIM_Base_SetConfig+0x6a>
 8003f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f52:	4290      	cmp	r0, r2
 8003f54:	d103      	bne.n	8003f5e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5a:	68ca      	ldr	r2, [r1, #12]
 8003f5c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f62:	694a      	ldr	r2, [r1, #20]
 8003f64:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003f66:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	688b      	ldr	r3, [r1, #8]
 8003f6a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f6c:	680b      	ldr	r3, [r1, #0]
 8003f6e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <TIM_Base_SetConfig+0x98>)
 8003f72:	4298      	cmp	r0, r3
 8003f74:	d002      	beq.n	8003f7c <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8003f76:	2301      	movs	r3, #1
 8003f78:	6143      	str	r3, [r0, #20]
}
 8003f7a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003f7c:	690b      	ldr	r3, [r1, #16]
 8003f7e:	6303      	str	r3, [r0, #48]	; 0x30
 8003f80:	e7f9      	b.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f82:	bf00      	nop
 8003f84:	40010000 	.word	0x40010000

08003f88 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003f88:	b1a8      	cbz	r0, 8003fb6 <HAL_TIM_Base_Init+0x2e>
{
 8003f8a:	b510      	push	{r4, lr}
 8003f8c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f92:	b15b      	cbz	r3, 8003fac <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	2302      	movs	r3, #2
 8003f96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9a:	1d21      	adds	r1, r4, #4
 8003f9c:	6820      	ldr	r0, [r4, #0]
 8003f9e:	f7ff ffa5 	bl	8003eec <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fa8:	2000      	movs	r0, #0
}
 8003faa:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003fac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003fb0:	f000 ff6c 	bl	8004e8c <HAL_TIM_Base_MspInit>
 8003fb4:	e7ee      	b.n	8003f94 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003fb6:	2001      	movs	r0, #1
}
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003fba:	b1a8      	cbz	r0, 8003fe8 <HAL_TIM_PWM_Init+0x2e>
{
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fc4:	b15b      	cbz	r3, 8003fde <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fcc:	1d21      	adds	r1, r4, #4
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	f7ff ff8c 	bl	8003eec <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fda:	2000      	movs	r0, #0
}
 8003fdc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003fde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003fe2:	f7ff fec1 	bl	8003d68 <HAL_TIM_PWM_MspInit>
 8003fe6:	e7ee      	b.n	8003fc6 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003fe8:	2001      	movs	r0, #1
}
 8003fea:	4770      	bx	lr

08003fec <TIM_OC2_SetConfig>:
{
 8003fec:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fee:	6a03      	ldr	r3, [r0, #32]
 8003ff0:	f023 0310 	bic.w	r3, r3, #16
 8003ff4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003ff6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003ff8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003ffa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ffc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004000:	680d      	ldr	r5, [r1, #0]
 8004002:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004006:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800400a:	688d      	ldr	r5, [r1, #8]
 800400c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004010:	4d0e      	ldr	r5, [pc, #56]	; (800404c <TIM_OC2_SetConfig+0x60>)
 8004012:	42a8      	cmp	r0, r5
 8004014:	d009      	beq.n	800402a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004016:	4d0d      	ldr	r5, [pc, #52]	; (800404c <TIM_OC2_SetConfig+0x60>)
 8004018:	42a8      	cmp	r0, r5
 800401a:	d00e      	beq.n	800403a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 800401c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800401e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004020:	684a      	ldr	r2, [r1, #4]
 8004022:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004024:	6203      	str	r3, [r0, #32]
}
 8004026:	bc30      	pop	{r4, r5}
 8004028:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800402a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800402e:	68cd      	ldr	r5, [r1, #12]
 8004030:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004038:	e7ed      	b.n	8004016 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800403a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800403e:	694d      	ldr	r5, [r1, #20]
 8004040:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004044:	698d      	ldr	r5, [r1, #24]
 8004046:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800404a:	e7e7      	b.n	800401c <TIM_OC2_SetConfig+0x30>
 800404c:	40010000 	.word	0x40010000

08004050 <HAL_TIM_PWM_ConfigChannel>:
{
 8004050:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004052:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d066      	beq.n	8004128 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800405a:	460d      	mov	r5, r1
 800405c:	4604      	mov	r4, r0
 800405e:	2301      	movs	r3, #1
 8004060:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	2302      	movs	r3, #2
 8004066:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800406a:	2a0c      	cmp	r2, #12
 800406c:	d81a      	bhi.n	80040a4 <HAL_TIM_PWM_ConfigChannel+0x54>
 800406e:	e8df f002 	tbb	[pc, r2]
 8004072:	1907      	.short	0x1907
 8004074:	19201919 	.word	0x19201919
 8004078:	19341919 	.word	0x19341919
 800407c:	1919      	.short	0x1919
 800407e:	47          	.byte	0x47
 800407f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004080:	6800      	ldr	r0, [r0, #0]
 8004082:	f7ff fdad 	bl	8003be0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	6993      	ldr	r3, [r2, #24]
 800408a:	f043 0308 	orr.w	r3, r3, #8
 800408e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	6993      	ldr	r3, [r2, #24]
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	6993      	ldr	r3, [r2, #24]
 800409e:	6929      	ldr	r1, [r5, #16]
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80040aa:	2000      	movs	r0, #0
 80040ac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80040b0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040b2:	6800      	ldr	r0, [r0, #0]
 80040b4:	f7ff ff9a 	bl	8003fec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	6993      	ldr	r3, [r2, #24]
 80040bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040c0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c2:	6822      	ldr	r2, [r4, #0]
 80040c4:	6993      	ldr	r3, [r2, #24]
 80040c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ca:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040cc:	6822      	ldr	r2, [r4, #0]
 80040ce:	6993      	ldr	r3, [r2, #24]
 80040d0:	6929      	ldr	r1, [r5, #16]
 80040d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80040d6:	6193      	str	r3, [r2, #24]
      break;
 80040d8:	e7e4      	b.n	80040a4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040da:	6800      	ldr	r0, [r0, #0]
 80040dc:	f7ff fdae 	bl	8003c3c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	69d3      	ldr	r3, [r2, #28]
 80040e4:	f043 0308 	orr.w	r3, r3, #8
 80040e8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ea:	6822      	ldr	r2, [r4, #0]
 80040ec:	69d3      	ldr	r3, [r2, #28]
 80040ee:	f023 0304 	bic.w	r3, r3, #4
 80040f2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040f4:	6822      	ldr	r2, [r4, #0]
 80040f6:	69d3      	ldr	r3, [r2, #28]
 80040f8:	6929      	ldr	r1, [r5, #16]
 80040fa:	430b      	orrs	r3, r1
 80040fc:	61d3      	str	r3, [r2, #28]
      break;
 80040fe:	e7d1      	b.n	80040a4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004100:	6800      	ldr	r0, [r0, #0]
 8004102:	f7ff fdcd 	bl	8003ca0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	69d3      	ldr	r3, [r2, #28]
 800410a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800410e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004110:	6822      	ldr	r2, [r4, #0]
 8004112:	69d3      	ldr	r3, [r2, #28]
 8004114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004118:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	69d3      	ldr	r3, [r2, #28]
 800411e:	6929      	ldr	r1, [r5, #16]
 8004120:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004124:	61d3      	str	r3, [r2, #28]
      break;
 8004126:	e7bd      	b.n	80040a4 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8004128:	2002      	movs	r0, #2
 800412a:	e7c1      	b.n	80040b0 <HAL_TIM_PWM_ConfigChannel+0x60>

0800412c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800412c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800412e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004130:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004134:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004138:	430b      	orrs	r3, r1
 800413a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413c:	6083      	str	r3, [r0, #8]
}
 800413e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004144:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004148:	2b01      	cmp	r3, #1
 800414a:	d066      	beq.n	800421a <HAL_TIM_ConfigClockSource+0xd6>
{
 800414c:	b510      	push	{r4, lr}
 800414e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004150:	2301      	movs	r3, #1
 8004152:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004156:	2302      	movs	r3, #2
 8004158:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800415c:	6802      	ldr	r2, [r0, #0]
 800415e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004160:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004164:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004168:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800416a:	680b      	ldr	r3, [r1, #0]
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d04a      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0xc2>
 8004170:	d913      	bls.n	800419a <HAL_TIM_ConfigClockSource+0x56>
 8004172:	2b60      	cmp	r3, #96	; 0x60
 8004174:	d03d      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0xae>
 8004176:	d91e      	bls.n	80041b6 <HAL_TIM_ConfigClockSource+0x72>
 8004178:	2b70      	cmp	r3, #112	; 0x70
 800417a:	d028      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x8a>
 800417c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004180:	d130      	bne.n	80041e4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8004182:	68cb      	ldr	r3, [r1, #12]
 8004184:	684a      	ldr	r2, [r1, #4]
 8004186:	6889      	ldr	r1, [r1, #8]
 8004188:	6800      	ldr	r0, [r0, #0]
 800418a:	f7ff ffcf 	bl	800412c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800418e:	6822      	ldr	r2, [r4, #0]
 8004190:	6893      	ldr	r3, [r2, #8]
 8004192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004196:	6093      	str	r3, [r2, #8]
      break;
 8004198:	e024      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800419a:	2b10      	cmp	r3, #16
 800419c:	d006      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x68>
 800419e:	d904      	bls.n	80041aa <HAL_TIM_ConfigClockSource+0x66>
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d003      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x68>
 80041a4:	2b30      	cmp	r3, #48	; 0x30
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x68>
 80041a8:	e01c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0xa0>
 80041aa:	b9db      	cbnz	r3, 80041e4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ac:	4619      	mov	r1, r3
 80041ae:	6820      	ldr	r0, [r4, #0]
 80041b0:	f7ff fdc1 	bl	8003d36 <TIM_ITRx_SetConfig>
      break;
 80041b4:	e016      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80041b6:	2b50      	cmp	r3, #80	; 0x50
 80041b8:	d114      	bne.n	80041e4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ba:	68ca      	ldr	r2, [r1, #12]
 80041bc:	6849      	ldr	r1, [r1, #4]
 80041be:	6800      	ldr	r0, [r0, #0]
 80041c0:	f7ff fd92 	bl	8003ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041c4:	2150      	movs	r1, #80	; 0x50
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	f7ff fdb5 	bl	8003d36 <TIM_ITRx_SetConfig>
      break;
 80041cc:	e00a      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80041ce:	68cb      	ldr	r3, [r1, #12]
 80041d0:	684a      	ldr	r2, [r1, #4]
 80041d2:	6889      	ldr	r1, [r1, #8]
 80041d4:	6800      	ldr	r0, [r0, #0]
 80041d6:	f7ff ffa9 	bl	800412c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80041e2:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80041f0:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f2:	68ca      	ldr	r2, [r1, #12]
 80041f4:	6849      	ldr	r1, [r1, #4]
 80041f6:	6800      	ldr	r0, [r0, #0]
 80041f8:	f7ff fd89 	bl	8003d0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041fc:	2160      	movs	r1, #96	; 0x60
 80041fe:	6820      	ldr	r0, [r4, #0]
 8004200:	f7ff fd99 	bl	8003d36 <TIM_ITRx_SetConfig>
      break;
 8004204:	e7ee      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004206:	68ca      	ldr	r2, [r1, #12]
 8004208:	6849      	ldr	r1, [r1, #4]
 800420a:	6800      	ldr	r0, [r0, #0]
 800420c:	f7ff fd6c 	bl	8003ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004210:	2140      	movs	r1, #64	; 0x40
 8004212:	6820      	ldr	r0, [r4, #0]
 8004214:	f7ff fd8f 	bl	8003d36 <TIM_ITRx_SetConfig>
      break;
 8004218:	e7e4      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 800421a:	2002      	movs	r0, #2
}
 800421c:	4770      	bx	lr

0800421e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800421e:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004220:	f001 011f 	and.w	r1, r1, #31
 8004224:	2301      	movs	r3, #1
 8004226:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800422a:	6a03      	ldr	r3, [r0, #32]
 800422c:	ea23 0304 	bic.w	r3, r3, r4
 8004230:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004232:	6a03      	ldr	r3, [r0, #32]
 8004234:	408a      	lsls	r2, r1
 8004236:	4313      	orrs	r3, r2
 8004238:	6203      	str	r3, [r0, #32]
}
 800423a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIM_PWM_Start_IT>:
{
 8004240:	b510      	push	{r4, lr}
 8004242:	4604      	mov	r4, r0
  switch (Channel)
 8004244:	290c      	cmp	r1, #12
 8004246:	d80d      	bhi.n	8004264 <HAL_TIM_PWM_Start_IT+0x24>
 8004248:	e8df f001 	tbb	[pc, r1]
 800424c:	0c0c0c07 	.word	0x0c0c0c07
 8004250:	0c0c0c20 	.word	0x0c0c0c20
 8004254:	0c0c0c26 	.word	0x0c0c0c26
 8004258:	2c          	.byte	0x2c
 8004259:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800425a:	6802      	ldr	r2, [r0, #0]
 800425c:	68d3      	ldr	r3, [r2, #12]
 800425e:	f043 0302 	orr.w	r3, r3, #2
 8004262:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004264:	2201      	movs	r2, #1
 8004266:	6820      	ldr	r0, [r4, #0]
 8004268:	f7ff ffd9 	bl	800421e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	4a13      	ldr	r2, [pc, #76]	; (80042bc <HAL_TIM_PWM_Start_IT+0x7c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d01d      	beq.n	80042b0 <HAL_TIM_PWM_Start_IT+0x70>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	6893      	ldr	r3, [r2, #8]
 8004278:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427c:	2b06      	cmp	r3, #6
 800427e:	d003      	beq.n	8004288 <HAL_TIM_PWM_Start_IT+0x48>
    __HAL_TIM_ENABLE(htim);
 8004280:	6813      	ldr	r3, [r2, #0]
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6013      	str	r3, [r2, #0]
}
 8004288:	2000      	movs	r0, #0
 800428a:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800428c:	6802      	ldr	r2, [r0, #0]
 800428e:	68d3      	ldr	r3, [r2, #12]
 8004290:	f043 0304 	orr.w	r3, r3, #4
 8004294:	60d3      	str	r3, [r2, #12]
      break;
 8004296:	e7e5      	b.n	8004264 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004298:	6802      	ldr	r2, [r0, #0]
 800429a:	68d3      	ldr	r3, [r2, #12]
 800429c:	f043 0308 	orr.w	r3, r3, #8
 80042a0:	60d3      	str	r3, [r2, #12]
      break;
 80042a2:	e7df      	b.n	8004264 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042a4:	6802      	ldr	r2, [r0, #0]
 80042a6:	68d3      	ldr	r3, [r2, #12]
 80042a8:	f043 0310 	orr.w	r3, r3, #16
 80042ac:	60d3      	str	r3, [r2, #12]
      break;
 80042ae:	e7d9      	b.n	8004264 <HAL_TIM_PWM_Start_IT+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80042b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44
 80042b8:	e7dc      	b.n	8004274 <HAL_TIM_PWM_Start_IT+0x34>
 80042ba:	bf00      	nop
 80042bc:	40010000 	.word	0x40010000

080042c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d01c      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 80042c8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80042ca:	2601      	movs	r6, #1
 80042cc:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	2302      	movs	r3, #2
 80042d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d6:	6802      	ldr	r2, [r0, #0]
 80042d8:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042da:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042dc:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e0:	680c      	ldr	r4, [r1, #0]
 80042e2:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80042e4:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e8:	684b      	ldr	r3, [r1, #4]
 80042ea:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ec:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042ee:	6802      	ldr	r2, [r0, #0]
 80042f0:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f2:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f6:	2300      	movs	r3, #0
 80042f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80042fc:	4618      	mov	r0, r3
}
 80042fe:	bc70      	pop	{r4, r5, r6}
 8004300:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004302:	2002      	movs	r0, #2
}
 8004304:	4770      	bx	lr

08004306 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004306:	4770      	bx	lr

08004308 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004308:	4770      	bx	lr
	...

0800430c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800430c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004310:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004312:	6802      	ldr	r2, [r0, #0]
 8004314:	6913      	ldr	r3, [r2, #16]
 8004316:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800431a:	68c1      	ldr	r1, [r0, #12]
 800431c:	430b      	orrs	r3, r1
 800431e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004320:	6883      	ldr	r3, [r0, #8]
 8004322:	6902      	ldr	r2, [r0, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	6942      	ldr	r2, [r0, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	69c2      	ldr	r2, [r0, #28]
 800432c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800432e:	6801      	ldr	r1, [r0, #0]
 8004330:	68cb      	ldr	r3, [r1, #12]
 8004332:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004336:	f023 030c 	bic.w	r3, r3, #12
 800433a:	4313      	orrs	r3, r2
 800433c:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800433e:	6802      	ldr	r2, [r0, #0]
 8004340:	6953      	ldr	r3, [r2, #20]
 8004342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004346:	6981      	ldr	r1, [r0, #24]
 8004348:	430b      	orrs	r3, r1
 800434a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800434c:	69c3      	ldr	r3, [r0, #28]
 800434e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004352:	d060      	beq.n	8004416 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004354:	6803      	ldr	r3, [r0, #0]
 8004356:	4ab8      	ldr	r2, [pc, #736]	; (8004638 <UART_SetConfig+0x32c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	f000 8114 	beq.w	8004586 <UART_SetConfig+0x27a>
 800435e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004362:	4293      	cmp	r3, r2
 8004364:	f000 810f 	beq.w	8004586 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004368:	f7ff fc1a 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 800436c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004370:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004374:	6865      	ldr	r5, [r4, #4]
 8004376:	00ad      	lsls	r5, r5, #2
 8004378:	fbb0 f5f5 	udiv	r5, r0, r5
 800437c:	4faf      	ldr	r7, [pc, #700]	; (800463c <UART_SetConfig+0x330>)
 800437e:	fba7 3505 	umull	r3, r5, r7, r5
 8004382:	096d      	lsrs	r5, r5, #5
 8004384:	012e      	lsls	r6, r5, #4
 8004386:	f7ff fc0b 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 800438a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800438e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004392:	6865      	ldr	r5, [r4, #4]
 8004394:	00ad      	lsls	r5, r5, #2
 8004396:	fbb0 f9f5 	udiv	r9, r0, r5
 800439a:	f7ff fc01 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 800439e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043a6:	6865      	ldr	r5, [r4, #4]
 80043a8:	00ad      	lsls	r5, r5, #2
 80043aa:	fbb0 f5f5 	udiv	r5, r0, r5
 80043ae:	fba7 3505 	umull	r3, r5, r7, r5
 80043b2:	096d      	lsrs	r5, r5, #5
 80043b4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80043b8:	fb08 9515 	mls	r5, r8, r5, r9
 80043bc:	012d      	lsls	r5, r5, #4
 80043be:	3532      	adds	r5, #50	; 0x32
 80043c0:	fba7 3505 	umull	r3, r5, r7, r5
 80043c4:	096d      	lsrs	r5, r5, #5
 80043c6:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80043ca:	4435      	add	r5, r6
 80043cc:	f7ff fbe8 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 80043d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043d8:	6866      	ldr	r6, [r4, #4]
 80043da:	00b6      	lsls	r6, r6, #2
 80043dc:	fbb0 f6f6 	udiv	r6, r0, r6
 80043e0:	f7ff fbde 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 80043e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043ec:	6863      	ldr	r3, [r4, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80043f4:	fba7 3000 	umull	r3, r0, r7, r0
 80043f8:	0940      	lsrs	r0, r0, #5
 80043fa:	fb08 6810 	mls	r8, r8, r0, r6
 80043fe:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004402:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8004406:	fba7 3708 	umull	r3, r7, r7, r8
 800440a:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	442f      	add	r7, r5
 8004412:	609f      	str	r7, [r3, #8]
    }
  }
}
 8004414:	e10d      	b.n	8004632 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004416:	6803      	ldr	r3, [r0, #0]
 8004418:	4a87      	ldr	r2, [pc, #540]	; (8004638 <UART_SetConfig+0x32c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d05b      	beq.n	80044d6 <UART_SetConfig+0x1ca>
 800441e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004422:	4293      	cmp	r3, r2
 8004424:	d057      	beq.n	80044d6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004426:	f7ff fbbb 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 800442a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800442e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004432:	6865      	ldr	r5, [r4, #4]
 8004434:	006d      	lsls	r5, r5, #1
 8004436:	fbb0 f5f5 	udiv	r5, r0, r5
 800443a:	4f80      	ldr	r7, [pc, #512]	; (800463c <UART_SetConfig+0x330>)
 800443c:	fba7 3505 	umull	r3, r5, r7, r5
 8004440:	096d      	lsrs	r5, r5, #5
 8004442:	012e      	lsls	r6, r5, #4
 8004444:	f7ff fbac 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8004448:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800444c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004450:	6865      	ldr	r5, [r4, #4]
 8004452:	006d      	lsls	r5, r5, #1
 8004454:	fbb0 f9f5 	udiv	r9, r0, r5
 8004458:	f7ff fba2 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 800445c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004460:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004464:	6865      	ldr	r5, [r4, #4]
 8004466:	006d      	lsls	r5, r5, #1
 8004468:	fbb0 f5f5 	udiv	r5, r0, r5
 800446c:	fba7 3505 	umull	r3, r5, r7, r5
 8004470:	096d      	lsrs	r5, r5, #5
 8004472:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004476:	fb08 9515 	mls	r5, r8, r5, r9
 800447a:	00ed      	lsls	r5, r5, #3
 800447c:	3532      	adds	r5, #50	; 0x32
 800447e:	fba7 3505 	umull	r3, r5, r7, r5
 8004482:	096d      	lsrs	r5, r5, #5
 8004484:	006d      	lsls	r5, r5, #1
 8004486:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800448a:	4435      	add	r5, r6
 800448c:	f7ff fb88 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8004490:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004494:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004498:	6866      	ldr	r6, [r4, #4]
 800449a:	0076      	lsls	r6, r6, #1
 800449c:	fbb0 f6f6 	udiv	r6, r0, r6
 80044a0:	f7ff fb7e 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 80044a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b4:	fba7 2303 	umull	r2, r3, r7, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	fb08 6813 	mls	r8, r8, r3, r6
 80044be:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80044c2:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80044c6:	fba7 3708 	umull	r3, r7, r7, r8
 80044ca:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	442f      	add	r7, r5
 80044d2:	609f      	str	r7, [r3, #8]
 80044d4:	e0ad      	b.n	8004632 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80044d6:	f7ff fb73 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 80044da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044e2:	6865      	ldr	r5, [r4, #4]
 80044e4:	006d      	lsls	r5, r5, #1
 80044e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80044ea:	4f54      	ldr	r7, [pc, #336]	; (800463c <UART_SetConfig+0x330>)
 80044ec:	fba7 3505 	umull	r3, r5, r7, r5
 80044f0:	096d      	lsrs	r5, r5, #5
 80044f2:	012e      	lsls	r6, r5, #4
 80044f4:	f7ff fb64 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 80044f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004500:	6865      	ldr	r5, [r4, #4]
 8004502:	006d      	lsls	r5, r5, #1
 8004504:	fbb0 f9f5 	udiv	r9, r0, r5
 8004508:	f7ff fb5a 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 800450c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004510:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004514:	6865      	ldr	r5, [r4, #4]
 8004516:	006d      	lsls	r5, r5, #1
 8004518:	fbb0 f5f5 	udiv	r5, r0, r5
 800451c:	fba7 3505 	umull	r3, r5, r7, r5
 8004520:	096d      	lsrs	r5, r5, #5
 8004522:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004526:	fb08 9515 	mls	r5, r8, r5, r9
 800452a:	00ed      	lsls	r5, r5, #3
 800452c:	3532      	adds	r5, #50	; 0x32
 800452e:	fba7 3505 	umull	r3, r5, r7, r5
 8004532:	096d      	lsrs	r5, r5, #5
 8004534:	006d      	lsls	r5, r5, #1
 8004536:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800453a:	4435      	add	r5, r6
 800453c:	f7ff fb40 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 8004540:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004544:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004548:	6866      	ldr	r6, [r4, #4]
 800454a:	0076      	lsls	r6, r6, #1
 800454c:	fbb0 f6f6 	udiv	r6, r0, r6
 8004550:	f7ff fb36 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 8004554:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004558:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800455c:	6863      	ldr	r3, [r4, #4]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fbb0 f3f3 	udiv	r3, r0, r3
 8004564:	fba7 2303 	umull	r2, r3, r7, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	fb08 6813 	mls	r8, r8, r3, r6
 800456e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004572:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8004576:	fba7 3708 	umull	r3, r7, r7, r8
 800457a:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	442f      	add	r7, r5
 8004582:	609f      	str	r7, [r3, #8]
 8004584:	e055      	b.n	8004632 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004586:	f7ff fb1b 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 800458a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800458e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004592:	6865      	ldr	r5, [r4, #4]
 8004594:	00ad      	lsls	r5, r5, #2
 8004596:	fbb0 f5f5 	udiv	r5, r0, r5
 800459a:	4f28      	ldr	r7, [pc, #160]	; (800463c <UART_SetConfig+0x330>)
 800459c:	fba7 3505 	umull	r3, r5, r7, r5
 80045a0:	096d      	lsrs	r5, r5, #5
 80045a2:	012e      	lsls	r6, r5, #4
 80045a4:	f7ff fb0c 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 80045a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045b0:	6865      	ldr	r5, [r4, #4]
 80045b2:	00ad      	lsls	r5, r5, #2
 80045b4:	fbb0 f9f5 	udiv	r9, r0, r5
 80045b8:	f7ff fb02 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 80045bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045c4:	6865      	ldr	r5, [r4, #4]
 80045c6:	00ad      	lsls	r5, r5, #2
 80045c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80045cc:	fba7 3505 	umull	r3, r5, r7, r5
 80045d0:	096d      	lsrs	r5, r5, #5
 80045d2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80045d6:	fb08 9515 	mls	r5, r8, r5, r9
 80045da:	012d      	lsls	r5, r5, #4
 80045dc:	3532      	adds	r5, #50	; 0x32
 80045de:	fba7 3505 	umull	r3, r5, r7, r5
 80045e2:	096d      	lsrs	r5, r5, #5
 80045e4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80045e8:	4435      	add	r5, r6
 80045ea:	f7ff fae9 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 80045ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045f6:	6866      	ldr	r6, [r4, #4]
 80045f8:	00b6      	lsls	r6, r6, #2
 80045fa:	fbb0 f6f6 	udiv	r6, r0, r6
 80045fe:	f7ff fadf 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 8004602:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004606:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800460a:	6863      	ldr	r3, [r4, #4]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004612:	fba7 3000 	umull	r3, r0, r7, r0
 8004616:	0940      	lsrs	r0, r0, #5
 8004618:	fb08 6810 	mls	r8, r8, r0, r6
 800461c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004620:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8004624:	fba7 3708 	umull	r3, r7, r7, r8
 8004628:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	442f      	add	r7, r5
 8004630:	609f      	str	r7, [r3, #8]
}
 8004632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004636:	bf00      	nop
 8004638:	40011000 	.word	0x40011000
 800463c:	51eb851f 	.word	0x51eb851f

08004640 <UART_WaitOnFlagUntilTimeout>:
{
 8004640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004644:	4605      	mov	r5, r0
 8004646:	460f      	mov	r7, r1
 8004648:	4616      	mov	r6, r2
 800464a:	4698      	mov	r8, r3
 800464c:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464e:	682b      	ldr	r3, [r5, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	ea37 0303 	bics.w	r3, r7, r3
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	42b3      	cmp	r3, r6
 800465e:	d11d      	bne.n	800469c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8004660:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004664:	d0f3      	beq.n	800464e <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004666:	b12c      	cbz	r4, 8004674 <UART_WaitOnFlagUntilTimeout+0x34>
 8004668:	f7fe f894 	bl	8002794 <HAL_GetTick>
 800466c:	eba0 0008 	sub.w	r0, r0, r8
 8004670:	42a0      	cmp	r0, r4
 8004672:	d9ec      	bls.n	800464e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004674:	682a      	ldr	r2, [r5, #0]
 8004676:	68d3      	ldr	r3, [r2, #12]
 8004678:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800467c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467e:	682a      	ldr	r2, [r5, #0]
 8004680:	6953      	ldr	r3, [r2, #20]
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004688:	2320      	movs	r3, #32
 800468a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800468e:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8004692:	2300      	movs	r3, #0
 8004694:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8004698:	2003      	movs	r0, #3
 800469a:	e000      	b.n	800469e <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 800469c:	2000      	movs	r0, #0
}
 800469e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080046a2 <HAL_UART_Init>:
  if (huart == NULL)
 80046a2:	b358      	cbz	r0, 80046fc <HAL_UART_Init+0x5a>
{
 80046a4:	b510      	push	{r4, lr}
 80046a6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80046a8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80046ac:	b30b      	cbz	r3, 80046f2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80046ae:	2324      	movs	r3, #36	; 0x24
 80046b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80046b4:	6822      	ldr	r2, [r4, #0]
 80046b6:	68d3      	ldr	r3, [r2, #12]
 80046b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046bc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80046be:	4620      	mov	r0, r4
 80046c0:	f7ff fe24 	bl	800430c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	6913      	ldr	r3, [r2, #16]
 80046c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80046cc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	6953      	ldr	r3, [r2, #20]
 80046d2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80046d6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	68d3      	ldr	r3, [r2, #12]
 80046dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046e0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e2:	2000      	movs	r0, #0
 80046e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046e6:	2320      	movs	r3, #32
 80046e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046ec:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80046f0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80046f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80046f6:	f000 fc31 	bl	8004f5c <HAL_UART_MspInit>
 80046fa:	e7d8      	b.n	80046ae <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80046fc:	2001      	movs	r0, #1
}
 80046fe:	4770      	bx	lr

08004700 <HAL_UART_Transmit>:
{
 8004700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004708:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b20      	cmp	r3, #32
 8004710:	d155      	bne.n	80047be <HAL_UART_Transmit+0xbe>
 8004712:	4604      	mov	r4, r0
 8004714:	460d      	mov	r5, r1
 8004716:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004718:	2900      	cmp	r1, #0
 800471a:	d055      	beq.n	80047c8 <HAL_UART_Transmit+0xc8>
 800471c:	2a00      	cmp	r2, #0
 800471e:	d055      	beq.n	80047cc <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8004720:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004724:	2b01      	cmp	r3, #1
 8004726:	d053      	beq.n	80047d0 <HAL_UART_Transmit+0xd0>
 8004728:	2301      	movs	r3, #1
 800472a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472e:	2300      	movs	r3, #0
 8004730:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004732:	2321      	movs	r3, #33	; 0x21
 8004734:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8004738:	f7fe f82c 	bl	8002794 <HAL_GetTick>
 800473c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800473e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004742:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004746:	e010      	b.n	800476a <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004748:	9600      	str	r6, [sp, #0]
 800474a:	463b      	mov	r3, r7
 800474c:	2200      	movs	r2, #0
 800474e:	2180      	movs	r1, #128	; 0x80
 8004750:	4620      	mov	r0, r4
 8004752:	f7ff ff75 	bl	8004640 <UART_WaitOnFlagUntilTimeout>
 8004756:	2800      	cmp	r0, #0
 8004758:	d13c      	bne.n	80047d4 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800475a:	882b      	ldrh	r3, [r5, #0]
 800475c:	6822      	ldr	r2, [r4, #0]
 800475e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004762:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	b9c3      	cbnz	r3, 800479a <HAL_UART_Transmit+0x9a>
          pData += 2U;
 8004768:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800476a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800476c:	b29b      	uxth	r3, r3
 800476e:	b1b3      	cbz	r3, 800479e <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8004770:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004772:	3b01      	subs	r3, #1
 8004774:	b29b      	uxth	r3, r3
 8004776:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004778:	68a3      	ldr	r3, [r4, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d0e3      	beq.n	8004748 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004780:	9600      	str	r6, [sp, #0]
 8004782:	463b      	mov	r3, r7
 8004784:	2200      	movs	r2, #0
 8004786:	2180      	movs	r1, #128	; 0x80
 8004788:	4620      	mov	r0, r4
 800478a:	f7ff ff59 	bl	8004640 <UART_WaitOnFlagUntilTimeout>
 800478e:	bb18      	cbnz	r0, 80047d8 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004790:	782a      	ldrb	r2, [r5, #0]
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	3501      	adds	r5, #1
 8004798:	e7e7      	b.n	800476a <HAL_UART_Transmit+0x6a>
          pData += 1U;
 800479a:	3501      	adds	r5, #1
 800479c:	e7e5      	b.n	800476a <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479e:	9600      	str	r6, [sp, #0]
 80047a0:	463b      	mov	r3, r7
 80047a2:	2200      	movs	r2, #0
 80047a4:	2140      	movs	r1, #64	; 0x40
 80047a6:	4620      	mov	r0, r4
 80047a8:	f7ff ff4a 	bl	8004640 <UART_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	b9a8      	cbnz	r0, 80047dc <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 80047b0:	2220      	movs	r2, #32
 80047b2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80047b6:	2200      	movs	r2, #0
 80047b8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 80047bc:	e000      	b.n	80047c0 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 80047be:	2302      	movs	r3, #2
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	b002      	add	sp, #8
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e7f9      	b.n	80047c0 <HAL_UART_Transmit+0xc0>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e7f7      	b.n	80047c0 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 80047d0:	2302      	movs	r3, #2
 80047d2:	e7f5      	b.n	80047c0 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e7f3      	b.n	80047c0 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e7f1      	b.n	80047c0 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e7ef      	b.n	80047c0 <HAL_UART_Transmit+0xc0>

080047e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e4:	2400      	movs	r4, #0
 80047e6:	9405      	str	r4, [sp, #20]
 80047e8:	9406      	str	r4, [sp, #24]
 80047ea:	9407      	str	r4, [sp, #28]
 80047ec:	9408      	str	r4, [sp, #32]
 80047ee:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047f0:	9401      	str	r4, [sp, #4]
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <MX_GPIO_Init+0xa4>)
 80047f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
 80047fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fe:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004802:	9201      	str	r2, [sp, #4]
 8004804:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004806:	9402      	str	r4, [sp, #8]
 8004808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800480a:	f042 0204 	orr.w	r2, r2, #4
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
 8004810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004812:	f002 0204 	and.w	r2, r2, #4
 8004816:	9202      	str	r2, [sp, #8]
 8004818:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800481a:	9403      	str	r4, [sp, #12]
 800481c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
 8004824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004826:	f002 0201 	and.w	r2, r2, #1
 800482a:	9203      	str	r2, [sp, #12]
 800482c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800482e:	9404      	str	r4, [sp, #16]
 8004830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004832:	f042 0202 	orr.w	r2, r2, #2
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	9304      	str	r3, [sp, #16]
 8004840:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8004842:	4f11      	ldr	r7, [pc, #68]	; (8004888 <MX_GPIO_Init+0xa8>)
 8004844:	4622      	mov	r2, r4
 8004846:	2101      	movs	r1, #1
 8004848:	4638      	mov	r0, r7
 800484a:	f7fe f8f9 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800484e:	4e0f      	ldr	r6, [pc, #60]	; (800488c <MX_GPIO_Init+0xac>)
 8004850:	4622      	mov	r2, r4
 8004852:	2120      	movs	r1, #32
 8004854:	4630      	mov	r0, r6
 8004856:	f7fe f8f3 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800485a:	2501      	movs	r5, #1
 800485c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800485e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004860:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004862:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004864:	a905      	add	r1, sp, #20
 8004866:	4638      	mov	r0, r7
 8004868:	f7fe f818 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800486c:	2320      	movs	r3, #32
 800486e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004870:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004872:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004874:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004876:	a905      	add	r1, sp, #20
 8004878:	4630      	mov	r0, r6
 800487a:	f7fe f80f 	bl	800289c <HAL_GPIO_Init>

}
 800487e:	b00b      	add	sp, #44	; 0x2c
 8004880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	40020800 	.word	0x40020800
 800488c:	40020000 	.word	0x40020000

08004890 <MX_USART2_UART_Init>:
{
 8004890:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004892:	4808      	ldr	r0, [pc, #32]	; (80048b4 <MX_USART2_UART_Init+0x24>)
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <MX_USART2_UART_Init+0x28>)
 8004896:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004898:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800489c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800489e:	2300      	movs	r3, #0
 80048a0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048a2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048a4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048a6:	220c      	movs	r2, #12
 80048a8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048aa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048ac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048ae:	f7ff fef8 	bl	80046a2 <HAL_UART_Init>
}
 80048b2:	bd08      	pop	{r3, pc}
 80048b4:	20000434 	.word	0x20000434
 80048b8:	40004400 	.word	0x40004400

080048bc <MX_I2C2_Init>:
{
 80048bc:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 80048be:	4809      	ldr	r0, [pc, #36]	; (80048e4 <MX_I2C2_Init+0x28>)
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <MX_I2C2_Init+0x2c>)
 80048c2:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <MX_I2C2_Init+0x30>)
 80048c6:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80048c8:	2300      	movs	r3, #0
 80048ca:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80048cc:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048d2:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048d4:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80048d6:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048d8:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048da:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80048dc:	f7fe fac2 	bl	8002e64 <HAL_I2C_Init>
}
 80048e0:	bd08      	pop	{r3, pc}
 80048e2:	bf00      	nop
 80048e4:	200002e4 	.word	0x200002e4
 80048e8:	40005800 	.word	0x40005800
 80048ec:	00061a80 	.word	0x00061a80

080048f0 <MX_TIM3_Init>:
{
 80048f0:	b530      	push	{r4, r5, lr}
 80048f2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048f4:	2400      	movs	r4, #0
 80048f6:	9402      	str	r4, [sp, #8]
 80048f8:	9403      	str	r4, [sp, #12]
 80048fa:	9404      	str	r4, [sp, #16]
 80048fc:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048fe:	9400      	str	r4, [sp, #0]
 8004900:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 8004902:	4d0f      	ldr	r5, [pc, #60]	; (8004940 <MX_TIM3_Init+0x50>)
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <MX_TIM3_Init+0x54>)
 8004906:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 2000;
 8004908:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800490c:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490e:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65535;
 8004910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004914:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004916:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004918:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800491a:	4628      	mov	r0, r5
 800491c:	f7ff fb34 	bl	8003f88 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004924:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004926:	a902      	add	r1, sp, #8
 8004928:	4628      	mov	r0, r5
 800492a:	f7ff fc0b 	bl	8004144 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800492e:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004930:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004932:	4669      	mov	r1, sp
 8004934:	4628      	mov	r0, r5
 8004936:	f7ff fcc3 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
}
 800493a:	b007      	add	sp, #28
 800493c:	bd30      	pop	{r4, r5, pc}
 800493e:	bf00      	nop
 8004940:	200003ec 	.word	0x200003ec
 8004944:	40000400 	.word	0x40000400

08004948 <MX_TIM4_Init>:
{
 8004948:	b530      	push	{r4, r5, lr}
 800494a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800494c:	2400      	movs	r4, #0
 800494e:	940a      	str	r4, [sp, #40]	; 0x28
 8004950:	940b      	str	r4, [sp, #44]	; 0x2c
 8004952:	940c      	str	r4, [sp, #48]	; 0x30
 8004954:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004956:	9408      	str	r4, [sp, #32]
 8004958:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800495a:	9401      	str	r4, [sp, #4]
 800495c:	9402      	str	r4, [sp, #8]
 800495e:	9403      	str	r4, [sp, #12]
 8004960:	9404      	str	r4, [sp, #16]
 8004962:	9405      	str	r4, [sp, #20]
 8004964:	9406      	str	r4, [sp, #24]
 8004966:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 8004968:	4d1e      	ldr	r5, [pc, #120]	; (80049e4 <MX_TIM4_Init+0x9c>)
 800496a:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <MX_TIM4_Init+0xa0>)
 800496c:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 9;
 800496e:	2309      	movs	r3, #9
 8004970:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004972:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 8000;
 8004974:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004978:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800497a:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800497c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800497e:	4628      	mov	r0, r5
 8004980:	f7ff fb02 	bl	8003f88 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004988:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800498a:	a90a      	add	r1, sp, #40	; 0x28
 800498c:	4628      	mov	r0, r5
 800498e:	f7ff fbd9 	bl	8004144 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004992:	4628      	mov	r0, r5
 8004994:	f7ff fb11 	bl	8003fba <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004998:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800499a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800499c:	a908      	add	r1, sp, #32
 800499e:	4628      	mov	r0, r5
 80049a0:	f7ff fc8e 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049a4:	2360      	movs	r3, #96	; 0x60
 80049a6:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80049a8:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049aa:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049ac:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049ae:	4622      	mov	r2, r4
 80049b0:	a901      	add	r1, sp, #4
 80049b2:	4628      	mov	r0, r5
 80049b4:	f7ff fb4c 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80049b8:	2204      	movs	r2, #4
 80049ba:	eb0d 0102 	add.w	r1, sp, r2
 80049be:	4628      	mov	r0, r5
 80049c0:	f7ff fb46 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80049c4:	2208      	movs	r2, #8
 80049c6:	a901      	add	r1, sp, #4
 80049c8:	4628      	mov	r0, r5
 80049ca:	f7ff fb41 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80049ce:	220c      	movs	r2, #12
 80049d0:	a901      	add	r1, sp, #4
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7ff fb3c 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 80049d8:	4628      	mov	r0, r5
 80049da:	f000 fa91 	bl	8004f00 <HAL_TIM_MspPostInit>
}
 80049de:	b00f      	add	sp, #60	; 0x3c
 80049e0:	bd30      	pop	{r4, r5, pc}
 80049e2:	bf00      	nop
 80049e4:	200003ac 	.word	0x200003ac
 80049e8:	40000800 	.word	0x40000800

080049ec <SystemClock_Config>:
{
 80049ec:	b530      	push	{r4, r5, lr}
 80049ee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049f0:	2230      	movs	r2, #48	; 0x30
 80049f2:	2100      	movs	r1, #0
 80049f4:	a808      	add	r0, sp, #32
 80049f6:	f000 fbbb 	bl	8005170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049fa:	2400      	movs	r4, #0
 80049fc:	9403      	str	r4, [sp, #12]
 80049fe:	9404      	str	r4, [sp, #16]
 8004a00:	9405      	str	r4, [sp, #20]
 8004a02:	9406      	str	r4, [sp, #24]
 8004a04:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	9401      	str	r4, [sp, #4]
 8004a08:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <SystemClock_Config+0x88>)
 8004a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a1c:	9402      	str	r4, [sp, #8]
 8004a1e:	4b16      	ldr	r3, [pc, #88]	; (8004a78 <SystemClock_Config+0x8c>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a2e:	9302      	str	r3, [sp, #8]
 8004a30:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a32:	2502      	movs	r5, #2
 8004a34:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a36:	2301      	movs	r3, #1
 8004a38:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a3a:	2310      	movs	r3, #16
 8004a3c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a3e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a40:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004a42:	2308      	movs	r3, #8
 8004a44:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004a46:	2364      	movs	r3, #100	; 0x64
 8004a48:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a4a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a50:	a808      	add	r0, sp, #32
 8004a52:	f7fe fdbb 	bl	80035cc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a56:	230f      	movs	r3, #15
 8004a58:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a5a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a5c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a62:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a64:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004a66:	2103      	movs	r1, #3
 8004a68:	a803      	add	r0, sp, #12
 8004a6a:	f7fe ffe7 	bl	8003a3c <HAL_RCC_ClockConfig>
}
 8004a6e:	b015      	add	sp, #84	; 0x54
 8004a70:	bd30      	pop	{r4, r5, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800
 8004a78:	40007000 	.word	0x40007000

08004a7c <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8004a7c:	4b01      	ldr	r3, [pc, #4]	; (8004a84 <PWM1_Set+0x8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6358      	str	r0, [r3, #52]	; 0x34
}
 8004a82:	4770      	bx	lr
 8004a84:	200003ac 	.word	0x200003ac

08004a88 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8004a88:	4b01      	ldr	r3, [pc, #4]	; (8004a90 <PWM2_Set+0x8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6398      	str	r0, [r3, #56]	; 0x38

}
 8004a8e:	4770      	bx	lr
 8004a90:	200003ac 	.word	0x200003ac

08004a94 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8004a94:	4b01      	ldr	r3, [pc, #4]	; (8004a9c <PWM3_Set+0x8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8004a9a:	4770      	bx	lr
 8004a9c:	200003ac 	.word	0x200003ac

08004aa0 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8004aa0:	4b01      	ldr	r3, [pc, #4]	; (8004aa8 <PWM4_Set+0x8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6418      	str	r0, [r3, #64]	; 0x40
}
 8004aa6:	4770      	bx	lr
 8004aa8:	200003ac 	.word	0x200003ac

08004aac <HAL_TIM_PWM_PulseFinishedCallback>:

//This is called when each PWM pulse finishes, ie the falling edge of each pulse
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {

	if (pulse_count < PULSE_DIV) {
 8004aac:	4b5d      	ldr	r3, [pc, #372]	; (8004c24 <HAL_TIM_PWM_PulseFinishedCallback+0x178>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b06      	cmp	r3, #6
 8004ab2:	dc0b      	bgt.n	8004acc <HAL_TIM_PWM_PulseFinishedCallback+0x20>
		pulse_count++;
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	4a5b      	ldr	r2, [pc, #364]	; (8004c24 <HAL_TIM_PWM_PulseFinishedCallback+0x178>)
 8004ab8:	6013      	str	r3, [r2, #0]
		//After n pulses reset to 0
		pulse_count = 0;
	}

	//Pulse count = 0, first pulse sent, begin calculating RPY
	if (htim->Instance == TIM4 && pulse_count == 0 && main_loop) {
 8004aba:	6802      	ldr	r2, [r0, #0]
 8004abc:	4b5a      	ldr	r3, [pc, #360]	; (8004c28 <HAL_TIM_PWM_PulseFinishedCallback+0x17c>)
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d008      	beq.n	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		getRPY_flag = 1;
	}

	//Last pulse before setting new value, load new value into registers
	if (htim->Instance == TIM4 && pulse_count == PULSE_DIV - 1 && main_loop) {
 8004ac2:	6802      	ldr	r2, [r0, #0]
 8004ac4:	4b58      	ldr	r3, [pc, #352]	; (8004c28 <HAL_TIM_PWM_PulseFinishedCallback+0x17c>)
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d010      	beq.n	8004aec <HAL_TIM_PWM_PulseFinishedCallback+0x40>
 8004aca:	4770      	bx	lr
		pulse_count = 0;
 8004acc:	4b55      	ldr	r3, [pc, #340]	; (8004c24 <HAL_TIM_PWM_PulseFinishedCallback+0x178>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e7f2      	b.n	8004aba <HAL_TIM_PWM_PulseFinishedCallback+0xe>
	if (htim->Instance == TIM4 && pulse_count == 0 && main_loop) {
 8004ad4:	4b53      	ldr	r3, [pc, #332]	; (8004c24 <HAL_TIM_PWM_PulseFinishedCallback+0x178>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f2      	bne.n	8004ac2 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
 8004adc:	4b53      	ldr	r3, [pc, #332]	; (8004c2c <HAL_TIM_PWM_PulseFinishedCallback+0x180>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ee      	beq.n	8004ac2 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		getRPY_flag = 1;
 8004ae4:	4b52      	ldr	r3, [pc, #328]	; (8004c30 <HAL_TIM_PWM_PulseFinishedCallback+0x184>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	e7ea      	b.n	8004ac2 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
	if (htim->Instance == TIM4 && pulse_count == PULSE_DIV - 1 && main_loop) {
 8004aec:	4b4d      	ldr	r3, [pc, #308]	; (8004c24 <HAL_TIM_PWM_PulseFinishedCallback+0x178>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b06      	cmp	r3, #6
 8004af2:	d1ea      	bne.n	8004aca <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 8004af4:	4b4d      	ldr	r3, [pc, #308]	; (8004c2c <HAL_TIM_PWM_PulseFinishedCallback+0x180>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0e6      	beq.n	8004aca <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004afc:	b410      	push	{r4}

		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0); //Does this go high/low?

		esc1_total = ESC_MIN + esc1_throttle + pid_output_pitch;
 8004afe:	4b4d      	ldr	r3, [pc, #308]	; (8004c34 <HAL_TIM_PWM_PulseFinishedCallback+0x188>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004b06:	ee07 3a10 	vmov	s14, r3
 8004b0a:	4b4b      	ldr	r3, [pc, #300]	; (8004c38 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 8004b0c:	edd3 6a00 	vldr	s13, [r3]
 8004b10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b14:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004b18:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8004b1c:	ee17 0a90 	vmov	r0, s15
 8004b20:	4b46      	ldr	r3, [pc, #280]	; (8004c3c <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 8004b22:	edc3 7a00 	vstr	s15, [r3]
		esc2_total = ESC_MIN + esc2_throttle + pid_output_pitch;
 8004b26:	4b46      	ldr	r3, [pc, #280]	; (8004c40 <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004b2e:	ee07 3a10 	vmov	s14, r3
 8004b32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b36:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004b3a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8004b3e:	ee17 1a90 	vmov	r1, s15
 8004b42:	4b40      	ldr	r3, [pc, #256]	; (8004c44 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8004b44:	edc3 7a00 	vstr	s15, [r3]
		esc3_total = ESC_MIN + esc3_throttle - pid_output_pitch;
 8004b48:	4b3f      	ldr	r3, [pc, #252]	; (8004c48 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004b50:	ee07 3a10 	vmov	s14, r3
 8004b54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b58:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004b5c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8004b60:	ee17 2a90 	vmov	r2, s15
 8004b64:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>)
 8004b66:	edc3 7a00 	vstr	s15, [r3]
		esc4_total = ESC_MIN + esc4_throttle - pid_output_pitch;
 8004b6a:	4b39      	ldr	r3, [pc, #228]	; (8004c50 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b82:	ee17 3a90 	vmov	r3, s15
 8004b86:	4c33      	ldr	r4, [pc, #204]	; (8004c54 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8004b88:	edc4 7a00 	vstr	s15, [r4]


		//Clip PWM values to make sure they don't go over range
		if (esc1_total < ESC_MIN) {
 8004b8c:	f240 4423 	movw	r4, #1059	; 0x423
 8004b90:	42a0      	cmp	r0, r4
 8004b92:	dc03      	bgt.n	8004b9c <HAL_TIM_PWM_PulseFinishedCallback+0xf0>
			esc1_total = ESC_MIN;
 8004b94:	4829      	ldr	r0, [pc, #164]	; (8004c3c <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 8004b96:	f240 4424 	movw	r4, #1060	; 0x424
 8004b9a:	6004      	str	r4, [r0, #0]
		}
		if (esc1_total > ESC_MAX) {
 8004b9c:	4827      	ldr	r0, [pc, #156]	; (8004c3c <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 8004b9e:	6804      	ldr	r4, [r0, #0]
 8004ba0:	f640 0052 	movw	r0, #2130	; 0x852
 8004ba4:	4284      	cmp	r4, r0
 8004ba6:	dd03      	ble.n	8004bb0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
			esc1_total = ESC_MAX;
 8004ba8:	4824      	ldr	r0, [pc, #144]	; (8004c3c <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 8004baa:	f640 0452 	movw	r4, #2130	; 0x852
 8004bae:	6004      	str	r4, [r0, #0]
		}
		if (esc2_total < ESC_MIN) {
 8004bb0:	f240 4023 	movw	r0, #1059	; 0x423
 8004bb4:	4281      	cmp	r1, r0
 8004bb6:	dc03      	bgt.n	8004bc0 <HAL_TIM_PWM_PulseFinishedCallback+0x114>
			esc2_total = ESC_MIN;
 8004bb8:	4922      	ldr	r1, [pc, #136]	; (8004c44 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8004bba:	f240 4024 	movw	r0, #1060	; 0x424
 8004bbe:	6008      	str	r0, [r1, #0]
		}
		if (esc2_total > ESC_MAX) {
 8004bc0:	4920      	ldr	r1, [pc, #128]	; (8004c44 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8004bc2:	6808      	ldr	r0, [r1, #0]
 8004bc4:	f640 0152 	movw	r1, #2130	; 0x852
 8004bc8:	4288      	cmp	r0, r1
 8004bca:	dd03      	ble.n	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback+0x128>
			esc2_total = ESC_MAX;
 8004bcc:	491d      	ldr	r1, [pc, #116]	; (8004c44 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8004bce:	f640 0052 	movw	r0, #2130	; 0x852
 8004bd2:	6008      	str	r0, [r1, #0]
		}
		if (esc3_total < ESC_MIN) {
 8004bd4:	f240 4123 	movw	r1, #1059	; 0x423
 8004bd8:	428a      	cmp	r2, r1
 8004bda:	dc03      	bgt.n	8004be4 <HAL_TIM_PWM_PulseFinishedCallback+0x138>
			esc3_total = ESC_MIN;
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	; (8004c4c <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>)
 8004bde:	f240 4124 	movw	r1, #1060	; 0x424
 8004be2:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total > ESC_MAX) {
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>)
 8004be6:	6811      	ldr	r1, [r2, #0]
 8004be8:	f640 0252 	movw	r2, #2130	; 0x852
 8004bec:	4291      	cmp	r1, r2
 8004bee:	dd03      	ble.n	8004bf8 <HAL_TIM_PWM_PulseFinishedCallback+0x14c>
			esc3_total = ESC_MAX;
 8004bf0:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>)
 8004bf2:	f640 0152 	movw	r1, #2130	; 0x852
 8004bf6:	6011      	str	r1, [r2, #0]
		}
		if (esc4_total < ESC_MIN) {
 8004bf8:	f240 4223 	movw	r2, #1059	; 0x423
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	dc03      	bgt.n	8004c08 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>
			esc4_total = ESC_MIN;
 8004c00:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8004c02:	f240 4224 	movw	r2, #1060	; 0x424
 8004c06:	601a      	str	r2, [r3, #0]
		}
		if (esc4_total > ESC_MAX) {
 8004c08:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	f640 0352 	movw	r3, #2130	; 0x852
 8004c10:	429a      	cmp	r2, r3
 8004c12:	dd03      	ble.n	8004c1c <HAL_TIM_PWM_PulseFinishedCallback+0x170>
			esc4_total = ESC_MAX;
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8004c16:	f640 0252 	movw	r2, #2130	; 0x852
 8004c1a:	601a      	str	r2, [r3, #0]
//		PWM1_Set(esc1_total); //PWM1 = Back left, CW
//		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
//		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
//		PWM4_Set(esc4_total); //PWM4 = Front right, CW
	}
}
 8004c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	200002b4 	.word	0x200002b4
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	200002ad 	.word	0x200002ad
 8004c30:	200002ac 	.word	0x200002ac
 8004c34:	20000040 	.word	0x20000040
 8004c38:	200002b0 	.word	0x200002b0
 8004c3c:	2000029c 	.word	0x2000029c
 8004c40:	20000044 	.word	0x20000044
 8004c44:	200002a0 	.word	0x200002a0
 8004c48:	20000048 	.word	0x20000048
 8004c4c:	200002a4 	.word	0x200002a4
 8004c50:	2000004c 	.word	0x2000004c
 8004c54:	200002a8 	.word	0x200002a8

08004c58 <__io_putchar>:
/*
 *	Some functions to allow the program to use printf,
 *	adapted from http://www.emcu.eu/how-to-implement-printf-for-send-message-via-usb-on-stm32-nucleo-boards-using-atollic/
 *
 */
int __io_putchar(int ch) {
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	4604      	mov	r4, r0
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8004c5e:	a902      	add	r1, sp, #8
 8004c60:	f801 0d04 	strb.w	r0, [r1, #-4]!


	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8004c64:	230a      	movs	r3, #10
 8004c66:	2201      	movs	r2, #1
 8004c68:	4802      	ldr	r0, [pc, #8]	; (8004c74 <__io_putchar+0x1c>)
 8004c6a:	f7ff fd49 	bl	8004700 <HAL_UART_Transmit>
	return ch;
}
 8004c6e:	4620      	mov	r0, r4
 8004c70:	b002      	add	sp, #8
 8004c72:	bd10      	pop	{r4, pc}
 8004c74:	20000434 	.word	0x20000434

08004c78 <_write>:

int _write(int file, char *ptr, int len) {
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	4616      	mov	r6, r2
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004c7c:	2400      	movs	r4, #0
 8004c7e:	e005      	b.n	8004c8c <_write+0x14>
		__io_putchar(*ptr++);
 8004c80:	1c4d      	adds	r5, r1, #1
 8004c82:	7808      	ldrb	r0, [r1, #0]
 8004c84:	f7ff ffe8 	bl	8004c58 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004c88:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8004c8a:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004c8c:	42b4      	cmp	r4, r6
 8004c8e:	dbf7      	blt.n	8004c80 <_write+0x8>
	}
	return len;
}
 8004c90:	4630      	mov	r0, r6
 8004c92:	bd70      	pop	{r4, r5, r6, pc}

08004c94 <print_imu>:
	//printf(" temperature = %f  C\n\r", temperature);

}


void print_imu(){
 8004c94:	b508      	push	{r3, lr}

	if(main_loop){
 8004c96:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <print_imu+0x20>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	b903      	cbnz	r3, 8004c9e <print_imu+0xa>
		printf("%f\r\n", imu_pitch);
	}

}
 8004c9c:	bd08      	pop	{r3, pc}
		printf("%f\r\n", imu_pitch);
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <print_imu+0x24>)
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	f7fb fc59 	bl	8000558 <__aeabi_f2d>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4804      	ldr	r0, [pc, #16]	; (8004cbc <print_imu+0x28>)
 8004cac:	f000 fec4 	bl	8005a38 <iprintf>
}
 8004cb0:	e7f4      	b.n	8004c9c <print_imu+0x8>
 8004cb2:	bf00      	nop
 8004cb4:	200002ad 	.word	0x200002ad
 8004cb8:	20000430 	.word	0x20000430
 8004cbc:	08009680 	.word	0x08009680

08004cc0 <main>:
{
 8004cc0:	b510      	push	{r4, lr}
 8004cc2:	b084      	sub	sp, #16
  HAL_Init();
 8004cc4:	f7fd fd40 	bl	8002748 <HAL_Init>
  SystemClock_Config();
 8004cc8:	f7ff fe90 	bl	80049ec <SystemClock_Config>
  MX_GPIO_Init();
 8004ccc:	f7ff fd88 	bl	80047e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004cd0:	f7ff fdde 	bl	8004890 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8004cd4:	f7ff fdf2 	bl	80048bc <MX_I2C2_Init>
  MX_TIM3_Init();
 8004cd8:	f7ff fe0a 	bl	80048f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004cdc:	f7ff fe34 	bl	8004948 <MX_TIM4_Init>
	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 8004ce0:	482b      	ldr	r0, [pc, #172]	; (8004d90 <main+0xd0>)
 8004ce2:	f7fc f977 	bl	8000fd4 <imu_init>
 8004ce6:	b908      	cbnz	r0, 8004cec <main+0x2c>
		imu_calibrate();
 8004ce8:	f7fc ff2a 	bl	8001b40 <imu_calibrate>
	HAL_TIM_Base_Start_IT(&htim3);
 8004cec:	4829      	ldr	r0, [pc, #164]	; (8004d94 <main+0xd4>)
 8004cee:	f7ff f82a 	bl	8003d46 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8004cf2:	4c29      	ldr	r4, [pc, #164]	; (8004d98 <main+0xd8>)
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f7ff faa2 	bl	8004240 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8004cfc:	2104      	movs	r1, #4
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f7ff fa9e 	bl	8004240 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
 8004d04:	2108      	movs	r1, #8
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7ff fa9a 	bl	8004240 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
 8004d0c:	210c      	movs	r1, #12
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f7ff fa96 	bl	8004240 <HAL_TIM_PWM_Start_IT>
	PWM1_Set(ESC_MIN+100); //Send lowest value (125us pulse)
 8004d14:	f44f 6091 	mov.w	r0, #1160	; 0x488
 8004d18:	f7ff feb0 	bl	8004a7c <PWM1_Set>
	PWM2_Set(ESC_MIN+100); //Send lowest value (125us pulse)
 8004d1c:	f44f 6091 	mov.w	r0, #1160	; 0x488
 8004d20:	f7ff feb2 	bl	8004a88 <PWM2_Set>
	PWM3_Set(ESC_MIN+100); //Send lowest value (125us pulse)
 8004d24:	f44f 6091 	mov.w	r0, #1160	; 0x488
 8004d28:	f7ff feb4 	bl	8004a94 <PWM3_Set>
	PWM4_Set(ESC_MIN+100); //Send lowest value (125us pulse)
 8004d2c:	f44f 6091 	mov.w	r0, #1160	; 0x488
 8004d30:	f7ff feb6 	bl	8004aa0 <PWM4_Set>
		main_loop = 1;
 8004d34:	4b19      	ldr	r3, [pc, #100]	; (8004d9c <main+0xdc>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
		if (getRPY_flag) {
 8004d3a:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <main+0xe0>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f8      	beq.n	8004d34 <main+0x74>
			timer1 = htim3.Instance->CNT;
 8004d42:	4c14      	ldr	r4, [pc, #80]	; (8004d94 <main+0xd4>)
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d48:	9203      	str	r2, [sp, #12]
			count = htim3.Instance->CNT; //read TIM3 counter value
 8004d4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
			calc_RollPitchYaw(count);
 8004d4c:	f7fd f9bc 	bl	80020c8 <calc_RollPitchYaw>
			imu_roll = get_roll();
 8004d50:	f7fc f902 	bl	8000f58 <get_roll>
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <main+0xe4>)
 8004d56:	ed83 0a00 	vstr	s0, [r3]
			imu_pitch = get_pitch();
 8004d5a:	f7fc f903 	bl	8000f64 <get_pitch>
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <main+0xe8>)
 8004d60:	ed83 0a00 	vstr	s0, [r3]
			count = htim3.Instance->CNT;
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			count = htim3.Instance->CNT;
 8004d68:	6a58      	ldr	r0, [r3, #36]	; 0x24
			pid_output_pitch =  pid_calculate_pitch(imu_pitch, count);
 8004d6a:	f7fd fc1d 	bl	80025a8 <pid_calculate_pitch>
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <main+0xec>)
 8004d70:	ed83 0a00 	vstr	s0, [r3]
			print_imu();
 8004d74:	f7ff ff8e 	bl	8004c94 <print_imu>
			timer2 = htim3.Instance->CNT;
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	9302      	str	r3, [sp, #8]
			difference = timer2 - timer1;
 8004d7e:	9b02      	ldr	r3, [sp, #8]
 8004d80:	9a03      	ldr	r2, [sp, #12]
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	9301      	str	r3, [sp, #4]
			getRPY_flag = 0;
 8004d86:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <main+0xe0>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	e7d2      	b.n	8004d34 <main+0x74>
 8004d8e:	bf00      	nop
 8004d90:	200002e4 	.word	0x200002e4
 8004d94:	200003ec 	.word	0x200003ec
 8004d98:	200003ac 	.word	0x200003ac
 8004d9c:	200002ad 	.word	0x200002ad
 8004da0:	200002ac 	.word	0x200002ac
 8004da4:	2000042c 	.word	0x2000042c
 8004da8:	20000430 	.word	0x20000430
 8004dac:	200002b0 	.word	0x200002b0

08004db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004db0:	b500      	push	{lr}
 8004db2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db4:	2100      	movs	r1, #0
 8004db6:	9100      	str	r1, [sp, #0]
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <HAL_MspInit+0x3c>)
 8004dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
 8004dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004dc8:	9200      	str	r2, [sp, #0]
 8004dca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dcc:	9101      	str	r1, [sp, #4]
 8004dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004de0:	2007      	movs	r0, #7
 8004de2:	f7fd fcf1 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004de6:	b003      	add	sp, #12
 8004de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dec:	40023800 	.word	0x40023800

08004df0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004df4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df6:	2300      	movs	r3, #0
 8004df8:	9303      	str	r3, [sp, #12]
 8004dfa:	9304      	str	r3, [sp, #16]
 8004dfc:	9305      	str	r3, [sp, #20]
 8004dfe:	9306      	str	r3, [sp, #24]
 8004e00:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8004e02:	6802      	ldr	r2, [r0, #0]
 8004e04:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <HAL_I2C_MspInit+0x90>)
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d002      	beq.n	8004e10 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004e0a:	b009      	add	sp, #36	; 0x24
 8004e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e10:	2500      	movs	r5, #0
 8004e12:	9501      	str	r5, [sp, #4]
 8004e14:	4c1b      	ldr	r4, [pc, #108]	; (8004e84 <HAL_I2C_MspInit+0x94>)
 8004e16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e18:	f043 0302 	orr.w	r3, r3, #2
 8004e1c:	6323      	str	r3, [r4, #48]	; 0x30
 8004e1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e2e:	f04f 0912 	mov.w	r9, #18
 8004e32:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e36:	f04f 0801 	mov.w	r8, #1
 8004e3a:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e3e:	2703      	movs	r7, #3
 8004e40:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004e42:	2304      	movs	r3, #4
 8004e44:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e46:	4e10      	ldr	r6, [pc, #64]	; (8004e88 <HAL_I2C_MspInit+0x98>)
 8004e48:	a903      	add	r1, sp, #12
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f7fd fd26 	bl	800289c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e50:	2308      	movs	r3, #8
 8004e52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e54:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e58:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e5c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004e5e:	2309      	movs	r3, #9
 8004e60:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e62:	a903      	add	r1, sp, #12
 8004e64:	4630      	mov	r0, r6
 8004e66:	f7fd fd19 	bl	800289c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004e6a:	9502      	str	r5, [sp, #8]
 8004e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e72:	6423      	str	r3, [r4, #64]	; 0x40
 8004e74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7a:	9302      	str	r3, [sp, #8]
 8004e7c:	9b02      	ldr	r3, [sp, #8]
}
 8004e7e:	e7c4      	b.n	8004e0a <HAL_I2C_MspInit+0x1a>
 8004e80:	40005800 	.word	0x40005800
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40020400 	.word	0x40020400

08004e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e8c:	b500      	push	{lr}
 8004e8e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8004e90:	6803      	ldr	r3, [r0, #0]
 8004e92:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_TIM_Base_MspInit+0x68>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d005      	beq.n	8004ea4 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8004e98:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <HAL_TIM_Base_MspInit+0x6c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d016      	beq.n	8004ecc <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004e9e:	b003      	add	sp, #12
 8004ea0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	9100      	str	r1, [sp, #0]
 8004ea8:	4b14      	ldr	r3, [pc, #80]	; (8004efc <HAL_TIM_Base_MspInit+0x70>)
 8004eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eac:	f042 0202 	orr.w	r2, r2, #2
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004ebc:	460a      	mov	r2, r1
 8004ebe:	201d      	movs	r0, #29
 8004ec0:	f7fd fc94 	bl	80027ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004ec4:	201d      	movs	r0, #29
 8004ec6:	f7fd fcc5 	bl	8002854 <HAL_NVIC_EnableIRQ>
 8004eca:	e7e8      	b.n	8004e9e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ecc:	2100      	movs	r1, #0
 8004ece:	9101      	str	r1, [sp, #4]
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <HAL_TIM_Base_MspInit+0x70>)
 8004ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed4:	f042 0204 	orr.w	r2, r2, #4
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004ee4:	460a      	mov	r2, r1
 8004ee6:	201e      	movs	r0, #30
 8004ee8:	f7fd fc80 	bl	80027ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004eec:	201e      	movs	r0, #30
 8004eee:	f7fd fcb1 	bl	8002854 <HAL_NVIC_EnableIRQ>
}
 8004ef2:	e7d4      	b.n	8004e9e <HAL_TIM_Base_MspInit+0x12>
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40023800 	.word	0x40023800

08004f00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f00:	b500      	push	{lr}
 8004f02:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	2300      	movs	r3, #0
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	9302      	str	r3, [sp, #8]
 8004f0a:	9303      	str	r3, [sp, #12]
 8004f0c:	9304      	str	r3, [sp, #16]
 8004f0e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8004f10:	6802      	ldr	r2, [r0, #0]
 8004f12:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_TIM_MspPostInit+0x50>)
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d002      	beq.n	8004f1e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004f18:	b007      	add	sp, #28
 8004f1a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <HAL_TIM_MspPostInit+0x54>)
 8004f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f26:	f042 0202 	orr.w	r2, r2, #2
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004f36:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004f3a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f40:	2203      	movs	r2, #3
 8004f42:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004f44:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f46:	a901      	add	r1, sp, #4
 8004f48:	4803      	ldr	r0, [pc, #12]	; (8004f58 <HAL_TIM_MspPostInit+0x58>)
 8004f4a:	f7fd fca7 	bl	800289c <HAL_GPIO_Init>
}
 8004f4e:	e7e3      	b.n	8004f18 <HAL_TIM_MspPostInit+0x18>
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40020400 	.word	0x40020400

08004f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f5c:	b500      	push	{lr}
 8004f5e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f60:	2300      	movs	r3, #0
 8004f62:	9303      	str	r3, [sp, #12]
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	9305      	str	r3, [sp, #20]
 8004f68:	9306      	str	r3, [sp, #24]
 8004f6a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8004f6c:	6802      	ldr	r2, [r0, #0]
 8004f6e:	4b16      	ldr	r3, [pc, #88]	; (8004fc8 <HAL_UART_MspInit+0x6c>)
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d002      	beq.n	8004f7a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004f74:	b009      	add	sp, #36	; 0x24
 8004f76:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	9101      	str	r1, [sp, #4]
 8004f7e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8004f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f84:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
 8004f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004f90:	9201      	str	r2, [sp, #4]
 8004f92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f94:	9102      	str	r1, [sp, #8]
 8004f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	9302      	str	r3, [sp, #8]
 8004fa6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004fa8:	230c      	movs	r3, #12
 8004faa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fac:	2302      	movs	r3, #2
 8004fae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fb8:	2307      	movs	r3, #7
 8004fba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fbc:	a903      	add	r1, sp, #12
 8004fbe:	4803      	ldr	r0, [pc, #12]	; (8004fcc <HAL_UART_MspInit+0x70>)
 8004fc0:	f7fd fc6c 	bl	800289c <HAL_GPIO_Init>
}
 8004fc4:	e7d6      	b.n	8004f74 <HAL_UART_MspInit+0x18>
 8004fc6:	bf00      	nop
 8004fc8:	40004400 	.word	0x40004400
 8004fcc:	40020000 	.word	0x40020000

08004fd0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004fd0:	4770      	bx	lr

08004fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fd2:	e7fe      	b.n	8004fd2 <HardFault_Handler>

08004fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fd4:	e7fe      	b.n	8004fd4 <MemManage_Handler>

08004fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fd6:	e7fe      	b.n	8004fd6 <BusFault_Handler>

08004fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fd8:	e7fe      	b.n	8004fd8 <UsageFault_Handler>

08004fda <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fda:	4770      	bx	lr

08004fdc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fdc:	4770      	bx	lr

08004fde <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fde:	4770      	bx	lr

08004fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fe2:	f7fd fbcb 	bl	800277c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fe6:	bd08      	pop	{r3, pc}

08004fe8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004fe8:	b508      	push	{r3, lr}
	//flash led??
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so


	//printftest();
	timer_reset();
 8004fea:	f7fb ffc1 	bl	8000f70 <timer_reset>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004fee:	4802      	ldr	r0, [pc, #8]	; (8004ff8 <TIM3_IRQHandler+0x10>)
 8004ff0:	f7fe febf 	bl	8003d72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004ff4:	bd08      	pop	{r3, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200003ec 	.word	0x200003ec

08004ffc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004ffc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
	 //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004ffe:	4802      	ldr	r0, [pc, #8]	; (8005008 <TIM4_IRQHandler+0xc>)
 8005000:	f7fe feb7 	bl	8003d72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005004:	bd08      	pop	{r3, pc}
 8005006:	bf00      	nop
 8005008:	200003ac 	.word	0x200003ac

0800500c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	460d      	mov	r5, r1
 8005010:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005012:	2400      	movs	r4, #0
 8005014:	e004      	b.n	8005020 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8005016:	f3af 8000 	nop.w
 800501a:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800501c:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 800501e:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005020:	42b4      	cmp	r4, r6
 8005022:	dbf8      	blt.n	8005016 <_read+0xa>
	}

return len;
}
 8005024:	4630      	mov	r0, r6
 8005026:	bd70      	pop	{r4, r5, r6, pc}

08005028 <_close>:
}

int _close(int file)
{
	return -1;
}
 8005028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800502c:	4770      	bx	lr

0800502e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800502e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005032:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005034:	2000      	movs	r0, #0
 8005036:	4770      	bx	lr

08005038 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005038:	2001      	movs	r0, #1
 800503a:	4770      	bx	lr

0800503c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800503c:	2000      	movs	r0, #0
 800503e:	4770      	bx	lr

08005040 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005040:	b508      	push	{r3, lr}
 8005042:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005044:	4a0b      	ldr	r2, [pc, #44]	; (8005074 <_sbrk+0x34>)
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	b142      	cbz	r2, 800505c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800504a:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <_sbrk+0x34>)
 800504c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800504e:	4403      	add	r3, r0
 8005050:	466a      	mov	r2, sp
 8005052:	4293      	cmp	r3, r2
 8005054:	d806      	bhi.n	8005064 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8005056:	4a07      	ldr	r2, [pc, #28]	; (8005074 <_sbrk+0x34>)
 8005058:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800505a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800505c:	4a05      	ldr	r2, [pc, #20]	; (8005074 <_sbrk+0x34>)
 800505e:	4906      	ldr	r1, [pc, #24]	; (8005078 <_sbrk+0x38>)
 8005060:	6011      	str	r1, [r2, #0]
 8005062:	e7f2      	b.n	800504a <_sbrk+0xa>
		errno = ENOMEM;
 8005064:	f000 f85a 	bl	800511c <__errno>
 8005068:	230c      	movs	r3, #12
 800506a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800506c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005070:	e7f3      	b.n	800505a <_sbrk+0x1a>
 8005072:	bf00      	nop
 8005074:	200002b8 	.word	0x200002b8
 8005078:	20000478 	.word	0x20000478

0800507c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800507c:	490f      	ldr	r1, [pc, #60]	; (80050bc <SystemInit+0x40>)
 800507e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005082:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800508a:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <SystemInit+0x44>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005094:	2000      	movs	r0, #0
 8005096:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800509e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80050a4:	4a07      	ldr	r2, [pc, #28]	; (80050c4 <SystemInit+0x48>)
 80050a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80050b0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050b6:	608b      	str	r3, [r1, #8]
#endif
}
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	e000ed00 	.word	0xe000ed00
 80050c0:	40023800 	.word	0x40023800
 80050c4:	24003010 	.word	0x24003010

080050c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80050c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005100 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80050cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80050ce:	e003      	b.n	80050d8 <LoopCopyDataInit>

080050d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80050d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050d6:	3104      	adds	r1, #4

080050d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050d8:	480b      	ldr	r0, [pc, #44]	; (8005108 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80050da:	4b0c      	ldr	r3, [pc, #48]	; (800510c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80050dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050e0:	d3f6      	bcc.n	80050d0 <CopyDataInit>
  ldr  r2, =_sbss
 80050e2:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80050e4:	e002      	b.n	80050ec <LoopFillZerobss>

080050e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80050e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80050e8:	f842 3b04 	str.w	r3, [r2], #4

080050ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80050ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80050f0:	d3f9      	bcc.n	80050e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050f2:	f7ff ffc3 	bl	800507c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050f6:	f000 f817 	bl	8005128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050fa:	f7ff fde1 	bl	8004cc0 <main>
  bx  lr    
 80050fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005100:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005104:	08009a00 	.word	0x08009a00
  ldr  r0, =_sdata
 8005108:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800510c:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 8005110:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8005114:	20000478 	.word	0x20000478

08005118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005118:	e7fe      	b.n	8005118 <ADC_IRQHandler>
	...

0800511c <__errno>:
 800511c:	4b01      	ldr	r3, [pc, #4]	; (8005124 <__errno+0x8>)
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000054 	.word	0x20000054

08005128 <__libc_init_array>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	4e0d      	ldr	r6, [pc, #52]	; (8005160 <__libc_init_array+0x38>)
 800512c:	4c0d      	ldr	r4, [pc, #52]	; (8005164 <__libc_init_array+0x3c>)
 800512e:	1ba4      	subs	r4, r4, r6
 8005130:	10a4      	asrs	r4, r4, #2
 8005132:	2500      	movs	r5, #0
 8005134:	42a5      	cmp	r5, r4
 8005136:	d109      	bne.n	800514c <__libc_init_array+0x24>
 8005138:	4e0b      	ldr	r6, [pc, #44]	; (8005168 <__libc_init_array+0x40>)
 800513a:	4c0c      	ldr	r4, [pc, #48]	; (800516c <__libc_init_array+0x44>)
 800513c:	f004 f946 	bl	80093cc <_init>
 8005140:	1ba4      	subs	r4, r4, r6
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	2500      	movs	r5, #0
 8005146:	42a5      	cmp	r5, r4
 8005148:	d105      	bne.n	8005156 <__libc_init_array+0x2e>
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005150:	4798      	blx	r3
 8005152:	3501      	adds	r5, #1
 8005154:	e7ee      	b.n	8005134 <__libc_init_array+0xc>
 8005156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800515a:	4798      	blx	r3
 800515c:	3501      	adds	r5, #1
 800515e:	e7f2      	b.n	8005146 <__libc_init_array+0x1e>
 8005160:	080099f8 	.word	0x080099f8
 8005164:	080099f8 	.word	0x080099f8
 8005168:	080099f8 	.word	0x080099f8
 800516c:	080099fc 	.word	0x080099fc

08005170 <memset>:
 8005170:	4402      	add	r2, r0
 8005172:	4603      	mov	r3, r0
 8005174:	4293      	cmp	r3, r2
 8005176:	d100      	bne.n	800517a <memset+0xa>
 8005178:	4770      	bx	lr
 800517a:	f803 1b01 	strb.w	r1, [r3], #1
 800517e:	e7f9      	b.n	8005174 <memset+0x4>

08005180 <__cvt>:
 8005180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005184:	ec55 4b10 	vmov	r4, r5, d0
 8005188:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800518a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800518e:	2d00      	cmp	r5, #0
 8005190:	460e      	mov	r6, r1
 8005192:	4691      	mov	r9, r2
 8005194:	4619      	mov	r1, r3
 8005196:	bfb8      	it	lt
 8005198:	4622      	movlt	r2, r4
 800519a:	462b      	mov	r3, r5
 800519c:	f027 0720 	bic.w	r7, r7, #32
 80051a0:	bfbb      	ittet	lt
 80051a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051a6:	461d      	movlt	r5, r3
 80051a8:	2300      	movge	r3, #0
 80051aa:	232d      	movlt	r3, #45	; 0x2d
 80051ac:	bfb8      	it	lt
 80051ae:	4614      	movlt	r4, r2
 80051b0:	2f46      	cmp	r7, #70	; 0x46
 80051b2:	700b      	strb	r3, [r1, #0]
 80051b4:	d004      	beq.n	80051c0 <__cvt+0x40>
 80051b6:	2f45      	cmp	r7, #69	; 0x45
 80051b8:	d100      	bne.n	80051bc <__cvt+0x3c>
 80051ba:	3601      	adds	r6, #1
 80051bc:	2102      	movs	r1, #2
 80051be:	e000      	b.n	80051c2 <__cvt+0x42>
 80051c0:	2103      	movs	r1, #3
 80051c2:	ab03      	add	r3, sp, #12
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	ab02      	add	r3, sp, #8
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	4632      	mov	r2, r6
 80051cc:	4653      	mov	r3, sl
 80051ce:	ec45 4b10 	vmov	d0, r4, r5
 80051d2:	f000 fdf9 	bl	8005dc8 <_dtoa_r>
 80051d6:	2f47      	cmp	r7, #71	; 0x47
 80051d8:	4680      	mov	r8, r0
 80051da:	d102      	bne.n	80051e2 <__cvt+0x62>
 80051dc:	f019 0f01 	tst.w	r9, #1
 80051e0:	d026      	beq.n	8005230 <__cvt+0xb0>
 80051e2:	2f46      	cmp	r7, #70	; 0x46
 80051e4:	eb08 0906 	add.w	r9, r8, r6
 80051e8:	d111      	bne.n	800520e <__cvt+0x8e>
 80051ea:	f898 3000 	ldrb.w	r3, [r8]
 80051ee:	2b30      	cmp	r3, #48	; 0x30
 80051f0:	d10a      	bne.n	8005208 <__cvt+0x88>
 80051f2:	2200      	movs	r2, #0
 80051f4:	2300      	movs	r3, #0
 80051f6:	4620      	mov	r0, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	f7fb fc6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80051fe:	b918      	cbnz	r0, 8005208 <__cvt+0x88>
 8005200:	f1c6 0601 	rsb	r6, r6, #1
 8005204:	f8ca 6000 	str.w	r6, [sl]
 8005208:	f8da 3000 	ldr.w	r3, [sl]
 800520c:	4499      	add	r9, r3
 800520e:	2200      	movs	r2, #0
 8005210:	2300      	movs	r3, #0
 8005212:	4620      	mov	r0, r4
 8005214:	4629      	mov	r1, r5
 8005216:	f7fb fc5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800521a:	b938      	cbnz	r0, 800522c <__cvt+0xac>
 800521c:	2230      	movs	r2, #48	; 0x30
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	454b      	cmp	r3, r9
 8005222:	d205      	bcs.n	8005230 <__cvt+0xb0>
 8005224:	1c59      	adds	r1, r3, #1
 8005226:	9103      	str	r1, [sp, #12]
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e7f8      	b.n	800521e <__cvt+0x9e>
 800522c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005230:	9b03      	ldr	r3, [sp, #12]
 8005232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005234:	eba3 0308 	sub.w	r3, r3, r8
 8005238:	4640      	mov	r0, r8
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	b004      	add	sp, #16
 800523e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005242 <__exponent>:
 8005242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005244:	2900      	cmp	r1, #0
 8005246:	4604      	mov	r4, r0
 8005248:	bfba      	itte	lt
 800524a:	4249      	neglt	r1, r1
 800524c:	232d      	movlt	r3, #45	; 0x2d
 800524e:	232b      	movge	r3, #43	; 0x2b
 8005250:	2909      	cmp	r1, #9
 8005252:	f804 2b02 	strb.w	r2, [r4], #2
 8005256:	7043      	strb	r3, [r0, #1]
 8005258:	dd20      	ble.n	800529c <__exponent+0x5a>
 800525a:	f10d 0307 	add.w	r3, sp, #7
 800525e:	461f      	mov	r7, r3
 8005260:	260a      	movs	r6, #10
 8005262:	fb91 f5f6 	sdiv	r5, r1, r6
 8005266:	fb06 1115 	mls	r1, r6, r5, r1
 800526a:	3130      	adds	r1, #48	; 0x30
 800526c:	2d09      	cmp	r5, #9
 800526e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005272:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005276:	4629      	mov	r1, r5
 8005278:	dc09      	bgt.n	800528e <__exponent+0x4c>
 800527a:	3130      	adds	r1, #48	; 0x30
 800527c:	3b02      	subs	r3, #2
 800527e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005282:	42bb      	cmp	r3, r7
 8005284:	4622      	mov	r2, r4
 8005286:	d304      	bcc.n	8005292 <__exponent+0x50>
 8005288:	1a10      	subs	r0, r2, r0
 800528a:	b003      	add	sp, #12
 800528c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800528e:	4613      	mov	r3, r2
 8005290:	e7e7      	b.n	8005262 <__exponent+0x20>
 8005292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005296:	f804 2b01 	strb.w	r2, [r4], #1
 800529a:	e7f2      	b.n	8005282 <__exponent+0x40>
 800529c:	2330      	movs	r3, #48	; 0x30
 800529e:	4419      	add	r1, r3
 80052a0:	7083      	strb	r3, [r0, #2]
 80052a2:	1d02      	adds	r2, r0, #4
 80052a4:	70c1      	strb	r1, [r0, #3]
 80052a6:	e7ef      	b.n	8005288 <__exponent+0x46>

080052a8 <_printf_float>:
 80052a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ac:	b08d      	sub	sp, #52	; 0x34
 80052ae:	460c      	mov	r4, r1
 80052b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80052b4:	4616      	mov	r6, r2
 80052b6:	461f      	mov	r7, r3
 80052b8:	4605      	mov	r5, r0
 80052ba:	f001 fcb7 	bl	8006c2c <_localeconv_r>
 80052be:	6803      	ldr	r3, [r0, #0]
 80052c0:	9304      	str	r3, [sp, #16]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fa ff8c 	bl	80001e0 <strlen>
 80052c8:	2300      	movs	r3, #0
 80052ca:	930a      	str	r3, [sp, #40]	; 0x28
 80052cc:	f8d8 3000 	ldr.w	r3, [r8]
 80052d0:	9005      	str	r0, [sp, #20]
 80052d2:	3307      	adds	r3, #7
 80052d4:	f023 0307 	bic.w	r3, r3, #7
 80052d8:	f103 0208 	add.w	r2, r3, #8
 80052dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80052e0:	f8d4 b000 	ldr.w	fp, [r4]
 80052e4:	f8c8 2000 	str.w	r2, [r8]
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80052f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052f8:	9307      	str	r3, [sp, #28]
 80052fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80052fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005302:	4ba7      	ldr	r3, [pc, #668]	; (80055a0 <_printf_float+0x2f8>)
 8005304:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005308:	f7fb fc18 	bl	8000b3c <__aeabi_dcmpun>
 800530c:	bb70      	cbnz	r0, 800536c <_printf_float+0xc4>
 800530e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005312:	4ba3      	ldr	r3, [pc, #652]	; (80055a0 <_printf_float+0x2f8>)
 8005314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005318:	f7fb fbf2 	bl	8000b00 <__aeabi_dcmple>
 800531c:	bb30      	cbnz	r0, 800536c <_printf_float+0xc4>
 800531e:	2200      	movs	r2, #0
 8005320:	2300      	movs	r3, #0
 8005322:	4640      	mov	r0, r8
 8005324:	4649      	mov	r1, r9
 8005326:	f7fb fbe1 	bl	8000aec <__aeabi_dcmplt>
 800532a:	b110      	cbz	r0, 8005332 <_printf_float+0x8a>
 800532c:	232d      	movs	r3, #45	; 0x2d
 800532e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005332:	4a9c      	ldr	r2, [pc, #624]	; (80055a4 <_printf_float+0x2fc>)
 8005334:	4b9c      	ldr	r3, [pc, #624]	; (80055a8 <_printf_float+0x300>)
 8005336:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800533a:	bf8c      	ite	hi
 800533c:	4690      	movhi	r8, r2
 800533e:	4698      	movls	r8, r3
 8005340:	2303      	movs	r3, #3
 8005342:	f02b 0204 	bic.w	r2, fp, #4
 8005346:	6123      	str	r3, [r4, #16]
 8005348:	6022      	str	r2, [r4, #0]
 800534a:	f04f 0900 	mov.w	r9, #0
 800534e:	9700      	str	r7, [sp, #0]
 8005350:	4633      	mov	r3, r6
 8005352:	aa0b      	add	r2, sp, #44	; 0x2c
 8005354:	4621      	mov	r1, r4
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f9e6 	bl	8005728 <_printf_common>
 800535c:	3001      	adds	r0, #1
 800535e:	f040 808d 	bne.w	800547c <_printf_float+0x1d4>
 8005362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005366:	b00d      	add	sp, #52	; 0x34
 8005368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	4640      	mov	r0, r8
 8005372:	4649      	mov	r1, r9
 8005374:	f7fb fbe2 	bl	8000b3c <__aeabi_dcmpun>
 8005378:	b110      	cbz	r0, 8005380 <_printf_float+0xd8>
 800537a:	4a8c      	ldr	r2, [pc, #560]	; (80055ac <_printf_float+0x304>)
 800537c:	4b8c      	ldr	r3, [pc, #560]	; (80055b0 <_printf_float+0x308>)
 800537e:	e7da      	b.n	8005336 <_printf_float+0x8e>
 8005380:	6861      	ldr	r1, [r4, #4]
 8005382:	1c4b      	adds	r3, r1, #1
 8005384:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005388:	a80a      	add	r0, sp, #40	; 0x28
 800538a:	d13e      	bne.n	800540a <_printf_float+0x162>
 800538c:	2306      	movs	r3, #6
 800538e:	6063      	str	r3, [r4, #4]
 8005390:	2300      	movs	r3, #0
 8005392:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005396:	ab09      	add	r3, sp, #36	; 0x24
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	ec49 8b10 	vmov	d0, r8, r9
 800539e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053a2:	6022      	str	r2, [r4, #0]
 80053a4:	f8cd a004 	str.w	sl, [sp, #4]
 80053a8:	6861      	ldr	r1, [r4, #4]
 80053aa:	4628      	mov	r0, r5
 80053ac:	f7ff fee8 	bl	8005180 <__cvt>
 80053b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80053b4:	2b47      	cmp	r3, #71	; 0x47
 80053b6:	4680      	mov	r8, r0
 80053b8:	d109      	bne.n	80053ce <_printf_float+0x126>
 80053ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053bc:	1cd8      	adds	r0, r3, #3
 80053be:	db02      	blt.n	80053c6 <_printf_float+0x11e>
 80053c0:	6862      	ldr	r2, [r4, #4]
 80053c2:	4293      	cmp	r3, r2
 80053c4:	dd47      	ble.n	8005456 <_printf_float+0x1ae>
 80053c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80053ca:	fa5f fa8a 	uxtb.w	sl, sl
 80053ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80053d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053d4:	d824      	bhi.n	8005420 <_printf_float+0x178>
 80053d6:	3901      	subs	r1, #1
 80053d8:	4652      	mov	r2, sl
 80053da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053de:	9109      	str	r1, [sp, #36]	; 0x24
 80053e0:	f7ff ff2f 	bl	8005242 <__exponent>
 80053e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053e6:	1813      	adds	r3, r2, r0
 80053e8:	2a01      	cmp	r2, #1
 80053ea:	4681      	mov	r9, r0
 80053ec:	6123      	str	r3, [r4, #16]
 80053ee:	dc02      	bgt.n	80053f6 <_printf_float+0x14e>
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	07d1      	lsls	r1, r2, #31
 80053f4:	d501      	bpl.n	80053fa <_printf_float+0x152>
 80053f6:	3301      	adds	r3, #1
 80053f8:	6123      	str	r3, [r4, #16]
 80053fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0a5      	beq.n	800534e <_printf_float+0xa6>
 8005402:	232d      	movs	r3, #45	; 0x2d
 8005404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005408:	e7a1      	b.n	800534e <_printf_float+0xa6>
 800540a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800540e:	f000 8177 	beq.w	8005700 <_printf_float+0x458>
 8005412:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005416:	d1bb      	bne.n	8005390 <_printf_float+0xe8>
 8005418:	2900      	cmp	r1, #0
 800541a:	d1b9      	bne.n	8005390 <_printf_float+0xe8>
 800541c:	2301      	movs	r3, #1
 800541e:	e7b6      	b.n	800538e <_printf_float+0xe6>
 8005420:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005424:	d119      	bne.n	800545a <_printf_float+0x1b2>
 8005426:	2900      	cmp	r1, #0
 8005428:	6863      	ldr	r3, [r4, #4]
 800542a:	dd0c      	ble.n	8005446 <_printf_float+0x19e>
 800542c:	6121      	str	r1, [r4, #16]
 800542e:	b913      	cbnz	r3, 8005436 <_printf_float+0x18e>
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	07d2      	lsls	r2, r2, #31
 8005434:	d502      	bpl.n	800543c <_printf_float+0x194>
 8005436:	3301      	adds	r3, #1
 8005438:	440b      	add	r3, r1
 800543a:	6123      	str	r3, [r4, #16]
 800543c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800543e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005440:	f04f 0900 	mov.w	r9, #0
 8005444:	e7d9      	b.n	80053fa <_printf_float+0x152>
 8005446:	b913      	cbnz	r3, 800544e <_printf_float+0x1a6>
 8005448:	6822      	ldr	r2, [r4, #0]
 800544a:	07d0      	lsls	r0, r2, #31
 800544c:	d501      	bpl.n	8005452 <_printf_float+0x1aa>
 800544e:	3302      	adds	r3, #2
 8005450:	e7f3      	b.n	800543a <_printf_float+0x192>
 8005452:	2301      	movs	r3, #1
 8005454:	e7f1      	b.n	800543a <_printf_float+0x192>
 8005456:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800545a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800545e:	4293      	cmp	r3, r2
 8005460:	db05      	blt.n	800546e <_printf_float+0x1c6>
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	6123      	str	r3, [r4, #16]
 8005466:	07d1      	lsls	r1, r2, #31
 8005468:	d5e8      	bpl.n	800543c <_printf_float+0x194>
 800546a:	3301      	adds	r3, #1
 800546c:	e7e5      	b.n	800543a <_printf_float+0x192>
 800546e:	2b00      	cmp	r3, #0
 8005470:	bfd4      	ite	le
 8005472:	f1c3 0302 	rsble	r3, r3, #2
 8005476:	2301      	movgt	r3, #1
 8005478:	4413      	add	r3, r2
 800547a:	e7de      	b.n	800543a <_printf_float+0x192>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	055a      	lsls	r2, r3, #21
 8005480:	d407      	bmi.n	8005492 <_printf_float+0x1ea>
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	4642      	mov	r2, r8
 8005486:	4631      	mov	r1, r6
 8005488:	4628      	mov	r0, r5
 800548a:	47b8      	blx	r7
 800548c:	3001      	adds	r0, #1
 800548e:	d12b      	bne.n	80054e8 <_printf_float+0x240>
 8005490:	e767      	b.n	8005362 <_printf_float+0xba>
 8005492:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005496:	f240 80dc 	bls.w	8005652 <_printf_float+0x3aa>
 800549a:	2200      	movs	r2, #0
 800549c:	2300      	movs	r3, #0
 800549e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054a2:	f7fb fb19 	bl	8000ad8 <__aeabi_dcmpeq>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d033      	beq.n	8005512 <_printf_float+0x26a>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4a41      	ldr	r2, [pc, #260]	; (80055b4 <_printf_float+0x30c>)
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	f43f af54 	beq.w	8005362 <_printf_float+0xba>
 80054ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054be:	429a      	cmp	r2, r3
 80054c0:	db02      	blt.n	80054c8 <_printf_float+0x220>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	07d8      	lsls	r0, r3, #31
 80054c6:	d50f      	bpl.n	80054e8 <_printf_float+0x240>
 80054c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054cc:	4631      	mov	r1, r6
 80054ce:	4628      	mov	r0, r5
 80054d0:	47b8      	blx	r7
 80054d2:	3001      	adds	r0, #1
 80054d4:	f43f af45 	beq.w	8005362 <_printf_float+0xba>
 80054d8:	f04f 0800 	mov.w	r8, #0
 80054dc:	f104 091a 	add.w	r9, r4, #26
 80054e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e2:	3b01      	subs	r3, #1
 80054e4:	4543      	cmp	r3, r8
 80054e6:	dc09      	bgt.n	80054fc <_printf_float+0x254>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	079b      	lsls	r3, r3, #30
 80054ec:	f100 8103 	bmi.w	80056f6 <_printf_float+0x44e>
 80054f0:	68e0      	ldr	r0, [r4, #12]
 80054f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054f4:	4298      	cmp	r0, r3
 80054f6:	bfb8      	it	lt
 80054f8:	4618      	movlt	r0, r3
 80054fa:	e734      	b.n	8005366 <_printf_float+0xbe>
 80054fc:	2301      	movs	r3, #1
 80054fe:	464a      	mov	r2, r9
 8005500:	4631      	mov	r1, r6
 8005502:	4628      	mov	r0, r5
 8005504:	47b8      	blx	r7
 8005506:	3001      	adds	r0, #1
 8005508:	f43f af2b 	beq.w	8005362 <_printf_float+0xba>
 800550c:	f108 0801 	add.w	r8, r8, #1
 8005510:	e7e6      	b.n	80054e0 <_printf_float+0x238>
 8005512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	dc2b      	bgt.n	8005570 <_printf_float+0x2c8>
 8005518:	2301      	movs	r3, #1
 800551a:	4a26      	ldr	r2, [pc, #152]	; (80055b4 <_printf_float+0x30c>)
 800551c:	4631      	mov	r1, r6
 800551e:	4628      	mov	r0, r5
 8005520:	47b8      	blx	r7
 8005522:	3001      	adds	r0, #1
 8005524:	f43f af1d 	beq.w	8005362 <_printf_float+0xba>
 8005528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552a:	b923      	cbnz	r3, 8005536 <_printf_float+0x28e>
 800552c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800552e:	b913      	cbnz	r3, 8005536 <_printf_float+0x28e>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	07d9      	lsls	r1, r3, #31
 8005534:	d5d8      	bpl.n	80054e8 <_printf_float+0x240>
 8005536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	f43f af0e 	beq.w	8005362 <_printf_float+0xba>
 8005546:	f04f 0900 	mov.w	r9, #0
 800554a:	f104 0a1a 	add.w	sl, r4, #26
 800554e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005550:	425b      	negs	r3, r3
 8005552:	454b      	cmp	r3, r9
 8005554:	dc01      	bgt.n	800555a <_printf_float+0x2b2>
 8005556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005558:	e794      	b.n	8005484 <_printf_float+0x1dc>
 800555a:	2301      	movs	r3, #1
 800555c:	4652      	mov	r2, sl
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	f43f aefc 	beq.w	8005362 <_printf_float+0xba>
 800556a:	f109 0901 	add.w	r9, r9, #1
 800556e:	e7ee      	b.n	800554e <_printf_float+0x2a6>
 8005570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005574:	429a      	cmp	r2, r3
 8005576:	bfa8      	it	ge
 8005578:	461a      	movge	r2, r3
 800557a:	2a00      	cmp	r2, #0
 800557c:	4691      	mov	r9, r2
 800557e:	dd07      	ble.n	8005590 <_printf_float+0x2e8>
 8005580:	4613      	mov	r3, r2
 8005582:	4631      	mov	r1, r6
 8005584:	4642      	mov	r2, r8
 8005586:	4628      	mov	r0, r5
 8005588:	47b8      	blx	r7
 800558a:	3001      	adds	r0, #1
 800558c:	f43f aee9 	beq.w	8005362 <_printf_float+0xba>
 8005590:	f104 031a 	add.w	r3, r4, #26
 8005594:	f04f 0b00 	mov.w	fp, #0
 8005598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800559c:	9306      	str	r3, [sp, #24]
 800559e:	e015      	b.n	80055cc <_printf_float+0x324>
 80055a0:	7fefffff 	.word	0x7fefffff
 80055a4:	080096a8 	.word	0x080096a8
 80055a8:	080096a4 	.word	0x080096a4
 80055ac:	080096b0 	.word	0x080096b0
 80055b0:	080096ac 	.word	0x080096ac
 80055b4:	080096b4 	.word	0x080096b4
 80055b8:	2301      	movs	r3, #1
 80055ba:	9a06      	ldr	r2, [sp, #24]
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f aecd 	beq.w	8005362 <_printf_float+0xba>
 80055c8:	f10b 0b01 	add.w	fp, fp, #1
 80055cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80055d0:	ebaa 0309 	sub.w	r3, sl, r9
 80055d4:	455b      	cmp	r3, fp
 80055d6:	dcef      	bgt.n	80055b8 <_printf_float+0x310>
 80055d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055dc:	429a      	cmp	r2, r3
 80055de:	44d0      	add	r8, sl
 80055e0:	db15      	blt.n	800560e <_printf_float+0x366>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	07da      	lsls	r2, r3, #31
 80055e6:	d412      	bmi.n	800560e <_printf_float+0x366>
 80055e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055ec:	eba3 020a 	sub.w	r2, r3, sl
 80055f0:	eba3 0a01 	sub.w	sl, r3, r1
 80055f4:	4592      	cmp	sl, r2
 80055f6:	bfa8      	it	ge
 80055f8:	4692      	movge	sl, r2
 80055fa:	f1ba 0f00 	cmp.w	sl, #0
 80055fe:	dc0e      	bgt.n	800561e <_printf_float+0x376>
 8005600:	f04f 0800 	mov.w	r8, #0
 8005604:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005608:	f104 091a 	add.w	r9, r4, #26
 800560c:	e019      	b.n	8005642 <_printf_float+0x39a>
 800560e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005612:	4631      	mov	r1, r6
 8005614:	4628      	mov	r0, r5
 8005616:	47b8      	blx	r7
 8005618:	3001      	adds	r0, #1
 800561a:	d1e5      	bne.n	80055e8 <_printf_float+0x340>
 800561c:	e6a1      	b.n	8005362 <_printf_float+0xba>
 800561e:	4653      	mov	r3, sl
 8005620:	4642      	mov	r2, r8
 8005622:	4631      	mov	r1, r6
 8005624:	4628      	mov	r0, r5
 8005626:	47b8      	blx	r7
 8005628:	3001      	adds	r0, #1
 800562a:	d1e9      	bne.n	8005600 <_printf_float+0x358>
 800562c:	e699      	b.n	8005362 <_printf_float+0xba>
 800562e:	2301      	movs	r3, #1
 8005630:	464a      	mov	r2, r9
 8005632:	4631      	mov	r1, r6
 8005634:	4628      	mov	r0, r5
 8005636:	47b8      	blx	r7
 8005638:	3001      	adds	r0, #1
 800563a:	f43f ae92 	beq.w	8005362 <_printf_float+0xba>
 800563e:	f108 0801 	add.w	r8, r8, #1
 8005642:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	eba3 030a 	sub.w	r3, r3, sl
 800564c:	4543      	cmp	r3, r8
 800564e:	dcee      	bgt.n	800562e <_printf_float+0x386>
 8005650:	e74a      	b.n	80054e8 <_printf_float+0x240>
 8005652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005654:	2a01      	cmp	r2, #1
 8005656:	dc01      	bgt.n	800565c <_printf_float+0x3b4>
 8005658:	07db      	lsls	r3, r3, #31
 800565a:	d53a      	bpl.n	80056d2 <_printf_float+0x42a>
 800565c:	2301      	movs	r3, #1
 800565e:	4642      	mov	r2, r8
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f ae7b 	beq.w	8005362 <_printf_float+0xba>
 800566c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005670:	4631      	mov	r1, r6
 8005672:	4628      	mov	r0, r5
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	f108 0801 	add.w	r8, r8, #1
 800567c:	f43f ae71 	beq.w	8005362 <_printf_float+0xba>
 8005680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005682:	2200      	movs	r2, #0
 8005684:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800568c:	2300      	movs	r3, #0
 800568e:	f7fb fa23 	bl	8000ad8 <__aeabi_dcmpeq>
 8005692:	b9c8      	cbnz	r0, 80056c8 <_printf_float+0x420>
 8005694:	4653      	mov	r3, sl
 8005696:	4642      	mov	r2, r8
 8005698:	4631      	mov	r1, r6
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	d10e      	bne.n	80056c0 <_printf_float+0x418>
 80056a2:	e65e      	b.n	8005362 <_printf_float+0xba>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4652      	mov	r2, sl
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f ae57 	beq.w	8005362 <_printf_float+0xba>
 80056b4:	f108 0801 	add.w	r8, r8, #1
 80056b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ba:	3b01      	subs	r3, #1
 80056bc:	4543      	cmp	r3, r8
 80056be:	dcf1      	bgt.n	80056a4 <_printf_float+0x3fc>
 80056c0:	464b      	mov	r3, r9
 80056c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056c6:	e6de      	b.n	8005486 <_printf_float+0x1de>
 80056c8:	f04f 0800 	mov.w	r8, #0
 80056cc:	f104 0a1a 	add.w	sl, r4, #26
 80056d0:	e7f2      	b.n	80056b8 <_printf_float+0x410>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e7df      	b.n	8005696 <_printf_float+0x3ee>
 80056d6:	2301      	movs	r3, #1
 80056d8:	464a      	mov	r2, r9
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	47b8      	blx	r7
 80056e0:	3001      	adds	r0, #1
 80056e2:	f43f ae3e 	beq.w	8005362 <_printf_float+0xba>
 80056e6:	f108 0801 	add.w	r8, r8, #1
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	4543      	cmp	r3, r8
 80056f2:	dcf0      	bgt.n	80056d6 <_printf_float+0x42e>
 80056f4:	e6fc      	b.n	80054f0 <_printf_float+0x248>
 80056f6:	f04f 0800 	mov.w	r8, #0
 80056fa:	f104 0919 	add.w	r9, r4, #25
 80056fe:	e7f4      	b.n	80056ea <_printf_float+0x442>
 8005700:	2900      	cmp	r1, #0
 8005702:	f43f ae8b 	beq.w	800541c <_printf_float+0x174>
 8005706:	2300      	movs	r3, #0
 8005708:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800570c:	ab09      	add	r3, sp, #36	; 0x24
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	ec49 8b10 	vmov	d0, r8, r9
 8005714:	6022      	str	r2, [r4, #0]
 8005716:	f8cd a004 	str.w	sl, [sp, #4]
 800571a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800571e:	4628      	mov	r0, r5
 8005720:	f7ff fd2e 	bl	8005180 <__cvt>
 8005724:	4680      	mov	r8, r0
 8005726:	e648      	b.n	80053ba <_printf_float+0x112>

08005728 <_printf_common>:
 8005728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	4691      	mov	r9, r2
 800572e:	461f      	mov	r7, r3
 8005730:	688a      	ldr	r2, [r1, #8]
 8005732:	690b      	ldr	r3, [r1, #16]
 8005734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005738:	4293      	cmp	r3, r2
 800573a:	bfb8      	it	lt
 800573c:	4613      	movlt	r3, r2
 800573e:	f8c9 3000 	str.w	r3, [r9]
 8005742:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005746:	4606      	mov	r6, r0
 8005748:	460c      	mov	r4, r1
 800574a:	b112      	cbz	r2, 8005752 <_printf_common+0x2a>
 800574c:	3301      	adds	r3, #1
 800574e:	f8c9 3000 	str.w	r3, [r9]
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	0699      	lsls	r1, r3, #26
 8005756:	bf42      	ittt	mi
 8005758:	f8d9 3000 	ldrmi.w	r3, [r9]
 800575c:	3302      	addmi	r3, #2
 800575e:	f8c9 3000 	strmi.w	r3, [r9]
 8005762:	6825      	ldr	r5, [r4, #0]
 8005764:	f015 0506 	ands.w	r5, r5, #6
 8005768:	d107      	bne.n	800577a <_printf_common+0x52>
 800576a:	f104 0a19 	add.w	sl, r4, #25
 800576e:	68e3      	ldr	r3, [r4, #12]
 8005770:	f8d9 2000 	ldr.w	r2, [r9]
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	42ab      	cmp	r3, r5
 8005778:	dc28      	bgt.n	80057cc <_printf_common+0xa4>
 800577a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	3300      	adds	r3, #0
 8005782:	bf18      	it	ne
 8005784:	2301      	movne	r3, #1
 8005786:	0692      	lsls	r2, r2, #26
 8005788:	d42d      	bmi.n	80057e6 <_printf_common+0xbe>
 800578a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800578e:	4639      	mov	r1, r7
 8005790:	4630      	mov	r0, r6
 8005792:	47c0      	blx	r8
 8005794:	3001      	adds	r0, #1
 8005796:	d020      	beq.n	80057da <_printf_common+0xb2>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	68e5      	ldr	r5, [r4, #12]
 800579c:	f8d9 2000 	ldr.w	r2, [r9]
 80057a0:	f003 0306 	and.w	r3, r3, #6
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	bf08      	it	eq
 80057a8:	1aad      	subeq	r5, r5, r2
 80057aa:	68a3      	ldr	r3, [r4, #8]
 80057ac:	6922      	ldr	r2, [r4, #16]
 80057ae:	bf0c      	ite	eq
 80057b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057b4:	2500      	movne	r5, #0
 80057b6:	4293      	cmp	r3, r2
 80057b8:	bfc4      	itt	gt
 80057ba:	1a9b      	subgt	r3, r3, r2
 80057bc:	18ed      	addgt	r5, r5, r3
 80057be:	f04f 0900 	mov.w	r9, #0
 80057c2:	341a      	adds	r4, #26
 80057c4:	454d      	cmp	r5, r9
 80057c6:	d11a      	bne.n	80057fe <_printf_common+0xd6>
 80057c8:	2000      	movs	r0, #0
 80057ca:	e008      	b.n	80057de <_printf_common+0xb6>
 80057cc:	2301      	movs	r3, #1
 80057ce:	4652      	mov	r2, sl
 80057d0:	4639      	mov	r1, r7
 80057d2:	4630      	mov	r0, r6
 80057d4:	47c0      	blx	r8
 80057d6:	3001      	adds	r0, #1
 80057d8:	d103      	bne.n	80057e2 <_printf_common+0xba>
 80057da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e2:	3501      	adds	r5, #1
 80057e4:	e7c3      	b.n	800576e <_printf_common+0x46>
 80057e6:	18e1      	adds	r1, r4, r3
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	2030      	movs	r0, #48	; 0x30
 80057ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057f0:	4422      	add	r2, r4
 80057f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057fa:	3302      	adds	r3, #2
 80057fc:	e7c5      	b.n	800578a <_printf_common+0x62>
 80057fe:	2301      	movs	r3, #1
 8005800:	4622      	mov	r2, r4
 8005802:	4639      	mov	r1, r7
 8005804:	4630      	mov	r0, r6
 8005806:	47c0      	blx	r8
 8005808:	3001      	adds	r0, #1
 800580a:	d0e6      	beq.n	80057da <_printf_common+0xb2>
 800580c:	f109 0901 	add.w	r9, r9, #1
 8005810:	e7d8      	b.n	80057c4 <_printf_common+0x9c>
	...

08005814 <_printf_i>:
 8005814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005818:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800581c:	460c      	mov	r4, r1
 800581e:	7e09      	ldrb	r1, [r1, #24]
 8005820:	b085      	sub	sp, #20
 8005822:	296e      	cmp	r1, #110	; 0x6e
 8005824:	4617      	mov	r7, r2
 8005826:	4606      	mov	r6, r0
 8005828:	4698      	mov	r8, r3
 800582a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800582c:	f000 80b3 	beq.w	8005996 <_printf_i+0x182>
 8005830:	d822      	bhi.n	8005878 <_printf_i+0x64>
 8005832:	2963      	cmp	r1, #99	; 0x63
 8005834:	d036      	beq.n	80058a4 <_printf_i+0x90>
 8005836:	d80a      	bhi.n	800584e <_printf_i+0x3a>
 8005838:	2900      	cmp	r1, #0
 800583a:	f000 80b9 	beq.w	80059b0 <_printf_i+0x19c>
 800583e:	2958      	cmp	r1, #88	; 0x58
 8005840:	f000 8083 	beq.w	800594a <_printf_i+0x136>
 8005844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005848:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800584c:	e032      	b.n	80058b4 <_printf_i+0xa0>
 800584e:	2964      	cmp	r1, #100	; 0x64
 8005850:	d001      	beq.n	8005856 <_printf_i+0x42>
 8005852:	2969      	cmp	r1, #105	; 0x69
 8005854:	d1f6      	bne.n	8005844 <_printf_i+0x30>
 8005856:	6820      	ldr	r0, [r4, #0]
 8005858:	6813      	ldr	r3, [r2, #0]
 800585a:	0605      	lsls	r5, r0, #24
 800585c:	f103 0104 	add.w	r1, r3, #4
 8005860:	d52a      	bpl.n	80058b8 <_printf_i+0xa4>
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6011      	str	r1, [r2, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	da03      	bge.n	8005872 <_printf_i+0x5e>
 800586a:	222d      	movs	r2, #45	; 0x2d
 800586c:	425b      	negs	r3, r3
 800586e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005872:	486f      	ldr	r0, [pc, #444]	; (8005a30 <_printf_i+0x21c>)
 8005874:	220a      	movs	r2, #10
 8005876:	e039      	b.n	80058ec <_printf_i+0xd8>
 8005878:	2973      	cmp	r1, #115	; 0x73
 800587a:	f000 809d 	beq.w	80059b8 <_printf_i+0x1a4>
 800587e:	d808      	bhi.n	8005892 <_printf_i+0x7e>
 8005880:	296f      	cmp	r1, #111	; 0x6f
 8005882:	d020      	beq.n	80058c6 <_printf_i+0xb2>
 8005884:	2970      	cmp	r1, #112	; 0x70
 8005886:	d1dd      	bne.n	8005844 <_printf_i+0x30>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	f043 0320 	orr.w	r3, r3, #32
 800588e:	6023      	str	r3, [r4, #0]
 8005890:	e003      	b.n	800589a <_printf_i+0x86>
 8005892:	2975      	cmp	r1, #117	; 0x75
 8005894:	d017      	beq.n	80058c6 <_printf_i+0xb2>
 8005896:	2978      	cmp	r1, #120	; 0x78
 8005898:	d1d4      	bne.n	8005844 <_printf_i+0x30>
 800589a:	2378      	movs	r3, #120	; 0x78
 800589c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058a0:	4864      	ldr	r0, [pc, #400]	; (8005a34 <_printf_i+0x220>)
 80058a2:	e055      	b.n	8005950 <_printf_i+0x13c>
 80058a4:	6813      	ldr	r3, [r2, #0]
 80058a6:	1d19      	adds	r1, r3, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6011      	str	r1, [r2, #0]
 80058ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058b4:	2301      	movs	r3, #1
 80058b6:	e08c      	b.n	80059d2 <_printf_i+0x1be>
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6011      	str	r1, [r2, #0]
 80058bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058c0:	bf18      	it	ne
 80058c2:	b21b      	sxthne	r3, r3
 80058c4:	e7cf      	b.n	8005866 <_printf_i+0x52>
 80058c6:	6813      	ldr	r3, [r2, #0]
 80058c8:	6825      	ldr	r5, [r4, #0]
 80058ca:	1d18      	adds	r0, r3, #4
 80058cc:	6010      	str	r0, [r2, #0]
 80058ce:	0628      	lsls	r0, r5, #24
 80058d0:	d501      	bpl.n	80058d6 <_printf_i+0xc2>
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	e002      	b.n	80058dc <_printf_i+0xc8>
 80058d6:	0668      	lsls	r0, r5, #25
 80058d8:	d5fb      	bpl.n	80058d2 <_printf_i+0xbe>
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	4854      	ldr	r0, [pc, #336]	; (8005a30 <_printf_i+0x21c>)
 80058de:	296f      	cmp	r1, #111	; 0x6f
 80058e0:	bf14      	ite	ne
 80058e2:	220a      	movne	r2, #10
 80058e4:	2208      	moveq	r2, #8
 80058e6:	2100      	movs	r1, #0
 80058e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ec:	6865      	ldr	r5, [r4, #4]
 80058ee:	60a5      	str	r5, [r4, #8]
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	f2c0 8095 	blt.w	8005a20 <_printf_i+0x20c>
 80058f6:	6821      	ldr	r1, [r4, #0]
 80058f8:	f021 0104 	bic.w	r1, r1, #4
 80058fc:	6021      	str	r1, [r4, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d13d      	bne.n	800597e <_printf_i+0x16a>
 8005902:	2d00      	cmp	r5, #0
 8005904:	f040 808e 	bne.w	8005a24 <_printf_i+0x210>
 8005908:	4665      	mov	r5, ip
 800590a:	2a08      	cmp	r2, #8
 800590c:	d10b      	bne.n	8005926 <_printf_i+0x112>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	07db      	lsls	r3, r3, #31
 8005912:	d508      	bpl.n	8005926 <_printf_i+0x112>
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	6862      	ldr	r2, [r4, #4]
 8005918:	429a      	cmp	r2, r3
 800591a:	bfde      	ittt	le
 800591c:	2330      	movle	r3, #48	; 0x30
 800591e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005922:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005926:	ebac 0305 	sub.w	r3, ip, r5
 800592a:	6123      	str	r3, [r4, #16]
 800592c:	f8cd 8000 	str.w	r8, [sp]
 8005930:	463b      	mov	r3, r7
 8005932:	aa03      	add	r2, sp, #12
 8005934:	4621      	mov	r1, r4
 8005936:	4630      	mov	r0, r6
 8005938:	f7ff fef6 	bl	8005728 <_printf_common>
 800593c:	3001      	adds	r0, #1
 800593e:	d14d      	bne.n	80059dc <_printf_i+0x1c8>
 8005940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005944:	b005      	add	sp, #20
 8005946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800594a:	4839      	ldr	r0, [pc, #228]	; (8005a30 <_printf_i+0x21c>)
 800594c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005950:	6813      	ldr	r3, [r2, #0]
 8005952:	6821      	ldr	r1, [r4, #0]
 8005954:	1d1d      	adds	r5, r3, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6015      	str	r5, [r2, #0]
 800595a:	060a      	lsls	r2, r1, #24
 800595c:	d50b      	bpl.n	8005976 <_printf_i+0x162>
 800595e:	07ca      	lsls	r2, r1, #31
 8005960:	bf44      	itt	mi
 8005962:	f041 0120 	orrmi.w	r1, r1, #32
 8005966:	6021      	strmi	r1, [r4, #0]
 8005968:	b91b      	cbnz	r3, 8005972 <_printf_i+0x15e>
 800596a:	6822      	ldr	r2, [r4, #0]
 800596c:	f022 0220 	bic.w	r2, r2, #32
 8005970:	6022      	str	r2, [r4, #0]
 8005972:	2210      	movs	r2, #16
 8005974:	e7b7      	b.n	80058e6 <_printf_i+0xd2>
 8005976:	064d      	lsls	r5, r1, #25
 8005978:	bf48      	it	mi
 800597a:	b29b      	uxthmi	r3, r3
 800597c:	e7ef      	b.n	800595e <_printf_i+0x14a>
 800597e:	4665      	mov	r5, ip
 8005980:	fbb3 f1f2 	udiv	r1, r3, r2
 8005984:	fb02 3311 	mls	r3, r2, r1, r3
 8005988:	5cc3      	ldrb	r3, [r0, r3]
 800598a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800598e:	460b      	mov	r3, r1
 8005990:	2900      	cmp	r1, #0
 8005992:	d1f5      	bne.n	8005980 <_printf_i+0x16c>
 8005994:	e7b9      	b.n	800590a <_printf_i+0xf6>
 8005996:	6813      	ldr	r3, [r2, #0]
 8005998:	6825      	ldr	r5, [r4, #0]
 800599a:	6961      	ldr	r1, [r4, #20]
 800599c:	1d18      	adds	r0, r3, #4
 800599e:	6010      	str	r0, [r2, #0]
 80059a0:	0628      	lsls	r0, r5, #24
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	d501      	bpl.n	80059aa <_printf_i+0x196>
 80059a6:	6019      	str	r1, [r3, #0]
 80059a8:	e002      	b.n	80059b0 <_printf_i+0x19c>
 80059aa:	066a      	lsls	r2, r5, #25
 80059ac:	d5fb      	bpl.n	80059a6 <_printf_i+0x192>
 80059ae:	8019      	strh	r1, [r3, #0]
 80059b0:	2300      	movs	r3, #0
 80059b2:	6123      	str	r3, [r4, #16]
 80059b4:	4665      	mov	r5, ip
 80059b6:	e7b9      	b.n	800592c <_printf_i+0x118>
 80059b8:	6813      	ldr	r3, [r2, #0]
 80059ba:	1d19      	adds	r1, r3, #4
 80059bc:	6011      	str	r1, [r2, #0]
 80059be:	681d      	ldr	r5, [r3, #0]
 80059c0:	6862      	ldr	r2, [r4, #4]
 80059c2:	2100      	movs	r1, #0
 80059c4:	4628      	mov	r0, r5
 80059c6:	f7fa fc13 	bl	80001f0 <memchr>
 80059ca:	b108      	cbz	r0, 80059d0 <_printf_i+0x1bc>
 80059cc:	1b40      	subs	r0, r0, r5
 80059ce:	6060      	str	r0, [r4, #4]
 80059d0:	6863      	ldr	r3, [r4, #4]
 80059d2:	6123      	str	r3, [r4, #16]
 80059d4:	2300      	movs	r3, #0
 80059d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059da:	e7a7      	b.n	800592c <_printf_i+0x118>
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	462a      	mov	r2, r5
 80059e0:	4639      	mov	r1, r7
 80059e2:	4630      	mov	r0, r6
 80059e4:	47c0      	blx	r8
 80059e6:	3001      	adds	r0, #1
 80059e8:	d0aa      	beq.n	8005940 <_printf_i+0x12c>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	079b      	lsls	r3, r3, #30
 80059ee:	d413      	bmi.n	8005a18 <_printf_i+0x204>
 80059f0:	68e0      	ldr	r0, [r4, #12]
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	4298      	cmp	r0, r3
 80059f6:	bfb8      	it	lt
 80059f8:	4618      	movlt	r0, r3
 80059fa:	e7a3      	b.n	8005944 <_printf_i+0x130>
 80059fc:	2301      	movs	r3, #1
 80059fe:	464a      	mov	r2, r9
 8005a00:	4639      	mov	r1, r7
 8005a02:	4630      	mov	r0, r6
 8005a04:	47c0      	blx	r8
 8005a06:	3001      	adds	r0, #1
 8005a08:	d09a      	beq.n	8005940 <_printf_i+0x12c>
 8005a0a:	3501      	adds	r5, #1
 8005a0c:	68e3      	ldr	r3, [r4, #12]
 8005a0e:	9a03      	ldr	r2, [sp, #12]
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	42ab      	cmp	r3, r5
 8005a14:	dcf2      	bgt.n	80059fc <_printf_i+0x1e8>
 8005a16:	e7eb      	b.n	80059f0 <_printf_i+0x1dc>
 8005a18:	2500      	movs	r5, #0
 8005a1a:	f104 0919 	add.w	r9, r4, #25
 8005a1e:	e7f5      	b.n	8005a0c <_printf_i+0x1f8>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1ac      	bne.n	800597e <_printf_i+0x16a>
 8005a24:	7803      	ldrb	r3, [r0, #0]
 8005a26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a2e:	e76c      	b.n	800590a <_printf_i+0xf6>
 8005a30:	080096b6 	.word	0x080096b6
 8005a34:	080096c7 	.word	0x080096c7

08005a38 <iprintf>:
 8005a38:	b40f      	push	{r0, r1, r2, r3}
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <iprintf+0x2c>)
 8005a3c:	b513      	push	{r0, r1, r4, lr}
 8005a3e:	681c      	ldr	r4, [r3, #0]
 8005a40:	b124      	cbz	r4, 8005a4c <iprintf+0x14>
 8005a42:	69a3      	ldr	r3, [r4, #24]
 8005a44:	b913      	cbnz	r3, 8005a4c <iprintf+0x14>
 8005a46:	4620      	mov	r0, r4
 8005a48:	f001 f866 	bl	8006b18 <__sinit>
 8005a4c:	ab05      	add	r3, sp, #20
 8005a4e:	9a04      	ldr	r2, [sp, #16]
 8005a50:	68a1      	ldr	r1, [r4, #8]
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	4620      	mov	r0, r4
 8005a56:	f001 fd29 	bl	80074ac <_vfiprintf_r>
 8005a5a:	b002      	add	sp, #8
 8005a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a60:	b004      	add	sp, #16
 8005a62:	4770      	bx	lr
 8005a64:	20000054 	.word	0x20000054

08005a68 <_puts_r>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	460e      	mov	r6, r1
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	b118      	cbz	r0, 8005a78 <_puts_r+0x10>
 8005a70:	6983      	ldr	r3, [r0, #24]
 8005a72:	b90b      	cbnz	r3, 8005a78 <_puts_r+0x10>
 8005a74:	f001 f850 	bl	8006b18 <__sinit>
 8005a78:	69ab      	ldr	r3, [r5, #24]
 8005a7a:	68ac      	ldr	r4, [r5, #8]
 8005a7c:	b913      	cbnz	r3, 8005a84 <_puts_r+0x1c>
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f001 f84a 	bl	8006b18 <__sinit>
 8005a84:	4b23      	ldr	r3, [pc, #140]	; (8005b14 <_puts_r+0xac>)
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d117      	bne.n	8005aba <_puts_r+0x52>
 8005a8a:	686c      	ldr	r4, [r5, #4]
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	071b      	lsls	r3, r3, #28
 8005a90:	d51d      	bpl.n	8005ace <_puts_r+0x66>
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	b1db      	cbz	r3, 8005ace <_puts_r+0x66>
 8005a96:	3e01      	subs	r6, #1
 8005a98:	68a3      	ldr	r3, [r4, #8]
 8005a9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60a3      	str	r3, [r4, #8]
 8005aa2:	b9e9      	cbnz	r1, 8005ae0 <_puts_r+0x78>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	da2e      	bge.n	8005b06 <_puts_r+0x9e>
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	210a      	movs	r1, #10
 8005aac:	4628      	mov	r0, r5
 8005aae:	f000 f83f 	bl	8005b30 <__swbuf_r>
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d011      	beq.n	8005ada <_puts_r+0x72>
 8005ab6:	200a      	movs	r0, #10
 8005ab8:	e011      	b.n	8005ade <_puts_r+0x76>
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <_puts_r+0xb0>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	d101      	bne.n	8005ac4 <_puts_r+0x5c>
 8005ac0:	68ac      	ldr	r4, [r5, #8]
 8005ac2:	e7e3      	b.n	8005a8c <_puts_r+0x24>
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <_puts_r+0xb4>)
 8005ac6:	429c      	cmp	r4, r3
 8005ac8:	bf08      	it	eq
 8005aca:	68ec      	ldreq	r4, [r5, #12]
 8005acc:	e7de      	b.n	8005a8c <_puts_r+0x24>
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 f87f 	bl	8005bd4 <__swsetup_r>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d0dd      	beq.n	8005a96 <_puts_r+0x2e>
 8005ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	da04      	bge.n	8005aee <_puts_r+0x86>
 8005ae4:	69a2      	ldr	r2, [r4, #24]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	dc06      	bgt.n	8005af8 <_puts_r+0x90>
 8005aea:	290a      	cmp	r1, #10
 8005aec:	d004      	beq.n	8005af8 <_puts_r+0x90>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	6022      	str	r2, [r4, #0]
 8005af4:	7019      	strb	r1, [r3, #0]
 8005af6:	e7cf      	b.n	8005a98 <_puts_r+0x30>
 8005af8:	4622      	mov	r2, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f818 	bl	8005b30 <__swbuf_r>
 8005b00:	3001      	adds	r0, #1
 8005b02:	d1c9      	bne.n	8005a98 <_puts_r+0x30>
 8005b04:	e7e9      	b.n	8005ada <_puts_r+0x72>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	200a      	movs	r0, #10
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	6022      	str	r2, [r4, #0]
 8005b0e:	7018      	strb	r0, [r3, #0]
 8005b10:	e7e5      	b.n	8005ade <_puts_r+0x76>
 8005b12:	bf00      	nop
 8005b14:	08009708 	.word	0x08009708
 8005b18:	08009728 	.word	0x08009728
 8005b1c:	080096e8 	.word	0x080096e8

08005b20 <puts>:
 8005b20:	4b02      	ldr	r3, [pc, #8]	; (8005b2c <puts+0xc>)
 8005b22:	4601      	mov	r1, r0
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	f7ff bf9f 	b.w	8005a68 <_puts_r>
 8005b2a:	bf00      	nop
 8005b2c:	20000054 	.word	0x20000054

08005b30 <__swbuf_r>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	460e      	mov	r6, r1
 8005b34:	4614      	mov	r4, r2
 8005b36:	4605      	mov	r5, r0
 8005b38:	b118      	cbz	r0, 8005b42 <__swbuf_r+0x12>
 8005b3a:	6983      	ldr	r3, [r0, #24]
 8005b3c:	b90b      	cbnz	r3, 8005b42 <__swbuf_r+0x12>
 8005b3e:	f000 ffeb 	bl	8006b18 <__sinit>
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <__swbuf_r+0x98>)
 8005b44:	429c      	cmp	r4, r3
 8005b46:	d12a      	bne.n	8005b9e <__swbuf_r+0x6e>
 8005b48:	686c      	ldr	r4, [r5, #4]
 8005b4a:	69a3      	ldr	r3, [r4, #24]
 8005b4c:	60a3      	str	r3, [r4, #8]
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	071a      	lsls	r2, r3, #28
 8005b52:	d52e      	bpl.n	8005bb2 <__swbuf_r+0x82>
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	b363      	cbz	r3, 8005bb2 <__swbuf_r+0x82>
 8005b58:	6923      	ldr	r3, [r4, #16]
 8005b5a:	6820      	ldr	r0, [r4, #0]
 8005b5c:	1ac0      	subs	r0, r0, r3
 8005b5e:	6963      	ldr	r3, [r4, #20]
 8005b60:	b2f6      	uxtb	r6, r6
 8005b62:	4283      	cmp	r3, r0
 8005b64:	4637      	mov	r7, r6
 8005b66:	dc04      	bgt.n	8005b72 <__swbuf_r+0x42>
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f000 ff6a 	bl	8006a44 <_fflush_r>
 8005b70:	bb28      	cbnz	r0, 8005bbe <__swbuf_r+0x8e>
 8005b72:	68a3      	ldr	r3, [r4, #8]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	60a3      	str	r3, [r4, #8]
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	701e      	strb	r6, [r3, #0]
 8005b80:	6963      	ldr	r3, [r4, #20]
 8005b82:	3001      	adds	r0, #1
 8005b84:	4283      	cmp	r3, r0
 8005b86:	d004      	beq.n	8005b92 <__swbuf_r+0x62>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	07db      	lsls	r3, r3, #31
 8005b8c:	d519      	bpl.n	8005bc2 <__swbuf_r+0x92>
 8005b8e:	2e0a      	cmp	r6, #10
 8005b90:	d117      	bne.n	8005bc2 <__swbuf_r+0x92>
 8005b92:	4621      	mov	r1, r4
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 ff55 	bl	8006a44 <_fflush_r>
 8005b9a:	b190      	cbz	r0, 8005bc2 <__swbuf_r+0x92>
 8005b9c:	e00f      	b.n	8005bbe <__swbuf_r+0x8e>
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <__swbuf_r+0x9c>)
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	d101      	bne.n	8005ba8 <__swbuf_r+0x78>
 8005ba4:	68ac      	ldr	r4, [r5, #8]
 8005ba6:	e7d0      	b.n	8005b4a <__swbuf_r+0x1a>
 8005ba8:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <__swbuf_r+0xa0>)
 8005baa:	429c      	cmp	r4, r3
 8005bac:	bf08      	it	eq
 8005bae:	68ec      	ldreq	r4, [r5, #12]
 8005bb0:	e7cb      	b.n	8005b4a <__swbuf_r+0x1a>
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f000 f80d 	bl	8005bd4 <__swsetup_r>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d0cc      	beq.n	8005b58 <__swbuf_r+0x28>
 8005bbe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08009708 	.word	0x08009708
 8005bcc:	08009728 	.word	0x08009728
 8005bd0:	080096e8 	.word	0x080096e8

08005bd4 <__swsetup_r>:
 8005bd4:	4b32      	ldr	r3, [pc, #200]	; (8005ca0 <__swsetup_r+0xcc>)
 8005bd6:	b570      	push	{r4, r5, r6, lr}
 8005bd8:	681d      	ldr	r5, [r3, #0]
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460c      	mov	r4, r1
 8005bde:	b125      	cbz	r5, 8005bea <__swsetup_r+0x16>
 8005be0:	69ab      	ldr	r3, [r5, #24]
 8005be2:	b913      	cbnz	r3, 8005bea <__swsetup_r+0x16>
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 ff97 	bl	8006b18 <__sinit>
 8005bea:	4b2e      	ldr	r3, [pc, #184]	; (8005ca4 <__swsetup_r+0xd0>)
 8005bec:	429c      	cmp	r4, r3
 8005bee:	d10f      	bne.n	8005c10 <__swsetup_r+0x3c>
 8005bf0:	686c      	ldr	r4, [r5, #4]
 8005bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	0715      	lsls	r5, r2, #28
 8005bfa:	d42c      	bmi.n	8005c56 <__swsetup_r+0x82>
 8005bfc:	06d0      	lsls	r0, r2, #27
 8005bfe:	d411      	bmi.n	8005c24 <__swsetup_r+0x50>
 8005c00:	2209      	movs	r2, #9
 8005c02:	6032      	str	r2, [r6, #0]
 8005c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c0e:	e03e      	b.n	8005c8e <__swsetup_r+0xba>
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <__swsetup_r+0xd4>)
 8005c12:	429c      	cmp	r4, r3
 8005c14:	d101      	bne.n	8005c1a <__swsetup_r+0x46>
 8005c16:	68ac      	ldr	r4, [r5, #8]
 8005c18:	e7eb      	b.n	8005bf2 <__swsetup_r+0x1e>
 8005c1a:	4b24      	ldr	r3, [pc, #144]	; (8005cac <__swsetup_r+0xd8>)
 8005c1c:	429c      	cmp	r4, r3
 8005c1e:	bf08      	it	eq
 8005c20:	68ec      	ldreq	r4, [r5, #12]
 8005c22:	e7e6      	b.n	8005bf2 <__swsetup_r+0x1e>
 8005c24:	0751      	lsls	r1, r2, #29
 8005c26:	d512      	bpl.n	8005c4e <__swsetup_r+0x7a>
 8005c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c2a:	b141      	cbz	r1, 8005c3e <__swsetup_r+0x6a>
 8005c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c30:	4299      	cmp	r1, r3
 8005c32:	d002      	beq.n	8005c3a <__swsetup_r+0x66>
 8005c34:	4630      	mov	r0, r6
 8005c36:	f001 fb67 	bl	8007308 <_free_r>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8005c3e:	89a3      	ldrh	r3, [r4, #12]
 8005c40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c44:	81a3      	strh	r3, [r4, #12]
 8005c46:	2300      	movs	r3, #0
 8005c48:	6063      	str	r3, [r4, #4]
 8005c4a:	6923      	ldr	r3, [r4, #16]
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	f043 0308 	orr.w	r3, r3, #8
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	6923      	ldr	r3, [r4, #16]
 8005c58:	b94b      	cbnz	r3, 8005c6e <__swsetup_r+0x9a>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c64:	d003      	beq.n	8005c6e <__swsetup_r+0x9a>
 8005c66:	4621      	mov	r1, r4
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f001 f811 	bl	8006c90 <__smakebuf_r>
 8005c6e:	89a2      	ldrh	r2, [r4, #12]
 8005c70:	f012 0301 	ands.w	r3, r2, #1
 8005c74:	d00c      	beq.n	8005c90 <__swsetup_r+0xbc>
 8005c76:	2300      	movs	r3, #0
 8005c78:	60a3      	str	r3, [r4, #8]
 8005c7a:	6963      	ldr	r3, [r4, #20]
 8005c7c:	425b      	negs	r3, r3
 8005c7e:	61a3      	str	r3, [r4, #24]
 8005c80:	6923      	ldr	r3, [r4, #16]
 8005c82:	b953      	cbnz	r3, 8005c9a <__swsetup_r+0xc6>
 8005c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005c8c:	d1ba      	bne.n	8005c04 <__swsetup_r+0x30>
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	0792      	lsls	r2, r2, #30
 8005c92:	bf58      	it	pl
 8005c94:	6963      	ldrpl	r3, [r4, #20]
 8005c96:	60a3      	str	r3, [r4, #8]
 8005c98:	e7f2      	b.n	8005c80 <__swsetup_r+0xac>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e7f7      	b.n	8005c8e <__swsetup_r+0xba>
 8005c9e:	bf00      	nop
 8005ca0:	20000054 	.word	0x20000054
 8005ca4:	08009708 	.word	0x08009708
 8005ca8:	08009728 	.word	0x08009728
 8005cac:	080096e8 	.word	0x080096e8

08005cb0 <quorem>:
 8005cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	6903      	ldr	r3, [r0, #16]
 8005cb6:	690c      	ldr	r4, [r1, #16]
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	4680      	mov	r8, r0
 8005cbc:	f2c0 8082 	blt.w	8005dc4 <quorem+0x114>
 8005cc0:	3c01      	subs	r4, #1
 8005cc2:	f101 0714 	add.w	r7, r1, #20
 8005cc6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005cca:	f100 0614 	add.w	r6, r0, #20
 8005cce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005cd2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005cd6:	eb06 030c 	add.w	r3, r6, ip
 8005cda:	3501      	adds	r5, #1
 8005cdc:	eb07 090c 	add.w	r9, r7, ip
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	fbb0 f5f5 	udiv	r5, r0, r5
 8005ce6:	b395      	cbz	r5, 8005d4e <quorem+0x9e>
 8005ce8:	f04f 0a00 	mov.w	sl, #0
 8005cec:	4638      	mov	r0, r7
 8005cee:	46b6      	mov	lr, r6
 8005cf0:	46d3      	mov	fp, sl
 8005cf2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cf6:	b293      	uxth	r3, r2
 8005cf8:	fb05 a303 	mla	r3, r5, r3, sl
 8005cfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	ebab 0303 	sub.w	r3, fp, r3
 8005d06:	0c12      	lsrs	r2, r2, #16
 8005d08:	f8de b000 	ldr.w	fp, [lr]
 8005d0c:	fb05 a202 	mla	r2, r5, r2, sl
 8005d10:	fa13 f38b 	uxtah	r3, r3, fp
 8005d14:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005d18:	fa1f fb82 	uxth.w	fp, r2
 8005d1c:	f8de 2000 	ldr.w	r2, [lr]
 8005d20:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005d24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d2e:	4581      	cmp	r9, r0
 8005d30:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005d34:	f84e 3b04 	str.w	r3, [lr], #4
 8005d38:	d2db      	bcs.n	8005cf2 <quorem+0x42>
 8005d3a:	f856 300c 	ldr.w	r3, [r6, ip]
 8005d3e:	b933      	cbnz	r3, 8005d4e <quorem+0x9e>
 8005d40:	9b01      	ldr	r3, [sp, #4]
 8005d42:	3b04      	subs	r3, #4
 8005d44:	429e      	cmp	r6, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	d330      	bcc.n	8005dac <quorem+0xfc>
 8005d4a:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f001 fa06 	bl	8007160 <__mcmp>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	db25      	blt.n	8005da4 <quorem+0xf4>
 8005d58:	3501      	adds	r5, #1
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f04f 0c00 	mov.w	ip, #0
 8005d60:	f857 2b04 	ldr.w	r2, [r7], #4
 8005d64:	f8d0 e000 	ldr.w	lr, [r0]
 8005d68:	b293      	uxth	r3, r2
 8005d6a:	ebac 0303 	sub.w	r3, ip, r3
 8005d6e:	0c12      	lsrs	r2, r2, #16
 8005d70:	fa13 f38e 	uxtah	r3, r3, lr
 8005d74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d82:	45b9      	cmp	r9, r7
 8005d84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d88:	f840 3b04 	str.w	r3, [r0], #4
 8005d8c:	d2e8      	bcs.n	8005d60 <quorem+0xb0>
 8005d8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005d92:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005d96:	b92a      	cbnz	r2, 8005da4 <quorem+0xf4>
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	429e      	cmp	r6, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	d30b      	bcc.n	8005db8 <quorem+0x108>
 8005da0:	f8c8 4010 	str.w	r4, [r8, #16]
 8005da4:	4628      	mov	r0, r5
 8005da6:	b003      	add	sp, #12
 8005da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	3b04      	subs	r3, #4
 8005db0:	2a00      	cmp	r2, #0
 8005db2:	d1ca      	bne.n	8005d4a <quorem+0x9a>
 8005db4:	3c01      	subs	r4, #1
 8005db6:	e7c5      	b.n	8005d44 <quorem+0x94>
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	3b04      	subs	r3, #4
 8005dbc:	2a00      	cmp	r2, #0
 8005dbe:	d1ef      	bne.n	8005da0 <quorem+0xf0>
 8005dc0:	3c01      	subs	r4, #1
 8005dc2:	e7ea      	b.n	8005d9a <quorem+0xea>
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	e7ee      	b.n	8005da6 <quorem+0xf6>

08005dc8 <_dtoa_r>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	ec57 6b10 	vmov	r6, r7, d0
 8005dd0:	b097      	sub	sp, #92	; 0x5c
 8005dd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dd4:	9106      	str	r1, [sp, #24]
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8005dda:	9312      	str	r3, [sp, #72]	; 0x48
 8005ddc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005de0:	e9cd 6700 	strd	r6, r7, [sp]
 8005de4:	b93d      	cbnz	r5, 8005df6 <_dtoa_r+0x2e>
 8005de6:	2010      	movs	r0, #16
 8005de8:	f000 ff92 	bl	8006d10 <malloc>
 8005dec:	6260      	str	r0, [r4, #36]	; 0x24
 8005dee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005df2:	6005      	str	r5, [r0, #0]
 8005df4:	60c5      	str	r5, [r0, #12]
 8005df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df8:	6819      	ldr	r1, [r3, #0]
 8005dfa:	b151      	cbz	r1, 8005e12 <_dtoa_r+0x4a>
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	604a      	str	r2, [r1, #4]
 8005e00:	2301      	movs	r3, #1
 8005e02:	4093      	lsls	r3, r2
 8005e04:	608b      	str	r3, [r1, #8]
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 ffc9 	bl	8006d9e <_Bfree>
 8005e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	1e3b      	subs	r3, r7, #0
 8005e14:	bfbb      	ittet	lt
 8005e16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e1a:	9301      	strlt	r3, [sp, #4]
 8005e1c:	2300      	movge	r3, #0
 8005e1e:	2201      	movlt	r2, #1
 8005e20:	bfac      	ite	ge
 8005e22:	f8c8 3000 	strge.w	r3, [r8]
 8005e26:	f8c8 2000 	strlt.w	r2, [r8]
 8005e2a:	4baf      	ldr	r3, [pc, #700]	; (80060e8 <_dtoa_r+0x320>)
 8005e2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e30:	ea33 0308 	bics.w	r3, r3, r8
 8005e34:	d114      	bne.n	8005e60 <_dtoa_r+0x98>
 8005e36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e38:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	9b00      	ldr	r3, [sp, #0]
 8005e40:	b923      	cbnz	r3, 8005e4c <_dtoa_r+0x84>
 8005e42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005e46:	2800      	cmp	r0, #0
 8005e48:	f000 8542 	beq.w	80068d0 <_dtoa_r+0xb08>
 8005e4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80060fc <_dtoa_r+0x334>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 8544 	beq.w	80068e0 <_dtoa_r+0xb18>
 8005e58:	f10b 0303 	add.w	r3, fp, #3
 8005e5c:	f000 bd3e 	b.w	80068dc <_dtoa_r+0xb14>
 8005e60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2300      	movs	r3, #0
 8005e68:	4630      	mov	r0, r6
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	f7fa fe34 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e70:	4681      	mov	r9, r0
 8005e72:	b168      	cbz	r0, 8005e90 <_dtoa_r+0xc8>
 8005e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e76:	2301      	movs	r3, #1
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8524 	beq.w	80068ca <_dtoa_r+0xb02>
 8005e82:	4b9a      	ldr	r3, [pc, #616]	; (80060ec <_dtoa_r+0x324>)
 8005e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e86:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	f000 bd28 	b.w	80068e0 <_dtoa_r+0xb18>
 8005e90:	aa14      	add	r2, sp, #80	; 0x50
 8005e92:	a915      	add	r1, sp, #84	; 0x54
 8005e94:	ec47 6b10 	vmov	d0, r6, r7
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f001 f9d8 	bl	800724e <__d2b>
 8005e9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ea2:	9004      	str	r0, [sp, #16]
 8005ea4:	2d00      	cmp	r5, #0
 8005ea6:	d07c      	beq.n	8005fa2 <_dtoa_r+0x1da>
 8005ea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005eac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005eb0:	46b2      	mov	sl, r6
 8005eb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005eb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005eba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	4b8b      	ldr	r3, [pc, #556]	; (80060f0 <_dtoa_r+0x328>)
 8005ec2:	4650      	mov	r0, sl
 8005ec4:	4659      	mov	r1, fp
 8005ec6:	f7fa f9e7 	bl	8000298 <__aeabi_dsub>
 8005eca:	a381      	add	r3, pc, #516	; (adr r3, 80060d0 <_dtoa_r+0x308>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa fb9a 	bl	8000608 <__aeabi_dmul>
 8005ed4:	a380      	add	r3, pc, #512	; (adr r3, 80060d8 <_dtoa_r+0x310>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa f9df 	bl	800029c <__adddf3>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	460f      	mov	r7, r1
 8005ee4:	f7fa fb26 	bl	8000534 <__aeabi_i2d>
 8005ee8:	a37d      	add	r3, pc, #500	; (adr r3, 80060e0 <_dtoa_r+0x318>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fb8b 	bl	8000608 <__aeabi_dmul>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	4639      	mov	r1, r7
 8005efa:	f7fa f9cf 	bl	800029c <__adddf3>
 8005efe:	4606      	mov	r6, r0
 8005f00:	460f      	mov	r7, r1
 8005f02:	f7fa fe31 	bl	8000b68 <__aeabi_d2iz>
 8005f06:	2200      	movs	r2, #0
 8005f08:	4682      	mov	sl, r0
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa fdec 	bl	8000aec <__aeabi_dcmplt>
 8005f14:	b148      	cbz	r0, 8005f2a <_dtoa_r+0x162>
 8005f16:	4650      	mov	r0, sl
 8005f18:	f7fa fb0c 	bl	8000534 <__aeabi_i2d>
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	f7fa fdda 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f24:	b908      	cbnz	r0, 8005f2a <_dtoa_r+0x162>
 8005f26:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f2a:	f1ba 0f16 	cmp.w	sl, #22
 8005f2e:	d859      	bhi.n	8005fe4 <_dtoa_r+0x21c>
 8005f30:	4970      	ldr	r1, [pc, #448]	; (80060f4 <_dtoa_r+0x32c>)
 8005f32:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f3e:	f7fa fdf3 	bl	8000b28 <__aeabi_dcmpgt>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d050      	beq.n	8005fe8 <_dtoa_r+0x220>
 8005f46:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f50:	1b5d      	subs	r5, r3, r5
 8005f52:	f1b5 0801 	subs.w	r8, r5, #1
 8005f56:	bf49      	itett	mi
 8005f58:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f5c:	2300      	movpl	r3, #0
 8005f5e:	9305      	strmi	r3, [sp, #20]
 8005f60:	f04f 0800 	movmi.w	r8, #0
 8005f64:	bf58      	it	pl
 8005f66:	9305      	strpl	r3, [sp, #20]
 8005f68:	f1ba 0f00 	cmp.w	sl, #0
 8005f6c:	db3e      	blt.n	8005fec <_dtoa_r+0x224>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	44d0      	add	r8, sl
 8005f72:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005f76:	9307      	str	r3, [sp, #28]
 8005f78:	9b06      	ldr	r3, [sp, #24]
 8005f7a:	2b09      	cmp	r3, #9
 8005f7c:	f200 8090 	bhi.w	80060a0 <_dtoa_r+0x2d8>
 8005f80:	2b05      	cmp	r3, #5
 8005f82:	bfc4      	itt	gt
 8005f84:	3b04      	subgt	r3, #4
 8005f86:	9306      	strgt	r3, [sp, #24]
 8005f88:	9b06      	ldr	r3, [sp, #24]
 8005f8a:	f1a3 0302 	sub.w	r3, r3, #2
 8005f8e:	bfcc      	ite	gt
 8005f90:	2500      	movgt	r5, #0
 8005f92:	2501      	movle	r5, #1
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	f200 808f 	bhi.w	80060b8 <_dtoa_r+0x2f0>
 8005f9a:	e8df f003 	tbb	[pc, r3]
 8005f9e:	7f7d      	.short	0x7f7d
 8005fa0:	7131      	.short	0x7131
 8005fa2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005fa6:	441d      	add	r5, r3
 8005fa8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005fac:	2820      	cmp	r0, #32
 8005fae:	dd13      	ble.n	8005fd8 <_dtoa_r+0x210>
 8005fb0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005fb4:	9b00      	ldr	r3, [sp, #0]
 8005fb6:	fa08 f800 	lsl.w	r8, r8, r0
 8005fba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005fbe:	fa23 f000 	lsr.w	r0, r3, r0
 8005fc2:	ea48 0000 	orr.w	r0, r8, r0
 8005fc6:	f7fa faa5 	bl	8000514 <__aeabi_ui2d>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4682      	mov	sl, r0
 8005fce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005fd2:	3d01      	subs	r5, #1
 8005fd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005fd6:	e772      	b.n	8005ebe <_dtoa_r+0xf6>
 8005fd8:	9b00      	ldr	r3, [sp, #0]
 8005fda:	f1c0 0020 	rsb	r0, r0, #32
 8005fde:	fa03 f000 	lsl.w	r0, r3, r0
 8005fe2:	e7f0      	b.n	8005fc6 <_dtoa_r+0x1fe>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e7b1      	b.n	8005f4c <_dtoa_r+0x184>
 8005fe8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005fea:	e7b0      	b.n	8005f4e <_dtoa_r+0x186>
 8005fec:	9b05      	ldr	r3, [sp, #20]
 8005fee:	eba3 030a 	sub.w	r3, r3, sl
 8005ff2:	9305      	str	r3, [sp, #20]
 8005ff4:	f1ca 0300 	rsb	r3, sl, #0
 8005ff8:	9307      	str	r3, [sp, #28]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8005ffe:	e7bb      	b.n	8005f78 <_dtoa_r+0x1b0>
 8006000:	2301      	movs	r3, #1
 8006002:	930a      	str	r3, [sp, #40]	; 0x28
 8006004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006006:	2b00      	cmp	r3, #0
 8006008:	dd59      	ble.n	80060be <_dtoa_r+0x2f6>
 800600a:	9302      	str	r3, [sp, #8]
 800600c:	4699      	mov	r9, r3
 800600e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006010:	2200      	movs	r2, #0
 8006012:	6072      	str	r2, [r6, #4]
 8006014:	2204      	movs	r2, #4
 8006016:	f102 0014 	add.w	r0, r2, #20
 800601a:	4298      	cmp	r0, r3
 800601c:	6871      	ldr	r1, [r6, #4]
 800601e:	d953      	bls.n	80060c8 <_dtoa_r+0x300>
 8006020:	4620      	mov	r0, r4
 8006022:	f000 fe88 	bl	8006d36 <_Balloc>
 8006026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006028:	6030      	str	r0, [r6, #0]
 800602a:	f1b9 0f0e 	cmp.w	r9, #14
 800602e:	f8d3 b000 	ldr.w	fp, [r3]
 8006032:	f200 80e6 	bhi.w	8006202 <_dtoa_r+0x43a>
 8006036:	2d00      	cmp	r5, #0
 8006038:	f000 80e3 	beq.w	8006202 <_dtoa_r+0x43a>
 800603c:	ed9d 7b00 	vldr	d7, [sp]
 8006040:	f1ba 0f00 	cmp.w	sl, #0
 8006044:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006048:	dd74      	ble.n	8006134 <_dtoa_r+0x36c>
 800604a:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <_dtoa_r+0x32c>)
 800604c:	f00a 030f 	and.w	r3, sl, #15
 8006050:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006054:	ed93 7b00 	vldr	d7, [r3]
 8006058:	ea4f 162a 	mov.w	r6, sl, asr #4
 800605c:	06f0      	lsls	r0, r6, #27
 800605e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006062:	d565      	bpl.n	8006130 <_dtoa_r+0x368>
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <_dtoa_r+0x330>)
 8006066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800606a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800606e:	f7fa fbf5 	bl	800085c <__aeabi_ddiv>
 8006072:	e9cd 0100 	strd	r0, r1, [sp]
 8006076:	f006 060f 	and.w	r6, r6, #15
 800607a:	2503      	movs	r5, #3
 800607c:	4f1e      	ldr	r7, [pc, #120]	; (80060f8 <_dtoa_r+0x330>)
 800607e:	e04c      	b.n	800611a <_dtoa_r+0x352>
 8006080:	2301      	movs	r3, #1
 8006082:	930a      	str	r3, [sp, #40]	; 0x28
 8006084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006086:	4453      	add	r3, sl
 8006088:	f103 0901 	add.w	r9, r3, #1
 800608c:	9302      	str	r3, [sp, #8]
 800608e:	464b      	mov	r3, r9
 8006090:	2b01      	cmp	r3, #1
 8006092:	bfb8      	it	lt
 8006094:	2301      	movlt	r3, #1
 8006096:	e7ba      	b.n	800600e <_dtoa_r+0x246>
 8006098:	2300      	movs	r3, #0
 800609a:	e7b2      	b.n	8006002 <_dtoa_r+0x23a>
 800609c:	2300      	movs	r3, #0
 800609e:	e7f0      	b.n	8006082 <_dtoa_r+0x2ba>
 80060a0:	2501      	movs	r5, #1
 80060a2:	2300      	movs	r3, #0
 80060a4:	9306      	str	r3, [sp, #24]
 80060a6:	950a      	str	r5, [sp, #40]	; 0x28
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ac:	9302      	str	r3, [sp, #8]
 80060ae:	4699      	mov	r9, r3
 80060b0:	2200      	movs	r2, #0
 80060b2:	2312      	movs	r3, #18
 80060b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80060b6:	e7aa      	b.n	800600e <_dtoa_r+0x246>
 80060b8:	2301      	movs	r3, #1
 80060ba:	930a      	str	r3, [sp, #40]	; 0x28
 80060bc:	e7f4      	b.n	80060a8 <_dtoa_r+0x2e0>
 80060be:	2301      	movs	r3, #1
 80060c0:	9302      	str	r3, [sp, #8]
 80060c2:	4699      	mov	r9, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	e7f5      	b.n	80060b4 <_dtoa_r+0x2ec>
 80060c8:	3101      	adds	r1, #1
 80060ca:	6071      	str	r1, [r6, #4]
 80060cc:	0052      	lsls	r2, r2, #1
 80060ce:	e7a2      	b.n	8006016 <_dtoa_r+0x24e>
 80060d0:	636f4361 	.word	0x636f4361
 80060d4:	3fd287a7 	.word	0x3fd287a7
 80060d8:	8b60c8b3 	.word	0x8b60c8b3
 80060dc:	3fc68a28 	.word	0x3fc68a28
 80060e0:	509f79fb 	.word	0x509f79fb
 80060e4:	3fd34413 	.word	0x3fd34413
 80060e8:	7ff00000 	.word	0x7ff00000
 80060ec:	080096b5 	.word	0x080096b5
 80060f0:	3ff80000 	.word	0x3ff80000
 80060f4:	08009770 	.word	0x08009770
 80060f8:	08009748 	.word	0x08009748
 80060fc:	080096e1 	.word	0x080096e1
 8006100:	07f1      	lsls	r1, r6, #31
 8006102:	d508      	bpl.n	8006116 <_dtoa_r+0x34e>
 8006104:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800610c:	f7fa fa7c 	bl	8000608 <__aeabi_dmul>
 8006110:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006114:	3501      	adds	r5, #1
 8006116:	1076      	asrs	r6, r6, #1
 8006118:	3708      	adds	r7, #8
 800611a:	2e00      	cmp	r6, #0
 800611c:	d1f0      	bne.n	8006100 <_dtoa_r+0x338>
 800611e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006122:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006126:	f7fa fb99 	bl	800085c <__aeabi_ddiv>
 800612a:	e9cd 0100 	strd	r0, r1, [sp]
 800612e:	e01a      	b.n	8006166 <_dtoa_r+0x39e>
 8006130:	2502      	movs	r5, #2
 8006132:	e7a3      	b.n	800607c <_dtoa_r+0x2b4>
 8006134:	f000 80a0 	beq.w	8006278 <_dtoa_r+0x4b0>
 8006138:	f1ca 0600 	rsb	r6, sl, #0
 800613c:	4b9f      	ldr	r3, [pc, #636]	; (80063bc <_dtoa_r+0x5f4>)
 800613e:	4fa0      	ldr	r7, [pc, #640]	; (80063c0 <_dtoa_r+0x5f8>)
 8006140:	f006 020f 	and.w	r2, r6, #15
 8006144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006150:	f7fa fa5a 	bl	8000608 <__aeabi_dmul>
 8006154:	e9cd 0100 	strd	r0, r1, [sp]
 8006158:	1136      	asrs	r6, r6, #4
 800615a:	2300      	movs	r3, #0
 800615c:	2502      	movs	r5, #2
 800615e:	2e00      	cmp	r6, #0
 8006160:	d17f      	bne.n	8006262 <_dtoa_r+0x49a>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e1      	bne.n	800612a <_dtoa_r+0x362>
 8006166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8087 	beq.w	800627c <_dtoa_r+0x4b4>
 800616e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006172:	2200      	movs	r2, #0
 8006174:	4b93      	ldr	r3, [pc, #588]	; (80063c4 <_dtoa_r+0x5fc>)
 8006176:	4630      	mov	r0, r6
 8006178:	4639      	mov	r1, r7
 800617a:	f7fa fcb7 	bl	8000aec <__aeabi_dcmplt>
 800617e:	2800      	cmp	r0, #0
 8006180:	d07c      	beq.n	800627c <_dtoa_r+0x4b4>
 8006182:	f1b9 0f00 	cmp.w	r9, #0
 8006186:	d079      	beq.n	800627c <_dtoa_r+0x4b4>
 8006188:	9b02      	ldr	r3, [sp, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	dd35      	ble.n	80061fa <_dtoa_r+0x432>
 800618e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006192:	9308      	str	r3, [sp, #32]
 8006194:	4639      	mov	r1, r7
 8006196:	2200      	movs	r2, #0
 8006198:	4b8b      	ldr	r3, [pc, #556]	; (80063c8 <_dtoa_r+0x600>)
 800619a:	4630      	mov	r0, r6
 800619c:	f7fa fa34 	bl	8000608 <__aeabi_dmul>
 80061a0:	e9cd 0100 	strd	r0, r1, [sp]
 80061a4:	9f02      	ldr	r7, [sp, #8]
 80061a6:	3501      	adds	r5, #1
 80061a8:	4628      	mov	r0, r5
 80061aa:	f7fa f9c3 	bl	8000534 <__aeabi_i2d>
 80061ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061b2:	f7fa fa29 	bl	8000608 <__aeabi_dmul>
 80061b6:	2200      	movs	r2, #0
 80061b8:	4b84      	ldr	r3, [pc, #528]	; (80063cc <_dtoa_r+0x604>)
 80061ba:	f7fa f86f 	bl	800029c <__adddf3>
 80061be:	4605      	mov	r5, r0
 80061c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80061c4:	2f00      	cmp	r7, #0
 80061c6:	d15d      	bne.n	8006284 <_dtoa_r+0x4bc>
 80061c8:	2200      	movs	r2, #0
 80061ca:	4b81      	ldr	r3, [pc, #516]	; (80063d0 <_dtoa_r+0x608>)
 80061cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061d0:	f7fa f862 	bl	8000298 <__aeabi_dsub>
 80061d4:	462a      	mov	r2, r5
 80061d6:	4633      	mov	r3, r6
 80061d8:	e9cd 0100 	strd	r0, r1, [sp]
 80061dc:	f7fa fca4 	bl	8000b28 <__aeabi_dcmpgt>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f040 8288 	bne.w	80066f6 <_dtoa_r+0x92e>
 80061e6:	462a      	mov	r2, r5
 80061e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80061ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061f0:	f7fa fc7c 	bl	8000aec <__aeabi_dcmplt>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f040 827c 	bne.w	80066f2 <_dtoa_r+0x92a>
 80061fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061fe:	e9cd 2300 	strd	r2, r3, [sp]
 8006202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006204:	2b00      	cmp	r3, #0
 8006206:	f2c0 8150 	blt.w	80064aa <_dtoa_r+0x6e2>
 800620a:	f1ba 0f0e 	cmp.w	sl, #14
 800620e:	f300 814c 	bgt.w	80064aa <_dtoa_r+0x6e2>
 8006212:	4b6a      	ldr	r3, [pc, #424]	; (80063bc <_dtoa_r+0x5f4>)
 8006214:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006218:	ed93 7b00 	vldr	d7, [r3]
 800621c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800621e:	2b00      	cmp	r3, #0
 8006220:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006224:	f280 80d8 	bge.w	80063d8 <_dtoa_r+0x610>
 8006228:	f1b9 0f00 	cmp.w	r9, #0
 800622c:	f300 80d4 	bgt.w	80063d8 <_dtoa_r+0x610>
 8006230:	f040 825e 	bne.w	80066f0 <_dtoa_r+0x928>
 8006234:	2200      	movs	r2, #0
 8006236:	4b66      	ldr	r3, [pc, #408]	; (80063d0 <_dtoa_r+0x608>)
 8006238:	ec51 0b17 	vmov	r0, r1, d7
 800623c:	f7fa f9e4 	bl	8000608 <__aeabi_dmul>
 8006240:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006244:	f7fa fc66 	bl	8000b14 <__aeabi_dcmpge>
 8006248:	464f      	mov	r7, r9
 800624a:	464e      	mov	r6, r9
 800624c:	2800      	cmp	r0, #0
 800624e:	f040 8234 	bne.w	80066ba <_dtoa_r+0x8f2>
 8006252:	2331      	movs	r3, #49	; 0x31
 8006254:	f10b 0501 	add.w	r5, fp, #1
 8006258:	f88b 3000 	strb.w	r3, [fp]
 800625c:	f10a 0a01 	add.w	sl, sl, #1
 8006260:	e22f      	b.n	80066c2 <_dtoa_r+0x8fa>
 8006262:	07f2      	lsls	r2, r6, #31
 8006264:	d505      	bpl.n	8006272 <_dtoa_r+0x4aa>
 8006266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626a:	f7fa f9cd 	bl	8000608 <__aeabi_dmul>
 800626e:	3501      	adds	r5, #1
 8006270:	2301      	movs	r3, #1
 8006272:	1076      	asrs	r6, r6, #1
 8006274:	3708      	adds	r7, #8
 8006276:	e772      	b.n	800615e <_dtoa_r+0x396>
 8006278:	2502      	movs	r5, #2
 800627a:	e774      	b.n	8006166 <_dtoa_r+0x39e>
 800627c:	f8cd a020 	str.w	sl, [sp, #32]
 8006280:	464f      	mov	r7, r9
 8006282:	e791      	b.n	80061a8 <_dtoa_r+0x3e0>
 8006284:	4b4d      	ldr	r3, [pc, #308]	; (80063bc <_dtoa_r+0x5f4>)
 8006286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800628a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800628e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006290:	2b00      	cmp	r3, #0
 8006292:	d047      	beq.n	8006324 <_dtoa_r+0x55c>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	2000      	movs	r0, #0
 800629a:	494e      	ldr	r1, [pc, #312]	; (80063d4 <_dtoa_r+0x60c>)
 800629c:	f7fa fade 	bl	800085c <__aeabi_ddiv>
 80062a0:	462a      	mov	r2, r5
 80062a2:	4633      	mov	r3, r6
 80062a4:	f7f9 fff8 	bl	8000298 <__aeabi_dsub>
 80062a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062ac:	465d      	mov	r5, fp
 80062ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062b2:	f7fa fc59 	bl	8000b68 <__aeabi_d2iz>
 80062b6:	4606      	mov	r6, r0
 80062b8:	f7fa f93c 	bl	8000534 <__aeabi_i2d>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062c4:	f7f9 ffe8 	bl	8000298 <__aeabi_dsub>
 80062c8:	3630      	adds	r6, #48	; 0x30
 80062ca:	f805 6b01 	strb.w	r6, [r5], #1
 80062ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062d2:	e9cd 0100 	strd	r0, r1, [sp]
 80062d6:	f7fa fc09 	bl	8000aec <__aeabi_dcmplt>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d163      	bne.n	80063a6 <_dtoa_r+0x5de>
 80062de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062e2:	2000      	movs	r0, #0
 80062e4:	4937      	ldr	r1, [pc, #220]	; (80063c4 <_dtoa_r+0x5fc>)
 80062e6:	f7f9 ffd7 	bl	8000298 <__aeabi_dsub>
 80062ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062ee:	f7fa fbfd 	bl	8000aec <__aeabi_dcmplt>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	f040 80b7 	bne.w	8006466 <_dtoa_r+0x69e>
 80062f8:	eba5 030b 	sub.w	r3, r5, fp
 80062fc:	429f      	cmp	r7, r3
 80062fe:	f77f af7c 	ble.w	80061fa <_dtoa_r+0x432>
 8006302:	2200      	movs	r2, #0
 8006304:	4b30      	ldr	r3, [pc, #192]	; (80063c8 <_dtoa_r+0x600>)
 8006306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800630a:	f7fa f97d 	bl	8000608 <__aeabi_dmul>
 800630e:	2200      	movs	r2, #0
 8006310:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006314:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <_dtoa_r+0x600>)
 8006316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800631a:	f7fa f975 	bl	8000608 <__aeabi_dmul>
 800631e:	e9cd 0100 	strd	r0, r1, [sp]
 8006322:	e7c4      	b.n	80062ae <_dtoa_r+0x4e6>
 8006324:	462a      	mov	r2, r5
 8006326:	4633      	mov	r3, r6
 8006328:	f7fa f96e 	bl	8000608 <__aeabi_dmul>
 800632c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006330:	eb0b 0507 	add.w	r5, fp, r7
 8006334:	465e      	mov	r6, fp
 8006336:	e9dd 0100 	ldrd	r0, r1, [sp]
 800633a:	f7fa fc15 	bl	8000b68 <__aeabi_d2iz>
 800633e:	4607      	mov	r7, r0
 8006340:	f7fa f8f8 	bl	8000534 <__aeabi_i2d>
 8006344:	3730      	adds	r7, #48	; 0x30
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800634e:	f7f9 ffa3 	bl	8000298 <__aeabi_dsub>
 8006352:	f806 7b01 	strb.w	r7, [r6], #1
 8006356:	42ae      	cmp	r6, r5
 8006358:	e9cd 0100 	strd	r0, r1, [sp]
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	d126      	bne.n	80063b0 <_dtoa_r+0x5e8>
 8006362:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <_dtoa_r+0x60c>)
 8006364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006368:	f7f9 ff98 	bl	800029c <__adddf3>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006374:	f7fa fbd8 	bl	8000b28 <__aeabi_dcmpgt>
 8006378:	2800      	cmp	r0, #0
 800637a:	d174      	bne.n	8006466 <_dtoa_r+0x69e>
 800637c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006380:	2000      	movs	r0, #0
 8006382:	4914      	ldr	r1, [pc, #80]	; (80063d4 <_dtoa_r+0x60c>)
 8006384:	f7f9 ff88 	bl	8000298 <__aeabi_dsub>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006390:	f7fa fbac 	bl	8000aec <__aeabi_dcmplt>
 8006394:	2800      	cmp	r0, #0
 8006396:	f43f af30 	beq.w	80061fa <_dtoa_r+0x432>
 800639a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800639e:	2b30      	cmp	r3, #48	; 0x30
 80063a0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80063a4:	d002      	beq.n	80063ac <_dtoa_r+0x5e4>
 80063a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80063aa:	e04a      	b.n	8006442 <_dtoa_r+0x67a>
 80063ac:	4615      	mov	r5, r2
 80063ae:	e7f4      	b.n	800639a <_dtoa_r+0x5d2>
 80063b0:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <_dtoa_r+0x600>)
 80063b2:	f7fa f929 	bl	8000608 <__aeabi_dmul>
 80063b6:	e9cd 0100 	strd	r0, r1, [sp]
 80063ba:	e7bc      	b.n	8006336 <_dtoa_r+0x56e>
 80063bc:	08009770 	.word	0x08009770
 80063c0:	08009748 	.word	0x08009748
 80063c4:	3ff00000 	.word	0x3ff00000
 80063c8:	40240000 	.word	0x40240000
 80063cc:	401c0000 	.word	0x401c0000
 80063d0:	40140000 	.word	0x40140000
 80063d4:	3fe00000 	.word	0x3fe00000
 80063d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80063dc:	465d      	mov	r5, fp
 80063de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063e2:	4630      	mov	r0, r6
 80063e4:	4639      	mov	r1, r7
 80063e6:	f7fa fa39 	bl	800085c <__aeabi_ddiv>
 80063ea:	f7fa fbbd 	bl	8000b68 <__aeabi_d2iz>
 80063ee:	4680      	mov	r8, r0
 80063f0:	f7fa f8a0 	bl	8000534 <__aeabi_i2d>
 80063f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063f8:	f7fa f906 	bl	8000608 <__aeabi_dmul>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006408:	f7f9 ff46 	bl	8000298 <__aeabi_dsub>
 800640c:	f805 6b01 	strb.w	r6, [r5], #1
 8006410:	eba5 060b 	sub.w	r6, r5, fp
 8006414:	45b1      	cmp	r9, r6
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	d139      	bne.n	8006490 <_dtoa_r+0x6c8>
 800641c:	f7f9 ff3e 	bl	800029c <__adddf3>
 8006420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006424:	4606      	mov	r6, r0
 8006426:	460f      	mov	r7, r1
 8006428:	f7fa fb7e 	bl	8000b28 <__aeabi_dcmpgt>
 800642c:	b9c8      	cbnz	r0, 8006462 <_dtoa_r+0x69a>
 800642e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006432:	4630      	mov	r0, r6
 8006434:	4639      	mov	r1, r7
 8006436:	f7fa fb4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800643a:	b110      	cbz	r0, 8006442 <_dtoa_r+0x67a>
 800643c:	f018 0f01 	tst.w	r8, #1
 8006440:	d10f      	bne.n	8006462 <_dtoa_r+0x69a>
 8006442:	9904      	ldr	r1, [sp, #16]
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fcaa 	bl	8006d9e <_Bfree>
 800644a:	2300      	movs	r3, #0
 800644c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800644e:	702b      	strb	r3, [r5, #0]
 8006450:	f10a 0301 	add.w	r3, sl, #1
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8241 	beq.w	80068e0 <_dtoa_r+0xb18>
 800645e:	601d      	str	r5, [r3, #0]
 8006460:	e23e      	b.n	80068e0 <_dtoa_r+0xb18>
 8006462:	f8cd a020 	str.w	sl, [sp, #32]
 8006466:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800646a:	2a39      	cmp	r2, #57	; 0x39
 800646c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006470:	d108      	bne.n	8006484 <_dtoa_r+0x6bc>
 8006472:	459b      	cmp	fp, r3
 8006474:	d10a      	bne.n	800648c <_dtoa_r+0x6c4>
 8006476:	9b08      	ldr	r3, [sp, #32]
 8006478:	3301      	adds	r3, #1
 800647a:	9308      	str	r3, [sp, #32]
 800647c:	2330      	movs	r3, #48	; 0x30
 800647e:	f88b 3000 	strb.w	r3, [fp]
 8006482:	465b      	mov	r3, fp
 8006484:	781a      	ldrb	r2, [r3, #0]
 8006486:	3201      	adds	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e78c      	b.n	80063a6 <_dtoa_r+0x5de>
 800648c:	461d      	mov	r5, r3
 800648e:	e7ea      	b.n	8006466 <_dtoa_r+0x69e>
 8006490:	2200      	movs	r2, #0
 8006492:	4b9b      	ldr	r3, [pc, #620]	; (8006700 <_dtoa_r+0x938>)
 8006494:	f7fa f8b8 	bl	8000608 <__aeabi_dmul>
 8006498:	2200      	movs	r2, #0
 800649a:	2300      	movs	r3, #0
 800649c:	4606      	mov	r6, r0
 800649e:	460f      	mov	r7, r1
 80064a0:	f7fa fb1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d09a      	beq.n	80063de <_dtoa_r+0x616>
 80064a8:	e7cb      	b.n	8006442 <_dtoa_r+0x67a>
 80064aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ac:	2a00      	cmp	r2, #0
 80064ae:	f000 808b 	beq.w	80065c8 <_dtoa_r+0x800>
 80064b2:	9a06      	ldr	r2, [sp, #24]
 80064b4:	2a01      	cmp	r2, #1
 80064b6:	dc6e      	bgt.n	8006596 <_dtoa_r+0x7ce>
 80064b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	d067      	beq.n	800658e <_dtoa_r+0x7c6>
 80064be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064c2:	9f07      	ldr	r7, [sp, #28]
 80064c4:	9d05      	ldr	r5, [sp, #20]
 80064c6:	9a05      	ldr	r2, [sp, #20]
 80064c8:	2101      	movs	r1, #1
 80064ca:	441a      	add	r2, r3
 80064cc:	4620      	mov	r0, r4
 80064ce:	9205      	str	r2, [sp, #20]
 80064d0:	4498      	add	r8, r3
 80064d2:	f000 fd04 	bl	8006ede <__i2b>
 80064d6:	4606      	mov	r6, r0
 80064d8:	2d00      	cmp	r5, #0
 80064da:	dd0c      	ble.n	80064f6 <_dtoa_r+0x72e>
 80064dc:	f1b8 0f00 	cmp.w	r8, #0
 80064e0:	dd09      	ble.n	80064f6 <_dtoa_r+0x72e>
 80064e2:	4545      	cmp	r5, r8
 80064e4:	9a05      	ldr	r2, [sp, #20]
 80064e6:	462b      	mov	r3, r5
 80064e8:	bfa8      	it	ge
 80064ea:	4643      	movge	r3, r8
 80064ec:	1ad2      	subs	r2, r2, r3
 80064ee:	9205      	str	r2, [sp, #20]
 80064f0:	1aed      	subs	r5, r5, r3
 80064f2:	eba8 0803 	sub.w	r8, r8, r3
 80064f6:	9b07      	ldr	r3, [sp, #28]
 80064f8:	b1eb      	cbz	r3, 8006536 <_dtoa_r+0x76e>
 80064fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d067      	beq.n	80065d0 <_dtoa_r+0x808>
 8006500:	b18f      	cbz	r7, 8006526 <_dtoa_r+0x75e>
 8006502:	4631      	mov	r1, r6
 8006504:	463a      	mov	r2, r7
 8006506:	4620      	mov	r0, r4
 8006508:	f000 fd88 	bl	800701c <__pow5mult>
 800650c:	9a04      	ldr	r2, [sp, #16]
 800650e:	4601      	mov	r1, r0
 8006510:	4606      	mov	r6, r0
 8006512:	4620      	mov	r0, r4
 8006514:	f000 fcec 	bl	8006ef0 <__multiply>
 8006518:	9904      	ldr	r1, [sp, #16]
 800651a:	9008      	str	r0, [sp, #32]
 800651c:	4620      	mov	r0, r4
 800651e:	f000 fc3e 	bl	8006d9e <_Bfree>
 8006522:	9b08      	ldr	r3, [sp, #32]
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	9b07      	ldr	r3, [sp, #28]
 8006528:	1bda      	subs	r2, r3, r7
 800652a:	d004      	beq.n	8006536 <_dtoa_r+0x76e>
 800652c:	9904      	ldr	r1, [sp, #16]
 800652e:	4620      	mov	r0, r4
 8006530:	f000 fd74 	bl	800701c <__pow5mult>
 8006534:	9004      	str	r0, [sp, #16]
 8006536:	2101      	movs	r1, #1
 8006538:	4620      	mov	r0, r4
 800653a:	f000 fcd0 	bl	8006ede <__i2b>
 800653e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006540:	4607      	mov	r7, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 81d0 	beq.w	80068e8 <_dtoa_r+0xb20>
 8006548:	461a      	mov	r2, r3
 800654a:	4601      	mov	r1, r0
 800654c:	4620      	mov	r0, r4
 800654e:	f000 fd65 	bl	800701c <__pow5mult>
 8006552:	9b06      	ldr	r3, [sp, #24]
 8006554:	2b01      	cmp	r3, #1
 8006556:	4607      	mov	r7, r0
 8006558:	dc40      	bgt.n	80065dc <_dtoa_r+0x814>
 800655a:	9b00      	ldr	r3, [sp, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d139      	bne.n	80065d4 <_dtoa_r+0x80c>
 8006560:	9b01      	ldr	r3, [sp, #4]
 8006562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006566:	2b00      	cmp	r3, #0
 8006568:	d136      	bne.n	80065d8 <_dtoa_r+0x810>
 800656a:	9b01      	ldr	r3, [sp, #4]
 800656c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006570:	0d1b      	lsrs	r3, r3, #20
 8006572:	051b      	lsls	r3, r3, #20
 8006574:	b12b      	cbz	r3, 8006582 <_dtoa_r+0x7ba>
 8006576:	9b05      	ldr	r3, [sp, #20]
 8006578:	3301      	adds	r3, #1
 800657a:	9305      	str	r3, [sp, #20]
 800657c:	f108 0801 	add.w	r8, r8, #1
 8006580:	2301      	movs	r3, #1
 8006582:	9307      	str	r3, [sp, #28]
 8006584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006586:	2b00      	cmp	r3, #0
 8006588:	d12a      	bne.n	80065e0 <_dtoa_r+0x818>
 800658a:	2001      	movs	r0, #1
 800658c:	e030      	b.n	80065f0 <_dtoa_r+0x828>
 800658e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006590:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006594:	e795      	b.n	80064c2 <_dtoa_r+0x6fa>
 8006596:	9b07      	ldr	r3, [sp, #28]
 8006598:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800659c:	42bb      	cmp	r3, r7
 800659e:	bfbf      	itttt	lt
 80065a0:	9b07      	ldrlt	r3, [sp, #28]
 80065a2:	9707      	strlt	r7, [sp, #28]
 80065a4:	1afa      	sublt	r2, r7, r3
 80065a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80065a8:	bfbb      	ittet	lt
 80065aa:	189b      	addlt	r3, r3, r2
 80065ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80065ae:	1bdf      	subge	r7, r3, r7
 80065b0:	2700      	movlt	r7, #0
 80065b2:	f1b9 0f00 	cmp.w	r9, #0
 80065b6:	bfb5      	itete	lt
 80065b8:	9b05      	ldrlt	r3, [sp, #20]
 80065ba:	9d05      	ldrge	r5, [sp, #20]
 80065bc:	eba3 0509 	sublt.w	r5, r3, r9
 80065c0:	464b      	movge	r3, r9
 80065c2:	bfb8      	it	lt
 80065c4:	2300      	movlt	r3, #0
 80065c6:	e77e      	b.n	80064c6 <_dtoa_r+0x6fe>
 80065c8:	9f07      	ldr	r7, [sp, #28]
 80065ca:	9d05      	ldr	r5, [sp, #20]
 80065cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80065ce:	e783      	b.n	80064d8 <_dtoa_r+0x710>
 80065d0:	9a07      	ldr	r2, [sp, #28]
 80065d2:	e7ab      	b.n	800652c <_dtoa_r+0x764>
 80065d4:	2300      	movs	r3, #0
 80065d6:	e7d4      	b.n	8006582 <_dtoa_r+0x7ba>
 80065d8:	9b00      	ldr	r3, [sp, #0]
 80065da:	e7d2      	b.n	8006582 <_dtoa_r+0x7ba>
 80065dc:	2300      	movs	r3, #0
 80065de:	9307      	str	r3, [sp, #28]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80065e6:	6918      	ldr	r0, [r3, #16]
 80065e8:	f000 fc2b 	bl	8006e42 <__hi0bits>
 80065ec:	f1c0 0020 	rsb	r0, r0, #32
 80065f0:	4440      	add	r0, r8
 80065f2:	f010 001f 	ands.w	r0, r0, #31
 80065f6:	d047      	beq.n	8006688 <_dtoa_r+0x8c0>
 80065f8:	f1c0 0320 	rsb	r3, r0, #32
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	dd3b      	ble.n	8006678 <_dtoa_r+0x8b0>
 8006600:	9b05      	ldr	r3, [sp, #20]
 8006602:	f1c0 001c 	rsb	r0, r0, #28
 8006606:	4403      	add	r3, r0
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	4405      	add	r5, r0
 800660c:	4480      	add	r8, r0
 800660e:	9b05      	ldr	r3, [sp, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	dd05      	ble.n	8006620 <_dtoa_r+0x858>
 8006614:	461a      	mov	r2, r3
 8006616:	9904      	ldr	r1, [sp, #16]
 8006618:	4620      	mov	r0, r4
 800661a:	f000 fd4d 	bl	80070b8 <__lshift>
 800661e:	9004      	str	r0, [sp, #16]
 8006620:	f1b8 0f00 	cmp.w	r8, #0
 8006624:	dd05      	ble.n	8006632 <_dtoa_r+0x86a>
 8006626:	4639      	mov	r1, r7
 8006628:	4642      	mov	r2, r8
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fd44 	bl	80070b8 <__lshift>
 8006630:	4607      	mov	r7, r0
 8006632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006634:	b353      	cbz	r3, 800668c <_dtoa_r+0x8c4>
 8006636:	4639      	mov	r1, r7
 8006638:	9804      	ldr	r0, [sp, #16]
 800663a:	f000 fd91 	bl	8007160 <__mcmp>
 800663e:	2800      	cmp	r0, #0
 8006640:	da24      	bge.n	800668c <_dtoa_r+0x8c4>
 8006642:	2300      	movs	r3, #0
 8006644:	220a      	movs	r2, #10
 8006646:	9904      	ldr	r1, [sp, #16]
 8006648:	4620      	mov	r0, r4
 800664a:	f000 fbbf 	bl	8006dcc <__multadd>
 800664e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006650:	9004      	str	r0, [sp, #16]
 8006652:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 814d 	beq.w	80068f6 <_dtoa_r+0xb2e>
 800665c:	2300      	movs	r3, #0
 800665e:	4631      	mov	r1, r6
 8006660:	220a      	movs	r2, #10
 8006662:	4620      	mov	r0, r4
 8006664:	f000 fbb2 	bl	8006dcc <__multadd>
 8006668:	9b02      	ldr	r3, [sp, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	4606      	mov	r6, r0
 800666e:	dc4f      	bgt.n	8006710 <_dtoa_r+0x948>
 8006670:	9b06      	ldr	r3, [sp, #24]
 8006672:	2b02      	cmp	r3, #2
 8006674:	dd4c      	ble.n	8006710 <_dtoa_r+0x948>
 8006676:	e011      	b.n	800669c <_dtoa_r+0x8d4>
 8006678:	d0c9      	beq.n	800660e <_dtoa_r+0x846>
 800667a:	9a05      	ldr	r2, [sp, #20]
 800667c:	331c      	adds	r3, #28
 800667e:	441a      	add	r2, r3
 8006680:	9205      	str	r2, [sp, #20]
 8006682:	441d      	add	r5, r3
 8006684:	4498      	add	r8, r3
 8006686:	e7c2      	b.n	800660e <_dtoa_r+0x846>
 8006688:	4603      	mov	r3, r0
 800668a:	e7f6      	b.n	800667a <_dtoa_r+0x8b2>
 800668c:	f1b9 0f00 	cmp.w	r9, #0
 8006690:	dc38      	bgt.n	8006704 <_dtoa_r+0x93c>
 8006692:	9b06      	ldr	r3, [sp, #24]
 8006694:	2b02      	cmp	r3, #2
 8006696:	dd35      	ble.n	8006704 <_dtoa_r+0x93c>
 8006698:	f8cd 9008 	str.w	r9, [sp, #8]
 800669c:	9b02      	ldr	r3, [sp, #8]
 800669e:	b963      	cbnz	r3, 80066ba <_dtoa_r+0x8f2>
 80066a0:	4639      	mov	r1, r7
 80066a2:	2205      	movs	r2, #5
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 fb91 	bl	8006dcc <__multadd>
 80066aa:	4601      	mov	r1, r0
 80066ac:	4607      	mov	r7, r0
 80066ae:	9804      	ldr	r0, [sp, #16]
 80066b0:	f000 fd56 	bl	8007160 <__mcmp>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	f73f adcc 	bgt.w	8006252 <_dtoa_r+0x48a>
 80066ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066bc:	465d      	mov	r5, fp
 80066be:	ea6f 0a03 	mvn.w	sl, r3
 80066c2:	f04f 0900 	mov.w	r9, #0
 80066c6:	4639      	mov	r1, r7
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 fb68 	bl	8006d9e <_Bfree>
 80066ce:	2e00      	cmp	r6, #0
 80066d0:	f43f aeb7 	beq.w	8006442 <_dtoa_r+0x67a>
 80066d4:	f1b9 0f00 	cmp.w	r9, #0
 80066d8:	d005      	beq.n	80066e6 <_dtoa_r+0x91e>
 80066da:	45b1      	cmp	r9, r6
 80066dc:	d003      	beq.n	80066e6 <_dtoa_r+0x91e>
 80066de:	4649      	mov	r1, r9
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 fb5c 	bl	8006d9e <_Bfree>
 80066e6:	4631      	mov	r1, r6
 80066e8:	4620      	mov	r0, r4
 80066ea:	f000 fb58 	bl	8006d9e <_Bfree>
 80066ee:	e6a8      	b.n	8006442 <_dtoa_r+0x67a>
 80066f0:	2700      	movs	r7, #0
 80066f2:	463e      	mov	r6, r7
 80066f4:	e7e1      	b.n	80066ba <_dtoa_r+0x8f2>
 80066f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80066fa:	463e      	mov	r6, r7
 80066fc:	e5a9      	b.n	8006252 <_dtoa_r+0x48a>
 80066fe:	bf00      	nop
 8006700:	40240000 	.word	0x40240000
 8006704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006706:	f8cd 9008 	str.w	r9, [sp, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80fa 	beq.w	8006904 <_dtoa_r+0xb3c>
 8006710:	2d00      	cmp	r5, #0
 8006712:	dd05      	ble.n	8006720 <_dtoa_r+0x958>
 8006714:	4631      	mov	r1, r6
 8006716:	462a      	mov	r2, r5
 8006718:	4620      	mov	r0, r4
 800671a:	f000 fccd 	bl	80070b8 <__lshift>
 800671e:	4606      	mov	r6, r0
 8006720:	9b07      	ldr	r3, [sp, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d04c      	beq.n	80067c0 <_dtoa_r+0x9f8>
 8006726:	6871      	ldr	r1, [r6, #4]
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fb04 	bl	8006d36 <_Balloc>
 800672e:	6932      	ldr	r2, [r6, #16]
 8006730:	3202      	adds	r2, #2
 8006732:	4605      	mov	r5, r0
 8006734:	0092      	lsls	r2, r2, #2
 8006736:	f106 010c 	add.w	r1, r6, #12
 800673a:	300c      	adds	r0, #12
 800673c:	f000 faf0 	bl	8006d20 <memcpy>
 8006740:	2201      	movs	r2, #1
 8006742:	4629      	mov	r1, r5
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fcb7 	bl	80070b8 <__lshift>
 800674a:	9b00      	ldr	r3, [sp, #0]
 800674c:	f8cd b014 	str.w	fp, [sp, #20]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	46b1      	mov	r9, r6
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	4606      	mov	r6, r0
 800675a:	4639      	mov	r1, r7
 800675c:	9804      	ldr	r0, [sp, #16]
 800675e:	f7ff faa7 	bl	8005cb0 <quorem>
 8006762:	4649      	mov	r1, r9
 8006764:	4605      	mov	r5, r0
 8006766:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800676a:	9804      	ldr	r0, [sp, #16]
 800676c:	f000 fcf8 	bl	8007160 <__mcmp>
 8006770:	4632      	mov	r2, r6
 8006772:	9000      	str	r0, [sp, #0]
 8006774:	4639      	mov	r1, r7
 8006776:	4620      	mov	r0, r4
 8006778:	f000 fd0c 	bl	8007194 <__mdiff>
 800677c:	68c3      	ldr	r3, [r0, #12]
 800677e:	4602      	mov	r2, r0
 8006780:	bb03      	cbnz	r3, 80067c4 <_dtoa_r+0x9fc>
 8006782:	4601      	mov	r1, r0
 8006784:	9008      	str	r0, [sp, #32]
 8006786:	9804      	ldr	r0, [sp, #16]
 8006788:	f000 fcea 	bl	8007160 <__mcmp>
 800678c:	9a08      	ldr	r2, [sp, #32]
 800678e:	4603      	mov	r3, r0
 8006790:	4611      	mov	r1, r2
 8006792:	4620      	mov	r0, r4
 8006794:	9308      	str	r3, [sp, #32]
 8006796:	f000 fb02 	bl	8006d9e <_Bfree>
 800679a:	9b08      	ldr	r3, [sp, #32]
 800679c:	b9a3      	cbnz	r3, 80067c8 <_dtoa_r+0xa00>
 800679e:	9a06      	ldr	r2, [sp, #24]
 80067a0:	b992      	cbnz	r2, 80067c8 <_dtoa_r+0xa00>
 80067a2:	9a07      	ldr	r2, [sp, #28]
 80067a4:	b982      	cbnz	r2, 80067c8 <_dtoa_r+0xa00>
 80067a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80067aa:	d029      	beq.n	8006800 <_dtoa_r+0xa38>
 80067ac:	9b00      	ldr	r3, [sp, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	dd01      	ble.n	80067b6 <_dtoa_r+0x9ee>
 80067b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80067b6:	9b05      	ldr	r3, [sp, #20]
 80067b8:	1c5d      	adds	r5, r3, #1
 80067ba:	f883 8000 	strb.w	r8, [r3]
 80067be:	e782      	b.n	80066c6 <_dtoa_r+0x8fe>
 80067c0:	4630      	mov	r0, r6
 80067c2:	e7c2      	b.n	800674a <_dtoa_r+0x982>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e7e3      	b.n	8006790 <_dtoa_r+0x9c8>
 80067c8:	9a00      	ldr	r2, [sp, #0]
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	db04      	blt.n	80067d8 <_dtoa_r+0xa10>
 80067ce:	d125      	bne.n	800681c <_dtoa_r+0xa54>
 80067d0:	9a06      	ldr	r2, [sp, #24]
 80067d2:	bb1a      	cbnz	r2, 800681c <_dtoa_r+0xa54>
 80067d4:	9a07      	ldr	r2, [sp, #28]
 80067d6:	bb0a      	cbnz	r2, 800681c <_dtoa_r+0xa54>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	ddec      	ble.n	80067b6 <_dtoa_r+0x9ee>
 80067dc:	2201      	movs	r2, #1
 80067de:	9904      	ldr	r1, [sp, #16]
 80067e0:	4620      	mov	r0, r4
 80067e2:	f000 fc69 	bl	80070b8 <__lshift>
 80067e6:	4639      	mov	r1, r7
 80067e8:	9004      	str	r0, [sp, #16]
 80067ea:	f000 fcb9 	bl	8007160 <__mcmp>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	dc03      	bgt.n	80067fa <_dtoa_r+0xa32>
 80067f2:	d1e0      	bne.n	80067b6 <_dtoa_r+0x9ee>
 80067f4:	f018 0f01 	tst.w	r8, #1
 80067f8:	d0dd      	beq.n	80067b6 <_dtoa_r+0x9ee>
 80067fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80067fe:	d1d8      	bne.n	80067b2 <_dtoa_r+0x9ea>
 8006800:	9b05      	ldr	r3, [sp, #20]
 8006802:	9a05      	ldr	r2, [sp, #20]
 8006804:	1c5d      	adds	r5, r3, #1
 8006806:	2339      	movs	r3, #57	; 0x39
 8006808:	7013      	strb	r3, [r2, #0]
 800680a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800680e:	2b39      	cmp	r3, #57	; 0x39
 8006810:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006814:	d04f      	beq.n	80068b6 <_dtoa_r+0xaee>
 8006816:	3301      	adds	r3, #1
 8006818:	7013      	strb	r3, [r2, #0]
 800681a:	e754      	b.n	80066c6 <_dtoa_r+0x8fe>
 800681c:	9a05      	ldr	r2, [sp, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f102 0501 	add.w	r5, r2, #1
 8006824:	dd06      	ble.n	8006834 <_dtoa_r+0xa6c>
 8006826:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800682a:	d0e9      	beq.n	8006800 <_dtoa_r+0xa38>
 800682c:	f108 0801 	add.w	r8, r8, #1
 8006830:	9b05      	ldr	r3, [sp, #20]
 8006832:	e7c2      	b.n	80067ba <_dtoa_r+0x9f2>
 8006834:	9a02      	ldr	r2, [sp, #8]
 8006836:	f805 8c01 	strb.w	r8, [r5, #-1]
 800683a:	eba5 030b 	sub.w	r3, r5, fp
 800683e:	4293      	cmp	r3, r2
 8006840:	d021      	beq.n	8006886 <_dtoa_r+0xabe>
 8006842:	2300      	movs	r3, #0
 8006844:	220a      	movs	r2, #10
 8006846:	9904      	ldr	r1, [sp, #16]
 8006848:	4620      	mov	r0, r4
 800684a:	f000 fabf 	bl	8006dcc <__multadd>
 800684e:	45b1      	cmp	r9, r6
 8006850:	9004      	str	r0, [sp, #16]
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	f04f 020a 	mov.w	r2, #10
 800685a:	4649      	mov	r1, r9
 800685c:	4620      	mov	r0, r4
 800685e:	d105      	bne.n	800686c <_dtoa_r+0xaa4>
 8006860:	f000 fab4 	bl	8006dcc <__multadd>
 8006864:	4681      	mov	r9, r0
 8006866:	4606      	mov	r6, r0
 8006868:	9505      	str	r5, [sp, #20]
 800686a:	e776      	b.n	800675a <_dtoa_r+0x992>
 800686c:	f000 faae 	bl	8006dcc <__multadd>
 8006870:	4631      	mov	r1, r6
 8006872:	4681      	mov	r9, r0
 8006874:	2300      	movs	r3, #0
 8006876:	220a      	movs	r2, #10
 8006878:	4620      	mov	r0, r4
 800687a:	f000 faa7 	bl	8006dcc <__multadd>
 800687e:	4606      	mov	r6, r0
 8006880:	e7f2      	b.n	8006868 <_dtoa_r+0xaa0>
 8006882:	f04f 0900 	mov.w	r9, #0
 8006886:	2201      	movs	r2, #1
 8006888:	9904      	ldr	r1, [sp, #16]
 800688a:	4620      	mov	r0, r4
 800688c:	f000 fc14 	bl	80070b8 <__lshift>
 8006890:	4639      	mov	r1, r7
 8006892:	9004      	str	r0, [sp, #16]
 8006894:	f000 fc64 	bl	8007160 <__mcmp>
 8006898:	2800      	cmp	r0, #0
 800689a:	dcb6      	bgt.n	800680a <_dtoa_r+0xa42>
 800689c:	d102      	bne.n	80068a4 <_dtoa_r+0xadc>
 800689e:	f018 0f01 	tst.w	r8, #1
 80068a2:	d1b2      	bne.n	800680a <_dtoa_r+0xa42>
 80068a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068a8:	2b30      	cmp	r3, #48	; 0x30
 80068aa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80068ae:	f47f af0a 	bne.w	80066c6 <_dtoa_r+0x8fe>
 80068b2:	4615      	mov	r5, r2
 80068b4:	e7f6      	b.n	80068a4 <_dtoa_r+0xadc>
 80068b6:	4593      	cmp	fp, r2
 80068b8:	d105      	bne.n	80068c6 <_dtoa_r+0xafe>
 80068ba:	2331      	movs	r3, #49	; 0x31
 80068bc:	f10a 0a01 	add.w	sl, sl, #1
 80068c0:	f88b 3000 	strb.w	r3, [fp]
 80068c4:	e6ff      	b.n	80066c6 <_dtoa_r+0x8fe>
 80068c6:	4615      	mov	r5, r2
 80068c8:	e79f      	b.n	800680a <_dtoa_r+0xa42>
 80068ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006930 <_dtoa_r+0xb68>
 80068ce:	e007      	b.n	80068e0 <_dtoa_r+0xb18>
 80068d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006934 <_dtoa_r+0xb6c>
 80068d6:	b11b      	cbz	r3, 80068e0 <_dtoa_r+0xb18>
 80068d8:	f10b 0308 	add.w	r3, fp, #8
 80068dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	4658      	mov	r0, fp
 80068e2:	b017      	add	sp, #92	; 0x5c
 80068e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e8:	9b06      	ldr	r3, [sp, #24]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	f77f ae35 	ble.w	800655a <_dtoa_r+0x792>
 80068f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f2:	9307      	str	r3, [sp, #28]
 80068f4:	e649      	b.n	800658a <_dtoa_r+0x7c2>
 80068f6:	9b02      	ldr	r3, [sp, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc03      	bgt.n	8006904 <_dtoa_r+0xb3c>
 80068fc:	9b06      	ldr	r3, [sp, #24]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	f73f aecc 	bgt.w	800669c <_dtoa_r+0x8d4>
 8006904:	465d      	mov	r5, fp
 8006906:	4639      	mov	r1, r7
 8006908:	9804      	ldr	r0, [sp, #16]
 800690a:	f7ff f9d1 	bl	8005cb0 <quorem>
 800690e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006912:	f805 8b01 	strb.w	r8, [r5], #1
 8006916:	9a02      	ldr	r2, [sp, #8]
 8006918:	eba5 030b 	sub.w	r3, r5, fp
 800691c:	429a      	cmp	r2, r3
 800691e:	ddb0      	ble.n	8006882 <_dtoa_r+0xaba>
 8006920:	2300      	movs	r3, #0
 8006922:	220a      	movs	r2, #10
 8006924:	9904      	ldr	r1, [sp, #16]
 8006926:	4620      	mov	r0, r4
 8006928:	f000 fa50 	bl	8006dcc <__multadd>
 800692c:	9004      	str	r0, [sp, #16]
 800692e:	e7ea      	b.n	8006906 <_dtoa_r+0xb3e>
 8006930:	080096b4 	.word	0x080096b4
 8006934:	080096d8 	.word	0x080096d8

08006938 <__sflush_r>:
 8006938:	898a      	ldrh	r2, [r1, #12]
 800693a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800693e:	4605      	mov	r5, r0
 8006940:	0710      	lsls	r0, r2, #28
 8006942:	460c      	mov	r4, r1
 8006944:	d458      	bmi.n	80069f8 <__sflush_r+0xc0>
 8006946:	684b      	ldr	r3, [r1, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	dc05      	bgt.n	8006958 <__sflush_r+0x20>
 800694c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	dc02      	bgt.n	8006958 <__sflush_r+0x20>
 8006952:	2000      	movs	r0, #0
 8006954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800695a:	2e00      	cmp	r6, #0
 800695c:	d0f9      	beq.n	8006952 <__sflush_r+0x1a>
 800695e:	2300      	movs	r3, #0
 8006960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006964:	682f      	ldr	r7, [r5, #0]
 8006966:	6a21      	ldr	r1, [r4, #32]
 8006968:	602b      	str	r3, [r5, #0]
 800696a:	d032      	beq.n	80069d2 <__sflush_r+0x9a>
 800696c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	075a      	lsls	r2, r3, #29
 8006972:	d505      	bpl.n	8006980 <__sflush_r+0x48>
 8006974:	6863      	ldr	r3, [r4, #4]
 8006976:	1ac0      	subs	r0, r0, r3
 8006978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800697a:	b10b      	cbz	r3, 8006980 <__sflush_r+0x48>
 800697c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800697e:	1ac0      	subs	r0, r0, r3
 8006980:	2300      	movs	r3, #0
 8006982:	4602      	mov	r2, r0
 8006984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006986:	6a21      	ldr	r1, [r4, #32]
 8006988:	4628      	mov	r0, r5
 800698a:	47b0      	blx	r6
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	d106      	bne.n	80069a0 <__sflush_r+0x68>
 8006992:	6829      	ldr	r1, [r5, #0]
 8006994:	291d      	cmp	r1, #29
 8006996:	d848      	bhi.n	8006a2a <__sflush_r+0xf2>
 8006998:	4a29      	ldr	r2, [pc, #164]	; (8006a40 <__sflush_r+0x108>)
 800699a:	40ca      	lsrs	r2, r1
 800699c:	07d6      	lsls	r6, r2, #31
 800699e:	d544      	bpl.n	8006a2a <__sflush_r+0xf2>
 80069a0:	2200      	movs	r2, #0
 80069a2:	6062      	str	r2, [r4, #4]
 80069a4:	04d9      	lsls	r1, r3, #19
 80069a6:	6922      	ldr	r2, [r4, #16]
 80069a8:	6022      	str	r2, [r4, #0]
 80069aa:	d504      	bpl.n	80069b6 <__sflush_r+0x7e>
 80069ac:	1c42      	adds	r2, r0, #1
 80069ae:	d101      	bne.n	80069b4 <__sflush_r+0x7c>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b903      	cbnz	r3, 80069b6 <__sflush_r+0x7e>
 80069b4:	6560      	str	r0, [r4, #84]	; 0x54
 80069b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069b8:	602f      	str	r7, [r5, #0]
 80069ba:	2900      	cmp	r1, #0
 80069bc:	d0c9      	beq.n	8006952 <__sflush_r+0x1a>
 80069be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069c2:	4299      	cmp	r1, r3
 80069c4:	d002      	beq.n	80069cc <__sflush_r+0x94>
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 fc9e 	bl	8007308 <_free_r>
 80069cc:	2000      	movs	r0, #0
 80069ce:	6360      	str	r0, [r4, #52]	; 0x34
 80069d0:	e7c0      	b.n	8006954 <__sflush_r+0x1c>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4628      	mov	r0, r5
 80069d6:	47b0      	blx	r6
 80069d8:	1c41      	adds	r1, r0, #1
 80069da:	d1c8      	bne.n	800696e <__sflush_r+0x36>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0c5      	beq.n	800696e <__sflush_r+0x36>
 80069e2:	2b1d      	cmp	r3, #29
 80069e4:	d001      	beq.n	80069ea <__sflush_r+0xb2>
 80069e6:	2b16      	cmp	r3, #22
 80069e8:	d101      	bne.n	80069ee <__sflush_r+0xb6>
 80069ea:	602f      	str	r7, [r5, #0]
 80069ec:	e7b1      	b.n	8006952 <__sflush_r+0x1a>
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069f4:	81a3      	strh	r3, [r4, #12]
 80069f6:	e7ad      	b.n	8006954 <__sflush_r+0x1c>
 80069f8:	690f      	ldr	r7, [r1, #16]
 80069fa:	2f00      	cmp	r7, #0
 80069fc:	d0a9      	beq.n	8006952 <__sflush_r+0x1a>
 80069fe:	0793      	lsls	r3, r2, #30
 8006a00:	680e      	ldr	r6, [r1, #0]
 8006a02:	bf08      	it	eq
 8006a04:	694b      	ldreq	r3, [r1, #20]
 8006a06:	600f      	str	r7, [r1, #0]
 8006a08:	bf18      	it	ne
 8006a0a:	2300      	movne	r3, #0
 8006a0c:	eba6 0807 	sub.w	r8, r6, r7
 8006a10:	608b      	str	r3, [r1, #8]
 8006a12:	f1b8 0f00 	cmp.w	r8, #0
 8006a16:	dd9c      	ble.n	8006952 <__sflush_r+0x1a>
 8006a18:	4643      	mov	r3, r8
 8006a1a:	463a      	mov	r2, r7
 8006a1c:	6a21      	ldr	r1, [r4, #32]
 8006a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a20:	4628      	mov	r0, r5
 8006a22:	47b0      	blx	r6
 8006a24:	2800      	cmp	r0, #0
 8006a26:	dc06      	bgt.n	8006a36 <__sflush_r+0xfe>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a34:	e78e      	b.n	8006954 <__sflush_r+0x1c>
 8006a36:	4407      	add	r7, r0
 8006a38:	eba8 0800 	sub.w	r8, r8, r0
 8006a3c:	e7e9      	b.n	8006a12 <__sflush_r+0xda>
 8006a3e:	bf00      	nop
 8006a40:	20400001 	.word	0x20400001

08006a44 <_fflush_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	690b      	ldr	r3, [r1, #16]
 8006a48:	4605      	mov	r5, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	b1db      	cbz	r3, 8006a86 <_fflush_r+0x42>
 8006a4e:	b118      	cbz	r0, 8006a58 <_fflush_r+0x14>
 8006a50:	6983      	ldr	r3, [r0, #24]
 8006a52:	b90b      	cbnz	r3, 8006a58 <_fflush_r+0x14>
 8006a54:	f000 f860 	bl	8006b18 <__sinit>
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <_fflush_r+0x48>)
 8006a5a:	429c      	cmp	r4, r3
 8006a5c:	d109      	bne.n	8006a72 <_fflush_r+0x2e>
 8006a5e:	686c      	ldr	r4, [r5, #4]
 8006a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a64:	b17b      	cbz	r3, 8006a86 <_fflush_r+0x42>
 8006a66:	4621      	mov	r1, r4
 8006a68:	4628      	mov	r0, r5
 8006a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a6e:	f7ff bf63 	b.w	8006938 <__sflush_r>
 8006a72:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <_fflush_r+0x4c>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	d101      	bne.n	8006a7c <_fflush_r+0x38>
 8006a78:	68ac      	ldr	r4, [r5, #8]
 8006a7a:	e7f1      	b.n	8006a60 <_fflush_r+0x1c>
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <_fflush_r+0x50>)
 8006a7e:	429c      	cmp	r4, r3
 8006a80:	bf08      	it	eq
 8006a82:	68ec      	ldreq	r4, [r5, #12]
 8006a84:	e7ec      	b.n	8006a60 <_fflush_r+0x1c>
 8006a86:	2000      	movs	r0, #0
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	08009708 	.word	0x08009708
 8006a90:	08009728 	.word	0x08009728
 8006a94:	080096e8 	.word	0x080096e8

08006a98 <std>:
 8006a98:	2300      	movs	r3, #0
 8006a9a:	b510      	push	{r4, lr}
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006aa2:	6083      	str	r3, [r0, #8]
 8006aa4:	8181      	strh	r1, [r0, #12]
 8006aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8006aa8:	81c2      	strh	r2, [r0, #14]
 8006aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aae:	6183      	str	r3, [r0, #24]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	2208      	movs	r2, #8
 8006ab4:	305c      	adds	r0, #92	; 0x5c
 8006ab6:	f7fe fb5b 	bl	8005170 <memset>
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <std+0x38>)
 8006abc:	6263      	str	r3, [r4, #36]	; 0x24
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <std+0x3c>)
 8006ac0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ac2:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <std+0x40>)
 8006ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ac6:	4b05      	ldr	r3, [pc, #20]	; (8006adc <std+0x44>)
 8006ac8:	6224      	str	r4, [r4, #32]
 8006aca:	6323      	str	r3, [r4, #48]	; 0x30
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	bf00      	nop
 8006ad0:	080076f9 	.word	0x080076f9
 8006ad4:	0800771b 	.word	0x0800771b
 8006ad8:	08007753 	.word	0x08007753
 8006adc:	08007777 	.word	0x08007777

08006ae0 <_cleanup_r>:
 8006ae0:	4901      	ldr	r1, [pc, #4]	; (8006ae8 <_cleanup_r+0x8>)
 8006ae2:	f000 b885 	b.w	8006bf0 <_fwalk_reent>
 8006ae6:	bf00      	nop
 8006ae8:	08006a45 	.word	0x08006a45

08006aec <__sfmoreglue>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	1e4a      	subs	r2, r1, #1
 8006af0:	2568      	movs	r5, #104	; 0x68
 8006af2:	4355      	muls	r5, r2
 8006af4:	460e      	mov	r6, r1
 8006af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006afa:	f000 fc53 	bl	80073a4 <_malloc_r>
 8006afe:	4604      	mov	r4, r0
 8006b00:	b140      	cbz	r0, 8006b14 <__sfmoreglue+0x28>
 8006b02:	2100      	movs	r1, #0
 8006b04:	e9c0 1600 	strd	r1, r6, [r0]
 8006b08:	300c      	adds	r0, #12
 8006b0a:	60a0      	str	r0, [r4, #8]
 8006b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b10:	f7fe fb2e 	bl	8005170 <memset>
 8006b14:	4620      	mov	r0, r4
 8006b16:	bd70      	pop	{r4, r5, r6, pc}

08006b18 <__sinit>:
 8006b18:	6983      	ldr	r3, [r0, #24]
 8006b1a:	b510      	push	{r4, lr}
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	bb33      	cbnz	r3, 8006b6e <__sinit+0x56>
 8006b20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006b24:	6503      	str	r3, [r0, #80]	; 0x50
 8006b26:	4b12      	ldr	r3, [pc, #72]	; (8006b70 <__sinit+0x58>)
 8006b28:	4a12      	ldr	r2, [pc, #72]	; (8006b74 <__sinit+0x5c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6282      	str	r2, [r0, #40]	; 0x28
 8006b2e:	4298      	cmp	r0, r3
 8006b30:	bf04      	itt	eq
 8006b32:	2301      	moveq	r3, #1
 8006b34:	6183      	streq	r3, [r0, #24]
 8006b36:	f000 f81f 	bl	8006b78 <__sfp>
 8006b3a:	6060      	str	r0, [r4, #4]
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 f81b 	bl	8006b78 <__sfp>
 8006b42:	60a0      	str	r0, [r4, #8]
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 f817 	bl	8006b78 <__sfp>
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	60e0      	str	r0, [r4, #12]
 8006b4e:	2104      	movs	r1, #4
 8006b50:	6860      	ldr	r0, [r4, #4]
 8006b52:	f7ff ffa1 	bl	8006a98 <std>
 8006b56:	2201      	movs	r2, #1
 8006b58:	2109      	movs	r1, #9
 8006b5a:	68a0      	ldr	r0, [r4, #8]
 8006b5c:	f7ff ff9c 	bl	8006a98 <std>
 8006b60:	2202      	movs	r2, #2
 8006b62:	2112      	movs	r1, #18
 8006b64:	68e0      	ldr	r0, [r4, #12]
 8006b66:	f7ff ff97 	bl	8006a98 <std>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	61a3      	str	r3, [r4, #24]
 8006b6e:	bd10      	pop	{r4, pc}
 8006b70:	080096a0 	.word	0x080096a0
 8006b74:	08006ae1 	.word	0x08006ae1

08006b78 <__sfp>:
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <__sfp+0x70>)
 8006b7c:	681e      	ldr	r6, [r3, #0]
 8006b7e:	69b3      	ldr	r3, [r6, #24]
 8006b80:	4607      	mov	r7, r0
 8006b82:	b913      	cbnz	r3, 8006b8a <__sfp+0x12>
 8006b84:	4630      	mov	r0, r6
 8006b86:	f7ff ffc7 	bl	8006b18 <__sinit>
 8006b8a:	3648      	adds	r6, #72	; 0x48
 8006b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	d503      	bpl.n	8006b9c <__sfp+0x24>
 8006b94:	6833      	ldr	r3, [r6, #0]
 8006b96:	b133      	cbz	r3, 8006ba6 <__sfp+0x2e>
 8006b98:	6836      	ldr	r6, [r6, #0]
 8006b9a:	e7f7      	b.n	8006b8c <__sfp+0x14>
 8006b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ba0:	b16d      	cbz	r5, 8006bbe <__sfp+0x46>
 8006ba2:	3468      	adds	r4, #104	; 0x68
 8006ba4:	e7f4      	b.n	8006b90 <__sfp+0x18>
 8006ba6:	2104      	movs	r1, #4
 8006ba8:	4638      	mov	r0, r7
 8006baa:	f7ff ff9f 	bl	8006aec <__sfmoreglue>
 8006bae:	6030      	str	r0, [r6, #0]
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d1f1      	bne.n	8006b98 <__sfp+0x20>
 8006bb4:	230c      	movs	r3, #12
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	4604      	mov	r4, r0
 8006bba:	4620      	mov	r0, r4
 8006bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <__sfp+0x74>)
 8006bc0:	6665      	str	r5, [r4, #100]	; 0x64
 8006bc2:	e9c4 5500 	strd	r5, r5, [r4]
 8006bc6:	60a5      	str	r5, [r4, #8]
 8006bc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006bcc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bd8:	f7fe faca 	bl	8005170 <memset>
 8006bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006be4:	e7e9      	b.n	8006bba <__sfp+0x42>
 8006be6:	bf00      	nop
 8006be8:	080096a0 	.word	0x080096a0
 8006bec:	ffff0001 	.word	0xffff0001

08006bf0 <_fwalk_reent>:
 8006bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf4:	4680      	mov	r8, r0
 8006bf6:	4689      	mov	r9, r1
 8006bf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bfc:	2600      	movs	r6, #0
 8006bfe:	b914      	cbnz	r4, 8006c06 <_fwalk_reent+0x16>
 8006c00:	4630      	mov	r0, r6
 8006c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006c0a:	3f01      	subs	r7, #1
 8006c0c:	d501      	bpl.n	8006c12 <_fwalk_reent+0x22>
 8006c0e:	6824      	ldr	r4, [r4, #0]
 8006c10:	e7f5      	b.n	8006bfe <_fwalk_reent+0xe>
 8006c12:	89ab      	ldrh	r3, [r5, #12]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d907      	bls.n	8006c28 <_fwalk_reent+0x38>
 8006c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	d003      	beq.n	8006c28 <_fwalk_reent+0x38>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4640      	mov	r0, r8
 8006c24:	47c8      	blx	r9
 8006c26:	4306      	orrs	r6, r0
 8006c28:	3568      	adds	r5, #104	; 0x68
 8006c2a:	e7ee      	b.n	8006c0a <_fwalk_reent+0x1a>

08006c2c <_localeconv_r>:
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <_localeconv_r+0x14>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6a18      	ldr	r0, [r3, #32]
 8006c32:	4b04      	ldr	r3, [pc, #16]	; (8006c44 <_localeconv_r+0x18>)
 8006c34:	2800      	cmp	r0, #0
 8006c36:	bf08      	it	eq
 8006c38:	4618      	moveq	r0, r3
 8006c3a:	30f0      	adds	r0, #240	; 0xf0
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000054 	.word	0x20000054
 8006c44:	200000b8 	.word	0x200000b8

08006c48 <__swhatbuf_r>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	460e      	mov	r6, r1
 8006c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c50:	2900      	cmp	r1, #0
 8006c52:	b096      	sub	sp, #88	; 0x58
 8006c54:	4614      	mov	r4, r2
 8006c56:	461d      	mov	r5, r3
 8006c58:	da07      	bge.n	8006c6a <__swhatbuf_r+0x22>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	602b      	str	r3, [r5, #0]
 8006c5e:	89b3      	ldrh	r3, [r6, #12]
 8006c60:	061a      	lsls	r2, r3, #24
 8006c62:	d410      	bmi.n	8006c86 <__swhatbuf_r+0x3e>
 8006c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c68:	e00e      	b.n	8006c88 <__swhatbuf_r+0x40>
 8006c6a:	466a      	mov	r2, sp
 8006c6c:	f000 fdaa 	bl	80077c4 <_fstat_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	dbf2      	blt.n	8006c5a <__swhatbuf_r+0x12>
 8006c74:	9a01      	ldr	r2, [sp, #4]
 8006c76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c7e:	425a      	negs	r2, r3
 8006c80:	415a      	adcs	r2, r3
 8006c82:	602a      	str	r2, [r5, #0]
 8006c84:	e7ee      	b.n	8006c64 <__swhatbuf_r+0x1c>
 8006c86:	2340      	movs	r3, #64	; 0x40
 8006c88:	2000      	movs	r0, #0
 8006c8a:	6023      	str	r3, [r4, #0]
 8006c8c:	b016      	add	sp, #88	; 0x58
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}

08006c90 <__smakebuf_r>:
 8006c90:	898b      	ldrh	r3, [r1, #12]
 8006c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c94:	079d      	lsls	r5, r3, #30
 8006c96:	4606      	mov	r6, r0
 8006c98:	460c      	mov	r4, r1
 8006c9a:	d507      	bpl.n	8006cac <__smakebuf_r+0x1c>
 8006c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	6123      	str	r3, [r4, #16]
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	6163      	str	r3, [r4, #20]
 8006ca8:	b002      	add	sp, #8
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	ab01      	add	r3, sp, #4
 8006cae:	466a      	mov	r2, sp
 8006cb0:	f7ff ffca 	bl	8006c48 <__swhatbuf_r>
 8006cb4:	9900      	ldr	r1, [sp, #0]
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 fb73 	bl	80073a4 <_malloc_r>
 8006cbe:	b948      	cbnz	r0, 8006cd4 <__smakebuf_r+0x44>
 8006cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc4:	059a      	lsls	r2, r3, #22
 8006cc6:	d4ef      	bmi.n	8006ca8 <__smakebuf_r+0x18>
 8006cc8:	f023 0303 	bic.w	r3, r3, #3
 8006ccc:	f043 0302 	orr.w	r3, r3, #2
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	e7e3      	b.n	8006c9c <__smakebuf_r+0xc>
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <__smakebuf_r+0x7c>)
 8006cd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	6020      	str	r0, [r4, #0]
 8006cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce0:	81a3      	strh	r3, [r4, #12]
 8006ce2:	9b00      	ldr	r3, [sp, #0]
 8006ce4:	6163      	str	r3, [r4, #20]
 8006ce6:	9b01      	ldr	r3, [sp, #4]
 8006ce8:	6120      	str	r0, [r4, #16]
 8006cea:	b15b      	cbz	r3, 8006d04 <__smakebuf_r+0x74>
 8006cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f000 fd79 	bl	80077e8 <_isatty_r>
 8006cf6:	b128      	cbz	r0, 8006d04 <__smakebuf_r+0x74>
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	f043 0301 	orr.w	r3, r3, #1
 8006d02:	81a3      	strh	r3, [r4, #12]
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	431d      	orrs	r5, r3
 8006d08:	81a5      	strh	r5, [r4, #12]
 8006d0a:	e7cd      	b.n	8006ca8 <__smakebuf_r+0x18>
 8006d0c:	08006ae1 	.word	0x08006ae1

08006d10 <malloc>:
 8006d10:	4b02      	ldr	r3, [pc, #8]	; (8006d1c <malloc+0xc>)
 8006d12:	4601      	mov	r1, r0
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	f000 bb45 	b.w	80073a4 <_malloc_r>
 8006d1a:	bf00      	nop
 8006d1c:	20000054 	.word	0x20000054

08006d20 <memcpy>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	1e43      	subs	r3, r0, #1
 8006d24:	440a      	add	r2, r1
 8006d26:	4291      	cmp	r1, r2
 8006d28:	d100      	bne.n	8006d2c <memcpy+0xc>
 8006d2a:	bd10      	pop	{r4, pc}
 8006d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d34:	e7f7      	b.n	8006d26 <memcpy+0x6>

08006d36 <_Balloc>:
 8006d36:	b570      	push	{r4, r5, r6, lr}
 8006d38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	460e      	mov	r6, r1
 8006d3e:	b93d      	cbnz	r5, 8006d50 <_Balloc+0x1a>
 8006d40:	2010      	movs	r0, #16
 8006d42:	f7ff ffe5 	bl	8006d10 <malloc>
 8006d46:	6260      	str	r0, [r4, #36]	; 0x24
 8006d48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d4c:	6005      	str	r5, [r0, #0]
 8006d4e:	60c5      	str	r5, [r0, #12]
 8006d50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d52:	68eb      	ldr	r3, [r5, #12]
 8006d54:	b183      	cbz	r3, 8006d78 <_Balloc+0x42>
 8006d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d5e:	b9b8      	cbnz	r0, 8006d90 <_Balloc+0x5a>
 8006d60:	2101      	movs	r1, #1
 8006d62:	fa01 f506 	lsl.w	r5, r1, r6
 8006d66:	1d6a      	adds	r2, r5, #5
 8006d68:	0092      	lsls	r2, r2, #2
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 fabe 	bl	80072ec <_calloc_r>
 8006d70:	b160      	cbz	r0, 8006d8c <_Balloc+0x56>
 8006d72:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006d76:	e00e      	b.n	8006d96 <_Balloc+0x60>
 8006d78:	2221      	movs	r2, #33	; 0x21
 8006d7a:	2104      	movs	r1, #4
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fab5 	bl	80072ec <_calloc_r>
 8006d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d84:	60e8      	str	r0, [r5, #12]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e4      	bne.n	8006d56 <_Balloc+0x20>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}
 8006d90:	6802      	ldr	r2, [r0, #0]
 8006d92:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006d96:	2300      	movs	r3, #0
 8006d98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d9c:	e7f7      	b.n	8006d8e <_Balloc+0x58>

08006d9e <_Bfree>:
 8006d9e:	b570      	push	{r4, r5, r6, lr}
 8006da0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006da2:	4606      	mov	r6, r0
 8006da4:	460d      	mov	r5, r1
 8006da6:	b93c      	cbnz	r4, 8006db8 <_Bfree+0x1a>
 8006da8:	2010      	movs	r0, #16
 8006daa:	f7ff ffb1 	bl	8006d10 <malloc>
 8006dae:	6270      	str	r0, [r6, #36]	; 0x24
 8006db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006db4:	6004      	str	r4, [r0, #0]
 8006db6:	60c4      	str	r4, [r0, #12]
 8006db8:	b13d      	cbz	r5, 8006dca <_Bfree+0x2c>
 8006dba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006dbc:	686a      	ldr	r2, [r5, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dc4:	6029      	str	r1, [r5, #0]
 8006dc6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006dca:	bd70      	pop	{r4, r5, r6, pc}

08006dcc <__multadd>:
 8006dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd0:	690d      	ldr	r5, [r1, #16]
 8006dd2:	461f      	mov	r7, r3
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	f101 0c14 	add.w	ip, r1, #20
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8dc 0000 	ldr.w	r0, [ip]
 8006de2:	b281      	uxth	r1, r0
 8006de4:	fb02 7101 	mla	r1, r2, r1, r7
 8006de8:	0c0f      	lsrs	r7, r1, #16
 8006dea:	0c00      	lsrs	r0, r0, #16
 8006dec:	fb02 7000 	mla	r0, r2, r0, r7
 8006df0:	b289      	uxth	r1, r1
 8006df2:	3301      	adds	r3, #1
 8006df4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006df8:	429d      	cmp	r5, r3
 8006dfa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006dfe:	f84c 1b04 	str.w	r1, [ip], #4
 8006e02:	dcec      	bgt.n	8006dde <__multadd+0x12>
 8006e04:	b1d7      	cbz	r7, 8006e3c <__multadd+0x70>
 8006e06:	68a3      	ldr	r3, [r4, #8]
 8006e08:	42ab      	cmp	r3, r5
 8006e0a:	dc12      	bgt.n	8006e32 <__multadd+0x66>
 8006e0c:	6861      	ldr	r1, [r4, #4]
 8006e0e:	4630      	mov	r0, r6
 8006e10:	3101      	adds	r1, #1
 8006e12:	f7ff ff90 	bl	8006d36 <_Balloc>
 8006e16:	6922      	ldr	r2, [r4, #16]
 8006e18:	3202      	adds	r2, #2
 8006e1a:	f104 010c 	add.w	r1, r4, #12
 8006e1e:	4680      	mov	r8, r0
 8006e20:	0092      	lsls	r2, r2, #2
 8006e22:	300c      	adds	r0, #12
 8006e24:	f7ff ff7c 	bl	8006d20 <memcpy>
 8006e28:	4621      	mov	r1, r4
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f7ff ffb7 	bl	8006d9e <_Bfree>
 8006e30:	4644      	mov	r4, r8
 8006e32:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e36:	3501      	adds	r5, #1
 8006e38:	615f      	str	r7, [r3, #20]
 8006e3a:	6125      	str	r5, [r4, #16]
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e42 <__hi0bits>:
 8006e42:	0c02      	lsrs	r2, r0, #16
 8006e44:	0412      	lsls	r2, r2, #16
 8006e46:	4603      	mov	r3, r0
 8006e48:	b9b2      	cbnz	r2, 8006e78 <__hi0bits+0x36>
 8006e4a:	0403      	lsls	r3, r0, #16
 8006e4c:	2010      	movs	r0, #16
 8006e4e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e52:	bf04      	itt	eq
 8006e54:	021b      	lsleq	r3, r3, #8
 8006e56:	3008      	addeq	r0, #8
 8006e58:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e5c:	bf04      	itt	eq
 8006e5e:	011b      	lsleq	r3, r3, #4
 8006e60:	3004      	addeq	r0, #4
 8006e62:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e66:	bf04      	itt	eq
 8006e68:	009b      	lsleq	r3, r3, #2
 8006e6a:	3002      	addeq	r0, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	db06      	blt.n	8006e7e <__hi0bits+0x3c>
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	d503      	bpl.n	8006e7c <__hi0bits+0x3a>
 8006e74:	3001      	adds	r0, #1
 8006e76:	4770      	bx	lr
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e7e8      	b.n	8006e4e <__hi0bits+0xc>
 8006e7c:	2020      	movs	r0, #32
 8006e7e:	4770      	bx	lr

08006e80 <__lo0bits>:
 8006e80:	6803      	ldr	r3, [r0, #0]
 8006e82:	f013 0207 	ands.w	r2, r3, #7
 8006e86:	4601      	mov	r1, r0
 8006e88:	d00b      	beq.n	8006ea2 <__lo0bits+0x22>
 8006e8a:	07da      	lsls	r2, r3, #31
 8006e8c:	d423      	bmi.n	8006ed6 <__lo0bits+0x56>
 8006e8e:	0798      	lsls	r0, r3, #30
 8006e90:	bf49      	itett	mi
 8006e92:	085b      	lsrmi	r3, r3, #1
 8006e94:	089b      	lsrpl	r3, r3, #2
 8006e96:	2001      	movmi	r0, #1
 8006e98:	600b      	strmi	r3, [r1, #0]
 8006e9a:	bf5c      	itt	pl
 8006e9c:	600b      	strpl	r3, [r1, #0]
 8006e9e:	2002      	movpl	r0, #2
 8006ea0:	4770      	bx	lr
 8006ea2:	b298      	uxth	r0, r3
 8006ea4:	b9a8      	cbnz	r0, 8006ed2 <__lo0bits+0x52>
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	2010      	movs	r0, #16
 8006eaa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006eae:	bf04      	itt	eq
 8006eb0:	0a1b      	lsreq	r3, r3, #8
 8006eb2:	3008      	addeq	r0, #8
 8006eb4:	071a      	lsls	r2, r3, #28
 8006eb6:	bf04      	itt	eq
 8006eb8:	091b      	lsreq	r3, r3, #4
 8006eba:	3004      	addeq	r0, #4
 8006ebc:	079a      	lsls	r2, r3, #30
 8006ebe:	bf04      	itt	eq
 8006ec0:	089b      	lsreq	r3, r3, #2
 8006ec2:	3002      	addeq	r0, #2
 8006ec4:	07da      	lsls	r2, r3, #31
 8006ec6:	d402      	bmi.n	8006ece <__lo0bits+0x4e>
 8006ec8:	085b      	lsrs	r3, r3, #1
 8006eca:	d006      	beq.n	8006eda <__lo0bits+0x5a>
 8006ecc:	3001      	adds	r0, #1
 8006ece:	600b      	str	r3, [r1, #0]
 8006ed0:	4770      	bx	lr
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	e7e9      	b.n	8006eaa <__lo0bits+0x2a>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	4770      	bx	lr
 8006eda:	2020      	movs	r0, #32
 8006edc:	4770      	bx	lr

08006ede <__i2b>:
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	f7ff ff27 	bl	8006d36 <_Balloc>
 8006ee8:	2201      	movs	r2, #1
 8006eea:	6144      	str	r4, [r0, #20]
 8006eec:	6102      	str	r2, [r0, #16]
 8006eee:	bd10      	pop	{r4, pc}

08006ef0 <__multiply>:
 8006ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	4614      	mov	r4, r2
 8006ef6:	690a      	ldr	r2, [r1, #16]
 8006ef8:	6923      	ldr	r3, [r4, #16]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	bfb8      	it	lt
 8006efe:	460b      	movlt	r3, r1
 8006f00:	4688      	mov	r8, r1
 8006f02:	bfbc      	itt	lt
 8006f04:	46a0      	movlt	r8, r4
 8006f06:	461c      	movlt	r4, r3
 8006f08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f18:	eb07 0609 	add.w	r6, r7, r9
 8006f1c:	42b3      	cmp	r3, r6
 8006f1e:	bfb8      	it	lt
 8006f20:	3101      	addlt	r1, #1
 8006f22:	f7ff ff08 	bl	8006d36 <_Balloc>
 8006f26:	f100 0514 	add.w	r5, r0, #20
 8006f2a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006f2e:	462b      	mov	r3, r5
 8006f30:	2200      	movs	r2, #0
 8006f32:	4573      	cmp	r3, lr
 8006f34:	d316      	bcc.n	8006f64 <__multiply+0x74>
 8006f36:	f104 0214 	add.w	r2, r4, #20
 8006f3a:	f108 0114 	add.w	r1, r8, #20
 8006f3e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006f42:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	9b00      	ldr	r3, [sp, #0]
 8006f4a:	9201      	str	r2, [sp, #4]
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d80c      	bhi.n	8006f6a <__multiply+0x7a>
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	dd03      	ble.n	8006f5c <__multiply+0x6c>
 8006f54:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d05d      	beq.n	8007018 <__multiply+0x128>
 8006f5c:	6106      	str	r6, [r0, #16]
 8006f5e:	b003      	add	sp, #12
 8006f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f64:	f843 2b04 	str.w	r2, [r3], #4
 8006f68:	e7e3      	b.n	8006f32 <__multiply+0x42>
 8006f6a:	f8b2 b000 	ldrh.w	fp, [r2]
 8006f6e:	f1bb 0f00 	cmp.w	fp, #0
 8006f72:	d023      	beq.n	8006fbc <__multiply+0xcc>
 8006f74:	4689      	mov	r9, r1
 8006f76:	46ac      	mov	ip, r5
 8006f78:	f04f 0800 	mov.w	r8, #0
 8006f7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006f80:	f8dc a000 	ldr.w	sl, [ip]
 8006f84:	b2a3      	uxth	r3, r4
 8006f86:	fa1f fa8a 	uxth.w	sl, sl
 8006f8a:	fb0b a303 	mla	r3, fp, r3, sl
 8006f8e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f92:	f8dc 4000 	ldr.w	r4, [ip]
 8006f96:	4443      	add	r3, r8
 8006f98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f9c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006fa0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006fa4:	46e2      	mov	sl, ip
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006fac:	454f      	cmp	r7, r9
 8006fae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006fb2:	f84a 3b04 	str.w	r3, [sl], #4
 8006fb6:	d82b      	bhi.n	8007010 <__multiply+0x120>
 8006fb8:	f8cc 8004 	str.w	r8, [ip, #4]
 8006fbc:	9b01      	ldr	r3, [sp, #4]
 8006fbe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006fc2:	3204      	adds	r2, #4
 8006fc4:	f1ba 0f00 	cmp.w	sl, #0
 8006fc8:	d020      	beq.n	800700c <__multiply+0x11c>
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	4689      	mov	r9, r1
 8006fce:	46a8      	mov	r8, r5
 8006fd0:	f04f 0b00 	mov.w	fp, #0
 8006fd4:	f8b9 c000 	ldrh.w	ip, [r9]
 8006fd8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006fdc:	fb0a 440c 	mla	r4, sl, ip, r4
 8006fe0:	445c      	add	r4, fp
 8006fe2:	46c4      	mov	ip, r8
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006fea:	f84c 3b04 	str.w	r3, [ip], #4
 8006fee:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ff2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006ff6:	0c1b      	lsrs	r3, r3, #16
 8006ff8:	fb0a b303 	mla	r3, sl, r3, fp
 8006ffc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007000:	454f      	cmp	r7, r9
 8007002:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007006:	d805      	bhi.n	8007014 <__multiply+0x124>
 8007008:	f8c8 3004 	str.w	r3, [r8, #4]
 800700c:	3504      	adds	r5, #4
 800700e:	e79b      	b.n	8006f48 <__multiply+0x58>
 8007010:	46d4      	mov	ip, sl
 8007012:	e7b3      	b.n	8006f7c <__multiply+0x8c>
 8007014:	46e0      	mov	r8, ip
 8007016:	e7dd      	b.n	8006fd4 <__multiply+0xe4>
 8007018:	3e01      	subs	r6, #1
 800701a:	e799      	b.n	8006f50 <__multiply+0x60>

0800701c <__pow5mult>:
 800701c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007020:	4615      	mov	r5, r2
 8007022:	f012 0203 	ands.w	r2, r2, #3
 8007026:	4606      	mov	r6, r0
 8007028:	460f      	mov	r7, r1
 800702a:	d007      	beq.n	800703c <__pow5mult+0x20>
 800702c:	3a01      	subs	r2, #1
 800702e:	4c21      	ldr	r4, [pc, #132]	; (80070b4 <__pow5mult+0x98>)
 8007030:	2300      	movs	r3, #0
 8007032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007036:	f7ff fec9 	bl	8006dcc <__multadd>
 800703a:	4607      	mov	r7, r0
 800703c:	10ad      	asrs	r5, r5, #2
 800703e:	d035      	beq.n	80070ac <__pow5mult+0x90>
 8007040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007042:	b93c      	cbnz	r4, 8007054 <__pow5mult+0x38>
 8007044:	2010      	movs	r0, #16
 8007046:	f7ff fe63 	bl	8006d10 <malloc>
 800704a:	6270      	str	r0, [r6, #36]	; 0x24
 800704c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007050:	6004      	str	r4, [r0, #0]
 8007052:	60c4      	str	r4, [r0, #12]
 8007054:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800705c:	b94c      	cbnz	r4, 8007072 <__pow5mult+0x56>
 800705e:	f240 2171 	movw	r1, #625	; 0x271
 8007062:	4630      	mov	r0, r6
 8007064:	f7ff ff3b 	bl	8006ede <__i2b>
 8007068:	2300      	movs	r3, #0
 800706a:	f8c8 0008 	str.w	r0, [r8, #8]
 800706e:	4604      	mov	r4, r0
 8007070:	6003      	str	r3, [r0, #0]
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	07eb      	lsls	r3, r5, #31
 8007078:	d50a      	bpl.n	8007090 <__pow5mult+0x74>
 800707a:	4639      	mov	r1, r7
 800707c:	4622      	mov	r2, r4
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff ff36 	bl	8006ef0 <__multiply>
 8007084:	4639      	mov	r1, r7
 8007086:	4681      	mov	r9, r0
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff fe88 	bl	8006d9e <_Bfree>
 800708e:	464f      	mov	r7, r9
 8007090:	106d      	asrs	r5, r5, #1
 8007092:	d00b      	beq.n	80070ac <__pow5mult+0x90>
 8007094:	6820      	ldr	r0, [r4, #0]
 8007096:	b938      	cbnz	r0, 80070a8 <__pow5mult+0x8c>
 8007098:	4622      	mov	r2, r4
 800709a:	4621      	mov	r1, r4
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff ff27 	bl	8006ef0 <__multiply>
 80070a2:	6020      	str	r0, [r4, #0]
 80070a4:	f8c0 8000 	str.w	r8, [r0]
 80070a8:	4604      	mov	r4, r0
 80070aa:	e7e4      	b.n	8007076 <__pow5mult+0x5a>
 80070ac:	4638      	mov	r0, r7
 80070ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b2:	bf00      	nop
 80070b4:	08009838 	.word	0x08009838

080070b8 <__lshift>:
 80070b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070bc:	460c      	mov	r4, r1
 80070be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	6849      	ldr	r1, [r1, #4]
 80070c6:	eb0a 0903 	add.w	r9, sl, r3
 80070ca:	68a3      	ldr	r3, [r4, #8]
 80070cc:	4607      	mov	r7, r0
 80070ce:	4616      	mov	r6, r2
 80070d0:	f109 0501 	add.w	r5, r9, #1
 80070d4:	42ab      	cmp	r3, r5
 80070d6:	db32      	blt.n	800713e <__lshift+0x86>
 80070d8:	4638      	mov	r0, r7
 80070da:	f7ff fe2c 	bl	8006d36 <_Balloc>
 80070de:	2300      	movs	r3, #0
 80070e0:	4680      	mov	r8, r0
 80070e2:	f100 0114 	add.w	r1, r0, #20
 80070e6:	461a      	mov	r2, r3
 80070e8:	4553      	cmp	r3, sl
 80070ea:	db2b      	blt.n	8007144 <__lshift+0x8c>
 80070ec:	6920      	ldr	r0, [r4, #16]
 80070ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070f2:	f104 0314 	add.w	r3, r4, #20
 80070f6:	f016 021f 	ands.w	r2, r6, #31
 80070fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007102:	d025      	beq.n	8007150 <__lshift+0x98>
 8007104:	f1c2 0e20 	rsb	lr, r2, #32
 8007108:	2000      	movs	r0, #0
 800710a:	681e      	ldr	r6, [r3, #0]
 800710c:	468a      	mov	sl, r1
 800710e:	4096      	lsls	r6, r2
 8007110:	4330      	orrs	r0, r6
 8007112:	f84a 0b04 	str.w	r0, [sl], #4
 8007116:	f853 0b04 	ldr.w	r0, [r3], #4
 800711a:	459c      	cmp	ip, r3
 800711c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007120:	d814      	bhi.n	800714c <__lshift+0x94>
 8007122:	6048      	str	r0, [r1, #4]
 8007124:	b108      	cbz	r0, 800712a <__lshift+0x72>
 8007126:	f109 0502 	add.w	r5, r9, #2
 800712a:	3d01      	subs	r5, #1
 800712c:	4638      	mov	r0, r7
 800712e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007132:	4621      	mov	r1, r4
 8007134:	f7ff fe33 	bl	8006d9e <_Bfree>
 8007138:	4640      	mov	r0, r8
 800713a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713e:	3101      	adds	r1, #1
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	e7c7      	b.n	80070d4 <__lshift+0x1c>
 8007144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007148:	3301      	adds	r3, #1
 800714a:	e7cd      	b.n	80070e8 <__lshift+0x30>
 800714c:	4651      	mov	r1, sl
 800714e:	e7dc      	b.n	800710a <__lshift+0x52>
 8007150:	3904      	subs	r1, #4
 8007152:	f853 2b04 	ldr.w	r2, [r3], #4
 8007156:	f841 2f04 	str.w	r2, [r1, #4]!
 800715a:	459c      	cmp	ip, r3
 800715c:	d8f9      	bhi.n	8007152 <__lshift+0x9a>
 800715e:	e7e4      	b.n	800712a <__lshift+0x72>

08007160 <__mcmp>:
 8007160:	6903      	ldr	r3, [r0, #16]
 8007162:	690a      	ldr	r2, [r1, #16]
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	b530      	push	{r4, r5, lr}
 8007168:	d10c      	bne.n	8007184 <__mcmp+0x24>
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	3014      	adds	r0, #20
 800716e:	3114      	adds	r1, #20
 8007170:	1884      	adds	r4, r0, r2
 8007172:	4411      	add	r1, r2
 8007174:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007178:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800717c:	4295      	cmp	r5, r2
 800717e:	d003      	beq.n	8007188 <__mcmp+0x28>
 8007180:	d305      	bcc.n	800718e <__mcmp+0x2e>
 8007182:	2301      	movs	r3, #1
 8007184:	4618      	mov	r0, r3
 8007186:	bd30      	pop	{r4, r5, pc}
 8007188:	42a0      	cmp	r0, r4
 800718a:	d3f3      	bcc.n	8007174 <__mcmp+0x14>
 800718c:	e7fa      	b.n	8007184 <__mcmp+0x24>
 800718e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007192:	e7f7      	b.n	8007184 <__mcmp+0x24>

08007194 <__mdiff>:
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	460d      	mov	r5, r1
 800719a:	4607      	mov	r7, r0
 800719c:	4611      	mov	r1, r2
 800719e:	4628      	mov	r0, r5
 80071a0:	4614      	mov	r4, r2
 80071a2:	f7ff ffdd 	bl	8007160 <__mcmp>
 80071a6:	1e06      	subs	r6, r0, #0
 80071a8:	d108      	bne.n	80071bc <__mdiff+0x28>
 80071aa:	4631      	mov	r1, r6
 80071ac:	4638      	mov	r0, r7
 80071ae:	f7ff fdc2 	bl	8006d36 <_Balloc>
 80071b2:	2301      	movs	r3, #1
 80071b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80071b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071bc:	bfa4      	itt	ge
 80071be:	4623      	movge	r3, r4
 80071c0:	462c      	movge	r4, r5
 80071c2:	4638      	mov	r0, r7
 80071c4:	6861      	ldr	r1, [r4, #4]
 80071c6:	bfa6      	itte	ge
 80071c8:	461d      	movge	r5, r3
 80071ca:	2600      	movge	r6, #0
 80071cc:	2601      	movlt	r6, #1
 80071ce:	f7ff fdb2 	bl	8006d36 <_Balloc>
 80071d2:	692b      	ldr	r3, [r5, #16]
 80071d4:	60c6      	str	r6, [r0, #12]
 80071d6:	6926      	ldr	r6, [r4, #16]
 80071d8:	f105 0914 	add.w	r9, r5, #20
 80071dc:	f104 0214 	add.w	r2, r4, #20
 80071e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80071e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80071e8:	f100 0514 	add.w	r5, r0, #20
 80071ec:	f04f 0e00 	mov.w	lr, #0
 80071f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80071f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80071f8:	fa1e f18a 	uxtah	r1, lr, sl
 80071fc:	b2a3      	uxth	r3, r4
 80071fe:	1ac9      	subs	r1, r1, r3
 8007200:	0c23      	lsrs	r3, r4, #16
 8007202:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007206:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800720a:	b289      	uxth	r1, r1
 800720c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007210:	45c8      	cmp	r8, r9
 8007212:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007216:	4694      	mov	ip, r2
 8007218:	f845 3b04 	str.w	r3, [r5], #4
 800721c:	d8e8      	bhi.n	80071f0 <__mdiff+0x5c>
 800721e:	45bc      	cmp	ip, r7
 8007220:	d304      	bcc.n	800722c <__mdiff+0x98>
 8007222:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007226:	b183      	cbz	r3, 800724a <__mdiff+0xb6>
 8007228:	6106      	str	r6, [r0, #16]
 800722a:	e7c5      	b.n	80071b8 <__mdiff+0x24>
 800722c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007230:	fa1e f381 	uxtah	r3, lr, r1
 8007234:	141a      	asrs	r2, r3, #16
 8007236:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800723a:	b29b      	uxth	r3, r3
 800723c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007240:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007244:	f845 3b04 	str.w	r3, [r5], #4
 8007248:	e7e9      	b.n	800721e <__mdiff+0x8a>
 800724a:	3e01      	subs	r6, #1
 800724c:	e7e9      	b.n	8007222 <__mdiff+0x8e>

0800724e <__d2b>:
 800724e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007252:	460e      	mov	r6, r1
 8007254:	2101      	movs	r1, #1
 8007256:	ec59 8b10 	vmov	r8, r9, d0
 800725a:	4615      	mov	r5, r2
 800725c:	f7ff fd6b 	bl	8006d36 <_Balloc>
 8007260:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007264:	4607      	mov	r7, r0
 8007266:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800726a:	bb34      	cbnz	r4, 80072ba <__d2b+0x6c>
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	f1b8 0300 	subs.w	r3, r8, #0
 8007272:	d027      	beq.n	80072c4 <__d2b+0x76>
 8007274:	a802      	add	r0, sp, #8
 8007276:	f840 3d08 	str.w	r3, [r0, #-8]!
 800727a:	f7ff fe01 	bl	8006e80 <__lo0bits>
 800727e:	9900      	ldr	r1, [sp, #0]
 8007280:	b1f0      	cbz	r0, 80072c0 <__d2b+0x72>
 8007282:	9a01      	ldr	r2, [sp, #4]
 8007284:	f1c0 0320 	rsb	r3, r0, #32
 8007288:	fa02 f303 	lsl.w	r3, r2, r3
 800728c:	430b      	orrs	r3, r1
 800728e:	40c2      	lsrs	r2, r0
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	9201      	str	r2, [sp, #4]
 8007294:	9b01      	ldr	r3, [sp, #4]
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	bf14      	ite	ne
 800729c:	2102      	movne	r1, #2
 800729e:	2101      	moveq	r1, #1
 80072a0:	6139      	str	r1, [r7, #16]
 80072a2:	b1c4      	cbz	r4, 80072d6 <__d2b+0x88>
 80072a4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80072a8:	4404      	add	r4, r0
 80072aa:	6034      	str	r4, [r6, #0]
 80072ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072b0:	6028      	str	r0, [r5, #0]
 80072b2:	4638      	mov	r0, r7
 80072b4:	b003      	add	sp, #12
 80072b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072be:	e7d5      	b.n	800726c <__d2b+0x1e>
 80072c0:	6179      	str	r1, [r7, #20]
 80072c2:	e7e7      	b.n	8007294 <__d2b+0x46>
 80072c4:	a801      	add	r0, sp, #4
 80072c6:	f7ff fddb 	bl	8006e80 <__lo0bits>
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	2101      	movs	r1, #1
 80072d0:	6139      	str	r1, [r7, #16]
 80072d2:	3020      	adds	r0, #32
 80072d4:	e7e5      	b.n	80072a2 <__d2b+0x54>
 80072d6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80072da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072de:	6030      	str	r0, [r6, #0]
 80072e0:	6918      	ldr	r0, [r3, #16]
 80072e2:	f7ff fdae 	bl	8006e42 <__hi0bits>
 80072e6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80072ea:	e7e1      	b.n	80072b0 <__d2b+0x62>

080072ec <_calloc_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	fb02 f401 	mul.w	r4, r2, r1
 80072f2:	4621      	mov	r1, r4
 80072f4:	f000 f856 	bl	80073a4 <_malloc_r>
 80072f8:	4605      	mov	r5, r0
 80072fa:	b118      	cbz	r0, 8007304 <_calloc_r+0x18>
 80072fc:	4622      	mov	r2, r4
 80072fe:	2100      	movs	r1, #0
 8007300:	f7fd ff36 	bl	8005170 <memset>
 8007304:	4628      	mov	r0, r5
 8007306:	bd38      	pop	{r3, r4, r5, pc}

08007308 <_free_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4605      	mov	r5, r0
 800730c:	2900      	cmp	r1, #0
 800730e:	d045      	beq.n	800739c <_free_r+0x94>
 8007310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007314:	1f0c      	subs	r4, r1, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfb8      	it	lt
 800731a:	18e4      	addlt	r4, r4, r3
 800731c:	f000 fa98 	bl	8007850 <__malloc_lock>
 8007320:	4a1f      	ldr	r2, [pc, #124]	; (80073a0 <_free_r+0x98>)
 8007322:	6813      	ldr	r3, [r2, #0]
 8007324:	4610      	mov	r0, r2
 8007326:	b933      	cbnz	r3, 8007336 <_free_r+0x2e>
 8007328:	6063      	str	r3, [r4, #4]
 800732a:	6014      	str	r4, [r2, #0]
 800732c:	4628      	mov	r0, r5
 800732e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007332:	f000 ba8e 	b.w	8007852 <__malloc_unlock>
 8007336:	42a3      	cmp	r3, r4
 8007338:	d90c      	bls.n	8007354 <_free_r+0x4c>
 800733a:	6821      	ldr	r1, [r4, #0]
 800733c:	1862      	adds	r2, r4, r1
 800733e:	4293      	cmp	r3, r2
 8007340:	bf04      	itt	eq
 8007342:	681a      	ldreq	r2, [r3, #0]
 8007344:	685b      	ldreq	r3, [r3, #4]
 8007346:	6063      	str	r3, [r4, #4]
 8007348:	bf04      	itt	eq
 800734a:	1852      	addeq	r2, r2, r1
 800734c:	6022      	streq	r2, [r4, #0]
 800734e:	6004      	str	r4, [r0, #0]
 8007350:	e7ec      	b.n	800732c <_free_r+0x24>
 8007352:	4613      	mov	r3, r2
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	b10a      	cbz	r2, 800735c <_free_r+0x54>
 8007358:	42a2      	cmp	r2, r4
 800735a:	d9fa      	bls.n	8007352 <_free_r+0x4a>
 800735c:	6819      	ldr	r1, [r3, #0]
 800735e:	1858      	adds	r0, r3, r1
 8007360:	42a0      	cmp	r0, r4
 8007362:	d10b      	bne.n	800737c <_free_r+0x74>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	4401      	add	r1, r0
 8007368:	1858      	adds	r0, r3, r1
 800736a:	4282      	cmp	r2, r0
 800736c:	6019      	str	r1, [r3, #0]
 800736e:	d1dd      	bne.n	800732c <_free_r+0x24>
 8007370:	6810      	ldr	r0, [r2, #0]
 8007372:	6852      	ldr	r2, [r2, #4]
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	4401      	add	r1, r0
 8007378:	6019      	str	r1, [r3, #0]
 800737a:	e7d7      	b.n	800732c <_free_r+0x24>
 800737c:	d902      	bls.n	8007384 <_free_r+0x7c>
 800737e:	230c      	movs	r3, #12
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	e7d3      	b.n	800732c <_free_r+0x24>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	1821      	adds	r1, r4, r0
 8007388:	428a      	cmp	r2, r1
 800738a:	bf04      	itt	eq
 800738c:	6811      	ldreq	r1, [r2, #0]
 800738e:	6852      	ldreq	r2, [r2, #4]
 8007390:	6062      	str	r2, [r4, #4]
 8007392:	bf04      	itt	eq
 8007394:	1809      	addeq	r1, r1, r0
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	605c      	str	r4, [r3, #4]
 800739a:	e7c7      	b.n	800732c <_free_r+0x24>
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	bf00      	nop
 80073a0:	200002bc 	.word	0x200002bc

080073a4 <_malloc_r>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	1ccd      	adds	r5, r1, #3
 80073a8:	f025 0503 	bic.w	r5, r5, #3
 80073ac:	3508      	adds	r5, #8
 80073ae:	2d0c      	cmp	r5, #12
 80073b0:	bf38      	it	cc
 80073b2:	250c      	movcc	r5, #12
 80073b4:	2d00      	cmp	r5, #0
 80073b6:	4606      	mov	r6, r0
 80073b8:	db01      	blt.n	80073be <_malloc_r+0x1a>
 80073ba:	42a9      	cmp	r1, r5
 80073bc:	d903      	bls.n	80073c6 <_malloc_r+0x22>
 80073be:	230c      	movs	r3, #12
 80073c0:	6033      	str	r3, [r6, #0]
 80073c2:	2000      	movs	r0, #0
 80073c4:	bd70      	pop	{r4, r5, r6, pc}
 80073c6:	f000 fa43 	bl	8007850 <__malloc_lock>
 80073ca:	4a21      	ldr	r2, [pc, #132]	; (8007450 <_malloc_r+0xac>)
 80073cc:	6814      	ldr	r4, [r2, #0]
 80073ce:	4621      	mov	r1, r4
 80073d0:	b991      	cbnz	r1, 80073f8 <_malloc_r+0x54>
 80073d2:	4c20      	ldr	r4, [pc, #128]	; (8007454 <_malloc_r+0xb0>)
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	b91b      	cbnz	r3, 80073e0 <_malloc_r+0x3c>
 80073d8:	4630      	mov	r0, r6
 80073da:	f000 f97d 	bl	80076d8 <_sbrk_r>
 80073de:	6020      	str	r0, [r4, #0]
 80073e0:	4629      	mov	r1, r5
 80073e2:	4630      	mov	r0, r6
 80073e4:	f000 f978 	bl	80076d8 <_sbrk_r>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d124      	bne.n	8007436 <_malloc_r+0x92>
 80073ec:	230c      	movs	r3, #12
 80073ee:	6033      	str	r3, [r6, #0]
 80073f0:	4630      	mov	r0, r6
 80073f2:	f000 fa2e 	bl	8007852 <__malloc_unlock>
 80073f6:	e7e4      	b.n	80073c2 <_malloc_r+0x1e>
 80073f8:	680b      	ldr	r3, [r1, #0]
 80073fa:	1b5b      	subs	r3, r3, r5
 80073fc:	d418      	bmi.n	8007430 <_malloc_r+0x8c>
 80073fe:	2b0b      	cmp	r3, #11
 8007400:	d90f      	bls.n	8007422 <_malloc_r+0x7e>
 8007402:	600b      	str	r3, [r1, #0]
 8007404:	50cd      	str	r5, [r1, r3]
 8007406:	18cc      	adds	r4, r1, r3
 8007408:	4630      	mov	r0, r6
 800740a:	f000 fa22 	bl	8007852 <__malloc_unlock>
 800740e:	f104 000b 	add.w	r0, r4, #11
 8007412:	1d23      	adds	r3, r4, #4
 8007414:	f020 0007 	bic.w	r0, r0, #7
 8007418:	1ac3      	subs	r3, r0, r3
 800741a:	d0d3      	beq.n	80073c4 <_malloc_r+0x20>
 800741c:	425a      	negs	r2, r3
 800741e:	50e2      	str	r2, [r4, r3]
 8007420:	e7d0      	b.n	80073c4 <_malloc_r+0x20>
 8007422:	428c      	cmp	r4, r1
 8007424:	684b      	ldr	r3, [r1, #4]
 8007426:	bf16      	itet	ne
 8007428:	6063      	strne	r3, [r4, #4]
 800742a:	6013      	streq	r3, [r2, #0]
 800742c:	460c      	movne	r4, r1
 800742e:	e7eb      	b.n	8007408 <_malloc_r+0x64>
 8007430:	460c      	mov	r4, r1
 8007432:	6849      	ldr	r1, [r1, #4]
 8007434:	e7cc      	b.n	80073d0 <_malloc_r+0x2c>
 8007436:	1cc4      	adds	r4, r0, #3
 8007438:	f024 0403 	bic.w	r4, r4, #3
 800743c:	42a0      	cmp	r0, r4
 800743e:	d005      	beq.n	800744c <_malloc_r+0xa8>
 8007440:	1a21      	subs	r1, r4, r0
 8007442:	4630      	mov	r0, r6
 8007444:	f000 f948 	bl	80076d8 <_sbrk_r>
 8007448:	3001      	adds	r0, #1
 800744a:	d0cf      	beq.n	80073ec <_malloc_r+0x48>
 800744c:	6025      	str	r5, [r4, #0]
 800744e:	e7db      	b.n	8007408 <_malloc_r+0x64>
 8007450:	200002bc 	.word	0x200002bc
 8007454:	200002c0 	.word	0x200002c0

08007458 <__sfputc_r>:
 8007458:	6893      	ldr	r3, [r2, #8]
 800745a:	3b01      	subs	r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	b410      	push	{r4}
 8007460:	6093      	str	r3, [r2, #8]
 8007462:	da08      	bge.n	8007476 <__sfputc_r+0x1e>
 8007464:	6994      	ldr	r4, [r2, #24]
 8007466:	42a3      	cmp	r3, r4
 8007468:	db01      	blt.n	800746e <__sfputc_r+0x16>
 800746a:	290a      	cmp	r1, #10
 800746c:	d103      	bne.n	8007476 <__sfputc_r+0x1e>
 800746e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007472:	f7fe bb5d 	b.w	8005b30 <__swbuf_r>
 8007476:	6813      	ldr	r3, [r2, #0]
 8007478:	1c58      	adds	r0, r3, #1
 800747a:	6010      	str	r0, [r2, #0]
 800747c:	7019      	strb	r1, [r3, #0]
 800747e:	4608      	mov	r0, r1
 8007480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007484:	4770      	bx	lr

08007486 <__sfputs_r>:
 8007486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007488:	4606      	mov	r6, r0
 800748a:	460f      	mov	r7, r1
 800748c:	4614      	mov	r4, r2
 800748e:	18d5      	adds	r5, r2, r3
 8007490:	42ac      	cmp	r4, r5
 8007492:	d101      	bne.n	8007498 <__sfputs_r+0x12>
 8007494:	2000      	movs	r0, #0
 8007496:	e007      	b.n	80074a8 <__sfputs_r+0x22>
 8007498:	463a      	mov	r2, r7
 800749a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749e:	4630      	mov	r0, r6
 80074a0:	f7ff ffda 	bl	8007458 <__sfputc_r>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d1f3      	bne.n	8007490 <__sfputs_r+0xa>
 80074a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074ac <_vfiprintf_r>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	460c      	mov	r4, r1
 80074b2:	b09d      	sub	sp, #116	; 0x74
 80074b4:	4617      	mov	r7, r2
 80074b6:	461d      	mov	r5, r3
 80074b8:	4606      	mov	r6, r0
 80074ba:	b118      	cbz	r0, 80074c4 <_vfiprintf_r+0x18>
 80074bc:	6983      	ldr	r3, [r0, #24]
 80074be:	b90b      	cbnz	r3, 80074c4 <_vfiprintf_r+0x18>
 80074c0:	f7ff fb2a 	bl	8006b18 <__sinit>
 80074c4:	4b7c      	ldr	r3, [pc, #496]	; (80076b8 <_vfiprintf_r+0x20c>)
 80074c6:	429c      	cmp	r4, r3
 80074c8:	d158      	bne.n	800757c <_vfiprintf_r+0xd0>
 80074ca:	6874      	ldr	r4, [r6, #4]
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	0718      	lsls	r0, r3, #28
 80074d0:	d55e      	bpl.n	8007590 <_vfiprintf_r+0xe4>
 80074d2:	6923      	ldr	r3, [r4, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d05b      	beq.n	8007590 <_vfiprintf_r+0xe4>
 80074d8:	2300      	movs	r3, #0
 80074da:	9309      	str	r3, [sp, #36]	; 0x24
 80074dc:	2320      	movs	r3, #32
 80074de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074e2:	2330      	movs	r3, #48	; 0x30
 80074e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074e8:	9503      	str	r5, [sp, #12]
 80074ea:	f04f 0b01 	mov.w	fp, #1
 80074ee:	46b8      	mov	r8, r7
 80074f0:	4645      	mov	r5, r8
 80074f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80074f6:	b10b      	cbz	r3, 80074fc <_vfiprintf_r+0x50>
 80074f8:	2b25      	cmp	r3, #37	; 0x25
 80074fa:	d154      	bne.n	80075a6 <_vfiprintf_r+0xfa>
 80074fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8007500:	d00b      	beq.n	800751a <_vfiprintf_r+0x6e>
 8007502:	4653      	mov	r3, sl
 8007504:	463a      	mov	r2, r7
 8007506:	4621      	mov	r1, r4
 8007508:	4630      	mov	r0, r6
 800750a:	f7ff ffbc 	bl	8007486 <__sfputs_r>
 800750e:	3001      	adds	r0, #1
 8007510:	f000 80c2 	beq.w	8007698 <_vfiprintf_r+0x1ec>
 8007514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007516:	4453      	add	r3, sl
 8007518:	9309      	str	r3, [sp, #36]	; 0x24
 800751a:	f898 3000 	ldrb.w	r3, [r8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 80ba 	beq.w	8007698 <_vfiprintf_r+0x1ec>
 8007524:	2300      	movs	r3, #0
 8007526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800752a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800752e:	9304      	str	r3, [sp, #16]
 8007530:	9307      	str	r3, [sp, #28]
 8007532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007536:	931a      	str	r3, [sp, #104]	; 0x68
 8007538:	46a8      	mov	r8, r5
 800753a:	2205      	movs	r2, #5
 800753c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007540:	485e      	ldr	r0, [pc, #376]	; (80076bc <_vfiprintf_r+0x210>)
 8007542:	f7f8 fe55 	bl	80001f0 <memchr>
 8007546:	9b04      	ldr	r3, [sp, #16]
 8007548:	bb78      	cbnz	r0, 80075aa <_vfiprintf_r+0xfe>
 800754a:	06d9      	lsls	r1, r3, #27
 800754c:	bf44      	itt	mi
 800754e:	2220      	movmi	r2, #32
 8007550:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007554:	071a      	lsls	r2, r3, #28
 8007556:	bf44      	itt	mi
 8007558:	222b      	movmi	r2, #43	; 0x2b
 800755a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800755e:	782a      	ldrb	r2, [r5, #0]
 8007560:	2a2a      	cmp	r2, #42	; 0x2a
 8007562:	d02a      	beq.n	80075ba <_vfiprintf_r+0x10e>
 8007564:	9a07      	ldr	r2, [sp, #28]
 8007566:	46a8      	mov	r8, r5
 8007568:	2000      	movs	r0, #0
 800756a:	250a      	movs	r5, #10
 800756c:	4641      	mov	r1, r8
 800756e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007572:	3b30      	subs	r3, #48	; 0x30
 8007574:	2b09      	cmp	r3, #9
 8007576:	d969      	bls.n	800764c <_vfiprintf_r+0x1a0>
 8007578:	b360      	cbz	r0, 80075d4 <_vfiprintf_r+0x128>
 800757a:	e024      	b.n	80075c6 <_vfiprintf_r+0x11a>
 800757c:	4b50      	ldr	r3, [pc, #320]	; (80076c0 <_vfiprintf_r+0x214>)
 800757e:	429c      	cmp	r4, r3
 8007580:	d101      	bne.n	8007586 <_vfiprintf_r+0xda>
 8007582:	68b4      	ldr	r4, [r6, #8]
 8007584:	e7a2      	b.n	80074cc <_vfiprintf_r+0x20>
 8007586:	4b4f      	ldr	r3, [pc, #316]	; (80076c4 <_vfiprintf_r+0x218>)
 8007588:	429c      	cmp	r4, r3
 800758a:	bf08      	it	eq
 800758c:	68f4      	ldreq	r4, [r6, #12]
 800758e:	e79d      	b.n	80074cc <_vfiprintf_r+0x20>
 8007590:	4621      	mov	r1, r4
 8007592:	4630      	mov	r0, r6
 8007594:	f7fe fb1e 	bl	8005bd4 <__swsetup_r>
 8007598:	2800      	cmp	r0, #0
 800759a:	d09d      	beq.n	80074d8 <_vfiprintf_r+0x2c>
 800759c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075a0:	b01d      	add	sp, #116	; 0x74
 80075a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	46a8      	mov	r8, r5
 80075a8:	e7a2      	b.n	80074f0 <_vfiprintf_r+0x44>
 80075aa:	4a44      	ldr	r2, [pc, #272]	; (80076bc <_vfiprintf_r+0x210>)
 80075ac:	1a80      	subs	r0, r0, r2
 80075ae:	fa0b f000 	lsl.w	r0, fp, r0
 80075b2:	4318      	orrs	r0, r3
 80075b4:	9004      	str	r0, [sp, #16]
 80075b6:	4645      	mov	r5, r8
 80075b8:	e7be      	b.n	8007538 <_vfiprintf_r+0x8c>
 80075ba:	9a03      	ldr	r2, [sp, #12]
 80075bc:	1d11      	adds	r1, r2, #4
 80075be:	6812      	ldr	r2, [r2, #0]
 80075c0:	9103      	str	r1, [sp, #12]
 80075c2:	2a00      	cmp	r2, #0
 80075c4:	db01      	blt.n	80075ca <_vfiprintf_r+0x11e>
 80075c6:	9207      	str	r2, [sp, #28]
 80075c8:	e004      	b.n	80075d4 <_vfiprintf_r+0x128>
 80075ca:	4252      	negs	r2, r2
 80075cc:	f043 0302 	orr.w	r3, r3, #2
 80075d0:	9207      	str	r2, [sp, #28]
 80075d2:	9304      	str	r3, [sp, #16]
 80075d4:	f898 3000 	ldrb.w	r3, [r8]
 80075d8:	2b2e      	cmp	r3, #46	; 0x2e
 80075da:	d10e      	bne.n	80075fa <_vfiprintf_r+0x14e>
 80075dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80075e0:	2b2a      	cmp	r3, #42	; 0x2a
 80075e2:	d138      	bne.n	8007656 <_vfiprintf_r+0x1aa>
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	1d1a      	adds	r2, r3, #4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	9203      	str	r2, [sp, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	bfb8      	it	lt
 80075f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075f4:	f108 0802 	add.w	r8, r8, #2
 80075f8:	9305      	str	r3, [sp, #20]
 80075fa:	4d33      	ldr	r5, [pc, #204]	; (80076c8 <_vfiprintf_r+0x21c>)
 80075fc:	f898 1000 	ldrb.w	r1, [r8]
 8007600:	2203      	movs	r2, #3
 8007602:	4628      	mov	r0, r5
 8007604:	f7f8 fdf4 	bl	80001f0 <memchr>
 8007608:	b140      	cbz	r0, 800761c <_vfiprintf_r+0x170>
 800760a:	2340      	movs	r3, #64	; 0x40
 800760c:	1b40      	subs	r0, r0, r5
 800760e:	fa03 f000 	lsl.w	r0, r3, r0
 8007612:	9b04      	ldr	r3, [sp, #16]
 8007614:	4303      	orrs	r3, r0
 8007616:	f108 0801 	add.w	r8, r8, #1
 800761a:	9304      	str	r3, [sp, #16]
 800761c:	f898 1000 	ldrb.w	r1, [r8]
 8007620:	482a      	ldr	r0, [pc, #168]	; (80076cc <_vfiprintf_r+0x220>)
 8007622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007626:	2206      	movs	r2, #6
 8007628:	f108 0701 	add.w	r7, r8, #1
 800762c:	f7f8 fde0 	bl	80001f0 <memchr>
 8007630:	2800      	cmp	r0, #0
 8007632:	d037      	beq.n	80076a4 <_vfiprintf_r+0x1f8>
 8007634:	4b26      	ldr	r3, [pc, #152]	; (80076d0 <_vfiprintf_r+0x224>)
 8007636:	bb1b      	cbnz	r3, 8007680 <_vfiprintf_r+0x1d4>
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	3307      	adds	r3, #7
 800763c:	f023 0307 	bic.w	r3, r3, #7
 8007640:	3308      	adds	r3, #8
 8007642:	9303      	str	r3, [sp, #12]
 8007644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007646:	444b      	add	r3, r9
 8007648:	9309      	str	r3, [sp, #36]	; 0x24
 800764a:	e750      	b.n	80074ee <_vfiprintf_r+0x42>
 800764c:	fb05 3202 	mla	r2, r5, r2, r3
 8007650:	2001      	movs	r0, #1
 8007652:	4688      	mov	r8, r1
 8007654:	e78a      	b.n	800756c <_vfiprintf_r+0xc0>
 8007656:	2300      	movs	r3, #0
 8007658:	f108 0801 	add.w	r8, r8, #1
 800765c:	9305      	str	r3, [sp, #20]
 800765e:	4619      	mov	r1, r3
 8007660:	250a      	movs	r5, #10
 8007662:	4640      	mov	r0, r8
 8007664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007668:	3a30      	subs	r2, #48	; 0x30
 800766a:	2a09      	cmp	r2, #9
 800766c:	d903      	bls.n	8007676 <_vfiprintf_r+0x1ca>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0c3      	beq.n	80075fa <_vfiprintf_r+0x14e>
 8007672:	9105      	str	r1, [sp, #20]
 8007674:	e7c1      	b.n	80075fa <_vfiprintf_r+0x14e>
 8007676:	fb05 2101 	mla	r1, r5, r1, r2
 800767a:	2301      	movs	r3, #1
 800767c:	4680      	mov	r8, r0
 800767e:	e7f0      	b.n	8007662 <_vfiprintf_r+0x1b6>
 8007680:	ab03      	add	r3, sp, #12
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	4622      	mov	r2, r4
 8007686:	4b13      	ldr	r3, [pc, #76]	; (80076d4 <_vfiprintf_r+0x228>)
 8007688:	a904      	add	r1, sp, #16
 800768a:	4630      	mov	r0, r6
 800768c:	f7fd fe0c 	bl	80052a8 <_printf_float>
 8007690:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007694:	4681      	mov	r9, r0
 8007696:	d1d5      	bne.n	8007644 <_vfiprintf_r+0x198>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	065b      	lsls	r3, r3, #25
 800769c:	f53f af7e 	bmi.w	800759c <_vfiprintf_r+0xf0>
 80076a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076a2:	e77d      	b.n	80075a0 <_vfiprintf_r+0xf4>
 80076a4:	ab03      	add	r3, sp, #12
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4622      	mov	r2, r4
 80076aa:	4b0a      	ldr	r3, [pc, #40]	; (80076d4 <_vfiprintf_r+0x228>)
 80076ac:	a904      	add	r1, sp, #16
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7fe f8b0 	bl	8005814 <_printf_i>
 80076b4:	e7ec      	b.n	8007690 <_vfiprintf_r+0x1e4>
 80076b6:	bf00      	nop
 80076b8:	08009708 	.word	0x08009708
 80076bc:	08009844 	.word	0x08009844
 80076c0:	08009728 	.word	0x08009728
 80076c4:	080096e8 	.word	0x080096e8
 80076c8:	0800984a 	.word	0x0800984a
 80076cc:	0800984e 	.word	0x0800984e
 80076d0:	080052a9 	.word	0x080052a9
 80076d4:	08007487 	.word	0x08007487

080076d8 <_sbrk_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4c06      	ldr	r4, [pc, #24]	; (80076f4 <_sbrk_r+0x1c>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4605      	mov	r5, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	f7fd fcac 	bl	8005040 <_sbrk>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_sbrk_r+0x1a>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_sbrk_r+0x1a>
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	20000474 	.word	0x20000474

080076f8 <__sread>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	460c      	mov	r4, r1
 80076fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007700:	f000 f8a8 	bl	8007854 <_read_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	bfab      	itete	ge
 8007708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800770a:	89a3      	ldrhlt	r3, [r4, #12]
 800770c:	181b      	addge	r3, r3, r0
 800770e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007712:	bfac      	ite	ge
 8007714:	6563      	strge	r3, [r4, #84]	; 0x54
 8007716:	81a3      	strhlt	r3, [r4, #12]
 8007718:	bd10      	pop	{r4, pc}

0800771a <__swrite>:
 800771a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	461f      	mov	r7, r3
 8007720:	898b      	ldrh	r3, [r1, #12]
 8007722:	05db      	lsls	r3, r3, #23
 8007724:	4605      	mov	r5, r0
 8007726:	460c      	mov	r4, r1
 8007728:	4616      	mov	r6, r2
 800772a:	d505      	bpl.n	8007738 <__swrite+0x1e>
 800772c:	2302      	movs	r3, #2
 800772e:	2200      	movs	r2, #0
 8007730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007734:	f000 f868 	bl	8007808 <_lseek_r>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	4632      	mov	r2, r6
 8007746:	463b      	mov	r3, r7
 8007748:	4628      	mov	r0, r5
 800774a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774e:	f000 b817 	b.w	8007780 <_write_r>

08007752 <__sseek>:
 8007752:	b510      	push	{r4, lr}
 8007754:	460c      	mov	r4, r1
 8007756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775a:	f000 f855 	bl	8007808 <_lseek_r>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	bf15      	itete	ne
 8007764:	6560      	strne	r0, [r4, #84]	; 0x54
 8007766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800776a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800776e:	81a3      	strheq	r3, [r4, #12]
 8007770:	bf18      	it	ne
 8007772:	81a3      	strhne	r3, [r4, #12]
 8007774:	bd10      	pop	{r4, pc}

08007776 <__sclose>:
 8007776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777a:	f000 b813 	b.w	80077a4 <_close_r>
	...

08007780 <_write_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4c07      	ldr	r4, [pc, #28]	; (80077a0 <_write_r+0x20>)
 8007784:	4605      	mov	r5, r0
 8007786:	4608      	mov	r0, r1
 8007788:	4611      	mov	r1, r2
 800778a:	2200      	movs	r2, #0
 800778c:	6022      	str	r2, [r4, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	f7fd fa72 	bl	8004c78 <_write>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_write_r+0x1e>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	b103      	cbz	r3, 800779e <_write_r+0x1e>
 800779c:	602b      	str	r3, [r5, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	20000474 	.word	0x20000474

080077a4 <_close_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4c06      	ldr	r4, [pc, #24]	; (80077c0 <_close_r+0x1c>)
 80077a8:	2300      	movs	r3, #0
 80077aa:	4605      	mov	r5, r0
 80077ac:	4608      	mov	r0, r1
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	f7fd fc3a 	bl	8005028 <_close>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d102      	bne.n	80077be <_close_r+0x1a>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	b103      	cbz	r3, 80077be <_close_r+0x1a>
 80077bc:	602b      	str	r3, [r5, #0]
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	20000474 	.word	0x20000474

080077c4 <_fstat_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4c07      	ldr	r4, [pc, #28]	; (80077e4 <_fstat_r+0x20>)
 80077c8:	2300      	movs	r3, #0
 80077ca:	4605      	mov	r5, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	f7fd fc2c 	bl	800502e <_fstat>
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	d102      	bne.n	80077e0 <_fstat_r+0x1c>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	b103      	cbz	r3, 80077e0 <_fstat_r+0x1c>
 80077de:	602b      	str	r3, [r5, #0]
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	bf00      	nop
 80077e4:	20000474 	.word	0x20000474

080077e8 <_isatty_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4c06      	ldr	r4, [pc, #24]	; (8007804 <_isatty_r+0x1c>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4605      	mov	r5, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	6023      	str	r3, [r4, #0]
 80077f4:	f7fd fc20 	bl	8005038 <_isatty>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_isatty_r+0x1a>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_isatty_r+0x1a>
 8007800:	602b      	str	r3, [r5, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	20000474 	.word	0x20000474

08007808 <_lseek_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4c07      	ldr	r4, [pc, #28]	; (8007828 <_lseek_r+0x20>)
 800780c:	4605      	mov	r5, r0
 800780e:	4608      	mov	r0, r1
 8007810:	4611      	mov	r1, r2
 8007812:	2200      	movs	r2, #0
 8007814:	6022      	str	r2, [r4, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	f7fd fc10 	bl	800503c <_lseek>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_lseek_r+0x1e>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	b103      	cbz	r3, 8007826 <_lseek_r+0x1e>
 8007824:	602b      	str	r3, [r5, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	20000474 	.word	0x20000474

0800782c <__ascii_mbtowc>:
 800782c:	b082      	sub	sp, #8
 800782e:	b901      	cbnz	r1, 8007832 <__ascii_mbtowc+0x6>
 8007830:	a901      	add	r1, sp, #4
 8007832:	b142      	cbz	r2, 8007846 <__ascii_mbtowc+0x1a>
 8007834:	b14b      	cbz	r3, 800784a <__ascii_mbtowc+0x1e>
 8007836:	7813      	ldrb	r3, [r2, #0]
 8007838:	600b      	str	r3, [r1, #0]
 800783a:	7812      	ldrb	r2, [r2, #0]
 800783c:	1c10      	adds	r0, r2, #0
 800783e:	bf18      	it	ne
 8007840:	2001      	movne	r0, #1
 8007842:	b002      	add	sp, #8
 8007844:	4770      	bx	lr
 8007846:	4610      	mov	r0, r2
 8007848:	e7fb      	b.n	8007842 <__ascii_mbtowc+0x16>
 800784a:	f06f 0001 	mvn.w	r0, #1
 800784e:	e7f8      	b.n	8007842 <__ascii_mbtowc+0x16>

08007850 <__malloc_lock>:
 8007850:	4770      	bx	lr

08007852 <__malloc_unlock>:
 8007852:	4770      	bx	lr

08007854 <_read_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	4c07      	ldr	r4, [pc, #28]	; (8007874 <_read_r+0x20>)
 8007858:	4605      	mov	r5, r0
 800785a:	4608      	mov	r0, r1
 800785c:	4611      	mov	r1, r2
 800785e:	2200      	movs	r2, #0
 8007860:	6022      	str	r2, [r4, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	f7fd fbd2 	bl	800500c <_read>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_read_r+0x1e>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	b103      	cbz	r3, 8007872 <_read_r+0x1e>
 8007870:	602b      	str	r3, [r5, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	20000474 	.word	0x20000474

08007878 <__ascii_wctomb>:
 8007878:	b149      	cbz	r1, 800788e <__ascii_wctomb+0x16>
 800787a:	2aff      	cmp	r2, #255	; 0xff
 800787c:	bf85      	ittet	hi
 800787e:	238a      	movhi	r3, #138	; 0x8a
 8007880:	6003      	strhi	r3, [r0, #0]
 8007882:	700a      	strbls	r2, [r1, #0]
 8007884:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007888:	bf98      	it	ls
 800788a:	2001      	movls	r0, #1
 800788c:	4770      	bx	lr
 800788e:	4608      	mov	r0, r1
 8007890:	4770      	bx	lr
	...

08007894 <asin>:
 8007894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007896:	ed2d 8b02 	vpush	{d8}
 800789a:	4e26      	ldr	r6, [pc, #152]	; (8007934 <asin+0xa0>)
 800789c:	b08b      	sub	sp, #44	; 0x2c
 800789e:	ec55 4b10 	vmov	r4, r5, d0
 80078a2:	f000 fa1d 	bl	8007ce0 <__ieee754_asin>
 80078a6:	f996 3000 	ldrsb.w	r3, [r6]
 80078aa:	eeb0 8a40 	vmov.f32	s16, s0
 80078ae:	eef0 8a60 	vmov.f32	s17, s1
 80078b2:	3301      	adds	r3, #1
 80078b4:	d036      	beq.n	8007924 <asin+0x90>
 80078b6:	4622      	mov	r2, r4
 80078b8:	462b      	mov	r3, r5
 80078ba:	4620      	mov	r0, r4
 80078bc:	4629      	mov	r1, r5
 80078be:	f7f9 f93d 	bl	8000b3c <__aeabi_dcmpun>
 80078c2:	4607      	mov	r7, r0
 80078c4:	bb70      	cbnz	r0, 8007924 <asin+0x90>
 80078c6:	ec45 4b10 	vmov	d0, r4, r5
 80078ca:	f001 fc59 	bl	8009180 <fabs>
 80078ce:	2200      	movs	r2, #0
 80078d0:	4b19      	ldr	r3, [pc, #100]	; (8007938 <asin+0xa4>)
 80078d2:	ec51 0b10 	vmov	r0, r1, d0
 80078d6:	f7f9 f927 	bl	8000b28 <__aeabi_dcmpgt>
 80078da:	b318      	cbz	r0, 8007924 <asin+0x90>
 80078dc:	2301      	movs	r3, #1
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	4816      	ldr	r0, [pc, #88]	; (800793c <asin+0xa8>)
 80078e2:	4b17      	ldr	r3, [pc, #92]	; (8007940 <asin+0xac>)
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	9708      	str	r7, [sp, #32]
 80078e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80078ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80078f0:	f001 fc5a 	bl	80091a8 <nan>
 80078f4:	f996 3000 	ldrsb.w	r3, [r6]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	ed8d 0b06 	vstr	d0, [sp, #24]
 80078fe:	d104      	bne.n	800790a <asin+0x76>
 8007900:	f7fd fc0c 	bl	800511c <__errno>
 8007904:	2321      	movs	r3, #33	; 0x21
 8007906:	6003      	str	r3, [r0, #0]
 8007908:	e004      	b.n	8007914 <asin+0x80>
 800790a:	4668      	mov	r0, sp
 800790c:	f001 fc49 	bl	80091a2 <matherr>
 8007910:	2800      	cmp	r0, #0
 8007912:	d0f5      	beq.n	8007900 <asin+0x6c>
 8007914:	9b08      	ldr	r3, [sp, #32]
 8007916:	b11b      	cbz	r3, 8007920 <asin+0x8c>
 8007918:	f7fd fc00 	bl	800511c <__errno>
 800791c:	9b08      	ldr	r3, [sp, #32]
 800791e:	6003      	str	r3, [r0, #0]
 8007920:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007924:	eeb0 0a48 	vmov.f32	s0, s16
 8007928:	eef0 0a68 	vmov.f32	s1, s17
 800792c:	b00b      	add	sp, #44	; 0x2c
 800792e:	ecbd 8b02 	vpop	{d8}
 8007932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007934:	20000224 	.word	0x20000224
 8007938:	3ff00000 	.word	0x3ff00000
 800793c:	08009849 	.word	0x08009849
 8007940:	08009960 	.word	0x08009960

08007944 <atan2>:
 8007944:	f000 bbdc 	b.w	8008100 <__ieee754_atan2>

08007948 <pow>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	ed2d 8b04 	vpush	{d8-d9}
 8007950:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007c24 <pow+0x2dc>
 8007954:	b08d      	sub	sp, #52	; 0x34
 8007956:	ec57 6b10 	vmov	r6, r7, d0
 800795a:	ec55 4b11 	vmov	r4, r5, d1
 800795e:	f000 fcaf 	bl	80082c0 <__ieee754_pow>
 8007962:	f999 3000 	ldrsb.w	r3, [r9]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	3301      	adds	r3, #1
 800796a:	eeb0 8a40 	vmov.f32	s16, s0
 800796e:	eef0 8a60 	vmov.f32	s17, s1
 8007972:	46c8      	mov	r8, r9
 8007974:	d05f      	beq.n	8007a36 <pow+0xee>
 8007976:	4622      	mov	r2, r4
 8007978:	462b      	mov	r3, r5
 800797a:	4620      	mov	r0, r4
 800797c:	4629      	mov	r1, r5
 800797e:	f7f9 f8dd 	bl	8000b3c <__aeabi_dcmpun>
 8007982:	4683      	mov	fp, r0
 8007984:	2800      	cmp	r0, #0
 8007986:	d156      	bne.n	8007a36 <pow+0xee>
 8007988:	4632      	mov	r2, r6
 800798a:	463b      	mov	r3, r7
 800798c:	4630      	mov	r0, r6
 800798e:	4639      	mov	r1, r7
 8007990:	f7f9 f8d4 	bl	8000b3c <__aeabi_dcmpun>
 8007994:	9001      	str	r0, [sp, #4]
 8007996:	b1e8      	cbz	r0, 80079d4 <pow+0x8c>
 8007998:	2200      	movs	r2, #0
 800799a:	2300      	movs	r3, #0
 800799c:	4620      	mov	r0, r4
 800799e:	4629      	mov	r1, r5
 80079a0:	f7f9 f89a 	bl	8000ad8 <__aeabi_dcmpeq>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d046      	beq.n	8007a36 <pow+0xee>
 80079a8:	2301      	movs	r3, #1
 80079aa:	9302      	str	r3, [sp, #8]
 80079ac:	4b96      	ldr	r3, [pc, #600]	; (8007c08 <pow+0x2c0>)
 80079ae:	9303      	str	r3, [sp, #12]
 80079b0:	4b96      	ldr	r3, [pc, #600]	; (8007c0c <pow+0x2c4>)
 80079b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80079b6:	2200      	movs	r2, #0
 80079b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079bc:	9b00      	ldr	r3, [sp, #0]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80079c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80079c8:	d033      	beq.n	8007a32 <pow+0xea>
 80079ca:	a802      	add	r0, sp, #8
 80079cc:	f001 fbe9 	bl	80091a2 <matherr>
 80079d0:	bb48      	cbnz	r0, 8007a26 <pow+0xde>
 80079d2:	e05d      	b.n	8007a90 <pow+0x148>
 80079d4:	f04f 0a00 	mov.w	sl, #0
 80079d8:	f04f 0b00 	mov.w	fp, #0
 80079dc:	4652      	mov	r2, sl
 80079de:	465b      	mov	r3, fp
 80079e0:	4630      	mov	r0, r6
 80079e2:	4639      	mov	r1, r7
 80079e4:	f7f9 f878 	bl	8000ad8 <__aeabi_dcmpeq>
 80079e8:	ec4b ab19 	vmov	d9, sl, fp
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d054      	beq.n	8007a9a <pow+0x152>
 80079f0:	4652      	mov	r2, sl
 80079f2:	465b      	mov	r3, fp
 80079f4:	4620      	mov	r0, r4
 80079f6:	4629      	mov	r1, r5
 80079f8:	f7f9 f86e 	bl	8000ad8 <__aeabi_dcmpeq>
 80079fc:	4680      	mov	r8, r0
 80079fe:	b318      	cbz	r0, 8007a48 <pow+0x100>
 8007a00:	2301      	movs	r3, #1
 8007a02:	9302      	str	r3, [sp, #8]
 8007a04:	4b80      	ldr	r3, [pc, #512]	; (8007c08 <pow+0x2c0>)
 8007a06:	9303      	str	r3, [sp, #12]
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a0c:	9b00      	ldr	r3, [sp, #0]
 8007a0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a12:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007a16:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0d5      	beq.n	80079ca <pow+0x82>
 8007a1e:	4b7b      	ldr	r3, [pc, #492]	; (8007c0c <pow+0x2c4>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a28:	b11b      	cbz	r3, 8007a32 <pow+0xea>
 8007a2a:	f7fd fb77 	bl	800511c <__errno>
 8007a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a30:	6003      	str	r3, [r0, #0]
 8007a32:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007a36:	eeb0 0a48 	vmov.f32	s0, s16
 8007a3a:	eef0 0a68 	vmov.f32	s1, s17
 8007a3e:	b00d      	add	sp, #52	; 0x34
 8007a40:	ecbd 8b04 	vpop	{d8-d9}
 8007a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a48:	ec45 4b10 	vmov	d0, r4, r5
 8007a4c:	f001 fba1 	bl	8009192 <finite>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d0f0      	beq.n	8007a36 <pow+0xee>
 8007a54:	4652      	mov	r2, sl
 8007a56:	465b      	mov	r3, fp
 8007a58:	4620      	mov	r0, r4
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	f7f9 f846 	bl	8000aec <__aeabi_dcmplt>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d0e8      	beq.n	8007a36 <pow+0xee>
 8007a64:	2301      	movs	r3, #1
 8007a66:	9302      	str	r3, [sp, #8]
 8007a68:	4b67      	ldr	r3, [pc, #412]	; (8007c08 <pow+0x2c0>)
 8007a6a:	9303      	str	r3, [sp, #12]
 8007a6c:	f999 3000 	ldrsb.w	r3, [r9]
 8007a70:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007a74:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a78:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007a7c:	b913      	cbnz	r3, 8007a84 <pow+0x13c>
 8007a7e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007a82:	e7a2      	b.n	80079ca <pow+0x82>
 8007a84:	4962      	ldr	r1, [pc, #392]	; (8007c10 <pow+0x2c8>)
 8007a86:	2000      	movs	r0, #0
 8007a88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d19c      	bne.n	80079ca <pow+0x82>
 8007a90:	f7fd fb44 	bl	800511c <__errno>
 8007a94:	2321      	movs	r3, #33	; 0x21
 8007a96:	6003      	str	r3, [r0, #0]
 8007a98:	e7c5      	b.n	8007a26 <pow+0xde>
 8007a9a:	eeb0 0a48 	vmov.f32	s0, s16
 8007a9e:	eef0 0a68 	vmov.f32	s1, s17
 8007aa2:	f001 fb76 	bl	8009192 <finite>
 8007aa6:	9000      	str	r0, [sp, #0]
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	f040 8081 	bne.w	8007bb0 <pow+0x268>
 8007aae:	ec47 6b10 	vmov	d0, r6, r7
 8007ab2:	f001 fb6e 	bl	8009192 <finite>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d07a      	beq.n	8007bb0 <pow+0x268>
 8007aba:	ec45 4b10 	vmov	d0, r4, r5
 8007abe:	f001 fb68 	bl	8009192 <finite>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d074      	beq.n	8007bb0 <pow+0x268>
 8007ac6:	ec53 2b18 	vmov	r2, r3, d8
 8007aca:	ee18 0a10 	vmov	r0, s16
 8007ace:	4619      	mov	r1, r3
 8007ad0:	f7f9 f834 	bl	8000b3c <__aeabi_dcmpun>
 8007ad4:	f999 9000 	ldrsb.w	r9, [r9]
 8007ad8:	4b4b      	ldr	r3, [pc, #300]	; (8007c08 <pow+0x2c0>)
 8007ada:	b1b0      	cbz	r0, 8007b0a <pow+0x1c2>
 8007adc:	2201      	movs	r2, #1
 8007ade:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ae2:	9b00      	ldr	r3, [sp, #0]
 8007ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ae6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007aea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007aee:	f1b9 0f00 	cmp.w	r9, #0
 8007af2:	d0c4      	beq.n	8007a7e <pow+0x136>
 8007af4:	4652      	mov	r2, sl
 8007af6:	465b      	mov	r3, fp
 8007af8:	4650      	mov	r0, sl
 8007afa:	4659      	mov	r1, fp
 8007afc:	f7f8 feae 	bl	800085c <__aeabi_ddiv>
 8007b00:	f1b9 0f02 	cmp.w	r9, #2
 8007b04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b08:	e7c1      	b.n	8007a8e <pow+0x146>
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b10:	900a      	str	r0, [sp, #40]	; 0x28
 8007b12:	4629      	mov	r1, r5
 8007b14:	4620      	mov	r0, r4
 8007b16:	2200      	movs	r2, #0
 8007b18:	4b3e      	ldr	r3, [pc, #248]	; (8007c14 <pow+0x2cc>)
 8007b1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007b1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007b22:	f7f8 fd71 	bl	8000608 <__aeabi_dmul>
 8007b26:	4604      	mov	r4, r0
 8007b28:	460d      	mov	r5, r1
 8007b2a:	f1b9 0f00 	cmp.w	r9, #0
 8007b2e:	d124      	bne.n	8007b7a <pow+0x232>
 8007b30:	4b39      	ldr	r3, [pc, #228]	; (8007c18 <pow+0x2d0>)
 8007b32:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007b36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	465b      	mov	r3, fp
 8007b40:	4639      	mov	r1, r7
 8007b42:	f7f8 ffd3 	bl	8000aec <__aeabi_dcmplt>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d056      	beq.n	8007bf8 <pow+0x2b0>
 8007b4a:	ec45 4b10 	vmov	d0, r4, r5
 8007b4e:	f001 fb33 	bl	80091b8 <rint>
 8007b52:	4622      	mov	r2, r4
 8007b54:	462b      	mov	r3, r5
 8007b56:	ec51 0b10 	vmov	r0, r1, d0
 8007b5a:	f7f8 ffbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b5e:	b920      	cbnz	r0, 8007b6a <pow+0x222>
 8007b60:	4b2e      	ldr	r3, [pc, #184]	; (8007c1c <pow+0x2d4>)
 8007b62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007b66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b6a:	f998 3000 	ldrsb.w	r3, [r8]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d142      	bne.n	8007bf8 <pow+0x2b0>
 8007b72:	f7fd fad3 	bl	800511c <__errno>
 8007b76:	2322      	movs	r3, #34	; 0x22
 8007b78:	e78d      	b.n	8007a96 <pow+0x14e>
 8007b7a:	4b29      	ldr	r3, [pc, #164]	; (8007c20 <pow+0x2d8>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b82:	4630      	mov	r0, r6
 8007b84:	4652      	mov	r2, sl
 8007b86:	465b      	mov	r3, fp
 8007b88:	4639      	mov	r1, r7
 8007b8a:	f7f8 ffaf 	bl	8000aec <__aeabi_dcmplt>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d0eb      	beq.n	8007b6a <pow+0x222>
 8007b92:	ec45 4b10 	vmov	d0, r4, r5
 8007b96:	f001 fb0f 	bl	80091b8 <rint>
 8007b9a:	4622      	mov	r2, r4
 8007b9c:	462b      	mov	r3, r5
 8007b9e:	ec51 0b10 	vmov	r0, r1, d0
 8007ba2:	f7f8 ff99 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d1df      	bne.n	8007b6a <pow+0x222>
 8007baa:	2200      	movs	r2, #0
 8007bac:	4b18      	ldr	r3, [pc, #96]	; (8007c10 <pow+0x2c8>)
 8007bae:	e7da      	b.n	8007b66 <pow+0x21e>
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	ec51 0b18 	vmov	r0, r1, d8
 8007bb8:	f7f8 ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	f43f af3a 	beq.w	8007a36 <pow+0xee>
 8007bc2:	ec47 6b10 	vmov	d0, r6, r7
 8007bc6:	f001 fae4 	bl	8009192 <finite>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f43f af33 	beq.w	8007a36 <pow+0xee>
 8007bd0:	ec45 4b10 	vmov	d0, r4, r5
 8007bd4:	f001 fadd 	bl	8009192 <finite>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f43f af2c 	beq.w	8007a36 <pow+0xee>
 8007bde:	2304      	movs	r3, #4
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <pow+0x2c0>)
 8007be4:	9303      	str	r3, [sp, #12]
 8007be6:	2300      	movs	r3, #0
 8007be8:	930a      	str	r3, [sp, #40]	; 0x28
 8007bea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007bee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007bf2:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007bf6:	e7b8      	b.n	8007b6a <pow+0x222>
 8007bf8:	a802      	add	r0, sp, #8
 8007bfa:	f001 fad2 	bl	80091a2 <matherr>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	f47f af11 	bne.w	8007a26 <pow+0xde>
 8007c04:	e7b5      	b.n	8007b72 <pow+0x22a>
 8007c06:	bf00      	nop
 8007c08:	08009965 	.word	0x08009965
 8007c0c:	3ff00000 	.word	0x3ff00000
 8007c10:	fff00000 	.word	0xfff00000
 8007c14:	3fe00000 	.word	0x3fe00000
 8007c18:	47efffff 	.word	0x47efffff
 8007c1c:	c7efffff 	.word	0xc7efffff
 8007c20:	7ff00000 	.word	0x7ff00000
 8007c24:	20000224 	.word	0x20000224

08007c28 <sqrt>:
 8007c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c2c:	ed2d 8b02 	vpush	{d8}
 8007c30:	b08b      	sub	sp, #44	; 0x2c
 8007c32:	ec55 4b10 	vmov	r4, r5, d0
 8007c36:	f001 f851 	bl	8008cdc <__ieee754_sqrt>
 8007c3a:	4b26      	ldr	r3, [pc, #152]	; (8007cd4 <sqrt+0xac>)
 8007c3c:	eeb0 8a40 	vmov.f32	s16, s0
 8007c40:	eef0 8a60 	vmov.f32	s17, s1
 8007c44:	f993 6000 	ldrsb.w	r6, [r3]
 8007c48:	1c73      	adds	r3, r6, #1
 8007c4a:	d02a      	beq.n	8007ca2 <sqrt+0x7a>
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	462b      	mov	r3, r5
 8007c50:	4620      	mov	r0, r4
 8007c52:	4629      	mov	r1, r5
 8007c54:	f7f8 ff72 	bl	8000b3c <__aeabi_dcmpun>
 8007c58:	4607      	mov	r7, r0
 8007c5a:	bb10      	cbnz	r0, 8007ca2 <sqrt+0x7a>
 8007c5c:	f04f 0800 	mov.w	r8, #0
 8007c60:	f04f 0900 	mov.w	r9, #0
 8007c64:	4642      	mov	r2, r8
 8007c66:	464b      	mov	r3, r9
 8007c68:	4620      	mov	r0, r4
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	f7f8 ff3e 	bl	8000aec <__aeabi_dcmplt>
 8007c70:	b1b8      	cbz	r0, 8007ca2 <sqrt+0x7a>
 8007c72:	2301      	movs	r3, #1
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4b18      	ldr	r3, [pc, #96]	; (8007cd8 <sqrt+0xb0>)
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	9708      	str	r7, [sp, #32]
 8007c7c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007c80:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007c84:	b9b6      	cbnz	r6, 8007cb4 <sqrt+0x8c>
 8007c86:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007c8a:	4668      	mov	r0, sp
 8007c8c:	f001 fa89 	bl	80091a2 <matherr>
 8007c90:	b1d0      	cbz	r0, 8007cc8 <sqrt+0xa0>
 8007c92:	9b08      	ldr	r3, [sp, #32]
 8007c94:	b11b      	cbz	r3, 8007c9e <sqrt+0x76>
 8007c96:	f7fd fa41 	bl	800511c <__errno>
 8007c9a:	9b08      	ldr	r3, [sp, #32]
 8007c9c:	6003      	str	r3, [r0, #0]
 8007c9e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007ca2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ca6:	eef0 0a68 	vmov.f32	s1, s17
 8007caa:	b00b      	add	sp, #44	; 0x2c
 8007cac:	ecbd 8b02 	vpop	{d8}
 8007cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	4640      	mov	r0, r8
 8007cba:	4649      	mov	r1, r9
 8007cbc:	f7f8 fdce 	bl	800085c <__aeabi_ddiv>
 8007cc0:	2e02      	cmp	r6, #2
 8007cc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007cc6:	d1e0      	bne.n	8007c8a <sqrt+0x62>
 8007cc8:	f7fd fa28 	bl	800511c <__errno>
 8007ccc:	2321      	movs	r3, #33	; 0x21
 8007cce:	6003      	str	r3, [r0, #0]
 8007cd0:	e7df      	b.n	8007c92 <sqrt+0x6a>
 8007cd2:	bf00      	nop
 8007cd4:	20000224 	.word	0x20000224
 8007cd8:	08009969 	.word	0x08009969
 8007cdc:	00000000 	.word	0x00000000

08007ce0 <__ieee754_asin>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	ec55 4b10 	vmov	r4, r5, d0
 8007ce8:	4bcb      	ldr	r3, [pc, #812]	; (8008018 <__ieee754_asin+0x338>)
 8007cea:	b087      	sub	sp, #28
 8007cec:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007cf0:	429f      	cmp	r7, r3
 8007cf2:	9501      	str	r5, [sp, #4]
 8007cf4:	dd31      	ble.n	8007d5a <__ieee754_asin+0x7a>
 8007cf6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8007cfa:	ee10 3a10 	vmov	r3, s0
 8007cfe:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8007d02:	433b      	orrs	r3, r7
 8007d04:	d117      	bne.n	8007d36 <__ieee754_asin+0x56>
 8007d06:	a3aa      	add	r3, pc, #680	; (adr r3, 8007fb0 <__ieee754_asin+0x2d0>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	ee10 0a10 	vmov	r0, s0
 8007d10:	4629      	mov	r1, r5
 8007d12:	f7f8 fc79 	bl	8000608 <__aeabi_dmul>
 8007d16:	a3a8      	add	r3, pc, #672	; (adr r3, 8007fb8 <__ieee754_asin+0x2d8>)
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	460f      	mov	r7, r1
 8007d20:	4620      	mov	r0, r4
 8007d22:	4629      	mov	r1, r5
 8007d24:	f7f8 fc70 	bl	8000608 <__aeabi_dmul>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4639      	mov	r1, r7
 8007d30:	f7f8 fab4 	bl	800029c <__adddf3>
 8007d34:	e00a      	b.n	8007d4c <__ieee754_asin+0x6c>
 8007d36:	ee10 2a10 	vmov	r2, s0
 8007d3a:	462b      	mov	r3, r5
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f7f8 faaa 	bl	8000298 <__aeabi_dsub>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	f7f8 fd88 	bl	800085c <__aeabi_ddiv>
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	460d      	mov	r5, r1
 8007d50:	ec45 4b10 	vmov	d0, r4, r5
 8007d54:	b007      	add	sp, #28
 8007d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5a:	4bb0      	ldr	r3, [pc, #704]	; (800801c <__ieee754_asin+0x33c>)
 8007d5c:	429f      	cmp	r7, r3
 8007d5e:	dc11      	bgt.n	8007d84 <__ieee754_asin+0xa4>
 8007d60:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8007d64:	f280 80ae 	bge.w	8007ec4 <__ieee754_asin+0x1e4>
 8007d68:	a395      	add	r3, pc, #596	; (adr r3, 8007fc0 <__ieee754_asin+0x2e0>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	ee10 0a10 	vmov	r0, s0
 8007d72:	4629      	mov	r1, r5
 8007d74:	f7f8 fa92 	bl	800029c <__adddf3>
 8007d78:	2200      	movs	r2, #0
 8007d7a:	4ba9      	ldr	r3, [pc, #676]	; (8008020 <__ieee754_asin+0x340>)
 8007d7c:	f7f8 fed4 	bl	8000b28 <__aeabi_dcmpgt>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d1e5      	bne.n	8007d50 <__ieee754_asin+0x70>
 8007d84:	ec45 4b10 	vmov	d0, r4, r5
 8007d88:	f001 f9fa 	bl	8009180 <fabs>
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	ec53 2b10 	vmov	r2, r3, d0
 8007d92:	49a3      	ldr	r1, [pc, #652]	; (8008020 <__ieee754_asin+0x340>)
 8007d94:	f7f8 fa80 	bl	8000298 <__aeabi_dsub>
 8007d98:	2200      	movs	r2, #0
 8007d9a:	4ba2      	ldr	r3, [pc, #648]	; (8008024 <__ieee754_asin+0x344>)
 8007d9c:	f7f8 fc34 	bl	8000608 <__aeabi_dmul>
 8007da0:	a389      	add	r3, pc, #548	; (adr r3, 8007fc8 <__ieee754_asin+0x2e8>)
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	4604      	mov	r4, r0
 8007da8:	460d      	mov	r5, r1
 8007daa:	f7f8 fc2d 	bl	8000608 <__aeabi_dmul>
 8007dae:	a388      	add	r3, pc, #544	; (adr r3, 8007fd0 <__ieee754_asin+0x2f0>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 fa72 	bl	800029c <__adddf3>
 8007db8:	4622      	mov	r2, r4
 8007dba:	462b      	mov	r3, r5
 8007dbc:	f7f8 fc24 	bl	8000608 <__aeabi_dmul>
 8007dc0:	a385      	add	r3, pc, #532	; (adr r3, 8007fd8 <__ieee754_asin+0x2f8>)
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	f7f8 fa67 	bl	8000298 <__aeabi_dsub>
 8007dca:	4622      	mov	r2, r4
 8007dcc:	462b      	mov	r3, r5
 8007dce:	f7f8 fc1b 	bl	8000608 <__aeabi_dmul>
 8007dd2:	a383      	add	r3, pc, #524	; (adr r3, 8007fe0 <__ieee754_asin+0x300>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 fa60 	bl	800029c <__adddf3>
 8007ddc:	4622      	mov	r2, r4
 8007dde:	462b      	mov	r3, r5
 8007de0:	f7f8 fc12 	bl	8000608 <__aeabi_dmul>
 8007de4:	a380      	add	r3, pc, #512	; (adr r3, 8007fe8 <__ieee754_asin+0x308>)
 8007de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dea:	f7f8 fa55 	bl	8000298 <__aeabi_dsub>
 8007dee:	4622      	mov	r2, r4
 8007df0:	462b      	mov	r3, r5
 8007df2:	f7f8 fc09 	bl	8000608 <__aeabi_dmul>
 8007df6:	a37e      	add	r3, pc, #504	; (adr r3, 8007ff0 <__ieee754_asin+0x310>)
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f7f8 fa4e 	bl	800029c <__adddf3>
 8007e00:	4622      	mov	r2, r4
 8007e02:	462b      	mov	r3, r5
 8007e04:	f7f8 fc00 	bl	8000608 <__aeabi_dmul>
 8007e08:	a37b      	add	r3, pc, #492	; (adr r3, 8007ff8 <__ieee754_asin+0x318>)
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	4680      	mov	r8, r0
 8007e10:	4689      	mov	r9, r1
 8007e12:	4620      	mov	r0, r4
 8007e14:	4629      	mov	r1, r5
 8007e16:	f7f8 fbf7 	bl	8000608 <__aeabi_dmul>
 8007e1a:	a379      	add	r3, pc, #484	; (adr r3, 8008000 <__ieee754_asin+0x320>)
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f7f8 fa3a 	bl	8000298 <__aeabi_dsub>
 8007e24:	4622      	mov	r2, r4
 8007e26:	462b      	mov	r3, r5
 8007e28:	f7f8 fbee 	bl	8000608 <__aeabi_dmul>
 8007e2c:	a376      	add	r3, pc, #472	; (adr r3, 8008008 <__ieee754_asin+0x328>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f7f8 fa33 	bl	800029c <__adddf3>
 8007e36:	4622      	mov	r2, r4
 8007e38:	462b      	mov	r3, r5
 8007e3a:	f7f8 fbe5 	bl	8000608 <__aeabi_dmul>
 8007e3e:	a374      	add	r3, pc, #464	; (adr r3, 8008010 <__ieee754_asin+0x330>)
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f7f8 fa28 	bl	8000298 <__aeabi_dsub>
 8007e48:	4622      	mov	r2, r4
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	f7f8 fbdc 	bl	8000608 <__aeabi_dmul>
 8007e50:	4b73      	ldr	r3, [pc, #460]	; (8008020 <__ieee754_asin+0x340>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	f7f8 fa22 	bl	800029c <__adddf3>
 8007e58:	ec45 4b10 	vmov	d0, r4, r5
 8007e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e60:	f000 ff3c 	bl	8008cdc <__ieee754_sqrt>
 8007e64:	4b70      	ldr	r3, [pc, #448]	; (8008028 <__ieee754_asin+0x348>)
 8007e66:	429f      	cmp	r7, r3
 8007e68:	ec5b ab10 	vmov	sl, fp, d0
 8007e6c:	f340 80de 	ble.w	800802c <__ieee754_asin+0x34c>
 8007e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e74:	4640      	mov	r0, r8
 8007e76:	4649      	mov	r1, r9
 8007e78:	f7f8 fcf0 	bl	800085c <__aeabi_ddiv>
 8007e7c:	4652      	mov	r2, sl
 8007e7e:	465b      	mov	r3, fp
 8007e80:	f7f8 fbc2 	bl	8000608 <__aeabi_dmul>
 8007e84:	4652      	mov	r2, sl
 8007e86:	465b      	mov	r3, fp
 8007e88:	f7f8 fa08 	bl	800029c <__adddf3>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	f7f8 fa04 	bl	800029c <__adddf3>
 8007e94:	a348      	add	r3, pc, #288	; (adr r3, 8007fb8 <__ieee754_asin+0x2d8>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	f7f8 f9fd 	bl	8000298 <__aeabi_dsub>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	a143      	add	r1, pc, #268	; (adr r1, 8007fb0 <__ieee754_asin+0x2d0>)
 8007ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ea8:	f7f8 f9f6 	bl	8000298 <__aeabi_dsub>
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfdc      	itt	le
 8007eb2:	4602      	movle	r2, r0
 8007eb4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007eb8:	4604      	mov	r4, r0
 8007eba:	460d      	mov	r5, r1
 8007ebc:	bfdc      	itt	le
 8007ebe:	4614      	movle	r4, r2
 8007ec0:	461d      	movle	r5, r3
 8007ec2:	e745      	b.n	8007d50 <__ieee754_asin+0x70>
 8007ec4:	ee10 2a10 	vmov	r2, s0
 8007ec8:	ee10 0a10 	vmov	r0, s0
 8007ecc:	462b      	mov	r3, r5
 8007ece:	4629      	mov	r1, r5
 8007ed0:	f7f8 fb9a 	bl	8000608 <__aeabi_dmul>
 8007ed4:	a33c      	add	r3, pc, #240	; (adr r3, 8007fc8 <__ieee754_asin+0x2e8>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	4606      	mov	r6, r0
 8007edc:	460f      	mov	r7, r1
 8007ede:	f7f8 fb93 	bl	8000608 <__aeabi_dmul>
 8007ee2:	a33b      	add	r3, pc, #236	; (adr r3, 8007fd0 <__ieee754_asin+0x2f0>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 f9d8 	bl	800029c <__adddf3>
 8007eec:	4632      	mov	r2, r6
 8007eee:	463b      	mov	r3, r7
 8007ef0:	f7f8 fb8a 	bl	8000608 <__aeabi_dmul>
 8007ef4:	a338      	add	r3, pc, #224	; (adr r3, 8007fd8 <__ieee754_asin+0x2f8>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	f7f8 f9cd 	bl	8000298 <__aeabi_dsub>
 8007efe:	4632      	mov	r2, r6
 8007f00:	463b      	mov	r3, r7
 8007f02:	f7f8 fb81 	bl	8000608 <__aeabi_dmul>
 8007f06:	a336      	add	r3, pc, #216	; (adr r3, 8007fe0 <__ieee754_asin+0x300>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	f7f8 f9c6 	bl	800029c <__adddf3>
 8007f10:	4632      	mov	r2, r6
 8007f12:	463b      	mov	r3, r7
 8007f14:	f7f8 fb78 	bl	8000608 <__aeabi_dmul>
 8007f18:	a333      	add	r3, pc, #204	; (adr r3, 8007fe8 <__ieee754_asin+0x308>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	f7f8 f9bb 	bl	8000298 <__aeabi_dsub>
 8007f22:	4632      	mov	r2, r6
 8007f24:	463b      	mov	r3, r7
 8007f26:	f7f8 fb6f 	bl	8000608 <__aeabi_dmul>
 8007f2a:	a331      	add	r3, pc, #196	; (adr r3, 8007ff0 <__ieee754_asin+0x310>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f7f8 f9b4 	bl	800029c <__adddf3>
 8007f34:	4632      	mov	r2, r6
 8007f36:	463b      	mov	r3, r7
 8007f38:	f7f8 fb66 	bl	8000608 <__aeabi_dmul>
 8007f3c:	a32e      	add	r3, pc, #184	; (adr r3, 8007ff8 <__ieee754_asin+0x318>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	4680      	mov	r8, r0
 8007f44:	4689      	mov	r9, r1
 8007f46:	4630      	mov	r0, r6
 8007f48:	4639      	mov	r1, r7
 8007f4a:	f7f8 fb5d 	bl	8000608 <__aeabi_dmul>
 8007f4e:	a32c      	add	r3, pc, #176	; (adr r3, 8008000 <__ieee754_asin+0x320>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f7f8 f9a0 	bl	8000298 <__aeabi_dsub>
 8007f58:	4632      	mov	r2, r6
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	f7f8 fb54 	bl	8000608 <__aeabi_dmul>
 8007f60:	a329      	add	r3, pc, #164	; (adr r3, 8008008 <__ieee754_asin+0x328>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 f999 	bl	800029c <__adddf3>
 8007f6a:	4632      	mov	r2, r6
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	f7f8 fb4b 	bl	8000608 <__aeabi_dmul>
 8007f72:	a327      	add	r3, pc, #156	; (adr r3, 8008010 <__ieee754_asin+0x330>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	f7f8 f98e 	bl	8000298 <__aeabi_dsub>
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	463b      	mov	r3, r7
 8007f80:	f7f8 fb42 	bl	8000608 <__aeabi_dmul>
 8007f84:	2200      	movs	r2, #0
 8007f86:	4b26      	ldr	r3, [pc, #152]	; (8008020 <__ieee754_asin+0x340>)
 8007f88:	f7f8 f988 	bl	800029c <__adddf3>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4640      	mov	r0, r8
 8007f92:	4649      	mov	r1, r9
 8007f94:	f7f8 fc62 	bl	800085c <__aeabi_ddiv>
 8007f98:	4622      	mov	r2, r4
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	f7f8 fb34 	bl	8000608 <__aeabi_dmul>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	e6c2      	b.n	8007d30 <__ieee754_asin+0x50>
 8007faa:	bf00      	nop
 8007fac:	f3af 8000 	nop.w
 8007fb0:	54442d18 	.word	0x54442d18
 8007fb4:	3ff921fb 	.word	0x3ff921fb
 8007fb8:	33145c07 	.word	0x33145c07
 8007fbc:	3c91a626 	.word	0x3c91a626
 8007fc0:	8800759c 	.word	0x8800759c
 8007fc4:	7e37e43c 	.word	0x7e37e43c
 8007fc8:	0dfdf709 	.word	0x0dfdf709
 8007fcc:	3f023de1 	.word	0x3f023de1
 8007fd0:	7501b288 	.word	0x7501b288
 8007fd4:	3f49efe0 	.word	0x3f49efe0
 8007fd8:	b5688f3b 	.word	0xb5688f3b
 8007fdc:	3fa48228 	.word	0x3fa48228
 8007fe0:	0e884455 	.word	0x0e884455
 8007fe4:	3fc9c155 	.word	0x3fc9c155
 8007fe8:	03eb6f7d 	.word	0x03eb6f7d
 8007fec:	3fd4d612 	.word	0x3fd4d612
 8007ff0:	55555555 	.word	0x55555555
 8007ff4:	3fc55555 	.word	0x3fc55555
 8007ff8:	b12e9282 	.word	0xb12e9282
 8007ffc:	3fb3b8c5 	.word	0x3fb3b8c5
 8008000:	1b8d0159 	.word	0x1b8d0159
 8008004:	3fe6066c 	.word	0x3fe6066c
 8008008:	9c598ac8 	.word	0x9c598ac8
 800800c:	40002ae5 	.word	0x40002ae5
 8008010:	1c8a2d4b 	.word	0x1c8a2d4b
 8008014:	40033a27 	.word	0x40033a27
 8008018:	3fefffff 	.word	0x3fefffff
 800801c:	3fdfffff 	.word	0x3fdfffff
 8008020:	3ff00000 	.word	0x3ff00000
 8008024:	3fe00000 	.word	0x3fe00000
 8008028:	3fef3332 	.word	0x3fef3332
 800802c:	ee10 2a10 	vmov	r2, s0
 8008030:	ee10 0a10 	vmov	r0, s0
 8008034:	465b      	mov	r3, fp
 8008036:	4659      	mov	r1, fp
 8008038:	f7f8 f930 	bl	800029c <__adddf3>
 800803c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008040:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008044:	4640      	mov	r0, r8
 8008046:	4649      	mov	r1, r9
 8008048:	f7f8 fc08 	bl	800085c <__aeabi_ddiv>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008054:	f7f8 fad8 	bl	8000608 <__aeabi_dmul>
 8008058:	2600      	movs	r6, #0
 800805a:	4680      	mov	r8, r0
 800805c:	4689      	mov	r9, r1
 800805e:	4632      	mov	r2, r6
 8008060:	465b      	mov	r3, fp
 8008062:	4630      	mov	r0, r6
 8008064:	4659      	mov	r1, fp
 8008066:	f7f8 facf 	bl	8000608 <__aeabi_dmul>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4620      	mov	r0, r4
 8008070:	4629      	mov	r1, r5
 8008072:	f7f8 f911 	bl	8000298 <__aeabi_dsub>
 8008076:	4632      	mov	r2, r6
 8008078:	4604      	mov	r4, r0
 800807a:	460d      	mov	r5, r1
 800807c:	465b      	mov	r3, fp
 800807e:	4650      	mov	r0, sl
 8008080:	4659      	mov	r1, fp
 8008082:	f7f8 f90b 	bl	800029c <__adddf3>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	4620      	mov	r0, r4
 800808c:	4629      	mov	r1, r5
 800808e:	f7f8 fbe5 	bl	800085c <__aeabi_ddiv>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	f7f8 f901 	bl	800029c <__adddf3>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	a114      	add	r1, pc, #80	; (adr r1, 80080f0 <__ieee754_asin+0x410>)
 80080a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080a4:	f7f8 f8f8 	bl	8000298 <__aeabi_dsub>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4640      	mov	r0, r8
 80080ae:	4649      	mov	r1, r9
 80080b0:	f7f8 f8f2 	bl	8000298 <__aeabi_dsub>
 80080b4:	465f      	mov	r7, fp
 80080b6:	4604      	mov	r4, r0
 80080b8:	460d      	mov	r5, r1
 80080ba:	4632      	mov	r2, r6
 80080bc:	465b      	mov	r3, fp
 80080be:	4630      	mov	r0, r6
 80080c0:	4639      	mov	r1, r7
 80080c2:	f7f8 f8eb 	bl	800029c <__adddf3>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	a10b      	add	r1, pc, #44	; (adr r1, 80080f8 <__ieee754_asin+0x418>)
 80080cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d0:	f7f8 f8e2 	bl	8000298 <__aeabi_dsub>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4620      	mov	r0, r4
 80080da:	4629      	mov	r1, r5
 80080dc:	f7f8 f8dc 	bl	8000298 <__aeabi_dsub>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	a104      	add	r1, pc, #16	; (adr r1, 80080f8 <__ieee754_asin+0x418>)
 80080e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ea:	e6dd      	b.n	8007ea8 <__ieee754_asin+0x1c8>
 80080ec:	f3af 8000 	nop.w
 80080f0:	33145c07 	.word	0x33145c07
 80080f4:	3c91a626 	.word	0x3c91a626
 80080f8:	54442d18 	.word	0x54442d18
 80080fc:	3fe921fb 	.word	0x3fe921fb

08008100 <__ieee754_atan2>:
 8008100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008104:	ec57 6b11 	vmov	r6, r7, d1
 8008108:	4273      	negs	r3, r6
 800810a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800810e:	4333      	orrs	r3, r6
 8008110:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80082b8 <__ieee754_atan2+0x1b8>
 8008114:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008118:	4573      	cmp	r3, lr
 800811a:	ec51 0b10 	vmov	r0, r1, d0
 800811e:	ee11 8a10 	vmov	r8, s2
 8008122:	d80a      	bhi.n	800813a <__ieee754_atan2+0x3a>
 8008124:	4244      	negs	r4, r0
 8008126:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800812a:	4304      	orrs	r4, r0
 800812c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008130:	4574      	cmp	r4, lr
 8008132:	468c      	mov	ip, r1
 8008134:	ee10 9a10 	vmov	r9, s0
 8008138:	d907      	bls.n	800814a <__ieee754_atan2+0x4a>
 800813a:	4632      	mov	r2, r6
 800813c:	463b      	mov	r3, r7
 800813e:	f7f8 f8ad 	bl	800029c <__adddf3>
 8008142:	ec41 0b10 	vmov	d0, r0, r1
 8008146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800814e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008152:	4334      	orrs	r4, r6
 8008154:	d103      	bne.n	800815e <__ieee754_atan2+0x5e>
 8008156:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800815a:	f000 be71 	b.w	8008e40 <atan>
 800815e:	17bc      	asrs	r4, r7, #30
 8008160:	f004 0402 	and.w	r4, r4, #2
 8008164:	ea53 0909 	orrs.w	r9, r3, r9
 8008168:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800816c:	d107      	bne.n	800817e <__ieee754_atan2+0x7e>
 800816e:	2c02      	cmp	r4, #2
 8008170:	d073      	beq.n	800825a <__ieee754_atan2+0x15a>
 8008172:	2c03      	cmp	r4, #3
 8008174:	d1e5      	bne.n	8008142 <__ieee754_atan2+0x42>
 8008176:	a13e      	add	r1, pc, #248	; (adr r1, 8008270 <__ieee754_atan2+0x170>)
 8008178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800817c:	e7e1      	b.n	8008142 <__ieee754_atan2+0x42>
 800817e:	ea52 0808 	orrs.w	r8, r2, r8
 8008182:	d106      	bne.n	8008192 <__ieee754_atan2+0x92>
 8008184:	f1bc 0f00 	cmp.w	ip, #0
 8008188:	da6b      	bge.n	8008262 <__ieee754_atan2+0x162>
 800818a:	a13b      	add	r1, pc, #236	; (adr r1, 8008278 <__ieee754_atan2+0x178>)
 800818c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008190:	e7d7      	b.n	8008142 <__ieee754_atan2+0x42>
 8008192:	4572      	cmp	r2, lr
 8008194:	d120      	bne.n	80081d8 <__ieee754_atan2+0xd8>
 8008196:	4293      	cmp	r3, r2
 8008198:	d111      	bne.n	80081be <__ieee754_atan2+0xbe>
 800819a:	2c02      	cmp	r4, #2
 800819c:	d007      	beq.n	80081ae <__ieee754_atan2+0xae>
 800819e:	2c03      	cmp	r4, #3
 80081a0:	d009      	beq.n	80081b6 <__ieee754_atan2+0xb6>
 80081a2:	2c01      	cmp	r4, #1
 80081a4:	d155      	bne.n	8008252 <__ieee754_atan2+0x152>
 80081a6:	a136      	add	r1, pc, #216	; (adr r1, 8008280 <__ieee754_atan2+0x180>)
 80081a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ac:	e7c9      	b.n	8008142 <__ieee754_atan2+0x42>
 80081ae:	a136      	add	r1, pc, #216	; (adr r1, 8008288 <__ieee754_atan2+0x188>)
 80081b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081b4:	e7c5      	b.n	8008142 <__ieee754_atan2+0x42>
 80081b6:	a136      	add	r1, pc, #216	; (adr r1, 8008290 <__ieee754_atan2+0x190>)
 80081b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081bc:	e7c1      	b.n	8008142 <__ieee754_atan2+0x42>
 80081be:	2c02      	cmp	r4, #2
 80081c0:	d04b      	beq.n	800825a <__ieee754_atan2+0x15a>
 80081c2:	2c03      	cmp	r4, #3
 80081c4:	d0d7      	beq.n	8008176 <__ieee754_atan2+0x76>
 80081c6:	2c01      	cmp	r4, #1
 80081c8:	f04f 0000 	mov.w	r0, #0
 80081cc:	d102      	bne.n	80081d4 <__ieee754_atan2+0xd4>
 80081ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80081d2:	e7b6      	b.n	8008142 <__ieee754_atan2+0x42>
 80081d4:	2100      	movs	r1, #0
 80081d6:	e7b4      	b.n	8008142 <__ieee754_atan2+0x42>
 80081d8:	4573      	cmp	r3, lr
 80081da:	d0d3      	beq.n	8008184 <__ieee754_atan2+0x84>
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	151b      	asrs	r3, r3, #20
 80081e0:	2b3c      	cmp	r3, #60	; 0x3c
 80081e2:	dc1e      	bgt.n	8008222 <__ieee754_atan2+0x122>
 80081e4:	2f00      	cmp	r7, #0
 80081e6:	da01      	bge.n	80081ec <__ieee754_atan2+0xec>
 80081e8:	333c      	adds	r3, #60	; 0x3c
 80081ea:	db1e      	blt.n	800822a <__ieee754_atan2+0x12a>
 80081ec:	4632      	mov	r2, r6
 80081ee:	463b      	mov	r3, r7
 80081f0:	f7f8 fb34 	bl	800085c <__aeabi_ddiv>
 80081f4:	ec41 0b10 	vmov	d0, r0, r1
 80081f8:	f000 ffc2 	bl	8009180 <fabs>
 80081fc:	f000 fe20 	bl	8008e40 <atan>
 8008200:	ec51 0b10 	vmov	r0, r1, d0
 8008204:	2c01      	cmp	r4, #1
 8008206:	d013      	beq.n	8008230 <__ieee754_atan2+0x130>
 8008208:	2c02      	cmp	r4, #2
 800820a:	d015      	beq.n	8008238 <__ieee754_atan2+0x138>
 800820c:	2c00      	cmp	r4, #0
 800820e:	d098      	beq.n	8008142 <__ieee754_atan2+0x42>
 8008210:	a321      	add	r3, pc, #132	; (adr r3, 8008298 <__ieee754_atan2+0x198>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f8 f83f 	bl	8000298 <__aeabi_dsub>
 800821a:	a321      	add	r3, pc, #132	; (adr r3, 80082a0 <__ieee754_atan2+0x1a0>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	e014      	b.n	800824c <__ieee754_atan2+0x14c>
 8008222:	a121      	add	r1, pc, #132	; (adr r1, 80082a8 <__ieee754_atan2+0x1a8>)
 8008224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008228:	e7ec      	b.n	8008204 <__ieee754_atan2+0x104>
 800822a:	2000      	movs	r0, #0
 800822c:	2100      	movs	r1, #0
 800822e:	e7e9      	b.n	8008204 <__ieee754_atan2+0x104>
 8008230:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008234:	4619      	mov	r1, r3
 8008236:	e784      	b.n	8008142 <__ieee754_atan2+0x42>
 8008238:	a317      	add	r3, pc, #92	; (adr r3, 8008298 <__ieee754_atan2+0x198>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 f82b 	bl	8000298 <__aeabi_dsub>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	a116      	add	r1, pc, #88	; (adr r1, 80082a0 <__ieee754_atan2+0x1a0>)
 8008248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800824c:	f7f8 f824 	bl	8000298 <__aeabi_dsub>
 8008250:	e777      	b.n	8008142 <__ieee754_atan2+0x42>
 8008252:	a117      	add	r1, pc, #92	; (adr r1, 80082b0 <__ieee754_atan2+0x1b0>)
 8008254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008258:	e773      	b.n	8008142 <__ieee754_atan2+0x42>
 800825a:	a111      	add	r1, pc, #68	; (adr r1, 80082a0 <__ieee754_atan2+0x1a0>)
 800825c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008260:	e76f      	b.n	8008142 <__ieee754_atan2+0x42>
 8008262:	a111      	add	r1, pc, #68	; (adr r1, 80082a8 <__ieee754_atan2+0x1a8>)
 8008264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008268:	e76b      	b.n	8008142 <__ieee754_atan2+0x42>
 800826a:	bf00      	nop
 800826c:	f3af 8000 	nop.w
 8008270:	54442d18 	.word	0x54442d18
 8008274:	c00921fb 	.word	0xc00921fb
 8008278:	54442d18 	.word	0x54442d18
 800827c:	bff921fb 	.word	0xbff921fb
 8008280:	54442d18 	.word	0x54442d18
 8008284:	bfe921fb 	.word	0xbfe921fb
 8008288:	7f3321d2 	.word	0x7f3321d2
 800828c:	4002d97c 	.word	0x4002d97c
 8008290:	7f3321d2 	.word	0x7f3321d2
 8008294:	c002d97c 	.word	0xc002d97c
 8008298:	33145c07 	.word	0x33145c07
 800829c:	3ca1a626 	.word	0x3ca1a626
 80082a0:	54442d18 	.word	0x54442d18
 80082a4:	400921fb 	.word	0x400921fb
 80082a8:	54442d18 	.word	0x54442d18
 80082ac:	3ff921fb 	.word	0x3ff921fb
 80082b0:	54442d18 	.word	0x54442d18
 80082b4:	3fe921fb 	.word	0x3fe921fb
 80082b8:	7ff00000 	.word	0x7ff00000
 80082bc:	00000000 	.word	0x00000000

080082c0 <__ieee754_pow>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	b091      	sub	sp, #68	; 0x44
 80082c6:	ed8d 1b00 	vstr	d1, [sp]
 80082ca:	e9dd 2900 	ldrd	r2, r9, [sp]
 80082ce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80082d2:	ea58 0302 	orrs.w	r3, r8, r2
 80082d6:	ec57 6b10 	vmov	r6, r7, d0
 80082da:	f000 84be 	beq.w	8008c5a <__ieee754_pow+0x99a>
 80082de:	4b7a      	ldr	r3, [pc, #488]	; (80084c8 <__ieee754_pow+0x208>)
 80082e0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80082e4:	429c      	cmp	r4, r3
 80082e6:	463d      	mov	r5, r7
 80082e8:	ee10 aa10 	vmov	sl, s0
 80082ec:	dc09      	bgt.n	8008302 <__ieee754_pow+0x42>
 80082ee:	d103      	bne.n	80082f8 <__ieee754_pow+0x38>
 80082f0:	b93e      	cbnz	r6, 8008302 <__ieee754_pow+0x42>
 80082f2:	45a0      	cmp	r8, r4
 80082f4:	dc0d      	bgt.n	8008312 <__ieee754_pow+0x52>
 80082f6:	e001      	b.n	80082fc <__ieee754_pow+0x3c>
 80082f8:	4598      	cmp	r8, r3
 80082fa:	dc02      	bgt.n	8008302 <__ieee754_pow+0x42>
 80082fc:	4598      	cmp	r8, r3
 80082fe:	d10e      	bne.n	800831e <__ieee754_pow+0x5e>
 8008300:	b16a      	cbz	r2, 800831e <__ieee754_pow+0x5e>
 8008302:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008306:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800830a:	ea54 030a 	orrs.w	r3, r4, sl
 800830e:	f000 84a4 	beq.w	8008c5a <__ieee754_pow+0x99a>
 8008312:	486e      	ldr	r0, [pc, #440]	; (80084cc <__ieee754_pow+0x20c>)
 8008314:	b011      	add	sp, #68	; 0x44
 8008316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	f000 bf45 	b.w	80091a8 <nan>
 800831e:	2d00      	cmp	r5, #0
 8008320:	da53      	bge.n	80083ca <__ieee754_pow+0x10a>
 8008322:	4b6b      	ldr	r3, [pc, #428]	; (80084d0 <__ieee754_pow+0x210>)
 8008324:	4598      	cmp	r8, r3
 8008326:	dc4d      	bgt.n	80083c4 <__ieee754_pow+0x104>
 8008328:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800832c:	4598      	cmp	r8, r3
 800832e:	dd4c      	ble.n	80083ca <__ieee754_pow+0x10a>
 8008330:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008334:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008338:	2b14      	cmp	r3, #20
 800833a:	dd26      	ble.n	800838a <__ieee754_pow+0xca>
 800833c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008340:	fa22 f103 	lsr.w	r1, r2, r3
 8008344:	fa01 f303 	lsl.w	r3, r1, r3
 8008348:	4293      	cmp	r3, r2
 800834a:	d13e      	bne.n	80083ca <__ieee754_pow+0x10a>
 800834c:	f001 0101 	and.w	r1, r1, #1
 8008350:	f1c1 0b02 	rsb	fp, r1, #2
 8008354:	2a00      	cmp	r2, #0
 8008356:	d15b      	bne.n	8008410 <__ieee754_pow+0x150>
 8008358:	4b5b      	ldr	r3, [pc, #364]	; (80084c8 <__ieee754_pow+0x208>)
 800835a:	4598      	cmp	r8, r3
 800835c:	d124      	bne.n	80083a8 <__ieee754_pow+0xe8>
 800835e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008362:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008366:	ea53 030a 	orrs.w	r3, r3, sl
 800836a:	f000 8476 	beq.w	8008c5a <__ieee754_pow+0x99a>
 800836e:	4b59      	ldr	r3, [pc, #356]	; (80084d4 <__ieee754_pow+0x214>)
 8008370:	429c      	cmp	r4, r3
 8008372:	dd2d      	ble.n	80083d0 <__ieee754_pow+0x110>
 8008374:	f1b9 0f00 	cmp.w	r9, #0
 8008378:	f280 8473 	bge.w	8008c62 <__ieee754_pow+0x9a2>
 800837c:	2000      	movs	r0, #0
 800837e:	2100      	movs	r1, #0
 8008380:	ec41 0b10 	vmov	d0, r0, r1
 8008384:	b011      	add	sp, #68	; 0x44
 8008386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838a:	2a00      	cmp	r2, #0
 800838c:	d13e      	bne.n	800840c <__ieee754_pow+0x14c>
 800838e:	f1c3 0314 	rsb	r3, r3, #20
 8008392:	fa48 f103 	asr.w	r1, r8, r3
 8008396:	fa01 f303 	lsl.w	r3, r1, r3
 800839a:	4543      	cmp	r3, r8
 800839c:	f040 8469 	bne.w	8008c72 <__ieee754_pow+0x9b2>
 80083a0:	f001 0101 	and.w	r1, r1, #1
 80083a4:	f1c1 0b02 	rsb	fp, r1, #2
 80083a8:	4b4b      	ldr	r3, [pc, #300]	; (80084d8 <__ieee754_pow+0x218>)
 80083aa:	4598      	cmp	r8, r3
 80083ac:	d118      	bne.n	80083e0 <__ieee754_pow+0x120>
 80083ae:	f1b9 0f00 	cmp.w	r9, #0
 80083b2:	f280 845a 	bge.w	8008c6a <__ieee754_pow+0x9aa>
 80083b6:	4948      	ldr	r1, [pc, #288]	; (80084d8 <__ieee754_pow+0x218>)
 80083b8:	4632      	mov	r2, r6
 80083ba:	463b      	mov	r3, r7
 80083bc:	2000      	movs	r0, #0
 80083be:	f7f8 fa4d 	bl	800085c <__aeabi_ddiv>
 80083c2:	e7dd      	b.n	8008380 <__ieee754_pow+0xc0>
 80083c4:	f04f 0b02 	mov.w	fp, #2
 80083c8:	e7c4      	b.n	8008354 <__ieee754_pow+0x94>
 80083ca:	f04f 0b00 	mov.w	fp, #0
 80083ce:	e7c1      	b.n	8008354 <__ieee754_pow+0x94>
 80083d0:	f1b9 0f00 	cmp.w	r9, #0
 80083d4:	dad2      	bge.n	800837c <__ieee754_pow+0xbc>
 80083d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80083da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80083de:	e7cf      	b.n	8008380 <__ieee754_pow+0xc0>
 80083e0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80083e4:	d106      	bne.n	80083f4 <__ieee754_pow+0x134>
 80083e6:	4632      	mov	r2, r6
 80083e8:	463b      	mov	r3, r7
 80083ea:	4610      	mov	r0, r2
 80083ec:	4619      	mov	r1, r3
 80083ee:	f7f8 f90b 	bl	8000608 <__aeabi_dmul>
 80083f2:	e7c5      	b.n	8008380 <__ieee754_pow+0xc0>
 80083f4:	4b39      	ldr	r3, [pc, #228]	; (80084dc <__ieee754_pow+0x21c>)
 80083f6:	4599      	cmp	r9, r3
 80083f8:	d10a      	bne.n	8008410 <__ieee754_pow+0x150>
 80083fa:	2d00      	cmp	r5, #0
 80083fc:	db08      	blt.n	8008410 <__ieee754_pow+0x150>
 80083fe:	ec47 6b10 	vmov	d0, r6, r7
 8008402:	b011      	add	sp, #68	; 0x44
 8008404:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008408:	f000 bc68 	b.w	8008cdc <__ieee754_sqrt>
 800840c:	f04f 0b00 	mov.w	fp, #0
 8008410:	ec47 6b10 	vmov	d0, r6, r7
 8008414:	f000 feb4 	bl	8009180 <fabs>
 8008418:	ec51 0b10 	vmov	r0, r1, d0
 800841c:	f1ba 0f00 	cmp.w	sl, #0
 8008420:	d127      	bne.n	8008472 <__ieee754_pow+0x1b2>
 8008422:	b124      	cbz	r4, 800842e <__ieee754_pow+0x16e>
 8008424:	4b2c      	ldr	r3, [pc, #176]	; (80084d8 <__ieee754_pow+0x218>)
 8008426:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800842a:	429a      	cmp	r2, r3
 800842c:	d121      	bne.n	8008472 <__ieee754_pow+0x1b2>
 800842e:	f1b9 0f00 	cmp.w	r9, #0
 8008432:	da05      	bge.n	8008440 <__ieee754_pow+0x180>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	2000      	movs	r0, #0
 800843a:	4927      	ldr	r1, [pc, #156]	; (80084d8 <__ieee754_pow+0x218>)
 800843c:	f7f8 fa0e 	bl	800085c <__aeabi_ddiv>
 8008440:	2d00      	cmp	r5, #0
 8008442:	da9d      	bge.n	8008380 <__ieee754_pow+0xc0>
 8008444:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008448:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800844c:	ea54 030b 	orrs.w	r3, r4, fp
 8008450:	d108      	bne.n	8008464 <__ieee754_pow+0x1a4>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4610      	mov	r0, r2
 8008458:	4619      	mov	r1, r3
 800845a:	f7f7 ff1d 	bl	8000298 <__aeabi_dsub>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	e7ac      	b.n	80083be <__ieee754_pow+0xfe>
 8008464:	f1bb 0f01 	cmp.w	fp, #1
 8008468:	d18a      	bne.n	8008380 <__ieee754_pow+0xc0>
 800846a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800846e:	4619      	mov	r1, r3
 8008470:	e786      	b.n	8008380 <__ieee754_pow+0xc0>
 8008472:	0fed      	lsrs	r5, r5, #31
 8008474:	1e6b      	subs	r3, r5, #1
 8008476:	930d      	str	r3, [sp, #52]	; 0x34
 8008478:	ea5b 0303 	orrs.w	r3, fp, r3
 800847c:	d102      	bne.n	8008484 <__ieee754_pow+0x1c4>
 800847e:	4632      	mov	r2, r6
 8008480:	463b      	mov	r3, r7
 8008482:	e7e8      	b.n	8008456 <__ieee754_pow+0x196>
 8008484:	4b16      	ldr	r3, [pc, #88]	; (80084e0 <__ieee754_pow+0x220>)
 8008486:	4598      	cmp	r8, r3
 8008488:	f340 80fe 	ble.w	8008688 <__ieee754_pow+0x3c8>
 800848c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008490:	4598      	cmp	r8, r3
 8008492:	dd0a      	ble.n	80084aa <__ieee754_pow+0x1ea>
 8008494:	4b0f      	ldr	r3, [pc, #60]	; (80084d4 <__ieee754_pow+0x214>)
 8008496:	429c      	cmp	r4, r3
 8008498:	dc0d      	bgt.n	80084b6 <__ieee754_pow+0x1f6>
 800849a:	f1b9 0f00 	cmp.w	r9, #0
 800849e:	f6bf af6d 	bge.w	800837c <__ieee754_pow+0xbc>
 80084a2:	a307      	add	r3, pc, #28	; (adr r3, 80084c0 <__ieee754_pow+0x200>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	e79f      	b.n	80083ea <__ieee754_pow+0x12a>
 80084aa:	4b0e      	ldr	r3, [pc, #56]	; (80084e4 <__ieee754_pow+0x224>)
 80084ac:	429c      	cmp	r4, r3
 80084ae:	ddf4      	ble.n	800849a <__ieee754_pow+0x1da>
 80084b0:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <__ieee754_pow+0x218>)
 80084b2:	429c      	cmp	r4, r3
 80084b4:	dd18      	ble.n	80084e8 <__ieee754_pow+0x228>
 80084b6:	f1b9 0f00 	cmp.w	r9, #0
 80084ba:	dcf2      	bgt.n	80084a2 <__ieee754_pow+0x1e2>
 80084bc:	e75e      	b.n	800837c <__ieee754_pow+0xbc>
 80084be:	bf00      	nop
 80084c0:	8800759c 	.word	0x8800759c
 80084c4:	7e37e43c 	.word	0x7e37e43c
 80084c8:	7ff00000 	.word	0x7ff00000
 80084cc:	08009849 	.word	0x08009849
 80084d0:	433fffff 	.word	0x433fffff
 80084d4:	3fefffff 	.word	0x3fefffff
 80084d8:	3ff00000 	.word	0x3ff00000
 80084dc:	3fe00000 	.word	0x3fe00000
 80084e0:	41e00000 	.word	0x41e00000
 80084e4:	3feffffe 	.word	0x3feffffe
 80084e8:	2200      	movs	r2, #0
 80084ea:	4b63      	ldr	r3, [pc, #396]	; (8008678 <__ieee754_pow+0x3b8>)
 80084ec:	f7f7 fed4 	bl	8000298 <__aeabi_dsub>
 80084f0:	a355      	add	r3, pc, #340	; (adr r3, 8008648 <__ieee754_pow+0x388>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	4604      	mov	r4, r0
 80084f8:	460d      	mov	r5, r1
 80084fa:	f7f8 f885 	bl	8000608 <__aeabi_dmul>
 80084fe:	a354      	add	r3, pc, #336	; (adr r3, 8008650 <__ieee754_pow+0x390>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	4606      	mov	r6, r0
 8008506:	460f      	mov	r7, r1
 8008508:	4620      	mov	r0, r4
 800850a:	4629      	mov	r1, r5
 800850c:	f7f8 f87c 	bl	8000608 <__aeabi_dmul>
 8008510:	2200      	movs	r2, #0
 8008512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008516:	4b59      	ldr	r3, [pc, #356]	; (800867c <__ieee754_pow+0x3bc>)
 8008518:	4620      	mov	r0, r4
 800851a:	4629      	mov	r1, r5
 800851c:	f7f8 f874 	bl	8000608 <__aeabi_dmul>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	a14c      	add	r1, pc, #304	; (adr r1, 8008658 <__ieee754_pow+0x398>)
 8008526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800852a:	f7f7 feb5 	bl	8000298 <__aeabi_dsub>
 800852e:	4622      	mov	r2, r4
 8008530:	462b      	mov	r3, r5
 8008532:	f7f8 f869 	bl	8000608 <__aeabi_dmul>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	2000      	movs	r0, #0
 800853c:	4950      	ldr	r1, [pc, #320]	; (8008680 <__ieee754_pow+0x3c0>)
 800853e:	f7f7 feab 	bl	8000298 <__aeabi_dsub>
 8008542:	4622      	mov	r2, r4
 8008544:	462b      	mov	r3, r5
 8008546:	4680      	mov	r8, r0
 8008548:	4689      	mov	r9, r1
 800854a:	4620      	mov	r0, r4
 800854c:	4629      	mov	r1, r5
 800854e:	f7f8 f85b 	bl	8000608 <__aeabi_dmul>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4640      	mov	r0, r8
 8008558:	4649      	mov	r1, r9
 800855a:	f7f8 f855 	bl	8000608 <__aeabi_dmul>
 800855e:	a340      	add	r3, pc, #256	; (adr r3, 8008660 <__ieee754_pow+0x3a0>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f7f8 f850 	bl	8000608 <__aeabi_dmul>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008570:	f7f7 fe92 	bl	8000298 <__aeabi_dsub>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4604      	mov	r4, r0
 800857a:	460d      	mov	r5, r1
 800857c:	4630      	mov	r0, r6
 800857e:	4639      	mov	r1, r7
 8008580:	f7f7 fe8c 	bl	800029c <__adddf3>
 8008584:	2000      	movs	r0, #0
 8008586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800858a:	4632      	mov	r2, r6
 800858c:	463b      	mov	r3, r7
 800858e:	f7f7 fe83 	bl	8000298 <__aeabi_dsub>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f7 fe7d 	bl	8000298 <__aeabi_dsub>
 800859e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085a0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80085a4:	4313      	orrs	r3, r2
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	f040 81eb 	bne.w	8008984 <__ieee754_pow+0x6c4>
 80085ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008668 <__ieee754_pow+0x3a8>
 80085b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80085b6:	2400      	movs	r4, #0
 80085b8:	4622      	mov	r2, r4
 80085ba:	462b      	mov	r3, r5
 80085bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085c4:	f7f7 fe68 	bl	8000298 <__aeabi_dsub>
 80085c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085cc:	f7f8 f81c 	bl	8000608 <__aeabi_dmul>
 80085d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085d4:	4680      	mov	r8, r0
 80085d6:	4689      	mov	r9, r1
 80085d8:	4630      	mov	r0, r6
 80085da:	4639      	mov	r1, r7
 80085dc:	f7f8 f814 	bl	8000608 <__aeabi_dmul>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4640      	mov	r0, r8
 80085e6:	4649      	mov	r1, r9
 80085e8:	f7f7 fe58 	bl	800029c <__adddf3>
 80085ec:	4622      	mov	r2, r4
 80085ee:	462b      	mov	r3, r5
 80085f0:	4680      	mov	r8, r0
 80085f2:	4689      	mov	r9, r1
 80085f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085f8:	f7f8 f806 	bl	8000608 <__aeabi_dmul>
 80085fc:	460b      	mov	r3, r1
 80085fe:	4604      	mov	r4, r0
 8008600:	460d      	mov	r5, r1
 8008602:	4602      	mov	r2, r0
 8008604:	4649      	mov	r1, r9
 8008606:	4640      	mov	r0, r8
 8008608:	e9cd 4500 	strd	r4, r5, [sp]
 800860c:	f7f7 fe46 	bl	800029c <__adddf3>
 8008610:	4b1c      	ldr	r3, [pc, #112]	; (8008684 <__ieee754_pow+0x3c4>)
 8008612:	4299      	cmp	r1, r3
 8008614:	4606      	mov	r6, r0
 8008616:	460f      	mov	r7, r1
 8008618:	468b      	mov	fp, r1
 800861a:	f340 82f7 	ble.w	8008c0c <__ieee754_pow+0x94c>
 800861e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008622:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008626:	4303      	orrs	r3, r0
 8008628:	f000 81ea 	beq.w	8008a00 <__ieee754_pow+0x740>
 800862c:	a310      	add	r3, pc, #64	; (adr r3, 8008670 <__ieee754_pow+0x3b0>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008636:	f7f7 ffe7 	bl	8000608 <__aeabi_dmul>
 800863a:	a30d      	add	r3, pc, #52	; (adr r3, 8008670 <__ieee754_pow+0x3b0>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	e6d5      	b.n	80083ee <__ieee754_pow+0x12e>
 8008642:	bf00      	nop
 8008644:	f3af 8000 	nop.w
 8008648:	60000000 	.word	0x60000000
 800864c:	3ff71547 	.word	0x3ff71547
 8008650:	f85ddf44 	.word	0xf85ddf44
 8008654:	3e54ae0b 	.word	0x3e54ae0b
 8008658:	55555555 	.word	0x55555555
 800865c:	3fd55555 	.word	0x3fd55555
 8008660:	652b82fe 	.word	0x652b82fe
 8008664:	3ff71547 	.word	0x3ff71547
 8008668:	00000000 	.word	0x00000000
 800866c:	bff00000 	.word	0xbff00000
 8008670:	8800759c 	.word	0x8800759c
 8008674:	7e37e43c 	.word	0x7e37e43c
 8008678:	3ff00000 	.word	0x3ff00000
 800867c:	3fd00000 	.word	0x3fd00000
 8008680:	3fe00000 	.word	0x3fe00000
 8008684:	408fffff 	.word	0x408fffff
 8008688:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	da05      	bge.n	800869e <__ieee754_pow+0x3de>
 8008692:	4bd3      	ldr	r3, [pc, #844]	; (80089e0 <__ieee754_pow+0x720>)
 8008694:	f7f7 ffb8 	bl	8000608 <__aeabi_dmul>
 8008698:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800869c:	460c      	mov	r4, r1
 800869e:	1523      	asrs	r3, r4, #20
 80086a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80086a4:	4413      	add	r3, r2
 80086a6:	9309      	str	r3, [sp, #36]	; 0x24
 80086a8:	4bce      	ldr	r3, [pc, #824]	; (80089e4 <__ieee754_pow+0x724>)
 80086aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80086ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80086b2:	429c      	cmp	r4, r3
 80086b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80086b8:	dd08      	ble.n	80086cc <__ieee754_pow+0x40c>
 80086ba:	4bcb      	ldr	r3, [pc, #812]	; (80089e8 <__ieee754_pow+0x728>)
 80086bc:	429c      	cmp	r4, r3
 80086be:	f340 815e 	ble.w	800897e <__ieee754_pow+0x6be>
 80086c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c4:	3301      	adds	r3, #1
 80086c6:	9309      	str	r3, [sp, #36]	; 0x24
 80086c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80086cc:	f04f 0a00 	mov.w	sl, #0
 80086d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80086d4:	930c      	str	r3, [sp, #48]	; 0x30
 80086d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086d8:	4bc4      	ldr	r3, [pc, #784]	; (80089ec <__ieee754_pow+0x72c>)
 80086da:	4413      	add	r3, r2
 80086dc:	ed93 7b00 	vldr	d7, [r3]
 80086e0:	4629      	mov	r1, r5
 80086e2:	ec53 2b17 	vmov	r2, r3, d7
 80086e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80086ee:	f7f7 fdd3 	bl	8000298 <__aeabi_dsub>
 80086f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80086f6:	4606      	mov	r6, r0
 80086f8:	460f      	mov	r7, r1
 80086fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086fe:	f7f7 fdcd 	bl	800029c <__adddf3>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	2000      	movs	r0, #0
 8008708:	49b9      	ldr	r1, [pc, #740]	; (80089f0 <__ieee754_pow+0x730>)
 800870a:	f7f8 f8a7 	bl	800085c <__aeabi_ddiv>
 800870e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4630      	mov	r0, r6
 8008718:	4639      	mov	r1, r7
 800871a:	f7f7 ff75 	bl	8000608 <__aeabi_dmul>
 800871e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008722:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008726:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800872a:	2300      	movs	r3, #0
 800872c:	9302      	str	r3, [sp, #8]
 800872e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008732:	106d      	asrs	r5, r5, #1
 8008734:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008738:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800873c:	2200      	movs	r2, #0
 800873e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008742:	4640      	mov	r0, r8
 8008744:	4649      	mov	r1, r9
 8008746:	4614      	mov	r4, r2
 8008748:	461d      	mov	r5, r3
 800874a:	f7f7 ff5d 	bl	8000608 <__aeabi_dmul>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4630      	mov	r0, r6
 8008754:	4639      	mov	r1, r7
 8008756:	f7f7 fd9f 	bl	8000298 <__aeabi_dsub>
 800875a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800875e:	4606      	mov	r6, r0
 8008760:	460f      	mov	r7, r1
 8008762:	4620      	mov	r0, r4
 8008764:	4629      	mov	r1, r5
 8008766:	f7f7 fd97 	bl	8000298 <__aeabi_dsub>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008772:	f7f7 fd91 	bl	8000298 <__aeabi_dsub>
 8008776:	4642      	mov	r2, r8
 8008778:	464b      	mov	r3, r9
 800877a:	f7f7 ff45 	bl	8000608 <__aeabi_dmul>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4630      	mov	r0, r6
 8008784:	4639      	mov	r1, r7
 8008786:	f7f7 fd87 	bl	8000298 <__aeabi_dsub>
 800878a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800878e:	f7f7 ff3b 	bl	8000608 <__aeabi_dmul>
 8008792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008796:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800879a:	4610      	mov	r0, r2
 800879c:	4619      	mov	r1, r3
 800879e:	f7f7 ff33 	bl	8000608 <__aeabi_dmul>
 80087a2:	a37b      	add	r3, pc, #492	; (adr r3, 8008990 <__ieee754_pow+0x6d0>)
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	4604      	mov	r4, r0
 80087aa:	460d      	mov	r5, r1
 80087ac:	f7f7 ff2c 	bl	8000608 <__aeabi_dmul>
 80087b0:	a379      	add	r3, pc, #484	; (adr r3, 8008998 <__ieee754_pow+0x6d8>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 fd71 	bl	800029c <__adddf3>
 80087ba:	4622      	mov	r2, r4
 80087bc:	462b      	mov	r3, r5
 80087be:	f7f7 ff23 	bl	8000608 <__aeabi_dmul>
 80087c2:	a377      	add	r3, pc, #476	; (adr r3, 80089a0 <__ieee754_pow+0x6e0>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f7f7 fd68 	bl	800029c <__adddf3>
 80087cc:	4622      	mov	r2, r4
 80087ce:	462b      	mov	r3, r5
 80087d0:	f7f7 ff1a 	bl	8000608 <__aeabi_dmul>
 80087d4:	a374      	add	r3, pc, #464	; (adr r3, 80089a8 <__ieee754_pow+0x6e8>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f7f7 fd5f 	bl	800029c <__adddf3>
 80087de:	4622      	mov	r2, r4
 80087e0:	462b      	mov	r3, r5
 80087e2:	f7f7 ff11 	bl	8000608 <__aeabi_dmul>
 80087e6:	a372      	add	r3, pc, #456	; (adr r3, 80089b0 <__ieee754_pow+0x6f0>)
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	f7f7 fd56 	bl	800029c <__adddf3>
 80087f0:	4622      	mov	r2, r4
 80087f2:	462b      	mov	r3, r5
 80087f4:	f7f7 ff08 	bl	8000608 <__aeabi_dmul>
 80087f8:	a36f      	add	r3, pc, #444	; (adr r3, 80089b8 <__ieee754_pow+0x6f8>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	f7f7 fd4d 	bl	800029c <__adddf3>
 8008802:	4622      	mov	r2, r4
 8008804:	4606      	mov	r6, r0
 8008806:	460f      	mov	r7, r1
 8008808:	462b      	mov	r3, r5
 800880a:	4620      	mov	r0, r4
 800880c:	4629      	mov	r1, r5
 800880e:	f7f7 fefb 	bl	8000608 <__aeabi_dmul>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4630      	mov	r0, r6
 8008818:	4639      	mov	r1, r7
 800881a:	f7f7 fef5 	bl	8000608 <__aeabi_dmul>
 800881e:	4642      	mov	r2, r8
 8008820:	4604      	mov	r4, r0
 8008822:	460d      	mov	r5, r1
 8008824:	464b      	mov	r3, r9
 8008826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800882a:	f7f7 fd37 	bl	800029c <__adddf3>
 800882e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008832:	f7f7 fee9 	bl	8000608 <__aeabi_dmul>
 8008836:	4622      	mov	r2, r4
 8008838:	462b      	mov	r3, r5
 800883a:	f7f7 fd2f 	bl	800029c <__adddf3>
 800883e:	4642      	mov	r2, r8
 8008840:	4606      	mov	r6, r0
 8008842:	460f      	mov	r7, r1
 8008844:	464b      	mov	r3, r9
 8008846:	4640      	mov	r0, r8
 8008848:	4649      	mov	r1, r9
 800884a:	f7f7 fedd 	bl	8000608 <__aeabi_dmul>
 800884e:	2200      	movs	r2, #0
 8008850:	4b68      	ldr	r3, [pc, #416]	; (80089f4 <__ieee754_pow+0x734>)
 8008852:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008856:	f7f7 fd21 	bl	800029c <__adddf3>
 800885a:	4632      	mov	r2, r6
 800885c:	463b      	mov	r3, r7
 800885e:	f7f7 fd1d 	bl	800029c <__adddf3>
 8008862:	9802      	ldr	r0, [sp, #8]
 8008864:	460d      	mov	r5, r1
 8008866:	4604      	mov	r4, r0
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4640      	mov	r0, r8
 800886e:	4649      	mov	r1, r9
 8008870:	f7f7 feca 	bl	8000608 <__aeabi_dmul>
 8008874:	2200      	movs	r2, #0
 8008876:	4680      	mov	r8, r0
 8008878:	4689      	mov	r9, r1
 800887a:	4b5e      	ldr	r3, [pc, #376]	; (80089f4 <__ieee754_pow+0x734>)
 800887c:	4620      	mov	r0, r4
 800887e:	4629      	mov	r1, r5
 8008880:	f7f7 fd0a 	bl	8000298 <__aeabi_dsub>
 8008884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008888:	f7f7 fd06 	bl	8000298 <__aeabi_dsub>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	f7f7 fd00 	bl	8000298 <__aeabi_dsub>
 8008898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800889c:	f7f7 feb4 	bl	8000608 <__aeabi_dmul>
 80088a0:	4622      	mov	r2, r4
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	462b      	mov	r3, r5
 80088a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088ac:	f7f7 feac 	bl	8000608 <__aeabi_dmul>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4630      	mov	r0, r6
 80088b6:	4639      	mov	r1, r7
 80088b8:	f7f7 fcf0 	bl	800029c <__adddf3>
 80088bc:	4606      	mov	r6, r0
 80088be:	460f      	mov	r7, r1
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4640      	mov	r0, r8
 80088c6:	4649      	mov	r1, r9
 80088c8:	f7f7 fce8 	bl	800029c <__adddf3>
 80088cc:	9802      	ldr	r0, [sp, #8]
 80088ce:	a33c      	add	r3, pc, #240	; (adr r3, 80089c0 <__ieee754_pow+0x700>)
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	4604      	mov	r4, r0
 80088d6:	460d      	mov	r5, r1
 80088d8:	f7f7 fe96 	bl	8000608 <__aeabi_dmul>
 80088dc:	4642      	mov	r2, r8
 80088de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088e2:	464b      	mov	r3, r9
 80088e4:	4620      	mov	r0, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	f7f7 fcd6 	bl	8000298 <__aeabi_dsub>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4630      	mov	r0, r6
 80088f2:	4639      	mov	r1, r7
 80088f4:	f7f7 fcd0 	bl	8000298 <__aeabi_dsub>
 80088f8:	a333      	add	r3, pc, #204	; (adr r3, 80089c8 <__ieee754_pow+0x708>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fe83 	bl	8000608 <__aeabi_dmul>
 8008902:	a333      	add	r3, pc, #204	; (adr r3, 80089d0 <__ieee754_pow+0x710>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	4606      	mov	r6, r0
 800890a:	460f      	mov	r7, r1
 800890c:	4620      	mov	r0, r4
 800890e:	4629      	mov	r1, r5
 8008910:	f7f7 fe7a 	bl	8000608 <__aeabi_dmul>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4630      	mov	r0, r6
 800891a:	4639      	mov	r1, r7
 800891c:	f7f7 fcbe 	bl	800029c <__adddf3>
 8008920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008922:	4b35      	ldr	r3, [pc, #212]	; (80089f8 <__ieee754_pow+0x738>)
 8008924:	4413      	add	r3, r2
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	f7f7 fcb7 	bl	800029c <__adddf3>
 800892e:	4604      	mov	r4, r0
 8008930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008932:	460d      	mov	r5, r1
 8008934:	f7f7 fdfe 	bl	8000534 <__aeabi_i2d>
 8008938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800893a:	4b30      	ldr	r3, [pc, #192]	; (80089fc <__ieee754_pow+0x73c>)
 800893c:	4413      	add	r3, r2
 800893e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008942:	4606      	mov	r6, r0
 8008944:	460f      	mov	r7, r1
 8008946:	4622      	mov	r2, r4
 8008948:	462b      	mov	r3, r5
 800894a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800894e:	f7f7 fca5 	bl	800029c <__adddf3>
 8008952:	4642      	mov	r2, r8
 8008954:	464b      	mov	r3, r9
 8008956:	f7f7 fca1 	bl	800029c <__adddf3>
 800895a:	4632      	mov	r2, r6
 800895c:	463b      	mov	r3, r7
 800895e:	f7f7 fc9d 	bl	800029c <__adddf3>
 8008962:	9802      	ldr	r0, [sp, #8]
 8008964:	4632      	mov	r2, r6
 8008966:	463b      	mov	r3, r7
 8008968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800896c:	f7f7 fc94 	bl	8000298 <__aeabi_dsub>
 8008970:	4642      	mov	r2, r8
 8008972:	464b      	mov	r3, r9
 8008974:	f7f7 fc90 	bl	8000298 <__aeabi_dsub>
 8008978:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800897c:	e607      	b.n	800858e <__ieee754_pow+0x2ce>
 800897e:	f04f 0a01 	mov.w	sl, #1
 8008982:	e6a5      	b.n	80086d0 <__ieee754_pow+0x410>
 8008984:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80089d8 <__ieee754_pow+0x718>
 8008988:	e613      	b.n	80085b2 <__ieee754_pow+0x2f2>
 800898a:	bf00      	nop
 800898c:	f3af 8000 	nop.w
 8008990:	4a454eef 	.word	0x4a454eef
 8008994:	3fca7e28 	.word	0x3fca7e28
 8008998:	93c9db65 	.word	0x93c9db65
 800899c:	3fcd864a 	.word	0x3fcd864a
 80089a0:	a91d4101 	.word	0xa91d4101
 80089a4:	3fd17460 	.word	0x3fd17460
 80089a8:	518f264d 	.word	0x518f264d
 80089ac:	3fd55555 	.word	0x3fd55555
 80089b0:	db6fabff 	.word	0xdb6fabff
 80089b4:	3fdb6db6 	.word	0x3fdb6db6
 80089b8:	33333303 	.word	0x33333303
 80089bc:	3fe33333 	.word	0x3fe33333
 80089c0:	e0000000 	.word	0xe0000000
 80089c4:	3feec709 	.word	0x3feec709
 80089c8:	dc3a03fd 	.word	0xdc3a03fd
 80089cc:	3feec709 	.word	0x3feec709
 80089d0:	145b01f5 	.word	0x145b01f5
 80089d4:	be3e2fe0 	.word	0xbe3e2fe0
 80089d8:	00000000 	.word	0x00000000
 80089dc:	3ff00000 	.word	0x3ff00000
 80089e0:	43400000 	.word	0x43400000
 80089e4:	0003988e 	.word	0x0003988e
 80089e8:	000bb679 	.word	0x000bb679
 80089ec:	08009970 	.word	0x08009970
 80089f0:	3ff00000 	.word	0x3ff00000
 80089f4:	40080000 	.word	0x40080000
 80089f8:	08009990 	.word	0x08009990
 80089fc:	08009980 	.word	0x08009980
 8008a00:	a3b4      	add	r3, pc, #720	; (adr r3, 8008cd4 <__ieee754_pow+0xa14>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	4640      	mov	r0, r8
 8008a08:	4649      	mov	r1, r9
 8008a0a:	f7f7 fc47 	bl	800029c <__adddf3>
 8008a0e:	4622      	mov	r2, r4
 8008a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a14:	462b      	mov	r3, r5
 8008a16:	4630      	mov	r0, r6
 8008a18:	4639      	mov	r1, r7
 8008a1a:	f7f7 fc3d 	bl	8000298 <__aeabi_dsub>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a26:	f7f8 f87f 	bl	8000b28 <__aeabi_dcmpgt>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	f47f adfe 	bne.w	800862c <__ieee754_pow+0x36c>
 8008a30:	4aa3      	ldr	r2, [pc, #652]	; (8008cc0 <__ieee754_pow+0xa00>)
 8008a32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a36:	4293      	cmp	r3, r2
 8008a38:	f340 810a 	ble.w	8008c50 <__ieee754_pow+0x990>
 8008a3c:	151b      	asrs	r3, r3, #20
 8008a3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008a42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008a46:	fa4a f303 	asr.w	r3, sl, r3
 8008a4a:	445b      	add	r3, fp
 8008a4c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008a50:	4e9c      	ldr	r6, [pc, #624]	; (8008cc4 <__ieee754_pow+0xa04>)
 8008a52:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008a56:	4116      	asrs	r6, r2
 8008a58:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	ea23 0106 	bic.w	r1, r3, r6
 8008a62:	f1c2 0214 	rsb	r2, r2, #20
 8008a66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008a6a:	fa4a fa02 	asr.w	sl, sl, r2
 8008a6e:	f1bb 0f00 	cmp.w	fp, #0
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	4620      	mov	r0, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	bfb8      	it	lt
 8008a7c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a80:	f7f7 fc0a 	bl	8000298 <__aeabi_dsub>
 8008a84:	e9cd 0100 	strd	r0, r1, [sp]
 8008a88:	4642      	mov	r2, r8
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a90:	f7f7 fc04 	bl	800029c <__adddf3>
 8008a94:	2000      	movs	r0, #0
 8008a96:	a378      	add	r3, pc, #480	; (adr r3, 8008c78 <__ieee754_pow+0x9b8>)
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	460d      	mov	r5, r1
 8008aa0:	f7f7 fdb2 	bl	8000608 <__aeabi_dmul>
 8008aa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	460f      	mov	r7, r1
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f7 fbf2 	bl	8000298 <__aeabi_dsub>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4640      	mov	r0, r8
 8008aba:	4649      	mov	r1, r9
 8008abc:	f7f7 fbec 	bl	8000298 <__aeabi_dsub>
 8008ac0:	a36f      	add	r3, pc, #444	; (adr r3, 8008c80 <__ieee754_pow+0x9c0>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f7f7 fd9f 	bl	8000608 <__aeabi_dmul>
 8008aca:	a36f      	add	r3, pc, #444	; (adr r3, 8008c88 <__ieee754_pow+0x9c8>)
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	4680      	mov	r8, r0
 8008ad2:	4689      	mov	r9, r1
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fd96 	bl	8000608 <__aeabi_dmul>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	f7f7 fbda 	bl	800029c <__adddf3>
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4630      	mov	r0, r6
 8008af2:	4639      	mov	r1, r7
 8008af4:	f7f7 fbd2 	bl	800029c <__adddf3>
 8008af8:	4632      	mov	r2, r6
 8008afa:	463b      	mov	r3, r7
 8008afc:	4680      	mov	r8, r0
 8008afe:	4689      	mov	r9, r1
 8008b00:	f7f7 fbca 	bl	8000298 <__aeabi_dsub>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4620      	mov	r0, r4
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	f7f7 fbc4 	bl	8000298 <__aeabi_dsub>
 8008b10:	4642      	mov	r2, r8
 8008b12:	4606      	mov	r6, r0
 8008b14:	460f      	mov	r7, r1
 8008b16:	464b      	mov	r3, r9
 8008b18:	4640      	mov	r0, r8
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	f7f7 fd74 	bl	8000608 <__aeabi_dmul>
 8008b20:	a35b      	add	r3, pc, #364	; (adr r3, 8008c90 <__ieee754_pow+0x9d0>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	4604      	mov	r4, r0
 8008b28:	460d      	mov	r5, r1
 8008b2a:	f7f7 fd6d 	bl	8000608 <__aeabi_dmul>
 8008b2e:	a35a      	add	r3, pc, #360	; (adr r3, 8008c98 <__ieee754_pow+0x9d8>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fbb0 	bl	8000298 <__aeabi_dsub>
 8008b38:	4622      	mov	r2, r4
 8008b3a:	462b      	mov	r3, r5
 8008b3c:	f7f7 fd64 	bl	8000608 <__aeabi_dmul>
 8008b40:	a357      	add	r3, pc, #348	; (adr r3, 8008ca0 <__ieee754_pow+0x9e0>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f7f7 fba9 	bl	800029c <__adddf3>
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	462b      	mov	r3, r5
 8008b4e:	f7f7 fd5b 	bl	8000608 <__aeabi_dmul>
 8008b52:	a355      	add	r3, pc, #340	; (adr r3, 8008ca8 <__ieee754_pow+0x9e8>)
 8008b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b58:	f7f7 fb9e 	bl	8000298 <__aeabi_dsub>
 8008b5c:	4622      	mov	r2, r4
 8008b5e:	462b      	mov	r3, r5
 8008b60:	f7f7 fd52 	bl	8000608 <__aeabi_dmul>
 8008b64:	a352      	add	r3, pc, #328	; (adr r3, 8008cb0 <__ieee754_pow+0x9f0>)
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	f7f7 fb97 	bl	800029c <__adddf3>
 8008b6e:	4622      	mov	r2, r4
 8008b70:	462b      	mov	r3, r5
 8008b72:	f7f7 fd49 	bl	8000608 <__aeabi_dmul>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 fb8b 	bl	8000298 <__aeabi_dsub>
 8008b82:	4604      	mov	r4, r0
 8008b84:	460d      	mov	r5, r1
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	f7f7 fd3b 	bl	8000608 <__aeabi_dmul>
 8008b92:	2200      	movs	r2, #0
 8008b94:	e9cd 0100 	strd	r0, r1, [sp]
 8008b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	f7f7 fb7a 	bl	8000298 <__aeabi_dsub>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bac:	f7f7 fe56 	bl	800085c <__aeabi_ddiv>
 8008bb0:	4632      	mov	r2, r6
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	4640      	mov	r0, r8
 8008bba:	4649      	mov	r1, r9
 8008bbc:	f7f7 fd24 	bl	8000608 <__aeabi_dmul>
 8008bc0:	4632      	mov	r2, r6
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	f7f7 fb6a 	bl	800029c <__adddf3>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4629      	mov	r1, r5
 8008bd0:	f7f7 fb62 	bl	8000298 <__aeabi_dsub>
 8008bd4:	4642      	mov	r2, r8
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	f7f7 fb5e 	bl	8000298 <__aeabi_dsub>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	2000      	movs	r0, #0
 8008be2:	4939      	ldr	r1, [pc, #228]	; (8008cc8 <__ieee754_pow+0xa08>)
 8008be4:	f7f7 fb58 	bl	8000298 <__aeabi_dsub>
 8008be8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008bec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	da2f      	bge.n	8008c56 <__ieee754_pow+0x996>
 8008bf6:	4650      	mov	r0, sl
 8008bf8:	ec43 2b10 	vmov	d0, r2, r3
 8008bfc:	f000 fb60 	bl	80092c0 <scalbn>
 8008c00:	ec51 0b10 	vmov	r0, r1, d0
 8008c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c08:	f7ff bbf1 	b.w	80083ee <__ieee754_pow+0x12e>
 8008c0c:	4b2f      	ldr	r3, [pc, #188]	; (8008ccc <__ieee754_pow+0xa0c>)
 8008c0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008c12:	429e      	cmp	r6, r3
 8008c14:	f77f af0c 	ble.w	8008a30 <__ieee754_pow+0x770>
 8008c18:	4b2d      	ldr	r3, [pc, #180]	; (8008cd0 <__ieee754_pow+0xa10>)
 8008c1a:	440b      	add	r3, r1
 8008c1c:	4303      	orrs	r3, r0
 8008c1e:	d00b      	beq.n	8008c38 <__ieee754_pow+0x978>
 8008c20:	a325      	add	r3, pc, #148	; (adr r3, 8008cb8 <__ieee754_pow+0x9f8>)
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c2a:	f7f7 fced 	bl	8000608 <__aeabi_dmul>
 8008c2e:	a322      	add	r3, pc, #136	; (adr r3, 8008cb8 <__ieee754_pow+0x9f8>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f7ff bbdb 	b.w	80083ee <__ieee754_pow+0x12e>
 8008c38:	4622      	mov	r2, r4
 8008c3a:	462b      	mov	r3, r5
 8008c3c:	f7f7 fb2c 	bl	8000298 <__aeabi_dsub>
 8008c40:	4642      	mov	r2, r8
 8008c42:	464b      	mov	r3, r9
 8008c44:	f7f7 ff66 	bl	8000b14 <__aeabi_dcmpge>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	f43f aef1 	beq.w	8008a30 <__ieee754_pow+0x770>
 8008c4e:	e7e7      	b.n	8008c20 <__ieee754_pow+0x960>
 8008c50:	f04f 0a00 	mov.w	sl, #0
 8008c54:	e718      	b.n	8008a88 <__ieee754_pow+0x7c8>
 8008c56:	4621      	mov	r1, r4
 8008c58:	e7d4      	b.n	8008c04 <__ieee754_pow+0x944>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	491a      	ldr	r1, [pc, #104]	; (8008cc8 <__ieee754_pow+0xa08>)
 8008c5e:	f7ff bb8f 	b.w	8008380 <__ieee754_pow+0xc0>
 8008c62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c66:	f7ff bb8b 	b.w	8008380 <__ieee754_pow+0xc0>
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	f7ff bb87 	b.w	8008380 <__ieee754_pow+0xc0>
 8008c72:	4693      	mov	fp, r2
 8008c74:	f7ff bb98 	b.w	80083a8 <__ieee754_pow+0xe8>
 8008c78:	00000000 	.word	0x00000000
 8008c7c:	3fe62e43 	.word	0x3fe62e43
 8008c80:	fefa39ef 	.word	0xfefa39ef
 8008c84:	3fe62e42 	.word	0x3fe62e42
 8008c88:	0ca86c39 	.word	0x0ca86c39
 8008c8c:	be205c61 	.word	0xbe205c61
 8008c90:	72bea4d0 	.word	0x72bea4d0
 8008c94:	3e663769 	.word	0x3e663769
 8008c98:	c5d26bf1 	.word	0xc5d26bf1
 8008c9c:	3ebbbd41 	.word	0x3ebbbd41
 8008ca0:	af25de2c 	.word	0xaf25de2c
 8008ca4:	3f11566a 	.word	0x3f11566a
 8008ca8:	16bebd93 	.word	0x16bebd93
 8008cac:	3f66c16c 	.word	0x3f66c16c
 8008cb0:	5555553e 	.word	0x5555553e
 8008cb4:	3fc55555 	.word	0x3fc55555
 8008cb8:	c2f8f359 	.word	0xc2f8f359
 8008cbc:	01a56e1f 	.word	0x01a56e1f
 8008cc0:	3fe00000 	.word	0x3fe00000
 8008cc4:	000fffff 	.word	0x000fffff
 8008cc8:	3ff00000 	.word	0x3ff00000
 8008ccc:	4090cbff 	.word	0x4090cbff
 8008cd0:	3f6f3400 	.word	0x3f6f3400
 8008cd4:	652b82fe 	.word	0x652b82fe
 8008cd8:	3c971547 	.word	0x3c971547

08008cdc <__ieee754_sqrt>:
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	4955      	ldr	r1, [pc, #340]	; (8008e38 <__ieee754_sqrt+0x15c>)
 8008ce2:	ec55 4b10 	vmov	r4, r5, d0
 8008ce6:	43a9      	bics	r1, r5
 8008ce8:	462b      	mov	r3, r5
 8008cea:	462a      	mov	r2, r5
 8008cec:	d112      	bne.n	8008d14 <__ieee754_sqrt+0x38>
 8008cee:	ee10 2a10 	vmov	r2, s0
 8008cf2:	ee10 0a10 	vmov	r0, s0
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f7f7 fc86 	bl	8000608 <__aeabi_dmul>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4620      	mov	r0, r4
 8008d02:	4629      	mov	r1, r5
 8008d04:	f7f7 faca 	bl	800029c <__adddf3>
 8008d08:	4604      	mov	r4, r0
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	ec45 4b10 	vmov	d0, r4, r5
 8008d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	ee10 0a10 	vmov	r0, s0
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	dc0f      	bgt.n	8008d3e <__ieee754_sqrt+0x62>
 8008d1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d22:	4330      	orrs	r0, r6
 8008d24:	d0f2      	beq.n	8008d0c <__ieee754_sqrt+0x30>
 8008d26:	b155      	cbz	r5, 8008d3e <__ieee754_sqrt+0x62>
 8008d28:	ee10 2a10 	vmov	r2, s0
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	4629      	mov	r1, r5
 8008d30:	f7f7 fab2 	bl	8000298 <__aeabi_dsub>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	f7f7 fd90 	bl	800085c <__aeabi_ddiv>
 8008d3c:	e7e4      	b.n	8008d08 <__ieee754_sqrt+0x2c>
 8008d3e:	151b      	asrs	r3, r3, #20
 8008d40:	d073      	beq.n	8008e2a <__ieee754_sqrt+0x14e>
 8008d42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d46:	07dd      	lsls	r5, r3, #31
 8008d48:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008d4c:	bf48      	it	mi
 8008d4e:	0fc8      	lsrmi	r0, r1, #31
 8008d50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008d54:	bf44      	itt	mi
 8008d56:	0049      	lslmi	r1, r1, #1
 8008d58:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008d5c:	2500      	movs	r5, #0
 8008d5e:	1058      	asrs	r0, r3, #1
 8008d60:	0fcb      	lsrs	r3, r1, #31
 8008d62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008d66:	0049      	lsls	r1, r1, #1
 8008d68:	2316      	movs	r3, #22
 8008d6a:	462c      	mov	r4, r5
 8008d6c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008d70:	19a7      	adds	r7, r4, r6
 8008d72:	4297      	cmp	r7, r2
 8008d74:	bfde      	ittt	le
 8008d76:	19bc      	addle	r4, r7, r6
 8008d78:	1bd2      	suble	r2, r2, r7
 8008d7a:	19ad      	addle	r5, r5, r6
 8008d7c:	0fcf      	lsrs	r7, r1, #31
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008d84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d8c:	d1f0      	bne.n	8008d70 <__ieee754_sqrt+0x94>
 8008d8e:	f04f 0c20 	mov.w	ip, #32
 8008d92:	469e      	mov	lr, r3
 8008d94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008d98:	42a2      	cmp	r2, r4
 8008d9a:	eb06 070e 	add.w	r7, r6, lr
 8008d9e:	dc02      	bgt.n	8008da6 <__ieee754_sqrt+0xca>
 8008da0:	d112      	bne.n	8008dc8 <__ieee754_sqrt+0xec>
 8008da2:	428f      	cmp	r7, r1
 8008da4:	d810      	bhi.n	8008dc8 <__ieee754_sqrt+0xec>
 8008da6:	2f00      	cmp	r7, #0
 8008da8:	eb07 0e06 	add.w	lr, r7, r6
 8008dac:	da42      	bge.n	8008e34 <__ieee754_sqrt+0x158>
 8008dae:	f1be 0f00 	cmp.w	lr, #0
 8008db2:	db3f      	blt.n	8008e34 <__ieee754_sqrt+0x158>
 8008db4:	f104 0801 	add.w	r8, r4, #1
 8008db8:	1b12      	subs	r2, r2, r4
 8008dba:	428f      	cmp	r7, r1
 8008dbc:	bf88      	it	hi
 8008dbe:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008dc2:	1bc9      	subs	r1, r1, r7
 8008dc4:	4433      	add	r3, r6
 8008dc6:	4644      	mov	r4, r8
 8008dc8:	0052      	lsls	r2, r2, #1
 8008dca:	f1bc 0c01 	subs.w	ip, ip, #1
 8008dce:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008dd2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008dd6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008dda:	d1dd      	bne.n	8008d98 <__ieee754_sqrt+0xbc>
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	d006      	beq.n	8008dee <__ieee754_sqrt+0x112>
 8008de0:	1c5c      	adds	r4, r3, #1
 8008de2:	bf13      	iteet	ne
 8008de4:	3301      	addne	r3, #1
 8008de6:	3501      	addeq	r5, #1
 8008de8:	4663      	moveq	r3, ip
 8008dea:	f023 0301 	bicne.w	r3, r3, #1
 8008dee:	106a      	asrs	r2, r5, #1
 8008df0:	085b      	lsrs	r3, r3, #1
 8008df2:	07e9      	lsls	r1, r5, #31
 8008df4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008df8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008dfc:	bf48      	it	mi
 8008dfe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008e02:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008e06:	461c      	mov	r4, r3
 8008e08:	e780      	b.n	8008d0c <__ieee754_sqrt+0x30>
 8008e0a:	0aca      	lsrs	r2, r1, #11
 8008e0c:	3815      	subs	r0, #21
 8008e0e:	0549      	lsls	r1, r1, #21
 8008e10:	2a00      	cmp	r2, #0
 8008e12:	d0fa      	beq.n	8008e0a <__ieee754_sqrt+0x12e>
 8008e14:	02d6      	lsls	r6, r2, #11
 8008e16:	d50a      	bpl.n	8008e2e <__ieee754_sqrt+0x152>
 8008e18:	f1c3 0420 	rsb	r4, r3, #32
 8008e1c:	fa21 f404 	lsr.w	r4, r1, r4
 8008e20:	1e5d      	subs	r5, r3, #1
 8008e22:	4099      	lsls	r1, r3
 8008e24:	4322      	orrs	r2, r4
 8008e26:	1b43      	subs	r3, r0, r5
 8008e28:	e78b      	b.n	8008d42 <__ieee754_sqrt+0x66>
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	e7f0      	b.n	8008e10 <__ieee754_sqrt+0x134>
 8008e2e:	0052      	lsls	r2, r2, #1
 8008e30:	3301      	adds	r3, #1
 8008e32:	e7ef      	b.n	8008e14 <__ieee754_sqrt+0x138>
 8008e34:	46a0      	mov	r8, r4
 8008e36:	e7bf      	b.n	8008db8 <__ieee754_sqrt+0xdc>
 8008e38:	7ff00000 	.word	0x7ff00000
 8008e3c:	00000000 	.word	0x00000000

08008e40 <atan>:
 8008e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	ec55 4b10 	vmov	r4, r5, d0
 8008e48:	4bc3      	ldr	r3, [pc, #780]	; (8009158 <atan+0x318>)
 8008e4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008e4e:	429e      	cmp	r6, r3
 8008e50:	46ab      	mov	fp, r5
 8008e52:	dd18      	ble.n	8008e86 <atan+0x46>
 8008e54:	4bc1      	ldr	r3, [pc, #772]	; (800915c <atan+0x31c>)
 8008e56:	429e      	cmp	r6, r3
 8008e58:	dc01      	bgt.n	8008e5e <atan+0x1e>
 8008e5a:	d109      	bne.n	8008e70 <atan+0x30>
 8008e5c:	b144      	cbz	r4, 8008e70 <atan+0x30>
 8008e5e:	4622      	mov	r2, r4
 8008e60:	462b      	mov	r3, r5
 8008e62:	4620      	mov	r0, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	f7f7 fa19 	bl	800029c <__adddf3>
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	460d      	mov	r5, r1
 8008e6e:	e006      	b.n	8008e7e <atan+0x3e>
 8008e70:	f1bb 0f00 	cmp.w	fp, #0
 8008e74:	f340 8131 	ble.w	80090da <atan+0x29a>
 8008e78:	a59b      	add	r5, pc, #620	; (adr r5, 80090e8 <atan+0x2a8>)
 8008e7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e7e:	ec45 4b10 	vmov	d0, r4, r5
 8008e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e86:	4bb6      	ldr	r3, [pc, #728]	; (8009160 <atan+0x320>)
 8008e88:	429e      	cmp	r6, r3
 8008e8a:	dc14      	bgt.n	8008eb6 <atan+0x76>
 8008e8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008e90:	429e      	cmp	r6, r3
 8008e92:	dc0d      	bgt.n	8008eb0 <atan+0x70>
 8008e94:	a396      	add	r3, pc, #600	; (adr r3, 80090f0 <atan+0x2b0>)
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	ee10 0a10 	vmov	r0, s0
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	f7f7 f9fc 	bl	800029c <__adddf3>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4baf      	ldr	r3, [pc, #700]	; (8009164 <atan+0x324>)
 8008ea8:	f7f7 fe3e 	bl	8000b28 <__aeabi_dcmpgt>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d1e6      	bne.n	8008e7e <atan+0x3e>
 8008eb0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008eb4:	e02b      	b.n	8008f0e <atan+0xce>
 8008eb6:	f000 f963 	bl	8009180 <fabs>
 8008eba:	4bab      	ldr	r3, [pc, #684]	; (8009168 <atan+0x328>)
 8008ebc:	429e      	cmp	r6, r3
 8008ebe:	ec55 4b10 	vmov	r4, r5, d0
 8008ec2:	f300 80bf 	bgt.w	8009044 <atan+0x204>
 8008ec6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008eca:	429e      	cmp	r6, r3
 8008ecc:	f300 80a0 	bgt.w	8009010 <atan+0x1d0>
 8008ed0:	ee10 2a10 	vmov	r2, s0
 8008ed4:	ee10 0a10 	vmov	r0, s0
 8008ed8:	462b      	mov	r3, r5
 8008eda:	4629      	mov	r1, r5
 8008edc:	f7f7 f9de 	bl	800029c <__adddf3>
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4ba0      	ldr	r3, [pc, #640]	; (8009164 <atan+0x324>)
 8008ee4:	f7f7 f9d8 	bl	8000298 <__aeabi_dsub>
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4606      	mov	r6, r0
 8008eec:	460f      	mov	r7, r1
 8008eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7f7 f9d1 	bl	800029c <__adddf3>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	f7f7 fcab 	bl	800085c <__aeabi_ddiv>
 8008f06:	f04f 0a00 	mov.w	sl, #0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	460d      	mov	r5, r1
 8008f0e:	4622      	mov	r2, r4
 8008f10:	462b      	mov	r3, r5
 8008f12:	4620      	mov	r0, r4
 8008f14:	4629      	mov	r1, r5
 8008f16:	f7f7 fb77 	bl	8000608 <__aeabi_dmul>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4680      	mov	r8, r0
 8008f20:	4689      	mov	r9, r1
 8008f22:	f7f7 fb71 	bl	8000608 <__aeabi_dmul>
 8008f26:	a374      	add	r3, pc, #464	; (adr r3, 80090f8 <atan+0x2b8>)
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	460f      	mov	r7, r1
 8008f30:	f7f7 fb6a 	bl	8000608 <__aeabi_dmul>
 8008f34:	a372      	add	r3, pc, #456	; (adr r3, 8009100 <atan+0x2c0>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f7f7 f9af 	bl	800029c <__adddf3>
 8008f3e:	4632      	mov	r2, r6
 8008f40:	463b      	mov	r3, r7
 8008f42:	f7f7 fb61 	bl	8000608 <__aeabi_dmul>
 8008f46:	a370      	add	r3, pc, #448	; (adr r3, 8009108 <atan+0x2c8>)
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 f9a6 	bl	800029c <__adddf3>
 8008f50:	4632      	mov	r2, r6
 8008f52:	463b      	mov	r3, r7
 8008f54:	f7f7 fb58 	bl	8000608 <__aeabi_dmul>
 8008f58:	a36d      	add	r3, pc, #436	; (adr r3, 8009110 <atan+0x2d0>)
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 f99d 	bl	800029c <__adddf3>
 8008f62:	4632      	mov	r2, r6
 8008f64:	463b      	mov	r3, r7
 8008f66:	f7f7 fb4f 	bl	8000608 <__aeabi_dmul>
 8008f6a:	a36b      	add	r3, pc, #428	; (adr r3, 8009118 <atan+0x2d8>)
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	f7f7 f994 	bl	800029c <__adddf3>
 8008f74:	4632      	mov	r2, r6
 8008f76:	463b      	mov	r3, r7
 8008f78:	f7f7 fb46 	bl	8000608 <__aeabi_dmul>
 8008f7c:	a368      	add	r3, pc, #416	; (adr r3, 8009120 <atan+0x2e0>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f7f7 f98b 	bl	800029c <__adddf3>
 8008f86:	4642      	mov	r2, r8
 8008f88:	464b      	mov	r3, r9
 8008f8a:	f7f7 fb3d 	bl	8000608 <__aeabi_dmul>
 8008f8e:	a366      	add	r3, pc, #408	; (adr r3, 8009128 <atan+0x2e8>)
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	4680      	mov	r8, r0
 8008f96:	4689      	mov	r9, r1
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fb34 	bl	8000608 <__aeabi_dmul>
 8008fa0:	a363      	add	r3, pc, #396	; (adr r3, 8009130 <atan+0x2f0>)
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	f7f7 f977 	bl	8000298 <__aeabi_dsub>
 8008faa:	4632      	mov	r2, r6
 8008fac:	463b      	mov	r3, r7
 8008fae:	f7f7 fb2b 	bl	8000608 <__aeabi_dmul>
 8008fb2:	a361      	add	r3, pc, #388	; (adr r3, 8009138 <atan+0x2f8>)
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	f7f7 f96e 	bl	8000298 <__aeabi_dsub>
 8008fbc:	4632      	mov	r2, r6
 8008fbe:	463b      	mov	r3, r7
 8008fc0:	f7f7 fb22 	bl	8000608 <__aeabi_dmul>
 8008fc4:	a35e      	add	r3, pc, #376	; (adr r3, 8009140 <atan+0x300>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f7f7 f965 	bl	8000298 <__aeabi_dsub>
 8008fce:	4632      	mov	r2, r6
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	f7f7 fb19 	bl	8000608 <__aeabi_dmul>
 8008fd6:	a35c      	add	r3, pc, #368	; (adr r3, 8009148 <atan+0x308>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 f95c 	bl	8000298 <__aeabi_dsub>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	f7f7 fb10 	bl	8000608 <__aeabi_dmul>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4640      	mov	r0, r8
 8008fee:	4649      	mov	r1, r9
 8008ff0:	f7f7 f954 	bl	800029c <__adddf3>
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	462b      	mov	r3, r5
 8008ff8:	f7f7 fb06 	bl	8000608 <__aeabi_dmul>
 8008ffc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	d14b      	bne.n	800909e <atan+0x25e>
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 f945 	bl	8000298 <__aeabi_dsub>
 800900e:	e72c      	b.n	8008e6a <atan+0x2a>
 8009010:	ee10 0a10 	vmov	r0, s0
 8009014:	2200      	movs	r2, #0
 8009016:	4b53      	ldr	r3, [pc, #332]	; (8009164 <atan+0x324>)
 8009018:	4629      	mov	r1, r5
 800901a:	f7f7 f93d 	bl	8000298 <__aeabi_dsub>
 800901e:	2200      	movs	r2, #0
 8009020:	4606      	mov	r6, r0
 8009022:	460f      	mov	r7, r1
 8009024:	4b4f      	ldr	r3, [pc, #316]	; (8009164 <atan+0x324>)
 8009026:	4620      	mov	r0, r4
 8009028:	4629      	mov	r1, r5
 800902a:	f7f7 f937 	bl	800029c <__adddf3>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4630      	mov	r0, r6
 8009034:	4639      	mov	r1, r7
 8009036:	f7f7 fc11 	bl	800085c <__aeabi_ddiv>
 800903a:	f04f 0a01 	mov.w	sl, #1
 800903e:	4604      	mov	r4, r0
 8009040:	460d      	mov	r5, r1
 8009042:	e764      	b.n	8008f0e <atan+0xce>
 8009044:	4b49      	ldr	r3, [pc, #292]	; (800916c <atan+0x32c>)
 8009046:	429e      	cmp	r6, r3
 8009048:	dc1d      	bgt.n	8009086 <atan+0x246>
 800904a:	ee10 0a10 	vmov	r0, s0
 800904e:	2200      	movs	r2, #0
 8009050:	4b47      	ldr	r3, [pc, #284]	; (8009170 <atan+0x330>)
 8009052:	4629      	mov	r1, r5
 8009054:	f7f7 f920 	bl	8000298 <__aeabi_dsub>
 8009058:	2200      	movs	r2, #0
 800905a:	4606      	mov	r6, r0
 800905c:	460f      	mov	r7, r1
 800905e:	4b44      	ldr	r3, [pc, #272]	; (8009170 <atan+0x330>)
 8009060:	4620      	mov	r0, r4
 8009062:	4629      	mov	r1, r5
 8009064:	f7f7 fad0 	bl	8000608 <__aeabi_dmul>
 8009068:	2200      	movs	r2, #0
 800906a:	4b3e      	ldr	r3, [pc, #248]	; (8009164 <atan+0x324>)
 800906c:	f7f7 f916 	bl	800029c <__adddf3>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4630      	mov	r0, r6
 8009076:	4639      	mov	r1, r7
 8009078:	f7f7 fbf0 	bl	800085c <__aeabi_ddiv>
 800907c:	f04f 0a02 	mov.w	sl, #2
 8009080:	4604      	mov	r4, r0
 8009082:	460d      	mov	r5, r1
 8009084:	e743      	b.n	8008f0e <atan+0xce>
 8009086:	462b      	mov	r3, r5
 8009088:	ee10 2a10 	vmov	r2, s0
 800908c:	2000      	movs	r0, #0
 800908e:	4939      	ldr	r1, [pc, #228]	; (8009174 <atan+0x334>)
 8009090:	f7f7 fbe4 	bl	800085c <__aeabi_ddiv>
 8009094:	f04f 0a03 	mov.w	sl, #3
 8009098:	4604      	mov	r4, r0
 800909a:	460d      	mov	r5, r1
 800909c:	e737      	b.n	8008f0e <atan+0xce>
 800909e:	4b36      	ldr	r3, [pc, #216]	; (8009178 <atan+0x338>)
 80090a0:	4e36      	ldr	r6, [pc, #216]	; (800917c <atan+0x33c>)
 80090a2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80090a6:	4456      	add	r6, sl
 80090a8:	449a      	add	sl, r3
 80090aa:	e9da 2300 	ldrd	r2, r3, [sl]
 80090ae:	f7f7 f8f3 	bl	8000298 <__aeabi_dsub>
 80090b2:	4622      	mov	r2, r4
 80090b4:	462b      	mov	r3, r5
 80090b6:	f7f7 f8ef 	bl	8000298 <__aeabi_dsub>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	e9d6 0100 	ldrd	r0, r1, [r6]
 80090c2:	f7f7 f8e9 	bl	8000298 <__aeabi_dsub>
 80090c6:	f1bb 0f00 	cmp.w	fp, #0
 80090ca:	4604      	mov	r4, r0
 80090cc:	460d      	mov	r5, r1
 80090ce:	f6bf aed6 	bge.w	8008e7e <atan+0x3e>
 80090d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090d6:	461d      	mov	r5, r3
 80090d8:	e6d1      	b.n	8008e7e <atan+0x3e>
 80090da:	a51d      	add	r5, pc, #116	; (adr r5, 8009150 <atan+0x310>)
 80090dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090e0:	e6cd      	b.n	8008e7e <atan+0x3e>
 80090e2:	bf00      	nop
 80090e4:	f3af 8000 	nop.w
 80090e8:	54442d18 	.word	0x54442d18
 80090ec:	3ff921fb 	.word	0x3ff921fb
 80090f0:	8800759c 	.word	0x8800759c
 80090f4:	7e37e43c 	.word	0x7e37e43c
 80090f8:	e322da11 	.word	0xe322da11
 80090fc:	3f90ad3a 	.word	0x3f90ad3a
 8009100:	24760deb 	.word	0x24760deb
 8009104:	3fa97b4b 	.word	0x3fa97b4b
 8009108:	a0d03d51 	.word	0xa0d03d51
 800910c:	3fb10d66 	.word	0x3fb10d66
 8009110:	c54c206e 	.word	0xc54c206e
 8009114:	3fb745cd 	.word	0x3fb745cd
 8009118:	920083ff 	.word	0x920083ff
 800911c:	3fc24924 	.word	0x3fc24924
 8009120:	5555550d 	.word	0x5555550d
 8009124:	3fd55555 	.word	0x3fd55555
 8009128:	2c6a6c2f 	.word	0x2c6a6c2f
 800912c:	bfa2b444 	.word	0xbfa2b444
 8009130:	52defd9a 	.word	0x52defd9a
 8009134:	3fadde2d 	.word	0x3fadde2d
 8009138:	af749a6d 	.word	0xaf749a6d
 800913c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009140:	fe231671 	.word	0xfe231671
 8009144:	3fbc71c6 	.word	0x3fbc71c6
 8009148:	9998ebc4 	.word	0x9998ebc4
 800914c:	3fc99999 	.word	0x3fc99999
 8009150:	54442d18 	.word	0x54442d18
 8009154:	bff921fb 	.word	0xbff921fb
 8009158:	440fffff 	.word	0x440fffff
 800915c:	7ff00000 	.word	0x7ff00000
 8009160:	3fdbffff 	.word	0x3fdbffff
 8009164:	3ff00000 	.word	0x3ff00000
 8009168:	3ff2ffff 	.word	0x3ff2ffff
 800916c:	40037fff 	.word	0x40037fff
 8009170:	3ff80000 	.word	0x3ff80000
 8009174:	bff00000 	.word	0xbff00000
 8009178:	080099c0 	.word	0x080099c0
 800917c:	080099a0 	.word	0x080099a0

08009180 <fabs>:
 8009180:	ec51 0b10 	vmov	r0, r1, d0
 8009184:	ee10 2a10 	vmov	r2, s0
 8009188:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800918c:	ec43 2b10 	vmov	d0, r2, r3
 8009190:	4770      	bx	lr

08009192 <finite>:
 8009192:	ee10 3a90 	vmov	r3, s1
 8009196:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800919a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800919e:	0fc0      	lsrs	r0, r0, #31
 80091a0:	4770      	bx	lr

080091a2 <matherr>:
 80091a2:	2000      	movs	r0, #0
 80091a4:	4770      	bx	lr
	...

080091a8 <nan>:
 80091a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80091b0 <nan+0x8>
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	00000000 	.word	0x00000000
 80091b4:	7ff80000 	.word	0x7ff80000

080091b8 <rint>:
 80091b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ba:	ec51 0b10 	vmov	r0, r1, d0
 80091be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80091c2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80091c6:	2e13      	cmp	r6, #19
 80091c8:	460b      	mov	r3, r1
 80091ca:	ee10 4a10 	vmov	r4, s0
 80091ce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80091d2:	dc56      	bgt.n	8009282 <rint+0xca>
 80091d4:	2e00      	cmp	r6, #0
 80091d6:	da2b      	bge.n	8009230 <rint+0x78>
 80091d8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80091dc:	4302      	orrs	r2, r0
 80091de:	d023      	beq.n	8009228 <rint+0x70>
 80091e0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80091e4:	4302      	orrs	r2, r0
 80091e6:	4254      	negs	r4, r2
 80091e8:	4314      	orrs	r4, r2
 80091ea:	0c4b      	lsrs	r3, r1, #17
 80091ec:	0b24      	lsrs	r4, r4, #12
 80091ee:	045b      	lsls	r3, r3, #17
 80091f0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80091f4:	ea44 0103 	orr.w	r1, r4, r3
 80091f8:	460b      	mov	r3, r1
 80091fa:	492f      	ldr	r1, [pc, #188]	; (80092b8 <rint+0x100>)
 80091fc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009200:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009204:	4602      	mov	r2, r0
 8009206:	4639      	mov	r1, r7
 8009208:	4630      	mov	r0, r6
 800920a:	f7f7 f847 	bl	800029c <__adddf3>
 800920e:	e9cd 0100 	strd	r0, r1, [sp]
 8009212:	463b      	mov	r3, r7
 8009214:	4632      	mov	r2, r6
 8009216:	e9dd 0100 	ldrd	r0, r1, [sp]
 800921a:	f7f7 f83d 	bl	8000298 <__aeabi_dsub>
 800921e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009222:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009226:	4639      	mov	r1, r7
 8009228:	ec41 0b10 	vmov	d0, r0, r1
 800922c:	b003      	add	sp, #12
 800922e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009230:	4a22      	ldr	r2, [pc, #136]	; (80092bc <rint+0x104>)
 8009232:	4132      	asrs	r2, r6
 8009234:	ea01 0702 	and.w	r7, r1, r2
 8009238:	4307      	orrs	r7, r0
 800923a:	d0f5      	beq.n	8009228 <rint+0x70>
 800923c:	0852      	lsrs	r2, r2, #1
 800923e:	4011      	ands	r1, r2
 8009240:	430c      	orrs	r4, r1
 8009242:	d00b      	beq.n	800925c <rint+0xa4>
 8009244:	ea23 0202 	bic.w	r2, r3, r2
 8009248:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800924c:	2e13      	cmp	r6, #19
 800924e:	fa43 f306 	asr.w	r3, r3, r6
 8009252:	bf0c      	ite	eq
 8009254:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009258:	2400      	movne	r4, #0
 800925a:	4313      	orrs	r3, r2
 800925c:	4916      	ldr	r1, [pc, #88]	; (80092b8 <rint+0x100>)
 800925e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009262:	4622      	mov	r2, r4
 8009264:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009268:	4620      	mov	r0, r4
 800926a:	4629      	mov	r1, r5
 800926c:	f7f7 f816 	bl	800029c <__adddf3>
 8009270:	e9cd 0100 	strd	r0, r1, [sp]
 8009274:	4622      	mov	r2, r4
 8009276:	462b      	mov	r3, r5
 8009278:	e9dd 0100 	ldrd	r0, r1, [sp]
 800927c:	f7f7 f80c 	bl	8000298 <__aeabi_dsub>
 8009280:	e7d2      	b.n	8009228 <rint+0x70>
 8009282:	2e33      	cmp	r6, #51	; 0x33
 8009284:	dd07      	ble.n	8009296 <rint+0xde>
 8009286:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800928a:	d1cd      	bne.n	8009228 <rint+0x70>
 800928c:	ee10 2a10 	vmov	r2, s0
 8009290:	f7f7 f804 	bl	800029c <__adddf3>
 8009294:	e7c8      	b.n	8009228 <rint+0x70>
 8009296:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800929a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800929e:	40f2      	lsrs	r2, r6
 80092a0:	4210      	tst	r0, r2
 80092a2:	d0c1      	beq.n	8009228 <rint+0x70>
 80092a4:	0852      	lsrs	r2, r2, #1
 80092a6:	4210      	tst	r0, r2
 80092a8:	bf1f      	itttt	ne
 80092aa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80092ae:	ea20 0202 	bicne.w	r2, r0, r2
 80092b2:	4134      	asrne	r4, r6
 80092b4:	4314      	orrne	r4, r2
 80092b6:	e7d1      	b.n	800925c <rint+0xa4>
 80092b8:	080099e0 	.word	0x080099e0
 80092bc:	000fffff 	.word	0x000fffff

080092c0 <scalbn>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	ec55 4b10 	vmov	r4, r5, d0
 80092c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80092ca:	4606      	mov	r6, r0
 80092cc:	462b      	mov	r3, r5
 80092ce:	b9aa      	cbnz	r2, 80092fc <scalbn+0x3c>
 80092d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80092d4:	4323      	orrs	r3, r4
 80092d6:	d03b      	beq.n	8009350 <scalbn+0x90>
 80092d8:	4b31      	ldr	r3, [pc, #196]	; (80093a0 <scalbn+0xe0>)
 80092da:	4629      	mov	r1, r5
 80092dc:	2200      	movs	r2, #0
 80092de:	ee10 0a10 	vmov	r0, s0
 80092e2:	f7f7 f991 	bl	8000608 <__aeabi_dmul>
 80092e6:	4b2f      	ldr	r3, [pc, #188]	; (80093a4 <scalbn+0xe4>)
 80092e8:	429e      	cmp	r6, r3
 80092ea:	4604      	mov	r4, r0
 80092ec:	460d      	mov	r5, r1
 80092ee:	da12      	bge.n	8009316 <scalbn+0x56>
 80092f0:	a327      	add	r3, pc, #156	; (adr r3, 8009390 <scalbn+0xd0>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	f7f7 f987 	bl	8000608 <__aeabi_dmul>
 80092fa:	e009      	b.n	8009310 <scalbn+0x50>
 80092fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009300:	428a      	cmp	r2, r1
 8009302:	d10c      	bne.n	800931e <scalbn+0x5e>
 8009304:	ee10 2a10 	vmov	r2, s0
 8009308:	4620      	mov	r0, r4
 800930a:	4629      	mov	r1, r5
 800930c:	f7f6 ffc6 	bl	800029c <__adddf3>
 8009310:	4604      	mov	r4, r0
 8009312:	460d      	mov	r5, r1
 8009314:	e01c      	b.n	8009350 <scalbn+0x90>
 8009316:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800931a:	460b      	mov	r3, r1
 800931c:	3a36      	subs	r2, #54	; 0x36
 800931e:	4432      	add	r2, r6
 8009320:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009324:	428a      	cmp	r2, r1
 8009326:	dd0b      	ble.n	8009340 <scalbn+0x80>
 8009328:	ec45 4b11 	vmov	d1, r4, r5
 800932c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009398 <scalbn+0xd8>
 8009330:	f000 f83c 	bl	80093ac <copysign>
 8009334:	a318      	add	r3, pc, #96	; (adr r3, 8009398 <scalbn+0xd8>)
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	ec51 0b10 	vmov	r0, r1, d0
 800933e:	e7da      	b.n	80092f6 <scalbn+0x36>
 8009340:	2a00      	cmp	r2, #0
 8009342:	dd08      	ble.n	8009356 <scalbn+0x96>
 8009344:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009348:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800934c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009350:	ec45 4b10 	vmov	d0, r4, r5
 8009354:	bd70      	pop	{r4, r5, r6, pc}
 8009356:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800935a:	da0d      	bge.n	8009378 <scalbn+0xb8>
 800935c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009360:	429e      	cmp	r6, r3
 8009362:	ec45 4b11 	vmov	d1, r4, r5
 8009366:	dce1      	bgt.n	800932c <scalbn+0x6c>
 8009368:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009390 <scalbn+0xd0>
 800936c:	f000 f81e 	bl	80093ac <copysign>
 8009370:	a307      	add	r3, pc, #28	; (adr r3, 8009390 <scalbn+0xd0>)
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	e7e0      	b.n	800933a <scalbn+0x7a>
 8009378:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800937c:	3236      	adds	r2, #54	; 0x36
 800937e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009382:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009386:	4620      	mov	r0, r4
 8009388:	4629      	mov	r1, r5
 800938a:	2200      	movs	r2, #0
 800938c:	4b06      	ldr	r3, [pc, #24]	; (80093a8 <scalbn+0xe8>)
 800938e:	e7b2      	b.n	80092f6 <scalbn+0x36>
 8009390:	c2f8f359 	.word	0xc2f8f359
 8009394:	01a56e1f 	.word	0x01a56e1f
 8009398:	8800759c 	.word	0x8800759c
 800939c:	7e37e43c 	.word	0x7e37e43c
 80093a0:	43500000 	.word	0x43500000
 80093a4:	ffff3cb0 	.word	0xffff3cb0
 80093a8:	3c900000 	.word	0x3c900000

080093ac <copysign>:
 80093ac:	ec51 0b10 	vmov	r0, r1, d0
 80093b0:	ee11 0a90 	vmov	r0, s3
 80093b4:	ee10 2a10 	vmov	r2, s0
 80093b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80093bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80093c0:	ea41 0300 	orr.w	r3, r1, r0
 80093c4:	ec43 2b10 	vmov	d0, r2, r3
 80093c8:	4770      	bx	lr
	...

080093cc <_init>:
 80093cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ce:	bf00      	nop
 80093d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d2:	bc08      	pop	{r3}
 80093d4:	469e      	mov	lr, r3
 80093d6:	4770      	bx	lr

080093d8 <_fini>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	bf00      	nop
 80093dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093de:	bc08      	pop	{r3}
 80093e0:	469e      	mov	lr, r3
 80093e2:	4770      	bx	lr
