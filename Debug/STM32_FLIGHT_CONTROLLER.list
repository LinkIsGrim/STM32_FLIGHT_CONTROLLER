
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e198  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800e338  0800e338  0001e338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea00  0800ea00  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea00  0800ea00  0001ea00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea08  0800ea08  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea08  0800ea08  0001ea08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea0c  0800ea0c  0001ea0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800ea10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006370  20000248  0800ec58  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200065b8  0800ec58  000265b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032b3b  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006107  00000000  00000000  00052db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001774a  00000000  00000000  00058eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001f00  00000000  00000000  00070608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002178  00000000  00000000  00072508  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001e6e1  00000000  00000000  00074680  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001eafa  00000000  00000000  00092d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a88b9  00000000  00000000  000b185b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015a114  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ea0  00000000  00000000  0015a190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e320 	.word	0x0800e320

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0800e320 	.word	0x0800e320

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f98:	b500      	push	{lr}
 8000f9a:	b083      	sub	sp, #12
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f9c:	f88d 1004 	strb.w	r1, [sp, #4]
	data_write[1] = data;
 8000fa0:	f88d 2005 	strb.w	r2, [sp, #5]
	//i2c.write(address, data_write, 2, 0);

	TxCplt = 0;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <writeByte+0x2c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(&hi2c2, address_tx, data_write, 2);
 8000faa:	2302      	movs	r3, #2
 8000fac:	aa01      	add	r2, sp, #4
 8000fae:	4601      	mov	r1, r0
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <writeByte+0x30>)
 8000fb2:	f001 ff43 	bl	8002e3c <HAL_I2C_Master_Transmit_IT>
	while (!TxCplt) {
 8000fb6:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <writeByte+0x2c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0fb      	beq.n	8000fb6 <writeByte+0x1e>

	}
}
 8000fbe:	b003      	add	sp, #12
 8000fc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fc4:	2000026d 	.word	0x2000026d
 8000fc8:	200049d4 	.word	0x200049d4

08000fcc <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	b082      	sub	sp, #8
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000fd0:	a902      	add	r1, sp, #8
 8000fd2:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);

	TxCplt = 0;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <readByte+0x48>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(&hi2c2, address_tx, data_write, 1); //Send adress of register ONLY
 8000fdc:	4604      	mov	r4, r0
 8000fde:	2301      	movs	r3, #1
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	4601      	mov	r1, r0
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <readByte+0x4c>)
 8000fe6:	f001 ff29 	bl	8002e3c <HAL_I2C_Master_Transmit_IT>
	while (!TxCplt) {
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <readByte+0x48>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0fb      	beq.n	8000fea <readByte+0x1e>
	}

	RxCplt = 0;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <readByte+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive_IT(&hi2c2, address_tx, data, 1);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	aa01      	add	r2, sp, #4
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <readByte+0x4c>)
 8001000:	f001 ff88 	bl	8002f14 <HAL_I2C_Master_Receive_IT>
	while(!RxCplt){
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <readByte+0x50>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0fb      	beq.n	8001004 <readByte+0x38>
	}

	return data[0];
}
 800100c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001010:	b002      	add	sp, #8
 8001012:	bd10      	pop	{r4, pc}
 8001014:	2000026d 	.word	0x2000026d
 8001018:	200049d4 	.word	0x200049d4
 800101c:	2000026c 	.word	0x2000026c

08001020 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef *handle) {
 8001020:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	2202      	movs	r2, #2
 8001026:	21d0      	movs	r1, #208	; 0xd0
 8001028:	f001 ffe6 	bl	8002ff8 <HAL_I2C_IsDeviceReady>
 800102c:	b100      	cbz	r0, 8001030 <imu_init+0x10>
 800102e:	e7fe      	b.n	800102e <imu_init+0xe>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8001030:	2120      	movs	r1, #32
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <imu_init+0x3c>)
 8001034:	f001 fc44 	bl	80028c0 <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001038:	2275      	movs	r2, #117	; 0x75
 800103a:	21d1      	movs	r1, #209	; 0xd1
 800103c:	20d0      	movs	r0, #208	; 0xd0
 800103e:	f7ff ffc5 	bl	8000fcc <readByte>
 8001042:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 8001044:	2871      	cmp	r0, #113	; 0x71
 8001046:	d106      	bne.n	8001056 <imu_init+0x36>
		printf("MPU9250 online..\r\n");
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <imu_init+0x40>)
 800104a:	f009 fdfd 	bl	800ac48 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 800104e:	4621      	mov	r1, r4
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <imu_init+0x44>)
 8001052:	f009 fd85 	bl	800ab60 <iprintf>
}
 8001056:	2000      	movs	r0, #0
 8001058:	bd10      	pop	{r4, pc}
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000
 8001060:	0800e370 	.word	0x0800e370
 8001064:	0800e384 	.word	0x0800e384

08001068 <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
		uint8_t count, uint8_t *dest) {
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	460e      	mov	r6, r1
 800106e:	461c      	mov	r4, r3
 8001070:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8001072:	a906      	add	r1, sp, #24
 8001074:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);

	TxCplt = 0;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <readBytes+0x5c>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(&hi2c2, address_tx, data_write, 1);
 800107e:	2301      	movs	r3, #1
 8001080:	460a      	mov	r2, r1
 8001082:	4601      	mov	r1, r0
 8001084:	4810      	ldr	r0, [pc, #64]	; (80010c8 <readBytes+0x60>)
 8001086:	f001 fed9 	bl	8002e3c <HAL_I2C_Master_Transmit_IT>
	while (!TxCplt) {
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <readBytes+0x5c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0fb      	beq.n	800108a <readBytes+0x22>
		}

	RxCplt = 0;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <readBytes+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive_IT(&hi2c2, address_rx, data, count);
 8001098:	4623      	mov	r3, r4
 800109a:	aa02      	add	r2, sp, #8
 800109c:	4631      	mov	r1, r6
 800109e:	480a      	ldr	r0, [pc, #40]	; (80010c8 <readBytes+0x60>)
 80010a0:	f001 ff38 	bl	8002f14 <HAL_I2C_Master_Receive_IT>
	while(!RxCplt){
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <readBytes+0x64>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0fb      	beq.n	80010a4 <readBytes+0x3c>
		}
	for (int ii = 0; ii < count; ii++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	e005      	b.n	80010bc <readBytes+0x54>
		dest[ii] = data[ii];
 80010b0:	aa06      	add	r2, sp, #24
 80010b2:	441a      	add	r2, r3
 80010b4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80010b8:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 80010ba:	3301      	adds	r3, #1
 80010bc:	429c      	cmp	r4, r3
 80010be:	dcf7      	bgt.n	80010b0 <readBytes+0x48>
	}
}
 80010c0:	b006      	add	sp, #24
 80010c2:	bd70      	pop	{r4, r5, r6, pc}
 80010c4:	2000026d 	.word	0x2000026d
 80010c8:	200049d4 	.word	0x200049d4
 80010cc:	2000026c 	.word	0x2000026c

080010d0 <getMres>:

void getMres() {

	switch (Mscale) {
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <getMres+0x1c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b113      	cbz	r3, 80010dc <getMres+0xc>
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d004      	beq.n	80010e4 <getMres+0x14>
 80010da:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <getMres+0x20>)
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <getMres+0x24>)
 80010e0:	601a      	str	r2, [r3, #0]
		break;
 80010e2:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <getMres+0x20>)
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <getMres+0x28>)
 80010e8:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010ea:	4770      	bx	lr
 80010ec:	20000001 	.word	0x20000001
 80010f0:	20004a6c 	.word	0x20004a6c
 80010f4:	40a4d84e 	.word	0x40a4d84e
 80010f8:	3fa4d84e 	.word	0x3fa4d84e

080010fc <getGres>:

void getGres() {
	switch (Gscale) {
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <getGres+0x30>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d812      	bhi.n	800112a <getGres+0x2e>
 8001104:	e8df f003 	tbb	[pc, r3]
 8001108:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <getGres+0x34>)
 800110e:	4a09      	ldr	r2, [pc, #36]	; (8001134 <getGres+0x38>)
 8001110:	601a      	str	r2, [r3, #0]
		break;
 8001112:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <getGres+0x34>)
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <getGres+0x3c>)
 8001118:	601a      	str	r2, [r3, #0]
		break;
 800111a:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <getGres+0x34>)
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <getGres+0x40>)
 8001120:	601a      	str	r2, [r3, #0]
		break;
 8001122:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 8001124:	4b02      	ldr	r3, [pc, #8]	; (8001130 <getGres+0x34>)
 8001126:	4a06      	ldr	r2, [pc, #24]	; (8001140 <getGres+0x44>)
 8001128:	601a      	str	r2, [r3, #0]
		break;
	}
}
 800112a:	4770      	bx	lr
 800112c:	20000265 	.word	0x20000265
 8001130:	20004a50 	.word	0x20004a50
 8001134:	3bfa0000 	.word	0x3bfa0000
 8001138:	3c7a0000 	.word	0x3c7a0000
 800113c:	3cfa0000 	.word	0x3cfa0000
 8001140:	3d7a0000 	.word	0x3d7a0000

08001144 <getAres>:

void getAres() {
	switch (Ascale) {
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <getAres+0x38>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d816      	bhi.n	800117a <getAres+0x36>
 800114c:	e8df f003 	tbb	[pc, r3]
 8001150:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <getAres+0x3c>)
 8001156:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800115a:	601a      	str	r2, [r3, #0]
		break;
 800115c:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <getAres+0x3c>)
 8001160:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001164:	601a      	str	r2, [r3, #0]
		break;
 8001166:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <getAres+0x3c>)
 800116a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800116e:	601a      	str	r2, [r3, #0]
		break;
 8001170:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <getAres+0x3c>)
 8001174:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001178:	601a      	str	r2, [r3, #0]
		break;
	}
}
 800117a:	4770      	bx	lr
 800117c:	20000264 	.word	0x20000264
 8001180:	20004a44 	.word	0x20004a44

08001184 <readAccelData>:

void readAccelData(int16_t *destination) {
 8001184:	b510      	push	{r4, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800118a:	ab02      	add	r3, sp, #8
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2306      	movs	r3, #6
 8001190:	223b      	movs	r2, #59	; 0x3b
 8001192:	21d1      	movs	r1, #209	; 0xd1
 8001194:	20d0      	movs	r0, #208	; 0xd0
 8001196:	f7ff ff67 	bl	8001068 <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800119a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800119e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80011a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011a6:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80011a8:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80011ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011b4:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011b6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011c2:	80a3      	strh	r3, [r4, #4]
}
 80011c4:	b004      	add	sp, #16
 80011c6:	bd10      	pop	{r4, pc}

080011c8 <readGyroData>:

void readGyroData(int16_t *destination) {
 80011c8:	b510      	push	{r4, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 80011ce:	ab02      	add	r3, sp, #8
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2306      	movs	r3, #6
 80011d4:	2243      	movs	r2, #67	; 0x43
 80011d6:	21d1      	movs	r1, #209	; 0xd1
 80011d8:	20d0      	movs	r0, #208	; 0xd0
 80011da:	f7ff ff45 	bl	8001068 <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80011de:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80011e2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80011e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011ea:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80011ec:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80011f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011f8:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011fa:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011fe:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001202:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001206:	80a3      	strh	r3, [r4, #4]
}
 8001208:	b004      	add	sp, #16
 800120a:	bd10      	pop	{r4, pc}

0800120c <readMagData>:

void readMagData(int16_t *destination) {
 800120c:	b510      	push	{r4, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	//if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set

	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7,
 8001212:	ab02      	add	r3, sp, #8
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2307      	movs	r3, #7
 8001218:	2203      	movs	r2, #3
 800121a:	2119      	movs	r1, #25
 800121c:	2018      	movs	r0, #24
 800121e:	f7ff ff23 	bl	8001068 <readBytes>
			&rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
	uint8_t c = rawData[6]; // End data read by reading ST2 register
 8001222:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 8001226:	f013 0f08 	tst.w	r3, #8
 800122a:	d114      	bne.n	8001256 <readMagData+0x4a>
		destination[0] = (int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 800122c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001230:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001234:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001238:	8023      	strh	r3, [r4, #0]
		destination[1] = (int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 800123a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800123e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001242:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001246:	8063      	strh	r3, [r4, #2]
		destination[2] = (int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 8001248:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800124c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001250:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001254:	80a3      	strh	r3, [r4, #4]
	}
	//}
}
 8001256:	b004      	add	sp, #16
 8001258:	bd10      	pop	{r4, pc}

0800125a <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 800125a:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	216b      	movs	r1, #107	; 0x6b
 8001260:	20d0      	movs	r0, #208	; 0xd0
 8001262:	f7ff fe99 	bl	8000f98 <writeByte>
	HAL_Delay(100);
 8001266:	2064      	movs	r0, #100	; 0x64
 8001268:	f001 f896 	bl	8002398 <HAL_Delay>
}
 800126c:	bd08      	pop	{r3, pc}
	...

08001270 <initAK8963>:

void initAK8963(float *destination) {
 8001270:	b510      	push	{r4, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001276:	2200      	movs	r2, #0
 8001278:	210a      	movs	r1, #10
 800127a:	2018      	movs	r0, #24
 800127c:	f7ff fe8c 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001280:	200a      	movs	r0, #10
 8001282:	f001 f889 	bl	8002398 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001286:	220f      	movs	r2, #15
 8001288:	210a      	movs	r1, #10
 800128a:	2018      	movs	r0, #24
 800128c:	f7ff fe84 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001290:	200a      	movs	r0, #10
 8001292:	f001 f881 	bl	8002398 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 8001296:	ab03      	add	r3, sp, #12
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2303      	movs	r3, #3
 800129c:	2210      	movs	r2, #16
 800129e:	2119      	movs	r1, #25
 80012a0:	2018      	movs	r0, #24
 80012a2:	f7ff fee1 	bl	8001068 <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 80012a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80012aa:	3b80      	subs	r3, #128	; 0x80
 80012ac:	ee07 3a10 	vmov	s14, r3
 80012b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012b4:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 800132c <initAK8963+0xbc>
 80012b8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80012bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012c0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80012c4:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 80012c8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80012cc:	3b80      	subs	r3, #128	; 0x80
 80012ce:	ee07 3a10 	vmov	s14, r3
 80012d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012d6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80012da:	ee37 7a26 	vadd.f32	s14, s14, s13
 80012de:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 80012e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012e6:	3b80      	subs	r3, #128	; 0x80
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80012f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012f8:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012fc:	2200      	movs	r2, #0
 80012fe:	210a      	movs	r1, #10
 8001300:	2018      	movs	r0, #24
 8001302:	f7ff fe49 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001306:	200a      	movs	r0, #10
 8001308:	f001 f846 	bl	8002398 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <initAK8963+0xc0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <initAK8963+0xc4>)
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	210a      	movs	r1, #10
 800131c:	2018      	movs	r0, #24
 800131e:	f7ff fe3b 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001322:	200a      	movs	r0, #10
 8001324:	f001 f838 	bl	8002398 <HAL_Delay>
}
 8001328:	b004      	add	sp, #16
 800132a:	bd10      	pop	{r4, pc}
 800132c:	3b800000 	.word	0x3b800000
 8001330:	20000001 	.word	0x20000001
 8001334:	20000000 	.word	0x20000000

08001338 <initMPU9250>:
	dest1[1] = (float) mag_bias[1] * mRes * magCalibration[1];
	dest1[2] = (float) mag_bias[2] * mRes * magCalibration[2];

}

void initMPU9250() {
 8001338:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 800133a:	2200      	movs	r2, #0
 800133c:	216b      	movs	r1, #107	; 0x6b
 800133e:	20d0      	movs	r0, #208	; 0xd0
 8001340:	f7ff fe2a 	bl	8000f98 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001344:	2064      	movs	r0, #100	; 0x64
 8001346:	f001 f827 	bl	8002398 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800134a:	2201      	movs	r2, #1
 800134c:	216b      	movs	r1, #107	; 0x6b
 800134e:	20d0      	movs	r0, #208	; 0xd0
 8001350:	f7ff fe22 	bl	8000f98 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 8001354:	2200      	movs	r2, #0
 8001356:	211a      	movs	r1, #26
 8001358:	20d0      	movs	r0, #208	; 0xd0
 800135a:	f7ff fe1d 	bl	8000f98 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 800135e:	2200      	movs	r2, #0
 8001360:	2119      	movs	r1, #25
 8001362:	20d0      	movs	r0, #208	; 0xd0
 8001364:	f7ff fe18 	bl	8000f98 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001368:	221b      	movs	r2, #27
 800136a:	21d1      	movs	r1, #209	; 0xd1
 800136c:	4608      	mov	r0, r1
 800136e:	f7ff fe2d 	bl	8000fcc <readByte>
 8001372:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001374:	f000 021f 	and.w	r2, r0, #31
 8001378:	211b      	movs	r1, #27
 800137a:	20d0      	movs	r0, #208	; 0xd0
 800137c:	f7ff fe0c 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001380:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001384:	211b      	movs	r1, #27
 8001386:	20d0      	movs	r0, #208	; 0xd0
 8001388:	f7ff fe06 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <initMPU9250+0xd8>)
 800138e:	781a      	ldrb	r2, [r3, #0]
 8001390:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	211b      	movs	r1, #27
 8001398:	20d0      	movs	r0, #208	; 0xd0
 800139a:	f7ff fdfd 	bl	8000f98 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 800139e:	221c      	movs	r2, #28
 80013a0:	21d1      	movs	r1, #209	; 0xd1
 80013a2:	4608      	mov	r0, r1
 80013a4:	f7ff fe12 	bl	8000fcc <readByte>
 80013a8:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 80013aa:	f000 021f 	and.w	r2, r0, #31
 80013ae:	211c      	movs	r1, #28
 80013b0:	20d0      	movs	r0, #208	; 0xd0
 80013b2:	f7ff fdf1 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 80013b6:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 80013ba:	211c      	movs	r1, #28
 80013bc:	20d0      	movs	r0, #208	; 0xd0
 80013be:	f7ff fdeb 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <initMPU9250+0xdc>)
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	211c      	movs	r1, #28
 80013ce:	20d0      	movs	r0, #208	; 0xd0
 80013d0:	f7ff fde2 	bl	8000f98 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 80013d4:	221d      	movs	r2, #29
 80013d6:	21d1      	movs	r1, #209	; 0xd1
 80013d8:	4608      	mov	r0, r1
 80013da:	f7ff fdf7 	bl	8000fcc <readByte>
 80013de:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80013e0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013e4:	211d      	movs	r1, #29
 80013e6:	20d0      	movs	r0, #208	; 0xd0
 80013e8:	f7ff fdd6 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80013ec:	f044 0203 	orr.w	r2, r4, #3
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	211d      	movs	r1, #29
 80013f4:	20d0      	movs	r0, #208	; 0xd0
 80013f6:	f7ff fdcf 	bl	8000f98 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013fa:	2222      	movs	r2, #34	; 0x22
 80013fc:	2137      	movs	r1, #55	; 0x37
 80013fe:	20d0      	movs	r0, #208	; 0xd0
 8001400:	f7ff fdca 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 8001404:	2201      	movs	r2, #1
 8001406:	2138      	movs	r1, #56	; 0x38
 8001408:	20d0      	movs	r0, #208	; 0xd0
 800140a:	f7ff fdc5 	bl	8000f98 <writeByte>
}
 800140e:	bd10      	pop	{r4, pc}
 8001410:	20000265 	.word	0x20000265
 8001414:	20000264 	.word	0x20000264

08001418 <MPU9250SelfTest>:
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
}

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float *destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 8001418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800141c:	ed2d 8b08 	vpush	{d8-d11}
 8001420:	b093      	sub	sp, #76	; 0x4c
 8001422:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 8001424:	2400      	movs	r4, #0
 8001426:	9410      	str	r4, [sp, #64]	; 0x40
 8001428:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 800142c:	4622      	mov	r2, r4
 800142e:	2119      	movs	r1, #25
 8001430:	20d0      	movs	r0, #208	; 0xd0
 8001432:	f7ff fdb1 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001436:	2202      	movs	r2, #2
 8001438:	211a      	movs	r1, #26
 800143a:	20d0      	movs	r0, #208	; 0xd0
 800143c:	f7ff fdac 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 8001440:	2201      	movs	r2, #1
 8001442:	211b      	movs	r1, #27
 8001444:	20d0      	movs	r0, #208	; 0xd0
 8001446:	f7ff fda7 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800144a:	2202      	movs	r2, #2
 800144c:	211d      	movs	r1, #29
 800144e:	20d0      	movs	r0, #208	; 0xd0
 8001450:	f7ff fda2 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 8001454:	2201      	movs	r2, #1
 8001456:	211c      	movs	r1, #28
 8001458:	20d0      	movs	r0, #208	; 0xd0
 800145a:	f7ff fd9d 	bl	8000f98 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800145e:	e051      	b.n	8001504 <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001460:	ae10      	add	r6, sp, #64	; 0x40
 8001462:	9600      	str	r6, [sp, #0]
 8001464:	2306      	movs	r3, #6
 8001466:	223b      	movs	r2, #59	; 0x3b
 8001468:	21d1      	movs	r1, #209	; 0xd1
 800146a:	20d0      	movs	r0, #208	; 0xd0
 800146c:	f7ff fdfc 	bl	8001068 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001470:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001474:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001478:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800147c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8001480:	4413      	add	r3, r2
 8001482:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001486:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800148a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800148e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001492:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8001496:	4413      	add	r3, r2
 8001498:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800149c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80014a0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80014a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014a8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80014ac:	4413      	add	r3, r2
 80014ae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 80014b2:	9600      	str	r6, [sp, #0]
 80014b4:	2306      	movs	r3, #6
 80014b6:	2243      	movs	r2, #67	; 0x43
 80014b8:	21d1      	movs	r1, #209	; 0xd1
 80014ba:	20d0      	movs	r0, #208	; 0xd0
 80014bc:	f7ff fdd4 	bl	8001068 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80014c0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80014c4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80014c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014cc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80014d0:	4413      	add	r3, r2
 80014d2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80014d6:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80014da:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80014de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014e2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80014e6:	4413      	add	r3, r2
 80014e8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80014ec:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80014f0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80014f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014f8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80014fc:	4413      	add	r3, r2
 80014fe:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8001502:	3401      	adds	r4, #1
 8001504:	2cc7      	cmp	r4, #199	; 0xc7
 8001506:	ddab      	ble.n	8001460 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001508:	2400      	movs	r4, #0
 800150a:	e016      	b.n	800153a <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 800150c:	ab12      	add	r3, sp, #72	; 0x48
 800150e:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8001512:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 8001516:	48c0      	ldr	r0, [pc, #768]	; (8001818 <MPU9250SelfTest+0x400>)
 8001518:	fb80 6302 	smull	r6, r3, r0, r2
 800151c:	17d2      	asrs	r2, r2, #31
 800151e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8001522:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 8001526:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 800152a:	fb80 2003 	smull	r2, r0, r0, r3
 800152e:	17db      	asrs	r3, r3, #31
 8001530:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001534:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001538:	3401      	adds	r4, #1
 800153a:	2c02      	cmp	r4, #2
 800153c:	dde6      	ble.n	800150c <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 800153e:	22e0      	movs	r2, #224	; 0xe0
 8001540:	211c      	movs	r1, #28
 8001542:	20d0      	movs	r0, #208	; 0xd0
 8001544:	f7ff fd28 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001548:	22e0      	movs	r2, #224	; 0xe0
 800154a:	211b      	movs	r1, #27
 800154c:	20d0      	movs	r0, #208	; 0xd0
 800154e:	f7ff fd23 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001552:	2019      	movs	r0, #25
 8001554:	f000 ff20 	bl	8002398 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001558:	2400      	movs	r4, #0
 800155a:	e051      	b.n	8001600 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800155c:	ae10      	add	r6, sp, #64	; 0x40
 800155e:	9600      	str	r6, [sp, #0]
 8001560:	2306      	movs	r3, #6
 8001562:	223b      	movs	r2, #59	; 0x3b
 8001564:	21d1      	movs	r1, #209	; 0xd1
 8001566:	20d0      	movs	r0, #208	; 0xd0
 8001568:	f7ff fd7e 	bl	8001068 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800156c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001570:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001578:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800157c:	4413      	add	r3, r2
 800157e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001582:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001586:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800158a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800158e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8001592:	4413      	add	r3, r2
 8001594:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001598:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800159c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80015a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015a4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80015a8:	4413      	add	r3, r2
 80015aa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 80015ae:	9600      	str	r6, [sp, #0]
 80015b0:	2306      	movs	r3, #6
 80015b2:	2243      	movs	r2, #67	; 0x43
 80015b4:	21d1      	movs	r1, #209	; 0xd1
 80015b6:	20d0      	movs	r0, #208	; 0xd0
 80015b8:	f7ff fd56 	bl	8001068 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80015bc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80015c0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80015c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80015cc:	4413      	add	r3, r2
 80015ce:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80015d2:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80015d6:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80015da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015de:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80015e2:	4413      	add	r3, r2
 80015e4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80015e8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80015ec:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80015f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015f4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80015f8:	4413      	add	r3, r2
 80015fa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80015fe:	3401      	adds	r4, #1
 8001600:	2cc7      	cmp	r4, #199	; 0xc7
 8001602:	ddab      	ble.n	800155c <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001604:	2400      	movs	r4, #0
 8001606:	e016      	b.n	8001636 <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 8001608:	ab12      	add	r3, sp, #72	; 0x48
 800160a:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800160e:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 8001612:	4881      	ldr	r0, [pc, #516]	; (8001818 <MPU9250SelfTest+0x400>)
 8001614:	fb80 6302 	smull	r6, r3, r0, r2
 8001618:	17d2      	asrs	r2, r2, #31
 800161a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 800161e:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 8001622:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 8001626:	fb80 2003 	smull	r2, r0, r0, r3
 800162a:	17db      	asrs	r3, r3, #31
 800162c:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001630:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001634:	3401      	adds	r4, #1
 8001636:	2c02      	cmp	r4, #2
 8001638:	dde6      	ble.n	8001608 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 800163a:	2200      	movs	r2, #0
 800163c:	211c      	movs	r1, #28
 800163e:	20d0      	movs	r0, #208	; 0xd0
 8001640:	f7ff fcaa 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 8001644:	2200      	movs	r2, #0
 8001646:	211b      	movs	r1, #27
 8001648:	20d0      	movs	r0, #208	; 0xd0
 800164a:	f7ff fca5 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 800164e:	2019      	movs	r0, #25
 8001650:	f000 fea2 	bl	8002398 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001654:	220d      	movs	r2, #13
 8001656:	21d1      	movs	r1, #209	; 0xd1
 8001658:	20d0      	movs	r0, #208	; 0xd0
 800165a:	f7ff fcb7 	bl	8000fcc <readByte>
 800165e:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001662:	220e      	movs	r2, #14
 8001664:	21d1      	movs	r1, #209	; 0xd1
 8001666:	20d0      	movs	r0, #208	; 0xd0
 8001668:	f7ff fcb0 	bl	8000fcc <readByte>
 800166c:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001670:	220f      	movs	r2, #15
 8001672:	21d1      	movs	r1, #209	; 0xd1
 8001674:	20d0      	movs	r0, #208	; 0xd0
 8001676:	f7ff fca9 	bl	8000fcc <readByte>
 800167a:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800167e:	2200      	movs	r2, #0
 8001680:	21d1      	movs	r1, #209	; 0xd1
 8001682:	20d0      	movs	r0, #208	; 0xd0
 8001684:	f7ff fca2 	bl	8000fcc <readByte>
 8001688:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800168c:	2201      	movs	r2, #1
 800168e:	21d1      	movs	r1, #209	; 0xd1
 8001690:	20d0      	movs	r0, #208	; 0xd0
 8001692:	f7ff fc9b 	bl	8000fcc <readByte>
 8001696:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800169a:	2202      	movs	r2, #2
 800169c:	21d1      	movs	r1, #209	; 0xd1
 800169e:	20d0      	movs	r0, #208	; 0xd0
 80016a0:	f7ff fc94 	bl	8000fcc <readByte>
 80016a4:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 80016a8:	eef8 7a48 	vcvt.f32.u32	s15, s16
 80016ac:	ee17 0a90 	vmov	r0, s15
 80016b0:	f7fe ff52 	bl	8000558 <__aeabi_f2d>
 80016b4:	2200      	movs	r2, #0
 80016b6:	4b59      	ldr	r3, [pc, #356]	; (800181c <MPU9250SelfTest+0x404>)
 80016b8:	f7fe fdee 	bl	8000298 <__aeabi_dsub>
 80016bc:	ed9f 8b52 	vldr	d8, [pc, #328]	; 8001808 <MPU9250SelfTest+0x3f0>
 80016c0:	ec41 0b11 	vmov	d1, r0, r1
 80016c4:	eeb0 0a48 	vmov.f32	s0, s16
 80016c8:	eef0 0a68 	vmov.f32	s1, s17
 80016cc:	f007 f83a 	bl	8008744 <pow>
 80016d0:	a34f      	add	r3, pc, #316	; (adr r3, 8001810 <MPU9250SelfTest+0x3f8>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	ec51 0b10 	vmov	r0, r1, d0
 80016da:	f7fe ff95 	bl	8000608 <__aeabi_dmul>
 80016de:	f7ff fa8b 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 80016e2:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 80016e4:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 80016e8:	ee17 0a90 	vmov	r0, s15
 80016ec:	f7fe ff34 	bl	8000558 <__aeabi_f2d>
 80016f0:	2200      	movs	r2, #0
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <MPU9250SelfTest+0x404>)
 80016f4:	f7fe fdd0 	bl	8000298 <__aeabi_dsub>
 80016f8:	ec41 0b11 	vmov	d1, r0, r1
 80016fc:	eeb0 0a48 	vmov.f32	s0, s16
 8001700:	eef0 0a68 	vmov.f32	s1, s17
 8001704:	f007 f81e 	bl	8008744 <pow>
 8001708:	a341      	add	r3, pc, #260	; (adr r3, 8001810 <MPU9250SelfTest+0x3f8>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	ec51 0b10 	vmov	r0, r1, d0
 8001712:	f7fe ff79 	bl	8000608 <__aeabi_dmul>
 8001716:	f7ff fa6f 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 800171a:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 800171c:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 8001720:	ee17 0a90 	vmov	r0, s15
 8001724:	f7fe ff18 	bl	8000558 <__aeabi_f2d>
 8001728:	2200      	movs	r2, #0
 800172a:	4b3c      	ldr	r3, [pc, #240]	; (800181c <MPU9250SelfTest+0x404>)
 800172c:	f7fe fdb4 	bl	8000298 <__aeabi_dsub>
 8001730:	ec41 0b11 	vmov	d1, r0, r1
 8001734:	eeb0 0a48 	vmov.f32	s0, s16
 8001738:	eef0 0a68 	vmov.f32	s1, s17
 800173c:	f007 f802 	bl	8008744 <pow>
 8001740:	a333      	add	r3, pc, #204	; (adr r3, 8001810 <MPU9250SelfTest+0x3f8>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	ec51 0b10 	vmov	r0, r1, d0
 800174a:	f7fe ff5d 	bl	8000608 <__aeabi_dmul>
 800174e:	f7ff fa53 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 8001752:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8001754:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 8001758:	ee17 0a90 	vmov	r0, s15
 800175c:	f7fe fefc 	bl	8000558 <__aeabi_f2d>
 8001760:	2200      	movs	r2, #0
 8001762:	4b2e      	ldr	r3, [pc, #184]	; (800181c <MPU9250SelfTest+0x404>)
 8001764:	f7fe fd98 	bl	8000298 <__aeabi_dsub>
 8001768:	ec41 0b11 	vmov	d1, r0, r1
 800176c:	eeb0 0a48 	vmov.f32	s0, s16
 8001770:	eef0 0a68 	vmov.f32	s1, s17
 8001774:	f006 ffe6 	bl	8008744 <pow>
 8001778:	a325      	add	r3, pc, #148	; (adr r3, 8001810 <MPU9250SelfTest+0x3f8>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	ec51 0b10 	vmov	r0, r1, d0
 8001782:	f7fe ff41 	bl	8000608 <__aeabi_dmul>
 8001786:	f7ff fa37 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 800178a:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 800178c:	eef8 7a69 	vcvt.f32.u32	s15, s19
 8001790:	ee17 0a90 	vmov	r0, s15
 8001794:	f7fe fee0 	bl	8000558 <__aeabi_f2d>
 8001798:	2200      	movs	r2, #0
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <MPU9250SelfTest+0x404>)
 800179c:	f7fe fd7c 	bl	8000298 <__aeabi_dsub>
 80017a0:	ec41 0b11 	vmov	d1, r0, r1
 80017a4:	eeb0 0a48 	vmov.f32	s0, s16
 80017a8:	eef0 0a68 	vmov.f32	s1, s17
 80017ac:	f006 ffca 	bl	8008744 <pow>
 80017b0:	a317      	add	r3, pc, #92	; (adr r3, 8001810 <MPU9250SelfTest+0x3f8>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	ec51 0b10 	vmov	r0, r1, d0
 80017ba:	f7fe ff25 	bl	8000608 <__aeabi_dmul>
 80017be:	f7ff fa1b 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 80017c2:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 80017c4:	eef8 7a49 	vcvt.f32.u32	s15, s18
 80017c8:	ee17 0a90 	vmov	r0, s15
 80017cc:	f7fe fec4 	bl	8000558 <__aeabi_f2d>
 80017d0:	2200      	movs	r2, #0
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <MPU9250SelfTest+0x404>)
 80017d4:	f7fe fd60 	bl	8000298 <__aeabi_dsub>
 80017d8:	ec41 0b11 	vmov	d1, r0, r1
 80017dc:	eeb0 0a48 	vmov.f32	s0, s16
 80017e0:	eef0 0a68 	vmov.f32	s1, s17
 80017e4:	f006 ffae 	bl	8008744 <pow>
 80017e8:	a309      	add	r3, pc, #36	; (adr r3, 8001810 <MPU9250SelfTest+0x3f8>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	ec51 0b10 	vmov	r0, r1, d0
 80017f2:	f7fe ff09 	bl	8000608 <__aeabi_dmul>
 80017f6:	f7ff f9ff 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 80017fa:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80017fc:	f04f 0800 	mov.w	r8, #0
 8001800:	e05f      	b.n	80018c2 <MPU9250SelfTest+0x4aa>
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	c28f5c29 	.word	0xc28f5c29
 800180c:	3ff028f5 	.word	0x3ff028f5
 8001810:	00000000 	.word	0x00000000
 8001814:	40a47800 	.word	0x40a47800
 8001818:	51eb851f 	.word	0x51eb851f
 800181c:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001820:	ab12      	add	r3, sp, #72	; 0x48
 8001822:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 8001826:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 800182a:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 800182e:	1ac0      	subs	r0, r0, r3
 8001830:	ee07 0a90 	vmov	s15, r0
 8001834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001838:	ee17 0a90 	vmov	r0, s15
 800183c:	f7fe fe8c 	bl	8000558 <__aeabi_f2d>
 8001840:	2200      	movs	r2, #0
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <MPU9250SelfTest+0x4bc>)
 8001844:	f7fe fee0 	bl	8000608 <__aeabi_dmul>
 8001848:	4606      	mov	r6, r0
 800184a:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 800184c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001850:	ab12      	add	r3, sp, #72	; 0x48
 8001852:	444b      	add	r3, r9
 8001854:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001858:	f7fe fe7e 	bl	8000558 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 800185c:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4630      	mov	r0, r6
 8001864:	4639      	mov	r1, r7
 8001866:	f7fe fff9 	bl	800085c <__aeabi_ddiv>
 800186a:	f7ff f9c5 	bl	8000bf8 <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 800186e:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001872:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001876:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 800187a:	1ac0      	subs	r0, r0, r3
 800187c:	ee07 0a90 	vmov	s15, r0
 8001880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001884:	ee17 0a90 	vmov	r0, s15
 8001888:	f7fe fe66 	bl	8000558 <__aeabi_f2d>
 800188c:	2200      	movs	r2, #0
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MPU9250SelfTest+0x4bc>)
 8001890:	f7fe feba 	bl	8000608 <__aeabi_dmul>
 8001894:	4606      	mov	r6, r0
 8001896:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001898:	f108 0403 	add.w	r4, r8, #3
 800189c:	00a4      	lsls	r4, r4, #2
 800189e:	ab12      	add	r3, sp, #72	; 0x48
 80018a0:	4423      	add	r3, r4
 80018a2:	f853 0c40 	ldr.w	r0, [r3, #-64]
 80018a6:	f7fe fe57 	bl	8000558 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 80018aa:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4630      	mov	r0, r6
 80018b2:	4639      	mov	r1, r7
 80018b4:	f7fe ffd2 	bl	800085c <__aeabi_ddiv>
 80018b8:	f7ff f99e 	bl	8000bf8 <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 80018bc:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 80018be:	f108 0801 	add.w	r8, r8, #1
 80018c2:	f1b8 0f02 	cmp.w	r8, #2
 80018c6:	ddab      	ble.n	8001820 <MPU9250SelfTest+0x408>
	}

}
 80018c8:	b013      	add	sp, #76	; 0x4c
 80018ca:	ecbd 8b08 	vpop	{d8-d11}
 80018ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018d2:	bf00      	nop
 80018d4:	40590000 	.word	0x40590000

080018d8 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 80018d8:	b508      	push	{r3, lr}
	resetMPU9250();
 80018da:	f7ff fcbe 	bl	800125a <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 80018de:	480e      	ldr	r0, [pc, #56]	; (8001918 <imu_calibrate+0x40>)
 80018e0:	f7ff fd9a 	bl	8001418 <MPU9250SelfTest>
	HAL_Delay(500);
 80018e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e8:	f000 fd56 	bl	8002398 <HAL_Delay>
	HAL_Delay(500);
 80018ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f0:	f000 fd52 	bl	8002398 <HAL_Delay>
	initMPU9250();
 80018f4:	f7ff fd20 	bl	8001338 <initMPU9250>
	initAK8963(magCalibration);
 80018f8:	4808      	ldr	r0, [pc, #32]	; (800191c <imu_calibrate+0x44>)
 80018fa:	f7ff fcb9 	bl	8001270 <initAK8963>
	HAL_Delay(500);
 80018fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001902:	f000 fd49 	bl	8002398 <HAL_Delay>
	getAres(); // Get accelerometer sensitivity
 8001906:	f7ff fc1d 	bl	8001144 <getAres>
	getGres(); // Get gyro sensitivity
 800190a:	f7ff fbf7 	bl	80010fc <getGres>
	getMres(); // Get magnetometer sensitivity
 800190e:	f7ff fbdf 	bl	80010d0 <getMres>
}
 8001912:	2000      	movs	r0, #0
 8001914:	bd08      	pop	{r3, pc}
 8001916:	bf00      	nop
 8001918:	200049bc 	.word	0x200049bc
 800191c:	2000001c 	.word	0x2000001c

08001920 <MahonyQuaternionUpdate>:
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001920:	ee61 7a01 	vmul.f32	s15, s2, s2
		float mz) {
 8001924:	b530      	push	{r4, r5, lr}
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001926:	eee0 7aa0 	vfma.f32	s15, s1, s1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 800192a:	4cb9      	ldr	r4, [pc, #740]	; (8001c10 <MahonyQuaternionUpdate+0x2f0>)
		float mz) {
 800192c:	ed2d 8b10 	vpush	{d8-d15}
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001930:	eee0 7a00 	vfma.f32	s15, s0, s0
		float mz) {
 8001934:	b089      	sub	sp, #36	; 0x24
 8001936:	eeb0 aa41 	vmov.f32	s20, s2
	norm = sqrt(ax * ax + ay * ay + az * az);
 800193a:	ee17 0a90 	vmov	r0, s15
		float mz) {
 800193e:	eeb0 ca61 	vmov.f32	s24, s3
 8001942:	eeb0 ea42 	vmov.f32	s28, s4
 8001946:	eef0 da62 	vmov.f32	s27, s5
 800194a:	eef0 ba43 	vmov.f32	s23, s6
 800194e:	eeb0 ba63 	vmov.f32	s22, s7
 8001952:	eef0 ca44 	vmov.f32	s25, s8
 8001956:	eef0 8a60 	vmov.f32	s17, s1
 800195a:	eeb0 8a40 	vmov.f32	s16, s0
	norm = sqrt(ax * ax + ay * ay + az * az);
 800195e:	f7fe fdfb 	bl	8000558 <__aeabi_f2d>
 8001962:	ec41 0b10 	vmov	d0, r0, r1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001966:	ed94 9a00 	vldr	s18, [r4]
 800196a:	ed94 da01 	vldr	s26, [r4, #4]
 800196e:	edd4 aa02 	vldr	s21, [r4, #8]
 8001972:	edd4 9a03 	vldr	s19, [r4, #12]
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001976:	f007 f855 	bl	8008a24 <sqrt>
 800197a:	ec51 0b10 	vmov	r0, r1, d0
 800197e:	f7ff f93b 	bl	8000bf8 <__aeabi_d2f>
 8001982:	ee0e 0a90 	vmov	s29, r0
	if (norm == 0.0f)
 8001986:	eef5 ea40 	vcmp.f32	s29, #0.0
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	d103      	bne.n	8001998 <MahonyQuaternionUpdate+0x78>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001990:	b009      	add	sp, #36	; 0x24
 8001992:	ecbd 8b10 	vpop	{d8-d15}
 8001996:	bd30      	pop	{r4, r5, pc}
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001998:	ee6c 7aac 	vmul.f32	s15, s25, s25
 800199c:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 80019a0:	eeeb 7aab 	vfma.f32	s15, s23, s23
 80019a4:	ee17 0a90 	vmov	r0, s15
 80019a8:	f7fe fdd6 	bl	8000558 <__aeabi_f2d>
 80019ac:	ec41 0b10 	vmov	d0, r0, r1
 80019b0:	f007 f838 	bl	8008a24 <sqrt>
 80019b4:	ec51 0b10 	vmov	r0, r1, d0
 80019b8:	f7ff f91e 	bl	8000bf8 <__aeabi_d2f>
 80019bc:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 80019c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	d0e2      	beq.n	8001990 <MahonyQuaternionUpdate+0x70>
	norm = 1.0f / norm;        // use reciprocal for division
 80019ca:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
	norm = 1.0f / norm;        // use reciprocal for division
 80019ce:	ee8f 4a27 	vdiv.f32	s8, s30, s15
 80019d2:	2500      	movs	r5, #0
	float q4q4 = q4 * q4;
 80019d4:	ee29 6aa9 	vmul.f32	s12, s19, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019d8:	ee2d 7a4d 	vnmul.f32	s14, s26, s26
	float q2q3 = q2 * q3;
 80019dc:	ee6d 6a2a 	vmul.f32	s13, s26, s21
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019e0:	ee77 7a46 	vsub.f32	s15, s14, s12
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019e4:	eef1 5a49 	vneg.f32	s11, s18
 80019e8:	eef0 4a46 	vmov.f32	s9, s12
 80019ec:	eef6 fa00 	vmov.f32	s31, #96	; 0x3f000000  0.5
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019f0:	eef0 3a66 	vmov.f32	s7, s13
	my *= norm;
 80019f4:	ee2b ba04 	vmul.f32	s22, s22, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019f8:	eee5 6aa9 	vfma.f32	s13, s11, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019fc:	eee9 3a29 	vfma.f32	s7, s18, s19
 8001a00:	ee77 7aaf 	vadd.f32	s15, s15, s31
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a04:	eeea 4aaa 	vfma.f32	s9, s21, s21
	float q3q4 = q3 * q4;
 8001a08:	ee2a 5aa9 	vmul.f32	s10, s21, s19
	mx *= norm;
 8001a0c:	ee6b ba84 	vmul.f32	s23, s23, s8
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a10:	ee67 7a8b 	vmul.f32	s15, s15, s22
	norm = 1.0f / norm;        // use reciprocal for division
 8001a14:	ee8f 1a2e 	vdiv.f32	s2, s30, s29
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a18:	eeb0 3a45 	vmov.f32	s6, s10
	mz *= norm;
 8001a1c:	ee6c ea84 	vmul.f32	s29, s25, s8
	float q2q4 = q2 * q4;
 8001a20:	ee6d ca29 	vmul.f32	s25, s26, s19
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a24:	eea5 3a8d 	vfma.f32	s6, s11, s26
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a28:	ee7f 4ae4 	vsub.f32	s9, s31, s9
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a2c:	eee3 7aab 	vfma.f32	s15, s7, s23
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a30:	ee66 3a8b 	vmul.f32	s7, s13, s22
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a34:	eeb0 4a6c 	vmov.f32	s8, s25
 8001a38:	eea9 4a2a 	vfma.f32	s8, s18, s21
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a3c:	eee4 3aab 	vfma.f32	s7, s9, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a40:	eee3 7a2e 	vfma.f32	s15, s6, s29
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a44:	eee4 3a2e 	vfma.f32	s7, s8, s29
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a48:	ee77 7aa7 	vadd.f32	s15, s15, s15
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a4c:	ee73 3aa3 	vadd.f32	s7, s7, s7
	bx = sqrt((hx * hx) + (hy * hy));
 8001a50:	ee67 7aa7 	vmul.f32	s15, s15, s15
	ax *= norm;
 8001a54:	ee28 8a01 	vmul.f32	s16, s16, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001a58:	eee3 7aa3 	vfma.f32	s15, s7, s7
	ay *= norm;
 8001a5c:	ee68 8a81 	vmul.f32	s17, s17, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001a60:	ee17 0a90 	vmov	r0, s15
	az *= norm;
 8001a64:	ee2a aa01 	vmul.f32	s20, s20, s2
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a68:	ed8d 7a07 	vstr	s14, [sp, #28]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a6c:	ed8d 6a06 	vstr	s12, [sp, #24]
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a70:	ed8d 5a05 	vstr	s10, [sp, #20]
 8001a74:	edcd 5a04 	vstr	s11, [sp, #16]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a78:	edcd 6a03 	vstr	s13, [sp, #12]
 8001a7c:	edcd 4a02 	vstr	s9, [sp, #8]
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a80:	ed8d 4a01 	vstr	s8, [sp, #4]
	bx = sqrt((hx * hx) + (hy * hy));
 8001a84:	f7fe fd68 	bl	8000558 <__aeabi_f2d>
 8001a88:	ec41 0b10 	vmov	d0, r0, r1
 8001a8c:	f006 ffca 	bl	8008a24 <sqrt>
 8001a90:	ec51 0b10 	vmov	r0, r1, d0
 8001a94:	f7ff f8b0 	bl	8000bf8 <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a98:	ed9d 5a05 	vldr	s10, [sp, #20]
 8001a9c:	eddd 5a04 	vldr	s11, [sp, #16]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001aa0:	ed9d 7a07 	vldr	s14, [sp, #28]
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001aa4:	ed9d 6a06 	vldr	s12, [sp, #24]
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001aa8:	eddd 4a02 	vldr	s9, [sp, #8]
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001aac:	ed9d 4a01 	vldr	s8, [sp, #4]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001ab0:	eddd 6a03 	vldr	s13, [sp, #12]
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001ab4:	4a57      	ldr	r2, [pc, #348]	; (8001c14 <MahonyQuaternionUpdate+0x2f4>)
		eInt[0] = 0.0f;     // prevent integral wind up
 8001ab6:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <MahonyQuaternionUpdate+0x2f8>)
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ab8:	eea9 5a0d 	vfma.f32	s10, s18, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001abc:	601d      	str	r5, [r3, #0]
		eInt[1] = 0.0f;
 8001abe:	605d      	str	r5, [r3, #4]
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ac0:	eee5 caaa 	vfma.f32	s25, s11, s21
		eInt[2] = 0.0f;
 8001ac4:	609d      	str	r5, [r3, #8]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ac6:	eeb1 3a6a 	vneg.f32	s6, s21
 8001aca:	eef0 5a47 	vmov.f32	s11, s14
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ace:	ee65 7a0b 	vmul.f32	s15, s10, s22
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ad2:	eee3 5a2a 	vfma.f32	s11, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ad6:	eeec 7aab 	vfma.f32	s15, s25, s23
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ada:	ee75 5aaf 	vadd.f32	s11, s11, s31
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ade:	eea9 7a09 	vfma.f32	s14, s18, s18
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ae2:	eee5 7aae 	vfma.f32	s15, s11, s29
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ae6:	eea3 7a2a 	vfma.f32	s14, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001aea:	ee77 7aa7 	vadd.f32	s15, s15, s15
	bx = sqrt((hx * hx) + (hy * hy));
 8001aee:	ee03 0a90 	vmov	s7, r0
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001af2:	ee37 6a06 	vadd.f32	s12, s14, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001af6:	ee2c 3aa7 	vmul.f32	s6, s25, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001afa:	ee7c caac 	vadd.f32	s25, s25, s25
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001afe:	eea4 3aa3 	vfma.f32	s6, s9, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001b02:	ee66 4a48 	vnmul.f32	s9, s12, s16
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001b06:	ee25 7aa7 	vmul.f32	s14, s11, s15
	vy = 2.0f * (q1q2 + q3q4);
 8001b0a:	ee75 5a05 	vadd.f32	s11, s10, s10
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001b0e:	eeea 4a2c 	vfma.f32	s9, s20, s25
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001b12:	eea4 7a23 	vfma.f32	s14, s8, s7
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b16:	ee25 1aca 	vnmul.f32	s2, s11, s20
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001b1a:	ee65 7a27 	vmul.f32	s15, s10, s15
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b1e:	eea8 1a86 	vfma.f32	s2, s17, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001b22:	ee33 5a03 	vadd.f32	s10, s6, s6
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001b26:	eee6 7aa3 	vfma.f32	s15, s13, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001b2a:	eef0 6a64 	vmov.f32	s13, s9
 8001b2e:	eeee 6a85 	vfma.f32	s13, s29, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001b32:	ee37 7a07 	vadd.f32	s14, s14, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b36:	ee6c cae8 	vnmul.f32	s25, s25, s17
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b3a:	eeab 1a07 	vfma.f32	s2, s22, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b3e:	eee8 ca25 	vfma.f32	s25, s16, s11
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001b42:	eeeb 6ac7 	vfms.f32	s13, s23, s14
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001b46:	ee77 7aa7 	vadd.f32	s15, s15, s15
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b4a:	eeb0 8a6a 	vmov.f32	s16, s21
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b4e:	eeae 1ae7 	vfms.f32	s2, s29, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b52:	eeeb caa7 	vfma.f32	s25, s23, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001b56:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	gy = gy + Kp * ey + Ki * eInt[1];
 8001b5a:	eea6 eaa7 	vfma.f32	s28, s13, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001b5e:	eea1 ca27 	vfma.f32	s24, s2, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b62:	eeeb ca45 	vfms.f32	s25, s22, s10
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b66:	ee6a 6a8e 	vmul.f32	s13, s21, s28
	gz = gz + Kp * ez + Ki * eInt[2];
 8001b6a:	eeec daa7 	vfma.f32	s27, s25, s15
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b6e:	eeed 6a0c 	vfma.f32	s13, s26, s24
 8001b72:	edd2 7a00 	vldr	s15, [r2]
 8001b76:	eee9 6aad 	vfma.f32	s13, s19, s27
 8001b7a:	ee67 faaf 	vmul.f32	s31, s15, s31
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b7e:	ee29 7a8c 	vmul.f32	s14, s19, s24
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b82:	eea6 9aef 	vfms.f32	s18, s13, s31
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b86:	ee6e 7a69 	vnmul.f32	s15, s28, s19
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b8a:	eead 7a6d 	vfms.f32	s14, s26, s27
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b8e:	eeea 7aad 	vfma.f32	s15, s21, s27
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b92:	eeae 7a09 	vfma.f32	s14, s28, s18
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b96:	eeec 7a09 	vfma.f32	s15, s24, s18
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b9a:	eea7 8a2f 	vfma.f32	s16, s14, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b9e:	ee2c ca6a 	vnmul.f32	s24, s24, s21
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001ba2:	eef0 8a4d 	vmov.f32	s17, s26
 8001ba6:	eee7 8aaf 	vfma.f32	s17, s15, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001baa:	eead ca0e 	vfma.f32	s24, s26, s28
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001bae:	ee68 7a08 	vmul.f32	s15, s16, s16
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001bb2:	eead ca89 	vfma.f32	s24, s27, s18
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001bb6:	eee8 7aa8 	vfma.f32	s15, s17, s17
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001bba:	eeec 9a2f 	vfma.f32	s19, s24, s31
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001bbe:	eee9 7a09 	vfma.f32	s15, s18, s18
 8001bc2:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8001bc6:	ee17 0a90 	vmov	r0, s15
 8001bca:	f7fe fcc5 	bl	8000558 <__aeabi_f2d>
 8001bce:	ec41 0b10 	vmov	d0, r0, r1
 8001bd2:	f006 ff27 	bl	8008a24 <sqrt>
 8001bd6:	ec51 0b10 	vmov	r0, r1, d0
 8001bda:	f7ff f80d 	bl	8000bf8 <__aeabi_d2f>
	norm = 1.0f / norm;
 8001bde:	ee07 0a90 	vmov	s15, r0
 8001be2:	eecf 7a27 	vdiv.f32	s15, s30, s15
	q[1] = q2 * norm;
 8001be6:	ee68 8aa7 	vmul.f32	s17, s17, s15
	q[2] = q3 * norm;
 8001bea:	ee28 8a27 	vmul.f32	s16, s16, s15
	q[3] = q4 * norm;
 8001bee:	ee69 9aa7 	vmul.f32	s19, s19, s15
	q[0] = q1 * norm;
 8001bf2:	ee29 9a27 	vmul.f32	s18, s18, s15
	q[1] = q2 * norm;
 8001bf6:	edc4 8a01 	vstr	s17, [r4, #4]
	q[2] = q3 * norm;
 8001bfa:	ed84 8a02 	vstr	s16, [r4, #8]
	q[3] = q4 * norm;
 8001bfe:	edc4 9a03 	vstr	s19, [r4, #12]
	q[0] = q1 * norm;
 8001c02:	ed84 9a00 	vstr	s18, [r4]
}
 8001c06:	b009      	add	sp, #36	; 0x24
 8001c08:	ecbd 8b10 	vpop	{d8-d15}
 8001c0c:	bd30      	pop	{r4, r5, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000040 	.word	0x20000040
 8001c14:	20000270 	.word	0x20000270
 8001c18:	20000274 	.word	0x20000274
 8001c1c:	00000000 	.word	0x00000000

08001c20 <calc_RollPitchYaw>:
void calc_RollPitchYaw(float *roll, float *pitch, float *yaw, float *yaw_rate) {
 8001c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c24:	4607      	mov	r7, r0
 8001c26:	4689      	mov	r9, r1
 8001c28:	4690      	mov	r8, r2
 8001c2a:	461c      	mov	r4, r3
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 8001c2c:	223a      	movs	r2, #58	; 0x3a
 8001c2e:	21d1      	movs	r1, #209	; 0xd1
 8001c30:	20d0      	movs	r0, #208	; 0xd0
 8001c32:	f7ff f9cb 	bl	8000fcc <readByte>
 8001c36:	f010 0f01 	tst.w	r0, #1
 8001c3a:	f040 80eb 	bne.w	8001e14 <calc_RollPitchYaw+0x1f4>
	*yaw_rate = gz;
 8001c3e:	4bde      	ldr	r3, [pc, #888]	; (8001fb8 <calc_RollPitchYaw+0x398>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6023      	str	r3, [r4, #0]
	Now = htim11.Instance->CNT;
 8001c44:	4bdd      	ldr	r3, [pc, #884]	; (8001fbc <calc_RollPitchYaw+0x39c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c50:	4bdb      	ldr	r3, [pc, #876]	; (8001fc0 <calc_RollPitchYaw+0x3a0>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
	if (Now - lastUpdate < 0) {
 8001c56:	4bdb      	ldr	r3, [pc, #876]	; (8001fc4 <calc_RollPitchYaw+0x3a4>)
 8001c58:	edd3 6a00 	vldr	s13, [r3]
 8001c5c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8001c60:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	f100 818e 	bmi.w	8001f88 <calc_RollPitchYaw+0x368>
		deltat = (float) ((Now - lastUpdate) * (1 / (TIMER_CLK_FREQ / 100.0f))); // set integration time by time elapsed since last filter update
 8001c6c:	eddf 6ad6 	vldr	s13, [pc, #856]	; 8001fc8 <calc_RollPitchYaw+0x3a8>
 8001c70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c74:	4bd5      	ldr	r3, [pc, #852]	; (8001fcc <calc_RollPitchYaw+0x3ac>)
 8001c76:	ed83 7a00 	vstr	s14, [r3]
	lastUpdate = Now;
 8001c7a:	4bd2      	ldr	r3, [pc, #840]	; (8001fc4 <calc_RollPitchYaw+0x3a4>)
 8001c7c:	edc3 7a00 	vstr	s15, [r3]
	sum += deltat;
 8001c80:	4ed3      	ldr	r6, [pc, #844]	; (8001fd0 <calc_RollPitchYaw+0x3b0>)
 8001c82:	edd6 7a00 	vldr	s15, [r6]
 8001c86:	4bd1      	ldr	r3, [pc, #836]	; (8001fcc <calc_RollPitchYaw+0x3ac>)
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c90:	edc6 7a00 	vstr	s15, [r6]
	sumCount++;
 8001c94:	4dcf      	ldr	r5, [pc, #828]	; (8001fd4 <calc_RollPitchYaw+0x3b4>)
 8001c96:	682b      	ldr	r3, [r5, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	602b      	str	r3, [r5, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0,
 8001c9c:	4bce      	ldr	r3, [pc, #824]	; (8001fd8 <calc_RollPitchYaw+0x3b8>)
 8001c9e:	edd3 1a00 	vldr	s3, [r3]
 8001ca2:	eddf 7ace 	vldr	s15, [pc, #824]	; 8001fdc <calc_RollPitchYaw+0x3bc>
 8001ca6:	ee61 1aa7 	vmul.f32	s3, s3, s15
 8001caa:	4bcd      	ldr	r3, [pc, #820]	; (8001fe0 <calc_RollPitchYaw+0x3c0>)
 8001cac:	ed93 2a00 	vldr	s4, [r3]
 8001cb0:	ee22 2a27 	vmul.f32	s4, s4, s15
			gz * PI / 180.0, my, mx, mz);
 8001cb4:	4bc0      	ldr	r3, [pc, #768]	; (8001fb8 <calc_RollPitchYaw+0x398>)
 8001cb6:	edd3 2a00 	vldr	s5, [r3]
 8001cba:	ee62 2aa7 	vmul.f32	s5, s5, s15
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0,
 8001cbe:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8001fe4 <calc_RollPitchYaw+0x3c4>
 8001cc2:	4bc9      	ldr	r3, [pc, #804]	; (8001fe8 <calc_RollPitchYaw+0x3c8>)
 8001cc4:	ed93 4a00 	vldr	s8, [r3]
 8001cc8:	4bc8      	ldr	r3, [pc, #800]	; (8001fec <calc_RollPitchYaw+0x3cc>)
 8001cca:	edd3 3a00 	vldr	s7, [r3]
 8001cce:	4bc8      	ldr	r3, [pc, #800]	; (8001ff0 <calc_RollPitchYaw+0x3d0>)
 8001cd0:	ed93 3a00 	vldr	s6, [r3]
 8001cd4:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 8001cd8:	ee82 2a27 	vdiv.f32	s4, s4, s15
 8001cdc:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8001ce0:	4bc4      	ldr	r3, [pc, #784]	; (8001ff4 <calc_RollPitchYaw+0x3d4>)
 8001ce2:	ed93 1a00 	vldr	s2, [r3]
 8001ce6:	4bc4      	ldr	r3, [pc, #784]	; (8001ff8 <calc_RollPitchYaw+0x3d8>)
 8001ce8:	edd3 0a00 	vldr	s1, [r3]
 8001cec:	4bc3      	ldr	r3, [pc, #780]	; (8001ffc <calc_RollPitchYaw+0x3dc>)
 8001cee:	ed93 0a00 	vldr	s0, [r3]
 8001cf2:	f7ff fe15 	bl	8001920 <MahonyQuaternionUpdate>
	*yaw = atan2f(2.0 * (q[1] * q[2] + q[0] * q[3]),
 8001cf6:	4cc2      	ldr	r4, [pc, #776]	; (8002000 <calc_RollPitchYaw+0x3e0>)
 8001cf8:	edd4 6a01 	vldr	s13, [r4, #4]
 8001cfc:	ed94 7a02 	vldr	s14, [r4, #8]
 8001d00:	ee26 0a87 	vmul.f32	s0, s13, s14
 8001d04:	edd4 7a00 	vldr	s15, [r4]
 8001d08:	edd4 0a03 	vldr	s1, [r4, #12]
 8001d0c:	ee27 6aa0 	vmul.f32	s12, s15, s1
 8001d10:	ee30 0a06 	vadd.f32	s0, s0, s12
			q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8001d14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d18:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8001d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d20:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001d24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d28:	ee60 0aa0 	vmul.f32	s1, s1, s1
	*yaw = atan2f(2.0 * (q[1] * q[2] + q[0] * q[3]),
 8001d2c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8001d30:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001d34:	f006 ff28 	bl	8008b88 <atan2f>
 8001d38:	ed88 0a00 	vstr	s0, [r8]
	*pitch = -asinf(2.0 * (q[1] * q[3] - q[0] * q[2]));
 8001d3c:	ed94 0a01 	vldr	s0, [r4, #4]
 8001d40:	edd4 7a03 	vldr	s15, [r4, #12]
 8001d44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001d48:	edd4 7a00 	vldr	s15, [r4]
 8001d4c:	ed94 7a02 	vldr	s14, [r4, #8]
 8001d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d54:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001d58:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001d5c:	f006 febc 	bl	8008ad8 <asinf>
 8001d60:	eeb1 0a40 	vneg.f32	s0, s0
 8001d64:	ed89 0a00 	vstr	s0, [r9]
	*roll = atan2f(2.0 * (q[0] * q[1] + q[2] * q[3]),
 8001d68:	edd4 7a00 	vldr	s15, [r4]
 8001d6c:	edd4 6a01 	vldr	s13, [r4, #4]
 8001d70:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8001d74:	ed94 7a02 	vldr	s14, [r4, #8]
 8001d78:	edd4 0a03 	vldr	s1, [r4, #12]
 8001d7c:	ee27 6a20 	vmul.f32	s12, s14, s1
 8001d80:	ee30 0a06 	vadd.f32	s0, s0, s12
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8001d84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d88:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8001d8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d90:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d98:	ee60 0aa0 	vmul.f32	s1, s1, s1
	*roll = atan2f(2.0 * (q[0] * q[1] + q[2] * q[3]),
 8001d9c:	ee77 0aa0 	vadd.f32	s1, s15, s1
 8001da0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001da4:	f006 fef0 	bl	8008b88 <atan2f>
 8001da8:	ed87 0a00 	vstr	s0, [r7]
	*pitch *= 180.0 / PI;
 8001dac:	f8d9 0000 	ldr.w	r0, [r9]
 8001db0:	f7fe fbd2 	bl	8000558 <__aeabi_f2d>
 8001db4:	a37c      	add	r3, pc, #496	; (adr r3, 8001fa8 <calc_RollPitchYaw+0x388>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fc25 	bl	8000608 <__aeabi_dmul>
 8001dbe:	f7fe ff1b 	bl	8000bf8 <__aeabi_d2f>
 8001dc2:	f8c9 0000 	str.w	r0, [r9]
	*yaw *= 180.0 / PI;
 8001dc6:	f8d8 0000 	ldr.w	r0, [r8]
 8001dca:	f7fe fbc5 	bl	8000558 <__aeabi_f2d>
 8001dce:	a376      	add	r3, pc, #472	; (adr r3, 8001fa8 <calc_RollPitchYaw+0x388>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fc18 	bl	8000608 <__aeabi_dmul>
 8001dd8:	f7fe ff0e 	bl	8000bf8 <__aeabi_d2f>
	*yaw -= -0.6; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8001ddc:	f7fe fbbc 	bl	8000558 <__aeabi_f2d>
 8001de0:	a373      	add	r3, pc, #460	; (adr r3, 8001fb0 <calc_RollPitchYaw+0x390>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	f7fe fa59 	bl	800029c <__adddf3>
 8001dea:	f7fe ff05 	bl	8000bf8 <__aeabi_d2f>
 8001dee:	f8c8 0000 	str.w	r0, [r8]
	*roll *= 180.0 / PI;
 8001df2:	6838      	ldr	r0, [r7, #0]
 8001df4:	f7fe fbb0 	bl	8000558 <__aeabi_f2d>
 8001df8:	a36b      	add	r3, pc, #428	; (adr r3, 8001fa8 <calc_RollPitchYaw+0x388>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fc03 	bl	8000608 <__aeabi_dmul>
 8001e02:	f7fe fef9 	bl	8000bf8 <__aeabi_d2f>
 8001e06:	6038      	str	r0, [r7, #0]
	sum = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	6033      	str	r3, [r6, #0]
	sumCount = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	602b      	str	r3, [r5, #0]
}
 8001e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		readAccelData(accelCount);  // Read the x/y/z adc values
 8001e14:	4d7b      	ldr	r5, [pc, #492]	; (8002004 <calc_RollPitchYaw+0x3e4>)
 8001e16:	4628      	mov	r0, r5
 8001e18:	f7ff f9b4 	bl	8001184 <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 8001e1c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001e20:	ee07 3a10 	vmov	s14, r3
 8001e24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e28:	4b77      	ldr	r3, [pc, #476]	; (8002008 <calc_RollPitchYaw+0x3e8>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <calc_RollPitchYaw+0x3ec>)
 8001e34:	edd3 6a00 	vldr	s13, [r3]
 8001e38:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001e3c:	4a6f      	ldr	r2, [pc, #444]	; (8001ffc <calc_RollPitchYaw+0x3dc>)
 8001e3e:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 8001e42:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8001e46:	ee07 2a10 	vmov	s14, r2
 8001e4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e52:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e56:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001e5a:	4a67      	ldr	r2, [pc, #412]	; (8001ff8 <calc_RollPitchYaw+0x3d8>)
 8001e5c:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 8001e60:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8001e64:	ee07 2a10 	vmov	s14, r2
 8001e68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e78:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <calc_RollPitchYaw+0x3d4>)
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 8001e7e:	4d64      	ldr	r5, [pc, #400]	; (8002010 <calc_RollPitchYaw+0x3f0>)
 8001e80:	4628      	mov	r0, r5
 8001e82:	f7ff f9a1 	bl	80011c8 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8001e86:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001e8a:	ee07 3a10 	vmov	s14, r3
 8001e8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e92:	4b60      	ldr	r3, [pc, #384]	; (8002014 <calc_RollPitchYaw+0x3f4>)
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9c:	4b5e      	ldr	r3, [pc, #376]	; (8002018 <calc_RollPitchYaw+0x3f8>)
 8001e9e:	edd3 6a00 	vldr	s13, [r3]
 8001ea2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001ea6:	4a4c      	ldr	r2, [pc, #304]	; (8001fd8 <calc_RollPitchYaw+0x3b8>)
 8001ea8:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8001eac:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8001eb0:	ee07 2a10 	vmov	s14, r2
 8001eb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001eb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ebc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ec0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001ec4:	4a46      	ldr	r2, [pc, #280]	; (8001fe0 <calc_RollPitchYaw+0x3c0>)
 8001ec6:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8001eca:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8001ece:	ee07 2a10 	vmov	s14, r2
 8001ed2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eda:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ee2:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <calc_RollPitchYaw+0x398>)
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 8001ee8:	4d4c      	ldr	r5, [pc, #304]	; (800201c <calc_RollPitchYaw+0x3fc>)
 8001eea:	4628      	mov	r0, r5
 8001eec:	f7ff f98e 	bl	800120c <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 8001ef0:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001ef4:	ee06 3a90 	vmov	s13, r3
 8001ef8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001efc:	4b48      	ldr	r3, [pc, #288]	; (8002020 <calc_RollPitchYaw+0x400>)
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f06:	4a47      	ldr	r2, [pc, #284]	; (8002024 <calc_RollPitchYaw+0x404>)
 8001f08:	ed92 7a00 	vldr	s14, [r2]
 8001f0c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001f10:	4b45      	ldr	r3, [pc, #276]	; (8002028 <calc_RollPitchYaw+0x408>)
 8001f12:	ed93 7a00 	vldr	s14, [r3]
 8001f16:	ee76 6ac7 	vsub.f32	s13, s13, s14
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 8001f1a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8001f1e:	ee07 1a10 	vmov	s14, r1
 8001f22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f2a:	ed92 6a01 	vldr	s12, [r2, #4]
 8001f2e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001f32:	ed93 6a01 	vldr	s12, [r3, #4]
 8001f36:	ee37 7a46 	vsub.f32	s14, s14, s12
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 8001f3a:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8001f3e:	ee06 1a10 	vmov	s12, r1
 8001f42:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001f46:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001f4a:	ed92 6a02 	vldr	s12, [r2, #8]
 8001f4e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001f52:	ed93 6a02 	vldr	s12, [r3, #8]
 8001f56:	ee77 7ac6 	vsub.f32	s15, s15, s12
		mx *= magscale[0];
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <calc_RollPitchYaw+0x40c>)
 8001f5c:	ed93 6a00 	vldr	s12, [r3]
 8001f60:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <calc_RollPitchYaw+0x3cc>)
 8001f66:	edc2 6a00 	vstr	s13, [r2]
		my *= magscale[1];
 8001f6a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f6e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f72:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <calc_RollPitchYaw+0x3d0>)
 8001f74:	ed82 7a00 	vstr	s14, [r2]
		mz *= magscale[2];
 8001f78:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <calc_RollPitchYaw+0x3c8>)
 8001f82:	edc3 7a00 	vstr	s15, [r3]
 8001f86:	e65a      	b.n	8001c3e <calc_RollPitchYaw+0x1e>
		deltat = (float) (((65535 - lastUpdate) + Now)
 8001f88:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002030 <calc_RollPitchYaw+0x410>
 8001f8c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f94:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001fc8 <calc_RollPitchYaw+0x3a8>
 8001f98:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <calc_RollPitchYaw+0x3ac>)
 8001f9e:	ed83 7a00 	vstr	s14, [r3]
 8001fa2:	e66a      	b.n	8001c7a <calc_RollPitchYaw+0x5a>
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	0d03cf26 	.word	0x0d03cf26
 8001fac:	404ca5dc 	.word	0x404ca5dc
 8001fb0:	33333333 	.word	0x33333333
 8001fb4:	3fe33333 	.word	0x3fe33333
 8001fb8:	20004a4c 	.word	0x20004a4c
 8001fbc:	200051a8 	.word	0x200051a8
 8001fc0:	20000268 	.word	0x20000268
 8001fc4:	20000280 	.word	0x20000280
 8001fc8:	358637bd 	.word	0x358637bd
 8001fcc:	20000270 	.word	0x20000270
 8001fd0:	20000284 	.word	0x20000284
 8001fd4:	20000288 	.word	0x20000288
 8001fd8:	20004a70 	.word	0x20004a70
 8001fdc:	40490fdb 	.word	0x40490fdb
 8001fe0:	20004a28 	.word	0x20004a28
 8001fe4:	43340000 	.word	0x43340000
 8001fe8:	20004a54 	.word	0x20004a54
 8001fec:	20004a78 	.word	0x20004a78
 8001ff0:	20004a3c 	.word	0x20004a3c
 8001ff4:	20004a2c 	.word	0x20004a2c
 8001ff8:	20004a74 	.word	0x20004a74
 8001ffc:	20004a40 	.word	0x20004a40
 8002000:	20000040 	.word	0x20000040
 8002004:	200049b4 	.word	0x200049b4
 8002008:	20004a44 	.word	0x20004a44
 800200c:	20000004 	.word	0x20000004
 8002010:	20004a34 	.word	0x20004a34
 8002014:	20004a50 	.word	0x20004a50
 8002018:	20000010 	.word	0x20000010
 800201c:	20004a5c 	.word	0x20004a5c
 8002020:	20004a6c 	.word	0x20004a6c
 8002024:	2000001c 	.word	0x2000001c
 8002028:	20000028 	.word	0x20000028
 800202c:	20000034 	.word	0x20000034
 8002030:	477fff00 	.word	0x477fff00

08002034 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {

	TxCplt = 1;
 8002034:	4b01      	ldr	r3, [pc, #4]	; (800203c <HAL_I2C_MasterTxCpltCallback+0x8>)
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]

}
 800203a:	4770      	bx	lr
 800203c:	2000026d 	.word	0x2000026d

08002040 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {

	RxCplt = 1;
 8002040:	4b01      	ldr	r3, [pc, #4]	; (8002048 <HAL_I2C_MasterRxCpltCallback+0x8>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
}
 8002046:	4770      	bx	lr
 8002048:	2000026c 	.word	0x2000026c

0800204c <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = roll_setpoint - IMU_roll_value;
 800204c:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <pid_calculate_roll+0xac>)
 8002052:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <pid_calculate_roll+0xb0>)
 8002058:	edd3 6a00 	vldr	s13, [r3]
 800205c:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <pid_calculate_roll+0xb4>)
 8002062:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8002066:	4b27      	ldr	r3, [pc, #156]	; (8002104 <pid_calculate_roll+0xb8>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002070:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002108 <pid_calculate_roll+0xbc>
 8002074:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <pid_calculate_roll+0xc0>)
 800207a:	ed93 7a00 	vldr	s14, [r3]
 800207e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002082:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <pid_calculate_roll+0xc4>)
 8002088:	ed93 6a00 	vldr	s12, [r3]
 800208c:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002090:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002094:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <pid_calculate_roll+0xc8>)
 8002096:	ed92 6a00 	vldr	s12, [r2]
 800209a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800209e:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <pid_calculate_roll+0xcc>)
 80020a0:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 80020a4:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 80020a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <pid_calculate_roll+0xd0>)
 80020b2:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <pid_calculate_roll+0xd4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	425a      	negs	r2, r3
 80020bc:	ee07 2a10 	vmov	s14, r2
 80020c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020cc:	d40c      	bmi.n	80020e8 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 80020ce:	ee07 3a10 	vmov	s14, r3
 80020d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020de:	dd06      	ble.n	80020ee <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <pid_calculate_roll+0xd0>)
 80020e2:	ed83 7a00 	vstr	s14, [r3]
 80020e6:	e002      	b.n	80020ee <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <pid_calculate_roll+0xd0>)
 80020ea:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <pid_calculate_roll+0xd0>)
 80020f0:	ed93 0a00 	vldr	s0, [r3]
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000298 	.word	0x20000298
 80020fc:	20004b50 	.word	0x20004b50
 8002100:	20004a90 	.word	0x20004a90
 8002104:	20004b14 	.word	0x20004b14
 8002108:	3b015038 	.word	0x3b015038
 800210c:	20004a9c 	.word	0x20004a9c
 8002110:	2000029c 	.word	0x2000029c
 8002114:	20004b24 	.word	0x20004b24
 8002118:	20004a7c 	.word	0x20004a7c
 800211c:	200002a0 	.word	0x200002a0
 8002120:	20000054 	.word	0x20000054

08002124 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <reset_pid_roll+0x14>)
 8002128:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <reset_pid_roll+0x18>)
 800212c:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <reset_pid_roll+0x1c>)
 8002130:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 8002132:	4a04      	ldr	r2, [pc, #16]	; (8002144 <reset_pid_roll+0x20>)
 8002134:	6013      	str	r3, [r2, #0]

}
 8002136:	4770      	bx	lr
 8002138:	20004a90 	.word	0x20004a90
 800213c:	20004a9c 	.word	0x20004a9c
 8002140:	20004a7c 	.word	0x20004a7c
 8002144:	200002a0 	.word	0x200002a0

08002148 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = pitch_setpoint - IMU_pitch_value ;
 8002148:	ee70 0ac0 	vsub.f32	s1, s1, s0
 800214c:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <pid_calculate_pitch+0xac>)
 800214e:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <pid_calculate_pitch+0xb0>)
 8002154:	edd3 6a00 	vldr	s13, [r3]
 8002158:	ee60 6aa6 	vmul.f32	s13, s1, s13
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <pid_calculate_pitch+0xb4>)
 800215e:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8002162:	4b27      	ldr	r3, [pc, #156]	; (8002200 <pid_calculate_pitch+0xb8>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ee60 7aa7 	vmul.f32	s15, s1, s15
 800216c:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002204 <pid_calculate_pitch+0xbc>
 8002170:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <pid_calculate_pitch+0xc0>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800217e:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <pid_calculate_pitch+0xc4>)
 8002184:	ed93 6a00 	vldr	s12, [r3]
 8002188:	ee30 6ac6 	vsub.f32	s12, s1, s12
 800218c:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002190:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <pid_calculate_pitch+0xc8>)
 8002192:	ed92 6a00 	vldr	s12, [r2]
 8002196:	ee27 7a06 	vmul.f32	s14, s14, s12
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <pid_calculate_pitch+0xcc>)
 800219c:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 80021a0:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 80021a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <pid_calculate_pitch+0xd0>)
 80021ae:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <pid_calculate_pitch+0xd4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	425a      	negs	r2, r3
 80021b8:	ee07 2a10 	vmov	s14, r2
 80021bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80021c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c8:	d40c      	bmi.n	80021e4 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 80021ca:	ee07 3a10 	vmov	s14, r3
 80021ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80021d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	dd06      	ble.n	80021ea <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <pid_calculate_pitch+0xd0>)
 80021de:	ed83 7a00 	vstr	s14, [r3]
 80021e2:	e002      	b.n	80021ea <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <pid_calculate_pitch+0xd0>)
 80021e6:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <pid_calculate_pitch+0xd0>)
 80021ec:	ed93 0a00 	vldr	s0, [r3]
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	2000028c 	.word	0x2000028c
 80021f8:	20004b4c 	.word	0x20004b4c
 80021fc:	20004a88 	.word	0x20004a88
 8002200:	20004b0c 	.word	0x20004b0c
 8002204:	3b015038 	.word	0x3b015038
 8002208:	20004a8c 	.word	0x20004a8c
 800220c:	20000290 	.word	0x20000290
 8002210:	20004b54 	.word	0x20004b54
 8002214:	20004a80 	.word	0x20004a80
 8002218:	20000294 	.word	0x20000294
 800221c:	20000050 	.word	0x20000050

08002220 <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <reset_pid_pitch+0x14>)
 8002224:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8002226:	4a04      	ldr	r2, [pc, #16]	; (8002238 <reset_pid_pitch+0x18>)
 8002228:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <reset_pid_pitch+0x1c>)
 800222c:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 800222e:	4a04      	ldr	r2, [pc, #16]	; (8002240 <reset_pid_pitch+0x20>)
 8002230:	6013      	str	r3, [r2, #0]

}
 8002232:	4770      	bx	lr
 8002234:	20004a88 	.word	0x20004a88
 8002238:	20004a8c 	.word	0x20004a8c
 800223c:	20004a80 	.word	0x20004a80
 8002240:	20000294 	.word	0x20000294

08002244 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = yaw_setpoint - IMU_yaw_value;
 8002244:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <pid_calculate_yaw+0xac>)
 800224a:	edc3 0a00 	vstr	s1, [r3]
//	else
//		yaw_error = yaw_error;//do nothing


	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <pid_calculate_yaw+0xb0>)
 8002250:	edd3 6a00 	vldr	s13, [r3]
 8002254:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <pid_calculate_yaw+0xb4>)
 800225a:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 800225e:	4b27      	ldr	r3, [pc, #156]	; (80022fc <pid_calculate_yaw+0xb8>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002268:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002300 <pid_calculate_yaw+0xbc>
 800226c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <pid_calculate_yaw+0xc0>)
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	ee77 7a87 	vadd.f32	s15, s15, s14
 800227a:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <pid_calculate_yaw+0xc4>)
 8002280:	ed93 6a00 	vldr	s12, [r3]
 8002284:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002288:	ee86 7a25 	vdiv.f32	s14, s12, s11
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <pid_calculate_yaw+0xc8>)
 800228e:	ed92 6a00 	vldr	s12, [r2]
 8002292:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <pid_calculate_yaw+0xcc>)
 8002298:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 800229c:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 80022a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <pid_calculate_yaw+0xd0>)
 80022aa:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <pid_calculate_yaw+0xd4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	425a      	negs	r2, r3
 80022b4:	ee07 2a10 	vmov	s14, r2
 80022b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c4:	d40c      	bmi.n	80022e0 <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 80022c6:	ee07 3a10 	vmov	s14, r3
 80022ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	dd06      	ble.n	80022e6 <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <pid_calculate_yaw+0xd0>)
 80022da:	ed83 7a00 	vstr	s14, [r3]
 80022de:	e002      	b.n	80022e6 <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <pid_calculate_yaw+0xd0>)
 80022e2:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <pid_calculate_yaw+0xd0>)
 80022e8:	ed93 0a00 	vldr	s0, [r3]
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	200002a4 	.word	0x200002a4
 80022f4:	20004b10 	.word	0x20004b10
 80022f8:	20004a98 	.word	0x20004a98
 80022fc:	20004ae8 	.word	0x20004ae8
 8002300:	3b015038 	.word	0x3b015038
 8002304:	20004a94 	.word	0x20004a94
 8002308:	200002a8 	.word	0x200002a8
 800230c:	20004ac4 	.word	0x20004ac4
 8002310:	20004a84 	.word	0x20004a84
 8002314:	200002ac 	.word	0x200002ac
 8002318:	20000058 	.word	0x20000058

0800231c <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <reset_pid_yaw+0x14>)
 8002320:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 8002322:	4a04      	ldr	r2, [pc, #16]	; (8002334 <reset_pid_yaw+0x18>)
 8002324:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <reset_pid_yaw+0x1c>)
 8002328:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 800232a:	4a04      	ldr	r2, [pc, #16]	; (800233c <reset_pid_yaw+0x20>)
 800232c:	6013      	str	r3, [r2, #0]

}
 800232e:	4770      	bx	lr
 8002330:	20004a98 	.word	0x20004a98
 8002334:	20004a94 	.word	0x20004a94
 8002338:	20004a84 	.word	0x20004a84
 800233c:	200002ac 	.word	0x200002ac

08002340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_Init+0x30>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002352:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235c:	2003      	movs	r0, #3
 800235e:	f000 f82f 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002362:	2000      	movs	r0, #0
 8002364:	f005 fafe 	bl	8007964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002368:	f005 faca 	bl	8007900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800236c:	2000      	movs	r0, #0
 800236e:	bd08      	pop	{r3, pc}
 8002370:	40023c00 	.word	0x40023c00

08002374 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002374:	4a03      	ldr	r2, [pc, #12]	; (8002384 <HAL_IncTick+0x10>)
 8002376:	6811      	ldr	r1, [r2, #0]
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_IncTick+0x14>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	440b      	add	r3, r1
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20004aa0 	.word	0x20004aa0
 8002388:	2000005c 	.word	0x2000005c

0800238c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800238c:	4b01      	ldr	r3, [pc, #4]	; (8002394 <HAL_GetTick+0x8>)
 800238e:	6818      	ldr	r0, [r3, #0]
}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20004aa0 	.word	0x20004aa0

08002398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002398:	b538      	push	{r3, r4, r5, lr}
 800239a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff fff6 	bl	800238c <HAL_GetTick>
 80023a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80023a6:	d002      	beq.n	80023ae <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <HAL_Delay+0x24>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ae:	f7ff ffed 	bl	800238c <HAL_GetTick>
 80023b2:	1b40      	subs	r0, r0, r5
 80023b4:	42a0      	cmp	r0, r4
 80023b6:	d3fa      	bcc.n	80023ae <HAL_Delay+0x16>
  {
  }
}
 80023b8:	bd38      	pop	{r3, r4, r5, pc}
 80023ba:	bf00      	nop
 80023bc:	2000005c 	.word	0x2000005c

080023c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80023c2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	0200      	lsls	r0, r0, #8
 80023ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80023d4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80023d8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80023dc:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_NVIC_SetPriority+0x60>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ee:	f1c3 0407 	rsb	r4, r3, #7
 80023f2:	2c04      	cmp	r4, #4
 80023f4:	bf28      	it	cs
 80023f6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f8:	1d1d      	adds	r5, r3, #4
 80023fa:	2d06      	cmp	r5, #6
 80023fc:	d918      	bls.n	8002430 <HAL_NVIC_SetPriority+0x4c>
 80023fe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 35ff 	mov.w	r5, #4294967295
 8002404:	fa05 f404 	lsl.w	r4, r5, r4
 8002408:	ea21 0104 	bic.w	r1, r1, r4
 800240c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240e:	fa05 f303 	lsl.w	r3, r5, r3
 8002412:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002416:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002418:	2800      	cmp	r0, #0
 800241a:	db0b      	blt.n	8002434 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241c:	0109      	lsls	r1, r1, #4
 800241e:	b2c9      	uxtb	r1, r1
 8002420:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002424:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002428:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800242c:	bc30      	pop	{r4, r5}
 800242e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002430:	2300      	movs	r3, #0
 8002432:	e7e5      	b.n	8002400 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	f000 000f 	and.w	r0, r0, #15
 8002438:	0109      	lsls	r1, r1, #4
 800243a:	b2c9      	uxtb	r1, r1
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <HAL_NVIC_SetPriority+0x64>)
 800243e:	5419      	strb	r1, [r3, r0]
 8002440:	e7f4      	b.n	800242c <HAL_NVIC_SetPriority+0x48>
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00
 8002448:	e000ed14 	.word	0xe000ed14

0800244c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800244c:	2800      	cmp	r0, #0
 800244e:	db07      	blt.n	8002460 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002450:	f000 021f 	and.w	r2, r0, #31
 8002454:	0940      	lsrs	r0, r0, #5
 8002456:	2301      	movs	r3, #1
 8002458:	4093      	lsls	r3, r2
 800245a:	4a02      	ldr	r2, [pc, #8]	; (8002464 <HAL_NVIC_EnableIRQ+0x18>)
 800245c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100

08002468 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002468:	b168      	cbz	r0, 8002486 <HAL_CRC_Init+0x1e>
{
 800246a:	b510      	push	{r4, lr}
 800246c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800246e:	7943      	ldrb	r3, [r0, #5]
 8002470:	b12b      	cbz	r3, 800247e <HAL_CRC_Init+0x16>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002472:	2302      	movs	r3, #2
 8002474:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002476:	2301      	movs	r3, #1
 8002478:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800247a:	2000      	movs	r0, #0
}
 800247c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800247e:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8002480:	f004 ff50 	bl	8007324 <HAL_CRC_MspInit>
 8002484:	e7f5      	b.n	8002472 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8002486:	2001      	movs	r0, #1
}
 8002488:	4770      	bx	lr

0800248a <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d003      	beq.n	800249c <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002498:	2001      	movs	r0, #1
 800249a:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800249c:	2305      	movs	r3, #5
 800249e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a2:	6802      	ldr	r2, [r0, #0]
 80024a4:	6813      	ldr	r3, [r2, #0]
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80024ac:	2000      	movs	r0, #0
}
 80024ae:	4770      	bx	lr

080024b0 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 80024b0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80024b4:	4770      	bx	lr
	...

080024b8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80024b8:	4b27      	ldr	r3, [pc, #156]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f013 0f10 	tst.w	r3, #16
 80024c0:	d007      	beq.n	80024d2 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024c2:	4a26      	ldr	r2, [pc, #152]	; (800255c <FLASH_SetErrorCode+0xa4>)
 80024c4:	69d3      	ldr	r3, [r2, #28]
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80024cc:	4b22      	ldr	r3, [pc, #136]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 80024ce:	2210      	movs	r2, #16
 80024d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f013 0f20 	tst.w	r3, #32
 80024da:	d007      	beq.n	80024ec <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80024dc:	4a1f      	ldr	r2, [pc, #124]	; (800255c <FLASH_SetErrorCode+0xa4>)
 80024de:	69d3      	ldr	r3, [r2, #28]
 80024e0:	f043 0308 	orr.w	r3, r3, #8
 80024e4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 80024e8:	2220      	movs	r2, #32
 80024ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024f4:	d007      	beq.n	8002506 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80024f6:	4a19      	ldr	r2, [pc, #100]	; (800255c <FLASH_SetErrorCode+0xa4>)
 80024f8:	69d3      	ldr	r3, [r2, #28]
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800250e:	d007      	beq.n	8002520 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002510:	4a12      	ldr	r2, [pc, #72]	; (800255c <FLASH_SetErrorCode+0xa4>)
 8002512:	69d3      	ldr	r3, [r2, #28]
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 800251c:	2280      	movs	r2, #128	; 0x80
 800251e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002520:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002528:	d008      	beq.n	800253c <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800252a:	4a0c      	ldr	r2, [pc, #48]	; (800255c <FLASH_SetErrorCode+0xa4>)
 800252c:	69d3      	ldr	r3, [r2, #28]
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 8002536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800253a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f013 0f02 	tst.w	r3, #2
 8002544:	d007      	beq.n	8002556 <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <FLASH_SetErrorCode+0xa4>)
 8002548:	69d3      	ldr	r3, [r2, #28]
 800254a:	f043 0320 	orr.w	r3, r3, #32
 800254e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002550:	4b01      	ldr	r3, [pc, #4]	; (8002558 <FLASH_SetErrorCode+0xa0>)
 8002552:	2202      	movs	r2, #2
 8002554:	60da      	str	r2, [r3, #12]
  }
}
 8002556:	4770      	bx	lr
 8002558:	40023c00 	.word	0x40023c00
 800255c:	20004aa4 	.word	0x20004aa4

08002560 <HAL_FLASH_EndOfOperationCallback>:
}
 8002560:	4770      	bx	lr

08002562 <HAL_FLASH_OperationErrorCallback>:
}
 8002562:	4770      	bx	lr

08002564 <HAL_FLASH_IRQHandler>:
{
 8002564:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002566:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <HAL_FLASH_IRQHandler+0xec>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 800256e:	d013      	beq.n	8002598 <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002570:	4b38      	ldr	r3, [pc, #224]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d03b      	beq.n	80025f2 <HAL_FLASH_IRQHandler+0x8e>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d03c      	beq.n	80025fe <HAL_FLASH_IRQHandler+0x9a>
      addresstmp = pFlash.Address;
 8002584:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 8002586:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 8002588:	f7ff ff96 	bl	80024b8 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff ffe8 	bl	8002562 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_FLASH_IRQHandler+0xec>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f013 0f01 	tst.w	r3, #1
 80025a0:	d013      	beq.n	80025ca <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025a2:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_FLASH_IRQHandler+0xec>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d028      	beq.n	8002604 <HAL_FLASH_IRQHandler+0xa0>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d041      	beq.n	8002640 <HAL_FLASH_IRQHandler+0xdc>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 80025be:	6958      	ldr	r0, [r3, #20]
 80025c0:	f7ff ffce 	bl	8002560 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b97b      	cbnz	r3, 80025f0 <HAL_FLASH_IRQHandler+0x8c>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80025d0:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <HAL_FLASH_IRQHandler+0xec>)
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025d8:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80025e0:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80025e8:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 80025f4:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 80025f6:	f04f 32ff 	mov.w	r2, #4294967295
 80025fa:	60da      	str	r2, [r3, #12]
 80025fc:	e7c4      	b.n	8002588 <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 8002600:	691c      	ldr	r4, [r3, #16]
 8002602:	e7c1      	b.n	8002588 <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	3a01      	subs	r2, #1
 800260a:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	b15b      	cbz	r3, 8002628 <HAL_FLASH_IRQHandler+0xc4>
        addresstmp = pFlash.Sector;
 8002610:	4c10      	ldr	r4, [pc, #64]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 8002612:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002614:	f7ff ffa4 	bl	8002560 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 8002618:	68e3      	ldr	r3, [r4, #12]
 800261a:	3301      	adds	r3, #1
 800261c:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 800261e:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002620:	7a21      	ldrb	r1, [r4, #8]
 8002622:	f000 f819 	bl	8002658 <FLASH_Erase_Sector>
 8002626:	e7d0      	b.n	80025ca <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 800262a:	f04f 34ff 	mov.w	r4, #4294967295
 800262e:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 8002634:	f000 f83c 	bl	80026b0 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff ff91 	bl	8002560 <HAL_FLASH_EndOfOperationCallback>
 800263e:	e7c4      	b.n	80025ca <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 8002640:	f000 f836 	bl	80026b0 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_FLASH_IRQHandler+0xf0>)
 8002646:	6918      	ldr	r0, [r3, #16]
 8002648:	f7ff ff8a 	bl	8002560 <HAL_FLASH_EndOfOperationCallback>
 800264c:	e7ba      	b.n	80025c4 <HAL_FLASH_IRQHandler+0x60>
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00
 8002654:	20004aa4 	.word	0x20004aa4

08002658 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002658:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800265a:	b149      	cbz	r1, 8002670 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800265c:	2901      	cmp	r1, #1
 800265e:	d021      	beq.n	80026a4 <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002660:	2902      	cmp	r1, #2
 8002662:	d002      	beq.n	800266a <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002664:	f44f 7440 	mov.w	r4, #768	; 0x300
 8002668:	e003      	b.n	8002672 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 800266a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800266e:	e000      	b.n	8002672 <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8002670:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <FLASH_Erase_Sector+0x54>)
 8002674:	6919      	ldr	r1, [r3, #16]
 8002676:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800267a:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	4322      	orrs	r2, r4
 8002680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002688:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8002690:	f040 0002 	orr.w	r0, r0, #2
 8002694:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800269c:	611a      	str	r2, [r3, #16]
}
 800269e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026a2:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80026a4:	f44f 7480 	mov.w	r4, #256	; 0x100
 80026a8:	e7e3      	b.n	8002672 <FLASH_Erase_Sector+0x1a>
 80026aa:	bf00      	nop
 80026ac:	40023c00 	.word	0x40023c00

080026b0 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <FLASH_FlushCaches+0x5c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80026b8:	d010      	beq.n	80026dc <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <FLASH_FlushCaches+0x5c>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026c2:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d2:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026da:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <FLASH_FlushCaches+0x5c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80026e4:	d010      	beq.n	8002708 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <FLASH_FlushCaches+0x5c>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ee:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026fe:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002706:	601a      	str	r2, [r3, #0]
  }
}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00

08002710 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002710:	2300      	movs	r3, #0
 8002712:	2b0f      	cmp	r3, #15
 8002714:	f200 80c5 	bhi.w	80028a2 <HAL_GPIO_Init+0x192>
{
 8002718:	b4f0      	push	{r4, r5, r6, r7}
 800271a:	b082      	sub	sp, #8
 800271c:	e039      	b.n	8002792 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271e:	2204      	movs	r2, #4
 8002720:	e000      	b.n	8002724 <HAL_GPIO_Init+0x14>
 8002722:	2200      	movs	r2, #0
 8002724:	40b2      	lsls	r2, r6
 8002726:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002728:	3402      	adds	r4, #2
 800272a:	4e5e      	ldr	r6, [pc, #376]	; (80028a4 <HAL_GPIO_Init+0x194>)
 800272c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002730:	4a5d      	ldr	r2, [pc, #372]	; (80028a8 <HAL_GPIO_Init+0x198>)
 8002732:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002734:	43ea      	mvns	r2, r5
 8002736:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800273a:	684f      	ldr	r7, [r1, #4]
 800273c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002740:	d001      	beq.n	8002746 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002742:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002746:	4c58      	ldr	r4, [pc, #352]	; (80028a8 <HAL_GPIO_Init+0x198>)
 8002748:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800274a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800274c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002750:	684f      	ldr	r7, [r1, #4]
 8002752:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002756:	d001      	beq.n	800275c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002758:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800275c:	4c52      	ldr	r4, [pc, #328]	; (80028a8 <HAL_GPIO_Init+0x198>)
 800275e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002760:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002762:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002766:	684f      	ldr	r7, [r1, #4]
 8002768:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800276c:	d001      	beq.n	8002772 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800276e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002772:	4c4d      	ldr	r4, [pc, #308]	; (80028a8 <HAL_GPIO_Init+0x198>)
 8002774:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002776:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002778:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800277a:	684e      	ldr	r6, [r1, #4]
 800277c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002780:	d001      	beq.n	8002786 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002782:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002786:	4c48      	ldr	r4, [pc, #288]	; (80028a8 <HAL_GPIO_Init+0x198>)
 8002788:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	3301      	adds	r3, #1
 800278c:	2b0f      	cmp	r3, #15
 800278e:	f200 8085 	bhi.w	800289c <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 8002792:	2201      	movs	r2, #1
 8002794:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002796:	680c      	ldr	r4, [r1, #0]
 8002798:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 800279c:	42aa      	cmp	r2, r5
 800279e:	d1f4      	bne.n	800278a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a0:	684c      	ldr	r4, [r1, #4]
 80027a2:	2c02      	cmp	r4, #2
 80027a4:	d001      	beq.n	80027aa <HAL_GPIO_Init+0x9a>
 80027a6:	2c12      	cmp	r4, #18
 80027a8:	d110      	bne.n	80027cc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 80027aa:	08de      	lsrs	r6, r3, #3
 80027ac:	3608      	adds	r6, #8
 80027ae:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b2:	f003 0407 	and.w	r4, r3, #7
 80027b6:	00a7      	lsls	r7, r4, #2
 80027b8:	240f      	movs	r4, #15
 80027ba:	40bc      	lsls	r4, r7
 80027bc:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c0:	690c      	ldr	r4, [r1, #16]
 80027c2:	40bc      	lsls	r4, r7
 80027c4:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 80027c8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80027cc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ce:	005f      	lsls	r7, r3, #1
 80027d0:	2603      	movs	r6, #3
 80027d2:	40be      	lsls	r6, r7
 80027d4:	43f6      	mvns	r6, r6
 80027d6:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027da:	684c      	ldr	r4, [r1, #4]
 80027dc:	f004 0403 	and.w	r4, r4, #3
 80027e0:	40bc      	lsls	r4, r7
 80027e2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80027e6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027e8:	684c      	ldr	r4, [r1, #4]
 80027ea:	f104 3cff 	add.w	ip, r4, #4294967295
 80027ee:	f1bc 0f01 	cmp.w	ip, #1
 80027f2:	d903      	bls.n	80027fc <HAL_GPIO_Init+0xec>
 80027f4:	2c11      	cmp	r4, #17
 80027f6:	d001      	beq.n	80027fc <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f8:	2c12      	cmp	r4, #18
 80027fa:	d110      	bne.n	800281e <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 80027fc:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027fe:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002802:	68cc      	ldr	r4, [r1, #12]
 8002804:	40bc      	lsls	r4, r7
 8002806:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800280a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800280c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800280e:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002812:	684c      	ldr	r4, [r1, #4]
 8002814:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002818:	409c      	lsls	r4, r3
 800281a:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 800281c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800281e:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002820:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002822:	688a      	ldr	r2, [r1, #8]
 8002824:	40ba      	lsls	r2, r7
 8002826:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8002828:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800282a:	684a      	ldr	r2, [r1, #4]
 800282c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002830:	d0ab      	beq.n	800278a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2200      	movs	r2, #0
 8002834:	9201      	str	r2, [sp, #4]
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <HAL_GPIO_Init+0x19c>)
 8002838:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800283a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800283e:	6454      	str	r4, [r2, #68]	; 0x44
 8002840:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002842:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002846:	9201      	str	r2, [sp, #4]
 8002848:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800284a:	089c      	lsrs	r4, r3, #2
 800284c:	1ca6      	adds	r6, r4, #2
 800284e:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <HAL_GPIO_Init+0x194>)
 8002850:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002854:	f003 0203 	and.w	r2, r3, #3
 8002858:	0096      	lsls	r6, r2, #2
 800285a:	220f      	movs	r2, #15
 800285c:	40b2      	lsls	r2, r6
 800285e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002862:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <HAL_GPIO_Init+0x1a0>)
 8002864:	4290      	cmp	r0, r2
 8002866:	f43f af5c 	beq.w	8002722 <HAL_GPIO_Init+0x12>
 800286a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800286e:	4290      	cmp	r0, r2
 8002870:	d00e      	beq.n	8002890 <HAL_GPIO_Init+0x180>
 8002872:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002876:	4290      	cmp	r0, r2
 8002878:	d00c      	beq.n	8002894 <HAL_GPIO_Init+0x184>
 800287a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800287e:	4290      	cmp	r0, r2
 8002880:	d00a      	beq.n	8002898 <HAL_GPIO_Init+0x188>
 8002882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002886:	4290      	cmp	r0, r2
 8002888:	f43f af49 	beq.w	800271e <HAL_GPIO_Init+0xe>
 800288c:	2207      	movs	r2, #7
 800288e:	e749      	b.n	8002724 <HAL_GPIO_Init+0x14>
 8002890:	2201      	movs	r2, #1
 8002892:	e747      	b.n	8002724 <HAL_GPIO_Init+0x14>
 8002894:	2202      	movs	r2, #2
 8002896:	e745      	b.n	8002724 <HAL_GPIO_Init+0x14>
 8002898:	2203      	movs	r2, #3
 800289a:	e743      	b.n	8002724 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800289c:	b002      	add	sp, #8
 800289e:	bcf0      	pop	{r4, r5, r6, r7}
 80028a0:	4770      	bx	lr
 80028a2:	4770      	bx	lr
 80028a4:	40013800 	.word	0x40013800
 80028a8:	40013c00 	.word	0x40013c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020000 	.word	0x40020000

080028b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b4:	b912      	cbnz	r2, 80028bc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028b6:	0409      	lsls	r1, r1, #16
 80028b8:	6181      	str	r1, [r0, #24]
  }
}
 80028ba:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80028bc:	6181      	str	r1, [r0, #24]
 80028be:	4770      	bx	lr

080028c0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80028c0:	6943      	ldr	r3, [r0, #20]
 80028c2:	ea31 0303 	bics.w	r3, r1, r3
 80028c6:	d001      	beq.n	80028cc <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c8:	6181      	str	r1, [r0, #24]
  }
}
 80028ca:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028cc:	0409      	lsls	r1, r1, #16
 80028ce:	6181      	str	r1, [r0, #24]
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	4203      	tst	r3, r0
 80028dc:	d100      	bne.n	80028e0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80028de:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028e0:	4b02      	ldr	r3, [pc, #8]	; (80028ec <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80028e2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028e4:	f004 fdd8 	bl	8007498 <HAL_GPIO_EXTI_Callback>
}
 80028e8:	e7f9      	b.n	80028de <HAL_GPIO_EXTI_IRQHandler+0xa>
 80028ea:	bf00      	nop
 80028ec:	40013c00 	.word	0x40013c00

080028f0 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028f0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d00a      	beq.n	8002910 <I2C_Master_SB+0x20>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fa:	6903      	ldr	r3, [r0, #16]
 80028fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002900:	d015      	beq.n	800292e <I2C_Master_SB+0x3e>
        }
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8002902:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002904:	2b00      	cmp	r3, #0
 8002906:	d036      	beq.n	8002976 <I2C_Master_SB+0x86>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if (hi2c->EventCount == 1U)
 8002908:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800290a:	2b01      	cmp	r3, #1
 800290c:	d03d      	beq.n	800298a <I2C_Master_SB+0x9a>
      {
        /* Do nothing */
      }
    }
  }
}
 800290e:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8002910:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002912:	b92b      	cbnz	r3, 8002920 <I2C_Master_SB+0x30>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002914:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002916:	6802      	ldr	r2, [r0, #0]
 8002918:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800291c:	6113      	str	r3, [r2, #16]
 800291e:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002920:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002922:	6802      	ldr	r2, [r0, #0]
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	6113      	str	r3, [r2, #16]
 800292c:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800292e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b21      	cmp	r3, #33	; 0x21
 8002936:	d00f      	beq.n	8002958 <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002938:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800293a:	6802      	ldr	r2, [r0, #0]
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	6113      	str	r3, [r2, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002944:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002946:	b16b      	cbz	r3, 8002964 <I2C_Master_SB+0x74>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	b17b      	cbz	r3, 800296c <I2C_Master_SB+0x7c>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800294c:	6802      	ldr	r2, [r0, #0]
 800294e:	6853      	ldr	r3, [r2, #4]
 8002950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002954:	6053      	str	r3, [r2, #4]
 8002956:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002958:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800295a:	6802      	ldr	r2, [r0, #0]
 800295c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002960:	6113      	str	r3, [r2, #16]
 8002962:	e7ef      	b.n	8002944 <I2C_Master_SB+0x54>
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002964:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002966:	2a00      	cmp	r2, #0
 8002968:	d1ee      	bne.n	8002948 <I2C_Master_SB+0x58>
 800296a:	e7d0      	b.n	800290e <I2C_Master_SB+0x1e>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800296c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1eb      	bne.n	800294c <I2C_Master_SB+0x5c>
 8002974:	e7cb      	b.n	800290e <I2C_Master_SB+0x1e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002976:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002978:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800297c:	6802      	ldr	r2, [r0, #0]
 800297e:	f003 0306 	and.w	r3, r3, #6
 8002982:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002986:	6113      	str	r3, [r2, #16]
 8002988:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800298a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800298c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8002990:	6802      	ldr	r2, [r0, #0]
 8002992:	f003 0306 	and.w	r3, r3, #6
 8002996:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 800299a:	6113      	str	r3, [r2, #16]
}
 800299c:	e7b7      	b.n	800290e <I2C_Master_SB+0x1e>

0800299e <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800299e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80029a0:	6802      	ldr	r2, [r0, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	6113      	str	r3, [r2, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80029a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029a8:	b13b      	cbz	r3, 80029ba <I2C_Master_ADD10+0x1c>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	b14b      	cbz	r3, 80029c2 <I2C_Master_ADD10+0x24>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029ae:	6802      	ldr	r2, [r0, #0]
 80029b0:	6853      	ldr	r3, [r2, #4]
 80029b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029b6:	6053      	str	r3, [r2, #4]
    }
  }
}
 80029b8:	4770      	bx	lr
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80029ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80029bc:	2a00      	cmp	r2, #0
 80029be:	d1f4      	bne.n	80029aa <I2C_Master_ADD10+0xc>
 80029c0:	e7fa      	b.n	80029b8 <I2C_Master_ADD10+0x1a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80029c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f1      	bne.n	80029ae <I2C_Master_ADD10+0x10>
 80029ca:	e7f5      	b.n	80029b8 <I2C_Master_ADD10+0x1a>

080029cc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80029cc:	b410      	push	{r4}
 80029ce:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80029d0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80029d4:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80029d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80029d8:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b22      	cmp	r3, #34	; 0x22
 80029e2:	d00b      	beq.n	80029fc <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e4:	2300      	movs	r3, #0
 80029e6:	9309      	str	r3, [sp, #36]	; 0x24
 80029e8:	6803      	ldr	r3, [r0, #0]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	9209      	str	r2, [sp, #36]	; 0x24
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	9309      	str	r3, [sp, #36]	; 0x24
 80029f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 80029f4:	b00b      	add	sp, #44	; 0x2c
 80029f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029fa:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80029fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80029fe:	b90b      	cbnz	r3, 8002a04 <I2C_Master_ADDR+0x38>
 8002a00:	2a40      	cmp	r2, #64	; 0x40
 8002a02:	d017      	beq.n	8002a34 <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a04:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002a06:	b91b      	cbnz	r3, 8002a10 <I2C_Master_ADDR+0x44>
 8002a08:	6903      	ldr	r3, [r0, #16]
 8002a0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a0e:	d019      	beq.n	8002a44 <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 8002a10:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d125      	bne.n	8002a64 <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a18:	9302      	str	r3, [sp, #8]
 8002a1a:	6803      	ldr	r3, [r0, #0]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	9202      	str	r2, [sp, #8]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	9202      	str	r2, [sp, #8]
 8002a24:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	6503      	str	r3, [r0, #80]	; 0x50
 8002a32:	e7df      	b.n	80029f4 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	6803      	ldr	r3, [r0, #0]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	9200      	str	r2, [sp, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	9b00      	ldr	r3, [sp, #0]
 8002a42:	e7d7      	b.n	80029f4 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a44:	2300      	movs	r3, #0
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	6803      	ldr	r3, [r0, #0]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	9201      	str	r2, [sp, #4]
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	9201      	str	r2, [sp, #4]
 8002a52:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002a5c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002a5e:	3301      	adds	r3, #1
 8002a60:	6503      	str	r3, [r0, #80]	; 0x50
 8002a62:	e7c7      	b.n	80029f4 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8002a64:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d025      	beq.n	8002ab8 <I2C_Master_ADDR+0xec>
      else if (hi2c->XferCount == 2U)
 8002a6c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d07b      	beq.n	8002b6c <I2C_Master_ADDR+0x1a0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a74:	6802      	ldr	r2, [r0, #0]
 8002a76:	6813      	ldr	r3, [r2, #0]
 8002a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7c:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a7e:	6803      	ldr	r3, [r0, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002a86:	d00e      	beq.n	8002aa6 <I2C_Master_ADDR+0xda>
 8002a88:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002a8c:	d007      	beq.n	8002a9e <I2C_Master_ADDR+0xd2>
 8002a8e:	2901      	cmp	r1, #1
 8002a90:	d005      	beq.n	8002a9e <I2C_Master_ADDR+0xd2>
 8002a92:	2908      	cmp	r1, #8
 8002a94:	d003      	beq.n	8002a9e <I2C_Master_ADDR+0xd2>
 8002a96:	2910      	cmp	r1, #16
 8002a98:	d001      	beq.n	8002a9e <I2C_Master_ADDR+0xd2>
 8002a9a:	2920      	cmp	r1, #32
 8002a9c:	d103      	bne.n	8002aa6 <I2C_Master_ADDR+0xda>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aa4:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9308      	str	r3, [sp, #32]
 8002aaa:	6803      	ldr	r3, [r0, #0]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	9208      	str	r2, [sp, #32]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	9308      	str	r3, [sp, #32]
 8002ab4:	9b08      	ldr	r3, [sp, #32]
 8002ab6:	e7ba      	b.n	8002a2e <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ab8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002abc:	d011      	beq.n	8002ae2 <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002abe:	2908      	cmp	r1, #8
 8002ac0:	d034      	beq.n	8002b2c <I2C_Master_ADDR+0x160>
 8002ac2:	2920      	cmp	r1, #32
 8002ac4:	d032      	beq.n	8002b2c <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ac6:	2c12      	cmp	r4, #18
 8002ac8:	d02e      	beq.n	8002b28 <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002aca:	2904      	cmp	r1, #4
 8002acc:	d040      	beq.n	8002b50 <I2C_Master_ADDR+0x184>
 8002ace:	2902      	cmp	r1, #2
 8002ad0:	d03e      	beq.n	8002b50 <I2C_Master_ADDR+0x184>
 8002ad2:	2910      	cmp	r1, #16
 8002ad4:	d03c      	beq.n	8002b50 <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	6802      	ldr	r2, [r0, #0]
 8002ad8:	6813      	ldr	r3, [r2, #0]
 8002ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	e03b      	b.n	8002b5a <I2C_Master_ADDR+0x18e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae2:	6802      	ldr	r2, [r0, #0]
 8002ae4:	6813      	ldr	r3, [r2, #0]
 8002ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aea:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002aec:	6803      	ldr	r3, [r0, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002af4:	d00c      	beq.n	8002b10 <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afc:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	9303      	str	r3, [sp, #12]
 8002b02:	6803      	ldr	r3, [r0, #0]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	9203      	str	r2, [sp, #12]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	9303      	str	r3, [sp, #12]
 8002b0c:	9b03      	ldr	r3, [sp, #12]
 8002b0e:	e78e      	b.n	8002a2e <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b10:	2200      	movs	r2, #0
 8002b12:	9204      	str	r2, [sp, #16]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	9204      	str	r2, [sp, #16]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	9204      	str	r2, [sp, #16]
 8002b1c:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e782      	b.n	8002a2e <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b28:	2901      	cmp	r1, #1
 8002b2a:	d0ce      	beq.n	8002aca <I2C_Master_ADDR+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2c:	6802      	ldr	r2, [r0, #0]
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b34:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b36:	2300      	movs	r3, #0
 8002b38:	9306      	str	r3, [sp, #24]
 8002b3a:	6803      	ldr	r3, [r0, #0]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	9206      	str	r2, [sp, #24]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	9206      	str	r2, [sp, #24]
 8002b44:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e76e      	b.n	8002a2e <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b50:	6802      	ldr	r2, [r0, #0]
 8002b52:	6813      	ldr	r3, [r2, #0]
 8002b54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b58:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9305      	str	r3, [sp, #20]
 8002b5e:	6803      	ldr	r3, [r0, #0]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	9205      	str	r2, [sp, #20]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	9305      	str	r3, [sp, #20]
 8002b68:	9b05      	ldr	r3, [sp, #20]
 8002b6a:	e760      	b.n	8002a2e <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b6c:	2904      	cmp	r1, #4
 8002b6e:	d00e      	beq.n	8002b8e <I2C_Master_ADDR+0x1c2>
 8002b70:	2902      	cmp	r1, #2
 8002b72:	d00c      	beq.n	8002b8e <I2C_Master_ADDR+0x1c2>
 8002b74:	2910      	cmp	r1, #16
 8002b76:	d00a      	beq.n	8002b8e <I2C_Master_ADDR+0x1c2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b78:	6802      	ldr	r2, [r0, #0]
 8002b7a:	6813      	ldr	r3, [r2, #0]
 8002b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b80:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b82:	6802      	ldr	r2, [r0, #0]
 8002b84:	6813      	ldr	r3, [r2, #0]
 8002b86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	e004      	b.n	8002b98 <I2C_Master_ADDR+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	6802      	ldr	r2, [r0, #0]
 8002b90:	6813      	ldr	r3, [r2, #0]
 8002b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b96:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b98:	6803      	ldr	r3, [r0, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002ba0:	d00e      	beq.n	8002bc0 <I2C_Master_ADDR+0x1f4>
 8002ba2:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002ba6:	d007      	beq.n	8002bb8 <I2C_Master_ADDR+0x1ec>
 8002ba8:	2901      	cmp	r1, #1
 8002baa:	d005      	beq.n	8002bb8 <I2C_Master_ADDR+0x1ec>
 8002bac:	2908      	cmp	r1, #8
 8002bae:	d003      	beq.n	8002bb8 <I2C_Master_ADDR+0x1ec>
 8002bb0:	2910      	cmp	r1, #16
 8002bb2:	d001      	beq.n	8002bb8 <I2C_Master_ADDR+0x1ec>
 8002bb4:	2920      	cmp	r1, #32
 8002bb6:	d103      	bne.n	8002bc0 <I2C_Master_ADDR+0x1f4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bbe:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9307      	str	r3, [sp, #28]
 8002bc4:	6803      	ldr	r3, [r0, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	9207      	str	r2, [sp, #28]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	9307      	str	r3, [sp, #28]
 8002bce:	9b07      	ldr	r3, [sp, #28]
 8002bd0:	e72d      	b.n	8002a2e <I2C_Master_ADDR+0x62>

08002bd2 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8002bd2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	b153      	cbz	r3, 8002bee <I2C_SlaveTransmit_BTF+0x1c>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bd8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002bda:	6803      	ldr	r3, [r0, #0]
 8002bdc:	7812      	ldrb	r2, [r2, #0]
 8002bde:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002be0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002be2:	3301      	adds	r3, #1
 8002be4:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002be6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8002bee:	4770      	bx	lr

08002bf0 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8002bf0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b153      	cbz	r3, 8002c0c <I2C_SlaveReceive_BTF+0x1c>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf6:	6803      	ldr	r3, [r0, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bfe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c00:	3301      	adds	r3, #1
 8002c02:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c04:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8002c0c:	4770      	bx	lr

08002c0e <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002c0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c14:	d004      	beq.n	8002c20 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002c16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c1c:	d003      	beq.n	8002c26 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c1e:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002c20:	2301      	movs	r3, #1
 8002c22:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002c24:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002c26:	2308      	movs	r3, #8
 8002c28:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002c2a:	e7f8      	b.n	8002c1e <I2C_ConvertOtherXferOptions+0x10>

08002c2c <I2C_WaitOnFlagUntilTimeout>:
{
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	4606      	mov	r6, r0
 8002c30:	460c      	mov	r4, r1
 8002c32:	4617      	mov	r7, r2
 8002c34:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c36:	e022      	b.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c38:	f7ff fba8 	bl	800238c <HAL_GetTick>
 8002c3c:	9b06      	ldr	r3, [sp, #24]
 8002c3e:	1ac0      	subs	r0, r0, r3
 8002c40:	42a8      	cmp	r0, r5
 8002c42:	d800      	bhi.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8002c44:	b9dd      	cbnz	r5, 8002c7e <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c50:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c54:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002c56:	f042 0220 	orr.w	r2, r2, #32
 8002c5a:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c5c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002c60:	2001      	movs	r0, #1
 8002c62:	e01a      	b.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c64:	6833      	ldr	r3, [r6, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	ea24 0303 	bic.w	r3, r4, r3
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	429f      	cmp	r7, r3
 8002c76:	d10f      	bne.n	8002c98 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002c78:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002c7c:	d1dc      	bne.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d0ee      	beq.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0x38>
 8002c86:	6833      	ldr	r3, [r6, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	ea24 0303 	bic.w	r3, r4, r3
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	e7ed      	b.n	8002c74 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8002c98:	2000      	movs	r0, #0
}
 8002c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c9c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	f000 80be 	beq.w	8002e1e <HAL_I2C_Init+0x182>
{
 8002ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ca6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d06b      	beq.n	8002d86 <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cae:	2324      	movs	r3, #36	; 0x24
 8002cb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	6813      	ldr	r3, [r2, #0]
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cbe:	f001 fac5 	bl	800424c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cc2:	6862      	ldr	r2, [r4, #4]
 8002cc4:	4b58      	ldr	r3, [pc, #352]	; (8002e28 <HAL_I2C_Init+0x18c>)
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d862      	bhi.n	8002d90 <HAL_I2C_Init+0xf4>
 8002cca:	4b58      	ldr	r3, [pc, #352]	; (8002e2c <HAL_I2C_Init+0x190>)
 8002ccc:	4298      	cmp	r0, r3
 8002cce:	bf8c      	ite	hi
 8002cd0:	2300      	movhi	r3, #0
 8002cd2:	2301      	movls	r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 80a4 	bne.w	8002e22 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8002cda:	4b55      	ldr	r3, [pc, #340]	; (8002e30 <HAL_I2C_Init+0x194>)
 8002cdc:	fba3 2300 	umull	r2, r3, r3, r0
 8002ce0:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ce2:	6821      	ldr	r1, [r4, #0]
 8002ce4:	684a      	ldr	r2, [r1, #4]
 8002ce6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002cea:	431a      	orrs	r2, r3
 8002cec:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cee:	6825      	ldr	r5, [r4, #0]
 8002cf0:	6a2a      	ldr	r2, [r5, #32]
 8002cf2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002cf6:	6866      	ldr	r6, [r4, #4]
 8002cf8:	494b      	ldr	r1, [pc, #300]	; (8002e28 <HAL_I2C_Init+0x18c>)
 8002cfa:	428e      	cmp	r6, r1
 8002cfc:	d84e      	bhi.n	8002d9c <HAL_I2C_Init+0x100>
 8002cfe:	3301      	adds	r3, #1
 8002d00:	4313      	orrs	r3, r2
 8002d02:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d04:	6825      	ldr	r5, [r4, #0]
 8002d06:	69e9      	ldr	r1, [r5, #28]
 8002d08:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002d0c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002d10:	6863      	ldr	r3, [r4, #4]
 8002d12:	4a45      	ldr	r2, [pc, #276]	; (8002e28 <HAL_I2C_Init+0x18c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d84b      	bhi.n	8002db0 <HAL_I2C_Init+0x114>
 8002d18:	3801      	subs	r0, #1
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf38      	it	cc
 8002d2a:	2304      	movcc	r3, #4
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d30:	6821      	ldr	r1, [r4, #0]
 8002d32:	680b      	ldr	r3, [r1, #0]
 8002d34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d38:	69e2      	ldr	r2, [r4, #28]
 8002d3a:	6a20      	ldr	r0, [r4, #32]
 8002d3c:	4302      	orrs	r2, r0
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d42:	6821      	ldr	r1, [r4, #0]
 8002d44:	688b      	ldr	r3, [r1, #8]
 8002d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d4e:	6922      	ldr	r2, [r4, #16]
 8002d50:	68e0      	ldr	r0, [r4, #12]
 8002d52:	4302      	orrs	r2, r0
 8002d54:	4313      	orrs	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d58:	6821      	ldr	r1, [r4, #0]
 8002d5a:	68cb      	ldr	r3, [r1, #12]
 8002d5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d60:	6962      	ldr	r2, [r4, #20]
 8002d62:	69a0      	ldr	r0, [r4, #24]
 8002d64:	4302      	orrs	r2, r0
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002d6a:	6822      	ldr	r2, [r4, #0]
 8002d6c:	6813      	ldr	r3, [r2, #0]
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	2000      	movs	r0, #0
 8002d76:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	2320      	movs	r3, #32
 8002d7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002d86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002d8a:	f004 fc7b 	bl	8007684 <HAL_I2C_MspInit>
 8002d8e:	e78e      	b.n	8002cae <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d90:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <HAL_I2C_Init+0x198>)
 8002d92:	4298      	cmp	r0, r3
 8002d94:	bf8c      	ite	hi
 8002d96:	2300      	movhi	r3, #0
 8002d98:	2301      	movls	r3, #1
 8002d9a:	e79b      	b.n	8002cd4 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d9c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4924      	ldr	r1, [pc, #144]	; (8002e38 <HAL_I2C_Init+0x19c>)
 8002da6:	fba1 1303 	umull	r1, r3, r1, r3
 8002daa:	099b      	lsrs	r3, r3, #6
 8002dac:	3301      	adds	r3, #1
 8002dae:	e7a7      	b.n	8002d00 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db0:	68a2      	ldr	r2, [r4, #8]
 8002db2:	b9ba      	cbnz	r2, 8002de4 <HAL_I2C_Init+0x148>
 8002db4:	1e46      	subs	r6, r0, #1
 8002db6:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8002dba:	fbb6 f6f7 	udiv	r6, r6, r7
 8002dbe:	3601      	adds	r6, #1
 8002dc0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002dc4:	fab6 f686 	clz	r6, r6
 8002dc8:	0976      	lsrs	r6, r6, #5
 8002dca:	bb36      	cbnz	r6, 8002e1a <HAL_I2C_Init+0x17e>
 8002dcc:	b9c2      	cbnz	r2, 8002e00 <HAL_I2C_Init+0x164>
 8002dce:	3801      	subs	r0, #1
 8002dd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002dde:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8002de2:	e7a3      	b.n	8002d2c <HAL_I2C_Init+0x90>
 8002de4:	1e46      	subs	r6, r0, #1
 8002de6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8002dea:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002dee:	fbb6 f6f7 	udiv	r6, r6, r7
 8002df2:	3601      	adds	r6, #1
 8002df4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002df8:	fab6 f686 	clz	r6, r6
 8002dfc:	0976      	lsrs	r6, r6, #5
 8002dfe:	e7e4      	b.n	8002dca <HAL_I2C_Init+0x12e>
 8002e00:	3801      	subs	r0, #1
 8002e02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e0a:	fbb0 f2f3 	udiv	r2, r0, r3
 8002e0e:	3201      	adds	r2, #1
 8002e10:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002e14:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8002e18:	e788      	b.n	8002d2c <HAL_I2C_Init+0x90>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e786      	b.n	8002d2c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002e1e:	2001      	movs	r0, #1
}
 8002e20:	4770      	bx	lr
    return HAL_ERROR;
 8002e22:	2001      	movs	r0, #1
 8002e24:	e7ae      	b.n	8002d84 <HAL_I2C_Init+0xe8>
 8002e26:	bf00      	nop
 8002e28:	000186a0 	.word	0x000186a0
 8002e2c:	001e847f 	.word	0x001e847f
 8002e30:	431bde83 	.word	0x431bde83
 8002e34:	003d08ff 	.word	0x003d08ff
 8002e38:	10624dd3 	.word	0x10624dd3

08002e3c <HAL_I2C_Master_Transmit_IT>:
{
 8002e3c:	b430      	push	{r4, r5}
 8002e3e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002e40:	2400      	movs	r4, #0
 8002e42:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e44:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8002e48:	b2e4      	uxtb	r4, r4
 8002e4a:	2c20      	cmp	r4, #32
 8002e4c:	d156      	bne.n	8002efc <HAL_I2C_Master_Transmit_IT+0xc0>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e4e:	4c2e      	ldr	r4, [pc, #184]	; (8002f08 <HAL_I2C_Master_Transmit_IT+0xcc>)
 8002e50:	6824      	ldr	r4, [r4, #0]
 8002e52:	08e4      	lsrs	r4, r4, #3
 8002e54:	4d2d      	ldr	r5, [pc, #180]	; (8002f0c <HAL_I2C_Master_Transmit_IT+0xd0>)
 8002e56:	fba5 5404 	umull	r5, r4, r5, r4
 8002e5a:	0a24      	lsrs	r4, r4, #8
 8002e5c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002e60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002e64:	9401      	str	r4, [sp, #4]
      count--;
 8002e66:	9c01      	ldr	r4, [sp, #4]
 8002e68:	3c01      	subs	r4, #1
 8002e6a:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8002e6c:	9c01      	ldr	r4, [sp, #4]
 8002e6e:	2c00      	cmp	r4, #0
 8002e70:	d035      	beq.n	8002ede <HAL_I2C_Master_Transmit_IT+0xa2>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e72:	6804      	ldr	r4, [r0, #0]
 8002e74:	69a5      	ldr	r5, [r4, #24]
 8002e76:	f015 0f02 	tst.w	r5, #2
 8002e7a:	d1f4      	bne.n	8002e66 <HAL_I2C_Master_Transmit_IT+0x2a>
    __HAL_LOCK(hi2c);
 8002e7c:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8002e80:	2d01      	cmp	r5, #1
 8002e82:	d03f      	beq.n	8002f04 <HAL_I2C_Master_Transmit_IT+0xc8>
 8002e84:	2501      	movs	r5, #1
 8002e86:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8a:	6825      	ldr	r5, [r4, #0]
 8002e8c:	f015 0f01 	tst.w	r5, #1
 8002e90:	d103      	bne.n	8002e9a <HAL_I2C_Master_Transmit_IT+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002e92:	6825      	ldr	r5, [r4, #0]
 8002e94:	f045 0501 	orr.w	r5, r5, #1
 8002e98:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e9a:	6805      	ldr	r5, [r0, #0]
 8002e9c:	682c      	ldr	r4, [r5, #0]
 8002e9e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8002ea2:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ea4:	2421      	movs	r4, #33	; 0x21
 8002ea6:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002eaa:	2410      	movs	r4, #16
 8002eac:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb0:	2400      	movs	r4, #0
 8002eb2:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002eb4:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eb6:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002eba:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8002ebe:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002ec0:	6441      	str	r1, [r0, #68]	; 0x44
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec2:	6802      	ldr	r2, [r0, #0]
 8002ec4:	6813      	ldr	r3, [r2, #0]
 8002ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eca:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002ecc:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ed0:	6802      	ldr	r2, [r0, #0]
 8002ed2:	6853      	ldr	r3, [r2, #4]
 8002ed4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ed8:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8002eda:	4620      	mov	r0, r4
 8002edc:	e00f      	b.n	8002efe <HAL_I2C_Master_Transmit_IT+0xc2>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002eee:	f042 0220 	orr.w	r2, r2, #32
 8002ef2:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ef4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8002ef8:	2001      	movs	r0, #1
 8002efa:	e000      	b.n	8002efe <HAL_I2C_Master_Transmit_IT+0xc2>
    return HAL_BUSY;
 8002efc:	2002      	movs	r0, #2
}
 8002efe:	b002      	add	sp, #8
 8002f00:	bc30      	pop	{r4, r5}
 8002f02:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002f04:	2002      	movs	r0, #2
 8002f06:	e7fa      	b.n	8002efe <HAL_I2C_Master_Transmit_IT+0xc2>
 8002f08:	20000064 	.word	0x20000064
 8002f0c:	14f8b589 	.word	0x14f8b589
 8002f10:	ffff0000 	.word	0xffff0000

08002f14 <HAL_I2C_Master_Receive_IT>:
{
 8002f14:	b430      	push	{r4, r5}
 8002f16:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002f18:	2400      	movs	r4, #0
 8002f1a:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8002f20:	b2e4      	uxtb	r4, r4
 8002f22:	2c20      	cmp	r4, #32
 8002f24:	d15b      	bne.n	8002fde <HAL_I2C_Master_Receive_IT+0xca>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f26:	4c31      	ldr	r4, [pc, #196]	; (8002fec <HAL_I2C_Master_Receive_IT+0xd8>)
 8002f28:	6824      	ldr	r4, [r4, #0]
 8002f2a:	08e4      	lsrs	r4, r4, #3
 8002f2c:	4d30      	ldr	r5, [pc, #192]	; (8002ff0 <HAL_I2C_Master_Receive_IT+0xdc>)
 8002f2e:	fba5 5404 	umull	r5, r4, r5, r4
 8002f32:	0a24      	lsrs	r4, r4, #8
 8002f34:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002f38:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002f3c:	9401      	str	r4, [sp, #4]
      count--;
 8002f3e:	9c01      	ldr	r4, [sp, #4]
 8002f40:	3c01      	subs	r4, #1
 8002f42:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8002f44:	9c01      	ldr	r4, [sp, #4]
 8002f46:	2c00      	cmp	r4, #0
 8002f48:	d03a      	beq.n	8002fc0 <HAL_I2C_Master_Receive_IT+0xac>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002f4a:	6804      	ldr	r4, [r0, #0]
 8002f4c:	69a5      	ldr	r5, [r4, #24]
 8002f4e:	f015 0f02 	tst.w	r5, #2
 8002f52:	d1f4      	bne.n	8002f3e <HAL_I2C_Master_Receive_IT+0x2a>
    __HAL_LOCK(hi2c);
 8002f54:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8002f58:	2d01      	cmp	r5, #1
 8002f5a:	d044      	beq.n	8002fe6 <HAL_I2C_Master_Receive_IT+0xd2>
 8002f5c:	2501      	movs	r5, #1
 8002f5e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f62:	6825      	ldr	r5, [r4, #0]
 8002f64:	f015 0f01 	tst.w	r5, #1
 8002f68:	d103      	bne.n	8002f72 <HAL_I2C_Master_Receive_IT+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002f6a:	6825      	ldr	r5, [r4, #0]
 8002f6c:	f045 0501 	orr.w	r5, r5, #1
 8002f70:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f72:	6805      	ldr	r5, [r0, #0]
 8002f74:	682c      	ldr	r4, [r5, #0]
 8002f76:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8002f7a:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f7c:	2422      	movs	r4, #34	; 0x22
 8002f7e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f82:	2410      	movs	r4, #16
 8002f84:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f88:	2400      	movs	r4, #0
 8002f8a:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002f8c:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f8e:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f90:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f92:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f94:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <HAL_I2C_Master_Receive_IT+0xe0>)
 8002f96:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002f98:	6441      	str	r1, [r0, #68]	; 0x44
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9a:	6802      	ldr	r2, [r0, #0]
 8002f9c:	6813      	ldr	r3, [r2, #0]
 8002f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa2:	6013      	str	r3, [r2, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa4:	6802      	ldr	r2, [r0, #0]
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002fae:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fb2:	6802      	ldr	r2, [r0, #0]
 8002fb4:	6853      	ldr	r3, [r2, #4]
 8002fb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fba:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	e00f      	b.n	8002fe0 <HAL_I2C_Master_Receive_IT+0xcc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fca:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002fd0:	f042 0220 	orr.w	r2, r2, #32
 8002fd4:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002fd6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_I2C_Master_Receive_IT+0xcc>
    return HAL_BUSY;
 8002fde:	2002      	movs	r0, #2
}
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bc30      	pop	{r4, r5}
 8002fe4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	e7fa      	b.n	8002fe0 <HAL_I2C_Master_Receive_IT+0xcc>
 8002fea:	bf00      	nop
 8002fec:	20000064 	.word	0x20000064
 8002ff0:	14f8b589 	.word	0x14f8b589
 8002ff4:	ffff0000 	.word	0xffff0000

08002ff8 <HAL_I2C_IsDeviceReady>:
{
 8002ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	4604      	mov	r4, r0
 8003000:	4688      	mov	r8, r1
 8003002:	4691      	mov	r9, r2
 8003004:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003006:	f7ff f9c1 	bl	800238c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800300a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b20      	cmp	r3, #32
 8003012:	d004      	beq.n	800301e <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
}
 8003016:	4618      	mov	r0, r3
 8003018:	b005      	add	sp, #20
 800301a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800301e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003020:	9000      	str	r0, [sp, #0]
 8003022:	2319      	movs	r3, #25
 8003024:	2201      	movs	r2, #1
 8003026:	4954      	ldr	r1, [pc, #336]	; (8003178 <HAL_I2C_IsDeviceReady+0x180>)
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff fdff 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 800302e:	2800      	cmp	r0, #0
 8003030:	f040 8097 	bne.w	8003162 <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 8003034:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	f000 8094 	beq.w	8003166 <HAL_I2C_IsDeviceReady+0x16e>
 800303e:	2301      	movs	r3, #1
 8003040:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	f012 0f01 	tst.w	r2, #1
 800304c:	d103      	bne.n	8003056 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	6813      	ldr	r3, [r2, #0]
 800305a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800305e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003060:	2324      	movs	r3, #36	; 0x24
 8003062:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003066:	2300      	movs	r3, #0
 8003068:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800306a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800306e:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8003070:	2701      	movs	r7, #1
 8003072:	e034      	b.n	80030de <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003074:	23a0      	movs	r3, #160	; 0xa0
 8003076:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003082:	6959      	ldr	r1, [r3, #20]
 8003084:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003088:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2ba0      	cmp	r3, #160	; 0xa0
 8003090:	d009      	beq.n	80030a6 <HAL_I2C_IsDeviceReady+0xae>
 8003092:	b942      	cbnz	r2, 80030a6 <HAL_I2C_IsDeviceReady+0xae>
 8003094:	b939      	cbnz	r1, 80030a6 <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7ff f979 	bl	800238c <HAL_GetTick>
 800309a:	1b80      	subs	r0, r0, r6
 800309c:	42a8      	cmp	r0, r5
 800309e:	d8e9      	bhi.n	8003074 <HAL_I2C_IsDeviceReady+0x7c>
 80030a0:	2d00      	cmp	r5, #0
 80030a2:	d1ea      	bne.n	800307a <HAL_I2C_IsDeviceReady+0x82>
 80030a4:	e7e6      	b.n	8003074 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	2320      	movs	r3, #32
 80030a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	f012 0f02 	tst.w	r2, #2
 80030b4:	d131      	bne.n	800311a <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c4:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c6:	9600      	str	r6, [sp, #0]
 80030c8:	2319      	movs	r3, #25
 80030ca:	2201      	movs	r2, #1
 80030cc:	492a      	ldr	r1, [pc, #168]	; (8003178 <HAL_I2C_IsDeviceReady+0x180>)
 80030ce:	4620      	mov	r0, r4
 80030d0:	f7ff fdac 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d14c      	bne.n	8003172 <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 80030d8:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80030da:	454f      	cmp	r7, r9
 80030dc:	d239      	bcs.n	8003152 <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e6:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030e8:	9600      	str	r6, [sp, #0]
 80030ea:	462b      	mov	r3, r5
 80030ec:	2200      	movs	r2, #0
 80030ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f2:	4620      	mov	r0, r4
 80030f4:	f7ff fd9a 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d136      	bne.n	800316a <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8003102:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003104:	f7ff f942 	bl	800238c <HAL_GetTick>
 8003108:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003112:	6959      	ldr	r1, [r3, #20]
 8003114:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003118:	e7b6      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003120:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003122:	2300      	movs	r3, #0
 8003124:	9303      	str	r3, [sp, #12]
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	9203      	str	r2, [sp, #12]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	9303      	str	r3, [sp, #12]
 8003130:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003132:	9600      	str	r6, [sp, #0]
 8003134:	2319      	movs	r3, #25
 8003136:	2201      	movs	r2, #1
 8003138:	490f      	ldr	r1, [pc, #60]	; (8003178 <HAL_I2C_IsDeviceReady+0x180>)
 800313a:	4620      	mov	r0, r4
 800313c:	f7ff fd76 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	b9a0      	cbnz	r0, 800316e <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 8003144:	2220      	movs	r2, #32
 8003146:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800314a:	2200      	movs	r2, #0
 800314c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8003150:	e761      	b.n	8003016 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003152:	2320      	movs	r3, #32
 8003154:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003158:	2300      	movs	r3, #0
 800315a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e759      	b.n	8003016 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
 8003164:	e757      	b.n	8003016 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8003166:	2302      	movs	r3, #2
 8003168:	e755      	b.n	8003016 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e753      	b.n	8003016 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e751      	b.n	8003016 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e74f      	b.n	8003016 <HAL_I2C_IsDeviceReady+0x1e>
 8003176:	bf00      	nop
 8003178:	00100002 	.word	0x00100002

0800317c <HAL_I2C_SlaveTxCpltCallback>:
}
 800317c:	4770      	bx	lr

0800317e <I2C_SlaveTransmit_TXE>:
{
 800317e:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003180:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003184:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8003186:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	b17b      	cbz	r3, 80031ac <I2C_SlaveTransmit_TXE+0x2e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800318e:	6803      	ldr	r3, [r0, #0]
 8003190:	7809      	ldrb	r1, [r1, #0]
 8003192:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8003194:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003196:	3301      	adds	r3, #1
 8003198:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800319a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800319c:	3b01      	subs	r3, #1
 800319e:	b29b      	uxth	r3, r3
 80031a0:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	b90b      	cbnz	r3, 80031ac <I2C_SlaveTransmit_TXE+0x2e>
 80031a8:	2a29      	cmp	r2, #41	; 0x29
 80031aa:	d000      	beq.n	80031ae <I2C_SlaveTransmit_TXE+0x30>
}
 80031ac:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031ae:	6802      	ldr	r2, [r0, #0]
 80031b0:	6853      	ldr	r3, [r2, #4]
 80031b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031b6:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031b8:	2321      	movs	r3, #33	; 0x21
 80031ba:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031bc:	2328      	movs	r3, #40	; 0x28
 80031be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031c2:	f7ff ffdb 	bl	800317c <HAL_I2C_SlaveTxCpltCallback>
}
 80031c6:	e7f1      	b.n	80031ac <I2C_SlaveTransmit_TXE+0x2e>

080031c8 <HAL_I2C_SlaveRxCpltCallback>:
}
 80031c8:	4770      	bx	lr

080031ca <I2C_SlaveReceive_RXNE>:
{
 80031ca:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031d0:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80031d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	b17b      	cbz	r3, 80031f8 <I2C_SlaveReceive_RXNE+0x2e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d8:	6803      	ldr	r3, [r0, #0]
 80031da:	6919      	ldr	r1, [r3, #16]
 80031dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031de:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80031e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031e2:	3301      	adds	r3, #1
 80031e4:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80031e6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	b90b      	cbnz	r3, 80031f8 <I2C_SlaveReceive_RXNE+0x2e>
 80031f4:	2a2a      	cmp	r2, #42	; 0x2a
 80031f6:	d000      	beq.n	80031fa <I2C_SlaveReceive_RXNE+0x30>
}
 80031f8:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031fa:	6802      	ldr	r2, [r0, #0]
 80031fc:	6853      	ldr	r3, [r2, #4]
 80031fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003202:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003204:	2322      	movs	r3, #34	; 0x22
 8003206:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003208:	2328      	movs	r3, #40	; 0x28
 800320a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800320e:	f7ff ffdb 	bl	80031c8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003212:	e7f1      	b.n	80031f8 <I2C_SlaveReceive_RXNE+0x2e>

08003214 <HAL_I2C_AddrCallback>:
}
 8003214:	4770      	bx	lr

08003216 <I2C_Slave_ADDR>:
{
 8003216:	b508      	push	{r3, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003218:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800321c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003220:	2b28      	cmp	r3, #40	; 0x28
 8003222:	d007      	beq.n	8003234 <I2C_Slave_ADDR+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003224:	6803      	ldr	r3, [r0, #0]
 8003226:	f06f 0202 	mvn.w	r2, #2
 800322a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800322c:	2300      	movs	r3, #0
 800322e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003232:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003234:	6802      	ldr	r2, [r0, #0]
 8003236:	6853      	ldr	r3, [r2, #4]
 8003238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800323c:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800323e:	f011 0f04 	tst.w	r1, #4
 8003242:	d00b      	beq.n	800325c <I2C_Slave_ADDR+0x46>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003244:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003246:	f011 0f80 	tst.w	r1, #128	; 0x80
 800324a:	d109      	bne.n	8003260 <I2C_Slave_ADDR+0x4a>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800324c:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 800324e:	2100      	movs	r1, #0
 8003250:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003254:	4619      	mov	r1, r3
 8003256:	f7ff ffdd 	bl	8003214 <HAL_I2C_AddrCallback>
 800325a:	e7ea      	b.n	8003232 <I2C_Slave_ADDR+0x1c>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800325c:	2301      	movs	r3, #1
 800325e:	e7f2      	b.n	8003246 <I2C_Slave_ADDR+0x30>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003260:	8b02      	ldrh	r2, [r0, #24]
 8003262:	e7f4      	b.n	800324e <I2C_Slave_ADDR+0x38>

08003264 <HAL_I2C_ListenCpltCallback>:
}
 8003264:	4770      	bx	lr
	...

08003268 <I2C_Slave_AF>:
{
 8003268:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800326a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003270:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003272:	2a08      	cmp	r2, #8
 8003274:	d001      	beq.n	800327a <I2C_Slave_AF+0x12>
 8003276:	2a20      	cmp	r2, #32
 8003278:	d101      	bne.n	800327e <I2C_Slave_AF+0x16>
 800327a:	2b28      	cmp	r3, #40	; 0x28
 800327c:	d006      	beq.n	800328c <I2C_Slave_AF+0x24>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800327e:	2b21      	cmp	r3, #33	; 0x21
 8003280:	d01e      	beq.n	80032c0 <I2C_Slave_AF+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003282:	6803      	ldr	r3, [r0, #0]
 8003284:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003288:	615a      	str	r2, [r3, #20]
}
 800328a:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <I2C_Slave_AF+0x90>)
 800328e:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003290:	6802      	ldr	r2, [r0, #0]
 8003292:	6853      	ldr	r3, [r2, #4]
 8003294:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003298:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329a:	6803      	ldr	r3, [r0, #0]
 800329c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a2:	6802      	ldr	r2, [r0, #0]
 80032a4:	6813      	ldr	r3, [r2, #0]
 80032a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032aa:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032b0:	2220      	movs	r2, #32
 80032b2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032b6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80032ba:	f7ff ffd3 	bl	8003264 <HAL_I2C_ListenCpltCallback>
 80032be:	e7e4      	b.n	800328a <I2C_Slave_AF+0x22>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <I2C_Slave_AF+0x90>)
 80032c2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032c4:	2321      	movs	r3, #33	; 0x21
 80032c6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032c8:	2320      	movs	r3, #32
 80032ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d4:	6802      	ldr	r2, [r0, #0]
 80032d6:	6853      	ldr	r3, [r2, #4]
 80032d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032dc:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032de:	6803      	ldr	r3, [r0, #0]
 80032e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032e4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e6:	6802      	ldr	r2, [r0, #0]
 80032e8:	6813      	ldr	r3, [r2, #0]
 80032ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ee:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032f0:	f7ff ff44 	bl	800317c <HAL_I2C_SlaveTxCpltCallback>
 80032f4:	e7c9      	b.n	800328a <I2C_Slave_AF+0x22>
 80032f6:	bf00      	nop
 80032f8:	ffff0000 	.word	0xffff0000

080032fc <HAL_I2C_MemTxCpltCallback>:
}
 80032fc:	4770      	bx	lr

080032fe <I2C_MasterTransmit_TXE>:
{
 80032fe:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003300:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003306:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800330a:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800330c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800330e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8003310:	b909      	cbnz	r1, 8003316 <I2C_MasterTransmit_TXE+0x18>
 8003312:	2b21      	cmp	r3, #33	; 0x21
 8003314:	d004      	beq.n	8003320 <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003316:	2b21      	cmp	r3, #33	; 0x21
 8003318:	d03b      	beq.n	8003392 <I2C_MasterTransmit_TXE+0x94>
 800331a:	2a40      	cmp	r2, #64	; 0x40
 800331c:	d037      	beq.n	800338e <I2C_MasterTransmit_TXE+0x90>
}
 800331e:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003320:	2c08      	cmp	r4, #8
 8003322:	d004      	beq.n	800332e <I2C_MasterTransmit_TXE+0x30>
 8003324:	2c20      	cmp	r4, #32
 8003326:	d002      	beq.n	800332e <I2C_MasterTransmit_TXE+0x30>
 8003328:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 800332c:	d119      	bne.n	8003362 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800332e:	6802      	ldr	r2, [r0, #0]
 8003330:	6853      	ldr	r3, [r2, #4]
 8003332:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003336:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	6802      	ldr	r2, [r0, #0]
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003340:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003342:	2300      	movs	r3, #0
 8003344:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003346:	2320      	movs	r3, #32
 8003348:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800334c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d015      	beq.n	8003382 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003356:	2300      	movs	r3, #0
 8003358:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800335c:	f7fe fe6a 	bl	8002034 <HAL_I2C_MasterTxCpltCallback>
 8003360:	e7dd      	b.n	800331e <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003362:	6802      	ldr	r2, [r0, #0]
 8003364:	6853      	ldr	r3, [r2, #4]
 8003366:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800336a:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800336c:	2311      	movs	r3, #17
 800336e:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	2300      	movs	r3, #0
 8003372:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003376:	2320      	movs	r3, #32
 8003378:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800337c:	f7fe fe5a 	bl	8002034 <HAL_I2C_MasterTxCpltCallback>
 8003380:	e7cd      	b.n	800331e <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003382:	2300      	movs	r3, #0
 8003384:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003388:	f7ff ffb8 	bl	80032fc <HAL_I2C_MemTxCpltCallback>
 800338c:	e7c7      	b.n	800331e <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800338e:	2b22      	cmp	r3, #34	; 0x22
 8003390:	d1c5      	bne.n	800331e <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8003392:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	b183      	cbz	r3, 80033ba <I2C_MasterTransmit_TXE+0xbc>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003398:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d011      	beq.n	80033c6 <I2C_MasterTransmit_TXE+0xc8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80033a4:	6803      	ldr	r3, [r0, #0]
 80033a6:	7812      	ldrb	r2, [r2, #0]
 80033a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80033aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033ac:	3301      	adds	r3, #1
 80033ae:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 80033b0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80033b8:	e7b1      	b.n	800331e <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033ba:	6802      	ldr	r2, [r0, #0]
 80033bc:	6853      	ldr	r3, [r2, #4]
 80033be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c2:	6053      	str	r3, [r2, #4]
 80033c4:	e7ab      	b.n	800331e <I2C_MasterTransmit_TXE+0x20>
        if (hi2c->EventCount == 0U)
 80033c6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80033c8:	b99b      	cbnz	r3, 80033f2 <I2C_MasterTransmit_TXE+0xf4>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80033ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d008      	beq.n	80033e2 <I2C_MasterTransmit_TXE+0xe4>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80033d0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80033d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80033d6:	6802      	ldr	r2, [r0, #0]
 80033d8:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 80033da:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80033dc:	3301      	adds	r3, #1
 80033de:	6503      	str	r3, [r0, #80]	; 0x50
 80033e0:	e79d      	b.n	800331e <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033e2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80033e4:	6802      	ldr	r2, [r0, #0]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2U;
 80033ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80033ec:	3302      	adds	r3, #2
 80033ee:	6503      	str	r3, [r0, #80]	; 0x50
 80033f0:	e795      	b.n	800331e <I2C_MasterTransmit_TXE+0x20>
        else if (hi2c->EventCount == 1U)
 80033f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d018      	beq.n	800342a <I2C_MasterTransmit_TXE+0x12c>
        else if (hi2c->EventCount == 2U)
 80033f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d18f      	bne.n	800331e <I2C_MasterTransmit_TXE+0x20>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b22      	cmp	r3, #34	; 0x22
 8003406:	d018      	beq.n	800343a <I2C_MasterTransmit_TXE+0x13c>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003408:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b21      	cmp	r3, #33	; 0x21
 8003410:	d185      	bne.n	800331e <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003412:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003414:	6803      	ldr	r3, [r0, #0]
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800341a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800341c:	3301      	adds	r3, #1
 800341e:	6243      	str	r3, [r0, #36]	; 0x24
            hi2c->XferCount--;
 8003420:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003422:	3b01      	subs	r3, #1
 8003424:	b29b      	uxth	r3, r3
 8003426:	8543      	strh	r3, [r0, #42]	; 0x2a
 8003428:	e779      	b.n	800331e <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800342a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800342c:	6802      	ldr	r2, [r0, #0]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 8003432:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003434:	3301      	adds	r3, #1
 8003436:	6503      	str	r3, [r0, #80]	; 0x50
 8003438:	e771      	b.n	800331e <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800343a:	6802      	ldr	r2, [r0, #0]
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e76b      	b.n	800331e <I2C_MasterTransmit_TXE+0x20>

08003446 <I2C_MasterTransmit_BTF>:
{
 8003446:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003448:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800344a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b21      	cmp	r3, #33	; 0x21
 8003452:	d000      	beq.n	8003456 <I2C_MasterTransmit_BTF+0x10>
}
 8003454:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8003456:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	bb03      	cbnz	r3, 800349e <I2C_MasterTransmit_BTF+0x58>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800345c:	2a08      	cmp	r2, #8
 800345e:	d004      	beq.n	800346a <I2C_MasterTransmit_BTF+0x24>
 8003460:	2a20      	cmp	r2, #32
 8003462:	d002      	beq.n	800346a <I2C_MasterTransmit_BTF+0x24>
 8003464:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003468:	d125      	bne.n	80034b6 <I2C_MasterTransmit_BTF+0x70>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800346a:	6802      	ldr	r2, [r0, #0]
 800346c:	6853      	ldr	r3, [r2, #4]
 800346e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003472:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	6802      	ldr	r2, [r0, #0]
 8003476:	6813      	ldr	r3, [r2, #0]
 8003478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800347c:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800347e:	2300      	movs	r3, #0
 8003480:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003482:	2320      	movs	r3, #32
 8003484:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003488:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d021      	beq.n	80034d6 <I2C_MasterTransmit_BTF+0x90>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003492:	2300      	movs	r3, #0
 8003494:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003498:	f7fe fdcc 	bl	8002034 <HAL_I2C_MasterTxCpltCallback>
}
 800349c:	e7da      	b.n	8003454 <I2C_MasterTransmit_BTF+0xe>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80034a0:	6803      	ldr	r3, [r0, #0]
 80034a2:	7812      	ldrb	r2, [r2, #0]
 80034a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80034a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034a8:	3301      	adds	r3, #1
 80034aa:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80034ac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	8543      	strh	r3, [r0, #42]	; 0x2a
 80034b4:	e7ce      	b.n	8003454 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b6:	6802      	ldr	r2, [r0, #0]
 80034b8:	6853      	ldr	r3, [r2, #4]
 80034ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034be:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034c0:	2311      	movs	r3, #17
 80034c2:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	2320      	movs	r3, #32
 80034cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034d0:	f7fe fdb0 	bl	8002034 <HAL_I2C_MasterTxCpltCallback>
 80034d4:	e7be      	b.n	8003454 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80034dc:	f7ff ff0e 	bl	80032fc <HAL_I2C_MemTxCpltCallback>
 80034e0:	e7b8      	b.n	8003454 <I2C_MasterTransmit_BTF+0xe>

080034e2 <HAL_I2C_MemRxCpltCallback>:
}
 80034e2:	4770      	bx	lr

080034e4 <I2C_MasterReceive_RXNE>:
{
 80034e4:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b22      	cmp	r3, #34	; 0x22
 80034ee:	d000      	beq.n	80034f2 <I2C_MasterReceive_RXNE+0xe>
}
 80034f0:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 80034f2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d914      	bls.n	8003524 <I2C_MasterReceive_RXNE+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fa:	6803      	ldr	r3, [r0, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003500:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003502:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003504:	3301      	adds	r3, #1
 8003506:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003508:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800350a:	3b01      	subs	r3, #1
 800350c:	b29b      	uxth	r3, r3
 800350e:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003510:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b03      	cmp	r3, #3
 8003516:	d1eb      	bne.n	80034f0 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003518:	6802      	ldr	r2, [r0, #0]
 800351a:	6853      	ldr	r3, [r2, #4]
 800351c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003520:	6053      	str	r3, [r2, #4]
 8003522:	e7e5      	b.n	80034f0 <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003524:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003526:	2a02      	cmp	r2, #2
 8003528:	d0e2      	beq.n	80034f0 <I2C_MasterReceive_RXNE+0xc>
 800352a:	2b01      	cmp	r3, #1
 800352c:	d8e0      	bhi.n	80034f0 <I2C_MasterReceive_RXNE+0xc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	6802      	ldr	r2, [r0, #0]
 8003530:	6813      	ldr	r3, [r2, #0]
 8003532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003536:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003538:	6802      	ldr	r2, [r0, #0]
 800353a:	6853      	ldr	r3, [r2, #4]
 800353c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003540:	6053      	str	r3, [r2, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003542:	6803      	ldr	r3, [r0, #0]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003548:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800354a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800354c:	3301      	adds	r3, #1
 800354e:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003550:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003552:	3b01      	subs	r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003558:	2320      	movs	r3, #32
 800355a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800355e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d007      	beq.n	8003578 <I2C_MasterReceive_RXNE+0x94>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	2300      	movs	r3, #0
 800356a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800356e:	2312      	movs	r3, #18
 8003570:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003572:	f7fe fd65 	bl	8002040 <HAL_I2C_MasterRxCpltCallback>
}
 8003576:	e7bb      	b.n	80034f0 <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	2300      	movs	r3, #0
 800357a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800357e:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003580:	f7ff ffaf 	bl	80034e2 <HAL_I2C_MemRxCpltCallback>
 8003584:	e7b4      	b.n	80034f0 <I2C_MasterReceive_RXNE+0xc>

08003586 <I2C_MasterReceive_BTF>:
{
 8003586:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003588:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 800358a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b04      	cmp	r3, #4
 8003590:	d013      	beq.n	80035ba <I2C_MasterReceive_BTF+0x34>
  else if (hi2c->XferCount == 3U)
 8003592:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b03      	cmp	r3, #3
 8003598:	d020      	beq.n	80035dc <I2C_MasterReceive_BTF+0x56>
  else if (hi2c->XferCount == 2U)
 800359a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d036      	beq.n	8003610 <I2C_MasterReceive_BTF+0x8a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a2:	6803      	ldr	r3, [r0, #0]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035ac:	3301      	adds	r3, #1
 80035ae:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80035b0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80035b8:	e00f      	b.n	80035da <I2C_MasterReceive_BTF+0x54>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035ba:	6802      	ldr	r2, [r0, #0]
 80035bc:	6853      	ldr	r3, [r2, #4]
 80035be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c2:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c4:	6803      	ldr	r3, [r0, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035ce:	3301      	adds	r3, #1
 80035d0:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80035d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80035da:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035dc:	6801      	ldr	r1, [r0, #0]
 80035de:	684b      	ldr	r3, [r1, #4]
 80035e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035e4:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80035e6:	2a04      	cmp	r2, #4
 80035e8:	d006      	beq.n	80035f8 <I2C_MasterReceive_BTF+0x72>
 80035ea:	2a02      	cmp	r2, #2
 80035ec:	d004      	beq.n	80035f8 <I2C_MasterReceive_BTF+0x72>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ee:	6802      	ldr	r2, [r0, #0]
 80035f0:	6813      	ldr	r3, [r2, #0]
 80035f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035f6:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f8:	6803      	ldr	r3, [r0, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003600:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003602:	3301      	adds	r3, #1
 8003604:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003606:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003608:	3b01      	subs	r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	8543      	strh	r3, [r0, #42]	; 0x2a
 800360e:	e7e4      	b.n	80035da <I2C_MasterReceive_BTF+0x54>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003610:	2a01      	cmp	r2, #1
 8003612:	d00b      	beq.n	800362c <I2C_MasterReceive_BTF+0xa6>
 8003614:	2a10      	cmp	r2, #16
 8003616:	d009      	beq.n	800362c <I2C_MasterReceive_BTF+0xa6>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003618:	2a04      	cmp	r2, #4
 800361a:	d036      	beq.n	800368a <I2C_MasterReceive_BTF+0x104>
 800361c:	2a02      	cmp	r2, #2
 800361e:	d034      	beq.n	800368a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	6802      	ldr	r2, [r0, #0]
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e004      	b.n	8003636 <I2C_MasterReceive_BTF+0xb0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362c:	6802      	ldr	r2, [r0, #0]
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003634:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003636:	6803      	ldr	r3, [r0, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800363c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800363e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003640:	1c53      	adds	r3, r2, #1
 8003642:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003644:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003646:	3b01      	subs	r3, #1
 8003648:	b29b      	uxth	r3, r3
 800364a:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364c:	6803      	ldr	r3, [r0, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8003652:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003654:	3301      	adds	r3, #1
 8003656:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003658:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800365a:	3b01      	subs	r3, #1
 800365c:	b29b      	uxth	r3, r3
 800365e:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003660:	6802      	ldr	r2, [r0, #0]
 8003662:	6853      	ldr	r3, [r2, #4]
 8003664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003668:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800366a:	2320      	movs	r3, #32
 800366c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003670:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d00d      	beq.n	8003696 <I2C_MasterReceive_BTF+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	2300      	movs	r3, #0
 800367c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003680:	2312      	movs	r3, #18
 8003682:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003684:	f7fe fcdc 	bl	8002040 <HAL_I2C_MasterRxCpltCallback>
 8003688:	e7a7      	b.n	80035da <I2C_MasterReceive_BTF+0x54>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368a:	6802      	ldr	r2, [r0, #0]
 800368c:	6813      	ldr	r3, [r2, #0]
 800368e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e7cf      	b.n	8003636 <I2C_MasterReceive_BTF+0xb0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	2300      	movs	r3, #0
 8003698:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800369c:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800369e:	f7ff ff20 	bl	80034e2 <HAL_I2C_MemRxCpltCallback>
 80036a2:	e79a      	b.n	80035da <I2C_MasterReceive_BTF+0x54>

080036a4 <HAL_I2C_ErrorCallback>:
}
 80036a4:	4770      	bx	lr

080036a6 <HAL_I2C_AbortCpltCallback>:
}
 80036a6:	4770      	bx	lr

080036a8 <I2C_DMAAbort>:
{
 80036a8:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036ac:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  hi2c->hdmatx->XferCpltCallback = NULL;
 80036b0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80036b2:	2300      	movs	r3, #0
 80036b4:	63cb      	str	r3, [r1, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80036b6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80036b8:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ba:	6804      	ldr	r4, [r0, #0]
 80036bc:	6821      	ldr	r1, [r4, #0]
 80036be:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80036c2:	6021      	str	r1, [r4, #0]
  hi2c->XferCount = 0U;
 80036c4:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 80036c6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80036c8:	650b      	str	r3, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80036ca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80036cc:	650b      	str	r3, [r1, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 80036ce:	6801      	ldr	r1, [r0, #0]
 80036d0:	680b      	ldr	r3, [r1, #0]
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b60      	cmp	r3, #96	; 0x60
 80036e0:	d00d      	beq.n	80036fe <I2C_DMAAbort+0x56>
 80036e2:	b2d2      	uxtb	r2, r2
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036e4:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80036e8:	2a28      	cmp	r2, #40	; 0x28
 80036ea:	d012      	beq.n	8003712 <I2C_DMAAbort+0x6a>
      hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	2320      	movs	r3, #32
 80036ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80036f8:	f7ff ffd4 	bl	80036a4 <HAL_I2C_ErrorCallback>
}
 80036fc:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 80036fe:	2320      	movs	r3, #32
 8003700:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003704:	2300      	movs	r3, #0
 8003706:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800370a:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800370c:	f7ff ffcb 	bl	80036a6 <HAL_I2C_AbortCpltCallback>
 8003710:	e7f4      	b.n	80036fc <I2C_DMAAbort+0x54>
      __HAL_I2C_ENABLE(hi2c);
 8003712:	6802      	ldr	r2, [r0, #0]
 8003714:	6813      	ldr	r3, [r2, #0]
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371c:	6802      	ldr	r2, [r0, #0]
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003724:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003726:	2300      	movs	r3, #0
 8003728:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800372a:	2328      	movs	r3, #40	; 0x28
 800372c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003730:	e7e2      	b.n	80036f8 <I2C_DMAAbort+0x50>
	...

08003734 <I2C_ITError>:
{
 8003734:	b510      	push	{r4, lr}
 8003736:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003738:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800373e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	2a10      	cmp	r2, #16
 8003746:	d033      	beq.n	80037b0 <I2C_ITError+0x7c>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003748:	f003 0228 	and.w	r2, r3, #40	; 0x28
 800374c:	2a28      	cmp	r2, #40	; 0x28
 800374e:	d037      	beq.n	80037c0 <I2C_ITError+0x8c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003750:	6822      	ldr	r2, [r4, #0]
 8003752:	6852      	ldr	r2, [r2, #4]
 8003754:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003758:	d104      	bne.n	8003764 <I2C_ITError+0x30>
 800375a:	2b60      	cmp	r3, #96	; 0x60
 800375c:	d002      	beq.n	8003764 <I2C_ITError+0x30>
      hi2c->State = HAL_I2C_STATE_READY;
 800375e:	2320      	movs	r3, #32
 8003760:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8003764:	2300      	movs	r3, #0
 8003766:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003774:	d048      	beq.n	8003808 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377c:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800377e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003780:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d020      	beq.n	80037cc <I2C_ITError+0x98>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800378a:	4b42      	ldr	r3, [pc, #264]	; (8003894 <I2C_ITError+0x160>)
 800378c:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800378e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003790:	f7fe fe7b 	bl	800248a <HAL_DMA_Abort_IT>
 8003794:	2800      	cmp	r0, #0
 8003796:	d049      	beq.n	800382c <I2C_ITError+0xf8>
        __HAL_I2C_DISABLE(hi2c);
 8003798:	6822      	ldr	r2, [r4, #0]
 800379a:	6813      	ldr	r3, [r2, #0]
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	2320      	movs	r3, #32
 80037a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80037aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80037ac:	4798      	blx	r3
 80037ae:	e03d      	b.n	800382c <I2C_ITError+0xf8>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037b0:	2b22      	cmp	r3, #34	; 0x22
 80037b2:	d1c9      	bne.n	8003748 <I2C_ITError+0x14>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80037b4:	6801      	ldr	r1, [r0, #0]
 80037b6:	680a      	ldr	r2, [r1, #0]
 80037b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037bc:	600a      	str	r2, [r1, #0]
 80037be:	e7c3      	b.n	8003748 <I2C_ITError+0x14>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80037c4:	2328      	movs	r3, #40	; 0x28
 80037c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80037ca:	e7cf      	b.n	800376c <I2C_ITError+0x38>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037ce:	4a31      	ldr	r2, [pc, #196]	; (8003894 <I2C_ITError+0x160>)
 80037d0:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80037d4:	f7fe fe59 	bl	800248a <HAL_DMA_Abort_IT>
 80037d8:	b340      	cbz	r0, 800382c <I2C_ITError+0xf8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	f012 0f40 	tst.w	r2, #64	; 0x40
 80037e2:	d005      	beq.n	80037f0 <I2C_ITError+0xbc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037e8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80037ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037ec:	3301      	adds	r3, #1
 80037ee:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	2320      	movs	r3, #32
 80037fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003800:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003802:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003804:	4798      	blx	r3
 8003806:	e011      	b.n	800382c <I2C_ITError+0xf8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003808:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	2a60      	cmp	r2, #96	; 0x60
 8003810:	d016      	beq.n	8003840 <I2C_ITError+0x10c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003818:	d005      	beq.n	8003826 <I2C_ITError+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800381e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003822:	3301      	adds	r3, #1
 8003824:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003826:	4620      	mov	r0, r4
 8003828:	f7ff ff3c 	bl	80036a4 <HAL_I2C_ErrorCallback>
  CurrentState = hi2c->State;
 800382c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003832:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003834:	f012 0f04 	tst.w	r2, #4
 8003838:	d001      	beq.n	800383e <I2C_ITError+0x10a>
 800383a:	2b28      	cmp	r3, #40	; 0x28
 800383c:	d018      	beq.n	8003870 <I2C_ITError+0x13c>
}
 800383e:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003840:	2220      	movs	r2, #32
 8003842:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003846:	2200      	movs	r2, #0
 8003848:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003850:	d005      	beq.n	800385e <I2C_ITError+0x12a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003856:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800385a:	3301      	adds	r3, #1
 800385c:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800385e:	6822      	ldr	r2, [r4, #0]
 8003860:	6813      	ldr	r3, [r2, #0]
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff ff1c 	bl	80036a6 <HAL_I2C_AbortCpltCallback>
 800386e:	e7dd      	b.n	800382c <I2C_ITError+0xf8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003870:	6822      	ldr	r2, [r4, #0]
 8003872:	6853      	ldr	r3, [r2, #4]
 8003874:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003878:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <I2C_ITError+0x164>)
 800387c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800387e:	2300      	movs	r3, #0
 8003880:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003882:	2220      	movs	r2, #32
 8003884:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003888:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800388c:	4620      	mov	r0, r4
 800388e:	f7ff fce9 	bl	8003264 <HAL_I2C_ListenCpltCallback>
}
 8003892:	e7d4      	b.n	800383e <I2C_ITError+0x10a>
 8003894:	080036a9 	.word	0x080036a9
 8003898:	ffff0000 	.word	0xffff0000

0800389c <I2C_Slave_STOPF>:
{
 800389c:	b530      	push	{r4, r5, lr}
 800389e:	b083      	sub	sp, #12
 80038a0:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038a2:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 80038a6:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038a8:	6802      	ldr	r2, [r0, #0]
 80038aa:	6853      	ldr	r3, [r2, #4]
 80038ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038b0:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80038b2:	2300      	movs	r3, #0
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	6803      	ldr	r3, [r0, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	9201      	str	r2, [sp, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c6:	6802      	ldr	r2, [r0, #0]
 80038c8:	6813      	ldr	r3, [r2, #0]
 80038ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ce:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038d0:	6803      	ldr	r3, [r0, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80038d8:	d038      	beq.n	800394c <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038da:	2d22      	cmp	r5, #34	; 0x22
 80038dc:	d021      	beq.n	8003922 <I2C_Slave_STOPF+0x86>
 80038de:	2d2a      	cmp	r5, #42	; 0x2a
 80038e0:	d01f      	beq.n	8003922 <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80038e2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	6852      	ldr	r2, [r2, #4]
 80038e8:	b292      	uxth	r2, r2
 80038ea:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80038ec:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80038ee:	b292      	uxth	r2, r2
 80038f0:	b11a      	cbz	r2, 80038fa <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80038f4:	f042 0204 	orr.w	r2, r2, #4
 80038f8:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003900:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003902:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003904:	f7fe fdd4 	bl	80024b0 <HAL_DMA_GetState>
 8003908:	2801      	cmp	r0, #1
 800390a:	d01f      	beq.n	800394c <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800390c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800390e:	4a43      	ldr	r2, [pc, #268]	; (8003a1c <I2C_Slave_STOPF+0x180>)
 8003910:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003912:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003914:	f7fe fdb9 	bl	800248a <HAL_DMA_Abort_IT>
 8003918:	b1c0      	cbz	r0, 800394c <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800391a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800391c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800391e:	4798      	blx	r3
 8003920:	e014      	b.n	800394c <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003922:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	6852      	ldr	r2, [r2, #4]
 8003928:	b292      	uxth	r2, r2
 800392a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800392c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800392e:	b292      	uxth	r2, r2
 8003930:	b11a      	cbz	r2, 800393a <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003932:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003934:	f042 0204 	orr.w	r2, r2, #4
 8003938:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003940:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003942:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003944:	f7fe fdb4 	bl	80024b0 <HAL_DMA_GetState>
 8003948:	2801      	cmp	r0, #1
 800394a:	d140      	bne.n	80039ce <I2C_Slave_STOPF+0x132>
  if (hi2c->XferCount != 0U)
 800394c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	b323      	cbz	r3, 800399c <I2C_Slave_STOPF+0x100>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	f012 0f04 	tst.w	r2, #4
 800395a:	d009      	beq.n	8003970 <I2C_Slave_STOPF+0xd4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003960:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003964:	3301      	adds	r3, #1
 8003966:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003968:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800396a:	3b01      	subs	r3, #1
 800396c:	b29b      	uxth	r3, r3
 800396e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003978:	d009      	beq.n	800398e <I2C_Slave_STOPF+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800397e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003982:	3301      	adds	r3, #1
 8003984:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003986:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003988:	3b01      	subs	r3, #1
 800398a:	b29b      	uxth	r3, r3
 800398c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800398e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	b11b      	cbz	r3, 800399c <I2C_Slave_STOPF+0x100>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800399c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800399e:	bb13      	cbnz	r3, 80039e6 <I2C_Slave_STOPF+0x14a>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039a0:	2d2a      	cmp	r5, #42	; 0x2a
 80039a2:	d025      	beq.n	80039f0 <I2C_Slave_STOPF+0x154>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039a4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b28      	cmp	r3, #40	; 0x28
 80039ac:	d029      	beq.n	8003a02 <I2C_Slave_STOPF+0x166>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80039ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039b0:	2b22      	cmp	r3, #34	; 0x22
 80039b2:	d001      	beq.n	80039b8 <I2C_Slave_STOPF+0x11c>
 80039b4:	2d22      	cmp	r5, #34	; 0x22
 80039b6:	d119      	bne.n	80039ec <I2C_Slave_STOPF+0x150>
        hi2c->PreviousState = I2C_STATE_NONE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	2220      	movs	r2, #32
 80039be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039c6:	4620      	mov	r0, r4
 80039c8:	f7ff fbfe 	bl	80031c8 <HAL_I2C_SlaveRxCpltCallback>
}
 80039cc:	e00e      	b.n	80039ec <I2C_Slave_STOPF+0x150>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039d0:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <I2C_Slave_STOPF+0x180>)
 80039d2:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80039d6:	f7fe fd58 	bl	800248a <HAL_DMA_Abort_IT>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d0b6      	beq.n	800394c <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80039e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80039e2:	4798      	blx	r3
 80039e4:	e7b2      	b.n	800394c <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7ff fea4 	bl	8003734 <I2C_ITError>
}
 80039ec:	b003      	add	sp, #12
 80039ee:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039f4:	2328      	movs	r3, #40	; 0x28
 80039f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039fa:	4620      	mov	r0, r4
 80039fc:	f7ff fbe4 	bl	80031c8 <HAL_I2C_SlaveRxCpltCallback>
 8003a00:	e7d0      	b.n	80039a4 <I2C_Slave_STOPF+0x108>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <I2C_Slave_STOPF+0x184>)
 8003a04:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003a14:	4620      	mov	r0, r4
 8003a16:	f7ff fc25 	bl	8003264 <HAL_I2C_ListenCpltCallback>
 8003a1a:	e7e7      	b.n	80039ec <I2C_Slave_STOPF+0x150>
 8003a1c:	080036a9 	.word	0x080036a9
 8003a20:	ffff0000 	.word	0xffff0000

08003a24 <HAL_I2C_EV_IRQHandler>:
{
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a28:	6802      	ldr	r2, [r0, #0]
 8003a2a:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a2c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a2e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003a32:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a34:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d014      	beq.n	8003a66 <HAL_I2C_EV_IRQHandler+0x42>
 8003a3c:	b2c8      	uxtb	r0, r1
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d011      	beq.n	8003a66 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d071      	beq.n	8003b2c <HAL_I2C_EV_IRQHandler+0x108>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a48:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8003a4a:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4c:	f013 0f02 	tst.w	r3, #2
 8003a50:	d06f      	beq.n	8003b32 <HAL_I2C_EV_IRQHandler+0x10e>
 8003a52:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003a56:	d06c      	beq.n	8003b32 <HAL_I2C_EV_IRQHandler+0x10e>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a5a:	b103      	cbz	r3, 8003a5e <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a5c:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f7ff fbd9 	bl	8003216 <I2C_Slave_ADDR>
}
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a66:	6990      	ldr	r0, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a68:	6953      	ldr	r3, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a6a:	f013 0101 	ands.w	r1, r3, #1
 8003a6e:	d105      	bne.n	8003a7c <HAL_I2C_EV_IRQHandler+0x58>
 8003a70:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8003a74:	d0f6      	beq.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
 8003a76:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003a7a:	d0f3      	beq.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7c:	b111      	cbz	r1, 8003a84 <HAL_I2C_EV_IRQHandler+0x60>
 8003a7e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003a82:	d125      	bne.n	8003ad0 <HAL_I2C_EV_IRQHandler+0xac>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a84:	f013 0f08 	tst.w	r3, #8
 8003a88:	d002      	beq.n	8003a90 <HAL_I2C_EV_IRQHandler+0x6c>
 8003a8a:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003a8e:	d126      	bne.n	8003ade <HAL_I2C_EV_IRQHandler+0xba>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a90:	f013 0f02 	tst.w	r3, #2
 8003a94:	d002      	beq.n	8003a9c <HAL_I2C_EV_IRQHandler+0x78>
 8003a96:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003a9a:	d124      	bne.n	8003ae6 <HAL_I2C_EV_IRQHandler+0xc2>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a9c:	f010 0f04 	tst.w	r0, #4
 8003aa0:	d029      	beq.n	8003af6 <HAL_I2C_EV_IRQHandler+0xd2>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003aa2:	6852      	ldr	r2, [r2, #4]
 8003aa4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003aa8:	d1dc      	bne.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aaa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003aae:	d005      	beq.n	8003abc <HAL_I2C_EV_IRQHandler+0x98>
 8003ab0:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003ab4:	d002      	beq.n	8003abc <HAL_I2C_EV_IRQHandler+0x98>
 8003ab6:	f013 0f04 	tst.w	r3, #4
 8003aba:	d018      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0xca>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003abc:	f013 0f04 	tst.w	r3, #4
 8003ac0:	d0d0      	beq.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
 8003ac2:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003ac6:	d0cd      	beq.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_BTF(hi2c);
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff fcbc 	bl	8003446 <I2C_MasterTransmit_BTF>
 8003ace:	e7c9      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7ff f89c 	bl	8002c0e <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7fe ff0a 	bl	80028f0 <I2C_Master_SB>
 8003adc:	e7c2      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7fe ff5d 	bl	800299e <I2C_Master_ADD10>
 8003ae4:	e7be      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f7fe ff70 	bl	80029cc <I2C_Master_ADDR>
 8003aec:	e7ba      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff fc05 	bl	80032fe <I2C_MasterTransmit_TXE>
 8003af4:	e7b6      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003af6:	6852      	ldr	r2, [r2, #4]
 8003af8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003afc:	d1b2      	bne.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003afe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b02:	d005      	beq.n	8003b10 <HAL_I2C_EV_IRQHandler+0xec>
 8003b04:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003b08:	d002      	beq.n	8003b10 <HAL_I2C_EV_IRQHandler+0xec>
 8003b0a:	f013 0f04 	tst.w	r3, #4
 8003b0e:	d009      	beq.n	8003b24 <HAL_I2C_EV_IRQHandler+0x100>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b10:	f013 0f04 	tst.w	r3, #4
 8003b14:	d0a6      	beq.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
 8003b16:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003b1a:	d0a3      	beq.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff fd32 	bl	8003586 <I2C_MasterReceive_BTF>
 8003b22:	e79f      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8003b24:	4620      	mov	r0, r4
 8003b26:	f7ff fcdd 	bl	80034e4 <I2C_MasterReceive_RXNE>
 8003b2a:	e79b      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b2c:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b2e:	6953      	ldr	r3, [r2, #20]
 8003b30:	e78c      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b32:	f013 0f10 	tst.w	r3, #16
 8003b36:	d002      	beq.n	8003b3e <HAL_I2C_EV_IRQHandler+0x11a>
 8003b38:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003b3c:	d117      	bne.n	8003b6e <HAL_I2C_EV_IRQHandler+0x14a>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b3e:	2821      	cmp	r0, #33	; 0x21
 8003b40:	d019      	beq.n	8003b76 <HAL_I2C_EV_IRQHandler+0x152>
 8003b42:	2829      	cmp	r0, #41	; 0x29
 8003b44:	d017      	beq.n	8003b76 <HAL_I2C_EV_IRQHandler+0x152>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b4a:	d005      	beq.n	8003b58 <HAL_I2C_EV_IRQHandler+0x134>
 8003b4c:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003b50:	d002      	beq.n	8003b58 <HAL_I2C_EV_IRQHandler+0x134>
 8003b52:	f013 0f04 	tst.w	r3, #4
 8003b56:	d027      	beq.n	8003ba8 <HAL_I2C_EV_IRQHandler+0x184>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b58:	f013 0f04 	tst.w	r3, #4
 8003b5c:	d082      	beq.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
 8003b5e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003b62:	f43f af7f 	beq.w	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8003b66:	4620      	mov	r0, r4
 8003b68:	f7ff f842 	bl	8002bf0 <I2C_SlaveReceive_BTF>
 8003b6c:	e77a      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7ff fe94 	bl	800389c <I2C_Slave_STOPF>
 8003b74:	e776      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b7a:	d005      	beq.n	8003b88 <HAL_I2C_EV_IRQHandler+0x164>
 8003b7c:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003b80:	d002      	beq.n	8003b88 <HAL_I2C_EV_IRQHandler+0x164>
 8003b82:	f013 0f04 	tst.w	r3, #4
 8003b86:	d00b      	beq.n	8003ba0 <HAL_I2C_EV_IRQHandler+0x17c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b88:	f013 0f04 	tst.w	r3, #4
 8003b8c:	f43f af6a 	beq.w	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
 8003b90:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003b94:	f43f af66 	beq.w	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f7ff f81a 	bl	8002bd2 <I2C_SlaveTransmit_BTF>
 8003b9e:	e761      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff faec 	bl	800317e <I2C_SlaveTransmit_TXE>
 8003ba6:	e75d      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7ff fb0e 	bl	80031ca <I2C_SlaveReceive_RXNE>
 8003bae:	e759      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x40>

08003bb0 <HAL_I2C_ER_IRQHandler>:
{
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003bb4:	6803      	ldr	r3, [r0, #0]
 8003bb6:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003bb8:	685f      	ldr	r7, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bba:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003bbe:	d007      	beq.n	8003bd0 <HAL_I2C_ER_IRQHandler+0x20>
 8003bc0:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003bc4:	d03b      	beq.n	8003c3e <HAL_I2C_ER_IRQHandler+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bca:	615a      	str	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8003bcc:	2601      	movs	r6, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_I2C_ER_IRQHandler+0x22>
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003bd0:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bd2:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003bd6:	d008      	beq.n	8003bea <HAL_I2C_ER_IRQHandler+0x3a>
 8003bd8:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003bdc:	d005      	beq.n	8003bea <HAL_I2C_ER_IRQHandler+0x3a>
    error |= HAL_I2C_ERROR_ARLO;
 8003bde:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003be8:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bea:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003bee:	d018      	beq.n	8003c22 <HAL_I2C_ER_IRQHandler+0x72>
 8003bf0:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003bf4:	d015      	beq.n	8003c22 <HAL_I2C_ER_IRQHandler+0x72>
    tmp1 = hi2c->Mode;
 8003bf6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003bfa:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 8003bfc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003bfe:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 8003c00:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003c04:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8003c06:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d01a      	beq.n	8003c42 <HAL_I2C_ER_IRQHandler+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c12:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8003c14:	f046 0604 	orr.w	r6, r6, #4
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003c18:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d01d      	beq.n	8003c5e <HAL_I2C_ER_IRQHandler+0xae>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c22:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8003c26:	d008      	beq.n	8003c3a <HAL_I2C_ER_IRQHandler+0x8a>
 8003c28:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003c2c:	d005      	beq.n	8003c3a <HAL_I2C_ER_IRQHandler+0x8a>
    error |= HAL_I2C_ERROR_OVR;
 8003c2e:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003c38:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8003c3a:	b9b6      	cbnz	r6, 8003c6a <HAL_I2C_ER_IRQHandler+0xba>
}
 8003c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003c3e:	2600      	movs	r6, #0
 8003c40:	e7c7      	b.n	8003bd2 <HAL_I2C_ER_IRQHandler+0x22>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003c42:	2900      	cmp	r1, #0
 8003c44:	d1e2      	bne.n	8003c0c <HAL_I2C_ER_IRQHandler+0x5c>
 8003c46:	2a21      	cmp	r2, #33	; 0x21
 8003c48:	d005      	beq.n	8003c56 <HAL_I2C_ER_IRQHandler+0xa6>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003c4a:	2a29      	cmp	r2, #41	; 0x29
 8003c4c:	d003      	beq.n	8003c56 <HAL_I2C_ER_IRQHandler+0xa6>
 8003c4e:	2a28      	cmp	r2, #40	; 0x28
 8003c50:	d1dc      	bne.n	8003c0c <HAL_I2C_ER_IRQHandler+0x5c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003c52:	2821      	cmp	r0, #33	; 0x21
 8003c54:	d1da      	bne.n	8003c0c <HAL_I2C_ER_IRQHandler+0x5c>
      I2C_Slave_AF(hi2c);
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff fb06 	bl	8003268 <I2C_Slave_AF>
 8003c5c:	e7e1      	b.n	8003c22 <HAL_I2C_ER_IRQHandler+0x72>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e7db      	b.n	8003c22 <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= error;
 8003c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c6c:	431e      	orrs	r6, r3
 8003c6e:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7ff fd5f 	bl	8003734 <I2C_ITError>
}
 8003c76:	e7e1      	b.n	8003c3c <HAL_I2C_ER_IRQHandler+0x8c>

08003c78 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	f000 81bb 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x37c>
{
 8003c7e:	b570      	push	{r4, r5, r6, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c84:	6803      	ldr	r3, [r0, #0]
 8003c86:	f013 0f01 	tst.w	r3, #1
 8003c8a:	d03b      	beq.n	8003d04 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c8c:	4ba7      	ldr	r3, [pc, #668]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d02c      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c98:	4ba4      	ldr	r3, [pc, #656]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d021      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca4:	6863      	ldr	r3, [r4, #4]
 8003ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003caa:	d04f      	beq.n	8003d4c <HAL_RCC_OscConfig+0xd4>
 8003cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb0:	d052      	beq.n	8003d58 <HAL_RCC_OscConfig+0xe0>
 8003cb2:	4b9e      	ldr	r3, [pc, #632]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc4:	6863      	ldr	r3, [r4, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d050      	beq.n	8003d6c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fe fb5f 	bl	800238c <HAL_GetTick>
 8003cce:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd0:	4b96      	ldr	r3, [pc, #600]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003cd8:	d114      	bne.n	8003d04 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cda:	f7fe fb57 	bl	800238c <HAL_GetTick>
 8003cde:	1b40      	subs	r0, r0, r5
 8003ce0:	2864      	cmp	r0, #100	; 0x64
 8003ce2:	d9f5      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8003ce4:	2003      	movs	r0, #3
 8003ce6:	e18a      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce8:	4b90      	ldr	r3, [pc, #576]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003cf0:	d0d8      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf2:	4b8e      	ldr	r3, [pc, #568]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003cfa:	d003      	beq.n	8003d04 <HAL_RCC_OscConfig+0x8c>
 8003cfc:	6863      	ldr	r3, [r4, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 817a 	beq.w	8003ff8 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	f013 0f02 	tst.w	r3, #2
 8003d0a:	d055      	beq.n	8003db8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0c:	4b87      	ldr	r3, [pc, #540]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f013 0f0c 	tst.w	r3, #12
 8003d14:	d03e      	beq.n	8003d94 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b85      	ldr	r3, [pc, #532]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d033      	beq.n	8003d8a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d22:	68e3      	ldr	r3, [r4, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d068      	beq.n	8003dfa <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d28:	4b81      	ldr	r3, [pc, #516]	; (8003f30 <HAL_RCC_OscConfig+0x2b8>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fe fb2d 	bl	800238c <HAL_GetTick>
 8003d32:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	4b7d      	ldr	r3, [pc, #500]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f013 0f02 	tst.w	r3, #2
 8003d3c:	d154      	bne.n	8003de8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3e:	f7fe fb25 	bl	800238c <HAL_GetTick>
 8003d42:	1b40      	subs	r0, r0, r5
 8003d44:	2802      	cmp	r0, #2
 8003d46:	d9f5      	bls.n	8003d34 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003d48:	2003      	movs	r0, #3
 8003d4a:	e158      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	4a77      	ldr	r2, [pc, #476]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003d4e:	6813      	ldr	r3, [r2, #0]
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e7b5      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4c>
 8003d58:	4b74      	ldr	r3, [pc, #464]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e7ab      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fb0e 	bl	800238c <HAL_GetTick>
 8003d70:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d72:	4b6e      	ldr	r3, [pc, #440]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d7a:	d0c3      	beq.n	8003d04 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fe fb06 	bl	800238c <HAL_GetTick>
 8003d80:	1b40      	subs	r0, r0, r5
 8003d82:	2864      	cmp	r0, #100	; 0x64
 8003d84:	d9f5      	bls.n	8003d72 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8003d86:	2003      	movs	r0, #3
 8003d88:	e139      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d8a:	4b68      	ldr	r3, [pc, #416]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003d92:	d1c6      	bne.n	8003d22 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d94:	4b65      	ldr	r3, [pc, #404]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f013 0f02 	tst.w	r3, #2
 8003d9c:	d004      	beq.n	8003da8 <HAL_RCC_OscConfig+0x130>
 8003d9e:	68e3      	ldr	r3, [r4, #12]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8003da4:	2001      	movs	r0, #1
 8003da6:	e12a      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da8:	4a60      	ldr	r2, [pc, #384]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003db0:	6921      	ldr	r1, [r4, #16]
 8003db2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003db6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	f013 0f08 	tst.w	r3, #8
 8003dbe:	d040      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dc0:	6963      	ldr	r3, [r4, #20]
 8003dc2:	b363      	cbz	r3, 8003e1e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc4:	4b5b      	ldr	r3, [pc, #364]	; (8003f34 <HAL_RCC_OscConfig+0x2bc>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fe fadf 	bl	800238c <HAL_GetTick>
 8003dce:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd0:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd4:	f013 0f02 	tst.w	r3, #2
 8003dd8:	d133      	bne.n	8003e42 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dda:	f7fe fad7 	bl	800238c <HAL_GetTick>
 8003dde:	1b40      	subs	r0, r0, r5
 8003de0:	2802      	cmp	r0, #2
 8003de2:	d9f5      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003de4:	2003      	movs	r0, #3
 8003de6:	e10a      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de8:	4a50      	ldr	r2, [pc, #320]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003dea:	6813      	ldr	r3, [r2, #0]
 8003dec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003df0:	6921      	ldr	r1, [r4, #16]
 8003df2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	e7de      	b.n	8003db8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003dfa:	4b4d      	ldr	r3, [pc, #308]	; (8003f30 <HAL_RCC_OscConfig+0x2b8>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e00:	f7fe fac4 	bl	800238c <HAL_GetTick>
 8003e04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e06:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f013 0f02 	tst.w	r3, #2
 8003e0e:	d0d3      	beq.n	8003db8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e10:	f7fe fabc 	bl	800238c <HAL_GetTick>
 8003e14:	1b40      	subs	r0, r0, r5
 8003e16:	2802      	cmp	r0, #2
 8003e18:	d9f5      	bls.n	8003e06 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003e1a:	2003      	movs	r0, #3
 8003e1c:	e0ef      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1e:	4b45      	ldr	r3, [pc, #276]	; (8003f34 <HAL_RCC_OscConfig+0x2bc>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e24:	f7fe fab2 	bl	800238c <HAL_GetTick>
 8003e28:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e2a:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2e:	f013 0f02 	tst.w	r3, #2
 8003e32:	d006      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e34:	f7fe faaa 	bl	800238c <HAL_GetTick>
 8003e38:	1b40      	subs	r0, r0, r5
 8003e3a:	2802      	cmp	r0, #2
 8003e3c:	d9f5      	bls.n	8003e2a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8003e3e:	2003      	movs	r0, #3
 8003e40:	e0dd      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	f013 0f04 	tst.w	r3, #4
 8003e48:	d079      	beq.n	8003f3e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4a:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003e52:	d133      	bne.n	8003ebc <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e54:	2300      	movs	r3, #0
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003e6c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <HAL_RCC_OscConfig+0x2c0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e76:	d023      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e78:	68a3      	ldr	r3, [r4, #8]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d034      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x270>
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d038      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x27c>
 8003e82:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003e84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	671a      	str	r2, [r3, #112]	; 0x70
 8003e8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e8e:	f022 0204 	bic.w	r2, r2, #4
 8003e92:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e94:	68a3      	ldr	r3, [r4, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d036      	beq.n	8003f08 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9a:	f7fe fa77 	bl	800238c <HAL_GetTick>
 8003e9e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea0:	4b22      	ldr	r3, [pc, #136]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	f013 0f02 	tst.w	r3, #2
 8003ea8:	d148      	bne.n	8003f3c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fe fa6f 	bl	800238c <HAL_GetTick>
 8003eae:	1b80      	subs	r0, r0, r6
 8003eb0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003eb4:	4298      	cmp	r0, r3
 8003eb6:	d9f3      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8003eb8:	2003      	movs	r0, #3
 8003eba:	e0a0      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8003ebc:	2500      	movs	r5, #0
 8003ebe:	e7d6      	b.n	8003e6e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <HAL_RCC_OscConfig+0x2c0>)
 8003ec2:	6813      	ldr	r3, [r2, #0]
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003eca:	f7fe fa5f 	bl	800238c <HAL_GetTick>
 8003ece:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <HAL_RCC_OscConfig+0x2c0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ed8:	d1ce      	bne.n	8003e78 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eda:	f7fe fa57 	bl	800238c <HAL_GetTick>
 8003ede:	1b80      	subs	r0, r0, r6
 8003ee0:	2802      	cmp	r0, #2
 8003ee2:	d9f5      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8003ee4:	2003      	movs	r0, #3
 8003ee6:	e08a      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee8:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003eea:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	e7cf      	b.n	8003e94 <HAL_RCC_OscConfig+0x21c>
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef8:	f042 0204 	orr.w	r2, r2, #4
 8003efc:	671a      	str	r2, [r3, #112]	; 0x70
 8003efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	671a      	str	r2, [r3, #112]	; 0x70
 8003f06:	e7c5      	b.n	8003e94 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f08:	f7fe fa40 	bl	800238c <HAL_GetTick>
 8003f0c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <HAL_RCC_OscConfig+0x2b4>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	f013 0f02 	tst.w	r3, #2
 8003f16:	d011      	beq.n	8003f3c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fe fa38 	bl	800238c <HAL_GetTick>
 8003f1c:	1b80      	subs	r0, r0, r6
 8003f1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f22:	4298      	cmp	r0, r3
 8003f24:	d9f3      	bls.n	8003f0e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8003f26:	2003      	movs	r0, #3
 8003f28:	e069      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	42470000 	.word	0x42470000
 8003f34:	42470e80 	.word	0x42470e80
 8003f38:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3c:	b9e5      	cbnz	r5, 8003f78 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3e:	69a3      	ldr	r3, [r4, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05b      	beq.n	8003ffc <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f44:	4a30      	ldr	r2, [pc, #192]	; (8004008 <HAL_RCC_OscConfig+0x390>)
 8003f46:	6892      	ldr	r2, [r2, #8]
 8003f48:	f002 020c 	and.w	r2, r2, #12
 8003f4c:	2a08      	cmp	r2, #8
 8003f4e:	d058      	beq.n	8004002 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d017      	beq.n	8003f84 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f54:	4b2d      	ldr	r3, [pc, #180]	; (800400c <HAL_RCC_OscConfig+0x394>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe fa17 	bl	800238c <HAL_GetTick>
 8003f5e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f60:	4b29      	ldr	r3, [pc, #164]	; (8004008 <HAL_RCC_OscConfig+0x390>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f68:	d042      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe fa0f 	bl	800238c <HAL_GetTick>
 8003f6e:	1b00      	subs	r0, r0, r4
 8003f70:	2802      	cmp	r0, #2
 8003f72:	d9f5      	bls.n	8003f60 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003f74:	2003      	movs	r0, #3
 8003f76:	e042      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f78:	4a23      	ldr	r2, [pc, #140]	; (8004008 <HAL_RCC_OscConfig+0x390>)
 8003f7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	e7dc      	b.n	8003f3e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <HAL_RCC_OscConfig+0x394>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f8a:	f7fe f9ff 	bl	800238c <HAL_GetTick>
 8003f8e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_RCC_OscConfig+0x390>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f98:	d006      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fe f9f7 	bl	800238c <HAL_GetTick>
 8003f9e:	1b40      	subs	r0, r0, r5
 8003fa0:	2802      	cmp	r0, #2
 8003fa2:	d9f5      	bls.n	8003f90 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8003fa4:	2003      	movs	r0, #3
 8003fa6:	e02a      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa8:	69e3      	ldr	r3, [r4, #28]
 8003faa:	6a22      	ldr	r2, [r4, #32]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003fb0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003fb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003fb6:	0852      	lsrs	r2, r2, #1
 8003fb8:	3a01      	subs	r2, #1
 8003fba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003fc0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003fc4:	4a10      	ldr	r2, [pc, #64]	; (8004008 <HAL_RCC_OscConfig+0x390>)
 8003fc6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003fc8:	4b10      	ldr	r3, [pc, #64]	; (800400c <HAL_RCC_OscConfig+0x394>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003fce:	f7fe f9dd 	bl	800238c <HAL_GetTick>
 8003fd2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <HAL_RCC_OscConfig+0x390>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003fdc:	d106      	bne.n	8003fec <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fe f9d5 	bl	800238c <HAL_GetTick>
 8003fe2:	1b00      	subs	r0, r0, r4
 8003fe4:	2802      	cmp	r0, #2
 8003fe6:	d9f5      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8003fe8:	2003      	movs	r0, #3
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003fec:	2000      	movs	r0, #0
 8003fee:	e006      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	e004      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8003ff4:	2001      	movs	r0, #1
}
 8003ff6:	4770      	bx	lr
        return HAL_ERROR;
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8003ffc:	2000      	movs	r0, #0
}
 8003ffe:	b002      	add	sp, #8
 8004000:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004002:	2001      	movs	r0, #1
 8004004:	e7fb      	b.n	8003ffe <HAL_RCC_OscConfig+0x386>
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	42470060 	.word	0x42470060

08004010 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004010:	4b32      	ldr	r3, [pc, #200]	; (80040dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b04      	cmp	r3, #4
 800401a:	d05c      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0xc6>
 800401c:	2b08      	cmp	r3, #8
 800401e:	d001      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004020:	482f      	ldr	r0, [pc, #188]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004022:	4770      	bx	lr
{
 8004024:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004028:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004036:	d02b      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004038:	4b28      	ldr	r3, [pc, #160]	; (80040dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004040:	461e      	mov	r6, r3
 8004042:	2700      	movs	r7, #0
 8004044:	015c      	lsls	r4, r3, #5
 8004046:	2500      	movs	r5, #0
 8004048:	1ae4      	subs	r4, r4, r3
 800404a:	eb65 0507 	sbc.w	r5, r5, r7
 800404e:	01a9      	lsls	r1, r5, #6
 8004050:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004054:	01a0      	lsls	r0, r4, #6
 8004056:	1b00      	subs	r0, r0, r4
 8004058:	eb61 0105 	sbc.w	r1, r1, r5
 800405c:	00cb      	lsls	r3, r1, #3
 800405e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004062:	00c4      	lsls	r4, r0, #3
 8004064:	19a0      	adds	r0, r4, r6
 8004066:	eb43 0107 	adc.w	r1, r3, r7
 800406a:	024b      	lsls	r3, r1, #9
 800406c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004070:	0244      	lsls	r4, r0, #9
 8004072:	4620      	mov	r0, r4
 8004074:	4619      	mov	r1, r3
 8004076:	2300      	movs	r3, #0
 8004078:	f7fc fe0e 	bl	8000c98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800407c:	4b17      	ldr	r3, [pc, #92]	; (80040dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004084:	3301      	adds	r3, #1
 8004086:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004088:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800408c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004098:	461e      	mov	r6, r3
 800409a:	2700      	movs	r7, #0
 800409c:	015c      	lsls	r4, r3, #5
 800409e:	2500      	movs	r5, #0
 80040a0:	1ae4      	subs	r4, r4, r3
 80040a2:	eb65 0507 	sbc.w	r5, r5, r7
 80040a6:	01a9      	lsls	r1, r5, #6
 80040a8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80040ac:	01a0      	lsls	r0, r4, #6
 80040ae:	1b00      	subs	r0, r0, r4
 80040b0:	eb61 0105 	sbc.w	r1, r1, r5
 80040b4:	00cb      	lsls	r3, r1, #3
 80040b6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80040ba:	00c4      	lsls	r4, r0, #3
 80040bc:	19a0      	adds	r0, r4, r6
 80040be:	eb43 0107 	adc.w	r1, r3, r7
 80040c2:	028b      	lsls	r3, r1, #10
 80040c4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80040c8:	0284      	lsls	r4, r0, #10
 80040ca:	4620      	mov	r0, r4
 80040cc:	4619      	mov	r1, r3
 80040ce:	2300      	movs	r3, #0
 80040d0:	f7fc fde2 	bl	8000c98 <__aeabi_uldivmod>
 80040d4:	e7d2      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 80040d6:	4803      	ldr	r0, [pc, #12]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800
 80040e0:	00f42400 	.word	0x00f42400
 80040e4:	007a1200 	.word	0x007a1200

080040e8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80040e8:	2800      	cmp	r0, #0
 80040ea:	f000 809d 	beq.w	8004228 <HAL_RCC_ClockConfig+0x140>
{
 80040ee:	b570      	push	{r4, r5, r6, lr}
 80040f0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f2:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <HAL_RCC_ClockConfig+0x148>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	428b      	cmp	r3, r1
 80040fc:	d209      	bcs.n	8004112 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	b2cb      	uxtb	r3, r1
 8004100:	4a4b      	ldr	r2, [pc, #300]	; (8004230 <HAL_RCC_ClockConfig+0x148>)
 8004102:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004104:	6813      	ldr	r3, [r2, #0]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	428b      	cmp	r3, r1
 800410c:	d001      	beq.n	8004112 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800410e:	2001      	movs	r0, #1
}
 8004110:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	f013 0f02 	tst.w	r3, #2
 8004118:	d017      	beq.n	800414a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411a:	f013 0f04 	tst.w	r3, #4
 800411e:	d004      	beq.n	800412a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4a44      	ldr	r2, [pc, #272]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 8004122:	6893      	ldr	r3, [r2, #8]
 8004124:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004128:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	f013 0f08 	tst.w	r3, #8
 8004130:	d004      	beq.n	800413c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004132:	4a40      	ldr	r2, [pc, #256]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 8004134:	6893      	ldr	r3, [r2, #8]
 8004136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413c:	4a3d      	ldr	r2, [pc, #244]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 800413e:	6893      	ldr	r3, [r2, #8]
 8004140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004144:	68a0      	ldr	r0, [r4, #8]
 8004146:	4303      	orrs	r3, r0
 8004148:	6093      	str	r3, [r2, #8]
 800414a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	f013 0f01 	tst.w	r3, #1
 8004152:	d032      	beq.n	80041ba <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d021      	beq.n	800419e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	1e9a      	subs	r2, r3, #2
 800415c:	2a01      	cmp	r2, #1
 800415e:	d925      	bls.n	80041ac <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004160:	4a34      	ldr	r2, [pc, #208]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	f012 0f02 	tst.w	r2, #2
 8004168:	d060      	beq.n	800422c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4932      	ldr	r1, [pc, #200]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 800416c:	688a      	ldr	r2, [r1, #8]
 800416e:	f022 0203 	bic.w	r2, r2, #3
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004176:	f7fe f909 	bl	800238c <HAL_GetTick>
 800417a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417c:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	6862      	ldr	r2, [r4, #4]
 8004186:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800418a:	d016      	beq.n	80041ba <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fe f8fe 	bl	800238c <HAL_GetTick>
 8004190:	1b80      	subs	r0, r0, r6
 8004192:	f241 3388 	movw	r3, #5000	; 0x1388
 8004196:	4298      	cmp	r0, r3
 8004198:	d9f0      	bls.n	800417c <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 800419a:	2003      	movs	r0, #3
 800419c:	e7b8      	b.n	8004110 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4a25      	ldr	r2, [pc, #148]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80041a6:	d1e0      	bne.n	800416a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80041a8:	2001      	movs	r0, #1
 80041aa:	e7b1      	b.n	8004110 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ac:	4a21      	ldr	r2, [pc, #132]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80041b4:	d1d9      	bne.n	800416a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80041b6:	2001      	movs	r0, #1
 80041b8:	e7aa      	b.n	8004110 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_RCC_ClockConfig+0x148>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	42ab      	cmp	r3, r5
 80041c4:	d909      	bls.n	80041da <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	b2ea      	uxtb	r2, r5
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_ClockConfig+0x148>)
 80041ca:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	42ab      	cmp	r3, r5
 80041d4:	d001      	beq.n	80041da <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 80041d6:	2001      	movs	r0, #1
 80041d8:	e79a      	b.n	8004110 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	f013 0f04 	tst.w	r3, #4
 80041e0:	d006      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e2:	4a14      	ldr	r2, [pc, #80]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 80041e4:	6893      	ldr	r3, [r2, #8]
 80041e6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80041ea:	68e1      	ldr	r1, [r4, #12]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f013 0f08 	tst.w	r3, #8
 80041f6:	d007      	beq.n	8004208 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f8:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 80041fa:	6893      	ldr	r3, [r2, #8]
 80041fc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004200:	6921      	ldr	r1, [r4, #16]
 8004202:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004206:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004208:	f7ff ff02 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x14c>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004214:	4a08      	ldr	r2, [pc, #32]	; (8004238 <HAL_RCC_ClockConfig+0x150>)
 8004216:	5cd3      	ldrb	r3, [r2, r3]
 8004218:	40d8      	lsrs	r0, r3
 800421a:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_RCC_ClockConfig+0x154>)
 800421c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800421e:	2000      	movs	r0, #0
 8004220:	f003 fba0 	bl	8007964 <HAL_InitTick>
  return HAL_OK;
 8004224:	2000      	movs	r0, #0
 8004226:	e773      	b.n	8004110 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004228:	2001      	movs	r0, #1
}
 800422a:	4770      	bx	lr
        return HAL_ERROR;
 800422c:	2001      	movs	r0, #1
 800422e:	e76f      	b.n	8004110 <HAL_RCC_ClockConfig+0x28>
 8004230:	40023c00 	.word	0x40023c00
 8004234:	40023800 	.word	0x40023800
 8004238:	0800e3d4 	.word	0x0800e3d4
 800423c:	20000064 	.word	0x20000064

08004240 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004240:	4b01      	ldr	r3, [pc, #4]	; (8004248 <HAL_RCC_GetHCLKFreq+0x8>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000064 	.word	0x20000064

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800424e:	f7ff fff7 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800425a:	4a03      	ldr	r2, [pc, #12]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800425c:	5cd3      	ldrb	r3, [r2, r3]
}
 800425e:	40d8      	lsrs	r0, r3
 8004260:	bd08      	pop	{r3, pc}
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800
 8004268:	0800e3e4 	.word	0x0800e3e4

0800426c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800426c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800426e:	f7ff ffe7 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800427a:	4a03      	ldr	r2, [pc, #12]	; (8004288 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800427c:	5cd3      	ldrb	r3, [r2, r3]
}
 800427e:	40d8      	lsrs	r0, r3
 8004280:	bd08      	pop	{r3, pc}
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800
 8004288:	0800e3e4 	.word	0x0800e3e4

0800428c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800428c:	230f      	movs	r3, #15
 800428e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_GetClockConfig+0x34>)
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	f002 0203 	and.w	r2, r2, #3
 8004298:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80042a0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80042a8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80042b2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_RCC_GetClockConfig+0x38>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	600b      	str	r3, [r1, #0]
}
 80042be:	4770      	bx	lr
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40023c00 	.word	0x40023c00

080042c8 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d03b      	beq.n	8004344 <HAL_SPI_Init+0x7c>
{
 80042cc:	b510      	push	{r4, lr}
 80042ce:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042d4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02e      	beq.n	800433a <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042dc:	2302      	movs	r3, #2
 80042de:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	6813      	ldr	r3, [r2, #0]
 80042e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ea:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80042ec:	6863      	ldr	r3, [r4, #4]
 80042ee:	68a2      	ldr	r2, [r4, #8]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	68e2      	ldr	r2, [r4, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	6922      	ldr	r2, [r4, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	6962      	ldr	r2, [r4, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	69a2      	ldr	r2, [r4, #24]
 8004300:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004304:	4313      	orrs	r3, r2
 8004306:	69e2      	ldr	r2, [r4, #28]
 8004308:	4313      	orrs	r3, r2
 800430a:	6a22      	ldr	r2, [r4, #32]
 800430c:	4313      	orrs	r3, r2
 800430e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004310:	6822      	ldr	r2, [r4, #0]
 8004312:	430b      	orrs	r3, r1
 8004314:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004316:	8b63      	ldrh	r3, [r4, #26]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800431e:	6822      	ldr	r2, [r4, #0]
 8004320:	430b      	orrs	r3, r1
 8004322:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004324:	6822      	ldr	r2, [r4, #0]
 8004326:	69d3      	ldr	r3, [r2, #28]
 8004328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800432c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800432e:	2000      	movs	r0, #0
 8004330:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004332:	2301      	movs	r3, #1
 8004334:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8004338:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800433a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800433e:	f003 fa91 	bl	8007864 <HAL_SPI_MspInit>
 8004342:	e7cb      	b.n	80042dc <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8004344:	2001      	movs	r0, #1
}
 8004346:	4770      	bx	lr

08004348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004348:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434a:	6a03      	ldr	r3, [r0, #32]
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004352:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004356:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004358:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435c:	680d      	ldr	r5, [r1, #0]
 800435e:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004362:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004366:	688b      	ldr	r3, [r1, #8]
 8004368:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800436a:	4d0d      	ldr	r5, [pc, #52]	; (80043a0 <TIM_OC1_SetConfig+0x58>)
 800436c:	42a8      	cmp	r0, r5
 800436e:	d009      	beq.n	8004384 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004370:	4d0b      	ldr	r5, [pc, #44]	; (80043a0 <TIM_OC1_SetConfig+0x58>)
 8004372:	42a8      	cmp	r0, r5
 8004374:	d00d      	beq.n	8004392 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004376:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004378:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800437a:	684a      	ldr	r2, [r1, #4]
 800437c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	6203      	str	r3, [r0, #32]
}
 8004380:	bc70      	pop	{r4, r5, r6}
 8004382:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004384:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004388:	68cc      	ldr	r4, [r1, #12]
 800438a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 800438c:	f023 0304 	bic.w	r3, r3, #4
 8004390:	e7ee      	b.n	8004370 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004392:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004396:	694c      	ldr	r4, [r1, #20]
 8004398:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 800439a:	698a      	ldr	r2, [r1, #24]
 800439c:	4322      	orrs	r2, r4
 800439e:	e7ea      	b.n	8004376 <TIM_OC1_SetConfig+0x2e>
 80043a0:	40010000 	.word	0x40010000

080043a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043a6:	6a03      	ldr	r3, [r0, #32]
 80043a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043b4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b8:	680d      	ldr	r5, [r1, #0]
 80043ba:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043c0:	688d      	ldr	r5, [r1, #8]
 80043c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043c6:	4d0f      	ldr	r5, [pc, #60]	; (8004404 <TIM_OC3_SetConfig+0x60>)
 80043c8:	42a8      	cmp	r0, r5
 80043ca:	d009      	beq.n	80043e0 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043cc:	4d0d      	ldr	r5, [pc, #52]	; (8004404 <TIM_OC3_SetConfig+0x60>)
 80043ce:	42a8      	cmp	r0, r5
 80043d0:	d00e      	beq.n	80043f0 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043d4:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043d6:	684a      	ldr	r2, [r1, #4]
 80043d8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043da:	6203      	str	r3, [r0, #32]
}
 80043dc:	bc30      	pop	{r4, r5}
 80043de:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80043e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043e4:	68cd      	ldr	r5, [r1, #12]
 80043e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ee:	e7ed      	b.n	80043cc <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043f0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043f4:	694d      	ldr	r5, [r1, #20]
 80043f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043fa:	698d      	ldr	r5, [r1, #24]
 80043fc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004400:	e7e7      	b.n	80043d2 <TIM_OC3_SetConfig+0x2e>
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000

08004408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800440a:	6a03      	ldr	r3, [r0, #32]
 800440c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004410:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004412:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004416:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004418:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441c:	680d      	ldr	r5, [r1, #0]
 800441e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004426:	688d      	ldr	r5, [r1, #8]
 8004428:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442c:	4d07      	ldr	r5, [pc, #28]	; (800444c <TIM_OC4_SetConfig+0x44>)
 800442e:	42a8      	cmp	r0, r5
 8004430:	d006      	beq.n	8004440 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004432:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004434:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004436:	684a      	ldr	r2, [r1, #4]
 8004438:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443a:	6203      	str	r3, [r0, #32]
}
 800443c:	bc30      	pop	{r4, r5}
 800443e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004440:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004444:	694d      	ldr	r5, [r1, #20]
 8004446:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800444a:	e7f2      	b.n	8004432 <TIM_OC4_SetConfig+0x2a>
 800444c:	40010000 	.word	0x40010000

08004450 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	2302      	movs	r3, #2
 8004452:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004456:	6802      	ldr	r2, [r0, #0]
 8004458:	6893      	ldr	r3, [r2, #8]
 800445a:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445e:	2b06      	cmp	r3, #6
 8004460:	d003      	beq.n	800446a <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800446a:	2301      	movs	r3, #1
 800446c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004470:	2000      	movs	r0, #0
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004474:	6802      	ldr	r2, [r0, #0]
 8004476:	68d3      	ldr	r3, [r2, #12]
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800447e:	6802      	ldr	r2, [r0, #0]
 8004480:	6893      	ldr	r3, [r2, #8]
 8004482:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004486:	2b06      	cmp	r3, #6
 8004488:	d003      	beq.n	8004492 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6013      	str	r3, [r2, #0]
}
 8004492:	2000      	movs	r0, #0
 8004494:	4770      	bx	lr

08004496 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004496:	4770      	bx	lr

08004498 <HAL_TIM_IC_CaptureCallback>:
}
 8004498:	4770      	bx	lr

0800449a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
}
 800449c:	4770      	bx	lr

0800449e <HAL_TIM_IRQHandler>:
{
 800449e:	b510      	push	{r4, lr}
 80044a0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a2:	6803      	ldr	r3, [r0, #0]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	f012 0f02 	tst.w	r2, #2
 80044aa:	d011      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	f012 0f02 	tst.w	r2, #2
 80044b2:	d00d      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b4:	f06f 0202 	mvn.w	r2, #2
 80044b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044be:	6803      	ldr	r3, [r0, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f013 0f03 	tst.w	r3, #3
 80044c6:	d070      	beq.n	80045aa <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80044c8:	f7ff ffe6 	bl	8004498 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044cc:	2300      	movs	r3, #0
 80044ce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	f012 0f04 	tst.w	r2, #4
 80044d8:	d012      	beq.n	8004500 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	f012 0f04 	tst.w	r2, #4
 80044e0:	d00e      	beq.n	8004500 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e2:	f06f 0204 	mvn.w	r2, #4
 80044e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044e8:	2302      	movs	r3, #2
 80044ea:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80044f4:	d05f      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	4620      	mov	r0, r4
 80044f8:	f7ff ffce 	bl	8004498 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fc:	2300      	movs	r3, #0
 80044fe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	f012 0f08 	tst.w	r2, #8
 8004508:	d012      	beq.n	8004530 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	f012 0f08 	tst.w	r2, #8
 8004510:	d00e      	beq.n	8004530 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004512:	f06f 0208 	mvn.w	r2, #8
 8004516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004518:	2304      	movs	r3, #4
 800451a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f013 0f03 	tst.w	r3, #3
 8004524:	d04e      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004526:	4620      	mov	r0, r4
 8004528:	f7ff ffb6 	bl	8004498 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452c:	2300      	movs	r3, #0
 800452e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	f012 0f10 	tst.w	r2, #16
 8004538:	d012      	beq.n	8004560 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	f012 0f10 	tst.w	r2, #16
 8004540:	d00e      	beq.n	8004560 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004542:	f06f 0210 	mvn.w	r2, #16
 8004546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004548:	2308      	movs	r3, #8
 800454a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004554:	d03d      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	4620      	mov	r0, r4
 8004558:	f7ff ff9e 	bl	8004498 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455c:	2300      	movs	r3, #0
 800455e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	f012 0f01 	tst.w	r2, #1
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	f012 0f01 	tst.w	r2, #1
 8004570:	d136      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	f012 0f80 	tst.w	r2, #128	; 0x80
 800457a:	d003      	beq.n	8004584 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004582:	d134      	bne.n	80045ee <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	f012 0f40 	tst.w	r2, #64	; 0x40
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004594:	d132      	bne.n	80045fc <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	f012 0f20 	tst.w	r2, #32
 800459e:	d003      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	f012 0f20 	tst.w	r2, #32
 80045a6:	d130      	bne.n	800460a <HAL_TIM_IRQHandler+0x16c>
}
 80045a8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	f7ff ff74 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7ff ff73 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
 80045b4:	e78a      	b.n	80044cc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7ff ff6d 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff ff6c 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
 80045c2:	e79b      	b.n	80044fc <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c4:	4620      	mov	r0, r4
 80045c6:	f7ff ff66 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ca:	4620      	mov	r0, r4
 80045cc:	f7ff ff65 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
 80045d0:	e7ac      	b.n	800452c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7ff ff5f 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	4620      	mov	r0, r4
 80045da:	f7ff ff5e 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
 80045de:	e7bd      	b.n	800455c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045e0:	f06f 0201 	mvn.w	r2, #1
 80045e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80045e6:	4620      	mov	r0, r4
 80045e8:	f003 f90c 	bl	8007804 <HAL_TIM_PeriodElapsedCallback>
 80045ec:	e7c1      	b.n	8004572 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045f4:	4620      	mov	r0, r4
 80045f6:	f000 f983 	bl	8004900 <HAL_TIMEx_BreakCallback>
 80045fa:	e7c3      	b.n	8004584 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004600:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff ff4a 	bl	800449c <HAL_TIM_TriggerCallback>
 8004608:	e7c5      	b.n	8004596 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800460a:	f06f 0220 	mvn.w	r2, #32
 800460e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004610:	4620      	mov	r0, r4
 8004612:	f000 f974 	bl	80048fe <HAL_TIMEx_CommutCallback>
}
 8004616:	e7c7      	b.n	80045a8 <HAL_TIM_IRQHandler+0x10a>

08004618 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004618:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800461a:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <TIM_Base_SetConfig+0x98>)
 800461c:	4290      	cmp	r0, r2
 800461e:	d00e      	beq.n	800463e <TIM_Base_SetConfig+0x26>
 8004620:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004624:	d00b      	beq.n	800463e <TIM_Base_SetConfig+0x26>
 8004626:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800462a:	4290      	cmp	r0, r2
 800462c:	d007      	beq.n	800463e <TIM_Base_SetConfig+0x26>
 800462e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004632:	4290      	cmp	r0, r2
 8004634:	d003      	beq.n	800463e <TIM_Base_SetConfig+0x26>
 8004636:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800463a:	4290      	cmp	r0, r2
 800463c:	d103      	bne.n	8004646 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800463e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004642:	684a      	ldr	r2, [r1, #4]
 8004644:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004646:	4a1a      	ldr	r2, [pc, #104]	; (80046b0 <TIM_Base_SetConfig+0x98>)
 8004648:	4290      	cmp	r0, r2
 800464a:	d01a      	beq.n	8004682 <TIM_Base_SetConfig+0x6a>
 800464c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004650:	d017      	beq.n	8004682 <TIM_Base_SetConfig+0x6a>
 8004652:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004656:	4290      	cmp	r0, r2
 8004658:	d013      	beq.n	8004682 <TIM_Base_SetConfig+0x6a>
 800465a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800465e:	4290      	cmp	r0, r2
 8004660:	d00f      	beq.n	8004682 <TIM_Base_SetConfig+0x6a>
 8004662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004666:	4290      	cmp	r0, r2
 8004668:	d00b      	beq.n	8004682 <TIM_Base_SetConfig+0x6a>
 800466a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800466e:	4290      	cmp	r0, r2
 8004670:	d007      	beq.n	8004682 <TIM_Base_SetConfig+0x6a>
 8004672:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004676:	4290      	cmp	r0, r2
 8004678:	d003      	beq.n	8004682 <TIM_Base_SetConfig+0x6a>
 800467a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800467e:	4290      	cmp	r0, r2
 8004680:	d103      	bne.n	800468a <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004686:	68ca      	ldr	r2, [r1, #12]
 8004688:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800468a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468e:	694a      	ldr	r2, [r1, #20]
 8004690:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004692:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004694:	688b      	ldr	r3, [r1, #8]
 8004696:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004698:	680b      	ldr	r3, [r1, #0]
 800469a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <TIM_Base_SetConfig+0x98>)
 800469e:	4298      	cmp	r0, r3
 80046a0:	d002      	beq.n	80046a8 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80046a2:	2301      	movs	r3, #1
 80046a4:	6143      	str	r3, [r0, #20]
}
 80046a6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80046a8:	690b      	ldr	r3, [r1, #16]
 80046aa:	6303      	str	r3, [r0, #48]	; 0x30
 80046ac:	e7f9      	b.n	80046a2 <TIM_Base_SetConfig+0x8a>
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000

080046b4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80046b4:	b1a8      	cbz	r0, 80046e2 <HAL_TIM_Base_Init+0x2e>
{
 80046b6:	b510      	push	{r4, lr}
 80046b8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80046ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80046be:	b15b      	cbz	r3, 80046d8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	2302      	movs	r3, #2
 80046c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c6:	1d21      	adds	r1, r4, #4
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	f7ff ffa5 	bl	8004618 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80046d4:	2000      	movs	r0, #0
}
 80046d6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80046d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80046dc:	f003 fa6a 	bl	8007bb4 <HAL_TIM_Base_MspInit>
 80046e0:	e7ee      	b.n	80046c0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80046e2:	2001      	movs	r0, #1
}
 80046e4:	4770      	bx	lr

080046e6 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80046e6:	b1a8      	cbz	r0, 8004714 <HAL_TIM_PWM_Init+0x2e>
{
 80046e8:	b510      	push	{r4, lr}
 80046ea:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80046ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80046f0:	b15b      	cbz	r3, 800470a <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80046f2:	2302      	movs	r3, #2
 80046f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	1d21      	adds	r1, r4, #4
 80046fa:	6820      	ldr	r0, [r4, #0]
 80046fc:	f7ff ff8c 	bl	8004618 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004700:	2301      	movs	r3, #1
 8004702:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004706:	2000      	movs	r0, #0
}
 8004708:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800470a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800470e:	f003 fa39 	bl	8007b84 <HAL_TIM_PWM_MspInit>
 8004712:	e7ee      	b.n	80046f2 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004714:	2001      	movs	r0, #1
}
 8004716:	4770      	bx	lr

08004718 <TIM_OC2_SetConfig>:
{
 8004718:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471a:	6a03      	ldr	r3, [r0, #32]
 800471c:	f023 0310 	bic.w	r3, r3, #16
 8004720:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004722:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004724:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004726:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004728:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800472c:	680d      	ldr	r5, [r1, #0]
 800472e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004732:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004736:	688d      	ldr	r5, [r1, #8]
 8004738:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800473c:	4d0e      	ldr	r5, [pc, #56]	; (8004778 <TIM_OC2_SetConfig+0x60>)
 800473e:	42a8      	cmp	r0, r5
 8004740:	d009      	beq.n	8004756 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004742:	4d0d      	ldr	r5, [pc, #52]	; (8004778 <TIM_OC2_SetConfig+0x60>)
 8004744:	42a8      	cmp	r0, r5
 8004746:	d00e      	beq.n	8004766 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8004748:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800474a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800474c:	684a      	ldr	r2, [r1, #4]
 800474e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004750:	6203      	str	r3, [r0, #32]
}
 8004752:	bc30      	pop	{r4, r5}
 8004754:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800475a:	68cd      	ldr	r5, [r1, #12]
 800475c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004764:	e7ed      	b.n	8004742 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004766:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800476a:	694d      	ldr	r5, [r1, #20]
 800476c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004770:	698d      	ldr	r5, [r1, #24]
 8004772:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004776:	e7e7      	b.n	8004748 <TIM_OC2_SetConfig+0x30>
 8004778:	40010000 	.word	0x40010000

0800477c <HAL_TIM_PWM_ConfigChannel>:
{
 800477c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800477e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d066      	beq.n	8004854 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004786:	460d      	mov	r5, r1
 8004788:	4604      	mov	r4, r0
 800478a:	2301      	movs	r3, #1
 800478c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	2302      	movs	r3, #2
 8004792:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8004796:	2a0c      	cmp	r2, #12
 8004798:	d81a      	bhi.n	80047d0 <HAL_TIM_PWM_ConfigChannel+0x54>
 800479a:	e8df f002 	tbb	[pc, r2]
 800479e:	1907      	.short	0x1907
 80047a0:	19201919 	.word	0x19201919
 80047a4:	19341919 	.word	0x19341919
 80047a8:	1919      	.short	0x1919
 80047aa:	47          	.byte	0x47
 80047ab:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047ac:	6800      	ldr	r0, [r0, #0]
 80047ae:	f7ff fdcb 	bl	8004348 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	6993      	ldr	r3, [r2, #24]
 80047b6:	f043 0308 	orr.w	r3, r3, #8
 80047ba:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	6993      	ldr	r3, [r2, #24]
 80047c0:	f023 0304 	bic.w	r3, r3, #4
 80047c4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	6993      	ldr	r3, [r2, #24]
 80047ca:	6929      	ldr	r1, [r5, #16]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80047d6:	2000      	movs	r0, #0
 80047d8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047de:	6800      	ldr	r0, [r0, #0]
 80047e0:	f7ff ff9a 	bl	8004718 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047e4:	6822      	ldr	r2, [r4, #0]
 80047e6:	6993      	ldr	r3, [r2, #24]
 80047e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047ec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	6993      	ldr	r3, [r2, #24]
 80047f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	6993      	ldr	r3, [r2, #24]
 80047fc:	6929      	ldr	r1, [r5, #16]
 80047fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004802:	6193      	str	r3, [r2, #24]
      break;
 8004804:	e7e4      	b.n	80047d0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004806:	6800      	ldr	r0, [r0, #0]
 8004808:	f7ff fdcc 	bl	80043a4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	69d3      	ldr	r3, [r2, #28]
 8004810:	f043 0308 	orr.w	r3, r3, #8
 8004814:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	69d3      	ldr	r3, [r2, #28]
 800481a:	f023 0304 	bic.w	r3, r3, #4
 800481e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	69d3      	ldr	r3, [r2, #28]
 8004824:	6929      	ldr	r1, [r5, #16]
 8004826:	430b      	orrs	r3, r1
 8004828:	61d3      	str	r3, [r2, #28]
      break;
 800482a:	e7d1      	b.n	80047d0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800482c:	6800      	ldr	r0, [r0, #0]
 800482e:	f7ff fdeb 	bl	8004408 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	69d3      	ldr	r3, [r2, #28]
 8004836:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800483a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	69d3      	ldr	r3, [r2, #28]
 8004840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004844:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	69d3      	ldr	r3, [r2, #28]
 800484a:	6929      	ldr	r1, [r5, #16]
 800484c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004850:	61d3      	str	r3, [r2, #28]
      break;
 8004852:	e7bd      	b.n	80047d0 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8004854:	2002      	movs	r0, #2
 8004856:	e7c1      	b.n	80047dc <HAL_TIM_PWM_ConfigChannel+0x60>

08004858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004858:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800485a:	f001 011f 	and.w	r1, r1, #31
 800485e:	2301      	movs	r3, #1
 8004860:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004864:	6a03      	ldr	r3, [r0, #32]
 8004866:	ea23 0304 	bic.w	r3, r3, r4
 800486a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800486c:	6a03      	ldr	r3, [r0, #32]
 800486e:	408a      	lsls	r2, r1
 8004870:	4313      	orrs	r3, r2
 8004872:	6203      	str	r3, [r0, #32]
}
 8004874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <HAL_TIM_PWM_Start>:
{
 800487c:	b510      	push	{r4, lr}
 800487e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004880:	2201      	movs	r2, #1
 8004882:	6800      	ldr	r0, [r0, #0]
 8004884:	f7ff ffe8 	bl	8004858 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	4a0a      	ldr	r2, [pc, #40]	; (80048b4 <HAL_TIM_PWM_Start+0x38>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00b      	beq.n	80048a8 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	6893      	ldr	r3, [r2, #8]
 8004894:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004898:	2b06      	cmp	r3, #6
 800489a:	d003      	beq.n	80048a4 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6013      	str	r3, [r2, #0]
}
 80048a4:	2000      	movs	r0, #0
 80048a6:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80048a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
 80048b0:	e7ee      	b.n	8004890 <HAL_TIM_PWM_Start+0x14>
 80048b2:	bf00      	nop
 80048b4:	40010000 	.word	0x40010000

080048b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d01c      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 80048c0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80048c2:	2601      	movs	r6, #1
 80048c4:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c8:	2302      	movs	r3, #2
 80048ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ce:	6802      	ldr	r2, [r0, #0]
 80048d0:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d2:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d4:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048d8:	680c      	ldr	r4, [r1, #0]
 80048da:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80048dc:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e0:	684b      	ldr	r3, [r1, #4]
 80048e2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e4:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048e6:	6802      	ldr	r2, [r0, #0]
 80048e8:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048ea:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ee:	2300      	movs	r3, #0
 80048f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80048f4:	4618      	mov	r0, r3
}
 80048f6:	bc70      	pop	{r4, r5, r6}
 80048f8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80048fa:	2002      	movs	r0, #2
}
 80048fc:	4770      	bx	lr

080048fe <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048fe:	4770      	bx	lr

08004900 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004900:	4770      	bx	lr

08004902 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004902:	6802      	ldr	r2, [r0, #0]
 8004904:	68d3      	ldr	r3, [r2, #12]
 8004906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800490a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490c:	6802      	ldr	r2, [r0, #0]
 800490e:	6953      	ldr	r3, [r2, #20]
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004916:	2320      	movs	r3, #32
 8004918:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800491c:	4770      	bx	lr

0800491e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800491e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b21      	cmp	r3, #33	; 0x21
 8004926:	d12a      	bne.n	800497e <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004928:	6883      	ldr	r3, [r0, #8]
 800492a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492e:	d016      	beq.n	800495e <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004930:	6a03      	ldr	r3, [r0, #32]
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	6202      	str	r2, [r0, #32]
 8004936:	781a      	ldrb	r2, [r3, #0]
 8004938:	6803      	ldr	r3, [r0, #0]
 800493a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800493c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800493e:	3b01      	subs	r3, #1
 8004940:	b29b      	uxth	r3, r3
 8004942:	84c3      	strh	r3, [r0, #38]	; 0x26
 8004944:	b9eb      	cbnz	r3, 8004982 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004946:	6802      	ldr	r2, [r0, #0]
 8004948:	68d3      	ldr	r3, [r2, #12]
 800494a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494e:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004950:	6802      	ldr	r2, [r0, #0]
 8004952:	68d3      	ldr	r3, [r2, #12]
 8004954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004958:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 800495a:	2000      	movs	r0, #0
 800495c:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800495e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	6802      	ldr	r2, [r0, #0]
 8004964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004968:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800496a:	6903      	ldr	r3, [r0, #16]
 800496c:	b91b      	cbnz	r3, 8004976 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 800496e:	6a03      	ldr	r3, [r0, #32]
 8004970:	3302      	adds	r3, #2
 8004972:	6203      	str	r3, [r0, #32]
 8004974:	e7e2      	b.n	800493c <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8004976:	6a03      	ldr	r3, [r0, #32]
 8004978:	3301      	adds	r3, #1
 800497a:	6203      	str	r3, [r0, #32]
 800497c:	e7de      	b.n	800493c <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 800497e:	2002      	movs	r0, #2
 8004980:	4770      	bx	lr
    return HAL_OK;
 8004982:	2000      	movs	r0, #0
  }
}
 8004984:	4770      	bx	lr
	...

08004988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800498c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800498e:	6802      	ldr	r2, [r0, #0]
 8004990:	6913      	ldr	r3, [r2, #16]
 8004992:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004996:	68c1      	ldr	r1, [r0, #12]
 8004998:	430b      	orrs	r3, r1
 800499a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800499c:	6883      	ldr	r3, [r0, #8]
 800499e:	6902      	ldr	r2, [r0, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	6942      	ldr	r2, [r0, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	69c2      	ldr	r2, [r0, #28]
 80049a8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80049aa:	6801      	ldr	r1, [r0, #0]
 80049ac:	68cb      	ldr	r3, [r1, #12]
 80049ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80049b2:	f023 030c 	bic.w	r3, r3, #12
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ba:	6802      	ldr	r2, [r0, #0]
 80049bc:	6953      	ldr	r3, [r2, #20]
 80049be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c2:	6981      	ldr	r1, [r0, #24]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c8:	69c3      	ldr	r3, [r0, #28]
 80049ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ce:	d060      	beq.n	8004a92 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049d0:	6803      	ldr	r3, [r0, #0]
 80049d2:	4ab8      	ldr	r2, [pc, #736]	; (8004cb4 <UART_SetConfig+0x32c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	f000 8114 	beq.w	8004c02 <UART_SetConfig+0x27a>
 80049da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049de:	4293      	cmp	r3, r2
 80049e0:	f000 810f 	beq.w	8004c02 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049e4:	f7ff fc32 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 80049e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049f0:	6865      	ldr	r5, [r4, #4]
 80049f2:	00ad      	lsls	r5, r5, #2
 80049f4:	fbb0 f5f5 	udiv	r5, r0, r5
 80049f8:	4faf      	ldr	r7, [pc, #700]	; (8004cb8 <UART_SetConfig+0x330>)
 80049fa:	fba7 3505 	umull	r3, r5, r7, r5
 80049fe:	096d      	lsrs	r5, r5, #5
 8004a00:	012e      	lsls	r6, r5, #4
 8004a02:	f7ff fc23 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004a06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a0e:	6865      	ldr	r5, [r4, #4]
 8004a10:	00ad      	lsls	r5, r5, #2
 8004a12:	fbb0 f9f5 	udiv	r9, r0, r5
 8004a16:	f7ff fc19 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004a1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a22:	6865      	ldr	r5, [r4, #4]
 8004a24:	00ad      	lsls	r5, r5, #2
 8004a26:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a2a:	fba7 3505 	umull	r3, r5, r7, r5
 8004a2e:	096d      	lsrs	r5, r5, #5
 8004a30:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004a34:	fb08 9515 	mls	r5, r8, r5, r9
 8004a38:	012d      	lsls	r5, r5, #4
 8004a3a:	3532      	adds	r5, #50	; 0x32
 8004a3c:	fba7 3505 	umull	r3, r5, r7, r5
 8004a40:	096d      	lsrs	r5, r5, #5
 8004a42:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004a46:	4435      	add	r5, r6
 8004a48:	f7ff fc00 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004a4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a54:	6866      	ldr	r6, [r4, #4]
 8004a56:	00b6      	lsls	r6, r6, #2
 8004a58:	fbb0 f6f6 	udiv	r6, r0, r6
 8004a5c:	f7ff fbf6 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004a60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a68:	6863      	ldr	r3, [r4, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004a70:	fba7 3000 	umull	r3, r0, r7, r0
 8004a74:	0940      	lsrs	r0, r0, #5
 8004a76:	fb08 6810 	mls	r8, r8, r0, r6
 8004a7a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004a7e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8004a82:	fba7 3708 	umull	r3, r7, r7, r8
 8004a86:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	442f      	add	r7, r5
 8004a8e:	609f      	str	r7, [r3, #8]
    }
  }
}
 8004a90:	e10d      	b.n	8004cae <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a92:	6803      	ldr	r3, [r0, #0]
 8004a94:	4a87      	ldr	r2, [pc, #540]	; (8004cb4 <UART_SetConfig+0x32c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d05b      	beq.n	8004b52 <UART_SetConfig+0x1ca>
 8004a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d057      	beq.n	8004b52 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004aa2:	f7ff fbd3 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004aa6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004aaa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004aae:	6865      	ldr	r5, [r4, #4]
 8004ab0:	006d      	lsls	r5, r5, #1
 8004ab2:	fbb0 f5f5 	udiv	r5, r0, r5
 8004ab6:	4f80      	ldr	r7, [pc, #512]	; (8004cb8 <UART_SetConfig+0x330>)
 8004ab8:	fba7 3505 	umull	r3, r5, r7, r5
 8004abc:	096d      	lsrs	r5, r5, #5
 8004abe:	012e      	lsls	r6, r5, #4
 8004ac0:	f7ff fbc4 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004ac4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ac8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004acc:	6865      	ldr	r5, [r4, #4]
 8004ace:	006d      	lsls	r5, r5, #1
 8004ad0:	fbb0 f9f5 	udiv	r9, r0, r5
 8004ad4:	f7ff fbba 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004ad8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004adc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ae0:	6865      	ldr	r5, [r4, #4]
 8004ae2:	006d      	lsls	r5, r5, #1
 8004ae4:	fbb0 f5f5 	udiv	r5, r0, r5
 8004ae8:	fba7 3505 	umull	r3, r5, r7, r5
 8004aec:	096d      	lsrs	r5, r5, #5
 8004aee:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004af2:	fb08 9515 	mls	r5, r8, r5, r9
 8004af6:	00ed      	lsls	r5, r5, #3
 8004af8:	3532      	adds	r5, #50	; 0x32
 8004afa:	fba7 3505 	umull	r3, r5, r7, r5
 8004afe:	096d      	lsrs	r5, r5, #5
 8004b00:	006d      	lsls	r5, r5, #1
 8004b02:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8004b06:	4435      	add	r5, r6
 8004b08:	f7ff fba0 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004b0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b14:	6866      	ldr	r6, [r4, #4]
 8004b16:	0076      	lsls	r6, r6, #1
 8004b18:	fbb0 f6f6 	udiv	r6, r0, r6
 8004b1c:	f7ff fb96 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004b20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b28:	6863      	ldr	r3, [r4, #4]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b30:	fba7 2303 	umull	r2, r3, r7, r3
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	fb08 6813 	mls	r8, r8, r3, r6
 8004b3a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004b3e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8004b42:	fba7 3708 	umull	r3, r7, r7, r8
 8004b46:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	442f      	add	r7, r5
 8004b4e:	609f      	str	r7, [r3, #8]
 8004b50:	e0ad      	b.n	8004cae <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004b52:	f7ff fb8b 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004b56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b5e:	6865      	ldr	r5, [r4, #4]
 8004b60:	006d      	lsls	r5, r5, #1
 8004b62:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b66:	4f54      	ldr	r7, [pc, #336]	; (8004cb8 <UART_SetConfig+0x330>)
 8004b68:	fba7 3505 	umull	r3, r5, r7, r5
 8004b6c:	096d      	lsrs	r5, r5, #5
 8004b6e:	012e      	lsls	r6, r5, #4
 8004b70:	f7ff fb7c 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004b74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b7c:	6865      	ldr	r5, [r4, #4]
 8004b7e:	006d      	lsls	r5, r5, #1
 8004b80:	fbb0 f9f5 	udiv	r9, r0, r5
 8004b84:	f7ff fb72 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004b88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b90:	6865      	ldr	r5, [r4, #4]
 8004b92:	006d      	lsls	r5, r5, #1
 8004b94:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b98:	fba7 3505 	umull	r3, r5, r7, r5
 8004b9c:	096d      	lsrs	r5, r5, #5
 8004b9e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004ba2:	fb08 9515 	mls	r5, r8, r5, r9
 8004ba6:	00ed      	lsls	r5, r5, #3
 8004ba8:	3532      	adds	r5, #50	; 0x32
 8004baa:	fba7 3505 	umull	r3, r5, r7, r5
 8004bae:	096d      	lsrs	r5, r5, #5
 8004bb0:	006d      	lsls	r5, r5, #1
 8004bb2:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8004bb6:	4435      	add	r5, r6
 8004bb8:	f7ff fb58 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004bbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004bc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004bc4:	6866      	ldr	r6, [r4, #4]
 8004bc6:	0076      	lsls	r6, r6, #1
 8004bc8:	fbb0 f6f6 	udiv	r6, r0, r6
 8004bcc:	f7ff fb4e 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004bd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004bd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004bd8:	6863      	ldr	r3, [r4, #4]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be0:	fba7 2303 	umull	r2, r3, r7, r3
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	fb08 6813 	mls	r8, r8, r3, r6
 8004bea:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004bee:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8004bf2:	fba7 3708 	umull	r3, r7, r7, r8
 8004bf6:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	442f      	add	r7, r5
 8004bfe:	609f      	str	r7, [r3, #8]
 8004c00:	e055      	b.n	8004cae <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004c02:	f7ff fb33 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004c06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c0e:	6865      	ldr	r5, [r4, #4]
 8004c10:	00ad      	lsls	r5, r5, #2
 8004c12:	fbb0 f5f5 	udiv	r5, r0, r5
 8004c16:	4f28      	ldr	r7, [pc, #160]	; (8004cb8 <UART_SetConfig+0x330>)
 8004c18:	fba7 3505 	umull	r3, r5, r7, r5
 8004c1c:	096d      	lsrs	r5, r5, #5
 8004c1e:	012e      	lsls	r6, r5, #4
 8004c20:	f7ff fb24 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004c24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c2c:	6865      	ldr	r5, [r4, #4]
 8004c2e:	00ad      	lsls	r5, r5, #2
 8004c30:	fbb0 f9f5 	udiv	r9, r0, r5
 8004c34:	f7ff fb1a 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004c38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c40:	6865      	ldr	r5, [r4, #4]
 8004c42:	00ad      	lsls	r5, r5, #2
 8004c44:	fbb0 f5f5 	udiv	r5, r0, r5
 8004c48:	fba7 3505 	umull	r3, r5, r7, r5
 8004c4c:	096d      	lsrs	r5, r5, #5
 8004c4e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004c52:	fb08 9515 	mls	r5, r8, r5, r9
 8004c56:	012d      	lsls	r5, r5, #4
 8004c58:	3532      	adds	r5, #50	; 0x32
 8004c5a:	fba7 3505 	umull	r3, r5, r7, r5
 8004c5e:	096d      	lsrs	r5, r5, #5
 8004c60:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004c64:	4435      	add	r5, r6
 8004c66:	f7ff fb01 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004c6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c72:	6866      	ldr	r6, [r4, #4]
 8004c74:	00b6      	lsls	r6, r6, #2
 8004c76:	fbb0 f6f6 	udiv	r6, r0, r6
 8004c7a:	f7ff faf7 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004c7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c86:	6863      	ldr	r3, [r4, #4]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c8e:	fba7 3000 	umull	r3, r0, r7, r0
 8004c92:	0940      	lsrs	r0, r0, #5
 8004c94:	fb08 6810 	mls	r8, r8, r0, r6
 8004c98:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004c9c:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8004ca0:	fba7 3708 	umull	r3, r7, r7, r8
 8004ca4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	442f      	add	r7, r5
 8004cac:	609f      	str	r7, [r3, #8]
}
 8004cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40011000 	.word	0x40011000
 8004cb8:	51eb851f 	.word	0x51eb851f

08004cbc <HAL_UART_Init>:
  if (huart == NULL)
 8004cbc:	b358      	cbz	r0, 8004d16 <HAL_UART_Init+0x5a>
{
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004cc6:	b30b      	cbz	r3, 8004d0c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004cc8:	2324      	movs	r3, #36	; 0x24
 8004cca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004cce:	6822      	ldr	r2, [r4, #0]
 8004cd0:	68d3      	ldr	r3, [r2, #12]
 8004cd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f7ff fe55 	bl	8004988 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cde:	6822      	ldr	r2, [r4, #0]
 8004ce0:	6913      	ldr	r3, [r2, #16]
 8004ce2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004ce6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce8:	6822      	ldr	r2, [r4, #0]
 8004cea:	6953      	ldr	r3, [r2, #20]
 8004cec:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004cf0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004cf2:	6822      	ldr	r2, [r4, #0]
 8004cf4:	68d3      	ldr	r3, [r2, #12]
 8004cf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cfa:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d00:	2320      	movs	r3, #32
 8004d02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d06:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8004d0a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004d0c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004d10:	f003 fca8 	bl	8008664 <HAL_UART_MspInit>
 8004d14:	e7d8      	b.n	8004cc8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004d16:	2001      	movs	r0, #1
}
 8004d18:	4770      	bx	lr

08004d1a <HAL_UART_TxCpltCallback>:
}
 8004d1a:	4770      	bx	lr

08004d1c <UART_EndTransmit_IT>:
{
 8004d1c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d1e:	6801      	ldr	r1, [r0, #0]
 8004d20:	68cb      	ldr	r3, [r1, #12]
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d26:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004d28:	2320      	movs	r3, #32
 8004d2a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004d2e:	f7ff fff4 	bl	8004d1a <HAL_UART_TxCpltCallback>
}
 8004d32:	2000      	movs	r0, #0
 8004d34:	bd08      	pop	{r3, pc}

08004d36 <HAL_UART_RxCpltCallback>:
}
 8004d36:	4770      	bx	lr

08004d38 <UART_Receive_IT>:
{
 8004d38:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d3a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b22      	cmp	r3, #34	; 0x22
 8004d42:	d145      	bne.n	8004dd0 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d44:	6883      	ldr	r3, [r0, #8]
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4a:	d00e      	beq.n	8004d6a <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d4c:	6903      	ldr	r3, [r0, #16]
 8004d4e:	bb03      	cbnz	r3, 8004d92 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d50:	6803      	ldr	r3, [r0, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d56:	1c59      	adds	r1, r3, #1
 8004d58:	6281      	str	r1, [r0, #40]	; 0x28
 8004d5a:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8004d5c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004d64:	b1f3      	cbz	r3, 8004da4 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8004d66:	2000      	movs	r0, #0
 8004d68:	e033      	b.n	8004dd2 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004d6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d6c:	6903      	ldr	r3, [r0, #16]
 8004d6e:	b943      	cbnz	r3, 8004d82 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d70:	6803      	ldr	r3, [r0, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d78:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8004d7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	6283      	str	r3, [r0, #40]	; 0x28
 8004d80:	e7ec      	b.n	8004d5c <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d82:	6803      	ldr	r3, [r0, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8004d8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	6283      	str	r3, [r0, #40]	; 0x28
 8004d90:	e7e4      	b.n	8004d5c <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d92:	6803      	ldr	r3, [r0, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004d98:	1c51      	adds	r1, r2, #1
 8004d9a:	6281      	str	r1, [r0, #40]	; 0x28
 8004d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da0:	7013      	strb	r3, [r2, #0]
 8004da2:	e7db      	b.n	8004d5c <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004da4:	6802      	ldr	r2, [r0, #0]
 8004da6:	68d3      	ldr	r3, [r2, #12]
 8004da8:	f023 0320 	bic.w	r3, r3, #32
 8004dac:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dae:	6802      	ldr	r2, [r0, #0]
 8004db0:	68d3      	ldr	r3, [r2, #12]
 8004db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004db8:	6802      	ldr	r2, [r0, #0]
 8004dba:	6953      	ldr	r3, [r2, #20]
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8004dc8:	f7ff ffb5 	bl	8004d36 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e000      	b.n	8004dd2 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8004dd0:	2002      	movs	r0, #2
}
 8004dd2:	bd08      	pop	{r3, pc}

08004dd4 <HAL_UART_ErrorCallback>:
}
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_UART_IRQHandler>:
{
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ddc:	6802      	ldr	r2, [r0, #0]
 8004dde:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004de0:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de2:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8004de4:	f013 000f 	ands.w	r0, r3, #15
 8004de8:	d105      	bne.n	8004df6 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dea:	f013 0f20 	tst.w	r3, #32
 8004dee:	d002      	beq.n	8004df6 <HAL_UART_IRQHandler+0x1e>
 8004df0:	f011 0f20 	tst.w	r1, #32
 8004df4:	d153      	bne.n	8004e9e <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d067      	beq.n	8004eca <HAL_UART_IRQHandler+0xf2>
 8004dfa:	f012 0201 	ands.w	r2, r2, #1
 8004dfe:	d102      	bne.n	8004e06 <HAL_UART_IRQHandler+0x2e>
 8004e00:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004e04:	d061      	beq.n	8004eca <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e06:	f013 0f01 	tst.w	r3, #1
 8004e0a:	d006      	beq.n	8004e1a <HAL_UART_IRQHandler+0x42>
 8004e0c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004e10:	d003      	beq.n	8004e1a <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e14:	f040 0001 	orr.w	r0, r0, #1
 8004e18:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e1a:	f013 0f04 	tst.w	r3, #4
 8004e1e:	d004      	beq.n	8004e2a <HAL_UART_IRQHandler+0x52>
 8004e20:	b11a      	cbz	r2, 8004e2a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e22:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e24:	f040 0002 	orr.w	r0, r0, #2
 8004e28:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e2a:	f013 0f02 	tst.w	r3, #2
 8004e2e:	d004      	beq.n	8004e3a <HAL_UART_IRQHandler+0x62>
 8004e30:	b11a      	cbz	r2, 8004e3a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e34:	f040 0004 	orr.w	r0, r0, #4
 8004e38:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e3a:	f013 0f08 	tst.w	r3, #8
 8004e3e:	d004      	beq.n	8004e4a <HAL_UART_IRQHandler+0x72>
 8004e40:	b11a      	cbz	r2, 8004e4a <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e42:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e44:	f042 0208 	orr.w	r2, r2, #8
 8004e48:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	d048      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e50:	f013 0f20 	tst.w	r3, #32
 8004e54:	d002      	beq.n	8004e5c <HAL_UART_IRQHandler+0x84>
 8004e56:	f011 0f20 	tst.w	r1, #32
 8004e5a:	d124      	bne.n	8004ea6 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e64:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e66:	f012 0f08 	tst.w	r2, #8
 8004e6a:	d100      	bne.n	8004e6e <HAL_UART_IRQHandler+0x96>
 8004e6c:	b33b      	cbz	r3, 8004ebe <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7ff fd47 	bl	8004902 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e7c:	d01b      	beq.n	8004eb6 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e84:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e88:	b18b      	cbz	r3, 8004eae <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <HAL_UART_IRQHandler+0x11c>)
 8004e8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e8e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004e90:	f7fd fafb 	bl	800248a <HAL_DMA_Abort_IT>
 8004e94:	b328      	cbz	r0, 8004ee2 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e96:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004e98:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004e9a:	4798      	blx	r3
 8004e9c:	e021      	b.n	8004ee2 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f7ff ff4a 	bl	8004d38 <UART_Receive_IT>
      return;
 8004ea4:	e01d      	b.n	8004ee2 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f7ff ff46 	bl	8004d38 <UART_Receive_IT>
 8004eac:	e7d6      	b.n	8004e5c <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f7ff ff90 	bl	8004dd4 <HAL_UART_ErrorCallback>
 8004eb4:	e015      	b.n	8004ee2 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f7ff ff8c 	bl	8004dd4 <HAL_UART_ErrorCallback>
 8004ebc:	e011      	b.n	8004ee2 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7ff ff88 	bl	8004dd4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004ec8:	e00b      	b.n	8004ee2 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004eca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ece:	d002      	beq.n	8004ed6 <HAL_UART_IRQHandler+0xfe>
 8004ed0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004ed4:	d106      	bne.n	8004ee4 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ed6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004eda:	d002      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x10a>
 8004edc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ee0:	d104      	bne.n	8004eec <HAL_UART_IRQHandler+0x114>
}
 8004ee2:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff fd1a 	bl	800491e <UART_Transmit_IT>
    return;
 8004eea:	e7fa      	b.n	8004ee2 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8004eec:	4620      	mov	r0, r4
 8004eee:	f7ff ff15 	bl	8004d1c <UART_EndTransmit_IT>
    return;
 8004ef2:	e7f6      	b.n	8004ee2 <HAL_UART_IRQHandler+0x10a>
 8004ef4:	08004ef9 	.word	0x08004ef9

08004ef8 <UART_DMAAbortOnError>:
{
 8004ef8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004efa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f00:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004f02:	f7ff ff67 	bl	8004dd4 <HAL_UART_ErrorCallback>
}
 8004f06:	bd08      	pop	{r3, pc}

08004f08 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8004f08:	2884      	cmp	r0, #132	; 0x84
 8004f0a:	d001      	beq.n	8004f10 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8004f0c:	3003      	adds	r0, #3
 8004f0e:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f10:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8004f12:	4770      	bx	lr

08004f14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f14:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004f16:	f001 f86d 	bl	8005ff4 <vTaskStartScheduler>
  
  return osOK;
}
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	bd08      	pop	{r3, pc}

08004f1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f22:	b087      	sub	sp, #28
 8004f24:	4604      	mov	r4, r0
 8004f26:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f28:	6945      	ldr	r5, [r0, #20]
 8004f2a:	b1a5      	cbz	r5, 8004f56 <osThreadCreate+0x38>
 8004f2c:	6986      	ldr	r6, [r0, #24]
 8004f2e:	b196      	cbz	r6, 8004f56 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f30:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8004f34:	f8d0 9000 	ldr.w	r9, [r0]
 8004f38:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8004f3c:	f7ff ffe4 	bl	8004f08 <makeFreeRtosPriority>
 8004f40:	6922      	ldr	r2, [r4, #16]
 8004f42:	9602      	str	r6, [sp, #8]
 8004f44:	9501      	str	r5, [sp, #4]
 8004f46:	9000      	str	r0, [sp, #0]
 8004f48:	463b      	mov	r3, r7
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	f000 ffe5 	bl	8005f1c <xTaskCreateStatic>
 8004f52:	9005      	str	r0, [sp, #20]
 8004f54:	e013      	b.n	8004f7e <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f56:	6865      	ldr	r5, [r4, #4]
 8004f58:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f5a:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f5e:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8004f62:	f7ff ffd1 	bl	8004f08 <makeFreeRtosPriority>
 8004f66:	ab05      	add	r3, sp, #20
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	9000      	str	r0, [sp, #0]
 8004f6c:	463b      	mov	r3, r7
 8004f6e:	fa1f f288 	uxth.w	r2, r8
 8004f72:	4631      	mov	r1, r6
 8004f74:	4628      	mov	r0, r5
 8004f76:	f001 f80a 	bl	8005f8e <xTaskCreate>
 8004f7a:	2801      	cmp	r0, #1
 8004f7c:	d103      	bne.n	8004f86 <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f7e:	9805      	ldr	r0, [sp, #20]
}
 8004f80:	b007      	add	sp, #28
 8004f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8004f86:	2000      	movs	r0, #0
 8004f88:	e7fa      	b.n	8004f80 <osThreadCreate+0x62>

08004f8a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f8a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	b900      	cbnz	r0, 8004f92 <osDelay+0x8>
 8004f90:	2301      	movs	r3, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f001 f9a6 	bl	80062e4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f98:	2000      	movs	r0, #0
 8004f9a:	bd08      	pop	{r3, pc}

08004f9c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004f9c:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004f9e:	6841      	ldr	r1, [r0, #4]
 8004fa0:	b119      	cbz	r1, 8004faa <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	f000 fbb3 	bl	800570e <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004fa8:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8004faa:	2001      	movs	r0, #1
 8004fac:	f000 fba4 	bl	80056f8 <xQueueCreateMutex>
 8004fb0:	e7fa      	b.n	8004fa8 <osMutexCreate+0xc>

08004fb2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb2:	f100 0308 	add.w	r3, r0, #8
 8004fb6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbc:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fbe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fc6:	4770      	bx	lr

08004fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fcc:	4770      	bx	lr

08004fce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fce:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fd0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fda:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fdc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004fde:	6803      	ldr	r3, [r0, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	6003      	str	r3, [r0, #0]
}
 8004fe4:	4770      	bx	lr

08004fe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fe8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fea:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004fee:	d002      	beq.n	8004ff6 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ff0:	f100 0208 	add.w	r2, r0, #8
 8004ff4:	e002      	b.n	8004ffc <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ff6:	6902      	ldr	r2, [r0, #16]
 8004ff8:	e004      	b.n	8005004 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6853      	ldr	r3, [r2, #4]
 8004ffe:	681c      	ldr	r4, [r3, #0]
 8005000:	42ac      	cmp	r4, r5
 8005002:	d9fa      	bls.n	8004ffa <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005004:	6853      	ldr	r3, [r2, #4]
 8005006:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005008:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800500a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800500c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800500e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005010:	6803      	ldr	r3, [r0, #0]
 8005012:	3301      	adds	r3, #1
 8005014:	6003      	str	r3, [r0, #0]
}
 8005016:	bc30      	pop	{r4, r5}
 8005018:	4770      	bx	lr

0800501a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800501a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800501c:	6842      	ldr	r2, [r0, #4]
 800501e:	6881      	ldr	r1, [r0, #8]
 8005020:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005022:	6882      	ldr	r2, [r0, #8]
 8005024:	6841      	ldr	r1, [r0, #4]
 8005026:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	4282      	cmp	r2, r0
 800502c:	d006      	beq.n	800503c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800502e:	2200      	movs	r2, #0
 8005030:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	3a01      	subs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005038:	6818      	ldr	r0, [r3, #0]
}
 800503a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800503c:	6882      	ldr	r2, [r0, #8]
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	e7f5      	b.n	800502e <uxListRemove+0x14>

08005042 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005042:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005044:	b123      	cbz	r3, 8005050 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005046:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	f1c0 0007 	rsb	r0, r0, #7
 800504e:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005050:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8005052:	4770      	bx	lr

08005054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005054:	b510      	push	{r4, lr}
 8005056:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005058:	f001 fcb4 	bl	80069c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800505c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800505e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005060:	429a      	cmp	r2, r3
 8005062:	d004      	beq.n	800506e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8005064:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8005066:	f001 fccf 	bl	8006a08 <vPortExitCritical>

	return xReturn;
}
 800506a:	4620      	mov	r0, r4
 800506c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800506e:	2401      	movs	r4, #1
 8005070:	e7f9      	b.n	8005066 <prvIsQueueFull+0x12>

08005072 <prvIsQueueEmpty>:
{
 8005072:	b510      	push	{r4, lr}
 8005074:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005076:	f001 fca5 	bl	80069c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800507a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800507c:	b123      	cbz	r3, 8005088 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800507e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005080:	f001 fcc2 	bl	8006a08 <vPortExitCritical>
}
 8005084:	4620      	mov	r0, r4
 8005086:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8005088:	2401      	movs	r4, #1
 800508a:	e7f9      	b.n	8005080 <prvIsQueueEmpty+0xe>

0800508c <prvCopyDataToQueue>:
{
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	4604      	mov	r4, r0
 8005090:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005092:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005094:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005096:	b95a      	cbnz	r2, 80050b0 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005098:	6803      	ldr	r3, [r0, #0]
 800509a:	b11b      	cbz	r3, 80050a4 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800509c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800509e:	3501      	adds	r5, #1
 80050a0:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80050a4:	6840      	ldr	r0, [r0, #4]
 80050a6:	f001 fb1b 	bl	80066e0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	e7f6      	b.n	800509e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80050b0:	b96e      	cbnz	r6, 80050ce <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80050b2:	6880      	ldr	r0, [r0, #8]
 80050b4:	f004 ff03 	bl	8009ebe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80050b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80050ba:	68a3      	ldr	r3, [r4, #8]
 80050bc:	4413      	add	r3, r2
 80050be:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050c0:	6862      	ldr	r2, [r4, #4]
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d319      	bcc.n	80050fa <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80050ca:	2000      	movs	r0, #0
 80050cc:	e7e7      	b.n	800509e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ce:	68c0      	ldr	r0, [r0, #12]
 80050d0:	f004 fef5 	bl	8009ebe <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80050d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80050d6:	4252      	negs	r2, r2
 80050d8:	68e3      	ldr	r3, [r4, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050de:	6821      	ldr	r1, [r4, #0]
 80050e0:	428b      	cmp	r3, r1
 80050e2:	d202      	bcs.n	80050ea <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80050e4:	6863      	ldr	r3, [r4, #4]
 80050e6:	441a      	add	r2, r3
 80050e8:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80050ea:	2e02      	cmp	r6, #2
 80050ec:	d001      	beq.n	80050f2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80050ee:	2000      	movs	r0, #0
 80050f0:	e7d5      	b.n	800509e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050f2:	b125      	cbz	r5, 80050fe <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80050f4:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80050f6:	2000      	movs	r0, #0
 80050f8:	e7d1      	b.n	800509e <prvCopyDataToQueue+0x12>
 80050fa:	2000      	movs	r0, #0
 80050fc:	e7cf      	b.n	800509e <prvCopyDataToQueue+0x12>
 80050fe:	2000      	movs	r0, #0
 8005100:	e7cd      	b.n	800509e <prvCopyDataToQueue+0x12>

08005102 <prvUnlockQueue>:
{
 8005102:	b538      	push	{r3, r4, r5, lr}
 8005104:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005106:	f001 fc5d 	bl	80069c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800510a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800510e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005110:	e003      	b.n	800511a <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005112:	f001 fa3d 	bl	8006590 <vTaskMissedYield>
			--cTxLock;
 8005116:	3c01      	subs	r4, #1
 8005118:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800511a:	2c00      	cmp	r4, #0
 800511c:	dd08      	ble.n	8005130 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800511e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005120:	b133      	cbz	r3, 8005130 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005122:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005126:	f001 f993 	bl	8006450 <xTaskRemoveFromEventList>
 800512a:	2800      	cmp	r0, #0
 800512c:	d0f3      	beq.n	8005116 <prvUnlockQueue+0x14>
 800512e:	e7f0      	b.n	8005112 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8005130:	23ff      	movs	r3, #255	; 0xff
 8005132:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005136:	f001 fc67 	bl	8006a08 <vPortExitCritical>
	taskENTER_CRITICAL();
 800513a:	f001 fc43 	bl	80069c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800513e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005142:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005144:	e003      	b.n	800514e <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8005146:	f001 fa23 	bl	8006590 <vTaskMissedYield>
				--cRxLock;
 800514a:	3c01      	subs	r4, #1
 800514c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800514e:	2c00      	cmp	r4, #0
 8005150:	dd08      	ble.n	8005164 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005152:	692b      	ldr	r3, [r5, #16]
 8005154:	b133      	cbz	r3, 8005164 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005156:	f105 0010 	add.w	r0, r5, #16
 800515a:	f001 f979 	bl	8006450 <xTaskRemoveFromEventList>
 800515e:	2800      	cmp	r0, #0
 8005160:	d0f3      	beq.n	800514a <prvUnlockQueue+0x48>
 8005162:	e7f0      	b.n	8005146 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8005164:	23ff      	movs	r3, #255	; 0xff
 8005166:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800516a:	f001 fc4d 	bl	8006a08 <vPortExitCritical>
}
 800516e:	bd38      	pop	{r3, r4, r5, pc}

08005170 <xQueueGenericReset>:
{
 8005170:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005172:	b940      	cbnz	r0, 8005186 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	e7fe      	b.n	8005184 <xQueueGenericReset+0x14>
 8005186:	4604      	mov	r4, r0
 8005188:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800518a:	f001 fc1b 	bl	80069c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800518e:	6821      	ldr	r1, [r4, #0]
 8005190:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005194:	fb03 1002 	mla	r0, r3, r2, r1
 8005198:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800519a:	2000      	movs	r0, #0
 800519c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800519e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80051a0:	3a01      	subs	r2, #1
 80051a2:	fb02 1303 	mla	r3, r2, r3, r1
 80051a6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051a8:	23ff      	movs	r3, #255	; 0xff
 80051aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80051b2:	b9a5      	cbnz	r5, 80051de <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	b91b      	cbnz	r3, 80051c0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80051b8:	f001 fc26 	bl	8006a08 <vPortExitCritical>
}
 80051bc:	2001      	movs	r0, #1
 80051be:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051c0:	f104 0010 	add.w	r0, r4, #16
 80051c4:	f001 f944 	bl	8006450 <xTaskRemoveFromEventList>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d0f5      	beq.n	80051b8 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 80051cc:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <xQueueGenericReset+0x80>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	e7ec      	b.n	80051b8 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051de:	f104 0010 	add.w	r0, r4, #16
 80051e2:	f7ff fee6 	bl	8004fb2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051ea:	f7ff fee2 	bl	8004fb2 <vListInitialise>
 80051ee:	e7e3      	b.n	80051b8 <xQueueGenericReset+0x48>
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <prvInitialiseNewQueue>:
{
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	4605      	mov	r5, r0
 80051f8:	461e      	mov	r6, r3
 80051fa:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80051fc:	460b      	mov	r3, r1
 80051fe:	b9b1      	cbnz	r1, 800522e <prvInitialiseNewQueue+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005200:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005202:	63e5      	str	r5, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005204:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005206:	2101      	movs	r1, #1
 8005208:	4620      	mov	r0, r4
 800520a:	f7ff ffb1 	bl	8005170 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800520e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 8005212:	4b1f      	ldr	r3, [pc, #124]	; (8005290 <prvInitialiseNewQueue+0x9c>)
 8005214:	8819      	ldrh	r1, [r3, #0]
 8005216:	4620      	mov	r0, r4
 8005218:	f002 fda4 	bl	8007d64 <prvTraceSetQueueNumberHigh16>
 800521c:	f002 fdca 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8005220:	f002 fd8a 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <prvInitialiseNewQueue+0xa0>)
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	4218      	tst	r0, r3
 800522a:	d102      	bne.n	8005232 <prvInitialiseNewQueue+0x3e>
}
 800522c:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800522e:	6022      	str	r2, [r4, #0]
 8005230:	e7e7      	b.n	8005202 <prvInitialiseNewQueue+0xe>
	traceQUEUE_CREATE( pxNewQueue );
 8005232:	4620      	mov	r0, r4
 8005234:	f002 fd91 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 8005238:	4b16      	ldr	r3, [pc, #88]	; (8005294 <prvInitialiseNewQueue+0xa0>)
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	4218      	tst	r0, r3
 800523e:	d0f5      	beq.n	800522c <prvInitialiseNewQueue+0x38>
 8005240:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005244:	2b04      	cmp	r3, #4
 8005246:	d8f1      	bhi.n	800522c <prvInitialiseNewQueue+0x38>
 8005248:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <prvInitialiseNewQueue+0x5c>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	08005265 	.word	0x08005265
 8005254:	0800527b 	.word	0x0800527b
 8005258:	0800522d 	.word	0x0800522d
 800525c:	08005271 	.word	0x08005271
 8005260:	08005285 	.word	0x08005285
 8005264:	462a      	mov	r2, r5
 8005266:	4621      	mov	r1, r4
 8005268:	2011      	movs	r0, #17
 800526a:	f003 f9a9 	bl	80085c0 <prvTraceStoreEvent2>
 800526e:	e7dd      	b.n	800522c <prvInitialiseNewQueue+0x38>
 8005270:	4621      	mov	r1, r4
 8005272:	2012      	movs	r0, #18
 8005274:	f003 f96e 	bl	8008554 <prvTraceStoreEvent1>
 8005278:	e7d8      	b.n	800522c <prvInitialiseNewQueue+0x38>
 800527a:	4621      	mov	r1, r4
 800527c:	2013      	movs	r0, #19
 800527e:	f003 f969 	bl	8008554 <prvTraceStoreEvent1>
 8005282:	e7d3      	b.n	800522c <prvInitialiseNewQueue+0x38>
 8005284:	4621      	mov	r1, r4
 8005286:	2017      	movs	r0, #23
 8005288:	f003 f964 	bl	8008554 <prvTraceStoreEvent1>
}
 800528c:	e7ce      	b.n	800522c <prvInitialiseNewQueue+0x38>
 800528e:	bf00      	nop
 8005290:	20000068 	.word	0x20000068
 8005294:	2000006a 	.word	0x2000006a

08005298 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005298:	b940      	cbnz	r0, 80052ac <xQueueGenericCreateStatic+0x14>
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	e7fe      	b.n	80052aa <xQueueGenericCreateStatic+0x12>
	{
 80052ac:	b510      	push	{r4, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80052b2:	b153      	cbz	r3, 80052ca <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052b4:	b192      	cbz	r2, 80052dc <xQueueGenericCreateStatic+0x44>
 80052b6:	b989      	cbnz	r1, 80052dc <xQueueGenericCreateStatic+0x44>
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	e7fe      	b.n	80052c8 <xQueueGenericCreateStatic+0x30>
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	e7fe      	b.n	80052da <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052dc:	b94a      	cbnz	r2, 80052f2 <xQueueGenericCreateStatic+0x5a>
 80052de:	b141      	cbz	r1, 80052f2 <xQueueGenericCreateStatic+0x5a>
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	e7fe      	b.n	80052f0 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052f2:	2050      	movs	r0, #80	; 0x50
 80052f4:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052f6:	9803      	ldr	r0, [sp, #12]
 80052f8:	2850      	cmp	r0, #80	; 0x50
 80052fa:	d008      	beq.n	800530e <xQueueGenericCreateStatic+0x76>
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	e7fe      	b.n	800530c <xQueueGenericCreateStatic+0x74>
 800530e:	4620      	mov	r0, r4
 8005310:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005312:	2301      	movs	r3, #1
 8005314:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005318:	9400      	str	r4, [sp, #0]
 800531a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800531e:	f7ff ff69 	bl	80051f4 <prvInitialiseNewQueue>
	}
 8005322:	4620      	mov	r0, r4
 8005324:	b004      	add	sp, #16
 8005326:	bd10      	pop	{r4, pc}

08005328 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005328:	b940      	cbnz	r0, 800533c <xQueueGenericCreate+0x14>
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	e7fe      	b.n	800533a <xQueueGenericCreate+0x12>
	{
 800533c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533e:	b083      	sub	sp, #12
 8005340:	4604      	mov	r4, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8005342:	b111      	cbz	r1, 800534a <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005344:	fb01 f000 	mul.w	r0, r1, r0
 8005348:	e000      	b.n	800534c <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 800534a:	2000      	movs	r0, #0
 800534c:	4615      	mov	r5, r2
 800534e:	460e      	mov	r6, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005350:	3050      	adds	r0, #80	; 0x50
 8005352:	f001 fced 	bl	8006d30 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005356:	4607      	mov	r7, r0
 8005358:	b168      	cbz	r0, 8005376 <xQueueGenericCreate+0x4e>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800535a:	2300      	movs	r3, #0
 800535c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005360:	9000      	str	r0, [sp, #0]
 8005362:	462b      	mov	r3, r5
 8005364:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8005368:	4631      	mov	r1, r6
 800536a:	4620      	mov	r0, r4
 800536c:	f7ff ff42 	bl	80051f4 <prvInitialiseNewQueue>
	}
 8005370:	4638      	mov	r0, r7
 8005372:	b003      	add	sp, #12
 8005374:	bdf0      	pop	{r4, r5, r6, r7, pc}
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8005376:	f002 fd1d 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 800537a:	f002 fcdd 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <xQueueGenericCreate+0xa8>)
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	4218      	tst	r0, r3
 8005384:	d0f4      	beq.n	8005370 <xQueueGenericCreate+0x48>
 8005386:	2d04      	cmp	r5, #4
 8005388:	d8f2      	bhi.n	8005370 <xQueueGenericCreate+0x48>
 800538a:	a301      	add	r3, pc, #4	; (adr r3, 8005390 <xQueueGenericCreate+0x68>)
 800538c:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8005390:	080053a5 	.word	0x080053a5
 8005394:	080053bb 	.word	0x080053bb
 8005398:	08005371 	.word	0x08005371
 800539c:	080053b1 	.word	0x080053b1
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	4622      	mov	r2, r4
 80053a6:	2100      	movs	r1, #0
 80053a8:	2041      	movs	r0, #65	; 0x41
 80053aa:	f003 f909 	bl	80085c0 <prvTraceStoreEvent2>
 80053ae:	e7df      	b.n	8005370 <xQueueGenericCreate+0x48>
 80053b0:	2100      	movs	r1, #0
 80053b2:	2042      	movs	r0, #66	; 0x42
 80053b4:	f003 f8ce 	bl	8008554 <prvTraceStoreEvent1>
 80053b8:	e7da      	b.n	8005370 <xQueueGenericCreate+0x48>
 80053ba:	2100      	movs	r1, #0
 80053bc:	2043      	movs	r0, #67	; 0x43
 80053be:	f003 f8c9 	bl	8008554 <prvTraceStoreEvent1>
 80053c2:	e7d5      	b.n	8005370 <xQueueGenericCreate+0x48>
 80053c4:	2100      	movs	r1, #0
 80053c6:	2047      	movs	r0, #71	; 0x47
 80053c8:	f003 f8c4 	bl	8008554 <prvTraceStoreEvent1>
		return pxNewQueue;
 80053cc:	e7d0      	b.n	8005370 <xQueueGenericCreate+0x48>
 80053ce:	bf00      	nop
 80053d0:	2000006a 	.word	0x2000006a

080053d4 <xQueueGenericSend>:
{
 80053d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d6:	b085      	sub	sp, #20
 80053d8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80053da:	b160      	cbz	r0, 80053f6 <xQueueGenericSend+0x22>
 80053dc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053de:	b999      	cbnz	r1, 8005408 <xQueueGenericSend+0x34>
 80053e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80053e2:	b18a      	cbz	r2, 8005408 <xQueueGenericSend+0x34>
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	e7fe      	b.n	80053f4 <xQueueGenericSend+0x20>
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	e7fe      	b.n	8005406 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005408:	2b02      	cmp	r3, #2
 800540a:	d10b      	bne.n	8005424 <xQueueGenericSend+0x50>
 800540c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800540e:	2a01      	cmp	r2, #1
 8005410:	d008      	beq.n	8005424 <xQueueGenericSend+0x50>
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	e7fe      	b.n	8005422 <xQueueGenericSend+0x4e>
 8005424:	461d      	mov	r5, r3
 8005426:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005428:	f001 f8c6 	bl	80065b8 <xTaskGetSchedulerState>
 800542c:	b950      	cbnz	r0, 8005444 <xQueueGenericSend+0x70>
 800542e:	9b01      	ldr	r3, [sp, #4]
 8005430:	b153      	cbz	r3, 8005448 <xQueueGenericSend+0x74>
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	e7fe      	b.n	8005442 <xQueueGenericSend+0x6e>
 8005444:	2700      	movs	r7, #0
 8005446:	e0bd      	b.n	80055c4 <xQueueGenericSend+0x1f0>
 8005448:	2700      	movs	r7, #0
 800544a:	e0bb      	b.n	80055c4 <xQueueGenericSend+0x1f0>
				traceQUEUE_SEND( pxQueue );
 800544c:	f002 fcb2 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8005450:	f002 fc72 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8005454:	4ba0      	ldr	r3, [pc, #640]	; (80056d8 <xQueueGenericSend+0x304>)
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	4218      	tst	r0, r3
 800545a:	d111      	bne.n	8005480 <xQueueGenericSend+0xac>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800545c:	462a      	mov	r2, r5
 800545e:	4631      	mov	r1, r6
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff fe13 	bl	800508c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005468:	bb83      	cbnz	r3, 80054cc <xQueueGenericSend+0xf8>
					else if( xYieldRequired != pdFALSE )
 800546a:	2800      	cmp	r0, #0
 800546c:	d03b      	beq.n	80054e6 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 800546e:	4b9b      	ldr	r3, [pc, #620]	; (80056dc <xQueueGenericSend+0x308>)
 8005470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	e032      	b.n	80054e6 <xQueueGenericSend+0x112>
				traceQUEUE_SEND( pxQueue );
 8005480:	4620      	mov	r0, r4
 8005482:	f002 fc6a 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 8005486:	4b94      	ldr	r3, [pc, #592]	; (80056d8 <xQueueGenericSend+0x304>)
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	4218      	tst	r0, r3
 800548c:	d0e6      	beq.n	800545c <xQueueGenericSend+0x88>
 800548e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005492:	2b04      	cmp	r3, #4
 8005494:	d8e2      	bhi.n	800545c <xQueueGenericSend+0x88>
 8005496:	e8df f003 	tbb	[pc, r3]
 800549a:	1403      	.short	0x1403
 800549c:	0d0d      	.short	0x0d0d
 800549e:	14          	.byte	0x14
 800549f:	00          	.byte	0x00
 80054a0:	b935      	cbnz	r5, 80054b0 <xQueueGenericSend+0xdc>
 80054a2:	2050      	movs	r0, #80	; 0x50
 80054a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80054a6:	3201      	adds	r2, #1
 80054a8:	4621      	mov	r1, r4
 80054aa:	f003 f889 	bl	80085c0 <prvTraceStoreEvent2>
 80054ae:	e7d5      	b.n	800545c <xQueueGenericSend+0x88>
 80054b0:	20c0      	movs	r0, #192	; 0xc0
 80054b2:	e7f7      	b.n	80054a4 <xQueueGenericSend+0xd0>
 80054b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80054b6:	3201      	adds	r2, #1
 80054b8:	4621      	mov	r1, r4
 80054ba:	2051      	movs	r0, #81	; 0x51
 80054bc:	f003 f880 	bl	80085c0 <prvTraceStoreEvent2>
 80054c0:	e7cc      	b.n	800545c <xQueueGenericSend+0x88>
 80054c2:	4621      	mov	r1, r4
 80054c4:	2052      	movs	r0, #82	; 0x52
 80054c6:	f003 f845 	bl	8008554 <prvTraceStoreEvent1>
 80054ca:	e7c7      	b.n	800545c <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054d0:	f000 ffbe 	bl	8006450 <xTaskRemoveFromEventList>
 80054d4:	b138      	cbz	r0, 80054e6 <xQueueGenericSend+0x112>
							queueYIELD_IF_USING_PREEMPTION();
 80054d6:	4b81      	ldr	r3, [pc, #516]	; (80056dc <xQueueGenericSend+0x308>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80054e6:	f001 fa8f 	bl	8006a08 <vPortExitCritical>
				return pdPASS;
 80054ea:	2001      	movs	r0, #1
}
 80054ec:	b005      	add	sp, #20
 80054ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80054f0:	f001 fa8a 	bl	8006a08 <vPortExitCritical>
					traceQUEUE_SEND_FAILED( pxQueue );
 80054f4:	f002 fc5e 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 80054f8:	f002 fc1e 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 80054fc:	4b76      	ldr	r3, [pc, #472]	; (80056d8 <xQueueGenericSend+0x304>)
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	4218      	tst	r0, r3
 8005502:	f000 80dd 	beq.w	80056c0 <xQueueGenericSend+0x2ec>
 8005506:	4620      	mov	r0, r4
 8005508:	f002 fc27 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 800550c:	4b72      	ldr	r3, [pc, #456]	; (80056d8 <xQueueGenericSend+0x304>)
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	4218      	tst	r0, r3
 8005512:	f000 80d7 	beq.w	80056c4 <xQueueGenericSend+0x2f0>
 8005516:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800551a:	2b04      	cmp	r3, #4
 800551c:	f200 80d4 	bhi.w	80056c8 <xQueueGenericSend+0x2f4>
 8005520:	e8df f003 	tbb	[pc, r3]
 8005524:	0d0d1403 	.word	0x0d0d1403
 8005528:	14          	.byte	0x14
 8005529:	00          	.byte	0x00
 800552a:	b935      	cbnz	r5, 800553a <xQueueGenericSend+0x166>
 800552c:	2053      	movs	r0, #83	; 0x53
 800552e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005530:	4621      	mov	r1, r4
 8005532:	f003 f845 	bl	80085c0 <prvTraceStoreEvent2>
					return errQUEUE_FULL;
 8005536:	2000      	movs	r0, #0
					traceQUEUE_SEND_FAILED( pxQueue );
 8005538:	e7d8      	b.n	80054ec <xQueueGenericSend+0x118>
 800553a:	20c1      	movs	r0, #193	; 0xc1
 800553c:	e7f7      	b.n	800552e <xQueueGenericSend+0x15a>
 800553e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005540:	4621      	mov	r1, r4
 8005542:	2054      	movs	r0, #84	; 0x54
 8005544:	f003 f83c 	bl	80085c0 <prvTraceStoreEvent2>
					return errQUEUE_FULL;
 8005548:	2000      	movs	r0, #0
					traceQUEUE_SEND_FAILED( pxQueue );
 800554a:	e7cf      	b.n	80054ec <xQueueGenericSend+0x118>
 800554c:	4621      	mov	r1, r4
 800554e:	2055      	movs	r0, #85	; 0x55
 8005550:	f003 f800 	bl	8008554 <prvTraceStoreEvent1>
					return errQUEUE_FULL;
 8005554:	2000      	movs	r0, #0
					traceQUEUE_SEND_FAILED( pxQueue );
 8005556:	e7c9      	b.n	80054ec <xQueueGenericSend+0x118>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005558:	a802      	add	r0, sp, #8
 800555a:	f000 ffcd 	bl	80064f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800555e:	2701      	movs	r7, #1
 8005560:	e03f      	b.n	80055e2 <xQueueGenericSend+0x20e>
		prvLockQueue( pxQueue );
 8005562:	2300      	movs	r3, #0
 8005564:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005568:	e047      	b.n	80055fa <xQueueGenericSend+0x226>
 800556a:	2300      	movs	r3, #0
 800556c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005570:	e049      	b.n	8005606 <xQueueGenericSend+0x232>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8005572:	4620      	mov	r0, r4
 8005574:	f002 fbf1 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 8005578:	4b57      	ldr	r3, [pc, #348]	; (80056d8 <xQueueGenericSend+0x304>)
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	4218      	tst	r0, r3
 800557e:	d056      	beq.n	800562e <xQueueGenericSend+0x25a>
 8005580:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005584:	2b04      	cmp	r3, #4
 8005586:	d852      	bhi.n	800562e <xQueueGenericSend+0x25a>
 8005588:	e8df f003 	tbb	[pc, r3]
 800558c:	0c0c1203 	.word	0x0c0c1203
 8005590:	12          	.byte	0x12
 8005591:	00          	.byte	0x00
 8005592:	b92d      	cbnz	r5, 80055a0 <xQueueGenericSend+0x1cc>
 8005594:	2056      	movs	r0, #86	; 0x56
 8005596:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005598:	4621      	mov	r1, r4
 800559a:	f003 f811 	bl	80085c0 <prvTraceStoreEvent2>
 800559e:	e046      	b.n	800562e <xQueueGenericSend+0x25a>
 80055a0:	20c2      	movs	r0, #194	; 0xc2
 80055a2:	e7f8      	b.n	8005596 <xQueueGenericSend+0x1c2>
 80055a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055a6:	4621      	mov	r1, r4
 80055a8:	2057      	movs	r0, #87	; 0x57
 80055aa:	f003 f809 	bl	80085c0 <prvTraceStoreEvent2>
 80055ae:	e03e      	b.n	800562e <xQueueGenericSend+0x25a>
 80055b0:	4621      	mov	r1, r4
 80055b2:	2058      	movs	r0, #88	; 0x58
 80055b4:	f002 ffce 	bl	8008554 <prvTraceStoreEvent1>
 80055b8:	e039      	b.n	800562e <xQueueGenericSend+0x25a>
				prvUnlockQueue( pxQueue );
 80055ba:	4620      	mov	r0, r4
 80055bc:	f7ff fda1 	bl	8005102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055c0:	f000 fe08 	bl	80061d4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80055c4:	f001 f9fe 	bl	80069c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055cc:	429a      	cmp	r2, r3
 80055ce:	f4ff af3d 	bcc.w	800544c <xQueueGenericSend+0x78>
 80055d2:	2d02      	cmp	r5, #2
 80055d4:	f43f af3a 	beq.w	800544c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 80055d8:	9b01      	ldr	r3, [sp, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d088      	beq.n	80054f0 <xQueueGenericSend+0x11c>
				else if( xEntryTimeSet == pdFALSE )
 80055de:	2f00      	cmp	r7, #0
 80055e0:	d0ba      	beq.n	8005558 <xQueueGenericSend+0x184>
		taskEXIT_CRITICAL();
 80055e2:	f001 fa11 	bl	8006a08 <vPortExitCritical>
		vTaskSuspendAll();
 80055e6:	f000 fd3b 	bl	8006060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ea:	f001 f9eb 	bl	80069c4 <vPortEnterCritical>
 80055ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80055f2:	b25b      	sxtb	r3, r3
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d0b3      	beq.n	8005562 <xQueueGenericSend+0x18e>
 80055fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d0b1      	beq.n	800556a <xQueueGenericSend+0x196>
 8005606:	f001 f9ff 	bl	8006a08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800560a:	a901      	add	r1, sp, #4
 800560c:	a802      	add	r0, sp, #8
 800560e:	f000 ff7f 	bl	8006510 <xTaskCheckForTimeOut>
 8005612:	bb08      	cbnz	r0, 8005658 <xQueueGenericSend+0x284>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff fd1d 	bl	8005054 <prvIsQueueFull>
 800561a:	2800      	cmp	r0, #0
 800561c:	d0cd      	beq.n	80055ba <xQueueGenericSend+0x1e6>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800561e:	f002 fbc9 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8005622:	f002 fb89 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8005626:	4b2c      	ldr	r3, [pc, #176]	; (80056d8 <xQueueGenericSend+0x304>)
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	4218      	tst	r0, r3
 800562c:	d1a1      	bne.n	8005572 <xQueueGenericSend+0x19e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800562e:	9901      	ldr	r1, [sp, #4]
 8005630:	f104 0010 	add.w	r0, r4, #16
 8005634:	f000 fef4 	bl	8006420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005638:	4620      	mov	r0, r4
 800563a:	f7ff fd62 	bl	8005102 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800563e:	f000 fdc9 	bl	80061d4 <xTaskResumeAll>
 8005642:	2800      	cmp	r0, #0
 8005644:	d1be      	bne.n	80055c4 <xQueueGenericSend+0x1f0>
					portYIELD_WITHIN_API();
 8005646:	4b25      	ldr	r3, [pc, #148]	; (80056dc <xQueueGenericSend+0x308>)
 8005648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	e7b5      	b.n	80055c4 <xQueueGenericSend+0x1f0>
			prvUnlockQueue( pxQueue );
 8005658:	4620      	mov	r0, r4
 800565a:	f7ff fd52 	bl	8005102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800565e:	f000 fdb9 	bl	80061d4 <xTaskResumeAll>
			traceQUEUE_SEND_FAILED( pxQueue );
 8005662:	f002 fba7 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8005666:	f002 fb67 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 800566a:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <xQueueGenericSend+0x304>)
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	4218      	tst	r0, r3
 8005670:	d02c      	beq.n	80056cc <xQueueGenericSend+0x2f8>
 8005672:	4620      	mov	r0, r4
 8005674:	f002 fb71 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 8005678:	4b17      	ldr	r3, [pc, #92]	; (80056d8 <xQueueGenericSend+0x304>)
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	4218      	tst	r0, r3
 800567e:	d027      	beq.n	80056d0 <xQueueGenericSend+0x2fc>
 8005680:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005684:	2b04      	cmp	r3, #4
 8005686:	d825      	bhi.n	80056d4 <xQueueGenericSend+0x300>
 8005688:	e8df f003 	tbb	[pc, r3]
 800568c:	0d0d1403 	.word	0x0d0d1403
 8005690:	14          	.byte	0x14
 8005691:	00          	.byte	0x00
 8005692:	b935      	cbnz	r5, 80056a2 <xQueueGenericSend+0x2ce>
 8005694:	2053      	movs	r0, #83	; 0x53
 8005696:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005698:	4621      	mov	r1, r4
 800569a:	f002 ff91 	bl	80085c0 <prvTraceStoreEvent2>
			return errQUEUE_FULL;
 800569e:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 80056a0:	e724      	b.n	80054ec <xQueueGenericSend+0x118>
 80056a2:	20c1      	movs	r0, #193	; 0xc1
 80056a4:	e7f7      	b.n	8005696 <xQueueGenericSend+0x2c2>
 80056a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80056a8:	4621      	mov	r1, r4
 80056aa:	2054      	movs	r0, #84	; 0x54
 80056ac:	f002 ff88 	bl	80085c0 <prvTraceStoreEvent2>
			return errQUEUE_FULL;
 80056b0:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 80056b2:	e71b      	b.n	80054ec <xQueueGenericSend+0x118>
 80056b4:	4621      	mov	r1, r4
 80056b6:	2055      	movs	r0, #85	; 0x55
 80056b8:	f002 ff4c 	bl	8008554 <prvTraceStoreEvent1>
			return errQUEUE_FULL;
 80056bc:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 80056be:	e715      	b.n	80054ec <xQueueGenericSend+0x118>
					return errQUEUE_FULL;
 80056c0:	2000      	movs	r0, #0
 80056c2:	e713      	b.n	80054ec <xQueueGenericSend+0x118>
 80056c4:	2000      	movs	r0, #0
 80056c6:	e711      	b.n	80054ec <xQueueGenericSend+0x118>
 80056c8:	2000      	movs	r0, #0
 80056ca:	e70f      	b.n	80054ec <xQueueGenericSend+0x118>
			return errQUEUE_FULL;
 80056cc:	2000      	movs	r0, #0
 80056ce:	e70d      	b.n	80054ec <xQueueGenericSend+0x118>
 80056d0:	2000      	movs	r0, #0
 80056d2:	e70b      	b.n	80054ec <xQueueGenericSend+0x118>
 80056d4:	2000      	movs	r0, #0
 80056d6:	e709      	b.n	80054ec <xQueueGenericSend+0x118>
 80056d8:	2000006a 	.word	0x2000006a
 80056dc:	e000ed04 	.word	0xe000ed04

080056e0 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80056e0:	b148      	cbz	r0, 80056f6 <prvInitialiseMutex+0x16>
	{
 80056e2:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80056e4:	2100      	movs	r1, #0
 80056e6:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80056e8:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80056ea:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80056ec:	460b      	mov	r3, r1
 80056ee:	460a      	mov	r2, r1
 80056f0:	f7ff fe70 	bl	80053d4 <xQueueGenericSend>
	}
 80056f4:	bd08      	pop	{r3, pc}
 80056f6:	4770      	bx	lr

080056f8 <xQueueCreateMutex>:
	{
 80056f8:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80056fa:	4602      	mov	r2, r0
 80056fc:	2100      	movs	r1, #0
 80056fe:	2001      	movs	r0, #1
 8005700:	f7ff fe12 	bl	8005328 <xQueueGenericCreate>
 8005704:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8005706:	f7ff ffeb 	bl	80056e0 <prvInitialiseMutex>
	}
 800570a:	4620      	mov	r0, r4
 800570c:	bd10      	pop	{r4, pc}

0800570e <xQueueCreateMutexStatic>:
	{
 800570e:	b510      	push	{r4, lr}
 8005710:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005712:	9000      	str	r0, [sp, #0]
 8005714:	460b      	mov	r3, r1
 8005716:	2200      	movs	r2, #0
 8005718:	4611      	mov	r1, r2
 800571a:	2001      	movs	r0, #1
 800571c:	f7ff fdbc 	bl	8005298 <xQueueGenericCreateStatic>
 8005720:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8005722:	f7ff ffdd 	bl	80056e0 <prvInitialiseMutex>
	}
 8005726:	4620      	mov	r0, r4
 8005728:	b002      	add	sp, #8
 800572a:	bd10      	pop	{r4, pc}

0800572c <MyWrapper>:
{
 800572c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005730:	b158      	cbz	r0, 800574a <MyWrapper+0x1e>
 8005732:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8005734:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005736:	b18b      	cbz	r3, 800575c <MyWrapper+0x30>
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	e7fe      	b.n	8005748 <MyWrapper+0x1c>
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	e7fe      	b.n	800575a <MyWrapper+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800575c:	6803      	ldr	r3, [r0, #0]
 800575e:	b34b      	cbz	r3, 80057b4 <MyWrapper+0x88>
 8005760:	4616      	mov	r6, r2
 8005762:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005764:	f001 fa58 	bl	8006c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005768:	f3ef 8711 	mrs	r7, BASEPRI
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800577c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005782:	454b      	cmp	r3, r9
 8005784:	d948      	bls.n	8005818 <MyWrapper+0xec>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005786:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800578a:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800578c:	4620      	mov	r0, r4
 800578e:	f002 fae4 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 8005792:	4b35      	ldr	r3, [pc, #212]	; (8005868 <MyWrapper+0x13c>)
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	4218      	tst	r0, r3
 8005798:	d01f      	beq.n	80057da <MyWrapper+0xae>
 800579a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800579e:	b1ab      	cbz	r3, 80057cc <MyWrapper+0xa0>
 80057a0:	3b02      	subs	r3, #2
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d819      	bhi.n	80057da <MyWrapper+0xae>
 80057a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057a8:	3201      	adds	r2, #1
 80057aa:	4621      	mov	r1, r4
 80057ac:	205a      	movs	r0, #90	; 0x5a
 80057ae:	f002 ff07 	bl	80085c0 <prvTraceStoreEvent2>
 80057b2:	e012      	b.n	80057da <MyWrapper+0xae>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80057b4:	6843      	ldr	r3, [r0, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0d2      	beq.n	8005760 <MyWrapper+0x34>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	e7fe      	b.n	80057ca <MyWrapper+0x9e>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80057cc:	b9e6      	cbnz	r6, 8005808 <MyWrapper+0xdc>
 80057ce:	2059      	movs	r0, #89	; 0x59
 80057d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057d2:	3201      	adds	r2, #1
 80057d4:	4621      	mov	r1, r4
 80057d6:	f002 fef3 	bl	80085c0 <prvTraceStoreEvent2>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057da:	f109 0301 	add.w	r3, r9, #1
 80057de:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80057e0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80057e4:	d112      	bne.n	800580c <MyWrapper+0xe0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057e8:	b3a3      	cbz	r3, 8005854 <MyWrapper+0x128>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80057ee:	f000 fe2f 	bl	8006450 <xTaskRemoveFromEventList>
 80057f2:	b388      	cbz	r0, 8005858 <MyWrapper+0x12c>
							if( pxHigherPriorityTaskWoken != NULL )
 80057f4:	f1b8 0f00 	cmp.w	r8, #0
 80057f8:	d030      	beq.n	800585c <MyWrapper+0x130>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057fa:	2001      	movs	r0, #1
 80057fc:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005800:	f387 8811 	msr	BASEPRI, r7
}
 8005804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8005808:	20c3      	movs	r0, #195	; 0xc3
 800580a:	e7e1      	b.n	80057d0 <MyWrapper+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800580c:	1c6b      	adds	r3, r5, #1
 800580e:	b25b      	sxtb	r3, r3
 8005810:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8005814:	2001      	movs	r0, #1
 8005816:	e7f3      	b.n	8005800 <MyWrapper+0xd4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005818:	4620      	mov	r0, r4
 800581a:	f002 fa9e 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 800581e:	4b12      	ldr	r3, [pc, #72]	; (8005868 <MyWrapper+0x13c>)
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	4218      	tst	r0, r3
 8005824:	d01c      	beq.n	8005860 <MyWrapper+0x134>
 8005826:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800582a:	b14b      	cbz	r3, 8005840 <MyWrapper+0x114>
 800582c:	3b02      	subs	r3, #2
 800582e:	2b01      	cmp	r3, #1
 8005830:	d818      	bhi.n	8005864 <MyWrapper+0x138>
 8005832:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005834:	4621      	mov	r1, r4
 8005836:	205d      	movs	r0, #93	; 0x5d
 8005838:	f002 fec2 	bl	80085c0 <prvTraceStoreEvent2>
			xReturn = errQUEUE_FULL;
 800583c:	2000      	movs	r0, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800583e:	e7df      	b.n	8005800 <MyWrapper+0xd4>
 8005840:	b936      	cbnz	r6, 8005850 <MyWrapper+0x124>
 8005842:	205c      	movs	r0, #92	; 0x5c
 8005844:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005846:	4621      	mov	r1, r4
 8005848:	f002 feba 	bl	80085c0 <prvTraceStoreEvent2>
			xReturn = errQUEUE_FULL;
 800584c:	2000      	movs	r0, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800584e:	e7d7      	b.n	8005800 <MyWrapper+0xd4>
 8005850:	20c4      	movs	r0, #196	; 0xc4
 8005852:	e7f7      	b.n	8005844 <MyWrapper+0x118>
			xReturn = pdPASS;
 8005854:	2001      	movs	r0, #1
 8005856:	e7d3      	b.n	8005800 <MyWrapper+0xd4>
 8005858:	2001      	movs	r0, #1
 800585a:	e7d1      	b.n	8005800 <MyWrapper+0xd4>
 800585c:	2001      	movs	r0, #1
 800585e:	e7cf      	b.n	8005800 <MyWrapper+0xd4>
			xReturn = errQUEUE_FULL;
 8005860:	2000      	movs	r0, #0
 8005862:	e7cd      	b.n	8005800 <MyWrapper+0xd4>
 8005864:	2000      	movs	r0, #0
 8005866:	e7cb      	b.n	8005800 <MyWrapper+0xd4>
 8005868:	2000006a 	.word	0x2000006a

0800586c <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 800586c:	b508      	push	{r3, lr}
 800586e:	2200      	movs	r2, #0
 8005870:	f7ff ff5c 	bl	800572c <MyWrapper>
 8005874:	bd08      	pop	{r3, pc}
	...

08005878 <xQueueSemaphoreTake>:
{
 8005878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800587a:	b085      	sub	sp, #20
 800587c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800587e:	b940      	cbnz	r0, 8005892 <xQueueSemaphoreTake+0x1a>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	e7fe      	b.n	8005890 <xQueueSemaphoreTake+0x18>
 8005892:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8005894:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005896:	b143      	cbz	r3, 80058aa <xQueueSemaphoreTake+0x32>
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	e7fe      	b.n	80058a8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058aa:	f000 fe85 	bl	80065b8 <xTaskGetSchedulerState>
 80058ae:	b950      	cbnz	r0, 80058c6 <xQueueSemaphoreTake+0x4e>
 80058b0:	9b01      	ldr	r3, [sp, #4]
 80058b2:	b15b      	cbz	r3, 80058cc <xQueueSemaphoreTake+0x54>
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	e7fe      	b.n	80058c4 <xQueueSemaphoreTake+0x4c>
 80058c6:	2500      	movs	r5, #0
 80058c8:	462f      	mov	r7, r5
 80058ca:	e0c2      	b.n	8005a52 <xQueueSemaphoreTake+0x1da>
 80058cc:	2500      	movs	r5, #0
 80058ce:	462f      	mov	r7, r5
 80058d0:	e0bf      	b.n	8005a52 <xQueueSemaphoreTake+0x1da>
				traceQUEUE_RECEIVE( pxQueue );
 80058d2:	f002 fa6f 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 80058d6:	f002 fa2f 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 80058da:	4ba7      	ldr	r3, [pc, #668]	; (8005b78 <xQueueSemaphoreTake+0x300>)
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	4218      	tst	r0, r3
 80058e0:	d016      	beq.n	8005910 <xQueueSemaphoreTake+0x98>
 80058e2:	4620      	mov	r0, r4
 80058e4:	f002 fa39 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 80058e8:	4ba3      	ldr	r3, [pc, #652]	; (8005b78 <xQueueSemaphoreTake+0x300>)
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	4218      	tst	r0, r3
 80058ee:	d00f      	beq.n	8005910 <xQueueSemaphoreTake+0x98>
 80058f0:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d80b      	bhi.n	8005910 <xQueueSemaphoreTake+0x98>
 80058f8:	e8df f003 	tbb	[pc, r3]
 80058fc:	26262e03 	.word	0x26262e03
 8005900:	2e          	.byte	0x2e
 8005901:	00          	.byte	0x00
 8005902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005904:	3b01      	subs	r3, #1
 8005906:	9a01      	ldr	r2, [sp, #4]
 8005908:	4621      	mov	r1, r4
 800590a:	2060      	movs	r0, #96	; 0x60
 800590c:	f002 fc00 	bl	8008110 <prvTraceStoreEvent3>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005910:	3e01      	subs	r6, #1
 8005912:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	b913      	cbnz	r3, 800591e <xQueueSemaphoreTake+0xa6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005918:	f000 ffde 	bl	80068d8 <pvTaskIncrementMutexHeldCount>
 800591c:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	b163      	cbz	r3, 800593c <xQueueSemaphoreTake+0xc4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005922:	f104 0010 	add.w	r0, r4, #16
 8005926:	f000 fd93 	bl	8006450 <xTaskRemoveFromEventList>
 800592a:	b138      	cbz	r0, 800593c <xQueueSemaphoreTake+0xc4>
						queueYIELD_IF_USING_PREEMPTION();
 800592c:	4b93      	ldr	r3, [pc, #588]	; (8005b7c <xQueueSemaphoreTake+0x304>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800593c:	f001 f864 	bl	8006a08 <vPortExitCritical>
				return pdPASS;
 8005940:	2501      	movs	r5, #1
}
 8005942:	4628      	mov	r0, r5
 8005944:	b005      	add	sp, #20
 8005946:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
 8005948:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800594a:	3b01      	subs	r3, #1
 800594c:	9a01      	ldr	r2, [sp, #4]
 800594e:	4621      	mov	r1, r4
 8005950:	2061      	movs	r0, #97	; 0x61
 8005952:	f002 fbdd 	bl	8008110 <prvTraceStoreEvent3>
 8005956:	e7db      	b.n	8005910 <xQueueSemaphoreTake+0x98>
 8005958:	9a01      	ldr	r2, [sp, #4]
 800595a:	4621      	mov	r1, r4
 800595c:	2062      	movs	r0, #98	; 0x62
 800595e:	f002 fe2f 	bl	80085c0 <prvTraceStoreEvent2>
 8005962:	e7d5      	b.n	8005910 <xQueueSemaphoreTake+0x98>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005964:	b145      	cbz	r5, 8005978 <xQueueSemaphoreTake+0x100>
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	e7fe      	b.n	8005976 <xQueueSemaphoreTake+0xfe>
					taskEXIT_CRITICAL();
 8005978:	f001 f846 	bl	8006a08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800597c:	f002 fa1a 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8005980:	f002 f9da 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8005984:	4b7c      	ldr	r3, [pc, #496]	; (8005b78 <xQueueSemaphoreTake+0x300>)
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	4218      	tst	r0, r3
 800598a:	d0da      	beq.n	8005942 <xQueueSemaphoreTake+0xca>
 800598c:	4620      	mov	r0, r4
 800598e:	f002 f9e4 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 8005992:	4b79      	ldr	r3, [pc, #484]	; (8005b78 <xQueueSemaphoreTake+0x300>)
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	4218      	tst	r0, r3
 8005998:	d0d3      	beq.n	8005942 <xQueueSemaphoreTake+0xca>
 800599a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d8cf      	bhi.n	8005942 <xQueueSemaphoreTake+0xca>
 80059a2:	e8df f003 	tbb	[pc, r3]
 80059a6:	1103      	.short	0x1103
 80059a8:	0a0a      	.short	0x0a0a
 80059aa:	11          	.byte	0x11
 80059ab:	00          	.byte	0x00
 80059ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059ae:	9a01      	ldr	r2, [sp, #4]
 80059b0:	4621      	mov	r1, r4
 80059b2:	2063      	movs	r0, #99	; 0x63
 80059b4:	f002 fbac 	bl	8008110 <prvTraceStoreEvent3>
 80059b8:	e7c3      	b.n	8005942 <xQueueSemaphoreTake+0xca>
 80059ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059bc:	9a01      	ldr	r2, [sp, #4]
 80059be:	4621      	mov	r1, r4
 80059c0:	2064      	movs	r0, #100	; 0x64
 80059c2:	f002 fba5 	bl	8008110 <prvTraceStoreEvent3>
 80059c6:	e7bc      	b.n	8005942 <xQueueSemaphoreTake+0xca>
 80059c8:	9a01      	ldr	r2, [sp, #4]
 80059ca:	4621      	mov	r1, r4
 80059cc:	2065      	movs	r0, #101	; 0x65
 80059ce:	f002 fdf7 	bl	80085c0 <prvTraceStoreEvent2>
 80059d2:	e7b6      	b.n	8005942 <xQueueSemaphoreTake+0xca>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059d4:	a802      	add	r0, sp, #8
 80059d6:	f000 fd8f 	bl	80064f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059da:	2701      	movs	r7, #1
 80059dc:	e045      	b.n	8005a6a <xQueueSemaphoreTake+0x1f2>
		prvLockQueue( pxQueue );
 80059de:	2300      	movs	r3, #0
 80059e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80059e4:	e04d      	b.n	8005a82 <xQueueSemaphoreTake+0x20a>
 80059e6:	2300      	movs	r3, #0
 80059e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059ec:	e04f      	b.n	8005a8e <xQueueSemaphoreTake+0x216>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80059ee:	4620      	mov	r0, r4
 80059f0:	f002 f9b3 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 80059f4:	4b60      	ldr	r3, [pc, #384]	; (8005b78 <xQueueSemaphoreTake+0x300>)
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	4218      	tst	r0, r3
 80059fa:	d05c      	beq.n	8005ab6 <xQueueSemaphoreTake+0x23e>
 80059fc:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d858      	bhi.n	8005ab6 <xQueueSemaphoreTake+0x23e>
 8005a04:	e8df f003 	tbb	[pc, r3]
 8005a08:	0a0a1103 	.word	0x0a0a1103
 8005a0c:	11          	.byte	0x11
 8005a0d:	00          	.byte	0x00
 8005a0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a10:	9a01      	ldr	r2, [sp, #4]
 8005a12:	4621      	mov	r1, r4
 8005a14:	2066      	movs	r0, #102	; 0x66
 8005a16:	f002 fb7b 	bl	8008110 <prvTraceStoreEvent3>
 8005a1a:	e04c      	b.n	8005ab6 <xQueueSemaphoreTake+0x23e>
 8005a1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a1e:	9a01      	ldr	r2, [sp, #4]
 8005a20:	4621      	mov	r1, r4
 8005a22:	2067      	movs	r0, #103	; 0x67
 8005a24:	f002 fb74 	bl	8008110 <prvTraceStoreEvent3>
 8005a28:	e045      	b.n	8005ab6 <xQueueSemaphoreTake+0x23e>
 8005a2a:	9a01      	ldr	r2, [sp, #4]
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	2068      	movs	r0, #104	; 0x68
 8005a30:	f002 fdc6 	bl	80085c0 <prvTraceStoreEvent2>
 8005a34:	e03f      	b.n	8005ab6 <xQueueSemaphoreTake+0x23e>
						taskENTER_CRITICAL();
 8005a36:	f000 ffc5 	bl	80069c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005a3a:	6860      	ldr	r0, [r4, #4]
 8005a3c:	f000 fdcc 	bl	80065d8 <xTaskPriorityInherit>
 8005a40:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005a42:	f000 ffe1 	bl	8006a08 <vPortExitCritical>
 8005a46:	e039      	b.n	8005abc <xQueueSemaphoreTake+0x244>
				prvUnlockQueue( pxQueue );
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f7ff fb5a 	bl	8005102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a4e:	f000 fbc1 	bl	80061d4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005a52:	f000 ffb7 	bl	80069c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a58:	2e00      	cmp	r6, #0
 8005a5a:	f47f af3a 	bne.w	80058d2 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a5e:	9b01      	ldr	r3, [sp, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f43f af7f 	beq.w	8005964 <xQueueSemaphoreTake+0xec>
				else if( xEntryTimeSet == pdFALSE )
 8005a66:	2f00      	cmp	r7, #0
 8005a68:	d0b4      	beq.n	80059d4 <xQueueSemaphoreTake+0x15c>
		taskEXIT_CRITICAL();
 8005a6a:	f000 ffcd 	bl	8006a08 <vPortExitCritical>
		vTaskSuspendAll();
 8005a6e:	f000 faf7 	bl	8006060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a72:	f000 ffa7 	bl	80069c4 <vPortEnterCritical>
 8005a76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005a7a:	b25b      	sxtb	r3, r3
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d0ad      	beq.n	80059de <xQueueSemaphoreTake+0x166>
 8005a82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d0ab      	beq.n	80059e6 <xQueueSemaphoreTake+0x16e>
 8005a8e:	f000 ffbb 	bl	8006a08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a92:	a901      	add	r1, sp, #4
 8005a94:	a802      	add	r0, sp, #8
 8005a96:	f000 fd3b 	bl	8006510 <xTaskCheckForTimeOut>
 8005a9a:	bb20      	cbnz	r0, 8005ae6 <xQueueSemaphoreTake+0x26e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f7ff fae8 	bl	8005072 <prvIsQueueEmpty>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d0d0      	beq.n	8005a48 <xQueueSemaphoreTake+0x1d0>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8005aa6:	f002 f985 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8005aaa:	f002 f945 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8005aae:	4b32      	ldr	r3, [pc, #200]	; (8005b78 <xQueueSemaphoreTake+0x300>)
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	4218      	tst	r0, r3
 8005ab4:	d19b      	bne.n	80059ee <xQueueSemaphoreTake+0x176>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0bc      	beq.n	8005a36 <xQueueSemaphoreTake+0x1be>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005abc:	9901      	ldr	r1, [sp, #4]
 8005abe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005ac2:	f000 fcad 	bl	8006420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f7ff fb1b 	bl	8005102 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005acc:	f000 fb82 	bl	80061d4 <xTaskResumeAll>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d1be      	bne.n	8005a52 <xQueueSemaphoreTake+0x1da>
					portYIELD_WITHIN_API();
 8005ad4:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <xQueueSemaphoreTake+0x304>)
 8005ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	e7b5      	b.n	8005a52 <xQueueSemaphoreTake+0x1da>
			prvUnlockQueue( pxQueue );
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f7ff fb0b 	bl	8005102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aec:	f000 fb72 	bl	80061d4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af0:	4620      	mov	r0, r4
 8005af2:	f7ff fabe 	bl	8005072 <prvIsQueueEmpty>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d0ab      	beq.n	8005a52 <xQueueSemaphoreTake+0x1da>
					if( xInheritanceOccurred != pdFALSE )
 8005afa:	b155      	cbz	r5, 8005b12 <xQueueSemaphoreTake+0x29a>
						taskENTER_CRITICAL();
 8005afc:	f000 ff62 	bl	80069c4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b00:	4620      	mov	r0, r4
 8005b02:	f7ff fa9e 	bl	8005042 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005b06:	4601      	mov	r1, r0
 8005b08:	6860      	ldr	r0, [r4, #4]
 8005b0a:	f000 fe65 	bl	80067d8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005b0e:	f000 ff7b 	bl	8006a08 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005b12:	f002 f94f 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8005b16:	f002 f90f 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <xQueueSemaphoreTake+0x300>)
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	4218      	tst	r0, r3
 8005b20:	d026      	beq.n	8005b70 <xQueueSemaphoreTake+0x2f8>
 8005b22:	4620      	mov	r0, r4
 8005b24:	f002 f919 	bl	8007d5a <prvTraceGetQueueNumberHigh16>
 8005b28:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <xQueueSemaphoreTake+0x300>)
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	4218      	tst	r0, r3
 8005b2e:	d021      	beq.n	8005b74 <xQueueSemaphoreTake+0x2fc>
 8005b30:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d823      	bhi.n	8005b80 <xQueueSemaphoreTake+0x308>
 8005b38:	e8df f003 	tbb	[pc, r3]
 8005b3c:	0b0b1303 	.word	0x0b0b1303
 8005b40:	13          	.byte	0x13
 8005b41:	00          	.byte	0x00
 8005b42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b44:	9a01      	ldr	r2, [sp, #4]
 8005b46:	4621      	mov	r1, r4
 8005b48:	2063      	movs	r0, #99	; 0x63
 8005b4a:	f002 fae1 	bl	8008110 <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 8005b4e:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005b50:	e6f7      	b.n	8005942 <xQueueSemaphoreTake+0xca>
 8005b52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b54:	9a01      	ldr	r2, [sp, #4]
 8005b56:	4621      	mov	r1, r4
 8005b58:	2064      	movs	r0, #100	; 0x64
 8005b5a:	f002 fad9 	bl	8008110 <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 8005b5e:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005b60:	e6ef      	b.n	8005942 <xQueueSemaphoreTake+0xca>
 8005b62:	9a01      	ldr	r2, [sp, #4]
 8005b64:	4621      	mov	r1, r4
 8005b66:	2065      	movs	r0, #101	; 0x65
 8005b68:	f002 fd2a 	bl	80085c0 <prvTraceStoreEvent2>
				return errQUEUE_EMPTY;
 8005b6c:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005b6e:	e6e8      	b.n	8005942 <xQueueSemaphoreTake+0xca>
				return errQUEUE_EMPTY;
 8005b70:	2500      	movs	r5, #0
 8005b72:	e6e6      	b.n	8005942 <xQueueSemaphoreTake+0xca>
 8005b74:	2500      	movs	r5, #0
 8005b76:	e6e4      	b.n	8005942 <xQueueSemaphoreTake+0xca>
 8005b78:	2000006a 	.word	0x2000006a
 8005b7c:	e000ed04 	.word	0xe000ed04
 8005b80:	2500      	movs	r5, #0
 8005b82:	e6de      	b.n	8005942 <xQueueSemaphoreTake+0xca>

08005b84 <uxQueueGetQueueNumber>:
	}
 8005b84:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8005b86:	4770      	bx	lr

08005b88 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8005b88:	6481      	str	r1, [r0, #72]	; 0x48
	}
 8005b8a:	4770      	bx	lr

08005b8c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b8c:	4b08      	ldr	r3, [pc, #32]	; (8005bb0 <prvResetNextTaskUnblockTime+0x24>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	b13b      	cbz	r3, 8005ba4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b94:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <prvResetNextTaskUnblockTime+0x24>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <prvResetNextTaskUnblockTime+0x28>)
 8005ba0:	601a      	str	r2, [r3, #0]
	}
}
 8005ba2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ba4:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <prvResetNextTaskUnblockTime+0x28>)
 8005ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	200002b4 	.word	0x200002b4
 8005bb4:	20000388 	.word	0x20000388

08005bb8 <prvInitialiseNewTask>:
{
 8005bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	4681      	mov	r9, r0
 8005bbe:	460d      	mov	r5, r1
 8005bc0:	4617      	mov	r7, r2
 8005bc2:	469a      	mov	sl, r3
 8005bc4:	9e08      	ldr	r6, [sp, #32]
 8005bc6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005bca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bcc:	0092      	lsls	r2, r2, #2
 8005bce:	21a5      	movs	r1, #165	; 0xa5
 8005bd0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005bd2:	f004 f97f 	bl	8009ed4 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005bd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005bd8:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8005bdc:	3a01      	subs	r2, #1
 8005bde:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005be2:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b0f      	cmp	r3, #15
 8005bea:	d807      	bhi.n	8005bfc <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bec:	5ce9      	ldrb	r1, [r5, r3]
 8005bee:	18e2      	adds	r2, r4, r3
 8005bf0:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8005bf4:	5cea      	ldrb	r2, [r5, r3]
 8005bf6:	b10a      	cbz	r2, 8005bfc <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	e7f5      	b.n	8005be8 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c02:	2e06      	cmp	r6, #6
 8005c04:	d900      	bls.n	8005c08 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c06:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8005c08:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005c0a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c0c:	2500      	movs	r5, #0
 8005c0e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c10:	1d20      	adds	r0, r4, #4
 8005c12:	f7ff f9d9 	bl	8004fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c16:	f104 0018 	add.w	r0, r4, #24
 8005c1a:	f7ff f9d5 	bl	8004fc8 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c1e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c20:	f1c6 0607 	rsb	r6, r6, #7
 8005c24:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c26:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005c28:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c2a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c2e:	4652      	mov	r2, sl
 8005c30:	4649      	mov	r1, r9
 8005c32:	4638      	mov	r0, r7
 8005c34:	f000 fe9c 	bl	8006970 <pxPortInitialiseStack>
 8005c38:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8005c3a:	f1b8 0f00 	cmp.w	r8, #0
 8005c3e:	d001      	beq.n	8005c44 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c40:	f8c8 4000 	str.w	r4, [r8]
}
 8005c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005c48 <prvInitialiseTaskLists>:
{
 8005c48:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c4a:	2400      	movs	r4, #0
 8005c4c:	e007      	b.n	8005c5e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c4e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005c52:	0093      	lsls	r3, r2, #2
 8005c54:	480e      	ldr	r0, [pc, #56]	; (8005c90 <prvInitialiseTaskLists+0x48>)
 8005c56:	4418      	add	r0, r3
 8005c58:	f7ff f9ab 	bl	8004fb2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c5c:	3401      	adds	r4, #1
 8005c5e:	2c06      	cmp	r4, #6
 8005c60:	d9f5      	bls.n	8005c4e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005c62:	4d0c      	ldr	r5, [pc, #48]	; (8005c94 <prvInitialiseTaskLists+0x4c>)
 8005c64:	4628      	mov	r0, r5
 8005c66:	f7ff f9a4 	bl	8004fb2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c6a:	4c0b      	ldr	r4, [pc, #44]	; (8005c98 <prvInitialiseTaskLists+0x50>)
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f7ff f9a0 	bl	8004fb2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c72:	480a      	ldr	r0, [pc, #40]	; (8005c9c <prvInitialiseTaskLists+0x54>)
 8005c74:	f7ff f99d 	bl	8004fb2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005c78:	4809      	ldr	r0, [pc, #36]	; (8005ca0 <prvInitialiseTaskLists+0x58>)
 8005c7a:	f7ff f99a 	bl	8004fb2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005c7e:	4809      	ldr	r0, [pc, #36]	; (8005ca4 <prvInitialiseTaskLists+0x5c>)
 8005c80:	f7ff f997 	bl	8004fb2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c84:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <prvInitialiseTaskLists+0x60>)
 8005c86:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c88:	4b08      	ldr	r3, [pc, #32]	; (8005cac <prvInitialiseTaskLists+0x64>)
 8005c8a:	601c      	str	r4, [r3, #0]
}
 8005c8c:	bd38      	pop	{r3, r4, r5, pc}
 8005c8e:	bf00      	nop
 8005c90:	200002bc 	.word	0x200002bc
 8005c94:	20000360 	.word	0x20000360
 8005c98:	20000374 	.word	0x20000374
 8005c9c:	20000390 	.word	0x20000390
 8005ca0:	200003bc 	.word	0x200003bc
 8005ca4:	200003a8 	.word	0x200003a8
 8005ca8:	200002b4 	.word	0x200002b4
 8005cac:	200002b8 	.word	0x200002b8

08005cb0 <prvAddNewTaskToReadyList>:
{
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005cb4:	f000 fe86 	bl	80069c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005cb8:	4a3e      	ldr	r2, [pc, #248]	; (8005db4 <prvAddNewTaskToReadyList+0x104>)
 8005cba:	6813      	ldr	r3, [r2, #0]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cc0:	4b3d      	ldr	r3, [pc, #244]	; (8005db8 <prvAddNewTaskToReadyList+0x108>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	b15b      	cbz	r3, 8005cde <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8005cc6:	4b3d      	ldr	r3, [pc, #244]	; (8005dbc <prvAddNewTaskToReadyList+0x10c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	b96b      	cbnz	r3, 8005ce8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ccc:	4b3a      	ldr	r3, [pc, #232]	; (8005db8 <prvAddNewTaskToReadyList+0x108>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d807      	bhi.n	8005ce8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005cd8:	4b37      	ldr	r3, [pc, #220]	; (8005db8 <prvAddNewTaskToReadyList+0x108>)
 8005cda:	601c      	str	r4, [r3, #0]
 8005cdc:	e004      	b.n	8005ce8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8005cde:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <prvAddNewTaskToReadyList+0x108>)
 8005ce0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ce2:	6813      	ldr	r3, [r2, #0]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d04f      	beq.n	8005d88 <prvAddNewTaskToReadyList+0xd8>
		uxTaskNumber++;
 8005ce8:	4a35      	ldr	r2, [pc, #212]	; (8005dc0 <prvAddNewTaskToReadyList+0x110>)
 8005cea:	6813      	ldr	r3, [r2, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cf0:	6463      	str	r3, [r4, #68]	; 0x44
		traceTASK_CREATE( pxNewTCB );
 8005cf2:	b1fc      	cbz	r4, 8005d34 <prvAddNewTaskToReadyList+0x84>
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f002 f841 	bl	8007d7c <prvAddTaskToStackMonitor>
 8005cfa:	f104 0534 	add.w	r5, r4, #52	; 0x34
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4620      	mov	r0, r4
 8005d02:	f002 f8bb 	bl	8007e7c <prvTraceSaveObjectSymbol>
 8005d06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f002 f8f1 	bl	8007ef0 <prvTraceSaveObjectData>
 8005d0e:	4623      	mov	r3, r4
 8005d10:	462a      	mov	r2, r5
 8005d12:	2103      	movs	r1, #3
 8005d14:	2001      	movs	r0, #1
 8005d16:	f002 faa9 	bl	800826c <prvTraceStoreStringEvent>
 8005d1a:	4b2a      	ldr	r3, [pc, #168]	; (8005dc4 <prvAddNewTaskToReadyList+0x114>)
 8005d1c:	8819      	ldrh	r1, [r3, #0]
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f002 f80f 	bl	8007d42 <prvTraceSetTaskNumberHigh16>
 8005d24:	f002 f846 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8005d28:	f002 f806 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8005d2c:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <prvAddNewTaskToReadyList+0x118>)
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	4218      	tst	r0, r3
 8005d32:	d12c      	bne.n	8005d8e <prvAddNewTaskToReadyList+0xde>
		prvAddTaskToReadyList( pxNewTCB );
 8005d34:	4620      	mov	r0, r4
 8005d36:	f001 ffff 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8005d3a:	4b23      	ldr	r3, [pc, #140]	; (8005dc8 <prvAddNewTaskToReadyList+0x118>)
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	4218      	tst	r0, r3
 8005d40:	d132      	bne.n	8005da8 <prvAddNewTaskToReadyList+0xf8>
 8005d42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d44:	2201      	movs	r2, #1
 8005d46:	409a      	lsls	r2, r3
 8005d48:	4920      	ldr	r1, [pc, #128]	; (8005dcc <prvAddNewTaskToReadyList+0x11c>)
 8005d4a:	6808      	ldr	r0, [r1, #0]
 8005d4c:	4302      	orrs	r2, r0
 8005d4e:	600a      	str	r2, [r1, #0]
 8005d50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d54:	009a      	lsls	r2, r3, #2
 8005d56:	1d21      	adds	r1, r4, #4
 8005d58:	481d      	ldr	r0, [pc, #116]	; (8005dd0 <prvAddNewTaskToReadyList+0x120>)
 8005d5a:	4410      	add	r0, r2
 8005d5c:	f7ff f937 	bl	8004fce <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005d60:	f000 fe52 	bl	8006a08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005d64:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <prvAddNewTaskToReadyList+0x10c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	b16b      	cbz	r3, 8005d86 <prvAddNewTaskToReadyList+0xd6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d6a:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <prvAddNewTaskToReadyList+0x108>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d207      	bcs.n	8005d86 <prvAddNewTaskToReadyList+0xd6>
			taskYIELD_IF_USING_PREEMPTION();
 8005d76:	4b17      	ldr	r3, [pc, #92]	; (8005dd4 <prvAddNewTaskToReadyList+0x124>)
 8005d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	f3bf 8f6f 	isb	sy
}
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8005d88:	f7ff ff5e 	bl	8005c48 <prvInitialiseTaskLists>
 8005d8c:	e7ac      	b.n	8005ce8 <prvAddNewTaskToReadyList+0x38>
		traceTASK_CREATE( pxNewTCB );
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f001 ffd2 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8005d94:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <prvAddNewTaskToReadyList+0x118>)
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	4218      	tst	r0, r3
 8005d9a:	d0cb      	beq.n	8005d34 <prvAddNewTaskToReadyList+0x84>
 8005d9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005d9e:	4621      	mov	r1, r4
 8005da0:	2010      	movs	r0, #16
 8005da2:	f002 fc0d 	bl	80085c0 <prvTraceStoreEvent2>
 8005da6:	e7c5      	b.n	8005d34 <prvAddNewTaskToReadyList+0x84>
		prvAddTaskToReadyList( pxNewTCB );
 8005da8:	4621      	mov	r1, r4
 8005daa:	2030      	movs	r0, #48	; 0x30
 8005dac:	f002 fbd2 	bl	8008554 <prvTraceStoreEvent1>
 8005db0:	e7c7      	b.n	8005d42 <prvAddNewTaskToReadyList+0x92>
 8005db2:	bf00      	nop
 8005db4:	20000348 	.word	0x20000348
 8005db8:	200002b0 	.word	0x200002b0
 8005dbc:	200003a4 	.word	0x200003a4
 8005dc0:	20000358 	.word	0x20000358
 8005dc4:	20000068 	.word	0x20000068
 8005dc8:	2000006a 	.word	0x2000006a
 8005dcc:	2000035c 	.word	0x2000035c
 8005dd0:	200002bc 	.word	0x200002bc
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <prvDeleteTCB>:
	{
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ddc:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8005de0:	b933      	cbnz	r3, 8005df0 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8005de2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005de4:	f001 f844 	bl	8006e70 <vPortFree>
				vPortFree( pxTCB );
 8005de8:	4620      	mov	r0, r4
 8005dea:	f001 f841 	bl	8006e70 <vPortFree>
	}
 8005dee:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d00a      	beq.n	8005e0a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d0fa      	beq.n	8005dee <prvDeleteTCB+0x16>
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	e7fe      	b.n	8005e08 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8005e0a:	f001 f831 	bl	8006e70 <vPortFree>
 8005e0e:	e7ee      	b.n	8005dee <prvDeleteTCB+0x16>

08005e10 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e10:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <prvCheckTasksWaitingTermination+0x40>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	b1d3      	cbz	r3, 8005e4c <prvCheckTasksWaitingTermination+0x3c>
{
 8005e16:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005e18:	f000 fdd4 	bl	80069c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <prvCheckTasksWaitingTermination+0x44>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e22:	1d20      	adds	r0, r4, #4
 8005e24:	f7ff f8f9 	bl	800501a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e28:	4a0b      	ldr	r2, [pc, #44]	; (8005e58 <prvCheckTasksWaitingTermination+0x48>)
 8005e2a:	6813      	ldr	r3, [r2, #0]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e30:	4a07      	ldr	r2, [pc, #28]	; (8005e50 <prvCheckTasksWaitingTermination+0x40>)
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005e38:	f000 fde6 	bl	8006a08 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f7ff ffcb 	bl	8005dd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e42:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <prvCheckTasksWaitingTermination+0x40>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e6      	bne.n	8005e18 <prvCheckTasksWaitingTermination+0x8>
}
 8005e4a:	bd10      	pop	{r4, pc}
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	2000034c 	.word	0x2000034c
 8005e54:	200003bc 	.word	0x200003bc
 8005e58:	20000348 	.word	0x20000348

08005e5c <prvIdleTask>:
{
 8005e5c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005e5e:	f7ff ffd7 	bl	8005e10 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e62:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <prvIdleTask+0x20>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d9f9      	bls.n	8005e5e <prvIdleTask+0x2>
				taskYIELD();
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <prvIdleTask+0x24>)
 8005e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	e7f0      	b.n	8005e5e <prvIdleTask+0x2>
 8005e7c:	200002bc 	.word	0x200002bc
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	4604      	mov	r4, r0
 8005e88:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e8a:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005e8c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e8e:	4b1d      	ldr	r3, [pc, #116]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	3004      	adds	r0, #4
 8005e94:	f7ff f8c1 	bl	800501a <uxListRemove>
 8005e98:	b950      	cbnz	r0, 8005eb0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005e9a:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	fa03 f202 	lsl.w	r2, r3, r2
 8005ea6:	4918      	ldr	r1, [pc, #96]	; (8005f08 <prvAddCurrentTaskToDelayedList+0x84>)
 8005ea8:	680b      	ldr	r3, [r1, #0]
 8005eaa:	ea23 0302 	bic.w	r3, r3, r2
 8005eae:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eb0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005eb4:	d013      	beq.n	8005ede <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eb6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005eb8:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x80>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005ebe:	42a5      	cmp	r5, r4
 8005ec0:	d816      	bhi.n	8005ef0 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec2:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <prvAddCurrentTaskToDelayedList+0x88>)
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x80>)
 8005ec8:	6819      	ldr	r1, [r3, #0]
 8005eca:	3104      	adds	r1, #4
 8005ecc:	f7ff f88b 	bl	8004fe6 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ed0:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	d912      	bls.n	8005efe <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005ed8:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005eda:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005edc:	e00f      	b.n	8005efe <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ede:	2e00      	cmp	r6, #0
 8005ee0:	d0e9      	beq.n	8005eb6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x80>)
 8005ee4:	6819      	ldr	r1, [r3, #0]
 8005ee6:	3104      	adds	r1, #4
 8005ee8:	480a      	ldr	r0, [pc, #40]	; (8005f14 <prvAddCurrentTaskToDelayedList+0x90>)
 8005eea:	f7ff f870 	bl	8004fce <vListInsertEnd>
 8005eee:	e006      	b.n	8005efe <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	4b03      	ldr	r3, [pc, #12]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x80>)
 8005ef6:	6819      	ldr	r1, [r3, #0]
 8005ef8:	3104      	adds	r1, #4
 8005efa:	f7ff f874 	bl	8004fe6 <vListInsert>
}
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	200003d0 	.word	0x200003d0
 8005f04:	200002b0 	.word	0x200002b0
 8005f08:	2000035c 	.word	0x2000035c
 8005f0c:	200002b4 	.word	0x200002b4
 8005f10:	20000388 	.word	0x20000388
 8005f14:	200003a8 	.word	0x200003a8
 8005f18:	200002b8 	.word	0x200002b8

08005f1c <xTaskCreateStatic>:
	{
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005f22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8005f24:	b945      	cbnz	r5, 8005f38 <xTaskCreateStatic+0x1c>
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	e7fe      	b.n	8005f36 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8005f38:	b944      	cbnz	r4, 8005f4c <xTaskCreateStatic+0x30>
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	e7fe      	b.n	8005f4a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f4c:	265c      	movs	r6, #92	; 0x5c
 8005f4e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f50:	9e04      	ldr	r6, [sp, #16]
 8005f52:	2e5c      	cmp	r6, #92	; 0x5c
 8005f54:	d008      	beq.n	8005f68 <xTaskCreateStatic+0x4c>
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	e7fe      	b.n	8005f66 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f68:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f6a:	2502      	movs	r5, #2
 8005f6c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f70:	2500      	movs	r5, #0
 8005f72:	9503      	str	r5, [sp, #12]
 8005f74:	9402      	str	r4, [sp, #8]
 8005f76:	ad05      	add	r5, sp, #20
 8005f78:	9501      	str	r5, [sp, #4]
 8005f7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005f7c:	9500      	str	r5, [sp, #0]
 8005f7e:	f7ff fe1b 	bl	8005bb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f82:	4620      	mov	r0, r4
 8005f84:	f7ff fe94 	bl	8005cb0 <prvAddNewTaskToReadyList>
	}
 8005f88:	9805      	ldr	r0, [sp, #20]
 8005f8a:	b006      	add	sp, #24
 8005f8c:	bd70      	pop	{r4, r5, r6, pc}

08005f8e <xTaskCreate>:
	{
 8005f8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f92:	b085      	sub	sp, #20
 8005f94:	4607      	mov	r7, r0
 8005f96:	4688      	mov	r8, r1
 8005f98:	4615      	mov	r5, r2
 8005f9a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f9c:	0090      	lsls	r0, r2, #2
 8005f9e:	f000 fec7 	bl	8006d30 <pvPortMalloc>
			if( pxStack != NULL )
 8005fa2:	b308      	cbz	r0, 8005fe8 <xTaskCreate+0x5a>
 8005fa4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005fa6:	205c      	movs	r0, #92	; 0x5c
 8005fa8:	f000 fec2 	bl	8006d30 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005fac:	4604      	mov	r4, r0
 8005fae:	b1b8      	cbz	r0, 8005fe0 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8005fb0:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8005fb2:	b1e4      	cbz	r4, 8005fee <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fba:	9303      	str	r3, [sp, #12]
 8005fbc:	9402      	str	r4, [sp, #8]
 8005fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	462a      	mov	r2, r5
 8005fca:	4641      	mov	r1, r8
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f7ff fdf3 	bl	8005bb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7ff fe6c 	bl	8005cb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fd8:	2001      	movs	r0, #1
	}
 8005fda:	b005      	add	sp, #20
 8005fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f000 ff45 	bl	8006e70 <vPortFree>
 8005fe6:	e7e4      	b.n	8005fb2 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	e7f5      	b.n	8005fda <xTaskCreate+0x4c>
 8005fee:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8005ff2:	e7f2      	b.n	8005fda <xTaskCreate+0x4c>

08005ff4 <vTaskStartScheduler>:
{
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ff8:	2400      	movs	r4, #0
 8005ffa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ffc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ffe:	aa07      	add	r2, sp, #28
 8006000:	a906      	add	r1, sp, #24
 8006002:	a805      	add	r0, sp, #20
 8006004:	f001 f9ea 	bl	80073dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006008:	9b05      	ldr	r3, [sp, #20]
 800600a:	9302      	str	r3, [sp, #8]
 800600c:	9b06      	ldr	r3, [sp, #24]
 800600e:	9301      	str	r3, [sp, #4]
 8006010:	9400      	str	r4, [sp, #0]
 8006012:	4623      	mov	r3, r4
 8006014:	9a07      	ldr	r2, [sp, #28]
 8006016:	490d      	ldr	r1, [pc, #52]	; (800604c <vTaskStartScheduler+0x58>)
 8006018:	480d      	ldr	r0, [pc, #52]	; (8006050 <vTaskStartScheduler+0x5c>)
 800601a:	f7ff ff7f 	bl	8005f1c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800601e:	b908      	cbnz	r0, 8006024 <vTaskStartScheduler+0x30>
}
 8006020:	b008      	add	sp, #32
 8006022:	bd10      	pop	{r4, pc}
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006034:	4b07      	ldr	r3, [pc, #28]	; (8006054 <vTaskStartScheduler+0x60>)
 8006036:	f04f 32ff 	mov.w	r2, #4294967295
 800603a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <vTaskStartScheduler+0x64>)
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006042:	4b06      	ldr	r3, [pc, #24]	; (800605c <vTaskStartScheduler+0x68>)
 8006044:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006046:	f000 fd5f 	bl	8006b08 <xPortStartScheduler>
 800604a:	e7e9      	b.n	8006020 <vTaskStartScheduler+0x2c>
 800604c:	0800e39c 	.word	0x0800e39c
 8006050:	08005e5d 	.word	0x08005e5d
 8006054:	20000388 	.word	0x20000388
 8006058:	200003a4 	.word	0x200003a4
 800605c:	200003d0 	.word	0x200003d0

08006060 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006060:	4a02      	ldr	r2, [pc, #8]	; (800606c <vTaskSuspendAll+0xc>)
 8006062:	6813      	ldr	r3, [r2, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	6013      	str	r3, [r2, #0]
}
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000354 	.word	0x20000354

08006070 <xTaskIncrementTick>:
{
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 8006072:	4b4b      	ldr	r3, [pc, #300]	; (80061a0 <xTaskIncrementTick+0x130>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d002      	beq.n	8006080 <xTaskIncrementTick+0x10>
 800607a:	4b4a      	ldr	r3, [pc, #296]	; (80061a4 <xTaskIncrementTick+0x134>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	b91b      	cbnz	r3, 8006088 <xTaskIncrementTick+0x18>
 8006080:	4a49      	ldr	r2, [pc, #292]	; (80061a8 <xTaskIncrementTick+0x138>)
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	4b45      	ldr	r3, [pc, #276]	; (80061a0 <xTaskIncrementTick+0x130>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	b1ab      	cbz	r3, 80060ba <xTaskIncrementTick+0x4a>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800608e:	4b44      	ldr	r3, [pc, #272]	; (80061a0 <xTaskIncrementTick+0x130>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d178      	bne.n	8006188 <xTaskIncrementTick+0x118>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006096:	4b45      	ldr	r3, [pc, #276]	; (80061ac <xTaskIncrementTick+0x13c>)
 8006098:	681e      	ldr	r6, [r3, #0]
 800609a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800609c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800609e:	b9fe      	cbnz	r6, 80060e0 <xTaskIncrementTick+0x70>
			taskSWITCH_DELAYED_LISTS();
 80060a0:	4b43      	ldr	r3, [pc, #268]	; (80061b0 <xTaskIncrementTick+0x140>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	b17b      	cbz	r3, 80060c8 <xTaskIncrementTick+0x58>
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	e7fe      	b.n	80060b8 <xTaskIncrementTick+0x48>
	traceTASK_INCREMENT_TICK( xTickCount );
 80060ba:	4b3c      	ldr	r3, [pc, #240]	; (80061ac <xTaskIncrementTick+0x13c>)
 80060bc:	6819      	ldr	r1, [r3, #0]
 80060be:	3101      	adds	r1, #1
 80060c0:	2031      	movs	r0, #49	; 0x31
 80060c2:	f002 fa47 	bl	8008554 <prvTraceStoreEvent1>
 80060c6:	e7e2      	b.n	800608e <xTaskIncrementTick+0x1e>
			taskSWITCH_DELAYED_LISTS();
 80060c8:	4a39      	ldr	r2, [pc, #228]	; (80061b0 <xTaskIncrementTick+0x140>)
 80060ca:	6811      	ldr	r1, [r2, #0]
 80060cc:	4b39      	ldr	r3, [pc, #228]	; (80061b4 <xTaskIncrementTick+0x144>)
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	6010      	str	r0, [r2, #0]
 80060d2:	6019      	str	r1, [r3, #0]
 80060d4:	4a38      	ldr	r2, [pc, #224]	; (80061b8 <xTaskIncrementTick+0x148>)
 80060d6:	6813      	ldr	r3, [r2, #0]
 80060d8:	3301      	adds	r3, #1
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	f7ff fd56 	bl	8005b8c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060e0:	4b36      	ldr	r3, [pc, #216]	; (80061bc <xTaskIncrementTick+0x14c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	42b3      	cmp	r3, r6
 80060e6:	d940      	bls.n	800616a <xTaskIncrementTick+0xfa>
BaseType_t xSwitchRequired = pdFALSE;
 80060e8:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060ea:	4b35      	ldr	r3, [pc, #212]	; (80061c0 <xTaskIncrementTick+0x150>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80060f4:	009a      	lsls	r2, r3, #2
 80060f6:	4b33      	ldr	r3, [pc, #204]	; (80061c4 <xTaskIncrementTick+0x154>)
 80060f8:	589b      	ldr	r3, [r3, r2]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d949      	bls.n	8006192 <xTaskIncrementTick+0x122>
				xSwitchRequired = pdTRUE;
 80060fe:	2501      	movs	r5, #1
 8006100:	e047      	b.n	8006192 <xTaskIncrementTick+0x122>
							xSwitchRequired = pdTRUE;
 8006102:	2501      	movs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006104:	4b2a      	ldr	r3, [pc, #168]	; (80061b0 <xTaskIncrementTick+0x140>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d02f      	beq.n	800616e <xTaskIncrementTick+0xfe>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800610e:	4b28      	ldr	r3, [pc, #160]	; (80061b0 <xTaskIncrementTick+0x140>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006116:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006118:	429e      	cmp	r6, r3
 800611a:	d32d      	bcc.n	8006178 <xTaskIncrementTick+0x108>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800611c:	1d27      	adds	r7, r4, #4
 800611e:	4638      	mov	r0, r7
 8006120:	f7fe ff7b 	bl	800501a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006124:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006126:	b11b      	cbz	r3, 8006130 <xTaskIncrementTick+0xc0>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006128:	f104 0018 	add.w	r0, r4, #24
 800612c:	f7fe ff75 	bl	800501a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006130:	4620      	mov	r0, r4
 8006132:	f001 fe01 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8006136:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <xTaskIncrementTick+0x158>)
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	4218      	tst	r0, r3
 800613c:	d11f      	bne.n	800617e <xTaskIncrementTick+0x10e>
 800613e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006140:	2201      	movs	r2, #1
 8006142:	409a      	lsls	r2, r3
 8006144:	4921      	ldr	r1, [pc, #132]	; (80061cc <xTaskIncrementTick+0x15c>)
 8006146:	6808      	ldr	r0, [r1, #0]
 8006148:	4302      	orrs	r2, r0
 800614a:	600a      	str	r2, [r1, #0]
 800614c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006150:	009a      	lsls	r2, r3, #2
 8006152:	4639      	mov	r1, r7
 8006154:	481b      	ldr	r0, [pc, #108]	; (80061c4 <xTaskIncrementTick+0x154>)
 8006156:	4410      	add	r0, r2
 8006158:	f7fe ff39 	bl	8004fce <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800615c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800615e:	4b18      	ldr	r3, [pc, #96]	; (80061c0 <xTaskIncrementTick+0x150>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	429a      	cmp	r2, r3
 8006166:	d2cc      	bcs.n	8006102 <xTaskIncrementTick+0x92>
 8006168:	e7cc      	b.n	8006104 <xTaskIncrementTick+0x94>
BaseType_t xSwitchRequired = pdFALSE;
 800616a:	2500      	movs	r5, #0
 800616c:	e7ca      	b.n	8006104 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800616e:	4b13      	ldr	r3, [pc, #76]	; (80061bc <xTaskIncrementTick+0x14c>)
 8006170:	f04f 32ff 	mov.w	r2, #4294967295
 8006174:	601a      	str	r2, [r3, #0]
					break;
 8006176:	e7b8      	b.n	80060ea <xTaskIncrementTick+0x7a>
						xNextTaskUnblockTime = xItemValue;
 8006178:	4a10      	ldr	r2, [pc, #64]	; (80061bc <xTaskIncrementTick+0x14c>)
 800617a:	6013      	str	r3, [r2, #0]
						break;
 800617c:	e7b5      	b.n	80060ea <xTaskIncrementTick+0x7a>
					prvAddTaskToReadyList( pxTCB );
 800617e:	4621      	mov	r1, r4
 8006180:	2030      	movs	r0, #48	; 0x30
 8006182:	f002 f9e7 	bl	8008554 <prvTraceStoreEvent1>
 8006186:	e7da      	b.n	800613e <xTaskIncrementTick+0xce>
		++uxPendedTicks;
 8006188:	4a06      	ldr	r2, [pc, #24]	; (80061a4 <xTaskIncrementTick+0x134>)
 800618a:	6813      	ldr	r3, [r2, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006190:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8006192:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <xTaskIncrementTick+0x160>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	b103      	cbz	r3, 800619a <xTaskIncrementTick+0x12a>
			xSwitchRequired = pdTRUE;
 8006198:	2501      	movs	r5, #1
}
 800619a:	4628      	mov	r0, r5
 800619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000354 	.word	0x20000354
 80061a4:	20000350 	.word	0x20000350
 80061a8:	200049a8 	.word	0x200049a8
 80061ac:	200003d0 	.word	0x200003d0
 80061b0:	200002b4 	.word	0x200002b4
 80061b4:	200002b8 	.word	0x200002b8
 80061b8:	2000038c 	.word	0x2000038c
 80061bc:	20000388 	.word	0x20000388
 80061c0:	200002b0 	.word	0x200002b0
 80061c4:	200002bc 	.word	0x200002bc
 80061c8:	2000006a 	.word	0x2000006a
 80061cc:	2000035c 	.word	0x2000035c
 80061d0:	200003d4 	.word	0x200003d4

080061d4 <xTaskResumeAll>:
{
 80061d4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80061d6:	4b39      	ldr	r3, [pc, #228]	; (80062bc <xTaskResumeAll+0xe8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	b943      	cbnz	r3, 80061ee <xTaskResumeAll+0x1a>
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	e7fe      	b.n	80061ec <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80061ee:	f000 fbe9 	bl	80069c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80061f2:	4b32      	ldr	r3, [pc, #200]	; (80062bc <xTaskResumeAll+0xe8>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	3a01      	subs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d159      	bne.n	80062b4 <xTaskResumeAll+0xe0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006200:	4b2f      	ldr	r3, [pc, #188]	; (80062c0 <xTaskResumeAll+0xec>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	b94b      	cbnz	r3, 800621a <xTaskResumeAll+0x46>
BaseType_t xAlreadyYielded = pdFALSE;
 8006206:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006208:	f000 fbfe 	bl	8006a08 <vPortExitCritical>
}
 800620c:	4620      	mov	r0, r4
 800620e:	bd38      	pop	{r3, r4, r5, pc}
					prvAddTaskToReadyList( pxTCB );
 8006210:	4621      	mov	r1, r4
 8006212:	2030      	movs	r0, #48	; 0x30
 8006214:	f002 f99e 	bl	8008554 <prvTraceStoreEvent1>
 8006218:	e015      	b.n	8006246 <xTaskResumeAll+0x72>
TCB_t *pxTCB = NULL;
 800621a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800621c:	4b29      	ldr	r3, [pc, #164]	; (80062c4 <xTaskResumeAll+0xf0>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	b353      	cbz	r3, 8006278 <xTaskResumeAll+0xa4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006222:	4b28      	ldr	r3, [pc, #160]	; (80062c4 <xTaskResumeAll+0xf0>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006228:	f104 0018 	add.w	r0, r4, #24
 800622c:	f7fe fef5 	bl	800501a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006230:	1d25      	adds	r5, r4, #4
 8006232:	4628      	mov	r0, r5
 8006234:	f7fe fef1 	bl	800501a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006238:	4620      	mov	r0, r4
 800623a:	f001 fd7d 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 800623e:	4b22      	ldr	r3, [pc, #136]	; (80062c8 <xTaskResumeAll+0xf4>)
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	4218      	tst	r0, r3
 8006244:	d1e4      	bne.n	8006210 <xTaskResumeAll+0x3c>
 8006246:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006248:	2201      	movs	r2, #1
 800624a:	409a      	lsls	r2, r3
 800624c:	491f      	ldr	r1, [pc, #124]	; (80062cc <xTaskResumeAll+0xf8>)
 800624e:	6808      	ldr	r0, [r1, #0]
 8006250:	4302      	orrs	r2, r0
 8006252:	600a      	str	r2, [r1, #0]
 8006254:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006258:	009a      	lsls	r2, r3, #2
 800625a:	4629      	mov	r1, r5
 800625c:	481c      	ldr	r0, [pc, #112]	; (80062d0 <xTaskResumeAll+0xfc>)
 800625e:	4410      	add	r0, r2
 8006260:	f7fe feb5 	bl	8004fce <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006264:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006266:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <xTaskResumeAll+0x100>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	429a      	cmp	r2, r3
 800626e:	d3d5      	bcc.n	800621c <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8006270:	4b19      	ldr	r3, [pc, #100]	; (80062d8 <xTaskResumeAll+0x104>)
 8006272:	2201      	movs	r2, #1
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e7d1      	b.n	800621c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8006278:	b10c      	cbz	r4, 800627e <xTaskResumeAll+0xaa>
					prvResetNextTaskUnblockTime();
 800627a:	f7ff fc87 	bl	8005b8c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800627e:	4b17      	ldr	r3, [pc, #92]	; (80062dc <xTaskResumeAll+0x108>)
 8006280:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006282:	b154      	cbz	r4, 800629a <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 8006284:	f7ff fef4 	bl	8006070 <xTaskIncrementTick>
 8006288:	b110      	cbz	r0, 8006290 <xTaskResumeAll+0xbc>
								xYieldPending = pdTRUE;
 800628a:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <xTaskResumeAll+0x104>)
 800628c:	2201      	movs	r2, #1
 800628e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006290:	3c01      	subs	r4, #1
 8006292:	d1f7      	bne.n	8006284 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <xTaskResumeAll+0x108>)
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800629a:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <xTaskResumeAll+0x104>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	b15b      	cbz	r3, 80062b8 <xTaskResumeAll+0xe4>
					taskYIELD_IF_USING_PREEMPTION();
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <xTaskResumeAll+0x10c>)
 80062a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80062b0:	2401      	movs	r4, #1
 80062b2:	e7a9      	b.n	8006208 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 80062b4:	2400      	movs	r4, #0
 80062b6:	e7a7      	b.n	8006208 <xTaskResumeAll+0x34>
 80062b8:	2400      	movs	r4, #0
 80062ba:	e7a5      	b.n	8006208 <xTaskResumeAll+0x34>
 80062bc:	20000354 	.word	0x20000354
 80062c0:	20000348 	.word	0x20000348
 80062c4:	20000390 	.word	0x20000390
 80062c8:	2000006a 	.word	0x2000006a
 80062cc:	2000035c 	.word	0x2000035c
 80062d0:	200002bc 	.word	0x200002bc
 80062d4:	200002b0 	.word	0x200002b0
 80062d8:	200003d4 	.word	0x200003d4
 80062dc:	20000350 	.word	0x20000350
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <vTaskDelay>:
	{
 80062e4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062e6:	b308      	cbz	r0, 800632c <vTaskDelay+0x48>
 80062e8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80062ea:	4b15      	ldr	r3, [pc, #84]	; (8006340 <vTaskDelay+0x5c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	b143      	cbz	r3, 8006302 <vTaskDelay+0x1e>
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	e7fe      	b.n	8006300 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006302:	f7ff fead 	bl	8006060 <vTaskSuspendAll>
				traceTASK_DELAY();
 8006306:	f001 fd55 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 800630a:	f001 fd15 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <vTaskDelay+0x60>)
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	4218      	tst	r0, r3
 8006314:	d003      	beq.n	800631e <vTaskDelay+0x3a>
 8006316:	4621      	mov	r1, r4
 8006318:	207a      	movs	r0, #122	; 0x7a
 800631a:	f002 f91b 	bl	8008554 <prvTraceStoreEvent1>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800631e:	2100      	movs	r1, #0
 8006320:	4620      	mov	r0, r4
 8006322:	f7ff fdaf 	bl	8005e84 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006326:	f7ff ff55 	bl	80061d4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800632a:	b938      	cbnz	r0, 800633c <vTaskDelay+0x58>
			portYIELD_WITHIN_API();
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <vTaskDelay+0x64>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	f3bf 8f6f 	isb	sy
	}
 800633c:	bd10      	pop	{r4, pc}
 800633e:	bf00      	nop
 8006340:	20000354 	.word	0x20000354
 8006344:	2000006a 	.word	0x2000006a
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800634c:	4b2d      	ldr	r3, [pc, #180]	; (8006404 <vTaskSwitchContext+0xb8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	b11b      	cbz	r3, 800635a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006352:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <vTaskSwitchContext+0xbc>)
 8006354:	2201      	movs	r2, #1
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800635a:	4b2b      	ldr	r3, [pc, #172]	; (8006408 <vTaskSwitchContext+0xbc>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006360:	4b2a      	ldr	r3, [pc, #168]	; (800640c <vTaskSwitchContext+0xc0>)
 8006362:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006364:	fab3 f383 	clz	r3, r3
 8006368:	b2db      	uxtb	r3, r3
 800636a:	f1c3 031f 	rsb	r3, r3, #31
 800636e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006372:	008a      	lsls	r2, r1, #2
 8006374:	4926      	ldr	r1, [pc, #152]	; (8006410 <vTaskSwitchContext+0xc4>)
 8006376:	588a      	ldr	r2, [r1, r2]
 8006378:	b942      	cbnz	r2, 800638c <vTaskSwitchContext+0x40>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	e7fe      	b.n	800638a <vTaskSwitchContext+0x3e>
{
 800638c:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800638e:	4820      	ldr	r0, [pc, #128]	; (8006410 <vTaskSwitchContext+0xc4>)
 8006390:	009a      	lsls	r2, r3, #2
 8006392:	18d4      	adds	r4, r2, r3
 8006394:	00a1      	lsls	r1, r4, #2
 8006396:	4401      	add	r1, r0
 8006398:	684c      	ldr	r4, [r1, #4]
 800639a:	6864      	ldr	r4, [r4, #4]
 800639c:	604c      	str	r4, [r1, #4]
 800639e:	441a      	add	r2, r3
 80063a0:	0091      	lsls	r1, r2, #2
 80063a2:	3108      	adds	r1, #8
 80063a4:	4408      	add	r0, r1
 80063a6:	4284      	cmp	r4, r0
 80063a8:	d017      	beq.n	80063da <vTaskSwitchContext+0x8e>
 80063aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80063ae:	009a      	lsls	r2, r3, #2
 80063b0:	4b17      	ldr	r3, [pc, #92]	; (8006410 <vTaskSwitchContext+0xc4>)
 80063b2:	4413      	add	r3, r2
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	4b16      	ldr	r3, [pc, #88]	; (8006414 <vTaskSwitchContext+0xc8>)
 80063ba:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
 80063bc:	4b16      	ldr	r3, [pc, #88]	; (8006418 <vTaskSwitchContext+0xcc>)
 80063be:	2201      	movs	r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	f001 fcf7 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 80063c6:	f001 fcb7 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <vTaskSwitchContext+0xd0>)
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	4218      	tst	r0, r3
 80063d0:	d10a      	bne.n	80063e8 <vTaskSwitchContext+0x9c>
 80063d2:	4b11      	ldr	r3, [pc, #68]	; (8006418 <vTaskSwitchContext+0xcc>)
 80063d4:	2202      	movs	r2, #2
 80063d6:	601a      	str	r2, [r3, #0]
}
 80063d8:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80063da:	6861      	ldr	r1, [r4, #4]
 80063dc:	480c      	ldr	r0, [pc, #48]	; (8006410 <vTaskSwitchContext+0xc4>)
 80063de:	2214      	movs	r2, #20
 80063e0:	fb02 0203 	mla	r2, r2, r3, r0
 80063e4:	6051      	str	r1, [r2, #4]
 80063e6:	e7e0      	b.n	80063aa <vTaskSwitchContext+0x5e>
		traceTASK_SWITCHED_IN();
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <vTaskSwitchContext+0xc8>)
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	f001 fce6 	bl	8007dbc <prvIsNewTCB>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d0ee      	beq.n	80063d2 <vTaskSwitchContext+0x86>
 80063f4:	4b07      	ldr	r3, [pc, #28]	; (8006414 <vTaskSwitchContext+0xc8>)
 80063f6:	6819      	ldr	r1, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	2037      	movs	r0, #55	; 0x37
 80063fe:	f002 f8df 	bl	80085c0 <prvTraceStoreEvent2>
 8006402:	e7e6      	b.n	80063d2 <vTaskSwitchContext+0x86>
 8006404:	20000354 	.word	0x20000354
 8006408:	200003d4 	.word	0x200003d4
 800640c:	2000035c 	.word	0x2000035c
 8006410:	200002bc 	.word	0x200002bc
 8006414:	200002b0 	.word	0x200002b0
 8006418:	200049a4 	.word	0x200049a4
 800641c:	2000006a 	.word	0x2000006a

08006420 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006420:	b940      	cbnz	r0, 8006434 <vTaskPlaceOnEventList+0x14>
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	e7fe      	b.n	8006432 <vTaskPlaceOnEventList+0x12>
{
 8006434:	b510      	push	{r4, lr}
 8006436:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006438:	4b04      	ldr	r3, [pc, #16]	; (800644c <vTaskPlaceOnEventList+0x2c>)
 800643a:	6819      	ldr	r1, [r3, #0]
 800643c:	3118      	adds	r1, #24
 800643e:	f7fe fdd2 	bl	8004fe6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006442:	2101      	movs	r1, #1
 8006444:	4620      	mov	r0, r4
 8006446:	f7ff fd1d 	bl	8005e84 <prvAddCurrentTaskToDelayedList>
}
 800644a:	bd10      	pop	{r4, pc}
 800644c:	200002b0 	.word	0x200002b0

08006450 <xTaskRemoveFromEventList>:
{
 8006450:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006452:	68c3      	ldr	r3, [r0, #12]
 8006454:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006456:	b944      	cbnz	r4, 800646a <xTaskRemoveFromEventList+0x1a>
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	e7fe      	b.n	8006468 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800646a:	f104 0518 	add.w	r5, r4, #24
 800646e:	4628      	mov	r0, r5
 8006470:	f7fe fdd3 	bl	800501a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006474:	4b19      	ldr	r3, [pc, #100]	; (80064dc <xTaskRemoveFromEventList+0x8c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	bb43      	cbnz	r3, 80064cc <xTaskRemoveFromEventList+0x7c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800647a:	1d25      	adds	r5, r4, #4
 800647c:	4628      	mov	r0, r5
 800647e:	f7fe fdcc 	bl	800501a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006482:	4620      	mov	r0, r4
 8006484:	f001 fc58 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8006488:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <xTaskRemoveFromEventList+0x90>)
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	4218      	tst	r0, r3
 800648e:	d118      	bne.n	80064c2 <xTaskRemoveFromEventList+0x72>
 8006490:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006492:	2201      	movs	r2, #1
 8006494:	409a      	lsls	r2, r3
 8006496:	4913      	ldr	r1, [pc, #76]	; (80064e4 <xTaskRemoveFromEventList+0x94>)
 8006498:	6808      	ldr	r0, [r1, #0]
 800649a:	4302      	orrs	r2, r0
 800649c:	600a      	str	r2, [r1, #0]
 800649e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80064a2:	009a      	lsls	r2, r3, #2
 80064a4:	4629      	mov	r1, r5
 80064a6:	4810      	ldr	r0, [pc, #64]	; (80064e8 <xTaskRemoveFromEventList+0x98>)
 80064a8:	4410      	add	r0, r2
 80064aa:	f7fe fd90 	bl	8004fce <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80064b0:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <xTaskRemoveFromEventList+0x9c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d90d      	bls.n	80064d6 <xTaskRemoveFromEventList+0x86>
		xYieldPending = pdTRUE;
 80064ba:	2001      	movs	r0, #1
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <xTaskRemoveFromEventList+0xa0>)
 80064be:	6018      	str	r0, [r3, #0]
}
 80064c0:	bd38      	pop	{r3, r4, r5, pc}
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064c2:	4621      	mov	r1, r4
 80064c4:	2030      	movs	r0, #48	; 0x30
 80064c6:	f002 f845 	bl	8008554 <prvTraceStoreEvent1>
 80064ca:	e7e1      	b.n	8006490 <xTaskRemoveFromEventList+0x40>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064cc:	4629      	mov	r1, r5
 80064ce:	4809      	ldr	r0, [pc, #36]	; (80064f4 <xTaskRemoveFromEventList+0xa4>)
 80064d0:	f7fe fd7d 	bl	8004fce <vListInsertEnd>
 80064d4:	e7eb      	b.n	80064ae <xTaskRemoveFromEventList+0x5e>
		xReturn = pdFALSE;
 80064d6:	2000      	movs	r0, #0
	return xReturn;
 80064d8:	e7f2      	b.n	80064c0 <xTaskRemoveFromEventList+0x70>
 80064da:	bf00      	nop
 80064dc:	20000354 	.word	0x20000354
 80064e0:	2000006a 	.word	0x2000006a
 80064e4:	2000035c 	.word	0x2000035c
 80064e8:	200002bc 	.word	0x200002bc
 80064ec:	200002b0 	.word	0x200002b0
 80064f0:	200003d4 	.word	0x200003d4
 80064f4:	20000390 	.word	0x20000390

080064f8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064f8:	4b03      	ldr	r3, [pc, #12]	; (8006508 <vTaskInternalSetTimeOutState+0x10>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064fe:	4b03      	ldr	r3, [pc, #12]	; (800650c <vTaskInternalSetTimeOutState+0x14>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6043      	str	r3, [r0, #4]
}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	2000038c 	.word	0x2000038c
 800650c:	200003d0 	.word	0x200003d0

08006510 <xTaskCheckForTimeOut>:
{
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006512:	b150      	cbz	r0, 800652a <xTaskCheckForTimeOut+0x1a>
 8006514:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006516:	b989      	cbnz	r1, 800653c <xTaskCheckForTimeOut+0x2c>
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	e7fe      	b.n	8006528 <xTaskCheckForTimeOut+0x18>
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	e7fe      	b.n	800653a <xTaskCheckForTimeOut+0x2a>
 800653c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800653e:	f000 fa41 	bl	80069c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006542:	4b11      	ldr	r3, [pc, #68]	; (8006588 <xTaskCheckForTimeOut+0x78>)
 8006544:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006546:	6868      	ldr	r0, [r5, #4]
 8006548:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d016      	beq.n	8006580 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006552:	682f      	ldr	r7, [r5, #0]
 8006554:	4e0d      	ldr	r6, [pc, #52]	; (800658c <xTaskCheckForTimeOut+0x7c>)
 8006556:	6836      	ldr	r6, [r6, #0]
 8006558:	42b7      	cmp	r7, r6
 800655a:	d001      	beq.n	8006560 <xTaskCheckForTimeOut+0x50>
 800655c:	4288      	cmp	r0, r1
 800655e:	d911      	bls.n	8006584 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006560:	4293      	cmp	r3, r2
 8006562:	d803      	bhi.n	800656c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006568:	2401      	movs	r4, #1
 800656a:	e005      	b.n	8006578 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006570:	4628      	mov	r0, r5
 8006572:	f7ff ffc1 	bl	80064f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006576:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006578:	f000 fa46 	bl	8006a08 <vPortExitCritical>
}
 800657c:	4620      	mov	r0, r4
 800657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8006580:	2400      	movs	r4, #0
 8006582:	e7f9      	b.n	8006578 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8006584:	2401      	movs	r4, #1
 8006586:	e7f7      	b.n	8006578 <xTaskCheckForTimeOut+0x68>
 8006588:	200003d0 	.word	0x200003d0
 800658c:	2000038c 	.word	0x2000038c

08006590 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006590:	4b01      	ldr	r3, [pc, #4]	; (8006598 <vTaskMissedYield+0x8>)
 8006592:	2201      	movs	r2, #1
 8006594:	601a      	str	r2, [r3, #0]
}
 8006596:	4770      	bx	lr
 8006598:	200003d4 	.word	0x200003d4

0800659c <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 800659c:	b108      	cbz	r0, 80065a2 <uxTaskGetTaskNumber+0x6>
			uxReturn = pxTCB->uxTaskNumber;
 800659e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80065a0:	4770      	bx	lr
			uxReturn = 0U;
 80065a2:	2000      	movs	r0, #0
	}
 80065a4:	4770      	bx	lr

080065a6 <vTaskSetTaskNumber>:
		if( xTask != NULL )
 80065a6:	b100      	cbz	r0, 80065aa <vTaskSetTaskNumber+0x4>
			pxTCB->uxTaskNumber = uxHandle;
 80065a8:	6481      	str	r1, [r0, #72]	; 0x48
	}
 80065aa:	4770      	bx	lr

080065ac <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80065ac:	4b01      	ldr	r3, [pc, #4]	; (80065b4 <xTaskGetCurrentTaskHandle+0x8>)
 80065ae:	6818      	ldr	r0, [r3, #0]
	}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	200002b0 	.word	0x200002b0

080065b8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <xTaskGetSchedulerState+0x18>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	b133      	cbz	r3, 80065cc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <xTaskGetSchedulerState+0x1c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	b10b      	cbz	r3, 80065c8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80065c4:	2000      	movs	r0, #0
	}
 80065c6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80065c8:	2002      	movs	r0, #2
 80065ca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065cc:	2001      	movs	r0, #1
 80065ce:	4770      	bx	lr
 80065d0:	200003a4 	.word	0x200003a4
 80065d4:	20000354 	.word	0x20000354

080065d8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80065d8:	2800      	cmp	r0, #0
 80065da:	d077      	beq.n	80066cc <xTaskPriorityInherit+0xf4>
	{
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80065e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80065e2:	4a3b      	ldr	r2, [pc, #236]	; (80066d0 <xTaskPriorityInherit+0xf8>)
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d265      	bcs.n	80066b8 <xTaskPriorityInherit+0xe0>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065ec:	6982      	ldr	r2, [r0, #24]
 80065ee:	2a00      	cmp	r2, #0
 80065f0:	db05      	blt.n	80065fe <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f2:	4a37      	ldr	r2, [pc, #220]	; (80066d0 <xTaskPriorityInherit+0xf8>)
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065f8:	f1c2 0207 	rsb	r2, r2, #7
 80065fc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80065fe:	6961      	ldr	r1, [r4, #20]
 8006600:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006604:	009a      	lsls	r2, r3, #2
 8006606:	4b33      	ldr	r3, [pc, #204]	; (80066d4 <xTaskPriorityInherit+0xfc>)
 8006608:	4413      	add	r3, r2
 800660a:	4299      	cmp	r1, r3
 800660c:	d00d      	beq.n	800662a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800660e:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <xTaskPriorityInherit+0xf8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8006616:	f001 fbcd 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 800661a:	f001 fb8d 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 800661e:	4b2e      	ldr	r3, [pc, #184]	; (80066d8 <xTaskPriorityInherit+0x100>)
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	4218      	tst	r0, r3
 8006624:	d136      	bne.n	8006694 <xTaskPriorityInherit+0xbc>
				xReturn = pdTRUE;
 8006626:	2001      	movs	r0, #1
	}
 8006628:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800662a:	1d25      	adds	r5, r4, #4
 800662c:	4628      	mov	r0, r5
 800662e:	f7fe fcf4 	bl	800501a <uxListRemove>
 8006632:	b1d0      	cbz	r0, 800666a <xTaskPriorityInherit+0x92>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006634:	4b26      	ldr	r3, [pc, #152]	; (80066d0 <xTaskPriorityInherit+0xf8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800663c:	4620      	mov	r0, r4
 800663e:	f001 fb7b 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8006642:	4b25      	ldr	r3, [pc, #148]	; (80066d8 <xTaskPriorityInherit+0x100>)
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	4218      	tst	r0, r3
 8006648:	d11f      	bne.n	800668a <xTaskPriorityInherit+0xb2>
 800664a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800664c:	2201      	movs	r2, #1
 800664e:	409a      	lsls	r2, r3
 8006650:	4922      	ldr	r1, [pc, #136]	; (80066dc <xTaskPriorityInherit+0x104>)
 8006652:	6808      	ldr	r0, [r1, #0]
 8006654:	4302      	orrs	r2, r0
 8006656:	600a      	str	r2, [r1, #0]
 8006658:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800665c:	009a      	lsls	r2, r3, #2
 800665e:	4629      	mov	r1, r5
 8006660:	481c      	ldr	r0, [pc, #112]	; (80066d4 <xTaskPriorityInherit+0xfc>)
 8006662:	4410      	add	r0, r2
 8006664:	f7fe fcb3 	bl	8004fce <vListInsertEnd>
 8006668:	e7d5      	b.n	8006616 <xTaskPriorityInherit+0x3e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800666a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800666c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006670:	008a      	lsls	r2, r1, #2
 8006672:	4918      	ldr	r1, [pc, #96]	; (80066d4 <xTaskPriorityInherit+0xfc>)
 8006674:	588a      	ldr	r2, [r1, r2]
 8006676:	2a00      	cmp	r2, #0
 8006678:	d1dc      	bne.n	8006634 <xTaskPriorityInherit+0x5c>
 800667a:	2201      	movs	r2, #1
 800667c:	409a      	lsls	r2, r3
 800667e:	4917      	ldr	r1, [pc, #92]	; (80066dc <xTaskPriorityInherit+0x104>)
 8006680:	680b      	ldr	r3, [r1, #0]
 8006682:	ea23 0302 	bic.w	r3, r3, r2
 8006686:	600b      	str	r3, [r1, #0]
 8006688:	e7d4      	b.n	8006634 <xTaskPriorityInherit+0x5c>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800668a:	4621      	mov	r1, r4
 800668c:	2030      	movs	r0, #48	; 0x30
 800668e:	f001 ff61 	bl	8008554 <prvTraceStoreEvent1>
 8006692:	e7da      	b.n	800664a <xTaskPriorityInherit+0x72>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8006694:	4620      	mov	r0, r4
 8006696:	f001 fb4f 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 800669a:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <xTaskPriorityInherit+0x100>)
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	4218      	tst	r0, r3
 80066a0:	d101      	bne.n	80066a6 <xTaskPriorityInherit+0xce>
				xReturn = pdTRUE;
 80066a2:	2001      	movs	r0, #1
 80066a4:	e7c0      	b.n	8006628 <xTaskPriorityInherit+0x50>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <xTaskPriorityInherit+0xf8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	4621      	mov	r1, r4
 80066ae:	2005      	movs	r0, #5
 80066b0:	f001 ff86 	bl	80085c0 <prvTraceStoreEvent2>
				xReturn = pdTRUE;
 80066b4:	2001      	movs	r0, #1
 80066b6:	e7b7      	b.n	8006628 <xTaskPriorityInherit+0x50>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80066b8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <xTaskPriorityInherit+0xf8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d201      	bcs.n	80066c8 <xTaskPriorityInherit+0xf0>
					xReturn = pdTRUE;
 80066c4:	2001      	movs	r0, #1
		return xReturn;
 80066c6:	e7af      	b.n	8006628 <xTaskPriorityInherit+0x50>
	BaseType_t xReturn = pdFALSE;
 80066c8:	2000      	movs	r0, #0
 80066ca:	e7ad      	b.n	8006628 <xTaskPriorityInherit+0x50>
 80066cc:	2000      	movs	r0, #0
	}
 80066ce:	4770      	bx	lr
 80066d0:	200002b0 	.word	0x200002b0
 80066d4:	200002bc 	.word	0x200002bc
 80066d8:	2000006a 	.word	0x2000006a
 80066dc:	2000035c 	.word	0x2000035c

080066e0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d06a      	beq.n	80067ba <xTaskPriorityDisinherit+0xda>
	{
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80066e8:	4b37      	ldr	r3, [pc, #220]	; (80067c8 <xTaskPriorityDisinherit+0xe8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4283      	cmp	r3, r0
 80066ee:	d008      	beq.n	8006702 <xTaskPriorityDisinherit+0x22>
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	e7fe      	b.n	8006700 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006702:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006704:	b943      	cbnz	r3, 8006718 <xTaskPriorityDisinherit+0x38>
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	e7fe      	b.n	8006716 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006718:	3b01      	subs	r3, #1
 800671a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800671c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800671e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006720:	4291      	cmp	r1, r2
 8006722:	d04c      	beq.n	80067be <xTaskPriorityDisinherit+0xde>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006724:	2b00      	cmp	r3, #0
 8006726:	d14c      	bne.n	80067c2 <xTaskPriorityDisinherit+0xe2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006728:	1d05      	adds	r5, r0, #4
 800672a:	4628      	mov	r0, r5
 800672c:	f7fe fc75 	bl	800501a <uxListRemove>
 8006730:	b970      	cbnz	r0, 8006750 <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006734:	2314      	movs	r3, #20
 8006736:	fb03 f302 	mul.w	r3, r3, r2
 800673a:	4924      	ldr	r1, [pc, #144]	; (80067cc <xTaskPriorityDisinherit+0xec>)
 800673c:	58cb      	ldr	r3, [r1, r3]
 800673e:	b93b      	cbnz	r3, 8006750 <xTaskPriorityDisinherit+0x70>
 8006740:	2301      	movs	r3, #1
 8006742:	fa03 f202 	lsl.w	r2, r3, r2
 8006746:	4922      	ldr	r1, [pc, #136]	; (80067d0 <xTaskPriorityDisinherit+0xf0>)
 8006748:	680b      	ldr	r3, [r1, #0]
 800674a:	ea23 0302 	bic.w	r3, r3, r2
 800674e:	600b      	str	r3, [r1, #0]
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006750:	f001 fb30 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8006754:	f001 faf0 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8006758:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <xTaskPriorityDisinherit+0xf4>)
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	4218      	tst	r0, r3
 800675e:	d00b      	beq.n	8006778 <xTaskPriorityDisinherit+0x98>
 8006760:	4620      	mov	r0, r4
 8006762:	f001 fae9 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8006766:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <xTaskPriorityDisinherit+0xf4>)
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	4218      	tst	r0, r3
 800676c:	d004      	beq.n	8006778 <xTaskPriorityDisinherit+0x98>
 800676e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006770:	4621      	mov	r1, r4
 8006772:	2006      	movs	r0, #6
 8006774:	f001 ff24 	bl	80085c0 <prvTraceStoreEvent2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006778:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800677a:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800677c:	f1c3 0307 	rsb	r3, r3, #7
 8006780:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006782:	4620      	mov	r0, r4
 8006784:	f001 fad8 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8006788:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <xTaskPriorityDisinherit+0xf4>)
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	4218      	tst	r0, r3
 800678e:	d003      	beq.n	8006798 <xTaskPriorityDisinherit+0xb8>
 8006790:	4621      	mov	r1, r4
 8006792:	2030      	movs	r0, #48	; 0x30
 8006794:	f001 fede 	bl	8008554 <prvTraceStoreEvent1>
 8006798:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800679a:	2401      	movs	r4, #1
 800679c:	fa04 f302 	lsl.w	r3, r4, r2
 80067a0:	490b      	ldr	r1, [pc, #44]	; (80067d0 <xTaskPriorityDisinherit+0xf0>)
 80067a2:	6808      	ldr	r0, [r1, #0]
 80067a4:	4303      	orrs	r3, r0
 80067a6:	600b      	str	r3, [r1, #0]
 80067a8:	4629      	mov	r1, r5
 80067aa:	4b08      	ldr	r3, [pc, #32]	; (80067cc <xTaskPriorityDisinherit+0xec>)
 80067ac:	2014      	movs	r0, #20
 80067ae:	fb00 3002 	mla	r0, r0, r2, r3
 80067b2:	f7fe fc0c 	bl	8004fce <vListInsertEnd>
					xReturn = pdTRUE;
 80067b6:	4620      	mov	r0, r4
	}
 80067b8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80067ba:	2000      	movs	r0, #0
	}
 80067bc:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80067be:	2000      	movs	r0, #0
 80067c0:	e7fa      	b.n	80067b8 <xTaskPriorityDisinherit+0xd8>
 80067c2:	2000      	movs	r0, #0
		return xReturn;
 80067c4:	e7f8      	b.n	80067b8 <xTaskPriorityDisinherit+0xd8>
 80067c6:	bf00      	nop
 80067c8:	200002b0 	.word	0x200002b0
 80067cc:	200002bc 	.word	0x200002bc
 80067d0:	2000035c 	.word	0x2000035c
 80067d4:	2000006a 	.word	0x2000006a

080067d8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80067d8:	2800      	cmp	r0, #0
 80067da:	d074      	beq.n	80068c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
	{
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80067e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80067e2:	b943      	cbnz	r3, 80067f6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	e7fe      	b.n	80067f4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80067f6:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80067f8:	428d      	cmp	r5, r1
 80067fa:	d200      	bcs.n	80067fe <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80067fc:	460d      	mov	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80067fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006800:	42aa      	cmp	r2, r5
 8006802:	d001      	beq.n	8006808 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006804:	2b01      	cmp	r3, #1
 8006806:	d000      	beq.n	800680a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8006808:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800680a:	4b2f      	ldr	r3, [pc, #188]	; (80068c8 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	42a3      	cmp	r3, r4
 8006810:	d108      	bne.n	8006824 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	e7fe      	b.n	8006822 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006824:	f001 fac6 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8006828:	f001 fa86 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 800682c:	4b27      	ldr	r3, [pc, #156]	; (80068cc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	4218      	tst	r0, r3
 8006832:	d00b      	beq.n	800684c <vTaskPriorityDisinheritAfterTimeout+0x74>
 8006834:	4620      	mov	r0, r4
 8006836:	f001 fa7f 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 800683a:	4b24      	ldr	r3, [pc, #144]	; (80068cc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	4218      	tst	r0, r3
 8006840:	d004      	beq.n	800684c <vTaskPriorityDisinheritAfterTimeout+0x74>
 8006842:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006844:	4621      	mov	r1, r4
 8006846:	2006      	movs	r0, #6
 8006848:	f001 feba 	bl	80085c0 <prvTraceStoreEvent2>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800684c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
 800684e:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006850:	69a2      	ldr	r2, [r4, #24]
 8006852:	2a00      	cmp	r2, #0
 8006854:	db02      	blt.n	800685c <vTaskPriorityDisinheritAfterTimeout+0x84>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006856:	f1c5 0507 	rsb	r5, r5, #7
 800685a:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800685c:	6962      	ldr	r2, [r4, #20]
 800685e:	491c      	ldr	r1, [pc, #112]	; (80068d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006860:	2014      	movs	r0, #20
 8006862:	fb00 1303 	mla	r3, r0, r3, r1
 8006866:	429a      	cmp	r2, r3
 8006868:	d1ce      	bne.n	8006808 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800686a:	1d25      	adds	r5, r4, #4
 800686c:	4628      	mov	r0, r5
 800686e:	f7fe fbd4 	bl	800501a <uxListRemove>
 8006872:	b970      	cbnz	r0, 8006892 <vTaskPriorityDisinheritAfterTimeout+0xba>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006874:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006876:	2314      	movs	r3, #20
 8006878:	fb03 f302 	mul.w	r3, r3, r2
 800687c:	4914      	ldr	r1, [pc, #80]	; (80068d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800687e:	58cb      	ldr	r3, [r1, r3]
 8006880:	b93b      	cbnz	r3, 8006892 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006882:	2301      	movs	r3, #1
 8006884:	fa03 f202 	lsl.w	r2, r3, r2
 8006888:	4912      	ldr	r1, [pc, #72]	; (80068d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800688a:	680b      	ldr	r3, [r1, #0]
 800688c:	ea23 0302 	bic.w	r3, r3, r2
 8006890:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8006892:	4620      	mov	r0, r4
 8006894:	f001 fa50 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8006898:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	4218      	tst	r0, r3
 800689e:	d003      	beq.n	80068a8 <vTaskPriorityDisinheritAfterTimeout+0xd0>
 80068a0:	4621      	mov	r1, r4
 80068a2:	2030      	movs	r0, #48	; 0x30
 80068a4:	f001 fe56 	bl	8008554 <prvTraceStoreEvent1>
 80068a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80068aa:	2301      	movs	r3, #1
 80068ac:	4093      	lsls	r3, r2
 80068ae:	4909      	ldr	r1, [pc, #36]	; (80068d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80068b0:	6808      	ldr	r0, [r1, #0]
 80068b2:	4303      	orrs	r3, r0
 80068b4:	600b      	str	r3, [r1, #0]
 80068b6:	4629      	mov	r1, r5
 80068b8:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80068ba:	2014      	movs	r0, #20
 80068bc:	fb00 3002 	mla	r0, r0, r2, r3
 80068c0:	f7fe fb85 	bl	8004fce <vListInsertEnd>
	}
 80068c4:	e7a0      	b.n	8006808 <vTaskPriorityDisinheritAfterTimeout+0x30>
 80068c6:	4770      	bx	lr
 80068c8:	200002b0 	.word	0x200002b0
 80068cc:	2000006a 	.word	0x2000006a
 80068d0:	200002bc 	.word	0x200002bc
 80068d4:	2000035c 	.word	0x2000035c

080068d8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <pvTaskIncrementMutexHeldCount+0x18>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	b123      	cbz	r3, 80068e8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80068de:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <pvTaskIncrementMutexHeldCount+0x18>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80068e4:	3301      	adds	r3, #1
 80068e6:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 80068e8:	4b01      	ldr	r3, [pc, #4]	; (80068f0 <pvTaskIncrementMutexHeldCount+0x18>)
 80068ea:	6818      	ldr	r0, [r3, #0]
	}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	200002b0 	.word	0x200002b0

080068f4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068f4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068fa:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <prvTaskExitError+0x3c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d008      	beq.n	8006916 <prvTaskExitError+0x22>
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	e7fe      	b.n	8006914 <prvTaskExitError+0x20>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0fc      	beq.n	8006926 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800692c:	b002      	add	sp, #8
 800692e:	4770      	bx	lr
 8006930:	20000060 	.word	0x20000060

08006934 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006934:	4808      	ldr	r0, [pc, #32]	; (8006958 <prvPortStartFirstTask+0x24>)
 8006936:	6800      	ldr	r0, [r0, #0]
 8006938:	6800      	ldr	r0, [r0, #0]
 800693a:	f380 8808 	msr	MSP, r0
 800693e:	f04f 0000 	mov.w	r0, #0
 8006942:	f380 8814 	msr	CONTROL, r0
 8006946:	b662      	cpsie	i
 8006948:	b661      	cpsie	f
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	df00      	svc	0
 8006954:	bf00      	nop
 8006956:	0000      	.short	0x0000
 8006958:	e000ed08 	.word	0xe000ed08

0800695c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800695c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800696c <vPortEnableVFP+0x10>
 8006960:	6801      	ldr	r1, [r0, #0]
 8006962:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006966:	6001      	str	r1, [r0, #0]
 8006968:	4770      	bx	lr
 800696a:	0000      	.short	0x0000
 800696c:	e000ed88 	.word	0xe000ed88

08006970 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006974:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006978:	f021 0101 	bic.w	r1, r1, #1
 800697c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <pxPortInitialiseStack+0x28>)
 8006982:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006986:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800698a:	f06f 0302 	mvn.w	r3, #2
 800698e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006992:	3844      	subs	r0, #68	; 0x44
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	080068f5 	.word	0x080068f5
 800699c:	00000000 	.word	0x00000000

080069a0 <SVC_Handler>:
	__asm volatile (
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <pxCurrentTCBConst2>)
 80069a2:	6819      	ldr	r1, [r3, #0]
 80069a4:	6808      	ldr	r0, [r1, #0]
 80069a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069aa:	f380 8809 	msr	PSP, r0
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f380 8811 	msr	BASEPRI, r0
 80069ba:	4770      	bx	lr
 80069bc:	f3af 8000 	nop.w

080069c0 <pxCurrentTCBConst2>:
 80069c0:	200002b0 	.word	0x200002b0

080069c4 <vPortEnterCritical>:
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80069d4:	4a0a      	ldr	r2, [pc, #40]	; (8006a00 <vPortEnterCritical+0x3c>)
 80069d6:	6813      	ldr	r3, [r2, #0]
 80069d8:	3301      	adds	r3, #1
 80069da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d000      	beq.n	80069e2 <vPortEnterCritical+0x1e>
}
 80069e0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069e2:	4b08      	ldr	r3, [pc, #32]	; (8006a04 <vPortEnterCritical+0x40>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069ea:	d0f9      	beq.n	80069e0 <vPortEnterCritical+0x1c>
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	e7fe      	b.n	80069fc <vPortEnterCritical+0x38>
 80069fe:	bf00      	nop
 8006a00:	20000060 	.word	0x20000060
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <vPortExitCritical+0x28>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	b943      	cbnz	r3, 8006a20 <vPortExitCritical+0x18>
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	e7fe      	b.n	8006a1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006a20:	3b01      	subs	r3, #1
 8006a22:	4a03      	ldr	r2, [pc, #12]	; (8006a30 <vPortExitCritical+0x28>)
 8006a24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a26:	b90b      	cbnz	r3, 8006a2c <vPortExitCritical+0x24>
	__asm volatile
 8006a28:	f383 8811 	msr	BASEPRI, r3
}
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	20000060 	.word	0x20000060
	...

08006a40 <PendSV_Handler>:
	__asm volatile
 8006a40:	f3ef 8009 	mrs	r0, PSP
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <pxCurrentTCBConst>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f01e 0f10 	tst.w	lr, #16
 8006a50:	bf08      	it	eq
 8006a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	6010      	str	r0, [r2, #0]
 8006a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a64:	f380 8811 	msr	BASEPRI, r0
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f7ff fc6c 	bl	800634c <vTaskSwitchContext>
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f380 8811 	msr	BASEPRI, r0
 8006a7c:	bc09      	pop	{r0, r3}
 8006a7e:	6819      	ldr	r1, [r3, #0]
 8006a80:	6808      	ldr	r0, [r1, #0]
 8006a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a86:	f01e 0f10 	tst.w	lr, #16
 8006a8a:	bf08      	it	eq
 8006a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a90:	f380 8809 	msr	PSP, r0
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w

08006aa0 <pxCurrentTCBConst>:
 8006aa0:	200002b0 	.word	0x200002b0

08006aa4 <SysTick_Handler>:
{
 8006aa4:	b508      	push	{r3, lr}
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006ab6:	f7ff fadb 	bl	8006070 <xTaskIncrementTick>
 8006aba:	b118      	cbz	r0, 8006ac4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006abc:	4b03      	ldr	r3, [pc, #12]	; (8006acc <SysTick_Handler+0x28>)
 8006abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f383 8811 	msr	BASEPRI, r3
}
 8006aca:	bd08      	pop	{r3, pc}
 8006acc:	e000ed04 	.word	0xe000ed04

08006ad0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ad0:	4a08      	ldr	r2, [pc, #32]	; (8006af4 <vPortSetupTimerInterrupt+0x24>)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ad6:	4908      	ldr	r1, [pc, #32]	; (8006af8 <vPortSetupTimerInterrupt+0x28>)
 8006ad8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <vPortSetupTimerInterrupt+0x2c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4908      	ldr	r1, [pc, #32]	; (8006b00 <vPortSetupTimerInterrupt+0x30>)
 8006ae0:	fba1 1303 	umull	r1, r3, r1, r3
 8006ae4:	099b      	lsrs	r3, r3, #6
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	4906      	ldr	r1, [pc, #24]	; (8006b04 <vPortSetupTimerInterrupt+0x34>)
 8006aea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aec:	2307      	movs	r3, #7
 8006aee:	6013      	str	r3, [r2, #0]
}
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	e000e010 	.word	0xe000e010
 8006af8:	e000e018 	.word	0xe000e018
 8006afc:	20000064 	.word	0x20000064
 8006b00:	10624dd3 	.word	0x10624dd3
 8006b04:	e000e014 	.word	0xe000e014

08006b08 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b08:	4b3a      	ldr	r3, [pc, #232]	; (8006bf4 <xPortStartScheduler+0xec>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	4b3a      	ldr	r3, [pc, #232]	; (8006bf8 <xPortStartScheduler+0xf0>)
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d00d      	beq.n	8006b2e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b12:	4b38      	ldr	r3, [pc, #224]	; (8006bf4 <xPortStartScheduler+0xec>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b39      	ldr	r3, [pc, #228]	; (8006bfc <xPortStartScheduler+0xf4>)
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d111      	bne.n	8006b40 <xPortStartScheduler+0x38>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	e7fe      	b.n	8006b2c <xPortStartScheduler+0x24>
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	e7fe      	b.n	8006b3e <xPortStartScheduler+0x36>
{
 8006b40:	b510      	push	{r4, lr}
 8006b42:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b44:	4b2e      	ldr	r3, [pc, #184]	; (8006c00 <xPortStartScheduler+0xf8>)
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b4c:	22ff      	movs	r2, #255	; 0xff
 8006b4e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b58:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006b5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b60:	4a28      	ldr	r2, [pc, #160]	; (8006c04 <xPortStartScheduler+0xfc>)
 8006b62:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b64:	4b28      	ldr	r3, [pc, #160]	; (8006c08 <xPortStartScheduler+0x100>)
 8006b66:	2207      	movs	r2, #7
 8006b68:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b6a:	e009      	b.n	8006b80 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 8006b6c:	4a26      	ldr	r2, [pc, #152]	; (8006c08 <xPortStartScheduler+0x100>)
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b74:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b80:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006b84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b88:	d1f0      	bne.n	8006b6c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8006b8a:	4b1f      	ldr	r3, [pc, #124]	; (8006c08 <xPortStartScheduler+0x100>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d008      	beq.n	8006ba4 <xPortStartScheduler+0x9c>
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	e7fe      	b.n	8006ba2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ba4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <xPortStartScheduler+0x100>)
 8006bac:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	4a13      	ldr	r2, [pc, #76]	; (8006c00 <xPortStartScheduler+0xf8>)
 8006bb4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bb6:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <xPortStartScheduler+0x104>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006bbe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006bc6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006bc8:	f7ff ff82 	bl	8006ad0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006bcc:	2400      	movs	r4, #0
 8006bce:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <xPortStartScheduler+0x108>)
 8006bd0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8006bd2:	f7ff fec3 	bl	800695c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bd6:	4a0f      	ldr	r2, [pc, #60]	; (8006c14 <xPortStartScheduler+0x10c>)
 8006bd8:	6813      	ldr	r3, [r2, #0]
 8006bda:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006bde:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8006be0:	f7ff fea8 	bl	8006934 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006be4:	f7ff fbb2 	bl	800634c <vTaskSwitchContext>
	prvTaskExitError();
 8006be8:	f7ff fe84 	bl	80068f4 <prvTaskExitError>
}
 8006bec:	4620      	mov	r0, r4
 8006bee:	b002      	add	sp, #8
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	bf00      	nop
 8006bf4:	e000ed00 	.word	0xe000ed00
 8006bf8:	410fc271 	.word	0x410fc271
 8006bfc:	410fc270 	.word	0x410fc270
 8006c00:	e000e400 	.word	0xe000e400
 8006c04:	200003d8 	.word	0x200003d8
 8006c08:	200003dc 	.word	0x200003dc
 8006c0c:	e000ed20 	.word	0xe000ed20
 8006c10:	20000060 	.word	0x20000060
 8006c14:	e000ef34 	.word	0xe000ef34

08006c18 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c18:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c1c:	2b0f      	cmp	r3, #15
 8006c1e:	d90f      	bls.n	8006c40 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c20:	4a10      	ldr	r2, [pc, #64]	; (8006c64 <vPortValidateInterruptPriority+0x4c>)
 8006c22:	5c9b      	ldrb	r3, [r3, r2]
 8006c24:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c26:	4a10      	ldr	r2, [pc, #64]	; (8006c68 <vPortValidateInterruptPriority+0x50>)
 8006c28:	7812      	ldrb	r2, [r2, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d908      	bls.n	8006c40 <vPortValidateInterruptPriority+0x28>
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	e7fe      	b.n	8006c3e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <vPortValidateInterruptPriority+0x54>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c48:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <vPortValidateInterruptPriority+0x58>)
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d908      	bls.n	8006c62 <vPortValidateInterruptPriority+0x4a>
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	e7fe      	b.n	8006c60 <vPortValidateInterruptPriority+0x48>
	}
 8006c62:	4770      	bx	lr
 8006c64:	e000e3f0 	.word	0xe000e3f0
 8006c68:	200003d8 	.word	0x200003d8
 8006c6c:	e000ed0c 	.word	0xe000ed0c
 8006c70:	200003dc 	.word	0x200003dc

08006c74 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c74:	4a12      	ldr	r2, [pc, #72]	; (8006cc0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c76:	f012 0f07 	tst.w	r2, #7
 8006c7a:	d01e      	beq.n	8006cba <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c7c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c7e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c82:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8006c86:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c88:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c8a:	480e      	ldr	r0, [pc, #56]	; (8006cc4 <prvHeapInit+0x50>)
 8006c8c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c8e:	2100      	movs	r1, #0
 8006c90:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c92:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006c94:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c96:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006c9a:	480b      	ldr	r0, [pc, #44]	; (8006cc8 <prvHeapInit+0x54>)
 8006c9c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006c9e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ca0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ca2:	1a99      	subs	r1, r3, r2
 8006ca4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ca6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ca8:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <prvHeapInit+0x58>)
 8006caa:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cac:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <prvHeapInit+0x5c>)
 8006cae:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cb0:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <prvHeapInit+0x60>)
 8006cb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cb6:	601a      	str	r2, [r3, #0]
}
 8006cb8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cbe:	e7e4      	b.n	8006c8a <prvHeapInit+0x16>
 8006cc0:	200003e4 	.word	0x200003e4
 8006cc4:	20003ff0 	.word	0x20003ff0
 8006cc8:	200003e0 	.word	0x200003e0
 8006ccc:	20003fec 	.word	0x20003fec
 8006cd0:	20003fe8 	.word	0x20003fe8
 8006cd4:	20003fe4 	.word	0x20003fe4

08006cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cd8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <prvInsertBlockIntoFreeList+0x50>)
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4282      	cmp	r2, r0
 8006ce0:	d31b      	bcc.n	8006d1a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ce2:	6859      	ldr	r1, [r3, #4]
 8006ce4:	185c      	adds	r4, r3, r1
 8006ce6:	4284      	cmp	r4, r0
 8006ce8:	d103      	bne.n	8006cf2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cea:	6840      	ldr	r0, [r0, #4]
 8006cec:	4401      	add	r1, r0
 8006cee:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cf0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cf2:	6841      	ldr	r1, [r0, #4]
 8006cf4:	1844      	adds	r4, r0, r1
 8006cf6:	42a2      	cmp	r2, r4
 8006cf8:	d113      	bne.n	8006d22 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cfa:	4c0c      	ldr	r4, [pc, #48]	; (8006d2c <prvInsertBlockIntoFreeList+0x54>)
 8006cfc:	6824      	ldr	r4, [r4, #0]
 8006cfe:	42a2      	cmp	r2, r4
 8006d00:	d00d      	beq.n	8006d1e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d02:	6852      	ldr	r2, [r2, #4]
 8006d04:	4411      	add	r1, r2
 8006d06:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d0e:	4298      	cmp	r0, r3
 8006d10:	d000      	beq.n	8006d14 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d12:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d18:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	e7de      	b.n	8006cdc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d1e:	6004      	str	r4, [r0, #0]
 8006d20:	e7f5      	b.n	8006d0e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d22:	6002      	str	r2, [r0, #0]
 8006d24:	e7f3      	b.n	8006d0e <prvInsertBlockIntoFreeList+0x36>
 8006d26:	bf00      	nop
 8006d28:	20003ff0 	.word	0x20003ff0
 8006d2c:	200003e0 	.word	0x200003e0

08006d30 <pvPortMalloc>:
{
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006d34:	f7ff f994 	bl	8006060 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006d38:	4b46      	ldr	r3, [pc, #280]	; (8006e54 <pvPortMalloc+0x124>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	b1bb      	cbz	r3, 8006d6e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d3e:	4b46      	ldr	r3, [pc, #280]	; (8006e58 <pvPortMalloc+0x128>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	421c      	tst	r4, r3
 8006d44:	d176      	bne.n	8006e34 <pvPortMalloc+0x104>
			if( xWantedSize > 0 )
 8006d46:	b1ac      	cbz	r4, 8006d74 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8006d48:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d4a:	f014 0f07 	tst.w	r4, #7
 8006d4e:	d011      	beq.n	8006d74 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d50:	f024 0407 	bic.w	r4, r4, #7
 8006d54:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d56:	f004 0307 	and.w	r3, r4, #7
 8006d5a:	b15b      	cbz	r3, 8006d74 <pvPortMalloc+0x44>
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	e7fe      	b.n	8006d6c <pvPortMalloc+0x3c>
			prvHeapInit();
 8006d6e:	f7ff ff81 	bl	8006c74 <prvHeapInit>
 8006d72:	e7e4      	b.n	8006d3e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d74:	2c00      	cmp	r4, #0
 8006d76:	d05f      	beq.n	8006e38 <pvPortMalloc+0x108>
 8006d78:	4b38      	ldr	r3, [pc, #224]	; (8006e5c <pvPortMalloc+0x12c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	d35d      	bcc.n	8006e3c <pvPortMalloc+0x10c>
				pxBlock = xStart.pxNextFreeBlock;
 8006d80:	4b37      	ldr	r3, [pc, #220]	; (8006e60 <pvPortMalloc+0x130>)
 8006d82:	681e      	ldr	r6, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d84:	e001      	b.n	8006d8a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8006d86:	4633      	mov	r3, r6
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d88:	4616      	mov	r6, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d8a:	6872      	ldr	r2, [r6, #4]
 8006d8c:	42a2      	cmp	r2, r4
 8006d8e:	d202      	bcs.n	8006d96 <pvPortMalloc+0x66>
 8006d90:	6832      	ldr	r2, [r6, #0]
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	d1f7      	bne.n	8006d86 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8006d96:	4a2f      	ldr	r2, [pc, #188]	; (8006e54 <pvPortMalloc+0x124>)
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	42b2      	cmp	r2, r6
 8006d9c:	d050      	beq.n	8006e40 <pvPortMalloc+0x110>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d9e:	681d      	ldr	r5, [r3, #0]
 8006da0:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006da2:	6832      	ldr	r2, [r6, #0]
 8006da4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006da6:	6873      	ldr	r3, [r6, #4]
 8006da8:	1b1b      	subs	r3, r3, r4
 8006daa:	2b10      	cmp	r3, #16
 8006dac:	d910      	bls.n	8006dd0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dae:	1930      	adds	r0, r6, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006db0:	f010 0f07 	tst.w	r0, #7
 8006db4:	d008      	beq.n	8006dc8 <pvPortMalloc+0x98>
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	e7fe      	b.n	8006dc6 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006dc8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dca:	6074      	str	r4, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dcc:	f7ff ff84 	bl	8006cd8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dd0:	6872      	ldr	r2, [r6, #4]
 8006dd2:	4922      	ldr	r1, [pc, #136]	; (8006e5c <pvPortMalloc+0x12c>)
 8006dd4:	680b      	ldr	r3, [r1, #0]
 8006dd6:	1a9b      	subs	r3, r3, r2
 8006dd8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dda:	4922      	ldr	r1, [pc, #136]	; (8006e64 <pvPortMalloc+0x134>)
 8006ddc:	6809      	ldr	r1, [r1, #0]
 8006dde:	428b      	cmp	r3, r1
 8006de0:	d201      	bcs.n	8006de6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006de2:	4920      	ldr	r1, [pc, #128]	; (8006e64 <pvPortMalloc+0x134>)
 8006de4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006de6:	4b1c      	ldr	r3, [pc, #112]	; (8006e58 <pvPortMalloc+0x128>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	6033      	str	r3, [r6, #0]
		traceMALLOC( pvReturn, xWantedSize );
 8006df2:	b11d      	cbz	r5, 8006dfc <pvPortMalloc+0xcc>
 8006df4:	4a1c      	ldr	r2, [pc, #112]	; (8006e68 <pvPortMalloc+0x138>)
 8006df6:	6813      	ldr	r3, [r2, #0]
 8006df8:	4423      	add	r3, r4
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	f000 ffda 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8006e00:	f000 ff9a 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8006e04:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <pvPortMalloc+0x13c>)
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	4218      	tst	r0, r3
 8006e0a:	d005      	beq.n	8006e18 <pvPortMalloc+0xe8>
 8006e0c:	b1d5      	cbz	r5, 8006e44 <pvPortMalloc+0x114>
 8006e0e:	4622      	mov	r2, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	2038      	movs	r0, #56	; 0x38
 8006e14:	f001 fbd4 	bl	80085c0 <prvTraceStoreEvent2>
	( void ) xTaskResumeAll();
 8006e18:	f7ff f9dc 	bl	80061d4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e1c:	f015 0f07 	tst.w	r5, #7
 8006e20:	d016      	beq.n	8006e50 <pvPortMalloc+0x120>
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	e7fe      	b.n	8006e32 <pvPortMalloc+0x102>
void *pvReturn = NULL;
 8006e34:	2500      	movs	r5, #0
 8006e36:	e7e1      	b.n	8006dfc <pvPortMalloc+0xcc>
 8006e38:	2500      	movs	r5, #0
 8006e3a:	e7df      	b.n	8006dfc <pvPortMalloc+0xcc>
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	e7dd      	b.n	8006dfc <pvPortMalloc+0xcc>
 8006e40:	2500      	movs	r5, #0
 8006e42:	e7db      	b.n	8006dfc <pvPortMalloc+0xcc>
		traceMALLOC( pvReturn, xWantedSize );
 8006e44:	4622      	mov	r2, r4
 8006e46:	4629      	mov	r1, r5
 8006e48:	20e9      	movs	r0, #233	; 0xe9
 8006e4a:	f001 fbb9 	bl	80085c0 <prvTraceStoreEvent2>
 8006e4e:	e7e3      	b.n	8006e18 <pvPortMalloc+0xe8>
}
 8006e50:	4628      	mov	r0, r5
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	200003e0 	.word	0x200003e0
 8006e58:	20003fe4 	.word	0x20003fe4
 8006e5c:	20003fe8 	.word	0x20003fe8
 8006e60:	20003ff0 	.word	0x20003ff0
 8006e64:	20003fec 	.word	0x20003fec
 8006e68:	200049a0 	.word	0x200049a0
 8006e6c:	2000006a 	.word	0x2000006a

08006e70 <vPortFree>:
	if( pv != NULL )
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d043      	beq.n	8006efc <vPortFree+0x8c>
{
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006e78:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e7c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006e80:	4a1f      	ldr	r2, [pc, #124]	; (8006f00 <vPortFree+0x90>)
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	4213      	tst	r3, r2
 8006e86:	d108      	bne.n	8006e9a <vPortFree+0x2a>
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	e7fe      	b.n	8006e98 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e9a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006e9e:	b141      	cbz	r1, 8006eb2 <vPortFree+0x42>
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	e7fe      	b.n	8006eb0 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006eb2:	ea23 0302 	bic.w	r3, r3, r2
 8006eb6:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006eba:	f7ff f8d1 	bl	8006060 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ebe:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006ec2:	4a10      	ldr	r2, [pc, #64]	; (8006f04 <vPortFree+0x94>)
 8006ec4:	6813      	ldr	r3, [r2, #0]
 8006ec6:	440b      	add	r3, r1
 8006ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 8006eca:	4a0f      	ldr	r2, [pc, #60]	; (8006f08 <vPortFree+0x98>)
 8006ecc:	6813      	ldr	r3, [r2, #0]
 8006ece:	1a5b      	subs	r3, r3, r1
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	f000 ff6f 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 8006ed6:	f000 ff2f 	bl	8007d38 <prvTraceGetTaskNumberHigh16>
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <vPortFree+0x9c>)
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	4218      	tst	r0, r3
 8006ee0:	d006      	beq.n	8006ef0 <vPortFree+0x80>
 8006ee2:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8006ee6:	4252      	negs	r2, r2
 8006ee8:	4621      	mov	r1, r4
 8006eea:	2039      	movs	r0, #57	; 0x39
 8006eec:	f001 fb68 	bl	80085c0 <prvTraceStoreEvent2>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f7ff fef1 	bl	8006cd8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006ef6:	f7ff f96d 	bl	80061d4 <xTaskResumeAll>
}
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20003fe4 	.word	0x20003fe4
 8006f04:	20003fe8 	.word	0x20003fe8
 8006f08:	200049a0 	.word	0x200049a0
 8006f0c:	2000006a 	.word	0x2000006a

08006f10 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8006f10:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 8006f12:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d902      	bls.n	8006f1e <_GetAvailWriteSpace+0xe>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  } else {
    r = RdOff - WrOff - 1u;
 8006f18:	1a9b      	subs	r3, r3, r2
 8006f1a:	1e58      	subs	r0, r3, #1
  }
  return r;
}
 8006f1c:	4770      	bx	lr
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006f1e:	6880      	ldr	r0, [r0, #8]
 8006f20:	1a80      	subs	r0, r0, r2
 8006f22:	4403      	add	r3, r0
 8006f24:	1e58      	subs	r0, r3, #1
 8006f26:	4770      	bx	lr

08006f28 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8006f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	4688      	mov	r8, r1
 8006f30:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
 8006f32:	68c7      	ldr	r7, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 8006f34:	6884      	ldr	r4, [r0, #8]
 8006f36:	1be4      	subs	r4, r4, r7
  if (Rem > NumBytes) {
 8006f38:	4294      	cmp	r4, r2
 8006f3a:	d80e      	bhi.n	8006f5a <_WriteNoCheck+0x32>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8006f3c:	6840      	ldr	r0, [r0, #4]
 8006f3e:	4622      	mov	r2, r4
 8006f40:	4438      	add	r0, r7
 8006f42:	f002 ffbc 	bl	8009ebe <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8006f46:	1b36      	subs	r6, r6, r4
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8006f48:	4632      	mov	r2, r6
 8006f4a:	eb08 0104 	add.w	r1, r8, r4
 8006f4e:	6868      	ldr	r0, [r5, #4]
 8006f50:	f002 ffb5 	bl	8009ebe <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8006f54:	60ee      	str	r6, [r5, #12]
}
 8006f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8006f5a:	6840      	ldr	r0, [r0, #4]
 8006f5c:	4438      	add	r0, r7
 8006f5e:	f002 ffae 	bl	8009ebe <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8006f62:	443e      	add	r6, r7
 8006f64:	60ee      	str	r6, [r5, #12]
 8006f66:	e7f6      	b.n	8006f56 <_WriteNoCheck+0x2e>

08006f68 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8006f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	4688      	mov	r8, r1
 8006f70:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
 8006f72:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
 8006f74:	f04f 0900 	mov.w	r9, #0
 8006f78:	e01a      	b.n	8006fb0 <_WriteBlocking+0x48>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8006f7a:	68b2      	ldr	r2, [r6, #8]
 8006f7c:	1b64      	subs	r4, r4, r5
 8006f7e:	4414      	add	r4, r2
 8006f80:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8006f82:	68b3      	ldr	r3, [r6, #8]
 8006f84:	1b5c      	subs	r4, r3, r5
 8006f86:	4294      	cmp	r4, r2
 8006f88:	bf28      	it	cs
 8006f8a:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8006f8c:	42bc      	cmp	r4, r7
 8006f8e:	bf28      	it	cs
 8006f90:	463c      	movcs	r4, r7
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8006f92:	6870      	ldr	r0, [r6, #4]
 8006f94:	4622      	mov	r2, r4
 8006f96:	4641      	mov	r1, r8
 8006f98:	4428      	add	r0, r5
 8006f9a:	f002 ff90 	bl	8009ebe <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8006f9e:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
 8006fa0:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
 8006fa2:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
 8006fa4:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
 8006fa6:	68b3      	ldr	r3, [r6, #8]
 8006fa8:	42ab      	cmp	r3, r5
 8006faa:	d007      	beq.n	8006fbc <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
 8006fac:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 8006fae:	b13f      	cbz	r7, 8006fc0 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8006fb0:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
 8006fb2:	42a5      	cmp	r5, r4
 8006fb4:	d2e1      	bcs.n	8006f7a <_WriteBlocking+0x12>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8006fb6:	1b64      	subs	r4, r4, r5
 8006fb8:	1e62      	subs	r2, r4, #1
 8006fba:	e7e2      	b.n	8006f82 <_WriteBlocking+0x1a>
      WrOff = 0u;
 8006fbc:	2500      	movs	r5, #0
 8006fbe:	e7f5      	b.n	8006fac <_WriteBlocking+0x44>
}
 8006fc0:	4648      	mov	r0, r9
 8006fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08006fc8 <_DoInit>:
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006fc8:	4b10      	ldr	r3, [pc, #64]	; (800700c <_DoInit+0x44>)
 8006fca:	2203      	movs	r2, #3
 8006fcc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006fce:	615a      	str	r2, [r3, #20]
  p->aUp[0].sName         = "Terminal";
 8006fd0:	490f      	ldr	r1, [pc, #60]	; (8007010 <_DoInit+0x48>)
 8006fd2:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006fd4:	4a0f      	ldr	r2, [pc, #60]	; (8007014 <_DoInit+0x4c>)
 8006fd6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8006fd8:	2240      	movs	r2, #64	; 0x40
 8006fda:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006fdc:	2200      	movs	r2, #0
 8006fde:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006fe0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
 8006fe4:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006fe6:	490c      	ldr	r1, [pc, #48]	; (8007018 <_DoInit+0x50>)
 8006fe8:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8006fea:	2110      	movs	r1, #16
 8006fec:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006fee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006ff0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006ff2:	675a      	str	r2, [r3, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
 8006ff4:	4a09      	ldr	r2, [pc, #36]	; (800701c <_DoInit+0x54>)
 8006ff6:	6810      	ldr	r0, [r2, #0]
 8006ff8:	f8c3 0007 	str.w	r0, [r3, #7]
  strcpy(&p->acID[0], "SEGGER");
 8006ffc:	4a08      	ldr	r2, [pc, #32]	; (8007020 <_DoInit+0x58>)
 8006ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007002:	6018      	str	r0, [r3, #0]
 8007004:	8099      	strh	r1, [r3, #4]
  p->acID[6] = ' ';
 8007006:	2220      	movs	r2, #32
 8007008:	719a      	strb	r2, [r3, #6]
}
 800700a:	4770      	bx	lr
 800700c:	20004b58 	.word	0x20004b58
 8007010:	0800e3a4 	.word	0x0800e3a4
 8007014:	20004008 	.word	0x20004008
 8007018:	20003ff8 	.word	0x20003ff8
 800701c:	0800e3b0 	.word	0x0800e3b0
 8007020:	0800e3b4 	.word	0x0800e3b4

08007024 <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	460f      	mov	r7, r1
 8007028:	4616      	mov	r6, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007030:	00dd      	lsls	r5, r3, #3
 8007032:	4b17      	ldr	r3, [pc, #92]	; (8007090 <SEGGER_RTT_WriteNoLock+0x6c>)
 8007034:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8007036:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800703a:	00c2      	lsls	r2, r0, #3
 800703c:	4413      	add	r3, r2
 800703e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8007040:	2c01      	cmp	r4, #1
 8007042:	d010      	beq.n	8007066 <SEGGER_RTT_WriteNoLock+0x42>
 8007044:	b11c      	cbz	r4, 800704e <SEGGER_RTT_WriteNoLock+0x2a>
 8007046:	2c02      	cmp	r4, #2
 8007048:	d01b      	beq.n	8007082 <SEGGER_RTT_WriteNoLock+0x5e>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
 800704a:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
 800704c:	e017      	b.n	800707e <SEGGER_RTT_WriteNoLock+0x5a>
    Avail = _GetAvailWriteSpace(pRing);
 800704e:	4628      	mov	r0, r5
 8007050:	f7ff ff5e 	bl	8006f10 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 8007054:	4286      	cmp	r6, r0
 8007056:	d812      	bhi.n	800707e <SEGGER_RTT_WriteNoLock+0x5a>
      _WriteNoCheck(pRing, pData, NumBytes);
 8007058:	4632      	mov	r2, r6
 800705a:	4639      	mov	r1, r7
 800705c:	4628      	mov	r0, r5
 800705e:	f7ff ff63 	bl	8006f28 <_WriteNoCheck>
      Status = NumBytes;
 8007062:	4634      	mov	r4, r6
 8007064:	e00b      	b.n	800707e <SEGGER_RTT_WriteNoLock+0x5a>
    Avail = _GetAvailWriteSpace(pRing);
 8007066:	4628      	mov	r0, r5
 8007068:	f7ff ff52 	bl	8006f10 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 800706c:	4634      	mov	r4, r6
 800706e:	4286      	cmp	r6, r0
 8007070:	bf28      	it	cs
 8007072:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 8007074:	4622      	mov	r2, r4
 8007076:	4639      	mov	r1, r7
 8007078:	4628      	mov	r0, r5
 800707a:	f7ff ff55 	bl	8006f28 <_WriteNoCheck>
}
 800707e:	4620      	mov	r0, r4
 8007080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8007082:	4632      	mov	r2, r6
 8007084:	4628      	mov	r0, r5
 8007086:	f7ff ff6f 	bl	8006f68 <_WriteBlocking>
 800708a:	4604      	mov	r4, r0
    break;
 800708c:	e7f7      	b.n	800707e <SEGGER_RTT_WriteNoLock+0x5a>
 800708e:	bf00      	nop
 8007090:	20004b58 	.word	0x20004b58

08007094 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	4605      	mov	r5, r0
 8007098:	460e      	mov	r6, r1
 800709a:	4617      	mov	r7, r2
  unsigned Status;
  //
  INIT();
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <SEGGER_RTT_Write+0x30>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	b16b      	cbz	r3, 80070be <SEGGER_RTT_Write+0x2a>
  SEGGER_RTT_LOCK();
 80070a2:	f3ef 8411 	mrs	r4, BASEPRI
 80070a6:	f04f 0120 	mov.w	r1, #32
 80070aa:	f381 8811 	msr	BASEPRI, r1
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80070ae:	463a      	mov	r2, r7
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7ff ffb6 	bl	8007024 <SEGGER_RTT_WriteNoLock>
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 80070b8:	f384 8811 	msr	BASEPRI, r4
  //
  return Status;
}
 80070bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 80070be:	f7ff ff83 	bl	8006fc8 <_DoInit>
 80070c2:	e7ee      	b.n	80070a2 <SEGGER_RTT_Write+0xe>
 80070c4:	20004b58 	.word	0x20004b58

080070c8 <CL_init>:





void CL_init() {
 80070c8:	b510      	push	{r4, lr}
#if IMU

	//Start timer 11, used for integral calculations
	HAL_TIM_Base_Start(&htim11);
 80070ca:	480e      	ldr	r0, [pc, #56]	; (8007104 <CL_init+0x3c>)
 80070cc:	f7fd f9c0 	bl	8004450 <HAL_TIM_Base_Start>

	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 80070d0:	480d      	ldr	r0, [pc, #52]	; (8007108 <CL_init+0x40>)
 80070d2:	f7f9 ffa5 	bl	8001020 <imu_init>
 80070d6:	b188      	cbz	r0, 80070fc <CL_init+0x34>
	/////////////////////////////////////////////////////////////////
	////////////////////////// Init timers for PWM //////////////////
	/////////////////////////////////////////////////////////////////

	//Start up PWMs
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80070d8:	4c0c      	ldr	r4, [pc, #48]	; (800710c <CL_init+0x44>)
 80070da:	2100      	movs	r1, #0
 80070dc:	4620      	mov	r0, r4
 80070de:	f7fd fbcd 	bl	800487c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80070e2:	2104      	movs	r1, #4
 80070e4:	4620      	mov	r0, r4
 80070e6:	f7fd fbc9 	bl	800487c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80070ea:	2108      	movs	r1, #8
 80070ec:	4620      	mov	r0, r4
 80070ee:	f7fd fbc5 	bl	800487c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80070f2:	210c      	movs	r1, #12
 80070f4:	4620      	mov	r0, r4
 80070f6:	f7fd fbc1 	bl	800487c <HAL_TIM_PWM_Start>
//	PWM1_Set(2500);
//	PWM2_Set(2500);
//	PWM3_Set(2500);
//	PWM4_Set(2500);

}
 80070fa:	bd10      	pop	{r4, pc}
		imu_calibrate();
 80070fc:	f7fa fbec 	bl	80018d8 <imu_calibrate>
 8007100:	e7ea      	b.n	80070d8 <CL_init+0x10>
 8007102:	bf00      	nop
 8007104:	200051a8 	.word	0x200051a8
 8007108:	200049d4 	.word	0x200049d4
 800710c:	20005128 	.word	0x20005128

08007110 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8007110:	4b01      	ldr	r3, [pc, #4]	; (8007118 <PWM1_Set+0x8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6358      	str	r0, [r3, #52]	; 0x34
}
 8007116:	4770      	bx	lr
 8007118:	20005128 	.word	0x20005128

0800711c <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 800711c:	4b01      	ldr	r3, [pc, #4]	; (8007124 <PWM2_Set+0x8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6398      	str	r0, [r3, #56]	; 0x38

}
 8007122:	4770      	bx	lr
 8007124:	20005128 	.word	0x20005128

08007128 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8007128:	4b01      	ldr	r3, [pc, #4]	; (8007130 <PWM3_Set+0x8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 800712e:	4770      	bx	lr
 8007130:	20005128 	.word	0x20005128

08007134 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8007134:	4b01      	ldr	r3, [pc, #4]	; (800713c <PWM4_Set+0x8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6418      	str	r0, [r3, #64]	; 0x40
}
 800713a:	4770      	bx	lr
 800713c:	20005128 	.word	0x20005128

08007140 <CL_main>:
void CL_main(bool airmode, uint16_t throttle, float pitch_setpoint, float roll_setpoint, float yaw_setpoint, float *roll, float *pitch, float *yaw ) {
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	ed2d 8b04 	vpush	{d8-d9}
 8007146:	4605      	mov	r5, r0
 8007148:	460c      	mov	r4, r1
 800714a:	eeb0 9a40 	vmov.f32	s18, s0
 800714e:	eef0 8a60 	vmov.f32	s17, s1
 8007152:	eeb0 8a41 	vmov.f32	s16, s2
 8007156:	4610      	mov	r0, r2
 8007158:	4619      	mov	r1, r3
	calc_RollPitchYaw(roll, pitch, NULL, yaw);
 800715a:	9b08      	ldr	r3, [sp, #32]
 800715c:	2200      	movs	r2, #0
 800715e:	f7fa fd5f 	bl	8001c20 <calc_RollPitchYaw>
	if (airmode && throttle > 1250) {
 8007162:	b125      	cbz	r5, 800716e <CL_main+0x2e>
 8007164:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8007168:	429c      	cmp	r4, r3
 800716a:	f200 8093 	bhi.w	8007294 <CL_main+0x154>
		pid_output_roll = 0;
 800716e:	2300      	movs	r3, #0
 8007170:	4a59      	ldr	r2, [pc, #356]	; (80072d8 <CL_main+0x198>)
 8007172:	6013      	str	r3, [r2, #0]
		pid_output_pitch = 0;
 8007174:	4a59      	ldr	r2, [pc, #356]	; (80072dc <CL_main+0x19c>)
 8007176:	6013      	str	r3, [r2, #0]
		pid_output_yaw = 0;
 8007178:	4a59      	ldr	r2, [pc, #356]	; (80072e0 <CL_main+0x1a0>)
 800717a:	6013      	str	r3, [r2, #0]
		reset_pid_roll();
 800717c:	f7fa ffd2 	bl	8002124 <reset_pid_roll>
		reset_pid_pitch();
 8007180:	f7fb f84e 	bl	8002220 <reset_pid_pitch>
		reset_pid_yaw();
 8007184:	f7fb f8ca 	bl	800231c <reset_pid_yaw>
	esc1_total = throttle + (int) pid_output_roll + (int) pid_output_pitch + (int) pid_output_yaw;
 8007188:	4b53      	ldr	r3, [pc, #332]	; (80072d8 <CL_main+0x198>)
 800718a:	edd3 7a00 	vldr	s15, [r3]
 800718e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007192:	ee17 1a90 	vmov	r1, s15
 8007196:	1863      	adds	r3, r4, r1
 8007198:	4a50      	ldr	r2, [pc, #320]	; (80072dc <CL_main+0x19c>)
 800719a:	edd2 7a00 	vldr	s15, [r2]
 800719e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071a2:	ee17 0a90 	vmov	r0, s15
 80071a6:	181d      	adds	r5, r3, r0
 80071a8:	4a4d      	ldr	r2, [pc, #308]	; (80072e0 <CL_main+0x1a0>)
 80071aa:	edd2 7a00 	vldr	s15, [r2]
 80071ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071b2:	ee17 2a90 	vmov	r2, s15
 80071b6:	4415      	add	r5, r2
 80071b8:	4e4a      	ldr	r6, [pc, #296]	; (80072e4 <CL_main+0x1a4>)
 80071ba:	6035      	str	r5, [r6, #0]
	esc2_total = throttle + (int) pid_output_roll - (int) pid_output_pitch - (int) pid_output_yaw;
 80071bc:	1a1b      	subs	r3, r3, r0
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	4e49      	ldr	r6, [pc, #292]	; (80072e8 <CL_main+0x1a8>)
 80071c2:	6033      	str	r3, [r6, #0]
	esc3_total = throttle - (int) pid_output_roll + (int) pid_output_pitch - (int) pid_output_yaw;
 80071c4:	1a61      	subs	r1, r4, r1
 80071c6:	1844      	adds	r4, r0, r1
 80071c8:	1aa4      	subs	r4, r4, r2
 80071ca:	4e48      	ldr	r6, [pc, #288]	; (80072ec <CL_main+0x1ac>)
 80071cc:	6034      	str	r4, [r6, #0]
	esc4_total = throttle - (int) pid_output_roll - (int) pid_output_pitch + (int) pid_output_yaw;
 80071ce:	1a09      	subs	r1, r1, r0
 80071d0:	4411      	add	r1, r2
 80071d2:	4a47      	ldr	r2, [pc, #284]	; (80072f0 <CL_main+0x1b0>)
 80071d4:	6011      	str	r1, [r2, #0]
	if (esc1_total < ESC_MIN) {
 80071d6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80071da:	4295      	cmp	r5, r2
 80071dc:	dc03      	bgt.n	80071e6 <CL_main+0xa6>
		esc1_total = ESC_MIN;
 80071de:	4a41      	ldr	r2, [pc, #260]	; (80072e4 <CL_main+0x1a4>)
 80071e0:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80071e4:	6010      	str	r0, [r2, #0]
	if (esc1_total > ESC_MAX) {
 80071e6:	4a3f      	ldr	r2, [pc, #252]	; (80072e4 <CL_main+0x1a4>)
 80071e8:	6810      	ldr	r0, [r2, #0]
 80071ea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80071ee:	4290      	cmp	r0, r2
 80071f0:	dd03      	ble.n	80071fa <CL_main+0xba>
		esc1_total = ESC_MAX;
 80071f2:	4a3c      	ldr	r2, [pc, #240]	; (80072e4 <CL_main+0x1a4>)
 80071f4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80071f8:	6010      	str	r0, [r2, #0]
	if (esc2_total < ESC_MIN) {
 80071fa:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80071fe:	4293      	cmp	r3, r2
 8007200:	dc03      	bgt.n	800720a <CL_main+0xca>
		esc2_total = ESC_MIN;
 8007202:	4b39      	ldr	r3, [pc, #228]	; (80072e8 <CL_main+0x1a8>)
 8007204:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007208:	601a      	str	r2, [r3, #0]
	if (esc2_total > ESC_MAX) {
 800720a:	4b37      	ldr	r3, [pc, #220]	; (80072e8 <CL_main+0x1a8>)
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007212:	429a      	cmp	r2, r3
 8007214:	dd03      	ble.n	800721e <CL_main+0xde>
		esc2_total = ESC_MAX;
 8007216:	4b34      	ldr	r3, [pc, #208]	; (80072e8 <CL_main+0x1a8>)
 8007218:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800721c:	601a      	str	r2, [r3, #0]
	if (esc3_total < ESC_MIN) {
 800721e:	f240 43e1 	movw	r3, #1249	; 0x4e1
 8007222:	429c      	cmp	r4, r3
 8007224:	dc03      	bgt.n	800722e <CL_main+0xee>
		esc3_total = ESC_MIN;
 8007226:	4b31      	ldr	r3, [pc, #196]	; (80072ec <CL_main+0x1ac>)
 8007228:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800722c:	601a      	str	r2, [r3, #0]
	if (esc3_total > ESC_MAX) {
 800722e:	4b2f      	ldr	r3, [pc, #188]	; (80072ec <CL_main+0x1ac>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007236:	429a      	cmp	r2, r3
 8007238:	dd03      	ble.n	8007242 <CL_main+0x102>
		esc3_total = ESC_MAX;
 800723a:	4b2c      	ldr	r3, [pc, #176]	; (80072ec <CL_main+0x1ac>)
 800723c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007240:	601a      	str	r2, [r3, #0]
	if (esc4_total < ESC_MIN) {
 8007242:	f240 43e1 	movw	r3, #1249	; 0x4e1
 8007246:	4299      	cmp	r1, r3
 8007248:	dc03      	bgt.n	8007252 <CL_main+0x112>
		esc4_total = ESC_MIN;
 800724a:	4b29      	ldr	r3, [pc, #164]	; (80072f0 <CL_main+0x1b0>)
 800724c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007250:	601a      	str	r2, [r3, #0]
	if (esc4_total > ESC_MAX) {
 8007252:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <CL_main+0x1b0>)
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800725a:	429a      	cmp	r2, r3
 800725c:	dd03      	ble.n	8007266 <CL_main+0x126>
		esc4_total = ESC_MAX;
 800725e:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <CL_main+0x1b0>)
 8007260:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007264:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8007266:	4b1f      	ldr	r3, [pc, #124]	; (80072e4 <CL_main+0x1a4>)
 8007268:	8818      	ldrh	r0, [r3, #0]
 800726a:	f7ff ff51 	bl	8007110 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 800726e:	4b1e      	ldr	r3, [pc, #120]	; (80072e8 <CL_main+0x1a8>)
 8007270:	8818      	ldrh	r0, [r3, #0]
 8007272:	f7ff ff53 	bl	800711c <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8007276:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <CL_main+0x1ac>)
 8007278:	8818      	ldrh	r0, [r3, #0]
 800727a:	f7ff ff55 	bl	8007128 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 800727e:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <CL_main+0x1b0>)
 8007280:	8818      	ldrh	r0, [r3, #0]
 8007282:	f7ff ff57 	bl	8007134 <PWM4_Set>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8007286:	2120      	movs	r1, #32
 8007288:	481a      	ldr	r0, [pc, #104]	; (80072f4 <CL_main+0x1b4>)
 800728a:	f7fb fb19 	bl	80028c0 <HAL_GPIO_TogglePin>
}
 800728e:	ecbd 8b04 	vpop	{d8-d9}
 8007292:	bd70      	pop	{r4, r5, r6, pc}
		pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, pitch_setpoint);
 8007294:	eef0 0a49 	vmov.f32	s1, s18
 8007298:	2000      	movs	r0, #0
 800729a:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <CL_main+0x1b8>)
 800729c:	ed93 0a00 	vldr	s0, [r3]
 80072a0:	f7fa ff52 	bl	8002148 <pid_calculate_pitch>
 80072a4:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <CL_main+0x19c>)
 80072a6:	ed83 0a00 	vstr	s0, [r3]
		pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 80072aa:	eef0 0a68 	vmov.f32	s1, s17
 80072ae:	2000      	movs	r0, #0
 80072b0:	4b12      	ldr	r3, [pc, #72]	; (80072fc <CL_main+0x1bc>)
 80072b2:	ed93 0a00 	vldr	s0, [r3]
 80072b6:	f7fa fec9 	bl	800204c <pid_calculate_roll>
 80072ba:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <CL_main+0x198>)
 80072bc:	ed83 0a00 	vstr	s0, [r3]
		pid_output_yaw = pid_calculate_yaw(imu_yaw_rate, 0, yaw_setpoint);
 80072c0:	eef0 0a48 	vmov.f32	s1, s16
 80072c4:	2000      	movs	r0, #0
 80072c6:	4b0e      	ldr	r3, [pc, #56]	; (8007300 <CL_main+0x1c0>)
 80072c8:	ed93 0a00 	vldr	s0, [r3]
 80072cc:	f7fa ffba 	bl	8002244 <pid_calculate_yaw>
 80072d0:	4b03      	ldr	r3, [pc, #12]	; (80072e0 <CL_main+0x1a0>)
 80072d2:	ed83 0a00 	vstr	s0, [r3]
 80072d6:	e757      	b.n	8007188 <CL_main+0x48>
 80072d8:	20004068 	.word	0x20004068
 80072dc:	20004064 	.word	0x20004064
 80072e0:	2000406c 	.word	0x2000406c
 80072e4:	20004048 	.word	0x20004048
 80072e8:	2000404c 	.word	0x2000404c
 80072ec:	20004050 	.word	0x20004050
 80072f0:	20004054 	.word	0x20004054
 80072f4:	40020800 	.word	0x40020800
 80072f8:	20004058 	.word	0x20004058
 80072fc:	2000405c 	.word	0x2000405c
 8007300:	20004060 	.word	0x20004060

08007304 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8007304:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8007306:	4805      	ldr	r0, [pc, #20]	; (800731c <MX_CRC_Init+0x18>)
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <MX_CRC_Init+0x1c>)
 800730a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800730c:	f7fb f8ac 	bl	8002468 <HAL_CRC_Init>
 8007310:	b900      	cbnz	r0, 8007314 <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 8007312:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007314:	f000 fa82 	bl	800781c <Error_Handler>
}
 8007318:	e7fb      	b.n	8007312 <MX_CRC_Init+0xe>
 800731a:	bf00      	nop
 800731c:	20004c00 	.word	0x20004c00
 8007320:	40023000 	.word	0x40023000

08007324 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8007324:	6802      	ldr	r2, [r0, #0]
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <HAL_CRC_MspInit+0x28>)
 8007328:	429a      	cmp	r2, r3
 800732a:	d000      	beq.n	800732e <HAL_CRC_MspInit+0xa>
 800732c:	4770      	bx	lr
{
 800732e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007330:	2300      	movs	r3, #0
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <HAL_CRC_MspInit+0x2c>)
 8007336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800733c:	631a      	str	r2, [r3, #48]	; 0x30
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8007348:	b002      	add	sp, #8
 800734a:	4770      	bx	lr
 800734c:	40023000 	.word	0x40023000
 8007350:	40023800 	.word	0x40023800

08007354 <StartControlLoop>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 8007354:	b500      	push	{lr}
 8007356:	b083      	sub	sp, #12
  /* USER CODE BEGIN StartControlLoop */

	CL_init();
 8007358:	f7ff feb6 	bl	80070c8 <CL_init>
	//HAL_TIM_Base_Start(&htim10);
	xSemaphoreGiveFromISR(PWM_Sem, NULL);
 800735c:	2100      	movs	r1, #0
 800735e:	4b18      	ldr	r3, [pc, #96]	; (80073c0 <StartControlLoop+0x6c>)
 8007360:	6818      	ldr	r0, [r3, #0]
 8007362:	f7fe fa83 	bl	800586c <xQueueGiveFromISR>
 8007366:	e002      	b.n	800736e <StartControlLoop+0x1a>
					&TxRx.pitch, &TxRx.yaw);
			xSemaphoreGive(RFDataMutexHandle);
		}

		//2ms = 500Hz rate
		osDelay(2);
 8007368:	2002      	movs	r0, #2
 800736a:	f7fd fe0e 	bl	8004f8a <osDelay>
		main_loop = 1;
 800736e:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <StartControlLoop+0x70>)
 8007370:	2201      	movs	r2, #1
 8007372:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(PWM_Sem, portMAX_DELAY)) {
 8007374:	f04f 31ff 	mov.w	r1, #4294967295
 8007378:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <StartControlLoop+0x6c>)
 800737a:	6818      	ldr	r0, [r3, #0]
 800737c:	f7fe fa7c 	bl	8005878 <xQueueSemaphoreTake>
 8007380:	2800      	cmp	r0, #0
 8007382:	d0f1      	beq.n	8007368 <StartControlLoop+0x14>
			xSemaphoreTake(RFDataMutexHandle, portMAX_DELAY);
 8007384:	4c10      	ldr	r4, [pc, #64]	; (80073c8 <StartControlLoop+0x74>)
 8007386:	f04f 31ff 	mov.w	r1, #4294967295
 800738a:	6820      	ldr	r0, [r4, #0]
 800738c:	f7fe fa74 	bl	8005878 <xQueueSemaphoreTake>
			CL_main(TxRx.airmode, TxRx.throttle, TxRx.pitch_setpoint,
 8007390:	4a0e      	ldr	r2, [pc, #56]	; (80073cc <StartControlLoop+0x78>)
 8007392:	ed12 1a02 	vldr	s2, [r2, #-8]
 8007396:	ed52 0a03 	vldr	s1, [r2, #-12]
 800739a:	ed12 0a04 	vldr	s0, [r2, #-16]
 800739e:	f832 1c12 	ldrh.w	r1, [r2, #-18]
 80073a2:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 80073a6:	1d13      	adds	r3, r2, #4
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	4613      	mov	r3, r2
 80073ac:	3a04      	subs	r2, #4
 80073ae:	f7ff fec7 	bl	8007140 <CL_main>
			xSemaphoreGive(RFDataMutexHandle);
 80073b2:	2300      	movs	r3, #0
 80073b4:	461a      	mov	r2, r3
 80073b6:	4619      	mov	r1, r3
 80073b8:	6820      	ldr	r0, [r4, #0]
 80073ba:	f7fe f80b 	bl	80053d4 <xQueueGenericSend>
 80073be:	e7d3      	b.n	8007368 <StartControlLoop+0x14>
 80073c0:	20005084 	.word	0x20005084
 80073c4:	20004074 	.word	0x20004074
 80073c8:	2000508c 	.word	0x2000508c
 80073cc:	2000507c 	.word	0x2000507c

080073d0 <StartGPSUpdate>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSUpdate */
void StartGPSUpdate(void const * argument)
{
 80073d0:	b508      	push	{r3, lr}

#endif

	/* Infinite loop */
	for (;;) {
		osDelay(10);
 80073d2:	200a      	movs	r0, #10
 80073d4:	f7fd fdd9 	bl	8004f8a <osDelay>
 80073d8:	e7fb      	b.n	80073d2 <StartGPSUpdate+0x2>
	...

080073dc <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <vApplicationGetIdleTaskMemory+0x10>)
 80073de:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80073e0:	4b03      	ldr	r3, [pc, #12]	; (80073f0 <vApplicationGetIdleTaskMemory+0x14>)
 80073e2:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	6013      	str	r3, [r2, #0]
}
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	20004278 	.word	0x20004278
 80073f0:	20004078 	.word	0x20004078

080073f4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	b092      	sub	sp, #72	; 0x48
  osMutexDef(GPSDataMutex);
 80073f8:	2400      	movs	r4, #0
 80073fa:	9410      	str	r4, [sp, #64]	; 0x40
 80073fc:	9411      	str	r4, [sp, #68]	; 0x44
  GPSDataMutexHandle = osMutexCreate(osMutex(GPSDataMutex));
 80073fe:	a810      	add	r0, sp, #64	; 0x40
 8007400:	f7fd fdcc 	bl	8004f9c <osMutexCreate>
 8007404:	4b1d      	ldr	r3, [pc, #116]	; (800747c <MX_FREERTOS_Init+0x88>)
 8007406:	6018      	str	r0, [r3, #0]
  osMutexDef(RFDataMutex);
 8007408:	940e      	str	r4, [sp, #56]	; 0x38
 800740a:	940f      	str	r4, [sp, #60]	; 0x3c
  RFDataMutexHandle = osMutexCreate(osMutex(RFDataMutex));
 800740c:	a80e      	add	r0, sp, #56	; 0x38
 800740e:	f7fd fdc5 	bl	8004f9c <osMutexCreate>
 8007412:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <MX_FREERTOS_Init+0x8c>)
 8007414:	6018      	str	r0, [r3, #0]
	vSemaphoreCreateBinary(PWM_Sem);
 8007416:	2203      	movs	r2, #3
 8007418:	4621      	mov	r1, r4
 800741a:	2001      	movs	r0, #1
 800741c:	f7fd ff84 	bl	8005328 <xQueueGenericCreate>
 8007420:	4b18      	ldr	r3, [pc, #96]	; (8007484 <MX_FREERTOS_Init+0x90>)
 8007422:	6018      	str	r0, [r3, #0]
 8007424:	b120      	cbz	r0, 8007430 <MX_FREERTOS_Init+0x3c>
 8007426:	4623      	mov	r3, r4
 8007428:	4622      	mov	r2, r4
 800742a:	4621      	mov	r1, r4
 800742c:	f7fd ffd2 	bl	80053d4 <xQueueGenericSend>
	RadioData_To_CL_Queue = xQueueCreate(8, sizeof(struct TxRxVars));
 8007430:	2200      	movs	r2, #0
 8007432:	211c      	movs	r1, #28
 8007434:	2008      	movs	r0, #8
 8007436:	f7fd ff77 	bl	8005328 <xQueueGenericCreate>
 800743a:	4b13      	ldr	r3, [pc, #76]	; (8007488 <MX_FREERTOS_Init+0x94>)
 800743c:	6018      	str	r0, [r3, #0]
  osThreadDef(ControlLoop, StartControlLoop, osPriorityRealtime, 0, 1024);
 800743e:	4c13      	ldr	r4, [pc, #76]	; (800748c <MX_FREERTOS_Init+0x98>)
 8007440:	ad07      	add	r5, sp, #28
 8007442:	4626      	mov	r6, r4
 8007444:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007448:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800744c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ControlLoopHandle = osThreadCreate(osThread(ControlLoop), NULL);
 8007450:	2100      	movs	r1, #0
 8007452:	a807      	add	r0, sp, #28
 8007454:	f7fd fd63 	bl	8004f1e <osThreadCreate>
 8007458:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <MX_FREERTOS_Init+0x9c>)
 800745a:	6018      	str	r0, [r3, #0]
  osThreadDef(GPSUpdate, StartGPSUpdate, osPriorityNormal, 0, 128);
 800745c:	466d      	mov	r5, sp
 800745e:	341c      	adds	r4, #28
 8007460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007464:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007468:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSUpdateHandle = osThreadCreate(osThread(GPSUpdate), NULL);
 800746c:	2100      	movs	r1, #0
 800746e:	4668      	mov	r0, sp
 8007470:	f7fd fd55 	bl	8004f1e <osThreadCreate>
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <MX_FREERTOS_Init+0xa0>)
 8007476:	6018      	str	r0, [r3, #0]
}
 8007478:	b012      	add	sp, #72	; 0x48
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	20005088 	.word	0x20005088
 8007480:	2000508c 	.word	0x2000508c
 8007484:	20005084 	.word	0x20005084
 8007488:	20004070 	.word	0x20004070
 800748c:	0800e338 	.word	0x0800e338
 8007490:	20004c0c 	.word	0x20004c0c
 8007494:	20004c10 	.word	0x20004c10

08007498 <HAL_GPIO_EXTI_Callback>:

//////GPIO interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	//GPIO pin configured to capture rising edge interrupt of PWM signals
	if (GPIO_Pin == PWM_INT_Pin && main_loop) {
 8007498:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800749c:	d000      	beq.n	80074a0 <HAL_GPIO_EXTI_Callback+0x8>
 800749e:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80074a0:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_INT_Pin && main_loop) {
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <HAL_GPIO_EXTI_Callback+0x20>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	b903      	cbnz	r3, 80074aa <HAL_GPIO_EXTI_Callback+0x12>

	//	if (GPIO_Pin == kill_Pin && main_loop) {
	//		//kill();
	//	}

}
 80074a8:	bd08      	pop	{r3, pc}
		xSemaphoreGiveFromISR(PWM_Sem, NULL);
 80074aa:	2100      	movs	r1, #0
 80074ac:	4b03      	ldr	r3, [pc, #12]	; (80074bc <HAL_GPIO_EXTI_Callback+0x24>)
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	f7fe f9dc 	bl	800586c <xQueueGiveFromISR>
}
 80074b4:	e7f8      	b.n	80074a8 <HAL_GPIO_EXTI_Callback+0x10>
 80074b6:	bf00      	nop
 80074b8:	20004074 	.word	0x20004074
 80074bc:	20005084 	.word	0x20005084

080074c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80074c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c4:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c6:	2400      	movs	r4, #0
 80074c8:	9405      	str	r4, [sp, #20]
 80074ca:	9406      	str	r4, [sp, #24]
 80074cc:	9407      	str	r4, [sp, #28]
 80074ce:	9408      	str	r4, [sp, #32]
 80074d0:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074d2:	9400      	str	r4, [sp, #0]
 80074d4:	4b55      	ldr	r3, [pc, #340]	; (800762c <MX_GPIO_Init+0x16c>)
 80074d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074d8:	f042 0204 	orr.w	r2, r2, #4
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30
 80074de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074e0:	f002 0204 	and.w	r2, r2, #4
 80074e4:	9200      	str	r2, [sp, #0]
 80074e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80074e8:	9401      	str	r4, [sp, #4]
 80074ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30
 80074f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80074f8:	9201      	str	r2, [sp, #4]
 80074fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074fc:	9402      	str	r4, [sp, #8]
 80074fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	631a      	str	r2, [r3, #48]	; 0x30
 8007506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007508:	f002 0201 	and.w	r2, r2, #1
 800750c:	9202      	str	r2, [sp, #8]
 800750e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007510:	9403      	str	r4, [sp, #12]
 8007512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007514:	f042 0202 	orr.w	r2, r2, #2
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
 800751a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800751c:	f002 0202 	and.w	r2, r2, #2
 8007520:	9203      	str	r2, [sp, #12]
 8007522:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007524:	9404      	str	r4, [sp, #16]
 8007526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007528:	f042 0208 	orr.w	r2, r2, #8
 800752c:	631a      	str	r2, [r3, #48]	; 0x30
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	9304      	str	r3, [sp, #16]
 8007536:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8007538:	4e3d      	ldr	r6, [pc, #244]	; (8007630 <MX_GPIO_Init+0x170>)
 800753a:	4622      	mov	r2, r4
 800753c:	2120      	movs	r1, #32
 800753e:	4630      	mov	r0, r6
 8007540:	f7fb f9b8 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8007544:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8007644 <MX_GPIO_Init+0x184>
 8007548:	4622      	mov	r2, r4
 800754a:	2120      	movs	r1, #32
 800754c:	4648      	mov	r0, r9
 800754e:	f7fb f9b1 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8007552:	4f38      	ldr	r7, [pc, #224]	; (8007634 <MX_GPIO_Init+0x174>)
 8007554:	4622      	mov	r2, r4
 8007556:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800755a:	4638      	mov	r0, r7
 800755c:	f7fb f9aa 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC3 PC4 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8007560:	f64f 731b 	movw	r3, #65307	; 0xff1b
 8007564:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007566:	2503      	movs	r5, #3
 8007568:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800756c:	a905      	add	r1, sp, #20
 800756e:	4648      	mov	r0, r9
 8007570:	f7fb f8ce 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007574:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007576:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007578:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800757a:	a905      	add	r1, sp, #20
 800757c:	482e      	ldr	r0, [pc, #184]	; (8007638 <MX_GPIO_Init+0x178>)
 800757e:	f7fb f8c7 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA6 PA7 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007582:	f649 63df 	movw	r3, #40671	; 0x9edf
 8007586:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007588:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800758a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800758c:	a905      	add	r1, sp, #20
 800758e:	4630      	mov	r0, r6
 8007590:	f7fb f8be 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007594:	f04f 0a20 	mov.w	sl, #32
 8007598:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800759c:	f04f 0801 	mov.w	r8, #1
 80075a0:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075a6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075a8:	a905      	add	r1, sp, #20
 80075aa:	4630      	mov	r0, r6
 80075ac:	f7fb f8b0 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80075b0:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075b4:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075ba:	f04f 0a02 	mov.w	sl, #2
 80075be:	f8cd a020 	str.w	sl, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075c2:	a905      	add	r1, sp, #20
 80075c4:	4648      	mov	r0, r9
 80075c6:	f7fb f8a3 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 80075ca:	2337      	movs	r3, #55	; 0x37
 80075cc:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075ce:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075d2:	a905      	add	r1, sp, #20
 80075d4:	4638      	mov	r0, r7
 80075d6:	f7fb f89b 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80075da:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80075de:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075e0:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075e6:	f8cd a020 	str.w	sl, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075ea:	a905      	add	r1, sp, #20
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7fb f88f 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 80075f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075f6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80075f8:	4b10      	ldr	r3, [pc, #64]	; (800763c <MX_GPIO_Init+0x17c>)
 80075fa:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 80075fe:	a905      	add	r1, sp, #20
 8007600:	4630      	mov	r0, r6
 8007602:	f7fb f885 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007606:	2304      	movs	r3, #4
 8007608:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800760a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800760e:	a905      	add	r1, sp, #20
 8007610:	480b      	ldr	r0, [pc, #44]	; (8007640 <MX_GPIO_Init+0x180>)
 8007612:	f7fb f87d 	bl	8002710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8007616:	4622      	mov	r2, r4
 8007618:	2107      	movs	r1, #7
 800761a:	2017      	movs	r0, #23
 800761c:	f7fa fee2 	bl	80023e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007620:	2017      	movs	r0, #23
 8007622:	f7fa ff13 	bl	800244c <HAL_NVIC_EnableIRQ>

}
 8007626:	b00a      	add	sp, #40	; 0x28
 8007628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762c:	40023800 	.word	0x40023800
 8007630:	40020000 	.word	0x40020000
 8007634:	40020400 	.word	0x40020400
 8007638:	40021c00 	.word	0x40021c00
 800763c:	10110000 	.word	0x10110000
 8007640:	40020c00 	.word	0x40020c00
 8007644:	40020800 	.word	0x40020800

08007648 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007648:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800764a:	480b      	ldr	r0, [pc, #44]	; (8007678 <MX_I2C2_Init+0x30>)
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <MX_I2C2_Init+0x34>)
 800764e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <MX_I2C2_Init+0x38>)
 8007652:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007654:	2300      	movs	r3, #0
 8007656:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007658:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800765a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800765e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007660:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007662:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007664:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007666:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007668:	f7fb fb18 	bl	8002c9c <HAL_I2C_Init>
 800766c:	b900      	cbnz	r0, 8007670 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
  }

}
 800766e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007670:	f000 f8d4 	bl	800781c <Error_Handler>
}
 8007674:	e7fb      	b.n	800766e <MX_I2C2_Init+0x26>
 8007676:	bf00      	nop
 8007678:	200049d4 	.word	0x200049d4
 800767c:	40005800 	.word	0x40005800
 8007680:	00061a80 	.word	0x00061a80

08007684 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007688:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800768a:	2300      	movs	r3, #0
 800768c:	9303      	str	r3, [sp, #12]
 800768e:	9304      	str	r3, [sp, #16]
 8007690:	9305      	str	r3, [sp, #20]
 8007692:	9306      	str	r3, [sp, #24]
 8007694:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8007696:	6802      	ldr	r2, [r0, #0]
 8007698:	4b26      	ldr	r3, [pc, #152]	; (8007734 <HAL_I2C_MspInit+0xb0>)
 800769a:	429a      	cmp	r2, r3
 800769c:	d002      	beq.n	80076a4 <HAL_I2C_MspInit+0x20>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800769e:	b009      	add	sp, #36	; 0x24
 80076a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076a4:	2500      	movs	r5, #0
 80076a6:	9501      	str	r5, [sp, #4]
 80076a8:	4c23      	ldr	r4, [pc, #140]	; (8007738 <HAL_I2C_MspInit+0xb4>)
 80076aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076ac:	f043 0302 	orr.w	r3, r3, #2
 80076b0:	6323      	str	r3, [r4, #48]	; 0x30
 80076b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80076bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076c2:	f04f 0912 	mov.w	r9, #18
 80076c6:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076ca:	f04f 0801 	mov.w	r8, #1
 80076ce:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076d2:	2703      	movs	r7, #3
 80076d4:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80076d6:	2304      	movs	r3, #4
 80076d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076da:	4e18      	ldr	r6, [pc, #96]	; (800773c <HAL_I2C_MspInit+0xb8>)
 80076dc:	a903      	add	r1, sp, #12
 80076de:	4630      	mov	r0, r6
 80076e0:	f7fb f816 	bl	8002710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80076e4:	2308      	movs	r3, #8
 80076e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076e8:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076ec:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076f0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80076f2:	2309      	movs	r3, #9
 80076f4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076f6:	a903      	add	r1, sp, #12
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7fb f809 	bl	8002710 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80076fe:	9502      	str	r5, [sp, #8]
 8007700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007702:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007706:	6423      	str	r3, [r4, #64]	; 0x40
 8007708:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800770a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800770e:	9302      	str	r3, [sp, #8]
 8007710:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 8007712:	462a      	mov	r2, r5
 8007714:	2106      	movs	r1, #6
 8007716:	2021      	movs	r0, #33	; 0x21
 8007718:	f7fa fe64 	bl	80023e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800771c:	2021      	movs	r0, #33	; 0x21
 800771e:	f7fa fe95 	bl	800244c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 8007722:	462a      	mov	r2, r5
 8007724:	2106      	movs	r1, #6
 8007726:	2022      	movs	r0, #34	; 0x22
 8007728:	f7fa fe5c 	bl	80023e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800772c:	2022      	movs	r0, #34	; 0x22
 800772e:	f7fa fe8d 	bl	800244c <HAL_NVIC_EnableIRQ>
}
 8007732:	e7b4      	b.n	800769e <HAL_I2C_MspInit+0x1a>
 8007734:	40005800 	.word	0x40005800
 8007738:	40023800 	.word	0x40023800
 800773c:	40020400 	.word	0x40020400

08007740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007740:	b530      	push	{r4, r5, lr}
 8007742:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007744:	2230      	movs	r2, #48	; 0x30
 8007746:	2100      	movs	r1, #0
 8007748:	a808      	add	r0, sp, #32
 800774a:	f002 fbc3 	bl	8009ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800774e:	2400      	movs	r4, #0
 8007750:	9403      	str	r4, [sp, #12]
 8007752:	9404      	str	r4, [sp, #16]
 8007754:	9405      	str	r4, [sp, #20]
 8007756:	9406      	str	r4, [sp, #24]
 8007758:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800775a:	9401      	str	r4, [sp, #4]
 800775c:	4b1a      	ldr	r3, [pc, #104]	; (80077c8 <SystemClock_Config+0x88>)
 800775e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007760:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007764:	641a      	str	r2, [r3, #64]	; 0x40
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007770:	9402      	str	r4, [sp, #8]
 8007772:	4b16      	ldr	r3, [pc, #88]	; (80077cc <SystemClock_Config+0x8c>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007782:	9302      	str	r3, [sp, #8]
 8007784:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007786:	2502      	movs	r5, #2
 8007788:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800778a:	2301      	movs	r3, #1
 800778c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800778e:	2310      	movs	r3, #16
 8007790:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007792:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007794:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007796:	2308      	movs	r3, #8
 8007798:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800779a:	2364      	movs	r3, #100	; 0x64
 800779c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800779e:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80077a0:	2304      	movs	r3, #4
 80077a2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80077a4:	a808      	add	r0, sp, #32
 80077a6:	f7fc fa67 	bl	8003c78 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80077aa:	230f      	movs	r3, #15
 80077ac:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80077ae:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80077b0:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80077b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077b6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80077b8:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80077ba:	2103      	movs	r1, #3
 80077bc:	a803      	add	r0, sp, #12
 80077be:	f7fc fc93 	bl	80040e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80077c2:	b015      	add	sp, #84	; 0x54
 80077c4:	bd30      	pop	{r4, r5, pc}
 80077c6:	bf00      	nop
 80077c8:	40023800 	.word	0x40023800
 80077cc:	40007000 	.word	0x40007000

080077d0 <main>:
{
 80077d0:	b508      	push	{r3, lr}
  HAL_Init();
 80077d2:	f7fa fdb5 	bl	8002340 <HAL_Init>
  SystemClock_Config();
 80077d6:	f7ff ffb3 	bl	8007740 <SystemClock_Config>
  MX_GPIO_Init();
 80077da:	f7ff fe71 	bl	80074c0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80077de:	f7ff ff33 	bl	8007648 <MX_I2C2_Init>
  MX_TIM4_Init();
 80077e2:	f000 fa47 	bl	8007c74 <MX_TIM4_Init>
  MX_SPI2_Init();
 80077e6:	f000 f81b 	bl	8007820 <MX_SPI2_Init>
  MX_CRC_Init();
 80077ea:	f7ff fd8b 	bl	8007304 <MX_CRC_Init>
  MX_TIM11_Init();
 80077ee:	f000 f9b1 	bl	8007b54 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 80077f2:	f000 ff1d 	bl	8008630 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80077f6:	f000 f993 	bl	8007b20 <MX_TIM10_Init>
  MX_FREERTOS_Init(); 
 80077fa:	f7ff fdfb 	bl	80073f4 <MX_FREERTOS_Init>
  osKernelStart();
 80077fe:	f7fd fb89 	bl	8004f14 <osKernelStart>
 8007802:	e7fe      	b.n	8007802 <main+0x32>

08007804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007806:	6802      	ldr	r2, [r0, #0]
 8007808:	4b03      	ldr	r3, [pc, #12]	; (8007818 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800780a:	429a      	cmp	r2, r3
 800780c:	d000      	beq.n	8007810 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800780e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8007810:	f7fa fdb0 	bl	8002374 <HAL_IncTick>
}
 8007814:	e7fb      	b.n	800780e <HAL_TIM_PeriodElapsedCallback+0xa>
 8007816:	bf00      	nop
 8007818:	40010000 	.word	0x40010000

0800781c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800781c:	4770      	bx	lr
	...

08007820 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007820:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8007822:	480e      	ldr	r0, [pc, #56]	; (800785c <MX_SPI2_Init+0x3c>)
 8007824:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <MX_SPI2_Init+0x40>)
 8007826:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007828:	f44f 7382 	mov.w	r3, #260	; 0x104
 800782c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800782e:	2300      	movs	r3, #0
 8007830:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007832:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007834:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007836:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800783c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800783e:	2220      	movs	r2, #32
 8007840:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007842:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007844:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007846:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007848:	230a      	movs	r3, #10
 800784a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800784c:	f7fc fd3c 	bl	80042c8 <HAL_SPI_Init>
 8007850:	b900      	cbnz	r0, 8007854 <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 8007852:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007854:	f7ff ffe2 	bl	800781c <Error_Handler>
}
 8007858:	e7fb      	b.n	8007852 <MX_SPI2_Init+0x32>
 800785a:	bf00      	nop
 800785c:	20005090 	.word	0x20005090
 8007860:	40003800 	.word	0x40003800

08007864 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007866:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007868:	2300      	movs	r3, #0
 800786a:	9303      	str	r3, [sp, #12]
 800786c:	9304      	str	r3, [sp, #16]
 800786e:	9305      	str	r3, [sp, #20]
 8007870:	9306      	str	r3, [sp, #24]
 8007872:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8007874:	6802      	ldr	r2, [r0, #0]
 8007876:	4b1f      	ldr	r3, [pc, #124]	; (80078f4 <HAL_SPI_MspInit+0x90>)
 8007878:	429a      	cmp	r2, r3
 800787a:	d001      	beq.n	8007880 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800787c:	b009      	add	sp, #36	; 0x24
 800787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007880:	2400      	movs	r4, #0
 8007882:	9400      	str	r4, [sp, #0]
 8007884:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800788a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800788e:	641a      	str	r2, [r3, #64]	; 0x40
 8007890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007892:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007896:	9200      	str	r2, [sp, #0]
 8007898:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800789a:	9401      	str	r4, [sp, #4]
 800789c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800789e:	f042 0204 	orr.w	r2, r2, #4
 80078a2:	631a      	str	r2, [r3, #48]	; 0x30
 80078a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a6:	f002 0204 	and.w	r2, r2, #4
 80078aa:	9201      	str	r2, [sp, #4]
 80078ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078ae:	9402      	str	r4, [sp, #8]
 80078b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078b2:	f042 0202 	orr.w	r2, r2, #2
 80078b6:	631a      	str	r2, [r3, #48]	; 0x30
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	9302      	str	r3, [sp, #8]
 80078c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80078c2:	2304      	movs	r3, #4
 80078c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c6:	2702      	movs	r7, #2
 80078c8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ca:	2603      	movs	r6, #3
 80078cc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80078ce:	2505      	movs	r5, #5
 80078d0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078d2:	a903      	add	r1, sp, #12
 80078d4:	4808      	ldr	r0, [pc, #32]	; (80078f8 <HAL_SPI_MspInit+0x94>)
 80078d6:	f7fa ff1b 	bl	8002710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80078da:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80078de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078e0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078e4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80078e6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078e8:	a903      	add	r1, sp, #12
 80078ea:	4804      	ldr	r0, [pc, #16]	; (80078fc <HAL_SPI_MspInit+0x98>)
 80078ec:	f7fa ff10 	bl	8002710 <HAL_GPIO_Init>
}
 80078f0:	e7c4      	b.n	800787c <HAL_SPI_MspInit+0x18>
 80078f2:	bf00      	nop
 80078f4:	40003800 	.word	0x40003800
 80078f8:	40020800 	.word	0x40020800
 80078fc:	40020400 	.word	0x40020400

08007900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007900:	b510      	push	{r4, lr}
 8007902:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007904:	2400      	movs	r4, #0
 8007906:	9400      	str	r4, [sp, #0]
 8007908:	4b15      	ldr	r3, [pc, #84]	; (8007960 <HAL_MspInit+0x60>)
 800790a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800790c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007910:	645a      	str	r2, [r3, #68]	; 0x44
 8007912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007914:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007918:	9200      	str	r2, [sp, #0]
 800791a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800791c:	9401      	str	r4, [sp, #4]
 800791e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007920:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007924:	641a      	str	r2, [r3, #64]	; 0x40
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007930:	4622      	mov	r2, r4
 8007932:	210f      	movs	r1, #15
 8007934:	f06f 0001 	mvn.w	r0, #1
 8007938:	f7fa fd54 	bl	80023e4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 11, 0);
 800793c:	4622      	mov	r2, r4
 800793e:	210b      	movs	r1, #11
 8007940:	2004      	movs	r0, #4
 8007942:	f7fa fd4f 	bl	80023e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8007946:	2004      	movs	r0, #4
 8007948:	f7fa fd80 	bl	800244c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 10, 0);
 800794c:	4622      	mov	r2, r4
 800794e:	210a      	movs	r1, #10
 8007950:	2005      	movs	r0, #5
 8007952:	f7fa fd47 	bl	80023e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007956:	2005      	movs	r0, #5
 8007958:	f7fa fd78 	bl	800244c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800795c:	b002      	add	sp, #8
 800795e:	bd10      	pop	{r4, pc}
 8007960:	40023800 	.word	0x40023800

08007964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007964:	b510      	push	{r4, lr}
 8007966:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8007968:	2200      	movs	r2, #0
 800796a:	4601      	mov	r1, r0
 800796c:	2019      	movs	r0, #25
 800796e:	f7fa fd39 	bl	80023e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8007972:	2019      	movs	r0, #25
 8007974:	f7fa fd6a 	bl	800244c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007978:	2400      	movs	r4, #0
 800797a:	9401      	str	r4, [sp, #4]
 800797c:	4b13      	ldr	r3, [pc, #76]	; (80079cc <HAL_InitTick+0x68>)
 800797e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007980:	f042 0201 	orr.w	r2, r2, #1
 8007984:	645a      	str	r2, [r3, #68]	; 0x44
 8007986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007990:	a902      	add	r1, sp, #8
 8007992:	a803      	add	r0, sp, #12
 8007994:	f7fc fc7a 	bl	800428c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007998:	f7fc fc68 	bl	800426c <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800799c:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <HAL_InitTick+0x6c>)
 800799e:	fba3 2300 	umull	r2, r3, r3, r0
 80079a2:	0c9b      	lsrs	r3, r3, #18
 80079a4:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80079a6:	480b      	ldr	r0, [pc, #44]	; (80079d4 <HAL_InitTick+0x70>)
 80079a8:	4a0b      	ldr	r2, [pc, #44]	; (80079d8 <HAL_InitTick+0x74>)
 80079aa:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80079ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80079b0:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80079b2:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80079b4:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079b6:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80079b8:	f7fc fe7c 	bl	80046b4 <HAL_TIM_Base_Init>
 80079bc:	b110      	cbz	r0, 80079c4 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80079be:	2001      	movs	r0, #1
}
 80079c0:	b008      	add	sp, #32
 80079c2:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 80079c4:	4803      	ldr	r0, [pc, #12]	; (80079d4 <HAL_InitTick+0x70>)
 80079c6:	f7fc fd55 	bl	8004474 <HAL_TIM_Base_Start_IT>
 80079ca:	e7f9      	b.n	80079c0 <HAL_InitTick+0x5c>
 80079cc:	40023800 	.word	0x40023800
 80079d0:	431bde83 	.word	0x431bde83
 80079d4:	200050e8 	.word	0x200050e8
 80079d8:	40010000 	.word	0x40010000

080079dc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80079dc:	4770      	bx	lr

080079de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079de:	e7fe      	b.n	80079de <HardFault_Handler>

080079e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079e0:	e7fe      	b.n	80079e0 <MemManage_Handler>

080079e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079e2:	e7fe      	b.n	80079e2 <BusFault_Handler>

080079e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079e4:	e7fe      	b.n	80079e4 <UsageFault_Handler>

080079e6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079e6:	4770      	bx	lr

080079e8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80079e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80079ea:	f7fa fdbb 	bl	8002564 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80079ee:	bd08      	pop	{r3, pc}

080079f0 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80079f0:	4770      	bx	lr

080079f2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80079f2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80079f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079f8:	f7fa ff6c 	bl	80028d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80079fc:	bd08      	pop	{r3, pc}
	...

08007a00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007a00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a02:	4803      	ldr	r0, [pc, #12]	; (8007a10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007a04:	f7fc fd4b 	bl	800449e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8007a08:	4802      	ldr	r0, [pc, #8]	; (8007a14 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8007a0a:	f7fc fd48 	bl	800449e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007a0e:	bd08      	pop	{r3, pc}
 8007a10:	200050e8 	.word	0x200050e8
 8007a14:	20005168 	.word	0x20005168

08007a18 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8007a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8007a1a:	4802      	ldr	r0, [pc, #8]	; (8007a24 <I2C2_EV_IRQHandler+0xc>)
 8007a1c:	f7fc f802 	bl	8003a24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8007a20:	bd08      	pop	{r3, pc}
 8007a22:	bf00      	nop
 8007a24:	200049d4 	.word	0x200049d4

08007a28 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8007a28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8007a2a:	4802      	ldr	r0, [pc, #8]	; (8007a34 <I2C2_ER_IRQHandler+0xc>)
 8007a2c:	f7fc f8c0 	bl	8003bb0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8007a30:	bd08      	pop	{r3, pc}
 8007a32:	bf00      	nop
 8007a34:	200049d4 	.word	0x200049d4

08007a38 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007a38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007a3a:	4802      	ldr	r0, [pc, #8]	; (8007a44 <USART6_IRQHandler+0xc>)
 8007a3c:	f7fd f9cc 	bl	8004dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	//UART_timeout();
  /* USER CODE END USART6_IRQn 1 */
}
 8007a40:	bd08      	pop	{r3, pc}
 8007a42:	bf00      	nop
 8007a44:	20006574 	.word	0x20006574

08007a48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a4e:	2400      	movs	r4, #0
 8007a50:	e004      	b.n	8007a5c <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8007a52:	f3af 8000 	nop.w
 8007a56:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a58:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8007a5a:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a5c:	42b4      	cmp	r4, r6
 8007a5e:	dbf8      	blt.n	8007a52 <_read+0xa>
	}

return len;
}
 8007a60:	4630      	mov	r0, r6
 8007a62:	bd70      	pop	{r4, r5, r6, pc}

08007a64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a68:	2400      	movs	r4, #0
 8007a6a:	e005      	b.n	8007a78 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8007a6c:	1c4d      	adds	r5, r1, #1
 8007a6e:	7808      	ldrb	r0, [r1, #0]
 8007a70:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a74:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8007a76:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a78:	42b4      	cmp	r4, r6
 8007a7a:	dbf7      	blt.n	8007a6c <_write+0x8>
	}
	return len;
}
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}

08007a80 <_close>:

int _close(int file)
{
	return -1;
}
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	4770      	bx	lr

08007a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a8a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	4770      	bx	lr

08007a90 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007a90:	2001      	movs	r0, #1
 8007a92:	4770      	bx	lr

08007a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007a94:	2000      	movs	r0, #0
 8007a96:	4770      	bx	lr

08007a98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a98:	b508      	push	{r3, lr}
 8007a9a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a9c:	4a0b      	ldr	r2, [pc, #44]	; (8007acc <_sbrk+0x34>)
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	b142      	cbz	r2, 8007ab4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007aa2:	4a0a      	ldr	r2, [pc, #40]	; (8007acc <_sbrk+0x34>)
 8007aa4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8007aa6:	4403      	add	r3, r0
 8007aa8:	466a      	mov	r2, sp
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d806      	bhi.n	8007abc <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007aae:	4a07      	ldr	r2, [pc, #28]	; (8007acc <_sbrk+0x34>)
 8007ab0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007ab2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007ab4:	4a05      	ldr	r2, [pc, #20]	; (8007acc <_sbrk+0x34>)
 8007ab6:	4906      	ldr	r1, [pc, #24]	; (8007ad0 <_sbrk+0x38>)
 8007ab8:	6011      	str	r1, [r2, #0]
 8007aba:	e7f2      	b.n	8007aa2 <_sbrk+0xa>
		errno = ENOMEM;
 8007abc:	f002 f9c0 	bl	8009e40 <__errno>
 8007ac0:	230c      	movs	r3, #12
 8007ac2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	e7f3      	b.n	8007ab2 <_sbrk+0x1a>
 8007aca:	bf00      	nop
 8007acc:	200042d4 	.word	0x200042d4
 8007ad0:	200065b8 	.word	0x200065b8

08007ad4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ad4:	490f      	ldr	r1, [pc, #60]	; (8007b14 <SystemInit+0x40>)
 8007ad6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007ada:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	; (8007b18 <SystemInit+0x44>)
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007aec:	2000      	movs	r0, #0
 8007aee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007af6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007afa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007afc:	4a07      	ldr	r2, [pc, #28]	; (8007b1c <SystemInit+0x48>)
 8007afe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b06:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007b08:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b0e:	608b      	str	r3, [r1, #8]
#endif
}
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	e000ed00 	.word	0xe000ed00
 8007b18:	40023800 	.word	0x40023800
 8007b1c:	24003010 	.word	0x24003010

08007b20 <MX_TIM10_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8007b20:	b508      	push	{r3, lr}

  htim10.Instance = TIM10;
 8007b22:	480a      	ldr	r0, [pc, #40]	; (8007b4c <MX_TIM10_Init+0x2c>)
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <MX_TIM10_Init+0x30>)
 8007b26:	6003      	str	r3, [r0, #0]
  htim10.Init.Prescaler = 10000;
 8007b28:	f242 7310 	movw	r3, #10000	; 0x2710
 8007b2c:	6043      	str	r3, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 1000;
 8007b32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b36:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b38:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b3a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8007b3c:	f7fc fdba 	bl	80046b4 <HAL_TIM_Base_Init>
 8007b40:	b900      	cbnz	r0, 8007b44 <MX_TIM10_Init+0x24>
  {
    Error_Handler();
  }

}
 8007b42:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007b44:	f7ff fe6a 	bl	800781c <Error_Handler>
}
 8007b48:	e7fb      	b.n	8007b42 <MX_TIM10_Init+0x22>
 8007b4a:	bf00      	nop
 8007b4c:	20005168 	.word	0x20005168
 8007b50:	40014400 	.word	0x40014400

08007b54 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8007b54:	b508      	push	{r3, lr}

  htim11.Instance = TIM11;
 8007b56:	4809      	ldr	r0, [pc, #36]	; (8007b7c <MX_TIM11_Init+0x28>)
 8007b58:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <MX_TIM11_Init+0x2c>)
 8007b5a:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100;
 8007b5c:	2364      	movs	r3, #100	; 0x64
 8007b5e:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b60:	2300      	movs	r3, #0
 8007b62:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 8007b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b68:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b6a:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b6c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007b6e:	f7fc fda1 	bl	80046b4 <HAL_TIM_Base_Init>
 8007b72:	b900      	cbnz	r0, 8007b76 <MX_TIM11_Init+0x22>
  {
    Error_Handler();
  }

}
 8007b74:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007b76:	f7ff fe51 	bl	800781c <Error_Handler>
}
 8007b7a:	e7fb      	b.n	8007b74 <MX_TIM11_Init+0x20>
 8007b7c:	200051a8 	.word	0x200051a8
 8007b80:	40014800 	.word	0x40014800

08007b84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 8007b84:	6802      	ldr	r2, [r0, #0]
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <HAL_TIM_PWM_MspInit+0x28>)
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d000      	beq.n	8007b8e <HAL_TIM_PWM_MspInit+0xa>
 8007b8c:	4770      	bx	lr
{
 8007b8e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007b90:	2300      	movs	r3, #0
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <HAL_TIM_PWM_MspInit+0x2c>)
 8007b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b98:	f042 0204 	orr.w	r2, r2, #4
 8007b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007ba8:	b002      	add	sp, #8
 8007baa:	4770      	bx	lr
 8007bac:	40000800 	.word	0x40000800
 8007bb0:	40023800 	.word	0x40023800

08007bb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007bb4:	b500      	push	{lr}
 8007bb6:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM10)
 8007bb8:	6803      	ldr	r3, [r0, #0]
 8007bba:	4a15      	ldr	r2, [pc, #84]	; (8007c10 <HAL_TIM_Base_MspInit+0x5c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d005      	beq.n	8007bcc <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM11)
 8007bc0:	4a14      	ldr	r2, [pc, #80]	; (8007c14 <HAL_TIM_Base_MspInit+0x60>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d016      	beq.n	8007bf4 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8007bc6:	b003      	add	sp, #12
 8007bc8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007bcc:	2100      	movs	r1, #0
 8007bce:	9100      	str	r1, [sp, #0]
 8007bd0:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <HAL_TIM_Base_MspInit+0x64>)
 8007bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bd4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007bd8:	645a      	str	r2, [r3, #68]	; 0x44
 8007bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007be4:	460a      	mov	r2, r1
 8007be6:	2019      	movs	r0, #25
 8007be8:	f7fa fbfc 	bl	80023e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007bec:	2019      	movs	r0, #25
 8007bee:	f7fa fc2d 	bl	800244c <HAL_NVIC_EnableIRQ>
 8007bf2:	e7e8      	b.n	8007bc6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <HAL_TIM_Base_MspInit+0x64>)
 8007bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bfc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007c00:	645a      	str	r2, [r3, #68]	; 0x44
 8007c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	9b01      	ldr	r3, [sp, #4]
}
 8007c0c:	e7db      	b.n	8007bc6 <HAL_TIM_Base_MspInit+0x12>
 8007c0e:	bf00      	nop
 8007c10:	40014400 	.word	0x40014400
 8007c14:	40014800 	.word	0x40014800
 8007c18:	40023800 	.word	0x40023800

08007c1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007c1c:	b500      	push	{lr}
 8007c1e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c20:	2300      	movs	r3, #0
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	9302      	str	r3, [sp, #8]
 8007c26:	9303      	str	r3, [sp, #12]
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 8007c2c:	6802      	ldr	r2, [r0, #0]
 8007c2e:	4b0e      	ldr	r3, [pc, #56]	; (8007c68 <HAL_TIM_MspPostInit+0x4c>)
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d002      	beq.n	8007c3a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007c34:	b007      	add	sp, #28
 8007c36:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	4b0b      	ldr	r3, [pc, #44]	; (8007c6c <HAL_TIM_MspPostInit+0x50>)
 8007c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c42:	f042 0202 	orr.w	r2, r2, #2
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8007c52:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007c56:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007c5c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c5e:	a901      	add	r1, sp, #4
 8007c60:	4803      	ldr	r0, [pc, #12]	; (8007c70 <HAL_TIM_MspPostInit+0x54>)
 8007c62:	f7fa fd55 	bl	8002710 <HAL_GPIO_Init>
}
 8007c66:	e7e5      	b.n	8007c34 <HAL_TIM_MspPostInit+0x18>
 8007c68:	40000800 	.word	0x40000800
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	40020400 	.word	0x40020400

08007c74 <MX_TIM4_Init>:
{
 8007c74:	b500      	push	{lr}
 8007c76:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9308      	str	r3, [sp, #32]
 8007c7c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c7e:	9301      	str	r3, [sp, #4]
 8007c80:	9302      	str	r3, [sp, #8]
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	9305      	str	r3, [sp, #20]
 8007c88:	9306      	str	r3, [sp, #24]
 8007c8a:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8007c8c:	4826      	ldr	r0, [pc, #152]	; (8007d28 <MX_TIM4_Init+0xb4>)
 8007c8e:	4a27      	ldr	r2, [pc, #156]	; (8007d2c <MX_TIM4_Init+0xb8>)
 8007c90:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9;
 8007c92:	2209      	movs	r2, #9
 8007c94:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c96:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 20000;
 8007c98:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007c9c:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c9e:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ca0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007ca2:	f7fc fd20 	bl	80046e6 <HAL_TIM_PWM_Init>
 8007ca6:	bb68      	cbnz	r0, 8007d04 <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cac:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007cae:	a908      	add	r1, sp, #32
 8007cb0:	481d      	ldr	r0, [pc, #116]	; (8007d28 <MX_TIM4_Init+0xb4>)
 8007cb2:	f7fc fe01 	bl	80048b8 <HAL_TIMEx_MasterConfigSynchronization>
 8007cb6:	bb40      	cbnz	r0, 8007d0a <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007cb8:	2360      	movs	r3, #96	; 0x60
 8007cba:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007cc0:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8007cc2:	2304      	movs	r3, #4
 8007cc4:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007cc6:	eb0d 0103 	add.w	r1, sp, r3
 8007cca:	4817      	ldr	r0, [pc, #92]	; (8007d28 <MX_TIM4_Init+0xb4>)
 8007ccc:	f7fc fd56 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 8007cd0:	b9f0      	cbnz	r0, 8007d10 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007cd2:	2204      	movs	r2, #4
 8007cd4:	eb0d 0102 	add.w	r1, sp, r2
 8007cd8:	4813      	ldr	r0, [pc, #76]	; (8007d28 <MX_TIM4_Init+0xb4>)
 8007cda:	f7fc fd4f 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 8007cde:	b9d0      	cbnz	r0, 8007d16 <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	a901      	add	r1, sp, #4
 8007ce4:	4810      	ldr	r0, [pc, #64]	; (8007d28 <MX_TIM4_Init+0xb4>)
 8007ce6:	f7fc fd49 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 8007cea:	b9b8      	cbnz	r0, 8007d1c <MX_TIM4_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007cec:	220c      	movs	r2, #12
 8007cee:	a901      	add	r1, sp, #4
 8007cf0:	480d      	ldr	r0, [pc, #52]	; (8007d28 <MX_TIM4_Init+0xb4>)
 8007cf2:	f7fc fd43 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 8007cf6:	b9a0      	cbnz	r0, 8007d22 <MX_TIM4_Init+0xae>
  HAL_TIM_MspPostInit(&htim4);
 8007cf8:	480b      	ldr	r0, [pc, #44]	; (8007d28 <MX_TIM4_Init+0xb4>)
 8007cfa:	f7ff ff8f 	bl	8007c1c <HAL_TIM_MspPostInit>
}
 8007cfe:	b00b      	add	sp, #44	; 0x2c
 8007d00:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007d04:	f7ff fd8a 	bl	800781c <Error_Handler>
 8007d08:	e7ce      	b.n	8007ca8 <MX_TIM4_Init+0x34>
    Error_Handler();
 8007d0a:	f7ff fd87 	bl	800781c <Error_Handler>
 8007d0e:	e7d3      	b.n	8007cb8 <MX_TIM4_Init+0x44>
    Error_Handler();
 8007d10:	f7ff fd84 	bl	800781c <Error_Handler>
 8007d14:	e7dd      	b.n	8007cd2 <MX_TIM4_Init+0x5e>
    Error_Handler();
 8007d16:	f7ff fd81 	bl	800781c <Error_Handler>
 8007d1a:	e7e1      	b.n	8007ce0 <MX_TIM4_Init+0x6c>
    Error_Handler();
 8007d1c:	f7ff fd7e 	bl	800781c <Error_Handler>
 8007d20:	e7e4      	b.n	8007cec <MX_TIM4_Init+0x78>
    Error_Handler();
 8007d22:	f7ff fd7b 	bl	800781c <Error_Handler>
 8007d26:	e7e7      	b.n	8007cf8 <MX_TIM4_Init+0x84>
 8007d28:	20005128 	.word	0x20005128
 8007d2c:	40000800 	.word	0x40000800

08007d30 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 8007d30:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8007d32:	f7fd ff27 	bl	8005b84 <uxQueueGetQueueNumber>
}
 8007d36:	bd08      	pop	{r3, pc}

08007d38 <prvTraceGetTaskNumberHigh16>:
{
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
}

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8007d38:	b508      	push	{r3, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8007d3a:	f7fe fc2f 	bl	800659c <uxTaskGetTaskNumber>
}
 8007d3e:	0c00      	lsrs	r0, r0, #16
 8007d40:	bd08      	pop	{r3, pc}

08007d42 <prvTraceSetTaskNumberHigh16>:
{
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
}

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 8007d42:	b538      	push	{r3, r4, r5, lr}
 8007d44:	4604      	mov	r4, r0
 8007d46:	460d      	mov	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8007d48:	f7fe fc28 	bl	800659c <uxTaskGetTaskNumber>
 8007d4c:	b281      	uxth	r1, r0
 8007d4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8007d52:	4620      	mov	r0, r4
 8007d54:	f7fe fc27 	bl	80065a6 <vTaskSetTaskNumber>
}
 8007d58:	bd38      	pop	{r3, r4, r5, pc}

08007d5a <prvTraceGetQueueNumberHigh16>:
{
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
}

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8007d5a:	b508      	push	{r3, lr}
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 8007d5c:	f7ff ffe8 	bl	8007d30 <prvTraceGetQueueNumber>
}
 8007d60:	0c00      	lsrs	r0, r0, #16
 8007d62:	bd08      	pop	{r3, pc}

08007d64 <prvTraceSetQueueNumberHigh16>:
{
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
}

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	4604      	mov	r4, r0
 8007d68:	460d      	mov	r5, r1
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8007d6a:	f7ff ffe1 	bl	8007d30 <prvTraceGetQueueNumber>
 8007d6e:	b281      	uxth	r1, r0
 8007d70:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8007d74:	4620      	mov	r0, r4
 8007d76:	f7fd ff07 	bl	8005b88 <vQueueSetQueueNumber>
}
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}

08007d7c <prvAddTaskToStackMonitor>:
void prvAddTaskToStackMonitor(void* task)
{
	int foundEmptySlot = 0;

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2b09      	cmp	r3, #9
 8007d80:	dc0e      	bgt.n	8007da0 <prvAddTaskToStackMonitor+0x24>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
 8007d82:	4a0a      	ldr	r2, [pc, #40]	; (8007dac <prvAddTaskToStackMonitor+0x30>)
 8007d84:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007d88:	b10a      	cbz	r2, 8007d8e <prvAddTaskToStackMonitor+0x12>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	e7f7      	b.n	8007d7e <prvAddTaskToStackMonitor+0x2>
		{
			tasksInStackMonitor[i].tcb = task;
 8007d8e:	4a07      	ldr	r2, [pc, #28]	; (8007dac <prvAddTaskToStackMonitor+0x30>)
 8007d90:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 8007d94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d98:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9c:	605a      	str	r2, [r3, #4]
 8007d9e:	4770      	bx	lr
		}
	}

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
 8007da0:	4a03      	ldr	r2, [pc, #12]	; (8007db0 <prvAddTaskToStackMonitor+0x34>)
 8007da2:	6813      	ldr	r3, [r2, #0]
 8007da4:	3301      	adds	r3, #1
 8007da6:	6013      	str	r3, [r2, #0]
	}
}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	200042dc 	.word	0x200042dc
 8007db0:	2000432c 	.word	0x2000432c

08007db4 <prvTraceGetCurrentTaskHandle>:
 *
 * Function that returns the handle to the currently executing task.
 *
 ******************************************************************************/
void* prvTraceGetCurrentTaskHandle(void)
{
 8007db4:	b508      	push	{r3, lr}
	return xTaskGetCurrentTaskHandle();
 8007db6:	f7fe fbf9 	bl	80065ac <xTaskGetCurrentTaskHandle>
}
 8007dba:	bd08      	pop	{r3, pc}

08007dbc <prvIsNewTCB>:
 * Tells if this task is already executing, or if there has been a task-switch.
 * Assumed to be called within a trace hook in kernel context.
 ******************************************************************************/
uint32_t prvIsNewTCB(void* pNewTCB)
{
	if (pCurrentTCB != pNewTCB)
 8007dbc:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <prvIsNewTCB+0x14>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4283      	cmp	r3, r0
 8007dc2:	d003      	beq.n	8007dcc <prvIsNewTCB+0x10>
	{
		pCurrentTCB = pNewTCB;
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <prvIsNewTCB+0x14>)
 8007dc6:	6018      	str	r0, [r3, #0]
		return 1;
 8007dc8:	2001      	movs	r0, #1
 8007dca:	4770      	bx	lr
	}
	return 0;
 8007dcc:	2000      	movs	r0, #0
}
 8007dce:	4770      	bx	lr
 8007dd0:	200042d8 	.word	0x200042d8

08007dd4 <writeToRTT>:

	return 0;
}

int32_t writeToRTT(void* ptrData, uint32_t size, int32_t* ptrBytesWritten)
{
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	4614      	mov	r4, r2
	uint32_t bytesWritten = SEGGER_RTT_Write((TRC_CFG_RTT_UP_BUFFER_INDEX), (const char*)ptrData, size);
 8007dd8:	460a      	mov	r2, r1
 8007dda:	4601      	mov	r1, r0
 8007ddc:	2001      	movs	r0, #1
 8007dde:	f7ff f959 	bl	8007094 <SEGGER_RTT_Write>
	
	if (ptrBytesWritten != NULL)
 8007de2:	b104      	cbz	r4, 8007de6 <writeToRTT+0x12>
		*ptrBytesWritten = (int32_t)bytesWritten;
 8007de4:	6020      	str	r0, [r4, #0]

	return 0;
}
 8007de6:	2000      	movs	r0, #0
 8007de8:	bd10      	pop	{r4, pc}
	...

08007dec <prvTraceGetError>:
static const char* prvTraceGetError(int errCode)
{
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (errCode)
 8007dec:	3801      	subs	r0, #1
 8007dee:	280c      	cmp	r0, #12
 8007df0:	d820      	bhi.n	8007e34 <prvTraceGetError+0x48>
 8007df2:	e8df f000 	tbb	[pc, r0]
 8007df6:	1715      	.short	0x1715
 8007df8:	071d1b19 	.word	0x071d1b19
 8007dfc:	0d0b0921 	.word	0x0d0b0921
 8007e00:	130f      	.short	0x130f
 8007e02:	11          	.byte	0x11
 8007e03:	00          	.byte	0x00
	case PSF_WARNING_SYMBOL_TABLE_SLOTS:
		/* There was not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by NoRoomForSymbol. Inspect this
		variable and increase TRC_CFG_SYMBOL_TABLE_SLOTS by at least that value. */

		return "Exceeded SYMBOL_TABLE_SLOTS (see prvTraceGetError)";
 8007e04:	480d      	ldr	r0, [pc, #52]	; (8007e3c <prvTraceGetError+0x50>)
 8007e06:	4770      	bx	lr
		/* There was not enough symbol object table slots for storing object
		properties, such as task priorites. The number of missing slots is
		counted by NoRoomForObjectData. Inspect this variable and increase
		TRC_CFG_OBJECT_DATA_SLOTS by at least that value. */

		return "Exceeded OBJECT_DATA_SLOTS (see prvTraceGetError)";
 8007e08:	480d      	ldr	r0, [pc, #52]	; (8007e40 <prvTraceGetError+0x54>)
 8007e0a:	4770      	bx	lr
		A PSF event may store maximum 60 bytes payload, including data
		arguments and string characters. For User Events, also the User
		Event Channel (4 bytes) must be squeezed in, if a channel is
		specified (can be NULL). */

		return "String too long (see prvTraceGetError)";
 8007e0c:	480d      	ldr	r0, [pc, #52]	; (8007e44 <prvTraceGetError+0x58>)
 8007e0e:	4770      	bx	lr

	case PSF_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		return "TRC_STREAM_PORT_READ_DATA returned error (!= 0).";
 8007e10:	480d      	ldr	r0, [pc, #52]	; (8007e48 <prvTraceGetError+0x5c>)
 8007e12:	4770      	bx	lr

	case PSF_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		return "TRC_STREAM_PORT_WRITE_DATA returned error (!= 0).";
 8007e14:	480d      	ldr	r0, [pc, #52]	; (8007e4c <prvTraceGetError+0x60>)
 8007e16:	4770      	bx	lr

	case PSF_WARNING_STACKMON_NO_SLOTS:

		return "TRC_STACKMON_MAX_TASKS too small!";
 8007e18:	480d      	ldr	r0, [pc, #52]	; (8007e50 <prvTraceGetError+0x64>)
 8007e1a:	4770      	bx	lr

	case PSF_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during vTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		return "Blocking in vTraceEnable (see xTraceGetLastError)";
 8007e1c:	480d      	ldr	r0, [pc, #52]	; (8007e54 <prvTraceGetError+0x68>)
 8007e1e:	4770      	bx	lr

	case PSF_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		return "Invalid event code (see prvTraceGetError)";
 8007e20:	480d      	ldr	r0, [pc, #52]	; (8007e58 <prvTraceGetError+0x6c>)
 8007e22:	4770      	bx	lr
	case PSF_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		return "Exceeded ISR nesting (see prvTraceGetError)";
 8007e24:	480d      	ldr	r0, [pc, #52]	; (8007e5c <prvTraceGetError+0x70>)
 8007e26:	4770      	bx	lr
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		return "DWT not supported (see prvTraceGetError)";
 8007e28:	480d      	ldr	r0, [pc, #52]	; (8007e60 <prvTraceGetError+0x74>)
 8007e2a:	4770      	bx	lr
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		return "DWT_CYCCNT not supported (see prvTraceGetError)";
 8007e2c:	480d      	ldr	r0, [pc, #52]	; (8007e64 <prvTraceGetError+0x78>)
 8007e2e:	4770      	bx	lr

	case PSF_ERROR_TZCTRLTASK_NOT_CREATED:
		/* vTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		return "Could not create TzCtrl (see prvTraceGetError)";
 8007e30:	480d      	ldr	r0, [pc, #52]	; (8007e68 <prvTraceGetError+0x7c>)
 8007e32:	4770      	bx	lr

	}

	return NULL;
 8007e34:	2000      	movs	r0, #0
 8007e36:	4770      	bx	lr
		return "Exceeded SYMBOL_MAX_LENGTH (see prvTraceGetError)";
 8007e38:	480c      	ldr	r0, [pc, #48]	; (8007e6c <prvTraceGetError+0x80>)
}
 8007e3a:	4770      	bx	lr
 8007e3c:	0800e410 	.word	0x0800e410
 8007e40:	0800e478 	.word	0x0800e478
 8007e44:	0800e4ac 	.word	0x0800e4ac
 8007e48:	0800e4d4 	.word	0x0800e4d4
 8007e4c:	0800e508 	.word	0x0800e508
 8007e50:	0800e53c 	.word	0x0800e53c
 8007e54:	0800e560 	.word	0x0800e560
 8007e58:	0800e594 	.word	0x0800e594
 8007e5c:	0800e5c0 	.word	0x0800e5c0
 8007e60:	0800e5ec 	.word	0x0800e5ec
 8007e64:	0800e618 	.word	0x0800e618
 8007e68:	0800e648 	.word	0x0800e648
 8007e6c:	0800e444 	.word	0x0800e444

08007e70 <prvGetTimestamp32>:

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 8007e70:	4b01      	ldr	r3, [pc, #4]	; (8007e78 <prvGetTimestamp32+0x8>)
 8007e72:	6818      	ldr	r0, [r3, #0]
	
#if ((TRC_HWTC_TYPE == TRC_OS_TIMER_INCR) || (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR))
	uint32_t ticks = TRACE_GET_OS_TICKS();
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
#endif
}
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	e0001004 	.word	0xe0001004

08007e7c <prvTraceSaveObjectSymbol>:
{
 8007e7c:	b430      	push	{r4, r5}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e7e:	f3ef 8510 	mrs	r5, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e82:	2301      	movs	r3, #1
 8007e84:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 8007e88:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <prvTraceSaveObjectSymbol+0x64>)
 8007e8a:	681c      	ldr	r4, [r3, #0]
 8007e8c:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8007e90:	d220      	bcs.n	8007ed4 <prvTraceSaveObjectSymbol+0x58>
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[firstFreeSymbolTableIndex / sizeof(uint32_t)] = (uint32_t)address;
 8007e92:	08a2      	lsrs	r2, r4, #2
 8007e94:	4b13      	ldr	r3, [pc, #76]	; (8007ee4 <prvTraceSaveObjectSymbol+0x68>)
 8007e96:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex + sizeof(uint32_t)];
 8007e9a:	1d20      	adds	r0, r4, #4
 8007e9c:	4418      	add	r0, r3
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b18      	cmp	r3, #24
 8007ea2:	d806      	bhi.n	8007eb2 <prvTraceSaveObjectSymbol+0x36>
			ptrSymbol[i] = (uint8_t)name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 8007ea4:	5cca      	ldrb	r2, [r1, r3]
 8007ea6:	54c2      	strb	r2, [r0, r3]
			if (name[i] == 0)
 8007ea8:	5cca      	ldrb	r2, [r1, r3]
 8007eaa:	b112      	cbz	r2, 8007eb2 <prvTraceSaveObjectSymbol+0x36>
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8007eac:	3301      	adds	r3, #1
 8007eae:	e7f7      	b.n	8007ea0 <prvTraceSaveObjectSymbol+0x24>
			i++;
 8007eb0:	3301      	adds	r3, #1
		while ((name[i] != 0) && i < 128)
 8007eb2:	5cca      	ldrb	r2, [r1, r3]
 8007eb4:	b10a      	cbz	r2, 8007eba <prvTraceSaveObjectSymbol+0x3e>
 8007eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8007eb8:	d9fa      	bls.n	8007eb0 <prvTraceSaveObjectSymbol+0x34>
		if (i > LongestSymbolName)
 8007eba:	4a0b      	ldr	r2, [pc, #44]	; (8007ee8 <prvTraceSaveObjectSymbol+0x6c>)
 8007ebc:	6812      	ldr	r2, [r2, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d201      	bcs.n	8007ec6 <prvTraceSaveObjectSymbol+0x4a>
			LongestSymbolName = i;
 8007ec2:	4a09      	ldr	r2, [pc, #36]	; (8007ee8 <prvTraceSaveObjectSymbol+0x6c>)
 8007ec4:	6013      	str	r3, [r2, #0]
		firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
 8007ec6:	3420      	adds	r4, #32
 8007ec8:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <prvTraceSaveObjectSymbol+0x64>)
 8007eca:	601c      	str	r4, [r3, #0]
 8007ecc:	f385 8810 	msr	PRIMASK, r5
}
 8007ed0:	bc30      	pop	{r4, r5}
 8007ed2:	4770      	bx	lr
		NoRoomForSymbol++;
 8007ed4:	4a05      	ldr	r2, [pc, #20]	; (8007eec <prvTraceSaveObjectSymbol+0x70>)
 8007ed6:	6813      	ldr	r3, [r2, #0]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	e7f6      	b.n	8007ecc <prvTraceSaveObjectSymbol+0x50>
 8007ede:	bf00      	nop
 8007ee0:	20004358 	.word	0x20004358
 8007ee4:	2000449c 	.word	0x2000449c
 8007ee8:	20004334 	.word	0x20004334
 8007eec:	20004340 	.word	0x20004340

08007ef0 <prvTraceSaveObjectData>:
{
 8007ef0:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ef2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f383 8810 	msr	PRIMASK, r3
	foundSlot = firstFreeObjectDataTableIndex;
 8007efc:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <prvTraceSaveObjectData+0x58>)
 8007efe:	681d      	ldr	r5, [r3, #0]
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8007f00:	2300      	movs	r3, #0
 8007f02:	42ab      	cmp	r3, r5
 8007f04:	d207      	bcs.n	8007f16 <prvTraceSaveObjectData+0x26>
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 8007f06:	089a      	lsrs	r2, r3, #2
		if (*ptr == (uint32_t)address)
 8007f08:	4c10      	ldr	r4, [pc, #64]	; (8007f4c <prvTraceSaveObjectData+0x5c>)
 8007f0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f0e:	4282      	cmp	r2, r0
 8007f10:	d002      	beq.n	8007f18 <prvTraceSaveObjectData+0x28>
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8007f12:	3308      	adds	r3, #8
 8007f14:	e7f5      	b.n	8007f02 <prvTraceSaveObjectData+0x12>
	foundSlot = firstFreeObjectDataTableIndex;
 8007f16:	462b      	mov	r3, r5
	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8007f18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007f1c:	d20c      	bcs.n	8007f38 <prvTraceSaveObjectData+0x48>
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8007f1e:	089a      	lsrs	r2, r3, #2
 8007f20:	4c0a      	ldr	r4, [pc, #40]	; (8007f4c <prvTraceSaveObjectData+0x5c>)
 8007f22:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8007f26:	3201      	adds	r2, #1
 8007f28:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		if (foundSlot == firstFreeObjectDataTableIndex)
 8007f2c:	42ab      	cmp	r3, r5
 8007f2e:	d107      	bne.n	8007f40 <prvTraceSaveObjectData+0x50>
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8007f30:	3508      	adds	r5, #8
 8007f32:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <prvTraceSaveObjectData+0x58>)
 8007f34:	601d      	str	r5, [r3, #0]
 8007f36:	e003      	b.n	8007f40 <prvTraceSaveObjectData+0x50>
		NoRoomForObjectData++;
 8007f38:	4a05      	ldr	r2, [pc, #20]	; (8007f50 <prvTraceSaveObjectData+0x60>)
 8007f3a:	6813      	ldr	r3, [r2, #0]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	f386 8810 	msr	PRIMASK, r6
}
 8007f44:	bc70      	pop	{r4, r5, r6}
 8007f46:	4770      	bx	lr
 8007f48:	20004354 	.word	0x20004354
 8007f4c:	2000435c 	.word	0x2000435c
 8007f50:	2000433c 	.word	0x2000433c

08007f54 <prvTraceError>:
{
 8007f54:	b538      	push	{r3, r4, r5, lr}
	if (errorCode == PSF_ERROR_NONE)
 8007f56:	4b10      	ldr	r3, [pc, #64]	; (8007f98 <prvTraceError+0x44>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	b103      	cbz	r3, 8007f5e <prvTraceError+0xa>
}
 8007f5c:	bd38      	pop	{r3, r4, r5, pc}
		errorCode = errCode;
 8007f5e:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <prvTraceError+0x44>)
 8007f60:	6018      	str	r0, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8007f62:	1e42      	subs	r2, r0, #1
 8007f64:	2301      	movs	r3, #1
 8007f66:	fa03 f202 	lsl.w	r2, r3, r2
 8007f6a:	490c      	ldr	r1, [pc, #48]	; (8007f9c <prvTraceError+0x48>)
 8007f6c:	680b      	ldr	r3, [r1, #0]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	600b      	str	r3, [r1, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8007f72:	4c0b      	ldr	r4, [pc, #44]	; (8007fa0 <prvTraceError+0x4c>)
 8007f74:	6825      	ldr	r5, [r4, #0]
 8007f76:	f7ff ff39 	bl	8007dec <prvTraceGetError>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	2090      	movs	r0, #144	; 0x90
 8007f80:	f000 f98c 	bl	800829c <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8007f84:	4a07      	ldr	r2, [pc, #28]	; (8007fa4 <prvTraceError+0x50>)
 8007f86:	6821      	ldr	r1, [r4, #0]
 8007f88:	2090      	movs	r0, #144	; 0x90
 8007f8a:	f000 f987 	bl	800829c <prvTraceStoreSimpleStringEventHelper>
		prvSetRecorderEnabled(0);
 8007f8e:	2000      	movs	r0, #0
 8007f90:	f000 f876 	bl	8008080 <prvSetRecorderEnabled>
}
 8007f94:	e7e2      	b.n	8007f5c <prvTraceError+0x8>
 8007f96:	bf00      	nop
 8007f98:	2000434c 	.word	0x2000434c
 8007f9c:	20004330 	.word	0x20004330
 8007fa0:	20006570 	.word	0x20006570
 8007fa4:	0800e3ec 	.word	0x0800e3ec

08007fa8 <prvTraceStoreEvent>:
{
 8007fa8:	b40e      	push	{r1, r2, r3}
 8007faa:	b570      	push	{r4, r5, r6, lr}
 8007fac:	b095      	sub	sp, #84	; 0x54
 8007fae:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8007fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb6:	d20f      	bcs.n	8007fd8 <prvTraceStoreEvent+0x30>
 8007fb8:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fba:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f382 8810 	msr	PRIMASK, r2
	if (RecorderEnabled)
 8007fc4:	4a1e      	ldr	r2, [pc, #120]	; (8008040 <prvTraceStoreEvent+0x98>)
 8007fc6:	6812      	ldr	r2, [r2, #0]
 8007fc8:	b952      	cbnz	r2, 8007fe0 <prvTraceStoreEvent+0x38>
 8007fca:	f385 8810 	msr	PRIMASK, r5
}
 8007fce:	b015      	add	sp, #84	; 0x54
 8007fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007fd4:	b003      	add	sp, #12
 8007fd6:	4770      	bx	lr
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8007fd8:	2001      	movs	r0, #1
 8007fda:	f7ff ffbb 	bl	8007f54 <prvTraceError>
 8007fde:	e7f6      	b.n	8007fce <prvTraceStoreEvent+0x26>
	  	int eventSize = (int)sizeof(BaseEvent) + nParam * (int)sizeof(uint32_t);
 8007fe0:	1c86      	adds	r6, r0, #2
 8007fe2:	00b6      	lsls	r6, r6, #2
		eventCounter++;
 8007fe4:	4a17      	ldr	r2, [pc, #92]	; (8008044 <prvTraceStoreEvent+0x9c>)
 8007fe6:	6811      	ldr	r1, [r2, #0]
 8007fe8:	3101      	adds	r1, #1
 8007fea:	6011      	str	r1, [r2, #0]
				event->base.EventID = eventID | (uint16_t)PARAM_COUNT(nParam);
 8007fec:	b282      	uxth	r2, r0
 8007fee:	0312      	lsls	r2, r2, #12
 8007ff0:	b292      	uxth	r2, r2
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	f8ad 3008 	strh.w	r3, [sp, #8]
				event->base.EventCount = (uint16_t)eventCounter;
 8007ff8:	f8ad 100a 	strh.w	r1, [sp, #10]
				event->base.TS = prvGetTimestamp32();
 8007ffc:	f7ff ff38 	bl	8007e70 <prvGetTimestamp32>
 8008000:	9003      	str	r0, [sp, #12]
				va_start(vl, eventID);
 8008002:	ab1a      	add	r3, sp, #104	; 0x68
 8008004:	9313      	str	r3, [sp, #76]	; 0x4c
				for (i = 0; i < nParam; i++)
 8008006:	2300      	movs	r3, #0
 8008008:	e00a      	b.n	8008020 <prvTraceStoreEvent+0x78>
					*tmp = va_arg(vl, uint32_t);
 800800a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800800c:	1d11      	adds	r1, r2, #4
 800800e:	9113      	str	r1, [sp, #76]	; 0x4c
 8008010:	6811      	ldr	r1, [r2, #0]
 8008012:	1c9a      	adds	r2, r3, #2
 8008014:	a814      	add	r0, sp, #80	; 0x50
 8008016:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800801a:	f842 1c48 	str.w	r1, [r2, #-72]
				for (i = 0; i < nParam; i++)
 800801e:	3301      	adds	r3, #1
 8008020:	42a3      	cmp	r3, r4
 8008022:	dbf2      	blt.n	800800a <prvTraceStoreEvent+0x62>
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8008024:	aa14      	add	r2, sp, #80	; 0x50
 8008026:	2300      	movs	r3, #0
 8008028:	f842 3d4c 	str.w	r3, [r2, #-76]!
 800802c:	4631      	mov	r1, r6
 800802e:	a802      	add	r0, sp, #8
 8008030:	f7ff fed0 	bl	8007dd4 <writeToRTT>
 8008034:	2800      	cmp	r0, #0
 8008036:	d0c8      	beq.n	8007fca <prvTraceStoreEvent+0x22>
 8008038:	f000 f864 	bl	8008104 <vTraceStop>
 800803c:	e7c5      	b.n	8007fca <prvTraceStoreEvent+0x22>
 800803e:	bf00      	nop
 8008040:	20004344 	.word	0x20004344
 8008044:	20004350 	.word	0x20004350

08008048 <prvTraceStoreTSConfig>:

/* Store the Timestamp Config event */
static void prvTraceStoreTSConfig(void)
{
 8008048:	b500      	push	{lr}
 800804a:	b083      	sub	sp, #12
	/* If not overridden using vTraceSetFrequency, use default value */
	if (timestampFrequency == 0)
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <prvTraceStoreTSConfig+0x30>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	b91b      	cbnz	r3, 800805a <prvTraceStoreTSConfig+0x12>
	{
		timestampFrequency = TRC_HWTC_FREQ_HZ;
 8008052:	4b0a      	ldr	r3, [pc, #40]	; (800807c <prvTraceStoreTSConfig+0x34>)
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	4b08      	ldr	r3, [pc, #32]	; (8008078 <prvTraceStoreTSConfig+0x30>)
 8008058:	601a      	str	r2, [r3, #0]
							(uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD),
							(uint32_t)(TRC_HWTC_PERIOD));
	
	#else
	
	prvTraceStoreEvent(4, 
 800805a:	4b07      	ldr	r3, [pc, #28]	; (8008078 <prvTraceStoreTSConfig+0x30>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	2300      	movs	r3, #0
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	2301      	movs	r3, #1
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800806a:	2102      	movs	r1, #2
 800806c:	2004      	movs	r0, #4
 800806e:	f7ff ff9b 	bl	8007fa8 <prvTraceStoreEvent>
						(uint32_t)timestampFrequency,	                    
						(uint32_t)(TRACE_TICK_RATE_HZ),
						(uint32_t)(TRC_HWTC_TYPE),
						(uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD));	
	#endif
}
 8008072:	b003      	add	sp, #12
 8008074:	f85d fb04 	ldr.w	pc, [sp], #4
 8008078:	2000499c 	.word	0x2000499c
 800807c:	20000064 	.word	0x20000064

08008080 <prvSetRecorderEnabled>:
	if (RecorderEnabled == isEnabled)
 8008080:	4b1a      	ldr	r3, [pc, #104]	; (80080ec <prvSetRecorderEnabled+0x6c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4283      	cmp	r3, r0
 8008086:	d02f      	beq.n	80080e8 <prvSetRecorderEnabled+0x68>
{
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	4604      	mov	r4, r0
	if (uiTraceSystemState == TRC_STATE_IN_STARTUP)
 800808c:	4b18      	ldr	r3, [pc, #96]	; (80080f0 <prvSetRecorderEnabled+0x70>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	b95b      	cbnz	r3, 80080aa <prvSetRecorderEnabled+0x2a>
		currentTask = (void*)HANDLE_NO_TASK;
 8008092:	2602      	movs	r6, #2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008094:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008098:	2301      	movs	r3, #1
 800809a:	f383 8810 	msr	PRIMASK, r3
    RecorderEnabled = isEnabled;
 800809e:	4b13      	ldr	r3, [pc, #76]	; (80080ec <prvSetRecorderEnabled+0x6c>)
 80080a0:	601c      	str	r4, [r3, #0]
	if (RecorderEnabled)
 80080a2:	b934      	cbnz	r4, 80080b2 <prvSetRecorderEnabled+0x32>
 80080a4:	f385 8810 	msr	PRIMASK, r5
}
 80080a8:	bd70      	pop	{r4, r5, r6, pc}
		currentTask = TRACE_GET_CURRENT_TASK();
 80080aa:	f7ff fe83 	bl	8007db4 <prvTraceGetCurrentTaskHandle>
 80080ae:	4606      	mov	r6, r0
 80080b0:	e7f0      	b.n	8008094 <prvSetRecorderEnabled+0x14>
     	eventCounter = 0;
 80080b2:	4b10      	ldr	r3, [pc, #64]	; (80080f4 <prvSetRecorderEnabled+0x74>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
        ISR_stack_index = -1;
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <prvSetRecorderEnabled+0x78>)
 80080ba:	22ff      	movs	r2, #255	; 0xff
 80080bc:	701a      	strb	r2, [r3, #0]
        prvTraceStoreHeader();
 80080be:	f000 f979 	bl	80083b4 <prvTraceStoreHeader>
		prvTraceStoreSymbolTable();
 80080c2:	f000 f9b5 	bl	8008430 <prvTraceStoreSymbolTable>
    	prvTraceStoreObjectDataTable();
 80080c6:	f000 f9e9 	bl	800849c <prvTraceStoreObjectDataTable>
    	prvTraceStoreExtensionInfo();
 80080ca:	f000 fa1d 	bl	8008508 <prvTraceStoreExtensionInfo>
        prvTraceStoreEvent3(	PSF_EVENT_TRACE_START,
 80080ce:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <prvSetRecorderEnabled+0x7c>)
 80080d0:	6819      	ldr	r1, [r3, #0]
 80080d2:	4a0b      	ldr	r2, [pc, #44]	; (8008100 <prvSetRecorderEnabled+0x80>)
 80080d4:	6813      	ldr	r3, [r2, #0]
 80080d6:	1c58      	adds	r0, r3, #1
 80080d8:	6010      	str	r0, [r2, #0]
 80080da:	4632      	mov	r2, r6
 80080dc:	2001      	movs	r0, #1
 80080de:	f000 f817 	bl	8008110 <prvTraceStoreEvent3>
        prvTraceStoreTSConfig();
 80080e2:	f7ff ffb1 	bl	8008048 <prvTraceStoreTSConfig>
 80080e6:	e7dd      	b.n	80080a4 <prvSetRecorderEnabled+0x24>
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20004344 	.word	0x20004344
 80080f0:	200049a4 	.word	0x200049a4
 80080f4:	20004350 	.word	0x20004350
 80080f8:	2000006c 	.word	0x2000006c
 80080fc:	200049a8 	.word	0x200049a8
 8008100:	20004348 	.word	0x20004348

08008104 <vTraceStop>:
{
 8008104:	b508      	push	{r3, lr}
	prvSetRecorderEnabled(0);
 8008106:	2000      	movs	r0, #0
 8008108:	f7ff ffba 	bl	8008080 <prvSetRecorderEnabled>
}
 800810c:	bd08      	pop	{r3, pc}
	...

08008110 <prvTraceStoreEvent3>:
{
 8008110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008112:	b087      	sub	sp, #28
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8008114:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8008118:	d20e      	bcs.n	8008138 <prvTraceStoreEvent3+0x28>
 800811a:	460f      	mov	r7, r1
 800811c:	4616      	mov	r6, r2
 800811e:	461d      	mov	r5, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008120:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008124:	2301      	movs	r3, #1
 8008126:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 800812a:	4b14      	ldr	r3, [pc, #80]	; (800817c <prvTraceStoreEvent3+0x6c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	b93b      	cbnz	r3, 8008140 <prvTraceStoreEvent3+0x30>
 8008130:	f384 8810 	msr	PRIMASK, r4
}
 8008134:	b007      	add	sp, #28
 8008136:	bdf0      	pop	{r4, r5, r6, r7, pc}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8008138:	2001      	movs	r0, #1
 800813a:	f7ff ff0b 	bl	8007f54 <prvTraceError>
 800813e:	e7f9      	b.n	8008134 <prvTraceStoreEvent3+0x24>
  		eventCounter++;
 8008140:	4a0f      	ldr	r2, [pc, #60]	; (8008180 <prvTraceStoreEvent3+0x70>)
 8008142:	6813      	ldr	r3, [r2, #0]
 8008144:	3301      	adds	r3, #1
 8008146:	6013      	str	r3, [r2, #0]
				event->base.EventID = eventID | PARAM_COUNT(3);
 8008148:	f440 5040 	orr.w	r0, r0, #12288	; 0x3000
 800814c:	f8ad 0004 	strh.w	r0, [sp, #4]
				event->base.EventCount = (uint16_t)eventCounter;
 8008150:	f8ad 3006 	strh.w	r3, [sp, #6]
				event->base.TS = prvGetTimestamp32();
 8008154:	f7ff fe8c 	bl	8007e70 <prvGetTimestamp32>
 8008158:	9002      	str	r0, [sp, #8]
				event->param1 = (uint32_t)param1;
 800815a:	9703      	str	r7, [sp, #12]
				event->param2 = param2;
 800815c:	9604      	str	r6, [sp, #16]
				event->param3 = param3;
 800815e:	9505      	str	r5, [sp, #20]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8008160:	aa06      	add	r2, sp, #24
 8008162:	2300      	movs	r3, #0
 8008164:	f842 3d18 	str.w	r3, [r2, #-24]!
 8008168:	2114      	movs	r1, #20
 800816a:	a801      	add	r0, sp, #4
 800816c:	f7ff fe32 	bl	8007dd4 <writeToRTT>
 8008170:	2800      	cmp	r0, #0
 8008172:	d0dd      	beq.n	8008130 <prvTraceStoreEvent3+0x20>
 8008174:	f7ff ffc6 	bl	8008104 <vTraceStop>
 8008178:	e7da      	b.n	8008130 <prvTraceStoreEvent3+0x20>
 800817a:	bf00      	nop
 800817c:	20004344 	.word	0x20004344
 8008180:	20004350 	.word	0x20004350

08008184 <prvTraceStoreStringEventHelper>:
{
 8008184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008188:	b092      	sub	sp, #72	; 0x48
 800818a:	4605      	mov	r5, r0
 800818c:	4692      	mov	sl, r2
 800818e:	461c      	mov	r4, r3
 8008190:	9f1a      	ldr	r7, [sp, #104]	; 0x68
	nStrWords = (len+1+3)/4;
 8008192:	3304      	adds	r3, #4
 8008194:	d41c      	bmi.n	80081d0 <prvTraceStoreStringEventHelper+0x4c>
	offset = nArgs * 4;
 8008196:	00ae      	lsls	r6, r5, #2
	nWords = nStrWords + nArgs;
 8008198:	eb05 03a3 	add.w	r3, r5, r3, asr #2
	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 800819c:	2b0f      	cmp	r3, #15
 800819e:	dd0a      	ble.n	80081b6 <prvTraceStoreStringEventHelper+0x32>
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80081a0:	3b0f      	subs	r3, #15
 80081a2:	009b      	lsls	r3, r3, #2
		if (bytesTruncated > MaxBytesTruncated)
 80081a4:	4a2e      	ldr	r2, [pc, #184]	; (8008260 <prvTraceStoreStringEventHelper+0xdc>)
 80081a6:	6812      	ldr	r2, [r2, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d201      	bcs.n	80081b0 <prvTraceStoreStringEventHelper+0x2c>
			MaxBytesTruncated = bytesTruncated;
 80081ac:	4a2c      	ldr	r2, [pc, #176]	; (8008260 <prvTraceStoreStringEventHelper+0xdc>)
 80081ae:	6013      	str	r3, [r2, #0]
		len = 15 * 4 - offset;
 80081b0:	f1c6 043c 	rsb	r4, r6, #60	; 0x3c
		nWords = 15;
 80081b4:	230f      	movs	r3, #15
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081b6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ba:	2201      	movs	r2, #1
 80081bc:	f382 8810 	msr	PRIMASK, r2
	if (RecorderEnabled)
 80081c0:	4a28      	ldr	r2, [pc, #160]	; (8008264 <prvTraceStoreStringEventHelper+0xe0>)
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	b932      	cbnz	r2, 80081d4 <prvTraceStoreStringEventHelper+0x50>
 80081c6:	f388 8810 	msr	PRIMASK, r8
}
 80081ca:	b012      	add	sp, #72	; 0x48
 80081cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nStrWords = (len+1+3)/4;
 80081d0:	3303      	adds	r3, #3
 80081d2:	e7e0      	b.n	8008196 <prvTraceStoreStringEventHelper+0x12>
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 80081d4:	f103 0902 	add.w	r9, r3, #2
 80081d8:	ea4f 0989 	mov.w	r9, r9, lsl #2
		eventCounter++;
 80081dc:	4822      	ldr	r0, [pc, #136]	; (8008268 <prvTraceStoreStringEventHelper+0xe4>)
 80081de:	6802      	ldr	r2, [r0, #0]
 80081e0:	3201      	adds	r2, #1
 80081e2:	6002      	str	r2, [r0, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	031b      	lsls	r3, r3, #12
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	4319      	orrs	r1, r3
 80081ec:	f8ad 1004 	strh.w	r1, [sp, #4]
				event->base.EventCount = (uint16_t)eventCounter;
 80081f0:	f8ad 2006 	strh.w	r2, [sp, #6]
				event->base.TS = prvGetTimestamp32();
 80081f4:	f7ff fe3c 	bl	8007e70 <prvGetTimestamp32>
 80081f8:	9002      	str	r0, [sp, #8]
				for (i = 0; i < nArgs; i++)
 80081fa:	2300      	movs	r3, #0
 80081fc:	e007      	b.n	800820e <prvTraceStoreStringEventHelper+0x8a>
						data32[i] = va_arg(vl, uint32_t);
 80081fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008200:	1d11      	adds	r1, r2, #4
 8008202:	911b      	str	r1, [sp, #108]	; 0x6c
 8008204:	6811      	ldr	r1, [r2, #0]
 8008206:	aa03      	add	r2, sp, #12
 8008208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (i = 0; i < nArgs; i++)
 800820c:	3301      	adds	r3, #1
 800820e:	42ab      	cmp	r3, r5
 8008210:	da08      	bge.n	8008224 <prvTraceStoreStringEventHelper+0xa0>
					if ((userEvtChannel != NULL) && (i == 0))
 8008212:	f1ba 0f00 	cmp.w	sl, #0
 8008216:	d0f2      	beq.n	80081fe <prvTraceStoreStringEventHelper+0x7a>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1f0      	bne.n	80081fe <prvTraceStoreStringEventHelper+0x7a>
						data32[i] = (uint32_t)userEvtChannel;
 800821c:	aa03      	add	r2, sp, #12
 800821e:	f842 a023 	str.w	sl, [r2, r3, lsl #2]
 8008222:	e7f3      	b.n	800820c <prvTraceStoreStringEventHelper+0x88>
				for (i = 0; i < len; i++)
 8008224:	2300      	movs	r3, #0
 8008226:	e004      	b.n	8008232 <prvTraceStoreStringEventHelper+0xae>
					data8[offset + i] = str[i];
 8008228:	199a      	adds	r2, r3, r6
 800822a:	5cf8      	ldrb	r0, [r7, r3]
 800822c:	a903      	add	r1, sp, #12
 800822e:	5488      	strb	r0, [r1, r2]
				for (i = 0; i < len; i++)
 8008230:	3301      	adds	r3, #1
 8008232:	429c      	cmp	r4, r3
 8008234:	dcf8      	bgt.n	8008228 <prvTraceStoreStringEventHelper+0xa4>
				if (len < (15 * 4 - offset))
 8008236:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
 800823a:	42a3      	cmp	r3, r4
 800823c:	dd03      	ble.n	8008246 <prvTraceStoreStringEventHelper+0xc2>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 800823e:	4434      	add	r4, r6
 8008240:	ab03      	add	r3, sp, #12
 8008242:	2200      	movs	r2, #0
 8008244:	551a      	strb	r2, [r3, r4]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8008246:	aa12      	add	r2, sp, #72	; 0x48
 8008248:	2300      	movs	r3, #0
 800824a:	f842 3d48 	str.w	r3, [r2, #-72]!
 800824e:	4649      	mov	r1, r9
 8008250:	a801      	add	r0, sp, #4
 8008252:	f7ff fdbf 	bl	8007dd4 <writeToRTT>
 8008256:	2800      	cmp	r0, #0
 8008258:	d0b5      	beq.n	80081c6 <prvTraceStoreStringEventHelper+0x42>
 800825a:	f7ff ff53 	bl	8008104 <vTraceStop>
 800825e:	e7b2      	b.n	80081c6 <prvTraceStoreStringEventHelper+0x42>
 8008260:	20004338 	.word	0x20004338
 8008264:	20004344 	.word	0x20004344
 8008268:	20004350 	.word	0x20004350

0800826c <prvTraceStoreStringEvent>:
{
 800826c:	b40c      	push	{r2, r3}
 800826e:	b510      	push	{r4, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	9c06      	ldr	r4, [sp, #24]
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8008274:	2300      	movs	r3, #0
 8008276:	e000      	b.n	800827a <prvTraceStoreStringEvent+0xe>
 8008278:	3301      	adds	r3, #1
 800827a:	5ce2      	ldrb	r2, [r4, r3]
 800827c:	b10a      	cbz	r2, 8008282 <prvTraceStoreStringEvent+0x16>
 800827e:	2b33      	cmp	r3, #51	; 0x33
 8008280:	ddfa      	ble.n	8008278 <prvTraceStoreStringEvent+0xc>
	va_start(vl, str);
 8008282:	aa07      	add	r2, sp, #28
 8008284:	9203      	str	r2, [sp, #12]
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, len, str, vl);
 8008286:	9201      	str	r2, [sp, #4]
 8008288:	9400      	str	r4, [sp, #0]
 800828a:	2200      	movs	r2, #0
 800828c:	f7ff ff7a 	bl	8008184 <prvTraceStoreStringEventHelper>
}
 8008290:	b004      	add	sp, #16
 8008292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008296:	b002      	add	sp, #8
 8008298:	4770      	bx	lr
	...

0800829c <prvTraceStoreSimpleStringEventHelper>:
{
 800829c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082a0:	b093      	sub	sp, #76	; 0x4c
 80082a2:	4689      	mov	r9, r1
 80082a4:	4615      	mov	r5, r2
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 80082a6:	2400      	movs	r4, #0
 80082a8:	e000      	b.n	80082ac <prvTraceStoreSimpleStringEventHelper+0x10>
 80082aa:	3401      	adds	r4, #1
 80082ac:	5d2b      	ldrb	r3, [r5, r4]
 80082ae:	b10b      	cbz	r3, 80082b4 <prvTraceStoreSimpleStringEventHelper+0x18>
 80082b0:	2c33      	cmp	r4, #51	; 0x33
 80082b2:	ddfa      	ble.n	80082aa <prvTraceStoreSimpleStringEventHelper+0xe>
	nStrWords = (len+1+3)/4;
 80082b4:	1d23      	adds	r3, r4, #4
 80082b6:	d422      	bmi.n	80082fe <prvTraceStoreSimpleStringEventHelper+0x62>
 80082b8:	109b      	asrs	r3, r3, #2
	if (userEvtChannel)
 80082ba:	f1b9 0f00 	cmp.w	r9, #0
 80082be:	d020      	beq.n	8008302 <prvTraceStoreSimpleStringEventHelper+0x66>
		eventID++;
 80082c0:	3001      	adds	r0, #1
 80082c2:	b280      	uxth	r0, r0
		nArgs++;
 80082c4:	2201      	movs	r2, #1
	offset = nArgs * 4;
 80082c6:	0096      	lsls	r6, r2, #2
	nWords = nStrWords + nArgs;
 80082c8:	4413      	add	r3, r2
	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 80082ca:	2b0f      	cmp	r3, #15
 80082cc:	dd0a      	ble.n	80082e4 <prvTraceStoreSimpleStringEventHelper+0x48>
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80082ce:	3b0f      	subs	r3, #15
 80082d0:	009b      	lsls	r3, r3, #2
		if (bytesTruncated > MaxBytesTruncated)
 80082d2:	4a28      	ldr	r2, [pc, #160]	; (8008374 <prvTraceStoreSimpleStringEventHelper+0xd8>)
 80082d4:	6812      	ldr	r2, [r2, #0]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d201      	bcs.n	80082de <prvTraceStoreSimpleStringEventHelper+0x42>
			MaxBytesTruncated = bytesTruncated;
 80082da:	4a26      	ldr	r2, [pc, #152]	; (8008374 <prvTraceStoreSimpleStringEventHelper+0xd8>)
 80082dc:	6013      	str	r3, [r2, #0]
		len = 15 * 4 - offset;
 80082de:	f1c6 043c 	rsb	r4, r6, #60	; 0x3c
		nWords = 15;
 80082e2:	230f      	movs	r3, #15
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082e4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e8:	2201      	movs	r2, #1
 80082ea:	f382 8810 	msr	PRIMASK, r2
	if (RecorderEnabled)
 80082ee:	4a22      	ldr	r2, [pc, #136]	; (8008378 <prvTraceStoreSimpleStringEventHelper+0xdc>)
 80082f0:	6812      	ldr	r2, [r2, #0]
 80082f2:	b942      	cbnz	r2, 8008306 <prvTraceStoreSimpleStringEventHelper+0x6a>
 80082f4:	f387 8810 	msr	PRIMASK, r7
}
 80082f8:	b013      	add	sp, #76	; 0x4c
 80082fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nStrWords = (len+1+3)/4;
 80082fe:	3303      	adds	r3, #3
 8008300:	e7da      	b.n	80082b8 <prvTraceStoreSimpleStringEventHelper+0x1c>
	int nArgs = 0;
 8008302:	2200      	movs	r2, #0
 8008304:	e7df      	b.n	80082c6 <prvTraceStoreSimpleStringEventHelper+0x2a>
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8008306:	f103 0802 	add.w	r8, r3, #2
 800830a:	ea4f 0888 	mov.w	r8, r8, lsl #2
		eventCounter++;
 800830e:	491b      	ldr	r1, [pc, #108]	; (800837c <prvTraceStoreSimpleStringEventHelper+0xe0>)
 8008310:	680a      	ldr	r2, [r1, #0]
 8008312:	3201      	adds	r2, #1
 8008314:	600a      	str	r2, [r1, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8008316:	b29b      	uxth	r3, r3
 8008318:	031b      	lsls	r3, r3, #12
 800831a:	b29b      	uxth	r3, r3
 800831c:	4318      	orrs	r0, r3
 800831e:	f8ad 0004 	strh.w	r0, [sp, #4]
				event->base.EventCount = (uint16_t)eventCounter;
 8008322:	f8ad 2006 	strh.w	r2, [sp, #6]
				event->base.TS = prvGetTimestamp32();
 8008326:	f7ff fda3 	bl	8007e70 <prvGetTimestamp32>
 800832a:	9002      	str	r0, [sp, #8]
				if (userEvtChannel != NULL)
 800832c:	f1b9 0f00 	cmp.w	r9, #0
 8008330:	d001      	beq.n	8008336 <prvTraceStoreSimpleStringEventHelper+0x9a>
					data32[0] = (uint32_t)userEvtChannel;
 8008332:	f8cd 900c 	str.w	r9, [sp, #12]
		nWords = 15;
 8008336:	2300      	movs	r3, #0
 8008338:	e004      	b.n	8008344 <prvTraceStoreSimpleStringEventHelper+0xa8>
					data8[offset + i] = str[i];
 800833a:	199a      	adds	r2, r3, r6
 800833c:	5ce8      	ldrb	r0, [r5, r3]
 800833e:	a903      	add	r1, sp, #12
 8008340:	5488      	strb	r0, [r1, r2]
				for (i = 0; i < len; i++)
 8008342:	3301      	adds	r3, #1
 8008344:	429c      	cmp	r4, r3
 8008346:	dcf8      	bgt.n	800833a <prvTraceStoreSimpleStringEventHelper+0x9e>
				if (len < (15 * 4 - offset))
 8008348:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
 800834c:	42a3      	cmp	r3, r4
 800834e:	dd03      	ble.n	8008358 <prvTraceStoreSimpleStringEventHelper+0xbc>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 8008350:	4434      	add	r4, r6
 8008352:	ab03      	add	r3, sp, #12
 8008354:	2200      	movs	r2, #0
 8008356:	551a      	strb	r2, [r3, r4]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8008358:	aa12      	add	r2, sp, #72	; 0x48
 800835a:	2300      	movs	r3, #0
 800835c:	f842 3d48 	str.w	r3, [r2, #-72]!
 8008360:	4641      	mov	r1, r8
 8008362:	a801      	add	r0, sp, #4
 8008364:	f7ff fd36 	bl	8007dd4 <writeToRTT>
 8008368:	2800      	cmp	r0, #0
 800836a:	d0c3      	beq.n	80082f4 <prvTraceStoreSimpleStringEventHelper+0x58>
 800836c:	f7ff feca 	bl	8008104 <vTraceStop>
 8008370:	e7c0      	b.n	80082f4 <prvTraceStoreSimpleStringEventHelper+0x58>
 8008372:	bf00      	nop
 8008374:	20004338 	.word	0x20004338
 8008378:	20004344 	.word	0x20004344
 800837c:	20004350 	.word	0x20004350

08008380 <prvTraceWarning>:
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8008380:	1e42      	subs	r2, r0, #1
 8008382:	2301      	movs	r3, #1
 8008384:	4093      	lsls	r3, r2
 8008386:	4a09      	ldr	r2, [pc, #36]	; (80083ac <prvTraceWarning+0x2c>)
 8008388:	6812      	ldr	r2, [r2, #0]
 800838a:	4213      	tst	r3, r2
 800838c:	d000      	beq.n	8008390 <prvTraceWarning+0x10>
 800838e:	4770      	bx	lr
{
 8008390:	b510      	push	{r4, lr}
		SET_ERROR_WARNING_FLAG(errCode);
 8008392:	4313      	orrs	r3, r2
 8008394:	4a05      	ldr	r2, [pc, #20]	; (80083ac <prvTraceWarning+0x2c>)
 8008396:	6013      	str	r3, [r2, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8008398:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <prvTraceWarning+0x30>)
 800839a:	681c      	ldr	r4, [r3, #0]
 800839c:	f7ff fd26 	bl	8007dec <prvTraceGetError>
 80083a0:	4602      	mov	r2, r0
 80083a2:	4621      	mov	r1, r4
 80083a4:	2090      	movs	r0, #144	; 0x90
 80083a6:	f7ff ff79 	bl	800829c <prvTraceStoreSimpleStringEventHelper>
}
 80083aa:	bd10      	pop	{r4, pc}
 80083ac:	20004330 	.word	0x20004330
 80083b0:	20006570 	.word	0x20006570

080083b4 <prvTraceStoreHeader>:
{
 80083b4:	b530      	push	{r4, r5, lr}
 80083b6:	b089      	sub	sp, #36	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083b8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083bc:	2301      	movs	r3, #1
 80083be:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 80083c2:	4b18      	ldr	r3, [pc, #96]	; (8008424 <prvTraceStoreHeader+0x70>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	b323      	cbz	r3, 8008412 <prvTraceStoreHeader+0x5e>
		header->psf = PSFEndianessIdentifier;
 80083c8:	4b17      	ldr	r3, [pc, #92]	; (8008428 <prvTraceStoreHeader+0x74>)
 80083ca:	9302      	str	r3, [sp, #8]
		header->version = FormatVersion;
 80083cc:	2306      	movs	r3, #6
 80083ce:	f8ad 300c 	strh.w	r3, [sp, #12]
		header->platform = TRACE_KERNEL_VERSION;
 80083d2:	f641 23a1 	movw	r3, #6817	; 0x1aa1
 80083d6:	f8ad 300e 	strh.w	r3, [sp, #14]
		header->options = 0;
 80083da:	2400      	movs	r4, #0
 80083dc:	9404      	str	r4, [sp, #16]
		header->heapCounter = trcHeapCounter;
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <prvTraceStoreHeader+0x78>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	9305      	str	r3, [sp, #20]
		header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 80083e4:	2320      	movs	r3, #32
 80083e6:	f8ad 3018 	strh.w	r3, [sp, #24]
		header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 80083ea:	2328      	movs	r3, #40	; 0x28
 80083ec:	f8ad 301a 	strh.w	r3, [sp, #26]
		header->objectDataSize = 8;
 80083f0:	2208      	movs	r2, #8
 80083f2:	f8ad 201c 	strh.w	r2, [sp, #28]
		header->objectDataCount = (TRC_CFG_OBJECT_DATA_SLOTS);
 80083f6:	f8ad 301e 	strh.w	r3, [sp, #30]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 80083fa:	9401      	str	r4, [sp, #4]
 80083fc:	e000      	b.n	8008400 <prvTraceStoreHeader+0x4c>
 80083fe:	3401      	adds	r4, #1
 8008400:	aa01      	add	r2, sp, #4
 8008402:	2118      	movs	r1, #24
 8008404:	a802      	add	r0, sp, #8
 8008406:	f7ff fce5 	bl	8007dd4 <writeToRTT>
 800840a:	2800      	cmp	r0, #0
 800840c:	d1f7      	bne.n	80083fe <prvTraceStoreHeader+0x4a>
 800840e:	2c00      	cmp	r4, #0
 8008410:	dc03      	bgt.n	800841a <prvTraceStoreHeader+0x66>
 8008412:	f385 8810 	msr	PRIMASK, r5
}
 8008416:	b009      	add	sp, #36	; 0x24
 8008418:	bd30      	pop	{r4, r5, pc}
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 800841a:	200c      	movs	r0, #12
 800841c:	f7ff ffb0 	bl	8008380 <prvTraceWarning>
 8008420:	e7f7      	b.n	8008412 <prvTraceStoreHeader+0x5e>
 8008422:	bf00      	nop
 8008424:	20004344 	.word	0x20004344
 8008428:	50534600 	.word	0x50534600
 800842c:	200049a0 	.word	0x200049a0

08008430 <prvTraceStoreSymbolTable>:
{
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	b08a      	sub	sp, #40	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008434:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008438:	2301      	movs	r3, #1
 800843a:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 800843e:	4b15      	ldr	r3, [pc, #84]	; (8008494 <prvTraceStoreSymbolTable+0x64>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	b313      	cbz	r3, 800848a <prvTraceStoreSymbolTable+0x5a>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 8008444:	2500      	movs	r5, #0
 8008446:	e017      	b.n	8008478 <prvTraceStoreSymbolTable+0x48>
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8008448:	18e9      	adds	r1, r5, r3
 800844a:	4a13      	ldr	r2, [pc, #76]	; (8008498 <prvTraceStoreSymbolTable+0x68>)
 800844c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8008450:	aa02      	add	r2, sp, #8
 8008452:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 8008456:	3301      	adds	r3, #1
 8008458:	2b07      	cmp	r3, #7
 800845a:	d9f5      	bls.n	8008448 <prvTraceStoreSymbolTable+0x18>
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 800845c:	2400      	movs	r4, #0
 800845e:	9401      	str	r4, [sp, #4]
 8008460:	e000      	b.n	8008464 <prvTraceStoreSymbolTable+0x34>
 8008462:	3401      	adds	r4, #1
 8008464:	aa01      	add	r2, sp, #4
 8008466:	2120      	movs	r1, #32
 8008468:	a802      	add	r0, sp, #8
 800846a:	f7ff fcb3 	bl	8007dd4 <writeToRTT>
 800846e:	2800      	cmp	r0, #0
 8008470:	d1f7      	bne.n	8008462 <prvTraceStoreSymbolTable+0x32>
 8008472:	2c00      	cmp	r4, #0
 8008474:	dc05      	bgt.n	8008482 <prvTraceStoreSymbolTable+0x52>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 8008476:	3508      	adds	r5, #8
 8008478:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 800847c:	d205      	bcs.n	800848a <prvTraceStoreSymbolTable+0x5a>
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 800847e:	2300      	movs	r3, #0
 8008480:	e7ea      	b.n	8008458 <prvTraceStoreSymbolTable+0x28>
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 8008482:	200c      	movs	r0, #12
 8008484:	f7ff ff7c 	bl	8008380 <prvTraceWarning>
 8008488:	e7f5      	b.n	8008476 <prvTraceStoreSymbolTable+0x46>
 800848a:	f386 8810 	msr	PRIMASK, r6
}
 800848e:	b00a      	add	sp, #40	; 0x28
 8008490:	bd70      	pop	{r4, r5, r6, pc}
 8008492:	bf00      	nop
 8008494:	20004344 	.word	0x20004344
 8008498:	2000449c 	.word	0x2000449c

0800849c <prvTraceStoreObjectDataTable>:
{
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a4:	2301      	movs	r3, #1
 80084a6:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 80084aa:	4b15      	ldr	r3, [pc, #84]	; (8008500 <prvTraceStoreObjectDataTable+0x64>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	b313      	cbz	r3, 80084f6 <prvTraceStoreObjectDataTable+0x5a>
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 80084b0:	2500      	movs	r5, #0
 80084b2:	e018      	b.n	80084e6 <prvTraceStoreObjectDataTable+0x4a>
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 80084b4:	18e9      	adds	r1, r5, r3
 80084b6:	4a13      	ldr	r2, [pc, #76]	; (8008504 <prvTraceStoreObjectDataTable+0x68>)
 80084b8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80084bc:	aa02      	add	r2, sp, #8
 80084be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
 80084c2:	3301      	adds	r3, #1
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d9f5      	bls.n	80084b4 <prvTraceStoreObjectDataTable+0x18>
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 80084c8:	2400      	movs	r4, #0
 80084ca:	9401      	str	r4, [sp, #4]
 80084cc:	e000      	b.n	80084d0 <prvTraceStoreObjectDataTable+0x34>
 80084ce:	3401      	adds	r4, #1
 80084d0:	aa01      	add	r2, sp, #4
 80084d2:	2108      	movs	r1, #8
 80084d4:	eb0d 0001 	add.w	r0, sp, r1
 80084d8:	f7ff fc7c 	bl	8007dd4 <writeToRTT>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d1f6      	bne.n	80084ce <prvTraceStoreObjectDataTable+0x32>
 80084e0:	2c00      	cmp	r4, #0
 80084e2:	dc04      	bgt.n	80084ee <prvTraceStoreObjectDataTable+0x52>
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 80084e4:	3502      	adds	r5, #2
 80084e6:	2d4f      	cmp	r5, #79	; 0x4f
 80084e8:	d805      	bhi.n	80084f6 <prvTraceStoreObjectDataTable+0x5a>
            for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	e7ea      	b.n	80084c4 <prvTraceStoreObjectDataTable+0x28>
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 80084ee:	200c      	movs	r0, #12
 80084f0:	f7ff ff46 	bl	8008380 <prvTraceWarning>
 80084f4:	e7f6      	b.n	80084e4 <prvTraceStoreObjectDataTable+0x48>
 80084f6:	f386 8810 	msr	PRIMASK, r6
}
 80084fa:	b004      	add	sp, #16
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
 80084fe:	bf00      	nop
 8008500:	20004344 	.word	0x20004344
 8008504:	2000435c 	.word	0x2000435c

08008508 <prvTraceStoreExtensionInfo>:
{
 8008508:	b530      	push	{r4, r5, lr}
 800850a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800850c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008510:	2301      	movs	r3, #1
 8008512:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 8008516:	4b0d      	ldr	r3, [pc, #52]	; (800854c <prvTraceStoreExtensionInfo+0x44>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	b17b      	cbz	r3, 800853c <prvTraceStoreExtensionInfo+0x34>
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 800851c:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <prvTraceStoreExtensionInfo+0x48>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	9300      	str	r3, [sp, #0]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8008522:	2400      	movs	r4, #0
 8008524:	9401      	str	r4, [sp, #4]
 8008526:	e000      	b.n	800852a <prvTraceStoreExtensionInfo+0x22>
 8008528:	3401      	adds	r4, #1
 800852a:	aa01      	add	r2, sp, #4
 800852c:	2104      	movs	r1, #4
 800852e:	4668      	mov	r0, sp
 8008530:	f7ff fc50 	bl	8007dd4 <writeToRTT>
 8008534:	2800      	cmp	r0, #0
 8008536:	d1f7      	bne.n	8008528 <prvTraceStoreExtensionInfo+0x20>
 8008538:	2c00      	cmp	r4, #0
 800853a:	dc03      	bgt.n	8008544 <prvTraceStoreExtensionInfo+0x3c>
 800853c:	f385 8810 	msr	PRIMASK, r5
}
 8008540:	b003      	add	sp, #12
 8008542:	bd30      	pop	{r4, r5, pc}
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8008544:	200c      	movs	r0, #12
 8008546:	f7ff ff1b 	bl	8008380 <prvTraceWarning>
 800854a:	e7f7      	b.n	800853c <prvTraceStoreExtensionInfo+0x34>
 800854c:	20004344 	.word	0x20004344
 8008550:	20000070 	.word	0x20000070

08008554 <prvTraceStoreEvent1>:
{
 8008554:	b530      	push	{r4, r5, lr}
 8008556:	b085      	sub	sp, #20
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8008558:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800855c:	d20c      	bcs.n	8008578 <prvTraceStoreEvent1+0x24>
 800855e:	460d      	mov	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008560:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008564:	2301      	movs	r3, #1
 8008566:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 800856a:	4b13      	ldr	r3, [pc, #76]	; (80085b8 <prvTraceStoreEvent1+0x64>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	b93b      	cbnz	r3, 8008580 <prvTraceStoreEvent1+0x2c>
 8008570:	f384 8810 	msr	PRIMASK, r4
}
 8008574:	b005      	add	sp, #20
 8008576:	bd30      	pop	{r4, r5, pc}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8008578:	2001      	movs	r0, #1
 800857a:	f7ff fceb 	bl	8007f54 <prvTraceError>
 800857e:	e7f9      	b.n	8008574 <prvTraceStoreEvent1+0x20>
		eventCounter++;
 8008580:	4a0e      	ldr	r2, [pc, #56]	; (80085bc <prvTraceStoreEvent1+0x68>)
 8008582:	6813      	ldr	r3, [r2, #0]
 8008584:	3301      	adds	r3, #1
 8008586:	6013      	str	r3, [r2, #0]
				event->base.EventID = eventID | PARAM_COUNT(1);
 8008588:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800858c:	f8ad 0004 	strh.w	r0, [sp, #4]
				event->base.EventCount = (uint16_t)eventCounter;
 8008590:	f8ad 3006 	strh.w	r3, [sp, #6]
				event->base.TS = prvGetTimestamp32();
 8008594:	f7ff fc6c 	bl	8007e70 <prvGetTimestamp32>
 8008598:	9002      	str	r0, [sp, #8]
				event->param1 = (uint32_t)param1;
 800859a:	9503      	str	r5, [sp, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 800859c:	aa04      	add	r2, sp, #16
 800859e:	2300      	movs	r3, #0
 80085a0:	f842 3d10 	str.w	r3, [r2, #-16]!
 80085a4:	210c      	movs	r1, #12
 80085a6:	a801      	add	r0, sp, #4
 80085a8:	f7ff fc14 	bl	8007dd4 <writeToRTT>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d0df      	beq.n	8008570 <prvTraceStoreEvent1+0x1c>
 80085b0:	f7ff fda8 	bl	8008104 <vTraceStop>
 80085b4:	e7dc      	b.n	8008570 <prvTraceStoreEvent1+0x1c>
 80085b6:	bf00      	nop
 80085b8:	20004344 	.word	0x20004344
 80085bc:	20004350 	.word	0x20004350

080085c0 <prvTraceStoreEvent2>:
{
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	b086      	sub	sp, #24
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80085c4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80085c8:	d20d      	bcs.n	80085e6 <prvTraceStoreEvent2+0x26>
 80085ca:	460e      	mov	r6, r1
 80085cc:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d2:	2301      	movs	r3, #1
 80085d4:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 80085d8:	4b13      	ldr	r3, [pc, #76]	; (8008628 <prvTraceStoreEvent2+0x68>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	b93b      	cbnz	r3, 80085ee <prvTraceStoreEvent2+0x2e>
 80085de:	f384 8810 	msr	PRIMASK, r4
}
 80085e2:	b006      	add	sp, #24
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80085e6:	2001      	movs	r0, #1
 80085e8:	f7ff fcb4 	bl	8007f54 <prvTraceError>
 80085ec:	e7f9      	b.n	80085e2 <prvTraceStoreEvent2+0x22>
		eventCounter++;
 80085ee:	4a0f      	ldr	r2, [pc, #60]	; (800862c <prvTraceStoreEvent2+0x6c>)
 80085f0:	6813      	ldr	r3, [r2, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	6013      	str	r3, [r2, #0]
				event->base.EventID = eventID | PARAM_COUNT(2);
 80085f6:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80085fa:	f8ad 0008 	strh.w	r0, [sp, #8]
				event->base.EventCount = (uint16_t)eventCounter;
 80085fe:	f8ad 300a 	strh.w	r3, [sp, #10]
				event->base.TS = prvGetTimestamp32();
 8008602:	f7ff fc35 	bl	8007e70 <prvGetTimestamp32>
 8008606:	9003      	str	r0, [sp, #12]
				event->param1 = (uint32_t)param1;
 8008608:	9604      	str	r6, [sp, #16]
				event->param2 = param2;
 800860a:	9505      	str	r5, [sp, #20]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 800860c:	aa06      	add	r2, sp, #24
 800860e:	2300      	movs	r3, #0
 8008610:	f842 3d14 	str.w	r3, [r2, #-20]!
 8008614:	2110      	movs	r1, #16
 8008616:	a802      	add	r0, sp, #8
 8008618:	f7ff fbdc 	bl	8007dd4 <writeToRTT>
 800861c:	2800      	cmp	r0, #0
 800861e:	d0de      	beq.n	80085de <prvTraceStoreEvent2+0x1e>
 8008620:	f7ff fd70 	bl	8008104 <vTraceStop>
 8008624:	e7db      	b.n	80085de <prvTraceStoreEvent2+0x1e>
 8008626:	bf00      	nop
 8008628:	20004344 	.word	0x20004344
 800862c:	20004350 	.word	0x20004350

08008630 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008630:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8008632:	480a      	ldr	r0, [pc, #40]	; (800865c <MX_USART6_UART_Init+0x2c>)
 8008634:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <MX_USART6_UART_Init+0x30>)
 8008636:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8008638:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800863c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800863e:	2300      	movs	r3, #0
 8008640:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008642:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008644:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX;
 8008646:	2208      	movs	r2, #8
 8008648:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800864a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800864c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800864e:	f7fc fb35 	bl	8004cbc <HAL_UART_Init>
 8008652:	b900      	cbnz	r0, 8008656 <MX_USART6_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8008654:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008656:	f7ff f8e1 	bl	800781c <Error_Handler>
}
 800865a:	e7fb      	b.n	8008654 <MX_USART6_UART_Init+0x24>
 800865c:	20006574 	.word	0x20006574
 8008660:	40011400 	.word	0x40011400

08008664 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008664:	b530      	push	{r4, r5, lr}
 8008666:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008668:	2300      	movs	r3, #0
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	9305      	str	r3, [sp, #20]
 8008670:	9306      	str	r3, [sp, #24]
 8008672:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 8008674:	6802      	ldr	r2, [r0, #0]
 8008676:	4b1c      	ldr	r3, [pc, #112]	; (80086e8 <HAL_UART_MspInit+0x84>)
 8008678:	429a      	cmp	r2, r3
 800867a:	d001      	beq.n	8008680 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART6_MspInit 1 */
    // Enable RX idle interrupt, which we use to handle variable-length messages
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
  /* USER CODE END USART6_MspInit 1 */
  }
}
 800867c:	b009      	add	sp, #36	; 0x24
 800867e:	bd30      	pop	{r4, r5, pc}
 8008680:	4604      	mov	r4, r0
    __HAL_RCC_USART6_CLK_ENABLE();
 8008682:	2500      	movs	r5, #0
 8008684:	9501      	str	r5, [sp, #4]
 8008686:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800868a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800868c:	f042 0220 	orr.w	r2, r2, #32
 8008690:	645a      	str	r2, [r3, #68]	; 0x44
 8008692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008694:	f002 0220 	and.w	r2, r2, #32
 8008698:	9201      	str	r2, [sp, #4]
 800869a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800869c:	9502      	str	r5, [sp, #8]
 800869e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086a0:	f042 0204 	orr.w	r2, r2, #4
 80086a4:	631a      	str	r2, [r3, #48]	; 0x30
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	9302      	str	r3, [sp, #8]
 80086ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80086b0:	23c0      	movs	r3, #192	; 0xc0
 80086b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b4:	2302      	movs	r3, #2
 80086b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80086b8:	2301      	movs	r3, #1
 80086ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086bc:	2303      	movs	r3, #3
 80086be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80086c0:	2308      	movs	r3, #8
 80086c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086c4:	a903      	add	r1, sp, #12
 80086c6:	4809      	ldr	r0, [pc, #36]	; (80086ec <HAL_UART_MspInit+0x88>)
 80086c8:	f7fa f822 	bl	8002710 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 11, 0);
 80086cc:	462a      	mov	r2, r5
 80086ce:	210b      	movs	r1, #11
 80086d0:	2047      	movs	r0, #71	; 0x47
 80086d2:	f7f9 fe87 	bl	80023e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80086d6:	2047      	movs	r0, #71	; 0x47
 80086d8:	f7f9 feb8 	bl	800244c <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	68d3      	ldr	r3, [r2, #12]
 80086e0:	f043 0310 	orr.w	r3, r3, #16
 80086e4:	60d3      	str	r3, [r2, #12]
}
 80086e6:	e7c9      	b.n	800867c <HAL_UART_MspInit+0x18>
 80086e8:	40011400 	.word	0x40011400
 80086ec:	40020800 	.word	0x40020800

080086f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80086f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008728 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80086f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80086f6:	e003      	b.n	8008700 <LoopCopyDataInit>

080086f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80086f8:	4b0c      	ldr	r3, [pc, #48]	; (800872c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80086fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80086fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80086fe:	3104      	adds	r1, #4

08008700 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008700:	480b      	ldr	r0, [pc, #44]	; (8008730 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008702:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008708:	d3f6      	bcc.n	80086f8 <CopyDataInit>
  ldr  r2, =_sbss
 800870a:	4a0b      	ldr	r2, [pc, #44]	; (8008738 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800870c:	e002      	b.n	8008714 <LoopFillZerobss>

0800870e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800870e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008710:	f842 3b04 	str.w	r3, [r2], #4

08008714 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008714:	4b09      	ldr	r3, [pc, #36]	; (800873c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008718:	d3f9      	bcc.n	800870e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800871a:	f7ff f9db 	bl	8007ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800871e:	f001 fb95 	bl	8009e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008722:	f7ff f855 	bl	80077d0 <main>
  bx  lr    
 8008726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008728:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800872c:	0800ea10 	.word	0x0800ea10
  ldr  r0, =_sdata
 8008730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008734:	20000248 	.word	0x20000248
  ldr  r2, =_sbss
 8008738:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 800873c:	200065b8 	.word	0x200065b8

08008740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008740:	e7fe      	b.n	8008740 <ADC_IRQHandler>
	...

08008744 <pow>:
 8008744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	ed2d 8b04 	vpush	{d8-d9}
 800874c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008a20 <pow+0x2dc>
 8008750:	b08d      	sub	sp, #52	; 0x34
 8008752:	ec57 6b10 	vmov	r6, r7, d0
 8008756:	ec55 4b11 	vmov	r4, r5, d1
 800875a:	f000 fa19 	bl	8008b90 <__ieee754_pow>
 800875e:	f999 3000 	ldrsb.w	r3, [r9]
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	3301      	adds	r3, #1
 8008766:	eeb0 8a40 	vmov.f32	s16, s0
 800876a:	eef0 8a60 	vmov.f32	s17, s1
 800876e:	46c8      	mov	r8, r9
 8008770:	d05f      	beq.n	8008832 <pow+0xee>
 8008772:	4622      	mov	r2, r4
 8008774:	462b      	mov	r3, r5
 8008776:	4620      	mov	r0, r4
 8008778:	4629      	mov	r1, r5
 800877a:	f7f8 f9df 	bl	8000b3c <__aeabi_dcmpun>
 800877e:	4683      	mov	fp, r0
 8008780:	2800      	cmp	r0, #0
 8008782:	d156      	bne.n	8008832 <pow+0xee>
 8008784:	4632      	mov	r2, r6
 8008786:	463b      	mov	r3, r7
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f8 f9d6 	bl	8000b3c <__aeabi_dcmpun>
 8008790:	9001      	str	r0, [sp, #4]
 8008792:	b1e8      	cbz	r0, 80087d0 <pow+0x8c>
 8008794:	2200      	movs	r2, #0
 8008796:	2300      	movs	r3, #0
 8008798:	4620      	mov	r0, r4
 800879a:	4629      	mov	r1, r5
 800879c:	f7f8 f99c 	bl	8000ad8 <__aeabi_dcmpeq>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d046      	beq.n	8008832 <pow+0xee>
 80087a4:	2301      	movs	r3, #1
 80087a6:	9302      	str	r3, [sp, #8]
 80087a8:	4b96      	ldr	r3, [pc, #600]	; (8008a04 <pow+0x2c0>)
 80087aa:	9303      	str	r3, [sp, #12]
 80087ac:	4b96      	ldr	r3, [pc, #600]	; (8008a08 <pow+0x2c4>)
 80087ae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80087b2:	2200      	movs	r2, #0
 80087b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087b8:	9b00      	ldr	r3, [sp, #0]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80087c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80087c4:	d033      	beq.n	800882e <pow+0xea>
 80087c6:	a802      	add	r0, sp, #8
 80087c8:	f001 f94a 	bl	8009a60 <matherr>
 80087cc:	bb48      	cbnz	r0, 8008822 <pow+0xde>
 80087ce:	e05d      	b.n	800888c <pow+0x148>
 80087d0:	f04f 0a00 	mov.w	sl, #0
 80087d4:	f04f 0b00 	mov.w	fp, #0
 80087d8:	4652      	mov	r2, sl
 80087da:	465b      	mov	r3, fp
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f8 f97a 	bl	8000ad8 <__aeabi_dcmpeq>
 80087e4:	ec4b ab19 	vmov	d9, sl, fp
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d054      	beq.n	8008896 <pow+0x152>
 80087ec:	4652      	mov	r2, sl
 80087ee:	465b      	mov	r3, fp
 80087f0:	4620      	mov	r0, r4
 80087f2:	4629      	mov	r1, r5
 80087f4:	f7f8 f970 	bl	8000ad8 <__aeabi_dcmpeq>
 80087f8:	4680      	mov	r8, r0
 80087fa:	b318      	cbz	r0, 8008844 <pow+0x100>
 80087fc:	2301      	movs	r3, #1
 80087fe:	9302      	str	r3, [sp, #8]
 8008800:	4b80      	ldr	r3, [pc, #512]	; (8008a04 <pow+0x2c0>)
 8008802:	9303      	str	r3, [sp, #12]
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	930a      	str	r3, [sp, #40]	; 0x28
 8008808:	9b00      	ldr	r3, [sp, #0]
 800880a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800880e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008812:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0d5      	beq.n	80087c6 <pow+0x82>
 800881a:	4b7b      	ldr	r3, [pc, #492]	; (8008a08 <pow+0x2c4>)
 800881c:	2200      	movs	r2, #0
 800881e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008824:	b11b      	cbz	r3, 800882e <pow+0xea>
 8008826:	f001 fb0b 	bl	8009e40 <__errno>
 800882a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800882c:	6003      	str	r3, [r0, #0]
 800882e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008832:	eeb0 0a48 	vmov.f32	s0, s16
 8008836:	eef0 0a68 	vmov.f32	s1, s17
 800883a:	b00d      	add	sp, #52	; 0x34
 800883c:	ecbd 8b04 	vpop	{d8-d9}
 8008840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008844:	ec45 4b10 	vmov	d0, r4, r5
 8008848:	f001 f902 	bl	8009a50 <finite>
 800884c:	2800      	cmp	r0, #0
 800884e:	d0f0      	beq.n	8008832 <pow+0xee>
 8008850:	4652      	mov	r2, sl
 8008852:	465b      	mov	r3, fp
 8008854:	4620      	mov	r0, r4
 8008856:	4629      	mov	r1, r5
 8008858:	f7f8 f948 	bl	8000aec <__aeabi_dcmplt>
 800885c:	2800      	cmp	r0, #0
 800885e:	d0e8      	beq.n	8008832 <pow+0xee>
 8008860:	2301      	movs	r3, #1
 8008862:	9302      	str	r3, [sp, #8]
 8008864:	4b67      	ldr	r3, [pc, #412]	; (8008a04 <pow+0x2c0>)
 8008866:	9303      	str	r3, [sp, #12]
 8008868:	f999 3000 	ldrsb.w	r3, [r9]
 800886c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008870:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008874:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008878:	b913      	cbnz	r3, 8008880 <pow+0x13c>
 800887a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800887e:	e7a2      	b.n	80087c6 <pow+0x82>
 8008880:	4962      	ldr	r1, [pc, #392]	; (8008a0c <pow+0x2c8>)
 8008882:	2000      	movs	r0, #0
 8008884:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008888:	2b02      	cmp	r3, #2
 800888a:	d19c      	bne.n	80087c6 <pow+0x82>
 800888c:	f001 fad8 	bl	8009e40 <__errno>
 8008890:	2321      	movs	r3, #33	; 0x21
 8008892:	6003      	str	r3, [r0, #0]
 8008894:	e7c5      	b.n	8008822 <pow+0xde>
 8008896:	eeb0 0a48 	vmov.f32	s0, s16
 800889a:	eef0 0a68 	vmov.f32	s1, s17
 800889e:	f001 f8d7 	bl	8009a50 <finite>
 80088a2:	9000      	str	r0, [sp, #0]
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f040 8081 	bne.w	80089ac <pow+0x268>
 80088aa:	ec47 6b10 	vmov	d0, r6, r7
 80088ae:	f001 f8cf 	bl	8009a50 <finite>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d07a      	beq.n	80089ac <pow+0x268>
 80088b6:	ec45 4b10 	vmov	d0, r4, r5
 80088ba:	f001 f8c9 	bl	8009a50 <finite>
 80088be:	2800      	cmp	r0, #0
 80088c0:	d074      	beq.n	80089ac <pow+0x268>
 80088c2:	ec53 2b18 	vmov	r2, r3, d8
 80088c6:	ee18 0a10 	vmov	r0, s16
 80088ca:	4619      	mov	r1, r3
 80088cc:	f7f8 f936 	bl	8000b3c <__aeabi_dcmpun>
 80088d0:	f999 9000 	ldrsb.w	r9, [r9]
 80088d4:	4b4b      	ldr	r3, [pc, #300]	; (8008a04 <pow+0x2c0>)
 80088d6:	b1b0      	cbz	r0, 8008906 <pow+0x1c2>
 80088d8:	2201      	movs	r2, #1
 80088da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088de:	9b00      	ldr	r3, [sp, #0]
 80088e0:	930a      	str	r3, [sp, #40]	; 0x28
 80088e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80088e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80088ea:	f1b9 0f00 	cmp.w	r9, #0
 80088ee:	d0c4      	beq.n	800887a <pow+0x136>
 80088f0:	4652      	mov	r2, sl
 80088f2:	465b      	mov	r3, fp
 80088f4:	4650      	mov	r0, sl
 80088f6:	4659      	mov	r1, fp
 80088f8:	f7f7 ffb0 	bl	800085c <__aeabi_ddiv>
 80088fc:	f1b9 0f02 	cmp.w	r9, #2
 8008900:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008904:	e7c1      	b.n	800888a <pow+0x146>
 8008906:	2203      	movs	r2, #3
 8008908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800890c:	900a      	str	r0, [sp, #40]	; 0x28
 800890e:	4629      	mov	r1, r5
 8008910:	4620      	mov	r0, r4
 8008912:	2200      	movs	r2, #0
 8008914:	4b3e      	ldr	r3, [pc, #248]	; (8008a10 <pow+0x2cc>)
 8008916:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800891a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800891e:	f7f7 fe73 	bl	8000608 <__aeabi_dmul>
 8008922:	4604      	mov	r4, r0
 8008924:	460d      	mov	r5, r1
 8008926:	f1b9 0f00 	cmp.w	r9, #0
 800892a:	d124      	bne.n	8008976 <pow+0x232>
 800892c:	4b39      	ldr	r3, [pc, #228]	; (8008a14 <pow+0x2d0>)
 800892e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008932:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008936:	4630      	mov	r0, r6
 8008938:	4652      	mov	r2, sl
 800893a:	465b      	mov	r3, fp
 800893c:	4639      	mov	r1, r7
 800893e:	f7f8 f8d5 	bl	8000aec <__aeabi_dcmplt>
 8008942:	2800      	cmp	r0, #0
 8008944:	d056      	beq.n	80089f4 <pow+0x2b0>
 8008946:	ec45 4b10 	vmov	d0, r4, r5
 800894a:	f001 f895 	bl	8009a78 <rint>
 800894e:	4622      	mov	r2, r4
 8008950:	462b      	mov	r3, r5
 8008952:	ec51 0b10 	vmov	r0, r1, d0
 8008956:	f7f8 f8bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800895a:	b920      	cbnz	r0, 8008966 <pow+0x222>
 800895c:	4b2e      	ldr	r3, [pc, #184]	; (8008a18 <pow+0x2d4>)
 800895e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008962:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008966:	f998 3000 	ldrsb.w	r3, [r8]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d142      	bne.n	80089f4 <pow+0x2b0>
 800896e:	f001 fa67 	bl	8009e40 <__errno>
 8008972:	2322      	movs	r3, #34	; 0x22
 8008974:	e78d      	b.n	8008892 <pow+0x14e>
 8008976:	4b29      	ldr	r3, [pc, #164]	; (8008a1c <pow+0x2d8>)
 8008978:	2200      	movs	r2, #0
 800897a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800897e:	4630      	mov	r0, r6
 8008980:	4652      	mov	r2, sl
 8008982:	465b      	mov	r3, fp
 8008984:	4639      	mov	r1, r7
 8008986:	f7f8 f8b1 	bl	8000aec <__aeabi_dcmplt>
 800898a:	2800      	cmp	r0, #0
 800898c:	d0eb      	beq.n	8008966 <pow+0x222>
 800898e:	ec45 4b10 	vmov	d0, r4, r5
 8008992:	f001 f871 	bl	8009a78 <rint>
 8008996:	4622      	mov	r2, r4
 8008998:	462b      	mov	r3, r5
 800899a:	ec51 0b10 	vmov	r0, r1, d0
 800899e:	f7f8 f89b 	bl	8000ad8 <__aeabi_dcmpeq>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d1df      	bne.n	8008966 <pow+0x222>
 80089a6:	2200      	movs	r2, #0
 80089a8:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <pow+0x2c8>)
 80089aa:	e7da      	b.n	8008962 <pow+0x21e>
 80089ac:	2200      	movs	r2, #0
 80089ae:	2300      	movs	r3, #0
 80089b0:	ec51 0b18 	vmov	r0, r1, d8
 80089b4:	f7f8 f890 	bl	8000ad8 <__aeabi_dcmpeq>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	f43f af3a 	beq.w	8008832 <pow+0xee>
 80089be:	ec47 6b10 	vmov	d0, r6, r7
 80089c2:	f001 f845 	bl	8009a50 <finite>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f af33 	beq.w	8008832 <pow+0xee>
 80089cc:	ec45 4b10 	vmov	d0, r4, r5
 80089d0:	f001 f83e 	bl	8009a50 <finite>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	f43f af2c 	beq.w	8008832 <pow+0xee>
 80089da:	2304      	movs	r3, #4
 80089dc:	9302      	str	r3, [sp, #8]
 80089de:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <pow+0x2c0>)
 80089e0:	9303      	str	r3, [sp, #12]
 80089e2:	2300      	movs	r3, #0
 80089e4:	930a      	str	r3, [sp, #40]	; 0x28
 80089e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80089ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80089ee:	ed8d 9b08 	vstr	d9, [sp, #32]
 80089f2:	e7b8      	b.n	8008966 <pow+0x222>
 80089f4:	a802      	add	r0, sp, #8
 80089f6:	f001 f833 	bl	8009a60 <matherr>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f47f af11 	bne.w	8008822 <pow+0xde>
 8008a00:	e7b5      	b.n	800896e <pow+0x22a>
 8008a02:	bf00      	nop
 8008a04:	0800e678 	.word	0x0800e678
 8008a08:	3ff00000 	.word	0x3ff00000
 8008a0c:	fff00000 	.word	0xfff00000
 8008a10:	3fe00000 	.word	0x3fe00000
 8008a14:	47efffff 	.word	0x47efffff
 8008a18:	c7efffff 	.word	0xc7efffff
 8008a1c:	7ff00000 	.word	0x7ff00000
 8008a20:	20000074 	.word	0x20000074

08008a24 <sqrt>:
 8008a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a28:	ed2d 8b02 	vpush	{d8}
 8008a2c:	b08b      	sub	sp, #44	; 0x2c
 8008a2e:	ec55 4b10 	vmov	r4, r5, d0
 8008a32:	f000 fdbb 	bl	80095ac <__ieee754_sqrt>
 8008a36:	4b26      	ldr	r3, [pc, #152]	; (8008ad0 <sqrt+0xac>)
 8008a38:	eeb0 8a40 	vmov.f32	s16, s0
 8008a3c:	eef0 8a60 	vmov.f32	s17, s1
 8008a40:	f993 6000 	ldrsb.w	r6, [r3]
 8008a44:	1c73      	adds	r3, r6, #1
 8008a46:	d02a      	beq.n	8008a9e <sqrt+0x7a>
 8008a48:	4622      	mov	r2, r4
 8008a4a:	462b      	mov	r3, r5
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f7f8 f874 	bl	8000b3c <__aeabi_dcmpun>
 8008a54:	4607      	mov	r7, r0
 8008a56:	bb10      	cbnz	r0, 8008a9e <sqrt+0x7a>
 8008a58:	f04f 0800 	mov.w	r8, #0
 8008a5c:	f04f 0900 	mov.w	r9, #0
 8008a60:	4642      	mov	r2, r8
 8008a62:	464b      	mov	r3, r9
 8008a64:	4620      	mov	r0, r4
 8008a66:	4629      	mov	r1, r5
 8008a68:	f7f8 f840 	bl	8000aec <__aeabi_dcmplt>
 8008a6c:	b1b8      	cbz	r0, 8008a9e <sqrt+0x7a>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	4b18      	ldr	r3, [pc, #96]	; (8008ad4 <sqrt+0xb0>)
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	9708      	str	r7, [sp, #32]
 8008a78:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008a7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008a80:	b9b6      	cbnz	r6, 8008ab0 <sqrt+0x8c>
 8008a82:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008a86:	4668      	mov	r0, sp
 8008a88:	f000 ffea 	bl	8009a60 <matherr>
 8008a8c:	b1d0      	cbz	r0, 8008ac4 <sqrt+0xa0>
 8008a8e:	9b08      	ldr	r3, [sp, #32]
 8008a90:	b11b      	cbz	r3, 8008a9a <sqrt+0x76>
 8008a92:	f001 f9d5 	bl	8009e40 <__errno>
 8008a96:	9b08      	ldr	r3, [sp, #32]
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008a9e:	eeb0 0a48 	vmov.f32	s0, s16
 8008aa2:	eef0 0a68 	vmov.f32	s1, s17
 8008aa6:	b00b      	add	sp, #44	; 0x2c
 8008aa8:	ecbd 8b02 	vpop	{d8}
 8008aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	464b      	mov	r3, r9
 8008ab4:	4640      	mov	r0, r8
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	f7f7 fed0 	bl	800085c <__aeabi_ddiv>
 8008abc:	2e02      	cmp	r6, #2
 8008abe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ac2:	d1e0      	bne.n	8008a86 <sqrt+0x62>
 8008ac4:	f001 f9bc 	bl	8009e40 <__errno>
 8008ac8:	2321      	movs	r3, #33	; 0x21
 8008aca:	6003      	str	r3, [r0, #0]
 8008acc:	e7df      	b.n	8008a8e <sqrt+0x6a>
 8008ace:	bf00      	nop
 8008ad0:	20000074 	.word	0x20000074
 8008ad4:	0800e67c 	.word	0x0800e67c

08008ad8 <asinf>:
 8008ad8:	b510      	push	{r4, lr}
 8008ada:	ed2d 8b02 	vpush	{d8}
 8008ade:	4c27      	ldr	r4, [pc, #156]	; (8008b7c <asinf+0xa4>)
 8008ae0:	b08a      	sub	sp, #40	; 0x28
 8008ae2:	eeb0 8a40 	vmov.f32	s16, s0
 8008ae6:	f000 fe11 	bl	800970c <__ieee754_asinf>
 8008aea:	f994 3000 	ldrsb.w	r3, [r4]
 8008aee:	3301      	adds	r3, #1
 8008af0:	eef0 8a40 	vmov.f32	s17, s0
 8008af4:	d03c      	beq.n	8008b70 <asinf+0x98>
 8008af6:	eeb4 8a48 	vcmp.f32	s16, s16
 8008afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afe:	d637      	bvs.n	8008b70 <asinf+0x98>
 8008b00:	eeb0 0a48 	vmov.f32	s0, s16
 8008b04:	f001 f986 	bl	8009e14 <fabsf>
 8008b08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008b0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b14:	dd2c      	ble.n	8008b70 <asinf+0x98>
 8008b16:	2301      	movs	r3, #1
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <asinf+0xa8>)
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	ee18 0a10 	vmov	r0, s16
 8008b22:	2300      	movs	r3, #0
 8008b24:	9308      	str	r3, [sp, #32]
 8008b26:	f7f7 fd17 	bl	8000558 <__aeabi_f2d>
 8008b2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b32:	4814      	ldr	r0, [pc, #80]	; (8008b84 <asinf+0xac>)
 8008b34:	f000 ff98 	bl	8009a68 <nan>
 8008b38:	f994 3000 	ldrsb.w	r3, [r4]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008b42:	d104      	bne.n	8008b4e <asinf+0x76>
 8008b44:	f001 f97c 	bl	8009e40 <__errno>
 8008b48:	2321      	movs	r3, #33	; 0x21
 8008b4a:	6003      	str	r3, [r0, #0]
 8008b4c:	e004      	b.n	8008b58 <asinf+0x80>
 8008b4e:	4668      	mov	r0, sp
 8008b50:	f000 ff86 	bl	8009a60 <matherr>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d0f5      	beq.n	8008b44 <asinf+0x6c>
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	b11b      	cbz	r3, 8008b64 <asinf+0x8c>
 8008b5c:	f001 f970 	bl	8009e40 <__errno>
 8008b60:	9b08      	ldr	r3, [sp, #32]
 8008b62:	6003      	str	r3, [r0, #0]
 8008b64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b68:	f7f8 f846 	bl	8000bf8 <__aeabi_d2f>
 8008b6c:	ee08 0a90 	vmov	s17, r0
 8008b70:	eeb0 0a68 	vmov.f32	s0, s17
 8008b74:	b00a      	add	sp, #40	; 0x28
 8008b76:	ecbd 8b02 	vpop	{d8}
 8008b7a:	bd10      	pop	{r4, pc}
 8008b7c:	20000074 	.word	0x20000074
 8008b80:	0800e681 	.word	0x0800e681
 8008b84:	0800e9f1 	.word	0x0800e9f1

08008b88 <atan2f>:
 8008b88:	f000 bea8 	b.w	80098dc <__ieee754_atan2f>
 8008b8c:	0000      	movs	r0, r0
	...

08008b90 <__ieee754_pow>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	b091      	sub	sp, #68	; 0x44
 8008b96:	ed8d 1b00 	vstr	d1, [sp]
 8008b9a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008b9e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008ba2:	ea58 0302 	orrs.w	r3, r8, r2
 8008ba6:	ec57 6b10 	vmov	r6, r7, d0
 8008baa:	f000 84be 	beq.w	800952a <__ieee754_pow+0x99a>
 8008bae:	4b7a      	ldr	r3, [pc, #488]	; (8008d98 <__ieee754_pow+0x208>)
 8008bb0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008bb4:	429c      	cmp	r4, r3
 8008bb6:	463d      	mov	r5, r7
 8008bb8:	ee10 aa10 	vmov	sl, s0
 8008bbc:	dc09      	bgt.n	8008bd2 <__ieee754_pow+0x42>
 8008bbe:	d103      	bne.n	8008bc8 <__ieee754_pow+0x38>
 8008bc0:	b93e      	cbnz	r6, 8008bd2 <__ieee754_pow+0x42>
 8008bc2:	45a0      	cmp	r8, r4
 8008bc4:	dc0d      	bgt.n	8008be2 <__ieee754_pow+0x52>
 8008bc6:	e001      	b.n	8008bcc <__ieee754_pow+0x3c>
 8008bc8:	4598      	cmp	r8, r3
 8008bca:	dc02      	bgt.n	8008bd2 <__ieee754_pow+0x42>
 8008bcc:	4598      	cmp	r8, r3
 8008bce:	d10e      	bne.n	8008bee <__ieee754_pow+0x5e>
 8008bd0:	b16a      	cbz	r2, 8008bee <__ieee754_pow+0x5e>
 8008bd2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008bd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008bda:	ea54 030a 	orrs.w	r3, r4, sl
 8008bde:	f000 84a4 	beq.w	800952a <__ieee754_pow+0x99a>
 8008be2:	486e      	ldr	r0, [pc, #440]	; (8008d9c <__ieee754_pow+0x20c>)
 8008be4:	b011      	add	sp, #68	; 0x44
 8008be6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bea:	f000 bf3d 	b.w	8009a68 <nan>
 8008bee:	2d00      	cmp	r5, #0
 8008bf0:	da53      	bge.n	8008c9a <__ieee754_pow+0x10a>
 8008bf2:	4b6b      	ldr	r3, [pc, #428]	; (8008da0 <__ieee754_pow+0x210>)
 8008bf4:	4598      	cmp	r8, r3
 8008bf6:	dc4d      	bgt.n	8008c94 <__ieee754_pow+0x104>
 8008bf8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008bfc:	4598      	cmp	r8, r3
 8008bfe:	dd4c      	ble.n	8008c9a <__ieee754_pow+0x10a>
 8008c00:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c04:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c08:	2b14      	cmp	r3, #20
 8008c0a:	dd26      	ble.n	8008c5a <__ieee754_pow+0xca>
 8008c0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c10:	fa22 f103 	lsr.w	r1, r2, r3
 8008c14:	fa01 f303 	lsl.w	r3, r1, r3
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d13e      	bne.n	8008c9a <__ieee754_pow+0x10a>
 8008c1c:	f001 0101 	and.w	r1, r1, #1
 8008c20:	f1c1 0b02 	rsb	fp, r1, #2
 8008c24:	2a00      	cmp	r2, #0
 8008c26:	d15b      	bne.n	8008ce0 <__ieee754_pow+0x150>
 8008c28:	4b5b      	ldr	r3, [pc, #364]	; (8008d98 <__ieee754_pow+0x208>)
 8008c2a:	4598      	cmp	r8, r3
 8008c2c:	d124      	bne.n	8008c78 <__ieee754_pow+0xe8>
 8008c2e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008c32:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008c36:	ea53 030a 	orrs.w	r3, r3, sl
 8008c3a:	f000 8476 	beq.w	800952a <__ieee754_pow+0x99a>
 8008c3e:	4b59      	ldr	r3, [pc, #356]	; (8008da4 <__ieee754_pow+0x214>)
 8008c40:	429c      	cmp	r4, r3
 8008c42:	dd2d      	ble.n	8008ca0 <__ieee754_pow+0x110>
 8008c44:	f1b9 0f00 	cmp.w	r9, #0
 8008c48:	f280 8473 	bge.w	8009532 <__ieee754_pow+0x9a2>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	2100      	movs	r1, #0
 8008c50:	ec41 0b10 	vmov	d0, r0, r1
 8008c54:	b011      	add	sp, #68	; 0x44
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	d13e      	bne.n	8008cdc <__ieee754_pow+0x14c>
 8008c5e:	f1c3 0314 	rsb	r3, r3, #20
 8008c62:	fa48 f103 	asr.w	r1, r8, r3
 8008c66:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6a:	4543      	cmp	r3, r8
 8008c6c:	f040 8469 	bne.w	8009542 <__ieee754_pow+0x9b2>
 8008c70:	f001 0101 	and.w	r1, r1, #1
 8008c74:	f1c1 0b02 	rsb	fp, r1, #2
 8008c78:	4b4b      	ldr	r3, [pc, #300]	; (8008da8 <__ieee754_pow+0x218>)
 8008c7a:	4598      	cmp	r8, r3
 8008c7c:	d118      	bne.n	8008cb0 <__ieee754_pow+0x120>
 8008c7e:	f1b9 0f00 	cmp.w	r9, #0
 8008c82:	f280 845a 	bge.w	800953a <__ieee754_pow+0x9aa>
 8008c86:	4948      	ldr	r1, [pc, #288]	; (8008da8 <__ieee754_pow+0x218>)
 8008c88:	4632      	mov	r2, r6
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f7f7 fde5 	bl	800085c <__aeabi_ddiv>
 8008c92:	e7dd      	b.n	8008c50 <__ieee754_pow+0xc0>
 8008c94:	f04f 0b02 	mov.w	fp, #2
 8008c98:	e7c4      	b.n	8008c24 <__ieee754_pow+0x94>
 8008c9a:	f04f 0b00 	mov.w	fp, #0
 8008c9e:	e7c1      	b.n	8008c24 <__ieee754_pow+0x94>
 8008ca0:	f1b9 0f00 	cmp.w	r9, #0
 8008ca4:	dad2      	bge.n	8008c4c <__ieee754_pow+0xbc>
 8008ca6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008caa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008cae:	e7cf      	b.n	8008c50 <__ieee754_pow+0xc0>
 8008cb0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008cb4:	d106      	bne.n	8008cc4 <__ieee754_pow+0x134>
 8008cb6:	4632      	mov	r2, r6
 8008cb8:	463b      	mov	r3, r7
 8008cba:	4610      	mov	r0, r2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	f7f7 fca3 	bl	8000608 <__aeabi_dmul>
 8008cc2:	e7c5      	b.n	8008c50 <__ieee754_pow+0xc0>
 8008cc4:	4b39      	ldr	r3, [pc, #228]	; (8008dac <__ieee754_pow+0x21c>)
 8008cc6:	4599      	cmp	r9, r3
 8008cc8:	d10a      	bne.n	8008ce0 <__ieee754_pow+0x150>
 8008cca:	2d00      	cmp	r5, #0
 8008ccc:	db08      	blt.n	8008ce0 <__ieee754_pow+0x150>
 8008cce:	ec47 6b10 	vmov	d0, r6, r7
 8008cd2:	b011      	add	sp, #68	; 0x44
 8008cd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd8:	f000 bc68 	b.w	80095ac <__ieee754_sqrt>
 8008cdc:	f04f 0b00 	mov.w	fp, #0
 8008ce0:	ec47 6b10 	vmov	d0, r6, r7
 8008ce4:	f000 feab 	bl	8009a3e <fabs>
 8008ce8:	ec51 0b10 	vmov	r0, r1, d0
 8008cec:	f1ba 0f00 	cmp.w	sl, #0
 8008cf0:	d127      	bne.n	8008d42 <__ieee754_pow+0x1b2>
 8008cf2:	b124      	cbz	r4, 8008cfe <__ieee754_pow+0x16e>
 8008cf4:	4b2c      	ldr	r3, [pc, #176]	; (8008da8 <__ieee754_pow+0x218>)
 8008cf6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d121      	bne.n	8008d42 <__ieee754_pow+0x1b2>
 8008cfe:	f1b9 0f00 	cmp.w	r9, #0
 8008d02:	da05      	bge.n	8008d10 <__ieee754_pow+0x180>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	2000      	movs	r0, #0
 8008d0a:	4927      	ldr	r1, [pc, #156]	; (8008da8 <__ieee754_pow+0x218>)
 8008d0c:	f7f7 fda6 	bl	800085c <__aeabi_ddiv>
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	da9d      	bge.n	8008c50 <__ieee754_pow+0xc0>
 8008d14:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d18:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d1c:	ea54 030b 	orrs.w	r3, r4, fp
 8008d20:	d108      	bne.n	8008d34 <__ieee754_pow+0x1a4>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4610      	mov	r0, r2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	f7f7 fab5 	bl	8000298 <__aeabi_dsub>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	e7ac      	b.n	8008c8e <__ieee754_pow+0xfe>
 8008d34:	f1bb 0f01 	cmp.w	fp, #1
 8008d38:	d18a      	bne.n	8008c50 <__ieee754_pow+0xc0>
 8008d3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d3e:	4619      	mov	r1, r3
 8008d40:	e786      	b.n	8008c50 <__ieee754_pow+0xc0>
 8008d42:	0fed      	lsrs	r5, r5, #31
 8008d44:	1e6b      	subs	r3, r5, #1
 8008d46:	930d      	str	r3, [sp, #52]	; 0x34
 8008d48:	ea5b 0303 	orrs.w	r3, fp, r3
 8008d4c:	d102      	bne.n	8008d54 <__ieee754_pow+0x1c4>
 8008d4e:	4632      	mov	r2, r6
 8008d50:	463b      	mov	r3, r7
 8008d52:	e7e8      	b.n	8008d26 <__ieee754_pow+0x196>
 8008d54:	4b16      	ldr	r3, [pc, #88]	; (8008db0 <__ieee754_pow+0x220>)
 8008d56:	4598      	cmp	r8, r3
 8008d58:	f340 80fe 	ble.w	8008f58 <__ieee754_pow+0x3c8>
 8008d5c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008d60:	4598      	cmp	r8, r3
 8008d62:	dd0a      	ble.n	8008d7a <__ieee754_pow+0x1ea>
 8008d64:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <__ieee754_pow+0x214>)
 8008d66:	429c      	cmp	r4, r3
 8008d68:	dc0d      	bgt.n	8008d86 <__ieee754_pow+0x1f6>
 8008d6a:	f1b9 0f00 	cmp.w	r9, #0
 8008d6e:	f6bf af6d 	bge.w	8008c4c <__ieee754_pow+0xbc>
 8008d72:	a307      	add	r3, pc, #28	; (adr r3, 8008d90 <__ieee754_pow+0x200>)
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	e79f      	b.n	8008cba <__ieee754_pow+0x12a>
 8008d7a:	4b0e      	ldr	r3, [pc, #56]	; (8008db4 <__ieee754_pow+0x224>)
 8008d7c:	429c      	cmp	r4, r3
 8008d7e:	ddf4      	ble.n	8008d6a <__ieee754_pow+0x1da>
 8008d80:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <__ieee754_pow+0x218>)
 8008d82:	429c      	cmp	r4, r3
 8008d84:	dd18      	ble.n	8008db8 <__ieee754_pow+0x228>
 8008d86:	f1b9 0f00 	cmp.w	r9, #0
 8008d8a:	dcf2      	bgt.n	8008d72 <__ieee754_pow+0x1e2>
 8008d8c:	e75e      	b.n	8008c4c <__ieee754_pow+0xbc>
 8008d8e:	bf00      	nop
 8008d90:	8800759c 	.word	0x8800759c
 8008d94:	7e37e43c 	.word	0x7e37e43c
 8008d98:	7ff00000 	.word	0x7ff00000
 8008d9c:	0800e9f1 	.word	0x0800e9f1
 8008da0:	433fffff 	.word	0x433fffff
 8008da4:	3fefffff 	.word	0x3fefffff
 8008da8:	3ff00000 	.word	0x3ff00000
 8008dac:	3fe00000 	.word	0x3fe00000
 8008db0:	41e00000 	.word	0x41e00000
 8008db4:	3feffffe 	.word	0x3feffffe
 8008db8:	2200      	movs	r2, #0
 8008dba:	4b63      	ldr	r3, [pc, #396]	; (8008f48 <__ieee754_pow+0x3b8>)
 8008dbc:	f7f7 fa6c 	bl	8000298 <__aeabi_dsub>
 8008dc0:	a355      	add	r3, pc, #340	; (adr r3, 8008f18 <__ieee754_pow+0x388>)
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	460d      	mov	r5, r1
 8008dca:	f7f7 fc1d 	bl	8000608 <__aeabi_dmul>
 8008dce:	a354      	add	r3, pc, #336	; (adr r3, 8008f20 <__ieee754_pow+0x390>)
 8008dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	460f      	mov	r7, r1
 8008dd8:	4620      	mov	r0, r4
 8008dda:	4629      	mov	r1, r5
 8008ddc:	f7f7 fc14 	bl	8000608 <__aeabi_dmul>
 8008de0:	2200      	movs	r2, #0
 8008de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008de6:	4b59      	ldr	r3, [pc, #356]	; (8008f4c <__ieee754_pow+0x3bc>)
 8008de8:	4620      	mov	r0, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	f7f7 fc0c 	bl	8000608 <__aeabi_dmul>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	a14c      	add	r1, pc, #304	; (adr r1, 8008f28 <__ieee754_pow+0x398>)
 8008df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dfa:	f7f7 fa4d 	bl	8000298 <__aeabi_dsub>
 8008dfe:	4622      	mov	r2, r4
 8008e00:	462b      	mov	r3, r5
 8008e02:	f7f7 fc01 	bl	8000608 <__aeabi_dmul>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	4950      	ldr	r1, [pc, #320]	; (8008f50 <__ieee754_pow+0x3c0>)
 8008e0e:	f7f7 fa43 	bl	8000298 <__aeabi_dsub>
 8008e12:	4622      	mov	r2, r4
 8008e14:	462b      	mov	r3, r5
 8008e16:	4680      	mov	r8, r0
 8008e18:	4689      	mov	r9, r1
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	f7f7 fbf3 	bl	8000608 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4640      	mov	r0, r8
 8008e28:	4649      	mov	r1, r9
 8008e2a:	f7f7 fbed 	bl	8000608 <__aeabi_dmul>
 8008e2e:	a340      	add	r3, pc, #256	; (adr r3, 8008f30 <__ieee754_pow+0x3a0>)
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f7f7 fbe8 	bl	8000608 <__aeabi_dmul>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e40:	f7f7 fa2a 	bl	8000298 <__aeabi_dsub>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4604      	mov	r4, r0
 8008e4a:	460d      	mov	r5, r1
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	4639      	mov	r1, r7
 8008e50:	f7f7 fa24 	bl	800029c <__adddf3>
 8008e54:	2000      	movs	r0, #0
 8008e56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e5a:	4632      	mov	r2, r6
 8008e5c:	463b      	mov	r3, r7
 8008e5e:	f7f7 fa1b 	bl	8000298 <__aeabi_dsub>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4620      	mov	r0, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fa15 	bl	8000298 <__aeabi_dsub>
 8008e6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e70:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008e74:	4313      	orrs	r3, r2
 8008e76:	4606      	mov	r6, r0
 8008e78:	460f      	mov	r7, r1
 8008e7a:	f040 81eb 	bne.w	8009254 <__ieee754_pow+0x6c4>
 8008e7e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008f38 <__ieee754_pow+0x3a8>
 8008e82:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008e86:	2400      	movs	r4, #0
 8008e88:	4622      	mov	r2, r4
 8008e8a:	462b      	mov	r3, r5
 8008e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e94:	f7f7 fa00 	bl	8000298 <__aeabi_dsub>
 8008e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e9c:	f7f7 fbb4 	bl	8000608 <__aeabi_dmul>
 8008ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	4689      	mov	r9, r1
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4639      	mov	r1, r7
 8008eac:	f7f7 fbac 	bl	8000608 <__aeabi_dmul>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	f7f7 f9f0 	bl	800029c <__adddf3>
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	462b      	mov	r3, r5
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	4689      	mov	r9, r1
 8008ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ec8:	f7f7 fb9e 	bl	8000608 <__aeabi_dmul>
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4604      	mov	r4, r0
 8008ed0:	460d      	mov	r5, r1
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	e9cd 4500 	strd	r4, r5, [sp]
 8008edc:	f7f7 f9de 	bl	800029c <__adddf3>
 8008ee0:	4b1c      	ldr	r3, [pc, #112]	; (8008f54 <__ieee754_pow+0x3c4>)
 8008ee2:	4299      	cmp	r1, r3
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	460f      	mov	r7, r1
 8008ee8:	468b      	mov	fp, r1
 8008eea:	f340 82f7 	ble.w	80094dc <__ieee754_pow+0x94c>
 8008eee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008ef2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008ef6:	4303      	orrs	r3, r0
 8008ef8:	f000 81ea 	beq.w	80092d0 <__ieee754_pow+0x740>
 8008efc:	a310      	add	r3, pc, #64	; (adr r3, 8008f40 <__ieee754_pow+0x3b0>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f06:	f7f7 fb7f 	bl	8000608 <__aeabi_dmul>
 8008f0a:	a30d      	add	r3, pc, #52	; (adr r3, 8008f40 <__ieee754_pow+0x3b0>)
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	e6d5      	b.n	8008cbe <__ieee754_pow+0x12e>
 8008f12:	bf00      	nop
 8008f14:	f3af 8000 	nop.w
 8008f18:	60000000 	.word	0x60000000
 8008f1c:	3ff71547 	.word	0x3ff71547
 8008f20:	f85ddf44 	.word	0xf85ddf44
 8008f24:	3e54ae0b 	.word	0x3e54ae0b
 8008f28:	55555555 	.word	0x55555555
 8008f2c:	3fd55555 	.word	0x3fd55555
 8008f30:	652b82fe 	.word	0x652b82fe
 8008f34:	3ff71547 	.word	0x3ff71547
 8008f38:	00000000 	.word	0x00000000
 8008f3c:	bff00000 	.word	0xbff00000
 8008f40:	8800759c 	.word	0x8800759c
 8008f44:	7e37e43c 	.word	0x7e37e43c
 8008f48:	3ff00000 	.word	0x3ff00000
 8008f4c:	3fd00000 	.word	0x3fd00000
 8008f50:	3fe00000 	.word	0x3fe00000
 8008f54:	408fffff 	.word	0x408fffff
 8008f58:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008f5c:	f04f 0200 	mov.w	r2, #0
 8008f60:	da05      	bge.n	8008f6e <__ieee754_pow+0x3de>
 8008f62:	4bd3      	ldr	r3, [pc, #844]	; (80092b0 <__ieee754_pow+0x720>)
 8008f64:	f7f7 fb50 	bl	8000608 <__aeabi_dmul>
 8008f68:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	1523      	asrs	r3, r4, #20
 8008f70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f74:	4413      	add	r3, r2
 8008f76:	9309      	str	r3, [sp, #36]	; 0x24
 8008f78:	4bce      	ldr	r3, [pc, #824]	; (80092b4 <__ieee754_pow+0x724>)
 8008f7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f7e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008f82:	429c      	cmp	r4, r3
 8008f84:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f88:	dd08      	ble.n	8008f9c <__ieee754_pow+0x40c>
 8008f8a:	4bcb      	ldr	r3, [pc, #812]	; (80092b8 <__ieee754_pow+0x728>)
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	f340 815e 	ble.w	800924e <__ieee754_pow+0x6be>
 8008f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f94:	3301      	adds	r3, #1
 8008f96:	9309      	str	r3, [sp, #36]	; 0x24
 8008f98:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008f9c:	f04f 0a00 	mov.w	sl, #0
 8008fa0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008fa4:	930c      	str	r3, [sp, #48]	; 0x30
 8008fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fa8:	4bc4      	ldr	r3, [pc, #784]	; (80092bc <__ieee754_pow+0x72c>)
 8008faa:	4413      	add	r3, r2
 8008fac:	ed93 7b00 	vldr	d7, [r3]
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	ec53 2b17 	vmov	r2, r3, d7
 8008fb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008fbe:	f7f7 f96b 	bl	8000298 <__aeabi_dsub>
 8008fc2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	460f      	mov	r7, r1
 8008fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fce:	f7f7 f965 	bl	800029c <__adddf3>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	49b9      	ldr	r1, [pc, #740]	; (80092c0 <__ieee754_pow+0x730>)
 8008fda:	f7f7 fc3f 	bl	800085c <__aeabi_ddiv>
 8008fde:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	4639      	mov	r1, r7
 8008fea:	f7f7 fb0d 	bl	8000608 <__aeabi_dmul>
 8008fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ff2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008ff6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	9302      	str	r3, [sp, #8]
 8008ffe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009002:	106d      	asrs	r5, r5, #1
 8009004:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009008:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800900c:	2200      	movs	r2, #0
 800900e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009012:	4640      	mov	r0, r8
 8009014:	4649      	mov	r1, r9
 8009016:	4614      	mov	r4, r2
 8009018:	461d      	mov	r5, r3
 800901a:	f7f7 faf5 	bl	8000608 <__aeabi_dmul>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	4630      	mov	r0, r6
 8009024:	4639      	mov	r1, r7
 8009026:	f7f7 f937 	bl	8000298 <__aeabi_dsub>
 800902a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800902e:	4606      	mov	r6, r0
 8009030:	460f      	mov	r7, r1
 8009032:	4620      	mov	r0, r4
 8009034:	4629      	mov	r1, r5
 8009036:	f7f7 f92f 	bl	8000298 <__aeabi_dsub>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009042:	f7f7 f929 	bl	8000298 <__aeabi_dsub>
 8009046:	4642      	mov	r2, r8
 8009048:	464b      	mov	r3, r9
 800904a:	f7f7 fadd 	bl	8000608 <__aeabi_dmul>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4630      	mov	r0, r6
 8009054:	4639      	mov	r1, r7
 8009056:	f7f7 f91f 	bl	8000298 <__aeabi_dsub>
 800905a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800905e:	f7f7 fad3 	bl	8000608 <__aeabi_dmul>
 8009062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009066:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800906a:	4610      	mov	r0, r2
 800906c:	4619      	mov	r1, r3
 800906e:	f7f7 facb 	bl	8000608 <__aeabi_dmul>
 8009072:	a37b      	add	r3, pc, #492	; (adr r3, 8009260 <__ieee754_pow+0x6d0>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	4604      	mov	r4, r0
 800907a:	460d      	mov	r5, r1
 800907c:	f7f7 fac4 	bl	8000608 <__aeabi_dmul>
 8009080:	a379      	add	r3, pc, #484	; (adr r3, 8009268 <__ieee754_pow+0x6d8>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	f7f7 f909 	bl	800029c <__adddf3>
 800908a:	4622      	mov	r2, r4
 800908c:	462b      	mov	r3, r5
 800908e:	f7f7 fabb 	bl	8000608 <__aeabi_dmul>
 8009092:	a377      	add	r3, pc, #476	; (adr r3, 8009270 <__ieee754_pow+0x6e0>)
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f7f7 f900 	bl	800029c <__adddf3>
 800909c:	4622      	mov	r2, r4
 800909e:	462b      	mov	r3, r5
 80090a0:	f7f7 fab2 	bl	8000608 <__aeabi_dmul>
 80090a4:	a374      	add	r3, pc, #464	; (adr r3, 8009278 <__ieee754_pow+0x6e8>)
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	f7f7 f8f7 	bl	800029c <__adddf3>
 80090ae:	4622      	mov	r2, r4
 80090b0:	462b      	mov	r3, r5
 80090b2:	f7f7 faa9 	bl	8000608 <__aeabi_dmul>
 80090b6:	a372      	add	r3, pc, #456	; (adr r3, 8009280 <__ieee754_pow+0x6f0>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	f7f7 f8ee 	bl	800029c <__adddf3>
 80090c0:	4622      	mov	r2, r4
 80090c2:	462b      	mov	r3, r5
 80090c4:	f7f7 faa0 	bl	8000608 <__aeabi_dmul>
 80090c8:	a36f      	add	r3, pc, #444	; (adr r3, 8009288 <__ieee754_pow+0x6f8>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 f8e5 	bl	800029c <__adddf3>
 80090d2:	4622      	mov	r2, r4
 80090d4:	4606      	mov	r6, r0
 80090d6:	460f      	mov	r7, r1
 80090d8:	462b      	mov	r3, r5
 80090da:	4620      	mov	r0, r4
 80090dc:	4629      	mov	r1, r5
 80090de:	f7f7 fa93 	bl	8000608 <__aeabi_dmul>
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	4630      	mov	r0, r6
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 fa8d 	bl	8000608 <__aeabi_dmul>
 80090ee:	4642      	mov	r2, r8
 80090f0:	4604      	mov	r4, r0
 80090f2:	460d      	mov	r5, r1
 80090f4:	464b      	mov	r3, r9
 80090f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090fa:	f7f7 f8cf 	bl	800029c <__adddf3>
 80090fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009102:	f7f7 fa81 	bl	8000608 <__aeabi_dmul>
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	f7f7 f8c7 	bl	800029c <__adddf3>
 800910e:	4642      	mov	r2, r8
 8009110:	4606      	mov	r6, r0
 8009112:	460f      	mov	r7, r1
 8009114:	464b      	mov	r3, r9
 8009116:	4640      	mov	r0, r8
 8009118:	4649      	mov	r1, r9
 800911a:	f7f7 fa75 	bl	8000608 <__aeabi_dmul>
 800911e:	2200      	movs	r2, #0
 8009120:	4b68      	ldr	r3, [pc, #416]	; (80092c4 <__ieee754_pow+0x734>)
 8009122:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009126:	f7f7 f8b9 	bl	800029c <__adddf3>
 800912a:	4632      	mov	r2, r6
 800912c:	463b      	mov	r3, r7
 800912e:	f7f7 f8b5 	bl	800029c <__adddf3>
 8009132:	9802      	ldr	r0, [sp, #8]
 8009134:	460d      	mov	r5, r1
 8009136:	4604      	mov	r4, r0
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4640      	mov	r0, r8
 800913e:	4649      	mov	r1, r9
 8009140:	f7f7 fa62 	bl	8000608 <__aeabi_dmul>
 8009144:	2200      	movs	r2, #0
 8009146:	4680      	mov	r8, r0
 8009148:	4689      	mov	r9, r1
 800914a:	4b5e      	ldr	r3, [pc, #376]	; (80092c4 <__ieee754_pow+0x734>)
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	f7f7 f8a2 	bl	8000298 <__aeabi_dsub>
 8009154:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009158:	f7f7 f89e 	bl	8000298 <__aeabi_dsub>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4630      	mov	r0, r6
 8009162:	4639      	mov	r1, r7
 8009164:	f7f7 f898 	bl	8000298 <__aeabi_dsub>
 8009168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800916c:	f7f7 fa4c 	bl	8000608 <__aeabi_dmul>
 8009170:	4622      	mov	r2, r4
 8009172:	4606      	mov	r6, r0
 8009174:	460f      	mov	r7, r1
 8009176:	462b      	mov	r3, r5
 8009178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800917c:	f7f7 fa44 	bl	8000608 <__aeabi_dmul>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4630      	mov	r0, r6
 8009186:	4639      	mov	r1, r7
 8009188:	f7f7 f888 	bl	800029c <__adddf3>
 800918c:	4606      	mov	r6, r0
 800918e:	460f      	mov	r7, r1
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4640      	mov	r0, r8
 8009196:	4649      	mov	r1, r9
 8009198:	f7f7 f880 	bl	800029c <__adddf3>
 800919c:	9802      	ldr	r0, [sp, #8]
 800919e:	a33c      	add	r3, pc, #240	; (adr r3, 8009290 <__ieee754_pow+0x700>)
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	4604      	mov	r4, r0
 80091a6:	460d      	mov	r5, r1
 80091a8:	f7f7 fa2e 	bl	8000608 <__aeabi_dmul>
 80091ac:	4642      	mov	r2, r8
 80091ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091b2:	464b      	mov	r3, r9
 80091b4:	4620      	mov	r0, r4
 80091b6:	4629      	mov	r1, r5
 80091b8:	f7f7 f86e 	bl	8000298 <__aeabi_dsub>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 f868 	bl	8000298 <__aeabi_dsub>
 80091c8:	a333      	add	r3, pc, #204	; (adr r3, 8009298 <__ieee754_pow+0x708>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 fa1b 	bl	8000608 <__aeabi_dmul>
 80091d2:	a333      	add	r3, pc, #204	; (adr r3, 80092a0 <__ieee754_pow+0x710>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	4606      	mov	r6, r0
 80091da:	460f      	mov	r7, r1
 80091dc:	4620      	mov	r0, r4
 80091de:	4629      	mov	r1, r5
 80091e0:	f7f7 fa12 	bl	8000608 <__aeabi_dmul>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4630      	mov	r0, r6
 80091ea:	4639      	mov	r1, r7
 80091ec:	f7f7 f856 	bl	800029c <__adddf3>
 80091f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091f2:	4b35      	ldr	r3, [pc, #212]	; (80092c8 <__ieee754_pow+0x738>)
 80091f4:	4413      	add	r3, r2
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f7f7 f84f 	bl	800029c <__adddf3>
 80091fe:	4604      	mov	r4, r0
 8009200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009202:	460d      	mov	r5, r1
 8009204:	f7f7 f996 	bl	8000534 <__aeabi_i2d>
 8009208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800920a:	4b30      	ldr	r3, [pc, #192]	; (80092cc <__ieee754_pow+0x73c>)
 800920c:	4413      	add	r3, r2
 800920e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009212:	4606      	mov	r6, r0
 8009214:	460f      	mov	r7, r1
 8009216:	4622      	mov	r2, r4
 8009218:	462b      	mov	r3, r5
 800921a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800921e:	f7f7 f83d 	bl	800029c <__adddf3>
 8009222:	4642      	mov	r2, r8
 8009224:	464b      	mov	r3, r9
 8009226:	f7f7 f839 	bl	800029c <__adddf3>
 800922a:	4632      	mov	r2, r6
 800922c:	463b      	mov	r3, r7
 800922e:	f7f7 f835 	bl	800029c <__adddf3>
 8009232:	9802      	ldr	r0, [sp, #8]
 8009234:	4632      	mov	r2, r6
 8009236:	463b      	mov	r3, r7
 8009238:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800923c:	f7f7 f82c 	bl	8000298 <__aeabi_dsub>
 8009240:	4642      	mov	r2, r8
 8009242:	464b      	mov	r3, r9
 8009244:	f7f7 f828 	bl	8000298 <__aeabi_dsub>
 8009248:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800924c:	e607      	b.n	8008e5e <__ieee754_pow+0x2ce>
 800924e:	f04f 0a01 	mov.w	sl, #1
 8009252:	e6a5      	b.n	8008fa0 <__ieee754_pow+0x410>
 8009254:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80092a8 <__ieee754_pow+0x718>
 8009258:	e613      	b.n	8008e82 <__ieee754_pow+0x2f2>
 800925a:	bf00      	nop
 800925c:	f3af 8000 	nop.w
 8009260:	4a454eef 	.word	0x4a454eef
 8009264:	3fca7e28 	.word	0x3fca7e28
 8009268:	93c9db65 	.word	0x93c9db65
 800926c:	3fcd864a 	.word	0x3fcd864a
 8009270:	a91d4101 	.word	0xa91d4101
 8009274:	3fd17460 	.word	0x3fd17460
 8009278:	518f264d 	.word	0x518f264d
 800927c:	3fd55555 	.word	0x3fd55555
 8009280:	db6fabff 	.word	0xdb6fabff
 8009284:	3fdb6db6 	.word	0x3fdb6db6
 8009288:	33333303 	.word	0x33333303
 800928c:	3fe33333 	.word	0x3fe33333
 8009290:	e0000000 	.word	0xe0000000
 8009294:	3feec709 	.word	0x3feec709
 8009298:	dc3a03fd 	.word	0xdc3a03fd
 800929c:	3feec709 	.word	0x3feec709
 80092a0:	145b01f5 	.word	0x145b01f5
 80092a4:	be3e2fe0 	.word	0xbe3e2fe0
 80092a8:	00000000 	.word	0x00000000
 80092ac:	3ff00000 	.word	0x3ff00000
 80092b0:	43400000 	.word	0x43400000
 80092b4:	0003988e 	.word	0x0003988e
 80092b8:	000bb679 	.word	0x000bb679
 80092bc:	0800e688 	.word	0x0800e688
 80092c0:	3ff00000 	.word	0x3ff00000
 80092c4:	40080000 	.word	0x40080000
 80092c8:	0800e6a8 	.word	0x0800e6a8
 80092cc:	0800e698 	.word	0x0800e698
 80092d0:	a3b4      	add	r3, pc, #720	; (adr r3, 80095a4 <__ieee754_pow+0xa14>)
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	4640      	mov	r0, r8
 80092d8:	4649      	mov	r1, r9
 80092da:	f7f6 ffdf 	bl	800029c <__adddf3>
 80092de:	4622      	mov	r2, r4
 80092e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092e4:	462b      	mov	r3, r5
 80092e6:	4630      	mov	r0, r6
 80092e8:	4639      	mov	r1, r7
 80092ea:	f7f6 ffd5 	bl	8000298 <__aeabi_dsub>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092f6:	f7f7 fc17 	bl	8000b28 <__aeabi_dcmpgt>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	f47f adfe 	bne.w	8008efc <__ieee754_pow+0x36c>
 8009300:	4aa3      	ldr	r2, [pc, #652]	; (8009590 <__ieee754_pow+0xa00>)
 8009302:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009306:	4293      	cmp	r3, r2
 8009308:	f340 810a 	ble.w	8009520 <__ieee754_pow+0x990>
 800930c:	151b      	asrs	r3, r3, #20
 800930e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009312:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009316:	fa4a f303 	asr.w	r3, sl, r3
 800931a:	445b      	add	r3, fp
 800931c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009320:	4e9c      	ldr	r6, [pc, #624]	; (8009594 <__ieee754_pow+0xa04>)
 8009322:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009326:	4116      	asrs	r6, r2
 8009328:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800932c:	2000      	movs	r0, #0
 800932e:	ea23 0106 	bic.w	r1, r3, r6
 8009332:	f1c2 0214 	rsb	r2, r2, #20
 8009336:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800933a:	fa4a fa02 	asr.w	sl, sl, r2
 800933e:	f1bb 0f00 	cmp.w	fp, #0
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4620      	mov	r0, r4
 8009348:	4629      	mov	r1, r5
 800934a:	bfb8      	it	lt
 800934c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009350:	f7f6 ffa2 	bl	8000298 <__aeabi_dsub>
 8009354:	e9cd 0100 	strd	r0, r1, [sp]
 8009358:	4642      	mov	r2, r8
 800935a:	464b      	mov	r3, r9
 800935c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009360:	f7f6 ff9c 	bl	800029c <__adddf3>
 8009364:	2000      	movs	r0, #0
 8009366:	a378      	add	r3, pc, #480	; (adr r3, 8009548 <__ieee754_pow+0x9b8>)
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	4604      	mov	r4, r0
 800936e:	460d      	mov	r5, r1
 8009370:	f7f7 f94a 	bl	8000608 <__aeabi_dmul>
 8009374:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009378:	4606      	mov	r6, r0
 800937a:	460f      	mov	r7, r1
 800937c:	4620      	mov	r0, r4
 800937e:	4629      	mov	r1, r5
 8009380:	f7f6 ff8a 	bl	8000298 <__aeabi_dsub>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4640      	mov	r0, r8
 800938a:	4649      	mov	r1, r9
 800938c:	f7f6 ff84 	bl	8000298 <__aeabi_dsub>
 8009390:	a36f      	add	r3, pc, #444	; (adr r3, 8009550 <__ieee754_pow+0x9c0>)
 8009392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009396:	f7f7 f937 	bl	8000608 <__aeabi_dmul>
 800939a:	a36f      	add	r3, pc, #444	; (adr r3, 8009558 <__ieee754_pow+0x9c8>)
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	4680      	mov	r8, r0
 80093a2:	4689      	mov	r9, r1
 80093a4:	4620      	mov	r0, r4
 80093a6:	4629      	mov	r1, r5
 80093a8:	f7f7 f92e 	bl	8000608 <__aeabi_dmul>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	f7f6 ff72 	bl	800029c <__adddf3>
 80093b8:	4604      	mov	r4, r0
 80093ba:	460d      	mov	r5, r1
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	4630      	mov	r0, r6
 80093c2:	4639      	mov	r1, r7
 80093c4:	f7f6 ff6a 	bl	800029c <__adddf3>
 80093c8:	4632      	mov	r2, r6
 80093ca:	463b      	mov	r3, r7
 80093cc:	4680      	mov	r8, r0
 80093ce:	4689      	mov	r9, r1
 80093d0:	f7f6 ff62 	bl	8000298 <__aeabi_dsub>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4620      	mov	r0, r4
 80093da:	4629      	mov	r1, r5
 80093dc:	f7f6 ff5c 	bl	8000298 <__aeabi_dsub>
 80093e0:	4642      	mov	r2, r8
 80093e2:	4606      	mov	r6, r0
 80093e4:	460f      	mov	r7, r1
 80093e6:	464b      	mov	r3, r9
 80093e8:	4640      	mov	r0, r8
 80093ea:	4649      	mov	r1, r9
 80093ec:	f7f7 f90c 	bl	8000608 <__aeabi_dmul>
 80093f0:	a35b      	add	r3, pc, #364	; (adr r3, 8009560 <__ieee754_pow+0x9d0>)
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	4604      	mov	r4, r0
 80093f8:	460d      	mov	r5, r1
 80093fa:	f7f7 f905 	bl	8000608 <__aeabi_dmul>
 80093fe:	a35a      	add	r3, pc, #360	; (adr r3, 8009568 <__ieee754_pow+0x9d8>)
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	f7f6 ff48 	bl	8000298 <__aeabi_dsub>
 8009408:	4622      	mov	r2, r4
 800940a:	462b      	mov	r3, r5
 800940c:	f7f7 f8fc 	bl	8000608 <__aeabi_dmul>
 8009410:	a357      	add	r3, pc, #348	; (adr r3, 8009570 <__ieee754_pow+0x9e0>)
 8009412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009416:	f7f6 ff41 	bl	800029c <__adddf3>
 800941a:	4622      	mov	r2, r4
 800941c:	462b      	mov	r3, r5
 800941e:	f7f7 f8f3 	bl	8000608 <__aeabi_dmul>
 8009422:	a355      	add	r3, pc, #340	; (adr r3, 8009578 <__ieee754_pow+0x9e8>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f6 ff36 	bl	8000298 <__aeabi_dsub>
 800942c:	4622      	mov	r2, r4
 800942e:	462b      	mov	r3, r5
 8009430:	f7f7 f8ea 	bl	8000608 <__aeabi_dmul>
 8009434:	a352      	add	r3, pc, #328	; (adr r3, 8009580 <__ieee754_pow+0x9f0>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	f7f6 ff2f 	bl	800029c <__adddf3>
 800943e:	4622      	mov	r2, r4
 8009440:	462b      	mov	r3, r5
 8009442:	f7f7 f8e1 	bl	8000608 <__aeabi_dmul>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4640      	mov	r0, r8
 800944c:	4649      	mov	r1, r9
 800944e:	f7f6 ff23 	bl	8000298 <__aeabi_dsub>
 8009452:	4604      	mov	r4, r0
 8009454:	460d      	mov	r5, r1
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4640      	mov	r0, r8
 800945c:	4649      	mov	r1, r9
 800945e:	f7f7 f8d3 	bl	8000608 <__aeabi_dmul>
 8009462:	2200      	movs	r2, #0
 8009464:	e9cd 0100 	strd	r0, r1, [sp]
 8009468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800946c:	4620      	mov	r0, r4
 800946e:	4629      	mov	r1, r5
 8009470:	f7f6 ff12 	bl	8000298 <__aeabi_dsub>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800947c:	f7f7 f9ee 	bl	800085c <__aeabi_ddiv>
 8009480:	4632      	mov	r2, r6
 8009482:	4604      	mov	r4, r0
 8009484:	460d      	mov	r5, r1
 8009486:	463b      	mov	r3, r7
 8009488:	4640      	mov	r0, r8
 800948a:	4649      	mov	r1, r9
 800948c:	f7f7 f8bc 	bl	8000608 <__aeabi_dmul>
 8009490:	4632      	mov	r2, r6
 8009492:	463b      	mov	r3, r7
 8009494:	f7f6 ff02 	bl	800029c <__adddf3>
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	4620      	mov	r0, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	f7f6 fefa 	bl	8000298 <__aeabi_dsub>
 80094a4:	4642      	mov	r2, r8
 80094a6:	464b      	mov	r3, r9
 80094a8:	f7f6 fef6 	bl	8000298 <__aeabi_dsub>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	2000      	movs	r0, #0
 80094b2:	4939      	ldr	r1, [pc, #228]	; (8009598 <__ieee754_pow+0xa08>)
 80094b4:	f7f6 fef0 	bl	8000298 <__aeabi_dsub>
 80094b8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80094bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	da2f      	bge.n	8009526 <__ieee754_pow+0x996>
 80094c6:	4650      	mov	r0, sl
 80094c8:	ec43 2b10 	vmov	d0, r2, r3
 80094cc:	f000 fb58 	bl	8009b80 <scalbn>
 80094d0:	ec51 0b10 	vmov	r0, r1, d0
 80094d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094d8:	f7ff bbf1 	b.w	8008cbe <__ieee754_pow+0x12e>
 80094dc:	4b2f      	ldr	r3, [pc, #188]	; (800959c <__ieee754_pow+0xa0c>)
 80094de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80094e2:	429e      	cmp	r6, r3
 80094e4:	f77f af0c 	ble.w	8009300 <__ieee754_pow+0x770>
 80094e8:	4b2d      	ldr	r3, [pc, #180]	; (80095a0 <__ieee754_pow+0xa10>)
 80094ea:	440b      	add	r3, r1
 80094ec:	4303      	orrs	r3, r0
 80094ee:	d00b      	beq.n	8009508 <__ieee754_pow+0x978>
 80094f0:	a325      	add	r3, pc, #148	; (adr r3, 8009588 <__ieee754_pow+0x9f8>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094fa:	f7f7 f885 	bl	8000608 <__aeabi_dmul>
 80094fe:	a322      	add	r3, pc, #136	; (adr r3, 8009588 <__ieee754_pow+0x9f8>)
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f7ff bbdb 	b.w	8008cbe <__ieee754_pow+0x12e>
 8009508:	4622      	mov	r2, r4
 800950a:	462b      	mov	r3, r5
 800950c:	f7f6 fec4 	bl	8000298 <__aeabi_dsub>
 8009510:	4642      	mov	r2, r8
 8009512:	464b      	mov	r3, r9
 8009514:	f7f7 fafe 	bl	8000b14 <__aeabi_dcmpge>
 8009518:	2800      	cmp	r0, #0
 800951a:	f43f aef1 	beq.w	8009300 <__ieee754_pow+0x770>
 800951e:	e7e7      	b.n	80094f0 <__ieee754_pow+0x960>
 8009520:	f04f 0a00 	mov.w	sl, #0
 8009524:	e718      	b.n	8009358 <__ieee754_pow+0x7c8>
 8009526:	4621      	mov	r1, r4
 8009528:	e7d4      	b.n	80094d4 <__ieee754_pow+0x944>
 800952a:	2000      	movs	r0, #0
 800952c:	491a      	ldr	r1, [pc, #104]	; (8009598 <__ieee754_pow+0xa08>)
 800952e:	f7ff bb8f 	b.w	8008c50 <__ieee754_pow+0xc0>
 8009532:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009536:	f7ff bb8b 	b.w	8008c50 <__ieee754_pow+0xc0>
 800953a:	4630      	mov	r0, r6
 800953c:	4639      	mov	r1, r7
 800953e:	f7ff bb87 	b.w	8008c50 <__ieee754_pow+0xc0>
 8009542:	4693      	mov	fp, r2
 8009544:	f7ff bb98 	b.w	8008c78 <__ieee754_pow+0xe8>
 8009548:	00000000 	.word	0x00000000
 800954c:	3fe62e43 	.word	0x3fe62e43
 8009550:	fefa39ef 	.word	0xfefa39ef
 8009554:	3fe62e42 	.word	0x3fe62e42
 8009558:	0ca86c39 	.word	0x0ca86c39
 800955c:	be205c61 	.word	0xbe205c61
 8009560:	72bea4d0 	.word	0x72bea4d0
 8009564:	3e663769 	.word	0x3e663769
 8009568:	c5d26bf1 	.word	0xc5d26bf1
 800956c:	3ebbbd41 	.word	0x3ebbbd41
 8009570:	af25de2c 	.word	0xaf25de2c
 8009574:	3f11566a 	.word	0x3f11566a
 8009578:	16bebd93 	.word	0x16bebd93
 800957c:	3f66c16c 	.word	0x3f66c16c
 8009580:	5555553e 	.word	0x5555553e
 8009584:	3fc55555 	.word	0x3fc55555
 8009588:	c2f8f359 	.word	0xc2f8f359
 800958c:	01a56e1f 	.word	0x01a56e1f
 8009590:	3fe00000 	.word	0x3fe00000
 8009594:	000fffff 	.word	0x000fffff
 8009598:	3ff00000 	.word	0x3ff00000
 800959c:	4090cbff 	.word	0x4090cbff
 80095a0:	3f6f3400 	.word	0x3f6f3400
 80095a4:	652b82fe 	.word	0x652b82fe
 80095a8:	3c971547 	.word	0x3c971547

080095ac <__ieee754_sqrt>:
 80095ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b0:	4955      	ldr	r1, [pc, #340]	; (8009708 <__ieee754_sqrt+0x15c>)
 80095b2:	ec55 4b10 	vmov	r4, r5, d0
 80095b6:	43a9      	bics	r1, r5
 80095b8:	462b      	mov	r3, r5
 80095ba:	462a      	mov	r2, r5
 80095bc:	d112      	bne.n	80095e4 <__ieee754_sqrt+0x38>
 80095be:	ee10 2a10 	vmov	r2, s0
 80095c2:	ee10 0a10 	vmov	r0, s0
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f7 f81e 	bl	8000608 <__aeabi_dmul>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	4620      	mov	r0, r4
 80095d2:	4629      	mov	r1, r5
 80095d4:	f7f6 fe62 	bl	800029c <__adddf3>
 80095d8:	4604      	mov	r4, r0
 80095da:	460d      	mov	r5, r1
 80095dc:	ec45 4b10 	vmov	d0, r4, r5
 80095e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e4:	2d00      	cmp	r5, #0
 80095e6:	ee10 0a10 	vmov	r0, s0
 80095ea:	4621      	mov	r1, r4
 80095ec:	dc0f      	bgt.n	800960e <__ieee754_sqrt+0x62>
 80095ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80095f2:	4330      	orrs	r0, r6
 80095f4:	d0f2      	beq.n	80095dc <__ieee754_sqrt+0x30>
 80095f6:	b155      	cbz	r5, 800960e <__ieee754_sqrt+0x62>
 80095f8:	ee10 2a10 	vmov	r2, s0
 80095fc:	4620      	mov	r0, r4
 80095fe:	4629      	mov	r1, r5
 8009600:	f7f6 fe4a 	bl	8000298 <__aeabi_dsub>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	f7f7 f928 	bl	800085c <__aeabi_ddiv>
 800960c:	e7e4      	b.n	80095d8 <__ieee754_sqrt+0x2c>
 800960e:	151b      	asrs	r3, r3, #20
 8009610:	d073      	beq.n	80096fa <__ieee754_sqrt+0x14e>
 8009612:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009616:	07dd      	lsls	r5, r3, #31
 8009618:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800961c:	bf48      	it	mi
 800961e:	0fc8      	lsrmi	r0, r1, #31
 8009620:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009624:	bf44      	itt	mi
 8009626:	0049      	lslmi	r1, r1, #1
 8009628:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800962c:	2500      	movs	r5, #0
 800962e:	1058      	asrs	r0, r3, #1
 8009630:	0fcb      	lsrs	r3, r1, #31
 8009632:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009636:	0049      	lsls	r1, r1, #1
 8009638:	2316      	movs	r3, #22
 800963a:	462c      	mov	r4, r5
 800963c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009640:	19a7      	adds	r7, r4, r6
 8009642:	4297      	cmp	r7, r2
 8009644:	bfde      	ittt	le
 8009646:	19bc      	addle	r4, r7, r6
 8009648:	1bd2      	suble	r2, r2, r7
 800964a:	19ad      	addle	r5, r5, r6
 800964c:	0fcf      	lsrs	r7, r1, #31
 800964e:	3b01      	subs	r3, #1
 8009650:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009654:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009658:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800965c:	d1f0      	bne.n	8009640 <__ieee754_sqrt+0x94>
 800965e:	f04f 0c20 	mov.w	ip, #32
 8009662:	469e      	mov	lr, r3
 8009664:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009668:	42a2      	cmp	r2, r4
 800966a:	eb06 070e 	add.w	r7, r6, lr
 800966e:	dc02      	bgt.n	8009676 <__ieee754_sqrt+0xca>
 8009670:	d112      	bne.n	8009698 <__ieee754_sqrt+0xec>
 8009672:	428f      	cmp	r7, r1
 8009674:	d810      	bhi.n	8009698 <__ieee754_sqrt+0xec>
 8009676:	2f00      	cmp	r7, #0
 8009678:	eb07 0e06 	add.w	lr, r7, r6
 800967c:	da42      	bge.n	8009704 <__ieee754_sqrt+0x158>
 800967e:	f1be 0f00 	cmp.w	lr, #0
 8009682:	db3f      	blt.n	8009704 <__ieee754_sqrt+0x158>
 8009684:	f104 0801 	add.w	r8, r4, #1
 8009688:	1b12      	subs	r2, r2, r4
 800968a:	428f      	cmp	r7, r1
 800968c:	bf88      	it	hi
 800968e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009692:	1bc9      	subs	r1, r1, r7
 8009694:	4433      	add	r3, r6
 8009696:	4644      	mov	r4, r8
 8009698:	0052      	lsls	r2, r2, #1
 800969a:	f1bc 0c01 	subs.w	ip, ip, #1
 800969e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80096a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096aa:	d1dd      	bne.n	8009668 <__ieee754_sqrt+0xbc>
 80096ac:	430a      	orrs	r2, r1
 80096ae:	d006      	beq.n	80096be <__ieee754_sqrt+0x112>
 80096b0:	1c5c      	adds	r4, r3, #1
 80096b2:	bf13      	iteet	ne
 80096b4:	3301      	addne	r3, #1
 80096b6:	3501      	addeq	r5, #1
 80096b8:	4663      	moveq	r3, ip
 80096ba:	f023 0301 	bicne.w	r3, r3, #1
 80096be:	106a      	asrs	r2, r5, #1
 80096c0:	085b      	lsrs	r3, r3, #1
 80096c2:	07e9      	lsls	r1, r5, #31
 80096c4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80096c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80096cc:	bf48      	it	mi
 80096ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80096d2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80096d6:	461c      	mov	r4, r3
 80096d8:	e780      	b.n	80095dc <__ieee754_sqrt+0x30>
 80096da:	0aca      	lsrs	r2, r1, #11
 80096dc:	3815      	subs	r0, #21
 80096de:	0549      	lsls	r1, r1, #21
 80096e0:	2a00      	cmp	r2, #0
 80096e2:	d0fa      	beq.n	80096da <__ieee754_sqrt+0x12e>
 80096e4:	02d6      	lsls	r6, r2, #11
 80096e6:	d50a      	bpl.n	80096fe <__ieee754_sqrt+0x152>
 80096e8:	f1c3 0420 	rsb	r4, r3, #32
 80096ec:	fa21 f404 	lsr.w	r4, r1, r4
 80096f0:	1e5d      	subs	r5, r3, #1
 80096f2:	4099      	lsls	r1, r3
 80096f4:	4322      	orrs	r2, r4
 80096f6:	1b43      	subs	r3, r0, r5
 80096f8:	e78b      	b.n	8009612 <__ieee754_sqrt+0x66>
 80096fa:	4618      	mov	r0, r3
 80096fc:	e7f0      	b.n	80096e0 <__ieee754_sqrt+0x134>
 80096fe:	0052      	lsls	r2, r2, #1
 8009700:	3301      	adds	r3, #1
 8009702:	e7ef      	b.n	80096e4 <__ieee754_sqrt+0x138>
 8009704:	46a0      	mov	r8, r4
 8009706:	e7bf      	b.n	8009688 <__ieee754_sqrt+0xdc>
 8009708:	7ff00000 	.word	0x7ff00000

0800970c <__ieee754_asinf>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	ee10 5a10 	vmov	r5, s0
 8009712:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009716:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800971a:	ed2d 8b04 	vpush	{d8-d9}
 800971e:	d10c      	bne.n	800973a <__ieee754_asinf+0x2e>
 8009720:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800989c <__ieee754_asinf+0x190>
 8009724:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80098a0 <__ieee754_asinf+0x194>
 8009728:	ee60 7a27 	vmul.f32	s15, s0, s15
 800972c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009730:	eeb0 0a67 	vmov.f32	s0, s15
 8009734:	ecbd 8b04 	vpop	{d8-d9}
 8009738:	bd38      	pop	{r3, r4, r5, pc}
 800973a:	dd04      	ble.n	8009746 <__ieee754_asinf+0x3a>
 800973c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009740:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009744:	e7f6      	b.n	8009734 <__ieee754_asinf+0x28>
 8009746:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800974a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800974e:	da0b      	bge.n	8009768 <__ieee754_asinf+0x5c>
 8009750:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8009754:	da52      	bge.n	80097fc <__ieee754_asinf+0xf0>
 8009756:	eddf 7a53 	vldr	s15, [pc, #332]	; 80098a4 <__ieee754_asinf+0x198>
 800975a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800975e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009766:	dce5      	bgt.n	8009734 <__ieee754_asinf+0x28>
 8009768:	f000 fb54 	bl	8009e14 <fabsf>
 800976c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8009770:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8009774:	ee20 8a08 	vmul.f32	s16, s0, s16
 8009778:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80098a8 <__ieee754_asinf+0x19c>
 800977c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80098ac <__ieee754_asinf+0x1a0>
 8009780:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 80098b0 <__ieee754_asinf+0x1a4>
 8009784:	eea8 7a27 	vfma.f32	s14, s16, s15
 8009788:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80098b4 <__ieee754_asinf+0x1a8>
 800978c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009790:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80098b8 <__ieee754_asinf+0x1ac>
 8009794:	eea7 7a88 	vfma.f32	s14, s15, s16
 8009798:	eddf 7a48 	vldr	s15, [pc, #288]	; 80098bc <__ieee754_asinf+0x1b0>
 800979c:	eee7 7a08 	vfma.f32	s15, s14, s16
 80097a0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80098c0 <__ieee754_asinf+0x1b4>
 80097a4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80097a8:	eddf 7a46 	vldr	s15, [pc, #280]	; 80098c4 <__ieee754_asinf+0x1b8>
 80097ac:	eee8 7a07 	vfma.f32	s15, s16, s14
 80097b0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80098c8 <__ieee754_asinf+0x1bc>
 80097b4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80097b8:	eddf 7a44 	vldr	s15, [pc, #272]	; 80098cc <__ieee754_asinf+0x1c0>
 80097bc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80097c0:	eeb0 0a48 	vmov.f32	s0, s16
 80097c4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80097c8:	f000 f936 	bl	8009a38 <__ieee754_sqrtf>
 80097cc:	4b40      	ldr	r3, [pc, #256]	; (80098d0 <__ieee754_asinf+0x1c4>)
 80097ce:	ee29 9a08 	vmul.f32	s18, s18, s16
 80097d2:	429c      	cmp	r4, r3
 80097d4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80097d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80097dc:	dd3d      	ble.n	800985a <__ieee754_asinf+0x14e>
 80097de:	eea0 0a06 	vfma.f32	s0, s0, s12
 80097e2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80098d4 <__ieee754_asinf+0x1c8>
 80097e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80097ea:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80098a0 <__ieee754_asinf+0x194>
 80097ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80097f2:	2d00      	cmp	r5, #0
 80097f4:	bfd8      	it	le
 80097f6:	eeb1 0a40 	vnegle.f32	s0, s0
 80097fa:	e79b      	b.n	8009734 <__ieee754_asinf+0x28>
 80097fc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009800:	eddf 6a29 	vldr	s13, [pc, #164]	; 80098a8 <__ieee754_asinf+0x19c>
 8009804:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80098ac <__ieee754_asinf+0x1a0>
 8009808:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80098c0 <__ieee754_asinf+0x1b4>
 800980c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009810:	eddf 6a28 	vldr	s13, [pc, #160]	; 80098b4 <__ieee754_asinf+0x1a8>
 8009814:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009818:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80098b8 <__ieee754_asinf+0x1ac>
 800981c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009820:	eddf 6a26 	vldr	s13, [pc, #152]	; 80098bc <__ieee754_asinf+0x1b0>
 8009824:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009828:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80098b0 <__ieee754_asinf+0x1a4>
 800982c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009830:	eddf 6a24 	vldr	s13, [pc, #144]	; 80098c4 <__ieee754_asinf+0x1b8>
 8009834:	eee7 6a86 	vfma.f32	s13, s15, s12
 8009838:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80098c8 <__ieee754_asinf+0x1bc>
 800983c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8009840:	eddf 6a22 	vldr	s13, [pc, #136]	; 80098cc <__ieee754_asinf+0x1c0>
 8009844:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800984c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8009850:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8009854:	eea0 0a27 	vfma.f32	s0, s0, s15
 8009858:	e76c      	b.n	8009734 <__ieee754_asinf+0x28>
 800985a:	ee10 3a10 	vmov	r3, s0
 800985e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009862:	f023 030f 	bic.w	r3, r3, #15
 8009866:	ee07 3a90 	vmov	s15, r3
 800986a:	eef1 6a67 	vneg.f32	s13, s15
 800986e:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8009872:	ee70 5a00 	vadd.f32	s11, s0, s0
 8009876:	ee37 0a80 	vadd.f32	s0, s15, s0
 800987a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800989c <__ieee754_asinf+0x190>
 800987e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8009882:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80098d8 <__ieee754_asinf+0x1cc>
 8009886:	eee5 7a47 	vfms.f32	s15, s10, s14
 800988a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800988e:	eeb0 6a40 	vmov.f32	s12, s0
 8009892:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009896:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800989a:	e7a8      	b.n	80097ee <__ieee754_asinf+0xe2>
 800989c:	b33bbd2e 	.word	0xb33bbd2e
 80098a0:	3fc90fdb 	.word	0x3fc90fdb
 80098a4:	7149f2ca 	.word	0x7149f2ca
 80098a8:	3811ef08 	.word	0x3811ef08
 80098ac:	3a4f7f04 	.word	0x3a4f7f04
 80098b0:	3e2aaaab 	.word	0x3e2aaaab
 80098b4:	bd241146 	.word	0xbd241146
 80098b8:	3e4e0aa8 	.word	0x3e4e0aa8
 80098bc:	bea6b090 	.word	0xbea6b090
 80098c0:	3d9dc62e 	.word	0x3d9dc62e
 80098c4:	bf303361 	.word	0xbf303361
 80098c8:	4001572d 	.word	0x4001572d
 80098cc:	c019d139 	.word	0xc019d139
 80098d0:	3f799999 	.word	0x3f799999
 80098d4:	333bbd2e 	.word	0x333bbd2e
 80098d8:	3f490fdb 	.word	0x3f490fdb

080098dc <__ieee754_atan2f>:
 80098dc:	ee10 2a90 	vmov	r2, s1
 80098e0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80098e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80098e8:	b510      	push	{r4, lr}
 80098ea:	eef0 7a40 	vmov.f32	s15, s0
 80098ee:	dc06      	bgt.n	80098fe <__ieee754_atan2f+0x22>
 80098f0:	ee10 0a10 	vmov	r0, s0
 80098f4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80098f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098fc:	dd04      	ble.n	8009908 <__ieee754_atan2f+0x2c>
 80098fe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009902:	eeb0 0a67 	vmov.f32	s0, s15
 8009906:	bd10      	pop	{r4, pc}
 8009908:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800990c:	d103      	bne.n	8009916 <__ieee754_atan2f+0x3a>
 800990e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009912:	f000 b9ab 	b.w	8009c6c <atanf>
 8009916:	1794      	asrs	r4, r2, #30
 8009918:	f004 0402 	and.w	r4, r4, #2
 800991c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009920:	b943      	cbnz	r3, 8009934 <__ieee754_atan2f+0x58>
 8009922:	2c02      	cmp	r4, #2
 8009924:	d06e      	beq.n	8009a04 <__ieee754_atan2f+0x128>
 8009926:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8009a0c <__ieee754_atan2f+0x130>
 800992a:	2c03      	cmp	r4, #3
 800992c:	bf08      	it	eq
 800992e:	eef0 7a47 	vmoveq.f32	s15, s14
 8009932:	e7e6      	b.n	8009902 <__ieee754_atan2f+0x26>
 8009934:	b941      	cbnz	r1, 8009948 <__ieee754_atan2f+0x6c>
 8009936:	eddf 7a36 	vldr	s15, [pc, #216]	; 8009a10 <__ieee754_atan2f+0x134>
 800993a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009a14 <__ieee754_atan2f+0x138>
 800993e:	2800      	cmp	r0, #0
 8009940:	bfb8      	it	lt
 8009942:	eef0 7a47 	vmovlt.f32	s15, s14
 8009946:	e7dc      	b.n	8009902 <__ieee754_atan2f+0x26>
 8009948:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800994c:	d122      	bne.n	8009994 <__ieee754_atan2f+0xb8>
 800994e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009952:	d112      	bne.n	800997a <__ieee754_atan2f+0x9e>
 8009954:	2c02      	cmp	r4, #2
 8009956:	d00a      	beq.n	800996e <__ieee754_atan2f+0x92>
 8009958:	2c03      	cmp	r4, #3
 800995a:	d00b      	beq.n	8009974 <__ieee754_atan2f+0x98>
 800995c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8009a18 <__ieee754_atan2f+0x13c>
 8009960:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009a1c <__ieee754_atan2f+0x140>
 8009964:	2c01      	cmp	r4, #1
 8009966:	bf18      	it	ne
 8009968:	eef0 7a47 	vmovne.f32	s15, s14
 800996c:	e7c9      	b.n	8009902 <__ieee754_atan2f+0x26>
 800996e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8009a20 <__ieee754_atan2f+0x144>
 8009972:	e7c6      	b.n	8009902 <__ieee754_atan2f+0x26>
 8009974:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009a24 <__ieee754_atan2f+0x148>
 8009978:	e7c3      	b.n	8009902 <__ieee754_atan2f+0x26>
 800997a:	2c02      	cmp	r4, #2
 800997c:	d042      	beq.n	8009a04 <__ieee754_atan2f+0x128>
 800997e:	2c03      	cmp	r4, #3
 8009980:	d005      	beq.n	800998e <__ieee754_atan2f+0xb2>
 8009982:	2c01      	cmp	r4, #1
 8009984:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009a28 <__ieee754_atan2f+0x14c>
 8009988:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009a2c <__ieee754_atan2f+0x150>
 800998c:	e7eb      	b.n	8009966 <__ieee754_atan2f+0x8a>
 800998e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009a0c <__ieee754_atan2f+0x130>
 8009992:	e7b6      	b.n	8009902 <__ieee754_atan2f+0x26>
 8009994:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009998:	d0cd      	beq.n	8009936 <__ieee754_atan2f+0x5a>
 800999a:	1a5b      	subs	r3, r3, r1
 800999c:	15db      	asrs	r3, r3, #23
 800999e:	2b3c      	cmp	r3, #60	; 0x3c
 80099a0:	dc1a      	bgt.n	80099d8 <__ieee754_atan2f+0xfc>
 80099a2:	2a00      	cmp	r2, #0
 80099a4:	da01      	bge.n	80099aa <__ieee754_atan2f+0xce>
 80099a6:	333c      	adds	r3, #60	; 0x3c
 80099a8:	db19      	blt.n	80099de <__ieee754_atan2f+0x102>
 80099aa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80099ae:	f000 fa31 	bl	8009e14 <fabsf>
 80099b2:	f000 f95b 	bl	8009c6c <atanf>
 80099b6:	eef0 7a40 	vmov.f32	s15, s0
 80099ba:	2c01      	cmp	r4, #1
 80099bc:	d012      	beq.n	80099e4 <__ieee754_atan2f+0x108>
 80099be:	2c02      	cmp	r4, #2
 80099c0:	d017      	beq.n	80099f2 <__ieee754_atan2f+0x116>
 80099c2:	2c00      	cmp	r4, #0
 80099c4:	d09d      	beq.n	8009902 <__ieee754_atan2f+0x26>
 80099c6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009a30 <__ieee754_atan2f+0x154>
 80099ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099ce:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009a34 <__ieee754_atan2f+0x158>
 80099d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099d6:	e794      	b.n	8009902 <__ieee754_atan2f+0x26>
 80099d8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009a10 <__ieee754_atan2f+0x134>
 80099dc:	e7ed      	b.n	80099ba <__ieee754_atan2f+0xde>
 80099de:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009a2c <__ieee754_atan2f+0x150>
 80099e2:	e7ea      	b.n	80099ba <__ieee754_atan2f+0xde>
 80099e4:	ee17 3a90 	vmov	r3, s15
 80099e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099ec:	ee07 3a90 	vmov	s15, r3
 80099f0:	e787      	b.n	8009902 <__ieee754_atan2f+0x26>
 80099f2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009a30 <__ieee754_atan2f+0x154>
 80099f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099fa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009a34 <__ieee754_atan2f+0x158>
 80099fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a02:	e77e      	b.n	8009902 <__ieee754_atan2f+0x26>
 8009a04:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009a34 <__ieee754_atan2f+0x158>
 8009a08:	e77b      	b.n	8009902 <__ieee754_atan2f+0x26>
 8009a0a:	bf00      	nop
 8009a0c:	c0490fdb 	.word	0xc0490fdb
 8009a10:	3fc90fdb 	.word	0x3fc90fdb
 8009a14:	bfc90fdb 	.word	0xbfc90fdb
 8009a18:	bf490fdb 	.word	0xbf490fdb
 8009a1c:	3f490fdb 	.word	0x3f490fdb
 8009a20:	4016cbe4 	.word	0x4016cbe4
 8009a24:	c016cbe4 	.word	0xc016cbe4
 8009a28:	80000000 	.word	0x80000000
 8009a2c:	00000000 	.word	0x00000000
 8009a30:	33bbbd2e 	.word	0x33bbbd2e
 8009a34:	40490fdb 	.word	0x40490fdb

08009a38 <__ieee754_sqrtf>:
 8009a38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009a3c:	4770      	bx	lr

08009a3e <fabs>:
 8009a3e:	ec51 0b10 	vmov	r0, r1, d0
 8009a42:	ee10 2a10 	vmov	r2, s0
 8009a46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a4a:	ec43 2b10 	vmov	d0, r2, r3
 8009a4e:	4770      	bx	lr

08009a50 <finite>:
 8009a50:	ee10 3a90 	vmov	r3, s1
 8009a54:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009a58:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009a5c:	0fc0      	lsrs	r0, r0, #31
 8009a5e:	4770      	bx	lr

08009a60 <matherr>:
 8009a60:	2000      	movs	r0, #0
 8009a62:	4770      	bx	lr
 8009a64:	0000      	movs	r0, r0
	...

08009a68 <nan>:
 8009a68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a70 <nan+0x8>
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	00000000 	.word	0x00000000
 8009a74:	7ff80000 	.word	0x7ff80000

08009a78 <rint>:
 8009a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7a:	ec51 0b10 	vmov	r0, r1, d0
 8009a7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009a82:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009a86:	2e13      	cmp	r6, #19
 8009a88:	460b      	mov	r3, r1
 8009a8a:	ee10 4a10 	vmov	r4, s0
 8009a8e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009a92:	dc56      	bgt.n	8009b42 <rint+0xca>
 8009a94:	2e00      	cmp	r6, #0
 8009a96:	da2b      	bge.n	8009af0 <rint+0x78>
 8009a98:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009a9c:	4302      	orrs	r2, r0
 8009a9e:	d023      	beq.n	8009ae8 <rint+0x70>
 8009aa0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009aa4:	4302      	orrs	r2, r0
 8009aa6:	4254      	negs	r4, r2
 8009aa8:	4314      	orrs	r4, r2
 8009aaa:	0c4b      	lsrs	r3, r1, #17
 8009aac:	0b24      	lsrs	r4, r4, #12
 8009aae:	045b      	lsls	r3, r3, #17
 8009ab0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009ab4:	ea44 0103 	orr.w	r1, r4, r3
 8009ab8:	460b      	mov	r3, r1
 8009aba:	492f      	ldr	r1, [pc, #188]	; (8009b78 <rint+0x100>)
 8009abc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009ac0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7f6 fbe7 	bl	800029c <__adddf3>
 8009ace:	e9cd 0100 	strd	r0, r1, [sp]
 8009ad2:	463b      	mov	r3, r7
 8009ad4:	4632      	mov	r2, r6
 8009ad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ada:	f7f6 fbdd 	bl	8000298 <__aeabi_dsub>
 8009ade:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ae2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	ec41 0b10 	vmov	d0, r0, r1
 8009aec:	b003      	add	sp, #12
 8009aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009af0:	4a22      	ldr	r2, [pc, #136]	; (8009b7c <rint+0x104>)
 8009af2:	4132      	asrs	r2, r6
 8009af4:	ea01 0702 	and.w	r7, r1, r2
 8009af8:	4307      	orrs	r7, r0
 8009afa:	d0f5      	beq.n	8009ae8 <rint+0x70>
 8009afc:	0852      	lsrs	r2, r2, #1
 8009afe:	4011      	ands	r1, r2
 8009b00:	430c      	orrs	r4, r1
 8009b02:	d00b      	beq.n	8009b1c <rint+0xa4>
 8009b04:	ea23 0202 	bic.w	r2, r3, r2
 8009b08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b0c:	2e13      	cmp	r6, #19
 8009b0e:	fa43 f306 	asr.w	r3, r3, r6
 8009b12:	bf0c      	ite	eq
 8009b14:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009b18:	2400      	movne	r4, #0
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	4916      	ldr	r1, [pc, #88]	; (8009b78 <rint+0x100>)
 8009b1e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009b22:	4622      	mov	r2, r4
 8009b24:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b28:	4620      	mov	r0, r4
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	f7f6 fbb6 	bl	800029c <__adddf3>
 8009b30:	e9cd 0100 	strd	r0, r1, [sp]
 8009b34:	4622      	mov	r2, r4
 8009b36:	462b      	mov	r3, r5
 8009b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b3c:	f7f6 fbac 	bl	8000298 <__aeabi_dsub>
 8009b40:	e7d2      	b.n	8009ae8 <rint+0x70>
 8009b42:	2e33      	cmp	r6, #51	; 0x33
 8009b44:	dd07      	ble.n	8009b56 <rint+0xde>
 8009b46:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009b4a:	d1cd      	bne.n	8009ae8 <rint+0x70>
 8009b4c:	ee10 2a10 	vmov	r2, s0
 8009b50:	f7f6 fba4 	bl	800029c <__adddf3>
 8009b54:	e7c8      	b.n	8009ae8 <rint+0x70>
 8009b56:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5e:	40f2      	lsrs	r2, r6
 8009b60:	4210      	tst	r0, r2
 8009b62:	d0c1      	beq.n	8009ae8 <rint+0x70>
 8009b64:	0852      	lsrs	r2, r2, #1
 8009b66:	4210      	tst	r0, r2
 8009b68:	bf1f      	itttt	ne
 8009b6a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009b6e:	ea20 0202 	bicne.w	r2, r0, r2
 8009b72:	4134      	asrne	r4, r6
 8009b74:	4314      	orrne	r4, r2
 8009b76:	e7d1      	b.n	8009b1c <rint+0xa4>
 8009b78:	0800e6b8 	.word	0x0800e6b8
 8009b7c:	000fffff 	.word	0x000fffff

08009b80 <scalbn>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	ec55 4b10 	vmov	r4, r5, d0
 8009b86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	462b      	mov	r3, r5
 8009b8e:	b9aa      	cbnz	r2, 8009bbc <scalbn+0x3c>
 8009b90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009b94:	4323      	orrs	r3, r4
 8009b96:	d03b      	beq.n	8009c10 <scalbn+0x90>
 8009b98:	4b31      	ldr	r3, [pc, #196]	; (8009c60 <scalbn+0xe0>)
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	ee10 0a10 	vmov	r0, s0
 8009ba2:	f7f6 fd31 	bl	8000608 <__aeabi_dmul>
 8009ba6:	4b2f      	ldr	r3, [pc, #188]	; (8009c64 <scalbn+0xe4>)
 8009ba8:	429e      	cmp	r6, r3
 8009baa:	4604      	mov	r4, r0
 8009bac:	460d      	mov	r5, r1
 8009bae:	da12      	bge.n	8009bd6 <scalbn+0x56>
 8009bb0:	a327      	add	r3, pc, #156	; (adr r3, 8009c50 <scalbn+0xd0>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 fd27 	bl	8000608 <__aeabi_dmul>
 8009bba:	e009      	b.n	8009bd0 <scalbn+0x50>
 8009bbc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009bc0:	428a      	cmp	r2, r1
 8009bc2:	d10c      	bne.n	8009bde <scalbn+0x5e>
 8009bc4:	ee10 2a10 	vmov	r2, s0
 8009bc8:	4620      	mov	r0, r4
 8009bca:	4629      	mov	r1, r5
 8009bcc:	f7f6 fb66 	bl	800029c <__adddf3>
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	460d      	mov	r5, r1
 8009bd4:	e01c      	b.n	8009c10 <scalbn+0x90>
 8009bd6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009bda:	460b      	mov	r3, r1
 8009bdc:	3a36      	subs	r2, #54	; 0x36
 8009bde:	4432      	add	r2, r6
 8009be0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009be4:	428a      	cmp	r2, r1
 8009be6:	dd0b      	ble.n	8009c00 <scalbn+0x80>
 8009be8:	ec45 4b11 	vmov	d1, r4, r5
 8009bec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009c58 <scalbn+0xd8>
 8009bf0:	f000 f917 	bl	8009e22 <copysign>
 8009bf4:	a318      	add	r3, pc, #96	; (adr r3, 8009c58 <scalbn+0xd8>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	ec51 0b10 	vmov	r0, r1, d0
 8009bfe:	e7da      	b.n	8009bb6 <scalbn+0x36>
 8009c00:	2a00      	cmp	r2, #0
 8009c02:	dd08      	ble.n	8009c16 <scalbn+0x96>
 8009c04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c10:	ec45 4b10 	vmov	d0, r4, r5
 8009c14:	bd70      	pop	{r4, r5, r6, pc}
 8009c16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009c1a:	da0d      	bge.n	8009c38 <scalbn+0xb8>
 8009c1c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009c20:	429e      	cmp	r6, r3
 8009c22:	ec45 4b11 	vmov	d1, r4, r5
 8009c26:	dce1      	bgt.n	8009bec <scalbn+0x6c>
 8009c28:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009c50 <scalbn+0xd0>
 8009c2c:	f000 f8f9 	bl	8009e22 <copysign>
 8009c30:	a307      	add	r3, pc, #28	; (adr r3, 8009c50 <scalbn+0xd0>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	e7e0      	b.n	8009bfa <scalbn+0x7a>
 8009c38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c3c:	3236      	adds	r2, #54	; 0x36
 8009c3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c46:	4620      	mov	r0, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <scalbn+0xe8>)
 8009c4e:	e7b2      	b.n	8009bb6 <scalbn+0x36>
 8009c50:	c2f8f359 	.word	0xc2f8f359
 8009c54:	01a56e1f 	.word	0x01a56e1f
 8009c58:	8800759c 	.word	0x8800759c
 8009c5c:	7e37e43c 	.word	0x7e37e43c
 8009c60:	43500000 	.word	0x43500000
 8009c64:	ffff3cb0 	.word	0xffff3cb0
 8009c68:	3c900000 	.word	0x3c900000

08009c6c <atanf>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	ee10 5a10 	vmov	r5, s0
 8009c72:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009c76:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009c7a:	eef0 7a40 	vmov.f32	s15, s0
 8009c7e:	db10      	blt.n	8009ca2 <atanf+0x36>
 8009c80:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009c84:	dd04      	ble.n	8009c90 <atanf+0x24>
 8009c86:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
 8009c90:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009dc8 <atanf+0x15c>
 8009c94:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009dcc <atanf+0x160>
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	bfd8      	it	le
 8009c9c:	eef0 7a47 	vmovle.f32	s15, s14
 8009ca0:	e7f3      	b.n	8009c8a <atanf+0x1e>
 8009ca2:	4b4b      	ldr	r3, [pc, #300]	; (8009dd0 <atanf+0x164>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	dc10      	bgt.n	8009cca <atanf+0x5e>
 8009ca8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009cac:	da0a      	bge.n	8009cc4 <atanf+0x58>
 8009cae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009dd4 <atanf+0x168>
 8009cb2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc2:	dce2      	bgt.n	8009c8a <atanf+0x1e>
 8009cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc8:	e013      	b.n	8009cf2 <atanf+0x86>
 8009cca:	f000 f8a3 	bl	8009e14 <fabsf>
 8009cce:	4b42      	ldr	r3, [pc, #264]	; (8009dd8 <atanf+0x16c>)
 8009cd0:	429c      	cmp	r4, r3
 8009cd2:	dc4f      	bgt.n	8009d74 <atanf+0x108>
 8009cd4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009cd8:	429c      	cmp	r4, r3
 8009cda:	dc41      	bgt.n	8009d60 <atanf+0xf4>
 8009cdc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009ce0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009ce4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009ce8:	2300      	movs	r3, #0
 8009cea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009cee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009cf8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009ddc <atanf+0x170>
 8009cfc:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009de0 <atanf+0x174>
 8009d00:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009de4 <atanf+0x178>
 8009d04:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009d08:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009d0c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009de8 <atanf+0x17c>
 8009d10:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009d14:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009dec <atanf+0x180>
 8009d18:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d1c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009df0 <atanf+0x184>
 8009d20:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009d24:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009df4 <atanf+0x188>
 8009d28:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d2c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009df8 <atanf+0x18c>
 8009d30:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009d34:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009dfc <atanf+0x190>
 8009d38:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009d3c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009e00 <atanf+0x194>
 8009d40:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009d44:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009e04 <atanf+0x198>
 8009d48:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009d4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009d50:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d58:	d121      	bne.n	8009d9e <atanf+0x132>
 8009d5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d5e:	e794      	b.n	8009c8a <atanf+0x1e>
 8009d60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009d64:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009d68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009d72:	e7be      	b.n	8009cf2 <atanf+0x86>
 8009d74:	4b24      	ldr	r3, [pc, #144]	; (8009e08 <atanf+0x19c>)
 8009d76:	429c      	cmp	r4, r3
 8009d78:	dc0b      	bgt.n	8009d92 <atanf+0x126>
 8009d7a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d82:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009d86:	2302      	movs	r3, #2
 8009d88:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d90:	e7af      	b.n	8009cf2 <atanf+0x86>
 8009d92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009d96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e7a9      	b.n	8009cf2 <atanf+0x86>
 8009d9e:	4a1b      	ldr	r2, [pc, #108]	; (8009e0c <atanf+0x1a0>)
 8009da0:	491b      	ldr	r1, [pc, #108]	; (8009e10 <atanf+0x1a4>)
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	441a      	add	r2, r3
 8009da6:	440b      	add	r3, r1
 8009da8:	edd3 6a00 	vldr	s13, [r3]
 8009dac:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009db0:	2d00      	cmp	r5, #0
 8009db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009db6:	ed92 7a00 	vldr	s14, [r2]
 8009dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dbe:	bfb8      	it	lt
 8009dc0:	eef1 7a67 	vneglt.f32	s15, s15
 8009dc4:	e761      	b.n	8009c8a <atanf+0x1e>
 8009dc6:	bf00      	nop
 8009dc8:	bfc90fdb 	.word	0xbfc90fdb
 8009dcc:	3fc90fdb 	.word	0x3fc90fdb
 8009dd0:	3edfffff 	.word	0x3edfffff
 8009dd4:	7149f2ca 	.word	0x7149f2ca
 8009dd8:	3f97ffff 	.word	0x3f97ffff
 8009ddc:	3c8569d7 	.word	0x3c8569d7
 8009de0:	3d4bda59 	.word	0x3d4bda59
 8009de4:	bd6ef16b 	.word	0xbd6ef16b
 8009de8:	3d886b35 	.word	0x3d886b35
 8009dec:	3dba2e6e 	.word	0x3dba2e6e
 8009df0:	3e124925 	.word	0x3e124925
 8009df4:	3eaaaaab 	.word	0x3eaaaaab
 8009df8:	bd15a221 	.word	0xbd15a221
 8009dfc:	bd9d8795 	.word	0xbd9d8795
 8009e00:	bde38e38 	.word	0xbde38e38
 8009e04:	be4ccccd 	.word	0xbe4ccccd
 8009e08:	401bffff 	.word	0x401bffff
 8009e0c:	0800e6c8 	.word	0x0800e6c8
 8009e10:	0800e6d8 	.word	0x0800e6d8

08009e14 <fabsf>:
 8009e14:	ee10 3a10 	vmov	r3, s0
 8009e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e1c:	ee00 3a10 	vmov	s0, r3
 8009e20:	4770      	bx	lr

08009e22 <copysign>:
 8009e22:	ec51 0b10 	vmov	r0, r1, d0
 8009e26:	ee11 0a90 	vmov	r0, s3
 8009e2a:	ee10 2a10 	vmov	r2, s0
 8009e2e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009e32:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009e36:	ea41 0300 	orr.w	r3, r1, r0
 8009e3a:	ec43 2b10 	vmov	d0, r2, r3
 8009e3e:	4770      	bx	lr

08009e40 <__errno>:
 8009e40:	4b01      	ldr	r3, [pc, #4]	; (8009e48 <__errno+0x8>)
 8009e42:	6818      	ldr	r0, [r3, #0]
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20000078 	.word	0x20000078

08009e4c <__libc_init_array>:
 8009e4c:	b570      	push	{r4, r5, r6, lr}
 8009e4e:	4e0d      	ldr	r6, [pc, #52]	; (8009e84 <__libc_init_array+0x38>)
 8009e50:	4c0d      	ldr	r4, [pc, #52]	; (8009e88 <__libc_init_array+0x3c>)
 8009e52:	1ba4      	subs	r4, r4, r6
 8009e54:	10a4      	asrs	r4, r4, #2
 8009e56:	2500      	movs	r5, #0
 8009e58:	42a5      	cmp	r5, r4
 8009e5a:	d109      	bne.n	8009e70 <__libc_init_array+0x24>
 8009e5c:	4e0b      	ldr	r6, [pc, #44]	; (8009e8c <__libc_init_array+0x40>)
 8009e5e:	4c0c      	ldr	r4, [pc, #48]	; (8009e90 <__libc_init_array+0x44>)
 8009e60:	f004 fa5e 	bl	800e320 <_init>
 8009e64:	1ba4      	subs	r4, r4, r6
 8009e66:	10a4      	asrs	r4, r4, #2
 8009e68:	2500      	movs	r5, #0
 8009e6a:	42a5      	cmp	r5, r4
 8009e6c:	d105      	bne.n	8009e7a <__libc_init_array+0x2e>
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}
 8009e70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e74:	4798      	blx	r3
 8009e76:	3501      	adds	r5, #1
 8009e78:	e7ee      	b.n	8009e58 <__libc_init_array+0xc>
 8009e7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e7e:	4798      	blx	r3
 8009e80:	3501      	adds	r5, #1
 8009e82:	e7f2      	b.n	8009e6a <__libc_init_array+0x1e>
 8009e84:	0800ea08 	.word	0x0800ea08
 8009e88:	0800ea08 	.word	0x0800ea08
 8009e8c:	0800ea08 	.word	0x0800ea08
 8009e90:	0800ea0c 	.word	0x0800ea0c

08009e94 <__locale_ctype_ptr_l>:
 8009e94:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009e98:	4770      	bx	lr

08009e9a <__ascii_mbtowc>:
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	b901      	cbnz	r1, 8009ea0 <__ascii_mbtowc+0x6>
 8009e9e:	a901      	add	r1, sp, #4
 8009ea0:	b142      	cbz	r2, 8009eb4 <__ascii_mbtowc+0x1a>
 8009ea2:	b14b      	cbz	r3, 8009eb8 <__ascii_mbtowc+0x1e>
 8009ea4:	7813      	ldrb	r3, [r2, #0]
 8009ea6:	600b      	str	r3, [r1, #0]
 8009ea8:	7812      	ldrb	r2, [r2, #0]
 8009eaa:	1c10      	adds	r0, r2, #0
 8009eac:	bf18      	it	ne
 8009eae:	2001      	movne	r0, #1
 8009eb0:	b002      	add	sp, #8
 8009eb2:	4770      	bx	lr
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	e7fb      	b.n	8009eb0 <__ascii_mbtowc+0x16>
 8009eb8:	f06f 0001 	mvn.w	r0, #1
 8009ebc:	e7f8      	b.n	8009eb0 <__ascii_mbtowc+0x16>

08009ebe <memcpy>:
 8009ebe:	b510      	push	{r4, lr}
 8009ec0:	1e43      	subs	r3, r0, #1
 8009ec2:	440a      	add	r2, r1
 8009ec4:	4291      	cmp	r1, r2
 8009ec6:	d100      	bne.n	8009eca <memcpy+0xc>
 8009ec8:	bd10      	pop	{r4, pc}
 8009eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ed2:	e7f7      	b.n	8009ec4 <memcpy+0x6>

08009ed4 <memset>:
 8009ed4:	4402      	add	r2, r0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d100      	bne.n	8009ede <memset+0xa>
 8009edc:	4770      	bx	lr
 8009ede:	f803 1b01 	strb.w	r1, [r3], #1
 8009ee2:	e7f9      	b.n	8009ed8 <memset+0x4>

08009ee4 <__cvt>:
 8009ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	ec55 4b10 	vmov	r4, r5, d0
 8009eec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009eee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ef2:	2d00      	cmp	r5, #0
 8009ef4:	460e      	mov	r6, r1
 8009ef6:	4691      	mov	r9, r2
 8009ef8:	4619      	mov	r1, r3
 8009efa:	bfb8      	it	lt
 8009efc:	4622      	movlt	r2, r4
 8009efe:	462b      	mov	r3, r5
 8009f00:	f027 0720 	bic.w	r7, r7, #32
 8009f04:	bfbb      	ittet	lt
 8009f06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f0a:	461d      	movlt	r5, r3
 8009f0c:	2300      	movge	r3, #0
 8009f0e:	232d      	movlt	r3, #45	; 0x2d
 8009f10:	bfb8      	it	lt
 8009f12:	4614      	movlt	r4, r2
 8009f14:	2f46      	cmp	r7, #70	; 0x46
 8009f16:	700b      	strb	r3, [r1, #0]
 8009f18:	d004      	beq.n	8009f24 <__cvt+0x40>
 8009f1a:	2f45      	cmp	r7, #69	; 0x45
 8009f1c:	d100      	bne.n	8009f20 <__cvt+0x3c>
 8009f1e:	3601      	adds	r6, #1
 8009f20:	2102      	movs	r1, #2
 8009f22:	e000      	b.n	8009f26 <__cvt+0x42>
 8009f24:	2103      	movs	r1, #3
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	ab02      	add	r3, sp, #8
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	4632      	mov	r2, r6
 8009f30:	4653      	mov	r3, sl
 8009f32:	ec45 4b10 	vmov	d0, r4, r5
 8009f36:	f001 febf 	bl	800bcb8 <_dtoa_r>
 8009f3a:	2f47      	cmp	r7, #71	; 0x47
 8009f3c:	4680      	mov	r8, r0
 8009f3e:	d102      	bne.n	8009f46 <__cvt+0x62>
 8009f40:	f019 0f01 	tst.w	r9, #1
 8009f44:	d026      	beq.n	8009f94 <__cvt+0xb0>
 8009f46:	2f46      	cmp	r7, #70	; 0x46
 8009f48:	eb08 0906 	add.w	r9, r8, r6
 8009f4c:	d111      	bne.n	8009f72 <__cvt+0x8e>
 8009f4e:	f898 3000 	ldrb.w	r3, [r8]
 8009f52:	2b30      	cmp	r3, #48	; 0x30
 8009f54:	d10a      	bne.n	8009f6c <__cvt+0x88>
 8009f56:	2200      	movs	r2, #0
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	f7f6 fdbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f62:	b918      	cbnz	r0, 8009f6c <__cvt+0x88>
 8009f64:	f1c6 0601 	rsb	r6, r6, #1
 8009f68:	f8ca 6000 	str.w	r6, [sl]
 8009f6c:	f8da 3000 	ldr.w	r3, [sl]
 8009f70:	4499      	add	r9, r3
 8009f72:	2200      	movs	r2, #0
 8009f74:	2300      	movs	r3, #0
 8009f76:	4620      	mov	r0, r4
 8009f78:	4629      	mov	r1, r5
 8009f7a:	f7f6 fdad 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f7e:	b938      	cbnz	r0, 8009f90 <__cvt+0xac>
 8009f80:	2230      	movs	r2, #48	; 0x30
 8009f82:	9b03      	ldr	r3, [sp, #12]
 8009f84:	454b      	cmp	r3, r9
 8009f86:	d205      	bcs.n	8009f94 <__cvt+0xb0>
 8009f88:	1c59      	adds	r1, r3, #1
 8009f8a:	9103      	str	r1, [sp, #12]
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	e7f8      	b.n	8009f82 <__cvt+0x9e>
 8009f90:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f94:	9b03      	ldr	r3, [sp, #12]
 8009f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f98:	eba3 0308 	sub.w	r3, r3, r8
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	b004      	add	sp, #16
 8009fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009fa6 <__exponent>:
 8009fa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	4604      	mov	r4, r0
 8009fac:	bfba      	itte	lt
 8009fae:	4249      	neglt	r1, r1
 8009fb0:	232d      	movlt	r3, #45	; 0x2d
 8009fb2:	232b      	movge	r3, #43	; 0x2b
 8009fb4:	2909      	cmp	r1, #9
 8009fb6:	f804 2b02 	strb.w	r2, [r4], #2
 8009fba:	7043      	strb	r3, [r0, #1]
 8009fbc:	dd20      	ble.n	800a000 <__exponent+0x5a>
 8009fbe:	f10d 0307 	add.w	r3, sp, #7
 8009fc2:	461f      	mov	r7, r3
 8009fc4:	260a      	movs	r6, #10
 8009fc6:	fb91 f5f6 	sdiv	r5, r1, r6
 8009fca:	fb06 1115 	mls	r1, r6, r5, r1
 8009fce:	3130      	adds	r1, #48	; 0x30
 8009fd0:	2d09      	cmp	r5, #9
 8009fd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fd6:	f103 32ff 	add.w	r2, r3, #4294967295
 8009fda:	4629      	mov	r1, r5
 8009fdc:	dc09      	bgt.n	8009ff2 <__exponent+0x4c>
 8009fde:	3130      	adds	r1, #48	; 0x30
 8009fe0:	3b02      	subs	r3, #2
 8009fe2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009fe6:	42bb      	cmp	r3, r7
 8009fe8:	4622      	mov	r2, r4
 8009fea:	d304      	bcc.n	8009ff6 <__exponent+0x50>
 8009fec:	1a10      	subs	r0, r2, r0
 8009fee:	b003      	add	sp, #12
 8009ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	e7e7      	b.n	8009fc6 <__exponent+0x20>
 8009ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ffa:	f804 2b01 	strb.w	r2, [r4], #1
 8009ffe:	e7f2      	b.n	8009fe6 <__exponent+0x40>
 800a000:	2330      	movs	r3, #48	; 0x30
 800a002:	4419      	add	r1, r3
 800a004:	7083      	strb	r3, [r0, #2]
 800a006:	1d02      	adds	r2, r0, #4
 800a008:	70c1      	strb	r1, [r0, #3]
 800a00a:	e7ef      	b.n	8009fec <__exponent+0x46>

0800a00c <_printf_float>:
 800a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a010:	b08d      	sub	sp, #52	; 0x34
 800a012:	460c      	mov	r4, r1
 800a014:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a018:	4616      	mov	r6, r2
 800a01a:	461f      	mov	r7, r3
 800a01c:	4605      	mov	r5, r0
 800a01e:	f003 f8a5 	bl	800d16c <_localeconv_r>
 800a022:	6803      	ldr	r3, [r0, #0]
 800a024:	9304      	str	r3, [sp, #16]
 800a026:	4618      	mov	r0, r3
 800a028:	f7f6 f8da 	bl	80001e0 <strlen>
 800a02c:	2300      	movs	r3, #0
 800a02e:	930a      	str	r3, [sp, #40]	; 0x28
 800a030:	f8d8 3000 	ldr.w	r3, [r8]
 800a034:	9005      	str	r0, [sp, #20]
 800a036:	3307      	adds	r3, #7
 800a038:	f023 0307 	bic.w	r3, r3, #7
 800a03c:	f103 0208 	add.w	r2, r3, #8
 800a040:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a044:	f8d4 b000 	ldr.w	fp, [r4]
 800a048:	f8c8 2000 	str.w	r2, [r8]
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a054:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a058:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a05c:	9307      	str	r3, [sp, #28]
 800a05e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a062:	f04f 32ff 	mov.w	r2, #4294967295
 800a066:	4ba7      	ldr	r3, [pc, #668]	; (800a304 <_printf_float+0x2f8>)
 800a068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a06c:	f7f6 fd66 	bl	8000b3c <__aeabi_dcmpun>
 800a070:	bb70      	cbnz	r0, 800a0d0 <_printf_float+0xc4>
 800a072:	f04f 32ff 	mov.w	r2, #4294967295
 800a076:	4ba3      	ldr	r3, [pc, #652]	; (800a304 <_printf_float+0x2f8>)
 800a078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a07c:	f7f6 fd40 	bl	8000b00 <__aeabi_dcmple>
 800a080:	bb30      	cbnz	r0, 800a0d0 <_printf_float+0xc4>
 800a082:	2200      	movs	r2, #0
 800a084:	2300      	movs	r3, #0
 800a086:	4640      	mov	r0, r8
 800a088:	4649      	mov	r1, r9
 800a08a:	f7f6 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800a08e:	b110      	cbz	r0, 800a096 <_printf_float+0x8a>
 800a090:	232d      	movs	r3, #45	; 0x2d
 800a092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a096:	4a9c      	ldr	r2, [pc, #624]	; (800a308 <_printf_float+0x2fc>)
 800a098:	4b9c      	ldr	r3, [pc, #624]	; (800a30c <_printf_float+0x300>)
 800a09a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a09e:	bf8c      	ite	hi
 800a0a0:	4690      	movhi	r8, r2
 800a0a2:	4698      	movls	r8, r3
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	f02b 0204 	bic.w	r2, fp, #4
 800a0aa:	6123      	str	r3, [r4, #16]
 800a0ac:	6022      	str	r2, [r4, #0]
 800a0ae:	f04f 0900 	mov.w	r9, #0
 800a0b2:	9700      	str	r7, [sp, #0]
 800a0b4:	4633      	mov	r3, r6
 800a0b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f000 f9e6 	bl	800a48c <_printf_common>
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	f040 808d 	bne.w	800a1e0 <_printf_float+0x1d4>
 800a0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ca:	b00d      	add	sp, #52	; 0x34
 800a0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d0:	4642      	mov	r2, r8
 800a0d2:	464b      	mov	r3, r9
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	f7f6 fd30 	bl	8000b3c <__aeabi_dcmpun>
 800a0dc:	b110      	cbz	r0, 800a0e4 <_printf_float+0xd8>
 800a0de:	4a8c      	ldr	r2, [pc, #560]	; (800a310 <_printf_float+0x304>)
 800a0e0:	4b8c      	ldr	r3, [pc, #560]	; (800a314 <_printf_float+0x308>)
 800a0e2:	e7da      	b.n	800a09a <_printf_float+0x8e>
 800a0e4:	6861      	ldr	r1, [r4, #4]
 800a0e6:	1c4b      	adds	r3, r1, #1
 800a0e8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a0ec:	a80a      	add	r0, sp, #40	; 0x28
 800a0ee:	d13e      	bne.n	800a16e <_printf_float+0x162>
 800a0f0:	2306      	movs	r3, #6
 800a0f2:	6063      	str	r3, [r4, #4]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a0fa:	ab09      	add	r3, sp, #36	; 0x24
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	ec49 8b10 	vmov	d0, r8, r9
 800a102:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a106:	6022      	str	r2, [r4, #0]
 800a108:	f8cd a004 	str.w	sl, [sp, #4]
 800a10c:	6861      	ldr	r1, [r4, #4]
 800a10e:	4628      	mov	r0, r5
 800a110:	f7ff fee8 	bl	8009ee4 <__cvt>
 800a114:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a118:	2b47      	cmp	r3, #71	; 0x47
 800a11a:	4680      	mov	r8, r0
 800a11c:	d109      	bne.n	800a132 <_printf_float+0x126>
 800a11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a120:	1cd8      	adds	r0, r3, #3
 800a122:	db02      	blt.n	800a12a <_printf_float+0x11e>
 800a124:	6862      	ldr	r2, [r4, #4]
 800a126:	4293      	cmp	r3, r2
 800a128:	dd47      	ble.n	800a1ba <_printf_float+0x1ae>
 800a12a:	f1aa 0a02 	sub.w	sl, sl, #2
 800a12e:	fa5f fa8a 	uxtb.w	sl, sl
 800a132:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a136:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a138:	d824      	bhi.n	800a184 <_printf_float+0x178>
 800a13a:	3901      	subs	r1, #1
 800a13c:	4652      	mov	r2, sl
 800a13e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a142:	9109      	str	r1, [sp, #36]	; 0x24
 800a144:	f7ff ff2f 	bl	8009fa6 <__exponent>
 800a148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a14a:	1813      	adds	r3, r2, r0
 800a14c:	2a01      	cmp	r2, #1
 800a14e:	4681      	mov	r9, r0
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	dc02      	bgt.n	800a15a <_printf_float+0x14e>
 800a154:	6822      	ldr	r2, [r4, #0]
 800a156:	07d1      	lsls	r1, r2, #31
 800a158:	d501      	bpl.n	800a15e <_printf_float+0x152>
 800a15a:	3301      	adds	r3, #1
 800a15c:	6123      	str	r3, [r4, #16]
 800a15e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a162:	2b00      	cmp	r3, #0
 800a164:	d0a5      	beq.n	800a0b2 <_printf_float+0xa6>
 800a166:	232d      	movs	r3, #45	; 0x2d
 800a168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a16c:	e7a1      	b.n	800a0b2 <_printf_float+0xa6>
 800a16e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a172:	f000 8177 	beq.w	800a464 <_printf_float+0x458>
 800a176:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a17a:	d1bb      	bne.n	800a0f4 <_printf_float+0xe8>
 800a17c:	2900      	cmp	r1, #0
 800a17e:	d1b9      	bne.n	800a0f4 <_printf_float+0xe8>
 800a180:	2301      	movs	r3, #1
 800a182:	e7b6      	b.n	800a0f2 <_printf_float+0xe6>
 800a184:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a188:	d119      	bne.n	800a1be <_printf_float+0x1b2>
 800a18a:	2900      	cmp	r1, #0
 800a18c:	6863      	ldr	r3, [r4, #4]
 800a18e:	dd0c      	ble.n	800a1aa <_printf_float+0x19e>
 800a190:	6121      	str	r1, [r4, #16]
 800a192:	b913      	cbnz	r3, 800a19a <_printf_float+0x18e>
 800a194:	6822      	ldr	r2, [r4, #0]
 800a196:	07d2      	lsls	r2, r2, #31
 800a198:	d502      	bpl.n	800a1a0 <_printf_float+0x194>
 800a19a:	3301      	adds	r3, #1
 800a19c:	440b      	add	r3, r1
 800a19e:	6123      	str	r3, [r4, #16]
 800a1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a2:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1a4:	f04f 0900 	mov.w	r9, #0
 800a1a8:	e7d9      	b.n	800a15e <_printf_float+0x152>
 800a1aa:	b913      	cbnz	r3, 800a1b2 <_printf_float+0x1a6>
 800a1ac:	6822      	ldr	r2, [r4, #0]
 800a1ae:	07d0      	lsls	r0, r2, #31
 800a1b0:	d501      	bpl.n	800a1b6 <_printf_float+0x1aa>
 800a1b2:	3302      	adds	r3, #2
 800a1b4:	e7f3      	b.n	800a19e <_printf_float+0x192>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e7f1      	b.n	800a19e <_printf_float+0x192>
 800a1ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a1be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	db05      	blt.n	800a1d2 <_printf_float+0x1c6>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	6123      	str	r3, [r4, #16]
 800a1ca:	07d1      	lsls	r1, r2, #31
 800a1cc:	d5e8      	bpl.n	800a1a0 <_printf_float+0x194>
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	e7e5      	b.n	800a19e <_printf_float+0x192>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bfd4      	ite	le
 800a1d6:	f1c3 0302 	rsble	r3, r3, #2
 800a1da:	2301      	movgt	r3, #1
 800a1dc:	4413      	add	r3, r2
 800a1de:	e7de      	b.n	800a19e <_printf_float+0x192>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	055a      	lsls	r2, r3, #21
 800a1e4:	d407      	bmi.n	800a1f6 <_printf_float+0x1ea>
 800a1e6:	6923      	ldr	r3, [r4, #16]
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	47b8      	blx	r7
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	d12b      	bne.n	800a24c <_printf_float+0x240>
 800a1f4:	e767      	b.n	800a0c6 <_printf_float+0xba>
 800a1f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a1fa:	f240 80dc 	bls.w	800a3b6 <_printf_float+0x3aa>
 800a1fe:	2200      	movs	r2, #0
 800a200:	2300      	movs	r3, #0
 800a202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a206:	f7f6 fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d033      	beq.n	800a276 <_printf_float+0x26a>
 800a20e:	2301      	movs	r3, #1
 800a210:	4a41      	ldr	r2, [pc, #260]	; (800a318 <_printf_float+0x30c>)
 800a212:	4631      	mov	r1, r6
 800a214:	4628      	mov	r0, r5
 800a216:	47b8      	blx	r7
 800a218:	3001      	adds	r0, #1
 800a21a:	f43f af54 	beq.w	800a0c6 <_printf_float+0xba>
 800a21e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a222:	429a      	cmp	r2, r3
 800a224:	db02      	blt.n	800a22c <_printf_float+0x220>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	07d8      	lsls	r0, r3, #31
 800a22a:	d50f      	bpl.n	800a24c <_printf_float+0x240>
 800a22c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a230:	4631      	mov	r1, r6
 800a232:	4628      	mov	r0, r5
 800a234:	47b8      	blx	r7
 800a236:	3001      	adds	r0, #1
 800a238:	f43f af45 	beq.w	800a0c6 <_printf_float+0xba>
 800a23c:	f04f 0800 	mov.w	r8, #0
 800a240:	f104 091a 	add.w	r9, r4, #26
 800a244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a246:	3b01      	subs	r3, #1
 800a248:	4543      	cmp	r3, r8
 800a24a:	dc09      	bgt.n	800a260 <_printf_float+0x254>
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	079b      	lsls	r3, r3, #30
 800a250:	f100 8103 	bmi.w	800a45a <_printf_float+0x44e>
 800a254:	68e0      	ldr	r0, [r4, #12]
 800a256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a258:	4298      	cmp	r0, r3
 800a25a:	bfb8      	it	lt
 800a25c:	4618      	movlt	r0, r3
 800a25e:	e734      	b.n	800a0ca <_printf_float+0xbe>
 800a260:	2301      	movs	r3, #1
 800a262:	464a      	mov	r2, r9
 800a264:	4631      	mov	r1, r6
 800a266:	4628      	mov	r0, r5
 800a268:	47b8      	blx	r7
 800a26a:	3001      	adds	r0, #1
 800a26c:	f43f af2b 	beq.w	800a0c6 <_printf_float+0xba>
 800a270:	f108 0801 	add.w	r8, r8, #1
 800a274:	e7e6      	b.n	800a244 <_printf_float+0x238>
 800a276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	dc2b      	bgt.n	800a2d4 <_printf_float+0x2c8>
 800a27c:	2301      	movs	r3, #1
 800a27e:	4a26      	ldr	r2, [pc, #152]	; (800a318 <_printf_float+0x30c>)
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	47b8      	blx	r7
 800a286:	3001      	adds	r0, #1
 800a288:	f43f af1d 	beq.w	800a0c6 <_printf_float+0xba>
 800a28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28e:	b923      	cbnz	r3, 800a29a <_printf_float+0x28e>
 800a290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a292:	b913      	cbnz	r3, 800a29a <_printf_float+0x28e>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	07d9      	lsls	r1, r3, #31
 800a298:	d5d8      	bpl.n	800a24c <_printf_float+0x240>
 800a29a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a29e:	4631      	mov	r1, r6
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	47b8      	blx	r7
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	f43f af0e 	beq.w	800a0c6 <_printf_float+0xba>
 800a2aa:	f04f 0900 	mov.w	r9, #0
 800a2ae:	f104 0a1a 	add.w	sl, r4, #26
 800a2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b4:	425b      	negs	r3, r3
 800a2b6:	454b      	cmp	r3, r9
 800a2b8:	dc01      	bgt.n	800a2be <_printf_float+0x2b2>
 800a2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2bc:	e794      	b.n	800a1e8 <_printf_float+0x1dc>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	4652      	mov	r2, sl
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	47b8      	blx	r7
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	f43f aefc 	beq.w	800a0c6 <_printf_float+0xba>
 800a2ce:	f109 0901 	add.w	r9, r9, #1
 800a2d2:	e7ee      	b.n	800a2b2 <_printf_float+0x2a6>
 800a2d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	bfa8      	it	ge
 800a2dc:	461a      	movge	r2, r3
 800a2de:	2a00      	cmp	r2, #0
 800a2e0:	4691      	mov	r9, r2
 800a2e2:	dd07      	ble.n	800a2f4 <_printf_float+0x2e8>
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	47b8      	blx	r7
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	f43f aee9 	beq.w	800a0c6 <_printf_float+0xba>
 800a2f4:	f104 031a 	add.w	r3, r4, #26
 800a2f8:	f04f 0b00 	mov.w	fp, #0
 800a2fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a300:	9306      	str	r3, [sp, #24]
 800a302:	e015      	b.n	800a330 <_printf_float+0x324>
 800a304:	7fefffff 	.word	0x7fefffff
 800a308:	0800e683 	.word	0x0800e683
 800a30c:	0800e6f6 	.word	0x0800e6f6
 800a310:	0800e6fe 	.word	0x0800e6fe
 800a314:	0800e6fa 	.word	0x0800e6fa
 800a318:	0800e702 	.word	0x0800e702
 800a31c:	2301      	movs	r3, #1
 800a31e:	9a06      	ldr	r2, [sp, #24]
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f aecd 	beq.w	800a0c6 <_printf_float+0xba>
 800a32c:	f10b 0b01 	add.w	fp, fp, #1
 800a330:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a334:	ebaa 0309 	sub.w	r3, sl, r9
 800a338:	455b      	cmp	r3, fp
 800a33a:	dcef      	bgt.n	800a31c <_printf_float+0x310>
 800a33c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a340:	429a      	cmp	r2, r3
 800a342:	44d0      	add	r8, sl
 800a344:	db15      	blt.n	800a372 <_printf_float+0x366>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	07da      	lsls	r2, r3, #31
 800a34a:	d412      	bmi.n	800a372 <_printf_float+0x366>
 800a34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a350:	eba3 020a 	sub.w	r2, r3, sl
 800a354:	eba3 0a01 	sub.w	sl, r3, r1
 800a358:	4592      	cmp	sl, r2
 800a35a:	bfa8      	it	ge
 800a35c:	4692      	movge	sl, r2
 800a35e:	f1ba 0f00 	cmp.w	sl, #0
 800a362:	dc0e      	bgt.n	800a382 <_printf_float+0x376>
 800a364:	f04f 0800 	mov.w	r8, #0
 800a368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a36c:	f104 091a 	add.w	r9, r4, #26
 800a370:	e019      	b.n	800a3a6 <_printf_float+0x39a>
 800a372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	47b8      	blx	r7
 800a37c:	3001      	adds	r0, #1
 800a37e:	d1e5      	bne.n	800a34c <_printf_float+0x340>
 800a380:	e6a1      	b.n	800a0c6 <_printf_float+0xba>
 800a382:	4653      	mov	r3, sl
 800a384:	4642      	mov	r2, r8
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	d1e9      	bne.n	800a364 <_printf_float+0x358>
 800a390:	e699      	b.n	800a0c6 <_printf_float+0xba>
 800a392:	2301      	movs	r3, #1
 800a394:	464a      	mov	r2, r9
 800a396:	4631      	mov	r1, r6
 800a398:	4628      	mov	r0, r5
 800a39a:	47b8      	blx	r7
 800a39c:	3001      	adds	r0, #1
 800a39e:	f43f ae92 	beq.w	800a0c6 <_printf_float+0xba>
 800a3a2:	f108 0801 	add.w	r8, r8, #1
 800a3a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3aa:	1a9b      	subs	r3, r3, r2
 800a3ac:	eba3 030a 	sub.w	r3, r3, sl
 800a3b0:	4543      	cmp	r3, r8
 800a3b2:	dcee      	bgt.n	800a392 <_printf_float+0x386>
 800a3b4:	e74a      	b.n	800a24c <_printf_float+0x240>
 800a3b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3b8:	2a01      	cmp	r2, #1
 800a3ba:	dc01      	bgt.n	800a3c0 <_printf_float+0x3b4>
 800a3bc:	07db      	lsls	r3, r3, #31
 800a3be:	d53a      	bpl.n	800a436 <_printf_float+0x42a>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	4642      	mov	r2, r8
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	47b8      	blx	r7
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	f43f ae7b 	beq.w	800a0c6 <_printf_float+0xba>
 800a3d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	47b8      	blx	r7
 800a3da:	3001      	adds	r0, #1
 800a3dc:	f108 0801 	add.w	r8, r8, #1
 800a3e0:	f43f ae71 	beq.w	800a0c6 <_printf_float+0xba>
 800a3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f103 3aff 	add.w	sl, r3, #4294967295
 800a3ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f7f6 fb71 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3f6:	b9c8      	cbnz	r0, 800a42c <_printf_float+0x420>
 800a3f8:	4653      	mov	r3, sl
 800a3fa:	4642      	mov	r2, r8
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b8      	blx	r7
 800a402:	3001      	adds	r0, #1
 800a404:	d10e      	bne.n	800a424 <_printf_float+0x418>
 800a406:	e65e      	b.n	800a0c6 <_printf_float+0xba>
 800a408:	2301      	movs	r3, #1
 800a40a:	4652      	mov	r2, sl
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	f43f ae57 	beq.w	800a0c6 <_printf_float+0xba>
 800a418:	f108 0801 	add.w	r8, r8, #1
 800a41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a41e:	3b01      	subs	r3, #1
 800a420:	4543      	cmp	r3, r8
 800a422:	dcf1      	bgt.n	800a408 <_printf_float+0x3fc>
 800a424:	464b      	mov	r3, r9
 800a426:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a42a:	e6de      	b.n	800a1ea <_printf_float+0x1de>
 800a42c:	f04f 0800 	mov.w	r8, #0
 800a430:	f104 0a1a 	add.w	sl, r4, #26
 800a434:	e7f2      	b.n	800a41c <_printf_float+0x410>
 800a436:	2301      	movs	r3, #1
 800a438:	e7df      	b.n	800a3fa <_printf_float+0x3ee>
 800a43a:	2301      	movs	r3, #1
 800a43c:	464a      	mov	r2, r9
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	f43f ae3e 	beq.w	800a0c6 <_printf_float+0xba>
 800a44a:	f108 0801 	add.w	r8, r8, #1
 800a44e:	68e3      	ldr	r3, [r4, #12]
 800a450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	4543      	cmp	r3, r8
 800a456:	dcf0      	bgt.n	800a43a <_printf_float+0x42e>
 800a458:	e6fc      	b.n	800a254 <_printf_float+0x248>
 800a45a:	f04f 0800 	mov.w	r8, #0
 800a45e:	f104 0919 	add.w	r9, r4, #25
 800a462:	e7f4      	b.n	800a44e <_printf_float+0x442>
 800a464:	2900      	cmp	r1, #0
 800a466:	f43f ae8b 	beq.w	800a180 <_printf_float+0x174>
 800a46a:	2300      	movs	r3, #0
 800a46c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a470:	ab09      	add	r3, sp, #36	; 0x24
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	ec49 8b10 	vmov	d0, r8, r9
 800a478:	6022      	str	r2, [r4, #0]
 800a47a:	f8cd a004 	str.w	sl, [sp, #4]
 800a47e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a482:	4628      	mov	r0, r5
 800a484:	f7ff fd2e 	bl	8009ee4 <__cvt>
 800a488:	4680      	mov	r8, r0
 800a48a:	e648      	b.n	800a11e <_printf_float+0x112>

0800a48c <_printf_common>:
 800a48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a490:	4691      	mov	r9, r2
 800a492:	461f      	mov	r7, r3
 800a494:	688a      	ldr	r2, [r1, #8]
 800a496:	690b      	ldr	r3, [r1, #16]
 800a498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a49c:	4293      	cmp	r3, r2
 800a49e:	bfb8      	it	lt
 800a4a0:	4613      	movlt	r3, r2
 800a4a2:	f8c9 3000 	str.w	r3, [r9]
 800a4a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	b112      	cbz	r2, 800a4b6 <_printf_common+0x2a>
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	f8c9 3000 	str.w	r3, [r9]
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	0699      	lsls	r1, r3, #26
 800a4ba:	bf42      	ittt	mi
 800a4bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a4c0:	3302      	addmi	r3, #2
 800a4c2:	f8c9 3000 	strmi.w	r3, [r9]
 800a4c6:	6825      	ldr	r5, [r4, #0]
 800a4c8:	f015 0506 	ands.w	r5, r5, #6
 800a4cc:	d107      	bne.n	800a4de <_printf_common+0x52>
 800a4ce:	f104 0a19 	add.w	sl, r4, #25
 800a4d2:	68e3      	ldr	r3, [r4, #12]
 800a4d4:	f8d9 2000 	ldr.w	r2, [r9]
 800a4d8:	1a9b      	subs	r3, r3, r2
 800a4da:	42ab      	cmp	r3, r5
 800a4dc:	dc28      	bgt.n	800a530 <_printf_common+0xa4>
 800a4de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a4e2:	6822      	ldr	r2, [r4, #0]
 800a4e4:	3300      	adds	r3, #0
 800a4e6:	bf18      	it	ne
 800a4e8:	2301      	movne	r3, #1
 800a4ea:	0692      	lsls	r2, r2, #26
 800a4ec:	d42d      	bmi.n	800a54a <_printf_common+0xbe>
 800a4ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	47c0      	blx	r8
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d020      	beq.n	800a53e <_printf_common+0xb2>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	68e5      	ldr	r5, [r4, #12]
 800a500:	f8d9 2000 	ldr.w	r2, [r9]
 800a504:	f003 0306 	and.w	r3, r3, #6
 800a508:	2b04      	cmp	r3, #4
 800a50a:	bf08      	it	eq
 800a50c:	1aad      	subeq	r5, r5, r2
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	6922      	ldr	r2, [r4, #16]
 800a512:	bf0c      	ite	eq
 800a514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a518:	2500      	movne	r5, #0
 800a51a:	4293      	cmp	r3, r2
 800a51c:	bfc4      	itt	gt
 800a51e:	1a9b      	subgt	r3, r3, r2
 800a520:	18ed      	addgt	r5, r5, r3
 800a522:	f04f 0900 	mov.w	r9, #0
 800a526:	341a      	adds	r4, #26
 800a528:	454d      	cmp	r5, r9
 800a52a:	d11a      	bne.n	800a562 <_printf_common+0xd6>
 800a52c:	2000      	movs	r0, #0
 800a52e:	e008      	b.n	800a542 <_printf_common+0xb6>
 800a530:	2301      	movs	r3, #1
 800a532:	4652      	mov	r2, sl
 800a534:	4639      	mov	r1, r7
 800a536:	4630      	mov	r0, r6
 800a538:	47c0      	blx	r8
 800a53a:	3001      	adds	r0, #1
 800a53c:	d103      	bne.n	800a546 <_printf_common+0xba>
 800a53e:	f04f 30ff 	mov.w	r0, #4294967295
 800a542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a546:	3501      	adds	r5, #1
 800a548:	e7c3      	b.n	800a4d2 <_printf_common+0x46>
 800a54a:	18e1      	adds	r1, r4, r3
 800a54c:	1c5a      	adds	r2, r3, #1
 800a54e:	2030      	movs	r0, #48	; 0x30
 800a550:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a554:	4422      	add	r2, r4
 800a556:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a55a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a55e:	3302      	adds	r3, #2
 800a560:	e7c5      	b.n	800a4ee <_printf_common+0x62>
 800a562:	2301      	movs	r3, #1
 800a564:	4622      	mov	r2, r4
 800a566:	4639      	mov	r1, r7
 800a568:	4630      	mov	r0, r6
 800a56a:	47c0      	blx	r8
 800a56c:	3001      	adds	r0, #1
 800a56e:	d0e6      	beq.n	800a53e <_printf_common+0xb2>
 800a570:	f109 0901 	add.w	r9, r9, #1
 800a574:	e7d8      	b.n	800a528 <_printf_common+0x9c>
	...

0800a578 <_printf_i>:
 800a578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a57c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a580:	460c      	mov	r4, r1
 800a582:	7e09      	ldrb	r1, [r1, #24]
 800a584:	b085      	sub	sp, #20
 800a586:	296e      	cmp	r1, #110	; 0x6e
 800a588:	4617      	mov	r7, r2
 800a58a:	4606      	mov	r6, r0
 800a58c:	4698      	mov	r8, r3
 800a58e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a590:	f000 80b3 	beq.w	800a6fa <_printf_i+0x182>
 800a594:	d822      	bhi.n	800a5dc <_printf_i+0x64>
 800a596:	2963      	cmp	r1, #99	; 0x63
 800a598:	d036      	beq.n	800a608 <_printf_i+0x90>
 800a59a:	d80a      	bhi.n	800a5b2 <_printf_i+0x3a>
 800a59c:	2900      	cmp	r1, #0
 800a59e:	f000 80b9 	beq.w	800a714 <_printf_i+0x19c>
 800a5a2:	2958      	cmp	r1, #88	; 0x58
 800a5a4:	f000 8083 	beq.w	800a6ae <_printf_i+0x136>
 800a5a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a5b0:	e032      	b.n	800a618 <_printf_i+0xa0>
 800a5b2:	2964      	cmp	r1, #100	; 0x64
 800a5b4:	d001      	beq.n	800a5ba <_printf_i+0x42>
 800a5b6:	2969      	cmp	r1, #105	; 0x69
 800a5b8:	d1f6      	bne.n	800a5a8 <_printf_i+0x30>
 800a5ba:	6820      	ldr	r0, [r4, #0]
 800a5bc:	6813      	ldr	r3, [r2, #0]
 800a5be:	0605      	lsls	r5, r0, #24
 800a5c0:	f103 0104 	add.w	r1, r3, #4
 800a5c4:	d52a      	bpl.n	800a61c <_printf_i+0xa4>
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6011      	str	r1, [r2, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	da03      	bge.n	800a5d6 <_printf_i+0x5e>
 800a5ce:	222d      	movs	r2, #45	; 0x2d
 800a5d0:	425b      	negs	r3, r3
 800a5d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a5d6:	486f      	ldr	r0, [pc, #444]	; (800a794 <_printf_i+0x21c>)
 800a5d8:	220a      	movs	r2, #10
 800a5da:	e039      	b.n	800a650 <_printf_i+0xd8>
 800a5dc:	2973      	cmp	r1, #115	; 0x73
 800a5de:	f000 809d 	beq.w	800a71c <_printf_i+0x1a4>
 800a5e2:	d808      	bhi.n	800a5f6 <_printf_i+0x7e>
 800a5e4:	296f      	cmp	r1, #111	; 0x6f
 800a5e6:	d020      	beq.n	800a62a <_printf_i+0xb2>
 800a5e8:	2970      	cmp	r1, #112	; 0x70
 800a5ea:	d1dd      	bne.n	800a5a8 <_printf_i+0x30>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	f043 0320 	orr.w	r3, r3, #32
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	e003      	b.n	800a5fe <_printf_i+0x86>
 800a5f6:	2975      	cmp	r1, #117	; 0x75
 800a5f8:	d017      	beq.n	800a62a <_printf_i+0xb2>
 800a5fa:	2978      	cmp	r1, #120	; 0x78
 800a5fc:	d1d4      	bne.n	800a5a8 <_printf_i+0x30>
 800a5fe:	2378      	movs	r3, #120	; 0x78
 800a600:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a604:	4864      	ldr	r0, [pc, #400]	; (800a798 <_printf_i+0x220>)
 800a606:	e055      	b.n	800a6b4 <_printf_i+0x13c>
 800a608:	6813      	ldr	r3, [r2, #0]
 800a60a:	1d19      	adds	r1, r3, #4
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6011      	str	r1, [r2, #0]
 800a610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a618:	2301      	movs	r3, #1
 800a61a:	e08c      	b.n	800a736 <_printf_i+0x1be>
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6011      	str	r1, [r2, #0]
 800a620:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a624:	bf18      	it	ne
 800a626:	b21b      	sxthne	r3, r3
 800a628:	e7cf      	b.n	800a5ca <_printf_i+0x52>
 800a62a:	6813      	ldr	r3, [r2, #0]
 800a62c:	6825      	ldr	r5, [r4, #0]
 800a62e:	1d18      	adds	r0, r3, #4
 800a630:	6010      	str	r0, [r2, #0]
 800a632:	0628      	lsls	r0, r5, #24
 800a634:	d501      	bpl.n	800a63a <_printf_i+0xc2>
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	e002      	b.n	800a640 <_printf_i+0xc8>
 800a63a:	0668      	lsls	r0, r5, #25
 800a63c:	d5fb      	bpl.n	800a636 <_printf_i+0xbe>
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	4854      	ldr	r0, [pc, #336]	; (800a794 <_printf_i+0x21c>)
 800a642:	296f      	cmp	r1, #111	; 0x6f
 800a644:	bf14      	ite	ne
 800a646:	220a      	movne	r2, #10
 800a648:	2208      	moveq	r2, #8
 800a64a:	2100      	movs	r1, #0
 800a64c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a650:	6865      	ldr	r5, [r4, #4]
 800a652:	60a5      	str	r5, [r4, #8]
 800a654:	2d00      	cmp	r5, #0
 800a656:	f2c0 8095 	blt.w	800a784 <_printf_i+0x20c>
 800a65a:	6821      	ldr	r1, [r4, #0]
 800a65c:	f021 0104 	bic.w	r1, r1, #4
 800a660:	6021      	str	r1, [r4, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d13d      	bne.n	800a6e2 <_printf_i+0x16a>
 800a666:	2d00      	cmp	r5, #0
 800a668:	f040 808e 	bne.w	800a788 <_printf_i+0x210>
 800a66c:	4665      	mov	r5, ip
 800a66e:	2a08      	cmp	r2, #8
 800a670:	d10b      	bne.n	800a68a <_printf_i+0x112>
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	07db      	lsls	r3, r3, #31
 800a676:	d508      	bpl.n	800a68a <_printf_i+0x112>
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	6862      	ldr	r2, [r4, #4]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	bfde      	ittt	le
 800a680:	2330      	movle	r3, #48	; 0x30
 800a682:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a686:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a68a:	ebac 0305 	sub.w	r3, ip, r5
 800a68e:	6123      	str	r3, [r4, #16]
 800a690:	f8cd 8000 	str.w	r8, [sp]
 800a694:	463b      	mov	r3, r7
 800a696:	aa03      	add	r2, sp, #12
 800a698:	4621      	mov	r1, r4
 800a69a:	4630      	mov	r0, r6
 800a69c:	f7ff fef6 	bl	800a48c <_printf_common>
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d14d      	bne.n	800a740 <_printf_i+0x1c8>
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a8:	b005      	add	sp, #20
 800a6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ae:	4839      	ldr	r0, [pc, #228]	; (800a794 <_printf_i+0x21c>)
 800a6b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a6b4:	6813      	ldr	r3, [r2, #0]
 800a6b6:	6821      	ldr	r1, [r4, #0]
 800a6b8:	1d1d      	adds	r5, r3, #4
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6015      	str	r5, [r2, #0]
 800a6be:	060a      	lsls	r2, r1, #24
 800a6c0:	d50b      	bpl.n	800a6da <_printf_i+0x162>
 800a6c2:	07ca      	lsls	r2, r1, #31
 800a6c4:	bf44      	itt	mi
 800a6c6:	f041 0120 	orrmi.w	r1, r1, #32
 800a6ca:	6021      	strmi	r1, [r4, #0]
 800a6cc:	b91b      	cbnz	r3, 800a6d6 <_printf_i+0x15e>
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	f022 0220 	bic.w	r2, r2, #32
 800a6d4:	6022      	str	r2, [r4, #0]
 800a6d6:	2210      	movs	r2, #16
 800a6d8:	e7b7      	b.n	800a64a <_printf_i+0xd2>
 800a6da:	064d      	lsls	r5, r1, #25
 800a6dc:	bf48      	it	mi
 800a6de:	b29b      	uxthmi	r3, r3
 800a6e0:	e7ef      	b.n	800a6c2 <_printf_i+0x14a>
 800a6e2:	4665      	mov	r5, ip
 800a6e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6e8:	fb02 3311 	mls	r3, r2, r1, r3
 800a6ec:	5cc3      	ldrb	r3, [r0, r3]
 800a6ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	d1f5      	bne.n	800a6e4 <_printf_i+0x16c>
 800a6f8:	e7b9      	b.n	800a66e <_printf_i+0xf6>
 800a6fa:	6813      	ldr	r3, [r2, #0]
 800a6fc:	6825      	ldr	r5, [r4, #0]
 800a6fe:	6961      	ldr	r1, [r4, #20]
 800a700:	1d18      	adds	r0, r3, #4
 800a702:	6010      	str	r0, [r2, #0]
 800a704:	0628      	lsls	r0, r5, #24
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	d501      	bpl.n	800a70e <_printf_i+0x196>
 800a70a:	6019      	str	r1, [r3, #0]
 800a70c:	e002      	b.n	800a714 <_printf_i+0x19c>
 800a70e:	066a      	lsls	r2, r5, #25
 800a710:	d5fb      	bpl.n	800a70a <_printf_i+0x192>
 800a712:	8019      	strh	r1, [r3, #0]
 800a714:	2300      	movs	r3, #0
 800a716:	6123      	str	r3, [r4, #16]
 800a718:	4665      	mov	r5, ip
 800a71a:	e7b9      	b.n	800a690 <_printf_i+0x118>
 800a71c:	6813      	ldr	r3, [r2, #0]
 800a71e:	1d19      	adds	r1, r3, #4
 800a720:	6011      	str	r1, [r2, #0]
 800a722:	681d      	ldr	r5, [r3, #0]
 800a724:	6862      	ldr	r2, [r4, #4]
 800a726:	2100      	movs	r1, #0
 800a728:	4628      	mov	r0, r5
 800a72a:	f7f5 fd61 	bl	80001f0 <memchr>
 800a72e:	b108      	cbz	r0, 800a734 <_printf_i+0x1bc>
 800a730:	1b40      	subs	r0, r0, r5
 800a732:	6060      	str	r0, [r4, #4]
 800a734:	6863      	ldr	r3, [r4, #4]
 800a736:	6123      	str	r3, [r4, #16]
 800a738:	2300      	movs	r3, #0
 800a73a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a73e:	e7a7      	b.n	800a690 <_printf_i+0x118>
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	462a      	mov	r2, r5
 800a744:	4639      	mov	r1, r7
 800a746:	4630      	mov	r0, r6
 800a748:	47c0      	blx	r8
 800a74a:	3001      	adds	r0, #1
 800a74c:	d0aa      	beq.n	800a6a4 <_printf_i+0x12c>
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	079b      	lsls	r3, r3, #30
 800a752:	d413      	bmi.n	800a77c <_printf_i+0x204>
 800a754:	68e0      	ldr	r0, [r4, #12]
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	4298      	cmp	r0, r3
 800a75a:	bfb8      	it	lt
 800a75c:	4618      	movlt	r0, r3
 800a75e:	e7a3      	b.n	800a6a8 <_printf_i+0x130>
 800a760:	2301      	movs	r3, #1
 800a762:	464a      	mov	r2, r9
 800a764:	4639      	mov	r1, r7
 800a766:	4630      	mov	r0, r6
 800a768:	47c0      	blx	r8
 800a76a:	3001      	adds	r0, #1
 800a76c:	d09a      	beq.n	800a6a4 <_printf_i+0x12c>
 800a76e:	3501      	adds	r5, #1
 800a770:	68e3      	ldr	r3, [r4, #12]
 800a772:	9a03      	ldr	r2, [sp, #12]
 800a774:	1a9b      	subs	r3, r3, r2
 800a776:	42ab      	cmp	r3, r5
 800a778:	dcf2      	bgt.n	800a760 <_printf_i+0x1e8>
 800a77a:	e7eb      	b.n	800a754 <_printf_i+0x1dc>
 800a77c:	2500      	movs	r5, #0
 800a77e:	f104 0919 	add.w	r9, r4, #25
 800a782:	e7f5      	b.n	800a770 <_printf_i+0x1f8>
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1ac      	bne.n	800a6e2 <_printf_i+0x16a>
 800a788:	7803      	ldrb	r3, [r0, #0]
 800a78a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a78e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a792:	e76c      	b.n	800a66e <_printf_i+0xf6>
 800a794:	0800e704 	.word	0x0800e704
 800a798:	0800e715 	.word	0x0800e715

0800a79c <_scanf_float>:
 800a79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a0:	469a      	mov	sl, r3
 800a7a2:	688b      	ldr	r3, [r1, #8]
 800a7a4:	4616      	mov	r6, r2
 800a7a6:	1e5a      	subs	r2, r3, #1
 800a7a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a7ac:	b087      	sub	sp, #28
 800a7ae:	bf83      	ittte	hi
 800a7b0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800a7b4:	189b      	addhi	r3, r3, r2
 800a7b6:	9301      	strhi	r3, [sp, #4]
 800a7b8:	2300      	movls	r3, #0
 800a7ba:	bf86      	itte	hi
 800a7bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a7c0:	608b      	strhi	r3, [r1, #8]
 800a7c2:	9301      	strls	r3, [sp, #4]
 800a7c4:	680b      	ldr	r3, [r1, #0]
 800a7c6:	4688      	mov	r8, r1
 800a7c8:	f04f 0b00 	mov.w	fp, #0
 800a7cc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a7d0:	f848 3b1c 	str.w	r3, [r8], #28
 800a7d4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800a7d8:	4607      	mov	r7, r0
 800a7da:	460c      	mov	r4, r1
 800a7dc:	4645      	mov	r5, r8
 800a7de:	465a      	mov	r2, fp
 800a7e0:	46d9      	mov	r9, fp
 800a7e2:	f8cd b008 	str.w	fp, [sp, #8]
 800a7e6:	68a1      	ldr	r1, [r4, #8]
 800a7e8:	b181      	cbz	r1, 800a80c <_scanf_float+0x70>
 800a7ea:	6833      	ldr	r3, [r6, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b49      	cmp	r3, #73	; 0x49
 800a7f0:	d071      	beq.n	800a8d6 <_scanf_float+0x13a>
 800a7f2:	d84d      	bhi.n	800a890 <_scanf_float+0xf4>
 800a7f4:	2b39      	cmp	r3, #57	; 0x39
 800a7f6:	d840      	bhi.n	800a87a <_scanf_float+0xde>
 800a7f8:	2b31      	cmp	r3, #49	; 0x31
 800a7fa:	f080 8088 	bcs.w	800a90e <_scanf_float+0x172>
 800a7fe:	2b2d      	cmp	r3, #45	; 0x2d
 800a800:	f000 8090 	beq.w	800a924 <_scanf_float+0x188>
 800a804:	d815      	bhi.n	800a832 <_scanf_float+0x96>
 800a806:	2b2b      	cmp	r3, #43	; 0x2b
 800a808:	f000 808c 	beq.w	800a924 <_scanf_float+0x188>
 800a80c:	f1b9 0f00 	cmp.w	r9, #0
 800a810:	d003      	beq.n	800a81a <_scanf_float+0x7e>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	3a01      	subs	r2, #1
 800a81c:	2a01      	cmp	r2, #1
 800a81e:	f200 80ea 	bhi.w	800a9f6 <_scanf_float+0x25a>
 800a822:	4545      	cmp	r5, r8
 800a824:	f200 80dc 	bhi.w	800a9e0 <_scanf_float+0x244>
 800a828:	2601      	movs	r6, #1
 800a82a:	4630      	mov	r0, r6
 800a82c:	b007      	add	sp, #28
 800a82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a832:	2b2e      	cmp	r3, #46	; 0x2e
 800a834:	f000 809f 	beq.w	800a976 <_scanf_float+0x1da>
 800a838:	2b30      	cmp	r3, #48	; 0x30
 800a83a:	d1e7      	bne.n	800a80c <_scanf_float+0x70>
 800a83c:	6820      	ldr	r0, [r4, #0]
 800a83e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800a842:	d064      	beq.n	800a90e <_scanf_float+0x172>
 800a844:	9b01      	ldr	r3, [sp, #4]
 800a846:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800a84a:	6020      	str	r0, [r4, #0]
 800a84c:	f109 0901 	add.w	r9, r9, #1
 800a850:	b11b      	cbz	r3, 800a85a <_scanf_float+0xbe>
 800a852:	3b01      	subs	r3, #1
 800a854:	3101      	adds	r1, #1
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	60a1      	str	r1, [r4, #8]
 800a85a:	68a3      	ldr	r3, [r4, #8]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	60a3      	str	r3, [r4, #8]
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	3301      	adds	r3, #1
 800a864:	6123      	str	r3, [r4, #16]
 800a866:	6873      	ldr	r3, [r6, #4]
 800a868:	3b01      	subs	r3, #1
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	6073      	str	r3, [r6, #4]
 800a86e:	f340 80ac 	ble.w	800a9ca <_scanf_float+0x22e>
 800a872:	6833      	ldr	r3, [r6, #0]
 800a874:	3301      	adds	r3, #1
 800a876:	6033      	str	r3, [r6, #0]
 800a878:	e7b5      	b.n	800a7e6 <_scanf_float+0x4a>
 800a87a:	2b45      	cmp	r3, #69	; 0x45
 800a87c:	f000 8085 	beq.w	800a98a <_scanf_float+0x1ee>
 800a880:	2b46      	cmp	r3, #70	; 0x46
 800a882:	d06a      	beq.n	800a95a <_scanf_float+0x1be>
 800a884:	2b41      	cmp	r3, #65	; 0x41
 800a886:	d1c1      	bne.n	800a80c <_scanf_float+0x70>
 800a888:	2a01      	cmp	r2, #1
 800a88a:	d1bf      	bne.n	800a80c <_scanf_float+0x70>
 800a88c:	2202      	movs	r2, #2
 800a88e:	e046      	b.n	800a91e <_scanf_float+0x182>
 800a890:	2b65      	cmp	r3, #101	; 0x65
 800a892:	d07a      	beq.n	800a98a <_scanf_float+0x1ee>
 800a894:	d818      	bhi.n	800a8c8 <_scanf_float+0x12c>
 800a896:	2b54      	cmp	r3, #84	; 0x54
 800a898:	d066      	beq.n	800a968 <_scanf_float+0x1cc>
 800a89a:	d811      	bhi.n	800a8c0 <_scanf_float+0x124>
 800a89c:	2b4e      	cmp	r3, #78	; 0x4e
 800a89e:	d1b5      	bne.n	800a80c <_scanf_float+0x70>
 800a8a0:	2a00      	cmp	r2, #0
 800a8a2:	d146      	bne.n	800a932 <_scanf_float+0x196>
 800a8a4:	f1b9 0f00 	cmp.w	r9, #0
 800a8a8:	d145      	bne.n	800a936 <_scanf_float+0x19a>
 800a8aa:	6821      	ldr	r1, [r4, #0]
 800a8ac:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a8b0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a8b4:	d13f      	bne.n	800a936 <_scanf_float+0x19a>
 800a8b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a8ba:	6021      	str	r1, [r4, #0]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	e02e      	b.n	800a91e <_scanf_float+0x182>
 800a8c0:	2b59      	cmp	r3, #89	; 0x59
 800a8c2:	d01e      	beq.n	800a902 <_scanf_float+0x166>
 800a8c4:	2b61      	cmp	r3, #97	; 0x61
 800a8c6:	e7de      	b.n	800a886 <_scanf_float+0xea>
 800a8c8:	2b6e      	cmp	r3, #110	; 0x6e
 800a8ca:	d0e9      	beq.n	800a8a0 <_scanf_float+0x104>
 800a8cc:	d815      	bhi.n	800a8fa <_scanf_float+0x15e>
 800a8ce:	2b66      	cmp	r3, #102	; 0x66
 800a8d0:	d043      	beq.n	800a95a <_scanf_float+0x1be>
 800a8d2:	2b69      	cmp	r3, #105	; 0x69
 800a8d4:	d19a      	bne.n	800a80c <_scanf_float+0x70>
 800a8d6:	f1bb 0f00 	cmp.w	fp, #0
 800a8da:	d138      	bne.n	800a94e <_scanf_float+0x1b2>
 800a8dc:	f1b9 0f00 	cmp.w	r9, #0
 800a8e0:	d197      	bne.n	800a812 <_scanf_float+0x76>
 800a8e2:	6821      	ldr	r1, [r4, #0]
 800a8e4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a8e8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a8ec:	d195      	bne.n	800a81a <_scanf_float+0x7e>
 800a8ee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a8f2:	6021      	str	r1, [r4, #0]
 800a8f4:	f04f 0b01 	mov.w	fp, #1
 800a8f8:	e011      	b.n	800a91e <_scanf_float+0x182>
 800a8fa:	2b74      	cmp	r3, #116	; 0x74
 800a8fc:	d034      	beq.n	800a968 <_scanf_float+0x1cc>
 800a8fe:	2b79      	cmp	r3, #121	; 0x79
 800a900:	d184      	bne.n	800a80c <_scanf_float+0x70>
 800a902:	f1bb 0f07 	cmp.w	fp, #7
 800a906:	d181      	bne.n	800a80c <_scanf_float+0x70>
 800a908:	f04f 0b08 	mov.w	fp, #8
 800a90c:	e007      	b.n	800a91e <_scanf_float+0x182>
 800a90e:	eb12 0f0b 	cmn.w	r2, fp
 800a912:	f47f af7b 	bne.w	800a80c <_scanf_float+0x70>
 800a916:	6821      	ldr	r1, [r4, #0]
 800a918:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a91c:	6021      	str	r1, [r4, #0]
 800a91e:	702b      	strb	r3, [r5, #0]
 800a920:	3501      	adds	r5, #1
 800a922:	e79a      	b.n	800a85a <_scanf_float+0xbe>
 800a924:	6821      	ldr	r1, [r4, #0]
 800a926:	0608      	lsls	r0, r1, #24
 800a928:	f57f af70 	bpl.w	800a80c <_scanf_float+0x70>
 800a92c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a930:	e7f4      	b.n	800a91c <_scanf_float+0x180>
 800a932:	2a02      	cmp	r2, #2
 800a934:	d047      	beq.n	800a9c6 <_scanf_float+0x22a>
 800a936:	f1bb 0f01 	cmp.w	fp, #1
 800a93a:	d003      	beq.n	800a944 <_scanf_float+0x1a8>
 800a93c:	f1bb 0f04 	cmp.w	fp, #4
 800a940:	f47f af64 	bne.w	800a80c <_scanf_float+0x70>
 800a944:	f10b 0b01 	add.w	fp, fp, #1
 800a948:	fa5f fb8b 	uxtb.w	fp, fp
 800a94c:	e7e7      	b.n	800a91e <_scanf_float+0x182>
 800a94e:	f1bb 0f03 	cmp.w	fp, #3
 800a952:	d0f7      	beq.n	800a944 <_scanf_float+0x1a8>
 800a954:	f1bb 0f05 	cmp.w	fp, #5
 800a958:	e7f2      	b.n	800a940 <_scanf_float+0x1a4>
 800a95a:	f1bb 0f02 	cmp.w	fp, #2
 800a95e:	f47f af55 	bne.w	800a80c <_scanf_float+0x70>
 800a962:	f04f 0b03 	mov.w	fp, #3
 800a966:	e7da      	b.n	800a91e <_scanf_float+0x182>
 800a968:	f1bb 0f06 	cmp.w	fp, #6
 800a96c:	f47f af4e 	bne.w	800a80c <_scanf_float+0x70>
 800a970:	f04f 0b07 	mov.w	fp, #7
 800a974:	e7d3      	b.n	800a91e <_scanf_float+0x182>
 800a976:	6821      	ldr	r1, [r4, #0]
 800a978:	0588      	lsls	r0, r1, #22
 800a97a:	f57f af47 	bpl.w	800a80c <_scanf_float+0x70>
 800a97e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a982:	6021      	str	r1, [r4, #0]
 800a984:	f8cd 9008 	str.w	r9, [sp, #8]
 800a988:	e7c9      	b.n	800a91e <_scanf_float+0x182>
 800a98a:	6821      	ldr	r1, [r4, #0]
 800a98c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a990:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a994:	d006      	beq.n	800a9a4 <_scanf_float+0x208>
 800a996:	0548      	lsls	r0, r1, #21
 800a998:	f57f af38 	bpl.w	800a80c <_scanf_float+0x70>
 800a99c:	f1b9 0f00 	cmp.w	r9, #0
 800a9a0:	f43f af3b 	beq.w	800a81a <_scanf_float+0x7e>
 800a9a4:	0588      	lsls	r0, r1, #22
 800a9a6:	bf58      	it	pl
 800a9a8:	9802      	ldrpl	r0, [sp, #8]
 800a9aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a9ae:	bf58      	it	pl
 800a9b0:	eba9 0000 	subpl.w	r0, r9, r0
 800a9b4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a9b8:	bf58      	it	pl
 800a9ba:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a9be:	6021      	str	r1, [r4, #0]
 800a9c0:	f04f 0900 	mov.w	r9, #0
 800a9c4:	e7ab      	b.n	800a91e <_scanf_float+0x182>
 800a9c6:	2203      	movs	r2, #3
 800a9c8:	e7a9      	b.n	800a91e <_scanf_float+0x182>
 800a9ca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a9ce:	9205      	str	r2, [sp, #20]
 800a9d0:	4631      	mov	r1, r6
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	4798      	blx	r3
 800a9d6:	9a05      	ldr	r2, [sp, #20]
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	f43f af04 	beq.w	800a7e6 <_scanf_float+0x4a>
 800a9de:	e715      	b.n	800a80c <_scanf_float+0x70>
 800a9e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a9e8:	4632      	mov	r2, r6
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	4798      	blx	r3
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	6123      	str	r3, [r4, #16]
 800a9f4:	e715      	b.n	800a822 <_scanf_float+0x86>
 800a9f6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a9fa:	2b06      	cmp	r3, #6
 800a9fc:	d80a      	bhi.n	800aa14 <_scanf_float+0x278>
 800a9fe:	f1bb 0f02 	cmp.w	fp, #2
 800aa02:	d968      	bls.n	800aad6 <_scanf_float+0x33a>
 800aa04:	f1ab 0b03 	sub.w	fp, fp, #3
 800aa08:	fa5f fb8b 	uxtb.w	fp, fp
 800aa0c:	eba5 0b0b 	sub.w	fp, r5, fp
 800aa10:	455d      	cmp	r5, fp
 800aa12:	d14b      	bne.n	800aaac <_scanf_float+0x310>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	05da      	lsls	r2, r3, #23
 800aa18:	d51f      	bpl.n	800aa5a <_scanf_float+0x2be>
 800aa1a:	055b      	lsls	r3, r3, #21
 800aa1c:	d468      	bmi.n	800aaf0 <_scanf_float+0x354>
 800aa1e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	2965      	cmp	r1, #101	; 0x65
 800aa26:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa2a:	f105 3bff 	add.w	fp, r5, #4294967295
 800aa2e:	6123      	str	r3, [r4, #16]
 800aa30:	d00d      	beq.n	800aa4e <_scanf_float+0x2b2>
 800aa32:	2945      	cmp	r1, #69	; 0x45
 800aa34:	d00b      	beq.n	800aa4e <_scanf_float+0x2b2>
 800aa36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa3a:	4632      	mov	r2, r6
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	4798      	blx	r3
 800aa40:	6923      	ldr	r3, [r4, #16]
 800aa42:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800aa46:	3b01      	subs	r3, #1
 800aa48:	f1a5 0b02 	sub.w	fp, r5, #2
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa52:	4632      	mov	r2, r6
 800aa54:	4638      	mov	r0, r7
 800aa56:	4798      	blx	r3
 800aa58:	465d      	mov	r5, fp
 800aa5a:	6826      	ldr	r6, [r4, #0]
 800aa5c:	f016 0610 	ands.w	r6, r6, #16
 800aa60:	d17a      	bne.n	800ab58 <_scanf_float+0x3bc>
 800aa62:	702e      	strb	r6, [r5, #0]
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa6e:	d142      	bne.n	800aaf6 <_scanf_float+0x35a>
 800aa70:	9b02      	ldr	r3, [sp, #8]
 800aa72:	eba9 0303 	sub.w	r3, r9, r3
 800aa76:	425a      	negs	r2, r3
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d149      	bne.n	800ab10 <_scanf_float+0x374>
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	4641      	mov	r1, r8
 800aa80:	4638      	mov	r0, r7
 800aa82:	f000 ff21 	bl	800b8c8 <_strtod_r>
 800aa86:	6825      	ldr	r5, [r4, #0]
 800aa88:	f8da 3000 	ldr.w	r3, [sl]
 800aa8c:	f015 0f02 	tst.w	r5, #2
 800aa90:	f103 0204 	add.w	r2, r3, #4
 800aa94:	ec59 8b10 	vmov	r8, r9, d0
 800aa98:	f8ca 2000 	str.w	r2, [sl]
 800aa9c:	d043      	beq.n	800ab26 <_scanf_float+0x38a>
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	e9c3 8900 	strd	r8, r9, [r3]
 800aaa4:	68e3      	ldr	r3, [r4, #12]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	60e3      	str	r3, [r4, #12]
 800aaaa:	e6be      	b.n	800a82a <_scanf_float+0x8e>
 800aaac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aab0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800aab4:	4632      	mov	r2, r6
 800aab6:	4638      	mov	r0, r7
 800aab8:	4798      	blx	r3
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	6123      	str	r3, [r4, #16]
 800aac0:	e7a6      	b.n	800aa10 <_scanf_float+0x274>
 800aac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aac6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800aaca:	4632      	mov	r2, r6
 800aacc:	4638      	mov	r0, r7
 800aace:	4798      	blx	r3
 800aad0:	6923      	ldr	r3, [r4, #16]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	6123      	str	r3, [r4, #16]
 800aad6:	4545      	cmp	r5, r8
 800aad8:	d8f3      	bhi.n	800aac2 <_scanf_float+0x326>
 800aada:	e6a5      	b.n	800a828 <_scanf_float+0x8c>
 800aadc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aae0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800aae4:	4632      	mov	r2, r6
 800aae6:	4638      	mov	r0, r7
 800aae8:	4798      	blx	r3
 800aaea:	6923      	ldr	r3, [r4, #16]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	6123      	str	r3, [r4, #16]
 800aaf0:	4545      	cmp	r5, r8
 800aaf2:	d8f3      	bhi.n	800aadc <_scanf_float+0x340>
 800aaf4:	e698      	b.n	800a828 <_scanf_float+0x8c>
 800aaf6:	9b03      	ldr	r3, [sp, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d0bf      	beq.n	800aa7c <_scanf_float+0x2e0>
 800aafc:	9904      	ldr	r1, [sp, #16]
 800aafe:	230a      	movs	r3, #10
 800ab00:	4632      	mov	r2, r6
 800ab02:	3101      	adds	r1, #1
 800ab04:	4638      	mov	r0, r7
 800ab06:	f000 ff6b 	bl	800b9e0 <_strtol_r>
 800ab0a:	9b03      	ldr	r3, [sp, #12]
 800ab0c:	9d04      	ldr	r5, [sp, #16]
 800ab0e:	1ac2      	subs	r2, r0, r3
 800ab10:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ab14:	429d      	cmp	r5, r3
 800ab16:	bf28      	it	cs
 800ab18:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ab1c:	490f      	ldr	r1, [pc, #60]	; (800ab5c <_scanf_float+0x3c0>)
 800ab1e:	4628      	mov	r0, r5
 800ab20:	f000 f8a0 	bl	800ac64 <siprintf>
 800ab24:	e7aa      	b.n	800aa7c <_scanf_float+0x2e0>
 800ab26:	f015 0504 	ands.w	r5, r5, #4
 800ab2a:	d1b8      	bne.n	800aa9e <_scanf_float+0x302>
 800ab2c:	681f      	ldr	r7, [r3, #0]
 800ab2e:	ee10 2a10 	vmov	r2, s0
 800ab32:	464b      	mov	r3, r9
 800ab34:	ee10 0a10 	vmov	r0, s0
 800ab38:	4649      	mov	r1, r9
 800ab3a:	f7f5 ffff 	bl	8000b3c <__aeabi_dcmpun>
 800ab3e:	b128      	cbz	r0, 800ab4c <_scanf_float+0x3b0>
 800ab40:	4628      	mov	r0, r5
 800ab42:	f000 f889 	bl	800ac58 <nanf>
 800ab46:	ed87 0a00 	vstr	s0, [r7]
 800ab4a:	e7ab      	b.n	800aaa4 <_scanf_float+0x308>
 800ab4c:	4640      	mov	r0, r8
 800ab4e:	4649      	mov	r1, r9
 800ab50:	f7f6 f852 	bl	8000bf8 <__aeabi_d2f>
 800ab54:	6038      	str	r0, [r7, #0]
 800ab56:	e7a5      	b.n	800aaa4 <_scanf_float+0x308>
 800ab58:	2600      	movs	r6, #0
 800ab5a:	e666      	b.n	800a82a <_scanf_float+0x8e>
 800ab5c:	0800e726 	.word	0x0800e726

0800ab60 <iprintf>:
 800ab60:	b40f      	push	{r0, r1, r2, r3}
 800ab62:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <iprintf+0x2c>)
 800ab64:	b513      	push	{r0, r1, r4, lr}
 800ab66:	681c      	ldr	r4, [r3, #0]
 800ab68:	b124      	cbz	r4, 800ab74 <iprintf+0x14>
 800ab6a:	69a3      	ldr	r3, [r4, #24]
 800ab6c:	b913      	cbnz	r3, 800ab74 <iprintf+0x14>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f001 ff4a 	bl	800ca08 <__sinit>
 800ab74:	ab05      	add	r3, sp, #20
 800ab76:	9a04      	ldr	r2, [sp, #16]
 800ab78:	68a1      	ldr	r1, [r4, #8]
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f003 f9a1 	bl	800dec4 <_vfiprintf_r>
 800ab82:	b002      	add	sp, #8
 800ab84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab88:	b004      	add	sp, #16
 800ab8a:	4770      	bx	lr
 800ab8c:	20000078 	.word	0x20000078

0800ab90 <_puts_r>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	460e      	mov	r6, r1
 800ab94:	4605      	mov	r5, r0
 800ab96:	b118      	cbz	r0, 800aba0 <_puts_r+0x10>
 800ab98:	6983      	ldr	r3, [r0, #24]
 800ab9a:	b90b      	cbnz	r3, 800aba0 <_puts_r+0x10>
 800ab9c:	f001 ff34 	bl	800ca08 <__sinit>
 800aba0:	69ab      	ldr	r3, [r5, #24]
 800aba2:	68ac      	ldr	r4, [r5, #8]
 800aba4:	b913      	cbnz	r3, 800abac <_puts_r+0x1c>
 800aba6:	4628      	mov	r0, r5
 800aba8:	f001 ff2e 	bl	800ca08 <__sinit>
 800abac:	4b23      	ldr	r3, [pc, #140]	; (800ac3c <_puts_r+0xac>)
 800abae:	429c      	cmp	r4, r3
 800abb0:	d117      	bne.n	800abe2 <_puts_r+0x52>
 800abb2:	686c      	ldr	r4, [r5, #4]
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	071b      	lsls	r3, r3, #28
 800abb8:	d51d      	bpl.n	800abf6 <_puts_r+0x66>
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	b1db      	cbz	r3, 800abf6 <_puts_r+0x66>
 800abbe:	3e01      	subs	r6, #1
 800abc0:	68a3      	ldr	r3, [r4, #8]
 800abc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abc6:	3b01      	subs	r3, #1
 800abc8:	60a3      	str	r3, [r4, #8]
 800abca:	b9e9      	cbnz	r1, 800ac08 <_puts_r+0x78>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	da2e      	bge.n	800ac2e <_puts_r+0x9e>
 800abd0:	4622      	mov	r2, r4
 800abd2:	210a      	movs	r1, #10
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 ff15 	bl	800ba04 <__swbuf_r>
 800abda:	3001      	adds	r0, #1
 800abdc:	d011      	beq.n	800ac02 <_puts_r+0x72>
 800abde:	200a      	movs	r0, #10
 800abe0:	e011      	b.n	800ac06 <_puts_r+0x76>
 800abe2:	4b17      	ldr	r3, [pc, #92]	; (800ac40 <_puts_r+0xb0>)
 800abe4:	429c      	cmp	r4, r3
 800abe6:	d101      	bne.n	800abec <_puts_r+0x5c>
 800abe8:	68ac      	ldr	r4, [r5, #8]
 800abea:	e7e3      	b.n	800abb4 <_puts_r+0x24>
 800abec:	4b15      	ldr	r3, [pc, #84]	; (800ac44 <_puts_r+0xb4>)
 800abee:	429c      	cmp	r4, r3
 800abf0:	bf08      	it	eq
 800abf2:	68ec      	ldreq	r4, [r5, #12]
 800abf4:	e7de      	b.n	800abb4 <_puts_r+0x24>
 800abf6:	4621      	mov	r1, r4
 800abf8:	4628      	mov	r0, r5
 800abfa:	f000 ff63 	bl	800bac4 <__swsetup_r>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d0dd      	beq.n	800abbe <_puts_r+0x2e>
 800ac02:	f04f 30ff 	mov.w	r0, #4294967295
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	da04      	bge.n	800ac16 <_puts_r+0x86>
 800ac0c:	69a2      	ldr	r2, [r4, #24]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	dc06      	bgt.n	800ac20 <_puts_r+0x90>
 800ac12:	290a      	cmp	r1, #10
 800ac14:	d004      	beq.n	800ac20 <_puts_r+0x90>
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	6022      	str	r2, [r4, #0]
 800ac1c:	7019      	strb	r1, [r3, #0]
 800ac1e:	e7cf      	b.n	800abc0 <_puts_r+0x30>
 800ac20:	4622      	mov	r2, r4
 800ac22:	4628      	mov	r0, r5
 800ac24:	f000 feee 	bl	800ba04 <__swbuf_r>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d1c9      	bne.n	800abc0 <_puts_r+0x30>
 800ac2c:	e7e9      	b.n	800ac02 <_puts_r+0x72>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	200a      	movs	r0, #10
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	6022      	str	r2, [r4, #0]
 800ac36:	7018      	strb	r0, [r3, #0]
 800ac38:	e7e5      	b.n	800ac06 <_puts_r+0x76>
 800ac3a:	bf00      	nop
 800ac3c:	0800e8b0 	.word	0x0800e8b0
 800ac40:	0800e8d0 	.word	0x0800e8d0
 800ac44:	0800e890 	.word	0x0800e890

0800ac48 <puts>:
 800ac48:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <puts+0xc>)
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	6818      	ldr	r0, [r3, #0]
 800ac4e:	f7ff bf9f 	b.w	800ab90 <_puts_r>
 800ac52:	bf00      	nop
 800ac54:	20000078 	.word	0x20000078

0800ac58 <nanf>:
 800ac58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac60 <nanf+0x8>
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	7fc00000 	.word	0x7fc00000

0800ac64 <siprintf>:
 800ac64:	b40e      	push	{r1, r2, r3}
 800ac66:	b500      	push	{lr}
 800ac68:	b09c      	sub	sp, #112	; 0x70
 800ac6a:	ab1d      	add	r3, sp, #116	; 0x74
 800ac6c:	9002      	str	r0, [sp, #8]
 800ac6e:	9006      	str	r0, [sp, #24]
 800ac70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac74:	4809      	ldr	r0, [pc, #36]	; (800ac9c <siprintf+0x38>)
 800ac76:	9107      	str	r1, [sp, #28]
 800ac78:	9104      	str	r1, [sp, #16]
 800ac7a:	4909      	ldr	r1, [pc, #36]	; (800aca0 <siprintf+0x3c>)
 800ac7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac80:	9105      	str	r1, [sp, #20]
 800ac82:	6800      	ldr	r0, [r0, #0]
 800ac84:	9301      	str	r3, [sp, #4]
 800ac86:	a902      	add	r1, sp, #8
 800ac88:	f002 fffa 	bl	800dc80 <_svfiprintf_r>
 800ac8c:	9b02      	ldr	r3, [sp, #8]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	701a      	strb	r2, [r3, #0]
 800ac92:	b01c      	add	sp, #112	; 0x70
 800ac94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac98:	b003      	add	sp, #12
 800ac9a:	4770      	bx	lr
 800ac9c:	20000078 	.word	0x20000078
 800aca0:	ffff0208 	.word	0xffff0208

0800aca4 <sulp>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	4604      	mov	r4, r0
 800aca8:	460d      	mov	r5, r1
 800acaa:	ec45 4b10 	vmov	d0, r4, r5
 800acae:	4616      	mov	r6, r2
 800acb0:	f002 fda2 	bl	800d7f8 <__ulp>
 800acb4:	ec51 0b10 	vmov	r0, r1, d0
 800acb8:	b17e      	cbz	r6, 800acda <sulp+0x36>
 800acba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	dd09      	ble.n	800acda <sulp+0x36>
 800acc6:	051b      	lsls	r3, r3, #20
 800acc8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800accc:	2400      	movs	r4, #0
 800acce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800acd2:	4622      	mov	r2, r4
 800acd4:	462b      	mov	r3, r5
 800acd6:	f7f5 fc97 	bl	8000608 <__aeabi_dmul>
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	0000      	movs	r0, r0
	...

0800ace0 <_strtod_l>:
 800ace0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace4:	461f      	mov	r7, r3
 800ace6:	b0a1      	sub	sp, #132	; 0x84
 800ace8:	2300      	movs	r3, #0
 800acea:	4681      	mov	r9, r0
 800acec:	4638      	mov	r0, r7
 800acee:	460e      	mov	r6, r1
 800acf0:	9217      	str	r2, [sp, #92]	; 0x5c
 800acf2:	931c      	str	r3, [sp, #112]	; 0x70
 800acf4:	f002 fa38 	bl	800d168 <__localeconv_l>
 800acf8:	4680      	mov	r8, r0
 800acfa:	6800      	ldr	r0, [r0, #0]
 800acfc:	f7f5 fa70 	bl	80001e0 <strlen>
 800ad00:	f04f 0a00 	mov.w	sl, #0
 800ad04:	4604      	mov	r4, r0
 800ad06:	f04f 0b00 	mov.w	fp, #0
 800ad0a:	961b      	str	r6, [sp, #108]	; 0x6c
 800ad0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad0e:	781a      	ldrb	r2, [r3, #0]
 800ad10:	2a0d      	cmp	r2, #13
 800ad12:	d832      	bhi.n	800ad7a <_strtod_l+0x9a>
 800ad14:	2a09      	cmp	r2, #9
 800ad16:	d236      	bcs.n	800ad86 <_strtod_l+0xa6>
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	d03e      	beq.n	800ad9a <_strtod_l+0xba>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	930d      	str	r3, [sp, #52]	; 0x34
 800ad20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ad22:	782b      	ldrb	r3, [r5, #0]
 800ad24:	2b30      	cmp	r3, #48	; 0x30
 800ad26:	f040 80ac 	bne.w	800ae82 <_strtod_l+0x1a2>
 800ad2a:	786b      	ldrb	r3, [r5, #1]
 800ad2c:	2b58      	cmp	r3, #88	; 0x58
 800ad2e:	d001      	beq.n	800ad34 <_strtod_l+0x54>
 800ad30:	2b78      	cmp	r3, #120	; 0x78
 800ad32:	d167      	bne.n	800ae04 <_strtod_l+0x124>
 800ad34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	ab1c      	add	r3, sp, #112	; 0x70
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	9702      	str	r7, [sp, #8]
 800ad3e:	ab1d      	add	r3, sp, #116	; 0x74
 800ad40:	4a88      	ldr	r2, [pc, #544]	; (800af64 <_strtod_l+0x284>)
 800ad42:	a91b      	add	r1, sp, #108	; 0x6c
 800ad44:	4648      	mov	r0, r9
 800ad46:	f001 ff38 	bl	800cbba <__gethex>
 800ad4a:	f010 0407 	ands.w	r4, r0, #7
 800ad4e:	4606      	mov	r6, r0
 800ad50:	d005      	beq.n	800ad5e <_strtod_l+0x7e>
 800ad52:	2c06      	cmp	r4, #6
 800ad54:	d12b      	bne.n	800adae <_strtod_l+0xce>
 800ad56:	3501      	adds	r5, #1
 800ad58:	2300      	movs	r3, #0
 800ad5a:	951b      	str	r5, [sp, #108]	; 0x6c
 800ad5c:	930d      	str	r3, [sp, #52]	; 0x34
 800ad5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f040 859a 	bne.w	800b89a <_strtod_l+0xbba>
 800ad66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad68:	b1e3      	cbz	r3, 800ada4 <_strtod_l+0xc4>
 800ad6a:	4652      	mov	r2, sl
 800ad6c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad70:	ec43 2b10 	vmov	d0, r2, r3
 800ad74:	b021      	add	sp, #132	; 0x84
 800ad76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7a:	2a2b      	cmp	r2, #43	; 0x2b
 800ad7c:	d015      	beq.n	800adaa <_strtod_l+0xca>
 800ad7e:	2a2d      	cmp	r2, #45	; 0x2d
 800ad80:	d004      	beq.n	800ad8c <_strtod_l+0xac>
 800ad82:	2a20      	cmp	r2, #32
 800ad84:	d1ca      	bne.n	800ad1c <_strtod_l+0x3c>
 800ad86:	3301      	adds	r3, #1
 800ad88:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad8a:	e7bf      	b.n	800ad0c <_strtod_l+0x2c>
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	920d      	str	r2, [sp, #52]	; 0x34
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad94:	785b      	ldrb	r3, [r3, #1]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1c2      	bne.n	800ad20 <_strtod_l+0x40>
 800ad9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad9c:	961b      	str	r6, [sp, #108]	; 0x6c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f040 8579 	bne.w	800b896 <_strtod_l+0xbb6>
 800ada4:	4652      	mov	r2, sl
 800ada6:	465b      	mov	r3, fp
 800ada8:	e7e2      	b.n	800ad70 <_strtod_l+0x90>
 800adaa:	2200      	movs	r2, #0
 800adac:	e7ef      	b.n	800ad8e <_strtod_l+0xae>
 800adae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800adb0:	b13a      	cbz	r2, 800adc2 <_strtod_l+0xe2>
 800adb2:	2135      	movs	r1, #53	; 0x35
 800adb4:	a81e      	add	r0, sp, #120	; 0x78
 800adb6:	f002 fe17 	bl	800d9e8 <__copybits>
 800adba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800adbc:	4648      	mov	r0, r9
 800adbe:	f002 fa83 	bl	800d2c8 <_Bfree>
 800adc2:	3c01      	subs	r4, #1
 800adc4:	2c04      	cmp	r4, #4
 800adc6:	d806      	bhi.n	800add6 <_strtod_l+0xf6>
 800adc8:	e8df f004 	tbb	[pc, r4]
 800adcc:	1714030a 	.word	0x1714030a
 800add0:	0a          	.byte	0x0a
 800add1:	00          	.byte	0x00
 800add2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800add6:	0730      	lsls	r0, r6, #28
 800add8:	d5c1      	bpl.n	800ad5e <_strtod_l+0x7e>
 800adda:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800adde:	e7be      	b.n	800ad5e <_strtod_l+0x7e>
 800ade0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ade4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ade6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800adea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800adee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800adf2:	e7f0      	b.n	800add6 <_strtod_l+0xf6>
 800adf4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800af68 <_strtod_l+0x288>
 800adf8:	e7ed      	b.n	800add6 <_strtod_l+0xf6>
 800adfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800adfe:	f04f 3aff 	mov.w	sl, #4294967295
 800ae02:	e7e8      	b.n	800add6 <_strtod_l+0xf6>
 800ae04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae0a:	785b      	ldrb	r3, [r3, #1]
 800ae0c:	2b30      	cmp	r3, #48	; 0x30
 800ae0e:	d0f9      	beq.n	800ae04 <_strtod_l+0x124>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0a4      	beq.n	800ad5e <_strtod_l+0x7e>
 800ae14:	2301      	movs	r3, #1
 800ae16:	2500      	movs	r5, #0
 800ae18:	9306      	str	r3, [sp, #24]
 800ae1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae1c:	9308      	str	r3, [sp, #32]
 800ae1e:	9507      	str	r5, [sp, #28]
 800ae20:	9505      	str	r5, [sp, #20]
 800ae22:	220a      	movs	r2, #10
 800ae24:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ae26:	7807      	ldrb	r7, [r0, #0]
 800ae28:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ae2c:	b2d9      	uxtb	r1, r3
 800ae2e:	2909      	cmp	r1, #9
 800ae30:	d929      	bls.n	800ae86 <_strtod_l+0x1a6>
 800ae32:	4622      	mov	r2, r4
 800ae34:	f8d8 1000 	ldr.w	r1, [r8]
 800ae38:	f003 f9ad 	bl	800e196 <strncmp>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d031      	beq.n	800aea4 <_strtod_l+0x1c4>
 800ae40:	2000      	movs	r0, #0
 800ae42:	9c05      	ldr	r4, [sp, #20]
 800ae44:	9004      	str	r0, [sp, #16]
 800ae46:	463b      	mov	r3, r7
 800ae48:	4602      	mov	r2, r0
 800ae4a:	2b65      	cmp	r3, #101	; 0x65
 800ae4c:	d001      	beq.n	800ae52 <_strtod_l+0x172>
 800ae4e:	2b45      	cmp	r3, #69	; 0x45
 800ae50:	d114      	bne.n	800ae7c <_strtod_l+0x19c>
 800ae52:	b924      	cbnz	r4, 800ae5e <_strtod_l+0x17e>
 800ae54:	b910      	cbnz	r0, 800ae5c <_strtod_l+0x17c>
 800ae56:	9b06      	ldr	r3, [sp, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d09e      	beq.n	800ad9a <_strtod_l+0xba>
 800ae5c:	2400      	movs	r4, #0
 800ae5e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ae60:	1c73      	adds	r3, r6, #1
 800ae62:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae64:	7873      	ldrb	r3, [r6, #1]
 800ae66:	2b2b      	cmp	r3, #43	; 0x2b
 800ae68:	d078      	beq.n	800af5c <_strtod_l+0x27c>
 800ae6a:	2b2d      	cmp	r3, #45	; 0x2d
 800ae6c:	d070      	beq.n	800af50 <_strtod_l+0x270>
 800ae6e:	f04f 0c00 	mov.w	ip, #0
 800ae72:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800ae76:	2f09      	cmp	r7, #9
 800ae78:	d97c      	bls.n	800af74 <_strtod_l+0x294>
 800ae7a:	961b      	str	r6, [sp, #108]	; 0x6c
 800ae7c:	f04f 0e00 	mov.w	lr, #0
 800ae80:	e09a      	b.n	800afb8 <_strtod_l+0x2d8>
 800ae82:	2300      	movs	r3, #0
 800ae84:	e7c7      	b.n	800ae16 <_strtod_l+0x136>
 800ae86:	9905      	ldr	r1, [sp, #20]
 800ae88:	2908      	cmp	r1, #8
 800ae8a:	bfdd      	ittte	le
 800ae8c:	9907      	ldrle	r1, [sp, #28]
 800ae8e:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae92:	9307      	strle	r3, [sp, #28]
 800ae94:	fb02 3505 	mlagt	r5, r2, r5, r3
 800ae98:	9b05      	ldr	r3, [sp, #20]
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	9305      	str	r3, [sp, #20]
 800aea0:	901b      	str	r0, [sp, #108]	; 0x6c
 800aea2:	e7bf      	b.n	800ae24 <_strtod_l+0x144>
 800aea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aea6:	191a      	adds	r2, r3, r4
 800aea8:	921b      	str	r2, [sp, #108]	; 0x6c
 800aeaa:	9a05      	ldr	r2, [sp, #20]
 800aeac:	5d1b      	ldrb	r3, [r3, r4]
 800aeae:	2a00      	cmp	r2, #0
 800aeb0:	d037      	beq.n	800af22 <_strtod_l+0x242>
 800aeb2:	9c05      	ldr	r4, [sp, #20]
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aeba:	2909      	cmp	r1, #9
 800aebc:	d913      	bls.n	800aee6 <_strtod_l+0x206>
 800aebe:	2101      	movs	r1, #1
 800aec0:	9104      	str	r1, [sp, #16]
 800aec2:	e7c2      	b.n	800ae4a <_strtod_l+0x16a>
 800aec4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aec6:	1c5a      	adds	r2, r3, #1
 800aec8:	921b      	str	r2, [sp, #108]	; 0x6c
 800aeca:	785b      	ldrb	r3, [r3, #1]
 800aecc:	3001      	adds	r0, #1
 800aece:	2b30      	cmp	r3, #48	; 0x30
 800aed0:	d0f8      	beq.n	800aec4 <_strtod_l+0x1e4>
 800aed2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800aed6:	2a08      	cmp	r2, #8
 800aed8:	f200 84e4 	bhi.w	800b8a4 <_strtod_l+0xbc4>
 800aedc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aede:	9208      	str	r2, [sp, #32]
 800aee0:	4602      	mov	r2, r0
 800aee2:	2000      	movs	r0, #0
 800aee4:	4604      	mov	r4, r0
 800aee6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800aeea:	f100 0101 	add.w	r1, r0, #1
 800aeee:	d012      	beq.n	800af16 <_strtod_l+0x236>
 800aef0:	440a      	add	r2, r1
 800aef2:	eb00 0c04 	add.w	ip, r0, r4
 800aef6:	4621      	mov	r1, r4
 800aef8:	270a      	movs	r7, #10
 800aefa:	458c      	cmp	ip, r1
 800aefc:	d113      	bne.n	800af26 <_strtod_l+0x246>
 800aefe:	1821      	adds	r1, r4, r0
 800af00:	2908      	cmp	r1, #8
 800af02:	f104 0401 	add.w	r4, r4, #1
 800af06:	4404      	add	r4, r0
 800af08:	dc19      	bgt.n	800af3e <_strtod_l+0x25e>
 800af0a:	9b07      	ldr	r3, [sp, #28]
 800af0c:	210a      	movs	r1, #10
 800af0e:	fb01 e303 	mla	r3, r1, r3, lr
 800af12:	9307      	str	r3, [sp, #28]
 800af14:	2100      	movs	r1, #0
 800af16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af18:	1c58      	adds	r0, r3, #1
 800af1a:	901b      	str	r0, [sp, #108]	; 0x6c
 800af1c:	785b      	ldrb	r3, [r3, #1]
 800af1e:	4608      	mov	r0, r1
 800af20:	e7c9      	b.n	800aeb6 <_strtod_l+0x1d6>
 800af22:	9805      	ldr	r0, [sp, #20]
 800af24:	e7d3      	b.n	800aece <_strtod_l+0x1ee>
 800af26:	2908      	cmp	r1, #8
 800af28:	f101 0101 	add.w	r1, r1, #1
 800af2c:	dc03      	bgt.n	800af36 <_strtod_l+0x256>
 800af2e:	9b07      	ldr	r3, [sp, #28]
 800af30:	437b      	muls	r3, r7
 800af32:	9307      	str	r3, [sp, #28]
 800af34:	e7e1      	b.n	800aefa <_strtod_l+0x21a>
 800af36:	2910      	cmp	r1, #16
 800af38:	bfd8      	it	le
 800af3a:	437d      	mulle	r5, r7
 800af3c:	e7dd      	b.n	800aefa <_strtod_l+0x21a>
 800af3e:	2c10      	cmp	r4, #16
 800af40:	bfdc      	itt	le
 800af42:	210a      	movle	r1, #10
 800af44:	fb01 e505 	mlale	r5, r1, r5, lr
 800af48:	e7e4      	b.n	800af14 <_strtod_l+0x234>
 800af4a:	2301      	movs	r3, #1
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	e781      	b.n	800ae54 <_strtod_l+0x174>
 800af50:	f04f 0c01 	mov.w	ip, #1
 800af54:	1cb3      	adds	r3, r6, #2
 800af56:	931b      	str	r3, [sp, #108]	; 0x6c
 800af58:	78b3      	ldrb	r3, [r6, #2]
 800af5a:	e78a      	b.n	800ae72 <_strtod_l+0x192>
 800af5c:	f04f 0c00 	mov.w	ip, #0
 800af60:	e7f8      	b.n	800af54 <_strtod_l+0x274>
 800af62:	bf00      	nop
 800af64:	0800e72c 	.word	0x0800e72c
 800af68:	7ff00000 	.word	0x7ff00000
 800af6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af6e:	1c5f      	adds	r7, r3, #1
 800af70:	971b      	str	r7, [sp, #108]	; 0x6c
 800af72:	785b      	ldrb	r3, [r3, #1]
 800af74:	2b30      	cmp	r3, #48	; 0x30
 800af76:	d0f9      	beq.n	800af6c <_strtod_l+0x28c>
 800af78:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800af7c:	2f08      	cmp	r7, #8
 800af7e:	f63f af7d 	bhi.w	800ae7c <_strtod_l+0x19c>
 800af82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800af86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af88:	930a      	str	r3, [sp, #40]	; 0x28
 800af8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af8c:	1c5f      	adds	r7, r3, #1
 800af8e:	971b      	str	r7, [sp, #108]	; 0x6c
 800af90:	785b      	ldrb	r3, [r3, #1]
 800af92:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800af96:	f1b8 0f09 	cmp.w	r8, #9
 800af9a:	d937      	bls.n	800b00c <_strtod_l+0x32c>
 800af9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af9e:	1a7f      	subs	r7, r7, r1
 800afa0:	2f08      	cmp	r7, #8
 800afa2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800afa6:	dc37      	bgt.n	800b018 <_strtod_l+0x338>
 800afa8:	45be      	cmp	lr, r7
 800afaa:	bfa8      	it	ge
 800afac:	46be      	movge	lr, r7
 800afae:	f1bc 0f00 	cmp.w	ip, #0
 800afb2:	d001      	beq.n	800afb8 <_strtod_l+0x2d8>
 800afb4:	f1ce 0e00 	rsb	lr, lr, #0
 800afb8:	2c00      	cmp	r4, #0
 800afba:	d151      	bne.n	800b060 <_strtod_l+0x380>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f47f aece 	bne.w	800ad5e <_strtod_l+0x7e>
 800afc2:	9a06      	ldr	r2, [sp, #24]
 800afc4:	2a00      	cmp	r2, #0
 800afc6:	f47f aeca 	bne.w	800ad5e <_strtod_l+0x7e>
 800afca:	9a04      	ldr	r2, [sp, #16]
 800afcc:	2a00      	cmp	r2, #0
 800afce:	f47f aee4 	bne.w	800ad9a <_strtod_l+0xba>
 800afd2:	2b4e      	cmp	r3, #78	; 0x4e
 800afd4:	d027      	beq.n	800b026 <_strtod_l+0x346>
 800afd6:	dc21      	bgt.n	800b01c <_strtod_l+0x33c>
 800afd8:	2b49      	cmp	r3, #73	; 0x49
 800afda:	f47f aede 	bne.w	800ad9a <_strtod_l+0xba>
 800afde:	49a0      	ldr	r1, [pc, #640]	; (800b260 <_strtod_l+0x580>)
 800afe0:	a81b      	add	r0, sp, #108	; 0x6c
 800afe2:	f002 f81d 	bl	800d020 <__match>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f43f aed7 	beq.w	800ad9a <_strtod_l+0xba>
 800afec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afee:	499d      	ldr	r1, [pc, #628]	; (800b264 <_strtod_l+0x584>)
 800aff0:	3b01      	subs	r3, #1
 800aff2:	a81b      	add	r0, sp, #108	; 0x6c
 800aff4:	931b      	str	r3, [sp, #108]	; 0x6c
 800aff6:	f002 f813 	bl	800d020 <__match>
 800affa:	b910      	cbnz	r0, 800b002 <_strtod_l+0x322>
 800affc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800affe:	3301      	adds	r3, #1
 800b000:	931b      	str	r3, [sp, #108]	; 0x6c
 800b002:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b278 <_strtod_l+0x598>
 800b006:	f04f 0a00 	mov.w	sl, #0
 800b00a:	e6a8      	b.n	800ad5e <_strtod_l+0x7e>
 800b00c:	210a      	movs	r1, #10
 800b00e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b012:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b016:	e7b8      	b.n	800af8a <_strtod_l+0x2aa>
 800b018:	46be      	mov	lr, r7
 800b01a:	e7c8      	b.n	800afae <_strtod_l+0x2ce>
 800b01c:	2b69      	cmp	r3, #105	; 0x69
 800b01e:	d0de      	beq.n	800afde <_strtod_l+0x2fe>
 800b020:	2b6e      	cmp	r3, #110	; 0x6e
 800b022:	f47f aeba 	bne.w	800ad9a <_strtod_l+0xba>
 800b026:	4990      	ldr	r1, [pc, #576]	; (800b268 <_strtod_l+0x588>)
 800b028:	a81b      	add	r0, sp, #108	; 0x6c
 800b02a:	f001 fff9 	bl	800d020 <__match>
 800b02e:	2800      	cmp	r0, #0
 800b030:	f43f aeb3 	beq.w	800ad9a <_strtod_l+0xba>
 800b034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b28      	cmp	r3, #40	; 0x28
 800b03a:	d10e      	bne.n	800b05a <_strtod_l+0x37a>
 800b03c:	aa1e      	add	r2, sp, #120	; 0x78
 800b03e:	498b      	ldr	r1, [pc, #556]	; (800b26c <_strtod_l+0x58c>)
 800b040:	a81b      	add	r0, sp, #108	; 0x6c
 800b042:	f002 f801 	bl	800d048 <__hexnan>
 800b046:	2805      	cmp	r0, #5
 800b048:	d107      	bne.n	800b05a <_strtod_l+0x37a>
 800b04a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b04c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b050:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b054:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b058:	e681      	b.n	800ad5e <_strtod_l+0x7e>
 800b05a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b280 <_strtod_l+0x5a0>
 800b05e:	e7d2      	b.n	800b006 <_strtod_l+0x326>
 800b060:	ebae 0302 	sub.w	r3, lr, r2
 800b064:	9306      	str	r3, [sp, #24]
 800b066:	9b05      	ldr	r3, [sp, #20]
 800b068:	9807      	ldr	r0, [sp, #28]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	bf08      	it	eq
 800b06e:	4623      	moveq	r3, r4
 800b070:	2c10      	cmp	r4, #16
 800b072:	9305      	str	r3, [sp, #20]
 800b074:	46a0      	mov	r8, r4
 800b076:	bfa8      	it	ge
 800b078:	f04f 0810 	movge.w	r8, #16
 800b07c:	f7f5 fa4a 	bl	8000514 <__aeabi_ui2d>
 800b080:	2c09      	cmp	r4, #9
 800b082:	4682      	mov	sl, r0
 800b084:	468b      	mov	fp, r1
 800b086:	dc13      	bgt.n	800b0b0 <_strtod_l+0x3d0>
 800b088:	9b06      	ldr	r3, [sp, #24]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f43f ae67 	beq.w	800ad5e <_strtod_l+0x7e>
 800b090:	9b06      	ldr	r3, [sp, #24]
 800b092:	dd7a      	ble.n	800b18a <_strtod_l+0x4aa>
 800b094:	2b16      	cmp	r3, #22
 800b096:	dc61      	bgt.n	800b15c <_strtod_l+0x47c>
 800b098:	4a75      	ldr	r2, [pc, #468]	; (800b270 <_strtod_l+0x590>)
 800b09a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b09e:	e9de 0100 	ldrd	r0, r1, [lr]
 800b0a2:	4652      	mov	r2, sl
 800b0a4:	465b      	mov	r3, fp
 800b0a6:	f7f5 faaf 	bl	8000608 <__aeabi_dmul>
 800b0aa:	4682      	mov	sl, r0
 800b0ac:	468b      	mov	fp, r1
 800b0ae:	e656      	b.n	800ad5e <_strtod_l+0x7e>
 800b0b0:	4b6f      	ldr	r3, [pc, #444]	; (800b270 <_strtod_l+0x590>)
 800b0b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b0b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b0ba:	f7f5 faa5 	bl	8000608 <__aeabi_dmul>
 800b0be:	4606      	mov	r6, r0
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	460f      	mov	r7, r1
 800b0c4:	f7f5 fa26 	bl	8000514 <__aeabi_ui2d>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	4639      	mov	r1, r7
 800b0d0:	f7f5 f8e4 	bl	800029c <__adddf3>
 800b0d4:	2c0f      	cmp	r4, #15
 800b0d6:	4682      	mov	sl, r0
 800b0d8:	468b      	mov	fp, r1
 800b0da:	ddd5      	ble.n	800b088 <_strtod_l+0x3a8>
 800b0dc:	9b06      	ldr	r3, [sp, #24]
 800b0de:	eba4 0808 	sub.w	r8, r4, r8
 800b0e2:	4498      	add	r8, r3
 800b0e4:	f1b8 0f00 	cmp.w	r8, #0
 800b0e8:	f340 8096 	ble.w	800b218 <_strtod_l+0x538>
 800b0ec:	f018 030f 	ands.w	r3, r8, #15
 800b0f0:	d00a      	beq.n	800b108 <_strtod_l+0x428>
 800b0f2:	495f      	ldr	r1, [pc, #380]	; (800b270 <_strtod_l+0x590>)
 800b0f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0f8:	4652      	mov	r2, sl
 800b0fa:	465b      	mov	r3, fp
 800b0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b100:	f7f5 fa82 	bl	8000608 <__aeabi_dmul>
 800b104:	4682      	mov	sl, r0
 800b106:	468b      	mov	fp, r1
 800b108:	f038 080f 	bics.w	r8, r8, #15
 800b10c:	d073      	beq.n	800b1f6 <_strtod_l+0x516>
 800b10e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b112:	dd47      	ble.n	800b1a4 <_strtod_l+0x4c4>
 800b114:	2400      	movs	r4, #0
 800b116:	46a0      	mov	r8, r4
 800b118:	9407      	str	r4, [sp, #28]
 800b11a:	9405      	str	r4, [sp, #20]
 800b11c:	2322      	movs	r3, #34	; 0x22
 800b11e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b278 <_strtod_l+0x598>
 800b122:	f8c9 3000 	str.w	r3, [r9]
 800b126:	f04f 0a00 	mov.w	sl, #0
 800b12a:	9b07      	ldr	r3, [sp, #28]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f43f ae16 	beq.w	800ad5e <_strtod_l+0x7e>
 800b132:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b134:	4648      	mov	r0, r9
 800b136:	f002 f8c7 	bl	800d2c8 <_Bfree>
 800b13a:	9905      	ldr	r1, [sp, #20]
 800b13c:	4648      	mov	r0, r9
 800b13e:	f002 f8c3 	bl	800d2c8 <_Bfree>
 800b142:	4641      	mov	r1, r8
 800b144:	4648      	mov	r0, r9
 800b146:	f002 f8bf 	bl	800d2c8 <_Bfree>
 800b14a:	9907      	ldr	r1, [sp, #28]
 800b14c:	4648      	mov	r0, r9
 800b14e:	f002 f8bb 	bl	800d2c8 <_Bfree>
 800b152:	4621      	mov	r1, r4
 800b154:	4648      	mov	r0, r9
 800b156:	f002 f8b7 	bl	800d2c8 <_Bfree>
 800b15a:	e600      	b.n	800ad5e <_strtod_l+0x7e>
 800b15c:	9a06      	ldr	r2, [sp, #24]
 800b15e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b162:	4293      	cmp	r3, r2
 800b164:	dbba      	blt.n	800b0dc <_strtod_l+0x3fc>
 800b166:	4d42      	ldr	r5, [pc, #264]	; (800b270 <_strtod_l+0x590>)
 800b168:	f1c4 040f 	rsb	r4, r4, #15
 800b16c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b170:	4652      	mov	r2, sl
 800b172:	465b      	mov	r3, fp
 800b174:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b178:	f7f5 fa46 	bl	8000608 <__aeabi_dmul>
 800b17c:	9b06      	ldr	r3, [sp, #24]
 800b17e:	1b1c      	subs	r4, r3, r4
 800b180:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b184:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b188:	e78d      	b.n	800b0a6 <_strtod_l+0x3c6>
 800b18a:	f113 0f16 	cmn.w	r3, #22
 800b18e:	dba5      	blt.n	800b0dc <_strtod_l+0x3fc>
 800b190:	4a37      	ldr	r2, [pc, #220]	; (800b270 <_strtod_l+0x590>)
 800b192:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b196:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b19a:	4650      	mov	r0, sl
 800b19c:	4659      	mov	r1, fp
 800b19e:	f7f5 fb5d 	bl	800085c <__aeabi_ddiv>
 800b1a2:	e782      	b.n	800b0aa <_strtod_l+0x3ca>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	4e33      	ldr	r6, [pc, #204]	; (800b274 <_strtod_l+0x594>)
 800b1a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b1ac:	4650      	mov	r0, sl
 800b1ae:	4659      	mov	r1, fp
 800b1b0:	461d      	mov	r5, r3
 800b1b2:	f1b8 0f01 	cmp.w	r8, #1
 800b1b6:	dc21      	bgt.n	800b1fc <_strtod_l+0x51c>
 800b1b8:	b10b      	cbz	r3, 800b1be <_strtod_l+0x4de>
 800b1ba:	4682      	mov	sl, r0
 800b1bc:	468b      	mov	fp, r1
 800b1be:	4b2d      	ldr	r3, [pc, #180]	; (800b274 <_strtod_l+0x594>)
 800b1c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b1c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b1c8:	4652      	mov	r2, sl
 800b1ca:	465b      	mov	r3, fp
 800b1cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b1d0:	f7f5 fa1a 	bl	8000608 <__aeabi_dmul>
 800b1d4:	4b28      	ldr	r3, [pc, #160]	; (800b278 <_strtod_l+0x598>)
 800b1d6:	460a      	mov	r2, r1
 800b1d8:	400b      	ands	r3, r1
 800b1da:	4928      	ldr	r1, [pc, #160]	; (800b27c <_strtod_l+0x59c>)
 800b1dc:	428b      	cmp	r3, r1
 800b1de:	4682      	mov	sl, r0
 800b1e0:	d898      	bhi.n	800b114 <_strtod_l+0x434>
 800b1e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b1e6:	428b      	cmp	r3, r1
 800b1e8:	bf86      	itte	hi
 800b1ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b284 <_strtod_l+0x5a4>
 800b1ee:	f04f 3aff 	movhi.w	sl, #4294967295
 800b1f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9304      	str	r3, [sp, #16]
 800b1fa:	e077      	b.n	800b2ec <_strtod_l+0x60c>
 800b1fc:	f018 0f01 	tst.w	r8, #1
 800b200:	d006      	beq.n	800b210 <_strtod_l+0x530>
 800b202:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	f7f5 f9fd 	bl	8000608 <__aeabi_dmul>
 800b20e:	2301      	movs	r3, #1
 800b210:	3501      	adds	r5, #1
 800b212:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b216:	e7cc      	b.n	800b1b2 <_strtod_l+0x4d2>
 800b218:	d0ed      	beq.n	800b1f6 <_strtod_l+0x516>
 800b21a:	f1c8 0800 	rsb	r8, r8, #0
 800b21e:	f018 020f 	ands.w	r2, r8, #15
 800b222:	d00a      	beq.n	800b23a <_strtod_l+0x55a>
 800b224:	4b12      	ldr	r3, [pc, #72]	; (800b270 <_strtod_l+0x590>)
 800b226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b22a:	4650      	mov	r0, sl
 800b22c:	4659      	mov	r1, fp
 800b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b232:	f7f5 fb13 	bl	800085c <__aeabi_ddiv>
 800b236:	4682      	mov	sl, r0
 800b238:	468b      	mov	fp, r1
 800b23a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b23e:	d0da      	beq.n	800b1f6 <_strtod_l+0x516>
 800b240:	f1b8 0f1f 	cmp.w	r8, #31
 800b244:	dd20      	ble.n	800b288 <_strtod_l+0x5a8>
 800b246:	2400      	movs	r4, #0
 800b248:	46a0      	mov	r8, r4
 800b24a:	9407      	str	r4, [sp, #28]
 800b24c:	9405      	str	r4, [sp, #20]
 800b24e:	2322      	movs	r3, #34	; 0x22
 800b250:	f04f 0a00 	mov.w	sl, #0
 800b254:	f04f 0b00 	mov.w	fp, #0
 800b258:	f8c9 3000 	str.w	r3, [r9]
 800b25c:	e765      	b.n	800b12a <_strtod_l+0x44a>
 800b25e:	bf00      	nop
 800b260:	0800e684 	.word	0x0800e684
 800b264:	0800e884 	.word	0x0800e884
 800b268:	0800e6ff 	.word	0x0800e6ff
 800b26c:	0800e740 	.word	0x0800e740
 800b270:	0800e918 	.word	0x0800e918
 800b274:	0800e8f0 	.word	0x0800e8f0
 800b278:	7ff00000 	.word	0x7ff00000
 800b27c:	7ca00000 	.word	0x7ca00000
 800b280:	fff80000 	.word	0xfff80000
 800b284:	7fefffff 	.word	0x7fefffff
 800b288:	f018 0310 	ands.w	r3, r8, #16
 800b28c:	bf18      	it	ne
 800b28e:	236a      	movne	r3, #106	; 0x6a
 800b290:	4da0      	ldr	r5, [pc, #640]	; (800b514 <_strtod_l+0x834>)
 800b292:	9304      	str	r3, [sp, #16]
 800b294:	4650      	mov	r0, sl
 800b296:	4659      	mov	r1, fp
 800b298:	2300      	movs	r3, #0
 800b29a:	f1b8 0f00 	cmp.w	r8, #0
 800b29e:	f300 810a 	bgt.w	800b4b6 <_strtod_l+0x7d6>
 800b2a2:	b10b      	cbz	r3, 800b2a8 <_strtod_l+0x5c8>
 800b2a4:	4682      	mov	sl, r0
 800b2a6:	468b      	mov	fp, r1
 800b2a8:	9b04      	ldr	r3, [sp, #16]
 800b2aa:	b1bb      	cbz	r3, 800b2dc <_strtod_l+0x5fc>
 800b2ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b2b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	4659      	mov	r1, fp
 800b2b8:	dd10      	ble.n	800b2dc <_strtod_l+0x5fc>
 800b2ba:	2b1f      	cmp	r3, #31
 800b2bc:	f340 8107 	ble.w	800b4ce <_strtod_l+0x7ee>
 800b2c0:	2b34      	cmp	r3, #52	; 0x34
 800b2c2:	bfde      	ittt	le
 800b2c4:	3b20      	suble	r3, #32
 800b2c6:	f04f 32ff 	movle.w	r2, #4294967295
 800b2ca:	fa02 f303 	lslle.w	r3, r2, r3
 800b2ce:	f04f 0a00 	mov.w	sl, #0
 800b2d2:	bfcc      	ite	gt
 800b2d4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b2d8:	ea03 0b01 	andle.w	fp, r3, r1
 800b2dc:	2200      	movs	r2, #0
 800b2de:	2300      	movs	r3, #0
 800b2e0:	4650      	mov	r0, sl
 800b2e2:	4659      	mov	r1, fp
 800b2e4:	f7f5 fbf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d1ac      	bne.n	800b246 <_strtod_l+0x566>
 800b2ec:	9b07      	ldr	r3, [sp, #28]
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	9a05      	ldr	r2, [sp, #20]
 800b2f2:	9908      	ldr	r1, [sp, #32]
 800b2f4:	4623      	mov	r3, r4
 800b2f6:	4648      	mov	r0, r9
 800b2f8:	f002 f838 	bl	800d36c <__s2b>
 800b2fc:	9007      	str	r0, [sp, #28]
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f43f af08 	beq.w	800b114 <_strtod_l+0x434>
 800b304:	9a06      	ldr	r2, [sp, #24]
 800b306:	9b06      	ldr	r3, [sp, #24]
 800b308:	2a00      	cmp	r2, #0
 800b30a:	f1c3 0300 	rsb	r3, r3, #0
 800b30e:	bfa8      	it	ge
 800b310:	2300      	movge	r3, #0
 800b312:	930e      	str	r3, [sp, #56]	; 0x38
 800b314:	2400      	movs	r4, #0
 800b316:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b31a:	9316      	str	r3, [sp, #88]	; 0x58
 800b31c:	46a0      	mov	r8, r4
 800b31e:	9b07      	ldr	r3, [sp, #28]
 800b320:	4648      	mov	r0, r9
 800b322:	6859      	ldr	r1, [r3, #4]
 800b324:	f001 ff9c 	bl	800d260 <_Balloc>
 800b328:	9005      	str	r0, [sp, #20]
 800b32a:	2800      	cmp	r0, #0
 800b32c:	f43f aef6 	beq.w	800b11c <_strtod_l+0x43c>
 800b330:	9b07      	ldr	r3, [sp, #28]
 800b332:	691a      	ldr	r2, [r3, #16]
 800b334:	3202      	adds	r2, #2
 800b336:	f103 010c 	add.w	r1, r3, #12
 800b33a:	0092      	lsls	r2, r2, #2
 800b33c:	300c      	adds	r0, #12
 800b33e:	f7fe fdbe 	bl	8009ebe <memcpy>
 800b342:	aa1e      	add	r2, sp, #120	; 0x78
 800b344:	a91d      	add	r1, sp, #116	; 0x74
 800b346:	ec4b ab10 	vmov	d0, sl, fp
 800b34a:	4648      	mov	r0, r9
 800b34c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b350:	f002 fac8 	bl	800d8e4 <__d2b>
 800b354:	901c      	str	r0, [sp, #112]	; 0x70
 800b356:	2800      	cmp	r0, #0
 800b358:	f43f aee0 	beq.w	800b11c <_strtod_l+0x43c>
 800b35c:	2101      	movs	r1, #1
 800b35e:	4648      	mov	r0, r9
 800b360:	f002 f890 	bl	800d484 <__i2b>
 800b364:	4680      	mov	r8, r0
 800b366:	2800      	cmp	r0, #0
 800b368:	f43f aed8 	beq.w	800b11c <_strtod_l+0x43c>
 800b36c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b36e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b370:	2e00      	cmp	r6, #0
 800b372:	bfab      	itete	ge
 800b374:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b376:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b378:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b37a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b37c:	bfac      	ite	ge
 800b37e:	18f7      	addge	r7, r6, r3
 800b380:	1b9d      	sublt	r5, r3, r6
 800b382:	9b04      	ldr	r3, [sp, #16]
 800b384:	1af6      	subs	r6, r6, r3
 800b386:	4416      	add	r6, r2
 800b388:	4b63      	ldr	r3, [pc, #396]	; (800b518 <_strtod_l+0x838>)
 800b38a:	3e01      	subs	r6, #1
 800b38c:	429e      	cmp	r6, r3
 800b38e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b392:	f280 80af 	bge.w	800b4f4 <_strtod_l+0x814>
 800b396:	1b9b      	subs	r3, r3, r6
 800b398:	2b1f      	cmp	r3, #31
 800b39a:	eba2 0203 	sub.w	r2, r2, r3
 800b39e:	f04f 0101 	mov.w	r1, #1
 800b3a2:	f300 809b 	bgt.w	800b4dc <_strtod_l+0x7fc>
 800b3a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b3b0:	18be      	adds	r6, r7, r2
 800b3b2:	9b04      	ldr	r3, [sp, #16]
 800b3b4:	42b7      	cmp	r7, r6
 800b3b6:	4415      	add	r5, r2
 800b3b8:	441d      	add	r5, r3
 800b3ba:	463b      	mov	r3, r7
 800b3bc:	bfa8      	it	ge
 800b3be:	4633      	movge	r3, r6
 800b3c0:	42ab      	cmp	r3, r5
 800b3c2:	bfa8      	it	ge
 800b3c4:	462b      	movge	r3, r5
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	bfc2      	ittt	gt
 800b3ca:	1af6      	subgt	r6, r6, r3
 800b3cc:	1aed      	subgt	r5, r5, r3
 800b3ce:	1aff      	subgt	r7, r7, r3
 800b3d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3d2:	b1bb      	cbz	r3, 800b404 <_strtod_l+0x724>
 800b3d4:	4641      	mov	r1, r8
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	4648      	mov	r0, r9
 800b3da:	f002 f8f3 	bl	800d5c4 <__pow5mult>
 800b3de:	4680      	mov	r8, r0
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	f43f ae9b 	beq.w	800b11c <_strtod_l+0x43c>
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b3ea:	4648      	mov	r0, r9
 800b3ec:	f002 f853 	bl	800d496 <__multiply>
 800b3f0:	900c      	str	r0, [sp, #48]	; 0x30
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	f43f ae92 	beq.w	800b11c <_strtod_l+0x43c>
 800b3f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b3fa:	4648      	mov	r0, r9
 800b3fc:	f001 ff64 	bl	800d2c8 <_Bfree>
 800b400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b402:	931c      	str	r3, [sp, #112]	; 0x70
 800b404:	2e00      	cmp	r6, #0
 800b406:	dc7a      	bgt.n	800b4fe <_strtod_l+0x81e>
 800b408:	9b06      	ldr	r3, [sp, #24]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	dd08      	ble.n	800b420 <_strtod_l+0x740>
 800b40e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b410:	9905      	ldr	r1, [sp, #20]
 800b412:	4648      	mov	r0, r9
 800b414:	f002 f8d6 	bl	800d5c4 <__pow5mult>
 800b418:	9005      	str	r0, [sp, #20]
 800b41a:	2800      	cmp	r0, #0
 800b41c:	f43f ae7e 	beq.w	800b11c <_strtod_l+0x43c>
 800b420:	2d00      	cmp	r5, #0
 800b422:	dd08      	ble.n	800b436 <_strtod_l+0x756>
 800b424:	462a      	mov	r2, r5
 800b426:	9905      	ldr	r1, [sp, #20]
 800b428:	4648      	mov	r0, r9
 800b42a:	f002 f919 	bl	800d660 <__lshift>
 800b42e:	9005      	str	r0, [sp, #20]
 800b430:	2800      	cmp	r0, #0
 800b432:	f43f ae73 	beq.w	800b11c <_strtod_l+0x43c>
 800b436:	2f00      	cmp	r7, #0
 800b438:	dd08      	ble.n	800b44c <_strtod_l+0x76c>
 800b43a:	4641      	mov	r1, r8
 800b43c:	463a      	mov	r2, r7
 800b43e:	4648      	mov	r0, r9
 800b440:	f002 f90e 	bl	800d660 <__lshift>
 800b444:	4680      	mov	r8, r0
 800b446:	2800      	cmp	r0, #0
 800b448:	f43f ae68 	beq.w	800b11c <_strtod_l+0x43c>
 800b44c:	9a05      	ldr	r2, [sp, #20]
 800b44e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b450:	4648      	mov	r0, r9
 800b452:	f002 f973 	bl	800d73c <__mdiff>
 800b456:	4604      	mov	r4, r0
 800b458:	2800      	cmp	r0, #0
 800b45a:	f43f ae5f 	beq.w	800b11c <_strtod_l+0x43c>
 800b45e:	68c3      	ldr	r3, [r0, #12]
 800b460:	930c      	str	r3, [sp, #48]	; 0x30
 800b462:	2300      	movs	r3, #0
 800b464:	60c3      	str	r3, [r0, #12]
 800b466:	4641      	mov	r1, r8
 800b468:	f002 f94e 	bl	800d708 <__mcmp>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	da55      	bge.n	800b51c <_strtod_l+0x83c>
 800b470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b472:	b9e3      	cbnz	r3, 800b4ae <_strtod_l+0x7ce>
 800b474:	f1ba 0f00 	cmp.w	sl, #0
 800b478:	d119      	bne.n	800b4ae <_strtod_l+0x7ce>
 800b47a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b47e:	b9b3      	cbnz	r3, 800b4ae <_strtod_l+0x7ce>
 800b480:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b484:	0d1b      	lsrs	r3, r3, #20
 800b486:	051b      	lsls	r3, r3, #20
 800b488:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b48c:	d90f      	bls.n	800b4ae <_strtod_l+0x7ce>
 800b48e:	6963      	ldr	r3, [r4, #20]
 800b490:	b913      	cbnz	r3, 800b498 <_strtod_l+0x7b8>
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	2b01      	cmp	r3, #1
 800b496:	dd0a      	ble.n	800b4ae <_strtod_l+0x7ce>
 800b498:	4621      	mov	r1, r4
 800b49a:	2201      	movs	r2, #1
 800b49c:	4648      	mov	r0, r9
 800b49e:	f002 f8df 	bl	800d660 <__lshift>
 800b4a2:	4641      	mov	r1, r8
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	f002 f92f 	bl	800d708 <__mcmp>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	dc67      	bgt.n	800b57e <_strtod_l+0x89e>
 800b4ae:	9b04      	ldr	r3, [sp, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d171      	bne.n	800b598 <_strtod_l+0x8b8>
 800b4b4:	e63d      	b.n	800b132 <_strtod_l+0x452>
 800b4b6:	f018 0f01 	tst.w	r8, #1
 800b4ba:	d004      	beq.n	800b4c6 <_strtod_l+0x7e6>
 800b4bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4c0:	f7f5 f8a2 	bl	8000608 <__aeabi_dmul>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b4ca:	3508      	adds	r5, #8
 800b4cc:	e6e5      	b.n	800b29a <_strtod_l+0x5ba>
 800b4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d6:	ea03 0a0a 	and.w	sl, r3, sl
 800b4da:	e6ff      	b.n	800b2dc <_strtod_l+0x5fc>
 800b4dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b4e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b4e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b4e8:	36e2      	adds	r6, #226	; 0xe2
 800b4ea:	fa01 f306 	lsl.w	r3, r1, r6
 800b4ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f0:	910f      	str	r1, [sp, #60]	; 0x3c
 800b4f2:	e75d      	b.n	800b3b0 <_strtod_l+0x6d0>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4fc:	e758      	b.n	800b3b0 <_strtod_l+0x6d0>
 800b4fe:	4632      	mov	r2, r6
 800b500:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b502:	4648      	mov	r0, r9
 800b504:	f002 f8ac 	bl	800d660 <__lshift>
 800b508:	901c      	str	r0, [sp, #112]	; 0x70
 800b50a:	2800      	cmp	r0, #0
 800b50c:	f47f af7c 	bne.w	800b408 <_strtod_l+0x728>
 800b510:	e604      	b.n	800b11c <_strtod_l+0x43c>
 800b512:	bf00      	nop
 800b514:	0800e758 	.word	0x0800e758
 800b518:	fffffc02 	.word	0xfffffc02
 800b51c:	465d      	mov	r5, fp
 800b51e:	f040 8086 	bne.w	800b62e <_strtod_l+0x94e>
 800b522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b528:	b32a      	cbz	r2, 800b576 <_strtod_l+0x896>
 800b52a:	4aaf      	ldr	r2, [pc, #700]	; (800b7e8 <_strtod_l+0xb08>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d153      	bne.n	800b5d8 <_strtod_l+0x8f8>
 800b530:	9b04      	ldr	r3, [sp, #16]
 800b532:	4650      	mov	r0, sl
 800b534:	b1d3      	cbz	r3, 800b56c <_strtod_l+0x88c>
 800b536:	4aad      	ldr	r2, [pc, #692]	; (800b7ec <_strtod_l+0xb0c>)
 800b538:	402a      	ands	r2, r5
 800b53a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b53e:	f04f 31ff 	mov.w	r1, #4294967295
 800b542:	d816      	bhi.n	800b572 <_strtod_l+0x892>
 800b544:	0d12      	lsrs	r2, r2, #20
 800b546:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b54a:	fa01 f303 	lsl.w	r3, r1, r3
 800b54e:	4298      	cmp	r0, r3
 800b550:	d142      	bne.n	800b5d8 <_strtod_l+0x8f8>
 800b552:	4ba7      	ldr	r3, [pc, #668]	; (800b7f0 <_strtod_l+0xb10>)
 800b554:	429d      	cmp	r5, r3
 800b556:	d102      	bne.n	800b55e <_strtod_l+0x87e>
 800b558:	3001      	adds	r0, #1
 800b55a:	f43f addf 	beq.w	800b11c <_strtod_l+0x43c>
 800b55e:	4ba3      	ldr	r3, [pc, #652]	; (800b7ec <_strtod_l+0xb0c>)
 800b560:	402b      	ands	r3, r5
 800b562:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b566:	f04f 0a00 	mov.w	sl, #0
 800b56a:	e7a0      	b.n	800b4ae <_strtod_l+0x7ce>
 800b56c:	f04f 33ff 	mov.w	r3, #4294967295
 800b570:	e7ed      	b.n	800b54e <_strtod_l+0x86e>
 800b572:	460b      	mov	r3, r1
 800b574:	e7eb      	b.n	800b54e <_strtod_l+0x86e>
 800b576:	bb7b      	cbnz	r3, 800b5d8 <_strtod_l+0x8f8>
 800b578:	f1ba 0f00 	cmp.w	sl, #0
 800b57c:	d12c      	bne.n	800b5d8 <_strtod_l+0x8f8>
 800b57e:	9904      	ldr	r1, [sp, #16]
 800b580:	4a9a      	ldr	r2, [pc, #616]	; (800b7ec <_strtod_l+0xb0c>)
 800b582:	465b      	mov	r3, fp
 800b584:	b1f1      	cbz	r1, 800b5c4 <_strtod_l+0x8e4>
 800b586:	ea02 010b 	and.w	r1, r2, fp
 800b58a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b58e:	dc19      	bgt.n	800b5c4 <_strtod_l+0x8e4>
 800b590:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b594:	f77f ae5b 	ble.w	800b24e <_strtod_l+0x56e>
 800b598:	4a96      	ldr	r2, [pc, #600]	; (800b7f4 <_strtod_l+0xb14>)
 800b59a:	2300      	movs	r3, #0
 800b59c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b5a0:	4650      	mov	r0, sl
 800b5a2:	4659      	mov	r1, fp
 800b5a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b5a8:	f7f5 f82e 	bl	8000608 <__aeabi_dmul>
 800b5ac:	4682      	mov	sl, r0
 800b5ae:	468b      	mov	fp, r1
 800b5b0:	2900      	cmp	r1, #0
 800b5b2:	f47f adbe 	bne.w	800b132 <_strtod_l+0x452>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	f47f adbb 	bne.w	800b132 <_strtod_l+0x452>
 800b5bc:	2322      	movs	r3, #34	; 0x22
 800b5be:	f8c9 3000 	str.w	r3, [r9]
 800b5c2:	e5b6      	b.n	800b132 <_strtod_l+0x452>
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b5ca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b5ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b5d2:	f04f 3aff 	mov.w	sl, #4294967295
 800b5d6:	e76a      	b.n	800b4ae <_strtod_l+0x7ce>
 800b5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5da:	b193      	cbz	r3, 800b602 <_strtod_l+0x922>
 800b5dc:	422b      	tst	r3, r5
 800b5de:	f43f af66 	beq.w	800b4ae <_strtod_l+0x7ce>
 800b5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5e4:	9a04      	ldr	r2, [sp, #16]
 800b5e6:	4650      	mov	r0, sl
 800b5e8:	4659      	mov	r1, fp
 800b5ea:	b173      	cbz	r3, 800b60a <_strtod_l+0x92a>
 800b5ec:	f7ff fb5a 	bl	800aca4 <sulp>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5f8:	f7f4 fe50 	bl	800029c <__adddf3>
 800b5fc:	4682      	mov	sl, r0
 800b5fe:	468b      	mov	fp, r1
 800b600:	e755      	b.n	800b4ae <_strtod_l+0x7ce>
 800b602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b604:	ea13 0f0a 	tst.w	r3, sl
 800b608:	e7e9      	b.n	800b5de <_strtod_l+0x8fe>
 800b60a:	f7ff fb4b 	bl	800aca4 <sulp>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b616:	f7f4 fe3f 	bl	8000298 <__aeabi_dsub>
 800b61a:	2200      	movs	r2, #0
 800b61c:	2300      	movs	r3, #0
 800b61e:	4682      	mov	sl, r0
 800b620:	468b      	mov	fp, r1
 800b622:	f7f5 fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 800b626:	2800      	cmp	r0, #0
 800b628:	f47f ae11 	bne.w	800b24e <_strtod_l+0x56e>
 800b62c:	e73f      	b.n	800b4ae <_strtod_l+0x7ce>
 800b62e:	4641      	mov	r1, r8
 800b630:	4620      	mov	r0, r4
 800b632:	f002 f9a6 	bl	800d982 <__ratio>
 800b636:	ec57 6b10 	vmov	r6, r7, d0
 800b63a:	2200      	movs	r2, #0
 800b63c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b640:	ee10 0a10 	vmov	r0, s0
 800b644:	4639      	mov	r1, r7
 800b646:	f7f5 fa5b 	bl	8000b00 <__aeabi_dcmple>
 800b64a:	2800      	cmp	r0, #0
 800b64c:	d077      	beq.n	800b73e <_strtod_l+0xa5e>
 800b64e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b650:	2b00      	cmp	r3, #0
 800b652:	d04a      	beq.n	800b6ea <_strtod_l+0xa0a>
 800b654:	4b68      	ldr	r3, [pc, #416]	; (800b7f8 <_strtod_l+0xb18>)
 800b656:	2200      	movs	r2, #0
 800b658:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b65c:	4f66      	ldr	r7, [pc, #408]	; (800b7f8 <_strtod_l+0xb18>)
 800b65e:	2600      	movs	r6, #0
 800b660:	4b62      	ldr	r3, [pc, #392]	; (800b7ec <_strtod_l+0xb0c>)
 800b662:	402b      	ands	r3, r5
 800b664:	930f      	str	r3, [sp, #60]	; 0x3c
 800b666:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b668:	4b64      	ldr	r3, [pc, #400]	; (800b7fc <_strtod_l+0xb1c>)
 800b66a:	429a      	cmp	r2, r3
 800b66c:	f040 80ce 	bne.w	800b80c <_strtod_l+0xb2c>
 800b670:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b674:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b678:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b67c:	ec4b ab10 	vmov	d0, sl, fp
 800b680:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b684:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b688:	f002 f8b6 	bl	800d7f8 <__ulp>
 800b68c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b690:	ec53 2b10 	vmov	r2, r3, d0
 800b694:	f7f4 ffb8 	bl	8000608 <__aeabi_dmul>
 800b698:	4652      	mov	r2, sl
 800b69a:	465b      	mov	r3, fp
 800b69c:	f7f4 fdfe 	bl	800029c <__adddf3>
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	4952      	ldr	r1, [pc, #328]	; (800b7ec <_strtod_l+0xb0c>)
 800b6a4:	4a56      	ldr	r2, [pc, #344]	; (800b800 <_strtod_l+0xb20>)
 800b6a6:	4019      	ands	r1, r3
 800b6a8:	4291      	cmp	r1, r2
 800b6aa:	4682      	mov	sl, r0
 800b6ac:	d95b      	bls.n	800b766 <_strtod_l+0xa86>
 800b6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d103      	bne.n	800b6c0 <_strtod_l+0x9e0>
 800b6b8:	9b08      	ldr	r3, [sp, #32]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	f43f ad2e 	beq.w	800b11c <_strtod_l+0x43c>
 800b6c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b7f0 <_strtod_l+0xb10>
 800b6c4:	f04f 3aff 	mov.w	sl, #4294967295
 800b6c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6ca:	4648      	mov	r0, r9
 800b6cc:	f001 fdfc 	bl	800d2c8 <_Bfree>
 800b6d0:	9905      	ldr	r1, [sp, #20]
 800b6d2:	4648      	mov	r0, r9
 800b6d4:	f001 fdf8 	bl	800d2c8 <_Bfree>
 800b6d8:	4641      	mov	r1, r8
 800b6da:	4648      	mov	r0, r9
 800b6dc:	f001 fdf4 	bl	800d2c8 <_Bfree>
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	4648      	mov	r0, r9
 800b6e4:	f001 fdf0 	bl	800d2c8 <_Bfree>
 800b6e8:	e619      	b.n	800b31e <_strtod_l+0x63e>
 800b6ea:	f1ba 0f00 	cmp.w	sl, #0
 800b6ee:	d11a      	bne.n	800b726 <_strtod_l+0xa46>
 800b6f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6f4:	b9eb      	cbnz	r3, 800b732 <_strtod_l+0xa52>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	4b3f      	ldr	r3, [pc, #252]	; (800b7f8 <_strtod_l+0xb18>)
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f5 f9f5 	bl	8000aec <__aeabi_dcmplt>
 800b702:	b9c8      	cbnz	r0, 800b738 <_strtod_l+0xa58>
 800b704:	4630      	mov	r0, r6
 800b706:	4639      	mov	r1, r7
 800b708:	2200      	movs	r2, #0
 800b70a:	4b3e      	ldr	r3, [pc, #248]	; (800b804 <_strtod_l+0xb24>)
 800b70c:	f7f4 ff7c 	bl	8000608 <__aeabi_dmul>
 800b710:	4606      	mov	r6, r0
 800b712:	460f      	mov	r7, r1
 800b714:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b718:	9618      	str	r6, [sp, #96]	; 0x60
 800b71a:	9319      	str	r3, [sp, #100]	; 0x64
 800b71c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b720:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b724:	e79c      	b.n	800b660 <_strtod_l+0x980>
 800b726:	f1ba 0f01 	cmp.w	sl, #1
 800b72a:	d102      	bne.n	800b732 <_strtod_l+0xa52>
 800b72c:	2d00      	cmp	r5, #0
 800b72e:	f43f ad8e 	beq.w	800b24e <_strtod_l+0x56e>
 800b732:	2200      	movs	r2, #0
 800b734:	4b34      	ldr	r3, [pc, #208]	; (800b808 <_strtod_l+0xb28>)
 800b736:	e78f      	b.n	800b658 <_strtod_l+0x978>
 800b738:	2600      	movs	r6, #0
 800b73a:	4f32      	ldr	r7, [pc, #200]	; (800b804 <_strtod_l+0xb24>)
 800b73c:	e7ea      	b.n	800b714 <_strtod_l+0xa34>
 800b73e:	4b31      	ldr	r3, [pc, #196]	; (800b804 <_strtod_l+0xb24>)
 800b740:	4630      	mov	r0, r6
 800b742:	4639      	mov	r1, r7
 800b744:	2200      	movs	r2, #0
 800b746:	f7f4 ff5f 	bl	8000608 <__aeabi_dmul>
 800b74a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b74c:	4606      	mov	r6, r0
 800b74e:	460f      	mov	r7, r1
 800b750:	b933      	cbnz	r3, 800b760 <_strtod_l+0xa80>
 800b752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b756:	9010      	str	r0, [sp, #64]	; 0x40
 800b758:	9311      	str	r3, [sp, #68]	; 0x44
 800b75a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b75e:	e7df      	b.n	800b720 <_strtod_l+0xa40>
 800b760:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b764:	e7f9      	b.n	800b75a <_strtod_l+0xa7a>
 800b766:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b76a:	9b04      	ldr	r3, [sp, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1ab      	bne.n	800b6c8 <_strtod_l+0x9e8>
 800b770:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b774:	0d1b      	lsrs	r3, r3, #20
 800b776:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b778:	051b      	lsls	r3, r3, #20
 800b77a:	429a      	cmp	r2, r3
 800b77c:	465d      	mov	r5, fp
 800b77e:	d1a3      	bne.n	800b6c8 <_strtod_l+0x9e8>
 800b780:	4639      	mov	r1, r7
 800b782:	4630      	mov	r0, r6
 800b784:	f7f5 f9f0 	bl	8000b68 <__aeabi_d2iz>
 800b788:	f7f4 fed4 	bl	8000534 <__aeabi_i2d>
 800b78c:	460b      	mov	r3, r1
 800b78e:	4602      	mov	r2, r0
 800b790:	4639      	mov	r1, r7
 800b792:	4630      	mov	r0, r6
 800b794:	f7f4 fd80 	bl	8000298 <__aeabi_dsub>
 800b798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b79a:	4606      	mov	r6, r0
 800b79c:	460f      	mov	r7, r1
 800b79e:	b933      	cbnz	r3, 800b7ae <_strtod_l+0xace>
 800b7a0:	f1ba 0f00 	cmp.w	sl, #0
 800b7a4:	d103      	bne.n	800b7ae <_strtod_l+0xace>
 800b7a6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b7aa:	2d00      	cmp	r5, #0
 800b7ac:	d06d      	beq.n	800b88a <_strtod_l+0xbaa>
 800b7ae:	a30a      	add	r3, pc, #40	; (adr r3, 800b7d8 <_strtod_l+0xaf8>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	f7f5 f998 	bl	8000aec <__aeabi_dcmplt>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	f47f acb8 	bne.w	800b132 <_strtod_l+0x452>
 800b7c2:	a307      	add	r3, pc, #28	; (adr r3, 800b7e0 <_strtod_l+0xb00>)
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	f7f5 f9ac 	bl	8000b28 <__aeabi_dcmpgt>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	f43f af79 	beq.w	800b6c8 <_strtod_l+0x9e8>
 800b7d6:	e4ac      	b.n	800b132 <_strtod_l+0x452>
 800b7d8:	94a03595 	.word	0x94a03595
 800b7dc:	3fdfffff 	.word	0x3fdfffff
 800b7e0:	35afe535 	.word	0x35afe535
 800b7e4:	3fe00000 	.word	0x3fe00000
 800b7e8:	000fffff 	.word	0x000fffff
 800b7ec:	7ff00000 	.word	0x7ff00000
 800b7f0:	7fefffff 	.word	0x7fefffff
 800b7f4:	39500000 	.word	0x39500000
 800b7f8:	3ff00000 	.word	0x3ff00000
 800b7fc:	7fe00000 	.word	0x7fe00000
 800b800:	7c9fffff 	.word	0x7c9fffff
 800b804:	3fe00000 	.word	0x3fe00000
 800b808:	bff00000 	.word	0xbff00000
 800b80c:	9b04      	ldr	r3, [sp, #16]
 800b80e:	b333      	cbz	r3, 800b85e <_strtod_l+0xb7e>
 800b810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b812:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b816:	d822      	bhi.n	800b85e <_strtod_l+0xb7e>
 800b818:	a327      	add	r3, pc, #156	; (adr r3, 800b8b8 <_strtod_l+0xbd8>)
 800b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81e:	4630      	mov	r0, r6
 800b820:	4639      	mov	r1, r7
 800b822:	f7f5 f96d 	bl	8000b00 <__aeabi_dcmple>
 800b826:	b1a0      	cbz	r0, 800b852 <_strtod_l+0xb72>
 800b828:	4639      	mov	r1, r7
 800b82a:	4630      	mov	r0, r6
 800b82c:	f7f5 f9c4 	bl	8000bb8 <__aeabi_d2uiz>
 800b830:	2800      	cmp	r0, #0
 800b832:	bf08      	it	eq
 800b834:	2001      	moveq	r0, #1
 800b836:	f7f4 fe6d 	bl	8000514 <__aeabi_ui2d>
 800b83a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b83c:	4606      	mov	r6, r0
 800b83e:	460f      	mov	r7, r1
 800b840:	bb03      	cbnz	r3, 800b884 <_strtod_l+0xba4>
 800b842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b846:	9012      	str	r0, [sp, #72]	; 0x48
 800b848:	9313      	str	r3, [sp, #76]	; 0x4c
 800b84a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b84e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b854:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b856:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b85a:	1a9b      	subs	r3, r3, r2
 800b85c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b85e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b862:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b866:	f001 ffc7 	bl	800d7f8 <__ulp>
 800b86a:	4650      	mov	r0, sl
 800b86c:	ec53 2b10 	vmov	r2, r3, d0
 800b870:	4659      	mov	r1, fp
 800b872:	f7f4 fec9 	bl	8000608 <__aeabi_dmul>
 800b876:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b87a:	f7f4 fd0f 	bl	800029c <__adddf3>
 800b87e:	4682      	mov	sl, r0
 800b880:	468b      	mov	fp, r1
 800b882:	e772      	b.n	800b76a <_strtod_l+0xa8a>
 800b884:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b888:	e7df      	b.n	800b84a <_strtod_l+0xb6a>
 800b88a:	a30d      	add	r3, pc, #52	; (adr r3, 800b8c0 <_strtod_l+0xbe0>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f5 f92c 	bl	8000aec <__aeabi_dcmplt>
 800b894:	e79c      	b.n	800b7d0 <_strtod_l+0xaf0>
 800b896:	2300      	movs	r3, #0
 800b898:	930d      	str	r3, [sp, #52]	; 0x34
 800b89a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b89c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	f7ff ba61 	b.w	800ad66 <_strtod_l+0x86>
 800b8a4:	2b65      	cmp	r3, #101	; 0x65
 800b8a6:	f04f 0200 	mov.w	r2, #0
 800b8aa:	f43f ab4e 	beq.w	800af4a <_strtod_l+0x26a>
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	4614      	mov	r4, r2
 800b8b2:	9104      	str	r1, [sp, #16]
 800b8b4:	f7ff bacb 	b.w	800ae4e <_strtod_l+0x16e>
 800b8b8:	ffc00000 	.word	0xffc00000
 800b8bc:	41dfffff 	.word	0x41dfffff
 800b8c0:	94a03595 	.word	0x94a03595
 800b8c4:	3fcfffff 	.word	0x3fcfffff

0800b8c8 <_strtod_r>:
 800b8c8:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <_strtod_r+0x18>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	b410      	push	{r4}
 800b8ce:	6a1b      	ldr	r3, [r3, #32]
 800b8d0:	4c04      	ldr	r4, [pc, #16]	; (800b8e4 <_strtod_r+0x1c>)
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	bf08      	it	eq
 800b8d6:	4623      	moveq	r3, r4
 800b8d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8dc:	f7ff ba00 	b.w	800ace0 <_strtod_l>
 800b8e0:	20000078 	.word	0x20000078
 800b8e4:	200000dc 	.word	0x200000dc

0800b8e8 <_strtol_l.isra.0>:
 800b8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	4689      	mov	r9, r1
 800b8f0:	4692      	mov	sl, r2
 800b8f2:	461e      	mov	r6, r3
 800b8f4:	460f      	mov	r7, r1
 800b8f6:	463d      	mov	r5, r7
 800b8f8:	9808      	ldr	r0, [sp, #32]
 800b8fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8fe:	f7fe fac9 	bl	8009e94 <__locale_ctype_ptr_l>
 800b902:	4420      	add	r0, r4
 800b904:	7843      	ldrb	r3, [r0, #1]
 800b906:	f013 0308 	ands.w	r3, r3, #8
 800b90a:	d132      	bne.n	800b972 <_strtol_l.isra.0+0x8a>
 800b90c:	2c2d      	cmp	r4, #45	; 0x2d
 800b90e:	d132      	bne.n	800b976 <_strtol_l.isra.0+0x8e>
 800b910:	787c      	ldrb	r4, [r7, #1]
 800b912:	1cbd      	adds	r5, r7, #2
 800b914:	2201      	movs	r2, #1
 800b916:	2e00      	cmp	r6, #0
 800b918:	d05d      	beq.n	800b9d6 <_strtol_l.isra.0+0xee>
 800b91a:	2e10      	cmp	r6, #16
 800b91c:	d109      	bne.n	800b932 <_strtol_l.isra.0+0x4a>
 800b91e:	2c30      	cmp	r4, #48	; 0x30
 800b920:	d107      	bne.n	800b932 <_strtol_l.isra.0+0x4a>
 800b922:	782b      	ldrb	r3, [r5, #0]
 800b924:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b928:	2b58      	cmp	r3, #88	; 0x58
 800b92a:	d14f      	bne.n	800b9cc <_strtol_l.isra.0+0xe4>
 800b92c:	786c      	ldrb	r4, [r5, #1]
 800b92e:	2610      	movs	r6, #16
 800b930:	3502      	adds	r5, #2
 800b932:	2a00      	cmp	r2, #0
 800b934:	bf14      	ite	ne
 800b936:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b93a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b93e:	2700      	movs	r7, #0
 800b940:	fbb1 fcf6 	udiv	ip, r1, r6
 800b944:	4638      	mov	r0, r7
 800b946:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b94a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b94e:	2b09      	cmp	r3, #9
 800b950:	d817      	bhi.n	800b982 <_strtol_l.isra.0+0x9a>
 800b952:	461c      	mov	r4, r3
 800b954:	42a6      	cmp	r6, r4
 800b956:	dd23      	ble.n	800b9a0 <_strtol_l.isra.0+0xb8>
 800b958:	1c7b      	adds	r3, r7, #1
 800b95a:	d007      	beq.n	800b96c <_strtol_l.isra.0+0x84>
 800b95c:	4584      	cmp	ip, r0
 800b95e:	d31c      	bcc.n	800b99a <_strtol_l.isra.0+0xb2>
 800b960:	d101      	bne.n	800b966 <_strtol_l.isra.0+0x7e>
 800b962:	45a6      	cmp	lr, r4
 800b964:	db19      	blt.n	800b99a <_strtol_l.isra.0+0xb2>
 800b966:	fb00 4006 	mla	r0, r0, r6, r4
 800b96a:	2701      	movs	r7, #1
 800b96c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b970:	e7eb      	b.n	800b94a <_strtol_l.isra.0+0x62>
 800b972:	462f      	mov	r7, r5
 800b974:	e7bf      	b.n	800b8f6 <_strtol_l.isra.0+0xe>
 800b976:	2c2b      	cmp	r4, #43	; 0x2b
 800b978:	bf04      	itt	eq
 800b97a:	1cbd      	addeq	r5, r7, #2
 800b97c:	787c      	ldrbeq	r4, [r7, #1]
 800b97e:	461a      	mov	r2, r3
 800b980:	e7c9      	b.n	800b916 <_strtol_l.isra.0+0x2e>
 800b982:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b986:	2b19      	cmp	r3, #25
 800b988:	d801      	bhi.n	800b98e <_strtol_l.isra.0+0xa6>
 800b98a:	3c37      	subs	r4, #55	; 0x37
 800b98c:	e7e2      	b.n	800b954 <_strtol_l.isra.0+0x6c>
 800b98e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b992:	2b19      	cmp	r3, #25
 800b994:	d804      	bhi.n	800b9a0 <_strtol_l.isra.0+0xb8>
 800b996:	3c57      	subs	r4, #87	; 0x57
 800b998:	e7dc      	b.n	800b954 <_strtol_l.isra.0+0x6c>
 800b99a:	f04f 37ff 	mov.w	r7, #4294967295
 800b99e:	e7e5      	b.n	800b96c <_strtol_l.isra.0+0x84>
 800b9a0:	1c7b      	adds	r3, r7, #1
 800b9a2:	d108      	bne.n	800b9b6 <_strtol_l.isra.0+0xce>
 800b9a4:	2322      	movs	r3, #34	; 0x22
 800b9a6:	f8c8 3000 	str.w	r3, [r8]
 800b9aa:	4608      	mov	r0, r1
 800b9ac:	f1ba 0f00 	cmp.w	sl, #0
 800b9b0:	d107      	bne.n	800b9c2 <_strtol_l.isra.0+0xda>
 800b9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b6:	b102      	cbz	r2, 800b9ba <_strtol_l.isra.0+0xd2>
 800b9b8:	4240      	negs	r0, r0
 800b9ba:	f1ba 0f00 	cmp.w	sl, #0
 800b9be:	d0f8      	beq.n	800b9b2 <_strtol_l.isra.0+0xca>
 800b9c0:	b10f      	cbz	r7, 800b9c6 <_strtol_l.isra.0+0xde>
 800b9c2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b9c6:	f8ca 9000 	str.w	r9, [sl]
 800b9ca:	e7f2      	b.n	800b9b2 <_strtol_l.isra.0+0xca>
 800b9cc:	2430      	movs	r4, #48	; 0x30
 800b9ce:	2e00      	cmp	r6, #0
 800b9d0:	d1af      	bne.n	800b932 <_strtol_l.isra.0+0x4a>
 800b9d2:	2608      	movs	r6, #8
 800b9d4:	e7ad      	b.n	800b932 <_strtol_l.isra.0+0x4a>
 800b9d6:	2c30      	cmp	r4, #48	; 0x30
 800b9d8:	d0a3      	beq.n	800b922 <_strtol_l.isra.0+0x3a>
 800b9da:	260a      	movs	r6, #10
 800b9dc:	e7a9      	b.n	800b932 <_strtol_l.isra.0+0x4a>
	...

0800b9e0 <_strtol_r>:
 800b9e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9e2:	4c06      	ldr	r4, [pc, #24]	; (800b9fc <_strtol_r+0x1c>)
 800b9e4:	4d06      	ldr	r5, [pc, #24]	; (800ba00 <_strtol_r+0x20>)
 800b9e6:	6824      	ldr	r4, [r4, #0]
 800b9e8:	6a24      	ldr	r4, [r4, #32]
 800b9ea:	2c00      	cmp	r4, #0
 800b9ec:	bf08      	it	eq
 800b9ee:	462c      	moveq	r4, r5
 800b9f0:	9400      	str	r4, [sp, #0]
 800b9f2:	f7ff ff79 	bl	800b8e8 <_strtol_l.isra.0>
 800b9f6:	b003      	add	sp, #12
 800b9f8:	bd30      	pop	{r4, r5, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20000078 	.word	0x20000078
 800ba00:	200000dc 	.word	0x200000dc

0800ba04 <__swbuf_r>:
 800ba04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba06:	460e      	mov	r6, r1
 800ba08:	4614      	mov	r4, r2
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	b118      	cbz	r0, 800ba16 <__swbuf_r+0x12>
 800ba0e:	6983      	ldr	r3, [r0, #24]
 800ba10:	b90b      	cbnz	r3, 800ba16 <__swbuf_r+0x12>
 800ba12:	f000 fff9 	bl	800ca08 <__sinit>
 800ba16:	4b21      	ldr	r3, [pc, #132]	; (800ba9c <__swbuf_r+0x98>)
 800ba18:	429c      	cmp	r4, r3
 800ba1a:	d12a      	bne.n	800ba72 <__swbuf_r+0x6e>
 800ba1c:	686c      	ldr	r4, [r5, #4]
 800ba1e:	69a3      	ldr	r3, [r4, #24]
 800ba20:	60a3      	str	r3, [r4, #8]
 800ba22:	89a3      	ldrh	r3, [r4, #12]
 800ba24:	071a      	lsls	r2, r3, #28
 800ba26:	d52e      	bpl.n	800ba86 <__swbuf_r+0x82>
 800ba28:	6923      	ldr	r3, [r4, #16]
 800ba2a:	b363      	cbz	r3, 800ba86 <__swbuf_r+0x82>
 800ba2c:	6923      	ldr	r3, [r4, #16]
 800ba2e:	6820      	ldr	r0, [r4, #0]
 800ba30:	1ac0      	subs	r0, r0, r3
 800ba32:	6963      	ldr	r3, [r4, #20]
 800ba34:	b2f6      	uxtb	r6, r6
 800ba36:	4283      	cmp	r3, r0
 800ba38:	4637      	mov	r7, r6
 800ba3a:	dc04      	bgt.n	800ba46 <__swbuf_r+0x42>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f000 ff78 	bl	800c934 <_fflush_r>
 800ba44:	bb28      	cbnz	r0, 800ba92 <__swbuf_r+0x8e>
 800ba46:	68a3      	ldr	r3, [r4, #8]
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	60a3      	str	r3, [r4, #8]
 800ba4c:	6823      	ldr	r3, [r4, #0]
 800ba4e:	1c5a      	adds	r2, r3, #1
 800ba50:	6022      	str	r2, [r4, #0]
 800ba52:	701e      	strb	r6, [r3, #0]
 800ba54:	6963      	ldr	r3, [r4, #20]
 800ba56:	3001      	adds	r0, #1
 800ba58:	4283      	cmp	r3, r0
 800ba5a:	d004      	beq.n	800ba66 <__swbuf_r+0x62>
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	07db      	lsls	r3, r3, #31
 800ba60:	d519      	bpl.n	800ba96 <__swbuf_r+0x92>
 800ba62:	2e0a      	cmp	r6, #10
 800ba64:	d117      	bne.n	800ba96 <__swbuf_r+0x92>
 800ba66:	4621      	mov	r1, r4
 800ba68:	4628      	mov	r0, r5
 800ba6a:	f000 ff63 	bl	800c934 <_fflush_r>
 800ba6e:	b190      	cbz	r0, 800ba96 <__swbuf_r+0x92>
 800ba70:	e00f      	b.n	800ba92 <__swbuf_r+0x8e>
 800ba72:	4b0b      	ldr	r3, [pc, #44]	; (800baa0 <__swbuf_r+0x9c>)
 800ba74:	429c      	cmp	r4, r3
 800ba76:	d101      	bne.n	800ba7c <__swbuf_r+0x78>
 800ba78:	68ac      	ldr	r4, [r5, #8]
 800ba7a:	e7d0      	b.n	800ba1e <__swbuf_r+0x1a>
 800ba7c:	4b09      	ldr	r3, [pc, #36]	; (800baa4 <__swbuf_r+0xa0>)
 800ba7e:	429c      	cmp	r4, r3
 800ba80:	bf08      	it	eq
 800ba82:	68ec      	ldreq	r4, [r5, #12]
 800ba84:	e7cb      	b.n	800ba1e <__swbuf_r+0x1a>
 800ba86:	4621      	mov	r1, r4
 800ba88:	4628      	mov	r0, r5
 800ba8a:	f000 f81b 	bl	800bac4 <__swsetup_r>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d0cc      	beq.n	800ba2c <__swbuf_r+0x28>
 800ba92:	f04f 37ff 	mov.w	r7, #4294967295
 800ba96:	4638      	mov	r0, r7
 800ba98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	0800e8b0 	.word	0x0800e8b0
 800baa0:	0800e8d0 	.word	0x0800e8d0
 800baa4:	0800e890 	.word	0x0800e890

0800baa8 <__ascii_wctomb>:
 800baa8:	b149      	cbz	r1, 800babe <__ascii_wctomb+0x16>
 800baaa:	2aff      	cmp	r2, #255	; 0xff
 800baac:	bf85      	ittet	hi
 800baae:	238a      	movhi	r3, #138	; 0x8a
 800bab0:	6003      	strhi	r3, [r0, #0]
 800bab2:	700a      	strbls	r2, [r1, #0]
 800bab4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bab8:	bf98      	it	ls
 800baba:	2001      	movls	r0, #1
 800babc:	4770      	bx	lr
 800babe:	4608      	mov	r0, r1
 800bac0:	4770      	bx	lr
	...

0800bac4 <__swsetup_r>:
 800bac4:	4b32      	ldr	r3, [pc, #200]	; (800bb90 <__swsetup_r+0xcc>)
 800bac6:	b570      	push	{r4, r5, r6, lr}
 800bac8:	681d      	ldr	r5, [r3, #0]
 800baca:	4606      	mov	r6, r0
 800bacc:	460c      	mov	r4, r1
 800bace:	b125      	cbz	r5, 800bada <__swsetup_r+0x16>
 800bad0:	69ab      	ldr	r3, [r5, #24]
 800bad2:	b913      	cbnz	r3, 800bada <__swsetup_r+0x16>
 800bad4:	4628      	mov	r0, r5
 800bad6:	f000 ff97 	bl	800ca08 <__sinit>
 800bada:	4b2e      	ldr	r3, [pc, #184]	; (800bb94 <__swsetup_r+0xd0>)
 800badc:	429c      	cmp	r4, r3
 800bade:	d10f      	bne.n	800bb00 <__swsetup_r+0x3c>
 800bae0:	686c      	ldr	r4, [r5, #4]
 800bae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	0715      	lsls	r5, r2, #28
 800baea:	d42c      	bmi.n	800bb46 <__swsetup_r+0x82>
 800baec:	06d0      	lsls	r0, r2, #27
 800baee:	d411      	bmi.n	800bb14 <__swsetup_r+0x50>
 800baf0:	2209      	movs	r2, #9
 800baf2:	6032      	str	r2, [r6, #0]
 800baf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf8:	81a3      	strh	r3, [r4, #12]
 800bafa:	f04f 30ff 	mov.w	r0, #4294967295
 800bafe:	e03e      	b.n	800bb7e <__swsetup_r+0xba>
 800bb00:	4b25      	ldr	r3, [pc, #148]	; (800bb98 <__swsetup_r+0xd4>)
 800bb02:	429c      	cmp	r4, r3
 800bb04:	d101      	bne.n	800bb0a <__swsetup_r+0x46>
 800bb06:	68ac      	ldr	r4, [r5, #8]
 800bb08:	e7eb      	b.n	800bae2 <__swsetup_r+0x1e>
 800bb0a:	4b24      	ldr	r3, [pc, #144]	; (800bb9c <__swsetup_r+0xd8>)
 800bb0c:	429c      	cmp	r4, r3
 800bb0e:	bf08      	it	eq
 800bb10:	68ec      	ldreq	r4, [r5, #12]
 800bb12:	e7e6      	b.n	800bae2 <__swsetup_r+0x1e>
 800bb14:	0751      	lsls	r1, r2, #29
 800bb16:	d512      	bpl.n	800bb3e <__swsetup_r+0x7a>
 800bb18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb1a:	b141      	cbz	r1, 800bb2e <__swsetup_r+0x6a>
 800bb1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb20:	4299      	cmp	r1, r3
 800bb22:	d002      	beq.n	800bb2a <__swsetup_r+0x66>
 800bb24:	4630      	mov	r0, r6
 800bb26:	f001 ffa9 	bl	800da7c <_free_r>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb2e:	89a3      	ldrh	r3, [r4, #12]
 800bb30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb34:	81a3      	strh	r3, [r4, #12]
 800bb36:	2300      	movs	r3, #0
 800bb38:	6063      	str	r3, [r4, #4]
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f043 0308 	orr.w	r3, r3, #8
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	6923      	ldr	r3, [r4, #16]
 800bb48:	b94b      	cbnz	r3, 800bb5e <__swsetup_r+0x9a>
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb54:	d003      	beq.n	800bb5e <__swsetup_r+0x9a>
 800bb56:	4621      	mov	r1, r4
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f001 fb39 	bl	800d1d0 <__smakebuf_r>
 800bb5e:	89a2      	ldrh	r2, [r4, #12]
 800bb60:	f012 0301 	ands.w	r3, r2, #1
 800bb64:	d00c      	beq.n	800bb80 <__swsetup_r+0xbc>
 800bb66:	2300      	movs	r3, #0
 800bb68:	60a3      	str	r3, [r4, #8]
 800bb6a:	6963      	ldr	r3, [r4, #20]
 800bb6c:	425b      	negs	r3, r3
 800bb6e:	61a3      	str	r3, [r4, #24]
 800bb70:	6923      	ldr	r3, [r4, #16]
 800bb72:	b953      	cbnz	r3, 800bb8a <__swsetup_r+0xc6>
 800bb74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bb7c:	d1ba      	bne.n	800baf4 <__swsetup_r+0x30>
 800bb7e:	bd70      	pop	{r4, r5, r6, pc}
 800bb80:	0792      	lsls	r2, r2, #30
 800bb82:	bf58      	it	pl
 800bb84:	6963      	ldrpl	r3, [r4, #20]
 800bb86:	60a3      	str	r3, [r4, #8]
 800bb88:	e7f2      	b.n	800bb70 <__swsetup_r+0xac>
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	e7f7      	b.n	800bb7e <__swsetup_r+0xba>
 800bb8e:	bf00      	nop
 800bb90:	20000078 	.word	0x20000078
 800bb94:	0800e8b0 	.word	0x0800e8b0
 800bb98:	0800e8d0 	.word	0x0800e8d0
 800bb9c:	0800e890 	.word	0x0800e890

0800bba0 <quorem>:
 800bba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	6903      	ldr	r3, [r0, #16]
 800bba6:	690c      	ldr	r4, [r1, #16]
 800bba8:	42a3      	cmp	r3, r4
 800bbaa:	4680      	mov	r8, r0
 800bbac:	f2c0 8082 	blt.w	800bcb4 <quorem+0x114>
 800bbb0:	3c01      	subs	r4, #1
 800bbb2:	f101 0714 	add.w	r7, r1, #20
 800bbb6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bbba:	f100 0614 	add.w	r6, r0, #20
 800bbbe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bbc2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bbc6:	eb06 030c 	add.w	r3, r6, ip
 800bbca:	3501      	adds	r5, #1
 800bbcc:	eb07 090c 	add.w	r9, r7, ip
 800bbd0:	9301      	str	r3, [sp, #4]
 800bbd2:	fbb0 f5f5 	udiv	r5, r0, r5
 800bbd6:	b395      	cbz	r5, 800bc3e <quorem+0x9e>
 800bbd8:	f04f 0a00 	mov.w	sl, #0
 800bbdc:	4638      	mov	r0, r7
 800bbde:	46b6      	mov	lr, r6
 800bbe0:	46d3      	mov	fp, sl
 800bbe2:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbe6:	b293      	uxth	r3, r2
 800bbe8:	fb05 a303 	mla	r3, r5, r3, sl
 800bbec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	ebab 0303 	sub.w	r3, fp, r3
 800bbf6:	0c12      	lsrs	r2, r2, #16
 800bbf8:	f8de b000 	ldr.w	fp, [lr]
 800bbfc:	fb05 a202 	mla	r2, r5, r2, sl
 800bc00:	fa13 f38b 	uxtah	r3, r3, fp
 800bc04:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bc08:	fa1f fb82 	uxth.w	fp, r2
 800bc0c:	f8de 2000 	ldr.w	r2, [lr]
 800bc10:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bc14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc1e:	4581      	cmp	r9, r0
 800bc20:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bc24:	f84e 3b04 	str.w	r3, [lr], #4
 800bc28:	d2db      	bcs.n	800bbe2 <quorem+0x42>
 800bc2a:	f856 300c 	ldr.w	r3, [r6, ip]
 800bc2e:	b933      	cbnz	r3, 800bc3e <quorem+0x9e>
 800bc30:	9b01      	ldr	r3, [sp, #4]
 800bc32:	3b04      	subs	r3, #4
 800bc34:	429e      	cmp	r6, r3
 800bc36:	461a      	mov	r2, r3
 800bc38:	d330      	bcc.n	800bc9c <quorem+0xfc>
 800bc3a:	f8c8 4010 	str.w	r4, [r8, #16]
 800bc3e:	4640      	mov	r0, r8
 800bc40:	f001 fd62 	bl	800d708 <__mcmp>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	db25      	blt.n	800bc94 <quorem+0xf4>
 800bc48:	3501      	adds	r5, #1
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f04f 0c00 	mov.w	ip, #0
 800bc50:	f857 2b04 	ldr.w	r2, [r7], #4
 800bc54:	f8d0 e000 	ldr.w	lr, [r0]
 800bc58:	b293      	uxth	r3, r2
 800bc5a:	ebac 0303 	sub.w	r3, ip, r3
 800bc5e:	0c12      	lsrs	r2, r2, #16
 800bc60:	fa13 f38e 	uxtah	r3, r3, lr
 800bc64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc72:	45b9      	cmp	r9, r7
 800bc74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc78:	f840 3b04 	str.w	r3, [r0], #4
 800bc7c:	d2e8      	bcs.n	800bc50 <quorem+0xb0>
 800bc7e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bc82:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bc86:	b92a      	cbnz	r2, 800bc94 <quorem+0xf4>
 800bc88:	3b04      	subs	r3, #4
 800bc8a:	429e      	cmp	r6, r3
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	d30b      	bcc.n	800bca8 <quorem+0x108>
 800bc90:	f8c8 4010 	str.w	r4, [r8, #16]
 800bc94:	4628      	mov	r0, r5
 800bc96:	b003      	add	sp, #12
 800bc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9c:	6812      	ldr	r2, [r2, #0]
 800bc9e:	3b04      	subs	r3, #4
 800bca0:	2a00      	cmp	r2, #0
 800bca2:	d1ca      	bne.n	800bc3a <quorem+0x9a>
 800bca4:	3c01      	subs	r4, #1
 800bca6:	e7c5      	b.n	800bc34 <quorem+0x94>
 800bca8:	6812      	ldr	r2, [r2, #0]
 800bcaa:	3b04      	subs	r3, #4
 800bcac:	2a00      	cmp	r2, #0
 800bcae:	d1ef      	bne.n	800bc90 <quorem+0xf0>
 800bcb0:	3c01      	subs	r4, #1
 800bcb2:	e7ea      	b.n	800bc8a <quorem+0xea>
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e7ee      	b.n	800bc96 <quorem+0xf6>

0800bcb8 <_dtoa_r>:
 800bcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	ec57 6b10 	vmov	r6, r7, d0
 800bcc0:	b097      	sub	sp, #92	; 0x5c
 800bcc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcc4:	9106      	str	r1, [sp, #24]
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	920b      	str	r2, [sp, #44]	; 0x2c
 800bcca:	9312      	str	r3, [sp, #72]	; 0x48
 800bccc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bcd0:	e9cd 6700 	strd	r6, r7, [sp]
 800bcd4:	b93d      	cbnz	r5, 800bce6 <_dtoa_r+0x2e>
 800bcd6:	2010      	movs	r0, #16
 800bcd8:	f001 faba 	bl	800d250 <malloc>
 800bcdc:	6260      	str	r0, [r4, #36]	; 0x24
 800bcde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bce2:	6005      	str	r5, [r0, #0]
 800bce4:	60c5      	str	r5, [r0, #12]
 800bce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bce8:	6819      	ldr	r1, [r3, #0]
 800bcea:	b151      	cbz	r1, 800bd02 <_dtoa_r+0x4a>
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	604a      	str	r2, [r1, #4]
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	4093      	lsls	r3, r2
 800bcf4:	608b      	str	r3, [r1, #8]
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f001 fae6 	bl	800d2c8 <_Bfree>
 800bcfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]
 800bd02:	1e3b      	subs	r3, r7, #0
 800bd04:	bfbb      	ittet	lt
 800bd06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd0a:	9301      	strlt	r3, [sp, #4]
 800bd0c:	2300      	movge	r3, #0
 800bd0e:	2201      	movlt	r2, #1
 800bd10:	bfac      	ite	ge
 800bd12:	f8c8 3000 	strge.w	r3, [r8]
 800bd16:	f8c8 2000 	strlt.w	r2, [r8]
 800bd1a:	4baf      	ldr	r3, [pc, #700]	; (800bfd8 <_dtoa_r+0x320>)
 800bd1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bd20:	ea33 0308 	bics.w	r3, r3, r8
 800bd24:	d114      	bne.n	800bd50 <_dtoa_r+0x98>
 800bd26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd28:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd2c:	6013      	str	r3, [r2, #0]
 800bd2e:	9b00      	ldr	r3, [sp, #0]
 800bd30:	b923      	cbnz	r3, 800bd3c <_dtoa_r+0x84>
 800bd32:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f000 8542 	beq.w	800c7c0 <_dtoa_r+0xb08>
 800bd3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd3e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bfec <_dtoa_r+0x334>
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f000 8544 	beq.w	800c7d0 <_dtoa_r+0xb18>
 800bd48:	f10b 0303 	add.w	r3, fp, #3
 800bd4c:	f000 bd3e 	b.w	800c7cc <_dtoa_r+0xb14>
 800bd50:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd54:	2200      	movs	r2, #0
 800bd56:	2300      	movs	r3, #0
 800bd58:	4630      	mov	r0, r6
 800bd5a:	4639      	mov	r1, r7
 800bd5c:	f7f4 febc 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd60:	4681      	mov	r9, r0
 800bd62:	b168      	cbz	r0, 800bd80 <_dtoa_r+0xc8>
 800bd64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd66:	2301      	movs	r3, #1
 800bd68:	6013      	str	r3, [r2, #0]
 800bd6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 8524 	beq.w	800c7ba <_dtoa_r+0xb02>
 800bd72:	4b9a      	ldr	r3, [pc, #616]	; (800bfdc <_dtoa_r+0x324>)
 800bd74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd76:	f103 3bff 	add.w	fp, r3, #4294967295
 800bd7a:	6013      	str	r3, [r2, #0]
 800bd7c:	f000 bd28 	b.w	800c7d0 <_dtoa_r+0xb18>
 800bd80:	aa14      	add	r2, sp, #80	; 0x50
 800bd82:	a915      	add	r1, sp, #84	; 0x54
 800bd84:	ec47 6b10 	vmov	d0, r6, r7
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f001 fdab 	bl	800d8e4 <__d2b>
 800bd8e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bd92:	9004      	str	r0, [sp, #16]
 800bd94:	2d00      	cmp	r5, #0
 800bd96:	d07c      	beq.n	800be92 <_dtoa_r+0x1da>
 800bd98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd9c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bda0:	46b2      	mov	sl, r6
 800bda2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bda6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bdaa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bdae:	2200      	movs	r2, #0
 800bdb0:	4b8b      	ldr	r3, [pc, #556]	; (800bfe0 <_dtoa_r+0x328>)
 800bdb2:	4650      	mov	r0, sl
 800bdb4:	4659      	mov	r1, fp
 800bdb6:	f7f4 fa6f 	bl	8000298 <__aeabi_dsub>
 800bdba:	a381      	add	r3, pc, #516	; (adr r3, 800bfc0 <_dtoa_r+0x308>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	f7f4 fc22 	bl	8000608 <__aeabi_dmul>
 800bdc4:	a380      	add	r3, pc, #512	; (adr r3, 800bfc8 <_dtoa_r+0x310>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fa67 	bl	800029c <__adddf3>
 800bdce:	4606      	mov	r6, r0
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	460f      	mov	r7, r1
 800bdd4:	f7f4 fbae 	bl	8000534 <__aeabi_i2d>
 800bdd8:	a37d      	add	r3, pc, #500	; (adr r3, 800bfd0 <_dtoa_r+0x318>)
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	f7f4 fc13 	bl	8000608 <__aeabi_dmul>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	4630      	mov	r0, r6
 800bde8:	4639      	mov	r1, r7
 800bdea:	f7f4 fa57 	bl	800029c <__adddf3>
 800bdee:	4606      	mov	r6, r0
 800bdf0:	460f      	mov	r7, r1
 800bdf2:	f7f4 feb9 	bl	8000b68 <__aeabi_d2iz>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	4682      	mov	sl, r0
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	4639      	mov	r1, r7
 800be00:	f7f4 fe74 	bl	8000aec <__aeabi_dcmplt>
 800be04:	b148      	cbz	r0, 800be1a <_dtoa_r+0x162>
 800be06:	4650      	mov	r0, sl
 800be08:	f7f4 fb94 	bl	8000534 <__aeabi_i2d>
 800be0c:	4632      	mov	r2, r6
 800be0e:	463b      	mov	r3, r7
 800be10:	f7f4 fe62 	bl	8000ad8 <__aeabi_dcmpeq>
 800be14:	b908      	cbnz	r0, 800be1a <_dtoa_r+0x162>
 800be16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be1a:	f1ba 0f16 	cmp.w	sl, #22
 800be1e:	d859      	bhi.n	800bed4 <_dtoa_r+0x21c>
 800be20:	4970      	ldr	r1, [pc, #448]	; (800bfe4 <_dtoa_r+0x32c>)
 800be22:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800be26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be2e:	f7f4 fe7b 	bl	8000b28 <__aeabi_dcmpgt>
 800be32:	2800      	cmp	r0, #0
 800be34:	d050      	beq.n	800bed8 <_dtoa_r+0x220>
 800be36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be3a:	2300      	movs	r3, #0
 800be3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800be3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be40:	1b5d      	subs	r5, r3, r5
 800be42:	f1b5 0801 	subs.w	r8, r5, #1
 800be46:	bf49      	itett	mi
 800be48:	f1c5 0301 	rsbmi	r3, r5, #1
 800be4c:	2300      	movpl	r3, #0
 800be4e:	9305      	strmi	r3, [sp, #20]
 800be50:	f04f 0800 	movmi.w	r8, #0
 800be54:	bf58      	it	pl
 800be56:	9305      	strpl	r3, [sp, #20]
 800be58:	f1ba 0f00 	cmp.w	sl, #0
 800be5c:	db3e      	blt.n	800bedc <_dtoa_r+0x224>
 800be5e:	2300      	movs	r3, #0
 800be60:	44d0      	add	r8, sl
 800be62:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800be66:	9307      	str	r3, [sp, #28]
 800be68:	9b06      	ldr	r3, [sp, #24]
 800be6a:	2b09      	cmp	r3, #9
 800be6c:	f200 8090 	bhi.w	800bf90 <_dtoa_r+0x2d8>
 800be70:	2b05      	cmp	r3, #5
 800be72:	bfc4      	itt	gt
 800be74:	3b04      	subgt	r3, #4
 800be76:	9306      	strgt	r3, [sp, #24]
 800be78:	9b06      	ldr	r3, [sp, #24]
 800be7a:	f1a3 0302 	sub.w	r3, r3, #2
 800be7e:	bfcc      	ite	gt
 800be80:	2500      	movgt	r5, #0
 800be82:	2501      	movle	r5, #1
 800be84:	2b03      	cmp	r3, #3
 800be86:	f200 808f 	bhi.w	800bfa8 <_dtoa_r+0x2f0>
 800be8a:	e8df f003 	tbb	[pc, r3]
 800be8e:	7f7d      	.short	0x7f7d
 800be90:	7131      	.short	0x7131
 800be92:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800be96:	441d      	add	r5, r3
 800be98:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800be9c:	2820      	cmp	r0, #32
 800be9e:	dd13      	ble.n	800bec8 <_dtoa_r+0x210>
 800bea0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bea4:	9b00      	ldr	r3, [sp, #0]
 800bea6:	fa08 f800 	lsl.w	r8, r8, r0
 800beaa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800beae:	fa23 f000 	lsr.w	r0, r3, r0
 800beb2:	ea48 0000 	orr.w	r0, r8, r0
 800beb6:	f7f4 fb2d 	bl	8000514 <__aeabi_ui2d>
 800beba:	2301      	movs	r3, #1
 800bebc:	4682      	mov	sl, r0
 800bebe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bec2:	3d01      	subs	r5, #1
 800bec4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bec6:	e772      	b.n	800bdae <_dtoa_r+0xf6>
 800bec8:	9b00      	ldr	r3, [sp, #0]
 800beca:	f1c0 0020 	rsb	r0, r0, #32
 800bece:	fa03 f000 	lsl.w	r0, r3, r0
 800bed2:	e7f0      	b.n	800beb6 <_dtoa_r+0x1fe>
 800bed4:	2301      	movs	r3, #1
 800bed6:	e7b1      	b.n	800be3c <_dtoa_r+0x184>
 800bed8:	900f      	str	r0, [sp, #60]	; 0x3c
 800beda:	e7b0      	b.n	800be3e <_dtoa_r+0x186>
 800bedc:	9b05      	ldr	r3, [sp, #20]
 800bede:	eba3 030a 	sub.w	r3, r3, sl
 800bee2:	9305      	str	r3, [sp, #20]
 800bee4:	f1ca 0300 	rsb	r3, sl, #0
 800bee8:	9307      	str	r3, [sp, #28]
 800beea:	2300      	movs	r3, #0
 800beec:	930e      	str	r3, [sp, #56]	; 0x38
 800beee:	e7bb      	b.n	800be68 <_dtoa_r+0x1b0>
 800bef0:	2301      	movs	r3, #1
 800bef2:	930a      	str	r3, [sp, #40]	; 0x28
 800bef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	dd59      	ble.n	800bfae <_dtoa_r+0x2f6>
 800befa:	9302      	str	r3, [sp, #8]
 800befc:	4699      	mov	r9, r3
 800befe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf00:	2200      	movs	r2, #0
 800bf02:	6072      	str	r2, [r6, #4]
 800bf04:	2204      	movs	r2, #4
 800bf06:	f102 0014 	add.w	r0, r2, #20
 800bf0a:	4298      	cmp	r0, r3
 800bf0c:	6871      	ldr	r1, [r6, #4]
 800bf0e:	d953      	bls.n	800bfb8 <_dtoa_r+0x300>
 800bf10:	4620      	mov	r0, r4
 800bf12:	f001 f9a5 	bl	800d260 <_Balloc>
 800bf16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf18:	6030      	str	r0, [r6, #0]
 800bf1a:	f1b9 0f0e 	cmp.w	r9, #14
 800bf1e:	f8d3 b000 	ldr.w	fp, [r3]
 800bf22:	f200 80e6 	bhi.w	800c0f2 <_dtoa_r+0x43a>
 800bf26:	2d00      	cmp	r5, #0
 800bf28:	f000 80e3 	beq.w	800c0f2 <_dtoa_r+0x43a>
 800bf2c:	ed9d 7b00 	vldr	d7, [sp]
 800bf30:	f1ba 0f00 	cmp.w	sl, #0
 800bf34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bf38:	dd74      	ble.n	800c024 <_dtoa_r+0x36c>
 800bf3a:	4a2a      	ldr	r2, [pc, #168]	; (800bfe4 <_dtoa_r+0x32c>)
 800bf3c:	f00a 030f 	and.w	r3, sl, #15
 800bf40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf44:	ed93 7b00 	vldr	d7, [r3]
 800bf48:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bf4c:	06f0      	lsls	r0, r6, #27
 800bf4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bf52:	d565      	bpl.n	800c020 <_dtoa_r+0x368>
 800bf54:	4b24      	ldr	r3, [pc, #144]	; (800bfe8 <_dtoa_r+0x330>)
 800bf56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf5e:	f7f4 fc7d 	bl	800085c <__aeabi_ddiv>
 800bf62:	e9cd 0100 	strd	r0, r1, [sp]
 800bf66:	f006 060f 	and.w	r6, r6, #15
 800bf6a:	2503      	movs	r5, #3
 800bf6c:	4f1e      	ldr	r7, [pc, #120]	; (800bfe8 <_dtoa_r+0x330>)
 800bf6e:	e04c      	b.n	800c00a <_dtoa_r+0x352>
 800bf70:	2301      	movs	r3, #1
 800bf72:	930a      	str	r3, [sp, #40]	; 0x28
 800bf74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf76:	4453      	add	r3, sl
 800bf78:	f103 0901 	add.w	r9, r3, #1
 800bf7c:	9302      	str	r3, [sp, #8]
 800bf7e:	464b      	mov	r3, r9
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	bfb8      	it	lt
 800bf84:	2301      	movlt	r3, #1
 800bf86:	e7ba      	b.n	800befe <_dtoa_r+0x246>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	e7b2      	b.n	800bef2 <_dtoa_r+0x23a>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	e7f0      	b.n	800bf72 <_dtoa_r+0x2ba>
 800bf90:	2501      	movs	r5, #1
 800bf92:	2300      	movs	r3, #0
 800bf94:	9306      	str	r3, [sp, #24]
 800bf96:	950a      	str	r5, [sp, #40]	; 0x28
 800bf98:	f04f 33ff 	mov.w	r3, #4294967295
 800bf9c:	9302      	str	r3, [sp, #8]
 800bf9e:	4699      	mov	r9, r3
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	2312      	movs	r3, #18
 800bfa4:	920b      	str	r2, [sp, #44]	; 0x2c
 800bfa6:	e7aa      	b.n	800befe <_dtoa_r+0x246>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	930a      	str	r3, [sp, #40]	; 0x28
 800bfac:	e7f4      	b.n	800bf98 <_dtoa_r+0x2e0>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	9302      	str	r3, [sp, #8]
 800bfb2:	4699      	mov	r9, r3
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	e7f5      	b.n	800bfa4 <_dtoa_r+0x2ec>
 800bfb8:	3101      	adds	r1, #1
 800bfba:	6071      	str	r1, [r6, #4]
 800bfbc:	0052      	lsls	r2, r2, #1
 800bfbe:	e7a2      	b.n	800bf06 <_dtoa_r+0x24e>
 800bfc0:	636f4361 	.word	0x636f4361
 800bfc4:	3fd287a7 	.word	0x3fd287a7
 800bfc8:	8b60c8b3 	.word	0x8b60c8b3
 800bfcc:	3fc68a28 	.word	0x3fc68a28
 800bfd0:	509f79fb 	.word	0x509f79fb
 800bfd4:	3fd34413 	.word	0x3fd34413
 800bfd8:	7ff00000 	.word	0x7ff00000
 800bfdc:	0800e703 	.word	0x0800e703
 800bfe0:	3ff80000 	.word	0x3ff80000
 800bfe4:	0800e918 	.word	0x0800e918
 800bfe8:	0800e8f0 	.word	0x0800e8f0
 800bfec:	0800e88a 	.word	0x0800e88a
 800bff0:	07f1      	lsls	r1, r6, #31
 800bff2:	d508      	bpl.n	800c006 <_dtoa_r+0x34e>
 800bff4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bffc:	f7f4 fb04 	bl	8000608 <__aeabi_dmul>
 800c000:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c004:	3501      	adds	r5, #1
 800c006:	1076      	asrs	r6, r6, #1
 800c008:	3708      	adds	r7, #8
 800c00a:	2e00      	cmp	r6, #0
 800c00c:	d1f0      	bne.n	800bff0 <_dtoa_r+0x338>
 800c00e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c012:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c016:	f7f4 fc21 	bl	800085c <__aeabi_ddiv>
 800c01a:	e9cd 0100 	strd	r0, r1, [sp]
 800c01e:	e01a      	b.n	800c056 <_dtoa_r+0x39e>
 800c020:	2502      	movs	r5, #2
 800c022:	e7a3      	b.n	800bf6c <_dtoa_r+0x2b4>
 800c024:	f000 80a0 	beq.w	800c168 <_dtoa_r+0x4b0>
 800c028:	f1ca 0600 	rsb	r6, sl, #0
 800c02c:	4b9f      	ldr	r3, [pc, #636]	; (800c2ac <_dtoa_r+0x5f4>)
 800c02e:	4fa0      	ldr	r7, [pc, #640]	; (800c2b0 <_dtoa_r+0x5f8>)
 800c030:	f006 020f 	and.w	r2, r6, #15
 800c034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c040:	f7f4 fae2 	bl	8000608 <__aeabi_dmul>
 800c044:	e9cd 0100 	strd	r0, r1, [sp]
 800c048:	1136      	asrs	r6, r6, #4
 800c04a:	2300      	movs	r3, #0
 800c04c:	2502      	movs	r5, #2
 800c04e:	2e00      	cmp	r6, #0
 800c050:	d17f      	bne.n	800c152 <_dtoa_r+0x49a>
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1e1      	bne.n	800c01a <_dtoa_r+0x362>
 800c056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 8087 	beq.w	800c16c <_dtoa_r+0x4b4>
 800c05e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c062:	2200      	movs	r2, #0
 800c064:	4b93      	ldr	r3, [pc, #588]	; (800c2b4 <_dtoa_r+0x5fc>)
 800c066:	4630      	mov	r0, r6
 800c068:	4639      	mov	r1, r7
 800c06a:	f7f4 fd3f 	bl	8000aec <__aeabi_dcmplt>
 800c06e:	2800      	cmp	r0, #0
 800c070:	d07c      	beq.n	800c16c <_dtoa_r+0x4b4>
 800c072:	f1b9 0f00 	cmp.w	r9, #0
 800c076:	d079      	beq.n	800c16c <_dtoa_r+0x4b4>
 800c078:	9b02      	ldr	r3, [sp, #8]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	dd35      	ble.n	800c0ea <_dtoa_r+0x432>
 800c07e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c082:	9308      	str	r3, [sp, #32]
 800c084:	4639      	mov	r1, r7
 800c086:	2200      	movs	r2, #0
 800c088:	4b8b      	ldr	r3, [pc, #556]	; (800c2b8 <_dtoa_r+0x600>)
 800c08a:	4630      	mov	r0, r6
 800c08c:	f7f4 fabc 	bl	8000608 <__aeabi_dmul>
 800c090:	e9cd 0100 	strd	r0, r1, [sp]
 800c094:	9f02      	ldr	r7, [sp, #8]
 800c096:	3501      	adds	r5, #1
 800c098:	4628      	mov	r0, r5
 800c09a:	f7f4 fa4b 	bl	8000534 <__aeabi_i2d>
 800c09e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0a2:	f7f4 fab1 	bl	8000608 <__aeabi_dmul>
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	4b84      	ldr	r3, [pc, #528]	; (800c2bc <_dtoa_r+0x604>)
 800c0aa:	f7f4 f8f7 	bl	800029c <__adddf3>
 800c0ae:	4605      	mov	r5, r0
 800c0b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c0b4:	2f00      	cmp	r7, #0
 800c0b6:	d15d      	bne.n	800c174 <_dtoa_r+0x4bc>
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	4b81      	ldr	r3, [pc, #516]	; (800c2c0 <_dtoa_r+0x608>)
 800c0bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0c0:	f7f4 f8ea 	bl	8000298 <__aeabi_dsub>
 800c0c4:	462a      	mov	r2, r5
 800c0c6:	4633      	mov	r3, r6
 800c0c8:	e9cd 0100 	strd	r0, r1, [sp]
 800c0cc:	f7f4 fd2c 	bl	8000b28 <__aeabi_dcmpgt>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	f040 8288 	bne.w	800c5e6 <_dtoa_r+0x92e>
 800c0d6:	462a      	mov	r2, r5
 800c0d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c0dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0e0:	f7f4 fd04 	bl	8000aec <__aeabi_dcmplt>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	f040 827c 	bne.w	800c5e2 <_dtoa_r+0x92a>
 800c0ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0ee:	e9cd 2300 	strd	r2, r3, [sp]
 800c0f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f2c0 8150 	blt.w	800c39a <_dtoa_r+0x6e2>
 800c0fa:	f1ba 0f0e 	cmp.w	sl, #14
 800c0fe:	f300 814c 	bgt.w	800c39a <_dtoa_r+0x6e2>
 800c102:	4b6a      	ldr	r3, [pc, #424]	; (800c2ac <_dtoa_r+0x5f4>)
 800c104:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c108:	ed93 7b00 	vldr	d7, [r3]
 800c10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c10e:	2b00      	cmp	r3, #0
 800c110:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c114:	f280 80d8 	bge.w	800c2c8 <_dtoa_r+0x610>
 800c118:	f1b9 0f00 	cmp.w	r9, #0
 800c11c:	f300 80d4 	bgt.w	800c2c8 <_dtoa_r+0x610>
 800c120:	f040 825e 	bne.w	800c5e0 <_dtoa_r+0x928>
 800c124:	2200      	movs	r2, #0
 800c126:	4b66      	ldr	r3, [pc, #408]	; (800c2c0 <_dtoa_r+0x608>)
 800c128:	ec51 0b17 	vmov	r0, r1, d7
 800c12c:	f7f4 fa6c 	bl	8000608 <__aeabi_dmul>
 800c130:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c134:	f7f4 fcee 	bl	8000b14 <__aeabi_dcmpge>
 800c138:	464f      	mov	r7, r9
 800c13a:	464e      	mov	r6, r9
 800c13c:	2800      	cmp	r0, #0
 800c13e:	f040 8234 	bne.w	800c5aa <_dtoa_r+0x8f2>
 800c142:	2331      	movs	r3, #49	; 0x31
 800c144:	f10b 0501 	add.w	r5, fp, #1
 800c148:	f88b 3000 	strb.w	r3, [fp]
 800c14c:	f10a 0a01 	add.w	sl, sl, #1
 800c150:	e22f      	b.n	800c5b2 <_dtoa_r+0x8fa>
 800c152:	07f2      	lsls	r2, r6, #31
 800c154:	d505      	bpl.n	800c162 <_dtoa_r+0x4aa>
 800c156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c15a:	f7f4 fa55 	bl	8000608 <__aeabi_dmul>
 800c15e:	3501      	adds	r5, #1
 800c160:	2301      	movs	r3, #1
 800c162:	1076      	asrs	r6, r6, #1
 800c164:	3708      	adds	r7, #8
 800c166:	e772      	b.n	800c04e <_dtoa_r+0x396>
 800c168:	2502      	movs	r5, #2
 800c16a:	e774      	b.n	800c056 <_dtoa_r+0x39e>
 800c16c:	f8cd a020 	str.w	sl, [sp, #32]
 800c170:	464f      	mov	r7, r9
 800c172:	e791      	b.n	800c098 <_dtoa_r+0x3e0>
 800c174:	4b4d      	ldr	r3, [pc, #308]	; (800c2ac <_dtoa_r+0x5f4>)
 800c176:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c17a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c180:	2b00      	cmp	r3, #0
 800c182:	d047      	beq.n	800c214 <_dtoa_r+0x55c>
 800c184:	4602      	mov	r2, r0
 800c186:	460b      	mov	r3, r1
 800c188:	2000      	movs	r0, #0
 800c18a:	494e      	ldr	r1, [pc, #312]	; (800c2c4 <_dtoa_r+0x60c>)
 800c18c:	f7f4 fb66 	bl	800085c <__aeabi_ddiv>
 800c190:	462a      	mov	r2, r5
 800c192:	4633      	mov	r3, r6
 800c194:	f7f4 f880 	bl	8000298 <__aeabi_dsub>
 800c198:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c19c:	465d      	mov	r5, fp
 800c19e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1a2:	f7f4 fce1 	bl	8000b68 <__aeabi_d2iz>
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	f7f4 f9c4 	bl	8000534 <__aeabi_i2d>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1b4:	f7f4 f870 	bl	8000298 <__aeabi_dsub>
 800c1b8:	3630      	adds	r6, #48	; 0x30
 800c1ba:	f805 6b01 	strb.w	r6, [r5], #1
 800c1be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c1c2:	e9cd 0100 	strd	r0, r1, [sp]
 800c1c6:	f7f4 fc91 	bl	8000aec <__aeabi_dcmplt>
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d163      	bne.n	800c296 <_dtoa_r+0x5de>
 800c1ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	4937      	ldr	r1, [pc, #220]	; (800c2b4 <_dtoa_r+0x5fc>)
 800c1d6:	f7f4 f85f 	bl	8000298 <__aeabi_dsub>
 800c1da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c1de:	f7f4 fc85 	bl	8000aec <__aeabi_dcmplt>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	f040 80b7 	bne.w	800c356 <_dtoa_r+0x69e>
 800c1e8:	eba5 030b 	sub.w	r3, r5, fp
 800c1ec:	429f      	cmp	r7, r3
 800c1ee:	f77f af7c 	ble.w	800c0ea <_dtoa_r+0x432>
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4b30      	ldr	r3, [pc, #192]	; (800c2b8 <_dtoa_r+0x600>)
 800c1f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1fa:	f7f4 fa05 	bl	8000608 <__aeabi_dmul>
 800c1fe:	2200      	movs	r2, #0
 800c200:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c204:	4b2c      	ldr	r3, [pc, #176]	; (800c2b8 <_dtoa_r+0x600>)
 800c206:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c20a:	f7f4 f9fd 	bl	8000608 <__aeabi_dmul>
 800c20e:	e9cd 0100 	strd	r0, r1, [sp]
 800c212:	e7c4      	b.n	800c19e <_dtoa_r+0x4e6>
 800c214:	462a      	mov	r2, r5
 800c216:	4633      	mov	r3, r6
 800c218:	f7f4 f9f6 	bl	8000608 <__aeabi_dmul>
 800c21c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c220:	eb0b 0507 	add.w	r5, fp, r7
 800c224:	465e      	mov	r6, fp
 800c226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c22a:	f7f4 fc9d 	bl	8000b68 <__aeabi_d2iz>
 800c22e:	4607      	mov	r7, r0
 800c230:	f7f4 f980 	bl	8000534 <__aeabi_i2d>
 800c234:	3730      	adds	r7, #48	; 0x30
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c23e:	f7f4 f82b 	bl	8000298 <__aeabi_dsub>
 800c242:	f806 7b01 	strb.w	r7, [r6], #1
 800c246:	42ae      	cmp	r6, r5
 800c248:	e9cd 0100 	strd	r0, r1, [sp]
 800c24c:	f04f 0200 	mov.w	r2, #0
 800c250:	d126      	bne.n	800c2a0 <_dtoa_r+0x5e8>
 800c252:	4b1c      	ldr	r3, [pc, #112]	; (800c2c4 <_dtoa_r+0x60c>)
 800c254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c258:	f7f4 f820 	bl	800029c <__adddf3>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c264:	f7f4 fc60 	bl	8000b28 <__aeabi_dcmpgt>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d174      	bne.n	800c356 <_dtoa_r+0x69e>
 800c26c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c270:	2000      	movs	r0, #0
 800c272:	4914      	ldr	r1, [pc, #80]	; (800c2c4 <_dtoa_r+0x60c>)
 800c274:	f7f4 f810 	bl	8000298 <__aeabi_dsub>
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c280:	f7f4 fc34 	bl	8000aec <__aeabi_dcmplt>
 800c284:	2800      	cmp	r0, #0
 800c286:	f43f af30 	beq.w	800c0ea <_dtoa_r+0x432>
 800c28a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c28e:	2b30      	cmp	r3, #48	; 0x30
 800c290:	f105 32ff 	add.w	r2, r5, #4294967295
 800c294:	d002      	beq.n	800c29c <_dtoa_r+0x5e4>
 800c296:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c29a:	e04a      	b.n	800c332 <_dtoa_r+0x67a>
 800c29c:	4615      	mov	r5, r2
 800c29e:	e7f4      	b.n	800c28a <_dtoa_r+0x5d2>
 800c2a0:	4b05      	ldr	r3, [pc, #20]	; (800c2b8 <_dtoa_r+0x600>)
 800c2a2:	f7f4 f9b1 	bl	8000608 <__aeabi_dmul>
 800c2a6:	e9cd 0100 	strd	r0, r1, [sp]
 800c2aa:	e7bc      	b.n	800c226 <_dtoa_r+0x56e>
 800c2ac:	0800e918 	.word	0x0800e918
 800c2b0:	0800e8f0 	.word	0x0800e8f0
 800c2b4:	3ff00000 	.word	0x3ff00000
 800c2b8:	40240000 	.word	0x40240000
 800c2bc:	401c0000 	.word	0x401c0000
 800c2c0:	40140000 	.word	0x40140000
 800c2c4:	3fe00000 	.word	0x3fe00000
 800c2c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c2cc:	465d      	mov	r5, fp
 800c2ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	4639      	mov	r1, r7
 800c2d6:	f7f4 fac1 	bl	800085c <__aeabi_ddiv>
 800c2da:	f7f4 fc45 	bl	8000b68 <__aeabi_d2iz>
 800c2de:	4680      	mov	r8, r0
 800c2e0:	f7f4 f928 	bl	8000534 <__aeabi_i2d>
 800c2e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2e8:	f7f4 f98e 	bl	8000608 <__aeabi_dmul>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	4639      	mov	r1, r7
 800c2f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c2f8:	f7f3 ffce 	bl	8000298 <__aeabi_dsub>
 800c2fc:	f805 6b01 	strb.w	r6, [r5], #1
 800c300:	eba5 060b 	sub.w	r6, r5, fp
 800c304:	45b1      	cmp	r9, r6
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	d139      	bne.n	800c380 <_dtoa_r+0x6c8>
 800c30c:	f7f3 ffc6 	bl	800029c <__adddf3>
 800c310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c314:	4606      	mov	r6, r0
 800c316:	460f      	mov	r7, r1
 800c318:	f7f4 fc06 	bl	8000b28 <__aeabi_dcmpgt>
 800c31c:	b9c8      	cbnz	r0, 800c352 <_dtoa_r+0x69a>
 800c31e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c322:	4630      	mov	r0, r6
 800c324:	4639      	mov	r1, r7
 800c326:	f7f4 fbd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c32a:	b110      	cbz	r0, 800c332 <_dtoa_r+0x67a>
 800c32c:	f018 0f01 	tst.w	r8, #1
 800c330:	d10f      	bne.n	800c352 <_dtoa_r+0x69a>
 800c332:	9904      	ldr	r1, [sp, #16]
 800c334:	4620      	mov	r0, r4
 800c336:	f000 ffc7 	bl	800d2c8 <_Bfree>
 800c33a:	2300      	movs	r3, #0
 800c33c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c33e:	702b      	strb	r3, [r5, #0]
 800c340:	f10a 0301 	add.w	r3, sl, #1
 800c344:	6013      	str	r3, [r2, #0]
 800c346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f000 8241 	beq.w	800c7d0 <_dtoa_r+0xb18>
 800c34e:	601d      	str	r5, [r3, #0]
 800c350:	e23e      	b.n	800c7d0 <_dtoa_r+0xb18>
 800c352:	f8cd a020 	str.w	sl, [sp, #32]
 800c356:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c35a:	2a39      	cmp	r2, #57	; 0x39
 800c35c:	f105 33ff 	add.w	r3, r5, #4294967295
 800c360:	d108      	bne.n	800c374 <_dtoa_r+0x6bc>
 800c362:	459b      	cmp	fp, r3
 800c364:	d10a      	bne.n	800c37c <_dtoa_r+0x6c4>
 800c366:	9b08      	ldr	r3, [sp, #32]
 800c368:	3301      	adds	r3, #1
 800c36a:	9308      	str	r3, [sp, #32]
 800c36c:	2330      	movs	r3, #48	; 0x30
 800c36e:	f88b 3000 	strb.w	r3, [fp]
 800c372:	465b      	mov	r3, fp
 800c374:	781a      	ldrb	r2, [r3, #0]
 800c376:	3201      	adds	r2, #1
 800c378:	701a      	strb	r2, [r3, #0]
 800c37a:	e78c      	b.n	800c296 <_dtoa_r+0x5de>
 800c37c:	461d      	mov	r5, r3
 800c37e:	e7ea      	b.n	800c356 <_dtoa_r+0x69e>
 800c380:	2200      	movs	r2, #0
 800c382:	4b9b      	ldr	r3, [pc, #620]	; (800c5f0 <_dtoa_r+0x938>)
 800c384:	f7f4 f940 	bl	8000608 <__aeabi_dmul>
 800c388:	2200      	movs	r2, #0
 800c38a:	2300      	movs	r3, #0
 800c38c:	4606      	mov	r6, r0
 800c38e:	460f      	mov	r7, r1
 800c390:	f7f4 fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 800c394:	2800      	cmp	r0, #0
 800c396:	d09a      	beq.n	800c2ce <_dtoa_r+0x616>
 800c398:	e7cb      	b.n	800c332 <_dtoa_r+0x67a>
 800c39a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c39c:	2a00      	cmp	r2, #0
 800c39e:	f000 808b 	beq.w	800c4b8 <_dtoa_r+0x800>
 800c3a2:	9a06      	ldr	r2, [sp, #24]
 800c3a4:	2a01      	cmp	r2, #1
 800c3a6:	dc6e      	bgt.n	800c486 <_dtoa_r+0x7ce>
 800c3a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3aa:	2a00      	cmp	r2, #0
 800c3ac:	d067      	beq.n	800c47e <_dtoa_r+0x7c6>
 800c3ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3b2:	9f07      	ldr	r7, [sp, #28]
 800c3b4:	9d05      	ldr	r5, [sp, #20]
 800c3b6:	9a05      	ldr	r2, [sp, #20]
 800c3b8:	2101      	movs	r1, #1
 800c3ba:	441a      	add	r2, r3
 800c3bc:	4620      	mov	r0, r4
 800c3be:	9205      	str	r2, [sp, #20]
 800c3c0:	4498      	add	r8, r3
 800c3c2:	f001 f85f 	bl	800d484 <__i2b>
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	2d00      	cmp	r5, #0
 800c3ca:	dd0c      	ble.n	800c3e6 <_dtoa_r+0x72e>
 800c3cc:	f1b8 0f00 	cmp.w	r8, #0
 800c3d0:	dd09      	ble.n	800c3e6 <_dtoa_r+0x72e>
 800c3d2:	4545      	cmp	r5, r8
 800c3d4:	9a05      	ldr	r2, [sp, #20]
 800c3d6:	462b      	mov	r3, r5
 800c3d8:	bfa8      	it	ge
 800c3da:	4643      	movge	r3, r8
 800c3dc:	1ad2      	subs	r2, r2, r3
 800c3de:	9205      	str	r2, [sp, #20]
 800c3e0:	1aed      	subs	r5, r5, r3
 800c3e2:	eba8 0803 	sub.w	r8, r8, r3
 800c3e6:	9b07      	ldr	r3, [sp, #28]
 800c3e8:	b1eb      	cbz	r3, 800c426 <_dtoa_r+0x76e>
 800c3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d067      	beq.n	800c4c0 <_dtoa_r+0x808>
 800c3f0:	b18f      	cbz	r7, 800c416 <_dtoa_r+0x75e>
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	463a      	mov	r2, r7
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f001 f8e4 	bl	800d5c4 <__pow5mult>
 800c3fc:	9a04      	ldr	r2, [sp, #16]
 800c3fe:	4601      	mov	r1, r0
 800c400:	4606      	mov	r6, r0
 800c402:	4620      	mov	r0, r4
 800c404:	f001 f847 	bl	800d496 <__multiply>
 800c408:	9904      	ldr	r1, [sp, #16]
 800c40a:	9008      	str	r0, [sp, #32]
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 ff5b 	bl	800d2c8 <_Bfree>
 800c412:	9b08      	ldr	r3, [sp, #32]
 800c414:	9304      	str	r3, [sp, #16]
 800c416:	9b07      	ldr	r3, [sp, #28]
 800c418:	1bda      	subs	r2, r3, r7
 800c41a:	d004      	beq.n	800c426 <_dtoa_r+0x76e>
 800c41c:	9904      	ldr	r1, [sp, #16]
 800c41e:	4620      	mov	r0, r4
 800c420:	f001 f8d0 	bl	800d5c4 <__pow5mult>
 800c424:	9004      	str	r0, [sp, #16]
 800c426:	2101      	movs	r1, #1
 800c428:	4620      	mov	r0, r4
 800c42a:	f001 f82b 	bl	800d484 <__i2b>
 800c42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c430:	4607      	mov	r7, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 81d0 	beq.w	800c7d8 <_dtoa_r+0xb20>
 800c438:	461a      	mov	r2, r3
 800c43a:	4601      	mov	r1, r0
 800c43c:	4620      	mov	r0, r4
 800c43e:	f001 f8c1 	bl	800d5c4 <__pow5mult>
 800c442:	9b06      	ldr	r3, [sp, #24]
 800c444:	2b01      	cmp	r3, #1
 800c446:	4607      	mov	r7, r0
 800c448:	dc40      	bgt.n	800c4cc <_dtoa_r+0x814>
 800c44a:	9b00      	ldr	r3, [sp, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d139      	bne.n	800c4c4 <_dtoa_r+0x80c>
 800c450:	9b01      	ldr	r3, [sp, #4]
 800c452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c456:	2b00      	cmp	r3, #0
 800c458:	d136      	bne.n	800c4c8 <_dtoa_r+0x810>
 800c45a:	9b01      	ldr	r3, [sp, #4]
 800c45c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c460:	0d1b      	lsrs	r3, r3, #20
 800c462:	051b      	lsls	r3, r3, #20
 800c464:	b12b      	cbz	r3, 800c472 <_dtoa_r+0x7ba>
 800c466:	9b05      	ldr	r3, [sp, #20]
 800c468:	3301      	adds	r3, #1
 800c46a:	9305      	str	r3, [sp, #20]
 800c46c:	f108 0801 	add.w	r8, r8, #1
 800c470:	2301      	movs	r3, #1
 800c472:	9307      	str	r3, [sp, #28]
 800c474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c476:	2b00      	cmp	r3, #0
 800c478:	d12a      	bne.n	800c4d0 <_dtoa_r+0x818>
 800c47a:	2001      	movs	r0, #1
 800c47c:	e030      	b.n	800c4e0 <_dtoa_r+0x828>
 800c47e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c480:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c484:	e795      	b.n	800c3b2 <_dtoa_r+0x6fa>
 800c486:	9b07      	ldr	r3, [sp, #28]
 800c488:	f109 37ff 	add.w	r7, r9, #4294967295
 800c48c:	42bb      	cmp	r3, r7
 800c48e:	bfbf      	itttt	lt
 800c490:	9b07      	ldrlt	r3, [sp, #28]
 800c492:	9707      	strlt	r7, [sp, #28]
 800c494:	1afa      	sublt	r2, r7, r3
 800c496:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c498:	bfbb      	ittet	lt
 800c49a:	189b      	addlt	r3, r3, r2
 800c49c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c49e:	1bdf      	subge	r7, r3, r7
 800c4a0:	2700      	movlt	r7, #0
 800c4a2:	f1b9 0f00 	cmp.w	r9, #0
 800c4a6:	bfb5      	itete	lt
 800c4a8:	9b05      	ldrlt	r3, [sp, #20]
 800c4aa:	9d05      	ldrge	r5, [sp, #20]
 800c4ac:	eba3 0509 	sublt.w	r5, r3, r9
 800c4b0:	464b      	movge	r3, r9
 800c4b2:	bfb8      	it	lt
 800c4b4:	2300      	movlt	r3, #0
 800c4b6:	e77e      	b.n	800c3b6 <_dtoa_r+0x6fe>
 800c4b8:	9f07      	ldr	r7, [sp, #28]
 800c4ba:	9d05      	ldr	r5, [sp, #20]
 800c4bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c4be:	e783      	b.n	800c3c8 <_dtoa_r+0x710>
 800c4c0:	9a07      	ldr	r2, [sp, #28]
 800c4c2:	e7ab      	b.n	800c41c <_dtoa_r+0x764>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	e7d4      	b.n	800c472 <_dtoa_r+0x7ba>
 800c4c8:	9b00      	ldr	r3, [sp, #0]
 800c4ca:	e7d2      	b.n	800c472 <_dtoa_r+0x7ba>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	9307      	str	r3, [sp, #28]
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c4d6:	6918      	ldr	r0, [r3, #16]
 800c4d8:	f000 ff86 	bl	800d3e8 <__hi0bits>
 800c4dc:	f1c0 0020 	rsb	r0, r0, #32
 800c4e0:	4440      	add	r0, r8
 800c4e2:	f010 001f 	ands.w	r0, r0, #31
 800c4e6:	d047      	beq.n	800c578 <_dtoa_r+0x8c0>
 800c4e8:	f1c0 0320 	rsb	r3, r0, #32
 800c4ec:	2b04      	cmp	r3, #4
 800c4ee:	dd3b      	ble.n	800c568 <_dtoa_r+0x8b0>
 800c4f0:	9b05      	ldr	r3, [sp, #20]
 800c4f2:	f1c0 001c 	rsb	r0, r0, #28
 800c4f6:	4403      	add	r3, r0
 800c4f8:	9305      	str	r3, [sp, #20]
 800c4fa:	4405      	add	r5, r0
 800c4fc:	4480      	add	r8, r0
 800c4fe:	9b05      	ldr	r3, [sp, #20]
 800c500:	2b00      	cmp	r3, #0
 800c502:	dd05      	ble.n	800c510 <_dtoa_r+0x858>
 800c504:	461a      	mov	r2, r3
 800c506:	9904      	ldr	r1, [sp, #16]
 800c508:	4620      	mov	r0, r4
 800c50a:	f001 f8a9 	bl	800d660 <__lshift>
 800c50e:	9004      	str	r0, [sp, #16]
 800c510:	f1b8 0f00 	cmp.w	r8, #0
 800c514:	dd05      	ble.n	800c522 <_dtoa_r+0x86a>
 800c516:	4639      	mov	r1, r7
 800c518:	4642      	mov	r2, r8
 800c51a:	4620      	mov	r0, r4
 800c51c:	f001 f8a0 	bl	800d660 <__lshift>
 800c520:	4607      	mov	r7, r0
 800c522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c524:	b353      	cbz	r3, 800c57c <_dtoa_r+0x8c4>
 800c526:	4639      	mov	r1, r7
 800c528:	9804      	ldr	r0, [sp, #16]
 800c52a:	f001 f8ed 	bl	800d708 <__mcmp>
 800c52e:	2800      	cmp	r0, #0
 800c530:	da24      	bge.n	800c57c <_dtoa_r+0x8c4>
 800c532:	2300      	movs	r3, #0
 800c534:	220a      	movs	r2, #10
 800c536:	9904      	ldr	r1, [sp, #16]
 800c538:	4620      	mov	r0, r4
 800c53a:	f000 fedc 	bl	800d2f6 <__multadd>
 800c53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c540:	9004      	str	r0, [sp, #16]
 800c542:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 814d 	beq.w	800c7e6 <_dtoa_r+0xb2e>
 800c54c:	2300      	movs	r3, #0
 800c54e:	4631      	mov	r1, r6
 800c550:	220a      	movs	r2, #10
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fecf 	bl	800d2f6 <__multadd>
 800c558:	9b02      	ldr	r3, [sp, #8]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	4606      	mov	r6, r0
 800c55e:	dc4f      	bgt.n	800c600 <_dtoa_r+0x948>
 800c560:	9b06      	ldr	r3, [sp, #24]
 800c562:	2b02      	cmp	r3, #2
 800c564:	dd4c      	ble.n	800c600 <_dtoa_r+0x948>
 800c566:	e011      	b.n	800c58c <_dtoa_r+0x8d4>
 800c568:	d0c9      	beq.n	800c4fe <_dtoa_r+0x846>
 800c56a:	9a05      	ldr	r2, [sp, #20]
 800c56c:	331c      	adds	r3, #28
 800c56e:	441a      	add	r2, r3
 800c570:	9205      	str	r2, [sp, #20]
 800c572:	441d      	add	r5, r3
 800c574:	4498      	add	r8, r3
 800c576:	e7c2      	b.n	800c4fe <_dtoa_r+0x846>
 800c578:	4603      	mov	r3, r0
 800c57a:	e7f6      	b.n	800c56a <_dtoa_r+0x8b2>
 800c57c:	f1b9 0f00 	cmp.w	r9, #0
 800c580:	dc38      	bgt.n	800c5f4 <_dtoa_r+0x93c>
 800c582:	9b06      	ldr	r3, [sp, #24]
 800c584:	2b02      	cmp	r3, #2
 800c586:	dd35      	ble.n	800c5f4 <_dtoa_r+0x93c>
 800c588:	f8cd 9008 	str.w	r9, [sp, #8]
 800c58c:	9b02      	ldr	r3, [sp, #8]
 800c58e:	b963      	cbnz	r3, 800c5aa <_dtoa_r+0x8f2>
 800c590:	4639      	mov	r1, r7
 800c592:	2205      	movs	r2, #5
 800c594:	4620      	mov	r0, r4
 800c596:	f000 feae 	bl	800d2f6 <__multadd>
 800c59a:	4601      	mov	r1, r0
 800c59c:	4607      	mov	r7, r0
 800c59e:	9804      	ldr	r0, [sp, #16]
 800c5a0:	f001 f8b2 	bl	800d708 <__mcmp>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	f73f adcc 	bgt.w	800c142 <_dtoa_r+0x48a>
 800c5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ac:	465d      	mov	r5, fp
 800c5ae:	ea6f 0a03 	mvn.w	sl, r3
 800c5b2:	f04f 0900 	mov.w	r9, #0
 800c5b6:	4639      	mov	r1, r7
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f000 fe85 	bl	800d2c8 <_Bfree>
 800c5be:	2e00      	cmp	r6, #0
 800c5c0:	f43f aeb7 	beq.w	800c332 <_dtoa_r+0x67a>
 800c5c4:	f1b9 0f00 	cmp.w	r9, #0
 800c5c8:	d005      	beq.n	800c5d6 <_dtoa_r+0x91e>
 800c5ca:	45b1      	cmp	r9, r6
 800c5cc:	d003      	beq.n	800c5d6 <_dtoa_r+0x91e>
 800c5ce:	4649      	mov	r1, r9
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f000 fe79 	bl	800d2c8 <_Bfree>
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f000 fe75 	bl	800d2c8 <_Bfree>
 800c5de:	e6a8      	b.n	800c332 <_dtoa_r+0x67a>
 800c5e0:	2700      	movs	r7, #0
 800c5e2:	463e      	mov	r6, r7
 800c5e4:	e7e1      	b.n	800c5aa <_dtoa_r+0x8f2>
 800c5e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c5ea:	463e      	mov	r6, r7
 800c5ec:	e5a9      	b.n	800c142 <_dtoa_r+0x48a>
 800c5ee:	bf00      	nop
 800c5f0:	40240000 	.word	0x40240000
 800c5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 80fa 	beq.w	800c7f4 <_dtoa_r+0xb3c>
 800c600:	2d00      	cmp	r5, #0
 800c602:	dd05      	ble.n	800c610 <_dtoa_r+0x958>
 800c604:	4631      	mov	r1, r6
 800c606:	462a      	mov	r2, r5
 800c608:	4620      	mov	r0, r4
 800c60a:	f001 f829 	bl	800d660 <__lshift>
 800c60e:	4606      	mov	r6, r0
 800c610:	9b07      	ldr	r3, [sp, #28]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d04c      	beq.n	800c6b0 <_dtoa_r+0x9f8>
 800c616:	6871      	ldr	r1, [r6, #4]
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 fe21 	bl	800d260 <_Balloc>
 800c61e:	6932      	ldr	r2, [r6, #16]
 800c620:	3202      	adds	r2, #2
 800c622:	4605      	mov	r5, r0
 800c624:	0092      	lsls	r2, r2, #2
 800c626:	f106 010c 	add.w	r1, r6, #12
 800c62a:	300c      	adds	r0, #12
 800c62c:	f7fd fc47 	bl	8009ebe <memcpy>
 800c630:	2201      	movs	r2, #1
 800c632:	4629      	mov	r1, r5
 800c634:	4620      	mov	r0, r4
 800c636:	f001 f813 	bl	800d660 <__lshift>
 800c63a:	9b00      	ldr	r3, [sp, #0]
 800c63c:	f8cd b014 	str.w	fp, [sp, #20]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	46b1      	mov	r9, r6
 800c646:	9307      	str	r3, [sp, #28]
 800c648:	4606      	mov	r6, r0
 800c64a:	4639      	mov	r1, r7
 800c64c:	9804      	ldr	r0, [sp, #16]
 800c64e:	f7ff faa7 	bl	800bba0 <quorem>
 800c652:	4649      	mov	r1, r9
 800c654:	4605      	mov	r5, r0
 800c656:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c65a:	9804      	ldr	r0, [sp, #16]
 800c65c:	f001 f854 	bl	800d708 <__mcmp>
 800c660:	4632      	mov	r2, r6
 800c662:	9000      	str	r0, [sp, #0]
 800c664:	4639      	mov	r1, r7
 800c666:	4620      	mov	r0, r4
 800c668:	f001 f868 	bl	800d73c <__mdiff>
 800c66c:	68c3      	ldr	r3, [r0, #12]
 800c66e:	4602      	mov	r2, r0
 800c670:	bb03      	cbnz	r3, 800c6b4 <_dtoa_r+0x9fc>
 800c672:	4601      	mov	r1, r0
 800c674:	9008      	str	r0, [sp, #32]
 800c676:	9804      	ldr	r0, [sp, #16]
 800c678:	f001 f846 	bl	800d708 <__mcmp>
 800c67c:	9a08      	ldr	r2, [sp, #32]
 800c67e:	4603      	mov	r3, r0
 800c680:	4611      	mov	r1, r2
 800c682:	4620      	mov	r0, r4
 800c684:	9308      	str	r3, [sp, #32]
 800c686:	f000 fe1f 	bl	800d2c8 <_Bfree>
 800c68a:	9b08      	ldr	r3, [sp, #32]
 800c68c:	b9a3      	cbnz	r3, 800c6b8 <_dtoa_r+0xa00>
 800c68e:	9a06      	ldr	r2, [sp, #24]
 800c690:	b992      	cbnz	r2, 800c6b8 <_dtoa_r+0xa00>
 800c692:	9a07      	ldr	r2, [sp, #28]
 800c694:	b982      	cbnz	r2, 800c6b8 <_dtoa_r+0xa00>
 800c696:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c69a:	d029      	beq.n	800c6f0 <_dtoa_r+0xa38>
 800c69c:	9b00      	ldr	r3, [sp, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	dd01      	ble.n	800c6a6 <_dtoa_r+0x9ee>
 800c6a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c6a6:	9b05      	ldr	r3, [sp, #20]
 800c6a8:	1c5d      	adds	r5, r3, #1
 800c6aa:	f883 8000 	strb.w	r8, [r3]
 800c6ae:	e782      	b.n	800c5b6 <_dtoa_r+0x8fe>
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	e7c2      	b.n	800c63a <_dtoa_r+0x982>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e7e3      	b.n	800c680 <_dtoa_r+0x9c8>
 800c6b8:	9a00      	ldr	r2, [sp, #0]
 800c6ba:	2a00      	cmp	r2, #0
 800c6bc:	db04      	blt.n	800c6c8 <_dtoa_r+0xa10>
 800c6be:	d125      	bne.n	800c70c <_dtoa_r+0xa54>
 800c6c0:	9a06      	ldr	r2, [sp, #24]
 800c6c2:	bb1a      	cbnz	r2, 800c70c <_dtoa_r+0xa54>
 800c6c4:	9a07      	ldr	r2, [sp, #28]
 800c6c6:	bb0a      	cbnz	r2, 800c70c <_dtoa_r+0xa54>
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	ddec      	ble.n	800c6a6 <_dtoa_r+0x9ee>
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	9904      	ldr	r1, [sp, #16]
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 ffc5 	bl	800d660 <__lshift>
 800c6d6:	4639      	mov	r1, r7
 800c6d8:	9004      	str	r0, [sp, #16]
 800c6da:	f001 f815 	bl	800d708 <__mcmp>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	dc03      	bgt.n	800c6ea <_dtoa_r+0xa32>
 800c6e2:	d1e0      	bne.n	800c6a6 <_dtoa_r+0x9ee>
 800c6e4:	f018 0f01 	tst.w	r8, #1
 800c6e8:	d0dd      	beq.n	800c6a6 <_dtoa_r+0x9ee>
 800c6ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c6ee:	d1d8      	bne.n	800c6a2 <_dtoa_r+0x9ea>
 800c6f0:	9b05      	ldr	r3, [sp, #20]
 800c6f2:	9a05      	ldr	r2, [sp, #20]
 800c6f4:	1c5d      	adds	r5, r3, #1
 800c6f6:	2339      	movs	r3, #57	; 0x39
 800c6f8:	7013      	strb	r3, [r2, #0]
 800c6fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6fe:	2b39      	cmp	r3, #57	; 0x39
 800c700:	f105 32ff 	add.w	r2, r5, #4294967295
 800c704:	d04f      	beq.n	800c7a6 <_dtoa_r+0xaee>
 800c706:	3301      	adds	r3, #1
 800c708:	7013      	strb	r3, [r2, #0]
 800c70a:	e754      	b.n	800c5b6 <_dtoa_r+0x8fe>
 800c70c:	9a05      	ldr	r2, [sp, #20]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f102 0501 	add.w	r5, r2, #1
 800c714:	dd06      	ble.n	800c724 <_dtoa_r+0xa6c>
 800c716:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c71a:	d0e9      	beq.n	800c6f0 <_dtoa_r+0xa38>
 800c71c:	f108 0801 	add.w	r8, r8, #1
 800c720:	9b05      	ldr	r3, [sp, #20]
 800c722:	e7c2      	b.n	800c6aa <_dtoa_r+0x9f2>
 800c724:	9a02      	ldr	r2, [sp, #8]
 800c726:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c72a:	eba5 030b 	sub.w	r3, r5, fp
 800c72e:	4293      	cmp	r3, r2
 800c730:	d021      	beq.n	800c776 <_dtoa_r+0xabe>
 800c732:	2300      	movs	r3, #0
 800c734:	220a      	movs	r2, #10
 800c736:	9904      	ldr	r1, [sp, #16]
 800c738:	4620      	mov	r0, r4
 800c73a:	f000 fddc 	bl	800d2f6 <__multadd>
 800c73e:	45b1      	cmp	r9, r6
 800c740:	9004      	str	r0, [sp, #16]
 800c742:	f04f 0300 	mov.w	r3, #0
 800c746:	f04f 020a 	mov.w	r2, #10
 800c74a:	4649      	mov	r1, r9
 800c74c:	4620      	mov	r0, r4
 800c74e:	d105      	bne.n	800c75c <_dtoa_r+0xaa4>
 800c750:	f000 fdd1 	bl	800d2f6 <__multadd>
 800c754:	4681      	mov	r9, r0
 800c756:	4606      	mov	r6, r0
 800c758:	9505      	str	r5, [sp, #20]
 800c75a:	e776      	b.n	800c64a <_dtoa_r+0x992>
 800c75c:	f000 fdcb 	bl	800d2f6 <__multadd>
 800c760:	4631      	mov	r1, r6
 800c762:	4681      	mov	r9, r0
 800c764:	2300      	movs	r3, #0
 800c766:	220a      	movs	r2, #10
 800c768:	4620      	mov	r0, r4
 800c76a:	f000 fdc4 	bl	800d2f6 <__multadd>
 800c76e:	4606      	mov	r6, r0
 800c770:	e7f2      	b.n	800c758 <_dtoa_r+0xaa0>
 800c772:	f04f 0900 	mov.w	r9, #0
 800c776:	2201      	movs	r2, #1
 800c778:	9904      	ldr	r1, [sp, #16]
 800c77a:	4620      	mov	r0, r4
 800c77c:	f000 ff70 	bl	800d660 <__lshift>
 800c780:	4639      	mov	r1, r7
 800c782:	9004      	str	r0, [sp, #16]
 800c784:	f000 ffc0 	bl	800d708 <__mcmp>
 800c788:	2800      	cmp	r0, #0
 800c78a:	dcb6      	bgt.n	800c6fa <_dtoa_r+0xa42>
 800c78c:	d102      	bne.n	800c794 <_dtoa_r+0xadc>
 800c78e:	f018 0f01 	tst.w	r8, #1
 800c792:	d1b2      	bne.n	800c6fa <_dtoa_r+0xa42>
 800c794:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c798:	2b30      	cmp	r3, #48	; 0x30
 800c79a:	f105 32ff 	add.w	r2, r5, #4294967295
 800c79e:	f47f af0a 	bne.w	800c5b6 <_dtoa_r+0x8fe>
 800c7a2:	4615      	mov	r5, r2
 800c7a4:	e7f6      	b.n	800c794 <_dtoa_r+0xadc>
 800c7a6:	4593      	cmp	fp, r2
 800c7a8:	d105      	bne.n	800c7b6 <_dtoa_r+0xafe>
 800c7aa:	2331      	movs	r3, #49	; 0x31
 800c7ac:	f10a 0a01 	add.w	sl, sl, #1
 800c7b0:	f88b 3000 	strb.w	r3, [fp]
 800c7b4:	e6ff      	b.n	800c5b6 <_dtoa_r+0x8fe>
 800c7b6:	4615      	mov	r5, r2
 800c7b8:	e79f      	b.n	800c6fa <_dtoa_r+0xa42>
 800c7ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c820 <_dtoa_r+0xb68>
 800c7be:	e007      	b.n	800c7d0 <_dtoa_r+0xb18>
 800c7c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c824 <_dtoa_r+0xb6c>
 800c7c6:	b11b      	cbz	r3, 800c7d0 <_dtoa_r+0xb18>
 800c7c8:	f10b 0308 	add.w	r3, fp, #8
 800c7cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	4658      	mov	r0, fp
 800c7d2:	b017      	add	sp, #92	; 0x5c
 800c7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d8:	9b06      	ldr	r3, [sp, #24]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	f77f ae35 	ble.w	800c44a <_dtoa_r+0x792>
 800c7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7e2:	9307      	str	r3, [sp, #28]
 800c7e4:	e649      	b.n	800c47a <_dtoa_r+0x7c2>
 800c7e6:	9b02      	ldr	r3, [sp, #8]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	dc03      	bgt.n	800c7f4 <_dtoa_r+0xb3c>
 800c7ec:	9b06      	ldr	r3, [sp, #24]
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	f73f aecc 	bgt.w	800c58c <_dtoa_r+0x8d4>
 800c7f4:	465d      	mov	r5, fp
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	9804      	ldr	r0, [sp, #16]
 800c7fa:	f7ff f9d1 	bl	800bba0 <quorem>
 800c7fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c802:	f805 8b01 	strb.w	r8, [r5], #1
 800c806:	9a02      	ldr	r2, [sp, #8]
 800c808:	eba5 030b 	sub.w	r3, r5, fp
 800c80c:	429a      	cmp	r2, r3
 800c80e:	ddb0      	ble.n	800c772 <_dtoa_r+0xaba>
 800c810:	2300      	movs	r3, #0
 800c812:	220a      	movs	r2, #10
 800c814:	9904      	ldr	r1, [sp, #16]
 800c816:	4620      	mov	r0, r4
 800c818:	f000 fd6d 	bl	800d2f6 <__multadd>
 800c81c:	9004      	str	r0, [sp, #16]
 800c81e:	e7ea      	b.n	800c7f6 <_dtoa_r+0xb3e>
 800c820:	0800e702 	.word	0x0800e702
 800c824:	0800e881 	.word	0x0800e881

0800c828 <__sflush_r>:
 800c828:	898a      	ldrh	r2, [r1, #12]
 800c82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c82e:	4605      	mov	r5, r0
 800c830:	0710      	lsls	r0, r2, #28
 800c832:	460c      	mov	r4, r1
 800c834:	d458      	bmi.n	800c8e8 <__sflush_r+0xc0>
 800c836:	684b      	ldr	r3, [r1, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dc05      	bgt.n	800c848 <__sflush_r+0x20>
 800c83c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c83e:	2b00      	cmp	r3, #0
 800c840:	dc02      	bgt.n	800c848 <__sflush_r+0x20>
 800c842:	2000      	movs	r0, #0
 800c844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c84a:	2e00      	cmp	r6, #0
 800c84c:	d0f9      	beq.n	800c842 <__sflush_r+0x1a>
 800c84e:	2300      	movs	r3, #0
 800c850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c854:	682f      	ldr	r7, [r5, #0]
 800c856:	6a21      	ldr	r1, [r4, #32]
 800c858:	602b      	str	r3, [r5, #0]
 800c85a:	d032      	beq.n	800c8c2 <__sflush_r+0x9a>
 800c85c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c85e:	89a3      	ldrh	r3, [r4, #12]
 800c860:	075a      	lsls	r2, r3, #29
 800c862:	d505      	bpl.n	800c870 <__sflush_r+0x48>
 800c864:	6863      	ldr	r3, [r4, #4]
 800c866:	1ac0      	subs	r0, r0, r3
 800c868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c86a:	b10b      	cbz	r3, 800c870 <__sflush_r+0x48>
 800c86c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c86e:	1ac0      	subs	r0, r0, r3
 800c870:	2300      	movs	r3, #0
 800c872:	4602      	mov	r2, r0
 800c874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c876:	6a21      	ldr	r1, [r4, #32]
 800c878:	4628      	mov	r0, r5
 800c87a:	47b0      	blx	r6
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	89a3      	ldrh	r3, [r4, #12]
 800c880:	d106      	bne.n	800c890 <__sflush_r+0x68>
 800c882:	6829      	ldr	r1, [r5, #0]
 800c884:	291d      	cmp	r1, #29
 800c886:	d848      	bhi.n	800c91a <__sflush_r+0xf2>
 800c888:	4a29      	ldr	r2, [pc, #164]	; (800c930 <__sflush_r+0x108>)
 800c88a:	40ca      	lsrs	r2, r1
 800c88c:	07d6      	lsls	r6, r2, #31
 800c88e:	d544      	bpl.n	800c91a <__sflush_r+0xf2>
 800c890:	2200      	movs	r2, #0
 800c892:	6062      	str	r2, [r4, #4]
 800c894:	04d9      	lsls	r1, r3, #19
 800c896:	6922      	ldr	r2, [r4, #16]
 800c898:	6022      	str	r2, [r4, #0]
 800c89a:	d504      	bpl.n	800c8a6 <__sflush_r+0x7e>
 800c89c:	1c42      	adds	r2, r0, #1
 800c89e:	d101      	bne.n	800c8a4 <__sflush_r+0x7c>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	b903      	cbnz	r3, 800c8a6 <__sflush_r+0x7e>
 800c8a4:	6560      	str	r0, [r4, #84]	; 0x54
 800c8a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8a8:	602f      	str	r7, [r5, #0]
 800c8aa:	2900      	cmp	r1, #0
 800c8ac:	d0c9      	beq.n	800c842 <__sflush_r+0x1a>
 800c8ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b2:	4299      	cmp	r1, r3
 800c8b4:	d002      	beq.n	800c8bc <__sflush_r+0x94>
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f001 f8e0 	bl	800da7c <_free_r>
 800c8bc:	2000      	movs	r0, #0
 800c8be:	6360      	str	r0, [r4, #52]	; 0x34
 800c8c0:	e7c0      	b.n	800c844 <__sflush_r+0x1c>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	47b0      	blx	r6
 800c8c8:	1c41      	adds	r1, r0, #1
 800c8ca:	d1c8      	bne.n	800c85e <__sflush_r+0x36>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0c5      	beq.n	800c85e <__sflush_r+0x36>
 800c8d2:	2b1d      	cmp	r3, #29
 800c8d4:	d001      	beq.n	800c8da <__sflush_r+0xb2>
 800c8d6:	2b16      	cmp	r3, #22
 800c8d8:	d101      	bne.n	800c8de <__sflush_r+0xb6>
 800c8da:	602f      	str	r7, [r5, #0]
 800c8dc:	e7b1      	b.n	800c842 <__sflush_r+0x1a>
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8e4:	81a3      	strh	r3, [r4, #12]
 800c8e6:	e7ad      	b.n	800c844 <__sflush_r+0x1c>
 800c8e8:	690f      	ldr	r7, [r1, #16]
 800c8ea:	2f00      	cmp	r7, #0
 800c8ec:	d0a9      	beq.n	800c842 <__sflush_r+0x1a>
 800c8ee:	0793      	lsls	r3, r2, #30
 800c8f0:	680e      	ldr	r6, [r1, #0]
 800c8f2:	bf08      	it	eq
 800c8f4:	694b      	ldreq	r3, [r1, #20]
 800c8f6:	600f      	str	r7, [r1, #0]
 800c8f8:	bf18      	it	ne
 800c8fa:	2300      	movne	r3, #0
 800c8fc:	eba6 0807 	sub.w	r8, r6, r7
 800c900:	608b      	str	r3, [r1, #8]
 800c902:	f1b8 0f00 	cmp.w	r8, #0
 800c906:	dd9c      	ble.n	800c842 <__sflush_r+0x1a>
 800c908:	4643      	mov	r3, r8
 800c90a:	463a      	mov	r2, r7
 800c90c:	6a21      	ldr	r1, [r4, #32]
 800c90e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c910:	4628      	mov	r0, r5
 800c912:	47b0      	blx	r6
 800c914:	2800      	cmp	r0, #0
 800c916:	dc06      	bgt.n	800c926 <__sflush_r+0xfe>
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c91e:	81a3      	strh	r3, [r4, #12]
 800c920:	f04f 30ff 	mov.w	r0, #4294967295
 800c924:	e78e      	b.n	800c844 <__sflush_r+0x1c>
 800c926:	4407      	add	r7, r0
 800c928:	eba8 0800 	sub.w	r8, r8, r0
 800c92c:	e7e9      	b.n	800c902 <__sflush_r+0xda>
 800c92e:	bf00      	nop
 800c930:	20400001 	.word	0x20400001

0800c934 <_fflush_r>:
 800c934:	b538      	push	{r3, r4, r5, lr}
 800c936:	690b      	ldr	r3, [r1, #16]
 800c938:	4605      	mov	r5, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	b1db      	cbz	r3, 800c976 <_fflush_r+0x42>
 800c93e:	b118      	cbz	r0, 800c948 <_fflush_r+0x14>
 800c940:	6983      	ldr	r3, [r0, #24]
 800c942:	b90b      	cbnz	r3, 800c948 <_fflush_r+0x14>
 800c944:	f000 f860 	bl	800ca08 <__sinit>
 800c948:	4b0c      	ldr	r3, [pc, #48]	; (800c97c <_fflush_r+0x48>)
 800c94a:	429c      	cmp	r4, r3
 800c94c:	d109      	bne.n	800c962 <_fflush_r+0x2e>
 800c94e:	686c      	ldr	r4, [r5, #4]
 800c950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c954:	b17b      	cbz	r3, 800c976 <_fflush_r+0x42>
 800c956:	4621      	mov	r1, r4
 800c958:	4628      	mov	r0, r5
 800c95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c95e:	f7ff bf63 	b.w	800c828 <__sflush_r>
 800c962:	4b07      	ldr	r3, [pc, #28]	; (800c980 <_fflush_r+0x4c>)
 800c964:	429c      	cmp	r4, r3
 800c966:	d101      	bne.n	800c96c <_fflush_r+0x38>
 800c968:	68ac      	ldr	r4, [r5, #8]
 800c96a:	e7f1      	b.n	800c950 <_fflush_r+0x1c>
 800c96c:	4b05      	ldr	r3, [pc, #20]	; (800c984 <_fflush_r+0x50>)
 800c96e:	429c      	cmp	r4, r3
 800c970:	bf08      	it	eq
 800c972:	68ec      	ldreq	r4, [r5, #12]
 800c974:	e7ec      	b.n	800c950 <_fflush_r+0x1c>
 800c976:	2000      	movs	r0, #0
 800c978:	bd38      	pop	{r3, r4, r5, pc}
 800c97a:	bf00      	nop
 800c97c:	0800e8b0 	.word	0x0800e8b0
 800c980:	0800e8d0 	.word	0x0800e8d0
 800c984:	0800e890 	.word	0x0800e890

0800c988 <std>:
 800c988:	2300      	movs	r3, #0
 800c98a:	b510      	push	{r4, lr}
 800c98c:	4604      	mov	r4, r0
 800c98e:	e9c0 3300 	strd	r3, r3, [r0]
 800c992:	6083      	str	r3, [r0, #8]
 800c994:	8181      	strh	r1, [r0, #12]
 800c996:	6643      	str	r3, [r0, #100]	; 0x64
 800c998:	81c2      	strh	r2, [r0, #14]
 800c99a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c99e:	6183      	str	r3, [r0, #24]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	2208      	movs	r2, #8
 800c9a4:	305c      	adds	r0, #92	; 0x5c
 800c9a6:	f7fd fa95 	bl	8009ed4 <memset>
 800c9aa:	4b05      	ldr	r3, [pc, #20]	; (800c9c0 <std+0x38>)
 800c9ac:	6263      	str	r3, [r4, #36]	; 0x24
 800c9ae:	4b05      	ldr	r3, [pc, #20]	; (800c9c4 <std+0x3c>)
 800c9b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9b2:	4b05      	ldr	r3, [pc, #20]	; (800c9c8 <std+0x40>)
 800c9b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9b6:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <std+0x44>)
 800c9b8:	6224      	str	r4, [r4, #32]
 800c9ba:	6323      	str	r3, [r4, #48]	; 0x30
 800c9bc:	bd10      	pop	{r4, pc}
 800c9be:	bf00      	nop
 800c9c0:	0800e111 	.word	0x0800e111
 800c9c4:	0800e133 	.word	0x0800e133
 800c9c8:	0800e16b 	.word	0x0800e16b
 800c9cc:	0800e18f 	.word	0x0800e18f

0800c9d0 <_cleanup_r>:
 800c9d0:	4901      	ldr	r1, [pc, #4]	; (800c9d8 <_cleanup_r+0x8>)
 800c9d2:	f000 b885 	b.w	800cae0 <_fwalk_reent>
 800c9d6:	bf00      	nop
 800c9d8:	0800c935 	.word	0x0800c935

0800c9dc <__sfmoreglue>:
 800c9dc:	b570      	push	{r4, r5, r6, lr}
 800c9de:	1e4a      	subs	r2, r1, #1
 800c9e0:	2568      	movs	r5, #104	; 0x68
 800c9e2:	4355      	muls	r5, r2
 800c9e4:	460e      	mov	r6, r1
 800c9e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9ea:	f001 f895 	bl	800db18 <_malloc_r>
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	b140      	cbz	r0, 800ca04 <__sfmoreglue+0x28>
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	e9c0 1600 	strd	r1, r6, [r0]
 800c9f8:	300c      	adds	r0, #12
 800c9fa:	60a0      	str	r0, [r4, #8]
 800c9fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca00:	f7fd fa68 	bl	8009ed4 <memset>
 800ca04:	4620      	mov	r0, r4
 800ca06:	bd70      	pop	{r4, r5, r6, pc}

0800ca08 <__sinit>:
 800ca08:	6983      	ldr	r3, [r0, #24]
 800ca0a:	b510      	push	{r4, lr}
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	bb33      	cbnz	r3, 800ca5e <__sinit+0x56>
 800ca10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ca14:	6503      	str	r3, [r0, #80]	; 0x50
 800ca16:	4b12      	ldr	r3, [pc, #72]	; (800ca60 <__sinit+0x58>)
 800ca18:	4a12      	ldr	r2, [pc, #72]	; (800ca64 <__sinit+0x5c>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	6282      	str	r2, [r0, #40]	; 0x28
 800ca1e:	4298      	cmp	r0, r3
 800ca20:	bf04      	itt	eq
 800ca22:	2301      	moveq	r3, #1
 800ca24:	6183      	streq	r3, [r0, #24]
 800ca26:	f000 f81f 	bl	800ca68 <__sfp>
 800ca2a:	6060      	str	r0, [r4, #4]
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f000 f81b 	bl	800ca68 <__sfp>
 800ca32:	60a0      	str	r0, [r4, #8]
 800ca34:	4620      	mov	r0, r4
 800ca36:	f000 f817 	bl	800ca68 <__sfp>
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	60e0      	str	r0, [r4, #12]
 800ca3e:	2104      	movs	r1, #4
 800ca40:	6860      	ldr	r0, [r4, #4]
 800ca42:	f7ff ffa1 	bl	800c988 <std>
 800ca46:	2201      	movs	r2, #1
 800ca48:	2109      	movs	r1, #9
 800ca4a:	68a0      	ldr	r0, [r4, #8]
 800ca4c:	f7ff ff9c 	bl	800c988 <std>
 800ca50:	2202      	movs	r2, #2
 800ca52:	2112      	movs	r1, #18
 800ca54:	68e0      	ldr	r0, [r4, #12]
 800ca56:	f7ff ff97 	bl	800c988 <std>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	61a3      	str	r3, [r4, #24]
 800ca5e:	bd10      	pop	{r4, pc}
 800ca60:	0800e6e8 	.word	0x0800e6e8
 800ca64:	0800c9d1 	.word	0x0800c9d1

0800ca68 <__sfp>:
 800ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6a:	4b1b      	ldr	r3, [pc, #108]	; (800cad8 <__sfp+0x70>)
 800ca6c:	681e      	ldr	r6, [r3, #0]
 800ca6e:	69b3      	ldr	r3, [r6, #24]
 800ca70:	4607      	mov	r7, r0
 800ca72:	b913      	cbnz	r3, 800ca7a <__sfp+0x12>
 800ca74:	4630      	mov	r0, r6
 800ca76:	f7ff ffc7 	bl	800ca08 <__sinit>
 800ca7a:	3648      	adds	r6, #72	; 0x48
 800ca7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca80:	3b01      	subs	r3, #1
 800ca82:	d503      	bpl.n	800ca8c <__sfp+0x24>
 800ca84:	6833      	ldr	r3, [r6, #0]
 800ca86:	b133      	cbz	r3, 800ca96 <__sfp+0x2e>
 800ca88:	6836      	ldr	r6, [r6, #0]
 800ca8a:	e7f7      	b.n	800ca7c <__sfp+0x14>
 800ca8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca90:	b16d      	cbz	r5, 800caae <__sfp+0x46>
 800ca92:	3468      	adds	r4, #104	; 0x68
 800ca94:	e7f4      	b.n	800ca80 <__sfp+0x18>
 800ca96:	2104      	movs	r1, #4
 800ca98:	4638      	mov	r0, r7
 800ca9a:	f7ff ff9f 	bl	800c9dc <__sfmoreglue>
 800ca9e:	6030      	str	r0, [r6, #0]
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d1f1      	bne.n	800ca88 <__sfp+0x20>
 800caa4:	230c      	movs	r3, #12
 800caa6:	603b      	str	r3, [r7, #0]
 800caa8:	4604      	mov	r4, r0
 800caaa:	4620      	mov	r0, r4
 800caac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caae:	4b0b      	ldr	r3, [pc, #44]	; (800cadc <__sfp+0x74>)
 800cab0:	6665      	str	r5, [r4, #100]	; 0x64
 800cab2:	e9c4 5500 	strd	r5, r5, [r4]
 800cab6:	60a5      	str	r5, [r4, #8]
 800cab8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cabc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cac0:	2208      	movs	r2, #8
 800cac2:	4629      	mov	r1, r5
 800cac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cac8:	f7fd fa04 	bl	8009ed4 <memset>
 800cacc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cad4:	e7e9      	b.n	800caaa <__sfp+0x42>
 800cad6:	bf00      	nop
 800cad8:	0800e6e8 	.word	0x0800e6e8
 800cadc:	ffff0001 	.word	0xffff0001

0800cae0 <_fwalk_reent>:
 800cae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae4:	4680      	mov	r8, r0
 800cae6:	4689      	mov	r9, r1
 800cae8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800caec:	2600      	movs	r6, #0
 800caee:	b914      	cbnz	r4, 800caf6 <_fwalk_reent+0x16>
 800caf0:	4630      	mov	r0, r6
 800caf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caf6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cafa:	3f01      	subs	r7, #1
 800cafc:	d501      	bpl.n	800cb02 <_fwalk_reent+0x22>
 800cafe:	6824      	ldr	r4, [r4, #0]
 800cb00:	e7f5      	b.n	800caee <_fwalk_reent+0xe>
 800cb02:	89ab      	ldrh	r3, [r5, #12]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d907      	bls.n	800cb18 <_fwalk_reent+0x38>
 800cb08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	d003      	beq.n	800cb18 <_fwalk_reent+0x38>
 800cb10:	4629      	mov	r1, r5
 800cb12:	4640      	mov	r0, r8
 800cb14:	47c8      	blx	r9
 800cb16:	4306      	orrs	r6, r0
 800cb18:	3568      	adds	r5, #104	; 0x68
 800cb1a:	e7ee      	b.n	800cafa <_fwalk_reent+0x1a>

0800cb1c <rshift>:
 800cb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb1e:	6906      	ldr	r6, [r0, #16]
 800cb20:	114b      	asrs	r3, r1, #5
 800cb22:	429e      	cmp	r6, r3
 800cb24:	f100 0414 	add.w	r4, r0, #20
 800cb28:	dd30      	ble.n	800cb8c <rshift+0x70>
 800cb2a:	f011 011f 	ands.w	r1, r1, #31
 800cb2e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800cb32:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800cb36:	d108      	bne.n	800cb4a <rshift+0x2e>
 800cb38:	4621      	mov	r1, r4
 800cb3a:	42b2      	cmp	r2, r6
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	d211      	bcs.n	800cb64 <rshift+0x48>
 800cb40:	f852 3b04 	ldr.w	r3, [r2], #4
 800cb44:	f841 3b04 	str.w	r3, [r1], #4
 800cb48:	e7f7      	b.n	800cb3a <rshift+0x1e>
 800cb4a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800cb4e:	f1c1 0c20 	rsb	ip, r1, #32
 800cb52:	40cd      	lsrs	r5, r1
 800cb54:	3204      	adds	r2, #4
 800cb56:	4623      	mov	r3, r4
 800cb58:	42b2      	cmp	r2, r6
 800cb5a:	4617      	mov	r7, r2
 800cb5c:	d30c      	bcc.n	800cb78 <rshift+0x5c>
 800cb5e:	601d      	str	r5, [r3, #0]
 800cb60:	b105      	cbz	r5, 800cb64 <rshift+0x48>
 800cb62:	3304      	adds	r3, #4
 800cb64:	1b1a      	subs	r2, r3, r4
 800cb66:	42a3      	cmp	r3, r4
 800cb68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb6c:	bf08      	it	eq
 800cb6e:	2300      	moveq	r3, #0
 800cb70:	6102      	str	r2, [r0, #16]
 800cb72:	bf08      	it	eq
 800cb74:	6143      	streq	r3, [r0, #20]
 800cb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb78:	683f      	ldr	r7, [r7, #0]
 800cb7a:	fa07 f70c 	lsl.w	r7, r7, ip
 800cb7e:	433d      	orrs	r5, r7
 800cb80:	f843 5b04 	str.w	r5, [r3], #4
 800cb84:	f852 5b04 	ldr.w	r5, [r2], #4
 800cb88:	40cd      	lsrs	r5, r1
 800cb8a:	e7e5      	b.n	800cb58 <rshift+0x3c>
 800cb8c:	4623      	mov	r3, r4
 800cb8e:	e7e9      	b.n	800cb64 <rshift+0x48>

0800cb90 <__hexdig_fun>:
 800cb90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cb94:	2b09      	cmp	r3, #9
 800cb96:	d802      	bhi.n	800cb9e <__hexdig_fun+0xe>
 800cb98:	3820      	subs	r0, #32
 800cb9a:	b2c0      	uxtb	r0, r0
 800cb9c:	4770      	bx	lr
 800cb9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cba2:	2b05      	cmp	r3, #5
 800cba4:	d801      	bhi.n	800cbaa <__hexdig_fun+0x1a>
 800cba6:	3847      	subs	r0, #71	; 0x47
 800cba8:	e7f7      	b.n	800cb9a <__hexdig_fun+0xa>
 800cbaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cbae:	2b05      	cmp	r3, #5
 800cbb0:	d801      	bhi.n	800cbb6 <__hexdig_fun+0x26>
 800cbb2:	3827      	subs	r0, #39	; 0x27
 800cbb4:	e7f1      	b.n	800cb9a <__hexdig_fun+0xa>
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	4770      	bx	lr

0800cbba <__gethex>:
 800cbba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbbe:	b08b      	sub	sp, #44	; 0x2c
 800cbc0:	468a      	mov	sl, r1
 800cbc2:	9002      	str	r0, [sp, #8]
 800cbc4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cbc6:	9306      	str	r3, [sp, #24]
 800cbc8:	4690      	mov	r8, r2
 800cbca:	f000 facd 	bl	800d168 <__localeconv_l>
 800cbce:	6803      	ldr	r3, [r0, #0]
 800cbd0:	9303      	str	r3, [sp, #12]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7f3 fb04 	bl	80001e0 <strlen>
 800cbd8:	9b03      	ldr	r3, [sp, #12]
 800cbda:	9001      	str	r0, [sp, #4]
 800cbdc:	4403      	add	r3, r0
 800cbde:	f04f 0b00 	mov.w	fp, #0
 800cbe2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cbe6:	9307      	str	r3, [sp, #28]
 800cbe8:	f8da 3000 	ldr.w	r3, [sl]
 800cbec:	3302      	adds	r3, #2
 800cbee:	461f      	mov	r7, r3
 800cbf0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cbf4:	2830      	cmp	r0, #48	; 0x30
 800cbf6:	d06c      	beq.n	800ccd2 <__gethex+0x118>
 800cbf8:	f7ff ffca 	bl	800cb90 <__hexdig_fun>
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	d16a      	bne.n	800ccd8 <__gethex+0x11e>
 800cc02:	9a01      	ldr	r2, [sp, #4]
 800cc04:	9903      	ldr	r1, [sp, #12]
 800cc06:	4638      	mov	r0, r7
 800cc08:	f001 fac5 	bl	800e196 <strncmp>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d166      	bne.n	800ccde <__gethex+0x124>
 800cc10:	9b01      	ldr	r3, [sp, #4]
 800cc12:	5cf8      	ldrb	r0, [r7, r3]
 800cc14:	18fe      	adds	r6, r7, r3
 800cc16:	f7ff ffbb 	bl	800cb90 <__hexdig_fun>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d062      	beq.n	800cce4 <__gethex+0x12a>
 800cc1e:	4633      	mov	r3, r6
 800cc20:	7818      	ldrb	r0, [r3, #0]
 800cc22:	2830      	cmp	r0, #48	; 0x30
 800cc24:	461f      	mov	r7, r3
 800cc26:	f103 0301 	add.w	r3, r3, #1
 800cc2a:	d0f9      	beq.n	800cc20 <__gethex+0x66>
 800cc2c:	f7ff ffb0 	bl	800cb90 <__hexdig_fun>
 800cc30:	fab0 f580 	clz	r5, r0
 800cc34:	096d      	lsrs	r5, r5, #5
 800cc36:	4634      	mov	r4, r6
 800cc38:	f04f 0b01 	mov.w	fp, #1
 800cc3c:	463a      	mov	r2, r7
 800cc3e:	4616      	mov	r6, r2
 800cc40:	3201      	adds	r2, #1
 800cc42:	7830      	ldrb	r0, [r6, #0]
 800cc44:	f7ff ffa4 	bl	800cb90 <__hexdig_fun>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d1f8      	bne.n	800cc3e <__gethex+0x84>
 800cc4c:	9a01      	ldr	r2, [sp, #4]
 800cc4e:	9903      	ldr	r1, [sp, #12]
 800cc50:	4630      	mov	r0, r6
 800cc52:	f001 faa0 	bl	800e196 <strncmp>
 800cc56:	b950      	cbnz	r0, 800cc6e <__gethex+0xb4>
 800cc58:	b954      	cbnz	r4, 800cc70 <__gethex+0xb6>
 800cc5a:	9b01      	ldr	r3, [sp, #4]
 800cc5c:	18f4      	adds	r4, r6, r3
 800cc5e:	4622      	mov	r2, r4
 800cc60:	4616      	mov	r6, r2
 800cc62:	3201      	adds	r2, #1
 800cc64:	7830      	ldrb	r0, [r6, #0]
 800cc66:	f7ff ff93 	bl	800cb90 <__hexdig_fun>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d1f8      	bne.n	800cc60 <__gethex+0xa6>
 800cc6e:	b10c      	cbz	r4, 800cc74 <__gethex+0xba>
 800cc70:	1ba4      	subs	r4, r4, r6
 800cc72:	00a4      	lsls	r4, r4, #2
 800cc74:	7833      	ldrb	r3, [r6, #0]
 800cc76:	2b50      	cmp	r3, #80	; 0x50
 800cc78:	d001      	beq.n	800cc7e <__gethex+0xc4>
 800cc7a:	2b70      	cmp	r3, #112	; 0x70
 800cc7c:	d140      	bne.n	800cd00 <__gethex+0x146>
 800cc7e:	7873      	ldrb	r3, [r6, #1]
 800cc80:	2b2b      	cmp	r3, #43	; 0x2b
 800cc82:	d031      	beq.n	800cce8 <__gethex+0x12e>
 800cc84:	2b2d      	cmp	r3, #45	; 0x2d
 800cc86:	d033      	beq.n	800ccf0 <__gethex+0x136>
 800cc88:	1c71      	adds	r1, r6, #1
 800cc8a:	f04f 0900 	mov.w	r9, #0
 800cc8e:	7808      	ldrb	r0, [r1, #0]
 800cc90:	f7ff ff7e 	bl	800cb90 <__hexdig_fun>
 800cc94:	1e43      	subs	r3, r0, #1
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	2b18      	cmp	r3, #24
 800cc9a:	d831      	bhi.n	800cd00 <__gethex+0x146>
 800cc9c:	f1a0 0210 	sub.w	r2, r0, #16
 800cca0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cca4:	f7ff ff74 	bl	800cb90 <__hexdig_fun>
 800cca8:	1e43      	subs	r3, r0, #1
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	2b18      	cmp	r3, #24
 800ccae:	d922      	bls.n	800ccf6 <__gethex+0x13c>
 800ccb0:	f1b9 0f00 	cmp.w	r9, #0
 800ccb4:	d000      	beq.n	800ccb8 <__gethex+0xfe>
 800ccb6:	4252      	negs	r2, r2
 800ccb8:	4414      	add	r4, r2
 800ccba:	f8ca 1000 	str.w	r1, [sl]
 800ccbe:	b30d      	cbz	r5, 800cd04 <__gethex+0x14a>
 800ccc0:	f1bb 0f00 	cmp.w	fp, #0
 800ccc4:	bf0c      	ite	eq
 800ccc6:	2706      	moveq	r7, #6
 800ccc8:	2700      	movne	r7, #0
 800ccca:	4638      	mov	r0, r7
 800cccc:	b00b      	add	sp, #44	; 0x2c
 800ccce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd2:	f10b 0b01 	add.w	fp, fp, #1
 800ccd6:	e78a      	b.n	800cbee <__gethex+0x34>
 800ccd8:	2500      	movs	r5, #0
 800ccda:	462c      	mov	r4, r5
 800ccdc:	e7ae      	b.n	800cc3c <__gethex+0x82>
 800ccde:	463e      	mov	r6, r7
 800cce0:	2501      	movs	r5, #1
 800cce2:	e7c7      	b.n	800cc74 <__gethex+0xba>
 800cce4:	4604      	mov	r4, r0
 800cce6:	e7fb      	b.n	800cce0 <__gethex+0x126>
 800cce8:	f04f 0900 	mov.w	r9, #0
 800ccec:	1cb1      	adds	r1, r6, #2
 800ccee:	e7ce      	b.n	800cc8e <__gethex+0xd4>
 800ccf0:	f04f 0901 	mov.w	r9, #1
 800ccf4:	e7fa      	b.n	800ccec <__gethex+0x132>
 800ccf6:	230a      	movs	r3, #10
 800ccf8:	fb03 0202 	mla	r2, r3, r2, r0
 800ccfc:	3a10      	subs	r2, #16
 800ccfe:	e7cf      	b.n	800cca0 <__gethex+0xe6>
 800cd00:	4631      	mov	r1, r6
 800cd02:	e7da      	b.n	800ccba <__gethex+0x100>
 800cd04:	1bf3      	subs	r3, r6, r7
 800cd06:	3b01      	subs	r3, #1
 800cd08:	4629      	mov	r1, r5
 800cd0a:	2b07      	cmp	r3, #7
 800cd0c:	dc49      	bgt.n	800cda2 <__gethex+0x1e8>
 800cd0e:	9802      	ldr	r0, [sp, #8]
 800cd10:	f000 faa6 	bl	800d260 <_Balloc>
 800cd14:	9b01      	ldr	r3, [sp, #4]
 800cd16:	f100 0914 	add.w	r9, r0, #20
 800cd1a:	f04f 0b00 	mov.w	fp, #0
 800cd1e:	f1c3 0301 	rsb	r3, r3, #1
 800cd22:	4605      	mov	r5, r0
 800cd24:	f8cd 9010 	str.w	r9, [sp, #16]
 800cd28:	46da      	mov	sl, fp
 800cd2a:	9308      	str	r3, [sp, #32]
 800cd2c:	42b7      	cmp	r7, r6
 800cd2e:	d33b      	bcc.n	800cda8 <__gethex+0x1ee>
 800cd30:	9804      	ldr	r0, [sp, #16]
 800cd32:	f840 ab04 	str.w	sl, [r0], #4
 800cd36:	eba0 0009 	sub.w	r0, r0, r9
 800cd3a:	1080      	asrs	r0, r0, #2
 800cd3c:	6128      	str	r0, [r5, #16]
 800cd3e:	0147      	lsls	r7, r0, #5
 800cd40:	4650      	mov	r0, sl
 800cd42:	f000 fb51 	bl	800d3e8 <__hi0bits>
 800cd46:	f8d8 6000 	ldr.w	r6, [r8]
 800cd4a:	1a3f      	subs	r7, r7, r0
 800cd4c:	42b7      	cmp	r7, r6
 800cd4e:	dd64      	ble.n	800ce1a <__gethex+0x260>
 800cd50:	1bbf      	subs	r7, r7, r6
 800cd52:	4639      	mov	r1, r7
 800cd54:	4628      	mov	r0, r5
 800cd56:	f000 fe61 	bl	800da1c <__any_on>
 800cd5a:	4682      	mov	sl, r0
 800cd5c:	b178      	cbz	r0, 800cd7e <__gethex+0x1c4>
 800cd5e:	1e7b      	subs	r3, r7, #1
 800cd60:	1159      	asrs	r1, r3, #5
 800cd62:	f003 021f 	and.w	r2, r3, #31
 800cd66:	f04f 0a01 	mov.w	sl, #1
 800cd6a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cd6e:	fa0a f202 	lsl.w	r2, sl, r2
 800cd72:	420a      	tst	r2, r1
 800cd74:	d003      	beq.n	800cd7e <__gethex+0x1c4>
 800cd76:	4553      	cmp	r3, sl
 800cd78:	dc46      	bgt.n	800ce08 <__gethex+0x24e>
 800cd7a:	f04f 0a02 	mov.w	sl, #2
 800cd7e:	4639      	mov	r1, r7
 800cd80:	4628      	mov	r0, r5
 800cd82:	f7ff fecb 	bl	800cb1c <rshift>
 800cd86:	443c      	add	r4, r7
 800cd88:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd8c:	42a3      	cmp	r3, r4
 800cd8e:	da52      	bge.n	800ce36 <__gethex+0x27c>
 800cd90:	4629      	mov	r1, r5
 800cd92:	9802      	ldr	r0, [sp, #8]
 800cd94:	f000 fa98 	bl	800d2c8 <_Bfree>
 800cd98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	6013      	str	r3, [r2, #0]
 800cd9e:	27a3      	movs	r7, #163	; 0xa3
 800cda0:	e793      	b.n	800ccca <__gethex+0x110>
 800cda2:	3101      	adds	r1, #1
 800cda4:	105b      	asrs	r3, r3, #1
 800cda6:	e7b0      	b.n	800cd0a <__gethex+0x150>
 800cda8:	1e73      	subs	r3, r6, #1
 800cdaa:	9305      	str	r3, [sp, #20]
 800cdac:	9a07      	ldr	r2, [sp, #28]
 800cdae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d018      	beq.n	800cde8 <__gethex+0x22e>
 800cdb6:	f1bb 0f20 	cmp.w	fp, #32
 800cdba:	d107      	bne.n	800cdcc <__gethex+0x212>
 800cdbc:	9b04      	ldr	r3, [sp, #16]
 800cdbe:	f8c3 a000 	str.w	sl, [r3]
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	f04f 0a00 	mov.w	sl, #0
 800cdc8:	9304      	str	r3, [sp, #16]
 800cdca:	46d3      	mov	fp, sl
 800cdcc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cdd0:	f7ff fede 	bl	800cb90 <__hexdig_fun>
 800cdd4:	f000 000f 	and.w	r0, r0, #15
 800cdd8:	fa00 f00b 	lsl.w	r0, r0, fp
 800cddc:	ea4a 0a00 	orr.w	sl, sl, r0
 800cde0:	f10b 0b04 	add.w	fp, fp, #4
 800cde4:	9b05      	ldr	r3, [sp, #20]
 800cde6:	e00d      	b.n	800ce04 <__gethex+0x24a>
 800cde8:	9b05      	ldr	r3, [sp, #20]
 800cdea:	9a08      	ldr	r2, [sp, #32]
 800cdec:	4413      	add	r3, r2
 800cdee:	42bb      	cmp	r3, r7
 800cdf0:	d3e1      	bcc.n	800cdb6 <__gethex+0x1fc>
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	9a01      	ldr	r2, [sp, #4]
 800cdf6:	9903      	ldr	r1, [sp, #12]
 800cdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdfa:	f001 f9cc 	bl	800e196 <strncmp>
 800cdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d1d8      	bne.n	800cdb6 <__gethex+0x1fc>
 800ce04:	461e      	mov	r6, r3
 800ce06:	e791      	b.n	800cd2c <__gethex+0x172>
 800ce08:	1eb9      	subs	r1, r7, #2
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	f000 fe06 	bl	800da1c <__any_on>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d0b2      	beq.n	800cd7a <__gethex+0x1c0>
 800ce14:	f04f 0a03 	mov.w	sl, #3
 800ce18:	e7b1      	b.n	800cd7e <__gethex+0x1c4>
 800ce1a:	da09      	bge.n	800ce30 <__gethex+0x276>
 800ce1c:	1bf7      	subs	r7, r6, r7
 800ce1e:	4629      	mov	r1, r5
 800ce20:	463a      	mov	r2, r7
 800ce22:	9802      	ldr	r0, [sp, #8]
 800ce24:	f000 fc1c 	bl	800d660 <__lshift>
 800ce28:	1be4      	subs	r4, r4, r7
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	f100 0914 	add.w	r9, r0, #20
 800ce30:	f04f 0a00 	mov.w	sl, #0
 800ce34:	e7a8      	b.n	800cd88 <__gethex+0x1ce>
 800ce36:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ce3a:	42a0      	cmp	r0, r4
 800ce3c:	dd6a      	ble.n	800cf14 <__gethex+0x35a>
 800ce3e:	1b04      	subs	r4, r0, r4
 800ce40:	42a6      	cmp	r6, r4
 800ce42:	dc2e      	bgt.n	800cea2 <__gethex+0x2e8>
 800ce44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d022      	beq.n	800ce92 <__gethex+0x2d8>
 800ce4c:	2b03      	cmp	r3, #3
 800ce4e:	d024      	beq.n	800ce9a <__gethex+0x2e0>
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d115      	bne.n	800ce80 <__gethex+0x2c6>
 800ce54:	42a6      	cmp	r6, r4
 800ce56:	d113      	bne.n	800ce80 <__gethex+0x2c6>
 800ce58:	2e01      	cmp	r6, #1
 800ce5a:	dc0b      	bgt.n	800ce74 <__gethex+0x2ba>
 800ce5c:	9a06      	ldr	r2, [sp, #24]
 800ce5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce62:	6013      	str	r3, [r2, #0]
 800ce64:	2301      	movs	r3, #1
 800ce66:	612b      	str	r3, [r5, #16]
 800ce68:	f8c9 3000 	str.w	r3, [r9]
 800ce6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce6e:	2762      	movs	r7, #98	; 0x62
 800ce70:	601d      	str	r5, [r3, #0]
 800ce72:	e72a      	b.n	800ccca <__gethex+0x110>
 800ce74:	1e71      	subs	r1, r6, #1
 800ce76:	4628      	mov	r0, r5
 800ce78:	f000 fdd0 	bl	800da1c <__any_on>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d1ed      	bne.n	800ce5c <__gethex+0x2a2>
 800ce80:	4629      	mov	r1, r5
 800ce82:	9802      	ldr	r0, [sp, #8]
 800ce84:	f000 fa20 	bl	800d2c8 <_Bfree>
 800ce88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	6013      	str	r3, [r2, #0]
 800ce8e:	2750      	movs	r7, #80	; 0x50
 800ce90:	e71b      	b.n	800ccca <__gethex+0x110>
 800ce92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d0e1      	beq.n	800ce5c <__gethex+0x2a2>
 800ce98:	e7f2      	b.n	800ce80 <__gethex+0x2c6>
 800ce9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1dd      	bne.n	800ce5c <__gethex+0x2a2>
 800cea0:	e7ee      	b.n	800ce80 <__gethex+0x2c6>
 800cea2:	1e67      	subs	r7, r4, #1
 800cea4:	f1ba 0f00 	cmp.w	sl, #0
 800cea8:	d131      	bne.n	800cf0e <__gethex+0x354>
 800ceaa:	b127      	cbz	r7, 800ceb6 <__gethex+0x2fc>
 800ceac:	4639      	mov	r1, r7
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f000 fdb4 	bl	800da1c <__any_on>
 800ceb4:	4682      	mov	sl, r0
 800ceb6:	117a      	asrs	r2, r7, #5
 800ceb8:	2301      	movs	r3, #1
 800ceba:	f007 071f 	and.w	r7, r7, #31
 800cebe:	fa03 f707 	lsl.w	r7, r3, r7
 800cec2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800cec6:	4621      	mov	r1, r4
 800cec8:	421f      	tst	r7, r3
 800ceca:	4628      	mov	r0, r5
 800cecc:	bf18      	it	ne
 800cece:	f04a 0a02 	orrne.w	sl, sl, #2
 800ced2:	1b36      	subs	r6, r6, r4
 800ced4:	f7ff fe22 	bl	800cb1c <rshift>
 800ced8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800cedc:	2702      	movs	r7, #2
 800cede:	f1ba 0f00 	cmp.w	sl, #0
 800cee2:	d048      	beq.n	800cf76 <__gethex+0x3bc>
 800cee4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cee8:	2b02      	cmp	r3, #2
 800ceea:	d015      	beq.n	800cf18 <__gethex+0x35e>
 800ceec:	2b03      	cmp	r3, #3
 800ceee:	d017      	beq.n	800cf20 <__gethex+0x366>
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d109      	bne.n	800cf08 <__gethex+0x34e>
 800cef4:	f01a 0f02 	tst.w	sl, #2
 800cef8:	d006      	beq.n	800cf08 <__gethex+0x34e>
 800cefa:	f8d9 3000 	ldr.w	r3, [r9]
 800cefe:	ea4a 0a03 	orr.w	sl, sl, r3
 800cf02:	f01a 0f01 	tst.w	sl, #1
 800cf06:	d10e      	bne.n	800cf26 <__gethex+0x36c>
 800cf08:	f047 0710 	orr.w	r7, r7, #16
 800cf0c:	e033      	b.n	800cf76 <__gethex+0x3bc>
 800cf0e:	f04f 0a01 	mov.w	sl, #1
 800cf12:	e7d0      	b.n	800ceb6 <__gethex+0x2fc>
 800cf14:	2701      	movs	r7, #1
 800cf16:	e7e2      	b.n	800cede <__gethex+0x324>
 800cf18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf1a:	f1c3 0301 	rsb	r3, r3, #1
 800cf1e:	9315      	str	r3, [sp, #84]	; 0x54
 800cf20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d0f0      	beq.n	800cf08 <__gethex+0x34e>
 800cf26:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800cf2a:	f105 0314 	add.w	r3, r5, #20
 800cf2e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800cf32:	eb03 010a 	add.w	r1, r3, sl
 800cf36:	f04f 0c00 	mov.w	ip, #0
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf40:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf44:	d01c      	beq.n	800cf80 <__gethex+0x3c6>
 800cf46:	3201      	adds	r2, #1
 800cf48:	6002      	str	r2, [r0, #0]
 800cf4a:	2f02      	cmp	r7, #2
 800cf4c:	f105 0314 	add.w	r3, r5, #20
 800cf50:	d138      	bne.n	800cfc4 <__gethex+0x40a>
 800cf52:	f8d8 2000 	ldr.w	r2, [r8]
 800cf56:	3a01      	subs	r2, #1
 800cf58:	42b2      	cmp	r2, r6
 800cf5a:	d10a      	bne.n	800cf72 <__gethex+0x3b8>
 800cf5c:	1171      	asrs	r1, r6, #5
 800cf5e:	2201      	movs	r2, #1
 800cf60:	f006 061f 	and.w	r6, r6, #31
 800cf64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf68:	fa02 f606 	lsl.w	r6, r2, r6
 800cf6c:	421e      	tst	r6, r3
 800cf6e:	bf18      	it	ne
 800cf70:	4617      	movne	r7, r2
 800cf72:	f047 0720 	orr.w	r7, r7, #32
 800cf76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf78:	601d      	str	r5, [r3, #0]
 800cf7a:	9b06      	ldr	r3, [sp, #24]
 800cf7c:	601c      	str	r4, [r3, #0]
 800cf7e:	e6a4      	b.n	800ccca <__gethex+0x110>
 800cf80:	4299      	cmp	r1, r3
 800cf82:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf86:	d8d8      	bhi.n	800cf3a <__gethex+0x380>
 800cf88:	68ab      	ldr	r3, [r5, #8]
 800cf8a:	4599      	cmp	r9, r3
 800cf8c:	db12      	blt.n	800cfb4 <__gethex+0x3fa>
 800cf8e:	6869      	ldr	r1, [r5, #4]
 800cf90:	9802      	ldr	r0, [sp, #8]
 800cf92:	3101      	adds	r1, #1
 800cf94:	f000 f964 	bl	800d260 <_Balloc>
 800cf98:	692a      	ldr	r2, [r5, #16]
 800cf9a:	3202      	adds	r2, #2
 800cf9c:	f105 010c 	add.w	r1, r5, #12
 800cfa0:	4683      	mov	fp, r0
 800cfa2:	0092      	lsls	r2, r2, #2
 800cfa4:	300c      	adds	r0, #12
 800cfa6:	f7fc ff8a 	bl	8009ebe <memcpy>
 800cfaa:	4629      	mov	r1, r5
 800cfac:	9802      	ldr	r0, [sp, #8]
 800cfae:	f000 f98b 	bl	800d2c8 <_Bfree>
 800cfb2:	465d      	mov	r5, fp
 800cfb4:	692b      	ldr	r3, [r5, #16]
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cfbc:	612a      	str	r2, [r5, #16]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	615a      	str	r2, [r3, #20]
 800cfc2:	e7c2      	b.n	800cf4a <__gethex+0x390>
 800cfc4:	692a      	ldr	r2, [r5, #16]
 800cfc6:	454a      	cmp	r2, r9
 800cfc8:	dd0b      	ble.n	800cfe2 <__gethex+0x428>
 800cfca:	2101      	movs	r1, #1
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f7ff fda5 	bl	800cb1c <rshift>
 800cfd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cfd6:	3401      	adds	r4, #1
 800cfd8:	42a3      	cmp	r3, r4
 800cfda:	f6ff aed9 	blt.w	800cd90 <__gethex+0x1d6>
 800cfde:	2701      	movs	r7, #1
 800cfe0:	e7c7      	b.n	800cf72 <__gethex+0x3b8>
 800cfe2:	f016 061f 	ands.w	r6, r6, #31
 800cfe6:	d0fa      	beq.n	800cfde <__gethex+0x424>
 800cfe8:	449a      	add	sl, r3
 800cfea:	f1c6 0620 	rsb	r6, r6, #32
 800cfee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cff2:	f000 f9f9 	bl	800d3e8 <__hi0bits>
 800cff6:	42b0      	cmp	r0, r6
 800cff8:	dbe7      	blt.n	800cfca <__gethex+0x410>
 800cffa:	e7f0      	b.n	800cfde <__gethex+0x424>

0800cffc <L_shift>:
 800cffc:	f1c2 0208 	rsb	r2, r2, #8
 800d000:	0092      	lsls	r2, r2, #2
 800d002:	b570      	push	{r4, r5, r6, lr}
 800d004:	f1c2 0620 	rsb	r6, r2, #32
 800d008:	6843      	ldr	r3, [r0, #4]
 800d00a:	6804      	ldr	r4, [r0, #0]
 800d00c:	fa03 f506 	lsl.w	r5, r3, r6
 800d010:	432c      	orrs	r4, r5
 800d012:	40d3      	lsrs	r3, r2
 800d014:	6004      	str	r4, [r0, #0]
 800d016:	f840 3f04 	str.w	r3, [r0, #4]!
 800d01a:	4288      	cmp	r0, r1
 800d01c:	d3f4      	bcc.n	800d008 <L_shift+0xc>
 800d01e:	bd70      	pop	{r4, r5, r6, pc}

0800d020 <__match>:
 800d020:	b530      	push	{r4, r5, lr}
 800d022:	6803      	ldr	r3, [r0, #0]
 800d024:	3301      	adds	r3, #1
 800d026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d02a:	b914      	cbnz	r4, 800d032 <__match+0x12>
 800d02c:	6003      	str	r3, [r0, #0]
 800d02e:	2001      	movs	r0, #1
 800d030:	bd30      	pop	{r4, r5, pc}
 800d032:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d036:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d03a:	2d19      	cmp	r5, #25
 800d03c:	bf98      	it	ls
 800d03e:	3220      	addls	r2, #32
 800d040:	42a2      	cmp	r2, r4
 800d042:	d0f0      	beq.n	800d026 <__match+0x6>
 800d044:	2000      	movs	r0, #0
 800d046:	e7f3      	b.n	800d030 <__match+0x10>

0800d048 <__hexnan>:
 800d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04c:	680b      	ldr	r3, [r1, #0]
 800d04e:	6801      	ldr	r1, [r0, #0]
 800d050:	115f      	asrs	r7, r3, #5
 800d052:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d056:	f013 031f 	ands.w	r3, r3, #31
 800d05a:	b087      	sub	sp, #28
 800d05c:	bf18      	it	ne
 800d05e:	3704      	addne	r7, #4
 800d060:	2500      	movs	r5, #0
 800d062:	1f3e      	subs	r6, r7, #4
 800d064:	4682      	mov	sl, r0
 800d066:	4690      	mov	r8, r2
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	f847 5c04 	str.w	r5, [r7, #-4]
 800d06e:	46b1      	mov	r9, r6
 800d070:	4634      	mov	r4, r6
 800d072:	9502      	str	r5, [sp, #8]
 800d074:	46ab      	mov	fp, r5
 800d076:	784a      	ldrb	r2, [r1, #1]
 800d078:	1c4b      	adds	r3, r1, #1
 800d07a:	9303      	str	r3, [sp, #12]
 800d07c:	b342      	cbz	r2, 800d0d0 <__hexnan+0x88>
 800d07e:	4610      	mov	r0, r2
 800d080:	9105      	str	r1, [sp, #20]
 800d082:	9204      	str	r2, [sp, #16]
 800d084:	f7ff fd84 	bl	800cb90 <__hexdig_fun>
 800d088:	2800      	cmp	r0, #0
 800d08a:	d143      	bne.n	800d114 <__hexnan+0xcc>
 800d08c:	9a04      	ldr	r2, [sp, #16]
 800d08e:	9905      	ldr	r1, [sp, #20]
 800d090:	2a20      	cmp	r2, #32
 800d092:	d818      	bhi.n	800d0c6 <__hexnan+0x7e>
 800d094:	9b02      	ldr	r3, [sp, #8]
 800d096:	459b      	cmp	fp, r3
 800d098:	dd13      	ble.n	800d0c2 <__hexnan+0x7a>
 800d09a:	454c      	cmp	r4, r9
 800d09c:	d206      	bcs.n	800d0ac <__hexnan+0x64>
 800d09e:	2d07      	cmp	r5, #7
 800d0a0:	dc04      	bgt.n	800d0ac <__hexnan+0x64>
 800d0a2:	462a      	mov	r2, r5
 800d0a4:	4649      	mov	r1, r9
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7ff ffa8 	bl	800cffc <L_shift>
 800d0ac:	4544      	cmp	r4, r8
 800d0ae:	d944      	bls.n	800d13a <__hexnan+0xf2>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f1a4 0904 	sub.w	r9, r4, #4
 800d0b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0ba:	f8cd b008 	str.w	fp, [sp, #8]
 800d0be:	464c      	mov	r4, r9
 800d0c0:	461d      	mov	r5, r3
 800d0c2:	9903      	ldr	r1, [sp, #12]
 800d0c4:	e7d7      	b.n	800d076 <__hexnan+0x2e>
 800d0c6:	2a29      	cmp	r2, #41	; 0x29
 800d0c8:	d14a      	bne.n	800d160 <__hexnan+0x118>
 800d0ca:	3102      	adds	r1, #2
 800d0cc:	f8ca 1000 	str.w	r1, [sl]
 800d0d0:	f1bb 0f00 	cmp.w	fp, #0
 800d0d4:	d044      	beq.n	800d160 <__hexnan+0x118>
 800d0d6:	454c      	cmp	r4, r9
 800d0d8:	d206      	bcs.n	800d0e8 <__hexnan+0xa0>
 800d0da:	2d07      	cmp	r5, #7
 800d0dc:	dc04      	bgt.n	800d0e8 <__hexnan+0xa0>
 800d0de:	462a      	mov	r2, r5
 800d0e0:	4649      	mov	r1, r9
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f7ff ff8a 	bl	800cffc <L_shift>
 800d0e8:	4544      	cmp	r4, r8
 800d0ea:	d928      	bls.n	800d13e <__hexnan+0xf6>
 800d0ec:	4643      	mov	r3, r8
 800d0ee:	f854 2b04 	ldr.w	r2, [r4], #4
 800d0f2:	f843 2b04 	str.w	r2, [r3], #4
 800d0f6:	42a6      	cmp	r6, r4
 800d0f8:	d2f9      	bcs.n	800d0ee <__hexnan+0xa6>
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f843 2b04 	str.w	r2, [r3], #4
 800d100:	429e      	cmp	r6, r3
 800d102:	d2fb      	bcs.n	800d0fc <__hexnan+0xb4>
 800d104:	6833      	ldr	r3, [r6, #0]
 800d106:	b91b      	cbnz	r3, 800d110 <__hexnan+0xc8>
 800d108:	4546      	cmp	r6, r8
 800d10a:	d127      	bne.n	800d15c <__hexnan+0x114>
 800d10c:	2301      	movs	r3, #1
 800d10e:	6033      	str	r3, [r6, #0]
 800d110:	2005      	movs	r0, #5
 800d112:	e026      	b.n	800d162 <__hexnan+0x11a>
 800d114:	3501      	adds	r5, #1
 800d116:	2d08      	cmp	r5, #8
 800d118:	f10b 0b01 	add.w	fp, fp, #1
 800d11c:	dd06      	ble.n	800d12c <__hexnan+0xe4>
 800d11e:	4544      	cmp	r4, r8
 800d120:	d9cf      	bls.n	800d0c2 <__hexnan+0x7a>
 800d122:	2300      	movs	r3, #0
 800d124:	f844 3c04 	str.w	r3, [r4, #-4]
 800d128:	2501      	movs	r5, #1
 800d12a:	3c04      	subs	r4, #4
 800d12c:	6822      	ldr	r2, [r4, #0]
 800d12e:	f000 000f 	and.w	r0, r0, #15
 800d132:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d136:	6020      	str	r0, [r4, #0]
 800d138:	e7c3      	b.n	800d0c2 <__hexnan+0x7a>
 800d13a:	2508      	movs	r5, #8
 800d13c:	e7c1      	b.n	800d0c2 <__hexnan+0x7a>
 800d13e:	9b01      	ldr	r3, [sp, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d0df      	beq.n	800d104 <__hexnan+0xbc>
 800d144:	f04f 32ff 	mov.w	r2, #4294967295
 800d148:	f1c3 0320 	rsb	r3, r3, #32
 800d14c:	fa22 f303 	lsr.w	r3, r2, r3
 800d150:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d154:	401a      	ands	r2, r3
 800d156:	f847 2c04 	str.w	r2, [r7, #-4]
 800d15a:	e7d3      	b.n	800d104 <__hexnan+0xbc>
 800d15c:	3e04      	subs	r6, #4
 800d15e:	e7d1      	b.n	800d104 <__hexnan+0xbc>
 800d160:	2004      	movs	r0, #4
 800d162:	b007      	add	sp, #28
 800d164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d168 <__localeconv_l>:
 800d168:	30f0      	adds	r0, #240	; 0xf0
 800d16a:	4770      	bx	lr

0800d16c <_localeconv_r>:
 800d16c:	4b04      	ldr	r3, [pc, #16]	; (800d180 <_localeconv_r+0x14>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6a18      	ldr	r0, [r3, #32]
 800d172:	4b04      	ldr	r3, [pc, #16]	; (800d184 <_localeconv_r+0x18>)
 800d174:	2800      	cmp	r0, #0
 800d176:	bf08      	it	eq
 800d178:	4618      	moveq	r0, r3
 800d17a:	30f0      	adds	r0, #240	; 0xf0
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	20000078 	.word	0x20000078
 800d184:	200000dc 	.word	0x200000dc

0800d188 <__swhatbuf_r>:
 800d188:	b570      	push	{r4, r5, r6, lr}
 800d18a:	460e      	mov	r6, r1
 800d18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d190:	2900      	cmp	r1, #0
 800d192:	b096      	sub	sp, #88	; 0x58
 800d194:	4614      	mov	r4, r2
 800d196:	461d      	mov	r5, r3
 800d198:	da07      	bge.n	800d1aa <__swhatbuf_r+0x22>
 800d19a:	2300      	movs	r3, #0
 800d19c:	602b      	str	r3, [r5, #0]
 800d19e:	89b3      	ldrh	r3, [r6, #12]
 800d1a0:	061a      	lsls	r2, r3, #24
 800d1a2:	d410      	bmi.n	800d1c6 <__swhatbuf_r+0x3e>
 800d1a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1a8:	e00e      	b.n	800d1c8 <__swhatbuf_r+0x40>
 800d1aa:	466a      	mov	r2, sp
 800d1ac:	f001 f828 	bl	800e200 <_fstat_r>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	dbf2      	blt.n	800d19a <__swhatbuf_r+0x12>
 800d1b4:	9a01      	ldr	r2, [sp, #4]
 800d1b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1be:	425a      	negs	r2, r3
 800d1c0:	415a      	adcs	r2, r3
 800d1c2:	602a      	str	r2, [r5, #0]
 800d1c4:	e7ee      	b.n	800d1a4 <__swhatbuf_r+0x1c>
 800d1c6:	2340      	movs	r3, #64	; 0x40
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	6023      	str	r3, [r4, #0]
 800d1cc:	b016      	add	sp, #88	; 0x58
 800d1ce:	bd70      	pop	{r4, r5, r6, pc}

0800d1d0 <__smakebuf_r>:
 800d1d0:	898b      	ldrh	r3, [r1, #12]
 800d1d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1d4:	079d      	lsls	r5, r3, #30
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	460c      	mov	r4, r1
 800d1da:	d507      	bpl.n	800d1ec <__smakebuf_r+0x1c>
 800d1dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	6123      	str	r3, [r4, #16]
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	6163      	str	r3, [r4, #20]
 800d1e8:	b002      	add	sp, #8
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
 800d1ec:	ab01      	add	r3, sp, #4
 800d1ee:	466a      	mov	r2, sp
 800d1f0:	f7ff ffca 	bl	800d188 <__swhatbuf_r>
 800d1f4:	9900      	ldr	r1, [sp, #0]
 800d1f6:	4605      	mov	r5, r0
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	f000 fc8d 	bl	800db18 <_malloc_r>
 800d1fe:	b948      	cbnz	r0, 800d214 <__smakebuf_r+0x44>
 800d200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d204:	059a      	lsls	r2, r3, #22
 800d206:	d4ef      	bmi.n	800d1e8 <__smakebuf_r+0x18>
 800d208:	f023 0303 	bic.w	r3, r3, #3
 800d20c:	f043 0302 	orr.w	r3, r3, #2
 800d210:	81a3      	strh	r3, [r4, #12]
 800d212:	e7e3      	b.n	800d1dc <__smakebuf_r+0xc>
 800d214:	4b0d      	ldr	r3, [pc, #52]	; (800d24c <__smakebuf_r+0x7c>)
 800d216:	62b3      	str	r3, [r6, #40]	; 0x28
 800d218:	89a3      	ldrh	r3, [r4, #12]
 800d21a:	6020      	str	r0, [r4, #0]
 800d21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	9b00      	ldr	r3, [sp, #0]
 800d224:	6163      	str	r3, [r4, #20]
 800d226:	9b01      	ldr	r3, [sp, #4]
 800d228:	6120      	str	r0, [r4, #16]
 800d22a:	b15b      	cbz	r3, 800d244 <__smakebuf_r+0x74>
 800d22c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d230:	4630      	mov	r0, r6
 800d232:	f000 fff7 	bl	800e224 <_isatty_r>
 800d236:	b128      	cbz	r0, 800d244 <__smakebuf_r+0x74>
 800d238:	89a3      	ldrh	r3, [r4, #12]
 800d23a:	f023 0303 	bic.w	r3, r3, #3
 800d23e:	f043 0301 	orr.w	r3, r3, #1
 800d242:	81a3      	strh	r3, [r4, #12]
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	431d      	orrs	r5, r3
 800d248:	81a5      	strh	r5, [r4, #12]
 800d24a:	e7cd      	b.n	800d1e8 <__smakebuf_r+0x18>
 800d24c:	0800c9d1 	.word	0x0800c9d1

0800d250 <malloc>:
 800d250:	4b02      	ldr	r3, [pc, #8]	; (800d25c <malloc+0xc>)
 800d252:	4601      	mov	r1, r0
 800d254:	6818      	ldr	r0, [r3, #0]
 800d256:	f000 bc5f 	b.w	800db18 <_malloc_r>
 800d25a:	bf00      	nop
 800d25c:	20000078 	.word	0x20000078

0800d260 <_Balloc>:
 800d260:	b570      	push	{r4, r5, r6, lr}
 800d262:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d264:	4604      	mov	r4, r0
 800d266:	460e      	mov	r6, r1
 800d268:	b93d      	cbnz	r5, 800d27a <_Balloc+0x1a>
 800d26a:	2010      	movs	r0, #16
 800d26c:	f7ff fff0 	bl	800d250 <malloc>
 800d270:	6260      	str	r0, [r4, #36]	; 0x24
 800d272:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d276:	6005      	str	r5, [r0, #0]
 800d278:	60c5      	str	r5, [r0, #12]
 800d27a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d27c:	68eb      	ldr	r3, [r5, #12]
 800d27e:	b183      	cbz	r3, 800d2a2 <_Balloc+0x42>
 800d280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d288:	b9b8      	cbnz	r0, 800d2ba <_Balloc+0x5a>
 800d28a:	2101      	movs	r1, #1
 800d28c:	fa01 f506 	lsl.w	r5, r1, r6
 800d290:	1d6a      	adds	r2, r5, #5
 800d292:	0092      	lsls	r2, r2, #2
 800d294:	4620      	mov	r0, r4
 800d296:	f000 fbe2 	bl	800da5e <_calloc_r>
 800d29a:	b160      	cbz	r0, 800d2b6 <_Balloc+0x56>
 800d29c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d2a0:	e00e      	b.n	800d2c0 <_Balloc+0x60>
 800d2a2:	2221      	movs	r2, #33	; 0x21
 800d2a4:	2104      	movs	r1, #4
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f000 fbd9 	bl	800da5e <_calloc_r>
 800d2ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2ae:	60e8      	str	r0, [r5, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d1e4      	bne.n	800d280 <_Balloc+0x20>
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ba:	6802      	ldr	r2, [r0, #0]
 800d2bc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2c6:	e7f7      	b.n	800d2b8 <_Balloc+0x58>

0800d2c8 <_Bfree>:
 800d2c8:	b570      	push	{r4, r5, r6, lr}
 800d2ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	460d      	mov	r5, r1
 800d2d0:	b93c      	cbnz	r4, 800d2e2 <_Bfree+0x1a>
 800d2d2:	2010      	movs	r0, #16
 800d2d4:	f7ff ffbc 	bl	800d250 <malloc>
 800d2d8:	6270      	str	r0, [r6, #36]	; 0x24
 800d2da:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2de:	6004      	str	r4, [r0, #0]
 800d2e0:	60c4      	str	r4, [r0, #12]
 800d2e2:	b13d      	cbz	r5, 800d2f4 <_Bfree+0x2c>
 800d2e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d2e6:	686a      	ldr	r2, [r5, #4]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2ee:	6029      	str	r1, [r5, #0]
 800d2f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d2f4:	bd70      	pop	{r4, r5, r6, pc}

0800d2f6 <__multadd>:
 800d2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2fa:	690d      	ldr	r5, [r1, #16]
 800d2fc:	461f      	mov	r7, r3
 800d2fe:	4606      	mov	r6, r0
 800d300:	460c      	mov	r4, r1
 800d302:	f101 0c14 	add.w	ip, r1, #20
 800d306:	2300      	movs	r3, #0
 800d308:	f8dc 0000 	ldr.w	r0, [ip]
 800d30c:	b281      	uxth	r1, r0
 800d30e:	fb02 7101 	mla	r1, r2, r1, r7
 800d312:	0c0f      	lsrs	r7, r1, #16
 800d314:	0c00      	lsrs	r0, r0, #16
 800d316:	fb02 7000 	mla	r0, r2, r0, r7
 800d31a:	b289      	uxth	r1, r1
 800d31c:	3301      	adds	r3, #1
 800d31e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d322:	429d      	cmp	r5, r3
 800d324:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d328:	f84c 1b04 	str.w	r1, [ip], #4
 800d32c:	dcec      	bgt.n	800d308 <__multadd+0x12>
 800d32e:	b1d7      	cbz	r7, 800d366 <__multadd+0x70>
 800d330:	68a3      	ldr	r3, [r4, #8]
 800d332:	42ab      	cmp	r3, r5
 800d334:	dc12      	bgt.n	800d35c <__multadd+0x66>
 800d336:	6861      	ldr	r1, [r4, #4]
 800d338:	4630      	mov	r0, r6
 800d33a:	3101      	adds	r1, #1
 800d33c:	f7ff ff90 	bl	800d260 <_Balloc>
 800d340:	6922      	ldr	r2, [r4, #16]
 800d342:	3202      	adds	r2, #2
 800d344:	f104 010c 	add.w	r1, r4, #12
 800d348:	4680      	mov	r8, r0
 800d34a:	0092      	lsls	r2, r2, #2
 800d34c:	300c      	adds	r0, #12
 800d34e:	f7fc fdb6 	bl	8009ebe <memcpy>
 800d352:	4621      	mov	r1, r4
 800d354:	4630      	mov	r0, r6
 800d356:	f7ff ffb7 	bl	800d2c8 <_Bfree>
 800d35a:	4644      	mov	r4, r8
 800d35c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d360:	3501      	adds	r5, #1
 800d362:	615f      	str	r7, [r3, #20]
 800d364:	6125      	str	r5, [r4, #16]
 800d366:	4620      	mov	r0, r4
 800d368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d36c <__s2b>:
 800d36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d370:	460c      	mov	r4, r1
 800d372:	4615      	mov	r5, r2
 800d374:	461f      	mov	r7, r3
 800d376:	2209      	movs	r2, #9
 800d378:	3308      	adds	r3, #8
 800d37a:	4606      	mov	r6, r0
 800d37c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d380:	2100      	movs	r1, #0
 800d382:	2201      	movs	r2, #1
 800d384:	429a      	cmp	r2, r3
 800d386:	db20      	blt.n	800d3ca <__s2b+0x5e>
 800d388:	4630      	mov	r0, r6
 800d38a:	f7ff ff69 	bl	800d260 <_Balloc>
 800d38e:	9b08      	ldr	r3, [sp, #32]
 800d390:	6143      	str	r3, [r0, #20]
 800d392:	2d09      	cmp	r5, #9
 800d394:	f04f 0301 	mov.w	r3, #1
 800d398:	6103      	str	r3, [r0, #16]
 800d39a:	dd19      	ble.n	800d3d0 <__s2b+0x64>
 800d39c:	f104 0809 	add.w	r8, r4, #9
 800d3a0:	46c1      	mov	r9, r8
 800d3a2:	442c      	add	r4, r5
 800d3a4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d3a8:	4601      	mov	r1, r0
 800d3aa:	3b30      	subs	r3, #48	; 0x30
 800d3ac:	220a      	movs	r2, #10
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	f7ff ffa1 	bl	800d2f6 <__multadd>
 800d3b4:	45a1      	cmp	r9, r4
 800d3b6:	d1f5      	bne.n	800d3a4 <__s2b+0x38>
 800d3b8:	eb08 0405 	add.w	r4, r8, r5
 800d3bc:	3c08      	subs	r4, #8
 800d3be:	1b2d      	subs	r5, r5, r4
 800d3c0:	1963      	adds	r3, r4, r5
 800d3c2:	42bb      	cmp	r3, r7
 800d3c4:	db07      	blt.n	800d3d6 <__s2b+0x6a>
 800d3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ca:	0052      	lsls	r2, r2, #1
 800d3cc:	3101      	adds	r1, #1
 800d3ce:	e7d9      	b.n	800d384 <__s2b+0x18>
 800d3d0:	340a      	adds	r4, #10
 800d3d2:	2509      	movs	r5, #9
 800d3d4:	e7f3      	b.n	800d3be <__s2b+0x52>
 800d3d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d3da:	4601      	mov	r1, r0
 800d3dc:	3b30      	subs	r3, #48	; 0x30
 800d3de:	220a      	movs	r2, #10
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	f7ff ff88 	bl	800d2f6 <__multadd>
 800d3e6:	e7eb      	b.n	800d3c0 <__s2b+0x54>

0800d3e8 <__hi0bits>:
 800d3e8:	0c02      	lsrs	r2, r0, #16
 800d3ea:	0412      	lsls	r2, r2, #16
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	b9b2      	cbnz	r2, 800d41e <__hi0bits+0x36>
 800d3f0:	0403      	lsls	r3, r0, #16
 800d3f2:	2010      	movs	r0, #16
 800d3f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d3f8:	bf04      	itt	eq
 800d3fa:	021b      	lsleq	r3, r3, #8
 800d3fc:	3008      	addeq	r0, #8
 800d3fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d402:	bf04      	itt	eq
 800d404:	011b      	lsleq	r3, r3, #4
 800d406:	3004      	addeq	r0, #4
 800d408:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d40c:	bf04      	itt	eq
 800d40e:	009b      	lsleq	r3, r3, #2
 800d410:	3002      	addeq	r0, #2
 800d412:	2b00      	cmp	r3, #0
 800d414:	db06      	blt.n	800d424 <__hi0bits+0x3c>
 800d416:	005b      	lsls	r3, r3, #1
 800d418:	d503      	bpl.n	800d422 <__hi0bits+0x3a>
 800d41a:	3001      	adds	r0, #1
 800d41c:	4770      	bx	lr
 800d41e:	2000      	movs	r0, #0
 800d420:	e7e8      	b.n	800d3f4 <__hi0bits+0xc>
 800d422:	2020      	movs	r0, #32
 800d424:	4770      	bx	lr

0800d426 <__lo0bits>:
 800d426:	6803      	ldr	r3, [r0, #0]
 800d428:	f013 0207 	ands.w	r2, r3, #7
 800d42c:	4601      	mov	r1, r0
 800d42e:	d00b      	beq.n	800d448 <__lo0bits+0x22>
 800d430:	07da      	lsls	r2, r3, #31
 800d432:	d423      	bmi.n	800d47c <__lo0bits+0x56>
 800d434:	0798      	lsls	r0, r3, #30
 800d436:	bf49      	itett	mi
 800d438:	085b      	lsrmi	r3, r3, #1
 800d43a:	089b      	lsrpl	r3, r3, #2
 800d43c:	2001      	movmi	r0, #1
 800d43e:	600b      	strmi	r3, [r1, #0]
 800d440:	bf5c      	itt	pl
 800d442:	600b      	strpl	r3, [r1, #0]
 800d444:	2002      	movpl	r0, #2
 800d446:	4770      	bx	lr
 800d448:	b298      	uxth	r0, r3
 800d44a:	b9a8      	cbnz	r0, 800d478 <__lo0bits+0x52>
 800d44c:	0c1b      	lsrs	r3, r3, #16
 800d44e:	2010      	movs	r0, #16
 800d450:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d454:	bf04      	itt	eq
 800d456:	0a1b      	lsreq	r3, r3, #8
 800d458:	3008      	addeq	r0, #8
 800d45a:	071a      	lsls	r2, r3, #28
 800d45c:	bf04      	itt	eq
 800d45e:	091b      	lsreq	r3, r3, #4
 800d460:	3004      	addeq	r0, #4
 800d462:	079a      	lsls	r2, r3, #30
 800d464:	bf04      	itt	eq
 800d466:	089b      	lsreq	r3, r3, #2
 800d468:	3002      	addeq	r0, #2
 800d46a:	07da      	lsls	r2, r3, #31
 800d46c:	d402      	bmi.n	800d474 <__lo0bits+0x4e>
 800d46e:	085b      	lsrs	r3, r3, #1
 800d470:	d006      	beq.n	800d480 <__lo0bits+0x5a>
 800d472:	3001      	adds	r0, #1
 800d474:	600b      	str	r3, [r1, #0]
 800d476:	4770      	bx	lr
 800d478:	4610      	mov	r0, r2
 800d47a:	e7e9      	b.n	800d450 <__lo0bits+0x2a>
 800d47c:	2000      	movs	r0, #0
 800d47e:	4770      	bx	lr
 800d480:	2020      	movs	r0, #32
 800d482:	4770      	bx	lr

0800d484 <__i2b>:
 800d484:	b510      	push	{r4, lr}
 800d486:	460c      	mov	r4, r1
 800d488:	2101      	movs	r1, #1
 800d48a:	f7ff fee9 	bl	800d260 <_Balloc>
 800d48e:	2201      	movs	r2, #1
 800d490:	6144      	str	r4, [r0, #20]
 800d492:	6102      	str	r2, [r0, #16]
 800d494:	bd10      	pop	{r4, pc}

0800d496 <__multiply>:
 800d496:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49a:	4614      	mov	r4, r2
 800d49c:	690a      	ldr	r2, [r1, #16]
 800d49e:	6923      	ldr	r3, [r4, #16]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	bfb8      	it	lt
 800d4a4:	460b      	movlt	r3, r1
 800d4a6:	4688      	mov	r8, r1
 800d4a8:	bfbc      	itt	lt
 800d4aa:	46a0      	movlt	r8, r4
 800d4ac:	461c      	movlt	r4, r3
 800d4ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d4b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d4b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4be:	eb07 0609 	add.w	r6, r7, r9
 800d4c2:	42b3      	cmp	r3, r6
 800d4c4:	bfb8      	it	lt
 800d4c6:	3101      	addlt	r1, #1
 800d4c8:	f7ff feca 	bl	800d260 <_Balloc>
 800d4cc:	f100 0514 	add.w	r5, r0, #20
 800d4d0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d4d4:	462b      	mov	r3, r5
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	4573      	cmp	r3, lr
 800d4da:	d316      	bcc.n	800d50a <__multiply+0x74>
 800d4dc:	f104 0214 	add.w	r2, r4, #20
 800d4e0:	f108 0114 	add.w	r1, r8, #20
 800d4e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d4e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d4ec:	9300      	str	r3, [sp, #0]
 800d4ee:	9b00      	ldr	r3, [sp, #0]
 800d4f0:	9201      	str	r2, [sp, #4]
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d80c      	bhi.n	800d510 <__multiply+0x7a>
 800d4f6:	2e00      	cmp	r6, #0
 800d4f8:	dd03      	ble.n	800d502 <__multiply+0x6c>
 800d4fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d05d      	beq.n	800d5be <__multiply+0x128>
 800d502:	6106      	str	r6, [r0, #16]
 800d504:	b003      	add	sp, #12
 800d506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d50a:	f843 2b04 	str.w	r2, [r3], #4
 800d50e:	e7e3      	b.n	800d4d8 <__multiply+0x42>
 800d510:	f8b2 b000 	ldrh.w	fp, [r2]
 800d514:	f1bb 0f00 	cmp.w	fp, #0
 800d518:	d023      	beq.n	800d562 <__multiply+0xcc>
 800d51a:	4689      	mov	r9, r1
 800d51c:	46ac      	mov	ip, r5
 800d51e:	f04f 0800 	mov.w	r8, #0
 800d522:	f859 4b04 	ldr.w	r4, [r9], #4
 800d526:	f8dc a000 	ldr.w	sl, [ip]
 800d52a:	b2a3      	uxth	r3, r4
 800d52c:	fa1f fa8a 	uxth.w	sl, sl
 800d530:	fb0b a303 	mla	r3, fp, r3, sl
 800d534:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d538:	f8dc 4000 	ldr.w	r4, [ip]
 800d53c:	4443      	add	r3, r8
 800d53e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d542:	fb0b 840a 	mla	r4, fp, sl, r8
 800d546:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d54a:	46e2      	mov	sl, ip
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d552:	454f      	cmp	r7, r9
 800d554:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d558:	f84a 3b04 	str.w	r3, [sl], #4
 800d55c:	d82b      	bhi.n	800d5b6 <__multiply+0x120>
 800d55e:	f8cc 8004 	str.w	r8, [ip, #4]
 800d562:	9b01      	ldr	r3, [sp, #4]
 800d564:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d568:	3204      	adds	r2, #4
 800d56a:	f1ba 0f00 	cmp.w	sl, #0
 800d56e:	d020      	beq.n	800d5b2 <__multiply+0x11c>
 800d570:	682b      	ldr	r3, [r5, #0]
 800d572:	4689      	mov	r9, r1
 800d574:	46a8      	mov	r8, r5
 800d576:	f04f 0b00 	mov.w	fp, #0
 800d57a:	f8b9 c000 	ldrh.w	ip, [r9]
 800d57e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d582:	fb0a 440c 	mla	r4, sl, ip, r4
 800d586:	445c      	add	r4, fp
 800d588:	46c4      	mov	ip, r8
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d590:	f84c 3b04 	str.w	r3, [ip], #4
 800d594:	f859 3b04 	ldr.w	r3, [r9], #4
 800d598:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d59c:	0c1b      	lsrs	r3, r3, #16
 800d59e:	fb0a b303 	mla	r3, sl, r3, fp
 800d5a2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d5a6:	454f      	cmp	r7, r9
 800d5a8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d5ac:	d805      	bhi.n	800d5ba <__multiply+0x124>
 800d5ae:	f8c8 3004 	str.w	r3, [r8, #4]
 800d5b2:	3504      	adds	r5, #4
 800d5b4:	e79b      	b.n	800d4ee <__multiply+0x58>
 800d5b6:	46d4      	mov	ip, sl
 800d5b8:	e7b3      	b.n	800d522 <__multiply+0x8c>
 800d5ba:	46e0      	mov	r8, ip
 800d5bc:	e7dd      	b.n	800d57a <__multiply+0xe4>
 800d5be:	3e01      	subs	r6, #1
 800d5c0:	e799      	b.n	800d4f6 <__multiply+0x60>
	...

0800d5c4 <__pow5mult>:
 800d5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5c8:	4615      	mov	r5, r2
 800d5ca:	f012 0203 	ands.w	r2, r2, #3
 800d5ce:	4606      	mov	r6, r0
 800d5d0:	460f      	mov	r7, r1
 800d5d2:	d007      	beq.n	800d5e4 <__pow5mult+0x20>
 800d5d4:	3a01      	subs	r2, #1
 800d5d6:	4c21      	ldr	r4, [pc, #132]	; (800d65c <__pow5mult+0x98>)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5de:	f7ff fe8a 	bl	800d2f6 <__multadd>
 800d5e2:	4607      	mov	r7, r0
 800d5e4:	10ad      	asrs	r5, r5, #2
 800d5e6:	d035      	beq.n	800d654 <__pow5mult+0x90>
 800d5e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d5ea:	b93c      	cbnz	r4, 800d5fc <__pow5mult+0x38>
 800d5ec:	2010      	movs	r0, #16
 800d5ee:	f7ff fe2f 	bl	800d250 <malloc>
 800d5f2:	6270      	str	r0, [r6, #36]	; 0x24
 800d5f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5f8:	6004      	str	r4, [r0, #0]
 800d5fa:	60c4      	str	r4, [r0, #12]
 800d5fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d604:	b94c      	cbnz	r4, 800d61a <__pow5mult+0x56>
 800d606:	f240 2171 	movw	r1, #625	; 0x271
 800d60a:	4630      	mov	r0, r6
 800d60c:	f7ff ff3a 	bl	800d484 <__i2b>
 800d610:	2300      	movs	r3, #0
 800d612:	f8c8 0008 	str.w	r0, [r8, #8]
 800d616:	4604      	mov	r4, r0
 800d618:	6003      	str	r3, [r0, #0]
 800d61a:	f04f 0800 	mov.w	r8, #0
 800d61e:	07eb      	lsls	r3, r5, #31
 800d620:	d50a      	bpl.n	800d638 <__pow5mult+0x74>
 800d622:	4639      	mov	r1, r7
 800d624:	4622      	mov	r2, r4
 800d626:	4630      	mov	r0, r6
 800d628:	f7ff ff35 	bl	800d496 <__multiply>
 800d62c:	4639      	mov	r1, r7
 800d62e:	4681      	mov	r9, r0
 800d630:	4630      	mov	r0, r6
 800d632:	f7ff fe49 	bl	800d2c8 <_Bfree>
 800d636:	464f      	mov	r7, r9
 800d638:	106d      	asrs	r5, r5, #1
 800d63a:	d00b      	beq.n	800d654 <__pow5mult+0x90>
 800d63c:	6820      	ldr	r0, [r4, #0]
 800d63e:	b938      	cbnz	r0, 800d650 <__pow5mult+0x8c>
 800d640:	4622      	mov	r2, r4
 800d642:	4621      	mov	r1, r4
 800d644:	4630      	mov	r0, r6
 800d646:	f7ff ff26 	bl	800d496 <__multiply>
 800d64a:	6020      	str	r0, [r4, #0]
 800d64c:	f8c0 8000 	str.w	r8, [r0]
 800d650:	4604      	mov	r4, r0
 800d652:	e7e4      	b.n	800d61e <__pow5mult+0x5a>
 800d654:	4638      	mov	r0, r7
 800d656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d65a:	bf00      	nop
 800d65c:	0800e9e0 	.word	0x0800e9e0

0800d660 <__lshift>:
 800d660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d664:	460c      	mov	r4, r1
 800d666:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d66a:	6923      	ldr	r3, [r4, #16]
 800d66c:	6849      	ldr	r1, [r1, #4]
 800d66e:	eb0a 0903 	add.w	r9, sl, r3
 800d672:	68a3      	ldr	r3, [r4, #8]
 800d674:	4607      	mov	r7, r0
 800d676:	4616      	mov	r6, r2
 800d678:	f109 0501 	add.w	r5, r9, #1
 800d67c:	42ab      	cmp	r3, r5
 800d67e:	db32      	blt.n	800d6e6 <__lshift+0x86>
 800d680:	4638      	mov	r0, r7
 800d682:	f7ff fded 	bl	800d260 <_Balloc>
 800d686:	2300      	movs	r3, #0
 800d688:	4680      	mov	r8, r0
 800d68a:	f100 0114 	add.w	r1, r0, #20
 800d68e:	461a      	mov	r2, r3
 800d690:	4553      	cmp	r3, sl
 800d692:	db2b      	blt.n	800d6ec <__lshift+0x8c>
 800d694:	6920      	ldr	r0, [r4, #16]
 800d696:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d69a:	f104 0314 	add.w	r3, r4, #20
 800d69e:	f016 021f 	ands.w	r2, r6, #31
 800d6a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6aa:	d025      	beq.n	800d6f8 <__lshift+0x98>
 800d6ac:	f1c2 0e20 	rsb	lr, r2, #32
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	681e      	ldr	r6, [r3, #0]
 800d6b4:	468a      	mov	sl, r1
 800d6b6:	4096      	lsls	r6, r2
 800d6b8:	4330      	orrs	r0, r6
 800d6ba:	f84a 0b04 	str.w	r0, [sl], #4
 800d6be:	f853 0b04 	ldr.w	r0, [r3], #4
 800d6c2:	459c      	cmp	ip, r3
 800d6c4:	fa20 f00e 	lsr.w	r0, r0, lr
 800d6c8:	d814      	bhi.n	800d6f4 <__lshift+0x94>
 800d6ca:	6048      	str	r0, [r1, #4]
 800d6cc:	b108      	cbz	r0, 800d6d2 <__lshift+0x72>
 800d6ce:	f109 0502 	add.w	r5, r9, #2
 800d6d2:	3d01      	subs	r5, #1
 800d6d4:	4638      	mov	r0, r7
 800d6d6:	f8c8 5010 	str.w	r5, [r8, #16]
 800d6da:	4621      	mov	r1, r4
 800d6dc:	f7ff fdf4 	bl	800d2c8 <_Bfree>
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e6:	3101      	adds	r1, #1
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	e7c7      	b.n	800d67c <__lshift+0x1c>
 800d6ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	e7cd      	b.n	800d690 <__lshift+0x30>
 800d6f4:	4651      	mov	r1, sl
 800d6f6:	e7dc      	b.n	800d6b2 <__lshift+0x52>
 800d6f8:	3904      	subs	r1, #4
 800d6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800d702:	459c      	cmp	ip, r3
 800d704:	d8f9      	bhi.n	800d6fa <__lshift+0x9a>
 800d706:	e7e4      	b.n	800d6d2 <__lshift+0x72>

0800d708 <__mcmp>:
 800d708:	6903      	ldr	r3, [r0, #16]
 800d70a:	690a      	ldr	r2, [r1, #16]
 800d70c:	1a9b      	subs	r3, r3, r2
 800d70e:	b530      	push	{r4, r5, lr}
 800d710:	d10c      	bne.n	800d72c <__mcmp+0x24>
 800d712:	0092      	lsls	r2, r2, #2
 800d714:	3014      	adds	r0, #20
 800d716:	3114      	adds	r1, #20
 800d718:	1884      	adds	r4, r0, r2
 800d71a:	4411      	add	r1, r2
 800d71c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d724:	4295      	cmp	r5, r2
 800d726:	d003      	beq.n	800d730 <__mcmp+0x28>
 800d728:	d305      	bcc.n	800d736 <__mcmp+0x2e>
 800d72a:	2301      	movs	r3, #1
 800d72c:	4618      	mov	r0, r3
 800d72e:	bd30      	pop	{r4, r5, pc}
 800d730:	42a0      	cmp	r0, r4
 800d732:	d3f3      	bcc.n	800d71c <__mcmp+0x14>
 800d734:	e7fa      	b.n	800d72c <__mcmp+0x24>
 800d736:	f04f 33ff 	mov.w	r3, #4294967295
 800d73a:	e7f7      	b.n	800d72c <__mcmp+0x24>

0800d73c <__mdiff>:
 800d73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d740:	460d      	mov	r5, r1
 800d742:	4607      	mov	r7, r0
 800d744:	4611      	mov	r1, r2
 800d746:	4628      	mov	r0, r5
 800d748:	4614      	mov	r4, r2
 800d74a:	f7ff ffdd 	bl	800d708 <__mcmp>
 800d74e:	1e06      	subs	r6, r0, #0
 800d750:	d108      	bne.n	800d764 <__mdiff+0x28>
 800d752:	4631      	mov	r1, r6
 800d754:	4638      	mov	r0, r7
 800d756:	f7ff fd83 	bl	800d260 <_Balloc>
 800d75a:	2301      	movs	r3, #1
 800d75c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d764:	bfa4      	itt	ge
 800d766:	4623      	movge	r3, r4
 800d768:	462c      	movge	r4, r5
 800d76a:	4638      	mov	r0, r7
 800d76c:	6861      	ldr	r1, [r4, #4]
 800d76e:	bfa6      	itte	ge
 800d770:	461d      	movge	r5, r3
 800d772:	2600      	movge	r6, #0
 800d774:	2601      	movlt	r6, #1
 800d776:	f7ff fd73 	bl	800d260 <_Balloc>
 800d77a:	692b      	ldr	r3, [r5, #16]
 800d77c:	60c6      	str	r6, [r0, #12]
 800d77e:	6926      	ldr	r6, [r4, #16]
 800d780:	f105 0914 	add.w	r9, r5, #20
 800d784:	f104 0214 	add.w	r2, r4, #20
 800d788:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d78c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d790:	f100 0514 	add.w	r5, r0, #20
 800d794:	f04f 0e00 	mov.w	lr, #0
 800d798:	f852 ab04 	ldr.w	sl, [r2], #4
 800d79c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d7a0:	fa1e f18a 	uxtah	r1, lr, sl
 800d7a4:	b2a3      	uxth	r3, r4
 800d7a6:	1ac9      	subs	r1, r1, r3
 800d7a8:	0c23      	lsrs	r3, r4, #16
 800d7aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d7ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d7b2:	b289      	uxth	r1, r1
 800d7b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d7b8:	45c8      	cmp	r8, r9
 800d7ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d7be:	4694      	mov	ip, r2
 800d7c0:	f845 3b04 	str.w	r3, [r5], #4
 800d7c4:	d8e8      	bhi.n	800d798 <__mdiff+0x5c>
 800d7c6:	45bc      	cmp	ip, r7
 800d7c8:	d304      	bcc.n	800d7d4 <__mdiff+0x98>
 800d7ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d7ce:	b183      	cbz	r3, 800d7f2 <__mdiff+0xb6>
 800d7d0:	6106      	str	r6, [r0, #16]
 800d7d2:	e7c5      	b.n	800d760 <__mdiff+0x24>
 800d7d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d7d8:	fa1e f381 	uxtah	r3, lr, r1
 800d7dc:	141a      	asrs	r2, r3, #16
 800d7de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d7ec:	f845 3b04 	str.w	r3, [r5], #4
 800d7f0:	e7e9      	b.n	800d7c6 <__mdiff+0x8a>
 800d7f2:	3e01      	subs	r6, #1
 800d7f4:	e7e9      	b.n	800d7ca <__mdiff+0x8e>
	...

0800d7f8 <__ulp>:
 800d7f8:	4b12      	ldr	r3, [pc, #72]	; (800d844 <__ulp+0x4c>)
 800d7fa:	ee10 2a90 	vmov	r2, s1
 800d7fe:	401a      	ands	r2, r3
 800d800:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d804:	2b00      	cmp	r3, #0
 800d806:	dd04      	ble.n	800d812 <__ulp+0x1a>
 800d808:	2000      	movs	r0, #0
 800d80a:	4619      	mov	r1, r3
 800d80c:	ec41 0b10 	vmov	d0, r0, r1
 800d810:	4770      	bx	lr
 800d812:	425b      	negs	r3, r3
 800d814:	151b      	asrs	r3, r3, #20
 800d816:	2b13      	cmp	r3, #19
 800d818:	f04f 0000 	mov.w	r0, #0
 800d81c:	f04f 0100 	mov.w	r1, #0
 800d820:	dc04      	bgt.n	800d82c <__ulp+0x34>
 800d822:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d826:	fa42 f103 	asr.w	r1, r2, r3
 800d82a:	e7ef      	b.n	800d80c <__ulp+0x14>
 800d82c:	3b14      	subs	r3, #20
 800d82e:	2b1e      	cmp	r3, #30
 800d830:	f04f 0201 	mov.w	r2, #1
 800d834:	bfda      	itte	le
 800d836:	f1c3 031f 	rsble	r3, r3, #31
 800d83a:	fa02 f303 	lslle.w	r3, r2, r3
 800d83e:	4613      	movgt	r3, r2
 800d840:	4618      	mov	r0, r3
 800d842:	e7e3      	b.n	800d80c <__ulp+0x14>
 800d844:	7ff00000 	.word	0x7ff00000

0800d848 <__b2d>:
 800d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84a:	6905      	ldr	r5, [r0, #16]
 800d84c:	f100 0714 	add.w	r7, r0, #20
 800d850:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d854:	1f2e      	subs	r6, r5, #4
 800d856:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d85a:	4620      	mov	r0, r4
 800d85c:	f7ff fdc4 	bl	800d3e8 <__hi0bits>
 800d860:	f1c0 0320 	rsb	r3, r0, #32
 800d864:	280a      	cmp	r0, #10
 800d866:	600b      	str	r3, [r1, #0]
 800d868:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d8e0 <__b2d+0x98>
 800d86c:	dc14      	bgt.n	800d898 <__b2d+0x50>
 800d86e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d872:	fa24 f10e 	lsr.w	r1, r4, lr
 800d876:	42b7      	cmp	r7, r6
 800d878:	ea41 030c 	orr.w	r3, r1, ip
 800d87c:	bf34      	ite	cc
 800d87e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d882:	2100      	movcs	r1, #0
 800d884:	3015      	adds	r0, #21
 800d886:	fa04 f000 	lsl.w	r0, r4, r0
 800d88a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d88e:	ea40 0201 	orr.w	r2, r0, r1
 800d892:	ec43 2b10 	vmov	d0, r2, r3
 800d896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d898:	42b7      	cmp	r7, r6
 800d89a:	bf3a      	itte	cc
 800d89c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d8a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d8a4:	2100      	movcs	r1, #0
 800d8a6:	380b      	subs	r0, #11
 800d8a8:	d015      	beq.n	800d8d6 <__b2d+0x8e>
 800d8aa:	4084      	lsls	r4, r0
 800d8ac:	f1c0 0520 	rsb	r5, r0, #32
 800d8b0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d8b4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d8b8:	42be      	cmp	r6, r7
 800d8ba:	fa21 fc05 	lsr.w	ip, r1, r5
 800d8be:	ea44 030c 	orr.w	r3, r4, ip
 800d8c2:	bf8c      	ite	hi
 800d8c4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d8c8:	2400      	movls	r4, #0
 800d8ca:	fa01 f000 	lsl.w	r0, r1, r0
 800d8ce:	40ec      	lsrs	r4, r5
 800d8d0:	ea40 0204 	orr.w	r2, r0, r4
 800d8d4:	e7dd      	b.n	800d892 <__b2d+0x4a>
 800d8d6:	ea44 030c 	orr.w	r3, r4, ip
 800d8da:	460a      	mov	r2, r1
 800d8dc:	e7d9      	b.n	800d892 <__b2d+0x4a>
 800d8de:	bf00      	nop
 800d8e0:	3ff00000 	.word	0x3ff00000

0800d8e4 <__d2b>:
 800d8e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8e8:	460e      	mov	r6, r1
 800d8ea:	2101      	movs	r1, #1
 800d8ec:	ec59 8b10 	vmov	r8, r9, d0
 800d8f0:	4615      	mov	r5, r2
 800d8f2:	f7ff fcb5 	bl	800d260 <_Balloc>
 800d8f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d8fa:	4607      	mov	r7, r0
 800d8fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d900:	bb34      	cbnz	r4, 800d950 <__d2b+0x6c>
 800d902:	9301      	str	r3, [sp, #4]
 800d904:	f1b8 0300 	subs.w	r3, r8, #0
 800d908:	d027      	beq.n	800d95a <__d2b+0x76>
 800d90a:	a802      	add	r0, sp, #8
 800d90c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d910:	f7ff fd89 	bl	800d426 <__lo0bits>
 800d914:	9900      	ldr	r1, [sp, #0]
 800d916:	b1f0      	cbz	r0, 800d956 <__d2b+0x72>
 800d918:	9a01      	ldr	r2, [sp, #4]
 800d91a:	f1c0 0320 	rsb	r3, r0, #32
 800d91e:	fa02 f303 	lsl.w	r3, r2, r3
 800d922:	430b      	orrs	r3, r1
 800d924:	40c2      	lsrs	r2, r0
 800d926:	617b      	str	r3, [r7, #20]
 800d928:	9201      	str	r2, [sp, #4]
 800d92a:	9b01      	ldr	r3, [sp, #4]
 800d92c:	61bb      	str	r3, [r7, #24]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	bf14      	ite	ne
 800d932:	2102      	movne	r1, #2
 800d934:	2101      	moveq	r1, #1
 800d936:	6139      	str	r1, [r7, #16]
 800d938:	b1c4      	cbz	r4, 800d96c <__d2b+0x88>
 800d93a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d93e:	4404      	add	r4, r0
 800d940:	6034      	str	r4, [r6, #0]
 800d942:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d946:	6028      	str	r0, [r5, #0]
 800d948:	4638      	mov	r0, r7
 800d94a:	b003      	add	sp, #12
 800d94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d954:	e7d5      	b.n	800d902 <__d2b+0x1e>
 800d956:	6179      	str	r1, [r7, #20]
 800d958:	e7e7      	b.n	800d92a <__d2b+0x46>
 800d95a:	a801      	add	r0, sp, #4
 800d95c:	f7ff fd63 	bl	800d426 <__lo0bits>
 800d960:	9b01      	ldr	r3, [sp, #4]
 800d962:	617b      	str	r3, [r7, #20]
 800d964:	2101      	movs	r1, #1
 800d966:	6139      	str	r1, [r7, #16]
 800d968:	3020      	adds	r0, #32
 800d96a:	e7e5      	b.n	800d938 <__d2b+0x54>
 800d96c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d970:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d974:	6030      	str	r0, [r6, #0]
 800d976:	6918      	ldr	r0, [r3, #16]
 800d978:	f7ff fd36 	bl	800d3e8 <__hi0bits>
 800d97c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d980:	e7e1      	b.n	800d946 <__d2b+0x62>

0800d982 <__ratio>:
 800d982:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d986:	4688      	mov	r8, r1
 800d988:	4669      	mov	r1, sp
 800d98a:	4681      	mov	r9, r0
 800d98c:	f7ff ff5c 	bl	800d848 <__b2d>
 800d990:	a901      	add	r1, sp, #4
 800d992:	4640      	mov	r0, r8
 800d994:	ec57 6b10 	vmov	r6, r7, d0
 800d998:	f7ff ff56 	bl	800d848 <__b2d>
 800d99c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d9a4:	eba3 0c02 	sub.w	ip, r3, r2
 800d9a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d9ac:	1a9b      	subs	r3, r3, r2
 800d9ae:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d9b2:	ec5b ab10 	vmov	sl, fp, d0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	bfce      	itee	gt
 800d9ba:	463a      	movgt	r2, r7
 800d9bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d9c0:	465a      	movle	r2, fp
 800d9c2:	4659      	mov	r1, fp
 800d9c4:	463d      	mov	r5, r7
 800d9c6:	bfd4      	ite	le
 800d9c8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d9cc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	ee10 2a10 	vmov	r2, s0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	4629      	mov	r1, r5
 800d9da:	f7f2 ff3f 	bl	800085c <__aeabi_ddiv>
 800d9de:	ec41 0b10 	vmov	d0, r0, r1
 800d9e2:	b003      	add	sp, #12
 800d9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9e8 <__copybits>:
 800d9e8:	3901      	subs	r1, #1
 800d9ea:	b510      	push	{r4, lr}
 800d9ec:	1149      	asrs	r1, r1, #5
 800d9ee:	6914      	ldr	r4, [r2, #16]
 800d9f0:	3101      	adds	r1, #1
 800d9f2:	f102 0314 	add.w	r3, r2, #20
 800d9f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d9fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9fe:	42a3      	cmp	r3, r4
 800da00:	4602      	mov	r2, r0
 800da02:	d303      	bcc.n	800da0c <__copybits+0x24>
 800da04:	2300      	movs	r3, #0
 800da06:	428a      	cmp	r2, r1
 800da08:	d305      	bcc.n	800da16 <__copybits+0x2e>
 800da0a:	bd10      	pop	{r4, pc}
 800da0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da10:	f840 2b04 	str.w	r2, [r0], #4
 800da14:	e7f3      	b.n	800d9fe <__copybits+0x16>
 800da16:	f842 3b04 	str.w	r3, [r2], #4
 800da1a:	e7f4      	b.n	800da06 <__copybits+0x1e>

0800da1c <__any_on>:
 800da1c:	f100 0214 	add.w	r2, r0, #20
 800da20:	6900      	ldr	r0, [r0, #16]
 800da22:	114b      	asrs	r3, r1, #5
 800da24:	4298      	cmp	r0, r3
 800da26:	b510      	push	{r4, lr}
 800da28:	db11      	blt.n	800da4e <__any_on+0x32>
 800da2a:	dd0a      	ble.n	800da42 <__any_on+0x26>
 800da2c:	f011 011f 	ands.w	r1, r1, #31
 800da30:	d007      	beq.n	800da42 <__any_on+0x26>
 800da32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da36:	fa24 f001 	lsr.w	r0, r4, r1
 800da3a:	fa00 f101 	lsl.w	r1, r0, r1
 800da3e:	428c      	cmp	r4, r1
 800da40:	d10b      	bne.n	800da5a <__any_on+0x3e>
 800da42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da46:	4293      	cmp	r3, r2
 800da48:	d803      	bhi.n	800da52 <__any_on+0x36>
 800da4a:	2000      	movs	r0, #0
 800da4c:	bd10      	pop	{r4, pc}
 800da4e:	4603      	mov	r3, r0
 800da50:	e7f7      	b.n	800da42 <__any_on+0x26>
 800da52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da56:	2900      	cmp	r1, #0
 800da58:	d0f5      	beq.n	800da46 <__any_on+0x2a>
 800da5a:	2001      	movs	r0, #1
 800da5c:	e7f6      	b.n	800da4c <__any_on+0x30>

0800da5e <_calloc_r>:
 800da5e:	b538      	push	{r3, r4, r5, lr}
 800da60:	fb02 f401 	mul.w	r4, r2, r1
 800da64:	4621      	mov	r1, r4
 800da66:	f000 f857 	bl	800db18 <_malloc_r>
 800da6a:	4605      	mov	r5, r0
 800da6c:	b118      	cbz	r0, 800da76 <_calloc_r+0x18>
 800da6e:	4622      	mov	r2, r4
 800da70:	2100      	movs	r1, #0
 800da72:	f7fc fa2f 	bl	8009ed4 <memset>
 800da76:	4628      	mov	r0, r5
 800da78:	bd38      	pop	{r3, r4, r5, pc}
	...

0800da7c <_free_r>:
 800da7c:	b538      	push	{r3, r4, r5, lr}
 800da7e:	4605      	mov	r5, r0
 800da80:	2900      	cmp	r1, #0
 800da82:	d045      	beq.n	800db10 <_free_r+0x94>
 800da84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da88:	1f0c      	subs	r4, r1, #4
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	bfb8      	it	lt
 800da8e:	18e4      	addlt	r4, r4, r3
 800da90:	f000 fc03 	bl	800e29a <__malloc_lock>
 800da94:	4a1f      	ldr	r2, [pc, #124]	; (800db14 <_free_r+0x98>)
 800da96:	6813      	ldr	r3, [r2, #0]
 800da98:	4610      	mov	r0, r2
 800da9a:	b933      	cbnz	r3, 800daaa <_free_r+0x2e>
 800da9c:	6063      	str	r3, [r4, #4]
 800da9e:	6014      	str	r4, [r2, #0]
 800daa0:	4628      	mov	r0, r5
 800daa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daa6:	f000 bbf9 	b.w	800e29c <__malloc_unlock>
 800daaa:	42a3      	cmp	r3, r4
 800daac:	d90c      	bls.n	800dac8 <_free_r+0x4c>
 800daae:	6821      	ldr	r1, [r4, #0]
 800dab0:	1862      	adds	r2, r4, r1
 800dab2:	4293      	cmp	r3, r2
 800dab4:	bf04      	itt	eq
 800dab6:	681a      	ldreq	r2, [r3, #0]
 800dab8:	685b      	ldreq	r3, [r3, #4]
 800daba:	6063      	str	r3, [r4, #4]
 800dabc:	bf04      	itt	eq
 800dabe:	1852      	addeq	r2, r2, r1
 800dac0:	6022      	streq	r2, [r4, #0]
 800dac2:	6004      	str	r4, [r0, #0]
 800dac4:	e7ec      	b.n	800daa0 <_free_r+0x24>
 800dac6:	4613      	mov	r3, r2
 800dac8:	685a      	ldr	r2, [r3, #4]
 800daca:	b10a      	cbz	r2, 800dad0 <_free_r+0x54>
 800dacc:	42a2      	cmp	r2, r4
 800dace:	d9fa      	bls.n	800dac6 <_free_r+0x4a>
 800dad0:	6819      	ldr	r1, [r3, #0]
 800dad2:	1858      	adds	r0, r3, r1
 800dad4:	42a0      	cmp	r0, r4
 800dad6:	d10b      	bne.n	800daf0 <_free_r+0x74>
 800dad8:	6820      	ldr	r0, [r4, #0]
 800dada:	4401      	add	r1, r0
 800dadc:	1858      	adds	r0, r3, r1
 800dade:	4282      	cmp	r2, r0
 800dae0:	6019      	str	r1, [r3, #0]
 800dae2:	d1dd      	bne.n	800daa0 <_free_r+0x24>
 800dae4:	6810      	ldr	r0, [r2, #0]
 800dae6:	6852      	ldr	r2, [r2, #4]
 800dae8:	605a      	str	r2, [r3, #4]
 800daea:	4401      	add	r1, r0
 800daec:	6019      	str	r1, [r3, #0]
 800daee:	e7d7      	b.n	800daa0 <_free_r+0x24>
 800daf0:	d902      	bls.n	800daf8 <_free_r+0x7c>
 800daf2:	230c      	movs	r3, #12
 800daf4:	602b      	str	r3, [r5, #0]
 800daf6:	e7d3      	b.n	800daa0 <_free_r+0x24>
 800daf8:	6820      	ldr	r0, [r4, #0]
 800dafa:	1821      	adds	r1, r4, r0
 800dafc:	428a      	cmp	r2, r1
 800dafe:	bf04      	itt	eq
 800db00:	6811      	ldreq	r1, [r2, #0]
 800db02:	6852      	ldreq	r2, [r2, #4]
 800db04:	6062      	str	r2, [r4, #4]
 800db06:	bf04      	itt	eq
 800db08:	1809      	addeq	r1, r1, r0
 800db0a:	6021      	streq	r1, [r4, #0]
 800db0c:	605c      	str	r4, [r3, #4]
 800db0e:	e7c7      	b.n	800daa0 <_free_r+0x24>
 800db10:	bd38      	pop	{r3, r4, r5, pc}
 800db12:	bf00      	nop
 800db14:	200049ac 	.word	0x200049ac

0800db18 <_malloc_r>:
 800db18:	b570      	push	{r4, r5, r6, lr}
 800db1a:	1ccd      	adds	r5, r1, #3
 800db1c:	f025 0503 	bic.w	r5, r5, #3
 800db20:	3508      	adds	r5, #8
 800db22:	2d0c      	cmp	r5, #12
 800db24:	bf38      	it	cc
 800db26:	250c      	movcc	r5, #12
 800db28:	2d00      	cmp	r5, #0
 800db2a:	4606      	mov	r6, r0
 800db2c:	db01      	blt.n	800db32 <_malloc_r+0x1a>
 800db2e:	42a9      	cmp	r1, r5
 800db30:	d903      	bls.n	800db3a <_malloc_r+0x22>
 800db32:	230c      	movs	r3, #12
 800db34:	6033      	str	r3, [r6, #0]
 800db36:	2000      	movs	r0, #0
 800db38:	bd70      	pop	{r4, r5, r6, pc}
 800db3a:	f000 fbae 	bl	800e29a <__malloc_lock>
 800db3e:	4a21      	ldr	r2, [pc, #132]	; (800dbc4 <_malloc_r+0xac>)
 800db40:	6814      	ldr	r4, [r2, #0]
 800db42:	4621      	mov	r1, r4
 800db44:	b991      	cbnz	r1, 800db6c <_malloc_r+0x54>
 800db46:	4c20      	ldr	r4, [pc, #128]	; (800dbc8 <_malloc_r+0xb0>)
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	b91b      	cbnz	r3, 800db54 <_malloc_r+0x3c>
 800db4c:	4630      	mov	r0, r6
 800db4e:	f000 facf 	bl	800e0f0 <_sbrk_r>
 800db52:	6020      	str	r0, [r4, #0]
 800db54:	4629      	mov	r1, r5
 800db56:	4630      	mov	r0, r6
 800db58:	f000 faca 	bl	800e0f0 <_sbrk_r>
 800db5c:	1c43      	adds	r3, r0, #1
 800db5e:	d124      	bne.n	800dbaa <_malloc_r+0x92>
 800db60:	230c      	movs	r3, #12
 800db62:	6033      	str	r3, [r6, #0]
 800db64:	4630      	mov	r0, r6
 800db66:	f000 fb99 	bl	800e29c <__malloc_unlock>
 800db6a:	e7e4      	b.n	800db36 <_malloc_r+0x1e>
 800db6c:	680b      	ldr	r3, [r1, #0]
 800db6e:	1b5b      	subs	r3, r3, r5
 800db70:	d418      	bmi.n	800dba4 <_malloc_r+0x8c>
 800db72:	2b0b      	cmp	r3, #11
 800db74:	d90f      	bls.n	800db96 <_malloc_r+0x7e>
 800db76:	600b      	str	r3, [r1, #0]
 800db78:	50cd      	str	r5, [r1, r3]
 800db7a:	18cc      	adds	r4, r1, r3
 800db7c:	4630      	mov	r0, r6
 800db7e:	f000 fb8d 	bl	800e29c <__malloc_unlock>
 800db82:	f104 000b 	add.w	r0, r4, #11
 800db86:	1d23      	adds	r3, r4, #4
 800db88:	f020 0007 	bic.w	r0, r0, #7
 800db8c:	1ac3      	subs	r3, r0, r3
 800db8e:	d0d3      	beq.n	800db38 <_malloc_r+0x20>
 800db90:	425a      	negs	r2, r3
 800db92:	50e2      	str	r2, [r4, r3]
 800db94:	e7d0      	b.n	800db38 <_malloc_r+0x20>
 800db96:	428c      	cmp	r4, r1
 800db98:	684b      	ldr	r3, [r1, #4]
 800db9a:	bf16      	itet	ne
 800db9c:	6063      	strne	r3, [r4, #4]
 800db9e:	6013      	streq	r3, [r2, #0]
 800dba0:	460c      	movne	r4, r1
 800dba2:	e7eb      	b.n	800db7c <_malloc_r+0x64>
 800dba4:	460c      	mov	r4, r1
 800dba6:	6849      	ldr	r1, [r1, #4]
 800dba8:	e7cc      	b.n	800db44 <_malloc_r+0x2c>
 800dbaa:	1cc4      	adds	r4, r0, #3
 800dbac:	f024 0403 	bic.w	r4, r4, #3
 800dbb0:	42a0      	cmp	r0, r4
 800dbb2:	d005      	beq.n	800dbc0 <_malloc_r+0xa8>
 800dbb4:	1a21      	subs	r1, r4, r0
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	f000 fa9a 	bl	800e0f0 <_sbrk_r>
 800dbbc:	3001      	adds	r0, #1
 800dbbe:	d0cf      	beq.n	800db60 <_malloc_r+0x48>
 800dbc0:	6025      	str	r5, [r4, #0]
 800dbc2:	e7db      	b.n	800db7c <_malloc_r+0x64>
 800dbc4:	200049ac 	.word	0x200049ac
 800dbc8:	200049b0 	.word	0x200049b0

0800dbcc <__ssputs_r>:
 800dbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbd0:	688e      	ldr	r6, [r1, #8]
 800dbd2:	429e      	cmp	r6, r3
 800dbd4:	4682      	mov	sl, r0
 800dbd6:	460c      	mov	r4, r1
 800dbd8:	4690      	mov	r8, r2
 800dbda:	4699      	mov	r9, r3
 800dbdc:	d837      	bhi.n	800dc4e <__ssputs_r+0x82>
 800dbde:	898a      	ldrh	r2, [r1, #12]
 800dbe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbe4:	d031      	beq.n	800dc4a <__ssputs_r+0x7e>
 800dbe6:	6825      	ldr	r5, [r4, #0]
 800dbe8:	6909      	ldr	r1, [r1, #16]
 800dbea:	1a6f      	subs	r7, r5, r1
 800dbec:	6965      	ldr	r5, [r4, #20]
 800dbee:	2302      	movs	r3, #2
 800dbf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbf4:	fb95 f5f3 	sdiv	r5, r5, r3
 800dbf8:	f109 0301 	add.w	r3, r9, #1
 800dbfc:	443b      	add	r3, r7
 800dbfe:	429d      	cmp	r5, r3
 800dc00:	bf38      	it	cc
 800dc02:	461d      	movcc	r5, r3
 800dc04:	0553      	lsls	r3, r2, #21
 800dc06:	d530      	bpl.n	800dc6a <__ssputs_r+0x9e>
 800dc08:	4629      	mov	r1, r5
 800dc0a:	f7ff ff85 	bl	800db18 <_malloc_r>
 800dc0e:	4606      	mov	r6, r0
 800dc10:	b950      	cbnz	r0, 800dc28 <__ssputs_r+0x5c>
 800dc12:	230c      	movs	r3, #12
 800dc14:	f8ca 3000 	str.w	r3, [sl]
 800dc18:	89a3      	ldrh	r3, [r4, #12]
 800dc1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc1e:	81a3      	strh	r3, [r4, #12]
 800dc20:	f04f 30ff 	mov.w	r0, #4294967295
 800dc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc28:	463a      	mov	r2, r7
 800dc2a:	6921      	ldr	r1, [r4, #16]
 800dc2c:	f7fc f947 	bl	8009ebe <memcpy>
 800dc30:	89a3      	ldrh	r3, [r4, #12]
 800dc32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc3a:	81a3      	strh	r3, [r4, #12]
 800dc3c:	6126      	str	r6, [r4, #16]
 800dc3e:	6165      	str	r5, [r4, #20]
 800dc40:	443e      	add	r6, r7
 800dc42:	1bed      	subs	r5, r5, r7
 800dc44:	6026      	str	r6, [r4, #0]
 800dc46:	60a5      	str	r5, [r4, #8]
 800dc48:	464e      	mov	r6, r9
 800dc4a:	454e      	cmp	r6, r9
 800dc4c:	d900      	bls.n	800dc50 <__ssputs_r+0x84>
 800dc4e:	464e      	mov	r6, r9
 800dc50:	4632      	mov	r2, r6
 800dc52:	4641      	mov	r1, r8
 800dc54:	6820      	ldr	r0, [r4, #0]
 800dc56:	f000 fb07 	bl	800e268 <memmove>
 800dc5a:	68a3      	ldr	r3, [r4, #8]
 800dc5c:	1b9b      	subs	r3, r3, r6
 800dc5e:	60a3      	str	r3, [r4, #8]
 800dc60:	6823      	ldr	r3, [r4, #0]
 800dc62:	441e      	add	r6, r3
 800dc64:	6026      	str	r6, [r4, #0]
 800dc66:	2000      	movs	r0, #0
 800dc68:	e7dc      	b.n	800dc24 <__ssputs_r+0x58>
 800dc6a:	462a      	mov	r2, r5
 800dc6c:	f000 fb17 	bl	800e29e <_realloc_r>
 800dc70:	4606      	mov	r6, r0
 800dc72:	2800      	cmp	r0, #0
 800dc74:	d1e2      	bne.n	800dc3c <__ssputs_r+0x70>
 800dc76:	6921      	ldr	r1, [r4, #16]
 800dc78:	4650      	mov	r0, sl
 800dc7a:	f7ff feff 	bl	800da7c <_free_r>
 800dc7e:	e7c8      	b.n	800dc12 <__ssputs_r+0x46>

0800dc80 <_svfiprintf_r>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	461d      	mov	r5, r3
 800dc86:	898b      	ldrh	r3, [r1, #12]
 800dc88:	061f      	lsls	r7, r3, #24
 800dc8a:	b09d      	sub	sp, #116	; 0x74
 800dc8c:	4680      	mov	r8, r0
 800dc8e:	460c      	mov	r4, r1
 800dc90:	4616      	mov	r6, r2
 800dc92:	d50f      	bpl.n	800dcb4 <_svfiprintf_r+0x34>
 800dc94:	690b      	ldr	r3, [r1, #16]
 800dc96:	b96b      	cbnz	r3, 800dcb4 <_svfiprintf_r+0x34>
 800dc98:	2140      	movs	r1, #64	; 0x40
 800dc9a:	f7ff ff3d 	bl	800db18 <_malloc_r>
 800dc9e:	6020      	str	r0, [r4, #0]
 800dca0:	6120      	str	r0, [r4, #16]
 800dca2:	b928      	cbnz	r0, 800dcb0 <_svfiprintf_r+0x30>
 800dca4:	230c      	movs	r3, #12
 800dca6:	f8c8 3000 	str.w	r3, [r8]
 800dcaa:	f04f 30ff 	mov.w	r0, #4294967295
 800dcae:	e0c8      	b.n	800de42 <_svfiprintf_r+0x1c2>
 800dcb0:	2340      	movs	r3, #64	; 0x40
 800dcb2:	6163      	str	r3, [r4, #20]
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	9309      	str	r3, [sp, #36]	; 0x24
 800dcb8:	2320      	movs	r3, #32
 800dcba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcbe:	2330      	movs	r3, #48	; 0x30
 800dcc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcc4:	9503      	str	r5, [sp, #12]
 800dcc6:	f04f 0b01 	mov.w	fp, #1
 800dcca:	4637      	mov	r7, r6
 800dccc:	463d      	mov	r5, r7
 800dcce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dcd2:	b10b      	cbz	r3, 800dcd8 <_svfiprintf_r+0x58>
 800dcd4:	2b25      	cmp	r3, #37	; 0x25
 800dcd6:	d13e      	bne.n	800dd56 <_svfiprintf_r+0xd6>
 800dcd8:	ebb7 0a06 	subs.w	sl, r7, r6
 800dcdc:	d00b      	beq.n	800dcf6 <_svfiprintf_r+0x76>
 800dcde:	4653      	mov	r3, sl
 800dce0:	4632      	mov	r2, r6
 800dce2:	4621      	mov	r1, r4
 800dce4:	4640      	mov	r0, r8
 800dce6:	f7ff ff71 	bl	800dbcc <__ssputs_r>
 800dcea:	3001      	adds	r0, #1
 800dcec:	f000 80a4 	beq.w	800de38 <_svfiprintf_r+0x1b8>
 800dcf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf2:	4453      	add	r3, sl
 800dcf4:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf6:	783b      	ldrb	r3, [r7, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 809d 	beq.w	800de38 <_svfiprintf_r+0x1b8>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	f04f 32ff 	mov.w	r2, #4294967295
 800dd04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd08:	9304      	str	r3, [sp, #16]
 800dd0a:	9307      	str	r3, [sp, #28]
 800dd0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd10:	931a      	str	r3, [sp, #104]	; 0x68
 800dd12:	462f      	mov	r7, r5
 800dd14:	2205      	movs	r2, #5
 800dd16:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dd1a:	4850      	ldr	r0, [pc, #320]	; (800de5c <_svfiprintf_r+0x1dc>)
 800dd1c:	f7f2 fa68 	bl	80001f0 <memchr>
 800dd20:	9b04      	ldr	r3, [sp, #16]
 800dd22:	b9d0      	cbnz	r0, 800dd5a <_svfiprintf_r+0xda>
 800dd24:	06d9      	lsls	r1, r3, #27
 800dd26:	bf44      	itt	mi
 800dd28:	2220      	movmi	r2, #32
 800dd2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd2e:	071a      	lsls	r2, r3, #28
 800dd30:	bf44      	itt	mi
 800dd32:	222b      	movmi	r2, #43	; 0x2b
 800dd34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd38:	782a      	ldrb	r2, [r5, #0]
 800dd3a:	2a2a      	cmp	r2, #42	; 0x2a
 800dd3c:	d015      	beq.n	800dd6a <_svfiprintf_r+0xea>
 800dd3e:	9a07      	ldr	r2, [sp, #28]
 800dd40:	462f      	mov	r7, r5
 800dd42:	2000      	movs	r0, #0
 800dd44:	250a      	movs	r5, #10
 800dd46:	4639      	mov	r1, r7
 800dd48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd4c:	3b30      	subs	r3, #48	; 0x30
 800dd4e:	2b09      	cmp	r3, #9
 800dd50:	d94d      	bls.n	800ddee <_svfiprintf_r+0x16e>
 800dd52:	b1b8      	cbz	r0, 800dd84 <_svfiprintf_r+0x104>
 800dd54:	e00f      	b.n	800dd76 <_svfiprintf_r+0xf6>
 800dd56:	462f      	mov	r7, r5
 800dd58:	e7b8      	b.n	800dccc <_svfiprintf_r+0x4c>
 800dd5a:	4a40      	ldr	r2, [pc, #256]	; (800de5c <_svfiprintf_r+0x1dc>)
 800dd5c:	1a80      	subs	r0, r0, r2
 800dd5e:	fa0b f000 	lsl.w	r0, fp, r0
 800dd62:	4318      	orrs	r0, r3
 800dd64:	9004      	str	r0, [sp, #16]
 800dd66:	463d      	mov	r5, r7
 800dd68:	e7d3      	b.n	800dd12 <_svfiprintf_r+0x92>
 800dd6a:	9a03      	ldr	r2, [sp, #12]
 800dd6c:	1d11      	adds	r1, r2, #4
 800dd6e:	6812      	ldr	r2, [r2, #0]
 800dd70:	9103      	str	r1, [sp, #12]
 800dd72:	2a00      	cmp	r2, #0
 800dd74:	db01      	blt.n	800dd7a <_svfiprintf_r+0xfa>
 800dd76:	9207      	str	r2, [sp, #28]
 800dd78:	e004      	b.n	800dd84 <_svfiprintf_r+0x104>
 800dd7a:	4252      	negs	r2, r2
 800dd7c:	f043 0302 	orr.w	r3, r3, #2
 800dd80:	9207      	str	r2, [sp, #28]
 800dd82:	9304      	str	r3, [sp, #16]
 800dd84:	783b      	ldrb	r3, [r7, #0]
 800dd86:	2b2e      	cmp	r3, #46	; 0x2e
 800dd88:	d10c      	bne.n	800dda4 <_svfiprintf_r+0x124>
 800dd8a:	787b      	ldrb	r3, [r7, #1]
 800dd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd8e:	d133      	bne.n	800ddf8 <_svfiprintf_r+0x178>
 800dd90:	9b03      	ldr	r3, [sp, #12]
 800dd92:	1d1a      	adds	r2, r3, #4
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	9203      	str	r2, [sp, #12]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	bfb8      	it	lt
 800dd9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dda0:	3702      	adds	r7, #2
 800dda2:	9305      	str	r3, [sp, #20]
 800dda4:	4d2e      	ldr	r5, [pc, #184]	; (800de60 <_svfiprintf_r+0x1e0>)
 800dda6:	7839      	ldrb	r1, [r7, #0]
 800dda8:	2203      	movs	r2, #3
 800ddaa:	4628      	mov	r0, r5
 800ddac:	f7f2 fa20 	bl	80001f0 <memchr>
 800ddb0:	b138      	cbz	r0, 800ddc2 <_svfiprintf_r+0x142>
 800ddb2:	2340      	movs	r3, #64	; 0x40
 800ddb4:	1b40      	subs	r0, r0, r5
 800ddb6:	fa03 f000 	lsl.w	r0, r3, r0
 800ddba:	9b04      	ldr	r3, [sp, #16]
 800ddbc:	4303      	orrs	r3, r0
 800ddbe:	3701      	adds	r7, #1
 800ddc0:	9304      	str	r3, [sp, #16]
 800ddc2:	7839      	ldrb	r1, [r7, #0]
 800ddc4:	4827      	ldr	r0, [pc, #156]	; (800de64 <_svfiprintf_r+0x1e4>)
 800ddc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddca:	2206      	movs	r2, #6
 800ddcc:	1c7e      	adds	r6, r7, #1
 800ddce:	f7f2 fa0f 	bl	80001f0 <memchr>
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	d038      	beq.n	800de48 <_svfiprintf_r+0x1c8>
 800ddd6:	4b24      	ldr	r3, [pc, #144]	; (800de68 <_svfiprintf_r+0x1e8>)
 800ddd8:	bb13      	cbnz	r3, 800de20 <_svfiprintf_r+0x1a0>
 800ddda:	9b03      	ldr	r3, [sp, #12]
 800dddc:	3307      	adds	r3, #7
 800ddde:	f023 0307 	bic.w	r3, r3, #7
 800dde2:	3308      	adds	r3, #8
 800dde4:	9303      	str	r3, [sp, #12]
 800dde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde8:	444b      	add	r3, r9
 800ddea:	9309      	str	r3, [sp, #36]	; 0x24
 800ddec:	e76d      	b.n	800dcca <_svfiprintf_r+0x4a>
 800ddee:	fb05 3202 	mla	r2, r5, r2, r3
 800ddf2:	2001      	movs	r0, #1
 800ddf4:	460f      	mov	r7, r1
 800ddf6:	e7a6      	b.n	800dd46 <_svfiprintf_r+0xc6>
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	3701      	adds	r7, #1
 800ddfc:	9305      	str	r3, [sp, #20]
 800ddfe:	4619      	mov	r1, r3
 800de00:	250a      	movs	r5, #10
 800de02:	4638      	mov	r0, r7
 800de04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de08:	3a30      	subs	r2, #48	; 0x30
 800de0a:	2a09      	cmp	r2, #9
 800de0c:	d903      	bls.n	800de16 <_svfiprintf_r+0x196>
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d0c8      	beq.n	800dda4 <_svfiprintf_r+0x124>
 800de12:	9105      	str	r1, [sp, #20]
 800de14:	e7c6      	b.n	800dda4 <_svfiprintf_r+0x124>
 800de16:	fb05 2101 	mla	r1, r5, r1, r2
 800de1a:	2301      	movs	r3, #1
 800de1c:	4607      	mov	r7, r0
 800de1e:	e7f0      	b.n	800de02 <_svfiprintf_r+0x182>
 800de20:	ab03      	add	r3, sp, #12
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	4622      	mov	r2, r4
 800de26:	4b11      	ldr	r3, [pc, #68]	; (800de6c <_svfiprintf_r+0x1ec>)
 800de28:	a904      	add	r1, sp, #16
 800de2a:	4640      	mov	r0, r8
 800de2c:	f7fc f8ee 	bl	800a00c <_printf_float>
 800de30:	f1b0 3fff 	cmp.w	r0, #4294967295
 800de34:	4681      	mov	r9, r0
 800de36:	d1d6      	bne.n	800dde6 <_svfiprintf_r+0x166>
 800de38:	89a3      	ldrh	r3, [r4, #12]
 800de3a:	065b      	lsls	r3, r3, #25
 800de3c:	f53f af35 	bmi.w	800dcaa <_svfiprintf_r+0x2a>
 800de40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de42:	b01d      	add	sp, #116	; 0x74
 800de44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de48:	ab03      	add	r3, sp, #12
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	4622      	mov	r2, r4
 800de4e:	4b07      	ldr	r3, [pc, #28]	; (800de6c <_svfiprintf_r+0x1ec>)
 800de50:	a904      	add	r1, sp, #16
 800de52:	4640      	mov	r0, r8
 800de54:	f7fc fb90 	bl	800a578 <_printf_i>
 800de58:	e7ea      	b.n	800de30 <_svfiprintf_r+0x1b0>
 800de5a:	bf00      	nop
 800de5c:	0800e9ec 	.word	0x0800e9ec
 800de60:	0800e9f2 	.word	0x0800e9f2
 800de64:	0800e9f6 	.word	0x0800e9f6
 800de68:	0800a00d 	.word	0x0800a00d
 800de6c:	0800dbcd 	.word	0x0800dbcd

0800de70 <__sfputc_r>:
 800de70:	6893      	ldr	r3, [r2, #8]
 800de72:	3b01      	subs	r3, #1
 800de74:	2b00      	cmp	r3, #0
 800de76:	b410      	push	{r4}
 800de78:	6093      	str	r3, [r2, #8]
 800de7a:	da08      	bge.n	800de8e <__sfputc_r+0x1e>
 800de7c:	6994      	ldr	r4, [r2, #24]
 800de7e:	42a3      	cmp	r3, r4
 800de80:	db01      	blt.n	800de86 <__sfputc_r+0x16>
 800de82:	290a      	cmp	r1, #10
 800de84:	d103      	bne.n	800de8e <__sfputc_r+0x1e>
 800de86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de8a:	f7fd bdbb 	b.w	800ba04 <__swbuf_r>
 800de8e:	6813      	ldr	r3, [r2, #0]
 800de90:	1c58      	adds	r0, r3, #1
 800de92:	6010      	str	r0, [r2, #0]
 800de94:	7019      	strb	r1, [r3, #0]
 800de96:	4608      	mov	r0, r1
 800de98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de9c:	4770      	bx	lr

0800de9e <__sfputs_r>:
 800de9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea0:	4606      	mov	r6, r0
 800dea2:	460f      	mov	r7, r1
 800dea4:	4614      	mov	r4, r2
 800dea6:	18d5      	adds	r5, r2, r3
 800dea8:	42ac      	cmp	r4, r5
 800deaa:	d101      	bne.n	800deb0 <__sfputs_r+0x12>
 800deac:	2000      	movs	r0, #0
 800deae:	e007      	b.n	800dec0 <__sfputs_r+0x22>
 800deb0:	463a      	mov	r2, r7
 800deb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb6:	4630      	mov	r0, r6
 800deb8:	f7ff ffda 	bl	800de70 <__sfputc_r>
 800debc:	1c43      	adds	r3, r0, #1
 800debe:	d1f3      	bne.n	800dea8 <__sfputs_r+0xa>
 800dec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dec4 <_vfiprintf_r>:
 800dec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec8:	460c      	mov	r4, r1
 800deca:	b09d      	sub	sp, #116	; 0x74
 800decc:	4617      	mov	r7, r2
 800dece:	461d      	mov	r5, r3
 800ded0:	4606      	mov	r6, r0
 800ded2:	b118      	cbz	r0, 800dedc <_vfiprintf_r+0x18>
 800ded4:	6983      	ldr	r3, [r0, #24]
 800ded6:	b90b      	cbnz	r3, 800dedc <_vfiprintf_r+0x18>
 800ded8:	f7fe fd96 	bl	800ca08 <__sinit>
 800dedc:	4b7c      	ldr	r3, [pc, #496]	; (800e0d0 <_vfiprintf_r+0x20c>)
 800dede:	429c      	cmp	r4, r3
 800dee0:	d158      	bne.n	800df94 <_vfiprintf_r+0xd0>
 800dee2:	6874      	ldr	r4, [r6, #4]
 800dee4:	89a3      	ldrh	r3, [r4, #12]
 800dee6:	0718      	lsls	r0, r3, #28
 800dee8:	d55e      	bpl.n	800dfa8 <_vfiprintf_r+0xe4>
 800deea:	6923      	ldr	r3, [r4, #16]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d05b      	beq.n	800dfa8 <_vfiprintf_r+0xe4>
 800def0:	2300      	movs	r3, #0
 800def2:	9309      	str	r3, [sp, #36]	; 0x24
 800def4:	2320      	movs	r3, #32
 800def6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800defa:	2330      	movs	r3, #48	; 0x30
 800defc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df00:	9503      	str	r5, [sp, #12]
 800df02:	f04f 0b01 	mov.w	fp, #1
 800df06:	46b8      	mov	r8, r7
 800df08:	4645      	mov	r5, r8
 800df0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800df0e:	b10b      	cbz	r3, 800df14 <_vfiprintf_r+0x50>
 800df10:	2b25      	cmp	r3, #37	; 0x25
 800df12:	d154      	bne.n	800dfbe <_vfiprintf_r+0xfa>
 800df14:	ebb8 0a07 	subs.w	sl, r8, r7
 800df18:	d00b      	beq.n	800df32 <_vfiprintf_r+0x6e>
 800df1a:	4653      	mov	r3, sl
 800df1c:	463a      	mov	r2, r7
 800df1e:	4621      	mov	r1, r4
 800df20:	4630      	mov	r0, r6
 800df22:	f7ff ffbc 	bl	800de9e <__sfputs_r>
 800df26:	3001      	adds	r0, #1
 800df28:	f000 80c2 	beq.w	800e0b0 <_vfiprintf_r+0x1ec>
 800df2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df2e:	4453      	add	r3, sl
 800df30:	9309      	str	r3, [sp, #36]	; 0x24
 800df32:	f898 3000 	ldrb.w	r3, [r8]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f000 80ba 	beq.w	800e0b0 <_vfiprintf_r+0x1ec>
 800df3c:	2300      	movs	r3, #0
 800df3e:	f04f 32ff 	mov.w	r2, #4294967295
 800df42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df46:	9304      	str	r3, [sp, #16]
 800df48:	9307      	str	r3, [sp, #28]
 800df4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df4e:	931a      	str	r3, [sp, #104]	; 0x68
 800df50:	46a8      	mov	r8, r5
 800df52:	2205      	movs	r2, #5
 800df54:	f818 1b01 	ldrb.w	r1, [r8], #1
 800df58:	485e      	ldr	r0, [pc, #376]	; (800e0d4 <_vfiprintf_r+0x210>)
 800df5a:	f7f2 f949 	bl	80001f0 <memchr>
 800df5e:	9b04      	ldr	r3, [sp, #16]
 800df60:	bb78      	cbnz	r0, 800dfc2 <_vfiprintf_r+0xfe>
 800df62:	06d9      	lsls	r1, r3, #27
 800df64:	bf44      	itt	mi
 800df66:	2220      	movmi	r2, #32
 800df68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df6c:	071a      	lsls	r2, r3, #28
 800df6e:	bf44      	itt	mi
 800df70:	222b      	movmi	r2, #43	; 0x2b
 800df72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df76:	782a      	ldrb	r2, [r5, #0]
 800df78:	2a2a      	cmp	r2, #42	; 0x2a
 800df7a:	d02a      	beq.n	800dfd2 <_vfiprintf_r+0x10e>
 800df7c:	9a07      	ldr	r2, [sp, #28]
 800df7e:	46a8      	mov	r8, r5
 800df80:	2000      	movs	r0, #0
 800df82:	250a      	movs	r5, #10
 800df84:	4641      	mov	r1, r8
 800df86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df8a:	3b30      	subs	r3, #48	; 0x30
 800df8c:	2b09      	cmp	r3, #9
 800df8e:	d969      	bls.n	800e064 <_vfiprintf_r+0x1a0>
 800df90:	b360      	cbz	r0, 800dfec <_vfiprintf_r+0x128>
 800df92:	e024      	b.n	800dfde <_vfiprintf_r+0x11a>
 800df94:	4b50      	ldr	r3, [pc, #320]	; (800e0d8 <_vfiprintf_r+0x214>)
 800df96:	429c      	cmp	r4, r3
 800df98:	d101      	bne.n	800df9e <_vfiprintf_r+0xda>
 800df9a:	68b4      	ldr	r4, [r6, #8]
 800df9c:	e7a2      	b.n	800dee4 <_vfiprintf_r+0x20>
 800df9e:	4b4f      	ldr	r3, [pc, #316]	; (800e0dc <_vfiprintf_r+0x218>)
 800dfa0:	429c      	cmp	r4, r3
 800dfa2:	bf08      	it	eq
 800dfa4:	68f4      	ldreq	r4, [r6, #12]
 800dfa6:	e79d      	b.n	800dee4 <_vfiprintf_r+0x20>
 800dfa8:	4621      	mov	r1, r4
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f7fd fd8a 	bl	800bac4 <__swsetup_r>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d09d      	beq.n	800def0 <_vfiprintf_r+0x2c>
 800dfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb8:	b01d      	add	sp, #116	; 0x74
 800dfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbe:	46a8      	mov	r8, r5
 800dfc0:	e7a2      	b.n	800df08 <_vfiprintf_r+0x44>
 800dfc2:	4a44      	ldr	r2, [pc, #272]	; (800e0d4 <_vfiprintf_r+0x210>)
 800dfc4:	1a80      	subs	r0, r0, r2
 800dfc6:	fa0b f000 	lsl.w	r0, fp, r0
 800dfca:	4318      	orrs	r0, r3
 800dfcc:	9004      	str	r0, [sp, #16]
 800dfce:	4645      	mov	r5, r8
 800dfd0:	e7be      	b.n	800df50 <_vfiprintf_r+0x8c>
 800dfd2:	9a03      	ldr	r2, [sp, #12]
 800dfd4:	1d11      	adds	r1, r2, #4
 800dfd6:	6812      	ldr	r2, [r2, #0]
 800dfd8:	9103      	str	r1, [sp, #12]
 800dfda:	2a00      	cmp	r2, #0
 800dfdc:	db01      	blt.n	800dfe2 <_vfiprintf_r+0x11e>
 800dfde:	9207      	str	r2, [sp, #28]
 800dfe0:	e004      	b.n	800dfec <_vfiprintf_r+0x128>
 800dfe2:	4252      	negs	r2, r2
 800dfe4:	f043 0302 	orr.w	r3, r3, #2
 800dfe8:	9207      	str	r2, [sp, #28]
 800dfea:	9304      	str	r3, [sp, #16]
 800dfec:	f898 3000 	ldrb.w	r3, [r8]
 800dff0:	2b2e      	cmp	r3, #46	; 0x2e
 800dff2:	d10e      	bne.n	800e012 <_vfiprintf_r+0x14e>
 800dff4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dff8:	2b2a      	cmp	r3, #42	; 0x2a
 800dffa:	d138      	bne.n	800e06e <_vfiprintf_r+0x1aa>
 800dffc:	9b03      	ldr	r3, [sp, #12]
 800dffe:	1d1a      	adds	r2, r3, #4
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	9203      	str	r2, [sp, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	bfb8      	it	lt
 800e008:	f04f 33ff 	movlt.w	r3, #4294967295
 800e00c:	f108 0802 	add.w	r8, r8, #2
 800e010:	9305      	str	r3, [sp, #20]
 800e012:	4d33      	ldr	r5, [pc, #204]	; (800e0e0 <_vfiprintf_r+0x21c>)
 800e014:	f898 1000 	ldrb.w	r1, [r8]
 800e018:	2203      	movs	r2, #3
 800e01a:	4628      	mov	r0, r5
 800e01c:	f7f2 f8e8 	bl	80001f0 <memchr>
 800e020:	b140      	cbz	r0, 800e034 <_vfiprintf_r+0x170>
 800e022:	2340      	movs	r3, #64	; 0x40
 800e024:	1b40      	subs	r0, r0, r5
 800e026:	fa03 f000 	lsl.w	r0, r3, r0
 800e02a:	9b04      	ldr	r3, [sp, #16]
 800e02c:	4303      	orrs	r3, r0
 800e02e:	f108 0801 	add.w	r8, r8, #1
 800e032:	9304      	str	r3, [sp, #16]
 800e034:	f898 1000 	ldrb.w	r1, [r8]
 800e038:	482a      	ldr	r0, [pc, #168]	; (800e0e4 <_vfiprintf_r+0x220>)
 800e03a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e03e:	2206      	movs	r2, #6
 800e040:	f108 0701 	add.w	r7, r8, #1
 800e044:	f7f2 f8d4 	bl	80001f0 <memchr>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d037      	beq.n	800e0bc <_vfiprintf_r+0x1f8>
 800e04c:	4b26      	ldr	r3, [pc, #152]	; (800e0e8 <_vfiprintf_r+0x224>)
 800e04e:	bb1b      	cbnz	r3, 800e098 <_vfiprintf_r+0x1d4>
 800e050:	9b03      	ldr	r3, [sp, #12]
 800e052:	3307      	adds	r3, #7
 800e054:	f023 0307 	bic.w	r3, r3, #7
 800e058:	3308      	adds	r3, #8
 800e05a:	9303      	str	r3, [sp, #12]
 800e05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e05e:	444b      	add	r3, r9
 800e060:	9309      	str	r3, [sp, #36]	; 0x24
 800e062:	e750      	b.n	800df06 <_vfiprintf_r+0x42>
 800e064:	fb05 3202 	mla	r2, r5, r2, r3
 800e068:	2001      	movs	r0, #1
 800e06a:	4688      	mov	r8, r1
 800e06c:	e78a      	b.n	800df84 <_vfiprintf_r+0xc0>
 800e06e:	2300      	movs	r3, #0
 800e070:	f108 0801 	add.w	r8, r8, #1
 800e074:	9305      	str	r3, [sp, #20]
 800e076:	4619      	mov	r1, r3
 800e078:	250a      	movs	r5, #10
 800e07a:	4640      	mov	r0, r8
 800e07c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e080:	3a30      	subs	r2, #48	; 0x30
 800e082:	2a09      	cmp	r2, #9
 800e084:	d903      	bls.n	800e08e <_vfiprintf_r+0x1ca>
 800e086:	2b00      	cmp	r3, #0
 800e088:	d0c3      	beq.n	800e012 <_vfiprintf_r+0x14e>
 800e08a:	9105      	str	r1, [sp, #20]
 800e08c:	e7c1      	b.n	800e012 <_vfiprintf_r+0x14e>
 800e08e:	fb05 2101 	mla	r1, r5, r1, r2
 800e092:	2301      	movs	r3, #1
 800e094:	4680      	mov	r8, r0
 800e096:	e7f0      	b.n	800e07a <_vfiprintf_r+0x1b6>
 800e098:	ab03      	add	r3, sp, #12
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	4622      	mov	r2, r4
 800e09e:	4b13      	ldr	r3, [pc, #76]	; (800e0ec <_vfiprintf_r+0x228>)
 800e0a0:	a904      	add	r1, sp, #16
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	f7fb ffb2 	bl	800a00c <_printf_float>
 800e0a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e0ac:	4681      	mov	r9, r0
 800e0ae:	d1d5      	bne.n	800e05c <_vfiprintf_r+0x198>
 800e0b0:	89a3      	ldrh	r3, [r4, #12]
 800e0b2:	065b      	lsls	r3, r3, #25
 800e0b4:	f53f af7e 	bmi.w	800dfb4 <_vfiprintf_r+0xf0>
 800e0b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0ba:	e77d      	b.n	800dfb8 <_vfiprintf_r+0xf4>
 800e0bc:	ab03      	add	r3, sp, #12
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	4622      	mov	r2, r4
 800e0c2:	4b0a      	ldr	r3, [pc, #40]	; (800e0ec <_vfiprintf_r+0x228>)
 800e0c4:	a904      	add	r1, sp, #16
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	f7fc fa56 	bl	800a578 <_printf_i>
 800e0cc:	e7ec      	b.n	800e0a8 <_vfiprintf_r+0x1e4>
 800e0ce:	bf00      	nop
 800e0d0:	0800e8b0 	.word	0x0800e8b0
 800e0d4:	0800e9ec 	.word	0x0800e9ec
 800e0d8:	0800e8d0 	.word	0x0800e8d0
 800e0dc:	0800e890 	.word	0x0800e890
 800e0e0:	0800e9f2 	.word	0x0800e9f2
 800e0e4:	0800e9f6 	.word	0x0800e9f6
 800e0e8:	0800a00d 	.word	0x0800a00d
 800e0ec:	0800de9f 	.word	0x0800de9f

0800e0f0 <_sbrk_r>:
 800e0f0:	b538      	push	{r3, r4, r5, lr}
 800e0f2:	4c06      	ldr	r4, [pc, #24]	; (800e10c <_sbrk_r+0x1c>)
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	4608      	mov	r0, r1
 800e0fa:	6023      	str	r3, [r4, #0]
 800e0fc:	f7f9 fccc 	bl	8007a98 <_sbrk>
 800e100:	1c43      	adds	r3, r0, #1
 800e102:	d102      	bne.n	800e10a <_sbrk_r+0x1a>
 800e104:	6823      	ldr	r3, [r4, #0]
 800e106:	b103      	cbz	r3, 800e10a <_sbrk_r+0x1a>
 800e108:	602b      	str	r3, [r5, #0]
 800e10a:	bd38      	pop	{r3, r4, r5, pc}
 800e10c:	200065b4 	.word	0x200065b4

0800e110 <__sread>:
 800e110:	b510      	push	{r4, lr}
 800e112:	460c      	mov	r4, r1
 800e114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e118:	f000 f8e8 	bl	800e2ec <_read_r>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	bfab      	itete	ge
 800e120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e122:	89a3      	ldrhlt	r3, [r4, #12]
 800e124:	181b      	addge	r3, r3, r0
 800e126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e12a:	bfac      	ite	ge
 800e12c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e12e:	81a3      	strhlt	r3, [r4, #12]
 800e130:	bd10      	pop	{r4, pc}

0800e132 <__swrite>:
 800e132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e136:	461f      	mov	r7, r3
 800e138:	898b      	ldrh	r3, [r1, #12]
 800e13a:	05db      	lsls	r3, r3, #23
 800e13c:	4605      	mov	r5, r0
 800e13e:	460c      	mov	r4, r1
 800e140:	4616      	mov	r6, r2
 800e142:	d505      	bpl.n	800e150 <__swrite+0x1e>
 800e144:	2302      	movs	r3, #2
 800e146:	2200      	movs	r2, #0
 800e148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e14c:	f000 f87a 	bl	800e244 <_lseek_r>
 800e150:	89a3      	ldrh	r3, [r4, #12]
 800e152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e15a:	81a3      	strh	r3, [r4, #12]
 800e15c:	4632      	mov	r2, r6
 800e15e:	463b      	mov	r3, r7
 800e160:	4628      	mov	r0, r5
 800e162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e166:	f000 b829 	b.w	800e1bc <_write_r>

0800e16a <__sseek>:
 800e16a:	b510      	push	{r4, lr}
 800e16c:	460c      	mov	r4, r1
 800e16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e172:	f000 f867 	bl	800e244 <_lseek_r>
 800e176:	1c43      	adds	r3, r0, #1
 800e178:	89a3      	ldrh	r3, [r4, #12]
 800e17a:	bf15      	itete	ne
 800e17c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e17e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e186:	81a3      	strheq	r3, [r4, #12]
 800e188:	bf18      	it	ne
 800e18a:	81a3      	strhne	r3, [r4, #12]
 800e18c:	bd10      	pop	{r4, pc}

0800e18e <__sclose>:
 800e18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e192:	f000 b825 	b.w	800e1e0 <_close_r>

0800e196 <strncmp>:
 800e196:	b510      	push	{r4, lr}
 800e198:	b16a      	cbz	r2, 800e1b6 <strncmp+0x20>
 800e19a:	3901      	subs	r1, #1
 800e19c:	1884      	adds	r4, r0, r2
 800e19e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e1a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d103      	bne.n	800e1b2 <strncmp+0x1c>
 800e1aa:	42a0      	cmp	r0, r4
 800e1ac:	d001      	beq.n	800e1b2 <strncmp+0x1c>
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d1f5      	bne.n	800e19e <strncmp+0x8>
 800e1b2:	1a98      	subs	r0, r3, r2
 800e1b4:	bd10      	pop	{r4, pc}
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	e7fc      	b.n	800e1b4 <strncmp+0x1e>
	...

0800e1bc <_write_r>:
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	4c07      	ldr	r4, [pc, #28]	; (800e1dc <_write_r+0x20>)
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	4608      	mov	r0, r1
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	6022      	str	r2, [r4, #0]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	f7f9 fc4a 	bl	8007a64 <_write>
 800e1d0:	1c43      	adds	r3, r0, #1
 800e1d2:	d102      	bne.n	800e1da <_write_r+0x1e>
 800e1d4:	6823      	ldr	r3, [r4, #0]
 800e1d6:	b103      	cbz	r3, 800e1da <_write_r+0x1e>
 800e1d8:	602b      	str	r3, [r5, #0]
 800e1da:	bd38      	pop	{r3, r4, r5, pc}
 800e1dc:	200065b4 	.word	0x200065b4

0800e1e0 <_close_r>:
 800e1e0:	b538      	push	{r3, r4, r5, lr}
 800e1e2:	4c06      	ldr	r4, [pc, #24]	; (800e1fc <_close_r+0x1c>)
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	4608      	mov	r0, r1
 800e1ea:	6023      	str	r3, [r4, #0]
 800e1ec:	f7f9 fc48 	bl	8007a80 <_close>
 800e1f0:	1c43      	adds	r3, r0, #1
 800e1f2:	d102      	bne.n	800e1fa <_close_r+0x1a>
 800e1f4:	6823      	ldr	r3, [r4, #0]
 800e1f6:	b103      	cbz	r3, 800e1fa <_close_r+0x1a>
 800e1f8:	602b      	str	r3, [r5, #0]
 800e1fa:	bd38      	pop	{r3, r4, r5, pc}
 800e1fc:	200065b4 	.word	0x200065b4

0800e200 <_fstat_r>:
 800e200:	b538      	push	{r3, r4, r5, lr}
 800e202:	4c07      	ldr	r4, [pc, #28]	; (800e220 <_fstat_r+0x20>)
 800e204:	2300      	movs	r3, #0
 800e206:	4605      	mov	r5, r0
 800e208:	4608      	mov	r0, r1
 800e20a:	4611      	mov	r1, r2
 800e20c:	6023      	str	r3, [r4, #0]
 800e20e:	f7f9 fc3a 	bl	8007a86 <_fstat>
 800e212:	1c43      	adds	r3, r0, #1
 800e214:	d102      	bne.n	800e21c <_fstat_r+0x1c>
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	b103      	cbz	r3, 800e21c <_fstat_r+0x1c>
 800e21a:	602b      	str	r3, [r5, #0]
 800e21c:	bd38      	pop	{r3, r4, r5, pc}
 800e21e:	bf00      	nop
 800e220:	200065b4 	.word	0x200065b4

0800e224 <_isatty_r>:
 800e224:	b538      	push	{r3, r4, r5, lr}
 800e226:	4c06      	ldr	r4, [pc, #24]	; (800e240 <_isatty_r+0x1c>)
 800e228:	2300      	movs	r3, #0
 800e22a:	4605      	mov	r5, r0
 800e22c:	4608      	mov	r0, r1
 800e22e:	6023      	str	r3, [r4, #0]
 800e230:	f7f9 fc2e 	bl	8007a90 <_isatty>
 800e234:	1c43      	adds	r3, r0, #1
 800e236:	d102      	bne.n	800e23e <_isatty_r+0x1a>
 800e238:	6823      	ldr	r3, [r4, #0]
 800e23a:	b103      	cbz	r3, 800e23e <_isatty_r+0x1a>
 800e23c:	602b      	str	r3, [r5, #0]
 800e23e:	bd38      	pop	{r3, r4, r5, pc}
 800e240:	200065b4 	.word	0x200065b4

0800e244 <_lseek_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	4c07      	ldr	r4, [pc, #28]	; (800e264 <_lseek_r+0x20>)
 800e248:	4605      	mov	r5, r0
 800e24a:	4608      	mov	r0, r1
 800e24c:	4611      	mov	r1, r2
 800e24e:	2200      	movs	r2, #0
 800e250:	6022      	str	r2, [r4, #0]
 800e252:	461a      	mov	r2, r3
 800e254:	f7f9 fc1e 	bl	8007a94 <_lseek>
 800e258:	1c43      	adds	r3, r0, #1
 800e25a:	d102      	bne.n	800e262 <_lseek_r+0x1e>
 800e25c:	6823      	ldr	r3, [r4, #0]
 800e25e:	b103      	cbz	r3, 800e262 <_lseek_r+0x1e>
 800e260:	602b      	str	r3, [r5, #0]
 800e262:	bd38      	pop	{r3, r4, r5, pc}
 800e264:	200065b4 	.word	0x200065b4

0800e268 <memmove>:
 800e268:	4288      	cmp	r0, r1
 800e26a:	b510      	push	{r4, lr}
 800e26c:	eb01 0302 	add.w	r3, r1, r2
 800e270:	d807      	bhi.n	800e282 <memmove+0x1a>
 800e272:	1e42      	subs	r2, r0, #1
 800e274:	4299      	cmp	r1, r3
 800e276:	d00a      	beq.n	800e28e <memmove+0x26>
 800e278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e27c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e280:	e7f8      	b.n	800e274 <memmove+0xc>
 800e282:	4283      	cmp	r3, r0
 800e284:	d9f5      	bls.n	800e272 <memmove+0xa>
 800e286:	1881      	adds	r1, r0, r2
 800e288:	1ad2      	subs	r2, r2, r3
 800e28a:	42d3      	cmn	r3, r2
 800e28c:	d100      	bne.n	800e290 <memmove+0x28>
 800e28e:	bd10      	pop	{r4, pc}
 800e290:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e294:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e298:	e7f7      	b.n	800e28a <memmove+0x22>

0800e29a <__malloc_lock>:
 800e29a:	4770      	bx	lr

0800e29c <__malloc_unlock>:
 800e29c:	4770      	bx	lr

0800e29e <_realloc_r>:
 800e29e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a0:	4607      	mov	r7, r0
 800e2a2:	4614      	mov	r4, r2
 800e2a4:	460e      	mov	r6, r1
 800e2a6:	b921      	cbnz	r1, 800e2b2 <_realloc_r+0x14>
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2ae:	f7ff bc33 	b.w	800db18 <_malloc_r>
 800e2b2:	b922      	cbnz	r2, 800e2be <_realloc_r+0x20>
 800e2b4:	f7ff fbe2 	bl	800da7c <_free_r>
 800e2b8:	4625      	mov	r5, r4
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2be:	f000 f827 	bl	800e310 <_malloc_usable_size_r>
 800e2c2:	42a0      	cmp	r0, r4
 800e2c4:	d20f      	bcs.n	800e2e6 <_realloc_r+0x48>
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	4638      	mov	r0, r7
 800e2ca:	f7ff fc25 	bl	800db18 <_malloc_r>
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d0f2      	beq.n	800e2ba <_realloc_r+0x1c>
 800e2d4:	4631      	mov	r1, r6
 800e2d6:	4622      	mov	r2, r4
 800e2d8:	f7fb fdf1 	bl	8009ebe <memcpy>
 800e2dc:	4631      	mov	r1, r6
 800e2de:	4638      	mov	r0, r7
 800e2e0:	f7ff fbcc 	bl	800da7c <_free_r>
 800e2e4:	e7e9      	b.n	800e2ba <_realloc_r+0x1c>
 800e2e6:	4635      	mov	r5, r6
 800e2e8:	e7e7      	b.n	800e2ba <_realloc_r+0x1c>
	...

0800e2ec <_read_r>:
 800e2ec:	b538      	push	{r3, r4, r5, lr}
 800e2ee:	4c07      	ldr	r4, [pc, #28]	; (800e30c <_read_r+0x20>)
 800e2f0:	4605      	mov	r5, r0
 800e2f2:	4608      	mov	r0, r1
 800e2f4:	4611      	mov	r1, r2
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	6022      	str	r2, [r4, #0]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	f7f9 fba4 	bl	8007a48 <_read>
 800e300:	1c43      	adds	r3, r0, #1
 800e302:	d102      	bne.n	800e30a <_read_r+0x1e>
 800e304:	6823      	ldr	r3, [r4, #0]
 800e306:	b103      	cbz	r3, 800e30a <_read_r+0x1e>
 800e308:	602b      	str	r3, [r5, #0]
 800e30a:	bd38      	pop	{r3, r4, r5, pc}
 800e30c:	200065b4 	.word	0x200065b4

0800e310 <_malloc_usable_size_r>:
 800e310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e314:	1f18      	subs	r0, r3, #4
 800e316:	2b00      	cmp	r3, #0
 800e318:	bfbc      	itt	lt
 800e31a:	580b      	ldrlt	r3, [r1, r0]
 800e31c:	18c0      	addlt	r0, r0, r3
 800e31e:	4770      	bx	lr

0800e320 <_init>:
 800e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e322:	bf00      	nop
 800e324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e326:	bc08      	pop	{r3}
 800e328:	469e      	mov	lr, r3
 800e32a:	4770      	bx	lr

0800e32c <_fini>:
 800e32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32e:	bf00      	nop
 800e330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e332:	bc08      	pop	{r3}
 800e334:	469e      	mov	lr, r3
 800e336:	4770      	bx	lr
