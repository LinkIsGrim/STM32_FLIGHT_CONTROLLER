
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000916c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08009310  08009310  00019310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009910  08009910  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  08009910  08009910  00019910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009918  08009918  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009918  08009918  00019918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800991c  0800991c  0001991c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08009920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000220  08009b40  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08009b40  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f0a  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b81  00000000  00000000  0003815a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00010ac2  00000000  00000000  0003acdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000bd0  00000000  00000000  0004b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002618  00000000  00000000  0004c370  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00018058  00000000  00000000  0004e988  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ca92  00000000  00000000  000669e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00090ba2  00000000  00000000  00073472  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00104014  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e08  00000000  00000000  00104090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080092f4 	.word	0x080092f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	080092f4 	.word	0x080092f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <imu_init>:



/***************************** METHODS  **********************************/

IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	b084      	sub	sp, #16

	printf("STM32 Online..\r\n");
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <imu_init+0x64>)
 8000f60:	f004 fd7c 	bl	8005a5c <puts>

	//Check if MPU9250 responds
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000f64:	4620      	mov	r0, r4
 8000f66:	2364      	movs	r3, #100	; 0x64
 8000f68:	2202      	movs	r2, #2
 8000f6a:	21d0      	movs	r1, #208	; 0xd0
 8000f6c:	f002 fb74 	bl	8003658 <HAL_I2C_IsDeviceReady>
 8000f70:	b100      	cbz	r0, 8000f74 <imu_init+0x1c>
 8000f72:	e7fe      	b.n	8000f72 <imu_init+0x1a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8000f74:	2120      	movs	r1, #32
 8000f76:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <imu_init+0x68>)
 8000f78:	f001 fefc 	bl	8002d74 <HAL_GPIO_TogglePin>
//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000f7c:	aa04      	add	r2, sp, #16
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000f7e:	240a      	movs	r4, #10
	data_write[0] = subAddress;
 8000f80:	2375      	movs	r3, #117	; 0x75
 8000f82:	f802 3d04 	strb.w	r3, [r2, #-4]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000f86:	21d0      	movs	r1, #208	; 0xd0
 8000f88:	9400      	str	r4, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <imu_init+0x6c>)
 8000f8e:	f001 ffb1 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8000f92:	9400      	str	r4, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	aa02      	add	r2, sp, #8
 8000f98:	21d0      	movs	r1, #208	; 0xd0
 8000f9a:	480a      	ldr	r0, [pc, #40]	; (8000fc4 <imu_init+0x6c>)
 8000f9c:	f002 f914 	bl	80031c8 <HAL_I2C_Master_Receive>

	return data[0];
 8000fa0:	f89d 4008 	ldrb.w	r4, [sp, #8]
	if (whoami == 0x71) {
 8000fa4:	2c71      	cmp	r4, #113	; 0x71
 8000fa6:	d106      	bne.n	8000fb6 <imu_init+0x5e>
		printf("MPU9250 online..\r\n");
 8000fa8:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <imu_init+0x70>)
 8000faa:	f004 fd57 	bl	8005a5c <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8000fae:	4621      	mov	r1, r4
 8000fb0:	4806      	ldr	r0, [pc, #24]	; (8000fcc <imu_init+0x74>)
 8000fb2:	f004 fcdf 	bl	8005974 <iprintf>
}
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd10      	pop	{r4, pc}
 8000fbc:	0800956c 	.word	0x0800956c
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	200002c8 	.word	0x200002c8
 8000fc8:	0800957c 	.word	0x0800957c
 8000fcc:	08009590 	.word	0x08009590

08000fd0 <get_roll>:
	return roll;
 8000fd0:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <get_roll+0x8>)
}
 8000fd2:	ed93 0a00 	vldr	s0, [r3]
 8000fd6:	4770      	bx	lr
 8000fd8:	2000039c 	.word	0x2000039c

08000fdc <get_pitch>:
	return pitch;
 8000fdc:	4b01      	ldr	r3, [pc, #4]	; (8000fe4 <get_pitch+0x8>)
}
 8000fde:	ed93 0a00 	vldr	s0, [r3]
 8000fe2:	4770      	bx	lr
 8000fe4:	20000398 	.word	0x20000398

08000fe8 <timer_reset>:
    lastUpdate = Now;
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <timer_reset+0x10>)
 8000fea:	4904      	ldr	r1, [pc, #16]	; (8000ffc <timer_reset+0x14>)
	deltat = 0;
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <timer_reset+0x18>)
    lastUpdate = Now;
 8000fee:	6800      	ldr	r0, [r0, #0]
 8000ff0:	6008      	str	r0, [r1, #0]
	deltat = 0;
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
}
 8000ff6:	4770      	bx	lr
 8000ff8:	20000240 	.word	0x20000240
 8000ffc:	20000254 	.word	0x20000254
 8001000:	20000244 	.word	0x20000244

08001004 <_write>:
int _write(int file, char *ptr, int len) {
 8001004:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001006:	1e17      	subs	r7, r2, #0
int _write(int file, char *ptr, int len) {
 8001008:	b083      	sub	sp, #12
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800100a:	dd0e      	ble.n	800102a <_write+0x26>
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 800100c:	4e08      	ldr	r6, [pc, #32]	; (8001030 <_write+0x2c>)
 800100e:	460c      	mov	r4, r1
 8001010:	19cd      	adds	r5, r1, r7
	c[0] = ch & 0x00FF;
 8001012:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001016:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 800101a:	2201      	movs	r2, #1
 800101c:	230a      	movs	r3, #10
 800101e:	a901      	add	r1, sp, #4
 8001020:	4630      	mov	r0, r6
 8001022:	f003 fbdf 	bl	80047e4 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001026:	42a5      	cmp	r5, r4
 8001028:	d1f3      	bne.n	8001012 <_write+0xe>
}
 800102a:	4638      	mov	r0, r7
 800102c:	b003      	add	sp, #12
 800102e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001030:	20000358 	.word	0x20000358

08001034 <readMagData>:
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
}

void readMagData(int16_t * destination) {
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
	data_write[0] = subAddress;
 8001038:	ac0a      	add	r4, sp, #40	; 0x28
 800103a:	2302      	movs	r3, #2
 800103c:	f804 3d10 	strb.w	r3, [r4, #-16]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001040:	250a      	movs	r5, #10
 8001042:	4622      	mov	r2, r4
 8001044:	2301      	movs	r3, #1
 8001046:	2118      	movs	r1, #24
void readMagData(int16_t * destination) {
 8001048:	4606      	mov	r6, r0
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 800104a:	9500      	str	r5, [sp, #0]
 800104c:	481f      	ldr	r0, [pc, #124]	; (80010cc <readMagData+0x98>)
 800104e:	f001 ff51 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8001052:	2301      	movs	r3, #1
 8001054:	aa04      	add	r2, sp, #16
 8001056:	9500      	str	r5, [sp, #0]
 8001058:	2118      	movs	r1, #24
 800105a:	481c      	ldr	r0, [pc, #112]	; (80010cc <readMagData+0x98>)
 800105c:	f002 f8b4 	bl	80031c8 <HAL_I2C_Master_Receive>
	return data[0];
 8001060:	f89d 3010 	ldrb.w	r3, [sp, #16]
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 8001064:	07da      	lsls	r2, r3, #31
 8001066:	d401      	bmi.n	800106c <readMagData+0x38>
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
		}
	}
}
 8001068:	b00a      	add	sp, #40	; 0x28
 800106a:	bd70      	pop	{r4, r5, r6, pc}
	data_write[0] = subAddress;
 800106c:	aa0a      	add	r2, sp, #40	; 0x28
 800106e:	2303      	movs	r3, #3
 8001070:	f802 3d1c 	strb.w	r3, [r2, #-28]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001074:	2118      	movs	r1, #24
 8001076:	2301      	movs	r3, #1
 8001078:	9500      	str	r5, [sp, #0]
 800107a:	4814      	ldr	r0, [pc, #80]	; (80010cc <readMagData+0x98>)
 800107c:	f001 ff3a 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001080:	2307      	movs	r3, #7
 8001082:	2119      	movs	r1, #25
 8001084:	9500      	str	r5, [sp, #0]
 8001086:	4622      	mov	r2, r4
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <readMagData+0x98>)
 800108a:	f002 f89d 	bl	80031c8 <HAL_I2C_Master_Receive>
 800108e:	e894 0003 	ldmia.w	r4, {r0, r1}
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 8001092:	030b      	lsls	r3, r1, #12
 8001094:	9004      	str	r0, [sp, #16]
 8001096:	f8ad 1014 	strh.w	r1, [sp, #20]
 800109a:	d4e5      	bmi.n	8001068 <readMagData+0x34>
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 800109c:	f89d 5011 	ldrb.w	r5, [sp, #17]
 80010a0:	f89d 1010 	ldrb.w	r1, [sp, #16]
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 80010a4:	f89d 4013 	ldrb.w	r4, [sp, #19]
 80010a8:	f89d 2012 	ldrb.w	r2, [sp, #18]
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 80010ac:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80010b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 80010b4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 80010b8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 80010bc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			destination[0] =
 80010c0:	8031      	strh	r1, [r6, #0]
			destination[1] =
 80010c2:	8072      	strh	r2, [r6, #2]
			destination[2] =
 80010c4:	80b3      	strh	r3, [r6, #4]
}
 80010c6:	b00a      	add	sp, #40	; 0x28
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
 80010ca:	bf00      	nop
 80010cc:	200002c8 	.word	0x200002c8

080010d0 <initAK8963>:
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
	HAL_Delay(100);
}

void initAK8963(float * destination) {
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	b089      	sub	sp, #36	; 0x24
	data_write[0] = subAddress;
 80010d4:	ad08      	add	r5, sp, #32
 80010d6:	240a      	movs	r4, #10
 80010d8:	f825 4d10 	strh.w	r4, [r5, #-16]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80010dc:	4e3b      	ldr	r6, [pc, #236]	; (80011cc <initAK8963+0xfc>)
 80010de:	9400      	str	r4, [sp, #0]
void initAK8963(float * destination) {
 80010e0:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80010e2:	462a      	mov	r2, r5
 80010e4:	2302      	movs	r3, #2
 80010e6:	2118      	movs	r1, #24
 80010e8:	4630      	mov	r0, r6
 80010ea:	f001 ff03 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
	HAL_Delay(10);
 80010ee:	4620      	mov	r0, r4
 80010f0:	f001 fcda 	bl	8002aa8 <HAL_Delay>
	data_write[0] = subAddress;
 80010f4:	f640 7c0a 	movw	ip, #3850	; 0xf0a
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80010f8:	462a      	mov	r2, r5
 80010fa:	2302      	movs	r3, #2
 80010fc:	2118      	movs	r1, #24
 80010fe:	9400      	str	r4, [sp, #0]
 8001100:	4630      	mov	r0, r6
	data_write[0] = subAddress;
 8001102:	f8ad c010 	strh.w	ip, [sp, #16]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001106:	f001 fef5 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	HAL_Delay(10);
 800110a:	4620      	mov	r0, r4
 800110c:	f001 fccc 	bl	8002aa8 <HAL_Delay>
	data_write[0] = subAddress;
 8001110:	aa08      	add	r2, sp, #32
 8001112:	2310      	movs	r3, #16
 8001114:	f802 3d14 	strb.w	r3, [r2, #-20]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001118:	4630      	mov	r0, r6
 800111a:	9400      	str	r4, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	2118      	movs	r1, #24
 8001120:	f001 fee8 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001124:	462a      	mov	r2, r5
 8001126:	9400      	str	r4, [sp, #0]
 8001128:	4630      	mov	r0, r6
 800112a:	2303      	movs	r3, #3
 800112c:	2119      	movs	r1, #25
 800112e:	f002 f84b 	bl	80031c8 <HAL_I2C_Master_Receive>
		dest[ii] = data[ii];
 8001132:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8001136:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800113a:	f89d 3012 	ldrb.w	r3, [sp, #18]
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 800113e:	eddf 5a24 	vldr	s11, [pc, #144]	; 80011d0 <initAK8963+0x100>
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001142:	9400      	str	r4, [sp, #0]
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001144:	3980      	subs	r1, #128	; 0x80
 8001146:	ee07 1a90 	vmov	s15, r1
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 800114a:	3a80      	subs	r2, #128	; 0x80
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 800114c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001150:	ee07 2a90 	vmov	s15, r2
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8001154:	3b80      	subs	r3, #128	; 0x80
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001156:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001162:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001166:	eeb0 5a67 	vmov.f32	s10, s15
 800116a:	eea6 5a25 	vfma.f32	s10, s12, s11
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800116e:	462a      	mov	r2, r5
 8001170:	2302      	movs	r3, #2
 8001172:	2118      	movs	r1, #24
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001174:	eeb0 6a45 	vmov.f32	s12, s10
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001178:	eeb0 5a67 	vmov.f32	s10, s15
 800117c:	eea6 5aa5 	vfma.f32	s10, s13, s11
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001180:	4630      	mov	r0, r6
	data_write[0] = subAddress;
 8001182:	f8ad 4010 	strh.w	r4, [sp, #16]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8001186:	eee7 7a25 	vfma.f32	s15, s14, s11
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 800118a:	ed87 6a00 	vstr	s12, [r7]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 800118e:	ed87 5a01 	vstr	s10, [r7, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8001192:	edc7 7a02 	vstr	s15, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001196:	f001 fead 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
	HAL_Delay(10);
 800119a:	4620      	mov	r0, r4
 800119c:	f001 fc84 	bl	8002aa8 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <initAK8963+0x104>)
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <initAK8963+0x108>)
 80011a4:	7811      	ldrb	r1, [r2, #0]
 80011a6:	781b      	ldrb	r3, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80011a8:	9400      	str	r4, [sp, #0]
 80011aa:	462a      	mov	r2, r5
 80011ac:	4630      	mov	r0, r6
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80011ae:	ea43 1501 	orr.w	r5, r3, r1, lsl #4
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80011b2:	2302      	movs	r3, #2
 80011b4:	2118      	movs	r1, #24
	data_write[0] = subAddress;
 80011b6:	f88d 4010 	strb.w	r4, [sp, #16]
	data_write[1] = data;
 80011ba:	f88d 5011 	strb.w	r5, [sp, #17]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80011be:	f001 fe99 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80011c2:	4620      	mov	r0, r4
 80011c4:	f001 fc70 	bl	8002aa8 <HAL_Delay>
}
 80011c8:	b009      	add	sp, #36	; 0x24
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011cc:	200002c8 	.word	0x200002c8
 80011d0:	3b800000 	.word	0x3b800000
 80011d4:	20000001 	.word	0x20000001
 80011d8:	20000000 	.word	0x20000000

080011dc <initMPU9250>:

void initMPU9250() {
 80011dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e0:	b084      	sub	sp, #16
	data_write[0] = subAddress;
 80011e2:	ae04      	add	r6, sp, #16
 80011e4:	236b      	movs	r3, #107	; 0x6b
 80011e6:	f826 3d04 	strh.w	r3, [r6, #-4]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80011ea:	4c77      	ldr	r4, [pc, #476]	; (80013c8 <initMPU9250+0x1ec>)
 80011ec:	250a      	movs	r5, #10
 80011ee:	4632      	mov	r2, r6
 80011f0:	2302      	movs	r3, #2
 80011f2:	21d0      	movs	r1, #208	; 0xd0
 80011f4:	4620      	mov	r0, r4
 80011f6:	9500      	str	r5, [sp, #0]
 80011f8:	f001 fe7c 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f001 fc53 	bl	8002aa8 <HAL_Delay>
	data_write[0] = subAddress;
 8001202:	f240 176b 	movw	r7, #363	; 0x16b
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001206:	4632      	mov	r2, r6
 8001208:	9500      	str	r5, [sp, #0]
 800120a:	4620      	mov	r0, r4
 800120c:	2302      	movs	r3, #2
 800120e:	21d0      	movs	r1, #208	; 0xd0
	data_write[0] = subAddress;
 8001210:	f8ad 700c 	strh.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001214:	f001 fe6e 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 8001218:	f240 371a 	movw	r7, #794	; 0x31a
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800121c:	4632      	mov	r2, r6
 800121e:	9500      	str	r5, [sp, #0]
 8001220:	4620      	mov	r0, r4
 8001222:	2302      	movs	r3, #2
 8001224:	21d0      	movs	r1, #208	; 0xd0
	data_write[0] = subAddress;
 8001226:	f8ad 700c 	strh.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800122a:	f001 fe63 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 800122e:	f240 4719 	movw	r7, #1049	; 0x419
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001232:	4632      	mov	r2, r6
 8001234:	9500      	str	r5, [sp, #0]
 8001236:	4620      	mov	r0, r4
 8001238:	2302      	movs	r3, #2
 800123a:	21d0      	movs	r1, #208	; 0xd0
	data_write[0] = subAddress;
 800123c:	f04f 081b 	mov.w	r8, #27
	data_write[0] = subAddress;
 8001240:	f8ad 700c 	strh.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001244:	f001 fe56 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001248:	4632      	mov	r2, r6
 800124a:	9500      	str	r5, [sp, #0]
 800124c:	4620      	mov	r0, r4
 800124e:	2301      	movs	r3, #1
 8001250:	21d1      	movs	r1, #209	; 0xd1
	data_write[0] = subAddress;
 8001252:	f88d 800c 	strb.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001256:	f001 fe4d 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 800125a:	aa02      	add	r2, sp, #8
 800125c:	9500      	str	r5, [sp, #0]
 800125e:	4620      	mov	r0, r4
 8001260:	2301      	movs	r3, #1
 8001262:	21d1      	movs	r1, #209	; 0xd1
 8001264:	f001 ffb0 	bl	80031c8 <HAL_I2C_Master_Receive>
	return data[0];
 8001268:	f89d 7008 	ldrb.w	r7, [sp, #8]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800126c:	9500      	str	r5, [sp, #0]

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 800126e:	f007 0c1f 	and.w	ip, r7, #31
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001272:	4632      	mov	r2, r6
 8001274:	4620      	mov	r0, r4
 8001276:	2302      	movs	r3, #2
 8001278:	21d0      	movs	r1, #208	; 0xd0
	data_write[0] = subAddress;
 800127a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_write[1] = data;
 800127e:	f88d c00d 	strb.w	ip, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001282:	f001 fe37 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001286:	f027 0c18 	bic.w	ip, r7, #24
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800128a:	4632      	mov	r2, r6
 800128c:	9500      	str	r5, [sp, #0]
 800128e:	4620      	mov	r0, r4
 8001290:	2302      	movs	r3, #2
 8001292:	21d0      	movs	r1, #208	; 0xd0
	data_write[1] = data;
 8001294:	f88d c00d 	strb.w	ip, [sp, #13]
	data_write[0] = subAddress;
 8001298:	f88d 800c 	strb.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800129c:	f001 fe2a 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 80012a0:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <initMPU9250+0x1f0>)
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80012a2:	9500      	str	r5, [sp, #0]
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 80012a4:	781b      	ldrb	r3, [r3, #0]
	data_write[0] = subAddress;
 80012a6:	f88d 800c 	strb.w	r8, [sp, #12]
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 80012aa:	ea47 07c3 	orr.w	r7, r7, r3, lsl #3
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80012ae:	4632      	mov	r2, r6
 80012b0:	4620      	mov	r0, r4
 80012b2:	2302      	movs	r3, #2
 80012b4:	21d0      	movs	r1, #208	; 0xd0
	data_write[0] = subAddress;
 80012b6:	f04f 081c 	mov.w	r8, #28
	data_write[1] = data;
 80012ba:	f88d 700d 	strb.w	r7, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80012be:	f001 fe19 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 80012c2:	4632      	mov	r2, r6
 80012c4:	9500      	str	r5, [sp, #0]
 80012c6:	4620      	mov	r0, r4
 80012c8:	2301      	movs	r3, #1
 80012ca:	21d1      	movs	r1, #209	; 0xd1
	data_write[0] = subAddress;
 80012cc:	f88d 800c 	strb.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 80012d0:	f001 fe10 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 80012d4:	aa02      	add	r2, sp, #8
 80012d6:	9500      	str	r5, [sp, #0]
 80012d8:	4620      	mov	r0, r4
 80012da:	2301      	movs	r3, #1
 80012dc:	21d1      	movs	r1, #209	; 0xd1
 80012de:	f001 ff73 	bl	80031c8 <HAL_I2C_Master_Receive>
	return data[0];
 80012e2:	f89d 7008 	ldrb.w	r7, [sp, #8]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80012e6:	9500      	str	r5, [sp, #0]

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 80012e8:	f007 0c1f 	and.w	ip, r7, #31
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80012ec:	4632      	mov	r2, r6
 80012ee:	4620      	mov	r0, r4
 80012f0:	2302      	movs	r3, #2
 80012f2:	21d0      	movs	r1, #208	; 0xd0
	data_write[0] = subAddress;
 80012f4:	f88d 800c 	strb.w	r8, [sp, #12]
	data_write[1] = data;
 80012f8:	f88d c00d 	strb.w	ip, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80012fc:	f001 fdfa 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001300:	f027 0c18 	bic.w	ip, r7, #24
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001304:	4632      	mov	r2, r6
 8001306:	9500      	str	r5, [sp, #0]
 8001308:	4620      	mov	r0, r4
 800130a:	2302      	movs	r3, #2
 800130c:	21d0      	movs	r1, #208	; 0xd0
	data_write[1] = data;
 800130e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_write[0] = subAddress;
 8001312:	f88d 800c 	strb.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001316:	f001 fded 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <initMPU9250+0x1f4>)
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800131c:	9500      	str	r5, [sp, #0]
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 800131e:	781b      	ldrb	r3, [r3, #0]
	data_write[0] = subAddress;
 8001320:	f88d 800c 	strb.w	r8, [sp, #12]
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8001324:	ea47 07c3 	orr.w	r7, r7, r3, lsl #3
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001328:	4632      	mov	r2, r6
 800132a:	4620      	mov	r0, r4
 800132c:	2302      	movs	r3, #2
 800132e:	21d0      	movs	r1, #208	; 0xd0
	data_write[0] = subAddress;
 8001330:	f04f 081d 	mov.w	r8, #29
	data_write[1] = data;
 8001334:	f88d 700d 	strb.w	r7, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001338:	f001 fddc 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 800133c:	4632      	mov	r2, r6
 800133e:	9500      	str	r5, [sp, #0]
 8001340:	4620      	mov	r0, r4
 8001342:	2301      	movs	r3, #1
 8001344:	21d1      	movs	r1, #209	; 0xd1
	data_write[0] = subAddress;
 8001346:	f88d 800c 	strb.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 800134a:	f001 fdd3 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 800134e:	aa02      	add	r2, sp, #8
 8001350:	9500      	str	r5, [sp, #0]
 8001352:	4620      	mov	r0, r4
 8001354:	2301      	movs	r3, #1
 8001356:	21d1      	movs	r1, #209	; 0xd1
 8001358:	f001 ff36 	bl	80031c8 <HAL_I2C_Master_Receive>
	return data[0];
 800135c:	f89d 7008 	ldrb.w	r7, [sp, #8]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001360:	9500      	str	r5, [sp, #0]

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001362:	f027 0c0f 	bic.w	ip, r7, #15
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001366:	4632      	mov	r2, r6
 8001368:	4620      	mov	r0, r4
 800136a:	2302      	movs	r3, #2
 800136c:	21d0      	movs	r1, #208	; 0xd0
	data_write[1] = data;
 800136e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_write[0] = subAddress;
 8001372:	f88d 800c 	strb.w	r8, [sp, #12]
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001376:	f047 0703 	orr.w	r7, r7, #3
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800137a:	f001 fdbb 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 800137e:	4632      	mov	r2, r6
 8001380:	9500      	str	r5, [sp, #0]
 8001382:	4620      	mov	r0, r4
 8001384:	2302      	movs	r3, #2
 8001386:	21d0      	movs	r1, #208	; 0xd0
	data_write[1] = data;
 8001388:	f88d 700d 	strb.w	r7, [sp, #13]
	data_write[0] = subAddress;
 800138c:	f88d 800c 	strb.w	r8, [sp, #12]
 8001390:	f242 2737 	movw	r7, #8759	; 0x2237
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001394:	f001 fdae 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 8001398:	4632      	mov	r2, r6
 800139a:	9500      	str	r5, [sp, #0]
 800139c:	4620      	mov	r0, r4
 800139e:	2302      	movs	r3, #2
 80013a0:	21d0      	movs	r1, #208	; 0xd0
	data_write[0] = subAddress;
 80013a2:	f8ad 700c 	strh.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80013a6:	f001 fda5 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 80013aa:	4632      	mov	r2, r6
 80013ac:	9500      	str	r5, [sp, #0]
 80013ae:	4620      	mov	r0, r4
 80013b0:	2302      	movs	r3, #2
	data_write[0] = subAddress;
 80013b2:	f44f 749c 	mov.w	r4, #312	; 0x138
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80013b6:	21d0      	movs	r1, #208	; 0xd0
	data_write[0] = subAddress;
 80013b8:	f8ad 400c 	strh.w	r4, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80013bc:	f001 fd9a 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
}
 80013c0:	b004      	add	sp, #16
 80013c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013c6:	bf00      	nop
 80013c8:	200002c8 	.word	0x200002c8
 80013cc:	2000023d 	.word	0x2000023d
 80013d0:	2000023c 	.word	0x2000023c

080013d4 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2) {
 80013d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013d8:	ed2d 8b04 	vpush	{d8-d9}
 80013dc:	b08f      	sub	sp, #60	; 0x3c
	data_write[0] = subAddress;
 80013de:	ad0e      	add	r5, sp, #56	; 0x38
 80013e0:	f248 036b 	movw	r3, #32875	; 0x806b
 80013e4:	f825 3d10 	strh.w	r3, [r5, #-16]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80013e8:	240a      	movs	r4, #10
void calibrateMPU9250(float * dest1, float * dest2) {
 80013ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80013ee:	462a      	mov	r2, r5
 80013f0:	2302      	movs	r3, #2
 80013f2:	21d0      	movs	r1, #208	; 0xd0
 80013f4:	9400      	str	r4, [sp, #0]
 80013f6:	48d7      	ldr	r0, [pc, #860]	; (8001754 <calibrateMPU9250+0x380>)
 80013f8:	f001 fd7c 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
	HAL_Delay(100);
 80013fc:	2064      	movs	r0, #100	; 0x64
 80013fe:	f001 fb53 	bl	8002aa8 <HAL_Delay>
	data_write[0] = subAddress;
 8001402:	f240 166b 	movw	r6, #363	; 0x16b
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001406:	462a      	mov	r2, r5
 8001408:	2302      	movs	r3, #2
 800140a:	21d0      	movs	r1, #208	; 0xd0
 800140c:	9400      	str	r4, [sp, #0]
 800140e:	48d1      	ldr	r0, [pc, #836]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 8001410:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001414:	f001 fd6e 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 8001418:	266c      	movs	r6, #108	; 0x6c
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800141a:	462a      	mov	r2, r5
 800141c:	2302      	movs	r3, #2
 800141e:	21d0      	movs	r1, #208	; 0xd0
 8001420:	9400      	str	r4, [sp, #0]
 8001422:	48cc      	ldr	r0, [pc, #816]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 8001424:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001428:	f001 fd64 	bl	8002ef4 <HAL_I2C_Master_Transmit>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01);
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_2, 0x00);
	HAL_Delay(200);
 800142c:	20c8      	movs	r0, #200	; 0xc8
 800142e:	f001 fb3b 	bl	8002aa8 <HAL_Delay>
	data_write[0] = subAddress;
 8001432:	2638      	movs	r6, #56	; 0x38
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001434:	462a      	mov	r2, r5
 8001436:	2302      	movs	r3, #2
 8001438:	21d0      	movs	r1, #208	; 0xd0
 800143a:	9400      	str	r4, [sp, #0]
 800143c:	48c5      	ldr	r0, [pc, #788]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 800143e:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001442:	f001 fd57 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 8001446:	2623      	movs	r6, #35	; 0x23
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001448:	462a      	mov	r2, r5
 800144a:	2302      	movs	r3, #2
 800144c:	21d0      	movs	r1, #208	; 0xd0
 800144e:	9400      	str	r4, [sp, #0]
 8001450:	48c0      	ldr	r0, [pc, #768]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 8001452:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8001456:	276b      	movs	r7, #107	; 0x6b
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001458:	f001 fd4c 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 800145c:	462a      	mov	r2, r5
 800145e:	2302      	movs	r3, #2
 8001460:	21d0      	movs	r1, #208	; 0xd0
 8001462:	9400      	str	r4, [sp, #0]
 8001464:	48bb      	ldr	r0, [pc, #748]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 8001466:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800146a:	f001 fd43 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 800146e:	2724      	movs	r7, #36	; 0x24
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001470:	462a      	mov	r2, r5
 8001472:	2302      	movs	r3, #2
 8001474:	21d0      	movs	r1, #208	; 0xd0
 8001476:	9400      	str	r4, [sp, #0]
 8001478:	48b6      	ldr	r0, [pc, #728]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 800147a:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800147e:	f001 fd39 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 8001482:	276a      	movs	r7, #106	; 0x6a
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001484:	462a      	mov	r2, r5
 8001486:	2302      	movs	r3, #2
 8001488:	21d0      	movs	r1, #208	; 0xd0
 800148a:	9400      	str	r4, [sp, #0]
 800148c:	48b1      	ldr	r0, [pc, #708]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 800148e:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001492:	f001 fd2f 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 8001496:	f640 476a 	movw	r7, #3178	; 0xc6a
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800149a:	462a      	mov	r2, r5
 800149c:	2302      	movs	r3, #2
 800149e:	21d0      	movs	r1, #208	; 0xd0
 80014a0:	9400      	str	r4, [sp, #0]
 80014a2:	48ac      	ldr	r0, [pc, #688]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 80014a4:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80014a8:	f001 fd24 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00);      // Disable FIFO
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Turn on internal clock source
	writeByte(MPU9250_ADDRESS_TX, I2C_MST_CTRL, 0x00); // Disable I2C master
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x00); // Disable FIFO and I2C master modes
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x0C);    // Reset FIFO and DMP
	HAL_Delay(15);
 80014ac:	200f      	movs	r0, #15
 80014ae:	f001 fafb 	bl	8002aa8 <HAL_Delay>
	data_write[0] = subAddress;
 80014b2:	f44f 778d 	mov.w	r7, #282	; 0x11a
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80014b6:	462a      	mov	r2, r5
 80014b8:	2302      	movs	r3, #2
 80014ba:	21d0      	movs	r1, #208	; 0xd0
 80014bc:	9400      	str	r4, [sp, #0]
 80014be:	48a5      	ldr	r0, [pc, #660]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 80014c0:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80014c4:	f001 fd16 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 80014c8:	2719      	movs	r7, #25
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80014ca:	462a      	mov	r2, r5
 80014cc:	2302      	movs	r3, #2
 80014ce:	21d0      	movs	r1, #208	; 0xd0
 80014d0:	9400      	str	r4, [sp, #0]
 80014d2:	48a0      	ldr	r0, [pc, #640]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 80014d4:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80014d8:	f001 fd0c 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 80014dc:	271b      	movs	r7, #27
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80014de:	462a      	mov	r2, r5
 80014e0:	2302      	movs	r3, #2
 80014e2:	21d0      	movs	r1, #208	; 0xd0
 80014e4:	9400      	str	r4, [sp, #0]
 80014e6:	489b      	ldr	r0, [pc, #620]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 80014e8:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80014ec:	f001 fd02 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 80014f0:	271c      	movs	r7, #28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80014f2:	462a      	mov	r2, r5
 80014f4:	2302      	movs	r3, #2
 80014f6:	21d0      	movs	r1, #208	; 0xd0
 80014f8:	9400      	str	r4, [sp, #0]
 80014fa:	4896      	ldr	r0, [pc, #600]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 80014fc:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001500:	f001 fcf8 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 8001504:	f244 076a 	movw	r7, #16490	; 0x406a
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001508:	462a      	mov	r2, r5
 800150a:	2302      	movs	r3, #2
 800150c:	21d0      	movs	r1, #208	; 0xd0
 800150e:	9400      	str	r4, [sp, #0]
 8001510:	4890      	ldr	r0, [pc, #576]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 8001512:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001516:	f001 fced 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 800151a:	f647 0723 	movw	r7, #30755	; 0x7823
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800151e:	462a      	mov	r2, r5
 8001520:	2302      	movs	r3, #2
 8001522:	21d0      	movs	r1, #208	; 0xd0
 8001524:	9400      	str	r4, [sp, #0]
 8001526:	488b      	ldr	r0, [pc, #556]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 8001528:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800152c:	f001 fce2 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	uint16_t accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x40);   // Enable FIFO
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001530:	2028      	movs	r0, #40	; 0x28
 8001532:	f001 fab9 	bl	8002aa8 <HAL_Delay>
	data_write[0] = subAddress;
 8001536:	af0e      	add	r7, sp, #56	; 0x38
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001538:	462a      	mov	r2, r5
 800153a:	2302      	movs	r3, #2
 800153c:	21d0      	movs	r1, #208	; 0xd0
 800153e:	9400      	str	r4, [sp, #0]
 8001540:	4884      	ldr	r0, [pc, #528]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 8001542:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001546:	f001 fcd5 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 800154a:	2372      	movs	r3, #114	; 0x72
 800154c:	f807 3d14 	strb.w	r3, [r7, #-20]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001550:	21d0      	movs	r1, #208	; 0xd0
 8001552:	463a      	mov	r2, r7
 8001554:	2301      	movs	r3, #1
 8001556:	9400      	str	r4, [sp, #0]
 8001558:	487e      	ldr	r0, [pc, #504]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 800155a:	9704      	str	r7, [sp, #16]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800155c:	f001 fcca 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001560:	462a      	mov	r2, r5
 8001562:	2302      	movs	r3, #2
 8001564:	21d1      	movs	r1, #209	; 0xd1
 8001566:	9400      	str	r4, [sp, #0]
 8001568:	487a      	ldr	r0, [pc, #488]	; (8001754 <calibrateMPU9250+0x380>)
 800156a:	f001 fe2d 	bl	80031c8 <HAL_I2C_Master_Receive>
		dest[ii] = data[ii];
 800156e:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 8001572:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00); // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
	fifo_count = ((uint16_t) data[0] << 8) | data[1];
	packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 8001576:	4a78      	ldr	r2, [pc, #480]	; (8001758 <calibrateMPU9250+0x384>)
 8001578:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800157c:	fba2 2303 	umull	r2, r3, r2, r3

	for (ii = 0; ii < packet_count; ii++) {
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	9303      	str	r3, [sp, #12]
 8001584:	f000 80d7 	beq.w	8001736 <calibrateMPU9250+0x362>
 8001588:	2600      	movs	r6, #0
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800158a:	9402      	str	r4, [sp, #8]
	data_write[0] = subAddress;
 800158c:	9505      	str	r5, [sp, #20]
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };
 800158e:	4634      	mov	r4, r6
 8001590:	46b2      	mov	sl, r6
 8001592:	46b0      	mov	r8, r6
 8001594:	4637      	mov	r7, r6
 8001596:	46b1      	mov	r9, r6
	data_write[0] = subAddress;
 8001598:	4635      	mov	r5, r6
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800159a:	9b02      	ldr	r3, [sp, #8]
 800159c:	9300      	str	r3, [sp, #0]
	data_write[0] = subAddress;
 800159e:	f04f 0c74 	mov.w	ip, #116	; 0x74
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80015a2:	2301      	movs	r3, #1
 80015a4:	9a04      	ldr	r2, [sp, #16]
 80015a6:	486b      	ldr	r0, [pc, #428]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 80015a8:	f88d c024 	strb.w	ip, [sp, #36]	; 0x24
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80015ac:	21d0      	movs	r1, #208	; 0xd0
 80015ae:	f001 fca1 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 80015b2:	9b02      	ldr	r3, [sp, #8]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	9a05      	ldr	r2, [sp, #20]
 80015b8:	4866      	ldr	r0, [pc, #408]	; (8001754 <calibrateMPU9250+0x380>)
 80015ba:	230c      	movs	r3, #12
 80015bc:	21d1      	movs	r1, #209	; 0xd1
 80015be:	f001 fe03 	bl	80031c8 <HAL_I2C_Master_Receive>
		dest[ii] = data[ii];
 80015c2:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 80015c6:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 80015ca:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80015ce:	f89d e029 	ldrb.w	lr, [sp, #41]	; 0x29
 80015d2:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
 80015d6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80015da:	f89d b02e 	ldrb.w	fp, [sp, #46]	; 0x2e
		int16_t accel_temp[3] = { 0, 0, 0 }, gyro_temp[3] = { 0, 0, 0 };
		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_R_W, 12,
				&data[0]); // read data for averaging
		accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]); // Form signed 16-bit integer for each sample in FIFO
		accel_temp[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 80015de:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
		accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]); // Form signed 16-bit integer for each sample in FIFO
 80015e2:	ea4e 2e01 	orr.w	lr, lr, r1, lsl #8
		accel_temp[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 80015e6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		dest[ii] = data[ii];
 80015ea:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
 80015ee:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80015f2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		gyro_temp[0] = (int16_t) (((int16_t) data[6] << 8) | data[7]);
 80015f6:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
		gyro_temp[1] = (int16_t) (((int16_t) data[8] << 8) | data[9]);
 80015fa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		dest[ii] = data[ii];
 80015fe:	f89d b032 	ldrb.w	fp, [sp, #50]	; 0x32
 8001602:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
		gyro_temp[2] = (int16_t) (((int16_t) data[10] << 8) | data[11]);
 8001606:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 800160a:	3601      	adds	r6, #1
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[1] += (int32_t) accel_temp[1];
		accel_bias[2] += (int32_t) accel_temp[2];
		gyro_bias[0] += (int32_t) gyro_temp[0];
		gyro_bias[1] += (int32_t) gyro_temp[1];
		gyro_bias[2] += (int32_t) gyro_temp[2];
 800160c:	fa07 f783 	sxtah	r7, r7, r3
	for (ii = 0; ii < packet_count; ii++) {
 8001610:	9b03      	ldr	r3, [sp, #12]
		accel_bias[1] += (int32_t) accel_temp[1];
 8001612:	fa04 f48c 	sxtah	r4, r4, ip
	for (ii = 0; ii < packet_count; ii++) {
 8001616:	fa1f fc86 	uxth.w	ip, r6
 800161a:	4563      	cmp	r3, ip
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800161c:	fa09 f98e 	sxtah	r9, r9, lr
		accel_bias[2] += (int32_t) accel_temp[2];
 8001620:	fa0a fa80 	sxtah	sl, sl, r0
		gyro_bias[0] += (int32_t) gyro_temp[0];
 8001624:	fa05 f581 	sxtah	r5, r5, r1
		gyro_bias[1] += (int32_t) gyro_temp[1];
 8001628:	fa08 f882 	sxtah	r8, r8, r2
	for (ii = 0; ii < packet_count; ii++) {
 800162c:	d8b5      	bhi.n	800159a <calibrateMPU9250+0x1c6>
 800162e:	462b      	mov	r3, r5
 8001630:	4619      	mov	r1, r3
 8001632:	9b03      	ldr	r3, [sp, #12]
 8001634:	fb91 f2f3 	sdiv	r2, r1, r3
 8001638:	ee07 2a90 	vmov	s15, r2
 800163c:	fb98 f2f3 	sdiv	r2, r8, r3
 8001640:	ee06 2a90 	vmov	s13, r2
 8001644:	fb97 f2f3 	sdiv	r2, r7, r3
 8001648:	ee07 2a10 	vmov	s14, r2
 800164c:	fb99 f2f3 	sdiv	r2, r9, r3
 8001650:	ee09 2a10 	vmov	s18, r2
 8001654:	fb94 f2f3 	sdiv	r2, r4, r3
 8001658:	ee08 2a90 	vmov	s17, r2
 800165c:	fb9a f3f3 	sdiv	r3, sl, r3
 8001660:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800175c <calibrateMPU9250+0x388>
 8001664:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001760 <calibrateMPU9250+0x38c>
 8001668:	9d05      	ldr	r5, [sp, #20]
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001672:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001676:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800167a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
	accel_bias[2] /= (int32_t) packet_count;
	gyro_bias[0] /= (int32_t) packet_count;
	gyro_bias[1] /= (int32_t) packet_count;
	gyro_bias[2] /= (int32_t) packet_count;

	if (accel_bias[2] > 0L) {
 800167e:	2b00      	cmp	r3, #0
 8001680:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001684:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001688:	ee27 7a06 	vmul.f32	s14, s14, s12
 800168c:	ee29 9a25 	vmul.f32	s18, s18, s11
 8001690:	ee68 8aa5 	vmul.f32	s17, s17, s11
 8001694:	dd59      	ble.n	800174a <calibrateMPU9250+0x376>
		accel_bias[2] -= (int32_t) accelsensitivity;
 8001696:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800169a:	ee08 3a10 	vmov	s16, r3
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_H, data[2]);
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_L, data[5]);
	 */
	dest1[0] = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 800169e:	9b06      	ldr	r3, [sp, #24]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80016a0:	9f04      	ldr	r7, [sp, #16]
	dest1[0] = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 80016a2:	edc3 7a00 	vstr	s15, [r3]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80016a6:	240a      	movs	r4, #10
	dest1[1] = (float) gyro_bias[1] / (float) gyrosensitivity;
 80016a8:	edc3 6a01 	vstr	s13, [r3, #4]
	dest1[2] = (float) gyro_bias[2] / (float) gyrosensitivity;
 80016ac:	ed83 7a02 	vstr	s14, [r3, #8]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80016b0:	463a      	mov	r2, r7
 80016b2:	9400      	str	r4, [sp, #0]
	data_write[0] = subAddress;
 80016b4:	2677      	movs	r6, #119	; 0x77
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80016b6:	2301      	movs	r3, #1
 80016b8:	21d0      	movs	r1, #208	; 0xd0
 80016ba:	4826      	ldr	r0, [pc, #152]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 80016bc:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80016c0:	f001 fc18 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 80016c4:	462a      	mov	r2, r5
 80016c6:	9400      	str	r4, [sp, #0]
 80016c8:	2302      	movs	r3, #2
 80016ca:	21d1      	movs	r1, #209	; 0xd1
 80016cc:	4821      	ldr	r0, [pc, #132]	; (8001754 <calibrateMPU9250+0x380>)
 80016ce:	f001 fd7b 	bl	80031c8 <HAL_I2C_Master_Receive>
	data_write[0] = subAddress;
 80016d2:	267a      	movs	r6, #122	; 0x7a
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80016d4:	463a      	mov	r2, r7
 80016d6:	9400      	str	r4, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	21d0      	movs	r1, #208	; 0xd0
 80016dc:	481d      	ldr	r0, [pc, #116]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 80016de:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80016e2:	f001 fc07 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 80016e6:	462a      	mov	r2, r5
 80016e8:	9400      	str	r4, [sp, #0]
 80016ea:	2302      	movs	r3, #2
 80016ec:	21d1      	movs	r1, #209	; 0xd1
 80016ee:	4819      	ldr	r0, [pc, #100]	; (8001754 <calibrateMPU9250+0x380>)
 80016f0:	f001 fd6a 	bl	80031c8 <HAL_I2C_Master_Receive>
	data_write[0] = subAddress;
 80016f4:	267d      	movs	r6, #125	; 0x7d
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80016f6:	463a      	mov	r2, r7
 80016f8:	9400      	str	r4, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	21d0      	movs	r1, #208	; 0xd0
 80016fe:	4815      	ldr	r0, [pc, #84]	; (8001754 <calibrateMPU9250+0x380>)
	data_write[0] = subAddress;
 8001700:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001704:	f001 fbf6 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001708:	9400      	str	r4, [sp, #0]
 800170a:	462a      	mov	r2, r5
 800170c:	2302      	movs	r3, #2
 800170e:	21d1      	movs	r1, #209	; 0xd1
 8001710:	4810      	ldr	r0, [pc, #64]	; (8001754 <calibrateMPU9250+0x380>)
 8001712:	f001 fd59 	bl	80031c8 <HAL_I2C_Master_Receive>
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_L, data[5]);
	 */
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
	dest2[1] = (float) accel_bias[1] / (float) accelsensitivity;
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 8001716:	eef0 7a48 	vmov.f32	s15, s16
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
 800171a:	9b07      	ldr	r3, [sp, #28]
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 800171c:	eefa 7ac9 	vcvt.f32.s32	s15, s15, #14
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
 8001720:	ed83 9a00 	vstr	s18, [r3]
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 8001724:	edc3 7a02 	vstr	s15, [r3, #8]
	dest2[1] = (float) accel_bias[1] / (float) accelsensitivity;
 8001728:	edc3 8a01 	vstr	s17, [r3, #4]
}
 800172c:	b00f      	add	sp, #60	; 0x3c
 800172e:	ecbd 8b04 	vpop	{d8-d9}
 8001732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (ii = 0; ii < packet_count; ii++) {
 8001736:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8001764 <calibrateMPU9250+0x390>
 800173a:	eeb0 9a67 	vmov.f32	s18, s15
 800173e:	eeb0 7a67 	vmov.f32	s14, s15
 8001742:	eef0 6a67 	vmov.f32	s13, s15
 8001746:	eef0 8a67 	vmov.f32	s17, s15
		accel_bias[2] += (int32_t) accelsensitivity;
 800174a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800174e:	ee08 3a10 	vmov	s16, r3
 8001752:	e7a4      	b.n	800169e <calibrateMPU9250+0x2ca>
 8001754:	200002c8 	.word	0x200002c8
 8001758:	aaaaaaab 	.word	0xaaaaaaab
 800175c:	3bfa232d 	.word	0x3bfa232d
 8001760:	38800000 	.word	0x38800000
 8001764:	00000000 	.word	0x00000000

08001768 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 8001768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800176c:	ed2d 8b0c 	vpush	{d8-d13}
 8001770:	b09d      	sub	sp, #116	; 0x74
	data_write[0] = subAddress;
 8001772:	ab1c      	add	r3, sp, #112	; 0x70
 8001774:	461a      	mov	r2, r3
 8001776:	2319      	movs	r3, #25
 8001778:	f822 3d10 	strh.w	r3, [r2, #-16]!
		{
 800177c:	900d      	str	r0, [sp, #52]	; 0x34
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800177e:	48e0      	ldr	r0, [pc, #896]	; (8001b00 <MPU9250SelfTest+0x398>)
	data_write[0] = subAddress;
 8001780:	9202      	str	r2, [sp, #8]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001782:	240a      	movs	r4, #10
	data_write[0] = subAddress;
 8001784:	4616      	mov	r6, r2
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001786:	4682      	mov	sl, r0
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001788:	9400      	str	r4, [sp, #0]
 800178a:	2302      	movs	r3, #2
 800178c:	21d0      	movs	r1, #208	; 0xd0
 800178e:	f001 fbb1 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 8001792:	f240 251a 	movw	r5, #538	; 0x21a
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001796:	4632      	mov	r2, r6
 8001798:	9400      	str	r4, [sp, #0]
 800179a:	2302      	movs	r3, #2
 800179c:	21d0      	movs	r1, #208	; 0xd0
 800179e:	4650      	mov	r0, sl
	data_write[0] = subAddress;
 80017a0:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80017a4:	f001 fba6 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 80017a8:	f240 151b 	movw	r5, #283	; 0x11b
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80017ac:	4632      	mov	r2, r6
 80017ae:	9400      	str	r4, [sp, #0]
 80017b0:	2302      	movs	r3, #2
 80017b2:	21d0      	movs	r1, #208	; 0xd0
 80017b4:	4650      	mov	r0, sl
	data_write[0] = subAddress;
 80017b6:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80017ba:	f001 fb9b 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 80017be:	f240 251d 	movw	r5, #541	; 0x21d
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80017c2:	4632      	mov	r2, r6
 80017c4:	9400      	str	r4, [sp, #0]
 80017c6:	2302      	movs	r3, #2
 80017c8:	21d0      	movs	r1, #208	; 0xd0
 80017ca:	4650      	mov	r0, sl
	data_write[0] = subAddress;
 80017cc:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80017d0:	f001 fb90 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 80017d4:	9400      	str	r4, [sp, #0]
 80017d6:	4632      	mov	r2, r6
	data_write[0] = subAddress;
 80017d8:	f44f 748e 	mov.w	r4, #284	; 0x11c
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80017dc:	2302      	movs	r3, #2
 80017de:	21d0      	movs	r1, #208	; 0xd0
 80017e0:	4650      	mov	r0, sl
	data_write[0] = subAddress;
 80017e2:	f8ad 4060 	strh.w	r4, [sp, #96]	; 0x60
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80017e6:	f001 fb85 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 80017ea:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 80017ee:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 80017f2:	f9bd 604a 	ldrsh.w	r6, [sp, #74]	; 0x4a
 80017f6:	f9bd 404c 	ldrsh.w	r4, [sp, #76]	; 0x4c
 80017fa:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 80017fe:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8001802:	23c8      	movs	r3, #200	; 0xc8
 8001804:	e9cd 7304 	strd	r7, r3, [sp, #16]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001808:	f04f 090a 	mov.w	r9, #10
	data_write[0] = subAddress;
 800180c:	273b      	movs	r7, #59	; 0x3b
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800180e:	2301      	movs	r3, #1
 8001810:	aa16      	add	r2, sp, #88	; 0x58
 8001812:	21d0      	movs	r1, #208	; 0xd0
 8001814:	f8cd 9000 	str.w	r9, [sp]
 8001818:	4650      	mov	r0, sl
	data_write[0] = subAddress;
 800181a:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800181e:	f001 fb69 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001822:	2306      	movs	r3, #6
 8001824:	9a02      	ldr	r2, [sp, #8]
 8001826:	f8cd 9000 	str.w	r9, [sp]
 800182a:	21d1      	movs	r1, #209	; 0xd1
 800182c:	4650      	mov	r0, sl
 800182e:	f001 fccb 	bl	80031c8 <HAL_I2C_Master_Receive>
		dest[ii] = data[ii];
 8001832:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8001836:	f89d 7062 	ldrb.w	r7, [sp, #98]	; 0x62
 800183a:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800183e:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
 8001842:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63
 8001846:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800184a:	f8cd 9000 	str.w	r9, [sp]

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800184e:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001852:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001856:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800185a:	4488      	add	r8, r1
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800185c:	4416      	add	r6, r2
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800185e:	441c      	add	r4, r3
	data_write[0] = subAddress;
 8001860:	2743      	movs	r7, #67	; 0x43
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001862:	2301      	movs	r3, #1
 8001864:	aa16      	add	r2, sp, #88	; 0x58
 8001866:	21d0      	movs	r1, #208	; 0xd0
 8001868:	4650      	mov	r0, sl
	data_write[0] = subAddress;
 800186a:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800186e:	f001 fb41 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001872:	2306      	movs	r3, #6
 8001874:	9a02      	ldr	r2, [sp, #8]
 8001876:	f8cd 9000 	str.w	r9, [sp]
 800187a:	21d1      	movs	r1, #209	; 0xd1
 800187c:	4650      	mov	r0, sl
 800187e:	f001 fca3 	bl	80031c8 <HAL_I2C_Master_Receive>
		dest[ii] = data[ii];
 8001882:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8001886:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 800188a:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 800188e:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
 8001892:	f89d 7062 	ldrb.w	r7, [sp, #98]	; 0x62
 8001896:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800189a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800189e:	9804      	ldr	r0, [sp, #16]
 80018a0:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 80018a4:	4401      	add	r1, r0
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80018a6:	449b      	add	fp, r3
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80018a8:	b20b      	sxth	r3, r1
 80018aa:	9304      	str	r3, [sp, #16]
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80018ac:	9b05      	ldr	r3, [sp, #20]
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80018ae:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80018b2:	4415      	add	r5, r2
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80018b4:	3b01      	subs	r3, #1
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80018b6:	fa0f f888 	sxth.w	r8, r8
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80018ba:	b236      	sxth	r6, r6
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80018bc:	b224      	sxth	r4, r4
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80018be:	b22d      	sxth	r5, r5
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80018c0:	fa0f fb8b 	sxth.w	fp, fp
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80018c4:	9305      	str	r3, [sp, #20]
 80018c6:	d19f      	bne.n	8001808 <MPU9250SelfTest+0xa0>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
 80018c8:	4b8e      	ldr	r3, [pc, #568]	; (8001b04 <MPU9250SelfTest+0x39c>)
 80018ca:	9f04      	ldr	r7, [sp, #16]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 80018cc:	f8cd 9000 	str.w	r9, [sp]
		aAvg[ii] /= 200;
 80018d0:	fb83 1208 	smull	r1, r2, r3, r8
 80018d4:	ea4f 78e8 	mov.w	r8, r8, asr #31
		gAvg[ii] /= 200;
 80018d8:	fb83 0107 	smull	r0, r1, r3, r7
		aAvg[ii] /= 200;
 80018dc:	ebc8 18a2 	rsb	r8, r8, r2, asr #6
 80018e0:	fb83 c006 	smull	ip, r0, r3, r6
		gAvg[ii] /= 200;
 80018e4:	17ff      	asrs	r7, r7, #31
 80018e6:	fb83 ec05 	smull	lr, ip, r3, r5
		aAvg[ii] /= 200;
 80018ea:	fb83 ae04 	smull	sl, lr, r3, r4
 80018ee:	17e4      	asrs	r4, r4, #31
 80018f0:	ebc4 1eae 	rsb	lr, r4, lr, asr #6
		gAvg[ii] /= 200;
 80018f4:	ebc7 17a1 	rsb	r7, r7, r1, asr #6
		aAvg[ii] /= 200;
 80018f8:	fa0f f488 	sxth.w	r4, r8
 80018fc:	17f6      	asrs	r6, r6, #31
 80018fe:	ebc6 16a0 	rsb	r6, r6, r0, asr #6
 8001902:	940b      	str	r4, [sp, #44]	; 0x2c
		gAvg[ii] /= 200;
 8001904:	17ed      	asrs	r5, r5, #31
 8001906:	b23c      	sxth	r4, r7
 8001908:	ebc5 15ac 	rsb	r5, r5, ip, asr #6
 800190c:	940a      	str	r4, [sp, #40]	; 0x28
		aAvg[ii] /= 200;
 800190e:	b234      	sxth	r4, r6
		gAvg[ii] /= 200;
 8001910:	fb83 3a0b 	smull	r3, sl, r3, fp
		aAvg[ii] /= 200;
 8001914:	9406      	str	r4, [sp, #24]
		gAvg[ii] /= 200;
 8001916:	ea4f 73eb 	mov.w	r3, fp, asr #31
 800191a:	b22c      	sxth	r4, r5
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800191c:	f8dd b008 	ldr.w	fp, [sp, #8]
		gAvg[ii] /= 200;
 8001920:	940c      	str	r4, [sp, #48]	; 0x30
 8001922:	ebc3 1aaa 	rsb	sl, r3, sl, asr #6
		aAvg[ii] /= 200;
 8001926:	fa0f f48e 	sxth.w	r4, lr
	data_write[0] = subAddress;
 800192a:	f24e 0c1c 	movw	ip, #57372	; 0xe01c
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800192e:	465a      	mov	r2, fp
 8001930:	2302      	movs	r3, #2
 8001932:	21d0      	movs	r1, #208	; 0xd0
		aAvg[ii] /= 200;
 8001934:	9407      	str	r4, [sp, #28]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001936:	4872      	ldr	r0, [pc, #456]	; (8001b00 <MPU9250SelfTest+0x398>)
	data_write[0] = subAddress;
 8001938:	f8ad c060 	strh.w	ip, [sp, #96]	; 0x60
		gAvg[ii] /= 200;
 800193c:	fa0f f48a 	sxth.w	r4, sl
 8001940:	9408      	str	r4, [sp, #32]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001942:	f001 fad7 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 8001946:	f24e 041b 	movw	r4, #57371	; 0xe01b
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800194a:	465a      	mov	r2, fp
 800194c:	2302      	movs	r3, #2
 800194e:	f8cd 9000 	str.w	r9, [sp]
 8001952:	21d0      	movs	r1, #208	; 0xd0
 8001954:	486a      	ldr	r0, [pc, #424]	; (8001b00 <MPU9250SelfTest+0x398>)
	data_write[0] = subAddress;
 8001956:	f8ad 4060 	strh.w	r4, [sp, #96]	; 0x60
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 800195a:	f001 facb 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	HAL_Delay(25); // Delay a while to let the device stabilize
 800195e:	2019      	movs	r0, #25
 8001960:	f001 f8a2 	bl	8002aa8 <HAL_Delay>
 8001964:	f9bd 5058 	ldrsh.w	r5, [sp, #88]	; 0x58
 8001968:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800196c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8001b00 <MPU9250SelfTest+0x398>
 8001970:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
 8001974:	f9bd 4052 	ldrsh.w	r4, [sp, #82]	; 0x52
 8001978:	f9bd b05a 	ldrsh.w	fp, [sp, #90]	; 0x5a
 800197c:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	; 0x5c
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001980:	23c8      	movs	r3, #200	; 0xc8
 8001982:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8001986:	4615      	mov	r5, r2
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001988:	f04f 080a 	mov.w	r8, #10
	data_write[0] = subAddress;
 800198c:	273b      	movs	r7, #59	; 0x3b
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800198e:	2301      	movs	r3, #1
 8001990:	aa0f      	add	r2, sp, #60	; 0x3c
 8001992:	21d0      	movs	r1, #208	; 0xd0
 8001994:	f8cd 8000 	str.w	r8, [sp]
 8001998:	4648      	mov	r0, r9
	data_write[0] = subAddress;
 800199a:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800199e:	f001 faa9 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 80019a2:	2306      	movs	r3, #6
 80019a4:	9a02      	ldr	r2, [sp, #8]
 80019a6:	f8cd 8000 	str.w	r8, [sp]
 80019aa:	21d1      	movs	r1, #209	; 0xd1
 80019ac:	4648      	mov	r0, r9
 80019ae:	f001 fc0b 	bl	80031c8 <HAL_I2C_Master_Receive>
		dest[ii] = data[ii];
 80019b2:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 80019b6:	f89d 7062 	ldrb.w	r7, [sp, #98]	; 0x62
 80019ba:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 80019be:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
 80019c2:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63
 80019c6:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80019ca:	f8cd 8000 	str.w	r8, [sp]

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80019ce:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80019d2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80019d6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80019da:	440e      	add	r6, r1
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80019dc:	4414      	add	r4, r2
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80019de:	441d      	add	r5, r3
	data_write[0] = subAddress;
 80019e0:	2743      	movs	r7, #67	; 0x43
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80019e2:	2301      	movs	r3, #1
 80019e4:	aa0f      	add	r2, sp, #60	; 0x3c
 80019e6:	21d0      	movs	r1, #208	; 0xd0
 80019e8:	4648      	mov	r0, r9
	data_write[0] = subAddress;
 80019ea:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80019ee:	f001 fa81 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 80019f2:	2306      	movs	r3, #6
 80019f4:	9a02      	ldr	r2, [sp, #8]
 80019f6:	f8cd 8000 	str.w	r8, [sp]
 80019fa:	21d1      	movs	r1, #209	; 0xd1
 80019fc:	4648      	mov	r0, r9
 80019fe:	f001 fbe3 	bl	80031c8 <HAL_I2C_Master_Receive>
		dest[ii] = data[ii];
 8001a02:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8001a06:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 8001a0a:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8001a0e:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
 8001a12:	f89d 7062 	ldrb.w	r7, [sp, #98]	; 0x62
 8001a16:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001a1a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001a1e:	9805      	ldr	r0, [sp, #20]
 8001a20:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 8001a24:	4401      	add	r1, r0
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001a26:	449a      	add	sl, r3
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001a28:	b20b      	sxth	r3, r1
 8001a2a:	9305      	str	r3, [sp, #20]
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001a2c:	9b04      	ldr	r3, [sp, #16]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001a2e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001a32:	4493      	add	fp, r2
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001a34:	3b01      	subs	r3, #1
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001a36:	b236      	sxth	r6, r6
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001a38:	b224      	sxth	r4, r4
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001a3a:	b22d      	sxth	r5, r5
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001a3c:	fa0f fb8b 	sxth.w	fp, fp
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001a40:	fa0f fa8a 	sxth.w	sl, sl
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001a44:	9304      	str	r3, [sp, #16]
 8001a46:	d19f      	bne.n	8001988 <MPU9250SelfTest+0x220>
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001a48:	9f02      	ldr	r7, [sp, #8]
 8001a4a:	f8cd 8000 	str.w	r8, [sp]
	data_write[0] = subAddress;
 8001a4e:	f04f 0c1c 	mov.w	ip, #28
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001a52:	463a      	mov	r2, r7
 8001a54:	2302      	movs	r3, #2
 8001a56:	21d0      	movs	r1, #208	; 0xd0
 8001a58:	4829      	ldr	r0, [pc, #164]	; (8001b00 <MPU9250SelfTest+0x398>)
 8001a5a:	9509      	str	r5, [sp, #36]	; 0x24
	data_write[0] = subAddress;
 8001a5c:	f8ad c060 	strh.w	ip, [sp, #96]	; 0x60
 8001a60:	9d05      	ldr	r5, [sp, #20]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001a62:	f001 fa47 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	data_write[0] = subAddress;
 8001a66:	f04f 0c1b 	mov.w	ip, #27
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001a6a:	463a      	mov	r2, r7
 8001a6c:	f8cd 8000 	str.w	r8, [sp]
 8001a70:	2302      	movs	r3, #2
 8001a72:	21d0      	movs	r1, #208	; 0xd0
 8001a74:	4822      	ldr	r0, [pc, #136]	; (8001b00 <MPU9250SelfTest+0x398>)
	data_write[0] = subAddress;
 8001a76:	f8ad c060 	strh.w	ip, [sp, #96]	; 0x60
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001a7a:	f001 fa3b 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001a7e:	2019      	movs	r0, #25
 8001a80:	f001 f812 	bl	8002aa8 <HAL_Delay>
	data_write[0] = subAddress;
 8001a84:	f04f 0c0d 	mov.w	ip, #13
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001a88:	f8cd 8000 	str.w	r8, [sp]
 8001a8c:	463a      	mov	r2, r7
 8001a8e:	2301      	movs	r3, #1
 8001a90:	21d0      	movs	r1, #208	; 0xd0
 8001a92:	481b      	ldr	r0, [pc, #108]	; (8001b00 <MPU9250SelfTest+0x398>)
	data_write[0] = subAddress;
 8001a94:	f88d c060 	strb.w	ip, [sp, #96]	; 0x60
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001a98:	f001 fa2c 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8001a9c:	f8cd 8000 	str.w	r8, [sp]
 8001aa0:	aa0f      	add	r2, sp, #60	; 0x3c
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	21d0      	movs	r1, #208	; 0xd0
 8001aa6:	4816      	ldr	r0, [pc, #88]	; (8001b00 <MPU9250SelfTest+0x398>)
 8001aa8:	f001 fb8e 	bl	80031c8 <HAL_I2C_Master_Receive>
	data_write[0] = subAddress;
 8001aac:	f04f 0c0e 	mov.w	ip, #14
 8001ab0:	f88d c060 	strb.w	ip, [sp, #96]	; 0x60
	return data[0];
 8001ab4:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001ab8:	f8cd 8000 	str.w	r8, [sp]
 8001abc:	463a      	mov	r2, r7
 8001abe:	2301      	movs	r3, #1
 8001ac0:	21d0      	movs	r1, #208	; 0xd0
 8001ac2:	480f      	ldr	r0, [pc, #60]	; (8001b00 <MPU9250SelfTest+0x398>)
	return data[0];
 8001ac4:	ee09 ca90 	vmov	s19, ip
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001ac8:	f001 fa14 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8001acc:	f8cd 8000 	str.w	r8, [sp]
 8001ad0:	aa0f      	add	r2, sp, #60	; 0x3c
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	21d0      	movs	r1, #208	; 0xd0
 8001ad6:	480a      	ldr	r0, [pc, #40]	; (8001b00 <MPU9250SelfTest+0x398>)
 8001ad8:	f001 fb76 	bl	80031c8 <HAL_I2C_Master_Receive>
	data_write[0] = subAddress;
 8001adc:	f04f 0c0f 	mov.w	ip, #15
 8001ae0:	f88d c060 	strb.w	ip, [sp, #96]	; 0x60
	return data[0];
 8001ae4:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001ae8:	f8cd 8000 	str.w	r8, [sp]
 8001aec:	463a      	mov	r2, r7
 8001aee:	2301      	movs	r3, #1
 8001af0:	21d0      	movs	r1, #208	; 0xd0
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <MPU9250SelfTest+0x398>)
	return data[0];
 8001af4:	ee08 ca90 	vmov	s17, ip
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001af8:	f001 f9fc 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 8001afc:	e004      	b.n	8001b08 <MPU9250SelfTest+0x3a0>
 8001afe:	bf00      	nop
 8001b00:	200002c8 	.word	0x200002c8
 8001b04:	51eb851f 	.word	0x51eb851f
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8001b08:	f8cd 8000 	str.w	r8, [sp]
 8001b0c:	aa0f      	add	r2, sp, #60	; 0x3c
 8001b0e:	2301      	movs	r3, #1
 8001b10:	21d0      	movs	r1, #208	; 0xd0
 8001b12:	48e3      	ldr	r0, [pc, #908]	; (8001ea0 <MPU9250SelfTest+0x738>)
 8001b14:	f001 fb58 	bl	80031c8 <HAL_I2C_Master_Receive>
	return data[0];
 8001b18:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001b1c:	f8cd 8000 	str.w	r8, [sp]
 8001b20:	2301      	movs	r3, #1
	data_write[0] = subAddress;
 8001b22:	4699      	mov	r9, r3
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001b24:	9702      	str	r7, [sp, #8]
 8001b26:	463a      	mov	r2, r7
 8001b28:	21d0      	movs	r1, #208	; 0xd0
	data_write[0] = subAddress;
 8001b2a:	9f04      	ldr	r7, [sp, #16]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001b2c:	48dc      	ldr	r0, [pc, #880]	; (8001ea0 <MPU9250SelfTest+0x738>)
	data_write[0] = subAddress;
 8001b2e:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60
	return data[0];
 8001b32:	ee08 ca10 	vmov	s16, ip
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001b36:	f001 f9dd 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8001b3a:	f8cd 8000 	str.w	r8, [sp]
 8001b3e:	464b      	mov	r3, r9
 8001b40:	aa0f      	add	r2, sp, #60	; 0x3c
 8001b42:	21d0      	movs	r1, #208	; 0xd0
 8001b44:	48d6      	ldr	r0, [pc, #856]	; (8001ea0 <MPU9250SelfTest+0x738>)
 8001b46:	f001 fb3f 	bl	80031c8 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001b4a:	9f02      	ldr	r7, [sp, #8]
	return data[0];
 8001b4c:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001b50:	f8cd 8000 	str.w	r8, [sp]
 8001b54:	464b      	mov	r3, r9
 8001b56:	463a      	mov	r2, r7
 8001b58:	21d0      	movs	r1, #208	; 0xd0
 8001b5a:	48d1      	ldr	r0, [pc, #836]	; (8001ea0 <MPU9250SelfTest+0x738>)
	data_write[0] = subAddress;
 8001b5c:	f88d 9060 	strb.w	r9, [sp, #96]	; 0x60
	return data[0];
 8001b60:	ee09 ca10 	vmov	s18, ip
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001b64:	f001 f9c6 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8001b68:	f8cd 8000 	str.w	r8, [sp]
 8001b6c:	464b      	mov	r3, r9
 8001b6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8001b70:	21d0      	movs	r1, #208	; 0xd0
 8001b72:	48cb      	ldr	r0, [pc, #812]	; (8001ea0 <MPU9250SelfTest+0x738>)
 8001b74:	f001 fb28 	bl	80031c8 <HAL_I2C_Master_Receive>
	data_write[0] = subAddress;
 8001b78:	f04f 0c02 	mov.w	ip, #2
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001b7c:	f8cd 8000 	str.w	r8, [sp]
 8001b80:	463a      	mov	r2, r7
 8001b82:	464b      	mov	r3, r9
 8001b84:	21d0      	movs	r1, #208	; 0xd0
 8001b86:	48c6      	ldr	r0, [pc, #792]	; (8001ea0 <MPU9250SelfTest+0x738>)
	data_write[0] = subAddress;
 8001b88:	f88d c060 	strb.w	ip, [sp, #96]	; 0x60
	return data[0];
 8001b8c:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8001b90:	f001 f9b0 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8001b94:	464b      	mov	r3, r9
 8001b96:	aa0f      	add	r2, sp, #60	; 0x3c
 8001b98:	f8cd 8000 	str.w	r8, [sp]
 8001b9c:	21d0      	movs	r1, #208	; 0xd0
 8001b9e:	48c0      	ldr	r0, [pc, #768]	; (8001ea0 <MPU9250SelfTest+0x738>)
 8001ba0:	f001 fb12 	bl	80031c8 <HAL_I2C_Master_Receive>
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001ba4:	eef8 7a69 	vcvt.f32.u32	s15, s19
	return data[0];
 8001ba8:	ee0d 7a10 	vmov	s26, r7
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001bac:	ee17 0a90 	vmov	r0, s15
 8001bb0:	f7fe fcd2 	bl	8000558 <__aeabi_f2d>
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4bbb      	ldr	r3, [pc, #748]	; (8001ea4 <MPU9250SelfTest+0x73c>)
 8001bb8:	f7fe fb6e 	bl	8000298 <__aeabi_dsub>
 8001bbc:	ed9f 0bb4 	vldr	d0, [pc, #720]	; 8001e90 <MPU9250SelfTest+0x728>
 8001bc0:	ec41 0b11 	vmov	d1, r0, r1
 8001bc4:	f005 fe56 	bl	8007874 <pow>
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8001bc8:	eef8 7a68 	vcvt.f32.u32	s15, s17
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001bcc:	eeb0 ca40 	vmov.f32	s24, s0
 8001bd0:	eef0 ca60 	vmov.f32	s25, s1
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8001bd4:	ee17 0a90 	vmov	r0, s15
 8001bd8:	f7fe fcbe 	bl	8000558 <__aeabi_f2d>
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4bb1      	ldr	r3, [pc, #708]	; (8001ea4 <MPU9250SelfTest+0x73c>)
 8001be0:	f7fe fb5a 	bl	8000298 <__aeabi_dsub>
 8001be4:	ed9f 0baa 	vldr	d0, [pc, #680]	; 8001e90 <MPU9250SelfTest+0x728>
 8001be8:	ec41 0b11 	vmov	d1, r0, r1
 8001bec:	f005 fe42 	bl	8007874 <pow>
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 8001bf0:	eef8 7a48 	vcvt.f32.u32	s15, s16
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8001bf4:	eeb0 aa40 	vmov.f32	s20, s0
 8001bf8:	eef0 aa60 	vmov.f32	s21, s1
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 8001bfc:	ee17 0a90 	vmov	r0, s15
 8001c00:	f7fe fcaa 	bl	8000558 <__aeabi_f2d>
 8001c04:	2200      	movs	r2, #0
 8001c06:	4ba7      	ldr	r3, [pc, #668]	; (8001ea4 <MPU9250SelfTest+0x73c>)
 8001c08:	f7fe fb46 	bl	8000298 <__aeabi_dsub>
 8001c0c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8001e90 <MPU9250SelfTest+0x728>
 8001c10:	ec41 0b11 	vmov	d1, r0, r1
 8001c14:	f005 fe2e 	bl	8007874 <pow>
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8001c18:	eef8 7a49 	vcvt.f32.u32	s15, s18
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 8001c1c:	eeb0 8a40 	vmov.f32	s16, s0
 8001c20:	eef0 8a60 	vmov.f32	s17, s1
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8001c24:	ee17 0a90 	vmov	r0, s15
 8001c28:	f7fe fc96 	bl	8000558 <__aeabi_f2d>
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4b9d      	ldr	r3, [pc, #628]	; (8001ea4 <MPU9250SelfTest+0x73c>)
 8001c30:	f7fe fb32 	bl	8000298 <__aeabi_dsub>
 8001c34:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8001e90 <MPU9250SelfTest+0x728>
 8001c38:	ec41 0b11 	vmov	d1, r0, r1
 8001c3c:	f005 fe1a 	bl	8007874 <pow>
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8001c40:	eef8 7a4d 	vcvt.f32.u32	s15, s26
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8001c44:	eeb0 ba40 	vmov.f32	s22, s0
 8001c48:	eef0 ba60 	vmov.f32	s23, s1
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8001c4c:	ee17 0a90 	vmov	r0, s15
 8001c50:	f7fe fc82 	bl	8000558 <__aeabi_f2d>
 8001c54:	2200      	movs	r2, #0
 8001c56:	4b93      	ldr	r3, [pc, #588]	; (8001ea4 <MPU9250SelfTest+0x73c>)
	return data[0];
 8001c58:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8001c5c:	f7fe fb1c 	bl	8000298 <__aeabi_dsub>
 8001c60:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8001e90 <MPU9250SelfTest+0x728>
 8001c64:	ec41 0b11 	vmov	d1, r0, r1
 8001c68:	f005 fe04 	bl	8007874 <pow>
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001c6c:	ee07 8a90 	vmov	s15, r8
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8001c70:	eeb0 9a40 	vmov.f32	s18, s0
 8001c74:	eef0 9a60 	vmov.f32	s19, s1
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7c:	ee17 0a90 	vmov	r0, s15
 8001c80:	f7fe fc6a 	bl	8000558 <__aeabi_f2d>
 8001c84:	2200      	movs	r2, #0
 8001c86:	4b87      	ldr	r3, [pc, #540]	; (8001ea4 <MPU9250SelfTest+0x73c>)
 8001c88:	f7fe fb06 	bl	8000298 <__aeabi_dsub>
 8001c8c:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8001e90 <MPU9250SelfTest+0x728>
 8001c90:	ec41 0b11 	vmov	d1, r0, r1
 8001c94:	f005 fdee 	bl	8007874 <pow>
		aSTAvg[ii] /= 200;
 8001c98:	4b83      	ldr	r3, [pc, #524]	; (8001ea8 <MPU9250SelfTest+0x740>)
 8001c9a:	17f0      	asrs	r0, r6, #31
 8001c9c:	461f      	mov	r7, r3
 8001c9e:	fb83 2306 	smull	r2, r3, r3, r6
 8001ca2:	ebc0 10a3 	rsb	r0, r0, r3, asr #6

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001ca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001ca8:	b200      	sxth	r0, r0
 8001caa:	1a80      	subs	r0, r0, r2
 8001cac:	ee07 0a90 	vmov	s15, r0
 8001cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001cb4:	ed8d 0b02 	vstr	d0, [sp, #8]
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001cb8:	ee17 0a90 	vmov	r0, s15
 8001cbc:	f7fe fc4c 	bl	8000558 <__aeabi_f2d>
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	4b7a      	ldr	r3, [pc, #488]	; (8001eac <MPU9250SelfTest+0x744>)
 8001cc4:	f7fe fca0 	bl	8000608 <__aeabi_dmul>
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001cc8:	a373      	add	r3, pc, #460	; (adr r3, 8001e98 <MPU9250SelfTest+0x730>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001cce:	4680      	mov	r8, r0
 8001cd0:	4689      	mov	r9, r1
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001cd2:	ec51 0b1c 	vmov	r0, r1, d12
 8001cd6:	f7fe fc97 	bl	8000608 <__aeabi_dmul>
 8001cda:	f7fe ff6d 	bl	8000bb8 <__aeabi_d2f>
				/ factoryTrim[i]; // Report percent differences
 8001cde:	f7fe fc3b 	bl	8000558 <__aeabi_f2d>
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4649      	mov	r1, r9
 8001ce8:	4640      	mov	r0, r8
 8001cea:	f7fe fdb7 	bl	800085c <__aeabi_ddiv>
 8001cee:	f7fe ff63 	bl	8000bb8 <__aeabi_d2f>
		gSTAvg[ii] /= 200;
 8001cf2:	fb87 3205 	smull	r3, r2, r7, r5
 8001cf6:	17eb      	asrs	r3, r5, #31
 8001cf8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	ee07 3a90 	vmov	s15, r3
		gSTAvg[ii] /= 200;
 8001d06:	463e      	mov	r6, r7
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				/ factoryTrim[i]; // Report percent differences
 8001d0c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001d0e:	6038      	str	r0, [r7, #0]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001d10:	ee17 0a90 	vmov	r0, s15
 8001d14:	f7fe fc20 	bl	8000558 <__aeabi_f2d>
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4b64      	ldr	r3, [pc, #400]	; (8001eac <MPU9250SelfTest+0x744>)
 8001d1c:	f7fe fc74 	bl	8000608 <__aeabi_dmul>
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8001d20:	a35d      	add	r3, pc, #372	; (adr r3, 8001e98 <MPU9250SelfTest+0x730>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001d26:	4680      	mov	r8, r0
 8001d28:	4689      	mov	r9, r1
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8001d2a:	ec51 0b1b 	vmov	r0, r1, d11
 8001d2e:	f7fe fc6b 	bl	8000608 <__aeabi_dmul>
 8001d32:	f7fe ff41 	bl	8000bb8 <__aeabi_d2f>
				/ factoryTrim[i + 3]; // Report percent differences
 8001d36:	f7fe fc0f 	bl	8000558 <__aeabi_f2d>
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4649      	mov	r1, r9
 8001d40:	4640      	mov	r0, r8
 8001d42:	f7fe fd8b 	bl	800085c <__aeabi_ddiv>
 8001d46:	f7fe ff37 	bl	8000bb8 <__aeabi_d2f>
		aSTAvg[ii] /= 200;
 8001d4a:	fb86 3204 	smull	r3, r2, r6, r4
 8001d4e:	17e3      	asrs	r3, r4, #31
 8001d50:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001d54:	9a06      	ldr	r2, [sp, #24]
				/ factoryTrim[i + 3]; // Report percent differences
 8001d56:	60f8      	str	r0, [r7, #12]
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d64:	ee17 0a90 	vmov	r0, s15
 8001d68:	f7fe fbf6 	bl	8000558 <__aeabi_f2d>
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4b4f      	ldr	r3, [pc, #316]	; (8001eac <MPU9250SelfTest+0x744>)
 8001d70:	f7fe fc4a 	bl	8000608 <__aeabi_dmul>
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8001d74:	a348      	add	r3, pc, #288	; (adr r3, 8001e98 <MPU9250SelfTest+0x730>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	460d      	mov	r5, r1
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8001d7e:	ec51 0b1a 	vmov	r0, r1, d10
 8001d82:	f7fe fc41 	bl	8000608 <__aeabi_dmul>
 8001d86:	f7fe ff17 	bl	8000bb8 <__aeabi_d2f>
				/ factoryTrim[i]; // Report percent differences
 8001d8a:	f7fe fbe5 	bl	8000558 <__aeabi_f2d>
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4602      	mov	r2, r0
 8001d92:	4629      	mov	r1, r5
 8001d94:	4620      	mov	r0, r4
 8001d96:	f7fe fd61 	bl	800085c <__aeabi_ddiv>
 8001d9a:	f7fe ff0d 	bl	8000bb8 <__aeabi_d2f>
		gSTAvg[ii] /= 200;
 8001d9e:	fb86 320b 	smull	r3, r2, r6, fp
 8001da2:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8001da6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001daa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				/ factoryTrim[i]; // Report percent differences
 8001dac:	6078      	str	r0, [r7, #4]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dba:	ee17 0a90 	vmov	r0, s15
 8001dbe:	f7fe fbcb 	bl	8000558 <__aeabi_f2d>
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <MPU9250SelfTest+0x744>)
 8001dc6:	f7fe fc1f 	bl	8000608 <__aeabi_dmul>
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8001dca:	a333      	add	r3, pc, #204	; (adr r3, 8001e98 <MPU9250SelfTest+0x730>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	460d      	mov	r5, r1
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8001dd4:	ec51 0b19 	vmov	r0, r1, d9
 8001dd8:	f7fe fc16 	bl	8000608 <__aeabi_dmul>
 8001ddc:	f7fe feec 	bl	8000bb8 <__aeabi_d2f>
				/ factoryTrim[i + 3]; // Report percent differences
 8001de0:	f7fe fbba 	bl	8000558 <__aeabi_f2d>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4620      	mov	r0, r4
 8001dea:	4629      	mov	r1, r5
 8001dec:	f7fe fd36 	bl	800085c <__aeabi_ddiv>
 8001df0:	f7fe fee2 	bl	8000bb8 <__aeabi_d2f>
		aSTAvg[ii] /= 200;
 8001df4:	9909      	ldr	r1, [sp, #36]	; 0x24
				/ factoryTrim[i + 3]; // Report percent differences
 8001df6:	6138      	str	r0, [r7, #16]
		aSTAvg[ii] /= 200;
 8001df8:	460b      	mov	r3, r1
 8001dfa:	fb86 3203 	smull	r3, r2, r6, r3
 8001dfe:	17cb      	asrs	r3, r1, #31
 8001e00:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001e04:	9a07      	ldr	r2, [sp, #28]
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e12:	ee17 0a90 	vmov	r0, s15
 8001e16:	f7fe fb9f 	bl	8000558 <__aeabi_f2d>
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4b23      	ldr	r3, [pc, #140]	; (8001eac <MPU9250SelfTest+0x744>)
 8001e1e:	f7fe fbf3 	bl	8000608 <__aeabi_dmul>
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 8001e22:	a31d      	add	r3, pc, #116	; (adr r3, 8001e98 <MPU9250SelfTest+0x730>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001e28:	4604      	mov	r4, r0
 8001e2a:	460d      	mov	r5, r1
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 8001e2c:	ec51 0b18 	vmov	r0, r1, d8
 8001e30:	f7fe fbea 	bl	8000608 <__aeabi_dmul>
 8001e34:	f7fe fec0 	bl	8000bb8 <__aeabi_d2f>
				/ factoryTrim[i]; // Report percent differences
 8001e38:	f7fe fb8e 	bl	8000558 <__aeabi_f2d>
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4629      	mov	r1, r5
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7fe fd0a 	bl	800085c <__aeabi_ddiv>
 8001e48:	f7fe feb6 	bl	8000bb8 <__aeabi_d2f>
		gSTAvg[ii] /= 200;
 8001e4c:	fb86 320a 	smull	r3, r2, r6, sl
 8001e50:	ea4f 73ea 	mov.w	r3, sl, asr #31
 8001e54:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001e58:	9a08      	ldr	r2, [sp, #32]
				/ factoryTrim[i]; // Report percent differences
 8001e5a:	60b8      	str	r0, [r7, #8]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	ee07 3a90 	vmov	s15, r3
 8001e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e68:	ee17 0a90 	vmov	r0, s15
 8001e6c:	f7fe fb74 	bl	8000558 <__aeabi_f2d>
 8001e70:	2200      	movs	r2, #0
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MPU9250SelfTest+0x744>)
 8001e74:	f7fe fbc8 	bl	8000608 <__aeabi_dmul>
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001e78:	ed9d 0b02 	vldr	d0, [sp, #8]
 8001e7c:	a306      	add	r3, pc, #24	; (adr r3, 8001e98 <MPU9250SelfTest+0x730>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001e82:	4604      	mov	r4, r0
 8001e84:	460d      	mov	r5, r1
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001e86:	ec51 0b10 	vmov	r0, r1, d0
 8001e8a:	f7fe fbbd 	bl	8000608 <__aeabi_dmul>
 8001e8e:	e00f      	b.n	8001eb0 <MPU9250SelfTest+0x748>
 8001e90:	c28f5c29 	.word	0xc28f5c29
 8001e94:	3ff028f5 	.word	0x3ff028f5
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	40a47800 	.word	0x40a47800
 8001ea0:	200002c8 	.word	0x200002c8
 8001ea4:	3ff00000 	.word	0x3ff00000
 8001ea8:	51eb851f 	.word	0x51eb851f
 8001eac:	40590000 	.word	0x40590000
 8001eb0:	f7fe fe82 	bl	8000bb8 <__aeabi_d2f>
				/ factoryTrim[i + 3]; // Report percent differences
 8001eb4:	f7fe fb50 	bl	8000558 <__aeabi_f2d>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe fccc 	bl	800085c <__aeabi_ddiv>
 8001ec4:	f7fe fe78 	bl	8000bb8 <__aeabi_d2f>
 8001ec8:	6178      	str	r0, [r7, #20]
	}

}
 8001eca:	b01d      	add	sp, #116	; 0x74
 8001ecc:	ecbd 8b0c 	vpop	{d8-d13}
 8001ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ed4 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 8001ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed6:	b085      	sub	sp, #20
	data_write[0] = subAddress;
 8001ed8:	aa04      	add	r2, sp, #16
 8001eda:	f248 036b 	movw	r3, #32875	; 0x806b
 8001ede:	f822 3d04 	strh.w	r3, [r2, #-4]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001ee2:	230a      	movs	r3, #10
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 8001ee4:	4c74      	ldr	r4, [pc, #464]	; (80020b8 <imu_calibrate+0x1e4>)
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	21d0      	movs	r1, #208	; 0xd0
 8001eea:	2302      	movs	r3, #2
 8001eec:	4873      	ldr	r0, [pc, #460]	; (80020bc <imu_calibrate+0x1e8>)
	calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8001eee:	4e74      	ldr	r6, [pc, #464]	; (80020c0 <imu_calibrate+0x1ec>)
 8001ef0:	4d74      	ldr	r5, [pc, #464]	; (80020c4 <imu_calibrate+0x1f0>)
	printf("Accelerometer full-scale range = %f  g\n\r", 2.0f*(float)(1<<Ascale));
 8001ef2:	4f75      	ldr	r7, [pc, #468]	; (80020c8 <imu_calibrate+0x1f4>)
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001ef4:	f000 fffe 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001ef8:	2064      	movs	r0, #100	; 0x64
 8001efa:	f000 fdd5 	bl	8002aa8 <HAL_Delay>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7ff fc32 	bl	8001768 <MPU9250SelfTest>
	printf(	"x-axis self test: acceleration trim within : %f of factory value\n\r", SelfTest[0]);
 8001f04:	6820      	ldr	r0, [r4, #0]
 8001f06:	f7fe fb27 	bl	8000558 <__aeabi_f2d>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	486f      	ldr	r0, [pc, #444]	; (80020cc <imu_calibrate+0x1f8>)
 8001f10:	f003 fd30 	bl	8005974 <iprintf>
	printf(
 8001f14:	6860      	ldr	r0, [r4, #4]
 8001f16:	f7fe fb1f 	bl	8000558 <__aeabi_f2d>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	486c      	ldr	r0, [pc, #432]	; (80020d0 <imu_calibrate+0x1fc>)
 8001f20:	f003 fd28 	bl	8005974 <iprintf>
	printf(
 8001f24:	68a0      	ldr	r0, [r4, #8]
 8001f26:	f7fe fb17 	bl	8000558 <__aeabi_f2d>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4869      	ldr	r0, [pc, #420]	; (80020d4 <imu_calibrate+0x200>)
 8001f30:	f003 fd20 	bl	8005974 <iprintf>
	printf("x-axis self test: gyration trim within : %f  of factory value\n\r",
 8001f34:	68e0      	ldr	r0, [r4, #12]
 8001f36:	f7fe fb0f 	bl	8000558 <__aeabi_f2d>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4866      	ldr	r0, [pc, #408]	; (80020d8 <imu_calibrate+0x204>)
 8001f40:	f003 fd18 	bl	8005974 <iprintf>
	printf("y-axis self test: gyration trim within : %f  of factory value\n\r",
 8001f44:	6920      	ldr	r0, [r4, #16]
 8001f46:	f7fe fb07 	bl	8000558 <__aeabi_f2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4863      	ldr	r0, [pc, #396]	; (80020dc <imu_calibrate+0x208>)
 8001f50:	f003 fd10 	bl	8005974 <iprintf>
	printf("z-axis self test: gyration trim within : %f  of factory value\n\r",
 8001f54:	6960      	ldr	r0, [r4, #20]
 8001f56:	f7fe faff 	bl	8000558 <__aeabi_f2d>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4860      	ldr	r0, [pc, #384]	; (80020e0 <imu_calibrate+0x20c>)
 8001f60:	f003 fd08 	bl	8005974 <iprintf>
	calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8001f64:	4630      	mov	r0, r6
 8001f66:	4629      	mov	r1, r5
 8001f68:	f7ff fa34 	bl	80013d4 <calibrateMPU9250>
	printf("x gyro bias = %f\n\r", gyroBias[0]);
 8001f6c:	6830      	ldr	r0, [r6, #0]
 8001f6e:	f7fe faf3 	bl	8000558 <__aeabi_f2d>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	485b      	ldr	r0, [pc, #364]	; (80020e4 <imu_calibrate+0x210>)
 8001f78:	f003 fcfc 	bl	8005974 <iprintf>
	printf("y gyro bias = %f\n\r", gyroBias[1]);
 8001f7c:	6870      	ldr	r0, [r6, #4]
 8001f7e:	f7fe faeb 	bl	8000558 <__aeabi_f2d>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4858      	ldr	r0, [pc, #352]	; (80020e8 <imu_calibrate+0x214>)
 8001f88:	f003 fcf4 	bl	8005974 <iprintf>
	printf("z gyro bias = %f\n\r", gyroBias[2]);
 8001f8c:	68b0      	ldr	r0, [r6, #8]
	printf("Gyroscope full-scale range = %f  deg/s\n\r", 250.0f*(float)(1<<Gscale));
 8001f8e:	4e57      	ldr	r6, [pc, #348]	; (80020ec <imu_calibrate+0x218>)
	printf("z gyro bias = %f\n\r", gyroBias[2]);
 8001f90:	f7fe fae2 	bl	8000558 <__aeabi_f2d>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4855      	ldr	r0, [pc, #340]	; (80020f0 <imu_calibrate+0x21c>)
 8001f9a:	f003 fceb 	bl	8005974 <iprintf>
	printf("x accel bias = %f\n\r", accelBias[0]);
 8001f9e:	6828      	ldr	r0, [r5, #0]
 8001fa0:	f7fe fada 	bl	8000558 <__aeabi_f2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4852      	ldr	r0, [pc, #328]	; (80020f4 <imu_calibrate+0x220>)
 8001faa:	f003 fce3 	bl	8005974 <iprintf>
	printf("y accel bias = %f\n\r", accelBias[1]);
 8001fae:	6868      	ldr	r0, [r5, #4]
 8001fb0:	f7fe fad2 	bl	8000558 <__aeabi_f2d>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	484f      	ldr	r0, [pc, #316]	; (80020f8 <imu_calibrate+0x224>)
 8001fba:	f003 fcdb 	bl	8005974 <iprintf>
	printf("z accel bias = %f\n\r", accelBias[2]);
 8001fbe:	68a8      	ldr	r0, [r5, #8]
 8001fc0:	f7fe faca 	bl	8000558 <__aeabi_f2d>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	484c      	ldr	r0, [pc, #304]	; (80020fc <imu_calibrate+0x228>)
 8001fca:	f003 fcd3 	bl	8005974 <iprintf>
	initMPU9250();
 8001fce:	f7ff f905 	bl	80011dc <initMPU9250>
	initAK8963(magCalibration);
 8001fd2:	484b      	ldr	r0, [pc, #300]	; (8002100 <imu_calibrate+0x22c>)
 8001fd4:	f7ff f87c 	bl	80010d0 <initAK8963>
	printf("Accelerometer full-scale range = %f  g\n\r", 2.0f*(float)(1<<Ascale));
 8001fd8:	783b      	ldrb	r3, [r7, #0]
 8001fda:	2401      	movs	r4, #1
 8001fdc:	fa04 f303 	lsl.w	r3, r4, r3
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fec:	ee17 0a90 	vmov	r0, s15
 8001ff0:	f7fe fab2 	bl	8000558 <__aeabi_f2d>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4842      	ldr	r0, [pc, #264]	; (8002104 <imu_calibrate+0x230>)
 8001ffa:	f003 fcbb 	bl	8005974 <iprintf>
	printf("Gyroscope full-scale range = %f  deg/s\n\r", 250.0f*(float)(1<<Gscale));
 8001ffe:	7833      	ldrb	r3, [r6, #0]
 8002000:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002108 <imu_calibrate+0x234>
 8002004:	409c      	lsls	r4, r3
 8002006:	ee07 4a90 	vmov	s15, r4
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002012:	ee17 0a90 	vmov	r0, s15
 8002016:	f7fe fa9f 	bl	8000558 <__aeabi_f2d>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	483b      	ldr	r0, [pc, #236]	; (800210c <imu_calibrate+0x238>)
 8002020:	f003 fca8 	bl	8005974 <iprintf>
	switch (Ascale) {
 8002024:	783b      	ldrb	r3, [r7, #0]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d807      	bhi.n	800203a <imu_calibrate+0x166>
 800202a:	e8df f003 	tbb	[pc, r3]
 800202e:	3f02      	.short	0x3f02
 8002030:	353a      	.short	0x353a
		aRes = 2.0 / 32768.0;
 8002032:	4b37      	ldr	r3, [pc, #220]	; (8002110 <imu_calibrate+0x23c>)
 8002034:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002038:	601a      	str	r2, [r3, #0]
	switch (Gscale) {
 800203a:	7833      	ldrb	r3, [r6, #0]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d806      	bhi.n	800204e <imu_calibrate+0x17a>
 8002040:	e8df f003 	tbb	[pc, r3]
 8002044:	17222602 	.word	0x17222602
		gRes = 250.0 / 32768.0;
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <imu_calibrate+0x240>)
 800204a:	4a33      	ldr	r2, [pc, #204]	; (8002118 <imu_calibrate+0x244>)
 800204c:	601a      	str	r2, [r3, #0]
	switch (Mscale) {
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <imu_calibrate+0x248>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b1ab      	cbz	r3, 8002080 <imu_calibrate+0x1ac>
 8002054:	2b01      	cmp	r3, #1
 8002056:	d102      	bne.n	800205e <imu_calibrate+0x18a>
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <imu_calibrate+0x24c>)
 800205a:	4a32      	ldr	r2, [pc, #200]	; (8002124 <imu_calibrate+0x250>)
 800205c:	601a      	str	r2, [r3, #0]
	magbias[0] = +470.; // User environmental x-axis correction in milliGauss, should be automatically calculated
 800205e:	4b32      	ldr	r3, [pc, #200]	; (8002128 <imu_calibrate+0x254>)
 8002060:	4832      	ldr	r0, [pc, #200]	; (800212c <imu_calibrate+0x258>)
	magbias[1] = +120.; // User environmental x-axis correction in milliGauss
 8002062:	4933      	ldr	r1, [pc, #204]	; (8002130 <imu_calibrate+0x25c>)
	magbias[2] = +125.; // User environmental x-axis correction in milliGauss
 8002064:	4a33      	ldr	r2, [pc, #204]	; (8002134 <imu_calibrate+0x260>)
	magbias[0] = +470.; // User environmental x-axis correction in milliGauss, should be automatically calculated
 8002066:	6018      	str	r0, [r3, #0]
}
 8002068:	2000      	movs	r0, #0
	magbias[1] = +120.; // User environmental x-axis correction in milliGauss
 800206a:	6059      	str	r1, [r3, #4]
	magbias[2] = +125.; // User environmental x-axis correction in milliGauss
 800206c:	609a      	str	r2, [r3, #8]
}
 800206e:	b005      	add	sp, #20
 8002070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gRes = 2000.0 / 32768.0;
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <imu_calibrate+0x240>)
 8002074:	4a30      	ldr	r2, [pc, #192]	; (8002138 <imu_calibrate+0x264>)
 8002076:	601a      	str	r2, [r3, #0]
	switch (Mscale) {
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <imu_calibrate+0x248>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e9      	bne.n	8002054 <imu_calibrate+0x180>
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <imu_calibrate+0x24c>)
 8002082:	4a2e      	ldr	r2, [pc, #184]	; (800213c <imu_calibrate+0x268>)
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e7ea      	b.n	800205e <imu_calibrate+0x18a>
		gRes = 1000.0 / 32768.0;
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <imu_calibrate+0x240>)
 800208a:	4a2d      	ldr	r2, [pc, #180]	; (8002140 <imu_calibrate+0x26c>)
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e7de      	b.n	800204e <imu_calibrate+0x17a>
		gRes = 500.0 / 32768.0;
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <imu_calibrate+0x240>)
 8002092:	4a2c      	ldr	r2, [pc, #176]	; (8002144 <imu_calibrate+0x270>)
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e7da      	b.n	800204e <imu_calibrate+0x17a>
		aRes = 16.0 / 32768.0;
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <imu_calibrate+0x23c>)
 800209a:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e7cb      	b.n	800203a <imu_calibrate+0x166>
		aRes = 8.0 / 32768.0;
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <imu_calibrate+0x23c>)
 80020a4:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e7c6      	b.n	800203a <imu_calibrate+0x166>
		aRes = 4.0 / 32768.0;
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <imu_calibrate+0x23c>)
 80020ae:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e7c1      	b.n	800203a <imu_calibrate+0x166>
 80020b6:	bf00      	nop
 80020b8:	200002b0 	.word	0x200002b0
 80020bc:	200002c8 	.word	0x200002c8
 80020c0:	20000010 	.word	0x20000010
 80020c4:	20000004 	.word	0x20000004
 80020c8:	2000023c 	.word	0x2000023c
 80020cc:	08009310 	.word	0x08009310
 80020d0:	08009354 	.word	0x08009354
 80020d4:	08009398 	.word	0x08009398
 80020d8:	080093dc 	.word	0x080093dc
 80020dc:	0800941c 	.word	0x0800941c
 80020e0:	0800945c 	.word	0x0800945c
 80020e4:	0800949c 	.word	0x0800949c
 80020e8:	080094b0 	.word	0x080094b0
 80020ec:	2000023d 	.word	0x2000023d
 80020f0:	080094c4 	.word	0x080094c4
 80020f4:	080094d8 	.word	0x080094d8
 80020f8:	080094ec 	.word	0x080094ec
 80020fc:	08009500 	.word	0x08009500
 8002100:	20000258 	.word	0x20000258
 8002104:	08009514 	.word	0x08009514
 8002108:	437a0000 	.word	0x437a0000
 800210c:	08009540 	.word	0x08009540
 8002110:	20000338 	.word	0x20000338
 8002114:	20000344 	.word	0x20000344
 8002118:	3bfa0000 	.word	0x3bfa0000
 800211c:	20000001 	.word	0x20000001
 8002120:	200003a0 	.word	0x200003a0
 8002124:	3fa4d84e 	.word	0x3fa4d84e
 8002128:	20000264 	.word	0x20000264
 800212c:	43eb0000 	.word	0x43eb0000
 8002130:	42f00000 	.word	0x42f00000
 8002134:	42fa0000 	.word	0x42fa0000
 8002138:	3d7a0000 	.word	0x3d7a0000
 800213c:	40a4d84e 	.word	0x40a4d84e
 8002140:	3cfa0000 	.word	0x3cfa0000
 8002144:	3c7a0000 	.word	0x3c7a0000

08002148 <MahonyQuaternionUpdate>:
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8002148:	ee21 7a01 	vmul.f32	s14, s2, s2
		float gz, float mx, float my, float mz) {
 800214c:	b530      	push	{r4, r5, lr}
	norm = sqrt(ax * ax + ay * ay + az * az);
 800214e:	eea0 7aa0 	vfma.f32	s14, s1, s1
		float gz, float mx, float my, float mz) {
 8002152:	ed2d 8b10 	vpush	{d8-d15}
	norm = sqrt(ax * ax + ay * ay + az * az);
 8002156:	eea0 7a00 	vfma.f32	s14, s0, s0
		float gz, float mx, float my, float mz) {
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	eef0 ea41 	vmov.f32	s29, s2
	norm = sqrt(ax * ax + ay * ay + az * az);
 8002160:	ee17 0a10 	vmov	r0, s14
		float gz, float mx, float my, float mz) {
 8002164:	eef0 9a61 	vmov.f32	s19, s3
 8002168:	eef0 aa42 	vmov.f32	s21, s4
 800216c:	eeb0 aa62 	vmov.f32	s20, s5
 8002170:	eeb0 ca43 	vmov.f32	s24, s6
 8002174:	eeb0 9a63 	vmov.f32	s18, s7
 8002178:	eef0 da44 	vmov.f32	s27, s8
 800217c:	eef0 ba60 	vmov.f32	s23, s1
 8002180:	eeb0 ba40 	vmov.f32	s22, s0
	norm = sqrt(ax * ax + ay * ay + az * az);
 8002184:	f7fe f9e8 	bl	8000558 <__aeabi_f2d>
 8002188:	ec41 0b10 	vmov	d0, r0, r1
 800218c:	f005 fce2 	bl	8007b54 <sqrt>
 8002190:	ec51 0b10 	vmov	r0, r1, d0
 8002194:	f7fe fd10 	bl	8000bb8 <__aeabi_d2f>
 8002198:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 800219c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	9001      	str	r0, [sp, #4]
 80021a6:	f000 814b 	beq.w	8002440 <MahonyQuaternionUpdate+0x2f8>
	ax *= norm;
	ay *= norm;
	az *= norm;

	// Normalise magnetometer measurement
	norm = sqrt(mx * mx + my * my + mz * mz);
 80021aa:	ee2d 7aad 	vmul.f32	s14, s27, s27
 80021ae:	eea9 7a09 	vfma.f32	s14, s18, s18
 80021b2:	eeac 7a0c 	vfma.f32	s14, s24, s24
 80021b6:	ee17 0a10 	vmov	r0, s14
 80021ba:	f7fe f9cd 	bl	8000558 <__aeabi_f2d>
 80021be:	ec41 0b10 	vmov	d0, r0, r1
 80021c2:	f005 fcc7 	bl	8007b54 <sqrt>
 80021c6:	ec51 0b10 	vmov	r0, r1, d0
 80021ca:	f7fe fcf5 	bl	8000bb8 <__aeabi_d2f>
 80021ce:	ee07 0a10 	vmov	s14, r0
	if (norm == 0.0f)
 80021d2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	f000 8131 	beq.w	8002440 <MahonyQuaternionUpdate+0x2f8>
	norm = 1.0f / norm;        // use reciprocal for division
 80021de:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
		return; // handle NaN
	norm = 1.0f / norm;        // use reciprocal for division
 80021e2:	eecc 3a87 	vdiv.f32	s7, s25, s14
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 80021e6:	4c98      	ldr	r4, [pc, #608]	; (8002448 <MahonyQuaternionUpdate+0x300>)
 80021e8:	2500      	movs	r5, #0
 80021ea:	ed94 ea01 	vldr	s28, [r4, #4]
 80021ee:	ed94 8a03 	vldr	s16, [r4, #12]
 80021f2:	ed94 da02 	vldr	s26, [r4, #8]
 80021f6:	edd4 8a00 	vldr	s17, [r4]
	norm = 1.0f / norm;        // use reciprocal for division
 80021fa:	eddd 7a01 	vldr	s15, [sp, #4]
	float q4q4 = q4 * q4;
 80021fe:	ee68 5a08 	vmul.f32	s11, s16, s16
	mz *= norm;

	// Reference direction of Earth's magnetic field
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
			+ 2.0f * mz * (q2q4 + q1q3);
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8002202:	ee6e fa4e 	vnmul.f32	s31, s28, s28
	float q2q3 = q2 * q3;
 8002206:	ee2e 6a0d 	vmul.f32	s12, s28, s26
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 800220a:	ee3f 7ae5 	vsub.f32	s14, s31, s11
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 800220e:	eeb6 fa00 	vmov.f32	s30, #96	; 0x3f000000  0.5
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8002212:	eeb0 3a46 	vmov.f32	s6, s12
	my *= norm;
 8002216:	ee69 6a23 	vmul.f32	s13, s18, s7
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 800221a:	eeb1 5a68 	vneg.f32	s10, s17
 800221e:	eeb0 4a65 	vmov.f32	s8, s11
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8002222:	eea8 3a88 	vfma.f32	s6, s17, s16
 8002226:	ee37 7a0f 	vadd.f32	s14, s14, s30
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 800222a:	eea5 6a08 	vfma.f32	s12, s10, s16
 800222e:	eead 4a0d 	vfma.f32	s8, s26, s26
	float q3q4 = q3 * q4;
 8002232:	ee6d 4a08 	vmul.f32	s9, s26, s16
	mx *= norm;
 8002236:	ee2c ca23 	vmul.f32	s24, s24, s7
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 800223a:	ee27 7a26 	vmul.f32	s14, s14, s13
	float q2q4 = q2 * q4;
 800223e:	ee2e 9a08 	vmul.f32	s18, s28, s16
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8002242:	eea3 7a0c 	vfma.f32	s14, s6, s24
			+ 2.0f * mz * (q3q4 - q1q2);
 8002246:	eeb0 3a64 	vmov.f32	s6, s9
	norm = 1.0f / norm;        // use reciprocal for division
 800224a:	ee8c 1aa7 	vdiv.f32	s2, s25, s15
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 800224e:	ee3f 4a44 	vsub.f32	s8, s30, s8
			+ 2.0f * mz * (q3q4 - q1q2);
 8002252:	eea5 3a0e 	vfma.f32	s6, s10, s28
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8002256:	ee66 7a26 	vmul.f32	s15, s12, s13
	mz *= norm;
 800225a:	ee6d daa3 	vmul.f32	s27, s27, s7
			+ 2.0f * mz * (q2q4 + q1q3);
 800225e:	eef0 3a49 	vmov.f32	s7, s18
 8002262:	eee8 3a8d 	vfma.f32	s7, s17, s26
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8002266:	eee4 7a0c 	vfma.f32	s15, s8, s24
			+ 2.0f * mz * (q3q4 - q1q2);
 800226a:	eea3 7a2d 	vfma.f32	s14, s6, s27
			+ 2.0f * mz * (q2q4 + q1q3);
 800226e:	eee3 7aad 	vfma.f32	s15, s7, s27
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8002272:	ee37 7a07 	vadd.f32	s14, s14, s14
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8002276:	ee77 7aa7 	vadd.f32	s15, s15, s15
	bx = sqrt((hx * hx) + (hy * hy));
 800227a:	ee27 7a07 	vmul.f32	s14, s14, s14
	ax *= norm;
 800227e:	ee2b ba01 	vmul.f32	s22, s22, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8002282:	eea7 7aa7 	vfma.f32	s14, s15, s15
	ay *= norm;
 8002286:	ee6b ba81 	vmul.f32	s23, s23, s2
	bx = sqrt((hx * hx) + (hy * hy));
 800228a:	ee17 0a10 	vmov	r0, s14
	az *= norm;
 800228e:	ee6e ea81 	vmul.f32	s29, s29, s2
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8002292:	edcd 5a07 	vstr	s11, [sp, #28]
			+ 2.0f * mz * (q3q4 - q1q2);
 8002296:	edcd 4a06 	vstr	s9, [sp, #24]
 800229a:	ed8d 5a05 	vstr	s10, [sp, #20]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 800229e:	edcd 6a04 	vstr	s13, [sp, #16]
 80022a2:	ed8d 6a03 	vstr	s12, [sp, #12]
 80022a6:	ed8d 4a02 	vstr	s8, [sp, #8]
			+ 2.0f * mz * (q2q4 + q1q3);
 80022aa:	edcd 3a01 	vstr	s7, [sp, #4]
	bx = sqrt((hx * hx) + (hy * hy));
 80022ae:	f7fe f953 	bl	8000558 <__aeabi_f2d>
 80022b2:	ec41 0b10 	vmov	d0, r0, r1
 80022b6:	f005 fc4d 	bl	8007b54 <sqrt>
 80022ba:	ec51 0b10 	vmov	r0, r1, d0
 80022be:	f7fe fc7b 	bl	8000bb8 <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 80022c2:	eddd 4a06 	vldr	s9, [sp, #24]
 80022c6:	ed9d 5a05 	vldr	s10, [sp, #20]
 80022ca:	eddd 6a04 	vldr	s13, [sp, #16]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);

	// Estimated direction of gravity and magnetic field
	vx = 2.0f * (q2q4 - q1q3);
	vy = 2.0f * (q1q2 + q3q4);
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 80022ce:	eddd 5a07 	vldr	s11, [sp, #28]
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 80022d2:	ed9d 4a02 	vldr	s8, [sp, #8]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 80022d6:	eddd 3a01 	vldr	s7, [sp, #4]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 80022da:	ed9d 6a03 	vldr	s12, [sp, #12]

	// Integrate rate of change of quaternion
	pa = q2;
	pb = q3;
	pc = q4;
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 80022de:	4a5b      	ldr	r2, [pc, #364]	; (800244c <MahonyQuaternionUpdate+0x304>)
		eInt[0] = 0.0f;     // prevent integral wind up
 80022e0:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <MahonyQuaternionUpdate+0x308>)
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 80022e2:	eee8 4a8e 	vfma.f32	s9, s17, s28
		eInt[0] = 0.0f;     // prevent integral wind up
 80022e6:	601d      	str	r5, [r3, #0]
		eInt[1] = 0.0f;
 80022e8:	605d      	str	r5, [r3, #4]
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 80022ea:	eef0 7a49 	vmov.f32	s15, s18
 80022ee:	eee5 7a0d 	vfma.f32	s15, s10, s26
		eInt[2] = 0.0f;
 80022f2:	609d      	str	r5, [r3, #8]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 80022f4:	eef1 2a4d 	vneg.f32	s5, s26
 80022f8:	eeb0 5a6f 	vmov.f32	s10, s31
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 80022fc:	ee24 7aa6 	vmul.f32	s14, s9, s13
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8002300:	eea2 5a8d 	vfma.f32	s10, s5, s26
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8002304:	eea7 7a8c 	vfma.f32	s14, s15, s24
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8002308:	ee35 5a0f 	vadd.f32	s10, s10, s30
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 800230c:	eee8 faa8 	vfma.f32	s31, s17, s17
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8002310:	eea5 7a2d 	vfma.f32	s14, s10, s27
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8002314:	eee2 fa8d 	vfma.f32	s31, s5, s26
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8002318:	ee37 7a07 	vadd.f32	s14, s14, s14
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 800231c:	ee7f faa5 	vadd.f32	s31, s31, s11
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8002320:	ee67 2a87 	vmul.f32	s5, s15, s14
	bx = sqrt((hx * hx) + (hy * hy));
 8002324:	ee03 0a10 	vmov	s6, r0
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8002328:	ee65 5a07 	vmul.f32	s11, s10, s14
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 800232c:	eeb0 5a62 	vmov.f32	s10, s5
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8002330:	ee6f 2acb 	vnmul.f32	s5, s31, s22
	vx = 2.0f * (q2q4 - q1q3);
 8002334:	ee77 7aa7 	vadd.f32	s15, s15, s15
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8002338:	eea4 5a03 	vfma.f32	s10, s8, s6
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 800233c:	eee3 5a83 	vfma.f32	s11, s7, s6
	vy = 2.0f * (q1q2 + q3q4);
 8002340:	ee34 4aa4 	vadd.f32	s8, s9, s9
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8002344:	eef0 3a62 	vmov.f32	s7, s5
 8002348:	eeee 3aa7 	vfma.f32	s7, s29, s15
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 800234c:	ee64 ea6e 	vnmul.f32	s29, s8, s29
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8002350:	ee24 7a87 	vmul.f32	s14, s9, s14
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8002354:	ee35 5a05 	vadd.f32	s10, s10, s10
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8002358:	eeeb eaaf 	vfma.f32	s29, s23, s31
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 800235c:	eea6 7a03 	vfma.f32	s14, s12, s6
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8002360:	eeb0 6a63 	vmov.f32	s12, s7
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8002364:	ee75 5aa5 	vadd.f32	s11, s11, s11
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8002368:	eead 6a85 	vfma.f32	s12, s27, s10
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 800236c:	ee67 7aeb 	vnmul.f32	s15, s15, s23
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8002370:	eee6 eaa5 	vfma.f32	s29, s13, s11
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8002374:	eeeb 7a04 	vfma.f32	s15, s22, s8
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8002378:	eeac 6a65 	vfms.f32	s12, s24, s11
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 800237c:	ee37 7a07 	vadd.f32	s14, s14, s14
	gx = gx + Kp * ex + Ki * eInt[0];
 8002380:	eef0 1a69 	vmov.f32	s3, s19
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8002384:	eeec 7a07 	vfma.f32	s15, s24, s14
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8002388:	eeed eac7 	vfms.f32	s29, s27, s14
	gx = gx + Kp * ex + Ki * eInt[0];
 800238c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
	gy = gy + Kp * ey + Ki * eInt[1];
 8002390:	eee6 aa07 	vfma.f32	s21, s12, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8002394:	eee6 7ac5 	vfms.f32	s15, s13, s10
	gx = gx + Kp * ex + Ki * eInt[0];
 8002398:	eeee 1a87 	vfma.f32	s3, s29, s14
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 800239c:	ee6d 6a2a 	vmul.f32	s13, s26, s21
	gz = gz + Kp * ez + Ki * eInt[2];
 80023a0:	eea7 aa87 	vfma.f32	s20, s15, s14
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 80023a4:	eeee 6a21 	vfma.f32	s13, s28, s3
 80023a8:	edd2 7a00 	vldr	s15, [r2]
 80023ac:	eee8 6a0a 	vfma.f32	s13, s16, s20
 80023b0:	ee27 fa8f 	vmul.f32	s30, s15, s30
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 80023b4:	ee28 7a21 	vmul.f32	s14, s16, s3
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 80023b8:	eee6 8acf 	vfms.f32	s17, s13, s30
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 80023bc:	ee6a 7ac8 	vnmul.f32	s15, s21, s16
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 80023c0:	eeae 7a4a 	vfms.f32	s14, s28, s20
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 80023c4:	eeed 7a0a 	vfma.f32	s15, s26, s20
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 80023c8:	eeaa 7aa8 	vfma.f32	s14, s21, s17
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 80023cc:	eee1 7aa8 	vfma.f32	s15, s3, s17
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 80023d0:	eeb0 9a4d 	vmov.f32	s18, s26
 80023d4:	eea7 9a0f 	vfma.f32	s18, s14, s30
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 80023d8:	ee61 1acd 	vnmul.f32	s3, s3, s26
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 80023dc:	eef0 9a4e 	vmov.f32	s19, s28
 80023e0:	eee7 9a8f 	vfma.f32	s19, s15, s30
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 80023e4:	eeee 1a2a 	vfma.f32	s3, s28, s21

	// Normalise quaternion
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 80023e8:	ee69 7a09 	vmul.f32	s15, s18, s18
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 80023ec:	eeea 1a28 	vfma.f32	s3, s20, s17
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 80023f0:	eee9 7aa9 	vfma.f32	s15, s19, s19
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 80023f4:	eea1 8a8f 	vfma.f32	s16, s3, s30
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 80023f8:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80023fc:	eee8 7a08 	vfma.f32	s15, s16, s16
 8002400:	ee17 0a90 	vmov	r0, s15
 8002404:	f7fe f8a8 	bl	8000558 <__aeabi_f2d>
 8002408:	ec41 0b10 	vmov	d0, r0, r1
 800240c:	f005 fba2 	bl	8007b54 <sqrt>
 8002410:	ec51 0b10 	vmov	r0, r1, d0
 8002414:	f7fe fbd0 	bl	8000bb8 <__aeabi_d2f>
	norm = 1.0f / norm;
 8002418:	ee07 0a90 	vmov	s15, r0
 800241c:	eecc 7aa7 	vdiv.f32	s15, s25, s15
	q[0] = q1 * norm;
 8002420:	ee68 8aa7 	vmul.f32	s17, s17, s15
	q[1] = q2 * norm;
 8002424:	ee69 9aa7 	vmul.f32	s19, s19, s15
	q[2] = q3 * norm;
 8002428:	ee29 9a27 	vmul.f32	s18, s18, s15
	q[3] = q4 * norm;
 800242c:	ee28 8a27 	vmul.f32	s16, s16, s15
	q[0] = q1 * norm;
 8002430:	edc4 8a00 	vstr	s17, [r4]
	q[1] = q2 * norm;
 8002434:	edc4 9a01 	vstr	s19, [r4, #4]
	q[2] = q3 * norm;
 8002438:	ed84 9a02 	vstr	s18, [r4, #8]
	q[3] = q4 * norm;
 800243c:	ed84 8a03 	vstr	s16, [r4, #12]

}
 8002440:	b009      	add	sp, #36	; 0x24
 8002442:	ecbd 8b10 	vpop	{d8-d15}
 8002446:	bd30      	pop	{r4, r5, pc}
 8002448:	2000001c 	.word	0x2000001c
 800244c:	20000244 	.word	0x20000244
 8002450:	20000248 	.word	0x20000248
 8002454:	00000000 	.word	0x00000000

08002458 <calc_RollPitchYaw>:
void calc_RollPitchYaw(int counter_value) {
 8002458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800245c:	ed2d 8b06 	vpush	{d8-d10}
 8002460:	b08f      	sub	sp, #60	; 0x3c
	data_write[0] = subAddress;
 8002462:	ac0e      	add	r4, sp, #56	; 0x38
 8002464:	233a      	movs	r3, #58	; 0x3a
 8002466:	f804 3d10 	strb.w	r3, [r4, #-16]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 800246a:	250a      	movs	r5, #10
 800246c:	4622      	mov	r2, r4
 800246e:	2301      	movs	r3, #1
 8002470:	21d0      	movs	r1, #208	; 0xd0
void calc_RollPitchYaw(int counter_value) {
 8002472:	4606      	mov	r6, r0
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8002474:	9500      	str	r5, [sp, #0]
 8002476:	4892      	ldr	r0, [pc, #584]	; (80026c0 <calc_RollPitchYaw+0x268>)
 8002478:	f000 fd3c 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 800247c:	2301      	movs	r3, #1
 800247e:	9500      	str	r5, [sp, #0]
 8002480:	aa08      	add	r2, sp, #32
 8002482:	21d0      	movs	r1, #208	; 0xd0
 8002484:	488e      	ldr	r0, [pc, #568]	; (80026c0 <calc_RollPitchYaw+0x268>)
 8002486:	f000 fe9f 	bl	80031c8 <HAL_I2C_Master_Receive>
	return data[0];
 800248a:	f89d 3020 	ldrb.w	r3, [sp, #32]
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if	 data ready interrupt
 800248e:	07db      	lsls	r3, r3, #31
 8002490:	f100 813e 	bmi.w	8002710 <calc_RollPitchYaw+0x2b8>
 8002494:	498b      	ldr	r1, [pc, #556]	; (80026c4 <calc_RollPitchYaw+0x26c>)
 8002496:	4a8c      	ldr	r2, [pc, #560]	; (80026c8 <calc_RollPitchYaw+0x270>)
 8002498:	4b8c      	ldr	r3, [pc, #560]	; (80026cc <calc_RollPitchYaw+0x274>)
 800249a:	ed91 8a00 	vldr	s16, [r1]
 800249e:	edd2 8a00 	vldr	s17, [r2]
 80024a2:	ed93 9a00 	vldr	s18, [r3]
 80024a6:	4f8a      	ldr	r7, [pc, #552]	; (80026d0 <calc_RollPitchYaw+0x278>)
 80024a8:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8002700 <calc_RollPitchYaw+0x2a8>
 80024ac:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8002704 <calc_RollPitchYaw+0x2ac>
 80024b0:	f8df a254 	ldr.w	sl, [pc, #596]	; 8002708 <calc_RollPitchYaw+0x2b0>
 80024b4:	f8df b254 	ldr.w	fp, [pc, #596]	; 800270c <calc_RollPitchYaw+0x2b4>
 80024b8:	4986      	ldr	r1, [pc, #536]	; (80026d4 <calc_RollPitchYaw+0x27c>)
	deltat = (float) ((Now - lastUpdate) * (1 / (84000000.0f / 65535.0f))); // set integration time by time elapsed since last filter update
 80024ba:	4a87      	ldr	r2, [pc, #540]	; (80026d8 <calc_RollPitchYaw+0x280>)
 80024bc:	eddf 6a87 	vldr	s13, [pc, #540]	; 80026dc <calc_RollPitchYaw+0x284>
 80024c0:	6813      	ldr	r3, [r2, #0]
	sum += deltat;
 80024c2:	4d87      	ldr	r5, [pc, #540]	; (80026e0 <calc_RollPitchYaw+0x288>)
	sumCount++;
 80024c4:	4c87      	ldr	r4, [pc, #540]	; (80026e4 <calc_RollPitchYaw+0x28c>)
	sum += deltat;
 80024c6:	ed95 7a00 	vldr	s14, [r5]
	lastUpdate = Now;
 80024ca:	6016      	str	r6, [r2, #0]
	deltat = (float) ((Now - lastUpdate) * (1 / (84000000.0f / 65535.0f))); // set integration time by time elapsed since last filter update
 80024cc:	1af3      	subs	r3, r6, r3
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sumCount++;
 80024d6:	6822      	ldr	r2, [r4, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 80024d8:	6808      	ldr	r0, [r1, #0]
	deltat = (float) ((Now - lastUpdate) * (1 / (84000000.0f / 65535.0f))); // set integration time by time elapsed since last filter update
 80024da:	4b83      	ldr	r3, [pc, #524]	; (80026e8 <calc_RollPitchYaw+0x290>)
	Now = counter_value;
 80024dc:	4983      	ldr	r1, [pc, #524]	; (80026ec <calc_RollPitchYaw+0x294>)
	deltat = (float) ((Now - lastUpdate) * (1 / (84000000.0f / 65535.0f))); // set integration time by time elapsed since last filter update
 80024de:	ee67 7aa6 	vmul.f32	s15, s15, s13
	sumCount++;
 80024e2:	3201      	adds	r2, #1
	sum += deltat;
 80024e4:	ee37 7a27 	vadd.f32	s14, s14, s15
	deltat = (float) ((Now - lastUpdate) * (1 / (84000000.0f / 65535.0f))); // set integration time by time elapsed since last filter update
 80024e8:	edc3 7a00 	vstr	s15, [r3]
	sum += deltat;
 80024ec:	ed85 7a00 	vstr	s14, [r5]
	sumCount++;
 80024f0:	6022      	str	r2, [r4, #0]
	Now = counter_value;
 80024f2:	600e      	str	r6, [r1, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 80024f4:	f7fe f830 	bl	8000558 <__aeabi_f2d>
 80024f8:	a36b      	add	r3, pc, #428	; (adr r3, 80026a8 <calc_RollPitchYaw+0x250>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f7fe f883 	bl	8000608 <__aeabi_dmul>
 8002502:	f7fe fb59 	bl	8000bb8 <__aeabi_d2f>
 8002506:	9005      	str	r0, [sp, #20]
 8002508:	f8db 0000 	ldr.w	r0, [fp]
	roll *= 180.0 / PI;
 800250c:	4e78      	ldr	r6, [pc, #480]	; (80026f0 <calc_RollPitchYaw+0x298>)
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 800250e:	f7fe f823 	bl	8000558 <__aeabi_f2d>
 8002512:	a365      	add	r3, pc, #404	; (adr r3, 80026a8 <calc_RollPitchYaw+0x250>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f7fe f876 	bl	8000608 <__aeabi_dmul>
 800251c:	f7fe fb4c 	bl	8000bb8 <__aeabi_d2f>
 8002520:	9002      	str	r0, [sp, #8]
 8002522:	f8da 0000 	ldr.w	r0, [sl]
 8002526:	f7fe f817 	bl	8000558 <__aeabi_f2d>
 800252a:	a35f      	add	r3, pc, #380	; (adr r3, 80026a8 <calc_RollPitchYaw+0x250>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fe f86a 	bl	8000608 <__aeabi_dmul>
 8002534:	f7fe fb40 	bl	8000bb8 <__aeabi_d2f>
 8002538:	eeb0 4a49 	vmov.f32	s8, s18
 800253c:	eef0 3a68 	vmov.f32	s7, s17
 8002540:	eeb0 3a48 	vmov.f32	s6, s16
 8002544:	eddd 2a05 	vldr	s5, [sp, #20]
 8002548:	ed9d 2a02 	vldr	s4, [sp, #8]
 800254c:	ed99 1a00 	vldr	s2, [r9]
 8002550:	edd8 0a00 	vldr	s1, [r8]
 8002554:	ed97 0a00 	vldr	s0, [r7]
	yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8002558:	4f66      	ldr	r7, [pc, #408]	; (80026f4 <calc_RollPitchYaw+0x29c>)
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 800255a:	ee01 0a90 	vmov	s3, r0
 800255e:	f7ff fdf3 	bl	8002148 <MahonyQuaternionUpdate>
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8002562:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <calc_RollPitchYaw+0x2a0>)
 8002564:	ed93 aa01 	vldr	s20, [r3, #4]
 8002568:	edd3 8a00 	vldr	s17, [r3]
 800256c:	ed93 8a02 	vldr	s16, [r3, #8]
 8002570:	ed93 9a03 	vldr	s18, [r3, #12]
 8002574:	ee6a 9a0a 	vmul.f32	s19, s20, s20
 8002578:	eef1 aa48 	vneg.f32	s21, s16
 800257c:	eef0 7a69 	vmov.f32	s15, s19
 8002580:	eee8 7aa8 	vfma.f32	s15, s17, s17
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8002584:	eed8 9aa8 	vfnms.f32	s19, s17, s17
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8002588:	eeea 7a88 	vfma.f32	s15, s21, s16
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 800258c:	eeea 9a88 	vfma.f32	s19, s21, s16
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8002590:	eee9 7a49 	vfms.f32	s15, s18, s18
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]),
 8002594:	eee9 9a09 	vfma.f32	s19, s18, s18
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8002598:	ee17 0a90 	vmov	r0, s15
 800259c:	f7fd ffdc 	bl	8000558 <__aeabi_f2d>
 80025a0:	ee68 7a89 	vmul.f32	s15, s17, s18
 80025a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80025a8:	eeea 7a08 	vfma.f32	s15, s20, s16
 80025ac:	ee17 0a90 	vmov	r0, s15
 80025b0:	f7fd ffd2 	bl	8000558 <__aeabi_f2d>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	f7fd fe70 	bl	800029c <__adddf3>
 80025bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80025c0:	ec41 0b10 	vmov	d0, r0, r1
 80025c4:	f005 f954 	bl	8007870 <atan2>
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 80025c8:	ee69 7a4a 	vnmul.f32	s15, s18, s20
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 80025cc:	ec59 8b10 	vmov	r8, r9, d0
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 80025d0:	eee8 7a28 	vfma.f32	s15, s16, s17
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]),
 80025d4:	ee28 8a09 	vmul.f32	s16, s16, s18
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 80025d8:	ee17 0a90 	vmov	r0, s15
 80025dc:	f7fd ffbc 	bl	8000558 <__aeabi_f2d>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	f7fd fe5a 	bl	800029c <__adddf3>
 80025e8:	ec41 0b10 	vmov	d0, r0, r1
 80025ec:	f005 f8e8 	bl	80077c0 <asin>
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]),
 80025f0:	eeaa 8a28 	vfma.f32	s16, s20, s17
 80025f4:	ee19 0a90 	vmov	r0, s19
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 80025f8:	ec5b ab10 	vmov	sl, fp, d0
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]),
 80025fc:	f7fd ffac 	bl	8000558 <__aeabi_f2d>
 8002600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002604:	ee18 0a10 	vmov	r0, s16
 8002608:	f7fd ffa6 	bl	8000558 <__aeabi_f2d>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	f7fd fe44 	bl	800029c <__adddf3>
 8002614:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002618:	ec41 0b10 	vmov	d0, r0, r1
 800261c:	f005 f928 	bl	8007870 <atan2>
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 8002620:	4659      	mov	r1, fp
 8002622:	4650      	mov	r0, sl
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]),
 8002624:	ed8d 0b02 	vstr	d0, [sp, #8]
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 8002628:	f7fe fac6 	bl	8000bb8 <__aeabi_d2f>
	pitch *= 180.0 / PI;
 800262c:	f7fd ff94 	bl	8000558 <__aeabi_f2d>
 8002630:	a31f      	add	r3, pc, #124	; (adr r3, 80026b0 <calc_RollPitchYaw+0x258>)
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	f7fd ffe7 	bl	8000608 <__aeabi_dmul>
 800263a:	f7fe fabd 	bl	8000bb8 <__aeabi_d2f>
 800263e:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <calc_RollPitchYaw+0x2a4>)
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8002640:	4649      	mov	r1, r9
	pitch *= 180.0 / PI;
 8002642:	6018      	str	r0, [r3, #0]
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8002644:	4640      	mov	r0, r8
 8002646:	f7fe fab7 	bl	8000bb8 <__aeabi_d2f>
	yaw *= 180.0 / PI;
 800264a:	f7fd ff85 	bl	8000558 <__aeabi_f2d>
 800264e:	a318      	add	r3, pc, #96	; (adr r3, 80026b0 <calc_RollPitchYaw+0x258>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd ffd8 	bl	8000608 <__aeabi_dmul>
 8002658:	f7fe faae 	bl	8000bb8 <__aeabi_d2f>
	yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 800265c:	f7fd ff7c 	bl	8000558 <__aeabi_f2d>
 8002660:	a315      	add	r3, pc, #84	; (adr r3, 80026b8 <calc_RollPitchYaw+0x260>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	f7fd fe19 	bl	800029c <__adddf3>
 800266a:	f7fe faa5 	bl	8000bb8 <__aeabi_d2f>
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]),
 800266e:	ed9d 0b02 	vldr	d0, [sp, #8]
	yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8002672:	6038      	str	r0, [r7, #0]
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]),
 8002674:	ec51 0b10 	vmov	r0, r1, d0
 8002678:	f7fe fa9e 	bl	8000bb8 <__aeabi_d2f>
	roll *= 180.0 / PI;
 800267c:	f7fd ff6c 	bl	8000558 <__aeabi_f2d>
 8002680:	a30b      	add	r3, pc, #44	; (adr r3, 80026b0 <calc_RollPitchYaw+0x258>)
 8002682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002686:	f7fd ffbf 	bl	8000608 <__aeabi_dmul>
 800268a:	f7fe fa95 	bl	8000bb8 <__aeabi_d2f>
	sum = 0;
 800268e:	2200      	movs	r2, #0
	sumCount = 0;
 8002690:	2300      	movs	r3, #0
	roll *= 180.0 / PI;
 8002692:	6030      	str	r0, [r6, #0]
	sum = 0;
 8002694:	602a      	str	r2, [r5, #0]
	sumCount = 0;
 8002696:	6023      	str	r3, [r4, #0]
}
 8002698:	b00f      	add	sp, #60	; 0x3c
 800269a:	ecbd 8b06 	vpop	{d8-d10}
 800269e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026a2:	bf00      	nop
 80026a4:	f3af 8000 	nop.w
 80026a8:	a2529d39 	.word	0xa2529d39
 80026ac:	3f91df46 	.word	0x3f91df46
 80026b0:	1a63c1f8 	.word	0x1a63c1f8
 80026b4:	404ca5dc 	.word	0x404ca5dc
 80026b8:	9999999a 	.word	0x9999999a
 80026bc:	3ff19999 	.word	0x3ff19999
 80026c0:	200002c8 	.word	0x200002c8
 80026c4:	20000330 	.word	0x20000330
 80026c8:	200003ac 	.word	0x200003ac
 80026cc:	20000348 	.word	0x20000348
 80026d0:	20000334 	.word	0x20000334
 80026d4:	20000340 	.word	0x20000340
 80026d8:	20000254 	.word	0x20000254
 80026dc:	3a4c84e6 	.word	0x3a4c84e6
 80026e0:	20000270 	.word	0x20000270
 80026e4:	20000274 	.word	0x20000274
 80026e8:	20000244 	.word	0x20000244
 80026ec:	20000240 	.word	0x20000240
 80026f0:	2000039c 	.word	0x2000039c
 80026f4:	2000034c 	.word	0x2000034c
 80026f8:	2000001c 	.word	0x2000001c
 80026fc:	20000398 	.word	0x20000398
 8002700:	200003a8 	.word	0x200003a8
 8002704:	20000320 	.word	0x20000320
 8002708:	200003a4 	.word	0x200003a4
 800270c:	2000031c 	.word	0x2000031c
	data_write[0] = subAddress;
 8002710:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8002714:	233b      	movs	r3, #59	; 0x3b
 8002716:	f80a 3d1c 	strb.w	r3, [sl, #-28]!
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800271a:	21d0      	movs	r1, #208	; 0xd0
 800271c:	4652      	mov	r2, sl
 800271e:	9500      	str	r5, [sp, #0]
 8002720:	2301      	movs	r3, #1
 8002722:	4876      	ldr	r0, [pc, #472]	; (80028fc <calc_RollPitchYaw+0x4a4>)
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 8002724:	4f76      	ldr	r7, [pc, #472]	; (8002900 <calc_RollPitchYaw+0x4a8>)
		ay = (float) accelCount[1] * aRes - accelBias[1];
 8002726:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8002934 <calc_RollPitchYaw+0x4dc>
		az = (float) accelCount[2] * aRes - accelBias[2];
 800272a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8002938 <calc_RollPitchYaw+0x4e0>
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800272e:	f000 fbe1 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8002732:	4622      	mov	r2, r4
 8002734:	9500      	str	r5, [sp, #0]
 8002736:	2306      	movs	r3, #6
 8002738:	21d1      	movs	r1, #209	; 0xd1
 800273a:	4870      	ldr	r0, [pc, #448]	; (80028fc <calc_RollPitchYaw+0x4a4>)
 800273c:	f000 fd44 	bl	80031c8 <HAL_I2C_Master_Receive>
 8002740:	e894 0003 	ldmia.w	r4, {r0, r1}
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8002744:	b2c3      	uxtb	r3, r0
 8002746:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800274a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 800274e:	4b6d      	ldr	r3, [pc, #436]	; (8002904 <calc_RollPitchYaw+0x4ac>)
 8002750:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 800293c <calc_RollPitchYaw+0x4e4>
		az = (float) accelCount[2] * aRes - accelBias[2];
 8002754:	ed93 7a02 	vldr	s14, [r3, #8]
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 8002758:	ed93 6a00 	vldr	s12, [r3]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 800275c:	edd3 6a01 	vldr	s13, [r3, #4]
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 8002760:	eddc 5a00 	vldr	s11, [ip]
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8002764:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 8002940 <calc_RollPitchYaw+0x4e8>
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8002768:	9500      	str	r5, [sp, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800276a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800276e:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8002772:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
 8002776:	fa0f fb8b 	sxth.w	fp, fp
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800277a:	b2cb      	uxtb	r3, r1
 800277c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
		ay = (float) accelCount[1] * aRes - accelBias[1];
 8002780:	ee05 ba10 	vmov	s10, fp
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8002784:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
 8002788:	fa0f fc8c 	sxth.w	ip, ip
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800278c:	b212      	sxth	r2, r2
		ay = (float) accelCount[1] * aRes - accelBias[1];
 800278e:	eef8 4ac5 	vcvt.f32.s32	s9, s10
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8002792:	ee07 2a90 	vmov	s15, r2
		az = (float) accelCount[2] * aRes - accelBias[2];
 8002796:	ee05 ca10 	vmov	s10, ip
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 800279a:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
		az = (float) accelCount[2] * aRes - accelBias[2];
 800279e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80027a2:	ee17 3a90 	vmov	r3, s15
		az = (float) accelCount[2] * aRes - accelBias[2];
 80027a6:	eef0 7a47 	vmov.f32	s15, s14
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 80027aa:	ee94 6a25 	vfnms.f32	s12, s8, s11
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80027ae:	f8ae 3000 	strh.w	r3, [lr]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80027b2:	f8ae b002 	strh.w	fp, [lr, #2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 80027b6:	eed5 6aa4 	vfnms.f32	s13, s11, s9
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80027ba:	f8ae c004 	strh.w	ip, [lr, #4]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80027be:	4652      	mov	r2, sl
		az = (float) accelCount[2] * aRes - accelBias[2];
 80027c0:	eed5 7a85 	vfnms.f32	s15, s11, s10
 80027c4:	9008      	str	r0, [sp, #32]
 80027c6:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 80027ca:	ed87 6a00 	vstr	s12, [r7]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 80027ce:	edc8 6a00 	vstr	s13, [r8]
		az = (float) accelCount[2] * aRes - accelBias[2];
 80027d2:	edc9 7a00 	vstr	s15, [r9]
	data_write[0] = subAddress;
 80027d6:	f04f 0a43 	mov.w	sl, #67	; 0x43
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80027da:	2301      	movs	r3, #1
 80027dc:	21d0      	movs	r1, #208	; 0xd0
 80027de:	4847      	ldr	r0, [pc, #284]	; (80028fc <calc_RollPitchYaw+0x4a4>)
	data_write[0] = subAddress;
 80027e0:	f88d a01c 	strb.w	sl, [sp, #28]
	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 80027e4:	f000 fb86 	bl	8002ef4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 80027e8:	4622      	mov	r2, r4
 80027ea:	9500      	str	r5, [sp, #0]
 80027ec:	2306      	movs	r3, #6
 80027ee:	21d1      	movs	r1, #209	; 0xd1
 80027f0:	4842      	ldr	r0, [pc, #264]	; (80028fc <calc_RollPitchYaw+0x4a4>)
		readMagData(magCount);  // Read the x/y/z adc values
 80027f2:	4d45      	ldr	r5, [pc, #276]	; (8002908 <calc_RollPitchYaw+0x4b0>)
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 80027f4:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8002944 <calc_RollPitchYaw+0x4ec>
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 80027f8:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8002948 <calc_RollPitchYaw+0x4f0>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 80027fc:	f000 fce4 	bl	80031c8 <HAL_I2C_Master_Receive>
 8002800:	e894 0003 	ldmia.w	r4, {r0, r1}
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8002804:	b2c3      	uxtb	r3, r0
 8002806:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800280a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 800280e:	4b3f      	ldr	r3, [pc, #252]	; (800290c <calc_RollPitchYaw+0x4b4>)
 8002810:	9008      	str	r0, [sp, #32]
 8002812:	edd3 6a00 	vldr	s13, [r3]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8002816:	ed93 7a01 	vldr	s14, [r3, #4]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 800281a:	edd3 7a02 	vldr	s15, [r3, #8]
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 800281e:	4a3c      	ldr	r2, [pc, #240]	; (8002910 <calc_RollPitchYaw+0x4b8>)
 8002820:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8002824:	f3c0 4307 	ubfx	r3, r0, #16, #8
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8002828:	b224      	sxth	r4, r4
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800282a:	0e00      	lsrs	r0, r0, #24
 800282c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8002830:	ee05 4a90 	vmov	s11, r4
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8002834:	fa5f fc81 	uxtb.w	ip, r1
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8002838:	b200      	sxth	r0, r0
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800283a:	f3c1 2307 	ubfx	r3, r1, #8, #8
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 800283e:	eef8 4ae5 	vcvt.f32.s32	s9, s11
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8002842:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8002846:	ee05 0a90 	vmov	s11, r0
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800284a:	b21b      	sxth	r3, r3
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 800284c:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8002850:	ee05 3a90 	vmov	s11, r3
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8002854:	ed92 6a00 	vldr	s12, [r2]
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8002858:	4a2e      	ldr	r2, [pc, #184]	; (8002914 <calc_RollPitchYaw+0x4bc>)
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 800285a:	492f      	ldr	r1, [pc, #188]	; (8002918 <calc_RollPitchYaw+0x4c0>)
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800285c:	8050      	strh	r0, [r2, #2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 800285e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8002862:	eed4 6a86 	vfnms.f32	s13, s9, s12
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8002866:	8093      	strh	r3, [r2, #4]
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8002868:	8014      	strh	r4, [r2, #0]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 800286a:	ee96 7a05 	vfnms.f32	s14, s12, s10
		readMagData(magCount);  // Read the x/y/z adc values
 800286e:	4628      	mov	r0, r5
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8002870:	9102      	str	r1, [sp, #8]
 8002872:	eed6 7a25 	vfnms.f32	s15, s12, s11
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8002876:	edca 6a00 	vstr	s13, [sl]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 800287a:	edc1 7a00 	vstr	s15, [r1]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 800287e:	ed8b 7a00 	vstr	s14, [fp]
		readMagData(magCount);  // Read the x/y/z adc values
 8002882:	f7fe fbd7 	bl	8001034 <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 8002886:	4a25      	ldr	r2, [pc, #148]	; (800291c <calc_RollPitchYaw+0x4c4>)
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <calc_RollPitchYaw+0x4c8>)
 800288a:	ed92 5a00 	vldr	s10, [r2]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 800288e:	ed92 6a01 	vldr	s12, [r2, #4]
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 8002892:	edd2 4a02 	vldr	s9, [r2, #8]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 8002896:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 800289a:	f9b5 1000 	ldrsh.w	r1, [r5]
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <calc_RollPitchYaw+0x4cc>)
 80028a4:	4820      	ldr	r0, [pc, #128]	; (8002928 <calc_RollPitchYaw+0x4d0>)
 80028a6:	edd3 8a00 	vldr	s17, [r3]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80028aa:	ed93 8a01 	vldr	s16, [r3, #4]
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80028ae:	ed93 9a02 	vldr	s18, [r3, #8]
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <calc_RollPitchYaw+0x4d4>)
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80028b4:	ee06 2a90 	vmov	s13, r2
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80028b8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 80028bc:	ee05 1a90 	vmov	s11, r1
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80028c0:	ee07 2a10 	vmov	s14, r2
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 80028c4:	ee27 5a85 	vmul.f32	s10, s15, s10
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80028c8:	ee27 6a86 	vmul.f32	s12, s15, s12
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 80028cc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80028d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80028d4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80028d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 80028dc:	eed5 8a25 	vfnms.f32	s17, s10, s11
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80028e0:	4a13      	ldr	r2, [pc, #76]	; (8002930 <calc_RollPitchYaw+0x4d8>)
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80028e2:	9902      	ldr	r1, [sp, #8]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80028e4:	ee96 8a26 	vfnms.f32	s16, s12, s13
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80028e8:	ee97 9a27 	vfnms.f32	s18, s14, s15
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 80028ec:	edc0 8a00 	vstr	s17, [r0]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80028f0:	ed82 8a00 	vstr	s16, [r2]
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80028f4:	ed83 9a00 	vstr	s18, [r3]
 80028f8:	e5df      	b.n	80024ba <calc_RollPitchYaw+0x62>
 80028fa:	bf00      	nop
 80028fc:	200002c8 	.word	0x200002c8
 8002900:	20000334 	.word	0x20000334
 8002904:	20000004 	.word	0x20000004
 8002908:	20000350 	.word	0x20000350
 800290c:	20000010 	.word	0x20000010
 8002910:	20000344 	.word	0x20000344
 8002914:	20000328 	.word	0x20000328
 8002918:	20000340 	.word	0x20000340
 800291c:	20000258 	.word	0x20000258
 8002920:	200003a0 	.word	0x200003a0
 8002924:	20000264 	.word	0x20000264
 8002928:	200003ac 	.word	0x200003ac
 800292c:	20000348 	.word	0x20000348
 8002930:	20000330 	.word	0x20000330
 8002934:	200003a8 	.word	0x200003a8
 8002938:	20000320 	.word	0x20000320
 800293c:	20000338 	.word	0x20000338
 8002940:	200002a8 	.word	0x200002a8
 8002944:	200003a4 	.word	0x200003a4
 8002948:	2000031c 	.word	0x2000031c

0800294c <pid_calculate_roll>:
float roll_last_d_error = 0;

int now = 0;
int last_update = 0;

float pid_calculate_roll(float IMU_roll_value, int timer_value) {
 800294c:	b4f0      	push	{r4, r5, r6, r7}


	//Derivative component
	now = timer_value;
	//Elaspsed time in seconds from counter value = (ticks) * (1/ (timer clk freq / prescaler value))
	float elapsed_time  = (float) ((now - last_update) * (1 / (84000000.0f / 65535.0f)));
 800294e:	4c21      	ldr	r4, [pc, #132]	; (80029d4 <pid_calculate_roll+0x88>)
	roll_error = IMU_roll_value - roll_setpoint;
 8002950:	4a21      	ldr	r2, [pc, #132]	; (80029d8 <pid_calculate_roll+0x8c>)
	float elapsed_time  = (float) ((now - last_update) * (1 / (84000000.0f / 65535.0f)));
 8002952:	6823      	ldr	r3, [r4, #0]
	roll_error = IMU_roll_value - roll_setpoint;
 8002954:	edd2 7a00 	vldr	s15, [r2]
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / elapsed_time);
 8002958:	4920      	ldr	r1, [pc, #128]	; (80029dc <pid_calculate_roll+0x90>)
	float elapsed_time  = (float) ((now - last_update) * (1 / (84000000.0f / 65535.0f)));
 800295a:	ed9f 6a21 	vldr	s12, [pc, #132]	; 80029e0 <pid_calculate_roll+0x94>
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / elapsed_time);
 800295e:	edd1 6a00 	vldr	s13, [r1]
	last_update = now;
	roll_last_d_error = roll_error;


	//Integral, error over time
	roll_i += (roll_i_gain*roll_error);
 8002962:	4a20      	ldr	r2, [pc, #128]	; (80029e4 <pid_calculate_roll+0x98>)
 8002964:	4f20      	ldr	r7, [pc, #128]	; (80029e8 <pid_calculate_roll+0x9c>)
	roll_p = roll_p_gain*roll_error;
 8002966:	4e21      	ldr	r6, [pc, #132]	; (80029ec <pid_calculate_roll+0xa0>)
	roll_i += (roll_i_gain*roll_error);
 8002968:	edd7 5a00 	vldr	s11, [r7]
	now = timer_value;
 800296c:	4d20      	ldr	r5, [pc, #128]	; (80029f0 <pid_calculate_roll+0xa4>)
	last_update = now;
 800296e:	6020      	str	r0, [r4, #0]
	float elapsed_time  = (float) ((now - last_update) * (1 / (84000000.0f / 65535.0f)));
 8002970:	1ac3      	subs	r3, r0, r3
 8002972:	ee07 3a10 	vmov	s14, r3
	roll_error = IMU_roll_value - roll_setpoint;
 8002976:	ee70 7a67 	vsub.f32	s15, s0, s15
	float elapsed_time  = (float) ((now - last_update) * (1 / (84000000.0f / 65535.0f)));
 800297a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / elapsed_time);
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <pid_calculate_roll+0xa8>)
	now = timer_value;
 8002980:	6028      	str	r0, [r5, #0]
	float elapsed_time  = (float) ((now - last_update) * (1 / (84000000.0f / 65535.0f)));
 8002982:	ee27 7a06 	vmul.f32	s14, s14, s12
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / elapsed_time);
 8002986:	ee37 6ae6 	vsub.f32	s12, s15, s13
	roll_i += (roll_i_gain*roll_error);
 800298a:	edd2 6a00 	vldr	s13, [r2]
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / elapsed_time);
 800298e:	4d1a      	ldr	r5, [pc, #104]	; (80029f8 <pid_calculate_roll+0xac>)
//		roll_i_mem = roll_p_gain_max;
//	else if (roll_i_mem < roll_p_gain_max * -1)
//		roll_i_mem = roll_p_gain_max * -1;

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8002990:	4c1a      	ldr	r4, [pc, #104]	; (80029fc <pid_calculate_roll+0xb0>)
	roll_p = roll_p_gain*roll_error;
 8002992:	481b      	ldr	r0, [pc, #108]	; (8002a00 <pid_calculate_roll+0xb4>)
	roll_last_d_error = roll_error;
 8002994:	edc1 7a00 	vstr	s15, [r1]
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / elapsed_time);
 8002998:	ee86 0a07 	vdiv.f32	s0, s12, s14
	roll_i += (roll_i_gain*roll_error);
 800299c:	eee7 6aa5 	vfma.f32	s13, s15, s11
	roll_p = roll_p_gain*roll_error;
 80029a0:	ed96 7a00 	vldr	s14, [r6]
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / elapsed_time);
 80029a4:	ed93 6a00 	vldr	s12, [r3]
	roll_error = IMU_roll_value - roll_setpoint;
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <pid_calculate_roll+0xb8>)
	roll_i += (roll_i_gain*roll_error);
 80029aa:	edc2 6a00 	vstr	s13, [r2]
	roll_p = roll_p_gain*roll_error;
 80029ae:	ee27 7a87 	vmul.f32	s14, s15, s14
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / elapsed_time);
 80029b2:	ee20 6a06 	vmul.f32	s12, s0, s12
	roll_output = roll_p + roll_i + roll_d;
 80029b6:	ee37 0a26 	vadd.f32	s0, s14, s13
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / elapsed_time);
 80029ba:	ed85 6a00 	vstr	s12, [r5]
	roll_output = roll_p + roll_i + roll_d;
 80029be:	ee30 0a06 	vadd.f32	s0, s0, s12
	roll_p = roll_p_gain*roll_error;
 80029c2:	ed80 7a00 	vstr	s14, [r0]
	roll_output = roll_p + roll_i + roll_d;
 80029c6:	ed84 0a00 	vstr	s0, [r4]
	roll_error = IMU_roll_value - roll_setpoint;
 80029ca:	edc3 7a00 	vstr	s15, [r3]
//		roll_p_gain_max = roll_p_gain_max * -1;


	return roll_output;

}
 80029ce:	bcf0      	pop	{r4, r5, r6, r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000278 	.word	0x20000278
 80029d8:	20000294 	.word	0x20000294
 80029dc:	2000028c 	.word	0x2000028c
 80029e0:	3a4c84e6 	.word	0x3a4c84e6
 80029e4:	200003c4 	.word	0x200003c4
 80029e8:	20000288 	.word	0x20000288
 80029ec:	2000002c 	.word	0x2000002c
 80029f0:	2000027c 	.word	0x2000027c
 80029f4:	20000280 	.word	0x20000280
 80029f8:	200003b0 	.word	0x200003b0
 80029fc:	20000290 	.word	0x20000290
 8002a00:	200003c0 	.word	0x200003c0
 8002a04:	20000284 	.word	0x20000284

08002a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a08:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <HAL_InitTick+0x3c>)
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_InitTick+0x40>)
 8002a0e:	7812      	ldrb	r2, [r2, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
{
 8002a12:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a18:	fbb0 f0f2 	udiv	r0, r0, r2
 8002a1c:	fbb3 f0f0 	udiv	r0, r3, r0
 8002a20:	f000 f8aa 	bl	8002b78 <HAL_SYSTICK_Config>
 8002a24:	b908      	cbnz	r0, 8002a2a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a26:	2d0f      	cmp	r5, #15
 8002a28:	d901      	bls.n	8002a2e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002a2a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002a2c:	bd38      	pop	{r3, r4, r5, pc}
 8002a2e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a30:	4602      	mov	r2, r0
 8002a32:	4629      	mov	r1, r5
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a38:	f000 f85a 	bl	8002af0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <HAL_InitTick+0x44>)
 8002a3e:	4620      	mov	r0, r4
 8002a40:	601d      	str	r5, [r3, #0]
}
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
 8002a44:	20000030 	.word	0x20000030
 8002a48:	20000048 	.word	0x20000048
 8002a4c:	20000034 	.word	0x20000034

08002a50 <HAL_Init>:
{
 8002a50:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_Init+0x30>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a5a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a62:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	f000 f82d 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7ff ffc8 	bl	8002a08 <HAL_InitTick>
  HAL_MspInit();
 8002a78:	f002 f92c 	bl	8004cd4 <HAL_MspInit>
}
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	bd08      	pop	{r3, pc}
 8002a80:	40023c00 	.word	0x40023c00

08002a84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a84:	4a03      	ldr	r2, [pc, #12]	; (8002a94 <HAL_IncTick+0x10>)
 8002a86:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_IncTick+0x14>)
 8002a88:	6811      	ldr	r1, [r2, #0]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	440b      	add	r3, r1
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	200003c8 	.word	0x200003c8
 8002a98:	20000030 	.word	0x20000030

08002a9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a9c:	4b01      	ldr	r3, [pc, #4]	; (8002aa4 <HAL_GetTick+0x8>)
 8002a9e:	6818      	ldr	r0, [r3, #0]
}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	200003c8 	.word	0x200003c8

08002aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff fff6 	bl	8002a9c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002ab2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002ab4:	d002      	beq.n	8002abc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <HAL_Delay+0x20>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	1b40      	subs	r0, r0, r5
 8002ac2:	42a0      	cmp	r0, r4
 8002ac4:	d3fa      	bcc.n	8002abc <HAL_Delay+0x14>
  {
  }
}
 8002ac6:	bd38      	pop	{r3, r4, r5, pc}
 8002ac8:	20000030 	.word	0x20000030

08002acc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002acc:	4a07      	ldr	r2, [pc, #28]	; (8002aec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002ace:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8002ad4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad6:	0200      	lsls	r0, r0, #8
 8002ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002adc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002ae4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002ae6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_NVIC_SetPriority+0x64>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002afa:	f1c3 0507 	rsb	r5, r3, #7
 8002afe:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b00:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b04:	bf28      	it	cs
 8002b06:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b08:	2c06      	cmp	r4, #6
 8002b0a:	d919      	bls.n	8002b40 <HAL_NVIC_SetPriority+0x50>
 8002b0c:	3b03      	subs	r3, #3
 8002b0e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b12:	409c      	lsls	r4, r3
 8002b14:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b1c:	40aa      	lsls	r2, r5
 8002b1e:	ea21 0102 	bic.w	r1, r1, r2
 8002b22:	fa01 f203 	lsl.w	r2, r1, r3
 8002b26:	4322      	orrs	r2, r4
 8002b28:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	db0a      	blt.n	8002b46 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002b34:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b38:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b3c:	bc30      	pop	{r4, r5}
 8002b3e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b40:	2400      	movs	r4, #0
 8002b42:	4623      	mov	r3, r4
 8002b44:	e7e8      	b.n	8002b18 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <HAL_NVIC_SetPriority+0x68>)
 8002b48:	f000 000f 	and.w	r0, r0, #15
 8002b4c:	4403      	add	r3, r0
 8002b4e:	761a      	strb	r2, [r3, #24]
 8002b50:	bc30      	pop	{r4, r5}
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00
 8002b58:	e000ecfc 	.word	0xe000ecfc

08002b5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	db07      	blt.n	8002b70 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b60:	f000 011f 	and.w	r1, r0, #31
 8002b64:	2301      	movs	r3, #1
 8002b66:	0940      	lsrs	r0, r0, #5
 8002b68:	4a02      	ldr	r2, [pc, #8]	; (8002b74 <HAL_NVIC_EnableIRQ+0x18>)
 8002b6a:	408b      	lsls	r3, r1
 8002b6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	3801      	subs	r0, #1
 8002b7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b7e:	d20e      	bcs.n	8002b9e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b82:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	4c08      	ldr	r4, [pc, #32]	; (8002ba8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	20f0      	movs	r0, #240	; 0xf0
 8002b8a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b8e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b90:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b92:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b96:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8002b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b9c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e010 	.word	0xe000e010
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb0:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8002d68 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb4:	f8d1 8000 	ldr.w	r8, [r1]
{
 8002bb8:	b083      	sub	sp, #12
 8002bba:	468e      	mov	lr, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbc:	2500      	movs	r5, #0
    ioposition = 0x01U << position;
 8002bbe:	f04f 0901 	mov.w	r9, #1
 8002bc2:	e002      	b.n	8002bca <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc4:	3501      	adds	r5, #1
 8002bc6:	2d10      	cmp	r5, #16
 8002bc8:	d07e      	beq.n	8002cc8 <HAL_GPIO_Init+0x11c>
    ioposition = 0x01U << position;
 8002bca:	fa09 f305 	lsl.w	r3, r9, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bce:	ea08 0103 	and.w	r1, r8, r3
    if(iocurrent == ioposition)
 8002bd2:	428b      	cmp	r3, r1
 8002bd4:	d1f6      	bne.n	8002bc4 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bd6:	f8de 4004 	ldr.w	r4, [lr, #4]
 8002bda:	f024 0a10 	bic.w	sl, r4, #16
 8002bde:	f1ba 0f02 	cmp.w	sl, #2
 8002be2:	d074      	beq.n	8002cce <HAL_GPIO_Init+0x122>
 8002be4:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be6:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8002be8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bec:	40ba      	lsls	r2, r7
 8002bee:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf0:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bf4:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf8:	40be      	lsls	r6, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bfe:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c02:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8002c06:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c08:	f240 8082 	bls.w	8002d10 <HAL_GPIO_Init+0x164>
      temp = GPIOx->PUPDR;
 8002c0c:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c0e:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c12:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c14:	40bb      	lsls	r3, r7
 8002c16:	4313      	orrs	r3, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c18:	00e7      	lsls	r7, r4, #3
      GPIOx->PUPDR = temp;
 8002c1a:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c1c:	d5d2      	bpl.n	8002bc4 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	4a4d      	ldr	r2, [pc, #308]	; (8002d54 <HAL_GPIO_Init+0x1a8>)
 8002c20:	2300      	movs	r3, #0
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002c2e:	f025 0603 	bic.w	r6, r5, #3
 8002c32:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8002c3e:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c40:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c44:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002c46:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	230f      	movs	r3, #15
 8002c4c:	4093      	lsls	r3, r2
 8002c4e:	ea27 0303 	bic.w	r3, r7, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c52:	4f41      	ldr	r7, [pc, #260]	; (8002d58 <HAL_GPIO_Init+0x1ac>)
 8002c54:	42b8      	cmp	r0, r7
 8002c56:	d011      	beq.n	8002c7c <HAL_GPIO_Init+0xd0>
 8002c58:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002c5c:	42b8      	cmp	r0, r7
 8002c5e:	d06a      	beq.n	8002d36 <HAL_GPIO_Init+0x18a>
 8002c60:	4f3e      	ldr	r7, [pc, #248]	; (8002d5c <HAL_GPIO_Init+0x1b0>)
 8002c62:	42b8      	cmp	r0, r7
 8002c64:	d06b      	beq.n	8002d3e <HAL_GPIO_Init+0x192>
 8002c66:	4f3e      	ldr	r7, [pc, #248]	; (8002d60 <HAL_GPIO_Init+0x1b4>)
 8002c68:	42b8      	cmp	r0, r7
 8002c6a:	d06d      	beq.n	8002d48 <HAL_GPIO_Init+0x19c>
 8002c6c:	4f3d      	ldr	r7, [pc, #244]	; (8002d64 <HAL_GPIO_Init+0x1b8>)
 8002c6e:	42b8      	cmp	r0, r7
 8002c70:	bf0c      	ite	eq
 8002c72:	2704      	moveq	r7, #4
 8002c74:	2707      	movne	r7, #7
 8002c76:	fa07 f202 	lsl.w	r2, r7, r2
 8002c7a:	4313      	orrs	r3, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c7c:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8002c7e:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	43ca      	mvns	r2, r1
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c84:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8002c86:	bf54      	ite	pl
 8002c88:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002c8a:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;
 8002c8c:	f8cc 3000 	str.w	r3, [ip]

        temp = EXTI->EMR;
 8002c90:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c94:	03a7      	lsls	r7, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8002c96:	bf54      	ite	pl
 8002c98:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002c9a:	430b      	orrmi	r3, r1
        }
        EXTI->EMR = temp;
 8002c9c:	f8cc 3004 	str.w	r3, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca0:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ca4:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	bf54      	ite	pl
 8002ca8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002caa:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;
 8002cac:	f8cc 3008 	str.w	r3, [ip, #8]

        temp = EXTI->FTSR;
 8002cb0:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb4:	02a4      	lsls	r4, r4, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8002cba:	bf54      	ite	pl
 8002cbc:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002cbe:	430b      	orrmi	r3, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc0:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8002cc2:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc6:	d180      	bne.n	8002bca <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8002cc8:	b003      	add	sp, #12
 8002cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 8002cce:	08ef      	lsrs	r7, r5, #3
 8002cd0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd4:	f005 0607 	and.w	r6, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8002cd8:	6a3a      	ldr	r2, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cda:	00b6      	lsls	r6, r6, #2
 8002cdc:	f04f 0b0f 	mov.w	fp, #15
 8002ce0:	fa0b fb06 	lsl.w	fp, fp, r6
 8002ce4:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce8:	f8de 2010 	ldr.w	r2, [lr, #16]
 8002cec:	40b2      	lsls	r2, r6
 8002cee:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002cf2:	623a      	str	r2, [r7, #32]
 8002cf4:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf6:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8002cf8:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cfc:	40ba      	lsls	r2, r7
 8002cfe:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d00:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d04:	ea0a 0a02 	and.w	sl, sl, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d08:	40be      	lsls	r6, r7
 8002d0a:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8002d0e:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8002d10:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d12:	ea06 0a02 	and.w	sl, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d16:	f8de 600c 	ldr.w	r6, [lr, #12]
 8002d1a:	40be      	lsls	r6, r7
 8002d1c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8002d20:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d22:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d26:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d2a:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d2e:	40ae      	lsls	r6, r5
 8002d30:	431e      	orrs	r6, r3
        GPIOx->OTYPER = temp;
 8002d32:	6046      	str	r6, [r0, #4]
 8002d34:	e76a      	b.n	8002c0c <HAL_GPIO_Init+0x60>
 8002d36:	fa09 f202 	lsl.w	r2, r9, r2
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	e79e      	b.n	8002c7c <HAL_GPIO_Init+0xd0>
 8002d3e:	2702      	movs	r7, #2
 8002d40:	fa07 f202 	lsl.w	r2, r7, r2
 8002d44:	4313      	orrs	r3, r2
 8002d46:	e799      	b.n	8002c7c <HAL_GPIO_Init+0xd0>
 8002d48:	2703      	movs	r7, #3
 8002d4a:	fa07 f202 	lsl.w	r2, r7, r2
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	e794      	b.n	8002c7c <HAL_GPIO_Init+0xd0>
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40020800 	.word	0x40020800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40013c00 	.word	0x40013c00

08002d6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d6c:	b902      	cbnz	r2, 8002d70 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d6e:	0409      	lsls	r1, r1, #16
 8002d70:	6181      	str	r1, [r0, #24]
  }
}
 8002d72:	4770      	bx	lr

08002d74 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002d74:	6943      	ldr	r3, [r0, #20]
 8002d76:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d7a:	bf08      	it	eq
 8002d7c:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7e:	6181      	str	r1, [r0, #24]
  }
}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop

08002d84 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d84:	2800      	cmp	r0, #0
 8002d86:	f000 8097 	beq.w	8002eb8 <HAL_I2C_Init+0x134>
{
 8002d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d90:	4604      	mov	r4, r0
 8002d92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8087 	beq.w	8002eaa <HAL_I2C_Init+0x126>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d9c:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d9e:	2324      	movs	r3, #36	; 0x24
 8002da0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002da4:	6813      	ldr	r3, [r2, #0]
 8002da6:	f023 0301 	bic.w	r3, r3, #1
 8002daa:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dac:	f000 ffe2 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002db0:	6861      	ldr	r1, [r4, #4]
 8002db2:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <HAL_I2C_Init+0x15c>)
 8002db4:	4299      	cmp	r1, r3
 8002db6:	d84b      	bhi.n	8002e50 <HAL_I2C_Init+0xcc>
 8002db8:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_I2C_Init+0x160>)
 8002dba:	4298      	cmp	r0, r3
 8002dbc:	d97a      	bls.n	8002eb4 <HAL_I2C_Init+0x130>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dbe:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002dc0:	4b49      	ldr	r3, [pc, #292]	; (8002ee8 <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dc2:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002dc4:	fba3 6300 	umull	r6, r3, r3, r0
 8002dc8:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dca:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002dce:	431d      	orrs	r5, r3
 8002dd0:	6055      	str	r5, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dd2:	6a15      	ldr	r5, [r2, #32]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002dda:	432b      	orrs	r3, r5
 8002ddc:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dde:	69d5      	ldr	r5, [r2, #28]
 8002de0:	0049      	lsls	r1, r1, #1
 8002de2:	1e43      	subs	r3, r0, #1
 8002de4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf38      	it	cc
 8002df6:	2304      	movcc	r3, #4
 8002df8:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002dfc:	432b      	orrs	r3, r5
 8002dfe:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e00:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8002e04:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e06:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e08:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8002e0c:	432b      	orrs	r3, r5
 8002e0e:	4303      	orrs	r3, r0
 8002e10:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e12:	6890      	ldr	r0, [r2, #8]
 8002e14:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e16:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e18:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8002e1c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002e20:	4329      	orrs	r1, r5
 8002e22:	4301      	orrs	r1, r0
 8002e24:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e26:	68d1      	ldr	r1, [r2, #12]
 8002e28:	69a0      	ldr	r0, [r4, #24]
 8002e2a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e2e:	4303      	orrs	r3, r0
 8002e30:	430b      	orrs	r3, r1
 8002e32:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e34:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e36:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002e38:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8002e3e:	6011      	str	r1, [r2, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8002e40:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e42:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e48:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e50:	4b26      	ldr	r3, [pc, #152]	; (8002eec <HAL_I2C_Init+0x168>)
 8002e52:	4298      	cmp	r0, r3
 8002e54:	d92e      	bls.n	8002eb4 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e56:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002e58:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5a:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e5c:	4f24      	ldr	r7, [pc, #144]	; (8002ef0 <HAL_I2C_Init+0x16c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002e5e:	fba3 5300 	umull	r5, r3, r3, r0
 8002e62:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e64:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8002e68:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6a:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e6e:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e70:	fb03 f305 	mul.w	r3, r3, r5
 8002e74:	fba7 5303 	umull	r5, r3, r7, r3
 8002e78:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e7a:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002e82:	3301      	adds	r3, #1
 8002e84:	432b      	orrs	r3, r5
 8002e86:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e88:	69d5      	ldr	r5, [r2, #28]
 8002e8a:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8002e8e:	3801      	subs	r0, #1
 8002e90:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002e94:	b996      	cbnz	r6, 8002ebc <HAL_I2C_Init+0x138>
 8002e96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002e9a:	fbb0 f0f1 	udiv	r0, r0, r1
 8002e9e:	3001      	adds	r0, #1
 8002ea0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002ea4:	b9c0      	cbnz	r0, 8002ed8 <HAL_I2C_Init+0x154>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e7a8      	b.n	8002dfc <HAL_I2C_Init+0x78>
    hi2c->Lock = HAL_UNLOCKED;
 8002eaa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002eae:	f001 ff2f 	bl	8004d10 <HAL_I2C_MspInit>
 8002eb2:	e773      	b.n	8002d9c <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8002eb4:	2001      	movs	r0, #1
}
 8002eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002eb8:	2001      	movs	r0, #1
}
 8002eba:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ebc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002ec0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002ec4:	fbb0 f0f1 	udiv	r0, r0, r1
 8002ec8:	3001      	adds	r0, #1
 8002eca:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d0e9      	beq.n	8002ea6 <HAL_I2C_Init+0x122>
 8002ed2:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 8002ed6:	e791      	b.n	8002dfc <HAL_I2C_Init+0x78>
 8002ed8:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8002edc:	e78e      	b.n	8002dfc <HAL_I2C_Init+0x78>
 8002ede:	bf00      	nop
 8002ee0:	000186a0 	.word	0x000186a0
 8002ee4:	001e847f 	.word	0x001e847f
 8002ee8:	431bde83 	.word	0x431bde83
 8002eec:	003d08ff 	.word	0x003d08ff
 8002ef0:	10624dd3 	.word	0x10624dd3

08002ef4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef8:	4604      	mov	r4, r0
 8002efa:	b082      	sub	sp, #8
 8002efc:	4699      	mov	r9, r3
 8002efe:	460f      	mov	r7, r1
 8002f00:	4690      	mov	r8, r2
 8002f02:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f04:	f7ff fdca 	bl	8002a9c <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f08:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d003      	beq.n	8002f18 <HAL_I2C_Master_Transmit+0x24>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 8002f10:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002f12:	b002      	add	sp, #8
 8002f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f18:	4606      	mov	r6, r0
 8002f1a:	e005      	b.n	8002f28 <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1c:	f7ff fdbe 	bl	8002a9c <HAL_GetTick>
 8002f20:	1b80      	subs	r0, r0, r6
 8002f22:	2819      	cmp	r0, #25
 8002f24:	f200 80c9 	bhi.w	80030ba <HAL_I2C_Master_Transmit+0x1c6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	43d2      	mvns	r2, r2
 8002f2e:	f012 0a02 	ands.w	sl, r2, #2
 8002f32:	d0f3      	beq.n	8002f1c <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8002f34:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002f38:	2a01      	cmp	r2, #1
 8002f3a:	d0e9      	beq.n	8002f10 <HAL_I2C_Master_Transmit+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f3c:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 8002f3e:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f40:	07d2      	lsls	r2, r2, #31
    __HAL_LOCK(hi2c);
 8002f42:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f46:	d402      	bmi.n	8002f4e <HAL_I2C_Master_Transmit+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4e:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f50:	489c      	ldr	r0, [pc, #624]	; (80031c4 <HAL_I2C_Master_Transmit+0x2d0>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f56:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f58:	2221      	movs	r2, #33	; 0x21
 8002f5a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f5e:	2210      	movs	r2, #16
 8002f60:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f64:	2200      	movs	r2, #0
 8002f66:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002f68:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f6c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6e:	62e0      	str	r0, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002f72:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f76:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8002f78:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f7a:	d06f      	beq.n	800305c <HAL_I2C_Master_Transmit+0x168>
 8002f7c:	2a01      	cmp	r2, #1
 8002f7e:	d06d      	beq.n	800305c <HAL_I2C_Master_Transmit+0x168>
 8002f80:	4282      	cmp	r2, r0
 8002f82:	d06b      	beq.n	800305c <HAL_I2C_Master_Transmit+0x168>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f86:	2a12      	cmp	r2, #18
 8002f88:	d068      	beq.n	800305c <HAL_I2C_Master_Transmit+0x168>
 8002f8a:	1c68      	adds	r0, r5, #1
 8002f8c:	f040 8089 	bne.w	80030a2 <HAL_I2C_Master_Transmit+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	07d1      	lsls	r1, r2, #31
 8002f94:	d5fc      	bpl.n	8002f90 <HAL_I2C_Master_Transmit+0x9c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f96:	6922      	ldr	r2, [r4, #16]
 8002f98:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002f9c:	f040 80c0 	bne.w	8003120 <HAL_I2C_Master_Transmit+0x22c>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa0:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002fa4:	611f      	str	r7, [r3, #16]
 8002fa6:	1c6f      	adds	r7, r5, #1
 8002fa8:	d004      	beq.n	8002fb4 <HAL_I2C_Master_Transmit+0xc0>
 8002faa:	e0df      	b.n	800316c <HAL_I2C_Master_Transmit+0x278>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	0551      	lsls	r1, r2, #21
 8002fb0:	f100 80a0 	bmi.w	80030f4 <HAL_I2C_Master_Transmit+0x200>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	0790      	lsls	r0, r2, #30
 8002fb8:	d5f8      	bpl.n	8002fac <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	9201      	str	r2, [sp, #4]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	9201      	str	r2, [sp, #4]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	9201      	str	r2, [sp, #4]
 8002fc6:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002fc8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002fca:	2a00      	cmp	r2, #0
 8002fcc:	f000 80de 	beq.w	800318c <HAL_I2C_Master_Transmit+0x298>
 8002fd0:	1c68      	adds	r0, r5, #1
 8002fd2:	d003      	beq.n	8002fdc <HAL_I2C_Master_Transmit+0xe8>
 8002fd4:	e047      	b.n	8003066 <HAL_I2C_Master_Transmit+0x172>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	0552      	lsls	r2, r2, #21
 8002fda:	d42a      	bmi.n	8003032 <HAL_I2C_Master_Transmit+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	0611      	lsls	r1, r2, #24
 8002fe0:	d5f9      	bpl.n	8002fd6 <HAL_I2C_Master_Transmit+0xe2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe2:	6a67      	ldr	r7, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002fe4:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe8:	4638      	mov	r0, r7
      hi2c->XferSize--;
 8002fea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ff2:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002ff4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002ff6:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002ff8:	3a01      	subs	r2, #1
 8002ffa:	b292      	uxth	r2, r2
 8002ffc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffe:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8003000:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003002:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 8003004:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003006:	d50c      	bpl.n	8003022 <HAL_I2C_Master_Transmit+0x12e>
 8003008:	b159      	cbz	r1, 8003022 <HAL_I2C_Master_Transmit+0x12e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800300a:	787a      	ldrb	r2, [r7, #1]
 800300c:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 800300e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003010:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 8003012:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 8003016:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8003018:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800301a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800301e:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003020:	8562      	strh	r2, [r4, #42]	; 0x2a
 8003022:	1c6f      	adds	r7, r5, #1
 8003024:	d12e      	bne.n	8003084 <HAL_I2C_Master_Transmit+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	0750      	lsls	r0, r2, #29
 800302a:	d4cd      	bmi.n	8002fc8 <HAL_I2C_Master_Transmit+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	0551      	lsls	r1, r2, #21
 8003030:	d5f9      	bpl.n	8003026 <HAL_I2C_Master_Transmit+0x132>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003032:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003034:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003038:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303a:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800303c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800303e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003042:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003046:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003048:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003054:	2b04      	cmp	r3, #4
 8003056:	d075      	beq.n	8003144 <HAL_I2C_Master_Transmit+0x250>
        return HAL_ERROR;
 8003058:	2001      	movs	r0, #1
 800305a:	e75a      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e791      	b.n	8002f8a <HAL_I2C_Master_Transmit+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	0617      	lsls	r7, r2, #24
 800306a:	d4ba      	bmi.n	8002fe2 <HAL_I2C_Master_Transmit+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	0557      	lsls	r7, r2, #21
 8003070:	d4df      	bmi.n	8003032 <HAL_I2C_Master_Transmit+0x13e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7ff fd13 	bl	8002a9c <HAL_GetTick>
 8003076:	1b80      	subs	r0, r0, r6
 8003078:	4285      	cmp	r5, r0
 800307a:	d369      	bcc.n	8003150 <HAL_I2C_Master_Transmit+0x25c>
 800307c:	2d00      	cmp	r5, #0
 800307e:	d067      	beq.n	8003150 <HAL_I2C_Master_Transmit+0x25c>
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	e7a5      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	0752      	lsls	r2, r2, #29
 8003088:	d49e      	bmi.n	8002fc8 <HAL_I2C_Master_Transmit+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	0552      	lsls	r2, r2, #21
 800308e:	d4d0      	bmi.n	8003032 <HAL_I2C_Master_Transmit+0x13e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003090:	f7ff fd04 	bl	8002a9c <HAL_GetTick>
 8003094:	1b80      	subs	r0, r0, r6
 8003096:	4285      	cmp	r5, r0
 8003098:	d35a      	bcc.n	8003150 <HAL_I2C_Master_Transmit+0x25c>
 800309a:	2d00      	cmp	r5, #0
 800309c:	d058      	beq.n	8003150 <HAL_I2C_Master_Transmit+0x25c>
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	e7bf      	b.n	8003022 <HAL_I2C_Master_Transmit+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	07d2      	lsls	r2, r2, #31
 80030a6:	f53f af76 	bmi.w	8002f96 <HAL_I2C_Master_Transmit+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7ff fcf7 	bl	8002a9c <HAL_GetTick>
 80030ae:	1b80      	subs	r0, r0, r6
 80030b0:	4285      	cmp	r5, r0
 80030b2:	d310      	bcc.n	80030d6 <HAL_I2C_Master_Transmit+0x1e2>
 80030b4:	b17d      	cbz	r5, 80030d6 <HAL_I2C_Master_Transmit+0x1e2>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	e767      	b.n	8002f8a <HAL_I2C_Master_Transmit+0x96>
        hi2c->State             = HAL_I2C_STATE_READY;
 80030ba:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030bc:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030c4:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80030ca:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ce:	f043 0320 	orr.w	r3, r3, #32
 80030d2:	6423      	str	r3, [r4, #64]	; 0x40
 80030d4:	e71c      	b.n	8002f10 <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d8:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80030e6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ea:	f043 0320 	orr.w	r3, r3, #32
 80030ee:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80030f0:	2001      	movs	r0, #1
 80030f2:	e70e      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030f6:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80030f8:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fa:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003102:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003104:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003108:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003110:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003112:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800311c:	2001      	movs	r0, #1
 800311e:	e6f8      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003120:	11fa      	asrs	r2, r7, #7
 8003122:	f002 0206 	and.w	r2, r2, #6
 8003126:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800312a:	611a      	str	r2, [r3, #16]
 800312c:	1c69      	adds	r1, r5, #1
 800312e:	d003      	beq.n	8003138 <HAL_I2C_Master_Transmit+0x244>
 8003130:	e039      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x2b2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	0550      	lsls	r0, r2, #21
 8003136:	d4dd      	bmi.n	80030f4 <HAL_I2C_Master_Transmit+0x200>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	0712      	lsls	r2, r2, #28
 800313c:	d5f9      	bpl.n	8003132 <HAL_I2C_Master_Transmit+0x23e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800313e:	b2ff      	uxtb	r7, r7
 8003140:	611f      	str	r7, [r3, #16]
 8003142:	e730      	b.n	8002fa6 <HAL_I2C_Master_Transmit+0xb2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	6822      	ldr	r2, [r4, #0]
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e783      	b.n	8003058 <HAL_I2C_Master_Transmit+0x164>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003150:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003152:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003154:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003156:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800315e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003160:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	f043 0320 	orr.w	r3, r3, #32
 8003168:	6423      	str	r3, [r4, #64]	; 0x40
 800316a:	e772      	b.n	8003052 <HAL_I2C_Master_Transmit+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	0792      	lsls	r2, r2, #30
 8003170:	f53f af23 	bmi.w	8002fba <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	0552      	lsls	r2, r2, #21
 8003178:	d4bc      	bmi.n	80030f4 <HAL_I2C_Master_Transmit+0x200>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7ff fc8f 	bl	8002a9c <HAL_GetTick>
 800317e:	1b80      	subs	r0, r0, r6
 8003180:	4285      	cmp	r5, r0
 8003182:	d3a8      	bcc.n	80030d6 <HAL_I2C_Master_Transmit+0x1e2>
 8003184:	2d00      	cmp	r5, #0
 8003186:	d0a6      	beq.n	80030d6 <HAL_I2C_Master_Transmit+0x1e2>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	e70c      	b.n	8002fa6 <HAL_I2C_Master_Transmit+0xb2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	6819      	ldr	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800318e:	2520      	movs	r5, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003194:	6019      	str	r1, [r3, #0]
    return HAL_OK;
 8003196:	4610      	mov	r0, r2
    hi2c->State = HAL_I2C_STATE_READY;
 8003198:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800319c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 80031a4:	e6b5      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	0711      	lsls	r1, r2, #28
 80031aa:	d4c8      	bmi.n	800313e <HAL_I2C_Master_Transmit+0x24a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	0550      	lsls	r0, r2, #21
 80031b0:	d4a0      	bmi.n	80030f4 <HAL_I2C_Master_Transmit+0x200>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7ff fc73 	bl	8002a9c <HAL_GetTick>
 80031b6:	1b80      	subs	r0, r0, r6
 80031b8:	4285      	cmp	r5, r0
 80031ba:	d38c      	bcc.n	80030d6 <HAL_I2C_Master_Transmit+0x1e2>
 80031bc:	2d00      	cmp	r5, #0
 80031be:	d08a      	beq.n	80030d6 <HAL_I2C_Master_Transmit+0x1e2>
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	e7b3      	b.n	800312c <HAL_I2C_Master_Transmit+0x238>
 80031c4:	ffff0000 	.word	0xffff0000

080031c8 <HAL_I2C_Master_Receive>:
{
 80031c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031cc:	4604      	mov	r4, r0
 80031ce:	b086      	sub	sp, #24
 80031d0:	4699      	mov	r9, r3
 80031d2:	460f      	mov	r7, r1
 80031d4:	4690      	mov	r8, r2
 80031d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80031d8:	f7ff fc60 	bl	8002a9c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031dc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d003      	beq.n	80031ec <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 80031e4:	2002      	movs	r0, #2
}
 80031e6:	b006      	add	sp, #24
 80031e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ec:	4606      	mov	r6, r0
 80031ee:	e005      	b.n	80031fc <HAL_I2C_Master_Receive+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f0:	f7ff fc54 	bl	8002a9c <HAL_GetTick>
 80031f4:	1b80      	subs	r0, r0, r6
 80031f6:	2819      	cmp	r0, #25
 80031f8:	f200 808e 	bhi.w	8003318 <HAL_I2C_Master_Receive+0x150>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	43d2      	mvns	r2, r2
 8003202:	f012 0a02 	ands.w	sl, r2, #2
 8003206:	d0f3      	beq.n	80031f0 <HAL_I2C_Master_Receive+0x28>
    __HAL_LOCK(hi2c);
 8003208:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800320c:	2a01      	cmp	r2, #1
 800320e:	d0e9      	beq.n	80031e4 <HAL_I2C_Master_Receive+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003210:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 8003212:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003214:	07d0      	lsls	r0, r2, #31
    __HAL_LOCK(hi2c);
 8003216:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800321a:	d402      	bmi.n	8003222 <HAL_I2C_Master_Receive+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003222:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003224:	499a      	ldr	r1, [pc, #616]	; (8003490 <HAL_I2C_Master_Receive+0x2c8>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800322c:	2222      	movs	r2, #34	; 0x22
 800322e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003232:	2210      	movs	r2, #16
 8003234:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003238:	2200      	movs	r2, #0
 800323a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800323c:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003240:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003242:	62e1      	str	r1, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003244:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003246:	681a      	ldr	r2, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8003248:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003250:	2908      	cmp	r1, #8
    hi2c->XferSize    = hi2c->XferCount;
 8003252:	8520      	strh	r0, [r4, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003254:	601a      	str	r2, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003256:	d034      	beq.n	80032c2 <HAL_I2C_Master_Receive+0xfa>
 8003258:	2901      	cmp	r1, #1
 800325a:	d032      	beq.n	80032c2 <HAL_I2C_Master_Receive+0xfa>
 800325c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003260:	d02f      	beq.n	80032c2 <HAL_I2C_Master_Receive+0xfa>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003262:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003264:	2a11      	cmp	r2, #17
 8003266:	d02c      	beq.n	80032c2 <HAL_I2C_Master_Receive+0xfa>
 8003268:	1c6a      	adds	r2, r5, #1
 800326a:	d12f      	bne.n	80032cc <HAL_I2C_Master_Receive+0x104>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	07d0      	lsls	r0, r2, #31
 8003270:	d5fc      	bpl.n	800326c <HAL_I2C_Master_Receive+0xa4>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003272:	6922      	ldr	r2, [r4, #16]
 8003274:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003278:	f040 80f3 	bne.w	8003462 <HAL_I2C_Master_Receive+0x29a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800327c:	f047 0201 	orr.w	r2, r7, #1
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	611a      	str	r2, [r3, #16]
 8003284:	1c6a      	adds	r2, r5, #1
 8003286:	d003      	beq.n	8003290 <HAL_I2C_Master_Receive+0xc8>
 8003288:	e18f      	b.n	80035aa <HAL_I2C_Master_Receive+0x3e2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	0550      	lsls	r0, r2, #21
 800328e:	d451      	bmi.n	8003334 <HAL_I2C_Master_Receive+0x16c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	0797      	lsls	r7, r2, #30
 8003294:	d5f9      	bpl.n	800328a <HAL_I2C_Master_Receive+0xc2>
    if (hi2c->XferSize == 0U)
 8003296:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003298:	2a00      	cmp	r2, #0
 800329a:	d161      	bne.n	8003360 <HAL_I2C_Master_Receive+0x198>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329c:	9201      	str	r2, [sp, #4]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	9201      	str	r2, [sp, #4]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	9201      	str	r2, [sp, #4]
 80032a6:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ae:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	2320      	movs	r3, #32
 80032b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80032b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80032c0:	e791      	b.n	80031e6 <HAL_I2C_Master_Receive+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e7cd      	b.n	8003268 <HAL_I2C_Master_Receive+0xa0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	07d1      	lsls	r1, r2, #31
 80032d0:	d4cf      	bmi.n	8003272 <HAL_I2C_Master_Receive+0xaa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7ff fbe3 	bl	8002a9c <HAL_GetTick>
 80032d6:	1b80      	subs	r0, r0, r6
 80032d8:	4285      	cmp	r5, r0
 80032da:	d30c      	bcc.n	80032f6 <HAL_I2C_Master_Receive+0x12e>
 80032dc:	b15d      	cbz	r5, 80032f6 <HAL_I2C_Master_Receive+0x12e>
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	e7c2      	b.n	8003268 <HAL_I2C_Master_Receive+0xa0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	0650      	lsls	r0, r2, #25
 80032e6:	f100 80a7 	bmi.w	8003438 <HAL_I2C_Master_Receive+0x270>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	06d1      	lsls	r1, r2, #27
 80032ee:	f100 8145 	bmi.w	800357c <HAL_I2C_Master_Receive+0x3b4>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7ff fbd3 	bl	8002a9c <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032f6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80032f8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032fa:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003300:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003304:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003306:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800330a:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 800330e:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003312:	b006      	add	sp, #24
 8003314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003318:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800331a:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800331e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003322:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003326:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003328:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	f043 0320 	orr.w	r3, r3, #32
 8003330:	6423      	str	r3, [r4, #64]	; 0x40
 8003332:	e757      	b.n	80031e4 <HAL_I2C_Master_Receive+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003336:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003338:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333a:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003342:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003344:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003350:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003352:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800335c:	2001      	movs	r0, #1
 800335e:	e742      	b.n	80031e6 <HAL_I2C_Master_Receive+0x1e>
    else if (hi2c->XferSize == 1U)
 8003360:	2a01      	cmp	r2, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003362:	6819      	ldr	r1, [r3, #0]
    else if (hi2c->XferSize == 1U)
 8003364:	f000 80cb 	beq.w	80034fe <HAL_I2C_Master_Receive+0x336>
    else if (hi2c->XferSize == 2U)
 8003368:	2a02      	cmp	r2, #2
 800336a:	f000 8144 	beq.w	80035f6 <HAL_I2C_Master_Receive+0x42e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2000      	movs	r0, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003374:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003376:	9004      	str	r0, [sp, #16]
 8003378:	6959      	ldr	r1, [r3, #20]
 800337a:	9104      	str	r1, [sp, #16]
 800337c:	6999      	ldr	r1, [r3, #24]
 800337e:	9104      	str	r1, [sp, #16]
 8003380:	9904      	ldr	r1, [sp, #16]
      if (hi2c->XferSize <= 3U)
 8003382:	2a03      	cmp	r2, #3
 8003384:	d848      	bhi.n	8003418 <HAL_I2C_Master_Receive+0x250>
        if (hi2c->XferSize == 1U)
 8003386:	2a01      	cmp	r2, #1
 8003388:	f000 80e5 	beq.w	8003556 <HAL_I2C_Master_Receive+0x38e>
        else if (hi2c->XferSize == 2U)
 800338c:	2a02      	cmp	r2, #2
 800338e:	f000 80aa 	beq.w	80034e6 <HAL_I2C_Master_Receive+0x31e>
 8003392:	1c68      	adds	r0, r5, #1
 8003394:	f040 80c2 	bne.w	800351c <HAL_I2C_Master_Receive+0x354>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	0751      	lsls	r1, r2, #29
 800339c:	d5fc      	bpl.n	8003398 <HAL_I2C_Master_Receive+0x1d0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80033ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80033ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80033b6:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80033b8:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80033ba:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80033bc:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033be:	8522      	strh	r2, [r4, #40]	; 0x28
 80033c0:	1c6b      	adds	r3, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c2:	6822      	ldr	r2, [r4, #0]
 80033c4:	f040 80b9 	bne.w	800353a <HAL_I2C_Master_Receive+0x372>
 80033c8:	6953      	ldr	r3, [r2, #20]
 80033ca:	075f      	lsls	r7, r3, #29
 80033cc:	d5fc      	bpl.n	80033c8 <HAL_I2C_Master_Receive+0x200>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ce:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d8:	6913      	ldr	r3, [r2, #16]
 80033da:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80033dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80033de:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e2:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ea:	6909      	ldr	r1, [r1, #16]
          hi2c->pBuffPtr++;
 80033ec:	1c47      	adds	r7, r0, #1
          hi2c->XferSize--;
 80033ee:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 80033f0:	6267      	str	r7, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033f2:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f4:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 80033f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80033f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80033fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033fc:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80033fe:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8003400:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003402:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003404:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003406:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003408:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800340a:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 800340c:	2a00      	cmp	r2, #0
 800340e:	f43f af4f 	beq.w	80032b0 <HAL_I2C_Master_Receive+0xe8>
      if (hi2c->XferSize <= 3U)
 8003412:	2a03      	cmp	r2, #3
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	d9b6      	bls.n	8003386 <HAL_I2C_Master_Receive+0x1be>
 8003418:	b95d      	cbnz	r5, 8003432 <HAL_I2C_Master_Receive+0x26a>
 800341a:	e762      	b.n	80032e2 <HAL_I2C_Master_Receive+0x11a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	06d7      	lsls	r7, r2, #27
 8003420:	f100 80ac 	bmi.w	800357c <HAL_I2C_Master_Receive+0x3b4>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7ff fb3a 	bl	8002a9c <HAL_GetTick>
 8003428:	1b80      	subs	r0, r0, r6
 800342a:	42a8      	cmp	r0, r5
 800342c:	f63f af63 	bhi.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 8003430:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	0652      	lsls	r2, r2, #25
 8003436:	d5f1      	bpl.n	800341c <HAL_I2C_Master_Receive+0x254>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003438:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 800343e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003440:	6823      	ldr	r3, [r4, #0]
        hi2c->XferSize--;
 8003442:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003444:	6a60      	ldr	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003446:	3901      	subs	r1, #1
 8003448:	b289      	uxth	r1, r1
 800344a:	8561      	strh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800344c:	6959      	ldr	r1, [r3, #20]
        hi2c->XferSize--;
 800344e:	3a01      	subs	r2, #1
 8003450:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003452:	1c47      	adds	r7, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003454:	0749      	lsls	r1, r1, #29
        hi2c->XferSize--;
 8003456:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003458:	6267      	str	r7, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800345a:	d5d7      	bpl.n	800340c <HAL_I2C_Master_Receive+0x244>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	7043      	strb	r3, [r0, #1]
 8003460:	e7c9      	b.n	80033f6 <HAL_I2C_Master_Receive+0x22e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003462:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8003466:	f008 0806 	and.w	r8, r8, #6
 800346a:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800346e:	611a      	str	r2, [r3, #16]
 8003470:	1c68      	adds	r0, r5, #1
 8003472:	d004      	beq.n	800347e <HAL_I2C_Master_Receive+0x2b6>
 8003474:	e0ac      	b.n	80035d0 <HAL_I2C_Master_Receive+0x408>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	0552      	lsls	r2, r2, #21
 800347a:	f53f af5b 	bmi.w	8003334 <HAL_I2C_Master_Receive+0x16c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	0711      	lsls	r1, r2, #28
 8003482:	d5f8      	bpl.n	8003476 <HAL_I2C_Master_Receive+0x2ae>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003484:	b2ff      	uxtb	r7, r7
 8003486:	611f      	str	r7, [r3, #16]
 8003488:	1c6a      	adds	r2, r5, #1
 800348a:	d007      	beq.n	800349c <HAL_I2C_Master_Receive+0x2d4>
 800348c:	e0c2      	b.n	8003614 <HAL_I2C_Master_Receive+0x44c>
 800348e:	bf00      	nop
 8003490:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	0550      	lsls	r0, r2, #21
 8003498:	f53f af4c 	bmi.w	8003334 <HAL_I2C_Master_Receive+0x16c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	0797      	lsls	r7, r2, #30
 80034a0:	d5f8      	bpl.n	8003494 <HAL_I2C_Master_Receive+0x2cc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a2:	2200      	movs	r2, #0
 80034a4:	9205      	str	r2, [sp, #20]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	9205      	str	r2, [sp, #20]
 80034aa:	699a      	ldr	r2, [r3, #24]
 80034ac:	9205      	str	r2, [sp, #20]
 80034ae:	9a05      	ldr	r2, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	1c6a      	adds	r2, r5, #1
 80034ba:	f040 80be 	bne.w	800363a <HAL_I2C_Master_Receive+0x472>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	07d7      	lsls	r7, r2, #31
 80034c2:	d5fc      	bpl.n	80034be <HAL_I2C_Master_Receive+0x2f6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034c4:	f048 02f1 	orr.w	r2, r8, #241	; 0xf1
 80034c8:	611a      	str	r2, [r3, #16]
 80034ca:	e6db      	b.n	8003284 <HAL_I2C_Master_Receive+0xbc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	0757      	lsls	r7, r2, #29
 80034d0:	d40e      	bmi.n	80034f0 <HAL_I2C_Master_Receive+0x328>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d2:	f7ff fae3 	bl	8002a9c <HAL_GetTick>
 80034d6:	1b80      	subs	r0, r0, r6
 80034d8:	4285      	cmp	r5, r0
 80034da:	f4ff af0c 	bcc.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 80034de:	2d00      	cmp	r5, #0
 80034e0:	f43f af09 	beq.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	1c69      	adds	r1, r5, #1
 80034e8:	d1f0      	bne.n	80034cc <HAL_I2C_Master_Receive+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	0752      	lsls	r2, r2, #29
 80034ee:	d5fc      	bpl.n	80034ea <HAL_I2C_Master_Receive+0x322>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	e76d      	b.n	80033da <HAL_I2C_Master_Receive+0x212>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003502:	2000      	movs	r0, #0
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003504:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003506:	9002      	str	r0, [sp, #8]
 8003508:	6959      	ldr	r1, [r3, #20]
 800350a:	9102      	str	r1, [sp, #8]
 800350c:	6999      	ldr	r1, [r3, #24]
 800350e:	9102      	str	r1, [sp, #8]
 8003510:	9902      	ldr	r1, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003518:	6019      	str	r1, [r3, #0]
 800351a:	e732      	b.n	8003382 <HAL_I2C_Master_Receive+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	0752      	lsls	r2, r2, #29
 8003520:	f53f af3d 	bmi.w	800339e <HAL_I2C_Master_Receive+0x1d6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7ff faba 	bl	8002a9c <HAL_GetTick>
 8003528:	1b80      	subs	r0, r0, r6
 800352a:	4285      	cmp	r5, r0
 800352c:	f4ff aee3 	bcc.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 8003530:	2d00      	cmp	r5, #0
 8003532:	f43f aee0 	beq.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	e72b      	b.n	8003392 <HAL_I2C_Master_Receive+0x1ca>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800353a:	6953      	ldr	r3, [r2, #20]
 800353c:	0758      	lsls	r0, r3, #29
 800353e:	f53f af46 	bmi.w	80033ce <HAL_I2C_Master_Receive+0x206>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003542:	f7ff faab 	bl	8002a9c <HAL_GetTick>
 8003546:	1b80      	subs	r0, r0, r6
 8003548:	4285      	cmp	r5, r0
 800354a:	f4ff aed4 	bcc.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 800354e:	2d00      	cmp	r5, #0
 8003550:	f47f af36 	bne.w	80033c0 <HAL_I2C_Master_Receive+0x1f8>
 8003554:	e6cf      	b.n	80032f6 <HAL_I2C_Master_Receive+0x12e>
 8003556:	b955      	cbnz	r5, 800356e <HAL_I2C_Master_Receive+0x3a6>
 8003558:	e022      	b.n	80035a0 <HAL_I2C_Master_Receive+0x3d8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	06d7      	lsls	r7, r2, #27
 800355e:	d40d      	bmi.n	800357c <HAL_I2C_Master_Receive+0x3b4>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003560:	f7ff fa9c 	bl	8002a9c <HAL_GetTick>
 8003564:	1b80      	subs	r0, r0, r6
 8003566:	4285      	cmp	r5, r0
 8003568:	f4ff aec5 	bcc.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 800356c:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	0652      	lsls	r2, r2, #25
 8003572:	d5f2      	bpl.n	800355a <HAL_I2C_Master_Receive+0x392>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003574:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	7013      	strb	r3, [r2, #0]
 800357a:	e73c      	b.n	80033f6 <HAL_I2C_Master_Receive+0x22e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800357c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357e:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003582:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003584:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003588:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003590:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003592:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003596:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003598:	6423      	str	r3, [r4, #64]	; 0x40
}
 800359a:	b006      	add	sp, #24
 800359c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	0650      	lsls	r0, r2, #25
 80035a4:	f57f aea1 	bpl.w	80032ea <HAL_I2C_Master_Receive+0x122>
 80035a8:	e7e4      	b.n	8003574 <HAL_I2C_Master_Receive+0x3ac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	0791      	lsls	r1, r2, #30
 80035ae:	f53f ae72 	bmi.w	8003296 <HAL_I2C_Master_Receive+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	0551      	lsls	r1, r2, #21
 80035b6:	f53f aebd 	bmi.w	8003334 <HAL_I2C_Master_Receive+0x16c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7ff fa6f 	bl	8002a9c <HAL_GetTick>
 80035be:	1b80      	subs	r0, r0, r6
 80035c0:	4285      	cmp	r5, r0
 80035c2:	f4ff ae98 	bcc.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 80035c6:	2d00      	cmp	r5, #0
 80035c8:	f43f ae95 	beq.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	e659      	b.n	8003284 <HAL_I2C_Master_Receive+0xbc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	0710      	lsls	r0, r2, #28
 80035d4:	f53f af56 	bmi.w	8003484 <HAL_I2C_Master_Receive+0x2bc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	0552      	lsls	r2, r2, #21
 80035dc:	f53f aeaa 	bmi.w	8003334 <HAL_I2C_Master_Receive+0x16c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e0:	f7ff fa5c 	bl	8002a9c <HAL_GetTick>
 80035e4:	1b80      	subs	r0, r0, r6
 80035e6:	4285      	cmp	r5, r0
 80035e8:	f4ff ae85 	bcc.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 80035ec:	2d00      	cmp	r5, #0
 80035ee:	f43f ae82 	beq.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	e73c      	b.n	8003470 <HAL_I2C_Master_Receive+0x2a8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80035fa:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035fc:	6819      	ldr	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fe:	2000      	movs	r0, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003600:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003604:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003606:	9003      	str	r0, [sp, #12]
 8003608:	6959      	ldr	r1, [r3, #20]
 800360a:	9103      	str	r1, [sp, #12]
 800360c:	6999      	ldr	r1, [r3, #24]
 800360e:	9103      	str	r1, [sp, #12]
 8003610:	9903      	ldr	r1, [sp, #12]
 8003612:	e6b6      	b.n	8003382 <HAL_I2C_Master_Receive+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	0791      	lsls	r1, r2, #30
 8003618:	f53f af43 	bmi.w	80034a2 <HAL_I2C_Master_Receive+0x2da>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	0551      	lsls	r1, r2, #21
 8003620:	f53f ae88 	bmi.w	8003334 <HAL_I2C_Master_Receive+0x16c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003624:	f7ff fa3a 	bl	8002a9c <HAL_GetTick>
 8003628:	1b80      	subs	r0, r0, r6
 800362a:	4285      	cmp	r5, r0
 800362c:	f4ff ae63 	bcc.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 8003630:	2d00      	cmp	r5, #0
 8003632:	f43f ae60 	beq.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	e726      	b.n	8003488 <HAL_I2C_Master_Receive+0x2c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	07d0      	lsls	r0, r2, #31
 800363e:	f53f af41 	bmi.w	80034c4 <HAL_I2C_Master_Receive+0x2fc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7ff fa2b 	bl	8002a9c <HAL_GetTick>
 8003646:	1b80      	subs	r0, r0, r6
 8003648:	4285      	cmp	r5, r0
 800364a:	f4ff ae54 	bcc.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 800364e:	2d00      	cmp	r5, #0
 8003650:	f43f ae51 	beq.w	80032f6 <HAL_I2C_Master_Receive+0x12e>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	e72f      	b.n	80034b8 <HAL_I2C_Master_Receive+0x2f0>

08003658 <HAL_I2C_IsDeviceReady>:
{
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	4605      	mov	r5, r0
 800365e:	b083      	sub	sp, #12
 8003660:	461f      	mov	r7, r3
 8003662:	468a      	mov	sl, r1
 8003664:	4693      	mov	fp, r2
  uint32_t tickstart = HAL_GetTick();
 8003666:	f7ff fa19 	bl	8002a9c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800366a:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800366e:	2b20      	cmp	r3, #32
 8003670:	d003      	beq.n	800367a <HAL_I2C_IsDeviceReady+0x22>
      return HAL_BUSY;
 8003672:	2002      	movs	r0, #2
}
 8003674:	b003      	add	sp, #12
 8003676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367a:	4606      	mov	r6, r0
 800367c:	e005      	b.n	800368a <HAL_I2C_IsDeviceReady+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367e:	f7ff fa0d 	bl	8002a9c <HAL_GetTick>
 8003682:	1b80      	subs	r0, r0, r6
 8003684:	2819      	cmp	r0, #25
 8003686:	f200 80ad 	bhi.w	80037e4 <HAL_I2C_IsDeviceReady+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800368a:	682b      	ldr	r3, [r5, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	43d2      	mvns	r2, r2
 8003690:	f012 0402 	ands.w	r4, r2, #2
 8003694:	d0f3      	beq.n	800367e <HAL_I2C_IsDeviceReady+0x26>
    __HAL_LOCK(hi2c);
 8003696:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 800369a:	2a01      	cmp	r2, #1
 800369c:	d0e9      	beq.n	8003672 <HAL_I2C_IsDeviceReady+0x1a>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800369e:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 80036a0:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036a2:	07d4      	lsls	r4, r2, #31
    __HAL_LOCK(hi2c);
 80036a4:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036a8:	f140 8098 	bpl.w	80037dc <HAL_I2C_IsDeviceReady+0x184>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ac:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ae:	496b      	ldr	r1, [pc, #428]	; (800385c <HAL_I2C_IsDeviceReady+0x204>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b6:	2024      	movs	r0, #36	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ba:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036be:	f00a 0afe 	and.w	sl, sl, #254	; 0xfe
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c2:	642a      	str	r2, [r5, #64]	; 0x40
  uint32_t I2C_Trials = 1U;
 80036c4:	f04f 0901 	mov.w	r9, #1
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c8:	62e9      	str	r1, [r5, #44]	; 0x2c
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036ca:	f04f 08a0 	mov.w	r8, #160	; 0xa0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	1c78      	adds	r0, r7, #1
 80036d8:	d165      	bne.n	80037a6 <HAL_I2C_IsDeviceReady+0x14e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	07d1      	lsls	r1, r2, #31
 80036de:	d5fc      	bpl.n	80036da <HAL_I2C_IsDeviceReady+0x82>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036e0:	f8c3 a010 	str.w	sl, [r3, #16]
      tickstart = HAL_GetTick();
 80036e4:	f7ff f9da 	bl	8002a9c <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036e8:	682b      	ldr	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80036ea:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036ec:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036ee:	6959      	ldr	r1, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036f0:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 80036f4:	28a0      	cmp	r0, #160	; 0xa0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036f6:	f002 0202 	and.w	r2, r2, #2
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036fa:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036fe:	d018      	beq.n	8003732 <HAL_I2C_IsDeviceReady+0xda>
 8003700:	b9ba      	cbnz	r2, 8003732 <HAL_I2C_IsDeviceReady+0xda>
 8003702:	b9b1      	cbnz	r1, 8003732 <HAL_I2C_IsDeviceReady+0xda>
 8003704:	2f00      	cmp	r7, #0
 8003706:	d03e      	beq.n	8003786 <HAL_I2C_IsDeviceReady+0x12e>
 8003708:	e001      	b.n	800370e <HAL_I2C_IsDeviceReady+0xb6>
 800370a:	b992      	cbnz	r2, 8003732 <HAL_I2C_IsDeviceReady+0xda>
 800370c:	b989      	cbnz	r1, 8003732 <HAL_I2C_IsDeviceReady+0xda>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800370e:	f7ff f9c5 	bl	8002a9c <HAL_GetTick>
 8003712:	1b80      	subs	r0, r0, r6
 8003714:	42b8      	cmp	r0, r7
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003716:	682b      	ldr	r3, [r5, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003718:	bf88      	it	hi
 800371a:	f885 803d 	strbhi.w	r8, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800371e:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003720:	6959      	ldr	r1, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003722:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 8003726:	28a0      	cmp	r0, #160	; 0xa0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003728:	f002 0202 	and.w	r2, r2, #2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800372c:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003730:	d1eb      	bne.n	800370a <HAL_I2C_IsDeviceReady+0xb2>
      hi2c->State = HAL_I2C_STATE_READY;
 8003732:	2220      	movs	r2, #32
 8003734:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	681a      	ldr	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003740:	d16e      	bne.n	8003820 <HAL_I2C_IsDeviceReady+0x1c8>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003746:	f46f 6180 	mvn.w	r1, #1024	; 0x400
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374c:	6159      	str	r1, [r3, #20]
 800374e:	e005      	b.n	800375c <HAL_I2C_IsDeviceReady+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003750:	f7ff f9a4 	bl	8002a9c <HAL_GetTick>
 8003754:	1b80      	subs	r0, r0, r6
 8003756:	2819      	cmp	r0, #25
 8003758:	d830      	bhi.n	80037bc <HAL_I2C_IsDeviceReady+0x164>
 800375a:	682b      	ldr	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800375c:	699c      	ldr	r4, [r3, #24]
 800375e:	43e4      	mvns	r4, r4
 8003760:	f014 0402 	ands.w	r4, r4, #2
 8003764:	d0f4      	beq.n	8003750 <HAL_I2C_IsDeviceReady+0xf8>
      I2C_Trials++;
 8003766:	f109 0901 	add.w	r9, r9, #1
    while (I2C_Trials < Trials);
 800376a:	45d9      	cmp	r9, fp
 800376c:	d3af      	bcc.n	80036ce <HAL_I2C_IsDeviceReady+0x76>
    hi2c->State = HAL_I2C_STATE_READY;
 800376e:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003770:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003772:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003776:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    return HAL_ERROR;
 800377a:	2001      	movs	r0, #1
 800377c:	e77a      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x1c>
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800377e:	2a00      	cmp	r2, #0
 8003780:	d1d7      	bne.n	8003732 <HAL_I2C_IsDeviceReady+0xda>
 8003782:	2900      	cmp	r1, #0
 8003784:	d1d5      	bne.n	8003732 <HAL_I2C_IsDeviceReady+0xda>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7ff f989 	bl	8002a9c <HAL_GetTick>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800378a:	682b      	ldr	r3, [r5, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800378c:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003790:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003792:	6959      	ldr	r1, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003794:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 8003798:	28a0      	cmp	r0, #160	; 0xa0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800379a:	f002 0202 	and.w	r2, r2, #2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800379e:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037a2:	d1ec      	bne.n	800377e <HAL_I2C_IsDeviceReady+0x126>
 80037a4:	e7c5      	b.n	8003732 <HAL_I2C_IsDeviceReady+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	07d2      	lsls	r2, r2, #31
 80037aa:	d499      	bmi.n	80036e0 <HAL_I2C_IsDeviceReady+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ac:	f7ff f976 	bl	8002a9c <HAL_GetTick>
 80037b0:	1b80      	subs	r0, r0, r6
 80037b2:	4287      	cmp	r7, r0
 80037b4:	d323      	bcc.n	80037fe <HAL_I2C_IsDeviceReady+0x1a6>
 80037b6:	b317      	cbz	r7, 80037fe <HAL_I2C_IsDeviceReady+0x1a6>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	e78c      	b.n	80036d6 <HAL_I2C_IsDeviceReady+0x7e>
        hi2c->State             = HAL_I2C_STATE_READY;
 80037bc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037be:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037c0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037c4:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80037ca:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037ce:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 80037d2:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037d4:	642b      	str	r3, [r5, #64]	; 0x40
}
 80037d6:	b003      	add	sp, #12
 80037d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e763      	b.n	80036ac <HAL_I2C_IsDeviceReady+0x54>
        hi2c->State             = HAL_I2C_STATE_READY;
 80037e4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037e6:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037e8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037ec:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80037f2:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f6:	f043 0320 	orr.w	r3, r3, #32
 80037fa:	642b      	str	r3, [r5, #64]	; 0x40
 80037fc:	e739      	b.n	8003672 <HAL_I2C_IsDeviceReady+0x1a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037fe:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003800:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003802:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003804:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003808:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800380c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800380e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003812:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8003816:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003818:	642b      	str	r3, [r5, #64]	; 0x40
}
 800381a:	b003      	add	sp, #12
 800381c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003824:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003826:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003828:	9101      	str	r1, [sp, #4]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	9201      	str	r2, [sp, #4]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	9201      	str	r2, [sp, #4]
 8003832:	9a01      	ldr	r2, [sp, #4]
 8003834:	e005      	b.n	8003842 <HAL_I2C_IsDeviceReady+0x1ea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7ff f931 	bl	8002a9c <HAL_GetTick>
 800383a:	1b80      	subs	r0, r0, r6
 800383c:	2819      	cmp	r0, #25
 800383e:	d8bd      	bhi.n	80037bc <HAL_I2C_IsDeviceReady+0x164>
 8003840:	682b      	ldr	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	43db      	mvns	r3, r3
 8003846:	f013 0402 	ands.w	r4, r3, #2
 800384a:	d0f4      	beq.n	8003836 <HAL_I2C_IsDeviceReady+0x1de>
        hi2c->State = HAL_I2C_STATE_READY;
 800384c:	2320      	movs	r3, #32
        __HAL_UNLOCK(hi2c);
 800384e:	2000      	movs	r0, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003850:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003854:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        return HAL_OK;
 8003858:	e70c      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x1c>
 800385a:	bf00      	nop
 800385c:	ffff0000 	.word	0xffff0000

08003860 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003860:	2800      	cmp	r0, #0
 8003862:	f000 8132 	beq.w	8003aca <HAL_RCC_OscConfig+0x26a>
{
 8003866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386a:	6803      	ldr	r3, [r0, #0]
 800386c:	07dd      	lsls	r5, r3, #31
{
 800386e:	b082      	sub	sp, #8
 8003870:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003872:	d52f      	bpl.n	80038d4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003874:	49ac      	ldr	r1, [pc, #688]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 8003876:	688a      	ldr	r2, [r1, #8]
 8003878:	f002 020c 	and.w	r2, r2, #12
 800387c:	2a04      	cmp	r2, #4
 800387e:	f000 80ea 	beq.w	8003a56 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003882:	688a      	ldr	r2, [r1, #8]
 8003884:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003888:	2a08      	cmp	r2, #8
 800388a:	f000 80e0 	beq.w	8003a4e <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	6863      	ldr	r3, [r4, #4]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003894:	f000 80e9 	beq.w	8003a6a <HAL_RCC_OscConfig+0x20a>
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389c:	f000 8154 	beq.w	8003b48 <HAL_RCC_OscConfig+0x2e8>
 80038a0:	4da1      	ldr	r5, [pc, #644]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 80038a2:	682a      	ldr	r2, [r5, #0]
 80038a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038a8:	602a      	str	r2, [r5, #0]
 80038aa:	682a      	ldr	r2, [r5, #0]
 80038ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038b0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 80de 	bne.w	8003a74 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7ff f8f0 	bl	8002a9c <HAL_GetTick>
 80038bc:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	e005      	b.n	80038cc <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c0:	f7ff f8ec 	bl	8002a9c <HAL_GetTick>
 80038c4:	1b80      	subs	r0, r0, r6
 80038c6:	2864      	cmp	r0, #100	; 0x64
 80038c8:	f200 80f2 	bhi.w	8003ab0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	039b      	lsls	r3, r3, #14
 80038d0:	d4f6      	bmi.n	80038c0 <HAL_RCC_OscConfig+0x60>
 80038d2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d4:	079f      	lsls	r7, r3, #30
 80038d6:	d475      	bmi.n	80039c4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d8:	071a      	lsls	r2, r3, #28
 80038da:	d515      	bpl.n	8003908 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038dc:	6963      	ldr	r3, [r4, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80a5 	beq.w	8003a2e <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e4:	4b91      	ldr	r3, [pc, #580]	; (8003b2c <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	4d90      	ldr	r5, [pc, #576]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80038ec:	f7ff f8d6 	bl	8002a9c <HAL_GetTick>
 80038f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	e005      	b.n	8003900 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f4:	f7ff f8d2 	bl	8002a9c <HAL_GetTick>
 80038f8:	1b80      	subs	r0, r0, r6
 80038fa:	2802      	cmp	r0, #2
 80038fc:	f200 80d8 	bhi.w	8003ab0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003900:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003902:	079b      	lsls	r3, r3, #30
 8003904:	d5f6      	bpl.n	80038f4 <HAL_RCC_OscConfig+0x94>
 8003906:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003908:	0758      	lsls	r0, r3, #29
 800390a:	d53b      	bpl.n	8003984 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390c:	4a86      	ldr	r2, [pc, #536]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 800390e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003910:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003914:	f040 80db 	bne.w	8003ace <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003920:	6413      	str	r3, [r2, #64]	; 0x40
 8003922:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800392c:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4d80      	ldr	r5, [pc, #512]	; (8003b30 <HAL_RCC_OscConfig+0x2d0>)
 8003930:	682a      	ldr	r2, [r5, #0]
 8003932:	05d1      	lsls	r1, r2, #23
 8003934:	f140 80ac 	bpl.w	8003a90 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003938:	68a3      	ldr	r3, [r4, #8]
 800393a:	2b01      	cmp	r3, #1
 800393c:	f000 80c9 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x272>
 8003940:	2b05      	cmp	r3, #5
 8003942:	f000 810b 	beq.w	8003b5c <HAL_RCC_OscConfig+0x2fc>
 8003946:	4d78      	ldr	r5, [pc, #480]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 8003948:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	672a      	str	r2, [r5, #112]	; 0x70
 8003950:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003952:	f022 0204 	bic.w	r2, r2, #4
 8003956:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003958:	2b00      	cmp	r3, #0
 800395a:	f040 80bf 	bne.w	8003adc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395e:	f7ff f89d 	bl	8002a9c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003966:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003968:	e006      	b.n	8003978 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f7ff f897 	bl	8002a9c <HAL_GetTick>
 800396e:	eba0 0008 	sub.w	r0, r0, r8
 8003972:	42b8      	cmp	r0, r7
 8003974:	f200 809c 	bhi.w	8003ab0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003978:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800397a:	0798      	lsls	r0, r3, #30
 800397c:	d4f5      	bmi.n	800396a <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397e:	2e00      	cmp	r6, #0
 8003980:	f040 80dc 	bne.w	8003b3c <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003984:	69a2      	ldr	r2, [r4, #24]
 8003986:	b1ca      	cbz	r2, 80039bc <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003988:	4d67      	ldr	r5, [pc, #412]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 800398a:	68a9      	ldr	r1, [r5, #8]
 800398c:	f001 010c 	and.w	r1, r1, #12
 8003990:	2908      	cmp	r1, #8
 8003992:	d048      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003994:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4a67      	ldr	r2, [pc, #412]	; (8003b34 <HAL_RCC_OscConfig+0x2d4>)
 8003998:	f04f 0100 	mov.w	r1, #0
 800399c:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399e:	f000 80e7 	beq.w	8003b70 <HAL_RCC_OscConfig+0x310>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7ff f87b 	bl	8002a9c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80039a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	e004      	b.n	80039b6 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ac:	f7ff f876 	bl	8002a9c <HAL_GetTick>
 80039b0:	1b40      	subs	r0, r0, r5
 80039b2:	2802      	cmp	r0, #2
 80039b4:	d87c      	bhi.n	8003ab0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	d4f7      	bmi.n	80039ac <HAL_RCC_OscConfig+0x14c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80039bc:	2000      	movs	r0, #0
}
 80039be:	b002      	add	sp, #8
 80039c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039c4:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 80039c6:	6891      	ldr	r1, [r2, #8]
 80039c8:	f011 0f0c 	tst.w	r1, #12
 80039cc:	d024      	beq.n	8003a18 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ce:	6891      	ldr	r1, [r2, #8]
 80039d0:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d4:	2908      	cmp	r1, #8
 80039d6:	d01c      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039d8:	68e3      	ldr	r3, [r4, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8092 	beq.w	8003b04 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 80039e0:	4b55      	ldr	r3, [pc, #340]	; (8003b38 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4d51      	ldr	r5, [pc, #324]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039e8:	f7ff f858 	bl	8002a9c <HAL_GetTick>
 80039ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	e004      	b.n	80039fa <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f0:	f7ff f854 	bl	8002a9c <HAL_GetTick>
 80039f4:	1b80      	subs	r0, r0, r6
 80039f6:	2802      	cmp	r0, #2
 80039f8:	d85a      	bhi.n	8003ab0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fa:	682b      	ldr	r3, [r5, #0]
 80039fc:	0798      	lsls	r0, r3, #30
 80039fe:	d5f7      	bpl.n	80039f0 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	6922      	ldr	r2, [r4, #16]
 8003a04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003a08:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	e762      	b.n	80038d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a12:	6852      	ldr	r2, [r2, #4]
 8003a14:	0256      	lsls	r6, r2, #9
 8003a16:	d4df      	bmi.n	80039d8 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a18:	4a43      	ldr	r2, [pc, #268]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	0795      	lsls	r5, r2, #30
 8003a1e:	d54b      	bpl.n	8003ab8 <HAL_RCC_OscConfig+0x258>
 8003a20:	68e2      	ldr	r2, [r4, #12]
 8003a22:	2a01      	cmp	r2, #1
 8003a24:	d048      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x258>
    return HAL_ERROR;
 8003a26:	2001      	movs	r0, #1
}
 8003a28:	b002      	add	sp, #8
 8003a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003a2e:	4a3f      	ldr	r2, [pc, #252]	; (8003b2c <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	4d3d      	ldr	r5, [pc, #244]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8003a32:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003a34:	f7ff f832 	bl	8002a9c <HAL_GetTick>
 8003a38:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3a:	e004      	b.n	8003a46 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7ff f82e 	bl	8002a9c <HAL_GetTick>
 8003a40:	1b80      	subs	r0, r0, r6
 8003a42:	2802      	cmp	r0, #2
 8003a44:	d834      	bhi.n	8003ab0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a46:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003a48:	079f      	lsls	r7, r3, #30
 8003a4a:	d4f7      	bmi.n	8003a3c <HAL_RCC_OscConfig+0x1dc>
 8003a4c:	e75b      	b.n	8003906 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4e:	684a      	ldr	r2, [r1, #4]
 8003a50:	0250      	lsls	r0, r2, #9
 8003a52:	f57f af1c 	bpl.w	800388e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a56:	4a34      	ldr	r2, [pc, #208]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	0391      	lsls	r1, r2, #14
 8003a5c:	f57f af3a 	bpl.w	80038d4 <HAL_RCC_OscConfig+0x74>
 8003a60:	6862      	ldr	r2, [r4, #4]
 8003a62:	2a00      	cmp	r2, #0
 8003a64:	f47f af36 	bne.w	80038d4 <HAL_RCC_OscConfig+0x74>
 8003a68:	e7dd      	b.n	8003a26 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6a:	4a2f      	ldr	r2, [pc, #188]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 8003a6c:	6813      	ldr	r3, [r2, #0]
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a74:	f7ff f812 	bl	8002a9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a78:	4d2b      	ldr	r5, [pc, #172]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8003a7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7c:	e004      	b.n	8003a88 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a7e:	f7ff f80d 	bl	8002a9c <HAL_GetTick>
 8003a82:	1b80      	subs	r0, r0, r6
 8003a84:	2864      	cmp	r0, #100	; 0x64
 8003a86:	d813      	bhi.n	8003ab0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	039a      	lsls	r2, r3, #14
 8003a8c:	d5f7      	bpl.n	8003a7e <HAL_RCC_OscConfig+0x21e>
 8003a8e:	e720      	b.n	80038d2 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a90:	682a      	ldr	r2, [r5, #0]
 8003a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a96:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8003a98:	f7ff f800 	bl	8002a9c <HAL_GetTick>
 8003a9c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	682b      	ldr	r3, [r5, #0]
 8003aa0:	05da      	lsls	r2, r3, #23
 8003aa2:	f53f af49 	bmi.w	8003938 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa6:	f7fe fff9 	bl	8002a9c <HAL_GetTick>
 8003aaa:	1bc0      	subs	r0, r0, r7
 8003aac:	2802      	cmp	r0, #2
 8003aae:	d9f6      	bls.n	8003a9e <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8003ab0:	2003      	movs	r0, #3
}
 8003ab2:	b002      	add	sp, #8
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab8:	491b      	ldr	r1, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 8003aba:	6920      	ldr	r0, [r4, #16]
 8003abc:	680a      	ldr	r2, [r1, #0]
 8003abe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003ac2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003ac6:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac8:	e706      	b.n	80038d8 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8003aca:	2001      	movs	r0, #1
}
 8003acc:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2600      	movs	r6, #0
 8003ad0:	e72d      	b.n	800392e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad2:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
 8003ad4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003adc:	f7fe ffde 	bl	8002a9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	4d11      	ldr	r5, [pc, #68]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8003ae2:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae8:	e005      	b.n	8003af6 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aea:	f7fe ffd7 	bl	8002a9c <HAL_GetTick>
 8003aee:	eba0 0008 	sub.w	r0, r0, r8
 8003af2:	42b8      	cmp	r0, r7
 8003af4:	d8dc      	bhi.n	8003ab0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003af8:	079b      	lsls	r3, r3, #30
 8003afa:	d5f6      	bpl.n	8003aea <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8003afc:	2e00      	cmp	r6, #0
 8003afe:	f43f af41 	beq.w	8003984 <HAL_RCC_OscConfig+0x124>
 8003b02:	e01b      	b.n	8003b3c <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8003b04:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b06:	4d08      	ldr	r5, [pc, #32]	; (8003b28 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8003b08:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b0a:	f7fe ffc7 	bl	8002a9c <HAL_GetTick>
 8003b0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b10:	e004      	b.n	8003b1c <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fe ffc3 	bl	8002a9c <HAL_GetTick>
 8003b16:	1b80      	subs	r0, r0, r6
 8003b18:	2802      	cmp	r0, #2
 8003b1a:	d8c9      	bhi.n	8003ab0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	0799      	lsls	r1, r3, #30
 8003b20:	d4f7      	bmi.n	8003b12 <HAL_RCC_OscConfig+0x2b2>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	e6d8      	b.n	80038d8 <HAL_RCC_OscConfig+0x78>
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	42470e80 	.word	0x42470e80
 8003b30:	40007000 	.word	0x40007000
 8003b34:	42470060 	.word	0x42470060
 8003b38:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3c:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <HAL_RCC_OscConfig+0x36c>)
 8003b3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6413      	str	r3, [r2, #64]	; 0x40
 8003b46:	e71d      	b.n	8003984 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b48:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <HAL_RCC_OscConfig+0x36c>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e78b      	b.n	8003a74 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x36c>)
 8003b5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b60:	f042 0204 	orr.w	r2, r2, #4
 8003b64:	671a      	str	r2, [r3, #112]	; 0x70
 8003b66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	671a      	str	r2, [r3, #112]	; 0x70
 8003b6e:	e7b5      	b.n	8003adc <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8003b70:	f7fe ff94 	bl	8002a9c <HAL_GetTick>
 8003b74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	e004      	b.n	8003b82 <HAL_RCC_OscConfig+0x322>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fe ff90 	bl	8002a9c <HAL_GetTick>
 8003b7c:	1b80      	subs	r0, r0, r6
 8003b7e:	2802      	cmp	r0, #2
 8003b80:	d896      	bhi.n	8003ab0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	682b      	ldr	r3, [r5, #0]
 8003b84:	0199      	lsls	r1, r3, #6
 8003b86:	d4f7      	bmi.n	8003b78 <HAL_RCC_OscConfig+0x318>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b88:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8003b8c:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8003b90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b92:	4c0e      	ldr	r4, [pc, #56]	; (8003bcc <HAL_RCC_OscConfig+0x36c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b94:	4333      	orrs	r3, r6
 8003b96:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003b9a:	0852      	lsrs	r2, r2, #1
 8003b9c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ba0:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003ba2:	490b      	ldr	r1, [pc, #44]	; (8003bd0 <HAL_RCC_OscConfig+0x370>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003ba8:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003baa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003bac:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003bae:	f7fe ff75 	bl	8002a9c <HAL_GetTick>
 8003bb2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb6:	f7fe ff71 	bl	8002a9c <HAL_GetTick>
 8003bba:	1b40      	subs	r0, r0, r5
 8003bbc:	2802      	cmp	r0, #2
 8003bbe:	f63f af77 	bhi.w	8003ab0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	019a      	lsls	r2, r3, #6
 8003bc6:	d5f6      	bpl.n	8003bb6 <HAL_RCC_OscConfig+0x356>
 8003bc8:	e6f8      	b.n	80039bc <HAL_RCC_OscConfig+0x15c>
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	42470060 	.word	0x42470060

08003bd4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd4:	4917      	ldr	r1, [pc, #92]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8003bd6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd8:	688b      	ldr	r3, [r1, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d01b      	beq.n	8003c1a <HAL_RCC_GetSysClockFreq+0x46>
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d117      	bne.n	8003c16 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be8:	684b      	ldr	r3, [r1, #4]
 8003bea:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf2:	d114      	bne.n	8003c1e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf4:	6849      	ldr	r1, [r1, #4]
 8003bf6:	4810      	ldr	r0, [pc, #64]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x64>)
 8003bf8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003bfc:	fba1 0100 	umull	r0, r1, r1, r0
 8003c00:	f7fd f82a 	bl	8000c58 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x60>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003c10:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003c14:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003c16:	4808      	ldr	r0, [pc, #32]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003c18:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8003c1a:	4808      	ldr	r0, [pc, #32]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x68>)
}
 8003c1c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1e:	684b      	ldr	r3, [r1, #4]
 8003c20:	4806      	ldr	r0, [pc, #24]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x68>)
 8003c22:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003c26:	fba3 0100 	umull	r0, r1, r3, r0
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f7fd f814 	bl	8000c58 <__aeabi_uldivmod>
 8003c30:	e7e8      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x30>
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	007a1200 	.word	0x007a1200

08003c40 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003c40:	b160      	cbz	r0, 8003c5c <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c42:	4a48      	ldr	r2, [pc, #288]	; (8003d64 <HAL_RCC_ClockConfig+0x124>)
 8003c44:	6813      	ldr	r3, [r2, #0]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	428b      	cmp	r3, r1
 8003c4c:	d208      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	b2cb      	uxtb	r3, r1
 8003c50:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	428b      	cmp	r3, r1
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8003c5c:	2001      	movs	r0, #1
}
 8003c5e:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	6803      	ldr	r3, [r0, #0]
{
 8003c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c66:	079d      	lsls	r5, r3, #30
 8003c68:	d514      	bpl.n	8003c94 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6a:	075c      	lsls	r4, r3, #29
 8003c6c:	d504      	bpl.n	8003c78 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c6e:	4c3e      	ldr	r4, [pc, #248]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003c70:	68a2      	ldr	r2, [r4, #8]
 8003c72:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003c76:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c78:	071a      	lsls	r2, r3, #28
 8003c7a:	d504      	bpl.n	8003c86 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c7c:	4c3a      	ldr	r4, [pc, #232]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003c7e:	68a2      	ldr	r2, [r4, #8]
 8003c80:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003c84:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c86:	4c38      	ldr	r4, [pc, #224]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003c88:	6885      	ldr	r5, [r0, #8]
 8003c8a:	68a2      	ldr	r2, [r4, #8]
 8003c8c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c90:	432a      	orrs	r2, r5
 8003c92:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c94:	07df      	lsls	r7, r3, #31
 8003c96:	4604      	mov	r4, r0
 8003c98:	460d      	mov	r5, r1
 8003c9a:	d522      	bpl.n	8003ce2 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9c:	6842      	ldr	r2, [r0, #4]
 8003c9e:	2a01      	cmp	r2, #1
 8003ca0:	d056      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x110>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca2:	1e93      	subs	r3, r2, #2
 8003ca4:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca6:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003caa:	d958      	bls.n	8003d5e <HAL_RCC_ClockConfig+0x11e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	0799      	lsls	r1, r3, #30
 8003cae:	d525      	bpl.n	8003cfc <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb0:	4e2d      	ldr	r6, [pc, #180]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003cb2:	68b3      	ldr	r3, [r6, #8]
 8003cb4:	f023 0303 	bic.w	r3, r3, #3
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003cbc:	f7fe feee 	bl	8002a9c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003cc4:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc8:	f7fe fee8 	bl	8002a9c <HAL_GetTick>
 8003ccc:	eba0 0008 	sub.w	r0, r0, r8
 8003cd0:	42b8      	cmp	r0, r7
 8003cd2:	d842      	bhi.n	8003d5a <HAL_RCC_ClockConfig+0x11a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd4:	68b3      	ldr	r3, [r6, #8]
 8003cd6:	6862      	ldr	r2, [r4, #4]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ce0:	d1f2      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce2:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <HAL_RCC_ClockConfig+0x124>)
 8003ce4:	6813      	ldr	r3, [r2, #0]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	42ab      	cmp	r3, r5
 8003cec:	d909      	bls.n	8003d02 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cee:	b2eb      	uxtb	r3, r5
 8003cf0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	6813      	ldr	r3, [r2, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	42ab      	cmp	r3, r5
 8003cfa:	d002      	beq.n	8003d02 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8003cfc:	2001      	movs	r0, #1
}
 8003cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	075a      	lsls	r2, r3, #29
 8003d06:	d506      	bpl.n	8003d16 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d08:	4917      	ldr	r1, [pc, #92]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003d0a:	68e0      	ldr	r0, [r4, #12]
 8003d0c:	688a      	ldr	r2, [r1, #8]
 8003d0e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003d12:	4302      	orrs	r2, r0
 8003d14:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d16:	071b      	lsls	r3, r3, #28
 8003d18:	d411      	bmi.n	8003d3e <HAL_RCC_ClockConfig+0xfe>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d1a:	f7ff ff5b 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003d20:	4912      	ldr	r1, [pc, #72]	; (8003d6c <HAL_RCC_ClockConfig+0x12c>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <HAL_RCC_ClockConfig+0x130>)
 8003d26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d30:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d32:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d34:	f7fe fe68 	bl	8002a08 <HAL_InitTick>
  return HAL_OK;
 8003d38:	2000      	movs	r0, #0
}
 8003d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003d40:	6921      	ldr	r1, [r4, #16]
 8003d42:	6893      	ldr	r3, [r2, #8]
 8003d44:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003d48:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d4c:	6093      	str	r3, [r2, #8]
 8003d4e:	e7e4      	b.n	8003d1a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	039e      	lsls	r6, r3, #14
 8003d56:	d4ab      	bmi.n	8003cb0 <HAL_RCC_ClockConfig+0x70>
 8003d58:	e7d0      	b.n	8003cfc <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8003d5a:	2003      	movs	r0, #3
 8003d5c:	e7ed      	b.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	0198      	lsls	r0, r3, #6
 8003d60:	d4a6      	bmi.n	8003cb0 <HAL_RCC_ClockConfig+0x70>
 8003d62:	e7cb      	b.n	8003cfc <HAL_RCC_ClockConfig+0xbc>
 8003d64:	40023c00 	.word	0x40023c00
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	080095a8 	.word	0x080095a8
 8003d70:	20000048 	.word	0x20000048

08003d74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003d76:	4a05      	ldr	r2, [pc, #20]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d78:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003d7a:	4905      	ldr	r1, [pc, #20]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d7c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d80:	6808      	ldr	r0, [r1, #0]
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d84:	40d8      	lsrs	r0, r3
 8003d86:	4770      	bx	lr
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	080095b8 	.word	0x080095b8
 8003d90:	20000048 	.word	0x20000048

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003d96:	4a05      	ldr	r2, [pc, #20]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d98:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003d9a:	4905      	ldr	r1, [pc, #20]	; (8003db0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d9c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003da0:	6808      	ldr	r0, [r1, #0]
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
}
 8003da4:	40d8      	lsrs	r0, r3
 8003da6:	4770      	bx	lr
 8003da8:	40023800 	.word	0x40023800
 8003dac:	080095b8 	.word	0x080095b8
 8003db0:	20000048 	.word	0x20000048

08003db4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d046      	beq.n	8003e46 <HAL_TIM_Base_Init+0x92>
{
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dc4:	b333      	cbz	r3, 8003e14 <HAL_TIM_Base_Init+0x60>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc8:	4d28      	ldr	r5, [pc, #160]	; (8003e6c <HAL_TIM_Base_Init+0xb8>)
 8003dca:	69a6      	ldr	r6, [r4, #24]
 8003dcc:	68e0      	ldr	r0, [r4, #12]
 8003dce:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd6:	42aa      	cmp	r2, r5
  tmpcr1 = TIMx->CR1;
 8003dd8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dda:	d036      	beq.n	8003e4a <HAL_TIM_Base_Init+0x96>
 8003ddc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003de0:	d01d      	beq.n	8003e1e <HAL_TIM_Base_Init+0x6a>
 8003de2:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 8003de6:	42aa      	cmp	r2, r5
 8003de8:	d019      	beq.n	8003e1e <HAL_TIM_Base_Init+0x6a>
 8003dea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003dee:	42aa      	cmp	r2, r5
 8003df0:	d015      	beq.n	8003e1e <HAL_TIM_Base_Init+0x6a>
 8003df2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003df6:	42aa      	cmp	r2, r5
 8003df8:	d011      	beq.n	8003e1e <HAL_TIM_Base_Init+0x6a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfa:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8003dfe:	42aa      	cmp	r2, r5
 8003e00:	d011      	beq.n	8003e26 <HAL_TIM_Base_Init+0x72>
 8003e02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e06:	42aa      	cmp	r2, r5
 8003e08:	d00d      	beq.n	8003e26 <HAL_TIM_Base_Init+0x72>
 8003e0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e0e:	42aa      	cmp	r2, r5
 8003e10:	d10d      	bne.n	8003e2e <HAL_TIM_Base_Init+0x7a>
 8003e12:	e008      	b.n	8003e26 <HAL_TIM_Base_Init+0x72>
    htim->Lock = HAL_UNLOCKED;
 8003e14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003e18:	f000 ffc4 	bl	8004da4 <HAL_TIM_Base_MspInit>
 8003e1c:	e7d3      	b.n	8003dc6 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8003e1e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e24:	432b      	orrs	r3, r5
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e26:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2c:	432b      	orrs	r3, r5
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e32:	4333      	orrs	r3, r6

  TIMx->CR1 = tmpcr1;
 8003e34:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e36:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e38:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8003e3e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003e46:	2001      	movs	r0, #1
}
 8003e48:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003e4a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4c:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e52:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e58:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e5e:	4333      	orrs	r3, r6
  TIMx->CR1 = tmpcr1;
 8003e60:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e62:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e64:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003e66:	6963      	ldr	r3, [r4, #20]
 8003e68:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6a:	e7e6      	b.n	8003e3a <HAL_TIM_Base_Init+0x86>
 8003e6c:	40010000 	.word	0x40010000

08003e70 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e70:	6803      	ldr	r3, [r0, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e80:	2a06      	cmp	r2, #6
 8003e82:	d003      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
}
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIM_PWM_MspInit>:
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop

08003e94 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d046      	beq.n	8003f26 <HAL_TIM_PWM_Init+0x92>
{
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ea4:	b333      	cbz	r3, 8003ef4 <HAL_TIM_PWM_Init+0x60>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea8:	4d28      	ldr	r5, [pc, #160]	; (8003f4c <HAL_TIM_PWM_Init+0xb8>)
 8003eaa:	69a6      	ldr	r6, [r4, #24]
 8003eac:	68e0      	ldr	r0, [r4, #12]
 8003eae:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb6:	42aa      	cmp	r2, r5
  tmpcr1 = TIMx->CR1;
 8003eb8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eba:	d036      	beq.n	8003f2a <HAL_TIM_PWM_Init+0x96>
 8003ebc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003ec0:	d01d      	beq.n	8003efe <HAL_TIM_PWM_Init+0x6a>
 8003ec2:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 8003ec6:	42aa      	cmp	r2, r5
 8003ec8:	d019      	beq.n	8003efe <HAL_TIM_PWM_Init+0x6a>
 8003eca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ece:	42aa      	cmp	r2, r5
 8003ed0:	d015      	beq.n	8003efe <HAL_TIM_PWM_Init+0x6a>
 8003ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ed6:	42aa      	cmp	r2, r5
 8003ed8:	d011      	beq.n	8003efe <HAL_TIM_PWM_Init+0x6a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8003ede:	42aa      	cmp	r2, r5
 8003ee0:	d011      	beq.n	8003f06 <HAL_TIM_PWM_Init+0x72>
 8003ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ee6:	42aa      	cmp	r2, r5
 8003ee8:	d00d      	beq.n	8003f06 <HAL_TIM_PWM_Init+0x72>
 8003eea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003eee:	42aa      	cmp	r2, r5
 8003ef0:	d10d      	bne.n	8003f0e <HAL_TIM_PWM_Init+0x7a>
 8003ef2:	e008      	b.n	8003f06 <HAL_TIM_PWM_Init+0x72>
    htim->Lock = HAL_UNLOCKED;
 8003ef4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003ef8:	f7ff ffca 	bl	8003e90 <HAL_TIM_PWM_MspInit>
 8003efc:	e7d3      	b.n	8003ea6 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8003efe:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f04:	432b      	orrs	r3, r5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f06:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f12:	4333      	orrs	r3, r6
  TIMx->CR1 = tmpcr1;
 8003f14:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f16:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f18:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8003f1e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003f26:	2001      	movs	r0, #1
}
 8003f28:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003f2a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2c:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f32:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f38:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3e:	4333      	orrs	r3, r6
  TIMx->CR1 = tmpcr1;
 8003f40:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f42:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f44:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003f46:	6963      	ldr	r3, [r4, #20]
 8003f48:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4a:	e7e6      	b.n	8003f1a <HAL_TIM_PWM_Init+0x86>
 8003f4c:	40010000 	.word	0x40010000

08003f50 <HAL_TIM_PWM_Start_IT>:
 8003f50:	b410      	push	{r4}
 8003f52:	6803      	ldr	r3, [r0, #0]
 8003f54:	290c      	cmp	r1, #12
 8003f56:	d80c      	bhi.n	8003f72 <HAL_TIM_PWM_Start_IT+0x22>
 8003f58:	e8df f001 	tbb	[pc, r1]
 8003f5c:	0b0b0b31 	.word	0x0b0b0b31
 8003f60:	0b0b0b2c 	.word	0x0b0b0b2c
 8003f64:	0b0b0b27 	.word	0x0b0b0b27
 8003f68:	07          	.byte	0x07
 8003f69:	00          	.byte	0x00
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	f042 0210 	orr.w	r2, r2, #16
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	6a18      	ldr	r0, [r3, #32]
 8003f74:	4c17      	ldr	r4, [pc, #92]	; (8003fd4 <HAL_TIM_PWM_Start_IT+0x84>)
 8003f76:	f001 021f 	and.w	r2, r1, #31
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4091      	lsls	r1, r2
 8003f7e:	ea20 0001 	bic.w	r0, r0, r1
 8003f82:	6218      	str	r0, [r3, #32]
 8003f84:	6a1a      	ldr	r2, [r3, #32]
 8003f86:	42a3      	cmp	r3, r4
 8003f88:	ea41 0102 	orr.w	r1, r1, r2
 8003f8c:	6219      	str	r1, [r3, #32]
 8003f8e:	d01b      	beq.n	8003fc8 <HAL_TIM_PWM_Start_IT+0x78>
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	f002 0207 	and.w	r2, r2, #7
 8003f96:	2a06      	cmp	r2, #6
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_PWM_Start_IT+0x52>
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f042 0201 	orr.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	f042 0208 	orr.w	r2, r2, #8
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	e7de      	b.n	8003f72 <HAL_TIM_PWM_Start_IT+0x22>
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	f042 0204 	orr.w	r2, r2, #4
 8003fba:	60da      	str	r2, [r3, #12]
 8003fbc:	e7d9      	b.n	8003f72 <HAL_TIM_PWM_Start_IT+0x22>
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	f042 0202 	orr.w	r2, r2, #2
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	e7d4      	b.n	8003f72 <HAL_TIM_PWM_Start_IT+0x22>
 8003fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fce:	645a      	str	r2, [r3, #68]	; 0x44
 8003fd0:	e7de      	b.n	8003f90 <HAL_TIM_PWM_Start_IT+0x40>
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000

08003fd8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003fd8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	f000 80c8 	beq.w	8004172 <HAL_TIM_PWM_ConfigChannel+0x19a>
{
 8003fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003fe6:	2401      	movs	r4, #1
 8003fe8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003ff0:	2a0c      	cmp	r2, #12
 8003ff2:	d837      	bhi.n	8004064 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8003ff4:	e8df f002 	tbb	[pc, r2]
 8003ff8:	3636363e 	.word	0x3636363e
 8003ffc:	36363668 	.word	0x36363668
 8004000:	36363693 	.word	0x36363693
 8004004:	07          	.byte	0x07
 8004005:	00          	.byte	0x00
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004006:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004008:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800400a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800400c:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400e:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 80041d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004012:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8004016:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004018:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800401a:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800401e:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004020:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004024:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004028:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800402a:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800402e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_ConfigChannel+0x66>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004034:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004036:	f42e 4e80 	bic.w	lr, lr, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800403a:	ea4e 1e85 	orr.w	lr, lr, r5, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800403e:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004040:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004044:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004046:	641d      	str	r5, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004048:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800404a:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800404c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800404e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004052:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004054:	69d9      	ldr	r1, [r3, #28]
 8004056:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800405a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004062:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004064:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004066:	2201      	movs	r2, #1
 8004068:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800406c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004070:	4618      	mov	r0, r3
}
 8004072:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004074:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8004076:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800407c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800407e:	4e54      	ldr	r6, [pc, #336]	; (80041d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004080:	f025 0501 	bic.w	r5, r5, #1
 8004084:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004086:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004088:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800408c:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800408e:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004092:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004096:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8004098:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 800409c:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040a0:	d078      	beq.n	8004194 <HAL_TIM_PWM_ConfigChannel+0x1bc>
  TIMx->CCR1 = OC_Config->Pulse;
 80040a2:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80040a4:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80040a8:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80040aa:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80040ac:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040ae:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040b0:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040b2:	f044 0408 	orr.w	r4, r4, #8
 80040b6:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040b8:	6999      	ldr	r1, [r3, #24]
 80040ba:	f021 0104 	bic.w	r1, r1, #4
 80040be:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	432a      	orrs	r2, r5
 80040c4:	619a      	str	r2, [r3, #24]
      break;
 80040c6:	e7cd      	b.n	8004064 <HAL_TIM_PWM_ConfigChannel+0x8c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040c8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040ca:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040cc:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ce:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d0:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 80041d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d4:	f025 0510 	bic.w	r5, r5, #16
 80040d8:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80040da:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80040dc:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80040e0:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80040e2:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040e6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ea:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040ec:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040f4:	d05c      	beq.n	80041b0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
  TIMx->CCR2 = OC_Config->Pulse;
 80040f6:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80040f8:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80040fc:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80040fe:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004100:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004102:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004104:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004106:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800410a:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800410c:	6999      	ldr	r1, [r3, #24]
 800410e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004112:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800411a:	619a      	str	r2, [r3, #24]
      break;
 800411c:	e7a2      	b.n	8004064 <HAL_TIM_PWM_ConfigChannel+0x8c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800411e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004120:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004122:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004124:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004126:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 80041d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800412a:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800412e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004130:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004132:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004136:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004138:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800413c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004140:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004142:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004146:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800414a:	d014      	beq.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x19e>
  TIMx->CCR3 = OC_Config->Pulse;
 800414c:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800414e:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004152:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004154:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004156:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004158:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800415a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800415c:	f044 0408 	orr.w	r4, r4, #8
 8004160:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004162:	69d9      	ldr	r1, [r3, #28]
 8004164:	f021 0104 	bic.w	r1, r1, #4
 8004168:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	432a      	orrs	r2, r5
 800416e:	61da      	str	r2, [r3, #28]
      break;
 8004170:	e778      	b.n	8004064 <HAL_TIM_PWM_ConfigChannel+0x8c>
  __HAL_LOCK(htim);
 8004172:	2002      	movs	r0, #2
}
 8004174:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004176:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800417a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800417c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004180:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004184:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004188:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800418a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800418e:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 8004192:	e7db      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x174>
    tmpcr2 |= OC_Config->OCNIdleState;
 8004194:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 8004198:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800419a:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800419e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 80041a2:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 80041a4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80041a6:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80041aa:	ea45 0c0c 	orr.w	ip, r5, ip
 80041ae:	e778      	b.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0xca>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041b0:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041b4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041ba:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041be:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041c2:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041c8:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 80041cc:	e793      	b.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x11e>
 80041ce:	bf00      	nop
 80041d0:	40010000 	.word	0x40010000

080041d4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80041d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d05a      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80041de:	6803      	ldr	r3, [r0, #0]
{
 80041e0:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80041e2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80041e6:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80041e8:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ea:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80041ee:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 80041f2:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 80041f4:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 80041f6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80041fa:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80041fc:	d074      	beq.n	80042e8 <HAL_TIM_ConfigClockSource+0x114>
 80041fe:	d94a      	bls.n	8004296 <HAL_TIM_ConfigClockSource+0xc2>
 8004200:	2c60      	cmp	r4, #96	; 0x60
 8004202:	d02d      	beq.n	8004260 <HAL_TIM_ConfigClockSource+0x8c>
 8004204:	d956      	bls.n	80042b4 <HAL_TIM_ConfigClockSource+0xe0>
 8004206:	2c70      	cmp	r4, #112	; 0x70
 8004208:	d01a      	beq.n	8004240 <HAL_TIM_ConfigClockSource+0x6c>
 800420a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800420e:	d10e      	bne.n	800422e <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004210:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8004214:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004216:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004218:	432a      	orrs	r2, r5
 800421a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004222:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004224:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800422c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800422e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004230:	2201      	movs	r2, #1
 8004232:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004236:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800423a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800423c:	4618      	mov	r0, r3
}
 800423e:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004240:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8004244:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004246:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004248:	432a      	orrs	r2, r5
 800424a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800424e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004252:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004254:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004256:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004258:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800425c:	609a      	str	r2, [r3, #8]
      break;
 800425e:	e7e6      	b.n	800422e <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004260:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004262:	684d      	ldr	r5, [r1, #4]
 8004264:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004266:	f024 0410 	bic.w	r4, r4, #16
 800426a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800426e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004270:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004274:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004278:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800427c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004280:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004282:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004284:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004286:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800428a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	e7cd      	b.n	800422e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004292:	2002      	movs	r0, #2
}
 8004294:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004296:	2c10      	cmp	r4, #16
 8004298:	d004      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0xd0>
 800429a:	d93d      	bls.n	8004318 <HAL_TIM_ConfigClockSource+0x144>
 800429c:	2c20      	cmp	r4, #32
 800429e:	d001      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0xd0>
 80042a0:	2c30      	cmp	r4, #48	; 0x30
 80042a2:	d1c4      	bne.n	800422e <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 80042a4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042a6:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80042aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ae:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 80042b0:	609c      	str	r4, [r3, #8]
 80042b2:	e7bc      	b.n	800422e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80042b4:	2c50      	cmp	r4, #80	; 0x50
 80042b6:	d1ba      	bne.n	800422e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80042b8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042bc:	684c      	ldr	r4, [r1, #4]
 80042be:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c0:	f026 0601 	bic.w	r6, r6, #1
 80042c4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80042d4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80042d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80042da:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80042e4:	609a      	str	r2, [r3, #8]
 80042e6:	e7a2      	b.n	800422e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80042e8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ea:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ec:	684c      	ldr	r4, [r1, #4]
 80042ee:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f0:	f026 0601 	bic.w	r6, r6, #1
 80042f4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004300:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004304:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8004306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004308:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800430a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800430c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004310:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004314:	609a      	str	r2, [r3, #8]
 8004316:	e78a      	b.n	800422e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004318:	2c00      	cmp	r4, #0
 800431a:	d0c3      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0xd0>
 800431c:	e787      	b.n	800422e <HAL_TIM_ConfigClockSource+0x5a>
 800431e:	bf00      	nop

08004320 <HAL_TIM_PeriodElapsedCallback>:
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop

08004324 <HAL_TIM_OC_DelayElapsedCallback>:
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop

08004328 <HAL_TIM_IC_CaptureCallback>:
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop

0800432c <HAL_TIM_TriggerCallback>:
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop

08004330 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004330:	6803      	ldr	r3, [r0, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	0791      	lsls	r1, r2, #30
{
 8004336:	b510      	push	{r4, lr}
 8004338:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800433a:	d502      	bpl.n	8004342 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	0792      	lsls	r2, r2, #30
 8004340:	d45f      	bmi.n	8004402 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	0750      	lsls	r0, r2, #29
 8004346:	d502      	bpl.n	800434e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	0751      	lsls	r1, r2, #29
 800434c:	d446      	bmi.n	80043dc <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	0712      	lsls	r2, r2, #28
 8004352:	d502      	bpl.n	800435a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	0710      	lsls	r0, r2, #28
 8004358:	d42e      	bmi.n	80043b8 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	06d2      	lsls	r2, r2, #27
 800435e:	d502      	bpl.n	8004366 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	06d0      	lsls	r0, r2, #27
 8004364:	d418      	bmi.n	8004398 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	07d1      	lsls	r1, r2, #31
 800436a:	d502      	bpl.n	8004372 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	07d2      	lsls	r2, r2, #31
 8004370:	d45d      	bmi.n	800442e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	0610      	lsls	r0, r2, #24
 8004376:	d502      	bpl.n	800437e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	0611      	lsls	r1, r2, #24
 800437c:	d45f      	bmi.n	800443e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	0652      	lsls	r2, r2, #25
 8004382:	d502      	bpl.n	800438a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	0650      	lsls	r0, r2, #25
 8004388:	d461      	bmi.n	800444e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	0691      	lsls	r1, r2, #26
 800438e:	d502      	bpl.n	8004396 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	0692      	lsls	r2, r2, #26
 8004394:	d443      	bmi.n	800441e <HAL_TIM_IRQHandler+0xee>
}
 8004396:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004398:	f06f 0210 	mvn.w	r2, #16
 800439c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800439e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80043a8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043aa:	d064      	beq.n	8004476 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80043ac:	f7ff ffbc 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b0:	2200      	movs	r2, #0
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	7722      	strb	r2, [r4, #28]
 80043b6:	e7d6      	b.n	8004366 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b8:	f06f 0208 	mvn.w	r2, #8
 80043bc:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043be:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c2:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c8:	d152      	bne.n	8004470 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	f7ff ffab 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ce:	4620      	mov	r0, r4
 80043d0:	f000 fc6c 	bl	8004cac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d4:	2200      	movs	r2, #0
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	7722      	strb	r2, [r4, #28]
 80043da:	e7be      	b.n	800435a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043dc:	f06f 0204 	mvn.w	r2, #4
 80043e0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ea:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80043ec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ee:	d13c      	bne.n	800446a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f0:	f7ff ff98 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	4620      	mov	r0, r4
 80043f6:	f000 fc59 	bl	8004cac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	2200      	movs	r2, #0
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	7722      	strb	r2, [r4, #28]
 8004400:	e7a5      	b.n	800434e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004402:	f06f 0202 	mvn.w	r2, #2
 8004406:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004408:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800440a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800440c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800440e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004410:	d025      	beq.n	800445e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004412:	f7ff ff89 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004416:	2200      	movs	r2, #0
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	7722      	strb	r2, [r4, #28]
 800441c:	e791      	b.n	8004342 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800441e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004422:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004424:	611a      	str	r2, [r3, #16]
}
 8004426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800442a:	f000 b84d 	b.w	80044c8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800442e:	f06f 0201 	mvn.w	r2, #1
 8004432:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004434:	4620      	mov	r0, r4
 8004436:	f7ff ff73 	bl	8004320 <HAL_TIM_PeriodElapsedCallback>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	e799      	b.n	8004372 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800443e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004442:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004444:	4620      	mov	r0, r4
 8004446:	f000 f841 	bl	80044cc <HAL_TIMEx_BreakCallback>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	e797      	b.n	800437e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800444e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004452:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004454:	4620      	mov	r0, r4
 8004456:	f7ff ff69 	bl	800432c <HAL_TIM_TriggerCallback>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	e795      	b.n	800438a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	f7ff ff61 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004462:	4620      	mov	r0, r4
 8004464:	f000 fc22 	bl	8004cac <HAL_TIM_PWM_PulseFinishedCallback>
 8004468:	e7d5      	b.n	8004416 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	f7ff ff5d 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 800446e:	e7c4      	b.n	80043fa <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004470:	f7ff ff5a 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8004474:	e7ae      	b.n	80043d4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	f7ff ff55 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447a:	4620      	mov	r0, r4
 800447c:	f000 fc16 	bl	8004cac <HAL_TIM_PWM_PulseFinishedCallback>
 8004480:	e796      	b.n	80043b0 <HAL_TIM_IRQHandler+0x80>
 8004482:	bf00      	nop

08004484 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004484:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004488:	2a01      	cmp	r2, #1
 800448a:	d01a      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
{
 800448c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448e:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004490:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004492:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004496:	e9d1 6500 	ldrd	r6, r5, [r1]
 800449a:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 800449c:	6860      	ldr	r0, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 800449e:	68a2      	ldr	r2, [r4, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a0:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80044a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a8:	4331      	orrs	r1, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044aa:	432a      	orrs	r2, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 80044ae:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 80044b0:	6061      	str	r1, [r4, #4]

  return HAL_OK;
 80044b2:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 80044b4:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80044b6:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80044ba:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 80044be:	bc70      	pop	{r4, r5, r6}
 80044c0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80044c2:	2002      	movs	r0, #2
}
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop

080044c8 <HAL_TIMEx_CommutCallback>:
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop

080044cc <HAL_TIMEx_BreakCallback>:
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d0:	2800      	cmp	r0, #0
 80044d2:	f000 8104 	beq.w	80046de <HAL_UART_Init+0x20e>
{
 80044d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80044de:	4604      	mov	r4, r0
 80044e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80f5 	beq.w	80046d4 <HAL_UART_Init+0x204>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044ea:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ec:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80044ee:	2224      	movs	r2, #36	; 0x24
 80044f0:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80044f4:	68d8      	ldr	r0, [r3, #12]
 80044f6:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044fa:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80044fe:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004500:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004502:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004504:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004508:	4329      	orrs	r1, r5
 800450a:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800450c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800450e:	6965      	ldr	r5, [r4, #20]
 8004510:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8004512:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004516:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004518:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800451c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800451e:	430a      	orrs	r2, r1
 8004520:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	69a1      	ldr	r1, [r4, #24]
 8004526:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800452a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004530:	615a      	str	r2, [r3, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004532:	4aaa      	ldr	r2, [pc, #680]	; (80047dc <HAL_UART_Init+0x30c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004534:	d071      	beq.n	800461a <HAL_UART_Init+0x14a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004536:	4293      	cmp	r3, r2
 8004538:	f000 80d3 	beq.w	80046e2 <HAL_UART_Init+0x212>
 800453c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004540:	4293      	cmp	r3, r2
 8004542:	f000 80ce 	beq.w	80046e2 <HAL_UART_Init+0x212>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004546:	f7ff fc15 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 800454a:	4fa5      	ldr	r7, [pc, #660]	; (80047e0 <HAL_UART_Init+0x310>)
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004552:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	fbb0 f3f3 	udiv	r3, r0, r3
 800455c:	fba7 2303 	umull	r2, r3, r7, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	011d      	lsls	r5, r3, #4
 8004564:	f7ff fc06 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 8004568:	6866      	ldr	r6, [r4, #4]
 800456a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800456e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004572:	00b6      	lsls	r6, r6, #2
 8004574:	fbb0 f6f6 	udiv	r6, r0, r6
 8004578:	f7ff fbfc 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 800457c:	6863      	ldr	r3, [r4, #4]
 800457e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004582:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	fbb0 f3f3 	udiv	r3, r0, r3
 800458c:	fba7 2303 	umull	r2, r3, r7, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004596:	fb09 6313 	mls	r3, r9, r3, r6
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	3332      	adds	r3, #50	; 0x32
 800459e:	fba7 2303 	umull	r2, r3, r7, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80045a8:	f7ff fbe4 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 80045ac:	6862      	ldr	r2, [r4, #4]
 80045ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045b6:	0093      	lsls	r3, r2, #2
 80045b8:	fbb0 f8f3 	udiv	r8, r0, r3
 80045bc:	f7ff fbda 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 80045c0:	e9d4 2100 	ldrd	r2, r1, [r4]
 80045c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045c8:	008b      	lsls	r3, r1, #2
 80045ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d2:	fba7 1303 	umull	r1, r3, r7, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	fb09 8313 	mls	r3, r9, r3, r8
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	3332      	adds	r3, #50	; 0x32
 80045e0:	fba7 1303 	umull	r1, r3, r7, r3
 80045e4:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80045e8:	4333      	orrs	r3, r6
 80045ea:	442b      	add	r3, r5
 80045ec:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ee:	6913      	ldr	r3, [r2, #16]
 80045f0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80045f4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f6:	6953      	ldr	r3, [r2, #20]
 80045f8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80045fc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80045fe:	68d3      	ldr	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004600:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004602:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004604:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004608:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800460a:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460c:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800460e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004612:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8004616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800461a:	4293      	cmp	r3, r2
 800461c:	f000 809f 	beq.w	800475e <HAL_UART_Init+0x28e>
 8004620:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004624:	4293      	cmp	r3, r2
 8004626:	f000 809a 	beq.w	800475e <HAL_UART_Init+0x28e>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800462a:	f7ff fba3 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 800462e:	4f6c      	ldr	r7, [pc, #432]	; (80047e0 <HAL_UART_Init+0x310>)
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004636:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004640:	fba7 2303 	umull	r2, r3, r7, r3
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	011e      	lsls	r6, r3, #4
 8004648:	f7ff fb94 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 800464c:	6865      	ldr	r5, [r4, #4]
 800464e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004652:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004656:	006d      	lsls	r5, r5, #1
 8004658:	fbb0 f5f5 	udiv	r5, r0, r5
 800465c:	f7ff fb8a 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004666:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004670:	fba7 2303 	umull	r2, r3, r7, r3
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	f04f 0964 	mov.w	r9, #100	; 0x64
 800467a:	fb09 5313 	mls	r3, r9, r3, r5
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	3332      	adds	r3, #50	; 0x32
 8004682:	fba7 2303 	umull	r2, r3, r7, r3
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 800468c:	f7ff fb72 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 8004690:	6862      	ldr	r2, [r4, #4]
 8004692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004696:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800469a:	0053      	lsls	r3, r2, #1
 800469c:	fbb0 f8f3 	udiv	r8, r0, r3
 80046a0:	f7ff fb68 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 80046a4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80046a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046ac:	004b      	lsls	r3, r1, #1
 80046ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b6:	fba7 1303 	umull	r1, r3, r7, r3
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	fb09 8313 	mls	r3, r9, r3, r8
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	3332      	adds	r3, #50	; 0x32
 80046c4:	fba7 1303 	umull	r1, r3, r7, r3
 80046c8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80046cc:	4433      	add	r3, r6
 80046ce:	442b      	add	r3, r5
 80046d0:	6093      	str	r3, [r2, #8]
 80046d2:	e78c      	b.n	80045ee <HAL_UART_Init+0x11e>
    huart->Lock = HAL_UNLOCKED;
 80046d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80046d8:	f000 fbcc 	bl	8004e74 <HAL_UART_MspInit>
 80046dc:	e705      	b.n	80044ea <HAL_UART_Init+0x1a>
    return HAL_ERROR;
 80046de:	2001      	movs	r0, #1
}
 80046e0:	4770      	bx	lr
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80046e2:	f7ff fb57 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80046e6:	4f3e      	ldr	r7, [pc, #248]	; (80047e0 <HAL_UART_Init+0x310>)
 80046e8:	6863      	ldr	r3, [r4, #4]
 80046ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f8:	fba7 2303 	umull	r2, r3, r7, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	011d      	lsls	r5, r3, #4
 8004700:	f7ff fb48 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8004704:	6866      	ldr	r6, [r4, #4]
 8004706:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800470a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800470e:	00b6      	lsls	r6, r6, #2
 8004710:	fbb0 f6f6 	udiv	r6, r0, r6
 8004714:	f7ff fb3e 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800471e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	fbb0 f3f3 	udiv	r3, r0, r3
 8004728:	fba7 2303 	umull	r2, r3, r7, r3
 800472c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	fb09 6313 	mls	r3, r9, r3, r6
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	3332      	adds	r3, #50	; 0x32
 800473a:	fba7 2303 	umull	r2, r3, r7, r3
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8004744:	f7ff fb26 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8004748:	6862      	ldr	r2, [r4, #4]
 800474a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800474e:	0093      	lsls	r3, r2, #2
 8004750:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004754:	fbb0 f8f3 	udiv	r8, r0, r3
 8004758:	f7ff fb1c 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 800475c:	e730      	b.n	80045c0 <HAL_UART_Init+0xf0>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800475e:	f7ff fb19 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8004762:	4f1f      	ldr	r7, [pc, #124]	; (80047e0 <HAL_UART_Init+0x310>)
 8004764:	6863      	ldr	r3, [r4, #4]
 8004766:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800476a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fbb0 f3f3 	udiv	r3, r0, r3
 8004774:	fba7 2303 	umull	r2, r3, r7, r3
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	011e      	lsls	r6, r3, #4
 800477c:	f7ff fb0a 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8004780:	6865      	ldr	r5, [r4, #4]
 8004782:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004786:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800478a:	006d      	lsls	r5, r5, #1
 800478c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004790:	f7ff fb00 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8004794:	6863      	ldr	r3, [r4, #4]
 8004796:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800479a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a4:	fba7 2303 	umull	r2, r3, r7, r3
 80047a8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	fb09 5313 	mls	r3, r9, r3, r5
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	3332      	adds	r3, #50	; 0x32
 80047b6:	fba7 2303 	umull	r2, r3, r7, r3
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 80047c0:	f7ff fae8 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80047c4:	6862      	ldr	r2, [r4, #4]
 80047c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80047ca:	0053      	lsls	r3, r2, #1
 80047cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80047d0:	fbb0 f8f3 	udiv	r8, r0, r3
 80047d4:	f7ff fade 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80047d8:	e764      	b.n	80046a4 <HAL_UART_Init+0x1d4>
 80047da:	bf00      	nop
 80047dc:	40011000 	.word	0x40011000
 80047e0:	51eb851f 	.word	0x51eb851f

080047e4 <HAL_UART_Transmit>:
{
 80047e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e6:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80047e8:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80047ec:	2920      	cmp	r1, #32
{
 80047ee:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80047f0:	d12d      	bne.n	800484e <HAL_UART_Transmit+0x6a>
    if ((pData == NULL) || (Size == 0U))
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	d02e      	beq.n	8004854 <HAL_UART_Transmit+0x70>
 80047f6:	9201      	str	r2, [sp, #4]
 80047f8:	b362      	cbz	r2, 8004854 <HAL_UART_Transmit+0x70>
 80047fa:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 80047fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004800:	2b01      	cmp	r3, #1
 8004802:	4604      	mov	r4, r0
 8004804:	d023      	beq.n	800484e <HAL_UART_Transmit+0x6a>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004806:	2300      	movs	r3, #0
 8004808:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 800480a:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800480e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004812:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8004816:	f7fe f941 	bl	8002a9c <HAL_GetTick>
    huart->TxXferSize = Size;
 800481a:	9a01      	ldr	r2, [sp, #4]
 800481c:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800481e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004820:	6822      	ldr	r2, [r4, #0]
    tickstart = HAL_GetTick();
 8004822:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 8004824:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d039      	beq.n	80048a0 <HAL_UART_Transmit+0xbc>
      huart->TxXferCount--;
 800482c:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800482e:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8004830:	3801      	subs	r0, #1
 8004832:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004834:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8004838:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800483a:	d019      	beq.n	8004870 <HAL_UART_Transmit+0x8c>
 800483c:	1c78      	adds	r0, r7, #1
 800483e:	d13b      	bne.n	80048b8 <HAL_UART_Transmit+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004840:	6810      	ldr	r0, [r2, #0]
 8004842:	0601      	lsls	r1, r0, #24
 8004844:	d5fc      	bpl.n	8004840 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004846:	7833      	ldrb	r3, [r6, #0]
 8004848:	6053      	str	r3, [r2, #4]
 800484a:	3601      	adds	r6, #1
 800484c:	e7ea      	b.n	8004824 <HAL_UART_Transmit+0x40>
    return HAL_BUSY;
 800484e:	2002      	movs	r0, #2
}
 8004850:	b003      	add	sp, #12
 8004852:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8004854:	2001      	movs	r0, #1
}
 8004856:	b003      	add	sp, #12
 8004858:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	d40c      	bmi.n	800487a <HAL_UART_Transmit+0x96>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004860:	2f00      	cmp	r7, #0
 8004862:	d033      	beq.n	80048cc <HAL_UART_Transmit+0xe8>
 8004864:	f7fe f91a 	bl	8002a9c <HAL_GetTick>
 8004868:	1b40      	subs	r0, r0, r5
 800486a:	4287      	cmp	r7, r0
 800486c:	6822      	ldr	r2, [r4, #0]
 800486e:	d32d      	bcc.n	80048cc <HAL_UART_Transmit+0xe8>
 8004870:	1c78      	adds	r0, r7, #1
 8004872:	d1f2      	bne.n	800485a <HAL_UART_Transmit+0x76>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004874:	6810      	ldr	r0, [r2, #0]
 8004876:	0601      	lsls	r1, r0, #24
 8004878:	d5fc      	bpl.n	8004874 <HAL_UART_Transmit+0x90>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800487a:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800487c:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800487e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004882:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004884:	2900      	cmp	r1, #0
 8004886:	d1e0      	bne.n	800484a <HAL_UART_Transmit+0x66>
          pData += 2U;
 8004888:	3602      	adds	r6, #2
 800488a:	e7cb      	b.n	8004824 <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488c:	6813      	ldr	r3, [r2, #0]
 800488e:	065b      	lsls	r3, r3, #25
 8004890:	d40b      	bmi.n	80048aa <HAL_UART_Transmit+0xc6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004892:	b1df      	cbz	r7, 80048cc <HAL_UART_Transmit+0xe8>
 8004894:	f7fe f902 	bl	8002a9c <HAL_GetTick>
 8004898:	1b40      	subs	r0, r0, r5
 800489a:	4287      	cmp	r7, r0
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	d315      	bcc.n	80048cc <HAL_UART_Transmit+0xe8>
 80048a0:	1c78      	adds	r0, r7, #1
 80048a2:	d1f3      	bne.n	800488c <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a4:	6813      	ldr	r3, [r2, #0]
 80048a6:	0659      	lsls	r1, r3, #25
 80048a8:	d5fc      	bpl.n	80048a4 <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 80048aa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80048ac:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 80048ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80048b2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80048b6:	e7cb      	b.n	8004850 <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b8:	6813      	ldr	r3, [r2, #0]
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	d4c3      	bmi.n	8004846 <HAL_UART_Transmit+0x62>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048be:	b12f      	cbz	r7, 80048cc <HAL_UART_Transmit+0xe8>
 80048c0:	f7fe f8ec 	bl	8002a9c <HAL_GetTick>
 80048c4:	1b40      	subs	r0, r0, r5
 80048c6:	4287      	cmp	r7, r0
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	d2b7      	bcs.n	800483c <HAL_UART_Transmit+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048cc:	68d3      	ldr	r3, [r2, #12]
 80048ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048d2:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d4:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80048d6:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d8:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 80048dc:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 80048de:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e0:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80048e2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 80048e6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 80048ea:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80048ee:	b003      	add	sp, #12
 80048f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f2:	bf00      	nop

080048f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048f4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048f6:	2400      	movs	r4, #0
{
 80048f8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048fa:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80048fe:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004902:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004906:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800490a:	4a1c      	ldr	r2, [pc, #112]	; (800497c <SystemClock_Config+0x88>)
 800490c:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800490e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004910:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <SystemClock_Config+0x8c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800491a:	6411      	str	r1, [r2, #64]	; 0x40
 800491c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800491e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004922:	9201      	str	r2, [sp, #4]
 8004924:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004926:	9402      	str	r4, [sp, #8]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004932:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004934:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004938:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800493a:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800493c:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800493e:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004940:	f44f 71a8 	mov.w	r1, #336	; 0x150
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004944:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004946:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004948:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800494a:	2304      	movs	r3, #4
 800494c:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004950:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004952:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004954:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004956:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004958:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800495a:	f7fe ff81 	bl	8003860 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800495e:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004964:	a803      	add	r0, sp, #12
 8004966:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004968:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800496c:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800496e:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004970:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004972:	f7ff f965 	bl	8003c40 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8004976:	b015      	add	sp, #84	; 0x54
 8004978:	bd30      	pop	{r4, r5, pc}
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800
 8004980:	40007000 	.word	0x40007000

08004984 <main>:
{
 8004984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004988:	2500      	movs	r5, #0
{
 800498a:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 800498c:	f7fe f860 	bl	8002a50 <HAL_Init>
  SystemClock_Config();
 8004990:	f7ff ffb0 	bl	80048f4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
 8004998:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800499c:	4baf      	ldr	r3, [pc, #700]	; (8004c5c <main+0x2d8>)
 800499e:	9503      	str	r5, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a0:	9511      	str	r5, [sp, #68]	; 0x44
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80049a4:	48ae      	ldr	r0, [pc, #696]	; (8004c60 <main+0x2dc>)
  hi2c2.Instance = I2C2;
 80049a6:	4faf      	ldr	r7, [pc, #700]	; (8004c64 <main+0x2e0>)
  htim3.Instance = TIM3;
 80049a8:	4caf      	ldr	r4, [pc, #700]	; (8004c68 <main+0x2e4>)
  htim4.Instance = TIM4;
 80049aa:	4eb0      	ldr	r6, [pc, #704]	; (8004c6c <main+0x2e8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
 80049b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80049b8:	9203      	str	r2, [sp, #12]
 80049ba:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049bc:	9504      	str	r5, [sp, #16]
 80049be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c0:	f042 0204 	orr.w	r2, r2, #4
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
 80049c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c8:	f002 0204 	and.w	r2, r2, #4
 80049cc:	9204      	str	r2, [sp, #16]
 80049ce:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049d0:	9505      	str	r5, [sp, #20]
 80049d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
 80049da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049dc:	f002 0201 	and.w	r2, r2, #1
 80049e0:	9205      	str	r2, [sp, #20]
 80049e2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049e4:	9506      	str	r5, [sp, #24]
 80049e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e8:	f042 0202 	orr.w	r2, r2, #2
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80049f6:	462a      	mov	r2, r5
 80049f8:	2101      	movs	r1, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049fa:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80049fc:	f7fe f9b6 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004a00:	462a      	mov	r2, r5
 8004a02:	2120      	movs	r1, #32
 8004a04:	489a      	ldr	r0, [pc, #616]	; (8004c70 <main+0x2ec>)
 8004a06:	f7fe f9b1 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a0a:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a0e:	a90d      	add	r1, sp, #52	; 0x34
 8004a10:	4893      	ldr	r0, [pc, #588]	; (8004c60 <main+0x2dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a12:	e9cd 880d 	strd	r8, r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a16:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a1a:	f7fe f8c7 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a1e:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a20:	a90d      	add	r1, sp, #52	; 0x34
 8004a22:	4893      	ldr	r0, [pc, #588]	; (8004c70 <main+0x2ec>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a24:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	e9cd 850e 	strd	r8, r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2a:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2c:	f7fe f8be 	bl	8002bac <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8004a30:	4b90      	ldr	r3, [pc, #576]	; (8004c74 <main+0x2f0>)
 8004a32:	4991      	ldr	r1, [pc, #580]	; (8004c78 <main+0x2f4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a34:	609d      	str	r5, [r3, #8]
  huart2.Init.BaudRate = 115200;
 8004a36:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a3a:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a3c:	f04f 080c 	mov.w	r8, #12
  huart2.Init.BaudRate = 115200;
 8004a40:	e9c3 1200 	strd	r1, r2, [r3]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a44:	e9c3 5503 	strd	r5, r5, [r3, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a48:	e9c3 5506 	strd	r5, r5, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a4c:	f8c3 8014 	str.w	r8, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a50:	f7ff fd3e 	bl	80044d0 <HAL_UART_Init>
  hi2c2.Instance = I2C2;
 8004a54:	4989      	ldr	r1, [pc, #548]	; (8004c7c <main+0x2f8>)
  hi2c2.Init.ClockSpeed = 400000;
 8004a56:	4a8a      	ldr	r2, [pc, #552]	; (8004c80 <main+0x2fc>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a58:	60bd      	str	r5, [r7, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004a5e:	4638      	mov	r0, r7
  hi2c2.Init.ClockSpeed = 400000;
 8004a60:	e9c7 1200 	strd	r1, r2, [r7]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a64:	613b      	str	r3, [r7, #16]
  hi2c2.Init.OwnAddress1 = 0;
 8004a66:	60fd      	str	r5, [r7, #12]
  hi2c2.Init.OwnAddress2 = 0;
 8004a68:	e9c7 5505 	strd	r5, r5, [r7, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a6c:	e9c7 5507 	strd	r5, r5, [r7, #28]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004a70:	f7fe f988 	bl	8002d84 <HAL_I2C_Init>
  htim3.Instance = TIM3;
 8004a74:	4983      	ldr	r1, [pc, #524]	; (8004c84 <main+0x300>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a76:	950d      	str	r5, [sp, #52]	; 0x34
  htim3.Init.Prescaler = 10;
 8004a78:	220a      	movs	r2, #10
  htim3.Init.Period = 65535;
 8004a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004a7e:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 10;
 8004a80:	e9c4 1200 	strd	r1, r2, [r4]
  htim3.Init.Period = 65535;
 8004a84:	60e3      	str	r3, [r4, #12]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a86:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a8a:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
 8004a8e:	9510      	str	r5, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a90:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a94:	60a5      	str	r5, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a96:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a98:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004a9a:	f7ff f98b 	bl	8003db4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004a9e:	a90d      	add	r1, sp, #52	; 0x34
 8004aa0:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004aa2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004aa6:	f7ff fb95 	bl	80041d4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004aaa:	a909      	add	r1, sp, #36	; 0x24
 8004aac:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aae:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ab2:	f7ff fce7 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
  htim4.Instance = TIM4;
 8004ab6:	4b74      	ldr	r3, [pc, #464]	; (8004c88 <main+0x304>)
 8004ab8:	6033      	str	r3, [r6, #0]
  htim4.Init.Prescaler = 9;
 8004aba:	2209      	movs	r2, #9
  htim4.Init.Period = 8000;
 8004abc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004ac0:	4630      	mov	r0, r6
  htim4.Init.Prescaler = 9;
 8004ac2:	6072      	str	r2, [r6, #4]
  htim4.Init.Period = 8000;
 8004ac4:	60f3      	str	r3, [r6, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ac6:	9509      	str	r5, [sp, #36]	; 0x24
 8004ac8:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8004acc:	950c      	str	r5, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ace:	9507      	str	r5, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ad0:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
 8004ad4:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
 8004ad8:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
 8004adc:	9513      	str	r5, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ade:	9508      	str	r5, [sp, #32]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ae0:	60b5      	str	r5, [r6, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae2:	6135      	str	r5, [r6, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ae4:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004ae6:	f7ff f965 	bl	8003db4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004aea:	a909      	add	r1, sp, #36	; 0x24
 8004aec:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004aee:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004af2:	f7ff fb6f 	bl	80041d4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004af6:	4630      	mov	r0, r6
 8004af8:	f7ff f9cc 	bl	8003e94 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004afc:	a907      	add	r1, sp, #28
 8004afe:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b00:	e9cd 5507 	strd	r5, r5, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b04:	f7ff fcbe 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b08:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b0a:	462a      	mov	r2, r5
 8004b0c:	a90d      	add	r1, sp, #52	; 0x34
 8004b0e:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b10:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b12:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b16:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b18:	f7ff fa5e 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b1c:	a90d      	add	r1, sp, #52	; 0x34
 8004b1e:	2204      	movs	r2, #4
 8004b20:	4630      	mov	r0, r6
 8004b22:	f7ff fa59 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b26:	a90d      	add	r1, sp, #52	; 0x34
 8004b28:	2208      	movs	r2, #8
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f7ff fa54 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b30:	4642      	mov	r2, r8
 8004b32:	a90d      	add	r1, sp, #52	; 0x34
 8004b34:	4630      	mov	r0, r6
 8004b36:	f7ff fa4f 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f000 f970 	bl	8004e20 <HAL_TIM_MspPostInit>
	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 8004b40:	4638      	mov	r0, r7
 8004b42:	f7fc fa09 	bl	8000f58 <imu_init>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	f000 8085 	beq.w	8004c56 <main+0x2d2>
	volatile int count = 0;
 8004b4c:	2500      	movs	r5, #0
	HAL_TIM_Base_Start_IT(&htim3); //Start timer 3 in interrupt mode
 8004b4e:	4846      	ldr	r0, [pc, #280]	; (8004c68 <main+0x2e4>)
	volatile int count = 0;
 8004b50:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3); //Start timer 3 in interrupt mode
 8004b52:	f7ff f98d 	bl	8003e70 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); //Start up PWM
 8004b56:	4629      	mov	r1, r5
 8004b58:	4844      	ldr	r0, [pc, #272]	; (8004c6c <main+0x2e8>)
 8004b5a:	4d4c      	ldr	r5, [pc, #304]	; (8004c8c <main+0x308>)
 8004b5c:	f8df a140 	ldr.w	sl, [pc, #320]	; 8004ca0 <main+0x31c>
 8004b60:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8004ca4 <main+0x320>
 8004b64:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8004ca8 <main+0x324>
 8004b68:	4f49      	ldr	r7, [pc, #292]	; (8004c90 <main+0x30c>)
 8004b6a:	f7ff f9f1 	bl	8003f50 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2); //Start up PWM
 8004b6e:	2104      	movs	r1, #4
 8004b70:	483e      	ldr	r0, [pc, #248]	; (8004c6c <main+0x2e8>)
 8004b72:	f7ff f9ed 	bl	8003f50 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3); //Start up PWM
 8004b76:	2108      	movs	r1, #8
 8004b78:	483c      	ldr	r0, [pc, #240]	; (8004c6c <main+0x2e8>)
 8004b7a:	f7ff f9e9 	bl	8003f50 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); //Start up PWM
 8004b7e:	210c      	movs	r1, #12
 8004b80:	483a      	ldr	r0, [pc, #232]	; (8004c6c <main+0x2e8>)
 8004b82:	f7ff f9e5 	bl	8003f50 <HAL_TIM_PWM_Start_IT>
			count = htim3.Instance->CNT; //read TIM3 counter value
 8004b86:	6823      	ldr	r3, [r4, #0]
		if (getRPY_flag = 1) {
 8004b88:	4a42      	ldr	r2, [pc, #264]	; (8004c94 <main+0x310>)
 8004b8a:	f04f 0101 	mov.w	r1, #1
 8004b8e:	7011      	strb	r1, [r2, #0]
			count = htim3.Instance->CNT; //read TIM3 counter value
 8004b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b92:	9209      	str	r2, [sp, #36]	; 0x24
			timer1 = htim3.Instance->CNT;
 8004b94:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
			calc_RollPitchYaw(count);
 8004b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b9a:	f7fd fc5d 	bl	8002458 <calc_RollPitchYaw>
			timer2 = htim3.Instance->CNT;
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			difference = timer2 - timer1;
 8004ba2:	eba3 030b 	sub.w	r3, r3, fp
 8004ba6:	930d      	str	r3, [sp, #52]	; 0x34
			imu_roll = get_roll();
 8004ba8:	f7fc fa12 	bl	8000fd0 <get_roll>
 8004bac:	ed85 0a00 	vstr	s0, [r5]
			imu_pitch = get_pitch();
 8004bb0:	f7fc fa14 	bl	8000fdc <get_pitch>
			count = htim3.Instance->CNT;
 8004bb4:	6823      	ldr	r3, [r4, #0]
			imu_pitch = get_pitch();
 8004bb6:	4a38      	ldr	r2, [pc, #224]	; (8004c98 <main+0x314>)
			count = htim3.Instance->CNT;
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	9309      	str	r3, [sp, #36]	; 0x24
			imu_pitch = get_pitch();
 8004bbc:	ed82 0a00 	vstr	s0, [r2]
			pid_output_roll = pid_calculate_roll(imu_roll, count);
 8004bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bc2:	ed95 0a00 	vldr	s0, [r5]
 8004bc6:	f7fd fec1 	bl	800294c <pid_calculate_roll>
			PWM4_Set(ESC_MIN + esc4_throttle + pid_output_roll); //PWM4 = Front right, CW
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	9301      	str	r3, [sp, #4]
			PWM1_Set(ESC_MIN + esc1_throttle - pid_output_roll); //PWM1 = Back left, CW
 8004bce:	f8da 0000 	ldr.w	r0, [sl]
			pid_output_roll = pid_calculate_roll(imu_roll, count);
 8004bd2:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <main+0x318>)
			PWM3_Set(ESC_MIN + esc3_throttle + pid_output_roll); //PWM3 = Back right, CCW
 8004bd4:	f8d8 2000 	ldr.w	r2, [r8]
			pid_output_roll = pid_calculate_roll(imu_roll, count);
 8004bd8:	ed83 0a00 	vstr	s0, [r3]
			PWM1_Set(ESC_MIN + esc1_throttle - pid_output_roll); //PWM1 = Back left, CW
 8004bdc:	f200 4324 	addw	r3, r0, #1060	; 0x424
 8004be0:	ee06 3a10 	vmov	s12, r3
			PWM2_Set(ESC_MIN + esc2_throttle - pid_output_roll); //PWM2 = Front left, CCW
 8004be4:	f8d9 3000 	ldr.w	r3, [r9]

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8004be8:	6831      	ldr	r1, [r6, #0]
			PWM2_Set(ESC_MIN + esc2_throttle - pid_output_roll); //PWM2 = Front left, CCW
 8004bea:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004bee:	ee06 3a90 	vmov	s13, r3
			PWM3_Set(ESC_MIN + esc3_throttle + pid_output_roll); //PWM3 = Back right, CCW
 8004bf2:	f202 4324 	addw	r3, r2, #1060	; 0x424
 8004bf6:	ee07 3a10 	vmov	s14, r3
			PWM1_Set(ESC_MIN + esc1_throttle - pid_output_roll); //PWM1 = Back left, CW
 8004bfa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
			PWM4_Set(ESC_MIN + esc4_throttle + pid_output_roll); //PWM4 = Front right, CW
 8004bfe:	9b01      	ldr	r3, [sp, #4]
			PWM1_Set(ESC_MIN + esc1_throttle - pid_output_roll); //PWM1 = Back left, CW
 8004c00:	ee36 6a40 	vsub.f32	s12, s12, s0
			PWM4_Set(ESC_MIN + esc4_throttle + pid_output_roll); //PWM4 = Front right, CW
 8004c04:	f203 4324 	addw	r3, r3, #1060	; 0x424
			PWM2_Set(ESC_MIN + esc2_throttle - pid_output_roll); //PWM2 = Front left, CCW
 8004c08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			PWM4_Set(ESC_MIN + esc4_throttle + pid_output_roll); //PWM4 = Front right, CW
 8004c0c:	ee07 3a90 	vmov	s15, r3
			PWM2_Set(ESC_MIN + esc2_throttle - pid_output_roll); //PWM2 = Front left, CCW
 8004c10:	ee76 6ac0 	vsub.f32	s13, s13, s0
			PWM1_Set(ESC_MIN + esc1_throttle - pid_output_roll); //PWM1 = Back left, CW
 8004c14:	eebc 6ac6 	vcvt.u32.f32	s12, s12
			PWM4_Set(ESC_MIN + esc4_throttle + pid_output_roll); //PWM4 = Front right, CW
 8004c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			PWM3_Set(ESC_MIN + esc3_throttle + pid_output_roll); //PWM3 = Back right, CCW
 8004c1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	htim4.Instance->CCR1 = value;
 8004c20:	ee16 3a10 	vmov	r3, s12
			PWM2_Set(ESC_MIN + esc2_throttle - pid_output_roll); //PWM2 = Front left, CCW
 8004c24:	eefc 6ae6 	vcvt.u32.f32	s13, s13
			PWM3_Set(ESC_MIN + esc3_throttle + pid_output_roll); //PWM3 = Back right, CCW
 8004c28:	ee37 7a00 	vadd.f32	s14, s14, s0
			PWM4_Set(ESC_MIN + esc4_throttle + pid_output_roll); //PWM4 = Front right, CW
 8004c2c:	ee37 0a80 	vadd.f32	s0, s15, s0
	htim4.Instance->CCR1 = value;
 8004c30:	b29a      	uxth	r2, r3
}

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8004c32:	ee16 3a90 	vmov	r3, s13
			PWM3_Set(ESC_MIN + esc3_throttle + pid_output_roll); //PWM3 = Back right, CCW
 8004c36:	eefc 7ac7 	vcvt.u32.f32	s15, s14
			PWM4_Set(ESC_MIN + esc4_throttle + pid_output_roll); //PWM4 = Front right, CW
 8004c3a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	htim4.Instance->CCR2 = value;
 8004c3e:	b29b      	uxth	r3, r3
	htim4.Instance->CCR1 = value;
 8004c40:	634a      	str	r2, [r1, #52]	; 0x34
	htim4.Instance->CCR2 = value;
 8004c42:	638b      	str	r3, [r1, #56]	; 0x38

}

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8004c44:	ee17 2a90 	vmov	r2, s15

}

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8004c48:	ee10 3a10 	vmov	r3, s0
	htim4.Instance->CCR3 = value;
 8004c4c:	b292      	uxth	r2, r2
	htim4.Instance->CCR4 = value;
 8004c4e:	b29b      	uxth	r3, r3
	htim4.Instance->CCR3 = value;
 8004c50:	63ca      	str	r2, [r1, #60]	; 0x3c
	htim4.Instance->CCR4 = value;
 8004c52:	640b      	str	r3, [r1, #64]	; 0x40
 8004c54:	e797      	b.n	8004b86 <main+0x202>
		imu_calibrate();
 8004c56:	f7fd f93d 	bl	8001ed4 <imu_calibrate>
 8004c5a:	e777      	b.n	8004b4c <main+0x1c8>
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40020800 	.word	0x40020800
 8004c64:	200002c8 	.word	0x200002c8
 8004c68:	20000414 	.word	0x20000414
 8004c6c:	200003d4 	.word	0x200003d4
 8004c70:	40020000 	.word	0x40020000
 8004c74:	20000358 	.word	0x20000358
 8004c78:	40004400 	.word	0x40004400
 8004c7c:	40005800 	.word	0x40005800
 8004c80:	00061a80 	.word	0x00061a80
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	2000045c 	.word	0x2000045c
 8004c90:	20000044 	.word	0x20000044
 8004c94:	20000298 	.word	0x20000298
 8004c98:	20000460 	.word	0x20000460
 8004c9c:	200003d0 	.word	0x200003d0
 8004ca0:	20000038 	.word	0x20000038
 8004ca4:	2000003c 	.word	0x2000003c
 8004ca8:	20000040 	.word	0x20000040

08004cac <HAL_TIM_PWM_PulseFinishedCallback>:

}

//This is called when each PWM pulse finishes, ie the falling edge of each pulse
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004cac:	b508      	push	{r3, lr}

	if (htim->Instance == TIM4) {
 8004cae:	6802      	ldr	r2, [r0, #0]
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d000      	beq.n	8004cb8 <HAL_TIM_PWM_PulseFinishedCallback+0xc>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0); //Does this go high/low in sync with PWM rising edge??
		getRPY_flag = 1;
	}
}
 8004cb6:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0); //Does this go high/low in sync with PWM rising edge??
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4804      	ldr	r0, [pc, #16]	; (8004ccc <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8004cbc:	f7fe f85a 	bl	8002d74 <HAL_GPIO_TogglePin>
		getRPY_flag = 1;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
}
 8004cc6:	bd08      	pop	{r3, pc}
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40020800 	.word	0x40020800
 8004cd0:	20000298 	.word	0x20000298

08004cd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cd4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <HAL_MspInit+0x38>)
 8004cd8:	2100      	movs	r1, #0
 8004cda:	9100      	str	r1, [sp, #0]
 8004cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
 8004ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004cea:	9200      	str	r2, [sp, #0]
 8004cec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cee:	9101      	str	r1, [sp, #4]
 8004cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004d02:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d04:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004d06:	f7fd bee1 	b.w	8002acc <HAL_NVIC_SetPriorityGrouping>
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800

08004d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C2)
 8004d14:	6802      	ldr	r2, [r0, #0]
 8004d16:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <HAL_I2C_MspInit+0x88>)
{
 8004d18:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d1a:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C2)
 8004d1c:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d1e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004d22:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004d26:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C2)
 8004d28:	d002      	beq.n	8004d30 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004d2a:	b008      	add	sp, #32
 8004d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d30:	4d1a      	ldr	r5, [pc, #104]	; (8004d9c <HAL_I2C_MspInit+0x8c>)
 8004d32:	9401      	str	r4, [sp, #4]
 8004d34:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d36:	481a      	ldr	r0, [pc, #104]	; (8004da0 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	632b      	str	r3, [r5, #48]	; 0x30
 8004d3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d4a:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d4e:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d50:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004d52:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d54:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d56:	9203      	str	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d58:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004d5a:	e9cd 6306 	strd	r6, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d5e:	e9cd 8704 	strd	r8, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d62:	f7fd ff23 	bl	8002bac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004d66:	2208      	movs	r2, #8
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004d68:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d6a:	a903      	add	r1, sp, #12
 8004d6c:	480c      	ldr	r0, [pc, #48]	; (8004da0 <HAL_I2C_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004d6e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d70:	e9cd 8704 	strd	r8, r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d74:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004d76:	9203      	str	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d78:	f7fd ff18 	bl	8002bac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004d7c:	9402      	str	r4, [sp, #8]
 8004d7e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d84:	642b      	str	r3, [r5, #64]	; 0x40
 8004d86:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8c:	9302      	str	r3, [sp, #8]
 8004d8e:	9b02      	ldr	r3, [sp, #8]
}
 8004d90:	b008      	add	sp, #32
 8004d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d96:	bf00      	nop
 8004d98:	40005800 	.word	0x40005800
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40020400 	.word	0x40020400

08004da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004da4:	b500      	push	{lr}
  if(htim_base->Instance==TIM3)
 8004da6:	6803      	ldr	r3, [r0, #0]
 8004da8:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <HAL_TIM_Base_MspInit+0x70>)
 8004daa:	4293      	cmp	r3, r2
{
 8004dac:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8004dae:	d01b      	beq.n	8004de8 <HAL_TIM_Base_MspInit+0x44>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8004db0:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <HAL_TIM_Base_MspInit+0x74>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d002      	beq.n	8004dbc <HAL_TIM_Base_MspInit+0x18>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004db6:	b003      	add	sp, #12
 8004db8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <HAL_TIM_Base_MspInit+0x78>)
 8004dc0:	9201      	str	r2, [sp, #4]
 8004dc2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004dc4:	f041 0104 	orr.w	r1, r1, #4
 8004dc8:	6419      	str	r1, [r3, #64]	; 0x40
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004dd6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004dd8:	f7fd fe8a 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ddc:	201e      	movs	r0, #30
}
 8004dde:	b003      	add	sp, #12
 8004de0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004de4:	f7fd beba 	b.w	8002b5c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004de8:	2200      	movs	r2, #0
 8004dea:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <HAL_TIM_Base_MspInit+0x78>)
 8004dec:	9200      	str	r2, [sp, #0]
 8004dee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004df0:	f041 0102 	orr.w	r1, r1, #2
 8004df4:	6419      	str	r1, [r3, #64]	; 0x40
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004dfe:	4611      	mov	r1, r2
 8004e00:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e02:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004e04:	f7fd fe74 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e08:	201d      	movs	r0, #29
}
 8004e0a:	b003      	add	sp, #12
 8004e0c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004e10:	f7fd bea4 	b.w	8002b5c <HAL_NVIC_EnableIRQ>
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40023800 	.word	0x40023800

08004e20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e20:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM4)
 8004e22:	6801      	ldr	r1, [r0, #0]
 8004e24:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <HAL_TIM_MspPostInit+0x4c>)
{
 8004e26:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e28:	2300      	movs	r3, #0
  if(htim->Instance==TIM4)
 8004e2a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e2c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8004e30:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8004e34:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8004e36:	d001      	beq.n	8004e3c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004e38:	b006      	add	sp, #24
 8004e3a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e3c:	f502 320c 	add.w	r2, r2, #143360	; 0x23000
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e44:	480a      	ldr	r0, [pc, #40]	; (8004e70 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e46:	f043 0302 	orr.w	r3, r3, #2
 8004e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004e54:	f44f 7270 	mov.w	r2, #960	; 0x3c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e58:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e5a:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5c:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e5e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e60:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e64:	f7fd fea2 	bl	8002bac <HAL_GPIO_Init>
}
 8004e68:	b006      	add	sp, #24
 8004e6a:	bd10      	pop	{r4, pc}
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40020400 	.word	0x40020400

08004e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e74:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8004e76:	6801      	ldr	r1, [r0, #0]
 8004e78:	4a18      	ldr	r2, [pc, #96]	; (8004edc <HAL_UART_MspInit+0x68>)
{
 8004e7a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7c:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8004e7e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e80:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8004e84:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004e88:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8004e8a:	d001      	beq.n	8004e90 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e8c:	b008      	add	sp, #32
 8004e8e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e90:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e98:	4811      	ldr	r0, [pc, #68]	; (8004ee0 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e9a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004e9e:	6411      	str	r1, [r2, #64]	; 0x40
 8004ea0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004ea2:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8004ea6:	9101      	str	r1, [sp, #4]
 8004ea8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eaa:	9302      	str	r3, [sp, #8]
 8004eac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ebc:	230c      	movs	r3, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ebe:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ec0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ec4:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec6:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ec8:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eca:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ecc:	e9cd 5404 	strd	r5, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ed0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed4:	f7fd fe6a 	bl	8002bac <HAL_GPIO_Init>
}
 8004ed8:	b008      	add	sp, #32
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	40004400 	.word	0x40004400
 8004ee0:	40020000 	.word	0x40020000

08004ee4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop

08004ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ee8:	e7fe      	b.n	8004ee8 <HardFault_Handler>
 8004eea:	bf00      	nop

08004eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004eec:	e7fe      	b.n	8004eec <MemManage_Handler>
 8004eee:	bf00      	nop

08004ef0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ef0:	e7fe      	b.n	8004ef0 <BusFault_Handler>
 8004ef2:	bf00      	nop

08004ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ef4:	e7fe      	b.n	8004ef4 <UsageFault_Handler>
 8004ef6:	bf00      	nop

08004ef8 <SVC_Handler>:
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop

08004efc <DebugMon_Handler>:
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop

08004f00 <PendSV_Handler>:
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop

08004f04 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f04:	f7fd bdbe 	b.w	8002a84 <HAL_IncTick>

08004f08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f08:	b508      	push	{r3, lr}
	//flash led??
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so


	//printftest();
	timer_reset();
 8004f0a:	f7fc f86d 	bl	8000fe8 <timer_reset>

  /* USER CODE END TIM3_IRQn 0 */
    HAL_TIM_IRQHandler(&htim3);
 8004f0e:	4802      	ldr	r0, [pc, #8]	; (8004f18 <TIM3_IRQHandler+0x10>)
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_TIM_IRQHandler(&htim3);
 8004f14:	f7ff ba0c 	b.w	8004330 <HAL_TIM_IRQHandler>
 8004f18:	20000414 	.word	0x20000414

08004f1c <TIM4_IRQHandler>:
{
  /* USER CODE BEGIN TIM4_IRQn 0 */
	 //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <TIM4_IRQHandler+0x8>)
 8004f1e:	f7ff ba07 	b.w	8004330 <HAL_TIM_IRQHandler>
 8004f22:	bf00      	nop
 8004f24:	200003d4 	.word	0x200003d4

08004f28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f28:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f2a:	1e16      	subs	r6, r2, #0
 8004f2c:	dd07      	ble.n	8004f3e <_read+0x16>
 8004f2e:	460c      	mov	r4, r1
 8004f30:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8004f32:	f3af 8000 	nop.w
 8004f36:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f3a:	42a5      	cmp	r5, r4
 8004f3c:	d1f9      	bne.n	8004f32 <_read+0xa>
	}

return len;
}
 8004f3e:	4630      	mov	r0, r6
 8004f40:	bd70      	pop	{r4, r5, r6, pc}
 8004f42:	bf00      	nop

08004f44 <_close>:
}

int _close(int file)
{
	return -1;
}
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop

08004f4c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f50:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004f52:	2000      	movs	r0, #0
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop

08004f58 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004f58:	2001      	movs	r0, #1
 8004f5a:	4770      	bx	lr

08004f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	4770      	bx	lr

08004f60 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004f60:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <_sbrk+0x34>)
{
 8004f62:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8004f64:	6813      	ldr	r3, [r2, #0]
 8004f66:	b133      	cbz	r3, 8004f76 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004f68:	4418      	add	r0, r3
 8004f6a:	4669      	mov	r1, sp
 8004f6c:	4288      	cmp	r0, r1
 8004f6e:	d808      	bhi.n	8004f82 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004f70:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <_sbrk+0x38>)
 8004f78:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004f7a:	4418      	add	r0, r3
 8004f7c:	4669      	mov	r1, sp
 8004f7e:	4288      	cmp	r0, r1
 8004f80:	d9f6      	bls.n	8004f70 <_sbrk+0x10>
		errno = ENOMEM;
 8004f82:	f000 f85d 	bl	8005040 <__errno>
 8004f86:	230c      	movs	r3, #12
 8004f88:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	bd08      	pop	{r3, pc}
 8004f92:	bf00      	nop
 8004f94:	2000029c 	.word	0x2000029c
 8004f98:	20000468 	.word	0x20000468

08004f9c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f9c:	4910      	ldr	r1, [pc, #64]	; (8004fe0 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004f9e:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fa0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004fa4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8004fa8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004faa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8004fae:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004fb0:	4c0d      	ldr	r4, [pc, #52]	; (8004fe8 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8004fb2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004fba:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004fc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004fc6:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8004fc8:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004fca:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fcc:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fd4:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8004fd6:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fd8:	608c      	str	r4, [r1, #8]
#endif
}
 8004fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000ed00 	.word	0xe000ed00
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	24003010 	.word	0x24003010

08004fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005024 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ff0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ff2:	e003      	b.n	8004ffc <LoopCopyDataInit>

08004ff4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ff6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ff8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ffa:	3104      	adds	r1, #4

08004ffc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ffc:	480b      	ldr	r0, [pc, #44]	; (800502c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005000:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005002:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005004:	d3f6      	bcc.n	8004ff4 <CopyDataInit>
  ldr  r2, =_sbss
 8005006:	4a0b      	ldr	r2, [pc, #44]	; (8005034 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005008:	e002      	b.n	8005010 <LoopFillZerobss>

0800500a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800500a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800500c:	f842 3b04 	str.w	r3, [r2], #4

08005010 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005010:	4b09      	ldr	r3, [pc, #36]	; (8005038 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005012:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005014:	d3f9      	bcc.n	800500a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005016:	f7ff ffc1 	bl	8004f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800501a:	f000 f817 	bl	800504c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800501e:	f7ff fcb1 	bl	8004984 <main>
  bx  lr    
 8005022:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005024:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005028:	08009920 	.word	0x08009920
  ldr  r0, =_sdata
 800502c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005030:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 8005034:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8005038:	20000468 	.word	0x20000468

0800503c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800503c:	e7fe      	b.n	800503c <ADC_IRQHandler>
	...

08005040 <__errno>:
 8005040:	4b01      	ldr	r3, [pc, #4]	; (8005048 <__errno+0x8>)
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	2000004c 	.word	0x2000004c

0800504c <__libc_init_array>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4e0d      	ldr	r6, [pc, #52]	; (8005084 <__libc_init_array+0x38>)
 8005050:	4c0d      	ldr	r4, [pc, #52]	; (8005088 <__libc_init_array+0x3c>)
 8005052:	1ba4      	subs	r4, r4, r6
 8005054:	10a4      	asrs	r4, r4, #2
 8005056:	2500      	movs	r5, #0
 8005058:	42a5      	cmp	r5, r4
 800505a:	d109      	bne.n	8005070 <__libc_init_array+0x24>
 800505c:	4e0b      	ldr	r6, [pc, #44]	; (800508c <__libc_init_array+0x40>)
 800505e:	4c0c      	ldr	r4, [pc, #48]	; (8005090 <__libc_init_array+0x44>)
 8005060:	f004 f948 	bl	80092f4 <_init>
 8005064:	1ba4      	subs	r4, r4, r6
 8005066:	10a4      	asrs	r4, r4, #2
 8005068:	2500      	movs	r5, #0
 800506a:	42a5      	cmp	r5, r4
 800506c:	d105      	bne.n	800507a <__libc_init_array+0x2e>
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005074:	4798      	blx	r3
 8005076:	3501      	adds	r5, #1
 8005078:	e7ee      	b.n	8005058 <__libc_init_array+0xc>
 800507a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800507e:	4798      	blx	r3
 8005080:	3501      	adds	r5, #1
 8005082:	e7f2      	b.n	800506a <__libc_init_array+0x1e>
 8005084:	08009918 	.word	0x08009918
 8005088:	08009918 	.word	0x08009918
 800508c:	08009918 	.word	0x08009918
 8005090:	0800991c 	.word	0x0800991c

08005094 <memcpy>:
 8005094:	b510      	push	{r4, lr}
 8005096:	1e43      	subs	r3, r0, #1
 8005098:	440a      	add	r2, r1
 800509a:	4291      	cmp	r1, r2
 800509c:	d100      	bne.n	80050a0 <memcpy+0xc>
 800509e:	bd10      	pop	{r4, pc}
 80050a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a8:	e7f7      	b.n	800509a <memcpy+0x6>

080050aa <memset>:
 80050aa:	4402      	add	r2, r0
 80050ac:	4603      	mov	r3, r0
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d100      	bne.n	80050b4 <memset+0xa>
 80050b2:	4770      	bx	lr
 80050b4:	f803 1b01 	strb.w	r1, [r3], #1
 80050b8:	e7f9      	b.n	80050ae <memset+0x4>

080050ba <__cvt>:
 80050ba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050be:	ec55 4b10 	vmov	r4, r5, d0
 80050c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80050c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050c8:	2d00      	cmp	r5, #0
 80050ca:	460e      	mov	r6, r1
 80050cc:	4691      	mov	r9, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	bfb8      	it	lt
 80050d2:	4622      	movlt	r2, r4
 80050d4:	462b      	mov	r3, r5
 80050d6:	f027 0720 	bic.w	r7, r7, #32
 80050da:	bfbb      	ittet	lt
 80050dc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050e0:	461d      	movlt	r5, r3
 80050e2:	2300      	movge	r3, #0
 80050e4:	232d      	movlt	r3, #45	; 0x2d
 80050e6:	bfb8      	it	lt
 80050e8:	4614      	movlt	r4, r2
 80050ea:	2f46      	cmp	r7, #70	; 0x46
 80050ec:	700b      	strb	r3, [r1, #0]
 80050ee:	d004      	beq.n	80050fa <__cvt+0x40>
 80050f0:	2f45      	cmp	r7, #69	; 0x45
 80050f2:	d100      	bne.n	80050f6 <__cvt+0x3c>
 80050f4:	3601      	adds	r6, #1
 80050f6:	2102      	movs	r1, #2
 80050f8:	e000      	b.n	80050fc <__cvt+0x42>
 80050fa:	2103      	movs	r1, #3
 80050fc:	ab03      	add	r3, sp, #12
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	ab02      	add	r3, sp, #8
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	4632      	mov	r2, r6
 8005106:	4653      	mov	r3, sl
 8005108:	ec45 4b10 	vmov	d0, r4, r5
 800510c:	f000 fdfc 	bl	8005d08 <_dtoa_r>
 8005110:	2f47      	cmp	r7, #71	; 0x47
 8005112:	4680      	mov	r8, r0
 8005114:	d102      	bne.n	800511c <__cvt+0x62>
 8005116:	f019 0f01 	tst.w	r9, #1
 800511a:	d026      	beq.n	800516a <__cvt+0xb0>
 800511c:	2f46      	cmp	r7, #70	; 0x46
 800511e:	eb08 0906 	add.w	r9, r8, r6
 8005122:	d111      	bne.n	8005148 <__cvt+0x8e>
 8005124:	f898 3000 	ldrb.w	r3, [r8]
 8005128:	2b30      	cmp	r3, #48	; 0x30
 800512a:	d10a      	bne.n	8005142 <__cvt+0x88>
 800512c:	2200      	movs	r2, #0
 800512e:	2300      	movs	r3, #0
 8005130:	4620      	mov	r0, r4
 8005132:	4629      	mov	r1, r5
 8005134:	f7fb fcd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005138:	b918      	cbnz	r0, 8005142 <__cvt+0x88>
 800513a:	f1c6 0601 	rsb	r6, r6, #1
 800513e:	f8ca 6000 	str.w	r6, [sl]
 8005142:	f8da 3000 	ldr.w	r3, [sl]
 8005146:	4499      	add	r9, r3
 8005148:	2200      	movs	r2, #0
 800514a:	2300      	movs	r3, #0
 800514c:	4620      	mov	r0, r4
 800514e:	4629      	mov	r1, r5
 8005150:	f7fb fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005154:	b938      	cbnz	r0, 8005166 <__cvt+0xac>
 8005156:	2230      	movs	r2, #48	; 0x30
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	454b      	cmp	r3, r9
 800515c:	d205      	bcs.n	800516a <__cvt+0xb0>
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	9103      	str	r1, [sp, #12]
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e7f8      	b.n	8005158 <__cvt+0x9e>
 8005166:	f8cd 900c 	str.w	r9, [sp, #12]
 800516a:	9b03      	ldr	r3, [sp, #12]
 800516c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800516e:	eba3 0308 	sub.w	r3, r3, r8
 8005172:	4640      	mov	r0, r8
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	b004      	add	sp, #16
 8005178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800517c <__exponent>:
 800517c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800517e:	2900      	cmp	r1, #0
 8005180:	4604      	mov	r4, r0
 8005182:	bfba      	itte	lt
 8005184:	4249      	neglt	r1, r1
 8005186:	232d      	movlt	r3, #45	; 0x2d
 8005188:	232b      	movge	r3, #43	; 0x2b
 800518a:	2909      	cmp	r1, #9
 800518c:	f804 2b02 	strb.w	r2, [r4], #2
 8005190:	7043      	strb	r3, [r0, #1]
 8005192:	dd20      	ble.n	80051d6 <__exponent+0x5a>
 8005194:	f10d 0307 	add.w	r3, sp, #7
 8005198:	461f      	mov	r7, r3
 800519a:	260a      	movs	r6, #10
 800519c:	fb91 f5f6 	sdiv	r5, r1, r6
 80051a0:	fb06 1115 	mls	r1, r6, r5, r1
 80051a4:	3130      	adds	r1, #48	; 0x30
 80051a6:	2d09      	cmp	r5, #9
 80051a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051ac:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80051b0:	4629      	mov	r1, r5
 80051b2:	dc09      	bgt.n	80051c8 <__exponent+0x4c>
 80051b4:	3130      	adds	r1, #48	; 0x30
 80051b6:	3b02      	subs	r3, #2
 80051b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80051bc:	42bb      	cmp	r3, r7
 80051be:	4622      	mov	r2, r4
 80051c0:	d304      	bcc.n	80051cc <__exponent+0x50>
 80051c2:	1a10      	subs	r0, r2, r0
 80051c4:	b003      	add	sp, #12
 80051c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c8:	4613      	mov	r3, r2
 80051ca:	e7e7      	b.n	800519c <__exponent+0x20>
 80051cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051d0:	f804 2b01 	strb.w	r2, [r4], #1
 80051d4:	e7f2      	b.n	80051bc <__exponent+0x40>
 80051d6:	2330      	movs	r3, #48	; 0x30
 80051d8:	4419      	add	r1, r3
 80051da:	7083      	strb	r3, [r0, #2]
 80051dc:	1d02      	adds	r2, r0, #4
 80051de:	70c1      	strb	r1, [r0, #3]
 80051e0:	e7ef      	b.n	80051c2 <__exponent+0x46>
	...

080051e4 <_printf_float>:
 80051e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e8:	b08d      	sub	sp, #52	; 0x34
 80051ea:	460c      	mov	r4, r1
 80051ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80051f0:	4616      	mov	r6, r2
 80051f2:	461f      	mov	r7, r3
 80051f4:	4605      	mov	r5, r0
 80051f6:	f001 fcb9 	bl	8006b6c <_localeconv_r>
 80051fa:	6803      	ldr	r3, [r0, #0]
 80051fc:	9304      	str	r3, [sp, #16]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fa ffee 	bl	80001e0 <strlen>
 8005204:	2300      	movs	r3, #0
 8005206:	930a      	str	r3, [sp, #40]	; 0x28
 8005208:	f8d8 3000 	ldr.w	r3, [r8]
 800520c:	9005      	str	r0, [sp, #20]
 800520e:	3307      	adds	r3, #7
 8005210:	f023 0307 	bic.w	r3, r3, #7
 8005214:	f103 0208 	add.w	r2, r3, #8
 8005218:	f894 a018 	ldrb.w	sl, [r4, #24]
 800521c:	f8d4 b000 	ldr.w	fp, [r4]
 8005220:	f8c8 2000 	str.w	r2, [r8]
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800522c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005230:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005234:	9307      	str	r3, [sp, #28]
 8005236:	f8cd 8018 	str.w	r8, [sp, #24]
 800523a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800523e:	4ba7      	ldr	r3, [pc, #668]	; (80054dc <_printf_float+0x2f8>)
 8005240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005244:	f7fb fc7a 	bl	8000b3c <__aeabi_dcmpun>
 8005248:	bb70      	cbnz	r0, 80052a8 <_printf_float+0xc4>
 800524a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800524e:	4ba3      	ldr	r3, [pc, #652]	; (80054dc <_printf_float+0x2f8>)
 8005250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005254:	f7fb fc54 	bl	8000b00 <__aeabi_dcmple>
 8005258:	bb30      	cbnz	r0, 80052a8 <_printf_float+0xc4>
 800525a:	2200      	movs	r2, #0
 800525c:	2300      	movs	r3, #0
 800525e:	4640      	mov	r0, r8
 8005260:	4649      	mov	r1, r9
 8005262:	f7fb fc43 	bl	8000aec <__aeabi_dcmplt>
 8005266:	b110      	cbz	r0, 800526e <_printf_float+0x8a>
 8005268:	232d      	movs	r3, #45	; 0x2d
 800526a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800526e:	4a9c      	ldr	r2, [pc, #624]	; (80054e0 <_printf_float+0x2fc>)
 8005270:	4b9c      	ldr	r3, [pc, #624]	; (80054e4 <_printf_float+0x300>)
 8005272:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005276:	bf8c      	ite	hi
 8005278:	4690      	movhi	r8, r2
 800527a:	4698      	movls	r8, r3
 800527c:	2303      	movs	r3, #3
 800527e:	f02b 0204 	bic.w	r2, fp, #4
 8005282:	6123      	str	r3, [r4, #16]
 8005284:	6022      	str	r2, [r4, #0]
 8005286:	f04f 0900 	mov.w	r9, #0
 800528a:	9700      	str	r7, [sp, #0]
 800528c:	4633      	mov	r3, r6
 800528e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005290:	4621      	mov	r1, r4
 8005292:	4628      	mov	r0, r5
 8005294:	f000 f9e6 	bl	8005664 <_printf_common>
 8005298:	3001      	adds	r0, #1
 800529a:	f040 808d 	bne.w	80053b8 <_printf_float+0x1d4>
 800529e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052a2:	b00d      	add	sp, #52	; 0x34
 80052a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	4640      	mov	r0, r8
 80052ae:	4649      	mov	r1, r9
 80052b0:	f7fb fc44 	bl	8000b3c <__aeabi_dcmpun>
 80052b4:	b110      	cbz	r0, 80052bc <_printf_float+0xd8>
 80052b6:	4a8c      	ldr	r2, [pc, #560]	; (80054e8 <_printf_float+0x304>)
 80052b8:	4b8c      	ldr	r3, [pc, #560]	; (80054ec <_printf_float+0x308>)
 80052ba:	e7da      	b.n	8005272 <_printf_float+0x8e>
 80052bc:	6861      	ldr	r1, [r4, #4]
 80052be:	1c4b      	adds	r3, r1, #1
 80052c0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80052c4:	a80a      	add	r0, sp, #40	; 0x28
 80052c6:	d13e      	bne.n	8005346 <_printf_float+0x162>
 80052c8:	2306      	movs	r3, #6
 80052ca:	6063      	str	r3, [r4, #4]
 80052cc:	2300      	movs	r3, #0
 80052ce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80052d2:	ab09      	add	r3, sp, #36	; 0x24
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	ec49 8b10 	vmov	d0, r8, r9
 80052da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052de:	6022      	str	r2, [r4, #0]
 80052e0:	f8cd a004 	str.w	sl, [sp, #4]
 80052e4:	6861      	ldr	r1, [r4, #4]
 80052e6:	4628      	mov	r0, r5
 80052e8:	f7ff fee7 	bl	80050ba <__cvt>
 80052ec:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80052f0:	2b47      	cmp	r3, #71	; 0x47
 80052f2:	4680      	mov	r8, r0
 80052f4:	d109      	bne.n	800530a <_printf_float+0x126>
 80052f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f8:	1cd8      	adds	r0, r3, #3
 80052fa:	db02      	blt.n	8005302 <_printf_float+0x11e>
 80052fc:	6862      	ldr	r2, [r4, #4]
 80052fe:	4293      	cmp	r3, r2
 8005300:	dd47      	ble.n	8005392 <_printf_float+0x1ae>
 8005302:	f1aa 0a02 	sub.w	sl, sl, #2
 8005306:	fa5f fa8a 	uxtb.w	sl, sl
 800530a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800530e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005310:	d824      	bhi.n	800535c <_printf_float+0x178>
 8005312:	3901      	subs	r1, #1
 8005314:	4652      	mov	r2, sl
 8005316:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800531a:	9109      	str	r1, [sp, #36]	; 0x24
 800531c:	f7ff ff2e 	bl	800517c <__exponent>
 8005320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005322:	1813      	adds	r3, r2, r0
 8005324:	2a01      	cmp	r2, #1
 8005326:	4681      	mov	r9, r0
 8005328:	6123      	str	r3, [r4, #16]
 800532a:	dc02      	bgt.n	8005332 <_printf_float+0x14e>
 800532c:	6822      	ldr	r2, [r4, #0]
 800532e:	07d1      	lsls	r1, r2, #31
 8005330:	d501      	bpl.n	8005336 <_printf_float+0x152>
 8005332:	3301      	adds	r3, #1
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0a5      	beq.n	800528a <_printf_float+0xa6>
 800533e:	232d      	movs	r3, #45	; 0x2d
 8005340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005344:	e7a1      	b.n	800528a <_printf_float+0xa6>
 8005346:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800534a:	f000 8177 	beq.w	800563c <_printf_float+0x458>
 800534e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005352:	d1bb      	bne.n	80052cc <_printf_float+0xe8>
 8005354:	2900      	cmp	r1, #0
 8005356:	d1b9      	bne.n	80052cc <_printf_float+0xe8>
 8005358:	2301      	movs	r3, #1
 800535a:	e7b6      	b.n	80052ca <_printf_float+0xe6>
 800535c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005360:	d119      	bne.n	8005396 <_printf_float+0x1b2>
 8005362:	2900      	cmp	r1, #0
 8005364:	6863      	ldr	r3, [r4, #4]
 8005366:	dd0c      	ble.n	8005382 <_printf_float+0x19e>
 8005368:	6121      	str	r1, [r4, #16]
 800536a:	b913      	cbnz	r3, 8005372 <_printf_float+0x18e>
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	07d2      	lsls	r2, r2, #31
 8005370:	d502      	bpl.n	8005378 <_printf_float+0x194>
 8005372:	3301      	adds	r3, #1
 8005374:	440b      	add	r3, r1
 8005376:	6123      	str	r3, [r4, #16]
 8005378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537a:	65a3      	str	r3, [r4, #88]	; 0x58
 800537c:	f04f 0900 	mov.w	r9, #0
 8005380:	e7d9      	b.n	8005336 <_printf_float+0x152>
 8005382:	b913      	cbnz	r3, 800538a <_printf_float+0x1a6>
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	07d0      	lsls	r0, r2, #31
 8005388:	d501      	bpl.n	800538e <_printf_float+0x1aa>
 800538a:	3302      	adds	r3, #2
 800538c:	e7f3      	b.n	8005376 <_printf_float+0x192>
 800538e:	2301      	movs	r3, #1
 8005390:	e7f1      	b.n	8005376 <_printf_float+0x192>
 8005392:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005396:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800539a:	4293      	cmp	r3, r2
 800539c:	db05      	blt.n	80053aa <_printf_float+0x1c6>
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	6123      	str	r3, [r4, #16]
 80053a2:	07d1      	lsls	r1, r2, #31
 80053a4:	d5e8      	bpl.n	8005378 <_printf_float+0x194>
 80053a6:	3301      	adds	r3, #1
 80053a8:	e7e5      	b.n	8005376 <_printf_float+0x192>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bfd4      	ite	le
 80053ae:	f1c3 0302 	rsble	r3, r3, #2
 80053b2:	2301      	movgt	r3, #1
 80053b4:	4413      	add	r3, r2
 80053b6:	e7de      	b.n	8005376 <_printf_float+0x192>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	055a      	lsls	r2, r3, #21
 80053bc:	d407      	bmi.n	80053ce <_printf_float+0x1ea>
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	4642      	mov	r2, r8
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b8      	blx	r7
 80053c8:	3001      	adds	r0, #1
 80053ca:	d12b      	bne.n	8005424 <_printf_float+0x240>
 80053cc:	e767      	b.n	800529e <_printf_float+0xba>
 80053ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80053d2:	f240 80dc 	bls.w	800558e <_printf_float+0x3aa>
 80053d6:	2200      	movs	r2, #0
 80053d8:	2300      	movs	r3, #0
 80053da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053de:	f7fb fb7b 	bl	8000ad8 <__aeabi_dcmpeq>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d033      	beq.n	800544e <_printf_float+0x26a>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4a41      	ldr	r2, [pc, #260]	; (80054f0 <_printf_float+0x30c>)
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	f43f af54 	beq.w	800529e <_printf_float+0xba>
 80053f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053fa:	429a      	cmp	r2, r3
 80053fc:	db02      	blt.n	8005404 <_printf_float+0x220>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	07d8      	lsls	r0, r3, #31
 8005402:	d50f      	bpl.n	8005424 <_printf_float+0x240>
 8005404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005408:	4631      	mov	r1, r6
 800540a:	4628      	mov	r0, r5
 800540c:	47b8      	blx	r7
 800540e:	3001      	adds	r0, #1
 8005410:	f43f af45 	beq.w	800529e <_printf_float+0xba>
 8005414:	f04f 0800 	mov.w	r8, #0
 8005418:	f104 091a 	add.w	r9, r4, #26
 800541c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800541e:	3b01      	subs	r3, #1
 8005420:	4543      	cmp	r3, r8
 8005422:	dc09      	bgt.n	8005438 <_printf_float+0x254>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	079b      	lsls	r3, r3, #30
 8005428:	f100 8103 	bmi.w	8005632 <_printf_float+0x44e>
 800542c:	68e0      	ldr	r0, [r4, #12]
 800542e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005430:	4298      	cmp	r0, r3
 8005432:	bfb8      	it	lt
 8005434:	4618      	movlt	r0, r3
 8005436:	e734      	b.n	80052a2 <_printf_float+0xbe>
 8005438:	2301      	movs	r3, #1
 800543a:	464a      	mov	r2, r9
 800543c:	4631      	mov	r1, r6
 800543e:	4628      	mov	r0, r5
 8005440:	47b8      	blx	r7
 8005442:	3001      	adds	r0, #1
 8005444:	f43f af2b 	beq.w	800529e <_printf_float+0xba>
 8005448:	f108 0801 	add.w	r8, r8, #1
 800544c:	e7e6      	b.n	800541c <_printf_float+0x238>
 800544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	dc2b      	bgt.n	80054ac <_printf_float+0x2c8>
 8005454:	2301      	movs	r3, #1
 8005456:	4a26      	ldr	r2, [pc, #152]	; (80054f0 <_printf_float+0x30c>)
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	f43f af1d 	beq.w	800529e <_printf_float+0xba>
 8005464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005466:	b923      	cbnz	r3, 8005472 <_printf_float+0x28e>
 8005468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800546a:	b913      	cbnz	r3, 8005472 <_printf_float+0x28e>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	07d9      	lsls	r1, r3, #31
 8005470:	d5d8      	bpl.n	8005424 <_printf_float+0x240>
 8005472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005476:	4631      	mov	r1, r6
 8005478:	4628      	mov	r0, r5
 800547a:	47b8      	blx	r7
 800547c:	3001      	adds	r0, #1
 800547e:	f43f af0e 	beq.w	800529e <_printf_float+0xba>
 8005482:	f04f 0900 	mov.w	r9, #0
 8005486:	f104 0a1a 	add.w	sl, r4, #26
 800548a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548c:	425b      	negs	r3, r3
 800548e:	454b      	cmp	r3, r9
 8005490:	dc01      	bgt.n	8005496 <_printf_float+0x2b2>
 8005492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005494:	e794      	b.n	80053c0 <_printf_float+0x1dc>
 8005496:	2301      	movs	r3, #1
 8005498:	4652      	mov	r2, sl
 800549a:	4631      	mov	r1, r6
 800549c:	4628      	mov	r0, r5
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	f43f aefc 	beq.w	800529e <_printf_float+0xba>
 80054a6:	f109 0901 	add.w	r9, r9, #1
 80054aa:	e7ee      	b.n	800548a <_printf_float+0x2a6>
 80054ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054b0:	429a      	cmp	r2, r3
 80054b2:	bfa8      	it	ge
 80054b4:	461a      	movge	r2, r3
 80054b6:	2a00      	cmp	r2, #0
 80054b8:	4691      	mov	r9, r2
 80054ba:	dd07      	ble.n	80054cc <_printf_float+0x2e8>
 80054bc:	4613      	mov	r3, r2
 80054be:	4631      	mov	r1, r6
 80054c0:	4642      	mov	r2, r8
 80054c2:	4628      	mov	r0, r5
 80054c4:	47b8      	blx	r7
 80054c6:	3001      	adds	r0, #1
 80054c8:	f43f aee9 	beq.w	800529e <_printf_float+0xba>
 80054cc:	f104 031a 	add.w	r3, r4, #26
 80054d0:	f04f 0b00 	mov.w	fp, #0
 80054d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054d8:	9306      	str	r3, [sp, #24]
 80054da:	e015      	b.n	8005508 <_printf_float+0x324>
 80054dc:	7fefffff 	.word	0x7fefffff
 80054e0:	080095c8 	.word	0x080095c8
 80054e4:	080095c4 	.word	0x080095c4
 80054e8:	080095d0 	.word	0x080095d0
 80054ec:	080095cc 	.word	0x080095cc
 80054f0:	080095d4 	.word	0x080095d4
 80054f4:	2301      	movs	r3, #1
 80054f6:	9a06      	ldr	r2, [sp, #24]
 80054f8:	4631      	mov	r1, r6
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	f43f aecd 	beq.w	800529e <_printf_float+0xba>
 8005504:	f10b 0b01 	add.w	fp, fp, #1
 8005508:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800550c:	ebaa 0309 	sub.w	r3, sl, r9
 8005510:	455b      	cmp	r3, fp
 8005512:	dcef      	bgt.n	80054f4 <_printf_float+0x310>
 8005514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005518:	429a      	cmp	r2, r3
 800551a:	44d0      	add	r8, sl
 800551c:	db15      	blt.n	800554a <_printf_float+0x366>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	07da      	lsls	r2, r3, #31
 8005522:	d412      	bmi.n	800554a <_printf_float+0x366>
 8005524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005528:	eba3 020a 	sub.w	r2, r3, sl
 800552c:	eba3 0a01 	sub.w	sl, r3, r1
 8005530:	4592      	cmp	sl, r2
 8005532:	bfa8      	it	ge
 8005534:	4692      	movge	sl, r2
 8005536:	f1ba 0f00 	cmp.w	sl, #0
 800553a:	dc0e      	bgt.n	800555a <_printf_float+0x376>
 800553c:	f04f 0800 	mov.w	r8, #0
 8005540:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005544:	f104 091a 	add.w	r9, r4, #26
 8005548:	e019      	b.n	800557e <_printf_float+0x39a>
 800554a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800554e:	4631      	mov	r1, r6
 8005550:	4628      	mov	r0, r5
 8005552:	47b8      	blx	r7
 8005554:	3001      	adds	r0, #1
 8005556:	d1e5      	bne.n	8005524 <_printf_float+0x340>
 8005558:	e6a1      	b.n	800529e <_printf_float+0xba>
 800555a:	4653      	mov	r3, sl
 800555c:	4642      	mov	r2, r8
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	d1e9      	bne.n	800553c <_printf_float+0x358>
 8005568:	e699      	b.n	800529e <_printf_float+0xba>
 800556a:	2301      	movs	r3, #1
 800556c:	464a      	mov	r2, r9
 800556e:	4631      	mov	r1, r6
 8005570:	4628      	mov	r0, r5
 8005572:	47b8      	blx	r7
 8005574:	3001      	adds	r0, #1
 8005576:	f43f ae92 	beq.w	800529e <_printf_float+0xba>
 800557a:	f108 0801 	add.w	r8, r8, #1
 800557e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	eba3 030a 	sub.w	r3, r3, sl
 8005588:	4543      	cmp	r3, r8
 800558a:	dcee      	bgt.n	800556a <_printf_float+0x386>
 800558c:	e74a      	b.n	8005424 <_printf_float+0x240>
 800558e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005590:	2a01      	cmp	r2, #1
 8005592:	dc01      	bgt.n	8005598 <_printf_float+0x3b4>
 8005594:	07db      	lsls	r3, r3, #31
 8005596:	d53a      	bpl.n	800560e <_printf_float+0x42a>
 8005598:	2301      	movs	r3, #1
 800559a:	4642      	mov	r2, r8
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f ae7b 	beq.w	800529e <_printf_float+0xba>
 80055a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f108 0801 	add.w	r8, r8, #1
 80055b8:	f43f ae71 	beq.w	800529e <_printf_float+0xba>
 80055bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055be:	2200      	movs	r2, #0
 80055c0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80055c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055c8:	2300      	movs	r3, #0
 80055ca:	f7fb fa85 	bl	8000ad8 <__aeabi_dcmpeq>
 80055ce:	b9c8      	cbnz	r0, 8005604 <_printf_float+0x420>
 80055d0:	4653      	mov	r3, sl
 80055d2:	4642      	mov	r2, r8
 80055d4:	4631      	mov	r1, r6
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b8      	blx	r7
 80055da:	3001      	adds	r0, #1
 80055dc:	d10e      	bne.n	80055fc <_printf_float+0x418>
 80055de:	e65e      	b.n	800529e <_printf_float+0xba>
 80055e0:	2301      	movs	r3, #1
 80055e2:	4652      	mov	r2, sl
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	f43f ae57 	beq.w	800529e <_printf_float+0xba>
 80055f0:	f108 0801 	add.w	r8, r8, #1
 80055f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f6:	3b01      	subs	r3, #1
 80055f8:	4543      	cmp	r3, r8
 80055fa:	dcf1      	bgt.n	80055e0 <_printf_float+0x3fc>
 80055fc:	464b      	mov	r3, r9
 80055fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005602:	e6de      	b.n	80053c2 <_printf_float+0x1de>
 8005604:	f04f 0800 	mov.w	r8, #0
 8005608:	f104 0a1a 	add.w	sl, r4, #26
 800560c:	e7f2      	b.n	80055f4 <_printf_float+0x410>
 800560e:	2301      	movs	r3, #1
 8005610:	e7df      	b.n	80055d2 <_printf_float+0x3ee>
 8005612:	2301      	movs	r3, #1
 8005614:	464a      	mov	r2, r9
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	47b8      	blx	r7
 800561c:	3001      	adds	r0, #1
 800561e:	f43f ae3e 	beq.w	800529e <_printf_float+0xba>
 8005622:	f108 0801 	add.w	r8, r8, #1
 8005626:	68e3      	ldr	r3, [r4, #12]
 8005628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	4543      	cmp	r3, r8
 800562e:	dcf0      	bgt.n	8005612 <_printf_float+0x42e>
 8005630:	e6fc      	b.n	800542c <_printf_float+0x248>
 8005632:	f04f 0800 	mov.w	r8, #0
 8005636:	f104 0919 	add.w	r9, r4, #25
 800563a:	e7f4      	b.n	8005626 <_printf_float+0x442>
 800563c:	2900      	cmp	r1, #0
 800563e:	f43f ae8b 	beq.w	8005358 <_printf_float+0x174>
 8005642:	2300      	movs	r3, #0
 8005644:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005648:	ab09      	add	r3, sp, #36	; 0x24
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	ec49 8b10 	vmov	d0, r8, r9
 8005650:	6022      	str	r2, [r4, #0]
 8005652:	f8cd a004 	str.w	sl, [sp, #4]
 8005656:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800565a:	4628      	mov	r0, r5
 800565c:	f7ff fd2d 	bl	80050ba <__cvt>
 8005660:	4680      	mov	r8, r0
 8005662:	e648      	b.n	80052f6 <_printf_float+0x112>

08005664 <_printf_common>:
 8005664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005668:	4691      	mov	r9, r2
 800566a:	461f      	mov	r7, r3
 800566c:	688a      	ldr	r2, [r1, #8]
 800566e:	690b      	ldr	r3, [r1, #16]
 8005670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005674:	4293      	cmp	r3, r2
 8005676:	bfb8      	it	lt
 8005678:	4613      	movlt	r3, r2
 800567a:	f8c9 3000 	str.w	r3, [r9]
 800567e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005682:	4606      	mov	r6, r0
 8005684:	460c      	mov	r4, r1
 8005686:	b112      	cbz	r2, 800568e <_printf_common+0x2a>
 8005688:	3301      	adds	r3, #1
 800568a:	f8c9 3000 	str.w	r3, [r9]
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	0699      	lsls	r1, r3, #26
 8005692:	bf42      	ittt	mi
 8005694:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005698:	3302      	addmi	r3, #2
 800569a:	f8c9 3000 	strmi.w	r3, [r9]
 800569e:	6825      	ldr	r5, [r4, #0]
 80056a0:	f015 0506 	ands.w	r5, r5, #6
 80056a4:	d107      	bne.n	80056b6 <_printf_common+0x52>
 80056a6:	f104 0a19 	add.w	sl, r4, #25
 80056aa:	68e3      	ldr	r3, [r4, #12]
 80056ac:	f8d9 2000 	ldr.w	r2, [r9]
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	42ab      	cmp	r3, r5
 80056b4:	dc28      	bgt.n	8005708 <_printf_common+0xa4>
 80056b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	3300      	adds	r3, #0
 80056be:	bf18      	it	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	0692      	lsls	r2, r2, #26
 80056c4:	d42d      	bmi.n	8005722 <_printf_common+0xbe>
 80056c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ca:	4639      	mov	r1, r7
 80056cc:	4630      	mov	r0, r6
 80056ce:	47c0      	blx	r8
 80056d0:	3001      	adds	r0, #1
 80056d2:	d020      	beq.n	8005716 <_printf_common+0xb2>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	68e5      	ldr	r5, [r4, #12]
 80056d8:	f8d9 2000 	ldr.w	r2, [r9]
 80056dc:	f003 0306 	and.w	r3, r3, #6
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	bf08      	it	eq
 80056e4:	1aad      	subeq	r5, r5, r2
 80056e6:	68a3      	ldr	r3, [r4, #8]
 80056e8:	6922      	ldr	r2, [r4, #16]
 80056ea:	bf0c      	ite	eq
 80056ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f0:	2500      	movne	r5, #0
 80056f2:	4293      	cmp	r3, r2
 80056f4:	bfc4      	itt	gt
 80056f6:	1a9b      	subgt	r3, r3, r2
 80056f8:	18ed      	addgt	r5, r5, r3
 80056fa:	f04f 0900 	mov.w	r9, #0
 80056fe:	341a      	adds	r4, #26
 8005700:	454d      	cmp	r5, r9
 8005702:	d11a      	bne.n	800573a <_printf_common+0xd6>
 8005704:	2000      	movs	r0, #0
 8005706:	e008      	b.n	800571a <_printf_common+0xb6>
 8005708:	2301      	movs	r3, #1
 800570a:	4652      	mov	r2, sl
 800570c:	4639      	mov	r1, r7
 800570e:	4630      	mov	r0, r6
 8005710:	47c0      	blx	r8
 8005712:	3001      	adds	r0, #1
 8005714:	d103      	bne.n	800571e <_printf_common+0xba>
 8005716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800571a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571e:	3501      	adds	r5, #1
 8005720:	e7c3      	b.n	80056aa <_printf_common+0x46>
 8005722:	18e1      	adds	r1, r4, r3
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	2030      	movs	r0, #48	; 0x30
 8005728:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800572c:	4422      	add	r2, r4
 800572e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005732:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005736:	3302      	adds	r3, #2
 8005738:	e7c5      	b.n	80056c6 <_printf_common+0x62>
 800573a:	2301      	movs	r3, #1
 800573c:	4622      	mov	r2, r4
 800573e:	4639      	mov	r1, r7
 8005740:	4630      	mov	r0, r6
 8005742:	47c0      	blx	r8
 8005744:	3001      	adds	r0, #1
 8005746:	d0e6      	beq.n	8005716 <_printf_common+0xb2>
 8005748:	f109 0901 	add.w	r9, r9, #1
 800574c:	e7d8      	b.n	8005700 <_printf_common+0x9c>
	...

08005750 <_printf_i>:
 8005750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005754:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005758:	460c      	mov	r4, r1
 800575a:	7e09      	ldrb	r1, [r1, #24]
 800575c:	b085      	sub	sp, #20
 800575e:	296e      	cmp	r1, #110	; 0x6e
 8005760:	4617      	mov	r7, r2
 8005762:	4606      	mov	r6, r0
 8005764:	4698      	mov	r8, r3
 8005766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005768:	f000 80b3 	beq.w	80058d2 <_printf_i+0x182>
 800576c:	d822      	bhi.n	80057b4 <_printf_i+0x64>
 800576e:	2963      	cmp	r1, #99	; 0x63
 8005770:	d036      	beq.n	80057e0 <_printf_i+0x90>
 8005772:	d80a      	bhi.n	800578a <_printf_i+0x3a>
 8005774:	2900      	cmp	r1, #0
 8005776:	f000 80b9 	beq.w	80058ec <_printf_i+0x19c>
 800577a:	2958      	cmp	r1, #88	; 0x58
 800577c:	f000 8083 	beq.w	8005886 <_printf_i+0x136>
 8005780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005784:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005788:	e032      	b.n	80057f0 <_printf_i+0xa0>
 800578a:	2964      	cmp	r1, #100	; 0x64
 800578c:	d001      	beq.n	8005792 <_printf_i+0x42>
 800578e:	2969      	cmp	r1, #105	; 0x69
 8005790:	d1f6      	bne.n	8005780 <_printf_i+0x30>
 8005792:	6820      	ldr	r0, [r4, #0]
 8005794:	6813      	ldr	r3, [r2, #0]
 8005796:	0605      	lsls	r5, r0, #24
 8005798:	f103 0104 	add.w	r1, r3, #4
 800579c:	d52a      	bpl.n	80057f4 <_printf_i+0xa4>
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6011      	str	r1, [r2, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	da03      	bge.n	80057ae <_printf_i+0x5e>
 80057a6:	222d      	movs	r2, #45	; 0x2d
 80057a8:	425b      	negs	r3, r3
 80057aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057ae:	486f      	ldr	r0, [pc, #444]	; (800596c <_printf_i+0x21c>)
 80057b0:	220a      	movs	r2, #10
 80057b2:	e039      	b.n	8005828 <_printf_i+0xd8>
 80057b4:	2973      	cmp	r1, #115	; 0x73
 80057b6:	f000 809d 	beq.w	80058f4 <_printf_i+0x1a4>
 80057ba:	d808      	bhi.n	80057ce <_printf_i+0x7e>
 80057bc:	296f      	cmp	r1, #111	; 0x6f
 80057be:	d020      	beq.n	8005802 <_printf_i+0xb2>
 80057c0:	2970      	cmp	r1, #112	; 0x70
 80057c2:	d1dd      	bne.n	8005780 <_printf_i+0x30>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	f043 0320 	orr.w	r3, r3, #32
 80057ca:	6023      	str	r3, [r4, #0]
 80057cc:	e003      	b.n	80057d6 <_printf_i+0x86>
 80057ce:	2975      	cmp	r1, #117	; 0x75
 80057d0:	d017      	beq.n	8005802 <_printf_i+0xb2>
 80057d2:	2978      	cmp	r1, #120	; 0x78
 80057d4:	d1d4      	bne.n	8005780 <_printf_i+0x30>
 80057d6:	2378      	movs	r3, #120	; 0x78
 80057d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057dc:	4864      	ldr	r0, [pc, #400]	; (8005970 <_printf_i+0x220>)
 80057de:	e055      	b.n	800588c <_printf_i+0x13c>
 80057e0:	6813      	ldr	r3, [r2, #0]
 80057e2:	1d19      	adds	r1, r3, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6011      	str	r1, [r2, #0]
 80057e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057f0:	2301      	movs	r3, #1
 80057f2:	e08c      	b.n	800590e <_printf_i+0x1be>
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6011      	str	r1, [r2, #0]
 80057f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057fc:	bf18      	it	ne
 80057fe:	b21b      	sxthne	r3, r3
 8005800:	e7cf      	b.n	80057a2 <_printf_i+0x52>
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	6825      	ldr	r5, [r4, #0]
 8005806:	1d18      	adds	r0, r3, #4
 8005808:	6010      	str	r0, [r2, #0]
 800580a:	0628      	lsls	r0, r5, #24
 800580c:	d501      	bpl.n	8005812 <_printf_i+0xc2>
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	e002      	b.n	8005818 <_printf_i+0xc8>
 8005812:	0668      	lsls	r0, r5, #25
 8005814:	d5fb      	bpl.n	800580e <_printf_i+0xbe>
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	4854      	ldr	r0, [pc, #336]	; (800596c <_printf_i+0x21c>)
 800581a:	296f      	cmp	r1, #111	; 0x6f
 800581c:	bf14      	ite	ne
 800581e:	220a      	movne	r2, #10
 8005820:	2208      	moveq	r2, #8
 8005822:	2100      	movs	r1, #0
 8005824:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005828:	6865      	ldr	r5, [r4, #4]
 800582a:	60a5      	str	r5, [r4, #8]
 800582c:	2d00      	cmp	r5, #0
 800582e:	f2c0 8095 	blt.w	800595c <_printf_i+0x20c>
 8005832:	6821      	ldr	r1, [r4, #0]
 8005834:	f021 0104 	bic.w	r1, r1, #4
 8005838:	6021      	str	r1, [r4, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d13d      	bne.n	80058ba <_printf_i+0x16a>
 800583e:	2d00      	cmp	r5, #0
 8005840:	f040 808e 	bne.w	8005960 <_printf_i+0x210>
 8005844:	4665      	mov	r5, ip
 8005846:	2a08      	cmp	r2, #8
 8005848:	d10b      	bne.n	8005862 <_printf_i+0x112>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	07db      	lsls	r3, r3, #31
 800584e:	d508      	bpl.n	8005862 <_printf_i+0x112>
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	6862      	ldr	r2, [r4, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	bfde      	ittt	le
 8005858:	2330      	movle	r3, #48	; 0x30
 800585a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800585e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005862:	ebac 0305 	sub.w	r3, ip, r5
 8005866:	6123      	str	r3, [r4, #16]
 8005868:	f8cd 8000 	str.w	r8, [sp]
 800586c:	463b      	mov	r3, r7
 800586e:	aa03      	add	r2, sp, #12
 8005870:	4621      	mov	r1, r4
 8005872:	4630      	mov	r0, r6
 8005874:	f7ff fef6 	bl	8005664 <_printf_common>
 8005878:	3001      	adds	r0, #1
 800587a:	d14d      	bne.n	8005918 <_printf_i+0x1c8>
 800587c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005880:	b005      	add	sp, #20
 8005882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005886:	4839      	ldr	r0, [pc, #228]	; (800596c <_printf_i+0x21c>)
 8005888:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800588c:	6813      	ldr	r3, [r2, #0]
 800588e:	6821      	ldr	r1, [r4, #0]
 8005890:	1d1d      	adds	r5, r3, #4
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6015      	str	r5, [r2, #0]
 8005896:	060a      	lsls	r2, r1, #24
 8005898:	d50b      	bpl.n	80058b2 <_printf_i+0x162>
 800589a:	07ca      	lsls	r2, r1, #31
 800589c:	bf44      	itt	mi
 800589e:	f041 0120 	orrmi.w	r1, r1, #32
 80058a2:	6021      	strmi	r1, [r4, #0]
 80058a4:	b91b      	cbnz	r3, 80058ae <_printf_i+0x15e>
 80058a6:	6822      	ldr	r2, [r4, #0]
 80058a8:	f022 0220 	bic.w	r2, r2, #32
 80058ac:	6022      	str	r2, [r4, #0]
 80058ae:	2210      	movs	r2, #16
 80058b0:	e7b7      	b.n	8005822 <_printf_i+0xd2>
 80058b2:	064d      	lsls	r5, r1, #25
 80058b4:	bf48      	it	mi
 80058b6:	b29b      	uxthmi	r3, r3
 80058b8:	e7ef      	b.n	800589a <_printf_i+0x14a>
 80058ba:	4665      	mov	r5, ip
 80058bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80058c0:	fb02 3311 	mls	r3, r2, r1, r3
 80058c4:	5cc3      	ldrb	r3, [r0, r3]
 80058c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80058ca:	460b      	mov	r3, r1
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d1f5      	bne.n	80058bc <_printf_i+0x16c>
 80058d0:	e7b9      	b.n	8005846 <_printf_i+0xf6>
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	6825      	ldr	r5, [r4, #0]
 80058d6:	6961      	ldr	r1, [r4, #20]
 80058d8:	1d18      	adds	r0, r3, #4
 80058da:	6010      	str	r0, [r2, #0]
 80058dc:	0628      	lsls	r0, r5, #24
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	d501      	bpl.n	80058e6 <_printf_i+0x196>
 80058e2:	6019      	str	r1, [r3, #0]
 80058e4:	e002      	b.n	80058ec <_printf_i+0x19c>
 80058e6:	066a      	lsls	r2, r5, #25
 80058e8:	d5fb      	bpl.n	80058e2 <_printf_i+0x192>
 80058ea:	8019      	strh	r1, [r3, #0]
 80058ec:	2300      	movs	r3, #0
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	4665      	mov	r5, ip
 80058f2:	e7b9      	b.n	8005868 <_printf_i+0x118>
 80058f4:	6813      	ldr	r3, [r2, #0]
 80058f6:	1d19      	adds	r1, r3, #4
 80058f8:	6011      	str	r1, [r2, #0]
 80058fa:	681d      	ldr	r5, [r3, #0]
 80058fc:	6862      	ldr	r2, [r4, #4]
 80058fe:	2100      	movs	r1, #0
 8005900:	4628      	mov	r0, r5
 8005902:	f7fa fc75 	bl	80001f0 <memchr>
 8005906:	b108      	cbz	r0, 800590c <_printf_i+0x1bc>
 8005908:	1b40      	subs	r0, r0, r5
 800590a:	6060      	str	r0, [r4, #4]
 800590c:	6863      	ldr	r3, [r4, #4]
 800590e:	6123      	str	r3, [r4, #16]
 8005910:	2300      	movs	r3, #0
 8005912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005916:	e7a7      	b.n	8005868 <_printf_i+0x118>
 8005918:	6923      	ldr	r3, [r4, #16]
 800591a:	462a      	mov	r2, r5
 800591c:	4639      	mov	r1, r7
 800591e:	4630      	mov	r0, r6
 8005920:	47c0      	blx	r8
 8005922:	3001      	adds	r0, #1
 8005924:	d0aa      	beq.n	800587c <_printf_i+0x12c>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	079b      	lsls	r3, r3, #30
 800592a:	d413      	bmi.n	8005954 <_printf_i+0x204>
 800592c:	68e0      	ldr	r0, [r4, #12]
 800592e:	9b03      	ldr	r3, [sp, #12]
 8005930:	4298      	cmp	r0, r3
 8005932:	bfb8      	it	lt
 8005934:	4618      	movlt	r0, r3
 8005936:	e7a3      	b.n	8005880 <_printf_i+0x130>
 8005938:	2301      	movs	r3, #1
 800593a:	464a      	mov	r2, r9
 800593c:	4639      	mov	r1, r7
 800593e:	4630      	mov	r0, r6
 8005940:	47c0      	blx	r8
 8005942:	3001      	adds	r0, #1
 8005944:	d09a      	beq.n	800587c <_printf_i+0x12c>
 8005946:	3501      	adds	r5, #1
 8005948:	68e3      	ldr	r3, [r4, #12]
 800594a:	9a03      	ldr	r2, [sp, #12]
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	42ab      	cmp	r3, r5
 8005950:	dcf2      	bgt.n	8005938 <_printf_i+0x1e8>
 8005952:	e7eb      	b.n	800592c <_printf_i+0x1dc>
 8005954:	2500      	movs	r5, #0
 8005956:	f104 0919 	add.w	r9, r4, #25
 800595a:	e7f5      	b.n	8005948 <_printf_i+0x1f8>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1ac      	bne.n	80058ba <_printf_i+0x16a>
 8005960:	7803      	ldrb	r3, [r0, #0]
 8005962:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005966:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800596a:	e76c      	b.n	8005846 <_printf_i+0xf6>
 800596c:	080095d6 	.word	0x080095d6
 8005970:	080095e7 	.word	0x080095e7

08005974 <iprintf>:
 8005974:	b40f      	push	{r0, r1, r2, r3}
 8005976:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <iprintf+0x2c>)
 8005978:	b513      	push	{r0, r1, r4, lr}
 800597a:	681c      	ldr	r4, [r3, #0]
 800597c:	b124      	cbz	r4, 8005988 <iprintf+0x14>
 800597e:	69a3      	ldr	r3, [r4, #24]
 8005980:	b913      	cbnz	r3, 8005988 <iprintf+0x14>
 8005982:	4620      	mov	r0, r4
 8005984:	f001 f868 	bl	8006a58 <__sinit>
 8005988:	ab05      	add	r3, sp, #20
 800598a:	9a04      	ldr	r2, [sp, #16]
 800598c:	68a1      	ldr	r1, [r4, #8]
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	4620      	mov	r0, r4
 8005992:	f001 fd21 	bl	80073d8 <_vfiprintf_r>
 8005996:	b002      	add	sp, #8
 8005998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599c:	b004      	add	sp, #16
 800599e:	4770      	bx	lr
 80059a0:	2000004c 	.word	0x2000004c

080059a4 <_puts_r>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	460e      	mov	r6, r1
 80059a8:	4605      	mov	r5, r0
 80059aa:	b118      	cbz	r0, 80059b4 <_puts_r+0x10>
 80059ac:	6983      	ldr	r3, [r0, #24]
 80059ae:	b90b      	cbnz	r3, 80059b4 <_puts_r+0x10>
 80059b0:	f001 f852 	bl	8006a58 <__sinit>
 80059b4:	69ab      	ldr	r3, [r5, #24]
 80059b6:	68ac      	ldr	r4, [r5, #8]
 80059b8:	b913      	cbnz	r3, 80059c0 <_puts_r+0x1c>
 80059ba:	4628      	mov	r0, r5
 80059bc:	f001 f84c 	bl	8006a58 <__sinit>
 80059c0:	4b23      	ldr	r3, [pc, #140]	; (8005a50 <_puts_r+0xac>)
 80059c2:	429c      	cmp	r4, r3
 80059c4:	d117      	bne.n	80059f6 <_puts_r+0x52>
 80059c6:	686c      	ldr	r4, [r5, #4]
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	071b      	lsls	r3, r3, #28
 80059cc:	d51d      	bpl.n	8005a0a <_puts_r+0x66>
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	b1db      	cbz	r3, 8005a0a <_puts_r+0x66>
 80059d2:	3e01      	subs	r6, #1
 80059d4:	68a3      	ldr	r3, [r4, #8]
 80059d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059da:	3b01      	subs	r3, #1
 80059dc:	60a3      	str	r3, [r4, #8]
 80059de:	b9e9      	cbnz	r1, 8005a1c <_puts_r+0x78>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	da2e      	bge.n	8005a42 <_puts_r+0x9e>
 80059e4:	4622      	mov	r2, r4
 80059e6:	210a      	movs	r1, #10
 80059e8:	4628      	mov	r0, r5
 80059ea:	f000 f83f 	bl	8005a6c <__swbuf_r>
 80059ee:	3001      	adds	r0, #1
 80059f0:	d011      	beq.n	8005a16 <_puts_r+0x72>
 80059f2:	200a      	movs	r0, #10
 80059f4:	e011      	b.n	8005a1a <_puts_r+0x76>
 80059f6:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <_puts_r+0xb0>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d101      	bne.n	8005a00 <_puts_r+0x5c>
 80059fc:	68ac      	ldr	r4, [r5, #8]
 80059fe:	e7e3      	b.n	80059c8 <_puts_r+0x24>
 8005a00:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <_puts_r+0xb4>)
 8005a02:	429c      	cmp	r4, r3
 8005a04:	bf08      	it	eq
 8005a06:	68ec      	ldreq	r4, [r5, #12]
 8005a08:	e7de      	b.n	80059c8 <_puts_r+0x24>
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f000 f87f 	bl	8005b10 <__swsetup_r>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d0dd      	beq.n	80059d2 <_puts_r+0x2e>
 8005a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a1a:	bd70      	pop	{r4, r5, r6, pc}
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	da04      	bge.n	8005a2a <_puts_r+0x86>
 8005a20:	69a2      	ldr	r2, [r4, #24]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	dc06      	bgt.n	8005a34 <_puts_r+0x90>
 8005a26:	290a      	cmp	r1, #10
 8005a28:	d004      	beq.n	8005a34 <_puts_r+0x90>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	6022      	str	r2, [r4, #0]
 8005a30:	7019      	strb	r1, [r3, #0]
 8005a32:	e7cf      	b.n	80059d4 <_puts_r+0x30>
 8005a34:	4622      	mov	r2, r4
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 f818 	bl	8005a6c <__swbuf_r>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d1c9      	bne.n	80059d4 <_puts_r+0x30>
 8005a40:	e7e9      	b.n	8005a16 <_puts_r+0x72>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	200a      	movs	r0, #10
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	6022      	str	r2, [r4, #0]
 8005a4a:	7018      	strb	r0, [r3, #0]
 8005a4c:	e7e5      	b.n	8005a1a <_puts_r+0x76>
 8005a4e:	bf00      	nop
 8005a50:	08009628 	.word	0x08009628
 8005a54:	08009648 	.word	0x08009648
 8005a58:	08009608 	.word	0x08009608

08005a5c <puts>:
 8005a5c:	4b02      	ldr	r3, [pc, #8]	; (8005a68 <puts+0xc>)
 8005a5e:	4601      	mov	r1, r0
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	f7ff bf9f 	b.w	80059a4 <_puts_r>
 8005a66:	bf00      	nop
 8005a68:	2000004c 	.word	0x2000004c

08005a6c <__swbuf_r>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	460e      	mov	r6, r1
 8005a70:	4614      	mov	r4, r2
 8005a72:	4605      	mov	r5, r0
 8005a74:	b118      	cbz	r0, 8005a7e <__swbuf_r+0x12>
 8005a76:	6983      	ldr	r3, [r0, #24]
 8005a78:	b90b      	cbnz	r3, 8005a7e <__swbuf_r+0x12>
 8005a7a:	f000 ffed 	bl	8006a58 <__sinit>
 8005a7e:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <__swbuf_r+0x98>)
 8005a80:	429c      	cmp	r4, r3
 8005a82:	d12a      	bne.n	8005ada <__swbuf_r+0x6e>
 8005a84:	686c      	ldr	r4, [r5, #4]
 8005a86:	69a3      	ldr	r3, [r4, #24]
 8005a88:	60a3      	str	r3, [r4, #8]
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	071a      	lsls	r2, r3, #28
 8005a8e:	d52e      	bpl.n	8005aee <__swbuf_r+0x82>
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	b363      	cbz	r3, 8005aee <__swbuf_r+0x82>
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	1ac0      	subs	r0, r0, r3
 8005a9a:	6963      	ldr	r3, [r4, #20]
 8005a9c:	b2f6      	uxtb	r6, r6
 8005a9e:	4283      	cmp	r3, r0
 8005aa0:	4637      	mov	r7, r6
 8005aa2:	dc04      	bgt.n	8005aae <__swbuf_r+0x42>
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 ff6c 	bl	8006984 <_fflush_r>
 8005aac:	bb28      	cbnz	r0, 8005afa <__swbuf_r+0x8e>
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	60a3      	str	r3, [r4, #8]
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	6022      	str	r2, [r4, #0]
 8005aba:	701e      	strb	r6, [r3, #0]
 8005abc:	6963      	ldr	r3, [r4, #20]
 8005abe:	3001      	adds	r0, #1
 8005ac0:	4283      	cmp	r3, r0
 8005ac2:	d004      	beq.n	8005ace <__swbuf_r+0x62>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	07db      	lsls	r3, r3, #31
 8005ac8:	d519      	bpl.n	8005afe <__swbuf_r+0x92>
 8005aca:	2e0a      	cmp	r6, #10
 8005acc:	d117      	bne.n	8005afe <__swbuf_r+0x92>
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 ff57 	bl	8006984 <_fflush_r>
 8005ad6:	b190      	cbz	r0, 8005afe <__swbuf_r+0x92>
 8005ad8:	e00f      	b.n	8005afa <__swbuf_r+0x8e>
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <__swbuf_r+0x9c>)
 8005adc:	429c      	cmp	r4, r3
 8005ade:	d101      	bne.n	8005ae4 <__swbuf_r+0x78>
 8005ae0:	68ac      	ldr	r4, [r5, #8]
 8005ae2:	e7d0      	b.n	8005a86 <__swbuf_r+0x1a>
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <__swbuf_r+0xa0>)
 8005ae6:	429c      	cmp	r4, r3
 8005ae8:	bf08      	it	eq
 8005aea:	68ec      	ldreq	r4, [r5, #12]
 8005aec:	e7cb      	b.n	8005a86 <__swbuf_r+0x1a>
 8005aee:	4621      	mov	r1, r4
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 f80d 	bl	8005b10 <__swsetup_r>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d0cc      	beq.n	8005a94 <__swbuf_r+0x28>
 8005afa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005afe:	4638      	mov	r0, r7
 8005b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b02:	bf00      	nop
 8005b04:	08009628 	.word	0x08009628
 8005b08:	08009648 	.word	0x08009648
 8005b0c:	08009608 	.word	0x08009608

08005b10 <__swsetup_r>:
 8005b10:	4b32      	ldr	r3, [pc, #200]	; (8005bdc <__swsetup_r+0xcc>)
 8005b12:	b570      	push	{r4, r5, r6, lr}
 8005b14:	681d      	ldr	r5, [r3, #0]
 8005b16:	4606      	mov	r6, r0
 8005b18:	460c      	mov	r4, r1
 8005b1a:	b125      	cbz	r5, 8005b26 <__swsetup_r+0x16>
 8005b1c:	69ab      	ldr	r3, [r5, #24]
 8005b1e:	b913      	cbnz	r3, 8005b26 <__swsetup_r+0x16>
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 ff99 	bl	8006a58 <__sinit>
 8005b26:	4b2e      	ldr	r3, [pc, #184]	; (8005be0 <__swsetup_r+0xd0>)
 8005b28:	429c      	cmp	r4, r3
 8005b2a:	d10f      	bne.n	8005b4c <__swsetup_r+0x3c>
 8005b2c:	686c      	ldr	r4, [r5, #4]
 8005b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	0715      	lsls	r5, r2, #28
 8005b36:	d42c      	bmi.n	8005b92 <__swsetup_r+0x82>
 8005b38:	06d0      	lsls	r0, r2, #27
 8005b3a:	d411      	bmi.n	8005b60 <__swsetup_r+0x50>
 8005b3c:	2209      	movs	r2, #9
 8005b3e:	6032      	str	r2, [r6, #0]
 8005b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b44:	81a3      	strh	r3, [r4, #12]
 8005b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b4a:	e03e      	b.n	8005bca <__swsetup_r+0xba>
 8005b4c:	4b25      	ldr	r3, [pc, #148]	; (8005be4 <__swsetup_r+0xd4>)
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	d101      	bne.n	8005b56 <__swsetup_r+0x46>
 8005b52:	68ac      	ldr	r4, [r5, #8]
 8005b54:	e7eb      	b.n	8005b2e <__swsetup_r+0x1e>
 8005b56:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <__swsetup_r+0xd8>)
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	bf08      	it	eq
 8005b5c:	68ec      	ldreq	r4, [r5, #12]
 8005b5e:	e7e6      	b.n	8005b2e <__swsetup_r+0x1e>
 8005b60:	0751      	lsls	r1, r2, #29
 8005b62:	d512      	bpl.n	8005b8a <__swsetup_r+0x7a>
 8005b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b66:	b141      	cbz	r1, 8005b7a <__swsetup_r+0x6a>
 8005b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b6c:	4299      	cmp	r1, r3
 8005b6e:	d002      	beq.n	8005b76 <__swsetup_r+0x66>
 8005b70:	4630      	mov	r0, r6
 8005b72:	f001 fb5f 	bl	8007234 <_free_r>
 8005b76:	2300      	movs	r3, #0
 8005b78:	6363      	str	r3, [r4, #52]	; 0x34
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b80:	81a3      	strh	r3, [r4, #12]
 8005b82:	2300      	movs	r3, #0
 8005b84:	6063      	str	r3, [r4, #4]
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	89a3      	ldrh	r3, [r4, #12]
 8005b8c:	f043 0308 	orr.w	r3, r3, #8
 8005b90:	81a3      	strh	r3, [r4, #12]
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	b94b      	cbnz	r3, 8005baa <__swsetup_r+0x9a>
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba0:	d003      	beq.n	8005baa <__swsetup_r+0x9a>
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f001 f813 	bl	8006bd0 <__smakebuf_r>
 8005baa:	89a2      	ldrh	r2, [r4, #12]
 8005bac:	f012 0301 	ands.w	r3, r2, #1
 8005bb0:	d00c      	beq.n	8005bcc <__swsetup_r+0xbc>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60a3      	str	r3, [r4, #8]
 8005bb6:	6963      	ldr	r3, [r4, #20]
 8005bb8:	425b      	negs	r3, r3
 8005bba:	61a3      	str	r3, [r4, #24]
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	b953      	cbnz	r3, 8005bd6 <__swsetup_r+0xc6>
 8005bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005bc8:	d1ba      	bne.n	8005b40 <__swsetup_r+0x30>
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	0792      	lsls	r2, r2, #30
 8005bce:	bf58      	it	pl
 8005bd0:	6963      	ldrpl	r3, [r4, #20]
 8005bd2:	60a3      	str	r3, [r4, #8]
 8005bd4:	e7f2      	b.n	8005bbc <__swsetup_r+0xac>
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	e7f7      	b.n	8005bca <__swsetup_r+0xba>
 8005bda:	bf00      	nop
 8005bdc:	2000004c 	.word	0x2000004c
 8005be0:	08009628 	.word	0x08009628
 8005be4:	08009648 	.word	0x08009648
 8005be8:	08009608 	.word	0x08009608

08005bec <quorem>:
 8005bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	6903      	ldr	r3, [r0, #16]
 8005bf2:	690c      	ldr	r4, [r1, #16]
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	4680      	mov	r8, r0
 8005bf8:	f2c0 8082 	blt.w	8005d00 <quorem+0x114>
 8005bfc:	3c01      	subs	r4, #1
 8005bfe:	f101 0714 	add.w	r7, r1, #20
 8005c02:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005c06:	f100 0614 	add.w	r6, r0, #20
 8005c0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005c0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005c12:	eb06 030c 	add.w	r3, r6, ip
 8005c16:	3501      	adds	r5, #1
 8005c18:	eb07 090c 	add.w	r9, r7, ip
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c22:	b395      	cbz	r5, 8005c8a <quorem+0x9e>
 8005c24:	f04f 0a00 	mov.w	sl, #0
 8005c28:	4638      	mov	r0, r7
 8005c2a:	46b6      	mov	lr, r6
 8005c2c:	46d3      	mov	fp, sl
 8005c2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c32:	b293      	uxth	r3, r2
 8005c34:	fb05 a303 	mla	r3, r5, r3, sl
 8005c38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	ebab 0303 	sub.w	r3, fp, r3
 8005c42:	0c12      	lsrs	r2, r2, #16
 8005c44:	f8de b000 	ldr.w	fp, [lr]
 8005c48:	fb05 a202 	mla	r2, r5, r2, sl
 8005c4c:	fa13 f38b 	uxtah	r3, r3, fp
 8005c50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005c54:	fa1f fb82 	uxth.w	fp, r2
 8005c58:	f8de 2000 	ldr.w	r2, [lr]
 8005c5c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005c60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c6a:	4581      	cmp	r9, r0
 8005c6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005c70:	f84e 3b04 	str.w	r3, [lr], #4
 8005c74:	d2db      	bcs.n	8005c2e <quorem+0x42>
 8005c76:	f856 300c 	ldr.w	r3, [r6, ip]
 8005c7a:	b933      	cbnz	r3, 8005c8a <quorem+0x9e>
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	3b04      	subs	r3, #4
 8005c80:	429e      	cmp	r6, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	d330      	bcc.n	8005ce8 <quorem+0xfc>
 8005c86:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	f001 f9fe 	bl	800708c <__mcmp>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	db25      	blt.n	8005ce0 <quorem+0xf4>
 8005c94:	3501      	adds	r5, #1
 8005c96:	4630      	mov	r0, r6
 8005c98:	f04f 0c00 	mov.w	ip, #0
 8005c9c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005ca0:	f8d0 e000 	ldr.w	lr, [r0]
 8005ca4:	b293      	uxth	r3, r2
 8005ca6:	ebac 0303 	sub.w	r3, ip, r3
 8005caa:	0c12      	lsrs	r2, r2, #16
 8005cac:	fa13 f38e 	uxtah	r3, r3, lr
 8005cb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005cb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cbe:	45b9      	cmp	r9, r7
 8005cc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cc4:	f840 3b04 	str.w	r3, [r0], #4
 8005cc8:	d2e8      	bcs.n	8005c9c <quorem+0xb0>
 8005cca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005cce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005cd2:	b92a      	cbnz	r2, 8005ce0 <quorem+0xf4>
 8005cd4:	3b04      	subs	r3, #4
 8005cd6:	429e      	cmp	r6, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	d30b      	bcc.n	8005cf4 <quorem+0x108>
 8005cdc:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	b003      	add	sp, #12
 8005ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	3b04      	subs	r3, #4
 8005cec:	2a00      	cmp	r2, #0
 8005cee:	d1ca      	bne.n	8005c86 <quorem+0x9a>
 8005cf0:	3c01      	subs	r4, #1
 8005cf2:	e7c5      	b.n	8005c80 <quorem+0x94>
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	3b04      	subs	r3, #4
 8005cf8:	2a00      	cmp	r2, #0
 8005cfa:	d1ef      	bne.n	8005cdc <quorem+0xf0>
 8005cfc:	3c01      	subs	r4, #1
 8005cfe:	e7ea      	b.n	8005cd6 <quorem+0xea>
 8005d00:	2000      	movs	r0, #0
 8005d02:	e7ee      	b.n	8005ce2 <quorem+0xf6>
 8005d04:	0000      	movs	r0, r0
	...

08005d08 <_dtoa_r>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	ec57 6b10 	vmov	r6, r7, d0
 8005d10:	b097      	sub	sp, #92	; 0x5c
 8005d12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d14:	9106      	str	r1, [sp, #24]
 8005d16:	4604      	mov	r4, r0
 8005d18:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d1a:	9312      	str	r3, [sp, #72]	; 0x48
 8005d1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d20:	e9cd 6700 	strd	r6, r7, [sp]
 8005d24:	b93d      	cbnz	r5, 8005d36 <_dtoa_r+0x2e>
 8005d26:	2010      	movs	r0, #16
 8005d28:	f000 ff92 	bl	8006c50 <malloc>
 8005d2c:	6260      	str	r0, [r4, #36]	; 0x24
 8005d2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d32:	6005      	str	r5, [r0, #0]
 8005d34:	60c5      	str	r5, [r0, #12]
 8005d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d38:	6819      	ldr	r1, [r3, #0]
 8005d3a:	b151      	cbz	r1, 8005d52 <_dtoa_r+0x4a>
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	604a      	str	r2, [r1, #4]
 8005d40:	2301      	movs	r3, #1
 8005d42:	4093      	lsls	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
 8005d46:	4620      	mov	r0, r4
 8005d48:	f000 ffbe 	bl	8006cc8 <_Bfree>
 8005d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	1e3b      	subs	r3, r7, #0
 8005d54:	bfbb      	ittet	lt
 8005d56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d5a:	9301      	strlt	r3, [sp, #4]
 8005d5c:	2300      	movge	r3, #0
 8005d5e:	2201      	movlt	r2, #1
 8005d60:	bfac      	ite	ge
 8005d62:	f8c8 3000 	strge.w	r3, [r8]
 8005d66:	f8c8 2000 	strlt.w	r2, [r8]
 8005d6a:	4baf      	ldr	r3, [pc, #700]	; (8006028 <_dtoa_r+0x320>)
 8005d6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005d70:	ea33 0308 	bics.w	r3, r3, r8
 8005d74:	d114      	bne.n	8005da0 <_dtoa_r+0x98>
 8005d76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d78:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	9b00      	ldr	r3, [sp, #0]
 8005d80:	b923      	cbnz	r3, 8005d8c <_dtoa_r+0x84>
 8005d82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f000 8542 	beq.w	8006810 <_dtoa_r+0xb08>
 8005d8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800603c <_dtoa_r+0x334>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 8544 	beq.w	8006820 <_dtoa_r+0xb18>
 8005d98:	f10b 0303 	add.w	r3, fp, #3
 8005d9c:	f000 bd3e 	b.w	800681c <_dtoa_r+0xb14>
 8005da0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005da4:	2200      	movs	r2, #0
 8005da6:	2300      	movs	r3, #0
 8005da8:	4630      	mov	r0, r6
 8005daa:	4639      	mov	r1, r7
 8005dac:	f7fa fe94 	bl	8000ad8 <__aeabi_dcmpeq>
 8005db0:	4681      	mov	r9, r0
 8005db2:	b168      	cbz	r0, 8005dd0 <_dtoa_r+0xc8>
 8005db4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005db6:	2301      	movs	r3, #1
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8524 	beq.w	800680a <_dtoa_r+0xb02>
 8005dc2:	4b9a      	ldr	r3, [pc, #616]	; (800602c <_dtoa_r+0x324>)
 8005dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005dc6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	f000 bd28 	b.w	8006820 <_dtoa_r+0xb18>
 8005dd0:	aa14      	add	r2, sp, #80	; 0x50
 8005dd2:	a915      	add	r1, sp, #84	; 0x54
 8005dd4:	ec47 6b10 	vmov	d0, r6, r7
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f001 f9ce 	bl	800717a <__d2b>
 8005dde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005de2:	9004      	str	r0, [sp, #16]
 8005de4:	2d00      	cmp	r5, #0
 8005de6:	d07c      	beq.n	8005ee2 <_dtoa_r+0x1da>
 8005de8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005dec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005df0:	46b2      	mov	sl, r6
 8005df2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005df6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005dfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4b8b      	ldr	r3, [pc, #556]	; (8006030 <_dtoa_r+0x328>)
 8005e02:	4650      	mov	r0, sl
 8005e04:	4659      	mov	r1, fp
 8005e06:	f7fa fa47 	bl	8000298 <__aeabi_dsub>
 8005e0a:	a381      	add	r3, pc, #516	; (adr r3, 8006010 <_dtoa_r+0x308>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f7fa fbfa 	bl	8000608 <__aeabi_dmul>
 8005e14:	a380      	add	r3, pc, #512	; (adr r3, 8006018 <_dtoa_r+0x310>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f7fa fa3f 	bl	800029c <__adddf3>
 8005e1e:	4606      	mov	r6, r0
 8005e20:	4628      	mov	r0, r5
 8005e22:	460f      	mov	r7, r1
 8005e24:	f7fa fb86 	bl	8000534 <__aeabi_i2d>
 8005e28:	a37d      	add	r3, pc, #500	; (adr r3, 8006020 <_dtoa_r+0x318>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fbeb 	bl	8000608 <__aeabi_dmul>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	f7fa fa2f 	bl	800029c <__adddf3>
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460f      	mov	r7, r1
 8005e42:	f7fa fe91 	bl	8000b68 <__aeabi_d2iz>
 8005e46:	2200      	movs	r2, #0
 8005e48:	4682      	mov	sl, r0
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	4639      	mov	r1, r7
 8005e50:	f7fa fe4c 	bl	8000aec <__aeabi_dcmplt>
 8005e54:	b148      	cbz	r0, 8005e6a <_dtoa_r+0x162>
 8005e56:	4650      	mov	r0, sl
 8005e58:	f7fa fb6c 	bl	8000534 <__aeabi_i2d>
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	463b      	mov	r3, r7
 8005e60:	f7fa fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e64:	b908      	cbnz	r0, 8005e6a <_dtoa_r+0x162>
 8005e66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e6a:	f1ba 0f16 	cmp.w	sl, #22
 8005e6e:	d859      	bhi.n	8005f24 <_dtoa_r+0x21c>
 8005e70:	4970      	ldr	r1, [pc, #448]	; (8006034 <_dtoa_r+0x32c>)
 8005e72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e7e:	f7fa fe53 	bl	8000b28 <__aeabi_dcmpgt>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d050      	beq.n	8005f28 <_dtoa_r+0x220>
 8005e86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e90:	1b5d      	subs	r5, r3, r5
 8005e92:	f1b5 0801 	subs.w	r8, r5, #1
 8005e96:	bf49      	itett	mi
 8005e98:	f1c5 0301 	rsbmi	r3, r5, #1
 8005e9c:	2300      	movpl	r3, #0
 8005e9e:	9305      	strmi	r3, [sp, #20]
 8005ea0:	f04f 0800 	movmi.w	r8, #0
 8005ea4:	bf58      	it	pl
 8005ea6:	9305      	strpl	r3, [sp, #20]
 8005ea8:	f1ba 0f00 	cmp.w	sl, #0
 8005eac:	db3e      	blt.n	8005f2c <_dtoa_r+0x224>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	44d0      	add	r8, sl
 8005eb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005eb6:	9307      	str	r3, [sp, #28]
 8005eb8:	9b06      	ldr	r3, [sp, #24]
 8005eba:	2b09      	cmp	r3, #9
 8005ebc:	f200 8090 	bhi.w	8005fe0 <_dtoa_r+0x2d8>
 8005ec0:	2b05      	cmp	r3, #5
 8005ec2:	bfc4      	itt	gt
 8005ec4:	3b04      	subgt	r3, #4
 8005ec6:	9306      	strgt	r3, [sp, #24]
 8005ec8:	9b06      	ldr	r3, [sp, #24]
 8005eca:	f1a3 0302 	sub.w	r3, r3, #2
 8005ece:	bfcc      	ite	gt
 8005ed0:	2500      	movgt	r5, #0
 8005ed2:	2501      	movle	r5, #1
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	f200 808f 	bhi.w	8005ff8 <_dtoa_r+0x2f0>
 8005eda:	e8df f003 	tbb	[pc, r3]
 8005ede:	7f7d      	.short	0x7f7d
 8005ee0:	7131      	.short	0x7131
 8005ee2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005ee6:	441d      	add	r5, r3
 8005ee8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005eec:	2820      	cmp	r0, #32
 8005eee:	dd13      	ble.n	8005f18 <_dtoa_r+0x210>
 8005ef0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005ef4:	9b00      	ldr	r3, [sp, #0]
 8005ef6:	fa08 f800 	lsl.w	r8, r8, r0
 8005efa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005efe:	fa23 f000 	lsr.w	r0, r3, r0
 8005f02:	ea48 0000 	orr.w	r0, r8, r0
 8005f06:	f7fa fb05 	bl	8000514 <__aeabi_ui2d>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4682      	mov	sl, r0
 8005f0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005f12:	3d01      	subs	r5, #1
 8005f14:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f16:	e772      	b.n	8005dfe <_dtoa_r+0xf6>
 8005f18:	9b00      	ldr	r3, [sp, #0]
 8005f1a:	f1c0 0020 	rsb	r0, r0, #32
 8005f1e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f22:	e7f0      	b.n	8005f06 <_dtoa_r+0x1fe>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e7b1      	b.n	8005e8c <_dtoa_r+0x184>
 8005f28:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f2a:	e7b0      	b.n	8005e8e <_dtoa_r+0x186>
 8005f2c:	9b05      	ldr	r3, [sp, #20]
 8005f2e:	eba3 030a 	sub.w	r3, r3, sl
 8005f32:	9305      	str	r3, [sp, #20]
 8005f34:	f1ca 0300 	rsb	r3, sl, #0
 8005f38:	9307      	str	r3, [sp, #28]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	930e      	str	r3, [sp, #56]	; 0x38
 8005f3e:	e7bb      	b.n	8005eb8 <_dtoa_r+0x1b0>
 8005f40:	2301      	movs	r3, #1
 8005f42:	930a      	str	r3, [sp, #40]	; 0x28
 8005f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	dd59      	ble.n	8005ffe <_dtoa_r+0x2f6>
 8005f4a:	9302      	str	r3, [sp, #8]
 8005f4c:	4699      	mov	r9, r3
 8005f4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f50:	2200      	movs	r2, #0
 8005f52:	6072      	str	r2, [r6, #4]
 8005f54:	2204      	movs	r2, #4
 8005f56:	f102 0014 	add.w	r0, r2, #20
 8005f5a:	4298      	cmp	r0, r3
 8005f5c:	6871      	ldr	r1, [r6, #4]
 8005f5e:	d953      	bls.n	8006008 <_dtoa_r+0x300>
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 fe7d 	bl	8006c60 <_Balloc>
 8005f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f68:	6030      	str	r0, [r6, #0]
 8005f6a:	f1b9 0f0e 	cmp.w	r9, #14
 8005f6e:	f8d3 b000 	ldr.w	fp, [r3]
 8005f72:	f200 80e6 	bhi.w	8006142 <_dtoa_r+0x43a>
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	f000 80e3 	beq.w	8006142 <_dtoa_r+0x43a>
 8005f7c:	ed9d 7b00 	vldr	d7, [sp]
 8005f80:	f1ba 0f00 	cmp.w	sl, #0
 8005f84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005f88:	dd74      	ble.n	8006074 <_dtoa_r+0x36c>
 8005f8a:	4a2a      	ldr	r2, [pc, #168]	; (8006034 <_dtoa_r+0x32c>)
 8005f8c:	f00a 030f 	and.w	r3, sl, #15
 8005f90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f94:	ed93 7b00 	vldr	d7, [r3]
 8005f98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005f9c:	06f0      	lsls	r0, r6, #27
 8005f9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005fa2:	d565      	bpl.n	8006070 <_dtoa_r+0x368>
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <_dtoa_r+0x330>)
 8005fa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005faa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fae:	f7fa fc55 	bl	800085c <__aeabi_ddiv>
 8005fb2:	e9cd 0100 	strd	r0, r1, [sp]
 8005fb6:	f006 060f 	and.w	r6, r6, #15
 8005fba:	2503      	movs	r5, #3
 8005fbc:	4f1e      	ldr	r7, [pc, #120]	; (8006038 <_dtoa_r+0x330>)
 8005fbe:	e04c      	b.n	800605a <_dtoa_r+0x352>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fc6:	4453      	add	r3, sl
 8005fc8:	f103 0901 	add.w	r9, r3, #1
 8005fcc:	9302      	str	r3, [sp, #8]
 8005fce:	464b      	mov	r3, r9
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	bfb8      	it	lt
 8005fd4:	2301      	movlt	r3, #1
 8005fd6:	e7ba      	b.n	8005f4e <_dtoa_r+0x246>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e7b2      	b.n	8005f42 <_dtoa_r+0x23a>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e7f0      	b.n	8005fc2 <_dtoa_r+0x2ba>
 8005fe0:	2501      	movs	r5, #1
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9306      	str	r3, [sp, #24]
 8005fe6:	950a      	str	r5, [sp, #40]	; 0x28
 8005fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fec:	9302      	str	r3, [sp, #8]
 8005fee:	4699      	mov	r9, r3
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2312      	movs	r3, #18
 8005ff4:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ff6:	e7aa      	b.n	8005f4e <_dtoa_r+0x246>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8005ffc:	e7f4      	b.n	8005fe8 <_dtoa_r+0x2e0>
 8005ffe:	2301      	movs	r3, #1
 8006000:	9302      	str	r3, [sp, #8]
 8006002:	4699      	mov	r9, r3
 8006004:	461a      	mov	r2, r3
 8006006:	e7f5      	b.n	8005ff4 <_dtoa_r+0x2ec>
 8006008:	3101      	adds	r1, #1
 800600a:	6071      	str	r1, [r6, #4]
 800600c:	0052      	lsls	r2, r2, #1
 800600e:	e7a2      	b.n	8005f56 <_dtoa_r+0x24e>
 8006010:	636f4361 	.word	0x636f4361
 8006014:	3fd287a7 	.word	0x3fd287a7
 8006018:	8b60c8b3 	.word	0x8b60c8b3
 800601c:	3fc68a28 	.word	0x3fc68a28
 8006020:	509f79fb 	.word	0x509f79fb
 8006024:	3fd34413 	.word	0x3fd34413
 8006028:	7ff00000 	.word	0x7ff00000
 800602c:	080095d5 	.word	0x080095d5
 8006030:	3ff80000 	.word	0x3ff80000
 8006034:	08009690 	.word	0x08009690
 8006038:	08009668 	.word	0x08009668
 800603c:	08009601 	.word	0x08009601
 8006040:	07f1      	lsls	r1, r6, #31
 8006042:	d508      	bpl.n	8006056 <_dtoa_r+0x34e>
 8006044:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604c:	f7fa fadc 	bl	8000608 <__aeabi_dmul>
 8006050:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006054:	3501      	adds	r5, #1
 8006056:	1076      	asrs	r6, r6, #1
 8006058:	3708      	adds	r7, #8
 800605a:	2e00      	cmp	r6, #0
 800605c:	d1f0      	bne.n	8006040 <_dtoa_r+0x338>
 800605e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006066:	f7fa fbf9 	bl	800085c <__aeabi_ddiv>
 800606a:	e9cd 0100 	strd	r0, r1, [sp]
 800606e:	e01a      	b.n	80060a6 <_dtoa_r+0x39e>
 8006070:	2502      	movs	r5, #2
 8006072:	e7a3      	b.n	8005fbc <_dtoa_r+0x2b4>
 8006074:	f000 80a0 	beq.w	80061b8 <_dtoa_r+0x4b0>
 8006078:	f1ca 0600 	rsb	r6, sl, #0
 800607c:	4b9f      	ldr	r3, [pc, #636]	; (80062fc <_dtoa_r+0x5f4>)
 800607e:	4fa0      	ldr	r7, [pc, #640]	; (8006300 <_dtoa_r+0x5f8>)
 8006080:	f006 020f 	and.w	r2, r6, #15
 8006084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006090:	f7fa faba 	bl	8000608 <__aeabi_dmul>
 8006094:	e9cd 0100 	strd	r0, r1, [sp]
 8006098:	1136      	asrs	r6, r6, #4
 800609a:	2300      	movs	r3, #0
 800609c:	2502      	movs	r5, #2
 800609e:	2e00      	cmp	r6, #0
 80060a0:	d17f      	bne.n	80061a2 <_dtoa_r+0x49a>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e1      	bne.n	800606a <_dtoa_r+0x362>
 80060a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8087 	beq.w	80061bc <_dtoa_r+0x4b4>
 80060ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80060b2:	2200      	movs	r2, #0
 80060b4:	4b93      	ldr	r3, [pc, #588]	; (8006304 <_dtoa_r+0x5fc>)
 80060b6:	4630      	mov	r0, r6
 80060b8:	4639      	mov	r1, r7
 80060ba:	f7fa fd17 	bl	8000aec <__aeabi_dcmplt>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d07c      	beq.n	80061bc <_dtoa_r+0x4b4>
 80060c2:	f1b9 0f00 	cmp.w	r9, #0
 80060c6:	d079      	beq.n	80061bc <_dtoa_r+0x4b4>
 80060c8:	9b02      	ldr	r3, [sp, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	dd35      	ble.n	800613a <_dtoa_r+0x432>
 80060ce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80060d2:	9308      	str	r3, [sp, #32]
 80060d4:	4639      	mov	r1, r7
 80060d6:	2200      	movs	r2, #0
 80060d8:	4b8b      	ldr	r3, [pc, #556]	; (8006308 <_dtoa_r+0x600>)
 80060da:	4630      	mov	r0, r6
 80060dc:	f7fa fa94 	bl	8000608 <__aeabi_dmul>
 80060e0:	e9cd 0100 	strd	r0, r1, [sp]
 80060e4:	9f02      	ldr	r7, [sp, #8]
 80060e6:	3501      	adds	r5, #1
 80060e8:	4628      	mov	r0, r5
 80060ea:	f7fa fa23 	bl	8000534 <__aeabi_i2d>
 80060ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060f2:	f7fa fa89 	bl	8000608 <__aeabi_dmul>
 80060f6:	2200      	movs	r2, #0
 80060f8:	4b84      	ldr	r3, [pc, #528]	; (800630c <_dtoa_r+0x604>)
 80060fa:	f7fa f8cf 	bl	800029c <__adddf3>
 80060fe:	4605      	mov	r5, r0
 8006100:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006104:	2f00      	cmp	r7, #0
 8006106:	d15d      	bne.n	80061c4 <_dtoa_r+0x4bc>
 8006108:	2200      	movs	r2, #0
 800610a:	4b81      	ldr	r3, [pc, #516]	; (8006310 <_dtoa_r+0x608>)
 800610c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006110:	f7fa f8c2 	bl	8000298 <__aeabi_dsub>
 8006114:	462a      	mov	r2, r5
 8006116:	4633      	mov	r3, r6
 8006118:	e9cd 0100 	strd	r0, r1, [sp]
 800611c:	f7fa fd04 	bl	8000b28 <__aeabi_dcmpgt>
 8006120:	2800      	cmp	r0, #0
 8006122:	f040 8288 	bne.w	8006636 <_dtoa_r+0x92e>
 8006126:	462a      	mov	r2, r5
 8006128:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800612c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006130:	f7fa fcdc 	bl	8000aec <__aeabi_dcmplt>
 8006134:	2800      	cmp	r0, #0
 8006136:	f040 827c 	bne.w	8006632 <_dtoa_r+0x92a>
 800613a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800613e:	e9cd 2300 	strd	r2, r3, [sp]
 8006142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006144:	2b00      	cmp	r3, #0
 8006146:	f2c0 8150 	blt.w	80063ea <_dtoa_r+0x6e2>
 800614a:	f1ba 0f0e 	cmp.w	sl, #14
 800614e:	f300 814c 	bgt.w	80063ea <_dtoa_r+0x6e2>
 8006152:	4b6a      	ldr	r3, [pc, #424]	; (80062fc <_dtoa_r+0x5f4>)
 8006154:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006158:	ed93 7b00 	vldr	d7, [r3]
 800615c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800615e:	2b00      	cmp	r3, #0
 8006160:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006164:	f280 80d8 	bge.w	8006318 <_dtoa_r+0x610>
 8006168:	f1b9 0f00 	cmp.w	r9, #0
 800616c:	f300 80d4 	bgt.w	8006318 <_dtoa_r+0x610>
 8006170:	f040 825e 	bne.w	8006630 <_dtoa_r+0x928>
 8006174:	2200      	movs	r2, #0
 8006176:	4b66      	ldr	r3, [pc, #408]	; (8006310 <_dtoa_r+0x608>)
 8006178:	ec51 0b17 	vmov	r0, r1, d7
 800617c:	f7fa fa44 	bl	8000608 <__aeabi_dmul>
 8006180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006184:	f7fa fcc6 	bl	8000b14 <__aeabi_dcmpge>
 8006188:	464f      	mov	r7, r9
 800618a:	464e      	mov	r6, r9
 800618c:	2800      	cmp	r0, #0
 800618e:	f040 8234 	bne.w	80065fa <_dtoa_r+0x8f2>
 8006192:	2331      	movs	r3, #49	; 0x31
 8006194:	f10b 0501 	add.w	r5, fp, #1
 8006198:	f88b 3000 	strb.w	r3, [fp]
 800619c:	f10a 0a01 	add.w	sl, sl, #1
 80061a0:	e22f      	b.n	8006602 <_dtoa_r+0x8fa>
 80061a2:	07f2      	lsls	r2, r6, #31
 80061a4:	d505      	bpl.n	80061b2 <_dtoa_r+0x4aa>
 80061a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061aa:	f7fa fa2d 	bl	8000608 <__aeabi_dmul>
 80061ae:	3501      	adds	r5, #1
 80061b0:	2301      	movs	r3, #1
 80061b2:	1076      	asrs	r6, r6, #1
 80061b4:	3708      	adds	r7, #8
 80061b6:	e772      	b.n	800609e <_dtoa_r+0x396>
 80061b8:	2502      	movs	r5, #2
 80061ba:	e774      	b.n	80060a6 <_dtoa_r+0x39e>
 80061bc:	f8cd a020 	str.w	sl, [sp, #32]
 80061c0:	464f      	mov	r7, r9
 80061c2:	e791      	b.n	80060e8 <_dtoa_r+0x3e0>
 80061c4:	4b4d      	ldr	r3, [pc, #308]	; (80062fc <_dtoa_r+0x5f4>)
 80061c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80061ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d047      	beq.n	8006264 <_dtoa_r+0x55c>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	2000      	movs	r0, #0
 80061da:	494e      	ldr	r1, [pc, #312]	; (8006314 <_dtoa_r+0x60c>)
 80061dc:	f7fa fb3e 	bl	800085c <__aeabi_ddiv>
 80061e0:	462a      	mov	r2, r5
 80061e2:	4633      	mov	r3, r6
 80061e4:	f7fa f858 	bl	8000298 <__aeabi_dsub>
 80061e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80061ec:	465d      	mov	r5, fp
 80061ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061f2:	f7fa fcb9 	bl	8000b68 <__aeabi_d2iz>
 80061f6:	4606      	mov	r6, r0
 80061f8:	f7fa f99c 	bl	8000534 <__aeabi_i2d>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006204:	f7fa f848 	bl	8000298 <__aeabi_dsub>
 8006208:	3630      	adds	r6, #48	; 0x30
 800620a:	f805 6b01 	strb.w	r6, [r5], #1
 800620e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006212:	e9cd 0100 	strd	r0, r1, [sp]
 8006216:	f7fa fc69 	bl	8000aec <__aeabi_dcmplt>
 800621a:	2800      	cmp	r0, #0
 800621c:	d163      	bne.n	80062e6 <_dtoa_r+0x5de>
 800621e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006222:	2000      	movs	r0, #0
 8006224:	4937      	ldr	r1, [pc, #220]	; (8006304 <_dtoa_r+0x5fc>)
 8006226:	f7fa f837 	bl	8000298 <__aeabi_dsub>
 800622a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800622e:	f7fa fc5d 	bl	8000aec <__aeabi_dcmplt>
 8006232:	2800      	cmp	r0, #0
 8006234:	f040 80b7 	bne.w	80063a6 <_dtoa_r+0x69e>
 8006238:	eba5 030b 	sub.w	r3, r5, fp
 800623c:	429f      	cmp	r7, r3
 800623e:	f77f af7c 	ble.w	800613a <_dtoa_r+0x432>
 8006242:	2200      	movs	r2, #0
 8006244:	4b30      	ldr	r3, [pc, #192]	; (8006308 <_dtoa_r+0x600>)
 8006246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800624a:	f7fa f9dd 	bl	8000608 <__aeabi_dmul>
 800624e:	2200      	movs	r2, #0
 8006250:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006254:	4b2c      	ldr	r3, [pc, #176]	; (8006308 <_dtoa_r+0x600>)
 8006256:	e9dd 0100 	ldrd	r0, r1, [sp]
 800625a:	f7fa f9d5 	bl	8000608 <__aeabi_dmul>
 800625e:	e9cd 0100 	strd	r0, r1, [sp]
 8006262:	e7c4      	b.n	80061ee <_dtoa_r+0x4e6>
 8006264:	462a      	mov	r2, r5
 8006266:	4633      	mov	r3, r6
 8006268:	f7fa f9ce 	bl	8000608 <__aeabi_dmul>
 800626c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006270:	eb0b 0507 	add.w	r5, fp, r7
 8006274:	465e      	mov	r6, fp
 8006276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800627a:	f7fa fc75 	bl	8000b68 <__aeabi_d2iz>
 800627e:	4607      	mov	r7, r0
 8006280:	f7fa f958 	bl	8000534 <__aeabi_i2d>
 8006284:	3730      	adds	r7, #48	; 0x30
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800628e:	f7fa f803 	bl	8000298 <__aeabi_dsub>
 8006292:	f806 7b01 	strb.w	r7, [r6], #1
 8006296:	42ae      	cmp	r6, r5
 8006298:	e9cd 0100 	strd	r0, r1, [sp]
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	d126      	bne.n	80062f0 <_dtoa_r+0x5e8>
 80062a2:	4b1c      	ldr	r3, [pc, #112]	; (8006314 <_dtoa_r+0x60c>)
 80062a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062a8:	f7f9 fff8 	bl	800029c <__adddf3>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062b4:	f7fa fc38 	bl	8000b28 <__aeabi_dcmpgt>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d174      	bne.n	80063a6 <_dtoa_r+0x69e>
 80062bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062c0:	2000      	movs	r0, #0
 80062c2:	4914      	ldr	r1, [pc, #80]	; (8006314 <_dtoa_r+0x60c>)
 80062c4:	f7f9 ffe8 	bl	8000298 <__aeabi_dsub>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062d0:	f7fa fc0c 	bl	8000aec <__aeabi_dcmplt>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	f43f af30 	beq.w	800613a <_dtoa_r+0x432>
 80062da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062de:	2b30      	cmp	r3, #48	; 0x30
 80062e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80062e4:	d002      	beq.n	80062ec <_dtoa_r+0x5e4>
 80062e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80062ea:	e04a      	b.n	8006382 <_dtoa_r+0x67a>
 80062ec:	4615      	mov	r5, r2
 80062ee:	e7f4      	b.n	80062da <_dtoa_r+0x5d2>
 80062f0:	4b05      	ldr	r3, [pc, #20]	; (8006308 <_dtoa_r+0x600>)
 80062f2:	f7fa f989 	bl	8000608 <__aeabi_dmul>
 80062f6:	e9cd 0100 	strd	r0, r1, [sp]
 80062fa:	e7bc      	b.n	8006276 <_dtoa_r+0x56e>
 80062fc:	08009690 	.word	0x08009690
 8006300:	08009668 	.word	0x08009668
 8006304:	3ff00000 	.word	0x3ff00000
 8006308:	40240000 	.word	0x40240000
 800630c:	401c0000 	.word	0x401c0000
 8006310:	40140000 	.word	0x40140000
 8006314:	3fe00000 	.word	0x3fe00000
 8006318:	e9dd 6700 	ldrd	r6, r7, [sp]
 800631c:	465d      	mov	r5, fp
 800631e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006322:	4630      	mov	r0, r6
 8006324:	4639      	mov	r1, r7
 8006326:	f7fa fa99 	bl	800085c <__aeabi_ddiv>
 800632a:	f7fa fc1d 	bl	8000b68 <__aeabi_d2iz>
 800632e:	4680      	mov	r8, r0
 8006330:	f7fa f900 	bl	8000534 <__aeabi_i2d>
 8006334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006338:	f7fa f966 	bl	8000608 <__aeabi_dmul>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4630      	mov	r0, r6
 8006342:	4639      	mov	r1, r7
 8006344:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006348:	f7f9 ffa6 	bl	8000298 <__aeabi_dsub>
 800634c:	f805 6b01 	strb.w	r6, [r5], #1
 8006350:	eba5 060b 	sub.w	r6, r5, fp
 8006354:	45b1      	cmp	r9, r6
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	d139      	bne.n	80063d0 <_dtoa_r+0x6c8>
 800635c:	f7f9 ff9e 	bl	800029c <__adddf3>
 8006360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006364:	4606      	mov	r6, r0
 8006366:	460f      	mov	r7, r1
 8006368:	f7fa fbde 	bl	8000b28 <__aeabi_dcmpgt>
 800636c:	b9c8      	cbnz	r0, 80063a2 <_dtoa_r+0x69a>
 800636e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006372:	4630      	mov	r0, r6
 8006374:	4639      	mov	r1, r7
 8006376:	f7fa fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800637a:	b110      	cbz	r0, 8006382 <_dtoa_r+0x67a>
 800637c:	f018 0f01 	tst.w	r8, #1
 8006380:	d10f      	bne.n	80063a2 <_dtoa_r+0x69a>
 8006382:	9904      	ldr	r1, [sp, #16]
 8006384:	4620      	mov	r0, r4
 8006386:	f000 fc9f 	bl	8006cc8 <_Bfree>
 800638a:	2300      	movs	r3, #0
 800638c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800638e:	702b      	strb	r3, [r5, #0]
 8006390:	f10a 0301 	add.w	r3, sl, #1
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8241 	beq.w	8006820 <_dtoa_r+0xb18>
 800639e:	601d      	str	r5, [r3, #0]
 80063a0:	e23e      	b.n	8006820 <_dtoa_r+0xb18>
 80063a2:	f8cd a020 	str.w	sl, [sp, #32]
 80063a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063aa:	2a39      	cmp	r2, #57	; 0x39
 80063ac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80063b0:	d108      	bne.n	80063c4 <_dtoa_r+0x6bc>
 80063b2:	459b      	cmp	fp, r3
 80063b4:	d10a      	bne.n	80063cc <_dtoa_r+0x6c4>
 80063b6:	9b08      	ldr	r3, [sp, #32]
 80063b8:	3301      	adds	r3, #1
 80063ba:	9308      	str	r3, [sp, #32]
 80063bc:	2330      	movs	r3, #48	; 0x30
 80063be:	f88b 3000 	strb.w	r3, [fp]
 80063c2:	465b      	mov	r3, fp
 80063c4:	781a      	ldrb	r2, [r3, #0]
 80063c6:	3201      	adds	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	e78c      	b.n	80062e6 <_dtoa_r+0x5de>
 80063cc:	461d      	mov	r5, r3
 80063ce:	e7ea      	b.n	80063a6 <_dtoa_r+0x69e>
 80063d0:	2200      	movs	r2, #0
 80063d2:	4b9b      	ldr	r3, [pc, #620]	; (8006640 <_dtoa_r+0x938>)
 80063d4:	f7fa f918 	bl	8000608 <__aeabi_dmul>
 80063d8:	2200      	movs	r2, #0
 80063da:	2300      	movs	r3, #0
 80063dc:	4606      	mov	r6, r0
 80063de:	460f      	mov	r7, r1
 80063e0:	f7fa fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d09a      	beq.n	800631e <_dtoa_r+0x616>
 80063e8:	e7cb      	b.n	8006382 <_dtoa_r+0x67a>
 80063ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ec:	2a00      	cmp	r2, #0
 80063ee:	f000 808b 	beq.w	8006508 <_dtoa_r+0x800>
 80063f2:	9a06      	ldr	r2, [sp, #24]
 80063f4:	2a01      	cmp	r2, #1
 80063f6:	dc6e      	bgt.n	80064d6 <_dtoa_r+0x7ce>
 80063f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063fa:	2a00      	cmp	r2, #0
 80063fc:	d067      	beq.n	80064ce <_dtoa_r+0x7c6>
 80063fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006402:	9f07      	ldr	r7, [sp, #28]
 8006404:	9d05      	ldr	r5, [sp, #20]
 8006406:	9a05      	ldr	r2, [sp, #20]
 8006408:	2101      	movs	r1, #1
 800640a:	441a      	add	r2, r3
 800640c:	4620      	mov	r0, r4
 800640e:	9205      	str	r2, [sp, #20]
 8006410:	4498      	add	r8, r3
 8006412:	f000 fcf9 	bl	8006e08 <__i2b>
 8006416:	4606      	mov	r6, r0
 8006418:	2d00      	cmp	r5, #0
 800641a:	dd0c      	ble.n	8006436 <_dtoa_r+0x72e>
 800641c:	f1b8 0f00 	cmp.w	r8, #0
 8006420:	dd09      	ble.n	8006436 <_dtoa_r+0x72e>
 8006422:	4545      	cmp	r5, r8
 8006424:	9a05      	ldr	r2, [sp, #20]
 8006426:	462b      	mov	r3, r5
 8006428:	bfa8      	it	ge
 800642a:	4643      	movge	r3, r8
 800642c:	1ad2      	subs	r2, r2, r3
 800642e:	9205      	str	r2, [sp, #20]
 8006430:	1aed      	subs	r5, r5, r3
 8006432:	eba8 0803 	sub.w	r8, r8, r3
 8006436:	9b07      	ldr	r3, [sp, #28]
 8006438:	b1eb      	cbz	r3, 8006476 <_dtoa_r+0x76e>
 800643a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800643c:	2b00      	cmp	r3, #0
 800643e:	d067      	beq.n	8006510 <_dtoa_r+0x808>
 8006440:	b18f      	cbz	r7, 8006466 <_dtoa_r+0x75e>
 8006442:	4631      	mov	r1, r6
 8006444:	463a      	mov	r2, r7
 8006446:	4620      	mov	r0, r4
 8006448:	f000 fd7e 	bl	8006f48 <__pow5mult>
 800644c:	9a04      	ldr	r2, [sp, #16]
 800644e:	4601      	mov	r1, r0
 8006450:	4606      	mov	r6, r0
 8006452:	4620      	mov	r0, r4
 8006454:	f000 fce1 	bl	8006e1a <__multiply>
 8006458:	9904      	ldr	r1, [sp, #16]
 800645a:	9008      	str	r0, [sp, #32]
 800645c:	4620      	mov	r0, r4
 800645e:	f000 fc33 	bl	8006cc8 <_Bfree>
 8006462:	9b08      	ldr	r3, [sp, #32]
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	9b07      	ldr	r3, [sp, #28]
 8006468:	1bda      	subs	r2, r3, r7
 800646a:	d004      	beq.n	8006476 <_dtoa_r+0x76e>
 800646c:	9904      	ldr	r1, [sp, #16]
 800646e:	4620      	mov	r0, r4
 8006470:	f000 fd6a 	bl	8006f48 <__pow5mult>
 8006474:	9004      	str	r0, [sp, #16]
 8006476:	2101      	movs	r1, #1
 8006478:	4620      	mov	r0, r4
 800647a:	f000 fcc5 	bl	8006e08 <__i2b>
 800647e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006480:	4607      	mov	r7, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 81d0 	beq.w	8006828 <_dtoa_r+0xb20>
 8006488:	461a      	mov	r2, r3
 800648a:	4601      	mov	r1, r0
 800648c:	4620      	mov	r0, r4
 800648e:	f000 fd5b 	bl	8006f48 <__pow5mult>
 8006492:	9b06      	ldr	r3, [sp, #24]
 8006494:	2b01      	cmp	r3, #1
 8006496:	4607      	mov	r7, r0
 8006498:	dc40      	bgt.n	800651c <_dtoa_r+0x814>
 800649a:	9b00      	ldr	r3, [sp, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d139      	bne.n	8006514 <_dtoa_r+0x80c>
 80064a0:	9b01      	ldr	r3, [sp, #4]
 80064a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d136      	bne.n	8006518 <_dtoa_r+0x810>
 80064aa:	9b01      	ldr	r3, [sp, #4]
 80064ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064b0:	0d1b      	lsrs	r3, r3, #20
 80064b2:	051b      	lsls	r3, r3, #20
 80064b4:	b12b      	cbz	r3, 80064c2 <_dtoa_r+0x7ba>
 80064b6:	9b05      	ldr	r3, [sp, #20]
 80064b8:	3301      	adds	r3, #1
 80064ba:	9305      	str	r3, [sp, #20]
 80064bc:	f108 0801 	add.w	r8, r8, #1
 80064c0:	2301      	movs	r3, #1
 80064c2:	9307      	str	r3, [sp, #28]
 80064c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d12a      	bne.n	8006520 <_dtoa_r+0x818>
 80064ca:	2001      	movs	r0, #1
 80064cc:	e030      	b.n	8006530 <_dtoa_r+0x828>
 80064ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064d4:	e795      	b.n	8006402 <_dtoa_r+0x6fa>
 80064d6:	9b07      	ldr	r3, [sp, #28]
 80064d8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80064dc:	42bb      	cmp	r3, r7
 80064de:	bfbf      	itttt	lt
 80064e0:	9b07      	ldrlt	r3, [sp, #28]
 80064e2:	9707      	strlt	r7, [sp, #28]
 80064e4:	1afa      	sublt	r2, r7, r3
 80064e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80064e8:	bfbb      	ittet	lt
 80064ea:	189b      	addlt	r3, r3, r2
 80064ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80064ee:	1bdf      	subge	r7, r3, r7
 80064f0:	2700      	movlt	r7, #0
 80064f2:	f1b9 0f00 	cmp.w	r9, #0
 80064f6:	bfb5      	itete	lt
 80064f8:	9b05      	ldrlt	r3, [sp, #20]
 80064fa:	9d05      	ldrge	r5, [sp, #20]
 80064fc:	eba3 0509 	sublt.w	r5, r3, r9
 8006500:	464b      	movge	r3, r9
 8006502:	bfb8      	it	lt
 8006504:	2300      	movlt	r3, #0
 8006506:	e77e      	b.n	8006406 <_dtoa_r+0x6fe>
 8006508:	9f07      	ldr	r7, [sp, #28]
 800650a:	9d05      	ldr	r5, [sp, #20]
 800650c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800650e:	e783      	b.n	8006418 <_dtoa_r+0x710>
 8006510:	9a07      	ldr	r2, [sp, #28]
 8006512:	e7ab      	b.n	800646c <_dtoa_r+0x764>
 8006514:	2300      	movs	r3, #0
 8006516:	e7d4      	b.n	80064c2 <_dtoa_r+0x7ba>
 8006518:	9b00      	ldr	r3, [sp, #0]
 800651a:	e7d2      	b.n	80064c2 <_dtoa_r+0x7ba>
 800651c:	2300      	movs	r3, #0
 800651e:	9307      	str	r3, [sp, #28]
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006526:	6918      	ldr	r0, [r3, #16]
 8006528:	f000 fc20 	bl	8006d6c <__hi0bits>
 800652c:	f1c0 0020 	rsb	r0, r0, #32
 8006530:	4440      	add	r0, r8
 8006532:	f010 001f 	ands.w	r0, r0, #31
 8006536:	d047      	beq.n	80065c8 <_dtoa_r+0x8c0>
 8006538:	f1c0 0320 	rsb	r3, r0, #32
 800653c:	2b04      	cmp	r3, #4
 800653e:	dd3b      	ble.n	80065b8 <_dtoa_r+0x8b0>
 8006540:	9b05      	ldr	r3, [sp, #20]
 8006542:	f1c0 001c 	rsb	r0, r0, #28
 8006546:	4403      	add	r3, r0
 8006548:	9305      	str	r3, [sp, #20]
 800654a:	4405      	add	r5, r0
 800654c:	4480      	add	r8, r0
 800654e:	9b05      	ldr	r3, [sp, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	dd05      	ble.n	8006560 <_dtoa_r+0x858>
 8006554:	461a      	mov	r2, r3
 8006556:	9904      	ldr	r1, [sp, #16]
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fd43 	bl	8006fe4 <__lshift>
 800655e:	9004      	str	r0, [sp, #16]
 8006560:	f1b8 0f00 	cmp.w	r8, #0
 8006564:	dd05      	ble.n	8006572 <_dtoa_r+0x86a>
 8006566:	4639      	mov	r1, r7
 8006568:	4642      	mov	r2, r8
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fd3a 	bl	8006fe4 <__lshift>
 8006570:	4607      	mov	r7, r0
 8006572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006574:	b353      	cbz	r3, 80065cc <_dtoa_r+0x8c4>
 8006576:	4639      	mov	r1, r7
 8006578:	9804      	ldr	r0, [sp, #16]
 800657a:	f000 fd87 	bl	800708c <__mcmp>
 800657e:	2800      	cmp	r0, #0
 8006580:	da24      	bge.n	80065cc <_dtoa_r+0x8c4>
 8006582:	2300      	movs	r3, #0
 8006584:	220a      	movs	r2, #10
 8006586:	9904      	ldr	r1, [sp, #16]
 8006588:	4620      	mov	r0, r4
 800658a:	f000 fbb4 	bl	8006cf6 <__multadd>
 800658e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006590:	9004      	str	r0, [sp, #16]
 8006592:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 814d 	beq.w	8006836 <_dtoa_r+0xb2e>
 800659c:	2300      	movs	r3, #0
 800659e:	4631      	mov	r1, r6
 80065a0:	220a      	movs	r2, #10
 80065a2:	4620      	mov	r0, r4
 80065a4:	f000 fba7 	bl	8006cf6 <__multadd>
 80065a8:	9b02      	ldr	r3, [sp, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	4606      	mov	r6, r0
 80065ae:	dc4f      	bgt.n	8006650 <_dtoa_r+0x948>
 80065b0:	9b06      	ldr	r3, [sp, #24]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	dd4c      	ble.n	8006650 <_dtoa_r+0x948>
 80065b6:	e011      	b.n	80065dc <_dtoa_r+0x8d4>
 80065b8:	d0c9      	beq.n	800654e <_dtoa_r+0x846>
 80065ba:	9a05      	ldr	r2, [sp, #20]
 80065bc:	331c      	adds	r3, #28
 80065be:	441a      	add	r2, r3
 80065c0:	9205      	str	r2, [sp, #20]
 80065c2:	441d      	add	r5, r3
 80065c4:	4498      	add	r8, r3
 80065c6:	e7c2      	b.n	800654e <_dtoa_r+0x846>
 80065c8:	4603      	mov	r3, r0
 80065ca:	e7f6      	b.n	80065ba <_dtoa_r+0x8b2>
 80065cc:	f1b9 0f00 	cmp.w	r9, #0
 80065d0:	dc38      	bgt.n	8006644 <_dtoa_r+0x93c>
 80065d2:	9b06      	ldr	r3, [sp, #24]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	dd35      	ble.n	8006644 <_dtoa_r+0x93c>
 80065d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80065dc:	9b02      	ldr	r3, [sp, #8]
 80065de:	b963      	cbnz	r3, 80065fa <_dtoa_r+0x8f2>
 80065e0:	4639      	mov	r1, r7
 80065e2:	2205      	movs	r2, #5
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 fb86 	bl	8006cf6 <__multadd>
 80065ea:	4601      	mov	r1, r0
 80065ec:	4607      	mov	r7, r0
 80065ee:	9804      	ldr	r0, [sp, #16]
 80065f0:	f000 fd4c 	bl	800708c <__mcmp>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	f73f adcc 	bgt.w	8006192 <_dtoa_r+0x48a>
 80065fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065fc:	465d      	mov	r5, fp
 80065fe:	ea6f 0a03 	mvn.w	sl, r3
 8006602:	f04f 0900 	mov.w	r9, #0
 8006606:	4639      	mov	r1, r7
 8006608:	4620      	mov	r0, r4
 800660a:	f000 fb5d 	bl	8006cc8 <_Bfree>
 800660e:	2e00      	cmp	r6, #0
 8006610:	f43f aeb7 	beq.w	8006382 <_dtoa_r+0x67a>
 8006614:	f1b9 0f00 	cmp.w	r9, #0
 8006618:	d005      	beq.n	8006626 <_dtoa_r+0x91e>
 800661a:	45b1      	cmp	r9, r6
 800661c:	d003      	beq.n	8006626 <_dtoa_r+0x91e>
 800661e:	4649      	mov	r1, r9
 8006620:	4620      	mov	r0, r4
 8006622:	f000 fb51 	bl	8006cc8 <_Bfree>
 8006626:	4631      	mov	r1, r6
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fb4d 	bl	8006cc8 <_Bfree>
 800662e:	e6a8      	b.n	8006382 <_dtoa_r+0x67a>
 8006630:	2700      	movs	r7, #0
 8006632:	463e      	mov	r6, r7
 8006634:	e7e1      	b.n	80065fa <_dtoa_r+0x8f2>
 8006636:	f8dd a020 	ldr.w	sl, [sp, #32]
 800663a:	463e      	mov	r6, r7
 800663c:	e5a9      	b.n	8006192 <_dtoa_r+0x48a>
 800663e:	bf00      	nop
 8006640:	40240000 	.word	0x40240000
 8006644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006646:	f8cd 9008 	str.w	r9, [sp, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80fa 	beq.w	8006844 <_dtoa_r+0xb3c>
 8006650:	2d00      	cmp	r5, #0
 8006652:	dd05      	ble.n	8006660 <_dtoa_r+0x958>
 8006654:	4631      	mov	r1, r6
 8006656:	462a      	mov	r2, r5
 8006658:	4620      	mov	r0, r4
 800665a:	f000 fcc3 	bl	8006fe4 <__lshift>
 800665e:	4606      	mov	r6, r0
 8006660:	9b07      	ldr	r3, [sp, #28]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d04c      	beq.n	8006700 <_dtoa_r+0x9f8>
 8006666:	6871      	ldr	r1, [r6, #4]
 8006668:	4620      	mov	r0, r4
 800666a:	f000 faf9 	bl	8006c60 <_Balloc>
 800666e:	6932      	ldr	r2, [r6, #16]
 8006670:	3202      	adds	r2, #2
 8006672:	4605      	mov	r5, r0
 8006674:	0092      	lsls	r2, r2, #2
 8006676:	f106 010c 	add.w	r1, r6, #12
 800667a:	300c      	adds	r0, #12
 800667c:	f7fe fd0a 	bl	8005094 <memcpy>
 8006680:	2201      	movs	r2, #1
 8006682:	4629      	mov	r1, r5
 8006684:	4620      	mov	r0, r4
 8006686:	f000 fcad 	bl	8006fe4 <__lshift>
 800668a:	9b00      	ldr	r3, [sp, #0]
 800668c:	f8cd b014 	str.w	fp, [sp, #20]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	46b1      	mov	r9, r6
 8006696:	9307      	str	r3, [sp, #28]
 8006698:	4606      	mov	r6, r0
 800669a:	4639      	mov	r1, r7
 800669c:	9804      	ldr	r0, [sp, #16]
 800669e:	f7ff faa5 	bl	8005bec <quorem>
 80066a2:	4649      	mov	r1, r9
 80066a4:	4605      	mov	r5, r0
 80066a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80066aa:	9804      	ldr	r0, [sp, #16]
 80066ac:	f000 fcee 	bl	800708c <__mcmp>
 80066b0:	4632      	mov	r2, r6
 80066b2:	9000      	str	r0, [sp, #0]
 80066b4:	4639      	mov	r1, r7
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 fd02 	bl	80070c0 <__mdiff>
 80066bc:	68c3      	ldr	r3, [r0, #12]
 80066be:	4602      	mov	r2, r0
 80066c0:	bb03      	cbnz	r3, 8006704 <_dtoa_r+0x9fc>
 80066c2:	4601      	mov	r1, r0
 80066c4:	9008      	str	r0, [sp, #32]
 80066c6:	9804      	ldr	r0, [sp, #16]
 80066c8:	f000 fce0 	bl	800708c <__mcmp>
 80066cc:	9a08      	ldr	r2, [sp, #32]
 80066ce:	4603      	mov	r3, r0
 80066d0:	4611      	mov	r1, r2
 80066d2:	4620      	mov	r0, r4
 80066d4:	9308      	str	r3, [sp, #32]
 80066d6:	f000 faf7 	bl	8006cc8 <_Bfree>
 80066da:	9b08      	ldr	r3, [sp, #32]
 80066dc:	b9a3      	cbnz	r3, 8006708 <_dtoa_r+0xa00>
 80066de:	9a06      	ldr	r2, [sp, #24]
 80066e0:	b992      	cbnz	r2, 8006708 <_dtoa_r+0xa00>
 80066e2:	9a07      	ldr	r2, [sp, #28]
 80066e4:	b982      	cbnz	r2, 8006708 <_dtoa_r+0xa00>
 80066e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066ea:	d029      	beq.n	8006740 <_dtoa_r+0xa38>
 80066ec:	9b00      	ldr	r3, [sp, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	dd01      	ble.n	80066f6 <_dtoa_r+0x9ee>
 80066f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80066f6:	9b05      	ldr	r3, [sp, #20]
 80066f8:	1c5d      	adds	r5, r3, #1
 80066fa:	f883 8000 	strb.w	r8, [r3]
 80066fe:	e782      	b.n	8006606 <_dtoa_r+0x8fe>
 8006700:	4630      	mov	r0, r6
 8006702:	e7c2      	b.n	800668a <_dtoa_r+0x982>
 8006704:	2301      	movs	r3, #1
 8006706:	e7e3      	b.n	80066d0 <_dtoa_r+0x9c8>
 8006708:	9a00      	ldr	r2, [sp, #0]
 800670a:	2a00      	cmp	r2, #0
 800670c:	db04      	blt.n	8006718 <_dtoa_r+0xa10>
 800670e:	d125      	bne.n	800675c <_dtoa_r+0xa54>
 8006710:	9a06      	ldr	r2, [sp, #24]
 8006712:	bb1a      	cbnz	r2, 800675c <_dtoa_r+0xa54>
 8006714:	9a07      	ldr	r2, [sp, #28]
 8006716:	bb0a      	cbnz	r2, 800675c <_dtoa_r+0xa54>
 8006718:	2b00      	cmp	r3, #0
 800671a:	ddec      	ble.n	80066f6 <_dtoa_r+0x9ee>
 800671c:	2201      	movs	r2, #1
 800671e:	9904      	ldr	r1, [sp, #16]
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fc5f 	bl	8006fe4 <__lshift>
 8006726:	4639      	mov	r1, r7
 8006728:	9004      	str	r0, [sp, #16]
 800672a:	f000 fcaf 	bl	800708c <__mcmp>
 800672e:	2800      	cmp	r0, #0
 8006730:	dc03      	bgt.n	800673a <_dtoa_r+0xa32>
 8006732:	d1e0      	bne.n	80066f6 <_dtoa_r+0x9ee>
 8006734:	f018 0f01 	tst.w	r8, #1
 8006738:	d0dd      	beq.n	80066f6 <_dtoa_r+0x9ee>
 800673a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800673e:	d1d8      	bne.n	80066f2 <_dtoa_r+0x9ea>
 8006740:	9b05      	ldr	r3, [sp, #20]
 8006742:	9a05      	ldr	r2, [sp, #20]
 8006744:	1c5d      	adds	r5, r3, #1
 8006746:	2339      	movs	r3, #57	; 0x39
 8006748:	7013      	strb	r3, [r2, #0]
 800674a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800674e:	2b39      	cmp	r3, #57	; 0x39
 8006750:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006754:	d04f      	beq.n	80067f6 <_dtoa_r+0xaee>
 8006756:	3301      	adds	r3, #1
 8006758:	7013      	strb	r3, [r2, #0]
 800675a:	e754      	b.n	8006606 <_dtoa_r+0x8fe>
 800675c:	9a05      	ldr	r2, [sp, #20]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f102 0501 	add.w	r5, r2, #1
 8006764:	dd06      	ble.n	8006774 <_dtoa_r+0xa6c>
 8006766:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800676a:	d0e9      	beq.n	8006740 <_dtoa_r+0xa38>
 800676c:	f108 0801 	add.w	r8, r8, #1
 8006770:	9b05      	ldr	r3, [sp, #20]
 8006772:	e7c2      	b.n	80066fa <_dtoa_r+0x9f2>
 8006774:	9a02      	ldr	r2, [sp, #8]
 8006776:	f805 8c01 	strb.w	r8, [r5, #-1]
 800677a:	eba5 030b 	sub.w	r3, r5, fp
 800677e:	4293      	cmp	r3, r2
 8006780:	d021      	beq.n	80067c6 <_dtoa_r+0xabe>
 8006782:	2300      	movs	r3, #0
 8006784:	220a      	movs	r2, #10
 8006786:	9904      	ldr	r1, [sp, #16]
 8006788:	4620      	mov	r0, r4
 800678a:	f000 fab4 	bl	8006cf6 <__multadd>
 800678e:	45b1      	cmp	r9, r6
 8006790:	9004      	str	r0, [sp, #16]
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	f04f 020a 	mov.w	r2, #10
 800679a:	4649      	mov	r1, r9
 800679c:	4620      	mov	r0, r4
 800679e:	d105      	bne.n	80067ac <_dtoa_r+0xaa4>
 80067a0:	f000 faa9 	bl	8006cf6 <__multadd>
 80067a4:	4681      	mov	r9, r0
 80067a6:	4606      	mov	r6, r0
 80067a8:	9505      	str	r5, [sp, #20]
 80067aa:	e776      	b.n	800669a <_dtoa_r+0x992>
 80067ac:	f000 faa3 	bl	8006cf6 <__multadd>
 80067b0:	4631      	mov	r1, r6
 80067b2:	4681      	mov	r9, r0
 80067b4:	2300      	movs	r3, #0
 80067b6:	220a      	movs	r2, #10
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fa9c 	bl	8006cf6 <__multadd>
 80067be:	4606      	mov	r6, r0
 80067c0:	e7f2      	b.n	80067a8 <_dtoa_r+0xaa0>
 80067c2:	f04f 0900 	mov.w	r9, #0
 80067c6:	2201      	movs	r2, #1
 80067c8:	9904      	ldr	r1, [sp, #16]
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 fc0a 	bl	8006fe4 <__lshift>
 80067d0:	4639      	mov	r1, r7
 80067d2:	9004      	str	r0, [sp, #16]
 80067d4:	f000 fc5a 	bl	800708c <__mcmp>
 80067d8:	2800      	cmp	r0, #0
 80067da:	dcb6      	bgt.n	800674a <_dtoa_r+0xa42>
 80067dc:	d102      	bne.n	80067e4 <_dtoa_r+0xadc>
 80067de:	f018 0f01 	tst.w	r8, #1
 80067e2:	d1b2      	bne.n	800674a <_dtoa_r+0xa42>
 80067e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067e8:	2b30      	cmp	r3, #48	; 0x30
 80067ea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80067ee:	f47f af0a 	bne.w	8006606 <_dtoa_r+0x8fe>
 80067f2:	4615      	mov	r5, r2
 80067f4:	e7f6      	b.n	80067e4 <_dtoa_r+0xadc>
 80067f6:	4593      	cmp	fp, r2
 80067f8:	d105      	bne.n	8006806 <_dtoa_r+0xafe>
 80067fa:	2331      	movs	r3, #49	; 0x31
 80067fc:	f10a 0a01 	add.w	sl, sl, #1
 8006800:	f88b 3000 	strb.w	r3, [fp]
 8006804:	e6ff      	b.n	8006606 <_dtoa_r+0x8fe>
 8006806:	4615      	mov	r5, r2
 8006808:	e79f      	b.n	800674a <_dtoa_r+0xa42>
 800680a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006870 <_dtoa_r+0xb68>
 800680e:	e007      	b.n	8006820 <_dtoa_r+0xb18>
 8006810:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006812:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006874 <_dtoa_r+0xb6c>
 8006816:	b11b      	cbz	r3, 8006820 <_dtoa_r+0xb18>
 8006818:	f10b 0308 	add.w	r3, fp, #8
 800681c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	4658      	mov	r0, fp
 8006822:	b017      	add	sp, #92	; 0x5c
 8006824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006828:	9b06      	ldr	r3, [sp, #24]
 800682a:	2b01      	cmp	r3, #1
 800682c:	f77f ae35 	ble.w	800649a <_dtoa_r+0x792>
 8006830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	e649      	b.n	80064ca <_dtoa_r+0x7c2>
 8006836:	9b02      	ldr	r3, [sp, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	dc03      	bgt.n	8006844 <_dtoa_r+0xb3c>
 800683c:	9b06      	ldr	r3, [sp, #24]
 800683e:	2b02      	cmp	r3, #2
 8006840:	f73f aecc 	bgt.w	80065dc <_dtoa_r+0x8d4>
 8006844:	465d      	mov	r5, fp
 8006846:	4639      	mov	r1, r7
 8006848:	9804      	ldr	r0, [sp, #16]
 800684a:	f7ff f9cf 	bl	8005bec <quorem>
 800684e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006852:	f805 8b01 	strb.w	r8, [r5], #1
 8006856:	9a02      	ldr	r2, [sp, #8]
 8006858:	eba5 030b 	sub.w	r3, r5, fp
 800685c:	429a      	cmp	r2, r3
 800685e:	ddb0      	ble.n	80067c2 <_dtoa_r+0xaba>
 8006860:	2300      	movs	r3, #0
 8006862:	220a      	movs	r2, #10
 8006864:	9904      	ldr	r1, [sp, #16]
 8006866:	4620      	mov	r0, r4
 8006868:	f000 fa45 	bl	8006cf6 <__multadd>
 800686c:	9004      	str	r0, [sp, #16]
 800686e:	e7ea      	b.n	8006846 <_dtoa_r+0xb3e>
 8006870:	080095d4 	.word	0x080095d4
 8006874:	080095f8 	.word	0x080095f8

08006878 <__sflush_r>:
 8006878:	898a      	ldrh	r2, [r1, #12]
 800687a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800687e:	4605      	mov	r5, r0
 8006880:	0710      	lsls	r0, r2, #28
 8006882:	460c      	mov	r4, r1
 8006884:	d458      	bmi.n	8006938 <__sflush_r+0xc0>
 8006886:	684b      	ldr	r3, [r1, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	dc05      	bgt.n	8006898 <__sflush_r+0x20>
 800688c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	dc02      	bgt.n	8006898 <__sflush_r+0x20>
 8006892:	2000      	movs	r0, #0
 8006894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800689a:	2e00      	cmp	r6, #0
 800689c:	d0f9      	beq.n	8006892 <__sflush_r+0x1a>
 800689e:	2300      	movs	r3, #0
 80068a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068a4:	682f      	ldr	r7, [r5, #0]
 80068a6:	6a21      	ldr	r1, [r4, #32]
 80068a8:	602b      	str	r3, [r5, #0]
 80068aa:	d032      	beq.n	8006912 <__sflush_r+0x9a>
 80068ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	075a      	lsls	r2, r3, #29
 80068b2:	d505      	bpl.n	80068c0 <__sflush_r+0x48>
 80068b4:	6863      	ldr	r3, [r4, #4]
 80068b6:	1ac0      	subs	r0, r0, r3
 80068b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068ba:	b10b      	cbz	r3, 80068c0 <__sflush_r+0x48>
 80068bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068be:	1ac0      	subs	r0, r0, r3
 80068c0:	2300      	movs	r3, #0
 80068c2:	4602      	mov	r2, r0
 80068c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068c6:	6a21      	ldr	r1, [r4, #32]
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b0      	blx	r6
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	d106      	bne.n	80068e0 <__sflush_r+0x68>
 80068d2:	6829      	ldr	r1, [r5, #0]
 80068d4:	291d      	cmp	r1, #29
 80068d6:	d848      	bhi.n	800696a <__sflush_r+0xf2>
 80068d8:	4a29      	ldr	r2, [pc, #164]	; (8006980 <__sflush_r+0x108>)
 80068da:	40ca      	lsrs	r2, r1
 80068dc:	07d6      	lsls	r6, r2, #31
 80068de:	d544      	bpl.n	800696a <__sflush_r+0xf2>
 80068e0:	2200      	movs	r2, #0
 80068e2:	6062      	str	r2, [r4, #4]
 80068e4:	04d9      	lsls	r1, r3, #19
 80068e6:	6922      	ldr	r2, [r4, #16]
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	d504      	bpl.n	80068f6 <__sflush_r+0x7e>
 80068ec:	1c42      	adds	r2, r0, #1
 80068ee:	d101      	bne.n	80068f4 <__sflush_r+0x7c>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b903      	cbnz	r3, 80068f6 <__sflush_r+0x7e>
 80068f4:	6560      	str	r0, [r4, #84]	; 0x54
 80068f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f8:	602f      	str	r7, [r5, #0]
 80068fa:	2900      	cmp	r1, #0
 80068fc:	d0c9      	beq.n	8006892 <__sflush_r+0x1a>
 80068fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006902:	4299      	cmp	r1, r3
 8006904:	d002      	beq.n	800690c <__sflush_r+0x94>
 8006906:	4628      	mov	r0, r5
 8006908:	f000 fc94 	bl	8007234 <_free_r>
 800690c:	2000      	movs	r0, #0
 800690e:	6360      	str	r0, [r4, #52]	; 0x34
 8006910:	e7c0      	b.n	8006894 <__sflush_r+0x1c>
 8006912:	2301      	movs	r3, #1
 8006914:	4628      	mov	r0, r5
 8006916:	47b0      	blx	r6
 8006918:	1c41      	adds	r1, r0, #1
 800691a:	d1c8      	bne.n	80068ae <__sflush_r+0x36>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0c5      	beq.n	80068ae <__sflush_r+0x36>
 8006922:	2b1d      	cmp	r3, #29
 8006924:	d001      	beq.n	800692a <__sflush_r+0xb2>
 8006926:	2b16      	cmp	r3, #22
 8006928:	d101      	bne.n	800692e <__sflush_r+0xb6>
 800692a:	602f      	str	r7, [r5, #0]
 800692c:	e7b1      	b.n	8006892 <__sflush_r+0x1a>
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	e7ad      	b.n	8006894 <__sflush_r+0x1c>
 8006938:	690f      	ldr	r7, [r1, #16]
 800693a:	2f00      	cmp	r7, #0
 800693c:	d0a9      	beq.n	8006892 <__sflush_r+0x1a>
 800693e:	0793      	lsls	r3, r2, #30
 8006940:	680e      	ldr	r6, [r1, #0]
 8006942:	bf08      	it	eq
 8006944:	694b      	ldreq	r3, [r1, #20]
 8006946:	600f      	str	r7, [r1, #0]
 8006948:	bf18      	it	ne
 800694a:	2300      	movne	r3, #0
 800694c:	eba6 0807 	sub.w	r8, r6, r7
 8006950:	608b      	str	r3, [r1, #8]
 8006952:	f1b8 0f00 	cmp.w	r8, #0
 8006956:	dd9c      	ble.n	8006892 <__sflush_r+0x1a>
 8006958:	4643      	mov	r3, r8
 800695a:	463a      	mov	r2, r7
 800695c:	6a21      	ldr	r1, [r4, #32]
 800695e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006960:	4628      	mov	r0, r5
 8006962:	47b0      	blx	r6
 8006964:	2800      	cmp	r0, #0
 8006966:	dc06      	bgt.n	8006976 <__sflush_r+0xfe>
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800696e:	81a3      	strh	r3, [r4, #12]
 8006970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006974:	e78e      	b.n	8006894 <__sflush_r+0x1c>
 8006976:	4407      	add	r7, r0
 8006978:	eba8 0800 	sub.w	r8, r8, r0
 800697c:	e7e9      	b.n	8006952 <__sflush_r+0xda>
 800697e:	bf00      	nop
 8006980:	20400001 	.word	0x20400001

08006984 <_fflush_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	690b      	ldr	r3, [r1, #16]
 8006988:	4605      	mov	r5, r0
 800698a:	460c      	mov	r4, r1
 800698c:	b1db      	cbz	r3, 80069c6 <_fflush_r+0x42>
 800698e:	b118      	cbz	r0, 8006998 <_fflush_r+0x14>
 8006990:	6983      	ldr	r3, [r0, #24]
 8006992:	b90b      	cbnz	r3, 8006998 <_fflush_r+0x14>
 8006994:	f000 f860 	bl	8006a58 <__sinit>
 8006998:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <_fflush_r+0x48>)
 800699a:	429c      	cmp	r4, r3
 800699c:	d109      	bne.n	80069b2 <_fflush_r+0x2e>
 800699e:	686c      	ldr	r4, [r5, #4]
 80069a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a4:	b17b      	cbz	r3, 80069c6 <_fflush_r+0x42>
 80069a6:	4621      	mov	r1, r4
 80069a8:	4628      	mov	r0, r5
 80069aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ae:	f7ff bf63 	b.w	8006878 <__sflush_r>
 80069b2:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <_fflush_r+0x4c>)
 80069b4:	429c      	cmp	r4, r3
 80069b6:	d101      	bne.n	80069bc <_fflush_r+0x38>
 80069b8:	68ac      	ldr	r4, [r5, #8]
 80069ba:	e7f1      	b.n	80069a0 <_fflush_r+0x1c>
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <_fflush_r+0x50>)
 80069be:	429c      	cmp	r4, r3
 80069c0:	bf08      	it	eq
 80069c2:	68ec      	ldreq	r4, [r5, #12]
 80069c4:	e7ec      	b.n	80069a0 <_fflush_r+0x1c>
 80069c6:	2000      	movs	r0, #0
 80069c8:	bd38      	pop	{r3, r4, r5, pc}
 80069ca:	bf00      	nop
 80069cc:	08009628 	.word	0x08009628
 80069d0:	08009648 	.word	0x08009648
 80069d4:	08009608 	.word	0x08009608

080069d8 <std>:
 80069d8:	2300      	movs	r3, #0
 80069da:	b510      	push	{r4, lr}
 80069dc:	4604      	mov	r4, r0
 80069de:	e9c0 3300 	strd	r3, r3, [r0]
 80069e2:	6083      	str	r3, [r0, #8]
 80069e4:	8181      	strh	r1, [r0, #12]
 80069e6:	6643      	str	r3, [r0, #100]	; 0x64
 80069e8:	81c2      	strh	r2, [r0, #14]
 80069ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ee:	6183      	str	r3, [r0, #24]
 80069f0:	4619      	mov	r1, r3
 80069f2:	2208      	movs	r2, #8
 80069f4:	305c      	adds	r0, #92	; 0x5c
 80069f6:	f7fe fb58 	bl	80050aa <memset>
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <std+0x38>)
 80069fc:	6263      	str	r3, [r4, #36]	; 0x24
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <std+0x3c>)
 8006a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <std+0x40>)
 8006a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <std+0x44>)
 8006a08:	6224      	str	r4, [r4, #32]
 8006a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006a0c:	bd10      	pop	{r4, pc}
 8006a0e:	bf00      	nop
 8006a10:	08007625 	.word	0x08007625
 8006a14:	08007647 	.word	0x08007647
 8006a18:	0800767f 	.word	0x0800767f
 8006a1c:	080076a3 	.word	0x080076a3

08006a20 <_cleanup_r>:
 8006a20:	4901      	ldr	r1, [pc, #4]	; (8006a28 <_cleanup_r+0x8>)
 8006a22:	f000 b885 	b.w	8006b30 <_fwalk_reent>
 8006a26:	bf00      	nop
 8006a28:	08006985 	.word	0x08006985

08006a2c <__sfmoreglue>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	1e4a      	subs	r2, r1, #1
 8006a30:	2568      	movs	r5, #104	; 0x68
 8006a32:	4355      	muls	r5, r2
 8006a34:	460e      	mov	r6, r1
 8006a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a3a:	f000 fc49 	bl	80072d0 <_malloc_r>
 8006a3e:	4604      	mov	r4, r0
 8006a40:	b140      	cbz	r0, 8006a54 <__sfmoreglue+0x28>
 8006a42:	2100      	movs	r1, #0
 8006a44:	e9c0 1600 	strd	r1, r6, [r0]
 8006a48:	300c      	adds	r0, #12
 8006a4a:	60a0      	str	r0, [r4, #8]
 8006a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a50:	f7fe fb2b 	bl	80050aa <memset>
 8006a54:	4620      	mov	r0, r4
 8006a56:	bd70      	pop	{r4, r5, r6, pc}

08006a58 <__sinit>:
 8006a58:	6983      	ldr	r3, [r0, #24]
 8006a5a:	b510      	push	{r4, lr}
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	bb33      	cbnz	r3, 8006aae <__sinit+0x56>
 8006a60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006a64:	6503      	str	r3, [r0, #80]	; 0x50
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <__sinit+0x58>)
 8006a68:	4a12      	ldr	r2, [pc, #72]	; (8006ab4 <__sinit+0x5c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6282      	str	r2, [r0, #40]	; 0x28
 8006a6e:	4298      	cmp	r0, r3
 8006a70:	bf04      	itt	eq
 8006a72:	2301      	moveq	r3, #1
 8006a74:	6183      	streq	r3, [r0, #24]
 8006a76:	f000 f81f 	bl	8006ab8 <__sfp>
 8006a7a:	6060      	str	r0, [r4, #4]
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 f81b 	bl	8006ab8 <__sfp>
 8006a82:	60a0      	str	r0, [r4, #8]
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 f817 	bl	8006ab8 <__sfp>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	60e0      	str	r0, [r4, #12]
 8006a8e:	2104      	movs	r1, #4
 8006a90:	6860      	ldr	r0, [r4, #4]
 8006a92:	f7ff ffa1 	bl	80069d8 <std>
 8006a96:	2201      	movs	r2, #1
 8006a98:	2109      	movs	r1, #9
 8006a9a:	68a0      	ldr	r0, [r4, #8]
 8006a9c:	f7ff ff9c 	bl	80069d8 <std>
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	2112      	movs	r1, #18
 8006aa4:	68e0      	ldr	r0, [r4, #12]
 8006aa6:	f7ff ff97 	bl	80069d8 <std>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	61a3      	str	r3, [r4, #24]
 8006aae:	bd10      	pop	{r4, pc}
 8006ab0:	080095c0 	.word	0x080095c0
 8006ab4:	08006a21 	.word	0x08006a21

08006ab8 <__sfp>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <__sfp+0x70>)
 8006abc:	681e      	ldr	r6, [r3, #0]
 8006abe:	69b3      	ldr	r3, [r6, #24]
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	b913      	cbnz	r3, 8006aca <__sfp+0x12>
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7ff ffc7 	bl	8006a58 <__sinit>
 8006aca:	3648      	adds	r6, #72	; 0x48
 8006acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	d503      	bpl.n	8006adc <__sfp+0x24>
 8006ad4:	6833      	ldr	r3, [r6, #0]
 8006ad6:	b133      	cbz	r3, 8006ae6 <__sfp+0x2e>
 8006ad8:	6836      	ldr	r6, [r6, #0]
 8006ada:	e7f7      	b.n	8006acc <__sfp+0x14>
 8006adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ae0:	b16d      	cbz	r5, 8006afe <__sfp+0x46>
 8006ae2:	3468      	adds	r4, #104	; 0x68
 8006ae4:	e7f4      	b.n	8006ad0 <__sfp+0x18>
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7ff ff9f 	bl	8006a2c <__sfmoreglue>
 8006aee:	6030      	str	r0, [r6, #0]
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d1f1      	bne.n	8006ad8 <__sfp+0x20>
 8006af4:	230c      	movs	r3, #12
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	4604      	mov	r4, r0
 8006afa:	4620      	mov	r0, r4
 8006afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006afe:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <__sfp+0x74>)
 8006b00:	6665      	str	r5, [r4, #100]	; 0x64
 8006b02:	e9c4 5500 	strd	r5, r5, [r4]
 8006b06:	60a5      	str	r5, [r4, #8]
 8006b08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006b0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006b10:	2208      	movs	r2, #8
 8006b12:	4629      	mov	r1, r5
 8006b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b18:	f7fe fac7 	bl	80050aa <memset>
 8006b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b24:	e7e9      	b.n	8006afa <__sfp+0x42>
 8006b26:	bf00      	nop
 8006b28:	080095c0 	.word	0x080095c0
 8006b2c:	ffff0001 	.word	0xffff0001

08006b30 <_fwalk_reent>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	4680      	mov	r8, r0
 8006b36:	4689      	mov	r9, r1
 8006b38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b3c:	2600      	movs	r6, #0
 8006b3e:	b914      	cbnz	r4, 8006b46 <_fwalk_reent+0x16>
 8006b40:	4630      	mov	r0, r6
 8006b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006b4a:	3f01      	subs	r7, #1
 8006b4c:	d501      	bpl.n	8006b52 <_fwalk_reent+0x22>
 8006b4e:	6824      	ldr	r4, [r4, #0]
 8006b50:	e7f5      	b.n	8006b3e <_fwalk_reent+0xe>
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d907      	bls.n	8006b68 <_fwalk_reent+0x38>
 8006b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	d003      	beq.n	8006b68 <_fwalk_reent+0x38>
 8006b60:	4629      	mov	r1, r5
 8006b62:	4640      	mov	r0, r8
 8006b64:	47c8      	blx	r9
 8006b66:	4306      	orrs	r6, r0
 8006b68:	3568      	adds	r5, #104	; 0x68
 8006b6a:	e7ee      	b.n	8006b4a <_fwalk_reent+0x1a>

08006b6c <_localeconv_r>:
 8006b6c:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <_localeconv_r+0x14>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6a18      	ldr	r0, [r3, #32]
 8006b72:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <_localeconv_r+0x18>)
 8006b74:	2800      	cmp	r0, #0
 8006b76:	bf08      	it	eq
 8006b78:	4618      	moveq	r0, r3
 8006b7a:	30f0      	adds	r0, #240	; 0xf0
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	2000004c 	.word	0x2000004c
 8006b84:	200000b0 	.word	0x200000b0

08006b88 <__swhatbuf_r>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	460e      	mov	r6, r1
 8006b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b90:	2900      	cmp	r1, #0
 8006b92:	b096      	sub	sp, #88	; 0x58
 8006b94:	4614      	mov	r4, r2
 8006b96:	461d      	mov	r5, r3
 8006b98:	da07      	bge.n	8006baa <__swhatbuf_r+0x22>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	89b3      	ldrh	r3, [r6, #12]
 8006ba0:	061a      	lsls	r2, r3, #24
 8006ba2:	d410      	bmi.n	8006bc6 <__swhatbuf_r+0x3e>
 8006ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba8:	e00e      	b.n	8006bc8 <__swhatbuf_r+0x40>
 8006baa:	466a      	mov	r2, sp
 8006bac:	f000 fda0 	bl	80076f0 <_fstat_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	dbf2      	blt.n	8006b9a <__swhatbuf_r+0x12>
 8006bb4:	9a01      	ldr	r2, [sp, #4]
 8006bb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bbe:	425a      	negs	r2, r3
 8006bc0:	415a      	adcs	r2, r3
 8006bc2:	602a      	str	r2, [r5, #0]
 8006bc4:	e7ee      	b.n	8006ba4 <__swhatbuf_r+0x1c>
 8006bc6:	2340      	movs	r3, #64	; 0x40
 8006bc8:	2000      	movs	r0, #0
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	b016      	add	sp, #88	; 0x58
 8006bce:	bd70      	pop	{r4, r5, r6, pc}

08006bd0 <__smakebuf_r>:
 8006bd0:	898b      	ldrh	r3, [r1, #12]
 8006bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bd4:	079d      	lsls	r5, r3, #30
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	d507      	bpl.n	8006bec <__smakebuf_r+0x1c>
 8006bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	6123      	str	r3, [r4, #16]
 8006be4:	2301      	movs	r3, #1
 8006be6:	6163      	str	r3, [r4, #20]
 8006be8:	b002      	add	sp, #8
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	ab01      	add	r3, sp, #4
 8006bee:	466a      	mov	r2, sp
 8006bf0:	f7ff ffca 	bl	8006b88 <__swhatbuf_r>
 8006bf4:	9900      	ldr	r1, [sp, #0]
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 fb69 	bl	80072d0 <_malloc_r>
 8006bfe:	b948      	cbnz	r0, 8006c14 <__smakebuf_r+0x44>
 8006c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c04:	059a      	lsls	r2, r3, #22
 8006c06:	d4ef      	bmi.n	8006be8 <__smakebuf_r+0x18>
 8006c08:	f023 0303 	bic.w	r3, r3, #3
 8006c0c:	f043 0302 	orr.w	r3, r3, #2
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	e7e3      	b.n	8006bdc <__smakebuf_r+0xc>
 8006c14:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <__smakebuf_r+0x7c>)
 8006c16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	6020      	str	r0, [r4, #0]
 8006c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	6163      	str	r3, [r4, #20]
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	6120      	str	r0, [r4, #16]
 8006c2a:	b15b      	cbz	r3, 8006c44 <__smakebuf_r+0x74>
 8006c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 fd6f 	bl	8007714 <_isatty_r>
 8006c36:	b128      	cbz	r0, 8006c44 <__smakebuf_r+0x74>
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	431d      	orrs	r5, r3
 8006c48:	81a5      	strh	r5, [r4, #12]
 8006c4a:	e7cd      	b.n	8006be8 <__smakebuf_r+0x18>
 8006c4c:	08006a21 	.word	0x08006a21

08006c50 <malloc>:
 8006c50:	4b02      	ldr	r3, [pc, #8]	; (8006c5c <malloc+0xc>)
 8006c52:	4601      	mov	r1, r0
 8006c54:	6818      	ldr	r0, [r3, #0]
 8006c56:	f000 bb3b 	b.w	80072d0 <_malloc_r>
 8006c5a:	bf00      	nop
 8006c5c:	2000004c 	.word	0x2000004c

08006c60 <_Balloc>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c64:	4604      	mov	r4, r0
 8006c66:	460e      	mov	r6, r1
 8006c68:	b93d      	cbnz	r5, 8006c7a <_Balloc+0x1a>
 8006c6a:	2010      	movs	r0, #16
 8006c6c:	f7ff fff0 	bl	8006c50 <malloc>
 8006c70:	6260      	str	r0, [r4, #36]	; 0x24
 8006c72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c76:	6005      	str	r5, [r0, #0]
 8006c78:	60c5      	str	r5, [r0, #12]
 8006c7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c7c:	68eb      	ldr	r3, [r5, #12]
 8006c7e:	b183      	cbz	r3, 8006ca2 <_Balloc+0x42>
 8006c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c88:	b9b8      	cbnz	r0, 8006cba <_Balloc+0x5a>
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	fa01 f506 	lsl.w	r5, r1, r6
 8006c90:	1d6a      	adds	r2, r5, #5
 8006c92:	0092      	lsls	r2, r2, #2
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 fabf 	bl	8007218 <_calloc_r>
 8006c9a:	b160      	cbz	r0, 8006cb6 <_Balloc+0x56>
 8006c9c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006ca0:	e00e      	b.n	8006cc0 <_Balloc+0x60>
 8006ca2:	2221      	movs	r2, #33	; 0x21
 8006ca4:	2104      	movs	r1, #4
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 fab6 	bl	8007218 <_calloc_r>
 8006cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cae:	60e8      	str	r0, [r5, #12]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e4      	bne.n	8006c80 <_Balloc+0x20>
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	bd70      	pop	{r4, r5, r6, pc}
 8006cba:	6802      	ldr	r2, [r0, #0]
 8006cbc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cc6:	e7f7      	b.n	8006cb8 <_Balloc+0x58>

08006cc8 <_Bfree>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ccc:	4606      	mov	r6, r0
 8006cce:	460d      	mov	r5, r1
 8006cd0:	b93c      	cbnz	r4, 8006ce2 <_Bfree+0x1a>
 8006cd2:	2010      	movs	r0, #16
 8006cd4:	f7ff ffbc 	bl	8006c50 <malloc>
 8006cd8:	6270      	str	r0, [r6, #36]	; 0x24
 8006cda:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cde:	6004      	str	r4, [r0, #0]
 8006ce0:	60c4      	str	r4, [r0, #12]
 8006ce2:	b13d      	cbz	r5, 8006cf4 <_Bfree+0x2c>
 8006ce4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ce6:	686a      	ldr	r2, [r5, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cee:	6029      	str	r1, [r5, #0]
 8006cf0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006cf4:	bd70      	pop	{r4, r5, r6, pc}

08006cf6 <__multadd>:
 8006cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfa:	690d      	ldr	r5, [r1, #16]
 8006cfc:	461f      	mov	r7, r3
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	f101 0c14 	add.w	ip, r1, #20
 8006d06:	2300      	movs	r3, #0
 8006d08:	f8dc 0000 	ldr.w	r0, [ip]
 8006d0c:	b281      	uxth	r1, r0
 8006d0e:	fb02 7101 	mla	r1, r2, r1, r7
 8006d12:	0c0f      	lsrs	r7, r1, #16
 8006d14:	0c00      	lsrs	r0, r0, #16
 8006d16:	fb02 7000 	mla	r0, r2, r0, r7
 8006d1a:	b289      	uxth	r1, r1
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d22:	429d      	cmp	r5, r3
 8006d24:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d28:	f84c 1b04 	str.w	r1, [ip], #4
 8006d2c:	dcec      	bgt.n	8006d08 <__multadd+0x12>
 8006d2e:	b1d7      	cbz	r7, 8006d66 <__multadd+0x70>
 8006d30:	68a3      	ldr	r3, [r4, #8]
 8006d32:	42ab      	cmp	r3, r5
 8006d34:	dc12      	bgt.n	8006d5c <__multadd+0x66>
 8006d36:	6861      	ldr	r1, [r4, #4]
 8006d38:	4630      	mov	r0, r6
 8006d3a:	3101      	adds	r1, #1
 8006d3c:	f7ff ff90 	bl	8006c60 <_Balloc>
 8006d40:	6922      	ldr	r2, [r4, #16]
 8006d42:	3202      	adds	r2, #2
 8006d44:	f104 010c 	add.w	r1, r4, #12
 8006d48:	4680      	mov	r8, r0
 8006d4a:	0092      	lsls	r2, r2, #2
 8006d4c:	300c      	adds	r0, #12
 8006d4e:	f7fe f9a1 	bl	8005094 <memcpy>
 8006d52:	4621      	mov	r1, r4
 8006d54:	4630      	mov	r0, r6
 8006d56:	f7ff ffb7 	bl	8006cc8 <_Bfree>
 8006d5a:	4644      	mov	r4, r8
 8006d5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d60:	3501      	adds	r5, #1
 8006d62:	615f      	str	r7, [r3, #20]
 8006d64:	6125      	str	r5, [r4, #16]
 8006d66:	4620      	mov	r0, r4
 8006d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d6c <__hi0bits>:
 8006d6c:	0c02      	lsrs	r2, r0, #16
 8006d6e:	0412      	lsls	r2, r2, #16
 8006d70:	4603      	mov	r3, r0
 8006d72:	b9b2      	cbnz	r2, 8006da2 <__hi0bits+0x36>
 8006d74:	0403      	lsls	r3, r0, #16
 8006d76:	2010      	movs	r0, #16
 8006d78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d7c:	bf04      	itt	eq
 8006d7e:	021b      	lsleq	r3, r3, #8
 8006d80:	3008      	addeq	r0, #8
 8006d82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d86:	bf04      	itt	eq
 8006d88:	011b      	lsleq	r3, r3, #4
 8006d8a:	3004      	addeq	r0, #4
 8006d8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d90:	bf04      	itt	eq
 8006d92:	009b      	lsleq	r3, r3, #2
 8006d94:	3002      	addeq	r0, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	db06      	blt.n	8006da8 <__hi0bits+0x3c>
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	d503      	bpl.n	8006da6 <__hi0bits+0x3a>
 8006d9e:	3001      	adds	r0, #1
 8006da0:	4770      	bx	lr
 8006da2:	2000      	movs	r0, #0
 8006da4:	e7e8      	b.n	8006d78 <__hi0bits+0xc>
 8006da6:	2020      	movs	r0, #32
 8006da8:	4770      	bx	lr

08006daa <__lo0bits>:
 8006daa:	6803      	ldr	r3, [r0, #0]
 8006dac:	f013 0207 	ands.w	r2, r3, #7
 8006db0:	4601      	mov	r1, r0
 8006db2:	d00b      	beq.n	8006dcc <__lo0bits+0x22>
 8006db4:	07da      	lsls	r2, r3, #31
 8006db6:	d423      	bmi.n	8006e00 <__lo0bits+0x56>
 8006db8:	0798      	lsls	r0, r3, #30
 8006dba:	bf49      	itett	mi
 8006dbc:	085b      	lsrmi	r3, r3, #1
 8006dbe:	089b      	lsrpl	r3, r3, #2
 8006dc0:	2001      	movmi	r0, #1
 8006dc2:	600b      	strmi	r3, [r1, #0]
 8006dc4:	bf5c      	itt	pl
 8006dc6:	600b      	strpl	r3, [r1, #0]
 8006dc8:	2002      	movpl	r0, #2
 8006dca:	4770      	bx	lr
 8006dcc:	b298      	uxth	r0, r3
 8006dce:	b9a8      	cbnz	r0, 8006dfc <__lo0bits+0x52>
 8006dd0:	0c1b      	lsrs	r3, r3, #16
 8006dd2:	2010      	movs	r0, #16
 8006dd4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006dd8:	bf04      	itt	eq
 8006dda:	0a1b      	lsreq	r3, r3, #8
 8006ddc:	3008      	addeq	r0, #8
 8006dde:	071a      	lsls	r2, r3, #28
 8006de0:	bf04      	itt	eq
 8006de2:	091b      	lsreq	r3, r3, #4
 8006de4:	3004      	addeq	r0, #4
 8006de6:	079a      	lsls	r2, r3, #30
 8006de8:	bf04      	itt	eq
 8006dea:	089b      	lsreq	r3, r3, #2
 8006dec:	3002      	addeq	r0, #2
 8006dee:	07da      	lsls	r2, r3, #31
 8006df0:	d402      	bmi.n	8006df8 <__lo0bits+0x4e>
 8006df2:	085b      	lsrs	r3, r3, #1
 8006df4:	d006      	beq.n	8006e04 <__lo0bits+0x5a>
 8006df6:	3001      	adds	r0, #1
 8006df8:	600b      	str	r3, [r1, #0]
 8006dfa:	4770      	bx	lr
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	e7e9      	b.n	8006dd4 <__lo0bits+0x2a>
 8006e00:	2000      	movs	r0, #0
 8006e02:	4770      	bx	lr
 8006e04:	2020      	movs	r0, #32
 8006e06:	4770      	bx	lr

08006e08 <__i2b>:
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	f7ff ff27 	bl	8006c60 <_Balloc>
 8006e12:	2201      	movs	r2, #1
 8006e14:	6144      	str	r4, [r0, #20]
 8006e16:	6102      	str	r2, [r0, #16]
 8006e18:	bd10      	pop	{r4, pc}

08006e1a <__multiply>:
 8006e1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1e:	4614      	mov	r4, r2
 8006e20:	690a      	ldr	r2, [r1, #16]
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	bfb8      	it	lt
 8006e28:	460b      	movlt	r3, r1
 8006e2a:	4688      	mov	r8, r1
 8006e2c:	bfbc      	itt	lt
 8006e2e:	46a0      	movlt	r8, r4
 8006e30:	461c      	movlt	r4, r3
 8006e32:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e36:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e3e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e42:	eb07 0609 	add.w	r6, r7, r9
 8006e46:	42b3      	cmp	r3, r6
 8006e48:	bfb8      	it	lt
 8006e4a:	3101      	addlt	r1, #1
 8006e4c:	f7ff ff08 	bl	8006c60 <_Balloc>
 8006e50:	f100 0514 	add.w	r5, r0, #20
 8006e54:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006e58:	462b      	mov	r3, r5
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	4573      	cmp	r3, lr
 8006e5e:	d316      	bcc.n	8006e8e <__multiply+0x74>
 8006e60:	f104 0214 	add.w	r2, r4, #20
 8006e64:	f108 0114 	add.w	r1, r8, #20
 8006e68:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006e6c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	9b00      	ldr	r3, [sp, #0]
 8006e74:	9201      	str	r2, [sp, #4]
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d80c      	bhi.n	8006e94 <__multiply+0x7a>
 8006e7a:	2e00      	cmp	r6, #0
 8006e7c:	dd03      	ble.n	8006e86 <__multiply+0x6c>
 8006e7e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d05d      	beq.n	8006f42 <__multiply+0x128>
 8006e86:	6106      	str	r6, [r0, #16]
 8006e88:	b003      	add	sp, #12
 8006e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8e:	f843 2b04 	str.w	r2, [r3], #4
 8006e92:	e7e3      	b.n	8006e5c <__multiply+0x42>
 8006e94:	f8b2 b000 	ldrh.w	fp, [r2]
 8006e98:	f1bb 0f00 	cmp.w	fp, #0
 8006e9c:	d023      	beq.n	8006ee6 <__multiply+0xcc>
 8006e9e:	4689      	mov	r9, r1
 8006ea0:	46ac      	mov	ip, r5
 8006ea2:	f04f 0800 	mov.w	r8, #0
 8006ea6:	f859 4b04 	ldr.w	r4, [r9], #4
 8006eaa:	f8dc a000 	ldr.w	sl, [ip]
 8006eae:	b2a3      	uxth	r3, r4
 8006eb0:	fa1f fa8a 	uxth.w	sl, sl
 8006eb4:	fb0b a303 	mla	r3, fp, r3, sl
 8006eb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ebc:	f8dc 4000 	ldr.w	r4, [ip]
 8006ec0:	4443      	add	r3, r8
 8006ec2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ec6:	fb0b 840a 	mla	r4, fp, sl, r8
 8006eca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ece:	46e2      	mov	sl, ip
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ed6:	454f      	cmp	r7, r9
 8006ed8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006edc:	f84a 3b04 	str.w	r3, [sl], #4
 8006ee0:	d82b      	bhi.n	8006f3a <__multiply+0x120>
 8006ee2:	f8cc 8004 	str.w	r8, [ip, #4]
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006eec:	3204      	adds	r2, #4
 8006eee:	f1ba 0f00 	cmp.w	sl, #0
 8006ef2:	d020      	beq.n	8006f36 <__multiply+0x11c>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	4689      	mov	r9, r1
 8006ef8:	46a8      	mov	r8, r5
 8006efa:	f04f 0b00 	mov.w	fp, #0
 8006efe:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f02:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f06:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f0a:	445c      	add	r4, fp
 8006f0c:	46c4      	mov	ip, r8
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f14:	f84c 3b04 	str.w	r3, [ip], #4
 8006f18:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f1c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006f20:	0c1b      	lsrs	r3, r3, #16
 8006f22:	fb0a b303 	mla	r3, sl, r3, fp
 8006f26:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f2a:	454f      	cmp	r7, r9
 8006f2c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006f30:	d805      	bhi.n	8006f3e <__multiply+0x124>
 8006f32:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f36:	3504      	adds	r5, #4
 8006f38:	e79b      	b.n	8006e72 <__multiply+0x58>
 8006f3a:	46d4      	mov	ip, sl
 8006f3c:	e7b3      	b.n	8006ea6 <__multiply+0x8c>
 8006f3e:	46e0      	mov	r8, ip
 8006f40:	e7dd      	b.n	8006efe <__multiply+0xe4>
 8006f42:	3e01      	subs	r6, #1
 8006f44:	e799      	b.n	8006e7a <__multiply+0x60>
	...

08006f48 <__pow5mult>:
 8006f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f4c:	4615      	mov	r5, r2
 8006f4e:	f012 0203 	ands.w	r2, r2, #3
 8006f52:	4606      	mov	r6, r0
 8006f54:	460f      	mov	r7, r1
 8006f56:	d007      	beq.n	8006f68 <__pow5mult+0x20>
 8006f58:	3a01      	subs	r2, #1
 8006f5a:	4c21      	ldr	r4, [pc, #132]	; (8006fe0 <__pow5mult+0x98>)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f62:	f7ff fec8 	bl	8006cf6 <__multadd>
 8006f66:	4607      	mov	r7, r0
 8006f68:	10ad      	asrs	r5, r5, #2
 8006f6a:	d035      	beq.n	8006fd8 <__pow5mult+0x90>
 8006f6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f6e:	b93c      	cbnz	r4, 8006f80 <__pow5mult+0x38>
 8006f70:	2010      	movs	r0, #16
 8006f72:	f7ff fe6d 	bl	8006c50 <malloc>
 8006f76:	6270      	str	r0, [r6, #36]	; 0x24
 8006f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f7c:	6004      	str	r4, [r0, #0]
 8006f7e:	60c4      	str	r4, [r0, #12]
 8006f80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f88:	b94c      	cbnz	r4, 8006f9e <__pow5mult+0x56>
 8006f8a:	f240 2171 	movw	r1, #625	; 0x271
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ff3a 	bl	8006e08 <__i2b>
 8006f94:	2300      	movs	r3, #0
 8006f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	6003      	str	r3, [r0, #0]
 8006f9e:	f04f 0800 	mov.w	r8, #0
 8006fa2:	07eb      	lsls	r3, r5, #31
 8006fa4:	d50a      	bpl.n	8006fbc <__pow5mult+0x74>
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	4622      	mov	r2, r4
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7ff ff35 	bl	8006e1a <__multiply>
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4681      	mov	r9, r0
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7ff fe87 	bl	8006cc8 <_Bfree>
 8006fba:	464f      	mov	r7, r9
 8006fbc:	106d      	asrs	r5, r5, #1
 8006fbe:	d00b      	beq.n	8006fd8 <__pow5mult+0x90>
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	b938      	cbnz	r0, 8006fd4 <__pow5mult+0x8c>
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7ff ff26 	bl	8006e1a <__multiply>
 8006fce:	6020      	str	r0, [r4, #0]
 8006fd0:	f8c0 8000 	str.w	r8, [r0]
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	e7e4      	b.n	8006fa2 <__pow5mult+0x5a>
 8006fd8:	4638      	mov	r0, r7
 8006fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fde:	bf00      	nop
 8006fe0:	08009758 	.word	0x08009758

08006fe4 <__lshift>:
 8006fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	460c      	mov	r4, r1
 8006fea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fee:	6923      	ldr	r3, [r4, #16]
 8006ff0:	6849      	ldr	r1, [r1, #4]
 8006ff2:	eb0a 0903 	add.w	r9, sl, r3
 8006ff6:	68a3      	ldr	r3, [r4, #8]
 8006ff8:	4607      	mov	r7, r0
 8006ffa:	4616      	mov	r6, r2
 8006ffc:	f109 0501 	add.w	r5, r9, #1
 8007000:	42ab      	cmp	r3, r5
 8007002:	db32      	blt.n	800706a <__lshift+0x86>
 8007004:	4638      	mov	r0, r7
 8007006:	f7ff fe2b 	bl	8006c60 <_Balloc>
 800700a:	2300      	movs	r3, #0
 800700c:	4680      	mov	r8, r0
 800700e:	f100 0114 	add.w	r1, r0, #20
 8007012:	461a      	mov	r2, r3
 8007014:	4553      	cmp	r3, sl
 8007016:	db2b      	blt.n	8007070 <__lshift+0x8c>
 8007018:	6920      	ldr	r0, [r4, #16]
 800701a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800701e:	f104 0314 	add.w	r3, r4, #20
 8007022:	f016 021f 	ands.w	r2, r6, #31
 8007026:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800702a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800702e:	d025      	beq.n	800707c <__lshift+0x98>
 8007030:	f1c2 0e20 	rsb	lr, r2, #32
 8007034:	2000      	movs	r0, #0
 8007036:	681e      	ldr	r6, [r3, #0]
 8007038:	468a      	mov	sl, r1
 800703a:	4096      	lsls	r6, r2
 800703c:	4330      	orrs	r0, r6
 800703e:	f84a 0b04 	str.w	r0, [sl], #4
 8007042:	f853 0b04 	ldr.w	r0, [r3], #4
 8007046:	459c      	cmp	ip, r3
 8007048:	fa20 f00e 	lsr.w	r0, r0, lr
 800704c:	d814      	bhi.n	8007078 <__lshift+0x94>
 800704e:	6048      	str	r0, [r1, #4]
 8007050:	b108      	cbz	r0, 8007056 <__lshift+0x72>
 8007052:	f109 0502 	add.w	r5, r9, #2
 8007056:	3d01      	subs	r5, #1
 8007058:	4638      	mov	r0, r7
 800705a:	f8c8 5010 	str.w	r5, [r8, #16]
 800705e:	4621      	mov	r1, r4
 8007060:	f7ff fe32 	bl	8006cc8 <_Bfree>
 8007064:	4640      	mov	r0, r8
 8007066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706a:	3101      	adds	r1, #1
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	e7c7      	b.n	8007000 <__lshift+0x1c>
 8007070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007074:	3301      	adds	r3, #1
 8007076:	e7cd      	b.n	8007014 <__lshift+0x30>
 8007078:	4651      	mov	r1, sl
 800707a:	e7dc      	b.n	8007036 <__lshift+0x52>
 800707c:	3904      	subs	r1, #4
 800707e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007082:	f841 2f04 	str.w	r2, [r1, #4]!
 8007086:	459c      	cmp	ip, r3
 8007088:	d8f9      	bhi.n	800707e <__lshift+0x9a>
 800708a:	e7e4      	b.n	8007056 <__lshift+0x72>

0800708c <__mcmp>:
 800708c:	6903      	ldr	r3, [r0, #16]
 800708e:	690a      	ldr	r2, [r1, #16]
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	b530      	push	{r4, r5, lr}
 8007094:	d10c      	bne.n	80070b0 <__mcmp+0x24>
 8007096:	0092      	lsls	r2, r2, #2
 8007098:	3014      	adds	r0, #20
 800709a:	3114      	adds	r1, #20
 800709c:	1884      	adds	r4, r0, r2
 800709e:	4411      	add	r1, r2
 80070a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070a8:	4295      	cmp	r5, r2
 80070aa:	d003      	beq.n	80070b4 <__mcmp+0x28>
 80070ac:	d305      	bcc.n	80070ba <__mcmp+0x2e>
 80070ae:	2301      	movs	r3, #1
 80070b0:	4618      	mov	r0, r3
 80070b2:	bd30      	pop	{r4, r5, pc}
 80070b4:	42a0      	cmp	r0, r4
 80070b6:	d3f3      	bcc.n	80070a0 <__mcmp+0x14>
 80070b8:	e7fa      	b.n	80070b0 <__mcmp+0x24>
 80070ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070be:	e7f7      	b.n	80070b0 <__mcmp+0x24>

080070c0 <__mdiff>:
 80070c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	460d      	mov	r5, r1
 80070c6:	4607      	mov	r7, r0
 80070c8:	4611      	mov	r1, r2
 80070ca:	4628      	mov	r0, r5
 80070cc:	4614      	mov	r4, r2
 80070ce:	f7ff ffdd 	bl	800708c <__mcmp>
 80070d2:	1e06      	subs	r6, r0, #0
 80070d4:	d108      	bne.n	80070e8 <__mdiff+0x28>
 80070d6:	4631      	mov	r1, r6
 80070d8:	4638      	mov	r0, r7
 80070da:	f7ff fdc1 	bl	8006c60 <_Balloc>
 80070de:	2301      	movs	r3, #1
 80070e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80070e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e8:	bfa4      	itt	ge
 80070ea:	4623      	movge	r3, r4
 80070ec:	462c      	movge	r4, r5
 80070ee:	4638      	mov	r0, r7
 80070f0:	6861      	ldr	r1, [r4, #4]
 80070f2:	bfa6      	itte	ge
 80070f4:	461d      	movge	r5, r3
 80070f6:	2600      	movge	r6, #0
 80070f8:	2601      	movlt	r6, #1
 80070fa:	f7ff fdb1 	bl	8006c60 <_Balloc>
 80070fe:	692b      	ldr	r3, [r5, #16]
 8007100:	60c6      	str	r6, [r0, #12]
 8007102:	6926      	ldr	r6, [r4, #16]
 8007104:	f105 0914 	add.w	r9, r5, #20
 8007108:	f104 0214 	add.w	r2, r4, #20
 800710c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007110:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007114:	f100 0514 	add.w	r5, r0, #20
 8007118:	f04f 0e00 	mov.w	lr, #0
 800711c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007120:	f859 4b04 	ldr.w	r4, [r9], #4
 8007124:	fa1e f18a 	uxtah	r1, lr, sl
 8007128:	b2a3      	uxth	r3, r4
 800712a:	1ac9      	subs	r1, r1, r3
 800712c:	0c23      	lsrs	r3, r4, #16
 800712e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007132:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007136:	b289      	uxth	r1, r1
 8007138:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800713c:	45c8      	cmp	r8, r9
 800713e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007142:	4694      	mov	ip, r2
 8007144:	f845 3b04 	str.w	r3, [r5], #4
 8007148:	d8e8      	bhi.n	800711c <__mdiff+0x5c>
 800714a:	45bc      	cmp	ip, r7
 800714c:	d304      	bcc.n	8007158 <__mdiff+0x98>
 800714e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007152:	b183      	cbz	r3, 8007176 <__mdiff+0xb6>
 8007154:	6106      	str	r6, [r0, #16]
 8007156:	e7c5      	b.n	80070e4 <__mdiff+0x24>
 8007158:	f85c 1b04 	ldr.w	r1, [ip], #4
 800715c:	fa1e f381 	uxtah	r3, lr, r1
 8007160:	141a      	asrs	r2, r3, #16
 8007162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007166:	b29b      	uxth	r3, r3
 8007168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800716c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007170:	f845 3b04 	str.w	r3, [r5], #4
 8007174:	e7e9      	b.n	800714a <__mdiff+0x8a>
 8007176:	3e01      	subs	r6, #1
 8007178:	e7e9      	b.n	800714e <__mdiff+0x8e>

0800717a <__d2b>:
 800717a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800717e:	460e      	mov	r6, r1
 8007180:	2101      	movs	r1, #1
 8007182:	ec59 8b10 	vmov	r8, r9, d0
 8007186:	4615      	mov	r5, r2
 8007188:	f7ff fd6a 	bl	8006c60 <_Balloc>
 800718c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007190:	4607      	mov	r7, r0
 8007192:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007196:	bb34      	cbnz	r4, 80071e6 <__d2b+0x6c>
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	f1b8 0300 	subs.w	r3, r8, #0
 800719e:	d027      	beq.n	80071f0 <__d2b+0x76>
 80071a0:	a802      	add	r0, sp, #8
 80071a2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80071a6:	f7ff fe00 	bl	8006daa <__lo0bits>
 80071aa:	9900      	ldr	r1, [sp, #0]
 80071ac:	b1f0      	cbz	r0, 80071ec <__d2b+0x72>
 80071ae:	9a01      	ldr	r2, [sp, #4]
 80071b0:	f1c0 0320 	rsb	r3, r0, #32
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	430b      	orrs	r3, r1
 80071ba:	40c2      	lsrs	r2, r0
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	9201      	str	r2, [sp, #4]
 80071c0:	9b01      	ldr	r3, [sp, #4]
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	bf14      	ite	ne
 80071c8:	2102      	movne	r1, #2
 80071ca:	2101      	moveq	r1, #1
 80071cc:	6139      	str	r1, [r7, #16]
 80071ce:	b1c4      	cbz	r4, 8007202 <__d2b+0x88>
 80071d0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80071d4:	4404      	add	r4, r0
 80071d6:	6034      	str	r4, [r6, #0]
 80071d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071dc:	6028      	str	r0, [r5, #0]
 80071de:	4638      	mov	r0, r7
 80071e0:	b003      	add	sp, #12
 80071e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071ea:	e7d5      	b.n	8007198 <__d2b+0x1e>
 80071ec:	6179      	str	r1, [r7, #20]
 80071ee:	e7e7      	b.n	80071c0 <__d2b+0x46>
 80071f0:	a801      	add	r0, sp, #4
 80071f2:	f7ff fdda 	bl	8006daa <__lo0bits>
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	2101      	movs	r1, #1
 80071fc:	6139      	str	r1, [r7, #16]
 80071fe:	3020      	adds	r0, #32
 8007200:	e7e5      	b.n	80071ce <__d2b+0x54>
 8007202:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007206:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800720a:	6030      	str	r0, [r6, #0]
 800720c:	6918      	ldr	r0, [r3, #16]
 800720e:	f7ff fdad 	bl	8006d6c <__hi0bits>
 8007212:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007216:	e7e1      	b.n	80071dc <__d2b+0x62>

08007218 <_calloc_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	fb02 f401 	mul.w	r4, r2, r1
 800721e:	4621      	mov	r1, r4
 8007220:	f000 f856 	bl	80072d0 <_malloc_r>
 8007224:	4605      	mov	r5, r0
 8007226:	b118      	cbz	r0, 8007230 <_calloc_r+0x18>
 8007228:	4622      	mov	r2, r4
 800722a:	2100      	movs	r1, #0
 800722c:	f7fd ff3d 	bl	80050aa <memset>
 8007230:	4628      	mov	r0, r5
 8007232:	bd38      	pop	{r3, r4, r5, pc}

08007234 <_free_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4605      	mov	r5, r0
 8007238:	2900      	cmp	r1, #0
 800723a:	d045      	beq.n	80072c8 <_free_r+0x94>
 800723c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007240:	1f0c      	subs	r4, r1, #4
 8007242:	2b00      	cmp	r3, #0
 8007244:	bfb8      	it	lt
 8007246:	18e4      	addlt	r4, r4, r3
 8007248:	f000 fa98 	bl	800777c <__malloc_lock>
 800724c:	4a1f      	ldr	r2, [pc, #124]	; (80072cc <_free_r+0x98>)
 800724e:	6813      	ldr	r3, [r2, #0]
 8007250:	4610      	mov	r0, r2
 8007252:	b933      	cbnz	r3, 8007262 <_free_r+0x2e>
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	6014      	str	r4, [r2, #0]
 8007258:	4628      	mov	r0, r5
 800725a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800725e:	f000 ba8e 	b.w	800777e <__malloc_unlock>
 8007262:	42a3      	cmp	r3, r4
 8007264:	d90c      	bls.n	8007280 <_free_r+0x4c>
 8007266:	6821      	ldr	r1, [r4, #0]
 8007268:	1862      	adds	r2, r4, r1
 800726a:	4293      	cmp	r3, r2
 800726c:	bf04      	itt	eq
 800726e:	681a      	ldreq	r2, [r3, #0]
 8007270:	685b      	ldreq	r3, [r3, #4]
 8007272:	6063      	str	r3, [r4, #4]
 8007274:	bf04      	itt	eq
 8007276:	1852      	addeq	r2, r2, r1
 8007278:	6022      	streq	r2, [r4, #0]
 800727a:	6004      	str	r4, [r0, #0]
 800727c:	e7ec      	b.n	8007258 <_free_r+0x24>
 800727e:	4613      	mov	r3, r2
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	b10a      	cbz	r2, 8007288 <_free_r+0x54>
 8007284:	42a2      	cmp	r2, r4
 8007286:	d9fa      	bls.n	800727e <_free_r+0x4a>
 8007288:	6819      	ldr	r1, [r3, #0]
 800728a:	1858      	adds	r0, r3, r1
 800728c:	42a0      	cmp	r0, r4
 800728e:	d10b      	bne.n	80072a8 <_free_r+0x74>
 8007290:	6820      	ldr	r0, [r4, #0]
 8007292:	4401      	add	r1, r0
 8007294:	1858      	adds	r0, r3, r1
 8007296:	4282      	cmp	r2, r0
 8007298:	6019      	str	r1, [r3, #0]
 800729a:	d1dd      	bne.n	8007258 <_free_r+0x24>
 800729c:	6810      	ldr	r0, [r2, #0]
 800729e:	6852      	ldr	r2, [r2, #4]
 80072a0:	605a      	str	r2, [r3, #4]
 80072a2:	4401      	add	r1, r0
 80072a4:	6019      	str	r1, [r3, #0]
 80072a6:	e7d7      	b.n	8007258 <_free_r+0x24>
 80072a8:	d902      	bls.n	80072b0 <_free_r+0x7c>
 80072aa:	230c      	movs	r3, #12
 80072ac:	602b      	str	r3, [r5, #0]
 80072ae:	e7d3      	b.n	8007258 <_free_r+0x24>
 80072b0:	6820      	ldr	r0, [r4, #0]
 80072b2:	1821      	adds	r1, r4, r0
 80072b4:	428a      	cmp	r2, r1
 80072b6:	bf04      	itt	eq
 80072b8:	6811      	ldreq	r1, [r2, #0]
 80072ba:	6852      	ldreq	r2, [r2, #4]
 80072bc:	6062      	str	r2, [r4, #4]
 80072be:	bf04      	itt	eq
 80072c0:	1809      	addeq	r1, r1, r0
 80072c2:	6021      	streq	r1, [r4, #0]
 80072c4:	605c      	str	r4, [r3, #4]
 80072c6:	e7c7      	b.n	8007258 <_free_r+0x24>
 80072c8:	bd38      	pop	{r3, r4, r5, pc}
 80072ca:	bf00      	nop
 80072cc:	200002a0 	.word	0x200002a0

080072d0 <_malloc_r>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	1ccd      	adds	r5, r1, #3
 80072d4:	f025 0503 	bic.w	r5, r5, #3
 80072d8:	3508      	adds	r5, #8
 80072da:	2d0c      	cmp	r5, #12
 80072dc:	bf38      	it	cc
 80072de:	250c      	movcc	r5, #12
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	4606      	mov	r6, r0
 80072e4:	db01      	blt.n	80072ea <_malloc_r+0x1a>
 80072e6:	42a9      	cmp	r1, r5
 80072e8:	d903      	bls.n	80072f2 <_malloc_r+0x22>
 80072ea:	230c      	movs	r3, #12
 80072ec:	6033      	str	r3, [r6, #0]
 80072ee:	2000      	movs	r0, #0
 80072f0:	bd70      	pop	{r4, r5, r6, pc}
 80072f2:	f000 fa43 	bl	800777c <__malloc_lock>
 80072f6:	4a21      	ldr	r2, [pc, #132]	; (800737c <_malloc_r+0xac>)
 80072f8:	6814      	ldr	r4, [r2, #0]
 80072fa:	4621      	mov	r1, r4
 80072fc:	b991      	cbnz	r1, 8007324 <_malloc_r+0x54>
 80072fe:	4c20      	ldr	r4, [pc, #128]	; (8007380 <_malloc_r+0xb0>)
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	b91b      	cbnz	r3, 800730c <_malloc_r+0x3c>
 8007304:	4630      	mov	r0, r6
 8007306:	f000 f97d 	bl	8007604 <_sbrk_r>
 800730a:	6020      	str	r0, [r4, #0]
 800730c:	4629      	mov	r1, r5
 800730e:	4630      	mov	r0, r6
 8007310:	f000 f978 	bl	8007604 <_sbrk_r>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d124      	bne.n	8007362 <_malloc_r+0x92>
 8007318:	230c      	movs	r3, #12
 800731a:	6033      	str	r3, [r6, #0]
 800731c:	4630      	mov	r0, r6
 800731e:	f000 fa2e 	bl	800777e <__malloc_unlock>
 8007322:	e7e4      	b.n	80072ee <_malloc_r+0x1e>
 8007324:	680b      	ldr	r3, [r1, #0]
 8007326:	1b5b      	subs	r3, r3, r5
 8007328:	d418      	bmi.n	800735c <_malloc_r+0x8c>
 800732a:	2b0b      	cmp	r3, #11
 800732c:	d90f      	bls.n	800734e <_malloc_r+0x7e>
 800732e:	600b      	str	r3, [r1, #0]
 8007330:	50cd      	str	r5, [r1, r3]
 8007332:	18cc      	adds	r4, r1, r3
 8007334:	4630      	mov	r0, r6
 8007336:	f000 fa22 	bl	800777e <__malloc_unlock>
 800733a:	f104 000b 	add.w	r0, r4, #11
 800733e:	1d23      	adds	r3, r4, #4
 8007340:	f020 0007 	bic.w	r0, r0, #7
 8007344:	1ac3      	subs	r3, r0, r3
 8007346:	d0d3      	beq.n	80072f0 <_malloc_r+0x20>
 8007348:	425a      	negs	r2, r3
 800734a:	50e2      	str	r2, [r4, r3]
 800734c:	e7d0      	b.n	80072f0 <_malloc_r+0x20>
 800734e:	428c      	cmp	r4, r1
 8007350:	684b      	ldr	r3, [r1, #4]
 8007352:	bf16      	itet	ne
 8007354:	6063      	strne	r3, [r4, #4]
 8007356:	6013      	streq	r3, [r2, #0]
 8007358:	460c      	movne	r4, r1
 800735a:	e7eb      	b.n	8007334 <_malloc_r+0x64>
 800735c:	460c      	mov	r4, r1
 800735e:	6849      	ldr	r1, [r1, #4]
 8007360:	e7cc      	b.n	80072fc <_malloc_r+0x2c>
 8007362:	1cc4      	adds	r4, r0, #3
 8007364:	f024 0403 	bic.w	r4, r4, #3
 8007368:	42a0      	cmp	r0, r4
 800736a:	d005      	beq.n	8007378 <_malloc_r+0xa8>
 800736c:	1a21      	subs	r1, r4, r0
 800736e:	4630      	mov	r0, r6
 8007370:	f000 f948 	bl	8007604 <_sbrk_r>
 8007374:	3001      	adds	r0, #1
 8007376:	d0cf      	beq.n	8007318 <_malloc_r+0x48>
 8007378:	6025      	str	r5, [r4, #0]
 800737a:	e7db      	b.n	8007334 <_malloc_r+0x64>
 800737c:	200002a0 	.word	0x200002a0
 8007380:	200002a4 	.word	0x200002a4

08007384 <__sfputc_r>:
 8007384:	6893      	ldr	r3, [r2, #8]
 8007386:	3b01      	subs	r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	b410      	push	{r4}
 800738c:	6093      	str	r3, [r2, #8]
 800738e:	da08      	bge.n	80073a2 <__sfputc_r+0x1e>
 8007390:	6994      	ldr	r4, [r2, #24]
 8007392:	42a3      	cmp	r3, r4
 8007394:	db01      	blt.n	800739a <__sfputc_r+0x16>
 8007396:	290a      	cmp	r1, #10
 8007398:	d103      	bne.n	80073a2 <__sfputc_r+0x1e>
 800739a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800739e:	f7fe bb65 	b.w	8005a6c <__swbuf_r>
 80073a2:	6813      	ldr	r3, [r2, #0]
 80073a4:	1c58      	adds	r0, r3, #1
 80073a6:	6010      	str	r0, [r2, #0]
 80073a8:	7019      	strb	r1, [r3, #0]
 80073aa:	4608      	mov	r0, r1
 80073ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <__sfputs_r>:
 80073b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b4:	4606      	mov	r6, r0
 80073b6:	460f      	mov	r7, r1
 80073b8:	4614      	mov	r4, r2
 80073ba:	18d5      	adds	r5, r2, r3
 80073bc:	42ac      	cmp	r4, r5
 80073be:	d101      	bne.n	80073c4 <__sfputs_r+0x12>
 80073c0:	2000      	movs	r0, #0
 80073c2:	e007      	b.n	80073d4 <__sfputs_r+0x22>
 80073c4:	463a      	mov	r2, r7
 80073c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7ff ffda 	bl	8007384 <__sfputc_r>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	d1f3      	bne.n	80073bc <__sfputs_r+0xa>
 80073d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073d8 <_vfiprintf_r>:
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	460c      	mov	r4, r1
 80073de:	b09d      	sub	sp, #116	; 0x74
 80073e0:	4617      	mov	r7, r2
 80073e2:	461d      	mov	r5, r3
 80073e4:	4606      	mov	r6, r0
 80073e6:	b118      	cbz	r0, 80073f0 <_vfiprintf_r+0x18>
 80073e8:	6983      	ldr	r3, [r0, #24]
 80073ea:	b90b      	cbnz	r3, 80073f0 <_vfiprintf_r+0x18>
 80073ec:	f7ff fb34 	bl	8006a58 <__sinit>
 80073f0:	4b7c      	ldr	r3, [pc, #496]	; (80075e4 <_vfiprintf_r+0x20c>)
 80073f2:	429c      	cmp	r4, r3
 80073f4:	d158      	bne.n	80074a8 <_vfiprintf_r+0xd0>
 80073f6:	6874      	ldr	r4, [r6, #4]
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	0718      	lsls	r0, r3, #28
 80073fc:	d55e      	bpl.n	80074bc <_vfiprintf_r+0xe4>
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d05b      	beq.n	80074bc <_vfiprintf_r+0xe4>
 8007404:	2300      	movs	r3, #0
 8007406:	9309      	str	r3, [sp, #36]	; 0x24
 8007408:	2320      	movs	r3, #32
 800740a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800740e:	2330      	movs	r3, #48	; 0x30
 8007410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007414:	9503      	str	r5, [sp, #12]
 8007416:	f04f 0b01 	mov.w	fp, #1
 800741a:	46b8      	mov	r8, r7
 800741c:	4645      	mov	r5, r8
 800741e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007422:	b10b      	cbz	r3, 8007428 <_vfiprintf_r+0x50>
 8007424:	2b25      	cmp	r3, #37	; 0x25
 8007426:	d154      	bne.n	80074d2 <_vfiprintf_r+0xfa>
 8007428:	ebb8 0a07 	subs.w	sl, r8, r7
 800742c:	d00b      	beq.n	8007446 <_vfiprintf_r+0x6e>
 800742e:	4653      	mov	r3, sl
 8007430:	463a      	mov	r2, r7
 8007432:	4621      	mov	r1, r4
 8007434:	4630      	mov	r0, r6
 8007436:	f7ff ffbc 	bl	80073b2 <__sfputs_r>
 800743a:	3001      	adds	r0, #1
 800743c:	f000 80c2 	beq.w	80075c4 <_vfiprintf_r+0x1ec>
 8007440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007442:	4453      	add	r3, sl
 8007444:	9309      	str	r3, [sp, #36]	; 0x24
 8007446:	f898 3000 	ldrb.w	r3, [r8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 80ba 	beq.w	80075c4 <_vfiprintf_r+0x1ec>
 8007450:	2300      	movs	r3, #0
 8007452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800745a:	9304      	str	r3, [sp, #16]
 800745c:	9307      	str	r3, [sp, #28]
 800745e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007462:	931a      	str	r3, [sp, #104]	; 0x68
 8007464:	46a8      	mov	r8, r5
 8007466:	2205      	movs	r2, #5
 8007468:	f818 1b01 	ldrb.w	r1, [r8], #1
 800746c:	485e      	ldr	r0, [pc, #376]	; (80075e8 <_vfiprintf_r+0x210>)
 800746e:	f7f8 febf 	bl	80001f0 <memchr>
 8007472:	9b04      	ldr	r3, [sp, #16]
 8007474:	bb78      	cbnz	r0, 80074d6 <_vfiprintf_r+0xfe>
 8007476:	06d9      	lsls	r1, r3, #27
 8007478:	bf44      	itt	mi
 800747a:	2220      	movmi	r2, #32
 800747c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007480:	071a      	lsls	r2, r3, #28
 8007482:	bf44      	itt	mi
 8007484:	222b      	movmi	r2, #43	; 0x2b
 8007486:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800748a:	782a      	ldrb	r2, [r5, #0]
 800748c:	2a2a      	cmp	r2, #42	; 0x2a
 800748e:	d02a      	beq.n	80074e6 <_vfiprintf_r+0x10e>
 8007490:	9a07      	ldr	r2, [sp, #28]
 8007492:	46a8      	mov	r8, r5
 8007494:	2000      	movs	r0, #0
 8007496:	250a      	movs	r5, #10
 8007498:	4641      	mov	r1, r8
 800749a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800749e:	3b30      	subs	r3, #48	; 0x30
 80074a0:	2b09      	cmp	r3, #9
 80074a2:	d969      	bls.n	8007578 <_vfiprintf_r+0x1a0>
 80074a4:	b360      	cbz	r0, 8007500 <_vfiprintf_r+0x128>
 80074a6:	e024      	b.n	80074f2 <_vfiprintf_r+0x11a>
 80074a8:	4b50      	ldr	r3, [pc, #320]	; (80075ec <_vfiprintf_r+0x214>)
 80074aa:	429c      	cmp	r4, r3
 80074ac:	d101      	bne.n	80074b2 <_vfiprintf_r+0xda>
 80074ae:	68b4      	ldr	r4, [r6, #8]
 80074b0:	e7a2      	b.n	80073f8 <_vfiprintf_r+0x20>
 80074b2:	4b4f      	ldr	r3, [pc, #316]	; (80075f0 <_vfiprintf_r+0x218>)
 80074b4:	429c      	cmp	r4, r3
 80074b6:	bf08      	it	eq
 80074b8:	68f4      	ldreq	r4, [r6, #12]
 80074ba:	e79d      	b.n	80073f8 <_vfiprintf_r+0x20>
 80074bc:	4621      	mov	r1, r4
 80074be:	4630      	mov	r0, r6
 80074c0:	f7fe fb26 	bl	8005b10 <__swsetup_r>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d09d      	beq.n	8007404 <_vfiprintf_r+0x2c>
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074cc:	b01d      	add	sp, #116	; 0x74
 80074ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d2:	46a8      	mov	r8, r5
 80074d4:	e7a2      	b.n	800741c <_vfiprintf_r+0x44>
 80074d6:	4a44      	ldr	r2, [pc, #272]	; (80075e8 <_vfiprintf_r+0x210>)
 80074d8:	1a80      	subs	r0, r0, r2
 80074da:	fa0b f000 	lsl.w	r0, fp, r0
 80074de:	4318      	orrs	r0, r3
 80074e0:	9004      	str	r0, [sp, #16]
 80074e2:	4645      	mov	r5, r8
 80074e4:	e7be      	b.n	8007464 <_vfiprintf_r+0x8c>
 80074e6:	9a03      	ldr	r2, [sp, #12]
 80074e8:	1d11      	adds	r1, r2, #4
 80074ea:	6812      	ldr	r2, [r2, #0]
 80074ec:	9103      	str	r1, [sp, #12]
 80074ee:	2a00      	cmp	r2, #0
 80074f0:	db01      	blt.n	80074f6 <_vfiprintf_r+0x11e>
 80074f2:	9207      	str	r2, [sp, #28]
 80074f4:	e004      	b.n	8007500 <_vfiprintf_r+0x128>
 80074f6:	4252      	negs	r2, r2
 80074f8:	f043 0302 	orr.w	r3, r3, #2
 80074fc:	9207      	str	r2, [sp, #28]
 80074fe:	9304      	str	r3, [sp, #16]
 8007500:	f898 3000 	ldrb.w	r3, [r8]
 8007504:	2b2e      	cmp	r3, #46	; 0x2e
 8007506:	d10e      	bne.n	8007526 <_vfiprintf_r+0x14e>
 8007508:	f898 3001 	ldrb.w	r3, [r8, #1]
 800750c:	2b2a      	cmp	r3, #42	; 0x2a
 800750e:	d138      	bne.n	8007582 <_vfiprintf_r+0x1aa>
 8007510:	9b03      	ldr	r3, [sp, #12]
 8007512:	1d1a      	adds	r2, r3, #4
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	9203      	str	r2, [sp, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	bfb8      	it	lt
 800751c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007520:	f108 0802 	add.w	r8, r8, #2
 8007524:	9305      	str	r3, [sp, #20]
 8007526:	4d33      	ldr	r5, [pc, #204]	; (80075f4 <_vfiprintf_r+0x21c>)
 8007528:	f898 1000 	ldrb.w	r1, [r8]
 800752c:	2203      	movs	r2, #3
 800752e:	4628      	mov	r0, r5
 8007530:	f7f8 fe5e 	bl	80001f0 <memchr>
 8007534:	b140      	cbz	r0, 8007548 <_vfiprintf_r+0x170>
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	1b40      	subs	r0, r0, r5
 800753a:	fa03 f000 	lsl.w	r0, r3, r0
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	4303      	orrs	r3, r0
 8007542:	f108 0801 	add.w	r8, r8, #1
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	f898 1000 	ldrb.w	r1, [r8]
 800754c:	482a      	ldr	r0, [pc, #168]	; (80075f8 <_vfiprintf_r+0x220>)
 800754e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007552:	2206      	movs	r2, #6
 8007554:	f108 0701 	add.w	r7, r8, #1
 8007558:	f7f8 fe4a 	bl	80001f0 <memchr>
 800755c:	2800      	cmp	r0, #0
 800755e:	d037      	beq.n	80075d0 <_vfiprintf_r+0x1f8>
 8007560:	4b26      	ldr	r3, [pc, #152]	; (80075fc <_vfiprintf_r+0x224>)
 8007562:	bb1b      	cbnz	r3, 80075ac <_vfiprintf_r+0x1d4>
 8007564:	9b03      	ldr	r3, [sp, #12]
 8007566:	3307      	adds	r3, #7
 8007568:	f023 0307 	bic.w	r3, r3, #7
 800756c:	3308      	adds	r3, #8
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007572:	444b      	add	r3, r9
 8007574:	9309      	str	r3, [sp, #36]	; 0x24
 8007576:	e750      	b.n	800741a <_vfiprintf_r+0x42>
 8007578:	fb05 3202 	mla	r2, r5, r2, r3
 800757c:	2001      	movs	r0, #1
 800757e:	4688      	mov	r8, r1
 8007580:	e78a      	b.n	8007498 <_vfiprintf_r+0xc0>
 8007582:	2300      	movs	r3, #0
 8007584:	f108 0801 	add.w	r8, r8, #1
 8007588:	9305      	str	r3, [sp, #20]
 800758a:	4619      	mov	r1, r3
 800758c:	250a      	movs	r5, #10
 800758e:	4640      	mov	r0, r8
 8007590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007594:	3a30      	subs	r2, #48	; 0x30
 8007596:	2a09      	cmp	r2, #9
 8007598:	d903      	bls.n	80075a2 <_vfiprintf_r+0x1ca>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0c3      	beq.n	8007526 <_vfiprintf_r+0x14e>
 800759e:	9105      	str	r1, [sp, #20]
 80075a0:	e7c1      	b.n	8007526 <_vfiprintf_r+0x14e>
 80075a2:	fb05 2101 	mla	r1, r5, r1, r2
 80075a6:	2301      	movs	r3, #1
 80075a8:	4680      	mov	r8, r0
 80075aa:	e7f0      	b.n	800758e <_vfiprintf_r+0x1b6>
 80075ac:	ab03      	add	r3, sp, #12
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	4622      	mov	r2, r4
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <_vfiprintf_r+0x228>)
 80075b4:	a904      	add	r1, sp, #16
 80075b6:	4630      	mov	r0, r6
 80075b8:	f7fd fe14 	bl	80051e4 <_printf_float>
 80075bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80075c0:	4681      	mov	r9, r0
 80075c2:	d1d5      	bne.n	8007570 <_vfiprintf_r+0x198>
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	065b      	lsls	r3, r3, #25
 80075c8:	f53f af7e 	bmi.w	80074c8 <_vfiprintf_r+0xf0>
 80075cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ce:	e77d      	b.n	80074cc <_vfiprintf_r+0xf4>
 80075d0:	ab03      	add	r3, sp, #12
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	4622      	mov	r2, r4
 80075d6:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <_vfiprintf_r+0x228>)
 80075d8:	a904      	add	r1, sp, #16
 80075da:	4630      	mov	r0, r6
 80075dc:	f7fe f8b8 	bl	8005750 <_printf_i>
 80075e0:	e7ec      	b.n	80075bc <_vfiprintf_r+0x1e4>
 80075e2:	bf00      	nop
 80075e4:	08009628 	.word	0x08009628
 80075e8:	08009764 	.word	0x08009764
 80075ec:	08009648 	.word	0x08009648
 80075f0:	08009608 	.word	0x08009608
 80075f4:	0800976a 	.word	0x0800976a
 80075f8:	0800976e 	.word	0x0800976e
 80075fc:	080051e5 	.word	0x080051e5
 8007600:	080073b3 	.word	0x080073b3

08007604 <_sbrk_r>:
 8007604:	b538      	push	{r3, r4, r5, lr}
 8007606:	4c06      	ldr	r4, [pc, #24]	; (8007620 <_sbrk_r+0x1c>)
 8007608:	2300      	movs	r3, #0
 800760a:	4605      	mov	r5, r0
 800760c:	4608      	mov	r0, r1
 800760e:	6023      	str	r3, [r4, #0]
 8007610:	f7fd fca6 	bl	8004f60 <_sbrk>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d102      	bne.n	800761e <_sbrk_r+0x1a>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	b103      	cbz	r3, 800761e <_sbrk_r+0x1a>
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	20000464 	.word	0x20000464

08007624 <__sread>:
 8007624:	b510      	push	{r4, lr}
 8007626:	460c      	mov	r4, r1
 8007628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800762c:	f000 f8a8 	bl	8007780 <_read_r>
 8007630:	2800      	cmp	r0, #0
 8007632:	bfab      	itete	ge
 8007634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007636:	89a3      	ldrhlt	r3, [r4, #12]
 8007638:	181b      	addge	r3, r3, r0
 800763a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800763e:	bfac      	ite	ge
 8007640:	6563      	strge	r3, [r4, #84]	; 0x54
 8007642:	81a3      	strhlt	r3, [r4, #12]
 8007644:	bd10      	pop	{r4, pc}

08007646 <__swrite>:
 8007646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800764a:	461f      	mov	r7, r3
 800764c:	898b      	ldrh	r3, [r1, #12]
 800764e:	05db      	lsls	r3, r3, #23
 8007650:	4605      	mov	r5, r0
 8007652:	460c      	mov	r4, r1
 8007654:	4616      	mov	r6, r2
 8007656:	d505      	bpl.n	8007664 <__swrite+0x1e>
 8007658:	2302      	movs	r3, #2
 800765a:	2200      	movs	r2, #0
 800765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007660:	f000 f868 	bl	8007734 <_lseek_r>
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800766a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800766e:	81a3      	strh	r3, [r4, #12]
 8007670:	4632      	mov	r2, r6
 8007672:	463b      	mov	r3, r7
 8007674:	4628      	mov	r0, r5
 8007676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800767a:	f000 b817 	b.w	80076ac <_write_r>

0800767e <__sseek>:
 800767e:	b510      	push	{r4, lr}
 8007680:	460c      	mov	r4, r1
 8007682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007686:	f000 f855 	bl	8007734 <_lseek_r>
 800768a:	1c43      	adds	r3, r0, #1
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	bf15      	itete	ne
 8007690:	6560      	strne	r0, [r4, #84]	; 0x54
 8007692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800769a:	81a3      	strheq	r3, [r4, #12]
 800769c:	bf18      	it	ne
 800769e:	81a3      	strhne	r3, [r4, #12]
 80076a0:	bd10      	pop	{r4, pc}

080076a2 <__sclose>:
 80076a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a6:	f000 b813 	b.w	80076d0 <_close_r>
	...

080076ac <_write_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4c07      	ldr	r4, [pc, #28]	; (80076cc <_write_r+0x20>)
 80076b0:	4605      	mov	r5, r0
 80076b2:	4608      	mov	r0, r1
 80076b4:	4611      	mov	r1, r2
 80076b6:	2200      	movs	r2, #0
 80076b8:	6022      	str	r2, [r4, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f7f9 fca2 	bl	8001004 <_write>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_write_r+0x1e>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_write_r+0x1e>
 80076c8:	602b      	str	r3, [r5, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	20000464 	.word	0x20000464

080076d0 <_close_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4c06      	ldr	r4, [pc, #24]	; (80076ec <_close_r+0x1c>)
 80076d4:	2300      	movs	r3, #0
 80076d6:	4605      	mov	r5, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	6023      	str	r3, [r4, #0]
 80076dc:	f7fd fc32 	bl	8004f44 <_close>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_close_r+0x1a>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_close_r+0x1a>
 80076e8:	602b      	str	r3, [r5, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20000464 	.word	0x20000464

080076f0 <_fstat_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4c07      	ldr	r4, [pc, #28]	; (8007710 <_fstat_r+0x20>)
 80076f4:	2300      	movs	r3, #0
 80076f6:	4605      	mov	r5, r0
 80076f8:	4608      	mov	r0, r1
 80076fa:	4611      	mov	r1, r2
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	f7fd fc25 	bl	8004f4c <_fstat>
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	d102      	bne.n	800770c <_fstat_r+0x1c>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	b103      	cbz	r3, 800770c <_fstat_r+0x1c>
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	bd38      	pop	{r3, r4, r5, pc}
 800770e:	bf00      	nop
 8007710:	20000464 	.word	0x20000464

08007714 <_isatty_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4c06      	ldr	r4, [pc, #24]	; (8007730 <_isatty_r+0x1c>)
 8007718:	2300      	movs	r3, #0
 800771a:	4605      	mov	r5, r0
 800771c:	4608      	mov	r0, r1
 800771e:	6023      	str	r3, [r4, #0]
 8007720:	f7fd fc1a 	bl	8004f58 <_isatty>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_isatty_r+0x1a>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	b103      	cbz	r3, 800772e <_isatty_r+0x1a>
 800772c:	602b      	str	r3, [r5, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	20000464 	.word	0x20000464

08007734 <_lseek_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4c07      	ldr	r4, [pc, #28]	; (8007754 <_lseek_r+0x20>)
 8007738:	4605      	mov	r5, r0
 800773a:	4608      	mov	r0, r1
 800773c:	4611      	mov	r1, r2
 800773e:	2200      	movs	r2, #0
 8007740:	6022      	str	r2, [r4, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	f7fd fc0a 	bl	8004f5c <_lseek>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_lseek_r+0x1e>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	b103      	cbz	r3, 8007752 <_lseek_r+0x1e>
 8007750:	602b      	str	r3, [r5, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	20000464 	.word	0x20000464

08007758 <__ascii_mbtowc>:
 8007758:	b082      	sub	sp, #8
 800775a:	b901      	cbnz	r1, 800775e <__ascii_mbtowc+0x6>
 800775c:	a901      	add	r1, sp, #4
 800775e:	b142      	cbz	r2, 8007772 <__ascii_mbtowc+0x1a>
 8007760:	b14b      	cbz	r3, 8007776 <__ascii_mbtowc+0x1e>
 8007762:	7813      	ldrb	r3, [r2, #0]
 8007764:	600b      	str	r3, [r1, #0]
 8007766:	7812      	ldrb	r2, [r2, #0]
 8007768:	1c10      	adds	r0, r2, #0
 800776a:	bf18      	it	ne
 800776c:	2001      	movne	r0, #1
 800776e:	b002      	add	sp, #8
 8007770:	4770      	bx	lr
 8007772:	4610      	mov	r0, r2
 8007774:	e7fb      	b.n	800776e <__ascii_mbtowc+0x16>
 8007776:	f06f 0001 	mvn.w	r0, #1
 800777a:	e7f8      	b.n	800776e <__ascii_mbtowc+0x16>

0800777c <__malloc_lock>:
 800777c:	4770      	bx	lr

0800777e <__malloc_unlock>:
 800777e:	4770      	bx	lr

08007780 <_read_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4c07      	ldr	r4, [pc, #28]	; (80077a0 <_read_r+0x20>)
 8007784:	4605      	mov	r5, r0
 8007786:	4608      	mov	r0, r1
 8007788:	4611      	mov	r1, r2
 800778a:	2200      	movs	r2, #0
 800778c:	6022      	str	r2, [r4, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	f7fd fbca 	bl	8004f28 <_read>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_read_r+0x1e>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	b103      	cbz	r3, 800779e <_read_r+0x1e>
 800779c:	602b      	str	r3, [r5, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	20000464 	.word	0x20000464

080077a4 <__ascii_wctomb>:
 80077a4:	b149      	cbz	r1, 80077ba <__ascii_wctomb+0x16>
 80077a6:	2aff      	cmp	r2, #255	; 0xff
 80077a8:	bf85      	ittet	hi
 80077aa:	238a      	movhi	r3, #138	; 0x8a
 80077ac:	6003      	strhi	r3, [r0, #0]
 80077ae:	700a      	strbls	r2, [r1, #0]
 80077b0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80077b4:	bf98      	it	ls
 80077b6:	2001      	movls	r0, #1
 80077b8:	4770      	bx	lr
 80077ba:	4608      	mov	r0, r1
 80077bc:	4770      	bx	lr
	...

080077c0 <asin>:
 80077c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077c2:	ed2d 8b02 	vpush	{d8}
 80077c6:	4e26      	ldr	r6, [pc, #152]	; (8007860 <asin+0xa0>)
 80077c8:	b08b      	sub	sp, #44	; 0x2c
 80077ca:	ec55 4b10 	vmov	r4, r5, d0
 80077ce:	f000 fa1b 	bl	8007c08 <__ieee754_asin>
 80077d2:	f996 3000 	ldrsb.w	r3, [r6]
 80077d6:	eeb0 8a40 	vmov.f32	s16, s0
 80077da:	eef0 8a60 	vmov.f32	s17, s1
 80077de:	3301      	adds	r3, #1
 80077e0:	d036      	beq.n	8007850 <asin+0x90>
 80077e2:	4622      	mov	r2, r4
 80077e4:	462b      	mov	r3, r5
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f9 f9a7 	bl	8000b3c <__aeabi_dcmpun>
 80077ee:	4607      	mov	r7, r0
 80077f0:	bb70      	cbnz	r0, 8007850 <asin+0x90>
 80077f2:	ec45 4b10 	vmov	d0, r4, r5
 80077f6:	f001 fc57 	bl	80090a8 <fabs>
 80077fa:	2200      	movs	r2, #0
 80077fc:	4b19      	ldr	r3, [pc, #100]	; (8007864 <asin+0xa4>)
 80077fe:	ec51 0b10 	vmov	r0, r1, d0
 8007802:	f7f9 f991 	bl	8000b28 <__aeabi_dcmpgt>
 8007806:	b318      	cbz	r0, 8007850 <asin+0x90>
 8007808:	2301      	movs	r3, #1
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	4816      	ldr	r0, [pc, #88]	; (8007868 <asin+0xa8>)
 800780e:	4b17      	ldr	r3, [pc, #92]	; (800786c <asin+0xac>)
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	9708      	str	r7, [sp, #32]
 8007814:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007818:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800781c:	f001 fc58 	bl	80090d0 <nan>
 8007820:	f996 3000 	ldrsb.w	r3, [r6]
 8007824:	2b02      	cmp	r3, #2
 8007826:	ed8d 0b06 	vstr	d0, [sp, #24]
 800782a:	d104      	bne.n	8007836 <asin+0x76>
 800782c:	f7fd fc08 	bl	8005040 <__errno>
 8007830:	2321      	movs	r3, #33	; 0x21
 8007832:	6003      	str	r3, [r0, #0]
 8007834:	e004      	b.n	8007840 <asin+0x80>
 8007836:	4668      	mov	r0, sp
 8007838:	f001 fc47 	bl	80090ca <matherr>
 800783c:	2800      	cmp	r0, #0
 800783e:	d0f5      	beq.n	800782c <asin+0x6c>
 8007840:	9b08      	ldr	r3, [sp, #32]
 8007842:	b11b      	cbz	r3, 800784c <asin+0x8c>
 8007844:	f7fd fbfc 	bl	8005040 <__errno>
 8007848:	9b08      	ldr	r3, [sp, #32]
 800784a:	6003      	str	r3, [r0, #0]
 800784c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007850:	eeb0 0a48 	vmov.f32	s0, s16
 8007854:	eef0 0a68 	vmov.f32	s1, s17
 8007858:	b00b      	add	sp, #44	; 0x2c
 800785a:	ecbd 8b02 	vpop	{d8}
 800785e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007860:	2000021c 	.word	0x2000021c
 8007864:	3ff00000 	.word	0x3ff00000
 8007868:	08009769 	.word	0x08009769
 800786c:	08009880 	.word	0x08009880

08007870 <atan2>:
 8007870:	f000 bbda 	b.w	8008028 <__ieee754_atan2>

08007874 <pow>:
 8007874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007878:	ed2d 8b04 	vpush	{d8-d9}
 800787c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007b50 <pow+0x2dc>
 8007880:	b08d      	sub	sp, #52	; 0x34
 8007882:	ec57 6b10 	vmov	r6, r7, d0
 8007886:	ec55 4b11 	vmov	r4, r5, d1
 800788a:	f000 fcad 	bl	80081e8 <__ieee754_pow>
 800788e:	f999 3000 	ldrsb.w	r3, [r9]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	eeb0 8a40 	vmov.f32	s16, s0
 800789a:	eef0 8a60 	vmov.f32	s17, s1
 800789e:	46c8      	mov	r8, r9
 80078a0:	d05f      	beq.n	8007962 <pow+0xee>
 80078a2:	4622      	mov	r2, r4
 80078a4:	462b      	mov	r3, r5
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7f9 f947 	bl	8000b3c <__aeabi_dcmpun>
 80078ae:	4683      	mov	fp, r0
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d156      	bne.n	8007962 <pow+0xee>
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	4630      	mov	r0, r6
 80078ba:	4639      	mov	r1, r7
 80078bc:	f7f9 f93e 	bl	8000b3c <__aeabi_dcmpun>
 80078c0:	9001      	str	r0, [sp, #4]
 80078c2:	b1e8      	cbz	r0, 8007900 <pow+0x8c>
 80078c4:	2200      	movs	r2, #0
 80078c6:	2300      	movs	r3, #0
 80078c8:	4620      	mov	r0, r4
 80078ca:	4629      	mov	r1, r5
 80078cc:	f7f9 f904 	bl	8000ad8 <__aeabi_dcmpeq>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d046      	beq.n	8007962 <pow+0xee>
 80078d4:	2301      	movs	r3, #1
 80078d6:	9302      	str	r3, [sp, #8]
 80078d8:	4b96      	ldr	r3, [pc, #600]	; (8007b34 <pow+0x2c0>)
 80078da:	9303      	str	r3, [sp, #12]
 80078dc:	4b96      	ldr	r3, [pc, #600]	; (8007b38 <pow+0x2c4>)
 80078de:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80078e2:	2200      	movs	r2, #0
 80078e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078e8:	9b00      	ldr	r3, [sp, #0]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80078f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80078f4:	d033      	beq.n	800795e <pow+0xea>
 80078f6:	a802      	add	r0, sp, #8
 80078f8:	f001 fbe7 	bl	80090ca <matherr>
 80078fc:	bb48      	cbnz	r0, 8007952 <pow+0xde>
 80078fe:	e05d      	b.n	80079bc <pow+0x148>
 8007900:	f04f 0a00 	mov.w	sl, #0
 8007904:	f04f 0b00 	mov.w	fp, #0
 8007908:	4652      	mov	r2, sl
 800790a:	465b      	mov	r3, fp
 800790c:	4630      	mov	r0, r6
 800790e:	4639      	mov	r1, r7
 8007910:	f7f9 f8e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007914:	ec4b ab19 	vmov	d9, sl, fp
 8007918:	2800      	cmp	r0, #0
 800791a:	d054      	beq.n	80079c6 <pow+0x152>
 800791c:	4652      	mov	r2, sl
 800791e:	465b      	mov	r3, fp
 8007920:	4620      	mov	r0, r4
 8007922:	4629      	mov	r1, r5
 8007924:	f7f9 f8d8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007928:	4680      	mov	r8, r0
 800792a:	b318      	cbz	r0, 8007974 <pow+0x100>
 800792c:	2301      	movs	r3, #1
 800792e:	9302      	str	r3, [sp, #8]
 8007930:	4b80      	ldr	r3, [pc, #512]	; (8007b34 <pow+0x2c0>)
 8007932:	9303      	str	r3, [sp, #12]
 8007934:	9b01      	ldr	r3, [sp, #4]
 8007936:	930a      	str	r3, [sp, #40]	; 0x28
 8007938:	9b00      	ldr	r3, [sp, #0]
 800793a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800793e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007942:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0d5      	beq.n	80078f6 <pow+0x82>
 800794a:	4b7b      	ldr	r3, [pc, #492]	; (8007b38 <pow+0x2c4>)
 800794c:	2200      	movs	r2, #0
 800794e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007954:	b11b      	cbz	r3, 800795e <pow+0xea>
 8007956:	f7fd fb73 	bl	8005040 <__errno>
 800795a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800795c:	6003      	str	r3, [r0, #0]
 800795e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007962:	eeb0 0a48 	vmov.f32	s0, s16
 8007966:	eef0 0a68 	vmov.f32	s1, s17
 800796a:	b00d      	add	sp, #52	; 0x34
 800796c:	ecbd 8b04 	vpop	{d8-d9}
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	ec45 4b10 	vmov	d0, r4, r5
 8007978:	f001 fb9f 	bl	80090ba <finite>
 800797c:	2800      	cmp	r0, #0
 800797e:	d0f0      	beq.n	8007962 <pow+0xee>
 8007980:	4652      	mov	r2, sl
 8007982:	465b      	mov	r3, fp
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f9 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800798c:	2800      	cmp	r0, #0
 800798e:	d0e8      	beq.n	8007962 <pow+0xee>
 8007990:	2301      	movs	r3, #1
 8007992:	9302      	str	r3, [sp, #8]
 8007994:	4b67      	ldr	r3, [pc, #412]	; (8007b34 <pow+0x2c0>)
 8007996:	9303      	str	r3, [sp, #12]
 8007998:	f999 3000 	ldrsb.w	r3, [r9]
 800799c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80079a0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80079a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80079a8:	b913      	cbnz	r3, 80079b0 <pow+0x13c>
 80079aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80079ae:	e7a2      	b.n	80078f6 <pow+0x82>
 80079b0:	4962      	ldr	r1, [pc, #392]	; (8007b3c <pow+0x2c8>)
 80079b2:	2000      	movs	r0, #0
 80079b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d19c      	bne.n	80078f6 <pow+0x82>
 80079bc:	f7fd fb40 	bl	8005040 <__errno>
 80079c0:	2321      	movs	r3, #33	; 0x21
 80079c2:	6003      	str	r3, [r0, #0]
 80079c4:	e7c5      	b.n	8007952 <pow+0xde>
 80079c6:	eeb0 0a48 	vmov.f32	s0, s16
 80079ca:	eef0 0a68 	vmov.f32	s1, s17
 80079ce:	f001 fb74 	bl	80090ba <finite>
 80079d2:	9000      	str	r0, [sp, #0]
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f040 8081 	bne.w	8007adc <pow+0x268>
 80079da:	ec47 6b10 	vmov	d0, r6, r7
 80079de:	f001 fb6c 	bl	80090ba <finite>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d07a      	beq.n	8007adc <pow+0x268>
 80079e6:	ec45 4b10 	vmov	d0, r4, r5
 80079ea:	f001 fb66 	bl	80090ba <finite>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d074      	beq.n	8007adc <pow+0x268>
 80079f2:	ec53 2b18 	vmov	r2, r3, d8
 80079f6:	ee18 0a10 	vmov	r0, s16
 80079fa:	4619      	mov	r1, r3
 80079fc:	f7f9 f89e 	bl	8000b3c <__aeabi_dcmpun>
 8007a00:	f999 9000 	ldrsb.w	r9, [r9]
 8007a04:	4b4b      	ldr	r3, [pc, #300]	; (8007b34 <pow+0x2c0>)
 8007a06:	b1b0      	cbz	r0, 8007a36 <pow+0x1c2>
 8007a08:	2201      	movs	r2, #1
 8007a0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a0e:	9b00      	ldr	r3, [sp, #0]
 8007a10:	930a      	str	r3, [sp, #40]	; 0x28
 8007a12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007a1a:	f1b9 0f00 	cmp.w	r9, #0
 8007a1e:	d0c4      	beq.n	80079aa <pow+0x136>
 8007a20:	4652      	mov	r2, sl
 8007a22:	465b      	mov	r3, fp
 8007a24:	4650      	mov	r0, sl
 8007a26:	4659      	mov	r1, fp
 8007a28:	f7f8 ff18 	bl	800085c <__aeabi_ddiv>
 8007a2c:	f1b9 0f02 	cmp.w	r9, #2
 8007a30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a34:	e7c1      	b.n	80079ba <pow+0x146>
 8007a36:	2203      	movs	r2, #3
 8007a38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a3c:	900a      	str	r0, [sp, #40]	; 0x28
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4620      	mov	r0, r4
 8007a42:	2200      	movs	r2, #0
 8007a44:	4b3e      	ldr	r3, [pc, #248]	; (8007b40 <pow+0x2cc>)
 8007a46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007a4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a4e:	f7f8 fddb 	bl	8000608 <__aeabi_dmul>
 8007a52:	4604      	mov	r4, r0
 8007a54:	460d      	mov	r5, r1
 8007a56:	f1b9 0f00 	cmp.w	r9, #0
 8007a5a:	d124      	bne.n	8007aa6 <pow+0x232>
 8007a5c:	4b39      	ldr	r3, [pc, #228]	; (8007b44 <pow+0x2d0>)
 8007a5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007a62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a66:	4630      	mov	r0, r6
 8007a68:	4652      	mov	r2, sl
 8007a6a:	465b      	mov	r3, fp
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	f7f9 f83d 	bl	8000aec <__aeabi_dcmplt>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d056      	beq.n	8007b24 <pow+0x2b0>
 8007a76:	ec45 4b10 	vmov	d0, r4, r5
 8007a7a:	f001 fb31 	bl	80090e0 <rint>
 8007a7e:	4622      	mov	r2, r4
 8007a80:	462b      	mov	r3, r5
 8007a82:	ec51 0b10 	vmov	r0, r1, d0
 8007a86:	f7f9 f827 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a8a:	b920      	cbnz	r0, 8007a96 <pow+0x222>
 8007a8c:	4b2e      	ldr	r3, [pc, #184]	; (8007b48 <pow+0x2d4>)
 8007a8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007a92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a96:	f998 3000 	ldrsb.w	r3, [r8]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d142      	bne.n	8007b24 <pow+0x2b0>
 8007a9e:	f7fd facf 	bl	8005040 <__errno>
 8007aa2:	2322      	movs	r3, #34	; 0x22
 8007aa4:	e78d      	b.n	80079c2 <pow+0x14e>
 8007aa6:	4b29      	ldr	r3, [pc, #164]	; (8007b4c <pow+0x2d8>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4652      	mov	r2, sl
 8007ab2:	465b      	mov	r3, fp
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	f7f9 f819 	bl	8000aec <__aeabi_dcmplt>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d0eb      	beq.n	8007a96 <pow+0x222>
 8007abe:	ec45 4b10 	vmov	d0, r4, r5
 8007ac2:	f001 fb0d 	bl	80090e0 <rint>
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	462b      	mov	r3, r5
 8007aca:	ec51 0b10 	vmov	r0, r1, d0
 8007ace:	f7f9 f803 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d1df      	bne.n	8007a96 <pow+0x222>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	4b18      	ldr	r3, [pc, #96]	; (8007b3c <pow+0x2c8>)
 8007ada:	e7da      	b.n	8007a92 <pow+0x21e>
 8007adc:	2200      	movs	r2, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	ec51 0b18 	vmov	r0, r1, d8
 8007ae4:	f7f8 fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f43f af3a 	beq.w	8007962 <pow+0xee>
 8007aee:	ec47 6b10 	vmov	d0, r6, r7
 8007af2:	f001 fae2 	bl	80090ba <finite>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f43f af33 	beq.w	8007962 <pow+0xee>
 8007afc:	ec45 4b10 	vmov	d0, r4, r5
 8007b00:	f001 fadb 	bl	80090ba <finite>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	f43f af2c 	beq.w	8007962 <pow+0xee>
 8007b0a:	2304      	movs	r3, #4
 8007b0c:	9302      	str	r3, [sp, #8]
 8007b0e:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <pow+0x2c0>)
 8007b10:	9303      	str	r3, [sp, #12]
 8007b12:	2300      	movs	r3, #0
 8007b14:	930a      	str	r3, [sp, #40]	; 0x28
 8007b16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007b1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007b1e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007b22:	e7b8      	b.n	8007a96 <pow+0x222>
 8007b24:	a802      	add	r0, sp, #8
 8007b26:	f001 fad0 	bl	80090ca <matherr>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f47f af11 	bne.w	8007952 <pow+0xde>
 8007b30:	e7b5      	b.n	8007a9e <pow+0x22a>
 8007b32:	bf00      	nop
 8007b34:	08009885 	.word	0x08009885
 8007b38:	3ff00000 	.word	0x3ff00000
 8007b3c:	fff00000 	.word	0xfff00000
 8007b40:	3fe00000 	.word	0x3fe00000
 8007b44:	47efffff 	.word	0x47efffff
 8007b48:	c7efffff 	.word	0xc7efffff
 8007b4c:	7ff00000 	.word	0x7ff00000
 8007b50:	2000021c 	.word	0x2000021c

08007b54 <sqrt>:
 8007b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b58:	ed2d 8b02 	vpush	{d8}
 8007b5c:	b08b      	sub	sp, #44	; 0x2c
 8007b5e:	ec55 4b10 	vmov	r4, r5, d0
 8007b62:	f001 f84f 	bl	8008c04 <__ieee754_sqrt>
 8007b66:	4b26      	ldr	r3, [pc, #152]	; (8007c00 <sqrt+0xac>)
 8007b68:	eeb0 8a40 	vmov.f32	s16, s0
 8007b6c:	eef0 8a60 	vmov.f32	s17, s1
 8007b70:	f993 6000 	ldrsb.w	r6, [r3]
 8007b74:	1c73      	adds	r3, r6, #1
 8007b76:	d02a      	beq.n	8007bce <sqrt+0x7a>
 8007b78:	4622      	mov	r2, r4
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f7f8 ffdc 	bl	8000b3c <__aeabi_dcmpun>
 8007b84:	4607      	mov	r7, r0
 8007b86:	bb10      	cbnz	r0, 8007bce <sqrt+0x7a>
 8007b88:	f04f 0800 	mov.w	r8, #0
 8007b8c:	f04f 0900 	mov.w	r9, #0
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	4620      	mov	r0, r4
 8007b96:	4629      	mov	r1, r5
 8007b98:	f7f8 ffa8 	bl	8000aec <__aeabi_dcmplt>
 8007b9c:	b1b8      	cbz	r0, 8007bce <sqrt+0x7a>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <sqrt+0xb0>)
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	9708      	str	r7, [sp, #32]
 8007ba8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007bac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007bb0:	b9b6      	cbnz	r6, 8007be0 <sqrt+0x8c>
 8007bb2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007bb6:	4668      	mov	r0, sp
 8007bb8:	f001 fa87 	bl	80090ca <matherr>
 8007bbc:	b1d0      	cbz	r0, 8007bf4 <sqrt+0xa0>
 8007bbe:	9b08      	ldr	r3, [sp, #32]
 8007bc0:	b11b      	cbz	r3, 8007bca <sqrt+0x76>
 8007bc2:	f7fd fa3d 	bl	8005040 <__errno>
 8007bc6:	9b08      	ldr	r3, [sp, #32]
 8007bc8:	6003      	str	r3, [r0, #0]
 8007bca:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007bce:	eeb0 0a48 	vmov.f32	s0, s16
 8007bd2:	eef0 0a68 	vmov.f32	s1, s17
 8007bd6:	b00b      	add	sp, #44	; 0x2c
 8007bd8:	ecbd 8b02 	vpop	{d8}
 8007bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007be0:	4642      	mov	r2, r8
 8007be2:	464b      	mov	r3, r9
 8007be4:	4640      	mov	r0, r8
 8007be6:	4649      	mov	r1, r9
 8007be8:	f7f8 fe38 	bl	800085c <__aeabi_ddiv>
 8007bec:	2e02      	cmp	r6, #2
 8007bee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007bf2:	d1e0      	bne.n	8007bb6 <sqrt+0x62>
 8007bf4:	f7fd fa24 	bl	8005040 <__errno>
 8007bf8:	2321      	movs	r3, #33	; 0x21
 8007bfa:	6003      	str	r3, [r0, #0]
 8007bfc:	e7df      	b.n	8007bbe <sqrt+0x6a>
 8007bfe:	bf00      	nop
 8007c00:	2000021c 	.word	0x2000021c
 8007c04:	08009889 	.word	0x08009889

08007c08 <__ieee754_asin>:
 8007c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	ec55 4b10 	vmov	r4, r5, d0
 8007c10:	4bcb      	ldr	r3, [pc, #812]	; (8007f40 <__ieee754_asin+0x338>)
 8007c12:	b087      	sub	sp, #28
 8007c14:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007c18:	429f      	cmp	r7, r3
 8007c1a:	9501      	str	r5, [sp, #4]
 8007c1c:	dd31      	ble.n	8007c82 <__ieee754_asin+0x7a>
 8007c1e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8007c22:	ee10 3a10 	vmov	r3, s0
 8007c26:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8007c2a:	433b      	orrs	r3, r7
 8007c2c:	d117      	bne.n	8007c5e <__ieee754_asin+0x56>
 8007c2e:	a3aa      	add	r3, pc, #680	; (adr r3, 8007ed8 <__ieee754_asin+0x2d0>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	ee10 0a10 	vmov	r0, s0
 8007c38:	4629      	mov	r1, r5
 8007c3a:	f7f8 fce5 	bl	8000608 <__aeabi_dmul>
 8007c3e:	a3a8      	add	r3, pc, #672	; (adr r3, 8007ee0 <__ieee754_asin+0x2d8>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	4606      	mov	r6, r0
 8007c46:	460f      	mov	r7, r1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7f8 fcdc 	bl	8000608 <__aeabi_dmul>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4630      	mov	r0, r6
 8007c56:	4639      	mov	r1, r7
 8007c58:	f7f8 fb20 	bl	800029c <__adddf3>
 8007c5c:	e00a      	b.n	8007c74 <__ieee754_asin+0x6c>
 8007c5e:	ee10 2a10 	vmov	r2, s0
 8007c62:	462b      	mov	r3, r5
 8007c64:	4620      	mov	r0, r4
 8007c66:	4629      	mov	r1, r5
 8007c68:	f7f8 fb16 	bl	8000298 <__aeabi_dsub>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	f7f8 fdf4 	bl	800085c <__aeabi_ddiv>
 8007c74:	4604      	mov	r4, r0
 8007c76:	460d      	mov	r5, r1
 8007c78:	ec45 4b10 	vmov	d0, r4, r5
 8007c7c:	b007      	add	sp, #28
 8007c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c82:	4bb0      	ldr	r3, [pc, #704]	; (8007f44 <__ieee754_asin+0x33c>)
 8007c84:	429f      	cmp	r7, r3
 8007c86:	dc11      	bgt.n	8007cac <__ieee754_asin+0xa4>
 8007c88:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8007c8c:	f280 80ae 	bge.w	8007dec <__ieee754_asin+0x1e4>
 8007c90:	a395      	add	r3, pc, #596	; (adr r3, 8007ee8 <__ieee754_asin+0x2e0>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	ee10 0a10 	vmov	r0, s0
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	f7f8 fafe 	bl	800029c <__adddf3>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4ba9      	ldr	r3, [pc, #676]	; (8007f48 <__ieee754_asin+0x340>)
 8007ca4:	f7f8 ff40 	bl	8000b28 <__aeabi_dcmpgt>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d1e5      	bne.n	8007c78 <__ieee754_asin+0x70>
 8007cac:	ec45 4b10 	vmov	d0, r4, r5
 8007cb0:	f001 f9fa 	bl	80090a8 <fabs>
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	ec53 2b10 	vmov	r2, r3, d0
 8007cba:	49a3      	ldr	r1, [pc, #652]	; (8007f48 <__ieee754_asin+0x340>)
 8007cbc:	f7f8 faec 	bl	8000298 <__aeabi_dsub>
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4ba2      	ldr	r3, [pc, #648]	; (8007f4c <__ieee754_asin+0x344>)
 8007cc4:	f7f8 fca0 	bl	8000608 <__aeabi_dmul>
 8007cc8:	a389      	add	r3, pc, #548	; (adr r3, 8007ef0 <__ieee754_asin+0x2e8>)
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	4604      	mov	r4, r0
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	f7f8 fc99 	bl	8000608 <__aeabi_dmul>
 8007cd6:	a388      	add	r3, pc, #544	; (adr r3, 8007ef8 <__ieee754_asin+0x2f0>)
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f7f8 fade 	bl	800029c <__adddf3>
 8007ce0:	4622      	mov	r2, r4
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	f7f8 fc90 	bl	8000608 <__aeabi_dmul>
 8007ce8:	a385      	add	r3, pc, #532	; (adr r3, 8007f00 <__ieee754_asin+0x2f8>)
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f7f8 fad3 	bl	8000298 <__aeabi_dsub>
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	f7f8 fc87 	bl	8000608 <__aeabi_dmul>
 8007cfa:	a383      	add	r3, pc, #524	; (adr r3, 8007f08 <__ieee754_asin+0x300>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f7f8 facc 	bl	800029c <__adddf3>
 8007d04:	4622      	mov	r2, r4
 8007d06:	462b      	mov	r3, r5
 8007d08:	f7f8 fc7e 	bl	8000608 <__aeabi_dmul>
 8007d0c:	a380      	add	r3, pc, #512	; (adr r3, 8007f10 <__ieee754_asin+0x308>)
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	f7f8 fac1 	bl	8000298 <__aeabi_dsub>
 8007d16:	4622      	mov	r2, r4
 8007d18:	462b      	mov	r3, r5
 8007d1a:	f7f8 fc75 	bl	8000608 <__aeabi_dmul>
 8007d1e:	a37e      	add	r3, pc, #504	; (adr r3, 8007f18 <__ieee754_asin+0x310>)
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f7f8 faba 	bl	800029c <__adddf3>
 8007d28:	4622      	mov	r2, r4
 8007d2a:	462b      	mov	r3, r5
 8007d2c:	f7f8 fc6c 	bl	8000608 <__aeabi_dmul>
 8007d30:	a37b      	add	r3, pc, #492	; (adr r3, 8007f20 <__ieee754_asin+0x318>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	4680      	mov	r8, r0
 8007d38:	4689      	mov	r9, r1
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	f7f8 fc63 	bl	8000608 <__aeabi_dmul>
 8007d42:	a379      	add	r3, pc, #484	; (adr r3, 8007f28 <__ieee754_asin+0x320>)
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	f7f8 faa6 	bl	8000298 <__aeabi_dsub>
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	462b      	mov	r3, r5
 8007d50:	f7f8 fc5a 	bl	8000608 <__aeabi_dmul>
 8007d54:	a376      	add	r3, pc, #472	; (adr r3, 8007f30 <__ieee754_asin+0x328>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fa9f 	bl	800029c <__adddf3>
 8007d5e:	4622      	mov	r2, r4
 8007d60:	462b      	mov	r3, r5
 8007d62:	f7f8 fc51 	bl	8000608 <__aeabi_dmul>
 8007d66:	a374      	add	r3, pc, #464	; (adr r3, 8007f38 <__ieee754_asin+0x330>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	f7f8 fa94 	bl	8000298 <__aeabi_dsub>
 8007d70:	4622      	mov	r2, r4
 8007d72:	462b      	mov	r3, r5
 8007d74:	f7f8 fc48 	bl	8000608 <__aeabi_dmul>
 8007d78:	4b73      	ldr	r3, [pc, #460]	; (8007f48 <__ieee754_asin+0x340>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f7f8 fa8e 	bl	800029c <__adddf3>
 8007d80:	ec45 4b10 	vmov	d0, r4, r5
 8007d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d88:	f000 ff3c 	bl	8008c04 <__ieee754_sqrt>
 8007d8c:	4b70      	ldr	r3, [pc, #448]	; (8007f50 <__ieee754_asin+0x348>)
 8007d8e:	429f      	cmp	r7, r3
 8007d90:	ec5b ab10 	vmov	sl, fp, d0
 8007d94:	f340 80de 	ble.w	8007f54 <__ieee754_asin+0x34c>
 8007d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	4649      	mov	r1, r9
 8007da0:	f7f8 fd5c 	bl	800085c <__aeabi_ddiv>
 8007da4:	4652      	mov	r2, sl
 8007da6:	465b      	mov	r3, fp
 8007da8:	f7f8 fc2e 	bl	8000608 <__aeabi_dmul>
 8007dac:	4652      	mov	r2, sl
 8007dae:	465b      	mov	r3, fp
 8007db0:	f7f8 fa74 	bl	800029c <__adddf3>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	f7f8 fa70 	bl	800029c <__adddf3>
 8007dbc:	a348      	add	r3, pc, #288	; (adr r3, 8007ee0 <__ieee754_asin+0x2d8>)
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f7f8 fa69 	bl	8000298 <__aeabi_dsub>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	a143      	add	r1, pc, #268	; (adr r1, 8007ed8 <__ieee754_asin+0x2d0>)
 8007dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dd0:	f7f8 fa62 	bl	8000298 <__aeabi_dsub>
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	bfdc      	itt	le
 8007dda:	4602      	movle	r2, r0
 8007ddc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007de0:	4604      	mov	r4, r0
 8007de2:	460d      	mov	r5, r1
 8007de4:	bfdc      	itt	le
 8007de6:	4614      	movle	r4, r2
 8007de8:	461d      	movle	r5, r3
 8007dea:	e745      	b.n	8007c78 <__ieee754_asin+0x70>
 8007dec:	ee10 2a10 	vmov	r2, s0
 8007df0:	ee10 0a10 	vmov	r0, s0
 8007df4:	462b      	mov	r3, r5
 8007df6:	4629      	mov	r1, r5
 8007df8:	f7f8 fc06 	bl	8000608 <__aeabi_dmul>
 8007dfc:	a33c      	add	r3, pc, #240	; (adr r3, 8007ef0 <__ieee754_asin+0x2e8>)
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	4606      	mov	r6, r0
 8007e04:	460f      	mov	r7, r1
 8007e06:	f7f8 fbff 	bl	8000608 <__aeabi_dmul>
 8007e0a:	a33b      	add	r3, pc, #236	; (adr r3, 8007ef8 <__ieee754_asin+0x2f0>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 fa44 	bl	800029c <__adddf3>
 8007e14:	4632      	mov	r2, r6
 8007e16:	463b      	mov	r3, r7
 8007e18:	f7f8 fbf6 	bl	8000608 <__aeabi_dmul>
 8007e1c:	a338      	add	r3, pc, #224	; (adr r3, 8007f00 <__ieee754_asin+0x2f8>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f7f8 fa39 	bl	8000298 <__aeabi_dsub>
 8007e26:	4632      	mov	r2, r6
 8007e28:	463b      	mov	r3, r7
 8007e2a:	f7f8 fbed 	bl	8000608 <__aeabi_dmul>
 8007e2e:	a336      	add	r3, pc, #216	; (adr r3, 8007f08 <__ieee754_asin+0x300>)
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f7f8 fa32 	bl	800029c <__adddf3>
 8007e38:	4632      	mov	r2, r6
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	f7f8 fbe4 	bl	8000608 <__aeabi_dmul>
 8007e40:	a333      	add	r3, pc, #204	; (adr r3, 8007f10 <__ieee754_asin+0x308>)
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	f7f8 fa27 	bl	8000298 <__aeabi_dsub>
 8007e4a:	4632      	mov	r2, r6
 8007e4c:	463b      	mov	r3, r7
 8007e4e:	f7f8 fbdb 	bl	8000608 <__aeabi_dmul>
 8007e52:	a331      	add	r3, pc, #196	; (adr r3, 8007f18 <__ieee754_asin+0x310>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 fa20 	bl	800029c <__adddf3>
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	463b      	mov	r3, r7
 8007e60:	f7f8 fbd2 	bl	8000608 <__aeabi_dmul>
 8007e64:	a32e      	add	r3, pc, #184	; (adr r3, 8007f20 <__ieee754_asin+0x318>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	4689      	mov	r9, r1
 8007e6e:	4630      	mov	r0, r6
 8007e70:	4639      	mov	r1, r7
 8007e72:	f7f8 fbc9 	bl	8000608 <__aeabi_dmul>
 8007e76:	a32c      	add	r3, pc, #176	; (adr r3, 8007f28 <__ieee754_asin+0x320>)
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	f7f8 fa0c 	bl	8000298 <__aeabi_dsub>
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	f7f8 fbc0 	bl	8000608 <__aeabi_dmul>
 8007e88:	a329      	add	r3, pc, #164	; (adr r3, 8007f30 <__ieee754_asin+0x328>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 fa05 	bl	800029c <__adddf3>
 8007e92:	4632      	mov	r2, r6
 8007e94:	463b      	mov	r3, r7
 8007e96:	f7f8 fbb7 	bl	8000608 <__aeabi_dmul>
 8007e9a:	a327      	add	r3, pc, #156	; (adr r3, 8007f38 <__ieee754_asin+0x330>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f7f8 f9fa 	bl	8000298 <__aeabi_dsub>
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	f7f8 fbae 	bl	8000608 <__aeabi_dmul>
 8007eac:	2200      	movs	r2, #0
 8007eae:	4b26      	ldr	r3, [pc, #152]	; (8007f48 <__ieee754_asin+0x340>)
 8007eb0:	f7f8 f9f4 	bl	800029c <__adddf3>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4640      	mov	r0, r8
 8007eba:	4649      	mov	r1, r9
 8007ebc:	f7f8 fcce 	bl	800085c <__aeabi_ddiv>
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	f7f8 fba0 	bl	8000608 <__aeabi_dmul>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4620      	mov	r0, r4
 8007ece:	4629      	mov	r1, r5
 8007ed0:	e6c2      	b.n	8007c58 <__ieee754_asin+0x50>
 8007ed2:	bf00      	nop
 8007ed4:	f3af 8000 	nop.w
 8007ed8:	54442d18 	.word	0x54442d18
 8007edc:	3ff921fb 	.word	0x3ff921fb
 8007ee0:	33145c07 	.word	0x33145c07
 8007ee4:	3c91a626 	.word	0x3c91a626
 8007ee8:	8800759c 	.word	0x8800759c
 8007eec:	7e37e43c 	.word	0x7e37e43c
 8007ef0:	0dfdf709 	.word	0x0dfdf709
 8007ef4:	3f023de1 	.word	0x3f023de1
 8007ef8:	7501b288 	.word	0x7501b288
 8007efc:	3f49efe0 	.word	0x3f49efe0
 8007f00:	b5688f3b 	.word	0xb5688f3b
 8007f04:	3fa48228 	.word	0x3fa48228
 8007f08:	0e884455 	.word	0x0e884455
 8007f0c:	3fc9c155 	.word	0x3fc9c155
 8007f10:	03eb6f7d 	.word	0x03eb6f7d
 8007f14:	3fd4d612 	.word	0x3fd4d612
 8007f18:	55555555 	.word	0x55555555
 8007f1c:	3fc55555 	.word	0x3fc55555
 8007f20:	b12e9282 	.word	0xb12e9282
 8007f24:	3fb3b8c5 	.word	0x3fb3b8c5
 8007f28:	1b8d0159 	.word	0x1b8d0159
 8007f2c:	3fe6066c 	.word	0x3fe6066c
 8007f30:	9c598ac8 	.word	0x9c598ac8
 8007f34:	40002ae5 	.word	0x40002ae5
 8007f38:	1c8a2d4b 	.word	0x1c8a2d4b
 8007f3c:	40033a27 	.word	0x40033a27
 8007f40:	3fefffff 	.word	0x3fefffff
 8007f44:	3fdfffff 	.word	0x3fdfffff
 8007f48:	3ff00000 	.word	0x3ff00000
 8007f4c:	3fe00000 	.word	0x3fe00000
 8007f50:	3fef3332 	.word	0x3fef3332
 8007f54:	ee10 2a10 	vmov	r2, s0
 8007f58:	ee10 0a10 	vmov	r0, s0
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	4659      	mov	r1, fp
 8007f60:	f7f8 f99c 	bl	800029c <__adddf3>
 8007f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	4649      	mov	r1, r9
 8007f70:	f7f8 fc74 	bl	800085c <__aeabi_ddiv>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f7c:	f7f8 fb44 	bl	8000608 <__aeabi_dmul>
 8007f80:	2600      	movs	r6, #0
 8007f82:	4680      	mov	r8, r0
 8007f84:	4689      	mov	r9, r1
 8007f86:	4632      	mov	r2, r6
 8007f88:	465b      	mov	r3, fp
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	4659      	mov	r1, fp
 8007f8e:	f7f8 fb3b 	bl	8000608 <__aeabi_dmul>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4620      	mov	r0, r4
 8007f98:	4629      	mov	r1, r5
 8007f9a:	f7f8 f97d 	bl	8000298 <__aeabi_dsub>
 8007f9e:	4632      	mov	r2, r6
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	460d      	mov	r5, r1
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	4650      	mov	r0, sl
 8007fa8:	4659      	mov	r1, fp
 8007faa:	f7f8 f977 	bl	800029c <__adddf3>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	f7f8 fc51 	bl	800085c <__aeabi_ddiv>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	f7f8 f96d 	bl	800029c <__adddf3>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	a114      	add	r1, pc, #80	; (adr r1, 8008018 <__ieee754_asin+0x410>)
 8007fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fcc:	f7f8 f964 	bl	8000298 <__aeabi_dsub>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	f7f8 f95e 	bl	8000298 <__aeabi_dsub>
 8007fdc:	465f      	mov	r7, fp
 8007fde:	4604      	mov	r4, r0
 8007fe0:	460d      	mov	r5, r1
 8007fe2:	4632      	mov	r2, r6
 8007fe4:	465b      	mov	r3, fp
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4639      	mov	r1, r7
 8007fea:	f7f8 f957 	bl	800029c <__adddf3>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	a10b      	add	r1, pc, #44	; (adr r1, 8008020 <__ieee754_asin+0x418>)
 8007ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ff8:	f7f8 f94e 	bl	8000298 <__aeabi_dsub>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4620      	mov	r0, r4
 8008002:	4629      	mov	r1, r5
 8008004:	f7f8 f948 	bl	8000298 <__aeabi_dsub>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	a104      	add	r1, pc, #16	; (adr r1, 8008020 <__ieee754_asin+0x418>)
 800800e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008012:	e6dd      	b.n	8007dd0 <__ieee754_asin+0x1c8>
 8008014:	f3af 8000 	nop.w
 8008018:	33145c07 	.word	0x33145c07
 800801c:	3c91a626 	.word	0x3c91a626
 8008020:	54442d18 	.word	0x54442d18
 8008024:	3fe921fb 	.word	0x3fe921fb

08008028 <__ieee754_atan2>:
 8008028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800802c:	ec57 6b11 	vmov	r6, r7, d1
 8008030:	4273      	negs	r3, r6
 8008032:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008036:	4333      	orrs	r3, r6
 8008038:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80081e0 <__ieee754_atan2+0x1b8>
 800803c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008040:	4573      	cmp	r3, lr
 8008042:	ec51 0b10 	vmov	r0, r1, d0
 8008046:	ee11 8a10 	vmov	r8, s2
 800804a:	d80a      	bhi.n	8008062 <__ieee754_atan2+0x3a>
 800804c:	4244      	negs	r4, r0
 800804e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008052:	4304      	orrs	r4, r0
 8008054:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008058:	4574      	cmp	r4, lr
 800805a:	468c      	mov	ip, r1
 800805c:	ee10 9a10 	vmov	r9, s0
 8008060:	d907      	bls.n	8008072 <__ieee754_atan2+0x4a>
 8008062:	4632      	mov	r2, r6
 8008064:	463b      	mov	r3, r7
 8008066:	f7f8 f919 	bl	800029c <__adddf3>
 800806a:	ec41 0b10 	vmov	d0, r0, r1
 800806e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008072:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008076:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800807a:	4334      	orrs	r4, r6
 800807c:	d103      	bne.n	8008086 <__ieee754_atan2+0x5e>
 800807e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008082:	f000 be71 	b.w	8008d68 <atan>
 8008086:	17bc      	asrs	r4, r7, #30
 8008088:	f004 0402 	and.w	r4, r4, #2
 800808c:	ea53 0909 	orrs.w	r9, r3, r9
 8008090:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008094:	d107      	bne.n	80080a6 <__ieee754_atan2+0x7e>
 8008096:	2c02      	cmp	r4, #2
 8008098:	d073      	beq.n	8008182 <__ieee754_atan2+0x15a>
 800809a:	2c03      	cmp	r4, #3
 800809c:	d1e5      	bne.n	800806a <__ieee754_atan2+0x42>
 800809e:	a13e      	add	r1, pc, #248	; (adr r1, 8008198 <__ieee754_atan2+0x170>)
 80080a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080a4:	e7e1      	b.n	800806a <__ieee754_atan2+0x42>
 80080a6:	ea52 0808 	orrs.w	r8, r2, r8
 80080aa:	d106      	bne.n	80080ba <__ieee754_atan2+0x92>
 80080ac:	f1bc 0f00 	cmp.w	ip, #0
 80080b0:	da6b      	bge.n	800818a <__ieee754_atan2+0x162>
 80080b2:	a13b      	add	r1, pc, #236	; (adr r1, 80081a0 <__ieee754_atan2+0x178>)
 80080b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080b8:	e7d7      	b.n	800806a <__ieee754_atan2+0x42>
 80080ba:	4572      	cmp	r2, lr
 80080bc:	d120      	bne.n	8008100 <__ieee754_atan2+0xd8>
 80080be:	4293      	cmp	r3, r2
 80080c0:	d111      	bne.n	80080e6 <__ieee754_atan2+0xbe>
 80080c2:	2c02      	cmp	r4, #2
 80080c4:	d007      	beq.n	80080d6 <__ieee754_atan2+0xae>
 80080c6:	2c03      	cmp	r4, #3
 80080c8:	d009      	beq.n	80080de <__ieee754_atan2+0xb6>
 80080ca:	2c01      	cmp	r4, #1
 80080cc:	d155      	bne.n	800817a <__ieee754_atan2+0x152>
 80080ce:	a136      	add	r1, pc, #216	; (adr r1, 80081a8 <__ieee754_atan2+0x180>)
 80080d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d4:	e7c9      	b.n	800806a <__ieee754_atan2+0x42>
 80080d6:	a136      	add	r1, pc, #216	; (adr r1, 80081b0 <__ieee754_atan2+0x188>)
 80080d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080dc:	e7c5      	b.n	800806a <__ieee754_atan2+0x42>
 80080de:	a136      	add	r1, pc, #216	; (adr r1, 80081b8 <__ieee754_atan2+0x190>)
 80080e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e4:	e7c1      	b.n	800806a <__ieee754_atan2+0x42>
 80080e6:	2c02      	cmp	r4, #2
 80080e8:	d04b      	beq.n	8008182 <__ieee754_atan2+0x15a>
 80080ea:	2c03      	cmp	r4, #3
 80080ec:	d0d7      	beq.n	800809e <__ieee754_atan2+0x76>
 80080ee:	2c01      	cmp	r4, #1
 80080f0:	f04f 0000 	mov.w	r0, #0
 80080f4:	d102      	bne.n	80080fc <__ieee754_atan2+0xd4>
 80080f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80080fa:	e7b6      	b.n	800806a <__ieee754_atan2+0x42>
 80080fc:	2100      	movs	r1, #0
 80080fe:	e7b4      	b.n	800806a <__ieee754_atan2+0x42>
 8008100:	4573      	cmp	r3, lr
 8008102:	d0d3      	beq.n	80080ac <__ieee754_atan2+0x84>
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	151b      	asrs	r3, r3, #20
 8008108:	2b3c      	cmp	r3, #60	; 0x3c
 800810a:	dc1e      	bgt.n	800814a <__ieee754_atan2+0x122>
 800810c:	2f00      	cmp	r7, #0
 800810e:	da01      	bge.n	8008114 <__ieee754_atan2+0xec>
 8008110:	333c      	adds	r3, #60	; 0x3c
 8008112:	db1e      	blt.n	8008152 <__ieee754_atan2+0x12a>
 8008114:	4632      	mov	r2, r6
 8008116:	463b      	mov	r3, r7
 8008118:	f7f8 fba0 	bl	800085c <__aeabi_ddiv>
 800811c:	ec41 0b10 	vmov	d0, r0, r1
 8008120:	f000 ffc2 	bl	80090a8 <fabs>
 8008124:	f000 fe20 	bl	8008d68 <atan>
 8008128:	ec51 0b10 	vmov	r0, r1, d0
 800812c:	2c01      	cmp	r4, #1
 800812e:	d013      	beq.n	8008158 <__ieee754_atan2+0x130>
 8008130:	2c02      	cmp	r4, #2
 8008132:	d015      	beq.n	8008160 <__ieee754_atan2+0x138>
 8008134:	2c00      	cmp	r4, #0
 8008136:	d098      	beq.n	800806a <__ieee754_atan2+0x42>
 8008138:	a321      	add	r3, pc, #132	; (adr r3, 80081c0 <__ieee754_atan2+0x198>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f8 f8ab 	bl	8000298 <__aeabi_dsub>
 8008142:	a321      	add	r3, pc, #132	; (adr r3, 80081c8 <__ieee754_atan2+0x1a0>)
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	e014      	b.n	8008174 <__ieee754_atan2+0x14c>
 800814a:	a121      	add	r1, pc, #132	; (adr r1, 80081d0 <__ieee754_atan2+0x1a8>)
 800814c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008150:	e7ec      	b.n	800812c <__ieee754_atan2+0x104>
 8008152:	2000      	movs	r0, #0
 8008154:	2100      	movs	r1, #0
 8008156:	e7e9      	b.n	800812c <__ieee754_atan2+0x104>
 8008158:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800815c:	4619      	mov	r1, r3
 800815e:	e784      	b.n	800806a <__ieee754_atan2+0x42>
 8008160:	a317      	add	r3, pc, #92	; (adr r3, 80081c0 <__ieee754_atan2+0x198>)
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f7f8 f897 	bl	8000298 <__aeabi_dsub>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	a116      	add	r1, pc, #88	; (adr r1, 80081c8 <__ieee754_atan2+0x1a0>)
 8008170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008174:	f7f8 f890 	bl	8000298 <__aeabi_dsub>
 8008178:	e777      	b.n	800806a <__ieee754_atan2+0x42>
 800817a:	a117      	add	r1, pc, #92	; (adr r1, 80081d8 <__ieee754_atan2+0x1b0>)
 800817c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008180:	e773      	b.n	800806a <__ieee754_atan2+0x42>
 8008182:	a111      	add	r1, pc, #68	; (adr r1, 80081c8 <__ieee754_atan2+0x1a0>)
 8008184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008188:	e76f      	b.n	800806a <__ieee754_atan2+0x42>
 800818a:	a111      	add	r1, pc, #68	; (adr r1, 80081d0 <__ieee754_atan2+0x1a8>)
 800818c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008190:	e76b      	b.n	800806a <__ieee754_atan2+0x42>
 8008192:	bf00      	nop
 8008194:	f3af 8000 	nop.w
 8008198:	54442d18 	.word	0x54442d18
 800819c:	c00921fb 	.word	0xc00921fb
 80081a0:	54442d18 	.word	0x54442d18
 80081a4:	bff921fb 	.word	0xbff921fb
 80081a8:	54442d18 	.word	0x54442d18
 80081ac:	bfe921fb 	.word	0xbfe921fb
 80081b0:	7f3321d2 	.word	0x7f3321d2
 80081b4:	4002d97c 	.word	0x4002d97c
 80081b8:	7f3321d2 	.word	0x7f3321d2
 80081bc:	c002d97c 	.word	0xc002d97c
 80081c0:	33145c07 	.word	0x33145c07
 80081c4:	3ca1a626 	.word	0x3ca1a626
 80081c8:	54442d18 	.word	0x54442d18
 80081cc:	400921fb 	.word	0x400921fb
 80081d0:	54442d18 	.word	0x54442d18
 80081d4:	3ff921fb 	.word	0x3ff921fb
 80081d8:	54442d18 	.word	0x54442d18
 80081dc:	3fe921fb 	.word	0x3fe921fb
 80081e0:	7ff00000 	.word	0x7ff00000
 80081e4:	00000000 	.word	0x00000000

080081e8 <__ieee754_pow>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	b091      	sub	sp, #68	; 0x44
 80081ee:	ed8d 1b00 	vstr	d1, [sp]
 80081f2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80081f6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80081fa:	ea58 0302 	orrs.w	r3, r8, r2
 80081fe:	ec57 6b10 	vmov	r6, r7, d0
 8008202:	f000 84be 	beq.w	8008b82 <__ieee754_pow+0x99a>
 8008206:	4b7a      	ldr	r3, [pc, #488]	; (80083f0 <__ieee754_pow+0x208>)
 8008208:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800820c:	429c      	cmp	r4, r3
 800820e:	463d      	mov	r5, r7
 8008210:	ee10 aa10 	vmov	sl, s0
 8008214:	dc09      	bgt.n	800822a <__ieee754_pow+0x42>
 8008216:	d103      	bne.n	8008220 <__ieee754_pow+0x38>
 8008218:	b93e      	cbnz	r6, 800822a <__ieee754_pow+0x42>
 800821a:	45a0      	cmp	r8, r4
 800821c:	dc0d      	bgt.n	800823a <__ieee754_pow+0x52>
 800821e:	e001      	b.n	8008224 <__ieee754_pow+0x3c>
 8008220:	4598      	cmp	r8, r3
 8008222:	dc02      	bgt.n	800822a <__ieee754_pow+0x42>
 8008224:	4598      	cmp	r8, r3
 8008226:	d10e      	bne.n	8008246 <__ieee754_pow+0x5e>
 8008228:	b16a      	cbz	r2, 8008246 <__ieee754_pow+0x5e>
 800822a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800822e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008232:	ea54 030a 	orrs.w	r3, r4, sl
 8008236:	f000 84a4 	beq.w	8008b82 <__ieee754_pow+0x99a>
 800823a:	486e      	ldr	r0, [pc, #440]	; (80083f4 <__ieee754_pow+0x20c>)
 800823c:	b011      	add	sp, #68	; 0x44
 800823e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008242:	f000 bf45 	b.w	80090d0 <nan>
 8008246:	2d00      	cmp	r5, #0
 8008248:	da53      	bge.n	80082f2 <__ieee754_pow+0x10a>
 800824a:	4b6b      	ldr	r3, [pc, #428]	; (80083f8 <__ieee754_pow+0x210>)
 800824c:	4598      	cmp	r8, r3
 800824e:	dc4d      	bgt.n	80082ec <__ieee754_pow+0x104>
 8008250:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008254:	4598      	cmp	r8, r3
 8008256:	dd4c      	ble.n	80082f2 <__ieee754_pow+0x10a>
 8008258:	ea4f 5328 	mov.w	r3, r8, asr #20
 800825c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008260:	2b14      	cmp	r3, #20
 8008262:	dd26      	ble.n	80082b2 <__ieee754_pow+0xca>
 8008264:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008268:	fa22 f103 	lsr.w	r1, r2, r3
 800826c:	fa01 f303 	lsl.w	r3, r1, r3
 8008270:	4293      	cmp	r3, r2
 8008272:	d13e      	bne.n	80082f2 <__ieee754_pow+0x10a>
 8008274:	f001 0101 	and.w	r1, r1, #1
 8008278:	f1c1 0b02 	rsb	fp, r1, #2
 800827c:	2a00      	cmp	r2, #0
 800827e:	d15b      	bne.n	8008338 <__ieee754_pow+0x150>
 8008280:	4b5b      	ldr	r3, [pc, #364]	; (80083f0 <__ieee754_pow+0x208>)
 8008282:	4598      	cmp	r8, r3
 8008284:	d124      	bne.n	80082d0 <__ieee754_pow+0xe8>
 8008286:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800828a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800828e:	ea53 030a 	orrs.w	r3, r3, sl
 8008292:	f000 8476 	beq.w	8008b82 <__ieee754_pow+0x99a>
 8008296:	4b59      	ldr	r3, [pc, #356]	; (80083fc <__ieee754_pow+0x214>)
 8008298:	429c      	cmp	r4, r3
 800829a:	dd2d      	ble.n	80082f8 <__ieee754_pow+0x110>
 800829c:	f1b9 0f00 	cmp.w	r9, #0
 80082a0:	f280 8473 	bge.w	8008b8a <__ieee754_pow+0x9a2>
 80082a4:	2000      	movs	r0, #0
 80082a6:	2100      	movs	r1, #0
 80082a8:	ec41 0b10 	vmov	d0, r0, r1
 80082ac:	b011      	add	sp, #68	; 0x44
 80082ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	d13e      	bne.n	8008334 <__ieee754_pow+0x14c>
 80082b6:	f1c3 0314 	rsb	r3, r3, #20
 80082ba:	fa48 f103 	asr.w	r1, r8, r3
 80082be:	fa01 f303 	lsl.w	r3, r1, r3
 80082c2:	4543      	cmp	r3, r8
 80082c4:	f040 8469 	bne.w	8008b9a <__ieee754_pow+0x9b2>
 80082c8:	f001 0101 	and.w	r1, r1, #1
 80082cc:	f1c1 0b02 	rsb	fp, r1, #2
 80082d0:	4b4b      	ldr	r3, [pc, #300]	; (8008400 <__ieee754_pow+0x218>)
 80082d2:	4598      	cmp	r8, r3
 80082d4:	d118      	bne.n	8008308 <__ieee754_pow+0x120>
 80082d6:	f1b9 0f00 	cmp.w	r9, #0
 80082da:	f280 845a 	bge.w	8008b92 <__ieee754_pow+0x9aa>
 80082de:	4948      	ldr	r1, [pc, #288]	; (8008400 <__ieee754_pow+0x218>)
 80082e0:	4632      	mov	r2, r6
 80082e2:	463b      	mov	r3, r7
 80082e4:	2000      	movs	r0, #0
 80082e6:	f7f8 fab9 	bl	800085c <__aeabi_ddiv>
 80082ea:	e7dd      	b.n	80082a8 <__ieee754_pow+0xc0>
 80082ec:	f04f 0b02 	mov.w	fp, #2
 80082f0:	e7c4      	b.n	800827c <__ieee754_pow+0x94>
 80082f2:	f04f 0b00 	mov.w	fp, #0
 80082f6:	e7c1      	b.n	800827c <__ieee754_pow+0x94>
 80082f8:	f1b9 0f00 	cmp.w	r9, #0
 80082fc:	dad2      	bge.n	80082a4 <__ieee754_pow+0xbc>
 80082fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008302:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008306:	e7cf      	b.n	80082a8 <__ieee754_pow+0xc0>
 8008308:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800830c:	d106      	bne.n	800831c <__ieee754_pow+0x134>
 800830e:	4632      	mov	r2, r6
 8008310:	463b      	mov	r3, r7
 8008312:	4610      	mov	r0, r2
 8008314:	4619      	mov	r1, r3
 8008316:	f7f8 f977 	bl	8000608 <__aeabi_dmul>
 800831a:	e7c5      	b.n	80082a8 <__ieee754_pow+0xc0>
 800831c:	4b39      	ldr	r3, [pc, #228]	; (8008404 <__ieee754_pow+0x21c>)
 800831e:	4599      	cmp	r9, r3
 8008320:	d10a      	bne.n	8008338 <__ieee754_pow+0x150>
 8008322:	2d00      	cmp	r5, #0
 8008324:	db08      	blt.n	8008338 <__ieee754_pow+0x150>
 8008326:	ec47 6b10 	vmov	d0, r6, r7
 800832a:	b011      	add	sp, #68	; 0x44
 800832c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	f000 bc68 	b.w	8008c04 <__ieee754_sqrt>
 8008334:	f04f 0b00 	mov.w	fp, #0
 8008338:	ec47 6b10 	vmov	d0, r6, r7
 800833c:	f000 feb4 	bl	80090a8 <fabs>
 8008340:	ec51 0b10 	vmov	r0, r1, d0
 8008344:	f1ba 0f00 	cmp.w	sl, #0
 8008348:	d127      	bne.n	800839a <__ieee754_pow+0x1b2>
 800834a:	b124      	cbz	r4, 8008356 <__ieee754_pow+0x16e>
 800834c:	4b2c      	ldr	r3, [pc, #176]	; (8008400 <__ieee754_pow+0x218>)
 800834e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008352:	429a      	cmp	r2, r3
 8008354:	d121      	bne.n	800839a <__ieee754_pow+0x1b2>
 8008356:	f1b9 0f00 	cmp.w	r9, #0
 800835a:	da05      	bge.n	8008368 <__ieee754_pow+0x180>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	2000      	movs	r0, #0
 8008362:	4927      	ldr	r1, [pc, #156]	; (8008400 <__ieee754_pow+0x218>)
 8008364:	f7f8 fa7a 	bl	800085c <__aeabi_ddiv>
 8008368:	2d00      	cmp	r5, #0
 800836a:	da9d      	bge.n	80082a8 <__ieee754_pow+0xc0>
 800836c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008370:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008374:	ea54 030b 	orrs.w	r3, r4, fp
 8008378:	d108      	bne.n	800838c <__ieee754_pow+0x1a4>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4610      	mov	r0, r2
 8008380:	4619      	mov	r1, r3
 8008382:	f7f7 ff89 	bl	8000298 <__aeabi_dsub>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	e7ac      	b.n	80082e6 <__ieee754_pow+0xfe>
 800838c:	f1bb 0f01 	cmp.w	fp, #1
 8008390:	d18a      	bne.n	80082a8 <__ieee754_pow+0xc0>
 8008392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008396:	4619      	mov	r1, r3
 8008398:	e786      	b.n	80082a8 <__ieee754_pow+0xc0>
 800839a:	0fed      	lsrs	r5, r5, #31
 800839c:	1e6b      	subs	r3, r5, #1
 800839e:	930d      	str	r3, [sp, #52]	; 0x34
 80083a0:	ea5b 0303 	orrs.w	r3, fp, r3
 80083a4:	d102      	bne.n	80083ac <__ieee754_pow+0x1c4>
 80083a6:	4632      	mov	r2, r6
 80083a8:	463b      	mov	r3, r7
 80083aa:	e7e8      	b.n	800837e <__ieee754_pow+0x196>
 80083ac:	4b16      	ldr	r3, [pc, #88]	; (8008408 <__ieee754_pow+0x220>)
 80083ae:	4598      	cmp	r8, r3
 80083b0:	f340 80fe 	ble.w	80085b0 <__ieee754_pow+0x3c8>
 80083b4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80083b8:	4598      	cmp	r8, r3
 80083ba:	dd0a      	ble.n	80083d2 <__ieee754_pow+0x1ea>
 80083bc:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <__ieee754_pow+0x214>)
 80083be:	429c      	cmp	r4, r3
 80083c0:	dc0d      	bgt.n	80083de <__ieee754_pow+0x1f6>
 80083c2:	f1b9 0f00 	cmp.w	r9, #0
 80083c6:	f6bf af6d 	bge.w	80082a4 <__ieee754_pow+0xbc>
 80083ca:	a307      	add	r3, pc, #28	; (adr r3, 80083e8 <__ieee754_pow+0x200>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	e79f      	b.n	8008312 <__ieee754_pow+0x12a>
 80083d2:	4b0e      	ldr	r3, [pc, #56]	; (800840c <__ieee754_pow+0x224>)
 80083d4:	429c      	cmp	r4, r3
 80083d6:	ddf4      	ble.n	80083c2 <__ieee754_pow+0x1da>
 80083d8:	4b09      	ldr	r3, [pc, #36]	; (8008400 <__ieee754_pow+0x218>)
 80083da:	429c      	cmp	r4, r3
 80083dc:	dd18      	ble.n	8008410 <__ieee754_pow+0x228>
 80083de:	f1b9 0f00 	cmp.w	r9, #0
 80083e2:	dcf2      	bgt.n	80083ca <__ieee754_pow+0x1e2>
 80083e4:	e75e      	b.n	80082a4 <__ieee754_pow+0xbc>
 80083e6:	bf00      	nop
 80083e8:	8800759c 	.word	0x8800759c
 80083ec:	7e37e43c 	.word	0x7e37e43c
 80083f0:	7ff00000 	.word	0x7ff00000
 80083f4:	08009769 	.word	0x08009769
 80083f8:	433fffff 	.word	0x433fffff
 80083fc:	3fefffff 	.word	0x3fefffff
 8008400:	3ff00000 	.word	0x3ff00000
 8008404:	3fe00000 	.word	0x3fe00000
 8008408:	41e00000 	.word	0x41e00000
 800840c:	3feffffe 	.word	0x3feffffe
 8008410:	2200      	movs	r2, #0
 8008412:	4b63      	ldr	r3, [pc, #396]	; (80085a0 <__ieee754_pow+0x3b8>)
 8008414:	f7f7 ff40 	bl	8000298 <__aeabi_dsub>
 8008418:	a355      	add	r3, pc, #340	; (adr r3, 8008570 <__ieee754_pow+0x388>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	4604      	mov	r4, r0
 8008420:	460d      	mov	r5, r1
 8008422:	f7f8 f8f1 	bl	8000608 <__aeabi_dmul>
 8008426:	a354      	add	r3, pc, #336	; (adr r3, 8008578 <__ieee754_pow+0x390>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	4606      	mov	r6, r0
 800842e:	460f      	mov	r7, r1
 8008430:	4620      	mov	r0, r4
 8008432:	4629      	mov	r1, r5
 8008434:	f7f8 f8e8 	bl	8000608 <__aeabi_dmul>
 8008438:	2200      	movs	r2, #0
 800843a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800843e:	4b59      	ldr	r3, [pc, #356]	; (80085a4 <__ieee754_pow+0x3bc>)
 8008440:	4620      	mov	r0, r4
 8008442:	4629      	mov	r1, r5
 8008444:	f7f8 f8e0 	bl	8000608 <__aeabi_dmul>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	a14c      	add	r1, pc, #304	; (adr r1, 8008580 <__ieee754_pow+0x398>)
 800844e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008452:	f7f7 ff21 	bl	8000298 <__aeabi_dsub>
 8008456:	4622      	mov	r2, r4
 8008458:	462b      	mov	r3, r5
 800845a:	f7f8 f8d5 	bl	8000608 <__aeabi_dmul>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	2000      	movs	r0, #0
 8008464:	4950      	ldr	r1, [pc, #320]	; (80085a8 <__ieee754_pow+0x3c0>)
 8008466:	f7f7 ff17 	bl	8000298 <__aeabi_dsub>
 800846a:	4622      	mov	r2, r4
 800846c:	462b      	mov	r3, r5
 800846e:	4680      	mov	r8, r0
 8008470:	4689      	mov	r9, r1
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	f7f8 f8c7 	bl	8000608 <__aeabi_dmul>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4640      	mov	r0, r8
 8008480:	4649      	mov	r1, r9
 8008482:	f7f8 f8c1 	bl	8000608 <__aeabi_dmul>
 8008486:	a340      	add	r3, pc, #256	; (adr r3, 8008588 <__ieee754_pow+0x3a0>)
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	f7f8 f8bc 	bl	8000608 <__aeabi_dmul>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008498:	f7f7 fefe 	bl	8000298 <__aeabi_dsub>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4604      	mov	r4, r0
 80084a2:	460d      	mov	r5, r1
 80084a4:	4630      	mov	r0, r6
 80084a6:	4639      	mov	r1, r7
 80084a8:	f7f7 fef8 	bl	800029c <__adddf3>
 80084ac:	2000      	movs	r0, #0
 80084ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084b2:	4632      	mov	r2, r6
 80084b4:	463b      	mov	r3, r7
 80084b6:	f7f7 feef 	bl	8000298 <__aeabi_dsub>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4620      	mov	r0, r4
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7f7 fee9 	bl	8000298 <__aeabi_dsub>
 80084c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084c8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80084cc:	4313      	orrs	r3, r2
 80084ce:	4606      	mov	r6, r0
 80084d0:	460f      	mov	r7, r1
 80084d2:	f040 81eb 	bne.w	80088ac <__ieee754_pow+0x6c4>
 80084d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008590 <__ieee754_pow+0x3a8>
 80084da:	e9dd 4500 	ldrd	r4, r5, [sp]
 80084de:	2400      	movs	r4, #0
 80084e0:	4622      	mov	r2, r4
 80084e2:	462b      	mov	r3, r5
 80084e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084ec:	f7f7 fed4 	bl	8000298 <__aeabi_dsub>
 80084f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084f4:	f7f8 f888 	bl	8000608 <__aeabi_dmul>
 80084f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084fc:	4680      	mov	r8, r0
 80084fe:	4689      	mov	r9, r1
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f8 f880 	bl	8000608 <__aeabi_dmul>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4640      	mov	r0, r8
 800850e:	4649      	mov	r1, r9
 8008510:	f7f7 fec4 	bl	800029c <__adddf3>
 8008514:	4622      	mov	r2, r4
 8008516:	462b      	mov	r3, r5
 8008518:	4680      	mov	r8, r0
 800851a:	4689      	mov	r9, r1
 800851c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008520:	f7f8 f872 	bl	8000608 <__aeabi_dmul>
 8008524:	460b      	mov	r3, r1
 8008526:	4604      	mov	r4, r0
 8008528:	460d      	mov	r5, r1
 800852a:	4602      	mov	r2, r0
 800852c:	4649      	mov	r1, r9
 800852e:	4640      	mov	r0, r8
 8008530:	e9cd 4500 	strd	r4, r5, [sp]
 8008534:	f7f7 feb2 	bl	800029c <__adddf3>
 8008538:	4b1c      	ldr	r3, [pc, #112]	; (80085ac <__ieee754_pow+0x3c4>)
 800853a:	4299      	cmp	r1, r3
 800853c:	4606      	mov	r6, r0
 800853e:	460f      	mov	r7, r1
 8008540:	468b      	mov	fp, r1
 8008542:	f340 82f7 	ble.w	8008b34 <__ieee754_pow+0x94c>
 8008546:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800854a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800854e:	4303      	orrs	r3, r0
 8008550:	f000 81ea 	beq.w	8008928 <__ieee754_pow+0x740>
 8008554:	a310      	add	r3, pc, #64	; (adr r3, 8008598 <__ieee754_pow+0x3b0>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800855e:	f7f8 f853 	bl	8000608 <__aeabi_dmul>
 8008562:	a30d      	add	r3, pc, #52	; (adr r3, 8008598 <__ieee754_pow+0x3b0>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	e6d5      	b.n	8008316 <__ieee754_pow+0x12e>
 800856a:	bf00      	nop
 800856c:	f3af 8000 	nop.w
 8008570:	60000000 	.word	0x60000000
 8008574:	3ff71547 	.word	0x3ff71547
 8008578:	f85ddf44 	.word	0xf85ddf44
 800857c:	3e54ae0b 	.word	0x3e54ae0b
 8008580:	55555555 	.word	0x55555555
 8008584:	3fd55555 	.word	0x3fd55555
 8008588:	652b82fe 	.word	0x652b82fe
 800858c:	3ff71547 	.word	0x3ff71547
 8008590:	00000000 	.word	0x00000000
 8008594:	bff00000 	.word	0xbff00000
 8008598:	8800759c 	.word	0x8800759c
 800859c:	7e37e43c 	.word	0x7e37e43c
 80085a0:	3ff00000 	.word	0x3ff00000
 80085a4:	3fd00000 	.word	0x3fd00000
 80085a8:	3fe00000 	.word	0x3fe00000
 80085ac:	408fffff 	.word	0x408fffff
 80085b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	da05      	bge.n	80085c6 <__ieee754_pow+0x3de>
 80085ba:	4bd3      	ldr	r3, [pc, #844]	; (8008908 <__ieee754_pow+0x720>)
 80085bc:	f7f8 f824 	bl	8000608 <__aeabi_dmul>
 80085c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80085c4:	460c      	mov	r4, r1
 80085c6:	1523      	asrs	r3, r4, #20
 80085c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80085cc:	4413      	add	r3, r2
 80085ce:	9309      	str	r3, [sp, #36]	; 0x24
 80085d0:	4bce      	ldr	r3, [pc, #824]	; (800890c <__ieee754_pow+0x724>)
 80085d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80085d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80085da:	429c      	cmp	r4, r3
 80085dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80085e0:	dd08      	ble.n	80085f4 <__ieee754_pow+0x40c>
 80085e2:	4bcb      	ldr	r3, [pc, #812]	; (8008910 <__ieee754_pow+0x728>)
 80085e4:	429c      	cmp	r4, r3
 80085e6:	f340 815e 	ble.w	80088a6 <__ieee754_pow+0x6be>
 80085ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ec:	3301      	adds	r3, #1
 80085ee:	9309      	str	r3, [sp, #36]	; 0x24
 80085f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80085f4:	f04f 0a00 	mov.w	sl, #0
 80085f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80085fc:	930c      	str	r3, [sp, #48]	; 0x30
 80085fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008600:	4bc4      	ldr	r3, [pc, #784]	; (8008914 <__ieee754_pow+0x72c>)
 8008602:	4413      	add	r3, r2
 8008604:	ed93 7b00 	vldr	d7, [r3]
 8008608:	4629      	mov	r1, r5
 800860a:	ec53 2b17 	vmov	r2, r3, d7
 800860e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008612:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008616:	f7f7 fe3f 	bl	8000298 <__aeabi_dsub>
 800861a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800861e:	4606      	mov	r6, r0
 8008620:	460f      	mov	r7, r1
 8008622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008626:	f7f7 fe39 	bl	800029c <__adddf3>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	2000      	movs	r0, #0
 8008630:	49b9      	ldr	r1, [pc, #740]	; (8008918 <__ieee754_pow+0x730>)
 8008632:	f7f8 f913 	bl	800085c <__aeabi_ddiv>
 8008636:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	4630      	mov	r0, r6
 8008640:	4639      	mov	r1, r7
 8008642:	f7f7 ffe1 	bl	8000608 <__aeabi_dmul>
 8008646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800864a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800864e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008652:	2300      	movs	r3, #0
 8008654:	9302      	str	r3, [sp, #8]
 8008656:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800865a:	106d      	asrs	r5, r5, #1
 800865c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008660:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008664:	2200      	movs	r2, #0
 8008666:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800866a:	4640      	mov	r0, r8
 800866c:	4649      	mov	r1, r9
 800866e:	4614      	mov	r4, r2
 8008670:	461d      	mov	r5, r3
 8008672:	f7f7 ffc9 	bl	8000608 <__aeabi_dmul>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4630      	mov	r0, r6
 800867c:	4639      	mov	r1, r7
 800867e:	f7f7 fe0b 	bl	8000298 <__aeabi_dsub>
 8008682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008686:	4606      	mov	r6, r0
 8008688:	460f      	mov	r7, r1
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	f7f7 fe03 	bl	8000298 <__aeabi_dsub>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800869a:	f7f7 fdfd 	bl	8000298 <__aeabi_dsub>
 800869e:	4642      	mov	r2, r8
 80086a0:	464b      	mov	r3, r9
 80086a2:	f7f7 ffb1 	bl	8000608 <__aeabi_dmul>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4630      	mov	r0, r6
 80086ac:	4639      	mov	r1, r7
 80086ae:	f7f7 fdf3 	bl	8000298 <__aeabi_dsub>
 80086b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80086b6:	f7f7 ffa7 	bl	8000608 <__aeabi_dmul>
 80086ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086c2:	4610      	mov	r0, r2
 80086c4:	4619      	mov	r1, r3
 80086c6:	f7f7 ff9f 	bl	8000608 <__aeabi_dmul>
 80086ca:	a37b      	add	r3, pc, #492	; (adr r3, 80088b8 <__ieee754_pow+0x6d0>)
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	4604      	mov	r4, r0
 80086d2:	460d      	mov	r5, r1
 80086d4:	f7f7 ff98 	bl	8000608 <__aeabi_dmul>
 80086d8:	a379      	add	r3, pc, #484	; (adr r3, 80088c0 <__ieee754_pow+0x6d8>)
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	f7f7 fddd 	bl	800029c <__adddf3>
 80086e2:	4622      	mov	r2, r4
 80086e4:	462b      	mov	r3, r5
 80086e6:	f7f7 ff8f 	bl	8000608 <__aeabi_dmul>
 80086ea:	a377      	add	r3, pc, #476	; (adr r3, 80088c8 <__ieee754_pow+0x6e0>)
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	f7f7 fdd4 	bl	800029c <__adddf3>
 80086f4:	4622      	mov	r2, r4
 80086f6:	462b      	mov	r3, r5
 80086f8:	f7f7 ff86 	bl	8000608 <__aeabi_dmul>
 80086fc:	a374      	add	r3, pc, #464	; (adr r3, 80088d0 <__ieee754_pow+0x6e8>)
 80086fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008702:	f7f7 fdcb 	bl	800029c <__adddf3>
 8008706:	4622      	mov	r2, r4
 8008708:	462b      	mov	r3, r5
 800870a:	f7f7 ff7d 	bl	8000608 <__aeabi_dmul>
 800870e:	a372      	add	r3, pc, #456	; (adr r3, 80088d8 <__ieee754_pow+0x6f0>)
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	f7f7 fdc2 	bl	800029c <__adddf3>
 8008718:	4622      	mov	r2, r4
 800871a:	462b      	mov	r3, r5
 800871c:	f7f7 ff74 	bl	8000608 <__aeabi_dmul>
 8008720:	a36f      	add	r3, pc, #444	; (adr r3, 80088e0 <__ieee754_pow+0x6f8>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 fdb9 	bl	800029c <__adddf3>
 800872a:	4622      	mov	r2, r4
 800872c:	4606      	mov	r6, r0
 800872e:	460f      	mov	r7, r1
 8008730:	462b      	mov	r3, r5
 8008732:	4620      	mov	r0, r4
 8008734:	4629      	mov	r1, r5
 8008736:	f7f7 ff67 	bl	8000608 <__aeabi_dmul>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4630      	mov	r0, r6
 8008740:	4639      	mov	r1, r7
 8008742:	f7f7 ff61 	bl	8000608 <__aeabi_dmul>
 8008746:	4642      	mov	r2, r8
 8008748:	4604      	mov	r4, r0
 800874a:	460d      	mov	r5, r1
 800874c:	464b      	mov	r3, r9
 800874e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008752:	f7f7 fda3 	bl	800029c <__adddf3>
 8008756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800875a:	f7f7 ff55 	bl	8000608 <__aeabi_dmul>
 800875e:	4622      	mov	r2, r4
 8008760:	462b      	mov	r3, r5
 8008762:	f7f7 fd9b 	bl	800029c <__adddf3>
 8008766:	4642      	mov	r2, r8
 8008768:	4606      	mov	r6, r0
 800876a:	460f      	mov	r7, r1
 800876c:	464b      	mov	r3, r9
 800876e:	4640      	mov	r0, r8
 8008770:	4649      	mov	r1, r9
 8008772:	f7f7 ff49 	bl	8000608 <__aeabi_dmul>
 8008776:	2200      	movs	r2, #0
 8008778:	4b68      	ldr	r3, [pc, #416]	; (800891c <__ieee754_pow+0x734>)
 800877a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800877e:	f7f7 fd8d 	bl	800029c <__adddf3>
 8008782:	4632      	mov	r2, r6
 8008784:	463b      	mov	r3, r7
 8008786:	f7f7 fd89 	bl	800029c <__adddf3>
 800878a:	9802      	ldr	r0, [sp, #8]
 800878c:	460d      	mov	r5, r1
 800878e:	4604      	mov	r4, r0
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4640      	mov	r0, r8
 8008796:	4649      	mov	r1, r9
 8008798:	f7f7 ff36 	bl	8000608 <__aeabi_dmul>
 800879c:	2200      	movs	r2, #0
 800879e:	4680      	mov	r8, r0
 80087a0:	4689      	mov	r9, r1
 80087a2:	4b5e      	ldr	r3, [pc, #376]	; (800891c <__ieee754_pow+0x734>)
 80087a4:	4620      	mov	r0, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	f7f7 fd76 	bl	8000298 <__aeabi_dsub>
 80087ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087b0:	f7f7 fd72 	bl	8000298 <__aeabi_dsub>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4630      	mov	r0, r6
 80087ba:	4639      	mov	r1, r7
 80087bc:	f7f7 fd6c 	bl	8000298 <__aeabi_dsub>
 80087c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087c4:	f7f7 ff20 	bl	8000608 <__aeabi_dmul>
 80087c8:	4622      	mov	r2, r4
 80087ca:	4606      	mov	r6, r0
 80087cc:	460f      	mov	r7, r1
 80087ce:	462b      	mov	r3, r5
 80087d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087d4:	f7f7 ff18 	bl	8000608 <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f7 fd5c 	bl	800029c <__adddf3>
 80087e4:	4606      	mov	r6, r0
 80087e6:	460f      	mov	r7, r1
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4640      	mov	r0, r8
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f7 fd54 	bl	800029c <__adddf3>
 80087f4:	9802      	ldr	r0, [sp, #8]
 80087f6:	a33c      	add	r3, pc, #240	; (adr r3, 80088e8 <__ieee754_pow+0x700>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	4604      	mov	r4, r0
 80087fe:	460d      	mov	r5, r1
 8008800:	f7f7 ff02 	bl	8000608 <__aeabi_dmul>
 8008804:	4642      	mov	r2, r8
 8008806:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800880a:	464b      	mov	r3, r9
 800880c:	4620      	mov	r0, r4
 800880e:	4629      	mov	r1, r5
 8008810:	f7f7 fd42 	bl	8000298 <__aeabi_dsub>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4630      	mov	r0, r6
 800881a:	4639      	mov	r1, r7
 800881c:	f7f7 fd3c 	bl	8000298 <__aeabi_dsub>
 8008820:	a333      	add	r3, pc, #204	; (adr r3, 80088f0 <__ieee754_pow+0x708>)
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	f7f7 feef 	bl	8000608 <__aeabi_dmul>
 800882a:	a333      	add	r3, pc, #204	; (adr r3, 80088f8 <__ieee754_pow+0x710>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	4606      	mov	r6, r0
 8008832:	460f      	mov	r7, r1
 8008834:	4620      	mov	r0, r4
 8008836:	4629      	mov	r1, r5
 8008838:	f7f7 fee6 	bl	8000608 <__aeabi_dmul>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	4630      	mov	r0, r6
 8008842:	4639      	mov	r1, r7
 8008844:	f7f7 fd2a 	bl	800029c <__adddf3>
 8008848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800884a:	4b35      	ldr	r3, [pc, #212]	; (8008920 <__ieee754_pow+0x738>)
 800884c:	4413      	add	r3, r2
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	f7f7 fd23 	bl	800029c <__adddf3>
 8008856:	4604      	mov	r4, r0
 8008858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800885a:	460d      	mov	r5, r1
 800885c:	f7f7 fe6a 	bl	8000534 <__aeabi_i2d>
 8008860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008862:	4b30      	ldr	r3, [pc, #192]	; (8008924 <__ieee754_pow+0x73c>)
 8008864:	4413      	add	r3, r2
 8008866:	e9d3 8900 	ldrd	r8, r9, [r3]
 800886a:	4606      	mov	r6, r0
 800886c:	460f      	mov	r7, r1
 800886e:	4622      	mov	r2, r4
 8008870:	462b      	mov	r3, r5
 8008872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008876:	f7f7 fd11 	bl	800029c <__adddf3>
 800887a:	4642      	mov	r2, r8
 800887c:	464b      	mov	r3, r9
 800887e:	f7f7 fd0d 	bl	800029c <__adddf3>
 8008882:	4632      	mov	r2, r6
 8008884:	463b      	mov	r3, r7
 8008886:	f7f7 fd09 	bl	800029c <__adddf3>
 800888a:	9802      	ldr	r0, [sp, #8]
 800888c:	4632      	mov	r2, r6
 800888e:	463b      	mov	r3, r7
 8008890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008894:	f7f7 fd00 	bl	8000298 <__aeabi_dsub>
 8008898:	4642      	mov	r2, r8
 800889a:	464b      	mov	r3, r9
 800889c:	f7f7 fcfc 	bl	8000298 <__aeabi_dsub>
 80088a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088a4:	e607      	b.n	80084b6 <__ieee754_pow+0x2ce>
 80088a6:	f04f 0a01 	mov.w	sl, #1
 80088aa:	e6a5      	b.n	80085f8 <__ieee754_pow+0x410>
 80088ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008900 <__ieee754_pow+0x718>
 80088b0:	e613      	b.n	80084da <__ieee754_pow+0x2f2>
 80088b2:	bf00      	nop
 80088b4:	f3af 8000 	nop.w
 80088b8:	4a454eef 	.word	0x4a454eef
 80088bc:	3fca7e28 	.word	0x3fca7e28
 80088c0:	93c9db65 	.word	0x93c9db65
 80088c4:	3fcd864a 	.word	0x3fcd864a
 80088c8:	a91d4101 	.word	0xa91d4101
 80088cc:	3fd17460 	.word	0x3fd17460
 80088d0:	518f264d 	.word	0x518f264d
 80088d4:	3fd55555 	.word	0x3fd55555
 80088d8:	db6fabff 	.word	0xdb6fabff
 80088dc:	3fdb6db6 	.word	0x3fdb6db6
 80088e0:	33333303 	.word	0x33333303
 80088e4:	3fe33333 	.word	0x3fe33333
 80088e8:	e0000000 	.word	0xe0000000
 80088ec:	3feec709 	.word	0x3feec709
 80088f0:	dc3a03fd 	.word	0xdc3a03fd
 80088f4:	3feec709 	.word	0x3feec709
 80088f8:	145b01f5 	.word	0x145b01f5
 80088fc:	be3e2fe0 	.word	0xbe3e2fe0
 8008900:	00000000 	.word	0x00000000
 8008904:	3ff00000 	.word	0x3ff00000
 8008908:	43400000 	.word	0x43400000
 800890c:	0003988e 	.word	0x0003988e
 8008910:	000bb679 	.word	0x000bb679
 8008914:	08009890 	.word	0x08009890
 8008918:	3ff00000 	.word	0x3ff00000
 800891c:	40080000 	.word	0x40080000
 8008920:	080098b0 	.word	0x080098b0
 8008924:	080098a0 	.word	0x080098a0
 8008928:	a3b4      	add	r3, pc, #720	; (adr r3, 8008bfc <__ieee754_pow+0xa14>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	4640      	mov	r0, r8
 8008930:	4649      	mov	r1, r9
 8008932:	f7f7 fcb3 	bl	800029c <__adddf3>
 8008936:	4622      	mov	r2, r4
 8008938:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800893c:	462b      	mov	r3, r5
 800893e:	4630      	mov	r0, r6
 8008940:	4639      	mov	r1, r7
 8008942:	f7f7 fca9 	bl	8000298 <__aeabi_dsub>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800894e:	f7f8 f8eb 	bl	8000b28 <__aeabi_dcmpgt>
 8008952:	2800      	cmp	r0, #0
 8008954:	f47f adfe 	bne.w	8008554 <__ieee754_pow+0x36c>
 8008958:	4aa3      	ldr	r2, [pc, #652]	; (8008be8 <__ieee754_pow+0xa00>)
 800895a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800895e:	4293      	cmp	r3, r2
 8008960:	f340 810a 	ble.w	8008b78 <__ieee754_pow+0x990>
 8008964:	151b      	asrs	r3, r3, #20
 8008966:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800896a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800896e:	fa4a f303 	asr.w	r3, sl, r3
 8008972:	445b      	add	r3, fp
 8008974:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008978:	4e9c      	ldr	r6, [pc, #624]	; (8008bec <__ieee754_pow+0xa04>)
 800897a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800897e:	4116      	asrs	r6, r2
 8008980:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008984:	2000      	movs	r0, #0
 8008986:	ea23 0106 	bic.w	r1, r3, r6
 800898a:	f1c2 0214 	rsb	r2, r2, #20
 800898e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008992:	fa4a fa02 	asr.w	sl, sl, r2
 8008996:	f1bb 0f00 	cmp.w	fp, #0
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4620      	mov	r0, r4
 80089a0:	4629      	mov	r1, r5
 80089a2:	bfb8      	it	lt
 80089a4:	f1ca 0a00 	rsblt	sl, sl, #0
 80089a8:	f7f7 fc76 	bl	8000298 <__aeabi_dsub>
 80089ac:	e9cd 0100 	strd	r0, r1, [sp]
 80089b0:	4642      	mov	r2, r8
 80089b2:	464b      	mov	r3, r9
 80089b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089b8:	f7f7 fc70 	bl	800029c <__adddf3>
 80089bc:	2000      	movs	r0, #0
 80089be:	a378      	add	r3, pc, #480	; (adr r3, 8008ba0 <__ieee754_pow+0x9b8>)
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	4604      	mov	r4, r0
 80089c6:	460d      	mov	r5, r1
 80089c8:	f7f7 fe1e 	bl	8000608 <__aeabi_dmul>
 80089cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089d0:	4606      	mov	r6, r0
 80089d2:	460f      	mov	r7, r1
 80089d4:	4620      	mov	r0, r4
 80089d6:	4629      	mov	r1, r5
 80089d8:	f7f7 fc5e 	bl	8000298 <__aeabi_dsub>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7f7 fc58 	bl	8000298 <__aeabi_dsub>
 80089e8:	a36f      	add	r3, pc, #444	; (adr r3, 8008ba8 <__ieee754_pow+0x9c0>)
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f7f7 fe0b 	bl	8000608 <__aeabi_dmul>
 80089f2:	a36f      	add	r3, pc, #444	; (adr r3, 8008bb0 <__ieee754_pow+0x9c8>)
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	4680      	mov	r8, r0
 80089fa:	4689      	mov	r9, r1
 80089fc:	4620      	mov	r0, r4
 80089fe:	4629      	mov	r1, r5
 8008a00:	f7f7 fe02 	bl	8000608 <__aeabi_dmul>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4640      	mov	r0, r8
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	f7f7 fc46 	bl	800029c <__adddf3>
 8008a10:	4604      	mov	r4, r0
 8008a12:	460d      	mov	r5, r1
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4630      	mov	r0, r6
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	f7f7 fc3e 	bl	800029c <__adddf3>
 8008a20:	4632      	mov	r2, r6
 8008a22:	463b      	mov	r3, r7
 8008a24:	4680      	mov	r8, r0
 8008a26:	4689      	mov	r9, r1
 8008a28:	f7f7 fc36 	bl	8000298 <__aeabi_dsub>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4620      	mov	r0, r4
 8008a32:	4629      	mov	r1, r5
 8008a34:	f7f7 fc30 	bl	8000298 <__aeabi_dsub>
 8008a38:	4642      	mov	r2, r8
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	460f      	mov	r7, r1
 8008a3e:	464b      	mov	r3, r9
 8008a40:	4640      	mov	r0, r8
 8008a42:	4649      	mov	r1, r9
 8008a44:	f7f7 fde0 	bl	8000608 <__aeabi_dmul>
 8008a48:	a35b      	add	r3, pc, #364	; (adr r3, 8008bb8 <__ieee754_pow+0x9d0>)
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	4604      	mov	r4, r0
 8008a50:	460d      	mov	r5, r1
 8008a52:	f7f7 fdd9 	bl	8000608 <__aeabi_dmul>
 8008a56:	a35a      	add	r3, pc, #360	; (adr r3, 8008bc0 <__ieee754_pow+0x9d8>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f7f7 fc1c 	bl	8000298 <__aeabi_dsub>
 8008a60:	4622      	mov	r2, r4
 8008a62:	462b      	mov	r3, r5
 8008a64:	f7f7 fdd0 	bl	8000608 <__aeabi_dmul>
 8008a68:	a357      	add	r3, pc, #348	; (adr r3, 8008bc8 <__ieee754_pow+0x9e0>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	f7f7 fc15 	bl	800029c <__adddf3>
 8008a72:	4622      	mov	r2, r4
 8008a74:	462b      	mov	r3, r5
 8008a76:	f7f7 fdc7 	bl	8000608 <__aeabi_dmul>
 8008a7a:	a355      	add	r3, pc, #340	; (adr r3, 8008bd0 <__ieee754_pow+0x9e8>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 fc0a 	bl	8000298 <__aeabi_dsub>
 8008a84:	4622      	mov	r2, r4
 8008a86:	462b      	mov	r3, r5
 8008a88:	f7f7 fdbe 	bl	8000608 <__aeabi_dmul>
 8008a8c:	a352      	add	r3, pc, #328	; (adr r3, 8008bd8 <__ieee754_pow+0x9f0>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	f7f7 fc03 	bl	800029c <__adddf3>
 8008a96:	4622      	mov	r2, r4
 8008a98:	462b      	mov	r3, r5
 8008a9a:	f7f7 fdb5 	bl	8000608 <__aeabi_dmul>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	f7f7 fbf7 	bl	8000298 <__aeabi_dsub>
 8008aaa:	4604      	mov	r4, r0
 8008aac:	460d      	mov	r5, r1
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	f7f7 fda7 	bl	8000608 <__aeabi_dmul>
 8008aba:	2200      	movs	r2, #0
 8008abc:	e9cd 0100 	strd	r0, r1, [sp]
 8008ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	f7f7 fbe6 	bl	8000298 <__aeabi_dsub>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ad4:	f7f7 fec2 	bl	800085c <__aeabi_ddiv>
 8008ad8:	4632      	mov	r2, r6
 8008ada:	4604      	mov	r4, r0
 8008adc:	460d      	mov	r5, r1
 8008ade:	463b      	mov	r3, r7
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	f7f7 fd90 	bl	8000608 <__aeabi_dmul>
 8008ae8:	4632      	mov	r2, r6
 8008aea:	463b      	mov	r3, r7
 8008aec:	f7f7 fbd6 	bl	800029c <__adddf3>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4620      	mov	r0, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	f7f7 fbce 	bl	8000298 <__aeabi_dsub>
 8008afc:	4642      	mov	r2, r8
 8008afe:	464b      	mov	r3, r9
 8008b00:	f7f7 fbca 	bl	8000298 <__aeabi_dsub>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	2000      	movs	r0, #0
 8008b0a:	4939      	ldr	r1, [pc, #228]	; (8008bf0 <__ieee754_pow+0xa08>)
 8008b0c:	f7f7 fbc4 	bl	8000298 <__aeabi_dsub>
 8008b10:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008b14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	da2f      	bge.n	8008b7e <__ieee754_pow+0x996>
 8008b1e:	4650      	mov	r0, sl
 8008b20:	ec43 2b10 	vmov	d0, r2, r3
 8008b24:	f000 fb60 	bl	80091e8 <scalbn>
 8008b28:	ec51 0b10 	vmov	r0, r1, d0
 8008b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b30:	f7ff bbf1 	b.w	8008316 <__ieee754_pow+0x12e>
 8008b34:	4b2f      	ldr	r3, [pc, #188]	; (8008bf4 <__ieee754_pow+0xa0c>)
 8008b36:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008b3a:	429e      	cmp	r6, r3
 8008b3c:	f77f af0c 	ble.w	8008958 <__ieee754_pow+0x770>
 8008b40:	4b2d      	ldr	r3, [pc, #180]	; (8008bf8 <__ieee754_pow+0xa10>)
 8008b42:	440b      	add	r3, r1
 8008b44:	4303      	orrs	r3, r0
 8008b46:	d00b      	beq.n	8008b60 <__ieee754_pow+0x978>
 8008b48:	a325      	add	r3, pc, #148	; (adr r3, 8008be0 <__ieee754_pow+0x9f8>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b52:	f7f7 fd59 	bl	8000608 <__aeabi_dmul>
 8008b56:	a322      	add	r3, pc, #136	; (adr r3, 8008be0 <__ieee754_pow+0x9f8>)
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f7ff bbdb 	b.w	8008316 <__ieee754_pow+0x12e>
 8008b60:	4622      	mov	r2, r4
 8008b62:	462b      	mov	r3, r5
 8008b64:	f7f7 fb98 	bl	8000298 <__aeabi_dsub>
 8008b68:	4642      	mov	r2, r8
 8008b6a:	464b      	mov	r3, r9
 8008b6c:	f7f7 ffd2 	bl	8000b14 <__aeabi_dcmpge>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f43f aef1 	beq.w	8008958 <__ieee754_pow+0x770>
 8008b76:	e7e7      	b.n	8008b48 <__ieee754_pow+0x960>
 8008b78:	f04f 0a00 	mov.w	sl, #0
 8008b7c:	e718      	b.n	80089b0 <__ieee754_pow+0x7c8>
 8008b7e:	4621      	mov	r1, r4
 8008b80:	e7d4      	b.n	8008b2c <__ieee754_pow+0x944>
 8008b82:	2000      	movs	r0, #0
 8008b84:	491a      	ldr	r1, [pc, #104]	; (8008bf0 <__ieee754_pow+0xa08>)
 8008b86:	f7ff bb8f 	b.w	80082a8 <__ieee754_pow+0xc0>
 8008b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b8e:	f7ff bb8b 	b.w	80082a8 <__ieee754_pow+0xc0>
 8008b92:	4630      	mov	r0, r6
 8008b94:	4639      	mov	r1, r7
 8008b96:	f7ff bb87 	b.w	80082a8 <__ieee754_pow+0xc0>
 8008b9a:	4693      	mov	fp, r2
 8008b9c:	f7ff bb98 	b.w	80082d0 <__ieee754_pow+0xe8>
 8008ba0:	00000000 	.word	0x00000000
 8008ba4:	3fe62e43 	.word	0x3fe62e43
 8008ba8:	fefa39ef 	.word	0xfefa39ef
 8008bac:	3fe62e42 	.word	0x3fe62e42
 8008bb0:	0ca86c39 	.word	0x0ca86c39
 8008bb4:	be205c61 	.word	0xbe205c61
 8008bb8:	72bea4d0 	.word	0x72bea4d0
 8008bbc:	3e663769 	.word	0x3e663769
 8008bc0:	c5d26bf1 	.word	0xc5d26bf1
 8008bc4:	3ebbbd41 	.word	0x3ebbbd41
 8008bc8:	af25de2c 	.word	0xaf25de2c
 8008bcc:	3f11566a 	.word	0x3f11566a
 8008bd0:	16bebd93 	.word	0x16bebd93
 8008bd4:	3f66c16c 	.word	0x3f66c16c
 8008bd8:	5555553e 	.word	0x5555553e
 8008bdc:	3fc55555 	.word	0x3fc55555
 8008be0:	c2f8f359 	.word	0xc2f8f359
 8008be4:	01a56e1f 	.word	0x01a56e1f
 8008be8:	3fe00000 	.word	0x3fe00000
 8008bec:	000fffff 	.word	0x000fffff
 8008bf0:	3ff00000 	.word	0x3ff00000
 8008bf4:	4090cbff 	.word	0x4090cbff
 8008bf8:	3f6f3400 	.word	0x3f6f3400
 8008bfc:	652b82fe 	.word	0x652b82fe
 8008c00:	3c971547 	.word	0x3c971547

08008c04 <__ieee754_sqrt>:
 8008c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c08:	4955      	ldr	r1, [pc, #340]	; (8008d60 <__ieee754_sqrt+0x15c>)
 8008c0a:	ec55 4b10 	vmov	r4, r5, d0
 8008c0e:	43a9      	bics	r1, r5
 8008c10:	462b      	mov	r3, r5
 8008c12:	462a      	mov	r2, r5
 8008c14:	d112      	bne.n	8008c3c <__ieee754_sqrt+0x38>
 8008c16:	ee10 2a10 	vmov	r2, s0
 8008c1a:	ee10 0a10 	vmov	r0, s0
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f7 fcf2 	bl	8000608 <__aeabi_dmul>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4620      	mov	r0, r4
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	f7f7 fb36 	bl	800029c <__adddf3>
 8008c30:	4604      	mov	r4, r0
 8008c32:	460d      	mov	r5, r1
 8008c34:	ec45 4b10 	vmov	d0, r4, r5
 8008c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c3c:	2d00      	cmp	r5, #0
 8008c3e:	ee10 0a10 	vmov	r0, s0
 8008c42:	4621      	mov	r1, r4
 8008c44:	dc0f      	bgt.n	8008c66 <__ieee754_sqrt+0x62>
 8008c46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c4a:	4330      	orrs	r0, r6
 8008c4c:	d0f2      	beq.n	8008c34 <__ieee754_sqrt+0x30>
 8008c4e:	b155      	cbz	r5, 8008c66 <__ieee754_sqrt+0x62>
 8008c50:	ee10 2a10 	vmov	r2, s0
 8008c54:	4620      	mov	r0, r4
 8008c56:	4629      	mov	r1, r5
 8008c58:	f7f7 fb1e 	bl	8000298 <__aeabi_dsub>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	f7f7 fdfc 	bl	800085c <__aeabi_ddiv>
 8008c64:	e7e4      	b.n	8008c30 <__ieee754_sqrt+0x2c>
 8008c66:	151b      	asrs	r3, r3, #20
 8008c68:	d073      	beq.n	8008d52 <__ieee754_sqrt+0x14e>
 8008c6a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c6e:	07dd      	lsls	r5, r3, #31
 8008c70:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008c74:	bf48      	it	mi
 8008c76:	0fc8      	lsrmi	r0, r1, #31
 8008c78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008c7c:	bf44      	itt	mi
 8008c7e:	0049      	lslmi	r1, r1, #1
 8008c80:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008c84:	2500      	movs	r5, #0
 8008c86:	1058      	asrs	r0, r3, #1
 8008c88:	0fcb      	lsrs	r3, r1, #31
 8008c8a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008c8e:	0049      	lsls	r1, r1, #1
 8008c90:	2316      	movs	r3, #22
 8008c92:	462c      	mov	r4, r5
 8008c94:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008c98:	19a7      	adds	r7, r4, r6
 8008c9a:	4297      	cmp	r7, r2
 8008c9c:	bfde      	ittt	le
 8008c9e:	19bc      	addle	r4, r7, r6
 8008ca0:	1bd2      	suble	r2, r2, r7
 8008ca2:	19ad      	addle	r5, r5, r6
 8008ca4:	0fcf      	lsrs	r7, r1, #31
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008cac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008cb0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008cb4:	d1f0      	bne.n	8008c98 <__ieee754_sqrt+0x94>
 8008cb6:	f04f 0c20 	mov.w	ip, #32
 8008cba:	469e      	mov	lr, r3
 8008cbc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008cc0:	42a2      	cmp	r2, r4
 8008cc2:	eb06 070e 	add.w	r7, r6, lr
 8008cc6:	dc02      	bgt.n	8008cce <__ieee754_sqrt+0xca>
 8008cc8:	d112      	bne.n	8008cf0 <__ieee754_sqrt+0xec>
 8008cca:	428f      	cmp	r7, r1
 8008ccc:	d810      	bhi.n	8008cf0 <__ieee754_sqrt+0xec>
 8008cce:	2f00      	cmp	r7, #0
 8008cd0:	eb07 0e06 	add.w	lr, r7, r6
 8008cd4:	da42      	bge.n	8008d5c <__ieee754_sqrt+0x158>
 8008cd6:	f1be 0f00 	cmp.w	lr, #0
 8008cda:	db3f      	blt.n	8008d5c <__ieee754_sqrt+0x158>
 8008cdc:	f104 0801 	add.w	r8, r4, #1
 8008ce0:	1b12      	subs	r2, r2, r4
 8008ce2:	428f      	cmp	r7, r1
 8008ce4:	bf88      	it	hi
 8008ce6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008cea:	1bc9      	subs	r1, r1, r7
 8008cec:	4433      	add	r3, r6
 8008cee:	4644      	mov	r4, r8
 8008cf0:	0052      	lsls	r2, r2, #1
 8008cf2:	f1bc 0c01 	subs.w	ip, ip, #1
 8008cf6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008cfa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008cfe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d02:	d1dd      	bne.n	8008cc0 <__ieee754_sqrt+0xbc>
 8008d04:	430a      	orrs	r2, r1
 8008d06:	d006      	beq.n	8008d16 <__ieee754_sqrt+0x112>
 8008d08:	1c5c      	adds	r4, r3, #1
 8008d0a:	bf13      	iteet	ne
 8008d0c:	3301      	addne	r3, #1
 8008d0e:	3501      	addeq	r5, #1
 8008d10:	4663      	moveq	r3, ip
 8008d12:	f023 0301 	bicne.w	r3, r3, #1
 8008d16:	106a      	asrs	r2, r5, #1
 8008d18:	085b      	lsrs	r3, r3, #1
 8008d1a:	07e9      	lsls	r1, r5, #31
 8008d1c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008d20:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008d24:	bf48      	it	mi
 8008d26:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008d2a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008d2e:	461c      	mov	r4, r3
 8008d30:	e780      	b.n	8008c34 <__ieee754_sqrt+0x30>
 8008d32:	0aca      	lsrs	r2, r1, #11
 8008d34:	3815      	subs	r0, #21
 8008d36:	0549      	lsls	r1, r1, #21
 8008d38:	2a00      	cmp	r2, #0
 8008d3a:	d0fa      	beq.n	8008d32 <__ieee754_sqrt+0x12e>
 8008d3c:	02d6      	lsls	r6, r2, #11
 8008d3e:	d50a      	bpl.n	8008d56 <__ieee754_sqrt+0x152>
 8008d40:	f1c3 0420 	rsb	r4, r3, #32
 8008d44:	fa21 f404 	lsr.w	r4, r1, r4
 8008d48:	1e5d      	subs	r5, r3, #1
 8008d4a:	4099      	lsls	r1, r3
 8008d4c:	4322      	orrs	r2, r4
 8008d4e:	1b43      	subs	r3, r0, r5
 8008d50:	e78b      	b.n	8008c6a <__ieee754_sqrt+0x66>
 8008d52:	4618      	mov	r0, r3
 8008d54:	e7f0      	b.n	8008d38 <__ieee754_sqrt+0x134>
 8008d56:	0052      	lsls	r2, r2, #1
 8008d58:	3301      	adds	r3, #1
 8008d5a:	e7ef      	b.n	8008d3c <__ieee754_sqrt+0x138>
 8008d5c:	46a0      	mov	r8, r4
 8008d5e:	e7bf      	b.n	8008ce0 <__ieee754_sqrt+0xdc>
 8008d60:	7ff00000 	.word	0x7ff00000
 8008d64:	00000000 	.word	0x00000000

08008d68 <atan>:
 8008d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	ec55 4b10 	vmov	r4, r5, d0
 8008d70:	4bc3      	ldr	r3, [pc, #780]	; (8009080 <atan+0x318>)
 8008d72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d76:	429e      	cmp	r6, r3
 8008d78:	46ab      	mov	fp, r5
 8008d7a:	dd18      	ble.n	8008dae <atan+0x46>
 8008d7c:	4bc1      	ldr	r3, [pc, #772]	; (8009084 <atan+0x31c>)
 8008d7e:	429e      	cmp	r6, r3
 8008d80:	dc01      	bgt.n	8008d86 <atan+0x1e>
 8008d82:	d109      	bne.n	8008d98 <atan+0x30>
 8008d84:	b144      	cbz	r4, 8008d98 <atan+0x30>
 8008d86:	4622      	mov	r2, r4
 8008d88:	462b      	mov	r3, r5
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	f7f7 fa85 	bl	800029c <__adddf3>
 8008d92:	4604      	mov	r4, r0
 8008d94:	460d      	mov	r5, r1
 8008d96:	e006      	b.n	8008da6 <atan+0x3e>
 8008d98:	f1bb 0f00 	cmp.w	fp, #0
 8008d9c:	f340 8131 	ble.w	8009002 <atan+0x29a>
 8008da0:	a59b      	add	r5, pc, #620	; (adr r5, 8009010 <atan+0x2a8>)
 8008da2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008da6:	ec45 4b10 	vmov	d0, r4, r5
 8008daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	4bb6      	ldr	r3, [pc, #728]	; (8009088 <atan+0x320>)
 8008db0:	429e      	cmp	r6, r3
 8008db2:	dc14      	bgt.n	8008dde <atan+0x76>
 8008db4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008db8:	429e      	cmp	r6, r3
 8008dba:	dc0d      	bgt.n	8008dd8 <atan+0x70>
 8008dbc:	a396      	add	r3, pc, #600	; (adr r3, 8009018 <atan+0x2b0>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	ee10 0a10 	vmov	r0, s0
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	f7f7 fa68 	bl	800029c <__adddf3>
 8008dcc:	2200      	movs	r2, #0
 8008dce:	4baf      	ldr	r3, [pc, #700]	; (800908c <atan+0x324>)
 8008dd0:	f7f7 feaa 	bl	8000b28 <__aeabi_dcmpgt>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d1e6      	bne.n	8008da6 <atan+0x3e>
 8008dd8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008ddc:	e02b      	b.n	8008e36 <atan+0xce>
 8008dde:	f000 f963 	bl	80090a8 <fabs>
 8008de2:	4bab      	ldr	r3, [pc, #684]	; (8009090 <atan+0x328>)
 8008de4:	429e      	cmp	r6, r3
 8008de6:	ec55 4b10 	vmov	r4, r5, d0
 8008dea:	f300 80bf 	bgt.w	8008f6c <atan+0x204>
 8008dee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008df2:	429e      	cmp	r6, r3
 8008df4:	f300 80a0 	bgt.w	8008f38 <atan+0x1d0>
 8008df8:	ee10 2a10 	vmov	r2, s0
 8008dfc:	ee10 0a10 	vmov	r0, s0
 8008e00:	462b      	mov	r3, r5
 8008e02:	4629      	mov	r1, r5
 8008e04:	f7f7 fa4a 	bl	800029c <__adddf3>
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4ba0      	ldr	r3, [pc, #640]	; (800908c <atan+0x324>)
 8008e0c:	f7f7 fa44 	bl	8000298 <__aeabi_dsub>
 8008e10:	2200      	movs	r2, #0
 8008e12:	4606      	mov	r6, r0
 8008e14:	460f      	mov	r7, r1
 8008e16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	f7f7 fa3d 	bl	800029c <__adddf3>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7f7 fd17 	bl	800085c <__aeabi_ddiv>
 8008e2e:	f04f 0a00 	mov.w	sl, #0
 8008e32:	4604      	mov	r4, r0
 8008e34:	460d      	mov	r5, r1
 8008e36:	4622      	mov	r2, r4
 8008e38:	462b      	mov	r3, r5
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	f7f7 fbe3 	bl	8000608 <__aeabi_dmul>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4680      	mov	r8, r0
 8008e48:	4689      	mov	r9, r1
 8008e4a:	f7f7 fbdd 	bl	8000608 <__aeabi_dmul>
 8008e4e:	a374      	add	r3, pc, #464	; (adr r3, 8009020 <atan+0x2b8>)
 8008e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e54:	4606      	mov	r6, r0
 8008e56:	460f      	mov	r7, r1
 8008e58:	f7f7 fbd6 	bl	8000608 <__aeabi_dmul>
 8008e5c:	a372      	add	r3, pc, #456	; (adr r3, 8009028 <atan+0x2c0>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f7f7 fa1b 	bl	800029c <__adddf3>
 8008e66:	4632      	mov	r2, r6
 8008e68:	463b      	mov	r3, r7
 8008e6a:	f7f7 fbcd 	bl	8000608 <__aeabi_dmul>
 8008e6e:	a370      	add	r3, pc, #448	; (adr r3, 8009030 <atan+0x2c8>)
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f7f7 fa12 	bl	800029c <__adddf3>
 8008e78:	4632      	mov	r2, r6
 8008e7a:	463b      	mov	r3, r7
 8008e7c:	f7f7 fbc4 	bl	8000608 <__aeabi_dmul>
 8008e80:	a36d      	add	r3, pc, #436	; (adr r3, 8009038 <atan+0x2d0>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	f7f7 fa09 	bl	800029c <__adddf3>
 8008e8a:	4632      	mov	r2, r6
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	f7f7 fbbb 	bl	8000608 <__aeabi_dmul>
 8008e92:	a36b      	add	r3, pc, #428	; (adr r3, 8009040 <atan+0x2d8>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	f7f7 fa00 	bl	800029c <__adddf3>
 8008e9c:	4632      	mov	r2, r6
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	f7f7 fbb2 	bl	8000608 <__aeabi_dmul>
 8008ea4:	a368      	add	r3, pc, #416	; (adr r3, 8009048 <atan+0x2e0>)
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	f7f7 f9f7 	bl	800029c <__adddf3>
 8008eae:	4642      	mov	r2, r8
 8008eb0:	464b      	mov	r3, r9
 8008eb2:	f7f7 fba9 	bl	8000608 <__aeabi_dmul>
 8008eb6:	a366      	add	r3, pc, #408	; (adr r3, 8009050 <atan+0x2e8>)
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	4689      	mov	r9, r1
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	f7f7 fba0 	bl	8000608 <__aeabi_dmul>
 8008ec8:	a363      	add	r3, pc, #396	; (adr r3, 8009058 <atan+0x2f0>)
 8008eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ece:	f7f7 f9e3 	bl	8000298 <__aeabi_dsub>
 8008ed2:	4632      	mov	r2, r6
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	f7f7 fb97 	bl	8000608 <__aeabi_dmul>
 8008eda:	a361      	add	r3, pc, #388	; (adr r3, 8009060 <atan+0x2f8>)
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	f7f7 f9da 	bl	8000298 <__aeabi_dsub>
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	f7f7 fb8e 	bl	8000608 <__aeabi_dmul>
 8008eec:	a35e      	add	r3, pc, #376	; (adr r3, 8009068 <atan+0x300>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f7f7 f9d1 	bl	8000298 <__aeabi_dsub>
 8008ef6:	4632      	mov	r2, r6
 8008ef8:	463b      	mov	r3, r7
 8008efa:	f7f7 fb85 	bl	8000608 <__aeabi_dmul>
 8008efe:	a35c      	add	r3, pc, #368	; (adr r3, 8009070 <atan+0x308>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f7f7 f9c8 	bl	8000298 <__aeabi_dsub>
 8008f08:	4632      	mov	r2, r6
 8008f0a:	463b      	mov	r3, r7
 8008f0c:	f7f7 fb7c 	bl	8000608 <__aeabi_dmul>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4640      	mov	r0, r8
 8008f16:	4649      	mov	r1, r9
 8008f18:	f7f7 f9c0 	bl	800029c <__adddf3>
 8008f1c:	4622      	mov	r2, r4
 8008f1e:	462b      	mov	r3, r5
 8008f20:	f7f7 fb72 	bl	8000608 <__aeabi_dmul>
 8008f24:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	d14b      	bne.n	8008fc6 <atan+0x25e>
 8008f2e:	4620      	mov	r0, r4
 8008f30:	4629      	mov	r1, r5
 8008f32:	f7f7 f9b1 	bl	8000298 <__aeabi_dsub>
 8008f36:	e72c      	b.n	8008d92 <atan+0x2a>
 8008f38:	ee10 0a10 	vmov	r0, s0
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4b53      	ldr	r3, [pc, #332]	; (800908c <atan+0x324>)
 8008f40:	4629      	mov	r1, r5
 8008f42:	f7f7 f9a9 	bl	8000298 <__aeabi_dsub>
 8008f46:	2200      	movs	r2, #0
 8008f48:	4606      	mov	r6, r0
 8008f4a:	460f      	mov	r7, r1
 8008f4c:	4b4f      	ldr	r3, [pc, #316]	; (800908c <atan+0x324>)
 8008f4e:	4620      	mov	r0, r4
 8008f50:	4629      	mov	r1, r5
 8008f52:	f7f7 f9a3 	bl	800029c <__adddf3>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	f7f7 fc7d 	bl	800085c <__aeabi_ddiv>
 8008f62:	f04f 0a01 	mov.w	sl, #1
 8008f66:	4604      	mov	r4, r0
 8008f68:	460d      	mov	r5, r1
 8008f6a:	e764      	b.n	8008e36 <atan+0xce>
 8008f6c:	4b49      	ldr	r3, [pc, #292]	; (8009094 <atan+0x32c>)
 8008f6e:	429e      	cmp	r6, r3
 8008f70:	dc1d      	bgt.n	8008fae <atan+0x246>
 8008f72:	ee10 0a10 	vmov	r0, s0
 8008f76:	2200      	movs	r2, #0
 8008f78:	4b47      	ldr	r3, [pc, #284]	; (8009098 <atan+0x330>)
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f7f7 f98c 	bl	8000298 <__aeabi_dsub>
 8008f80:	2200      	movs	r2, #0
 8008f82:	4606      	mov	r6, r0
 8008f84:	460f      	mov	r7, r1
 8008f86:	4b44      	ldr	r3, [pc, #272]	; (8009098 <atan+0x330>)
 8008f88:	4620      	mov	r0, r4
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	f7f7 fb3c 	bl	8000608 <__aeabi_dmul>
 8008f90:	2200      	movs	r2, #0
 8008f92:	4b3e      	ldr	r3, [pc, #248]	; (800908c <atan+0x324>)
 8008f94:	f7f7 f982 	bl	800029c <__adddf3>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f7f7 fc5c 	bl	800085c <__aeabi_ddiv>
 8008fa4:	f04f 0a02 	mov.w	sl, #2
 8008fa8:	4604      	mov	r4, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	e743      	b.n	8008e36 <atan+0xce>
 8008fae:	462b      	mov	r3, r5
 8008fb0:	ee10 2a10 	vmov	r2, s0
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	4939      	ldr	r1, [pc, #228]	; (800909c <atan+0x334>)
 8008fb8:	f7f7 fc50 	bl	800085c <__aeabi_ddiv>
 8008fbc:	f04f 0a03 	mov.w	sl, #3
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	e737      	b.n	8008e36 <atan+0xce>
 8008fc6:	4b36      	ldr	r3, [pc, #216]	; (80090a0 <atan+0x338>)
 8008fc8:	4e36      	ldr	r6, [pc, #216]	; (80090a4 <atan+0x33c>)
 8008fca:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8008fce:	4456      	add	r6, sl
 8008fd0:	449a      	add	sl, r3
 8008fd2:	e9da 2300 	ldrd	r2, r3, [sl]
 8008fd6:	f7f7 f95f 	bl	8000298 <__aeabi_dsub>
 8008fda:	4622      	mov	r2, r4
 8008fdc:	462b      	mov	r3, r5
 8008fde:	f7f7 f95b 	bl	8000298 <__aeabi_dsub>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008fea:	f7f7 f955 	bl	8000298 <__aeabi_dsub>
 8008fee:	f1bb 0f00 	cmp.w	fp, #0
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	f6bf aed6 	bge.w	8008da6 <atan+0x3e>
 8008ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ffe:	461d      	mov	r5, r3
 8009000:	e6d1      	b.n	8008da6 <atan+0x3e>
 8009002:	a51d      	add	r5, pc, #116	; (adr r5, 8009078 <atan+0x310>)
 8009004:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009008:	e6cd      	b.n	8008da6 <atan+0x3e>
 800900a:	bf00      	nop
 800900c:	f3af 8000 	nop.w
 8009010:	54442d18 	.word	0x54442d18
 8009014:	3ff921fb 	.word	0x3ff921fb
 8009018:	8800759c 	.word	0x8800759c
 800901c:	7e37e43c 	.word	0x7e37e43c
 8009020:	e322da11 	.word	0xe322da11
 8009024:	3f90ad3a 	.word	0x3f90ad3a
 8009028:	24760deb 	.word	0x24760deb
 800902c:	3fa97b4b 	.word	0x3fa97b4b
 8009030:	a0d03d51 	.word	0xa0d03d51
 8009034:	3fb10d66 	.word	0x3fb10d66
 8009038:	c54c206e 	.word	0xc54c206e
 800903c:	3fb745cd 	.word	0x3fb745cd
 8009040:	920083ff 	.word	0x920083ff
 8009044:	3fc24924 	.word	0x3fc24924
 8009048:	5555550d 	.word	0x5555550d
 800904c:	3fd55555 	.word	0x3fd55555
 8009050:	2c6a6c2f 	.word	0x2c6a6c2f
 8009054:	bfa2b444 	.word	0xbfa2b444
 8009058:	52defd9a 	.word	0x52defd9a
 800905c:	3fadde2d 	.word	0x3fadde2d
 8009060:	af749a6d 	.word	0xaf749a6d
 8009064:	3fb3b0f2 	.word	0x3fb3b0f2
 8009068:	fe231671 	.word	0xfe231671
 800906c:	3fbc71c6 	.word	0x3fbc71c6
 8009070:	9998ebc4 	.word	0x9998ebc4
 8009074:	3fc99999 	.word	0x3fc99999
 8009078:	54442d18 	.word	0x54442d18
 800907c:	bff921fb 	.word	0xbff921fb
 8009080:	440fffff 	.word	0x440fffff
 8009084:	7ff00000 	.word	0x7ff00000
 8009088:	3fdbffff 	.word	0x3fdbffff
 800908c:	3ff00000 	.word	0x3ff00000
 8009090:	3ff2ffff 	.word	0x3ff2ffff
 8009094:	40037fff 	.word	0x40037fff
 8009098:	3ff80000 	.word	0x3ff80000
 800909c:	bff00000 	.word	0xbff00000
 80090a0:	080098e0 	.word	0x080098e0
 80090a4:	080098c0 	.word	0x080098c0

080090a8 <fabs>:
 80090a8:	ec51 0b10 	vmov	r0, r1, d0
 80090ac:	ee10 2a10 	vmov	r2, s0
 80090b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090b4:	ec43 2b10 	vmov	d0, r2, r3
 80090b8:	4770      	bx	lr

080090ba <finite>:
 80090ba:	ee10 3a90 	vmov	r3, s1
 80090be:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80090c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80090c6:	0fc0      	lsrs	r0, r0, #31
 80090c8:	4770      	bx	lr

080090ca <matherr>:
 80090ca:	2000      	movs	r0, #0
 80090cc:	4770      	bx	lr
	...

080090d0 <nan>:
 80090d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80090d8 <nan+0x8>
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	00000000 	.word	0x00000000
 80090dc:	7ff80000 	.word	0x7ff80000

080090e0 <rint>:
 80090e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090e2:	ec51 0b10 	vmov	r0, r1, d0
 80090e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80090ee:	2e13      	cmp	r6, #19
 80090f0:	460b      	mov	r3, r1
 80090f2:	ee10 4a10 	vmov	r4, s0
 80090f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80090fa:	dc56      	bgt.n	80091aa <rint+0xca>
 80090fc:	2e00      	cmp	r6, #0
 80090fe:	da2b      	bge.n	8009158 <rint+0x78>
 8009100:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009104:	4302      	orrs	r2, r0
 8009106:	d023      	beq.n	8009150 <rint+0x70>
 8009108:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800910c:	4302      	orrs	r2, r0
 800910e:	4254      	negs	r4, r2
 8009110:	4314      	orrs	r4, r2
 8009112:	0c4b      	lsrs	r3, r1, #17
 8009114:	0b24      	lsrs	r4, r4, #12
 8009116:	045b      	lsls	r3, r3, #17
 8009118:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800911c:	ea44 0103 	orr.w	r1, r4, r3
 8009120:	460b      	mov	r3, r1
 8009122:	492f      	ldr	r1, [pc, #188]	; (80091e0 <rint+0x100>)
 8009124:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009128:	e9d1 6700 	ldrd	r6, r7, [r1]
 800912c:	4602      	mov	r2, r0
 800912e:	4639      	mov	r1, r7
 8009130:	4630      	mov	r0, r6
 8009132:	f7f7 f8b3 	bl	800029c <__adddf3>
 8009136:	e9cd 0100 	strd	r0, r1, [sp]
 800913a:	463b      	mov	r3, r7
 800913c:	4632      	mov	r2, r6
 800913e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009142:	f7f7 f8a9 	bl	8000298 <__aeabi_dsub>
 8009146:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800914a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800914e:	4639      	mov	r1, r7
 8009150:	ec41 0b10 	vmov	d0, r0, r1
 8009154:	b003      	add	sp, #12
 8009156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009158:	4a22      	ldr	r2, [pc, #136]	; (80091e4 <rint+0x104>)
 800915a:	4132      	asrs	r2, r6
 800915c:	ea01 0702 	and.w	r7, r1, r2
 8009160:	4307      	orrs	r7, r0
 8009162:	d0f5      	beq.n	8009150 <rint+0x70>
 8009164:	0852      	lsrs	r2, r2, #1
 8009166:	4011      	ands	r1, r2
 8009168:	430c      	orrs	r4, r1
 800916a:	d00b      	beq.n	8009184 <rint+0xa4>
 800916c:	ea23 0202 	bic.w	r2, r3, r2
 8009170:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009174:	2e13      	cmp	r6, #19
 8009176:	fa43 f306 	asr.w	r3, r3, r6
 800917a:	bf0c      	ite	eq
 800917c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009180:	2400      	movne	r4, #0
 8009182:	4313      	orrs	r3, r2
 8009184:	4916      	ldr	r1, [pc, #88]	; (80091e0 <rint+0x100>)
 8009186:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800918a:	4622      	mov	r2, r4
 800918c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009190:	4620      	mov	r0, r4
 8009192:	4629      	mov	r1, r5
 8009194:	f7f7 f882 	bl	800029c <__adddf3>
 8009198:	e9cd 0100 	strd	r0, r1, [sp]
 800919c:	4622      	mov	r2, r4
 800919e:	462b      	mov	r3, r5
 80091a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091a4:	f7f7 f878 	bl	8000298 <__aeabi_dsub>
 80091a8:	e7d2      	b.n	8009150 <rint+0x70>
 80091aa:	2e33      	cmp	r6, #51	; 0x33
 80091ac:	dd07      	ble.n	80091be <rint+0xde>
 80091ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80091b2:	d1cd      	bne.n	8009150 <rint+0x70>
 80091b4:	ee10 2a10 	vmov	r2, s0
 80091b8:	f7f7 f870 	bl	800029c <__adddf3>
 80091bc:	e7c8      	b.n	8009150 <rint+0x70>
 80091be:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091c6:	40f2      	lsrs	r2, r6
 80091c8:	4210      	tst	r0, r2
 80091ca:	d0c1      	beq.n	8009150 <rint+0x70>
 80091cc:	0852      	lsrs	r2, r2, #1
 80091ce:	4210      	tst	r0, r2
 80091d0:	bf1f      	itttt	ne
 80091d2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80091d6:	ea20 0202 	bicne.w	r2, r0, r2
 80091da:	4134      	asrne	r4, r6
 80091dc:	4314      	orrne	r4, r2
 80091de:	e7d1      	b.n	8009184 <rint+0xa4>
 80091e0:	08009900 	.word	0x08009900
 80091e4:	000fffff 	.word	0x000fffff

080091e8 <scalbn>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	ec55 4b10 	vmov	r4, r5, d0
 80091ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80091f2:	4606      	mov	r6, r0
 80091f4:	462b      	mov	r3, r5
 80091f6:	b9aa      	cbnz	r2, 8009224 <scalbn+0x3c>
 80091f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091fc:	4323      	orrs	r3, r4
 80091fe:	d03b      	beq.n	8009278 <scalbn+0x90>
 8009200:	4b31      	ldr	r3, [pc, #196]	; (80092c8 <scalbn+0xe0>)
 8009202:	4629      	mov	r1, r5
 8009204:	2200      	movs	r2, #0
 8009206:	ee10 0a10 	vmov	r0, s0
 800920a:	f7f7 f9fd 	bl	8000608 <__aeabi_dmul>
 800920e:	4b2f      	ldr	r3, [pc, #188]	; (80092cc <scalbn+0xe4>)
 8009210:	429e      	cmp	r6, r3
 8009212:	4604      	mov	r4, r0
 8009214:	460d      	mov	r5, r1
 8009216:	da12      	bge.n	800923e <scalbn+0x56>
 8009218:	a327      	add	r3, pc, #156	; (adr r3, 80092b8 <scalbn+0xd0>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f7f7 f9f3 	bl	8000608 <__aeabi_dmul>
 8009222:	e009      	b.n	8009238 <scalbn+0x50>
 8009224:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009228:	428a      	cmp	r2, r1
 800922a:	d10c      	bne.n	8009246 <scalbn+0x5e>
 800922c:	ee10 2a10 	vmov	r2, s0
 8009230:	4620      	mov	r0, r4
 8009232:	4629      	mov	r1, r5
 8009234:	f7f7 f832 	bl	800029c <__adddf3>
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
 800923c:	e01c      	b.n	8009278 <scalbn+0x90>
 800923e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009242:	460b      	mov	r3, r1
 8009244:	3a36      	subs	r2, #54	; 0x36
 8009246:	4432      	add	r2, r6
 8009248:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800924c:	428a      	cmp	r2, r1
 800924e:	dd0b      	ble.n	8009268 <scalbn+0x80>
 8009250:	ec45 4b11 	vmov	d1, r4, r5
 8009254:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80092c0 <scalbn+0xd8>
 8009258:	f000 f83c 	bl	80092d4 <copysign>
 800925c:	a318      	add	r3, pc, #96	; (adr r3, 80092c0 <scalbn+0xd8>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	ec51 0b10 	vmov	r0, r1, d0
 8009266:	e7da      	b.n	800921e <scalbn+0x36>
 8009268:	2a00      	cmp	r2, #0
 800926a:	dd08      	ble.n	800927e <scalbn+0x96>
 800926c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009270:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009274:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009278:	ec45 4b10 	vmov	d0, r4, r5
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009282:	da0d      	bge.n	80092a0 <scalbn+0xb8>
 8009284:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009288:	429e      	cmp	r6, r3
 800928a:	ec45 4b11 	vmov	d1, r4, r5
 800928e:	dce1      	bgt.n	8009254 <scalbn+0x6c>
 8009290:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80092b8 <scalbn+0xd0>
 8009294:	f000 f81e 	bl	80092d4 <copysign>
 8009298:	a307      	add	r3, pc, #28	; (adr r3, 80092b8 <scalbn+0xd0>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	e7e0      	b.n	8009262 <scalbn+0x7a>
 80092a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80092a4:	3236      	adds	r2, #54	; 0x36
 80092a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80092aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80092ae:	4620      	mov	r0, r4
 80092b0:	4629      	mov	r1, r5
 80092b2:	2200      	movs	r2, #0
 80092b4:	4b06      	ldr	r3, [pc, #24]	; (80092d0 <scalbn+0xe8>)
 80092b6:	e7b2      	b.n	800921e <scalbn+0x36>
 80092b8:	c2f8f359 	.word	0xc2f8f359
 80092bc:	01a56e1f 	.word	0x01a56e1f
 80092c0:	8800759c 	.word	0x8800759c
 80092c4:	7e37e43c 	.word	0x7e37e43c
 80092c8:	43500000 	.word	0x43500000
 80092cc:	ffff3cb0 	.word	0xffff3cb0
 80092d0:	3c900000 	.word	0x3c900000

080092d4 <copysign>:
 80092d4:	ec51 0b10 	vmov	r0, r1, d0
 80092d8:	ee11 0a90 	vmov	r0, s3
 80092dc:	ee10 2a10 	vmov	r2, s0
 80092e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80092e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80092e8:	ea41 0300 	orr.w	r3, r1, r0
 80092ec:	ec43 2b10 	vmov	d0, r2, r3
 80092f0:	4770      	bx	lr
	...

080092f4 <_init>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr

08009300 <_fini>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	bf00      	nop
 8009304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009306:	bc08      	pop	{r3}
 8009308:	469e      	mov	lr, r3
 800930a:	4770      	bx	lr
