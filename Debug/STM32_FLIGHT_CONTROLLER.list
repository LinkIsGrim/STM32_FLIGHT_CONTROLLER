
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f68  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08007100  08007100  00017100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073c0  080073c0  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073c8  080073c8  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  080073d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000234  08007604  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08007604  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b035  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ca4  00000000  00000000  0003b299  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f7ca  00000000  00000000  0003df3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001590  00000000  00000000  0004d708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001558  00000000  00000000  0004ec98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003d58  00000000  00000000  000501f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f209  00000000  00000000  00053f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00099b99  00000000  00000000  00063151  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000fccea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004884  00000000  00000000  000fcd68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000234 	.word	0x20000234
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080070e8 	.word	0x080070e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000238 	.word	0x20000238
 80001d4:	080070e8 	.word	0x080070e8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_ldivmod>:
 8000ad4:	b97b      	cbnz	r3, 8000af6 <__aeabi_ldivmod+0x22>
 8000ad6:	b972      	cbnz	r2, 8000af6 <__aeabi_ldivmod+0x22>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bfbe      	ittt	lt
 8000adc:	2000      	movlt	r0, #0
 8000ade:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ae2:	e006      	blt.n	8000af2 <__aeabi_ldivmod+0x1e>
 8000ae4:	bf08      	it	eq
 8000ae6:	2800      	cmpeq	r0, #0
 8000ae8:	bf1c      	itt	ne
 8000aea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000aee:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af2:	f000 b9bd 	b.w	8000e70 <__aeabi_idiv0>
 8000af6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afe:	2900      	cmp	r1, #0
 8000b00:	db09      	blt.n	8000b16 <__aeabi_ldivmod+0x42>
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db1a      	blt.n	8000b3c <__aeabi_ldivmod+0x68>
 8000b06:	f000 f84d 	bl	8000ba4 <__udivmoddi4>
 8000b0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b12:	b004      	add	sp, #16
 8000b14:	4770      	bx	lr
 8000b16:	4240      	negs	r0, r0
 8000b18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db1b      	blt.n	8000b58 <__aeabi_ldivmod+0x84>
 8000b20:	f000 f840 	bl	8000ba4 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4240      	negs	r0, r0
 8000b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b34:	4252      	negs	r2, r2
 8000b36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b3a:	4770      	bx	lr
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b42:	f000 f82f 	bl	8000ba4 <__udivmoddi4>
 8000b46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4e:	b004      	add	sp, #16
 8000b50:	4240      	negs	r0, r0
 8000b52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b56:	4770      	bx	lr
 8000b58:	4252      	negs	r2, r2
 8000b5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5e:	f000 f821 	bl	8000ba4 <__udivmoddi4>
 8000b62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6a:	b004      	add	sp, #16
 8000b6c:	4252      	negs	r2, r2
 8000b6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b88:	f000 b972 	b.w	8000e70 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	4688      	mov	r8, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14b      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4615      	mov	r5, r2
 8000bb6:	d967      	bls.n	8000c88 <__udivmoddi4+0xe4>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b14a      	cbz	r2, 8000bd2 <__udivmoddi4+0x2e>
 8000bbe:	f1c2 0720 	rsb	r7, r2, #32
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bca:	4095      	lsls	r5, r2
 8000bcc:	ea47 0803 	orr.w	r8, r7, r3
 8000bd0:	4094      	lsls	r4, r2
 8000bd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd6:	0c23      	lsrs	r3, r4, #16
 8000bd8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bdc:	fa1f fc85 	uxth.w	ip, r5
 8000be0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000be4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x60>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bf6:	f080 811b 	bcs.w	8000e30 <__udivmoddi4+0x28c>
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	f240 8118 	bls.w	8000e30 <__udivmoddi4+0x28c>
 8000c00:	3f02      	subs	r7, #2
 8000c02:	442b      	add	r3, r5
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c14:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c18:	45a4      	cmp	ip, r4
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x8c>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c22:	f080 8107 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	f240 8104 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	442c      	add	r4, r5
 8000c30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c34:	eba4 040c 	sub.w	r4, r4, ip
 8000c38:	2700      	movs	r7, #0
 8000c3a:	b11e      	cbz	r6, 8000c44 <__udivmoddi4+0xa0>
 8000c3c:	40d4      	lsrs	r4, r2
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e9c6 4300 	strd	r4, r3, [r6]
 8000c44:	4639      	mov	r1, r7
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0xbe>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80eb 	beq.w	8000e2a <__udivmoddi4+0x286>
 8000c54:	2700      	movs	r7, #0
 8000c56:	e9c6 0100 	strd	r0, r1, [r6]
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f783 	clz	r7, r3
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d147      	bne.n	8000cfa <__udivmoddi4+0x156>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xd0>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80fa 	bhi.w	8000e68 <__udivmoddi4+0x2c4>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d0e0      	beq.n	8000c44 <__udivmoddi4+0xa0>
 8000c82:	e9c6 4800 	strd	r4, r8, [r6]
 8000c86:	e7dd      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000c88:	b902      	cbnz	r2, 8000c8c <__udivmoddi4+0xe8>
 8000c8a:	deff      	udf	#255	; 0xff
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	f040 808f 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c96:	1b49      	subs	r1, r1, r5
 8000c98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9c:	fa1f f885 	uxth.w	r8, r5
 8000ca0:	2701      	movs	r7, #1
 8000ca2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ca6:	0c23      	lsrs	r3, r4, #16
 8000ca8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb08 f10c 	mul.w	r1, r8, ip
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb8:	18eb      	adds	r3, r5, r3
 8000cba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2bc>
 8000cc6:	4684      	mov	ip, r0
 8000cc8:	1a59      	subs	r1, r3, r1
 8000cca:	b2a3      	uxth	r3, r4
 8000ccc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd8:	fb08 f800 	mul.w	r8, r8, r0
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x14c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x14a>
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	f200 80b6 	bhi.w	8000e5a <__udivmoddi4+0x2b6>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	eba4 0408 	sub.w	r4, r4, r8
 8000cf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf8:	e79f      	b.n	8000c3a <__udivmoddi4+0x96>
 8000cfa:	f1c7 0c20 	rsb	ip, r7, #32
 8000cfe:	40bb      	lsls	r3, r7
 8000d00:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d04:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d08:	fa01 f407 	lsl.w	r4, r1, r7
 8000d0c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d10:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d14:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d18:	4325      	orrs	r5, r4
 8000d1a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d1e:	0c2c      	lsrs	r4, r5, #16
 8000d20:	fb08 3319 	mls	r3, r8, r9, r3
 8000d24:	fa1f fa8e 	uxth.w	sl, lr
 8000d28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d2c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d30:	429c      	cmp	r4, r3
 8000d32:	fa02 f207 	lsl.w	r2, r2, r7
 8000d36:	fa00 f107 	lsl.w	r1, r0, r7
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d40:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d44:	f080 8087 	bcs.w	8000e56 <__udivmoddi4+0x2b2>
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	f240 8084 	bls.w	8000e56 <__udivmoddi4+0x2b2>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4473      	add	r3, lr
 8000d54:	1b1b      	subs	r3, r3, r4
 8000d56:	b2ad      	uxth	r5, r5
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d64:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d68:	45a2      	cmp	sl, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d74:	d26b      	bcs.n	8000e4e <__udivmoddi4+0x2aa>
 8000d76:	45a2      	cmp	sl, r4
 8000d78:	d969      	bls.n	8000e4e <__udivmoddi4+0x2aa>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4474      	add	r4, lr
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	fba0 8902 	umull	r8, r9, r0, r2
 8000d86:	eba4 040a 	sub.w	r4, r4, sl
 8000d8a:	454c      	cmp	r4, r9
 8000d8c:	46c2      	mov	sl, r8
 8000d8e:	464b      	mov	r3, r9
 8000d90:	d354      	bcc.n	8000e3c <__udivmoddi4+0x298>
 8000d92:	d051      	beq.n	8000e38 <__udivmoddi4+0x294>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d069      	beq.n	8000e6c <__udivmoddi4+0x2c8>
 8000d98:	ebb1 050a 	subs.w	r5, r1, sl
 8000d9c:	eb64 0403 	sbc.w	r4, r4, r3
 8000da0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000da4:	40fd      	lsrs	r5, r7
 8000da6:	40fc      	lsrs	r4, r7
 8000da8:	ea4c 0505 	orr.w	r5, ip, r5
 8000dac:	e9c6 5400 	strd	r5, r4, [r6]
 8000db0:	2700      	movs	r7, #0
 8000db2:	e747      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dbc:	4095      	lsls	r5, r2
 8000dbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dca:	4338      	orrs	r0, r7
 8000dcc:	0c01      	lsrs	r1, r0, #16
 8000dce:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dd2:	fa1f f885 	uxth.w	r8, r5
 8000dd6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dde:	fb07 f308 	mul.w	r3, r7, r8
 8000de2:	428b      	cmp	r3, r1
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x256>
 8000dea:	1869      	adds	r1, r5, r1
 8000dec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000df0:	d22f      	bcs.n	8000e52 <__udivmoddi4+0x2ae>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d92d      	bls.n	8000e52 <__udivmoddi4+0x2ae>
 8000df6:	3f02      	subs	r7, #2
 8000df8:	4429      	add	r1, r5
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	b281      	uxth	r1, r0
 8000dfe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e02:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb00 f308 	mul.w	r3, r0, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x27e>
 8000e12:	1869      	adds	r1, r5, r1
 8000e14:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e18:	d217      	bcs.n	8000e4a <__udivmoddi4+0x2a6>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d915      	bls.n	8000e4a <__udivmoddi4+0x2a6>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4429      	add	r1, r5
 8000e22:	1ac9      	subs	r1, r1, r3
 8000e24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e28:	e73b      	b.n	8000ca2 <__udivmoddi4+0xfe>
 8000e2a:	4637      	mov	r7, r6
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	e709      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000e30:	4607      	mov	r7, r0
 8000e32:	e6e7      	b.n	8000c04 <__udivmoddi4+0x60>
 8000e34:	4618      	mov	r0, r3
 8000e36:	e6fb      	b.n	8000c30 <__udivmoddi4+0x8c>
 8000e38:	4541      	cmp	r1, r8
 8000e3a:	d2ab      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e3c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e40:	eb69 020e 	sbc.w	r2, r9, lr
 8000e44:	3801      	subs	r0, #1
 8000e46:	4613      	mov	r3, r2
 8000e48:	e7a4      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4a:	4660      	mov	r0, ip
 8000e4c:	e7e9      	b.n	8000e22 <__udivmoddi4+0x27e>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	e795      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e52:	4667      	mov	r7, ip
 8000e54:	e7d1      	b.n	8000dfa <__udivmoddi4+0x256>
 8000e56:	4681      	mov	r9, r0
 8000e58:	e77c      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	442c      	add	r4, r5
 8000e5e:	e747      	b.n	8000cf0 <__udivmoddi4+0x14c>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	442b      	add	r3, r5
 8000e66:	e72f      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e68:	4638      	mov	r0, r7
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xda>
 8000e6c:	4637      	mov	r7, r6
 8000e6e:	e6e9      	b.n	8000c44 <__udivmoddi4+0xa0>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <strlen>:
 8000e74:	4603      	mov	r3, r0
 8000e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d1fb      	bne.n	8000e76 <strlen+0x2>
 8000e7e:	1a18      	subs	r0, r3, r0
 8000e80:	3801      	subs	r0, #1
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_dcmpun>:
 8000e84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e8c:	d102      	bne.n	8000e94 <__aeabi_dcmpun+0x10>
 8000e8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e92:	d10a      	bne.n	8000eaa <__aeabi_dcmpun+0x26>
 8000e94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e9c:	d102      	bne.n	8000ea4 <__aeabi_dcmpun+0x20>
 8000e9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ea2:	d102      	bne.n	8000eaa <__aeabi_dcmpun+0x26>
 8000ea4:	f04f 0000 	mov.w	r0, #0
 8000ea8:	4770      	bx	lr
 8000eaa:	f04f 0001 	mov.w	r0, #1
 8000eae:	4770      	bx	lr

08000eb0 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 8000eb0:	ee70 0a60 	vsub.f32	s1, s0, s1
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <pid_calculate_roll+0xac>)
 8000eb6:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <pid_calculate_roll+0xb0>)
 8000ebc:	edd3 6a00 	vldr	s13, [r3]
 8000ec0:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8000ec4:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <pid_calculate_roll+0xb4>)
 8000ec6:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <pid_calculate_roll+0xb8>)
 8000ecc:	edd3 7a00 	vldr	s15, [r3]
 8000ed0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8000ed4:	eddf 5a25 	vldr	s11, [pc, #148]	; 8000f6c <pid_calculate_roll+0xbc>
 8000ed8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <pid_calculate_roll+0xc0>)
 8000ede:	ed93 7a00 	vldr	s14, [r3]
 8000ee2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ee6:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <pid_calculate_roll+0xc4>)
 8000eec:	ed93 6a00 	vldr	s12, [r3]
 8000ef0:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8000ef4:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <pid_calculate_roll+0xc8>)
 8000efa:	ed92 6a00 	vldr	s12, [r2]
 8000efe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000f02:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <pid_calculate_roll+0xcc>)
 8000f04:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8000f08:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8000f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <pid_calculate_roll+0xd0>)
 8000f16:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <pid_calculate_roll+0xd4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	425a      	negs	r2, r3
 8000f20:	ee07 2a10 	vmov	s14, r2
 8000f24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f30:	d40c      	bmi.n	8000f4c <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 8000f32:	ee07 3a10 	vmov	s14, r3
 8000f36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f42:	dd06      	ble.n	8000f52 <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <pid_calculate_roll+0xd0>)
 8000f46:	ed83 7a00 	vstr	s14, [r3]
 8000f4a:	e002      	b.n	8000f52 <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <pid_calculate_roll+0xd0>)
 8000f4e:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <pid_calculate_roll+0xd0>)
 8000f54:	ed93 0a00 	vldr	s0, [r3]
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000025c 	.word	0x2000025c
 8000f60:	20000018 	.word	0x20000018
 8000f64:	200002bc 	.word	0x200002bc
 8000f68:	20000014 	.word	0x20000014
 8000f6c:	3b012912 	.word	0x3b012912
 8000f70:	200002c8 	.word	0x200002c8
 8000f74:	20000260 	.word	0x20000260
 8000f78:	20000010 	.word	0x20000010
 8000f7c:	200002a8 	.word	0x200002a8
 8000f80:	20000264 	.word	0x20000264
 8000f84:	2000001c 	.word	0x2000001c

08000f88 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <reset_pid_roll+0x14>)
 8000f8c:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <reset_pid_roll+0x18>)
 8000f90:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <reset_pid_roll+0x1c>)
 8000f94:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <reset_pid_roll+0x20>)
 8000f98:	6013      	str	r3, [r2, #0]

}
 8000f9a:	4770      	bx	lr
 8000f9c:	200002bc 	.word	0x200002bc
 8000fa0:	200002c8 	.word	0x200002c8
 8000fa4:	200002a8 	.word	0x200002a8
 8000fa8:	20000264 	.word	0x20000264

08000fac <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 8000fac:	ee70 0a60 	vsub.f32	s1, s0, s1
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <pid_calculate_pitch+0xac>)
 8000fb2:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 8000fb6:	4b29      	ldr	r3, [pc, #164]	; (800105c <pid_calculate_pitch+0xb0>)
 8000fb8:	edd3 6a00 	vldr	s13, [r3]
 8000fbc:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <pid_calculate_pitch+0xb4>)
 8000fc2:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <pid_calculate_pitch+0xb8>)
 8000fc8:	edd3 7a00 	vldr	s15, [r3]
 8000fcc:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8000fd0:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001068 <pid_calculate_pitch+0xbc>
 8000fd4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <pid_calculate_pitch+0xc0>)
 8000fda:	ed93 7a00 	vldr	s14, [r3]
 8000fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fe2:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <pid_calculate_pitch+0xc4>)
 8000fe8:	ed93 6a00 	vldr	s12, [r3]
 8000fec:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8000ff0:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8000ff4:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <pid_calculate_pitch+0xc8>)
 8000ff6:	ed92 6a00 	vldr	s12, [r2]
 8000ffa:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <pid_calculate_pitch+0xcc>)
 8001000:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 8001004:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8001008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800100c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <pid_calculate_pitch+0xd0>)
 8001012:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <pid_calculate_pitch+0xd4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	425a      	negs	r2, r3
 800101c:	ee07 2a10 	vmov	s14, r2
 8001020:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d40c      	bmi.n	8001048 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 800102e:	ee07 3a10 	vmov	s14, r3
 8001032:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	dd06      	ble.n	800104e <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <pid_calculate_pitch+0xd0>)
 8001042:	ed83 7a00 	vstr	s14, [r3]
 8001046:	e002      	b.n	800104e <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <pid_calculate_pitch+0xd0>)
 800104a:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <pid_calculate_pitch+0xd0>)
 8001050:	ed93 0a00 	vldr	s0, [r3]
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000250 	.word	0x20000250
 800105c:	20000008 	.word	0x20000008
 8001060:	200002b4 	.word	0x200002b4
 8001064:	20000004 	.word	0x20000004
 8001068:	3b012912 	.word	0x3b012912
 800106c:	200002b8 	.word	0x200002b8
 8001070:	20000254 	.word	0x20000254
 8001074:	20000000 	.word	0x20000000
 8001078:	200002ac 	.word	0x200002ac
 800107c:	20000258 	.word	0x20000258
 8001080:	2000000c 	.word	0x2000000c

08001084 <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <reset_pid_pitch+0x14>)
 8001088:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <reset_pid_pitch+0x18>)
 800108c:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <reset_pid_pitch+0x1c>)
 8001090:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <reset_pid_pitch+0x20>)
 8001094:	6013      	str	r3, [r2, #0]

}
 8001096:	4770      	bx	lr
 8001098:	200002b4 	.word	0x200002b4
 800109c:	200002b8 	.word	0x200002b8
 80010a0:	200002ac 	.word	0x200002ac
 80010a4:	20000258 	.word	0x20000258

080010a8 <reset_pid_yaw>:
	return yaw_output;
}

void reset_pid_yaw(){

	yaw_p = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <reset_pid_yaw+0x14>)
 80010ac:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <reset_pid_yaw+0x18>)
 80010b0:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <reset_pid_yaw+0x1c>)
 80010b4:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <reset_pid_yaw+0x20>)
 80010b8:	6013      	str	r3, [r2, #0]

}
 80010ba:	4770      	bx	lr
 80010bc:	200002c4 	.word	0x200002c4
 80010c0:	200002c0 	.word	0x200002c0
 80010c4:	200002b0 	.word	0x200002b0
 80010c8:	20000268 	.word	0x20000268

080010cc <setLPF>:
	}
	return 0;
}

inv_error_t setLPF(unsigned short lpf)
{
 80010cc:	b508      	push	{r3, lr}
	return mpu_set_lpf(lpf);
 80010ce:	f002 fead 	bl	8003e2c <mpu_set_lpf>
}
 80010d2:	bd08      	pop	{r3, pc}

080010d4 <setSampleRate>:
	}
	return 0;
}

inv_error_t setSampleRate(unsigned short rate)
{
 80010d4:	b508      	push	{r3, lr}
    return mpu_set_sample_rate(rate);
 80010d6:	f003 fa47 	bl	8004568 <mpu_set_sample_rate>
}
 80010da:	bd08      	pop	{r3, pc}

080010dc <setCompassSampleRate>:
	}
	return 0;
}

inv_error_t setCompassSampleRate(unsigned short rate)
{
 80010dc:	b508      	push	{r3, lr}
	return mpu_set_compass_sample_rate(rate);
 80010de:	f002 feff 	bl	8003ee0 <mpu_set_compass_sample_rate>
}
 80010e2:	bd08      	pop	{r3, pc}

080010e4 <getGyroSens>:
	
	return 0;
}

float getGyroSens(void)
{
 80010e4:	b500      	push	{lr}
 80010e6:	b083      	sub	sp, #12
	float sens;
	if (mpu_get_gyro_sens(&sens) == INV_SUCCESS)
 80010e8:	a801      	add	r0, sp, #4
 80010ea:	f002 ff2d 	bl	8003f48 <mpu_get_gyro_sens>
 80010ee:	b920      	cbnz	r0, 80010fa <getGyroSens+0x16>
	{
		return sens;
 80010f0:	ed9d 0a01 	vldr	s0, [sp, #4]
	}
	return 0;
}
 80010f4:	b003      	add	sp, #12
 80010f6:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 80010fa:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8001100 <getGyroSens+0x1c>
 80010fe:	e7f9      	b.n	80010f4 <getGyroSens+0x10>
 8001100:	00000000 	.word	0x00000000

08001104 <setGyroFSR>:
{
 8001104:	b510      	push	{r4, lr}
	err = mpu_set_gyro_fsr(fsr);
 8001106:	f002 fdb5 	bl	8003c74 <mpu_set_gyro_fsr>
	if (err == INV_SUCCESS)
 800110a:	4604      	mov	r4, r0
 800110c:	b108      	cbz	r0, 8001112 <setGyroFSR+0xe>
}
 800110e:	4620      	mov	r0, r4
 8001110:	bd10      	pop	{r4, pc}
		_gSense = getGyroSens();
 8001112:	f7ff ffe7 	bl	80010e4 <getGyroSens>
 8001116:	4b02      	ldr	r3, [pc, #8]	; (8001120 <setGyroFSR+0x1c>)
 8001118:	ed83 0a00 	vstr	s0, [r3]
	return err;
 800111c:	e7f7      	b.n	800110e <setGyroFSR+0xa>
 800111e:	bf00      	nop
 8001120:	200002cc 	.word	0x200002cc

08001124 <getAccelSens>:
	
unsigned short getAccelSens(void)
{
 8001124:	b500      	push	{lr}
 8001126:	b083      	sub	sp, #12
	unsigned short sens;
	if (mpu_get_accel_sens(&sens) == INV_SUCCESS)
 8001128:	f10d 0006 	add.w	r0, sp, #6
 800112c:	f002 ff32 	bl	8003f94 <mpu_get_accel_sens>
 8001130:	b920      	cbnz	r0, 800113c <getAccelSens+0x18>
	{
		return sens;
 8001132:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
	return 0;
}
 8001136:	b003      	add	sp, #12
 8001138:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 800113c:	2000      	movs	r0, #0
 800113e:	e7fa      	b.n	8001136 <getAccelSens+0x12>

08001140 <setAccelFSR>:
{
 8001140:	b510      	push	{r4, lr}
	err = mpu_set_accel_fsr(fsr);
 8001142:	f002 fe05 	bl	8003d50 <mpu_set_accel_fsr>
	if (err == INV_SUCCESS)
 8001146:	4604      	mov	r4, r0
 8001148:	b108      	cbz	r0, 800114e <setAccelFSR+0xe>
}
 800114a:	4620      	mov	r0, r4
 800114c:	bd10      	pop	{r4, pc}
		_aSense = getAccelSens();
 800114e:	f7ff ffe9 	bl	8001124 <getAccelSens>
 8001152:	4b01      	ldr	r3, [pc, #4]	; (8001158 <setAccelFSR+0x18>)
 8001154:	8018      	strh	r0, [r3, #0]
	return err;
 8001156:	e7f8      	b.n	800114a <setAccelFSR+0xa>
 8001158:	2000031c 	.word	0x2000031c

0800115c <setSensors>:
	
	return INV_SUCCESS;
}

inv_error_t setSensors(unsigned char sensors)
{
 800115c:	b508      	push	{r3, lr}
	return mpu_set_sensors(sensors);
 800115e:	f003 fa59 	bl	8004614 <mpu_set_sensors>
}
 8001162:	bd08      	pop	{r3, pc}

08001164 <begin>:
{
 8001164:	b510      	push	{r4, lr}
	result = mpu_init(&int_param);
 8001166:	4668      	mov	r0, sp
 8001168:	f003 fb20 	bl	80047ac <mpu_init>
	if (result)
 800116c:	4604      	mov	r4, r0
 800116e:	b108      	cbz	r0, 8001174 <begin+0x10>
}
 8001170:	4620      	mov	r0, r4
 8001172:	bd10      	pop	{r4, pc}
	mpu_set_bypass(1); // Place all slaves (including compass) on primary bus
 8001174:	2001      	movs	r0, #1
 8001176:	f002 ff6b 	bl	8004050 <mpu_set_bypass>
	setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
 800117a:	2079      	movs	r0, #121	; 0x79
 800117c:	f7ff ffee 	bl	800115c <setSensors>
	_gSense = getGyroSens();
 8001180:	f7ff ffb0 	bl	80010e4 <getGyroSens>
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <begin+0x30>)
 8001186:	ed83 0a00 	vstr	s0, [r3]
	_aSense = getAccelSens();
 800118a:	f7ff ffcb 	bl	8001124 <getAccelSens>
 800118e:	4b02      	ldr	r3, [pc, #8]	; (8001198 <begin+0x34>)
 8001190:	8018      	strh	r0, [r3, #0]
	return result;
 8001192:	e7ed      	b.n	8001170 <begin+0xc>
 8001194:	200002cc 	.word	0x200002cc
 8001198:	2000031c 	.word	0x2000031c

0800119c <updateAccel>:
	
	return aErr | gErr | mErr | tErr;
}

int updateAccel(void)
{
 800119c:	b500      	push	{lr}
 800119e:	b083      	sub	sp, #12
	short data[3];
	
	if (mpu_get_accel_reg(data, &time))
 80011a0:	490a      	ldr	r1, [pc, #40]	; (80011cc <updateAccel+0x30>)
 80011a2:	4668      	mov	r0, sp
 80011a4:	f002 fbcc 	bl	8003940 <mpu_get_accel_reg>
 80011a8:	b970      	cbnz	r0, 80011c8 <updateAccel+0x2c>
	{
		return INV_ERROR;		
	}
	ax = data[X_AXIS];
 80011aa:	f9bd 2000 	ldrsh.w	r2, [sp]
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <updateAccel+0x34>)
 80011b0:	601a      	str	r2, [r3, #0]
	ay = data[Y_AXIS];
 80011b2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <updateAccel+0x38>)
 80011b8:	601a      	str	r2, [r3, #0]
	az = data[Z_AXIS];
 80011ba:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <updateAccel+0x3c>)
 80011c0:	601a      	str	r2, [r3, #0]
	return INV_SUCCESS;
}
 80011c2:	b003      	add	sp, #12
 80011c4:	f85d fb04 	ldr.w	pc, [sp], #4
		return INV_ERROR;		
 80011c8:	2020      	movs	r0, #32
 80011ca:	e7fa      	b.n	80011c2 <updateAccel+0x26>
 80011cc:	200002f4 	.word	0x200002f4
 80011d0:	200002e4 	.word	0x200002e4
 80011d4:	20000314 	.word	0x20000314
 80011d8:	200002d8 	.word	0x200002d8

080011dc <updateGyro>:

int updateGyro(void)
{
 80011dc:	b500      	push	{lr}
 80011de:	b083      	sub	sp, #12
	short data[3];
	
	if (mpu_get_gyro_reg(data, &time))
 80011e0:	490a      	ldr	r1, [pc, #40]	; (800120c <updateGyro+0x30>)
 80011e2:	4668      	mov	r0, sp
 80011e4:	f002 fb74 	bl	80038d0 <mpu_get_gyro_reg>
 80011e8:	b970      	cbnz	r0, 8001208 <updateGyro+0x2c>
	{
		return INV_ERROR;		
	}
	gx = data[X_AXIS];
 80011ea:	f9bd 2000 	ldrsh.w	r2, [sp]
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <updateGyro+0x34>)
 80011f0:	601a      	str	r2, [r3, #0]
	gy = data[Y_AXIS];
 80011f2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <updateGyro+0x38>)
 80011f8:	601a      	str	r2, [r3, #0]
	gz = data[Z_AXIS];
 80011fa:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <updateGyro+0x3c>)
 8001200:	601a      	str	r2, [r3, #0]
	return INV_SUCCESS;
}
 8001202:	b003      	add	sp, #12
 8001204:	f85d fb04 	ldr.w	pc, [sp], #4
		return INV_ERROR;		
 8001208:	2020      	movs	r0, #32
 800120a:	e7fa      	b.n	8001202 <updateGyro+0x26>
 800120c:	200002f4 	.word	0x200002f4
 8001210:	2000030c 	.word	0x2000030c
 8001214:	200002d4 	.word	0x200002d4
 8001218:	200002f8 	.word	0x200002f8

0800121c <updateCompass>:

int updateCompass(void)
{
 800121c:	b500      	push	{lr}
 800121e:	b083      	sub	sp, #12
	short data[3];
	
	if (mpu_get_compass_reg(data, &time))
 8001220:	490a      	ldr	r1, [pc, #40]	; (800124c <updateCompass+0x30>)
 8001222:	4668      	mov	r0, sp
 8001224:	f003 fbee 	bl	8004a04 <mpu_get_compass_reg>
 8001228:	b970      	cbnz	r0, 8001248 <updateCompass+0x2c>
	{
		return INV_ERROR;		
	}
	mx = data[X_AXIS];
 800122a:	f9bd 2000 	ldrsh.w	r2, [sp]
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <updateCompass+0x34>)
 8001230:	601a      	str	r2, [r3, #0]
	my = data[Y_AXIS];
 8001232:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <updateCompass+0x38>)
 8001238:	601a      	str	r2, [r3, #0]
	mz = data[Z_AXIS];
 800123a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <updateCompass+0x3c>)
 8001240:	601a      	str	r2, [r3, #0]
	return INV_SUCCESS;
}
 8001242:	b003      	add	sp, #12
 8001244:	f85d fb04 	ldr.w	pc, [sp], #4
		return INV_ERROR;		
 8001248:	2020      	movs	r0, #32
 800124a:	e7fa      	b.n	8001242 <updateCompass+0x26>
 800124c:	200002f4 	.word	0x200002f4
 8001250:	20000318 	.word	0x20000318
 8001254:	200002e0 	.word	0x200002e0
 8001258:	200002fc 	.word	0x200002fc

0800125c <updateTemperature>:

inv_error_t updateTemperature(void)
{
 800125c:	b508      	push	{r3, lr}
	return mpu_get_temperature(&temperature, &time);
 800125e:	4902      	ldr	r1, [pc, #8]	; (8001268 <updateTemperature+0xc>)
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <updateTemperature+0x10>)
 8001262:	f002 fba5 	bl	80039b0 <mpu_get_temperature>
}
 8001266:	bd08      	pop	{r3, pc}
 8001268:	200002f4 	.word	0x200002f4
 800126c:	200002dc 	.word	0x200002dc

08001270 <update>:
{
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	4605      	mov	r5, r0
	if (sensors & UPDATE_ACCEL)
 8001274:	f010 0f02 	tst.w	r0, #2
 8001278:	d110      	bne.n	800129c <update+0x2c>
	inv_error_t aErr = INV_SUCCESS;
 800127a:	2400      	movs	r4, #0
	if (sensors & UPDATE_GYRO)
 800127c:	f015 0f04 	tst.w	r5, #4
 8001280:	d110      	bne.n	80012a4 <update+0x34>
	inv_error_t gErr = INV_SUCCESS;
 8001282:	2700      	movs	r7, #0
	if (sensors & UPDATE_COMPASS)
 8001284:	f015 0f08 	tst.w	r5, #8
 8001288:	d110      	bne.n	80012ac <update+0x3c>
	inv_error_t mErr = INV_SUCCESS;
 800128a:	2600      	movs	r6, #0
	if (sensors & UPDATE_TEMP)
 800128c:	f015 0f10 	tst.w	r5, #16
 8001290:	d110      	bne.n	80012b4 <update+0x44>
	inv_error_t tErr = INV_SUCCESS;
 8001292:	2000      	movs	r0, #0
	return aErr | gErr | mErr | tErr;
 8001294:	433c      	orrs	r4, r7
 8001296:	4334      	orrs	r4, r6
}
 8001298:	4320      	orrs	r0, r4
 800129a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		aErr = updateAccel();
 800129c:	f7ff ff7e 	bl	800119c <updateAccel>
 80012a0:	4604      	mov	r4, r0
 80012a2:	e7eb      	b.n	800127c <update+0xc>
		gErr = updateGyro();
 80012a4:	f7ff ff9a 	bl	80011dc <updateGyro>
 80012a8:	4607      	mov	r7, r0
 80012aa:	e7eb      	b.n	8001284 <update+0x14>
		mErr = updateCompass();
 80012ac:	f7ff ffb6 	bl	800121c <updateCompass>
 80012b0:	4606      	mov	r6, r0
 80012b2:	e7eb      	b.n	800128c <update+0x1c>
		tErr = updateTemperature();
 80012b4:	f7ff ffd2 	bl	800125c <updateTemperature>
 80012b8:	e7ec      	b.n	8001294 <update+0x24>

080012ba <selfTest>:

int selfTest(unsigned char debug)
{
 80012ba:	b500      	push	{lr}
 80012bc:	b087      	sub	sp, #28
	long gyro[3], accel[3];
	return mpu_run_self_test(gyro, accel);
 80012be:	4669      	mov	r1, sp
 80012c0:	a803      	add	r0, sp, #12
 80012c2:	f003 fb49 	bl	8004958 <mpu_run_self_test>
}
 80012c6:	b007      	add	sp, #28
 80012c8:	f85d fb04 	ldr.w	pc, [sp], #4

080012cc <calcAccel>:
	return dmp_set_pedometer_walk_time(time);
}

float calcAccel(int axis)
{
	return (float) axis / (float) _aSense;
 80012cc:	ee07 0a90 	vmov	s15, r0
 80012d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <calcAccel+0x1c>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	ee00 3a10 	vmov	s0, r3
 80012dc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 80012e0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2000031c 	.word	0x2000031c

080012ec <calcGyro>:

float calcGyro(int axis)
{
	return (float) axis / (float) _gSense;
 80012ec:	ee07 0a90 	vmov	s15, r0
 80012f0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <calcGyro+0x14>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
}
 80012fa:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80012fe:	4770      	bx	lr
 8001300:	200002cc 	.word	0x200002cc

08001304 <calcMag>:

float calcMag(int axis)
{
	return (float) axis / (float) _mSense;
 8001304:	ee07 0a90 	vmov	s15, r0
 8001308:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800130c:	4b02      	ldr	r3, [pc, #8]	; (8001318 <calcMag+0x14>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
}
 8001312:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001316:	4770      	bx	lr
 8001318:	200002e8 	.word	0x200002e8

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b510      	push	{r4, lr}
 800131e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_InitTick+0x40>)
 8001322:	7818      	ldrb	r0, [r3, #0]
 8001324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001328:	fbb3 f3f0 	udiv	r3, r3, r0
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_InitTick+0x44>)
 800132e:	6810      	ldr	r0, [r2, #0]
 8001330:	fbb0 f0f3 	udiv	r0, r0, r3
 8001334:	f000 fa44 	bl	80017c0 <HAL_SYSTICK_Config>
 8001338:	b968      	cbnz	r0, 8001356 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	2c0f      	cmp	r4, #15
 800133c:	d901      	bls.n	8001342 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800133e:	2001      	movs	r0, #1
 8001340:	e00a      	b.n	8001358 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001342:	2200      	movs	r2, #0
 8001344:	4621      	mov	r1, r4
 8001346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800134a:	f000 f9f7 	bl	800173c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_InitTick+0x48>)
 8001350:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2000      	movs	r0, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001356:	2001      	movs	r0, #1
}
 8001358:	bd10      	pop	{r4, pc}
 800135a:	bf00      	nop
 800135c:	20000020 	.word	0x20000020
 8001360:	20000060 	.word	0x20000060
 8001364:	20000024 	.word	0x20000024

08001368 <HAL_Init>:
{
 8001368:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_Init+0x30>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001372:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800137a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001382:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f9c7 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff ffc6 	bl	800131c <HAL_InitTick>
  HAL_MspInit();
 8001390:	f003 ff1c 	bl	80051cc <HAL_MspInit>
}
 8001394:	2000      	movs	r0, #0
 8001396:	bd08      	pop	{r3, pc}
 8001398:	40023c00 	.word	0x40023c00

0800139c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800139c:	4a03      	ldr	r2, [pc, #12]	; (80013ac <HAL_IncTick+0x10>)
 800139e:	6811      	ldr	r1, [r2, #0]
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_IncTick+0x14>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	440b      	add	r3, r1
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000324 	.word	0x20000324
 80013b0:	20000020 	.word	0x20000020

080013b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013b4:	4b01      	ldr	r3, [pc, #4]	; (80013bc <HAL_GetTick+0x8>)
 80013b6:	6818      	ldr	r0, [r3, #0]
}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000324 	.word	0x20000324

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff fff6 	bl	80013b4 <HAL_GetTick>
 80013c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80013ce:	d002      	beq.n	80013d6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_Delay+0x24>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d6:	f7ff ffed 	bl	80013b4 <HAL_GetTick>
 80013da:	1b40      	subs	r0, r0, r5
 80013dc:	42a0      	cmp	r0, r4
 80013de:	d3fa      	bcc.n	80013d6 <HAL_Delay+0x16>
  {
  }
}
 80013e0:	bd38      	pop	{r3, r4, r5, pc}
 80013e2:	bf00      	nop
 80013e4:	20000020 	.word	0x20000020

080013e8 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013e8:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <ADC_Init+0x12c>)
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80013f0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	6841      	ldr	r1, [r0, #4]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013fa:	6802      	ldr	r2, [r0, #0]
 80013fc:	6853      	ldr	r3, [r2, #4]
 80013fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001402:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001404:	6802      	ldr	r2, [r0, #0]
 8001406:	6853      	ldr	r3, [r2, #4]
 8001408:	6901      	ldr	r1, [r0, #16]
 800140a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800140e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001410:	6802      	ldr	r2, [r0, #0]
 8001412:	6853      	ldr	r3, [r2, #4]
 8001414:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001418:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800141a:	6802      	ldr	r2, [r0, #0]
 800141c:	6853      	ldr	r3, [r2, #4]
 800141e:	6881      	ldr	r1, [r0, #8]
 8001420:	430b      	orrs	r3, r1
 8001422:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001424:	6802      	ldr	r2, [r0, #0]
 8001426:	6893      	ldr	r3, [r2, #8]
 8001428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800142c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800142e:	6802      	ldr	r2, [r0, #0]
 8001430:	6893      	ldr	r3, [r2, #8]
 8001432:	68c1      	ldr	r1, [r0, #12]
 8001434:	430b      	orrs	r3, r1
 8001436:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001438:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <ADC_Init+0x130>)
 800143c:	429a      	cmp	r2, r3
 800143e:	d04b      	beq.n	80014d8 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001440:	6802      	ldr	r2, [r0, #0]
 8001442:	6893      	ldr	r3, [r2, #8]
 8001444:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001448:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800144a:	6802      	ldr	r2, [r0, #0]
 800144c:	6893      	ldr	r3, [r2, #8]
 800144e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001450:	430b      	orrs	r3, r1
 8001452:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001454:	6802      	ldr	r2, [r0, #0]
 8001456:	6893      	ldr	r3, [r2, #8]
 8001458:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800145c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800145e:	6802      	ldr	r2, [r0, #0]
 8001460:	6893      	ldr	r3, [r2, #8]
 8001462:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001464:	430b      	orrs	r3, r1
 8001466:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001468:	6802      	ldr	r2, [r0, #0]
 800146a:	6893      	ldr	r3, [r2, #8]
 800146c:	f023 0302 	bic.w	r3, r3, #2
 8001470:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001472:	6802      	ldr	r2, [r0, #0]
 8001474:	6893      	ldr	r3, [r2, #8]
 8001476:	7e01      	ldrb	r1, [r0, #24]
 8001478:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800147c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800147e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d133      	bne.n	80014ee <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001486:	6802      	ldr	r2, [r0, #0]
 8001488:	6853      	ldr	r3, [r2, #4]
 800148a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800148e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001490:	6802      	ldr	r2, [r0, #0]
 8001492:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001494:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001498:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800149a:	6801      	ldr	r1, [r0, #0]
 800149c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800149e:	69c2      	ldr	r2, [r0, #28]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80014a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014a8:	6802      	ldr	r2, [r0, #0]
 80014aa:	6893      	ldr	r3, [r2, #8]
 80014ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014b0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014b2:	6802      	ldr	r2, [r0, #0]
 80014b4:	6893      	ldr	r3, [r2, #8]
 80014b6:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80014ba:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80014be:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014c0:	6802      	ldr	r2, [r0, #0]
 80014c2:	6893      	ldr	r3, [r2, #8]
 80014c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014c8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014ca:	6802      	ldr	r2, [r0, #0]
 80014cc:	6893      	ldr	r3, [r2, #8]
 80014ce:	6941      	ldr	r1, [r0, #20]
 80014d0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80014d4:	6093      	str	r3, [r2, #8]
}
 80014d6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014d8:	6802      	ldr	r2, [r0, #0]
 80014da:	6893      	ldr	r3, [r2, #8]
 80014dc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80014e0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014e2:	6802      	ldr	r2, [r0, #0]
 80014e4:	6893      	ldr	r3, [r2, #8]
 80014e6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80014ea:	6093      	str	r3, [r2, #8]
 80014ec:	e7bc      	b.n	8001468 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014ee:	6802      	ldr	r2, [r0, #0]
 80014f0:	6853      	ldr	r3, [r2, #4]
 80014f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f6:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014f8:	6802      	ldr	r2, [r0, #0]
 80014fa:	6853      	ldr	r3, [r2, #4]
 80014fc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001500:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001502:	6801      	ldr	r1, [r0, #0]
 8001504:	684b      	ldr	r3, [r1, #4]
 8001506:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001508:	3a01      	subs	r2, #1
 800150a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800150e:	604b      	str	r3, [r1, #4]
 8001510:	e7be      	b.n	8001490 <ADC_Init+0xa8>
 8001512:	bf00      	nop
 8001514:	40012300 	.word	0x40012300
 8001518:	0f000001 	.word	0x0f000001

0800151c <HAL_ADC_Init>:
  if(hadc == NULL)
 800151c:	b338      	cbz	r0, 800156e <HAL_ADC_Init+0x52>
{
 800151e:	b510      	push	{r4, lr}
 8001520:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001522:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001524:	b143      	cbz	r3, 8001538 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001528:	f013 0f10 	tst.w	r3, #16
 800152c:	d00b      	beq.n	8001546 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800152e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001530:	2300      	movs	r3, #0
 8001532:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001536:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001538:	f003 fe64 	bl	8005204 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800153c:	2300      	movs	r3, #0
 800153e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001540:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001544:	e7ef      	b.n	8001526 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001548:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800154c:	f023 0302 	bic.w	r3, r3, #2
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001556:	4620      	mov	r0, r4
 8001558:	f7ff ff46 	bl	80013e8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800155c:	2000      	movs	r0, #0
 800155e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001562:	f023 0303 	bic.w	r3, r3, #3
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6423      	str	r3, [r4, #64]	; 0x40
 800156c:	e7e0      	b.n	8001530 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800156e:	2001      	movs	r0, #1
}
 8001570:	4770      	bx	lr
	...

08001574 <HAL_ADC_ConfigChannel>:
{
 8001574:	b430      	push	{r4, r5}
 8001576:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800157c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001580:	2b01      	cmp	r3, #1
 8001582:	f000 80bd 	beq.w	8001700 <HAL_ADC_ConfigChannel+0x18c>
 8001586:	2301      	movs	r3, #1
 8001588:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800158c:	680b      	ldr	r3, [r1, #0]
 800158e:	2b09      	cmp	r3, #9
 8001590:	d93e      	bls.n	8001610 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001592:	6805      	ldr	r5, [r0, #0]
 8001594:	68ea      	ldr	r2, [r5, #12]
 8001596:	b29b      	uxth	r3, r3
 8001598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800159c:	3b1e      	subs	r3, #30
 800159e:	2407      	movs	r4, #7
 80015a0:	fa04 f303 	lsl.w	r3, r4, r3
 80015a4:	ea22 0303 	bic.w	r3, r2, r3
 80015a8:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015aa:	6805      	ldr	r5, [r0, #0]
 80015ac:	68ea      	ldr	r2, [r5, #12]
 80015ae:	688c      	ldr	r4, [r1, #8]
 80015b0:	880b      	ldrh	r3, [r1, #0]
 80015b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015b6:	3b1e      	subs	r3, #30
 80015b8:	fa04 f303 	lsl.w	r3, r4, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80015c0:	684b      	ldr	r3, [r1, #4]
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d83a      	bhi.n	800163c <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015c6:	6805      	ldr	r5, [r0, #0]
 80015c8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015ce:	3b05      	subs	r3, #5
 80015d0:	241f      	movs	r4, #31
 80015d2:	fa04 f303 	lsl.w	r3, r4, r3
 80015d6:	ea22 0303 	bic.w	r3, r2, r3
 80015da:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015dc:	6805      	ldr	r5, [r0, #0]
 80015de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015e0:	684b      	ldr	r3, [r1, #4]
 80015e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015e6:	3b05      	subs	r3, #5
 80015e8:	880c      	ldrh	r4, [r1, #0]
 80015ea:	fa04 f303 	lsl.w	r3, r4, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015f2:	6802      	ldr	r2, [r0, #0]
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <HAL_ADC_ConfigChannel+0x190>)
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d050      	beq.n	800169c <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015fa:	6802      	ldr	r2, [r0, #0]
 80015fc:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_ADC_ConfigChannel+0x190>)
 80015fe:	429a      	cmp	r2, r3
 8001600:	d059      	beq.n	80016b6 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8001602:	2300      	movs	r3, #0
 8001604:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001608:	4618      	mov	r0, r3
}
 800160a:	b002      	add	sp, #8
 800160c:	bc30      	pop	{r4, r5}
 800160e:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001610:	6805      	ldr	r5, [r0, #0]
 8001612:	692a      	ldr	r2, [r5, #16]
 8001614:	b29b      	uxth	r3, r3
 8001616:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800161a:	2407      	movs	r4, #7
 800161c:	fa04 f303 	lsl.w	r3, r4, r3
 8001620:	ea22 0303 	bic.w	r3, r2, r3
 8001624:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001626:	6805      	ldr	r5, [r0, #0]
 8001628:	692a      	ldr	r2, [r5, #16]
 800162a:	688c      	ldr	r4, [r1, #8]
 800162c:	880b      	ldrh	r3, [r1, #0]
 800162e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001632:	fa04 f303 	lsl.w	r3, r4, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	612b      	str	r3, [r5, #16]
 800163a:	e7c1      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800163c:	2b0c      	cmp	r3, #12
 800163e:	d816      	bhi.n	800166e <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001640:	6805      	ldr	r5, [r0, #0]
 8001642:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001644:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001648:	3b23      	subs	r3, #35	; 0x23
 800164a:	241f      	movs	r4, #31
 800164c:	fa04 f303 	lsl.w	r3, r4, r3
 8001650:	ea22 0303 	bic.w	r3, r2, r3
 8001654:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001656:	6805      	ldr	r5, [r0, #0]
 8001658:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800165a:	684b      	ldr	r3, [r1, #4]
 800165c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001660:	3b23      	subs	r3, #35	; 0x23
 8001662:	880c      	ldrh	r4, [r1, #0]
 8001664:	fa04 f303 	lsl.w	r3, r4, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	632b      	str	r3, [r5, #48]	; 0x30
 800166c:	e7c1      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800166e:	6805      	ldr	r5, [r0, #0]
 8001670:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001672:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001676:	3b41      	subs	r3, #65	; 0x41
 8001678:	241f      	movs	r4, #31
 800167a:	fa04 f303 	lsl.w	r3, r4, r3
 800167e:	ea22 0303 	bic.w	r3, r2, r3
 8001682:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001684:	6805      	ldr	r5, [r0, #0]
 8001686:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001688:	684b      	ldr	r3, [r1, #4]
 800168a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800168e:	3b41      	subs	r3, #65	; 0x41
 8001690:	880c      	ldrh	r4, [r1, #0]
 8001692:	fa04 f303 	lsl.w	r3, r4, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	62eb      	str	r3, [r5, #44]	; 0x2c
 800169a:	e7aa      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800169c:	680b      	ldr	r3, [r1, #0]
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d1ab      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_ADC_ConfigChannel+0x194>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80016aa:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	e7a1      	b.n	80015fa <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016b6:	680b      	ldr	r3, [r1, #0]
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_ADC_ConfigChannel+0x198>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d001      	beq.n	80016c2 <HAL_ADC_ConfigChannel+0x14e>
 80016be:	2b11      	cmp	r3, #17
 80016c0:	d19f      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_ADC_ConfigChannel+0x194>)
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80016ca:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016d2:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016d4:	680a      	ldr	r2, [r1, #0]
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_ADC_ConfigChannel+0x198>)
 80016d8:	429a      	cmp	r2, r3
 80016da:	d192      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_ADC_ConfigChannel+0x19c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <HAL_ADC_ConfigChannel+0x1a0>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9b      	lsrs	r3, r3, #18
 80016e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016ec:	005a      	lsls	r2, r3, #1
 80016ee:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 80016f0:	e002      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 80016f2:	9b01      	ldr	r3, [sp, #4]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80016f8:	9b01      	ldr	r3, [sp, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f9      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x17e>
 80016fe:	e780      	b.n	8001602 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8001700:	2002      	movs	r0, #2
 8001702:	e782      	b.n	800160a <HAL_ADC_ConfigChannel+0x96>
 8001704:	40012000 	.word	0x40012000
 8001708:	40012300 	.word	0x40012300
 800170c:	10000012 	.word	0x10000012
 8001710:	20000060 	.word	0x20000060
 8001714:	431bde83 	.word	0x431bde83

08001718 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800171a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	0200      	lsls	r0, r0, #8
 8001726:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800172c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001730:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001734:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_NVIC_SetPriority+0x60>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001746:	f1c3 0407 	rsb	r4, r3, #7
 800174a:	2c04      	cmp	r4, #4
 800174c:	bf28      	it	cs
 800174e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001750:	1d1d      	adds	r5, r3, #4
 8001752:	2d06      	cmp	r5, #6
 8001754:	d918      	bls.n	8001788 <HAL_NVIC_SetPriority+0x4c>
 8001756:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800175c:	fa05 f404 	lsl.w	r4, r5, r4
 8001760:	ea21 0104 	bic.w	r1, r1, r4
 8001764:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001766:	fa05 f303 	lsl.w	r3, r5, r3
 800176a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001770:	2800      	cmp	r0, #0
 8001772:	db0b      	blt.n	800178c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	0109      	lsls	r1, r1, #4
 8001776:	b2c9      	uxtb	r1, r1
 8001778:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800177c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001780:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001784:	bc30      	pop	{r4, r5}
 8001786:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001788:	2300      	movs	r3, #0
 800178a:	e7e5      	b.n	8001758 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	f000 000f 	and.w	r0, r0, #15
 8001790:	0109      	lsls	r1, r1, #4
 8001792:	b2c9      	uxtb	r1, r1
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <HAL_NVIC_SetPriority+0x64>)
 8001796:	5419      	strb	r1, [r3, r0]
 8001798:	e7f4      	b.n	8001784 <HAL_NVIC_SetPriority+0x48>
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00
 80017a0:	e000ed14 	.word	0xe000ed14

080017a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017a4:	2800      	cmp	r0, #0
 80017a6:	db07      	blt.n	80017b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a8:	f000 021f 	and.w	r2, r0, #31
 80017ac:	0940      	lsrs	r0, r0, #5
 80017ae:	2301      	movs	r3, #1
 80017b0:	4093      	lsls	r3, r2
 80017b2:	4a02      	ldr	r2, [pc, #8]	; (80017bc <HAL_NVIC_EnableIRQ+0x18>)
 80017b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	3801      	subs	r0, #1
 80017c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017c6:	d20a      	bcs.n	80017de <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_SYSTICK_Config+0x24>)
 80017ca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_SYSTICK_Config+0x28>)
 80017ce:	21f0      	movs	r1, #240	; 0xf0
 80017d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	2000      	movs	r0, #0
 80017d6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e010 	.word	0xe000e010
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	2b0f      	cmp	r3, #15
 80017f0:	f200 80c5 	bhi.w	800197e <HAL_GPIO_Init+0x192>
{
 80017f4:	b4f0      	push	{r4, r5, r6, r7}
 80017f6:	b082      	sub	sp, #8
 80017f8:	e039      	b.n	800186e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fa:	2204      	movs	r2, #4
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x14>
 80017fe:	2200      	movs	r2, #0
 8001800:	40b2      	lsls	r2, r6
 8001802:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001804:	3402      	adds	r4, #2
 8001806:	4e5e      	ldr	r6, [pc, #376]	; (8001980 <HAL_GPIO_Init+0x194>)
 8001808:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180c:	4a5d      	ldr	r2, [pc, #372]	; (8001984 <HAL_GPIO_Init+0x198>)
 800180e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001810:	43ea      	mvns	r2, r5
 8001812:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001816:	684f      	ldr	r7, [r1, #4]
 8001818:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800181c:	d001      	beq.n	8001822 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800181e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001822:	4c58      	ldr	r4, [pc, #352]	; (8001984 <HAL_GPIO_Init+0x198>)
 8001824:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001826:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001828:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800182c:	684f      	ldr	r7, [r1, #4]
 800182e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001832:	d001      	beq.n	8001838 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001834:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001838:	4c52      	ldr	r4, [pc, #328]	; (8001984 <HAL_GPIO_Init+0x198>)
 800183a:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800183e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001842:	684f      	ldr	r7, [r1, #4]
 8001844:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001848:	d001      	beq.n	800184e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800184a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800184e:	4c4d      	ldr	r4, [pc, #308]	; (8001984 <HAL_GPIO_Init+0x198>)
 8001850:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001852:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001854:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001856:	684e      	ldr	r6, [r1, #4]
 8001858:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800185c:	d001      	beq.n	8001862 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800185e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001862:	4c48      	ldr	r4, [pc, #288]	; (8001984 <HAL_GPIO_Init+0x198>)
 8001864:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	3301      	adds	r3, #1
 8001868:	2b0f      	cmp	r3, #15
 800186a:	f200 8085 	bhi.w	8001978 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 800186e:	2201      	movs	r2, #1
 8001870:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	680c      	ldr	r4, [r1, #0]
 8001874:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001878:	42aa      	cmp	r2, r5
 800187a:	d1f4      	bne.n	8001866 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187c:	684c      	ldr	r4, [r1, #4]
 800187e:	2c02      	cmp	r4, #2
 8001880:	d001      	beq.n	8001886 <HAL_GPIO_Init+0x9a>
 8001882:	2c12      	cmp	r4, #18
 8001884:	d110      	bne.n	80018a8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8001886:	08de      	lsrs	r6, r3, #3
 8001888:	3608      	adds	r6, #8
 800188a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188e:	f003 0407 	and.w	r4, r3, #7
 8001892:	00a7      	lsls	r7, r4, #2
 8001894:	240f      	movs	r4, #15
 8001896:	40bc      	lsls	r4, r7
 8001898:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800189c:	690c      	ldr	r4, [r1, #16]
 800189e:	40bc      	lsls	r4, r7
 80018a0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 80018a4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80018a8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018aa:	005f      	lsls	r7, r3, #1
 80018ac:	2603      	movs	r6, #3
 80018ae:	40be      	lsls	r6, r7
 80018b0:	43f6      	mvns	r6, r6
 80018b2:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b6:	684c      	ldr	r4, [r1, #4]
 80018b8:	f004 0403 	and.w	r4, r4, #3
 80018bc:	40bc      	lsls	r4, r7
 80018be:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80018c2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c4:	684c      	ldr	r4, [r1, #4]
 80018c6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80018ca:	f1bc 0f01 	cmp.w	ip, #1
 80018ce:	d903      	bls.n	80018d8 <HAL_GPIO_Init+0xec>
 80018d0:	2c11      	cmp	r4, #17
 80018d2:	d001      	beq.n	80018d8 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d4:	2c12      	cmp	r4, #18
 80018d6:	d110      	bne.n	80018fa <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 80018d8:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018da:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018de:	68cc      	ldr	r4, [r1, #12]
 80018e0:	40bc      	lsls	r4, r7
 80018e2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 80018e6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80018e8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ea:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018ee:	684c      	ldr	r4, [r1, #4]
 80018f0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80018f4:	409c      	lsls	r4, r3
 80018f6:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80018f8:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80018fa:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fc:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fe:	688a      	ldr	r2, [r1, #8]
 8001900:	40ba      	lsls	r2, r7
 8001902:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8001904:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001906:	684a      	ldr	r2, [r1, #4]
 8001908:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800190c:	d0ab      	beq.n	8001866 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	2200      	movs	r2, #0
 8001910:	9201      	str	r2, [sp, #4]
 8001912:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <HAL_GPIO_Init+0x19c>)
 8001914:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001916:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800191a:	6454      	str	r4, [r2, #68]	; 0x44
 800191c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800191e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001922:	9201      	str	r2, [sp, #4]
 8001924:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001926:	089c      	lsrs	r4, r3, #2
 8001928:	1ca6      	adds	r6, r4, #2
 800192a:	4a15      	ldr	r2, [pc, #84]	; (8001980 <HAL_GPIO_Init+0x194>)
 800192c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001930:	f003 0203 	and.w	r2, r3, #3
 8001934:	0096      	lsls	r6, r2, #2
 8001936:	220f      	movs	r2, #15
 8001938:	40b2      	lsls	r2, r6
 800193a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800193e:	4a13      	ldr	r2, [pc, #76]	; (800198c <HAL_GPIO_Init+0x1a0>)
 8001940:	4290      	cmp	r0, r2
 8001942:	f43f af5c 	beq.w	80017fe <HAL_GPIO_Init+0x12>
 8001946:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800194a:	4290      	cmp	r0, r2
 800194c:	d00e      	beq.n	800196c <HAL_GPIO_Init+0x180>
 800194e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001952:	4290      	cmp	r0, r2
 8001954:	d00c      	beq.n	8001970 <HAL_GPIO_Init+0x184>
 8001956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800195a:	4290      	cmp	r0, r2
 800195c:	d00a      	beq.n	8001974 <HAL_GPIO_Init+0x188>
 800195e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001962:	4290      	cmp	r0, r2
 8001964:	f43f af49 	beq.w	80017fa <HAL_GPIO_Init+0xe>
 8001968:	2207      	movs	r2, #7
 800196a:	e749      	b.n	8001800 <HAL_GPIO_Init+0x14>
 800196c:	2201      	movs	r2, #1
 800196e:	e747      	b.n	8001800 <HAL_GPIO_Init+0x14>
 8001970:	2202      	movs	r2, #2
 8001972:	e745      	b.n	8001800 <HAL_GPIO_Init+0x14>
 8001974:	2203      	movs	r2, #3
 8001976:	e743      	b.n	8001800 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001978:	b002      	add	sp, #8
 800197a:	bcf0      	pop	{r4, r5, r6, r7}
 800197c:	4770      	bx	lr
 800197e:	4770      	bx	lr
 8001980:	40013800 	.word	0x40013800
 8001984:	40013c00 	.word	0x40013c00
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000

08001990 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001990:	b912      	cbnz	r2, 8001998 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001992:	0409      	lsls	r1, r1, #16
 8001994:	6181      	str	r1, [r0, #24]
  }
}
 8001996:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001998:	6181      	str	r1, [r0, #24]
 800199a:	4770      	bx	lr

0800199c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800199c:	6943      	ldr	r3, [r0, #20]
 800199e:	ea31 0303 	bics.w	r3, r1, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a4:	6181      	str	r1, [r0, #24]
  }
}
 80019a6:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	6181      	str	r1, [r0, #24]
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	4203      	tst	r3, r0
 80019b8:	d100      	bne.n	80019bc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80019ba:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019bc:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80019be:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019c0:	f003 fbf6 	bl	80051b0 <HAL_GPIO_EXTI_Callback>
}
 80019c4:	e7f9      	b.n	80019ba <HAL_GPIO_EXTI_IRQHandler+0xa>
 80019c6:	bf00      	nop
 80019c8:	40013c00 	.word	0x40013c00

080019cc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019cc:	6803      	ldr	r3, [r0, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80019d4:	d011      	beq.n	80019fa <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019dc:	2300      	movs	r3, #0
 80019de:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019e0:	2220      	movs	r2, #32
 80019e2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019e6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80019ec:	f042 0204 	orr.w	r2, r2, #4
 80019f0:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80019f6:	2001      	movs	r0, #1
 80019f8:	4770      	bx	lr
  }
  return HAL_OK;
 80019fa:	2000      	movs	r0, #0
}
 80019fc:	4770      	bx	lr

080019fe <I2C_WaitOnFlagUntilTimeout>:
{
 80019fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a00:	4606      	mov	r6, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	4617      	mov	r7, r2
 8001a06:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a08:	e022      	b.n	8001a50 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0a:	f7ff fcd3 	bl	80013b4 <HAL_GetTick>
 8001a0e:	9b06      	ldr	r3, [sp, #24]
 8001a10:	1ac0      	subs	r0, r0, r3
 8001a12:	42a8      	cmp	r0, r5
 8001a14:	d800      	bhi.n	8001a18 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8001a16:	b9dd      	cbnz	r5, 8001a50 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a22:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a26:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8001a28:	f042 0220 	orr.w	r2, r2, #32
 8001a2c:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001a2e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
 8001a34:	e01a      	b.n	8001a6c <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a36:	6833      	ldr	r3, [r6, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	ea24 0303 	bic.w	r3, r4, r3
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	429f      	cmp	r7, r3
 8001a48:	d10f      	bne.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8001a4a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001a4e:	d1dc      	bne.n	8001a0a <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a50:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d0ee      	beq.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x38>
 8001a58:	6833      	ldr	r3, [r6, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	ea24 0303 	bic.w	r3, r4, r3
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	e7ed      	b.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8001a6a:	2000      	movs	r0, #0
}
 8001a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a70:	4604      	mov	r4, r0
 8001a72:	460d      	mov	r5, r1
 8001a74:	4616      	mov	r6, r2
 8001a76:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a78:	e03c      	b.n	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a80:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a88:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a9a:	f042 0204 	orr.w	r2, r2, #4
 8001a9e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001aa0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	e033      	b.n	8001b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa8:	f7ff fc84 	bl	80013b4 <HAL_GetTick>
 8001aac:	1bc0      	subs	r0, r0, r7
 8001aae:	42b0      	cmp	r0, r6
 8001ab0:	d800      	bhi.n	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8001ab2:	b9fe      	cbnz	r6, 8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001abe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ac2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ac4:	f042 0220 	orr.w	r2, r2, #32
 8001ac8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001aca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001ace:	2001      	movs	r0, #1
 8001ad0:	e01e      	b.n	8001b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	ea25 0303 	bic.w	r3, r5, r3
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3300      	adds	r3, #0
 8001ade:	bf18      	it	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	b1a3      	cbz	r3, 8001b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001aec:	d1c5      	bne.n	8001a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8001aee:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8001af2:	d1d9      	bne.n	8001aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001af4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d0ea      	beq.n	8001ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	ea25 0303 	bic.w	r3, r5, r3
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3300      	adds	r3, #0
 8001b08:	bf18      	it	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	e7e9      	b.n	8001ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8001b0e:	2000      	movs	r0, #0
}
 8001b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b14 <I2C_MasterRequestWrite>:
{
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	b083      	sub	sp, #12
 8001b18:	4604      	mov	r4, r0
 8001b1a:	460f      	mov	r7, r1
 8001b1c:	4615      	mov	r5, r2
 8001b1e:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d00d      	beq.n	8001b42 <I2C_MasterRequestWrite+0x2e>
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d00b      	beq.n	8001b42 <I2C_MasterRequestWrite+0x2e>
 8001b2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b2e:	d008      	beq.n	8001b42 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b30:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d10a      	bne.n	8001b4c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b36:	6802      	ldr	r2, [r0, #0]
 8001b38:	6813      	ldr	r3, [r2, #0]
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e004      	b.n	8001b4c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b42:	6822      	ldr	r2, [r4, #0]
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b4c:	9600      	str	r6, [sp, #0]
 8001b4e:	462b      	mov	r3, r5
 8001b50:	2200      	movs	r2, #0
 8001b52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff ff51 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 8001b5c:	bb18      	cbnz	r0, 8001ba6 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b5e:	6923      	ldr	r3, [r4, #16]
 8001b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b64:	d10d      	bne.n	8001b82 <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001b6c:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b6e:	4633      	mov	r3, r6
 8001b70:	462a      	mov	r2, r5
 8001b72:	4910      	ldr	r1, [pc, #64]	; (8001bb4 <I2C_MasterRequestWrite+0xa0>)
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7ff ff7a 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b1a0      	cbz	r0, 8001ba8 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e012      	b.n	8001ba8 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b82:	11fb      	asrs	r3, r7, #7
 8001b84:	6822      	ldr	r2, [r4, #0]
 8001b86:	f003 0306 	and.w	r3, r3, #6
 8001b8a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001b8e:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b90:	4633      	mov	r3, r6
 8001b92:	462a      	mov	r2, r5
 8001b94:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <I2C_MasterRequestWrite+0xa4>)
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7ff ff69 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b9c:	b938      	cbnz	r0, 8001bae <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	b2ff      	uxtb	r7, r7
 8001ba2:	611f      	str	r7, [r3, #16]
 8001ba4:	e7e3      	b.n	8001b6e <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	b003      	add	sp, #12
 8001bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e7fa      	b.n	8001ba8 <I2C_MasterRequestWrite+0x94>
 8001bb2:	bf00      	nop
 8001bb4:	00010002 	.word	0x00010002
 8001bb8:	00010008 	.word	0x00010008

08001bbc <I2C_MasterRequestRead>:
{
 8001bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	460d      	mov	r5, r1
 8001bc6:	4616      	mov	r6, r2
 8001bc8:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bcc:	6801      	ldr	r1, [r0, #0]
 8001bce:	680b      	ldr	r3, [r1, #0]
 8001bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd4:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bd6:	2a08      	cmp	r2, #8
 8001bd8:	d00d      	beq.n	8001bf6 <I2C_MasterRequestRead+0x3a>
 8001bda:	2a01      	cmp	r2, #1
 8001bdc:	d00b      	beq.n	8001bf6 <I2C_MasterRequestRead+0x3a>
 8001bde:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001be2:	d008      	beq.n	8001bf6 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001be4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001be6:	2b11      	cmp	r3, #17
 8001be8:	d10a      	bne.n	8001c00 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bea:	6802      	ldr	r2, [r0, #0]
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e004      	b.n	8001c00 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	6813      	ldr	r3, [r2, #0]
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c00:	9700      	str	r7, [sp, #0]
 8001c02:	4633      	mov	r3, r6
 8001c04:	2200      	movs	r2, #0
 8001c06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fef7 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d149      	bne.n	8001ca8 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c14:	6923      	ldr	r3, [r4, #16]
 8001c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c1a:	d10f      	bne.n	8001c3c <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	f045 0501 	orr.w	r5, r5, #1
 8001c22:	b2ed      	uxtb	r5, r5
 8001c24:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c26:	463b      	mov	r3, r7
 8001c28:	4632      	mov	r2, r6
 8001c2a:	4923      	ldr	r1, [pc, #140]	; (8001cb8 <I2C_MasterRequestRead+0xfc>)
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff ff1e 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d038      	beq.n	8001caa <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e036      	b.n	8001caa <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c3c:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001c40:	f008 0806 	and.w	r8, r8, #6
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001c4a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4632      	mov	r2, r6
 8001c50:	491a      	ldr	r1, [pc, #104]	; (8001cbc <I2C_MasterRequestRead+0x100>)
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7ff ff0b 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c58:	b108      	cbz	r0, 8001c5e <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e025      	b.n	8001caa <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	b2ed      	uxtb	r5, r5
 8001c62:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c64:	463b      	mov	r3, r7
 8001c66:	4632      	mov	r2, r6
 8001c68:	4913      	ldr	r1, [pc, #76]	; (8001cb8 <I2C_MasterRequestRead+0xfc>)
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff feff 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c70:	b108      	cbz	r0, 8001c76 <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e019      	b.n	8001caa <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c76:	2200      	movs	r2, #0
 8001c78:	9203      	str	r2, [sp, #12]
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	6959      	ldr	r1, [r3, #20]
 8001c7e:	9103      	str	r1, [sp, #12]
 8001c80:	6999      	ldr	r1, [r3, #24]
 8001c82:	9103      	str	r1, [sp, #12]
 8001c84:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c86:	6819      	ldr	r1, [r3, #0]
 8001c88:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001c8c:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c8e:	9700      	str	r7, [sp, #0]
 8001c90:	4633      	mov	r3, r6
 8001c92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff feb1 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 8001c9c:	b948      	cbnz	r0, 8001cb2 <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001c9e:	6822      	ldr	r2, [r4, #0]
 8001ca0:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001ca4:	6113      	str	r3, [r2, #16]
 8001ca6:	e7be      	b.n	8001c26 <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	b004      	add	sp, #16
 8001cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e7f9      	b.n	8001caa <I2C_MasterRequestRead+0xee>
 8001cb6:	bf00      	nop
 8001cb8:	00010002 	.word	0x00010002
 8001cbc:	00010008 	.word	0x00010008

08001cc0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cd0:	d11c      	bne.n	8001d0c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff fe7a 	bl	80019cc <I2C_IsAcknowledgeFailed>
 8001cd8:	b9d0      	cbnz	r0, 8001d10 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001cda:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001cde:	d0f3      	beq.n	8001cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce0:	f7ff fb68 	bl	80013b4 <HAL_GetTick>
 8001ce4:	1b80      	subs	r0, r0, r6
 8001ce6:	42a8      	cmp	r0, r5
 8001ce8:	d801      	bhi.n	8001cee <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001cea:	2d00      	cmp	r5, #0
 8001cec:	d1ec      	bne.n	8001cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cfc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001d04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
 8001d0a:	e000      	b.n	8001d0e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001d0c:	2000      	movs	r0, #0
}
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
 8001d12:	e7fc      	b.n	8001d0e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08001d14 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	4604      	mov	r4, r0
 8001d18:	460d      	mov	r5, r1
 8001d1a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	f013 0f04 	tst.w	r3, #4
 8001d24:	d11c      	bne.n	8001d60 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff fe50 	bl	80019cc <I2C_IsAcknowledgeFailed>
 8001d2c:	b9d0      	cbnz	r0, 8001d64 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001d2e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001d32:	d0f3      	beq.n	8001d1c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d34:	f7ff fb3e 	bl	80013b4 <HAL_GetTick>
 8001d38:	1b80      	subs	r0, r0, r6
 8001d3a:	42a8      	cmp	r0, r5
 8001d3c:	d801      	bhi.n	8001d42 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001d3e:	2d00      	cmp	r5, #0
 8001d40:	d1ec      	bne.n	8001d1c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d46:	2220      	movs	r2, #32
 8001d48:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001d58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	e000      	b.n	8001d62 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001d60:	2000      	movs	r0, #0
}
 8001d62:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001d64:	2001      	movs	r0, #1
 8001d66:	e7fc      	b.n	8001d62 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001d68 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	4605      	mov	r5, r0
 8001d6c:	460c      	mov	r4, r1
 8001d6e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001d78:	d129      	bne.n	8001dce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	f012 0f10 	tst.w	r2, #16
 8001d80:	d115      	bne.n	8001dae <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d82:	f7ff fb17 	bl	80013b4 <HAL_GetTick>
 8001d86:	1b80      	subs	r0, r0, r6
 8001d88:	42a0      	cmp	r0, r4
 8001d8a:	d801      	bhi.n	8001d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8001d8c:	2c00      	cmp	r4, #0
 8001d8e:	d1ef      	bne.n	8001d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d94:	2220      	movs	r2, #32
 8001d96:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d9e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001da0:	f042 0220 	orr.w	r2, r2, #32
 8001da4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001da6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001daa:	2001      	movs	r0, #1
}
 8001dac:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dae:	f06f 0210 	mvn.w	r2, #16
 8001db2:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001db8:	2220      	movs	r2, #32
 8001dba:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dbe:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001dc2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001dc4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001dc6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001dca:	2001      	movs	r0, #1
 8001dcc:	e7ee      	b.n	8001dac <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8001dce:	2000      	movs	r0, #0
 8001dd0:	e7ec      	b.n	8001dac <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08001dd4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	f000 80be 	beq.w	8001f56 <HAL_I2C_Init+0x182>
{
 8001dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ddc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dde:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d06b      	beq.n	8001ebe <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de6:	2324      	movs	r3, #36	; 0x24
 8001de8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001dec:	6822      	ldr	r2, [r4, #0]
 8001dee:	6813      	ldr	r3, [r2, #0]
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001df6:	f000 fe8b 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dfa:	6862      	ldr	r2, [r4, #4]
 8001dfc:	4b58      	ldr	r3, [pc, #352]	; (8001f60 <HAL_I2C_Init+0x18c>)
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d862      	bhi.n	8001ec8 <HAL_I2C_Init+0xf4>
 8001e02:	4b58      	ldr	r3, [pc, #352]	; (8001f64 <HAL_I2C_Init+0x190>)
 8001e04:	4298      	cmp	r0, r3
 8001e06:	bf8c      	ite	hi
 8001e08:	2300      	movhi	r3, #0
 8001e0a:	2301      	movls	r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f040 80a4 	bne.w	8001f5a <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8001e12:	4b55      	ldr	r3, [pc, #340]	; (8001f68 <HAL_I2C_Init+0x194>)
 8001e14:	fba3 2300 	umull	r2, r3, r3, r0
 8001e18:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1a:	6821      	ldr	r1, [r4, #0]
 8001e1c:	684a      	ldr	r2, [r1, #4]
 8001e1e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001e22:	431a      	orrs	r2, r3
 8001e24:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e26:	6825      	ldr	r5, [r4, #0]
 8001e28:	6a2a      	ldr	r2, [r5, #32]
 8001e2a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001e2e:	6866      	ldr	r6, [r4, #4]
 8001e30:	494b      	ldr	r1, [pc, #300]	; (8001f60 <HAL_I2C_Init+0x18c>)
 8001e32:	428e      	cmp	r6, r1
 8001e34:	d84e      	bhi.n	8001ed4 <HAL_I2C_Init+0x100>
 8001e36:	3301      	adds	r3, #1
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e3c:	6825      	ldr	r5, [r4, #0]
 8001e3e:	69e9      	ldr	r1, [r5, #28]
 8001e40:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001e44:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001e48:	6863      	ldr	r3, [r4, #4]
 8001e4a:	4a45      	ldr	r2, [pc, #276]	; (8001f60 <HAL_I2C_Init+0x18c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d84b      	bhi.n	8001ee8 <HAL_I2C_Init+0x114>
 8001e50:	3801      	subs	r0, #1
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf38      	it	cc
 8001e62:	2304      	movcc	r3, #4
 8001e64:	430b      	orrs	r3, r1
 8001e66:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e68:	6821      	ldr	r1, [r4, #0]
 8001e6a:	680b      	ldr	r3, [r1, #0]
 8001e6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e70:	69e2      	ldr	r2, [r4, #28]
 8001e72:	6a20      	ldr	r0, [r4, #32]
 8001e74:	4302      	orrs	r2, r0
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e7a:	6821      	ldr	r1, [r4, #0]
 8001e7c:	688b      	ldr	r3, [r1, #8]
 8001e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e86:	6922      	ldr	r2, [r4, #16]
 8001e88:	68e0      	ldr	r0, [r4, #12]
 8001e8a:	4302      	orrs	r2, r0
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e90:	6821      	ldr	r1, [r4, #0]
 8001e92:	68cb      	ldr	r3, [r1, #12]
 8001e94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e98:	6962      	ldr	r2, [r4, #20]
 8001e9a:	69a0      	ldr	r0, [r4, #24]
 8001e9c:	4302      	orrs	r2, r0
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001ea2:	6822      	ldr	r2, [r4, #0]
 8001ea4:	6813      	ldr	r3, [r2, #0]
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eac:	2000      	movs	r0, #0
 8001eae:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001ebe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001ec2:	f003 f9d3 	bl	800526c <HAL_I2C_MspInit>
 8001ec6:	e78e      	b.n	8001de6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <HAL_I2C_Init+0x198>)
 8001eca:	4298      	cmp	r0, r3
 8001ecc:	bf8c      	ite	hi
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	2301      	movls	r3, #1
 8001ed2:	e79b      	b.n	8001e0c <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ed4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4924      	ldr	r1, [pc, #144]	; (8001f70 <HAL_I2C_Init+0x19c>)
 8001ede:	fba1 1303 	umull	r1, r3, r1, r3
 8001ee2:	099b      	lsrs	r3, r3, #6
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	e7a7      	b.n	8001e38 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ee8:	68a2      	ldr	r2, [r4, #8]
 8001eea:	b9ba      	cbnz	r2, 8001f1c <HAL_I2C_Init+0x148>
 8001eec:	1e46      	subs	r6, r0, #1
 8001eee:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001ef2:	fbb6 f6f7 	udiv	r6, r6, r7
 8001ef6:	3601      	adds	r6, #1
 8001ef8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001efc:	fab6 f686 	clz	r6, r6
 8001f00:	0976      	lsrs	r6, r6, #5
 8001f02:	bb36      	cbnz	r6, 8001f52 <HAL_I2C_Init+0x17e>
 8001f04:	b9c2      	cbnz	r2, 8001f38 <HAL_I2C_Init+0x164>
 8001f06:	3801      	subs	r0, #1
 8001f08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001f16:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001f1a:	e7a3      	b.n	8001e64 <HAL_I2C_Init+0x90>
 8001f1c:	1e46      	subs	r6, r0, #1
 8001f1e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001f22:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001f26:	fbb6 f6f7 	udiv	r6, r6, r7
 8001f2a:	3601      	adds	r6, #1
 8001f2c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001f30:	fab6 f686 	clz	r6, r6
 8001f34:	0976      	lsrs	r6, r6, #5
 8001f36:	e7e4      	b.n	8001f02 <HAL_I2C_Init+0x12e>
 8001f38:	3801      	subs	r0, #1
 8001f3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f42:	fbb0 f2f3 	udiv	r2, r0, r3
 8001f46:	3201      	adds	r2, #1
 8001f48:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001f4c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001f50:	e788      	b.n	8001e64 <HAL_I2C_Init+0x90>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e786      	b.n	8001e64 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001f56:	2001      	movs	r0, #1
}
 8001f58:	4770      	bx	lr
    return HAL_ERROR;
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	e7ae      	b.n	8001ebc <HAL_I2C_Init+0xe8>
 8001f5e:	bf00      	nop
 8001f60:	000186a0 	.word	0x000186a0
 8001f64:	001e847f 	.word	0x001e847f
 8001f68:	431bde83 	.word	0x431bde83
 8001f6c:	003d08ff 	.word	0x003d08ff
 8001f70:	10624dd3 	.word	0x10624dd3

08001f74 <HAL_I2C_Master_Transmit>:
{
 8001f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	460e      	mov	r6, r1
 8001f7e:	4690      	mov	r8, r2
 8001f80:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8001f82:	f7ff fa17 	bl	80013b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f86:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d004      	beq.n	8001f9a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8001f90:	2602      	movs	r6, #2
}
 8001f92:	4630      	mov	r0, r6
 8001f94:	b004      	add	sp, #16
 8001f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f9a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f9c:	9000      	str	r0, [sp, #0]
 8001f9e:	2319      	movs	r3, #25
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	494f      	ldr	r1, [pc, #316]	; (80020e0 <HAL_I2C_Master_Transmit+0x16c>)
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7ff fd2a 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 8001faa:	2800      	cmp	r0, #0
 8001fac:	f040 8091 	bne.w	80020d2 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8001fb0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	f000 808e 	beq.w	80020d6 <HAL_I2C_Master_Transmit+0x162>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	f012 0f01 	tst.w	r2, #1
 8001fc8:	d103      	bne.n	8001fd2 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd2:	6822      	ldr	r2, [r4, #0]
 8001fd4:	6813      	ldr	r3, [r2, #0]
 8001fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fda:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fdc:	2321      	movs	r3, #33	; 0x21
 8001fde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001fec:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ff0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ff2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ff4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_I2C_Master_Transmit+0x170>)
 8001ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ffa:	462b      	mov	r3, r5
 8001ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ffe:	4631      	mov	r1, r6
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff fd87 	bl	8001b14 <I2C_MasterRequestWrite>
 8002006:	4606      	mov	r6, r0
 8002008:	2800      	cmp	r0, #0
 800200a:	d166      	bne.n	80020da <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200c:	2300      	movs	r3, #0
 800200e:	9303      	str	r3, [sp, #12]
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	9203      	str	r2, [sp, #12]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	9303      	str	r3, [sp, #12]
 800201a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800201c:	e012      	b.n	8002044 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002020:	2b04      	cmp	r3, #4
 8002022:	d001      	beq.n	8002028 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8002024:	2601      	movs	r6, #1
 8002026:	e7b4      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	6822      	ldr	r2, [r4, #0]
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002030:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8002032:	2601      	movs	r6, #1
 8002034:	e7ad      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002036:	462a      	mov	r2, r5
 8002038:	990a      	ldr	r1, [sp, #40]	; 0x28
 800203a:	4620      	mov	r0, r4
 800203c:	f7ff fe6a 	bl	8001d14 <I2C_WaitOnBTFFlagUntilTimeout>
 8002040:	2800      	cmp	r0, #0
 8002042:	d12c      	bne.n	800209e <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8002044:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002046:	2b00      	cmp	r3, #0
 8002048:	d035      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204a:	462a      	mov	r2, r5
 800204c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800204e:	4620      	mov	r0, r4
 8002050:	f7ff fe36 	bl	8001cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002054:	2800      	cmp	r0, #0
 8002056:	d1e2      	bne.n	800201e <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002058:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	7812      	ldrb	r2, [r2, #0]
 800205e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002060:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002062:	1c4b      	adds	r3, r1, #1
 8002064:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002066:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002068:	3b01      	subs	r3, #1
 800206a:	b29b      	uxth	r3, r3
 800206c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800206e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29b      	uxth	r3, r3
 8002074:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002076:	6822      	ldr	r2, [r4, #0]
 8002078:	6950      	ldr	r0, [r2, #20]
 800207a:	f010 0f04 	tst.w	r0, #4
 800207e:	d0da      	beq.n	8002036 <HAL_I2C_Master_Transmit+0xc2>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0d8      	beq.n	8002036 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002084:	784b      	ldrb	r3, [r1, #1]
 8002086:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8002088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800208a:	3301      	adds	r3, #1
 800208c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800208e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002090:	3b01      	subs	r3, #1
 8002092:	b29b      	uxth	r3, r3
 8002094:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002096:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002098:	3b01      	subs	r3, #1
 800209a:	8523      	strh	r3, [r4, #40]	; 0x28
 800209c:	e7cb      	b.n	8002036 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 80020a4:	2601      	movs	r6, #1
 80020a6:	e774      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a8:	6822      	ldr	r2, [r4, #0]
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80020b2:	2601      	movs	r6, #1
 80020b4:	e76d      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b6:	6822      	ldr	r2, [r4, #0]
 80020b8:	6813      	ldr	r3, [r2, #0]
 80020ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020be:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80020c0:	2320      	movs	r3, #32
 80020c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80020cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80020d0:	e75f      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 80020d2:	2602      	movs	r6, #2
 80020d4:	e75d      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80020d6:	2602      	movs	r6, #2
 80020d8:	e75b      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 80020da:	2601      	movs	r6, #1
 80020dc:	e759      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1e>
 80020de:	bf00      	nop
 80020e0:	00100002 	.word	0x00100002
 80020e4:	ffff0000 	.word	0xffff0000

080020e8 <HAL_I2C_Master_Receive>:
{
 80020e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	4604      	mov	r4, r0
 80020f0:	460e      	mov	r6, r1
 80020f2:	4690      	mov	r8, r2
 80020f4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80020f6:	f7ff f95d 	bl	80013b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b20      	cmp	r3, #32
 8002102:	d004      	beq.n	800210e <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8002104:	2602      	movs	r6, #2
}
 8002106:	4630      	mov	r0, r6
 8002108:	b006      	add	sp, #24
 800210a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800210e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002110:	9000      	str	r0, [sp, #0]
 8002112:	2319      	movs	r3, #25
 8002114:	2201      	movs	r2, #1
 8002116:	499e      	ldr	r1, [pc, #632]	; (8002390 <HAL_I2C_Master_Receive+0x2a8>)
 8002118:	4620      	mov	r0, r4
 800211a:	f7ff fc70 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 800211e:	2800      	cmp	r0, #0
 8002120:	f040 8134 	bne.w	800238c <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 8002124:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002128:	2b01      	cmp	r3, #1
 800212a:	f000 8137 	beq.w	800239c <HAL_I2C_Master_Receive+0x2b4>
 800212e:	2301      	movs	r3, #1
 8002130:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	f012 0f01 	tst.w	r2, #1
 800213c:	d103      	bne.n	8002146 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002146:	6822      	ldr	r2, [r4, #0]
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800214e:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002150:	2322      	movs	r3, #34	; 0x22
 8002152:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002156:	2310      	movs	r3, #16
 8002158:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800215c:	2300      	movs	r3, #0
 800215e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002160:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002164:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002166:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002168:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800216a:	4b8a      	ldr	r3, [pc, #552]	; (8002394 <HAL_I2C_Master_Receive+0x2ac>)
 800216c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800216e:	462b      	mov	r3, r5
 8002170:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002172:	4631      	mov	r1, r6
 8002174:	4620      	mov	r0, r4
 8002176:	f7ff fd21 	bl	8001bbc <I2C_MasterRequestRead>
 800217a:	4606      	mov	r6, r0
 800217c:	2800      	cmp	r0, #0
 800217e:	f040 810f 	bne.w	80023a0 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 8002182:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002184:	b95b      	cbnz	r3, 800219e <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002186:	9302      	str	r3, [sp, #8]
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	9202      	str	r2, [sp, #8]
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	9202      	str	r2, [sp, #8]
 8002192:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e077      	b.n	800228e <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d00f      	beq.n	80021c2 <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d01f      	beq.n	80021e6 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a6:	6822      	ldr	r2, [r4, #0]
 80021a8:	6813      	ldr	r3, [r2, #0]
 80021aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ae:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b0:	2300      	movs	r3, #0
 80021b2:	9305      	str	r3, [sp, #20]
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	9205      	str	r2, [sp, #20]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	9305      	str	r3, [sp, #20]
 80021be:	9b05      	ldr	r3, [sp, #20]
 80021c0:	e065      	b.n	800228e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c2:	6822      	ldr	r2, [r4, #0]
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ca:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021cc:	2300      	movs	r3, #0
 80021ce:	9303      	str	r3, [sp, #12]
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	9203      	str	r2, [sp, #12]
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	9203      	str	r2, [sp, #12]
 80021da:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e053      	b.n	800228e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	6813      	ldr	r3, [r2, #0]
 80021ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ee:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f0:	6822      	ldr	r2, [r4, #0]
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021f8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fa:	2300      	movs	r3, #0
 80021fc:	9304      	str	r3, [sp, #16]
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	9204      	str	r2, [sp, #16]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	9304      	str	r3, [sp, #16]
 8002208:	9b04      	ldr	r3, [sp, #16]
 800220a:	e040      	b.n	800228e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220c:	462a      	mov	r2, r5
 800220e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff fda9 	bl	8001d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002216:	2800      	cmp	r0, #0
 8002218:	f040 80c4 	bne.w	80023a4 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002222:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002226:	3301      	adds	r3, #1
 8002228:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800222a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800222c:	3b01      	subs	r3, #1
 800222e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002230:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002232:	3b01      	subs	r3, #1
 8002234:	b29b      	uxth	r3, r3
 8002236:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002238:	e029      	b.n	800228e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800223a:	9500      	str	r5, [sp, #0]
 800223c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800223e:	2200      	movs	r2, #0
 8002240:	4955      	ldr	r1, [pc, #340]	; (8002398 <HAL_I2C_Master_Receive+0x2b0>)
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff fbdb 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 8002248:	2800      	cmp	r0, #0
 800224a:	f040 80ad 	bne.w	80023a8 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224e:	6822      	ldr	r2, [r4, #0]
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002256:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800225e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002260:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002262:	1c53      	adds	r3, r2, #1
 8002264:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002266:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800226c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800226e:	3b01      	subs	r3, #1
 8002270:	b29b      	uxth	r3, r3
 8002272:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800227a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800227c:	3301      	adds	r3, #1
 800227e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002280:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002282:	3b01      	subs	r3, #1
 8002284:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002286:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002288:	3b01      	subs	r3, #1
 800228a:	b29b      	uxth	r3, r3
 800228c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800228e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	d072      	beq.n	800237a <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8002294:	2b03      	cmp	r3, #3
 8002296:	d849      	bhi.n	800232c <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8002298:	2b01      	cmp	r3, #1
 800229a:	d0b7      	beq.n	800220c <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 800229c:	2b02      	cmp	r3, #2
 800229e:	d0cc      	beq.n	800223a <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a0:	9500      	str	r5, [sp, #0]
 80022a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022a4:	2200      	movs	r2, #0
 80022a6:	493c      	ldr	r1, [pc, #240]	; (8002398 <HAL_I2C_Master_Receive+0x2b0>)
 80022a8:	4620      	mov	r0, r4
 80022aa:	f7ff fba8 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d17c      	bne.n	80023ac <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b2:	6822      	ldr	r2, [r4, #0]
 80022b4:	6813      	ldr	r3, [r2, #0]
 80022b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022ba:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022c2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80022c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022c6:	3301      	adds	r3, #1
 80022c8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80022ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80022cc:	3b01      	subs	r3, #1
 80022ce:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80022d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022d8:	9500      	str	r5, [sp, #0]
 80022da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022dc:	2200      	movs	r2, #0
 80022de:	492e      	ldr	r1, [pc, #184]	; (8002398 <HAL_I2C_Master_Receive+0x2b0>)
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff fb8c 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d162      	bne.n	80023b0 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	6813      	ldr	r3, [r2, #0]
 80022ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022fa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80022fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022fe:	1c53      	adds	r3, r2, #1
 8002300:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002302:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002304:	3b01      	subs	r3, #1
 8002306:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002308:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800230a:	3b01      	subs	r3, #1
 800230c:	b29b      	uxth	r3, r3
 800230e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002318:	3301      	adds	r3, #1
 800231a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800231c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002322:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002324:	3b01      	subs	r3, #1
 8002326:	b29b      	uxth	r3, r3
 8002328:	8563      	strh	r3, [r4, #42]	; 0x2a
 800232a:	e7b0      	b.n	800228e <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232c:	462a      	mov	r2, r5
 800232e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002330:	4620      	mov	r0, r4
 8002332:	f7ff fd19 	bl	8001d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002336:	2800      	cmp	r0, #0
 8002338:	d13c      	bne.n	80023b4 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002340:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002342:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002344:	1c53      	adds	r3, r2, #1
 8002346:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002348:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800234e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002350:	3b01      	subs	r3, #1
 8002352:	b29b      	uxth	r3, r3
 8002354:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	6959      	ldr	r1, [r3, #20]
 800235a:	f011 0f04 	tst.w	r1, #4
 800235e:	d096      	beq.n	800228e <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002366:	3301      	adds	r3, #1
 8002368:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800236a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002370:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002372:	3b01      	subs	r3, #1
 8002374:	b29b      	uxth	r3, r3
 8002376:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002378:	e789      	b.n	800228e <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800237a:	2320      	movs	r3, #32
 800237c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002380:	2300      	movs	r3, #0
 8002382:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002386:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800238a:	e6bc      	b.n	8002106 <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 800238c:	2602      	movs	r6, #2
 800238e:	e6ba      	b.n	8002106 <HAL_I2C_Master_Receive+0x1e>
 8002390:	00100002 	.word	0x00100002
 8002394:	ffff0000 	.word	0xffff0000
 8002398:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 800239c:	2602      	movs	r6, #2
 800239e:	e6b2      	b.n	8002106 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 80023a0:	2601      	movs	r6, #1
 80023a2:	e6b0      	b.n	8002106 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80023a4:	2601      	movs	r6, #1
 80023a6:	e6ae      	b.n	8002106 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80023a8:	2601      	movs	r6, #1
 80023aa:	e6ac      	b.n	8002106 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80023ac:	2601      	movs	r6, #1
 80023ae:	e6aa      	b.n	8002106 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80023b0:	2601      	movs	r6, #1
 80023b2:	e6a8      	b.n	8002106 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 80023b4:	2601      	movs	r6, #1
 80023b6:	e6a6      	b.n	8002106 <HAL_I2C_Master_Receive+0x1e>

080023b8 <HAL_I2C_IsDeviceReady>:
{
 80023b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023bc:	b085      	sub	sp, #20
 80023be:	4604      	mov	r4, r0
 80023c0:	4688      	mov	r8, r1
 80023c2:	4691      	mov	r9, r2
 80023c4:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80023c6:	f7fe fff5 	bl	80013b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d004      	beq.n	80023de <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	b005      	add	sp, #20
 80023da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023de:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e0:	9000      	str	r0, [sp, #0]
 80023e2:	2319      	movs	r3, #25
 80023e4:	2201      	movs	r2, #1
 80023e6:	4954      	ldr	r1, [pc, #336]	; (8002538 <HAL_I2C_IsDeviceReady+0x180>)
 80023e8:	4620      	mov	r0, r4
 80023ea:	f7ff fb08 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	f040 8097 	bne.w	8002522 <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 80023f4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	f000 8094 	beq.w	8002526 <HAL_I2C_IsDeviceReady+0x16e>
 80023fe:	2301      	movs	r3, #1
 8002400:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	f012 0f01 	tst.w	r2, #1
 800240c:	d103      	bne.n	8002416 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002416:	6822      	ldr	r2, [r4, #0]
 8002418:	6813      	ldr	r3, [r2, #0]
 800241a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800241e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	2324      	movs	r3, #36	; 0x24
 8002422:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002426:	2300      	movs	r3, #0
 8002428:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800242a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800242e:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8002430:	2701      	movs	r7, #1
 8002432:	e034      	b.n	800249e <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002434:	23a0      	movs	r3, #160	; 0xa0
 8002436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002442:	6959      	ldr	r1, [r3, #20]
 8002444:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002448:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2ba0      	cmp	r3, #160	; 0xa0
 8002450:	d009      	beq.n	8002466 <HAL_I2C_IsDeviceReady+0xae>
 8002452:	b942      	cbnz	r2, 8002466 <HAL_I2C_IsDeviceReady+0xae>
 8002454:	b939      	cbnz	r1, 8002466 <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002456:	f7fe ffad 	bl	80013b4 <HAL_GetTick>
 800245a:	1b80      	subs	r0, r0, r6
 800245c:	42a8      	cmp	r0, r5
 800245e:	d8e9      	bhi.n	8002434 <HAL_I2C_IsDeviceReady+0x7c>
 8002460:	2d00      	cmp	r5, #0
 8002462:	d1ea      	bne.n	800243a <HAL_I2C_IsDeviceReady+0x82>
 8002464:	e7e6      	b.n	8002434 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 8002466:	2320      	movs	r3, #32
 8002468:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	f012 0f02 	tst.w	r2, #2
 8002474:	d131      	bne.n	80024da <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002484:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002486:	9600      	str	r6, [sp, #0]
 8002488:	2319      	movs	r3, #25
 800248a:	2201      	movs	r2, #1
 800248c:	492a      	ldr	r1, [pc, #168]	; (8002538 <HAL_I2C_IsDeviceReady+0x180>)
 800248e:	4620      	mov	r0, r4
 8002490:	f7ff fab5 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 8002494:	2800      	cmp	r0, #0
 8002496:	d14c      	bne.n	8002532 <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8002498:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800249a:	454f      	cmp	r7, r9
 800249c:	d239      	bcs.n	8002512 <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249e:	6822      	ldr	r2, [r4, #0]
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80024a8:	9600      	str	r6, [sp, #0]
 80024aa:	462b      	mov	r3, r5
 80024ac:	2200      	movs	r2, #0
 80024ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024b2:	4620      	mov	r0, r4
 80024b4:	f7ff faa3 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 80024b8:	2800      	cmp	r0, #0
 80024ba:	d136      	bne.n	800252a <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 80024c2:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80024c4:	f7fe ff76 	bl	80013b4 <HAL_GetTick>
 80024c8:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024d2:	6959      	ldr	r1, [r3, #20]
 80024d4:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024d8:	e7b6      	b.n	8002448 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e2:	2300      	movs	r3, #0
 80024e4:	9303      	str	r3, [sp, #12]
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	9203      	str	r2, [sp, #12]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	9303      	str	r3, [sp, #12]
 80024f0:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f2:	9600      	str	r6, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	490f      	ldr	r1, [pc, #60]	; (8002538 <HAL_I2C_IsDeviceReady+0x180>)
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7ff fa7f 	bl	80019fe <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	b9a0      	cbnz	r0, 800252e <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 8002504:	2220      	movs	r2, #32
 8002506:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800250a:	2200      	movs	r2, #0
 800250c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8002510:	e761      	b.n	80023d6 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002512:	2320      	movs	r3, #32
 8002514:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002518:	2300      	movs	r3, #0
 800251a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e759      	b.n	80023d6 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	e757      	b.n	80023d6 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8002526:	2302      	movs	r3, #2
 8002528:	e755      	b.n	80023d6 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e753      	b.n	80023d6 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e751      	b.n	80023d6 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e74f      	b.n	80023d6 <HAL_I2C_IsDeviceReady+0x1e>
 8002536:	bf00      	nop
 8002538:	00100002 	.word	0x00100002

0800253c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800253c:	2800      	cmp	r0, #0
 800253e:	f000 81bb 	beq.w	80028b8 <HAL_RCC_OscConfig+0x37c>
{
 8002542:	b570      	push	{r4, r5, r6, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002548:	6803      	ldr	r3, [r0, #0]
 800254a:	f013 0f01 	tst.w	r3, #1
 800254e:	d03b      	beq.n	80025c8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002550:	4ba7      	ldr	r3, [pc, #668]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b04      	cmp	r3, #4
 800255a:	d02c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255c:	4ba4      	ldr	r3, [pc, #656]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002564:	2b08      	cmp	r3, #8
 8002566:	d021      	beq.n	80025ac <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002568:	6863      	ldr	r3, [r4, #4]
 800256a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256e:	d04f      	beq.n	8002610 <HAL_RCC_OscConfig+0xd4>
 8002570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002574:	d052      	beq.n	800261c <HAL_RCC_OscConfig+0xe0>
 8002576:	4b9e      	ldr	r3, [pc, #632]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002586:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002588:	6863      	ldr	r3, [r4, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d050      	beq.n	8002630 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe ff11 	bl	80013b4 <HAL_GetTick>
 8002592:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002594:	4b96      	ldr	r3, [pc, #600]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800259c:	d114      	bne.n	80025c8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259e:	f7fe ff09 	bl	80013b4 <HAL_GetTick>
 80025a2:	1b40      	subs	r0, r0, r5
 80025a4:	2864      	cmp	r0, #100	; 0x64
 80025a6:	d9f5      	bls.n	8002594 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80025a8:	2003      	movs	r0, #3
 80025aa:	e18a      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ac:	4b90      	ldr	r3, [pc, #576]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80025b4:	d0d8      	beq.n	8002568 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b6:	4b8e      	ldr	r3, [pc, #568]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025be:	d003      	beq.n	80025c8 <HAL_RCC_OscConfig+0x8c>
 80025c0:	6863      	ldr	r3, [r4, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 817a 	beq.w	80028bc <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	f013 0f02 	tst.w	r3, #2
 80025ce:	d055      	beq.n	800267c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d0:	4b87      	ldr	r3, [pc, #540]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f013 0f0c 	tst.w	r3, #12
 80025d8:	d03e      	beq.n	8002658 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b85      	ldr	r3, [pc, #532]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d033      	beq.n	800264e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e6:	68e3      	ldr	r3, [r4, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d068      	beq.n	80026be <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ec:	4b81      	ldr	r3, [pc, #516]	; (80027f4 <HAL_RCC_OscConfig+0x2b8>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fedf 	bl	80013b4 <HAL_GetTick>
 80025f6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f013 0f02 	tst.w	r3, #2
 8002600:	d154      	bne.n	80026ac <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002602:	f7fe fed7 	bl	80013b4 <HAL_GetTick>
 8002606:	1b40      	subs	r0, r0, r5
 8002608:	2802      	cmp	r0, #2
 800260a:	d9f5      	bls.n	80025f8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800260c:	2003      	movs	r0, #3
 800260e:	e158      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002610:	4a77      	ldr	r2, [pc, #476]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 8002612:	6813      	ldr	r3, [r2, #0]
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e7b5      	b.n	8002588 <HAL_RCC_OscConfig+0x4c>
 800261c:	4b74      	ldr	r3, [pc, #464]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e7ab      	b.n	8002588 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002630:	f7fe fec0 	bl	80013b4 <HAL_GetTick>
 8002634:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b6e      	ldr	r3, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800263e:	d0c3      	beq.n	80025c8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe feb8 	bl	80013b4 <HAL_GetTick>
 8002644:	1b40      	subs	r0, r0, r5
 8002646:	2864      	cmp	r0, #100	; 0x64
 8002648:	d9f5      	bls.n	8002636 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800264a:	2003      	movs	r0, #3
 800264c:	e139      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b68      	ldr	r3, [pc, #416]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002656:	d1c6      	bne.n	80025e6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002658:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f013 0f02 	tst.w	r3, #2
 8002660:	d004      	beq.n	800266c <HAL_RCC_OscConfig+0x130>
 8002662:	68e3      	ldr	r3, [r4, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8002668:	2001      	movs	r0, #1
 800266a:	e12a      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4a60      	ldr	r2, [pc, #384]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 800266e:	6813      	ldr	r3, [r2, #0]
 8002670:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002674:	6921      	ldr	r1, [r4, #16]
 8002676:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800267a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	f013 0f08 	tst.w	r3, #8
 8002682:	d040      	beq.n	8002706 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002684:	6963      	ldr	r3, [r4, #20]
 8002686:	b363      	cbz	r3, 80026e2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002688:	4b5b      	ldr	r3, [pc, #364]	; (80027f8 <HAL_RCC_OscConfig+0x2bc>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268e:	f7fe fe91 	bl	80013b4 <HAL_GetTick>
 8002692:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002694:	4b56      	ldr	r3, [pc, #344]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002698:	f013 0f02 	tst.w	r3, #2
 800269c:	d133      	bne.n	8002706 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269e:	f7fe fe89 	bl	80013b4 <HAL_GetTick>
 80026a2:	1b40      	subs	r0, r0, r5
 80026a4:	2802      	cmp	r0, #2
 80026a6:	d9f5      	bls.n	8002694 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80026a8:	2003      	movs	r0, #3
 80026aa:	e10a      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4a50      	ldr	r2, [pc, #320]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026b4:	6921      	ldr	r1, [r4, #16]
 80026b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e7de      	b.n	800267c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b4d      	ldr	r3, [pc, #308]	; (80027f4 <HAL_RCC_OscConfig+0x2b8>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026c4:	f7fe fe76 	bl	80013b4 <HAL_GetTick>
 80026c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f013 0f02 	tst.w	r3, #2
 80026d2:	d0d3      	beq.n	800267c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d4:	f7fe fe6e 	bl	80013b4 <HAL_GetTick>
 80026d8:	1b40      	subs	r0, r0, r5
 80026da:	2802      	cmp	r0, #2
 80026dc:	d9f5      	bls.n	80026ca <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80026de:	2003      	movs	r0, #3
 80026e0:	e0ef      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e2:	4b45      	ldr	r3, [pc, #276]	; (80027f8 <HAL_RCC_OscConfig+0x2bc>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e8:	f7fe fe64 	bl	80013b4 <HAL_GetTick>
 80026ec:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ee:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f2:	f013 0f02 	tst.w	r3, #2
 80026f6:	d006      	beq.n	8002706 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe fe5c 	bl	80013b4 <HAL_GetTick>
 80026fc:	1b40      	subs	r0, r0, r5
 80026fe:	2802      	cmp	r0, #2
 8002700:	d9f5      	bls.n	80026ee <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8002702:	2003      	movs	r0, #3
 8002704:	e0dd      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	f013 0f04 	tst.w	r3, #4
 800270c:	d079      	beq.n	8002802 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002716:	d133      	bne.n	8002780 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 800271e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002720:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002730:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b32      	ldr	r3, [pc, #200]	; (80027fc <HAL_RCC_OscConfig+0x2c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f413 7f80 	tst.w	r3, #256	; 0x100
 800273a:	d023      	beq.n	8002784 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	68a3      	ldr	r3, [r4, #8]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d034      	beq.n	80027ac <HAL_RCC_OscConfig+0x270>
 8002742:	2b05      	cmp	r3, #5
 8002744:	d038      	beq.n	80027b8 <HAL_RCC_OscConfig+0x27c>
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 8002748:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	671a      	str	r2, [r3, #112]	; 0x70
 8002750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002752:	f022 0204 	bic.w	r2, r2, #4
 8002756:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002758:	68a3      	ldr	r3, [r4, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d036      	beq.n	80027cc <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7fe fe29 	bl	80013b4 <HAL_GetTick>
 8002762:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	f013 0f02 	tst.w	r3, #2
 800276c:	d148      	bne.n	8002800 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fe21 	bl	80013b4 <HAL_GetTick>
 8002772:	1b80      	subs	r0, r0, r6
 8002774:	f241 3388 	movw	r3, #5000	; 0x1388
 8002778:	4298      	cmp	r0, r3
 800277a:	d9f3      	bls.n	8002764 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 800277c:	2003      	movs	r0, #3
 800277e:	e0a0      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8002780:	2500      	movs	r5, #0
 8002782:	e7d6      	b.n	8002732 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002784:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_RCC_OscConfig+0x2c0>)
 8002786:	6813      	ldr	r3, [r2, #0]
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800278e:	f7fe fe11 	bl	80013b4 <HAL_GetTick>
 8002792:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_RCC_OscConfig+0x2c0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f413 7f80 	tst.w	r3, #256	; 0x100
 800279c:	d1ce      	bne.n	800273c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279e:	f7fe fe09 	bl	80013b4 <HAL_GetTick>
 80027a2:	1b80      	subs	r0, r0, r6
 80027a4:	2802      	cmp	r0, #2
 80027a6:	d9f5      	bls.n	8002794 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80027a8:	2003      	movs	r0, #3
 80027aa:	e08a      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ac:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80027ae:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	e7cf      	b.n	8002758 <HAL_RCC_OscConfig+0x21c>
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80027ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027bc:	f042 0204 	orr.w	r2, r2, #4
 80027c0:	671a      	str	r2, [r3, #112]	; 0x70
 80027c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	671a      	str	r2, [r3, #112]	; 0x70
 80027ca:	e7c5      	b.n	8002758 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027cc:	f7fe fdf2 	bl	80013b4 <HAL_GetTick>
 80027d0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <HAL_RCC_OscConfig+0x2b4>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	f013 0f02 	tst.w	r3, #2
 80027da:	d011      	beq.n	8002800 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe fdea 	bl	80013b4 <HAL_GetTick>
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80027e6:	4298      	cmp	r0, r3
 80027e8:	d9f3      	bls.n	80027d2 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80027ea:	2003      	movs	r0, #3
 80027ec:	e069      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	42470000 	.word	0x42470000
 80027f8:	42470e80 	.word	0x42470e80
 80027fc:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002800:	b9e5      	cbnz	r5, 800283c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002802:	69a3      	ldr	r3, [r4, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05b      	beq.n	80028c0 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002808:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_RCC_OscConfig+0x390>)
 800280a:	6892      	ldr	r2, [r2, #8]
 800280c:	f002 020c 	and.w	r2, r2, #12
 8002810:	2a08      	cmp	r2, #8
 8002812:	d058      	beq.n	80028c6 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002814:	2b02      	cmp	r3, #2
 8002816:	d017      	beq.n	8002848 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_RCC_OscConfig+0x394>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe fdc9 	bl	80013b4 <HAL_GetTick>
 8002822:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <HAL_RCC_OscConfig+0x390>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800282c:	d042      	beq.n	80028b4 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fdc1 	bl	80013b4 <HAL_GetTick>
 8002832:	1b00      	subs	r0, r0, r4
 8002834:	2802      	cmp	r0, #2
 8002836:	d9f5      	bls.n	8002824 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002838:	2003      	movs	r0, #3
 800283a:	e042      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 800283c:	4a23      	ldr	r2, [pc, #140]	; (80028cc <HAL_RCC_OscConfig+0x390>)
 800283e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	e7dc      	b.n	8002802 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RCC_OscConfig+0x394>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800284e:	f7fe fdb1 	bl	80013b4 <HAL_GetTick>
 8002852:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_RCC_OscConfig+0x390>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800285c:	d006      	beq.n	800286c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fda9 	bl	80013b4 <HAL_GetTick>
 8002862:	1b40      	subs	r0, r0, r5
 8002864:	2802      	cmp	r0, #2
 8002866:	d9f5      	bls.n	8002854 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002868:	2003      	movs	r0, #3
 800286a:	e02a      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800286c:	69e3      	ldr	r3, [r4, #28]
 800286e:	6a22      	ldr	r2, [r4, #32]
 8002870:	4313      	orrs	r3, r2
 8002872:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002874:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002878:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800287a:	0852      	lsrs	r2, r2, #1
 800287c:	3a01      	subs	r2, #1
 800287e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002882:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002884:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002888:	4a10      	ldr	r2, [pc, #64]	; (80028cc <HAL_RCC_OscConfig+0x390>)
 800288a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCC_OscConfig+0x394>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002892:	f7fe fd8f 	bl	80013b4 <HAL_GetTick>
 8002896:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_RCC_OscConfig+0x390>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe fd87 	bl	80013b4 <HAL_GetTick>
 80028a6:	1b00      	subs	r0, r0, r4
 80028a8:	2802      	cmp	r0, #2
 80028aa:	d9f5      	bls.n	8002898 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80028ac:	2003      	movs	r0, #3
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80028b0:	2000      	movs	r0, #0
 80028b2:	e006      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
 80028b4:	2000      	movs	r0, #0
 80028b6:	e004      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 80028b8:	2001      	movs	r0, #1
}
 80028ba:	4770      	bx	lr
        return HAL_ERROR;
 80028bc:	2001      	movs	r0, #1
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 80028c0:	2000      	movs	r0, #0
}
 80028c2:	b002      	add	sp, #8
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80028c6:	2001      	movs	r0, #1
 80028c8:	e7fb      	b.n	80028c2 <HAL_RCC_OscConfig+0x386>
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470060 	.word	0x42470060

080028d4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d4:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d05c      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0xc6>
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	482f      	ldr	r0, [pc, #188]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028e6:	4770      	bx	lr
{
 80028e8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ec:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80028fa:	d02b      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002904:	461e      	mov	r6, r3
 8002906:	2700      	movs	r7, #0
 8002908:	015c      	lsls	r4, r3, #5
 800290a:	2500      	movs	r5, #0
 800290c:	1ae4      	subs	r4, r4, r3
 800290e:	eb65 0507 	sbc.w	r5, r5, r7
 8002912:	01a9      	lsls	r1, r5, #6
 8002914:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002918:	01a0      	lsls	r0, r4, #6
 800291a:	1b00      	subs	r0, r0, r4
 800291c:	eb61 0105 	sbc.w	r1, r1, r5
 8002920:	00cb      	lsls	r3, r1, #3
 8002922:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002926:	00c4      	lsls	r4, r0, #3
 8002928:	19a0      	adds	r0, r4, r6
 800292a:	eb43 0107 	adc.w	r1, r3, r7
 800292e:	024b      	lsls	r3, r1, #9
 8002930:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002934:	0244      	lsls	r4, r0, #9
 8002936:	4620      	mov	r0, r4
 8002938:	4619      	mov	r1, r3
 800293a:	2300      	movs	r3, #0
 800293c:	f7fe f91a 	bl	8000b74 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002948:	3301      	adds	r3, #1
 800294a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800294c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002950:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800295c:	461e      	mov	r6, r3
 800295e:	2700      	movs	r7, #0
 8002960:	015c      	lsls	r4, r3, #5
 8002962:	2500      	movs	r5, #0
 8002964:	1ae4      	subs	r4, r4, r3
 8002966:	eb65 0507 	sbc.w	r5, r5, r7
 800296a:	01a9      	lsls	r1, r5, #6
 800296c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002970:	01a0      	lsls	r0, r4, #6
 8002972:	1b00      	subs	r0, r0, r4
 8002974:	eb61 0105 	sbc.w	r1, r1, r5
 8002978:	00cb      	lsls	r3, r1, #3
 800297a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800297e:	00c4      	lsls	r4, r0, #3
 8002980:	19a0      	adds	r0, r4, r6
 8002982:	eb43 0107 	adc.w	r1, r3, r7
 8002986:	028b      	lsls	r3, r1, #10
 8002988:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800298c:	0284      	lsls	r4, r0, #10
 800298e:	4620      	mov	r0, r4
 8002990:	4619      	mov	r1, r3
 8002992:	2300      	movs	r3, #0
 8002994:	f7fe f8ee 	bl	8000b74 <__aeabi_uldivmod>
 8002998:	e7d2      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 800299a:	4803      	ldr	r0, [pc, #12]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	007a1200 	.word	0x007a1200

080029ac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80029ac:	2800      	cmp	r0, #0
 80029ae:	f000 809d 	beq.w	8002aec <HAL_RCC_ClockConfig+0x140>
{
 80029b2:	b570      	push	{r4, r5, r6, lr}
 80029b4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b6:	4b4f      	ldr	r3, [pc, #316]	; (8002af4 <HAL_RCC_ClockConfig+0x148>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	428b      	cmp	r3, r1
 80029c0:	d209      	bcs.n	80029d6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	b2cb      	uxtb	r3, r1
 80029c4:	4a4b      	ldr	r2, [pc, #300]	; (8002af4 <HAL_RCC_ClockConfig+0x148>)
 80029c6:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c8:	6813      	ldr	r3, [r2, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	428b      	cmp	r3, r1
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80029d2:	2001      	movs	r0, #1
}
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	f013 0f02 	tst.w	r3, #2
 80029dc:	d017      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029de:	f013 0f04 	tst.w	r3, #4
 80029e2:	d004      	beq.n	80029ee <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	4a44      	ldr	r2, [pc, #272]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 80029e6:	6893      	ldr	r3, [r2, #8]
 80029e8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ec:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	f013 0f08 	tst.w	r3, #8
 80029f4:	d004      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f6:	4a40      	ldr	r2, [pc, #256]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 80029f8:	6893      	ldr	r3, [r2, #8]
 80029fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fe:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4a3d      	ldr	r2, [pc, #244]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 8002a02:	6893      	ldr	r3, [r2, #8]
 8002a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a08:	68a0      	ldr	r0, [r4, #8]
 8002a0a:	4303      	orrs	r3, r0
 8002a0c:	6093      	str	r3, [r2, #8]
 8002a0e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	f013 0f01 	tst.w	r3, #1
 8002a16:	d032      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a18:	6863      	ldr	r3, [r4, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d021      	beq.n	8002a62 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	1e9a      	subs	r2, r3, #2
 8002a20:	2a01      	cmp	r2, #1
 8002a22:	d925      	bls.n	8002a70 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	4a34      	ldr	r2, [pc, #208]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	f012 0f02 	tst.w	r2, #2
 8002a2c:	d060      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2e:	4932      	ldr	r1, [pc, #200]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 8002a30:	688a      	ldr	r2, [r1, #8]
 8002a32:	f022 0203 	bic.w	r2, r2, #3
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002a3a:	f7fe fcbb 	bl	80013b4 <HAL_GetTick>
 8002a3e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	6862      	ldr	r2, [r4, #4]
 8002a4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a4e:	d016      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe fcb0 	bl	80013b4 <HAL_GetTick>
 8002a54:	1b80      	subs	r0, r0, r6
 8002a56:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a5a:	4298      	cmp	r0, r3
 8002a5c:	d9f0      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8002a5e:	2003      	movs	r0, #3
 8002a60:	e7b8      	b.n	80029d4 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002a6a:	d1e0      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	e7b1      	b.n	80029d4 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002a78:	d1d9      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	e7aa      	b.n	80029d4 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCC_ClockConfig+0x148>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	42ab      	cmp	r3, r5
 8002a88:	d909      	bls.n	8002a9e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	b2ea      	uxtb	r2, r5
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_ClockConfig+0x148>)
 8002a8e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	42ab      	cmp	r3, r5
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	e79a      	b.n	80029d4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	f013 0f04 	tst.w	r3, #4
 8002aa4:	d006      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa6:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 8002aa8:	6893      	ldr	r3, [r2, #8]
 8002aaa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002aae:	68e1      	ldr	r1, [r4, #12]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	f013 0f08 	tst.w	r3, #8
 8002aba:	d007      	beq.n	8002acc <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002abc:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 8002abe:	6893      	ldr	r3, [r2, #8]
 8002ac0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002ac4:	6921      	ldr	r1, [r4, #16]
 8002ac6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002aca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002acc:	f7ff ff02 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x14c>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ad8:	4a08      	ldr	r2, [pc, #32]	; (8002afc <HAL_RCC_ClockConfig+0x150>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	40d8      	lsrs	r0, r3
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_RCC_ClockConfig+0x154>)
 8002ae0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fe fc1a 	bl	800131c <HAL_InitTick>
  return HAL_OK;
 8002ae8:	2000      	movs	r0, #0
 8002aea:	e773      	b.n	80029d4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002aec:	2001      	movs	r0, #1
}
 8002aee:	4770      	bx	lr
        return HAL_ERROR;
 8002af0:	2001      	movs	r0, #1
 8002af2:	e76f      	b.n	80029d4 <HAL_RCC_ClockConfig+0x28>
 8002af4:	40023c00 	.word	0x40023c00
 8002af8:	40023800 	.word	0x40023800
 8002afc:	08007180 	.word	0x08007180
 8002b00:	20000060 	.word	0x20000060

08002b04 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002b04:	4b01      	ldr	r3, [pc, #4]	; (8002b0c <HAL_RCC_GetHCLKFreq+0x8>)
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000060 	.word	0x20000060

08002b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b10:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b12:	f7ff fff7 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b16:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002b1e:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b20:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b22:	40d8      	lsrs	r0, r3
 8002b24:	bd08      	pop	{r3, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	08007190 	.word	0x08007190

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b32:	f7ff ffe7 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b36:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002b3e:	4a03      	ldr	r2, [pc, #12]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b40:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b42:	40d8      	lsrs	r0, r3
 8002b44:	bd08      	pop	{r3, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	08007190 	.word	0x08007190

08002b50 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d03b      	beq.n	8002bcc <HAL_SPI_Init+0x7c>
{
 8002b54:	b510      	push	{r4, lr}
 8002b56:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b5c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d02e      	beq.n	8002bc2 <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b64:	2302      	movs	r3, #2
 8002b66:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b72:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b74:	6863      	ldr	r3, [r4, #4]
 8002b76:	68a2      	ldr	r2, [r4, #8]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	68e2      	ldr	r2, [r4, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	6922      	ldr	r2, [r4, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	6962      	ldr	r2, [r4, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	69a2      	ldr	r2, [r4, #24]
 8002b88:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	69e2      	ldr	r2, [r4, #28]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	6a22      	ldr	r2, [r4, #32]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b98:	6822      	ldr	r2, [r4, #0]
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b9e:	8b63      	ldrh	r3, [r4, #26]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ba6:	6822      	ldr	r2, [r4, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bac:	6822      	ldr	r2, [r4, #0]
 8002bae:	69d3      	ldr	r3, [r2, #28]
 8002bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bb4:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002bc0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002bc2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002bc6:	f002 fb9f 	bl	8005308 <HAL_SPI_MspInit>
 8002bca:	e7cb      	b.n	8002b64 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002bcc:	2001      	movs	r0, #1
}
 8002bce:	4770      	bx	lr

08002bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd2:	6a03      	ldr	r3, [r0, #32]
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bda:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bde:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002be0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be4:	680d      	ldr	r5, [r1, #0]
 8002be6:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bea:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bee:	688b      	ldr	r3, [r1, #8]
 8002bf0:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bf2:	4d0d      	ldr	r5, [pc, #52]	; (8002c28 <TIM_OC1_SetConfig+0x58>)
 8002bf4:	42a8      	cmp	r0, r5
 8002bf6:	d009      	beq.n	8002c0c <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf8:	4d0b      	ldr	r5, [pc, #44]	; (8002c28 <TIM_OC1_SetConfig+0x58>)
 8002bfa:	42a8      	cmp	r0, r5
 8002bfc:	d00d      	beq.n	8002c1a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfe:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c00:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c02:	684a      	ldr	r2, [r1, #4]
 8002c04:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c06:	6203      	str	r3, [r0, #32]
}
 8002c08:	bc70      	pop	{r4, r5, r6}
 8002c0a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c0c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002c10:	68cc      	ldr	r4, [r1, #12]
 8002c12:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	e7ee      	b.n	8002bf8 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002c1e:	694c      	ldr	r4, [r1, #20]
 8002c20:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c22:	698a      	ldr	r2, [r1, #24]
 8002c24:	4322      	orrs	r2, r4
 8002c26:	e7ea      	b.n	8002bfe <TIM_OC1_SetConfig+0x2e>
 8002c28:	40010000 	.word	0x40010000

08002c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c2e:	6a03      	ldr	r3, [r0, #32]
 8002c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c34:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c38:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c3a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c3c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c40:	680d      	ldr	r5, [r1, #0]
 8002c42:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c48:	688d      	ldr	r5, [r1, #8]
 8002c4a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c4e:	4d0f      	ldr	r5, [pc, #60]	; (8002c8c <TIM_OC3_SetConfig+0x60>)
 8002c50:	42a8      	cmp	r0, r5
 8002c52:	d009      	beq.n	8002c68 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c54:	4d0d      	ldr	r5, [pc, #52]	; (8002c8c <TIM_OC3_SetConfig+0x60>)
 8002c56:	42a8      	cmp	r0, r5
 8002c58:	d00e      	beq.n	8002c78 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c5e:	684a      	ldr	r2, [r1, #4]
 8002c60:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c62:	6203      	str	r3, [r0, #32]
}
 8002c64:	bc30      	pop	{r4, r5}
 8002c66:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c6c:	68cd      	ldr	r5, [r1, #12]
 8002c6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c76:	e7ed      	b.n	8002c54 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c78:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c7c:	694d      	ldr	r5, [r1, #20]
 8002c7e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c82:	698d      	ldr	r5, [r1, #24]
 8002c84:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002c88:	e7e7      	b.n	8002c5a <TIM_OC3_SetConfig+0x2e>
 8002c8a:	bf00      	nop
 8002c8c:	40010000 	.word	0x40010000

08002c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c92:	6a03      	ldr	r3, [r0, #32]
 8002c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c9e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ca0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca4:	680d      	ldr	r5, [r1, #0]
 8002ca6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cae:	688d      	ldr	r5, [r1, #8]
 8002cb0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb4:	4d07      	ldr	r5, [pc, #28]	; (8002cd4 <TIM_OC4_SetConfig+0x44>)
 8002cb6:	42a8      	cmp	r0, r5
 8002cb8:	d006      	beq.n	8002cc8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cbc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cbe:	684a      	ldr	r2, [r1, #4]
 8002cc0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc2:	6203      	str	r3, [r0, #32]
}
 8002cc4:	bc30      	pop	{r4, r5}
 8002cc6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cc8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ccc:	694d      	ldr	r5, [r1, #20]
 8002cce:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002cd2:	e7f2      	b.n	8002cba <TIM_OC4_SetConfig+0x2a>
 8002cd4:	40010000 	.word	0x40010000

08002cd8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002cd8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cda:	4a25      	ldr	r2, [pc, #148]	; (8002d70 <TIM_Base_SetConfig+0x98>)
 8002cdc:	4290      	cmp	r0, r2
 8002cde:	d00e      	beq.n	8002cfe <TIM_Base_SetConfig+0x26>
 8002ce0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ce4:	d00b      	beq.n	8002cfe <TIM_Base_SetConfig+0x26>
 8002ce6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002cea:	4290      	cmp	r0, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_Base_SetConfig+0x26>
 8002cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cf2:	4290      	cmp	r0, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_Base_SetConfig+0x26>
 8002cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cfa:	4290      	cmp	r0, r2
 8002cfc:	d103      	bne.n	8002d06 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d02:	684a      	ldr	r2, [r1, #4]
 8002d04:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d06:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <TIM_Base_SetConfig+0x98>)
 8002d08:	4290      	cmp	r0, r2
 8002d0a:	d01a      	beq.n	8002d42 <TIM_Base_SetConfig+0x6a>
 8002d0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d10:	d017      	beq.n	8002d42 <TIM_Base_SetConfig+0x6a>
 8002d12:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d16:	4290      	cmp	r0, r2
 8002d18:	d013      	beq.n	8002d42 <TIM_Base_SetConfig+0x6a>
 8002d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d1e:	4290      	cmp	r0, r2
 8002d20:	d00f      	beq.n	8002d42 <TIM_Base_SetConfig+0x6a>
 8002d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d26:	4290      	cmp	r0, r2
 8002d28:	d00b      	beq.n	8002d42 <TIM_Base_SetConfig+0x6a>
 8002d2a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002d2e:	4290      	cmp	r0, r2
 8002d30:	d007      	beq.n	8002d42 <TIM_Base_SetConfig+0x6a>
 8002d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d36:	4290      	cmp	r0, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_Base_SetConfig+0x6a>
 8002d3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d3e:	4290      	cmp	r0, r2
 8002d40:	d103      	bne.n	8002d4a <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d46:	68ca      	ldr	r2, [r1, #12]
 8002d48:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d4e:	694a      	ldr	r2, [r1, #20]
 8002d50:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002d52:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d54:	688b      	ldr	r3, [r1, #8]
 8002d56:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d58:	680b      	ldr	r3, [r1, #0]
 8002d5a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <TIM_Base_SetConfig+0x98>)
 8002d5e:	4298      	cmp	r0, r3
 8002d60:	d002      	beq.n	8002d68 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8002d62:	2301      	movs	r3, #1
 8002d64:	6143      	str	r3, [r0, #20]
}
 8002d66:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002d68:	690b      	ldr	r3, [r1, #16]
 8002d6a:	6303      	str	r3, [r0, #48]	; 0x30
 8002d6c:	e7f9      	b.n	8002d62 <TIM_Base_SetConfig+0x8a>
 8002d6e:	bf00      	nop
 8002d70:	40010000 	.word	0x40010000

08002d74 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002d74:	b1a8      	cbz	r0, 8002da2 <HAL_TIM_Base_Init+0x2e>
{
 8002d76:	b510      	push	{r4, lr}
 8002d78:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d7e:	b15b      	cbz	r3, 8002d98 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	2302      	movs	r3, #2
 8002d82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d86:	1d21      	adds	r1, r4, #4
 8002d88:	6820      	ldr	r0, [r4, #0]
 8002d8a:	f7ff ffa5 	bl	8002cd8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d94:	2000      	movs	r0, #0
}
 8002d96:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002d98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002d9c:	f002 fb1a 	bl	80053d4 <HAL_TIM_Base_MspInit>
 8002da0:	e7ee      	b.n	8002d80 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002da2:	2001      	movs	r0, #1
}
 8002da4:	4770      	bx	lr

08002da6 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002da6:	b1a8      	cbz	r0, 8002dd4 <HAL_TIM_PWM_Init+0x2e>
{
 8002da8:	b510      	push	{r4, lr}
 8002daa:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002dac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002db0:	b15b      	cbz	r3, 8002dca <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db8:	1d21      	adds	r1, r4, #4
 8002dba:	6820      	ldr	r0, [r4, #0]
 8002dbc:	f7ff ff8c 	bl	8002cd8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002dc6:	2000      	movs	r0, #0
}
 8002dc8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002dca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002dce:	f002 fae9 	bl	80053a4 <HAL_TIM_PWM_MspInit>
 8002dd2:	e7ee      	b.n	8002db2 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002dd4:	2001      	movs	r0, #1
}
 8002dd6:	4770      	bx	lr

08002dd8 <TIM_OC2_SetConfig>:
{
 8002dd8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dda:	6a03      	ldr	r3, [r0, #32]
 8002ddc:	f023 0310 	bic.w	r3, r3, #16
 8002de0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002de2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002de4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002de6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002de8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dec:	680d      	ldr	r5, [r1, #0]
 8002dee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002df2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002df6:	688d      	ldr	r5, [r1, #8]
 8002df8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dfc:	4d0e      	ldr	r5, [pc, #56]	; (8002e38 <TIM_OC2_SetConfig+0x60>)
 8002dfe:	42a8      	cmp	r0, r5
 8002e00:	d009      	beq.n	8002e16 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e02:	4d0d      	ldr	r5, [pc, #52]	; (8002e38 <TIM_OC2_SetConfig+0x60>)
 8002e04:	42a8      	cmp	r0, r5
 8002e06:	d00e      	beq.n	8002e26 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002e08:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e0a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002e0c:	684a      	ldr	r2, [r1, #4]
 8002e0e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002e10:	6203      	str	r3, [r0, #32]
}
 8002e12:	bc30      	pop	{r4, r5}
 8002e14:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e1a:	68cd      	ldr	r5, [r1, #12]
 8002e1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e24:	e7ed      	b.n	8002e02 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e26:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e2a:	694d      	ldr	r5, [r1, #20]
 8002e2c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e30:	698d      	ldr	r5, [r1, #24]
 8002e32:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002e36:	e7e7      	b.n	8002e08 <TIM_OC2_SetConfig+0x30>
 8002e38:	40010000 	.word	0x40010000

08002e3c <HAL_TIM_PWM_ConfigChannel>:
{
 8002e3c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002e3e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d066      	beq.n	8002f14 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002e46:	460d      	mov	r5, r1
 8002e48:	4604      	mov	r4, r0
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	2302      	movs	r3, #2
 8002e52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002e56:	2a0c      	cmp	r2, #12
 8002e58:	d81a      	bhi.n	8002e90 <HAL_TIM_PWM_ConfigChannel+0x54>
 8002e5a:	e8df f002 	tbb	[pc, r2]
 8002e5e:	1907      	.short	0x1907
 8002e60:	19201919 	.word	0x19201919
 8002e64:	19341919 	.word	0x19341919
 8002e68:	1919      	.short	0x1919
 8002e6a:	47          	.byte	0x47
 8002e6b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e6c:	6800      	ldr	r0, [r0, #0]
 8002e6e:	f7ff feaf 	bl	8002bd0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e72:	6822      	ldr	r2, [r4, #0]
 8002e74:	6993      	ldr	r3, [r2, #24]
 8002e76:	f043 0308 	orr.w	r3, r3, #8
 8002e7a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e7c:	6822      	ldr	r2, [r4, #0]
 8002e7e:	6993      	ldr	r3, [r2, #24]
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e86:	6822      	ldr	r2, [r4, #0]
 8002e88:	6993      	ldr	r3, [r2, #24]
 8002e8a:	6929      	ldr	r1, [r5, #16]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e9c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e9e:	6800      	ldr	r0, [r0, #0]
 8002ea0:	f7ff ff9a 	bl	8002dd8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ea4:	6822      	ldr	r2, [r4, #0]
 8002ea6:	6993      	ldr	r3, [r2, #24]
 8002ea8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eae:	6822      	ldr	r2, [r4, #0]
 8002eb0:	6993      	ldr	r3, [r2, #24]
 8002eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eb8:	6822      	ldr	r2, [r4, #0]
 8002eba:	6993      	ldr	r3, [r2, #24]
 8002ebc:	6929      	ldr	r1, [r5, #16]
 8002ebe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ec2:	6193      	str	r3, [r2, #24]
      break;
 8002ec4:	e7e4      	b.n	8002e90 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ec6:	6800      	ldr	r0, [r0, #0]
 8002ec8:	f7ff feb0 	bl	8002c2c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ecc:	6822      	ldr	r2, [r4, #0]
 8002ece:	69d3      	ldr	r3, [r2, #28]
 8002ed0:	f043 0308 	orr.w	r3, r3, #8
 8002ed4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	69d3      	ldr	r3, [r2, #28]
 8002eda:	f023 0304 	bic.w	r3, r3, #4
 8002ede:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ee0:	6822      	ldr	r2, [r4, #0]
 8002ee2:	69d3      	ldr	r3, [r2, #28]
 8002ee4:	6929      	ldr	r1, [r5, #16]
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	61d3      	str	r3, [r2, #28]
      break;
 8002eea:	e7d1      	b.n	8002e90 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eec:	6800      	ldr	r0, [r0, #0]
 8002eee:	f7ff fecf 	bl	8002c90 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	69d3      	ldr	r3, [r2, #28]
 8002ef6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002efa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002efc:	6822      	ldr	r2, [r4, #0]
 8002efe:	69d3      	ldr	r3, [r2, #28]
 8002f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f04:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	69d3      	ldr	r3, [r2, #28]
 8002f0a:	6929      	ldr	r1, [r5, #16]
 8002f0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f10:	61d3      	str	r3, [r2, #28]
      break;
 8002f12:	e7bd      	b.n	8002e90 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8002f14:	2002      	movs	r0, #2
 8002f16:	e7c1      	b.n	8002e9c <HAL_TIM_PWM_ConfigChannel+0x60>

08002f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f18:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f1a:	f001 011f 	and.w	r1, r1, #31
 8002f1e:	2301      	movs	r3, #1
 8002f20:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f24:	6a03      	ldr	r3, [r0, #32]
 8002f26:	ea23 0304 	bic.w	r3, r3, r4
 8002f2a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f2c:	6a03      	ldr	r3, [r0, #32]
 8002f2e:	408a      	lsls	r2, r1
 8002f30:	4313      	orrs	r3, r2
 8002f32:	6203      	str	r3, [r0, #32]
}
 8002f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_TIM_PWM_Start>:
{
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f40:	2201      	movs	r2, #1
 8002f42:	6800      	ldr	r0, [r0, #0]
 8002f44:	f7ff ffe8 	bl	8002f18 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <HAL_TIM_PWM_Start+0x38>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00b      	beq.n	8002f68 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f50:	6822      	ldr	r2, [r4, #0]
 8002f52:	6893      	ldr	r3, [r2, #8]
 8002f54:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	2b06      	cmp	r3, #6
 8002f5a:	d003      	beq.n	8002f64 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8002f5c:	6813      	ldr	r3, [r2, #0]
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6013      	str	r3, [r2, #0]
}
 8002f64:	2000      	movs	r0, #0
 8002f66:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8002f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
 8002f70:	e7ee      	b.n	8002f50 <HAL_TIM_PWM_Start+0x14>
 8002f72:	bf00      	nop
 8002f74:	40010000 	.word	0x40010000

08002f78 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d01c      	beq.n	8002fba <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002f80:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002f82:	2601      	movs	r6, #1
 8002f84:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8e:	6802      	ldr	r2, [r0, #0]
 8002f90:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f92:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f94:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f98:	680c      	ldr	r4, [r1, #0]
 8002f9a:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f9c:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fa0:	684b      	ldr	r3, [r1, #4]
 8002fa2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fa4:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fa6:	6802      	ldr	r2, [r0, #0]
 8002fa8:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002faa:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002fb4:	4618      	mov	r0, r3
}
 8002fb6:	bc70      	pop	{r4, r5, r6}
 8002fb8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002fba:	2002      	movs	r0, #2
}
 8002fbc:	4770      	bx	lr
	...

08002fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc4:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc6:	6802      	ldr	r2, [r0, #0]
 8002fc8:	6913      	ldr	r3, [r2, #16]
 8002fca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fce:	68c1      	ldr	r1, [r0, #12]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fd4:	6883      	ldr	r3, [r0, #8]
 8002fd6:	6902      	ldr	r2, [r0, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	6942      	ldr	r2, [r0, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	69c2      	ldr	r2, [r0, #28]
 8002fe0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002fe2:	6801      	ldr	r1, [r0, #0]
 8002fe4:	68cb      	ldr	r3, [r1, #12]
 8002fe6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002fea:	f023 030c 	bic.w	r3, r3, #12
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ff2:	6802      	ldr	r2, [r0, #0]
 8002ff4:	6953      	ldr	r3, [r2, #20]
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffa:	6981      	ldr	r1, [r0, #24]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003000:	69c3      	ldr	r3, [r0, #28]
 8003002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003006:	d060      	beq.n	80030ca <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003008:	6803      	ldr	r3, [r0, #0]
 800300a:	4ab8      	ldr	r2, [pc, #736]	; (80032ec <UART_SetConfig+0x32c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	f000 8114 	beq.w	800323a <UART_SetConfig+0x27a>
 8003012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003016:	4293      	cmp	r3, r2
 8003018:	f000 810f 	beq.w	800323a <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800301c:	f7ff fd78 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003020:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003024:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003028:	6865      	ldr	r5, [r4, #4]
 800302a:	00ad      	lsls	r5, r5, #2
 800302c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003030:	4faf      	ldr	r7, [pc, #700]	; (80032f0 <UART_SetConfig+0x330>)
 8003032:	fba7 3505 	umull	r3, r5, r7, r5
 8003036:	096d      	lsrs	r5, r5, #5
 8003038:	012e      	lsls	r6, r5, #4
 800303a:	f7ff fd69 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 800303e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003042:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003046:	6865      	ldr	r5, [r4, #4]
 8003048:	00ad      	lsls	r5, r5, #2
 800304a:	fbb0 f9f5 	udiv	r9, r0, r5
 800304e:	f7ff fd5f 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003052:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003056:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800305a:	6865      	ldr	r5, [r4, #4]
 800305c:	00ad      	lsls	r5, r5, #2
 800305e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003062:	fba7 3505 	umull	r3, r5, r7, r5
 8003066:	096d      	lsrs	r5, r5, #5
 8003068:	f04f 0864 	mov.w	r8, #100	; 0x64
 800306c:	fb08 9515 	mls	r5, r8, r5, r9
 8003070:	012d      	lsls	r5, r5, #4
 8003072:	3532      	adds	r5, #50	; 0x32
 8003074:	fba7 3505 	umull	r3, r5, r7, r5
 8003078:	096d      	lsrs	r5, r5, #5
 800307a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800307e:	4435      	add	r5, r6
 8003080:	f7ff fd46 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003084:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003088:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800308c:	6866      	ldr	r6, [r4, #4]
 800308e:	00b6      	lsls	r6, r6, #2
 8003090:	fbb0 f6f6 	udiv	r6, r0, r6
 8003094:	f7ff fd3c 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003098:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800309c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80030a0:	6863      	ldr	r3, [r4, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80030a8:	fba7 3000 	umull	r3, r0, r7, r0
 80030ac:	0940      	lsrs	r0, r0, #5
 80030ae:	fb08 6810 	mls	r8, r8, r0, r6
 80030b2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80030b6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80030ba:	fba7 3708 	umull	r3, r7, r7, r8
 80030be:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	442f      	add	r7, r5
 80030c6:	609f      	str	r7, [r3, #8]
    }
  }
}
 80030c8:	e10d      	b.n	80032e6 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030ca:	6803      	ldr	r3, [r0, #0]
 80030cc:	4a87      	ldr	r2, [pc, #540]	; (80032ec <UART_SetConfig+0x32c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d05b      	beq.n	800318a <UART_SetConfig+0x1ca>
 80030d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d057      	beq.n	800318a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80030da:	f7ff fd19 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 80030de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80030e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80030e6:	6865      	ldr	r5, [r4, #4]
 80030e8:	006d      	lsls	r5, r5, #1
 80030ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80030ee:	4f80      	ldr	r7, [pc, #512]	; (80032f0 <UART_SetConfig+0x330>)
 80030f0:	fba7 3505 	umull	r3, r5, r7, r5
 80030f4:	096d      	lsrs	r5, r5, #5
 80030f6:	012e      	lsls	r6, r5, #4
 80030f8:	f7ff fd0a 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 80030fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003100:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003104:	6865      	ldr	r5, [r4, #4]
 8003106:	006d      	lsls	r5, r5, #1
 8003108:	fbb0 f9f5 	udiv	r9, r0, r5
 800310c:	f7ff fd00 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003110:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003114:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003118:	6865      	ldr	r5, [r4, #4]
 800311a:	006d      	lsls	r5, r5, #1
 800311c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003120:	fba7 3505 	umull	r3, r5, r7, r5
 8003124:	096d      	lsrs	r5, r5, #5
 8003126:	f04f 0864 	mov.w	r8, #100	; 0x64
 800312a:	fb08 9515 	mls	r5, r8, r5, r9
 800312e:	00ed      	lsls	r5, r5, #3
 8003130:	3532      	adds	r5, #50	; 0x32
 8003132:	fba7 3505 	umull	r3, r5, r7, r5
 8003136:	096d      	lsrs	r5, r5, #5
 8003138:	006d      	lsls	r5, r5, #1
 800313a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800313e:	4435      	add	r5, r6
 8003140:	f7ff fce6 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003144:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003148:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800314c:	6866      	ldr	r6, [r4, #4]
 800314e:	0076      	lsls	r6, r6, #1
 8003150:	fbb0 f6f6 	udiv	r6, r0, r6
 8003154:	f7ff fcdc 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003158:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800315c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003160:	6863      	ldr	r3, [r4, #4]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fbb0 f3f3 	udiv	r3, r0, r3
 8003168:	fba7 2303 	umull	r2, r3, r7, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	fb08 6813 	mls	r8, r8, r3, r6
 8003172:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8003176:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800317a:	fba7 3708 	umull	r3, r7, r7, r8
 800317e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	442f      	add	r7, r5
 8003186:	609f      	str	r7, [r3, #8]
 8003188:	e0ad      	b.n	80032e6 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800318a:	f7ff fcd1 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 800318e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003192:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003196:	6865      	ldr	r5, [r4, #4]
 8003198:	006d      	lsls	r5, r5, #1
 800319a:	fbb0 f5f5 	udiv	r5, r0, r5
 800319e:	4f54      	ldr	r7, [pc, #336]	; (80032f0 <UART_SetConfig+0x330>)
 80031a0:	fba7 3505 	umull	r3, r5, r7, r5
 80031a4:	096d      	lsrs	r5, r5, #5
 80031a6:	012e      	lsls	r6, r5, #4
 80031a8:	f7ff fcc2 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80031ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031b4:	6865      	ldr	r5, [r4, #4]
 80031b6:	006d      	lsls	r5, r5, #1
 80031b8:	fbb0 f9f5 	udiv	r9, r0, r5
 80031bc:	f7ff fcb8 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80031c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031c8:	6865      	ldr	r5, [r4, #4]
 80031ca:	006d      	lsls	r5, r5, #1
 80031cc:	fbb0 f5f5 	udiv	r5, r0, r5
 80031d0:	fba7 3505 	umull	r3, r5, r7, r5
 80031d4:	096d      	lsrs	r5, r5, #5
 80031d6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80031da:	fb08 9515 	mls	r5, r8, r5, r9
 80031de:	00ed      	lsls	r5, r5, #3
 80031e0:	3532      	adds	r5, #50	; 0x32
 80031e2:	fba7 3505 	umull	r3, r5, r7, r5
 80031e6:	096d      	lsrs	r5, r5, #5
 80031e8:	006d      	lsls	r5, r5, #1
 80031ea:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80031ee:	4435      	add	r5, r6
 80031f0:	f7ff fc9e 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80031f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031fc:	6866      	ldr	r6, [r4, #4]
 80031fe:	0076      	lsls	r6, r6, #1
 8003200:	fbb0 f6f6 	udiv	r6, r0, r6
 8003204:	f7ff fc94 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8003208:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800320c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003210:	6863      	ldr	r3, [r4, #4]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fbb0 f3f3 	udiv	r3, r0, r3
 8003218:	fba7 2303 	umull	r2, r3, r7, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	fb08 6813 	mls	r8, r8, r3, r6
 8003222:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8003226:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800322a:	fba7 3708 	umull	r3, r7, r7, r8
 800322e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	442f      	add	r7, r5
 8003236:	609f      	str	r7, [r3, #8]
 8003238:	e055      	b.n	80032e6 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800323a:	f7ff fc79 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 800323e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003242:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003246:	6865      	ldr	r5, [r4, #4]
 8003248:	00ad      	lsls	r5, r5, #2
 800324a:	fbb0 f5f5 	udiv	r5, r0, r5
 800324e:	4f28      	ldr	r7, [pc, #160]	; (80032f0 <UART_SetConfig+0x330>)
 8003250:	fba7 3505 	umull	r3, r5, r7, r5
 8003254:	096d      	lsrs	r5, r5, #5
 8003256:	012e      	lsls	r6, r5, #4
 8003258:	f7ff fc6a 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 800325c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003260:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003264:	6865      	ldr	r5, [r4, #4]
 8003266:	00ad      	lsls	r5, r5, #2
 8003268:	fbb0 f9f5 	udiv	r9, r0, r5
 800326c:	f7ff fc60 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8003270:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003274:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003278:	6865      	ldr	r5, [r4, #4]
 800327a:	00ad      	lsls	r5, r5, #2
 800327c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003280:	fba7 3505 	umull	r3, r5, r7, r5
 8003284:	096d      	lsrs	r5, r5, #5
 8003286:	f04f 0864 	mov.w	r8, #100	; 0x64
 800328a:	fb08 9515 	mls	r5, r8, r5, r9
 800328e:	012d      	lsls	r5, r5, #4
 8003290:	3532      	adds	r5, #50	; 0x32
 8003292:	fba7 3505 	umull	r3, r5, r7, r5
 8003296:	096d      	lsrs	r5, r5, #5
 8003298:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800329c:	4435      	add	r5, r6
 800329e:	f7ff fc47 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80032a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032aa:	6866      	ldr	r6, [r4, #4]
 80032ac:	00b6      	lsls	r6, r6, #2
 80032ae:	fbb0 f6f6 	udiv	r6, r0, r6
 80032b2:	f7ff fc3d 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80032b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032be:	6863      	ldr	r3, [r4, #4]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80032c6:	fba7 3000 	umull	r3, r0, r7, r0
 80032ca:	0940      	lsrs	r0, r0, #5
 80032cc:	fb08 6810 	mls	r8, r8, r0, r6
 80032d0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80032d4:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80032d8:	fba7 3708 	umull	r3, r7, r7, r8
 80032dc:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	442f      	add	r7, r5
 80032e4:	609f      	str	r7, [r3, #8]
}
 80032e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032ea:	bf00      	nop
 80032ec:	40011000 	.word	0x40011000
 80032f0:	51eb851f 	.word	0x51eb851f

080032f4 <HAL_UART_Init>:
  if (huart == NULL)
 80032f4:	b358      	cbz	r0, 800334e <HAL_UART_Init+0x5a>
{
 80032f6:	b510      	push	{r4, lr}
 80032f8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80032fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80032fe:	b30b      	cbz	r3, 8003344 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003300:	2324      	movs	r3, #36	; 0x24
 8003302:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	68d3      	ldr	r3, [r2, #12]
 800330a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800330e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003310:	4620      	mov	r0, r4
 8003312:	f7ff fe55 	bl	8002fc0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	6913      	ldr	r3, [r2, #16]
 800331a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800331e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003320:	6822      	ldr	r2, [r4, #0]
 8003322:	6953      	ldr	r3, [r2, #20]
 8003324:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003328:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	68d3      	ldr	r3, [r2, #12]
 800332e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003332:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	2000      	movs	r0, #0
 8003336:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003338:	2320      	movs	r3, #32
 800333a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800333e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003342:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003344:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003348:	f002 f888 	bl	800545c <HAL_UART_MspInit>
 800334c:	e7d8      	b.n	8003300 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800334e:	2001      	movs	r0, #1
}
 8003350:	4770      	bx	lr

08003352 <arduino_get_clock_ms>:
******************************************************************************/
#include "arduino_mpu9250_clk.h"
#include "stm32f4xx_hal.h"

int arduino_get_clock_ms(unsigned long *count)
{
 8003352:	b510      	push	{r4, lr}
 8003354:	4604      	mov	r4, r0
	*count = HAL_GetTick();
 8003356:	f7fe f82d 	bl	80013b4 <HAL_GetTick>
 800335a:	6020      	str	r0, [r4, #0]
	return 0;
}
 800335c:	2000      	movs	r0, #0
 800335e:	bd10      	pop	{r4, pc}

08003360 <arduino_delay_ms>:

int arduino_delay_ms(unsigned long num_ms)
{
 8003360:	b508      	push	{r3, lr}
	HAL_Delay(num_ms);
 8003362:	f7fe f82d 	bl	80013c0 <HAL_Delay>

	return 0;
}
 8003366:	2000      	movs	r0, #0
 8003368:	bd08      	pop	{r3, pc}
	...

0800336c <arduino_i2c_write>:
I2C_HandleTypeDef hi2c2;


int arduino_i2c_write(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 800336c:	b510      	push	{r4, lr}
 800336e:	b08a      	sub	sp, #40	; 0x28
		unsigned char slave_addr_shift = slave_addr << 1;


		unsigned char data_write[32];

		data_write[0] = reg_addr;
 8003370:	f88d 1008 	strb.w	r1, [sp, #8]

		for (int i = 1; i <= length; ++i) {
 8003374:	2101      	movs	r1, #1
 8003376:	e006      	b.n	8003386 <arduino_i2c_write+0x1a>
			data_write[i] = *data;
 8003378:	f813 4b01 	ldrb.w	r4, [r3], #1
 800337c:	a80a      	add	r0, sp, #40	; 0x28
 800337e:	4408      	add	r0, r1
 8003380:	f800 4c20 	strb.w	r4, [r0, #-32]
		for (int i = 1; i <= length; ++i) {
 8003384:	3101      	adds	r1, #1
 8003386:	428a      	cmp	r2, r1
 8003388:	daf6      	bge.n	8003378 <arduino_i2c_write+0xc>
			data++;
		}

		if(HAL_I2C_Master_Transmit(&hi2c2, 0xD0, data_write, length+1, 10) == HAL_OK ){
 800338a:	230a      	movs	r3, #10
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	1c53      	adds	r3, r2, #1
 8003390:	aa02      	add	r2, sp, #8
 8003392:	21d0      	movs	r1, #208	; 0xd0
 8003394:	4803      	ldr	r0, [pc, #12]	; (80033a4 <arduino_i2c_write+0x38>)
 8003396:	f7fe fded 	bl	8001f74 <HAL_I2C_Master_Transmit>
 800339a:	b100      	cbz	r0, 800339e <arduino_i2c_write+0x32>
			return 0;
		}
		else{
			return 1;
 800339c:	2001      	movs	r0, #1
		}
}
 800339e:	b00a      	add	sp, #40	; 0x28
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	bf00      	nop
 80033a4:	20000328 	.word	0x20000328

080033a8 <arduino_i2c_read>:

int arduino_i2c_read(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 80033a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033aa:	b085      	sub	sp, #20
 80033ac:	4617      	mov	r7, r2
 80033ae:	461e      	mov	r6, r3
	unsigned char slave_addr_shift = slave_addr << 1;

		unsigned char data_read[32];

		unsigned char data_write[1];
		data_write[0] = reg_addr;
 80033b0:	aa04      	add	r2, sp, #16
 80033b2:	f802 1d04 	strb.w	r1, [r2, #-4]!

		//Send adress of register ONLY
		HAL_I2C_Master_Transmit(&hi2c2, 0xD0, data_write, 1, 10);
 80033b6:	4c09      	ldr	r4, [pc, #36]	; (80033dc <arduino_i2c_read+0x34>)
 80033b8:	250a      	movs	r5, #10
 80033ba:	9500      	str	r5, [sp, #0]
 80033bc:	2301      	movs	r3, #1
 80033be:	21d0      	movs	r1, #208	; 0xd0
 80033c0:	4620      	mov	r0, r4
 80033c2:	f7fe fdd7 	bl	8001f74 <HAL_I2C_Master_Transmit>
		//Then read from register
		HAL_I2C_Master_Receive(&hi2c2, 0xD1, data, length, 10);
 80033c6:	9500      	str	r5, [sp, #0]
 80033c8:	463b      	mov	r3, r7
 80033ca:	4632      	mov	r2, r6
 80033cc:	21d1      	movs	r1, #209	; 0xd1
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7fe fe8a 	bl	80020e8 <HAL_I2C_Master_Receive>


		return 0;
}
 80033d4:	2000      	movs	r0, #0
 80033d6:	b005      	add	sp, #20
 80033d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000328 	.word	0x20000328

080033e0 <_MLPrintLog>:
void logString(char * string) 
{
}

int _MLPrintLog (int priority, const char* tag, const char* fmt, ...)
{
 80033e0:	b40c      	push	{r2, r3}
}
 80033e2:	b002      	add	sp, #8
 80033e4:	4770      	bx	lr
	...

080033e8 <get_st_biases>:
    return result;
}
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 80033e8:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	4605      	mov	r5, r0
 80033f0:	460c      	mov	r4, r1
 80033f2:	4616      	mov	r6, r2
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f88d 3004 	strb.w	r3, [sp, #4]
    data[1] = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f88d 3005 	strb.w	r3, [sp, #5]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8003400:	4bac      	ldr	r3, [pc, #688]	; (80036b4 <get_st_biases+0x2cc>)
 8003402:	6858      	ldr	r0, [r3, #4]
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	ab01      	add	r3, sp, #4
 8003408:	2202      	movs	r2, #2
 800340a:	7d49      	ldrb	r1, [r1, #21]
 800340c:	7800      	ldrb	r0, [r0, #0]
 800340e:	f7ff ffad 	bl	800336c <arduino_i2c_write>
 8003412:	2800      	cmp	r0, #0
 8003414:	f040 81d9 	bne.w	80037ca <get_st_biases+0x3e2>
        return -1;
    delay_ms(200);
 8003418:	20c8      	movs	r0, #200	; 0xc8
 800341a:	f7ff ffa1 	bl	8003360 <arduino_delay_ms>
    data[0] = 0;
 800341e:	ab04      	add	r3, sp, #16
 8003420:	2200      	movs	r2, #0
 8003422:	f803 2d0c 	strb.w	r2, [r3, #-12]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8003426:	4aa3      	ldr	r2, [pc, #652]	; (80036b4 <get_st_biases+0x2cc>)
 8003428:	6850      	ldr	r0, [r2, #4]
 800342a:	6811      	ldr	r1, [r2, #0]
 800342c:	2201      	movs	r2, #1
 800342e:	7c49      	ldrb	r1, [r1, #17]
 8003430:	7800      	ldrb	r0, [r0, #0]
 8003432:	f7ff ff9b 	bl	800336c <arduino_i2c_write>
 8003436:	2800      	cmp	r0, #0
 8003438:	f040 81ca 	bne.w	80037d0 <get_st_biases+0x3e8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800343c:	4b9d      	ldr	r3, [pc, #628]	; (80036b4 <get_st_biases+0x2cc>)
 800343e:	6858      	ldr	r0, [r3, #4]
 8003440:	6819      	ldr	r1, [r3, #0]
 8003442:	ab01      	add	r3, sp, #4
 8003444:	2201      	movs	r2, #1
 8003446:	7949      	ldrb	r1, [r1, #5]
 8003448:	7800      	ldrb	r0, [r0, #0]
 800344a:	f7ff ff8f 	bl	800336c <arduino_i2c_write>
 800344e:	2800      	cmp	r0, #0
 8003450:	f040 81c1 	bne.w	80037d6 <get_st_biases+0x3ee>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003454:	4b97      	ldr	r3, [pc, #604]	; (80036b4 <get_st_biases+0x2cc>)
 8003456:	6858      	ldr	r0, [r3, #4]
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	ab01      	add	r3, sp, #4
 800345c:	2201      	movs	r2, #1
 800345e:	7d49      	ldrb	r1, [r1, #21]
 8003460:	7800      	ldrb	r0, [r0, #0]
 8003462:	f7ff ff83 	bl	800336c <arduino_i2c_write>
 8003466:	2800      	cmp	r0, #0
 8003468:	f040 81b8 	bne.w	80037dc <get_st_biases+0x3f4>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 800346c:	4b91      	ldr	r3, [pc, #580]	; (80036b4 <get_st_biases+0x2cc>)
 800346e:	6858      	ldr	r0, [r3, #4]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	ab01      	add	r3, sp, #4
 8003474:	2201      	movs	r2, #1
 8003476:	7e89      	ldrb	r1, [r1, #26]
 8003478:	7800      	ldrb	r0, [r0, #0]
 800347a:	f7ff ff77 	bl	800336c <arduino_i2c_write>
 800347e:	2800      	cmp	r0, #0
 8003480:	f040 81af 	bne.w	80037e2 <get_st_biases+0x3fa>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003484:	4b8b      	ldr	r3, [pc, #556]	; (80036b4 <get_st_biases+0x2cc>)
 8003486:	6858      	ldr	r0, [r3, #4]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	ab01      	add	r3, sp, #4
 800348c:	2201      	movs	r2, #1
 800348e:	7909      	ldrb	r1, [r1, #4]
 8003490:	7800      	ldrb	r0, [r0, #0]
 8003492:	f7ff ff6b 	bl	800336c <arduino_i2c_write>
 8003496:	2800      	cmp	r0, #0
 8003498:	f040 81a6 	bne.w	80037e8 <get_st_biases+0x400>
        return -1;
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 800349c:	ab04      	add	r3, sp, #16
 800349e:	220c      	movs	r2, #12
 80034a0:	f803 2d0c 	strb.w	r2, [r3, #-12]!
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80034a4:	4a83      	ldr	r2, [pc, #524]	; (80036b4 <get_st_biases+0x2cc>)
 80034a6:	6850      	ldr	r0, [r2, #4]
 80034a8:	6811      	ldr	r1, [r2, #0]
 80034aa:	2201      	movs	r2, #1
 80034ac:	7909      	ldrb	r1, [r1, #4]
 80034ae:	7800      	ldrb	r0, [r0, #0]
 80034b0:	f7ff ff5c 	bl	800336c <arduino_i2c_write>
 80034b4:	2800      	cmp	r0, #0
 80034b6:	f040 819a 	bne.w	80037ee <get_st_biases+0x406>
        return -1;
    delay_ms(15);
 80034ba:	200f      	movs	r0, #15
 80034bc:	f7ff ff50 	bl	8003360 <arduino_delay_ms>
    data[0] = st.test->reg_lpf;
 80034c0:	4a7c      	ldr	r2, [pc, #496]	; (80036b4 <get_st_biases+0x2cc>)
 80034c2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80034c4:	7a59      	ldrb	r1, [r3, #9]
 80034c6:	ab04      	add	r3, sp, #16
 80034c8:	f803 1d0c 	strb.w	r1, [r3, #-12]!
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 80034cc:	6850      	ldr	r0, [r2, #4]
 80034ce:	6811      	ldr	r1, [r2, #0]
 80034d0:	2201      	movs	r2, #1
 80034d2:	7889      	ldrb	r1, [r1, #2]
 80034d4:	7800      	ldrb	r0, [r0, #0]
 80034d6:	f7ff ff49 	bl	800336c <arduino_i2c_write>
 80034da:	2800      	cmp	r0, #0
 80034dc:	f040 818a 	bne.w	80037f4 <get_st_biases+0x40c>
        return -1;
    data[0] = st.test->reg_rate_div;
 80034e0:	4a74      	ldr	r2, [pc, #464]	; (80036b4 <get_st_biases+0x2cc>)
 80034e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80034e4:	7a19      	ldrb	r1, [r3, #8]
 80034e6:	ab04      	add	r3, sp, #16
 80034e8:	f803 1d0c 	strb.w	r1, [r3, #-12]!
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 80034ec:	6850      	ldr	r0, [r2, #4]
 80034ee:	6811      	ldr	r1, [r2, #0]
 80034f0:	2201      	movs	r2, #1
 80034f2:	7849      	ldrb	r1, [r1, #1]
 80034f4:	7800      	ldrb	r0, [r0, #0]
 80034f6:	f7ff ff39 	bl	800336c <arduino_i2c_write>
 80034fa:	2800      	cmp	r0, #0
 80034fc:	f040 817d 	bne.w	80037fa <get_st_biases+0x412>
        return -1;
    if (hw_test)
 8003500:	2e00      	cmp	r6, #0
 8003502:	f000 80c8 	beq.w	8003696 <get_st_biases+0x2ae>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8003506:	4b6b      	ldr	r3, [pc, #428]	; (80036b4 <get_st_biases+0x2cc>)
 8003508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350a:	7a9b      	ldrb	r3, [r3, #10]
 800350c:	f063 031f 	orn	r3, r3, #31
 8003510:	f88d 3004 	strb.w	r3, [sp, #4]
    else
        data[0] = st.test->reg_gyro_fsr;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8003514:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <get_st_biases+0x2cc>)
 8003516:	6858      	ldr	r0, [r3, #4]
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	ab01      	add	r3, sp, #4
 800351c:	2201      	movs	r2, #1
 800351e:	7989      	ldrb	r1, [r1, #6]
 8003520:	7800      	ldrb	r0, [r0, #0]
 8003522:	f7ff ff23 	bl	800336c <arduino_i2c_write>
 8003526:	2800      	cmp	r0, #0
 8003528:	f040 816a 	bne.w	8003800 <get_st_biases+0x418>
        return -1;

    if (hw_test)
 800352c:	2e00      	cmp	r6, #0
 800352e:	f000 80b8 	beq.w	80036a2 <get_st_biases+0x2ba>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 8003532:	4b60      	ldr	r3, [pc, #384]	; (80036b4 <get_st_biases+0x2cc>)
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	7adb      	ldrb	r3, [r3, #11]
 8003538:	f063 031f 	orn	r3, r3, #31
 800353c:	f88d 3004 	strb.w	r3, [sp, #4]
    else
        data[0] = test.reg_accel_fsr;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8003540:	4b5c      	ldr	r3, [pc, #368]	; (80036b4 <get_st_biases+0x2cc>)
 8003542:	6858      	ldr	r0, [r3, #4]
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	ab01      	add	r3, sp, #4
 8003548:	2201      	movs	r2, #1
 800354a:	79c9      	ldrb	r1, [r1, #7]
 800354c:	7800      	ldrb	r0, [r0, #0]
 800354e:	f7ff ff0d 	bl	800336c <arduino_i2c_write>
 8003552:	2800      	cmp	r0, #0
 8003554:	f040 8157 	bne.w	8003806 <get_st_biases+0x41e>
        return -1;
    if (hw_test)
 8003558:	2e00      	cmp	r6, #0
 800355a:	f040 80a6 	bne.w	80036aa <get_st_biases+0x2c2>
        delay_ms(200);

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 800355e:	ab04      	add	r3, sp, #16
 8003560:	2240      	movs	r2, #64	; 0x40
 8003562:	f803 2d0c 	strb.w	r2, [r3, #-12]!
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003566:	4a53      	ldr	r2, [pc, #332]	; (80036b4 <get_st_biases+0x2cc>)
 8003568:	6850      	ldr	r0, [r2, #4]
 800356a:	6811      	ldr	r1, [r2, #0]
 800356c:	2201      	movs	r2, #1
 800356e:	7909      	ldrb	r1, [r1, #4]
 8003570:	7800      	ldrb	r0, [r0, #0]
 8003572:	f7ff fefb 	bl	800336c <arduino_i2c_write>
 8003576:	2800      	cmp	r0, #0
 8003578:	f040 8148 	bne.w	800380c <get_st_biases+0x424>
        return -1;

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 800357c:	ab04      	add	r3, sp, #16
 800357e:	2278      	movs	r2, #120	; 0x78
 8003580:	f803 2d0c 	strb.w	r2, [r3, #-12]!
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8003584:	4a4b      	ldr	r2, [pc, #300]	; (80036b4 <get_st_biases+0x2cc>)
 8003586:	6850      	ldr	r0, [r2, #4]
 8003588:	6811      	ldr	r1, [r2, #0]
 800358a:	2201      	movs	r2, #1
 800358c:	7949      	ldrb	r1, [r1, #5]
 800358e:	7800      	ldrb	r0, [r0, #0]
 8003590:	f7ff feec 	bl	800336c <arduino_i2c_write>
 8003594:	2800      	cmp	r0, #0
 8003596:	f040 813c 	bne.w	8003812 <get_st_biases+0x42a>
        return -1;
    delay_ms(test.wait_ms);
 800359a:	20c8      	movs	r0, #200	; 0xc8
 800359c:	f7ff fee0 	bl	8003360 <arduino_delay_ms>
    data[0] = 0;
 80035a0:	ab04      	add	r3, sp, #16
 80035a2:	2200      	movs	r2, #0
 80035a4:	f803 2d0c 	strb.w	r2, [r3, #-12]!
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80035a8:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <get_st_biases+0x2cc>)
 80035aa:	6850      	ldr	r0, [r2, #4]
 80035ac:	6811      	ldr	r1, [r2, #0]
 80035ae:	2201      	movs	r2, #1
 80035b0:	7949      	ldrb	r1, [r1, #5]
 80035b2:	7800      	ldrb	r0, [r0, #0]
 80035b4:	f7ff feda 	bl	800336c <arduino_i2c_write>
 80035b8:	2800      	cmp	r0, #0
 80035ba:	f040 812d 	bne.w	8003818 <get_st_biases+0x430>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 80035be:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <get_st_biases+0x2cc>)
 80035c0:	6858      	ldr	r0, [r3, #4]
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	ab01      	add	r3, sp, #4
 80035c6:	2202      	movs	r2, #2
 80035c8:	7b09      	ldrb	r1, [r1, #12]
 80035ca:	7800      	ldrb	r0, [r0, #0]
 80035cc:	f7ff feec 	bl	80033a8 <arduino_i2c_read>
 80035d0:	4680      	mov	r8, r0
 80035d2:	2800      	cmp	r0, #0
 80035d4:	f040 8123 	bne.w	800381e <get_st_biases+0x436>
        return -1;

    fifo_count = (data[0] << 8) | data[1];
 80035d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80035dc:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80035e0:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 80035e4:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <get_st_biases+0x2d0>)
 80035e6:	fba3 3707 	umull	r3, r7, r3, r7
 80035ea:	f3c7 07c7 	ubfx	r7, r7, #3, #8
    gyro[0] = gyro[1] = gyro[2] = 0;
 80035ee:	2600      	movs	r6, #0
 80035f0:	60ae      	str	r6, [r5, #8]
 80035f2:	606e      	str	r6, [r5, #4]
 80035f4:	602e      	str	r6, [r5, #0]
    accel[0] = accel[1] = accel[2] = 0;
 80035f6:	60a6      	str	r6, [r4, #8]
 80035f8:	6066      	str	r6, [r4, #4]
 80035fa:	6026      	str	r6, [r4, #0]

    for (ii = 0; ii < packet_count; ii++) {
 80035fc:	42be      	cmp	r6, r7
 80035fe:	d25d      	bcs.n	80036bc <get_st_biases+0x2d4>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8003600:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <get_st_biases+0x2cc>)
 8003602:	6858      	ldr	r0, [r3, #4]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	ab01      	add	r3, sp, #4
 8003608:	220c      	movs	r2, #12
 800360a:	7b49      	ldrb	r1, [r1, #13]
 800360c:	7800      	ldrb	r0, [r0, #0]
 800360e:	f7ff fecb 	bl	80033a8 <arduino_i2c_read>
 8003612:	2800      	cmp	r0, #0
 8003614:	f040 8106 	bne.w	8003824 <get_st_biases+0x43c>
            return -1;
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8003618:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800361c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8003620:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8003624:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003628:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800362c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8003630:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003634:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003638:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
        accel[0] += (long)accel_cur[0];
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	fa00 f181 	sxtah	r1, r0, r1
 8003642:	6021      	str	r1, [r4, #0]
        accel[1] += (long)accel_cur[1];
 8003644:	6861      	ldr	r1, [r4, #4]
 8003646:	fa01 f282 	sxtah	r2, r1, r2
 800364a:	6062      	str	r2, [r4, #4]
        accel[2] += (long)accel_cur[2];
 800364c:	68a2      	ldr	r2, [r4, #8]
 800364e:	fa02 f383 	sxtah	r3, r2, r3
 8003652:	60a3      	str	r3, [r4, #8]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8003654:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003658:	f89d 100b 	ldrb.w	r1, [sp, #11]
 800365c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8003660:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003664:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003668:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 800366c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8003670:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003674:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
        gyro[0] += (long)gyro_cur[0];
 8003678:	6828      	ldr	r0, [r5, #0]
 800367a:	fa00 f181 	sxtah	r1, r0, r1
 800367e:	6029      	str	r1, [r5, #0]
        gyro[1] += (long)gyro_cur[1];
 8003680:	6869      	ldr	r1, [r5, #4]
 8003682:	fa01 f282 	sxtah	r2, r1, r2
 8003686:	606a      	str	r2, [r5, #4]
        gyro[2] += (long)gyro_cur[2];
 8003688:	68aa      	ldr	r2, [r5, #8]
 800368a:	fa02 f383 	sxtah	r3, r2, r3
 800368e:	60ab      	str	r3, [r5, #8]
    for (ii = 0; ii < packet_count; ii++) {
 8003690:	3601      	adds	r6, #1
 8003692:	b2f6      	uxtb	r6, r6
 8003694:	e7b2      	b.n	80035fc <get_st_biases+0x214>
        data[0] = st.test->reg_gyro_fsr;
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <get_st_biases+0x2cc>)
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	7a9b      	ldrb	r3, [r3, #10]
 800369c:	f88d 3004 	strb.w	r3, [sp, #4]
 80036a0:	e738      	b.n	8003514 <get_st_biases+0x12c>
        data[0] = test.reg_accel_fsr;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f88d 3004 	strb.w	r3, [sp, #4]
 80036a8:	e74a      	b.n	8003540 <get_st_biases+0x158>
        delay_ms(200);
 80036aa:	20c8      	movs	r0, #200	; 0xc8
 80036ac:	f7ff fe58 	bl	8003360 <arduino_delay_ms>
 80036b0:	e755      	b.n	800355e <get_st_biases+0x176>
 80036b2:	bf00      	nop
 80036b4:	20000028 	.word	0x20000028
 80036b8:	aaaaaaab 	.word	0xaaaaaaab
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 80036bc:	6829      	ldr	r1, [r5, #0]
 80036be:	2283      	movs	r2, #131	; 0x83
 80036c0:	2300      	movs	r3, #0
 80036c2:	0408      	lsls	r0, r1, #16
 80036c4:	1409      	asrs	r1, r1, #16
 80036c6:	f7fd fa05 	bl	8000ad4 <__aeabi_ldivmod>
 80036ca:	b2fe      	uxtb	r6, r7
 80036cc:	2700      	movs	r7, #0
 80036ce:	4632      	mov	r2, r6
 80036d0:	463b      	mov	r3, r7
 80036d2:	f7fd f9ff 	bl	8000ad4 <__aeabi_ldivmod>
 80036d6:	6028      	str	r0, [r5, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 80036d8:	6869      	ldr	r1, [r5, #4]
 80036da:	2283      	movs	r2, #131	; 0x83
 80036dc:	2300      	movs	r3, #0
 80036de:	0408      	lsls	r0, r1, #16
 80036e0:	1409      	asrs	r1, r1, #16
 80036e2:	f7fd f9f7 	bl	8000ad4 <__aeabi_ldivmod>
 80036e6:	4632      	mov	r2, r6
 80036e8:	463b      	mov	r3, r7
 80036ea:	f7fd f9f3 	bl	8000ad4 <__aeabi_ldivmod>
 80036ee:	6068      	str	r0, [r5, #4]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 80036f0:	68a9      	ldr	r1, [r5, #8]
 80036f2:	2283      	movs	r2, #131	; 0x83
 80036f4:	2300      	movs	r3, #0
 80036f6:	0408      	lsls	r0, r1, #16
 80036f8:	1409      	asrs	r1, r1, #16
 80036fa:	f7fd f9eb 	bl	8000ad4 <__aeabi_ldivmod>
 80036fe:	4632      	mov	r2, r6
 8003700:	463b      	mov	r3, r7
 8003702:	f7fd f9e7 	bl	8000ad4 <__aeabi_ldivmod>
 8003706:	60a8      	str	r0, [r5, #8]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 800370e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003712:	f1ba 0f00 	cmp.w	sl, #0
 8003716:	f17b 0300 	sbcs.w	r3, fp, #0
 800371a:	db3a      	blt.n	8003792 <get_st_biases+0x3aa>
 800371c:	ea4f 309a 	mov.w	r0, sl, lsr #14
 8003720:	4632      	mov	r2, r6
 8003722:	463b      	mov	r3, r7
 8003724:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
 8003728:	ea4f 31ab 	mov.w	r1, fp, asr #14
 800372c:	f7fd f9d2 	bl	8000ad4 <__aeabi_ldivmod>
 8003730:	6020      	str	r0, [r4, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8003732:	6863      	ldr	r3, [r4, #4]
 8003734:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8003738:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800373c:	f1ba 0f00 	cmp.w	sl, #0
 8003740:	f17b 0300 	sbcs.w	r3, fp, #0
 8003744:	db2d      	blt.n	80037a2 <get_st_biases+0x3ba>
 8003746:	ea4f 309a 	mov.w	r0, sl, lsr #14
 800374a:	4632      	mov	r2, r6
 800374c:	463b      	mov	r3, r7
 800374e:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
 8003752:	ea4f 31ab 	mov.w	r1, fp, asr #14
 8003756:	f7fd f9bd 	bl	8000ad4 <__aeabi_ldivmod>
 800375a:	6060      	str	r0, [r4, #4]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 800375c:	68a3      	ldr	r3, [r4, #8]
 800375e:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8003762:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003766:	f1ba 0f00 	cmp.w	sl, #0
 800376a:	f17b 0300 	sbcs.w	r3, fp, #0
 800376e:	db20      	blt.n	80037b2 <get_st_biases+0x3ca>
 8003770:	ea4f 309a 	mov.w	r0, sl, lsr #14
 8003774:	4632      	mov	r2, r6
 8003776:	463b      	mov	r3, r7
 8003778:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
 800377c:	ea4f 31ab 	mov.w	r1, fp, asr #14
 8003780:	f7fd f9a8 	bl	8000ad4 <__aeabi_ldivmod>
 8003784:	60a0      	str	r0, [r4, #8]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8003786:	2800      	cmp	r0, #0
 8003788:	dd1b      	ble.n	80037c2 <get_st_biases+0x3da>
        accel[2] -= 65536L;
 800378a:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
 800378e:	60a0      	str	r0, [r4, #8]
 8003790:	e04a      	b.n	8003828 <get_st_biases+0x440>
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 8003792:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8003796:	2300      	movs	r3, #0
 8003798:	eb1a 0a02 	adds.w	sl, sl, r2
 800379c:	eb4b 0b03 	adc.w	fp, fp, r3
 80037a0:	e7bc      	b.n	800371c <get_st_biases+0x334>
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 80037a2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80037a6:	2300      	movs	r3, #0
 80037a8:	eb1a 0a02 	adds.w	sl, sl, r2
 80037ac:	eb4b 0b03 	adc.w	fp, fp, r3
 80037b0:	e7c9      	b.n	8003746 <get_st_biases+0x35e>
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 80037b2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80037b6:	2300      	movs	r3, #0
 80037b8:	eb1a 0a02 	adds.w	sl, sl, r2
 80037bc:	eb4b 0b03 	adc.w	fp, fp, r3
 80037c0:	e7d6      	b.n	8003770 <get_st_biases+0x388>
    else
        accel[2] += 65536L;
 80037c2:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80037c6:	60a0      	str	r0, [r4, #8]
 80037c8:	e02e      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 80037ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80037ce:	e02b      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 80037d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80037d4:	e028      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 80037d6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80037da:	e025      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 80037dc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80037e0:	e022      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 80037e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80037e6:	e01f      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 80037e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80037ec:	e01c      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 80037ee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80037f2:	e019      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 80037f4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80037f8:	e016      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 80037fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80037fe:	e013      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 8003800:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003804:	e010      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 8003806:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800380a:	e00d      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 800380c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003810:	e00a      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 8003812:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003816:	e007      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 8003818:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800381c:	e004      	b.n	8003828 <get_st_biases+0x440>
        return -1;
 800381e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003822:	e001      	b.n	8003828 <get_st_biases+0x440>
            return -1;
 8003824:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
#endif

    return 0;
}
 8003828:	4640      	mov	r0, r8
 800382a:	b004      	add	sp, #16
 800382c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

08003830 <set_int_enable>:
{
 8003830:	b500      	push	{lr}
 8003832:	b083      	sub	sp, #12
    if (st.chip_cfg.dmp_on) {
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <set_int_enable+0x9c>)
 8003836:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800383a:	b1db      	cbz	r3, 8003874 <set_int_enable+0x44>
        if (enable)
 800383c:	b1b0      	cbz	r0, 800386c <set_int_enable+0x3c>
            tmp = BIT_DMP_INT_EN;
 800383e:	2302      	movs	r3, #2
 8003840:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8003844:	4b21      	ldr	r3, [pc, #132]	; (80038cc <set_int_enable+0x9c>)
 8003846:	6858      	ldr	r0, [r3, #4]
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	f10d 0307 	add.w	r3, sp, #7
 800384e:	2201      	movs	r2, #1
 8003850:	7c49      	ldrb	r1, [r1, #17]
 8003852:	7800      	ldrb	r0, [r0, #0]
 8003854:	f7ff fd8a 	bl	800336c <arduino_i2c_write>
 8003858:	4603      	mov	r3, r0
 800385a:	bb58      	cbnz	r0, 80038b4 <set_int_enable+0x84>
        st.chip_cfg.int_enable = tmp;
 800385c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003860:	4a1a      	ldr	r2, [pc, #104]	; (80038cc <set_int_enable+0x9c>)
 8003862:	7451      	strb	r1, [r2, #17]
}
 8003864:	4618      	mov	r0, r3
 8003866:	b003      	add	sp, #12
 8003868:	f85d fb04 	ldr.w	pc, [sp], #4
            tmp = 0x00;
 800386c:	2300      	movs	r3, #0
 800386e:	f88d 3007 	strb.w	r3, [sp, #7]
 8003872:	e7e7      	b.n	8003844 <set_int_enable+0x14>
        if (!st.chip_cfg.sensors)
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <set_int_enable+0x9c>)
 8003876:	7a9b      	ldrb	r3, [r3, #10]
 8003878:	b1fb      	cbz	r3, 80038ba <set_int_enable+0x8a>
        if (enable && st.chip_cfg.int_enable)
 800387a:	b110      	cbz	r0, 8003882 <set_int_enable+0x52>
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <set_int_enable+0x9c>)
 800387e:	7c5b      	ldrb	r3, [r3, #17]
 8003880:	b9f3      	cbnz	r3, 80038c0 <set_int_enable+0x90>
        if (enable)
 8003882:	b198      	cbz	r0, 80038ac <set_int_enable+0x7c>
            tmp = BIT_DATA_RDY_EN;
 8003884:	2301      	movs	r3, #1
 8003886:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <set_int_enable+0x9c>)
 800388c:	6858      	ldr	r0, [r3, #4]
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	f10d 0307 	add.w	r3, sp, #7
 8003894:	2201      	movs	r2, #1
 8003896:	7c49      	ldrb	r1, [r1, #17]
 8003898:	7800      	ldrb	r0, [r0, #0]
 800389a:	f7ff fd67 	bl	800336c <arduino_i2c_write>
 800389e:	4603      	mov	r3, r0
 80038a0:	b980      	cbnz	r0, 80038c4 <set_int_enable+0x94>
        st.chip_cfg.int_enable = tmp;
 80038a2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80038a6:	4a09      	ldr	r2, [pc, #36]	; (80038cc <set_int_enable+0x9c>)
 80038a8:	7451      	strb	r1, [r2, #17]
 80038aa:	e7db      	b.n	8003864 <set_int_enable+0x34>
            tmp = 0x00;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f88d 3007 	strb.w	r3, [sp, #7]
 80038b2:	e7ea      	b.n	800388a <set_int_enable+0x5a>
            return -1;
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038b8:	e7d4      	b.n	8003864 <set_int_enable+0x34>
            return -1;
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038be:	e7d1      	b.n	8003864 <set_int_enable+0x34>
            return 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e7cf      	b.n	8003864 <set_int_enable+0x34>
            return -1;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038c8:	e7cc      	b.n	8003864 <set_int_enable+0x34>
 80038ca:	bf00      	nop
 80038cc:	20000028 	.word	0x20000028

080038d0 <mpu_get_gyro_reg>:
{
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	b082      	sub	sp, #8
    if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
 80038d4:	4b19      	ldr	r3, [pc, #100]	; (800393c <mpu_get_gyro_reg+0x6c>)
 80038d6:	7a9b      	ldrb	r3, [r3, #10]
 80038d8:	f013 0f70 	tst.w	r3, #112	; 0x70
 80038dc:	d028      	beq.n	8003930 <mpu_get_gyro_reg+0x60>
 80038de:	460d      	mov	r5, r1
 80038e0:	4604      	mov	r4, r0
    if (i2c_read(st.hw->addr, st.reg->raw_gyro, 6, tmp))
 80038e2:	4b16      	ldr	r3, [pc, #88]	; (800393c <mpu_get_gyro_reg+0x6c>)
 80038e4:	6858      	ldr	r0, [r3, #4]
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	466b      	mov	r3, sp
 80038ea:	2206      	movs	r2, #6
 80038ec:	7b89      	ldrb	r1, [r1, #14]
 80038ee:	7800      	ldrb	r0, [r0, #0]
 80038f0:	f7ff fd5a 	bl	80033a8 <arduino_i2c_read>
 80038f4:	4606      	mov	r6, r0
 80038f6:	b9f0      	cbnz	r0, 8003936 <mpu_get_gyro_reg+0x66>
    data[0] = (tmp[0] << 8) | tmp[1];
 80038f8:	f89d 2000 	ldrb.w	r2, [sp]
 80038fc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003900:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003904:	8023      	strh	r3, [r4, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 8003906:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800390a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800390e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003912:	8063      	strh	r3, [r4, #2]
    data[2] = (tmp[4] << 8) | tmp[5];
 8003914:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003918:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800391c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003920:	80a3      	strh	r3, [r4, #4]
    if (timestamp)
 8003922:	b115      	cbz	r5, 800392a <mpu_get_gyro_reg+0x5a>
        get_ms(timestamp);
 8003924:	4628      	mov	r0, r5
 8003926:	f7ff fd14 	bl	8003352 <arduino_get_clock_ms>
}
 800392a:	4630      	mov	r0, r6
 800392c:	b002      	add	sp, #8
 800392e:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8003930:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003934:	e7f9      	b.n	800392a <mpu_get_gyro_reg+0x5a>
        return -1;
 8003936:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800393a:	e7f6      	b.n	800392a <mpu_get_gyro_reg+0x5a>
 800393c:	20000028 	.word	0x20000028

08003940 <mpu_get_accel_reg>:
{
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	b082      	sub	sp, #8
    if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <mpu_get_accel_reg+0x6c>)
 8003946:	7a9b      	ldrb	r3, [r3, #10]
 8003948:	f013 0f08 	tst.w	r3, #8
 800394c:	d028      	beq.n	80039a0 <mpu_get_accel_reg+0x60>
 800394e:	460d      	mov	r5, r1
 8003950:	4604      	mov	r4, r0
    if (i2c_read(st.hw->addr, st.reg->raw_accel, 6, tmp))
 8003952:	4b16      	ldr	r3, [pc, #88]	; (80039ac <mpu_get_accel_reg+0x6c>)
 8003954:	6858      	ldr	r0, [r3, #4]
 8003956:	6819      	ldr	r1, [r3, #0]
 8003958:	466b      	mov	r3, sp
 800395a:	2206      	movs	r2, #6
 800395c:	7bc9      	ldrb	r1, [r1, #15]
 800395e:	7800      	ldrb	r0, [r0, #0]
 8003960:	f7ff fd22 	bl	80033a8 <arduino_i2c_read>
 8003964:	4606      	mov	r6, r0
 8003966:	b9f0      	cbnz	r0, 80039a6 <mpu_get_accel_reg+0x66>
    data[0] = (tmp[0] << 8) | tmp[1];
 8003968:	f89d 2000 	ldrb.w	r2, [sp]
 800396c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003970:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003974:	8023      	strh	r3, [r4, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 8003976:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800397a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800397e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003982:	8063      	strh	r3, [r4, #2]
    data[2] = (tmp[4] << 8) | tmp[5];
 8003984:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003988:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800398c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003990:	80a3      	strh	r3, [r4, #4]
    if (timestamp)
 8003992:	b115      	cbz	r5, 800399a <mpu_get_accel_reg+0x5a>
        get_ms(timestamp);
 8003994:	4628      	mov	r0, r5
 8003996:	f7ff fcdc 	bl	8003352 <arduino_get_clock_ms>
}
 800399a:	4630      	mov	r0, r6
 800399c:	b002      	add	sp, #8
 800399e:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 80039a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80039a4:	e7f9      	b.n	800399a <mpu_get_accel_reg+0x5a>
        return -1;
 80039a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80039aa:	e7f6      	b.n	800399a <mpu_get_accel_reg+0x5a>
 80039ac:	20000028 	.word	0x20000028

080039b0 <mpu_get_temperature>:
{
 80039b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b2:	b083      	sub	sp, #12
    if (!(st.chip_cfg.sensors))
 80039b4:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <mpu_get_temperature+0x88>)
 80039b6:	7a9b      	ldrb	r3, [r3, #10]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d037      	beq.n	8003a2c <mpu_get_temperature+0x7c>
 80039bc:	460d      	mov	r5, r1
 80039be:	4606      	mov	r6, r0
    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <mpu_get_temperature+0x88>)
 80039c2:	6858      	ldr	r0, [r3, #4]
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	ab01      	add	r3, sp, #4
 80039c8:	2202      	movs	r2, #2
 80039ca:	7c09      	ldrb	r1, [r1, #16]
 80039cc:	7800      	ldrb	r0, [r0, #0]
 80039ce:	f7ff fceb 	bl	80033a8 <arduino_i2c_read>
 80039d2:	4607      	mov	r7, r0
 80039d4:	bb68      	cbnz	r0, 8003a32 <mpu_get_temperature+0x82>
    raw = (tmp[0] << 8) | tmp[1];
 80039d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	b21b      	sxth	r3, r3
 80039de:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80039e2:	431c      	orrs	r4, r3
    if (timestamp)
 80039e4:	b115      	cbz	r5, 80039ec <mpu_get_temperature+0x3c>
        get_ms(timestamp);
 80039e6:	4628      	mov	r0, r5
 80039e8:	f7ff fcb3 	bl	8003352 <arduino_get_clock_ms>
    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <mpu_get_temperature+0x88>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80039f4:	ee07 2a90 	vmov	s15, r2
 80039f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039fc:	ee07 4a90 	vmov	s15, r4
 8003a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a08:	88db      	ldrh	r3, [r3, #6]
 8003a0a:	ee06 3a90 	vmov	s13, r3
 8003a0e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003a12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a16:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003a3c <mpu_get_temperature+0x8c>
 8003a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a1e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8003a22:	edc6 7a00 	vstr	s15, [r6]
}
 8003a26:	4638      	mov	r0, r7
 8003a28:	b003      	add	sp, #12
 8003a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8003a2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003a30:	e7f9      	b.n	8003a26 <mpu_get_temperature+0x76>
        return -1;
 8003a32:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003a36:	e7f6      	b.n	8003a26 <mpu_get_temperature+0x76>
 8003a38:	20000028 	.word	0x20000028
 8003a3c:	420c0000 	.word	0x420c0000

08003a40 <mpu_reset_fifo>:
    if (!(st.chip_cfg.sensors))
 8003a40:	4b7c      	ldr	r3, [pc, #496]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003a42:	7a9b      	ldrb	r3, [r3, #10]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80d5 	beq.w	8003bf4 <mpu_reset_fifo+0x1b4>
{
 8003a4a:	b500      	push	{lr}
 8003a4c:	b083      	sub	sp, #12
    data = 0;
 8003a4e:	ab02      	add	r3, sp, #8
 8003a50:	2200      	movs	r2, #0
 8003a52:	f803 2d01 	strb.w	r2, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8003a56:	4a77      	ldr	r2, [pc, #476]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003a58:	6850      	ldr	r0, [r2, #4]
 8003a5a:	6811      	ldr	r1, [r2, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	7c49      	ldrb	r1, [r1, #17]
 8003a60:	7800      	ldrb	r0, [r0, #0]
 8003a62:	f7ff fc83 	bl	800336c <arduino_i2c_write>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	f040 80c8 	bne.w	8003bfc <mpu_reset_fifo+0x1bc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8003a6c:	4b71      	ldr	r3, [pc, #452]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003a6e:	6858      	ldr	r0, [r3, #4]
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	f10d 0307 	add.w	r3, sp, #7
 8003a76:	2201      	movs	r2, #1
 8003a78:	7949      	ldrb	r1, [r1, #5]
 8003a7a:	7800      	ldrb	r0, [r0, #0]
 8003a7c:	f7ff fc76 	bl	800336c <arduino_i2c_write>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	f040 80be 	bne.w	8003c02 <mpu_reset_fifo+0x1c2>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003a86:	4b6b      	ldr	r3, [pc, #428]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003a88:	6858      	ldr	r0, [r3, #4]
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	f10d 0307 	add.w	r3, sp, #7
 8003a90:	2201      	movs	r2, #1
 8003a92:	7909      	ldrb	r1, [r1, #4]
 8003a94:	7800      	ldrb	r0, [r0, #0]
 8003a96:	f7ff fc69 	bl	800336c <arduino_i2c_write>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	f040 80b4 	bne.w	8003c08 <mpu_reset_fifo+0x1c8>
    if (st.chip_cfg.dmp_on) {
 8003aa0:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003aa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d054      	beq.n	8003b54 <mpu_reset_fifo+0x114>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8003aaa:	ab02      	add	r3, sp, #8
 8003aac:	220c      	movs	r2, #12
 8003aae:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003ab2:	4a60      	ldr	r2, [pc, #384]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003ab4:	6850      	ldr	r0, [r2, #4]
 8003ab6:	6811      	ldr	r1, [r2, #0]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	7909      	ldrb	r1, [r1, #4]
 8003abc:	7800      	ldrb	r0, [r0, #0]
 8003abe:	f7ff fc55 	bl	800336c <arduino_i2c_write>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	f040 80a3 	bne.w	8003c0e <mpu_reset_fifo+0x1ce>
        delay_ms(50);
 8003ac8:	2032      	movs	r0, #50	; 0x32
 8003aca:	f7ff fc49 	bl	8003360 <arduino_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8003ace:	23c0      	movs	r3, #192	; 0xc0
 8003ad0:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8003ad4:	4b57      	ldr	r3, [pc, #348]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003ad6:	7a9b      	ldrb	r3, [r3, #10]
 8003ad8:	f013 0f01 	tst.w	r3, #1
 8003adc:	d002      	beq.n	8003ae4 <mpu_reset_fifo+0xa4>
            data |= BIT_AUX_IF_EN;
 8003ade:	23e0      	movs	r3, #224	; 0xe0
 8003ae0:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003ae4:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003ae6:	6858      	ldr	r0, [r3, #4]
 8003ae8:	6819      	ldr	r1, [r3, #0]
 8003aea:	f10d 0307 	add.w	r3, sp, #7
 8003aee:	2201      	movs	r2, #1
 8003af0:	7909      	ldrb	r1, [r1, #4]
 8003af2:	7800      	ldrb	r0, [r0, #0]
 8003af4:	f7ff fc3a 	bl	800336c <arduino_i2c_write>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	f040 808b 	bne.w	8003c14 <mpu_reset_fifo+0x1d4>
        if (st.chip_cfg.int_enable)
 8003afe:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003b00:	7c5b      	ldrb	r3, [r3, #17]
 8003b02:	b303      	cbz	r3, 8003b46 <mpu_reset_fifo+0x106>
            data = BIT_DMP_INT_EN;
 8003b04:	2302      	movs	r3, #2
 8003b06:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8003b0a:	4b4a      	ldr	r3, [pc, #296]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003b0c:	6858      	ldr	r0, [r3, #4]
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	f10d 0307 	add.w	r3, sp, #7
 8003b14:	2201      	movs	r2, #1
 8003b16:	7c49      	ldrb	r1, [r1, #17]
 8003b18:	7800      	ldrb	r0, [r0, #0]
 8003b1a:	f7ff fc27 	bl	800336c <arduino_i2c_write>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d17b      	bne.n	8003c1a <mpu_reset_fifo+0x1da>
        data = 0;
 8003b22:	ab02      	add	r3, sp, #8
 8003b24:	2200      	movs	r2, #0
 8003b26:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8003b2a:	4a42      	ldr	r2, [pc, #264]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003b2c:	6850      	ldr	r0, [r2, #4]
 8003b2e:	6811      	ldr	r1, [r2, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	7949      	ldrb	r1, [r1, #5]
 8003b34:	7800      	ldrb	r0, [r0, #0]
 8003b36:	f7ff fc19 	bl	800336c <arduino_i2c_write>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	b938      	cbnz	r0, 8003b4e <mpu_reset_fifo+0x10e>
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	b003      	add	sp, #12
 8003b42:	f85d fb04 	ldr.w	pc, [sp], #4
            data = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f88d 3007 	strb.w	r3, [sp, #7]
 8003b4c:	e7dd      	b.n	8003b0a <mpu_reset_fifo+0xca>
            return -1;
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b52:	e7f4      	b.n	8003b3e <mpu_reset_fifo+0xfe>
        data = BIT_FIFO_RST;
 8003b54:	ab02      	add	r3, sp, #8
 8003b56:	2204      	movs	r2, #4
 8003b58:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003b5c:	4a35      	ldr	r2, [pc, #212]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003b5e:	6850      	ldr	r0, [r2, #4]
 8003b60:	6811      	ldr	r1, [r2, #0]
 8003b62:	2201      	movs	r2, #1
 8003b64:	7909      	ldrb	r1, [r1, #4]
 8003b66:	7800      	ldrb	r0, [r0, #0]
 8003b68:	f7ff fc00 	bl	800336c <arduino_i2c_write>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d157      	bne.n	8003c20 <mpu_reset_fifo+0x1e0>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003b72:	7c9b      	ldrb	r3, [r3, #18]
 8003b74:	b923      	cbnz	r3, 8003b80 <mpu_reset_fifo+0x140>
 8003b76:	4b2f      	ldr	r3, [pc, #188]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003b78:	7a9b      	ldrb	r3, [r3, #10]
 8003b7a:	f013 0f01 	tst.w	r3, #1
 8003b7e:	d131      	bne.n	8003be4 <mpu_reset_fifo+0x1a4>
            data = BIT_FIFO_EN;
 8003b80:	2340      	movs	r3, #64	; 0x40
 8003b82:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003b86:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003b88:	6858      	ldr	r0, [r3, #4]
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	f10d 0307 	add.w	r3, sp, #7
 8003b90:	2201      	movs	r2, #1
 8003b92:	7909      	ldrb	r1, [r1, #4]
 8003b94:	7800      	ldrb	r0, [r0, #0]
 8003b96:	f7ff fbe9 	bl	800336c <arduino_i2c_write>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d143      	bne.n	8003c26 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
 8003b9e:	2032      	movs	r0, #50	; 0x32
 8003ba0:	f7ff fbde 	bl	8003360 <arduino_delay_ms>
        if (st.chip_cfg.int_enable)
 8003ba4:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003ba6:	7c5b      	ldrb	r3, [r3, #17]
 8003ba8:	b303      	cbz	r3, 8003bec <mpu_reset_fifo+0x1ac>
            data = BIT_DATA_RDY_EN;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8003bb0:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003bb2:	6858      	ldr	r0, [r3, #4]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	f10d 0307 	add.w	r3, sp, #7
 8003bba:	2201      	movs	r2, #1
 8003bbc:	7c49      	ldrb	r1, [r1, #17]
 8003bbe:	7800      	ldrb	r0, [r0, #0]
 8003bc0:	f7ff fbd4 	bl	800336c <arduino_i2c_write>
 8003bc4:	bb90      	cbnz	r0, 8003c2c <mpu_reset_fifo+0x1ec>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8003bc6:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <mpu_reset_fifo+0x1f4>)
 8003bc8:	6858      	ldr	r0, [r3, #4]
 8003bca:	f853 1b10 	ldr.w	r1, [r3], #16
 8003bce:	2201      	movs	r2, #1
 8003bd0:	7949      	ldrb	r1, [r1, #5]
 8003bd2:	7800      	ldrb	r0, [r0, #0]
 8003bd4:	f7ff fbca 	bl	800336c <arduino_i2c_write>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d0af      	beq.n	8003b3e <mpu_reset_fifo+0xfe>
            return -1;
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003be2:	e7ac      	b.n	8003b3e <mpu_reset_fifo+0xfe>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8003be4:	2360      	movs	r3, #96	; 0x60
 8003be6:	f88d 3007 	strb.w	r3, [sp, #7]
 8003bea:	e7cc      	b.n	8003b86 <mpu_reset_fifo+0x146>
            data = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f88d 3007 	strb.w	r3, [sp, #7]
 8003bf2:	e7dd      	b.n	8003bb0 <mpu_reset_fifo+0x170>
        return -1;
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	4770      	bx	lr
        return -1;
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c00:	e79d      	b.n	8003b3e <mpu_reset_fifo+0xfe>
        return -1;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c06:	e79a      	b.n	8003b3e <mpu_reset_fifo+0xfe>
        return -1;
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c0c:	e797      	b.n	8003b3e <mpu_reset_fifo+0xfe>
            return -1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c12:	e794      	b.n	8003b3e <mpu_reset_fifo+0xfe>
            return -1;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c18:	e791      	b.n	8003b3e <mpu_reset_fifo+0xfe>
            return -1;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c1e:	e78e      	b.n	8003b3e <mpu_reset_fifo+0xfe>
            return -1;
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c24:	e78b      	b.n	8003b3e <mpu_reset_fifo+0xfe>
            return -1;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c2a:	e788      	b.n	8003b3e <mpu_reset_fifo+0xfe>
            return -1;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c30:	e785      	b.n	8003b3e <mpu_reset_fifo+0xfe>
 8003c32:	bf00      	nop
 8003c34:	20000028 	.word	0x20000028

08003c38 <mpu_get_gyro_fsr>:
    switch (st.chip_cfg.gyro_fsr) {
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <mpu_get_gyro_fsr+0x38>)
 8003c3a:	7a1b      	ldrb	r3, [r3, #8]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d813      	bhi.n	8003c68 <mpu_get_gyro_fsr+0x30>
 8003c40:	e8df f003 	tbb	[pc, r3]
 8003c44:	0e0a0602 	.word	0x0e0a0602
        fsr[0] = 250;
 8003c48:	23fa      	movs	r3, #250	; 0xfa
 8003c4a:	8003      	strh	r3, [r0, #0]
}
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	4770      	bx	lr
        fsr[0] = 500;
 8003c50:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c54:	8003      	strh	r3, [r0, #0]
        break;
 8003c56:	e7f9      	b.n	8003c4c <mpu_get_gyro_fsr+0x14>
        fsr[0] = 1000;
 8003c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c5c:	8003      	strh	r3, [r0, #0]
        break;
 8003c5e:	e7f5      	b.n	8003c4c <mpu_get_gyro_fsr+0x14>
        fsr[0] = 2000;
 8003c60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c64:	8003      	strh	r3, [r0, #0]
        break;
 8003c66:	e7f1      	b.n	8003c4c <mpu_get_gyro_fsr+0x14>
        fsr[0] = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	8003      	strh	r3, [r0, #0]
        break;
 8003c6c:	e7ee      	b.n	8003c4c <mpu_get_gyro_fsr+0x14>
 8003c6e:	bf00      	nop
 8003c70:	20000028 	.word	0x20000028

08003c74 <mpu_set_gyro_fsr>:
    if (!(st.chip_cfg.sensors))
 8003c74:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <mpu_set_gyro_fsr+0x94>)
 8003c76:	7a9b      	ldrb	r3, [r3, #10]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d038      	beq.n	8003cee <mpu_set_gyro_fsr+0x7a>
{
 8003c7c:	b500      	push	{lr}
 8003c7e:	b083      	sub	sp, #12
    switch (fsr) {
 8003c80:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003c84:	d02b      	beq.n	8003cde <mpu_set_gyro_fsr+0x6a>
 8003c86:	d909      	bls.n	8003c9c <mpu_set_gyro_fsr+0x28>
 8003c88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c8c:	d02b      	beq.n	8003ce6 <mpu_set_gyro_fsr+0x72>
 8003c8e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8003c92:	d130      	bne.n	8003cf6 <mpu_set_gyro_fsr+0x82>
        data = INV_FSR_2000DPS << 3;
 8003c94:	2318      	movs	r3, #24
 8003c96:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003c9a:	e004      	b.n	8003ca6 <mpu_set_gyro_fsr+0x32>
    switch (fsr) {
 8003c9c:	28fa      	cmp	r0, #250	; 0xfa
 8003c9e:	d12a      	bne.n	8003cf6 <mpu_set_gyro_fsr+0x82>
        data = INV_FSR_250DPS << 3;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8003ca6:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <mpu_set_gyro_fsr+0x94>)
 8003ca8:	7a1b      	ldrb	r3, [r3, #8]
 8003caa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003cae:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8003cb2:	d023      	beq.n	8003cfc <mpu_set_gyro_fsr+0x88>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8003cb4:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <mpu_set_gyro_fsr+0x94>)
 8003cb6:	6858      	ldr	r0, [r3, #4]
 8003cb8:	6819      	ldr	r1, [r3, #0]
 8003cba:	f10d 0307 	add.w	r3, sp, #7
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	7989      	ldrb	r1, [r1, #6]
 8003cc2:	7800      	ldrb	r0, [r0, #0]
 8003cc4:	f7ff fb52 	bl	800336c <arduino_i2c_write>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	b9c8      	cbnz	r0, 8003d00 <mpu_set_gyro_fsr+0x8c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8003ccc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003cd0:	08d2      	lsrs	r2, r2, #3
 8003cd2:	490d      	ldr	r1, [pc, #52]	; (8003d08 <mpu_set_gyro_fsr+0x94>)
 8003cd4:	720a      	strb	r2, [r1, #8]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	b003      	add	sp, #12
 8003cda:	f85d fb04 	ldr.w	pc, [sp], #4
        data = INV_FSR_500DPS << 3;
 8003cde:	2308      	movs	r3, #8
 8003ce0:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003ce4:	e7df      	b.n	8003ca6 <mpu_set_gyro_fsr+0x32>
        data = INV_FSR_1000DPS << 3;
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003cec:	e7db      	b.n	8003ca6 <mpu_set_gyro_fsr+0x32>
        return -1;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	4770      	bx	lr
        return -1;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cfa:	e7ec      	b.n	8003cd6 <mpu_set_gyro_fsr+0x62>
        return 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e7ea      	b.n	8003cd6 <mpu_set_gyro_fsr+0x62>
        return -1;
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d04:	e7e7      	b.n	8003cd6 <mpu_set_gyro_fsr+0x62>
 8003d06:	bf00      	nop
 8003d08:	20000028 	.word	0x20000028

08003d0c <mpu_get_accel_fsr>:
    switch (st.chip_cfg.accel_fsr) {
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <mpu_get_accel_fsr+0x40>)
 8003d0e:	7a5b      	ldrb	r3, [r3, #9]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d816      	bhi.n	8003d42 <mpu_get_accel_fsr+0x36>
 8003d14:	e8df f003 	tbb	[pc, r3]
 8003d18:	120f0c02 	.word	0x120f0c02
        fsr[0] = 2;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	7003      	strb	r3, [r0, #0]
    if (st.chip_cfg.accel_half)
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <mpu_get_accel_fsr+0x40>)
 8003d22:	7cdb      	ldrb	r3, [r3, #19]
 8003d24:	b183      	cbz	r3, 8003d48 <mpu_get_accel_fsr+0x3c>
        fsr[0] <<= 1;
 8003d26:	7803      	ldrb	r3, [r0, #0]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	7003      	strb	r3, [r0, #0]
    return 0;
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	4770      	bx	lr
        fsr[0] = 4;
 8003d30:	2304      	movs	r3, #4
 8003d32:	7003      	strb	r3, [r0, #0]
        break;
 8003d34:	e7f4      	b.n	8003d20 <mpu_get_accel_fsr+0x14>
        fsr[0] = 8;
 8003d36:	2308      	movs	r3, #8
 8003d38:	7003      	strb	r3, [r0, #0]
        break;
 8003d3a:	e7f1      	b.n	8003d20 <mpu_get_accel_fsr+0x14>
        fsr[0] = 16;
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	7003      	strb	r3, [r0, #0]
        break;
 8003d40:	e7ee      	b.n	8003d20 <mpu_get_accel_fsr+0x14>
        return -1;
 8003d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d46:	4770      	bx	lr
    return 0;
 8003d48:	2000      	movs	r0, #0
}
 8003d4a:	4770      	bx	lr
 8003d4c:	20000028 	.word	0x20000028

08003d50 <mpu_set_accel_fsr>:
    if (!(st.chip_cfg.sensors))
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <mpu_set_accel_fsr+0x94>)
 8003d52:	7a9b      	ldrb	r3, [r3, #10]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d039      	beq.n	8003dcc <mpu_set_accel_fsr+0x7c>
{
 8003d58:	b500      	push	{lr}
 8003d5a:	b083      	sub	sp, #12
    switch (fsr) {
 8003d5c:	3802      	subs	r0, #2
 8003d5e:	280e      	cmp	r0, #14
 8003d60:	d838      	bhi.n	8003dd4 <mpu_set_accel_fsr+0x84>
 8003d62:	e8df f000 	tbb	[pc, r0]
 8003d66:	3708      	.short	0x3708
 8003d68:	37373727 	.word	0x37373727
 8003d6c:	3737372b 	.word	0x3737372b
 8003d70:	37373737 	.word	0x37373737
 8003d74:	2f          	.byte	0x2f
 8003d75:	00          	.byte	0x00
        data = INV_FSR_2G << 3;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.accel_fsr == (data >> 3))
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <mpu_set_accel_fsr+0x94>)
 8003d7e:	7a5b      	ldrb	r3, [r3, #9]
 8003d80:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003d84:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8003d88:	d027      	beq.n	8003dda <mpu_set_accel_fsr+0x8a>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <mpu_set_accel_fsr+0x94>)
 8003d8c:	6858      	ldr	r0, [r3, #4]
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	f10d 0307 	add.w	r3, sp, #7
 8003d94:	2201      	movs	r2, #1
 8003d96:	79c9      	ldrb	r1, [r1, #7]
 8003d98:	7800      	ldrb	r0, [r0, #0]
 8003d9a:	f7ff fae7 	bl	800336c <arduino_i2c_write>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	b9e8      	cbnz	r0, 8003dde <mpu_set_accel_fsr+0x8e>
    st.chip_cfg.accel_fsr = data >> 3;
 8003da2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003da6:	08d2      	lsrs	r2, r2, #3
 8003da8:	490e      	ldr	r1, [pc, #56]	; (8003de4 <mpu_set_accel_fsr+0x94>)
 8003daa:	724a      	strb	r2, [r1, #9]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	b003      	add	sp, #12
 8003db0:	f85d fb04 	ldr.w	pc, [sp], #4
        data = INV_FSR_4G << 3;
 8003db4:	2308      	movs	r3, #8
 8003db6:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003dba:	e7df      	b.n	8003d7c <mpu_set_accel_fsr+0x2c>
        data = INV_FSR_8G << 3;
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003dc2:	e7db      	b.n	8003d7c <mpu_set_accel_fsr+0x2c>
        data = INV_FSR_16G << 3;
 8003dc4:	2318      	movs	r3, #24
 8003dc6:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003dca:	e7d7      	b.n	8003d7c <mpu_set_accel_fsr+0x2c>
        return -1;
 8003dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	4770      	bx	lr
        return -1;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dd8:	e7e8      	b.n	8003dac <mpu_set_accel_fsr+0x5c>
        return 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e7e6      	b.n	8003dac <mpu_set_accel_fsr+0x5c>
        return -1;
 8003dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003de2:	e7e3      	b.n	8003dac <mpu_set_accel_fsr+0x5c>
 8003de4:	20000028 	.word	0x20000028

08003de8 <mpu_get_lpf>:
    switch (st.chip_cfg.lpf) {
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <mpu_get_lpf+0x40>)
 8003dea:	7adb      	ldrb	r3, [r3, #11]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d817      	bhi.n	8003e22 <mpu_get_lpf+0x3a>
 8003df2:	e8df f003 	tbb	[pc, r3]
 8003df6:	0703      	.short	0x0703
 8003df8:	13100d0a 	.word	0x13100d0a
        lpf[0] = 188;
 8003dfc:	23bc      	movs	r3, #188	; 0xbc
 8003dfe:	8003      	strh	r3, [r0, #0]
}
 8003e00:	2000      	movs	r0, #0
 8003e02:	4770      	bx	lr
        lpf[0] = 98;
 8003e04:	2362      	movs	r3, #98	; 0x62
 8003e06:	8003      	strh	r3, [r0, #0]
        break;
 8003e08:	e7fa      	b.n	8003e00 <mpu_get_lpf+0x18>
        lpf[0] = 42;
 8003e0a:	232a      	movs	r3, #42	; 0x2a
 8003e0c:	8003      	strh	r3, [r0, #0]
        break;
 8003e0e:	e7f7      	b.n	8003e00 <mpu_get_lpf+0x18>
        lpf[0] = 20;
 8003e10:	2314      	movs	r3, #20
 8003e12:	8003      	strh	r3, [r0, #0]
        break;
 8003e14:	e7f4      	b.n	8003e00 <mpu_get_lpf+0x18>
        lpf[0] = 10;
 8003e16:	230a      	movs	r3, #10
 8003e18:	8003      	strh	r3, [r0, #0]
        break;
 8003e1a:	e7f1      	b.n	8003e00 <mpu_get_lpf+0x18>
        lpf[0] = 5;
 8003e1c:	2305      	movs	r3, #5
 8003e1e:	8003      	strh	r3, [r0, #0]
        break;
 8003e20:	e7ee      	b.n	8003e00 <mpu_get_lpf+0x18>
        lpf[0] = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	8003      	strh	r3, [r0, #0]
        break;
 8003e26:	e7eb      	b.n	8003e00 <mpu_get_lpf+0x18>
 8003e28:	20000028 	.word	0x20000028

08003e2c <mpu_set_lpf>:
    if (!(st.chip_cfg.sensors))
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <mpu_set_lpf+0x94>)
 8003e2e:	7a9b      	ldrb	r3, [r3, #10]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d03c      	beq.n	8003eae <mpu_set_lpf+0x82>
{
 8003e34:	b500      	push	{lr}
 8003e36:	b083      	sub	sp, #12
    if (lpf >= 188)
 8003e38:	28bb      	cmp	r0, #187	; 0xbb
 8003e3a:	d91c      	bls.n	8003e76 <mpu_set_lpf+0x4a>
        data = INV_FILTER_188HZ;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <mpu_set_lpf+0x94>)
 8003e44:	7ada      	ldrb	r2, [r3, #11]
 8003e46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d033      	beq.n	8003eb6 <mpu_set_lpf+0x8a>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <mpu_set_lpf+0x94>)
 8003e50:	6858      	ldr	r0, [r3, #4]
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	f10d 0307 	add.w	r3, sp, #7
 8003e58:	2201      	movs	r2, #1
 8003e5a:	7889      	ldrb	r1, [r1, #2]
 8003e5c:	7800      	ldrb	r0, [r0, #0]
 8003e5e:	f7ff fa85 	bl	800336c <arduino_i2c_write>
 8003e62:	4603      	mov	r3, r0
 8003e64:	bb48      	cbnz	r0, 8003eba <mpu_set_lpf+0x8e>
    st.chip_cfg.lpf = data;
 8003e66:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003e6a:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <mpu_set_lpf+0x94>)
 8003e6c:	72d1      	strb	r1, [r2, #11]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	b003      	add	sp, #12
 8003e72:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (lpf >= 98)
 8003e76:	2861      	cmp	r0, #97	; 0x61
 8003e78:	d903      	bls.n	8003e82 <mpu_set_lpf+0x56>
        data = INV_FILTER_98HZ;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8003e80:	e7df      	b.n	8003e42 <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8003e82:	2829      	cmp	r0, #41	; 0x29
 8003e84:	d903      	bls.n	8003e8e <mpu_set_lpf+0x62>
        data = INV_FILTER_42HZ;
 8003e86:	2303      	movs	r3, #3
 8003e88:	f88d 3007 	strb.w	r3, [sp, #7]
 8003e8c:	e7d9      	b.n	8003e42 <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 8003e8e:	2813      	cmp	r0, #19
 8003e90:	d903      	bls.n	8003e9a <mpu_set_lpf+0x6e>
        data = INV_FILTER_20HZ;
 8003e92:	2304      	movs	r3, #4
 8003e94:	f88d 3007 	strb.w	r3, [sp, #7]
 8003e98:	e7d3      	b.n	8003e42 <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8003e9a:	2809      	cmp	r0, #9
 8003e9c:	d903      	bls.n	8003ea6 <mpu_set_lpf+0x7a>
        data = INV_FILTER_10HZ;
 8003e9e:	2305      	movs	r3, #5
 8003ea0:	f88d 3007 	strb.w	r3, [sp, #7]
 8003ea4:	e7cd      	b.n	8003e42 <mpu_set_lpf+0x16>
        data = INV_FILTER_5HZ;
 8003ea6:	2306      	movs	r3, #6
 8003ea8:	f88d 3007 	strb.w	r3, [sp, #7]
 8003eac:	e7c9      	b.n	8003e42 <mpu_set_lpf+0x16>
        return -1;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	4770      	bx	lr
        return 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e7d9      	b.n	8003e6e <mpu_set_lpf+0x42>
        return -1;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ebe:	e7d6      	b.n	8003e6e <mpu_set_lpf+0x42>
 8003ec0:	20000028 	.word	0x20000028

08003ec4 <mpu_get_sample_rate>:
    if (st.chip_cfg.dmp_on)
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <mpu_get_sample_rate+0x18>)
 8003ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eca:	b923      	cbnz	r3, 8003ed6 <mpu_get_sample_rate+0x12>
        rate[0] = st.chip_cfg.sample_rate;
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <mpu_get_sample_rate+0x18>)
 8003ece:	89db      	ldrh	r3, [r3, #14]
 8003ed0:	8003      	strh	r3, [r0, #0]
    return 0;
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	4770      	bx	lr
        return -1;
 8003ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003eda:	4770      	bx	lr
 8003edc:	20000028 	.word	0x20000028

08003ee0 <mpu_set_compass_sample_rate>:
{
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	b082      	sub	sp, #8
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8003ee4:	b308      	cbz	r0, 8003f2a <mpu_set_compass_sample_rate+0x4a>
 8003ee6:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <mpu_set_compass_sample_rate+0x64>)
 8003ee8:	89db      	ldrh	r3, [r3, #14]
 8003eea:	4283      	cmp	r3, r0
 8003eec:	d320      	bcc.n	8003f30 <mpu_set_compass_sample_rate+0x50>
 8003eee:	2864      	cmp	r0, #100	; 0x64
 8003ef0:	d821      	bhi.n	8003f36 <mpu_set_compass_sample_rate+0x56>
    div = st.chip_cfg.sample_rate / rate - 1;
 8003ef2:	fbb3 f3f0 	udiv	r3, r3, r0
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	ab02      	add	r3, sp, #8
 8003efa:	f803 2d01 	strb.w	r2, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8003efe:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <mpu_set_compass_sample_rate+0x64>)
 8003f00:	6850      	ldr	r0, [r2, #4]
 8003f02:	6811      	ldr	r1, [r2, #0]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8003f0a:	7800      	ldrb	r0, [r0, #0]
 8003f0c:	f7ff fa2e 	bl	800336c <arduino_i2c_write>
 8003f10:	4604      	mov	r4, r0
 8003f12:	b998      	cbnz	r0, 8003f3c <mpu_set_compass_sample_rate+0x5c>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8003f14:	490b      	ldr	r1, [pc, #44]	; (8003f44 <mpu_set_compass_sample_rate+0x64>)
 8003f16:	89cb      	ldrh	r3, [r1, #14]
 8003f18:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003f1c:	3201      	adds	r2, #1
 8003f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f22:	850b      	strh	r3, [r1, #40]	; 0x28
}
 8003f24:	4620      	mov	r0, r4
 8003f26:	b002      	add	sp, #8
 8003f28:	bd10      	pop	{r4, pc}
        return -1;
 8003f2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f2e:	e7f9      	b.n	8003f24 <mpu_set_compass_sample_rate+0x44>
 8003f30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f34:	e7f6      	b.n	8003f24 <mpu_set_compass_sample_rate+0x44>
 8003f36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f3a:	e7f3      	b.n	8003f24 <mpu_set_compass_sample_rate+0x44>
        return -1;
 8003f3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f40:	e7f0      	b.n	8003f24 <mpu_set_compass_sample_rate+0x44>
 8003f42:	bf00      	nop
 8003f44:	20000028 	.word	0x20000028

08003f48 <mpu_get_gyro_sens>:
    switch (st.chip_cfg.gyro_fsr) {
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <mpu_get_gyro_sens+0x38>)
 8003f4a:	7a1b      	ldrb	r3, [r3, #8]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d813      	bhi.n	8003f78 <mpu_get_gyro_sens+0x30>
 8003f50:	e8df f003 	tbb	[pc, r3]
 8003f54:	0e0a0602 	.word	0x0e0a0602
        sens[0] = 131.f;
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <mpu_get_gyro_sens+0x3c>)
 8003f5a:	6003      	str	r3, [r0, #0]
    return 0;
 8003f5c:	2000      	movs	r0, #0
        break;
 8003f5e:	4770      	bx	lr
        sens[0] = 65.5f;
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <mpu_get_gyro_sens+0x40>)
 8003f62:	6003      	str	r3, [r0, #0]
    return 0;
 8003f64:	2000      	movs	r0, #0
        break;
 8003f66:	4770      	bx	lr
        sens[0] = 32.8f;
 8003f68:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <mpu_get_gyro_sens+0x44>)
 8003f6a:	6003      	str	r3, [r0, #0]
    return 0;
 8003f6c:	2000      	movs	r0, #0
        break;
 8003f6e:	4770      	bx	lr
        sens[0] = 16.4f;
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <mpu_get_gyro_sens+0x48>)
 8003f72:	6003      	str	r3, [r0, #0]
    return 0;
 8003f74:	2000      	movs	r0, #0
        break;
 8003f76:	4770      	bx	lr
        return -1;
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000028 	.word	0x20000028
 8003f84:	43030000 	.word	0x43030000
 8003f88:	42830000 	.word	0x42830000
 8003f8c:	42033333 	.word	0x42033333
 8003f90:	41833333 	.word	0x41833333

08003f94 <mpu_get_accel_sens>:
    switch (st.chip_cfg.accel_fsr) {
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <mpu_get_accel_sens+0x48>)
 8003f96:	7a5b      	ldrb	r3, [r3, #9]
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d81a      	bhi.n	8003fd2 <mpu_get_accel_sens+0x3e>
 8003f9c:	e8df f003 	tbb	[pc, r3]
 8003fa0:	15110d02 	.word	0x15110d02
        sens[0] = 16384;
 8003fa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fa8:	8003      	strh	r3, [r0, #0]
    if (st.chip_cfg.accel_half)
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <mpu_get_accel_sens+0x48>)
 8003fac:	7cdb      	ldrb	r3, [r3, #19]
 8003fae:	b19b      	cbz	r3, 8003fd8 <mpu_get_accel_sens+0x44>
        sens[0] >>= 1;
 8003fb0:	8803      	ldrh	r3, [r0, #0]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	8003      	strh	r3, [r0, #0]
    return 0;
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	4770      	bx	lr
        sens[0] = 8192;
 8003fba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fbe:	8003      	strh	r3, [r0, #0]
        break;
 8003fc0:	e7f3      	b.n	8003faa <mpu_get_accel_sens+0x16>
        sens[0] = 4096;
 8003fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fc6:	8003      	strh	r3, [r0, #0]
        break;
 8003fc8:	e7ef      	b.n	8003faa <mpu_get_accel_sens+0x16>
        sens[0] = 2048;
 8003fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fce:	8003      	strh	r3, [r0, #0]
        break;
 8003fd0:	e7eb      	b.n	8003faa <mpu_get_accel_sens+0x16>
        return -1;
 8003fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd6:	4770      	bx	lr
    return 0;
 8003fd8:	2000      	movs	r0, #0
}
 8003fda:	4770      	bx	lr
 8003fdc:	20000028 	.word	0x20000028

08003fe0 <mpu_get_fifo_config>:
    sensors[0] = st.chip_cfg.fifo_enable;
 8003fe0:	4b02      	ldr	r3, [pc, #8]	; (8003fec <mpu_get_fifo_config+0xc>)
 8003fe2:	7c1b      	ldrb	r3, [r3, #16]
 8003fe4:	7003      	strb	r3, [r0, #0]
}
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000028 	.word	0x20000028

08003ff0 <mpu_configure_fifo>:
{
 8003ff0:	b570      	push	{r4, r5, r6, lr}
    if (st.chip_cfg.dmp_on)
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <mpu_configure_fifo+0x5c>)
 8003ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff8:	bb13      	cbnz	r3, 8004040 <mpu_configure_fifo+0x50>
 8003ffa:	f000 04fe 	and.w	r4, r0, #254	; 0xfe
        if (!(st.chip_cfg.sensors))
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <mpu_configure_fifo+0x5c>)
 8004000:	7a9b      	ldrb	r3, [r3, #10]
 8004002:	b303      	cbz	r3, 8004046 <mpu_configure_fifo+0x56>
        prev = st.chip_cfg.fifo_enable;
 8004004:	4a11      	ldr	r2, [pc, #68]	; (800404c <mpu_configure_fifo+0x5c>)
 8004006:	7c16      	ldrb	r6, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8004008:	4023      	ands	r3, r4
 800400a:	7413      	strb	r3, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800400c:	42a3      	cmp	r3, r4
 800400e:	d011      	beq.n	8004034 <mpu_configure_fifo+0x44>
            result = -1;
 8004010:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        if (sensors || st.chip_cfg.lp_accel_mode)
 8004014:	b914      	cbnz	r4, 800401c <mpu_configure_fifo+0x2c>
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <mpu_configure_fifo+0x5c>)
 8004018:	7d1b      	ldrb	r3, [r3, #20]
 800401a:	b16b      	cbz	r3, 8004038 <mpu_configure_fifo+0x48>
            set_int_enable(1);
 800401c:	2001      	movs	r0, #1
 800401e:	f7ff fc07 	bl	8003830 <set_int_enable>
        if (sensors) {
 8004022:	b174      	cbz	r4, 8004042 <mpu_configure_fifo+0x52>
            if (mpu_reset_fifo()) {
 8004024:	f7ff fd0c 	bl	8003a40 <mpu_reset_fifo>
 8004028:	b158      	cbz	r0, 8004042 <mpu_configure_fifo+0x52>
                st.chip_cfg.fifo_enable = prev;
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <mpu_configure_fifo+0x5c>)
 800402c:	741e      	strb	r6, [r3, #16]
                return -1;
 800402e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004032:	e006      	b.n	8004042 <mpu_configure_fifo+0x52>
            result = 0;
 8004034:	2500      	movs	r5, #0
 8004036:	e7ed      	b.n	8004014 <mpu_configure_fifo+0x24>
            set_int_enable(0);
 8004038:	2000      	movs	r0, #0
 800403a:	f7ff fbf9 	bl	8003830 <set_int_enable>
 800403e:	e7f0      	b.n	8004022 <mpu_configure_fifo+0x32>
        return 0;
 8004040:	2500      	movs	r5, #0
}
 8004042:	4628      	mov	r0, r5
 8004044:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
 8004046:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800404a:	e7fa      	b.n	8004042 <mpu_configure_fifo+0x52>
 800404c:	20000028 	.word	0x20000028

08004050 <mpu_set_bypass>:
    if (st.chip_cfg.bypass_mode == bypass_on)
 8004050:	4b58      	ldr	r3, [pc, #352]	; (80041b4 <mpu_set_bypass+0x164>)
 8004052:	7c9b      	ldrb	r3, [r3, #18]
 8004054:	4283      	cmp	r3, r0
 8004056:	f000 809b 	beq.w	8004190 <mpu_set_bypass+0x140>
{
 800405a:	b510      	push	{r4, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	4604      	mov	r4, r0
    if (bypass_on) {
 8004060:	2800      	cmp	r0, #0
 8004062:	d043      	beq.n	80040ec <mpu_set_bypass+0x9c>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8004064:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <mpu_set_bypass+0x164>)
 8004066:	6858      	ldr	r0, [r3, #4]
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	f10d 0307 	add.w	r3, sp, #7
 800406e:	2201      	movs	r2, #1
 8004070:	7909      	ldrb	r1, [r1, #4]
 8004072:	7800      	ldrb	r0, [r0, #0]
 8004074:	f7ff f998 	bl	80033a8 <arduino_i2c_read>
 8004078:	2800      	cmp	r0, #0
 800407a:	f040 808b 	bne.w	8004194 <mpu_set_bypass+0x144>
        tmp &= ~BIT_AUX_IF_EN;
 800407e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004082:	f022 0220 	bic.w	r2, r2, #32
 8004086:	ab02      	add	r3, sp, #8
 8004088:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800408c:	4a49      	ldr	r2, [pc, #292]	; (80041b4 <mpu_set_bypass+0x164>)
 800408e:	6850      	ldr	r0, [r2, #4]
 8004090:	6811      	ldr	r1, [r2, #0]
 8004092:	2201      	movs	r2, #1
 8004094:	7909      	ldrb	r1, [r1, #4]
 8004096:	7800      	ldrb	r0, [r0, #0]
 8004098:	f7ff f968 	bl	800336c <arduino_i2c_write>
 800409c:	2800      	cmp	r0, #0
 800409e:	d17c      	bne.n	800419a <mpu_set_bypass+0x14a>
        delay_ms(3);
 80040a0:	2003      	movs	r0, #3
 80040a2:	f7ff f95d 	bl	8003360 <arduino_delay_ms>
        tmp = BIT_BYPASS_EN;
 80040a6:	2302      	movs	r3, #2
 80040a8:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 80040ac:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <mpu_set_bypass+0x164>)
 80040ae:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80040b2:	b113      	cbz	r3, 80040ba <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
 80040b4:	2382      	movs	r3, #130	; 0x82
 80040b6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 80040ba:	4b3e      	ldr	r3, [pc, #248]	; (80041b4 <mpu_set_bypass+0x164>)
 80040bc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80040c0:	b12b      	cbz	r3, 80040ce <mpu_set_bypass+0x7e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80040c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040c6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80040ca:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80040ce:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <mpu_set_bypass+0x164>)
 80040d0:	6858      	ldr	r0, [r3, #4]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	f10d 0307 	add.w	r3, sp, #7
 80040d8:	2201      	movs	r2, #1
 80040da:	7dc9      	ldrb	r1, [r1, #23]
 80040dc:	7800      	ldrb	r0, [r0, #0]
 80040de:	f7ff f945 	bl	800336c <arduino_i2c_write>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d044      	beq.n	8004170 <mpu_set_bypass+0x120>
            return -1;
 80040e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ea:	e044      	b.n	8004176 <mpu_set_bypass+0x126>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80040ec:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <mpu_set_bypass+0x164>)
 80040ee:	6858      	ldr	r0, [r3, #4]
 80040f0:	6819      	ldr	r1, [r3, #0]
 80040f2:	f10d 0307 	add.w	r3, sp, #7
 80040f6:	2201      	movs	r2, #1
 80040f8:	7909      	ldrb	r1, [r1, #4]
 80040fa:	7800      	ldrb	r0, [r0, #0]
 80040fc:	f7ff f954 	bl	80033a8 <arduino_i2c_read>
 8004100:	2800      	cmp	r0, #0
 8004102:	d14d      	bne.n	80041a0 <mpu_set_bypass+0x150>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8004104:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <mpu_set_bypass+0x164>)
 8004106:	7a9b      	ldrb	r3, [r3, #10]
 8004108:	f013 0f01 	tst.w	r3, #1
 800410c:	d035      	beq.n	800417a <mpu_set_bypass+0x12a>
            tmp |= BIT_AUX_IF_EN;
 800410e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004112:	f043 0320 	orr.w	r3, r3, #32
 8004116:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800411a:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <mpu_set_bypass+0x164>)
 800411c:	6858      	ldr	r0, [r3, #4]
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	f10d 0307 	add.w	r3, sp, #7
 8004124:	2201      	movs	r2, #1
 8004126:	7909      	ldrb	r1, [r1, #4]
 8004128:	7800      	ldrb	r0, [r0, #0]
 800412a:	f7ff f91f 	bl	800336c <arduino_i2c_write>
 800412e:	2800      	cmp	r0, #0
 8004130:	d139      	bne.n	80041a6 <mpu_set_bypass+0x156>
        delay_ms(3);
 8004132:	2003      	movs	r0, #3
 8004134:	f7ff f914 	bl	8003360 <arduino_delay_ms>
        if (st.chip_cfg.active_low_int)
 8004138:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <mpu_set_bypass+0x164>)
 800413a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800413e:	b31b      	cbz	r3, 8004188 <mpu_set_bypass+0x138>
            tmp = BIT_ACTL;
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8004146:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <mpu_set_bypass+0x164>)
 8004148:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800414c:	b12b      	cbz	r3, 800415a <mpu_set_bypass+0x10a>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800414e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004152:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004156:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800415a:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <mpu_set_bypass+0x164>)
 800415c:	6858      	ldr	r0, [r3, #4]
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	f10d 0307 	add.w	r3, sp, #7
 8004164:	2201      	movs	r2, #1
 8004166:	7dc9      	ldrb	r1, [r1, #23]
 8004168:	7800      	ldrb	r0, [r0, #0]
 800416a:	f7ff f8ff 	bl	800336c <arduino_i2c_write>
 800416e:	b9e8      	cbnz	r0, 80041ac <mpu_set_bypass+0x15c>
    st.chip_cfg.bypass_mode = bypass_on;
 8004170:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <mpu_set_bypass+0x164>)
 8004172:	749c      	strb	r4, [r3, #18]
    return 0;
 8004174:	2000      	movs	r0, #0
}
 8004176:	b002      	add	sp, #8
 8004178:	bd10      	pop	{r4, pc}
            tmp &= ~BIT_AUX_IF_EN;
 800417a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	f88d 3007 	strb.w	r3, [sp, #7]
 8004186:	e7c8      	b.n	800411a <mpu_set_bypass+0xca>
            tmp = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	f88d 3007 	strb.w	r3, [sp, #7]
 800418e:	e7da      	b.n	8004146 <mpu_set_bypass+0xf6>
        return 0;
 8004190:	2000      	movs	r0, #0
}
 8004192:	4770      	bx	lr
            return -1;
 8004194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004198:	e7ed      	b.n	8004176 <mpu_set_bypass+0x126>
            return -1;
 800419a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800419e:	e7ea      	b.n	8004176 <mpu_set_bypass+0x126>
            return -1;
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a4:	e7e7      	b.n	8004176 <mpu_set_bypass+0x126>
            return -1;
 80041a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041aa:	e7e4      	b.n	8004176 <mpu_set_bypass+0x126>
            return -1;
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041b0:	e7e1      	b.n	8004176 <mpu_set_bypass+0x126>
 80041b2:	bf00      	nop
 80041b4:	20000028 	.word	0x20000028

080041b8 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 80041b8:	b510      	push	{r4, lr}
 80041ba:	b082      	sub	sp, #8
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 80041bc:	2001      	movs	r0, #1
 80041be:	f7ff ff47 	bl	8004050 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80041c2:	240c      	movs	r4, #12
 80041c4:	e001      	b.n	80041ca <setup_compass+0x12>
 80041c6:	3401      	adds	r4, #1
 80041c8:	b2e4      	uxtb	r4, r4
 80041ca:	2c0f      	cmp	r4, #15
 80041cc:	d80b      	bhi.n	80041e6 <setup_compass+0x2e>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 80041ce:	ab01      	add	r3, sp, #4
 80041d0:	2201      	movs	r2, #1
 80041d2:	2100      	movs	r1, #0
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7ff f8e7 	bl	80033a8 <arduino_i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
 80041da:	2800      	cmp	r0, #0
 80041dc:	d1f3      	bne.n	80041c6 <setup_compass+0xe>
 80041de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041e2:	2b48      	cmp	r3, #72	; 0x48
 80041e4:	d1ef      	bne.n	80041c6 <setup_compass+0xe>
            break;
    }

    if (akm_addr > 0x0F) {
 80041e6:	2c0f      	cmp	r4, #15
 80041e8:	f200 80db 	bhi.w	80043a2 <setup_compass+0x1ea>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
 80041ec:	4b83      	ldr	r3, [pc, #524]	; (80043fc <setup_compass+0x244>)
 80041ee:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 80041f2:	ab02      	add	r3, sp, #8
 80041f4:	2210      	movs	r2, #16
 80041f6:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80041fa:	2201      	movs	r2, #1
 80041fc:	210a      	movs	r1, #10
 80041fe:	4620      	mov	r0, r4
 8004200:	f7ff f8b4 	bl	800336c <arduino_i2c_write>
 8004204:	2800      	cmp	r0, #0
 8004206:	f040 80d5 	bne.w	80043b4 <setup_compass+0x1fc>
        return -1;
    delay_ms(1);
 800420a:	2001      	movs	r0, #1
 800420c:	f7ff f8a8 	bl	8003360 <arduino_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8004210:	ab02      	add	r3, sp, #8
 8004212:	221f      	movs	r2, #31
 8004214:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8004218:	2201      	movs	r2, #1
 800421a:	210a      	movs	r1, #10
 800421c:	4877      	ldr	r0, [pc, #476]	; (80043fc <setup_compass+0x244>)
 800421e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8004222:	f7ff f8a3 	bl	800336c <arduino_i2c_write>
 8004226:	2800      	cmp	r0, #0
 8004228:	f040 80c7 	bne.w	80043ba <setup_compass+0x202>
        return -1;
    delay_ms(1);
 800422c:	2001      	movs	r0, #1
 800422e:	f7ff f897 	bl	8003360 <arduino_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8004232:	ab01      	add	r3, sp, #4
 8004234:	2203      	movs	r2, #3
 8004236:	2110      	movs	r1, #16
 8004238:	4870      	ldr	r0, [pc, #448]	; (80043fc <setup_compass+0x244>)
 800423a:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 800423e:	f7ff f8b3 	bl	80033a8 <arduino_i2c_read>
 8004242:	2800      	cmp	r0, #0
 8004244:	f040 80bc 	bne.w	80043c0 <setup_compass+0x208>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8004248:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800424c:	3380      	adds	r3, #128	; 0x80
 800424e:	486b      	ldr	r0, [pc, #428]	; (80043fc <setup_compass+0x244>)
 8004250:	8583      	strh	r3, [r0, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8004252:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004256:	3380      	adds	r3, #128	; 0x80
 8004258:	85c3      	strh	r3, [r0, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 800425a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800425e:	3380      	adds	r3, #128	; 0x80
 8004260:	8603      	strh	r3, [r0, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 8004262:	ab02      	add	r3, sp, #8
 8004264:	2210      	movs	r2, #16
 8004266:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800426a:	2201      	movs	r2, #1
 800426c:	210a      	movs	r1, #10
 800426e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8004272:	f7ff f87b 	bl	800336c <arduino_i2c_write>
 8004276:	2800      	cmp	r0, #0
 8004278:	f040 80a5 	bne.w	80043c6 <setup_compass+0x20e>
        return -1;
    delay_ms(1);
 800427c:	2001      	movs	r0, #1
 800427e:	f7ff f86f 	bl	8003360 <arduino_delay_ms>

    mpu_set_bypass(0);
 8004282:	2000      	movs	r0, #0
 8004284:	f7ff fee4 	bl	8004050 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 8004288:	ab02      	add	r3, sp, #8
 800428a:	2240      	movs	r2, #64	; 0x40
 800428c:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8004290:	4a5a      	ldr	r2, [pc, #360]	; (80043fc <setup_compass+0x244>)
 8004292:	6850      	ldr	r0, [r2, #4]
 8004294:	6811      	ldr	r1, [r2, #0]
 8004296:	2201      	movs	r2, #1
 8004298:	7e89      	ldrb	r1, [r1, #26]
 800429a:	7800      	ldrb	r0, [r0, #0]
 800429c:	f7ff f866 	bl	800336c <arduino_i2c_write>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	f040 8093 	bne.w	80043cc <setup_compass+0x214>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80042a6:	4a55      	ldr	r2, [pc, #340]	; (80043fc <setup_compass+0x244>)
 80042a8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80042ac:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80042b0:	ab02      	add	r3, sp, #8
 80042b2:	f803 1d04 	strb.w	r1, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80042b6:	6850      	ldr	r0, [r2, #4]
 80042b8:	6811      	ldr	r1, [r2, #0]
 80042ba:	2201      	movs	r2, #1
 80042bc:	7f89      	ldrb	r1, [r1, #30]
 80042be:	7800      	ldrb	r0, [r0, #0]
 80042c0:	f7ff f854 	bl	800336c <arduino_i2c_write>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	f040 8084 	bne.w	80043d2 <setup_compass+0x21a>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 80042ca:	ab02      	add	r3, sp, #8
 80042cc:	2202      	movs	r2, #2
 80042ce:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80042d2:	4a4a      	ldr	r2, [pc, #296]	; (80043fc <setup_compass+0x244>)
 80042d4:	6850      	ldr	r0, [r2, #4]
 80042d6:	6811      	ldr	r1, [r2, #0]
 80042d8:	2201      	movs	r2, #1
 80042da:	7fc9      	ldrb	r1, [r1, #31]
 80042dc:	7800      	ldrb	r0, [r0, #0]
 80042de:	f7ff f845 	bl	800336c <arduino_i2c_write>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d178      	bne.n	80043d8 <setup_compass+0x220>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 80042e6:	ab02      	add	r3, sp, #8
 80042e8:	2288      	movs	r2, #136	; 0x88
 80042ea:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 80042ee:	4a43      	ldr	r2, [pc, #268]	; (80043fc <setup_compass+0x244>)
 80042f0:	6850      	ldr	r0, [r2, #4]
 80042f2:	6811      	ldr	r1, [r2, #0]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f891 1020 	ldrb.w	r1, [r1, #32]
 80042fa:	7800      	ldrb	r0, [r0, #0]
 80042fc:	f7ff f836 	bl	800336c <arduino_i2c_write>
 8004300:	2800      	cmp	r0, #0
 8004302:	d16c      	bne.n	80043de <setup_compass+0x226>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 8004304:	4a3d      	ldr	r2, [pc, #244]	; (80043fc <setup_compass+0x244>)
 8004306:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800430a:	ab02      	add	r3, sp, #8
 800430c:	f803 1d04 	strb.w	r1, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8004310:	6850      	ldr	r0, [r2, #4]
 8004312:	6811      	ldr	r1, [r2, #0]
 8004314:	2201      	movs	r2, #1
 8004316:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 800431a:	7800      	ldrb	r0, [r0, #0]
 800431c:	f7ff f826 	bl	800336c <arduino_i2c_write>
 8004320:	2800      	cmp	r0, #0
 8004322:	d15f      	bne.n	80043e4 <setup_compass+0x22c>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8004324:	ab02      	add	r3, sp, #8
 8004326:	220a      	movs	r2, #10
 8004328:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 800432c:	4a33      	ldr	r2, [pc, #204]	; (80043fc <setup_compass+0x244>)
 800432e:	6850      	ldr	r0, [r2, #4]
 8004330:	6811      	ldr	r1, [r2, #0]
 8004332:	2201      	movs	r2, #1
 8004334:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8004338:	7800      	ldrb	r0, [r0, #0]
 800433a:	f7ff f817 	bl	800336c <arduino_i2c_write>
 800433e:	2800      	cmp	r0, #0
 8004340:	d153      	bne.n	80043ea <setup_compass+0x232>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8004342:	ab02      	add	r3, sp, #8
 8004344:	2281      	movs	r2, #129	; 0x81
 8004346:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 800434a:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <setup_compass+0x244>)
 800434c:	6850      	ldr	r0, [r2, #4]
 800434e:	6811      	ldr	r1, [r2, #0]
 8004350:	2201      	movs	r2, #1
 8004352:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 8004356:	7800      	ldrb	r0, [r0, #0]
 8004358:	f7ff f808 	bl	800336c <arduino_i2c_write>
 800435c:	2800      	cmp	r0, #0
 800435e:	d147      	bne.n	80043f0 <setup_compass+0x238>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 8004360:	ab02      	add	r3, sp, #8
 8004362:	2211      	movs	r2, #17
 8004364:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <setup_compass+0x244>)
 800436a:	6850      	ldr	r0, [r2, #4]
 800436c:	6811      	ldr	r1, [r2, #0]
 800436e:	2201      	movs	r2, #1
 8004370:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8004374:	7800      	ldrb	r0, [r0, #0]
 8004376:	f7fe fff9 	bl	800336c <arduino_i2c_write>
 800437a:	2800      	cmp	r0, #0
 800437c:	d13b      	bne.n	80043f6 <setup_compass+0x23e>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 800437e:	ab02      	add	r3, sp, #8
 8004380:	2203      	movs	r2, #3
 8004382:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8004386:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <setup_compass+0x244>)
 8004388:	6850      	ldr	r0, [r2, #4]
 800438a:	6811      	ldr	r1, [r2, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8004392:	7800      	ldrb	r0, [r0, #0]
 8004394:	f7fe ffea 	bl	800336c <arduino_i2c_write>
 8004398:	4603      	mov	r3, r0
 800439a:	b940      	cbnz	r0, 80043ae <setup_compass+0x1f6>
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
}
 800439c:	4618      	mov	r0, r3
 800439e:	b002      	add	sp, #8
 80043a0:	bd10      	pop	{r4, pc}
        log_e("Compass not found.\n");
 80043a2:	4817      	ldr	r0, [pc, #92]	; (8004400 <setup_compass+0x248>)
 80043a4:	f7ff f81c 	bl	80033e0 <_MLPrintLog>
        return -1;
 80043a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ac:	e7f6      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043b2:	e7f3      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043b8:	e7f0      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043be:	e7ed      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c4:	e7ea      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ca:	e7e7      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043d0:	e7e4      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043d6:	e7e1      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043dc:	e7de      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043e2:	e7db      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043e8:	e7d8      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ee:	e7d5      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f4:	e7d2      	b.n	800439c <setup_compass+0x1e4>
        return -1;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043fa:	e7cf      	b.n	800439c <setup_compass+0x1e4>
 80043fc:	20000028 	.word	0x20000028
 8004400:	0800713c 	.word	0x0800713c

08004404 <mpu_set_int_latched>:
    if (st.chip_cfg.latched_int == enable)
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <mpu_set_int_latched+0x78>)
 8004406:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800440a:	4283      	cmp	r3, r0
 800440c:	d02f      	beq.n	800446e <mpu_set_int_latched+0x6a>
{
 800440e:	b510      	push	{r4, lr}
 8004410:	b082      	sub	sp, #8
    if (enable)
 8004412:	b340      	cbz	r0, 8004466 <mpu_set_int_latched+0x62>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8004414:	2330      	movs	r3, #48	; 0x30
 8004416:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.bypass_mode)
 800441a:	4b18      	ldr	r3, [pc, #96]	; (800447c <mpu_set_int_latched+0x78>)
 800441c:	7c9b      	ldrb	r3, [r3, #18]
 800441e:	b12b      	cbz	r3, 800442c <mpu_set_int_latched+0x28>
        tmp |= BIT_BYPASS_EN;
 8004420:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004424:	f043 0302 	orr.w	r3, r3, #2
 8004428:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 800442c:	4b13      	ldr	r3, [pc, #76]	; (800447c <mpu_set_int_latched+0x78>)
 800442e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004432:	b12b      	cbz	r3, 8004440 <mpu_set_int_latched+0x3c>
        tmp |= BIT_ACTL;
 8004434:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004438:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800443c:	f88d 3007 	strb.w	r3, [sp, #7]
 8004440:	4604      	mov	r4, r0
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8004442:	4b0e      	ldr	r3, [pc, #56]	; (800447c <mpu_set_int_latched+0x78>)
 8004444:	6858      	ldr	r0, [r3, #4]
 8004446:	6819      	ldr	r1, [r3, #0]
 8004448:	f10d 0307 	add.w	r3, sp, #7
 800444c:	2201      	movs	r2, #1
 800444e:	7dc9      	ldrb	r1, [r1, #23]
 8004450:	7800      	ldrb	r0, [r0, #0]
 8004452:	f7fe ff8b 	bl	800336c <arduino_i2c_write>
 8004456:	4603      	mov	r3, r0
 8004458:	b960      	cbnz	r0, 8004474 <mpu_set_int_latched+0x70>
    st.chip_cfg.latched_int = enable;
 800445a:	4a08      	ldr	r2, [pc, #32]	; (800447c <mpu_set_int_latched+0x78>)
 800445c:	f882 4023 	strb.w	r4, [r2, #35]	; 0x23
}
 8004460:	4618      	mov	r0, r3
 8004462:	b002      	add	sp, #8
 8004464:	bd10      	pop	{r4, pc}
        tmp = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	f88d 3007 	strb.w	r3, [sp, #7]
 800446c:	e7d5      	b.n	800441a <mpu_set_int_latched+0x16>
        return 0;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	4770      	bx	lr
        return -1;
 8004474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004478:	e7f2      	b.n	8004460 <mpu_set_int_latched+0x5c>
 800447a:	bf00      	nop
 800447c:	20000028 	.word	0x20000028

08004480 <mpu_lp_accel_mode>:
{
 8004480:	b510      	push	{r4, lr}
 8004482:	b082      	sub	sp, #8
    if (rate > 40)
 8004484:	2828      	cmp	r0, #40	; 0x28
 8004486:	d861      	bhi.n	800454c <mpu_lp_accel_mode+0xcc>
 8004488:	4604      	mov	r4, r0
    if (!rate) {
 800448a:	b9d0      	cbnz	r0, 80044c2 <mpu_lp_accel_mode+0x42>
        mpu_set_int_latched(0);
 800448c:	2000      	movs	r0, #0
 800448e:	f7ff ffb9 	bl	8004404 <mpu_set_int_latched>
        tmp[0] = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = BIT_STBY_XYZG;
 8004498:	2307      	movs	r3, #7
 800449a:	f88d 3005 	strb.w	r3, [sp, #5]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800449e:	4b31      	ldr	r3, [pc, #196]	; (8004564 <mpu_lp_accel_mode+0xe4>)
 80044a0:	6858      	ldr	r0, [r3, #4]
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	ab01      	add	r3, sp, #4
 80044a6:	2202      	movs	r2, #2
 80044a8:	7d49      	ldrb	r1, [r1, #21]
 80044aa:	7800      	ldrb	r0, [r0, #0]
 80044ac:	f7fe ff5e 	bl	800336c <arduino_i2c_write>
 80044b0:	4604      	mov	r4, r0
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d14d      	bne.n	8004552 <mpu_lp_accel_mode+0xd2>
        st.chip_cfg.lp_accel_mode = 0;
 80044b6:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <mpu_lp_accel_mode+0xe4>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	751a      	strb	r2, [r3, #20]
}
 80044bc:	4620      	mov	r0, r4
 80044be:	b002      	add	sp, #8
 80044c0:	bd10      	pop	{r4, pc}
    mpu_set_int_latched(1);
 80044c2:	2001      	movs	r0, #1
 80044c4:	f7ff ff9e 	bl	8004404 <mpu_set_int_latched>
    if (rate == 1)
 80044c8:	2c01      	cmp	r4, #1
 80044ca:	d007      	beq.n	80044dc <mpu_lp_accel_mode+0x5c>
    else if (rate == 2)
 80044cc:	2c02      	cmp	r4, #2
 80044ce:	d029      	beq.n	8004524 <mpu_lp_accel_mode+0xa4>
    else if (rate <= 5)
 80044d0:	2c05      	cmp	r4, #5
 80044d2:	d82b      	bhi.n	800452c <mpu_lp_accel_mode+0xac>
        tmp[0] = INV_LPA_5HZ;
 80044d4:	2304      	movs	r3, #4
 80044d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80044da:	e002      	b.n	80044e2 <mpu_lp_accel_mode+0x62>
        tmp[0] = INV_LPA_1_25HZ;
 80044dc:	2302      	movs	r3, #2
 80044de:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 80044e2:	4b20      	ldr	r3, [pc, #128]	; (8004564 <mpu_lp_accel_mode+0xe4>)
 80044e4:	6858      	ldr	r0, [r3, #4]
 80044e6:	6819      	ldr	r1, [r3, #0]
 80044e8:	ab01      	add	r3, sp, #4
 80044ea:	2201      	movs	r2, #1
 80044ec:	7a49      	ldrb	r1, [r1, #9]
 80044ee:	7800      	ldrb	r0, [r0, #0]
 80044f0:	f7fe ff3c 	bl	800336c <arduino_i2c_write>
 80044f4:	bb80      	cbnz	r0, 8004558 <mpu_lp_accel_mode+0xd8>
    tmp[0] = BIT_LPA_CYCLE;
 80044f6:	ab02      	add	r3, sp, #8
 80044f8:	2220      	movs	r2, #32
 80044fa:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80044fe:	4a19      	ldr	r2, [pc, #100]	; (8004564 <mpu_lp_accel_mode+0xe4>)
 8004500:	6850      	ldr	r0, [r2, #4]
 8004502:	6811      	ldr	r1, [r2, #0]
 8004504:	2201      	movs	r2, #1
 8004506:	7d49      	ldrb	r1, [r1, #21]
 8004508:	7800      	ldrb	r0, [r0, #0]
 800450a:	f7fe ff2f 	bl	800336c <arduino_i2c_write>
 800450e:	4604      	mov	r4, r0
 8004510:	bb28      	cbnz	r0, 800455e <mpu_lp_accel_mode+0xde>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <mpu_lp_accel_mode+0xe4>)
 8004514:	2208      	movs	r2, #8
 8004516:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8004518:	7318      	strb	r0, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800451a:	2201      	movs	r2, #1
 800451c:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 800451e:	f7ff fd67 	bl	8003ff0 <mpu_configure_fifo>
    return 0;
 8004522:	e7cb      	b.n	80044bc <mpu_lp_accel_mode+0x3c>
        tmp[0] = INV_LPA_2_5HZ;
 8004524:	2303      	movs	r3, #3
 8004526:	f88d 3004 	strb.w	r3, [sp, #4]
 800452a:	e7da      	b.n	80044e2 <mpu_lp_accel_mode+0x62>
    else if (rate <= 10)
 800452c:	2c0a      	cmp	r4, #10
 800452e:	d803      	bhi.n	8004538 <mpu_lp_accel_mode+0xb8>
        tmp[0] = INV_LPA_10HZ;
 8004530:	2305      	movs	r3, #5
 8004532:	f88d 3004 	strb.w	r3, [sp, #4]
 8004536:	e7d4      	b.n	80044e2 <mpu_lp_accel_mode+0x62>
    else if (rate <= 20)
 8004538:	2c14      	cmp	r4, #20
 800453a:	d803      	bhi.n	8004544 <mpu_lp_accel_mode+0xc4>
        tmp[0] = INV_LPA_20HZ;
 800453c:	2306      	movs	r3, #6
 800453e:	f88d 3004 	strb.w	r3, [sp, #4]
 8004542:	e7ce      	b.n	80044e2 <mpu_lp_accel_mode+0x62>
        tmp[0] = INV_LPA_40HZ;
 8004544:	2307      	movs	r3, #7
 8004546:	f88d 3004 	strb.w	r3, [sp, #4]
 800454a:	e7ca      	b.n	80044e2 <mpu_lp_accel_mode+0x62>
        return -1;
 800454c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004550:	e7b4      	b.n	80044bc <mpu_lp_accel_mode+0x3c>
            return -1;
 8004552:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004556:	e7b1      	b.n	80044bc <mpu_lp_accel_mode+0x3c>
        return -1;
 8004558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800455c:	e7ae      	b.n	80044bc <mpu_lp_accel_mode+0x3c>
        return -1;
 800455e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004562:	e7ab      	b.n	80044bc <mpu_lp_accel_mode+0x3c>
 8004564:	20000028 	.word	0x20000028

08004568 <mpu_set_sample_rate>:
{
 8004568:	b530      	push	{r4, r5, lr}
 800456a:	b083      	sub	sp, #12
    if (!(st.chip_cfg.sensors))
 800456c:	4b28      	ldr	r3, [pc, #160]	; (8004610 <mpu_set_sample_rate+0xa8>)
 800456e:	7a9b      	ldrb	r3, [r3, #10]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d044      	beq.n	80045fe <mpu_set_sample_rate+0x96>
 8004574:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on)
 8004576:	4b26      	ldr	r3, [pc, #152]	; (8004610 <mpu_set_sample_rate+0xa8>)
 8004578:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	d141      	bne.n	8004604 <mpu_set_sample_rate+0x9c>
        if (st.chip_cfg.lp_accel_mode) {
 8004580:	4b23      	ldr	r3, [pc, #140]	; (8004610 <mpu_set_sample_rate+0xa8>)
 8004582:	7d1b      	ldrb	r3, [r3, #20]
 8004584:	b133      	cbz	r3, 8004594 <mpu_set_sample_rate+0x2c>
            if (rate && (rate <= 40)) {
 8004586:	1e43      	subs	r3, r0, #1
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b27      	cmp	r3, #39	; 0x27
 800458c:	d90a      	bls.n	80045a4 <mpu_set_sample_rate+0x3c>
            mpu_lp_accel_mode(0);
 800458e:	2000      	movs	r0, #0
 8004590:	f7ff ff76 	bl	8004480 <mpu_lp_accel_mode>
        if (rate < 4)
 8004594:	2c03      	cmp	r4, #3
 8004596:	d909      	bls.n	80045ac <mpu_set_sample_rate+0x44>
        else if (rate > 1000)
 8004598:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800459c:	d907      	bls.n	80045ae <mpu_set_sample_rate+0x46>
            rate = 1000;
 800459e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80045a2:	e004      	b.n	80045ae <mpu_set_sample_rate+0x46>
                mpu_lp_accel_mode(rate);
 80045a4:	f7ff ff6c 	bl	8004480 <mpu_lp_accel_mode>
                return 0;
 80045a8:	2500      	movs	r5, #0
 80045aa:	e025      	b.n	80045f8 <mpu_set_sample_rate+0x90>
            rate = 4;
 80045ac:	2404      	movs	r4, #4
        data = 1000 / rate - 1;
 80045ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045b2:	fb90 f0f4 	sdiv	r0, r0, r4
 80045b6:	3801      	subs	r0, #1
 80045b8:	ab02      	add	r3, sp, #8
 80045ba:	f803 0d01 	strb.w	r0, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80045be:	4a14      	ldr	r2, [pc, #80]	; (8004610 <mpu_set_sample_rate+0xa8>)
 80045c0:	6850      	ldr	r0, [r2, #4]
 80045c2:	6811      	ldr	r1, [r2, #0]
 80045c4:	2201      	movs	r2, #1
 80045c6:	7849      	ldrb	r1, [r1, #1]
 80045c8:	7800      	ldrb	r0, [r0, #0]
 80045ca:	f7fe fecf 	bl	800336c <arduino_i2c_write>
 80045ce:	4605      	mov	r5, r0
 80045d0:	b9d8      	cbnz	r0, 800460a <mpu_set_sample_rate+0xa2>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80045d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80045e0:	4c0b      	ldr	r4, [pc, #44]	; (8004610 <mpu_set_sample_rate+0xa8>)
 80045e2:	81e3      	strh	r3, [r4, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80045e4:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80045e6:	2864      	cmp	r0, #100	; 0x64
 80045e8:	bf28      	it	cs
 80045ea:	2064      	movcs	r0, #100	; 0x64
 80045ec:	f7ff fc78 	bl	8003ee0 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80045f0:	89e0      	ldrh	r0, [r4, #14]
 80045f2:	0840      	lsrs	r0, r0, #1
 80045f4:	f7ff fc1a 	bl	8003e2c <mpu_set_lpf>
}
 80045f8:	4628      	mov	r0, r5
 80045fa:	b003      	add	sp, #12
 80045fc:	bd30      	pop	{r4, r5, pc}
        return -1;
 80045fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004602:	e7f9      	b.n	80045f8 <mpu_set_sample_rate+0x90>
        return -1;
 8004604:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004608:	e7f6      	b.n	80045f8 <mpu_set_sample_rate+0x90>
            return -1;
 800460a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800460e:	e7f3      	b.n	80045f8 <mpu_set_sample_rate+0x90>
 8004610:	20000028 	.word	0x20000028

08004614 <mpu_set_sensors>:
{
 8004614:	b530      	push	{r4, r5, lr}
 8004616:	b083      	sub	sp, #12
 8004618:	4604      	mov	r4, r0
    if (sensors & INV_XYZ_GYRO)
 800461a:	f010 0f70 	tst.w	r0, #112	; 0x70
 800461e:	f000 808f 	beq.w	8004740 <mpu_set_sensors+0x12c>
        data = INV_CLK_PLL;
 8004622:	2301      	movs	r3, #1
 8004624:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8004628:	4b5f      	ldr	r3, [pc, #380]	; (80047a8 <mpu_set_sensors+0x194>)
 800462a:	6858      	ldr	r0, [r3, #4]
 800462c:	6819      	ldr	r1, [r3, #0]
 800462e:	f10d 0307 	add.w	r3, sp, #7
 8004632:	2201      	movs	r2, #1
 8004634:	7d49      	ldrb	r1, [r1, #21]
 8004636:	7800      	ldrb	r0, [r0, #0]
 8004638:	f7fe fe98 	bl	800336c <arduino_i2c_write>
 800463c:	2800      	cmp	r0, #0
 800463e:	f040 8088 	bne.w	8004752 <mpu_set_sensors+0x13e>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8004642:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004646:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800464a:	4a57      	ldr	r2, [pc, #348]	; (80047a8 <mpu_set_sensors+0x194>)
 800464c:	7313      	strb	r3, [r2, #12]
    data = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_X_GYRO))
 8004654:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004658:	d102      	bne.n	8004660 <mpu_set_sensors+0x4c>
        data |= BIT_STBY_XG;
 800465a:	2304      	movs	r3, #4
 800465c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_Y_GYRO))
 8004660:	f014 0f20 	tst.w	r4, #32
 8004664:	d105      	bne.n	8004672 <mpu_set_sensors+0x5e>
        data |= BIT_STBY_YG;
 8004666:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800466a:	f043 0302 	orr.w	r3, r3, #2
 800466e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_Z_GYRO))
 8004672:	f014 0f10 	tst.w	r4, #16
 8004676:	d105      	bne.n	8004684 <mpu_set_sensors+0x70>
        data |= BIT_STBY_ZG;
 8004678:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_XYZ_ACCEL))
 8004684:	f014 0f08 	tst.w	r4, #8
 8004688:	d105      	bne.n	8004696 <mpu_set_sensors+0x82>
        data |= BIT_STBY_XYZA;
 800468a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800468e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004692:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8004696:	4b44      	ldr	r3, [pc, #272]	; (80047a8 <mpu_set_sensors+0x194>)
 8004698:	6858      	ldr	r0, [r3, #4]
 800469a:	6819      	ldr	r1, [r3, #0]
 800469c:	f10d 0307 	add.w	r3, sp, #7
 80046a0:	2201      	movs	r2, #1
 80046a2:	7d89      	ldrb	r1, [r1, #22]
 80046a4:	7800      	ldrb	r0, [r0, #0]
 80046a6:	f7fe fe61 	bl	800336c <arduino_i2c_write>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d157      	bne.n	800475e <mpu_set_sensors+0x14a>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 80046ae:	b10c      	cbz	r4, 80046b4 <mpu_set_sensors+0xa0>
 80046b0:	2c08      	cmp	r4, #8
 80046b2:	d15a      	bne.n	800476a <mpu_set_sensors+0x156>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80046b4:	4b3c      	ldr	r3, [pc, #240]	; (80047a8 <mpu_set_sensors+0x194>)
 80046b6:	6858      	ldr	r0, [r3, #4]
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	f10d 0306 	add.w	r3, sp, #6
 80046be:	2201      	movs	r2, #1
 80046c0:	7909      	ldrb	r1, [r1, #4]
 80046c2:	7800      	ldrb	r0, [r0, #0]
 80046c4:	f7fe fe70 	bl	80033a8 <arduino_i2c_read>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d163      	bne.n	8004794 <mpu_set_sensors+0x180>
    if (sensors & INV_XYZ_COMPASS) {
 80046cc:	f014 0f01 	tst.w	r4, #1
 80046d0:	d04f      	beq.n	8004772 <mpu_set_sensors+0x15e>
        data = AKM_SINGLE_MEASUREMENT;
 80046d2:	2311      	movs	r3, #17
 80046d4:	f88d 3007 	strb.w	r3, [sp, #7]
        user_ctrl |= BIT_AUX_IF_EN;
 80046d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80046dc:	f043 0320 	orr.w	r3, r3, #32
 80046e0:	f88d 3006 	strb.w	r3, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80046e4:	4b30      	ldr	r3, [pc, #192]	; (80047a8 <mpu_set_sensors+0x194>)
 80046e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d04b      	beq.n	8004786 <mpu_set_sensors+0x172>
        user_ctrl |= BIT_DMP_EN;
 80046ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80046f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046f6:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 80046fa:	4b2b      	ldr	r3, [pc, #172]	; (80047a8 <mpu_set_sensors+0x194>)
 80046fc:	6858      	ldr	r0, [r3, #4]
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	f10d 0307 	add.w	r3, sp, #7
 8004704:	2201      	movs	r2, #1
 8004706:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 800470a:	7800      	ldrb	r0, [r0, #0]
 800470c:	f7fe fe2e 	bl	800336c <arduino_i2c_write>
 8004710:	2800      	cmp	r0, #0
 8004712:	d142      	bne.n	800479a <mpu_set_sensors+0x186>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <mpu_set_sensors+0x194>)
 8004716:	6858      	ldr	r0, [r3, #4]
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	f10d 0306 	add.w	r3, sp, #6
 800471e:	2201      	movs	r2, #1
 8004720:	7909      	ldrb	r1, [r1, #4]
 8004722:	7800      	ldrb	r0, [r0, #0]
 8004724:	f7fe fe22 	bl	800336c <arduino_i2c_write>
 8004728:	4605      	mov	r5, r0
 800472a:	bbc8      	cbnz	r0, 80047a0 <mpu_set_sensors+0x18c>
    st.chip_cfg.sensors = sensors;
 800472c:	4b1e      	ldr	r3, [pc, #120]	; (80047a8 <mpu_set_sensors+0x194>)
 800472e:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8004730:	2200      	movs	r2, #0
 8004732:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8004734:	2032      	movs	r0, #50	; 0x32
 8004736:	f7fe fe13 	bl	8003360 <arduino_delay_ms>
}
 800473a:	4628      	mov	r0, r5
 800473c:	b003      	add	sp, #12
 800473e:	bd30      	pop	{r4, r5, pc}
    else if (sensors)
 8004740:	b118      	cbz	r0, 800474a <mpu_set_sensors+0x136>
        data = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	f88d 3007 	strb.w	r3, [sp, #7]
 8004748:	e76e      	b.n	8004628 <mpu_set_sensors+0x14>
        data = BIT_SLEEP;
 800474a:	2340      	movs	r3, #64	; 0x40
 800474c:	f88d 3007 	strb.w	r3, [sp, #7]
 8004750:	e76a      	b.n	8004628 <mpu_set_sensors+0x14>
        st.chip_cfg.sensors = 0;
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <mpu_set_sensors+0x194>)
 8004754:	2200      	movs	r2, #0
 8004756:	729a      	strb	r2, [r3, #10]
        return -1;
 8004758:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800475c:	e7ed      	b.n	800473a <mpu_set_sensors+0x126>
        st.chip_cfg.sensors = 0;
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <mpu_set_sensors+0x194>)
 8004760:	2200      	movs	r2, #0
 8004762:	729a      	strb	r2, [r3, #10]
        return -1;
 8004764:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004768:	e7e7      	b.n	800473a <mpu_set_sensors+0x126>
        mpu_set_int_latched(0);
 800476a:	2000      	movs	r0, #0
 800476c:	f7ff fe4a 	bl	8004404 <mpu_set_int_latched>
 8004770:	e7a0      	b.n	80046b4 <mpu_set_sensors+0xa0>
        data = AKM_POWER_DOWN;
 8004772:	2310      	movs	r3, #16
 8004774:	f88d 3007 	strb.w	r3, [sp, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
 8004778:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800477c:	f023 0320 	bic.w	r3, r3, #32
 8004780:	f88d 3006 	strb.w	r3, [sp, #6]
 8004784:	e7ae      	b.n	80046e4 <mpu_set_sensors+0xd0>
        user_ctrl &= ~BIT_DMP_EN;
 8004786:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800478a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478e:	f88d 3006 	strb.w	r3, [sp, #6]
 8004792:	e7b2      	b.n	80046fa <mpu_set_sensors+0xe6>
        return -1;
 8004794:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004798:	e7cf      	b.n	800473a <mpu_set_sensors+0x126>
        return -1;
 800479a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800479e:	e7cc      	b.n	800473a <mpu_set_sensors+0x126>
        return -1;
 80047a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80047a4:	e7c9      	b.n	800473a <mpu_set_sensors+0x126>
 80047a6:	bf00      	nop
 80047a8:	20000028 	.word	0x20000028

080047ac <mpu_init>:
{
 80047ac:	b510      	push	{r4, lr}
 80047ae:	b082      	sub	sp, #8
    data[0] = BIT_RESET;
 80047b0:	ab02      	add	r3, sp, #8
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	f803 2d08 	strb.w	r2, [r3, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80047b8:	4a42      	ldr	r2, [pc, #264]	; (80048c4 <mpu_init+0x118>)
 80047ba:	6850      	ldr	r0, [r2, #4]
 80047bc:	6811      	ldr	r1, [r2, #0]
 80047be:	2201      	movs	r2, #1
 80047c0:	7d49      	ldrb	r1, [r1, #21]
 80047c2:	7800      	ldrb	r0, [r0, #0]
 80047c4:	f7fe fdd2 	bl	800336c <arduino_i2c_write>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d160      	bne.n	800488e <mpu_init+0xe2>
    delay_ms(100);
 80047cc:	2064      	movs	r0, #100	; 0x64
 80047ce:	f7fe fdc7 	bl	8003360 <arduino_delay_ms>
    data[0] = 0x00;
 80047d2:	ab02      	add	r3, sp, #8
 80047d4:	2200      	movs	r2, #0
 80047d6:	f803 2d08 	strb.w	r2, [r3, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80047da:	4a3a      	ldr	r2, [pc, #232]	; (80048c4 <mpu_init+0x118>)
 80047dc:	6850      	ldr	r0, [r2, #4]
 80047de:	6811      	ldr	r1, [r2, #0]
 80047e0:	2201      	movs	r2, #1
 80047e2:	7d49      	ldrb	r1, [r1, #21]
 80047e4:	7800      	ldrb	r0, [r0, #0]
 80047e6:	f7fe fdc1 	bl	800336c <arduino_i2c_write>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d152      	bne.n	8004894 <mpu_init+0xe8>
   st.chip_cfg.accel_half = 0;
 80047ee:	4a35      	ldr	r2, [pc, #212]	; (80048c4 <mpu_init+0x118>)
 80047f0:	2300      	movs	r3, #0
 80047f2:	74d3      	strb	r3, [r2, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 80047f4:	ab02      	add	r3, sp, #8
 80047f6:	2148      	movs	r1, #72	; 0x48
 80047f8:	f803 1d08 	strb.w	r1, [r3, #-8]!
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 80047fc:	6850      	ldr	r0, [r2, #4]
 80047fe:	6811      	ldr	r1, [r2, #0]
 8004800:	2201      	movs	r2, #1
 8004802:	7a09      	ldrb	r1, [r1, #8]
 8004804:	7800      	ldrb	r0, [r0, #0]
 8004806:	f7fe fdb1 	bl	800336c <arduino_i2c_write>
 800480a:	2800      	cmp	r0, #0
 800480c:	d145      	bne.n	800489a <mpu_init+0xee>
    st.chip_cfg.sensors = 0xFF;
 800480e:	4b2d      	ldr	r3, [pc, #180]	; (80048c4 <mpu_init+0x118>)
 8004810:	22ff      	movs	r2, #255	; 0xff
 8004812:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8004814:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8004816:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8004818:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800481a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800481e:	81d9      	strh	r1, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8004820:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8004822:	749a      	strb	r2, [r3, #18]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8004824:	8519      	strh	r1, [r3, #40]	; 0x28
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8004826:	2201      	movs	r2, #1
 8004828:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.active_low_int = 1;
 800482a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8004834:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8004836:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8004838:	f8c3 2016 	str.w	r2, [r3, #22]
 800483c:	f8c3 201a 	str.w	r2, [r3, #26]
 8004840:	f8c3 201e 	str.w	r2, [r3, #30]
    st.chip_cfg.dmp_on = 0;
 8004844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8004848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800484c:	84da      	strh	r2, [r3, #38]	; 0x26
    if (mpu_set_gyro_fsr(2000))
 800484e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004852:	f7ff fa0f 	bl	8003c74 <mpu_set_gyro_fsr>
 8004856:	bb18      	cbnz	r0, 80048a0 <mpu_init+0xf4>
    if (mpu_set_accel_fsr(2))
 8004858:	2002      	movs	r0, #2
 800485a:	f7ff fa79 	bl	8003d50 <mpu_set_accel_fsr>
 800485e:	bb10      	cbnz	r0, 80048a6 <mpu_init+0xfa>
    if (mpu_set_lpf(42))
 8004860:	202a      	movs	r0, #42	; 0x2a
 8004862:	f7ff fae3 	bl	8003e2c <mpu_set_lpf>
 8004866:	bb08      	cbnz	r0, 80048ac <mpu_init+0x100>
    if (mpu_set_sample_rate(50))
 8004868:	2032      	movs	r0, #50	; 0x32
 800486a:	f7ff fe7d 	bl	8004568 <mpu_set_sample_rate>
 800486e:	bb00      	cbnz	r0, 80048b2 <mpu_init+0x106>
    if (mpu_configure_fifo(0))
 8004870:	f7ff fbbe 	bl	8003ff0 <mpu_configure_fifo>
 8004874:	bb00      	cbnz	r0, 80048b8 <mpu_init+0x10c>
    setup_compass();
 8004876:	f7ff fc9f 	bl	80041b8 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 800487a:	200a      	movs	r0, #10
 800487c:	f7ff fb30 	bl	8003ee0 <mpu_set_compass_sample_rate>
 8004880:	4604      	mov	r4, r0
 8004882:	b9e0      	cbnz	r0, 80048be <mpu_init+0x112>
    mpu_set_sensors(0);
 8004884:	f7ff fec6 	bl	8004614 <mpu_set_sensors>
}
 8004888:	4620      	mov	r0, r4
 800488a:	b002      	add	sp, #8
 800488c:	bd10      	pop	{r4, pc}
        return -1;
 800488e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004892:	e7f9      	b.n	8004888 <mpu_init+0xdc>
        return -1;
 8004894:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004898:	e7f6      	b.n	8004888 <mpu_init+0xdc>
        return -1;
 800489a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800489e:	e7f3      	b.n	8004888 <mpu_init+0xdc>
        return -1;
 80048a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80048a4:	e7f0      	b.n	8004888 <mpu_init+0xdc>
        return -1;
 80048a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80048aa:	e7ed      	b.n	8004888 <mpu_init+0xdc>
        return -1;
 80048ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80048b0:	e7ea      	b.n	8004888 <mpu_init+0xdc>
        return -1;
 80048b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80048b6:	e7e7      	b.n	8004888 <mpu_init+0xdc>
        return -1;
 80048b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80048bc:	e7e4      	b.n	8004888 <mpu_init+0xdc>
        return -1;
 80048be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80048c2:	e7e1      	b.n	8004888 <mpu_init+0xdc>
 80048c4:	20000028 	.word	0x20000028

080048c8 <mpu_set_dmp_state>:
    if (st.chip_cfg.dmp_on == enable)
 80048c8:	4b22      	ldr	r3, [pc, #136]	; (8004954 <mpu_set_dmp_state+0x8c>)
 80048ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048ce:	4283      	cmp	r3, r0
 80048d0:	d03a      	beq.n	8004948 <mpu_set_dmp_state+0x80>
{
 80048d2:	b530      	push	{r4, r5, lr}
 80048d4:	b083      	sub	sp, #12
    if (enable) {
 80048d6:	b310      	cbz	r0, 800491e <mpu_set_dmp_state+0x56>
        if (!st.chip_cfg.dmp_loaded)
 80048d8:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <mpu_set_dmp_state+0x8c>)
 80048da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d034      	beq.n	800494c <mpu_set_dmp_state+0x84>
        set_int_enable(0);
 80048e2:	2000      	movs	r0, #0
 80048e4:	f7fe ffa4 	bl	8003830 <set_int_enable>
        mpu_set_bypass(0);
 80048e8:	2000      	movs	r0, #0
 80048ea:	f7ff fbb1 	bl	8004050 <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 80048ee:	4d19      	ldr	r5, [pc, #100]	; (8004954 <mpu_set_dmp_state+0x8c>)
 80048f0:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80048f2:	f7ff fe39 	bl	8004568 <mpu_set_sample_rate>
        tmp = 0;
 80048f6:	2400      	movs	r4, #0
 80048f8:	ab02      	add	r3, sp, #8
 80048fa:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80048fe:	6868      	ldr	r0, [r5, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	2123      	movs	r1, #35	; 0x23
 8004904:	7800      	ldrb	r0, [r0, #0]
 8004906:	f7fe fd31 	bl	800336c <arduino_i2c_write>
        st.chip_cfg.dmp_on = 1;
 800490a:	2001      	movs	r0, #1
 800490c:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        set_int_enable(1);
 8004910:	f7fe ff8e 	bl	8003830 <set_int_enable>
        mpu_reset_fifo();
 8004914:	f7ff f894 	bl	8003a40 <mpu_reset_fifo>
    return 0;
 8004918:	4620      	mov	r0, r4
}
 800491a:	b003      	add	sp, #12
 800491c:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 800491e:	2000      	movs	r0, #0
 8004920:	f7fe ff86 	bl	8003830 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 8004924:	4d0b      	ldr	r5, [pc, #44]	; (8004954 <mpu_set_dmp_state+0x8c>)
 8004926:	7c2a      	ldrb	r2, [r5, #16]
 8004928:	ab02      	add	r3, sp, #8
 800492a:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800492e:	6868      	ldr	r0, [r5, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	2123      	movs	r1, #35	; 0x23
 8004934:	7800      	ldrb	r0, [r0, #0]
 8004936:	f7fe fd19 	bl	800336c <arduino_i2c_write>
        st.chip_cfg.dmp_on = 0;
 800493a:	2400      	movs	r4, #0
 800493c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
        mpu_reset_fifo();
 8004940:	f7ff f87e 	bl	8003a40 <mpu_reset_fifo>
    return 0;
 8004944:	4620      	mov	r0, r4
 8004946:	e7e8      	b.n	800491a <mpu_set_dmp_state+0x52>
        return 0;
 8004948:	2000      	movs	r0, #0
}
 800494a:	4770      	bx	lr
            return -1;
 800494c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004950:	e7e3      	b.n	800491a <mpu_set_dmp_state+0x52>
 8004952:	bf00      	nop
 8004954:	20000028 	.word	0x20000028

08004958 <mpu_run_self_test>:
{
 8004958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	4607      	mov	r7, r0
 8004960:	4688      	mov	r8, r1
    if (st.chip_cfg.dmp_on) {
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <mpu_run_self_test+0xa8>)
 8004964:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8004968:	2d00      	cmp	r5, #0
 800496a:	d13f      	bne.n	80049ec <mpu_run_self_test+0x94>
    mpu_get_gyro_fsr(&gyro_fsr);
 800496c:	a801      	add	r0, sp, #4
 800496e:	f7ff f963 	bl	8003c38 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8004972:	f10d 0007 	add.w	r0, sp, #7
 8004976:	f7ff f9c9 	bl	8003d0c <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 800497a:	4668      	mov	r0, sp
 800497c:	f7ff fa34 	bl	8003de8 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8004980:	f10d 0002 	add.w	r0, sp, #2
 8004984:	f7ff fa9e 	bl	8003ec4 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8004988:	4c1d      	ldr	r4, [pc, #116]	; (8004a00 <mpu_run_self_test+0xa8>)
 800498a:	7aa6      	ldrb	r6, [r4, #10]
    mpu_get_fifo_config(&fifo_sensors);
 800498c:	f10d 0006 	add.w	r0, sp, #6
 8004990:	f7ff fb26 	bl	8003fe0 <mpu_get_fifo_config>
    get_st_biases(gyro, accel, 0);
 8004994:	2200      	movs	r2, #0
 8004996:	4641      	mov	r1, r8
 8004998:	4638      	mov	r0, r7
 800499a:	f7fe fd25 	bl	80033e8 <get_st_biases>
    st.chip_cfg.gyro_fsr = 0xFF;
 800499e:	23ff      	movs	r3, #255	; 0xff
 80049a0:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80049a2:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
 80049a4:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80049a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049aa:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.sensors = 0xFF;
 80049ac:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 80049ae:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80049b0:	2301      	movs	r3, #1
 80049b2:	7323      	strb	r3, [r4, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 80049b4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80049b8:	f7ff f95c 	bl	8003c74 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 80049bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80049c0:	f7ff f9c6 	bl	8003d50 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 80049c4:	f8bd 0000 	ldrh.w	r0, [sp]
 80049c8:	f7ff fa30 	bl	8003e2c <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 80049cc:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80049d0:	f7ff fdca 	bl	8004568 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 80049d4:	4630      	mov	r0, r6
 80049d6:	f7ff fe1d 	bl	8004614 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 80049da:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80049de:	f7ff fb07 	bl	8003ff0 <mpu_configure_fifo>
    if (dmp_was_on)
 80049e2:	b945      	cbnz	r5, 80049f6 <mpu_run_self_test+0x9e>
}
 80049e4:	2007      	movs	r0, #7
 80049e6:	b002      	add	sp, #8
 80049e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mpu_set_dmp_state(0);
 80049ec:	2000      	movs	r0, #0
 80049ee:	f7ff ff6b 	bl	80048c8 <mpu_set_dmp_state>
        dmp_was_on = 1;
 80049f2:	2501      	movs	r5, #1
 80049f4:	e7ba      	b.n	800496c <mpu_run_self_test+0x14>
        mpu_set_dmp_state(1);
 80049f6:	2001      	movs	r0, #1
 80049f8:	f7ff ff66 	bl	80048c8 <mpu_set_dmp_state>
 80049fc:	e7f2      	b.n	80049e4 <mpu_run_self_test+0x8c>
 80049fe:	bf00      	nop
 8004a00:	20000028 	.word	0x20000028

08004a04 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 8004a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a06:	b085      	sub	sp, #20
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8004a08:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <mpu_get_compass_reg+0xbc>)
 8004a0a:	7a9b      	ldrb	r3, [r3, #10]
 8004a0c:	f013 0f01 	tst.w	r3, #1
 8004a10:	d04a      	beq.n	8004aa8 <mpu_get_compass_reg+0xa4>
 8004a12:	460d      	mov	r5, r1
 8004a14:	4604      	mov	r4, r0
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 8004a16:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <mpu_get_compass_reg+0xbc>)
 8004a18:	6858      	ldr	r0, [r3, #4]
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	ab01      	add	r3, sp, #4
 8004a1e:	2208      	movs	r2, #8
 8004a20:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8004a24:	7800      	ldrb	r0, [r0, #0]
 8004a26:	f7fe fcbf 	bl	80033a8 <arduino_i2c_read>
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d13e      	bne.n	8004aae <mpu_get_compass_reg+0xaa>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 8004a30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d13b      	bne.n	8004ab4 <mpu_get_compass_reg+0xb0>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
 8004a3c:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	db3a      	blt.n	8004aba <mpu_get_compass_reg+0xb6>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
 8004a44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004a48:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004a4c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8004a50:	b209      	sxth	r1, r1
 8004a52:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 8004a54:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004a58:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004a5c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004a60:	b212      	sxth	r2, r2
 8004a62:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 8004a64:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8004a68:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004a6c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004a70:	b21b      	sxth	r3, r3
 8004a72:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 8004a74:	4f12      	ldr	r7, [pc, #72]	; (8004ac0 <mpu_get_compass_reg+0xbc>)
 8004a76:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	; 0x2c
 8004a7a:	fb00 f101 	mul.w	r1, r0, r1
 8004a7e:	1209      	asrs	r1, r1, #8
 8004a80:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8004a82:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8004a86:	fb01 f202 	mul.w	r2, r1, r2
 8004a8a:	1212      	asrs	r2, r2, #8
 8004a8c:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 8004a8e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	121b      	asrs	r3, r3, #8
 8004a98:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
 8004a9a:	b115      	cbz	r5, 8004aa2 <mpu_get_compass_reg+0x9e>
        get_ms(timestamp);
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f7fe fc58 	bl	8003352 <arduino_get_clock_ms>
    return 0;
#else
    return -1;
#endif
}
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	b005      	add	sp, #20
 8004aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8004aa8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004aac:	e7f9      	b.n	8004aa2 <mpu_get_compass_reg+0x9e>
        return -1;
 8004aae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004ab2:	e7f6      	b.n	8004aa2 <mpu_get_compass_reg+0x9e>
        return -2;
 8004ab4:	f06f 0601 	mvn.w	r6, #1
 8004ab8:	e7f3      	b.n	8004aa2 <mpu_get_compass_reg+0x9e>
        return -3;
 8004aba:	f06f 0602 	mvn.w	r6, #2
 8004abe:	e7f0      	b.n	8004aa2 <mpu_get_compass_reg+0x9e>
 8004ac0:	20000028 	.word	0x20000028

08004ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aca:	2400      	movs	r4, #0
 8004acc:	9403      	str	r4, [sp, #12]
 8004ace:	9404      	str	r4, [sp, #16]
 8004ad0:	9405      	str	r4, [sp, #20]
 8004ad2:	9406      	str	r4, [sp, #24]
 8004ad4:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ad6:	9400      	str	r4, [sp, #0]
 8004ad8:	4b3c      	ldr	r3, [pc, #240]	; (8004bcc <MX_GPIO_Init+0x108>)
 8004ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004adc:	f042 0204 	orr.w	r2, r2, #4
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae4:	f002 0204 	and.w	r2, r2, #4
 8004ae8:	9200      	str	r2, [sp, #0]
 8004aea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aec:	9401      	str	r4, [sp, #4]
 8004aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
 8004af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af8:	f002 0201 	and.w	r2, r2, #1
 8004afc:	9201      	str	r2, [sp, #4]
 8004afe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b00:	9402      	str	r4, [sp, #8]
 8004b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b04:	f042 0202 	orr.w	r2, r2, #2
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	9302      	str	r3, [sp, #8]
 8004b12:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004b14:	4e2e      	ldr	r6, [pc, #184]	; (8004bd0 <MX_GPIO_Init+0x10c>)
 8004b16:	4622      	mov	r2, r4
 8004b18:	2120      	movs	r1, #32
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f7fc ff38 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004b20:	4f2c      	ldr	r7, [pc, #176]	; (8004bd4 <MX_GPIO_Init+0x110>)
 8004b22:	4622      	mov	r2, r4
 8004b24:	2120      	movs	r1, #32
 8004b26:	4638      	mov	r0, r7
 8004b28:	f7fc ff32 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8004b2c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004bd8 <MX_GPIO_Init+0x114>
 8004b30:	4622      	mov	r2, r4
 8004b32:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8004b36:	4648      	mov	r0, r9
 8004b38:	f7fc ff2a 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004b3c:	f04f 0a20 	mov.w	sl, #32
 8004b40:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b44:	2501      	movs	r5, #1
 8004b46:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b48:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b4a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4c:	a903      	add	r1, sp, #12
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f7fc fe4c 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : kill_Pin */
  GPIO_InitStruct.Pin = kill_Pin;
 8004b54:	2310      	movs	r3, #16
 8004b56:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b58:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8004bdc <MX_GPIO_Init+0x118>
 8004b5c:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b60:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(kill_GPIO_Port, &GPIO_InitStruct);
 8004b62:	a903      	add	r1, sp, #12
 8004b64:	4638      	mov	r0, r7
 8004b66:	f7fc fe41 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004b6a:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b6e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b70:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b72:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b74:	a903      	add	r1, sp, #12
 8004b76:	4638      	mov	r0, r7
 8004b78:	f7fc fe38 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8004b7c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004b80:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b82:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b84:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b86:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b88:	a903      	add	r1, sp, #12
 8004b8a:	4648      	mov	r0, r9
 8004b8c:	f7fc fe2e 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_RE_INT_Pin */
  GPIO_InitStruct.Pin = PWM_RE_INT_Pin;
 8004b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b94:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b96:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(PWM_RE_INT_GPIO_Port, &GPIO_InitStruct);
 8004b9c:	a903      	add	r1, sp, #12
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f7fc fe24 	bl	80017ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	200a      	movs	r0, #10
 8004baa:	f7fc fdc7 	bl	800173c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004bae:	200a      	movs	r0, #10
 8004bb0:	f7fc fdf8 	bl	80017a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	2104      	movs	r1, #4
 8004bb8:	2017      	movs	r0, #23
 8004bba:	f7fc fdbf 	bl	800173c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004bbe:	2017      	movs	r0, #23
 8004bc0:	f7fc fdf0 	bl	80017a4 <HAL_NVIC_EnableIRQ>

}
 8004bc4:	b008      	add	sp, #32
 8004bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	40020000 	.word	0x40020000
 8004bd4:	40020800 	.word	0x40020800
 8004bd8:	40020400 	.word	0x40020400
 8004bdc:	10110000 	.word	0x10110000

08004be0 <MX_USART2_UART_Init>:
{
 8004be0:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004be2:	4808      	ldr	r0, [pc, #32]	; (8004c04 <MX_USART2_UART_Init+0x24>)
 8004be4:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <MX_USART2_UART_Init+0x28>)
 8004be6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004be8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004bec:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bf2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bf4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bf6:	220c      	movs	r2, #12
 8004bf8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bfa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bfc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004bfe:	f7fe fb79 	bl	80032f4 <HAL_UART_Init>
}
 8004c02:	bd08      	pop	{r3, pc}
 8004c04:	20000540 	.word	0x20000540
 8004c08:	40004400 	.word	0x40004400

08004c0c <MX_USART6_UART_Init>:
{
 8004c0c:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8004c0e:	4808      	ldr	r0, [pc, #32]	; (8004c30 <MX_USART6_UART_Init+0x24>)
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <MX_USART6_UART_Init+0x28>)
 8004c12:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8004c14:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c18:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004c1e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004c20:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004c22:	220c      	movs	r2, #12
 8004c24:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c26:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c28:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004c2a:	f7fe fb63 	bl	80032f4 <HAL_UART_Init>
}
 8004c2e:	bd08      	pop	{r3, pc}
 8004c30:	200004dc 	.word	0x200004dc
 8004c34:	40011400 	.word	0x40011400

08004c38 <MX_I2C2_Init>:
{
 8004c38:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8004c3a:	4809      	ldr	r0, [pc, #36]	; (8004c60 <MX_I2C2_Init+0x28>)
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <MX_I2C2_Init+0x2c>)
 8004c3e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <MX_I2C2_Init+0x30>)
 8004c42:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c44:	2300      	movs	r3, #0
 8004c46:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004c48:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c4e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c50:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004c52:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c54:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c56:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004c58:	f7fd f8bc 	bl	8001dd4 <HAL_I2C_Init>
}
 8004c5c:	bd08      	pop	{r3, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000328 	.word	0x20000328
 8004c64:	40005800 	.word	0x40005800
 8004c68:	00061a80 	.word	0x00061a80

08004c6c <MX_TIM4_Init>:
{
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	b08a      	sub	sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c70:	2400      	movs	r4, #0
 8004c72:	9408      	str	r4, [sp, #32]
 8004c74:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c76:	9401      	str	r4, [sp, #4]
 8004c78:	9402      	str	r4, [sp, #8]
 8004c7a:	9403      	str	r4, [sp, #12]
 8004c7c:	9404      	str	r4, [sp, #16]
 8004c7e:	9405      	str	r4, [sp, #20]
 8004c80:	9406      	str	r4, [sp, #24]
 8004c82:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 8004c84:	4d1b      	ldr	r5, [pc, #108]	; (8004cf4 <MX_TIM4_Init+0x88>)
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <MX_TIM4_Init+0x8c>)
 8004c88:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 9;
 8004c8a:	2309      	movs	r3, #9
 8004c8c:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c8e:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 20000;
 8004c90:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004c94:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c96:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c98:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f7fe f883 	bl	8002da6 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ca0:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ca2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ca4:	a908      	add	r1, sp, #32
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f7fe f966 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cac:	2360      	movs	r3, #96	; 0x60
 8004cae:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8004cb0:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cb2:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004cb4:	2604      	movs	r6, #4
 8004cb6:	9605      	str	r6, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cb8:	4622      	mov	r2, r4
 8004cba:	eb0d 0106 	add.w	r1, sp, r6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7fe f8bc 	bl	8002e3c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004cc4:	4632      	mov	r2, r6
 8004cc6:	eb0d 0106 	add.w	r1, sp, r6
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f7fe f8b6 	bl	8002e3c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	eb0d 0106 	add.w	r1, sp, r6
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f7fe f8b0 	bl	8002e3c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004cdc:	220c      	movs	r2, #12
 8004cde:	eb0d 0106 	add.w	r1, sp, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f7fe f8aa 	bl	8002e3c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 fb8b 	bl	8005404 <HAL_TIM_MspPostInit>
}
 8004cee:	b00a      	add	sp, #40	; 0x28
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200003e0 	.word	0x200003e0
 8004cf8:	40000800 	.word	0x40000800

08004cfc <MX_ADC1_Init>:
{
 8004cfc:	b530      	push	{r4, r5, lr}
 8004cfe:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8004d00:	2300      	movs	r3, #0
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	9302      	str	r3, [sp, #8]
 8004d08:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8004d0a:	4c11      	ldr	r4, [pc, #68]	; (8004d50 <MX_ADC1_Init+0x54>)
 8004d0c:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <MX_ADC1_Init+0x58>)
 8004d0e:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004d10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d14:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004d16:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004d18:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004d1a:	2501      	movs	r5, #1
 8004d1c:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004d1e:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004d22:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004d24:	4a0c      	ldr	r2, [pc, #48]	; (8004d58 <MX_ADC1_Init+0x5c>)
 8004d26:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d28:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004d2a:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004d2c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d30:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7fc fbf2 	bl	800151c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_7;
 8004d38:	2307      	movs	r3, #7
 8004d3a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8004d3c:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8004d3e:	2302      	movs	r3, #2
 8004d40:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d42:	4669      	mov	r1, sp
 8004d44:	4620      	mov	r0, r4
 8004d46:	f7fc fc15 	bl	8001574 <HAL_ADC_ConfigChannel>
}
 8004d4a:	b005      	add	sp, #20
 8004d4c:	bd30      	pop	{r4, r5, pc}
 8004d4e:	bf00      	nop
 8004d50:	2000042c 	.word	0x2000042c
 8004d54:	40012000 	.word	0x40012000
 8004d58:	0f000001 	.word	0x0f000001

08004d5c <MX_SPI2_Init>:
{
 8004d5c:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8004d5e:	480c      	ldr	r0, [pc, #48]	; (8004d90 <MX_SPI2_Init+0x34>)
 8004d60:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <MX_SPI2_Init+0x38>)
 8004d62:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004d64:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004d68:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d6e:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d70:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d72:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d78:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d7e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d80:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d82:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004d84:	230a      	movs	r3, #10
 8004d86:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004d88:	f7fd fee2 	bl	8002b50 <HAL_SPI_Init>
}
 8004d8c:	bd08      	pop	{r3, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000384 	.word	0x20000384
 8004d94:	40003800 	.word	0x40003800

08004d98 <MX_TIM11_Init>:
{
 8004d98:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8004d9a:	4807      	ldr	r0, [pc, #28]	; (8004db8 <MX_TIM11_Init+0x20>)
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <MX_TIM11_Init+0x24>)
 8004d9e:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100-1;
 8004da0:	2363      	movs	r3, #99	; 0x63
 8004da2:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004da4:	2300      	movs	r3, #0
 8004da6:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535-1;
 8004da8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004dac:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dae:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004db0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004db2:	f7fd ffdf 	bl	8002d74 <HAL_TIM_Base_Init>
}
 8004db6:	bd08      	pop	{r3, pc}
 8004db8:	20000494 	.word	0x20000494
 8004dbc:	40014800 	.word	0x40014800

08004dc0 <SystemClock_Config>:
{
 8004dc0:	b530      	push	{r4, r5, lr}
 8004dc2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dc4:	2230      	movs	r2, #48	; 0x30
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	a808      	add	r0, sp, #32
 8004dca:	f000 fc68 	bl	800569e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004dce:	2400      	movs	r4, #0
 8004dd0:	9403      	str	r4, [sp, #12]
 8004dd2:	9404      	str	r4, [sp, #16]
 8004dd4:	9405      	str	r4, [sp, #20]
 8004dd6:	9406      	str	r4, [sp, #24]
 8004dd8:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dda:	9401      	str	r4, [sp, #4]
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <SystemClock_Config+0x88>)
 8004dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004df0:	9402      	str	r4, [sp, #8]
 8004df2:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <SystemClock_Config+0x8c>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e02:	9302      	str	r3, [sp, #8]
 8004e04:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e06:	2502      	movs	r5, #2
 8004e08:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e0e:	2310      	movs	r3, #16
 8004e10:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e12:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e14:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004e16:	2308      	movs	r3, #8
 8004e18:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004e1a:	2364      	movs	r3, #100	; 0x64
 8004e1c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e1e:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004e20:	2304      	movs	r3, #4
 8004e22:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e24:	a808      	add	r0, sp, #32
 8004e26:	f7fd fb89 	bl	800253c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e2a:	230f      	movs	r3, #15
 8004e2c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e2e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e30:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e36:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e38:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004e3a:	2103      	movs	r1, #3
 8004e3c:	a803      	add	r0, sp, #12
 8004e3e:	f7fd fdb5 	bl	80029ac <HAL_RCC_ClockConfig>
}
 8004e42:	b015      	add	sp, #84	; 0x54
 8004e44:	bd30      	pop	{r4, r5, pc}
 8004e46:	bf00      	nop
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40007000 	.word	0x40007000

08004e50 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8004e50:	4b01      	ldr	r3, [pc, #4]	; (8004e58 <PWM1_Set+0x8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6358      	str	r0, [r3, #52]	; 0x34
}
 8004e56:	4770      	bx	lr
 8004e58:	200003e0 	.word	0x200003e0

08004e5c <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8004e5c:	4b01      	ldr	r3, [pc, #4]	; (8004e64 <PWM2_Set+0x8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6398      	str	r0, [r3, #56]	; 0x38

}
 8004e62:	4770      	bx	lr
 8004e64:	200003e0 	.word	0x200003e0

08004e68 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8004e68:	4b01      	ldr	r3, [pc, #4]	; (8004e70 <PWM3_Set+0x8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8004e6e:	4770      	bx	lr
 8004e70:	200003e0 	.word	0x200003e0

08004e74 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8004e74:	4b01      	ldr	r3, [pc, #4]	; (8004e7c <PWM4_Set+0x8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6418      	str	r0, [r3, #64]	; 0x40
}
 8004e7a:	4770      	bx	lr
 8004e7c:	200003e0 	.word	0x200003e0

08004e80 <main>:
{
 8004e80:	b508      	push	{r3, lr}
  HAL_Init();
 8004e82:	f7fc fa71 	bl	8001368 <HAL_Init>
  SystemClock_Config();
 8004e86:	f7ff ff9b 	bl	8004dc0 <SystemClock_Config>
  MX_GPIO_Init();
 8004e8a:	f7ff fe1b 	bl	8004ac4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004e8e:	f7ff fea7 	bl	8004be0 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8004e92:	f7ff fed1 	bl	8004c38 <MX_I2C2_Init>
  MX_TIM4_Init();
 8004e96:	f7ff fee9 	bl	8004c6c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8004e9a:	f7ff feb7 	bl	8004c0c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8004e9e:	f7ff ff2d 	bl	8004cfc <MX_ADC1_Init>
  MX_SPI2_Init();
 8004ea2:	f7ff ff5b 	bl	8004d5c <MX_SPI2_Init>
  MX_TIM11_Init();
 8004ea6:	f7ff ff77 	bl	8004d98 <MX_TIM11_Init>
	if (HAL_I2C_IsDeviceReady(&hi2c2, 0xD0, 2, 100) == HAL_OK) {
 8004eaa:	2364      	movs	r3, #100	; 0x64
 8004eac:	2202      	movs	r2, #2
 8004eae:	21d0      	movs	r1, #208	; 0xd0
 8004eb0:	4826      	ldr	r0, [pc, #152]	; (8004f4c <main+0xcc>)
 8004eb2:	f7fd fa81 	bl	80023b8 <HAL_I2C_IsDeviceReady>
 8004eb6:	b938      	cbnz	r0, 8004ec8 <main+0x48>
		if (begin() != INV_SUCCESS) {
 8004eb8:	f7fc f954 	bl	8001164 <begin>
 8004ebc:	b100      	cbz	r0, 8004ec0 <main+0x40>
 8004ebe:	e7fe      	b.n	8004ebe <main+0x3e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8004ec0:	2120      	movs	r1, #32
 8004ec2:	4823      	ldr	r0, [pc, #140]	; (8004f50 <main+0xd0>)
 8004ec4:	f7fc fd6a 	bl	800199c <HAL_GPIO_TogglePin>
	if ((setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS))){
 8004ec8:	2079      	movs	r0, #121	; 0x79
 8004eca:	f7fc f947 	bl	800115c <setSensors>
 8004ece:	b100      	cbz	r0, 8004ed2 <main+0x52>
 8004ed0:	e7fe      	b.n	8004ed0 <main+0x50>
	setGyroFSR(2000); // Set gyro to 2000 dps
 8004ed2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004ed6:	f7fc f915 	bl	8001104 <setGyroFSR>
	setAccelFSR(2); // Set accel to +/-2g
 8004eda:	2002      	movs	r0, #2
 8004edc:	f7fc f930 	bl	8001140 <setAccelFSR>
	setLPF(5); // Set LPF corner frequency to 42Hz
 8004ee0:	2005      	movs	r0, #5
 8004ee2:	f7fc f8f3 	bl	80010cc <setLPF>
	setSampleRate(1000); // Set sample rate to max
 8004ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004eea:	f7fc f8f3 	bl	80010d4 <setSampleRate>
	setCompassSampleRate(100); // Set accel rate to max
 8004eee:	2064      	movs	r0, #100	; 0x64
 8004ef0:	f7fc f8f4 	bl	80010dc <setCompassSampleRate>
	if (selfTest(0) != 0x07) {
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f7fc f9e0 	bl	80012ba <selfTest>
 8004efa:	2807      	cmp	r0, #7
 8004efc:	d000      	beq.n	8004f00 <main+0x80>
 8004efe:	e7fe      	b.n	8004efe <main+0x7e>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004f00:	4c14      	ldr	r4, [pc, #80]	; (8004f54 <main+0xd4>)
 8004f02:	2100      	movs	r1, #0
 8004f04:	4620      	mov	r0, r4
 8004f06:	f7fe f819 	bl	8002f3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004f0a:	2104      	movs	r1, #4
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f7fe f815 	bl	8002f3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004f12:	2108      	movs	r1, #8
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7fe f811 	bl	8002f3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004f1a:	210c      	movs	r1, #12
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f7fe f80d 	bl	8002f3c <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8004f22:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004f26:	f7ff ff93 	bl	8004e50 <PWM1_Set>
	PWM2_Set(2500);
 8004f2a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004f2e:	f7ff ff95 	bl	8004e5c <PWM2_Set>
	PWM3_Set(2500);
 8004f32:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004f36:	f7ff ff97 	bl	8004e68 <PWM3_Set>
	PWM4_Set(2500);
 8004f3a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004f3e:	f7ff ff99 	bl	8004e74 <PWM4_Set>
		main_loop = 1;
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <main+0xd8>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e7fb      	b.n	8004f42 <main+0xc2>
 8004f4a:	bf00      	nop
 8004f4c:	20000328 	.word	0x20000328
 8004f50:	40020000 	.word	0x40020000
 8004f54:	200003e0 	.word	0x200003e0
 8004f58:	20000280 	.word	0x20000280

08004f5c <pulse_posedge_handler>:
 * (1 CW)     (3 CCW)
 *
 * This function gets called by the GPIO_EXTI callback when the PWM_RE_INT_Pin triggers an interrupt,
 * which is on the rising edge of every PWM pulse.
 */
void pulse_posedge_handler() {
 8004f5c:	b538      	push	{r3, r4, r5, lr}

	//Only want this to happen in main loop - not during init sequence
	if (main_loop) {
 8004f5e:	4b74      	ldr	r3, [pc, #464]	; (8005130 <pulse_posedge_handler+0x1d4>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	b903      	cbnz	r3, 8004f66 <pulse_posedge_handler+0xa>

#endif

	}

}
 8004f64:	bd38      	pop	{r3, r4, r5, pc}
		update(UPDATE_ACCEL | UPDATE_GYRO | UPDATE_COMPASS);
 8004f66:	200e      	movs	r0, #14
 8004f68:	f7fc f982 	bl	8001270 <update>
		 accelX = calcAccel(ax); // accelX is x-axis acceleration in g's
 8004f6c:	4b71      	ldr	r3, [pc, #452]	; (8005134 <pulse_posedge_handler+0x1d8>)
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	f7fc f9ac 	bl	80012cc <calcAccel>
 8004f74:	4b70      	ldr	r3, [pc, #448]	; (8005138 <pulse_posedge_handler+0x1dc>)
 8004f76:	ed83 0a00 	vstr	s0, [r3]
		 accelY = calcAccel(ay); // accelY is y-axis acceleration in g's
 8004f7a:	4b70      	ldr	r3, [pc, #448]	; (800513c <pulse_posedge_handler+0x1e0>)
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	f7fc f9a5 	bl	80012cc <calcAccel>
 8004f82:	4b6f      	ldr	r3, [pc, #444]	; (8005140 <pulse_posedge_handler+0x1e4>)
 8004f84:	ed83 0a00 	vstr	s0, [r3]
		 accelZ = calcAccel(az); // accelZ is z-axis acceleration in g's
 8004f88:	4b6e      	ldr	r3, [pc, #440]	; (8005144 <pulse_posedge_handler+0x1e8>)
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	f7fc f99e 	bl	80012cc <calcAccel>
 8004f90:	4b6d      	ldr	r3, [pc, #436]	; (8005148 <pulse_posedge_handler+0x1ec>)
 8004f92:	ed83 0a00 	vstr	s0, [r3]
		 gyroX = calcGyro(gx); // gyroX is x-axis rotation in dps
 8004f96:	4b6d      	ldr	r3, [pc, #436]	; (800514c <pulse_posedge_handler+0x1f0>)
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	f7fc f9a7 	bl	80012ec <calcGyro>
 8004f9e:	4b6c      	ldr	r3, [pc, #432]	; (8005150 <pulse_posedge_handler+0x1f4>)
 8004fa0:	ed83 0a00 	vstr	s0, [r3]
		 gyroY = calcGyro(gy); // gyroY is y-axis rotation in dps
 8004fa4:	4b6b      	ldr	r3, [pc, #428]	; (8005154 <pulse_posedge_handler+0x1f8>)
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	f7fc f9a0 	bl	80012ec <calcGyro>
 8004fac:	4b6a      	ldr	r3, [pc, #424]	; (8005158 <pulse_posedge_handler+0x1fc>)
 8004fae:	ed83 0a00 	vstr	s0, [r3]
		 gyroZ = calcGyro(gz); // gyroZ is z-axis rotation in dps
 8004fb2:	4b6a      	ldr	r3, [pc, #424]	; (800515c <pulse_posedge_handler+0x200>)
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	f7fc f999 	bl	80012ec <calcGyro>
 8004fba:	4b69      	ldr	r3, [pc, #420]	; (8005160 <pulse_posedge_handler+0x204>)
 8004fbc:	ed83 0a00 	vstr	s0, [r3]
		 magX = calcMag(mx); // accelX is x-axis accelnetic field in uT
 8004fc0:	4b68      	ldr	r3, [pc, #416]	; (8005164 <pulse_posedge_handler+0x208>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	f7fc f99e 	bl	8001304 <calcMag>
 8004fc8:	4b67      	ldr	r3, [pc, #412]	; (8005168 <pulse_posedge_handler+0x20c>)
 8004fca:	ed83 0a00 	vstr	s0, [r3]
		 magY = calcMag(my); // accelY is y-axis accelnetic field in uT
 8004fce:	4b67      	ldr	r3, [pc, #412]	; (800516c <pulse_posedge_handler+0x210>)
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	f7fc f997 	bl	8001304 <calcMag>
 8004fd6:	4b66      	ldr	r3, [pc, #408]	; (8005170 <pulse_posedge_handler+0x214>)
 8004fd8:	ed83 0a00 	vstr	s0, [r3]
		 magZ = calcMag(mz); // accelZ is z-axis accelnetic field in uT
 8004fdc:	4b65      	ldr	r3, [pc, #404]	; (8005174 <pulse_posedge_handler+0x218>)
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	f7fc f990 	bl	8001304 <calcMag>
 8004fe4:	4b64      	ldr	r3, [pc, #400]	; (8005178 <pulse_posedge_handler+0x21c>)
 8004fe6:	ed83 0a00 	vstr	s0, [r3]
		if (airmode) {
 8004fea:	4b64      	ldr	r3, [pc, #400]	; (800517c <pulse_posedge_handler+0x220>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 808f 	beq.w	8005112 <pulse_posedge_handler+0x1b6>
			pid_output_pitch = pid_calculate_pitch(pitch, 0,
 8004ff4:	4b62      	ldr	r3, [pc, #392]	; (8005180 <pulse_posedge_handler+0x224>)
 8004ff6:	edd3 0a00 	vldr	s1, [r3]
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	4b61      	ldr	r3, [pc, #388]	; (8005184 <pulse_posedge_handler+0x228>)
 8004ffe:	ed93 0a00 	vldr	s0, [r3]
 8005002:	f7fb ffd3 	bl	8000fac <pid_calculate_pitch>
 8005006:	4b60      	ldr	r3, [pc, #384]	; (8005188 <pulse_posedge_handler+0x22c>)
 8005008:	ed83 0a00 	vstr	s0, [r3]
			pid_output_roll = pid_calculate_roll(roll, 0, roll_setpoint);
 800500c:	4b5f      	ldr	r3, [pc, #380]	; (800518c <pulse_posedge_handler+0x230>)
 800500e:	edd3 0a00 	vldr	s1, [r3]
 8005012:	2000      	movs	r0, #0
 8005014:	4b5e      	ldr	r3, [pc, #376]	; (8005190 <pulse_posedge_handler+0x234>)
 8005016:	ed93 0a00 	vldr	s0, [r3]
 800501a:	f7fb ff49 	bl	8000eb0 <pid_calculate_roll>
 800501e:	4b5d      	ldr	r3, [pc, #372]	; (8005194 <pulse_posedge_handler+0x238>)
 8005020:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 8005024:	4b5c      	ldr	r3, [pc, #368]	; (8005198 <pulse_posedge_handler+0x23c>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	4b5a      	ldr	r3, [pc, #360]	; (8005194 <pulse_posedge_handler+0x238>)
 800502a:	edd3 7a00 	vldr	s15, [r3]
 800502e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005032:	ee17 1a90 	vmov	r1, s15
 8005036:	1a42      	subs	r2, r0, r1
 8005038:	4b53      	ldr	r3, [pc, #332]	; (8005188 <pulse_posedge_handler+0x22c>)
 800503a:	edd3 7a00 	vldr	s15, [r3]
 800503e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005042:	ee17 3a90 	vmov	r3, s15
 8005046:	1ad4      	subs	r4, r2, r3
 8005048:	4d54      	ldr	r5, [pc, #336]	; (800519c <pulse_posedge_handler+0x240>)
 800504a:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 800504c:	441a      	add	r2, r3
 800504e:	4d54      	ldr	r5, [pc, #336]	; (80051a0 <pulse_posedge_handler+0x244>)
 8005050:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 8005052:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 8005054:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 8005056:	4d53      	ldr	r5, [pc, #332]	; (80051a4 <pulse_posedge_handler+0x248>)
 8005058:	6028      	str	r0, [r5, #0]
				+ (int) pid_output_pitch;
 800505a:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 800505c:	4952      	ldr	r1, [pc, #328]	; (80051a8 <pulse_posedge_handler+0x24c>)
 800505e:	600b      	str	r3, [r1, #0]
		if (esc1_total < ESC_MIN) {
 8005060:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8005064:	428c      	cmp	r4, r1
 8005066:	dc03      	bgt.n	8005070 <pulse_posedge_handler+0x114>
			esc1_total = ESC_MIN;
 8005068:	494c      	ldr	r1, [pc, #304]	; (800519c <pulse_posedge_handler+0x240>)
 800506a:	f240 44e2 	movw	r4, #1250	; 0x4e2
 800506e:	600c      	str	r4, [r1, #0]
		if (esc1_total > ESC_MAX) {
 8005070:	494a      	ldr	r1, [pc, #296]	; (800519c <pulse_posedge_handler+0x240>)
 8005072:	680c      	ldr	r4, [r1, #0]
 8005074:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8005078:	428c      	cmp	r4, r1
 800507a:	dd03      	ble.n	8005084 <pulse_posedge_handler+0x128>
			esc1_total = ESC_MAX;
 800507c:	4947      	ldr	r1, [pc, #284]	; (800519c <pulse_posedge_handler+0x240>)
 800507e:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8005082:	600c      	str	r4, [r1, #0]
		if (esc2_total < ESC_MIN) {
 8005084:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8005088:	428a      	cmp	r2, r1
 800508a:	dc03      	bgt.n	8005094 <pulse_posedge_handler+0x138>
			esc2_total = ESC_MIN;
 800508c:	4a44      	ldr	r2, [pc, #272]	; (80051a0 <pulse_posedge_handler+0x244>)
 800508e:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8005092:	6011      	str	r1, [r2, #0]
		if (esc2_total > ESC_MAX) {
 8005094:	4a42      	ldr	r2, [pc, #264]	; (80051a0 <pulse_posedge_handler+0x244>)
 8005096:	6811      	ldr	r1, [r2, #0]
 8005098:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800509c:	4291      	cmp	r1, r2
 800509e:	dd03      	ble.n	80050a8 <pulse_posedge_handler+0x14c>
			esc2_total = ESC_MAX;
 80050a0:	4a3f      	ldr	r2, [pc, #252]	; (80051a0 <pulse_posedge_handler+0x244>)
 80050a2:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80050a6:	6011      	str	r1, [r2, #0]
		if (esc3_total < ESC_MIN) {
 80050a8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80050ac:	4290      	cmp	r0, r2
 80050ae:	dc03      	bgt.n	80050b8 <pulse_posedge_handler+0x15c>
			esc3_total = ESC_MIN;
 80050b0:	4a3c      	ldr	r2, [pc, #240]	; (80051a4 <pulse_posedge_handler+0x248>)
 80050b2:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80050b6:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 80050b8:	4a3a      	ldr	r2, [pc, #232]	; (80051a4 <pulse_posedge_handler+0x248>)
 80050ba:	6811      	ldr	r1, [r2, #0]
 80050bc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80050c0:	4291      	cmp	r1, r2
 80050c2:	dd03      	ble.n	80050cc <pulse_posedge_handler+0x170>
			esc3_total = ESC_MAX;
 80050c4:	4a37      	ldr	r2, [pc, #220]	; (80051a4 <pulse_posedge_handler+0x248>)
 80050c6:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80050ca:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 80050cc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80050d0:	4293      	cmp	r3, r2
 80050d2:	dc03      	bgt.n	80050dc <pulse_posedge_handler+0x180>
			esc4_total = ESC_MIN;
 80050d4:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <pulse_posedge_handler+0x24c>)
 80050d6:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80050da:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 80050dc:	4b32      	ldr	r3, [pc, #200]	; (80051a8 <pulse_posedge_handler+0x24c>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80050e4:	429a      	cmp	r2, r3
 80050e6:	dd03      	ble.n	80050f0 <pulse_posedge_handler+0x194>
			esc4_total = ESC_MAX;
 80050e8:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <pulse_posedge_handler+0x24c>)
 80050ea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80050ee:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 80050f0:	4b2a      	ldr	r3, [pc, #168]	; (800519c <pulse_posedge_handler+0x240>)
 80050f2:	8818      	ldrh	r0, [r3, #0]
 80050f4:	f7ff feac 	bl	8004e50 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 80050f8:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <pulse_posedge_handler+0x244>)
 80050fa:	8818      	ldrh	r0, [r3, #0]
 80050fc:	f7ff feae 	bl	8004e5c <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <pulse_posedge_handler+0x248>)
 8005102:	8818      	ldrh	r0, [r3, #0]
 8005104:	f7ff feb0 	bl	8004e68 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <pulse_posedge_handler+0x24c>)
 800510a:	8818      	ldrh	r0, [r3, #0]
 800510c:	f7ff feb2 	bl	8004e74 <PWM4_Set>
}
 8005110:	e728      	b.n	8004f64 <pulse_posedge_handler+0x8>
			pid_output_roll = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <pulse_posedge_handler+0x238>)
 8005116:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <pulse_posedge_handler+0x22c>)
 800511a:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 800511c:	4a23      	ldr	r2, [pc, #140]	; (80051ac <pulse_posedge_handler+0x250>)
 800511e:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8005120:	f7fb ff32 	bl	8000f88 <reset_pid_roll>
			reset_pid_pitch();
 8005124:	f7fb ffae 	bl	8001084 <reset_pid_pitch>
			reset_pid_yaw();
 8005128:	f7fb ffbe 	bl	80010a8 <reset_pid_yaw>
 800512c:	e77a      	b.n	8005024 <pulse_posedge_handler+0xc8>
 800512e:	bf00      	nop
 8005130:	20000280 	.word	0x20000280
 8005134:	200002e4 	.word	0x200002e4
 8005138:	200003dc 	.word	0x200003dc
 800513c:	20000314 	.word	0x20000314
 8005140:	20000380 	.word	0x20000380
 8005144:	200002d8 	.word	0x200002d8
 8005148:	200004d8 	.word	0x200004d8
 800514c:	2000030c 	.word	0x2000030c
 8005150:	20000420 	.word	0x20000420
 8005154:	200002d4 	.word	0x200002d4
 8005158:	20000584 	.word	0x20000584
 800515c:	200002f8 	.word	0x200002f8
 8005160:	20000428 	.word	0x20000428
 8005164:	20000318 	.word	0x20000318
 8005168:	20000588 	.word	0x20000588
 800516c:	200002e0 	.word	0x200002e0
 8005170:	2000037c 	.word	0x2000037c
 8005174:	200002fc 	.word	0x200002fc
 8005178:	20000424 	.word	0x20000424
 800517c:	2000026c 	.word	0x2000026c
 8005180:	20000290 	.word	0x20000290
 8005184:	20000304 	.word	0x20000304
 8005188:	20000284 	.word	0x20000284
 800518c:	20000294 	.word	0x20000294
 8005190:	20000308 	.word	0x20000308
 8005194:	20000288 	.word	0x20000288
 8005198:	20000298 	.word	0x20000298
 800519c:	20000270 	.word	0x20000270
 80051a0:	20000274 	.word	0x20000274
 80051a4:	20000278 	.word	0x20000278
 80051a8:	2000027c 	.word	0x2000027c
 80051ac:	2000028c 	.word	0x2000028c

080051b0 <HAL_GPIO_EXTI_Callback>:

//GPIO interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

//GPIO pin configured to capture rising edge interrupt of PWM signals
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 80051b0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80051b4:	d000      	beq.n	80051b8 <HAL_GPIO_EXTI_Callback+0x8>
 80051b6:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80051b8:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 80051ba:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <HAL_GPIO_EXTI_Callback+0x18>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	b903      	cbnz	r3, 80051c2 <HAL_GPIO_EXTI_Callback+0x12>

	if (GPIO_Pin == kill_Pin && main_loop) {
		//kill();
	}

}
 80051c0:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 80051c2:	f7ff fecb 	bl	8004f5c <pulse_posedge_handler>
}
 80051c6:	e7fb      	b.n	80051c0 <HAL_GPIO_EXTI_Callback+0x10>
 80051c8:	20000280 	.word	0x20000280

080051cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051cc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ce:	2100      	movs	r1, #0
 80051d0:	9100      	str	r1, [sp, #0]
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_MspInit+0x34>)
 80051d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051da:	645a      	str	r2, [r3, #68]	; 0x44
 80051dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80051e2:	9200      	str	r2, [sp, #0]
 80051e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051e6:	9101      	str	r1, [sp, #4]
 80051e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051fa:	b002      	add	sp, #8
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800

08005204 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005204:	b500      	push	{lr}
 8005206:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005208:	2300      	movs	r3, #0
 800520a:	9303      	str	r3, [sp, #12]
 800520c:	9304      	str	r3, [sp, #16]
 800520e:	9305      	str	r3, [sp, #20]
 8005210:	9306      	str	r3, [sp, #24]
 8005212:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8005214:	6802      	ldr	r2, [r0, #0]
 8005216:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800521a:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800521e:	429a      	cmp	r2, r3
 8005220:	d002      	beq.n	8005228 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005222:	b009      	add	sp, #36	; 0x24
 8005224:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005228:	2100      	movs	r1, #0
 800522a:	9101      	str	r1, [sp, #4]
 800522c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8005230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005236:	645a      	str	r2, [r3, #68]	; 0x44
 8005238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800523a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800523e:	9201      	str	r2, [sp, #4]
 8005240:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005242:	9102      	str	r1, [sp, #8]
 8005244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	9302      	str	r3, [sp, #8]
 8005254:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800525a:	2303      	movs	r3, #3
 800525c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800525e:	a903      	add	r1, sp, #12
 8005260:	4801      	ldr	r0, [pc, #4]	; (8005268 <HAL_ADC_MspInit+0x64>)
 8005262:	f7fc fac3 	bl	80017ec <HAL_GPIO_Init>
}
 8005266:	e7dc      	b.n	8005222 <HAL_ADC_MspInit+0x1e>
 8005268:	40020000 	.word	0x40020000

0800526c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800526c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005270:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005272:	2300      	movs	r3, #0
 8005274:	9303      	str	r3, [sp, #12]
 8005276:	9304      	str	r3, [sp, #16]
 8005278:	9305      	str	r3, [sp, #20]
 800527a:	9306      	str	r3, [sp, #24]
 800527c:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 800527e:	6802      	ldr	r2, [r0, #0]
 8005280:	4b1e      	ldr	r3, [pc, #120]	; (80052fc <HAL_I2C_MspInit+0x90>)
 8005282:	429a      	cmp	r2, r3
 8005284:	d002      	beq.n	800528c <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005286:	b009      	add	sp, #36	; 0x24
 8005288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800528c:	2500      	movs	r5, #0
 800528e:	9501      	str	r5, [sp, #4]
 8005290:	4c1b      	ldr	r4, [pc, #108]	; (8005300 <HAL_I2C_MspInit+0x94>)
 8005292:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005294:	f043 0302 	orr.w	r3, r3, #2
 8005298:	6323      	str	r3, [r4, #48]	; 0x30
 800529a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80052a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052aa:	f04f 0912 	mov.w	r9, #18
 80052ae:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052b2:	f04f 0801 	mov.w	r8, #1
 80052b6:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ba:	2703      	movs	r7, #3
 80052bc:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80052be:	2304      	movs	r3, #4
 80052c0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c2:	4e10      	ldr	r6, [pc, #64]	; (8005304 <HAL_I2C_MspInit+0x98>)
 80052c4:	a903      	add	r1, sp, #12
 80052c6:	4630      	mov	r0, r6
 80052c8:	f7fc fa90 	bl	80017ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80052cc:	2308      	movs	r3, #8
 80052ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052d0:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052d4:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80052da:	2309      	movs	r3, #9
 80052dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052de:	a903      	add	r1, sp, #12
 80052e0:	4630      	mov	r0, r6
 80052e2:	f7fc fa83 	bl	80017ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80052e6:	9502      	str	r5, [sp, #8]
 80052e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052ee:	6423      	str	r3, [r4, #64]	; 0x40
 80052f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f6:	9302      	str	r3, [sp, #8]
 80052f8:	9b02      	ldr	r3, [sp, #8]
}
 80052fa:	e7c4      	b.n	8005286 <HAL_I2C_MspInit+0x1a>
 80052fc:	40005800 	.word	0x40005800
 8005300:	40023800 	.word	0x40023800
 8005304:	40020400 	.word	0x40020400

08005308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800530a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800530c:	2300      	movs	r3, #0
 800530e:	9303      	str	r3, [sp, #12]
 8005310:	9304      	str	r3, [sp, #16]
 8005312:	9305      	str	r3, [sp, #20]
 8005314:	9306      	str	r3, [sp, #24]
 8005316:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8005318:	6802      	ldr	r2, [r0, #0]
 800531a:	4b1f      	ldr	r3, [pc, #124]	; (8005398 <HAL_SPI_MspInit+0x90>)
 800531c:	429a      	cmp	r2, r3
 800531e:	d001      	beq.n	8005324 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005320:	b009      	add	sp, #36	; 0x24
 8005322:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005324:	2400      	movs	r4, #0
 8005326:	9400      	str	r4, [sp, #0]
 8005328:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800532c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005332:	641a      	str	r2, [r3, #64]	; 0x40
 8005334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005336:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800533a:	9200      	str	r2, [sp, #0]
 800533c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800533e:	9401      	str	r4, [sp, #4]
 8005340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005342:	f042 0204 	orr.w	r2, r2, #4
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
 8005348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534a:	f002 0204 	and.w	r2, r2, #4
 800534e:	9201      	str	r2, [sp, #4]
 8005350:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005352:	9402      	str	r4, [sp, #8]
 8005354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005356:	f042 0202 	orr.w	r2, r2, #2
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	9302      	str	r3, [sp, #8]
 8005364:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005366:	2304      	movs	r3, #4
 8005368:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536a:	2702      	movs	r7, #2
 800536c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800536e:	2603      	movs	r6, #3
 8005370:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005372:	2505      	movs	r5, #5
 8005374:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005376:	a903      	add	r1, sp, #12
 8005378:	4808      	ldr	r0, [pc, #32]	; (800539c <HAL_SPI_MspInit+0x94>)
 800537a:	f7fc fa37 	bl	80017ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800537e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005382:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005384:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005386:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005388:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800538a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800538c:	a903      	add	r1, sp, #12
 800538e:	4804      	ldr	r0, [pc, #16]	; (80053a0 <HAL_SPI_MspInit+0x98>)
 8005390:	f7fc fa2c 	bl	80017ec <HAL_GPIO_Init>
}
 8005394:	e7c4      	b.n	8005320 <HAL_SPI_MspInit+0x18>
 8005396:	bf00      	nop
 8005398:	40003800 	.word	0x40003800
 800539c:	40020800 	.word	0x40020800
 80053a0:	40020400 	.word	0x40020400

080053a4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 80053a4:	6802      	ldr	r2, [r0, #0]
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <HAL_TIM_PWM_MspInit+0x28>)
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d000      	beq.n	80053ae <HAL_TIM_PWM_MspInit+0xa>
 80053ac:	4770      	bx	lr
{
 80053ae:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053b0:	2300      	movs	r3, #0
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_TIM_PWM_MspInit+0x2c>)
 80053b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b8:	f042 0204 	orr.w	r2, r2, #4
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80053c8:	b002      	add	sp, #8
 80053ca:	4770      	bx	lr
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40023800 	.word	0x40023800

080053d4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 80053d4:	6802      	ldr	r2, [r0, #0]
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_TIM_Base_MspInit+0x28>)
 80053d8:	429a      	cmp	r2, r3
 80053da:	d000      	beq.n	80053de <HAL_TIM_Base_MspInit+0xa>
 80053dc:	4770      	bx	lr
{
 80053de:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80053e0:	2300      	movs	r3, #0
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_TIM_Base_MspInit+0x2c>)
 80053e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053ec:	645a      	str	r2, [r3, #68]	; 0x44
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80053f8:	b002      	add	sp, #8
 80053fa:	4770      	bx	lr
 80053fc:	40014800 	.word	0x40014800
 8005400:	40023800 	.word	0x40023800

08005404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005404:	b500      	push	{lr}
 8005406:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005408:	2300      	movs	r3, #0
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	9302      	str	r3, [sp, #8]
 800540e:	9303      	str	r3, [sp, #12]
 8005410:	9304      	str	r3, [sp, #16]
 8005412:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8005414:	6802      	ldr	r2, [r0, #0]
 8005416:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <HAL_TIM_MspPostInit+0x4c>)
 8005418:	429a      	cmp	r2, r3
 800541a:	d002      	beq.n	8005422 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800541c:	b007      	add	sp, #28
 800541e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <HAL_TIM_MspPostInit+0x50>)
 8005428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542a:	f042 0202 	orr.w	r2, r2, #2
 800542e:	631a      	str	r2, [r3, #48]	; 0x30
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800543a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800543e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005440:	2302      	movs	r3, #2
 8005442:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005444:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005446:	a901      	add	r1, sp, #4
 8005448:	4803      	ldr	r0, [pc, #12]	; (8005458 <HAL_TIM_MspPostInit+0x54>)
 800544a:	f7fc f9cf 	bl	80017ec <HAL_GPIO_Init>
}
 800544e:	e7e5      	b.n	800541c <HAL_TIM_MspPostInit+0x18>
 8005450:	40000800 	.word	0x40000800
 8005454:	40023800 	.word	0x40023800
 8005458:	40020400 	.word	0x40020400

0800545c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800545c:	b500      	push	{lr}
 800545e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005460:	2300      	movs	r3, #0
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	9306      	str	r3, [sp, #24]
 8005466:	9307      	str	r3, [sp, #28]
 8005468:	9308      	str	r3, [sp, #32]
 800546a:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 800546c:	6803      	ldr	r3, [r0, #0]
 800546e:	4a29      	ldr	r2, [pc, #164]	; (8005514 <HAL_UART_MspInit+0xb8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d005      	beq.n	8005480 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8005474:	4a28      	ldr	r2, [pc, #160]	; (8005518 <HAL_UART_MspInit+0xbc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d027      	beq.n	80054ca <HAL_UART_MspInit+0x6e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800547a:	b00b      	add	sp, #44	; 0x2c
 800547c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8005480:	2100      	movs	r1, #0
 8005482:	9101      	str	r1, [sp, #4]
 8005484:	4b25      	ldr	r3, [pc, #148]	; (800551c <HAL_UART_MspInit+0xc0>)
 8005486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005488:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800548c:	641a      	str	r2, [r3, #64]	; 0x40
 800548e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005490:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005494:	9201      	str	r2, [sp, #4]
 8005496:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005498:	9102      	str	r1, [sp, #8]
 800549a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549c:	f042 0201 	orr.w	r2, r2, #1
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	9302      	str	r3, [sp, #8]
 80054aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80054ac:	230c      	movs	r3, #12
 80054ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b0:	2302      	movs	r3, #2
 80054b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054b4:	2301      	movs	r3, #1
 80054b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054b8:	2303      	movs	r3, #3
 80054ba:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054bc:	2307      	movs	r3, #7
 80054be:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c0:	a905      	add	r1, sp, #20
 80054c2:	4817      	ldr	r0, [pc, #92]	; (8005520 <HAL_UART_MspInit+0xc4>)
 80054c4:	f7fc f992 	bl	80017ec <HAL_GPIO_Init>
 80054c8:	e7d7      	b.n	800547a <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80054ca:	2100      	movs	r1, #0
 80054cc:	9103      	str	r1, [sp, #12]
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <HAL_UART_MspInit+0xc0>)
 80054d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054d2:	f042 0220 	orr.w	r2, r2, #32
 80054d6:	645a      	str	r2, [r3, #68]	; 0x44
 80054d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054da:	f002 0220 	and.w	r2, r2, #32
 80054de:	9203      	str	r2, [sp, #12]
 80054e0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054e2:	9104      	str	r1, [sp, #16]
 80054e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e6:	f042 0204 	orr.w	r2, r2, #4
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	9304      	str	r3, [sp, #16]
 80054f4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054f6:	23c0      	movs	r3, #192	; 0xc0
 80054f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fa:	2302      	movs	r3, #2
 80054fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054fe:	2301      	movs	r3, #1
 8005500:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005502:	2303      	movs	r3, #3
 8005504:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005506:	2308      	movs	r3, #8
 8005508:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800550a:	a905      	add	r1, sp, #20
 800550c:	4805      	ldr	r0, [pc, #20]	; (8005524 <HAL_UART_MspInit+0xc8>)
 800550e:	f7fc f96d 	bl	80017ec <HAL_GPIO_Init>
}
 8005512:	e7b2      	b.n	800547a <HAL_UART_MspInit+0x1e>
 8005514:	40004400 	.word	0x40004400
 8005518:	40011400 	.word	0x40011400
 800551c:	40023800 	.word	0x40023800
 8005520:	40020000 	.word	0x40020000
 8005524:	40020800 	.word	0x40020800

08005528 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005528:	4770      	bx	lr

0800552a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800552a:	e7fe      	b.n	800552a <HardFault_Handler>

0800552c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800552c:	e7fe      	b.n	800552c <MemManage_Handler>

0800552e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800552e:	e7fe      	b.n	800552e <BusFault_Handler>

08005530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005530:	e7fe      	b.n	8005530 <UsageFault_Handler>

08005532 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005532:	4770      	bx	lr

08005534 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005534:	4770      	bx	lr

08005536 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005536:	4770      	bx	lr

08005538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005538:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800553a:	f7fb ff2f 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800553e:	bd08      	pop	{r3, pc}

08005540 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005540:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005542:	2010      	movs	r0, #16
 8005544:	f7fc fa34 	bl	80019b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005548:	bd08      	pop	{r3, pc}

0800554a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800554a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800554c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005550:	f7fc fa2e 	bl	80019b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005554:	bd08      	pop	{r3, pc}
	...

08005558 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005558:	b508      	push	{r3, lr}
 800555a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800555c:	4a0b      	ldr	r2, [pc, #44]	; (800558c <_sbrk+0x34>)
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	b142      	cbz	r2, 8005574 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8005562:	4a0a      	ldr	r2, [pc, #40]	; (800558c <_sbrk+0x34>)
 8005564:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005566:	4403      	add	r3, r0
 8005568:	466a      	mov	r2, sp
 800556a:	4293      	cmp	r3, r2
 800556c:	d806      	bhi.n	800557c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800556e:	4a07      	ldr	r2, [pc, #28]	; (800558c <_sbrk+0x34>)
 8005570:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8005572:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8005574:	4a05      	ldr	r2, [pc, #20]	; (800558c <_sbrk+0x34>)
 8005576:	4906      	ldr	r1, [pc, #24]	; (8005590 <_sbrk+0x38>)
 8005578:	6011      	str	r1, [r2, #0]
 800557a:	e7f2      	b.n	8005562 <_sbrk+0xa>
		errno = ENOMEM;
 800557c:	f000 f85a 	bl	8005634 <__errno>
 8005580:	230c      	movs	r3, #12
 8005582:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005588:	e7f3      	b.n	8005572 <_sbrk+0x1a>
 800558a:	bf00      	nop
 800558c:	2000029c 	.word	0x2000029c
 8005590:	20000590 	.word	0x20000590

08005594 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005594:	490f      	ldr	r1, [pc, #60]	; (80055d4 <SystemInit+0x40>)
 8005596:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800559a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <SystemInit+0x44>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80055ac:	2000      	movs	r0, #0
 80055ae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80055b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80055ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80055bc:	4a07      	ldr	r2, [pc, #28]	; (80055dc <SystemInit+0x48>)
 80055be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055c6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80055c8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80055ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ce:	608b      	str	r3, [r1, #8]
#endif
}
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	e000ed00 	.word	0xe000ed00
 80055d8:	40023800 	.word	0x40023800
 80055dc:	24003010 	.word	0x24003010

080055e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80055e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005618 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80055e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80055e6:	e003      	b.n	80055f0 <LoopCopyDataInit>

080055e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80055ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80055ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80055ee:	3104      	adds	r1, #4

080055f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80055f0:	480b      	ldr	r0, [pc, #44]	; (8005620 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80055f2:	4b0c      	ldr	r3, [pc, #48]	; (8005624 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80055f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80055f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80055f8:	d3f6      	bcc.n	80055e8 <CopyDataInit>
  ldr  r2, =_sbss
 80055fa:	4a0b      	ldr	r2, [pc, #44]	; (8005628 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80055fc:	e002      	b.n	8005604 <LoopFillZerobss>

080055fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80055fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005600:	f842 3b04 	str.w	r3, [r2], #4

08005604 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005604:	4b09      	ldr	r3, [pc, #36]	; (800562c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005608:	d3f9      	bcc.n	80055fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800560a:	f7ff ffc3 	bl	8005594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800560e:	f000 f817 	bl	8005640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005612:	f7ff fc35 	bl	8004e80 <main>
  bx  lr    
 8005616:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005618:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800561c:	080073d0 	.word	0x080073d0
  ldr  r0, =_sdata
 8005620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005624:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 8005628:	20000234 	.word	0x20000234
  ldr  r3, = _ebss
 800562c:	20000590 	.word	0x20000590

08005630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005630:	e7fe      	b.n	8005630 <ADC_IRQHandler>
	...

08005634 <__errno>:
 8005634:	4b01      	ldr	r3, [pc, #4]	; (800563c <__errno+0x8>)
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000064 	.word	0x20000064

08005640 <__libc_init_array>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4e0d      	ldr	r6, [pc, #52]	; (8005678 <__libc_init_array+0x38>)
 8005644:	4c0d      	ldr	r4, [pc, #52]	; (800567c <__libc_init_array+0x3c>)
 8005646:	1ba4      	subs	r4, r4, r6
 8005648:	10a4      	asrs	r4, r4, #2
 800564a:	2500      	movs	r5, #0
 800564c:	42a5      	cmp	r5, r4
 800564e:	d109      	bne.n	8005664 <__libc_init_array+0x24>
 8005650:	4e0b      	ldr	r6, [pc, #44]	; (8005680 <__libc_init_array+0x40>)
 8005652:	4c0c      	ldr	r4, [pc, #48]	; (8005684 <__libc_init_array+0x44>)
 8005654:	f001 fd48 	bl	80070e8 <_init>
 8005658:	1ba4      	subs	r4, r4, r6
 800565a:	10a4      	asrs	r4, r4, #2
 800565c:	2500      	movs	r5, #0
 800565e:	42a5      	cmp	r5, r4
 8005660:	d105      	bne.n	800566e <__libc_init_array+0x2e>
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005668:	4798      	blx	r3
 800566a:	3501      	adds	r5, #1
 800566c:	e7ee      	b.n	800564c <__libc_init_array+0xc>
 800566e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005672:	4798      	blx	r3
 8005674:	3501      	adds	r5, #1
 8005676:	e7f2      	b.n	800565e <__libc_init_array+0x1e>
 8005678:	080073c8 	.word	0x080073c8
 800567c:	080073c8 	.word	0x080073c8
 8005680:	080073c8 	.word	0x080073c8
 8005684:	080073cc 	.word	0x080073cc

08005688 <memcpy>:
 8005688:	b510      	push	{r4, lr}
 800568a:	1e43      	subs	r3, r0, #1
 800568c:	440a      	add	r2, r1
 800568e:	4291      	cmp	r1, r2
 8005690:	d100      	bne.n	8005694 <memcpy+0xc>
 8005692:	bd10      	pop	{r4, pc}
 8005694:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800569c:	e7f7      	b.n	800568e <memcpy+0x6>

0800569e <memset>:
 800569e:	4402      	add	r2, r0
 80056a0:	4603      	mov	r3, r0
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d100      	bne.n	80056a8 <memset+0xa>
 80056a6:	4770      	bx	lr
 80056a8:	f803 1b01 	strb.w	r1, [r3], #1
 80056ac:	e7f9      	b.n	80056a2 <memset+0x4>

080056ae <__cvt>:
 80056ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b2:	ec55 4b10 	vmov	r4, r5, d0
 80056b6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80056b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056bc:	2d00      	cmp	r5, #0
 80056be:	460e      	mov	r6, r1
 80056c0:	4691      	mov	r9, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	bfb8      	it	lt
 80056c6:	4622      	movlt	r2, r4
 80056c8:	462b      	mov	r3, r5
 80056ca:	f027 0720 	bic.w	r7, r7, #32
 80056ce:	bfbb      	ittet	lt
 80056d0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056d4:	461d      	movlt	r5, r3
 80056d6:	2300      	movge	r3, #0
 80056d8:	232d      	movlt	r3, #45	; 0x2d
 80056da:	bfb8      	it	lt
 80056dc:	4614      	movlt	r4, r2
 80056de:	2f46      	cmp	r7, #70	; 0x46
 80056e0:	700b      	strb	r3, [r1, #0]
 80056e2:	d004      	beq.n	80056ee <__cvt+0x40>
 80056e4:	2f45      	cmp	r7, #69	; 0x45
 80056e6:	d100      	bne.n	80056ea <__cvt+0x3c>
 80056e8:	3601      	adds	r6, #1
 80056ea:	2102      	movs	r1, #2
 80056ec:	e000      	b.n	80056f0 <__cvt+0x42>
 80056ee:	2103      	movs	r1, #3
 80056f0:	ab03      	add	r3, sp, #12
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	ab02      	add	r3, sp, #8
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4632      	mov	r2, r6
 80056fa:	4653      	mov	r3, sl
 80056fc:	ec45 4b10 	vmov	d0, r4, r5
 8005700:	f000 fbae 	bl	8005e60 <_dtoa_r>
 8005704:	2f47      	cmp	r7, #71	; 0x47
 8005706:	4680      	mov	r8, r0
 8005708:	d102      	bne.n	8005710 <__cvt+0x62>
 800570a:	f019 0f01 	tst.w	r9, #1
 800570e:	d026      	beq.n	800575e <__cvt+0xb0>
 8005710:	2f46      	cmp	r7, #70	; 0x46
 8005712:	eb08 0906 	add.w	r9, r8, r6
 8005716:	d111      	bne.n	800573c <__cvt+0x8e>
 8005718:	f898 3000 	ldrb.w	r3, [r8]
 800571c:	2b30      	cmp	r3, #48	; 0x30
 800571e:	d10a      	bne.n	8005736 <__cvt+0x88>
 8005720:	2200      	movs	r2, #0
 8005722:	2300      	movs	r3, #0
 8005724:	4620      	mov	r0, r4
 8005726:	4629      	mov	r1, r5
 8005728:	f7fb f97a 	bl	8000a20 <__aeabi_dcmpeq>
 800572c:	b918      	cbnz	r0, 8005736 <__cvt+0x88>
 800572e:	f1c6 0601 	rsb	r6, r6, #1
 8005732:	f8ca 6000 	str.w	r6, [sl]
 8005736:	f8da 3000 	ldr.w	r3, [sl]
 800573a:	4499      	add	r9, r3
 800573c:	2200      	movs	r2, #0
 800573e:	2300      	movs	r3, #0
 8005740:	4620      	mov	r0, r4
 8005742:	4629      	mov	r1, r5
 8005744:	f7fb f96c 	bl	8000a20 <__aeabi_dcmpeq>
 8005748:	b938      	cbnz	r0, 800575a <__cvt+0xac>
 800574a:	2230      	movs	r2, #48	; 0x30
 800574c:	9b03      	ldr	r3, [sp, #12]
 800574e:	454b      	cmp	r3, r9
 8005750:	d205      	bcs.n	800575e <__cvt+0xb0>
 8005752:	1c59      	adds	r1, r3, #1
 8005754:	9103      	str	r1, [sp, #12]
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e7f8      	b.n	800574c <__cvt+0x9e>
 800575a:	f8cd 900c 	str.w	r9, [sp, #12]
 800575e:	9b03      	ldr	r3, [sp, #12]
 8005760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005762:	eba3 0308 	sub.w	r3, r3, r8
 8005766:	4640      	mov	r0, r8
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	b004      	add	sp, #16
 800576c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005770 <__exponent>:
 8005770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005772:	2900      	cmp	r1, #0
 8005774:	4604      	mov	r4, r0
 8005776:	bfba      	itte	lt
 8005778:	4249      	neglt	r1, r1
 800577a:	232d      	movlt	r3, #45	; 0x2d
 800577c:	232b      	movge	r3, #43	; 0x2b
 800577e:	2909      	cmp	r1, #9
 8005780:	f804 2b02 	strb.w	r2, [r4], #2
 8005784:	7043      	strb	r3, [r0, #1]
 8005786:	dd20      	ble.n	80057ca <__exponent+0x5a>
 8005788:	f10d 0307 	add.w	r3, sp, #7
 800578c:	461f      	mov	r7, r3
 800578e:	260a      	movs	r6, #10
 8005790:	fb91 f5f6 	sdiv	r5, r1, r6
 8005794:	fb06 1115 	mls	r1, r6, r5, r1
 8005798:	3130      	adds	r1, #48	; 0x30
 800579a:	2d09      	cmp	r5, #9
 800579c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057a0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80057a4:	4629      	mov	r1, r5
 80057a6:	dc09      	bgt.n	80057bc <__exponent+0x4c>
 80057a8:	3130      	adds	r1, #48	; 0x30
 80057aa:	3b02      	subs	r3, #2
 80057ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057b0:	42bb      	cmp	r3, r7
 80057b2:	4622      	mov	r2, r4
 80057b4:	d304      	bcc.n	80057c0 <__exponent+0x50>
 80057b6:	1a10      	subs	r0, r2, r0
 80057b8:	b003      	add	sp, #12
 80057ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057bc:	4613      	mov	r3, r2
 80057be:	e7e7      	b.n	8005790 <__exponent+0x20>
 80057c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057c4:	f804 2b01 	strb.w	r2, [r4], #1
 80057c8:	e7f2      	b.n	80057b0 <__exponent+0x40>
 80057ca:	2330      	movs	r3, #48	; 0x30
 80057cc:	4419      	add	r1, r3
 80057ce:	7083      	strb	r3, [r0, #2]
 80057d0:	1d02      	adds	r2, r0, #4
 80057d2:	70c1      	strb	r1, [r0, #3]
 80057d4:	e7ef      	b.n	80057b6 <__exponent+0x46>
	...

080057d8 <_printf_float>:
 80057d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	b08d      	sub	sp, #52	; 0x34
 80057de:	460c      	mov	r4, r1
 80057e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80057e4:	4616      	mov	r6, r2
 80057e6:	461f      	mov	r7, r3
 80057e8:	4605      	mov	r5, r0
 80057ea:	f001 f8f1 	bl	80069d0 <_localeconv_r>
 80057ee:	6803      	ldr	r3, [r0, #0]
 80057f0:	9304      	str	r3, [sp, #16]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fb fb3e 	bl	8000e74 <strlen>
 80057f8:	2300      	movs	r3, #0
 80057fa:	930a      	str	r3, [sp, #40]	; 0x28
 80057fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005800:	9005      	str	r0, [sp, #20]
 8005802:	3307      	adds	r3, #7
 8005804:	f023 0307 	bic.w	r3, r3, #7
 8005808:	f103 0208 	add.w	r2, r3, #8
 800580c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005810:	f8d4 b000 	ldr.w	fp, [r4]
 8005814:	f8c8 2000 	str.w	r2, [r8]
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005820:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005824:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005828:	9307      	str	r3, [sp, #28]
 800582a:	f8cd 8018 	str.w	r8, [sp, #24]
 800582e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005832:	4ba7      	ldr	r3, [pc, #668]	; (8005ad0 <_printf_float+0x2f8>)
 8005834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005838:	f7fb fb24 	bl	8000e84 <__aeabi_dcmpun>
 800583c:	bb70      	cbnz	r0, 800589c <_printf_float+0xc4>
 800583e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005842:	4ba3      	ldr	r3, [pc, #652]	; (8005ad0 <_printf_float+0x2f8>)
 8005844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005848:	f7fb f8fe 	bl	8000a48 <__aeabi_dcmple>
 800584c:	bb30      	cbnz	r0, 800589c <_printf_float+0xc4>
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	4640      	mov	r0, r8
 8005854:	4649      	mov	r1, r9
 8005856:	f7fb f8ed 	bl	8000a34 <__aeabi_dcmplt>
 800585a:	b110      	cbz	r0, 8005862 <_printf_float+0x8a>
 800585c:	232d      	movs	r3, #45	; 0x2d
 800585e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005862:	4a9c      	ldr	r2, [pc, #624]	; (8005ad4 <_printf_float+0x2fc>)
 8005864:	4b9c      	ldr	r3, [pc, #624]	; (8005ad8 <_printf_float+0x300>)
 8005866:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800586a:	bf8c      	ite	hi
 800586c:	4690      	movhi	r8, r2
 800586e:	4698      	movls	r8, r3
 8005870:	2303      	movs	r3, #3
 8005872:	f02b 0204 	bic.w	r2, fp, #4
 8005876:	6123      	str	r3, [r4, #16]
 8005878:	6022      	str	r2, [r4, #0]
 800587a:	f04f 0900 	mov.w	r9, #0
 800587e:	9700      	str	r7, [sp, #0]
 8005880:	4633      	mov	r3, r6
 8005882:	aa0b      	add	r2, sp, #44	; 0x2c
 8005884:	4621      	mov	r1, r4
 8005886:	4628      	mov	r0, r5
 8005888:	f000 f9e6 	bl	8005c58 <_printf_common>
 800588c:	3001      	adds	r0, #1
 800588e:	f040 808d 	bne.w	80059ac <_printf_float+0x1d4>
 8005892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005896:	b00d      	add	sp, #52	; 0x34
 8005898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	f7fb faee 	bl	8000e84 <__aeabi_dcmpun>
 80058a8:	b110      	cbz	r0, 80058b0 <_printf_float+0xd8>
 80058aa:	4a8c      	ldr	r2, [pc, #560]	; (8005adc <_printf_float+0x304>)
 80058ac:	4b8c      	ldr	r3, [pc, #560]	; (8005ae0 <_printf_float+0x308>)
 80058ae:	e7da      	b.n	8005866 <_printf_float+0x8e>
 80058b0:	6861      	ldr	r1, [r4, #4]
 80058b2:	1c4b      	adds	r3, r1, #1
 80058b4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80058b8:	a80a      	add	r0, sp, #40	; 0x28
 80058ba:	d13e      	bne.n	800593a <_printf_float+0x162>
 80058bc:	2306      	movs	r3, #6
 80058be:	6063      	str	r3, [r4, #4]
 80058c0:	2300      	movs	r3, #0
 80058c2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80058c6:	ab09      	add	r3, sp, #36	; 0x24
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	ec49 8b10 	vmov	d0, r8, r9
 80058ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058d2:	6022      	str	r2, [r4, #0]
 80058d4:	f8cd a004 	str.w	sl, [sp, #4]
 80058d8:	6861      	ldr	r1, [r4, #4]
 80058da:	4628      	mov	r0, r5
 80058dc:	f7ff fee7 	bl	80056ae <__cvt>
 80058e0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80058e4:	2b47      	cmp	r3, #71	; 0x47
 80058e6:	4680      	mov	r8, r0
 80058e8:	d109      	bne.n	80058fe <_printf_float+0x126>
 80058ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ec:	1cd8      	adds	r0, r3, #3
 80058ee:	db02      	blt.n	80058f6 <_printf_float+0x11e>
 80058f0:	6862      	ldr	r2, [r4, #4]
 80058f2:	4293      	cmp	r3, r2
 80058f4:	dd47      	ble.n	8005986 <_printf_float+0x1ae>
 80058f6:	f1aa 0a02 	sub.w	sl, sl, #2
 80058fa:	fa5f fa8a 	uxtb.w	sl, sl
 80058fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005902:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005904:	d824      	bhi.n	8005950 <_printf_float+0x178>
 8005906:	3901      	subs	r1, #1
 8005908:	4652      	mov	r2, sl
 800590a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800590e:	9109      	str	r1, [sp, #36]	; 0x24
 8005910:	f7ff ff2e 	bl	8005770 <__exponent>
 8005914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005916:	1813      	adds	r3, r2, r0
 8005918:	2a01      	cmp	r2, #1
 800591a:	4681      	mov	r9, r0
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	dc02      	bgt.n	8005926 <_printf_float+0x14e>
 8005920:	6822      	ldr	r2, [r4, #0]
 8005922:	07d1      	lsls	r1, r2, #31
 8005924:	d501      	bpl.n	800592a <_printf_float+0x152>
 8005926:	3301      	adds	r3, #1
 8005928:	6123      	str	r3, [r4, #16]
 800592a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0a5      	beq.n	800587e <_printf_float+0xa6>
 8005932:	232d      	movs	r3, #45	; 0x2d
 8005934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005938:	e7a1      	b.n	800587e <_printf_float+0xa6>
 800593a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800593e:	f000 8177 	beq.w	8005c30 <_printf_float+0x458>
 8005942:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005946:	d1bb      	bne.n	80058c0 <_printf_float+0xe8>
 8005948:	2900      	cmp	r1, #0
 800594a:	d1b9      	bne.n	80058c0 <_printf_float+0xe8>
 800594c:	2301      	movs	r3, #1
 800594e:	e7b6      	b.n	80058be <_printf_float+0xe6>
 8005950:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005954:	d119      	bne.n	800598a <_printf_float+0x1b2>
 8005956:	2900      	cmp	r1, #0
 8005958:	6863      	ldr	r3, [r4, #4]
 800595a:	dd0c      	ble.n	8005976 <_printf_float+0x19e>
 800595c:	6121      	str	r1, [r4, #16]
 800595e:	b913      	cbnz	r3, 8005966 <_printf_float+0x18e>
 8005960:	6822      	ldr	r2, [r4, #0]
 8005962:	07d2      	lsls	r2, r2, #31
 8005964:	d502      	bpl.n	800596c <_printf_float+0x194>
 8005966:	3301      	adds	r3, #1
 8005968:	440b      	add	r3, r1
 800596a:	6123      	str	r3, [r4, #16]
 800596c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800596e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005970:	f04f 0900 	mov.w	r9, #0
 8005974:	e7d9      	b.n	800592a <_printf_float+0x152>
 8005976:	b913      	cbnz	r3, 800597e <_printf_float+0x1a6>
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	07d0      	lsls	r0, r2, #31
 800597c:	d501      	bpl.n	8005982 <_printf_float+0x1aa>
 800597e:	3302      	adds	r3, #2
 8005980:	e7f3      	b.n	800596a <_printf_float+0x192>
 8005982:	2301      	movs	r3, #1
 8005984:	e7f1      	b.n	800596a <_printf_float+0x192>
 8005986:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800598a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800598e:	4293      	cmp	r3, r2
 8005990:	db05      	blt.n	800599e <_printf_float+0x1c6>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	07d1      	lsls	r1, r2, #31
 8005998:	d5e8      	bpl.n	800596c <_printf_float+0x194>
 800599a:	3301      	adds	r3, #1
 800599c:	e7e5      	b.n	800596a <_printf_float+0x192>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfd4      	ite	le
 80059a2:	f1c3 0302 	rsble	r3, r3, #2
 80059a6:	2301      	movgt	r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	e7de      	b.n	800596a <_printf_float+0x192>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	055a      	lsls	r2, r3, #21
 80059b0:	d407      	bmi.n	80059c2 <_printf_float+0x1ea>
 80059b2:	6923      	ldr	r3, [r4, #16]
 80059b4:	4642      	mov	r2, r8
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	d12b      	bne.n	8005a18 <_printf_float+0x240>
 80059c0:	e767      	b.n	8005892 <_printf_float+0xba>
 80059c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80059c6:	f240 80dc 	bls.w	8005b82 <_printf_float+0x3aa>
 80059ca:	2200      	movs	r2, #0
 80059cc:	2300      	movs	r3, #0
 80059ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059d2:	f7fb f825 	bl	8000a20 <__aeabi_dcmpeq>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d033      	beq.n	8005a42 <_printf_float+0x26a>
 80059da:	2301      	movs	r3, #1
 80059dc:	4a41      	ldr	r2, [pc, #260]	; (8005ae4 <_printf_float+0x30c>)
 80059de:	4631      	mov	r1, r6
 80059e0:	4628      	mov	r0, r5
 80059e2:	47b8      	blx	r7
 80059e4:	3001      	adds	r0, #1
 80059e6:	f43f af54 	beq.w	8005892 <_printf_float+0xba>
 80059ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059ee:	429a      	cmp	r2, r3
 80059f0:	db02      	blt.n	80059f8 <_printf_float+0x220>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	07d8      	lsls	r0, r3, #31
 80059f6:	d50f      	bpl.n	8005a18 <_printf_float+0x240>
 80059f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f af45 	beq.w	8005892 <_printf_float+0xba>
 8005a08:	f04f 0800 	mov.w	r8, #0
 8005a0c:	f104 091a 	add.w	r9, r4, #26
 8005a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a12:	3b01      	subs	r3, #1
 8005a14:	4543      	cmp	r3, r8
 8005a16:	dc09      	bgt.n	8005a2c <_printf_float+0x254>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	079b      	lsls	r3, r3, #30
 8005a1c:	f100 8103 	bmi.w	8005c26 <_printf_float+0x44e>
 8005a20:	68e0      	ldr	r0, [r4, #12]
 8005a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a24:	4298      	cmp	r0, r3
 8005a26:	bfb8      	it	lt
 8005a28:	4618      	movlt	r0, r3
 8005a2a:	e734      	b.n	8005896 <_printf_float+0xbe>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	464a      	mov	r2, r9
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af2b 	beq.w	8005892 <_printf_float+0xba>
 8005a3c:	f108 0801 	add.w	r8, r8, #1
 8005a40:	e7e6      	b.n	8005a10 <_printf_float+0x238>
 8005a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dc2b      	bgt.n	8005aa0 <_printf_float+0x2c8>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <_printf_float+0x30c>)
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f af1d 	beq.w	8005892 <_printf_float+0xba>
 8005a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5a:	b923      	cbnz	r3, 8005a66 <_printf_float+0x28e>
 8005a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5e:	b913      	cbnz	r3, 8005a66 <_printf_float+0x28e>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d5d8      	bpl.n	8005a18 <_printf_float+0x240>
 8005a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	f43f af0e 	beq.w	8005892 <_printf_float+0xba>
 8005a76:	f04f 0900 	mov.w	r9, #0
 8005a7a:	f104 0a1a 	add.w	sl, r4, #26
 8005a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a80:	425b      	negs	r3, r3
 8005a82:	454b      	cmp	r3, r9
 8005a84:	dc01      	bgt.n	8005a8a <_printf_float+0x2b2>
 8005a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a88:	e794      	b.n	80059b4 <_printf_float+0x1dc>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	4631      	mov	r1, r6
 8005a90:	4628      	mov	r0, r5
 8005a92:	47b8      	blx	r7
 8005a94:	3001      	adds	r0, #1
 8005a96:	f43f aefc 	beq.w	8005892 <_printf_float+0xba>
 8005a9a:	f109 0901 	add.w	r9, r9, #1
 8005a9e:	e7ee      	b.n	8005a7e <_printf_float+0x2a6>
 8005aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	bfa8      	it	ge
 8005aa8:	461a      	movge	r2, r3
 8005aaa:	2a00      	cmp	r2, #0
 8005aac:	4691      	mov	r9, r2
 8005aae:	dd07      	ble.n	8005ac0 <_printf_float+0x2e8>
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	f43f aee9 	beq.w	8005892 <_printf_float+0xba>
 8005ac0:	f104 031a 	add.w	r3, r4, #26
 8005ac4:	f04f 0b00 	mov.w	fp, #0
 8005ac8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005acc:	9306      	str	r3, [sp, #24]
 8005ace:	e015      	b.n	8005afc <_printf_float+0x324>
 8005ad0:	7fefffff 	.word	0x7fefffff
 8005ad4:	0800719c 	.word	0x0800719c
 8005ad8:	08007198 	.word	0x08007198
 8005adc:	080071a4 	.word	0x080071a4
 8005ae0:	080071a0 	.word	0x080071a0
 8005ae4:	080071a8 	.word	0x080071a8
 8005ae8:	2301      	movs	r3, #1
 8005aea:	9a06      	ldr	r2, [sp, #24]
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f aecd 	beq.w	8005892 <_printf_float+0xba>
 8005af8:	f10b 0b01 	add.w	fp, fp, #1
 8005afc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b00:	ebaa 0309 	sub.w	r3, sl, r9
 8005b04:	455b      	cmp	r3, fp
 8005b06:	dcef      	bgt.n	8005ae8 <_printf_float+0x310>
 8005b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	44d0      	add	r8, sl
 8005b10:	db15      	blt.n	8005b3e <_printf_float+0x366>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	07da      	lsls	r2, r3, #31
 8005b16:	d412      	bmi.n	8005b3e <_printf_float+0x366>
 8005b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b1c:	eba3 020a 	sub.w	r2, r3, sl
 8005b20:	eba3 0a01 	sub.w	sl, r3, r1
 8005b24:	4592      	cmp	sl, r2
 8005b26:	bfa8      	it	ge
 8005b28:	4692      	movge	sl, r2
 8005b2a:	f1ba 0f00 	cmp.w	sl, #0
 8005b2e:	dc0e      	bgt.n	8005b4e <_printf_float+0x376>
 8005b30:	f04f 0800 	mov.w	r8, #0
 8005b34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b38:	f104 091a 	add.w	r9, r4, #26
 8005b3c:	e019      	b.n	8005b72 <_printf_float+0x39a>
 8005b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d1e5      	bne.n	8005b18 <_printf_float+0x340>
 8005b4c:	e6a1      	b.n	8005892 <_printf_float+0xba>
 8005b4e:	4653      	mov	r3, sl
 8005b50:	4642      	mov	r2, r8
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d1e9      	bne.n	8005b30 <_printf_float+0x358>
 8005b5c:	e699      	b.n	8005892 <_printf_float+0xba>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	464a      	mov	r2, r9
 8005b62:	4631      	mov	r1, r6
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b8      	blx	r7
 8005b68:	3001      	adds	r0, #1
 8005b6a:	f43f ae92 	beq.w	8005892 <_printf_float+0xba>
 8005b6e:	f108 0801 	add.w	r8, r8, #1
 8005b72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	eba3 030a 	sub.w	r3, r3, sl
 8005b7c:	4543      	cmp	r3, r8
 8005b7e:	dcee      	bgt.n	8005b5e <_printf_float+0x386>
 8005b80:	e74a      	b.n	8005a18 <_printf_float+0x240>
 8005b82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b84:	2a01      	cmp	r2, #1
 8005b86:	dc01      	bgt.n	8005b8c <_printf_float+0x3b4>
 8005b88:	07db      	lsls	r3, r3, #31
 8005b8a:	d53a      	bpl.n	8005c02 <_printf_float+0x42a>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4642      	mov	r2, r8
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	f43f ae7b 	beq.w	8005892 <_printf_float+0xba>
 8005b9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f108 0801 	add.w	r8, r8, #1
 8005bac:	f43f ae71 	beq.w	8005892 <_printf_float+0xba>
 8005bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005bb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f7fa ff2f 	bl	8000a20 <__aeabi_dcmpeq>
 8005bc2:	b9c8      	cbnz	r0, 8005bf8 <_printf_float+0x420>
 8005bc4:	4653      	mov	r3, sl
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d10e      	bne.n	8005bf0 <_printf_float+0x418>
 8005bd2:	e65e      	b.n	8005892 <_printf_float+0xba>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	4652      	mov	r2, sl
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	f43f ae57 	beq.w	8005892 <_printf_float+0xba>
 8005be4:	f108 0801 	add.w	r8, r8, #1
 8005be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bea:	3b01      	subs	r3, #1
 8005bec:	4543      	cmp	r3, r8
 8005bee:	dcf1      	bgt.n	8005bd4 <_printf_float+0x3fc>
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bf6:	e6de      	b.n	80059b6 <_printf_float+0x1de>
 8005bf8:	f04f 0800 	mov.w	r8, #0
 8005bfc:	f104 0a1a 	add.w	sl, r4, #26
 8005c00:	e7f2      	b.n	8005be8 <_printf_float+0x410>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e7df      	b.n	8005bc6 <_printf_float+0x3ee>
 8005c06:	2301      	movs	r3, #1
 8005c08:	464a      	mov	r2, r9
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f ae3e 	beq.w	8005892 <_printf_float+0xba>
 8005c16:	f108 0801 	add.w	r8, r8, #1
 8005c1a:	68e3      	ldr	r3, [r4, #12]
 8005c1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c1e:	1a9b      	subs	r3, r3, r2
 8005c20:	4543      	cmp	r3, r8
 8005c22:	dcf0      	bgt.n	8005c06 <_printf_float+0x42e>
 8005c24:	e6fc      	b.n	8005a20 <_printf_float+0x248>
 8005c26:	f04f 0800 	mov.w	r8, #0
 8005c2a:	f104 0919 	add.w	r9, r4, #25
 8005c2e:	e7f4      	b.n	8005c1a <_printf_float+0x442>
 8005c30:	2900      	cmp	r1, #0
 8005c32:	f43f ae8b 	beq.w	800594c <_printf_float+0x174>
 8005c36:	2300      	movs	r3, #0
 8005c38:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005c3c:	ab09      	add	r3, sp, #36	; 0x24
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	ec49 8b10 	vmov	d0, r8, r9
 8005c44:	6022      	str	r2, [r4, #0]
 8005c46:	f8cd a004 	str.w	sl, [sp, #4]
 8005c4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f7ff fd2d 	bl	80056ae <__cvt>
 8005c54:	4680      	mov	r8, r0
 8005c56:	e648      	b.n	80058ea <_printf_float+0x112>

08005c58 <_printf_common>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	4691      	mov	r9, r2
 8005c5e:	461f      	mov	r7, r3
 8005c60:	688a      	ldr	r2, [r1, #8]
 8005c62:	690b      	ldr	r3, [r1, #16]
 8005c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	bfb8      	it	lt
 8005c6c:	4613      	movlt	r3, r2
 8005c6e:	f8c9 3000 	str.w	r3, [r9]
 8005c72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c76:	4606      	mov	r6, r0
 8005c78:	460c      	mov	r4, r1
 8005c7a:	b112      	cbz	r2, 8005c82 <_printf_common+0x2a>
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	f8c9 3000 	str.w	r3, [r9]
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	0699      	lsls	r1, r3, #26
 8005c86:	bf42      	ittt	mi
 8005c88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c8c:	3302      	addmi	r3, #2
 8005c8e:	f8c9 3000 	strmi.w	r3, [r9]
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	f015 0506 	ands.w	r5, r5, #6
 8005c98:	d107      	bne.n	8005caa <_printf_common+0x52>
 8005c9a:	f104 0a19 	add.w	sl, r4, #25
 8005c9e:	68e3      	ldr	r3, [r4, #12]
 8005ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	42ab      	cmp	r3, r5
 8005ca8:	dc28      	bgt.n	8005cfc <_printf_common+0xa4>
 8005caa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	3300      	adds	r3, #0
 8005cb2:	bf18      	it	ne
 8005cb4:	2301      	movne	r3, #1
 8005cb6:	0692      	lsls	r2, r2, #26
 8005cb8:	d42d      	bmi.n	8005d16 <_printf_common+0xbe>
 8005cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	47c0      	blx	r8
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d020      	beq.n	8005d0a <_printf_common+0xb2>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	68e5      	ldr	r5, [r4, #12]
 8005ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8005cd0:	f003 0306 	and.w	r3, r3, #6
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	bf08      	it	eq
 8005cd8:	1aad      	subeq	r5, r5, r2
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	6922      	ldr	r2, [r4, #16]
 8005cde:	bf0c      	ite	eq
 8005ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce4:	2500      	movne	r5, #0
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	bfc4      	itt	gt
 8005cea:	1a9b      	subgt	r3, r3, r2
 8005cec:	18ed      	addgt	r5, r5, r3
 8005cee:	f04f 0900 	mov.w	r9, #0
 8005cf2:	341a      	adds	r4, #26
 8005cf4:	454d      	cmp	r5, r9
 8005cf6:	d11a      	bne.n	8005d2e <_printf_common+0xd6>
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e008      	b.n	8005d0e <_printf_common+0xb6>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	4652      	mov	r2, sl
 8005d00:	4639      	mov	r1, r7
 8005d02:	4630      	mov	r0, r6
 8005d04:	47c0      	blx	r8
 8005d06:	3001      	adds	r0, #1
 8005d08:	d103      	bne.n	8005d12 <_printf_common+0xba>
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d12:	3501      	adds	r5, #1
 8005d14:	e7c3      	b.n	8005c9e <_printf_common+0x46>
 8005d16:	18e1      	adds	r1, r4, r3
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	2030      	movs	r0, #48	; 0x30
 8005d1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d20:	4422      	add	r2, r4
 8005d22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	e7c5      	b.n	8005cba <_printf_common+0x62>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4622      	mov	r2, r4
 8005d32:	4639      	mov	r1, r7
 8005d34:	4630      	mov	r0, r6
 8005d36:	47c0      	blx	r8
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d0e6      	beq.n	8005d0a <_printf_common+0xb2>
 8005d3c:	f109 0901 	add.w	r9, r9, #1
 8005d40:	e7d8      	b.n	8005cf4 <_printf_common+0x9c>

08005d42 <quorem>:
 8005d42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d46:	6903      	ldr	r3, [r0, #16]
 8005d48:	690c      	ldr	r4, [r1, #16]
 8005d4a:	42a3      	cmp	r3, r4
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	f2c0 8082 	blt.w	8005e56 <quorem+0x114>
 8005d52:	3c01      	subs	r4, #1
 8005d54:	f101 0714 	add.w	r7, r1, #20
 8005d58:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005d5c:	f100 0614 	add.w	r6, r0, #20
 8005d60:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005d64:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005d68:	eb06 030c 	add.w	r3, r6, ip
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	eb07 090c 	add.w	r9, r7, ip
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d78:	b395      	cbz	r5, 8005de0 <quorem+0x9e>
 8005d7a:	f04f 0a00 	mov.w	sl, #0
 8005d7e:	4638      	mov	r0, r7
 8005d80:	46b6      	mov	lr, r6
 8005d82:	46d3      	mov	fp, sl
 8005d84:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d88:	b293      	uxth	r3, r2
 8005d8a:	fb05 a303 	mla	r3, r5, r3, sl
 8005d8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	ebab 0303 	sub.w	r3, fp, r3
 8005d98:	0c12      	lsrs	r2, r2, #16
 8005d9a:	f8de b000 	ldr.w	fp, [lr]
 8005d9e:	fb05 a202 	mla	r2, r5, r2, sl
 8005da2:	fa13 f38b 	uxtah	r3, r3, fp
 8005da6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005daa:	fa1f fb82 	uxth.w	fp, r2
 8005dae:	f8de 2000 	ldr.w	r2, [lr]
 8005db2:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005db6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dc0:	4581      	cmp	r9, r0
 8005dc2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005dc6:	f84e 3b04 	str.w	r3, [lr], #4
 8005dca:	d2db      	bcs.n	8005d84 <quorem+0x42>
 8005dcc:	f856 300c 	ldr.w	r3, [r6, ip]
 8005dd0:	b933      	cbnz	r3, 8005de0 <quorem+0x9e>
 8005dd2:	9b01      	ldr	r3, [sp, #4]
 8005dd4:	3b04      	subs	r3, #4
 8005dd6:	429e      	cmp	r6, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	d330      	bcc.n	8005e3e <quorem+0xfc>
 8005ddc:	f8c8 4010 	str.w	r4, [r8, #16]
 8005de0:	4640      	mov	r0, r8
 8005de2:	f001 f821 	bl	8006e28 <__mcmp>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	db25      	blt.n	8005e36 <quorem+0xf4>
 8005dea:	3501      	adds	r5, #1
 8005dec:	4630      	mov	r0, r6
 8005dee:	f04f 0c00 	mov.w	ip, #0
 8005df2:	f857 2b04 	ldr.w	r2, [r7], #4
 8005df6:	f8d0 e000 	ldr.w	lr, [r0]
 8005dfa:	b293      	uxth	r3, r2
 8005dfc:	ebac 0303 	sub.w	r3, ip, r3
 8005e00:	0c12      	lsrs	r2, r2, #16
 8005e02:	fa13 f38e 	uxtah	r3, r3, lr
 8005e06:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e14:	45b9      	cmp	r9, r7
 8005e16:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e1a:	f840 3b04 	str.w	r3, [r0], #4
 8005e1e:	d2e8      	bcs.n	8005df2 <quorem+0xb0>
 8005e20:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005e24:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005e28:	b92a      	cbnz	r2, 8005e36 <quorem+0xf4>
 8005e2a:	3b04      	subs	r3, #4
 8005e2c:	429e      	cmp	r6, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	d30b      	bcc.n	8005e4a <quorem+0x108>
 8005e32:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e36:	4628      	mov	r0, r5
 8005e38:	b003      	add	sp, #12
 8005e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	3b04      	subs	r3, #4
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	d1ca      	bne.n	8005ddc <quorem+0x9a>
 8005e46:	3c01      	subs	r4, #1
 8005e48:	e7c5      	b.n	8005dd6 <quorem+0x94>
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	3b04      	subs	r3, #4
 8005e4e:	2a00      	cmp	r2, #0
 8005e50:	d1ef      	bne.n	8005e32 <quorem+0xf0>
 8005e52:	3c01      	subs	r4, #1
 8005e54:	e7ea      	b.n	8005e2c <quorem+0xea>
 8005e56:	2000      	movs	r0, #0
 8005e58:	e7ee      	b.n	8005e38 <quorem+0xf6>
 8005e5a:	0000      	movs	r0, r0
 8005e5c:	0000      	movs	r0, r0
	...

08005e60 <_dtoa_r>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	ec57 6b10 	vmov	r6, r7, d0
 8005e68:	b097      	sub	sp, #92	; 0x5c
 8005e6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e6c:	9106      	str	r1, [sp, #24]
 8005e6e:	4604      	mov	r4, r0
 8005e70:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e72:	9312      	str	r3, [sp, #72]	; 0x48
 8005e74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e78:	e9cd 6700 	strd	r6, r7, [sp]
 8005e7c:	b93d      	cbnz	r5, 8005e8e <_dtoa_r+0x2e>
 8005e7e:	2010      	movs	r0, #16
 8005e80:	f000 fdb4 	bl	80069ec <malloc>
 8005e84:	6260      	str	r0, [r4, #36]	; 0x24
 8005e86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e8a:	6005      	str	r5, [r0, #0]
 8005e8c:	60c5      	str	r5, [r0, #12]
 8005e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e90:	6819      	ldr	r1, [r3, #0]
 8005e92:	b151      	cbz	r1, 8005eaa <_dtoa_r+0x4a>
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	604a      	str	r2, [r1, #4]
 8005e98:	2301      	movs	r3, #1
 8005e9a:	4093      	lsls	r3, r2
 8005e9c:	608b      	str	r3, [r1, #8]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 fde0 	bl	8006a64 <_Bfree>
 8005ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	1e3b      	subs	r3, r7, #0
 8005eac:	bfbb      	ittet	lt
 8005eae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	9301      	strlt	r3, [sp, #4]
 8005eb4:	2300      	movge	r3, #0
 8005eb6:	2201      	movlt	r2, #1
 8005eb8:	bfac      	ite	ge
 8005eba:	f8c8 3000 	strge.w	r3, [r8]
 8005ebe:	f8c8 2000 	strlt.w	r2, [r8]
 8005ec2:	4baf      	ldr	r3, [pc, #700]	; (8006180 <_dtoa_r+0x320>)
 8005ec4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005ec8:	ea33 0308 	bics.w	r3, r3, r8
 8005ecc:	d114      	bne.n	8005ef8 <_dtoa_r+0x98>
 8005ece:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ed0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	b923      	cbnz	r3, 8005ee4 <_dtoa_r+0x84>
 8005eda:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f000 8542 	beq.w	8006968 <_dtoa_r+0xb08>
 8005ee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006194 <_dtoa_r+0x334>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8544 	beq.w	8006978 <_dtoa_r+0xb18>
 8005ef0:	f10b 0303 	add.w	r3, fp, #3
 8005ef4:	f000 bd3e 	b.w	8006974 <_dtoa_r+0xb14>
 8005ef8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2300      	movs	r3, #0
 8005f00:	4630      	mov	r0, r6
 8005f02:	4639      	mov	r1, r7
 8005f04:	f7fa fd8c 	bl	8000a20 <__aeabi_dcmpeq>
 8005f08:	4681      	mov	r9, r0
 8005f0a:	b168      	cbz	r0, 8005f28 <_dtoa_r+0xc8>
 8005f0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f0e:	2301      	movs	r3, #1
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8524 	beq.w	8006962 <_dtoa_r+0xb02>
 8005f1a:	4b9a      	ldr	r3, [pc, #616]	; (8006184 <_dtoa_r+0x324>)
 8005f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f1e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	f000 bd28 	b.w	8006978 <_dtoa_r+0xb18>
 8005f28:	aa14      	add	r2, sp, #80	; 0x50
 8005f2a:	a915      	add	r1, sp, #84	; 0x54
 8005f2c:	ec47 6b10 	vmov	d0, r6, r7
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fff0 	bl	8006f16 <__d2b>
 8005f36:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005f3a:	9004      	str	r0, [sp, #16]
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	d07c      	beq.n	800603a <_dtoa_r+0x1da>
 8005f40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f44:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005f48:	46b2      	mov	sl, r6
 8005f4a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005f4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f52:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005f56:	2200      	movs	r2, #0
 8005f58:	4b8b      	ldr	r3, [pc, #556]	; (8006188 <_dtoa_r+0x328>)
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	4659      	mov	r1, fp
 8005f5e:	f7fa f93f 	bl	80001e0 <__aeabi_dsub>
 8005f62:	a381      	add	r3, pc, #516	; (adr r3, 8006168 <_dtoa_r+0x308>)
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f7fa faf2 	bl	8000550 <__aeabi_dmul>
 8005f6c:	a380      	add	r3, pc, #512	; (adr r3, 8006170 <_dtoa_r+0x310>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa f937 	bl	80001e4 <__adddf3>
 8005f76:	4606      	mov	r6, r0
 8005f78:	4628      	mov	r0, r5
 8005f7a:	460f      	mov	r7, r1
 8005f7c:	f7fa fa7e 	bl	800047c <__aeabi_i2d>
 8005f80:	a37d      	add	r3, pc, #500	; (adr r3, 8006178 <_dtoa_r+0x318>)
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f7fa fae3 	bl	8000550 <__aeabi_dmul>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4630      	mov	r0, r6
 8005f90:	4639      	mov	r1, r7
 8005f92:	f7fa f927 	bl	80001e4 <__adddf3>
 8005f96:	4606      	mov	r6, r0
 8005f98:	460f      	mov	r7, r1
 8005f9a:	f7fa fd73 	bl	8000a84 <__aeabi_d2iz>
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	4682      	mov	sl, r0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	f7fa fd44 	bl	8000a34 <__aeabi_dcmplt>
 8005fac:	b148      	cbz	r0, 8005fc2 <_dtoa_r+0x162>
 8005fae:	4650      	mov	r0, sl
 8005fb0:	f7fa fa64 	bl	800047c <__aeabi_i2d>
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	f7fa fd32 	bl	8000a20 <__aeabi_dcmpeq>
 8005fbc:	b908      	cbnz	r0, 8005fc2 <_dtoa_r+0x162>
 8005fbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005fc2:	f1ba 0f16 	cmp.w	sl, #22
 8005fc6:	d859      	bhi.n	800607c <_dtoa_r+0x21c>
 8005fc8:	4970      	ldr	r1, [pc, #448]	; (800618c <_dtoa_r+0x32c>)
 8005fca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005fce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fd6:	f7fa fd4b 	bl	8000a70 <__aeabi_dcmpgt>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d050      	beq.n	8006080 <_dtoa_r+0x220>
 8005fde:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fe8:	1b5d      	subs	r5, r3, r5
 8005fea:	f1b5 0801 	subs.w	r8, r5, #1
 8005fee:	bf49      	itett	mi
 8005ff0:	f1c5 0301 	rsbmi	r3, r5, #1
 8005ff4:	2300      	movpl	r3, #0
 8005ff6:	9305      	strmi	r3, [sp, #20]
 8005ff8:	f04f 0800 	movmi.w	r8, #0
 8005ffc:	bf58      	it	pl
 8005ffe:	9305      	strpl	r3, [sp, #20]
 8006000:	f1ba 0f00 	cmp.w	sl, #0
 8006004:	db3e      	blt.n	8006084 <_dtoa_r+0x224>
 8006006:	2300      	movs	r3, #0
 8006008:	44d0      	add	r8, sl
 800600a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800600e:	9307      	str	r3, [sp, #28]
 8006010:	9b06      	ldr	r3, [sp, #24]
 8006012:	2b09      	cmp	r3, #9
 8006014:	f200 8090 	bhi.w	8006138 <_dtoa_r+0x2d8>
 8006018:	2b05      	cmp	r3, #5
 800601a:	bfc4      	itt	gt
 800601c:	3b04      	subgt	r3, #4
 800601e:	9306      	strgt	r3, [sp, #24]
 8006020:	9b06      	ldr	r3, [sp, #24]
 8006022:	f1a3 0302 	sub.w	r3, r3, #2
 8006026:	bfcc      	ite	gt
 8006028:	2500      	movgt	r5, #0
 800602a:	2501      	movle	r5, #1
 800602c:	2b03      	cmp	r3, #3
 800602e:	f200 808f 	bhi.w	8006150 <_dtoa_r+0x2f0>
 8006032:	e8df f003 	tbb	[pc, r3]
 8006036:	7f7d      	.short	0x7f7d
 8006038:	7131      	.short	0x7131
 800603a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800603e:	441d      	add	r5, r3
 8006040:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006044:	2820      	cmp	r0, #32
 8006046:	dd13      	ble.n	8006070 <_dtoa_r+0x210>
 8006048:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800604c:	9b00      	ldr	r3, [sp, #0]
 800604e:	fa08 f800 	lsl.w	r8, r8, r0
 8006052:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006056:	fa23 f000 	lsr.w	r0, r3, r0
 800605a:	ea48 0000 	orr.w	r0, r8, r0
 800605e:	f7fa f9fd 	bl	800045c <__aeabi_ui2d>
 8006062:	2301      	movs	r3, #1
 8006064:	4682      	mov	sl, r0
 8006066:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800606a:	3d01      	subs	r5, #1
 800606c:	9313      	str	r3, [sp, #76]	; 0x4c
 800606e:	e772      	b.n	8005f56 <_dtoa_r+0xf6>
 8006070:	9b00      	ldr	r3, [sp, #0]
 8006072:	f1c0 0020 	rsb	r0, r0, #32
 8006076:	fa03 f000 	lsl.w	r0, r3, r0
 800607a:	e7f0      	b.n	800605e <_dtoa_r+0x1fe>
 800607c:	2301      	movs	r3, #1
 800607e:	e7b1      	b.n	8005fe4 <_dtoa_r+0x184>
 8006080:	900f      	str	r0, [sp, #60]	; 0x3c
 8006082:	e7b0      	b.n	8005fe6 <_dtoa_r+0x186>
 8006084:	9b05      	ldr	r3, [sp, #20]
 8006086:	eba3 030a 	sub.w	r3, r3, sl
 800608a:	9305      	str	r3, [sp, #20]
 800608c:	f1ca 0300 	rsb	r3, sl, #0
 8006090:	9307      	str	r3, [sp, #28]
 8006092:	2300      	movs	r3, #0
 8006094:	930e      	str	r3, [sp, #56]	; 0x38
 8006096:	e7bb      	b.n	8006010 <_dtoa_r+0x1b0>
 8006098:	2301      	movs	r3, #1
 800609a:	930a      	str	r3, [sp, #40]	; 0x28
 800609c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	dd59      	ble.n	8006156 <_dtoa_r+0x2f6>
 80060a2:	9302      	str	r3, [sp, #8]
 80060a4:	4699      	mov	r9, r3
 80060a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060a8:	2200      	movs	r2, #0
 80060aa:	6072      	str	r2, [r6, #4]
 80060ac:	2204      	movs	r2, #4
 80060ae:	f102 0014 	add.w	r0, r2, #20
 80060b2:	4298      	cmp	r0, r3
 80060b4:	6871      	ldr	r1, [r6, #4]
 80060b6:	d953      	bls.n	8006160 <_dtoa_r+0x300>
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 fc9f 	bl	80069fc <_Balloc>
 80060be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060c0:	6030      	str	r0, [r6, #0]
 80060c2:	f1b9 0f0e 	cmp.w	r9, #14
 80060c6:	f8d3 b000 	ldr.w	fp, [r3]
 80060ca:	f200 80e6 	bhi.w	800629a <_dtoa_r+0x43a>
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	f000 80e3 	beq.w	800629a <_dtoa_r+0x43a>
 80060d4:	ed9d 7b00 	vldr	d7, [sp]
 80060d8:	f1ba 0f00 	cmp.w	sl, #0
 80060dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80060e0:	dd74      	ble.n	80061cc <_dtoa_r+0x36c>
 80060e2:	4a2a      	ldr	r2, [pc, #168]	; (800618c <_dtoa_r+0x32c>)
 80060e4:	f00a 030f 	and.w	r3, sl, #15
 80060e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060ec:	ed93 7b00 	vldr	d7, [r3]
 80060f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80060f4:	06f0      	lsls	r0, r6, #27
 80060f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80060fa:	d565      	bpl.n	80061c8 <_dtoa_r+0x368>
 80060fc:	4b24      	ldr	r3, [pc, #144]	; (8006190 <_dtoa_r+0x330>)
 80060fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006102:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006106:	f7fa fb4d 	bl	80007a4 <__aeabi_ddiv>
 800610a:	e9cd 0100 	strd	r0, r1, [sp]
 800610e:	f006 060f 	and.w	r6, r6, #15
 8006112:	2503      	movs	r5, #3
 8006114:	4f1e      	ldr	r7, [pc, #120]	; (8006190 <_dtoa_r+0x330>)
 8006116:	e04c      	b.n	80061b2 <_dtoa_r+0x352>
 8006118:	2301      	movs	r3, #1
 800611a:	930a      	str	r3, [sp, #40]	; 0x28
 800611c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800611e:	4453      	add	r3, sl
 8006120:	f103 0901 	add.w	r9, r3, #1
 8006124:	9302      	str	r3, [sp, #8]
 8006126:	464b      	mov	r3, r9
 8006128:	2b01      	cmp	r3, #1
 800612a:	bfb8      	it	lt
 800612c:	2301      	movlt	r3, #1
 800612e:	e7ba      	b.n	80060a6 <_dtoa_r+0x246>
 8006130:	2300      	movs	r3, #0
 8006132:	e7b2      	b.n	800609a <_dtoa_r+0x23a>
 8006134:	2300      	movs	r3, #0
 8006136:	e7f0      	b.n	800611a <_dtoa_r+0x2ba>
 8006138:	2501      	movs	r5, #1
 800613a:	2300      	movs	r3, #0
 800613c:	9306      	str	r3, [sp, #24]
 800613e:	950a      	str	r5, [sp, #40]	; 0x28
 8006140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006144:	9302      	str	r3, [sp, #8]
 8006146:	4699      	mov	r9, r3
 8006148:	2200      	movs	r2, #0
 800614a:	2312      	movs	r3, #18
 800614c:	920b      	str	r2, [sp, #44]	; 0x2c
 800614e:	e7aa      	b.n	80060a6 <_dtoa_r+0x246>
 8006150:	2301      	movs	r3, #1
 8006152:	930a      	str	r3, [sp, #40]	; 0x28
 8006154:	e7f4      	b.n	8006140 <_dtoa_r+0x2e0>
 8006156:	2301      	movs	r3, #1
 8006158:	9302      	str	r3, [sp, #8]
 800615a:	4699      	mov	r9, r3
 800615c:	461a      	mov	r2, r3
 800615e:	e7f5      	b.n	800614c <_dtoa_r+0x2ec>
 8006160:	3101      	adds	r1, #1
 8006162:	6071      	str	r1, [r6, #4]
 8006164:	0052      	lsls	r2, r2, #1
 8006166:	e7a2      	b.n	80060ae <_dtoa_r+0x24e>
 8006168:	636f4361 	.word	0x636f4361
 800616c:	3fd287a7 	.word	0x3fd287a7
 8006170:	8b60c8b3 	.word	0x8b60c8b3
 8006174:	3fc68a28 	.word	0x3fc68a28
 8006178:	509f79fb 	.word	0x509f79fb
 800617c:	3fd34413 	.word	0x3fd34413
 8006180:	7ff00000 	.word	0x7ff00000
 8006184:	080071a9 	.word	0x080071a9
 8006188:	3ff80000 	.word	0x3ff80000
 800618c:	080071e0 	.word	0x080071e0
 8006190:	080071b8 	.word	0x080071b8
 8006194:	080071b3 	.word	0x080071b3
 8006198:	07f1      	lsls	r1, r6, #31
 800619a:	d508      	bpl.n	80061ae <_dtoa_r+0x34e>
 800619c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a4:	f7fa f9d4 	bl	8000550 <__aeabi_dmul>
 80061a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80061ac:	3501      	adds	r5, #1
 80061ae:	1076      	asrs	r6, r6, #1
 80061b0:	3708      	adds	r7, #8
 80061b2:	2e00      	cmp	r6, #0
 80061b4:	d1f0      	bne.n	8006198 <_dtoa_r+0x338>
 80061b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061be:	f7fa faf1 	bl	80007a4 <__aeabi_ddiv>
 80061c2:	e9cd 0100 	strd	r0, r1, [sp]
 80061c6:	e01a      	b.n	80061fe <_dtoa_r+0x39e>
 80061c8:	2502      	movs	r5, #2
 80061ca:	e7a3      	b.n	8006114 <_dtoa_r+0x2b4>
 80061cc:	f000 80a0 	beq.w	8006310 <_dtoa_r+0x4b0>
 80061d0:	f1ca 0600 	rsb	r6, sl, #0
 80061d4:	4b9f      	ldr	r3, [pc, #636]	; (8006454 <_dtoa_r+0x5f4>)
 80061d6:	4fa0      	ldr	r7, [pc, #640]	; (8006458 <_dtoa_r+0x5f8>)
 80061d8:	f006 020f 	and.w	r2, r6, #15
 80061dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061e8:	f7fa f9b2 	bl	8000550 <__aeabi_dmul>
 80061ec:	e9cd 0100 	strd	r0, r1, [sp]
 80061f0:	1136      	asrs	r6, r6, #4
 80061f2:	2300      	movs	r3, #0
 80061f4:	2502      	movs	r5, #2
 80061f6:	2e00      	cmp	r6, #0
 80061f8:	d17f      	bne.n	80062fa <_dtoa_r+0x49a>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e1      	bne.n	80061c2 <_dtoa_r+0x362>
 80061fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8087 	beq.w	8006314 <_dtoa_r+0x4b4>
 8006206:	e9dd 6700 	ldrd	r6, r7, [sp]
 800620a:	2200      	movs	r2, #0
 800620c:	4b93      	ldr	r3, [pc, #588]	; (800645c <_dtoa_r+0x5fc>)
 800620e:	4630      	mov	r0, r6
 8006210:	4639      	mov	r1, r7
 8006212:	f7fa fc0f 	bl	8000a34 <__aeabi_dcmplt>
 8006216:	2800      	cmp	r0, #0
 8006218:	d07c      	beq.n	8006314 <_dtoa_r+0x4b4>
 800621a:	f1b9 0f00 	cmp.w	r9, #0
 800621e:	d079      	beq.n	8006314 <_dtoa_r+0x4b4>
 8006220:	9b02      	ldr	r3, [sp, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	dd35      	ble.n	8006292 <_dtoa_r+0x432>
 8006226:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800622a:	9308      	str	r3, [sp, #32]
 800622c:	4639      	mov	r1, r7
 800622e:	2200      	movs	r2, #0
 8006230:	4b8b      	ldr	r3, [pc, #556]	; (8006460 <_dtoa_r+0x600>)
 8006232:	4630      	mov	r0, r6
 8006234:	f7fa f98c 	bl	8000550 <__aeabi_dmul>
 8006238:	e9cd 0100 	strd	r0, r1, [sp]
 800623c:	9f02      	ldr	r7, [sp, #8]
 800623e:	3501      	adds	r5, #1
 8006240:	4628      	mov	r0, r5
 8006242:	f7fa f91b 	bl	800047c <__aeabi_i2d>
 8006246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800624a:	f7fa f981 	bl	8000550 <__aeabi_dmul>
 800624e:	2200      	movs	r2, #0
 8006250:	4b84      	ldr	r3, [pc, #528]	; (8006464 <_dtoa_r+0x604>)
 8006252:	f7f9 ffc7 	bl	80001e4 <__adddf3>
 8006256:	4605      	mov	r5, r0
 8006258:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800625c:	2f00      	cmp	r7, #0
 800625e:	d15d      	bne.n	800631c <_dtoa_r+0x4bc>
 8006260:	2200      	movs	r2, #0
 8006262:	4b81      	ldr	r3, [pc, #516]	; (8006468 <_dtoa_r+0x608>)
 8006264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006268:	f7f9 ffba 	bl	80001e0 <__aeabi_dsub>
 800626c:	462a      	mov	r2, r5
 800626e:	4633      	mov	r3, r6
 8006270:	e9cd 0100 	strd	r0, r1, [sp]
 8006274:	f7fa fbfc 	bl	8000a70 <__aeabi_dcmpgt>
 8006278:	2800      	cmp	r0, #0
 800627a:	f040 8288 	bne.w	800678e <_dtoa_r+0x92e>
 800627e:	462a      	mov	r2, r5
 8006280:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006288:	f7fa fbd4 	bl	8000a34 <__aeabi_dcmplt>
 800628c:	2800      	cmp	r0, #0
 800628e:	f040 827c 	bne.w	800678a <_dtoa_r+0x92a>
 8006292:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006296:	e9cd 2300 	strd	r2, r3, [sp]
 800629a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800629c:	2b00      	cmp	r3, #0
 800629e:	f2c0 8150 	blt.w	8006542 <_dtoa_r+0x6e2>
 80062a2:	f1ba 0f0e 	cmp.w	sl, #14
 80062a6:	f300 814c 	bgt.w	8006542 <_dtoa_r+0x6e2>
 80062aa:	4b6a      	ldr	r3, [pc, #424]	; (8006454 <_dtoa_r+0x5f4>)
 80062ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062b0:	ed93 7b00 	vldr	d7, [r3]
 80062b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80062bc:	f280 80d8 	bge.w	8006470 <_dtoa_r+0x610>
 80062c0:	f1b9 0f00 	cmp.w	r9, #0
 80062c4:	f300 80d4 	bgt.w	8006470 <_dtoa_r+0x610>
 80062c8:	f040 825e 	bne.w	8006788 <_dtoa_r+0x928>
 80062cc:	2200      	movs	r2, #0
 80062ce:	4b66      	ldr	r3, [pc, #408]	; (8006468 <_dtoa_r+0x608>)
 80062d0:	ec51 0b17 	vmov	r0, r1, d7
 80062d4:	f7fa f93c 	bl	8000550 <__aeabi_dmul>
 80062d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062dc:	f7fa fbbe 	bl	8000a5c <__aeabi_dcmpge>
 80062e0:	464f      	mov	r7, r9
 80062e2:	464e      	mov	r6, r9
 80062e4:	2800      	cmp	r0, #0
 80062e6:	f040 8234 	bne.w	8006752 <_dtoa_r+0x8f2>
 80062ea:	2331      	movs	r3, #49	; 0x31
 80062ec:	f10b 0501 	add.w	r5, fp, #1
 80062f0:	f88b 3000 	strb.w	r3, [fp]
 80062f4:	f10a 0a01 	add.w	sl, sl, #1
 80062f8:	e22f      	b.n	800675a <_dtoa_r+0x8fa>
 80062fa:	07f2      	lsls	r2, r6, #31
 80062fc:	d505      	bpl.n	800630a <_dtoa_r+0x4aa>
 80062fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006302:	f7fa f925 	bl	8000550 <__aeabi_dmul>
 8006306:	3501      	adds	r5, #1
 8006308:	2301      	movs	r3, #1
 800630a:	1076      	asrs	r6, r6, #1
 800630c:	3708      	adds	r7, #8
 800630e:	e772      	b.n	80061f6 <_dtoa_r+0x396>
 8006310:	2502      	movs	r5, #2
 8006312:	e774      	b.n	80061fe <_dtoa_r+0x39e>
 8006314:	f8cd a020 	str.w	sl, [sp, #32]
 8006318:	464f      	mov	r7, r9
 800631a:	e791      	b.n	8006240 <_dtoa_r+0x3e0>
 800631c:	4b4d      	ldr	r3, [pc, #308]	; (8006454 <_dtoa_r+0x5f4>)
 800631e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006322:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006328:	2b00      	cmp	r3, #0
 800632a:	d047      	beq.n	80063bc <_dtoa_r+0x55c>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	2000      	movs	r0, #0
 8006332:	494e      	ldr	r1, [pc, #312]	; (800646c <_dtoa_r+0x60c>)
 8006334:	f7fa fa36 	bl	80007a4 <__aeabi_ddiv>
 8006338:	462a      	mov	r2, r5
 800633a:	4633      	mov	r3, r6
 800633c:	f7f9 ff50 	bl	80001e0 <__aeabi_dsub>
 8006340:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006344:	465d      	mov	r5, fp
 8006346:	e9dd 0100 	ldrd	r0, r1, [sp]
 800634a:	f7fa fb9b 	bl	8000a84 <__aeabi_d2iz>
 800634e:	4606      	mov	r6, r0
 8006350:	f7fa f894 	bl	800047c <__aeabi_i2d>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800635c:	f7f9 ff40 	bl	80001e0 <__aeabi_dsub>
 8006360:	3630      	adds	r6, #48	; 0x30
 8006362:	f805 6b01 	strb.w	r6, [r5], #1
 8006366:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800636a:	e9cd 0100 	strd	r0, r1, [sp]
 800636e:	f7fa fb61 	bl	8000a34 <__aeabi_dcmplt>
 8006372:	2800      	cmp	r0, #0
 8006374:	d163      	bne.n	800643e <_dtoa_r+0x5de>
 8006376:	e9dd 2300 	ldrd	r2, r3, [sp]
 800637a:	2000      	movs	r0, #0
 800637c:	4937      	ldr	r1, [pc, #220]	; (800645c <_dtoa_r+0x5fc>)
 800637e:	f7f9 ff2f 	bl	80001e0 <__aeabi_dsub>
 8006382:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006386:	f7fa fb55 	bl	8000a34 <__aeabi_dcmplt>
 800638a:	2800      	cmp	r0, #0
 800638c:	f040 80b7 	bne.w	80064fe <_dtoa_r+0x69e>
 8006390:	eba5 030b 	sub.w	r3, r5, fp
 8006394:	429f      	cmp	r7, r3
 8006396:	f77f af7c 	ble.w	8006292 <_dtoa_r+0x432>
 800639a:	2200      	movs	r2, #0
 800639c:	4b30      	ldr	r3, [pc, #192]	; (8006460 <_dtoa_r+0x600>)
 800639e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063a2:	f7fa f8d5 	bl	8000550 <__aeabi_dmul>
 80063a6:	2200      	movs	r2, #0
 80063a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80063ac:	4b2c      	ldr	r3, [pc, #176]	; (8006460 <_dtoa_r+0x600>)
 80063ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063b2:	f7fa f8cd 	bl	8000550 <__aeabi_dmul>
 80063b6:	e9cd 0100 	strd	r0, r1, [sp]
 80063ba:	e7c4      	b.n	8006346 <_dtoa_r+0x4e6>
 80063bc:	462a      	mov	r2, r5
 80063be:	4633      	mov	r3, r6
 80063c0:	f7fa f8c6 	bl	8000550 <__aeabi_dmul>
 80063c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80063c8:	eb0b 0507 	add.w	r5, fp, r7
 80063cc:	465e      	mov	r6, fp
 80063ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063d2:	f7fa fb57 	bl	8000a84 <__aeabi_d2iz>
 80063d6:	4607      	mov	r7, r0
 80063d8:	f7fa f850 	bl	800047c <__aeabi_i2d>
 80063dc:	3730      	adds	r7, #48	; 0x30
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063e6:	f7f9 fefb 	bl	80001e0 <__aeabi_dsub>
 80063ea:	f806 7b01 	strb.w	r7, [r6], #1
 80063ee:	42ae      	cmp	r6, r5
 80063f0:	e9cd 0100 	strd	r0, r1, [sp]
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	d126      	bne.n	8006448 <_dtoa_r+0x5e8>
 80063fa:	4b1c      	ldr	r3, [pc, #112]	; (800646c <_dtoa_r+0x60c>)
 80063fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006400:	f7f9 fef0 	bl	80001e4 <__adddf3>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	e9dd 0100 	ldrd	r0, r1, [sp]
 800640c:	f7fa fb30 	bl	8000a70 <__aeabi_dcmpgt>
 8006410:	2800      	cmp	r0, #0
 8006412:	d174      	bne.n	80064fe <_dtoa_r+0x69e>
 8006414:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006418:	2000      	movs	r0, #0
 800641a:	4914      	ldr	r1, [pc, #80]	; (800646c <_dtoa_r+0x60c>)
 800641c:	f7f9 fee0 	bl	80001e0 <__aeabi_dsub>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006428:	f7fa fb04 	bl	8000a34 <__aeabi_dcmplt>
 800642c:	2800      	cmp	r0, #0
 800642e:	f43f af30 	beq.w	8006292 <_dtoa_r+0x432>
 8006432:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006436:	2b30      	cmp	r3, #48	; 0x30
 8006438:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800643c:	d002      	beq.n	8006444 <_dtoa_r+0x5e4>
 800643e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006442:	e04a      	b.n	80064da <_dtoa_r+0x67a>
 8006444:	4615      	mov	r5, r2
 8006446:	e7f4      	b.n	8006432 <_dtoa_r+0x5d2>
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <_dtoa_r+0x600>)
 800644a:	f7fa f881 	bl	8000550 <__aeabi_dmul>
 800644e:	e9cd 0100 	strd	r0, r1, [sp]
 8006452:	e7bc      	b.n	80063ce <_dtoa_r+0x56e>
 8006454:	080071e0 	.word	0x080071e0
 8006458:	080071b8 	.word	0x080071b8
 800645c:	3ff00000 	.word	0x3ff00000
 8006460:	40240000 	.word	0x40240000
 8006464:	401c0000 	.word	0x401c0000
 8006468:	40140000 	.word	0x40140000
 800646c:	3fe00000 	.word	0x3fe00000
 8006470:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006474:	465d      	mov	r5, fp
 8006476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800647a:	4630      	mov	r0, r6
 800647c:	4639      	mov	r1, r7
 800647e:	f7fa f991 	bl	80007a4 <__aeabi_ddiv>
 8006482:	f7fa faff 	bl	8000a84 <__aeabi_d2iz>
 8006486:	4680      	mov	r8, r0
 8006488:	f7f9 fff8 	bl	800047c <__aeabi_i2d>
 800648c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006490:	f7fa f85e 	bl	8000550 <__aeabi_dmul>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4630      	mov	r0, r6
 800649a:	4639      	mov	r1, r7
 800649c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80064a0:	f7f9 fe9e 	bl	80001e0 <__aeabi_dsub>
 80064a4:	f805 6b01 	strb.w	r6, [r5], #1
 80064a8:	eba5 060b 	sub.w	r6, r5, fp
 80064ac:	45b1      	cmp	r9, r6
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	d139      	bne.n	8006528 <_dtoa_r+0x6c8>
 80064b4:	f7f9 fe96 	bl	80001e4 <__adddf3>
 80064b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064bc:	4606      	mov	r6, r0
 80064be:	460f      	mov	r7, r1
 80064c0:	f7fa fad6 	bl	8000a70 <__aeabi_dcmpgt>
 80064c4:	b9c8      	cbnz	r0, 80064fa <_dtoa_r+0x69a>
 80064c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064ca:	4630      	mov	r0, r6
 80064cc:	4639      	mov	r1, r7
 80064ce:	f7fa faa7 	bl	8000a20 <__aeabi_dcmpeq>
 80064d2:	b110      	cbz	r0, 80064da <_dtoa_r+0x67a>
 80064d4:	f018 0f01 	tst.w	r8, #1
 80064d8:	d10f      	bne.n	80064fa <_dtoa_r+0x69a>
 80064da:	9904      	ldr	r1, [sp, #16]
 80064dc:	4620      	mov	r0, r4
 80064de:	f000 fac1 	bl	8006a64 <_Bfree>
 80064e2:	2300      	movs	r3, #0
 80064e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064e6:	702b      	strb	r3, [r5, #0]
 80064e8:	f10a 0301 	add.w	r3, sl, #1
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 8241 	beq.w	8006978 <_dtoa_r+0xb18>
 80064f6:	601d      	str	r5, [r3, #0]
 80064f8:	e23e      	b.n	8006978 <_dtoa_r+0xb18>
 80064fa:	f8cd a020 	str.w	sl, [sp, #32]
 80064fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006502:	2a39      	cmp	r2, #57	; 0x39
 8006504:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006508:	d108      	bne.n	800651c <_dtoa_r+0x6bc>
 800650a:	459b      	cmp	fp, r3
 800650c:	d10a      	bne.n	8006524 <_dtoa_r+0x6c4>
 800650e:	9b08      	ldr	r3, [sp, #32]
 8006510:	3301      	adds	r3, #1
 8006512:	9308      	str	r3, [sp, #32]
 8006514:	2330      	movs	r3, #48	; 0x30
 8006516:	f88b 3000 	strb.w	r3, [fp]
 800651a:	465b      	mov	r3, fp
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	3201      	adds	r2, #1
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	e78c      	b.n	800643e <_dtoa_r+0x5de>
 8006524:	461d      	mov	r5, r3
 8006526:	e7ea      	b.n	80064fe <_dtoa_r+0x69e>
 8006528:	2200      	movs	r2, #0
 800652a:	4b9b      	ldr	r3, [pc, #620]	; (8006798 <_dtoa_r+0x938>)
 800652c:	f7fa f810 	bl	8000550 <__aeabi_dmul>
 8006530:	2200      	movs	r2, #0
 8006532:	2300      	movs	r3, #0
 8006534:	4606      	mov	r6, r0
 8006536:	460f      	mov	r7, r1
 8006538:	f7fa fa72 	bl	8000a20 <__aeabi_dcmpeq>
 800653c:	2800      	cmp	r0, #0
 800653e:	d09a      	beq.n	8006476 <_dtoa_r+0x616>
 8006540:	e7cb      	b.n	80064da <_dtoa_r+0x67a>
 8006542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006544:	2a00      	cmp	r2, #0
 8006546:	f000 808b 	beq.w	8006660 <_dtoa_r+0x800>
 800654a:	9a06      	ldr	r2, [sp, #24]
 800654c:	2a01      	cmp	r2, #1
 800654e:	dc6e      	bgt.n	800662e <_dtoa_r+0x7ce>
 8006550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006552:	2a00      	cmp	r2, #0
 8006554:	d067      	beq.n	8006626 <_dtoa_r+0x7c6>
 8006556:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800655a:	9f07      	ldr	r7, [sp, #28]
 800655c:	9d05      	ldr	r5, [sp, #20]
 800655e:	9a05      	ldr	r2, [sp, #20]
 8006560:	2101      	movs	r1, #1
 8006562:	441a      	add	r2, r3
 8006564:	4620      	mov	r0, r4
 8006566:	9205      	str	r2, [sp, #20]
 8006568:	4498      	add	r8, r3
 800656a:	f000 fb1b 	bl	8006ba4 <__i2b>
 800656e:	4606      	mov	r6, r0
 8006570:	2d00      	cmp	r5, #0
 8006572:	dd0c      	ble.n	800658e <_dtoa_r+0x72e>
 8006574:	f1b8 0f00 	cmp.w	r8, #0
 8006578:	dd09      	ble.n	800658e <_dtoa_r+0x72e>
 800657a:	4545      	cmp	r5, r8
 800657c:	9a05      	ldr	r2, [sp, #20]
 800657e:	462b      	mov	r3, r5
 8006580:	bfa8      	it	ge
 8006582:	4643      	movge	r3, r8
 8006584:	1ad2      	subs	r2, r2, r3
 8006586:	9205      	str	r2, [sp, #20]
 8006588:	1aed      	subs	r5, r5, r3
 800658a:	eba8 0803 	sub.w	r8, r8, r3
 800658e:	9b07      	ldr	r3, [sp, #28]
 8006590:	b1eb      	cbz	r3, 80065ce <_dtoa_r+0x76e>
 8006592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006594:	2b00      	cmp	r3, #0
 8006596:	d067      	beq.n	8006668 <_dtoa_r+0x808>
 8006598:	b18f      	cbz	r7, 80065be <_dtoa_r+0x75e>
 800659a:	4631      	mov	r1, r6
 800659c:	463a      	mov	r2, r7
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 fba0 	bl	8006ce4 <__pow5mult>
 80065a4:	9a04      	ldr	r2, [sp, #16]
 80065a6:	4601      	mov	r1, r0
 80065a8:	4606      	mov	r6, r0
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 fb03 	bl	8006bb6 <__multiply>
 80065b0:	9904      	ldr	r1, [sp, #16]
 80065b2:	9008      	str	r0, [sp, #32]
 80065b4:	4620      	mov	r0, r4
 80065b6:	f000 fa55 	bl	8006a64 <_Bfree>
 80065ba:	9b08      	ldr	r3, [sp, #32]
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	9b07      	ldr	r3, [sp, #28]
 80065c0:	1bda      	subs	r2, r3, r7
 80065c2:	d004      	beq.n	80065ce <_dtoa_r+0x76e>
 80065c4:	9904      	ldr	r1, [sp, #16]
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 fb8c 	bl	8006ce4 <__pow5mult>
 80065cc:	9004      	str	r0, [sp, #16]
 80065ce:	2101      	movs	r1, #1
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 fae7 	bl	8006ba4 <__i2b>
 80065d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065d8:	4607      	mov	r7, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 81d0 	beq.w	8006980 <_dtoa_r+0xb20>
 80065e0:	461a      	mov	r2, r3
 80065e2:	4601      	mov	r1, r0
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 fb7d 	bl	8006ce4 <__pow5mult>
 80065ea:	9b06      	ldr	r3, [sp, #24]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	4607      	mov	r7, r0
 80065f0:	dc40      	bgt.n	8006674 <_dtoa_r+0x814>
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d139      	bne.n	800666c <_dtoa_r+0x80c>
 80065f8:	9b01      	ldr	r3, [sp, #4]
 80065fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d136      	bne.n	8006670 <_dtoa_r+0x810>
 8006602:	9b01      	ldr	r3, [sp, #4]
 8006604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006608:	0d1b      	lsrs	r3, r3, #20
 800660a:	051b      	lsls	r3, r3, #20
 800660c:	b12b      	cbz	r3, 800661a <_dtoa_r+0x7ba>
 800660e:	9b05      	ldr	r3, [sp, #20]
 8006610:	3301      	adds	r3, #1
 8006612:	9305      	str	r3, [sp, #20]
 8006614:	f108 0801 	add.w	r8, r8, #1
 8006618:	2301      	movs	r3, #1
 800661a:	9307      	str	r3, [sp, #28]
 800661c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800661e:	2b00      	cmp	r3, #0
 8006620:	d12a      	bne.n	8006678 <_dtoa_r+0x818>
 8006622:	2001      	movs	r0, #1
 8006624:	e030      	b.n	8006688 <_dtoa_r+0x828>
 8006626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006628:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800662c:	e795      	b.n	800655a <_dtoa_r+0x6fa>
 800662e:	9b07      	ldr	r3, [sp, #28]
 8006630:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006634:	42bb      	cmp	r3, r7
 8006636:	bfbf      	itttt	lt
 8006638:	9b07      	ldrlt	r3, [sp, #28]
 800663a:	9707      	strlt	r7, [sp, #28]
 800663c:	1afa      	sublt	r2, r7, r3
 800663e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006640:	bfbb      	ittet	lt
 8006642:	189b      	addlt	r3, r3, r2
 8006644:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006646:	1bdf      	subge	r7, r3, r7
 8006648:	2700      	movlt	r7, #0
 800664a:	f1b9 0f00 	cmp.w	r9, #0
 800664e:	bfb5      	itete	lt
 8006650:	9b05      	ldrlt	r3, [sp, #20]
 8006652:	9d05      	ldrge	r5, [sp, #20]
 8006654:	eba3 0509 	sublt.w	r5, r3, r9
 8006658:	464b      	movge	r3, r9
 800665a:	bfb8      	it	lt
 800665c:	2300      	movlt	r3, #0
 800665e:	e77e      	b.n	800655e <_dtoa_r+0x6fe>
 8006660:	9f07      	ldr	r7, [sp, #28]
 8006662:	9d05      	ldr	r5, [sp, #20]
 8006664:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006666:	e783      	b.n	8006570 <_dtoa_r+0x710>
 8006668:	9a07      	ldr	r2, [sp, #28]
 800666a:	e7ab      	b.n	80065c4 <_dtoa_r+0x764>
 800666c:	2300      	movs	r3, #0
 800666e:	e7d4      	b.n	800661a <_dtoa_r+0x7ba>
 8006670:	9b00      	ldr	r3, [sp, #0]
 8006672:	e7d2      	b.n	800661a <_dtoa_r+0x7ba>
 8006674:	2300      	movs	r3, #0
 8006676:	9307      	str	r3, [sp, #28]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800667e:	6918      	ldr	r0, [r3, #16]
 8006680:	f000 fa42 	bl	8006b08 <__hi0bits>
 8006684:	f1c0 0020 	rsb	r0, r0, #32
 8006688:	4440      	add	r0, r8
 800668a:	f010 001f 	ands.w	r0, r0, #31
 800668e:	d047      	beq.n	8006720 <_dtoa_r+0x8c0>
 8006690:	f1c0 0320 	rsb	r3, r0, #32
 8006694:	2b04      	cmp	r3, #4
 8006696:	dd3b      	ble.n	8006710 <_dtoa_r+0x8b0>
 8006698:	9b05      	ldr	r3, [sp, #20]
 800669a:	f1c0 001c 	rsb	r0, r0, #28
 800669e:	4403      	add	r3, r0
 80066a0:	9305      	str	r3, [sp, #20]
 80066a2:	4405      	add	r5, r0
 80066a4:	4480      	add	r8, r0
 80066a6:	9b05      	ldr	r3, [sp, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	dd05      	ble.n	80066b8 <_dtoa_r+0x858>
 80066ac:	461a      	mov	r2, r3
 80066ae:	9904      	ldr	r1, [sp, #16]
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 fb65 	bl	8006d80 <__lshift>
 80066b6:	9004      	str	r0, [sp, #16]
 80066b8:	f1b8 0f00 	cmp.w	r8, #0
 80066bc:	dd05      	ble.n	80066ca <_dtoa_r+0x86a>
 80066be:	4639      	mov	r1, r7
 80066c0:	4642      	mov	r2, r8
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 fb5c 	bl	8006d80 <__lshift>
 80066c8:	4607      	mov	r7, r0
 80066ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066cc:	b353      	cbz	r3, 8006724 <_dtoa_r+0x8c4>
 80066ce:	4639      	mov	r1, r7
 80066d0:	9804      	ldr	r0, [sp, #16]
 80066d2:	f000 fba9 	bl	8006e28 <__mcmp>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	da24      	bge.n	8006724 <_dtoa_r+0x8c4>
 80066da:	2300      	movs	r3, #0
 80066dc:	220a      	movs	r2, #10
 80066de:	9904      	ldr	r1, [sp, #16]
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 f9d6 	bl	8006a92 <__multadd>
 80066e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e8:	9004      	str	r0, [sp, #16]
 80066ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 814d 	beq.w	800698e <_dtoa_r+0xb2e>
 80066f4:	2300      	movs	r3, #0
 80066f6:	4631      	mov	r1, r6
 80066f8:	220a      	movs	r2, #10
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 f9c9 	bl	8006a92 <__multadd>
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	4606      	mov	r6, r0
 8006706:	dc4f      	bgt.n	80067a8 <_dtoa_r+0x948>
 8006708:	9b06      	ldr	r3, [sp, #24]
 800670a:	2b02      	cmp	r3, #2
 800670c:	dd4c      	ble.n	80067a8 <_dtoa_r+0x948>
 800670e:	e011      	b.n	8006734 <_dtoa_r+0x8d4>
 8006710:	d0c9      	beq.n	80066a6 <_dtoa_r+0x846>
 8006712:	9a05      	ldr	r2, [sp, #20]
 8006714:	331c      	adds	r3, #28
 8006716:	441a      	add	r2, r3
 8006718:	9205      	str	r2, [sp, #20]
 800671a:	441d      	add	r5, r3
 800671c:	4498      	add	r8, r3
 800671e:	e7c2      	b.n	80066a6 <_dtoa_r+0x846>
 8006720:	4603      	mov	r3, r0
 8006722:	e7f6      	b.n	8006712 <_dtoa_r+0x8b2>
 8006724:	f1b9 0f00 	cmp.w	r9, #0
 8006728:	dc38      	bgt.n	800679c <_dtoa_r+0x93c>
 800672a:	9b06      	ldr	r3, [sp, #24]
 800672c:	2b02      	cmp	r3, #2
 800672e:	dd35      	ble.n	800679c <_dtoa_r+0x93c>
 8006730:	f8cd 9008 	str.w	r9, [sp, #8]
 8006734:	9b02      	ldr	r3, [sp, #8]
 8006736:	b963      	cbnz	r3, 8006752 <_dtoa_r+0x8f2>
 8006738:	4639      	mov	r1, r7
 800673a:	2205      	movs	r2, #5
 800673c:	4620      	mov	r0, r4
 800673e:	f000 f9a8 	bl	8006a92 <__multadd>
 8006742:	4601      	mov	r1, r0
 8006744:	4607      	mov	r7, r0
 8006746:	9804      	ldr	r0, [sp, #16]
 8006748:	f000 fb6e 	bl	8006e28 <__mcmp>
 800674c:	2800      	cmp	r0, #0
 800674e:	f73f adcc 	bgt.w	80062ea <_dtoa_r+0x48a>
 8006752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006754:	465d      	mov	r5, fp
 8006756:	ea6f 0a03 	mvn.w	sl, r3
 800675a:	f04f 0900 	mov.w	r9, #0
 800675e:	4639      	mov	r1, r7
 8006760:	4620      	mov	r0, r4
 8006762:	f000 f97f 	bl	8006a64 <_Bfree>
 8006766:	2e00      	cmp	r6, #0
 8006768:	f43f aeb7 	beq.w	80064da <_dtoa_r+0x67a>
 800676c:	f1b9 0f00 	cmp.w	r9, #0
 8006770:	d005      	beq.n	800677e <_dtoa_r+0x91e>
 8006772:	45b1      	cmp	r9, r6
 8006774:	d003      	beq.n	800677e <_dtoa_r+0x91e>
 8006776:	4649      	mov	r1, r9
 8006778:	4620      	mov	r0, r4
 800677a:	f000 f973 	bl	8006a64 <_Bfree>
 800677e:	4631      	mov	r1, r6
 8006780:	4620      	mov	r0, r4
 8006782:	f000 f96f 	bl	8006a64 <_Bfree>
 8006786:	e6a8      	b.n	80064da <_dtoa_r+0x67a>
 8006788:	2700      	movs	r7, #0
 800678a:	463e      	mov	r6, r7
 800678c:	e7e1      	b.n	8006752 <_dtoa_r+0x8f2>
 800678e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006792:	463e      	mov	r6, r7
 8006794:	e5a9      	b.n	80062ea <_dtoa_r+0x48a>
 8006796:	bf00      	nop
 8006798:	40240000 	.word	0x40240000
 800679c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800679e:	f8cd 9008 	str.w	r9, [sp, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80fa 	beq.w	800699c <_dtoa_r+0xb3c>
 80067a8:	2d00      	cmp	r5, #0
 80067aa:	dd05      	ble.n	80067b8 <_dtoa_r+0x958>
 80067ac:	4631      	mov	r1, r6
 80067ae:	462a      	mov	r2, r5
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 fae5 	bl	8006d80 <__lshift>
 80067b6:	4606      	mov	r6, r0
 80067b8:	9b07      	ldr	r3, [sp, #28]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d04c      	beq.n	8006858 <_dtoa_r+0x9f8>
 80067be:	6871      	ldr	r1, [r6, #4]
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 f91b 	bl	80069fc <_Balloc>
 80067c6:	6932      	ldr	r2, [r6, #16]
 80067c8:	3202      	adds	r2, #2
 80067ca:	4605      	mov	r5, r0
 80067cc:	0092      	lsls	r2, r2, #2
 80067ce:	f106 010c 	add.w	r1, r6, #12
 80067d2:	300c      	adds	r0, #12
 80067d4:	f7fe ff58 	bl	8005688 <memcpy>
 80067d8:	2201      	movs	r2, #1
 80067da:	4629      	mov	r1, r5
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 facf 	bl	8006d80 <__lshift>
 80067e2:	9b00      	ldr	r3, [sp, #0]
 80067e4:	f8cd b014 	str.w	fp, [sp, #20]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	46b1      	mov	r9, r6
 80067ee:	9307      	str	r3, [sp, #28]
 80067f0:	4606      	mov	r6, r0
 80067f2:	4639      	mov	r1, r7
 80067f4:	9804      	ldr	r0, [sp, #16]
 80067f6:	f7ff faa4 	bl	8005d42 <quorem>
 80067fa:	4649      	mov	r1, r9
 80067fc:	4605      	mov	r5, r0
 80067fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006802:	9804      	ldr	r0, [sp, #16]
 8006804:	f000 fb10 	bl	8006e28 <__mcmp>
 8006808:	4632      	mov	r2, r6
 800680a:	9000      	str	r0, [sp, #0]
 800680c:	4639      	mov	r1, r7
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fb24 	bl	8006e5c <__mdiff>
 8006814:	68c3      	ldr	r3, [r0, #12]
 8006816:	4602      	mov	r2, r0
 8006818:	bb03      	cbnz	r3, 800685c <_dtoa_r+0x9fc>
 800681a:	4601      	mov	r1, r0
 800681c:	9008      	str	r0, [sp, #32]
 800681e:	9804      	ldr	r0, [sp, #16]
 8006820:	f000 fb02 	bl	8006e28 <__mcmp>
 8006824:	9a08      	ldr	r2, [sp, #32]
 8006826:	4603      	mov	r3, r0
 8006828:	4611      	mov	r1, r2
 800682a:	4620      	mov	r0, r4
 800682c:	9308      	str	r3, [sp, #32]
 800682e:	f000 f919 	bl	8006a64 <_Bfree>
 8006832:	9b08      	ldr	r3, [sp, #32]
 8006834:	b9a3      	cbnz	r3, 8006860 <_dtoa_r+0xa00>
 8006836:	9a06      	ldr	r2, [sp, #24]
 8006838:	b992      	cbnz	r2, 8006860 <_dtoa_r+0xa00>
 800683a:	9a07      	ldr	r2, [sp, #28]
 800683c:	b982      	cbnz	r2, 8006860 <_dtoa_r+0xa00>
 800683e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006842:	d029      	beq.n	8006898 <_dtoa_r+0xa38>
 8006844:	9b00      	ldr	r3, [sp, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	dd01      	ble.n	800684e <_dtoa_r+0x9ee>
 800684a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800684e:	9b05      	ldr	r3, [sp, #20]
 8006850:	1c5d      	adds	r5, r3, #1
 8006852:	f883 8000 	strb.w	r8, [r3]
 8006856:	e782      	b.n	800675e <_dtoa_r+0x8fe>
 8006858:	4630      	mov	r0, r6
 800685a:	e7c2      	b.n	80067e2 <_dtoa_r+0x982>
 800685c:	2301      	movs	r3, #1
 800685e:	e7e3      	b.n	8006828 <_dtoa_r+0x9c8>
 8006860:	9a00      	ldr	r2, [sp, #0]
 8006862:	2a00      	cmp	r2, #0
 8006864:	db04      	blt.n	8006870 <_dtoa_r+0xa10>
 8006866:	d125      	bne.n	80068b4 <_dtoa_r+0xa54>
 8006868:	9a06      	ldr	r2, [sp, #24]
 800686a:	bb1a      	cbnz	r2, 80068b4 <_dtoa_r+0xa54>
 800686c:	9a07      	ldr	r2, [sp, #28]
 800686e:	bb0a      	cbnz	r2, 80068b4 <_dtoa_r+0xa54>
 8006870:	2b00      	cmp	r3, #0
 8006872:	ddec      	ble.n	800684e <_dtoa_r+0x9ee>
 8006874:	2201      	movs	r2, #1
 8006876:	9904      	ldr	r1, [sp, #16]
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fa81 	bl	8006d80 <__lshift>
 800687e:	4639      	mov	r1, r7
 8006880:	9004      	str	r0, [sp, #16]
 8006882:	f000 fad1 	bl	8006e28 <__mcmp>
 8006886:	2800      	cmp	r0, #0
 8006888:	dc03      	bgt.n	8006892 <_dtoa_r+0xa32>
 800688a:	d1e0      	bne.n	800684e <_dtoa_r+0x9ee>
 800688c:	f018 0f01 	tst.w	r8, #1
 8006890:	d0dd      	beq.n	800684e <_dtoa_r+0x9ee>
 8006892:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006896:	d1d8      	bne.n	800684a <_dtoa_r+0x9ea>
 8006898:	9b05      	ldr	r3, [sp, #20]
 800689a:	9a05      	ldr	r2, [sp, #20]
 800689c:	1c5d      	adds	r5, r3, #1
 800689e:	2339      	movs	r3, #57	; 0x39
 80068a0:	7013      	strb	r3, [r2, #0]
 80068a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068a6:	2b39      	cmp	r3, #57	; 0x39
 80068a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80068ac:	d04f      	beq.n	800694e <_dtoa_r+0xaee>
 80068ae:	3301      	adds	r3, #1
 80068b0:	7013      	strb	r3, [r2, #0]
 80068b2:	e754      	b.n	800675e <_dtoa_r+0x8fe>
 80068b4:	9a05      	ldr	r2, [sp, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f102 0501 	add.w	r5, r2, #1
 80068bc:	dd06      	ble.n	80068cc <_dtoa_r+0xa6c>
 80068be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068c2:	d0e9      	beq.n	8006898 <_dtoa_r+0xa38>
 80068c4:	f108 0801 	add.w	r8, r8, #1
 80068c8:	9b05      	ldr	r3, [sp, #20]
 80068ca:	e7c2      	b.n	8006852 <_dtoa_r+0x9f2>
 80068cc:	9a02      	ldr	r2, [sp, #8]
 80068ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80068d2:	eba5 030b 	sub.w	r3, r5, fp
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d021      	beq.n	800691e <_dtoa_r+0xabe>
 80068da:	2300      	movs	r3, #0
 80068dc:	220a      	movs	r2, #10
 80068de:	9904      	ldr	r1, [sp, #16]
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 f8d6 	bl	8006a92 <__multadd>
 80068e6:	45b1      	cmp	r9, r6
 80068e8:	9004      	str	r0, [sp, #16]
 80068ea:	f04f 0300 	mov.w	r3, #0
 80068ee:	f04f 020a 	mov.w	r2, #10
 80068f2:	4649      	mov	r1, r9
 80068f4:	4620      	mov	r0, r4
 80068f6:	d105      	bne.n	8006904 <_dtoa_r+0xaa4>
 80068f8:	f000 f8cb 	bl	8006a92 <__multadd>
 80068fc:	4681      	mov	r9, r0
 80068fe:	4606      	mov	r6, r0
 8006900:	9505      	str	r5, [sp, #20]
 8006902:	e776      	b.n	80067f2 <_dtoa_r+0x992>
 8006904:	f000 f8c5 	bl	8006a92 <__multadd>
 8006908:	4631      	mov	r1, r6
 800690a:	4681      	mov	r9, r0
 800690c:	2300      	movs	r3, #0
 800690e:	220a      	movs	r2, #10
 8006910:	4620      	mov	r0, r4
 8006912:	f000 f8be 	bl	8006a92 <__multadd>
 8006916:	4606      	mov	r6, r0
 8006918:	e7f2      	b.n	8006900 <_dtoa_r+0xaa0>
 800691a:	f04f 0900 	mov.w	r9, #0
 800691e:	2201      	movs	r2, #1
 8006920:	9904      	ldr	r1, [sp, #16]
 8006922:	4620      	mov	r0, r4
 8006924:	f000 fa2c 	bl	8006d80 <__lshift>
 8006928:	4639      	mov	r1, r7
 800692a:	9004      	str	r0, [sp, #16]
 800692c:	f000 fa7c 	bl	8006e28 <__mcmp>
 8006930:	2800      	cmp	r0, #0
 8006932:	dcb6      	bgt.n	80068a2 <_dtoa_r+0xa42>
 8006934:	d102      	bne.n	800693c <_dtoa_r+0xadc>
 8006936:	f018 0f01 	tst.w	r8, #1
 800693a:	d1b2      	bne.n	80068a2 <_dtoa_r+0xa42>
 800693c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006940:	2b30      	cmp	r3, #48	; 0x30
 8006942:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006946:	f47f af0a 	bne.w	800675e <_dtoa_r+0x8fe>
 800694a:	4615      	mov	r5, r2
 800694c:	e7f6      	b.n	800693c <_dtoa_r+0xadc>
 800694e:	4593      	cmp	fp, r2
 8006950:	d105      	bne.n	800695e <_dtoa_r+0xafe>
 8006952:	2331      	movs	r3, #49	; 0x31
 8006954:	f10a 0a01 	add.w	sl, sl, #1
 8006958:	f88b 3000 	strb.w	r3, [fp]
 800695c:	e6ff      	b.n	800675e <_dtoa_r+0x8fe>
 800695e:	4615      	mov	r5, r2
 8006960:	e79f      	b.n	80068a2 <_dtoa_r+0xa42>
 8006962:	f8df b064 	ldr.w	fp, [pc, #100]	; 80069c8 <_dtoa_r+0xb68>
 8006966:	e007      	b.n	8006978 <_dtoa_r+0xb18>
 8006968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800696a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80069cc <_dtoa_r+0xb6c>
 800696e:	b11b      	cbz	r3, 8006978 <_dtoa_r+0xb18>
 8006970:	f10b 0308 	add.w	r3, fp, #8
 8006974:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	4658      	mov	r0, fp
 800697a:	b017      	add	sp, #92	; 0x5c
 800697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006980:	9b06      	ldr	r3, [sp, #24]
 8006982:	2b01      	cmp	r3, #1
 8006984:	f77f ae35 	ble.w	80065f2 <_dtoa_r+0x792>
 8006988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800698a:	9307      	str	r3, [sp, #28]
 800698c:	e649      	b.n	8006622 <_dtoa_r+0x7c2>
 800698e:	9b02      	ldr	r3, [sp, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc03      	bgt.n	800699c <_dtoa_r+0xb3c>
 8006994:	9b06      	ldr	r3, [sp, #24]
 8006996:	2b02      	cmp	r3, #2
 8006998:	f73f aecc 	bgt.w	8006734 <_dtoa_r+0x8d4>
 800699c:	465d      	mov	r5, fp
 800699e:	4639      	mov	r1, r7
 80069a0:	9804      	ldr	r0, [sp, #16]
 80069a2:	f7ff f9ce 	bl	8005d42 <quorem>
 80069a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80069aa:	f805 8b01 	strb.w	r8, [r5], #1
 80069ae:	9a02      	ldr	r2, [sp, #8]
 80069b0:	eba5 030b 	sub.w	r3, r5, fp
 80069b4:	429a      	cmp	r2, r3
 80069b6:	ddb0      	ble.n	800691a <_dtoa_r+0xaba>
 80069b8:	2300      	movs	r3, #0
 80069ba:	220a      	movs	r2, #10
 80069bc:	9904      	ldr	r1, [sp, #16]
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 f867 	bl	8006a92 <__multadd>
 80069c4:	9004      	str	r0, [sp, #16]
 80069c6:	e7ea      	b.n	800699e <_dtoa_r+0xb3e>
 80069c8:	080071a8 	.word	0x080071a8
 80069cc:	080071aa 	.word	0x080071aa

080069d0 <_localeconv_r>:
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <_localeconv_r+0x14>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6a18      	ldr	r0, [r3, #32]
 80069d6:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <_localeconv_r+0x18>)
 80069d8:	2800      	cmp	r0, #0
 80069da:	bf08      	it	eq
 80069dc:	4618      	moveq	r0, r3
 80069de:	30f0      	adds	r0, #240	; 0xf0
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	20000064 	.word	0x20000064
 80069e8:	200000c8 	.word	0x200000c8

080069ec <malloc>:
 80069ec:	4b02      	ldr	r3, [pc, #8]	; (80069f8 <malloc+0xc>)
 80069ee:	4601      	mov	r1, r0
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	f000 baed 	b.w	8006fd0 <_malloc_r>
 80069f6:	bf00      	nop
 80069f8:	20000064 	.word	0x20000064

080069fc <_Balloc>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a00:	4604      	mov	r4, r0
 8006a02:	460e      	mov	r6, r1
 8006a04:	b93d      	cbnz	r5, 8006a16 <_Balloc+0x1a>
 8006a06:	2010      	movs	r0, #16
 8006a08:	f7ff fff0 	bl	80069ec <malloc>
 8006a0c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a12:	6005      	str	r5, [r0, #0]
 8006a14:	60c5      	str	r5, [r0, #12]
 8006a16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006a18:	68eb      	ldr	r3, [r5, #12]
 8006a1a:	b183      	cbz	r3, 8006a3e <_Balloc+0x42>
 8006a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006a24:	b9b8      	cbnz	r0, 8006a56 <_Balloc+0x5a>
 8006a26:	2101      	movs	r1, #1
 8006a28:	fa01 f506 	lsl.w	r5, r1, r6
 8006a2c:	1d6a      	adds	r2, r5, #5
 8006a2e:	0092      	lsls	r2, r2, #2
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 fabf 	bl	8006fb4 <_calloc_r>
 8006a36:	b160      	cbz	r0, 8006a52 <_Balloc+0x56>
 8006a38:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006a3c:	e00e      	b.n	8006a5c <_Balloc+0x60>
 8006a3e:	2221      	movs	r2, #33	; 0x21
 8006a40:	2104      	movs	r1, #4
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 fab6 	bl	8006fb4 <_calloc_r>
 8006a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a4a:	60e8      	str	r0, [r5, #12]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e4      	bne.n	8006a1c <_Balloc+0x20>
 8006a52:	2000      	movs	r0, #0
 8006a54:	bd70      	pop	{r4, r5, r6, pc}
 8006a56:	6802      	ldr	r2, [r0, #0]
 8006a58:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a62:	e7f7      	b.n	8006a54 <_Balloc+0x58>

08006a64 <_Bfree>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006a68:	4606      	mov	r6, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	b93c      	cbnz	r4, 8006a7e <_Bfree+0x1a>
 8006a6e:	2010      	movs	r0, #16
 8006a70:	f7ff ffbc 	bl	80069ec <malloc>
 8006a74:	6270      	str	r0, [r6, #36]	; 0x24
 8006a76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a7a:	6004      	str	r4, [r0, #0]
 8006a7c:	60c4      	str	r4, [r0, #12]
 8006a7e:	b13d      	cbz	r5, 8006a90 <_Bfree+0x2c>
 8006a80:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006a82:	686a      	ldr	r2, [r5, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a8a:	6029      	str	r1, [r5, #0]
 8006a8c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006a90:	bd70      	pop	{r4, r5, r6, pc}

08006a92 <__multadd>:
 8006a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a96:	690d      	ldr	r5, [r1, #16]
 8006a98:	461f      	mov	r7, r3
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	f101 0c14 	add.w	ip, r1, #20
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f8dc 0000 	ldr.w	r0, [ip]
 8006aa8:	b281      	uxth	r1, r0
 8006aaa:	fb02 7101 	mla	r1, r2, r1, r7
 8006aae:	0c0f      	lsrs	r7, r1, #16
 8006ab0:	0c00      	lsrs	r0, r0, #16
 8006ab2:	fb02 7000 	mla	r0, r2, r0, r7
 8006ab6:	b289      	uxth	r1, r1
 8006ab8:	3301      	adds	r3, #1
 8006aba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006ac4:	f84c 1b04 	str.w	r1, [ip], #4
 8006ac8:	dcec      	bgt.n	8006aa4 <__multadd+0x12>
 8006aca:	b1d7      	cbz	r7, 8006b02 <__multadd+0x70>
 8006acc:	68a3      	ldr	r3, [r4, #8]
 8006ace:	42ab      	cmp	r3, r5
 8006ad0:	dc12      	bgt.n	8006af8 <__multadd+0x66>
 8006ad2:	6861      	ldr	r1, [r4, #4]
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	3101      	adds	r1, #1
 8006ad8:	f7ff ff90 	bl	80069fc <_Balloc>
 8006adc:	6922      	ldr	r2, [r4, #16]
 8006ade:	3202      	adds	r2, #2
 8006ae0:	f104 010c 	add.w	r1, r4, #12
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	0092      	lsls	r2, r2, #2
 8006ae8:	300c      	adds	r0, #12
 8006aea:	f7fe fdcd 	bl	8005688 <memcpy>
 8006aee:	4621      	mov	r1, r4
 8006af0:	4630      	mov	r0, r6
 8006af2:	f7ff ffb7 	bl	8006a64 <_Bfree>
 8006af6:	4644      	mov	r4, r8
 8006af8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006afc:	3501      	adds	r5, #1
 8006afe:	615f      	str	r7, [r3, #20]
 8006b00:	6125      	str	r5, [r4, #16]
 8006b02:	4620      	mov	r0, r4
 8006b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b08 <__hi0bits>:
 8006b08:	0c02      	lsrs	r2, r0, #16
 8006b0a:	0412      	lsls	r2, r2, #16
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	b9b2      	cbnz	r2, 8006b3e <__hi0bits+0x36>
 8006b10:	0403      	lsls	r3, r0, #16
 8006b12:	2010      	movs	r0, #16
 8006b14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b18:	bf04      	itt	eq
 8006b1a:	021b      	lsleq	r3, r3, #8
 8006b1c:	3008      	addeq	r0, #8
 8006b1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b22:	bf04      	itt	eq
 8006b24:	011b      	lsleq	r3, r3, #4
 8006b26:	3004      	addeq	r0, #4
 8006b28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b2c:	bf04      	itt	eq
 8006b2e:	009b      	lsleq	r3, r3, #2
 8006b30:	3002      	addeq	r0, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	db06      	blt.n	8006b44 <__hi0bits+0x3c>
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	d503      	bpl.n	8006b42 <__hi0bits+0x3a>
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	4770      	bx	lr
 8006b3e:	2000      	movs	r0, #0
 8006b40:	e7e8      	b.n	8006b14 <__hi0bits+0xc>
 8006b42:	2020      	movs	r0, #32
 8006b44:	4770      	bx	lr

08006b46 <__lo0bits>:
 8006b46:	6803      	ldr	r3, [r0, #0]
 8006b48:	f013 0207 	ands.w	r2, r3, #7
 8006b4c:	4601      	mov	r1, r0
 8006b4e:	d00b      	beq.n	8006b68 <__lo0bits+0x22>
 8006b50:	07da      	lsls	r2, r3, #31
 8006b52:	d423      	bmi.n	8006b9c <__lo0bits+0x56>
 8006b54:	0798      	lsls	r0, r3, #30
 8006b56:	bf49      	itett	mi
 8006b58:	085b      	lsrmi	r3, r3, #1
 8006b5a:	089b      	lsrpl	r3, r3, #2
 8006b5c:	2001      	movmi	r0, #1
 8006b5e:	600b      	strmi	r3, [r1, #0]
 8006b60:	bf5c      	itt	pl
 8006b62:	600b      	strpl	r3, [r1, #0]
 8006b64:	2002      	movpl	r0, #2
 8006b66:	4770      	bx	lr
 8006b68:	b298      	uxth	r0, r3
 8006b6a:	b9a8      	cbnz	r0, 8006b98 <__lo0bits+0x52>
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	2010      	movs	r0, #16
 8006b70:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b74:	bf04      	itt	eq
 8006b76:	0a1b      	lsreq	r3, r3, #8
 8006b78:	3008      	addeq	r0, #8
 8006b7a:	071a      	lsls	r2, r3, #28
 8006b7c:	bf04      	itt	eq
 8006b7e:	091b      	lsreq	r3, r3, #4
 8006b80:	3004      	addeq	r0, #4
 8006b82:	079a      	lsls	r2, r3, #30
 8006b84:	bf04      	itt	eq
 8006b86:	089b      	lsreq	r3, r3, #2
 8006b88:	3002      	addeq	r0, #2
 8006b8a:	07da      	lsls	r2, r3, #31
 8006b8c:	d402      	bmi.n	8006b94 <__lo0bits+0x4e>
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	d006      	beq.n	8006ba0 <__lo0bits+0x5a>
 8006b92:	3001      	adds	r0, #1
 8006b94:	600b      	str	r3, [r1, #0]
 8006b96:	4770      	bx	lr
 8006b98:	4610      	mov	r0, r2
 8006b9a:	e7e9      	b.n	8006b70 <__lo0bits+0x2a>
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	4770      	bx	lr
 8006ba0:	2020      	movs	r0, #32
 8006ba2:	4770      	bx	lr

08006ba4 <__i2b>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	2101      	movs	r1, #1
 8006baa:	f7ff ff27 	bl	80069fc <_Balloc>
 8006bae:	2201      	movs	r2, #1
 8006bb0:	6144      	str	r4, [r0, #20]
 8006bb2:	6102      	str	r2, [r0, #16]
 8006bb4:	bd10      	pop	{r4, pc}

08006bb6 <__multiply>:
 8006bb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bba:	4614      	mov	r4, r2
 8006bbc:	690a      	ldr	r2, [r1, #16]
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	bfb8      	it	lt
 8006bc4:	460b      	movlt	r3, r1
 8006bc6:	4688      	mov	r8, r1
 8006bc8:	bfbc      	itt	lt
 8006bca:	46a0      	movlt	r8, r4
 8006bcc:	461c      	movlt	r4, r3
 8006bce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006bd2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006bd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006bda:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006bde:	eb07 0609 	add.w	r6, r7, r9
 8006be2:	42b3      	cmp	r3, r6
 8006be4:	bfb8      	it	lt
 8006be6:	3101      	addlt	r1, #1
 8006be8:	f7ff ff08 	bl	80069fc <_Balloc>
 8006bec:	f100 0514 	add.w	r5, r0, #20
 8006bf0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006bf4:	462b      	mov	r3, r5
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	4573      	cmp	r3, lr
 8006bfa:	d316      	bcc.n	8006c2a <__multiply+0x74>
 8006bfc:	f104 0214 	add.w	r2, r4, #20
 8006c00:	f108 0114 	add.w	r1, r8, #20
 8006c04:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006c08:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	9b00      	ldr	r3, [sp, #0]
 8006c10:	9201      	str	r2, [sp, #4]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d80c      	bhi.n	8006c30 <__multiply+0x7a>
 8006c16:	2e00      	cmp	r6, #0
 8006c18:	dd03      	ble.n	8006c22 <__multiply+0x6c>
 8006c1a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d05d      	beq.n	8006cde <__multiply+0x128>
 8006c22:	6106      	str	r6, [r0, #16]
 8006c24:	b003      	add	sp, #12
 8006c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2a:	f843 2b04 	str.w	r2, [r3], #4
 8006c2e:	e7e3      	b.n	8006bf8 <__multiply+0x42>
 8006c30:	f8b2 b000 	ldrh.w	fp, [r2]
 8006c34:	f1bb 0f00 	cmp.w	fp, #0
 8006c38:	d023      	beq.n	8006c82 <__multiply+0xcc>
 8006c3a:	4689      	mov	r9, r1
 8006c3c:	46ac      	mov	ip, r5
 8006c3e:	f04f 0800 	mov.w	r8, #0
 8006c42:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c46:	f8dc a000 	ldr.w	sl, [ip]
 8006c4a:	b2a3      	uxth	r3, r4
 8006c4c:	fa1f fa8a 	uxth.w	sl, sl
 8006c50:	fb0b a303 	mla	r3, fp, r3, sl
 8006c54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c58:	f8dc 4000 	ldr.w	r4, [ip]
 8006c5c:	4443      	add	r3, r8
 8006c5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006c62:	fb0b 840a 	mla	r4, fp, sl, r8
 8006c66:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006c6a:	46e2      	mov	sl, ip
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006c72:	454f      	cmp	r7, r9
 8006c74:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006c78:	f84a 3b04 	str.w	r3, [sl], #4
 8006c7c:	d82b      	bhi.n	8006cd6 <__multiply+0x120>
 8006c7e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006c82:	9b01      	ldr	r3, [sp, #4]
 8006c84:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006c88:	3204      	adds	r2, #4
 8006c8a:	f1ba 0f00 	cmp.w	sl, #0
 8006c8e:	d020      	beq.n	8006cd2 <__multiply+0x11c>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	4689      	mov	r9, r1
 8006c94:	46a8      	mov	r8, r5
 8006c96:	f04f 0b00 	mov.w	fp, #0
 8006c9a:	f8b9 c000 	ldrh.w	ip, [r9]
 8006c9e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006ca2:	fb0a 440c 	mla	r4, sl, ip, r4
 8006ca6:	445c      	add	r4, fp
 8006ca8:	46c4      	mov	ip, r8
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006cb0:	f84c 3b04 	str.w	r3, [ip], #4
 8006cb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cb8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006cbc:	0c1b      	lsrs	r3, r3, #16
 8006cbe:	fb0a b303 	mla	r3, sl, r3, fp
 8006cc2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006cc6:	454f      	cmp	r7, r9
 8006cc8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006ccc:	d805      	bhi.n	8006cda <__multiply+0x124>
 8006cce:	f8c8 3004 	str.w	r3, [r8, #4]
 8006cd2:	3504      	adds	r5, #4
 8006cd4:	e79b      	b.n	8006c0e <__multiply+0x58>
 8006cd6:	46d4      	mov	ip, sl
 8006cd8:	e7b3      	b.n	8006c42 <__multiply+0x8c>
 8006cda:	46e0      	mov	r8, ip
 8006cdc:	e7dd      	b.n	8006c9a <__multiply+0xe4>
 8006cde:	3e01      	subs	r6, #1
 8006ce0:	e799      	b.n	8006c16 <__multiply+0x60>
	...

08006ce4 <__pow5mult>:
 8006ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce8:	4615      	mov	r5, r2
 8006cea:	f012 0203 	ands.w	r2, r2, #3
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	d007      	beq.n	8006d04 <__pow5mult+0x20>
 8006cf4:	3a01      	subs	r2, #1
 8006cf6:	4c21      	ldr	r4, [pc, #132]	; (8006d7c <__pow5mult+0x98>)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cfe:	f7ff fec8 	bl	8006a92 <__multadd>
 8006d02:	4607      	mov	r7, r0
 8006d04:	10ad      	asrs	r5, r5, #2
 8006d06:	d035      	beq.n	8006d74 <__pow5mult+0x90>
 8006d08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d0a:	b93c      	cbnz	r4, 8006d1c <__pow5mult+0x38>
 8006d0c:	2010      	movs	r0, #16
 8006d0e:	f7ff fe6d 	bl	80069ec <malloc>
 8006d12:	6270      	str	r0, [r6, #36]	; 0x24
 8006d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d18:	6004      	str	r4, [r0, #0]
 8006d1a:	60c4      	str	r4, [r0, #12]
 8006d1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d24:	b94c      	cbnz	r4, 8006d3a <__pow5mult+0x56>
 8006d26:	f240 2171 	movw	r1, #625	; 0x271
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ff3a 	bl	8006ba4 <__i2b>
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d36:	4604      	mov	r4, r0
 8006d38:	6003      	str	r3, [r0, #0]
 8006d3a:	f04f 0800 	mov.w	r8, #0
 8006d3e:	07eb      	lsls	r3, r5, #31
 8006d40:	d50a      	bpl.n	8006d58 <__pow5mult+0x74>
 8006d42:	4639      	mov	r1, r7
 8006d44:	4622      	mov	r2, r4
 8006d46:	4630      	mov	r0, r6
 8006d48:	f7ff ff35 	bl	8006bb6 <__multiply>
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	4681      	mov	r9, r0
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7ff fe87 	bl	8006a64 <_Bfree>
 8006d56:	464f      	mov	r7, r9
 8006d58:	106d      	asrs	r5, r5, #1
 8006d5a:	d00b      	beq.n	8006d74 <__pow5mult+0x90>
 8006d5c:	6820      	ldr	r0, [r4, #0]
 8006d5e:	b938      	cbnz	r0, 8006d70 <__pow5mult+0x8c>
 8006d60:	4622      	mov	r2, r4
 8006d62:	4621      	mov	r1, r4
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff ff26 	bl	8006bb6 <__multiply>
 8006d6a:	6020      	str	r0, [r4, #0]
 8006d6c:	f8c0 8000 	str.w	r8, [r0]
 8006d70:	4604      	mov	r4, r0
 8006d72:	e7e4      	b.n	8006d3e <__pow5mult+0x5a>
 8006d74:	4638      	mov	r0, r7
 8006d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d7a:	bf00      	nop
 8006d7c:	080072a8 	.word	0x080072a8

08006d80 <__lshift>:
 8006d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	460c      	mov	r4, r1
 8006d86:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	6849      	ldr	r1, [r1, #4]
 8006d8e:	eb0a 0903 	add.w	r9, sl, r3
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	4607      	mov	r7, r0
 8006d96:	4616      	mov	r6, r2
 8006d98:	f109 0501 	add.w	r5, r9, #1
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	db32      	blt.n	8006e06 <__lshift+0x86>
 8006da0:	4638      	mov	r0, r7
 8006da2:	f7ff fe2b 	bl	80069fc <_Balloc>
 8006da6:	2300      	movs	r3, #0
 8006da8:	4680      	mov	r8, r0
 8006daa:	f100 0114 	add.w	r1, r0, #20
 8006dae:	461a      	mov	r2, r3
 8006db0:	4553      	cmp	r3, sl
 8006db2:	db2b      	blt.n	8006e0c <__lshift+0x8c>
 8006db4:	6920      	ldr	r0, [r4, #16]
 8006db6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dba:	f104 0314 	add.w	r3, r4, #20
 8006dbe:	f016 021f 	ands.w	r2, r6, #31
 8006dc2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dc6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dca:	d025      	beq.n	8006e18 <__lshift+0x98>
 8006dcc:	f1c2 0e20 	rsb	lr, r2, #32
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	681e      	ldr	r6, [r3, #0]
 8006dd4:	468a      	mov	sl, r1
 8006dd6:	4096      	lsls	r6, r2
 8006dd8:	4330      	orrs	r0, r6
 8006dda:	f84a 0b04 	str.w	r0, [sl], #4
 8006dde:	f853 0b04 	ldr.w	r0, [r3], #4
 8006de2:	459c      	cmp	ip, r3
 8006de4:	fa20 f00e 	lsr.w	r0, r0, lr
 8006de8:	d814      	bhi.n	8006e14 <__lshift+0x94>
 8006dea:	6048      	str	r0, [r1, #4]
 8006dec:	b108      	cbz	r0, 8006df2 <__lshift+0x72>
 8006dee:	f109 0502 	add.w	r5, r9, #2
 8006df2:	3d01      	subs	r5, #1
 8006df4:	4638      	mov	r0, r7
 8006df6:	f8c8 5010 	str.w	r5, [r8, #16]
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	f7ff fe32 	bl	8006a64 <_Bfree>
 8006e00:	4640      	mov	r0, r8
 8006e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e06:	3101      	adds	r1, #1
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	e7c7      	b.n	8006d9c <__lshift+0x1c>
 8006e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006e10:	3301      	adds	r3, #1
 8006e12:	e7cd      	b.n	8006db0 <__lshift+0x30>
 8006e14:	4651      	mov	r1, sl
 8006e16:	e7dc      	b.n	8006dd2 <__lshift+0x52>
 8006e18:	3904      	subs	r1, #4
 8006e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e22:	459c      	cmp	ip, r3
 8006e24:	d8f9      	bhi.n	8006e1a <__lshift+0x9a>
 8006e26:	e7e4      	b.n	8006df2 <__lshift+0x72>

08006e28 <__mcmp>:
 8006e28:	6903      	ldr	r3, [r0, #16]
 8006e2a:	690a      	ldr	r2, [r1, #16]
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	b530      	push	{r4, r5, lr}
 8006e30:	d10c      	bne.n	8006e4c <__mcmp+0x24>
 8006e32:	0092      	lsls	r2, r2, #2
 8006e34:	3014      	adds	r0, #20
 8006e36:	3114      	adds	r1, #20
 8006e38:	1884      	adds	r4, r0, r2
 8006e3a:	4411      	add	r1, r2
 8006e3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e44:	4295      	cmp	r5, r2
 8006e46:	d003      	beq.n	8006e50 <__mcmp+0x28>
 8006e48:	d305      	bcc.n	8006e56 <__mcmp+0x2e>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	bd30      	pop	{r4, r5, pc}
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d3f3      	bcc.n	8006e3c <__mcmp+0x14>
 8006e54:	e7fa      	b.n	8006e4c <__mcmp+0x24>
 8006e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e5a:	e7f7      	b.n	8006e4c <__mcmp+0x24>

08006e5c <__mdiff>:
 8006e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	460d      	mov	r5, r1
 8006e62:	4607      	mov	r7, r0
 8006e64:	4611      	mov	r1, r2
 8006e66:	4628      	mov	r0, r5
 8006e68:	4614      	mov	r4, r2
 8006e6a:	f7ff ffdd 	bl	8006e28 <__mcmp>
 8006e6e:	1e06      	subs	r6, r0, #0
 8006e70:	d108      	bne.n	8006e84 <__mdiff+0x28>
 8006e72:	4631      	mov	r1, r6
 8006e74:	4638      	mov	r0, r7
 8006e76:	f7ff fdc1 	bl	80069fc <_Balloc>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e84:	bfa4      	itt	ge
 8006e86:	4623      	movge	r3, r4
 8006e88:	462c      	movge	r4, r5
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	6861      	ldr	r1, [r4, #4]
 8006e8e:	bfa6      	itte	ge
 8006e90:	461d      	movge	r5, r3
 8006e92:	2600      	movge	r6, #0
 8006e94:	2601      	movlt	r6, #1
 8006e96:	f7ff fdb1 	bl	80069fc <_Balloc>
 8006e9a:	692b      	ldr	r3, [r5, #16]
 8006e9c:	60c6      	str	r6, [r0, #12]
 8006e9e:	6926      	ldr	r6, [r4, #16]
 8006ea0:	f105 0914 	add.w	r9, r5, #20
 8006ea4:	f104 0214 	add.w	r2, r4, #20
 8006ea8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006eac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006eb0:	f100 0514 	add.w	r5, r0, #20
 8006eb4:	f04f 0e00 	mov.w	lr, #0
 8006eb8:	f852 ab04 	ldr.w	sl, [r2], #4
 8006ebc:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ec0:	fa1e f18a 	uxtah	r1, lr, sl
 8006ec4:	b2a3      	uxth	r3, r4
 8006ec6:	1ac9      	subs	r1, r1, r3
 8006ec8:	0c23      	lsrs	r3, r4, #16
 8006eca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006ece:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006ed2:	b289      	uxth	r1, r1
 8006ed4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006ed8:	45c8      	cmp	r8, r9
 8006eda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006ede:	4694      	mov	ip, r2
 8006ee0:	f845 3b04 	str.w	r3, [r5], #4
 8006ee4:	d8e8      	bhi.n	8006eb8 <__mdiff+0x5c>
 8006ee6:	45bc      	cmp	ip, r7
 8006ee8:	d304      	bcc.n	8006ef4 <__mdiff+0x98>
 8006eea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006eee:	b183      	cbz	r3, 8006f12 <__mdiff+0xb6>
 8006ef0:	6106      	str	r6, [r0, #16]
 8006ef2:	e7c5      	b.n	8006e80 <__mdiff+0x24>
 8006ef4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ef8:	fa1e f381 	uxtah	r3, lr, r1
 8006efc:	141a      	asrs	r2, r3, #16
 8006efe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f08:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006f0c:	f845 3b04 	str.w	r3, [r5], #4
 8006f10:	e7e9      	b.n	8006ee6 <__mdiff+0x8a>
 8006f12:	3e01      	subs	r6, #1
 8006f14:	e7e9      	b.n	8006eea <__mdiff+0x8e>

08006f16 <__d2b>:
 8006f16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f1a:	460e      	mov	r6, r1
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	ec59 8b10 	vmov	r8, r9, d0
 8006f22:	4615      	mov	r5, r2
 8006f24:	f7ff fd6a 	bl	80069fc <_Balloc>
 8006f28:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f32:	bb34      	cbnz	r4, 8006f82 <__d2b+0x6c>
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	f1b8 0300 	subs.w	r3, r8, #0
 8006f3a:	d027      	beq.n	8006f8c <__d2b+0x76>
 8006f3c:	a802      	add	r0, sp, #8
 8006f3e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006f42:	f7ff fe00 	bl	8006b46 <__lo0bits>
 8006f46:	9900      	ldr	r1, [sp, #0]
 8006f48:	b1f0      	cbz	r0, 8006f88 <__d2b+0x72>
 8006f4a:	9a01      	ldr	r2, [sp, #4]
 8006f4c:	f1c0 0320 	rsb	r3, r0, #32
 8006f50:	fa02 f303 	lsl.w	r3, r2, r3
 8006f54:	430b      	orrs	r3, r1
 8006f56:	40c2      	lsrs	r2, r0
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	9201      	str	r2, [sp, #4]
 8006f5c:	9b01      	ldr	r3, [sp, #4]
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	bf14      	ite	ne
 8006f64:	2102      	movne	r1, #2
 8006f66:	2101      	moveq	r1, #1
 8006f68:	6139      	str	r1, [r7, #16]
 8006f6a:	b1c4      	cbz	r4, 8006f9e <__d2b+0x88>
 8006f6c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006f70:	4404      	add	r4, r0
 8006f72:	6034      	str	r4, [r6, #0]
 8006f74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f78:	6028      	str	r0, [r5, #0]
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	b003      	add	sp, #12
 8006f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f86:	e7d5      	b.n	8006f34 <__d2b+0x1e>
 8006f88:	6179      	str	r1, [r7, #20]
 8006f8a:	e7e7      	b.n	8006f5c <__d2b+0x46>
 8006f8c:	a801      	add	r0, sp, #4
 8006f8e:	f7ff fdda 	bl	8006b46 <__lo0bits>
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	2101      	movs	r1, #1
 8006f98:	6139      	str	r1, [r7, #16]
 8006f9a:	3020      	adds	r0, #32
 8006f9c:	e7e5      	b.n	8006f6a <__d2b+0x54>
 8006f9e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006fa2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fa6:	6030      	str	r0, [r6, #0]
 8006fa8:	6918      	ldr	r0, [r3, #16]
 8006faa:	f7ff fdad 	bl	8006b08 <__hi0bits>
 8006fae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006fb2:	e7e1      	b.n	8006f78 <__d2b+0x62>

08006fb4 <_calloc_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	fb02 f401 	mul.w	r4, r2, r1
 8006fba:	4621      	mov	r1, r4
 8006fbc:	f000 f808 	bl	8006fd0 <_malloc_r>
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	b118      	cbz	r0, 8006fcc <_calloc_r+0x18>
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	f7fe fb69 	bl	800569e <memset>
 8006fcc:	4628      	mov	r0, r5
 8006fce:	bd38      	pop	{r3, r4, r5, pc}

08006fd0 <_malloc_r>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	1ccd      	adds	r5, r1, #3
 8006fd4:	f025 0503 	bic.w	r5, r5, #3
 8006fd8:	3508      	adds	r5, #8
 8006fda:	2d0c      	cmp	r5, #12
 8006fdc:	bf38      	it	cc
 8006fde:	250c      	movcc	r5, #12
 8006fe0:	2d00      	cmp	r5, #0
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	db01      	blt.n	8006fea <_malloc_r+0x1a>
 8006fe6:	42a9      	cmp	r1, r5
 8006fe8:	d903      	bls.n	8006ff2 <_malloc_r+0x22>
 8006fea:	230c      	movs	r3, #12
 8006fec:	6033      	str	r3, [r6, #0]
 8006fee:	2000      	movs	r0, #0
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
 8006ff2:	f000 f869 	bl	80070c8 <__malloc_lock>
 8006ff6:	4a21      	ldr	r2, [pc, #132]	; (800707c <_malloc_r+0xac>)
 8006ff8:	6814      	ldr	r4, [r2, #0]
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	b991      	cbnz	r1, 8007024 <_malloc_r+0x54>
 8006ffe:	4c20      	ldr	r4, [pc, #128]	; (8007080 <_malloc_r+0xb0>)
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	b91b      	cbnz	r3, 800700c <_malloc_r+0x3c>
 8007004:	4630      	mov	r0, r6
 8007006:	f000 f83d 	bl	8007084 <_sbrk_r>
 800700a:	6020      	str	r0, [r4, #0]
 800700c:	4629      	mov	r1, r5
 800700e:	4630      	mov	r0, r6
 8007010:	f000 f838 	bl	8007084 <_sbrk_r>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d124      	bne.n	8007062 <_malloc_r+0x92>
 8007018:	230c      	movs	r3, #12
 800701a:	6033      	str	r3, [r6, #0]
 800701c:	4630      	mov	r0, r6
 800701e:	f000 f854 	bl	80070ca <__malloc_unlock>
 8007022:	e7e4      	b.n	8006fee <_malloc_r+0x1e>
 8007024:	680b      	ldr	r3, [r1, #0]
 8007026:	1b5b      	subs	r3, r3, r5
 8007028:	d418      	bmi.n	800705c <_malloc_r+0x8c>
 800702a:	2b0b      	cmp	r3, #11
 800702c:	d90f      	bls.n	800704e <_malloc_r+0x7e>
 800702e:	600b      	str	r3, [r1, #0]
 8007030:	50cd      	str	r5, [r1, r3]
 8007032:	18cc      	adds	r4, r1, r3
 8007034:	4630      	mov	r0, r6
 8007036:	f000 f848 	bl	80070ca <__malloc_unlock>
 800703a:	f104 000b 	add.w	r0, r4, #11
 800703e:	1d23      	adds	r3, r4, #4
 8007040:	f020 0007 	bic.w	r0, r0, #7
 8007044:	1ac3      	subs	r3, r0, r3
 8007046:	d0d3      	beq.n	8006ff0 <_malloc_r+0x20>
 8007048:	425a      	negs	r2, r3
 800704a:	50e2      	str	r2, [r4, r3]
 800704c:	e7d0      	b.n	8006ff0 <_malloc_r+0x20>
 800704e:	428c      	cmp	r4, r1
 8007050:	684b      	ldr	r3, [r1, #4]
 8007052:	bf16      	itet	ne
 8007054:	6063      	strne	r3, [r4, #4]
 8007056:	6013      	streq	r3, [r2, #0]
 8007058:	460c      	movne	r4, r1
 800705a:	e7eb      	b.n	8007034 <_malloc_r+0x64>
 800705c:	460c      	mov	r4, r1
 800705e:	6849      	ldr	r1, [r1, #4]
 8007060:	e7cc      	b.n	8006ffc <_malloc_r+0x2c>
 8007062:	1cc4      	adds	r4, r0, #3
 8007064:	f024 0403 	bic.w	r4, r4, #3
 8007068:	42a0      	cmp	r0, r4
 800706a:	d005      	beq.n	8007078 <_malloc_r+0xa8>
 800706c:	1a21      	subs	r1, r4, r0
 800706e:	4630      	mov	r0, r6
 8007070:	f000 f808 	bl	8007084 <_sbrk_r>
 8007074:	3001      	adds	r0, #1
 8007076:	d0cf      	beq.n	8007018 <_malloc_r+0x48>
 8007078:	6025      	str	r5, [r4, #0]
 800707a:	e7db      	b.n	8007034 <_malloc_r+0x64>
 800707c:	200002a0 	.word	0x200002a0
 8007080:	200002a4 	.word	0x200002a4

08007084 <_sbrk_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4c06      	ldr	r4, [pc, #24]	; (80070a0 <_sbrk_r+0x1c>)
 8007088:	2300      	movs	r3, #0
 800708a:	4605      	mov	r5, r0
 800708c:	4608      	mov	r0, r1
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	f7fe fa62 	bl	8005558 <_sbrk>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d102      	bne.n	800709e <_sbrk_r+0x1a>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	b103      	cbz	r3, 800709e <_sbrk_r+0x1a>
 800709c:	602b      	str	r3, [r5, #0]
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	2000058c 	.word	0x2000058c

080070a4 <__ascii_mbtowc>:
 80070a4:	b082      	sub	sp, #8
 80070a6:	b901      	cbnz	r1, 80070aa <__ascii_mbtowc+0x6>
 80070a8:	a901      	add	r1, sp, #4
 80070aa:	b142      	cbz	r2, 80070be <__ascii_mbtowc+0x1a>
 80070ac:	b14b      	cbz	r3, 80070c2 <__ascii_mbtowc+0x1e>
 80070ae:	7813      	ldrb	r3, [r2, #0]
 80070b0:	600b      	str	r3, [r1, #0]
 80070b2:	7812      	ldrb	r2, [r2, #0]
 80070b4:	1c10      	adds	r0, r2, #0
 80070b6:	bf18      	it	ne
 80070b8:	2001      	movne	r0, #1
 80070ba:	b002      	add	sp, #8
 80070bc:	4770      	bx	lr
 80070be:	4610      	mov	r0, r2
 80070c0:	e7fb      	b.n	80070ba <__ascii_mbtowc+0x16>
 80070c2:	f06f 0001 	mvn.w	r0, #1
 80070c6:	e7f8      	b.n	80070ba <__ascii_mbtowc+0x16>

080070c8 <__malloc_lock>:
 80070c8:	4770      	bx	lr

080070ca <__malloc_unlock>:
 80070ca:	4770      	bx	lr

080070cc <__ascii_wctomb>:
 80070cc:	b149      	cbz	r1, 80070e2 <__ascii_wctomb+0x16>
 80070ce:	2aff      	cmp	r2, #255	; 0xff
 80070d0:	bf85      	ittet	hi
 80070d2:	238a      	movhi	r3, #138	; 0x8a
 80070d4:	6003      	strhi	r3, [r0, #0]
 80070d6:	700a      	strbls	r2, [r1, #0]
 80070d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80070dc:	bf98      	it	ls
 80070de:	2001      	movls	r0, #1
 80070e0:	4770      	bx	lr
 80070e2:	4608      	mov	r0, r1
 80070e4:	4770      	bx	lr
	...

080070e8 <_init>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	bf00      	nop
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr

080070f4 <_fini>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	bf00      	nop
 80070f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fa:	bc08      	pop	{r3}
 80070fc:	469e      	mov	lr, r3
 80070fe:	4770      	bx	lr
