
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009488  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  08009628  08009628  00019628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc8  08009dc8  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08009dc8  08009dc8  00019dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd0  08009dd0  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08009dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  20000208  08009fe0  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  08009fe0  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022aad  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044d6  00000000  00000000  00042ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011b84  00000000  00000000  000471bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000017a0  00000000  00000000  00058d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a40  00000000  00000000  0005a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001b100  00000000  00000000  0005bf20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00015607  00000000  00000000  00077020  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009631e  00000000  00000000  0008c627  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00122945  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055d4  00000000  00000000  001229c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009610 	.word	0x08009610

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08009610 	.word	0x08009610

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 8000fb8:	ee70 0a60 	vsub.f32	s1, s0, s1
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <pid_calculate_roll+0xac>)
 8000fbe:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <pid_calculate_roll+0xb0>)
 8000fc4:	edd3 6a00 	vldr	s13, [r3]
 8000fc8:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <pid_calculate_roll+0xb4>)
 8000fce:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <pid_calculate_roll+0xb8>)
 8000fd4:	edd3 7a00 	vldr	s15, [r3]
 8000fd8:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8000fdc:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001074 <pid_calculate_roll+0xbc>
 8000fe0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <pid_calculate_roll+0xc0>)
 8000fe6:	ed93 7a00 	vldr	s14, [r3]
 8000fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fee:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <pid_calculate_roll+0xc4>)
 8000ff4:	ed93 6a00 	vldr	s12, [r3]
 8000ff8:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8000ffc:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8001000:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <pid_calculate_roll+0xc8>)
 8001002:	ed92 6a00 	vldr	s12, [r2]
 8001006:	ee27 7a06 	vmul.f32	s14, s14, s12
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <pid_calculate_roll+0xcc>)
 800100c:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8001010:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8001014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <pid_calculate_roll+0xd0>)
 800101e:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <pid_calculate_roll+0xd4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	425a      	negs	r2, r3
 8001028:	ee07 2a10 	vmov	s14, r2
 800102c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	d40c      	bmi.n	8001054 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 800103a:	ee07 3a10 	vmov	s14, r3
 800103e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd06      	ble.n	800105a <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <pid_calculate_roll+0xd0>)
 800104e:	ed83 7a00 	vstr	s14, [r3]
 8001052:	e002      	b.n	800105a <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <pid_calculate_roll+0xd0>)
 8001056:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <pid_calculate_roll+0xd0>)
 800105c:	ed93 0a00 	vldr	s0, [r3]
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000230 	.word	0x20000230
 8001068:	20000018 	.word	0x20000018
 800106c:	200003b8 	.word	0x200003b8
 8001070:	20000014 	.word	0x20000014
 8001074:	3b012912 	.word	0x3b012912
 8001078:	200003c4 	.word	0x200003c4
 800107c:	20000234 	.word	0x20000234
 8001080:	20000010 	.word	0x20000010
 8001084:	200003a4 	.word	0x200003a4
 8001088:	20000238 	.word	0x20000238
 800108c:	2000001c 	.word	0x2000001c

08001090 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <reset_pid_roll+0x14>)
 8001094:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <reset_pid_roll+0x18>)
 8001098:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <reset_pid_roll+0x1c>)
 800109c:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <reset_pid_roll+0x20>)
 80010a0:	6013      	str	r3, [r2, #0]

}
 80010a2:	4770      	bx	lr
 80010a4:	200003b8 	.word	0x200003b8
 80010a8:	200003c4 	.word	0x200003c4
 80010ac:	200003a4 	.word	0x200003a4
 80010b0:	20000238 	.word	0x20000238

080010b4 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 80010b4:	ee70 0a60 	vsub.f32	s1, s0, s1
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <pid_calculate_pitch+0xac>)
 80010ba:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <pid_calculate_pitch+0xb0>)
 80010c0:	edd3 6a00 	vldr	s13, [r3]
 80010c4:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <pid_calculate_pitch+0xb4>)
 80010ca:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <pid_calculate_pitch+0xb8>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80010d8:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001170 <pid_calculate_pitch+0xbc>
 80010dc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <pid_calculate_pitch+0xc0>)
 80010e2:	ed93 7a00 	vldr	s14, [r3]
 80010e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ea:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <pid_calculate_pitch+0xc4>)
 80010f0:	ed93 6a00 	vldr	s12, [r3]
 80010f4:	ee30 6ac6 	vsub.f32	s12, s1, s12
 80010f8:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80010fc:	4a1f      	ldr	r2, [pc, #124]	; (800117c <pid_calculate_pitch+0xc8>)
 80010fe:	ed92 6a00 	vldr	s12, [r2]
 8001102:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001106:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <pid_calculate_pitch+0xcc>)
 8001108:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 800110c:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8001110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <pid_calculate_pitch+0xd0>)
 800111a:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <pid_calculate_pitch+0xd4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	425a      	negs	r2, r3
 8001124:	ee07 2a10 	vmov	s14, r2
 8001128:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800112c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	d40c      	bmi.n	8001150 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8001136:	ee07 3a10 	vmov	s14, r3
 800113a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800113e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	dd06      	ble.n	8001156 <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <pid_calculate_pitch+0xd0>)
 800114a:	ed83 7a00 	vstr	s14, [r3]
 800114e:	e002      	b.n	8001156 <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <pid_calculate_pitch+0xd0>)
 8001152:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <pid_calculate_pitch+0xd0>)
 8001158:	ed93 0a00 	vldr	s0, [r3]
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000224 	.word	0x20000224
 8001164:	20000008 	.word	0x20000008
 8001168:	200003b0 	.word	0x200003b0
 800116c:	20000004 	.word	0x20000004
 8001170:	3b012912 	.word	0x3b012912
 8001174:	200003b4 	.word	0x200003b4
 8001178:	20000228 	.word	0x20000228
 800117c:	20000000 	.word	0x20000000
 8001180:	200003a8 	.word	0x200003a8
 8001184:	2000022c 	.word	0x2000022c
 8001188:	2000000c 	.word	0x2000000c

0800118c <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <reset_pid_pitch+0x14>)
 8001190:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <reset_pid_pitch+0x18>)
 8001194:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <reset_pid_pitch+0x1c>)
 8001198:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <reset_pid_pitch+0x20>)
 800119c:	6013      	str	r3, [r2, #0]

}
 800119e:	4770      	bx	lr
 80011a0:	200003b0 	.word	0x200003b0
 80011a4:	200003b4 	.word	0x200003b4
 80011a8:	200003a8 	.word	0x200003a8
 80011ac:	2000022c 	.word	0x2000022c

080011b0 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = IMU_yaw_value - yaw_setpoint;
 80011b0:	ee70 0a60 	vsub.f32	s1, s0, s1
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <pid_calculate_yaw+0xac>)
 80011b6:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <pid_calculate_yaw+0xb0>)
 80011bc:	edd3 6a00 	vldr	s13, [r3]
 80011c0:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <pid_calculate_yaw+0xb4>)
 80011c6:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <pid_calculate_yaw+0xb8>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80011d4:	eddf 5a25 	vldr	s11, [pc, #148]	; 800126c <pid_calculate_yaw+0xbc>
 80011d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <pid_calculate_yaw+0xc0>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e6:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <pid_calculate_yaw+0xc4>)
 80011ec:	ed93 6a00 	vldr	s12, [r3]
 80011f0:	ee30 6ac6 	vsub.f32	s12, s1, s12
 80011f4:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80011f8:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <pid_calculate_yaw+0xc8>)
 80011fa:	ed92 6a00 	vldr	s12, [r2]
 80011fe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <pid_calculate_yaw+0xcc>)
 8001204:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 8001208:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 800120c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <pid_calculate_yaw+0xd0>)
 8001216:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <pid_calculate_yaw+0xd4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	425a      	negs	r2, r3
 8001220:	ee07 2a10 	vmov	s14, r2
 8001224:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d40c      	bmi.n	800124c <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 8001232:	ee07 3a10 	vmov	s14, r3
 8001236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800123a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	dd06      	ble.n	8001252 <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <pid_calculate_yaw+0xd0>)
 8001246:	ed83 7a00 	vstr	s14, [r3]
 800124a:	e002      	b.n	8001252 <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <pid_calculate_yaw+0xd0>)
 800124e:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <pid_calculate_yaw+0xd0>)
 8001254:	ed93 0a00 	vldr	s0, [r3]
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000023c 	.word	0x2000023c
 8001260:	20000028 	.word	0x20000028
 8001264:	200003c0 	.word	0x200003c0
 8001268:	20000024 	.word	0x20000024
 800126c:	3b012912 	.word	0x3b012912
 8001270:	200003bc 	.word	0x200003bc
 8001274:	20000240 	.word	0x20000240
 8001278:	20000020 	.word	0x20000020
 800127c:	200003ac 	.word	0x200003ac
 8001280:	20000244 	.word	0x20000244
 8001284:	2000002c 	.word	0x2000002c

08001288 <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <reset_pid_yaw+0x14>)
 800128c:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <reset_pid_yaw+0x18>)
 8001290:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <reset_pid_yaw+0x1c>)
 8001294:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <reset_pid_yaw+0x20>)
 8001298:	6013      	str	r3, [r2, #0]

}
 800129a:	4770      	bx	lr
 800129c:	200003c0 	.word	0x200003c0
 80012a0:	200003bc 	.word	0x200003bc
 80012a4:	200003ac 	.word	0x200003ac
 80012a8:	20000244 	.word	0x20000244

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_Init+0x30>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012b6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80012be:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f81b 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f003 fc98 	bl	8004c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f003 fc6a 	bl	8004bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80012d8:	2000      	movs	r0, #0
 80012da:	bd08      	pop	{r3, pc}
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <HAL_IncTick+0x10>)
 80012e2:	6811      	ldr	r1, [r2, #0]
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <HAL_IncTick+0x14>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	440b      	add	r3, r1
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200003c8 	.word	0x200003c8
 80012f4:	20000030 	.word	0x20000030

080012f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012f8:	4b01      	ldr	r3, [pc, #4]	; (8001300 <HAL_GetTick+0x8>)
 80012fa:	6818      	ldr	r0, [r3, #0]
}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200003c8 	.word	0x200003c8

08001304 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001306:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001308:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800130c:	041b      	lsls	r3, r3, #16
 800130e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	0200      	lsls	r0, r0, #8
 8001312:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001316:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001318:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800131c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001320:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001328:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_NVIC_SetPriority+0x60>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001332:	f1c3 0407 	rsb	r4, r3, #7
 8001336:	2c04      	cmp	r4, #4
 8001338:	bf28      	it	cs
 800133a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133c:	1d1d      	adds	r5, r3, #4
 800133e:	2d06      	cmp	r5, #6
 8001340:	d918      	bls.n	8001374 <HAL_NVIC_SetPriority+0x4c>
 8001342:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001348:	fa05 f404 	lsl.w	r4, r5, r4
 800134c:	ea21 0104 	bic.w	r1, r1, r4
 8001350:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001352:	fa05 f303 	lsl.w	r3, r5, r3
 8001356:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800135c:	2800      	cmp	r0, #0
 800135e:	db0b      	blt.n	8001378 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	0109      	lsls	r1, r1, #4
 8001362:	b2c9      	uxtb	r1, r1
 8001364:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001368:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800136c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001370:	bc30      	pop	{r4, r5}
 8001372:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001374:	2300      	movs	r3, #0
 8001376:	e7e5      	b.n	8001344 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	f000 000f 	and.w	r0, r0, #15
 800137c:	0109      	lsls	r1, r1, #4
 800137e:	b2c9      	uxtb	r1, r1
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <HAL_NVIC_SetPriority+0x64>)
 8001382:	5419      	strb	r1, [r3, r0]
 8001384:	e7f4      	b.n	8001370 <HAL_NVIC_SetPriority+0x48>
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	e000ed14 	.word	0xe000ed14

08001390 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001390:	2800      	cmp	r0, #0
 8001392:	db07      	blt.n	80013a4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001394:	f000 021f 	and.w	r2, r0, #31
 8001398:	0940      	lsrs	r0, r0, #5
 800139a:	2301      	movs	r3, #1
 800139c:	4093      	lsls	r3, r2
 800139e:	4a02      	ldr	r2, [pc, #8]	; (80013a8 <HAL_NVIC_EnableIRQ+0x18>)
 80013a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80013ac:	b168      	cbz	r0, 80013ca <HAL_CRC_Init+0x1e>
{
 80013ae:	b510      	push	{r4, lr}
 80013b0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013b2:	7943      	ldrb	r3, [r0, #5]
 80013b4:	b12b      	cbz	r3, 80013c2 <HAL_CRC_Init+0x16>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80013b6:	2302      	movs	r3, #2
 80013b8:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013ba:	2301      	movs	r3, #1
 80013bc:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80013be:	2000      	movs	r0, #0
}
 80013c0:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80013c2:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80013c4:	f002 fd1a 	bl	8003dfc <HAL_CRC_MspInit>
 80013c8:	e7f5      	b.n	80013b6 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80013ca:	2001      	movs	r0, #1
}
 80013cc:	4770      	bx	lr

080013ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013ce:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013d0:	6805      	ldr	r5, [r0, #0]
 80013d2:	682c      	ldr	r4, [r5, #0]
 80013d4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80013d8:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013da:	6804      	ldr	r4, [r0, #0]
 80013dc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013de:	6883      	ldr	r3, [r0, #8]
 80013e0:	2b40      	cmp	r3, #64	; 0x40
 80013e2:	d005      	beq.n	80013f0 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80013e4:	6803      	ldr	r3, [r0, #0]
 80013e6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80013e8:	6803      	ldr	r3, [r0, #0]
 80013ea:	60da      	str	r2, [r3, #12]
  }
}
 80013ec:	bc30      	pop	{r4, r5}
 80013ee:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80013f0:	6803      	ldr	r3, [r0, #0]
 80013f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80013f4:	6803      	ldr	r3, [r0, #0]
 80013f6:	60d9      	str	r1, [r3, #12]
 80013f8:	e7f8      	b.n	80013ec <DMA_SetConfig+0x1e>
	...

080013fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013fc:	6802      	ldr	r2, [r0, #0]
 80013fe:	b2d3      	uxtb	r3, r2
 8001400:	3b10      	subs	r3, #16
 8001402:	490b      	ldr	r1, [pc, #44]	; (8001430 <DMA_CalcBaseAndBitshift+0x34>)
 8001404:	fba1 1303 	umull	r1, r3, r1, r3
 8001408:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800140a:	490a      	ldr	r1, [pc, #40]	; (8001434 <DMA_CalcBaseAndBitshift+0x38>)
 800140c:	5cc9      	ldrb	r1, [r1, r3]
 800140e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001410:	2b03      	cmp	r3, #3
 8001412:	d806      	bhi.n	8001422 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001414:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8001418:	f022 0203 	bic.w	r2, r2, #3
 800141c:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800141e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001420:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001422:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8001426:	f022 0203 	bic.w	r2, r2, #3
 800142a:	3204      	adds	r2, #4
 800142c:	6582      	str	r2, [r0, #88]	; 0x58
 800142e:	e7f6      	b.n	800141e <DMA_CalcBaseAndBitshift+0x22>
 8001430:	aaaaaaab 	.word	0xaaaaaaab
 8001434:	08009628 	.word	0x08009628

08001438 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001438:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800143a:	6982      	ldr	r2, [r0, #24]
 800143c:	b992      	cbnz	r2, 8001464 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800143e:	2b01      	cmp	r3, #1
 8001440:	d00a      	beq.n	8001458 <DMA_CheckFifoParam+0x20>
 8001442:	b11b      	cbz	r3, 800144c <DMA_CheckFifoParam+0x14>
 8001444:	2b02      	cmp	r3, #2
 8001446:	d001      	beq.n	800144c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001448:	2000      	movs	r0, #0
 800144a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800144c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800144e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001452:	d12c      	bne.n	80014ae <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001454:	2000      	movs	r0, #0
 8001456:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001458:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800145a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800145e:	d028      	beq.n	80014b2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001460:	2000      	movs	r0, #0
 8001462:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001464:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001468:	d005      	beq.n	8001476 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800146a:	2b02      	cmp	r3, #2
 800146c:	d929      	bls.n	80014c2 <DMA_CheckFifoParam+0x8a>
 800146e:	2b03      	cmp	r3, #3
 8001470:	d015      	beq.n	800149e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8001472:	2000      	movs	r0, #0
 8001474:	4770      	bx	lr
    switch (tmp)
 8001476:	2b03      	cmp	r3, #3
 8001478:	d803      	bhi.n	8001482 <DMA_CheckFifoParam+0x4a>
 800147a:	e8df f003 	tbb	[pc, r3]
 800147e:	041c      	.short	0x041c
 8001480:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8001482:	2000      	movs	r0, #0
 8001484:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001486:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001488:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800148c:	d115      	bne.n	80014ba <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800148e:	2000      	movs	r0, #0
 8001490:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001492:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001494:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001498:	d011      	beq.n	80014be <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800149a:	2000      	movs	r0, #0
 800149c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800149e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014a4:	d001      	beq.n	80014aa <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80014a8:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80014aa:	2000      	movs	r0, #0
 80014ac:	4770      	bx	lr
        status = HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
 80014b0:	4770      	bx	lr
        status = HAL_ERROR;
 80014b2:	2001      	movs	r0, #1
 80014b4:	4770      	bx	lr
      status = HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
 80014b8:	4770      	bx	lr
        status = HAL_ERROR;
 80014ba:	2001      	movs	r0, #1
 80014bc:	4770      	bx	lr
        status = HAL_ERROR;
 80014be:	2001      	movs	r0, #1
 80014c0:	4770      	bx	lr
      status = HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_DMA_Init>:
{
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff ff14 	bl	80012f8 <HAL_GetTick>
  if(hdma == NULL)
 80014d0:	2c00      	cmp	r4, #0
 80014d2:	d05b      	beq.n	800158c <HAL_DMA_Init+0xc4>
 80014d4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80014d6:	2300      	movs	r3, #0
 80014d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80014dc:	2302      	movs	r3, #2
 80014de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80014e2:	6822      	ldr	r2, [r4, #0]
 80014e4:	6813      	ldr	r3, [r2, #0]
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	f012 0f01 	tst.w	r2, #1
 80014f4:	d00a      	beq.n	800150c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014f6:	f7ff feff 	bl	80012f8 <HAL_GetTick>
 80014fa:	1b40      	subs	r0, r0, r5
 80014fc:	2805      	cmp	r0, #5
 80014fe:	d9f5      	bls.n	80014ec <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001500:	2320      	movs	r3, #32
 8001502:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001504:	2003      	movs	r0, #3
 8001506:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800150a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800150c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800150e:	4820      	ldr	r0, [pc, #128]	; (8001590 <HAL_DMA_Init+0xc8>)
 8001510:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001512:	6861      	ldr	r1, [r4, #4]
 8001514:	68a2      	ldr	r2, [r4, #8]
 8001516:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001518:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151c:	6921      	ldr	r1, [r4, #16]
 800151e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001520:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001522:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001524:	69a1      	ldr	r1, [r4, #24]
 8001526:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001528:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800152c:	6a21      	ldr	r1, [r4, #32]
 800152e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001530:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001532:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001534:	2904      	cmp	r1, #4
 8001536:	d01e      	beq.n	8001576 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001538:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800153a:	6826      	ldr	r6, [r4, #0]
 800153c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800153e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001544:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001546:	2b04      	cmp	r3, #4
 8001548:	d107      	bne.n	800155a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800154a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800154c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800154e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001550:	b11b      	cbz	r3, 800155a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff ff70 	bl	8001438 <DMA_CheckFifoParam>
 8001558:	b990      	cbnz	r0, 8001580 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800155a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff ff4d 	bl	80013fc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001562:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001564:	233f      	movs	r3, #63	; 0x3f
 8001566:	4093      	lsls	r3, r2
 8001568:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156a:	2000      	movs	r0, #0
 800156c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800156e:	2301      	movs	r3, #1
 8001570:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001574:	e7c9      	b.n	800150a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001576:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001578:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800157a:	4301      	orrs	r1, r0
 800157c:	430a      	orrs	r2, r1
 800157e:	e7db      	b.n	8001538 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001584:	2001      	movs	r0, #1
 8001586:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800158a:	e7be      	b.n	800150a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800158c:	2001      	movs	r0, #1
 800158e:	e7bc      	b.n	800150a <HAL_DMA_Init+0x42>
 8001590:	f010803f 	.word	0xf010803f

08001594 <HAL_DMA_Start_IT>:
{
 8001594:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001596:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001598:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800159c:	2c01      	cmp	r4, #1
 800159e:	d031      	beq.n	8001604 <HAL_DMA_Start_IT+0x70>
 80015a0:	2401      	movs	r4, #1
 80015a2:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80015a6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80015aa:	b2e4      	uxtb	r4, r4
 80015ac:	2c01      	cmp	r4, #1
 80015ae:	d004      	beq.n	80015ba <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80015b0:	2300      	movs	r3, #0
 80015b2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80015b6:	2002      	movs	r0, #2
}
 80015b8:	bd38      	pop	{r3, r4, r5, pc}
 80015ba:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80015bc:	2002      	movs	r0, #2
 80015be:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	2000      	movs	r0, #0
 80015c4:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015c6:	4620      	mov	r0, r4
 80015c8:	f7ff ff01 	bl	80013ce <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015cc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015ce:	233f      	movs	r3, #63	; 0x3f
 80015d0:	4093      	lsls	r3, r2
 80015d2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015d4:	6822      	ldr	r2, [r4, #0]
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	f043 0316 	orr.w	r3, r3, #22
 80015dc:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	6953      	ldr	r3, [r2, #20]
 80015e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e6:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80015e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ea:	b123      	cbz	r3, 80015f6 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 80015ec:	6822      	ldr	r2, [r4, #0]
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	6813      	ldr	r3, [r2, #0]
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2000      	movs	r0, #0
 8001602:	e7d9      	b.n	80015b8 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8001604:	2002      	movs	r0, #2
 8001606:	e7d7      	b.n	80015b8 <HAL_DMA_Start_IT+0x24>

08001608 <HAL_DMA_Abort>:
{
 8001608:	b570      	push	{r4, r5, r6, lr}
 800160a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800160c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800160e:	f7ff fe73 	bl	80012f8 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d006      	beq.n	800162a <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001620:	2300      	movs	r3, #0
 8001622:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001626:	2001      	movs	r0, #1
}
 8001628:	bd70      	pop	{r4, r5, r6, pc}
 800162a:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	f023 0316 	bic.w	r3, r3, #22
 8001634:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001636:	6822      	ldr	r2, [r4, #0]
 8001638:	6953      	ldr	r3, [r2, #20]
 800163a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800163e:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001642:	b1e3      	cbz	r3, 800167e <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001644:	6822      	ldr	r2, [r4, #0]
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f023 0308 	bic.w	r3, r3, #8
 800164c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800164e:	6822      	ldr	r2, [r4, #0]
 8001650:	6813      	ldr	r3, [r2, #0]
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f013 0f01 	tst.w	r3, #1
 8001660:	d011      	beq.n	8001686 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001662:	f7ff fe49 	bl	80012f8 <HAL_GetTick>
 8001666:	1b40      	subs	r0, r0, r5
 8001668:	2805      	cmp	r0, #5
 800166a:	d9f5      	bls.n	8001658 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166c:	2320      	movs	r3, #32
 800166e:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8001670:	2300      	movs	r3, #0
 8001672:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001676:	2003      	movs	r0, #3
 8001678:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800167c:	e7d4      	b.n	8001628 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800167e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1df      	bne.n	8001644 <HAL_DMA_Abort+0x3c>
 8001684:	e7e3      	b.n	800164e <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001686:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001688:	233f      	movs	r3, #63	; 0x3f
 800168a:	4093      	lsls	r3, r2
 800168c:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 800168e:	2000      	movs	r0, #0
 8001690:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001694:	2301      	movs	r3, #1
 8001696:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800169a:	e7c5      	b.n	8001628 <HAL_DMA_Abort+0x20>

0800169c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d003      	beq.n	80016ae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
 80016ac:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ae:	2305      	movs	r3, #5
 80016b0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80016b4:	6802      	ldr	r2, [r0, #0]
 80016b6:	6813      	ldr	r3, [r2, #0]
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80016be:	2000      	movs	r0, #0
}
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_DMA_IRQHandler>:
{
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	b083      	sub	sp, #12
 80016c8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016ce:	4b72      	ldr	r3, [pc, #456]	; (8001898 <HAL_DMA_IRQHandler+0x1d4>)
 80016d0:	681d      	ldr	r5, [r3, #0]
 80016d2:	4b72      	ldr	r3, [pc, #456]	; (800189c <HAL_DMA_IRQHandler+0x1d8>)
 80016d4:	fba3 3505 	umull	r3, r5, r3, r5
 80016d8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016da:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80016dc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016de:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80016e0:	2308      	movs	r3, #8
 80016e2:	4093      	lsls	r3, r2
 80016e4:	4233      	tst	r3, r6
 80016e6:	d010      	beq.n	800170a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016e8:	6803      	ldr	r3, [r0, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	f012 0f04 	tst.w	r2, #4
 80016f0:	d00b      	beq.n	800170a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	f022 0204 	bic.w	r2, r2, #4
 80016f8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016fa:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80016fc:	2308      	movs	r3, #8
 80016fe:	4093      	lsls	r3, r2
 8001700:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001702:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800170a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800170c:	2301      	movs	r3, #1
 800170e:	4093      	lsls	r3, r2
 8001710:	4233      	tst	r3, r6
 8001712:	d009      	beq.n	8001728 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001714:	6822      	ldr	r2, [r4, #0]
 8001716:	6952      	ldr	r2, [r2, #20]
 8001718:	f012 0f80 	tst.w	r2, #128	; 0x80
 800171c:	d004      	beq.n	8001728 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800171e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001720:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001722:	f043 0302 	orr.w	r3, r3, #2
 8001726:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001728:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800172a:	2304      	movs	r3, #4
 800172c:	4093      	lsls	r3, r2
 800172e:	4233      	tst	r3, r6
 8001730:	d009      	beq.n	8001746 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001732:	6822      	ldr	r2, [r4, #0]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	f012 0f02 	tst.w	r2, #2
 800173a:	d004      	beq.n	8001746 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800173c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800173e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001746:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001748:	2310      	movs	r3, #16
 800174a:	4093      	lsls	r3, r2
 800174c:	4233      	tst	r3, r6
 800174e:	d024      	beq.n	800179a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001750:	6822      	ldr	r2, [r4, #0]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	f012 0f08 	tst.w	r2, #8
 8001758:	d01f      	beq.n	800179a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800175a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800175c:	6823      	ldr	r3, [r4, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001764:	d00d      	beq.n	8001782 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800176c:	d104      	bne.n	8001778 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800176e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001770:	b19b      	cbz	r3, 800179a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001772:	4620      	mov	r0, r4
 8001774:	4798      	blx	r3
 8001776:	e010      	b.n	800179a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001778:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800177a:	b173      	cbz	r3, 800179a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800177c:	4620      	mov	r0, r4
 800177e:	4798      	blx	r3
 8001780:	e00b      	b.n	800179a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001788:	d103      	bne.n	8001792 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	f022 0208 	bic.w	r2, r2, #8
 8001790:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001794:	b10b      	cbz	r3, 800179a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001796:	4620      	mov	r0, r4
 8001798:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800179a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800179c:	2320      	movs	r3, #32
 800179e:	4093      	lsls	r3, r2
 80017a0:	4233      	tst	r3, r6
 80017a2:	d055      	beq.n	8001850 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017a4:	6822      	ldr	r2, [r4, #0]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	f012 0f10 	tst.w	r2, #16
 80017ac:	d050      	beq.n	8001850 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017ae:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017b0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d00e      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80017c2:	d033      	beq.n	800182c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80017ca:	d12a      	bne.n	8001822 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80017cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d03e      	beq.n	8001850 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80017d2:	4620      	mov	r0, r4
 80017d4:	4798      	blx	r3
 80017d6:	e03b      	b.n	8001850 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d8:	6822      	ldr	r2, [r4, #0]
 80017da:	6813      	ldr	r3, [r2, #0]
 80017dc:	f023 0316 	bic.w	r3, r3, #22
 80017e0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017e2:	6822      	ldr	r2, [r4, #0]
 80017e4:	6953      	ldr	r3, [r2, #20]
 80017e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017ea:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ee:	b1a3      	cbz	r3, 800181a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017f0:	6822      	ldr	r2, [r4, #0]
 80017f2:	6813      	ldr	r3, [r2, #0]
 80017f4:	f023 0308 	bic.w	r3, r3, #8
 80017f8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017fc:	233f      	movs	r3, #63	; 0x3f
 80017fe:	4093      	lsls	r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001802:	2300      	movs	r3, #0
 8001804:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001808:	2301      	movs	r3, #1
 800180a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800180e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001810:	2b00      	cmp	r3, #0
 8001812:	d03f      	beq.n	8001894 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001814:	4620      	mov	r0, r4
 8001816:	4798      	blx	r3
 8001818:	e03c      	b.n	8001894 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800181a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e7      	bne.n	80017f0 <HAL_DMA_IRQHandler+0x12c>
 8001820:	e7eb      	b.n	80017fa <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001822:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001824:	b1a3      	cbz	r3, 8001850 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001826:	4620      	mov	r0, r4
 8001828:	4798      	blx	r3
 800182a:	e011      	b.n	8001850 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001832:	d109      	bne.n	8001848 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	f022 0210 	bic.w	r2, r2, #16
 800183a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800183c:	2300      	movs	r3, #0
 800183e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001842:	2301      	movs	r3, #1
 8001844:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001848:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800184a:	b10b      	cbz	r3, 8001850 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800184c:	4620      	mov	r0, r4
 800184e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001850:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001852:	b1fb      	cbz	r3, 8001894 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001854:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001856:	f013 0f01 	tst.w	r3, #1
 800185a:	d017      	beq.n	800188c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800185c:	2305      	movs	r3, #5
 800185e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001862:	6822      	ldr	r2, [r4, #0]
 8001864:	6813      	ldr	r3, [r2, #0]
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800186c:	9b01      	ldr	r3, [sp, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	42ab      	cmp	r3, r5
 8001874:	d804      	bhi.n	8001880 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f013 0f01 	tst.w	r3, #1
 800187e:	d1f5      	bne.n	800186c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001880:	2300      	movs	r3, #0
 8001882:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001886:	2301      	movs	r3, #1
 8001888:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800188c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800188e:	b10b      	cbz	r3, 8001894 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001890:	4620      	mov	r0, r4
 8001892:	4798      	blx	r3
}
 8001894:	b003      	add	sp, #12
 8001896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001898:	20000034 	.word	0x20000034
 800189c:	1b4e81b5 	.word	0x1b4e81b5

080018a0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f013 0f10 	tst.w	r3, #16
 80018a8:	d007      	beq.n	80018ba <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018aa:	4a26      	ldr	r2, [pc, #152]	; (8001944 <FLASH_SetErrorCode+0xa4>)
 80018ac:	69d3      	ldr	r3, [r2, #28]
 80018ae:	f043 0310 	orr.w	r3, r3, #16
 80018b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 80018b6:	2210      	movs	r2, #16
 80018b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f013 0f20 	tst.w	r3, #32
 80018c2:	d007      	beq.n	80018d4 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80018c4:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <FLASH_SetErrorCode+0xa4>)
 80018c6:	69d3      	ldr	r3, [r2, #28]
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 80018d0:	2220      	movs	r2, #32
 80018d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018dc:	d007      	beq.n	80018ee <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80018de:	4a19      	ldr	r2, [pc, #100]	; (8001944 <FLASH_SetErrorCode+0xa4>)
 80018e0:	69d3      	ldr	r3, [r2, #28]
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 80018ea:	2240      	movs	r2, #64	; 0x40
 80018ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018f6:	d007      	beq.n	8001908 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80018f8:	4a12      	ldr	r2, [pc, #72]	; (8001944 <FLASH_SetErrorCode+0xa4>)
 80018fa:	69d3      	ldr	r3, [r2, #28]
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001910:	d008      	beq.n	8001924 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001912:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <FLASH_SetErrorCode+0xa4>)
 8001914:	69d3      	ldr	r3, [r2, #28]
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 800191e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001922:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f013 0f02 	tst.w	r3, #2
 800192c:	d007      	beq.n	800193e <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <FLASH_SetErrorCode+0xa4>)
 8001930:	69d3      	ldr	r3, [r2, #28]
 8001932:	f043 0320 	orr.w	r3, r3, #32
 8001936:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001938:	4b01      	ldr	r3, [pc, #4]	; (8001940 <FLASH_SetErrorCode+0xa0>)
 800193a:	2202      	movs	r2, #2
 800193c:	60da      	str	r2, [r3, #12]
  }
}
 800193e:	4770      	bx	lr
 8001940:	40023c00 	.word	0x40023c00
 8001944:	200003cc 	.word	0x200003cc

08001948 <HAL_FLASH_EndOfOperationCallback>:
}
 8001948:	4770      	bx	lr

0800194a <HAL_FLASH_OperationErrorCallback>:
}
 800194a:	4770      	bx	lr

0800194c <HAL_FLASH_IRQHandler>:
{
 800194c:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <HAL_FLASH_IRQHandler+0xec>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8001956:	d013      	beq.n	8001980 <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001958:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d03b      	beq.n	80019da <HAL_FLASH_IRQHandler+0x8e>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d03c      	beq.n	80019e6 <HAL_FLASH_IRQHandler+0x9a>
      addresstmp = pFlash.Address;
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 800196e:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 8001970:	f7ff ff96 	bl	80018a0 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001974:	4620      	mov	r0, r4
 8001976:	f7ff ffe8 	bl	800194a <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_FLASH_IRQHandler+0xec>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f013 0f01 	tst.w	r3, #1
 8001988:	d013      	beq.n	80019b2 <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_FLASH_IRQHandler+0xec>)
 800198c:	2201      	movs	r2, #1
 800198e:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4293      	cmp	r3, r2
 8001998:	d028      	beq.n	80019ec <HAL_FLASH_IRQHandler+0xa0>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d041      	beq.n	8001a28 <HAL_FLASH_IRQHandler+0xdc>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 80019a6:	6958      	ldr	r0, [r3, #20]
 80019a8:	f7ff ffce 	bl	8001948 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b97b      	cbnz	r3, 80019d8 <HAL_FLASH_IRQHandler+0x8c>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_FLASH_IRQHandler+0xec>)
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019c0:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80019c8:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80019d0:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 80019dc:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 80019de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	e7c4      	b.n	8001970 <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 80019e8:	691c      	ldr	r4, [r3, #16]
 80019ea:	e7c1      	b.n	8001970 <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	3a01      	subs	r2, #1
 80019f2:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	b15b      	cbz	r3, 8001a10 <HAL_FLASH_IRQHandler+0xc4>
        addresstmp = pFlash.Sector;
 80019f8:	4c10      	ldr	r4, [pc, #64]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 80019fa:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80019fc:	f7ff ffa4 	bl	8001948 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 8001a00:	68e3      	ldr	r3, [r4, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 8001a06:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8001a08:	7a21      	ldrb	r1, [r4, #8]
 8001a0a:	f000 f819 	bl	8001a40 <FLASH_Erase_Sector>
 8001a0e:	e7d0      	b.n	80019b2 <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 8001a12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a16:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 8001a1c:	f000 f83c 	bl	8001a98 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff ff91 	bl	8001948 <HAL_FLASH_EndOfOperationCallback>
 8001a26:	e7c4      	b.n	80019b2 <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 8001a28:	f000 f836 	bl	8001a98 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_FLASH_IRQHandler+0xf0>)
 8001a2e:	6918      	ldr	r0, [r3, #16]
 8001a30:	f7ff ff8a 	bl	8001948 <HAL_FLASH_EndOfOperationCallback>
 8001a34:	e7ba      	b.n	80019ac <HAL_FLASH_IRQHandler+0x60>
 8001a36:	bf00      	nop
 8001a38:	40023c00 	.word	0x40023c00
 8001a3c:	200003cc 	.word	0x200003cc

08001a40 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001a40:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001a42:	b149      	cbz	r1, 8001a58 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001a44:	2901      	cmp	r1, #1
 8001a46:	d021      	beq.n	8001a8c <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001a48:	2902      	cmp	r1, #2
 8001a4a:	d002      	beq.n	8001a52 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001a4c:	f44f 7440 	mov.w	r4, #768	; 0x300
 8001a50:	e003      	b.n	8001a5a <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8001a52:	f44f 7400 	mov.w	r4, #512	; 0x200
 8001a56:	e000      	b.n	8001a5a <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8001a58:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <FLASH_Erase_Sector+0x54>)
 8001a5c:	6919      	ldr	r1, [r3, #16]
 8001a5e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001a62:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	4322      	orrs	r2, r4
 8001a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a70:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001a78:	f040 0002 	orr.w	r0, r0, #2
 8001a7c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a84:	611a      	str	r2, [r3, #16]
}
 8001a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a8a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001a8c:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001a90:	e7e3      	b.n	8001a5a <FLASH_Erase_Sector+0x1a>
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00

08001a98 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <FLASH_FlushCaches+0x5c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001aa0:	d010      	beq.n	8001ac4 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <FLASH_FlushCaches+0x5c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aaa:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aba:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac2:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <FLASH_FlushCaches+0x5c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001acc:	d010      	beq.n	8001af0 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <FLASH_FlushCaches+0x5c>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad6:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ae6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001aee:	601a      	str	r2, [r3, #0]
  }
}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00

08001af8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	2b0f      	cmp	r3, #15
 8001afc:	f200 80c5 	bhi.w	8001c8a <HAL_GPIO_Init+0x192>
{
 8001b00:	b4f0      	push	{r4, r5, r6, r7}
 8001b02:	b082      	sub	sp, #8
 8001b04:	e039      	b.n	8001b7a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b06:	2204      	movs	r2, #4
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x14>
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	40b2      	lsls	r2, r6
 8001b0e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b10:	3402      	adds	r4, #2
 8001b12:	4e5e      	ldr	r6, [pc, #376]	; (8001c8c <HAL_GPIO_Init+0x194>)
 8001b14:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b18:	4a5d      	ldr	r2, [pc, #372]	; (8001c90 <HAL_GPIO_Init+0x198>)
 8001b1a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	43ea      	mvns	r2, r5
 8001b1e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b22:	684f      	ldr	r7, [r1, #4]
 8001b24:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001b28:	d001      	beq.n	8001b2e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001b2a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001b2e:	4c58      	ldr	r4, [pc, #352]	; (8001c90 <HAL_GPIO_Init+0x198>)
 8001b30:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001b32:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b38:	684f      	ldr	r7, [r1, #4]
 8001b3a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001b3e:	d001      	beq.n	8001b44 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001b40:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001b44:	4c52      	ldr	r4, [pc, #328]	; (8001c90 <HAL_GPIO_Init+0x198>)
 8001b46:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b48:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b4a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4e:	684f      	ldr	r7, [r1, #4]
 8001b50:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001b54:	d001      	beq.n	8001b5a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001b56:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001b5a:	4c4d      	ldr	r4, [pc, #308]	; (8001c90 <HAL_GPIO_Init+0x198>)
 8001b5c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001b5e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b62:	684e      	ldr	r6, [r1, #4]
 8001b64:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001b68:	d001      	beq.n	8001b6e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001b6a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001b6e:	4c48      	ldr	r4, [pc, #288]	; (8001c90 <HAL_GPIO_Init+0x198>)
 8001b70:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	3301      	adds	r3, #1
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	f200 8085 	bhi.w	8001c84 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7e:	680c      	ldr	r4, [r1, #0]
 8001b80:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001b84:	42aa      	cmp	r2, r5
 8001b86:	d1f4      	bne.n	8001b72 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b88:	684c      	ldr	r4, [r1, #4]
 8001b8a:	2c02      	cmp	r4, #2
 8001b8c:	d001      	beq.n	8001b92 <HAL_GPIO_Init+0x9a>
 8001b8e:	2c12      	cmp	r4, #18
 8001b90:	d110      	bne.n	8001bb4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8001b92:	08de      	lsrs	r6, r3, #3
 8001b94:	3608      	adds	r6, #8
 8001b96:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9a:	f003 0407 	and.w	r4, r3, #7
 8001b9e:	00a7      	lsls	r7, r4, #2
 8001ba0:	240f      	movs	r4, #15
 8001ba2:	40bc      	lsls	r4, r7
 8001ba4:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba8:	690c      	ldr	r4, [r1, #16]
 8001baa:	40bc      	lsls	r4, r7
 8001bac:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001bb0:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001bb4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb6:	005f      	lsls	r7, r3, #1
 8001bb8:	2603      	movs	r6, #3
 8001bba:	40be      	lsls	r6, r7
 8001bbc:	43f6      	mvns	r6, r6
 8001bbe:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc2:	684c      	ldr	r4, [r1, #4]
 8001bc4:	f004 0403 	and.w	r4, r4, #3
 8001bc8:	40bc      	lsls	r4, r7
 8001bca:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001bce:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd0:	684c      	ldr	r4, [r1, #4]
 8001bd2:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8001bd6:	f1bc 0f01 	cmp.w	ip, #1
 8001bda:	d903      	bls.n	8001be4 <HAL_GPIO_Init+0xec>
 8001bdc:	2c11      	cmp	r4, #17
 8001bde:	d001      	beq.n	8001be4 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be0:	2c12      	cmp	r4, #18
 8001be2:	d110      	bne.n	8001c06 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8001be4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be6:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bea:	68cc      	ldr	r4, [r1, #12]
 8001bec:	40bc      	lsls	r4, r7
 8001bee:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8001bf2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bf4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf6:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bfa:	684c      	ldr	r4, [r1, #4]
 8001bfc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001c00:	409c      	lsls	r4, r3
 8001c02:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8001c04:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001c06:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c08:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0a:	688a      	ldr	r2, [r1, #8]
 8001c0c:	40ba      	lsls	r2, r7
 8001c0e:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8001c10:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c12:	684a      	ldr	r2, [r1, #4]
 8001c14:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001c18:	d0ab      	beq.n	8001b72 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <HAL_GPIO_Init+0x19c>)
 8001c20:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001c22:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001c26:	6454      	str	r4, [r2, #68]	; 0x44
 8001c28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c2a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c2e:	9201      	str	r2, [sp, #4]
 8001c30:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	089c      	lsrs	r4, r3, #2
 8001c34:	1ca6      	adds	r6, r4, #2
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_GPIO_Init+0x194>)
 8001c38:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	0096      	lsls	r6, r2, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	40b2      	lsls	r2, r6
 8001c46:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4a:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <HAL_GPIO_Init+0x1a0>)
 8001c4c:	4290      	cmp	r0, r2
 8001c4e:	f43f af5c 	beq.w	8001b0a <HAL_GPIO_Init+0x12>
 8001c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c56:	4290      	cmp	r0, r2
 8001c58:	d00e      	beq.n	8001c78 <HAL_GPIO_Init+0x180>
 8001c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c5e:	4290      	cmp	r0, r2
 8001c60:	d00c      	beq.n	8001c7c <HAL_GPIO_Init+0x184>
 8001c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c66:	4290      	cmp	r0, r2
 8001c68:	d00a      	beq.n	8001c80 <HAL_GPIO_Init+0x188>
 8001c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c6e:	4290      	cmp	r0, r2
 8001c70:	f43f af49 	beq.w	8001b06 <HAL_GPIO_Init+0xe>
 8001c74:	2207      	movs	r2, #7
 8001c76:	e749      	b.n	8001b0c <HAL_GPIO_Init+0x14>
 8001c78:	2201      	movs	r2, #1
 8001c7a:	e747      	b.n	8001b0c <HAL_GPIO_Init+0x14>
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	e745      	b.n	8001b0c <HAL_GPIO_Init+0x14>
 8001c80:	2203      	movs	r2, #3
 8001c82:	e743      	b.n	8001b0c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001c84:	b002      	add	sp, #8
 8001c86:	bcf0      	pop	{r4, r5, r6, r7}
 8001c88:	4770      	bx	lr
 8001c8a:	4770      	bx	lr
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40013c00 	.word	0x40013c00
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000

08001c9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c9c:	b912      	cbnz	r2, 8001ca4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9e:	0409      	lsls	r1, r1, #16
 8001ca0:	6181      	str	r1, [r0, #24]
  }
}
 8001ca2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001ca4:	6181      	str	r1, [r0, #24]
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ca8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	4203      	tst	r3, r0
 8001cb0:	d100      	bne.n	8001cb4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001cb2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001cb6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cb8:	f002 feec 	bl	8004a94 <HAL_GPIO_EXTI_Callback>
}
 8001cbc:	e7f9      	b.n	8001cb2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001cbe:	bf00      	nop
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	f000 80be 	beq.w	8001e46 <HAL_I2C_Init+0x182>
{
 8001cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ccc:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d06b      	beq.n	8001dae <HAL_I2C_Init+0xea>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd6:	2324      	movs	r3, #36	; 0x24
 8001cd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cdc:	6822      	ldr	r2, [r4, #0]
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ce6:	f000 fba7 	bl	8002438 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cea:	6862      	ldr	r2, [r4, #4]
 8001cec:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <HAL_I2C_Init+0x18c>)
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d862      	bhi.n	8001db8 <HAL_I2C_Init+0xf4>
 8001cf2:	4b58      	ldr	r3, [pc, #352]	; (8001e54 <HAL_I2C_Init+0x190>)
 8001cf4:	4298      	cmp	r0, r3
 8001cf6:	bf8c      	ite	hi
 8001cf8:	2300      	movhi	r3, #0
 8001cfa:	2301      	movls	r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 80a4 	bne.w	8001e4a <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d02:	4b55      	ldr	r3, [pc, #340]	; (8001e58 <HAL_I2C_Init+0x194>)
 8001d04:	fba3 2300 	umull	r2, r3, r3, r0
 8001d08:	0c9b      	lsrs	r3, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d0a:	6821      	ldr	r1, [r4, #0]
 8001d0c:	684a      	ldr	r2, [r1, #4]
 8001d0e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001d12:	431a      	orrs	r2, r3
 8001d14:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d16:	6825      	ldr	r5, [r4, #0]
 8001d18:	6a2a      	ldr	r2, [r5, #32]
 8001d1a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001d1e:	6866      	ldr	r6, [r4, #4]
 8001d20:	494b      	ldr	r1, [pc, #300]	; (8001e50 <HAL_I2C_Init+0x18c>)
 8001d22:	428e      	cmp	r6, r1
 8001d24:	d84e      	bhi.n	8001dc4 <HAL_I2C_Init+0x100>
 8001d26:	3301      	adds	r3, #1
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	622b      	str	r3, [r5, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d2c:	6825      	ldr	r5, [r4, #0]
 8001d2e:	69e9      	ldr	r1, [r5, #28]
 8001d30:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001d34:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001d38:	6863      	ldr	r3, [r4, #4]
 8001d3a:	4a45      	ldr	r2, [pc, #276]	; (8001e50 <HAL_I2C_Init+0x18c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d84b      	bhi.n	8001dd8 <HAL_I2C_Init+0x114>
 8001d40:	3801      	subs	r0, #1
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf38      	it	cc
 8001d52:	2304      	movcc	r3, #4
 8001d54:	430b      	orrs	r3, r1
 8001d56:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d58:	6821      	ldr	r1, [r4, #0]
 8001d5a:	680b      	ldr	r3, [r1, #0]
 8001d5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d60:	69e2      	ldr	r2, [r4, #28]
 8001d62:	6a20      	ldr	r0, [r4, #32]
 8001d64:	4302      	orrs	r2, r0
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d6a:	6821      	ldr	r1, [r4, #0]
 8001d6c:	688b      	ldr	r3, [r1, #8]
 8001d6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d76:	6922      	ldr	r2, [r4, #16]
 8001d78:	68e0      	ldr	r0, [r4, #12]
 8001d7a:	4302      	orrs	r2, r0
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d80:	6821      	ldr	r1, [r4, #0]
 8001d82:	68cb      	ldr	r3, [r1, #12]
 8001d84:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d88:	6962      	ldr	r2, [r4, #20]
 8001d8a:	69a0      	ldr	r0, [r4, #24]
 8001d8c:	4302      	orrs	r2, r0
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001da0:	2320      	movs	r3, #32
 8001da2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 8001dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001dae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001db2:	f002 f933 	bl	800401c <HAL_I2C_MspInit>
 8001db6:	e78e      	b.n	8001cd6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_I2C_Init+0x198>)
 8001dba:	4298      	cmp	r0, r3
 8001dbc:	bf8c      	ite	hi
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	2301      	movls	r3, #1
 8001dc2:	e79b      	b.n	8001cfc <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dc4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4924      	ldr	r1, [pc, #144]	; (8001e60 <HAL_I2C_Init+0x19c>)
 8001dce:	fba1 1303 	umull	r1, r3, r1, r3
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	e7a7      	b.n	8001d28 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dd8:	68a2      	ldr	r2, [r4, #8]
 8001dda:	b9ba      	cbnz	r2, 8001e0c <HAL_I2C_Init+0x148>
 8001ddc:	1e46      	subs	r6, r0, #1
 8001dde:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001de2:	fbb6 f6f7 	udiv	r6, r6, r7
 8001de6:	3601      	adds	r6, #1
 8001de8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001dec:	fab6 f686 	clz	r6, r6
 8001df0:	0976      	lsrs	r6, r6, #5
 8001df2:	bb36      	cbnz	r6, 8001e42 <HAL_I2C_Init+0x17e>
 8001df4:	b9c2      	cbnz	r2, 8001e28 <HAL_I2C_Init+0x164>
 8001df6:	3801      	subs	r0, #1
 8001df8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001dfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001e06:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001e0a:	e7a3      	b.n	8001d54 <HAL_I2C_Init+0x90>
 8001e0c:	1e46      	subs	r6, r0, #1
 8001e0e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001e12:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001e16:	fbb6 f6f7 	udiv	r6, r6, r7
 8001e1a:	3601      	adds	r6, #1
 8001e1c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001e20:	fab6 f686 	clz	r6, r6
 8001e24:	0976      	lsrs	r6, r6, #5
 8001e26:	e7e4      	b.n	8001df2 <HAL_I2C_Init+0x12e>
 8001e28:	3801      	subs	r0, #1
 8001e2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e32:	fbb0 f2f3 	udiv	r2, r0, r3
 8001e36:	3201      	adds	r2, #1
 8001e38:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001e3c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001e40:	e788      	b.n	8001d54 <HAL_I2C_Init+0x90>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e786      	b.n	8001d54 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001e46:	2001      	movs	r0, #1
}
 8001e48:	4770      	bx	lr
    return HAL_ERROR;
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	e7ae      	b.n	8001dac <HAL_I2C_Init+0xe8>
 8001e4e:	bf00      	nop
 8001e50:	000186a0 	.word	0x000186a0
 8001e54:	001e847f 	.word	0x001e847f
 8001e58:	431bde83 	.word	0x431bde83
 8001e5c:	003d08ff 	.word	0x003d08ff
 8001e60:	10624dd3 	.word	0x10624dd3

08001e64 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e64:	2800      	cmp	r0, #0
 8001e66:	f000 81bb 	beq.w	80021e0 <HAL_RCC_OscConfig+0x37c>
{
 8001e6a:	b570      	push	{r4, r5, r6, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e70:	6803      	ldr	r3, [r0, #0]
 8001e72:	f013 0f01 	tst.w	r3, #1
 8001e76:	d03b      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e78:	4ba7      	ldr	r3, [pc, #668]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d02c      	beq.n	8001ede <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e84:	4ba4      	ldr	r3, [pc, #656]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d021      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e90:	6863      	ldr	r3, [r4, #4]
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e96:	d04f      	beq.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d052      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe0>
 8001e9e:	4b9e      	ldr	r3, [pc, #632]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001eae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb0:	6863      	ldr	r3, [r4, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d050      	beq.n	8001f58 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fa1f 	bl	80012f8 <HAL_GetTick>
 8001eba:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebc:	4b96      	ldr	r3, [pc, #600]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ec4:	d114      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec6:	f7ff fa17 	bl	80012f8 <HAL_GetTick>
 8001eca:	1b40      	subs	r0, r0, r5
 8001ecc:	2864      	cmp	r0, #100	; 0x64
 8001ece:	d9f5      	bls.n	8001ebc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	e18a      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed4:	4b90      	ldr	r3, [pc, #576]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001edc:	d0d8      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ede:	4b8e      	ldr	r3, [pc, #568]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ee6:	d003      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x8c>
 8001ee8:	6863      	ldr	r3, [r4, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 817a 	beq.w	80021e4 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	f013 0f02 	tst.w	r3, #2
 8001ef6:	d055      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef8:	4b87      	ldr	r3, [pc, #540]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f013 0f0c 	tst.w	r3, #12
 8001f00:	d03e      	beq.n	8001f80 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f02:	4b85      	ldr	r3, [pc, #532]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d033      	beq.n	8001f76 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f0e:	68e3      	ldr	r3, [r4, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d068      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f14:	4b81      	ldr	r3, [pc, #516]	; (800211c <HAL_RCC_OscConfig+0x2b8>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f9ed 	bl	80012f8 <HAL_GetTick>
 8001f1e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	4b7d      	ldr	r3, [pc, #500]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f013 0f02 	tst.w	r3, #2
 8001f28:	d154      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7ff f9e5 	bl	80012f8 <HAL_GetTick>
 8001f2e:	1b40      	subs	r0, r0, r5
 8001f30:	2802      	cmp	r0, #2
 8001f32:	d9f5      	bls.n	8001f20 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001f34:	2003      	movs	r0, #3
 8001f36:	e158      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f38:	4a77      	ldr	r2, [pc, #476]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e7b5      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4c>
 8001f44:	4b74      	ldr	r3, [pc, #464]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e7ab      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001f58:	f7ff f9ce 	bl	80012f8 <HAL_GetTick>
 8001f5c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	4b6e      	ldr	r3, [pc, #440]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f66:	d0c3      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f9c6 	bl	80012f8 <HAL_GetTick>
 8001f6c:	1b40      	subs	r0, r0, r5
 8001f6e:	2864      	cmp	r0, #100	; 0x64
 8001f70:	d9f5      	bls.n	8001f5e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001f72:	2003      	movs	r0, #3
 8001f74:	e139      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b68      	ldr	r3, [pc, #416]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f7e:	d1c6      	bne.n	8001f0e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f80:	4b65      	ldr	r3, [pc, #404]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f013 0f02 	tst.w	r3, #2
 8001f88:	d004      	beq.n	8001f94 <HAL_RCC_OscConfig+0x130>
 8001f8a:	68e3      	ldr	r3, [r4, #12]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001f90:	2001      	movs	r0, #1
 8001f92:	e12a      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4a60      	ldr	r2, [pc, #384]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001f96:	6813      	ldr	r3, [r2, #0]
 8001f98:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f9c:	6921      	ldr	r1, [r4, #16]
 8001f9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fa2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	f013 0f08 	tst.w	r3, #8
 8001faa:	d040      	beq.n	800202e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fac:	6963      	ldr	r3, [r4, #20]
 8001fae:	b363      	cbz	r3, 800200a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb0:	4b5b      	ldr	r3, [pc, #364]	; (8002120 <HAL_RCC_OscConfig+0x2bc>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f99f 	bl	80012f8 <HAL_GetTick>
 8001fba:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbc:	4b56      	ldr	r3, [pc, #344]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc0:	f013 0f02 	tst.w	r3, #2
 8001fc4:	d133      	bne.n	800202e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f997 	bl	80012f8 <HAL_GetTick>
 8001fca:	1b40      	subs	r0, r0, r5
 8001fcc:	2802      	cmp	r0, #2
 8001fce:	d9f5      	bls.n	8001fbc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	e10a      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4a50      	ldr	r2, [pc, #320]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fdc:	6921      	ldr	r1, [r4, #16]
 8001fde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	e7de      	b.n	8001fa4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	; (800211c <HAL_RCC_OscConfig+0x2b8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fec:	f7ff f984 	bl	80012f8 <HAL_GetTick>
 8001ff0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b49      	ldr	r3, [pc, #292]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f013 0f02 	tst.w	r3, #2
 8001ffa:	d0d3      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff f97c 	bl	80012f8 <HAL_GetTick>
 8002000:	1b40      	subs	r0, r0, r5
 8002002:	2802      	cmp	r0, #2
 8002004:	d9f5      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002006:	2003      	movs	r0, #3
 8002008:	e0ef      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200a:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_RCC_OscConfig+0x2bc>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff f972 	bl	80012f8 <HAL_GetTick>
 8002014:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002016:	4b40      	ldr	r3, [pc, #256]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8002018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201a:	f013 0f02 	tst.w	r3, #2
 800201e:	d006      	beq.n	800202e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff f96a 	bl	80012f8 <HAL_GetTick>
 8002024:	1b40      	subs	r0, r0, r5
 8002026:	2802      	cmp	r0, #2
 8002028:	d9f5      	bls.n	8002016 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800202a:	2003      	movs	r0, #3
 800202c:	e0dd      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	f013 0f04 	tst.w	r3, #4
 8002034:	d079      	beq.n	800212a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800203e:	d133      	bne.n	80020a8 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8002046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002048:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002058:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4b32      	ldr	r3, [pc, #200]	; (8002124 <HAL_RCC_OscConfig+0x2c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002062:	d023      	beq.n	80020ac <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	68a3      	ldr	r3, [r4, #8]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d034      	beq.n	80020d4 <HAL_RCC_OscConfig+0x270>
 800206a:	2b05      	cmp	r3, #5
 800206c:	d038      	beq.n	80020e0 <HAL_RCC_OscConfig+0x27c>
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8002070:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	671a      	str	r2, [r3, #112]	; 0x70
 8002078:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800207a:	f022 0204 	bic.w	r2, r2, #4
 800207e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002080:	68a3      	ldr	r3, [r4, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d036      	beq.n	80020f4 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002086:	f7ff f937 	bl	80012f8 <HAL_GetTick>
 800208a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	f013 0f02 	tst.w	r3, #2
 8002094:	d148      	bne.n	8002128 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff f92f 	bl	80012f8 <HAL_GetTick>
 800209a:	1b80      	subs	r0, r0, r6
 800209c:	f241 3388 	movw	r3, #5000	; 0x1388
 80020a0:	4298      	cmp	r0, r3
 80020a2:	d9f3      	bls.n	800208c <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80020a4:	2003      	movs	r0, #3
 80020a6:	e0a0      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 80020a8:	2500      	movs	r5, #0
 80020aa:	e7d6      	b.n	800205a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ac:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_RCC_OscConfig+0x2c0>)
 80020ae:	6813      	ldr	r3, [r2, #0]
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80020b6:	f7ff f91f 	bl	80012f8 <HAL_GetTick>
 80020ba:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_OscConfig+0x2c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020c4:	d1ce      	bne.n	8002064 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c6:	f7ff f917 	bl	80012f8 <HAL_GetTick>
 80020ca:	1b80      	subs	r0, r0, r6
 80020cc:	2802      	cmp	r0, #2
 80020ce:	d9f5      	bls.n	80020bc <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80020d0:	2003      	movs	r0, #3
 80020d2:	e08a      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 80020d6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6713      	str	r3, [r2, #112]	; 0x70
 80020de:	e7cf      	b.n	8002080 <HAL_RCC_OscConfig+0x21c>
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 80020e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020e4:	f042 0204 	orr.w	r2, r2, #4
 80020e8:	671a      	str	r2, [r3, #112]	; 0x70
 80020ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	671a      	str	r2, [r3, #112]	; 0x70
 80020f2:	e7c5      	b.n	8002080 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7ff f900 	bl	80012f8 <HAL_GetTick>
 80020f8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	f013 0f02 	tst.w	r3, #2
 8002102:	d011      	beq.n	8002128 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7ff f8f8 	bl	80012f8 <HAL_GetTick>
 8002108:	1b80      	subs	r0, r0, r6
 800210a:	f241 3388 	movw	r3, #5000	; 0x1388
 800210e:	4298      	cmp	r0, r3
 8002110:	d9f3      	bls.n	80020fa <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8002112:	2003      	movs	r0, #3
 8002114:	e069      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	42470000 	.word	0x42470000
 8002120:	42470e80 	.word	0x42470e80
 8002124:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002128:	b9e5      	cbnz	r5, 8002164 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800212a:	69a3      	ldr	r3, [r4, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d05b      	beq.n	80021e8 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002130:	4a30      	ldr	r2, [pc, #192]	; (80021f4 <HAL_RCC_OscConfig+0x390>)
 8002132:	6892      	ldr	r2, [r2, #8]
 8002134:	f002 020c 	and.w	r2, r2, #12
 8002138:	2a08      	cmp	r2, #8
 800213a:	d058      	beq.n	80021ee <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213c:	2b02      	cmp	r3, #2
 800213e:	d017      	beq.n	8002170 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_RCC_OscConfig+0x394>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff f8d7 	bl	80012f8 <HAL_GetTick>
 800214a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214c:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <HAL_RCC_OscConfig+0x390>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002154:	d042      	beq.n	80021dc <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002156:	f7ff f8cf 	bl	80012f8 <HAL_GetTick>
 800215a:	1b00      	subs	r0, r0, r4
 800215c:	2802      	cmp	r0, #2
 800215e:	d9f5      	bls.n	800214c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002160:	2003      	movs	r0, #3
 8002162:	e042      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002164:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <HAL_RCC_OscConfig+0x390>)
 8002166:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	e7dc      	b.n	800212a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_RCC_OscConfig+0x394>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002176:	f7ff f8bf 	bl	80012f8 <HAL_GetTick>
 800217a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_RCC_OscConfig+0x390>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002184:	d006      	beq.n	8002194 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002186:	f7ff f8b7 	bl	80012f8 <HAL_GetTick>
 800218a:	1b40      	subs	r0, r0, r5
 800218c:	2802      	cmp	r0, #2
 800218e:	d9f5      	bls.n	800217c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002190:	2003      	movs	r0, #3
 8002192:	e02a      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002194:	69e3      	ldr	r3, [r4, #28]
 8002196:	6a22      	ldr	r2, [r4, #32]
 8002198:	4313      	orrs	r3, r2
 800219a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800219c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80021a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021a2:	0852      	lsrs	r2, r2, #1
 80021a4:	3a01      	subs	r2, #1
 80021a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80021aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021b0:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_RCC_OscConfig+0x390>)
 80021b2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80021b4:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_RCC_OscConfig+0x394>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021ba:	f7ff f89d 	bl	80012f8 <HAL_GetTick>
 80021be:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_RCC_OscConfig+0x390>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ca:	f7ff f895 	bl	80012f8 <HAL_GetTick>
 80021ce:	1b00      	subs	r0, r0, r4
 80021d0:	2802      	cmp	r0, #2
 80021d2:	d9f5      	bls.n	80021c0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80021d4:	2003      	movs	r0, #3
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80021d8:	2000      	movs	r0, #0
 80021da:	e006      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
 80021dc:	2000      	movs	r0, #0
 80021de:	e004      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 80021e0:	2001      	movs	r0, #1
}
 80021e2:	4770      	bx	lr
        return HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 80021e8:	2000      	movs	r0, #0
}
 80021ea:	b002      	add	sp, #8
 80021ec:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80021ee:	2001      	movs	r0, #1
 80021f0:	e7fb      	b.n	80021ea <HAL_RCC_OscConfig+0x386>
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	42470060 	.word	0x42470060

080021fc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b04      	cmp	r3, #4
 8002206:	d05c      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0xc6>
 8002208:	2b08      	cmp	r3, #8
 800220a:	d001      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800220c:	482f      	ldr	r0, [pc, #188]	; (80022cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800220e:	4770      	bx	lr
{
 8002210:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002222:	d02b      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800222c:	461e      	mov	r6, r3
 800222e:	2700      	movs	r7, #0
 8002230:	015c      	lsls	r4, r3, #5
 8002232:	2500      	movs	r5, #0
 8002234:	1ae4      	subs	r4, r4, r3
 8002236:	eb65 0507 	sbc.w	r5, r5, r7
 800223a:	01a9      	lsls	r1, r5, #6
 800223c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002240:	01a0      	lsls	r0, r4, #6
 8002242:	1b00      	subs	r0, r0, r4
 8002244:	eb61 0105 	sbc.w	r1, r1, r5
 8002248:	00cb      	lsls	r3, r1, #3
 800224a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800224e:	00c4      	lsls	r4, r0, #3
 8002250:	19a0      	adds	r0, r4, r6
 8002252:	eb43 0107 	adc.w	r1, r3, r7
 8002256:	024b      	lsls	r3, r1, #9
 8002258:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800225c:	0244      	lsls	r4, r0, #9
 800225e:	4620      	mov	r0, r4
 8002260:	4619      	mov	r1, r3
 8002262:	2300      	movs	r3, #0
 8002264:	f7fe fd28 	bl	8000cb8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002270:	3301      	adds	r3, #1
 8002272:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002274:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002278:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002284:	461e      	mov	r6, r3
 8002286:	2700      	movs	r7, #0
 8002288:	015c      	lsls	r4, r3, #5
 800228a:	2500      	movs	r5, #0
 800228c:	1ae4      	subs	r4, r4, r3
 800228e:	eb65 0507 	sbc.w	r5, r5, r7
 8002292:	01a9      	lsls	r1, r5, #6
 8002294:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002298:	01a0      	lsls	r0, r4, #6
 800229a:	1b00      	subs	r0, r0, r4
 800229c:	eb61 0105 	sbc.w	r1, r1, r5
 80022a0:	00cb      	lsls	r3, r1, #3
 80022a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022a6:	00c4      	lsls	r4, r0, #3
 80022a8:	19a0      	adds	r0, r4, r6
 80022aa:	eb43 0107 	adc.w	r1, r3, r7
 80022ae:	028b      	lsls	r3, r1, #10
 80022b0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80022b4:	0284      	lsls	r4, r0, #10
 80022b6:	4620      	mov	r0, r4
 80022b8:	4619      	mov	r1, r3
 80022ba:	2300      	movs	r3, #0
 80022bc:	f7fe fcfc 	bl	8000cb8 <__aeabi_uldivmod>
 80022c0:	e7d2      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 80022c2:	4803      	ldr	r0, [pc, #12]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	007a1200 	.word	0x007a1200

080022d4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80022d4:	2800      	cmp	r0, #0
 80022d6:	f000 809d 	beq.w	8002414 <HAL_RCC_ClockConfig+0x140>
{
 80022da:	b570      	push	{r4, r5, r6, lr}
 80022dc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022de:	4b4f      	ldr	r3, [pc, #316]	; (800241c <HAL_RCC_ClockConfig+0x148>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d209      	bcs.n	80022fe <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	b2cb      	uxtb	r3, r1
 80022ec:	4a4b      	ldr	r2, [pc, #300]	; (800241c <HAL_RCC_ClockConfig+0x148>)
 80022ee:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f0:	6813      	ldr	r3, [r2, #0]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	428b      	cmp	r3, r1
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
}
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	f013 0f02 	tst.w	r3, #2
 8002304:	d017      	beq.n	8002336 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002306:	f013 0f04 	tst.w	r3, #4
 800230a:	d004      	beq.n	8002316 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4a44      	ldr	r2, [pc, #272]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 800230e:	6893      	ldr	r3, [r2, #8]
 8002310:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002314:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	f013 0f08 	tst.w	r3, #8
 800231c:	d004      	beq.n	8002328 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800231e:	4a40      	ldr	r2, [pc, #256]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 8002320:	6893      	ldr	r3, [r2, #8]
 8002322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002326:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4a3d      	ldr	r2, [pc, #244]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 800232a:	6893      	ldr	r3, [r2, #8]
 800232c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002330:	68a0      	ldr	r0, [r4, #8]
 8002332:	4303      	orrs	r3, r0
 8002334:	6093      	str	r3, [r2, #8]
 8002336:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	f013 0f01 	tst.w	r3, #1
 800233e:	d032      	beq.n	80023a6 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002340:	6863      	ldr	r3, [r4, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d021      	beq.n	800238a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	1e9a      	subs	r2, r3, #2
 8002348:	2a01      	cmp	r2, #1
 800234a:	d925      	bls.n	8002398 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	4a34      	ldr	r2, [pc, #208]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	f012 0f02 	tst.w	r2, #2
 8002354:	d060      	beq.n	8002418 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002356:	4932      	ldr	r1, [pc, #200]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 8002358:	688a      	ldr	r2, [r1, #8]
 800235a:	f022 0203 	bic.w	r2, r2, #3
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002362:	f7fe ffc9 	bl	80012f8 <HAL_GetTick>
 8002366:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	6862      	ldr	r2, [r4, #4]
 8002372:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002376:	d016      	beq.n	80023a6 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7fe ffbe 	bl	80012f8 <HAL_GetTick>
 800237c:	1b80      	subs	r0, r0, r6
 800237e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002382:	4298      	cmp	r0, r3
 8002384:	d9f0      	bls.n	8002368 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8002386:	2003      	movs	r0, #3
 8002388:	e7b8      	b.n	80022fc <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4a25      	ldr	r2, [pc, #148]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002392:	d1e0      	bne.n	8002356 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
 8002396:	e7b1      	b.n	80022fc <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80023a0:	d1d9      	bne.n	8002356 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80023a2:	2001      	movs	r0, #1
 80023a4:	e7aa      	b.n	80022fc <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_RCC_ClockConfig+0x148>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	42ab      	cmp	r3, r5
 80023b0:	d909      	bls.n	80023c6 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	b2ea      	uxtb	r2, r5
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_ClockConfig+0x148>)
 80023b6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	42ab      	cmp	r3, r5
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 80023c2:	2001      	movs	r0, #1
 80023c4:	e79a      	b.n	80022fc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	f013 0f04 	tst.w	r3, #4
 80023cc:	d006      	beq.n	80023dc <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ce:	4a14      	ldr	r2, [pc, #80]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 80023d0:	6893      	ldr	r3, [r2, #8]
 80023d2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80023d6:	68e1      	ldr	r1, [r4, #12]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	f013 0f08 	tst.w	r3, #8
 80023e2:	d007      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 80023e6:	6893      	ldr	r3, [r2, #8]
 80023e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80023ec:	6921      	ldr	r1, [r4, #16]
 80023ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023f2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023f4:	f7ff ff02 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x14c>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002400:	4a08      	ldr	r2, [pc, #32]	; (8002424 <HAL_RCC_ClockConfig+0x150>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	40d8      	lsrs	r0, r3
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_RCC_ClockConfig+0x154>)
 8002408:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800240a:	2000      	movs	r0, #0
 800240c:	f002 fbfa 	bl	8004c04 <HAL_InitTick>
  return HAL_OK;
 8002410:	2000      	movs	r0, #0
 8002412:	e773      	b.n	80022fc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
}
 8002416:	4770      	bx	lr
        return HAL_ERROR;
 8002418:	2001      	movs	r0, #1
 800241a:	e76f      	b.n	80022fc <HAL_RCC_ClockConfig+0x28>
 800241c:	40023c00 	.word	0x40023c00
 8002420:	40023800 	.word	0x40023800
 8002424:	08009a98 	.word	0x08009a98
 8002428:	20000034 	.word	0x20000034

0800242c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800242c:	4b01      	ldr	r3, [pc, #4]	; (8002434 <HAL_RCC_GetHCLKFreq+0x8>)
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000034 	.word	0x20000034

08002438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002438:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800243a:	f7ff fff7 	bl	800242c <HAL_RCC_GetHCLKFreq>
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002446:	4a03      	ldr	r2, [pc, #12]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
}
 800244a:	40d8      	lsrs	r0, r3
 800244c:	bd08      	pop	{r3, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	08009aa8 	.word	0x08009aa8

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800245a:	f7ff ffe7 	bl	800242c <HAL_RCC_GetHCLKFreq>
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002466:	4a03      	ldr	r2, [pc, #12]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002468:	5cd3      	ldrb	r3, [r2, r3]
}
 800246a:	40d8      	lsrs	r0, r3
 800246c:	bd08      	pop	{r3, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	08009aa8 	.word	0x08009aa8

08002478 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002478:	230f      	movs	r3, #15
 800247a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_GetClockConfig+0x34>)
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800248c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002494:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800249e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_RCC_GetClockConfig+0x38>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	600b      	str	r3, [r1, #0]
}
 80024aa:	4770      	bx	lr
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024b4:	2800      	cmp	r0, #0
 80024b6:	d03b      	beq.n	8002530 <HAL_SPI_Init+0x7c>
{
 80024b8:	b510      	push	{r4, lr}
 80024ba:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024c0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d02e      	beq.n	8002526 <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024c8:	2302      	movs	r3, #2
 80024ca:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024ce:	6822      	ldr	r2, [r4, #0]
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024d6:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024d8:	6863      	ldr	r3, [r4, #4]
 80024da:	68a2      	ldr	r2, [r4, #8]
 80024dc:	4313      	orrs	r3, r2
 80024de:	68e2      	ldr	r2, [r4, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	6922      	ldr	r2, [r4, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	6962      	ldr	r2, [r4, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	69a2      	ldr	r2, [r4, #24]
 80024ec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80024f0:	4313      	orrs	r3, r2
 80024f2:	69e2      	ldr	r2, [r4, #28]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	6a22      	ldr	r2, [r4, #32]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80024fc:	6822      	ldr	r2, [r4, #0]
 80024fe:	430b      	orrs	r3, r1
 8002500:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002502:	8b63      	ldrh	r3, [r4, #26]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800250a:	6822      	ldr	r2, [r4, #0]
 800250c:	430b      	orrs	r3, r1
 800250e:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002510:	6822      	ldr	r2, [r4, #0]
 8002512:	69d3      	ldr	r3, [r2, #28]
 8002514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002518:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800251a:	2000      	movs	r0, #0
 800251c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800251e:	2301      	movs	r3, #1
 8002520:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002524:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002526:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800252a:	f002 faf1 	bl	8004b10 <HAL_SPI_MspInit>
 800252e:	e7cb      	b.n	80024c8 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002530:	2001      	movs	r0, #1
}
 8002532:	4770      	bx	lr

08002534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002534:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002536:	6a03      	ldr	r3, [r0, #32]
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002540:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002542:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002544:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002548:	680d      	ldr	r5, [r1, #0]
 800254a:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800254e:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002552:	688b      	ldr	r3, [r1, #8]
 8002554:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002556:	4d0d      	ldr	r5, [pc, #52]	; (800258c <TIM_OC1_SetConfig+0x58>)
 8002558:	42a8      	cmp	r0, r5
 800255a:	d009      	beq.n	8002570 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800255c:	4d0b      	ldr	r5, [pc, #44]	; (800258c <TIM_OC1_SetConfig+0x58>)
 800255e:	42a8      	cmp	r0, r5
 8002560:	d00d      	beq.n	800257e <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002562:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002564:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002566:	684a      	ldr	r2, [r1, #4]
 8002568:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800256a:	6203      	str	r3, [r0, #32]
}
 800256c:	bc70      	pop	{r4, r5, r6}
 800256e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002570:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002574:	68cc      	ldr	r4, [r1, #12]
 8002576:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	e7ee      	b.n	800255c <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800257e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002582:	694c      	ldr	r4, [r1, #20]
 8002584:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8002586:	698a      	ldr	r2, [r1, #24]
 8002588:	4322      	orrs	r2, r4
 800258a:	e7ea      	b.n	8002562 <TIM_OC1_SetConfig+0x2e>
 800258c:	40010000 	.word	0x40010000

08002590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002590:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002592:	6a03      	ldr	r3, [r0, #32]
 8002594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002598:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800259c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800259e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025a0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025a4:	680d      	ldr	r5, [r1, #0]
 80025a6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025ac:	688d      	ldr	r5, [r1, #8]
 80025ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025b2:	4d0f      	ldr	r5, [pc, #60]	; (80025f0 <TIM_OC3_SetConfig+0x60>)
 80025b4:	42a8      	cmp	r0, r5
 80025b6:	d009      	beq.n	80025cc <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025b8:	4d0d      	ldr	r5, [pc, #52]	; (80025f0 <TIM_OC3_SetConfig+0x60>)
 80025ba:	42a8      	cmp	r0, r5
 80025bc:	d00e      	beq.n	80025dc <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025be:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025c0:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025c2:	684a      	ldr	r2, [r1, #4]
 80025c4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025c6:	6203      	str	r3, [r0, #32]
}
 80025c8:	bc30      	pop	{r4, r5}
 80025ca:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80025cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025d0:	68cd      	ldr	r5, [r1, #12]
 80025d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80025d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025da:	e7ed      	b.n	80025b8 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025dc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025e0:	694d      	ldr	r5, [r1, #20]
 80025e2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025e6:	698d      	ldr	r5, [r1, #24]
 80025e8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80025ec:	e7e7      	b.n	80025be <TIM_OC3_SetConfig+0x2e>
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000

080025f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025f4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025f6:	6a03      	ldr	r3, [r0, #32]
 80025f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002600:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002602:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002604:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002608:	680d      	ldr	r5, [r1, #0]
 800260a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800260e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002612:	688d      	ldr	r5, [r1, #8]
 8002614:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002618:	4d07      	ldr	r5, [pc, #28]	; (8002638 <TIM_OC4_SetConfig+0x44>)
 800261a:	42a8      	cmp	r0, r5
 800261c:	d006      	beq.n	800262c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800261e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002620:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002622:	684a      	ldr	r2, [r1, #4]
 8002624:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002626:	6203      	str	r3, [r0, #32]
}
 8002628:	bc30      	pop	{r4, r5}
 800262a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800262c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002630:	694d      	ldr	r5, [r1, #20]
 8002632:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002636:	e7f2      	b.n	800261e <TIM_OC4_SetConfig+0x2a>
 8002638:	40010000 	.word	0x40010000

0800263c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800263c:	6802      	ldr	r2, [r0, #0]
 800263e:	68d3      	ldr	r3, [r2, #12]
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002646:	6802      	ldr	r2, [r0, #0]
 8002648:	6893      	ldr	r3, [r2, #8]
 800264a:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	2b06      	cmp	r3, #6
 8002650:	d003      	beq.n	800265a <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8002652:	6813      	ldr	r3, [r2, #0]
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6013      	str	r3, [r2, #0]
}
 800265a:	2000      	movs	r0, #0
 800265c:	4770      	bx	lr

0800265e <HAL_TIM_OC_DelayElapsedCallback>:
}
 800265e:	4770      	bx	lr

08002660 <HAL_TIM_IC_CaptureCallback>:
}
 8002660:	4770      	bx	lr

08002662 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002662:	4770      	bx	lr

08002664 <HAL_TIM_TriggerCallback>:
}
 8002664:	4770      	bx	lr

08002666 <HAL_TIM_IRQHandler>:
{
 8002666:	b510      	push	{r4, lr}
 8002668:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800266a:	6803      	ldr	r3, [r0, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	f012 0f02 	tst.w	r2, #2
 8002672:	d011      	beq.n	8002698 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	f012 0f02 	tst.w	r2, #2
 800267a:	d00d      	beq.n	8002698 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800267c:	f06f 0202 	mvn.w	r2, #2
 8002680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002682:	2301      	movs	r3, #1
 8002684:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002686:	6803      	ldr	r3, [r0, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f013 0f03 	tst.w	r3, #3
 800268e:	d070      	beq.n	8002772 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002690:	f7ff ffe6 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002694:	2300      	movs	r3, #0
 8002696:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	f012 0f04 	tst.w	r2, #4
 80026a0:	d012      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	f012 0f04 	tst.w	r2, #4
 80026a8:	d00e      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026aa:	f06f 0204 	mvn.w	r2, #4
 80026ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026b0:	2302      	movs	r3, #2
 80026b2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80026bc:	d05f      	beq.n	800277e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80026be:	4620      	mov	r0, r4
 80026c0:	f7ff ffce 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c4:	2300      	movs	r3, #0
 80026c6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	f012 0f08 	tst.w	r2, #8
 80026d0:	d012      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	f012 0f08 	tst.w	r2, #8
 80026d8:	d00e      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026da:	f06f 0208 	mvn.w	r2, #8
 80026de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026e0:	2304      	movs	r3, #4
 80026e2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f013 0f03 	tst.w	r3, #3
 80026ec:	d04e      	beq.n	800278c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7ff ffb6 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f4:	2300      	movs	r3, #0
 80026f6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	f012 0f10 	tst.w	r2, #16
 8002700:	d012      	beq.n	8002728 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	f012 0f10 	tst.w	r2, #16
 8002708:	d00e      	beq.n	8002728 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800270a:	f06f 0210 	mvn.w	r2, #16
 800270e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002710:	2308      	movs	r3, #8
 8002712:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f413 7f40 	tst.w	r3, #768	; 0x300
 800271c:	d03d      	beq.n	800279a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ff9e 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002724:	2300      	movs	r3, #0
 8002726:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	f012 0f01 	tst.w	r2, #1
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	f012 0f01 	tst.w	r2, #1
 8002738:	d136      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002742:	d003      	beq.n	800274c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	f012 0f80 	tst.w	r2, #128	; 0x80
 800274a:	d134      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	f012 0f40 	tst.w	r2, #64	; 0x40
 800275c:	d132      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	f012 0f20 	tst.w	r2, #32
 8002766:	d003      	beq.n	8002770 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	f012 0f20 	tst.w	r2, #32
 800276e:	d130      	bne.n	80027d2 <HAL_TIM_IRQHandler+0x16c>
}
 8002770:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	f7ff ff74 	bl	800265e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002776:	4620      	mov	r0, r4
 8002778:	f7ff ff73 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
 800277c:	e78a      	b.n	8002694 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff ff6d 	bl	800265e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ff6c 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
 800278a:	e79b      	b.n	80026c4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff ff66 	bl	800265e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff ff65 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
 8002798:	e7ac      	b.n	80026f4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff ff5f 	bl	800265e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff ff5e 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
 80027a6:	e7bd      	b.n	8002724 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a8:	f06f 0201 	mvn.w	r2, #1
 80027ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ae:	4620      	mov	r0, r4
 80027b0:	f002 f97e 	bl	8004ab0 <HAL_TIM_PeriodElapsedCallback>
 80027b4:	e7c1      	b.n	800273a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80027bc:	4620      	mov	r0, r4
 80027be:	f000 f983 	bl	8002ac8 <HAL_TIMEx_BreakCallback>
 80027c2:	e7c3      	b.n	800274c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff ff4a 	bl	8002664 <HAL_TIM_TriggerCallback>
 80027d0:	e7c5      	b.n	800275e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027d2:	f06f 0220 	mvn.w	r2, #32
 80027d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80027d8:	4620      	mov	r0, r4
 80027da:	f000 f974 	bl	8002ac6 <HAL_TIMEx_CommutCallback>
}
 80027de:	e7c7      	b.n	8002770 <HAL_TIM_IRQHandler+0x10a>

080027e0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80027e0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e2:	4a25      	ldr	r2, [pc, #148]	; (8002878 <TIM_Base_SetConfig+0x98>)
 80027e4:	4290      	cmp	r0, r2
 80027e6:	d00e      	beq.n	8002806 <TIM_Base_SetConfig+0x26>
 80027e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80027ec:	d00b      	beq.n	8002806 <TIM_Base_SetConfig+0x26>
 80027ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80027f2:	4290      	cmp	r0, r2
 80027f4:	d007      	beq.n	8002806 <TIM_Base_SetConfig+0x26>
 80027f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027fa:	4290      	cmp	r0, r2
 80027fc:	d003      	beq.n	8002806 <TIM_Base_SetConfig+0x26>
 80027fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002802:	4290      	cmp	r0, r2
 8002804:	d103      	bne.n	800280e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800280a:	684a      	ldr	r2, [r1, #4]
 800280c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <TIM_Base_SetConfig+0x98>)
 8002810:	4290      	cmp	r0, r2
 8002812:	d01a      	beq.n	800284a <TIM_Base_SetConfig+0x6a>
 8002814:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002818:	d017      	beq.n	800284a <TIM_Base_SetConfig+0x6a>
 800281a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800281e:	4290      	cmp	r0, r2
 8002820:	d013      	beq.n	800284a <TIM_Base_SetConfig+0x6a>
 8002822:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002826:	4290      	cmp	r0, r2
 8002828:	d00f      	beq.n	800284a <TIM_Base_SetConfig+0x6a>
 800282a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800282e:	4290      	cmp	r0, r2
 8002830:	d00b      	beq.n	800284a <TIM_Base_SetConfig+0x6a>
 8002832:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002836:	4290      	cmp	r0, r2
 8002838:	d007      	beq.n	800284a <TIM_Base_SetConfig+0x6a>
 800283a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800283e:	4290      	cmp	r0, r2
 8002840:	d003      	beq.n	800284a <TIM_Base_SetConfig+0x6a>
 8002842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002846:	4290      	cmp	r0, r2
 8002848:	d103      	bne.n	8002852 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800284a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284e:	68ca      	ldr	r2, [r1, #12]
 8002850:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002856:	694a      	ldr	r2, [r1, #20]
 8002858:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800285a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800285c:	688b      	ldr	r3, [r1, #8]
 800285e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002860:	680b      	ldr	r3, [r1, #0]
 8002862:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <TIM_Base_SetConfig+0x98>)
 8002866:	4298      	cmp	r0, r3
 8002868:	d002      	beq.n	8002870 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 800286a:	2301      	movs	r3, #1
 800286c:	6143      	str	r3, [r0, #20]
}
 800286e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002870:	690b      	ldr	r3, [r1, #16]
 8002872:	6303      	str	r3, [r0, #48]	; 0x30
 8002874:	e7f9      	b.n	800286a <TIM_Base_SetConfig+0x8a>
 8002876:	bf00      	nop
 8002878:	40010000 	.word	0x40010000

0800287c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800287c:	b1a8      	cbz	r0, 80028aa <HAL_TIM_Base_Init+0x2e>
{
 800287e:	b510      	push	{r4, lr}
 8002880:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002886:	b15b      	cbz	r3, 80028a0 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	2302      	movs	r3, #2
 800288a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288e:	1d21      	adds	r1, r4, #4
 8002890:	6820      	ldr	r0, [r4, #0]
 8002892:	f7ff ffa5 	bl	80027e0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002896:	2301      	movs	r3, #1
 8002898:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800289c:	2000      	movs	r0, #0
}
 800289e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80028a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80028a4:	f002 fab2 	bl	8004e0c <HAL_TIM_Base_MspInit>
 80028a8:	e7ee      	b.n	8002888 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80028aa:	2001      	movs	r0, #1
}
 80028ac:	4770      	bx	lr

080028ae <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80028ae:	b1a8      	cbz	r0, 80028dc <HAL_TIM_PWM_Init+0x2e>
{
 80028b0:	b510      	push	{r4, lr}
 80028b2:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80028b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028b8:	b15b      	cbz	r3, 80028d2 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80028ba:	2302      	movs	r3, #2
 80028bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c0:	1d21      	adds	r1, r4, #4
 80028c2:	6820      	ldr	r0, [r4, #0]
 80028c4:	f7ff ff8c 	bl	80027e0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80028ce:	2000      	movs	r0, #0
}
 80028d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80028d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80028d6:	f002 fa81 	bl	8004ddc <HAL_TIM_PWM_MspInit>
 80028da:	e7ee      	b.n	80028ba <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
}
 80028de:	4770      	bx	lr

080028e0 <TIM_OC2_SetConfig>:
{
 80028e0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e2:	6a03      	ldr	r3, [r0, #32]
 80028e4:	f023 0310 	bic.w	r3, r3, #16
 80028e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80028ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80028ec:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80028ee:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028f0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f4:	680d      	ldr	r5, [r1, #0]
 80028f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80028fa:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028fe:	688d      	ldr	r5, [r1, #8]
 8002900:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002904:	4d0e      	ldr	r5, [pc, #56]	; (8002940 <TIM_OC2_SetConfig+0x60>)
 8002906:	42a8      	cmp	r0, r5
 8002908:	d009      	beq.n	800291e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290a:	4d0d      	ldr	r5, [pc, #52]	; (8002940 <TIM_OC2_SetConfig+0x60>)
 800290c:	42a8      	cmp	r0, r5
 800290e:	d00e      	beq.n	800292e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002910:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002912:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002914:	684a      	ldr	r2, [r1, #4]
 8002916:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002918:	6203      	str	r3, [r0, #32]
}
 800291a:	bc30      	pop	{r4, r5}
 800291c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800291e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002922:	68cd      	ldr	r5, [r1, #12]
 8002924:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800292c:	e7ed      	b.n	800290a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800292e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002932:	694d      	ldr	r5, [r1, #20]
 8002934:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002938:	698d      	ldr	r5, [r1, #24]
 800293a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800293e:	e7e7      	b.n	8002910 <TIM_OC2_SetConfig+0x30>
 8002940:	40010000 	.word	0x40010000

08002944 <HAL_TIM_PWM_ConfigChannel>:
{
 8002944:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002946:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800294a:	2b01      	cmp	r3, #1
 800294c:	d066      	beq.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800294e:	460d      	mov	r5, r1
 8002950:	4604      	mov	r4, r0
 8002952:	2301      	movs	r3, #1
 8002954:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	2302      	movs	r3, #2
 800295a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800295e:	2a0c      	cmp	r2, #12
 8002960:	d81a      	bhi.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x54>
 8002962:	e8df f002 	tbb	[pc, r2]
 8002966:	1907      	.short	0x1907
 8002968:	19201919 	.word	0x19201919
 800296c:	19341919 	.word	0x19341919
 8002970:	1919      	.short	0x1919
 8002972:	47          	.byte	0x47
 8002973:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002974:	6800      	ldr	r0, [r0, #0]
 8002976:	f7ff fddd 	bl	8002534 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800297a:	6822      	ldr	r2, [r4, #0]
 800297c:	6993      	ldr	r3, [r2, #24]
 800297e:	f043 0308 	orr.w	r3, r3, #8
 8002982:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002984:	6822      	ldr	r2, [r4, #0]
 8002986:	6993      	ldr	r3, [r2, #24]
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800298e:	6822      	ldr	r2, [r4, #0]
 8002990:	6993      	ldr	r3, [r2, #24]
 8002992:	6929      	ldr	r1, [r5, #16]
 8002994:	430b      	orrs	r3, r1
 8002996:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002998:	2301      	movs	r3, #1
 800299a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800299e:	2000      	movs	r0, #0
 80029a0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80029a4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029a6:	6800      	ldr	r0, [r0, #0]
 80029a8:	f7ff ff9a 	bl	80028e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029ac:	6822      	ldr	r2, [r4, #0]
 80029ae:	6993      	ldr	r3, [r2, #24]
 80029b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029b6:	6822      	ldr	r2, [r4, #0]
 80029b8:	6993      	ldr	r3, [r2, #24]
 80029ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029c0:	6822      	ldr	r2, [r4, #0]
 80029c2:	6993      	ldr	r3, [r2, #24]
 80029c4:	6929      	ldr	r1, [r5, #16]
 80029c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80029ca:	6193      	str	r3, [r2, #24]
      break;
 80029cc:	e7e4      	b.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029ce:	6800      	ldr	r0, [r0, #0]
 80029d0:	f7ff fdde 	bl	8002590 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029d4:	6822      	ldr	r2, [r4, #0]
 80029d6:	69d3      	ldr	r3, [r2, #28]
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029de:	6822      	ldr	r2, [r4, #0]
 80029e0:	69d3      	ldr	r3, [r2, #28]
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e8:	6822      	ldr	r2, [r4, #0]
 80029ea:	69d3      	ldr	r3, [r2, #28]
 80029ec:	6929      	ldr	r1, [r5, #16]
 80029ee:	430b      	orrs	r3, r1
 80029f0:	61d3      	str	r3, [r2, #28]
      break;
 80029f2:	e7d1      	b.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029f4:	6800      	ldr	r0, [r0, #0]
 80029f6:	f7ff fdfd 	bl	80025f4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029fa:	6822      	ldr	r2, [r4, #0]
 80029fc:	69d3      	ldr	r3, [r2, #28]
 80029fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a02:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a04:	6822      	ldr	r2, [r4, #0]
 8002a06:	69d3      	ldr	r3, [r2, #28]
 8002a08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a0c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	69d3      	ldr	r3, [r2, #28]
 8002a12:	6929      	ldr	r1, [r5, #16]
 8002a14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a18:	61d3      	str	r3, [r2, #28]
      break;
 8002a1a:	e7bd      	b.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	e7c1      	b.n	80029a4 <HAL_TIM_PWM_ConfigChannel+0x60>

08002a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a20:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a22:	f001 011f 	and.w	r1, r1, #31
 8002a26:	2301      	movs	r3, #1
 8002a28:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a2c:	6a03      	ldr	r3, [r0, #32]
 8002a2e:	ea23 0304 	bic.w	r3, r3, r4
 8002a32:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a34:	6a03      	ldr	r3, [r0, #32]
 8002a36:	408a      	lsls	r2, r1
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	6203      	str	r3, [r0, #32]
}
 8002a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_TIM_PWM_Start>:
{
 8002a44:	b510      	push	{r4, lr}
 8002a46:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	6800      	ldr	r0, [r0, #0]
 8002a4c:	f7ff ffe8 	bl	8002a20 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <HAL_TIM_PWM_Start+0x38>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00b      	beq.n	8002a70 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	6893      	ldr	r3, [r2, #8]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d003      	beq.n	8002a6c <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8002a64:	6813      	ldr	r3, [r2, #0]
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8002a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
 8002a78:	e7ee      	b.n	8002a58 <HAL_TIM_PWM_Start+0x14>
 8002a7a:	bf00      	nop
 8002a7c:	40010000 	.word	0x40010000

08002a80 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d01c      	beq.n	8002ac2 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002a88:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002a8a:	2601      	movs	r6, #1
 8002a8c:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	2302      	movs	r3, #2
 8002a92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a96:	6802      	ldr	r2, [r0, #0]
 8002a98:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a9a:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a9c:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa0:	680c      	ldr	r4, [r1, #0]
 8002aa2:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002aa4:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa8:	684b      	ldr	r3, [r1, #4]
 8002aaa:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aac:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002aae:	6802      	ldr	r2, [r0, #0]
 8002ab0:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ab2:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002abc:	4618      	mov	r0, r3
}
 8002abe:	bc70      	pop	{r4, r5, r6}
 8002ac0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002ac2:	2002      	movs	r0, #2
}
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ac8:	4770      	bx	lr

08002aca <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002aca:	6802      	ldr	r2, [r0, #0]
 8002acc:	68d3      	ldr	r3, [r2, #12]
 8002ace:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ad2:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8002ada:	4770      	bx	lr

08002adc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002adc:	6802      	ldr	r2, [r0, #0]
 8002ade:	68d3      	ldr	r3, [r2, #12]
 8002ae0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ae4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae6:	6802      	ldr	r2, [r0, #0]
 8002ae8:	6953      	ldr	r3, [r2, #20]
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002af0:	2320      	movs	r3, #32
 8002af2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8002af6:	4770      	bx	lr

08002af8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002af8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b21      	cmp	r3, #33	; 0x21
 8002b00:	d12a      	bne.n	8002b58 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b02:	6883      	ldr	r3, [r0, #8]
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b08:	d016      	beq.n	8002b38 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b0a:	6a03      	ldr	r3, [r0, #32]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	6202      	str	r2, [r0, #32]
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	6803      	ldr	r3, [r0, #0]
 8002b14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b16:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002b1e:	b9eb      	cbnz	r3, 8002b5c <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b20:	6802      	ldr	r2, [r0, #0]
 8002b22:	68d3      	ldr	r3, [r2, #12]
 8002b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b28:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b2a:	6802      	ldr	r2, [r0, #0]
 8002b2c:	68d3      	ldr	r3, [r2, #12]
 8002b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b32:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8002b34:	2000      	movs	r0, #0
 8002b36:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b38:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	6802      	ldr	r2, [r0, #0]
 8002b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b42:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b44:	6903      	ldr	r3, [r0, #16]
 8002b46:	b91b      	cbnz	r3, 8002b50 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8002b48:	6a03      	ldr	r3, [r0, #32]
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	6203      	str	r3, [r0, #32]
 8002b4e:	e7e2      	b.n	8002b16 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8002b50:	6a03      	ldr	r3, [r0, #32]
 8002b52:	3301      	adds	r3, #1
 8002b54:	6203      	str	r3, [r0, #32]
 8002b56:	e7de      	b.n	8002b16 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8002b58:	2002      	movs	r0, #2
 8002b5a:	4770      	bx	lr
    return HAL_OK;
 8002b5c:	2000      	movs	r0, #0
  }
}
 8002b5e:	4770      	bx	lr

08002b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b64:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b66:	6802      	ldr	r2, [r0, #0]
 8002b68:	6913      	ldr	r3, [r2, #16]
 8002b6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b6e:	68c1      	ldr	r1, [r0, #12]
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b74:	6883      	ldr	r3, [r0, #8]
 8002b76:	6902      	ldr	r2, [r0, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	6942      	ldr	r2, [r0, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	69c2      	ldr	r2, [r0, #28]
 8002b80:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002b82:	6801      	ldr	r1, [r0, #0]
 8002b84:	68cb      	ldr	r3, [r1, #12]
 8002b86:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b8a:	f023 030c 	bic.w	r3, r3, #12
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b92:	6802      	ldr	r2, [r0, #0]
 8002b94:	6953      	ldr	r3, [r2, #20]
 8002b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9a:	6981      	ldr	r1, [r0, #24]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba0:	69c3      	ldr	r3, [r0, #28]
 8002ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba6:	d060      	beq.n	8002c6a <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ba8:	6803      	ldr	r3, [r0, #0]
 8002baa:	4ab8      	ldr	r2, [pc, #736]	; (8002e8c <UART_SetConfig+0x32c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	f000 8114 	beq.w	8002dda <UART_SetConfig+0x27a>
 8002bb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	f000 810f 	beq.w	8002dda <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bbc:	f7ff fc3c 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002bc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bc8:	6865      	ldr	r5, [r4, #4]
 8002bca:	00ad      	lsls	r5, r5, #2
 8002bcc:	fbb0 f5f5 	udiv	r5, r0, r5
 8002bd0:	4faf      	ldr	r7, [pc, #700]	; (8002e90 <UART_SetConfig+0x330>)
 8002bd2:	fba7 3505 	umull	r3, r5, r7, r5
 8002bd6:	096d      	lsrs	r5, r5, #5
 8002bd8:	012e      	lsls	r6, r5, #4
 8002bda:	f7ff fc2d 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002bde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be6:	6865      	ldr	r5, [r4, #4]
 8002be8:	00ad      	lsls	r5, r5, #2
 8002bea:	fbb0 f9f5 	udiv	r9, r0, r5
 8002bee:	f7ff fc23 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002bf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bfa:	6865      	ldr	r5, [r4, #4]
 8002bfc:	00ad      	lsls	r5, r5, #2
 8002bfe:	fbb0 f5f5 	udiv	r5, r0, r5
 8002c02:	fba7 3505 	umull	r3, r5, r7, r5
 8002c06:	096d      	lsrs	r5, r5, #5
 8002c08:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002c0c:	fb08 9515 	mls	r5, r8, r5, r9
 8002c10:	012d      	lsls	r5, r5, #4
 8002c12:	3532      	adds	r5, #50	; 0x32
 8002c14:	fba7 3505 	umull	r3, r5, r7, r5
 8002c18:	096d      	lsrs	r5, r5, #5
 8002c1a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002c1e:	4435      	add	r5, r6
 8002c20:	f7ff fc0a 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002c24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c2c:	6866      	ldr	r6, [r4, #4]
 8002c2e:	00b6      	lsls	r6, r6, #2
 8002c30:	fbb0 f6f6 	udiv	r6, r0, r6
 8002c34:	f7ff fc00 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002c38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c40:	6863      	ldr	r3, [r4, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c48:	fba7 3000 	umull	r3, r0, r7, r0
 8002c4c:	0940      	lsrs	r0, r0, #5
 8002c4e:	fb08 6810 	mls	r8, r8, r0, r6
 8002c52:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002c56:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002c5a:	fba7 3708 	umull	r3, r7, r7, r8
 8002c5e:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	442f      	add	r7, r5
 8002c66:	609f      	str	r7, [r3, #8]
    }
  }
}
 8002c68:	e10d      	b.n	8002e86 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c6a:	6803      	ldr	r3, [r0, #0]
 8002c6c:	4a87      	ldr	r2, [pc, #540]	; (8002e8c <UART_SetConfig+0x32c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d05b      	beq.n	8002d2a <UART_SetConfig+0x1ca>
 8002c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d057      	beq.n	8002d2a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002c7a:	f7ff fbdd 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002c7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c86:	6865      	ldr	r5, [r4, #4]
 8002c88:	006d      	lsls	r5, r5, #1
 8002c8a:	fbb0 f5f5 	udiv	r5, r0, r5
 8002c8e:	4f80      	ldr	r7, [pc, #512]	; (8002e90 <UART_SetConfig+0x330>)
 8002c90:	fba7 3505 	umull	r3, r5, r7, r5
 8002c94:	096d      	lsrs	r5, r5, #5
 8002c96:	012e      	lsls	r6, r5, #4
 8002c98:	f7ff fbce 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002c9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ca0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ca4:	6865      	ldr	r5, [r4, #4]
 8002ca6:	006d      	lsls	r5, r5, #1
 8002ca8:	fbb0 f9f5 	udiv	r9, r0, r5
 8002cac:	f7ff fbc4 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cb8:	6865      	ldr	r5, [r4, #4]
 8002cba:	006d      	lsls	r5, r5, #1
 8002cbc:	fbb0 f5f5 	udiv	r5, r0, r5
 8002cc0:	fba7 3505 	umull	r3, r5, r7, r5
 8002cc4:	096d      	lsrs	r5, r5, #5
 8002cc6:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002cca:	fb08 9515 	mls	r5, r8, r5, r9
 8002cce:	00ed      	lsls	r5, r5, #3
 8002cd0:	3532      	adds	r5, #50	; 0x32
 8002cd2:	fba7 3505 	umull	r3, r5, r7, r5
 8002cd6:	096d      	lsrs	r5, r5, #5
 8002cd8:	006d      	lsls	r5, r5, #1
 8002cda:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002cde:	4435      	add	r5, r6
 8002ce0:	f7ff fbaa 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002ce4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ce8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cec:	6866      	ldr	r6, [r4, #4]
 8002cee:	0076      	lsls	r6, r6, #1
 8002cf0:	fbb0 f6f6 	udiv	r6, r0, r6
 8002cf4:	f7ff fba0 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002cf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d00:	6863      	ldr	r3, [r4, #4]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d08:	fba7 2303 	umull	r2, r3, r7, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	fb08 6813 	mls	r8, r8, r3, r6
 8002d12:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8002d16:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002d1a:	fba7 3708 	umull	r3, r7, r7, r8
 8002d1e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	442f      	add	r7, r5
 8002d26:	609f      	str	r7, [r3, #8]
 8002d28:	e0ad      	b.n	8002e86 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002d2a:	f7ff fb95 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002d2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d36:	6865      	ldr	r5, [r4, #4]
 8002d38:	006d      	lsls	r5, r5, #1
 8002d3a:	fbb0 f5f5 	udiv	r5, r0, r5
 8002d3e:	4f54      	ldr	r7, [pc, #336]	; (8002e90 <UART_SetConfig+0x330>)
 8002d40:	fba7 3505 	umull	r3, r5, r7, r5
 8002d44:	096d      	lsrs	r5, r5, #5
 8002d46:	012e      	lsls	r6, r5, #4
 8002d48:	f7ff fb86 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002d4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d54:	6865      	ldr	r5, [r4, #4]
 8002d56:	006d      	lsls	r5, r5, #1
 8002d58:	fbb0 f9f5 	udiv	r9, r0, r5
 8002d5c:	f7ff fb7c 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002d60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d68:	6865      	ldr	r5, [r4, #4]
 8002d6a:	006d      	lsls	r5, r5, #1
 8002d6c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002d70:	fba7 3505 	umull	r3, r5, r7, r5
 8002d74:	096d      	lsrs	r5, r5, #5
 8002d76:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002d7a:	fb08 9515 	mls	r5, r8, r5, r9
 8002d7e:	00ed      	lsls	r5, r5, #3
 8002d80:	3532      	adds	r5, #50	; 0x32
 8002d82:	fba7 3505 	umull	r3, r5, r7, r5
 8002d86:	096d      	lsrs	r5, r5, #5
 8002d88:	006d      	lsls	r5, r5, #1
 8002d8a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002d8e:	4435      	add	r5, r6
 8002d90:	f7ff fb62 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002d94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d9c:	6866      	ldr	r6, [r4, #4]
 8002d9e:	0076      	lsls	r6, r6, #1
 8002da0:	fbb0 f6f6 	udiv	r6, r0, r6
 8002da4:	f7ff fb58 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002da8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002db0:	6863      	ldr	r3, [r4, #4]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db8:	fba7 2303 	umull	r2, r3, r7, r3
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	fb08 6813 	mls	r8, r8, r3, r6
 8002dc2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8002dc6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002dca:	fba7 3708 	umull	r3, r7, r7, r8
 8002dce:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	442f      	add	r7, r5
 8002dd6:	609f      	str	r7, [r3, #8]
 8002dd8:	e055      	b.n	8002e86 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002dda:	f7ff fb3d 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002dde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002de2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002de6:	6865      	ldr	r5, [r4, #4]
 8002de8:	00ad      	lsls	r5, r5, #2
 8002dea:	fbb0 f5f5 	udiv	r5, r0, r5
 8002dee:	4f28      	ldr	r7, [pc, #160]	; (8002e90 <UART_SetConfig+0x330>)
 8002df0:	fba7 3505 	umull	r3, r5, r7, r5
 8002df4:	096d      	lsrs	r5, r5, #5
 8002df6:	012e      	lsls	r6, r5, #4
 8002df8:	f7ff fb2e 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002dfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e04:	6865      	ldr	r5, [r4, #4]
 8002e06:	00ad      	lsls	r5, r5, #2
 8002e08:	fbb0 f9f5 	udiv	r9, r0, r5
 8002e0c:	f7ff fb24 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002e10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e18:	6865      	ldr	r5, [r4, #4]
 8002e1a:	00ad      	lsls	r5, r5, #2
 8002e1c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002e20:	fba7 3505 	umull	r3, r5, r7, r5
 8002e24:	096d      	lsrs	r5, r5, #5
 8002e26:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002e2a:	fb08 9515 	mls	r5, r8, r5, r9
 8002e2e:	012d      	lsls	r5, r5, #4
 8002e30:	3532      	adds	r5, #50	; 0x32
 8002e32:	fba7 3505 	umull	r3, r5, r7, r5
 8002e36:	096d      	lsrs	r5, r5, #5
 8002e38:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002e3c:	4435      	add	r5, r6
 8002e3e:	f7ff fb0b 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002e42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e4a:	6866      	ldr	r6, [r4, #4]
 8002e4c:	00b6      	lsls	r6, r6, #2
 8002e4e:	fbb0 f6f6 	udiv	r6, r0, r6
 8002e52:	f7ff fb01 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8002e56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e5e:	6863      	ldr	r3, [r4, #4]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e66:	fba7 3000 	umull	r3, r0, r7, r0
 8002e6a:	0940      	lsrs	r0, r0, #5
 8002e6c:	fb08 6810 	mls	r8, r8, r0, r6
 8002e70:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002e74:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002e78:	fba7 3708 	umull	r3, r7, r7, r8
 8002e7c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	442f      	add	r7, r5
 8002e84:	609f      	str	r7, [r3, #8]
}
 8002e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40011000 	.word	0x40011000
 8002e90:	51eb851f 	.word	0x51eb851f

08002e94 <HAL_UART_Init>:
  if (huart == NULL)
 8002e94:	b358      	cbz	r0, 8002eee <HAL_UART_Init+0x5a>
{
 8002e96:	b510      	push	{r4, lr}
 8002e98:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002e9e:	b30b      	cbz	r3, 8002ee4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002ea0:	2324      	movs	r3, #36	; 0x24
 8002ea2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	68d3      	ldr	r3, [r2, #12]
 8002eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff fe55 	bl	8002b60 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	6913      	ldr	r3, [r2, #16]
 8002eba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ebe:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	6953      	ldr	r3, [r2, #20]
 8002ec4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002ec8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002eca:	6822      	ldr	r2, [r4, #0]
 8002ecc:	68d3      	ldr	r3, [r2, #12]
 8002ece:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ed2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ede:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002ee2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002ee4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002ee8:	f002 f852 	bl	8004f90 <HAL_UART_MspInit>
 8002eec:	e7d8      	b.n	8002ea0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002eee:	2001      	movs	r0, #1
}
 8002ef0:	4770      	bx	lr
	...

08002ef4 <HAL_UART_Receive_DMA>:
{
 8002ef4:	b530      	push	{r4, r5, lr}
 8002ef6:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ef8:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8002efc:	b2e4      	uxtb	r4, r4
 8002efe:	2c20      	cmp	r4, #32
 8002f00:	d13d      	bne.n	8002f7e <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8002f02:	2900      	cmp	r1, #0
 8002f04:	d03e      	beq.n	8002f84 <HAL_UART_Receive_DMA+0x90>
 8002f06:	2a00      	cmp	r2, #0
 8002f08:	d03e      	beq.n	8002f88 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 8002f0a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d03c      	beq.n	8002f8c <HAL_UART_Receive_DMA+0x98>
 8002f12:	4613      	mov	r3, r2
 8002f14:	460a      	mov	r2, r1
 8002f16:	4604      	mov	r4, r0
 8002f18:	2101      	movs	r1, #1
 8002f1a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8002f1e:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002f20:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f22:	2500      	movs	r5, #0
 8002f24:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f26:	2122      	movs	r1, #34	; 0x22
 8002f28:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f2c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002f2e:	4818      	ldr	r0, [pc, #96]	; (8002f90 <HAL_UART_Receive_DMA+0x9c>)
 8002f30:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f34:	4817      	ldr	r0, [pc, #92]	; (8002f94 <HAL_UART_Receive_DMA+0xa0>)
 8002f36:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f3a:	4817      	ldr	r0, [pc, #92]	; (8002f98 <HAL_UART_Receive_DMA+0xa4>)
 8002f3c:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8002f3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f40:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f42:	6821      	ldr	r1, [r4, #0]
 8002f44:	3104      	adds	r1, #4
 8002f46:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f48:	f7fe fb24 	bl	8001594 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002f4c:	9501      	str	r5, [sp, #4]
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	9201      	str	r2, [sp, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	9201      	str	r2, [sp, #4]
 8002f58:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8002f5a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f64:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f66:	6822      	ldr	r2, [r4, #0]
 8002f68:	6953      	ldr	r3, [r2, #20]
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f70:	6822      	ldr	r2, [r4, #0]
 8002f72:	6953      	ldr	r3, [r2, #20]
 8002f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f78:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	e000      	b.n	8002f80 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8002f7e:	2002      	movs	r0, #2
}
 8002f80:	b003      	add	sp, #12
 8002f82:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8002f84:	2001      	movs	r0, #1
 8002f86:	e7fb      	b.n	8002f80 <HAL_UART_Receive_DMA+0x8c>
 8002f88:	2001      	movs	r0, #1
 8002f8a:	e7f9      	b.n	8002f80 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8002f8c:	2002      	movs	r0, #2
 8002f8e:	e7f7      	b.n	8002f80 <HAL_UART_Receive_DMA+0x8c>
 8002f90:	08002fbb 	.word	0x08002fbb
 8002f94:	08003097 	.word	0x08003097
 8002f98:	080030a3 	.word	0x080030a3

08002f9c <HAL_UART_TxCpltCallback>:
}
 8002f9c:	4770      	bx	lr

08002f9e <UART_EndTransmit_IT>:
{
 8002f9e:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fa0:	6801      	ldr	r1, [r0, #0]
 8002fa2:	68cb      	ldr	r3, [r1, #12]
 8002fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa8:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002faa:	2320      	movs	r3, #32
 8002fac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002fb0:	f7ff fff4 	bl	8002f9c <HAL_UART_TxCpltCallback>
}
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	bd08      	pop	{r3, pc}

08002fb8 <HAL_UART_RxCpltCallback>:
}
 8002fb8:	4770      	bx	lr

08002fba <UART_DMAReceiveCplt>:
{
 8002fba:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002fbe:	6802      	ldr	r2, [r0, #0]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002fc6:	d113      	bne.n	8002ff0 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8002fc8:	2200      	movs	r2, #0
 8002fca:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	68ca      	ldr	r2, [r1, #12]
 8002fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fd4:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	694a      	ldr	r2, [r1, #20]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	694a      	ldr	r2, [r1, #20]
 8002fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe8:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ffe1 	bl	8002fb8 <HAL_UART_RxCpltCallback>
}
 8002ff6:	bd08      	pop	{r3, pc}

08002ff8 <UART_Receive_IT>:
{
 8002ff8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ffa:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b22      	cmp	r3, #34	; 0x22
 8003002:	d145      	bne.n	8003090 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003004:	6883      	ldr	r3, [r0, #8]
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d00e      	beq.n	800302a <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800300c:	6903      	ldr	r3, [r0, #16]
 800300e:	bb03      	cbnz	r3, 8003052 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003010:	6803      	ldr	r3, [r0, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	6281      	str	r1, [r0, #40]	; 0x28
 800301a:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800301c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800301e:	3b01      	subs	r3, #1
 8003020:	b29b      	uxth	r3, r3
 8003022:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003024:	b1f3      	cbz	r3, 8003064 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8003026:	2000      	movs	r0, #0
 8003028:	e033      	b.n	8003092 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800302a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800302c:	6903      	ldr	r3, [r0, #16]
 800302e:	b943      	cbnz	r3, 8003042 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003030:	6803      	ldr	r3, [r0, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003038:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800303a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800303c:	3302      	adds	r3, #2
 800303e:	6283      	str	r3, [r0, #40]	; 0x28
 8003040:	e7ec      	b.n	800301c <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003042:	6803      	ldr	r3, [r0, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800304a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800304c:	3301      	adds	r3, #1
 800304e:	6283      	str	r3, [r0, #40]	; 0x28
 8003050:	e7e4      	b.n	800301c <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003052:	6803      	ldr	r3, [r0, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003058:	1c51      	adds	r1, r2, #1
 800305a:	6281      	str	r1, [r0, #40]	; 0x28
 800305c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003060:	7013      	strb	r3, [r2, #0]
 8003062:	e7db      	b.n	800301c <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003064:	6802      	ldr	r2, [r0, #0]
 8003066:	68d3      	ldr	r3, [r2, #12]
 8003068:	f023 0320 	bic.w	r3, r3, #32
 800306c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800306e:	6802      	ldr	r2, [r0, #0]
 8003070:	68d3      	ldr	r3, [r2, #12]
 8003072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003076:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003078:	6802      	ldr	r2, [r0, #0]
 800307a:	6953      	ldr	r3, [r2, #20]
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003082:	2320      	movs	r3, #32
 8003084:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003088:	f7ff ff96 	bl	8002fb8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800308c:	2000      	movs	r0, #0
 800308e:	e000      	b.n	8003092 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8003090:	2002      	movs	r0, #2
}
 8003092:	bd08      	pop	{r3, pc}

08003094 <HAL_UART_RxHalfCpltCallback>:
}
 8003094:	4770      	bx	lr

08003096 <UART_DMARxHalfCplt>:
{
 8003096:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8003098:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800309a:	f7ff fffb 	bl	8003094 <HAL_UART_RxHalfCpltCallback>
}
 800309e:	bd08      	pop	{r3, pc}

080030a0 <HAL_UART_ErrorCallback>:
}
 80030a0:	4770      	bx	lr

080030a2 <UART_DMAError>:
{
 80030a2:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030aa:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b21      	cmp	r3, #33	; 0x21
 80030b2:	d010      	beq.n	80030d6 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80030bc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b22      	cmp	r3, #34	; 0x22
 80030c4:	d011      	beq.n	80030ea <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80030c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030c8:	f043 0310 	orr.w	r3, r3, #16
 80030cc:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80030ce:	4620      	mov	r0, r4
 80030d0:	f7ff ffe6 	bl	80030a0 <HAL_UART_ErrorCallback>
}
 80030d4:	bd10      	pop	{r4, pc}
 80030d6:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030da:	2a00      	cmp	r2, #0
 80030dc:	d0ea      	beq.n	80030b4 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7ff fcf1 	bl	8002aca <UART_EndTxTransfer>
 80030e8:	e7e4      	b.n	80030b4 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80030ea:	2a00      	cmp	r2, #0
 80030ec:	d0eb      	beq.n	80030c6 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80030f2:	4620      	mov	r0, r4
 80030f4:	f7ff fcf2 	bl	8002adc <UART_EndRxTransfer>
 80030f8:	e7e5      	b.n	80030c6 <UART_DMAError+0x24>

080030fa <UART_DMAAbortOnError>:
{
 80030fa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003102:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003104:	f7ff ffcc 	bl	80030a0 <HAL_UART_ErrorCallback>
}
 8003108:	bd08      	pop	{r3, pc}
	...

0800310c <HAL_UART_IRQHandler>:
{
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	b083      	sub	sp, #12
 8003110:	4605      	mov	r5, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003112:	6803      	ldr	r3, [r0, #0]
 8003114:	681c      	ldr	r4, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003116:	68df      	ldr	r7, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003118:	695e      	ldr	r6, [r3, #20]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800311a:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800311c:	68da      	ldr	r2, [r3, #12]
    if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800311e:	f011 0f10 	tst.w	r1, #16
 8003122:	d003      	beq.n	800312c <HAL_UART_IRQHandler+0x20>
 8003124:	f002 0210 	and.w	r2, r2, #16
 8003128:	2a00      	cmp	r2, #0
 800312a:	d15d      	bne.n	80031e8 <HAL_UART_IRQHandler+0xdc>
  if (errorflags == RESET)
 800312c:	f014 030f 	ands.w	r3, r4, #15
 8003130:	d105      	bne.n	800313e <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003132:	f014 0f20 	tst.w	r4, #32
 8003136:	d002      	beq.n	800313e <HAL_UART_IRQHandler+0x32>
 8003138:	f017 0f20 	tst.w	r7, #32
 800313c:	d15e      	bne.n	80031fc <HAL_UART_IRQHandler+0xf0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800313e:	2b00      	cmp	r3, #0
 8003140:	d072      	beq.n	8003228 <HAL_UART_IRQHandler+0x11c>
 8003142:	f016 0601 	ands.w	r6, r6, #1
 8003146:	d102      	bne.n	800314e <HAL_UART_IRQHandler+0x42>
 8003148:	f417 7f90 	tst.w	r7, #288	; 0x120
 800314c:	d06c      	beq.n	8003228 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800314e:	f014 0f01 	tst.w	r4, #1
 8003152:	d006      	beq.n	8003162 <HAL_UART_IRQHandler+0x56>
 8003154:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003158:	d003      	beq.n	8003162 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800315a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003162:	f014 0f04 	tst.w	r4, #4
 8003166:	d004      	beq.n	8003172 <HAL_UART_IRQHandler+0x66>
 8003168:	b11e      	cbz	r6, 8003172 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800316a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003172:	f014 0f02 	tst.w	r4, #2
 8003176:	d004      	beq.n	8003182 <HAL_UART_IRQHandler+0x76>
 8003178:	b11e      	cbz	r6, 8003182 <HAL_UART_IRQHandler+0x76>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800317a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003182:	f014 0f08 	tst.w	r4, #8
 8003186:	d004      	beq.n	8003192 <HAL_UART_IRQHandler+0x86>
 8003188:	b11e      	cbz	r6, 8003192 <HAL_UART_IRQHandler+0x86>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800318a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800318c:	f043 0308 	orr.w	r3, r3, #8
 8003190:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003192:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d053      	beq.n	8003240 <HAL_UART_IRQHandler+0x134>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003198:	f014 0f20 	tst.w	r4, #32
 800319c:	d002      	beq.n	80031a4 <HAL_UART_IRQHandler+0x98>
 800319e:	f017 0f20 	tst.w	r7, #32
 80031a2:	d12f      	bne.n	8003204 <HAL_UART_IRQHandler+0xf8>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031ac:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80031ae:	f012 0f08 	tst.w	r2, #8
 80031b2:	d101      	bne.n	80031b8 <HAL_UART_IRQHandler+0xac>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d031      	beq.n	800321c <HAL_UART_IRQHandler+0x110>
        UART_EndRxTransfer(huart);
 80031b8:	4628      	mov	r0, r5
 80031ba:	f7ff fc8f 	bl	8002adc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031be:	682b      	ldr	r3, [r5, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80031c6:	d025      	beq.n	8003214 <HAL_UART_IRQHandler+0x108>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ce:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80031d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80031d2:	b1db      	cbz	r3, 800320c <HAL_UART_IRQHandler+0x100>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031d4:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <HAL_UART_IRQHandler+0x148>)
 80031d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031d8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80031da:	f7fe fa5f 	bl	800169c <HAL_DMA_Abort_IT>
 80031de:	b378      	cbz	r0, 8003240 <HAL_UART_IRQHandler+0x134>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031e0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80031e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80031e4:	4798      	blx	r3
 80031e6:	e02b      	b.n	8003240 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e8:	2200      	movs	r2, #0
 80031ea:	9201      	str	r2, [sp, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	9201      	str	r2, [sp, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	9b01      	ldr	r3, [sp, #4]
      HAL_UART_RxIdleCallback(huart);
 80031f6:	f001 ff2f 	bl	8005058 <HAL_UART_RxIdleCallback>
 80031fa:	e797      	b.n	800312c <HAL_UART_IRQHandler+0x20>
      UART_Receive_IT(huart);
 80031fc:	4628      	mov	r0, r5
 80031fe:	f7ff fefb 	bl	8002ff8 <UART_Receive_IT>
      return;
 8003202:	e01d      	b.n	8003240 <HAL_UART_IRQHandler+0x134>
        UART_Receive_IT(huart);
 8003204:	4628      	mov	r0, r5
 8003206:	f7ff fef7 	bl	8002ff8 <UART_Receive_IT>
 800320a:	e7cb      	b.n	80031a4 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 800320c:	4628      	mov	r0, r5
 800320e:	f7ff ff47 	bl	80030a0 <HAL_UART_ErrorCallback>
 8003212:	e015      	b.n	8003240 <HAL_UART_IRQHandler+0x134>
          HAL_UART_ErrorCallback(huart);
 8003214:	4628      	mov	r0, r5
 8003216:	f7ff ff43 	bl	80030a0 <HAL_UART_ErrorCallback>
 800321a:	e011      	b.n	8003240 <HAL_UART_IRQHandler+0x134>
        HAL_UART_ErrorCallback(huart);
 800321c:	4628      	mov	r0, r5
 800321e:	f7ff ff3f 	bl	80030a0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003222:	2300      	movs	r3, #0
 8003224:	63eb      	str	r3, [r5, #60]	; 0x3c
 8003226:	e00b      	b.n	8003240 <HAL_UART_IRQHandler+0x134>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003228:	f014 0f80 	tst.w	r4, #128	; 0x80
 800322c:	d002      	beq.n	8003234 <HAL_UART_IRQHandler+0x128>
 800322e:	f017 0f80 	tst.w	r7, #128	; 0x80
 8003232:	d107      	bne.n	8003244 <HAL_UART_IRQHandler+0x138>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003234:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003238:	d002      	beq.n	8003240 <HAL_UART_IRQHandler+0x134>
 800323a:	f017 0f40 	tst.w	r7, #64	; 0x40
 800323e:	d105      	bne.n	800324c <HAL_UART_IRQHandler+0x140>
}
 8003240:	b003      	add	sp, #12
 8003242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_Transmit_IT(huart);
 8003244:	4628      	mov	r0, r5
 8003246:	f7ff fc57 	bl	8002af8 <UART_Transmit_IT>
    return;
 800324a:	e7f9      	b.n	8003240 <HAL_UART_IRQHandler+0x134>
    UART_EndTransmit_IT(huart);
 800324c:	4628      	mov	r0, r5
 800324e:	f7ff fea6 	bl	8002f9e <UART_EndTransmit_IT>
    return;
 8003252:	e7f5      	b.n	8003240 <HAL_UART_IRQHandler+0x134>
 8003254:	080030fb 	.word	0x080030fb

08003258 <hex2int>:

#define boolstr(s) ((s) ? "true" : "false")

static int hex2int(char c)
{
    if (c >= '0' && c <= '9')
 8003258:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b09      	cmp	r3, #9
 8003260:	d90b      	bls.n	800327a <hex2int+0x22>
        return c - '0';
    if (c >= 'A' && c <= 'F')
 8003262:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b05      	cmp	r3, #5
 800326a:	d908      	bls.n	800327e <hex2int+0x26>
        return c - 'A' + 10;
    if (c >= 'a' && c <= 'f')
 800326c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b05      	cmp	r3, #5
 8003274:	d805      	bhi.n	8003282 <hex2int+0x2a>
        return c - 'a' + 10;
 8003276:	3857      	subs	r0, #87	; 0x57
 8003278:	4770      	bx	lr
        return c - '0';
 800327a:	3830      	subs	r0, #48	; 0x30
 800327c:	4770      	bx	lr
        return c - 'A' + 10;
 800327e:	3837      	subs	r0, #55	; 0x37
 8003280:	4770      	bx	lr
    return -1;
 8003282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003286:	4770      	bx	lr

08003288 <minmea_check>:

    return checksum;
}

bool minmea_check(const char *sentence, bool strict)
{
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	4605      	mov	r5, r0
 800328c:	460e      	mov	r6, r1
    uint8_t checksum = 0x00;

    // Sequence length is limited.
    if (strlen(sentence) > MINMEA_MAX_LENGTH + 3)
 800328e:	f7fc ffb1 	bl	80001f4 <strlen>
 8003292:	2853      	cmp	r0, #83	; 0x53
 8003294:	d83d      	bhi.n	8003312 <minmea_check+0x8a>
        return false;

    // A valid sentence starts with "$".
    if (*sentence++ != '$')
 8003296:	1c6c      	adds	r4, r5, #1
 8003298:	782b      	ldrb	r3, [r5, #0]
 800329a:	2b24      	cmp	r3, #36	; 0x24
 800329c:	d001      	beq.n	80032a2 <minmea_check+0x1a>
        return false;
 800329e:	2000      	movs	r0, #0
 80032a0:	e038      	b.n	8003314 <minmea_check+0x8c>
    uint8_t checksum = 0x00;
 80032a2:	2500      	movs	r5, #0
 80032a4:	e001      	b.n	80032aa <minmea_check+0x22>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
        checksum ^= *sentence++;
 80032a6:	3401      	adds	r4, #1
 80032a8:	405d      	eors	r5, r3
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
 80032aa:	7823      	ldrb	r3, [r4, #0]
 80032ac:	b14b      	cbz	r3, 80032c2 <minmea_check+0x3a>
 80032ae:	2b2a      	cmp	r3, #42	; 0x2a
 80032b0:	d007      	beq.n	80032c2 <minmea_check+0x3a>
 80032b2:	f001 ff43 	bl	800513c <__locale_ctype_ptr>
 80032b6:	7823      	ldrb	r3, [r4, #0]
 80032b8:	4418      	add	r0, r3
 80032ba:	7842      	ldrb	r2, [r0, #1]
 80032bc:	f012 0f97 	tst.w	r2, #151	; 0x97
 80032c0:	d1f1      	bne.n	80032a6 <minmea_check+0x1e>

    // If checksum is present...
    if (*sentence == '*') {
 80032c2:	7823      	ldrb	r3, [r4, #0]
 80032c4:	2b2a      	cmp	r3, #42	; 0x2a
 80032c6:	d00e      	beq.n	80032e6 <minmea_check+0x5e>
        int expected = upper << 4 | lower;

        // Check for checksum mismatch.
        if (checksum != expected)
            return false;
    } else if (strict) {
 80032c8:	bb4e      	cbnz	r6, 800331e <minmea_check+0x96>
        // Discard non-checksummed frames in strict mode.
        return false;
    }

    // The only stuff allowed at this point is a newline.
    if (*sentence && strcmp(sentence, "\n") && strcmp(sentence, "\r\n"))
 80032ca:	7823      	ldrb	r3, [r4, #0]
 80032cc:	b34b      	cbz	r3, 8003322 <minmea_check+0x9a>
 80032ce:	4918      	ldr	r1, [pc, #96]	; (8003330 <minmea_check+0xa8>)
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7fc ff85 	bl	80001e0 <strcmp>
 80032d6:	b330      	cbz	r0, 8003326 <minmea_check+0x9e>
 80032d8:	4916      	ldr	r1, [pc, #88]	; (8003334 <minmea_check+0xac>)
 80032da:	4620      	mov	r0, r4
 80032dc:	f7fc ff80 	bl	80001e0 <strcmp>
 80032e0:	bb18      	cbnz	r0, 800332a <minmea_check+0xa2>
        return false;

    return true;
 80032e2:	2001      	movs	r0, #1
 80032e4:	e016      	b.n	8003314 <minmea_check+0x8c>
        int upper = hex2int(*sentence++);
 80032e6:	7860      	ldrb	r0, [r4, #1]
 80032e8:	f7ff ffb6 	bl	8003258 <hex2int>
 80032ec:	4606      	mov	r6, r0
        if (upper == -1)
 80032ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80032f2:	d010      	beq.n	8003316 <minmea_check+0x8e>
        int lower = hex2int(*sentence++);
 80032f4:	1ce7      	adds	r7, r4, #3
 80032f6:	78a0      	ldrb	r0, [r4, #2]
 80032f8:	f7ff ffae 	bl	8003258 <hex2int>
        if (lower == -1)
 80032fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003300:	d00b      	beq.n	800331a <minmea_check+0x92>
        int expected = upper << 4 | lower;
 8003302:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
        if (checksum != expected)
 8003306:	4285      	cmp	r5, r0
 8003308:	d001      	beq.n	800330e <minmea_check+0x86>
            return false;
 800330a:	2000      	movs	r0, #0
 800330c:	e002      	b.n	8003314 <minmea_check+0x8c>
        int lower = hex2int(*sentence++);
 800330e:	463c      	mov	r4, r7
 8003310:	e7db      	b.n	80032ca <minmea_check+0x42>
        return false;
 8003312:	2000      	movs	r0, #0
}
 8003314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return false;
 8003316:	2000      	movs	r0, #0
 8003318:	e7fc      	b.n	8003314 <minmea_check+0x8c>
            return false;
 800331a:	2000      	movs	r0, #0
 800331c:	e7fa      	b.n	8003314 <minmea_check+0x8c>
        return false;
 800331e:	2000      	movs	r0, #0
 8003320:	e7f8      	b.n	8003314 <minmea_check+0x8c>
    return true;
 8003322:	2001      	movs	r0, #1
 8003324:	e7f6      	b.n	8003314 <minmea_check+0x8c>
 8003326:	2001      	movs	r0, #1
 8003328:	e7f4      	b.n	8003314 <minmea_check+0x8c>
        return false;
 800332a:	2000      	movs	r0, #0
 800332c:	e7f2      	b.n	8003314 <minmea_check+0x8c>
 800332e:	bf00      	nop
 8003330:	08009844 	.word	0x08009844
 8003334:	08009630 	.word	0x08009630

08003338 <minmea_scan>:
static inline bool minmea_isfield(char c) {
    return isprint((unsigned char) c) && c != ',' && c != '*';
}

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8003338:	b40e      	push	{r1, r2, r3}
 800333a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	4604      	mov	r4, r0
 8003342:	ab0f      	add	r3, sp, #60	; 0x3c
 8003344:	f853 6b04 	ldr.w	r6, [r3], #4
    bool result = false;
    bool optional = false;
    va_list ap;
    va_start(ap, format);
 8003348:	9305      	str	r3, [sp, #20]

    const char *field = sentence;
 800334a:	4605      	mov	r5, r0
    bool optional = false;
 800334c:	2700      	movs	r7, #0
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 800334e:	e2b4      	b.n	80038ba <minmea_scan+0x582>
            // All further fields are optional.
            optional = true;
            continue;
        }

        if (!field && !optional) {
 8003350:	2f00      	cmp	r7, #0
 8003352:	f040 82bb 	bne.w	80038cc <minmea_scan+0x594>
    bool result = false;
 8003356:	4638      	mov	r0, r7
 8003358:	e328      	b.n	80039ac <minmea_scan+0x674>

        switch (type) {
            case 'c': { // Single character field (char).
                char value = '\0';

                if (field && minmea_isfield(*field))
 800335a:	b1c5      	cbz	r5, 800338e <minmea_scan+0x56>
 800335c:	f895 8000 	ldrb.w	r8, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8003360:	f001 feec 	bl	800513c <__locale_ctype_ptr>
 8003364:	4440      	add	r0, r8
 8003366:	7843      	ldrb	r3, [r0, #1]
 8003368:	f013 0f97 	tst.w	r3, #151	; 0x97
 800336c:	d009      	beq.n	8003382 <minmea_scan+0x4a>
 800336e:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 8003372:	d00a      	beq.n	800338a <minmea_scan+0x52>
 8003374:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8003378:	d001      	beq.n	800337e <minmea_scan+0x46>
 800337a:	2301      	movs	r3, #1
 800337c:	e002      	b.n	8003384 <minmea_scan+0x4c>
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <minmea_scan+0x4c>
 8003382:	2300      	movs	r3, #0
                if (field && minmea_isfield(*field))
 8003384:	b153      	cbz	r3, 800339c <minmea_scan+0x64>
                    value = *field;
 8003386:	7829      	ldrb	r1, [r5, #0]
 8003388:	e002      	b.n	8003390 <minmea_scan+0x58>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800338a:	2300      	movs	r3, #0
 800338c:	e7fa      	b.n	8003384 <minmea_scan+0x4c>
                char value = '\0';
 800338e:	2100      	movs	r1, #0

                *va_arg(ap, char *) = value;
 8003390:	9b05      	ldr	r3, [sp, #20]
 8003392:	1d1a      	adds	r2, r3, #4
 8003394:	9205      	str	r2, [sp, #20]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	7019      	strb	r1, [r3, #0]
            } break;
 800339a:	e27a      	b.n	8003892 <minmea_scan+0x55a>
                char value = '\0';
 800339c:	2100      	movs	r1, #0
 800339e:	e7f7      	b.n	8003390 <minmea_scan+0x58>

            case 'd': { // Single character direction field (int).
                int value = 0;

                if (field && minmea_isfield(*field)) {
 80033a0:	b395      	cbz	r5, 8003408 <minmea_scan+0xd0>
 80033a2:	f895 8000 	ldrb.w	r8, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 80033a6:	f001 fec9 	bl	800513c <__locale_ctype_ptr>
 80033aa:	4440      	add	r0, r8
 80033ac:	7843      	ldrb	r3, [r0, #1]
 80033ae:	f013 0f97 	tst.w	r3, #151	; 0x97
 80033b2:	d009      	beq.n	80033c8 <minmea_scan+0x90>
 80033b4:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80033b8:	d022      	beq.n	8003400 <minmea_scan+0xc8>
 80033ba:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 80033be:	d001      	beq.n	80033c4 <minmea_scan+0x8c>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e002      	b.n	80033ca <minmea_scan+0x92>
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <minmea_scan+0x92>
 80033c8:	2300      	movs	r3, #0
                if (field && minmea_isfield(*field)) {
 80033ca:	b1fb      	cbz	r3, 800340c <minmea_scan+0xd4>
                    switch (*field) {
 80033cc:	782b      	ldrb	r3, [r5, #0]
 80033ce:	3b45      	subs	r3, #69	; 0x45
 80033d0:	2b12      	cmp	r3, #18
 80033d2:	f200 82f0 	bhi.w	80039b6 <minmea_scan+0x67e>
 80033d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80033da:	0015      	.short	0x0015
 80033dc:	02ee02ee 	.word	0x02ee02ee
 80033e0:	02ee02ee 	.word	0x02ee02ee
 80033e4:	02ee02ee 	.word	0x02ee02ee
 80033e8:	02ee02ee 	.word	0x02ee02ee
 80033ec:	02ee0015 	.word	0x02ee0015
 80033f0:	02ee02ee 	.word	0x02ee02ee
 80033f4:	002002ee 	.word	0x002002ee
 80033f8:	02ee02ee 	.word	0x02ee02ee
 80033fc:	002002ee 	.word	0x002002ee
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8003400:	2300      	movs	r3, #0
 8003402:	e7e2      	b.n	80033ca <minmea_scan+0x92>
                        case 'N':
                        case 'E':
                            value = 1;
 8003404:	2101      	movs	r1, #1
 8003406:	e002      	b.n	800340e <minmea_scan+0xd6>
                int value = 0;
 8003408:	2100      	movs	r1, #0
 800340a:	e000      	b.n	800340e <minmea_scan+0xd6>
 800340c:	2100      	movs	r1, #0
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 800340e:	9b05      	ldr	r3, [sp, #20]
 8003410:	1d1a      	adds	r2, r3, #4
 8003412:	9205      	str	r2, [sp, #20]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6019      	str	r1, [r3, #0]
            } break;
 8003418:	e23b      	b.n	8003892 <minmea_scan+0x55a>
                            value = -1;
 800341a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800341e:	e7f6      	b.n	800340e <minmea_scan+0xd6>
            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
                int_least32_t value = -1;
                int_least32_t scale = 0;

                if (field) {
 8003420:	2d00      	cmp	r5, #0
 8003422:	d154      	bne.n	80034ce <minmea_scan+0x196>
                int_least32_t scale = 0;
 8003424:	f04f 0900 	mov.w	r9, #0
                int_least32_t value = -1;
 8003428:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
                int sign = 0;
 800342c:	46ca      	mov	sl, r9
                        }
                        field++;
                    }
                }

                if ((sign || scale) && value == -1)
 800342e:	f1ba 0f00 	cmp.w	sl, #0
 8003432:	d102      	bne.n	800343a <minmea_scan+0x102>
 8003434:	f1b9 0f00 	cmp.w	r9, #0
 8003438:	d003      	beq.n	8003442 <minmea_scan+0x10a>
 800343a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800343e:	f000 82c4 	beq.w	80039ca <minmea_scan+0x692>
                    goto parse_error;

                if (value == -1) {
 8003442:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003446:	d07f      	beq.n	8003548 <minmea_scan+0x210>
                    /* No digits were scanned. */
                    value = 0;
                    scale = 0;
                } else if (scale == 0) {
 8003448:	f1b9 0f00 	cmp.w	r9, #0
 800344c:	d17f      	bne.n	800354e <minmea_scan+0x216>
                    /* No decimal point. */
                    scale = 1;
 800344e:	f04f 0901 	mov.w	r9, #1
 8003452:	e07c      	b.n	800354e <minmea_scan+0x216>
                        if (*field == '+' && !sign && value == -1) {
 8003454:	f1ba 0f00 	cmp.w	sl, #0
 8003458:	d147      	bne.n	80034ea <minmea_scan+0x1b2>
 800345a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800345e:	d144      	bne.n	80034ea <minmea_scan+0x1b2>
                            sign = 1;
 8003460:	f04f 0a01 	mov.w	sl, #1
 8003464:	e018      	b.n	8003498 <minmea_scan+0x160>
                                value = 0;
 8003466:	f04f 0800 	mov.w	r8, #0
 800346a:	e052      	b.n	8003512 <minmea_scan+0x1da>
                                if (scale) {
 800346c:	f1b9 0f00 	cmp.w	r9, #0
 8003470:	d1dd      	bne.n	800342e <minmea_scan+0xf6>
    bool result = false;
 8003472:	2000      	movs	r0, #0
 8003474:	e29a      	b.n	80039ac <minmea_scan+0x674>
                        } else if (*field == '.' && scale == 0) {
 8003476:	2b2e      	cmp	r3, #46	; 0x2e
 8003478:	d020      	beq.n	80034bc <minmea_scan+0x184>
                        } else if (*field == ' ') {
 800347a:	2b20      	cmp	r3, #32
 800347c:	f040 829d 	bne.w	80039ba <minmea_scan+0x682>
                            if (sign != 0 || value != -1 || scale != 0)
 8003480:	f1ba 0f00 	cmp.w	sl, #0
 8003484:	f040 829b 	bne.w	80039be <minmea_scan+0x686>
 8003488:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800348c:	f040 8299 	bne.w	80039c2 <minmea_scan+0x68a>
 8003490:	f1b9 0f00 	cmp.w	r9, #0
 8003494:	f040 8297 	bne.w	80039c6 <minmea_scan+0x68e>
                        field++;
 8003498:	3501      	adds	r5, #1
                    while (minmea_isfield(*field)) {
 800349a:	f895 b000 	ldrb.w	fp, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800349e:	f001 fe4d 	bl	800513c <__locale_ctype_ptr>
 80034a2:	4458      	add	r0, fp
 80034a4:	7843      	ldrb	r3, [r0, #1]
 80034a6:	f013 0f97 	tst.w	r3, #151	; 0x97
 80034aa:	d018      	beq.n	80034de <minmea_scan+0x1a6>
 80034ac:	f1bb 0f2c 	cmp.w	fp, #44	; 0x2c
 80034b0:	d048      	beq.n	8003544 <minmea_scan+0x20c>
 80034b2:	f1bb 0f2a 	cmp.w	fp, #42	; 0x2a
 80034b6:	d010      	beq.n	80034da <minmea_scan+0x1a2>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e011      	b.n	80034e0 <minmea_scan+0x1a8>
                        } else if (*field == '.' && scale == 0) {
 80034bc:	f1b9 0f00 	cmp.w	r9, #0
 80034c0:	d1db      	bne.n	800347a <minmea_scan+0x142>
                            scale = 1;
 80034c2:	f04f 0901 	mov.w	r9, #1
 80034c6:	e7e7      	b.n	8003498 <minmea_scan+0x160>
                            sign = -1;
 80034c8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80034cc:	e7e4      	b.n	8003498 <minmea_scan+0x160>
                int_least32_t scale = 0;
 80034ce:	f04f 0900 	mov.w	r9, #0
                int_least32_t value = -1;
 80034d2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
                int sign = 0;
 80034d6:	46ca      	mov	sl, r9
 80034d8:	e7df      	b.n	800349a <minmea_scan+0x162>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <minmea_scan+0x1a8>
 80034de:	2300      	movs	r3, #0
                    while (minmea_isfield(*field)) {
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0a4      	beq.n	800342e <minmea_scan+0xf6>
                        if (*field == '+' && !sign && value == -1) {
 80034e4:	782b      	ldrb	r3, [r5, #0]
 80034e6:	2b2b      	cmp	r3, #43	; 0x2b
 80034e8:	d0b4      	beq.n	8003454 <minmea_scan+0x11c>
                        } else if (*field == '-' && !sign && value == -1) {
 80034ea:	2b2d      	cmp	r3, #45	; 0x2d
 80034ec:	d105      	bne.n	80034fa <minmea_scan+0x1c2>
 80034ee:	f1ba 0f00 	cmp.w	sl, #0
 80034f2:	d102      	bne.n	80034fa <minmea_scan+0x1c2>
 80034f4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80034f8:	d0e6      	beq.n	80034c8 <minmea_scan+0x190>
                        } else if (isdigit((unsigned char) *field)) {
 80034fa:	f001 fe1f 	bl	800513c <__locale_ctype_ptr>
 80034fe:	782b      	ldrb	r3, [r5, #0]
 8003500:	4418      	add	r0, r3
 8003502:	7842      	ldrb	r2, [r0, #1]
 8003504:	f012 0f04 	tst.w	r2, #4
 8003508:	d0b5      	beq.n	8003476 <minmea_scan+0x13e>
                            int digit = *field - '0';
 800350a:	3b30      	subs	r3, #48	; 0x30
                            if (value == -1)
 800350c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003510:	d0a9      	beq.n	8003466 <minmea_scan+0x12e>
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8003512:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003516:	1ad2      	subs	r2, r2, r3
 8003518:	49ac      	ldr	r1, [pc, #688]	; (80037cc <minmea_scan+0x494>)
 800351a:	fb81 0102 	smull	r0, r1, r1, r2
 800351e:	17d2      	asrs	r2, r2, #31
 8003520:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8003524:	4542      	cmp	r2, r8
 8003526:	dba1      	blt.n	800346c <minmea_scan+0x134>
                            value = (10 * value) + digit;
 8003528:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800352c:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8003530:	eb02 0803 	add.w	r8, r2, r3
                            if (scale)
 8003534:	f1b9 0f00 	cmp.w	r9, #0
 8003538:	d0ae      	beq.n	8003498 <minmea_scan+0x160>
                                scale *= 10;
 800353a:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 800353e:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8003542:	e7a9      	b.n	8003498 <minmea_scan+0x160>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8003544:	2300      	movs	r3, #0
 8003546:	e7cb      	b.n	80034e0 <minmea_scan+0x1a8>
                    scale = 0;
 8003548:	f04f 0900 	mov.w	r9, #0
                    value = 0;
 800354c:	46c8      	mov	r8, r9
                }
                if (sign)
 800354e:	f1ba 0f00 	cmp.w	sl, #0
 8003552:	d001      	beq.n	8003558 <minmea_scan+0x220>
                    value *= sign;
 8003554:	fb0a f808 	mul.w	r8, sl, r8

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8003558:	9b05      	ldr	r3, [sp, #20]
 800355a:	1d1a      	adds	r2, r3, #4
 800355c:	9205      	str	r2, [sp, #20]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8c3 8000 	str.w	r8, [r3]
 8003564:	f8c3 9004 	str.w	r9, [r3, #4]
            } break;
 8003568:	e193      	b.n	8003892 <minmea_scan+0x55a>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;

                if (field) {
 800356a:	b32d      	cbz	r5, 80035b8 <minmea_scan+0x280>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 800356c:	220a      	movs	r2, #10
 800356e:	a904      	add	r1, sp, #16
 8003570:	4628      	mov	r0, r5
 8003572:	f003 fba7 	bl	8006cc4 <strtol>
 8003576:	4605      	mov	r5, r0
                    if (minmea_isfield(*endptr))
 8003578:	9b04      	ldr	r3, [sp, #16]
 800357a:	f893 8000 	ldrb.w	r8, [r3]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800357e:	f001 fddd 	bl	800513c <__locale_ctype_ptr>
 8003582:	4440      	add	r0, r8
 8003584:	7843      	ldrb	r3, [r0, #1]
 8003586:	f013 0f97 	tst.w	r3, #151	; 0x97
 800358a:	d009      	beq.n	80035a0 <minmea_scan+0x268>
 800358c:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 8003590:	d00e      	beq.n	80035b0 <minmea_scan+0x278>
 8003592:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8003596:	d001      	beq.n	800359c <minmea_scan+0x264>
 8003598:	2301      	movs	r3, #1
 800359a:	e002      	b.n	80035a2 <minmea_scan+0x26a>
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <minmea_scan+0x26a>
 80035a0:	2300      	movs	r3, #0
                    if (minmea_isfield(*endptr))
 80035a2:	b93b      	cbnz	r3, 80035b4 <minmea_scan+0x27c>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 80035a4:	9b05      	ldr	r3, [sp, #20]
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	9205      	str	r2, [sp, #20]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	601d      	str	r5, [r3, #0]
            } break;
 80035ae:	e170      	b.n	8003892 <minmea_scan+0x55a>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 80035b0:	2300      	movs	r3, #0
 80035b2:	e7f6      	b.n	80035a2 <minmea_scan+0x26a>
    bool result = false;
 80035b4:	2000      	movs	r0, #0
 80035b6:	e1f9      	b.n	80039ac <minmea_scan+0x674>
                int value = 0;
 80035b8:	2500      	movs	r5, #0
 80035ba:	e7f3      	b.n	80035a4 <minmea_scan+0x26c>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 80035bc:	9b05      	ldr	r3, [sp, #20]
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	9205      	str	r2, [sp, #20]
 80035c2:	f8d3 8000 	ldr.w	r8, [r3]

                if (field) {
 80035c6:	b975      	cbnz	r5, 80035e6 <minmea_scan+0x2ae>
                    while (minmea_isfield(*field))
                        *buf++ = *field++;
                }

                *buf = '\0';
 80035c8:	2300      	movs	r3, #0
 80035ca:	f888 3000 	strb.w	r3, [r8]
            } break;
 80035ce:	e160      	b.n	8003892 <minmea_scan+0x55a>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <minmea_scan+0x29e>
 80035d4:	2300      	movs	r3, #0
                    while (minmea_isfield(*field))
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f6      	beq.n	80035c8 <minmea_scan+0x290>
                        *buf++ = *field++;
 80035da:	782b      	ldrb	r3, [r5, #0]
 80035dc:	f888 3000 	strb.w	r3, [r8]
 80035e0:	f108 0801 	add.w	r8, r8, #1
 80035e4:	3501      	adds	r5, #1
                    while (minmea_isfield(*field))
 80035e6:	f895 9000 	ldrb.w	r9, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 80035ea:	f001 fda7 	bl	800513c <__locale_ctype_ptr>
 80035ee:	4448      	add	r0, r9
 80035f0:	7843      	ldrb	r3, [r0, #1]
 80035f2:	f013 0f97 	tst.w	r3, #151	; 0x97
 80035f6:	d0ed      	beq.n	80035d4 <minmea_scan+0x29c>
 80035f8:	f1b9 0f2c 	cmp.w	r9, #44	; 0x2c
 80035fc:	d004      	beq.n	8003608 <minmea_scan+0x2d0>
 80035fe:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 8003602:	d0e5      	beq.n	80035d0 <minmea_scan+0x298>
 8003604:	2301      	movs	r3, #1
 8003606:	e7e6      	b.n	80035d6 <minmea_scan+0x29e>
 8003608:	2300      	movs	r3, #0
 800360a:	e7e4      	b.n	80035d6 <minmea_scan+0x29e>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 800360c:	2d00      	cmp	r5, #0
 800360e:	f000 81de 	beq.w	80039ce <minmea_scan+0x696>
                    goto parse_error;

                if (field[0] != '$')
 8003612:	782b      	ldrb	r3, [r5, #0]
 8003614:	2b24      	cmp	r3, #36	; 0x24
 8003616:	f040 81dc 	bne.w	80039d2 <minmea_scan+0x69a>
                    goto parse_error;
                for (int f=0; f<5; f++)
 800361a:	f04f 0800 	mov.w	r8, #0
 800361e:	e006      	b.n	800362e <minmea_scan+0x2f6>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <minmea_scan+0x2ee>
 8003624:	2300      	movs	r3, #0
                    if (!minmea_isfield(field[1+f]))
 8003626:	4618      	mov	r0, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 81bf 	beq.w	80039ac <minmea_scan+0x674>
                for (int f=0; f<5; f++)
 800362e:	f1b8 0f04 	cmp.w	r8, #4
 8003632:	dc14      	bgt.n	800365e <minmea_scan+0x326>
                    if (!minmea_isfield(field[1+f]))
 8003634:	f108 0801 	add.w	r8, r8, #1
 8003638:	f815 9008 	ldrb.w	r9, [r5, r8]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800363c:	f001 fd7e 	bl	800513c <__locale_ctype_ptr>
 8003640:	4448      	add	r0, r9
 8003642:	7843      	ldrb	r3, [r0, #1]
 8003644:	f013 0f97 	tst.w	r3, #151	; 0x97
 8003648:	d0ec      	beq.n	8003624 <minmea_scan+0x2ec>
 800364a:	f1b9 0f2c 	cmp.w	r9, #44	; 0x2c
 800364e:	d004      	beq.n	800365a <minmea_scan+0x322>
 8003650:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 8003654:	d0e4      	beq.n	8003620 <minmea_scan+0x2e8>
 8003656:	2301      	movs	r3, #1
 8003658:	e7e5      	b.n	8003626 <minmea_scan+0x2ee>
 800365a:	2300      	movs	r3, #0
 800365c:	e7e3      	b.n	8003626 <minmea_scan+0x2ee>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 800365e:	9b05      	ldr	r3, [sp, #20]
 8003660:	1d1a      	adds	r2, r3, #4
 8003662:	9205      	str	r2, [sp, #20]
 8003664:	681b      	ldr	r3, [r3, #0]
                memcpy(buf, field+1, 5);
 8003666:	f855 2f01 	ldr.w	r2, [r5, #1]!
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	792a      	ldrb	r2, [r5, #4]
 800366e:	711a      	strb	r2, [r3, #4]
                buf[5] = '\0';
 8003670:	2200      	movs	r2, #0
 8003672:	715a      	strb	r2, [r3, #5]
            } break;
 8003674:	e10d      	b.n	8003892 <minmea_scan+0x55a>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8003676:	9b05      	ldr	r3, [sp, #20]
 8003678:	1d1a      	adds	r2, r3, #4
 800367a:	9205      	str	r2, [sp, #20]
 800367c:	f8d3 9000 	ldr.w	r9, [r3]

                int d = -1, m = -1, y = -1;

                if (field && minmea_isfield(*field)) {
 8003680:	2d00      	cmp	r5, #0
 8003682:	d060      	beq.n	8003746 <minmea_scan+0x40e>
 8003684:	f895 8000 	ldrb.w	r8, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8003688:	f001 fd58 	bl	800513c <__locale_ctype_ptr>
 800368c:	4440      	add	r0, r8
 800368e:	7843      	ldrb	r3, [r0, #1]
 8003690:	f013 0f97 	tst.w	r3, #151	; 0x97
 8003694:	d009      	beq.n	80036aa <minmea_scan+0x372>
 8003696:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 800369a:	d013      	beq.n	80036c4 <minmea_scan+0x38c>
 800369c:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 80036a0:	d001      	beq.n	80036a6 <minmea_scan+0x36e>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e002      	b.n	80036ac <minmea_scan+0x374>
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <minmea_scan+0x374>
 80036aa:	2300      	movs	r3, #0
                if (field && minmea_isfield(*field)) {
 80036ac:	b963      	cbnz	r3, 80036c8 <minmea_scan+0x390>
                int d = -1, m = -1, y = -1;
 80036ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036b2:	4605      	mov	r5, r0
 80036b4:	4680      	mov	r8, r0
                    d = strtol(dArr, NULL, 10);
                    m = strtol(mArr, NULL, 10);
                    y = strtol(yArr, NULL, 10);
                }

                date->day = d;
 80036b6:	f8c9 8000 	str.w	r8, [r9]
                date->month = m;
 80036ba:	f8c9 5004 	str.w	r5, [r9, #4]
                date->year = y;
 80036be:	f8c9 0008 	str.w	r0, [r9, #8]
            } break;
 80036c2:	e0e6      	b.n	8003892 <minmea_scan+0x55a>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 80036c4:	2300      	movs	r3, #0
 80036c6:	e7f1      	b.n	80036ac <minmea_scan+0x374>
                    for (int f=0; f<6; f++)
 80036c8:	f04f 0800 	mov.w	r8, #0
 80036cc:	f1b8 0f05 	cmp.w	r8, #5
 80036d0:	dc0b      	bgt.n	80036ea <minmea_scan+0x3b2>
                        if (!isdigit((unsigned char) field[f]))
 80036d2:	f001 fd33 	bl	800513c <__locale_ctype_ptr>
 80036d6:	f815 3008 	ldrb.w	r3, [r5, r8]
 80036da:	4418      	add	r0, r3
 80036dc:	7843      	ldrb	r3, [r0, #1]
 80036de:	f013 0f04 	tst.w	r3, #4
 80036e2:	d02e      	beq.n	8003742 <minmea_scan+0x40a>
                    for (int f=0; f<6; f++)
 80036e4:	f108 0801 	add.w	r8, r8, #1
 80036e8:	e7f0      	b.n	80036cc <minmea_scan+0x394>
                    char dArr[] = {field[0], field[1], '\0'};
 80036ea:	782b      	ldrb	r3, [r5, #0]
 80036ec:	f88d 3008 	strb.w	r3, [sp, #8]
 80036f0:	786b      	ldrb	r3, [r5, #1]
 80036f2:	f88d 3009 	strb.w	r3, [sp, #9]
 80036f6:	f04f 0a00 	mov.w	sl, #0
 80036fa:	f88d a00a 	strb.w	sl, [sp, #10]
                    char mArr[] = {field[2], field[3], '\0'};
 80036fe:	78ab      	ldrb	r3, [r5, #2]
 8003700:	f88d 300c 	strb.w	r3, [sp, #12]
 8003704:	78eb      	ldrb	r3, [r5, #3]
 8003706:	f88d 300d 	strb.w	r3, [sp, #13]
 800370a:	f88d a00e 	strb.w	sl, [sp, #14]
                    char yArr[] = {field[4], field[5], '\0'};
 800370e:	792b      	ldrb	r3, [r5, #4]
 8003710:	f88d 3010 	strb.w	r3, [sp, #16]
 8003714:	796b      	ldrb	r3, [r5, #5]
 8003716:	f88d 3011 	strb.w	r3, [sp, #17]
 800371a:	f88d a012 	strb.w	sl, [sp, #18]
                    d = strtol(dArr, NULL, 10);
 800371e:	220a      	movs	r2, #10
 8003720:	4651      	mov	r1, sl
 8003722:	a802      	add	r0, sp, #8
 8003724:	f003 face 	bl	8006cc4 <strtol>
 8003728:	4680      	mov	r8, r0
                    m = strtol(mArr, NULL, 10);
 800372a:	220a      	movs	r2, #10
 800372c:	4651      	mov	r1, sl
 800372e:	a803      	add	r0, sp, #12
 8003730:	f003 fac8 	bl	8006cc4 <strtol>
 8003734:	4605      	mov	r5, r0
                    y = strtol(yArr, NULL, 10);
 8003736:	220a      	movs	r2, #10
 8003738:	4651      	mov	r1, sl
 800373a:	a804      	add	r0, sp, #16
 800373c:	f003 fac2 	bl	8006cc4 <strtol>
 8003740:	e7b9      	b.n	80036b6 <minmea_scan+0x37e>
    bool result = false;
 8003742:	2000      	movs	r0, #0
 8003744:	e132      	b.n	80039ac <minmea_scan+0x674>
                int d = -1, m = -1, y = -1;
 8003746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800374a:	4605      	mov	r5, r0
 800374c:	4680      	mov	r8, r0
 800374e:	e7b2      	b.n	80036b6 <minmea_scan+0x37e>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time_ = va_arg(ap, struct minmea_time *);
 8003750:	9b05      	ldr	r3, [sp, #20]
 8003752:	1d1a      	adds	r2, r3, #4
 8003754:	9205      	str	r2, [sp, #20]
 8003756:	f8d3 8000 	ldr.w	r8, [r3]

                int h = -1, i = -1, s = -1, u = -1;

                if (field && minmea_isfield(*field)) {
 800375a:	2d00      	cmp	r5, #0
 800375c:	f000 808e 	beq.w	800387c <minmea_scan+0x544>
 8003760:	f895 9000 	ldrb.w	r9, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8003764:	f001 fcea 	bl	800513c <__locale_ctype_ptr>
 8003768:	4448      	add	r0, r9
 800376a:	7843      	ldrb	r3, [r0, #1]
 800376c:	f013 0f97 	tst.w	r3, #151	; 0x97
 8003770:	d009      	beq.n	8003786 <minmea_scan+0x44e>
 8003772:	f1b9 0f2c 	cmp.w	r9, #44	; 0x2c
 8003776:	d016      	beq.n	80037a6 <minmea_scan+0x46e>
 8003778:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 800377c:	d001      	beq.n	8003782 <minmea_scan+0x44a>
 800377e:	2301      	movs	r3, #1
 8003780:	e002      	b.n	8003788 <minmea_scan+0x450>
 8003782:	2300      	movs	r3, #0
 8003784:	e000      	b.n	8003788 <minmea_scan+0x450>
 8003786:	2300      	movs	r3, #0
                if (field && minmea_isfield(*field)) {
 8003788:	b97b      	cbnz	r3, 80037aa <minmea_scan+0x472>
                int h = -1, i = -1, s = -1, u = -1;
 800378a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800378e:	46a9      	mov	r9, r5
 8003790:	46aa      	mov	sl, r5
 8003792:	46ab      	mov	fp, r5
                    } else {
                        u = 0;
                    }
                }

                time_->hours = h;
 8003794:	f8c8 b000 	str.w	fp, [r8]
                time_->minutes = i;
 8003798:	f8c8 a004 	str.w	sl, [r8, #4]
                time_->seconds = s;
 800379c:	f8c8 9008 	str.w	r9, [r8, #8]
                time_->microseconds = u;
 80037a0:	f8c8 500c 	str.w	r5, [r8, #12]
            } break;
 80037a4:	e075      	b.n	8003892 <minmea_scan+0x55a>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 80037a6:	2300      	movs	r3, #0
 80037a8:	e7ee      	b.n	8003788 <minmea_scan+0x450>
                    for (int f=0; f<6; f++)
 80037aa:	f04f 0900 	mov.w	r9, #0
 80037ae:	f1b9 0f05 	cmp.w	r9, #5
 80037b2:	dc0d      	bgt.n	80037d0 <minmea_scan+0x498>
                        if (!isdigit((unsigned char) field[f]))
 80037b4:	f001 fcc2 	bl	800513c <__locale_ctype_ptr>
 80037b8:	f815 3009 	ldrb.w	r3, [r5, r9]
 80037bc:	4418      	add	r0, r3
 80037be:	7843      	ldrb	r3, [r0, #1]
 80037c0:	f013 0f04 	tst.w	r3, #4
 80037c4:	d058      	beq.n	8003878 <minmea_scan+0x540>
                    for (int f=0; f<6; f++)
 80037c6:	f109 0901 	add.w	r9, r9, #1
 80037ca:	e7f0      	b.n	80037ae <minmea_scan+0x476>
 80037cc:	66666667 	.word	0x66666667
                    char hArr[] = {field[0], field[1], '\0'};
 80037d0:	782b      	ldrb	r3, [r5, #0]
 80037d2:	f88d 3008 	strb.w	r3, [sp, #8]
 80037d6:	786b      	ldrb	r3, [r5, #1]
 80037d8:	f88d 3009 	strb.w	r3, [sp, #9]
 80037dc:	f04f 0900 	mov.w	r9, #0
 80037e0:	f88d 900a 	strb.w	r9, [sp, #10]
                    char iArr[] = {field[2], field[3], '\0'};
 80037e4:	78ab      	ldrb	r3, [r5, #2]
 80037e6:	f88d 300c 	strb.w	r3, [sp, #12]
 80037ea:	78eb      	ldrb	r3, [r5, #3]
 80037ec:	f88d 300d 	strb.w	r3, [sp, #13]
 80037f0:	f88d 900e 	strb.w	r9, [sp, #14]
                    char sArr[] = {field[4], field[5], '\0'};
 80037f4:	792b      	ldrb	r3, [r5, #4]
 80037f6:	f88d 3010 	strb.w	r3, [sp, #16]
 80037fa:	796b      	ldrb	r3, [r5, #5]
 80037fc:	f88d 3011 	strb.w	r3, [sp, #17]
 8003800:	f88d 9012 	strb.w	r9, [sp, #18]
                    h = strtol(hArr, NULL, 10);
 8003804:	220a      	movs	r2, #10
 8003806:	4649      	mov	r1, r9
 8003808:	a802      	add	r0, sp, #8
 800380a:	f003 fa5b 	bl	8006cc4 <strtol>
 800380e:	4683      	mov	fp, r0
                    i = strtol(iArr, NULL, 10);
 8003810:	220a      	movs	r2, #10
 8003812:	4649      	mov	r1, r9
 8003814:	a803      	add	r0, sp, #12
 8003816:	f003 fa55 	bl	8006cc4 <strtol>
 800381a:	4682      	mov	sl, r0
                    s = strtol(sArr, NULL, 10);
 800381c:	220a      	movs	r2, #10
 800381e:	4649      	mov	r1, r9
 8003820:	a804      	add	r0, sp, #16
 8003822:	f003 fa4f 	bl	8006cc4 <strtol>
 8003826:	4681      	mov	r9, r0
                    if (*field++ == '.') {
 8003828:	1deb      	adds	r3, r5, #7
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	79ab      	ldrb	r3, [r5, #6]
 800382e:	2b2e      	cmp	r3, #46	; 0x2e
 8003830:	d01e      	beq.n	8003870 <minmea_scan+0x538>
                        u = 0;
 8003832:	2500      	movs	r5, #0
 8003834:	e7ae      	b.n	8003794 <minmea_scan+0x45c>
                            value = (value * 10) + (*field++ - '0');
 8003836:	9b01      	ldr	r3, [sp, #4]
 8003838:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800383c:	004b      	lsls	r3, r1, #1
 800383e:	9900      	ldr	r1, [sp, #0]
 8003840:	3101      	adds	r1, #1
 8003842:	9100      	str	r1, [sp, #0]
 8003844:	4413      	add	r3, r2
 8003846:	3b30      	subs	r3, #48	; 0x30
 8003848:	9301      	str	r3, [sp, #4]
                            scale /= 10;
 800384a:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <minmea_scan+0x6a0>)
 800384c:	fba3 3505 	umull	r3, r5, r3, r5
 8003850:	08ed      	lsrs	r5, r5, #3
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8003852:	f001 fc73 	bl	800513c <__locale_ctype_ptr>
 8003856:	9b00      	ldr	r3, [sp, #0]
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	4410      	add	r0, r2
 800385c:	7843      	ldrb	r3, [r0, #1]
 800385e:	f013 0f04 	tst.w	r3, #4
 8003862:	d001      	beq.n	8003868 <minmea_scan+0x530>
 8003864:	2d01      	cmp	r5, #1
 8003866:	d8e6      	bhi.n	8003836 <minmea_scan+0x4fe>
                        u = value * scale;
 8003868:	9b01      	ldr	r3, [sp, #4]
 800386a:	fb05 f503 	mul.w	r5, r5, r3
 800386e:	e791      	b.n	8003794 <minmea_scan+0x45c>
                        uint32_t scale = 1000000LU;
 8003870:	4d5a      	ldr	r5, [pc, #360]	; (80039dc <minmea_scan+0x6a4>)
                        uint32_t value = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	e7ec      	b.n	8003852 <minmea_scan+0x51a>
    bool result = false;
 8003878:	2000      	movs	r0, #0
 800387a:	e097      	b.n	80039ac <minmea_scan+0x674>
                int h = -1, i = -1, s = -1, u = -1;
 800387c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003880:	46a9      	mov	r9, r5
 8003882:	46aa      	mov	sl, r5
 8003884:	46ab      	mov	fp, r5
 8003886:	e785      	b.n	8003794 <minmea_scan+0x45c>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8003888:	2300      	movs	r3, #0
 800388a:	e000      	b.n	800388e <minmea_scan+0x556>
 800388c:	2300      	movs	r3, #0
            default: { // Unknown.
                goto parse_error;
            }
        }

        next_field();
 800388e:	b183      	cbz	r3, 80038b2 <minmea_scan+0x57a>
 8003890:	3401      	adds	r4, #1
 8003892:	7825      	ldrb	r5, [r4, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8003894:	f001 fc52 	bl	800513c <__locale_ctype_ptr>
 8003898:	4428      	add	r0, r5
 800389a:	7843      	ldrb	r3, [r0, #1]
 800389c:	f013 0f97 	tst.w	r3, #151	; 0x97
 80038a0:	d0f4      	beq.n	800388c <minmea_scan+0x554>
 80038a2:	2d2c      	cmp	r5, #44	; 0x2c
 80038a4:	d003      	beq.n	80038ae <minmea_scan+0x576>
 80038a6:	2d2a      	cmp	r5, #42	; 0x2a
 80038a8:	d0ee      	beq.n	8003888 <minmea_scan+0x550>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e7ef      	b.n	800388e <minmea_scan+0x556>
 80038ae:	2300      	movs	r3, #0
 80038b0:	e7ed      	b.n	800388e <minmea_scan+0x556>
        next_field();
 80038b2:	7823      	ldrb	r3, [r4, #0]
 80038b4:	2b2c      	cmp	r3, #44	; 0x2c
 80038b6:	d071      	beq.n	800399c <minmea_scan+0x664>
 80038b8:	2500      	movs	r5, #0
    while (*format) {
 80038ba:	7833      	ldrb	r3, [r6, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d072      	beq.n	80039a6 <minmea_scan+0x66e>
        char type = *format++;
 80038c0:	3601      	adds	r6, #1
        if (type == ';') {
 80038c2:	2b3b      	cmp	r3, #59	; 0x3b
 80038c4:	d06d      	beq.n	80039a2 <minmea_scan+0x66a>
        if (!field && !optional) {
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	f43f ad42 	beq.w	8003350 <minmea_scan+0x18>
        switch (type) {
 80038cc:	3b44      	subs	r3, #68	; 0x44
 80038ce:	2b30      	cmp	r3, #48	; 0x30
 80038d0:	d86b      	bhi.n	80039aa <minmea_scan+0x672>
 80038d2:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <minmea_scan+0x5a0>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	08003677 	.word	0x08003677
 80038dc:	080039ab 	.word	0x080039ab
 80038e0:	080039ab 	.word	0x080039ab
 80038e4:	080039ab 	.word	0x080039ab
 80038e8:	080039ab 	.word	0x080039ab
 80038ec:	080039ab 	.word	0x080039ab
 80038f0:	080039ab 	.word	0x080039ab
 80038f4:	080039ab 	.word	0x080039ab
 80038f8:	080039ab 	.word	0x080039ab
 80038fc:	080039ab 	.word	0x080039ab
 8003900:	080039ab 	.word	0x080039ab
 8003904:	080039ab 	.word	0x080039ab
 8003908:	080039ab 	.word	0x080039ab
 800390c:	080039ab 	.word	0x080039ab
 8003910:	080039ab 	.word	0x080039ab
 8003914:	080039ab 	.word	0x080039ab
 8003918:	08003751 	.word	0x08003751
 800391c:	080039ab 	.word	0x080039ab
 8003920:	080039ab 	.word	0x080039ab
 8003924:	080039ab 	.word	0x080039ab
 8003928:	080039ab 	.word	0x080039ab
 800392c:	080039ab 	.word	0x080039ab
 8003930:	080039ab 	.word	0x080039ab
 8003934:	080039ab 	.word	0x080039ab
 8003938:	080039ab 	.word	0x080039ab
 800393c:	080039ab 	.word	0x080039ab
 8003940:	080039ab 	.word	0x080039ab
 8003944:	08003893 	.word	0x08003893
 8003948:	080039ab 	.word	0x080039ab
 800394c:	080039ab 	.word	0x080039ab
 8003950:	080039ab 	.word	0x080039ab
 8003954:	0800335b 	.word	0x0800335b
 8003958:	080033a1 	.word	0x080033a1
 800395c:	080039ab 	.word	0x080039ab
 8003960:	08003421 	.word	0x08003421
 8003964:	080039ab 	.word	0x080039ab
 8003968:	080039ab 	.word	0x080039ab
 800396c:	0800356b 	.word	0x0800356b
 8003970:	080039ab 	.word	0x080039ab
 8003974:	080039ab 	.word	0x080039ab
 8003978:	080039ab 	.word	0x080039ab
 800397c:	080039ab 	.word	0x080039ab
 8003980:	080039ab 	.word	0x080039ab
 8003984:	080039ab 	.word	0x080039ab
 8003988:	080039ab 	.word	0x080039ab
 800398c:	080039ab 	.word	0x080039ab
 8003990:	080039ab 	.word	0x080039ab
 8003994:	080035bd 	.word	0x080035bd
 8003998:	0800360d 	.word	0x0800360d
        next_field();
 800399c:	3401      	adds	r4, #1
 800399e:	4625      	mov	r5, r4
 80039a0:	e78b      	b.n	80038ba <minmea_scan+0x582>
            optional = true;
 80039a2:	2701      	movs	r7, #1
 80039a4:	e789      	b.n	80038ba <minmea_scan+0x582>
    }

    result = true;
 80039a6:	2001      	movs	r0, #1
 80039a8:	e000      	b.n	80039ac <minmea_scan+0x674>
    bool result = false;
 80039aa:	2000      	movs	r0, #0

parse_error:
    va_end(ap);
    return result;
}
 80039ac:	b006      	add	sp, #24
 80039ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b2:	b003      	add	sp, #12
 80039b4:	4770      	bx	lr
    bool result = false;
 80039b6:	2000      	movs	r0, #0
 80039b8:	e7f8      	b.n	80039ac <minmea_scan+0x674>
 80039ba:	2000      	movs	r0, #0
 80039bc:	e7f6      	b.n	80039ac <minmea_scan+0x674>
 80039be:	2000      	movs	r0, #0
 80039c0:	e7f4      	b.n	80039ac <minmea_scan+0x674>
 80039c2:	2000      	movs	r0, #0
 80039c4:	e7f2      	b.n	80039ac <minmea_scan+0x674>
 80039c6:	2000      	movs	r0, #0
 80039c8:	e7f0      	b.n	80039ac <minmea_scan+0x674>
 80039ca:	2000      	movs	r0, #0
 80039cc:	e7ee      	b.n	80039ac <minmea_scan+0x674>
 80039ce:	2000      	movs	r0, #0
 80039d0:	e7ec      	b.n	80039ac <minmea_scan+0x674>
 80039d2:	2000      	movs	r0, #0
 80039d4:	e7ea      	b.n	80039ac <minmea_scan+0x674>
 80039d6:	bf00      	nop
 80039d8:	cccccccd 	.word	0xcccccccd
 80039dc:	000f4240 	.word	0x000f4240

080039e0 <minmea_sentence_id>:

    return true;
}

enum minmea_sentence_id minmea_sentence_id(const char *sentence, bool strict)
{
 80039e0:	b510      	push	{r4, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	4604      	mov	r4, r0
    if (!minmea_check(sentence, strict))
 80039e6:	f7ff fc4f 	bl	8003288 <minmea_check>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d039      	beq.n	8003a62 <minmea_sentence_id+0x82>
        return MINMEA_INVALID;

    char type[6];
    if (!minmea_scan(sentence, "t", type))
 80039ee:	466a      	mov	r2, sp
 80039f0:	4926      	ldr	r1, [pc, #152]	; (8003a8c <minmea_sentence_id+0xac>)
 80039f2:	4620      	mov	r0, r4
 80039f4:	f7ff fca0 	bl	8003338 <minmea_scan>
 80039f8:	b3b0      	cbz	r0, 8003a68 <minmea_sentence_id+0x88>
        return MINMEA_INVALID;

    if (!strcmp(type+2, "RMC"))
 80039fa:	4925      	ldr	r1, [pc, #148]	; (8003a90 <minmea_sentence_id+0xb0>)
 80039fc:	f10d 0002 	add.w	r0, sp, #2
 8003a00:	f7fc fbee 	bl	80001e0 <strcmp>
 8003a04:	b398      	cbz	r0, 8003a6e <minmea_sentence_id+0x8e>
        return MINMEA_SENTENCE_RMC;
    if (!strcmp(type+2, "GGA"))
 8003a06:	4923      	ldr	r1, [pc, #140]	; (8003a94 <minmea_sentence_id+0xb4>)
 8003a08:	f10d 0002 	add.w	r0, sp, #2
 8003a0c:	f7fc fbe8 	bl	80001e0 <strcmp>
 8003a10:	b380      	cbz	r0, 8003a74 <minmea_sentence_id+0x94>
        return MINMEA_SENTENCE_GGA;
    if (!strcmp(type+2, "GSA"))
 8003a12:	4921      	ldr	r1, [pc, #132]	; (8003a98 <minmea_sentence_id+0xb8>)
 8003a14:	f10d 0002 	add.w	r0, sp, #2
 8003a18:	f7fc fbe2 	bl	80001e0 <strcmp>
 8003a1c:	b360      	cbz	r0, 8003a78 <minmea_sentence_id+0x98>
        return MINMEA_SENTENCE_GSA;
    if (!strcmp(type+2, "GLL"))
 8003a1e:	491f      	ldr	r1, [pc, #124]	; (8003a9c <minmea_sentence_id+0xbc>)
 8003a20:	f10d 0002 	add.w	r0, sp, #2
 8003a24:	f7fc fbdc 	bl	80001e0 <strcmp>
 8003a28:	b340      	cbz	r0, 8003a7c <minmea_sentence_id+0x9c>
        return MINMEA_SENTENCE_GLL;
    if (!strcmp(type+2, "GST"))
 8003a2a:	491d      	ldr	r1, [pc, #116]	; (8003aa0 <minmea_sentence_id+0xc0>)
 8003a2c:	f10d 0002 	add.w	r0, sp, #2
 8003a30:	f7fc fbd6 	bl	80001e0 <strcmp>
 8003a34:	b320      	cbz	r0, 8003a80 <minmea_sentence_id+0xa0>
        return MINMEA_SENTENCE_GST;
    if (!strcmp(type+2, "GSV"))
 8003a36:	491b      	ldr	r1, [pc, #108]	; (8003aa4 <minmea_sentence_id+0xc4>)
 8003a38:	f10d 0002 	add.w	r0, sp, #2
 8003a3c:	f7fc fbd0 	bl	80001e0 <strcmp>
 8003a40:	b300      	cbz	r0, 8003a84 <minmea_sentence_id+0xa4>
        return MINMEA_SENTENCE_GSV;
    if (!strcmp(type+2, "VTG"))
 8003a42:	4919      	ldr	r1, [pc, #100]	; (8003aa8 <minmea_sentence_id+0xc8>)
 8003a44:	f10d 0002 	add.w	r0, sp, #2
 8003a48:	f7fc fbca 	bl	80001e0 <strcmp>
 8003a4c:	b1e0      	cbz	r0, 8003a88 <minmea_sentence_id+0xa8>
        return MINMEA_SENTENCE_VTG;
    if (!strcmp(type+2, "ZDA"))
 8003a4e:	4917      	ldr	r1, [pc, #92]	; (8003aac <minmea_sentence_id+0xcc>)
 8003a50:	f10d 0002 	add.w	r0, sp, #2
 8003a54:	f7fc fbc4 	bl	80001e0 <strcmp>
 8003a58:	b108      	cbz	r0, 8003a5e <minmea_sentence_id+0x7e>
        return MINMEA_SENTENCE_ZDA;

    return MINMEA_UNKNOWN;
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	e008      	b.n	8003a70 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_ZDA;
 8003a5e:	2008      	movs	r0, #8
 8003a60:	e006      	b.n	8003a70 <minmea_sentence_id+0x90>
        return MINMEA_INVALID;
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a66:	e003      	b.n	8003a70 <minmea_sentence_id+0x90>
        return MINMEA_INVALID;
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a6c:	e000      	b.n	8003a70 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_RMC;
 8003a6e:	2001      	movs	r0, #1
}
 8003a70:	b002      	add	sp, #8
 8003a72:	bd10      	pop	{r4, pc}
        return MINMEA_SENTENCE_GGA;
 8003a74:	2002      	movs	r0, #2
 8003a76:	e7fb      	b.n	8003a70 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_GSA;
 8003a78:	2003      	movs	r0, #3
 8003a7a:	e7f9      	b.n	8003a70 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_GLL;
 8003a7c:	2004      	movs	r0, #4
 8003a7e:	e7f7      	b.n	8003a70 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_GST;
 8003a80:	2005      	movs	r0, #5
 8003a82:	e7f5      	b.n	8003a70 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_GSV;
 8003a84:	2006      	movs	r0, #6
 8003a86:	e7f3      	b.n	8003a70 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_VTG;
 8003a88:	2007      	movs	r0, #7
 8003a8a:	e7f1      	b.n	8003a70 <minmea_sentence_id+0x90>
 8003a8c:	080096ac 	.word	0x080096ac
 8003a90:	0800968c 	.word	0x0800968c
 8003a94:	08009690 	.word	0x08009690
 8003a98:	08009694 	.word	0x08009694
 8003a9c:	08009698 	.word	0x08009698
 8003aa0:	0800969c 	.word	0x0800969c
 8003aa4:	080096a0 	.word	0x080096a0
 8003aa8:	080096a4 	.word	0x080096a4
 8003aac:	080096a8 	.word	0x080096a8

08003ab0 <minmea_parse_rmc>:

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)
{
 8003ab0:	b530      	push	{r4, r5, lr}
 8003ab2:	b091      	sub	sp, #68	; 0x44
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	4608      	mov	r0, r1
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd",
 8003ab8:	ab0a      	add	r3, sp, #40	; 0x28
 8003aba:	9309      	str	r3, [sp, #36]	; 0x24
 8003abc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003ac0:	9308      	str	r3, [sp, #32]
 8003ac2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003ac6:	9307      	str	r3, [sp, #28]
 8003ac8:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 8003acc:	9306      	str	r3, [sp, #24]
 8003ace:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003ad2:	9305      	str	r3, [sp, #20]
 8003ad4:	ab0b      	add	r3, sp, #44	; 0x2c
 8003ad6:	9304      	str	r3, [sp, #16]
 8003ad8:	f104 031c 	add.w	r3, r4, #28
 8003adc:	9303      	str	r3, [sp, #12]
 8003ade:	ab0c      	add	r3, sp, #48	; 0x30
 8003ae0:	9302      	str	r3, [sp, #8]
 8003ae2:	f104 0314 	add.w	r3, r4, #20
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	4623      	mov	r3, r4
 8003af0:	aa0e      	add	r2, sp, #56	; 0x38
 8003af2:	4913      	ldr	r1, [pc, #76]	; (8003b40 <minmea_parse_rmc+0x90>)
 8003af4:	f7ff fc20 	bl	8003338 <minmea_scan>
 8003af8:	4605      	mov	r5, r0
 8003afa:	b1d8      	cbz	r0, 8003b34 <minmea_parse_rmc+0x84>
            &frame->speed,
            &frame->course,
            &frame->date,
            &frame->variation, &variation_direction))
        return false;
    if (strcmp(type+2, "RMC"))
 8003afc:	4911      	ldr	r1, [pc, #68]	; (8003b44 <minmea_parse_rmc+0x94>)
 8003afe:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 8003b02:	f7fc fb6d 	bl	80001e0 <strcmp>
 8003b06:	b9c0      	cbnz	r0, 8003b3a <minmea_parse_rmc+0x8a>
        return false;

    frame->valid = (validity == 'A');
 8003b08:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8003b0c:	2b41      	cmp	r3, #65	; 0x41
 8003b0e:	bf14      	ite	ne
 8003b10:	2300      	movne	r3, #0
 8003b12:	2301      	moveq	r3, #1
 8003b14:	7423      	strb	r3, [r4, #16]
    frame->latitude.value *= latitude_direction;
 8003b16:	6962      	ldr	r2, [r4, #20]
 8003b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b1a:	fb03 f302 	mul.w	r3, r3, r2
 8003b1e:	6163      	str	r3, [r4, #20]
    frame->longitude.value *= longitude_direction;
 8003b20:	69e2      	ldr	r2, [r4, #28]
 8003b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b24:	fb03 f302 	mul.w	r3, r3, r2
 8003b28:	61e3      	str	r3, [r4, #28]
    frame->variation.value *= variation_direction;
 8003b2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b2e:	fb03 f302 	mul.w	r3, r3, r2
 8003b32:	6423      	str	r3, [r4, #64]	; 0x40

    return true;
}
 8003b34:	4628      	mov	r0, r5
 8003b36:	b011      	add	sp, #68	; 0x44
 8003b38:	bd30      	pop	{r4, r5, pc}
        return false;
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	e7fa      	b.n	8003b34 <minmea_parse_rmc+0x84>
 8003b3e:	bf00      	nop
 8003b40:	08009668 	.word	0x08009668
 8003b44:	0800968c 	.word	0x0800968c

08003b48 <minmea_parse_gga>:

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 8003b48:	b530      	push	{r4, r5, lr}
 8003b4a:	b091      	sub	sp, #68	; 0x44
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	4608      	mov	r0, r1
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfcf_",
 8003b50:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8003b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8003b5c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8003b60:	9309      	str	r3, [sp, #36]	; 0x24
 8003b62:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003b66:	9308      	str	r3, [sp, #32]
 8003b68:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003b6c:	9307      	str	r3, [sp, #28]
 8003b6e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8003b72:	9306      	str	r3, [sp, #24]
 8003b74:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003b78:	9305      	str	r3, [sp, #20]
 8003b7a:	f104 0320 	add.w	r3, r4, #32
 8003b7e:	9304      	str	r3, [sp, #16]
 8003b80:	ab0c      	add	r3, sp, #48	; 0x30
 8003b82:	9303      	str	r3, [sp, #12]
 8003b84:	f104 0318 	add.w	r3, r4, #24
 8003b88:	9302      	str	r3, [sp, #8]
 8003b8a:	ab0d      	add	r3, sp, #52	; 0x34
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	f104 0310 	add.w	r3, r4, #16
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	4623      	mov	r3, r4
 8003b96:	aa0e      	add	r2, sp, #56	; 0x38
 8003b98:	490c      	ldr	r1, [pc, #48]	; (8003bcc <minmea_parse_gga+0x84>)
 8003b9a:	f7ff fbcd 	bl	8003338 <minmea_scan>
 8003b9e:	4605      	mov	r5, r0
 8003ba0:	b178      	cbz	r0, 8003bc2 <minmea_parse_gga+0x7a>
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
    if (strcmp(type+2, "GGA"))
 8003ba2:	490b      	ldr	r1, [pc, #44]	; (8003bd0 <minmea_parse_gga+0x88>)
 8003ba4:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 8003ba8:	f7fc fb1a 	bl	80001e0 <strcmp>
 8003bac:	b960      	cbnz	r0, 8003bc8 <minmea_parse_gga+0x80>
        return false;

    frame->latitude.value *= latitude_direction;
 8003bae:	6922      	ldr	r2, [r4, #16]
 8003bb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bb2:	fb03 f302 	mul.w	r3, r3, r2
 8003bb6:	6123      	str	r3, [r4, #16]
    frame->longitude.value *= longitude_direction;
 8003bb8:	69a2      	ldr	r2, [r4, #24]
 8003bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bbc:	fb03 f302 	mul.w	r3, r3, r2
 8003bc0:	61a3      	str	r3, [r4, #24]

    return true;
}
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	b011      	add	sp, #68	; 0x44
 8003bc6:	bd30      	pop	{r4, r5, pc}
        return false;
 8003bc8:	2500      	movs	r5, #0
 8003bca:	e7fa      	b.n	8003bc2 <minmea_parse_gga+0x7a>
 8003bcc:	08009634 	.word	0x08009634
 8003bd0:	08009690 	.word	0x08009690

08003bd4 <minmea_parse_gst>:

    return true;
}

bool minmea_parse_gst(struct minmea_sentence_gst *frame, const char *sentence)
{
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4608      	mov	r0, r1
    // $GPGST,024603.00,3.2,6.6,4.7,47.3,5.8,5.6,22.0*58
    char type[6];

    if (!minmea_scan(sentence, "tTfffffff",
 8003bdc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003be0:	9206      	str	r2, [sp, #24]
 8003be2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003be6:	9205      	str	r2, [sp, #20]
 8003be8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003bec:	9204      	str	r2, [sp, #16]
 8003bee:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003bf2:	9203      	str	r2, [sp, #12]
 8003bf4:	f103 0220 	add.w	r2, r3, #32
 8003bf8:	9202      	str	r2, [sp, #8]
 8003bfa:	f103 0218 	add.w	r2, r3, #24
 8003bfe:	9201      	str	r2, [sp, #4]
 8003c00:	f103 0210 	add.w	r2, r3, #16
 8003c04:	9200      	str	r2, [sp, #0]
 8003c06:	aa08      	add	r2, sp, #32
 8003c08:	4907      	ldr	r1, [pc, #28]	; (8003c28 <minmea_parse_gst+0x54>)
 8003c0a:	f7ff fb95 	bl	8003338 <minmea_scan>
 8003c0e:	4604      	mov	r4, r0
 8003c10:	b128      	cbz	r0, 8003c1e <minmea_parse_gst+0x4a>
            &frame->semi_major_orientation,
            &frame->latitude_error_deviation,
            &frame->longitude_error_deviation,
            &frame->altitude_error_deviation))
        return false;
    if (strcmp(type+2, "GST"))
 8003c12:	4906      	ldr	r1, [pc, #24]	; (8003c2c <minmea_parse_gst+0x58>)
 8003c14:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8003c18:	f7fc fae2 	bl	80001e0 <strcmp>
 8003c1c:	b910      	cbnz	r0, 8003c24 <minmea_parse_gst+0x50>
        return false;

    return true;
}
 8003c1e:	4620      	mov	r0, r4
 8003c20:	b00a      	add	sp, #40	; 0x28
 8003c22:	bd10      	pop	{r4, pc}
        return false;
 8003c24:	2400      	movs	r4, #0
 8003c26:	e7fa      	b.n	8003c1e <minmea_parse_gst+0x4a>
 8003c28:	08009644 	.word	0x08009644
 8003c2c:	0800969c 	.word	0x0800969c

08003c30 <minmea_parse_gsv>:

bool minmea_parse_gsv(struct minmea_sentence_gsv *frame, const char *sentence)
{
 8003c30:	b510      	push	{r4, lr}
 8003c32:	b094      	sub	sp, #80	; 0x50
 8003c34:	4603      	mov	r3, r0
 8003c36:	4608      	mov	r0, r1
    // $GPGSV,4,2,11,08,51,203,30,09,45,215,28*75
    // $GPGSV,4,4,13,39,31,170,27*40
    // $GPGSV,4,4,13*7B
    char type[6];

    if (!minmea_scan(sentence, "tiii;iiiiiiiiiiiiiiii",
 8003c38:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003c3c:	9211      	str	r2, [sp, #68]	; 0x44
 8003c3e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8003c42:	9210      	str	r2, [sp, #64]	; 0x40
 8003c44:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003c48:	920f      	str	r2, [sp, #60]	; 0x3c
 8003c4a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003c4e:	920e      	str	r2, [sp, #56]	; 0x38
 8003c50:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003c54:	920d      	str	r2, [sp, #52]	; 0x34
 8003c56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003c5a:	920c      	str	r2, [sp, #48]	; 0x30
 8003c5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c60:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c62:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003c66:	920a      	str	r2, [sp, #40]	; 0x28
 8003c68:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003c6e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003c72:	9208      	str	r2, [sp, #32]
 8003c74:	f103 0220 	add.w	r2, r3, #32
 8003c78:	9207      	str	r2, [sp, #28]
 8003c7a:	f103 021c 	add.w	r2, r3, #28
 8003c7e:	9206      	str	r2, [sp, #24]
 8003c80:	f103 0218 	add.w	r2, r3, #24
 8003c84:	9205      	str	r2, [sp, #20]
 8003c86:	f103 0214 	add.w	r2, r3, #20
 8003c8a:	9204      	str	r2, [sp, #16]
 8003c8c:	f103 0210 	add.w	r2, r3, #16
 8003c90:	9203      	str	r2, [sp, #12]
 8003c92:	f103 020c 	add.w	r2, r3, #12
 8003c96:	9202      	str	r2, [sp, #8]
 8003c98:	f103 0208 	add.w	r2, r3, #8
 8003c9c:	9201      	str	r2, [sp, #4]
 8003c9e:	1d1a      	adds	r2, r3, #4
 8003ca0:	9200      	str	r2, [sp, #0]
 8003ca2:	aa12      	add	r2, sp, #72	; 0x48
 8003ca4:	4907      	ldr	r1, [pc, #28]	; (8003cc4 <minmea_parse_gsv+0x94>)
 8003ca6:	f7ff fb47 	bl	8003338 <minmea_scan>
 8003caa:	4604      	mov	r4, r0
 8003cac:	b128      	cbz	r0, 8003cba <minmea_parse_gsv+0x8a>
            &frame->sats[3].azimuth,
            &frame->sats[3].snr
            )) {
        return false;
    }
    if (strcmp(type+2, "GSV"))
 8003cae:	4906      	ldr	r1, [pc, #24]	; (8003cc8 <minmea_parse_gsv+0x98>)
 8003cb0:	f10d 004a 	add.w	r0, sp, #74	; 0x4a
 8003cb4:	f7fc fa94 	bl	80001e0 <strcmp>
 8003cb8:	b910      	cbnz	r0, 8003cc0 <minmea_parse_gsv+0x90>
        return false;

    return true;
}
 8003cba:	4620      	mov	r0, r4
 8003cbc:	b014      	add	sp, #80	; 0x50
 8003cbe:	bd10      	pop	{r4, pc}
        return false;
 8003cc0:	2400      	movs	r4, #0
 8003cc2:	e7fa      	b.n	8003cba <minmea_parse_gsv+0x8a>
 8003cc4:	08009650 	.word	0x08009650
 8003cc8:	080096a0 	.word	0x080096a0

08003ccc <minmea_parse_vtg>:

bool minmea_parse_vtg(struct minmea_sentence_vtg *frame, const char *sentence)
{
 8003ccc:	b530      	push	{r4, r5, lr}
 8003cce:	b08d      	sub	sp, #52	; 0x34
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	4608      	mov	r0, r1
    // $GPVTG,096.5,T,083.5,M,0.0,N,0.0,K,D*22
    // $GPVTG,188.36,T,,M,0.820,N,1.519,K,A*3F
    char type[6];
    char c_true, c_magnetic, c_knots, c_kph, c_faa_mode;

    if (!minmea_scan(sentence, "tfcfcfcfc;c",
 8003cd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003cd8:	9307      	str	r3, [sp, #28]
 8003cda:	ab09      	add	r3, sp, #36	; 0x24
 8003cdc:	9306      	str	r3, [sp, #24]
 8003cde:	f104 0318 	add.w	r3, r4, #24
 8003ce2:	9305      	str	r3, [sp, #20]
 8003ce4:	f10d 0325 	add.w	r3, sp, #37	; 0x25
 8003ce8:	9304      	str	r3, [sp, #16]
 8003cea:	f104 0310 	add.w	r3, r4, #16
 8003cee:	9303      	str	r3, [sp, #12]
 8003cf0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8003cf4:	9302      	str	r3, [sp, #8]
 8003cf6:	f104 0308 	add.w	r3, r4, #8
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	4623      	mov	r3, r4
 8003d04:	aa0a      	add	r2, sp, #40	; 0x28
 8003d06:	4916      	ldr	r1, [pc, #88]	; (8003d60 <minmea_parse_vtg+0x94>)
 8003d08:	f7ff fb16 	bl	8003338 <minmea_scan>
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	b318      	cbz	r0, 8003d58 <minmea_parse_vtg+0x8c>
            &c_knots,
            &frame->speed_kph,
            &c_kph,
            &c_faa_mode))
        return false;
    if (strcmp(type+2, "VTG"))
 8003d10:	4914      	ldr	r1, [pc, #80]	; (8003d64 <minmea_parse_vtg+0x98>)
 8003d12:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8003d16:	f7fc fa63 	bl	80001e0 <strcmp>
 8003d1a:	b9e0      	cbnz	r0, 8003d56 <minmea_parse_vtg+0x8a>
        return false;
    // check chars
    if (c_true != 'T' ||
 8003d1c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8003d20:	2b54      	cmp	r3, #84	; 0x54
 8003d22:	d001      	beq.n	8003d28 <minmea_parse_vtg+0x5c>
        c_magnetic != 'M' ||
        c_knots != 'N' ||
        c_kph != 'K')
        return false;
 8003d24:	2500      	movs	r5, #0
 8003d26:	e017      	b.n	8003d58 <minmea_parse_vtg+0x8c>
        c_magnetic != 'M' ||
 8003d28:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    if (c_true != 'T' ||
 8003d2c:	2b4d      	cmp	r3, #77	; 0x4d
 8003d2e:	d001      	beq.n	8003d34 <minmea_parse_vtg+0x68>
        return false;
 8003d30:	2500      	movs	r5, #0
 8003d32:	e011      	b.n	8003d58 <minmea_parse_vtg+0x8c>
        c_knots != 'N' ||
 8003d34:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
        c_magnetic != 'M' ||
 8003d38:	2b4e      	cmp	r3, #78	; 0x4e
 8003d3a:	d001      	beq.n	8003d40 <minmea_parse_vtg+0x74>
        return false;
 8003d3c:	2500      	movs	r5, #0
 8003d3e:	e00b      	b.n	8003d58 <minmea_parse_vtg+0x8c>
        c_kph != 'K')
 8003d40:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        c_knots != 'N' ||
 8003d44:	2b4b      	cmp	r3, #75	; 0x4b
 8003d46:	d001      	beq.n	8003d4c <minmea_parse_vtg+0x80>
        return false;
 8003d48:	2500      	movs	r5, #0
 8003d4a:	e005      	b.n	8003d58 <minmea_parse_vtg+0x8c>
    frame->faa_mode = (enum minmea_faa_mode)c_faa_mode;
 8003d4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d50:	f884 3020 	strb.w	r3, [r4, #32]

    return true;
 8003d54:	e000      	b.n	8003d58 <minmea_parse_vtg+0x8c>
        return false;
 8003d56:	2500      	movs	r5, #0
}
 8003d58:	4628      	mov	r0, r5
 8003d5a:	b00d      	add	sp, #52	; 0x34
 8003d5c:	bd30      	pop	{r4, r5, pc}
 8003d5e:	bf00      	nop
 8003d60:	08009678 	.word	0x08009678
 8003d64:	080096a4 	.word	0x080096a4

08003d68 <minmea_parse_zda>:

bool minmea_parse_zda(struct minmea_sentence_zda *frame, const char *sentence)
{
 8003d68:	b530      	push	{r4, r5, lr}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	4608      	mov	r0, r1
  // $GPZDA,201530.00,04,07,2002,00,00*60
  char type[6];

  if(!minmea_scan(sentence, "tTiiiii",
 8003d70:	f104 0320 	add.w	r3, r4, #32
 8003d74:	9304      	str	r3, [sp, #16]
 8003d76:	f104 031c 	add.w	r3, r4, #28
 8003d7a:	9303      	str	r3, [sp, #12]
 8003d7c:	f104 0318 	add.w	r3, r4, #24
 8003d80:	9302      	str	r3, [sp, #8]
 8003d82:	f104 0314 	add.w	r3, r4, #20
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	f104 0310 	add.w	r3, r4, #16
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	4623      	mov	r3, r4
 8003d90:	aa06      	add	r2, sp, #24
 8003d92:	4910      	ldr	r1, [pc, #64]	; (8003dd4 <minmea_parse_zda+0x6c>)
 8003d94:	f7ff fad0 	bl	8003338 <minmea_scan>
 8003d98:	4605      	mov	r5, r0
 8003d9a:	b198      	cbz	r0, 8003dc4 <minmea_parse_zda+0x5c>
          &frame->date.month,
          &frame->date.year,
          &frame->hour_offset,
          &frame->minute_offset))
      return false;
  if (strcmp(type+2, "ZDA"))
 8003d9c:	490e      	ldr	r1, [pc, #56]	; (8003dd8 <minmea_parse_zda+0x70>)
 8003d9e:	f10d 001a 	add.w	r0, sp, #26
 8003da2:	f7fc fa1d 	bl	80001e0 <strcmp>
 8003da6:	b960      	cbnz	r0, 8003dc2 <minmea_parse_zda+0x5a>
      return false;

  // check offsets
  if (abs(frame->hour_offset) > 13 ||
 8003da8:	69e3      	ldr	r3, [r4, #28]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bfb8      	it	lt
 8003dae:	425b      	neglt	r3, r3
 8003db0:	2b0d      	cmp	r3, #13
 8003db2:	dc0a      	bgt.n	8003dca <minmea_parse_zda+0x62>
      frame->minute_offset > 59 ||
 8003db4:	6a23      	ldr	r3, [r4, #32]
  if (abs(frame->hour_offset) > 13 ||
 8003db6:	2b3b      	cmp	r3, #59	; 0x3b
 8003db8:	dc09      	bgt.n	8003dce <minmea_parse_zda+0x66>
      frame->minute_offset > 59 ||
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	da02      	bge.n	8003dc4 <minmea_parse_zda+0x5c>
      frame->minute_offset < 0)
      return false;
 8003dbe:	2500      	movs	r5, #0
 8003dc0:	e000      	b.n	8003dc4 <minmea_parse_zda+0x5c>
      return false;
 8003dc2:	2500      	movs	r5, #0

  return true;
}
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	b009      	add	sp, #36	; 0x24
 8003dc8:	bd30      	pop	{r4, r5, pc}
      return false;
 8003dca:	2500      	movs	r5, #0
 8003dcc:	e7fa      	b.n	8003dc4 <minmea_parse_zda+0x5c>
 8003dce:	2500      	movs	r5, #0
 8003dd0:	e7f8      	b.n	8003dc4 <minmea_parse_zda+0x5c>
 8003dd2:	bf00      	nop
 8003dd4:	08009684 	.word	0x08009684
 8003dd8:	080096a8 	.word	0x080096a8

08003ddc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003ddc:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8003dde:	4805      	ldr	r0, [pc, #20]	; (8003df4 <MX_CRC_Init+0x18>)
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <MX_CRC_Init+0x1c>)
 8003de2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003de4:	f7fd fae2 	bl	80013ac <HAL_CRC_Init>
 8003de8:	b900      	cbnz	r0, 8003dec <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 8003dea:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003dec:	f000 fe6c 	bl	8004ac8 <Error_Handler>
}
 8003df0:	e7fb      	b.n	8003dea <MX_CRC_Init+0xe>
 8003df2:	bf00      	nop
 8003df4:	200003ec 	.word	0x200003ec
 8003df8:	40023000 	.word	0x40023000

08003dfc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8003dfc:	6802      	ldr	r2, [r0, #0]
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_CRC_MspInit+0x28>)
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d000      	beq.n	8003e06 <HAL_CRC_MspInit+0xa>
 8003e04:	4770      	bx	lr
{
 8003e06:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003e08:	2300      	movs	r3, #0
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_CRC_MspInit+0x2c>)
 8003e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003e20:	b002      	add	sp, #8
 8003e22:	4770      	bx	lr
 8003e24:	40023000 	.word	0x40023000
 8003e28:	40023800 	.word	0x40023800

08003e2c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003e2c:	b500      	push	{lr}
 8003e2e:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e30:	2100      	movs	r1, #0
 8003e32:	9101      	str	r1, [sp, #4]
 8003e34:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <MX_DMA_Init+0x30>)
 8003e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e38:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003e48:	460a      	mov	r2, r1
 8003e4a:	2039      	movs	r0, #57	; 0x39
 8003e4c:	f7fd fa6c 	bl	8001328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003e50:	2039      	movs	r0, #57	; 0x39
 8003e52:	f7fd fa9d 	bl	8001390 <HAL_NVIC_EnableIRQ>

}
 8003e56:	b003      	add	sp, #12
 8003e58:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e5c:	40023800 	.word	0x40023800

08003e60 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e64:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e66:	2400      	movs	r4, #0
 8003e68:	9405      	str	r4, [sp, #20]
 8003e6a:	9406      	str	r4, [sp, #24]
 8003e6c:	9407      	str	r4, [sp, #28]
 8003e6e:	9408      	str	r4, [sp, #32]
 8003e70:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e72:	9400      	str	r4, [sp, #0]
 8003e74:	4b53      	ldr	r3, [pc, #332]	; (8003fc4 <MX_GPIO_Init+0x164>)
 8003e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e78:	f042 0204 	orr.w	r2, r2, #4
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e80:	f002 0204 	and.w	r2, r2, #4
 8003e84:	9200      	str	r2, [sp, #0]
 8003e86:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e88:	9401      	str	r4, [sp, #4]
 8003e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
 8003e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e94:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003e98:	9201      	str	r2, [sp, #4]
 8003e9a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9c:	9402      	str	r4, [sp, #8]
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea8:	f002 0201 	and.w	r2, r2, #1
 8003eac:	9202      	str	r2, [sp, #8]
 8003eae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb0:	9403      	str	r4, [sp, #12]
 8003eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb4:	f042 0202 	orr.w	r2, r2, #2
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8003eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebc:	f002 0202 	and.w	r2, r2, #2
 8003ec0:	9203      	str	r2, [sp, #12]
 8003ec2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ec4:	9404      	str	r4, [sp, #16]
 8003ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec8:	f042 0208 	orr.w	r2, r2, #8
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	9304      	str	r3, [sp, #16]
 8003ed6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003ed8:	4e3b      	ldr	r6, [pc, #236]	; (8003fc8 <MX_GPIO_Init+0x168>)
 8003eda:	4622      	mov	r2, r4
 8003edc:	2120      	movs	r1, #32
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7fd fedc 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8003ee4:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8003fdc <MX_GPIO_Init+0x17c>
 8003ee8:	4622      	mov	r2, r4
 8003eea:	2120      	movs	r1, #32
 8003eec:	4648      	mov	r0, r9
 8003eee:	f7fd fed5 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8003ef2:	4f36      	ldr	r7, [pc, #216]	; (8003fcc <MX_GPIO_Init+0x16c>)
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8003efa:	4638      	mov	r0, r7
 8003efc:	f7fd fece 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC3 PC4 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003f00:	f64f 731b 	movw	r3, #65307	; 0xff1b
 8003f04:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f06:	2503      	movs	r5, #3
 8003f08:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f0c:	a905      	add	r1, sp, #20
 8003f0e:	4648      	mov	r0, r9
 8003f10:	f7fd fdf2 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f14:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f16:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f1a:	a905      	add	r1, sp, #20
 8003f1c:	482c      	ldr	r0, [pc, #176]	; (8003fd0 <MX_GPIO_Init+0x170>)
 8003f1e:	f7fd fdeb 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA6 PA7 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003f22:	f649 63df 	movw	r3, #40671	; 0x9edf
 8003f26:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f28:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2c:	a905      	add	r1, sp, #20
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f7fd fde2 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f34:	f04f 0a20 	mov.w	sl, #32
 8003f38:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f3c:	f04f 0801 	mov.w	r8, #1
 8003f40:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f44:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f46:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f48:	a905      	add	r1, sp, #20
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	f7fd fdd4 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f50:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f54:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f5c:	a905      	add	r1, sp, #20
 8003f5e:	4648      	mov	r0, r9
 8003f60:	f7fd fdca 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8003f64:	2337      	movs	r3, #55	; 0x37
 8003f66:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f68:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f6c:	a905      	add	r1, sp, #20
 8003f6e:	4638      	mov	r0, r7
 8003f70:	f7fd fdc2 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8003f74:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003f78:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f7a:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f80:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f82:	a905      	add	r1, sp, #20
 8003f84:	4638      	mov	r0, r7
 8003f86:	f7fd fdb7 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 8003f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f8e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f90:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <MX_GPIO_Init+0x174>)
 8003f92:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 8003f96:	a905      	add	r1, sp, #20
 8003f98:	4630      	mov	r0, r6
 8003f9a:	f7fd fdad 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fa2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fa6:	a905      	add	r1, sp, #20
 8003fa8:	480b      	ldr	r0, [pc, #44]	; (8003fd8 <MX_GPIO_Init+0x178>)
 8003faa:	f7fd fda5 	bl	8001af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8003fae:	4622      	mov	r2, r4
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	2017      	movs	r0, #23
 8003fb4:	f7fd f9b8 	bl	8001328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003fb8:	2017      	movs	r0, #23
 8003fba:	f7fd f9e9 	bl	8001390 <HAL_NVIC_EnableIRQ>

}
 8003fbe:	b00a      	add	sp, #40	; 0x28
 8003fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40020000 	.word	0x40020000
 8003fcc:	40020400 	.word	0x40020400
 8003fd0:	40021c00 	.word	0x40021c00
 8003fd4:	10110000 	.word	0x10110000
 8003fd8:	40020c00 	.word	0x40020c00
 8003fdc:	40020800 	.word	0x40020800

08003fe0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003fe0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8003fe2:	480b      	ldr	r0, [pc, #44]	; (8004010 <MX_I2C2_Init+0x30>)
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <MX_I2C2_Init+0x34>)
 8003fe6:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <MX_I2C2_Init+0x38>)
 8003fea:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003fec:	2300      	movs	r3, #0
 8003fee:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003ff0:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ff6:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ff8:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003ffa:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ffc:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ffe:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004000:	f7fd fe60 	bl	8001cc4 <HAL_I2C_Init>
 8004004:	b900      	cbnz	r0, 8004008 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
  }

}
 8004006:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004008:	f000 fd5e 	bl	8004ac8 <Error_Handler>
}
 800400c:	e7fb      	b.n	8004006 <MX_I2C2_Init+0x26>
 800400e:	bf00      	nop
 8004010:	200002a4 	.word	0x200002a4
 8004014:	40005800 	.word	0x40005800
 8004018:	00061a80 	.word	0x00061a80

0800401c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800401c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004020:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004022:	2300      	movs	r3, #0
 8004024:	9303      	str	r3, [sp, #12]
 8004026:	9304      	str	r3, [sp, #16]
 8004028:	9305      	str	r3, [sp, #20]
 800402a:	9306      	str	r3, [sp, #24]
 800402c:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 800402e:	6802      	ldr	r2, [r0, #0]
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_I2C_MspInit+0x90>)
 8004032:	429a      	cmp	r2, r3
 8004034:	d002      	beq.n	800403c <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004036:	b009      	add	sp, #36	; 0x24
 8004038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800403c:	2500      	movs	r5, #0
 800403e:	9501      	str	r5, [sp, #4]
 8004040:	4c1b      	ldr	r4, [pc, #108]	; (80040b0 <HAL_I2C_MspInit+0x94>)
 8004042:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004044:	f043 0302 	orr.w	r3, r3, #2
 8004048:	6323      	str	r3, [r4, #48]	; 0x30
 800404a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004058:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800405a:	f04f 0912 	mov.w	r9, #18
 800405e:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004062:	f04f 0801 	mov.w	r8, #1
 8004066:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406a:	2703      	movs	r7, #3
 800406c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800406e:	2304      	movs	r3, #4
 8004070:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004072:	4e10      	ldr	r6, [pc, #64]	; (80040b4 <HAL_I2C_MspInit+0x98>)
 8004074:	a903      	add	r1, sp, #12
 8004076:	4630      	mov	r0, r6
 8004078:	f7fd fd3e 	bl	8001af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800407c:	2308      	movs	r3, #8
 800407e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004080:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004084:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004088:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800408a:	2309      	movs	r3, #9
 800408c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800408e:	a903      	add	r1, sp, #12
 8004090:	4630      	mov	r0, r6
 8004092:	f7fd fd31 	bl	8001af8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004096:	9502      	str	r5, [sp, #8]
 8004098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800409a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800409e:	6423      	str	r3, [r4, #64]	; 0x40
 80040a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a6:	9302      	str	r3, [sp, #8]
 80040a8:	9b02      	ldr	r3, [sp, #8]
}
 80040aa:	e7c4      	b.n	8004036 <HAL_I2C_MspInit+0x1a>
 80040ac:	40005800 	.word	0x40005800
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40020400 	.word	0x40020400

080040b8 <GPS_init>:


struct GPS_ GPS;


void GPS_init() {
 80040b8:	b508      	push	{r3, lr}

	for (int i = 0; i < GPS_BUFFERSIZE; ++i) {
 80040ba:	2300      	movs	r3, #0
 80040bc:	e003      	b.n	80040c6 <GPS_init+0xe>
		GPS_RX_Buffer[i] = 0;
 80040be:	4a07      	ldr	r2, [pc, #28]	; (80040dc <GPS_init+0x24>)
 80040c0:	2100      	movs	r1, #0
 80040c2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < GPS_BUFFERSIZE; ++i) {
 80040c4:	3301      	adds	r3, #1
 80040c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ca:	dbf8      	blt.n	80040be <GPS_init+0x6>
	}

	HAL_UART_Receive_DMA(&huart6, GPS_RX_Buffer, GPS_BUFFERSIZE);
 80040cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040d0:	4902      	ldr	r1, [pc, #8]	; (80040dc <GPS_init+0x24>)
 80040d2:	4803      	ldr	r0, [pc, #12]	; (80040e0 <GPS_init+0x28>)
 80040d4:	f7fe ff0e 	bl	8002ef4 <HAL_UART_Receive_DMA>


}
 80040d8:	bd08      	pop	{r3, pc}
 80040da:	bf00      	nop
 80040dc:	20000450 	.word	0x20000450
 80040e0:	200009c8 	.word	0x200009c8

080040e4 <parse_sentence>:
		i++;
	}
}

//From https://github.com/kosma/minmea
void parse_sentence() {
 80040e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e6:	b09b      	sub	sp, #108	; 0x6c

	//char line[MINMEA_MAX_LENGTH];

	//while (fgets(line, MINMEA_MAX_LENGTH, stdin) != NULL) {
	//printf("%s", line);
	switch (minmea_sentence_id(line, false)) {
 80040e8:	2100      	movs	r1, #0
 80040ea:	4893      	ldr	r0, [pc, #588]	; (8004338 <parse_sentence+0x254>)
 80040ec:	f7ff fc78 	bl	80039e0 <minmea_sentence_id>
 80040f0:	3001      	adds	r0, #1
 80040f2:	2809      	cmp	r0, #9
 80040f4:	f200 82fa 	bhi.w	80046ec <parse_sentence+0x608>
 80040f8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80040fc:	02f802f3 	.word	0x02f802f3
 8004100:	00f6000a 	.word	0x00f6000a
 8004104:	02f802f8 	.word	0x02f802f8
 8004108:	020b012e 	.word	0x020b012e
 800410c:	02d90236 	.word	0x02d90236
	case MINMEA_SENTENCE_RMC: {
		struct minmea_sentence_rmc frame;
		if (minmea_parse_rmc(&frame, line)) {
 8004110:	4989      	ldr	r1, [pc, #548]	; (8004338 <parse_sentence+0x254>)
 8004112:	a806      	add	r0, sp, #24
 8004114:	f7ff fccc 	bl	8003ab0 <minmea_parse_rmc>
 8004118:	2800      	cmp	r0, #0
 800411a:	f000 80e1 	beq.w	80042e0 <parse_sentence+0x1fc>
			printf(
 800411e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004120:	9302      	str	r3, [sp, #8]
 8004122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800412c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800412e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004130:	4882      	ldr	r0, [pc, #520]	; (800433c <parse_sentence+0x258>)
 8004132:	f001 fe75 	bl	8005e20 <iprintf>
/**
 * Rescale a fixed-point value to a different scale. Rounds towards zero.
 */
static inline int_least32_t minmea_rescale(struct minmea_float *f, int_least32_t new_scale)
{
    if (f->scale == 0)
 8004136:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004138:	b161      	cbz	r1, 8004154 <parse_sentence+0x70>
        return 0;
    if (f->scale == new_scale)
 800413a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800413e:	d049      	beq.n	80041d4 <parse_sentence+0xf0>
        return f->value;
    if (f->scale > new_scale)
 8004140:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8004144:	dc48      	bgt.n	80041d8 <parse_sentence+0xf4>
        return (f->value + ((f->value > 0) - (f->value < 0)) * f->scale/new_scale/2) / (f->scale/new_scale);
    else
        return f->value * (new_scale/f->scale);
 8004146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800414a:	fb93 f1f1 	sdiv	r1, r3, r1
 800414e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004150:	fb01 f103 	mul.w	r1, r1, r3
    if (f->scale == 0)
 8004154:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004156:	b162      	cbz	r2, 8004172 <parse_sentence+0x8e>
    if (f->scale == new_scale)
 8004158:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800415c:	d057      	beq.n	800420e <parse_sentence+0x12a>
    if (f->scale > new_scale)
 800415e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004162:	dc56      	bgt.n	8004212 <parse_sentence+0x12e>
        return f->value * (new_scale/f->scale);
 8004164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004168:	fb93 f2f2 	sdiv	r2, r3, r2
 800416c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800416e:	fb02 f203 	mul.w	r2, r2, r3
    if (f->scale == 0)
 8004172:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004174:	b163      	cbz	r3, 8004190 <parse_sentence+0xac>
    if (f->scale == new_scale)
 8004176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800417a:	d065      	beq.n	8004248 <parse_sentence+0x164>
    if (f->scale > new_scale)
 800417c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004180:	dc64      	bgt.n	800424c <parse_sentence+0x168>
        return f->value * (new_scale/f->scale);
 8004182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004186:	fb90 f3f3 	sdiv	r3, r0, r3
 800418a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800418c:	fb03 f300 	mul.w	r3, r3, r0
					INDENT_SPACES "$xxRMC: raw coordinates and speed: (%d/%d,%d/%d) %d/%d\n",
					frame.latitude.value, frame.latitude.scale,
					frame.longitude.value, frame.longitude.scale,
					frame.speed.value, frame.speed.scale);
			printf(
 8004190:	486b      	ldr	r0, [pc, #428]	; (8004340 <parse_sentence+0x25c>)
 8004192:	f001 fe45 	bl	8005e20 <iprintf>
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
    if (f->scale == 0)
 8004196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004198:	2b00      	cmp	r3, #0
 800419a:	d072      	beq.n	8004282 <parse_sentence+0x19e>
        return NAN;
    int_least32_t degrees = f->value / (f->scale * 100);
 800419c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800419e:	2164      	movs	r1, #100	; 0x64
 80041a0:	fb01 f103 	mul.w	r1, r1, r3
 80041a4:	fb90 f2f1 	sdiv	r2, r0, r1
    int_least32_t minutes = f->value % (f->scale * 100);
 80041a8:	fb01 0112 	mls	r1, r1, r2, r0
    return (float) degrees + (float) minutes / (60 * f->scale);
 80041ac:	ee07 2a90 	vmov	s15, r2
 80041b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b4:	ee07 1a10 	vmov	s14, r1
 80041b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80041bc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80041c0:	009a      	lsls	r2, r3, #2
 80041c2:	ee06 2a90 	vmov	s13, r2
 80041c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80041ca:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80041ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 80041d2:	e058      	b.n	8004286 <parse_sentence+0x1a2>
        return f->value;
 80041d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041d6:	e7bd      	b.n	8004154 <parse_sentence+0x70>
        return (f->value + ((f->value > 0) - (f->value < 0)) * f->scale/new_scale/2) / (f->scale/new_scale);
 80041d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041da:	0fd3      	lsrs	r3, r2, #31
 80041dc:	2a00      	cmp	r2, #0
 80041de:	bfd4      	ite	le
 80041e0:	425b      	negle	r3, r3
 80041e2:	f1c3 0301 	rsbgt	r3, r3, #1
 80041e6:	fb03 f301 	mul.w	r3, r3, r1
 80041ea:	4856      	ldr	r0, [pc, #344]	; (8004344 <parse_sentence+0x260>)
 80041ec:	fb80 5403 	smull	r5, r4, r0, r3
 80041f0:	17db      	asrs	r3, r3, #31
 80041f2:	ebc3 13a4 	rsb	r3, r3, r4, asr #6
 80041f6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80041fa:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80041fe:	fb80 2001 	smull	r2, r0, r0, r1
 8004202:	17c9      	asrs	r1, r1, #31
 8004204:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
 8004208:	fb93 f1f0 	sdiv	r1, r3, r0
 800420c:	e7a2      	b.n	8004154 <parse_sentence+0x70>
        return f->value;
 800420e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004210:	e7af      	b.n	8004172 <parse_sentence+0x8e>
        return (f->value + ((f->value > 0) - (f->value < 0)) * f->scale/new_scale/2) / (f->scale/new_scale);
 8004212:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004214:	0fc3      	lsrs	r3, r0, #31
 8004216:	2800      	cmp	r0, #0
 8004218:	bfd4      	ite	le
 800421a:	425b      	negle	r3, r3
 800421c:	f1c3 0301 	rsbgt	r3, r3, #1
 8004220:	fb03 f302 	mul.w	r3, r3, r2
 8004224:	4c47      	ldr	r4, [pc, #284]	; (8004344 <parse_sentence+0x260>)
 8004226:	fb84 6503 	smull	r6, r5, r4, r3
 800422a:	17db      	asrs	r3, r3, #31
 800422c:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
 8004230:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004234:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8004238:	fb84 0402 	smull	r0, r4, r4, r2
 800423c:	17d2      	asrs	r2, r2, #31
 800423e:	ebc2 14a4 	rsb	r4, r2, r4, asr #6
 8004242:	fb93 f2f4 	sdiv	r2, r3, r4
 8004246:	e794      	b.n	8004172 <parse_sentence+0x8e>
        return f->value;
 8004248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800424a:	e7a1      	b.n	8004190 <parse_sentence+0xac>
        return (f->value + ((f->value > 0) - (f->value < 0)) * f->scale/new_scale/2) / (f->scale/new_scale);
 800424c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800424e:	0fe0      	lsrs	r0, r4, #31
 8004250:	2c00      	cmp	r4, #0
 8004252:	bfd4      	ite	le
 8004254:	4240      	negle	r0, r0
 8004256:	f1c0 0001 	rsbgt	r0, r0, #1
 800425a:	fb00 f003 	mul.w	r0, r0, r3
 800425e:	4d39      	ldr	r5, [pc, #228]	; (8004344 <parse_sentence+0x260>)
 8004260:	fb85 7600 	smull	r7, r6, r5, r0
 8004264:	17c0      	asrs	r0, r0, #31
 8004266:	ebc0 10a6 	rsb	r0, r0, r6, asr #6
 800426a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800426e:	eb04 0060 	add.w	r0, r4, r0, asr #1
 8004272:	fb85 4503 	smull	r4, r5, r5, r3
 8004276:	17db      	asrs	r3, r3, #31
 8004278:	ebc3 15a5 	rsb	r5, r3, r5, asr #6
 800427c:	fb90 f3f5 	sdiv	r3, r0, r5
 8004280:	e786      	b.n	8004190 <parse_sentence+0xac>
        return NAN;
 8004282:	eddf 7a31 	vldr	s15, [pc, #196]	; 8004348 <parse_sentence+0x264>
			//					INDENT_SPACES "$xxRMC floating point degree coordinates and speed: (%f,%f) %f\n",
			//					minmea_tocoord(&frame.latitude),
			//					minmea_tocoord(&frame.longitude),
			//					minmea_tofloat(&frame.speed));

			GPS.Longitude = minmea_tocoord(&frame.longitude);
 8004286:	4b31      	ldr	r3, [pc, #196]	; (800434c <parse_sentence+0x268>)
 8004288:	edc3 7a02 	vstr	s15, [r3, #8]
    if (f->scale == 0)
 800428c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800428e:	b1db      	cbz	r3, 80042c8 <parse_sentence+0x1e4>
    int_least32_t degrees = f->value / (f->scale * 100);
 8004290:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004292:	2264      	movs	r2, #100	; 0x64
 8004294:	fb02 f203 	mul.w	r2, r2, r3
 8004298:	fb90 f1f2 	sdiv	r1, r0, r2
    int_least32_t minutes = f->value % (f->scale * 100);
 800429c:	fb02 0211 	mls	r2, r2, r1, r0
    return (float) degrees + (float) minutes / (60 * f->scale);
 80042a0:	ee07 1a90 	vmov	s15, r1
 80042a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80042a8:	ee07 2a90 	vmov	s15, r2
 80042ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80042b4:	009a      	lsls	r2, r3, #2
 80042b6:	ee07 2a10 	vmov	s14, r2
 80042ba:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80042be:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80042c2:	ee77 7a26 	vadd.f32	s15, s14, s13
 80042c6:	e001      	b.n	80042cc <parse_sentence+0x1e8>
        return NAN;
 80042c8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004348 <parse_sentence+0x264>
			GPS.Latitude = minmea_tocoord(&frame.latitude);
 80042cc:	4b1f      	ldr	r3, [pc, #124]	; (800434c <parse_sentence+0x268>)
 80042ce:	edc3 7a03 	vstr	s15, [r3, #12]

			GPS.Day = frame.date.day;
 80042d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80042d4:	701a      	strb	r2, [r3, #0]
			GPS.Month = frame.date.month;
 80042d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80042d8:	705a      	strb	r2, [r3, #1]
			GPS.Year = frame.date.year;
 80042da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042dc:	709a      	strb	r2, [r3, #2]
 80042de:	e203      	b.n	80046e8 <parse_sentence+0x604>

		} else {
			printf(INDENT_SPACES "$xxRMC sentence is not parsed\n");
 80042e0:	481b      	ldr	r0, [pc, #108]	; (8004350 <parse_sentence+0x26c>)
 80042e2:	f001 fe11 	bl	8005f08 <puts>
		}
	}
	break;
 80042e6:	e1ff      	b.n	80046e8 <parse_sentence+0x604>

	case MINMEA_SENTENCE_GGA: {
		struct minmea_sentence_gga frame;
		if (minmea_parse_gga(&frame, line)) {
 80042e8:	4913      	ldr	r1, [pc, #76]	; (8004338 <parse_sentence+0x254>)
 80042ea:	a806      	add	r0, sp, #24
 80042ec:	f7ff fc2c 	bl	8003b48 <minmea_parse_gga>
 80042f0:	b1e8      	cbz	r0, 800432e <parse_sentence+0x24a>

			GPS.Hours = frame.time.hours;
 80042f2:	4b16      	ldr	r3, [pc, #88]	; (800434c <parse_sentence+0x268>)
 80042f4:	9a06      	ldr	r2, [sp, #24]
 80042f6:	70da      	strb	r2, [r3, #3]
			GPS.Minutes = frame.time.minutes;
 80042f8:	9a07      	ldr	r2, [sp, #28]
 80042fa:	711a      	strb	r2, [r3, #4]
			GPS.Seconds = frame.time.seconds;
 80042fc:	9a08      	ldr	r2, [sp, #32]
 80042fe:	715a      	strb	r2, [r3, #5]

			GPS.sattelite_no = frame.satellites_tracked;
 8004300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004302:	761a      	strb	r2, [r3, #24]
			GPS.fix_quality = frame.fix_quality;
 8004304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004306:	765a      	strb	r2, [r3, #25]
    if (f->scale == 0)
 8004308:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800430a:	b16b      	cbz	r3, 8004328 <parse_sentence+0x244>
    return (float) f->value / (float) f->scale;
 800430c:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8004310:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431c:	ee86 7aa7 	vdiv.f32	s14, s13, s15

			GPS.Altitude = minmea_tofloat(&frame.altitude);
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <parse_sentence+0x268>)
 8004322:	ed83 7a05 	vstr	s14, [r3, #20]
 8004326:	e1df      	b.n	80046e8 <parse_sentence+0x604>
        return NAN;
 8004328:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004348 <parse_sentence+0x264>
 800432c:	e7f8      	b.n	8004320 <parse_sentence+0x23c>


			//			printf(INDENT_SPACES "$xxGGA: fix quality: %d\n",
			//					frame.fix_quality);
		} else {
			printf(INDENT_SPACES "$xxGGA sentence is not parsed\n");
 800432e:	4809      	ldr	r0, [pc, #36]	; (8004354 <parse_sentence+0x270>)
 8004330:	f001 fdea 	bl	8005f08 <puts>
		}
	}
	break;
 8004334:	e1d8      	b.n	80046e8 <parse_sentence+0x604>
 8004336:	bf00      	nop
 8004338:	200003fc 	.word	0x200003fc
 800433c:	080096b0 	.word	0x080096b0
 8004340:	080096ec 	.word	0x080096ec
 8004344:	10624dd3 	.word	0x10624dd3
 8004348:	7fc00000 	.word	0x7fc00000
 800434c:	20000838 	.word	0x20000838
 8004350:	08009744 	.word	0x08009744
 8004354:	08009764 	.word	0x08009764

	case MINMEA_SENTENCE_GST: {
		struct minmea_sentence_gst frame;
		if (minmea_parse_gst(&frame, line)) {
 8004358:	49be      	ldr	r1, [pc, #760]	; (8004654 <parse_sentence+0x570>)
 800435a:	a806      	add	r0, sp, #24
 800435c:	f7ff fc3a 	bl	8003bd4 <minmea_parse_gst>
 8004360:	2800      	cmp	r0, #0
 8004362:	f000 80d2 	beq.w	800450a <parse_sentence+0x426>
			printf(
 8004366:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004368:	9302      	str	r3, [sp, #8]
 800436a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004374:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004376:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004378:	48b7      	ldr	r0, [pc, #732]	; (8004658 <parse_sentence+0x574>)
 800437a:	f001 fd51 	bl	8005e20 <iprintf>
    if (f->scale == 0)
 800437e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004380:	b149      	cbz	r1, 8004396 <parse_sentence+0x2b2>
    if (f->scale == new_scale)
 8004382:	290a      	cmp	r1, #10
 8004384:	d030      	beq.n	80043e8 <parse_sentence+0x304>
    if (f->scale > new_scale)
 8004386:	290a      	cmp	r1, #10
 8004388:	dc30      	bgt.n	80043ec <parse_sentence+0x308>
        return f->value * (new_scale/f->scale);
 800438a:	230a      	movs	r3, #10
 800438c:	fb93 f1f1 	sdiv	r1, r3, r1
 8004390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004392:	fb01 f103 	mul.w	r1, r1, r3
    if (f->scale == 0)
 8004396:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004398:	b14a      	cbz	r2, 80043ae <parse_sentence+0x2ca>
    if (f->scale == new_scale)
 800439a:	2a0a      	cmp	r2, #10
 800439c:	d041      	beq.n	8004422 <parse_sentence+0x33e>
    if (f->scale > new_scale)
 800439e:	2a0a      	cmp	r2, #10
 80043a0:	dc41      	bgt.n	8004426 <parse_sentence+0x342>
        return f->value * (new_scale/f->scale);
 80043a2:	230a      	movs	r3, #10
 80043a4:	fb93 f2f2 	sdiv	r2, r3, r2
 80043a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043aa:	fb02 f203 	mul.w	r2, r2, r3
    if (f->scale == 0)
 80043ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043b0:	b14b      	cbz	r3, 80043c6 <parse_sentence+0x2e2>
    if (f->scale == new_scale)
 80043b2:	2b0a      	cmp	r3, #10
 80043b4:	d052      	beq.n	800445c <parse_sentence+0x378>
    if (f->scale > new_scale)
 80043b6:	2b0a      	cmp	r3, #10
 80043b8:	dc52      	bgt.n	8004460 <parse_sentence+0x37c>
        return f->value * (new_scale/f->scale);
 80043ba:	200a      	movs	r0, #10
 80043bc:	fb90 f3f3 	sdiv	r3, r0, r3
 80043c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80043c2:	fb03 f300 	mul.w	r3, r3, r0
					frame.latitude_error_deviation.scale,
					frame.longitude_error_deviation.value,
					frame.longitude_error_deviation.scale,
					frame.altitude_error_deviation.value,
					frame.altitude_error_deviation.scale);
			printf(
 80043c6:	48a5      	ldr	r0, [pc, #660]	; (800465c <parse_sentence+0x578>)
 80043c8:	f001 fd2a 	bl	8005e20 <iprintf>
    if (f->scale == 0)
 80043cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d061      	beq.n	8004496 <parse_sentence+0x3b2>
    return (float) f->value / (float) f->scale;
 80043d2:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 80043d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	e058      	b.n	800449a <parse_sentence+0x3b6>
        return f->value;
 80043e8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80043ea:	e7d4      	b.n	8004396 <parse_sentence+0x2b2>
        return (f->value + ((f->value > 0) - (f->value < 0)) * f->scale/new_scale/2) / (f->scale/new_scale);
 80043ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043ee:	0fd3      	lsrs	r3, r2, #31
 80043f0:	2a00      	cmp	r2, #0
 80043f2:	bfd4      	ite	le
 80043f4:	425b      	negle	r3, r3
 80043f6:	f1c3 0301 	rsbgt	r3, r3, #1
 80043fa:	fb03 f301 	mul.w	r3, r3, r1
 80043fe:	4898      	ldr	r0, [pc, #608]	; (8004660 <parse_sentence+0x57c>)
 8004400:	fb80 5403 	smull	r5, r4, r0, r3
 8004404:	17db      	asrs	r3, r3, #31
 8004406:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 800440a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800440e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8004412:	fb80 2001 	smull	r2, r0, r0, r1
 8004416:	17c9      	asrs	r1, r1, #31
 8004418:	ebc1 00a0 	rsb	r0, r1, r0, asr #2
 800441c:	fb93 f1f0 	sdiv	r1, r3, r0
 8004420:	e7b9      	b.n	8004396 <parse_sentence+0x2b2>
        return f->value;
 8004422:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004424:	e7c3      	b.n	80043ae <parse_sentence+0x2ca>
        return (f->value + ((f->value > 0) - (f->value < 0)) * f->scale/new_scale/2) / (f->scale/new_scale);
 8004426:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004428:	0fc3      	lsrs	r3, r0, #31
 800442a:	2800      	cmp	r0, #0
 800442c:	bfd4      	ite	le
 800442e:	425b      	negle	r3, r3
 8004430:	f1c3 0301 	rsbgt	r3, r3, #1
 8004434:	fb03 f302 	mul.w	r3, r3, r2
 8004438:	4c89      	ldr	r4, [pc, #548]	; (8004660 <parse_sentence+0x57c>)
 800443a:	fb84 6503 	smull	r6, r5, r4, r3
 800443e:	17db      	asrs	r3, r3, #31
 8004440:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 8004444:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004448:	eb00 0363 	add.w	r3, r0, r3, asr #1
 800444c:	fb84 0402 	smull	r0, r4, r4, r2
 8004450:	17d2      	asrs	r2, r2, #31
 8004452:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
 8004456:	fb93 f2f4 	sdiv	r2, r3, r4
 800445a:	e7a8      	b.n	80043ae <parse_sentence+0x2ca>
        return f->value;
 800445c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800445e:	e7b2      	b.n	80043c6 <parse_sentence+0x2e2>
        return (f->value + ((f->value > 0) - (f->value < 0)) * f->scale/new_scale/2) / (f->scale/new_scale);
 8004460:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8004462:	0fe0      	lsrs	r0, r4, #31
 8004464:	2c00      	cmp	r4, #0
 8004466:	bfd4      	ite	le
 8004468:	4240      	negle	r0, r0
 800446a:	f1c0 0001 	rsbgt	r0, r0, #1
 800446e:	fb00 f003 	mul.w	r0, r0, r3
 8004472:	4d7b      	ldr	r5, [pc, #492]	; (8004660 <parse_sentence+0x57c>)
 8004474:	fb85 7600 	smull	r7, r6, r5, r0
 8004478:	17c0      	asrs	r0, r0, #31
 800447a:	ebc0 00a6 	rsb	r0, r0, r6, asr #2
 800447e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004482:	eb04 0060 	add.w	r0, r4, r0, asr #1
 8004486:	fb85 4503 	smull	r4, r5, r5, r3
 800448a:	17db      	asrs	r3, r3, #31
 800448c:	ebc3 05a5 	rsb	r5, r3, r5, asr #2
 8004490:	fb90 f3f5 	sdiv	r3, r0, r5
 8004494:	e797      	b.n	80043c6 <parse_sentence+0x2e2>
        return NAN;
 8004496:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004690 <parse_sentence+0x5ac>
					INDENT_SPACES "$xxGST fixed point latitude,longitude and altitude error deviation"
					" scaled to one decimal place: (%d,%d,%d)\n",
					minmea_rescale(&frame.latitude_error_deviation, 10),
					minmea_rescale(&frame.longitude_error_deviation, 10),
					minmea_rescale(&frame.altitude_error_deviation, 10));
			printf(
 800449a:	ee17 0a10 	vmov	r0, s14
 800449e:	f7fc f86b 	bl	8000578 <__aeabi_f2d>
 80044a2:	4604      	mov	r4, r0
 80044a4:	460d      	mov	r5, r1
    if (f->scale == 0)
 80044a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044a8:	b153      	cbz	r3, 80044c0 <parse_sentence+0x3dc>
    return (float) f->value / (float) f->scale;
 80044aa:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 80044ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044be:	e001      	b.n	80044c4 <parse_sentence+0x3e0>
        return NAN;
 80044c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004690 <parse_sentence+0x5ac>
 80044c4:	ee17 0a10 	vmov	r0, s14
 80044c8:	f7fc f856 	bl	8000578 <__aeabi_f2d>
 80044cc:	4606      	mov	r6, r0
 80044ce:	460f      	mov	r7, r1
    if (f->scale == 0)
 80044d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044d2:	b153      	cbz	r3, 80044ea <parse_sentence+0x406>
    return (float) f->value / (float) f->scale;
 80044d4:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80044d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044dc:	ee07 3a90 	vmov	s15, r3
 80044e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e8:	e001      	b.n	80044ee <parse_sentence+0x40a>
        return NAN;
 80044ea:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004690 <parse_sentence+0x5ac>
 80044ee:	ee17 0a10 	vmov	r0, s14
 80044f2:	f7fc f841 	bl	8000578 <__aeabi_f2d>
 80044f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044fa:	e9cd 6700 	strd	r6, r7, [sp]
 80044fe:	4622      	mov	r2, r4
 8004500:	462b      	mov	r3, r5
 8004502:	4858      	ldr	r0, [pc, #352]	; (8004664 <parse_sentence+0x580>)
 8004504:	f001 fc8c 	bl	8005e20 <iprintf>
 8004508:	e0ee      	b.n	80046e8 <parse_sentence+0x604>
					INDENT_SPACES "$xxGST floating point degree latitude, longitude and altitude error deviation: (%f,%f,%f)",
					minmea_tofloat(&frame.latitude_error_deviation),
					minmea_tofloat(&frame.longitude_error_deviation),
					minmea_tofloat(&frame.altitude_error_deviation));
		} else {
			printf(INDENT_SPACES "$xxGST sentence is not parsed\n");
 800450a:	4857      	ldr	r0, [pc, #348]	; (8004668 <parse_sentence+0x584>)
 800450c:	f001 fcfc 	bl	8005f08 <puts>
		}
	}
	break;
 8004510:	e0ea      	b.n	80046e8 <parse_sentence+0x604>

	case MINMEA_SENTENCE_GSV: {
		struct minmea_sentence_gsv frame;
		if (minmea_parse_gsv(&frame, line)) {
 8004512:	4950      	ldr	r1, [pc, #320]	; (8004654 <parse_sentence+0x570>)
 8004514:	a806      	add	r0, sp, #24
 8004516:	f7ff fb8b 	bl	8003c30 <minmea_parse_gsv>
 800451a:	b308      	cbz	r0, 8004560 <parse_sentence+0x47c>
			printf(INDENT_SPACES "$xxGSV: message %d of %d\n", frame.msg_nr,
 800451c:	9a06      	ldr	r2, [sp, #24]
 800451e:	9907      	ldr	r1, [sp, #28]
 8004520:	4852      	ldr	r0, [pc, #328]	; (800466c <parse_sentence+0x588>)
 8004522:	f001 fc7d 	bl	8005e20 <iprintf>
					frame.total_msgs);
			printf(INDENT_SPACES "$xxGSV: sattelites in view: %d\n",
 8004526:	9908      	ldr	r1, [sp, #32]
 8004528:	4851      	ldr	r0, [pc, #324]	; (8004670 <parse_sentence+0x58c>)
 800452a:	f001 fc79 	bl	8005e20 <iprintf>
					frame.total_sats);
			for (int i = 0; i < 4; i++)
 800452e:	2200      	movs	r2, #0
 8004530:	e013      	b.n	800455a <parse_sentence+0x476>
				printf(
 8004532:	1c54      	adds	r4, r2, #1
 8004534:	ab1a      	add	r3, sp, #104	; 0x68
 8004536:	eb03 1004 	add.w	r0, r3, r4, lsl #4
 800453a:	f850 3c4c 	ldr.w	r3, [r0, #-76]
 800453e:	a91a      	add	r1, sp, #104	; 0x68
 8004540:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8004544:	f851 2c40 	ldr.w	r2, [r1, #-64]
 8004548:	f851 1c44 	ldr.w	r1, [r1, #-68]
 800454c:	f850 0c48 	ldr.w	r0, [r0, #-72]
 8004550:	9000      	str	r0, [sp, #0]
 8004552:	4848      	ldr	r0, [pc, #288]	; (8004674 <parse_sentence+0x590>)
 8004554:	f001 fc64 	bl	8005e20 <iprintf>
			for (int i = 0; i < 4; i++)
 8004558:	4622      	mov	r2, r4
 800455a:	2a03      	cmp	r2, #3
 800455c:	dde9      	ble.n	8004532 <parse_sentence+0x44e>
 800455e:	e0c3      	b.n	80046e8 <parse_sentence+0x604>
						INDENT_SPACES "$xxGSV: sat nr %d, elevation: %d, azimuth: %d, snr: %d dbm\n",
						frame.sats[i].nr, frame.sats[i].elevation,
						frame.sats[i].azimuth, frame.sats[i].snr);
		} else {
			printf(INDENT_SPACES "$xxGSV sentence is not parsed\n");
 8004560:	4845      	ldr	r0, [pc, #276]	; (8004678 <parse_sentence+0x594>)
 8004562:	f001 fcd1 	bl	8005f08 <puts>
		}
	}
	break;
 8004566:	e0bf      	b.n	80046e8 <parse_sentence+0x604>

	case MINMEA_SENTENCE_VTG: {
		struct minmea_sentence_vtg frame;
		if (minmea_parse_vtg(&frame, line)) {
 8004568:	493a      	ldr	r1, [pc, #232]	; (8004654 <parse_sentence+0x570>)
 800456a:	a806      	add	r0, sp, #24
 800456c:	f7ff fbae 	bl	8003ccc <minmea_parse_vtg>
 8004570:	2800      	cmp	r0, #0
 8004572:	f000 8098 	beq.w	80046a6 <parse_sentence+0x5c2>
    if (f->scale == 0)
 8004576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004578:	2b00      	cmp	r3, #0
 800457a:	d065      	beq.n	8004648 <parse_sentence+0x564>
    return (float) f->value / (float) f->scale;
 800457c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8004580:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800458c:	ee86 7aa7 	vdiv.f32	s14, s13, s15

			GPS.Speed = minmea_tofloat(&frame.speed_kph);
 8004590:	4b3a      	ldr	r3, [pc, #232]	; (800467c <parse_sentence+0x598>)
 8004592:	ed83 7a04 	vstr	s14, [r3, #16]
    if (f->scale == 0)
 8004596:	9b07      	ldr	r3, [sp, #28]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d058      	beq.n	800464e <parse_sentence+0x56a>
    return (float) f->value / (float) f->scale;
 800459c:	eddd 7a06 	vldr	s15, [sp, #24]
 80045a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045a4:	ee07 3a90 	vmov	s15, r3
 80045a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15


			printf(INDENT_SPACES "$xxVTG: true track degrees = %f\n",
 80045b0:	ee17 0a10 	vmov	r0, s14
 80045b4:	f7fb ffe0 	bl	8000578 <__aeabi_f2d>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4830      	ldr	r0, [pc, #192]	; (8004680 <parse_sentence+0x59c>)
 80045be:	f001 fc2f 	bl	8005e20 <iprintf>
    if (f->scale == 0)
 80045c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d065      	beq.n	8004694 <parse_sentence+0x5b0>
    return (float) f->value / (float) f->scale;
 80045c8:	eddd 7a08 	vldr	s15, [sp, #32]
 80045cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					minmea_tofloat(&frame.true_track_degrees));
			printf(INDENT_SPACES "        magnetic track degrees = %f\n",
 80045dc:	ee17 0a10 	vmov	r0, s14
 80045e0:	f7fb ffca 	bl	8000578 <__aeabi_f2d>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4826      	ldr	r0, [pc, #152]	; (8004684 <parse_sentence+0x5a0>)
 80045ea:	f001 fc19 	bl	8005e20 <iprintf>
    if (f->scale == 0)
 80045ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d052      	beq.n	800469a <parse_sentence+0x5b6>
    return (float) f->value / (float) f->scale;
 80045f4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80045f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					minmea_tofloat(&frame.magnetic_track_degrees));
			printf(INDENT_SPACES "        speed knots = %f\n",
 8004608:	ee17 0a10 	vmov	r0, s14
 800460c:	f7fb ffb4 	bl	8000578 <__aeabi_f2d>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	481c      	ldr	r0, [pc, #112]	; (8004688 <parse_sentence+0x5a4>)
 8004616:	f001 fc03 	bl	8005e20 <iprintf>
    if (f->scale == 0)
 800461a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03f      	beq.n	80046a0 <parse_sentence+0x5bc>
    return (float) f->value / (float) f->scale;
 8004620:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8004624:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					minmea_tofloat(&frame.speed_knots));
			printf(INDENT_SPACES "        speed kph = %f\n",
 8004634:	ee17 0a10 	vmov	r0, s14
 8004638:	f7fb ff9e 	bl	8000578 <__aeabi_f2d>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4812      	ldr	r0, [pc, #72]	; (800468c <parse_sentence+0x5a8>)
 8004642:	f001 fbed 	bl	8005e20 <iprintf>
 8004646:	e04f      	b.n	80046e8 <parse_sentence+0x604>
        return NAN;
 8004648:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004690 <parse_sentence+0x5ac>
 800464c:	e7a0      	b.n	8004590 <parse_sentence+0x4ac>
 800464e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004690 <parse_sentence+0x5ac>
 8004652:	e7ad      	b.n	80045b0 <parse_sentence+0x4cc>
 8004654:	200003fc 	.word	0x200003fc
 8004658:	08009784 	.word	0x08009784
 800465c:	080097d8 	.word	0x080097d8
 8004660:	66666667 	.word	0x66666667
 8004664:	08009848 	.word	0x08009848
 8004668:	080098a4 	.word	0x080098a4
 800466c:	080098c4 	.word	0x080098c4
 8004670:	080098e0 	.word	0x080098e0
 8004674:	08009904 	.word	0x08009904
 8004678:	08009944 	.word	0x08009944
 800467c:	20000838 	.word	0x20000838
 8004680:	08009964 	.word	0x08009964
 8004684:	08009988 	.word	0x08009988
 8004688:	080099b0 	.word	0x080099b0
 800468c:	080099cc 	.word	0x080099cc
 8004690:	7fc00000 	.word	0x7fc00000
 8004694:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8004690 <parse_sentence+0x5ac>
 8004698:	e7a0      	b.n	80045dc <parse_sentence+0x4f8>
 800469a:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8004690 <parse_sentence+0x5ac>
 800469e:	e7b3      	b.n	8004608 <parse_sentence+0x524>
 80046a0:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8004690 <parse_sentence+0x5ac>
 80046a4:	e7c6      	b.n	8004634 <parse_sentence+0x550>
					minmea_tofloat(&frame.speed_kph));
		} else {
			printf(INDENT_SPACES "$xxVTG sentence is not parsed\n");
 80046a6:	4813      	ldr	r0, [pc, #76]	; (80046f4 <parse_sentence+0x610>)
 80046a8:	f001 fc2e 	bl	8005f08 <puts>
		}
	}
	break;
 80046ac:	e01c      	b.n	80046e8 <parse_sentence+0x604>

	case MINMEA_SENTENCE_ZDA: {
		struct minmea_sentence_zda frame;
		if (minmea_parse_zda(&frame, line)) {
 80046ae:	4912      	ldr	r1, [pc, #72]	; (80046f8 <parse_sentence+0x614>)
 80046b0:	a806      	add	r0, sp, #24
 80046b2:	f7ff fb59 	bl	8003d68 <minmea_parse_zda>
 80046b6:	b180      	cbz	r0, 80046da <parse_sentence+0x5f6>
			printf(
 80046b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046ba:	9304      	str	r3, [sp, #16]
 80046bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046be:	9303      	str	r3, [sp, #12]
 80046c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046c2:	9302      	str	r3, [sp, #8]
 80046c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	9b08      	ldr	r3, [sp, #32]
 80046ce:	9a07      	ldr	r2, [sp, #28]
 80046d0:	9906      	ldr	r1, [sp, #24]
 80046d2:	480a      	ldr	r0, [pc, #40]	; (80046fc <parse_sentence+0x618>)
 80046d4:	f001 fba4 	bl	8005e20 <iprintf>
 80046d8:	e006      	b.n	80046e8 <parse_sentence+0x604>
					INDENT_SPACES "$xxZDA: %d:%d:%d %02d.%02d.%d UTC%+03d:%02d\n",
					frame.time.hours, frame.time.minutes, frame.time.seconds,
					frame.date.day, frame.date.month, frame.date.year,
					frame.hour_offset, frame.minute_offset);
		} else {
			printf(INDENT_SPACES "$xxZDA sentence is not parsed\n");
 80046da:	4809      	ldr	r0, [pc, #36]	; (8004700 <parse_sentence+0x61c>)
 80046dc:	f001 fc14 	bl	8005f08 <puts>

		//		gps_hours = frame.time.hours;
		//		gps_minutes = frame.time.minutes;
		//		gps_seconds = frame.time.seconds;
	}
	break;
 80046e0:	e002      	b.n	80046e8 <parse_sentence+0x604>

	case MINMEA_INVALID: {
		printf(INDENT_SPACES "$xxxxx sentence is not valid\n");
 80046e2:	4808      	ldr	r0, [pc, #32]	; (8004704 <parse_sentence+0x620>)
 80046e4:	f001 fc10 	bl	8005f08 <puts>
	}
	break;
	}
	//}

}
 80046e8:	b01b      	add	sp, #108	; 0x6c
 80046ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf(INDENT_SPACES "$xxxxx sentence is not parsed\n");
 80046ec:	4806      	ldr	r0, [pc, #24]	; (8004708 <parse_sentence+0x624>)
 80046ee:	f001 fc0b 	bl	8005f08 <puts>
}
 80046f2:	e7f9      	b.n	80046e8 <parse_sentence+0x604>
 80046f4:	080099e8 	.word	0x080099e8
 80046f8:	200003fc 	.word	0x200003fc
 80046fc:	08009a08 	.word	0x08009a08
 8004700:	08009a38 	.word	0x08009a38
 8004704:	08009a58 	.word	0x08009a58
 8004708:	08009a78 	.word	0x08009a78

0800470c <GPS_parse>:
void GPS_parse() {
 800470c:	b538      	push	{r3, r4, r5, lr}
	for (int y = 0; y < 8; y++) {
 800470e:	2500      	movs	r5, #0
	uint16_t i = 0;
 8004710:	462c      	mov	r4, r5
	for (int y = 0; y < 8; y++) {
 8004712:	e021      	b.n	8004758 <GPS_parse+0x4c>
			line[z] = 0;
 8004714:	4a13      	ldr	r2, [pc, #76]	; (8004764 <GPS_parse+0x58>)
 8004716:	2100      	movs	r1, #0
 8004718:	54d1      	strb	r1, [r2, r3]
		for (int z = 0; z < MINMEA_MAX_LENGTH; z++) {
 800471a:	3301      	adds	r3, #1
 800471c:	2b4f      	cmp	r3, #79	; 0x4f
 800471e:	ddf9      	ble.n	8004714 <GPS_parse+0x8>
		if (GPS_RX_Buffer[i] == 0x24) {
 8004720:	4621      	mov	r1, r4
 8004722:	4b11      	ldr	r3, [pc, #68]	; (8004768 <GPS_parse+0x5c>)
 8004724:	5d1b      	ldrb	r3, [r3, r4]
 8004726:	2b24      	cmp	r3, #36	; 0x24
 8004728:	d003      	beq.n	8004732 <GPS_parse+0x26>
		for (int j = 0; j <= (i-last_i); j++) {
 800472a:	2300      	movs	r3, #0
 800472c:	e00c      	b.n	8004748 <GPS_parse+0x3c>
				i++;
 800472e:	3401      	adds	r4, #1
 8004730:	b2a4      	uxth	r4, r4
			while (GPS_RX_Buffer[i] != 0x0A) {
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <GPS_parse+0x5c>)
 8004734:	5d1b      	ldrb	r3, [r3, r4]
 8004736:	2b0a      	cmp	r3, #10
 8004738:	d1f9      	bne.n	800472e <GPS_parse+0x22>
 800473a:	e7f6      	b.n	800472a <GPS_parse+0x1e>
			line[j] = GPS_RX_Buffer[j+last_i];
 800473c:	18ca      	adds	r2, r1, r3
 800473e:	480a      	ldr	r0, [pc, #40]	; (8004768 <GPS_parse+0x5c>)
 8004740:	5c80      	ldrb	r0, [r0, r2]
 8004742:	4a08      	ldr	r2, [pc, #32]	; (8004764 <GPS_parse+0x58>)
 8004744:	54d0      	strb	r0, [r2, r3]
		for (int j = 0; j <= (i-last_i); j++) {
 8004746:	3301      	adds	r3, #1
 8004748:	1a62      	subs	r2, r4, r1
 800474a:	429a      	cmp	r2, r3
 800474c:	daf6      	bge.n	800473c <GPS_parse+0x30>
		parse_sentence();
 800474e:	f7ff fcc9 	bl	80040e4 <parse_sentence>
		i++;
 8004752:	3401      	adds	r4, #1
 8004754:	b2a4      	uxth	r4, r4
	for (int y = 0; y < 8; y++) {
 8004756:	3501      	adds	r5, #1
 8004758:	2d07      	cmp	r5, #7
 800475a:	dc01      	bgt.n	8004760 <GPS_parse+0x54>
		for (int z = 0; z < MINMEA_MAX_LENGTH; z++) {
 800475c:	2300      	movs	r3, #0
 800475e:	e7dd      	b.n	800471c <GPS_parse+0x10>
}
 8004760:	bd38      	pop	{r3, r4, r5, pc}
 8004762:	bf00      	nop
 8004764:	200003fc 	.word	0x200003fc
 8004768:	20000450 	.word	0x20000450

0800476c <UART_timeout>:
void UART_timeout() {
 800476c:	b508      	push	{r3, lr}
	if (first) {
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <UART_timeout+0x34>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	b123      	cbz	r3, 800477e <UART_timeout+0x12>
		first = 0;
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <UART_timeout+0x34>)
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]
void UART_timeout() {
 800477a:	2300      	movs	r3, #0
 800477c:	e006      	b.n	800478c <UART_timeout+0x20>
		GPS_parse();
 800477e:	f7ff ffc5 	bl	800470c <GPS_parse>
 8004782:	e7fa      	b.n	800477a <UART_timeout+0xe>
		GPS_RX_Buffer[i] = 0;
 8004784:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <UART_timeout+0x38>)
 8004786:	2100      	movs	r1, #0
 8004788:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < GPS_BUFFERSIZE; ++i) {
 800478a:	3301      	adds	r3, #1
 800478c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004790:	dbf8      	blt.n	8004784 <UART_timeout+0x18>
	HAL_UART_Receive_DMA(&huart6, GPS_RX_Buffer, GPS_BUFFERSIZE);
 8004792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004796:	4903      	ldr	r1, [pc, #12]	; (80047a4 <UART_timeout+0x38>)
 8004798:	4803      	ldr	r0, [pc, #12]	; (80047a8 <UART_timeout+0x3c>)
 800479a:	f7fe fbab 	bl	8002ef4 <HAL_UART_Receive_DMA>
}
 800479e:	bd08      	pop	{r3, pc}
 80047a0:	20000031 	.word	0x20000031
 80047a4:	20000450 	.word	0x20000450
 80047a8:	200009c8 	.word	0x200009c8

080047ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80047ac:	b530      	push	{r4, r5, lr}
 80047ae:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047b0:	2230      	movs	r2, #48	; 0x30
 80047b2:	2100      	movs	r1, #0
 80047b4:	a808      	add	r0, sp, #32
 80047b6:	f000 fcec 	bl	8005192 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047ba:	2400      	movs	r4, #0
 80047bc:	9403      	str	r4, [sp, #12]
 80047be:	9404      	str	r4, [sp, #16]
 80047c0:	9405      	str	r4, [sp, #20]
 80047c2:	9406      	str	r4, [sp, #24]
 80047c4:	9407      	str	r4, [sp, #28]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	9401      	str	r4, [sp, #4]
 80047c8:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <SystemClock_Config+0x88>)
 80047ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047dc:	9402      	str	r4, [sp, #8]
 80047de:	4b16      	ldr	r3, [pc, #88]	; (8004838 <SystemClock_Config+0x8c>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047ee:	9302      	str	r3, [sp, #8]
 80047f0:	9b02      	ldr	r3, [sp, #8]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047f2:	2502      	movs	r5, #2
 80047f4:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047f6:	2301      	movs	r3, #1
 80047f8:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047fa:	2310      	movs	r3, #16
 80047fc:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047fe:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004800:	940f      	str	r4, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004802:	2308      	movs	r3, #8
 8004804:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8004806:	2364      	movs	r3, #100	; 0x64
 8004808:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800480a:	9512      	str	r5, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800480c:	2304      	movs	r3, #4
 800480e:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004810:	a808      	add	r0, sp, #32
 8004812:	f7fd fb27 	bl	8001e64 <HAL_RCC_OscConfig>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004816:	230f      	movs	r3, #15
 8004818:	9303      	str	r3, [sp, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800481a:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800481c:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800481e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004822:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004824:	9407      	str	r4, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004826:	2103      	movs	r1, #3
 8004828:	a803      	add	r0, sp, #12
 800482a:	f7fd fd53 	bl	80022d4 <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
}
 800482e:	b015      	add	sp, #84	; 0x54
 8004830:	bd30      	pop	{r4, r5, pc}
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800
 8004838:	40007000 	.word	0x40007000

0800483c <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 800483c:	4b01      	ldr	r3, [pc, #4]	; (8004844 <PWM1_Set+0x8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6358      	str	r0, [r3, #52]	; 0x34
}
 8004842:	4770      	bx	lr
 8004844:	200008e8 	.word	0x200008e8

08004848 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8004848:	4b01      	ldr	r3, [pc, #4]	; (8004850 <PWM2_Set+0x8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6398      	str	r0, [r3, #56]	; 0x38

}
 800484e:	4770      	bx	lr
 8004850:	200008e8 	.word	0x200008e8

08004854 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8004854:	4b01      	ldr	r3, [pc, #4]	; (800485c <PWM3_Set+0x8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 800485a:	4770      	bx	lr
 800485c:	200008e8 	.word	0x200008e8

08004860 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8004860:	4b01      	ldr	r3, [pc, #4]	; (8004868 <PWM4_Set+0x8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6418      	str	r0, [r3, #64]	; 0x40
}
 8004866:	4770      	bx	lr
 8004868:	200008e8 	.word	0x200008e8

0800486c <main>:
{
 800486c:	b508      	push	{r3, lr}
	HAL_Init();
 800486e:	f7fc fd1d 	bl	80012ac <HAL_Init>
	SystemClock_Config();
 8004872:	f7ff ff9b 	bl	80047ac <SystemClock_Config>
	MX_GPIO_Init();
 8004876:	f7ff faf3 	bl	8003e60 <MX_GPIO_Init>
	MX_DMA_Init();
 800487a:	f7ff fad7 	bl	8003e2c <MX_DMA_Init>
	MX_I2C2_Init();
 800487e:	f7ff fbaf 	bl	8003fe0 <MX_I2C2_Init>
	MX_TIM4_Init();
 8004882:	f000 fb07 	bl	8004e94 <MX_TIM4_Init>
	MX_SPI2_Init();
 8004886:	f000 f921 	bl	8004acc <MX_SPI2_Init>
	MX_CRC_Init();
 800488a:	f7ff faa7 	bl	8003ddc <MX_CRC_Init>
	MX_TIM11_Init();
 800488e:	f000 fa8d 	bl	8004dac <MX_TIM11_Init>
	MX_USART6_UART_Init();
 8004892:	f000 fb5d 	bl	8004f50 <MX_USART6_UART_Init>
	GPS_init();
 8004896:	f7ff fc0f 	bl	80040b8 <GPS_init>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800489a:	4c12      	ldr	r4, [pc, #72]	; (80048e4 <main+0x78>)
 800489c:	2100      	movs	r1, #0
 800489e:	4620      	mov	r0, r4
 80048a0:	f7fe f8d0 	bl	8002a44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80048a4:	2104      	movs	r1, #4
 80048a6:	4620      	mov	r0, r4
 80048a8:	f7fe f8cc 	bl	8002a44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80048ac:	2108      	movs	r1, #8
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7fe f8c8 	bl	8002a44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80048b4:	210c      	movs	r1, #12
 80048b6:	4620      	mov	r0, r4
 80048b8:	f7fe f8c4 	bl	8002a44 <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 80048bc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80048c0:	f7ff ffbc 	bl	800483c <PWM1_Set>
	PWM2_Set(2500);
 80048c4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80048c8:	f7ff ffbe 	bl	8004848 <PWM2_Set>
	PWM3_Set(2500);
 80048cc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80048d0:	f7ff ffc0 	bl	8004854 <PWM3_Set>
	PWM4_Set(2500);
 80048d4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80048d8:	f7ff ffc2 	bl	8004860 <PWM4_Set>
		main_loop = 1;
 80048dc:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <main+0x7c>)
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	e7fb      	b.n	80048dc <main+0x70>
 80048e4:	200008e8 	.word	0x200008e8
 80048e8:	2000025c 	.word	0x2000025c

080048ec <pulse_posedge_handler>:
 * (1 CW)     (3 CCW)
 *
 * This function gets called by the GPIO_EXTI callback when the PWM_RE_INT_Pin triggers an interrupt,
 * which is on the rising edge of every PWM pulse.
 */
void pulse_posedge_handler() {
 80048ec:	b538      	push	{r3, r4, r5, lr}

	//Only want this to happen in main loop - not during init sequence
	if (main_loop) {
 80048ee:	4b59      	ldr	r3, [pc, #356]	; (8004a54 <pulse_posedge_handler+0x168>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 809e 	beq.w	8004a34 <pulse_posedge_handler+0x148>
		//		if (imu_yaw < 0 && !done) {
		//			imu_yaw += 180.0f;
		//			done = 1;
		//		}
#endif
		if (airmode) {
 80048f8:	4b57      	ldr	r3, [pc, #348]	; (8004a58 <pulse_posedge_handler+0x16c>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 809a 	beq.w	8004a36 <pulse_posedge_handler+0x14a>
			/*******    Pitch PID calculation  ********/
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, 0);
 8004902:	eddf 0a56 	vldr	s1, [pc, #344]	; 8004a5c <pulse_posedge_handler+0x170>
 8004906:	2000      	movs	r0, #0
 8004908:	4b55      	ldr	r3, [pc, #340]	; (8004a60 <pulse_posedge_handler+0x174>)
 800490a:	ed93 0a00 	vldr	s0, [r3]
 800490e:	f7fc fbd1 	bl	80010b4 <pid_calculate_pitch>
 8004912:	4b54      	ldr	r3, [pc, #336]	; (8004a64 <pulse_posedge_handler+0x178>)
 8004914:	ed83 0a00 	vstr	s0, [r3]

			/*******    Roll PID calculation  ********/

			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 8004918:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <pulse_posedge_handler+0x17c>)
 800491a:	edd3 0a00 	vldr	s1, [r3]
 800491e:	2000      	movs	r0, #0
 8004920:	4b52      	ldr	r3, [pc, #328]	; (8004a6c <pulse_posedge_handler+0x180>)
 8004922:	ed93 0a00 	vldr	s0, [r3]
 8004926:	f7fc fb47 	bl	8000fb8 <pid_calculate_roll>
 800492a:	4b51      	ldr	r3, [pc, #324]	; (8004a70 <pulse_posedge_handler+0x184>)
 800492c:	ed83 0a00 	vstr	s0, [r3]

			/*******    Yaw PID calculation  ********/

			pid_output_yaw = pid_calculate_yaw(imu_yaw, 0, yaw_setpoint);
 8004930:	4b50      	ldr	r3, [pc, #320]	; (8004a74 <pulse_posedge_handler+0x188>)
 8004932:	edd3 0a00 	vldr	s1, [r3]
 8004936:	2000      	movs	r0, #0
 8004938:	4b4f      	ldr	r3, [pc, #316]	; (8004a78 <pulse_posedge_handler+0x18c>)
 800493a:	ed93 0a00 	vldr	s0, [r3]
 800493e:	f7fc fc37 	bl	80011b0 <pid_calculate_yaw>
 8004942:	4b4e      	ldr	r3, [pc, #312]	; (8004a7c <pulse_posedge_handler+0x190>)
 8004944:	ed83 0a00 	vstr	s0, [r3]
			printToPC();
		}
#endif

		//Calculate new pulse width values
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 8004948:	4b4d      	ldr	r3, [pc, #308]	; (8004a80 <pulse_posedge_handler+0x194>)
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	4b48      	ldr	r3, [pc, #288]	; (8004a70 <pulse_posedge_handler+0x184>)
 800494e:	edd3 7a00 	vldr	s15, [r3]
 8004952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004956:	ee17 1a90 	vmov	r1, s15
 800495a:	1a42      	subs	r2, r0, r1
 800495c:	4b41      	ldr	r3, [pc, #260]	; (8004a64 <pulse_posedge_handler+0x178>)
 800495e:	edd3 7a00 	vldr	s15, [r3]
 8004962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004966:	ee17 3a90 	vmov	r3, s15
 800496a:	1ad4      	subs	r4, r2, r3
 800496c:	4d45      	ldr	r5, [pc, #276]	; (8004a84 <pulse_posedge_handler+0x198>)
 800496e:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 8004970:	441a      	add	r2, r3
 8004972:	4d45      	ldr	r5, [pc, #276]	; (8004a88 <pulse_posedge_handler+0x19c>)
 8004974:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 8004976:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 8004978:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 800497a:	4d44      	ldr	r5, [pc, #272]	; (8004a8c <pulse_posedge_handler+0x1a0>)
 800497c:	6028      	str	r0, [r5, #0]
		esc4_total = (throttle) + (int) pid_output_roll
				+ (int) pid_output_pitch;
 800497e:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 8004980:	4943      	ldr	r1, [pc, #268]	; (8004a90 <pulse_posedge_handler+0x1a4>)
 8004982:	600b      	str	r3, [r1, #0]

		//Clip PWM values to make sure they don't go outside of range
		if (esc1_total < ESC_MIN) {
 8004984:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8004988:	428c      	cmp	r4, r1
 800498a:	dc03      	bgt.n	8004994 <pulse_posedge_handler+0xa8>
			esc1_total = ESC_MIN;
 800498c:	493d      	ldr	r1, [pc, #244]	; (8004a84 <pulse_posedge_handler+0x198>)
 800498e:	f240 44e2 	movw	r4, #1250	; 0x4e2
 8004992:	600c      	str	r4, [r1, #0]
		}
		if (esc1_total > ESC_MAX) {
 8004994:	493b      	ldr	r1, [pc, #236]	; (8004a84 <pulse_posedge_handler+0x198>)
 8004996:	680c      	ldr	r4, [r1, #0]
 8004998:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800499c:	428c      	cmp	r4, r1
 800499e:	dd03      	ble.n	80049a8 <pulse_posedge_handler+0xbc>
			esc1_total = ESC_MAX;
 80049a0:	4938      	ldr	r1, [pc, #224]	; (8004a84 <pulse_posedge_handler+0x198>)
 80049a2:	f640 14c4 	movw	r4, #2500	; 0x9c4
 80049a6:	600c      	str	r4, [r1, #0]
		}
		if (esc2_total < ESC_MIN) {
 80049a8:	f240 41e1 	movw	r1, #1249	; 0x4e1
 80049ac:	428a      	cmp	r2, r1
 80049ae:	dc03      	bgt.n	80049b8 <pulse_posedge_handler+0xcc>
			esc2_total = ESC_MIN;
 80049b0:	4a35      	ldr	r2, [pc, #212]	; (8004a88 <pulse_posedge_handler+0x19c>)
 80049b2:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80049b6:	6011      	str	r1, [r2, #0]
		}
		if (esc2_total > ESC_MAX) {
 80049b8:	4a33      	ldr	r2, [pc, #204]	; (8004a88 <pulse_posedge_handler+0x19c>)
 80049ba:	6811      	ldr	r1, [r2, #0]
 80049bc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80049c0:	4291      	cmp	r1, r2
 80049c2:	dd03      	ble.n	80049cc <pulse_posedge_handler+0xe0>
			esc2_total = ESC_MAX;
 80049c4:	4a30      	ldr	r2, [pc, #192]	; (8004a88 <pulse_posedge_handler+0x19c>)
 80049c6:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80049ca:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total < ESC_MIN) {
 80049cc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80049d0:	4290      	cmp	r0, r2
 80049d2:	dc03      	bgt.n	80049dc <pulse_posedge_handler+0xf0>
			esc3_total = ESC_MIN;
 80049d4:	4a2d      	ldr	r2, [pc, #180]	; (8004a8c <pulse_posedge_handler+0x1a0>)
 80049d6:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80049da:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total > ESC_MAX) {
 80049dc:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <pulse_posedge_handler+0x1a0>)
 80049de:	6811      	ldr	r1, [r2, #0]
 80049e0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80049e4:	4291      	cmp	r1, r2
 80049e6:	dd03      	ble.n	80049f0 <pulse_posedge_handler+0x104>
			esc3_total = ESC_MAX;
 80049e8:	4a28      	ldr	r2, [pc, #160]	; (8004a8c <pulse_posedge_handler+0x1a0>)
 80049ea:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80049ee:	6011      	str	r1, [r2, #0]
		}
		if (esc4_total < ESC_MIN) {
 80049f0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80049f4:	4293      	cmp	r3, r2
 80049f6:	dc03      	bgt.n	8004a00 <pulse_posedge_handler+0x114>
			esc4_total = ESC_MIN;
 80049f8:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <pulse_posedge_handler+0x1a4>)
 80049fa:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80049fe:	601a      	str	r2, [r3, #0]
		}
		if (esc4_total > ESC_MAX) {
 8004a00:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <pulse_posedge_handler+0x1a4>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	dd03      	ble.n	8004a14 <pulse_posedge_handler+0x128>
			esc4_total = ESC_MAX;
 8004a0c:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <pulse_posedge_handler+0x1a4>)
 8004a0e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004a12:	601a      	str	r2, [r3, #0]
		}
#if MOTORS
		//Load new pulse widths into ESCs
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <pulse_posedge_handler+0x198>)
 8004a16:	8818      	ldrh	r0, [r3, #0]
 8004a18:	f7ff ff10 	bl	800483c <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <pulse_posedge_handler+0x19c>)
 8004a1e:	8818      	ldrh	r0, [r3, #0]
 8004a20:	f7ff ff12 	bl	8004848 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8004a24:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <pulse_posedge_handler+0x1a0>)
 8004a26:	8818      	ldrh	r0, [r3, #0]
 8004a28:	f7ff ff14 	bl	8004854 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8004a2c:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <pulse_posedge_handler+0x1a4>)
 8004a2e:	8818      	ldrh	r0, [r3, #0]
 8004a30:	f7ff ff16 	bl	8004860 <PWM4_Set>

#endif

	}

}
 8004a34:	bd38      	pop	{r3, r4, r5, pc}
			pid_output_roll = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	4a0d      	ldr	r2, [pc, #52]	; (8004a70 <pulse_posedge_handler+0x184>)
 8004a3a:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 8004a3c:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <pulse_posedge_handler+0x178>)
 8004a3e:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 8004a40:	4a0e      	ldr	r2, [pc, #56]	; (8004a7c <pulse_posedge_handler+0x190>)
 8004a42:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8004a44:	f7fc fb24 	bl	8001090 <reset_pid_roll>
			reset_pid_pitch();
 8004a48:	f7fc fba0 	bl	800118c <reset_pid_pitch>
			reset_pid_yaw();
 8004a4c:	f7fc fc1c 	bl	8001288 <reset_pid_yaw>
 8004a50:	e77a      	b.n	8004948 <pulse_posedge_handler+0x5c>
 8004a52:	bf00      	nop
 8004a54:	2000025c 	.word	0x2000025c
 8004a58:	20000248 	.word	0x20000248
 8004a5c:	00000000 	.word	0x00000000
 8004a60:	20000880 	.word	0x20000880
 8004a64:	20000260 	.word	0x20000260
 8004a68:	2000026c 	.word	0x2000026c
 8004a6c:	2000087c 	.word	0x2000087c
 8004a70:	20000264 	.word	0x20000264
 8004a74:	20000274 	.word	0x20000274
 8004a78:	200003f4 	.word	0x200003f4
 8004a7c:	20000268 	.word	0x20000268
 8004a80:	20000270 	.word	0x20000270
 8004a84:	2000024c 	.word	0x2000024c
 8004a88:	20000250 	.word	0x20000250
 8004a8c:	20000254 	.word	0x20000254
 8004a90:	20000258 	.word	0x20000258

08004a94 <HAL_GPIO_EXTI_Callback>:

////GPIO interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	//GPIO pin configured to capture rising edge interrupt of PWM signals
	if (GPIO_Pin == PWM_INT_Pin && main_loop) {
 8004a94:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004a98:	d000      	beq.n	8004a9c <HAL_GPIO_EXTI_Callback+0x8>
 8004a9a:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004a9c:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_INT_Pin && main_loop) {
 8004a9e:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_GPIO_EXTI_Callback+0x18>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b903      	cbnz	r3, 8004aa6 <HAL_GPIO_EXTI_Callback+0x12>

	//	if (GPIO_Pin == kill_Pin && main_loop) {
	//		//kill();
	//	}

}
 8004aa4:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 8004aa6:	f7ff ff21 	bl	80048ec <pulse_posedge_handler>
}
 8004aaa:	e7fb      	b.n	8004aa4 <HAL_GPIO_EXTI_Callback+0x10>
 8004aac:	2000025c 	.word	0x2000025c

08004ab0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8004ab2:	6802      	ldr	r2, [r0, #0]
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d000      	beq.n	8004abc <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8004aba:	bd08      	pop	{r3, pc}
		HAL_IncTick();
 8004abc:	f7fc fc10 	bl	80012e0 <HAL_IncTick>
}
 8004ac0:	e7fb      	b.n	8004aba <HAL_TIM_PeriodElapsedCallback+0xa>
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000

08004ac8 <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004ac8:	4770      	bx	lr
	...

08004acc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004acc:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8004ace:	480e      	ldr	r0, [pc, #56]	; (8004b08 <MX_SPI2_Init+0x3c>)
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <MX_SPI2_Init+0x40>)
 8004ad2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004ad4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004ad8:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004ada:	2300      	movs	r3, #0
 8004adc:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ade:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ae0:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ae2:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004aea:	2220      	movs	r2, #32
 8004aec:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004aee:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004af0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004af4:	230a      	movs	r3, #10
 8004af6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004af8:	f7fd fcdc 	bl	80024b4 <HAL_SPI_Init>
 8004afc:	b900      	cbnz	r0, 8004b00 <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 8004afe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004b00:	f7ff ffe2 	bl	8004ac8 <Error_Handler>
}
 8004b04:	e7fb      	b.n	8004afe <MX_SPI2_Init+0x32>
 8004b06:	bf00      	nop
 8004b08:	2000034c 	.word	0x2000034c
 8004b0c:	40003800 	.word	0x40003800

08004b10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b12:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b14:	2300      	movs	r3, #0
 8004b16:	9303      	str	r3, [sp, #12]
 8004b18:	9304      	str	r3, [sp, #16]
 8004b1a:	9305      	str	r3, [sp, #20]
 8004b1c:	9306      	str	r3, [sp, #24]
 8004b1e:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8004b20:	6802      	ldr	r2, [r0, #0]
 8004b22:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <HAL_SPI_MspInit+0x90>)
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d001      	beq.n	8004b2c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004b28:	b009      	add	sp, #36	; 0x24
 8004b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b2c:	2400      	movs	r4, #0
 8004b2e:	9400      	str	r4, [sp, #0]
 8004b30:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004b42:	9200      	str	r2, [sp, #0]
 8004b44:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b46:	9401      	str	r4, [sp, #4]
 8004b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4a:	f042 0204 	orr.w	r2, r2, #4
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b52:	f002 0204 	and.w	r2, r2, #4
 8004b56:	9201      	str	r2, [sp, #4]
 8004b58:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b5a:	9402      	str	r4, [sp, #8]
 8004b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5e:	f042 0202 	orr.w	r2, r2, #2
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	9302      	str	r3, [sp, #8]
 8004b6c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b6e:	2304      	movs	r3, #4
 8004b70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b72:	2702      	movs	r7, #2
 8004b74:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b76:	2603      	movs	r6, #3
 8004b78:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b7a:	2505      	movs	r5, #5
 8004b7c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b7e:	a903      	add	r1, sp, #12
 8004b80:	4808      	ldr	r0, [pc, #32]	; (8004ba4 <HAL_SPI_MspInit+0x94>)
 8004b82:	f7fc ffb9 	bl	8001af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004b86:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004b8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b90:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b92:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b94:	a903      	add	r1, sp, #12
 8004b96:	4804      	ldr	r0, [pc, #16]	; (8004ba8 <HAL_SPI_MspInit+0x98>)
 8004b98:	f7fc ffae 	bl	8001af8 <HAL_GPIO_Init>
}
 8004b9c:	e7c4      	b.n	8004b28 <HAL_SPI_MspInit+0x18>
 8004b9e:	bf00      	nop
 8004ba0:	40003800 	.word	0x40003800
 8004ba4:	40020800 	.word	0x40020800
 8004ba8:	40020400 	.word	0x40020400

08004bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bac:	b510      	push	{r4, lr}
 8004bae:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bb0:	2400      	movs	r4, #0
 8004bb2:	9400      	str	r4, [sp, #0]
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <HAL_MspInit+0x54>)
 8004bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
 8004bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004bc4:	9200      	str	r2, [sp, #0]
 8004bc6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bc8:	9401      	str	r4, [sp, #4]
 8004bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 2, 0);
 8004bdc:	4622      	mov	r2, r4
 8004bde:	2102      	movs	r1, #2
 8004be0:	2004      	movs	r0, #4
 8004be2:	f7fc fba1 	bl	8001328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8004be6:	2004      	movs	r0, #4
 8004be8:	f7fc fbd2 	bl	8001390 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 2, 0);
 8004bec:	4622      	mov	r2, r4
 8004bee:	2102      	movs	r1, #2
 8004bf0:	2005      	movs	r0, #5
 8004bf2:	f7fc fb99 	bl	8001328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004bf6:	2005      	movs	r0, #5
 8004bf8:	f7fc fbca 	bl	8001390 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bfc:	b002      	add	sp, #8
 8004bfe:	bd10      	pop	{r4, pc}
 8004c00:	40023800 	.word	0x40023800

08004c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c04:	b510      	push	{r4, lr}
 8004c06:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	2019      	movs	r0, #25
 8004c0e:	f7fc fb8b 	bl	8001328 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8004c12:	2019      	movs	r0, #25
 8004c14:	f7fc fbbc 	bl	8001390 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004c18:	2400      	movs	r4, #0
 8004c1a:	9401      	str	r4, [sp, #4]
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_InitTick+0x68>)
 8004c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c20:	f042 0201 	orr.w	r2, r2, #1
 8004c24:	645a      	str	r2, [r3, #68]	; 0x44
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c30:	a902      	add	r1, sp, #8
 8004c32:	a803      	add	r0, sp, #12
 8004c34:	f7fd fc20 	bl	8002478 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004c38:	f7fd fc0e 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <HAL_InitTick+0x6c>)
 8004c3e:	fba3 2300 	umull	r2, r3, r3, r0
 8004c42:	0c9b      	lsrs	r3, r3, #18
 8004c44:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004c46:	480b      	ldr	r0, [pc, #44]	; (8004c74 <HAL_InitTick+0x70>)
 8004c48:	4a0b      	ldr	r2, [pc, #44]	; (8004c78 <HAL_InitTick+0x74>)
 8004c4a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004c4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c50:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004c52:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8004c54:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c56:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004c58:	f7fd fe10 	bl	800287c <HAL_TIM_Base_Init>
 8004c5c:	b110      	cbz	r0, 8004c64 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004c5e:	2001      	movs	r0, #1
}
 8004c60:	b008      	add	sp, #32
 8004c62:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8004c64:	4803      	ldr	r0, [pc, #12]	; (8004c74 <HAL_InitTick+0x70>)
 8004c66:	f7fd fce9 	bl	800263c <HAL_TIM_Base_Start_IT>
 8004c6a:	e7f9      	b.n	8004c60 <HAL_InitTick+0x5c>
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	431bde83 	.word	0x431bde83
 8004c74:	200008a8 	.word	0x200008a8
 8004c78:	40010000 	.word	0x40010000

08004c7c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c7c:	4770      	bx	lr

08004c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c7e:	e7fe      	b.n	8004c7e <HardFault_Handler>

08004c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c80:	e7fe      	b.n	8004c80 <MemManage_Handler>

08004c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c82:	e7fe      	b.n	8004c82 <BusFault_Handler>

08004c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c84:	e7fe      	b.n	8004c84 <UsageFault_Handler>

08004c86 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c86:	4770      	bx	lr

08004c88 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c88:	4770      	bx	lr

08004c8a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c8a:	4770      	bx	lr

08004c8c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8004c8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8004c8e:	f7fc fe5d 	bl	800194c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8004c92:	bd08      	pop	{r3, pc}

08004c94 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004c94:	4770      	bx	lr

08004c96 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004c96:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004c98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004c9c:	f7fd f804 	bl	8001ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004ca0:	bd08      	pop	{r3, pc}
	...

08004ca4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004ca4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ca6:	4802      	ldr	r0, [pc, #8]	; (8004cb0 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8004ca8:	f7fd fcdd 	bl	8002666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004cac:	bd08      	pop	{r3, pc}
 8004cae:	bf00      	nop
 8004cb0:	200008a8 	.word	0x200008a8

08004cb4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004cb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004cb6:	4802      	ldr	r0, [pc, #8]	; (8004cc0 <DMA2_Stream1_IRQHandler+0xc>)
 8004cb8:	f7fc fd04 	bl	80016c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004cbc:	bd08      	pop	{r3, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000968 	.word	0x20000968

08004cc4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004cc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004cc6:	4802      	ldr	r0, [pc, #8]	; (8004cd0 <USART6_IRQHandler+0xc>)
 8004cc8:	f7fe fa20 	bl	800310c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004ccc:	bd08      	pop	{r3, pc}
 8004cce:	bf00      	nop
 8004cd0:	200009c8 	.word	0x200009c8

08004cd4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	460d      	mov	r5, r1
 8004cd8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cda:	2400      	movs	r4, #0
 8004cdc:	e004      	b.n	8004ce8 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8004cde:	f3af 8000 	nop.w
 8004ce2:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce4:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8004ce6:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce8:	42b4      	cmp	r4, r6
 8004cea:	dbf8      	blt.n	8004cde <_read+0xa>
	}

return len;
}
 8004cec:	4630      	mov	r0, r6
 8004cee:	bd70      	pop	{r4, r5, r6, pc}

08004cf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cf4:	2400      	movs	r4, #0
 8004cf6:	e005      	b.n	8004d04 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8004cf8:	1c4d      	adds	r5, r1, #1
 8004cfa:	7808      	ldrb	r0, [r1, #0]
 8004cfc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d00:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8004d02:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d04:	42b4      	cmp	r4, r6
 8004d06:	dbf7      	blt.n	8004cf8 <_write+0x8>
	}
	return len;
}
 8004d08:	4630      	mov	r0, r6
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}

08004d0c <_close>:

int _close(int file)
{
	return -1;
}
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d10:	4770      	bx	lr

08004d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d16:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004d18:	2000      	movs	r0, #0
 8004d1a:	4770      	bx	lr

08004d1c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	4770      	bx	lr

08004d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004d20:	2000      	movs	r0, #0
 8004d22:	4770      	bx	lr

08004d24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004d24:	b508      	push	{r3, lr}
 8004d26:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004d28:	4a0b      	ldr	r2, [pc, #44]	; (8004d58 <_sbrk+0x34>)
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	b142      	cbz	r2, 8004d40 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8004d2e:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <_sbrk+0x34>)
 8004d30:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004d32:	4403      	add	r3, r0
 8004d34:	466a      	mov	r2, sp
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d806      	bhi.n	8004d48 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004d3a:	4a07      	ldr	r2, [pc, #28]	; (8004d58 <_sbrk+0x34>)
 8004d3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004d3e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004d40:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <_sbrk+0x34>)
 8004d42:	4906      	ldr	r1, [pc, #24]	; (8004d5c <_sbrk+0x38>)
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	e7f2      	b.n	8004d2e <_sbrk+0xa>
		errno = ENOMEM;
 8004d48:	f000 f9ca 	bl	80050e0 <__errno>
 8004d4c:	230c      	movs	r3, #12
 8004d4e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d54:	e7f3      	b.n	8004d3e <_sbrk+0x1a>
 8004d56:	bf00      	nop
 8004d58:	20000278 	.word	0x20000278
 8004d5c:	20000a10 	.word	0x20000a10

08004d60 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d60:	490f      	ldr	r1, [pc, #60]	; (8004da0 <SystemInit+0x40>)
 8004d62:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <SystemInit+0x44>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d78:	2000      	movs	r0, #0
 8004d7a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004d82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d86:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004d88:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <SystemInit+0x48>)
 8004d8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d92:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004d94:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d9a:	608b      	str	r3, [r1, #8]
#endif
}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	e000ed00 	.word	0xe000ed00
 8004da4:	40023800 	.word	0x40023800
 8004da8:	24003010 	.word	0x24003010

08004dac <MX_TIM11_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004dac:	b508      	push	{r3, lr}

  htim11.Instance = TIM11;
 8004dae:	4809      	ldr	r0, [pc, #36]	; (8004dd4 <MX_TIM11_Init+0x28>)
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <MX_TIM11_Init+0x2c>)
 8004db2:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100;
 8004db4:	2364      	movs	r3, #100	; 0x64
 8004db6:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004db8:	2300      	movs	r3, #0
 8004dba:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 8004dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dc0:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dc2:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dc4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004dc6:	f7fd fd59 	bl	800287c <HAL_TIM_Base_Init>
 8004dca:	b900      	cbnz	r0, 8004dce <MX_TIM11_Init+0x22>
  {
    Error_Handler();
  }

}
 8004dcc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004dce:	f7ff fe7b 	bl	8004ac8 <Error_Handler>
}
 8004dd2:	e7fb      	b.n	8004dcc <MX_TIM11_Init+0x20>
 8004dd4:	20000928 	.word	0x20000928
 8004dd8:	40014800 	.word	0x40014800

08004ddc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 8004ddc:	6802      	ldr	r2, [r0, #0]
 8004dde:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <HAL_TIM_PWM_MspInit+0x28>)
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d000      	beq.n	8004de6 <HAL_TIM_PWM_MspInit+0xa>
 8004de4:	4770      	bx	lr
{
 8004de6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004de8:	2300      	movs	r3, #0
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <HAL_TIM_PWM_MspInit+0x2c>)
 8004dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df0:	f042 0204 	orr.w	r2, r2, #4
 8004df4:	641a      	str	r2, [r3, #64]	; 0x40
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004e00:	b002      	add	sp, #8
 8004e02:	4770      	bx	lr
 8004e04:	40000800 	.word	0x40000800
 8004e08:	40023800 	.word	0x40023800

08004e0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM11)
 8004e0c:	6802      	ldr	r2, [r0, #0]
 8004e0e:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <HAL_TIM_Base_MspInit+0x28>)
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d000      	beq.n	8004e16 <HAL_TIM_Base_MspInit+0xa>
 8004e14:	4770      	bx	lr
{
 8004e16:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <HAL_TIM_Base_MspInit+0x2c>)
 8004e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e20:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004e24:	645a      	str	r2, [r3, #68]	; 0x44
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8004e30:	b002      	add	sp, #8
 8004e32:	4770      	bx	lr
 8004e34:	40014800 	.word	0x40014800
 8004e38:	40023800 	.word	0x40023800

08004e3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e3c:	b500      	push	{lr}
 8004e3e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e40:	2300      	movs	r3, #0
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	9302      	str	r3, [sp, #8]
 8004e46:	9303      	str	r3, [sp, #12]
 8004e48:	9304      	str	r3, [sp, #16]
 8004e4a:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 8004e4c:	6802      	ldr	r2, [r0, #0]
 8004e4e:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <HAL_TIM_MspPostInit+0x4c>)
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d002      	beq.n	8004e5a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004e54:	b007      	add	sp, #28
 8004e56:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_TIM_MspPostInit+0x50>)
 8004e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e62:	f042 0202 	orr.w	r2, r2, #2
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004e72:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004e76:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e7c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e7e:	a901      	add	r1, sp, #4
 8004e80:	4803      	ldr	r0, [pc, #12]	; (8004e90 <HAL_TIM_MspPostInit+0x54>)
 8004e82:	f7fc fe39 	bl	8001af8 <HAL_GPIO_Init>
}
 8004e86:	e7e5      	b.n	8004e54 <HAL_TIM_MspPostInit+0x18>
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40020400 	.word	0x40020400

08004e94 <MX_TIM4_Init>:
{
 8004e94:	b500      	push	{lr}
 8004e96:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9308      	str	r3, [sp, #32]
 8004e9c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	9302      	str	r3, [sp, #8]
 8004ea2:	9303      	str	r3, [sp, #12]
 8004ea4:	9304      	str	r3, [sp, #16]
 8004ea6:	9305      	str	r3, [sp, #20]
 8004ea8:	9306      	str	r3, [sp, #24]
 8004eaa:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8004eac:	4826      	ldr	r0, [pc, #152]	; (8004f48 <MX_TIM4_Init+0xb4>)
 8004eae:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <MX_TIM4_Init+0xb8>)
 8004eb0:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9;
 8004eb2:	2209      	movs	r2, #9
 8004eb4:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eb6:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 20000;
 8004eb8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004ebc:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ebe:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ec0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004ec2:	f7fd fcf4 	bl	80028ae <HAL_TIM_PWM_Init>
 8004ec6:	bb68      	cbnz	r0, 8004f24 <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ecc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ece:	a908      	add	r1, sp, #32
 8004ed0:	481d      	ldr	r0, [pc, #116]	; (8004f48 <MX_TIM4_Init+0xb4>)
 8004ed2:	f7fd fdd5 	bl	8002a80 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed6:	bb40      	cbnz	r0, 8004f2a <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ed8:	2360      	movs	r3, #96	; 0x60
 8004eda:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8004edc:	2200      	movs	r2, #0
 8004ede:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ee0:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ee6:	eb0d 0103 	add.w	r1, sp, r3
 8004eea:	4817      	ldr	r0, [pc, #92]	; (8004f48 <MX_TIM4_Init+0xb4>)
 8004eec:	f7fd fd2a 	bl	8002944 <HAL_TIM_PWM_ConfigChannel>
 8004ef0:	b9f0      	cbnz	r0, 8004f30 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	eb0d 0102 	add.w	r1, sp, r2
 8004ef8:	4813      	ldr	r0, [pc, #76]	; (8004f48 <MX_TIM4_Init+0xb4>)
 8004efa:	f7fd fd23 	bl	8002944 <HAL_TIM_PWM_ConfigChannel>
 8004efe:	b9d0      	cbnz	r0, 8004f36 <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f00:	2208      	movs	r2, #8
 8004f02:	a901      	add	r1, sp, #4
 8004f04:	4810      	ldr	r0, [pc, #64]	; (8004f48 <MX_TIM4_Init+0xb4>)
 8004f06:	f7fd fd1d 	bl	8002944 <HAL_TIM_PWM_ConfigChannel>
 8004f0a:	b9b8      	cbnz	r0, 8004f3c <MX_TIM4_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f0c:	220c      	movs	r2, #12
 8004f0e:	a901      	add	r1, sp, #4
 8004f10:	480d      	ldr	r0, [pc, #52]	; (8004f48 <MX_TIM4_Init+0xb4>)
 8004f12:	f7fd fd17 	bl	8002944 <HAL_TIM_PWM_ConfigChannel>
 8004f16:	b9a0      	cbnz	r0, 8004f42 <MX_TIM4_Init+0xae>
  HAL_TIM_MspPostInit(&htim4);
 8004f18:	480b      	ldr	r0, [pc, #44]	; (8004f48 <MX_TIM4_Init+0xb4>)
 8004f1a:	f7ff ff8f 	bl	8004e3c <HAL_TIM_MspPostInit>
}
 8004f1e:	b00b      	add	sp, #44	; 0x2c
 8004f20:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004f24:	f7ff fdd0 	bl	8004ac8 <Error_Handler>
 8004f28:	e7ce      	b.n	8004ec8 <MX_TIM4_Init+0x34>
    Error_Handler();
 8004f2a:	f7ff fdcd 	bl	8004ac8 <Error_Handler>
 8004f2e:	e7d3      	b.n	8004ed8 <MX_TIM4_Init+0x44>
    Error_Handler();
 8004f30:	f7ff fdca 	bl	8004ac8 <Error_Handler>
 8004f34:	e7dd      	b.n	8004ef2 <MX_TIM4_Init+0x5e>
    Error_Handler();
 8004f36:	f7ff fdc7 	bl	8004ac8 <Error_Handler>
 8004f3a:	e7e1      	b.n	8004f00 <MX_TIM4_Init+0x6c>
    Error_Handler();
 8004f3c:	f7ff fdc4 	bl	8004ac8 <Error_Handler>
 8004f40:	e7e4      	b.n	8004f0c <MX_TIM4_Init+0x78>
    Error_Handler();
 8004f42:	f7ff fdc1 	bl	8004ac8 <Error_Handler>
 8004f46:	e7e7      	b.n	8004f18 <MX_TIM4_Init+0x84>
 8004f48:	200008e8 	.word	0x200008e8
 8004f4c:	40000800 	.word	0x40000800

08004f50 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004f50:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8004f52:	480d      	ldr	r0, [pc, #52]	; (8004f88 <MX_USART6_UART_Init+0x38>)
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <MX_USART6_UART_Init+0x3c>)
 8004f56:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 9600;
 8004f58:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004f5c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004f62:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004f64:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004f66:	220c      	movs	r2, #12
 8004f68:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f6a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f6c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004f6e:	f7fd ff91 	bl	8002e94 <HAL_UART_Init>
 8004f72:	b930      	cbnz	r0, 8004f82 <MX_USART6_UART_Init+0x32>
  {
    Error_Handler();
  }
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <MX_USART6_UART_Init+0x38>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68d3      	ldr	r3, [r2, #12]
 8004f7a:	f043 0310 	orr.w	r3, r3, #16
 8004f7e:	60d3      	str	r3, [r2, #12]
}
 8004f80:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004f82:	f7ff fda1 	bl	8004ac8 <Error_Handler>
 8004f86:	e7f5      	b.n	8004f74 <MX_USART6_UART_Init+0x24>
 8004f88:	200009c8 	.word	0x200009c8
 8004f8c:	40011400 	.word	0x40011400

08004f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f90:	b530      	push	{r4, r5, lr}
 8004f92:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f94:	2300      	movs	r3, #0
 8004f96:	9303      	str	r3, [sp, #12]
 8004f98:	9304      	str	r3, [sp, #16]
 8004f9a:	9305      	str	r3, [sp, #20]
 8004f9c:	9306      	str	r3, [sp, #24]
 8004f9e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 8004fa0:	6802      	ldr	r2, [r0, #0]
 8004fa2:	4b29      	ldr	r3, [pc, #164]	; (8005048 <HAL_UART_MspInit+0xb8>)
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART6_MspInit 1 */
    // Enable RX idle interrupt, which we use to handle variable-length messages
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004fa8:	b009      	add	sp, #36	; 0x24
 8004faa:	bd30      	pop	{r4, r5, pc}
 8004fac:	4604      	mov	r4, r0
    __HAL_RCC_USART6_CLK_ENABLE();
 8004fae:	2500      	movs	r5, #0
 8004fb0:	9501      	str	r5, [sp, #4]
 8004fb2:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8004fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb8:	f042 0220 	orr.w	r2, r2, #32
 8004fbc:	645a      	str	r2, [r3, #68]	; 0x44
 8004fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc0:	f002 0220 	and.w	r2, r2, #32
 8004fc4:	9201      	str	r2, [sp, #4]
 8004fc6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fc8:	9502      	str	r5, [sp, #8]
 8004fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fcc:	f042 0204 	orr.w	r2, r2, #4
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	9302      	str	r3, [sp, #8]
 8004fda:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004fdc:	23c0      	movs	r3, #192	; 0xc0
 8004fde:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004fec:	2308      	movs	r3, #8
 8004fee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ff0:	a903      	add	r1, sp, #12
 8004ff2:	4816      	ldr	r0, [pc, #88]	; (800504c <HAL_UART_MspInit+0xbc>)
 8004ff4:	f7fc fd80 	bl	8001af8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004ff8:	4815      	ldr	r0, [pc, #84]	; (8005050 <HAL_UART_MspInit+0xc0>)
 8004ffa:	4b16      	ldr	r3, [pc, #88]	; (8005054 <HAL_UART_MspInit+0xc4>)
 8004ffc:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004ffe:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8005002:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005004:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005006:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800500c:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800500e:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005010:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8005012:	61c5      	str	r5, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005014:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005016:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005018:	f7fc fa56 	bl	80014c8 <HAL_DMA_Init>
 800501c:	b980      	cbnz	r0, 8005040 <HAL_UART_MspInit+0xb0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800501e:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <HAL_UART_MspInit+0xc0>)
 8005020:	6363      	str	r3, [r4, #52]	; 0x34
 8005022:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005024:	2200      	movs	r2, #0
 8005026:	4611      	mov	r1, r2
 8005028:	2047      	movs	r0, #71	; 0x47
 800502a:	f7fc f97d 	bl	8001328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800502e:	2047      	movs	r0, #71	; 0x47
 8005030:	f7fc f9ae 	bl	8001390 <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	68d3      	ldr	r3, [r2, #12]
 8005038:	f043 0310 	orr.w	r3, r3, #16
 800503c:	60d3      	str	r3, [r2, #12]
}
 800503e:	e7b3      	b.n	8004fa8 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8005040:	f7ff fd42 	bl	8004ac8 <Error_Handler>
 8005044:	e7eb      	b.n	800501e <HAL_UART_MspInit+0x8e>
 8005046:	bf00      	nop
 8005048:	40011400 	.word	0x40011400
 800504c:	40020800 	.word	0x40020800
 8005050:	20000968 	.word	0x20000968
 8005054:	40026428 	.word	0x40026428

08005058 <HAL_UART_RxIdleCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxIdleCallback(UART_HandleTypeDef* huart)
{
 8005058:	b510      	push	{r4, lr}
 800505a:	4604      	mov	r4, r0
  uint16_t rxXferCount = 0;
  if(huart->hdmarx != NULL)
 800505c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800505e:	b168      	cbz	r0, 800507c <HAL_UART_RxIdleCallback+0x24>
  {
    DMA_HandleTypeDef *hdma = huart->hdmarx;

    /* Determine how many items of data have been received */
    rxXferCount = huart->RxXferSize - __HAL_DMA_GET_COUNTER(hdma);
 8005060:	6803      	ldr	r3, [r0, #0]
 8005062:	685b      	ldr	r3, [r3, #4]

    HAL_DMA_Abort(huart->hdmarx);
 8005064:	f7fc fad0 	bl	8001608 <HAL_DMA_Abort>

    huart->RxXferCount = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    /* Check if a transmit process is ongoing or not */
    if(huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 800506c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b23      	cmp	r3, #35	; 0x23
 8005074:	d005      	beq.n	8005082 <HAL_UART_RxIdleCallback+0x2a>
    {
      huart->gState = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->gState = HAL_UART_STATE_READY;
 8005076:	2320      	movs	r3, #32
 8005078:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }
  }

  UART_timeout();
 800507c:	f7ff fb76 	bl	800476c <UART_timeout>

}
 8005080:	bd10      	pop	{r4, pc}
      huart->gState = HAL_UART_STATE_BUSY_TX;
 8005082:	2321      	movs	r3, #33	; 0x21
 8005084:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8005088:	e7f8      	b.n	800507c <HAL_UART_RxIdleCallback+0x24>
	...

0800508c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800508c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005090:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005092:	e003      	b.n	800509c <LoopCopyDataInit>

08005094 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005094:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005096:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005098:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800509a:	3104      	adds	r1, #4

0800509c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800509c:	480b      	ldr	r0, [pc, #44]	; (80050cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80050a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050a4:	d3f6      	bcc.n	8005094 <CopyDataInit>
  ldr  r2, =_sbss
 80050a6:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80050a8:	e002      	b.n	80050b0 <LoopFillZerobss>

080050aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80050aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80050ac:	f842 3b04 	str.w	r3, [r2], #4

080050b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80050b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80050b4:	d3f9      	bcc.n	80050aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050b6:	f7ff fe53 	bl	8004d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050ba:	f000 f817 	bl	80050ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050be:	f7ff fbd5 	bl	800486c <main>
  bx  lr    
 80050c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80050c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80050c8:	08009dd8 	.word	0x08009dd8
  ldr  r0, =_sdata
 80050cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80050d0:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 80050d4:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 80050d8:	20000a0c 	.word	0x20000a0c

080050dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050dc:	e7fe      	b.n	80050dc <ADC_IRQHandler>
	...

080050e0 <__errno>:
 80050e0:	4b01      	ldr	r3, [pc, #4]	; (80050e8 <__errno+0x8>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000038 	.word	0x20000038

080050ec <__libc_init_array>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4e0d      	ldr	r6, [pc, #52]	; (8005124 <__libc_init_array+0x38>)
 80050f0:	4c0d      	ldr	r4, [pc, #52]	; (8005128 <__libc_init_array+0x3c>)
 80050f2:	1ba4      	subs	r4, r4, r6
 80050f4:	10a4      	asrs	r4, r4, #2
 80050f6:	2500      	movs	r5, #0
 80050f8:	42a5      	cmp	r5, r4
 80050fa:	d109      	bne.n	8005110 <__libc_init_array+0x24>
 80050fc:	4e0b      	ldr	r6, [pc, #44]	; (800512c <__libc_init_array+0x40>)
 80050fe:	4c0c      	ldr	r4, [pc, #48]	; (8005130 <__libc_init_array+0x44>)
 8005100:	f004 fa86 	bl	8009610 <_init>
 8005104:	1ba4      	subs	r4, r4, r6
 8005106:	10a4      	asrs	r4, r4, #2
 8005108:	2500      	movs	r5, #0
 800510a:	42a5      	cmp	r5, r4
 800510c:	d105      	bne.n	800511a <__libc_init_array+0x2e>
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005114:	4798      	blx	r3
 8005116:	3501      	adds	r5, #1
 8005118:	e7ee      	b.n	80050f8 <__libc_init_array+0xc>
 800511a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800511e:	4798      	blx	r3
 8005120:	3501      	adds	r5, #1
 8005122:	e7f2      	b.n	800510a <__libc_init_array+0x1e>
 8005124:	08009dd0 	.word	0x08009dd0
 8005128:	08009dd0 	.word	0x08009dd0
 800512c:	08009dd0 	.word	0x08009dd0
 8005130:	08009dd4 	.word	0x08009dd4

08005134 <__locale_ctype_ptr_l>:
 8005134:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005138:	4770      	bx	lr
	...

0800513c <__locale_ctype_ptr>:
 800513c:	4b04      	ldr	r3, [pc, #16]	; (8005150 <__locale_ctype_ptr+0x14>)
 800513e:	4a05      	ldr	r2, [pc, #20]	; (8005154 <__locale_ctype_ptr+0x18>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf08      	it	eq
 8005148:	4613      	moveq	r3, r2
 800514a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800514e:	4770      	bx	lr
 8005150:	20000038 	.word	0x20000038
 8005154:	2000009c 	.word	0x2000009c

08005158 <__ascii_mbtowc>:
 8005158:	b082      	sub	sp, #8
 800515a:	b901      	cbnz	r1, 800515e <__ascii_mbtowc+0x6>
 800515c:	a901      	add	r1, sp, #4
 800515e:	b142      	cbz	r2, 8005172 <__ascii_mbtowc+0x1a>
 8005160:	b14b      	cbz	r3, 8005176 <__ascii_mbtowc+0x1e>
 8005162:	7813      	ldrb	r3, [r2, #0]
 8005164:	600b      	str	r3, [r1, #0]
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	1c10      	adds	r0, r2, #0
 800516a:	bf18      	it	ne
 800516c:	2001      	movne	r0, #1
 800516e:	b002      	add	sp, #8
 8005170:	4770      	bx	lr
 8005172:	4610      	mov	r0, r2
 8005174:	e7fb      	b.n	800516e <__ascii_mbtowc+0x16>
 8005176:	f06f 0001 	mvn.w	r0, #1
 800517a:	e7f8      	b.n	800516e <__ascii_mbtowc+0x16>

0800517c <memcpy>:
 800517c:	b510      	push	{r4, lr}
 800517e:	1e43      	subs	r3, r0, #1
 8005180:	440a      	add	r2, r1
 8005182:	4291      	cmp	r1, r2
 8005184:	d100      	bne.n	8005188 <memcpy+0xc>
 8005186:	bd10      	pop	{r4, pc}
 8005188:	f811 4b01 	ldrb.w	r4, [r1], #1
 800518c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005190:	e7f7      	b.n	8005182 <memcpy+0x6>

08005192 <memset>:
 8005192:	4402      	add	r2, r0
 8005194:	4603      	mov	r3, r0
 8005196:	4293      	cmp	r3, r2
 8005198:	d100      	bne.n	800519c <memset+0xa>
 800519a:	4770      	bx	lr
 800519c:	f803 1b01 	strb.w	r1, [r3], #1
 80051a0:	e7f9      	b.n	8005196 <memset+0x4>

080051a2 <__cvt>:
 80051a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051a6:	ec55 4b10 	vmov	r4, r5, d0
 80051aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80051ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	460e      	mov	r6, r1
 80051b4:	4691      	mov	r9, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	bfb8      	it	lt
 80051ba:	4622      	movlt	r2, r4
 80051bc:	462b      	mov	r3, r5
 80051be:	f027 0720 	bic.w	r7, r7, #32
 80051c2:	bfbb      	ittet	lt
 80051c4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051c8:	461d      	movlt	r5, r3
 80051ca:	2300      	movge	r3, #0
 80051cc:	232d      	movlt	r3, #45	; 0x2d
 80051ce:	bfb8      	it	lt
 80051d0:	4614      	movlt	r4, r2
 80051d2:	2f46      	cmp	r7, #70	; 0x46
 80051d4:	700b      	strb	r3, [r1, #0]
 80051d6:	d004      	beq.n	80051e2 <__cvt+0x40>
 80051d8:	2f45      	cmp	r7, #69	; 0x45
 80051da:	d100      	bne.n	80051de <__cvt+0x3c>
 80051dc:	3601      	adds	r6, #1
 80051de:	2102      	movs	r1, #2
 80051e0:	e000      	b.n	80051e4 <__cvt+0x42>
 80051e2:	2103      	movs	r1, #3
 80051e4:	ab03      	add	r3, sp, #12
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	ab02      	add	r3, sp, #8
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4632      	mov	r2, r6
 80051ee:	4653      	mov	r3, sl
 80051f0:	ec45 4b10 	vmov	d0, r4, r5
 80051f4:	f001 fed8 	bl	8006fa8 <_dtoa_r>
 80051f8:	2f47      	cmp	r7, #71	; 0x47
 80051fa:	4680      	mov	r8, r0
 80051fc:	d102      	bne.n	8005204 <__cvt+0x62>
 80051fe:	f019 0f01 	tst.w	r9, #1
 8005202:	d026      	beq.n	8005252 <__cvt+0xb0>
 8005204:	2f46      	cmp	r7, #70	; 0x46
 8005206:	eb08 0906 	add.w	r9, r8, r6
 800520a:	d111      	bne.n	8005230 <__cvt+0x8e>
 800520c:	f898 3000 	ldrb.w	r3, [r8]
 8005210:	2b30      	cmp	r3, #48	; 0x30
 8005212:	d10a      	bne.n	800522a <__cvt+0x88>
 8005214:	2200      	movs	r2, #0
 8005216:	2300      	movs	r3, #0
 8005218:	4620      	mov	r0, r4
 800521a:	4629      	mov	r1, r5
 800521c:	f7fb fc6c 	bl	8000af8 <__aeabi_dcmpeq>
 8005220:	b918      	cbnz	r0, 800522a <__cvt+0x88>
 8005222:	f1c6 0601 	rsb	r6, r6, #1
 8005226:	f8ca 6000 	str.w	r6, [sl]
 800522a:	f8da 3000 	ldr.w	r3, [sl]
 800522e:	4499      	add	r9, r3
 8005230:	2200      	movs	r2, #0
 8005232:	2300      	movs	r3, #0
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	f7fb fc5e 	bl	8000af8 <__aeabi_dcmpeq>
 800523c:	b938      	cbnz	r0, 800524e <__cvt+0xac>
 800523e:	2230      	movs	r2, #48	; 0x30
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	454b      	cmp	r3, r9
 8005244:	d205      	bcs.n	8005252 <__cvt+0xb0>
 8005246:	1c59      	adds	r1, r3, #1
 8005248:	9103      	str	r1, [sp, #12]
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e7f8      	b.n	8005240 <__cvt+0x9e>
 800524e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005256:	eba3 0308 	sub.w	r3, r3, r8
 800525a:	4640      	mov	r0, r8
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	b004      	add	sp, #16
 8005260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005264 <__exponent>:
 8005264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005266:	2900      	cmp	r1, #0
 8005268:	4604      	mov	r4, r0
 800526a:	bfba      	itte	lt
 800526c:	4249      	neglt	r1, r1
 800526e:	232d      	movlt	r3, #45	; 0x2d
 8005270:	232b      	movge	r3, #43	; 0x2b
 8005272:	2909      	cmp	r1, #9
 8005274:	f804 2b02 	strb.w	r2, [r4], #2
 8005278:	7043      	strb	r3, [r0, #1]
 800527a:	dd20      	ble.n	80052be <__exponent+0x5a>
 800527c:	f10d 0307 	add.w	r3, sp, #7
 8005280:	461f      	mov	r7, r3
 8005282:	260a      	movs	r6, #10
 8005284:	fb91 f5f6 	sdiv	r5, r1, r6
 8005288:	fb06 1115 	mls	r1, r6, r5, r1
 800528c:	3130      	adds	r1, #48	; 0x30
 800528e:	2d09      	cmp	r5, #9
 8005290:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005294:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005298:	4629      	mov	r1, r5
 800529a:	dc09      	bgt.n	80052b0 <__exponent+0x4c>
 800529c:	3130      	adds	r1, #48	; 0x30
 800529e:	3b02      	subs	r3, #2
 80052a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052a4:	42bb      	cmp	r3, r7
 80052a6:	4622      	mov	r2, r4
 80052a8:	d304      	bcc.n	80052b4 <__exponent+0x50>
 80052aa:	1a10      	subs	r0, r2, r0
 80052ac:	b003      	add	sp, #12
 80052ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b0:	4613      	mov	r3, r2
 80052b2:	e7e7      	b.n	8005284 <__exponent+0x20>
 80052b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052b8:	f804 2b01 	strb.w	r2, [r4], #1
 80052bc:	e7f2      	b.n	80052a4 <__exponent+0x40>
 80052be:	2330      	movs	r3, #48	; 0x30
 80052c0:	4419      	add	r1, r3
 80052c2:	7083      	strb	r3, [r0, #2]
 80052c4:	1d02      	adds	r2, r0, #4
 80052c6:	70c1      	strb	r1, [r0, #3]
 80052c8:	e7ef      	b.n	80052aa <__exponent+0x46>
	...

080052cc <_printf_float>:
 80052cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d0:	b08d      	sub	sp, #52	; 0x34
 80052d2:	460c      	mov	r4, r1
 80052d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80052d8:	4616      	mov	r6, r2
 80052da:	461f      	mov	r7, r3
 80052dc:	4605      	mov	r5, r0
 80052de:	f003 f8bd 	bl	800845c <_localeconv_r>
 80052e2:	6803      	ldr	r3, [r0, #0]
 80052e4:	9304      	str	r3, [sp, #16]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fa ff84 	bl	80001f4 <strlen>
 80052ec:	2300      	movs	r3, #0
 80052ee:	930a      	str	r3, [sp, #40]	; 0x28
 80052f0:	f8d8 3000 	ldr.w	r3, [r8]
 80052f4:	9005      	str	r0, [sp, #20]
 80052f6:	3307      	adds	r3, #7
 80052f8:	f023 0307 	bic.w	r3, r3, #7
 80052fc:	f103 0208 	add.w	r2, r3, #8
 8005300:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005304:	f8d4 b000 	ldr.w	fp, [r4]
 8005308:	f8c8 2000 	str.w	r2, [r8]
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005314:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005318:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800531c:	9307      	str	r3, [sp, #28]
 800531e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005326:	4ba7      	ldr	r3, [pc, #668]	; (80055c4 <_printf_float+0x2f8>)
 8005328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800532c:	f7fb fc16 	bl	8000b5c <__aeabi_dcmpun>
 8005330:	bb70      	cbnz	r0, 8005390 <_printf_float+0xc4>
 8005332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005336:	4ba3      	ldr	r3, [pc, #652]	; (80055c4 <_printf_float+0x2f8>)
 8005338:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800533c:	f7fb fbf0 	bl	8000b20 <__aeabi_dcmple>
 8005340:	bb30      	cbnz	r0, 8005390 <_printf_float+0xc4>
 8005342:	2200      	movs	r2, #0
 8005344:	2300      	movs	r3, #0
 8005346:	4640      	mov	r0, r8
 8005348:	4649      	mov	r1, r9
 800534a:	f7fb fbdf 	bl	8000b0c <__aeabi_dcmplt>
 800534e:	b110      	cbz	r0, 8005356 <_printf_float+0x8a>
 8005350:	232d      	movs	r3, #45	; 0x2d
 8005352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005356:	4a9c      	ldr	r2, [pc, #624]	; (80055c8 <_printf_float+0x2fc>)
 8005358:	4b9c      	ldr	r3, [pc, #624]	; (80055cc <_printf_float+0x300>)
 800535a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800535e:	bf8c      	ite	hi
 8005360:	4690      	movhi	r8, r2
 8005362:	4698      	movls	r8, r3
 8005364:	2303      	movs	r3, #3
 8005366:	f02b 0204 	bic.w	r2, fp, #4
 800536a:	6123      	str	r3, [r4, #16]
 800536c:	6022      	str	r2, [r4, #0]
 800536e:	f04f 0900 	mov.w	r9, #0
 8005372:	9700      	str	r7, [sp, #0]
 8005374:	4633      	mov	r3, r6
 8005376:	aa0b      	add	r2, sp, #44	; 0x2c
 8005378:	4621      	mov	r1, r4
 800537a:	4628      	mov	r0, r5
 800537c:	f000 f9e6 	bl	800574c <_printf_common>
 8005380:	3001      	adds	r0, #1
 8005382:	f040 808d 	bne.w	80054a0 <_printf_float+0x1d4>
 8005386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800538a:	b00d      	add	sp, #52	; 0x34
 800538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	4640      	mov	r0, r8
 8005396:	4649      	mov	r1, r9
 8005398:	f7fb fbe0 	bl	8000b5c <__aeabi_dcmpun>
 800539c:	b110      	cbz	r0, 80053a4 <_printf_float+0xd8>
 800539e:	4a8c      	ldr	r2, [pc, #560]	; (80055d0 <_printf_float+0x304>)
 80053a0:	4b8c      	ldr	r3, [pc, #560]	; (80055d4 <_printf_float+0x308>)
 80053a2:	e7da      	b.n	800535a <_printf_float+0x8e>
 80053a4:	6861      	ldr	r1, [r4, #4]
 80053a6:	1c4b      	adds	r3, r1, #1
 80053a8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80053ac:	a80a      	add	r0, sp, #40	; 0x28
 80053ae:	d13e      	bne.n	800542e <_printf_float+0x162>
 80053b0:	2306      	movs	r3, #6
 80053b2:	6063      	str	r3, [r4, #4]
 80053b4:	2300      	movs	r3, #0
 80053b6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80053ba:	ab09      	add	r3, sp, #36	; 0x24
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	ec49 8b10 	vmov	d0, r8, r9
 80053c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053c6:	6022      	str	r2, [r4, #0]
 80053c8:	f8cd a004 	str.w	sl, [sp, #4]
 80053cc:	6861      	ldr	r1, [r4, #4]
 80053ce:	4628      	mov	r0, r5
 80053d0:	f7ff fee7 	bl	80051a2 <__cvt>
 80053d4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80053d8:	2b47      	cmp	r3, #71	; 0x47
 80053da:	4680      	mov	r8, r0
 80053dc:	d109      	bne.n	80053f2 <_printf_float+0x126>
 80053de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e0:	1cd8      	adds	r0, r3, #3
 80053e2:	db02      	blt.n	80053ea <_printf_float+0x11e>
 80053e4:	6862      	ldr	r2, [r4, #4]
 80053e6:	4293      	cmp	r3, r2
 80053e8:	dd47      	ble.n	800547a <_printf_float+0x1ae>
 80053ea:	f1aa 0a02 	sub.w	sl, sl, #2
 80053ee:	fa5f fa8a 	uxtb.w	sl, sl
 80053f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80053f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053f8:	d824      	bhi.n	8005444 <_printf_float+0x178>
 80053fa:	3901      	subs	r1, #1
 80053fc:	4652      	mov	r2, sl
 80053fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005402:	9109      	str	r1, [sp, #36]	; 0x24
 8005404:	f7ff ff2e 	bl	8005264 <__exponent>
 8005408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800540a:	1813      	adds	r3, r2, r0
 800540c:	2a01      	cmp	r2, #1
 800540e:	4681      	mov	r9, r0
 8005410:	6123      	str	r3, [r4, #16]
 8005412:	dc02      	bgt.n	800541a <_printf_float+0x14e>
 8005414:	6822      	ldr	r2, [r4, #0]
 8005416:	07d1      	lsls	r1, r2, #31
 8005418:	d501      	bpl.n	800541e <_printf_float+0x152>
 800541a:	3301      	adds	r3, #1
 800541c:	6123      	str	r3, [r4, #16]
 800541e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0a5      	beq.n	8005372 <_printf_float+0xa6>
 8005426:	232d      	movs	r3, #45	; 0x2d
 8005428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800542c:	e7a1      	b.n	8005372 <_printf_float+0xa6>
 800542e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005432:	f000 8177 	beq.w	8005724 <_printf_float+0x458>
 8005436:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800543a:	d1bb      	bne.n	80053b4 <_printf_float+0xe8>
 800543c:	2900      	cmp	r1, #0
 800543e:	d1b9      	bne.n	80053b4 <_printf_float+0xe8>
 8005440:	2301      	movs	r3, #1
 8005442:	e7b6      	b.n	80053b2 <_printf_float+0xe6>
 8005444:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005448:	d119      	bne.n	800547e <_printf_float+0x1b2>
 800544a:	2900      	cmp	r1, #0
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	dd0c      	ble.n	800546a <_printf_float+0x19e>
 8005450:	6121      	str	r1, [r4, #16]
 8005452:	b913      	cbnz	r3, 800545a <_printf_float+0x18e>
 8005454:	6822      	ldr	r2, [r4, #0]
 8005456:	07d2      	lsls	r2, r2, #31
 8005458:	d502      	bpl.n	8005460 <_printf_float+0x194>
 800545a:	3301      	adds	r3, #1
 800545c:	440b      	add	r3, r1
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005462:	65a3      	str	r3, [r4, #88]	; 0x58
 8005464:	f04f 0900 	mov.w	r9, #0
 8005468:	e7d9      	b.n	800541e <_printf_float+0x152>
 800546a:	b913      	cbnz	r3, 8005472 <_printf_float+0x1a6>
 800546c:	6822      	ldr	r2, [r4, #0]
 800546e:	07d0      	lsls	r0, r2, #31
 8005470:	d501      	bpl.n	8005476 <_printf_float+0x1aa>
 8005472:	3302      	adds	r3, #2
 8005474:	e7f3      	b.n	800545e <_printf_float+0x192>
 8005476:	2301      	movs	r3, #1
 8005478:	e7f1      	b.n	800545e <_printf_float+0x192>
 800547a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800547e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005482:	4293      	cmp	r3, r2
 8005484:	db05      	blt.n	8005492 <_printf_float+0x1c6>
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	07d1      	lsls	r1, r2, #31
 800548c:	d5e8      	bpl.n	8005460 <_printf_float+0x194>
 800548e:	3301      	adds	r3, #1
 8005490:	e7e5      	b.n	800545e <_printf_float+0x192>
 8005492:	2b00      	cmp	r3, #0
 8005494:	bfd4      	ite	le
 8005496:	f1c3 0302 	rsble	r3, r3, #2
 800549a:	2301      	movgt	r3, #1
 800549c:	4413      	add	r3, r2
 800549e:	e7de      	b.n	800545e <_printf_float+0x192>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	055a      	lsls	r2, r3, #21
 80054a4:	d407      	bmi.n	80054b6 <_printf_float+0x1ea>
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	4642      	mov	r2, r8
 80054aa:	4631      	mov	r1, r6
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b8      	blx	r7
 80054b0:	3001      	adds	r0, #1
 80054b2:	d12b      	bne.n	800550c <_printf_float+0x240>
 80054b4:	e767      	b.n	8005386 <_printf_float+0xba>
 80054b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80054ba:	f240 80dc 	bls.w	8005676 <_printf_float+0x3aa>
 80054be:	2200      	movs	r2, #0
 80054c0:	2300      	movs	r3, #0
 80054c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054c6:	f7fb fb17 	bl	8000af8 <__aeabi_dcmpeq>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d033      	beq.n	8005536 <_printf_float+0x26a>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4a41      	ldr	r2, [pc, #260]	; (80055d8 <_printf_float+0x30c>)
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	f43f af54 	beq.w	8005386 <_printf_float+0xba>
 80054de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054e2:	429a      	cmp	r2, r3
 80054e4:	db02      	blt.n	80054ec <_printf_float+0x220>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	07d8      	lsls	r0, r3, #31
 80054ea:	d50f      	bpl.n	800550c <_printf_float+0x240>
 80054ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054f0:	4631      	mov	r1, r6
 80054f2:	4628      	mov	r0, r5
 80054f4:	47b8      	blx	r7
 80054f6:	3001      	adds	r0, #1
 80054f8:	f43f af45 	beq.w	8005386 <_printf_float+0xba>
 80054fc:	f04f 0800 	mov.w	r8, #0
 8005500:	f104 091a 	add.w	r9, r4, #26
 8005504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005506:	3b01      	subs	r3, #1
 8005508:	4543      	cmp	r3, r8
 800550a:	dc09      	bgt.n	8005520 <_printf_float+0x254>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	079b      	lsls	r3, r3, #30
 8005510:	f100 8103 	bmi.w	800571a <_printf_float+0x44e>
 8005514:	68e0      	ldr	r0, [r4, #12]
 8005516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005518:	4298      	cmp	r0, r3
 800551a:	bfb8      	it	lt
 800551c:	4618      	movlt	r0, r3
 800551e:	e734      	b.n	800538a <_printf_float+0xbe>
 8005520:	2301      	movs	r3, #1
 8005522:	464a      	mov	r2, r9
 8005524:	4631      	mov	r1, r6
 8005526:	4628      	mov	r0, r5
 8005528:	47b8      	blx	r7
 800552a:	3001      	adds	r0, #1
 800552c:	f43f af2b 	beq.w	8005386 <_printf_float+0xba>
 8005530:	f108 0801 	add.w	r8, r8, #1
 8005534:	e7e6      	b.n	8005504 <_printf_float+0x238>
 8005536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	dc2b      	bgt.n	8005594 <_printf_float+0x2c8>
 800553c:	2301      	movs	r3, #1
 800553e:	4a26      	ldr	r2, [pc, #152]	; (80055d8 <_printf_float+0x30c>)
 8005540:	4631      	mov	r1, r6
 8005542:	4628      	mov	r0, r5
 8005544:	47b8      	blx	r7
 8005546:	3001      	adds	r0, #1
 8005548:	f43f af1d 	beq.w	8005386 <_printf_float+0xba>
 800554c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554e:	b923      	cbnz	r3, 800555a <_printf_float+0x28e>
 8005550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005552:	b913      	cbnz	r3, 800555a <_printf_float+0x28e>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	07d9      	lsls	r1, r3, #31
 8005558:	d5d8      	bpl.n	800550c <_printf_float+0x240>
 800555a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	f43f af0e 	beq.w	8005386 <_printf_float+0xba>
 800556a:	f04f 0900 	mov.w	r9, #0
 800556e:	f104 0a1a 	add.w	sl, r4, #26
 8005572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005574:	425b      	negs	r3, r3
 8005576:	454b      	cmp	r3, r9
 8005578:	dc01      	bgt.n	800557e <_printf_float+0x2b2>
 800557a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800557c:	e794      	b.n	80054a8 <_printf_float+0x1dc>
 800557e:	2301      	movs	r3, #1
 8005580:	4652      	mov	r2, sl
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	f43f aefc 	beq.w	8005386 <_printf_float+0xba>
 800558e:	f109 0901 	add.w	r9, r9, #1
 8005592:	e7ee      	b.n	8005572 <_printf_float+0x2a6>
 8005594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005598:	429a      	cmp	r2, r3
 800559a:	bfa8      	it	ge
 800559c:	461a      	movge	r2, r3
 800559e:	2a00      	cmp	r2, #0
 80055a0:	4691      	mov	r9, r2
 80055a2:	dd07      	ble.n	80055b4 <_printf_float+0x2e8>
 80055a4:	4613      	mov	r3, r2
 80055a6:	4631      	mov	r1, r6
 80055a8:	4642      	mov	r2, r8
 80055aa:	4628      	mov	r0, r5
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	f43f aee9 	beq.w	8005386 <_printf_float+0xba>
 80055b4:	f104 031a 	add.w	r3, r4, #26
 80055b8:	f04f 0b00 	mov.w	fp, #0
 80055bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055c0:	9306      	str	r3, [sp, #24]
 80055c2:	e015      	b.n	80055f0 <_printf_float+0x324>
 80055c4:	7fefffff 	.word	0x7fefffff
 80055c8:	08009ac2 	.word	0x08009ac2
 80055cc:	08009abe 	.word	0x08009abe
 80055d0:	08009aca 	.word	0x08009aca
 80055d4:	08009ac6 	.word	0x08009ac6
 80055d8:	08009ace 	.word	0x08009ace
 80055dc:	2301      	movs	r3, #1
 80055de:	9a06      	ldr	r2, [sp, #24]
 80055e0:	4631      	mov	r1, r6
 80055e2:	4628      	mov	r0, r5
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	f43f aecd 	beq.w	8005386 <_printf_float+0xba>
 80055ec:	f10b 0b01 	add.w	fp, fp, #1
 80055f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80055f4:	ebaa 0309 	sub.w	r3, sl, r9
 80055f8:	455b      	cmp	r3, fp
 80055fa:	dcef      	bgt.n	80055dc <_printf_float+0x310>
 80055fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005600:	429a      	cmp	r2, r3
 8005602:	44d0      	add	r8, sl
 8005604:	db15      	blt.n	8005632 <_printf_float+0x366>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	07da      	lsls	r2, r3, #31
 800560a:	d412      	bmi.n	8005632 <_printf_float+0x366>
 800560c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005610:	eba3 020a 	sub.w	r2, r3, sl
 8005614:	eba3 0a01 	sub.w	sl, r3, r1
 8005618:	4592      	cmp	sl, r2
 800561a:	bfa8      	it	ge
 800561c:	4692      	movge	sl, r2
 800561e:	f1ba 0f00 	cmp.w	sl, #0
 8005622:	dc0e      	bgt.n	8005642 <_printf_float+0x376>
 8005624:	f04f 0800 	mov.w	r8, #0
 8005628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800562c:	f104 091a 	add.w	r9, r4, #26
 8005630:	e019      	b.n	8005666 <_printf_float+0x39a>
 8005632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	47b8      	blx	r7
 800563c:	3001      	adds	r0, #1
 800563e:	d1e5      	bne.n	800560c <_printf_float+0x340>
 8005640:	e6a1      	b.n	8005386 <_printf_float+0xba>
 8005642:	4653      	mov	r3, sl
 8005644:	4642      	mov	r2, r8
 8005646:	4631      	mov	r1, r6
 8005648:	4628      	mov	r0, r5
 800564a:	47b8      	blx	r7
 800564c:	3001      	adds	r0, #1
 800564e:	d1e9      	bne.n	8005624 <_printf_float+0x358>
 8005650:	e699      	b.n	8005386 <_printf_float+0xba>
 8005652:	2301      	movs	r3, #1
 8005654:	464a      	mov	r2, r9
 8005656:	4631      	mov	r1, r6
 8005658:	4628      	mov	r0, r5
 800565a:	47b8      	blx	r7
 800565c:	3001      	adds	r0, #1
 800565e:	f43f ae92 	beq.w	8005386 <_printf_float+0xba>
 8005662:	f108 0801 	add.w	r8, r8, #1
 8005666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	eba3 030a 	sub.w	r3, r3, sl
 8005670:	4543      	cmp	r3, r8
 8005672:	dcee      	bgt.n	8005652 <_printf_float+0x386>
 8005674:	e74a      	b.n	800550c <_printf_float+0x240>
 8005676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005678:	2a01      	cmp	r2, #1
 800567a:	dc01      	bgt.n	8005680 <_printf_float+0x3b4>
 800567c:	07db      	lsls	r3, r3, #31
 800567e:	d53a      	bpl.n	80056f6 <_printf_float+0x42a>
 8005680:	2301      	movs	r3, #1
 8005682:	4642      	mov	r2, r8
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	f43f ae7b 	beq.w	8005386 <_printf_float+0xba>
 8005690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005694:	4631      	mov	r1, r6
 8005696:	4628      	mov	r0, r5
 8005698:	47b8      	blx	r7
 800569a:	3001      	adds	r0, #1
 800569c:	f108 0801 	add.w	r8, r8, #1
 80056a0:	f43f ae71 	beq.w	8005386 <_printf_float+0xba>
 80056a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056a6:	2200      	movs	r2, #0
 80056a8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80056ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056b0:	2300      	movs	r3, #0
 80056b2:	f7fb fa21 	bl	8000af8 <__aeabi_dcmpeq>
 80056b6:	b9c8      	cbnz	r0, 80056ec <_printf_float+0x420>
 80056b8:	4653      	mov	r3, sl
 80056ba:	4642      	mov	r2, r8
 80056bc:	4631      	mov	r1, r6
 80056be:	4628      	mov	r0, r5
 80056c0:	47b8      	blx	r7
 80056c2:	3001      	adds	r0, #1
 80056c4:	d10e      	bne.n	80056e4 <_printf_float+0x418>
 80056c6:	e65e      	b.n	8005386 <_printf_float+0xba>
 80056c8:	2301      	movs	r3, #1
 80056ca:	4652      	mov	r2, sl
 80056cc:	4631      	mov	r1, r6
 80056ce:	4628      	mov	r0, r5
 80056d0:	47b8      	blx	r7
 80056d2:	3001      	adds	r0, #1
 80056d4:	f43f ae57 	beq.w	8005386 <_printf_float+0xba>
 80056d8:	f108 0801 	add.w	r8, r8, #1
 80056dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056de:	3b01      	subs	r3, #1
 80056e0:	4543      	cmp	r3, r8
 80056e2:	dcf1      	bgt.n	80056c8 <_printf_float+0x3fc>
 80056e4:	464b      	mov	r3, r9
 80056e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056ea:	e6de      	b.n	80054aa <_printf_float+0x1de>
 80056ec:	f04f 0800 	mov.w	r8, #0
 80056f0:	f104 0a1a 	add.w	sl, r4, #26
 80056f4:	e7f2      	b.n	80056dc <_printf_float+0x410>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e7df      	b.n	80056ba <_printf_float+0x3ee>
 80056fa:	2301      	movs	r3, #1
 80056fc:	464a      	mov	r2, r9
 80056fe:	4631      	mov	r1, r6
 8005700:	4628      	mov	r0, r5
 8005702:	47b8      	blx	r7
 8005704:	3001      	adds	r0, #1
 8005706:	f43f ae3e 	beq.w	8005386 <_printf_float+0xba>
 800570a:	f108 0801 	add.w	r8, r8, #1
 800570e:	68e3      	ldr	r3, [r4, #12]
 8005710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	4543      	cmp	r3, r8
 8005716:	dcf0      	bgt.n	80056fa <_printf_float+0x42e>
 8005718:	e6fc      	b.n	8005514 <_printf_float+0x248>
 800571a:	f04f 0800 	mov.w	r8, #0
 800571e:	f104 0919 	add.w	r9, r4, #25
 8005722:	e7f4      	b.n	800570e <_printf_float+0x442>
 8005724:	2900      	cmp	r1, #0
 8005726:	f43f ae8b 	beq.w	8005440 <_printf_float+0x174>
 800572a:	2300      	movs	r3, #0
 800572c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005730:	ab09      	add	r3, sp, #36	; 0x24
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	ec49 8b10 	vmov	d0, r8, r9
 8005738:	6022      	str	r2, [r4, #0]
 800573a:	f8cd a004 	str.w	sl, [sp, #4]
 800573e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005742:	4628      	mov	r0, r5
 8005744:	f7ff fd2d 	bl	80051a2 <__cvt>
 8005748:	4680      	mov	r8, r0
 800574a:	e648      	b.n	80053de <_printf_float+0x112>

0800574c <_printf_common>:
 800574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	4691      	mov	r9, r2
 8005752:	461f      	mov	r7, r3
 8005754:	688a      	ldr	r2, [r1, #8]
 8005756:	690b      	ldr	r3, [r1, #16]
 8005758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800575c:	4293      	cmp	r3, r2
 800575e:	bfb8      	it	lt
 8005760:	4613      	movlt	r3, r2
 8005762:	f8c9 3000 	str.w	r3, [r9]
 8005766:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800576a:	4606      	mov	r6, r0
 800576c:	460c      	mov	r4, r1
 800576e:	b112      	cbz	r2, 8005776 <_printf_common+0x2a>
 8005770:	3301      	adds	r3, #1
 8005772:	f8c9 3000 	str.w	r3, [r9]
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	0699      	lsls	r1, r3, #26
 800577a:	bf42      	ittt	mi
 800577c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005780:	3302      	addmi	r3, #2
 8005782:	f8c9 3000 	strmi.w	r3, [r9]
 8005786:	6825      	ldr	r5, [r4, #0]
 8005788:	f015 0506 	ands.w	r5, r5, #6
 800578c:	d107      	bne.n	800579e <_printf_common+0x52>
 800578e:	f104 0a19 	add.w	sl, r4, #25
 8005792:	68e3      	ldr	r3, [r4, #12]
 8005794:	f8d9 2000 	ldr.w	r2, [r9]
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	42ab      	cmp	r3, r5
 800579c:	dc28      	bgt.n	80057f0 <_printf_common+0xa4>
 800579e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	3300      	adds	r3, #0
 80057a6:	bf18      	it	ne
 80057a8:	2301      	movne	r3, #1
 80057aa:	0692      	lsls	r2, r2, #26
 80057ac:	d42d      	bmi.n	800580a <_printf_common+0xbe>
 80057ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b2:	4639      	mov	r1, r7
 80057b4:	4630      	mov	r0, r6
 80057b6:	47c0      	blx	r8
 80057b8:	3001      	adds	r0, #1
 80057ba:	d020      	beq.n	80057fe <_printf_common+0xb2>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	68e5      	ldr	r5, [r4, #12]
 80057c0:	f8d9 2000 	ldr.w	r2, [r9]
 80057c4:	f003 0306 	and.w	r3, r3, #6
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	bf08      	it	eq
 80057cc:	1aad      	subeq	r5, r5, r2
 80057ce:	68a3      	ldr	r3, [r4, #8]
 80057d0:	6922      	ldr	r2, [r4, #16]
 80057d2:	bf0c      	ite	eq
 80057d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d8:	2500      	movne	r5, #0
 80057da:	4293      	cmp	r3, r2
 80057dc:	bfc4      	itt	gt
 80057de:	1a9b      	subgt	r3, r3, r2
 80057e0:	18ed      	addgt	r5, r5, r3
 80057e2:	f04f 0900 	mov.w	r9, #0
 80057e6:	341a      	adds	r4, #26
 80057e8:	454d      	cmp	r5, r9
 80057ea:	d11a      	bne.n	8005822 <_printf_common+0xd6>
 80057ec:	2000      	movs	r0, #0
 80057ee:	e008      	b.n	8005802 <_printf_common+0xb6>
 80057f0:	2301      	movs	r3, #1
 80057f2:	4652      	mov	r2, sl
 80057f4:	4639      	mov	r1, r7
 80057f6:	4630      	mov	r0, r6
 80057f8:	47c0      	blx	r8
 80057fa:	3001      	adds	r0, #1
 80057fc:	d103      	bne.n	8005806 <_printf_common+0xba>
 80057fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005806:	3501      	adds	r5, #1
 8005808:	e7c3      	b.n	8005792 <_printf_common+0x46>
 800580a:	18e1      	adds	r1, r4, r3
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	2030      	movs	r0, #48	; 0x30
 8005810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005814:	4422      	add	r2, r4
 8005816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800581a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800581e:	3302      	adds	r3, #2
 8005820:	e7c5      	b.n	80057ae <_printf_common+0x62>
 8005822:	2301      	movs	r3, #1
 8005824:	4622      	mov	r2, r4
 8005826:	4639      	mov	r1, r7
 8005828:	4630      	mov	r0, r6
 800582a:	47c0      	blx	r8
 800582c:	3001      	adds	r0, #1
 800582e:	d0e6      	beq.n	80057fe <_printf_common+0xb2>
 8005830:	f109 0901 	add.w	r9, r9, #1
 8005834:	e7d8      	b.n	80057e8 <_printf_common+0x9c>
	...

08005838 <_printf_i>:
 8005838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800583c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005840:	460c      	mov	r4, r1
 8005842:	7e09      	ldrb	r1, [r1, #24]
 8005844:	b085      	sub	sp, #20
 8005846:	296e      	cmp	r1, #110	; 0x6e
 8005848:	4617      	mov	r7, r2
 800584a:	4606      	mov	r6, r0
 800584c:	4698      	mov	r8, r3
 800584e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005850:	f000 80b3 	beq.w	80059ba <_printf_i+0x182>
 8005854:	d822      	bhi.n	800589c <_printf_i+0x64>
 8005856:	2963      	cmp	r1, #99	; 0x63
 8005858:	d036      	beq.n	80058c8 <_printf_i+0x90>
 800585a:	d80a      	bhi.n	8005872 <_printf_i+0x3a>
 800585c:	2900      	cmp	r1, #0
 800585e:	f000 80b9 	beq.w	80059d4 <_printf_i+0x19c>
 8005862:	2958      	cmp	r1, #88	; 0x58
 8005864:	f000 8083 	beq.w	800596e <_printf_i+0x136>
 8005868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800586c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005870:	e032      	b.n	80058d8 <_printf_i+0xa0>
 8005872:	2964      	cmp	r1, #100	; 0x64
 8005874:	d001      	beq.n	800587a <_printf_i+0x42>
 8005876:	2969      	cmp	r1, #105	; 0x69
 8005878:	d1f6      	bne.n	8005868 <_printf_i+0x30>
 800587a:	6820      	ldr	r0, [r4, #0]
 800587c:	6813      	ldr	r3, [r2, #0]
 800587e:	0605      	lsls	r5, r0, #24
 8005880:	f103 0104 	add.w	r1, r3, #4
 8005884:	d52a      	bpl.n	80058dc <_printf_i+0xa4>
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6011      	str	r1, [r2, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	da03      	bge.n	8005896 <_printf_i+0x5e>
 800588e:	222d      	movs	r2, #45	; 0x2d
 8005890:	425b      	negs	r3, r3
 8005892:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005896:	486f      	ldr	r0, [pc, #444]	; (8005a54 <_printf_i+0x21c>)
 8005898:	220a      	movs	r2, #10
 800589a:	e039      	b.n	8005910 <_printf_i+0xd8>
 800589c:	2973      	cmp	r1, #115	; 0x73
 800589e:	f000 809d 	beq.w	80059dc <_printf_i+0x1a4>
 80058a2:	d808      	bhi.n	80058b6 <_printf_i+0x7e>
 80058a4:	296f      	cmp	r1, #111	; 0x6f
 80058a6:	d020      	beq.n	80058ea <_printf_i+0xb2>
 80058a8:	2970      	cmp	r1, #112	; 0x70
 80058aa:	d1dd      	bne.n	8005868 <_printf_i+0x30>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	f043 0320 	orr.w	r3, r3, #32
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	e003      	b.n	80058be <_printf_i+0x86>
 80058b6:	2975      	cmp	r1, #117	; 0x75
 80058b8:	d017      	beq.n	80058ea <_printf_i+0xb2>
 80058ba:	2978      	cmp	r1, #120	; 0x78
 80058bc:	d1d4      	bne.n	8005868 <_printf_i+0x30>
 80058be:	2378      	movs	r3, #120	; 0x78
 80058c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058c4:	4864      	ldr	r0, [pc, #400]	; (8005a58 <_printf_i+0x220>)
 80058c6:	e055      	b.n	8005974 <_printf_i+0x13c>
 80058c8:	6813      	ldr	r3, [r2, #0]
 80058ca:	1d19      	adds	r1, r3, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6011      	str	r1, [r2, #0]
 80058d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d8:	2301      	movs	r3, #1
 80058da:	e08c      	b.n	80059f6 <_printf_i+0x1be>
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6011      	str	r1, [r2, #0]
 80058e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058e4:	bf18      	it	ne
 80058e6:	b21b      	sxthne	r3, r3
 80058e8:	e7cf      	b.n	800588a <_printf_i+0x52>
 80058ea:	6813      	ldr	r3, [r2, #0]
 80058ec:	6825      	ldr	r5, [r4, #0]
 80058ee:	1d18      	adds	r0, r3, #4
 80058f0:	6010      	str	r0, [r2, #0]
 80058f2:	0628      	lsls	r0, r5, #24
 80058f4:	d501      	bpl.n	80058fa <_printf_i+0xc2>
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	e002      	b.n	8005900 <_printf_i+0xc8>
 80058fa:	0668      	lsls	r0, r5, #25
 80058fc:	d5fb      	bpl.n	80058f6 <_printf_i+0xbe>
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	4854      	ldr	r0, [pc, #336]	; (8005a54 <_printf_i+0x21c>)
 8005902:	296f      	cmp	r1, #111	; 0x6f
 8005904:	bf14      	ite	ne
 8005906:	220a      	movne	r2, #10
 8005908:	2208      	moveq	r2, #8
 800590a:	2100      	movs	r1, #0
 800590c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005910:	6865      	ldr	r5, [r4, #4]
 8005912:	60a5      	str	r5, [r4, #8]
 8005914:	2d00      	cmp	r5, #0
 8005916:	f2c0 8095 	blt.w	8005a44 <_printf_i+0x20c>
 800591a:	6821      	ldr	r1, [r4, #0]
 800591c:	f021 0104 	bic.w	r1, r1, #4
 8005920:	6021      	str	r1, [r4, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d13d      	bne.n	80059a2 <_printf_i+0x16a>
 8005926:	2d00      	cmp	r5, #0
 8005928:	f040 808e 	bne.w	8005a48 <_printf_i+0x210>
 800592c:	4665      	mov	r5, ip
 800592e:	2a08      	cmp	r2, #8
 8005930:	d10b      	bne.n	800594a <_printf_i+0x112>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	07db      	lsls	r3, r3, #31
 8005936:	d508      	bpl.n	800594a <_printf_i+0x112>
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	6862      	ldr	r2, [r4, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	bfde      	ittt	le
 8005940:	2330      	movle	r3, #48	; 0x30
 8005942:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005946:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800594a:	ebac 0305 	sub.w	r3, ip, r5
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	f8cd 8000 	str.w	r8, [sp]
 8005954:	463b      	mov	r3, r7
 8005956:	aa03      	add	r2, sp, #12
 8005958:	4621      	mov	r1, r4
 800595a:	4630      	mov	r0, r6
 800595c:	f7ff fef6 	bl	800574c <_printf_common>
 8005960:	3001      	adds	r0, #1
 8005962:	d14d      	bne.n	8005a00 <_printf_i+0x1c8>
 8005964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005968:	b005      	add	sp, #20
 800596a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800596e:	4839      	ldr	r0, [pc, #228]	; (8005a54 <_printf_i+0x21c>)
 8005970:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005974:	6813      	ldr	r3, [r2, #0]
 8005976:	6821      	ldr	r1, [r4, #0]
 8005978:	1d1d      	adds	r5, r3, #4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6015      	str	r5, [r2, #0]
 800597e:	060a      	lsls	r2, r1, #24
 8005980:	d50b      	bpl.n	800599a <_printf_i+0x162>
 8005982:	07ca      	lsls	r2, r1, #31
 8005984:	bf44      	itt	mi
 8005986:	f041 0120 	orrmi.w	r1, r1, #32
 800598a:	6021      	strmi	r1, [r4, #0]
 800598c:	b91b      	cbnz	r3, 8005996 <_printf_i+0x15e>
 800598e:	6822      	ldr	r2, [r4, #0]
 8005990:	f022 0220 	bic.w	r2, r2, #32
 8005994:	6022      	str	r2, [r4, #0]
 8005996:	2210      	movs	r2, #16
 8005998:	e7b7      	b.n	800590a <_printf_i+0xd2>
 800599a:	064d      	lsls	r5, r1, #25
 800599c:	bf48      	it	mi
 800599e:	b29b      	uxthmi	r3, r3
 80059a0:	e7ef      	b.n	8005982 <_printf_i+0x14a>
 80059a2:	4665      	mov	r5, ip
 80059a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80059a8:	fb02 3311 	mls	r3, r2, r1, r3
 80059ac:	5cc3      	ldrb	r3, [r0, r3]
 80059ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059b2:	460b      	mov	r3, r1
 80059b4:	2900      	cmp	r1, #0
 80059b6:	d1f5      	bne.n	80059a4 <_printf_i+0x16c>
 80059b8:	e7b9      	b.n	800592e <_printf_i+0xf6>
 80059ba:	6813      	ldr	r3, [r2, #0]
 80059bc:	6825      	ldr	r5, [r4, #0]
 80059be:	6961      	ldr	r1, [r4, #20]
 80059c0:	1d18      	adds	r0, r3, #4
 80059c2:	6010      	str	r0, [r2, #0]
 80059c4:	0628      	lsls	r0, r5, #24
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	d501      	bpl.n	80059ce <_printf_i+0x196>
 80059ca:	6019      	str	r1, [r3, #0]
 80059cc:	e002      	b.n	80059d4 <_printf_i+0x19c>
 80059ce:	066a      	lsls	r2, r5, #25
 80059d0:	d5fb      	bpl.n	80059ca <_printf_i+0x192>
 80059d2:	8019      	strh	r1, [r3, #0]
 80059d4:	2300      	movs	r3, #0
 80059d6:	6123      	str	r3, [r4, #16]
 80059d8:	4665      	mov	r5, ip
 80059da:	e7b9      	b.n	8005950 <_printf_i+0x118>
 80059dc:	6813      	ldr	r3, [r2, #0]
 80059de:	1d19      	adds	r1, r3, #4
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	681d      	ldr	r5, [r3, #0]
 80059e4:	6862      	ldr	r2, [r4, #4]
 80059e6:	2100      	movs	r1, #0
 80059e8:	4628      	mov	r0, r5
 80059ea:	f7fa fc11 	bl	8000210 <memchr>
 80059ee:	b108      	cbz	r0, 80059f4 <_printf_i+0x1bc>
 80059f0:	1b40      	subs	r0, r0, r5
 80059f2:	6060      	str	r0, [r4, #4]
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	6123      	str	r3, [r4, #16]
 80059f8:	2300      	movs	r3, #0
 80059fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059fe:	e7a7      	b.n	8005950 <_printf_i+0x118>
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	462a      	mov	r2, r5
 8005a04:	4639      	mov	r1, r7
 8005a06:	4630      	mov	r0, r6
 8005a08:	47c0      	blx	r8
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d0aa      	beq.n	8005964 <_printf_i+0x12c>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	079b      	lsls	r3, r3, #30
 8005a12:	d413      	bmi.n	8005a3c <_printf_i+0x204>
 8005a14:	68e0      	ldr	r0, [r4, #12]
 8005a16:	9b03      	ldr	r3, [sp, #12]
 8005a18:	4298      	cmp	r0, r3
 8005a1a:	bfb8      	it	lt
 8005a1c:	4618      	movlt	r0, r3
 8005a1e:	e7a3      	b.n	8005968 <_printf_i+0x130>
 8005a20:	2301      	movs	r3, #1
 8005a22:	464a      	mov	r2, r9
 8005a24:	4639      	mov	r1, r7
 8005a26:	4630      	mov	r0, r6
 8005a28:	47c0      	blx	r8
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d09a      	beq.n	8005964 <_printf_i+0x12c>
 8005a2e:	3501      	adds	r5, #1
 8005a30:	68e3      	ldr	r3, [r4, #12]
 8005a32:	9a03      	ldr	r2, [sp, #12]
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	42ab      	cmp	r3, r5
 8005a38:	dcf2      	bgt.n	8005a20 <_printf_i+0x1e8>
 8005a3a:	e7eb      	b.n	8005a14 <_printf_i+0x1dc>
 8005a3c:	2500      	movs	r5, #0
 8005a3e:	f104 0919 	add.w	r9, r4, #25
 8005a42:	e7f5      	b.n	8005a30 <_printf_i+0x1f8>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1ac      	bne.n	80059a2 <_printf_i+0x16a>
 8005a48:	7803      	ldrb	r3, [r0, #0]
 8005a4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a52:	e76c      	b.n	800592e <_printf_i+0xf6>
 8005a54:	08009ad0 	.word	0x08009ad0
 8005a58:	08009ae1 	.word	0x08009ae1

08005a5c <_scanf_float>:
 8005a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a60:	469a      	mov	sl, r3
 8005a62:	688b      	ldr	r3, [r1, #8]
 8005a64:	4616      	mov	r6, r2
 8005a66:	1e5a      	subs	r2, r3, #1
 8005a68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	bf83      	ittte	hi
 8005a70:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005a74:	189b      	addhi	r3, r3, r2
 8005a76:	9301      	strhi	r3, [sp, #4]
 8005a78:	2300      	movls	r3, #0
 8005a7a:	bf86      	itte	hi
 8005a7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a80:	608b      	strhi	r3, [r1, #8]
 8005a82:	9301      	strls	r3, [sp, #4]
 8005a84:	680b      	ldr	r3, [r1, #0]
 8005a86:	4688      	mov	r8, r1
 8005a88:	f04f 0b00 	mov.w	fp, #0
 8005a8c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005a90:	f848 3b1c 	str.w	r3, [r8], #28
 8005a94:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005a98:	4607      	mov	r7, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	4645      	mov	r5, r8
 8005a9e:	465a      	mov	r2, fp
 8005aa0:	46d9      	mov	r9, fp
 8005aa2:	f8cd b008 	str.w	fp, [sp, #8]
 8005aa6:	68a1      	ldr	r1, [r4, #8]
 8005aa8:	b181      	cbz	r1, 8005acc <_scanf_float+0x70>
 8005aaa:	6833      	ldr	r3, [r6, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b49      	cmp	r3, #73	; 0x49
 8005ab0:	d071      	beq.n	8005b96 <_scanf_float+0x13a>
 8005ab2:	d84d      	bhi.n	8005b50 <_scanf_float+0xf4>
 8005ab4:	2b39      	cmp	r3, #57	; 0x39
 8005ab6:	d840      	bhi.n	8005b3a <_scanf_float+0xde>
 8005ab8:	2b31      	cmp	r3, #49	; 0x31
 8005aba:	f080 8088 	bcs.w	8005bce <_scanf_float+0x172>
 8005abe:	2b2d      	cmp	r3, #45	; 0x2d
 8005ac0:	f000 8090 	beq.w	8005be4 <_scanf_float+0x188>
 8005ac4:	d815      	bhi.n	8005af2 <_scanf_float+0x96>
 8005ac6:	2b2b      	cmp	r3, #43	; 0x2b
 8005ac8:	f000 808c 	beq.w	8005be4 <_scanf_float+0x188>
 8005acc:	f1b9 0f00 	cmp.w	r9, #0
 8005ad0:	d003      	beq.n	8005ada <_scanf_float+0x7e>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	3a01      	subs	r2, #1
 8005adc:	2a01      	cmp	r2, #1
 8005ade:	f200 80ea 	bhi.w	8005cb6 <_scanf_float+0x25a>
 8005ae2:	4545      	cmp	r5, r8
 8005ae4:	f200 80dc 	bhi.w	8005ca0 <_scanf_float+0x244>
 8005ae8:	2601      	movs	r6, #1
 8005aea:	4630      	mov	r0, r6
 8005aec:	b007      	add	sp, #28
 8005aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af2:	2b2e      	cmp	r3, #46	; 0x2e
 8005af4:	f000 809f 	beq.w	8005c36 <_scanf_float+0x1da>
 8005af8:	2b30      	cmp	r3, #48	; 0x30
 8005afa:	d1e7      	bne.n	8005acc <_scanf_float+0x70>
 8005afc:	6820      	ldr	r0, [r4, #0]
 8005afe:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005b02:	d064      	beq.n	8005bce <_scanf_float+0x172>
 8005b04:	9b01      	ldr	r3, [sp, #4]
 8005b06:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005b0a:	6020      	str	r0, [r4, #0]
 8005b0c:	f109 0901 	add.w	r9, r9, #1
 8005b10:	b11b      	cbz	r3, 8005b1a <_scanf_float+0xbe>
 8005b12:	3b01      	subs	r3, #1
 8005b14:	3101      	adds	r1, #1
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	60a1      	str	r1, [r4, #8]
 8005b1a:	68a3      	ldr	r3, [r4, #8]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	60a3      	str	r3, [r4, #8]
 8005b20:	6923      	ldr	r3, [r4, #16]
 8005b22:	3301      	adds	r3, #1
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	6873      	ldr	r3, [r6, #4]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	6073      	str	r3, [r6, #4]
 8005b2e:	f340 80ac 	ble.w	8005c8a <_scanf_float+0x22e>
 8005b32:	6833      	ldr	r3, [r6, #0]
 8005b34:	3301      	adds	r3, #1
 8005b36:	6033      	str	r3, [r6, #0]
 8005b38:	e7b5      	b.n	8005aa6 <_scanf_float+0x4a>
 8005b3a:	2b45      	cmp	r3, #69	; 0x45
 8005b3c:	f000 8085 	beq.w	8005c4a <_scanf_float+0x1ee>
 8005b40:	2b46      	cmp	r3, #70	; 0x46
 8005b42:	d06a      	beq.n	8005c1a <_scanf_float+0x1be>
 8005b44:	2b41      	cmp	r3, #65	; 0x41
 8005b46:	d1c1      	bne.n	8005acc <_scanf_float+0x70>
 8005b48:	2a01      	cmp	r2, #1
 8005b4a:	d1bf      	bne.n	8005acc <_scanf_float+0x70>
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	e046      	b.n	8005bde <_scanf_float+0x182>
 8005b50:	2b65      	cmp	r3, #101	; 0x65
 8005b52:	d07a      	beq.n	8005c4a <_scanf_float+0x1ee>
 8005b54:	d818      	bhi.n	8005b88 <_scanf_float+0x12c>
 8005b56:	2b54      	cmp	r3, #84	; 0x54
 8005b58:	d066      	beq.n	8005c28 <_scanf_float+0x1cc>
 8005b5a:	d811      	bhi.n	8005b80 <_scanf_float+0x124>
 8005b5c:	2b4e      	cmp	r3, #78	; 0x4e
 8005b5e:	d1b5      	bne.n	8005acc <_scanf_float+0x70>
 8005b60:	2a00      	cmp	r2, #0
 8005b62:	d146      	bne.n	8005bf2 <_scanf_float+0x196>
 8005b64:	f1b9 0f00 	cmp.w	r9, #0
 8005b68:	d145      	bne.n	8005bf6 <_scanf_float+0x19a>
 8005b6a:	6821      	ldr	r1, [r4, #0]
 8005b6c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005b70:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005b74:	d13f      	bne.n	8005bf6 <_scanf_float+0x19a>
 8005b76:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005b7a:	6021      	str	r1, [r4, #0]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	e02e      	b.n	8005bde <_scanf_float+0x182>
 8005b80:	2b59      	cmp	r3, #89	; 0x59
 8005b82:	d01e      	beq.n	8005bc2 <_scanf_float+0x166>
 8005b84:	2b61      	cmp	r3, #97	; 0x61
 8005b86:	e7de      	b.n	8005b46 <_scanf_float+0xea>
 8005b88:	2b6e      	cmp	r3, #110	; 0x6e
 8005b8a:	d0e9      	beq.n	8005b60 <_scanf_float+0x104>
 8005b8c:	d815      	bhi.n	8005bba <_scanf_float+0x15e>
 8005b8e:	2b66      	cmp	r3, #102	; 0x66
 8005b90:	d043      	beq.n	8005c1a <_scanf_float+0x1be>
 8005b92:	2b69      	cmp	r3, #105	; 0x69
 8005b94:	d19a      	bne.n	8005acc <_scanf_float+0x70>
 8005b96:	f1bb 0f00 	cmp.w	fp, #0
 8005b9a:	d138      	bne.n	8005c0e <_scanf_float+0x1b2>
 8005b9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ba0:	d197      	bne.n	8005ad2 <_scanf_float+0x76>
 8005ba2:	6821      	ldr	r1, [r4, #0]
 8005ba4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005ba8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005bac:	d195      	bne.n	8005ada <_scanf_float+0x7e>
 8005bae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005bb2:	6021      	str	r1, [r4, #0]
 8005bb4:	f04f 0b01 	mov.w	fp, #1
 8005bb8:	e011      	b.n	8005bde <_scanf_float+0x182>
 8005bba:	2b74      	cmp	r3, #116	; 0x74
 8005bbc:	d034      	beq.n	8005c28 <_scanf_float+0x1cc>
 8005bbe:	2b79      	cmp	r3, #121	; 0x79
 8005bc0:	d184      	bne.n	8005acc <_scanf_float+0x70>
 8005bc2:	f1bb 0f07 	cmp.w	fp, #7
 8005bc6:	d181      	bne.n	8005acc <_scanf_float+0x70>
 8005bc8:	f04f 0b08 	mov.w	fp, #8
 8005bcc:	e007      	b.n	8005bde <_scanf_float+0x182>
 8005bce:	eb12 0f0b 	cmn.w	r2, fp
 8005bd2:	f47f af7b 	bne.w	8005acc <_scanf_float+0x70>
 8005bd6:	6821      	ldr	r1, [r4, #0]
 8005bd8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005bdc:	6021      	str	r1, [r4, #0]
 8005bde:	702b      	strb	r3, [r5, #0]
 8005be0:	3501      	adds	r5, #1
 8005be2:	e79a      	b.n	8005b1a <_scanf_float+0xbe>
 8005be4:	6821      	ldr	r1, [r4, #0]
 8005be6:	0608      	lsls	r0, r1, #24
 8005be8:	f57f af70 	bpl.w	8005acc <_scanf_float+0x70>
 8005bec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005bf0:	e7f4      	b.n	8005bdc <_scanf_float+0x180>
 8005bf2:	2a02      	cmp	r2, #2
 8005bf4:	d047      	beq.n	8005c86 <_scanf_float+0x22a>
 8005bf6:	f1bb 0f01 	cmp.w	fp, #1
 8005bfa:	d003      	beq.n	8005c04 <_scanf_float+0x1a8>
 8005bfc:	f1bb 0f04 	cmp.w	fp, #4
 8005c00:	f47f af64 	bne.w	8005acc <_scanf_float+0x70>
 8005c04:	f10b 0b01 	add.w	fp, fp, #1
 8005c08:	fa5f fb8b 	uxtb.w	fp, fp
 8005c0c:	e7e7      	b.n	8005bde <_scanf_float+0x182>
 8005c0e:	f1bb 0f03 	cmp.w	fp, #3
 8005c12:	d0f7      	beq.n	8005c04 <_scanf_float+0x1a8>
 8005c14:	f1bb 0f05 	cmp.w	fp, #5
 8005c18:	e7f2      	b.n	8005c00 <_scanf_float+0x1a4>
 8005c1a:	f1bb 0f02 	cmp.w	fp, #2
 8005c1e:	f47f af55 	bne.w	8005acc <_scanf_float+0x70>
 8005c22:	f04f 0b03 	mov.w	fp, #3
 8005c26:	e7da      	b.n	8005bde <_scanf_float+0x182>
 8005c28:	f1bb 0f06 	cmp.w	fp, #6
 8005c2c:	f47f af4e 	bne.w	8005acc <_scanf_float+0x70>
 8005c30:	f04f 0b07 	mov.w	fp, #7
 8005c34:	e7d3      	b.n	8005bde <_scanf_float+0x182>
 8005c36:	6821      	ldr	r1, [r4, #0]
 8005c38:	0588      	lsls	r0, r1, #22
 8005c3a:	f57f af47 	bpl.w	8005acc <_scanf_float+0x70>
 8005c3e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005c42:	6021      	str	r1, [r4, #0]
 8005c44:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c48:	e7c9      	b.n	8005bde <_scanf_float+0x182>
 8005c4a:	6821      	ldr	r1, [r4, #0]
 8005c4c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005c50:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005c54:	d006      	beq.n	8005c64 <_scanf_float+0x208>
 8005c56:	0548      	lsls	r0, r1, #21
 8005c58:	f57f af38 	bpl.w	8005acc <_scanf_float+0x70>
 8005c5c:	f1b9 0f00 	cmp.w	r9, #0
 8005c60:	f43f af3b 	beq.w	8005ada <_scanf_float+0x7e>
 8005c64:	0588      	lsls	r0, r1, #22
 8005c66:	bf58      	it	pl
 8005c68:	9802      	ldrpl	r0, [sp, #8]
 8005c6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005c6e:	bf58      	it	pl
 8005c70:	eba9 0000 	subpl.w	r0, r9, r0
 8005c74:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005c78:	bf58      	it	pl
 8005c7a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005c7e:	6021      	str	r1, [r4, #0]
 8005c80:	f04f 0900 	mov.w	r9, #0
 8005c84:	e7ab      	b.n	8005bde <_scanf_float+0x182>
 8005c86:	2203      	movs	r2, #3
 8005c88:	e7a9      	b.n	8005bde <_scanf_float+0x182>
 8005c8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c8e:	9205      	str	r2, [sp, #20]
 8005c90:	4631      	mov	r1, r6
 8005c92:	4638      	mov	r0, r7
 8005c94:	4798      	blx	r3
 8005c96:	9a05      	ldr	r2, [sp, #20]
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	f43f af04 	beq.w	8005aa6 <_scanf_float+0x4a>
 8005c9e:	e715      	b.n	8005acc <_scanf_float+0x70>
 8005ca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ca4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005ca8:	4632      	mov	r2, r6
 8005caa:	4638      	mov	r0, r7
 8005cac:	4798      	blx	r3
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	e715      	b.n	8005ae2 <_scanf_float+0x86>
 8005cb6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005cba:	2b06      	cmp	r3, #6
 8005cbc:	d80a      	bhi.n	8005cd4 <_scanf_float+0x278>
 8005cbe:	f1bb 0f02 	cmp.w	fp, #2
 8005cc2:	d968      	bls.n	8005d96 <_scanf_float+0x33a>
 8005cc4:	f1ab 0b03 	sub.w	fp, fp, #3
 8005cc8:	fa5f fb8b 	uxtb.w	fp, fp
 8005ccc:	eba5 0b0b 	sub.w	fp, r5, fp
 8005cd0:	455d      	cmp	r5, fp
 8005cd2:	d14b      	bne.n	8005d6c <_scanf_float+0x310>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	05da      	lsls	r2, r3, #23
 8005cd8:	d51f      	bpl.n	8005d1a <_scanf_float+0x2be>
 8005cda:	055b      	lsls	r3, r3, #21
 8005cdc:	d468      	bmi.n	8005db0 <_scanf_float+0x354>
 8005cde:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005ce2:	6923      	ldr	r3, [r4, #16]
 8005ce4:	2965      	cmp	r1, #101	; 0x65
 8005ce6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005cea:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	d00d      	beq.n	8005d0e <_scanf_float+0x2b2>
 8005cf2:	2945      	cmp	r1, #69	; 0x45
 8005cf4:	d00b      	beq.n	8005d0e <_scanf_float+0x2b2>
 8005cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cfa:	4632      	mov	r2, r6
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	4798      	blx	r3
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	f1a5 0b02 	sub.w	fp, r5, #2
 8005d0c:	6123      	str	r3, [r4, #16]
 8005d0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d12:	4632      	mov	r2, r6
 8005d14:	4638      	mov	r0, r7
 8005d16:	4798      	blx	r3
 8005d18:	465d      	mov	r5, fp
 8005d1a:	6826      	ldr	r6, [r4, #0]
 8005d1c:	f016 0610 	ands.w	r6, r6, #16
 8005d20:	d17a      	bne.n	8005e18 <_scanf_float+0x3bc>
 8005d22:	702e      	strb	r6, [r5, #0]
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2e:	d142      	bne.n	8005db6 <_scanf_float+0x35a>
 8005d30:	9b02      	ldr	r3, [sp, #8]
 8005d32:	eba9 0303 	sub.w	r3, r9, r3
 8005d36:	425a      	negs	r2, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d149      	bne.n	8005dd0 <_scanf_float+0x374>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4641      	mov	r1, r8
 8005d40:	4638      	mov	r0, r7
 8005d42:	f000 ff21 	bl	8006b88 <_strtod_r>
 8005d46:	6825      	ldr	r5, [r4, #0]
 8005d48:	f8da 3000 	ldr.w	r3, [sl]
 8005d4c:	f015 0f02 	tst.w	r5, #2
 8005d50:	f103 0204 	add.w	r2, r3, #4
 8005d54:	ec59 8b10 	vmov	r8, r9, d0
 8005d58:	f8ca 2000 	str.w	r2, [sl]
 8005d5c:	d043      	beq.n	8005de6 <_scanf_float+0x38a>
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	e9c3 8900 	strd	r8, r9, [r3]
 8005d64:	68e3      	ldr	r3, [r4, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60e3      	str	r3, [r4, #12]
 8005d6a:	e6be      	b.n	8005aea <_scanf_float+0x8e>
 8005d6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005d74:	4632      	mov	r2, r6
 8005d76:	4638      	mov	r0, r7
 8005d78:	4798      	blx	r3
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	e7a6      	b.n	8005cd0 <_scanf_float+0x274>
 8005d82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d86:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005d8a:	4632      	mov	r2, r6
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	4798      	blx	r3
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	6123      	str	r3, [r4, #16]
 8005d96:	4545      	cmp	r5, r8
 8005d98:	d8f3      	bhi.n	8005d82 <_scanf_float+0x326>
 8005d9a:	e6a5      	b.n	8005ae8 <_scanf_float+0x8c>
 8005d9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005da0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005da4:	4632      	mov	r2, r6
 8005da6:	4638      	mov	r0, r7
 8005da8:	4798      	blx	r3
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	6123      	str	r3, [r4, #16]
 8005db0:	4545      	cmp	r5, r8
 8005db2:	d8f3      	bhi.n	8005d9c <_scanf_float+0x340>
 8005db4:	e698      	b.n	8005ae8 <_scanf_float+0x8c>
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0bf      	beq.n	8005d3c <_scanf_float+0x2e0>
 8005dbc:	9904      	ldr	r1, [sp, #16]
 8005dbe:	230a      	movs	r3, #10
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	3101      	adds	r1, #1
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	f000 ff6b 	bl	8006ca0 <_strtol_r>
 8005dca:	9b03      	ldr	r3, [sp, #12]
 8005dcc:	9d04      	ldr	r5, [sp, #16]
 8005dce:	1ac2      	subs	r2, r0, r3
 8005dd0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005dd4:	429d      	cmp	r5, r3
 8005dd6:	bf28      	it	cs
 8005dd8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005ddc:	490f      	ldr	r1, [pc, #60]	; (8005e1c <_scanf_float+0x3c0>)
 8005dde:	4628      	mov	r0, r5
 8005de0:	f000 f8a0 	bl	8005f24 <siprintf>
 8005de4:	e7aa      	b.n	8005d3c <_scanf_float+0x2e0>
 8005de6:	f015 0504 	ands.w	r5, r5, #4
 8005dea:	d1b8      	bne.n	8005d5e <_scanf_float+0x302>
 8005dec:	681f      	ldr	r7, [r3, #0]
 8005dee:	ee10 2a10 	vmov	r2, s0
 8005df2:	464b      	mov	r3, r9
 8005df4:	ee10 0a10 	vmov	r0, s0
 8005df8:	4649      	mov	r1, r9
 8005dfa:	f7fa feaf 	bl	8000b5c <__aeabi_dcmpun>
 8005dfe:	b128      	cbz	r0, 8005e0c <_scanf_float+0x3b0>
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 f889 	bl	8005f18 <nanf>
 8005e06:	ed87 0a00 	vstr	s0, [r7]
 8005e0a:	e7ab      	b.n	8005d64 <_scanf_float+0x308>
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4649      	mov	r1, r9
 8005e10:	f7fa ff02 	bl	8000c18 <__aeabi_d2f>
 8005e14:	6038      	str	r0, [r7, #0]
 8005e16:	e7a5      	b.n	8005d64 <_scanf_float+0x308>
 8005e18:	2600      	movs	r6, #0
 8005e1a:	e666      	b.n	8005aea <_scanf_float+0x8e>
 8005e1c:	08009af2 	.word	0x08009af2

08005e20 <iprintf>:
 8005e20:	b40f      	push	{r0, r1, r2, r3}
 8005e22:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <iprintf+0x2c>)
 8005e24:	b513      	push	{r0, r1, r4, lr}
 8005e26:	681c      	ldr	r4, [r3, #0]
 8005e28:	b124      	cbz	r4, 8005e34 <iprintf+0x14>
 8005e2a:	69a3      	ldr	r3, [r4, #24]
 8005e2c:	b913      	cbnz	r3, 8005e34 <iprintf+0x14>
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f001 ff62 	bl	8007cf8 <__sinit>
 8005e34:	ab05      	add	r3, sp, #20
 8005e36:	9a04      	ldr	r2, [sp, #16]
 8005e38:	68a1      	ldr	r1, [r4, #8]
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f003 f9b9 	bl	80091b4 <_vfiprintf_r>
 8005e42:	b002      	add	sp, #8
 8005e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e48:	b004      	add	sp, #16
 8005e4a:	4770      	bx	lr
 8005e4c:	20000038 	.word	0x20000038

08005e50 <_puts_r>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	460e      	mov	r6, r1
 8005e54:	4605      	mov	r5, r0
 8005e56:	b118      	cbz	r0, 8005e60 <_puts_r+0x10>
 8005e58:	6983      	ldr	r3, [r0, #24]
 8005e5a:	b90b      	cbnz	r3, 8005e60 <_puts_r+0x10>
 8005e5c:	f001 ff4c 	bl	8007cf8 <__sinit>
 8005e60:	69ab      	ldr	r3, [r5, #24]
 8005e62:	68ac      	ldr	r4, [r5, #8]
 8005e64:	b913      	cbnz	r3, 8005e6c <_puts_r+0x1c>
 8005e66:	4628      	mov	r0, r5
 8005e68:	f001 ff46 	bl	8007cf8 <__sinit>
 8005e6c:	4b23      	ldr	r3, [pc, #140]	; (8005efc <_puts_r+0xac>)
 8005e6e:	429c      	cmp	r4, r3
 8005e70:	d117      	bne.n	8005ea2 <_puts_r+0x52>
 8005e72:	686c      	ldr	r4, [r5, #4]
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	071b      	lsls	r3, r3, #28
 8005e78:	d51d      	bpl.n	8005eb6 <_puts_r+0x66>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	b1db      	cbz	r3, 8005eb6 <_puts_r+0x66>
 8005e7e:	3e01      	subs	r6, #1
 8005e80:	68a3      	ldr	r3, [r4, #8]
 8005e82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e86:	3b01      	subs	r3, #1
 8005e88:	60a3      	str	r3, [r4, #8]
 8005e8a:	b9e9      	cbnz	r1, 8005ec8 <_puts_r+0x78>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	da2e      	bge.n	8005eee <_puts_r+0x9e>
 8005e90:	4622      	mov	r2, r4
 8005e92:	210a      	movs	r1, #10
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 ff2b 	bl	8006cf0 <__swbuf_r>
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d011      	beq.n	8005ec2 <_puts_r+0x72>
 8005e9e:	200a      	movs	r0, #10
 8005ea0:	e011      	b.n	8005ec6 <_puts_r+0x76>
 8005ea2:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <_puts_r+0xb0>)
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	d101      	bne.n	8005eac <_puts_r+0x5c>
 8005ea8:	68ac      	ldr	r4, [r5, #8]
 8005eaa:	e7e3      	b.n	8005e74 <_puts_r+0x24>
 8005eac:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <_puts_r+0xb4>)
 8005eae:	429c      	cmp	r4, r3
 8005eb0:	bf08      	it	eq
 8005eb2:	68ec      	ldreq	r4, [r5, #12]
 8005eb4:	e7de      	b.n	8005e74 <_puts_r+0x24>
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f000 ff79 	bl	8006db0 <__swsetup_r>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d0dd      	beq.n	8005e7e <_puts_r+0x2e>
 8005ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	da04      	bge.n	8005ed6 <_puts_r+0x86>
 8005ecc:	69a2      	ldr	r2, [r4, #24]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	dc06      	bgt.n	8005ee0 <_puts_r+0x90>
 8005ed2:	290a      	cmp	r1, #10
 8005ed4:	d004      	beq.n	8005ee0 <_puts_r+0x90>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	6022      	str	r2, [r4, #0]
 8005edc:	7019      	strb	r1, [r3, #0]
 8005ede:	e7cf      	b.n	8005e80 <_puts_r+0x30>
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 ff04 	bl	8006cf0 <__swbuf_r>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d1c9      	bne.n	8005e80 <_puts_r+0x30>
 8005eec:	e7e9      	b.n	8005ec2 <_puts_r+0x72>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	200a      	movs	r0, #10
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	6022      	str	r2, [r4, #0]
 8005ef6:	7018      	strb	r0, [r3, #0]
 8005ef8:	e7e5      	b.n	8005ec6 <_puts_r+0x76>
 8005efa:	bf00      	nop
 8005efc:	08009c78 	.word	0x08009c78
 8005f00:	08009c98 	.word	0x08009c98
 8005f04:	08009c58 	.word	0x08009c58

08005f08 <puts>:
 8005f08:	4b02      	ldr	r3, [pc, #8]	; (8005f14 <puts+0xc>)
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	f7ff bf9f 	b.w	8005e50 <_puts_r>
 8005f12:	bf00      	nop
 8005f14:	20000038 	.word	0x20000038

08005f18 <nanf>:
 8005f18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005f20 <nanf+0x8>
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	7fc00000 	.word	0x7fc00000

08005f24 <siprintf>:
 8005f24:	b40e      	push	{r1, r2, r3}
 8005f26:	b500      	push	{lr}
 8005f28:	b09c      	sub	sp, #112	; 0x70
 8005f2a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f2c:	9002      	str	r0, [sp, #8]
 8005f2e:	9006      	str	r0, [sp, #24]
 8005f30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f34:	4809      	ldr	r0, [pc, #36]	; (8005f5c <siprintf+0x38>)
 8005f36:	9107      	str	r1, [sp, #28]
 8005f38:	9104      	str	r1, [sp, #16]
 8005f3a:	4909      	ldr	r1, [pc, #36]	; (8005f60 <siprintf+0x3c>)
 8005f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f40:	9105      	str	r1, [sp, #20]
 8005f42:	6800      	ldr	r0, [r0, #0]
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	a902      	add	r1, sp, #8
 8005f48:	f003 f812 	bl	8008f70 <_svfiprintf_r>
 8005f4c:	9b02      	ldr	r3, [sp, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	b01c      	add	sp, #112	; 0x70
 8005f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f58:	b003      	add	sp, #12
 8005f5a:	4770      	bx	lr
 8005f5c:	20000038 	.word	0x20000038
 8005f60:	ffff0208 	.word	0xffff0208

08005f64 <sulp>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	4604      	mov	r4, r0
 8005f68:	460d      	mov	r5, r1
 8005f6a:	ec45 4b10 	vmov	d0, r4, r5
 8005f6e:	4616      	mov	r6, r2
 8005f70:	f002 fdba 	bl	8008ae8 <__ulp>
 8005f74:	ec51 0b10 	vmov	r0, r1, d0
 8005f78:	b17e      	cbz	r6, 8005f9a <sulp+0x36>
 8005f7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005f7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	dd09      	ble.n	8005f9a <sulp+0x36>
 8005f86:	051b      	lsls	r3, r3, #20
 8005f88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f8c:	2400      	movs	r4, #0
 8005f8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f92:	4622      	mov	r2, r4
 8005f94:	462b      	mov	r3, r5
 8005f96:	f7fa fb47 	bl	8000628 <__aeabi_dmul>
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	0000      	movs	r0, r0
	...

08005fa0 <_strtod_l>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	461f      	mov	r7, r3
 8005fa6:	b0a1      	sub	sp, #132	; 0x84
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4681      	mov	r9, r0
 8005fac:	4638      	mov	r0, r7
 8005fae:	460e      	mov	r6, r1
 8005fb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fb2:	931c      	str	r3, [sp, #112]	; 0x70
 8005fb4:	f002 fa50 	bl	8008458 <__localeconv_l>
 8005fb8:	4680      	mov	r8, r0
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	f7fa f91a 	bl	80001f4 <strlen>
 8005fc0:	f04f 0a00 	mov.w	sl, #0
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	f04f 0b00 	mov.w	fp, #0
 8005fca:	961b      	str	r6, [sp, #108]	; 0x6c
 8005fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fce:	781a      	ldrb	r2, [r3, #0]
 8005fd0:	2a0d      	cmp	r2, #13
 8005fd2:	d832      	bhi.n	800603a <_strtod_l+0x9a>
 8005fd4:	2a09      	cmp	r2, #9
 8005fd6:	d236      	bcs.n	8006046 <_strtod_l+0xa6>
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	d03e      	beq.n	800605a <_strtod_l+0xba>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	930d      	str	r3, [sp, #52]	; 0x34
 8005fe0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005fe2:	782b      	ldrb	r3, [r5, #0]
 8005fe4:	2b30      	cmp	r3, #48	; 0x30
 8005fe6:	f040 80ac 	bne.w	8006142 <_strtod_l+0x1a2>
 8005fea:	786b      	ldrb	r3, [r5, #1]
 8005fec:	2b58      	cmp	r3, #88	; 0x58
 8005fee:	d001      	beq.n	8005ff4 <_strtod_l+0x54>
 8005ff0:	2b78      	cmp	r3, #120	; 0x78
 8005ff2:	d167      	bne.n	80060c4 <_strtod_l+0x124>
 8005ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	ab1c      	add	r3, sp, #112	; 0x70
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	9702      	str	r7, [sp, #8]
 8005ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8006000:	4a88      	ldr	r2, [pc, #544]	; (8006224 <_strtod_l+0x284>)
 8006002:	a91b      	add	r1, sp, #108	; 0x6c
 8006004:	4648      	mov	r0, r9
 8006006:	f001 ff50 	bl	8007eaa <__gethex>
 800600a:	f010 0407 	ands.w	r4, r0, #7
 800600e:	4606      	mov	r6, r0
 8006010:	d005      	beq.n	800601e <_strtod_l+0x7e>
 8006012:	2c06      	cmp	r4, #6
 8006014:	d12b      	bne.n	800606e <_strtod_l+0xce>
 8006016:	3501      	adds	r5, #1
 8006018:	2300      	movs	r3, #0
 800601a:	951b      	str	r5, [sp, #108]	; 0x6c
 800601c:	930d      	str	r3, [sp, #52]	; 0x34
 800601e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 859a 	bne.w	8006b5a <_strtod_l+0xbba>
 8006026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006028:	b1e3      	cbz	r3, 8006064 <_strtod_l+0xc4>
 800602a:	4652      	mov	r2, sl
 800602c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006030:	ec43 2b10 	vmov	d0, r2, r3
 8006034:	b021      	add	sp, #132	; 0x84
 8006036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603a:	2a2b      	cmp	r2, #43	; 0x2b
 800603c:	d015      	beq.n	800606a <_strtod_l+0xca>
 800603e:	2a2d      	cmp	r2, #45	; 0x2d
 8006040:	d004      	beq.n	800604c <_strtod_l+0xac>
 8006042:	2a20      	cmp	r2, #32
 8006044:	d1ca      	bne.n	8005fdc <_strtod_l+0x3c>
 8006046:	3301      	adds	r3, #1
 8006048:	931b      	str	r3, [sp, #108]	; 0x6c
 800604a:	e7bf      	b.n	8005fcc <_strtod_l+0x2c>
 800604c:	2201      	movs	r2, #1
 800604e:	920d      	str	r2, [sp, #52]	; 0x34
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	921b      	str	r2, [sp, #108]	; 0x6c
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1c2      	bne.n	8005fe0 <_strtod_l+0x40>
 800605a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800605c:	961b      	str	r6, [sp, #108]	; 0x6c
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 8579 	bne.w	8006b56 <_strtod_l+0xbb6>
 8006064:	4652      	mov	r2, sl
 8006066:	465b      	mov	r3, fp
 8006068:	e7e2      	b.n	8006030 <_strtod_l+0x90>
 800606a:	2200      	movs	r2, #0
 800606c:	e7ef      	b.n	800604e <_strtod_l+0xae>
 800606e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006070:	b13a      	cbz	r2, 8006082 <_strtod_l+0xe2>
 8006072:	2135      	movs	r1, #53	; 0x35
 8006074:	a81e      	add	r0, sp, #120	; 0x78
 8006076:	f002 fe2f 	bl	8008cd8 <__copybits>
 800607a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800607c:	4648      	mov	r0, r9
 800607e:	f002 fa9b 	bl	80085b8 <_Bfree>
 8006082:	3c01      	subs	r4, #1
 8006084:	2c04      	cmp	r4, #4
 8006086:	d806      	bhi.n	8006096 <_strtod_l+0xf6>
 8006088:	e8df f004 	tbb	[pc, r4]
 800608c:	1714030a 	.word	0x1714030a
 8006090:	0a          	.byte	0x0a
 8006091:	00          	.byte	0x00
 8006092:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006096:	0730      	lsls	r0, r6, #28
 8006098:	d5c1      	bpl.n	800601e <_strtod_l+0x7e>
 800609a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800609e:	e7be      	b.n	800601e <_strtod_l+0x7e>
 80060a0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80060a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80060a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060aa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80060ae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80060b2:	e7f0      	b.n	8006096 <_strtod_l+0xf6>
 80060b4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006228 <_strtod_l+0x288>
 80060b8:	e7ed      	b.n	8006096 <_strtod_l+0xf6>
 80060ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80060be:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80060c2:	e7e8      	b.n	8006096 <_strtod_l+0xf6>
 80060c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b30      	cmp	r3, #48	; 0x30
 80060ce:	d0f9      	beq.n	80060c4 <_strtod_l+0x124>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0a4      	beq.n	800601e <_strtod_l+0x7e>
 80060d4:	2301      	movs	r3, #1
 80060d6:	2500      	movs	r5, #0
 80060d8:	9306      	str	r3, [sp, #24]
 80060da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060dc:	9308      	str	r3, [sp, #32]
 80060de:	9507      	str	r5, [sp, #28]
 80060e0:	9505      	str	r5, [sp, #20]
 80060e2:	220a      	movs	r2, #10
 80060e4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80060e6:	7807      	ldrb	r7, [r0, #0]
 80060e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80060ec:	b2d9      	uxtb	r1, r3
 80060ee:	2909      	cmp	r1, #9
 80060f0:	d929      	bls.n	8006146 <_strtod_l+0x1a6>
 80060f2:	4622      	mov	r2, r4
 80060f4:	f8d8 1000 	ldr.w	r1, [r8]
 80060f8:	f003 f9c5 	bl	8009486 <strncmp>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d031      	beq.n	8006164 <_strtod_l+0x1c4>
 8006100:	2000      	movs	r0, #0
 8006102:	9c05      	ldr	r4, [sp, #20]
 8006104:	9004      	str	r0, [sp, #16]
 8006106:	463b      	mov	r3, r7
 8006108:	4602      	mov	r2, r0
 800610a:	2b65      	cmp	r3, #101	; 0x65
 800610c:	d001      	beq.n	8006112 <_strtod_l+0x172>
 800610e:	2b45      	cmp	r3, #69	; 0x45
 8006110:	d114      	bne.n	800613c <_strtod_l+0x19c>
 8006112:	b924      	cbnz	r4, 800611e <_strtod_l+0x17e>
 8006114:	b910      	cbnz	r0, 800611c <_strtod_l+0x17c>
 8006116:	9b06      	ldr	r3, [sp, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d09e      	beq.n	800605a <_strtod_l+0xba>
 800611c:	2400      	movs	r4, #0
 800611e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006120:	1c73      	adds	r3, r6, #1
 8006122:	931b      	str	r3, [sp, #108]	; 0x6c
 8006124:	7873      	ldrb	r3, [r6, #1]
 8006126:	2b2b      	cmp	r3, #43	; 0x2b
 8006128:	d078      	beq.n	800621c <_strtod_l+0x27c>
 800612a:	2b2d      	cmp	r3, #45	; 0x2d
 800612c:	d070      	beq.n	8006210 <_strtod_l+0x270>
 800612e:	f04f 0c00 	mov.w	ip, #0
 8006132:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006136:	2f09      	cmp	r7, #9
 8006138:	d97c      	bls.n	8006234 <_strtod_l+0x294>
 800613a:	961b      	str	r6, [sp, #108]	; 0x6c
 800613c:	f04f 0e00 	mov.w	lr, #0
 8006140:	e09a      	b.n	8006278 <_strtod_l+0x2d8>
 8006142:	2300      	movs	r3, #0
 8006144:	e7c7      	b.n	80060d6 <_strtod_l+0x136>
 8006146:	9905      	ldr	r1, [sp, #20]
 8006148:	2908      	cmp	r1, #8
 800614a:	bfdd      	ittte	le
 800614c:	9907      	ldrle	r1, [sp, #28]
 800614e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006152:	9307      	strle	r3, [sp, #28]
 8006154:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006158:	9b05      	ldr	r3, [sp, #20]
 800615a:	3001      	adds	r0, #1
 800615c:	3301      	adds	r3, #1
 800615e:	9305      	str	r3, [sp, #20]
 8006160:	901b      	str	r0, [sp, #108]	; 0x6c
 8006162:	e7bf      	b.n	80060e4 <_strtod_l+0x144>
 8006164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006166:	191a      	adds	r2, r3, r4
 8006168:	921b      	str	r2, [sp, #108]	; 0x6c
 800616a:	9a05      	ldr	r2, [sp, #20]
 800616c:	5d1b      	ldrb	r3, [r3, r4]
 800616e:	2a00      	cmp	r2, #0
 8006170:	d037      	beq.n	80061e2 <_strtod_l+0x242>
 8006172:	9c05      	ldr	r4, [sp, #20]
 8006174:	4602      	mov	r2, r0
 8006176:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800617a:	2909      	cmp	r1, #9
 800617c:	d913      	bls.n	80061a6 <_strtod_l+0x206>
 800617e:	2101      	movs	r1, #1
 8006180:	9104      	str	r1, [sp, #16]
 8006182:	e7c2      	b.n	800610a <_strtod_l+0x16a>
 8006184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	921b      	str	r2, [sp, #108]	; 0x6c
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	3001      	adds	r0, #1
 800618e:	2b30      	cmp	r3, #48	; 0x30
 8006190:	d0f8      	beq.n	8006184 <_strtod_l+0x1e4>
 8006192:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006196:	2a08      	cmp	r2, #8
 8006198:	f200 84e4 	bhi.w	8006b64 <_strtod_l+0xbc4>
 800619c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800619e:	9208      	str	r2, [sp, #32]
 80061a0:	4602      	mov	r2, r0
 80061a2:	2000      	movs	r0, #0
 80061a4:	4604      	mov	r4, r0
 80061a6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80061aa:	f100 0101 	add.w	r1, r0, #1
 80061ae:	d012      	beq.n	80061d6 <_strtod_l+0x236>
 80061b0:	440a      	add	r2, r1
 80061b2:	eb00 0c04 	add.w	ip, r0, r4
 80061b6:	4621      	mov	r1, r4
 80061b8:	270a      	movs	r7, #10
 80061ba:	458c      	cmp	ip, r1
 80061bc:	d113      	bne.n	80061e6 <_strtod_l+0x246>
 80061be:	1821      	adds	r1, r4, r0
 80061c0:	2908      	cmp	r1, #8
 80061c2:	f104 0401 	add.w	r4, r4, #1
 80061c6:	4404      	add	r4, r0
 80061c8:	dc19      	bgt.n	80061fe <_strtod_l+0x25e>
 80061ca:	9b07      	ldr	r3, [sp, #28]
 80061cc:	210a      	movs	r1, #10
 80061ce:	fb01 e303 	mla	r3, r1, r3, lr
 80061d2:	9307      	str	r3, [sp, #28]
 80061d4:	2100      	movs	r1, #0
 80061d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061d8:	1c58      	adds	r0, r3, #1
 80061da:	901b      	str	r0, [sp, #108]	; 0x6c
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	4608      	mov	r0, r1
 80061e0:	e7c9      	b.n	8006176 <_strtod_l+0x1d6>
 80061e2:	9805      	ldr	r0, [sp, #20]
 80061e4:	e7d3      	b.n	800618e <_strtod_l+0x1ee>
 80061e6:	2908      	cmp	r1, #8
 80061e8:	f101 0101 	add.w	r1, r1, #1
 80061ec:	dc03      	bgt.n	80061f6 <_strtod_l+0x256>
 80061ee:	9b07      	ldr	r3, [sp, #28]
 80061f0:	437b      	muls	r3, r7
 80061f2:	9307      	str	r3, [sp, #28]
 80061f4:	e7e1      	b.n	80061ba <_strtod_l+0x21a>
 80061f6:	2910      	cmp	r1, #16
 80061f8:	bfd8      	it	le
 80061fa:	437d      	mulle	r5, r7
 80061fc:	e7dd      	b.n	80061ba <_strtod_l+0x21a>
 80061fe:	2c10      	cmp	r4, #16
 8006200:	bfdc      	itt	le
 8006202:	210a      	movle	r1, #10
 8006204:	fb01 e505 	mlale	r5, r1, r5, lr
 8006208:	e7e4      	b.n	80061d4 <_strtod_l+0x234>
 800620a:	2301      	movs	r3, #1
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	e781      	b.n	8006114 <_strtod_l+0x174>
 8006210:	f04f 0c01 	mov.w	ip, #1
 8006214:	1cb3      	adds	r3, r6, #2
 8006216:	931b      	str	r3, [sp, #108]	; 0x6c
 8006218:	78b3      	ldrb	r3, [r6, #2]
 800621a:	e78a      	b.n	8006132 <_strtod_l+0x192>
 800621c:	f04f 0c00 	mov.w	ip, #0
 8006220:	e7f8      	b.n	8006214 <_strtod_l+0x274>
 8006222:	bf00      	nop
 8006224:	08009af8 	.word	0x08009af8
 8006228:	7ff00000 	.word	0x7ff00000
 800622c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800622e:	1c5f      	adds	r7, r3, #1
 8006230:	971b      	str	r7, [sp, #108]	; 0x6c
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b30      	cmp	r3, #48	; 0x30
 8006236:	d0f9      	beq.n	800622c <_strtod_l+0x28c>
 8006238:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800623c:	2f08      	cmp	r7, #8
 800623e:	f63f af7d 	bhi.w	800613c <_strtod_l+0x19c>
 8006242:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006248:	930a      	str	r3, [sp, #40]	; 0x28
 800624a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800624c:	1c5f      	adds	r7, r3, #1
 800624e:	971b      	str	r7, [sp, #108]	; 0x6c
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006256:	f1b8 0f09 	cmp.w	r8, #9
 800625a:	d937      	bls.n	80062cc <_strtod_l+0x32c>
 800625c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800625e:	1a7f      	subs	r7, r7, r1
 8006260:	2f08      	cmp	r7, #8
 8006262:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006266:	dc37      	bgt.n	80062d8 <_strtod_l+0x338>
 8006268:	45be      	cmp	lr, r7
 800626a:	bfa8      	it	ge
 800626c:	46be      	movge	lr, r7
 800626e:	f1bc 0f00 	cmp.w	ip, #0
 8006272:	d001      	beq.n	8006278 <_strtod_l+0x2d8>
 8006274:	f1ce 0e00 	rsb	lr, lr, #0
 8006278:	2c00      	cmp	r4, #0
 800627a:	d151      	bne.n	8006320 <_strtod_l+0x380>
 800627c:	2800      	cmp	r0, #0
 800627e:	f47f aece 	bne.w	800601e <_strtod_l+0x7e>
 8006282:	9a06      	ldr	r2, [sp, #24]
 8006284:	2a00      	cmp	r2, #0
 8006286:	f47f aeca 	bne.w	800601e <_strtod_l+0x7e>
 800628a:	9a04      	ldr	r2, [sp, #16]
 800628c:	2a00      	cmp	r2, #0
 800628e:	f47f aee4 	bne.w	800605a <_strtod_l+0xba>
 8006292:	2b4e      	cmp	r3, #78	; 0x4e
 8006294:	d027      	beq.n	80062e6 <_strtod_l+0x346>
 8006296:	dc21      	bgt.n	80062dc <_strtod_l+0x33c>
 8006298:	2b49      	cmp	r3, #73	; 0x49
 800629a:	f47f aede 	bne.w	800605a <_strtod_l+0xba>
 800629e:	49a0      	ldr	r1, [pc, #640]	; (8006520 <_strtod_l+0x580>)
 80062a0:	a81b      	add	r0, sp, #108	; 0x6c
 80062a2:	f002 f835 	bl	8008310 <__match>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	f43f aed7 	beq.w	800605a <_strtod_l+0xba>
 80062ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062ae:	499d      	ldr	r1, [pc, #628]	; (8006524 <_strtod_l+0x584>)
 80062b0:	3b01      	subs	r3, #1
 80062b2:	a81b      	add	r0, sp, #108	; 0x6c
 80062b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80062b6:	f002 f82b 	bl	8008310 <__match>
 80062ba:	b910      	cbnz	r0, 80062c2 <_strtod_l+0x322>
 80062bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062be:	3301      	adds	r3, #1
 80062c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80062c2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006538 <_strtod_l+0x598>
 80062c6:	f04f 0a00 	mov.w	sl, #0
 80062ca:	e6a8      	b.n	800601e <_strtod_l+0x7e>
 80062cc:	210a      	movs	r1, #10
 80062ce:	fb01 3e0e 	mla	lr, r1, lr, r3
 80062d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80062d6:	e7b8      	b.n	800624a <_strtod_l+0x2aa>
 80062d8:	46be      	mov	lr, r7
 80062da:	e7c8      	b.n	800626e <_strtod_l+0x2ce>
 80062dc:	2b69      	cmp	r3, #105	; 0x69
 80062de:	d0de      	beq.n	800629e <_strtod_l+0x2fe>
 80062e0:	2b6e      	cmp	r3, #110	; 0x6e
 80062e2:	f47f aeba 	bne.w	800605a <_strtod_l+0xba>
 80062e6:	4990      	ldr	r1, [pc, #576]	; (8006528 <_strtod_l+0x588>)
 80062e8:	a81b      	add	r0, sp, #108	; 0x6c
 80062ea:	f002 f811 	bl	8008310 <__match>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	f43f aeb3 	beq.w	800605a <_strtod_l+0xba>
 80062f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b28      	cmp	r3, #40	; 0x28
 80062fa:	d10e      	bne.n	800631a <_strtod_l+0x37a>
 80062fc:	aa1e      	add	r2, sp, #120	; 0x78
 80062fe:	498b      	ldr	r1, [pc, #556]	; (800652c <_strtod_l+0x58c>)
 8006300:	a81b      	add	r0, sp, #108	; 0x6c
 8006302:	f002 f819 	bl	8008338 <__hexnan>
 8006306:	2805      	cmp	r0, #5
 8006308:	d107      	bne.n	800631a <_strtod_l+0x37a>
 800630a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800630c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006310:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006314:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006318:	e681      	b.n	800601e <_strtod_l+0x7e>
 800631a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006540 <_strtod_l+0x5a0>
 800631e:	e7d2      	b.n	80062c6 <_strtod_l+0x326>
 8006320:	ebae 0302 	sub.w	r3, lr, r2
 8006324:	9306      	str	r3, [sp, #24]
 8006326:	9b05      	ldr	r3, [sp, #20]
 8006328:	9807      	ldr	r0, [sp, #28]
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf08      	it	eq
 800632e:	4623      	moveq	r3, r4
 8006330:	2c10      	cmp	r4, #16
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	46a0      	mov	r8, r4
 8006336:	bfa8      	it	ge
 8006338:	f04f 0810 	movge.w	r8, #16
 800633c:	f7fa f8fa 	bl	8000534 <__aeabi_ui2d>
 8006340:	2c09      	cmp	r4, #9
 8006342:	4682      	mov	sl, r0
 8006344:	468b      	mov	fp, r1
 8006346:	dc13      	bgt.n	8006370 <_strtod_l+0x3d0>
 8006348:	9b06      	ldr	r3, [sp, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f43f ae67 	beq.w	800601e <_strtod_l+0x7e>
 8006350:	9b06      	ldr	r3, [sp, #24]
 8006352:	dd7a      	ble.n	800644a <_strtod_l+0x4aa>
 8006354:	2b16      	cmp	r3, #22
 8006356:	dc61      	bgt.n	800641c <_strtod_l+0x47c>
 8006358:	4a75      	ldr	r2, [pc, #468]	; (8006530 <_strtod_l+0x590>)
 800635a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800635e:	e9de 0100 	ldrd	r0, r1, [lr]
 8006362:	4652      	mov	r2, sl
 8006364:	465b      	mov	r3, fp
 8006366:	f7fa f95f 	bl	8000628 <__aeabi_dmul>
 800636a:	4682      	mov	sl, r0
 800636c:	468b      	mov	fp, r1
 800636e:	e656      	b.n	800601e <_strtod_l+0x7e>
 8006370:	4b6f      	ldr	r3, [pc, #444]	; (8006530 <_strtod_l+0x590>)
 8006372:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006376:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800637a:	f7fa f955 	bl	8000628 <__aeabi_dmul>
 800637e:	4606      	mov	r6, r0
 8006380:	4628      	mov	r0, r5
 8006382:	460f      	mov	r7, r1
 8006384:	f7fa f8d6 	bl	8000534 <__aeabi_ui2d>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4630      	mov	r0, r6
 800638e:	4639      	mov	r1, r7
 8006390:	f7f9 ff94 	bl	80002bc <__adddf3>
 8006394:	2c0f      	cmp	r4, #15
 8006396:	4682      	mov	sl, r0
 8006398:	468b      	mov	fp, r1
 800639a:	ddd5      	ble.n	8006348 <_strtod_l+0x3a8>
 800639c:	9b06      	ldr	r3, [sp, #24]
 800639e:	eba4 0808 	sub.w	r8, r4, r8
 80063a2:	4498      	add	r8, r3
 80063a4:	f1b8 0f00 	cmp.w	r8, #0
 80063a8:	f340 8096 	ble.w	80064d8 <_strtod_l+0x538>
 80063ac:	f018 030f 	ands.w	r3, r8, #15
 80063b0:	d00a      	beq.n	80063c8 <_strtod_l+0x428>
 80063b2:	495f      	ldr	r1, [pc, #380]	; (8006530 <_strtod_l+0x590>)
 80063b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063b8:	4652      	mov	r2, sl
 80063ba:	465b      	mov	r3, fp
 80063bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063c0:	f7fa f932 	bl	8000628 <__aeabi_dmul>
 80063c4:	4682      	mov	sl, r0
 80063c6:	468b      	mov	fp, r1
 80063c8:	f038 080f 	bics.w	r8, r8, #15
 80063cc:	d073      	beq.n	80064b6 <_strtod_l+0x516>
 80063ce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80063d2:	dd47      	ble.n	8006464 <_strtod_l+0x4c4>
 80063d4:	2400      	movs	r4, #0
 80063d6:	46a0      	mov	r8, r4
 80063d8:	9407      	str	r4, [sp, #28]
 80063da:	9405      	str	r4, [sp, #20]
 80063dc:	2322      	movs	r3, #34	; 0x22
 80063de:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006538 <_strtod_l+0x598>
 80063e2:	f8c9 3000 	str.w	r3, [r9]
 80063e6:	f04f 0a00 	mov.w	sl, #0
 80063ea:	9b07      	ldr	r3, [sp, #28]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f43f ae16 	beq.w	800601e <_strtod_l+0x7e>
 80063f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80063f4:	4648      	mov	r0, r9
 80063f6:	f002 f8df 	bl	80085b8 <_Bfree>
 80063fa:	9905      	ldr	r1, [sp, #20]
 80063fc:	4648      	mov	r0, r9
 80063fe:	f002 f8db 	bl	80085b8 <_Bfree>
 8006402:	4641      	mov	r1, r8
 8006404:	4648      	mov	r0, r9
 8006406:	f002 f8d7 	bl	80085b8 <_Bfree>
 800640a:	9907      	ldr	r1, [sp, #28]
 800640c:	4648      	mov	r0, r9
 800640e:	f002 f8d3 	bl	80085b8 <_Bfree>
 8006412:	4621      	mov	r1, r4
 8006414:	4648      	mov	r0, r9
 8006416:	f002 f8cf 	bl	80085b8 <_Bfree>
 800641a:	e600      	b.n	800601e <_strtod_l+0x7e>
 800641c:	9a06      	ldr	r2, [sp, #24]
 800641e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006422:	4293      	cmp	r3, r2
 8006424:	dbba      	blt.n	800639c <_strtod_l+0x3fc>
 8006426:	4d42      	ldr	r5, [pc, #264]	; (8006530 <_strtod_l+0x590>)
 8006428:	f1c4 040f 	rsb	r4, r4, #15
 800642c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006430:	4652      	mov	r2, sl
 8006432:	465b      	mov	r3, fp
 8006434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006438:	f7fa f8f6 	bl	8000628 <__aeabi_dmul>
 800643c:	9b06      	ldr	r3, [sp, #24]
 800643e:	1b1c      	subs	r4, r3, r4
 8006440:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006444:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006448:	e78d      	b.n	8006366 <_strtod_l+0x3c6>
 800644a:	f113 0f16 	cmn.w	r3, #22
 800644e:	dba5      	blt.n	800639c <_strtod_l+0x3fc>
 8006450:	4a37      	ldr	r2, [pc, #220]	; (8006530 <_strtod_l+0x590>)
 8006452:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006456:	e9d2 2300 	ldrd	r2, r3, [r2]
 800645a:	4650      	mov	r0, sl
 800645c:	4659      	mov	r1, fp
 800645e:	f7fa fa0d 	bl	800087c <__aeabi_ddiv>
 8006462:	e782      	b.n	800636a <_strtod_l+0x3ca>
 8006464:	2300      	movs	r3, #0
 8006466:	4e33      	ldr	r6, [pc, #204]	; (8006534 <_strtod_l+0x594>)
 8006468:	ea4f 1828 	mov.w	r8, r8, asr #4
 800646c:	4650      	mov	r0, sl
 800646e:	4659      	mov	r1, fp
 8006470:	461d      	mov	r5, r3
 8006472:	f1b8 0f01 	cmp.w	r8, #1
 8006476:	dc21      	bgt.n	80064bc <_strtod_l+0x51c>
 8006478:	b10b      	cbz	r3, 800647e <_strtod_l+0x4de>
 800647a:	4682      	mov	sl, r0
 800647c:	468b      	mov	fp, r1
 800647e:	4b2d      	ldr	r3, [pc, #180]	; (8006534 <_strtod_l+0x594>)
 8006480:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006484:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006488:	4652      	mov	r2, sl
 800648a:	465b      	mov	r3, fp
 800648c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006490:	f7fa f8ca 	bl	8000628 <__aeabi_dmul>
 8006494:	4b28      	ldr	r3, [pc, #160]	; (8006538 <_strtod_l+0x598>)
 8006496:	460a      	mov	r2, r1
 8006498:	400b      	ands	r3, r1
 800649a:	4928      	ldr	r1, [pc, #160]	; (800653c <_strtod_l+0x59c>)
 800649c:	428b      	cmp	r3, r1
 800649e:	4682      	mov	sl, r0
 80064a0:	d898      	bhi.n	80063d4 <_strtod_l+0x434>
 80064a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80064a6:	428b      	cmp	r3, r1
 80064a8:	bf86      	itte	hi
 80064aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006544 <_strtod_l+0x5a4>
 80064ae:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80064b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80064b6:	2300      	movs	r3, #0
 80064b8:	9304      	str	r3, [sp, #16]
 80064ba:	e077      	b.n	80065ac <_strtod_l+0x60c>
 80064bc:	f018 0f01 	tst.w	r8, #1
 80064c0:	d006      	beq.n	80064d0 <_strtod_l+0x530>
 80064c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ca:	f7fa f8ad 	bl	8000628 <__aeabi_dmul>
 80064ce:	2301      	movs	r3, #1
 80064d0:	3501      	adds	r5, #1
 80064d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80064d6:	e7cc      	b.n	8006472 <_strtod_l+0x4d2>
 80064d8:	d0ed      	beq.n	80064b6 <_strtod_l+0x516>
 80064da:	f1c8 0800 	rsb	r8, r8, #0
 80064de:	f018 020f 	ands.w	r2, r8, #15
 80064e2:	d00a      	beq.n	80064fa <_strtod_l+0x55a>
 80064e4:	4b12      	ldr	r3, [pc, #72]	; (8006530 <_strtod_l+0x590>)
 80064e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ea:	4650      	mov	r0, sl
 80064ec:	4659      	mov	r1, fp
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f7fa f9c3 	bl	800087c <__aeabi_ddiv>
 80064f6:	4682      	mov	sl, r0
 80064f8:	468b      	mov	fp, r1
 80064fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80064fe:	d0da      	beq.n	80064b6 <_strtod_l+0x516>
 8006500:	f1b8 0f1f 	cmp.w	r8, #31
 8006504:	dd20      	ble.n	8006548 <_strtod_l+0x5a8>
 8006506:	2400      	movs	r4, #0
 8006508:	46a0      	mov	r8, r4
 800650a:	9407      	str	r4, [sp, #28]
 800650c:	9405      	str	r4, [sp, #20]
 800650e:	2322      	movs	r3, #34	; 0x22
 8006510:	f04f 0a00 	mov.w	sl, #0
 8006514:	f04f 0b00 	mov.w	fp, #0
 8006518:	f8c9 3000 	str.w	r3, [r9]
 800651c:	e765      	b.n	80063ea <_strtod_l+0x44a>
 800651e:	bf00      	nop
 8006520:	08009ac3 	.word	0x08009ac3
 8006524:	08009c4c 	.word	0x08009c4c
 8006528:	08009acb 	.word	0x08009acb
 800652c:	08009b0c 	.word	0x08009b0c
 8006530:	08009ce0 	.word	0x08009ce0
 8006534:	08009cb8 	.word	0x08009cb8
 8006538:	7ff00000 	.word	0x7ff00000
 800653c:	7ca00000 	.word	0x7ca00000
 8006540:	fff80000 	.word	0xfff80000
 8006544:	7fefffff 	.word	0x7fefffff
 8006548:	f018 0310 	ands.w	r3, r8, #16
 800654c:	bf18      	it	ne
 800654e:	236a      	movne	r3, #106	; 0x6a
 8006550:	4da0      	ldr	r5, [pc, #640]	; (80067d4 <_strtod_l+0x834>)
 8006552:	9304      	str	r3, [sp, #16]
 8006554:	4650      	mov	r0, sl
 8006556:	4659      	mov	r1, fp
 8006558:	2300      	movs	r3, #0
 800655a:	f1b8 0f00 	cmp.w	r8, #0
 800655e:	f300 810a 	bgt.w	8006776 <_strtod_l+0x7d6>
 8006562:	b10b      	cbz	r3, 8006568 <_strtod_l+0x5c8>
 8006564:	4682      	mov	sl, r0
 8006566:	468b      	mov	fp, r1
 8006568:	9b04      	ldr	r3, [sp, #16]
 800656a:	b1bb      	cbz	r3, 800659c <_strtod_l+0x5fc>
 800656c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006570:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006574:	2b00      	cmp	r3, #0
 8006576:	4659      	mov	r1, fp
 8006578:	dd10      	ble.n	800659c <_strtod_l+0x5fc>
 800657a:	2b1f      	cmp	r3, #31
 800657c:	f340 8107 	ble.w	800678e <_strtod_l+0x7ee>
 8006580:	2b34      	cmp	r3, #52	; 0x34
 8006582:	bfde      	ittt	le
 8006584:	3b20      	suble	r3, #32
 8006586:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800658a:	fa02 f303 	lslle.w	r3, r2, r3
 800658e:	f04f 0a00 	mov.w	sl, #0
 8006592:	bfcc      	ite	gt
 8006594:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006598:	ea03 0b01 	andle.w	fp, r3, r1
 800659c:	2200      	movs	r2, #0
 800659e:	2300      	movs	r3, #0
 80065a0:	4650      	mov	r0, sl
 80065a2:	4659      	mov	r1, fp
 80065a4:	f7fa faa8 	bl	8000af8 <__aeabi_dcmpeq>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d1ac      	bne.n	8006506 <_strtod_l+0x566>
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	9a05      	ldr	r2, [sp, #20]
 80065b2:	9908      	ldr	r1, [sp, #32]
 80065b4:	4623      	mov	r3, r4
 80065b6:	4648      	mov	r0, r9
 80065b8:	f002 f850 	bl	800865c <__s2b>
 80065bc:	9007      	str	r0, [sp, #28]
 80065be:	2800      	cmp	r0, #0
 80065c0:	f43f af08 	beq.w	80063d4 <_strtod_l+0x434>
 80065c4:	9a06      	ldr	r2, [sp, #24]
 80065c6:	9b06      	ldr	r3, [sp, #24]
 80065c8:	2a00      	cmp	r2, #0
 80065ca:	f1c3 0300 	rsb	r3, r3, #0
 80065ce:	bfa8      	it	ge
 80065d0:	2300      	movge	r3, #0
 80065d2:	930e      	str	r3, [sp, #56]	; 0x38
 80065d4:	2400      	movs	r4, #0
 80065d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80065da:	9316      	str	r3, [sp, #88]	; 0x58
 80065dc:	46a0      	mov	r8, r4
 80065de:	9b07      	ldr	r3, [sp, #28]
 80065e0:	4648      	mov	r0, r9
 80065e2:	6859      	ldr	r1, [r3, #4]
 80065e4:	f001 ffb4 	bl	8008550 <_Balloc>
 80065e8:	9005      	str	r0, [sp, #20]
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f43f aef6 	beq.w	80063dc <_strtod_l+0x43c>
 80065f0:	9b07      	ldr	r3, [sp, #28]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	3202      	adds	r2, #2
 80065f6:	f103 010c 	add.w	r1, r3, #12
 80065fa:	0092      	lsls	r2, r2, #2
 80065fc:	300c      	adds	r0, #12
 80065fe:	f7fe fdbd 	bl	800517c <memcpy>
 8006602:	aa1e      	add	r2, sp, #120	; 0x78
 8006604:	a91d      	add	r1, sp, #116	; 0x74
 8006606:	ec4b ab10 	vmov	d0, sl, fp
 800660a:	4648      	mov	r0, r9
 800660c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006610:	f002 fae0 	bl	8008bd4 <__d2b>
 8006614:	901c      	str	r0, [sp, #112]	; 0x70
 8006616:	2800      	cmp	r0, #0
 8006618:	f43f aee0 	beq.w	80063dc <_strtod_l+0x43c>
 800661c:	2101      	movs	r1, #1
 800661e:	4648      	mov	r0, r9
 8006620:	f002 f8a8 	bl	8008774 <__i2b>
 8006624:	4680      	mov	r8, r0
 8006626:	2800      	cmp	r0, #0
 8006628:	f43f aed8 	beq.w	80063dc <_strtod_l+0x43c>
 800662c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800662e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006630:	2e00      	cmp	r6, #0
 8006632:	bfab      	itete	ge
 8006634:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006636:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006638:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800663a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800663c:	bfac      	ite	ge
 800663e:	18f7      	addge	r7, r6, r3
 8006640:	1b9d      	sublt	r5, r3, r6
 8006642:	9b04      	ldr	r3, [sp, #16]
 8006644:	1af6      	subs	r6, r6, r3
 8006646:	4416      	add	r6, r2
 8006648:	4b63      	ldr	r3, [pc, #396]	; (80067d8 <_strtod_l+0x838>)
 800664a:	3e01      	subs	r6, #1
 800664c:	429e      	cmp	r6, r3
 800664e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006652:	f280 80af 	bge.w	80067b4 <_strtod_l+0x814>
 8006656:	1b9b      	subs	r3, r3, r6
 8006658:	2b1f      	cmp	r3, #31
 800665a:	eba2 0203 	sub.w	r2, r2, r3
 800665e:	f04f 0101 	mov.w	r1, #1
 8006662:	f300 809b 	bgt.w	800679c <_strtod_l+0x7fc>
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	930f      	str	r3, [sp, #60]	; 0x3c
 800666c:	2300      	movs	r3, #0
 800666e:	930a      	str	r3, [sp, #40]	; 0x28
 8006670:	18be      	adds	r6, r7, r2
 8006672:	9b04      	ldr	r3, [sp, #16]
 8006674:	42b7      	cmp	r7, r6
 8006676:	4415      	add	r5, r2
 8006678:	441d      	add	r5, r3
 800667a:	463b      	mov	r3, r7
 800667c:	bfa8      	it	ge
 800667e:	4633      	movge	r3, r6
 8006680:	42ab      	cmp	r3, r5
 8006682:	bfa8      	it	ge
 8006684:	462b      	movge	r3, r5
 8006686:	2b00      	cmp	r3, #0
 8006688:	bfc2      	ittt	gt
 800668a:	1af6      	subgt	r6, r6, r3
 800668c:	1aed      	subgt	r5, r5, r3
 800668e:	1aff      	subgt	r7, r7, r3
 8006690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006692:	b1bb      	cbz	r3, 80066c4 <_strtod_l+0x724>
 8006694:	4641      	mov	r1, r8
 8006696:	461a      	mov	r2, r3
 8006698:	4648      	mov	r0, r9
 800669a:	f002 f90b 	bl	80088b4 <__pow5mult>
 800669e:	4680      	mov	r8, r0
 80066a0:	2800      	cmp	r0, #0
 80066a2:	f43f ae9b 	beq.w	80063dc <_strtod_l+0x43c>
 80066a6:	4601      	mov	r1, r0
 80066a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80066aa:	4648      	mov	r0, r9
 80066ac:	f002 f86b 	bl	8008786 <__multiply>
 80066b0:	900c      	str	r0, [sp, #48]	; 0x30
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f43f ae92 	beq.w	80063dc <_strtod_l+0x43c>
 80066b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80066ba:	4648      	mov	r0, r9
 80066bc:	f001 ff7c 	bl	80085b8 <_Bfree>
 80066c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066c2:	931c      	str	r3, [sp, #112]	; 0x70
 80066c4:	2e00      	cmp	r6, #0
 80066c6:	dc7a      	bgt.n	80067be <_strtod_l+0x81e>
 80066c8:	9b06      	ldr	r3, [sp, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	dd08      	ble.n	80066e0 <_strtod_l+0x740>
 80066ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80066d0:	9905      	ldr	r1, [sp, #20]
 80066d2:	4648      	mov	r0, r9
 80066d4:	f002 f8ee 	bl	80088b4 <__pow5mult>
 80066d8:	9005      	str	r0, [sp, #20]
 80066da:	2800      	cmp	r0, #0
 80066dc:	f43f ae7e 	beq.w	80063dc <_strtod_l+0x43c>
 80066e0:	2d00      	cmp	r5, #0
 80066e2:	dd08      	ble.n	80066f6 <_strtod_l+0x756>
 80066e4:	462a      	mov	r2, r5
 80066e6:	9905      	ldr	r1, [sp, #20]
 80066e8:	4648      	mov	r0, r9
 80066ea:	f002 f931 	bl	8008950 <__lshift>
 80066ee:	9005      	str	r0, [sp, #20]
 80066f0:	2800      	cmp	r0, #0
 80066f2:	f43f ae73 	beq.w	80063dc <_strtod_l+0x43c>
 80066f6:	2f00      	cmp	r7, #0
 80066f8:	dd08      	ble.n	800670c <_strtod_l+0x76c>
 80066fa:	4641      	mov	r1, r8
 80066fc:	463a      	mov	r2, r7
 80066fe:	4648      	mov	r0, r9
 8006700:	f002 f926 	bl	8008950 <__lshift>
 8006704:	4680      	mov	r8, r0
 8006706:	2800      	cmp	r0, #0
 8006708:	f43f ae68 	beq.w	80063dc <_strtod_l+0x43c>
 800670c:	9a05      	ldr	r2, [sp, #20]
 800670e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006710:	4648      	mov	r0, r9
 8006712:	f002 f98b 	bl	8008a2c <__mdiff>
 8006716:	4604      	mov	r4, r0
 8006718:	2800      	cmp	r0, #0
 800671a:	f43f ae5f 	beq.w	80063dc <_strtod_l+0x43c>
 800671e:	68c3      	ldr	r3, [r0, #12]
 8006720:	930c      	str	r3, [sp, #48]	; 0x30
 8006722:	2300      	movs	r3, #0
 8006724:	60c3      	str	r3, [r0, #12]
 8006726:	4641      	mov	r1, r8
 8006728:	f002 f966 	bl	80089f8 <__mcmp>
 800672c:	2800      	cmp	r0, #0
 800672e:	da55      	bge.n	80067dc <_strtod_l+0x83c>
 8006730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006732:	b9e3      	cbnz	r3, 800676e <_strtod_l+0x7ce>
 8006734:	f1ba 0f00 	cmp.w	sl, #0
 8006738:	d119      	bne.n	800676e <_strtod_l+0x7ce>
 800673a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800673e:	b9b3      	cbnz	r3, 800676e <_strtod_l+0x7ce>
 8006740:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006744:	0d1b      	lsrs	r3, r3, #20
 8006746:	051b      	lsls	r3, r3, #20
 8006748:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800674c:	d90f      	bls.n	800676e <_strtod_l+0x7ce>
 800674e:	6963      	ldr	r3, [r4, #20]
 8006750:	b913      	cbnz	r3, 8006758 <_strtod_l+0x7b8>
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	2b01      	cmp	r3, #1
 8006756:	dd0a      	ble.n	800676e <_strtod_l+0x7ce>
 8006758:	4621      	mov	r1, r4
 800675a:	2201      	movs	r2, #1
 800675c:	4648      	mov	r0, r9
 800675e:	f002 f8f7 	bl	8008950 <__lshift>
 8006762:	4641      	mov	r1, r8
 8006764:	4604      	mov	r4, r0
 8006766:	f002 f947 	bl	80089f8 <__mcmp>
 800676a:	2800      	cmp	r0, #0
 800676c:	dc67      	bgt.n	800683e <_strtod_l+0x89e>
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d171      	bne.n	8006858 <_strtod_l+0x8b8>
 8006774:	e63d      	b.n	80063f2 <_strtod_l+0x452>
 8006776:	f018 0f01 	tst.w	r8, #1
 800677a:	d004      	beq.n	8006786 <_strtod_l+0x7e6>
 800677c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006780:	f7f9 ff52 	bl	8000628 <__aeabi_dmul>
 8006784:	2301      	movs	r3, #1
 8006786:	ea4f 0868 	mov.w	r8, r8, asr #1
 800678a:	3508      	adds	r5, #8
 800678c:	e6e5      	b.n	800655a <_strtod_l+0x5ba>
 800678e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	ea03 0a0a 	and.w	sl, r3, sl
 800679a:	e6ff      	b.n	800659c <_strtod_l+0x5fc>
 800679c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80067a0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80067a4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80067a8:	36e2      	adds	r6, #226	; 0xe2
 80067aa:	fa01 f306 	lsl.w	r3, r1, r6
 80067ae:	930a      	str	r3, [sp, #40]	; 0x28
 80067b0:	910f      	str	r1, [sp, #60]	; 0x3c
 80067b2:	e75d      	b.n	8006670 <_strtod_l+0x6d0>
 80067b4:	2300      	movs	r3, #0
 80067b6:	930a      	str	r3, [sp, #40]	; 0x28
 80067b8:	2301      	movs	r3, #1
 80067ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80067bc:	e758      	b.n	8006670 <_strtod_l+0x6d0>
 80067be:	4632      	mov	r2, r6
 80067c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80067c2:	4648      	mov	r0, r9
 80067c4:	f002 f8c4 	bl	8008950 <__lshift>
 80067c8:	901c      	str	r0, [sp, #112]	; 0x70
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f47f af7c 	bne.w	80066c8 <_strtod_l+0x728>
 80067d0:	e604      	b.n	80063dc <_strtod_l+0x43c>
 80067d2:	bf00      	nop
 80067d4:	08009b20 	.word	0x08009b20
 80067d8:	fffffc02 	.word	0xfffffc02
 80067dc:	465d      	mov	r5, fp
 80067de:	f040 8086 	bne.w	80068ee <_strtod_l+0x94e>
 80067e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067e8:	b32a      	cbz	r2, 8006836 <_strtod_l+0x896>
 80067ea:	4aaf      	ldr	r2, [pc, #700]	; (8006aa8 <_strtod_l+0xb08>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d153      	bne.n	8006898 <_strtod_l+0x8f8>
 80067f0:	9b04      	ldr	r3, [sp, #16]
 80067f2:	4650      	mov	r0, sl
 80067f4:	b1d3      	cbz	r3, 800682c <_strtod_l+0x88c>
 80067f6:	4aad      	ldr	r2, [pc, #692]	; (8006aac <_strtod_l+0xb0c>)
 80067f8:	402a      	ands	r2, r5
 80067fa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80067fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006802:	d816      	bhi.n	8006832 <_strtod_l+0x892>
 8006804:	0d12      	lsrs	r2, r2, #20
 8006806:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800680a:	fa01 f303 	lsl.w	r3, r1, r3
 800680e:	4298      	cmp	r0, r3
 8006810:	d142      	bne.n	8006898 <_strtod_l+0x8f8>
 8006812:	4ba7      	ldr	r3, [pc, #668]	; (8006ab0 <_strtod_l+0xb10>)
 8006814:	429d      	cmp	r5, r3
 8006816:	d102      	bne.n	800681e <_strtod_l+0x87e>
 8006818:	3001      	adds	r0, #1
 800681a:	f43f addf 	beq.w	80063dc <_strtod_l+0x43c>
 800681e:	4ba3      	ldr	r3, [pc, #652]	; (8006aac <_strtod_l+0xb0c>)
 8006820:	402b      	ands	r3, r5
 8006822:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006826:	f04f 0a00 	mov.w	sl, #0
 800682a:	e7a0      	b.n	800676e <_strtod_l+0x7ce>
 800682c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006830:	e7ed      	b.n	800680e <_strtod_l+0x86e>
 8006832:	460b      	mov	r3, r1
 8006834:	e7eb      	b.n	800680e <_strtod_l+0x86e>
 8006836:	bb7b      	cbnz	r3, 8006898 <_strtod_l+0x8f8>
 8006838:	f1ba 0f00 	cmp.w	sl, #0
 800683c:	d12c      	bne.n	8006898 <_strtod_l+0x8f8>
 800683e:	9904      	ldr	r1, [sp, #16]
 8006840:	4a9a      	ldr	r2, [pc, #616]	; (8006aac <_strtod_l+0xb0c>)
 8006842:	465b      	mov	r3, fp
 8006844:	b1f1      	cbz	r1, 8006884 <_strtod_l+0x8e4>
 8006846:	ea02 010b 	and.w	r1, r2, fp
 800684a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800684e:	dc19      	bgt.n	8006884 <_strtod_l+0x8e4>
 8006850:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006854:	f77f ae5b 	ble.w	800650e <_strtod_l+0x56e>
 8006858:	4a96      	ldr	r2, [pc, #600]	; (8006ab4 <_strtod_l+0xb14>)
 800685a:	2300      	movs	r3, #0
 800685c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006860:	4650      	mov	r0, sl
 8006862:	4659      	mov	r1, fp
 8006864:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006868:	f7f9 fede 	bl	8000628 <__aeabi_dmul>
 800686c:	4682      	mov	sl, r0
 800686e:	468b      	mov	fp, r1
 8006870:	2900      	cmp	r1, #0
 8006872:	f47f adbe 	bne.w	80063f2 <_strtod_l+0x452>
 8006876:	2800      	cmp	r0, #0
 8006878:	f47f adbb 	bne.w	80063f2 <_strtod_l+0x452>
 800687c:	2322      	movs	r3, #34	; 0x22
 800687e:	f8c9 3000 	str.w	r3, [r9]
 8006882:	e5b6      	b.n	80063f2 <_strtod_l+0x452>
 8006884:	4013      	ands	r3, r2
 8006886:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800688a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800688e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006892:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006896:	e76a      	b.n	800676e <_strtod_l+0x7ce>
 8006898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689a:	b193      	cbz	r3, 80068c2 <_strtod_l+0x922>
 800689c:	422b      	tst	r3, r5
 800689e:	f43f af66 	beq.w	800676e <_strtod_l+0x7ce>
 80068a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068a4:	9a04      	ldr	r2, [sp, #16]
 80068a6:	4650      	mov	r0, sl
 80068a8:	4659      	mov	r1, fp
 80068aa:	b173      	cbz	r3, 80068ca <_strtod_l+0x92a>
 80068ac:	f7ff fb5a 	bl	8005f64 <sulp>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80068b8:	f7f9 fd00 	bl	80002bc <__adddf3>
 80068bc:	4682      	mov	sl, r0
 80068be:	468b      	mov	fp, r1
 80068c0:	e755      	b.n	800676e <_strtod_l+0x7ce>
 80068c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068c4:	ea13 0f0a 	tst.w	r3, sl
 80068c8:	e7e9      	b.n	800689e <_strtod_l+0x8fe>
 80068ca:	f7ff fb4b 	bl	8005f64 <sulp>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80068d6:	f7f9 fcef 	bl	80002b8 <__aeabi_dsub>
 80068da:	2200      	movs	r2, #0
 80068dc:	2300      	movs	r3, #0
 80068de:	4682      	mov	sl, r0
 80068e0:	468b      	mov	fp, r1
 80068e2:	f7fa f909 	bl	8000af8 <__aeabi_dcmpeq>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f47f ae11 	bne.w	800650e <_strtod_l+0x56e>
 80068ec:	e73f      	b.n	800676e <_strtod_l+0x7ce>
 80068ee:	4641      	mov	r1, r8
 80068f0:	4620      	mov	r0, r4
 80068f2:	f002 f9be 	bl	8008c72 <__ratio>
 80068f6:	ec57 6b10 	vmov	r6, r7, d0
 80068fa:	2200      	movs	r2, #0
 80068fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006900:	ee10 0a10 	vmov	r0, s0
 8006904:	4639      	mov	r1, r7
 8006906:	f7fa f90b 	bl	8000b20 <__aeabi_dcmple>
 800690a:	2800      	cmp	r0, #0
 800690c:	d077      	beq.n	80069fe <_strtod_l+0xa5e>
 800690e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006910:	2b00      	cmp	r3, #0
 8006912:	d04a      	beq.n	80069aa <_strtod_l+0xa0a>
 8006914:	4b68      	ldr	r3, [pc, #416]	; (8006ab8 <_strtod_l+0xb18>)
 8006916:	2200      	movs	r2, #0
 8006918:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800691c:	4f66      	ldr	r7, [pc, #408]	; (8006ab8 <_strtod_l+0xb18>)
 800691e:	2600      	movs	r6, #0
 8006920:	4b62      	ldr	r3, [pc, #392]	; (8006aac <_strtod_l+0xb0c>)
 8006922:	402b      	ands	r3, r5
 8006924:	930f      	str	r3, [sp, #60]	; 0x3c
 8006926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006928:	4b64      	ldr	r3, [pc, #400]	; (8006abc <_strtod_l+0xb1c>)
 800692a:	429a      	cmp	r2, r3
 800692c:	f040 80ce 	bne.w	8006acc <_strtod_l+0xb2c>
 8006930:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006934:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006938:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800693c:	ec4b ab10 	vmov	d0, sl, fp
 8006940:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006944:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006948:	f002 f8ce 	bl	8008ae8 <__ulp>
 800694c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006950:	ec53 2b10 	vmov	r2, r3, d0
 8006954:	f7f9 fe68 	bl	8000628 <__aeabi_dmul>
 8006958:	4652      	mov	r2, sl
 800695a:	465b      	mov	r3, fp
 800695c:	f7f9 fcae 	bl	80002bc <__adddf3>
 8006960:	460b      	mov	r3, r1
 8006962:	4952      	ldr	r1, [pc, #328]	; (8006aac <_strtod_l+0xb0c>)
 8006964:	4a56      	ldr	r2, [pc, #344]	; (8006ac0 <_strtod_l+0xb20>)
 8006966:	4019      	ands	r1, r3
 8006968:	4291      	cmp	r1, r2
 800696a:	4682      	mov	sl, r0
 800696c:	d95b      	bls.n	8006a26 <_strtod_l+0xa86>
 800696e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006970:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006974:	4293      	cmp	r3, r2
 8006976:	d103      	bne.n	8006980 <_strtod_l+0x9e0>
 8006978:	9b08      	ldr	r3, [sp, #32]
 800697a:	3301      	adds	r3, #1
 800697c:	f43f ad2e 	beq.w	80063dc <_strtod_l+0x43c>
 8006980:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006ab0 <_strtod_l+0xb10>
 8006984:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006988:	991c      	ldr	r1, [sp, #112]	; 0x70
 800698a:	4648      	mov	r0, r9
 800698c:	f001 fe14 	bl	80085b8 <_Bfree>
 8006990:	9905      	ldr	r1, [sp, #20]
 8006992:	4648      	mov	r0, r9
 8006994:	f001 fe10 	bl	80085b8 <_Bfree>
 8006998:	4641      	mov	r1, r8
 800699a:	4648      	mov	r0, r9
 800699c:	f001 fe0c 	bl	80085b8 <_Bfree>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4648      	mov	r0, r9
 80069a4:	f001 fe08 	bl	80085b8 <_Bfree>
 80069a8:	e619      	b.n	80065de <_strtod_l+0x63e>
 80069aa:	f1ba 0f00 	cmp.w	sl, #0
 80069ae:	d11a      	bne.n	80069e6 <_strtod_l+0xa46>
 80069b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069b4:	b9eb      	cbnz	r3, 80069f2 <_strtod_l+0xa52>
 80069b6:	2200      	movs	r2, #0
 80069b8:	4b3f      	ldr	r3, [pc, #252]	; (8006ab8 <_strtod_l+0xb18>)
 80069ba:	4630      	mov	r0, r6
 80069bc:	4639      	mov	r1, r7
 80069be:	f7fa f8a5 	bl	8000b0c <__aeabi_dcmplt>
 80069c2:	b9c8      	cbnz	r0, 80069f8 <_strtod_l+0xa58>
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	2200      	movs	r2, #0
 80069ca:	4b3e      	ldr	r3, [pc, #248]	; (8006ac4 <_strtod_l+0xb24>)
 80069cc:	f7f9 fe2c 	bl	8000628 <__aeabi_dmul>
 80069d0:	4606      	mov	r6, r0
 80069d2:	460f      	mov	r7, r1
 80069d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80069d8:	9618      	str	r6, [sp, #96]	; 0x60
 80069da:	9319      	str	r3, [sp, #100]	; 0x64
 80069dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80069e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80069e4:	e79c      	b.n	8006920 <_strtod_l+0x980>
 80069e6:	f1ba 0f01 	cmp.w	sl, #1
 80069ea:	d102      	bne.n	80069f2 <_strtod_l+0xa52>
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	f43f ad8e 	beq.w	800650e <_strtod_l+0x56e>
 80069f2:	2200      	movs	r2, #0
 80069f4:	4b34      	ldr	r3, [pc, #208]	; (8006ac8 <_strtod_l+0xb28>)
 80069f6:	e78f      	b.n	8006918 <_strtod_l+0x978>
 80069f8:	2600      	movs	r6, #0
 80069fa:	4f32      	ldr	r7, [pc, #200]	; (8006ac4 <_strtod_l+0xb24>)
 80069fc:	e7ea      	b.n	80069d4 <_strtod_l+0xa34>
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <_strtod_l+0xb24>)
 8006a00:	4630      	mov	r0, r6
 8006a02:	4639      	mov	r1, r7
 8006a04:	2200      	movs	r2, #0
 8006a06:	f7f9 fe0f 	bl	8000628 <__aeabi_dmul>
 8006a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	460f      	mov	r7, r1
 8006a10:	b933      	cbnz	r3, 8006a20 <_strtod_l+0xa80>
 8006a12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a16:	9010      	str	r0, [sp, #64]	; 0x40
 8006a18:	9311      	str	r3, [sp, #68]	; 0x44
 8006a1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a1e:	e7df      	b.n	80069e0 <_strtod_l+0xa40>
 8006a20:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006a24:	e7f9      	b.n	8006a1a <_strtod_l+0xa7a>
 8006a26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006a2a:	9b04      	ldr	r3, [sp, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1ab      	bne.n	8006988 <_strtod_l+0x9e8>
 8006a30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a34:	0d1b      	lsrs	r3, r3, #20
 8006a36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a38:	051b      	lsls	r3, r3, #20
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	465d      	mov	r5, fp
 8006a3e:	d1a3      	bne.n	8006988 <_strtod_l+0x9e8>
 8006a40:	4639      	mov	r1, r7
 8006a42:	4630      	mov	r0, r6
 8006a44:	f7fa f8a0 	bl	8000b88 <__aeabi_d2iz>
 8006a48:	f7f9 fd84 	bl	8000554 <__aeabi_i2d>
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4602      	mov	r2, r0
 8006a50:	4639      	mov	r1, r7
 8006a52:	4630      	mov	r0, r6
 8006a54:	f7f9 fc30 	bl	80002b8 <__aeabi_dsub>
 8006a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	460f      	mov	r7, r1
 8006a5e:	b933      	cbnz	r3, 8006a6e <_strtod_l+0xace>
 8006a60:	f1ba 0f00 	cmp.w	sl, #0
 8006a64:	d103      	bne.n	8006a6e <_strtod_l+0xace>
 8006a66:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	d06d      	beq.n	8006b4a <_strtod_l+0xbaa>
 8006a6e:	a30a      	add	r3, pc, #40	; (adr r3, 8006a98 <_strtod_l+0xaf8>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	4630      	mov	r0, r6
 8006a76:	4639      	mov	r1, r7
 8006a78:	f7fa f848 	bl	8000b0c <__aeabi_dcmplt>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	f47f acb8 	bne.w	80063f2 <_strtod_l+0x452>
 8006a82:	a307      	add	r3, pc, #28	; (adr r3, 8006aa0 <_strtod_l+0xb00>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	f7fa f85c 	bl	8000b48 <__aeabi_dcmpgt>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	f43f af79 	beq.w	8006988 <_strtod_l+0x9e8>
 8006a96:	e4ac      	b.n	80063f2 <_strtod_l+0x452>
 8006a98:	94a03595 	.word	0x94a03595
 8006a9c:	3fdfffff 	.word	0x3fdfffff
 8006aa0:	35afe535 	.word	0x35afe535
 8006aa4:	3fe00000 	.word	0x3fe00000
 8006aa8:	000fffff 	.word	0x000fffff
 8006aac:	7ff00000 	.word	0x7ff00000
 8006ab0:	7fefffff 	.word	0x7fefffff
 8006ab4:	39500000 	.word	0x39500000
 8006ab8:	3ff00000 	.word	0x3ff00000
 8006abc:	7fe00000 	.word	0x7fe00000
 8006ac0:	7c9fffff 	.word	0x7c9fffff
 8006ac4:	3fe00000 	.word	0x3fe00000
 8006ac8:	bff00000 	.word	0xbff00000
 8006acc:	9b04      	ldr	r3, [sp, #16]
 8006ace:	b333      	cbz	r3, 8006b1e <_strtod_l+0xb7e>
 8006ad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ad2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ad6:	d822      	bhi.n	8006b1e <_strtod_l+0xb7e>
 8006ad8:	a327      	add	r3, pc, #156	; (adr r3, 8006b78 <_strtod_l+0xbd8>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	4630      	mov	r0, r6
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	f7fa f81d 	bl	8000b20 <__aeabi_dcmple>
 8006ae6:	b1a0      	cbz	r0, 8006b12 <_strtod_l+0xb72>
 8006ae8:	4639      	mov	r1, r7
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7fa f874 	bl	8000bd8 <__aeabi_d2uiz>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	bf08      	it	eq
 8006af4:	2001      	moveq	r0, #1
 8006af6:	f7f9 fd1d 	bl	8000534 <__aeabi_ui2d>
 8006afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006afc:	4606      	mov	r6, r0
 8006afe:	460f      	mov	r7, r1
 8006b00:	bb03      	cbnz	r3, 8006b44 <_strtod_l+0xba4>
 8006b02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b06:	9012      	str	r0, [sp, #72]	; 0x48
 8006b08:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006b0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b16:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b1e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006b22:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006b26:	f001 ffdf 	bl	8008ae8 <__ulp>
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	ec53 2b10 	vmov	r2, r3, d0
 8006b30:	4659      	mov	r1, fp
 8006b32:	f7f9 fd79 	bl	8000628 <__aeabi_dmul>
 8006b36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b3a:	f7f9 fbbf 	bl	80002bc <__adddf3>
 8006b3e:	4682      	mov	sl, r0
 8006b40:	468b      	mov	fp, r1
 8006b42:	e772      	b.n	8006a2a <_strtod_l+0xa8a>
 8006b44:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006b48:	e7df      	b.n	8006b0a <_strtod_l+0xb6a>
 8006b4a:	a30d      	add	r3, pc, #52	; (adr r3, 8006b80 <_strtod_l+0xbe0>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 ffdc 	bl	8000b0c <__aeabi_dcmplt>
 8006b54:	e79c      	b.n	8006a90 <_strtod_l+0xaf0>
 8006b56:	2300      	movs	r3, #0
 8006b58:	930d      	str	r3, [sp, #52]	; 0x34
 8006b5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b5e:	6013      	str	r3, [r2, #0]
 8006b60:	f7ff ba61 	b.w	8006026 <_strtod_l+0x86>
 8006b64:	2b65      	cmp	r3, #101	; 0x65
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f43f ab4e 	beq.w	800620a <_strtod_l+0x26a>
 8006b6e:	2101      	movs	r1, #1
 8006b70:	4614      	mov	r4, r2
 8006b72:	9104      	str	r1, [sp, #16]
 8006b74:	f7ff bacb 	b.w	800610e <_strtod_l+0x16e>
 8006b78:	ffc00000 	.word	0xffc00000
 8006b7c:	41dfffff 	.word	0x41dfffff
 8006b80:	94a03595 	.word	0x94a03595
 8006b84:	3fcfffff 	.word	0x3fcfffff

08006b88 <_strtod_r>:
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <_strtod_r+0x18>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	b410      	push	{r4}
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	4c04      	ldr	r4, [pc, #16]	; (8006ba4 <_strtod_r+0x1c>)
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bf08      	it	eq
 8006b96:	4623      	moveq	r3, r4
 8006b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b9c:	f7ff ba00 	b.w	8005fa0 <_strtod_l>
 8006ba0:	20000038 	.word	0x20000038
 8006ba4:	2000009c 	.word	0x2000009c

08006ba8 <_strtol_l.isra.0>:
 8006ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	4680      	mov	r8, r0
 8006bae:	4689      	mov	r9, r1
 8006bb0:	4692      	mov	sl, r2
 8006bb2:	461e      	mov	r6, r3
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	463d      	mov	r5, r7
 8006bb8:	9808      	ldr	r0, [sp, #32]
 8006bba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bbe:	f7fe fab9 	bl	8005134 <__locale_ctype_ptr_l>
 8006bc2:	4420      	add	r0, r4
 8006bc4:	7843      	ldrb	r3, [r0, #1]
 8006bc6:	f013 0308 	ands.w	r3, r3, #8
 8006bca:	d132      	bne.n	8006c32 <_strtol_l.isra.0+0x8a>
 8006bcc:	2c2d      	cmp	r4, #45	; 0x2d
 8006bce:	d132      	bne.n	8006c36 <_strtol_l.isra.0+0x8e>
 8006bd0:	787c      	ldrb	r4, [r7, #1]
 8006bd2:	1cbd      	adds	r5, r7, #2
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	d05d      	beq.n	8006c96 <_strtol_l.isra.0+0xee>
 8006bda:	2e10      	cmp	r6, #16
 8006bdc:	d109      	bne.n	8006bf2 <_strtol_l.isra.0+0x4a>
 8006bde:	2c30      	cmp	r4, #48	; 0x30
 8006be0:	d107      	bne.n	8006bf2 <_strtol_l.isra.0+0x4a>
 8006be2:	782b      	ldrb	r3, [r5, #0]
 8006be4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006be8:	2b58      	cmp	r3, #88	; 0x58
 8006bea:	d14f      	bne.n	8006c8c <_strtol_l.isra.0+0xe4>
 8006bec:	786c      	ldrb	r4, [r5, #1]
 8006bee:	2610      	movs	r6, #16
 8006bf0:	3502      	adds	r5, #2
 8006bf2:	2a00      	cmp	r2, #0
 8006bf4:	bf14      	ite	ne
 8006bf6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006bfa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006bfe:	2700      	movs	r7, #0
 8006c00:	fbb1 fcf6 	udiv	ip, r1, r6
 8006c04:	4638      	mov	r0, r7
 8006c06:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006c0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006c0e:	2b09      	cmp	r3, #9
 8006c10:	d817      	bhi.n	8006c42 <_strtol_l.isra.0+0x9a>
 8006c12:	461c      	mov	r4, r3
 8006c14:	42a6      	cmp	r6, r4
 8006c16:	dd23      	ble.n	8006c60 <_strtol_l.isra.0+0xb8>
 8006c18:	1c7b      	adds	r3, r7, #1
 8006c1a:	d007      	beq.n	8006c2c <_strtol_l.isra.0+0x84>
 8006c1c:	4584      	cmp	ip, r0
 8006c1e:	d31c      	bcc.n	8006c5a <_strtol_l.isra.0+0xb2>
 8006c20:	d101      	bne.n	8006c26 <_strtol_l.isra.0+0x7e>
 8006c22:	45a6      	cmp	lr, r4
 8006c24:	db19      	blt.n	8006c5a <_strtol_l.isra.0+0xb2>
 8006c26:	fb00 4006 	mla	r0, r0, r6, r4
 8006c2a:	2701      	movs	r7, #1
 8006c2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c30:	e7eb      	b.n	8006c0a <_strtol_l.isra.0+0x62>
 8006c32:	462f      	mov	r7, r5
 8006c34:	e7bf      	b.n	8006bb6 <_strtol_l.isra.0+0xe>
 8006c36:	2c2b      	cmp	r4, #43	; 0x2b
 8006c38:	bf04      	itt	eq
 8006c3a:	1cbd      	addeq	r5, r7, #2
 8006c3c:	787c      	ldrbeq	r4, [r7, #1]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	e7c9      	b.n	8006bd6 <_strtol_l.isra.0+0x2e>
 8006c42:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006c46:	2b19      	cmp	r3, #25
 8006c48:	d801      	bhi.n	8006c4e <_strtol_l.isra.0+0xa6>
 8006c4a:	3c37      	subs	r4, #55	; 0x37
 8006c4c:	e7e2      	b.n	8006c14 <_strtol_l.isra.0+0x6c>
 8006c4e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006c52:	2b19      	cmp	r3, #25
 8006c54:	d804      	bhi.n	8006c60 <_strtol_l.isra.0+0xb8>
 8006c56:	3c57      	subs	r4, #87	; 0x57
 8006c58:	e7dc      	b.n	8006c14 <_strtol_l.isra.0+0x6c>
 8006c5a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c5e:	e7e5      	b.n	8006c2c <_strtol_l.isra.0+0x84>
 8006c60:	1c7b      	adds	r3, r7, #1
 8006c62:	d108      	bne.n	8006c76 <_strtol_l.isra.0+0xce>
 8006c64:	2322      	movs	r3, #34	; 0x22
 8006c66:	f8c8 3000 	str.w	r3, [r8]
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	f1ba 0f00 	cmp.w	sl, #0
 8006c70:	d107      	bne.n	8006c82 <_strtol_l.isra.0+0xda>
 8006c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c76:	b102      	cbz	r2, 8006c7a <_strtol_l.isra.0+0xd2>
 8006c78:	4240      	negs	r0, r0
 8006c7a:	f1ba 0f00 	cmp.w	sl, #0
 8006c7e:	d0f8      	beq.n	8006c72 <_strtol_l.isra.0+0xca>
 8006c80:	b10f      	cbz	r7, 8006c86 <_strtol_l.isra.0+0xde>
 8006c82:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006c86:	f8ca 9000 	str.w	r9, [sl]
 8006c8a:	e7f2      	b.n	8006c72 <_strtol_l.isra.0+0xca>
 8006c8c:	2430      	movs	r4, #48	; 0x30
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	d1af      	bne.n	8006bf2 <_strtol_l.isra.0+0x4a>
 8006c92:	2608      	movs	r6, #8
 8006c94:	e7ad      	b.n	8006bf2 <_strtol_l.isra.0+0x4a>
 8006c96:	2c30      	cmp	r4, #48	; 0x30
 8006c98:	d0a3      	beq.n	8006be2 <_strtol_l.isra.0+0x3a>
 8006c9a:	260a      	movs	r6, #10
 8006c9c:	e7a9      	b.n	8006bf2 <_strtol_l.isra.0+0x4a>
	...

08006ca0 <_strtol_r>:
 8006ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ca2:	4c06      	ldr	r4, [pc, #24]	; (8006cbc <_strtol_r+0x1c>)
 8006ca4:	4d06      	ldr	r5, [pc, #24]	; (8006cc0 <_strtol_r+0x20>)
 8006ca6:	6824      	ldr	r4, [r4, #0]
 8006ca8:	6a24      	ldr	r4, [r4, #32]
 8006caa:	2c00      	cmp	r4, #0
 8006cac:	bf08      	it	eq
 8006cae:	462c      	moveq	r4, r5
 8006cb0:	9400      	str	r4, [sp, #0]
 8006cb2:	f7ff ff79 	bl	8006ba8 <_strtol_l.isra.0>
 8006cb6:	b003      	add	sp, #12
 8006cb8:	bd30      	pop	{r4, r5, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000038 	.word	0x20000038
 8006cc0:	2000009c 	.word	0x2000009c

08006cc4 <strtol>:
 8006cc4:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <strtol+0x24>)
 8006cc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cc8:	681c      	ldr	r4, [r3, #0]
 8006cca:	4d08      	ldr	r5, [pc, #32]	; (8006cec <strtol+0x28>)
 8006ccc:	6a23      	ldr	r3, [r4, #32]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bf08      	it	eq
 8006cd2:	462b      	moveq	r3, r5
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	460a      	mov	r2, r1
 8006cda:	4601      	mov	r1, r0
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff ff63 	bl	8006ba8 <_strtol_l.isra.0>
 8006ce2:	b003      	add	sp, #12
 8006ce4:	bd30      	pop	{r4, r5, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000038 	.word	0x20000038
 8006cec:	2000009c 	.word	0x2000009c

08006cf0 <__swbuf_r>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	460e      	mov	r6, r1
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	b118      	cbz	r0, 8006d02 <__swbuf_r+0x12>
 8006cfa:	6983      	ldr	r3, [r0, #24]
 8006cfc:	b90b      	cbnz	r3, 8006d02 <__swbuf_r+0x12>
 8006cfe:	f000 fffb 	bl	8007cf8 <__sinit>
 8006d02:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <__swbuf_r+0x98>)
 8006d04:	429c      	cmp	r4, r3
 8006d06:	d12a      	bne.n	8006d5e <__swbuf_r+0x6e>
 8006d08:	686c      	ldr	r4, [r5, #4]
 8006d0a:	69a3      	ldr	r3, [r4, #24]
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	071a      	lsls	r2, r3, #28
 8006d12:	d52e      	bpl.n	8006d72 <__swbuf_r+0x82>
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	b363      	cbz	r3, 8006d72 <__swbuf_r+0x82>
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	1ac0      	subs	r0, r0, r3
 8006d1e:	6963      	ldr	r3, [r4, #20]
 8006d20:	b2f6      	uxtb	r6, r6
 8006d22:	4283      	cmp	r3, r0
 8006d24:	4637      	mov	r7, r6
 8006d26:	dc04      	bgt.n	8006d32 <__swbuf_r+0x42>
 8006d28:	4621      	mov	r1, r4
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f000 ff7a 	bl	8007c24 <_fflush_r>
 8006d30:	bb28      	cbnz	r0, 8006d7e <__swbuf_r+0x8e>
 8006d32:	68a3      	ldr	r3, [r4, #8]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	60a3      	str	r3, [r4, #8]
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	6022      	str	r2, [r4, #0]
 8006d3e:	701e      	strb	r6, [r3, #0]
 8006d40:	6963      	ldr	r3, [r4, #20]
 8006d42:	3001      	adds	r0, #1
 8006d44:	4283      	cmp	r3, r0
 8006d46:	d004      	beq.n	8006d52 <__swbuf_r+0x62>
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	07db      	lsls	r3, r3, #31
 8006d4c:	d519      	bpl.n	8006d82 <__swbuf_r+0x92>
 8006d4e:	2e0a      	cmp	r6, #10
 8006d50:	d117      	bne.n	8006d82 <__swbuf_r+0x92>
 8006d52:	4621      	mov	r1, r4
 8006d54:	4628      	mov	r0, r5
 8006d56:	f000 ff65 	bl	8007c24 <_fflush_r>
 8006d5a:	b190      	cbz	r0, 8006d82 <__swbuf_r+0x92>
 8006d5c:	e00f      	b.n	8006d7e <__swbuf_r+0x8e>
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <__swbuf_r+0x9c>)
 8006d60:	429c      	cmp	r4, r3
 8006d62:	d101      	bne.n	8006d68 <__swbuf_r+0x78>
 8006d64:	68ac      	ldr	r4, [r5, #8]
 8006d66:	e7d0      	b.n	8006d0a <__swbuf_r+0x1a>
 8006d68:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <__swbuf_r+0xa0>)
 8006d6a:	429c      	cmp	r4, r3
 8006d6c:	bf08      	it	eq
 8006d6e:	68ec      	ldreq	r4, [r5, #12]
 8006d70:	e7cb      	b.n	8006d0a <__swbuf_r+0x1a>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4628      	mov	r0, r5
 8006d76:	f000 f81b 	bl	8006db0 <__swsetup_r>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d0cc      	beq.n	8006d18 <__swbuf_r+0x28>
 8006d7e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d82:	4638      	mov	r0, r7
 8006d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d86:	bf00      	nop
 8006d88:	08009c78 	.word	0x08009c78
 8006d8c:	08009c98 	.word	0x08009c98
 8006d90:	08009c58 	.word	0x08009c58

08006d94 <__ascii_wctomb>:
 8006d94:	b149      	cbz	r1, 8006daa <__ascii_wctomb+0x16>
 8006d96:	2aff      	cmp	r2, #255	; 0xff
 8006d98:	bf85      	ittet	hi
 8006d9a:	238a      	movhi	r3, #138	; 0x8a
 8006d9c:	6003      	strhi	r3, [r0, #0]
 8006d9e:	700a      	strbls	r2, [r1, #0]
 8006da0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006da4:	bf98      	it	ls
 8006da6:	2001      	movls	r0, #1
 8006da8:	4770      	bx	lr
 8006daa:	4608      	mov	r0, r1
 8006dac:	4770      	bx	lr
	...

08006db0 <__swsetup_r>:
 8006db0:	4b32      	ldr	r3, [pc, #200]	; (8006e7c <__swsetup_r+0xcc>)
 8006db2:	b570      	push	{r4, r5, r6, lr}
 8006db4:	681d      	ldr	r5, [r3, #0]
 8006db6:	4606      	mov	r6, r0
 8006db8:	460c      	mov	r4, r1
 8006dba:	b125      	cbz	r5, 8006dc6 <__swsetup_r+0x16>
 8006dbc:	69ab      	ldr	r3, [r5, #24]
 8006dbe:	b913      	cbnz	r3, 8006dc6 <__swsetup_r+0x16>
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f000 ff99 	bl	8007cf8 <__sinit>
 8006dc6:	4b2e      	ldr	r3, [pc, #184]	; (8006e80 <__swsetup_r+0xd0>)
 8006dc8:	429c      	cmp	r4, r3
 8006dca:	d10f      	bne.n	8006dec <__swsetup_r+0x3c>
 8006dcc:	686c      	ldr	r4, [r5, #4]
 8006dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	0715      	lsls	r5, r2, #28
 8006dd6:	d42c      	bmi.n	8006e32 <__swsetup_r+0x82>
 8006dd8:	06d0      	lsls	r0, r2, #27
 8006dda:	d411      	bmi.n	8006e00 <__swsetup_r+0x50>
 8006ddc:	2209      	movs	r2, #9
 8006dde:	6032      	str	r2, [r6, #0]
 8006de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de4:	81a3      	strh	r3, [r4, #12]
 8006de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dea:	e03e      	b.n	8006e6a <__swsetup_r+0xba>
 8006dec:	4b25      	ldr	r3, [pc, #148]	; (8006e84 <__swsetup_r+0xd4>)
 8006dee:	429c      	cmp	r4, r3
 8006df0:	d101      	bne.n	8006df6 <__swsetup_r+0x46>
 8006df2:	68ac      	ldr	r4, [r5, #8]
 8006df4:	e7eb      	b.n	8006dce <__swsetup_r+0x1e>
 8006df6:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <__swsetup_r+0xd8>)
 8006df8:	429c      	cmp	r4, r3
 8006dfa:	bf08      	it	eq
 8006dfc:	68ec      	ldreq	r4, [r5, #12]
 8006dfe:	e7e6      	b.n	8006dce <__swsetup_r+0x1e>
 8006e00:	0751      	lsls	r1, r2, #29
 8006e02:	d512      	bpl.n	8006e2a <__swsetup_r+0x7a>
 8006e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e06:	b141      	cbz	r1, 8006e1a <__swsetup_r+0x6a>
 8006e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	d002      	beq.n	8006e16 <__swsetup_r+0x66>
 8006e10:	4630      	mov	r0, r6
 8006e12:	f001 ffab 	bl	8008d6c <_free_r>
 8006e16:	2300      	movs	r3, #0
 8006e18:	6363      	str	r3, [r4, #52]	; 0x34
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e20:	81a3      	strh	r3, [r4, #12]
 8006e22:	2300      	movs	r3, #0
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f043 0308 	orr.w	r3, r3, #8
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	b94b      	cbnz	r3, 8006e4a <__swsetup_r+0x9a>
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e40:	d003      	beq.n	8006e4a <__swsetup_r+0x9a>
 8006e42:	4621      	mov	r1, r4
 8006e44:	4630      	mov	r0, r6
 8006e46:	f001 fb3b 	bl	80084c0 <__smakebuf_r>
 8006e4a:	89a2      	ldrh	r2, [r4, #12]
 8006e4c:	f012 0301 	ands.w	r3, r2, #1
 8006e50:	d00c      	beq.n	8006e6c <__swsetup_r+0xbc>
 8006e52:	2300      	movs	r3, #0
 8006e54:	60a3      	str	r3, [r4, #8]
 8006e56:	6963      	ldr	r3, [r4, #20]
 8006e58:	425b      	negs	r3, r3
 8006e5a:	61a3      	str	r3, [r4, #24]
 8006e5c:	6923      	ldr	r3, [r4, #16]
 8006e5e:	b953      	cbnz	r3, 8006e76 <__swsetup_r+0xc6>
 8006e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e64:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006e68:	d1ba      	bne.n	8006de0 <__swsetup_r+0x30>
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}
 8006e6c:	0792      	lsls	r2, r2, #30
 8006e6e:	bf58      	it	pl
 8006e70:	6963      	ldrpl	r3, [r4, #20]
 8006e72:	60a3      	str	r3, [r4, #8]
 8006e74:	e7f2      	b.n	8006e5c <__swsetup_r+0xac>
 8006e76:	2000      	movs	r0, #0
 8006e78:	e7f7      	b.n	8006e6a <__swsetup_r+0xba>
 8006e7a:	bf00      	nop
 8006e7c:	20000038 	.word	0x20000038
 8006e80:	08009c78 	.word	0x08009c78
 8006e84:	08009c98 	.word	0x08009c98
 8006e88:	08009c58 	.word	0x08009c58

08006e8c <quorem>:
 8006e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	6903      	ldr	r3, [r0, #16]
 8006e92:	690c      	ldr	r4, [r1, #16]
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	4680      	mov	r8, r0
 8006e98:	f2c0 8082 	blt.w	8006fa0 <quorem+0x114>
 8006e9c:	3c01      	subs	r4, #1
 8006e9e:	f101 0714 	add.w	r7, r1, #20
 8006ea2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006ea6:	f100 0614 	add.w	r6, r0, #20
 8006eaa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006eae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006eb2:	eb06 030c 	add.w	r3, r6, ip
 8006eb6:	3501      	adds	r5, #1
 8006eb8:	eb07 090c 	add.w	r9, r7, ip
 8006ebc:	9301      	str	r3, [sp, #4]
 8006ebe:	fbb0 f5f5 	udiv	r5, r0, r5
 8006ec2:	b395      	cbz	r5, 8006f2a <quorem+0x9e>
 8006ec4:	f04f 0a00 	mov.w	sl, #0
 8006ec8:	4638      	mov	r0, r7
 8006eca:	46b6      	mov	lr, r6
 8006ecc:	46d3      	mov	fp, sl
 8006ece:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ed2:	b293      	uxth	r3, r2
 8006ed4:	fb05 a303 	mla	r3, r5, r3, sl
 8006ed8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	ebab 0303 	sub.w	r3, fp, r3
 8006ee2:	0c12      	lsrs	r2, r2, #16
 8006ee4:	f8de b000 	ldr.w	fp, [lr]
 8006ee8:	fb05 a202 	mla	r2, r5, r2, sl
 8006eec:	fa13 f38b 	uxtah	r3, r3, fp
 8006ef0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006ef4:	fa1f fb82 	uxth.w	fp, r2
 8006ef8:	f8de 2000 	ldr.w	r2, [lr]
 8006efc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f0a:	4581      	cmp	r9, r0
 8006f0c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006f10:	f84e 3b04 	str.w	r3, [lr], #4
 8006f14:	d2db      	bcs.n	8006ece <quorem+0x42>
 8006f16:	f856 300c 	ldr.w	r3, [r6, ip]
 8006f1a:	b933      	cbnz	r3, 8006f2a <quorem+0x9e>
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	3b04      	subs	r3, #4
 8006f20:	429e      	cmp	r6, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	d330      	bcc.n	8006f88 <quorem+0xfc>
 8006f26:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	f001 fd64 	bl	80089f8 <__mcmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	db25      	blt.n	8006f80 <quorem+0xf4>
 8006f34:	3501      	adds	r5, #1
 8006f36:	4630      	mov	r0, r6
 8006f38:	f04f 0c00 	mov.w	ip, #0
 8006f3c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006f40:	f8d0 e000 	ldr.w	lr, [r0]
 8006f44:	b293      	uxth	r3, r2
 8006f46:	ebac 0303 	sub.w	r3, ip, r3
 8006f4a:	0c12      	lsrs	r2, r2, #16
 8006f4c:	fa13 f38e 	uxtah	r3, r3, lr
 8006f50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f5e:	45b9      	cmp	r9, r7
 8006f60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f64:	f840 3b04 	str.w	r3, [r0], #4
 8006f68:	d2e8      	bcs.n	8006f3c <quorem+0xb0>
 8006f6a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f72:	b92a      	cbnz	r2, 8006f80 <quorem+0xf4>
 8006f74:	3b04      	subs	r3, #4
 8006f76:	429e      	cmp	r6, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	d30b      	bcc.n	8006f94 <quorem+0x108>
 8006f7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f80:	4628      	mov	r0, r5
 8006f82:	b003      	add	sp, #12
 8006f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f88:	6812      	ldr	r2, [r2, #0]
 8006f8a:	3b04      	subs	r3, #4
 8006f8c:	2a00      	cmp	r2, #0
 8006f8e:	d1ca      	bne.n	8006f26 <quorem+0x9a>
 8006f90:	3c01      	subs	r4, #1
 8006f92:	e7c5      	b.n	8006f20 <quorem+0x94>
 8006f94:	6812      	ldr	r2, [r2, #0]
 8006f96:	3b04      	subs	r3, #4
 8006f98:	2a00      	cmp	r2, #0
 8006f9a:	d1ef      	bne.n	8006f7c <quorem+0xf0>
 8006f9c:	3c01      	subs	r4, #1
 8006f9e:	e7ea      	b.n	8006f76 <quorem+0xea>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	e7ee      	b.n	8006f82 <quorem+0xf6>
 8006fa4:	0000      	movs	r0, r0
	...

08006fa8 <_dtoa_r>:
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	ec57 6b10 	vmov	r6, r7, d0
 8006fb0:	b097      	sub	sp, #92	; 0x5c
 8006fb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fb4:	9106      	str	r1, [sp, #24]
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fba:	9312      	str	r3, [sp, #72]	; 0x48
 8006fbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fc0:	e9cd 6700 	strd	r6, r7, [sp]
 8006fc4:	b93d      	cbnz	r5, 8006fd6 <_dtoa_r+0x2e>
 8006fc6:	2010      	movs	r0, #16
 8006fc8:	f001 faba 	bl	8008540 <malloc>
 8006fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8006fce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fd2:	6005      	str	r5, [r0, #0]
 8006fd4:	60c5      	str	r5, [r0, #12]
 8006fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd8:	6819      	ldr	r1, [r3, #0]
 8006fda:	b151      	cbz	r1, 8006ff2 <_dtoa_r+0x4a>
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	604a      	str	r2, [r1, #4]
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	4093      	lsls	r3, r2
 8006fe4:	608b      	str	r3, [r1, #8]
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f001 fae6 	bl	80085b8 <_Bfree>
 8006fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	1e3b      	subs	r3, r7, #0
 8006ff4:	bfbb      	ittet	lt
 8006ff6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ffa:	9301      	strlt	r3, [sp, #4]
 8006ffc:	2300      	movge	r3, #0
 8006ffe:	2201      	movlt	r2, #1
 8007000:	bfac      	ite	ge
 8007002:	f8c8 3000 	strge.w	r3, [r8]
 8007006:	f8c8 2000 	strlt.w	r2, [r8]
 800700a:	4baf      	ldr	r3, [pc, #700]	; (80072c8 <_dtoa_r+0x320>)
 800700c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007010:	ea33 0308 	bics.w	r3, r3, r8
 8007014:	d114      	bne.n	8007040 <_dtoa_r+0x98>
 8007016:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007018:	f242 730f 	movw	r3, #9999	; 0x270f
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	9b00      	ldr	r3, [sp, #0]
 8007020:	b923      	cbnz	r3, 800702c <_dtoa_r+0x84>
 8007022:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007026:	2800      	cmp	r0, #0
 8007028:	f000 8542 	beq.w	8007ab0 <_dtoa_r+0xb08>
 800702c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800702e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80072dc <_dtoa_r+0x334>
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8544 	beq.w	8007ac0 <_dtoa_r+0xb18>
 8007038:	f10b 0303 	add.w	r3, fp, #3
 800703c:	f000 bd3e 	b.w	8007abc <_dtoa_r+0xb14>
 8007040:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	4630      	mov	r0, r6
 800704a:	4639      	mov	r1, r7
 800704c:	f7f9 fd54 	bl	8000af8 <__aeabi_dcmpeq>
 8007050:	4681      	mov	r9, r0
 8007052:	b168      	cbz	r0, 8007070 <_dtoa_r+0xc8>
 8007054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007056:	2301      	movs	r3, #1
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8524 	beq.w	8007aaa <_dtoa_r+0xb02>
 8007062:	4b9a      	ldr	r3, [pc, #616]	; (80072cc <_dtoa_r+0x324>)
 8007064:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007066:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	f000 bd28 	b.w	8007ac0 <_dtoa_r+0xb18>
 8007070:	aa14      	add	r2, sp, #80	; 0x50
 8007072:	a915      	add	r1, sp, #84	; 0x54
 8007074:	ec47 6b10 	vmov	d0, r6, r7
 8007078:	4620      	mov	r0, r4
 800707a:	f001 fdab 	bl	8008bd4 <__d2b>
 800707e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007082:	9004      	str	r0, [sp, #16]
 8007084:	2d00      	cmp	r5, #0
 8007086:	d07c      	beq.n	8007182 <_dtoa_r+0x1da>
 8007088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800708c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007090:	46b2      	mov	sl, r6
 8007092:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800709a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800709e:	2200      	movs	r2, #0
 80070a0:	4b8b      	ldr	r3, [pc, #556]	; (80072d0 <_dtoa_r+0x328>)
 80070a2:	4650      	mov	r0, sl
 80070a4:	4659      	mov	r1, fp
 80070a6:	f7f9 f907 	bl	80002b8 <__aeabi_dsub>
 80070aa:	a381      	add	r3, pc, #516	; (adr r3, 80072b0 <_dtoa_r+0x308>)
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f7f9 faba 	bl	8000628 <__aeabi_dmul>
 80070b4:	a380      	add	r3, pc, #512	; (adr r3, 80072b8 <_dtoa_r+0x310>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	f7f9 f8ff 	bl	80002bc <__adddf3>
 80070be:	4606      	mov	r6, r0
 80070c0:	4628      	mov	r0, r5
 80070c2:	460f      	mov	r7, r1
 80070c4:	f7f9 fa46 	bl	8000554 <__aeabi_i2d>
 80070c8:	a37d      	add	r3, pc, #500	; (adr r3, 80072c0 <_dtoa_r+0x318>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 faab 	bl	8000628 <__aeabi_dmul>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4630      	mov	r0, r6
 80070d8:	4639      	mov	r1, r7
 80070da:	f7f9 f8ef 	bl	80002bc <__adddf3>
 80070de:	4606      	mov	r6, r0
 80070e0:	460f      	mov	r7, r1
 80070e2:	f7f9 fd51 	bl	8000b88 <__aeabi_d2iz>
 80070e6:	2200      	movs	r2, #0
 80070e8:	4682      	mov	sl, r0
 80070ea:	2300      	movs	r3, #0
 80070ec:	4630      	mov	r0, r6
 80070ee:	4639      	mov	r1, r7
 80070f0:	f7f9 fd0c 	bl	8000b0c <__aeabi_dcmplt>
 80070f4:	b148      	cbz	r0, 800710a <_dtoa_r+0x162>
 80070f6:	4650      	mov	r0, sl
 80070f8:	f7f9 fa2c 	bl	8000554 <__aeabi_i2d>
 80070fc:	4632      	mov	r2, r6
 80070fe:	463b      	mov	r3, r7
 8007100:	f7f9 fcfa 	bl	8000af8 <__aeabi_dcmpeq>
 8007104:	b908      	cbnz	r0, 800710a <_dtoa_r+0x162>
 8007106:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800710a:	f1ba 0f16 	cmp.w	sl, #22
 800710e:	d859      	bhi.n	80071c4 <_dtoa_r+0x21c>
 8007110:	4970      	ldr	r1, [pc, #448]	; (80072d4 <_dtoa_r+0x32c>)
 8007112:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800711a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800711e:	f7f9 fd13 	bl	8000b48 <__aeabi_dcmpgt>
 8007122:	2800      	cmp	r0, #0
 8007124:	d050      	beq.n	80071c8 <_dtoa_r+0x220>
 8007126:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800712a:	2300      	movs	r3, #0
 800712c:	930f      	str	r3, [sp, #60]	; 0x3c
 800712e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007130:	1b5d      	subs	r5, r3, r5
 8007132:	f1b5 0801 	subs.w	r8, r5, #1
 8007136:	bf49      	itett	mi
 8007138:	f1c5 0301 	rsbmi	r3, r5, #1
 800713c:	2300      	movpl	r3, #0
 800713e:	9305      	strmi	r3, [sp, #20]
 8007140:	f04f 0800 	movmi.w	r8, #0
 8007144:	bf58      	it	pl
 8007146:	9305      	strpl	r3, [sp, #20]
 8007148:	f1ba 0f00 	cmp.w	sl, #0
 800714c:	db3e      	blt.n	80071cc <_dtoa_r+0x224>
 800714e:	2300      	movs	r3, #0
 8007150:	44d0      	add	r8, sl
 8007152:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007156:	9307      	str	r3, [sp, #28]
 8007158:	9b06      	ldr	r3, [sp, #24]
 800715a:	2b09      	cmp	r3, #9
 800715c:	f200 8090 	bhi.w	8007280 <_dtoa_r+0x2d8>
 8007160:	2b05      	cmp	r3, #5
 8007162:	bfc4      	itt	gt
 8007164:	3b04      	subgt	r3, #4
 8007166:	9306      	strgt	r3, [sp, #24]
 8007168:	9b06      	ldr	r3, [sp, #24]
 800716a:	f1a3 0302 	sub.w	r3, r3, #2
 800716e:	bfcc      	ite	gt
 8007170:	2500      	movgt	r5, #0
 8007172:	2501      	movle	r5, #1
 8007174:	2b03      	cmp	r3, #3
 8007176:	f200 808f 	bhi.w	8007298 <_dtoa_r+0x2f0>
 800717a:	e8df f003 	tbb	[pc, r3]
 800717e:	7f7d      	.short	0x7f7d
 8007180:	7131      	.short	0x7131
 8007182:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007186:	441d      	add	r5, r3
 8007188:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800718c:	2820      	cmp	r0, #32
 800718e:	dd13      	ble.n	80071b8 <_dtoa_r+0x210>
 8007190:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007194:	9b00      	ldr	r3, [sp, #0]
 8007196:	fa08 f800 	lsl.w	r8, r8, r0
 800719a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800719e:	fa23 f000 	lsr.w	r0, r3, r0
 80071a2:	ea48 0000 	orr.w	r0, r8, r0
 80071a6:	f7f9 f9c5 	bl	8000534 <__aeabi_ui2d>
 80071aa:	2301      	movs	r3, #1
 80071ac:	4682      	mov	sl, r0
 80071ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80071b2:	3d01      	subs	r5, #1
 80071b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80071b6:	e772      	b.n	800709e <_dtoa_r+0xf6>
 80071b8:	9b00      	ldr	r3, [sp, #0]
 80071ba:	f1c0 0020 	rsb	r0, r0, #32
 80071be:	fa03 f000 	lsl.w	r0, r3, r0
 80071c2:	e7f0      	b.n	80071a6 <_dtoa_r+0x1fe>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e7b1      	b.n	800712c <_dtoa_r+0x184>
 80071c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80071ca:	e7b0      	b.n	800712e <_dtoa_r+0x186>
 80071cc:	9b05      	ldr	r3, [sp, #20]
 80071ce:	eba3 030a 	sub.w	r3, r3, sl
 80071d2:	9305      	str	r3, [sp, #20]
 80071d4:	f1ca 0300 	rsb	r3, sl, #0
 80071d8:	9307      	str	r3, [sp, #28]
 80071da:	2300      	movs	r3, #0
 80071dc:	930e      	str	r3, [sp, #56]	; 0x38
 80071de:	e7bb      	b.n	8007158 <_dtoa_r+0x1b0>
 80071e0:	2301      	movs	r3, #1
 80071e2:	930a      	str	r3, [sp, #40]	; 0x28
 80071e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	dd59      	ble.n	800729e <_dtoa_r+0x2f6>
 80071ea:	9302      	str	r3, [sp, #8]
 80071ec:	4699      	mov	r9, r3
 80071ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071f0:	2200      	movs	r2, #0
 80071f2:	6072      	str	r2, [r6, #4]
 80071f4:	2204      	movs	r2, #4
 80071f6:	f102 0014 	add.w	r0, r2, #20
 80071fa:	4298      	cmp	r0, r3
 80071fc:	6871      	ldr	r1, [r6, #4]
 80071fe:	d953      	bls.n	80072a8 <_dtoa_r+0x300>
 8007200:	4620      	mov	r0, r4
 8007202:	f001 f9a5 	bl	8008550 <_Balloc>
 8007206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007208:	6030      	str	r0, [r6, #0]
 800720a:	f1b9 0f0e 	cmp.w	r9, #14
 800720e:	f8d3 b000 	ldr.w	fp, [r3]
 8007212:	f200 80e6 	bhi.w	80073e2 <_dtoa_r+0x43a>
 8007216:	2d00      	cmp	r5, #0
 8007218:	f000 80e3 	beq.w	80073e2 <_dtoa_r+0x43a>
 800721c:	ed9d 7b00 	vldr	d7, [sp]
 8007220:	f1ba 0f00 	cmp.w	sl, #0
 8007224:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007228:	dd74      	ble.n	8007314 <_dtoa_r+0x36c>
 800722a:	4a2a      	ldr	r2, [pc, #168]	; (80072d4 <_dtoa_r+0x32c>)
 800722c:	f00a 030f 	and.w	r3, sl, #15
 8007230:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007234:	ed93 7b00 	vldr	d7, [r3]
 8007238:	ea4f 162a 	mov.w	r6, sl, asr #4
 800723c:	06f0      	lsls	r0, r6, #27
 800723e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007242:	d565      	bpl.n	8007310 <_dtoa_r+0x368>
 8007244:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <_dtoa_r+0x330>)
 8007246:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800724a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800724e:	f7f9 fb15 	bl	800087c <__aeabi_ddiv>
 8007252:	e9cd 0100 	strd	r0, r1, [sp]
 8007256:	f006 060f 	and.w	r6, r6, #15
 800725a:	2503      	movs	r5, #3
 800725c:	4f1e      	ldr	r7, [pc, #120]	; (80072d8 <_dtoa_r+0x330>)
 800725e:	e04c      	b.n	80072fa <_dtoa_r+0x352>
 8007260:	2301      	movs	r3, #1
 8007262:	930a      	str	r3, [sp, #40]	; 0x28
 8007264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007266:	4453      	add	r3, sl
 8007268:	f103 0901 	add.w	r9, r3, #1
 800726c:	9302      	str	r3, [sp, #8]
 800726e:	464b      	mov	r3, r9
 8007270:	2b01      	cmp	r3, #1
 8007272:	bfb8      	it	lt
 8007274:	2301      	movlt	r3, #1
 8007276:	e7ba      	b.n	80071ee <_dtoa_r+0x246>
 8007278:	2300      	movs	r3, #0
 800727a:	e7b2      	b.n	80071e2 <_dtoa_r+0x23a>
 800727c:	2300      	movs	r3, #0
 800727e:	e7f0      	b.n	8007262 <_dtoa_r+0x2ba>
 8007280:	2501      	movs	r5, #1
 8007282:	2300      	movs	r3, #0
 8007284:	9306      	str	r3, [sp, #24]
 8007286:	950a      	str	r5, [sp, #40]	; 0x28
 8007288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	4699      	mov	r9, r3
 8007290:	2200      	movs	r2, #0
 8007292:	2312      	movs	r3, #18
 8007294:	920b      	str	r2, [sp, #44]	; 0x2c
 8007296:	e7aa      	b.n	80071ee <_dtoa_r+0x246>
 8007298:	2301      	movs	r3, #1
 800729a:	930a      	str	r3, [sp, #40]	; 0x28
 800729c:	e7f4      	b.n	8007288 <_dtoa_r+0x2e0>
 800729e:	2301      	movs	r3, #1
 80072a0:	9302      	str	r3, [sp, #8]
 80072a2:	4699      	mov	r9, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	e7f5      	b.n	8007294 <_dtoa_r+0x2ec>
 80072a8:	3101      	adds	r1, #1
 80072aa:	6071      	str	r1, [r6, #4]
 80072ac:	0052      	lsls	r2, r2, #1
 80072ae:	e7a2      	b.n	80071f6 <_dtoa_r+0x24e>
 80072b0:	636f4361 	.word	0x636f4361
 80072b4:	3fd287a7 	.word	0x3fd287a7
 80072b8:	8b60c8b3 	.word	0x8b60c8b3
 80072bc:	3fc68a28 	.word	0x3fc68a28
 80072c0:	509f79fb 	.word	0x509f79fb
 80072c4:	3fd34413 	.word	0x3fd34413
 80072c8:	7ff00000 	.word	0x7ff00000
 80072cc:	08009acf 	.word	0x08009acf
 80072d0:	3ff80000 	.word	0x3ff80000
 80072d4:	08009ce0 	.word	0x08009ce0
 80072d8:	08009cb8 	.word	0x08009cb8
 80072dc:	08009c52 	.word	0x08009c52
 80072e0:	07f1      	lsls	r1, r6, #31
 80072e2:	d508      	bpl.n	80072f6 <_dtoa_r+0x34e>
 80072e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ec:	f7f9 f99c 	bl	8000628 <__aeabi_dmul>
 80072f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072f4:	3501      	adds	r5, #1
 80072f6:	1076      	asrs	r6, r6, #1
 80072f8:	3708      	adds	r7, #8
 80072fa:	2e00      	cmp	r6, #0
 80072fc:	d1f0      	bne.n	80072e0 <_dtoa_r+0x338>
 80072fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007302:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007306:	f7f9 fab9 	bl	800087c <__aeabi_ddiv>
 800730a:	e9cd 0100 	strd	r0, r1, [sp]
 800730e:	e01a      	b.n	8007346 <_dtoa_r+0x39e>
 8007310:	2502      	movs	r5, #2
 8007312:	e7a3      	b.n	800725c <_dtoa_r+0x2b4>
 8007314:	f000 80a0 	beq.w	8007458 <_dtoa_r+0x4b0>
 8007318:	f1ca 0600 	rsb	r6, sl, #0
 800731c:	4b9f      	ldr	r3, [pc, #636]	; (800759c <_dtoa_r+0x5f4>)
 800731e:	4fa0      	ldr	r7, [pc, #640]	; (80075a0 <_dtoa_r+0x5f8>)
 8007320:	f006 020f 	and.w	r2, r6, #15
 8007324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007330:	f7f9 f97a 	bl	8000628 <__aeabi_dmul>
 8007334:	e9cd 0100 	strd	r0, r1, [sp]
 8007338:	1136      	asrs	r6, r6, #4
 800733a:	2300      	movs	r3, #0
 800733c:	2502      	movs	r5, #2
 800733e:	2e00      	cmp	r6, #0
 8007340:	d17f      	bne.n	8007442 <_dtoa_r+0x49a>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e1      	bne.n	800730a <_dtoa_r+0x362>
 8007346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8087 	beq.w	800745c <_dtoa_r+0x4b4>
 800734e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007352:	2200      	movs	r2, #0
 8007354:	4b93      	ldr	r3, [pc, #588]	; (80075a4 <_dtoa_r+0x5fc>)
 8007356:	4630      	mov	r0, r6
 8007358:	4639      	mov	r1, r7
 800735a:	f7f9 fbd7 	bl	8000b0c <__aeabi_dcmplt>
 800735e:	2800      	cmp	r0, #0
 8007360:	d07c      	beq.n	800745c <_dtoa_r+0x4b4>
 8007362:	f1b9 0f00 	cmp.w	r9, #0
 8007366:	d079      	beq.n	800745c <_dtoa_r+0x4b4>
 8007368:	9b02      	ldr	r3, [sp, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	dd35      	ble.n	80073da <_dtoa_r+0x432>
 800736e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007372:	9308      	str	r3, [sp, #32]
 8007374:	4639      	mov	r1, r7
 8007376:	2200      	movs	r2, #0
 8007378:	4b8b      	ldr	r3, [pc, #556]	; (80075a8 <_dtoa_r+0x600>)
 800737a:	4630      	mov	r0, r6
 800737c:	f7f9 f954 	bl	8000628 <__aeabi_dmul>
 8007380:	e9cd 0100 	strd	r0, r1, [sp]
 8007384:	9f02      	ldr	r7, [sp, #8]
 8007386:	3501      	adds	r5, #1
 8007388:	4628      	mov	r0, r5
 800738a:	f7f9 f8e3 	bl	8000554 <__aeabi_i2d>
 800738e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007392:	f7f9 f949 	bl	8000628 <__aeabi_dmul>
 8007396:	2200      	movs	r2, #0
 8007398:	4b84      	ldr	r3, [pc, #528]	; (80075ac <_dtoa_r+0x604>)
 800739a:	f7f8 ff8f 	bl	80002bc <__adddf3>
 800739e:	4605      	mov	r5, r0
 80073a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80073a4:	2f00      	cmp	r7, #0
 80073a6:	d15d      	bne.n	8007464 <_dtoa_r+0x4bc>
 80073a8:	2200      	movs	r2, #0
 80073aa:	4b81      	ldr	r3, [pc, #516]	; (80075b0 <_dtoa_r+0x608>)
 80073ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073b0:	f7f8 ff82 	bl	80002b8 <__aeabi_dsub>
 80073b4:	462a      	mov	r2, r5
 80073b6:	4633      	mov	r3, r6
 80073b8:	e9cd 0100 	strd	r0, r1, [sp]
 80073bc:	f7f9 fbc4 	bl	8000b48 <__aeabi_dcmpgt>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	f040 8288 	bne.w	80078d6 <_dtoa_r+0x92e>
 80073c6:	462a      	mov	r2, r5
 80073c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80073cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073d0:	f7f9 fb9c 	bl	8000b0c <__aeabi_dcmplt>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	f040 827c 	bne.w	80078d2 <_dtoa_r+0x92a>
 80073da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073de:	e9cd 2300 	strd	r2, r3, [sp]
 80073e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f2c0 8150 	blt.w	800768a <_dtoa_r+0x6e2>
 80073ea:	f1ba 0f0e 	cmp.w	sl, #14
 80073ee:	f300 814c 	bgt.w	800768a <_dtoa_r+0x6e2>
 80073f2:	4b6a      	ldr	r3, [pc, #424]	; (800759c <_dtoa_r+0x5f4>)
 80073f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073f8:	ed93 7b00 	vldr	d7, [r3]
 80073fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007404:	f280 80d8 	bge.w	80075b8 <_dtoa_r+0x610>
 8007408:	f1b9 0f00 	cmp.w	r9, #0
 800740c:	f300 80d4 	bgt.w	80075b8 <_dtoa_r+0x610>
 8007410:	f040 825e 	bne.w	80078d0 <_dtoa_r+0x928>
 8007414:	2200      	movs	r2, #0
 8007416:	4b66      	ldr	r3, [pc, #408]	; (80075b0 <_dtoa_r+0x608>)
 8007418:	ec51 0b17 	vmov	r0, r1, d7
 800741c:	f7f9 f904 	bl	8000628 <__aeabi_dmul>
 8007420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007424:	f7f9 fb86 	bl	8000b34 <__aeabi_dcmpge>
 8007428:	464f      	mov	r7, r9
 800742a:	464e      	mov	r6, r9
 800742c:	2800      	cmp	r0, #0
 800742e:	f040 8234 	bne.w	800789a <_dtoa_r+0x8f2>
 8007432:	2331      	movs	r3, #49	; 0x31
 8007434:	f10b 0501 	add.w	r5, fp, #1
 8007438:	f88b 3000 	strb.w	r3, [fp]
 800743c:	f10a 0a01 	add.w	sl, sl, #1
 8007440:	e22f      	b.n	80078a2 <_dtoa_r+0x8fa>
 8007442:	07f2      	lsls	r2, r6, #31
 8007444:	d505      	bpl.n	8007452 <_dtoa_r+0x4aa>
 8007446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744a:	f7f9 f8ed 	bl	8000628 <__aeabi_dmul>
 800744e:	3501      	adds	r5, #1
 8007450:	2301      	movs	r3, #1
 8007452:	1076      	asrs	r6, r6, #1
 8007454:	3708      	adds	r7, #8
 8007456:	e772      	b.n	800733e <_dtoa_r+0x396>
 8007458:	2502      	movs	r5, #2
 800745a:	e774      	b.n	8007346 <_dtoa_r+0x39e>
 800745c:	f8cd a020 	str.w	sl, [sp, #32]
 8007460:	464f      	mov	r7, r9
 8007462:	e791      	b.n	8007388 <_dtoa_r+0x3e0>
 8007464:	4b4d      	ldr	r3, [pc, #308]	; (800759c <_dtoa_r+0x5f4>)
 8007466:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800746a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800746e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007470:	2b00      	cmp	r3, #0
 8007472:	d047      	beq.n	8007504 <_dtoa_r+0x55c>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	2000      	movs	r0, #0
 800747a:	494e      	ldr	r1, [pc, #312]	; (80075b4 <_dtoa_r+0x60c>)
 800747c:	f7f9 f9fe 	bl	800087c <__aeabi_ddiv>
 8007480:	462a      	mov	r2, r5
 8007482:	4633      	mov	r3, r6
 8007484:	f7f8 ff18 	bl	80002b8 <__aeabi_dsub>
 8007488:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800748c:	465d      	mov	r5, fp
 800748e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007492:	f7f9 fb79 	bl	8000b88 <__aeabi_d2iz>
 8007496:	4606      	mov	r6, r0
 8007498:	f7f9 f85c 	bl	8000554 <__aeabi_i2d>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074a4:	f7f8 ff08 	bl	80002b8 <__aeabi_dsub>
 80074a8:	3630      	adds	r6, #48	; 0x30
 80074aa:	f805 6b01 	strb.w	r6, [r5], #1
 80074ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074b2:	e9cd 0100 	strd	r0, r1, [sp]
 80074b6:	f7f9 fb29 	bl	8000b0c <__aeabi_dcmplt>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d163      	bne.n	8007586 <_dtoa_r+0x5de>
 80074be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074c2:	2000      	movs	r0, #0
 80074c4:	4937      	ldr	r1, [pc, #220]	; (80075a4 <_dtoa_r+0x5fc>)
 80074c6:	f7f8 fef7 	bl	80002b8 <__aeabi_dsub>
 80074ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074ce:	f7f9 fb1d 	bl	8000b0c <__aeabi_dcmplt>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	f040 80b7 	bne.w	8007646 <_dtoa_r+0x69e>
 80074d8:	eba5 030b 	sub.w	r3, r5, fp
 80074dc:	429f      	cmp	r7, r3
 80074de:	f77f af7c 	ble.w	80073da <_dtoa_r+0x432>
 80074e2:	2200      	movs	r2, #0
 80074e4:	4b30      	ldr	r3, [pc, #192]	; (80075a8 <_dtoa_r+0x600>)
 80074e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074ea:	f7f9 f89d 	bl	8000628 <__aeabi_dmul>
 80074ee:	2200      	movs	r2, #0
 80074f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074f4:	4b2c      	ldr	r3, [pc, #176]	; (80075a8 <_dtoa_r+0x600>)
 80074f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074fa:	f7f9 f895 	bl	8000628 <__aeabi_dmul>
 80074fe:	e9cd 0100 	strd	r0, r1, [sp]
 8007502:	e7c4      	b.n	800748e <_dtoa_r+0x4e6>
 8007504:	462a      	mov	r2, r5
 8007506:	4633      	mov	r3, r6
 8007508:	f7f9 f88e 	bl	8000628 <__aeabi_dmul>
 800750c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007510:	eb0b 0507 	add.w	r5, fp, r7
 8007514:	465e      	mov	r6, fp
 8007516:	e9dd 0100 	ldrd	r0, r1, [sp]
 800751a:	f7f9 fb35 	bl	8000b88 <__aeabi_d2iz>
 800751e:	4607      	mov	r7, r0
 8007520:	f7f9 f818 	bl	8000554 <__aeabi_i2d>
 8007524:	3730      	adds	r7, #48	; 0x30
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800752e:	f7f8 fec3 	bl	80002b8 <__aeabi_dsub>
 8007532:	f806 7b01 	strb.w	r7, [r6], #1
 8007536:	42ae      	cmp	r6, r5
 8007538:	e9cd 0100 	strd	r0, r1, [sp]
 800753c:	f04f 0200 	mov.w	r2, #0
 8007540:	d126      	bne.n	8007590 <_dtoa_r+0x5e8>
 8007542:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <_dtoa_r+0x60c>)
 8007544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007548:	f7f8 feb8 	bl	80002bc <__adddf3>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007554:	f7f9 faf8 	bl	8000b48 <__aeabi_dcmpgt>
 8007558:	2800      	cmp	r0, #0
 800755a:	d174      	bne.n	8007646 <_dtoa_r+0x69e>
 800755c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007560:	2000      	movs	r0, #0
 8007562:	4914      	ldr	r1, [pc, #80]	; (80075b4 <_dtoa_r+0x60c>)
 8007564:	f7f8 fea8 	bl	80002b8 <__aeabi_dsub>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007570:	f7f9 facc 	bl	8000b0c <__aeabi_dcmplt>
 8007574:	2800      	cmp	r0, #0
 8007576:	f43f af30 	beq.w	80073da <_dtoa_r+0x432>
 800757a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800757e:	2b30      	cmp	r3, #48	; 0x30
 8007580:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007584:	d002      	beq.n	800758c <_dtoa_r+0x5e4>
 8007586:	f8dd a020 	ldr.w	sl, [sp, #32]
 800758a:	e04a      	b.n	8007622 <_dtoa_r+0x67a>
 800758c:	4615      	mov	r5, r2
 800758e:	e7f4      	b.n	800757a <_dtoa_r+0x5d2>
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <_dtoa_r+0x600>)
 8007592:	f7f9 f849 	bl	8000628 <__aeabi_dmul>
 8007596:	e9cd 0100 	strd	r0, r1, [sp]
 800759a:	e7bc      	b.n	8007516 <_dtoa_r+0x56e>
 800759c:	08009ce0 	.word	0x08009ce0
 80075a0:	08009cb8 	.word	0x08009cb8
 80075a4:	3ff00000 	.word	0x3ff00000
 80075a8:	40240000 	.word	0x40240000
 80075ac:	401c0000 	.word	0x401c0000
 80075b0:	40140000 	.word	0x40140000
 80075b4:	3fe00000 	.word	0x3fe00000
 80075b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075bc:	465d      	mov	r5, fp
 80075be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f9 f959 	bl	800087c <__aeabi_ddiv>
 80075ca:	f7f9 fadd 	bl	8000b88 <__aeabi_d2iz>
 80075ce:	4680      	mov	r8, r0
 80075d0:	f7f8 ffc0 	bl	8000554 <__aeabi_i2d>
 80075d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075d8:	f7f9 f826 	bl	8000628 <__aeabi_dmul>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4630      	mov	r0, r6
 80075e2:	4639      	mov	r1, r7
 80075e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80075e8:	f7f8 fe66 	bl	80002b8 <__aeabi_dsub>
 80075ec:	f805 6b01 	strb.w	r6, [r5], #1
 80075f0:	eba5 060b 	sub.w	r6, r5, fp
 80075f4:	45b1      	cmp	r9, r6
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	d139      	bne.n	8007670 <_dtoa_r+0x6c8>
 80075fc:	f7f8 fe5e 	bl	80002bc <__adddf3>
 8007600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007604:	4606      	mov	r6, r0
 8007606:	460f      	mov	r7, r1
 8007608:	f7f9 fa9e 	bl	8000b48 <__aeabi_dcmpgt>
 800760c:	b9c8      	cbnz	r0, 8007642 <_dtoa_r+0x69a>
 800760e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007612:	4630      	mov	r0, r6
 8007614:	4639      	mov	r1, r7
 8007616:	f7f9 fa6f 	bl	8000af8 <__aeabi_dcmpeq>
 800761a:	b110      	cbz	r0, 8007622 <_dtoa_r+0x67a>
 800761c:	f018 0f01 	tst.w	r8, #1
 8007620:	d10f      	bne.n	8007642 <_dtoa_r+0x69a>
 8007622:	9904      	ldr	r1, [sp, #16]
 8007624:	4620      	mov	r0, r4
 8007626:	f000 ffc7 	bl	80085b8 <_Bfree>
 800762a:	2300      	movs	r3, #0
 800762c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800762e:	702b      	strb	r3, [r5, #0]
 8007630:	f10a 0301 	add.w	r3, sl, #1
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8241 	beq.w	8007ac0 <_dtoa_r+0xb18>
 800763e:	601d      	str	r5, [r3, #0]
 8007640:	e23e      	b.n	8007ac0 <_dtoa_r+0xb18>
 8007642:	f8cd a020 	str.w	sl, [sp, #32]
 8007646:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800764a:	2a39      	cmp	r2, #57	; 0x39
 800764c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007650:	d108      	bne.n	8007664 <_dtoa_r+0x6bc>
 8007652:	459b      	cmp	fp, r3
 8007654:	d10a      	bne.n	800766c <_dtoa_r+0x6c4>
 8007656:	9b08      	ldr	r3, [sp, #32]
 8007658:	3301      	adds	r3, #1
 800765a:	9308      	str	r3, [sp, #32]
 800765c:	2330      	movs	r3, #48	; 0x30
 800765e:	f88b 3000 	strb.w	r3, [fp]
 8007662:	465b      	mov	r3, fp
 8007664:	781a      	ldrb	r2, [r3, #0]
 8007666:	3201      	adds	r2, #1
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	e78c      	b.n	8007586 <_dtoa_r+0x5de>
 800766c:	461d      	mov	r5, r3
 800766e:	e7ea      	b.n	8007646 <_dtoa_r+0x69e>
 8007670:	2200      	movs	r2, #0
 8007672:	4b9b      	ldr	r3, [pc, #620]	; (80078e0 <_dtoa_r+0x938>)
 8007674:	f7f8 ffd8 	bl	8000628 <__aeabi_dmul>
 8007678:	2200      	movs	r2, #0
 800767a:	2300      	movs	r3, #0
 800767c:	4606      	mov	r6, r0
 800767e:	460f      	mov	r7, r1
 8007680:	f7f9 fa3a 	bl	8000af8 <__aeabi_dcmpeq>
 8007684:	2800      	cmp	r0, #0
 8007686:	d09a      	beq.n	80075be <_dtoa_r+0x616>
 8007688:	e7cb      	b.n	8007622 <_dtoa_r+0x67a>
 800768a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800768c:	2a00      	cmp	r2, #0
 800768e:	f000 808b 	beq.w	80077a8 <_dtoa_r+0x800>
 8007692:	9a06      	ldr	r2, [sp, #24]
 8007694:	2a01      	cmp	r2, #1
 8007696:	dc6e      	bgt.n	8007776 <_dtoa_r+0x7ce>
 8007698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800769a:	2a00      	cmp	r2, #0
 800769c:	d067      	beq.n	800776e <_dtoa_r+0x7c6>
 800769e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076a2:	9f07      	ldr	r7, [sp, #28]
 80076a4:	9d05      	ldr	r5, [sp, #20]
 80076a6:	9a05      	ldr	r2, [sp, #20]
 80076a8:	2101      	movs	r1, #1
 80076aa:	441a      	add	r2, r3
 80076ac:	4620      	mov	r0, r4
 80076ae:	9205      	str	r2, [sp, #20]
 80076b0:	4498      	add	r8, r3
 80076b2:	f001 f85f 	bl	8008774 <__i2b>
 80076b6:	4606      	mov	r6, r0
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	dd0c      	ble.n	80076d6 <_dtoa_r+0x72e>
 80076bc:	f1b8 0f00 	cmp.w	r8, #0
 80076c0:	dd09      	ble.n	80076d6 <_dtoa_r+0x72e>
 80076c2:	4545      	cmp	r5, r8
 80076c4:	9a05      	ldr	r2, [sp, #20]
 80076c6:	462b      	mov	r3, r5
 80076c8:	bfa8      	it	ge
 80076ca:	4643      	movge	r3, r8
 80076cc:	1ad2      	subs	r2, r2, r3
 80076ce:	9205      	str	r2, [sp, #20]
 80076d0:	1aed      	subs	r5, r5, r3
 80076d2:	eba8 0803 	sub.w	r8, r8, r3
 80076d6:	9b07      	ldr	r3, [sp, #28]
 80076d8:	b1eb      	cbz	r3, 8007716 <_dtoa_r+0x76e>
 80076da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d067      	beq.n	80077b0 <_dtoa_r+0x808>
 80076e0:	b18f      	cbz	r7, 8007706 <_dtoa_r+0x75e>
 80076e2:	4631      	mov	r1, r6
 80076e4:	463a      	mov	r2, r7
 80076e6:	4620      	mov	r0, r4
 80076e8:	f001 f8e4 	bl	80088b4 <__pow5mult>
 80076ec:	9a04      	ldr	r2, [sp, #16]
 80076ee:	4601      	mov	r1, r0
 80076f0:	4606      	mov	r6, r0
 80076f2:	4620      	mov	r0, r4
 80076f4:	f001 f847 	bl	8008786 <__multiply>
 80076f8:	9904      	ldr	r1, [sp, #16]
 80076fa:	9008      	str	r0, [sp, #32]
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 ff5b 	bl	80085b8 <_Bfree>
 8007702:	9b08      	ldr	r3, [sp, #32]
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	9b07      	ldr	r3, [sp, #28]
 8007708:	1bda      	subs	r2, r3, r7
 800770a:	d004      	beq.n	8007716 <_dtoa_r+0x76e>
 800770c:	9904      	ldr	r1, [sp, #16]
 800770e:	4620      	mov	r0, r4
 8007710:	f001 f8d0 	bl	80088b4 <__pow5mult>
 8007714:	9004      	str	r0, [sp, #16]
 8007716:	2101      	movs	r1, #1
 8007718:	4620      	mov	r0, r4
 800771a:	f001 f82b 	bl	8008774 <__i2b>
 800771e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007720:	4607      	mov	r7, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 81d0 	beq.w	8007ac8 <_dtoa_r+0xb20>
 8007728:	461a      	mov	r2, r3
 800772a:	4601      	mov	r1, r0
 800772c:	4620      	mov	r0, r4
 800772e:	f001 f8c1 	bl	80088b4 <__pow5mult>
 8007732:	9b06      	ldr	r3, [sp, #24]
 8007734:	2b01      	cmp	r3, #1
 8007736:	4607      	mov	r7, r0
 8007738:	dc40      	bgt.n	80077bc <_dtoa_r+0x814>
 800773a:	9b00      	ldr	r3, [sp, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d139      	bne.n	80077b4 <_dtoa_r+0x80c>
 8007740:	9b01      	ldr	r3, [sp, #4]
 8007742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007746:	2b00      	cmp	r3, #0
 8007748:	d136      	bne.n	80077b8 <_dtoa_r+0x810>
 800774a:	9b01      	ldr	r3, [sp, #4]
 800774c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007750:	0d1b      	lsrs	r3, r3, #20
 8007752:	051b      	lsls	r3, r3, #20
 8007754:	b12b      	cbz	r3, 8007762 <_dtoa_r+0x7ba>
 8007756:	9b05      	ldr	r3, [sp, #20]
 8007758:	3301      	adds	r3, #1
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	f108 0801 	add.w	r8, r8, #1
 8007760:	2301      	movs	r3, #1
 8007762:	9307      	str	r3, [sp, #28]
 8007764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007766:	2b00      	cmp	r3, #0
 8007768:	d12a      	bne.n	80077c0 <_dtoa_r+0x818>
 800776a:	2001      	movs	r0, #1
 800776c:	e030      	b.n	80077d0 <_dtoa_r+0x828>
 800776e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007770:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007774:	e795      	b.n	80076a2 <_dtoa_r+0x6fa>
 8007776:	9b07      	ldr	r3, [sp, #28]
 8007778:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800777c:	42bb      	cmp	r3, r7
 800777e:	bfbf      	itttt	lt
 8007780:	9b07      	ldrlt	r3, [sp, #28]
 8007782:	9707      	strlt	r7, [sp, #28]
 8007784:	1afa      	sublt	r2, r7, r3
 8007786:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007788:	bfbb      	ittet	lt
 800778a:	189b      	addlt	r3, r3, r2
 800778c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800778e:	1bdf      	subge	r7, r3, r7
 8007790:	2700      	movlt	r7, #0
 8007792:	f1b9 0f00 	cmp.w	r9, #0
 8007796:	bfb5      	itete	lt
 8007798:	9b05      	ldrlt	r3, [sp, #20]
 800779a:	9d05      	ldrge	r5, [sp, #20]
 800779c:	eba3 0509 	sublt.w	r5, r3, r9
 80077a0:	464b      	movge	r3, r9
 80077a2:	bfb8      	it	lt
 80077a4:	2300      	movlt	r3, #0
 80077a6:	e77e      	b.n	80076a6 <_dtoa_r+0x6fe>
 80077a8:	9f07      	ldr	r7, [sp, #28]
 80077aa:	9d05      	ldr	r5, [sp, #20]
 80077ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80077ae:	e783      	b.n	80076b8 <_dtoa_r+0x710>
 80077b0:	9a07      	ldr	r2, [sp, #28]
 80077b2:	e7ab      	b.n	800770c <_dtoa_r+0x764>
 80077b4:	2300      	movs	r3, #0
 80077b6:	e7d4      	b.n	8007762 <_dtoa_r+0x7ba>
 80077b8:	9b00      	ldr	r3, [sp, #0]
 80077ba:	e7d2      	b.n	8007762 <_dtoa_r+0x7ba>
 80077bc:	2300      	movs	r3, #0
 80077be:	9307      	str	r3, [sp, #28]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80077c6:	6918      	ldr	r0, [r3, #16]
 80077c8:	f000 ff86 	bl	80086d8 <__hi0bits>
 80077cc:	f1c0 0020 	rsb	r0, r0, #32
 80077d0:	4440      	add	r0, r8
 80077d2:	f010 001f 	ands.w	r0, r0, #31
 80077d6:	d047      	beq.n	8007868 <_dtoa_r+0x8c0>
 80077d8:	f1c0 0320 	rsb	r3, r0, #32
 80077dc:	2b04      	cmp	r3, #4
 80077de:	dd3b      	ble.n	8007858 <_dtoa_r+0x8b0>
 80077e0:	9b05      	ldr	r3, [sp, #20]
 80077e2:	f1c0 001c 	rsb	r0, r0, #28
 80077e6:	4403      	add	r3, r0
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	4405      	add	r5, r0
 80077ec:	4480      	add	r8, r0
 80077ee:	9b05      	ldr	r3, [sp, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	dd05      	ble.n	8007800 <_dtoa_r+0x858>
 80077f4:	461a      	mov	r2, r3
 80077f6:	9904      	ldr	r1, [sp, #16]
 80077f8:	4620      	mov	r0, r4
 80077fa:	f001 f8a9 	bl	8008950 <__lshift>
 80077fe:	9004      	str	r0, [sp, #16]
 8007800:	f1b8 0f00 	cmp.w	r8, #0
 8007804:	dd05      	ble.n	8007812 <_dtoa_r+0x86a>
 8007806:	4639      	mov	r1, r7
 8007808:	4642      	mov	r2, r8
 800780a:	4620      	mov	r0, r4
 800780c:	f001 f8a0 	bl	8008950 <__lshift>
 8007810:	4607      	mov	r7, r0
 8007812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007814:	b353      	cbz	r3, 800786c <_dtoa_r+0x8c4>
 8007816:	4639      	mov	r1, r7
 8007818:	9804      	ldr	r0, [sp, #16]
 800781a:	f001 f8ed 	bl	80089f8 <__mcmp>
 800781e:	2800      	cmp	r0, #0
 8007820:	da24      	bge.n	800786c <_dtoa_r+0x8c4>
 8007822:	2300      	movs	r3, #0
 8007824:	220a      	movs	r2, #10
 8007826:	9904      	ldr	r1, [sp, #16]
 8007828:	4620      	mov	r0, r4
 800782a:	f000 fedc 	bl	80085e6 <__multadd>
 800782e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007830:	9004      	str	r0, [sp, #16]
 8007832:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 814d 	beq.w	8007ad6 <_dtoa_r+0xb2e>
 800783c:	2300      	movs	r3, #0
 800783e:	4631      	mov	r1, r6
 8007840:	220a      	movs	r2, #10
 8007842:	4620      	mov	r0, r4
 8007844:	f000 fecf 	bl	80085e6 <__multadd>
 8007848:	9b02      	ldr	r3, [sp, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	4606      	mov	r6, r0
 800784e:	dc4f      	bgt.n	80078f0 <_dtoa_r+0x948>
 8007850:	9b06      	ldr	r3, [sp, #24]
 8007852:	2b02      	cmp	r3, #2
 8007854:	dd4c      	ble.n	80078f0 <_dtoa_r+0x948>
 8007856:	e011      	b.n	800787c <_dtoa_r+0x8d4>
 8007858:	d0c9      	beq.n	80077ee <_dtoa_r+0x846>
 800785a:	9a05      	ldr	r2, [sp, #20]
 800785c:	331c      	adds	r3, #28
 800785e:	441a      	add	r2, r3
 8007860:	9205      	str	r2, [sp, #20]
 8007862:	441d      	add	r5, r3
 8007864:	4498      	add	r8, r3
 8007866:	e7c2      	b.n	80077ee <_dtoa_r+0x846>
 8007868:	4603      	mov	r3, r0
 800786a:	e7f6      	b.n	800785a <_dtoa_r+0x8b2>
 800786c:	f1b9 0f00 	cmp.w	r9, #0
 8007870:	dc38      	bgt.n	80078e4 <_dtoa_r+0x93c>
 8007872:	9b06      	ldr	r3, [sp, #24]
 8007874:	2b02      	cmp	r3, #2
 8007876:	dd35      	ble.n	80078e4 <_dtoa_r+0x93c>
 8007878:	f8cd 9008 	str.w	r9, [sp, #8]
 800787c:	9b02      	ldr	r3, [sp, #8]
 800787e:	b963      	cbnz	r3, 800789a <_dtoa_r+0x8f2>
 8007880:	4639      	mov	r1, r7
 8007882:	2205      	movs	r2, #5
 8007884:	4620      	mov	r0, r4
 8007886:	f000 feae 	bl	80085e6 <__multadd>
 800788a:	4601      	mov	r1, r0
 800788c:	4607      	mov	r7, r0
 800788e:	9804      	ldr	r0, [sp, #16]
 8007890:	f001 f8b2 	bl	80089f8 <__mcmp>
 8007894:	2800      	cmp	r0, #0
 8007896:	f73f adcc 	bgt.w	8007432 <_dtoa_r+0x48a>
 800789a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800789c:	465d      	mov	r5, fp
 800789e:	ea6f 0a03 	mvn.w	sl, r3
 80078a2:	f04f 0900 	mov.w	r9, #0
 80078a6:	4639      	mov	r1, r7
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 fe85 	bl	80085b8 <_Bfree>
 80078ae:	2e00      	cmp	r6, #0
 80078b0:	f43f aeb7 	beq.w	8007622 <_dtoa_r+0x67a>
 80078b4:	f1b9 0f00 	cmp.w	r9, #0
 80078b8:	d005      	beq.n	80078c6 <_dtoa_r+0x91e>
 80078ba:	45b1      	cmp	r9, r6
 80078bc:	d003      	beq.n	80078c6 <_dtoa_r+0x91e>
 80078be:	4649      	mov	r1, r9
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 fe79 	bl	80085b8 <_Bfree>
 80078c6:	4631      	mov	r1, r6
 80078c8:	4620      	mov	r0, r4
 80078ca:	f000 fe75 	bl	80085b8 <_Bfree>
 80078ce:	e6a8      	b.n	8007622 <_dtoa_r+0x67a>
 80078d0:	2700      	movs	r7, #0
 80078d2:	463e      	mov	r6, r7
 80078d4:	e7e1      	b.n	800789a <_dtoa_r+0x8f2>
 80078d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80078da:	463e      	mov	r6, r7
 80078dc:	e5a9      	b.n	8007432 <_dtoa_r+0x48a>
 80078de:	bf00      	nop
 80078e0:	40240000 	.word	0x40240000
 80078e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 80fa 	beq.w	8007ae4 <_dtoa_r+0xb3c>
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	dd05      	ble.n	8007900 <_dtoa_r+0x958>
 80078f4:	4631      	mov	r1, r6
 80078f6:	462a      	mov	r2, r5
 80078f8:	4620      	mov	r0, r4
 80078fa:	f001 f829 	bl	8008950 <__lshift>
 80078fe:	4606      	mov	r6, r0
 8007900:	9b07      	ldr	r3, [sp, #28]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d04c      	beq.n	80079a0 <_dtoa_r+0x9f8>
 8007906:	6871      	ldr	r1, [r6, #4]
 8007908:	4620      	mov	r0, r4
 800790a:	f000 fe21 	bl	8008550 <_Balloc>
 800790e:	6932      	ldr	r2, [r6, #16]
 8007910:	3202      	adds	r2, #2
 8007912:	4605      	mov	r5, r0
 8007914:	0092      	lsls	r2, r2, #2
 8007916:	f106 010c 	add.w	r1, r6, #12
 800791a:	300c      	adds	r0, #12
 800791c:	f7fd fc2e 	bl	800517c <memcpy>
 8007920:	2201      	movs	r2, #1
 8007922:	4629      	mov	r1, r5
 8007924:	4620      	mov	r0, r4
 8007926:	f001 f813 	bl	8008950 <__lshift>
 800792a:	9b00      	ldr	r3, [sp, #0]
 800792c:	f8cd b014 	str.w	fp, [sp, #20]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	46b1      	mov	r9, r6
 8007936:	9307      	str	r3, [sp, #28]
 8007938:	4606      	mov	r6, r0
 800793a:	4639      	mov	r1, r7
 800793c:	9804      	ldr	r0, [sp, #16]
 800793e:	f7ff faa5 	bl	8006e8c <quorem>
 8007942:	4649      	mov	r1, r9
 8007944:	4605      	mov	r5, r0
 8007946:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800794a:	9804      	ldr	r0, [sp, #16]
 800794c:	f001 f854 	bl	80089f8 <__mcmp>
 8007950:	4632      	mov	r2, r6
 8007952:	9000      	str	r0, [sp, #0]
 8007954:	4639      	mov	r1, r7
 8007956:	4620      	mov	r0, r4
 8007958:	f001 f868 	bl	8008a2c <__mdiff>
 800795c:	68c3      	ldr	r3, [r0, #12]
 800795e:	4602      	mov	r2, r0
 8007960:	bb03      	cbnz	r3, 80079a4 <_dtoa_r+0x9fc>
 8007962:	4601      	mov	r1, r0
 8007964:	9008      	str	r0, [sp, #32]
 8007966:	9804      	ldr	r0, [sp, #16]
 8007968:	f001 f846 	bl	80089f8 <__mcmp>
 800796c:	9a08      	ldr	r2, [sp, #32]
 800796e:	4603      	mov	r3, r0
 8007970:	4611      	mov	r1, r2
 8007972:	4620      	mov	r0, r4
 8007974:	9308      	str	r3, [sp, #32]
 8007976:	f000 fe1f 	bl	80085b8 <_Bfree>
 800797a:	9b08      	ldr	r3, [sp, #32]
 800797c:	b9a3      	cbnz	r3, 80079a8 <_dtoa_r+0xa00>
 800797e:	9a06      	ldr	r2, [sp, #24]
 8007980:	b992      	cbnz	r2, 80079a8 <_dtoa_r+0xa00>
 8007982:	9a07      	ldr	r2, [sp, #28]
 8007984:	b982      	cbnz	r2, 80079a8 <_dtoa_r+0xa00>
 8007986:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800798a:	d029      	beq.n	80079e0 <_dtoa_r+0xa38>
 800798c:	9b00      	ldr	r3, [sp, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	dd01      	ble.n	8007996 <_dtoa_r+0x9ee>
 8007992:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007996:	9b05      	ldr	r3, [sp, #20]
 8007998:	1c5d      	adds	r5, r3, #1
 800799a:	f883 8000 	strb.w	r8, [r3]
 800799e:	e782      	b.n	80078a6 <_dtoa_r+0x8fe>
 80079a0:	4630      	mov	r0, r6
 80079a2:	e7c2      	b.n	800792a <_dtoa_r+0x982>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e7e3      	b.n	8007970 <_dtoa_r+0x9c8>
 80079a8:	9a00      	ldr	r2, [sp, #0]
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	db04      	blt.n	80079b8 <_dtoa_r+0xa10>
 80079ae:	d125      	bne.n	80079fc <_dtoa_r+0xa54>
 80079b0:	9a06      	ldr	r2, [sp, #24]
 80079b2:	bb1a      	cbnz	r2, 80079fc <_dtoa_r+0xa54>
 80079b4:	9a07      	ldr	r2, [sp, #28]
 80079b6:	bb0a      	cbnz	r2, 80079fc <_dtoa_r+0xa54>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	ddec      	ble.n	8007996 <_dtoa_r+0x9ee>
 80079bc:	2201      	movs	r2, #1
 80079be:	9904      	ldr	r1, [sp, #16]
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 ffc5 	bl	8008950 <__lshift>
 80079c6:	4639      	mov	r1, r7
 80079c8:	9004      	str	r0, [sp, #16]
 80079ca:	f001 f815 	bl	80089f8 <__mcmp>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	dc03      	bgt.n	80079da <_dtoa_r+0xa32>
 80079d2:	d1e0      	bne.n	8007996 <_dtoa_r+0x9ee>
 80079d4:	f018 0f01 	tst.w	r8, #1
 80079d8:	d0dd      	beq.n	8007996 <_dtoa_r+0x9ee>
 80079da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079de:	d1d8      	bne.n	8007992 <_dtoa_r+0x9ea>
 80079e0:	9b05      	ldr	r3, [sp, #20]
 80079e2:	9a05      	ldr	r2, [sp, #20]
 80079e4:	1c5d      	adds	r5, r3, #1
 80079e6:	2339      	movs	r3, #57	; 0x39
 80079e8:	7013      	strb	r3, [r2, #0]
 80079ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079ee:	2b39      	cmp	r3, #57	; 0x39
 80079f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80079f4:	d04f      	beq.n	8007a96 <_dtoa_r+0xaee>
 80079f6:	3301      	adds	r3, #1
 80079f8:	7013      	strb	r3, [r2, #0]
 80079fa:	e754      	b.n	80078a6 <_dtoa_r+0x8fe>
 80079fc:	9a05      	ldr	r2, [sp, #20]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f102 0501 	add.w	r5, r2, #1
 8007a04:	dd06      	ble.n	8007a14 <_dtoa_r+0xa6c>
 8007a06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a0a:	d0e9      	beq.n	80079e0 <_dtoa_r+0xa38>
 8007a0c:	f108 0801 	add.w	r8, r8, #1
 8007a10:	9b05      	ldr	r3, [sp, #20]
 8007a12:	e7c2      	b.n	800799a <_dtoa_r+0x9f2>
 8007a14:	9a02      	ldr	r2, [sp, #8]
 8007a16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007a1a:	eba5 030b 	sub.w	r3, r5, fp
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d021      	beq.n	8007a66 <_dtoa_r+0xabe>
 8007a22:	2300      	movs	r3, #0
 8007a24:	220a      	movs	r2, #10
 8007a26:	9904      	ldr	r1, [sp, #16]
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fddc 	bl	80085e6 <__multadd>
 8007a2e:	45b1      	cmp	r9, r6
 8007a30:	9004      	str	r0, [sp, #16]
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	f04f 020a 	mov.w	r2, #10
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	d105      	bne.n	8007a4c <_dtoa_r+0xaa4>
 8007a40:	f000 fdd1 	bl	80085e6 <__multadd>
 8007a44:	4681      	mov	r9, r0
 8007a46:	4606      	mov	r6, r0
 8007a48:	9505      	str	r5, [sp, #20]
 8007a4a:	e776      	b.n	800793a <_dtoa_r+0x992>
 8007a4c:	f000 fdcb 	bl	80085e6 <__multadd>
 8007a50:	4631      	mov	r1, r6
 8007a52:	4681      	mov	r9, r0
 8007a54:	2300      	movs	r3, #0
 8007a56:	220a      	movs	r2, #10
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f000 fdc4 	bl	80085e6 <__multadd>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	e7f2      	b.n	8007a48 <_dtoa_r+0xaa0>
 8007a62:	f04f 0900 	mov.w	r9, #0
 8007a66:	2201      	movs	r2, #1
 8007a68:	9904      	ldr	r1, [sp, #16]
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 ff70 	bl	8008950 <__lshift>
 8007a70:	4639      	mov	r1, r7
 8007a72:	9004      	str	r0, [sp, #16]
 8007a74:	f000 ffc0 	bl	80089f8 <__mcmp>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	dcb6      	bgt.n	80079ea <_dtoa_r+0xa42>
 8007a7c:	d102      	bne.n	8007a84 <_dtoa_r+0xadc>
 8007a7e:	f018 0f01 	tst.w	r8, #1
 8007a82:	d1b2      	bne.n	80079ea <_dtoa_r+0xa42>
 8007a84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a88:	2b30      	cmp	r3, #48	; 0x30
 8007a8a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007a8e:	f47f af0a 	bne.w	80078a6 <_dtoa_r+0x8fe>
 8007a92:	4615      	mov	r5, r2
 8007a94:	e7f6      	b.n	8007a84 <_dtoa_r+0xadc>
 8007a96:	4593      	cmp	fp, r2
 8007a98:	d105      	bne.n	8007aa6 <_dtoa_r+0xafe>
 8007a9a:	2331      	movs	r3, #49	; 0x31
 8007a9c:	f10a 0a01 	add.w	sl, sl, #1
 8007aa0:	f88b 3000 	strb.w	r3, [fp]
 8007aa4:	e6ff      	b.n	80078a6 <_dtoa_r+0x8fe>
 8007aa6:	4615      	mov	r5, r2
 8007aa8:	e79f      	b.n	80079ea <_dtoa_r+0xa42>
 8007aaa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007b10 <_dtoa_r+0xb68>
 8007aae:	e007      	b.n	8007ac0 <_dtoa_r+0xb18>
 8007ab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ab2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007b14 <_dtoa_r+0xb6c>
 8007ab6:	b11b      	cbz	r3, 8007ac0 <_dtoa_r+0xb18>
 8007ab8:	f10b 0308 	add.w	r3, fp, #8
 8007abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	4658      	mov	r0, fp
 8007ac2:	b017      	add	sp, #92	; 0x5c
 8007ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac8:	9b06      	ldr	r3, [sp, #24]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	f77f ae35 	ble.w	800773a <_dtoa_r+0x792>
 8007ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ad2:	9307      	str	r3, [sp, #28]
 8007ad4:	e649      	b.n	800776a <_dtoa_r+0x7c2>
 8007ad6:	9b02      	ldr	r3, [sp, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dc03      	bgt.n	8007ae4 <_dtoa_r+0xb3c>
 8007adc:	9b06      	ldr	r3, [sp, #24]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	f73f aecc 	bgt.w	800787c <_dtoa_r+0x8d4>
 8007ae4:	465d      	mov	r5, fp
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	9804      	ldr	r0, [sp, #16]
 8007aea:	f7ff f9cf 	bl	8006e8c <quorem>
 8007aee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007af2:	f805 8b01 	strb.w	r8, [r5], #1
 8007af6:	9a02      	ldr	r2, [sp, #8]
 8007af8:	eba5 030b 	sub.w	r3, r5, fp
 8007afc:	429a      	cmp	r2, r3
 8007afe:	ddb0      	ble.n	8007a62 <_dtoa_r+0xaba>
 8007b00:	2300      	movs	r3, #0
 8007b02:	220a      	movs	r2, #10
 8007b04:	9904      	ldr	r1, [sp, #16]
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 fd6d 	bl	80085e6 <__multadd>
 8007b0c:	9004      	str	r0, [sp, #16]
 8007b0e:	e7ea      	b.n	8007ae6 <_dtoa_r+0xb3e>
 8007b10:	08009ace 	.word	0x08009ace
 8007b14:	08009c49 	.word	0x08009c49

08007b18 <__sflush_r>:
 8007b18:	898a      	ldrh	r2, [r1, #12]
 8007b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1e:	4605      	mov	r5, r0
 8007b20:	0710      	lsls	r0, r2, #28
 8007b22:	460c      	mov	r4, r1
 8007b24:	d458      	bmi.n	8007bd8 <__sflush_r+0xc0>
 8007b26:	684b      	ldr	r3, [r1, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	dc05      	bgt.n	8007b38 <__sflush_r+0x20>
 8007b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	dc02      	bgt.n	8007b38 <__sflush_r+0x20>
 8007b32:	2000      	movs	r0, #0
 8007b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b3a:	2e00      	cmp	r6, #0
 8007b3c:	d0f9      	beq.n	8007b32 <__sflush_r+0x1a>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b44:	682f      	ldr	r7, [r5, #0]
 8007b46:	6a21      	ldr	r1, [r4, #32]
 8007b48:	602b      	str	r3, [r5, #0]
 8007b4a:	d032      	beq.n	8007bb2 <__sflush_r+0x9a>
 8007b4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	075a      	lsls	r2, r3, #29
 8007b52:	d505      	bpl.n	8007b60 <__sflush_r+0x48>
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	1ac0      	subs	r0, r0, r3
 8007b58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b5a:	b10b      	cbz	r3, 8007b60 <__sflush_r+0x48>
 8007b5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b5e:	1ac0      	subs	r0, r0, r3
 8007b60:	2300      	movs	r3, #0
 8007b62:	4602      	mov	r2, r0
 8007b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b66:	6a21      	ldr	r1, [r4, #32]
 8007b68:	4628      	mov	r0, r5
 8007b6a:	47b0      	blx	r6
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	d106      	bne.n	8007b80 <__sflush_r+0x68>
 8007b72:	6829      	ldr	r1, [r5, #0]
 8007b74:	291d      	cmp	r1, #29
 8007b76:	d848      	bhi.n	8007c0a <__sflush_r+0xf2>
 8007b78:	4a29      	ldr	r2, [pc, #164]	; (8007c20 <__sflush_r+0x108>)
 8007b7a:	40ca      	lsrs	r2, r1
 8007b7c:	07d6      	lsls	r6, r2, #31
 8007b7e:	d544      	bpl.n	8007c0a <__sflush_r+0xf2>
 8007b80:	2200      	movs	r2, #0
 8007b82:	6062      	str	r2, [r4, #4]
 8007b84:	04d9      	lsls	r1, r3, #19
 8007b86:	6922      	ldr	r2, [r4, #16]
 8007b88:	6022      	str	r2, [r4, #0]
 8007b8a:	d504      	bpl.n	8007b96 <__sflush_r+0x7e>
 8007b8c:	1c42      	adds	r2, r0, #1
 8007b8e:	d101      	bne.n	8007b94 <__sflush_r+0x7c>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b903      	cbnz	r3, 8007b96 <__sflush_r+0x7e>
 8007b94:	6560      	str	r0, [r4, #84]	; 0x54
 8007b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b98:	602f      	str	r7, [r5, #0]
 8007b9a:	2900      	cmp	r1, #0
 8007b9c:	d0c9      	beq.n	8007b32 <__sflush_r+0x1a>
 8007b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba2:	4299      	cmp	r1, r3
 8007ba4:	d002      	beq.n	8007bac <__sflush_r+0x94>
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f001 f8e0 	bl	8008d6c <_free_r>
 8007bac:	2000      	movs	r0, #0
 8007bae:	6360      	str	r0, [r4, #52]	; 0x34
 8007bb0:	e7c0      	b.n	8007b34 <__sflush_r+0x1c>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b0      	blx	r6
 8007bb8:	1c41      	adds	r1, r0, #1
 8007bba:	d1c8      	bne.n	8007b4e <__sflush_r+0x36>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0c5      	beq.n	8007b4e <__sflush_r+0x36>
 8007bc2:	2b1d      	cmp	r3, #29
 8007bc4:	d001      	beq.n	8007bca <__sflush_r+0xb2>
 8007bc6:	2b16      	cmp	r3, #22
 8007bc8:	d101      	bne.n	8007bce <__sflush_r+0xb6>
 8007bca:	602f      	str	r7, [r5, #0]
 8007bcc:	e7b1      	b.n	8007b32 <__sflush_r+0x1a>
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	e7ad      	b.n	8007b34 <__sflush_r+0x1c>
 8007bd8:	690f      	ldr	r7, [r1, #16]
 8007bda:	2f00      	cmp	r7, #0
 8007bdc:	d0a9      	beq.n	8007b32 <__sflush_r+0x1a>
 8007bde:	0793      	lsls	r3, r2, #30
 8007be0:	680e      	ldr	r6, [r1, #0]
 8007be2:	bf08      	it	eq
 8007be4:	694b      	ldreq	r3, [r1, #20]
 8007be6:	600f      	str	r7, [r1, #0]
 8007be8:	bf18      	it	ne
 8007bea:	2300      	movne	r3, #0
 8007bec:	eba6 0807 	sub.w	r8, r6, r7
 8007bf0:	608b      	str	r3, [r1, #8]
 8007bf2:	f1b8 0f00 	cmp.w	r8, #0
 8007bf6:	dd9c      	ble.n	8007b32 <__sflush_r+0x1a>
 8007bf8:	4643      	mov	r3, r8
 8007bfa:	463a      	mov	r2, r7
 8007bfc:	6a21      	ldr	r1, [r4, #32]
 8007bfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b0      	blx	r6
 8007c04:	2800      	cmp	r0, #0
 8007c06:	dc06      	bgt.n	8007c16 <__sflush_r+0xfe>
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c0e:	81a3      	strh	r3, [r4, #12]
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c14:	e78e      	b.n	8007b34 <__sflush_r+0x1c>
 8007c16:	4407      	add	r7, r0
 8007c18:	eba8 0800 	sub.w	r8, r8, r0
 8007c1c:	e7e9      	b.n	8007bf2 <__sflush_r+0xda>
 8007c1e:	bf00      	nop
 8007c20:	20400001 	.word	0x20400001

08007c24 <_fflush_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	690b      	ldr	r3, [r1, #16]
 8007c28:	4605      	mov	r5, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	b1db      	cbz	r3, 8007c66 <_fflush_r+0x42>
 8007c2e:	b118      	cbz	r0, 8007c38 <_fflush_r+0x14>
 8007c30:	6983      	ldr	r3, [r0, #24]
 8007c32:	b90b      	cbnz	r3, 8007c38 <_fflush_r+0x14>
 8007c34:	f000 f860 	bl	8007cf8 <__sinit>
 8007c38:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <_fflush_r+0x48>)
 8007c3a:	429c      	cmp	r4, r3
 8007c3c:	d109      	bne.n	8007c52 <_fflush_r+0x2e>
 8007c3e:	686c      	ldr	r4, [r5, #4]
 8007c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c44:	b17b      	cbz	r3, 8007c66 <_fflush_r+0x42>
 8007c46:	4621      	mov	r1, r4
 8007c48:	4628      	mov	r0, r5
 8007c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c4e:	f7ff bf63 	b.w	8007b18 <__sflush_r>
 8007c52:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <_fflush_r+0x4c>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	d101      	bne.n	8007c5c <_fflush_r+0x38>
 8007c58:	68ac      	ldr	r4, [r5, #8]
 8007c5a:	e7f1      	b.n	8007c40 <_fflush_r+0x1c>
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <_fflush_r+0x50>)
 8007c5e:	429c      	cmp	r4, r3
 8007c60:	bf08      	it	eq
 8007c62:	68ec      	ldreq	r4, [r5, #12]
 8007c64:	e7ec      	b.n	8007c40 <_fflush_r+0x1c>
 8007c66:	2000      	movs	r0, #0
 8007c68:	bd38      	pop	{r3, r4, r5, pc}
 8007c6a:	bf00      	nop
 8007c6c:	08009c78 	.word	0x08009c78
 8007c70:	08009c98 	.word	0x08009c98
 8007c74:	08009c58 	.word	0x08009c58

08007c78 <std>:
 8007c78:	2300      	movs	r3, #0
 8007c7a:	b510      	push	{r4, lr}
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c82:	6083      	str	r3, [r0, #8]
 8007c84:	8181      	strh	r1, [r0, #12]
 8007c86:	6643      	str	r3, [r0, #100]	; 0x64
 8007c88:	81c2      	strh	r2, [r0, #14]
 8007c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c8e:	6183      	str	r3, [r0, #24]
 8007c90:	4619      	mov	r1, r3
 8007c92:	2208      	movs	r2, #8
 8007c94:	305c      	adds	r0, #92	; 0x5c
 8007c96:	f7fd fa7c 	bl	8005192 <memset>
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <std+0x38>)
 8007c9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <std+0x3c>)
 8007ca0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <std+0x40>)
 8007ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ca6:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <std+0x44>)
 8007ca8:	6224      	str	r4, [r4, #32]
 8007caa:	6323      	str	r3, [r4, #48]	; 0x30
 8007cac:	bd10      	pop	{r4, pc}
 8007cae:	bf00      	nop
 8007cb0:	08009401 	.word	0x08009401
 8007cb4:	08009423 	.word	0x08009423
 8007cb8:	0800945b 	.word	0x0800945b
 8007cbc:	0800947f 	.word	0x0800947f

08007cc0 <_cleanup_r>:
 8007cc0:	4901      	ldr	r1, [pc, #4]	; (8007cc8 <_cleanup_r+0x8>)
 8007cc2:	f000 b885 	b.w	8007dd0 <_fwalk_reent>
 8007cc6:	bf00      	nop
 8007cc8:	08007c25 	.word	0x08007c25

08007ccc <__sfmoreglue>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	1e4a      	subs	r2, r1, #1
 8007cd0:	2568      	movs	r5, #104	; 0x68
 8007cd2:	4355      	muls	r5, r2
 8007cd4:	460e      	mov	r6, r1
 8007cd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cda:	f001 f895 	bl	8008e08 <_malloc_r>
 8007cde:	4604      	mov	r4, r0
 8007ce0:	b140      	cbz	r0, 8007cf4 <__sfmoreglue+0x28>
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ce8:	300c      	adds	r0, #12
 8007cea:	60a0      	str	r0, [r4, #8]
 8007cec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cf0:	f7fd fa4f 	bl	8005192 <memset>
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}

08007cf8 <__sinit>:
 8007cf8:	6983      	ldr	r3, [r0, #24]
 8007cfa:	b510      	push	{r4, lr}
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	bb33      	cbnz	r3, 8007d4e <__sinit+0x56>
 8007d00:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d04:	6503      	str	r3, [r0, #80]	; 0x50
 8007d06:	4b12      	ldr	r3, [pc, #72]	; (8007d50 <__sinit+0x58>)
 8007d08:	4a12      	ldr	r2, [pc, #72]	; (8007d54 <__sinit+0x5c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6282      	str	r2, [r0, #40]	; 0x28
 8007d0e:	4298      	cmp	r0, r3
 8007d10:	bf04      	itt	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	6183      	streq	r3, [r0, #24]
 8007d16:	f000 f81f 	bl	8007d58 <__sfp>
 8007d1a:	6060      	str	r0, [r4, #4]
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 f81b 	bl	8007d58 <__sfp>
 8007d22:	60a0      	str	r0, [r4, #8]
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 f817 	bl	8007d58 <__sfp>
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	60e0      	str	r0, [r4, #12]
 8007d2e:	2104      	movs	r1, #4
 8007d30:	6860      	ldr	r0, [r4, #4]
 8007d32:	f7ff ffa1 	bl	8007c78 <std>
 8007d36:	2201      	movs	r2, #1
 8007d38:	2109      	movs	r1, #9
 8007d3a:	68a0      	ldr	r0, [r4, #8]
 8007d3c:	f7ff ff9c 	bl	8007c78 <std>
 8007d40:	2202      	movs	r2, #2
 8007d42:	2112      	movs	r1, #18
 8007d44:	68e0      	ldr	r0, [r4, #12]
 8007d46:	f7ff ff97 	bl	8007c78 <std>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	61a3      	str	r3, [r4, #24]
 8007d4e:	bd10      	pop	{r4, pc}
 8007d50:	08009ab0 	.word	0x08009ab0
 8007d54:	08007cc1 	.word	0x08007cc1

08007d58 <__sfp>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <__sfp+0x70>)
 8007d5c:	681e      	ldr	r6, [r3, #0]
 8007d5e:	69b3      	ldr	r3, [r6, #24]
 8007d60:	4607      	mov	r7, r0
 8007d62:	b913      	cbnz	r3, 8007d6a <__sfp+0x12>
 8007d64:	4630      	mov	r0, r6
 8007d66:	f7ff ffc7 	bl	8007cf8 <__sinit>
 8007d6a:	3648      	adds	r6, #72	; 0x48
 8007d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	d503      	bpl.n	8007d7c <__sfp+0x24>
 8007d74:	6833      	ldr	r3, [r6, #0]
 8007d76:	b133      	cbz	r3, 8007d86 <__sfp+0x2e>
 8007d78:	6836      	ldr	r6, [r6, #0]
 8007d7a:	e7f7      	b.n	8007d6c <__sfp+0x14>
 8007d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d80:	b16d      	cbz	r5, 8007d9e <__sfp+0x46>
 8007d82:	3468      	adds	r4, #104	; 0x68
 8007d84:	e7f4      	b.n	8007d70 <__sfp+0x18>
 8007d86:	2104      	movs	r1, #4
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7ff ff9f 	bl	8007ccc <__sfmoreglue>
 8007d8e:	6030      	str	r0, [r6, #0]
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d1f1      	bne.n	8007d78 <__sfp+0x20>
 8007d94:	230c      	movs	r3, #12
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	4604      	mov	r4, r0
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d9e:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <__sfp+0x74>)
 8007da0:	6665      	str	r5, [r4, #100]	; 0x64
 8007da2:	e9c4 5500 	strd	r5, r5, [r4]
 8007da6:	60a5      	str	r5, [r4, #8]
 8007da8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007dac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007db0:	2208      	movs	r2, #8
 8007db2:	4629      	mov	r1, r5
 8007db4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007db8:	f7fd f9eb 	bl	8005192 <memset>
 8007dbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dc4:	e7e9      	b.n	8007d9a <__sfp+0x42>
 8007dc6:	bf00      	nop
 8007dc8:	08009ab0 	.word	0x08009ab0
 8007dcc:	ffff0001 	.word	0xffff0001

08007dd0 <_fwalk_reent>:
 8007dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd4:	4680      	mov	r8, r0
 8007dd6:	4689      	mov	r9, r1
 8007dd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ddc:	2600      	movs	r6, #0
 8007dde:	b914      	cbnz	r4, 8007de6 <_fwalk_reent+0x16>
 8007de0:	4630      	mov	r0, r6
 8007de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007dea:	3f01      	subs	r7, #1
 8007dec:	d501      	bpl.n	8007df2 <_fwalk_reent+0x22>
 8007dee:	6824      	ldr	r4, [r4, #0]
 8007df0:	e7f5      	b.n	8007dde <_fwalk_reent+0xe>
 8007df2:	89ab      	ldrh	r3, [r5, #12]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d907      	bls.n	8007e08 <_fwalk_reent+0x38>
 8007df8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	d003      	beq.n	8007e08 <_fwalk_reent+0x38>
 8007e00:	4629      	mov	r1, r5
 8007e02:	4640      	mov	r0, r8
 8007e04:	47c8      	blx	r9
 8007e06:	4306      	orrs	r6, r0
 8007e08:	3568      	adds	r5, #104	; 0x68
 8007e0a:	e7ee      	b.n	8007dea <_fwalk_reent+0x1a>

08007e0c <rshift>:
 8007e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e0e:	6906      	ldr	r6, [r0, #16]
 8007e10:	114b      	asrs	r3, r1, #5
 8007e12:	429e      	cmp	r6, r3
 8007e14:	f100 0414 	add.w	r4, r0, #20
 8007e18:	dd30      	ble.n	8007e7c <rshift+0x70>
 8007e1a:	f011 011f 	ands.w	r1, r1, #31
 8007e1e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007e22:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007e26:	d108      	bne.n	8007e3a <rshift+0x2e>
 8007e28:	4621      	mov	r1, r4
 8007e2a:	42b2      	cmp	r2, r6
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	d211      	bcs.n	8007e54 <rshift+0x48>
 8007e30:	f852 3b04 	ldr.w	r3, [r2], #4
 8007e34:	f841 3b04 	str.w	r3, [r1], #4
 8007e38:	e7f7      	b.n	8007e2a <rshift+0x1e>
 8007e3a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007e3e:	f1c1 0c20 	rsb	ip, r1, #32
 8007e42:	40cd      	lsrs	r5, r1
 8007e44:	3204      	adds	r2, #4
 8007e46:	4623      	mov	r3, r4
 8007e48:	42b2      	cmp	r2, r6
 8007e4a:	4617      	mov	r7, r2
 8007e4c:	d30c      	bcc.n	8007e68 <rshift+0x5c>
 8007e4e:	601d      	str	r5, [r3, #0]
 8007e50:	b105      	cbz	r5, 8007e54 <rshift+0x48>
 8007e52:	3304      	adds	r3, #4
 8007e54:	1b1a      	subs	r2, r3, r4
 8007e56:	42a3      	cmp	r3, r4
 8007e58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e5c:	bf08      	it	eq
 8007e5e:	2300      	moveq	r3, #0
 8007e60:	6102      	str	r2, [r0, #16]
 8007e62:	bf08      	it	eq
 8007e64:	6143      	streq	r3, [r0, #20]
 8007e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e68:	683f      	ldr	r7, [r7, #0]
 8007e6a:	fa07 f70c 	lsl.w	r7, r7, ip
 8007e6e:	433d      	orrs	r5, r7
 8007e70:	f843 5b04 	str.w	r5, [r3], #4
 8007e74:	f852 5b04 	ldr.w	r5, [r2], #4
 8007e78:	40cd      	lsrs	r5, r1
 8007e7a:	e7e5      	b.n	8007e48 <rshift+0x3c>
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	e7e9      	b.n	8007e54 <rshift+0x48>

08007e80 <__hexdig_fun>:
 8007e80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d802      	bhi.n	8007e8e <__hexdig_fun+0xe>
 8007e88:	3820      	subs	r0, #32
 8007e8a:	b2c0      	uxtb	r0, r0
 8007e8c:	4770      	bx	lr
 8007e8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d801      	bhi.n	8007e9a <__hexdig_fun+0x1a>
 8007e96:	3847      	subs	r0, #71	; 0x47
 8007e98:	e7f7      	b.n	8007e8a <__hexdig_fun+0xa>
 8007e9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e9e:	2b05      	cmp	r3, #5
 8007ea0:	d801      	bhi.n	8007ea6 <__hexdig_fun+0x26>
 8007ea2:	3827      	subs	r0, #39	; 0x27
 8007ea4:	e7f1      	b.n	8007e8a <__hexdig_fun+0xa>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	4770      	bx	lr

08007eaa <__gethex>:
 8007eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eae:	b08b      	sub	sp, #44	; 0x2c
 8007eb0:	468a      	mov	sl, r1
 8007eb2:	9002      	str	r0, [sp, #8]
 8007eb4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007eb6:	9306      	str	r3, [sp, #24]
 8007eb8:	4690      	mov	r8, r2
 8007eba:	f000 facd 	bl	8008458 <__localeconv_l>
 8007ebe:	6803      	ldr	r3, [r0, #0]
 8007ec0:	9303      	str	r3, [sp, #12]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7f8 f996 	bl	80001f4 <strlen>
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	9001      	str	r0, [sp, #4]
 8007ecc:	4403      	add	r3, r0
 8007ece:	f04f 0b00 	mov.w	fp, #0
 8007ed2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007ed6:	9307      	str	r3, [sp, #28]
 8007ed8:	f8da 3000 	ldr.w	r3, [sl]
 8007edc:	3302      	adds	r3, #2
 8007ede:	461f      	mov	r7, r3
 8007ee0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ee4:	2830      	cmp	r0, #48	; 0x30
 8007ee6:	d06c      	beq.n	8007fc2 <__gethex+0x118>
 8007ee8:	f7ff ffca 	bl	8007e80 <__hexdig_fun>
 8007eec:	4604      	mov	r4, r0
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d16a      	bne.n	8007fc8 <__gethex+0x11e>
 8007ef2:	9a01      	ldr	r2, [sp, #4]
 8007ef4:	9903      	ldr	r1, [sp, #12]
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	f001 fac5 	bl	8009486 <strncmp>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d166      	bne.n	8007fce <__gethex+0x124>
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	5cf8      	ldrb	r0, [r7, r3]
 8007f04:	18fe      	adds	r6, r7, r3
 8007f06:	f7ff ffbb 	bl	8007e80 <__hexdig_fun>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d062      	beq.n	8007fd4 <__gethex+0x12a>
 8007f0e:	4633      	mov	r3, r6
 8007f10:	7818      	ldrb	r0, [r3, #0]
 8007f12:	2830      	cmp	r0, #48	; 0x30
 8007f14:	461f      	mov	r7, r3
 8007f16:	f103 0301 	add.w	r3, r3, #1
 8007f1a:	d0f9      	beq.n	8007f10 <__gethex+0x66>
 8007f1c:	f7ff ffb0 	bl	8007e80 <__hexdig_fun>
 8007f20:	fab0 f580 	clz	r5, r0
 8007f24:	096d      	lsrs	r5, r5, #5
 8007f26:	4634      	mov	r4, r6
 8007f28:	f04f 0b01 	mov.w	fp, #1
 8007f2c:	463a      	mov	r2, r7
 8007f2e:	4616      	mov	r6, r2
 8007f30:	3201      	adds	r2, #1
 8007f32:	7830      	ldrb	r0, [r6, #0]
 8007f34:	f7ff ffa4 	bl	8007e80 <__hexdig_fun>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d1f8      	bne.n	8007f2e <__gethex+0x84>
 8007f3c:	9a01      	ldr	r2, [sp, #4]
 8007f3e:	9903      	ldr	r1, [sp, #12]
 8007f40:	4630      	mov	r0, r6
 8007f42:	f001 faa0 	bl	8009486 <strncmp>
 8007f46:	b950      	cbnz	r0, 8007f5e <__gethex+0xb4>
 8007f48:	b954      	cbnz	r4, 8007f60 <__gethex+0xb6>
 8007f4a:	9b01      	ldr	r3, [sp, #4]
 8007f4c:	18f4      	adds	r4, r6, r3
 8007f4e:	4622      	mov	r2, r4
 8007f50:	4616      	mov	r6, r2
 8007f52:	3201      	adds	r2, #1
 8007f54:	7830      	ldrb	r0, [r6, #0]
 8007f56:	f7ff ff93 	bl	8007e80 <__hexdig_fun>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d1f8      	bne.n	8007f50 <__gethex+0xa6>
 8007f5e:	b10c      	cbz	r4, 8007f64 <__gethex+0xba>
 8007f60:	1ba4      	subs	r4, r4, r6
 8007f62:	00a4      	lsls	r4, r4, #2
 8007f64:	7833      	ldrb	r3, [r6, #0]
 8007f66:	2b50      	cmp	r3, #80	; 0x50
 8007f68:	d001      	beq.n	8007f6e <__gethex+0xc4>
 8007f6a:	2b70      	cmp	r3, #112	; 0x70
 8007f6c:	d140      	bne.n	8007ff0 <__gethex+0x146>
 8007f6e:	7873      	ldrb	r3, [r6, #1]
 8007f70:	2b2b      	cmp	r3, #43	; 0x2b
 8007f72:	d031      	beq.n	8007fd8 <__gethex+0x12e>
 8007f74:	2b2d      	cmp	r3, #45	; 0x2d
 8007f76:	d033      	beq.n	8007fe0 <__gethex+0x136>
 8007f78:	1c71      	adds	r1, r6, #1
 8007f7a:	f04f 0900 	mov.w	r9, #0
 8007f7e:	7808      	ldrb	r0, [r1, #0]
 8007f80:	f7ff ff7e 	bl	8007e80 <__hexdig_fun>
 8007f84:	1e43      	subs	r3, r0, #1
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b18      	cmp	r3, #24
 8007f8a:	d831      	bhi.n	8007ff0 <__gethex+0x146>
 8007f8c:	f1a0 0210 	sub.w	r2, r0, #16
 8007f90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f94:	f7ff ff74 	bl	8007e80 <__hexdig_fun>
 8007f98:	1e43      	subs	r3, r0, #1
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b18      	cmp	r3, #24
 8007f9e:	d922      	bls.n	8007fe6 <__gethex+0x13c>
 8007fa0:	f1b9 0f00 	cmp.w	r9, #0
 8007fa4:	d000      	beq.n	8007fa8 <__gethex+0xfe>
 8007fa6:	4252      	negs	r2, r2
 8007fa8:	4414      	add	r4, r2
 8007faa:	f8ca 1000 	str.w	r1, [sl]
 8007fae:	b30d      	cbz	r5, 8007ff4 <__gethex+0x14a>
 8007fb0:	f1bb 0f00 	cmp.w	fp, #0
 8007fb4:	bf0c      	ite	eq
 8007fb6:	2706      	moveq	r7, #6
 8007fb8:	2700      	movne	r7, #0
 8007fba:	4638      	mov	r0, r7
 8007fbc:	b00b      	add	sp, #44	; 0x2c
 8007fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc2:	f10b 0b01 	add.w	fp, fp, #1
 8007fc6:	e78a      	b.n	8007ede <__gethex+0x34>
 8007fc8:	2500      	movs	r5, #0
 8007fca:	462c      	mov	r4, r5
 8007fcc:	e7ae      	b.n	8007f2c <__gethex+0x82>
 8007fce:	463e      	mov	r6, r7
 8007fd0:	2501      	movs	r5, #1
 8007fd2:	e7c7      	b.n	8007f64 <__gethex+0xba>
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	e7fb      	b.n	8007fd0 <__gethex+0x126>
 8007fd8:	f04f 0900 	mov.w	r9, #0
 8007fdc:	1cb1      	adds	r1, r6, #2
 8007fde:	e7ce      	b.n	8007f7e <__gethex+0xd4>
 8007fe0:	f04f 0901 	mov.w	r9, #1
 8007fe4:	e7fa      	b.n	8007fdc <__gethex+0x132>
 8007fe6:	230a      	movs	r3, #10
 8007fe8:	fb03 0202 	mla	r2, r3, r2, r0
 8007fec:	3a10      	subs	r2, #16
 8007fee:	e7cf      	b.n	8007f90 <__gethex+0xe6>
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	e7da      	b.n	8007faa <__gethex+0x100>
 8007ff4:	1bf3      	subs	r3, r6, r7
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	2b07      	cmp	r3, #7
 8007ffc:	dc49      	bgt.n	8008092 <__gethex+0x1e8>
 8007ffe:	9802      	ldr	r0, [sp, #8]
 8008000:	f000 faa6 	bl	8008550 <_Balloc>
 8008004:	9b01      	ldr	r3, [sp, #4]
 8008006:	f100 0914 	add.w	r9, r0, #20
 800800a:	f04f 0b00 	mov.w	fp, #0
 800800e:	f1c3 0301 	rsb	r3, r3, #1
 8008012:	4605      	mov	r5, r0
 8008014:	f8cd 9010 	str.w	r9, [sp, #16]
 8008018:	46da      	mov	sl, fp
 800801a:	9308      	str	r3, [sp, #32]
 800801c:	42b7      	cmp	r7, r6
 800801e:	d33b      	bcc.n	8008098 <__gethex+0x1ee>
 8008020:	9804      	ldr	r0, [sp, #16]
 8008022:	f840 ab04 	str.w	sl, [r0], #4
 8008026:	eba0 0009 	sub.w	r0, r0, r9
 800802a:	1080      	asrs	r0, r0, #2
 800802c:	6128      	str	r0, [r5, #16]
 800802e:	0147      	lsls	r7, r0, #5
 8008030:	4650      	mov	r0, sl
 8008032:	f000 fb51 	bl	80086d8 <__hi0bits>
 8008036:	f8d8 6000 	ldr.w	r6, [r8]
 800803a:	1a3f      	subs	r7, r7, r0
 800803c:	42b7      	cmp	r7, r6
 800803e:	dd64      	ble.n	800810a <__gethex+0x260>
 8008040:	1bbf      	subs	r7, r7, r6
 8008042:	4639      	mov	r1, r7
 8008044:	4628      	mov	r0, r5
 8008046:	f000 fe61 	bl	8008d0c <__any_on>
 800804a:	4682      	mov	sl, r0
 800804c:	b178      	cbz	r0, 800806e <__gethex+0x1c4>
 800804e:	1e7b      	subs	r3, r7, #1
 8008050:	1159      	asrs	r1, r3, #5
 8008052:	f003 021f 	and.w	r2, r3, #31
 8008056:	f04f 0a01 	mov.w	sl, #1
 800805a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800805e:	fa0a f202 	lsl.w	r2, sl, r2
 8008062:	420a      	tst	r2, r1
 8008064:	d003      	beq.n	800806e <__gethex+0x1c4>
 8008066:	4553      	cmp	r3, sl
 8008068:	dc46      	bgt.n	80080f8 <__gethex+0x24e>
 800806a:	f04f 0a02 	mov.w	sl, #2
 800806e:	4639      	mov	r1, r7
 8008070:	4628      	mov	r0, r5
 8008072:	f7ff fecb 	bl	8007e0c <rshift>
 8008076:	443c      	add	r4, r7
 8008078:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800807c:	42a3      	cmp	r3, r4
 800807e:	da52      	bge.n	8008126 <__gethex+0x27c>
 8008080:	4629      	mov	r1, r5
 8008082:	9802      	ldr	r0, [sp, #8]
 8008084:	f000 fa98 	bl	80085b8 <_Bfree>
 8008088:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800808a:	2300      	movs	r3, #0
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	27a3      	movs	r7, #163	; 0xa3
 8008090:	e793      	b.n	8007fba <__gethex+0x110>
 8008092:	3101      	adds	r1, #1
 8008094:	105b      	asrs	r3, r3, #1
 8008096:	e7b0      	b.n	8007ffa <__gethex+0x150>
 8008098:	1e73      	subs	r3, r6, #1
 800809a:	9305      	str	r3, [sp, #20]
 800809c:	9a07      	ldr	r2, [sp, #28]
 800809e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d018      	beq.n	80080d8 <__gethex+0x22e>
 80080a6:	f1bb 0f20 	cmp.w	fp, #32
 80080aa:	d107      	bne.n	80080bc <__gethex+0x212>
 80080ac:	9b04      	ldr	r3, [sp, #16]
 80080ae:	f8c3 a000 	str.w	sl, [r3]
 80080b2:	3304      	adds	r3, #4
 80080b4:	f04f 0a00 	mov.w	sl, #0
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	46d3      	mov	fp, sl
 80080bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080c0:	f7ff fede 	bl	8007e80 <__hexdig_fun>
 80080c4:	f000 000f 	and.w	r0, r0, #15
 80080c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80080cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80080d0:	f10b 0b04 	add.w	fp, fp, #4
 80080d4:	9b05      	ldr	r3, [sp, #20]
 80080d6:	e00d      	b.n	80080f4 <__gethex+0x24a>
 80080d8:	9b05      	ldr	r3, [sp, #20]
 80080da:	9a08      	ldr	r2, [sp, #32]
 80080dc:	4413      	add	r3, r2
 80080de:	42bb      	cmp	r3, r7
 80080e0:	d3e1      	bcc.n	80080a6 <__gethex+0x1fc>
 80080e2:	4618      	mov	r0, r3
 80080e4:	9a01      	ldr	r2, [sp, #4]
 80080e6:	9903      	ldr	r1, [sp, #12]
 80080e8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ea:	f001 f9cc 	bl	8009486 <strncmp>
 80080ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d1d8      	bne.n	80080a6 <__gethex+0x1fc>
 80080f4:	461e      	mov	r6, r3
 80080f6:	e791      	b.n	800801c <__gethex+0x172>
 80080f8:	1eb9      	subs	r1, r7, #2
 80080fa:	4628      	mov	r0, r5
 80080fc:	f000 fe06 	bl	8008d0c <__any_on>
 8008100:	2800      	cmp	r0, #0
 8008102:	d0b2      	beq.n	800806a <__gethex+0x1c0>
 8008104:	f04f 0a03 	mov.w	sl, #3
 8008108:	e7b1      	b.n	800806e <__gethex+0x1c4>
 800810a:	da09      	bge.n	8008120 <__gethex+0x276>
 800810c:	1bf7      	subs	r7, r6, r7
 800810e:	4629      	mov	r1, r5
 8008110:	463a      	mov	r2, r7
 8008112:	9802      	ldr	r0, [sp, #8]
 8008114:	f000 fc1c 	bl	8008950 <__lshift>
 8008118:	1be4      	subs	r4, r4, r7
 800811a:	4605      	mov	r5, r0
 800811c:	f100 0914 	add.w	r9, r0, #20
 8008120:	f04f 0a00 	mov.w	sl, #0
 8008124:	e7a8      	b.n	8008078 <__gethex+0x1ce>
 8008126:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800812a:	42a0      	cmp	r0, r4
 800812c:	dd6a      	ble.n	8008204 <__gethex+0x35a>
 800812e:	1b04      	subs	r4, r0, r4
 8008130:	42a6      	cmp	r6, r4
 8008132:	dc2e      	bgt.n	8008192 <__gethex+0x2e8>
 8008134:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d022      	beq.n	8008182 <__gethex+0x2d8>
 800813c:	2b03      	cmp	r3, #3
 800813e:	d024      	beq.n	800818a <__gethex+0x2e0>
 8008140:	2b01      	cmp	r3, #1
 8008142:	d115      	bne.n	8008170 <__gethex+0x2c6>
 8008144:	42a6      	cmp	r6, r4
 8008146:	d113      	bne.n	8008170 <__gethex+0x2c6>
 8008148:	2e01      	cmp	r6, #1
 800814a:	dc0b      	bgt.n	8008164 <__gethex+0x2ba>
 800814c:	9a06      	ldr	r2, [sp, #24]
 800814e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	2301      	movs	r3, #1
 8008156:	612b      	str	r3, [r5, #16]
 8008158:	f8c9 3000 	str.w	r3, [r9]
 800815c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800815e:	2762      	movs	r7, #98	; 0x62
 8008160:	601d      	str	r5, [r3, #0]
 8008162:	e72a      	b.n	8007fba <__gethex+0x110>
 8008164:	1e71      	subs	r1, r6, #1
 8008166:	4628      	mov	r0, r5
 8008168:	f000 fdd0 	bl	8008d0c <__any_on>
 800816c:	2800      	cmp	r0, #0
 800816e:	d1ed      	bne.n	800814c <__gethex+0x2a2>
 8008170:	4629      	mov	r1, r5
 8008172:	9802      	ldr	r0, [sp, #8]
 8008174:	f000 fa20 	bl	80085b8 <_Bfree>
 8008178:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800817a:	2300      	movs	r3, #0
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	2750      	movs	r7, #80	; 0x50
 8008180:	e71b      	b.n	8007fba <__gethex+0x110>
 8008182:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0e1      	beq.n	800814c <__gethex+0x2a2>
 8008188:	e7f2      	b.n	8008170 <__gethex+0x2c6>
 800818a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1dd      	bne.n	800814c <__gethex+0x2a2>
 8008190:	e7ee      	b.n	8008170 <__gethex+0x2c6>
 8008192:	1e67      	subs	r7, r4, #1
 8008194:	f1ba 0f00 	cmp.w	sl, #0
 8008198:	d131      	bne.n	80081fe <__gethex+0x354>
 800819a:	b127      	cbz	r7, 80081a6 <__gethex+0x2fc>
 800819c:	4639      	mov	r1, r7
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 fdb4 	bl	8008d0c <__any_on>
 80081a4:	4682      	mov	sl, r0
 80081a6:	117a      	asrs	r2, r7, #5
 80081a8:	2301      	movs	r3, #1
 80081aa:	f007 071f 	and.w	r7, r7, #31
 80081ae:	fa03 f707 	lsl.w	r7, r3, r7
 80081b2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80081b6:	4621      	mov	r1, r4
 80081b8:	421f      	tst	r7, r3
 80081ba:	4628      	mov	r0, r5
 80081bc:	bf18      	it	ne
 80081be:	f04a 0a02 	orrne.w	sl, sl, #2
 80081c2:	1b36      	subs	r6, r6, r4
 80081c4:	f7ff fe22 	bl	8007e0c <rshift>
 80081c8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80081cc:	2702      	movs	r7, #2
 80081ce:	f1ba 0f00 	cmp.w	sl, #0
 80081d2:	d048      	beq.n	8008266 <__gethex+0x3bc>
 80081d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d015      	beq.n	8008208 <__gethex+0x35e>
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d017      	beq.n	8008210 <__gethex+0x366>
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d109      	bne.n	80081f8 <__gethex+0x34e>
 80081e4:	f01a 0f02 	tst.w	sl, #2
 80081e8:	d006      	beq.n	80081f8 <__gethex+0x34e>
 80081ea:	f8d9 3000 	ldr.w	r3, [r9]
 80081ee:	ea4a 0a03 	orr.w	sl, sl, r3
 80081f2:	f01a 0f01 	tst.w	sl, #1
 80081f6:	d10e      	bne.n	8008216 <__gethex+0x36c>
 80081f8:	f047 0710 	orr.w	r7, r7, #16
 80081fc:	e033      	b.n	8008266 <__gethex+0x3bc>
 80081fe:	f04f 0a01 	mov.w	sl, #1
 8008202:	e7d0      	b.n	80081a6 <__gethex+0x2fc>
 8008204:	2701      	movs	r7, #1
 8008206:	e7e2      	b.n	80081ce <__gethex+0x324>
 8008208:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800820a:	f1c3 0301 	rsb	r3, r3, #1
 800820e:	9315      	str	r3, [sp, #84]	; 0x54
 8008210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0f0      	beq.n	80081f8 <__gethex+0x34e>
 8008216:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800821a:	f105 0314 	add.w	r3, r5, #20
 800821e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008222:	eb03 010a 	add.w	r1, r3, sl
 8008226:	f04f 0c00 	mov.w	ip, #0
 800822a:	4618      	mov	r0, r3
 800822c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008230:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008234:	d01c      	beq.n	8008270 <__gethex+0x3c6>
 8008236:	3201      	adds	r2, #1
 8008238:	6002      	str	r2, [r0, #0]
 800823a:	2f02      	cmp	r7, #2
 800823c:	f105 0314 	add.w	r3, r5, #20
 8008240:	d138      	bne.n	80082b4 <__gethex+0x40a>
 8008242:	f8d8 2000 	ldr.w	r2, [r8]
 8008246:	3a01      	subs	r2, #1
 8008248:	42b2      	cmp	r2, r6
 800824a:	d10a      	bne.n	8008262 <__gethex+0x3b8>
 800824c:	1171      	asrs	r1, r6, #5
 800824e:	2201      	movs	r2, #1
 8008250:	f006 061f 	and.w	r6, r6, #31
 8008254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008258:	fa02 f606 	lsl.w	r6, r2, r6
 800825c:	421e      	tst	r6, r3
 800825e:	bf18      	it	ne
 8008260:	4617      	movne	r7, r2
 8008262:	f047 0720 	orr.w	r7, r7, #32
 8008266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008268:	601d      	str	r5, [r3, #0]
 800826a:	9b06      	ldr	r3, [sp, #24]
 800826c:	601c      	str	r4, [r3, #0]
 800826e:	e6a4      	b.n	8007fba <__gethex+0x110>
 8008270:	4299      	cmp	r1, r3
 8008272:	f843 cc04 	str.w	ip, [r3, #-4]
 8008276:	d8d8      	bhi.n	800822a <__gethex+0x380>
 8008278:	68ab      	ldr	r3, [r5, #8]
 800827a:	4599      	cmp	r9, r3
 800827c:	db12      	blt.n	80082a4 <__gethex+0x3fa>
 800827e:	6869      	ldr	r1, [r5, #4]
 8008280:	9802      	ldr	r0, [sp, #8]
 8008282:	3101      	adds	r1, #1
 8008284:	f000 f964 	bl	8008550 <_Balloc>
 8008288:	692a      	ldr	r2, [r5, #16]
 800828a:	3202      	adds	r2, #2
 800828c:	f105 010c 	add.w	r1, r5, #12
 8008290:	4683      	mov	fp, r0
 8008292:	0092      	lsls	r2, r2, #2
 8008294:	300c      	adds	r0, #12
 8008296:	f7fc ff71 	bl	800517c <memcpy>
 800829a:	4629      	mov	r1, r5
 800829c:	9802      	ldr	r0, [sp, #8]
 800829e:	f000 f98b 	bl	80085b8 <_Bfree>
 80082a2:	465d      	mov	r5, fp
 80082a4:	692b      	ldr	r3, [r5, #16]
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80082ac:	612a      	str	r2, [r5, #16]
 80082ae:	2201      	movs	r2, #1
 80082b0:	615a      	str	r2, [r3, #20]
 80082b2:	e7c2      	b.n	800823a <__gethex+0x390>
 80082b4:	692a      	ldr	r2, [r5, #16]
 80082b6:	454a      	cmp	r2, r9
 80082b8:	dd0b      	ble.n	80082d2 <__gethex+0x428>
 80082ba:	2101      	movs	r1, #1
 80082bc:	4628      	mov	r0, r5
 80082be:	f7ff fda5 	bl	8007e0c <rshift>
 80082c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082c6:	3401      	adds	r4, #1
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	f6ff aed9 	blt.w	8008080 <__gethex+0x1d6>
 80082ce:	2701      	movs	r7, #1
 80082d0:	e7c7      	b.n	8008262 <__gethex+0x3b8>
 80082d2:	f016 061f 	ands.w	r6, r6, #31
 80082d6:	d0fa      	beq.n	80082ce <__gethex+0x424>
 80082d8:	449a      	add	sl, r3
 80082da:	f1c6 0620 	rsb	r6, r6, #32
 80082de:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082e2:	f000 f9f9 	bl	80086d8 <__hi0bits>
 80082e6:	42b0      	cmp	r0, r6
 80082e8:	dbe7      	blt.n	80082ba <__gethex+0x410>
 80082ea:	e7f0      	b.n	80082ce <__gethex+0x424>

080082ec <L_shift>:
 80082ec:	f1c2 0208 	rsb	r2, r2, #8
 80082f0:	0092      	lsls	r2, r2, #2
 80082f2:	b570      	push	{r4, r5, r6, lr}
 80082f4:	f1c2 0620 	rsb	r6, r2, #32
 80082f8:	6843      	ldr	r3, [r0, #4]
 80082fa:	6804      	ldr	r4, [r0, #0]
 80082fc:	fa03 f506 	lsl.w	r5, r3, r6
 8008300:	432c      	orrs	r4, r5
 8008302:	40d3      	lsrs	r3, r2
 8008304:	6004      	str	r4, [r0, #0]
 8008306:	f840 3f04 	str.w	r3, [r0, #4]!
 800830a:	4288      	cmp	r0, r1
 800830c:	d3f4      	bcc.n	80082f8 <L_shift+0xc>
 800830e:	bd70      	pop	{r4, r5, r6, pc}

08008310 <__match>:
 8008310:	b530      	push	{r4, r5, lr}
 8008312:	6803      	ldr	r3, [r0, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800831a:	b914      	cbnz	r4, 8008322 <__match+0x12>
 800831c:	6003      	str	r3, [r0, #0]
 800831e:	2001      	movs	r0, #1
 8008320:	bd30      	pop	{r4, r5, pc}
 8008322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008326:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800832a:	2d19      	cmp	r5, #25
 800832c:	bf98      	it	ls
 800832e:	3220      	addls	r2, #32
 8008330:	42a2      	cmp	r2, r4
 8008332:	d0f0      	beq.n	8008316 <__match+0x6>
 8008334:	2000      	movs	r0, #0
 8008336:	e7f3      	b.n	8008320 <__match+0x10>

08008338 <__hexnan>:
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	680b      	ldr	r3, [r1, #0]
 800833e:	6801      	ldr	r1, [r0, #0]
 8008340:	115f      	asrs	r7, r3, #5
 8008342:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008346:	f013 031f 	ands.w	r3, r3, #31
 800834a:	b087      	sub	sp, #28
 800834c:	bf18      	it	ne
 800834e:	3704      	addne	r7, #4
 8008350:	2500      	movs	r5, #0
 8008352:	1f3e      	subs	r6, r7, #4
 8008354:	4682      	mov	sl, r0
 8008356:	4690      	mov	r8, r2
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	f847 5c04 	str.w	r5, [r7, #-4]
 800835e:	46b1      	mov	r9, r6
 8008360:	4634      	mov	r4, r6
 8008362:	9502      	str	r5, [sp, #8]
 8008364:	46ab      	mov	fp, r5
 8008366:	784a      	ldrb	r2, [r1, #1]
 8008368:	1c4b      	adds	r3, r1, #1
 800836a:	9303      	str	r3, [sp, #12]
 800836c:	b342      	cbz	r2, 80083c0 <__hexnan+0x88>
 800836e:	4610      	mov	r0, r2
 8008370:	9105      	str	r1, [sp, #20]
 8008372:	9204      	str	r2, [sp, #16]
 8008374:	f7ff fd84 	bl	8007e80 <__hexdig_fun>
 8008378:	2800      	cmp	r0, #0
 800837a:	d143      	bne.n	8008404 <__hexnan+0xcc>
 800837c:	9a04      	ldr	r2, [sp, #16]
 800837e:	9905      	ldr	r1, [sp, #20]
 8008380:	2a20      	cmp	r2, #32
 8008382:	d818      	bhi.n	80083b6 <__hexnan+0x7e>
 8008384:	9b02      	ldr	r3, [sp, #8]
 8008386:	459b      	cmp	fp, r3
 8008388:	dd13      	ble.n	80083b2 <__hexnan+0x7a>
 800838a:	454c      	cmp	r4, r9
 800838c:	d206      	bcs.n	800839c <__hexnan+0x64>
 800838e:	2d07      	cmp	r5, #7
 8008390:	dc04      	bgt.n	800839c <__hexnan+0x64>
 8008392:	462a      	mov	r2, r5
 8008394:	4649      	mov	r1, r9
 8008396:	4620      	mov	r0, r4
 8008398:	f7ff ffa8 	bl	80082ec <L_shift>
 800839c:	4544      	cmp	r4, r8
 800839e:	d944      	bls.n	800842a <__hexnan+0xf2>
 80083a0:	2300      	movs	r3, #0
 80083a2:	f1a4 0904 	sub.w	r9, r4, #4
 80083a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80083aa:	f8cd b008 	str.w	fp, [sp, #8]
 80083ae:	464c      	mov	r4, r9
 80083b0:	461d      	mov	r5, r3
 80083b2:	9903      	ldr	r1, [sp, #12]
 80083b4:	e7d7      	b.n	8008366 <__hexnan+0x2e>
 80083b6:	2a29      	cmp	r2, #41	; 0x29
 80083b8:	d14a      	bne.n	8008450 <__hexnan+0x118>
 80083ba:	3102      	adds	r1, #2
 80083bc:	f8ca 1000 	str.w	r1, [sl]
 80083c0:	f1bb 0f00 	cmp.w	fp, #0
 80083c4:	d044      	beq.n	8008450 <__hexnan+0x118>
 80083c6:	454c      	cmp	r4, r9
 80083c8:	d206      	bcs.n	80083d8 <__hexnan+0xa0>
 80083ca:	2d07      	cmp	r5, #7
 80083cc:	dc04      	bgt.n	80083d8 <__hexnan+0xa0>
 80083ce:	462a      	mov	r2, r5
 80083d0:	4649      	mov	r1, r9
 80083d2:	4620      	mov	r0, r4
 80083d4:	f7ff ff8a 	bl	80082ec <L_shift>
 80083d8:	4544      	cmp	r4, r8
 80083da:	d928      	bls.n	800842e <__hexnan+0xf6>
 80083dc:	4643      	mov	r3, r8
 80083de:	f854 2b04 	ldr.w	r2, [r4], #4
 80083e2:	f843 2b04 	str.w	r2, [r3], #4
 80083e6:	42a6      	cmp	r6, r4
 80083e8:	d2f9      	bcs.n	80083de <__hexnan+0xa6>
 80083ea:	2200      	movs	r2, #0
 80083ec:	f843 2b04 	str.w	r2, [r3], #4
 80083f0:	429e      	cmp	r6, r3
 80083f2:	d2fb      	bcs.n	80083ec <__hexnan+0xb4>
 80083f4:	6833      	ldr	r3, [r6, #0]
 80083f6:	b91b      	cbnz	r3, 8008400 <__hexnan+0xc8>
 80083f8:	4546      	cmp	r6, r8
 80083fa:	d127      	bne.n	800844c <__hexnan+0x114>
 80083fc:	2301      	movs	r3, #1
 80083fe:	6033      	str	r3, [r6, #0]
 8008400:	2005      	movs	r0, #5
 8008402:	e026      	b.n	8008452 <__hexnan+0x11a>
 8008404:	3501      	adds	r5, #1
 8008406:	2d08      	cmp	r5, #8
 8008408:	f10b 0b01 	add.w	fp, fp, #1
 800840c:	dd06      	ble.n	800841c <__hexnan+0xe4>
 800840e:	4544      	cmp	r4, r8
 8008410:	d9cf      	bls.n	80083b2 <__hexnan+0x7a>
 8008412:	2300      	movs	r3, #0
 8008414:	f844 3c04 	str.w	r3, [r4, #-4]
 8008418:	2501      	movs	r5, #1
 800841a:	3c04      	subs	r4, #4
 800841c:	6822      	ldr	r2, [r4, #0]
 800841e:	f000 000f 	and.w	r0, r0, #15
 8008422:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008426:	6020      	str	r0, [r4, #0]
 8008428:	e7c3      	b.n	80083b2 <__hexnan+0x7a>
 800842a:	2508      	movs	r5, #8
 800842c:	e7c1      	b.n	80083b2 <__hexnan+0x7a>
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0df      	beq.n	80083f4 <__hexnan+0xbc>
 8008434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008438:	f1c3 0320 	rsb	r3, r3, #32
 800843c:	fa22 f303 	lsr.w	r3, r2, r3
 8008440:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008444:	401a      	ands	r2, r3
 8008446:	f847 2c04 	str.w	r2, [r7, #-4]
 800844a:	e7d3      	b.n	80083f4 <__hexnan+0xbc>
 800844c:	3e04      	subs	r6, #4
 800844e:	e7d1      	b.n	80083f4 <__hexnan+0xbc>
 8008450:	2004      	movs	r0, #4
 8008452:	b007      	add	sp, #28
 8008454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008458 <__localeconv_l>:
 8008458:	30f0      	adds	r0, #240	; 0xf0
 800845a:	4770      	bx	lr

0800845c <_localeconv_r>:
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <_localeconv_r+0x14>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6a18      	ldr	r0, [r3, #32]
 8008462:	4b04      	ldr	r3, [pc, #16]	; (8008474 <_localeconv_r+0x18>)
 8008464:	2800      	cmp	r0, #0
 8008466:	bf08      	it	eq
 8008468:	4618      	moveq	r0, r3
 800846a:	30f0      	adds	r0, #240	; 0xf0
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	20000038 	.word	0x20000038
 8008474:	2000009c 	.word	0x2000009c

08008478 <__swhatbuf_r>:
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	460e      	mov	r6, r1
 800847c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008480:	2900      	cmp	r1, #0
 8008482:	b096      	sub	sp, #88	; 0x58
 8008484:	4614      	mov	r4, r2
 8008486:	461d      	mov	r5, r3
 8008488:	da07      	bge.n	800849a <__swhatbuf_r+0x22>
 800848a:	2300      	movs	r3, #0
 800848c:	602b      	str	r3, [r5, #0]
 800848e:	89b3      	ldrh	r3, [r6, #12]
 8008490:	061a      	lsls	r2, r3, #24
 8008492:	d410      	bmi.n	80084b6 <__swhatbuf_r+0x3e>
 8008494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008498:	e00e      	b.n	80084b8 <__swhatbuf_r+0x40>
 800849a:	466a      	mov	r2, sp
 800849c:	f001 f828 	bl	80094f0 <_fstat_r>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	dbf2      	blt.n	800848a <__swhatbuf_r+0x12>
 80084a4:	9a01      	ldr	r2, [sp, #4]
 80084a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084ae:	425a      	negs	r2, r3
 80084b0:	415a      	adcs	r2, r3
 80084b2:	602a      	str	r2, [r5, #0]
 80084b4:	e7ee      	b.n	8008494 <__swhatbuf_r+0x1c>
 80084b6:	2340      	movs	r3, #64	; 0x40
 80084b8:	2000      	movs	r0, #0
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	b016      	add	sp, #88	; 0x58
 80084be:	bd70      	pop	{r4, r5, r6, pc}

080084c0 <__smakebuf_r>:
 80084c0:	898b      	ldrh	r3, [r1, #12]
 80084c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084c4:	079d      	lsls	r5, r3, #30
 80084c6:	4606      	mov	r6, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	d507      	bpl.n	80084dc <__smakebuf_r+0x1c>
 80084cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	6123      	str	r3, [r4, #16]
 80084d4:	2301      	movs	r3, #1
 80084d6:	6163      	str	r3, [r4, #20]
 80084d8:	b002      	add	sp, #8
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	ab01      	add	r3, sp, #4
 80084de:	466a      	mov	r2, sp
 80084e0:	f7ff ffca 	bl	8008478 <__swhatbuf_r>
 80084e4:	9900      	ldr	r1, [sp, #0]
 80084e6:	4605      	mov	r5, r0
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 fc8d 	bl	8008e08 <_malloc_r>
 80084ee:	b948      	cbnz	r0, 8008504 <__smakebuf_r+0x44>
 80084f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f4:	059a      	lsls	r2, r3, #22
 80084f6:	d4ef      	bmi.n	80084d8 <__smakebuf_r+0x18>
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	f043 0302 	orr.w	r3, r3, #2
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	e7e3      	b.n	80084cc <__smakebuf_r+0xc>
 8008504:	4b0d      	ldr	r3, [pc, #52]	; (800853c <__smakebuf_r+0x7c>)
 8008506:	62b3      	str	r3, [r6, #40]	; 0x28
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	6020      	str	r0, [r4, #0]
 800850c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	9b00      	ldr	r3, [sp, #0]
 8008514:	6163      	str	r3, [r4, #20]
 8008516:	9b01      	ldr	r3, [sp, #4]
 8008518:	6120      	str	r0, [r4, #16]
 800851a:	b15b      	cbz	r3, 8008534 <__smakebuf_r+0x74>
 800851c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008520:	4630      	mov	r0, r6
 8008522:	f000 fff7 	bl	8009514 <_isatty_r>
 8008526:	b128      	cbz	r0, 8008534 <__smakebuf_r+0x74>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	431d      	orrs	r5, r3
 8008538:	81a5      	strh	r5, [r4, #12]
 800853a:	e7cd      	b.n	80084d8 <__smakebuf_r+0x18>
 800853c:	08007cc1 	.word	0x08007cc1

08008540 <malloc>:
 8008540:	4b02      	ldr	r3, [pc, #8]	; (800854c <malloc+0xc>)
 8008542:	4601      	mov	r1, r0
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	f000 bc5f 	b.w	8008e08 <_malloc_r>
 800854a:	bf00      	nop
 800854c:	20000038 	.word	0x20000038

08008550 <_Balloc>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008554:	4604      	mov	r4, r0
 8008556:	460e      	mov	r6, r1
 8008558:	b93d      	cbnz	r5, 800856a <_Balloc+0x1a>
 800855a:	2010      	movs	r0, #16
 800855c:	f7ff fff0 	bl	8008540 <malloc>
 8008560:	6260      	str	r0, [r4, #36]	; 0x24
 8008562:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008566:	6005      	str	r5, [r0, #0]
 8008568:	60c5      	str	r5, [r0, #12]
 800856a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800856c:	68eb      	ldr	r3, [r5, #12]
 800856e:	b183      	cbz	r3, 8008592 <_Balloc+0x42>
 8008570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008578:	b9b8      	cbnz	r0, 80085aa <_Balloc+0x5a>
 800857a:	2101      	movs	r1, #1
 800857c:	fa01 f506 	lsl.w	r5, r1, r6
 8008580:	1d6a      	adds	r2, r5, #5
 8008582:	0092      	lsls	r2, r2, #2
 8008584:	4620      	mov	r0, r4
 8008586:	f000 fbe2 	bl	8008d4e <_calloc_r>
 800858a:	b160      	cbz	r0, 80085a6 <_Balloc+0x56>
 800858c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008590:	e00e      	b.n	80085b0 <_Balloc+0x60>
 8008592:	2221      	movs	r2, #33	; 0x21
 8008594:	2104      	movs	r1, #4
 8008596:	4620      	mov	r0, r4
 8008598:	f000 fbd9 	bl	8008d4e <_calloc_r>
 800859c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800859e:	60e8      	str	r0, [r5, #12]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e4      	bne.n	8008570 <_Balloc+0x20>
 80085a6:	2000      	movs	r0, #0
 80085a8:	bd70      	pop	{r4, r5, r6, pc}
 80085aa:	6802      	ldr	r2, [r0, #0]
 80085ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80085b0:	2300      	movs	r3, #0
 80085b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085b6:	e7f7      	b.n	80085a8 <_Balloc+0x58>

080085b8 <_Bfree>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80085bc:	4606      	mov	r6, r0
 80085be:	460d      	mov	r5, r1
 80085c0:	b93c      	cbnz	r4, 80085d2 <_Bfree+0x1a>
 80085c2:	2010      	movs	r0, #16
 80085c4:	f7ff ffbc 	bl	8008540 <malloc>
 80085c8:	6270      	str	r0, [r6, #36]	; 0x24
 80085ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085ce:	6004      	str	r4, [r0, #0]
 80085d0:	60c4      	str	r4, [r0, #12]
 80085d2:	b13d      	cbz	r5, 80085e4 <_Bfree+0x2c>
 80085d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80085d6:	686a      	ldr	r2, [r5, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085de:	6029      	str	r1, [r5, #0]
 80085e0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80085e4:	bd70      	pop	{r4, r5, r6, pc}

080085e6 <__multadd>:
 80085e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ea:	690d      	ldr	r5, [r1, #16]
 80085ec:	461f      	mov	r7, r3
 80085ee:	4606      	mov	r6, r0
 80085f0:	460c      	mov	r4, r1
 80085f2:	f101 0c14 	add.w	ip, r1, #20
 80085f6:	2300      	movs	r3, #0
 80085f8:	f8dc 0000 	ldr.w	r0, [ip]
 80085fc:	b281      	uxth	r1, r0
 80085fe:	fb02 7101 	mla	r1, r2, r1, r7
 8008602:	0c0f      	lsrs	r7, r1, #16
 8008604:	0c00      	lsrs	r0, r0, #16
 8008606:	fb02 7000 	mla	r0, r2, r0, r7
 800860a:	b289      	uxth	r1, r1
 800860c:	3301      	adds	r3, #1
 800860e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008612:	429d      	cmp	r5, r3
 8008614:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008618:	f84c 1b04 	str.w	r1, [ip], #4
 800861c:	dcec      	bgt.n	80085f8 <__multadd+0x12>
 800861e:	b1d7      	cbz	r7, 8008656 <__multadd+0x70>
 8008620:	68a3      	ldr	r3, [r4, #8]
 8008622:	42ab      	cmp	r3, r5
 8008624:	dc12      	bgt.n	800864c <__multadd+0x66>
 8008626:	6861      	ldr	r1, [r4, #4]
 8008628:	4630      	mov	r0, r6
 800862a:	3101      	adds	r1, #1
 800862c:	f7ff ff90 	bl	8008550 <_Balloc>
 8008630:	6922      	ldr	r2, [r4, #16]
 8008632:	3202      	adds	r2, #2
 8008634:	f104 010c 	add.w	r1, r4, #12
 8008638:	4680      	mov	r8, r0
 800863a:	0092      	lsls	r2, r2, #2
 800863c:	300c      	adds	r0, #12
 800863e:	f7fc fd9d 	bl	800517c <memcpy>
 8008642:	4621      	mov	r1, r4
 8008644:	4630      	mov	r0, r6
 8008646:	f7ff ffb7 	bl	80085b8 <_Bfree>
 800864a:	4644      	mov	r4, r8
 800864c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008650:	3501      	adds	r5, #1
 8008652:	615f      	str	r7, [r3, #20]
 8008654:	6125      	str	r5, [r4, #16]
 8008656:	4620      	mov	r0, r4
 8008658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800865c <__s2b>:
 800865c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008660:	460c      	mov	r4, r1
 8008662:	4615      	mov	r5, r2
 8008664:	461f      	mov	r7, r3
 8008666:	2209      	movs	r2, #9
 8008668:	3308      	adds	r3, #8
 800866a:	4606      	mov	r6, r0
 800866c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008670:	2100      	movs	r1, #0
 8008672:	2201      	movs	r2, #1
 8008674:	429a      	cmp	r2, r3
 8008676:	db20      	blt.n	80086ba <__s2b+0x5e>
 8008678:	4630      	mov	r0, r6
 800867a:	f7ff ff69 	bl	8008550 <_Balloc>
 800867e:	9b08      	ldr	r3, [sp, #32]
 8008680:	6143      	str	r3, [r0, #20]
 8008682:	2d09      	cmp	r5, #9
 8008684:	f04f 0301 	mov.w	r3, #1
 8008688:	6103      	str	r3, [r0, #16]
 800868a:	dd19      	ble.n	80086c0 <__s2b+0x64>
 800868c:	f104 0809 	add.w	r8, r4, #9
 8008690:	46c1      	mov	r9, r8
 8008692:	442c      	add	r4, r5
 8008694:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008698:	4601      	mov	r1, r0
 800869a:	3b30      	subs	r3, #48	; 0x30
 800869c:	220a      	movs	r2, #10
 800869e:	4630      	mov	r0, r6
 80086a0:	f7ff ffa1 	bl	80085e6 <__multadd>
 80086a4:	45a1      	cmp	r9, r4
 80086a6:	d1f5      	bne.n	8008694 <__s2b+0x38>
 80086a8:	eb08 0405 	add.w	r4, r8, r5
 80086ac:	3c08      	subs	r4, #8
 80086ae:	1b2d      	subs	r5, r5, r4
 80086b0:	1963      	adds	r3, r4, r5
 80086b2:	42bb      	cmp	r3, r7
 80086b4:	db07      	blt.n	80086c6 <__s2b+0x6a>
 80086b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ba:	0052      	lsls	r2, r2, #1
 80086bc:	3101      	adds	r1, #1
 80086be:	e7d9      	b.n	8008674 <__s2b+0x18>
 80086c0:	340a      	adds	r4, #10
 80086c2:	2509      	movs	r5, #9
 80086c4:	e7f3      	b.n	80086ae <__s2b+0x52>
 80086c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086ca:	4601      	mov	r1, r0
 80086cc:	3b30      	subs	r3, #48	; 0x30
 80086ce:	220a      	movs	r2, #10
 80086d0:	4630      	mov	r0, r6
 80086d2:	f7ff ff88 	bl	80085e6 <__multadd>
 80086d6:	e7eb      	b.n	80086b0 <__s2b+0x54>

080086d8 <__hi0bits>:
 80086d8:	0c02      	lsrs	r2, r0, #16
 80086da:	0412      	lsls	r2, r2, #16
 80086dc:	4603      	mov	r3, r0
 80086de:	b9b2      	cbnz	r2, 800870e <__hi0bits+0x36>
 80086e0:	0403      	lsls	r3, r0, #16
 80086e2:	2010      	movs	r0, #16
 80086e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80086e8:	bf04      	itt	eq
 80086ea:	021b      	lsleq	r3, r3, #8
 80086ec:	3008      	addeq	r0, #8
 80086ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80086f2:	bf04      	itt	eq
 80086f4:	011b      	lsleq	r3, r3, #4
 80086f6:	3004      	addeq	r0, #4
 80086f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80086fc:	bf04      	itt	eq
 80086fe:	009b      	lsleq	r3, r3, #2
 8008700:	3002      	addeq	r0, #2
 8008702:	2b00      	cmp	r3, #0
 8008704:	db06      	blt.n	8008714 <__hi0bits+0x3c>
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	d503      	bpl.n	8008712 <__hi0bits+0x3a>
 800870a:	3001      	adds	r0, #1
 800870c:	4770      	bx	lr
 800870e:	2000      	movs	r0, #0
 8008710:	e7e8      	b.n	80086e4 <__hi0bits+0xc>
 8008712:	2020      	movs	r0, #32
 8008714:	4770      	bx	lr

08008716 <__lo0bits>:
 8008716:	6803      	ldr	r3, [r0, #0]
 8008718:	f013 0207 	ands.w	r2, r3, #7
 800871c:	4601      	mov	r1, r0
 800871e:	d00b      	beq.n	8008738 <__lo0bits+0x22>
 8008720:	07da      	lsls	r2, r3, #31
 8008722:	d423      	bmi.n	800876c <__lo0bits+0x56>
 8008724:	0798      	lsls	r0, r3, #30
 8008726:	bf49      	itett	mi
 8008728:	085b      	lsrmi	r3, r3, #1
 800872a:	089b      	lsrpl	r3, r3, #2
 800872c:	2001      	movmi	r0, #1
 800872e:	600b      	strmi	r3, [r1, #0]
 8008730:	bf5c      	itt	pl
 8008732:	600b      	strpl	r3, [r1, #0]
 8008734:	2002      	movpl	r0, #2
 8008736:	4770      	bx	lr
 8008738:	b298      	uxth	r0, r3
 800873a:	b9a8      	cbnz	r0, 8008768 <__lo0bits+0x52>
 800873c:	0c1b      	lsrs	r3, r3, #16
 800873e:	2010      	movs	r0, #16
 8008740:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008744:	bf04      	itt	eq
 8008746:	0a1b      	lsreq	r3, r3, #8
 8008748:	3008      	addeq	r0, #8
 800874a:	071a      	lsls	r2, r3, #28
 800874c:	bf04      	itt	eq
 800874e:	091b      	lsreq	r3, r3, #4
 8008750:	3004      	addeq	r0, #4
 8008752:	079a      	lsls	r2, r3, #30
 8008754:	bf04      	itt	eq
 8008756:	089b      	lsreq	r3, r3, #2
 8008758:	3002      	addeq	r0, #2
 800875a:	07da      	lsls	r2, r3, #31
 800875c:	d402      	bmi.n	8008764 <__lo0bits+0x4e>
 800875e:	085b      	lsrs	r3, r3, #1
 8008760:	d006      	beq.n	8008770 <__lo0bits+0x5a>
 8008762:	3001      	adds	r0, #1
 8008764:	600b      	str	r3, [r1, #0]
 8008766:	4770      	bx	lr
 8008768:	4610      	mov	r0, r2
 800876a:	e7e9      	b.n	8008740 <__lo0bits+0x2a>
 800876c:	2000      	movs	r0, #0
 800876e:	4770      	bx	lr
 8008770:	2020      	movs	r0, #32
 8008772:	4770      	bx	lr

08008774 <__i2b>:
 8008774:	b510      	push	{r4, lr}
 8008776:	460c      	mov	r4, r1
 8008778:	2101      	movs	r1, #1
 800877a:	f7ff fee9 	bl	8008550 <_Balloc>
 800877e:	2201      	movs	r2, #1
 8008780:	6144      	str	r4, [r0, #20]
 8008782:	6102      	str	r2, [r0, #16]
 8008784:	bd10      	pop	{r4, pc}

08008786 <__multiply>:
 8008786:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878a:	4614      	mov	r4, r2
 800878c:	690a      	ldr	r2, [r1, #16]
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	429a      	cmp	r2, r3
 8008792:	bfb8      	it	lt
 8008794:	460b      	movlt	r3, r1
 8008796:	4688      	mov	r8, r1
 8008798:	bfbc      	itt	lt
 800879a:	46a0      	movlt	r8, r4
 800879c:	461c      	movlt	r4, r3
 800879e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80087a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80087a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80087ae:	eb07 0609 	add.w	r6, r7, r9
 80087b2:	42b3      	cmp	r3, r6
 80087b4:	bfb8      	it	lt
 80087b6:	3101      	addlt	r1, #1
 80087b8:	f7ff feca 	bl	8008550 <_Balloc>
 80087bc:	f100 0514 	add.w	r5, r0, #20
 80087c0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80087c4:	462b      	mov	r3, r5
 80087c6:	2200      	movs	r2, #0
 80087c8:	4573      	cmp	r3, lr
 80087ca:	d316      	bcc.n	80087fa <__multiply+0x74>
 80087cc:	f104 0214 	add.w	r2, r4, #20
 80087d0:	f108 0114 	add.w	r1, r8, #20
 80087d4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80087d8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	9b00      	ldr	r3, [sp, #0]
 80087e0:	9201      	str	r2, [sp, #4]
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d80c      	bhi.n	8008800 <__multiply+0x7a>
 80087e6:	2e00      	cmp	r6, #0
 80087e8:	dd03      	ble.n	80087f2 <__multiply+0x6c>
 80087ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d05d      	beq.n	80088ae <__multiply+0x128>
 80087f2:	6106      	str	r6, [r0, #16]
 80087f4:	b003      	add	sp, #12
 80087f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fa:	f843 2b04 	str.w	r2, [r3], #4
 80087fe:	e7e3      	b.n	80087c8 <__multiply+0x42>
 8008800:	f8b2 b000 	ldrh.w	fp, [r2]
 8008804:	f1bb 0f00 	cmp.w	fp, #0
 8008808:	d023      	beq.n	8008852 <__multiply+0xcc>
 800880a:	4689      	mov	r9, r1
 800880c:	46ac      	mov	ip, r5
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	f859 4b04 	ldr.w	r4, [r9], #4
 8008816:	f8dc a000 	ldr.w	sl, [ip]
 800881a:	b2a3      	uxth	r3, r4
 800881c:	fa1f fa8a 	uxth.w	sl, sl
 8008820:	fb0b a303 	mla	r3, fp, r3, sl
 8008824:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008828:	f8dc 4000 	ldr.w	r4, [ip]
 800882c:	4443      	add	r3, r8
 800882e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008832:	fb0b 840a 	mla	r4, fp, sl, r8
 8008836:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800883a:	46e2      	mov	sl, ip
 800883c:	b29b      	uxth	r3, r3
 800883e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008842:	454f      	cmp	r7, r9
 8008844:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008848:	f84a 3b04 	str.w	r3, [sl], #4
 800884c:	d82b      	bhi.n	80088a6 <__multiply+0x120>
 800884e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008852:	9b01      	ldr	r3, [sp, #4]
 8008854:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008858:	3204      	adds	r2, #4
 800885a:	f1ba 0f00 	cmp.w	sl, #0
 800885e:	d020      	beq.n	80088a2 <__multiply+0x11c>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	4689      	mov	r9, r1
 8008864:	46a8      	mov	r8, r5
 8008866:	f04f 0b00 	mov.w	fp, #0
 800886a:	f8b9 c000 	ldrh.w	ip, [r9]
 800886e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008872:	fb0a 440c 	mla	r4, sl, ip, r4
 8008876:	445c      	add	r4, fp
 8008878:	46c4      	mov	ip, r8
 800887a:	b29b      	uxth	r3, r3
 800887c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008880:	f84c 3b04 	str.w	r3, [ip], #4
 8008884:	f859 3b04 	ldr.w	r3, [r9], #4
 8008888:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800888c:	0c1b      	lsrs	r3, r3, #16
 800888e:	fb0a b303 	mla	r3, sl, r3, fp
 8008892:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008896:	454f      	cmp	r7, r9
 8008898:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800889c:	d805      	bhi.n	80088aa <__multiply+0x124>
 800889e:	f8c8 3004 	str.w	r3, [r8, #4]
 80088a2:	3504      	adds	r5, #4
 80088a4:	e79b      	b.n	80087de <__multiply+0x58>
 80088a6:	46d4      	mov	ip, sl
 80088a8:	e7b3      	b.n	8008812 <__multiply+0x8c>
 80088aa:	46e0      	mov	r8, ip
 80088ac:	e7dd      	b.n	800886a <__multiply+0xe4>
 80088ae:	3e01      	subs	r6, #1
 80088b0:	e799      	b.n	80087e6 <__multiply+0x60>
	...

080088b4 <__pow5mult>:
 80088b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b8:	4615      	mov	r5, r2
 80088ba:	f012 0203 	ands.w	r2, r2, #3
 80088be:	4606      	mov	r6, r0
 80088c0:	460f      	mov	r7, r1
 80088c2:	d007      	beq.n	80088d4 <__pow5mult+0x20>
 80088c4:	3a01      	subs	r2, #1
 80088c6:	4c21      	ldr	r4, [pc, #132]	; (800894c <__pow5mult+0x98>)
 80088c8:	2300      	movs	r3, #0
 80088ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088ce:	f7ff fe8a 	bl	80085e6 <__multadd>
 80088d2:	4607      	mov	r7, r0
 80088d4:	10ad      	asrs	r5, r5, #2
 80088d6:	d035      	beq.n	8008944 <__pow5mult+0x90>
 80088d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088da:	b93c      	cbnz	r4, 80088ec <__pow5mult+0x38>
 80088dc:	2010      	movs	r0, #16
 80088de:	f7ff fe2f 	bl	8008540 <malloc>
 80088e2:	6270      	str	r0, [r6, #36]	; 0x24
 80088e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088e8:	6004      	str	r4, [r0, #0]
 80088ea:	60c4      	str	r4, [r0, #12]
 80088ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088f4:	b94c      	cbnz	r4, 800890a <__pow5mult+0x56>
 80088f6:	f240 2171 	movw	r1, #625	; 0x271
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7ff ff3a 	bl	8008774 <__i2b>
 8008900:	2300      	movs	r3, #0
 8008902:	f8c8 0008 	str.w	r0, [r8, #8]
 8008906:	4604      	mov	r4, r0
 8008908:	6003      	str	r3, [r0, #0]
 800890a:	f04f 0800 	mov.w	r8, #0
 800890e:	07eb      	lsls	r3, r5, #31
 8008910:	d50a      	bpl.n	8008928 <__pow5mult+0x74>
 8008912:	4639      	mov	r1, r7
 8008914:	4622      	mov	r2, r4
 8008916:	4630      	mov	r0, r6
 8008918:	f7ff ff35 	bl	8008786 <__multiply>
 800891c:	4639      	mov	r1, r7
 800891e:	4681      	mov	r9, r0
 8008920:	4630      	mov	r0, r6
 8008922:	f7ff fe49 	bl	80085b8 <_Bfree>
 8008926:	464f      	mov	r7, r9
 8008928:	106d      	asrs	r5, r5, #1
 800892a:	d00b      	beq.n	8008944 <__pow5mult+0x90>
 800892c:	6820      	ldr	r0, [r4, #0]
 800892e:	b938      	cbnz	r0, 8008940 <__pow5mult+0x8c>
 8008930:	4622      	mov	r2, r4
 8008932:	4621      	mov	r1, r4
 8008934:	4630      	mov	r0, r6
 8008936:	f7ff ff26 	bl	8008786 <__multiply>
 800893a:	6020      	str	r0, [r4, #0]
 800893c:	f8c0 8000 	str.w	r8, [r0]
 8008940:	4604      	mov	r4, r0
 8008942:	e7e4      	b.n	800890e <__pow5mult+0x5a>
 8008944:	4638      	mov	r0, r7
 8008946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894a:	bf00      	nop
 800894c:	08009da8 	.word	0x08009da8

08008950 <__lshift>:
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	460c      	mov	r4, r1
 8008956:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	6849      	ldr	r1, [r1, #4]
 800895e:	eb0a 0903 	add.w	r9, sl, r3
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	4607      	mov	r7, r0
 8008966:	4616      	mov	r6, r2
 8008968:	f109 0501 	add.w	r5, r9, #1
 800896c:	42ab      	cmp	r3, r5
 800896e:	db32      	blt.n	80089d6 <__lshift+0x86>
 8008970:	4638      	mov	r0, r7
 8008972:	f7ff fded 	bl	8008550 <_Balloc>
 8008976:	2300      	movs	r3, #0
 8008978:	4680      	mov	r8, r0
 800897a:	f100 0114 	add.w	r1, r0, #20
 800897e:	461a      	mov	r2, r3
 8008980:	4553      	cmp	r3, sl
 8008982:	db2b      	blt.n	80089dc <__lshift+0x8c>
 8008984:	6920      	ldr	r0, [r4, #16]
 8008986:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800898a:	f104 0314 	add.w	r3, r4, #20
 800898e:	f016 021f 	ands.w	r2, r6, #31
 8008992:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008996:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800899a:	d025      	beq.n	80089e8 <__lshift+0x98>
 800899c:	f1c2 0e20 	rsb	lr, r2, #32
 80089a0:	2000      	movs	r0, #0
 80089a2:	681e      	ldr	r6, [r3, #0]
 80089a4:	468a      	mov	sl, r1
 80089a6:	4096      	lsls	r6, r2
 80089a8:	4330      	orrs	r0, r6
 80089aa:	f84a 0b04 	str.w	r0, [sl], #4
 80089ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80089b2:	459c      	cmp	ip, r3
 80089b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80089b8:	d814      	bhi.n	80089e4 <__lshift+0x94>
 80089ba:	6048      	str	r0, [r1, #4]
 80089bc:	b108      	cbz	r0, 80089c2 <__lshift+0x72>
 80089be:	f109 0502 	add.w	r5, r9, #2
 80089c2:	3d01      	subs	r5, #1
 80089c4:	4638      	mov	r0, r7
 80089c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80089ca:	4621      	mov	r1, r4
 80089cc:	f7ff fdf4 	bl	80085b8 <_Bfree>
 80089d0:	4640      	mov	r0, r8
 80089d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d6:	3101      	adds	r1, #1
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	e7c7      	b.n	800896c <__lshift+0x1c>
 80089dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80089e0:	3301      	adds	r3, #1
 80089e2:	e7cd      	b.n	8008980 <__lshift+0x30>
 80089e4:	4651      	mov	r1, sl
 80089e6:	e7dc      	b.n	80089a2 <__lshift+0x52>
 80089e8:	3904      	subs	r1, #4
 80089ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80089f2:	459c      	cmp	ip, r3
 80089f4:	d8f9      	bhi.n	80089ea <__lshift+0x9a>
 80089f6:	e7e4      	b.n	80089c2 <__lshift+0x72>

080089f8 <__mcmp>:
 80089f8:	6903      	ldr	r3, [r0, #16]
 80089fa:	690a      	ldr	r2, [r1, #16]
 80089fc:	1a9b      	subs	r3, r3, r2
 80089fe:	b530      	push	{r4, r5, lr}
 8008a00:	d10c      	bne.n	8008a1c <__mcmp+0x24>
 8008a02:	0092      	lsls	r2, r2, #2
 8008a04:	3014      	adds	r0, #20
 8008a06:	3114      	adds	r1, #20
 8008a08:	1884      	adds	r4, r0, r2
 8008a0a:	4411      	add	r1, r2
 8008a0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a14:	4295      	cmp	r5, r2
 8008a16:	d003      	beq.n	8008a20 <__mcmp+0x28>
 8008a18:	d305      	bcc.n	8008a26 <__mcmp+0x2e>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	bd30      	pop	{r4, r5, pc}
 8008a20:	42a0      	cmp	r0, r4
 8008a22:	d3f3      	bcc.n	8008a0c <__mcmp+0x14>
 8008a24:	e7fa      	b.n	8008a1c <__mcmp+0x24>
 8008a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a2a:	e7f7      	b.n	8008a1c <__mcmp+0x24>

08008a2c <__mdiff>:
 8008a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	460d      	mov	r5, r1
 8008a32:	4607      	mov	r7, r0
 8008a34:	4611      	mov	r1, r2
 8008a36:	4628      	mov	r0, r5
 8008a38:	4614      	mov	r4, r2
 8008a3a:	f7ff ffdd 	bl	80089f8 <__mcmp>
 8008a3e:	1e06      	subs	r6, r0, #0
 8008a40:	d108      	bne.n	8008a54 <__mdiff+0x28>
 8008a42:	4631      	mov	r1, r6
 8008a44:	4638      	mov	r0, r7
 8008a46:	f7ff fd83 	bl	8008550 <_Balloc>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a54:	bfa4      	itt	ge
 8008a56:	4623      	movge	r3, r4
 8008a58:	462c      	movge	r4, r5
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	6861      	ldr	r1, [r4, #4]
 8008a5e:	bfa6      	itte	ge
 8008a60:	461d      	movge	r5, r3
 8008a62:	2600      	movge	r6, #0
 8008a64:	2601      	movlt	r6, #1
 8008a66:	f7ff fd73 	bl	8008550 <_Balloc>
 8008a6a:	692b      	ldr	r3, [r5, #16]
 8008a6c:	60c6      	str	r6, [r0, #12]
 8008a6e:	6926      	ldr	r6, [r4, #16]
 8008a70:	f105 0914 	add.w	r9, r5, #20
 8008a74:	f104 0214 	add.w	r2, r4, #20
 8008a78:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a7c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a80:	f100 0514 	add.w	r5, r0, #20
 8008a84:	f04f 0e00 	mov.w	lr, #0
 8008a88:	f852 ab04 	ldr.w	sl, [r2], #4
 8008a8c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008a90:	fa1e f18a 	uxtah	r1, lr, sl
 8008a94:	b2a3      	uxth	r3, r4
 8008a96:	1ac9      	subs	r1, r1, r3
 8008a98:	0c23      	lsrs	r3, r4, #16
 8008a9a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008a9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008aa2:	b289      	uxth	r1, r1
 8008aa4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008aa8:	45c8      	cmp	r8, r9
 8008aaa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008aae:	4694      	mov	ip, r2
 8008ab0:	f845 3b04 	str.w	r3, [r5], #4
 8008ab4:	d8e8      	bhi.n	8008a88 <__mdiff+0x5c>
 8008ab6:	45bc      	cmp	ip, r7
 8008ab8:	d304      	bcc.n	8008ac4 <__mdiff+0x98>
 8008aba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008abe:	b183      	cbz	r3, 8008ae2 <__mdiff+0xb6>
 8008ac0:	6106      	str	r6, [r0, #16]
 8008ac2:	e7c5      	b.n	8008a50 <__mdiff+0x24>
 8008ac4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ac8:	fa1e f381 	uxtah	r3, lr, r1
 8008acc:	141a      	asrs	r2, r3, #16
 8008ace:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ad8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008adc:	f845 3b04 	str.w	r3, [r5], #4
 8008ae0:	e7e9      	b.n	8008ab6 <__mdiff+0x8a>
 8008ae2:	3e01      	subs	r6, #1
 8008ae4:	e7e9      	b.n	8008aba <__mdiff+0x8e>
	...

08008ae8 <__ulp>:
 8008ae8:	4b12      	ldr	r3, [pc, #72]	; (8008b34 <__ulp+0x4c>)
 8008aea:	ee10 2a90 	vmov	r2, s1
 8008aee:	401a      	ands	r2, r3
 8008af0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd04      	ble.n	8008b02 <__ulp+0x1a>
 8008af8:	2000      	movs	r0, #0
 8008afa:	4619      	mov	r1, r3
 8008afc:	ec41 0b10 	vmov	d0, r0, r1
 8008b00:	4770      	bx	lr
 8008b02:	425b      	negs	r3, r3
 8008b04:	151b      	asrs	r3, r3, #20
 8008b06:	2b13      	cmp	r3, #19
 8008b08:	f04f 0000 	mov.w	r0, #0
 8008b0c:	f04f 0100 	mov.w	r1, #0
 8008b10:	dc04      	bgt.n	8008b1c <__ulp+0x34>
 8008b12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008b16:	fa42 f103 	asr.w	r1, r2, r3
 8008b1a:	e7ef      	b.n	8008afc <__ulp+0x14>
 8008b1c:	3b14      	subs	r3, #20
 8008b1e:	2b1e      	cmp	r3, #30
 8008b20:	f04f 0201 	mov.w	r2, #1
 8008b24:	bfda      	itte	le
 8008b26:	f1c3 031f 	rsble	r3, r3, #31
 8008b2a:	fa02 f303 	lslle.w	r3, r2, r3
 8008b2e:	4613      	movgt	r3, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	e7e3      	b.n	8008afc <__ulp+0x14>
 8008b34:	7ff00000 	.word	0x7ff00000

08008b38 <__b2d>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	6905      	ldr	r5, [r0, #16]
 8008b3c:	f100 0714 	add.w	r7, r0, #20
 8008b40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008b44:	1f2e      	subs	r6, r5, #4
 8008b46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f7ff fdc4 	bl	80086d8 <__hi0bits>
 8008b50:	f1c0 0320 	rsb	r3, r0, #32
 8008b54:	280a      	cmp	r0, #10
 8008b56:	600b      	str	r3, [r1, #0]
 8008b58:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008bd0 <__b2d+0x98>
 8008b5c:	dc14      	bgt.n	8008b88 <__b2d+0x50>
 8008b5e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008b62:	fa24 f10e 	lsr.w	r1, r4, lr
 8008b66:	42b7      	cmp	r7, r6
 8008b68:	ea41 030c 	orr.w	r3, r1, ip
 8008b6c:	bf34      	ite	cc
 8008b6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b72:	2100      	movcs	r1, #0
 8008b74:	3015      	adds	r0, #21
 8008b76:	fa04 f000 	lsl.w	r0, r4, r0
 8008b7a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008b7e:	ea40 0201 	orr.w	r2, r0, r1
 8008b82:	ec43 2b10 	vmov	d0, r2, r3
 8008b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b88:	42b7      	cmp	r7, r6
 8008b8a:	bf3a      	itte	cc
 8008b8c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008b90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b94:	2100      	movcs	r1, #0
 8008b96:	380b      	subs	r0, #11
 8008b98:	d015      	beq.n	8008bc6 <__b2d+0x8e>
 8008b9a:	4084      	lsls	r4, r0
 8008b9c:	f1c0 0520 	rsb	r5, r0, #32
 8008ba0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008ba4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008ba8:	42be      	cmp	r6, r7
 8008baa:	fa21 fc05 	lsr.w	ip, r1, r5
 8008bae:	ea44 030c 	orr.w	r3, r4, ip
 8008bb2:	bf8c      	ite	hi
 8008bb4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008bb8:	2400      	movls	r4, #0
 8008bba:	fa01 f000 	lsl.w	r0, r1, r0
 8008bbe:	40ec      	lsrs	r4, r5
 8008bc0:	ea40 0204 	orr.w	r2, r0, r4
 8008bc4:	e7dd      	b.n	8008b82 <__b2d+0x4a>
 8008bc6:	ea44 030c 	orr.w	r3, r4, ip
 8008bca:	460a      	mov	r2, r1
 8008bcc:	e7d9      	b.n	8008b82 <__b2d+0x4a>
 8008bce:	bf00      	nop
 8008bd0:	3ff00000 	.word	0x3ff00000

08008bd4 <__d2b>:
 8008bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bd8:	460e      	mov	r6, r1
 8008bda:	2101      	movs	r1, #1
 8008bdc:	ec59 8b10 	vmov	r8, r9, d0
 8008be0:	4615      	mov	r5, r2
 8008be2:	f7ff fcb5 	bl	8008550 <_Balloc>
 8008be6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008bea:	4607      	mov	r7, r0
 8008bec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bf0:	bb34      	cbnz	r4, 8008c40 <__d2b+0x6c>
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	f1b8 0300 	subs.w	r3, r8, #0
 8008bf8:	d027      	beq.n	8008c4a <__d2b+0x76>
 8008bfa:	a802      	add	r0, sp, #8
 8008bfc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008c00:	f7ff fd89 	bl	8008716 <__lo0bits>
 8008c04:	9900      	ldr	r1, [sp, #0]
 8008c06:	b1f0      	cbz	r0, 8008c46 <__d2b+0x72>
 8008c08:	9a01      	ldr	r2, [sp, #4]
 8008c0a:	f1c0 0320 	rsb	r3, r0, #32
 8008c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c12:	430b      	orrs	r3, r1
 8008c14:	40c2      	lsrs	r2, r0
 8008c16:	617b      	str	r3, [r7, #20]
 8008c18:	9201      	str	r2, [sp, #4]
 8008c1a:	9b01      	ldr	r3, [sp, #4]
 8008c1c:	61bb      	str	r3, [r7, #24]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	bf14      	ite	ne
 8008c22:	2102      	movne	r1, #2
 8008c24:	2101      	moveq	r1, #1
 8008c26:	6139      	str	r1, [r7, #16]
 8008c28:	b1c4      	cbz	r4, 8008c5c <__d2b+0x88>
 8008c2a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008c2e:	4404      	add	r4, r0
 8008c30:	6034      	str	r4, [r6, #0]
 8008c32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c36:	6028      	str	r0, [r5, #0]
 8008c38:	4638      	mov	r0, r7
 8008c3a:	b003      	add	sp, #12
 8008c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c44:	e7d5      	b.n	8008bf2 <__d2b+0x1e>
 8008c46:	6179      	str	r1, [r7, #20]
 8008c48:	e7e7      	b.n	8008c1a <__d2b+0x46>
 8008c4a:	a801      	add	r0, sp, #4
 8008c4c:	f7ff fd63 	bl	8008716 <__lo0bits>
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	2101      	movs	r1, #1
 8008c56:	6139      	str	r1, [r7, #16]
 8008c58:	3020      	adds	r0, #32
 8008c5a:	e7e5      	b.n	8008c28 <__d2b+0x54>
 8008c5c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008c60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c64:	6030      	str	r0, [r6, #0]
 8008c66:	6918      	ldr	r0, [r3, #16]
 8008c68:	f7ff fd36 	bl	80086d8 <__hi0bits>
 8008c6c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c70:	e7e1      	b.n	8008c36 <__d2b+0x62>

08008c72 <__ratio>:
 8008c72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c76:	4688      	mov	r8, r1
 8008c78:	4669      	mov	r1, sp
 8008c7a:	4681      	mov	r9, r0
 8008c7c:	f7ff ff5c 	bl	8008b38 <__b2d>
 8008c80:	a901      	add	r1, sp, #4
 8008c82:	4640      	mov	r0, r8
 8008c84:	ec57 6b10 	vmov	r6, r7, d0
 8008c88:	f7ff ff56 	bl	8008b38 <__b2d>
 8008c8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c90:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008c94:	eba3 0c02 	sub.w	ip, r3, r2
 8008c98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c9c:	1a9b      	subs	r3, r3, r2
 8008c9e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ca2:	ec5b ab10 	vmov	sl, fp, d0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfce      	itee	gt
 8008caa:	463a      	movgt	r2, r7
 8008cac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008cb0:	465a      	movle	r2, fp
 8008cb2:	4659      	mov	r1, fp
 8008cb4:	463d      	mov	r5, r7
 8008cb6:	bfd4      	ite	le
 8008cb8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008cbc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	ee10 2a10 	vmov	r2, s0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f7f7 fdd7 	bl	800087c <__aeabi_ddiv>
 8008cce:	ec41 0b10 	vmov	d0, r0, r1
 8008cd2:	b003      	add	sp, #12
 8008cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cd8 <__copybits>:
 8008cd8:	3901      	subs	r1, #1
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	1149      	asrs	r1, r1, #5
 8008cde:	6914      	ldr	r4, [r2, #16]
 8008ce0:	3101      	adds	r1, #1
 8008ce2:	f102 0314 	add.w	r3, r2, #20
 8008ce6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008cea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008cee:	42a3      	cmp	r3, r4
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	d303      	bcc.n	8008cfc <__copybits+0x24>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	428a      	cmp	r2, r1
 8008cf8:	d305      	bcc.n	8008d06 <__copybits+0x2e>
 8008cfa:	bd10      	pop	{r4, pc}
 8008cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d00:	f840 2b04 	str.w	r2, [r0], #4
 8008d04:	e7f3      	b.n	8008cee <__copybits+0x16>
 8008d06:	f842 3b04 	str.w	r3, [r2], #4
 8008d0a:	e7f4      	b.n	8008cf6 <__copybits+0x1e>

08008d0c <__any_on>:
 8008d0c:	f100 0214 	add.w	r2, r0, #20
 8008d10:	6900      	ldr	r0, [r0, #16]
 8008d12:	114b      	asrs	r3, r1, #5
 8008d14:	4298      	cmp	r0, r3
 8008d16:	b510      	push	{r4, lr}
 8008d18:	db11      	blt.n	8008d3e <__any_on+0x32>
 8008d1a:	dd0a      	ble.n	8008d32 <__any_on+0x26>
 8008d1c:	f011 011f 	ands.w	r1, r1, #31
 8008d20:	d007      	beq.n	8008d32 <__any_on+0x26>
 8008d22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d26:	fa24 f001 	lsr.w	r0, r4, r1
 8008d2a:	fa00 f101 	lsl.w	r1, r0, r1
 8008d2e:	428c      	cmp	r4, r1
 8008d30:	d10b      	bne.n	8008d4a <__any_on+0x3e>
 8008d32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d803      	bhi.n	8008d42 <__any_on+0x36>
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	bd10      	pop	{r4, pc}
 8008d3e:	4603      	mov	r3, r0
 8008d40:	e7f7      	b.n	8008d32 <__any_on+0x26>
 8008d42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d46:	2900      	cmp	r1, #0
 8008d48:	d0f5      	beq.n	8008d36 <__any_on+0x2a>
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	e7f6      	b.n	8008d3c <__any_on+0x30>

08008d4e <_calloc_r>:
 8008d4e:	b538      	push	{r3, r4, r5, lr}
 8008d50:	fb02 f401 	mul.w	r4, r2, r1
 8008d54:	4621      	mov	r1, r4
 8008d56:	f000 f857 	bl	8008e08 <_malloc_r>
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	b118      	cbz	r0, 8008d66 <_calloc_r+0x18>
 8008d5e:	4622      	mov	r2, r4
 8008d60:	2100      	movs	r1, #0
 8008d62:	f7fc fa16 	bl	8005192 <memset>
 8008d66:	4628      	mov	r0, r5
 8008d68:	bd38      	pop	{r3, r4, r5, pc}
	...

08008d6c <_free_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4605      	mov	r5, r0
 8008d70:	2900      	cmp	r1, #0
 8008d72:	d045      	beq.n	8008e00 <_free_r+0x94>
 8008d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d78:	1f0c      	subs	r4, r1, #4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	bfb8      	it	lt
 8008d7e:	18e4      	addlt	r4, r4, r3
 8008d80:	f000 fc03 	bl	800958a <__malloc_lock>
 8008d84:	4a1f      	ldr	r2, [pc, #124]	; (8008e04 <_free_r+0x98>)
 8008d86:	6813      	ldr	r3, [r2, #0]
 8008d88:	4610      	mov	r0, r2
 8008d8a:	b933      	cbnz	r3, 8008d9a <_free_r+0x2e>
 8008d8c:	6063      	str	r3, [r4, #4]
 8008d8e:	6014      	str	r4, [r2, #0]
 8008d90:	4628      	mov	r0, r5
 8008d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d96:	f000 bbf9 	b.w	800958c <__malloc_unlock>
 8008d9a:	42a3      	cmp	r3, r4
 8008d9c:	d90c      	bls.n	8008db8 <_free_r+0x4c>
 8008d9e:	6821      	ldr	r1, [r4, #0]
 8008da0:	1862      	adds	r2, r4, r1
 8008da2:	4293      	cmp	r3, r2
 8008da4:	bf04      	itt	eq
 8008da6:	681a      	ldreq	r2, [r3, #0]
 8008da8:	685b      	ldreq	r3, [r3, #4]
 8008daa:	6063      	str	r3, [r4, #4]
 8008dac:	bf04      	itt	eq
 8008dae:	1852      	addeq	r2, r2, r1
 8008db0:	6022      	streq	r2, [r4, #0]
 8008db2:	6004      	str	r4, [r0, #0]
 8008db4:	e7ec      	b.n	8008d90 <_free_r+0x24>
 8008db6:	4613      	mov	r3, r2
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	b10a      	cbz	r2, 8008dc0 <_free_r+0x54>
 8008dbc:	42a2      	cmp	r2, r4
 8008dbe:	d9fa      	bls.n	8008db6 <_free_r+0x4a>
 8008dc0:	6819      	ldr	r1, [r3, #0]
 8008dc2:	1858      	adds	r0, r3, r1
 8008dc4:	42a0      	cmp	r0, r4
 8008dc6:	d10b      	bne.n	8008de0 <_free_r+0x74>
 8008dc8:	6820      	ldr	r0, [r4, #0]
 8008dca:	4401      	add	r1, r0
 8008dcc:	1858      	adds	r0, r3, r1
 8008dce:	4282      	cmp	r2, r0
 8008dd0:	6019      	str	r1, [r3, #0]
 8008dd2:	d1dd      	bne.n	8008d90 <_free_r+0x24>
 8008dd4:	6810      	ldr	r0, [r2, #0]
 8008dd6:	6852      	ldr	r2, [r2, #4]
 8008dd8:	605a      	str	r2, [r3, #4]
 8008dda:	4401      	add	r1, r0
 8008ddc:	6019      	str	r1, [r3, #0]
 8008dde:	e7d7      	b.n	8008d90 <_free_r+0x24>
 8008de0:	d902      	bls.n	8008de8 <_free_r+0x7c>
 8008de2:	230c      	movs	r3, #12
 8008de4:	602b      	str	r3, [r5, #0]
 8008de6:	e7d3      	b.n	8008d90 <_free_r+0x24>
 8008de8:	6820      	ldr	r0, [r4, #0]
 8008dea:	1821      	adds	r1, r4, r0
 8008dec:	428a      	cmp	r2, r1
 8008dee:	bf04      	itt	eq
 8008df0:	6811      	ldreq	r1, [r2, #0]
 8008df2:	6852      	ldreq	r2, [r2, #4]
 8008df4:	6062      	str	r2, [r4, #4]
 8008df6:	bf04      	itt	eq
 8008df8:	1809      	addeq	r1, r1, r0
 8008dfa:	6021      	streq	r1, [r4, #0]
 8008dfc:	605c      	str	r4, [r3, #4]
 8008dfe:	e7c7      	b.n	8008d90 <_free_r+0x24>
 8008e00:	bd38      	pop	{r3, r4, r5, pc}
 8008e02:	bf00      	nop
 8008e04:	2000027c 	.word	0x2000027c

08008e08 <_malloc_r>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	1ccd      	adds	r5, r1, #3
 8008e0c:	f025 0503 	bic.w	r5, r5, #3
 8008e10:	3508      	adds	r5, #8
 8008e12:	2d0c      	cmp	r5, #12
 8008e14:	bf38      	it	cc
 8008e16:	250c      	movcc	r5, #12
 8008e18:	2d00      	cmp	r5, #0
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	db01      	blt.n	8008e22 <_malloc_r+0x1a>
 8008e1e:	42a9      	cmp	r1, r5
 8008e20:	d903      	bls.n	8008e2a <_malloc_r+0x22>
 8008e22:	230c      	movs	r3, #12
 8008e24:	6033      	str	r3, [r6, #0]
 8008e26:	2000      	movs	r0, #0
 8008e28:	bd70      	pop	{r4, r5, r6, pc}
 8008e2a:	f000 fbae 	bl	800958a <__malloc_lock>
 8008e2e:	4a21      	ldr	r2, [pc, #132]	; (8008eb4 <_malloc_r+0xac>)
 8008e30:	6814      	ldr	r4, [r2, #0]
 8008e32:	4621      	mov	r1, r4
 8008e34:	b991      	cbnz	r1, 8008e5c <_malloc_r+0x54>
 8008e36:	4c20      	ldr	r4, [pc, #128]	; (8008eb8 <_malloc_r+0xb0>)
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	b91b      	cbnz	r3, 8008e44 <_malloc_r+0x3c>
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f000 facf 	bl	80093e0 <_sbrk_r>
 8008e42:	6020      	str	r0, [r4, #0]
 8008e44:	4629      	mov	r1, r5
 8008e46:	4630      	mov	r0, r6
 8008e48:	f000 faca 	bl	80093e0 <_sbrk_r>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d124      	bne.n	8008e9a <_malloc_r+0x92>
 8008e50:	230c      	movs	r3, #12
 8008e52:	6033      	str	r3, [r6, #0]
 8008e54:	4630      	mov	r0, r6
 8008e56:	f000 fb99 	bl	800958c <__malloc_unlock>
 8008e5a:	e7e4      	b.n	8008e26 <_malloc_r+0x1e>
 8008e5c:	680b      	ldr	r3, [r1, #0]
 8008e5e:	1b5b      	subs	r3, r3, r5
 8008e60:	d418      	bmi.n	8008e94 <_malloc_r+0x8c>
 8008e62:	2b0b      	cmp	r3, #11
 8008e64:	d90f      	bls.n	8008e86 <_malloc_r+0x7e>
 8008e66:	600b      	str	r3, [r1, #0]
 8008e68:	50cd      	str	r5, [r1, r3]
 8008e6a:	18cc      	adds	r4, r1, r3
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f000 fb8d 	bl	800958c <__malloc_unlock>
 8008e72:	f104 000b 	add.w	r0, r4, #11
 8008e76:	1d23      	adds	r3, r4, #4
 8008e78:	f020 0007 	bic.w	r0, r0, #7
 8008e7c:	1ac3      	subs	r3, r0, r3
 8008e7e:	d0d3      	beq.n	8008e28 <_malloc_r+0x20>
 8008e80:	425a      	negs	r2, r3
 8008e82:	50e2      	str	r2, [r4, r3]
 8008e84:	e7d0      	b.n	8008e28 <_malloc_r+0x20>
 8008e86:	428c      	cmp	r4, r1
 8008e88:	684b      	ldr	r3, [r1, #4]
 8008e8a:	bf16      	itet	ne
 8008e8c:	6063      	strne	r3, [r4, #4]
 8008e8e:	6013      	streq	r3, [r2, #0]
 8008e90:	460c      	movne	r4, r1
 8008e92:	e7eb      	b.n	8008e6c <_malloc_r+0x64>
 8008e94:	460c      	mov	r4, r1
 8008e96:	6849      	ldr	r1, [r1, #4]
 8008e98:	e7cc      	b.n	8008e34 <_malloc_r+0x2c>
 8008e9a:	1cc4      	adds	r4, r0, #3
 8008e9c:	f024 0403 	bic.w	r4, r4, #3
 8008ea0:	42a0      	cmp	r0, r4
 8008ea2:	d005      	beq.n	8008eb0 <_malloc_r+0xa8>
 8008ea4:	1a21      	subs	r1, r4, r0
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f000 fa9a 	bl	80093e0 <_sbrk_r>
 8008eac:	3001      	adds	r0, #1
 8008eae:	d0cf      	beq.n	8008e50 <_malloc_r+0x48>
 8008eb0:	6025      	str	r5, [r4, #0]
 8008eb2:	e7db      	b.n	8008e6c <_malloc_r+0x64>
 8008eb4:	2000027c 	.word	0x2000027c
 8008eb8:	20000280 	.word	0x20000280

08008ebc <__ssputs_r>:
 8008ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	688e      	ldr	r6, [r1, #8]
 8008ec2:	429e      	cmp	r6, r3
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	4690      	mov	r8, r2
 8008eca:	4699      	mov	r9, r3
 8008ecc:	d837      	bhi.n	8008f3e <__ssputs_r+0x82>
 8008ece:	898a      	ldrh	r2, [r1, #12]
 8008ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ed4:	d031      	beq.n	8008f3a <__ssputs_r+0x7e>
 8008ed6:	6825      	ldr	r5, [r4, #0]
 8008ed8:	6909      	ldr	r1, [r1, #16]
 8008eda:	1a6f      	subs	r7, r5, r1
 8008edc:	6965      	ldr	r5, [r4, #20]
 8008ede:	2302      	movs	r3, #2
 8008ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ee4:	fb95 f5f3 	sdiv	r5, r5, r3
 8008ee8:	f109 0301 	add.w	r3, r9, #1
 8008eec:	443b      	add	r3, r7
 8008eee:	429d      	cmp	r5, r3
 8008ef0:	bf38      	it	cc
 8008ef2:	461d      	movcc	r5, r3
 8008ef4:	0553      	lsls	r3, r2, #21
 8008ef6:	d530      	bpl.n	8008f5a <__ssputs_r+0x9e>
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f7ff ff85 	bl	8008e08 <_malloc_r>
 8008efe:	4606      	mov	r6, r0
 8008f00:	b950      	cbnz	r0, 8008f18 <__ssputs_r+0x5c>
 8008f02:	230c      	movs	r3, #12
 8008f04:	f8ca 3000 	str.w	r3, [sl]
 8008f08:	89a3      	ldrh	r3, [r4, #12]
 8008f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f0e:	81a3      	strh	r3, [r4, #12]
 8008f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f18:	463a      	mov	r2, r7
 8008f1a:	6921      	ldr	r1, [r4, #16]
 8008f1c:	f7fc f92e 	bl	800517c <memcpy>
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f2a:	81a3      	strh	r3, [r4, #12]
 8008f2c:	6126      	str	r6, [r4, #16]
 8008f2e:	6165      	str	r5, [r4, #20]
 8008f30:	443e      	add	r6, r7
 8008f32:	1bed      	subs	r5, r5, r7
 8008f34:	6026      	str	r6, [r4, #0]
 8008f36:	60a5      	str	r5, [r4, #8]
 8008f38:	464e      	mov	r6, r9
 8008f3a:	454e      	cmp	r6, r9
 8008f3c:	d900      	bls.n	8008f40 <__ssputs_r+0x84>
 8008f3e:	464e      	mov	r6, r9
 8008f40:	4632      	mov	r2, r6
 8008f42:	4641      	mov	r1, r8
 8008f44:	6820      	ldr	r0, [r4, #0]
 8008f46:	f000 fb07 	bl	8009558 <memmove>
 8008f4a:	68a3      	ldr	r3, [r4, #8]
 8008f4c:	1b9b      	subs	r3, r3, r6
 8008f4e:	60a3      	str	r3, [r4, #8]
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	441e      	add	r6, r3
 8008f54:	6026      	str	r6, [r4, #0]
 8008f56:	2000      	movs	r0, #0
 8008f58:	e7dc      	b.n	8008f14 <__ssputs_r+0x58>
 8008f5a:	462a      	mov	r2, r5
 8008f5c:	f000 fb17 	bl	800958e <_realloc_r>
 8008f60:	4606      	mov	r6, r0
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d1e2      	bne.n	8008f2c <__ssputs_r+0x70>
 8008f66:	6921      	ldr	r1, [r4, #16]
 8008f68:	4650      	mov	r0, sl
 8008f6a:	f7ff feff 	bl	8008d6c <_free_r>
 8008f6e:	e7c8      	b.n	8008f02 <__ssputs_r+0x46>

08008f70 <_svfiprintf_r>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	461d      	mov	r5, r3
 8008f76:	898b      	ldrh	r3, [r1, #12]
 8008f78:	061f      	lsls	r7, r3, #24
 8008f7a:	b09d      	sub	sp, #116	; 0x74
 8008f7c:	4680      	mov	r8, r0
 8008f7e:	460c      	mov	r4, r1
 8008f80:	4616      	mov	r6, r2
 8008f82:	d50f      	bpl.n	8008fa4 <_svfiprintf_r+0x34>
 8008f84:	690b      	ldr	r3, [r1, #16]
 8008f86:	b96b      	cbnz	r3, 8008fa4 <_svfiprintf_r+0x34>
 8008f88:	2140      	movs	r1, #64	; 0x40
 8008f8a:	f7ff ff3d 	bl	8008e08 <_malloc_r>
 8008f8e:	6020      	str	r0, [r4, #0]
 8008f90:	6120      	str	r0, [r4, #16]
 8008f92:	b928      	cbnz	r0, 8008fa0 <_svfiprintf_r+0x30>
 8008f94:	230c      	movs	r3, #12
 8008f96:	f8c8 3000 	str.w	r3, [r8]
 8008f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f9e:	e0c8      	b.n	8009132 <_svfiprintf_r+0x1c2>
 8008fa0:	2340      	movs	r3, #64	; 0x40
 8008fa2:	6163      	str	r3, [r4, #20]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa8:	2320      	movs	r3, #32
 8008faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fae:	2330      	movs	r3, #48	; 0x30
 8008fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fb4:	9503      	str	r5, [sp, #12]
 8008fb6:	f04f 0b01 	mov.w	fp, #1
 8008fba:	4637      	mov	r7, r6
 8008fbc:	463d      	mov	r5, r7
 8008fbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008fc2:	b10b      	cbz	r3, 8008fc8 <_svfiprintf_r+0x58>
 8008fc4:	2b25      	cmp	r3, #37	; 0x25
 8008fc6:	d13e      	bne.n	8009046 <_svfiprintf_r+0xd6>
 8008fc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8008fcc:	d00b      	beq.n	8008fe6 <_svfiprintf_r+0x76>
 8008fce:	4653      	mov	r3, sl
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4640      	mov	r0, r8
 8008fd6:	f7ff ff71 	bl	8008ebc <__ssputs_r>
 8008fda:	3001      	adds	r0, #1
 8008fdc:	f000 80a4 	beq.w	8009128 <_svfiprintf_r+0x1b8>
 8008fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe2:	4453      	add	r3, sl
 8008fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe6:	783b      	ldrb	r3, [r7, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 809d 	beq.w	8009128 <_svfiprintf_r+0x1b8>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	9307      	str	r3, [sp, #28]
 8008ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009000:	931a      	str	r3, [sp, #104]	; 0x68
 8009002:	462f      	mov	r7, r5
 8009004:	2205      	movs	r2, #5
 8009006:	f817 1b01 	ldrb.w	r1, [r7], #1
 800900a:	4850      	ldr	r0, [pc, #320]	; (800914c <_svfiprintf_r+0x1dc>)
 800900c:	f7f7 f900 	bl	8000210 <memchr>
 8009010:	9b04      	ldr	r3, [sp, #16]
 8009012:	b9d0      	cbnz	r0, 800904a <_svfiprintf_r+0xda>
 8009014:	06d9      	lsls	r1, r3, #27
 8009016:	bf44      	itt	mi
 8009018:	2220      	movmi	r2, #32
 800901a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800901e:	071a      	lsls	r2, r3, #28
 8009020:	bf44      	itt	mi
 8009022:	222b      	movmi	r2, #43	; 0x2b
 8009024:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009028:	782a      	ldrb	r2, [r5, #0]
 800902a:	2a2a      	cmp	r2, #42	; 0x2a
 800902c:	d015      	beq.n	800905a <_svfiprintf_r+0xea>
 800902e:	9a07      	ldr	r2, [sp, #28]
 8009030:	462f      	mov	r7, r5
 8009032:	2000      	movs	r0, #0
 8009034:	250a      	movs	r5, #10
 8009036:	4639      	mov	r1, r7
 8009038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800903c:	3b30      	subs	r3, #48	; 0x30
 800903e:	2b09      	cmp	r3, #9
 8009040:	d94d      	bls.n	80090de <_svfiprintf_r+0x16e>
 8009042:	b1b8      	cbz	r0, 8009074 <_svfiprintf_r+0x104>
 8009044:	e00f      	b.n	8009066 <_svfiprintf_r+0xf6>
 8009046:	462f      	mov	r7, r5
 8009048:	e7b8      	b.n	8008fbc <_svfiprintf_r+0x4c>
 800904a:	4a40      	ldr	r2, [pc, #256]	; (800914c <_svfiprintf_r+0x1dc>)
 800904c:	1a80      	subs	r0, r0, r2
 800904e:	fa0b f000 	lsl.w	r0, fp, r0
 8009052:	4318      	orrs	r0, r3
 8009054:	9004      	str	r0, [sp, #16]
 8009056:	463d      	mov	r5, r7
 8009058:	e7d3      	b.n	8009002 <_svfiprintf_r+0x92>
 800905a:	9a03      	ldr	r2, [sp, #12]
 800905c:	1d11      	adds	r1, r2, #4
 800905e:	6812      	ldr	r2, [r2, #0]
 8009060:	9103      	str	r1, [sp, #12]
 8009062:	2a00      	cmp	r2, #0
 8009064:	db01      	blt.n	800906a <_svfiprintf_r+0xfa>
 8009066:	9207      	str	r2, [sp, #28]
 8009068:	e004      	b.n	8009074 <_svfiprintf_r+0x104>
 800906a:	4252      	negs	r2, r2
 800906c:	f043 0302 	orr.w	r3, r3, #2
 8009070:	9207      	str	r2, [sp, #28]
 8009072:	9304      	str	r3, [sp, #16]
 8009074:	783b      	ldrb	r3, [r7, #0]
 8009076:	2b2e      	cmp	r3, #46	; 0x2e
 8009078:	d10c      	bne.n	8009094 <_svfiprintf_r+0x124>
 800907a:	787b      	ldrb	r3, [r7, #1]
 800907c:	2b2a      	cmp	r3, #42	; 0x2a
 800907e:	d133      	bne.n	80090e8 <_svfiprintf_r+0x178>
 8009080:	9b03      	ldr	r3, [sp, #12]
 8009082:	1d1a      	adds	r2, r3, #4
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	9203      	str	r2, [sp, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	bfb8      	it	lt
 800908c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009090:	3702      	adds	r7, #2
 8009092:	9305      	str	r3, [sp, #20]
 8009094:	4d2e      	ldr	r5, [pc, #184]	; (8009150 <_svfiprintf_r+0x1e0>)
 8009096:	7839      	ldrb	r1, [r7, #0]
 8009098:	2203      	movs	r2, #3
 800909a:	4628      	mov	r0, r5
 800909c:	f7f7 f8b8 	bl	8000210 <memchr>
 80090a0:	b138      	cbz	r0, 80090b2 <_svfiprintf_r+0x142>
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	1b40      	subs	r0, r0, r5
 80090a6:	fa03 f000 	lsl.w	r0, r3, r0
 80090aa:	9b04      	ldr	r3, [sp, #16]
 80090ac:	4303      	orrs	r3, r0
 80090ae:	3701      	adds	r7, #1
 80090b0:	9304      	str	r3, [sp, #16]
 80090b2:	7839      	ldrb	r1, [r7, #0]
 80090b4:	4827      	ldr	r0, [pc, #156]	; (8009154 <_svfiprintf_r+0x1e4>)
 80090b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ba:	2206      	movs	r2, #6
 80090bc:	1c7e      	adds	r6, r7, #1
 80090be:	f7f7 f8a7 	bl	8000210 <memchr>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d038      	beq.n	8009138 <_svfiprintf_r+0x1c8>
 80090c6:	4b24      	ldr	r3, [pc, #144]	; (8009158 <_svfiprintf_r+0x1e8>)
 80090c8:	bb13      	cbnz	r3, 8009110 <_svfiprintf_r+0x1a0>
 80090ca:	9b03      	ldr	r3, [sp, #12]
 80090cc:	3307      	adds	r3, #7
 80090ce:	f023 0307 	bic.w	r3, r3, #7
 80090d2:	3308      	adds	r3, #8
 80090d4:	9303      	str	r3, [sp, #12]
 80090d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d8:	444b      	add	r3, r9
 80090da:	9309      	str	r3, [sp, #36]	; 0x24
 80090dc:	e76d      	b.n	8008fba <_svfiprintf_r+0x4a>
 80090de:	fb05 3202 	mla	r2, r5, r2, r3
 80090e2:	2001      	movs	r0, #1
 80090e4:	460f      	mov	r7, r1
 80090e6:	e7a6      	b.n	8009036 <_svfiprintf_r+0xc6>
 80090e8:	2300      	movs	r3, #0
 80090ea:	3701      	adds	r7, #1
 80090ec:	9305      	str	r3, [sp, #20]
 80090ee:	4619      	mov	r1, r3
 80090f0:	250a      	movs	r5, #10
 80090f2:	4638      	mov	r0, r7
 80090f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f8:	3a30      	subs	r2, #48	; 0x30
 80090fa:	2a09      	cmp	r2, #9
 80090fc:	d903      	bls.n	8009106 <_svfiprintf_r+0x196>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0c8      	beq.n	8009094 <_svfiprintf_r+0x124>
 8009102:	9105      	str	r1, [sp, #20]
 8009104:	e7c6      	b.n	8009094 <_svfiprintf_r+0x124>
 8009106:	fb05 2101 	mla	r1, r5, r1, r2
 800910a:	2301      	movs	r3, #1
 800910c:	4607      	mov	r7, r0
 800910e:	e7f0      	b.n	80090f2 <_svfiprintf_r+0x182>
 8009110:	ab03      	add	r3, sp, #12
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	4622      	mov	r2, r4
 8009116:	4b11      	ldr	r3, [pc, #68]	; (800915c <_svfiprintf_r+0x1ec>)
 8009118:	a904      	add	r1, sp, #16
 800911a:	4640      	mov	r0, r8
 800911c:	f7fc f8d6 	bl	80052cc <_printf_float>
 8009120:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009124:	4681      	mov	r9, r0
 8009126:	d1d6      	bne.n	80090d6 <_svfiprintf_r+0x166>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	065b      	lsls	r3, r3, #25
 800912c:	f53f af35 	bmi.w	8008f9a <_svfiprintf_r+0x2a>
 8009130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009132:	b01d      	add	sp, #116	; 0x74
 8009134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009138:	ab03      	add	r3, sp, #12
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	4622      	mov	r2, r4
 800913e:	4b07      	ldr	r3, [pc, #28]	; (800915c <_svfiprintf_r+0x1ec>)
 8009140:	a904      	add	r1, sp, #16
 8009142:	4640      	mov	r0, r8
 8009144:	f7fc fb78 	bl	8005838 <_printf_i>
 8009148:	e7ea      	b.n	8009120 <_svfiprintf_r+0x1b0>
 800914a:	bf00      	nop
 800914c:	08009db4 	.word	0x08009db4
 8009150:	08009dba 	.word	0x08009dba
 8009154:	08009dbe 	.word	0x08009dbe
 8009158:	080052cd 	.word	0x080052cd
 800915c:	08008ebd 	.word	0x08008ebd

08009160 <__sfputc_r>:
 8009160:	6893      	ldr	r3, [r2, #8]
 8009162:	3b01      	subs	r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	b410      	push	{r4}
 8009168:	6093      	str	r3, [r2, #8]
 800916a:	da08      	bge.n	800917e <__sfputc_r+0x1e>
 800916c:	6994      	ldr	r4, [r2, #24]
 800916e:	42a3      	cmp	r3, r4
 8009170:	db01      	blt.n	8009176 <__sfputc_r+0x16>
 8009172:	290a      	cmp	r1, #10
 8009174:	d103      	bne.n	800917e <__sfputc_r+0x1e>
 8009176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800917a:	f7fd bdb9 	b.w	8006cf0 <__swbuf_r>
 800917e:	6813      	ldr	r3, [r2, #0]
 8009180:	1c58      	adds	r0, r3, #1
 8009182:	6010      	str	r0, [r2, #0]
 8009184:	7019      	strb	r1, [r3, #0]
 8009186:	4608      	mov	r0, r1
 8009188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800918c:	4770      	bx	lr

0800918e <__sfputs_r>:
 800918e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009190:	4606      	mov	r6, r0
 8009192:	460f      	mov	r7, r1
 8009194:	4614      	mov	r4, r2
 8009196:	18d5      	adds	r5, r2, r3
 8009198:	42ac      	cmp	r4, r5
 800919a:	d101      	bne.n	80091a0 <__sfputs_r+0x12>
 800919c:	2000      	movs	r0, #0
 800919e:	e007      	b.n	80091b0 <__sfputs_r+0x22>
 80091a0:	463a      	mov	r2, r7
 80091a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7ff ffda 	bl	8009160 <__sfputc_r>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d1f3      	bne.n	8009198 <__sfputs_r+0xa>
 80091b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091b4 <_vfiprintf_r>:
 80091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b8:	460c      	mov	r4, r1
 80091ba:	b09d      	sub	sp, #116	; 0x74
 80091bc:	4617      	mov	r7, r2
 80091be:	461d      	mov	r5, r3
 80091c0:	4606      	mov	r6, r0
 80091c2:	b118      	cbz	r0, 80091cc <_vfiprintf_r+0x18>
 80091c4:	6983      	ldr	r3, [r0, #24]
 80091c6:	b90b      	cbnz	r3, 80091cc <_vfiprintf_r+0x18>
 80091c8:	f7fe fd96 	bl	8007cf8 <__sinit>
 80091cc:	4b7c      	ldr	r3, [pc, #496]	; (80093c0 <_vfiprintf_r+0x20c>)
 80091ce:	429c      	cmp	r4, r3
 80091d0:	d158      	bne.n	8009284 <_vfiprintf_r+0xd0>
 80091d2:	6874      	ldr	r4, [r6, #4]
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	0718      	lsls	r0, r3, #28
 80091d8:	d55e      	bpl.n	8009298 <_vfiprintf_r+0xe4>
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d05b      	beq.n	8009298 <_vfiprintf_r+0xe4>
 80091e0:	2300      	movs	r3, #0
 80091e2:	9309      	str	r3, [sp, #36]	; 0x24
 80091e4:	2320      	movs	r3, #32
 80091e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ea:	2330      	movs	r3, #48	; 0x30
 80091ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091f0:	9503      	str	r5, [sp, #12]
 80091f2:	f04f 0b01 	mov.w	fp, #1
 80091f6:	46b8      	mov	r8, r7
 80091f8:	4645      	mov	r5, r8
 80091fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80091fe:	b10b      	cbz	r3, 8009204 <_vfiprintf_r+0x50>
 8009200:	2b25      	cmp	r3, #37	; 0x25
 8009202:	d154      	bne.n	80092ae <_vfiprintf_r+0xfa>
 8009204:	ebb8 0a07 	subs.w	sl, r8, r7
 8009208:	d00b      	beq.n	8009222 <_vfiprintf_r+0x6e>
 800920a:	4653      	mov	r3, sl
 800920c:	463a      	mov	r2, r7
 800920e:	4621      	mov	r1, r4
 8009210:	4630      	mov	r0, r6
 8009212:	f7ff ffbc 	bl	800918e <__sfputs_r>
 8009216:	3001      	adds	r0, #1
 8009218:	f000 80c2 	beq.w	80093a0 <_vfiprintf_r+0x1ec>
 800921c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921e:	4453      	add	r3, sl
 8009220:	9309      	str	r3, [sp, #36]	; 0x24
 8009222:	f898 3000 	ldrb.w	r3, [r8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 80ba 	beq.w	80093a0 <_vfiprintf_r+0x1ec>
 800922c:	2300      	movs	r3, #0
 800922e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	9307      	str	r3, [sp, #28]
 800923a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800923e:	931a      	str	r3, [sp, #104]	; 0x68
 8009240:	46a8      	mov	r8, r5
 8009242:	2205      	movs	r2, #5
 8009244:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009248:	485e      	ldr	r0, [pc, #376]	; (80093c4 <_vfiprintf_r+0x210>)
 800924a:	f7f6 ffe1 	bl	8000210 <memchr>
 800924e:	9b04      	ldr	r3, [sp, #16]
 8009250:	bb78      	cbnz	r0, 80092b2 <_vfiprintf_r+0xfe>
 8009252:	06d9      	lsls	r1, r3, #27
 8009254:	bf44      	itt	mi
 8009256:	2220      	movmi	r2, #32
 8009258:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800925c:	071a      	lsls	r2, r3, #28
 800925e:	bf44      	itt	mi
 8009260:	222b      	movmi	r2, #43	; 0x2b
 8009262:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009266:	782a      	ldrb	r2, [r5, #0]
 8009268:	2a2a      	cmp	r2, #42	; 0x2a
 800926a:	d02a      	beq.n	80092c2 <_vfiprintf_r+0x10e>
 800926c:	9a07      	ldr	r2, [sp, #28]
 800926e:	46a8      	mov	r8, r5
 8009270:	2000      	movs	r0, #0
 8009272:	250a      	movs	r5, #10
 8009274:	4641      	mov	r1, r8
 8009276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800927a:	3b30      	subs	r3, #48	; 0x30
 800927c:	2b09      	cmp	r3, #9
 800927e:	d969      	bls.n	8009354 <_vfiprintf_r+0x1a0>
 8009280:	b360      	cbz	r0, 80092dc <_vfiprintf_r+0x128>
 8009282:	e024      	b.n	80092ce <_vfiprintf_r+0x11a>
 8009284:	4b50      	ldr	r3, [pc, #320]	; (80093c8 <_vfiprintf_r+0x214>)
 8009286:	429c      	cmp	r4, r3
 8009288:	d101      	bne.n	800928e <_vfiprintf_r+0xda>
 800928a:	68b4      	ldr	r4, [r6, #8]
 800928c:	e7a2      	b.n	80091d4 <_vfiprintf_r+0x20>
 800928e:	4b4f      	ldr	r3, [pc, #316]	; (80093cc <_vfiprintf_r+0x218>)
 8009290:	429c      	cmp	r4, r3
 8009292:	bf08      	it	eq
 8009294:	68f4      	ldreq	r4, [r6, #12]
 8009296:	e79d      	b.n	80091d4 <_vfiprintf_r+0x20>
 8009298:	4621      	mov	r1, r4
 800929a:	4630      	mov	r0, r6
 800929c:	f7fd fd88 	bl	8006db0 <__swsetup_r>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d09d      	beq.n	80091e0 <_vfiprintf_r+0x2c>
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092a8:	b01d      	add	sp, #116	; 0x74
 80092aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ae:	46a8      	mov	r8, r5
 80092b0:	e7a2      	b.n	80091f8 <_vfiprintf_r+0x44>
 80092b2:	4a44      	ldr	r2, [pc, #272]	; (80093c4 <_vfiprintf_r+0x210>)
 80092b4:	1a80      	subs	r0, r0, r2
 80092b6:	fa0b f000 	lsl.w	r0, fp, r0
 80092ba:	4318      	orrs	r0, r3
 80092bc:	9004      	str	r0, [sp, #16]
 80092be:	4645      	mov	r5, r8
 80092c0:	e7be      	b.n	8009240 <_vfiprintf_r+0x8c>
 80092c2:	9a03      	ldr	r2, [sp, #12]
 80092c4:	1d11      	adds	r1, r2, #4
 80092c6:	6812      	ldr	r2, [r2, #0]
 80092c8:	9103      	str	r1, [sp, #12]
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	db01      	blt.n	80092d2 <_vfiprintf_r+0x11e>
 80092ce:	9207      	str	r2, [sp, #28]
 80092d0:	e004      	b.n	80092dc <_vfiprintf_r+0x128>
 80092d2:	4252      	negs	r2, r2
 80092d4:	f043 0302 	orr.w	r3, r3, #2
 80092d8:	9207      	str	r2, [sp, #28]
 80092da:	9304      	str	r3, [sp, #16]
 80092dc:	f898 3000 	ldrb.w	r3, [r8]
 80092e0:	2b2e      	cmp	r3, #46	; 0x2e
 80092e2:	d10e      	bne.n	8009302 <_vfiprintf_r+0x14e>
 80092e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80092e8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ea:	d138      	bne.n	800935e <_vfiprintf_r+0x1aa>
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	9203      	str	r2, [sp, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bfb8      	it	lt
 80092f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092fc:	f108 0802 	add.w	r8, r8, #2
 8009300:	9305      	str	r3, [sp, #20]
 8009302:	4d33      	ldr	r5, [pc, #204]	; (80093d0 <_vfiprintf_r+0x21c>)
 8009304:	f898 1000 	ldrb.w	r1, [r8]
 8009308:	2203      	movs	r2, #3
 800930a:	4628      	mov	r0, r5
 800930c:	f7f6 ff80 	bl	8000210 <memchr>
 8009310:	b140      	cbz	r0, 8009324 <_vfiprintf_r+0x170>
 8009312:	2340      	movs	r3, #64	; 0x40
 8009314:	1b40      	subs	r0, r0, r5
 8009316:	fa03 f000 	lsl.w	r0, r3, r0
 800931a:	9b04      	ldr	r3, [sp, #16]
 800931c:	4303      	orrs	r3, r0
 800931e:	f108 0801 	add.w	r8, r8, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	f898 1000 	ldrb.w	r1, [r8]
 8009328:	482a      	ldr	r0, [pc, #168]	; (80093d4 <_vfiprintf_r+0x220>)
 800932a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800932e:	2206      	movs	r2, #6
 8009330:	f108 0701 	add.w	r7, r8, #1
 8009334:	f7f6 ff6c 	bl	8000210 <memchr>
 8009338:	2800      	cmp	r0, #0
 800933a:	d037      	beq.n	80093ac <_vfiprintf_r+0x1f8>
 800933c:	4b26      	ldr	r3, [pc, #152]	; (80093d8 <_vfiprintf_r+0x224>)
 800933e:	bb1b      	cbnz	r3, 8009388 <_vfiprintf_r+0x1d4>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	3307      	adds	r3, #7
 8009344:	f023 0307 	bic.w	r3, r3, #7
 8009348:	3308      	adds	r3, #8
 800934a:	9303      	str	r3, [sp, #12]
 800934c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934e:	444b      	add	r3, r9
 8009350:	9309      	str	r3, [sp, #36]	; 0x24
 8009352:	e750      	b.n	80091f6 <_vfiprintf_r+0x42>
 8009354:	fb05 3202 	mla	r2, r5, r2, r3
 8009358:	2001      	movs	r0, #1
 800935a:	4688      	mov	r8, r1
 800935c:	e78a      	b.n	8009274 <_vfiprintf_r+0xc0>
 800935e:	2300      	movs	r3, #0
 8009360:	f108 0801 	add.w	r8, r8, #1
 8009364:	9305      	str	r3, [sp, #20]
 8009366:	4619      	mov	r1, r3
 8009368:	250a      	movs	r5, #10
 800936a:	4640      	mov	r0, r8
 800936c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009370:	3a30      	subs	r2, #48	; 0x30
 8009372:	2a09      	cmp	r2, #9
 8009374:	d903      	bls.n	800937e <_vfiprintf_r+0x1ca>
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0c3      	beq.n	8009302 <_vfiprintf_r+0x14e>
 800937a:	9105      	str	r1, [sp, #20]
 800937c:	e7c1      	b.n	8009302 <_vfiprintf_r+0x14e>
 800937e:	fb05 2101 	mla	r1, r5, r1, r2
 8009382:	2301      	movs	r3, #1
 8009384:	4680      	mov	r8, r0
 8009386:	e7f0      	b.n	800936a <_vfiprintf_r+0x1b6>
 8009388:	ab03      	add	r3, sp, #12
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	4622      	mov	r2, r4
 800938e:	4b13      	ldr	r3, [pc, #76]	; (80093dc <_vfiprintf_r+0x228>)
 8009390:	a904      	add	r1, sp, #16
 8009392:	4630      	mov	r0, r6
 8009394:	f7fb ff9a 	bl	80052cc <_printf_float>
 8009398:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800939c:	4681      	mov	r9, r0
 800939e:	d1d5      	bne.n	800934c <_vfiprintf_r+0x198>
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	065b      	lsls	r3, r3, #25
 80093a4:	f53f af7e 	bmi.w	80092a4 <_vfiprintf_r+0xf0>
 80093a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093aa:	e77d      	b.n	80092a8 <_vfiprintf_r+0xf4>
 80093ac:	ab03      	add	r3, sp, #12
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	4622      	mov	r2, r4
 80093b2:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <_vfiprintf_r+0x228>)
 80093b4:	a904      	add	r1, sp, #16
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7fc fa3e 	bl	8005838 <_printf_i>
 80093bc:	e7ec      	b.n	8009398 <_vfiprintf_r+0x1e4>
 80093be:	bf00      	nop
 80093c0:	08009c78 	.word	0x08009c78
 80093c4:	08009db4 	.word	0x08009db4
 80093c8:	08009c98 	.word	0x08009c98
 80093cc:	08009c58 	.word	0x08009c58
 80093d0:	08009dba 	.word	0x08009dba
 80093d4:	08009dbe 	.word	0x08009dbe
 80093d8:	080052cd 	.word	0x080052cd
 80093dc:	0800918f 	.word	0x0800918f

080093e0 <_sbrk_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4c06      	ldr	r4, [pc, #24]	; (80093fc <_sbrk_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4605      	mov	r5, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	f7fb fc9a 	bl	8004d24 <_sbrk>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_sbrk_r+0x1a>
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_sbrk_r+0x1a>
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	20000a08 	.word	0x20000a08

08009400 <__sread>:
 8009400:	b510      	push	{r4, lr}
 8009402:	460c      	mov	r4, r1
 8009404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009408:	f000 f8e8 	bl	80095dc <_read_r>
 800940c:	2800      	cmp	r0, #0
 800940e:	bfab      	itete	ge
 8009410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009412:	89a3      	ldrhlt	r3, [r4, #12]
 8009414:	181b      	addge	r3, r3, r0
 8009416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800941a:	bfac      	ite	ge
 800941c:	6563      	strge	r3, [r4, #84]	; 0x54
 800941e:	81a3      	strhlt	r3, [r4, #12]
 8009420:	bd10      	pop	{r4, pc}

08009422 <__swrite>:
 8009422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009426:	461f      	mov	r7, r3
 8009428:	898b      	ldrh	r3, [r1, #12]
 800942a:	05db      	lsls	r3, r3, #23
 800942c:	4605      	mov	r5, r0
 800942e:	460c      	mov	r4, r1
 8009430:	4616      	mov	r6, r2
 8009432:	d505      	bpl.n	8009440 <__swrite+0x1e>
 8009434:	2302      	movs	r3, #2
 8009436:	2200      	movs	r2, #0
 8009438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800943c:	f000 f87a 	bl	8009534 <_lseek_r>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800944a:	81a3      	strh	r3, [r4, #12]
 800944c:	4632      	mov	r2, r6
 800944e:	463b      	mov	r3, r7
 8009450:	4628      	mov	r0, r5
 8009452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009456:	f000 b829 	b.w	80094ac <_write_r>

0800945a <__sseek>:
 800945a:	b510      	push	{r4, lr}
 800945c:	460c      	mov	r4, r1
 800945e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009462:	f000 f867 	bl	8009534 <_lseek_r>
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	bf15      	itete	ne
 800946c:	6560      	strne	r0, [r4, #84]	; 0x54
 800946e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009476:	81a3      	strheq	r3, [r4, #12]
 8009478:	bf18      	it	ne
 800947a:	81a3      	strhne	r3, [r4, #12]
 800947c:	bd10      	pop	{r4, pc}

0800947e <__sclose>:
 800947e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009482:	f000 b825 	b.w	80094d0 <_close_r>

08009486 <strncmp>:
 8009486:	b510      	push	{r4, lr}
 8009488:	b16a      	cbz	r2, 80094a6 <strncmp+0x20>
 800948a:	3901      	subs	r1, #1
 800948c:	1884      	adds	r4, r0, r2
 800948e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009492:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009496:	4293      	cmp	r3, r2
 8009498:	d103      	bne.n	80094a2 <strncmp+0x1c>
 800949a:	42a0      	cmp	r0, r4
 800949c:	d001      	beq.n	80094a2 <strncmp+0x1c>
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1f5      	bne.n	800948e <strncmp+0x8>
 80094a2:	1a98      	subs	r0, r3, r2
 80094a4:	bd10      	pop	{r4, pc}
 80094a6:	4610      	mov	r0, r2
 80094a8:	e7fc      	b.n	80094a4 <strncmp+0x1e>
	...

080094ac <_write_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4c07      	ldr	r4, [pc, #28]	; (80094cc <_write_r+0x20>)
 80094b0:	4605      	mov	r5, r0
 80094b2:	4608      	mov	r0, r1
 80094b4:	4611      	mov	r1, r2
 80094b6:	2200      	movs	r2, #0
 80094b8:	6022      	str	r2, [r4, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f7fb fc18 	bl	8004cf0 <_write>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_write_r+0x1e>
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_write_r+0x1e>
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	20000a08 	.word	0x20000a08

080094d0 <_close_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4c06      	ldr	r4, [pc, #24]	; (80094ec <_close_r+0x1c>)
 80094d4:	2300      	movs	r3, #0
 80094d6:	4605      	mov	r5, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	f7fb fc16 	bl	8004d0c <_close>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_close_r+0x1a>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_close_r+0x1a>
 80094e8:	602b      	str	r3, [r5, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	20000a08 	.word	0x20000a08

080094f0 <_fstat_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4c07      	ldr	r4, [pc, #28]	; (8009510 <_fstat_r+0x20>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4605      	mov	r5, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	4611      	mov	r1, r2
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	f7fb fc08 	bl	8004d12 <_fstat>
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	d102      	bne.n	800950c <_fstat_r+0x1c>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	b103      	cbz	r3, 800950c <_fstat_r+0x1c>
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	bd38      	pop	{r3, r4, r5, pc}
 800950e:	bf00      	nop
 8009510:	20000a08 	.word	0x20000a08

08009514 <_isatty_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4c06      	ldr	r4, [pc, #24]	; (8009530 <_isatty_r+0x1c>)
 8009518:	2300      	movs	r3, #0
 800951a:	4605      	mov	r5, r0
 800951c:	4608      	mov	r0, r1
 800951e:	6023      	str	r3, [r4, #0]
 8009520:	f7fb fbfc 	bl	8004d1c <_isatty>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_isatty_r+0x1a>
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	b103      	cbz	r3, 800952e <_isatty_r+0x1a>
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	20000a08 	.word	0x20000a08

08009534 <_lseek_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4c07      	ldr	r4, [pc, #28]	; (8009554 <_lseek_r+0x20>)
 8009538:	4605      	mov	r5, r0
 800953a:	4608      	mov	r0, r1
 800953c:	4611      	mov	r1, r2
 800953e:	2200      	movs	r2, #0
 8009540:	6022      	str	r2, [r4, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	f7fb fbec 	bl	8004d20 <_lseek>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_lseek_r+0x1e>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	b103      	cbz	r3, 8009552 <_lseek_r+0x1e>
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	20000a08 	.word	0x20000a08

08009558 <memmove>:
 8009558:	4288      	cmp	r0, r1
 800955a:	b510      	push	{r4, lr}
 800955c:	eb01 0302 	add.w	r3, r1, r2
 8009560:	d807      	bhi.n	8009572 <memmove+0x1a>
 8009562:	1e42      	subs	r2, r0, #1
 8009564:	4299      	cmp	r1, r3
 8009566:	d00a      	beq.n	800957e <memmove+0x26>
 8009568:	f811 4b01 	ldrb.w	r4, [r1], #1
 800956c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009570:	e7f8      	b.n	8009564 <memmove+0xc>
 8009572:	4283      	cmp	r3, r0
 8009574:	d9f5      	bls.n	8009562 <memmove+0xa>
 8009576:	1881      	adds	r1, r0, r2
 8009578:	1ad2      	subs	r2, r2, r3
 800957a:	42d3      	cmn	r3, r2
 800957c:	d100      	bne.n	8009580 <memmove+0x28>
 800957e:	bd10      	pop	{r4, pc}
 8009580:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009584:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009588:	e7f7      	b.n	800957a <memmove+0x22>

0800958a <__malloc_lock>:
 800958a:	4770      	bx	lr

0800958c <__malloc_unlock>:
 800958c:	4770      	bx	lr

0800958e <_realloc_r>:
 800958e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009590:	4607      	mov	r7, r0
 8009592:	4614      	mov	r4, r2
 8009594:	460e      	mov	r6, r1
 8009596:	b921      	cbnz	r1, 80095a2 <_realloc_r+0x14>
 8009598:	4611      	mov	r1, r2
 800959a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800959e:	f7ff bc33 	b.w	8008e08 <_malloc_r>
 80095a2:	b922      	cbnz	r2, 80095ae <_realloc_r+0x20>
 80095a4:	f7ff fbe2 	bl	8008d6c <_free_r>
 80095a8:	4625      	mov	r5, r4
 80095aa:	4628      	mov	r0, r5
 80095ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ae:	f000 f827 	bl	8009600 <_malloc_usable_size_r>
 80095b2:	42a0      	cmp	r0, r4
 80095b4:	d20f      	bcs.n	80095d6 <_realloc_r+0x48>
 80095b6:	4621      	mov	r1, r4
 80095b8:	4638      	mov	r0, r7
 80095ba:	f7ff fc25 	bl	8008e08 <_malloc_r>
 80095be:	4605      	mov	r5, r0
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d0f2      	beq.n	80095aa <_realloc_r+0x1c>
 80095c4:	4631      	mov	r1, r6
 80095c6:	4622      	mov	r2, r4
 80095c8:	f7fb fdd8 	bl	800517c <memcpy>
 80095cc:	4631      	mov	r1, r6
 80095ce:	4638      	mov	r0, r7
 80095d0:	f7ff fbcc 	bl	8008d6c <_free_r>
 80095d4:	e7e9      	b.n	80095aa <_realloc_r+0x1c>
 80095d6:	4635      	mov	r5, r6
 80095d8:	e7e7      	b.n	80095aa <_realloc_r+0x1c>
	...

080095dc <_read_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4c07      	ldr	r4, [pc, #28]	; (80095fc <_read_r+0x20>)
 80095e0:	4605      	mov	r5, r0
 80095e2:	4608      	mov	r0, r1
 80095e4:	4611      	mov	r1, r2
 80095e6:	2200      	movs	r2, #0
 80095e8:	6022      	str	r2, [r4, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	f7fb fb72 	bl	8004cd4 <_read>
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d102      	bne.n	80095fa <_read_r+0x1e>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	b103      	cbz	r3, 80095fa <_read_r+0x1e>
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	20000a08 	.word	0x20000a08

08009600 <_malloc_usable_size_r>:
 8009600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009604:	1f18      	subs	r0, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	bfbc      	itt	lt
 800960a:	580b      	ldrlt	r3, [r1, r0]
 800960c:	18c0      	addlt	r0, r0, r3
 800960e:	4770      	bx	lr

08009610 <_init>:
 8009610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009612:	bf00      	nop
 8009614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009616:	bc08      	pop	{r3}
 8009618:	469e      	mov	lr, r3
 800961a:	4770      	bx	lr

0800961c <_fini>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	bf00      	nop
 8009620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009622:	bc08      	pop	{r3}
 8009624:	469e      	mov	lr, r3
 8009626:	4770      	bx	lr
