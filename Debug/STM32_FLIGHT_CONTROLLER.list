
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08007a58  08007a58  00017a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d90  08007d90  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d98  08007d98  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08007da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  20000208  08007fa8  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  08007fa8  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c48a  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b32  00000000  00000000  0003c6c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000fd0f  00000000  00000000  000401f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001498  00000000  00000000  0004ff08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001450  00000000  00000000  000513a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000196e0  00000000  00000000  000527f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000133a0  00000000  00000000  0006bed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000945a9  00000000  00000000  0007f270  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00113819  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047b0  00000000  00000000  00113894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a3c 	.word	0x08007a3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08007a3c 	.word	0x08007a3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 8000f98:	ee70 0a60 	vsub.f32	s1, s0, s1
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <pid_calculate_roll+0xac>)
 8000f9e:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <pid_calculate_roll+0xb0>)
 8000fa4:	edd3 6a00 	vldr	s13, [r3]
 8000fa8:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <pid_calculate_roll+0xb4>)
 8000fae:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <pid_calculate_roll+0xb8>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8000fbc:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001054 <pid_calculate_roll+0xbc>
 8000fc0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <pid_calculate_roll+0xc0>)
 8000fc6:	ed93 7a00 	vldr	s14, [r3]
 8000fca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fce:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <pid_calculate_roll+0xc4>)
 8000fd4:	ed93 6a00 	vldr	s12, [r3]
 8000fd8:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8000fdc:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8000fe0:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <pid_calculate_roll+0xc8>)
 8000fe2:	ed92 6a00 	vldr	s12, [r2]
 8000fe6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000fea:	4a1e      	ldr	r2, [pc, #120]	; (8001064 <pid_calculate_roll+0xcc>)
 8000fec:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8000ff0:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8000ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <pid_calculate_roll+0xd0>)
 8000ffe:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <pid_calculate_roll+0xd4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	425a      	negs	r2, r3
 8001008:	ee07 2a10 	vmov	s14, r2
 800100c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	d40c      	bmi.n	8001034 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 800101a:	ee07 3a10 	vmov	s14, r3
 800101e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	dd06      	ble.n	800103a <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <pid_calculate_roll+0xd0>)
 800102e:	ed83 7a00 	vstr	s14, [r3]
 8001032:	e002      	b.n	800103a <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <pid_calculate_roll+0xd0>)
 8001036:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <pid_calculate_roll+0xd0>)
 800103c:	ed93 0a00 	vldr	s0, [r3]
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000230 	.word	0x20000230
 8001048:	20000018 	.word	0x20000018
 800104c:	20000360 	.word	0x20000360
 8001050:	20000014 	.word	0x20000014
 8001054:	3b012912 	.word	0x3b012912
 8001058:	2000036c 	.word	0x2000036c
 800105c:	20000234 	.word	0x20000234
 8001060:	20000010 	.word	0x20000010
 8001064:	2000034c 	.word	0x2000034c
 8001068:	20000238 	.word	0x20000238
 800106c:	2000001c 	.word	0x2000001c

08001070 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <reset_pid_roll+0x14>)
 8001074:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <reset_pid_roll+0x18>)
 8001078:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <reset_pid_roll+0x1c>)
 800107c:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <reset_pid_roll+0x20>)
 8001080:	6013      	str	r3, [r2, #0]

}
 8001082:	4770      	bx	lr
 8001084:	20000360 	.word	0x20000360
 8001088:	2000036c 	.word	0x2000036c
 800108c:	2000034c 	.word	0x2000034c
 8001090:	20000238 	.word	0x20000238

08001094 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 8001094:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <pid_calculate_pitch+0xac>)
 800109a:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <pid_calculate_pitch+0xb0>)
 80010a0:	edd3 6a00 	vldr	s13, [r3]
 80010a4:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <pid_calculate_pitch+0xb4>)
 80010aa:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 80010ae:	4b27      	ldr	r3, [pc, #156]	; (800114c <pid_calculate_pitch+0xb8>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80010b8:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001150 <pid_calculate_pitch+0xbc>
 80010bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <pid_calculate_pitch+0xc0>)
 80010c2:	ed93 7a00 	vldr	s14, [r3]
 80010c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ca:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <pid_calculate_pitch+0xc4>)
 80010d0:	ed93 6a00 	vldr	s12, [r3]
 80010d4:	ee30 6ac6 	vsub.f32	s12, s1, s12
 80010d8:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80010dc:	4a1f      	ldr	r2, [pc, #124]	; (800115c <pid_calculate_pitch+0xc8>)
 80010de:	ed92 6a00 	vldr	s12, [r2]
 80010e2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80010e6:	4a1e      	ldr	r2, [pc, #120]	; (8001160 <pid_calculate_pitch+0xcc>)
 80010e8:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 80010ec:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 80010f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80010f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <pid_calculate_pitch+0xd0>)
 80010fa:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <pid_calculate_pitch+0xd4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	425a      	negs	r2, r3
 8001104:	ee07 2a10 	vmov	s14, r2
 8001108:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800110c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	d40c      	bmi.n	8001130 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8001116:	ee07 3a10 	vmov	s14, r3
 800111a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800111e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd06      	ble.n	8001136 <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <pid_calculate_pitch+0xd0>)
 800112a:	ed83 7a00 	vstr	s14, [r3]
 800112e:	e002      	b.n	8001136 <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <pid_calculate_pitch+0xd0>)
 8001132:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <pid_calculate_pitch+0xd0>)
 8001138:	ed93 0a00 	vldr	s0, [r3]
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000224 	.word	0x20000224
 8001144:	20000008 	.word	0x20000008
 8001148:	20000358 	.word	0x20000358
 800114c:	20000004 	.word	0x20000004
 8001150:	3b012912 	.word	0x3b012912
 8001154:	2000035c 	.word	0x2000035c
 8001158:	20000228 	.word	0x20000228
 800115c:	20000000 	.word	0x20000000
 8001160:	20000350 	.word	0x20000350
 8001164:	2000022c 	.word	0x2000022c
 8001168:	2000000c 	.word	0x2000000c

0800116c <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <reset_pid_pitch+0x14>)
 8001170:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <reset_pid_pitch+0x18>)
 8001174:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <reset_pid_pitch+0x1c>)
 8001178:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <reset_pid_pitch+0x20>)
 800117c:	6013      	str	r3, [r2, #0]

}
 800117e:	4770      	bx	lr
 8001180:	20000358 	.word	0x20000358
 8001184:	2000035c 	.word	0x2000035c
 8001188:	20000350 	.word	0x20000350
 800118c:	2000022c 	.word	0x2000022c

08001190 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = IMU_yaw_value - yaw_setpoint;
 8001190:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001194:	4b29      	ldr	r3, [pc, #164]	; (800123c <pid_calculate_yaw+0xac>)
 8001196:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <pid_calculate_yaw+0xb0>)
 800119c:	edd3 6a00 	vldr	s13, [r3]
 80011a0:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <pid_calculate_yaw+0xb4>)
 80011a6:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <pid_calculate_yaw+0xb8>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80011b4:	eddf 5a25 	vldr	s11, [pc, #148]	; 800124c <pid_calculate_yaw+0xbc>
 80011b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <pid_calculate_yaw+0xc0>)
 80011be:	ed93 7a00 	vldr	s14, [r3]
 80011c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c6:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <pid_calculate_yaw+0xc4>)
 80011cc:	ed93 6a00 	vldr	s12, [r3]
 80011d0:	ee30 6ac6 	vsub.f32	s12, s1, s12
 80011d4:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80011d8:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <pid_calculate_yaw+0xc8>)
 80011da:	ed92 6a00 	vldr	s12, [r2]
 80011de:	ee27 7a06 	vmul.f32	s14, s14, s12
 80011e2:	4a1e      	ldr	r2, [pc, #120]	; (800125c <pid_calculate_yaw+0xcc>)
 80011e4:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 80011e8:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 80011ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80011f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <pid_calculate_yaw+0xd0>)
 80011f6:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <pid_calculate_yaw+0xd4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	425a      	negs	r2, r3
 8001200:	ee07 2a10 	vmov	s14, r2
 8001204:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001210:	d40c      	bmi.n	800122c <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 8001212:	ee07 3a10 	vmov	s14, r3
 8001216:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800121a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	dd06      	ble.n	8001232 <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <pid_calculate_yaw+0xd0>)
 8001226:	ed83 7a00 	vstr	s14, [r3]
 800122a:	e002      	b.n	8001232 <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <pid_calculate_yaw+0xd0>)
 800122e:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <pid_calculate_yaw+0xd0>)
 8001234:	ed93 0a00 	vldr	s0, [r3]
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000023c 	.word	0x2000023c
 8001240:	20000028 	.word	0x20000028
 8001244:	20000368 	.word	0x20000368
 8001248:	20000024 	.word	0x20000024
 800124c:	3b012912 	.word	0x3b012912
 8001250:	20000364 	.word	0x20000364
 8001254:	20000240 	.word	0x20000240
 8001258:	20000020 	.word	0x20000020
 800125c:	20000354 	.word	0x20000354
 8001260:	20000244 	.word	0x20000244
 8001264:	2000002c 	.word	0x2000002c

08001268 <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <reset_pid_yaw+0x14>)
 800126c:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <reset_pid_yaw+0x18>)
 8001270:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <reset_pid_yaw+0x1c>)
 8001274:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <reset_pid_yaw+0x20>)
 8001278:	6013      	str	r3, [r2, #0]

}
 800127a:	4770      	bx	lr
 800127c:	20000368 	.word	0x20000368
 8001280:	20000364 	.word	0x20000364
 8001284:	20000354 	.word	0x20000354
 8001288:	20000244 	.word	0x20000244

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x30>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001296:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800129e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f81b 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f002 fc12 	bl	8003ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f002 fbe4 	bl	8003a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80012b8:	2000      	movs	r0, #0
 80012ba:	bd08      	pop	{r3, pc}
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_IncTick+0x10>)
 80012c2:	6811      	ldr	r1, [r2, #0]
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_IncTick+0x14>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	440b      	add	r3, r1
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000370 	.word	0x20000370
 80012d4:	20000030 	.word	0x20000030

080012d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012d8:	4b01      	ldr	r3, [pc, #4]	; (80012e0 <HAL_GetTick+0x8>)
 80012da:	6818      	ldr	r0, [r3, #0]
}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000370 	.word	0x20000370

080012e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	0200      	lsls	r0, r0, #8
 80012f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80012f8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80012fc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001300:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001308:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_NVIC_SetPriority+0x60>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001312:	f1c3 0407 	rsb	r4, r3, #7
 8001316:	2c04      	cmp	r4, #4
 8001318:	bf28      	it	cs
 800131a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131c:	1d1d      	adds	r5, r3, #4
 800131e:	2d06      	cmp	r5, #6
 8001320:	d918      	bls.n	8001354 <HAL_NVIC_SetPriority+0x4c>
 8001322:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001328:	fa05 f404 	lsl.w	r4, r5, r4
 800132c:	ea21 0104 	bic.w	r1, r1, r4
 8001330:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001332:	fa05 f303 	lsl.w	r3, r5, r3
 8001336:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800133c:	2800      	cmp	r0, #0
 800133e:	db0b      	blt.n	8001358 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	0109      	lsls	r1, r1, #4
 8001342:	b2c9      	uxtb	r1, r1
 8001344:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001348:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800134c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001350:	bc30      	pop	{r4, r5}
 8001352:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001354:	2300      	movs	r3, #0
 8001356:	e7e5      	b.n	8001324 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	f000 000f 	and.w	r0, r0, #15
 800135c:	0109      	lsls	r1, r1, #4
 800135e:	b2c9      	uxtb	r1, r1
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <HAL_NVIC_SetPriority+0x64>)
 8001362:	5419      	strb	r1, [r3, r0]
 8001364:	e7f4      	b.n	8001350 <HAL_NVIC_SetPriority+0x48>
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	e000ed14 	.word	0xe000ed14

08001370 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001370:	2800      	cmp	r0, #0
 8001372:	db07      	blt.n	8001384 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001374:	f000 021f 	and.w	r2, r0, #31
 8001378:	0940      	lsrs	r0, r0, #5
 800137a:	2301      	movs	r3, #1
 800137c:	4093      	lsls	r3, r2
 800137e:	4a02      	ldr	r2, [pc, #8]	; (8001388 <HAL_NVIC_EnableIRQ+0x18>)
 8001380:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800138c:	b168      	cbz	r0, 80013aa <HAL_CRC_Init+0x1e>
{
 800138e:	b510      	push	{r4, lr}
 8001390:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001392:	7943      	ldrb	r3, [r0, #5]
 8001394:	b12b      	cbz	r3, 80013a2 <HAL_CRC_Init+0x16>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001396:	2302      	movs	r3, #2
 8001398:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800139a:	2301      	movs	r3, #1
 800139c:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800139e:	2000      	movs	r0, #0
}
 80013a0:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80013a2:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80013a4:	f001 fff2 	bl	800338c <HAL_CRC_MspInit>
 80013a8:	e7f5      	b.n	8001396 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
}
 80013ac:	4770      	bx	lr

080013ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013ae:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013b0:	6805      	ldr	r5, [r0, #0]
 80013b2:	682c      	ldr	r4, [r5, #0]
 80013b4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80013b8:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013ba:	6804      	ldr	r4, [r0, #0]
 80013bc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013be:	6883      	ldr	r3, [r0, #8]
 80013c0:	2b40      	cmp	r3, #64	; 0x40
 80013c2:	d005      	beq.n	80013d0 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80013c4:	6803      	ldr	r3, [r0, #0]
 80013c6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80013c8:	6803      	ldr	r3, [r0, #0]
 80013ca:	60da      	str	r2, [r3, #12]
  }
}
 80013cc:	bc30      	pop	{r4, r5}
 80013ce:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80013d0:	6803      	ldr	r3, [r0, #0]
 80013d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80013d4:	6803      	ldr	r3, [r0, #0]
 80013d6:	60d9      	str	r1, [r3, #12]
 80013d8:	e7f8      	b.n	80013cc <DMA_SetConfig+0x1e>
	...

080013dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013dc:	6802      	ldr	r2, [r0, #0]
 80013de:	b2d3      	uxtb	r3, r2
 80013e0:	3b10      	subs	r3, #16
 80013e2:	490b      	ldr	r1, [pc, #44]	; (8001410 <DMA_CalcBaseAndBitshift+0x34>)
 80013e4:	fba1 1303 	umull	r1, r3, r1, r3
 80013e8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013ea:	490a      	ldr	r1, [pc, #40]	; (8001414 <DMA_CalcBaseAndBitshift+0x38>)
 80013ec:	5cc9      	ldrb	r1, [r1, r3]
 80013ee:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d806      	bhi.n	8001402 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013f4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80013f8:	f022 0203 	bic.w	r2, r2, #3
 80013fc:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80013fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001400:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001402:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8001406:	f022 0203 	bic.w	r2, r2, #3
 800140a:	3204      	adds	r2, #4
 800140c:	6582      	str	r2, [r0, #88]	; 0x58
 800140e:	e7f6      	b.n	80013fe <DMA_CalcBaseAndBitshift+0x22>
 8001410:	aaaaaaab 	.word	0xaaaaaaab
 8001414:	08007a58 	.word	0x08007a58

08001418 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001418:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800141a:	6982      	ldr	r2, [r0, #24]
 800141c:	b992      	cbnz	r2, 8001444 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800141e:	2b01      	cmp	r3, #1
 8001420:	d00a      	beq.n	8001438 <DMA_CheckFifoParam+0x20>
 8001422:	b11b      	cbz	r3, 800142c <DMA_CheckFifoParam+0x14>
 8001424:	2b02      	cmp	r3, #2
 8001426:	d001      	beq.n	800142c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001428:	2000      	movs	r0, #0
 800142a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800142c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800142e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001432:	d12c      	bne.n	800148e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001434:	2000      	movs	r0, #0
 8001436:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001438:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800143a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800143e:	d028      	beq.n	8001492 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001440:	2000      	movs	r0, #0
 8001442:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001444:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001448:	d005      	beq.n	8001456 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800144a:	2b02      	cmp	r3, #2
 800144c:	d929      	bls.n	80014a2 <DMA_CheckFifoParam+0x8a>
 800144e:	2b03      	cmp	r3, #3
 8001450:	d015      	beq.n	800147e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8001452:	2000      	movs	r0, #0
 8001454:	4770      	bx	lr
    switch (tmp)
 8001456:	2b03      	cmp	r3, #3
 8001458:	d803      	bhi.n	8001462 <DMA_CheckFifoParam+0x4a>
 800145a:	e8df f003 	tbb	[pc, r3]
 800145e:	041c      	.short	0x041c
 8001460:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8001462:	2000      	movs	r0, #0
 8001464:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001466:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001468:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800146c:	d115      	bne.n	800149a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800146e:	2000      	movs	r0, #0
 8001470:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001472:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001474:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001478:	d011      	beq.n	800149e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800147a:	2000      	movs	r0, #0
 800147c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800147e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001480:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001484:	d001      	beq.n	800148a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8001486:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001488:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800148a:	2000      	movs	r0, #0
 800148c:	4770      	bx	lr
        status = HAL_ERROR;
 800148e:	2001      	movs	r0, #1
 8001490:	4770      	bx	lr
        status = HAL_ERROR;
 8001492:	2001      	movs	r0, #1
 8001494:	4770      	bx	lr
      status = HAL_ERROR;
 8001496:	2001      	movs	r0, #1
 8001498:	4770      	bx	lr
        status = HAL_ERROR;
 800149a:	2001      	movs	r0, #1
 800149c:	4770      	bx	lr
        status = HAL_ERROR;
 800149e:	2001      	movs	r0, #1
 80014a0:	4770      	bx	lr
      status = HAL_ERROR;
 80014a2:	2001      	movs	r0, #1
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_DMA_Init>:
{
 80014a8:	b570      	push	{r4, r5, r6, lr}
 80014aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff ff14 	bl	80012d8 <HAL_GetTick>
  if(hdma == NULL)
 80014b0:	2c00      	cmp	r4, #0
 80014b2:	d05b      	beq.n	800156c <HAL_DMA_Init+0xc4>
 80014b4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80014b6:	2300      	movs	r3, #0
 80014b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80014bc:	2302      	movs	r3, #2
 80014be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80014c2:	6822      	ldr	r2, [r4, #0]
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	f012 0f01 	tst.w	r2, #1
 80014d4:	d00a      	beq.n	80014ec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d6:	f7ff feff 	bl	80012d8 <HAL_GetTick>
 80014da:	1b40      	subs	r0, r0, r5
 80014dc:	2805      	cmp	r0, #5
 80014de:	d9f5      	bls.n	80014cc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e0:	2320      	movs	r3, #32
 80014e2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014e4:	2003      	movs	r0, #3
 80014e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80014ec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014ee:	4820      	ldr	r0, [pc, #128]	; (8001570 <HAL_DMA_Init+0xc8>)
 80014f0:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f2:	6861      	ldr	r1, [r4, #4]
 80014f4:	68a2      	ldr	r2, [r4, #8]
 80014f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f8:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fa:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fc:	6921      	ldr	r1, [r4, #16]
 80014fe:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001500:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001502:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001504:	69a1      	ldr	r1, [r4, #24]
 8001506:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001508:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800150c:	6a21      	ldr	r1, [r4, #32]
 800150e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001510:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001512:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001514:	2904      	cmp	r1, #4
 8001516:	d01e      	beq.n	8001556 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001518:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800151a:	6826      	ldr	r6, [r4, #0]
 800151c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800151e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001524:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001526:	2b04      	cmp	r3, #4
 8001528:	d107      	bne.n	800153a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800152a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800152c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800152e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001530:	b11b      	cbz	r3, 800153a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff ff70 	bl	8001418 <DMA_CheckFifoParam>
 8001538:	b990      	cbnz	r0, 8001560 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800153a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff ff4d 	bl	80013dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001542:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001544:	233f      	movs	r3, #63	; 0x3f
 8001546:	4093      	lsls	r3, r2
 8001548:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154a:	2000      	movs	r0, #0
 800154c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800154e:	2301      	movs	r3, #1
 8001550:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001554:	e7c9      	b.n	80014ea <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001556:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001558:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800155a:	4301      	orrs	r1, r0
 800155c:	430a      	orrs	r2, r1
 800155e:	e7db      	b.n	8001518 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001560:	2340      	movs	r3, #64	; 0x40
 8001562:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001564:	2001      	movs	r0, #1
 8001566:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800156a:	e7be      	b.n	80014ea <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800156c:	2001      	movs	r0, #1
 800156e:	e7bc      	b.n	80014ea <HAL_DMA_Init+0x42>
 8001570:	f010803f 	.word	0xf010803f

08001574 <HAL_DMA_Start_IT>:
{
 8001574:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001576:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001578:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800157c:	2c01      	cmp	r4, #1
 800157e:	d031      	beq.n	80015e4 <HAL_DMA_Start_IT+0x70>
 8001580:	2401      	movs	r4, #1
 8001582:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001586:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800158a:	b2e4      	uxtb	r4, r4
 800158c:	2c01      	cmp	r4, #1
 800158e:	d004      	beq.n	800159a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8001590:	2300      	movs	r3, #0
 8001592:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001596:	2002      	movs	r0, #2
}
 8001598:	bd38      	pop	{r3, r4, r5, pc}
 800159a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800159c:	2002      	movs	r0, #2
 800159e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a2:	2000      	movs	r0, #0
 80015a4:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff ff01 	bl	80013ae <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015ae:	233f      	movs	r3, #63	; 0x3f
 80015b0:	4093      	lsls	r3, r2
 80015b2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015b4:	6822      	ldr	r2, [r4, #0]
 80015b6:	6813      	ldr	r3, [r2, #0]
 80015b8:	f043 0316 	orr.w	r3, r3, #22
 80015bc:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80015be:	6822      	ldr	r2, [r4, #0]
 80015c0:	6953      	ldr	r3, [r2, #20]
 80015c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c6:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80015c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ca:	b123      	cbz	r3, 80015d6 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 80015cc:	6822      	ldr	r2, [r4, #0]
 80015ce:	6813      	ldr	r3, [r2, #0]
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	6813      	ldr	r3, [r2, #0]
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015e0:	2000      	movs	r0, #0
 80015e2:	e7d9      	b.n	8001598 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80015e4:	2002      	movs	r0, #2
 80015e6:	e7d7      	b.n	8001598 <HAL_DMA_Start_IT+0x24>

080015e8 <HAL_DMA_Abort>:
{
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ec:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80015ee:	f7ff fe73 	bl	80012d8 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d006      	beq.n	800160a <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001600:	2300      	movs	r3, #0
 8001602:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001606:	2001      	movs	r0, #1
}
 8001608:	bd70      	pop	{r4, r5, r6, pc}
 800160a:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160c:	6822      	ldr	r2, [r4, #0]
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	f023 0316 	bic.w	r3, r3, #22
 8001614:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001616:	6822      	ldr	r2, [r4, #0]
 8001618:	6953      	ldr	r3, [r2, #20]
 800161a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800161e:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001622:	b1e3      	cbz	r3, 800165e <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001624:	6822      	ldr	r2, [r4, #0]
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	f023 0308 	bic.w	r3, r3, #8
 800162c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800162e:	6822      	ldr	r2, [r4, #0]
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f013 0f01 	tst.w	r3, #1
 8001640:	d011      	beq.n	8001666 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001642:	f7ff fe49 	bl	80012d8 <HAL_GetTick>
 8001646:	1b40      	subs	r0, r0, r5
 8001648:	2805      	cmp	r0, #5
 800164a:	d9f5      	bls.n	8001638 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800164c:	2320      	movs	r3, #32
 800164e:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8001650:	2300      	movs	r3, #0
 8001652:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001656:	2003      	movs	r0, #3
 8001658:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800165c:	e7d4      	b.n	8001608 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800165e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1df      	bne.n	8001624 <HAL_DMA_Abort+0x3c>
 8001664:	e7e3      	b.n	800162e <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001666:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001668:	233f      	movs	r3, #63	; 0x3f
 800166a:	4093      	lsls	r3, r2
 800166c:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 800166e:	2000      	movs	r0, #0
 8001670:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001674:	2301      	movs	r3, #1
 8001676:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800167a:	e7c5      	b.n	8001608 <HAL_DMA_Abort+0x20>

0800167c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800167c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d003      	beq.n	800168e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800168e:	2305      	movs	r3, #5
 8001690:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001694:	6802      	ldr	r2, [r0, #0]
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800169e:	2000      	movs	r0, #0
}
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_DMA_IRQHandler>:
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b083      	sub	sp, #12
 80016a8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016ae:	4b72      	ldr	r3, [pc, #456]	; (8001878 <HAL_DMA_IRQHandler+0x1d4>)
 80016b0:	681d      	ldr	r5, [r3, #0]
 80016b2:	4b72      	ldr	r3, [pc, #456]	; (800187c <HAL_DMA_IRQHandler+0x1d8>)
 80016b4:	fba3 3505 	umull	r3, r5, r3, r5
 80016b8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ba:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80016bc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016be:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80016c0:	2308      	movs	r3, #8
 80016c2:	4093      	lsls	r3, r2
 80016c4:	4233      	tst	r3, r6
 80016c6:	d010      	beq.n	80016ea <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016c8:	6803      	ldr	r3, [r0, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	f012 0f04 	tst.w	r2, #4
 80016d0:	d00b      	beq.n	80016ea <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	f022 0204 	bic.w	r2, r2, #4
 80016d8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016da:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80016dc:	2308      	movs	r3, #8
 80016de:	4093      	lsls	r3, r2
 80016e0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016ec:	2301      	movs	r3, #1
 80016ee:	4093      	lsls	r3, r2
 80016f0:	4233      	tst	r3, r6
 80016f2:	d009      	beq.n	8001708 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016f4:	6822      	ldr	r2, [r4, #0]
 80016f6:	6952      	ldr	r2, [r2, #20]
 80016f8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016fc:	d004      	beq.n	8001708 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016fe:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001702:	f043 0302 	orr.w	r3, r3, #2
 8001706:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001708:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800170a:	2304      	movs	r3, #4
 800170c:	4093      	lsls	r3, r2
 800170e:	4233      	tst	r3, r6
 8001710:	d009      	beq.n	8001726 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001712:	6822      	ldr	r2, [r4, #0]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	f012 0f02 	tst.w	r2, #2
 800171a:	d004      	beq.n	8001726 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800171c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800171e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001726:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001728:	2310      	movs	r3, #16
 800172a:	4093      	lsls	r3, r2
 800172c:	4233      	tst	r3, r6
 800172e:	d024      	beq.n	800177a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001730:	6822      	ldr	r2, [r4, #0]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	f012 0f08 	tst.w	r2, #8
 8001738:	d01f      	beq.n	800177a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800173a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001744:	d00d      	beq.n	8001762 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800174c:	d104      	bne.n	8001758 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800174e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001750:	b19b      	cbz	r3, 800177a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001752:	4620      	mov	r0, r4
 8001754:	4798      	blx	r3
 8001756:	e010      	b.n	800177a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001758:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800175a:	b173      	cbz	r3, 800177a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800175c:	4620      	mov	r0, r4
 800175e:	4798      	blx	r3
 8001760:	e00b      	b.n	800177a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001768:	d103      	bne.n	8001772 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f022 0208 	bic.w	r2, r2, #8
 8001770:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001774:	b10b      	cbz	r3, 800177a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001776:	4620      	mov	r0, r4
 8001778:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800177a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800177c:	2320      	movs	r3, #32
 800177e:	4093      	lsls	r3, r2
 8001780:	4233      	tst	r3, r6
 8001782:	d055      	beq.n	8001830 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001784:	6822      	ldr	r2, [r4, #0]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	f012 0f10 	tst.w	r2, #16
 800178c:	d050      	beq.n	8001830 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800178e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001790:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b05      	cmp	r3, #5
 8001798:	d00e      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80017a2:	d033      	beq.n	800180c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80017aa:	d12a      	bne.n	8001802 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80017ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d03e      	beq.n	8001830 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80017b2:	4620      	mov	r0, r4
 80017b4:	4798      	blx	r3
 80017b6:	e03b      	b.n	8001830 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017b8:	6822      	ldr	r2, [r4, #0]
 80017ba:	6813      	ldr	r3, [r2, #0]
 80017bc:	f023 0316 	bic.w	r3, r3, #22
 80017c0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017c2:	6822      	ldr	r2, [r4, #0]
 80017c4:	6953      	ldr	r3, [r2, #20]
 80017c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017ca:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ce:	b1a3      	cbz	r3, 80017fa <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d0:	6822      	ldr	r2, [r4, #0]
 80017d2:	6813      	ldr	r3, [r2, #0]
 80017d4:	f023 0308 	bic.w	r3, r3, #8
 80017d8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017dc:	233f      	movs	r3, #63	; 0x3f
 80017de:	4093      	lsls	r3, r2
 80017e0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80017e2:	2300      	movs	r3, #0
 80017e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80017ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d03f      	beq.n	8001874 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80017f4:	4620      	mov	r0, r4
 80017f6:	4798      	blx	r3
 80017f8:	e03c      	b.n	8001874 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e7      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x12c>
 8001800:	e7eb      	b.n	80017da <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001802:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001804:	b1a3      	cbz	r3, 8001830 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001806:	4620      	mov	r0, r4
 8001808:	4798      	blx	r3
 800180a:	e011      	b.n	8001830 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001812:	d109      	bne.n	8001828 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	f022 0210 	bic.w	r2, r2, #16
 800181a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800181c:	2300      	movs	r3, #0
 800181e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001822:	2301      	movs	r3, #1
 8001824:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001828:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800182a:	b10b      	cbz	r3, 8001830 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800182c:	4620      	mov	r0, r4
 800182e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001830:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001832:	b1fb      	cbz	r3, 8001874 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001834:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001836:	f013 0f01 	tst.w	r3, #1
 800183a:	d017      	beq.n	800186c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800183c:	2305      	movs	r3, #5
 800183e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	6813      	ldr	r3, [r2, #0]
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800184c:	9b01      	ldr	r3, [sp, #4]
 800184e:	3301      	adds	r3, #1
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	42ab      	cmp	r3, r5
 8001854:	d804      	bhi.n	8001860 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f013 0f01 	tst.w	r3, #1
 800185e:	d1f5      	bne.n	800184c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001860:	2300      	movs	r3, #0
 8001862:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001866:	2301      	movs	r3, #1
 8001868:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800186c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800186e:	b10b      	cbz	r3, 8001874 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001870:	4620      	mov	r0, r4
 8001872:	4798      	blx	r3
}
 8001874:	b003      	add	sp, #12
 8001876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001878:	20000034 	.word	0x20000034
 800187c:	1b4e81b5 	.word	0x1b4e81b5

08001880 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f013 0f10 	tst.w	r3, #16
 8001888:	d007      	beq.n	800189a <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800188a:	4a26      	ldr	r2, [pc, #152]	; (8001924 <FLASH_SetErrorCode+0xa4>)
 800188c:	69d3      	ldr	r3, [r2, #28]
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 8001896:	2210      	movs	r2, #16
 8001898:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f013 0f20 	tst.w	r3, #32
 80018a2:	d007      	beq.n	80018b4 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80018a4:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <FLASH_SetErrorCode+0xa4>)
 80018a6:	69d3      	ldr	r3, [r2, #28]
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 80018b0:	2220      	movs	r2, #32
 80018b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018bc:	d007      	beq.n	80018ce <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80018be:	4a19      	ldr	r2, [pc, #100]	; (8001924 <FLASH_SetErrorCode+0xa4>)
 80018c0:	69d3      	ldr	r3, [r2, #28]
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018d6:	d007      	beq.n	80018e8 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80018d8:	4a12      	ldr	r2, [pc, #72]	; (8001924 <FLASH_SetErrorCode+0xa4>)
 80018da:	69d3      	ldr	r3, [r2, #28]
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018f0:	d008      	beq.n	8001904 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <FLASH_SetErrorCode+0xa4>)
 80018f4:	69d3      	ldr	r3, [r2, #28]
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 80018fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001902:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f013 0f02 	tst.w	r3, #2
 800190c:	d007      	beq.n	800191e <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <FLASH_SetErrorCode+0xa4>)
 8001910:	69d3      	ldr	r3, [r2, #28]
 8001912:	f043 0320 	orr.w	r3, r3, #32
 8001916:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001918:	4b01      	ldr	r3, [pc, #4]	; (8001920 <FLASH_SetErrorCode+0xa0>)
 800191a:	2202      	movs	r2, #2
 800191c:	60da      	str	r2, [r3, #12]
  }
}
 800191e:	4770      	bx	lr
 8001920:	40023c00 	.word	0x40023c00
 8001924:	20000374 	.word	0x20000374

08001928 <HAL_FLASH_EndOfOperationCallback>:
}
 8001928:	4770      	bx	lr

0800192a <HAL_FLASH_OperationErrorCallback>:
}
 800192a:	4770      	bx	lr

0800192c <HAL_FLASH_IRQHandler>:
{
 800192c:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800192e:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <HAL_FLASH_IRQHandler+0xec>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8001936:	d013      	beq.n	8001960 <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d03b      	beq.n	80019ba <HAL_FLASH_IRQHandler+0x8e>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d03c      	beq.n	80019c6 <HAL_FLASH_IRQHandler+0x9a>
      addresstmp = pFlash.Address;
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 800194e:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 8001950:	f7ff ff96 	bl	8001880 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff ffe8 	bl	800192a <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_FLASH_IRQHandler+0xec>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f013 0f01 	tst.w	r3, #1
 8001968:	d013      	beq.n	8001992 <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_FLASH_IRQHandler+0xec>)
 800196c:	2201      	movs	r2, #1
 800196e:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	4293      	cmp	r3, r2
 8001978:	d028      	beq.n	80019cc <HAL_FLASH_IRQHandler+0xa0>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d041      	beq.n	8001a08 <HAL_FLASH_IRQHandler+0xdc>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 8001986:	6958      	ldr	r0, [r3, #20]
 8001988:	f7ff ffce 	bl	8001928 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800198c:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b97b      	cbnz	r3, 80019b8 <HAL_FLASH_IRQHandler+0x8c>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_FLASH_IRQHandler+0xec>)
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019a0:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80019a8:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80019b0:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 80019bc:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 80019be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	e7c4      	b.n	8001950 <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 80019c8:	691c      	ldr	r4, [r3, #16]
 80019ca:	e7c1      	b.n	8001950 <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	3a01      	subs	r2, #1
 80019d2:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	b15b      	cbz	r3, 80019f0 <HAL_FLASH_IRQHandler+0xc4>
        addresstmp = pFlash.Sector;
 80019d8:	4c10      	ldr	r4, [pc, #64]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 80019da:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80019dc:	f7ff ffa4 	bl	8001928 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 80019e0:	68e3      	ldr	r3, [r4, #12]
 80019e2:	3301      	adds	r3, #1
 80019e4:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 80019e6:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80019e8:	7a21      	ldrb	r1, [r4, #8]
 80019ea:	f000 f819 	bl	8001a20 <FLASH_Erase_Sector>
 80019ee:	e7d0      	b.n	8001992 <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 80019f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80019f6:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 80019fc:	f000 f83c 	bl	8001a78 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff ff91 	bl	8001928 <HAL_FLASH_EndOfOperationCallback>
 8001a06:	e7c4      	b.n	8001992 <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 8001a08:	f000 f836 	bl	8001a78 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_FLASH_IRQHandler+0xf0>)
 8001a0e:	6918      	ldr	r0, [r3, #16]
 8001a10:	f7ff ff8a 	bl	8001928 <HAL_FLASH_EndOfOperationCallback>
 8001a14:	e7ba      	b.n	800198c <HAL_FLASH_IRQHandler+0x60>
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00
 8001a1c:	20000374 	.word	0x20000374

08001a20 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001a20:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001a22:	b149      	cbz	r1, 8001a38 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001a24:	2901      	cmp	r1, #1
 8001a26:	d021      	beq.n	8001a6c <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001a28:	2902      	cmp	r1, #2
 8001a2a:	d002      	beq.n	8001a32 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001a2c:	f44f 7440 	mov.w	r4, #768	; 0x300
 8001a30:	e003      	b.n	8001a3a <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8001a32:	f44f 7400 	mov.w	r4, #512	; 0x200
 8001a36:	e000      	b.n	8001a3a <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8001a38:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <FLASH_Erase_Sector+0x54>)
 8001a3c:	6919      	ldr	r1, [r3, #16]
 8001a3e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001a42:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	4322      	orrs	r2, r4
 8001a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a50:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001a58:	f040 0002 	orr.w	r0, r0, #2
 8001a5c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a64:	611a      	str	r2, [r3, #16]
}
 8001a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a6a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001a6c:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001a70:	e7e3      	b.n	8001a3a <FLASH_Erase_Sector+0x1a>
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <FLASH_FlushCaches+0x5c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001a80:	d010      	beq.n	8001aa4 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <FLASH_FlushCaches+0x5c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a8a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a9a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <FLASH_FlushCaches+0x5c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001aac:	d010      	beq.n	8001ad0 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <FLASH_FlushCaches+0x5c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab6:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ac6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ace:	601a      	str	r2, [r3, #0]
  }
}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00

08001ad8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	f200 80c5 	bhi.w	8001c6a <HAL_GPIO_Init+0x192>
{
 8001ae0:	b4f0      	push	{r4, r5, r6, r7}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	e039      	b.n	8001b5a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001aea:	2200      	movs	r2, #0
 8001aec:	40b2      	lsls	r2, r6
 8001aee:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	3402      	adds	r4, #2
 8001af2:	4e5e      	ldr	r6, [pc, #376]	; (8001c6c <HAL_GPIO_Init+0x194>)
 8001af4:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af8:	4a5d      	ldr	r2, [pc, #372]	; (8001c70 <HAL_GPIO_Init+0x198>)
 8001afa:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	43ea      	mvns	r2, r5
 8001afe:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b02:	684f      	ldr	r7, [r1, #4]
 8001b04:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001b08:	d001      	beq.n	8001b0e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001b0a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001b0e:	4c58      	ldr	r4, [pc, #352]	; (8001c70 <HAL_GPIO_Init+0x198>)
 8001b10:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001b12:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b18:	684f      	ldr	r7, [r1, #4]
 8001b1a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001b1e:	d001      	beq.n	8001b24 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001b20:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001b24:	4c52      	ldr	r4, [pc, #328]	; (8001c70 <HAL_GPIO_Init+0x198>)
 8001b26:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b28:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2e:	684f      	ldr	r7, [r1, #4]
 8001b30:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001b34:	d001      	beq.n	8001b3a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001b36:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001b3a:	4c4d      	ldr	r4, [pc, #308]	; (8001c70 <HAL_GPIO_Init+0x198>)
 8001b3c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001b3e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b42:	684e      	ldr	r6, [r1, #4]
 8001b44:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001b48:	d001      	beq.n	8001b4e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001b4a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001b4e:	4c48      	ldr	r4, [pc, #288]	; (8001c70 <HAL_GPIO_Init+0x198>)
 8001b50:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	3301      	adds	r3, #1
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	f200 8085 	bhi.w	8001c64 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5e:	680c      	ldr	r4, [r1, #0]
 8001b60:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001b64:	42aa      	cmp	r2, r5
 8001b66:	d1f4      	bne.n	8001b52 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b68:	684c      	ldr	r4, [r1, #4]
 8001b6a:	2c02      	cmp	r4, #2
 8001b6c:	d001      	beq.n	8001b72 <HAL_GPIO_Init+0x9a>
 8001b6e:	2c12      	cmp	r4, #18
 8001b70:	d110      	bne.n	8001b94 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8001b72:	08de      	lsrs	r6, r3, #3
 8001b74:	3608      	adds	r6, #8
 8001b76:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	f003 0407 	and.w	r4, r3, #7
 8001b7e:	00a7      	lsls	r7, r4, #2
 8001b80:	240f      	movs	r4, #15
 8001b82:	40bc      	lsls	r4, r7
 8001b84:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b88:	690c      	ldr	r4, [r1, #16]
 8001b8a:	40bc      	lsls	r4, r7
 8001b8c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001b90:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001b94:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b96:	005f      	lsls	r7, r3, #1
 8001b98:	2603      	movs	r6, #3
 8001b9a:	40be      	lsls	r6, r7
 8001b9c:	43f6      	mvns	r6, r6
 8001b9e:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba2:	684c      	ldr	r4, [r1, #4]
 8001ba4:	f004 0403 	and.w	r4, r4, #3
 8001ba8:	40bc      	lsls	r4, r7
 8001baa:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001bae:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb0:	684c      	ldr	r4, [r1, #4]
 8001bb2:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8001bb6:	f1bc 0f01 	cmp.w	ip, #1
 8001bba:	d903      	bls.n	8001bc4 <HAL_GPIO_Init+0xec>
 8001bbc:	2c11      	cmp	r4, #17
 8001bbe:	d001      	beq.n	8001bc4 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc0:	2c12      	cmp	r4, #18
 8001bc2:	d110      	bne.n	8001be6 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8001bc4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc6:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bca:	68cc      	ldr	r4, [r1, #12]
 8001bcc:	40bc      	lsls	r4, r7
 8001bce:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8001bd2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bd4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd6:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bda:	684c      	ldr	r4, [r1, #4]
 8001bdc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001be0:	409c      	lsls	r4, r3
 8001be2:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8001be4:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001be6:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001be8:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bea:	688a      	ldr	r2, [r1, #8]
 8001bec:	40ba      	lsls	r2, r7
 8001bee:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8001bf0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf2:	684a      	ldr	r2, [r1, #4]
 8001bf4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001bf8:	d0ab      	beq.n	8001b52 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	9201      	str	r2, [sp, #4]
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_GPIO_Init+0x19c>)
 8001c00:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001c02:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001c06:	6454      	str	r4, [r2, #68]	; 0x44
 8001c08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c0a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c0e:	9201      	str	r2, [sp, #4]
 8001c10:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	089c      	lsrs	r4, r3, #2
 8001c14:	1ca6      	adds	r6, r4, #2
 8001c16:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <HAL_GPIO_Init+0x194>)
 8001c18:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	0096      	lsls	r6, r2, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	40b2      	lsls	r2, r6
 8001c26:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2a:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <HAL_GPIO_Init+0x1a0>)
 8001c2c:	4290      	cmp	r0, r2
 8001c2e:	f43f af5c 	beq.w	8001aea <HAL_GPIO_Init+0x12>
 8001c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c36:	4290      	cmp	r0, r2
 8001c38:	d00e      	beq.n	8001c58 <HAL_GPIO_Init+0x180>
 8001c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c3e:	4290      	cmp	r0, r2
 8001c40:	d00c      	beq.n	8001c5c <HAL_GPIO_Init+0x184>
 8001c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c46:	4290      	cmp	r0, r2
 8001c48:	d00a      	beq.n	8001c60 <HAL_GPIO_Init+0x188>
 8001c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c4e:	4290      	cmp	r0, r2
 8001c50:	f43f af49 	beq.w	8001ae6 <HAL_GPIO_Init+0xe>
 8001c54:	2207      	movs	r2, #7
 8001c56:	e749      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c58:	2201      	movs	r2, #1
 8001c5a:	e747      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	e745      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c60:	2203      	movs	r2, #3
 8001c62:	e743      	b.n	8001aec <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001c64:	b002      	add	sp, #8
 8001c66:	bcf0      	pop	{r4, r5, r6, r7}
 8001c68:	4770      	bx	lr
 8001c6a:	4770      	bx	lr
 8001c6c:	40013800 	.word	0x40013800
 8001c70:	40013c00 	.word	0x40013c00
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000

08001c7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c7c:	b912      	cbnz	r2, 8001c84 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7e:	0409      	lsls	r1, r1, #16
 8001c80:	6181      	str	r1, [r0, #24]
  }
}
 8001c82:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001c84:	6181      	str	r1, [r0, #24]
 8001c86:	4770      	bx	lr

08001c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c88:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	4203      	tst	r3, r0
 8001c90:	d100      	bne.n	8001c94 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001c92:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001c96:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c98:	f001 fe5e 	bl	8003958 <HAL_GPIO_EXTI_Callback>
}
 8001c9c:	e7f9      	b.n	8001c92 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001c9e:	bf00      	nop
 8001ca0:	40013c00 	.word	0x40013c00

08001ca4 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	f000 80be 	beq.w	8001e26 <HAL_I2C_Init+0x182>
{
 8001caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cac:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d06b      	beq.n	8001d8e <HAL_I2C_Init+0xea>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb6:	2324      	movs	r3, #36	; 0x24
 8001cb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cc6:	f000 fba7 	bl	8002418 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cca:	6862      	ldr	r2, [r4, #4]
 8001ccc:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <HAL_I2C_Init+0x18c>)
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d862      	bhi.n	8001d98 <HAL_I2C_Init+0xf4>
 8001cd2:	4b58      	ldr	r3, [pc, #352]	; (8001e34 <HAL_I2C_Init+0x190>)
 8001cd4:	4298      	cmp	r0, r3
 8001cd6:	bf8c      	ite	hi
 8001cd8:	2300      	movhi	r3, #0
 8001cda:	2301      	movls	r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 80a4 	bne.w	8001e2a <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ce2:	4b55      	ldr	r3, [pc, #340]	; (8001e38 <HAL_I2C_Init+0x194>)
 8001ce4:	fba3 2300 	umull	r2, r3, r3, r0
 8001ce8:	0c9b      	lsrs	r3, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cea:	6821      	ldr	r1, [r4, #0]
 8001cec:	684a      	ldr	r2, [r1, #4]
 8001cee:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cf6:	6825      	ldr	r5, [r4, #0]
 8001cf8:	6a2a      	ldr	r2, [r5, #32]
 8001cfa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001cfe:	6866      	ldr	r6, [r4, #4]
 8001d00:	494b      	ldr	r1, [pc, #300]	; (8001e30 <HAL_I2C_Init+0x18c>)
 8001d02:	428e      	cmp	r6, r1
 8001d04:	d84e      	bhi.n	8001da4 <HAL_I2C_Init+0x100>
 8001d06:	3301      	adds	r3, #1
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	622b      	str	r3, [r5, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d0c:	6825      	ldr	r5, [r4, #0]
 8001d0e:	69e9      	ldr	r1, [r5, #28]
 8001d10:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001d14:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001d18:	6863      	ldr	r3, [r4, #4]
 8001d1a:	4a45      	ldr	r2, [pc, #276]	; (8001e30 <HAL_I2C_Init+0x18c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d84b      	bhi.n	8001db8 <HAL_I2C_Init+0x114>
 8001d20:	3801      	subs	r0, #1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf38      	it	cc
 8001d32:	2304      	movcc	r3, #4
 8001d34:	430b      	orrs	r3, r1
 8001d36:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d38:	6821      	ldr	r1, [r4, #0]
 8001d3a:	680b      	ldr	r3, [r1, #0]
 8001d3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d40:	69e2      	ldr	r2, [r4, #28]
 8001d42:	6a20      	ldr	r0, [r4, #32]
 8001d44:	4302      	orrs	r2, r0
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d4a:	6821      	ldr	r1, [r4, #0]
 8001d4c:	688b      	ldr	r3, [r1, #8]
 8001d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d56:	6922      	ldr	r2, [r4, #16]
 8001d58:	68e0      	ldr	r0, [r4, #12]
 8001d5a:	4302      	orrs	r2, r0
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d60:	6821      	ldr	r1, [r4, #0]
 8001d62:	68cb      	ldr	r3, [r1, #12]
 8001d64:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d68:	6962      	ldr	r2, [r4, #20]
 8001d6a:	69a0      	ldr	r0, [r4, #24]
 8001d6c:	4302      	orrs	r2, r0
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d72:	6822      	ldr	r2, [r4, #0]
 8001d74:	6813      	ldr	r3, [r2, #0]
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d80:	2320      	movs	r3, #32
 8001d82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d86:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 8001d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001d8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001d92:	f001 fc09 	bl	80035a8 <HAL_I2C_MspInit>
 8001d96:	e78e      	b.n	8001cb6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <HAL_I2C_Init+0x198>)
 8001d9a:	4298      	cmp	r0, r3
 8001d9c:	bf8c      	ite	hi
 8001d9e:	2300      	movhi	r3, #0
 8001da0:	2301      	movls	r3, #1
 8001da2:	e79b      	b.n	8001cdc <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001da4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4924      	ldr	r1, [pc, #144]	; (8001e40 <HAL_I2C_Init+0x19c>)
 8001dae:	fba1 1303 	umull	r1, r3, r1, r3
 8001db2:	099b      	lsrs	r3, r3, #6
 8001db4:	3301      	adds	r3, #1
 8001db6:	e7a7      	b.n	8001d08 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001db8:	68a2      	ldr	r2, [r4, #8]
 8001dba:	b9ba      	cbnz	r2, 8001dec <HAL_I2C_Init+0x148>
 8001dbc:	1e46      	subs	r6, r0, #1
 8001dbe:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001dc2:	fbb6 f6f7 	udiv	r6, r6, r7
 8001dc6:	3601      	adds	r6, #1
 8001dc8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001dcc:	fab6 f686 	clz	r6, r6
 8001dd0:	0976      	lsrs	r6, r6, #5
 8001dd2:	bb36      	cbnz	r6, 8001e22 <HAL_I2C_Init+0x17e>
 8001dd4:	b9c2      	cbnz	r2, 8001e08 <HAL_I2C_Init+0x164>
 8001dd6:	3801      	subs	r0, #1
 8001dd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de0:	3301      	adds	r3, #1
 8001de2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001de6:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001dea:	e7a3      	b.n	8001d34 <HAL_I2C_Init+0x90>
 8001dec:	1e46      	subs	r6, r0, #1
 8001dee:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001df2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001df6:	fbb6 f6f7 	udiv	r6, r6, r7
 8001dfa:	3601      	adds	r6, #1
 8001dfc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001e00:	fab6 f686 	clz	r6, r6
 8001e04:	0976      	lsrs	r6, r6, #5
 8001e06:	e7e4      	b.n	8001dd2 <HAL_I2C_Init+0x12e>
 8001e08:	3801      	subs	r0, #1
 8001e0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e12:	fbb0 f2f3 	udiv	r2, r0, r3
 8001e16:	3201      	adds	r2, #1
 8001e18:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001e1c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001e20:	e788      	b.n	8001d34 <HAL_I2C_Init+0x90>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e786      	b.n	8001d34 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
}
 8001e28:	4770      	bx	lr
    return HAL_ERROR;
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	e7ae      	b.n	8001d8c <HAL_I2C_Init+0xe8>
 8001e2e:	bf00      	nop
 8001e30:	000186a0 	.word	0x000186a0
 8001e34:	001e847f 	.word	0x001e847f
 8001e38:	431bde83 	.word	0x431bde83
 8001e3c:	003d08ff 	.word	0x003d08ff
 8001e40:	10624dd3 	.word	0x10624dd3

08001e44 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e44:	2800      	cmp	r0, #0
 8001e46:	f000 81bb 	beq.w	80021c0 <HAL_RCC_OscConfig+0x37c>
{
 8001e4a:	b570      	push	{r4, r5, r6, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e50:	6803      	ldr	r3, [r0, #0]
 8001e52:	f013 0f01 	tst.w	r3, #1
 8001e56:	d03b      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e58:	4ba7      	ldr	r3, [pc, #668]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d02c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e64:	4ba4      	ldr	r3, [pc, #656]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d021      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e70:	6863      	ldr	r3, [r4, #4]
 8001e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e76:	d04f      	beq.n	8001f18 <HAL_RCC_OscConfig+0xd4>
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7c:	d052      	beq.n	8001f24 <HAL_RCC_OscConfig+0xe0>
 8001e7e:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e90:	6863      	ldr	r3, [r4, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d050      	beq.n	8001f38 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff fa1f 	bl	80012d8 <HAL_GetTick>
 8001e9a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	4b96      	ldr	r3, [pc, #600]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ea4:	d114      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea6:	f7ff fa17 	bl	80012d8 <HAL_GetTick>
 8001eaa:	1b40      	subs	r0, r0, r5
 8001eac:	2864      	cmp	r0, #100	; 0x64
 8001eae:	d9f5      	bls.n	8001e9c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	e18a      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb4:	4b90      	ldr	r3, [pc, #576]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ebc:	d0d8      	beq.n	8001e70 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebe:	4b8e      	ldr	r3, [pc, #568]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ec6:	d003      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x8c>
 8001ec8:	6863      	ldr	r3, [r4, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 817a 	beq.w	80021c4 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	f013 0f02 	tst.w	r3, #2
 8001ed6:	d055      	beq.n	8001f84 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ed8:	4b87      	ldr	r3, [pc, #540]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f013 0f0c 	tst.w	r3, #12
 8001ee0:	d03e      	beq.n	8001f60 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee2:	4b85      	ldr	r3, [pc, #532]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d033      	beq.n	8001f56 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eee:	68e3      	ldr	r3, [r4, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d068      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	4b81      	ldr	r3, [pc, #516]	; (80020fc <HAL_RCC_OscConfig+0x2b8>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7ff f9ed 	bl	80012d8 <HAL_GetTick>
 8001efe:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	4b7d      	ldr	r3, [pc, #500]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f013 0f02 	tst.w	r3, #2
 8001f08:	d154      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff f9e5 	bl	80012d8 <HAL_GetTick>
 8001f0e:	1b40      	subs	r0, r0, r5
 8001f10:	2802      	cmp	r0, #2
 8001f12:	d9f5      	bls.n	8001f00 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001f14:	2003      	movs	r0, #3
 8001f16:	e158      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f18:	4a77      	ldr	r2, [pc, #476]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e7b5      	b.n	8001e90 <HAL_RCC_OscConfig+0x4c>
 8001f24:	4b74      	ldr	r3, [pc, #464]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e7ab      	b.n	8001e90 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001f38:	f7ff f9ce 	bl	80012d8 <HAL_GetTick>
 8001f3c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b6e      	ldr	r3, [pc, #440]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f46:	d0c3      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff f9c6 	bl	80012d8 <HAL_GetTick>
 8001f4c:	1b40      	subs	r0, r0, r5
 8001f4e:	2864      	cmp	r0, #100	; 0x64
 8001f50:	d9f5      	bls.n	8001f3e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001f52:	2003      	movs	r0, #3
 8001f54:	e139      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f56:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f5e:	d1c6      	bne.n	8001eee <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f60:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f013 0f02 	tst.w	r3, #2
 8001f68:	d004      	beq.n	8001f74 <HAL_RCC_OscConfig+0x130>
 8001f6a:	68e3      	ldr	r3, [r4, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001f70:	2001      	movs	r0, #1
 8001f72:	e12a      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4a60      	ldr	r2, [pc, #384]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f7c:	6921      	ldr	r1, [r4, #16]
 8001f7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f82:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	f013 0f08 	tst.w	r3, #8
 8001f8a:	d040      	beq.n	800200e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f8c:	6963      	ldr	r3, [r4, #20]
 8001f8e:	b363      	cbz	r3, 8001fea <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f90:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <HAL_RCC_OscConfig+0x2bc>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7ff f99f 	bl	80012d8 <HAL_GetTick>
 8001f9a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9c:	4b56      	ldr	r3, [pc, #344]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa0:	f013 0f02 	tst.w	r3, #2
 8001fa4:	d133      	bne.n	800200e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7ff f997 	bl	80012d8 <HAL_GetTick>
 8001faa:	1b40      	subs	r0, r0, r5
 8001fac:	2802      	cmp	r0, #2
 8001fae:	d9f5      	bls.n	8001f9c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	e10a      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4a50      	ldr	r2, [pc, #320]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001fb6:	6813      	ldr	r3, [r2, #0]
 8001fb8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fbc:	6921      	ldr	r1, [r4, #16]
 8001fbe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e7de      	b.n	8001f84 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b4d      	ldr	r3, [pc, #308]	; (80020fc <HAL_RCC_OscConfig+0x2b8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f984 	bl	80012d8 <HAL_GetTick>
 8001fd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f013 0f02 	tst.w	r3, #2
 8001fda:	d0d3      	beq.n	8001f84 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f97c 	bl	80012d8 <HAL_GetTick>
 8001fe0:	1b40      	subs	r0, r0, r5
 8001fe2:	2802      	cmp	r0, #2
 8001fe4:	d9f5      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001fe6:	2003      	movs	r0, #3
 8001fe8:	e0ef      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fea:	4b45      	ldr	r3, [pc, #276]	; (8002100 <HAL_RCC_OscConfig+0x2bc>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7ff f972 	bl	80012d8 <HAL_GetTick>
 8001ff4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8001ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffa:	f013 0f02 	tst.w	r3, #2
 8001ffe:	d006      	beq.n	800200e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff f96a 	bl	80012d8 <HAL_GetTick>
 8002004:	1b40      	subs	r0, r0, r5
 8002006:	2802      	cmp	r0, #2
 8002008:	d9f5      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800200a:	2003      	movs	r0, #3
 800200c:	e0dd      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	f013 0f04 	tst.w	r3, #4
 8002014:	d079      	beq.n	800210a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800201e:	d133      	bne.n	8002088 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8002026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002028:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002038:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b32      	ldr	r3, [pc, #200]	; (8002104 <HAL_RCC_OscConfig+0x2c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002042:	d023      	beq.n	800208c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	68a3      	ldr	r3, [r4, #8]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d034      	beq.n	80020b4 <HAL_RCC_OscConfig+0x270>
 800204a:	2b05      	cmp	r3, #5
 800204c:	d038      	beq.n	80020c0 <HAL_RCC_OscConfig+0x27c>
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8002050:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	671a      	str	r2, [r3, #112]	; 0x70
 8002058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800205a:	f022 0204 	bic.w	r2, r2, #4
 800205e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002060:	68a3      	ldr	r3, [r4, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d036      	beq.n	80020d4 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff f937 	bl	80012d8 <HAL_GetTick>
 800206a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 800206e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002070:	f013 0f02 	tst.w	r3, #2
 8002074:	d148      	bne.n	8002108 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff f92f 	bl	80012d8 <HAL_GetTick>
 800207a:	1b80      	subs	r0, r0, r6
 800207c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002080:	4298      	cmp	r0, r3
 8002082:	d9f3      	bls.n	800206c <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8002084:	2003      	movs	r0, #3
 8002086:	e0a0      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8002088:	2500      	movs	r5, #0
 800208a:	e7d6      	b.n	800203a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_RCC_OscConfig+0x2c0>)
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002094:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002096:	f7ff f91f 	bl	80012d8 <HAL_GetTick>
 800209a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_RCC_OscConfig+0x2c0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020a4:	d1ce      	bne.n	8002044 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7ff f917 	bl	80012d8 <HAL_GetTick>
 80020aa:	1b80      	subs	r0, r0, r6
 80020ac:	2802      	cmp	r0, #2
 80020ae:	d9f5      	bls.n	800209c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80020b0:	2003      	movs	r0, #3
 80020b2:	e08a      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 80020b6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6713      	str	r3, [r2, #112]	; 0x70
 80020be:	e7cf      	b.n	8002060 <HAL_RCC_OscConfig+0x21c>
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 80020c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020c4:	f042 0204 	orr.w	r2, r2, #4
 80020c8:	671a      	str	r2, [r3, #112]	; 0x70
 80020ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020cc:	f042 0201 	orr.w	r2, r2, #1
 80020d0:	671a      	str	r2, [r3, #112]	; 0x70
 80020d2:	e7c5      	b.n	8002060 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7ff f900 	bl	80012d8 <HAL_GetTick>
 80020d8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	f013 0f02 	tst.w	r3, #2
 80020e2:	d011      	beq.n	8002108 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7ff f8f8 	bl	80012d8 <HAL_GetTick>
 80020e8:	1b80      	subs	r0, r0, r6
 80020ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80020ee:	4298      	cmp	r0, r3
 80020f0:	d9f3      	bls.n	80020da <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80020f2:	2003      	movs	r0, #3
 80020f4:	e069      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470000 	.word	0x42470000
 8002100:	42470e80 	.word	0x42470e80
 8002104:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002108:	b9e5      	cbnz	r5, 8002144 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210a:	69a3      	ldr	r3, [r4, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d05b      	beq.n	80021c8 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002110:	4a30      	ldr	r2, [pc, #192]	; (80021d4 <HAL_RCC_OscConfig+0x390>)
 8002112:	6892      	ldr	r2, [r2, #8]
 8002114:	f002 020c 	and.w	r2, r2, #12
 8002118:	2a08      	cmp	r2, #8
 800211a:	d058      	beq.n	80021ce <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211c:	2b02      	cmp	r3, #2
 800211e:	d017      	beq.n	8002150 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x394>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7ff f8d7 	bl	80012d8 <HAL_GetTick>
 800212a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCC_OscConfig+0x390>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002134:	d042      	beq.n	80021bc <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff f8cf 	bl	80012d8 <HAL_GetTick>
 800213a:	1b00      	subs	r0, r0, r4
 800213c:	2802      	cmp	r0, #2
 800213e:	d9f5      	bls.n	800212c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002140:	2003      	movs	r0, #3
 8002142:	e042      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002144:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <HAL_RCC_OscConfig+0x390>)
 8002146:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	e7dc      	b.n	800210a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002150:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <HAL_RCC_OscConfig+0x394>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002156:	f7ff f8bf 	bl	80012d8 <HAL_GetTick>
 800215a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCC_OscConfig+0x390>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002164:	d006      	beq.n	8002174 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002166:	f7ff f8b7 	bl	80012d8 <HAL_GetTick>
 800216a:	1b40      	subs	r0, r0, r5
 800216c:	2802      	cmp	r0, #2
 800216e:	d9f5      	bls.n	800215c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002170:	2003      	movs	r0, #3
 8002172:	e02a      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002174:	69e3      	ldr	r3, [r4, #28]
 8002176:	6a22      	ldr	r2, [r4, #32]
 8002178:	4313      	orrs	r3, r2
 800217a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800217c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002180:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002182:	0852      	lsrs	r2, r2, #1
 8002184:	3a01      	subs	r2, #1
 8002186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800218a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800218c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002190:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <HAL_RCC_OscConfig+0x390>)
 8002192:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_RCC_OscConfig+0x394>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800219a:	f7ff f89d 	bl	80012d8 <HAL_GetTick>
 800219e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_RCC_OscConfig+0x390>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff f895 	bl	80012d8 <HAL_GetTick>
 80021ae:	1b00      	subs	r0, r0, r4
 80021b0:	2802      	cmp	r0, #2
 80021b2:	d9f5      	bls.n	80021a0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80021b4:	2003      	movs	r0, #3
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80021b8:	2000      	movs	r0, #0
 80021ba:	e006      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
 80021bc:	2000      	movs	r0, #0
 80021be:	e004      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
}
 80021c2:	4770      	bx	lr
        return HAL_ERROR;
 80021c4:	2001      	movs	r0, #1
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 80021c8:	2000      	movs	r0, #0
}
 80021ca:	b002      	add	sp, #8
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80021ce:	2001      	movs	r0, #1
 80021d0:	e7fb      	b.n	80021ca <HAL_RCC_OscConfig+0x386>
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	42470060 	.word	0x42470060

080021dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d05c      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0xc6>
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ec:	482f      	ldr	r0, [pc, #188]	; (80022ac <HAL_RCC_GetSysClockFreq+0xd0>)
 80021ee:	4770      	bx	lr
{
 80021f0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f4:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002202:	d02b      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800220c:	461e      	mov	r6, r3
 800220e:	2700      	movs	r7, #0
 8002210:	015c      	lsls	r4, r3, #5
 8002212:	2500      	movs	r5, #0
 8002214:	1ae4      	subs	r4, r4, r3
 8002216:	eb65 0507 	sbc.w	r5, r5, r7
 800221a:	01a9      	lsls	r1, r5, #6
 800221c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002220:	01a0      	lsls	r0, r4, #6
 8002222:	1b00      	subs	r0, r0, r4
 8002224:	eb61 0105 	sbc.w	r1, r1, r5
 8002228:	00cb      	lsls	r3, r1, #3
 800222a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800222e:	00c4      	lsls	r4, r0, #3
 8002230:	19a0      	adds	r0, r4, r6
 8002232:	eb43 0107 	adc.w	r1, r3, r7
 8002236:	024b      	lsls	r3, r1, #9
 8002238:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800223c:	0244      	lsls	r4, r0, #9
 800223e:	4620      	mov	r0, r4
 8002240:	4619      	mov	r1, r3
 8002242:	2300      	movs	r3, #0
 8002244:	f7fe fd28 	bl	8000c98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002248:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002250:	3301      	adds	r3, #1
 8002252:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002254:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002258:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002264:	461e      	mov	r6, r3
 8002266:	2700      	movs	r7, #0
 8002268:	015c      	lsls	r4, r3, #5
 800226a:	2500      	movs	r5, #0
 800226c:	1ae4      	subs	r4, r4, r3
 800226e:	eb65 0507 	sbc.w	r5, r5, r7
 8002272:	01a9      	lsls	r1, r5, #6
 8002274:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002278:	01a0      	lsls	r0, r4, #6
 800227a:	1b00      	subs	r0, r0, r4
 800227c:	eb61 0105 	sbc.w	r1, r1, r5
 8002280:	00cb      	lsls	r3, r1, #3
 8002282:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002286:	00c4      	lsls	r4, r0, #3
 8002288:	19a0      	adds	r0, r4, r6
 800228a:	eb43 0107 	adc.w	r1, r3, r7
 800228e:	028b      	lsls	r3, r1, #10
 8002290:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002294:	0284      	lsls	r4, r0, #10
 8002296:	4620      	mov	r0, r4
 8002298:	4619      	mov	r1, r3
 800229a:	2300      	movs	r3, #0
 800229c:	f7fe fcfc 	bl	8000c98 <__aeabi_uldivmod>
 80022a0:	e7d2      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 80022a2:	4803      	ldr	r0, [pc, #12]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	00f42400 	.word	0x00f42400
 80022b0:	007a1200 	.word	0x007a1200

080022b4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80022b4:	2800      	cmp	r0, #0
 80022b6:	f000 809d 	beq.w	80023f4 <HAL_RCC_ClockConfig+0x140>
{
 80022ba:	b570      	push	{r4, r5, r6, lr}
 80022bc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022be:	4b4f      	ldr	r3, [pc, #316]	; (80023fc <HAL_RCC_ClockConfig+0x148>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	428b      	cmp	r3, r1
 80022c8:	d209      	bcs.n	80022de <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	b2cb      	uxtb	r3, r1
 80022cc:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_RCC_ClockConfig+0x148>)
 80022ce:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d0:	6813      	ldr	r3, [r2, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	428b      	cmp	r3, r1
 80022d8:	d001      	beq.n	80022de <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
}
 80022dc:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	f013 0f02 	tst.w	r3, #2
 80022e4:	d017      	beq.n	8002316 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e6:	f013 0f04 	tst.w	r3, #4
 80022ea:	d004      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4a44      	ldr	r2, [pc, #272]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 80022ee:	6893      	ldr	r3, [r2, #8]
 80022f0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022f4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	f013 0f08 	tst.w	r3, #8
 80022fc:	d004      	beq.n	8002308 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022fe:	4a40      	ldr	r2, [pc, #256]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 8002300:	6893      	ldr	r3, [r2, #8]
 8002302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002306:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4a3d      	ldr	r2, [pc, #244]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 800230a:	6893      	ldr	r3, [r2, #8]
 800230c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002310:	68a0      	ldr	r0, [r4, #8]
 8002312:	4303      	orrs	r3, r0
 8002314:	6093      	str	r3, [r2, #8]
 8002316:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	f013 0f01 	tst.w	r3, #1
 800231e:	d032      	beq.n	8002386 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002320:	6863      	ldr	r3, [r4, #4]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d021      	beq.n	800236a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002326:	1e9a      	subs	r2, r3, #2
 8002328:	2a01      	cmp	r2, #1
 800232a:	d925      	bls.n	8002378 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	4a34      	ldr	r2, [pc, #208]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	f012 0f02 	tst.w	r2, #2
 8002334:	d060      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4932      	ldr	r1, [pc, #200]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 8002338:	688a      	ldr	r2, [r1, #8]
 800233a:	f022 0203 	bic.w	r2, r2, #3
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002342:	f7fe ffc9 	bl	80012d8 <HAL_GetTick>
 8002346:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	6862      	ldr	r2, [r4, #4]
 8002352:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002356:	d016      	beq.n	8002386 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002358:	f7fe ffbe 	bl	80012d8 <HAL_GetTick>
 800235c:	1b80      	subs	r0, r0, r6
 800235e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002362:	4298      	cmp	r0, r3
 8002364:	d9f0      	bls.n	8002348 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8002366:	2003      	movs	r0, #3
 8002368:	e7b8      	b.n	80022dc <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4a25      	ldr	r2, [pc, #148]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002372:	d1e0      	bne.n	8002336 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002374:	2001      	movs	r0, #1
 8002376:	e7b1      	b.n	80022dc <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002380:	d1d9      	bne.n	8002336 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002382:	2001      	movs	r0, #1
 8002384:	e7aa      	b.n	80022dc <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_RCC_ClockConfig+0x148>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	42ab      	cmp	r3, r5
 8002390:	d909      	bls.n	80023a6 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	b2ea      	uxtb	r2, r5
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCC_ClockConfig+0x148>)
 8002396:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	42ab      	cmp	r3, r5
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 80023a2:	2001      	movs	r0, #1
 80023a4:	e79a      	b.n	80022dc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	f013 0f04 	tst.w	r3, #4
 80023ac:	d006      	beq.n	80023bc <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ae:	4a14      	ldr	r2, [pc, #80]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 80023b0:	6893      	ldr	r3, [r2, #8]
 80023b2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80023b6:	68e1      	ldr	r1, [r4, #12]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	f013 0f08 	tst.w	r3, #8
 80023c2:	d007      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c4:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 80023c6:	6893      	ldr	r3, [r2, #8]
 80023c8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80023cc:	6921      	ldr	r1, [r4, #16]
 80023ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023d4:	f7ff ff02 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x14c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023e0:	4a08      	ldr	r2, [pc, #32]	; (8002404 <HAL_RCC_ClockConfig+0x150>)
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	40d8      	lsrs	r0, r3
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_RCC_ClockConfig+0x154>)
 80023e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f001 fb74 	bl	8003ad8 <HAL_InitTick>
  return HAL_OK;
 80023f0:	2000      	movs	r0, #0
 80023f2:	e773      	b.n	80022dc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80023f4:	2001      	movs	r0, #1
}
 80023f6:	4770      	bx	lr
        return HAL_ERROR;
 80023f8:	2001      	movs	r0, #1
 80023fa:	e76f      	b.n	80022dc <HAL_RCC_ClockConfig+0x28>
 80023fc:	40023c00 	.word	0x40023c00
 8002400:	40023800 	.word	0x40023800
 8002404:	08007a60 	.word	0x08007a60
 8002408:	20000034 	.word	0x20000034

0800240c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800240c:	4b01      	ldr	r3, [pc, #4]	; (8002414 <HAL_RCC_GetHCLKFreq+0x8>)
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000034 	.word	0x20000034

08002418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002418:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800241a:	f7ff fff7 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002428:	5cd3      	ldrb	r3, [r2, r3]
}
 800242a:	40d8      	lsrs	r0, r3
 800242c:	bd08      	pop	{r3, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	08007a70 	.word	0x08007a70

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800243a:	f7ff ffe7 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002446:	4a03      	ldr	r2, [pc, #12]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
}
 800244a:	40d8      	lsrs	r0, r3
 800244c:	bd08      	pop	{r3, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	08007a70 	.word	0x08007a70

08002458 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002458:	230f      	movs	r3, #15
 800245a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_GetClockConfig+0x34>)
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800246c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002474:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800247e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_RCC_GetClockConfig+0x38>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	600b      	str	r3, [r1, #0]
}
 800248a:	4770      	bx	lr
 800248c:	40023800 	.word	0x40023800
 8002490:	40023c00 	.word	0x40023c00

08002494 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002494:	2800      	cmp	r0, #0
 8002496:	d03b      	beq.n	8002510 <HAL_SPI_Init+0x7c>
{
 8002498:	b510      	push	{r4, lr}
 800249a:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024a0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d02e      	beq.n	8002506 <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024a8:	2302      	movs	r3, #2
 80024aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	6813      	ldr	r3, [r2, #0]
 80024b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024b6:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024b8:	6863      	ldr	r3, [r4, #4]
 80024ba:	68a2      	ldr	r2, [r4, #8]
 80024bc:	4313      	orrs	r3, r2
 80024be:	68e2      	ldr	r2, [r4, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	6922      	ldr	r2, [r4, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	6962      	ldr	r2, [r4, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	69a2      	ldr	r2, [r4, #24]
 80024cc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80024d0:	4313      	orrs	r3, r2
 80024d2:	69e2      	ldr	r2, [r4, #28]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	6a22      	ldr	r2, [r4, #32]
 80024d8:	4313      	orrs	r3, r2
 80024da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80024dc:	6822      	ldr	r2, [r4, #0]
 80024de:	430b      	orrs	r3, r1
 80024e0:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80024e2:	8b63      	ldrh	r3, [r4, #26]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80024ea:	6822      	ldr	r2, [r4, #0]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024f0:	6822      	ldr	r2, [r4, #0]
 80024f2:	69d3      	ldr	r3, [r2, #28]
 80024f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024f8:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024fa:	2000      	movs	r0, #0
 80024fc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024fe:	2301      	movs	r3, #1
 8002500:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002504:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002506:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800250a:	f001 fa63 	bl	80039d4 <HAL_SPI_MspInit>
 800250e:	e7cb      	b.n	80024a8 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002510:	2001      	movs	r0, #1
}
 8002512:	4770      	bx	lr

08002514 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002514:	4770      	bx	lr
	...

08002518 <HAL_SPI_IRQHandler>:
{
 8002518:	b530      	push	{r4, r5, lr}
 800251a:	b085      	sub	sp, #20
 800251c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800251e:	6802      	ldr	r2, [r0, #0]
 8002520:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002522:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002524:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8002528:	b949      	cbnz	r1, 800253e <HAL_SPI_IRQHandler+0x26>
 800252a:	f013 0f01 	tst.w	r3, #1
 800252e:	d006      	beq.n	800253e <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002530:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002534:	d003      	beq.n	800253e <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 8002536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002538:	4620      	mov	r0, r4
 800253a:	4798      	blx	r3
    return;
 800253c:	e008      	b.n	8002550 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800253e:	f013 0f02 	tst.w	r3, #2
 8002542:	d007      	beq.n	8002554 <HAL_SPI_IRQHandler+0x3c>
 8002544:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002548:	d004      	beq.n	8002554 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 800254a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800254c:	4620      	mov	r0, r4
 800254e:	4798      	blx	r3
}
 8002550:	b005      	add	sp, #20
 8002552:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002554:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8002558:	b91d      	cbnz	r5, 8002562 <HAL_SPI_IRQHandler+0x4a>
 800255a:	b911      	cbnz	r1, 8002562 <HAL_SPI_IRQHandler+0x4a>
 800255c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002560:	d0f6      	beq.n	8002550 <HAL_SPI_IRQHandler+0x38>
 8002562:	f010 0f20 	tst.w	r0, #32
 8002566:	d0f3      	beq.n	8002550 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002568:	b179      	cbz	r1, 800258a <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800256a:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 800256e:	b2c9      	uxtb	r1, r1
 8002570:	2903      	cmp	r1, #3
 8002572:	d053      	beq.n	800261c <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002574:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002576:	f041 0104 	orr.w	r1, r1, #4
 800257a:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800257c:	2100      	movs	r1, #0
 800257e:	9100      	str	r1, [sp, #0]
 8002580:	68d1      	ldr	r1, [r2, #12]
 8002582:	9100      	str	r1, [sp, #0]
 8002584:	6891      	ldr	r1, [r2, #8]
 8002586:	9100      	str	r1, [sp, #0]
 8002588:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800258a:	b165      	cbz	r5, 80025a6 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800258c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800258e:	f041 0101 	orr.w	r1, r1, #1
 8002592:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002594:	2100      	movs	r1, #0
 8002596:	9102      	str	r1, [sp, #8]
 8002598:	6891      	ldr	r1, [r2, #8]
 800259a:	9102      	str	r1, [sp, #8]
 800259c:	6811      	ldr	r1, [r2, #0]
 800259e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80025a2:	6011      	str	r1, [r2, #0]
 80025a4:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80025a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025aa:	d009      	beq.n	80025c0 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80025ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80025b4:	2300      	movs	r3, #0
 80025b6:	9303      	str	r3, [sp, #12]
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	9303      	str	r3, [sp, #12]
 80025be:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0c4      	beq.n	8002550 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025c6:	6822      	ldr	r2, [r4, #0]
 80025c8:	6853      	ldr	r3, [r2, #4]
 80025ca:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80025ce:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80025d6:	f010 0f03 	tst.w	r0, #3
 80025da:	d027      	beq.n	800262c <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80025dc:	6822      	ldr	r2, [r4, #0]
 80025de:	6853      	ldr	r3, [r2, #4]
 80025e0:	f023 0303 	bic.w	r3, r3, #3
 80025e4:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80025e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025e8:	b14b      	cbz	r3, 80025fe <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <HAL_SPI_IRQHandler+0x11c>)
 80025ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80025ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80025f0:	f7ff f844 	bl	800167c <HAL_DMA_Abort_IT>
 80025f4:	b118      	cbz	r0, 80025fe <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025fc:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80025fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0a5      	beq.n	8002550 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_SPI_IRQHandler+0x11c>)
 8002606:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002608:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800260a:	f7ff f837 	bl	800167c <HAL_DMA_Abort_IT>
 800260e:	2800      	cmp	r0, #0
 8002610:	d09e      	beq.n	8002550 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002612:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002618:	6563      	str	r3, [r4, #84]	; 0x54
 800261a:	e799      	b.n	8002550 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800261c:	2300      	movs	r3, #0
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	68d3      	ldr	r3, [r2, #12]
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	6893      	ldr	r3, [r2, #8]
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	9b01      	ldr	r3, [sp, #4]
        return;
 800262a:	e791      	b.n	8002550 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 800262c:	4620      	mov	r0, r4
 800262e:	f7ff ff71 	bl	8002514 <HAL_SPI_ErrorCallback>
 8002632:	e78d      	b.n	8002550 <HAL_SPI_IRQHandler+0x38>
 8002634:	08002639 	.word	0x08002639

08002638 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002638:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800263a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002640:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002642:	f7ff ff67 	bl	8002514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002646:	bd08      	pop	{r3, pc}

08002648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002648:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800264a:	6a03      	ldr	r3, [r0, #32]
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002652:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002654:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002656:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002658:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800265c:	680d      	ldr	r5, [r1, #0]
 800265e:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002662:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002666:	688b      	ldr	r3, [r1, #8]
 8002668:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800266a:	4d0d      	ldr	r5, [pc, #52]	; (80026a0 <TIM_OC1_SetConfig+0x58>)
 800266c:	42a8      	cmp	r0, r5
 800266e:	d009      	beq.n	8002684 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002670:	4d0b      	ldr	r5, [pc, #44]	; (80026a0 <TIM_OC1_SetConfig+0x58>)
 8002672:	42a8      	cmp	r0, r5
 8002674:	d00d      	beq.n	8002692 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002676:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002678:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800267a:	684a      	ldr	r2, [r1, #4]
 800267c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800267e:	6203      	str	r3, [r0, #32]
}
 8002680:	bc70      	pop	{r4, r5, r6}
 8002682:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002684:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002688:	68cc      	ldr	r4, [r1, #12]
 800268a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 800268c:	f023 0304 	bic.w	r3, r3, #4
 8002690:	e7ee      	b.n	8002670 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002692:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002696:	694c      	ldr	r4, [r1, #20]
 8002698:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 800269a:	698a      	ldr	r2, [r1, #24]
 800269c:	4322      	orrs	r2, r4
 800269e:	e7ea      	b.n	8002676 <TIM_OC1_SetConfig+0x2e>
 80026a0:	40010000 	.word	0x40010000

080026a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026a6:	6a03      	ldr	r3, [r0, #32]
 80026a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026b2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026b4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026b8:	680d      	ldr	r5, [r1, #0]
 80026ba:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026c0:	688d      	ldr	r5, [r1, #8]
 80026c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026c6:	4d0f      	ldr	r5, [pc, #60]	; (8002704 <TIM_OC3_SetConfig+0x60>)
 80026c8:	42a8      	cmp	r0, r5
 80026ca:	d009      	beq.n	80026e0 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026cc:	4d0d      	ldr	r5, [pc, #52]	; (8002704 <TIM_OC3_SetConfig+0x60>)
 80026ce:	42a8      	cmp	r0, r5
 80026d0:	d00e      	beq.n	80026f0 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026d4:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026d6:	684a      	ldr	r2, [r1, #4]
 80026d8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026da:	6203      	str	r3, [r0, #32]
}
 80026dc:	bc30      	pop	{r4, r5}
 80026de:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80026e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026e4:	68cd      	ldr	r5, [r1, #12]
 80026e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80026ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026ee:	e7ed      	b.n	80026cc <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026f0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026f4:	694d      	ldr	r5, [r1, #20]
 80026f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026fa:	698d      	ldr	r5, [r1, #24]
 80026fc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002700:	e7e7      	b.n	80026d2 <TIM_OC3_SetConfig+0x2e>
 8002702:	bf00      	nop
 8002704:	40010000 	.word	0x40010000

08002708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002708:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800270a:	6a03      	ldr	r3, [r0, #32]
 800270c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002710:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002712:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002714:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002716:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002718:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800271c:	680d      	ldr	r5, [r1, #0]
 800271e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002726:	688d      	ldr	r5, [r1, #8]
 8002728:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272c:	4d07      	ldr	r5, [pc, #28]	; (800274c <TIM_OC4_SetConfig+0x44>)
 800272e:	42a8      	cmp	r0, r5
 8002730:	d006      	beq.n	8002740 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002732:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002734:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002736:	684a      	ldr	r2, [r1, #4]
 8002738:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800273a:	6203      	str	r3, [r0, #32]
}
 800273c:	bc30      	pop	{r4, r5}
 800273e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002740:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002744:	694d      	ldr	r5, [r1, #20]
 8002746:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800274a:	e7f2      	b.n	8002732 <TIM_OC4_SetConfig+0x2a>
 800274c:	40010000 	.word	0x40010000

08002750 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002750:	6802      	ldr	r2, [r0, #0]
 8002752:	68d3      	ldr	r3, [r2, #12]
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800275a:	6802      	ldr	r2, [r0, #0]
 800275c:	6893      	ldr	r3, [r2, #8]
 800275e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002762:	2b06      	cmp	r3, #6
 8002764:	d003      	beq.n	800276e <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6013      	str	r3, [r2, #0]
}
 800276e:	2000      	movs	r0, #0
 8002770:	4770      	bx	lr

08002772 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002772:	4770      	bx	lr

08002774 <HAL_TIM_IC_CaptureCallback>:
}
 8002774:	4770      	bx	lr

08002776 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002776:	4770      	bx	lr

08002778 <HAL_TIM_TriggerCallback>:
}
 8002778:	4770      	bx	lr

0800277a <HAL_TIM_IRQHandler>:
{
 800277a:	b510      	push	{r4, lr}
 800277c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800277e:	6803      	ldr	r3, [r0, #0]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	f012 0f02 	tst.w	r2, #2
 8002786:	d011      	beq.n	80027ac <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	f012 0f02 	tst.w	r2, #2
 800278e:	d00d      	beq.n	80027ac <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002790:	f06f 0202 	mvn.w	r2, #2
 8002794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002796:	2301      	movs	r3, #1
 8002798:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800279a:	6803      	ldr	r3, [r0, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f013 0f03 	tst.w	r3, #3
 80027a2:	d070      	beq.n	8002886 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80027a4:	f7ff ffe6 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a8:	2300      	movs	r3, #0
 80027aa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	f012 0f04 	tst.w	r2, #4
 80027b4:	d012      	beq.n	80027dc <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	f012 0f04 	tst.w	r2, #4
 80027bc:	d00e      	beq.n	80027dc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027be:	f06f 0204 	mvn.w	r2, #4
 80027c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027c4:	2302      	movs	r3, #2
 80027c6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80027d0:	d05f      	beq.n	8002892 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7ff ffce 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d8:	2300      	movs	r3, #0
 80027da:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	f012 0f08 	tst.w	r2, #8
 80027e4:	d012      	beq.n	800280c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	f012 0f08 	tst.w	r2, #8
 80027ec:	d00e      	beq.n	800280c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027ee:	f06f 0208 	mvn.w	r2, #8
 80027f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027f4:	2304      	movs	r3, #4
 80027f6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f013 0f03 	tst.w	r3, #3
 8002800:	d04e      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002802:	4620      	mov	r0, r4
 8002804:	f7ff ffb6 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002808:	2300      	movs	r3, #0
 800280a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	f012 0f10 	tst.w	r2, #16
 8002814:	d012      	beq.n	800283c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	f012 0f10 	tst.w	r2, #16
 800281c:	d00e      	beq.n	800283c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800281e:	f06f 0210 	mvn.w	r2, #16
 8002822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002824:	2308      	movs	r3, #8
 8002826:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002830:	d03d      	beq.n	80028ae <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002832:	4620      	mov	r0, r4
 8002834:	f7ff ff9e 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002838:	2300      	movs	r3, #0
 800283a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	f012 0f01 	tst.w	r2, #1
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	f012 0f01 	tst.w	r2, #1
 800284c:	d136      	bne.n	80028bc <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002856:	d003      	beq.n	8002860 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800285e:	d134      	bne.n	80028ca <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002870:	d132      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	f012 0f20 	tst.w	r2, #32
 800287a:	d003      	beq.n	8002884 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	f012 0f20 	tst.w	r2, #32
 8002882:	d130      	bne.n	80028e6 <HAL_TIM_IRQHandler+0x16c>
}
 8002884:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	f7ff ff74 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff ff73 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
 8002890:	e78a      	b.n	80027a8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	4620      	mov	r0, r4
 8002894:	f7ff ff6d 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	4620      	mov	r0, r4
 800289a:	f7ff ff6c 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
 800289e:	e79b      	b.n	80027d8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a0:	4620      	mov	r0, r4
 80028a2:	f7ff ff66 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7ff ff65 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
 80028ac:	e7ac      	b.n	8002808 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff ff5f 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff ff5e 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
 80028ba:	e7bd      	b.n	8002838 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028bc:	f06f 0201 	mvn.w	r2, #1
 80028c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80028c2:	4620      	mov	r0, r4
 80028c4:	f001 f856 	bl	8003974 <HAL_TIM_PeriodElapsedCallback>
 80028c8:	e7c1      	b.n	800284e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80028d0:	4620      	mov	r0, r4
 80028d2:	f000 f983 	bl	8002bdc <HAL_TIMEx_BreakCallback>
 80028d6:	e7c3      	b.n	8002860 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff ff4a 	bl	8002778 <HAL_TIM_TriggerCallback>
 80028e4:	e7c5      	b.n	8002872 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028e6:	f06f 0220 	mvn.w	r2, #32
 80028ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80028ec:	4620      	mov	r0, r4
 80028ee:	f000 f974 	bl	8002bda <HAL_TIMEx_CommutCallback>
}
 80028f2:	e7c7      	b.n	8002884 <HAL_TIM_IRQHandler+0x10a>

080028f4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80028f4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f6:	4a25      	ldr	r2, [pc, #148]	; (800298c <TIM_Base_SetConfig+0x98>)
 80028f8:	4290      	cmp	r0, r2
 80028fa:	d00e      	beq.n	800291a <TIM_Base_SetConfig+0x26>
 80028fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002900:	d00b      	beq.n	800291a <TIM_Base_SetConfig+0x26>
 8002902:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002906:	4290      	cmp	r0, r2
 8002908:	d007      	beq.n	800291a <TIM_Base_SetConfig+0x26>
 800290a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800290e:	4290      	cmp	r0, r2
 8002910:	d003      	beq.n	800291a <TIM_Base_SetConfig+0x26>
 8002912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002916:	4290      	cmp	r0, r2
 8002918:	d103      	bne.n	8002922 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800291e:	684a      	ldr	r2, [r1, #4]
 8002920:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002922:	4a1a      	ldr	r2, [pc, #104]	; (800298c <TIM_Base_SetConfig+0x98>)
 8002924:	4290      	cmp	r0, r2
 8002926:	d01a      	beq.n	800295e <TIM_Base_SetConfig+0x6a>
 8002928:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800292c:	d017      	beq.n	800295e <TIM_Base_SetConfig+0x6a>
 800292e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002932:	4290      	cmp	r0, r2
 8002934:	d013      	beq.n	800295e <TIM_Base_SetConfig+0x6a>
 8002936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800293a:	4290      	cmp	r0, r2
 800293c:	d00f      	beq.n	800295e <TIM_Base_SetConfig+0x6a>
 800293e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002942:	4290      	cmp	r0, r2
 8002944:	d00b      	beq.n	800295e <TIM_Base_SetConfig+0x6a>
 8002946:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800294a:	4290      	cmp	r0, r2
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0x6a>
 800294e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002952:	4290      	cmp	r0, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0x6a>
 8002956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800295a:	4290      	cmp	r0, r2
 800295c:	d103      	bne.n	8002966 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800295e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	68ca      	ldr	r2, [r1, #12]
 8002964:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800296a:	694a      	ldr	r2, [r1, #20]
 800296c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800296e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002970:	688b      	ldr	r3, [r1, #8]
 8002972:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002974:	680b      	ldr	r3, [r1, #0]
 8002976:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <TIM_Base_SetConfig+0x98>)
 800297a:	4298      	cmp	r0, r3
 800297c:	d002      	beq.n	8002984 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 800297e:	2301      	movs	r3, #1
 8002980:	6143      	str	r3, [r0, #20]
}
 8002982:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002984:	690b      	ldr	r3, [r1, #16]
 8002986:	6303      	str	r3, [r0, #48]	; 0x30
 8002988:	e7f9      	b.n	800297e <TIM_Base_SetConfig+0x8a>
 800298a:	bf00      	nop
 800298c:	40010000 	.word	0x40010000

08002990 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002990:	b1a8      	cbz	r0, 80029be <HAL_TIM_Base_Init+0x2e>
{
 8002992:	b510      	push	{r4, lr}
 8002994:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002996:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800299a:	b15b      	cbz	r3, 80029b4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	2302      	movs	r3, #2
 800299e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a2:	1d21      	adds	r1, r4, #4
 80029a4:	6820      	ldr	r0, [r4, #0]
 80029a6:	f7ff ffa5 	bl	80028f4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80029b0:	2000      	movs	r0, #0
}
 80029b2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80029b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80029b8:	f001 f972 	bl	8003ca0 <HAL_TIM_Base_MspInit>
 80029bc:	e7ee      	b.n	800299c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80029be:	2001      	movs	r0, #1
}
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80029c2:	b1a8      	cbz	r0, 80029f0 <HAL_TIM_PWM_Init+0x2e>
{
 80029c4:	b510      	push	{r4, lr}
 80029c6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80029c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029cc:	b15b      	cbz	r3, 80029e6 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80029ce:	2302      	movs	r3, #2
 80029d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d4:	1d21      	adds	r1, r4, #4
 80029d6:	6820      	ldr	r0, [r4, #0]
 80029d8:	f7ff ff8c 	bl	80028f4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	2301      	movs	r3, #1
 80029de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80029e2:	2000      	movs	r0, #0
}
 80029e4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80029e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80029ea:	f001 f941 	bl	8003c70 <HAL_TIM_PWM_MspInit>
 80029ee:	e7ee      	b.n	80029ce <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80029f0:	2001      	movs	r0, #1
}
 80029f2:	4770      	bx	lr

080029f4 <TIM_OC2_SetConfig>:
{
 80029f4:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f6:	6a03      	ldr	r3, [r0, #32]
 80029f8:	f023 0310 	bic.w	r3, r3, #16
 80029fc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80029fe:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002a00:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002a02:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a04:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a08:	680d      	ldr	r5, [r1, #0]
 8002a0a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002a0e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a12:	688d      	ldr	r5, [r1, #8]
 8002a14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a18:	4d0e      	ldr	r5, [pc, #56]	; (8002a54 <TIM_OC2_SetConfig+0x60>)
 8002a1a:	42a8      	cmp	r0, r5
 8002a1c:	d009      	beq.n	8002a32 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1e:	4d0d      	ldr	r5, [pc, #52]	; (8002a54 <TIM_OC2_SetConfig+0x60>)
 8002a20:	42a8      	cmp	r0, r5
 8002a22:	d00e      	beq.n	8002a42 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002a24:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002a26:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002a28:	684a      	ldr	r2, [r1, #4]
 8002a2a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002a2c:	6203      	str	r3, [r0, #32]
}
 8002a2e:	bc30      	pop	{r4, r5}
 8002a30:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a36:	68cd      	ldr	r5, [r1, #12]
 8002a38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a40:	e7ed      	b.n	8002a1e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a42:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a46:	694d      	ldr	r5, [r1, #20]
 8002a48:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a4c:	698d      	ldr	r5, [r1, #24]
 8002a4e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002a52:	e7e7      	b.n	8002a24 <TIM_OC2_SetConfig+0x30>
 8002a54:	40010000 	.word	0x40010000

08002a58 <HAL_TIM_PWM_ConfigChannel>:
{
 8002a58:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002a5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d066      	beq.n	8002b30 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002a62:	460d      	mov	r5, r1
 8002a64:	4604      	mov	r4, r0
 8002a66:	2301      	movs	r3, #1
 8002a68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002a72:	2a0c      	cmp	r2, #12
 8002a74:	d81a      	bhi.n	8002aac <HAL_TIM_PWM_ConfigChannel+0x54>
 8002a76:	e8df f002 	tbb	[pc, r2]
 8002a7a:	1907      	.short	0x1907
 8002a7c:	19201919 	.word	0x19201919
 8002a80:	19341919 	.word	0x19341919
 8002a84:	1919      	.short	0x1919
 8002a86:	47          	.byte	0x47
 8002a87:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a88:	6800      	ldr	r0, [r0, #0]
 8002a8a:	f7ff fddd 	bl	8002648 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a8e:	6822      	ldr	r2, [r4, #0]
 8002a90:	6993      	ldr	r3, [r2, #24]
 8002a92:	f043 0308 	orr.w	r3, r3, #8
 8002a96:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a98:	6822      	ldr	r2, [r4, #0]
 8002a9a:	6993      	ldr	r3, [r2, #24]
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aa2:	6822      	ldr	r2, [r4, #0]
 8002aa4:	6993      	ldr	r3, [r2, #24]
 8002aa6:	6929      	ldr	r1, [r5, #16]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002ab8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aba:	6800      	ldr	r0, [r0, #0]
 8002abc:	f7ff ff9a 	bl	80029f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ac0:	6822      	ldr	r2, [r4, #0]
 8002ac2:	6993      	ldr	r3, [r2, #24]
 8002ac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ac8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002aca:	6822      	ldr	r2, [r4, #0]
 8002acc:	6993      	ldr	r3, [r2, #24]
 8002ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ad2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ad4:	6822      	ldr	r2, [r4, #0]
 8002ad6:	6993      	ldr	r3, [r2, #24]
 8002ad8:	6929      	ldr	r1, [r5, #16]
 8002ada:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ade:	6193      	str	r3, [r2, #24]
      break;
 8002ae0:	e7e4      	b.n	8002aac <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae2:	6800      	ldr	r0, [r0, #0]
 8002ae4:	f7ff fdde 	bl	80026a4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ae8:	6822      	ldr	r2, [r4, #0]
 8002aea:	69d3      	ldr	r3, [r2, #28]
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002af2:	6822      	ldr	r2, [r4, #0]
 8002af4:	69d3      	ldr	r3, [r2, #28]
 8002af6:	f023 0304 	bic.w	r3, r3, #4
 8002afa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002afc:	6822      	ldr	r2, [r4, #0]
 8002afe:	69d3      	ldr	r3, [r2, #28]
 8002b00:	6929      	ldr	r1, [r5, #16]
 8002b02:	430b      	orrs	r3, r1
 8002b04:	61d3      	str	r3, [r2, #28]
      break;
 8002b06:	e7d1      	b.n	8002aac <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b08:	6800      	ldr	r0, [r0, #0]
 8002b0a:	f7ff fdfd 	bl	8002708 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	69d3      	ldr	r3, [r2, #28]
 8002b12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b16:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b18:	6822      	ldr	r2, [r4, #0]
 8002b1a:	69d3      	ldr	r3, [r2, #28]
 8002b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b20:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	69d3      	ldr	r3, [r2, #28]
 8002b26:	6929      	ldr	r1, [r5, #16]
 8002b28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b2c:	61d3      	str	r3, [r2, #28]
      break;
 8002b2e:	e7bd      	b.n	8002aac <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8002b30:	2002      	movs	r0, #2
 8002b32:	e7c1      	b.n	8002ab8 <HAL_TIM_PWM_ConfigChannel+0x60>

08002b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b34:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b36:	f001 011f 	and.w	r1, r1, #31
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b40:	6a03      	ldr	r3, [r0, #32]
 8002b42:	ea23 0304 	bic.w	r3, r3, r4
 8002b46:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b48:	6a03      	ldr	r3, [r0, #32]
 8002b4a:	408a      	lsls	r2, r1
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	6203      	str	r3, [r0, #32]
}
 8002b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_TIM_PWM_Start>:
{
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	6800      	ldr	r0, [r0, #0]
 8002b60:	f7ff ffe8 	bl	8002b34 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <HAL_TIM_PWM_Start+0x38>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00b      	beq.n	8002b84 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b6c:	6822      	ldr	r2, [r4, #0]
 8002b6e:	6893      	ldr	r3, [r2, #8]
 8002b70:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b74:	2b06      	cmp	r3, #6
 8002b76:	d003      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8002b78:	6813      	ldr	r3, [r2, #0]
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	2000      	movs	r0, #0
 8002b82:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8002b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44
 8002b8c:	e7ee      	b.n	8002b6c <HAL_TIM_PWM_Start+0x14>
 8002b8e:	bf00      	nop
 8002b90:	40010000 	.word	0x40010000

08002b94 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d01c      	beq.n	8002bd6 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002b9c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002b9e:	2601      	movs	r6, #1
 8002ba0:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002baa:	6802      	ldr	r2, [r0, #0]
 8002bac:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bae:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb0:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb4:	680c      	ldr	r4, [r1, #0]
 8002bb6:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb8:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbc:	684b      	ldr	r3, [r1, #4]
 8002bbe:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc0:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bc2:	6802      	ldr	r2, [r0, #0]
 8002bc4:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bc6:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002bd0:	4618      	mov	r0, r3
}
 8002bd2:	bc70      	pop	{r4, r5, r6}
 8002bd4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002bd6:	2002      	movs	r0, #2
}
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bdc:	4770      	bx	lr

08002bde <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002bde:	6802      	ldr	r2, [r0, #0]
 8002be0:	68d3      	ldr	r3, [r2, #12]
 8002be2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002be6:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002be8:	2320      	movs	r3, #32
 8002bea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8002bee:	4770      	bx	lr

08002bf0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf0:	6802      	ldr	r2, [r0, #0]
 8002bf2:	68d3      	ldr	r3, [r2, #12]
 8002bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bf8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfa:	6802      	ldr	r2, [r0, #0]
 8002bfc:	6953      	ldr	r3, [r2, #20]
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c04:	2320      	movs	r3, #32
 8002c06:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8002c0a:	4770      	bx	lr

08002c0c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c0c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b21      	cmp	r3, #33	; 0x21
 8002c14:	d12a      	bne.n	8002c6c <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c16:	6883      	ldr	r3, [r0, #8]
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1c:	d016      	beq.n	8002c4c <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c1e:	6a03      	ldr	r3, [r0, #32]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	6202      	str	r2, [r0, #32]
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	6803      	ldr	r3, [r0, #0]
 8002c28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c2a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002c32:	b9eb      	cbnz	r3, 8002c70 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c34:	6802      	ldr	r2, [r0, #0]
 8002c36:	68d3      	ldr	r3, [r2, #12]
 8002c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3c:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c3e:	6802      	ldr	r2, [r0, #0]
 8002c40:	68d3      	ldr	r3, [r2, #12]
 8002c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c46:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8002c48:	2000      	movs	r0, #0
 8002c4a:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c4c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	6802      	ldr	r2, [r0, #0]
 8002c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c56:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c58:	6903      	ldr	r3, [r0, #16]
 8002c5a:	b91b      	cbnz	r3, 8002c64 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8002c5c:	6a03      	ldr	r3, [r0, #32]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	6203      	str	r3, [r0, #32]
 8002c62:	e7e2      	b.n	8002c2a <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8002c64:	6a03      	ldr	r3, [r0, #32]
 8002c66:	3301      	adds	r3, #1
 8002c68:	6203      	str	r3, [r0, #32]
 8002c6a:	e7de      	b.n	8002c2a <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	4770      	bx	lr
    return HAL_OK;
 8002c70:	2000      	movs	r0, #0
  }
}
 8002c72:	4770      	bx	lr

08002c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c78:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c7a:	6802      	ldr	r2, [r0, #0]
 8002c7c:	6913      	ldr	r3, [r2, #16]
 8002c7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c82:	68c1      	ldr	r1, [r0, #12]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c88:	6883      	ldr	r3, [r0, #8]
 8002c8a:	6902      	ldr	r2, [r0, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	6942      	ldr	r2, [r0, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	69c2      	ldr	r2, [r0, #28]
 8002c94:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002c96:	6801      	ldr	r1, [r0, #0]
 8002c98:	68cb      	ldr	r3, [r1, #12]
 8002c9a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c9e:	f023 030c 	bic.w	r3, r3, #12
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca6:	6802      	ldr	r2, [r0, #0]
 8002ca8:	6953      	ldr	r3, [r2, #20]
 8002caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cae:	6981      	ldr	r1, [r0, #24]
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb4:	69c3      	ldr	r3, [r0, #28]
 8002cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cba:	d060      	beq.n	8002d7e <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cbc:	6803      	ldr	r3, [r0, #0]
 8002cbe:	4ab8      	ldr	r2, [pc, #736]	; (8002fa0 <UART_SetConfig+0x32c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	f000 8114 	beq.w	8002eee <UART_SetConfig+0x27a>
 8002cc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	f000 810f 	beq.w	8002eee <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002cd0:	f7ff fba2 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002cd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cdc:	6865      	ldr	r5, [r4, #4]
 8002cde:	00ad      	lsls	r5, r5, #2
 8002ce0:	fbb0 f5f5 	udiv	r5, r0, r5
 8002ce4:	4faf      	ldr	r7, [pc, #700]	; (8002fa4 <UART_SetConfig+0x330>)
 8002ce6:	fba7 3505 	umull	r3, r5, r7, r5
 8002cea:	096d      	lsrs	r5, r5, #5
 8002cec:	012e      	lsls	r6, r5, #4
 8002cee:	f7ff fb93 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002cf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cfa:	6865      	ldr	r5, [r4, #4]
 8002cfc:	00ad      	lsls	r5, r5, #2
 8002cfe:	fbb0 f9f5 	udiv	r9, r0, r5
 8002d02:	f7ff fb89 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d0e:	6865      	ldr	r5, [r4, #4]
 8002d10:	00ad      	lsls	r5, r5, #2
 8002d12:	fbb0 f5f5 	udiv	r5, r0, r5
 8002d16:	fba7 3505 	umull	r3, r5, r7, r5
 8002d1a:	096d      	lsrs	r5, r5, #5
 8002d1c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002d20:	fb08 9515 	mls	r5, r8, r5, r9
 8002d24:	012d      	lsls	r5, r5, #4
 8002d26:	3532      	adds	r5, #50	; 0x32
 8002d28:	fba7 3505 	umull	r3, r5, r7, r5
 8002d2c:	096d      	lsrs	r5, r5, #5
 8002d2e:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002d32:	4435      	add	r5, r6
 8002d34:	f7ff fb70 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002d38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d40:	6866      	ldr	r6, [r4, #4]
 8002d42:	00b6      	lsls	r6, r6, #2
 8002d44:	fbb0 f6f6 	udiv	r6, r0, r6
 8002d48:	f7ff fb66 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002d4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d54:	6863      	ldr	r3, [r4, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d5c:	fba7 3000 	umull	r3, r0, r7, r0
 8002d60:	0940      	lsrs	r0, r0, #5
 8002d62:	fb08 6810 	mls	r8, r8, r0, r6
 8002d66:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002d6a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002d6e:	fba7 3708 	umull	r3, r7, r7, r8
 8002d72:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	442f      	add	r7, r5
 8002d7a:	609f      	str	r7, [r3, #8]
    }
  }
}
 8002d7c:	e10d      	b.n	8002f9a <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d7e:	6803      	ldr	r3, [r0, #0]
 8002d80:	4a87      	ldr	r2, [pc, #540]	; (8002fa0 <UART_SetConfig+0x32c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d05b      	beq.n	8002e3e <UART_SetConfig+0x1ca>
 8002d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d057      	beq.n	8002e3e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d8e:	f7ff fb43 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002d92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d9a:	6865      	ldr	r5, [r4, #4]
 8002d9c:	006d      	lsls	r5, r5, #1
 8002d9e:	fbb0 f5f5 	udiv	r5, r0, r5
 8002da2:	4f80      	ldr	r7, [pc, #512]	; (8002fa4 <UART_SetConfig+0x330>)
 8002da4:	fba7 3505 	umull	r3, r5, r7, r5
 8002da8:	096d      	lsrs	r5, r5, #5
 8002daa:	012e      	lsls	r6, r5, #4
 8002dac:	f7ff fb34 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002db0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002db4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002db8:	6865      	ldr	r5, [r4, #4]
 8002dba:	006d      	lsls	r5, r5, #1
 8002dbc:	fbb0 f9f5 	udiv	r9, r0, r5
 8002dc0:	f7ff fb2a 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002dc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dcc:	6865      	ldr	r5, [r4, #4]
 8002dce:	006d      	lsls	r5, r5, #1
 8002dd0:	fbb0 f5f5 	udiv	r5, r0, r5
 8002dd4:	fba7 3505 	umull	r3, r5, r7, r5
 8002dd8:	096d      	lsrs	r5, r5, #5
 8002dda:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002dde:	fb08 9515 	mls	r5, r8, r5, r9
 8002de2:	00ed      	lsls	r5, r5, #3
 8002de4:	3532      	adds	r5, #50	; 0x32
 8002de6:	fba7 3505 	umull	r3, r5, r7, r5
 8002dea:	096d      	lsrs	r5, r5, #5
 8002dec:	006d      	lsls	r5, r5, #1
 8002dee:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002df2:	4435      	add	r5, r6
 8002df4:	f7ff fb10 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002df8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e00:	6866      	ldr	r6, [r4, #4]
 8002e02:	0076      	lsls	r6, r6, #1
 8002e04:	fbb0 f6f6 	udiv	r6, r0, r6
 8002e08:	f7ff fb06 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002e0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e14:	6863      	ldr	r3, [r4, #4]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1c:	fba7 2303 	umull	r2, r3, r7, r3
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	fb08 6813 	mls	r8, r8, r3, r6
 8002e26:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8002e2a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002e2e:	fba7 3708 	umull	r3, r7, r7, r8
 8002e32:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	442f      	add	r7, r5
 8002e3a:	609f      	str	r7, [r3, #8]
 8002e3c:	e0ad      	b.n	8002f9a <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002e3e:	f7ff fafb 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002e42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e4a:	6865      	ldr	r5, [r4, #4]
 8002e4c:	006d      	lsls	r5, r5, #1
 8002e4e:	fbb0 f5f5 	udiv	r5, r0, r5
 8002e52:	4f54      	ldr	r7, [pc, #336]	; (8002fa4 <UART_SetConfig+0x330>)
 8002e54:	fba7 3505 	umull	r3, r5, r7, r5
 8002e58:	096d      	lsrs	r5, r5, #5
 8002e5a:	012e      	lsls	r6, r5, #4
 8002e5c:	f7ff faec 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002e60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e68:	6865      	ldr	r5, [r4, #4]
 8002e6a:	006d      	lsls	r5, r5, #1
 8002e6c:	fbb0 f9f5 	udiv	r9, r0, r5
 8002e70:	f7ff fae2 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002e74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e7c:	6865      	ldr	r5, [r4, #4]
 8002e7e:	006d      	lsls	r5, r5, #1
 8002e80:	fbb0 f5f5 	udiv	r5, r0, r5
 8002e84:	fba7 3505 	umull	r3, r5, r7, r5
 8002e88:	096d      	lsrs	r5, r5, #5
 8002e8a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002e8e:	fb08 9515 	mls	r5, r8, r5, r9
 8002e92:	00ed      	lsls	r5, r5, #3
 8002e94:	3532      	adds	r5, #50	; 0x32
 8002e96:	fba7 3505 	umull	r3, r5, r7, r5
 8002e9a:	096d      	lsrs	r5, r5, #5
 8002e9c:	006d      	lsls	r5, r5, #1
 8002e9e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002ea2:	4435      	add	r5, r6
 8002ea4:	f7ff fac8 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002ea8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002eac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002eb0:	6866      	ldr	r6, [r4, #4]
 8002eb2:	0076      	lsls	r6, r6, #1
 8002eb4:	fbb0 f6f6 	udiv	r6, r0, r6
 8002eb8:	f7ff fabe 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002ebc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ec0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ec4:	6863      	ldr	r3, [r4, #4]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ecc:	fba7 2303 	umull	r2, r3, r7, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	fb08 6813 	mls	r8, r8, r3, r6
 8002ed6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8002eda:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002ede:	fba7 3708 	umull	r3, r7, r7, r8
 8002ee2:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	442f      	add	r7, r5
 8002eea:	609f      	str	r7, [r3, #8]
 8002eec:	e055      	b.n	8002f9a <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002eee:	f7ff faa3 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002ef2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ef6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002efa:	6865      	ldr	r5, [r4, #4]
 8002efc:	00ad      	lsls	r5, r5, #2
 8002efe:	fbb0 f5f5 	udiv	r5, r0, r5
 8002f02:	4f28      	ldr	r7, [pc, #160]	; (8002fa4 <UART_SetConfig+0x330>)
 8002f04:	fba7 3505 	umull	r3, r5, r7, r5
 8002f08:	096d      	lsrs	r5, r5, #5
 8002f0a:	012e      	lsls	r6, r5, #4
 8002f0c:	f7ff fa94 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002f10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f18:	6865      	ldr	r5, [r4, #4]
 8002f1a:	00ad      	lsls	r5, r5, #2
 8002f1c:	fbb0 f9f5 	udiv	r9, r0, r5
 8002f20:	f7ff fa8a 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002f24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f2c:	6865      	ldr	r5, [r4, #4]
 8002f2e:	00ad      	lsls	r5, r5, #2
 8002f30:	fbb0 f5f5 	udiv	r5, r0, r5
 8002f34:	fba7 3505 	umull	r3, r5, r7, r5
 8002f38:	096d      	lsrs	r5, r5, #5
 8002f3a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002f3e:	fb08 9515 	mls	r5, r8, r5, r9
 8002f42:	012d      	lsls	r5, r5, #4
 8002f44:	3532      	adds	r5, #50	; 0x32
 8002f46:	fba7 3505 	umull	r3, r5, r7, r5
 8002f4a:	096d      	lsrs	r5, r5, #5
 8002f4c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002f50:	4435      	add	r5, r6
 8002f52:	f7ff fa71 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002f56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f5e:	6866      	ldr	r6, [r4, #4]
 8002f60:	00b6      	lsls	r6, r6, #2
 8002f62:	fbb0 f6f6 	udiv	r6, r0, r6
 8002f66:	f7ff fa67 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002f6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f72:	6863      	ldr	r3, [r4, #4]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f7a:	fba7 3000 	umull	r3, r0, r7, r0
 8002f7e:	0940      	lsrs	r0, r0, #5
 8002f80:	fb08 6810 	mls	r8, r8, r0, r6
 8002f84:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002f88:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002f8c:	fba7 3708 	umull	r3, r7, r7, r8
 8002f90:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	442f      	add	r7, r5
 8002f98:	609f      	str	r7, [r3, #8]
}
 8002f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40011000 	.word	0x40011000
 8002fa4:	51eb851f 	.word	0x51eb851f

08002fa8 <HAL_UART_Init>:
  if (huart == NULL)
 8002fa8:	b358      	cbz	r0, 8003002 <HAL_UART_Init+0x5a>
{
 8002faa:	b510      	push	{r4, lr}
 8002fac:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002fae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fb2:	b30b      	cbz	r3, 8002ff8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002fb4:	2324      	movs	r3, #36	; 0x24
 8002fb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002fba:	6822      	ldr	r2, [r4, #0]
 8002fbc:	68d3      	ldr	r3, [r2, #12]
 8002fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fc2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f7ff fe55 	bl	8002c74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	6913      	ldr	r3, [r2, #16]
 8002fce:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002fd2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd4:	6822      	ldr	r2, [r4, #0]
 8002fd6:	6953      	ldr	r3, [r2, #20]
 8002fd8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002fdc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002fde:	6822      	ldr	r2, [r4, #0]
 8002fe0:	68d3      	ldr	r3, [r2, #12]
 8002fe2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fe6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	2000      	movs	r0, #0
 8002fea:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fec:	2320      	movs	r3, #32
 8002fee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002ff6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002ff8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002ffc:	f000 ff12 	bl	8003e24 <HAL_UART_MspInit>
 8003000:	e7d8      	b.n	8002fb4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003002:	2001      	movs	r0, #1
}
 8003004:	4770      	bx	lr
	...

08003008 <HAL_UART_Receive_DMA>:
{
 8003008:	b530      	push	{r4, r5, lr}
 800300a:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 800300c:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8003010:	b2e4      	uxtb	r4, r4
 8003012:	2c20      	cmp	r4, #32
 8003014:	d13d      	bne.n	8003092 <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8003016:	2900      	cmp	r1, #0
 8003018:	d03e      	beq.n	8003098 <HAL_UART_Receive_DMA+0x90>
 800301a:	2a00      	cmp	r2, #0
 800301c:	d03e      	beq.n	800309c <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 800301e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003022:	2b01      	cmp	r3, #1
 8003024:	d03c      	beq.n	80030a0 <HAL_UART_Receive_DMA+0x98>
 8003026:	4613      	mov	r3, r2
 8003028:	460a      	mov	r2, r1
 800302a:	4604      	mov	r4, r0
 800302c:	2101      	movs	r1, #1
 800302e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8003032:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003034:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003036:	2500      	movs	r5, #0
 8003038:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800303a:	2122      	movs	r1, #34	; 0x22
 800303c:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003040:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003042:	4818      	ldr	r0, [pc, #96]	; (80030a4 <HAL_UART_Receive_DMA+0x9c>)
 8003044:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003046:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003048:	4817      	ldr	r0, [pc, #92]	; (80030a8 <HAL_UART_Receive_DMA+0xa0>)
 800304a:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800304c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800304e:	4817      	ldr	r0, [pc, #92]	; (80030ac <HAL_UART_Receive_DMA+0xa4>)
 8003050:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8003052:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003054:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003056:	6821      	ldr	r1, [r4, #0]
 8003058:	3104      	adds	r1, #4
 800305a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800305c:	f7fe fa8a 	bl	8001574 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003060:	9501      	str	r5, [sp, #4]
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	9201      	str	r2, [sp, #4]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	9201      	str	r2, [sp, #4]
 800306c:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 800306e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003078:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307a:	6822      	ldr	r2, [r4, #0]
 800307c:	6953      	ldr	r3, [r2, #20]
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003084:	6822      	ldr	r2, [r4, #0]
 8003086:	6953      	ldr	r3, [r2, #20]
 8003088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308c:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800308e:	4628      	mov	r0, r5
 8003090:	e000      	b.n	8003094 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8003092:	2002      	movs	r0, #2
}
 8003094:	b003      	add	sp, #12
 8003096:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8003098:	2001      	movs	r0, #1
 800309a:	e7fb      	b.n	8003094 <HAL_UART_Receive_DMA+0x8c>
 800309c:	2001      	movs	r0, #1
 800309e:	e7f9      	b.n	8003094 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 80030a0:	2002      	movs	r0, #2
 80030a2:	e7f7      	b.n	8003094 <HAL_UART_Receive_DMA+0x8c>
 80030a4:	080030cf 	.word	0x080030cf
 80030a8:	080031ab 	.word	0x080031ab
 80030ac:	080031b7 	.word	0x080031b7

080030b0 <HAL_UART_TxCpltCallback>:
}
 80030b0:	4770      	bx	lr

080030b2 <UART_EndTransmit_IT>:
{
 80030b2:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030b4:	6801      	ldr	r1, [r0, #0]
 80030b6:	68cb      	ldr	r3, [r1, #12]
 80030b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030bc:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80030be:	2320      	movs	r3, #32
 80030c0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80030c4:	f7ff fff4 	bl	80030b0 <HAL_UART_TxCpltCallback>
}
 80030c8:	2000      	movs	r0, #0
 80030ca:	bd08      	pop	{r3, pc}

080030cc <HAL_UART_RxCpltCallback>:
}
 80030cc:	4770      	bx	lr

080030ce <UART_DMAReceiveCplt>:
{
 80030ce:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80030d2:	6802      	ldr	r2, [r0, #0]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80030da:	d113      	bne.n	8003104 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 80030dc:	2200      	movs	r2, #0
 80030de:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	68ca      	ldr	r2, [r1, #12]
 80030e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e8:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	694a      	ldr	r2, [r1, #20]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	694a      	ldr	r2, [r1, #20]
 80030f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fc:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ffe1 	bl	80030cc <HAL_UART_RxCpltCallback>
}
 800310a:	bd08      	pop	{r3, pc}

0800310c <UART_Receive_IT>:
{
 800310c:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800310e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b22      	cmp	r3, #34	; 0x22
 8003116:	d145      	bne.n	80031a4 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003118:	6883      	ldr	r3, [r0, #8]
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311e:	d00e      	beq.n	800313e <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003120:	6903      	ldr	r3, [r0, #16]
 8003122:	bb03      	cbnz	r3, 8003166 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003124:	6803      	ldr	r3, [r0, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800312a:	1c59      	adds	r1, r3, #1
 800312c:	6281      	str	r1, [r0, #40]	; 0x28
 800312e:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8003130:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003132:	3b01      	subs	r3, #1
 8003134:	b29b      	uxth	r3, r3
 8003136:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003138:	b1f3      	cbz	r3, 8003178 <UART_Receive_IT+0x6c>
    return HAL_OK;
 800313a:	2000      	movs	r0, #0
 800313c:	e033      	b.n	80031a6 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800313e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003140:	6903      	ldr	r3, [r0, #16]
 8003142:	b943      	cbnz	r3, 8003156 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003144:	6803      	ldr	r3, [r0, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314c:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800314e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003150:	3302      	adds	r3, #2
 8003152:	6283      	str	r3, [r0, #40]	; 0x28
 8003154:	e7ec      	b.n	8003130 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003156:	6803      	ldr	r3, [r0, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800315e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003160:	3301      	adds	r3, #1
 8003162:	6283      	str	r3, [r0, #40]	; 0x28
 8003164:	e7e4      	b.n	8003130 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003166:	6803      	ldr	r3, [r0, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800316c:	1c51      	adds	r1, r2, #1
 800316e:	6281      	str	r1, [r0, #40]	; 0x28
 8003170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003174:	7013      	strb	r3, [r2, #0]
 8003176:	e7db      	b.n	8003130 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003178:	6802      	ldr	r2, [r0, #0]
 800317a:	68d3      	ldr	r3, [r2, #12]
 800317c:	f023 0320 	bic.w	r3, r3, #32
 8003180:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003182:	6802      	ldr	r2, [r0, #0]
 8003184:	68d3      	ldr	r3, [r2, #12]
 8003186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800318a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800318c:	6802      	ldr	r2, [r0, #0]
 800318e:	6953      	ldr	r3, [r2, #20]
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003196:	2320      	movs	r3, #32
 8003198:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800319c:	f7ff ff96 	bl	80030cc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80031a0:	2000      	movs	r0, #0
 80031a2:	e000      	b.n	80031a6 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80031a4:	2002      	movs	r0, #2
}
 80031a6:	bd08      	pop	{r3, pc}

080031a8 <HAL_UART_RxHalfCpltCallback>:
}
 80031a8:	4770      	bx	lr

080031aa <UART_DMARxHalfCplt>:
{
 80031aa:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80031ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80031ae:	f7ff fffb 	bl	80031a8 <HAL_UART_RxHalfCpltCallback>
}
 80031b2:	bd08      	pop	{r3, pc}

080031b4 <HAL_UART_ErrorCallback>:
}
 80031b4:	4770      	bx	lr

080031b6 <UART_DMAError>:
{
 80031b6:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80031be:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b21      	cmp	r3, #33	; 0x21
 80031c6:	d010      	beq.n	80031ea <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80031d0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b22      	cmp	r3, #34	; 0x22
 80031d8:	d011      	beq.n	80031fe <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80031da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80031e2:	4620      	mov	r0, r4
 80031e4:	f7ff ffe6 	bl	80031b4 <HAL_UART_ErrorCallback>
}
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80031ee:	2a00      	cmp	r2, #0
 80031f0:	d0ea      	beq.n	80031c8 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80031f6:	4620      	mov	r0, r4
 80031f8:	f7ff fcf1 	bl	8002bde <UART_EndTxTransfer>
 80031fc:	e7e4      	b.n	80031c8 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80031fe:	2a00      	cmp	r2, #0
 8003200:	d0eb      	beq.n	80031da <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003206:	4620      	mov	r0, r4
 8003208:	f7ff fcf2 	bl	8002bf0 <UART_EndRxTransfer>
 800320c:	e7e5      	b.n	80031da <UART_DMAError+0x24>

0800320e <UART_DMAAbortOnError>:
{
 800320e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003210:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003216:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003218:	f7ff ffcc 	bl	80031b4 <HAL_UART_ErrorCallback>
}
 800321c:	bd08      	pop	{r3, pc}
	...

08003220 <HAL_UART_IRQHandler>:
{
 8003220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003222:	b083      	sub	sp, #12
 8003224:	4605      	mov	r5, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003226:	6803      	ldr	r3, [r0, #0]
 8003228:	681c      	ldr	r4, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800322a:	68df      	ldr	r7, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800322c:	695e      	ldr	r6, [r3, #20]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800322e:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 8003230:	68da      	ldr	r2, [r3, #12]
    if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003232:	f011 0f10 	tst.w	r1, #16
 8003236:	d003      	beq.n	8003240 <HAL_UART_IRQHandler+0x20>
 8003238:	f002 0210 	and.w	r2, r2, #16
 800323c:	2a00      	cmp	r2, #0
 800323e:	d15d      	bne.n	80032fc <HAL_UART_IRQHandler+0xdc>
  if (errorflags == RESET)
 8003240:	f014 030f 	ands.w	r3, r4, #15
 8003244:	d105      	bne.n	8003252 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003246:	f014 0f20 	tst.w	r4, #32
 800324a:	d002      	beq.n	8003252 <HAL_UART_IRQHandler+0x32>
 800324c:	f017 0f20 	tst.w	r7, #32
 8003250:	d15e      	bne.n	8003310 <HAL_UART_IRQHandler+0xf0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003252:	2b00      	cmp	r3, #0
 8003254:	d072      	beq.n	800333c <HAL_UART_IRQHandler+0x11c>
 8003256:	f016 0601 	ands.w	r6, r6, #1
 800325a:	d102      	bne.n	8003262 <HAL_UART_IRQHandler+0x42>
 800325c:	f417 7f90 	tst.w	r7, #288	; 0x120
 8003260:	d06c      	beq.n	800333c <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003262:	f014 0f01 	tst.w	r4, #1
 8003266:	d006      	beq.n	8003276 <HAL_UART_IRQHandler+0x56>
 8003268:	f417 7f80 	tst.w	r7, #256	; 0x100
 800326c:	d003      	beq.n	8003276 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800326e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003276:	f014 0f04 	tst.w	r4, #4
 800327a:	d004      	beq.n	8003286 <HAL_UART_IRQHandler+0x66>
 800327c:	b11e      	cbz	r6, 8003286 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800327e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003286:	f014 0f02 	tst.w	r4, #2
 800328a:	d004      	beq.n	8003296 <HAL_UART_IRQHandler+0x76>
 800328c:	b11e      	cbz	r6, 8003296 <HAL_UART_IRQHandler+0x76>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800328e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003296:	f014 0f08 	tst.w	r4, #8
 800329a:	d004      	beq.n	80032a6 <HAL_UART_IRQHandler+0x86>
 800329c:	b11e      	cbz	r6, 80032a6 <HAL_UART_IRQHandler+0x86>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800329e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80032a0:	f043 0308 	orr.w	r3, r3, #8
 80032a4:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032a6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d053      	beq.n	8003354 <HAL_UART_IRQHandler+0x134>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ac:	f014 0f20 	tst.w	r4, #32
 80032b0:	d002      	beq.n	80032b8 <HAL_UART_IRQHandler+0x98>
 80032b2:	f017 0f20 	tst.w	r7, #32
 80032b6:	d12f      	bne.n	8003318 <HAL_UART_IRQHandler+0xf8>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032c0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80032c2:	f012 0f08 	tst.w	r2, #8
 80032c6:	d101      	bne.n	80032cc <HAL_UART_IRQHandler+0xac>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d031      	beq.n	8003330 <HAL_UART_IRQHandler+0x110>
        UART_EndRxTransfer(huart);
 80032cc:	4628      	mov	r0, r5
 80032ce:	f7ff fc8f 	bl	8002bf0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d2:	682b      	ldr	r3, [r5, #0]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80032da:	d025      	beq.n	8003328 <HAL_UART_IRQHandler+0x108>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80032e4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80032e6:	b1db      	cbz	r3, 8003320 <HAL_UART_IRQHandler+0x100>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e8:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_UART_IRQHandler+0x148>)
 80032ea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ec:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80032ee:	f7fe f9c5 	bl	800167c <HAL_DMA_Abort_IT>
 80032f2:	b378      	cbz	r0, 8003354 <HAL_UART_IRQHandler+0x134>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032f4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80032f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80032f8:	4798      	blx	r3
 80032fa:	e02b      	b.n	8003354 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032fc:	2200      	movs	r2, #0
 80032fe:	9201      	str	r2, [sp, #4]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	9201      	str	r2, [sp, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	9b01      	ldr	r3, [sp, #4]
      HAL_UART_RxIdleCallback(huart);
 800330a:	f000 fde9 	bl	8003ee0 <HAL_UART_RxIdleCallback>
 800330e:	e797      	b.n	8003240 <HAL_UART_IRQHandler+0x20>
      UART_Receive_IT(huart);
 8003310:	4628      	mov	r0, r5
 8003312:	f7ff fefb 	bl	800310c <UART_Receive_IT>
      return;
 8003316:	e01d      	b.n	8003354 <HAL_UART_IRQHandler+0x134>
        UART_Receive_IT(huart);
 8003318:	4628      	mov	r0, r5
 800331a:	f7ff fef7 	bl	800310c <UART_Receive_IT>
 800331e:	e7cb      	b.n	80032b8 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 8003320:	4628      	mov	r0, r5
 8003322:	f7ff ff47 	bl	80031b4 <HAL_UART_ErrorCallback>
 8003326:	e015      	b.n	8003354 <HAL_UART_IRQHandler+0x134>
          HAL_UART_ErrorCallback(huart);
 8003328:	4628      	mov	r0, r5
 800332a:	f7ff ff43 	bl	80031b4 <HAL_UART_ErrorCallback>
 800332e:	e011      	b.n	8003354 <HAL_UART_IRQHandler+0x134>
        HAL_UART_ErrorCallback(huart);
 8003330:	4628      	mov	r0, r5
 8003332:	f7ff ff3f 	bl	80031b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003336:	2300      	movs	r3, #0
 8003338:	63eb      	str	r3, [r5, #60]	; 0x3c
 800333a:	e00b      	b.n	8003354 <HAL_UART_IRQHandler+0x134>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800333c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003340:	d002      	beq.n	8003348 <HAL_UART_IRQHandler+0x128>
 8003342:	f017 0f80 	tst.w	r7, #128	; 0x80
 8003346:	d107      	bne.n	8003358 <HAL_UART_IRQHandler+0x138>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003348:	f014 0f40 	tst.w	r4, #64	; 0x40
 800334c:	d002      	beq.n	8003354 <HAL_UART_IRQHandler+0x134>
 800334e:	f017 0f40 	tst.w	r7, #64	; 0x40
 8003352:	d105      	bne.n	8003360 <HAL_UART_IRQHandler+0x140>
}
 8003354:	b003      	add	sp, #12
 8003356:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_Transmit_IT(huart);
 8003358:	4628      	mov	r0, r5
 800335a:	f7ff fc57 	bl	8002c0c <UART_Transmit_IT>
    return;
 800335e:	e7f9      	b.n	8003354 <HAL_UART_IRQHandler+0x134>
    UART_EndTransmit_IT(huart);
 8003360:	4628      	mov	r0, r5
 8003362:	f7ff fea6 	bl	80030b2 <UART_EndTransmit_IT>
    return;
 8003366:	e7f5      	b.n	8003354 <HAL_UART_IRQHandler+0x134>
 8003368:	0800320f 	.word	0x0800320f

0800336c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800336c:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 800336e:	4805      	ldr	r0, [pc, #20]	; (8003384 <MX_CRC_Init+0x18>)
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <MX_CRC_Init+0x1c>)
 8003372:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003374:	f7fe f80a 	bl	800138c <HAL_CRC_Init>
 8003378:	b900      	cbnz	r0, 800337c <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 800337a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800337c:	f000 fb06 	bl	800398c <Error_Handler>
}
 8003380:	e7fb      	b.n	800337a <MX_CRC_Init+0xe>
 8003382:	bf00      	nop
 8003384:	20000394 	.word	0x20000394
 8003388:	40023000 	.word	0x40023000

0800338c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800338c:	6802      	ldr	r2, [r0, #0]
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_CRC_MspInit+0x28>)
 8003390:	429a      	cmp	r2, r3
 8003392:	d000      	beq.n	8003396 <HAL_CRC_MspInit+0xa>
 8003394:	4770      	bx	lr
{
 8003396:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003398:	2300      	movs	r3, #0
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_CRC_MspInit+0x2c>)
 800339e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80033b0:	b002      	add	sp, #8
 80033b2:	4770      	bx	lr
 80033b4:	40023000 	.word	0x40023000
 80033b8:	40023800 	.word	0x40023800

080033bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80033bc:	b500      	push	{lr}
 80033be:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80033c0:	2200      	movs	r2, #0
 80033c2:	9201      	str	r2, [sp, #4]
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <MX_DMA_Init+0x30>)
 80033c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80033cc:	6319      	str	r1, [r3, #48]	; 0x30
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 4, 0);
 80033d8:	2104      	movs	r1, #4
 80033da:	2039      	movs	r0, #57	; 0x39
 80033dc:	f7fd ff94 	bl	8001308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80033e0:	2039      	movs	r0, #57	; 0x39
 80033e2:	f7fd ffc5 	bl	8001370 <HAL_NVIC_EnableIRQ>

}
 80033e6:	b003      	add	sp, #12
 80033e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80033ec:	40023800 	.word	0x40023800

080033f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80033f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f4:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f6:	2400      	movs	r4, #0
 80033f8:	9405      	str	r4, [sp, #20]
 80033fa:	9406      	str	r4, [sp, #24]
 80033fc:	9407      	str	r4, [sp, #28]
 80033fe:	9408      	str	r4, [sp, #32]
 8003400:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003402:	9400      	str	r4, [sp, #0]
 8003404:	4b52      	ldr	r3, [pc, #328]	; (8003550 <MX_GPIO_Init+0x160>)
 8003406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003408:	f042 0204 	orr.w	r2, r2, #4
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
 800340e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003410:	f002 0204 	and.w	r2, r2, #4
 8003414:	9200      	str	r2, [sp, #0]
 8003416:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003418:	9401      	str	r4, [sp, #4]
 800341a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
 8003422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003424:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003428:	9201      	str	r2, [sp, #4]
 800342a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	9402      	str	r4, [sp, #8]
 800342e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
 8003436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003438:	f002 0201 	and.w	r2, r2, #1
 800343c:	9202      	str	r2, [sp, #8]
 800343e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003440:	9403      	str	r4, [sp, #12]
 8003442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003444:	f042 0202 	orr.w	r2, r2, #2
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
 800344a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344c:	f002 0202 	and.w	r2, r2, #2
 8003450:	9203      	str	r2, [sp, #12]
 8003452:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003454:	9404      	str	r4, [sp, #16]
 8003456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003458:	f042 0208 	orr.w	r2, r2, #8
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	9304      	str	r3, [sp, #16]
 8003466:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003468:	4f3a      	ldr	r7, [pc, #232]	; (8003554 <MX_GPIO_Init+0x164>)
 800346a:	4622      	mov	r2, r4
 800346c:	2120      	movs	r1, #32
 800346e:	4638      	mov	r0, r7
 8003470:	f7fe fc04 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8003474:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8003564 <MX_GPIO_Init+0x174>
 8003478:	4622      	mov	r2, r4
 800347a:	2120      	movs	r1, #32
 800347c:	4648      	mov	r0, r9
 800347e:	f7fe fbfd 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8003482:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8003568 <MX_GPIO_Init+0x178>
 8003486:	4622      	mov	r2, r4
 8003488:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800348c:	4640      	mov	r0, r8
 800348e:	f7fe fbf5 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC3 PC4 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003492:	f64f 731b 	movw	r3, #65307	; 0xff1b
 8003496:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003498:	2503      	movs	r5, #3
 800349a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800349e:	a905      	add	r1, sp, #20
 80034a0:	4648      	mov	r0, r9
 80034a2:	f7fe fb19 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034a6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034a8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80034ac:	a905      	add	r1, sp, #20
 80034ae:	482a      	ldr	r0, [pc, #168]	; (8003558 <MX_GPIO_Init+0x168>)
 80034b0:	f7fe fb12 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA6 PA7 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80034b4:	f649 63df 	movw	r3, #40671	; 0x9edf
 80034b8:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ba:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034be:	a905      	add	r1, sp, #20
 80034c0:	4638      	mov	r0, r7
 80034c2:	f7fe fb09 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034c6:	f04f 0a20 	mov.w	sl, #32
 80034ca:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ce:	2601      	movs	r6, #1
 80034d0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	a905      	add	r1, sp, #20
 80034d8:	4638      	mov	r0, r7
 80034da:	f7fe fafd 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034de:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e8:	a905      	add	r1, sp, #20
 80034ea:	4648      	mov	r0, r9
 80034ec:	f7fe faf4 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 80034f0:	2337      	movs	r3, #55	; 0x37
 80034f2:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034f4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f8:	a905      	add	r1, sp, #20
 80034fa:	4640      	mov	r0, r8
 80034fc:	f7fe faec 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8003500:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003504:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003506:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350c:	a905      	add	r1, sp, #20
 800350e:	4640      	mov	r0, r8
 8003510:	f7fe fae2 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 8003514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003518:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <MX_GPIO_Init+0x16c>)
 800351c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 8003520:	a905      	add	r1, sp, #20
 8003522:	4638      	mov	r0, r7
 8003524:	f7fe fad8 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003528:	2304      	movs	r3, #4
 800352a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800352c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003530:	a905      	add	r1, sp, #20
 8003532:	480b      	ldr	r0, [pc, #44]	; (8003560 <MX_GPIO_Init+0x170>)
 8003534:	f7fe fad0 	bl	8001ad8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8003538:	4622      	mov	r2, r4
 800353a:	4631      	mov	r1, r6
 800353c:	2017      	movs	r0, #23
 800353e:	f7fd fee3 	bl	8001308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003542:	2017      	movs	r0, #23
 8003544:	f7fd ff14 	bl	8001370 <HAL_NVIC_EnableIRQ>

}
 8003548:	b00a      	add	sp, #40	; 0x28
 800354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
 8003554:	40020000 	.word	0x40020000
 8003558:	40021c00 	.word	0x40021c00
 800355c:	10110000 	.word	0x10110000
 8003560:	40020c00 	.word	0x40020c00
 8003564:	40020800 	.word	0x40020800
 8003568:	40020400 	.word	0x40020400

0800356c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800356c:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800356e:	480b      	ldr	r0, [pc, #44]	; (800359c <MX_I2C2_Init+0x30>)
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <MX_I2C2_Init+0x34>)
 8003572:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <MX_I2C2_Init+0x38>)
 8003576:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003578:	2300      	movs	r3, #0
 800357a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800357c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800357e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003582:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003584:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003586:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003588:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800358a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800358c:	f7fe fb8a 	bl	8001ca4 <HAL_I2C_Init>
 8003590:	b900      	cbnz	r0, 8003594 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
  }

}
 8003592:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003594:	f000 f9fa 	bl	800398c <Error_Handler>
}
 8003598:	e7fb      	b.n	8003592 <MX_I2C2_Init+0x26>
 800359a:	bf00      	nop
 800359c:	200002a4 	.word	0x200002a4
 80035a0:	40005800 	.word	0x40005800
 80035a4:	00061a80 	.word	0x00061a80

080035a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80035a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035ac:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ae:	2300      	movs	r3, #0
 80035b0:	9303      	str	r3, [sp, #12]
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	9305      	str	r3, [sp, #20]
 80035b6:	9306      	str	r3, [sp, #24]
 80035b8:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 80035ba:	6802      	ldr	r2, [r0, #0]
 80035bc:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <HAL_I2C_MspInit+0x90>)
 80035be:	429a      	cmp	r2, r3
 80035c0:	d002      	beq.n	80035c8 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80035c2:	b009      	add	sp, #36	; 0x24
 80035c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c8:	2500      	movs	r5, #0
 80035ca:	9501      	str	r5, [sp, #4]
 80035cc:	4c1b      	ldr	r4, [pc, #108]	; (800363c <HAL_I2C_MspInit+0x94>)
 80035ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	6323      	str	r3, [r4, #48]	; 0x30
 80035d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035e6:	f04f 0912 	mov.w	r9, #18
 80035ea:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035ee:	f04f 0801 	mov.w	r8, #1
 80035f2:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f6:	2703      	movs	r7, #3
 80035f8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80035fa:	2304      	movs	r3, #4
 80035fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fe:	4e10      	ldr	r6, [pc, #64]	; (8003640 <HAL_I2C_MspInit+0x98>)
 8003600:	a903      	add	r1, sp, #12
 8003602:	4630      	mov	r0, r6
 8003604:	f7fe fa68 	bl	8001ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003608:	2308      	movs	r3, #8
 800360a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800360c:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003610:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003614:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003616:	2309      	movs	r3, #9
 8003618:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361a:	a903      	add	r1, sp, #12
 800361c:	4630      	mov	r0, r6
 800361e:	f7fe fa5b 	bl	8001ad8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003622:	9502      	str	r5, [sp, #8]
 8003624:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003626:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800362a:	6423      	str	r3, [r4, #64]	; 0x40
 800362c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	9302      	str	r3, [sp, #8]
 8003634:	9b02      	ldr	r3, [sp, #8]
}
 8003636:	e7c4      	b.n	80035c2 <HAL_I2C_MspInit+0x1a>
 8003638:	40005800 	.word	0x40005800
 800363c:	40023800 	.word	0x40023800
 8003640:	40020400 	.word	0x40020400

08003644 <GPS_init>:

};

struct GPS_ GPS;

void GPS_init() {
 8003644:	b508      	push	{r3, lr}

	for (int i = 0; i < GPS_BUFFERSIZE; ++i) {
 8003646:	2300      	movs	r3, #0
 8003648:	e003      	b.n	8003652 <GPS_init+0xe>
		GPS_RX_Buffer[i] = 0;
 800364a:	4a07      	ldr	r2, [pc, #28]	; (8003668 <GPS_init+0x24>)
 800364c:	2100      	movs	r1, #0
 800364e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < GPS_BUFFERSIZE; ++i) {
 8003650:	3301      	adds	r3, #1
 8003652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003656:	dbf8      	blt.n	800364a <GPS_init+0x6>
	}

	HAL_UART_Receive_DMA(&huart6, GPS_RX_Buffer, GPS_BUFFERSIZE);
 8003658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800365c:	4902      	ldr	r1, [pc, #8]	; (8003668 <GPS_init+0x24>)
 800365e:	4803      	ldr	r0, [pc, #12]	; (800366c <GPS_init+0x28>)
 8003660:	f7ff fcd2 	bl	8003008 <HAL_UART_Receive_DMA>

}
 8003664:	bd08      	pop	{r3, pc}
 8003666:	bf00      	nop
 8003668:	20000418 	.word	0x20000418
 800366c:	200009e8 	.word	0x200009e8

08003670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003670:	b530      	push	{r4, r5, lr}
 8003672:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003674:	2230      	movs	r2, #48	; 0x30
 8003676:	2100      	movs	r1, #0
 8003678:	a808      	add	r0, sp, #32
 800367a:	f000 fcbf 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800367e:	2400      	movs	r4, #0
 8003680:	9403      	str	r4, [sp, #12]
 8003682:	9404      	str	r4, [sp, #16]
 8003684:	9405      	str	r4, [sp, #20]
 8003686:	9406      	str	r4, [sp, #24]
 8003688:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	9401      	str	r4, [sp, #4]
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <SystemClock_Config+0x88>)
 800368e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003690:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a0:	9402      	str	r4, [sp, #8]
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <SystemClock_Config+0x8c>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036b2:	9302      	str	r3, [sp, #8]
 80036b4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036b6:	2502      	movs	r5, #2
 80036b8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036ba:	2301      	movs	r3, #1
 80036bc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036be:	2310      	movs	r3, #16
 80036c0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036c4:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036c6:	2308      	movs	r3, #8
 80036c8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80036ca:	2364      	movs	r3, #100	; 0x64
 80036cc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036ce:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80036d0:	2304      	movs	r3, #4
 80036d2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036d4:	a808      	add	r0, sp, #32
 80036d6:	f7fe fbb5 	bl	8001e44 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036da:	230f      	movs	r3, #15
 80036dc:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036de:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036e0:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e8:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80036ea:	2103      	movs	r1, #3
 80036ec:	a803      	add	r0, sp, #12
 80036ee:	f7fe fde1 	bl	80022b4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80036f2:	b015      	add	sp, #84	; 0x54
 80036f4:	bd30      	pop	{r4, r5, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40007000 	.word	0x40007000

08003700 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8003700:	4b01      	ldr	r3, [pc, #4]	; (8003708 <PWM1_Set+0x8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6358      	str	r0, [r3, #52]	; 0x34
}
 8003706:	4770      	bx	lr
 8003708:	20000908 	.word	0x20000908

0800370c <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 800370c:	4b01      	ldr	r3, [pc, #4]	; (8003714 <PWM2_Set+0x8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6398      	str	r0, [r3, #56]	; 0x38

}
 8003712:	4770      	bx	lr
 8003714:	20000908 	.word	0x20000908

08003718 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8003718:	4b01      	ldr	r3, [pc, #4]	; (8003720 <PWM3_Set+0x8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 800371e:	4770      	bx	lr
 8003720:	20000908 	.word	0x20000908

08003724 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8003724:	4b01      	ldr	r3, [pc, #4]	; (800372c <PWM4_Set+0x8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6418      	str	r0, [r3, #64]	; 0x40
}
 800372a:	4770      	bx	lr
 800372c:	20000908 	.word	0x20000908

08003730 <main>:
{
 8003730:	b508      	push	{r3, lr}
  HAL_Init();
 8003732:	f7fd fdab 	bl	800128c <HAL_Init>
  SystemClock_Config();
 8003736:	f7ff ff9b 	bl	8003670 <SystemClock_Config>
  MX_GPIO_Init();
 800373a:	f7ff fe59 	bl	80033f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800373e:	f7ff fe3d 	bl	80033bc <MX_DMA_Init>
  MX_I2C2_Init();
 8003742:	f7ff ff13 	bl	800356c <MX_I2C2_Init>
  MX_TIM4_Init();
 8003746:	f000 faef 	bl	8003d28 <MX_TIM4_Init>
  MX_SPI2_Init();
 800374a:	f000 f921 	bl	8003990 <MX_SPI2_Init>
  MX_CRC_Init();
 800374e:	f7ff fe0d 	bl	800336c <MX_CRC_Init>
  MX_TIM11_Init();
 8003752:	f000 fa75 	bl	8003c40 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8003756:	f000 fb45 	bl	8003de4 <MX_USART6_UART_Init>
	GPS_init();
 800375a:	f7ff ff73 	bl	8003644 <GPS_init>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800375e:	4c12      	ldr	r4, [pc, #72]	; (80037a8 <main+0x78>)
 8003760:	2100      	movs	r1, #0
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff f9f8 	bl	8002b58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003768:	2104      	movs	r1, #4
 800376a:	4620      	mov	r0, r4
 800376c:	f7ff f9f4 	bl	8002b58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003770:	2108      	movs	r1, #8
 8003772:	4620      	mov	r0, r4
 8003774:	f7ff f9f0 	bl	8002b58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003778:	210c      	movs	r1, #12
 800377a:	4620      	mov	r0, r4
 800377c:	f7ff f9ec 	bl	8002b58 <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8003780:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003784:	f7ff ffbc 	bl	8003700 <PWM1_Set>
	PWM2_Set(2500);
 8003788:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800378c:	f7ff ffbe 	bl	800370c <PWM2_Set>
	PWM3_Set(2500);
 8003790:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003794:	f7ff ffc0 	bl	8003718 <PWM3_Set>
	PWM4_Set(2500);
 8003798:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800379c:	f7ff ffc2 	bl	8003724 <PWM4_Set>
		main_loop = 1;
 80037a0:	4b02      	ldr	r3, [pc, #8]	; (80037ac <main+0x7c>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e7fb      	b.n	80037a0 <main+0x70>
 80037a8:	20000908 	.word	0x20000908
 80037ac:	2000025c 	.word	0x2000025c

080037b0 <pulse_posedge_handler>:
 * (1 CW)     (3 CCW)
 *
 * This function gets called by the GPIO_EXTI callback when the PWM_RE_INT_Pin triggers an interrupt,
 * which is on the rising edge of every PWM pulse.
 */
void pulse_posedge_handler() {
 80037b0:	b538      	push	{r3, r4, r5, lr}

	//Only want this to happen in main loop - not during init sequence
	if (main_loop) {
 80037b2:	4b59      	ldr	r3, [pc, #356]	; (8003918 <pulse_posedge_handler+0x168>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 809e 	beq.w	80038f8 <pulse_posedge_handler+0x148>
		//		if (imu_yaw < 0 && !done) {
		//			imu_yaw += 180.0f;
		//			done = 1;
		//		}
#endif
		if (airmode) {
 80037bc:	4b57      	ldr	r3, [pc, #348]	; (800391c <pulse_posedge_handler+0x16c>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 809a 	beq.w	80038fa <pulse_posedge_handler+0x14a>
			/*******    Pitch PID calculation  ********/
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, 0);
 80037c6:	eddf 0a56 	vldr	s1, [pc, #344]	; 8003920 <pulse_posedge_handler+0x170>
 80037ca:	2000      	movs	r0, #0
 80037cc:	4b55      	ldr	r3, [pc, #340]	; (8003924 <pulse_posedge_handler+0x174>)
 80037ce:	ed93 0a00 	vldr	s0, [r3]
 80037d2:	f7fd fc5f 	bl	8001094 <pid_calculate_pitch>
 80037d6:	4b54      	ldr	r3, [pc, #336]	; (8003928 <pulse_posedge_handler+0x178>)
 80037d8:	ed83 0a00 	vstr	s0, [r3]

			/*******    Roll PID calculation  ********/

			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <pulse_posedge_handler+0x17c>)
 80037de:	edd3 0a00 	vldr	s1, [r3]
 80037e2:	2000      	movs	r0, #0
 80037e4:	4b52      	ldr	r3, [pc, #328]	; (8003930 <pulse_posedge_handler+0x180>)
 80037e6:	ed93 0a00 	vldr	s0, [r3]
 80037ea:	f7fd fbd5 	bl	8000f98 <pid_calculate_roll>
 80037ee:	4b51      	ldr	r3, [pc, #324]	; (8003934 <pulse_posedge_handler+0x184>)
 80037f0:	ed83 0a00 	vstr	s0, [r3]

			/*******    Yaw PID calculation  ********/

			pid_output_yaw = pid_calculate_yaw(imu_yaw, 0, yaw_setpoint);
 80037f4:	4b50      	ldr	r3, [pc, #320]	; (8003938 <pulse_posedge_handler+0x188>)
 80037f6:	edd3 0a00 	vldr	s1, [r3]
 80037fa:	2000      	movs	r0, #0
 80037fc:	4b4f      	ldr	r3, [pc, #316]	; (800393c <pulse_posedge_handler+0x18c>)
 80037fe:	ed93 0a00 	vldr	s0, [r3]
 8003802:	f7fd fcc5 	bl	8001190 <pid_calculate_yaw>
 8003806:	4b4e      	ldr	r3, [pc, #312]	; (8003940 <pulse_posedge_handler+0x190>)
 8003808:	ed83 0a00 	vstr	s0, [r3]
			printToPC();
		}
#endif

		//Calculate new pulse width values
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 800380c:	4b4d      	ldr	r3, [pc, #308]	; (8003944 <pulse_posedge_handler+0x194>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	4b48      	ldr	r3, [pc, #288]	; (8003934 <pulse_posedge_handler+0x184>)
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800381a:	ee17 1a90 	vmov	r1, s15
 800381e:	1a42      	subs	r2, r0, r1
 8003820:	4b41      	ldr	r3, [pc, #260]	; (8003928 <pulse_posedge_handler+0x178>)
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800382a:	ee17 3a90 	vmov	r3, s15
 800382e:	1ad4      	subs	r4, r2, r3
 8003830:	4d45      	ldr	r5, [pc, #276]	; (8003948 <pulse_posedge_handler+0x198>)
 8003832:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 8003834:	441a      	add	r2, r3
 8003836:	4d45      	ldr	r5, [pc, #276]	; (800394c <pulse_posedge_handler+0x19c>)
 8003838:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 800383a:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 800383c:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 800383e:	4d44      	ldr	r5, [pc, #272]	; (8003950 <pulse_posedge_handler+0x1a0>)
 8003840:	6028      	str	r0, [r5, #0]
		esc4_total = (throttle) + (int) pid_output_roll
				+ (int) pid_output_pitch;
 8003842:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 8003844:	4943      	ldr	r1, [pc, #268]	; (8003954 <pulse_posedge_handler+0x1a4>)
 8003846:	600b      	str	r3, [r1, #0]

		//Clip PWM values to make sure they don't go outside of range
		if (esc1_total < ESC_MIN) {
 8003848:	f240 41e1 	movw	r1, #1249	; 0x4e1
 800384c:	428c      	cmp	r4, r1
 800384e:	dc03      	bgt.n	8003858 <pulse_posedge_handler+0xa8>
			esc1_total = ESC_MIN;
 8003850:	493d      	ldr	r1, [pc, #244]	; (8003948 <pulse_posedge_handler+0x198>)
 8003852:	f240 44e2 	movw	r4, #1250	; 0x4e2
 8003856:	600c      	str	r4, [r1, #0]
		}
		if (esc1_total > ESC_MAX) {
 8003858:	493b      	ldr	r1, [pc, #236]	; (8003948 <pulse_posedge_handler+0x198>)
 800385a:	680c      	ldr	r4, [r1, #0]
 800385c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003860:	428c      	cmp	r4, r1
 8003862:	dd03      	ble.n	800386c <pulse_posedge_handler+0xbc>
			esc1_total = ESC_MAX;
 8003864:	4938      	ldr	r1, [pc, #224]	; (8003948 <pulse_posedge_handler+0x198>)
 8003866:	f640 14c4 	movw	r4, #2500	; 0x9c4
 800386a:	600c      	str	r4, [r1, #0]
		}
		if (esc2_total < ESC_MIN) {
 800386c:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8003870:	428a      	cmp	r2, r1
 8003872:	dc03      	bgt.n	800387c <pulse_posedge_handler+0xcc>
			esc2_total = ESC_MIN;
 8003874:	4a35      	ldr	r2, [pc, #212]	; (800394c <pulse_posedge_handler+0x19c>)
 8003876:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800387a:	6011      	str	r1, [r2, #0]
		}
		if (esc2_total > ESC_MAX) {
 800387c:	4a33      	ldr	r2, [pc, #204]	; (800394c <pulse_posedge_handler+0x19c>)
 800387e:	6811      	ldr	r1, [r2, #0]
 8003880:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003884:	4291      	cmp	r1, r2
 8003886:	dd03      	ble.n	8003890 <pulse_posedge_handler+0xe0>
			esc2_total = ESC_MAX;
 8003888:	4a30      	ldr	r2, [pc, #192]	; (800394c <pulse_posedge_handler+0x19c>)
 800388a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800388e:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total < ESC_MIN) {
 8003890:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8003894:	4290      	cmp	r0, r2
 8003896:	dc03      	bgt.n	80038a0 <pulse_posedge_handler+0xf0>
			esc3_total = ESC_MIN;
 8003898:	4a2d      	ldr	r2, [pc, #180]	; (8003950 <pulse_posedge_handler+0x1a0>)
 800389a:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800389e:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total > ESC_MAX) {
 80038a0:	4a2b      	ldr	r2, [pc, #172]	; (8003950 <pulse_posedge_handler+0x1a0>)
 80038a2:	6811      	ldr	r1, [r2, #0]
 80038a4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80038a8:	4291      	cmp	r1, r2
 80038aa:	dd03      	ble.n	80038b4 <pulse_posedge_handler+0x104>
			esc3_total = ESC_MAX;
 80038ac:	4a28      	ldr	r2, [pc, #160]	; (8003950 <pulse_posedge_handler+0x1a0>)
 80038ae:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80038b2:	6011      	str	r1, [r2, #0]
		}
		if (esc4_total < ESC_MIN) {
 80038b4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80038b8:	4293      	cmp	r3, r2
 80038ba:	dc03      	bgt.n	80038c4 <pulse_posedge_handler+0x114>
			esc4_total = ESC_MIN;
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <pulse_posedge_handler+0x1a4>)
 80038be:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80038c2:	601a      	str	r2, [r3, #0]
		}
		if (esc4_total > ESC_MAX) {
 80038c4:	4b23      	ldr	r3, [pc, #140]	; (8003954 <pulse_posedge_handler+0x1a4>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80038cc:	429a      	cmp	r2, r3
 80038ce:	dd03      	ble.n	80038d8 <pulse_posedge_handler+0x128>
			esc4_total = ESC_MAX;
 80038d0:	4b20      	ldr	r3, [pc, #128]	; (8003954 <pulse_posedge_handler+0x1a4>)
 80038d2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80038d6:	601a      	str	r2, [r3, #0]
		}
#if MOTORS
		//Load new pulse widths into ESCs
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <pulse_posedge_handler+0x198>)
 80038da:	8818      	ldrh	r0, [r3, #0]
 80038dc:	f7ff ff10 	bl	8003700 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <pulse_posedge_handler+0x19c>)
 80038e2:	8818      	ldrh	r0, [r3, #0]
 80038e4:	f7ff ff12 	bl	800370c <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <pulse_posedge_handler+0x1a0>)
 80038ea:	8818      	ldrh	r0, [r3, #0]
 80038ec:	f7ff ff14 	bl	8003718 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 80038f0:	4b18      	ldr	r3, [pc, #96]	; (8003954 <pulse_posedge_handler+0x1a4>)
 80038f2:	8818      	ldrh	r0, [r3, #0]
 80038f4:	f7ff ff16 	bl	8003724 <PWM4_Set>

#endif

	}

}
 80038f8:	bd38      	pop	{r3, r4, r5, pc}
			pid_output_roll = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	4a0d      	ldr	r2, [pc, #52]	; (8003934 <pulse_posedge_handler+0x184>)
 80038fe:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 8003900:	4a09      	ldr	r2, [pc, #36]	; (8003928 <pulse_posedge_handler+0x178>)
 8003902:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 8003904:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <pulse_posedge_handler+0x190>)
 8003906:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8003908:	f7fd fbb2 	bl	8001070 <reset_pid_roll>
			reset_pid_pitch();
 800390c:	f7fd fc2e 	bl	800116c <reset_pid_pitch>
			reset_pid_yaw();
 8003910:	f7fd fcaa 	bl	8001268 <reset_pid_yaw>
 8003914:	e77a      	b.n	800380c <pulse_posedge_handler+0x5c>
 8003916:	bf00      	nop
 8003918:	2000025c 	.word	0x2000025c
 800391c:	20000248 	.word	0x20000248
 8003920:	00000000 	.word	0x00000000
 8003924:	20000848 	.word	0x20000848
 8003928:	20000260 	.word	0x20000260
 800392c:	2000026c 	.word	0x2000026c
 8003930:	20000844 	.word	0x20000844
 8003934:	20000264 	.word	0x20000264
 8003938:	20000274 	.word	0x20000274
 800393c:	2000039c 	.word	0x2000039c
 8003940:	20000268 	.word	0x20000268
 8003944:	20000270 	.word	0x20000270
 8003948:	2000024c 	.word	0x2000024c
 800394c:	20000250 	.word	0x20000250
 8003950:	20000254 	.word	0x20000254
 8003954:	20000258 	.word	0x20000258

08003958 <HAL_GPIO_EXTI_Callback>:

////GPIO interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	//GPIO pin configured to capture rising edge interrupt of PWM signals
	if (GPIO_Pin == PWM_INT_Pin && main_loop) {
 8003958:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800395c:	d000      	beq.n	8003960 <HAL_GPIO_EXTI_Callback+0x8>
 800395e:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003960:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_INT_Pin && main_loop) {
 8003962:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_GPIO_EXTI_Callback+0x18>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b903      	cbnz	r3, 800396a <HAL_GPIO_EXTI_Callback+0x12>

	//	if (GPIO_Pin == kill_Pin && main_loop) {
	//		//kill();
	//	}

}
 8003968:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 800396a:	f7ff ff21 	bl	80037b0 <pulse_posedge_handler>
}
 800396e:	e7fb      	b.n	8003968 <HAL_GPIO_EXTI_Callback+0x10>
 8003970:	2000025c 	.word	0x2000025c

08003974 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003976:	6802      	ldr	r2, [r0, #0]
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800397a:	429a      	cmp	r2, r3
 800397c:	d000      	beq.n	8003980 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800397e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8003980:	f7fd fc9e 	bl	80012c0 <HAL_IncTick>
}
 8003984:	e7fb      	b.n	800397e <HAL_TIM_PeriodElapsedCallback+0xa>
 8003986:	bf00      	nop
 8003988:	40010000 	.word	0x40010000

0800398c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800398c:	4770      	bx	lr
	...

08003990 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003990:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8003992:	480e      	ldr	r0, [pc, #56]	; (80039cc <MX_SPI2_Init+0x3c>)
 8003994:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <MX_SPI2_Init+0x40>)
 8003996:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003998:	f44f 7382 	mov.w	r3, #260	; 0x104
 800399c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800399e:	2300      	movs	r3, #0
 80039a0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80039a2:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039a4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039a6:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80039a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ac:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80039ae:	2220      	movs	r2, #32
 80039b0:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039b2:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80039b4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80039b8:	230a      	movs	r3, #10
 80039ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80039bc:	f7fe fd6a 	bl	8002494 <HAL_SPI_Init>
 80039c0:	b900      	cbnz	r0, 80039c4 <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 80039c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80039c4:	f7ff ffe2 	bl	800398c <Error_Handler>
}
 80039c8:	e7fb      	b.n	80039c2 <MX_SPI2_Init+0x32>
 80039ca:	bf00      	nop
 80039cc:	20000870 	.word	0x20000870
 80039d0:	40003800 	.word	0x40003800

080039d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d8:	2300      	movs	r3, #0
 80039da:	9303      	str	r3, [sp, #12]
 80039dc:	9304      	str	r3, [sp, #16]
 80039de:	9305      	str	r3, [sp, #20]
 80039e0:	9306      	str	r3, [sp, #24]
 80039e2:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 80039e4:	6802      	ldr	r2, [r0, #0]
 80039e6:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <HAL_SPI_MspInit+0xa0>)
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80039ec:	b009      	add	sp, #36	; 0x24
 80039ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039f0:	2400      	movs	r4, #0
 80039f2:	9400      	str	r4, [sp, #0]
 80039f4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80039f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003a06:	9200      	str	r2, [sp, #0]
 8003a08:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a0a:	9401      	str	r4, [sp, #4]
 8003a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0e:	f042 0204 	orr.w	r2, r2, #4
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
 8003a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a16:	f002 0204 	and.w	r2, r2, #4
 8003a1a:	9201      	str	r2, [sp, #4]
 8003a1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1e:	9402      	str	r4, [sp, #8]
 8003a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a22:	f042 0202 	orr.w	r2, r2, #2
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	9302      	str	r3, [sp, #8]
 8003a30:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a32:	2304      	movs	r3, #4
 8003a34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2702      	movs	r7, #2
 8003a38:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3a:	2603      	movs	r6, #3
 8003a3c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a3e:	2505      	movs	r5, #5
 8003a40:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a42:	a903      	add	r1, sp, #12
 8003a44:	480c      	ldr	r0, [pc, #48]	; (8003a78 <HAL_SPI_MspInit+0xa4>)
 8003a46:	f7fe f847 	bl	8001ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003a4a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003a4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a56:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a58:	a903      	add	r1, sp, #12
 8003a5a:	4808      	ldr	r0, [pc, #32]	; (8003a7c <HAL_SPI_MspInit+0xa8>)
 8003a5c:	f7fe f83c 	bl	8001ad8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003a60:	4622      	mov	r2, r4
 8003a62:	4629      	mov	r1, r5
 8003a64:	2024      	movs	r0, #36	; 0x24
 8003a66:	f7fd fc4f 	bl	8001308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003a6a:	2024      	movs	r0, #36	; 0x24
 8003a6c:	f7fd fc80 	bl	8001370 <HAL_NVIC_EnableIRQ>
}
 8003a70:	e7bc      	b.n	80039ec <HAL_SPI_MspInit+0x18>
 8003a72:	bf00      	nop
 8003a74:	40003800 	.word	0x40003800
 8003a78:	40020800 	.word	0x40020800
 8003a7c:	40020400 	.word	0x40020400

08003a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a80:	b510      	push	{r4, lr}
 8003a82:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a84:	2400      	movs	r4, #0
 8003a86:	9400      	str	r4, [sp, #0]
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_MspInit+0x54>)
 8003a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a90:	645a      	str	r2, [r3, #68]	; 0x44
 8003a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a94:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003a98:	9200      	str	r2, [sp, #0]
 8003a9a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9c:	9401      	str	r4, [sp, #4]
 8003a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 2, 0);
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	2004      	movs	r0, #4
 8003ab6:	f7fd fc27 	bl	8001308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003aba:	2004      	movs	r0, #4
 8003abc:	f7fd fc58 	bl	8001370 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 2, 0);
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	2005      	movs	r0, #5
 8003ac6:	f7fd fc1f 	bl	8001308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003aca:	2005      	movs	r0, #5
 8003acc:	f7fd fc50 	bl	8001370 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd10      	pop	{r4, pc}
 8003ad4:	40023800 	.word	0x40023800

08003ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003adc:	2200      	movs	r2, #0
 8003ade:	4601      	mov	r1, r0
 8003ae0:	2019      	movs	r0, #25
 8003ae2:	f7fd fc11 	bl	8001308 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8003ae6:	2019      	movs	r0, #25
 8003ae8:	f7fd fc42 	bl	8001370 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003aec:	2400      	movs	r4, #0
 8003aee:	9401      	str	r4, [sp, #4]
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_InitTick+0x68>)
 8003af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b04:	a902      	add	r1, sp, #8
 8003b06:	a803      	add	r0, sp, #12
 8003b08:	f7fe fca6 	bl	8002458 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b0c:	f7fe fc94 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <HAL_InitTick+0x6c>)
 8003b12:	fba3 2300 	umull	r2, r3, r3, r0
 8003b16:	0c9b      	lsrs	r3, r3, #18
 8003b18:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b1a:	480b      	ldr	r0, [pc, #44]	; (8003b48 <HAL_InitTick+0x70>)
 8003b1c:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <HAL_InitTick+0x74>)
 8003b1e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003b20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b24:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b26:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8003b28:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2a:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b2c:	f7fe ff30 	bl	8002990 <HAL_TIM_Base_Init>
 8003b30:	b110      	cbz	r0, 8003b38 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003b32:	2001      	movs	r0, #1
}
 8003b34:	b008      	add	sp, #32
 8003b36:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8003b38:	4803      	ldr	r0, [pc, #12]	; (8003b48 <HAL_InitTick+0x70>)
 8003b3a:	f7fe fe09 	bl	8002750 <HAL_TIM_Base_Start_IT>
 8003b3e:	e7f9      	b.n	8003b34 <HAL_InitTick+0x5c>
 8003b40:	40023800 	.word	0x40023800
 8003b44:	431bde83 	.word	0x431bde83
 8003b48:	200008c8 	.word	0x200008c8
 8003b4c:	40010000 	.word	0x40010000

08003b50 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b50:	4770      	bx	lr

08003b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b52:	e7fe      	b.n	8003b52 <HardFault_Handler>

08003b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b54:	e7fe      	b.n	8003b54 <MemManage_Handler>

08003b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b56:	e7fe      	b.n	8003b56 <BusFault_Handler>

08003b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b58:	e7fe      	b.n	8003b58 <UsageFault_Handler>

08003b5a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b5a:	4770      	bx	lr

08003b5c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b5c:	4770      	bx	lr

08003b5e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b5e:	4770      	bx	lr

08003b60 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003b60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003b62:	f7fd fee3 	bl	800192c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003b66:	bd08      	pop	{r3, pc}

08003b68 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003b68:	4770      	bx	lr

08003b6a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b6a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b70:	f7fe f88a 	bl	8001c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b74:	bd08      	pop	{r3, pc}
	...

08003b78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003b78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b7a:	4802      	ldr	r0, [pc, #8]	; (8003b84 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8003b7c:	f7fe fdfd 	bl	800277a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003b80:	bd08      	pop	{r3, pc}
 8003b82:	bf00      	nop
 8003b84:	200008c8 	.word	0x200008c8

08003b88 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003b88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003b8a:	4802      	ldr	r0, [pc, #8]	; (8003b94 <SPI2_IRQHandler+0xc>)
 8003b8c:	f7fe fcc4 	bl	8002518 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003b90:	bd08      	pop	{r3, pc}
 8003b92:	bf00      	nop
 8003b94:	20000870 	.word	0x20000870

08003b98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003b98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003b9a:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <DMA2_Stream1_IRQHandler+0xc>)
 8003b9c:	f7fd fd82 	bl	80016a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003ba0:	bd08      	pop	{r3, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000988 	.word	0x20000988

08003ba8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ba8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003baa:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <USART6_IRQHandler+0xc>)
 8003bac:	f7ff fb38 	bl	8003220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	//UART_timeout();
  /* USER CODE END USART6_IRQn 1 */
}
 8003bb0:	bd08      	pop	{r3, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200009e8 	.word	0x200009e8

08003bb8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003bb8:	b508      	push	{r3, lr}
 8003bba:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003bbc:	4a0b      	ldr	r2, [pc, #44]	; (8003bec <_sbrk+0x34>)
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	b142      	cbz	r2, 8003bd4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <_sbrk+0x34>)
 8003bc4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003bc6:	4403      	add	r3, r0
 8003bc8:	466a      	mov	r2, sp
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d806      	bhi.n	8003bdc <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003bce:	4a07      	ldr	r2, [pc, #28]	; (8003bec <_sbrk+0x34>)
 8003bd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003bd2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003bd4:	4a05      	ldr	r2, [pc, #20]	; (8003bec <_sbrk+0x34>)
 8003bd6:	4906      	ldr	r1, [pc, #24]	; (8003bf0 <_sbrk+0x38>)
 8003bd8:	6011      	str	r1, [r2, #0]
 8003bda:	e7f2      	b.n	8003bc2 <_sbrk+0xa>
		errno = ENOMEM;
 8003bdc:	f000 f9c4 	bl	8003f68 <__errno>
 8003be0:	230c      	movs	r3, #12
 8003be2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003be8:	e7f3      	b.n	8003bd2 <_sbrk+0x1a>
 8003bea:	bf00      	nop
 8003bec:	20000278 	.word	0x20000278
 8003bf0:	20000a30 	.word	0x20000a30

08003bf4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bf4:	490f      	ldr	r1, [pc, #60]	; (8003c34 <SystemInit+0x40>)
 8003bf6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003bfa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <SystemInit+0x44>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003c16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c1c:	4a07      	ldr	r2, [pc, #28]	; (8003c3c <SystemInit+0x48>)
 8003c1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c26:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c28:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c2e:	608b      	str	r3, [r1, #8]
#endif
}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000ed00 	.word	0xe000ed00
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	24003010 	.word	0x24003010

08003c40 <MX_TIM11_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003c40:	b508      	push	{r3, lr}

  htim11.Instance = TIM11;
 8003c42:	4809      	ldr	r0, [pc, #36]	; (8003c68 <MX_TIM11_Init+0x28>)
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <MX_TIM11_Init+0x2c>)
 8003c46:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100;
 8003c48:	2364      	movs	r3, #100	; 0x64
 8003c4a:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 8003c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c54:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c56:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c58:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003c5a:	f7fe fe99 	bl	8002990 <HAL_TIM_Base_Init>
 8003c5e:	b900      	cbnz	r0, 8003c62 <MX_TIM11_Init+0x22>
  {
    Error_Handler();
  }

}
 8003c60:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003c62:	f7ff fe93 	bl	800398c <Error_Handler>
}
 8003c66:	e7fb      	b.n	8003c60 <MX_TIM11_Init+0x20>
 8003c68:	20000948 	.word	0x20000948
 8003c6c:	40014800 	.word	0x40014800

08003c70 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 8003c70:	6802      	ldr	r2, [r0, #0]
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_TIM_PWM_MspInit+0x28>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d000      	beq.n	8003c7a <HAL_TIM_PWM_MspInit+0xa>
 8003c78:	4770      	bx	lr
{
 8003c7a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_TIM_PWM_MspInit+0x2c>)
 8003c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c84:	f042 0204 	orr.w	r2, r2, #4
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003c94:	b002      	add	sp, #8
 8003c96:	4770      	bx	lr
 8003c98:	40000800 	.word	0x40000800
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM11)
 8003ca0:	6802      	ldr	r2, [r0, #0]
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_TIM_Base_MspInit+0x28>)
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d000      	beq.n	8003caa <HAL_TIM_Base_MspInit+0xa>
 8003ca8:	4770      	bx	lr
{
 8003caa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003cac:	2300      	movs	r3, #0
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_TIM_Base_MspInit+0x2c>)
 8003cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003cc4:	b002      	add	sp, #8
 8003cc6:	4770      	bx	lr
 8003cc8:	40014800 	.word	0x40014800
 8003ccc:	40023800 	.word	0x40023800

08003cd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003cd0:	b500      	push	{lr}
 8003cd2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	9302      	str	r3, [sp, #8]
 8003cda:	9303      	str	r3, [sp, #12]
 8003cdc:	9304      	str	r3, [sp, #16]
 8003cde:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 8003ce0:	6802      	ldr	r2, [r0, #0]
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <HAL_TIM_MspPostInit+0x4c>)
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d002      	beq.n	8003cee <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003ce8:	b007      	add	sp, #28
 8003cea:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_TIM_MspPostInit+0x50>)
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf6:	f042 0202 	orr.w	r2, r2, #2
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003d06:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003d0a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d10:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d12:	a901      	add	r1, sp, #4
 8003d14:	4803      	ldr	r0, [pc, #12]	; (8003d24 <HAL_TIM_MspPostInit+0x54>)
 8003d16:	f7fd fedf 	bl	8001ad8 <HAL_GPIO_Init>
}
 8003d1a:	e7e5      	b.n	8003ce8 <HAL_TIM_MspPostInit+0x18>
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40020400 	.word	0x40020400

08003d28 <MX_TIM4_Init>:
{
 8003d28:	b500      	push	{lr}
 8003d2a:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9308      	str	r3, [sp, #32]
 8003d30:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	9302      	str	r3, [sp, #8]
 8003d36:	9303      	str	r3, [sp, #12]
 8003d38:	9304      	str	r3, [sp, #16]
 8003d3a:	9305      	str	r3, [sp, #20]
 8003d3c:	9306      	str	r3, [sp, #24]
 8003d3e:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8003d40:	4826      	ldr	r0, [pc, #152]	; (8003ddc <MX_TIM4_Init+0xb4>)
 8003d42:	4a27      	ldr	r2, [pc, #156]	; (8003de0 <MX_TIM4_Init+0xb8>)
 8003d44:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9;
 8003d46:	2209      	movs	r2, #9
 8003d48:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4a:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 20000;
 8003d4c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003d50:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d52:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d54:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003d56:	f7fe fe34 	bl	80029c2 <HAL_TIM_PWM_Init>
 8003d5a:	bb68      	cbnz	r0, 8003db8 <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d60:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d62:	a908      	add	r1, sp, #32
 8003d64:	481d      	ldr	r0, [pc, #116]	; (8003ddc <MX_TIM4_Init+0xb4>)
 8003d66:	f7fe ff15 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8003d6a:	bb40      	cbnz	r0, 8003dbe <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d6c:	2360      	movs	r3, #96	; 0x60
 8003d6e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003d70:	2200      	movs	r2, #0
 8003d72:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d74:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003d76:	2304      	movs	r3, #4
 8003d78:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d7a:	eb0d 0103 	add.w	r1, sp, r3
 8003d7e:	4817      	ldr	r0, [pc, #92]	; (8003ddc <MX_TIM4_Init+0xb4>)
 8003d80:	f7fe fe6a 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 8003d84:	b9f0      	cbnz	r0, 8003dc4 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d86:	2204      	movs	r2, #4
 8003d88:	eb0d 0102 	add.w	r1, sp, r2
 8003d8c:	4813      	ldr	r0, [pc, #76]	; (8003ddc <MX_TIM4_Init+0xb4>)
 8003d8e:	f7fe fe63 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 8003d92:	b9d0      	cbnz	r0, 8003dca <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d94:	2208      	movs	r2, #8
 8003d96:	a901      	add	r1, sp, #4
 8003d98:	4810      	ldr	r0, [pc, #64]	; (8003ddc <MX_TIM4_Init+0xb4>)
 8003d9a:	f7fe fe5d 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 8003d9e:	b9b8      	cbnz	r0, 8003dd0 <MX_TIM4_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003da0:	220c      	movs	r2, #12
 8003da2:	a901      	add	r1, sp, #4
 8003da4:	480d      	ldr	r0, [pc, #52]	; (8003ddc <MX_TIM4_Init+0xb4>)
 8003da6:	f7fe fe57 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 8003daa:	b9a0      	cbnz	r0, 8003dd6 <MX_TIM4_Init+0xae>
  HAL_TIM_MspPostInit(&htim4);
 8003dac:	480b      	ldr	r0, [pc, #44]	; (8003ddc <MX_TIM4_Init+0xb4>)
 8003dae:	f7ff ff8f 	bl	8003cd0 <HAL_TIM_MspPostInit>
}
 8003db2:	b00b      	add	sp, #44	; 0x2c
 8003db4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003db8:	f7ff fde8 	bl	800398c <Error_Handler>
 8003dbc:	e7ce      	b.n	8003d5c <MX_TIM4_Init+0x34>
    Error_Handler();
 8003dbe:	f7ff fde5 	bl	800398c <Error_Handler>
 8003dc2:	e7d3      	b.n	8003d6c <MX_TIM4_Init+0x44>
    Error_Handler();
 8003dc4:	f7ff fde2 	bl	800398c <Error_Handler>
 8003dc8:	e7dd      	b.n	8003d86 <MX_TIM4_Init+0x5e>
    Error_Handler();
 8003dca:	f7ff fddf 	bl	800398c <Error_Handler>
 8003dce:	e7e1      	b.n	8003d94 <MX_TIM4_Init+0x6c>
    Error_Handler();
 8003dd0:	f7ff fddc 	bl	800398c <Error_Handler>
 8003dd4:	e7e4      	b.n	8003da0 <MX_TIM4_Init+0x78>
    Error_Handler();
 8003dd6:	f7ff fdd9 	bl	800398c <Error_Handler>
 8003dda:	e7e7      	b.n	8003dac <MX_TIM4_Init+0x84>
 8003ddc:	20000908 	.word	0x20000908
 8003de0:	40000800 	.word	0x40000800

08003de4 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003de4:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8003de6:	480d      	ldr	r0, [pc, #52]	; (8003e1c <MX_USART6_UART_Init+0x38>)
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <MX_USART6_UART_Init+0x3c>)
 8003dea:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 9600;
 8003dec:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003df0:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003df2:	2300      	movs	r3, #0
 8003df4:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003df6:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003df8:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dfe:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e00:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003e02:	f7ff f8d1 	bl	8002fa8 <HAL_UART_Init>
 8003e06:	b930      	cbnz	r0, 8003e16 <MX_USART6_UART_Init+0x32>
  {
    Error_Handler();
  }
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <MX_USART6_UART_Init+0x38>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68d3      	ldr	r3, [r2, #12]
 8003e0e:	f043 0310 	orr.w	r3, r3, #16
 8003e12:	60d3      	str	r3, [r2, #12]
}
 8003e14:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003e16:	f7ff fdb9 	bl	800398c <Error_Handler>
 8003e1a:	e7f5      	b.n	8003e08 <MX_USART6_UART_Init+0x24>
 8003e1c:	200009e8 	.word	0x200009e8
 8003e20:	40011400 	.word	0x40011400

08003e24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e24:	b530      	push	{r4, r5, lr}
 8003e26:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9303      	str	r3, [sp, #12]
 8003e2c:	9304      	str	r3, [sp, #16]
 8003e2e:	9305      	str	r3, [sp, #20]
 8003e30:	9306      	str	r3, [sp, #24]
 8003e32:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 8003e34:	6802      	ldr	r2, [r0, #0]
 8003e36:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <HAL_UART_MspInit+0xac>)
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART6_MspInit 1 */
    // Enable RX idle interrupt, which we use to handle variable-length messages
   // __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003e3c:	b009      	add	sp, #36	; 0x24
 8003e3e:	bd30      	pop	{r4, r5, pc}
 8003e40:	4604      	mov	r4, r0
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e42:	2500      	movs	r5, #0
 8003e44:	9501      	str	r5, [sp, #4]
 8003e46:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8003e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4c:	f042 0220 	orr.w	r2, r2, #32
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
 8003e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e54:	f002 0220 	and.w	r2, r2, #32
 8003e58:	9201      	str	r2, [sp, #4]
 8003e5a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5c:	9502      	str	r5, [sp, #8]
 8003e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e60:	f042 0204 	orr.w	r2, r2, #4
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	9302      	str	r3, [sp, #8]
 8003e6e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e70:	23c0      	movs	r3, #192	; 0xc0
 8003e72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e74:	2302      	movs	r3, #2
 8003e76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e80:	2308      	movs	r3, #8
 8003e82:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e84:	a903      	add	r1, sp, #12
 8003e86:	4813      	ldr	r0, [pc, #76]	; (8003ed4 <HAL_UART_MspInit+0xb0>)
 8003e88:	f7fd fe26 	bl	8001ad8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003e8c:	4812      	ldr	r0, [pc, #72]	; (8003ed8 <HAL_UART_MspInit+0xb4>)
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <HAL_UART_MspInit+0xb8>)
 8003e90:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003e92:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8003e96:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e98:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e9a:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea0:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ea2:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ea4:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003ea6:	61c5      	str	r5, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ea8:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eaa:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003eac:	f7fd fafc 	bl	80014a8 <HAL_DMA_Init>
 8003eb0:	b958      	cbnz	r0, 8003eca <HAL_UART_MspInit+0xa6>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_UART_MspInit+0xb4>)
 8003eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8003eb6:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 10, 0);
 8003eb8:	2200      	movs	r2, #0
 8003eba:	210a      	movs	r1, #10
 8003ebc:	2047      	movs	r0, #71	; 0x47
 8003ebe:	f7fd fa23 	bl	8001308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003ec2:	2047      	movs	r0, #71	; 0x47
 8003ec4:	f7fd fa54 	bl	8001370 <HAL_NVIC_EnableIRQ>
}
 8003ec8:	e7b8      	b.n	8003e3c <HAL_UART_MspInit+0x18>
      Error_Handler();
 8003eca:	f7ff fd5f 	bl	800398c <Error_Handler>
 8003ece:	e7f0      	b.n	8003eb2 <HAL_UART_MspInit+0x8e>
 8003ed0:	40011400 	.word	0x40011400
 8003ed4:	40020800 	.word	0x40020800
 8003ed8:	20000988 	.word	0x20000988
 8003edc:	40026428 	.word	0x40026428

08003ee0 <HAL_UART_RxIdleCallback>:
  * @retval None
  */
void HAL_UART_RxIdleCallback(UART_HandleTypeDef* huart)
{
  uint16_t rxXferCount = 0;
  if(huart->hdmarx != NULL)
 8003ee0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ee2:	b1ab      	cbz	r3, 8003f10 <HAL_UART_RxIdleCallback+0x30>
{
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	4604      	mov	r4, r0
  {
    DMA_HandleTypeDef *hdma = huart->hdmarx;

    /* Determine how many items of data have been received */
    rxXferCount = huart->RxXferSize - __HAL_DMA_GET_COUNTER(hdma);
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	6852      	ldr	r2, [r2, #4]

    HAL_DMA_Abort(huart->hdmarx);
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd fb7b 	bl	80015e8 <HAL_DMA_Abort>

    huart->RxXferCount = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	85e3      	strh	r3, [r4, #46]	; 0x2e
    /* Check if a transmit process is ongoing or not */
    if(huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 8003ef6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b23      	cmp	r3, #35	; 0x23
 8003efe:	d003      	beq.n	8003f08 <HAL_UART_RxIdleCallback+0x28>
    {
      huart->gState = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f00:	2320      	movs	r3, #32
 8003f02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }

 // RxIdleFlag = 1;
 // UART_timeout();

}
 8003f06:	bd10      	pop	{r4, pc}
      huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f08:	2321      	movs	r3, #33	; 0x21
 8003f0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8003f0e:	e7fa      	b.n	8003f06 <HAL_UART_RxIdleCallback+0x26>
 8003f10:	4770      	bx	lr
	...

08003f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f1a:	e003      	b.n	8003f24 <LoopCopyDataInit>

08003f1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f22:	3104      	adds	r1, #4

08003f24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f24:	480b      	ldr	r0, [pc, #44]	; (8003f54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f2c:	d3f6      	bcc.n	8003f1c <CopyDataInit>
  ldr  r2, =_sbss
 8003f2e:	4a0b      	ldr	r2, [pc, #44]	; (8003f5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f30:	e002      	b.n	8003f38 <LoopFillZerobss>

08003f32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f34:	f842 3b04 	str.w	r3, [r2], #4

08003f38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f3c:	d3f9      	bcc.n	8003f32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f3e:	f7ff fe59 	bl	8003bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f42:	f000 f817 	bl	8003f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f46:	f7ff fbf3 	bl	8003730 <main>
  bx  lr    
 8003f4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003f50:	08007da0 	.word	0x08007da0
  ldr  r0, =_sdata
 8003f54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f58:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 8003f5c:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 8003f60:	20000a2c 	.word	0x20000a2c

08003f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f64:	e7fe      	b.n	8003f64 <ADC_IRQHandler>
	...

08003f68 <__errno>:
 8003f68:	4b01      	ldr	r3, [pc, #4]	; (8003f70 <__errno+0x8>)
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000038 	.word	0x20000038

08003f74 <__libc_init_array>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	4e0d      	ldr	r6, [pc, #52]	; (8003fac <__libc_init_array+0x38>)
 8003f78:	4c0d      	ldr	r4, [pc, #52]	; (8003fb0 <__libc_init_array+0x3c>)
 8003f7a:	1ba4      	subs	r4, r4, r6
 8003f7c:	10a4      	asrs	r4, r4, #2
 8003f7e:	2500      	movs	r5, #0
 8003f80:	42a5      	cmp	r5, r4
 8003f82:	d109      	bne.n	8003f98 <__libc_init_array+0x24>
 8003f84:	4e0b      	ldr	r6, [pc, #44]	; (8003fb4 <__libc_init_array+0x40>)
 8003f86:	4c0c      	ldr	r4, [pc, #48]	; (8003fb8 <__libc_init_array+0x44>)
 8003f88:	f003 fd58 	bl	8007a3c <_init>
 8003f8c:	1ba4      	subs	r4, r4, r6
 8003f8e:	10a4      	asrs	r4, r4, #2
 8003f90:	2500      	movs	r5, #0
 8003f92:	42a5      	cmp	r5, r4
 8003f94:	d105      	bne.n	8003fa2 <__libc_init_array+0x2e>
 8003f96:	bd70      	pop	{r4, r5, r6, pc}
 8003f98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f9c:	4798      	blx	r3
 8003f9e:	3501      	adds	r5, #1
 8003fa0:	e7ee      	b.n	8003f80 <__libc_init_array+0xc>
 8003fa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fa6:	4798      	blx	r3
 8003fa8:	3501      	adds	r5, #1
 8003faa:	e7f2      	b.n	8003f92 <__libc_init_array+0x1e>
 8003fac:	08007d98 	.word	0x08007d98
 8003fb0:	08007d98 	.word	0x08007d98
 8003fb4:	08007d98 	.word	0x08007d98
 8003fb8:	08007d9c 	.word	0x08007d9c

08003fbc <__locale_ctype_ptr_l>:
 8003fbc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003fc0:	4770      	bx	lr

08003fc2 <__ascii_mbtowc>:
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	b901      	cbnz	r1, 8003fc8 <__ascii_mbtowc+0x6>
 8003fc6:	a901      	add	r1, sp, #4
 8003fc8:	b142      	cbz	r2, 8003fdc <__ascii_mbtowc+0x1a>
 8003fca:	b14b      	cbz	r3, 8003fe0 <__ascii_mbtowc+0x1e>
 8003fcc:	7813      	ldrb	r3, [r2, #0]
 8003fce:	600b      	str	r3, [r1, #0]
 8003fd0:	7812      	ldrb	r2, [r2, #0]
 8003fd2:	1c10      	adds	r0, r2, #0
 8003fd4:	bf18      	it	ne
 8003fd6:	2001      	movne	r0, #1
 8003fd8:	b002      	add	sp, #8
 8003fda:	4770      	bx	lr
 8003fdc:	4610      	mov	r0, r2
 8003fde:	e7fb      	b.n	8003fd8 <__ascii_mbtowc+0x16>
 8003fe0:	f06f 0001 	mvn.w	r0, #1
 8003fe4:	e7f8      	b.n	8003fd8 <__ascii_mbtowc+0x16>

08003fe6 <memcpy>:
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	1e43      	subs	r3, r0, #1
 8003fea:	440a      	add	r2, r1
 8003fec:	4291      	cmp	r1, r2
 8003fee:	d100      	bne.n	8003ff2 <memcpy+0xc>
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ffa:	e7f7      	b.n	8003fec <memcpy+0x6>

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <__cvt>:
 800400c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004010:	ec55 4b10 	vmov	r4, r5, d0
 8004014:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004016:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800401a:	2d00      	cmp	r5, #0
 800401c:	460e      	mov	r6, r1
 800401e:	4691      	mov	r9, r2
 8004020:	4619      	mov	r1, r3
 8004022:	bfb8      	it	lt
 8004024:	4622      	movlt	r2, r4
 8004026:	462b      	mov	r3, r5
 8004028:	f027 0720 	bic.w	r7, r7, #32
 800402c:	bfbb      	ittet	lt
 800402e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004032:	461d      	movlt	r5, r3
 8004034:	2300      	movge	r3, #0
 8004036:	232d      	movlt	r3, #45	; 0x2d
 8004038:	bfb8      	it	lt
 800403a:	4614      	movlt	r4, r2
 800403c:	2f46      	cmp	r7, #70	; 0x46
 800403e:	700b      	strb	r3, [r1, #0]
 8004040:	d004      	beq.n	800404c <__cvt+0x40>
 8004042:	2f45      	cmp	r7, #69	; 0x45
 8004044:	d100      	bne.n	8004048 <__cvt+0x3c>
 8004046:	3601      	adds	r6, #1
 8004048:	2102      	movs	r1, #2
 800404a:	e000      	b.n	800404e <__cvt+0x42>
 800404c:	2103      	movs	r1, #3
 800404e:	ab03      	add	r3, sp, #12
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	ab02      	add	r3, sp, #8
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	4632      	mov	r2, r6
 8004058:	4653      	mov	r3, sl
 800405a:	ec45 4b10 	vmov	d0, r4, r5
 800405e:	f001 fd83 	bl	8005b68 <_dtoa_r>
 8004062:	2f47      	cmp	r7, #71	; 0x47
 8004064:	4680      	mov	r8, r0
 8004066:	d102      	bne.n	800406e <__cvt+0x62>
 8004068:	f019 0f01 	tst.w	r9, #1
 800406c:	d026      	beq.n	80040bc <__cvt+0xb0>
 800406e:	2f46      	cmp	r7, #70	; 0x46
 8004070:	eb08 0906 	add.w	r9, r8, r6
 8004074:	d111      	bne.n	800409a <__cvt+0x8e>
 8004076:	f898 3000 	ldrb.w	r3, [r8]
 800407a:	2b30      	cmp	r3, #48	; 0x30
 800407c:	d10a      	bne.n	8004094 <__cvt+0x88>
 800407e:	2200      	movs	r2, #0
 8004080:	2300      	movs	r3, #0
 8004082:	4620      	mov	r0, r4
 8004084:	4629      	mov	r1, r5
 8004086:	f7fc fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800408a:	b918      	cbnz	r0, 8004094 <__cvt+0x88>
 800408c:	f1c6 0601 	rsb	r6, r6, #1
 8004090:	f8ca 6000 	str.w	r6, [sl]
 8004094:	f8da 3000 	ldr.w	r3, [sl]
 8004098:	4499      	add	r9, r3
 800409a:	2200      	movs	r2, #0
 800409c:	2300      	movs	r3, #0
 800409e:	4620      	mov	r0, r4
 80040a0:	4629      	mov	r1, r5
 80040a2:	f7fc fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 80040a6:	b938      	cbnz	r0, 80040b8 <__cvt+0xac>
 80040a8:	2230      	movs	r2, #48	; 0x30
 80040aa:	9b03      	ldr	r3, [sp, #12]
 80040ac:	454b      	cmp	r3, r9
 80040ae:	d205      	bcs.n	80040bc <__cvt+0xb0>
 80040b0:	1c59      	adds	r1, r3, #1
 80040b2:	9103      	str	r1, [sp, #12]
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e7f8      	b.n	80040aa <__cvt+0x9e>
 80040b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80040bc:	9b03      	ldr	r3, [sp, #12]
 80040be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040c0:	eba3 0308 	sub.w	r3, r3, r8
 80040c4:	4640      	mov	r0, r8
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	b004      	add	sp, #16
 80040ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080040ce <__exponent>:
 80040ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040d0:	2900      	cmp	r1, #0
 80040d2:	4604      	mov	r4, r0
 80040d4:	bfba      	itte	lt
 80040d6:	4249      	neglt	r1, r1
 80040d8:	232d      	movlt	r3, #45	; 0x2d
 80040da:	232b      	movge	r3, #43	; 0x2b
 80040dc:	2909      	cmp	r1, #9
 80040de:	f804 2b02 	strb.w	r2, [r4], #2
 80040e2:	7043      	strb	r3, [r0, #1]
 80040e4:	dd20      	ble.n	8004128 <__exponent+0x5a>
 80040e6:	f10d 0307 	add.w	r3, sp, #7
 80040ea:	461f      	mov	r7, r3
 80040ec:	260a      	movs	r6, #10
 80040ee:	fb91 f5f6 	sdiv	r5, r1, r6
 80040f2:	fb06 1115 	mls	r1, r6, r5, r1
 80040f6:	3130      	adds	r1, #48	; 0x30
 80040f8:	2d09      	cmp	r5, #9
 80040fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80040fe:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004102:	4629      	mov	r1, r5
 8004104:	dc09      	bgt.n	800411a <__exponent+0x4c>
 8004106:	3130      	adds	r1, #48	; 0x30
 8004108:	3b02      	subs	r3, #2
 800410a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800410e:	42bb      	cmp	r3, r7
 8004110:	4622      	mov	r2, r4
 8004112:	d304      	bcc.n	800411e <__exponent+0x50>
 8004114:	1a10      	subs	r0, r2, r0
 8004116:	b003      	add	sp, #12
 8004118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411a:	4613      	mov	r3, r2
 800411c:	e7e7      	b.n	80040ee <__exponent+0x20>
 800411e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004122:	f804 2b01 	strb.w	r2, [r4], #1
 8004126:	e7f2      	b.n	800410e <__exponent+0x40>
 8004128:	2330      	movs	r3, #48	; 0x30
 800412a:	4419      	add	r1, r3
 800412c:	7083      	strb	r3, [r0, #2]
 800412e:	1d02      	adds	r2, r0, #4
 8004130:	70c1      	strb	r1, [r0, #3]
 8004132:	e7ef      	b.n	8004114 <__exponent+0x46>

08004134 <_printf_float>:
 8004134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004138:	b08d      	sub	sp, #52	; 0x34
 800413a:	460c      	mov	r4, r1
 800413c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004140:	4616      	mov	r6, r2
 8004142:	461f      	mov	r7, r3
 8004144:	4605      	mov	r5, r0
 8004146:	f002 fdef 	bl	8006d28 <_localeconv_r>
 800414a:	6803      	ldr	r3, [r0, #0]
 800414c:	9304      	str	r3, [sp, #16]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc f846 	bl	80001e0 <strlen>
 8004154:	2300      	movs	r3, #0
 8004156:	930a      	str	r3, [sp, #40]	; 0x28
 8004158:	f8d8 3000 	ldr.w	r3, [r8]
 800415c:	9005      	str	r0, [sp, #20]
 800415e:	3307      	adds	r3, #7
 8004160:	f023 0307 	bic.w	r3, r3, #7
 8004164:	f103 0208 	add.w	r2, r3, #8
 8004168:	f894 a018 	ldrb.w	sl, [r4, #24]
 800416c:	f8d4 b000 	ldr.w	fp, [r4]
 8004170:	f8c8 2000 	str.w	r2, [r8]
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800417c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004180:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004184:	9307      	str	r3, [sp, #28]
 8004186:	f8cd 8018 	str.w	r8, [sp, #24]
 800418a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800418e:	4ba7      	ldr	r3, [pc, #668]	; (800442c <_printf_float+0x2f8>)
 8004190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004194:	f7fc fcd2 	bl	8000b3c <__aeabi_dcmpun>
 8004198:	bb70      	cbnz	r0, 80041f8 <_printf_float+0xc4>
 800419a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800419e:	4ba3      	ldr	r3, [pc, #652]	; (800442c <_printf_float+0x2f8>)
 80041a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041a4:	f7fc fcac 	bl	8000b00 <__aeabi_dcmple>
 80041a8:	bb30      	cbnz	r0, 80041f8 <_printf_float+0xc4>
 80041aa:	2200      	movs	r2, #0
 80041ac:	2300      	movs	r3, #0
 80041ae:	4640      	mov	r0, r8
 80041b0:	4649      	mov	r1, r9
 80041b2:	f7fc fc9b 	bl	8000aec <__aeabi_dcmplt>
 80041b6:	b110      	cbz	r0, 80041be <_printf_float+0x8a>
 80041b8:	232d      	movs	r3, #45	; 0x2d
 80041ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041be:	4a9c      	ldr	r2, [pc, #624]	; (8004430 <_printf_float+0x2fc>)
 80041c0:	4b9c      	ldr	r3, [pc, #624]	; (8004434 <_printf_float+0x300>)
 80041c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80041c6:	bf8c      	ite	hi
 80041c8:	4690      	movhi	r8, r2
 80041ca:	4698      	movls	r8, r3
 80041cc:	2303      	movs	r3, #3
 80041ce:	f02b 0204 	bic.w	r2, fp, #4
 80041d2:	6123      	str	r3, [r4, #16]
 80041d4:	6022      	str	r2, [r4, #0]
 80041d6:	f04f 0900 	mov.w	r9, #0
 80041da:	9700      	str	r7, [sp, #0]
 80041dc:	4633      	mov	r3, r6
 80041de:	aa0b      	add	r2, sp, #44	; 0x2c
 80041e0:	4621      	mov	r1, r4
 80041e2:	4628      	mov	r0, r5
 80041e4:	f000 f9e6 	bl	80045b4 <_printf_common>
 80041e8:	3001      	adds	r0, #1
 80041ea:	f040 808d 	bne.w	8004308 <_printf_float+0x1d4>
 80041ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f2:	b00d      	add	sp, #52	; 0x34
 80041f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	4640      	mov	r0, r8
 80041fe:	4649      	mov	r1, r9
 8004200:	f7fc fc9c 	bl	8000b3c <__aeabi_dcmpun>
 8004204:	b110      	cbz	r0, 800420c <_printf_float+0xd8>
 8004206:	4a8c      	ldr	r2, [pc, #560]	; (8004438 <_printf_float+0x304>)
 8004208:	4b8c      	ldr	r3, [pc, #560]	; (800443c <_printf_float+0x308>)
 800420a:	e7da      	b.n	80041c2 <_printf_float+0x8e>
 800420c:	6861      	ldr	r1, [r4, #4]
 800420e:	1c4b      	adds	r3, r1, #1
 8004210:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004214:	a80a      	add	r0, sp, #40	; 0x28
 8004216:	d13e      	bne.n	8004296 <_printf_float+0x162>
 8004218:	2306      	movs	r3, #6
 800421a:	6063      	str	r3, [r4, #4]
 800421c:	2300      	movs	r3, #0
 800421e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004222:	ab09      	add	r3, sp, #36	; 0x24
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	ec49 8b10 	vmov	d0, r8, r9
 800422a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800422e:	6022      	str	r2, [r4, #0]
 8004230:	f8cd a004 	str.w	sl, [sp, #4]
 8004234:	6861      	ldr	r1, [r4, #4]
 8004236:	4628      	mov	r0, r5
 8004238:	f7ff fee8 	bl	800400c <__cvt>
 800423c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004240:	2b47      	cmp	r3, #71	; 0x47
 8004242:	4680      	mov	r8, r0
 8004244:	d109      	bne.n	800425a <_printf_float+0x126>
 8004246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004248:	1cd8      	adds	r0, r3, #3
 800424a:	db02      	blt.n	8004252 <_printf_float+0x11e>
 800424c:	6862      	ldr	r2, [r4, #4]
 800424e:	4293      	cmp	r3, r2
 8004250:	dd47      	ble.n	80042e2 <_printf_float+0x1ae>
 8004252:	f1aa 0a02 	sub.w	sl, sl, #2
 8004256:	fa5f fa8a 	uxtb.w	sl, sl
 800425a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800425e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004260:	d824      	bhi.n	80042ac <_printf_float+0x178>
 8004262:	3901      	subs	r1, #1
 8004264:	4652      	mov	r2, sl
 8004266:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800426a:	9109      	str	r1, [sp, #36]	; 0x24
 800426c:	f7ff ff2f 	bl	80040ce <__exponent>
 8004270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004272:	1813      	adds	r3, r2, r0
 8004274:	2a01      	cmp	r2, #1
 8004276:	4681      	mov	r9, r0
 8004278:	6123      	str	r3, [r4, #16]
 800427a:	dc02      	bgt.n	8004282 <_printf_float+0x14e>
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	07d1      	lsls	r1, r2, #31
 8004280:	d501      	bpl.n	8004286 <_printf_float+0x152>
 8004282:	3301      	adds	r3, #1
 8004284:	6123      	str	r3, [r4, #16]
 8004286:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0a5      	beq.n	80041da <_printf_float+0xa6>
 800428e:	232d      	movs	r3, #45	; 0x2d
 8004290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004294:	e7a1      	b.n	80041da <_printf_float+0xa6>
 8004296:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800429a:	f000 8177 	beq.w	800458c <_printf_float+0x458>
 800429e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80042a2:	d1bb      	bne.n	800421c <_printf_float+0xe8>
 80042a4:	2900      	cmp	r1, #0
 80042a6:	d1b9      	bne.n	800421c <_printf_float+0xe8>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e7b6      	b.n	800421a <_printf_float+0xe6>
 80042ac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80042b0:	d119      	bne.n	80042e6 <_printf_float+0x1b2>
 80042b2:	2900      	cmp	r1, #0
 80042b4:	6863      	ldr	r3, [r4, #4]
 80042b6:	dd0c      	ble.n	80042d2 <_printf_float+0x19e>
 80042b8:	6121      	str	r1, [r4, #16]
 80042ba:	b913      	cbnz	r3, 80042c2 <_printf_float+0x18e>
 80042bc:	6822      	ldr	r2, [r4, #0]
 80042be:	07d2      	lsls	r2, r2, #31
 80042c0:	d502      	bpl.n	80042c8 <_printf_float+0x194>
 80042c2:	3301      	adds	r3, #1
 80042c4:	440b      	add	r3, r1
 80042c6:	6123      	str	r3, [r4, #16]
 80042c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80042cc:	f04f 0900 	mov.w	r9, #0
 80042d0:	e7d9      	b.n	8004286 <_printf_float+0x152>
 80042d2:	b913      	cbnz	r3, 80042da <_printf_float+0x1a6>
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	07d0      	lsls	r0, r2, #31
 80042d8:	d501      	bpl.n	80042de <_printf_float+0x1aa>
 80042da:	3302      	adds	r3, #2
 80042dc:	e7f3      	b.n	80042c6 <_printf_float+0x192>
 80042de:	2301      	movs	r3, #1
 80042e0:	e7f1      	b.n	80042c6 <_printf_float+0x192>
 80042e2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80042e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80042ea:	4293      	cmp	r3, r2
 80042ec:	db05      	blt.n	80042fa <_printf_float+0x1c6>
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	6123      	str	r3, [r4, #16]
 80042f2:	07d1      	lsls	r1, r2, #31
 80042f4:	d5e8      	bpl.n	80042c8 <_printf_float+0x194>
 80042f6:	3301      	adds	r3, #1
 80042f8:	e7e5      	b.n	80042c6 <_printf_float+0x192>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bfd4      	ite	le
 80042fe:	f1c3 0302 	rsble	r3, r3, #2
 8004302:	2301      	movgt	r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	e7de      	b.n	80042c6 <_printf_float+0x192>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	055a      	lsls	r2, r3, #21
 800430c:	d407      	bmi.n	800431e <_printf_float+0x1ea>
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	4642      	mov	r2, r8
 8004312:	4631      	mov	r1, r6
 8004314:	4628      	mov	r0, r5
 8004316:	47b8      	blx	r7
 8004318:	3001      	adds	r0, #1
 800431a:	d12b      	bne.n	8004374 <_printf_float+0x240>
 800431c:	e767      	b.n	80041ee <_printf_float+0xba>
 800431e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004322:	f240 80dc 	bls.w	80044de <_printf_float+0x3aa>
 8004326:	2200      	movs	r2, #0
 8004328:	2300      	movs	r3, #0
 800432a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800432e:	f7fc fbd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004332:	2800      	cmp	r0, #0
 8004334:	d033      	beq.n	800439e <_printf_float+0x26a>
 8004336:	2301      	movs	r3, #1
 8004338:	4a41      	ldr	r2, [pc, #260]	; (8004440 <_printf_float+0x30c>)
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	f43f af54 	beq.w	80041ee <_printf_float+0xba>
 8004346:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800434a:	429a      	cmp	r2, r3
 800434c:	db02      	blt.n	8004354 <_printf_float+0x220>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	07d8      	lsls	r0, r3, #31
 8004352:	d50f      	bpl.n	8004374 <_printf_float+0x240>
 8004354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004358:	4631      	mov	r1, r6
 800435a:	4628      	mov	r0, r5
 800435c:	47b8      	blx	r7
 800435e:	3001      	adds	r0, #1
 8004360:	f43f af45 	beq.w	80041ee <_printf_float+0xba>
 8004364:	f04f 0800 	mov.w	r8, #0
 8004368:	f104 091a 	add.w	r9, r4, #26
 800436c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	4543      	cmp	r3, r8
 8004372:	dc09      	bgt.n	8004388 <_printf_float+0x254>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	079b      	lsls	r3, r3, #30
 8004378:	f100 8103 	bmi.w	8004582 <_printf_float+0x44e>
 800437c:	68e0      	ldr	r0, [r4, #12]
 800437e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004380:	4298      	cmp	r0, r3
 8004382:	bfb8      	it	lt
 8004384:	4618      	movlt	r0, r3
 8004386:	e734      	b.n	80041f2 <_printf_float+0xbe>
 8004388:	2301      	movs	r3, #1
 800438a:	464a      	mov	r2, r9
 800438c:	4631      	mov	r1, r6
 800438e:	4628      	mov	r0, r5
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	f43f af2b 	beq.w	80041ee <_printf_float+0xba>
 8004398:	f108 0801 	add.w	r8, r8, #1
 800439c:	e7e6      	b.n	800436c <_printf_float+0x238>
 800439e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	dc2b      	bgt.n	80043fc <_printf_float+0x2c8>
 80043a4:	2301      	movs	r3, #1
 80043a6:	4a26      	ldr	r2, [pc, #152]	; (8004440 <_printf_float+0x30c>)
 80043a8:	4631      	mov	r1, r6
 80043aa:	4628      	mov	r0, r5
 80043ac:	47b8      	blx	r7
 80043ae:	3001      	adds	r0, #1
 80043b0:	f43f af1d 	beq.w	80041ee <_printf_float+0xba>
 80043b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b6:	b923      	cbnz	r3, 80043c2 <_printf_float+0x28e>
 80043b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043ba:	b913      	cbnz	r3, 80043c2 <_printf_float+0x28e>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	07d9      	lsls	r1, r3, #31
 80043c0:	d5d8      	bpl.n	8004374 <_printf_float+0x240>
 80043c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043c6:	4631      	mov	r1, r6
 80043c8:	4628      	mov	r0, r5
 80043ca:	47b8      	blx	r7
 80043cc:	3001      	adds	r0, #1
 80043ce:	f43f af0e 	beq.w	80041ee <_printf_float+0xba>
 80043d2:	f04f 0900 	mov.w	r9, #0
 80043d6:	f104 0a1a 	add.w	sl, r4, #26
 80043da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043dc:	425b      	negs	r3, r3
 80043de:	454b      	cmp	r3, r9
 80043e0:	dc01      	bgt.n	80043e6 <_printf_float+0x2b2>
 80043e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e4:	e794      	b.n	8004310 <_printf_float+0x1dc>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4652      	mov	r2, sl
 80043ea:	4631      	mov	r1, r6
 80043ec:	4628      	mov	r0, r5
 80043ee:	47b8      	blx	r7
 80043f0:	3001      	adds	r0, #1
 80043f2:	f43f aefc 	beq.w	80041ee <_printf_float+0xba>
 80043f6:	f109 0901 	add.w	r9, r9, #1
 80043fa:	e7ee      	b.n	80043da <_printf_float+0x2a6>
 80043fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004400:	429a      	cmp	r2, r3
 8004402:	bfa8      	it	ge
 8004404:	461a      	movge	r2, r3
 8004406:	2a00      	cmp	r2, #0
 8004408:	4691      	mov	r9, r2
 800440a:	dd07      	ble.n	800441c <_printf_float+0x2e8>
 800440c:	4613      	mov	r3, r2
 800440e:	4631      	mov	r1, r6
 8004410:	4642      	mov	r2, r8
 8004412:	4628      	mov	r0, r5
 8004414:	47b8      	blx	r7
 8004416:	3001      	adds	r0, #1
 8004418:	f43f aee9 	beq.w	80041ee <_printf_float+0xba>
 800441c:	f104 031a 	add.w	r3, r4, #26
 8004420:	f04f 0b00 	mov.w	fp, #0
 8004424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004428:	9306      	str	r3, [sp, #24]
 800442a:	e015      	b.n	8004458 <_printf_float+0x324>
 800442c:	7fefffff 	.word	0x7fefffff
 8004430:	08007a86 	.word	0x08007a86
 8004434:	08007a82 	.word	0x08007a82
 8004438:	08007a8e 	.word	0x08007a8e
 800443c:	08007a8a 	.word	0x08007a8a
 8004440:	08007a92 	.word	0x08007a92
 8004444:	2301      	movs	r3, #1
 8004446:	9a06      	ldr	r2, [sp, #24]
 8004448:	4631      	mov	r1, r6
 800444a:	4628      	mov	r0, r5
 800444c:	47b8      	blx	r7
 800444e:	3001      	adds	r0, #1
 8004450:	f43f aecd 	beq.w	80041ee <_printf_float+0xba>
 8004454:	f10b 0b01 	add.w	fp, fp, #1
 8004458:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800445c:	ebaa 0309 	sub.w	r3, sl, r9
 8004460:	455b      	cmp	r3, fp
 8004462:	dcef      	bgt.n	8004444 <_printf_float+0x310>
 8004464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004468:	429a      	cmp	r2, r3
 800446a:	44d0      	add	r8, sl
 800446c:	db15      	blt.n	800449a <_printf_float+0x366>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	07da      	lsls	r2, r3, #31
 8004472:	d412      	bmi.n	800449a <_printf_float+0x366>
 8004474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004476:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004478:	eba3 020a 	sub.w	r2, r3, sl
 800447c:	eba3 0a01 	sub.w	sl, r3, r1
 8004480:	4592      	cmp	sl, r2
 8004482:	bfa8      	it	ge
 8004484:	4692      	movge	sl, r2
 8004486:	f1ba 0f00 	cmp.w	sl, #0
 800448a:	dc0e      	bgt.n	80044aa <_printf_float+0x376>
 800448c:	f04f 0800 	mov.w	r8, #0
 8004490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004494:	f104 091a 	add.w	r9, r4, #26
 8004498:	e019      	b.n	80044ce <_printf_float+0x39a>
 800449a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800449e:	4631      	mov	r1, r6
 80044a0:	4628      	mov	r0, r5
 80044a2:	47b8      	blx	r7
 80044a4:	3001      	adds	r0, #1
 80044a6:	d1e5      	bne.n	8004474 <_printf_float+0x340>
 80044a8:	e6a1      	b.n	80041ee <_printf_float+0xba>
 80044aa:	4653      	mov	r3, sl
 80044ac:	4642      	mov	r2, r8
 80044ae:	4631      	mov	r1, r6
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	d1e9      	bne.n	800448c <_printf_float+0x358>
 80044b8:	e699      	b.n	80041ee <_printf_float+0xba>
 80044ba:	2301      	movs	r3, #1
 80044bc:	464a      	mov	r2, r9
 80044be:	4631      	mov	r1, r6
 80044c0:	4628      	mov	r0, r5
 80044c2:	47b8      	blx	r7
 80044c4:	3001      	adds	r0, #1
 80044c6:	f43f ae92 	beq.w	80041ee <_printf_float+0xba>
 80044ca:	f108 0801 	add.w	r8, r8, #1
 80044ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	eba3 030a 	sub.w	r3, r3, sl
 80044d8:	4543      	cmp	r3, r8
 80044da:	dcee      	bgt.n	80044ba <_printf_float+0x386>
 80044dc:	e74a      	b.n	8004374 <_printf_float+0x240>
 80044de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044e0:	2a01      	cmp	r2, #1
 80044e2:	dc01      	bgt.n	80044e8 <_printf_float+0x3b4>
 80044e4:	07db      	lsls	r3, r3, #31
 80044e6:	d53a      	bpl.n	800455e <_printf_float+0x42a>
 80044e8:	2301      	movs	r3, #1
 80044ea:	4642      	mov	r2, r8
 80044ec:	4631      	mov	r1, r6
 80044ee:	4628      	mov	r0, r5
 80044f0:	47b8      	blx	r7
 80044f2:	3001      	adds	r0, #1
 80044f4:	f43f ae7b 	beq.w	80041ee <_printf_float+0xba>
 80044f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044fc:	4631      	mov	r1, r6
 80044fe:	4628      	mov	r0, r5
 8004500:	47b8      	blx	r7
 8004502:	3001      	adds	r0, #1
 8004504:	f108 0801 	add.w	r8, r8, #1
 8004508:	f43f ae71 	beq.w	80041ee <_printf_float+0xba>
 800450c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800450e:	2200      	movs	r2, #0
 8004510:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004518:	2300      	movs	r3, #0
 800451a:	f7fc fadd 	bl	8000ad8 <__aeabi_dcmpeq>
 800451e:	b9c8      	cbnz	r0, 8004554 <_printf_float+0x420>
 8004520:	4653      	mov	r3, sl
 8004522:	4642      	mov	r2, r8
 8004524:	4631      	mov	r1, r6
 8004526:	4628      	mov	r0, r5
 8004528:	47b8      	blx	r7
 800452a:	3001      	adds	r0, #1
 800452c:	d10e      	bne.n	800454c <_printf_float+0x418>
 800452e:	e65e      	b.n	80041ee <_printf_float+0xba>
 8004530:	2301      	movs	r3, #1
 8004532:	4652      	mov	r2, sl
 8004534:	4631      	mov	r1, r6
 8004536:	4628      	mov	r0, r5
 8004538:	47b8      	blx	r7
 800453a:	3001      	adds	r0, #1
 800453c:	f43f ae57 	beq.w	80041ee <_printf_float+0xba>
 8004540:	f108 0801 	add.w	r8, r8, #1
 8004544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004546:	3b01      	subs	r3, #1
 8004548:	4543      	cmp	r3, r8
 800454a:	dcf1      	bgt.n	8004530 <_printf_float+0x3fc>
 800454c:	464b      	mov	r3, r9
 800454e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004552:	e6de      	b.n	8004312 <_printf_float+0x1de>
 8004554:	f04f 0800 	mov.w	r8, #0
 8004558:	f104 0a1a 	add.w	sl, r4, #26
 800455c:	e7f2      	b.n	8004544 <_printf_float+0x410>
 800455e:	2301      	movs	r3, #1
 8004560:	e7df      	b.n	8004522 <_printf_float+0x3ee>
 8004562:	2301      	movs	r3, #1
 8004564:	464a      	mov	r2, r9
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f ae3e 	beq.w	80041ee <_printf_float+0xba>
 8004572:	f108 0801 	add.w	r8, r8, #1
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	4543      	cmp	r3, r8
 800457e:	dcf0      	bgt.n	8004562 <_printf_float+0x42e>
 8004580:	e6fc      	b.n	800437c <_printf_float+0x248>
 8004582:	f04f 0800 	mov.w	r8, #0
 8004586:	f104 0919 	add.w	r9, r4, #25
 800458a:	e7f4      	b.n	8004576 <_printf_float+0x442>
 800458c:	2900      	cmp	r1, #0
 800458e:	f43f ae8b 	beq.w	80042a8 <_printf_float+0x174>
 8004592:	2300      	movs	r3, #0
 8004594:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004598:	ab09      	add	r3, sp, #36	; 0x24
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	ec49 8b10 	vmov	d0, r8, r9
 80045a0:	6022      	str	r2, [r4, #0]
 80045a2:	f8cd a004 	str.w	sl, [sp, #4]
 80045a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7ff fd2e 	bl	800400c <__cvt>
 80045b0:	4680      	mov	r8, r0
 80045b2:	e648      	b.n	8004246 <_printf_float+0x112>

080045b4 <_printf_common>:
 80045b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b8:	4691      	mov	r9, r2
 80045ba:	461f      	mov	r7, r3
 80045bc:	688a      	ldr	r2, [r1, #8]
 80045be:	690b      	ldr	r3, [r1, #16]
 80045c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045c4:	4293      	cmp	r3, r2
 80045c6:	bfb8      	it	lt
 80045c8:	4613      	movlt	r3, r2
 80045ca:	f8c9 3000 	str.w	r3, [r9]
 80045ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045d2:	4606      	mov	r6, r0
 80045d4:	460c      	mov	r4, r1
 80045d6:	b112      	cbz	r2, 80045de <_printf_common+0x2a>
 80045d8:	3301      	adds	r3, #1
 80045da:	f8c9 3000 	str.w	r3, [r9]
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	0699      	lsls	r1, r3, #26
 80045e2:	bf42      	ittt	mi
 80045e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80045e8:	3302      	addmi	r3, #2
 80045ea:	f8c9 3000 	strmi.w	r3, [r9]
 80045ee:	6825      	ldr	r5, [r4, #0]
 80045f0:	f015 0506 	ands.w	r5, r5, #6
 80045f4:	d107      	bne.n	8004606 <_printf_common+0x52>
 80045f6:	f104 0a19 	add.w	sl, r4, #25
 80045fa:	68e3      	ldr	r3, [r4, #12]
 80045fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	42ab      	cmp	r3, r5
 8004604:	dc28      	bgt.n	8004658 <_printf_common+0xa4>
 8004606:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800460a:	6822      	ldr	r2, [r4, #0]
 800460c:	3300      	adds	r3, #0
 800460e:	bf18      	it	ne
 8004610:	2301      	movne	r3, #1
 8004612:	0692      	lsls	r2, r2, #26
 8004614:	d42d      	bmi.n	8004672 <_printf_common+0xbe>
 8004616:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800461a:	4639      	mov	r1, r7
 800461c:	4630      	mov	r0, r6
 800461e:	47c0      	blx	r8
 8004620:	3001      	adds	r0, #1
 8004622:	d020      	beq.n	8004666 <_printf_common+0xb2>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	68e5      	ldr	r5, [r4, #12]
 8004628:	f8d9 2000 	ldr.w	r2, [r9]
 800462c:	f003 0306 	and.w	r3, r3, #6
 8004630:	2b04      	cmp	r3, #4
 8004632:	bf08      	it	eq
 8004634:	1aad      	subeq	r5, r5, r2
 8004636:	68a3      	ldr	r3, [r4, #8]
 8004638:	6922      	ldr	r2, [r4, #16]
 800463a:	bf0c      	ite	eq
 800463c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004640:	2500      	movne	r5, #0
 8004642:	4293      	cmp	r3, r2
 8004644:	bfc4      	itt	gt
 8004646:	1a9b      	subgt	r3, r3, r2
 8004648:	18ed      	addgt	r5, r5, r3
 800464a:	f04f 0900 	mov.w	r9, #0
 800464e:	341a      	adds	r4, #26
 8004650:	454d      	cmp	r5, r9
 8004652:	d11a      	bne.n	800468a <_printf_common+0xd6>
 8004654:	2000      	movs	r0, #0
 8004656:	e008      	b.n	800466a <_printf_common+0xb6>
 8004658:	2301      	movs	r3, #1
 800465a:	4652      	mov	r2, sl
 800465c:	4639      	mov	r1, r7
 800465e:	4630      	mov	r0, r6
 8004660:	47c0      	blx	r8
 8004662:	3001      	adds	r0, #1
 8004664:	d103      	bne.n	800466e <_printf_common+0xba>
 8004666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466e:	3501      	adds	r5, #1
 8004670:	e7c3      	b.n	80045fa <_printf_common+0x46>
 8004672:	18e1      	adds	r1, r4, r3
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	2030      	movs	r0, #48	; 0x30
 8004678:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800467c:	4422      	add	r2, r4
 800467e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004682:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004686:	3302      	adds	r3, #2
 8004688:	e7c5      	b.n	8004616 <_printf_common+0x62>
 800468a:	2301      	movs	r3, #1
 800468c:	4622      	mov	r2, r4
 800468e:	4639      	mov	r1, r7
 8004690:	4630      	mov	r0, r6
 8004692:	47c0      	blx	r8
 8004694:	3001      	adds	r0, #1
 8004696:	d0e6      	beq.n	8004666 <_printf_common+0xb2>
 8004698:	f109 0901 	add.w	r9, r9, #1
 800469c:	e7d8      	b.n	8004650 <_printf_common+0x9c>
	...

080046a0 <_printf_i>:
 80046a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80046a8:	460c      	mov	r4, r1
 80046aa:	7e09      	ldrb	r1, [r1, #24]
 80046ac:	b085      	sub	sp, #20
 80046ae:	296e      	cmp	r1, #110	; 0x6e
 80046b0:	4617      	mov	r7, r2
 80046b2:	4606      	mov	r6, r0
 80046b4:	4698      	mov	r8, r3
 80046b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046b8:	f000 80b3 	beq.w	8004822 <_printf_i+0x182>
 80046bc:	d822      	bhi.n	8004704 <_printf_i+0x64>
 80046be:	2963      	cmp	r1, #99	; 0x63
 80046c0:	d036      	beq.n	8004730 <_printf_i+0x90>
 80046c2:	d80a      	bhi.n	80046da <_printf_i+0x3a>
 80046c4:	2900      	cmp	r1, #0
 80046c6:	f000 80b9 	beq.w	800483c <_printf_i+0x19c>
 80046ca:	2958      	cmp	r1, #88	; 0x58
 80046cc:	f000 8083 	beq.w	80047d6 <_printf_i+0x136>
 80046d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80046d8:	e032      	b.n	8004740 <_printf_i+0xa0>
 80046da:	2964      	cmp	r1, #100	; 0x64
 80046dc:	d001      	beq.n	80046e2 <_printf_i+0x42>
 80046de:	2969      	cmp	r1, #105	; 0x69
 80046e0:	d1f6      	bne.n	80046d0 <_printf_i+0x30>
 80046e2:	6820      	ldr	r0, [r4, #0]
 80046e4:	6813      	ldr	r3, [r2, #0]
 80046e6:	0605      	lsls	r5, r0, #24
 80046e8:	f103 0104 	add.w	r1, r3, #4
 80046ec:	d52a      	bpl.n	8004744 <_printf_i+0xa4>
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6011      	str	r1, [r2, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da03      	bge.n	80046fe <_printf_i+0x5e>
 80046f6:	222d      	movs	r2, #45	; 0x2d
 80046f8:	425b      	negs	r3, r3
 80046fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046fe:	486f      	ldr	r0, [pc, #444]	; (80048bc <_printf_i+0x21c>)
 8004700:	220a      	movs	r2, #10
 8004702:	e039      	b.n	8004778 <_printf_i+0xd8>
 8004704:	2973      	cmp	r1, #115	; 0x73
 8004706:	f000 809d 	beq.w	8004844 <_printf_i+0x1a4>
 800470a:	d808      	bhi.n	800471e <_printf_i+0x7e>
 800470c:	296f      	cmp	r1, #111	; 0x6f
 800470e:	d020      	beq.n	8004752 <_printf_i+0xb2>
 8004710:	2970      	cmp	r1, #112	; 0x70
 8004712:	d1dd      	bne.n	80046d0 <_printf_i+0x30>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	f043 0320 	orr.w	r3, r3, #32
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	e003      	b.n	8004726 <_printf_i+0x86>
 800471e:	2975      	cmp	r1, #117	; 0x75
 8004720:	d017      	beq.n	8004752 <_printf_i+0xb2>
 8004722:	2978      	cmp	r1, #120	; 0x78
 8004724:	d1d4      	bne.n	80046d0 <_printf_i+0x30>
 8004726:	2378      	movs	r3, #120	; 0x78
 8004728:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800472c:	4864      	ldr	r0, [pc, #400]	; (80048c0 <_printf_i+0x220>)
 800472e:	e055      	b.n	80047dc <_printf_i+0x13c>
 8004730:	6813      	ldr	r3, [r2, #0]
 8004732:	1d19      	adds	r1, r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6011      	str	r1, [r2, #0]
 8004738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800473c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004740:	2301      	movs	r3, #1
 8004742:	e08c      	b.n	800485e <_printf_i+0x1be>
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6011      	str	r1, [r2, #0]
 8004748:	f010 0f40 	tst.w	r0, #64	; 0x40
 800474c:	bf18      	it	ne
 800474e:	b21b      	sxthne	r3, r3
 8004750:	e7cf      	b.n	80046f2 <_printf_i+0x52>
 8004752:	6813      	ldr	r3, [r2, #0]
 8004754:	6825      	ldr	r5, [r4, #0]
 8004756:	1d18      	adds	r0, r3, #4
 8004758:	6010      	str	r0, [r2, #0]
 800475a:	0628      	lsls	r0, r5, #24
 800475c:	d501      	bpl.n	8004762 <_printf_i+0xc2>
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	e002      	b.n	8004768 <_printf_i+0xc8>
 8004762:	0668      	lsls	r0, r5, #25
 8004764:	d5fb      	bpl.n	800475e <_printf_i+0xbe>
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	4854      	ldr	r0, [pc, #336]	; (80048bc <_printf_i+0x21c>)
 800476a:	296f      	cmp	r1, #111	; 0x6f
 800476c:	bf14      	ite	ne
 800476e:	220a      	movne	r2, #10
 8004770:	2208      	moveq	r2, #8
 8004772:	2100      	movs	r1, #0
 8004774:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004778:	6865      	ldr	r5, [r4, #4]
 800477a:	60a5      	str	r5, [r4, #8]
 800477c:	2d00      	cmp	r5, #0
 800477e:	f2c0 8095 	blt.w	80048ac <_printf_i+0x20c>
 8004782:	6821      	ldr	r1, [r4, #0]
 8004784:	f021 0104 	bic.w	r1, r1, #4
 8004788:	6021      	str	r1, [r4, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d13d      	bne.n	800480a <_printf_i+0x16a>
 800478e:	2d00      	cmp	r5, #0
 8004790:	f040 808e 	bne.w	80048b0 <_printf_i+0x210>
 8004794:	4665      	mov	r5, ip
 8004796:	2a08      	cmp	r2, #8
 8004798:	d10b      	bne.n	80047b2 <_printf_i+0x112>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	07db      	lsls	r3, r3, #31
 800479e:	d508      	bpl.n	80047b2 <_printf_i+0x112>
 80047a0:	6923      	ldr	r3, [r4, #16]
 80047a2:	6862      	ldr	r2, [r4, #4]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	bfde      	ittt	le
 80047a8:	2330      	movle	r3, #48	; 0x30
 80047aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80047b2:	ebac 0305 	sub.w	r3, ip, r5
 80047b6:	6123      	str	r3, [r4, #16]
 80047b8:	f8cd 8000 	str.w	r8, [sp]
 80047bc:	463b      	mov	r3, r7
 80047be:	aa03      	add	r2, sp, #12
 80047c0:	4621      	mov	r1, r4
 80047c2:	4630      	mov	r0, r6
 80047c4:	f7ff fef6 	bl	80045b4 <_printf_common>
 80047c8:	3001      	adds	r0, #1
 80047ca:	d14d      	bne.n	8004868 <_printf_i+0x1c8>
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047d0:	b005      	add	sp, #20
 80047d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047d6:	4839      	ldr	r0, [pc, #228]	; (80048bc <_printf_i+0x21c>)
 80047d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80047dc:	6813      	ldr	r3, [r2, #0]
 80047de:	6821      	ldr	r1, [r4, #0]
 80047e0:	1d1d      	adds	r5, r3, #4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6015      	str	r5, [r2, #0]
 80047e6:	060a      	lsls	r2, r1, #24
 80047e8:	d50b      	bpl.n	8004802 <_printf_i+0x162>
 80047ea:	07ca      	lsls	r2, r1, #31
 80047ec:	bf44      	itt	mi
 80047ee:	f041 0120 	orrmi.w	r1, r1, #32
 80047f2:	6021      	strmi	r1, [r4, #0]
 80047f4:	b91b      	cbnz	r3, 80047fe <_printf_i+0x15e>
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	f022 0220 	bic.w	r2, r2, #32
 80047fc:	6022      	str	r2, [r4, #0]
 80047fe:	2210      	movs	r2, #16
 8004800:	e7b7      	b.n	8004772 <_printf_i+0xd2>
 8004802:	064d      	lsls	r5, r1, #25
 8004804:	bf48      	it	mi
 8004806:	b29b      	uxthmi	r3, r3
 8004808:	e7ef      	b.n	80047ea <_printf_i+0x14a>
 800480a:	4665      	mov	r5, ip
 800480c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004810:	fb02 3311 	mls	r3, r2, r1, r3
 8004814:	5cc3      	ldrb	r3, [r0, r3]
 8004816:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800481a:	460b      	mov	r3, r1
 800481c:	2900      	cmp	r1, #0
 800481e:	d1f5      	bne.n	800480c <_printf_i+0x16c>
 8004820:	e7b9      	b.n	8004796 <_printf_i+0xf6>
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	6825      	ldr	r5, [r4, #0]
 8004826:	6961      	ldr	r1, [r4, #20]
 8004828:	1d18      	adds	r0, r3, #4
 800482a:	6010      	str	r0, [r2, #0]
 800482c:	0628      	lsls	r0, r5, #24
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	d501      	bpl.n	8004836 <_printf_i+0x196>
 8004832:	6019      	str	r1, [r3, #0]
 8004834:	e002      	b.n	800483c <_printf_i+0x19c>
 8004836:	066a      	lsls	r2, r5, #25
 8004838:	d5fb      	bpl.n	8004832 <_printf_i+0x192>
 800483a:	8019      	strh	r1, [r3, #0]
 800483c:	2300      	movs	r3, #0
 800483e:	6123      	str	r3, [r4, #16]
 8004840:	4665      	mov	r5, ip
 8004842:	e7b9      	b.n	80047b8 <_printf_i+0x118>
 8004844:	6813      	ldr	r3, [r2, #0]
 8004846:	1d19      	adds	r1, r3, #4
 8004848:	6011      	str	r1, [r2, #0]
 800484a:	681d      	ldr	r5, [r3, #0]
 800484c:	6862      	ldr	r2, [r4, #4]
 800484e:	2100      	movs	r1, #0
 8004850:	4628      	mov	r0, r5
 8004852:	f7fb fccd 	bl	80001f0 <memchr>
 8004856:	b108      	cbz	r0, 800485c <_printf_i+0x1bc>
 8004858:	1b40      	subs	r0, r0, r5
 800485a:	6060      	str	r0, [r4, #4]
 800485c:	6863      	ldr	r3, [r4, #4]
 800485e:	6123      	str	r3, [r4, #16]
 8004860:	2300      	movs	r3, #0
 8004862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004866:	e7a7      	b.n	80047b8 <_printf_i+0x118>
 8004868:	6923      	ldr	r3, [r4, #16]
 800486a:	462a      	mov	r2, r5
 800486c:	4639      	mov	r1, r7
 800486e:	4630      	mov	r0, r6
 8004870:	47c0      	blx	r8
 8004872:	3001      	adds	r0, #1
 8004874:	d0aa      	beq.n	80047cc <_printf_i+0x12c>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	079b      	lsls	r3, r3, #30
 800487a:	d413      	bmi.n	80048a4 <_printf_i+0x204>
 800487c:	68e0      	ldr	r0, [r4, #12]
 800487e:	9b03      	ldr	r3, [sp, #12]
 8004880:	4298      	cmp	r0, r3
 8004882:	bfb8      	it	lt
 8004884:	4618      	movlt	r0, r3
 8004886:	e7a3      	b.n	80047d0 <_printf_i+0x130>
 8004888:	2301      	movs	r3, #1
 800488a:	464a      	mov	r2, r9
 800488c:	4639      	mov	r1, r7
 800488e:	4630      	mov	r0, r6
 8004890:	47c0      	blx	r8
 8004892:	3001      	adds	r0, #1
 8004894:	d09a      	beq.n	80047cc <_printf_i+0x12c>
 8004896:	3501      	adds	r5, #1
 8004898:	68e3      	ldr	r3, [r4, #12]
 800489a:	9a03      	ldr	r2, [sp, #12]
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	42ab      	cmp	r3, r5
 80048a0:	dcf2      	bgt.n	8004888 <_printf_i+0x1e8>
 80048a2:	e7eb      	b.n	800487c <_printf_i+0x1dc>
 80048a4:	2500      	movs	r5, #0
 80048a6:	f104 0919 	add.w	r9, r4, #25
 80048aa:	e7f5      	b.n	8004898 <_printf_i+0x1f8>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1ac      	bne.n	800480a <_printf_i+0x16a>
 80048b0:	7803      	ldrb	r3, [r0, #0]
 80048b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048ba:	e76c      	b.n	8004796 <_printf_i+0xf6>
 80048bc:	08007a94 	.word	0x08007a94
 80048c0:	08007aa5 	.word	0x08007aa5

080048c4 <_scanf_float>:
 80048c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c8:	469a      	mov	sl, r3
 80048ca:	688b      	ldr	r3, [r1, #8]
 80048cc:	4616      	mov	r6, r2
 80048ce:	1e5a      	subs	r2, r3, #1
 80048d0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80048d4:	b087      	sub	sp, #28
 80048d6:	bf83      	ittte	hi
 80048d8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80048dc:	189b      	addhi	r3, r3, r2
 80048de:	9301      	strhi	r3, [sp, #4]
 80048e0:	2300      	movls	r3, #0
 80048e2:	bf86      	itte	hi
 80048e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80048e8:	608b      	strhi	r3, [r1, #8]
 80048ea:	9301      	strls	r3, [sp, #4]
 80048ec:	680b      	ldr	r3, [r1, #0]
 80048ee:	4688      	mov	r8, r1
 80048f0:	f04f 0b00 	mov.w	fp, #0
 80048f4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80048f8:	f848 3b1c 	str.w	r3, [r8], #28
 80048fc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004900:	4607      	mov	r7, r0
 8004902:	460c      	mov	r4, r1
 8004904:	4645      	mov	r5, r8
 8004906:	465a      	mov	r2, fp
 8004908:	46d9      	mov	r9, fp
 800490a:	f8cd b008 	str.w	fp, [sp, #8]
 800490e:	68a1      	ldr	r1, [r4, #8]
 8004910:	b181      	cbz	r1, 8004934 <_scanf_float+0x70>
 8004912:	6833      	ldr	r3, [r6, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b49      	cmp	r3, #73	; 0x49
 8004918:	d071      	beq.n	80049fe <_scanf_float+0x13a>
 800491a:	d84d      	bhi.n	80049b8 <_scanf_float+0xf4>
 800491c:	2b39      	cmp	r3, #57	; 0x39
 800491e:	d840      	bhi.n	80049a2 <_scanf_float+0xde>
 8004920:	2b31      	cmp	r3, #49	; 0x31
 8004922:	f080 8088 	bcs.w	8004a36 <_scanf_float+0x172>
 8004926:	2b2d      	cmp	r3, #45	; 0x2d
 8004928:	f000 8090 	beq.w	8004a4c <_scanf_float+0x188>
 800492c:	d815      	bhi.n	800495a <_scanf_float+0x96>
 800492e:	2b2b      	cmp	r3, #43	; 0x2b
 8004930:	f000 808c 	beq.w	8004a4c <_scanf_float+0x188>
 8004934:	f1b9 0f00 	cmp.w	r9, #0
 8004938:	d003      	beq.n	8004942 <_scanf_float+0x7e>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	3a01      	subs	r2, #1
 8004944:	2a01      	cmp	r2, #1
 8004946:	f200 80ea 	bhi.w	8004b1e <_scanf_float+0x25a>
 800494a:	4545      	cmp	r5, r8
 800494c:	f200 80dc 	bhi.w	8004b08 <_scanf_float+0x244>
 8004950:	2601      	movs	r6, #1
 8004952:	4630      	mov	r0, r6
 8004954:	b007      	add	sp, #28
 8004956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495a:	2b2e      	cmp	r3, #46	; 0x2e
 800495c:	f000 809f 	beq.w	8004a9e <_scanf_float+0x1da>
 8004960:	2b30      	cmp	r3, #48	; 0x30
 8004962:	d1e7      	bne.n	8004934 <_scanf_float+0x70>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	f410 7f80 	tst.w	r0, #256	; 0x100
 800496a:	d064      	beq.n	8004a36 <_scanf_float+0x172>
 800496c:	9b01      	ldr	r3, [sp, #4]
 800496e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004972:	6020      	str	r0, [r4, #0]
 8004974:	f109 0901 	add.w	r9, r9, #1
 8004978:	b11b      	cbz	r3, 8004982 <_scanf_float+0xbe>
 800497a:	3b01      	subs	r3, #1
 800497c:	3101      	adds	r1, #1
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	60a1      	str	r1, [r4, #8]
 8004982:	68a3      	ldr	r3, [r4, #8]
 8004984:	3b01      	subs	r3, #1
 8004986:	60a3      	str	r3, [r4, #8]
 8004988:	6923      	ldr	r3, [r4, #16]
 800498a:	3301      	adds	r3, #1
 800498c:	6123      	str	r3, [r4, #16]
 800498e:	6873      	ldr	r3, [r6, #4]
 8004990:	3b01      	subs	r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	6073      	str	r3, [r6, #4]
 8004996:	f340 80ac 	ble.w	8004af2 <_scanf_float+0x22e>
 800499a:	6833      	ldr	r3, [r6, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	6033      	str	r3, [r6, #0]
 80049a0:	e7b5      	b.n	800490e <_scanf_float+0x4a>
 80049a2:	2b45      	cmp	r3, #69	; 0x45
 80049a4:	f000 8085 	beq.w	8004ab2 <_scanf_float+0x1ee>
 80049a8:	2b46      	cmp	r3, #70	; 0x46
 80049aa:	d06a      	beq.n	8004a82 <_scanf_float+0x1be>
 80049ac:	2b41      	cmp	r3, #65	; 0x41
 80049ae:	d1c1      	bne.n	8004934 <_scanf_float+0x70>
 80049b0:	2a01      	cmp	r2, #1
 80049b2:	d1bf      	bne.n	8004934 <_scanf_float+0x70>
 80049b4:	2202      	movs	r2, #2
 80049b6:	e046      	b.n	8004a46 <_scanf_float+0x182>
 80049b8:	2b65      	cmp	r3, #101	; 0x65
 80049ba:	d07a      	beq.n	8004ab2 <_scanf_float+0x1ee>
 80049bc:	d818      	bhi.n	80049f0 <_scanf_float+0x12c>
 80049be:	2b54      	cmp	r3, #84	; 0x54
 80049c0:	d066      	beq.n	8004a90 <_scanf_float+0x1cc>
 80049c2:	d811      	bhi.n	80049e8 <_scanf_float+0x124>
 80049c4:	2b4e      	cmp	r3, #78	; 0x4e
 80049c6:	d1b5      	bne.n	8004934 <_scanf_float+0x70>
 80049c8:	2a00      	cmp	r2, #0
 80049ca:	d146      	bne.n	8004a5a <_scanf_float+0x196>
 80049cc:	f1b9 0f00 	cmp.w	r9, #0
 80049d0:	d145      	bne.n	8004a5e <_scanf_float+0x19a>
 80049d2:	6821      	ldr	r1, [r4, #0]
 80049d4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80049d8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80049dc:	d13f      	bne.n	8004a5e <_scanf_float+0x19a>
 80049de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80049e2:	6021      	str	r1, [r4, #0]
 80049e4:	2201      	movs	r2, #1
 80049e6:	e02e      	b.n	8004a46 <_scanf_float+0x182>
 80049e8:	2b59      	cmp	r3, #89	; 0x59
 80049ea:	d01e      	beq.n	8004a2a <_scanf_float+0x166>
 80049ec:	2b61      	cmp	r3, #97	; 0x61
 80049ee:	e7de      	b.n	80049ae <_scanf_float+0xea>
 80049f0:	2b6e      	cmp	r3, #110	; 0x6e
 80049f2:	d0e9      	beq.n	80049c8 <_scanf_float+0x104>
 80049f4:	d815      	bhi.n	8004a22 <_scanf_float+0x15e>
 80049f6:	2b66      	cmp	r3, #102	; 0x66
 80049f8:	d043      	beq.n	8004a82 <_scanf_float+0x1be>
 80049fa:	2b69      	cmp	r3, #105	; 0x69
 80049fc:	d19a      	bne.n	8004934 <_scanf_float+0x70>
 80049fe:	f1bb 0f00 	cmp.w	fp, #0
 8004a02:	d138      	bne.n	8004a76 <_scanf_float+0x1b2>
 8004a04:	f1b9 0f00 	cmp.w	r9, #0
 8004a08:	d197      	bne.n	800493a <_scanf_float+0x76>
 8004a0a:	6821      	ldr	r1, [r4, #0]
 8004a0c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004a10:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004a14:	d195      	bne.n	8004942 <_scanf_float+0x7e>
 8004a16:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004a1a:	6021      	str	r1, [r4, #0]
 8004a1c:	f04f 0b01 	mov.w	fp, #1
 8004a20:	e011      	b.n	8004a46 <_scanf_float+0x182>
 8004a22:	2b74      	cmp	r3, #116	; 0x74
 8004a24:	d034      	beq.n	8004a90 <_scanf_float+0x1cc>
 8004a26:	2b79      	cmp	r3, #121	; 0x79
 8004a28:	d184      	bne.n	8004934 <_scanf_float+0x70>
 8004a2a:	f1bb 0f07 	cmp.w	fp, #7
 8004a2e:	d181      	bne.n	8004934 <_scanf_float+0x70>
 8004a30:	f04f 0b08 	mov.w	fp, #8
 8004a34:	e007      	b.n	8004a46 <_scanf_float+0x182>
 8004a36:	eb12 0f0b 	cmn.w	r2, fp
 8004a3a:	f47f af7b 	bne.w	8004934 <_scanf_float+0x70>
 8004a3e:	6821      	ldr	r1, [r4, #0]
 8004a40:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004a44:	6021      	str	r1, [r4, #0]
 8004a46:	702b      	strb	r3, [r5, #0]
 8004a48:	3501      	adds	r5, #1
 8004a4a:	e79a      	b.n	8004982 <_scanf_float+0xbe>
 8004a4c:	6821      	ldr	r1, [r4, #0]
 8004a4e:	0608      	lsls	r0, r1, #24
 8004a50:	f57f af70 	bpl.w	8004934 <_scanf_float+0x70>
 8004a54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004a58:	e7f4      	b.n	8004a44 <_scanf_float+0x180>
 8004a5a:	2a02      	cmp	r2, #2
 8004a5c:	d047      	beq.n	8004aee <_scanf_float+0x22a>
 8004a5e:	f1bb 0f01 	cmp.w	fp, #1
 8004a62:	d003      	beq.n	8004a6c <_scanf_float+0x1a8>
 8004a64:	f1bb 0f04 	cmp.w	fp, #4
 8004a68:	f47f af64 	bne.w	8004934 <_scanf_float+0x70>
 8004a6c:	f10b 0b01 	add.w	fp, fp, #1
 8004a70:	fa5f fb8b 	uxtb.w	fp, fp
 8004a74:	e7e7      	b.n	8004a46 <_scanf_float+0x182>
 8004a76:	f1bb 0f03 	cmp.w	fp, #3
 8004a7a:	d0f7      	beq.n	8004a6c <_scanf_float+0x1a8>
 8004a7c:	f1bb 0f05 	cmp.w	fp, #5
 8004a80:	e7f2      	b.n	8004a68 <_scanf_float+0x1a4>
 8004a82:	f1bb 0f02 	cmp.w	fp, #2
 8004a86:	f47f af55 	bne.w	8004934 <_scanf_float+0x70>
 8004a8a:	f04f 0b03 	mov.w	fp, #3
 8004a8e:	e7da      	b.n	8004a46 <_scanf_float+0x182>
 8004a90:	f1bb 0f06 	cmp.w	fp, #6
 8004a94:	f47f af4e 	bne.w	8004934 <_scanf_float+0x70>
 8004a98:	f04f 0b07 	mov.w	fp, #7
 8004a9c:	e7d3      	b.n	8004a46 <_scanf_float+0x182>
 8004a9e:	6821      	ldr	r1, [r4, #0]
 8004aa0:	0588      	lsls	r0, r1, #22
 8004aa2:	f57f af47 	bpl.w	8004934 <_scanf_float+0x70>
 8004aa6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004aaa:	6021      	str	r1, [r4, #0]
 8004aac:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ab0:	e7c9      	b.n	8004a46 <_scanf_float+0x182>
 8004ab2:	6821      	ldr	r1, [r4, #0]
 8004ab4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004ab8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004abc:	d006      	beq.n	8004acc <_scanf_float+0x208>
 8004abe:	0548      	lsls	r0, r1, #21
 8004ac0:	f57f af38 	bpl.w	8004934 <_scanf_float+0x70>
 8004ac4:	f1b9 0f00 	cmp.w	r9, #0
 8004ac8:	f43f af3b 	beq.w	8004942 <_scanf_float+0x7e>
 8004acc:	0588      	lsls	r0, r1, #22
 8004ace:	bf58      	it	pl
 8004ad0:	9802      	ldrpl	r0, [sp, #8]
 8004ad2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004ad6:	bf58      	it	pl
 8004ad8:	eba9 0000 	subpl.w	r0, r9, r0
 8004adc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004ae0:	bf58      	it	pl
 8004ae2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004ae6:	6021      	str	r1, [r4, #0]
 8004ae8:	f04f 0900 	mov.w	r9, #0
 8004aec:	e7ab      	b.n	8004a46 <_scanf_float+0x182>
 8004aee:	2203      	movs	r2, #3
 8004af0:	e7a9      	b.n	8004a46 <_scanf_float+0x182>
 8004af2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004af6:	9205      	str	r2, [sp, #20]
 8004af8:	4631      	mov	r1, r6
 8004afa:	4638      	mov	r0, r7
 8004afc:	4798      	blx	r3
 8004afe:	9a05      	ldr	r2, [sp, #20]
 8004b00:	2800      	cmp	r0, #0
 8004b02:	f43f af04 	beq.w	800490e <_scanf_float+0x4a>
 8004b06:	e715      	b.n	8004934 <_scanf_float+0x70>
 8004b08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b0c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004b10:	4632      	mov	r2, r6
 8004b12:	4638      	mov	r0, r7
 8004b14:	4798      	blx	r3
 8004b16:	6923      	ldr	r3, [r4, #16]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	6123      	str	r3, [r4, #16]
 8004b1c:	e715      	b.n	800494a <_scanf_float+0x86>
 8004b1e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d80a      	bhi.n	8004b3c <_scanf_float+0x278>
 8004b26:	f1bb 0f02 	cmp.w	fp, #2
 8004b2a:	d968      	bls.n	8004bfe <_scanf_float+0x33a>
 8004b2c:	f1ab 0b03 	sub.w	fp, fp, #3
 8004b30:	fa5f fb8b 	uxtb.w	fp, fp
 8004b34:	eba5 0b0b 	sub.w	fp, r5, fp
 8004b38:	455d      	cmp	r5, fp
 8004b3a:	d14b      	bne.n	8004bd4 <_scanf_float+0x310>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	05da      	lsls	r2, r3, #23
 8004b40:	d51f      	bpl.n	8004b82 <_scanf_float+0x2be>
 8004b42:	055b      	lsls	r3, r3, #21
 8004b44:	d468      	bmi.n	8004c18 <_scanf_float+0x354>
 8004b46:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	2965      	cmp	r1, #101	; 0x65
 8004b4e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004b52:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	d00d      	beq.n	8004b76 <_scanf_float+0x2b2>
 8004b5a:	2945      	cmp	r1, #69	; 0x45
 8004b5c:	d00b      	beq.n	8004b76 <_scanf_float+0x2b2>
 8004b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b62:	4632      	mov	r2, r6
 8004b64:	4638      	mov	r0, r7
 8004b66:	4798      	blx	r3
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	f1a5 0b02 	sub.w	fp, r5, #2
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b7a:	4632      	mov	r2, r6
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	4798      	blx	r3
 8004b80:	465d      	mov	r5, fp
 8004b82:	6826      	ldr	r6, [r4, #0]
 8004b84:	f016 0610 	ands.w	r6, r6, #16
 8004b88:	d17a      	bne.n	8004c80 <_scanf_float+0x3bc>
 8004b8a:	702e      	strb	r6, [r5, #0]
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d142      	bne.n	8004c1e <_scanf_float+0x35a>
 8004b98:	9b02      	ldr	r3, [sp, #8]
 8004b9a:	eba9 0303 	sub.w	r3, r9, r3
 8004b9e:	425a      	negs	r2, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d149      	bne.n	8004c38 <_scanf_float+0x374>
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	4638      	mov	r0, r7
 8004baa:	f000 fea5 	bl	80058f8 <_strtod_r>
 8004bae:	6825      	ldr	r5, [r4, #0]
 8004bb0:	f8da 3000 	ldr.w	r3, [sl]
 8004bb4:	f015 0f02 	tst.w	r5, #2
 8004bb8:	f103 0204 	add.w	r2, r3, #4
 8004bbc:	ec59 8b10 	vmov	r8, r9, d0
 8004bc0:	f8ca 2000 	str.w	r2, [sl]
 8004bc4:	d043      	beq.n	8004c4e <_scanf_float+0x38a>
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	e9c3 8900 	strd	r8, r9, [r3]
 8004bcc:	68e3      	ldr	r3, [r4, #12]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60e3      	str	r3, [r4, #12]
 8004bd2:	e6be      	b.n	8004952 <_scanf_float+0x8e>
 8004bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004bdc:	4632      	mov	r2, r6
 8004bde:	4638      	mov	r0, r7
 8004be0:	4798      	blx	r3
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	6123      	str	r3, [r4, #16]
 8004be8:	e7a6      	b.n	8004b38 <_scanf_float+0x274>
 8004bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004bf2:	4632      	mov	r2, r6
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	4798      	blx	r3
 8004bf8:	6923      	ldr	r3, [r4, #16]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	6123      	str	r3, [r4, #16]
 8004bfe:	4545      	cmp	r5, r8
 8004c00:	d8f3      	bhi.n	8004bea <_scanf_float+0x326>
 8004c02:	e6a5      	b.n	8004950 <_scanf_float+0x8c>
 8004c04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	4638      	mov	r0, r7
 8004c10:	4798      	blx	r3
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	4545      	cmp	r5, r8
 8004c1a:	d8f3      	bhi.n	8004c04 <_scanf_float+0x340>
 8004c1c:	e698      	b.n	8004950 <_scanf_float+0x8c>
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0bf      	beq.n	8004ba4 <_scanf_float+0x2e0>
 8004c24:	9904      	ldr	r1, [sp, #16]
 8004c26:	230a      	movs	r3, #10
 8004c28:	4632      	mov	r2, r6
 8004c2a:	3101      	adds	r1, #1
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	f000 feef 	bl	8005a10 <_strtol_r>
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	9d04      	ldr	r5, [sp, #16]
 8004c36:	1ac2      	subs	r2, r0, r3
 8004c38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004c3c:	429d      	cmp	r5, r3
 8004c3e:	bf28      	it	cs
 8004c40:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004c44:	490f      	ldr	r1, [pc, #60]	; (8004c84 <_scanf_float+0x3c0>)
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 f824 	bl	8004c94 <siprintf>
 8004c4c:	e7aa      	b.n	8004ba4 <_scanf_float+0x2e0>
 8004c4e:	f015 0504 	ands.w	r5, r5, #4
 8004c52:	d1b8      	bne.n	8004bc6 <_scanf_float+0x302>
 8004c54:	681f      	ldr	r7, [r3, #0]
 8004c56:	ee10 2a10 	vmov	r2, s0
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	ee10 0a10 	vmov	r0, s0
 8004c60:	4649      	mov	r1, r9
 8004c62:	f7fb ff6b 	bl	8000b3c <__aeabi_dcmpun>
 8004c66:	b128      	cbz	r0, 8004c74 <_scanf_float+0x3b0>
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f000 f80d 	bl	8004c88 <nanf>
 8004c6e:	ed87 0a00 	vstr	s0, [r7]
 8004c72:	e7ab      	b.n	8004bcc <_scanf_float+0x308>
 8004c74:	4640      	mov	r0, r8
 8004c76:	4649      	mov	r1, r9
 8004c78:	f7fb ffbe 	bl	8000bf8 <__aeabi_d2f>
 8004c7c:	6038      	str	r0, [r7, #0]
 8004c7e:	e7a5      	b.n	8004bcc <_scanf_float+0x308>
 8004c80:	2600      	movs	r6, #0
 8004c82:	e666      	b.n	8004952 <_scanf_float+0x8e>
 8004c84:	08007ab6 	.word	0x08007ab6

08004c88 <nanf>:
 8004c88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004c90 <nanf+0x8>
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	7fc00000 	.word	0x7fc00000

08004c94 <siprintf>:
 8004c94:	b40e      	push	{r1, r2, r3}
 8004c96:	b500      	push	{lr}
 8004c98:	b09c      	sub	sp, #112	; 0x70
 8004c9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c9c:	9002      	str	r0, [sp, #8]
 8004c9e:	9006      	str	r0, [sp, #24]
 8004ca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ca4:	4809      	ldr	r0, [pc, #36]	; (8004ccc <siprintf+0x38>)
 8004ca6:	9107      	str	r1, [sp, #28]
 8004ca8:	9104      	str	r1, [sp, #16]
 8004caa:	4909      	ldr	r1, [pc, #36]	; (8004cd0 <siprintf+0x3c>)
 8004cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cb0:	9105      	str	r1, [sp, #20]
 8004cb2:	6800      	ldr	r0, [r0, #0]
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	a902      	add	r1, sp, #8
 8004cb8:	f002 fd5c 	bl	8007774 <_svfiprintf_r>
 8004cbc:	9b02      	ldr	r3, [sp, #8]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	b01c      	add	sp, #112	; 0x70
 8004cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cc8:	b003      	add	sp, #12
 8004cca:	4770      	bx	lr
 8004ccc:	20000038 	.word	0x20000038
 8004cd0:	ffff0208 	.word	0xffff0208

08004cd4 <sulp>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	460d      	mov	r5, r1
 8004cda:	ec45 4b10 	vmov	d0, r4, r5
 8004cde:	4616      	mov	r6, r2
 8004ce0:	f002 fb04 	bl	80072ec <__ulp>
 8004ce4:	ec51 0b10 	vmov	r0, r1, d0
 8004ce8:	b17e      	cbz	r6, 8004d0a <sulp+0x36>
 8004cea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004cee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dd09      	ble.n	8004d0a <sulp+0x36>
 8004cf6:	051b      	lsls	r3, r3, #20
 8004cf8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004cfc:	2400      	movs	r4, #0
 8004cfe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	f7fb fc7f 	bl	8000608 <__aeabi_dmul>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	0000      	movs	r0, r0
	...

08004d10 <_strtod_l>:
 8004d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d14:	461f      	mov	r7, r3
 8004d16:	b0a1      	sub	sp, #132	; 0x84
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4681      	mov	r9, r0
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	460e      	mov	r6, r1
 8004d20:	9217      	str	r2, [sp, #92]	; 0x5c
 8004d22:	931c      	str	r3, [sp, #112]	; 0x70
 8004d24:	f001 fffe 	bl	8006d24 <__localeconv_l>
 8004d28:	4680      	mov	r8, r0
 8004d2a:	6800      	ldr	r0, [r0, #0]
 8004d2c:	f7fb fa58 	bl	80001e0 <strlen>
 8004d30:	f04f 0a00 	mov.w	sl, #0
 8004d34:	4604      	mov	r4, r0
 8004d36:	f04f 0b00 	mov.w	fp, #0
 8004d3a:	961b      	str	r6, [sp, #108]	; 0x6c
 8004d3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d3e:	781a      	ldrb	r2, [r3, #0]
 8004d40:	2a0d      	cmp	r2, #13
 8004d42:	d832      	bhi.n	8004daa <_strtod_l+0x9a>
 8004d44:	2a09      	cmp	r2, #9
 8004d46:	d236      	bcs.n	8004db6 <_strtod_l+0xa6>
 8004d48:	2a00      	cmp	r2, #0
 8004d4a:	d03e      	beq.n	8004dca <_strtod_l+0xba>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8004d50:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004d52:	782b      	ldrb	r3, [r5, #0]
 8004d54:	2b30      	cmp	r3, #48	; 0x30
 8004d56:	f040 80ac 	bne.w	8004eb2 <_strtod_l+0x1a2>
 8004d5a:	786b      	ldrb	r3, [r5, #1]
 8004d5c:	2b58      	cmp	r3, #88	; 0x58
 8004d5e:	d001      	beq.n	8004d64 <_strtod_l+0x54>
 8004d60:	2b78      	cmp	r3, #120	; 0x78
 8004d62:	d167      	bne.n	8004e34 <_strtod_l+0x124>
 8004d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	ab1c      	add	r3, sp, #112	; 0x70
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	9702      	str	r7, [sp, #8]
 8004d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d70:	4a88      	ldr	r2, [pc, #544]	; (8004f94 <_strtod_l+0x284>)
 8004d72:	a91b      	add	r1, sp, #108	; 0x6c
 8004d74:	4648      	mov	r0, r9
 8004d76:	f001 fcfe 	bl	8006776 <__gethex>
 8004d7a:	f010 0407 	ands.w	r4, r0, #7
 8004d7e:	4606      	mov	r6, r0
 8004d80:	d005      	beq.n	8004d8e <_strtod_l+0x7e>
 8004d82:	2c06      	cmp	r4, #6
 8004d84:	d12b      	bne.n	8004dde <_strtod_l+0xce>
 8004d86:	3501      	adds	r5, #1
 8004d88:	2300      	movs	r3, #0
 8004d8a:	951b      	str	r5, [sp, #108]	; 0x6c
 8004d8c:	930d      	str	r3, [sp, #52]	; 0x34
 8004d8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 859a 	bne.w	80058ca <_strtod_l+0xbba>
 8004d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d98:	b1e3      	cbz	r3, 8004dd4 <_strtod_l+0xc4>
 8004d9a:	4652      	mov	r2, sl
 8004d9c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004da0:	ec43 2b10 	vmov	d0, r2, r3
 8004da4:	b021      	add	sp, #132	; 0x84
 8004da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004daa:	2a2b      	cmp	r2, #43	; 0x2b
 8004dac:	d015      	beq.n	8004dda <_strtod_l+0xca>
 8004dae:	2a2d      	cmp	r2, #45	; 0x2d
 8004db0:	d004      	beq.n	8004dbc <_strtod_l+0xac>
 8004db2:	2a20      	cmp	r2, #32
 8004db4:	d1ca      	bne.n	8004d4c <_strtod_l+0x3c>
 8004db6:	3301      	adds	r3, #1
 8004db8:	931b      	str	r3, [sp, #108]	; 0x6c
 8004dba:	e7bf      	b.n	8004d3c <_strtod_l+0x2c>
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	920d      	str	r2, [sp, #52]	; 0x34
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	921b      	str	r2, [sp, #108]	; 0x6c
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1c2      	bne.n	8004d50 <_strtod_l+0x40>
 8004dca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dcc:	961b      	str	r6, [sp, #108]	; 0x6c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 8579 	bne.w	80058c6 <_strtod_l+0xbb6>
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	465b      	mov	r3, fp
 8004dd8:	e7e2      	b.n	8004da0 <_strtod_l+0x90>
 8004dda:	2200      	movs	r2, #0
 8004ddc:	e7ef      	b.n	8004dbe <_strtod_l+0xae>
 8004dde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004de0:	b13a      	cbz	r2, 8004df2 <_strtod_l+0xe2>
 8004de2:	2135      	movs	r1, #53	; 0x35
 8004de4:	a81e      	add	r0, sp, #120	; 0x78
 8004de6:	f002 fb79 	bl	80074dc <__copybits>
 8004dea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004dec:	4648      	mov	r0, r9
 8004dee:	f001 ffe5 	bl	8006dbc <_Bfree>
 8004df2:	3c01      	subs	r4, #1
 8004df4:	2c04      	cmp	r4, #4
 8004df6:	d806      	bhi.n	8004e06 <_strtod_l+0xf6>
 8004df8:	e8df f004 	tbb	[pc, r4]
 8004dfc:	1714030a 	.word	0x1714030a
 8004e00:	0a          	.byte	0x0a
 8004e01:	00          	.byte	0x00
 8004e02:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004e06:	0730      	lsls	r0, r6, #28
 8004e08:	d5c1      	bpl.n	8004d8e <_strtod_l+0x7e>
 8004e0a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004e0e:	e7be      	b.n	8004d8e <_strtod_l+0x7e>
 8004e10:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004e14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004e16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e1a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004e1e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004e22:	e7f0      	b.n	8004e06 <_strtod_l+0xf6>
 8004e24:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004f98 <_strtod_l+0x288>
 8004e28:	e7ed      	b.n	8004e06 <_strtod_l+0xf6>
 8004e2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004e2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004e32:	e7e8      	b.n	8004e06 <_strtod_l+0xf6>
 8004e34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b30      	cmp	r3, #48	; 0x30
 8004e3e:	d0f9      	beq.n	8004e34 <_strtod_l+0x124>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0a4      	beq.n	8004d8e <_strtod_l+0x7e>
 8004e44:	2301      	movs	r3, #1
 8004e46:	2500      	movs	r5, #0
 8004e48:	9306      	str	r3, [sp, #24]
 8004e4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e4c:	9308      	str	r3, [sp, #32]
 8004e4e:	9507      	str	r5, [sp, #28]
 8004e50:	9505      	str	r5, [sp, #20]
 8004e52:	220a      	movs	r2, #10
 8004e54:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004e56:	7807      	ldrb	r7, [r0, #0]
 8004e58:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004e5c:	b2d9      	uxtb	r1, r3
 8004e5e:	2909      	cmp	r1, #9
 8004e60:	d929      	bls.n	8004eb6 <_strtod_l+0x1a6>
 8004e62:	4622      	mov	r2, r4
 8004e64:	f8d8 1000 	ldr.w	r1, [r8]
 8004e68:	f002 fd8c 	bl	8007984 <strncmp>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d031      	beq.n	8004ed4 <_strtod_l+0x1c4>
 8004e70:	2000      	movs	r0, #0
 8004e72:	9c05      	ldr	r4, [sp, #20]
 8004e74:	9004      	str	r0, [sp, #16]
 8004e76:	463b      	mov	r3, r7
 8004e78:	4602      	mov	r2, r0
 8004e7a:	2b65      	cmp	r3, #101	; 0x65
 8004e7c:	d001      	beq.n	8004e82 <_strtod_l+0x172>
 8004e7e:	2b45      	cmp	r3, #69	; 0x45
 8004e80:	d114      	bne.n	8004eac <_strtod_l+0x19c>
 8004e82:	b924      	cbnz	r4, 8004e8e <_strtod_l+0x17e>
 8004e84:	b910      	cbnz	r0, 8004e8c <_strtod_l+0x17c>
 8004e86:	9b06      	ldr	r3, [sp, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d09e      	beq.n	8004dca <_strtod_l+0xba>
 8004e8c:	2400      	movs	r4, #0
 8004e8e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004e90:	1c73      	adds	r3, r6, #1
 8004e92:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e94:	7873      	ldrb	r3, [r6, #1]
 8004e96:	2b2b      	cmp	r3, #43	; 0x2b
 8004e98:	d078      	beq.n	8004f8c <_strtod_l+0x27c>
 8004e9a:	2b2d      	cmp	r3, #45	; 0x2d
 8004e9c:	d070      	beq.n	8004f80 <_strtod_l+0x270>
 8004e9e:	f04f 0c00 	mov.w	ip, #0
 8004ea2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004ea6:	2f09      	cmp	r7, #9
 8004ea8:	d97c      	bls.n	8004fa4 <_strtod_l+0x294>
 8004eaa:	961b      	str	r6, [sp, #108]	; 0x6c
 8004eac:	f04f 0e00 	mov.w	lr, #0
 8004eb0:	e09a      	b.n	8004fe8 <_strtod_l+0x2d8>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e7c7      	b.n	8004e46 <_strtod_l+0x136>
 8004eb6:	9905      	ldr	r1, [sp, #20]
 8004eb8:	2908      	cmp	r1, #8
 8004eba:	bfdd      	ittte	le
 8004ebc:	9907      	ldrle	r1, [sp, #28]
 8004ebe:	fb02 3301 	mlale	r3, r2, r1, r3
 8004ec2:	9307      	strle	r3, [sp, #28]
 8004ec4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004ec8:	9b05      	ldr	r3, [sp, #20]
 8004eca:	3001      	adds	r0, #1
 8004ecc:	3301      	adds	r3, #1
 8004ece:	9305      	str	r3, [sp, #20]
 8004ed0:	901b      	str	r0, [sp, #108]	; 0x6c
 8004ed2:	e7bf      	b.n	8004e54 <_strtod_l+0x144>
 8004ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ed6:	191a      	adds	r2, r3, r4
 8004ed8:	921b      	str	r2, [sp, #108]	; 0x6c
 8004eda:	9a05      	ldr	r2, [sp, #20]
 8004edc:	5d1b      	ldrb	r3, [r3, r4]
 8004ede:	2a00      	cmp	r2, #0
 8004ee0:	d037      	beq.n	8004f52 <_strtod_l+0x242>
 8004ee2:	9c05      	ldr	r4, [sp, #20]
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004eea:	2909      	cmp	r1, #9
 8004eec:	d913      	bls.n	8004f16 <_strtod_l+0x206>
 8004eee:	2101      	movs	r1, #1
 8004ef0:	9104      	str	r1, [sp, #16]
 8004ef2:	e7c2      	b.n	8004e7a <_strtod_l+0x16a>
 8004ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	921b      	str	r2, [sp, #108]	; 0x6c
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	3001      	adds	r0, #1
 8004efe:	2b30      	cmp	r3, #48	; 0x30
 8004f00:	d0f8      	beq.n	8004ef4 <_strtod_l+0x1e4>
 8004f02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004f06:	2a08      	cmp	r2, #8
 8004f08:	f200 84e4 	bhi.w	80058d4 <_strtod_l+0xbc4>
 8004f0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004f0e:	9208      	str	r2, [sp, #32]
 8004f10:	4602      	mov	r2, r0
 8004f12:	2000      	movs	r0, #0
 8004f14:	4604      	mov	r4, r0
 8004f16:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004f1a:	f100 0101 	add.w	r1, r0, #1
 8004f1e:	d012      	beq.n	8004f46 <_strtod_l+0x236>
 8004f20:	440a      	add	r2, r1
 8004f22:	eb00 0c04 	add.w	ip, r0, r4
 8004f26:	4621      	mov	r1, r4
 8004f28:	270a      	movs	r7, #10
 8004f2a:	458c      	cmp	ip, r1
 8004f2c:	d113      	bne.n	8004f56 <_strtod_l+0x246>
 8004f2e:	1821      	adds	r1, r4, r0
 8004f30:	2908      	cmp	r1, #8
 8004f32:	f104 0401 	add.w	r4, r4, #1
 8004f36:	4404      	add	r4, r0
 8004f38:	dc19      	bgt.n	8004f6e <_strtod_l+0x25e>
 8004f3a:	9b07      	ldr	r3, [sp, #28]
 8004f3c:	210a      	movs	r1, #10
 8004f3e:	fb01 e303 	mla	r3, r1, r3, lr
 8004f42:	9307      	str	r3, [sp, #28]
 8004f44:	2100      	movs	r1, #0
 8004f46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f48:	1c58      	adds	r0, r3, #1
 8004f4a:	901b      	str	r0, [sp, #108]	; 0x6c
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	4608      	mov	r0, r1
 8004f50:	e7c9      	b.n	8004ee6 <_strtod_l+0x1d6>
 8004f52:	9805      	ldr	r0, [sp, #20]
 8004f54:	e7d3      	b.n	8004efe <_strtod_l+0x1ee>
 8004f56:	2908      	cmp	r1, #8
 8004f58:	f101 0101 	add.w	r1, r1, #1
 8004f5c:	dc03      	bgt.n	8004f66 <_strtod_l+0x256>
 8004f5e:	9b07      	ldr	r3, [sp, #28]
 8004f60:	437b      	muls	r3, r7
 8004f62:	9307      	str	r3, [sp, #28]
 8004f64:	e7e1      	b.n	8004f2a <_strtod_l+0x21a>
 8004f66:	2910      	cmp	r1, #16
 8004f68:	bfd8      	it	le
 8004f6a:	437d      	mulle	r5, r7
 8004f6c:	e7dd      	b.n	8004f2a <_strtod_l+0x21a>
 8004f6e:	2c10      	cmp	r4, #16
 8004f70:	bfdc      	itt	le
 8004f72:	210a      	movle	r1, #10
 8004f74:	fb01 e505 	mlale	r5, r1, r5, lr
 8004f78:	e7e4      	b.n	8004f44 <_strtod_l+0x234>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	9304      	str	r3, [sp, #16]
 8004f7e:	e781      	b.n	8004e84 <_strtod_l+0x174>
 8004f80:	f04f 0c01 	mov.w	ip, #1
 8004f84:	1cb3      	adds	r3, r6, #2
 8004f86:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f88:	78b3      	ldrb	r3, [r6, #2]
 8004f8a:	e78a      	b.n	8004ea2 <_strtod_l+0x192>
 8004f8c:	f04f 0c00 	mov.w	ip, #0
 8004f90:	e7f8      	b.n	8004f84 <_strtod_l+0x274>
 8004f92:	bf00      	nop
 8004f94:	08007abc 	.word	0x08007abc
 8004f98:	7ff00000 	.word	0x7ff00000
 8004f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f9e:	1c5f      	adds	r7, r3, #1
 8004fa0:	971b      	str	r7, [sp, #108]	; 0x6c
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d0f9      	beq.n	8004f9c <_strtod_l+0x28c>
 8004fa8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004fac:	2f08      	cmp	r7, #8
 8004fae:	f63f af7d 	bhi.w	8004eac <_strtod_l+0x19c>
 8004fb2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004fb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8004fba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fbc:	1c5f      	adds	r7, r3, #1
 8004fbe:	971b      	str	r7, [sp, #108]	; 0x6c
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004fc6:	f1b8 0f09 	cmp.w	r8, #9
 8004fca:	d937      	bls.n	800503c <_strtod_l+0x32c>
 8004fcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fce:	1a7f      	subs	r7, r7, r1
 8004fd0:	2f08      	cmp	r7, #8
 8004fd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004fd6:	dc37      	bgt.n	8005048 <_strtod_l+0x338>
 8004fd8:	45be      	cmp	lr, r7
 8004fda:	bfa8      	it	ge
 8004fdc:	46be      	movge	lr, r7
 8004fde:	f1bc 0f00 	cmp.w	ip, #0
 8004fe2:	d001      	beq.n	8004fe8 <_strtod_l+0x2d8>
 8004fe4:	f1ce 0e00 	rsb	lr, lr, #0
 8004fe8:	2c00      	cmp	r4, #0
 8004fea:	d151      	bne.n	8005090 <_strtod_l+0x380>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	f47f aece 	bne.w	8004d8e <_strtod_l+0x7e>
 8004ff2:	9a06      	ldr	r2, [sp, #24]
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	f47f aeca 	bne.w	8004d8e <_strtod_l+0x7e>
 8004ffa:	9a04      	ldr	r2, [sp, #16]
 8004ffc:	2a00      	cmp	r2, #0
 8004ffe:	f47f aee4 	bne.w	8004dca <_strtod_l+0xba>
 8005002:	2b4e      	cmp	r3, #78	; 0x4e
 8005004:	d027      	beq.n	8005056 <_strtod_l+0x346>
 8005006:	dc21      	bgt.n	800504c <_strtod_l+0x33c>
 8005008:	2b49      	cmp	r3, #73	; 0x49
 800500a:	f47f aede 	bne.w	8004dca <_strtod_l+0xba>
 800500e:	49a0      	ldr	r1, [pc, #640]	; (8005290 <_strtod_l+0x580>)
 8005010:	a81b      	add	r0, sp, #108	; 0x6c
 8005012:	f001 fde3 	bl	8006bdc <__match>
 8005016:	2800      	cmp	r0, #0
 8005018:	f43f aed7 	beq.w	8004dca <_strtod_l+0xba>
 800501c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800501e:	499d      	ldr	r1, [pc, #628]	; (8005294 <_strtod_l+0x584>)
 8005020:	3b01      	subs	r3, #1
 8005022:	a81b      	add	r0, sp, #108	; 0x6c
 8005024:	931b      	str	r3, [sp, #108]	; 0x6c
 8005026:	f001 fdd9 	bl	8006bdc <__match>
 800502a:	b910      	cbnz	r0, 8005032 <_strtod_l+0x322>
 800502c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800502e:	3301      	adds	r3, #1
 8005030:	931b      	str	r3, [sp, #108]	; 0x6c
 8005032:	f8df b274 	ldr.w	fp, [pc, #628]	; 80052a8 <_strtod_l+0x598>
 8005036:	f04f 0a00 	mov.w	sl, #0
 800503a:	e6a8      	b.n	8004d8e <_strtod_l+0x7e>
 800503c:	210a      	movs	r1, #10
 800503e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005042:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005046:	e7b8      	b.n	8004fba <_strtod_l+0x2aa>
 8005048:	46be      	mov	lr, r7
 800504a:	e7c8      	b.n	8004fde <_strtod_l+0x2ce>
 800504c:	2b69      	cmp	r3, #105	; 0x69
 800504e:	d0de      	beq.n	800500e <_strtod_l+0x2fe>
 8005050:	2b6e      	cmp	r3, #110	; 0x6e
 8005052:	f47f aeba 	bne.w	8004dca <_strtod_l+0xba>
 8005056:	4990      	ldr	r1, [pc, #576]	; (8005298 <_strtod_l+0x588>)
 8005058:	a81b      	add	r0, sp, #108	; 0x6c
 800505a:	f001 fdbf 	bl	8006bdc <__match>
 800505e:	2800      	cmp	r0, #0
 8005060:	f43f aeb3 	beq.w	8004dca <_strtod_l+0xba>
 8005064:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b28      	cmp	r3, #40	; 0x28
 800506a:	d10e      	bne.n	800508a <_strtod_l+0x37a>
 800506c:	aa1e      	add	r2, sp, #120	; 0x78
 800506e:	498b      	ldr	r1, [pc, #556]	; (800529c <_strtod_l+0x58c>)
 8005070:	a81b      	add	r0, sp, #108	; 0x6c
 8005072:	f001 fdc7 	bl	8006c04 <__hexnan>
 8005076:	2805      	cmp	r0, #5
 8005078:	d107      	bne.n	800508a <_strtod_l+0x37a>
 800507a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800507c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005080:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005084:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005088:	e681      	b.n	8004d8e <_strtod_l+0x7e>
 800508a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80052b0 <_strtod_l+0x5a0>
 800508e:	e7d2      	b.n	8005036 <_strtod_l+0x326>
 8005090:	ebae 0302 	sub.w	r3, lr, r2
 8005094:	9306      	str	r3, [sp, #24]
 8005096:	9b05      	ldr	r3, [sp, #20]
 8005098:	9807      	ldr	r0, [sp, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	bf08      	it	eq
 800509e:	4623      	moveq	r3, r4
 80050a0:	2c10      	cmp	r4, #16
 80050a2:	9305      	str	r3, [sp, #20]
 80050a4:	46a0      	mov	r8, r4
 80050a6:	bfa8      	it	ge
 80050a8:	f04f 0810 	movge.w	r8, #16
 80050ac:	f7fb fa32 	bl	8000514 <__aeabi_ui2d>
 80050b0:	2c09      	cmp	r4, #9
 80050b2:	4682      	mov	sl, r0
 80050b4:	468b      	mov	fp, r1
 80050b6:	dc13      	bgt.n	80050e0 <_strtod_l+0x3d0>
 80050b8:	9b06      	ldr	r3, [sp, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f43f ae67 	beq.w	8004d8e <_strtod_l+0x7e>
 80050c0:	9b06      	ldr	r3, [sp, #24]
 80050c2:	dd7a      	ble.n	80051ba <_strtod_l+0x4aa>
 80050c4:	2b16      	cmp	r3, #22
 80050c6:	dc61      	bgt.n	800518c <_strtod_l+0x47c>
 80050c8:	4a75      	ldr	r2, [pc, #468]	; (80052a0 <_strtod_l+0x590>)
 80050ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80050ce:	e9de 0100 	ldrd	r0, r1, [lr]
 80050d2:	4652      	mov	r2, sl
 80050d4:	465b      	mov	r3, fp
 80050d6:	f7fb fa97 	bl	8000608 <__aeabi_dmul>
 80050da:	4682      	mov	sl, r0
 80050dc:	468b      	mov	fp, r1
 80050de:	e656      	b.n	8004d8e <_strtod_l+0x7e>
 80050e0:	4b6f      	ldr	r3, [pc, #444]	; (80052a0 <_strtod_l+0x590>)
 80050e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80050e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80050ea:	f7fb fa8d 	bl	8000608 <__aeabi_dmul>
 80050ee:	4606      	mov	r6, r0
 80050f0:	4628      	mov	r0, r5
 80050f2:	460f      	mov	r7, r1
 80050f4:	f7fb fa0e 	bl	8000514 <__aeabi_ui2d>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4630      	mov	r0, r6
 80050fe:	4639      	mov	r1, r7
 8005100:	f7fb f8cc 	bl	800029c <__adddf3>
 8005104:	2c0f      	cmp	r4, #15
 8005106:	4682      	mov	sl, r0
 8005108:	468b      	mov	fp, r1
 800510a:	ddd5      	ble.n	80050b8 <_strtod_l+0x3a8>
 800510c:	9b06      	ldr	r3, [sp, #24]
 800510e:	eba4 0808 	sub.w	r8, r4, r8
 8005112:	4498      	add	r8, r3
 8005114:	f1b8 0f00 	cmp.w	r8, #0
 8005118:	f340 8096 	ble.w	8005248 <_strtod_l+0x538>
 800511c:	f018 030f 	ands.w	r3, r8, #15
 8005120:	d00a      	beq.n	8005138 <_strtod_l+0x428>
 8005122:	495f      	ldr	r1, [pc, #380]	; (80052a0 <_strtod_l+0x590>)
 8005124:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005128:	4652      	mov	r2, sl
 800512a:	465b      	mov	r3, fp
 800512c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005130:	f7fb fa6a 	bl	8000608 <__aeabi_dmul>
 8005134:	4682      	mov	sl, r0
 8005136:	468b      	mov	fp, r1
 8005138:	f038 080f 	bics.w	r8, r8, #15
 800513c:	d073      	beq.n	8005226 <_strtod_l+0x516>
 800513e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005142:	dd47      	ble.n	80051d4 <_strtod_l+0x4c4>
 8005144:	2400      	movs	r4, #0
 8005146:	46a0      	mov	r8, r4
 8005148:	9407      	str	r4, [sp, #28]
 800514a:	9405      	str	r4, [sp, #20]
 800514c:	2322      	movs	r3, #34	; 0x22
 800514e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80052a8 <_strtod_l+0x598>
 8005152:	f8c9 3000 	str.w	r3, [r9]
 8005156:	f04f 0a00 	mov.w	sl, #0
 800515a:	9b07      	ldr	r3, [sp, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f43f ae16 	beq.w	8004d8e <_strtod_l+0x7e>
 8005162:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005164:	4648      	mov	r0, r9
 8005166:	f001 fe29 	bl	8006dbc <_Bfree>
 800516a:	9905      	ldr	r1, [sp, #20]
 800516c:	4648      	mov	r0, r9
 800516e:	f001 fe25 	bl	8006dbc <_Bfree>
 8005172:	4641      	mov	r1, r8
 8005174:	4648      	mov	r0, r9
 8005176:	f001 fe21 	bl	8006dbc <_Bfree>
 800517a:	9907      	ldr	r1, [sp, #28]
 800517c:	4648      	mov	r0, r9
 800517e:	f001 fe1d 	bl	8006dbc <_Bfree>
 8005182:	4621      	mov	r1, r4
 8005184:	4648      	mov	r0, r9
 8005186:	f001 fe19 	bl	8006dbc <_Bfree>
 800518a:	e600      	b.n	8004d8e <_strtod_l+0x7e>
 800518c:	9a06      	ldr	r2, [sp, #24]
 800518e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005192:	4293      	cmp	r3, r2
 8005194:	dbba      	blt.n	800510c <_strtod_l+0x3fc>
 8005196:	4d42      	ldr	r5, [pc, #264]	; (80052a0 <_strtod_l+0x590>)
 8005198:	f1c4 040f 	rsb	r4, r4, #15
 800519c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80051a0:	4652      	mov	r2, sl
 80051a2:	465b      	mov	r3, fp
 80051a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051a8:	f7fb fa2e 	bl	8000608 <__aeabi_dmul>
 80051ac:	9b06      	ldr	r3, [sp, #24]
 80051ae:	1b1c      	subs	r4, r3, r4
 80051b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80051b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051b8:	e78d      	b.n	80050d6 <_strtod_l+0x3c6>
 80051ba:	f113 0f16 	cmn.w	r3, #22
 80051be:	dba5      	blt.n	800510c <_strtod_l+0x3fc>
 80051c0:	4a37      	ldr	r2, [pc, #220]	; (80052a0 <_strtod_l+0x590>)
 80051c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80051c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80051ca:	4650      	mov	r0, sl
 80051cc:	4659      	mov	r1, fp
 80051ce:	f7fb fb45 	bl	800085c <__aeabi_ddiv>
 80051d2:	e782      	b.n	80050da <_strtod_l+0x3ca>
 80051d4:	2300      	movs	r3, #0
 80051d6:	4e33      	ldr	r6, [pc, #204]	; (80052a4 <_strtod_l+0x594>)
 80051d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80051dc:	4650      	mov	r0, sl
 80051de:	4659      	mov	r1, fp
 80051e0:	461d      	mov	r5, r3
 80051e2:	f1b8 0f01 	cmp.w	r8, #1
 80051e6:	dc21      	bgt.n	800522c <_strtod_l+0x51c>
 80051e8:	b10b      	cbz	r3, 80051ee <_strtod_l+0x4de>
 80051ea:	4682      	mov	sl, r0
 80051ec:	468b      	mov	fp, r1
 80051ee:	4b2d      	ldr	r3, [pc, #180]	; (80052a4 <_strtod_l+0x594>)
 80051f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80051f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80051f8:	4652      	mov	r2, sl
 80051fa:	465b      	mov	r3, fp
 80051fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005200:	f7fb fa02 	bl	8000608 <__aeabi_dmul>
 8005204:	4b28      	ldr	r3, [pc, #160]	; (80052a8 <_strtod_l+0x598>)
 8005206:	460a      	mov	r2, r1
 8005208:	400b      	ands	r3, r1
 800520a:	4928      	ldr	r1, [pc, #160]	; (80052ac <_strtod_l+0x59c>)
 800520c:	428b      	cmp	r3, r1
 800520e:	4682      	mov	sl, r0
 8005210:	d898      	bhi.n	8005144 <_strtod_l+0x434>
 8005212:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005216:	428b      	cmp	r3, r1
 8005218:	bf86      	itte	hi
 800521a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80052b4 <_strtod_l+0x5a4>
 800521e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005222:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005226:	2300      	movs	r3, #0
 8005228:	9304      	str	r3, [sp, #16]
 800522a:	e077      	b.n	800531c <_strtod_l+0x60c>
 800522c:	f018 0f01 	tst.w	r8, #1
 8005230:	d006      	beq.n	8005240 <_strtod_l+0x530>
 8005232:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f7fb f9e5 	bl	8000608 <__aeabi_dmul>
 800523e:	2301      	movs	r3, #1
 8005240:	3501      	adds	r5, #1
 8005242:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005246:	e7cc      	b.n	80051e2 <_strtod_l+0x4d2>
 8005248:	d0ed      	beq.n	8005226 <_strtod_l+0x516>
 800524a:	f1c8 0800 	rsb	r8, r8, #0
 800524e:	f018 020f 	ands.w	r2, r8, #15
 8005252:	d00a      	beq.n	800526a <_strtod_l+0x55a>
 8005254:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <_strtod_l+0x590>)
 8005256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800525a:	4650      	mov	r0, sl
 800525c:	4659      	mov	r1, fp
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fb fafb 	bl	800085c <__aeabi_ddiv>
 8005266:	4682      	mov	sl, r0
 8005268:	468b      	mov	fp, r1
 800526a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800526e:	d0da      	beq.n	8005226 <_strtod_l+0x516>
 8005270:	f1b8 0f1f 	cmp.w	r8, #31
 8005274:	dd20      	ble.n	80052b8 <_strtod_l+0x5a8>
 8005276:	2400      	movs	r4, #0
 8005278:	46a0      	mov	r8, r4
 800527a:	9407      	str	r4, [sp, #28]
 800527c:	9405      	str	r4, [sp, #20]
 800527e:	2322      	movs	r3, #34	; 0x22
 8005280:	f04f 0a00 	mov.w	sl, #0
 8005284:	f04f 0b00 	mov.w	fp, #0
 8005288:	f8c9 3000 	str.w	r3, [r9]
 800528c:	e765      	b.n	800515a <_strtod_l+0x44a>
 800528e:	bf00      	nop
 8005290:	08007a87 	.word	0x08007a87
 8005294:	08007c14 	.word	0x08007c14
 8005298:	08007a8f 	.word	0x08007a8f
 800529c:	08007ad0 	.word	0x08007ad0
 80052a0:	08007ca8 	.word	0x08007ca8
 80052a4:	08007c80 	.word	0x08007c80
 80052a8:	7ff00000 	.word	0x7ff00000
 80052ac:	7ca00000 	.word	0x7ca00000
 80052b0:	fff80000 	.word	0xfff80000
 80052b4:	7fefffff 	.word	0x7fefffff
 80052b8:	f018 0310 	ands.w	r3, r8, #16
 80052bc:	bf18      	it	ne
 80052be:	236a      	movne	r3, #106	; 0x6a
 80052c0:	4da0      	ldr	r5, [pc, #640]	; (8005544 <_strtod_l+0x834>)
 80052c2:	9304      	str	r3, [sp, #16]
 80052c4:	4650      	mov	r0, sl
 80052c6:	4659      	mov	r1, fp
 80052c8:	2300      	movs	r3, #0
 80052ca:	f1b8 0f00 	cmp.w	r8, #0
 80052ce:	f300 810a 	bgt.w	80054e6 <_strtod_l+0x7d6>
 80052d2:	b10b      	cbz	r3, 80052d8 <_strtod_l+0x5c8>
 80052d4:	4682      	mov	sl, r0
 80052d6:	468b      	mov	fp, r1
 80052d8:	9b04      	ldr	r3, [sp, #16]
 80052da:	b1bb      	cbz	r3, 800530c <_strtod_l+0x5fc>
 80052dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80052e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	4659      	mov	r1, fp
 80052e8:	dd10      	ble.n	800530c <_strtod_l+0x5fc>
 80052ea:	2b1f      	cmp	r3, #31
 80052ec:	f340 8107 	ble.w	80054fe <_strtod_l+0x7ee>
 80052f0:	2b34      	cmp	r3, #52	; 0x34
 80052f2:	bfde      	ittt	le
 80052f4:	3b20      	suble	r3, #32
 80052f6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80052fa:	fa02 f303 	lslle.w	r3, r2, r3
 80052fe:	f04f 0a00 	mov.w	sl, #0
 8005302:	bfcc      	ite	gt
 8005304:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005308:	ea03 0b01 	andle.w	fp, r3, r1
 800530c:	2200      	movs	r2, #0
 800530e:	2300      	movs	r3, #0
 8005310:	4650      	mov	r0, sl
 8005312:	4659      	mov	r1, fp
 8005314:	f7fb fbe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005318:	2800      	cmp	r0, #0
 800531a:	d1ac      	bne.n	8005276 <_strtod_l+0x566>
 800531c:	9b07      	ldr	r3, [sp, #28]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	9a05      	ldr	r2, [sp, #20]
 8005322:	9908      	ldr	r1, [sp, #32]
 8005324:	4623      	mov	r3, r4
 8005326:	4648      	mov	r0, r9
 8005328:	f001 fd9a 	bl	8006e60 <__s2b>
 800532c:	9007      	str	r0, [sp, #28]
 800532e:	2800      	cmp	r0, #0
 8005330:	f43f af08 	beq.w	8005144 <_strtod_l+0x434>
 8005334:	9a06      	ldr	r2, [sp, #24]
 8005336:	9b06      	ldr	r3, [sp, #24]
 8005338:	2a00      	cmp	r2, #0
 800533a:	f1c3 0300 	rsb	r3, r3, #0
 800533e:	bfa8      	it	ge
 8005340:	2300      	movge	r3, #0
 8005342:	930e      	str	r3, [sp, #56]	; 0x38
 8005344:	2400      	movs	r4, #0
 8005346:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800534a:	9316      	str	r3, [sp, #88]	; 0x58
 800534c:	46a0      	mov	r8, r4
 800534e:	9b07      	ldr	r3, [sp, #28]
 8005350:	4648      	mov	r0, r9
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	f001 fcfe 	bl	8006d54 <_Balloc>
 8005358:	9005      	str	r0, [sp, #20]
 800535a:	2800      	cmp	r0, #0
 800535c:	f43f aef6 	beq.w	800514c <_strtod_l+0x43c>
 8005360:	9b07      	ldr	r3, [sp, #28]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	3202      	adds	r2, #2
 8005366:	f103 010c 	add.w	r1, r3, #12
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	300c      	adds	r0, #12
 800536e:	f7fe fe3a 	bl	8003fe6 <memcpy>
 8005372:	aa1e      	add	r2, sp, #120	; 0x78
 8005374:	a91d      	add	r1, sp, #116	; 0x74
 8005376:	ec4b ab10 	vmov	d0, sl, fp
 800537a:	4648      	mov	r0, r9
 800537c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005380:	f002 f82a 	bl	80073d8 <__d2b>
 8005384:	901c      	str	r0, [sp, #112]	; 0x70
 8005386:	2800      	cmp	r0, #0
 8005388:	f43f aee0 	beq.w	800514c <_strtod_l+0x43c>
 800538c:	2101      	movs	r1, #1
 800538e:	4648      	mov	r0, r9
 8005390:	f001 fdf2 	bl	8006f78 <__i2b>
 8005394:	4680      	mov	r8, r0
 8005396:	2800      	cmp	r0, #0
 8005398:	f43f aed8 	beq.w	800514c <_strtod_l+0x43c>
 800539c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800539e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80053a0:	2e00      	cmp	r6, #0
 80053a2:	bfab      	itete	ge
 80053a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80053a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80053a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80053aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80053ac:	bfac      	ite	ge
 80053ae:	18f7      	addge	r7, r6, r3
 80053b0:	1b9d      	sublt	r5, r3, r6
 80053b2:	9b04      	ldr	r3, [sp, #16]
 80053b4:	1af6      	subs	r6, r6, r3
 80053b6:	4416      	add	r6, r2
 80053b8:	4b63      	ldr	r3, [pc, #396]	; (8005548 <_strtod_l+0x838>)
 80053ba:	3e01      	subs	r6, #1
 80053bc:	429e      	cmp	r6, r3
 80053be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80053c2:	f280 80af 	bge.w	8005524 <_strtod_l+0x814>
 80053c6:	1b9b      	subs	r3, r3, r6
 80053c8:	2b1f      	cmp	r3, #31
 80053ca:	eba2 0203 	sub.w	r2, r2, r3
 80053ce:	f04f 0101 	mov.w	r1, #1
 80053d2:	f300 809b 	bgt.w	800550c <_strtod_l+0x7fc>
 80053d6:	fa01 f303 	lsl.w	r3, r1, r3
 80053da:	930f      	str	r3, [sp, #60]	; 0x3c
 80053dc:	2300      	movs	r3, #0
 80053de:	930a      	str	r3, [sp, #40]	; 0x28
 80053e0:	18be      	adds	r6, r7, r2
 80053e2:	9b04      	ldr	r3, [sp, #16]
 80053e4:	42b7      	cmp	r7, r6
 80053e6:	4415      	add	r5, r2
 80053e8:	441d      	add	r5, r3
 80053ea:	463b      	mov	r3, r7
 80053ec:	bfa8      	it	ge
 80053ee:	4633      	movge	r3, r6
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	bfa8      	it	ge
 80053f4:	462b      	movge	r3, r5
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bfc2      	ittt	gt
 80053fa:	1af6      	subgt	r6, r6, r3
 80053fc:	1aed      	subgt	r5, r5, r3
 80053fe:	1aff      	subgt	r7, r7, r3
 8005400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005402:	b1bb      	cbz	r3, 8005434 <_strtod_l+0x724>
 8005404:	4641      	mov	r1, r8
 8005406:	461a      	mov	r2, r3
 8005408:	4648      	mov	r0, r9
 800540a:	f001 fe55 	bl	80070b8 <__pow5mult>
 800540e:	4680      	mov	r8, r0
 8005410:	2800      	cmp	r0, #0
 8005412:	f43f ae9b 	beq.w	800514c <_strtod_l+0x43c>
 8005416:	4601      	mov	r1, r0
 8005418:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800541a:	4648      	mov	r0, r9
 800541c:	f001 fdb5 	bl	8006f8a <__multiply>
 8005420:	900c      	str	r0, [sp, #48]	; 0x30
 8005422:	2800      	cmp	r0, #0
 8005424:	f43f ae92 	beq.w	800514c <_strtod_l+0x43c>
 8005428:	991c      	ldr	r1, [sp, #112]	; 0x70
 800542a:	4648      	mov	r0, r9
 800542c:	f001 fcc6 	bl	8006dbc <_Bfree>
 8005430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005432:	931c      	str	r3, [sp, #112]	; 0x70
 8005434:	2e00      	cmp	r6, #0
 8005436:	dc7a      	bgt.n	800552e <_strtod_l+0x81e>
 8005438:	9b06      	ldr	r3, [sp, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	dd08      	ble.n	8005450 <_strtod_l+0x740>
 800543e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005440:	9905      	ldr	r1, [sp, #20]
 8005442:	4648      	mov	r0, r9
 8005444:	f001 fe38 	bl	80070b8 <__pow5mult>
 8005448:	9005      	str	r0, [sp, #20]
 800544a:	2800      	cmp	r0, #0
 800544c:	f43f ae7e 	beq.w	800514c <_strtod_l+0x43c>
 8005450:	2d00      	cmp	r5, #0
 8005452:	dd08      	ble.n	8005466 <_strtod_l+0x756>
 8005454:	462a      	mov	r2, r5
 8005456:	9905      	ldr	r1, [sp, #20]
 8005458:	4648      	mov	r0, r9
 800545a:	f001 fe7b 	bl	8007154 <__lshift>
 800545e:	9005      	str	r0, [sp, #20]
 8005460:	2800      	cmp	r0, #0
 8005462:	f43f ae73 	beq.w	800514c <_strtod_l+0x43c>
 8005466:	2f00      	cmp	r7, #0
 8005468:	dd08      	ble.n	800547c <_strtod_l+0x76c>
 800546a:	4641      	mov	r1, r8
 800546c:	463a      	mov	r2, r7
 800546e:	4648      	mov	r0, r9
 8005470:	f001 fe70 	bl	8007154 <__lshift>
 8005474:	4680      	mov	r8, r0
 8005476:	2800      	cmp	r0, #0
 8005478:	f43f ae68 	beq.w	800514c <_strtod_l+0x43c>
 800547c:	9a05      	ldr	r2, [sp, #20]
 800547e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005480:	4648      	mov	r0, r9
 8005482:	f001 fed5 	bl	8007230 <__mdiff>
 8005486:	4604      	mov	r4, r0
 8005488:	2800      	cmp	r0, #0
 800548a:	f43f ae5f 	beq.w	800514c <_strtod_l+0x43c>
 800548e:	68c3      	ldr	r3, [r0, #12]
 8005490:	930c      	str	r3, [sp, #48]	; 0x30
 8005492:	2300      	movs	r3, #0
 8005494:	60c3      	str	r3, [r0, #12]
 8005496:	4641      	mov	r1, r8
 8005498:	f001 feb0 	bl	80071fc <__mcmp>
 800549c:	2800      	cmp	r0, #0
 800549e:	da55      	bge.n	800554c <_strtod_l+0x83c>
 80054a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054a2:	b9e3      	cbnz	r3, 80054de <_strtod_l+0x7ce>
 80054a4:	f1ba 0f00 	cmp.w	sl, #0
 80054a8:	d119      	bne.n	80054de <_strtod_l+0x7ce>
 80054aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054ae:	b9b3      	cbnz	r3, 80054de <_strtod_l+0x7ce>
 80054b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80054b4:	0d1b      	lsrs	r3, r3, #20
 80054b6:	051b      	lsls	r3, r3, #20
 80054b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80054bc:	d90f      	bls.n	80054de <_strtod_l+0x7ce>
 80054be:	6963      	ldr	r3, [r4, #20]
 80054c0:	b913      	cbnz	r3, 80054c8 <_strtod_l+0x7b8>
 80054c2:	6923      	ldr	r3, [r4, #16]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	dd0a      	ble.n	80054de <_strtod_l+0x7ce>
 80054c8:	4621      	mov	r1, r4
 80054ca:	2201      	movs	r2, #1
 80054cc:	4648      	mov	r0, r9
 80054ce:	f001 fe41 	bl	8007154 <__lshift>
 80054d2:	4641      	mov	r1, r8
 80054d4:	4604      	mov	r4, r0
 80054d6:	f001 fe91 	bl	80071fc <__mcmp>
 80054da:	2800      	cmp	r0, #0
 80054dc:	dc67      	bgt.n	80055ae <_strtod_l+0x89e>
 80054de:	9b04      	ldr	r3, [sp, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d171      	bne.n	80055c8 <_strtod_l+0x8b8>
 80054e4:	e63d      	b.n	8005162 <_strtod_l+0x452>
 80054e6:	f018 0f01 	tst.w	r8, #1
 80054ea:	d004      	beq.n	80054f6 <_strtod_l+0x7e6>
 80054ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054f0:	f7fb f88a 	bl	8000608 <__aeabi_dmul>
 80054f4:	2301      	movs	r3, #1
 80054f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80054fa:	3508      	adds	r5, #8
 80054fc:	e6e5      	b.n	80052ca <_strtod_l+0x5ba>
 80054fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	ea03 0a0a 	and.w	sl, r3, sl
 800550a:	e6ff      	b.n	800530c <_strtod_l+0x5fc>
 800550c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005510:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005514:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005518:	36e2      	adds	r6, #226	; 0xe2
 800551a:	fa01 f306 	lsl.w	r3, r1, r6
 800551e:	930a      	str	r3, [sp, #40]	; 0x28
 8005520:	910f      	str	r1, [sp, #60]	; 0x3c
 8005522:	e75d      	b.n	80053e0 <_strtod_l+0x6d0>
 8005524:	2300      	movs	r3, #0
 8005526:	930a      	str	r3, [sp, #40]	; 0x28
 8005528:	2301      	movs	r3, #1
 800552a:	930f      	str	r3, [sp, #60]	; 0x3c
 800552c:	e758      	b.n	80053e0 <_strtod_l+0x6d0>
 800552e:	4632      	mov	r2, r6
 8005530:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005532:	4648      	mov	r0, r9
 8005534:	f001 fe0e 	bl	8007154 <__lshift>
 8005538:	901c      	str	r0, [sp, #112]	; 0x70
 800553a:	2800      	cmp	r0, #0
 800553c:	f47f af7c 	bne.w	8005438 <_strtod_l+0x728>
 8005540:	e604      	b.n	800514c <_strtod_l+0x43c>
 8005542:	bf00      	nop
 8005544:	08007ae8 	.word	0x08007ae8
 8005548:	fffffc02 	.word	0xfffffc02
 800554c:	465d      	mov	r5, fp
 800554e:	f040 8086 	bne.w	800565e <_strtod_l+0x94e>
 8005552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005558:	b32a      	cbz	r2, 80055a6 <_strtod_l+0x896>
 800555a:	4aaf      	ldr	r2, [pc, #700]	; (8005818 <_strtod_l+0xb08>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d153      	bne.n	8005608 <_strtod_l+0x8f8>
 8005560:	9b04      	ldr	r3, [sp, #16]
 8005562:	4650      	mov	r0, sl
 8005564:	b1d3      	cbz	r3, 800559c <_strtod_l+0x88c>
 8005566:	4aad      	ldr	r2, [pc, #692]	; (800581c <_strtod_l+0xb0c>)
 8005568:	402a      	ands	r2, r5
 800556a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800556e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005572:	d816      	bhi.n	80055a2 <_strtod_l+0x892>
 8005574:	0d12      	lsrs	r2, r2, #20
 8005576:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800557a:	fa01 f303 	lsl.w	r3, r1, r3
 800557e:	4298      	cmp	r0, r3
 8005580:	d142      	bne.n	8005608 <_strtod_l+0x8f8>
 8005582:	4ba7      	ldr	r3, [pc, #668]	; (8005820 <_strtod_l+0xb10>)
 8005584:	429d      	cmp	r5, r3
 8005586:	d102      	bne.n	800558e <_strtod_l+0x87e>
 8005588:	3001      	adds	r0, #1
 800558a:	f43f addf 	beq.w	800514c <_strtod_l+0x43c>
 800558e:	4ba3      	ldr	r3, [pc, #652]	; (800581c <_strtod_l+0xb0c>)
 8005590:	402b      	ands	r3, r5
 8005592:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005596:	f04f 0a00 	mov.w	sl, #0
 800559a:	e7a0      	b.n	80054de <_strtod_l+0x7ce>
 800559c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055a0:	e7ed      	b.n	800557e <_strtod_l+0x86e>
 80055a2:	460b      	mov	r3, r1
 80055a4:	e7eb      	b.n	800557e <_strtod_l+0x86e>
 80055a6:	bb7b      	cbnz	r3, 8005608 <_strtod_l+0x8f8>
 80055a8:	f1ba 0f00 	cmp.w	sl, #0
 80055ac:	d12c      	bne.n	8005608 <_strtod_l+0x8f8>
 80055ae:	9904      	ldr	r1, [sp, #16]
 80055b0:	4a9a      	ldr	r2, [pc, #616]	; (800581c <_strtod_l+0xb0c>)
 80055b2:	465b      	mov	r3, fp
 80055b4:	b1f1      	cbz	r1, 80055f4 <_strtod_l+0x8e4>
 80055b6:	ea02 010b 	and.w	r1, r2, fp
 80055ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80055be:	dc19      	bgt.n	80055f4 <_strtod_l+0x8e4>
 80055c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80055c4:	f77f ae5b 	ble.w	800527e <_strtod_l+0x56e>
 80055c8:	4a96      	ldr	r2, [pc, #600]	; (8005824 <_strtod_l+0xb14>)
 80055ca:	2300      	movs	r3, #0
 80055cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80055d0:	4650      	mov	r0, sl
 80055d2:	4659      	mov	r1, fp
 80055d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80055d8:	f7fb f816 	bl	8000608 <__aeabi_dmul>
 80055dc:	4682      	mov	sl, r0
 80055de:	468b      	mov	fp, r1
 80055e0:	2900      	cmp	r1, #0
 80055e2:	f47f adbe 	bne.w	8005162 <_strtod_l+0x452>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	f47f adbb 	bne.w	8005162 <_strtod_l+0x452>
 80055ec:	2322      	movs	r3, #34	; 0x22
 80055ee:	f8c9 3000 	str.w	r3, [r9]
 80055f2:	e5b6      	b.n	8005162 <_strtod_l+0x452>
 80055f4:	4013      	ands	r3, r2
 80055f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80055fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80055fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005602:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005606:	e76a      	b.n	80054de <_strtod_l+0x7ce>
 8005608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560a:	b193      	cbz	r3, 8005632 <_strtod_l+0x922>
 800560c:	422b      	tst	r3, r5
 800560e:	f43f af66 	beq.w	80054de <_strtod_l+0x7ce>
 8005612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005614:	9a04      	ldr	r2, [sp, #16]
 8005616:	4650      	mov	r0, sl
 8005618:	4659      	mov	r1, fp
 800561a:	b173      	cbz	r3, 800563a <_strtod_l+0x92a>
 800561c:	f7ff fb5a 	bl	8004cd4 <sulp>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005628:	f7fa fe38 	bl	800029c <__adddf3>
 800562c:	4682      	mov	sl, r0
 800562e:	468b      	mov	fp, r1
 8005630:	e755      	b.n	80054de <_strtod_l+0x7ce>
 8005632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005634:	ea13 0f0a 	tst.w	r3, sl
 8005638:	e7e9      	b.n	800560e <_strtod_l+0x8fe>
 800563a:	f7ff fb4b 	bl	8004cd4 <sulp>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005646:	f7fa fe27 	bl	8000298 <__aeabi_dsub>
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	4682      	mov	sl, r0
 8005650:	468b      	mov	fp, r1
 8005652:	f7fb fa41 	bl	8000ad8 <__aeabi_dcmpeq>
 8005656:	2800      	cmp	r0, #0
 8005658:	f47f ae11 	bne.w	800527e <_strtod_l+0x56e>
 800565c:	e73f      	b.n	80054de <_strtod_l+0x7ce>
 800565e:	4641      	mov	r1, r8
 8005660:	4620      	mov	r0, r4
 8005662:	f001 ff08 	bl	8007476 <__ratio>
 8005666:	ec57 6b10 	vmov	r6, r7, d0
 800566a:	2200      	movs	r2, #0
 800566c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005670:	ee10 0a10 	vmov	r0, s0
 8005674:	4639      	mov	r1, r7
 8005676:	f7fb fa43 	bl	8000b00 <__aeabi_dcmple>
 800567a:	2800      	cmp	r0, #0
 800567c:	d077      	beq.n	800576e <_strtod_l+0xa5e>
 800567e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005680:	2b00      	cmp	r3, #0
 8005682:	d04a      	beq.n	800571a <_strtod_l+0xa0a>
 8005684:	4b68      	ldr	r3, [pc, #416]	; (8005828 <_strtod_l+0xb18>)
 8005686:	2200      	movs	r2, #0
 8005688:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800568c:	4f66      	ldr	r7, [pc, #408]	; (8005828 <_strtod_l+0xb18>)
 800568e:	2600      	movs	r6, #0
 8005690:	4b62      	ldr	r3, [pc, #392]	; (800581c <_strtod_l+0xb0c>)
 8005692:	402b      	ands	r3, r5
 8005694:	930f      	str	r3, [sp, #60]	; 0x3c
 8005696:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005698:	4b64      	ldr	r3, [pc, #400]	; (800582c <_strtod_l+0xb1c>)
 800569a:	429a      	cmp	r2, r3
 800569c:	f040 80ce 	bne.w	800583c <_strtod_l+0xb2c>
 80056a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056a8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80056ac:	ec4b ab10 	vmov	d0, sl, fp
 80056b0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80056b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056b8:	f001 fe18 	bl	80072ec <__ulp>
 80056bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056c0:	ec53 2b10 	vmov	r2, r3, d0
 80056c4:	f7fa ffa0 	bl	8000608 <__aeabi_dmul>
 80056c8:	4652      	mov	r2, sl
 80056ca:	465b      	mov	r3, fp
 80056cc:	f7fa fde6 	bl	800029c <__adddf3>
 80056d0:	460b      	mov	r3, r1
 80056d2:	4952      	ldr	r1, [pc, #328]	; (800581c <_strtod_l+0xb0c>)
 80056d4:	4a56      	ldr	r2, [pc, #344]	; (8005830 <_strtod_l+0xb20>)
 80056d6:	4019      	ands	r1, r3
 80056d8:	4291      	cmp	r1, r2
 80056da:	4682      	mov	sl, r0
 80056dc:	d95b      	bls.n	8005796 <_strtod_l+0xa86>
 80056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d103      	bne.n	80056f0 <_strtod_l+0x9e0>
 80056e8:	9b08      	ldr	r3, [sp, #32]
 80056ea:	3301      	adds	r3, #1
 80056ec:	f43f ad2e 	beq.w	800514c <_strtod_l+0x43c>
 80056f0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005820 <_strtod_l+0xb10>
 80056f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80056f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80056fa:	4648      	mov	r0, r9
 80056fc:	f001 fb5e 	bl	8006dbc <_Bfree>
 8005700:	9905      	ldr	r1, [sp, #20]
 8005702:	4648      	mov	r0, r9
 8005704:	f001 fb5a 	bl	8006dbc <_Bfree>
 8005708:	4641      	mov	r1, r8
 800570a:	4648      	mov	r0, r9
 800570c:	f001 fb56 	bl	8006dbc <_Bfree>
 8005710:	4621      	mov	r1, r4
 8005712:	4648      	mov	r0, r9
 8005714:	f001 fb52 	bl	8006dbc <_Bfree>
 8005718:	e619      	b.n	800534e <_strtod_l+0x63e>
 800571a:	f1ba 0f00 	cmp.w	sl, #0
 800571e:	d11a      	bne.n	8005756 <_strtod_l+0xa46>
 8005720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005724:	b9eb      	cbnz	r3, 8005762 <_strtod_l+0xa52>
 8005726:	2200      	movs	r2, #0
 8005728:	4b3f      	ldr	r3, [pc, #252]	; (8005828 <_strtod_l+0xb18>)
 800572a:	4630      	mov	r0, r6
 800572c:	4639      	mov	r1, r7
 800572e:	f7fb f9dd 	bl	8000aec <__aeabi_dcmplt>
 8005732:	b9c8      	cbnz	r0, 8005768 <_strtod_l+0xa58>
 8005734:	4630      	mov	r0, r6
 8005736:	4639      	mov	r1, r7
 8005738:	2200      	movs	r2, #0
 800573a:	4b3e      	ldr	r3, [pc, #248]	; (8005834 <_strtod_l+0xb24>)
 800573c:	f7fa ff64 	bl	8000608 <__aeabi_dmul>
 8005740:	4606      	mov	r6, r0
 8005742:	460f      	mov	r7, r1
 8005744:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005748:	9618      	str	r6, [sp, #96]	; 0x60
 800574a:	9319      	str	r3, [sp, #100]	; 0x64
 800574c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005750:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005754:	e79c      	b.n	8005690 <_strtod_l+0x980>
 8005756:	f1ba 0f01 	cmp.w	sl, #1
 800575a:	d102      	bne.n	8005762 <_strtod_l+0xa52>
 800575c:	2d00      	cmp	r5, #0
 800575e:	f43f ad8e 	beq.w	800527e <_strtod_l+0x56e>
 8005762:	2200      	movs	r2, #0
 8005764:	4b34      	ldr	r3, [pc, #208]	; (8005838 <_strtod_l+0xb28>)
 8005766:	e78f      	b.n	8005688 <_strtod_l+0x978>
 8005768:	2600      	movs	r6, #0
 800576a:	4f32      	ldr	r7, [pc, #200]	; (8005834 <_strtod_l+0xb24>)
 800576c:	e7ea      	b.n	8005744 <_strtod_l+0xa34>
 800576e:	4b31      	ldr	r3, [pc, #196]	; (8005834 <_strtod_l+0xb24>)
 8005770:	4630      	mov	r0, r6
 8005772:	4639      	mov	r1, r7
 8005774:	2200      	movs	r2, #0
 8005776:	f7fa ff47 	bl	8000608 <__aeabi_dmul>
 800577a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800577c:	4606      	mov	r6, r0
 800577e:	460f      	mov	r7, r1
 8005780:	b933      	cbnz	r3, 8005790 <_strtod_l+0xa80>
 8005782:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005786:	9010      	str	r0, [sp, #64]	; 0x40
 8005788:	9311      	str	r3, [sp, #68]	; 0x44
 800578a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800578e:	e7df      	b.n	8005750 <_strtod_l+0xa40>
 8005790:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005794:	e7f9      	b.n	800578a <_strtod_l+0xa7a>
 8005796:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800579a:	9b04      	ldr	r3, [sp, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ab      	bne.n	80056f8 <_strtod_l+0x9e8>
 80057a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80057a4:	0d1b      	lsrs	r3, r3, #20
 80057a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057a8:	051b      	lsls	r3, r3, #20
 80057aa:	429a      	cmp	r2, r3
 80057ac:	465d      	mov	r5, fp
 80057ae:	d1a3      	bne.n	80056f8 <_strtod_l+0x9e8>
 80057b0:	4639      	mov	r1, r7
 80057b2:	4630      	mov	r0, r6
 80057b4:	f7fb f9d8 	bl	8000b68 <__aeabi_d2iz>
 80057b8:	f7fa febc 	bl	8000534 <__aeabi_i2d>
 80057bc:	460b      	mov	r3, r1
 80057be:	4602      	mov	r2, r0
 80057c0:	4639      	mov	r1, r7
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7fa fd68 	bl	8000298 <__aeabi_dsub>
 80057c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057ca:	4606      	mov	r6, r0
 80057cc:	460f      	mov	r7, r1
 80057ce:	b933      	cbnz	r3, 80057de <_strtod_l+0xace>
 80057d0:	f1ba 0f00 	cmp.w	sl, #0
 80057d4:	d103      	bne.n	80057de <_strtod_l+0xace>
 80057d6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80057da:	2d00      	cmp	r5, #0
 80057dc:	d06d      	beq.n	80058ba <_strtod_l+0xbaa>
 80057de:	a30a      	add	r3, pc, #40	; (adr r3, 8005808 <_strtod_l+0xaf8>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	4630      	mov	r0, r6
 80057e6:	4639      	mov	r1, r7
 80057e8:	f7fb f980 	bl	8000aec <__aeabi_dcmplt>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f47f acb8 	bne.w	8005162 <_strtod_l+0x452>
 80057f2:	a307      	add	r3, pc, #28	; (adr r3, 8005810 <_strtod_l+0xb00>)
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	4630      	mov	r0, r6
 80057fa:	4639      	mov	r1, r7
 80057fc:	f7fb f994 	bl	8000b28 <__aeabi_dcmpgt>
 8005800:	2800      	cmp	r0, #0
 8005802:	f43f af79 	beq.w	80056f8 <_strtod_l+0x9e8>
 8005806:	e4ac      	b.n	8005162 <_strtod_l+0x452>
 8005808:	94a03595 	.word	0x94a03595
 800580c:	3fdfffff 	.word	0x3fdfffff
 8005810:	35afe535 	.word	0x35afe535
 8005814:	3fe00000 	.word	0x3fe00000
 8005818:	000fffff 	.word	0x000fffff
 800581c:	7ff00000 	.word	0x7ff00000
 8005820:	7fefffff 	.word	0x7fefffff
 8005824:	39500000 	.word	0x39500000
 8005828:	3ff00000 	.word	0x3ff00000
 800582c:	7fe00000 	.word	0x7fe00000
 8005830:	7c9fffff 	.word	0x7c9fffff
 8005834:	3fe00000 	.word	0x3fe00000
 8005838:	bff00000 	.word	0xbff00000
 800583c:	9b04      	ldr	r3, [sp, #16]
 800583e:	b333      	cbz	r3, 800588e <_strtod_l+0xb7e>
 8005840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005842:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005846:	d822      	bhi.n	800588e <_strtod_l+0xb7e>
 8005848:	a327      	add	r3, pc, #156	; (adr r3, 80058e8 <_strtod_l+0xbd8>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	4630      	mov	r0, r6
 8005850:	4639      	mov	r1, r7
 8005852:	f7fb f955 	bl	8000b00 <__aeabi_dcmple>
 8005856:	b1a0      	cbz	r0, 8005882 <_strtod_l+0xb72>
 8005858:	4639      	mov	r1, r7
 800585a:	4630      	mov	r0, r6
 800585c:	f7fb f9ac 	bl	8000bb8 <__aeabi_d2uiz>
 8005860:	2800      	cmp	r0, #0
 8005862:	bf08      	it	eq
 8005864:	2001      	moveq	r0, #1
 8005866:	f7fa fe55 	bl	8000514 <__aeabi_ui2d>
 800586a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800586c:	4606      	mov	r6, r0
 800586e:	460f      	mov	r7, r1
 8005870:	bb03      	cbnz	r3, 80058b4 <_strtod_l+0xba4>
 8005872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005876:	9012      	str	r0, [sp, #72]	; 0x48
 8005878:	9313      	str	r3, [sp, #76]	; 0x4c
 800587a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800587e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005886:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	930b      	str	r3, [sp, #44]	; 0x2c
 800588e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005892:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005896:	f001 fd29 	bl	80072ec <__ulp>
 800589a:	4650      	mov	r0, sl
 800589c:	ec53 2b10 	vmov	r2, r3, d0
 80058a0:	4659      	mov	r1, fp
 80058a2:	f7fa feb1 	bl	8000608 <__aeabi_dmul>
 80058a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058aa:	f7fa fcf7 	bl	800029c <__adddf3>
 80058ae:	4682      	mov	sl, r0
 80058b0:	468b      	mov	fp, r1
 80058b2:	e772      	b.n	800579a <_strtod_l+0xa8a>
 80058b4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80058b8:	e7df      	b.n	800587a <_strtod_l+0xb6a>
 80058ba:	a30d      	add	r3, pc, #52	; (adr r3, 80058f0 <_strtod_l+0xbe0>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f7fb f914 	bl	8000aec <__aeabi_dcmplt>
 80058c4:	e79c      	b.n	8005800 <_strtod_l+0xaf0>
 80058c6:	2300      	movs	r3, #0
 80058c8:	930d      	str	r3, [sp, #52]	; 0x34
 80058ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80058cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	f7ff ba61 	b.w	8004d96 <_strtod_l+0x86>
 80058d4:	2b65      	cmp	r3, #101	; 0x65
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f43f ab4e 	beq.w	8004f7a <_strtod_l+0x26a>
 80058de:	2101      	movs	r1, #1
 80058e0:	4614      	mov	r4, r2
 80058e2:	9104      	str	r1, [sp, #16]
 80058e4:	f7ff bacb 	b.w	8004e7e <_strtod_l+0x16e>
 80058e8:	ffc00000 	.word	0xffc00000
 80058ec:	41dfffff 	.word	0x41dfffff
 80058f0:	94a03595 	.word	0x94a03595
 80058f4:	3fcfffff 	.word	0x3fcfffff

080058f8 <_strtod_r>:
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <_strtod_r+0x18>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	b410      	push	{r4}
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	4c04      	ldr	r4, [pc, #16]	; (8005914 <_strtod_r+0x1c>)
 8005902:	2b00      	cmp	r3, #0
 8005904:	bf08      	it	eq
 8005906:	4623      	moveq	r3, r4
 8005908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800590c:	f7ff ba00 	b.w	8004d10 <_strtod_l>
 8005910:	20000038 	.word	0x20000038
 8005914:	2000009c 	.word	0x2000009c

08005918 <_strtol_l.isra.0>:
 8005918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591c:	4680      	mov	r8, r0
 800591e:	4689      	mov	r9, r1
 8005920:	4692      	mov	sl, r2
 8005922:	461e      	mov	r6, r3
 8005924:	460f      	mov	r7, r1
 8005926:	463d      	mov	r5, r7
 8005928:	9808      	ldr	r0, [sp, #32]
 800592a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800592e:	f7fe fb45 	bl	8003fbc <__locale_ctype_ptr_l>
 8005932:	4420      	add	r0, r4
 8005934:	7843      	ldrb	r3, [r0, #1]
 8005936:	f013 0308 	ands.w	r3, r3, #8
 800593a:	d132      	bne.n	80059a2 <_strtol_l.isra.0+0x8a>
 800593c:	2c2d      	cmp	r4, #45	; 0x2d
 800593e:	d132      	bne.n	80059a6 <_strtol_l.isra.0+0x8e>
 8005940:	787c      	ldrb	r4, [r7, #1]
 8005942:	1cbd      	adds	r5, r7, #2
 8005944:	2201      	movs	r2, #1
 8005946:	2e00      	cmp	r6, #0
 8005948:	d05d      	beq.n	8005a06 <_strtol_l.isra.0+0xee>
 800594a:	2e10      	cmp	r6, #16
 800594c:	d109      	bne.n	8005962 <_strtol_l.isra.0+0x4a>
 800594e:	2c30      	cmp	r4, #48	; 0x30
 8005950:	d107      	bne.n	8005962 <_strtol_l.isra.0+0x4a>
 8005952:	782b      	ldrb	r3, [r5, #0]
 8005954:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005958:	2b58      	cmp	r3, #88	; 0x58
 800595a:	d14f      	bne.n	80059fc <_strtol_l.isra.0+0xe4>
 800595c:	786c      	ldrb	r4, [r5, #1]
 800595e:	2610      	movs	r6, #16
 8005960:	3502      	adds	r5, #2
 8005962:	2a00      	cmp	r2, #0
 8005964:	bf14      	ite	ne
 8005966:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800596a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800596e:	2700      	movs	r7, #0
 8005970:	fbb1 fcf6 	udiv	ip, r1, r6
 8005974:	4638      	mov	r0, r7
 8005976:	fb06 1e1c 	mls	lr, r6, ip, r1
 800597a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800597e:	2b09      	cmp	r3, #9
 8005980:	d817      	bhi.n	80059b2 <_strtol_l.isra.0+0x9a>
 8005982:	461c      	mov	r4, r3
 8005984:	42a6      	cmp	r6, r4
 8005986:	dd23      	ble.n	80059d0 <_strtol_l.isra.0+0xb8>
 8005988:	1c7b      	adds	r3, r7, #1
 800598a:	d007      	beq.n	800599c <_strtol_l.isra.0+0x84>
 800598c:	4584      	cmp	ip, r0
 800598e:	d31c      	bcc.n	80059ca <_strtol_l.isra.0+0xb2>
 8005990:	d101      	bne.n	8005996 <_strtol_l.isra.0+0x7e>
 8005992:	45a6      	cmp	lr, r4
 8005994:	db19      	blt.n	80059ca <_strtol_l.isra.0+0xb2>
 8005996:	fb00 4006 	mla	r0, r0, r6, r4
 800599a:	2701      	movs	r7, #1
 800599c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059a0:	e7eb      	b.n	800597a <_strtol_l.isra.0+0x62>
 80059a2:	462f      	mov	r7, r5
 80059a4:	e7bf      	b.n	8005926 <_strtol_l.isra.0+0xe>
 80059a6:	2c2b      	cmp	r4, #43	; 0x2b
 80059a8:	bf04      	itt	eq
 80059aa:	1cbd      	addeq	r5, r7, #2
 80059ac:	787c      	ldrbeq	r4, [r7, #1]
 80059ae:	461a      	mov	r2, r3
 80059b0:	e7c9      	b.n	8005946 <_strtol_l.isra.0+0x2e>
 80059b2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80059b6:	2b19      	cmp	r3, #25
 80059b8:	d801      	bhi.n	80059be <_strtol_l.isra.0+0xa6>
 80059ba:	3c37      	subs	r4, #55	; 0x37
 80059bc:	e7e2      	b.n	8005984 <_strtol_l.isra.0+0x6c>
 80059be:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80059c2:	2b19      	cmp	r3, #25
 80059c4:	d804      	bhi.n	80059d0 <_strtol_l.isra.0+0xb8>
 80059c6:	3c57      	subs	r4, #87	; 0x57
 80059c8:	e7dc      	b.n	8005984 <_strtol_l.isra.0+0x6c>
 80059ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80059ce:	e7e5      	b.n	800599c <_strtol_l.isra.0+0x84>
 80059d0:	1c7b      	adds	r3, r7, #1
 80059d2:	d108      	bne.n	80059e6 <_strtol_l.isra.0+0xce>
 80059d4:	2322      	movs	r3, #34	; 0x22
 80059d6:	f8c8 3000 	str.w	r3, [r8]
 80059da:	4608      	mov	r0, r1
 80059dc:	f1ba 0f00 	cmp.w	sl, #0
 80059e0:	d107      	bne.n	80059f2 <_strtol_l.isra.0+0xda>
 80059e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e6:	b102      	cbz	r2, 80059ea <_strtol_l.isra.0+0xd2>
 80059e8:	4240      	negs	r0, r0
 80059ea:	f1ba 0f00 	cmp.w	sl, #0
 80059ee:	d0f8      	beq.n	80059e2 <_strtol_l.isra.0+0xca>
 80059f0:	b10f      	cbz	r7, 80059f6 <_strtol_l.isra.0+0xde>
 80059f2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80059f6:	f8ca 9000 	str.w	r9, [sl]
 80059fa:	e7f2      	b.n	80059e2 <_strtol_l.isra.0+0xca>
 80059fc:	2430      	movs	r4, #48	; 0x30
 80059fe:	2e00      	cmp	r6, #0
 8005a00:	d1af      	bne.n	8005962 <_strtol_l.isra.0+0x4a>
 8005a02:	2608      	movs	r6, #8
 8005a04:	e7ad      	b.n	8005962 <_strtol_l.isra.0+0x4a>
 8005a06:	2c30      	cmp	r4, #48	; 0x30
 8005a08:	d0a3      	beq.n	8005952 <_strtol_l.isra.0+0x3a>
 8005a0a:	260a      	movs	r6, #10
 8005a0c:	e7a9      	b.n	8005962 <_strtol_l.isra.0+0x4a>
	...

08005a10 <_strtol_r>:
 8005a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a12:	4c06      	ldr	r4, [pc, #24]	; (8005a2c <_strtol_r+0x1c>)
 8005a14:	4d06      	ldr	r5, [pc, #24]	; (8005a30 <_strtol_r+0x20>)
 8005a16:	6824      	ldr	r4, [r4, #0]
 8005a18:	6a24      	ldr	r4, [r4, #32]
 8005a1a:	2c00      	cmp	r4, #0
 8005a1c:	bf08      	it	eq
 8005a1e:	462c      	moveq	r4, r5
 8005a20:	9400      	str	r4, [sp, #0]
 8005a22:	f7ff ff79 	bl	8005918 <_strtol_l.isra.0>
 8005a26:	b003      	add	sp, #12
 8005a28:	bd30      	pop	{r4, r5, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000038 	.word	0x20000038
 8005a30:	2000009c 	.word	0x2000009c

08005a34 <__ascii_wctomb>:
 8005a34:	b149      	cbz	r1, 8005a4a <__ascii_wctomb+0x16>
 8005a36:	2aff      	cmp	r2, #255	; 0xff
 8005a38:	bf85      	ittet	hi
 8005a3a:	238a      	movhi	r3, #138	; 0x8a
 8005a3c:	6003      	strhi	r3, [r0, #0]
 8005a3e:	700a      	strbls	r2, [r1, #0]
 8005a40:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005a44:	bf98      	it	ls
 8005a46:	2001      	movls	r0, #1
 8005a48:	4770      	bx	lr
 8005a4a:	4608      	mov	r0, r1
 8005a4c:	4770      	bx	lr

08005a4e <quorem>:
 8005a4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a52:	6903      	ldr	r3, [r0, #16]
 8005a54:	690c      	ldr	r4, [r1, #16]
 8005a56:	42a3      	cmp	r3, r4
 8005a58:	4680      	mov	r8, r0
 8005a5a:	f2c0 8082 	blt.w	8005b62 <quorem+0x114>
 8005a5e:	3c01      	subs	r4, #1
 8005a60:	f101 0714 	add.w	r7, r1, #20
 8005a64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005a68:	f100 0614 	add.w	r6, r0, #20
 8005a6c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005a70:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005a74:	eb06 030c 	add.w	r3, r6, ip
 8005a78:	3501      	adds	r5, #1
 8005a7a:	eb07 090c 	add.w	r9, r7, ip
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	fbb0 f5f5 	udiv	r5, r0, r5
 8005a84:	b395      	cbz	r5, 8005aec <quorem+0x9e>
 8005a86:	f04f 0a00 	mov.w	sl, #0
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	46b6      	mov	lr, r6
 8005a8e:	46d3      	mov	fp, sl
 8005a90:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a94:	b293      	uxth	r3, r2
 8005a96:	fb05 a303 	mla	r3, r5, r3, sl
 8005a9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	ebab 0303 	sub.w	r3, fp, r3
 8005aa4:	0c12      	lsrs	r2, r2, #16
 8005aa6:	f8de b000 	ldr.w	fp, [lr]
 8005aaa:	fb05 a202 	mla	r2, r5, r2, sl
 8005aae:	fa13 f38b 	uxtah	r3, r3, fp
 8005ab2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005ab6:	fa1f fb82 	uxth.w	fp, r2
 8005aba:	f8de 2000 	ldr.w	r2, [lr]
 8005abe:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005ac2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005acc:	4581      	cmp	r9, r0
 8005ace:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005ad2:	f84e 3b04 	str.w	r3, [lr], #4
 8005ad6:	d2db      	bcs.n	8005a90 <quorem+0x42>
 8005ad8:	f856 300c 	ldr.w	r3, [r6, ip]
 8005adc:	b933      	cbnz	r3, 8005aec <quorem+0x9e>
 8005ade:	9b01      	ldr	r3, [sp, #4]
 8005ae0:	3b04      	subs	r3, #4
 8005ae2:	429e      	cmp	r6, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	d330      	bcc.n	8005b4a <quorem+0xfc>
 8005ae8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005aec:	4640      	mov	r0, r8
 8005aee:	f001 fb85 	bl	80071fc <__mcmp>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	db25      	blt.n	8005b42 <quorem+0xf4>
 8005af6:	3501      	adds	r5, #1
 8005af8:	4630      	mov	r0, r6
 8005afa:	f04f 0c00 	mov.w	ip, #0
 8005afe:	f857 2b04 	ldr.w	r2, [r7], #4
 8005b02:	f8d0 e000 	ldr.w	lr, [r0]
 8005b06:	b293      	uxth	r3, r2
 8005b08:	ebac 0303 	sub.w	r3, ip, r3
 8005b0c:	0c12      	lsrs	r2, r2, #16
 8005b0e:	fa13 f38e 	uxtah	r3, r3, lr
 8005b12:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b20:	45b9      	cmp	r9, r7
 8005b22:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b26:	f840 3b04 	str.w	r3, [r0], #4
 8005b2a:	d2e8      	bcs.n	8005afe <quorem+0xb0>
 8005b2c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005b30:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005b34:	b92a      	cbnz	r2, 8005b42 <quorem+0xf4>
 8005b36:	3b04      	subs	r3, #4
 8005b38:	429e      	cmp	r6, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	d30b      	bcc.n	8005b56 <quorem+0x108>
 8005b3e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b42:	4628      	mov	r0, r5
 8005b44:	b003      	add	sp, #12
 8005b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	3b04      	subs	r3, #4
 8005b4e:	2a00      	cmp	r2, #0
 8005b50:	d1ca      	bne.n	8005ae8 <quorem+0x9a>
 8005b52:	3c01      	subs	r4, #1
 8005b54:	e7c5      	b.n	8005ae2 <quorem+0x94>
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	3b04      	subs	r3, #4
 8005b5a:	2a00      	cmp	r2, #0
 8005b5c:	d1ef      	bne.n	8005b3e <quorem+0xf0>
 8005b5e:	3c01      	subs	r4, #1
 8005b60:	e7ea      	b.n	8005b38 <quorem+0xea>
 8005b62:	2000      	movs	r0, #0
 8005b64:	e7ee      	b.n	8005b44 <quorem+0xf6>
	...

08005b68 <_dtoa_r>:
 8005b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	ec57 6b10 	vmov	r6, r7, d0
 8005b70:	b097      	sub	sp, #92	; 0x5c
 8005b72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b74:	9106      	str	r1, [sp, #24]
 8005b76:	4604      	mov	r4, r0
 8005b78:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b7a:	9312      	str	r3, [sp, #72]	; 0x48
 8005b7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b80:	e9cd 6700 	strd	r6, r7, [sp]
 8005b84:	b93d      	cbnz	r5, 8005b96 <_dtoa_r+0x2e>
 8005b86:	2010      	movs	r0, #16
 8005b88:	f001 f8dc 	bl	8006d44 <malloc>
 8005b8c:	6260      	str	r0, [r4, #36]	; 0x24
 8005b8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b92:	6005      	str	r5, [r0, #0]
 8005b94:	60c5      	str	r5, [r0, #12]
 8005b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b98:	6819      	ldr	r1, [r3, #0]
 8005b9a:	b151      	cbz	r1, 8005bb2 <_dtoa_r+0x4a>
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	604a      	str	r2, [r1, #4]
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	4093      	lsls	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f001 f908 	bl	8006dbc <_Bfree>
 8005bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	1e3b      	subs	r3, r7, #0
 8005bb4:	bfbb      	ittet	lt
 8005bb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005bba:	9301      	strlt	r3, [sp, #4]
 8005bbc:	2300      	movge	r3, #0
 8005bbe:	2201      	movlt	r2, #1
 8005bc0:	bfac      	ite	ge
 8005bc2:	f8c8 3000 	strge.w	r3, [r8]
 8005bc6:	f8c8 2000 	strlt.w	r2, [r8]
 8005bca:	4baf      	ldr	r3, [pc, #700]	; (8005e88 <_dtoa_r+0x320>)
 8005bcc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005bd0:	ea33 0308 	bics.w	r3, r3, r8
 8005bd4:	d114      	bne.n	8005c00 <_dtoa_r+0x98>
 8005bd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	b923      	cbnz	r3, 8005bec <_dtoa_r+0x84>
 8005be2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f000 8542 	beq.w	8006670 <_dtoa_r+0xb08>
 8005bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005e9c <_dtoa_r+0x334>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 8544 	beq.w	8006680 <_dtoa_r+0xb18>
 8005bf8:	f10b 0303 	add.w	r3, fp, #3
 8005bfc:	f000 bd3e 	b.w	800667c <_dtoa_r+0xb14>
 8005c00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005c04:	2200      	movs	r2, #0
 8005c06:	2300      	movs	r3, #0
 8005c08:	4630      	mov	r0, r6
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	f7fa ff64 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c10:	4681      	mov	r9, r0
 8005c12:	b168      	cbz	r0, 8005c30 <_dtoa_r+0xc8>
 8005c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c16:	2301      	movs	r3, #1
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8524 	beq.w	800666a <_dtoa_r+0xb02>
 8005c22:	4b9a      	ldr	r3, [pc, #616]	; (8005e8c <_dtoa_r+0x324>)
 8005c24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c26:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	f000 bd28 	b.w	8006680 <_dtoa_r+0xb18>
 8005c30:	aa14      	add	r2, sp, #80	; 0x50
 8005c32:	a915      	add	r1, sp, #84	; 0x54
 8005c34:	ec47 6b10 	vmov	d0, r6, r7
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f001 fbcd 	bl	80073d8 <__d2b>
 8005c3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005c42:	9004      	str	r0, [sp, #16]
 8005c44:	2d00      	cmp	r5, #0
 8005c46:	d07c      	beq.n	8005d42 <_dtoa_r+0x1da>
 8005c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005c50:	46b2      	mov	sl, r6
 8005c52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4b8b      	ldr	r3, [pc, #556]	; (8005e90 <_dtoa_r+0x328>)
 8005c62:	4650      	mov	r0, sl
 8005c64:	4659      	mov	r1, fp
 8005c66:	f7fa fb17 	bl	8000298 <__aeabi_dsub>
 8005c6a:	a381      	add	r3, pc, #516	; (adr r3, 8005e70 <_dtoa_r+0x308>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f7fa fcca 	bl	8000608 <__aeabi_dmul>
 8005c74:	a380      	add	r3, pc, #512	; (adr r3, 8005e78 <_dtoa_r+0x310>)
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f7fa fb0f 	bl	800029c <__adddf3>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	4628      	mov	r0, r5
 8005c82:	460f      	mov	r7, r1
 8005c84:	f7fa fc56 	bl	8000534 <__aeabi_i2d>
 8005c88:	a37d      	add	r3, pc, #500	; (adr r3, 8005e80 <_dtoa_r+0x318>)
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	f7fa fcbb 	bl	8000608 <__aeabi_dmul>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4630      	mov	r0, r6
 8005c98:	4639      	mov	r1, r7
 8005c9a:	f7fa faff 	bl	800029c <__adddf3>
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	460f      	mov	r7, r1
 8005ca2:	f7fa ff61 	bl	8000b68 <__aeabi_d2iz>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4682      	mov	sl, r0
 8005caa:	2300      	movs	r3, #0
 8005cac:	4630      	mov	r0, r6
 8005cae:	4639      	mov	r1, r7
 8005cb0:	f7fa ff1c 	bl	8000aec <__aeabi_dcmplt>
 8005cb4:	b148      	cbz	r0, 8005cca <_dtoa_r+0x162>
 8005cb6:	4650      	mov	r0, sl
 8005cb8:	f7fa fc3c 	bl	8000534 <__aeabi_i2d>
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	f7fa ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cc4:	b908      	cbnz	r0, 8005cca <_dtoa_r+0x162>
 8005cc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005cca:	f1ba 0f16 	cmp.w	sl, #22
 8005cce:	d859      	bhi.n	8005d84 <_dtoa_r+0x21c>
 8005cd0:	4970      	ldr	r1, [pc, #448]	; (8005e94 <_dtoa_r+0x32c>)
 8005cd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cde:	f7fa ff23 	bl	8000b28 <__aeabi_dcmpgt>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d050      	beq.n	8005d88 <_dtoa_r+0x220>
 8005ce6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005cea:	2300      	movs	r3, #0
 8005cec:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cf0:	1b5d      	subs	r5, r3, r5
 8005cf2:	f1b5 0801 	subs.w	r8, r5, #1
 8005cf6:	bf49      	itett	mi
 8005cf8:	f1c5 0301 	rsbmi	r3, r5, #1
 8005cfc:	2300      	movpl	r3, #0
 8005cfe:	9305      	strmi	r3, [sp, #20]
 8005d00:	f04f 0800 	movmi.w	r8, #0
 8005d04:	bf58      	it	pl
 8005d06:	9305      	strpl	r3, [sp, #20]
 8005d08:	f1ba 0f00 	cmp.w	sl, #0
 8005d0c:	db3e      	blt.n	8005d8c <_dtoa_r+0x224>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	44d0      	add	r8, sl
 8005d12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005d16:	9307      	str	r3, [sp, #28]
 8005d18:	9b06      	ldr	r3, [sp, #24]
 8005d1a:	2b09      	cmp	r3, #9
 8005d1c:	f200 8090 	bhi.w	8005e40 <_dtoa_r+0x2d8>
 8005d20:	2b05      	cmp	r3, #5
 8005d22:	bfc4      	itt	gt
 8005d24:	3b04      	subgt	r3, #4
 8005d26:	9306      	strgt	r3, [sp, #24]
 8005d28:	9b06      	ldr	r3, [sp, #24]
 8005d2a:	f1a3 0302 	sub.w	r3, r3, #2
 8005d2e:	bfcc      	ite	gt
 8005d30:	2500      	movgt	r5, #0
 8005d32:	2501      	movle	r5, #1
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	f200 808f 	bhi.w	8005e58 <_dtoa_r+0x2f0>
 8005d3a:	e8df f003 	tbb	[pc, r3]
 8005d3e:	7f7d      	.short	0x7f7d
 8005d40:	7131      	.short	0x7131
 8005d42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005d46:	441d      	add	r5, r3
 8005d48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005d4c:	2820      	cmp	r0, #32
 8005d4e:	dd13      	ble.n	8005d78 <_dtoa_r+0x210>
 8005d50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005d54:	9b00      	ldr	r3, [sp, #0]
 8005d56:	fa08 f800 	lsl.w	r8, r8, r0
 8005d5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005d5e:	fa23 f000 	lsr.w	r0, r3, r0
 8005d62:	ea48 0000 	orr.w	r0, r8, r0
 8005d66:	f7fa fbd5 	bl	8000514 <__aeabi_ui2d>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4682      	mov	sl, r0
 8005d6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005d72:	3d01      	subs	r5, #1
 8005d74:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d76:	e772      	b.n	8005c5e <_dtoa_r+0xf6>
 8005d78:	9b00      	ldr	r3, [sp, #0]
 8005d7a:	f1c0 0020 	rsb	r0, r0, #32
 8005d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8005d82:	e7f0      	b.n	8005d66 <_dtoa_r+0x1fe>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e7b1      	b.n	8005cec <_dtoa_r+0x184>
 8005d88:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d8a:	e7b0      	b.n	8005cee <_dtoa_r+0x186>
 8005d8c:	9b05      	ldr	r3, [sp, #20]
 8005d8e:	eba3 030a 	sub.w	r3, r3, sl
 8005d92:	9305      	str	r3, [sp, #20]
 8005d94:	f1ca 0300 	rsb	r3, sl, #0
 8005d98:	9307      	str	r3, [sp, #28]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8005d9e:	e7bb      	b.n	8005d18 <_dtoa_r+0x1b0>
 8005da0:	2301      	movs	r3, #1
 8005da2:	930a      	str	r3, [sp, #40]	; 0x28
 8005da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dd59      	ble.n	8005e5e <_dtoa_r+0x2f6>
 8005daa:	9302      	str	r3, [sp, #8]
 8005dac:	4699      	mov	r9, r3
 8005dae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005db0:	2200      	movs	r2, #0
 8005db2:	6072      	str	r2, [r6, #4]
 8005db4:	2204      	movs	r2, #4
 8005db6:	f102 0014 	add.w	r0, r2, #20
 8005dba:	4298      	cmp	r0, r3
 8005dbc:	6871      	ldr	r1, [r6, #4]
 8005dbe:	d953      	bls.n	8005e68 <_dtoa_r+0x300>
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 ffc7 	bl	8006d54 <_Balloc>
 8005dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc8:	6030      	str	r0, [r6, #0]
 8005dca:	f1b9 0f0e 	cmp.w	r9, #14
 8005dce:	f8d3 b000 	ldr.w	fp, [r3]
 8005dd2:	f200 80e6 	bhi.w	8005fa2 <_dtoa_r+0x43a>
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	f000 80e3 	beq.w	8005fa2 <_dtoa_r+0x43a>
 8005ddc:	ed9d 7b00 	vldr	d7, [sp]
 8005de0:	f1ba 0f00 	cmp.w	sl, #0
 8005de4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005de8:	dd74      	ble.n	8005ed4 <_dtoa_r+0x36c>
 8005dea:	4a2a      	ldr	r2, [pc, #168]	; (8005e94 <_dtoa_r+0x32c>)
 8005dec:	f00a 030f 	and.w	r3, sl, #15
 8005df0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005df4:	ed93 7b00 	vldr	d7, [r3]
 8005df8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005dfc:	06f0      	lsls	r0, r6, #27
 8005dfe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005e02:	d565      	bpl.n	8005ed0 <_dtoa_r+0x368>
 8005e04:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <_dtoa_r+0x330>)
 8005e06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e0e:	f7fa fd25 	bl	800085c <__aeabi_ddiv>
 8005e12:	e9cd 0100 	strd	r0, r1, [sp]
 8005e16:	f006 060f 	and.w	r6, r6, #15
 8005e1a:	2503      	movs	r5, #3
 8005e1c:	4f1e      	ldr	r7, [pc, #120]	; (8005e98 <_dtoa_r+0x330>)
 8005e1e:	e04c      	b.n	8005eba <_dtoa_r+0x352>
 8005e20:	2301      	movs	r3, #1
 8005e22:	930a      	str	r3, [sp, #40]	; 0x28
 8005e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e26:	4453      	add	r3, sl
 8005e28:	f103 0901 	add.w	r9, r3, #1
 8005e2c:	9302      	str	r3, [sp, #8]
 8005e2e:	464b      	mov	r3, r9
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	bfb8      	it	lt
 8005e34:	2301      	movlt	r3, #1
 8005e36:	e7ba      	b.n	8005dae <_dtoa_r+0x246>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e7b2      	b.n	8005da2 <_dtoa_r+0x23a>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e7f0      	b.n	8005e22 <_dtoa_r+0x2ba>
 8005e40:	2501      	movs	r5, #1
 8005e42:	2300      	movs	r3, #0
 8005e44:	9306      	str	r3, [sp, #24]
 8005e46:	950a      	str	r5, [sp, #40]	; 0x28
 8005e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e4c:	9302      	str	r3, [sp, #8]
 8005e4e:	4699      	mov	r9, r3
 8005e50:	2200      	movs	r2, #0
 8005e52:	2312      	movs	r3, #18
 8005e54:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e56:	e7aa      	b.n	8005dae <_dtoa_r+0x246>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e5c:	e7f4      	b.n	8005e48 <_dtoa_r+0x2e0>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	9302      	str	r3, [sp, #8]
 8005e62:	4699      	mov	r9, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	e7f5      	b.n	8005e54 <_dtoa_r+0x2ec>
 8005e68:	3101      	adds	r1, #1
 8005e6a:	6071      	str	r1, [r6, #4]
 8005e6c:	0052      	lsls	r2, r2, #1
 8005e6e:	e7a2      	b.n	8005db6 <_dtoa_r+0x24e>
 8005e70:	636f4361 	.word	0x636f4361
 8005e74:	3fd287a7 	.word	0x3fd287a7
 8005e78:	8b60c8b3 	.word	0x8b60c8b3
 8005e7c:	3fc68a28 	.word	0x3fc68a28
 8005e80:	509f79fb 	.word	0x509f79fb
 8005e84:	3fd34413 	.word	0x3fd34413
 8005e88:	7ff00000 	.word	0x7ff00000
 8005e8c:	08007a93 	.word	0x08007a93
 8005e90:	3ff80000 	.word	0x3ff80000
 8005e94:	08007ca8 	.word	0x08007ca8
 8005e98:	08007c80 	.word	0x08007c80
 8005e9c:	08007c1a 	.word	0x08007c1a
 8005ea0:	07f1      	lsls	r1, r6, #31
 8005ea2:	d508      	bpl.n	8005eb6 <_dtoa_r+0x34e>
 8005ea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eac:	f7fa fbac 	bl	8000608 <__aeabi_dmul>
 8005eb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	1076      	asrs	r6, r6, #1
 8005eb8:	3708      	adds	r7, #8
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <_dtoa_r+0x338>
 8005ebe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ec6:	f7fa fcc9 	bl	800085c <__aeabi_ddiv>
 8005eca:	e9cd 0100 	strd	r0, r1, [sp]
 8005ece:	e01a      	b.n	8005f06 <_dtoa_r+0x39e>
 8005ed0:	2502      	movs	r5, #2
 8005ed2:	e7a3      	b.n	8005e1c <_dtoa_r+0x2b4>
 8005ed4:	f000 80a0 	beq.w	8006018 <_dtoa_r+0x4b0>
 8005ed8:	f1ca 0600 	rsb	r6, sl, #0
 8005edc:	4b9f      	ldr	r3, [pc, #636]	; (800615c <_dtoa_r+0x5f4>)
 8005ede:	4fa0      	ldr	r7, [pc, #640]	; (8006160 <_dtoa_r+0x5f8>)
 8005ee0:	f006 020f 	and.w	r2, r6, #15
 8005ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ef0:	f7fa fb8a 	bl	8000608 <__aeabi_dmul>
 8005ef4:	e9cd 0100 	strd	r0, r1, [sp]
 8005ef8:	1136      	asrs	r6, r6, #4
 8005efa:	2300      	movs	r3, #0
 8005efc:	2502      	movs	r5, #2
 8005efe:	2e00      	cmp	r6, #0
 8005f00:	d17f      	bne.n	8006002 <_dtoa_r+0x49a>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e1      	bne.n	8005eca <_dtoa_r+0x362>
 8005f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8087 	beq.w	800601c <_dtoa_r+0x4b4>
 8005f0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005f12:	2200      	movs	r2, #0
 8005f14:	4b93      	ldr	r3, [pc, #588]	; (8006164 <_dtoa_r+0x5fc>)
 8005f16:	4630      	mov	r0, r6
 8005f18:	4639      	mov	r1, r7
 8005f1a:	f7fa fde7 	bl	8000aec <__aeabi_dcmplt>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d07c      	beq.n	800601c <_dtoa_r+0x4b4>
 8005f22:	f1b9 0f00 	cmp.w	r9, #0
 8005f26:	d079      	beq.n	800601c <_dtoa_r+0x4b4>
 8005f28:	9b02      	ldr	r3, [sp, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	dd35      	ble.n	8005f9a <_dtoa_r+0x432>
 8005f2e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005f32:	9308      	str	r3, [sp, #32]
 8005f34:	4639      	mov	r1, r7
 8005f36:	2200      	movs	r2, #0
 8005f38:	4b8b      	ldr	r3, [pc, #556]	; (8006168 <_dtoa_r+0x600>)
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f7fa fb64 	bl	8000608 <__aeabi_dmul>
 8005f40:	e9cd 0100 	strd	r0, r1, [sp]
 8005f44:	9f02      	ldr	r7, [sp, #8]
 8005f46:	3501      	adds	r5, #1
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f7fa faf3 	bl	8000534 <__aeabi_i2d>
 8005f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f52:	f7fa fb59 	bl	8000608 <__aeabi_dmul>
 8005f56:	2200      	movs	r2, #0
 8005f58:	4b84      	ldr	r3, [pc, #528]	; (800616c <_dtoa_r+0x604>)
 8005f5a:	f7fa f99f 	bl	800029c <__adddf3>
 8005f5e:	4605      	mov	r5, r0
 8005f60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005f64:	2f00      	cmp	r7, #0
 8005f66:	d15d      	bne.n	8006024 <_dtoa_r+0x4bc>
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4b81      	ldr	r3, [pc, #516]	; (8006170 <_dtoa_r+0x608>)
 8005f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f70:	f7fa f992 	bl	8000298 <__aeabi_dsub>
 8005f74:	462a      	mov	r2, r5
 8005f76:	4633      	mov	r3, r6
 8005f78:	e9cd 0100 	strd	r0, r1, [sp]
 8005f7c:	f7fa fdd4 	bl	8000b28 <__aeabi_dcmpgt>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	f040 8288 	bne.w	8006496 <_dtoa_r+0x92e>
 8005f86:	462a      	mov	r2, r5
 8005f88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f90:	f7fa fdac 	bl	8000aec <__aeabi_dcmplt>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	f040 827c 	bne.w	8006492 <_dtoa_r+0x92a>
 8005f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8005fa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f2c0 8150 	blt.w	800624a <_dtoa_r+0x6e2>
 8005faa:	f1ba 0f0e 	cmp.w	sl, #14
 8005fae:	f300 814c 	bgt.w	800624a <_dtoa_r+0x6e2>
 8005fb2:	4b6a      	ldr	r3, [pc, #424]	; (800615c <_dtoa_r+0x5f4>)
 8005fb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005fb8:	ed93 7b00 	vldr	d7, [r3]
 8005fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fc4:	f280 80d8 	bge.w	8006178 <_dtoa_r+0x610>
 8005fc8:	f1b9 0f00 	cmp.w	r9, #0
 8005fcc:	f300 80d4 	bgt.w	8006178 <_dtoa_r+0x610>
 8005fd0:	f040 825e 	bne.w	8006490 <_dtoa_r+0x928>
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4b66      	ldr	r3, [pc, #408]	; (8006170 <_dtoa_r+0x608>)
 8005fd8:	ec51 0b17 	vmov	r0, r1, d7
 8005fdc:	f7fa fb14 	bl	8000608 <__aeabi_dmul>
 8005fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fe4:	f7fa fd96 	bl	8000b14 <__aeabi_dcmpge>
 8005fe8:	464f      	mov	r7, r9
 8005fea:	464e      	mov	r6, r9
 8005fec:	2800      	cmp	r0, #0
 8005fee:	f040 8234 	bne.w	800645a <_dtoa_r+0x8f2>
 8005ff2:	2331      	movs	r3, #49	; 0x31
 8005ff4:	f10b 0501 	add.w	r5, fp, #1
 8005ff8:	f88b 3000 	strb.w	r3, [fp]
 8005ffc:	f10a 0a01 	add.w	sl, sl, #1
 8006000:	e22f      	b.n	8006462 <_dtoa_r+0x8fa>
 8006002:	07f2      	lsls	r2, r6, #31
 8006004:	d505      	bpl.n	8006012 <_dtoa_r+0x4aa>
 8006006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800600a:	f7fa fafd 	bl	8000608 <__aeabi_dmul>
 800600e:	3501      	adds	r5, #1
 8006010:	2301      	movs	r3, #1
 8006012:	1076      	asrs	r6, r6, #1
 8006014:	3708      	adds	r7, #8
 8006016:	e772      	b.n	8005efe <_dtoa_r+0x396>
 8006018:	2502      	movs	r5, #2
 800601a:	e774      	b.n	8005f06 <_dtoa_r+0x39e>
 800601c:	f8cd a020 	str.w	sl, [sp, #32]
 8006020:	464f      	mov	r7, r9
 8006022:	e791      	b.n	8005f48 <_dtoa_r+0x3e0>
 8006024:	4b4d      	ldr	r3, [pc, #308]	; (800615c <_dtoa_r+0x5f4>)
 8006026:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800602a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800602e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006030:	2b00      	cmp	r3, #0
 8006032:	d047      	beq.n	80060c4 <_dtoa_r+0x55c>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	2000      	movs	r0, #0
 800603a:	494e      	ldr	r1, [pc, #312]	; (8006174 <_dtoa_r+0x60c>)
 800603c:	f7fa fc0e 	bl	800085c <__aeabi_ddiv>
 8006040:	462a      	mov	r2, r5
 8006042:	4633      	mov	r3, r6
 8006044:	f7fa f928 	bl	8000298 <__aeabi_dsub>
 8006048:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800604c:	465d      	mov	r5, fp
 800604e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006052:	f7fa fd89 	bl	8000b68 <__aeabi_d2iz>
 8006056:	4606      	mov	r6, r0
 8006058:	f7fa fa6c 	bl	8000534 <__aeabi_i2d>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006064:	f7fa f918 	bl	8000298 <__aeabi_dsub>
 8006068:	3630      	adds	r6, #48	; 0x30
 800606a:	f805 6b01 	strb.w	r6, [r5], #1
 800606e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006072:	e9cd 0100 	strd	r0, r1, [sp]
 8006076:	f7fa fd39 	bl	8000aec <__aeabi_dcmplt>
 800607a:	2800      	cmp	r0, #0
 800607c:	d163      	bne.n	8006146 <_dtoa_r+0x5de>
 800607e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006082:	2000      	movs	r0, #0
 8006084:	4937      	ldr	r1, [pc, #220]	; (8006164 <_dtoa_r+0x5fc>)
 8006086:	f7fa f907 	bl	8000298 <__aeabi_dsub>
 800608a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800608e:	f7fa fd2d 	bl	8000aec <__aeabi_dcmplt>
 8006092:	2800      	cmp	r0, #0
 8006094:	f040 80b7 	bne.w	8006206 <_dtoa_r+0x69e>
 8006098:	eba5 030b 	sub.w	r3, r5, fp
 800609c:	429f      	cmp	r7, r3
 800609e:	f77f af7c 	ble.w	8005f9a <_dtoa_r+0x432>
 80060a2:	2200      	movs	r2, #0
 80060a4:	4b30      	ldr	r3, [pc, #192]	; (8006168 <_dtoa_r+0x600>)
 80060a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060aa:	f7fa faad 	bl	8000608 <__aeabi_dmul>
 80060ae:	2200      	movs	r2, #0
 80060b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80060b4:	4b2c      	ldr	r3, [pc, #176]	; (8006168 <_dtoa_r+0x600>)
 80060b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060ba:	f7fa faa5 	bl	8000608 <__aeabi_dmul>
 80060be:	e9cd 0100 	strd	r0, r1, [sp]
 80060c2:	e7c4      	b.n	800604e <_dtoa_r+0x4e6>
 80060c4:	462a      	mov	r2, r5
 80060c6:	4633      	mov	r3, r6
 80060c8:	f7fa fa9e 	bl	8000608 <__aeabi_dmul>
 80060cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80060d0:	eb0b 0507 	add.w	r5, fp, r7
 80060d4:	465e      	mov	r6, fp
 80060d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060da:	f7fa fd45 	bl	8000b68 <__aeabi_d2iz>
 80060de:	4607      	mov	r7, r0
 80060e0:	f7fa fa28 	bl	8000534 <__aeabi_i2d>
 80060e4:	3730      	adds	r7, #48	; 0x30
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060ee:	f7fa f8d3 	bl	8000298 <__aeabi_dsub>
 80060f2:	f806 7b01 	strb.w	r7, [r6], #1
 80060f6:	42ae      	cmp	r6, r5
 80060f8:	e9cd 0100 	strd	r0, r1, [sp]
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	d126      	bne.n	8006150 <_dtoa_r+0x5e8>
 8006102:	4b1c      	ldr	r3, [pc, #112]	; (8006174 <_dtoa_r+0x60c>)
 8006104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006108:	f7fa f8c8 	bl	800029c <__adddf3>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006114:	f7fa fd08 	bl	8000b28 <__aeabi_dcmpgt>
 8006118:	2800      	cmp	r0, #0
 800611a:	d174      	bne.n	8006206 <_dtoa_r+0x69e>
 800611c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006120:	2000      	movs	r0, #0
 8006122:	4914      	ldr	r1, [pc, #80]	; (8006174 <_dtoa_r+0x60c>)
 8006124:	f7fa f8b8 	bl	8000298 <__aeabi_dsub>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006130:	f7fa fcdc 	bl	8000aec <__aeabi_dcmplt>
 8006134:	2800      	cmp	r0, #0
 8006136:	f43f af30 	beq.w	8005f9a <_dtoa_r+0x432>
 800613a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800613e:	2b30      	cmp	r3, #48	; 0x30
 8006140:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006144:	d002      	beq.n	800614c <_dtoa_r+0x5e4>
 8006146:	f8dd a020 	ldr.w	sl, [sp, #32]
 800614a:	e04a      	b.n	80061e2 <_dtoa_r+0x67a>
 800614c:	4615      	mov	r5, r2
 800614e:	e7f4      	b.n	800613a <_dtoa_r+0x5d2>
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <_dtoa_r+0x600>)
 8006152:	f7fa fa59 	bl	8000608 <__aeabi_dmul>
 8006156:	e9cd 0100 	strd	r0, r1, [sp]
 800615a:	e7bc      	b.n	80060d6 <_dtoa_r+0x56e>
 800615c:	08007ca8 	.word	0x08007ca8
 8006160:	08007c80 	.word	0x08007c80
 8006164:	3ff00000 	.word	0x3ff00000
 8006168:	40240000 	.word	0x40240000
 800616c:	401c0000 	.word	0x401c0000
 8006170:	40140000 	.word	0x40140000
 8006174:	3fe00000 	.word	0x3fe00000
 8006178:	e9dd 6700 	ldrd	r6, r7, [sp]
 800617c:	465d      	mov	r5, fp
 800617e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006182:	4630      	mov	r0, r6
 8006184:	4639      	mov	r1, r7
 8006186:	f7fa fb69 	bl	800085c <__aeabi_ddiv>
 800618a:	f7fa fced 	bl	8000b68 <__aeabi_d2iz>
 800618e:	4680      	mov	r8, r0
 8006190:	f7fa f9d0 	bl	8000534 <__aeabi_i2d>
 8006194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006198:	f7fa fa36 	bl	8000608 <__aeabi_dmul>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4630      	mov	r0, r6
 80061a2:	4639      	mov	r1, r7
 80061a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80061a8:	f7fa f876 	bl	8000298 <__aeabi_dsub>
 80061ac:	f805 6b01 	strb.w	r6, [r5], #1
 80061b0:	eba5 060b 	sub.w	r6, r5, fp
 80061b4:	45b1      	cmp	r9, r6
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	d139      	bne.n	8006230 <_dtoa_r+0x6c8>
 80061bc:	f7fa f86e 	bl	800029c <__adddf3>
 80061c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c4:	4606      	mov	r6, r0
 80061c6:	460f      	mov	r7, r1
 80061c8:	f7fa fcae 	bl	8000b28 <__aeabi_dcmpgt>
 80061cc:	b9c8      	cbnz	r0, 8006202 <_dtoa_r+0x69a>
 80061ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061d2:	4630      	mov	r0, r6
 80061d4:	4639      	mov	r1, r7
 80061d6:	f7fa fc7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80061da:	b110      	cbz	r0, 80061e2 <_dtoa_r+0x67a>
 80061dc:	f018 0f01 	tst.w	r8, #1
 80061e0:	d10f      	bne.n	8006202 <_dtoa_r+0x69a>
 80061e2:	9904      	ldr	r1, [sp, #16]
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 fde9 	bl	8006dbc <_Bfree>
 80061ea:	2300      	movs	r3, #0
 80061ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061ee:	702b      	strb	r3, [r5, #0]
 80061f0:	f10a 0301 	add.w	r3, sl, #1
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 8241 	beq.w	8006680 <_dtoa_r+0xb18>
 80061fe:	601d      	str	r5, [r3, #0]
 8006200:	e23e      	b.n	8006680 <_dtoa_r+0xb18>
 8006202:	f8cd a020 	str.w	sl, [sp, #32]
 8006206:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800620a:	2a39      	cmp	r2, #57	; 0x39
 800620c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006210:	d108      	bne.n	8006224 <_dtoa_r+0x6bc>
 8006212:	459b      	cmp	fp, r3
 8006214:	d10a      	bne.n	800622c <_dtoa_r+0x6c4>
 8006216:	9b08      	ldr	r3, [sp, #32]
 8006218:	3301      	adds	r3, #1
 800621a:	9308      	str	r3, [sp, #32]
 800621c:	2330      	movs	r3, #48	; 0x30
 800621e:	f88b 3000 	strb.w	r3, [fp]
 8006222:	465b      	mov	r3, fp
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	3201      	adds	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	e78c      	b.n	8006146 <_dtoa_r+0x5de>
 800622c:	461d      	mov	r5, r3
 800622e:	e7ea      	b.n	8006206 <_dtoa_r+0x69e>
 8006230:	2200      	movs	r2, #0
 8006232:	4b9b      	ldr	r3, [pc, #620]	; (80064a0 <_dtoa_r+0x938>)
 8006234:	f7fa f9e8 	bl	8000608 <__aeabi_dmul>
 8006238:	2200      	movs	r2, #0
 800623a:	2300      	movs	r3, #0
 800623c:	4606      	mov	r6, r0
 800623e:	460f      	mov	r7, r1
 8006240:	f7fa fc4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006244:	2800      	cmp	r0, #0
 8006246:	d09a      	beq.n	800617e <_dtoa_r+0x616>
 8006248:	e7cb      	b.n	80061e2 <_dtoa_r+0x67a>
 800624a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800624c:	2a00      	cmp	r2, #0
 800624e:	f000 808b 	beq.w	8006368 <_dtoa_r+0x800>
 8006252:	9a06      	ldr	r2, [sp, #24]
 8006254:	2a01      	cmp	r2, #1
 8006256:	dc6e      	bgt.n	8006336 <_dtoa_r+0x7ce>
 8006258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800625a:	2a00      	cmp	r2, #0
 800625c:	d067      	beq.n	800632e <_dtoa_r+0x7c6>
 800625e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006262:	9f07      	ldr	r7, [sp, #28]
 8006264:	9d05      	ldr	r5, [sp, #20]
 8006266:	9a05      	ldr	r2, [sp, #20]
 8006268:	2101      	movs	r1, #1
 800626a:	441a      	add	r2, r3
 800626c:	4620      	mov	r0, r4
 800626e:	9205      	str	r2, [sp, #20]
 8006270:	4498      	add	r8, r3
 8006272:	f000 fe81 	bl	8006f78 <__i2b>
 8006276:	4606      	mov	r6, r0
 8006278:	2d00      	cmp	r5, #0
 800627a:	dd0c      	ble.n	8006296 <_dtoa_r+0x72e>
 800627c:	f1b8 0f00 	cmp.w	r8, #0
 8006280:	dd09      	ble.n	8006296 <_dtoa_r+0x72e>
 8006282:	4545      	cmp	r5, r8
 8006284:	9a05      	ldr	r2, [sp, #20]
 8006286:	462b      	mov	r3, r5
 8006288:	bfa8      	it	ge
 800628a:	4643      	movge	r3, r8
 800628c:	1ad2      	subs	r2, r2, r3
 800628e:	9205      	str	r2, [sp, #20]
 8006290:	1aed      	subs	r5, r5, r3
 8006292:	eba8 0803 	sub.w	r8, r8, r3
 8006296:	9b07      	ldr	r3, [sp, #28]
 8006298:	b1eb      	cbz	r3, 80062d6 <_dtoa_r+0x76e>
 800629a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629c:	2b00      	cmp	r3, #0
 800629e:	d067      	beq.n	8006370 <_dtoa_r+0x808>
 80062a0:	b18f      	cbz	r7, 80062c6 <_dtoa_r+0x75e>
 80062a2:	4631      	mov	r1, r6
 80062a4:	463a      	mov	r2, r7
 80062a6:	4620      	mov	r0, r4
 80062a8:	f000 ff06 	bl	80070b8 <__pow5mult>
 80062ac:	9a04      	ldr	r2, [sp, #16]
 80062ae:	4601      	mov	r1, r0
 80062b0:	4606      	mov	r6, r0
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 fe69 	bl	8006f8a <__multiply>
 80062b8:	9904      	ldr	r1, [sp, #16]
 80062ba:	9008      	str	r0, [sp, #32]
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 fd7d 	bl	8006dbc <_Bfree>
 80062c2:	9b08      	ldr	r3, [sp, #32]
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	9b07      	ldr	r3, [sp, #28]
 80062c8:	1bda      	subs	r2, r3, r7
 80062ca:	d004      	beq.n	80062d6 <_dtoa_r+0x76e>
 80062cc:	9904      	ldr	r1, [sp, #16]
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 fef2 	bl	80070b8 <__pow5mult>
 80062d4:	9004      	str	r0, [sp, #16]
 80062d6:	2101      	movs	r1, #1
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fe4d 	bl	8006f78 <__i2b>
 80062de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062e0:	4607      	mov	r7, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 81d0 	beq.w	8006688 <_dtoa_r+0xb20>
 80062e8:	461a      	mov	r2, r3
 80062ea:	4601      	mov	r1, r0
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 fee3 	bl	80070b8 <__pow5mult>
 80062f2:	9b06      	ldr	r3, [sp, #24]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	4607      	mov	r7, r0
 80062f8:	dc40      	bgt.n	800637c <_dtoa_r+0x814>
 80062fa:	9b00      	ldr	r3, [sp, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d139      	bne.n	8006374 <_dtoa_r+0x80c>
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006306:	2b00      	cmp	r3, #0
 8006308:	d136      	bne.n	8006378 <_dtoa_r+0x810>
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006310:	0d1b      	lsrs	r3, r3, #20
 8006312:	051b      	lsls	r3, r3, #20
 8006314:	b12b      	cbz	r3, 8006322 <_dtoa_r+0x7ba>
 8006316:	9b05      	ldr	r3, [sp, #20]
 8006318:	3301      	adds	r3, #1
 800631a:	9305      	str	r3, [sp, #20]
 800631c:	f108 0801 	add.w	r8, r8, #1
 8006320:	2301      	movs	r3, #1
 8006322:	9307      	str	r3, [sp, #28]
 8006324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006326:	2b00      	cmp	r3, #0
 8006328:	d12a      	bne.n	8006380 <_dtoa_r+0x818>
 800632a:	2001      	movs	r0, #1
 800632c:	e030      	b.n	8006390 <_dtoa_r+0x828>
 800632e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006330:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006334:	e795      	b.n	8006262 <_dtoa_r+0x6fa>
 8006336:	9b07      	ldr	r3, [sp, #28]
 8006338:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800633c:	42bb      	cmp	r3, r7
 800633e:	bfbf      	itttt	lt
 8006340:	9b07      	ldrlt	r3, [sp, #28]
 8006342:	9707      	strlt	r7, [sp, #28]
 8006344:	1afa      	sublt	r2, r7, r3
 8006346:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006348:	bfbb      	ittet	lt
 800634a:	189b      	addlt	r3, r3, r2
 800634c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800634e:	1bdf      	subge	r7, r3, r7
 8006350:	2700      	movlt	r7, #0
 8006352:	f1b9 0f00 	cmp.w	r9, #0
 8006356:	bfb5      	itete	lt
 8006358:	9b05      	ldrlt	r3, [sp, #20]
 800635a:	9d05      	ldrge	r5, [sp, #20]
 800635c:	eba3 0509 	sublt.w	r5, r3, r9
 8006360:	464b      	movge	r3, r9
 8006362:	bfb8      	it	lt
 8006364:	2300      	movlt	r3, #0
 8006366:	e77e      	b.n	8006266 <_dtoa_r+0x6fe>
 8006368:	9f07      	ldr	r7, [sp, #28]
 800636a:	9d05      	ldr	r5, [sp, #20]
 800636c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800636e:	e783      	b.n	8006278 <_dtoa_r+0x710>
 8006370:	9a07      	ldr	r2, [sp, #28]
 8006372:	e7ab      	b.n	80062cc <_dtoa_r+0x764>
 8006374:	2300      	movs	r3, #0
 8006376:	e7d4      	b.n	8006322 <_dtoa_r+0x7ba>
 8006378:	9b00      	ldr	r3, [sp, #0]
 800637a:	e7d2      	b.n	8006322 <_dtoa_r+0x7ba>
 800637c:	2300      	movs	r3, #0
 800637e:	9307      	str	r3, [sp, #28]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006386:	6918      	ldr	r0, [r3, #16]
 8006388:	f000 fda8 	bl	8006edc <__hi0bits>
 800638c:	f1c0 0020 	rsb	r0, r0, #32
 8006390:	4440      	add	r0, r8
 8006392:	f010 001f 	ands.w	r0, r0, #31
 8006396:	d047      	beq.n	8006428 <_dtoa_r+0x8c0>
 8006398:	f1c0 0320 	rsb	r3, r0, #32
 800639c:	2b04      	cmp	r3, #4
 800639e:	dd3b      	ble.n	8006418 <_dtoa_r+0x8b0>
 80063a0:	9b05      	ldr	r3, [sp, #20]
 80063a2:	f1c0 001c 	rsb	r0, r0, #28
 80063a6:	4403      	add	r3, r0
 80063a8:	9305      	str	r3, [sp, #20]
 80063aa:	4405      	add	r5, r0
 80063ac:	4480      	add	r8, r0
 80063ae:	9b05      	ldr	r3, [sp, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	dd05      	ble.n	80063c0 <_dtoa_r+0x858>
 80063b4:	461a      	mov	r2, r3
 80063b6:	9904      	ldr	r1, [sp, #16]
 80063b8:	4620      	mov	r0, r4
 80063ba:	f000 fecb 	bl	8007154 <__lshift>
 80063be:	9004      	str	r0, [sp, #16]
 80063c0:	f1b8 0f00 	cmp.w	r8, #0
 80063c4:	dd05      	ble.n	80063d2 <_dtoa_r+0x86a>
 80063c6:	4639      	mov	r1, r7
 80063c8:	4642      	mov	r2, r8
 80063ca:	4620      	mov	r0, r4
 80063cc:	f000 fec2 	bl	8007154 <__lshift>
 80063d0:	4607      	mov	r7, r0
 80063d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063d4:	b353      	cbz	r3, 800642c <_dtoa_r+0x8c4>
 80063d6:	4639      	mov	r1, r7
 80063d8:	9804      	ldr	r0, [sp, #16]
 80063da:	f000 ff0f 	bl	80071fc <__mcmp>
 80063de:	2800      	cmp	r0, #0
 80063e0:	da24      	bge.n	800642c <_dtoa_r+0x8c4>
 80063e2:	2300      	movs	r3, #0
 80063e4:	220a      	movs	r2, #10
 80063e6:	9904      	ldr	r1, [sp, #16]
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 fcfe 	bl	8006dea <__multadd>
 80063ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f0:	9004      	str	r0, [sp, #16]
 80063f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 814d 	beq.w	8006696 <_dtoa_r+0xb2e>
 80063fc:	2300      	movs	r3, #0
 80063fe:	4631      	mov	r1, r6
 8006400:	220a      	movs	r2, #10
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fcf1 	bl	8006dea <__multadd>
 8006408:	9b02      	ldr	r3, [sp, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	4606      	mov	r6, r0
 800640e:	dc4f      	bgt.n	80064b0 <_dtoa_r+0x948>
 8006410:	9b06      	ldr	r3, [sp, #24]
 8006412:	2b02      	cmp	r3, #2
 8006414:	dd4c      	ble.n	80064b0 <_dtoa_r+0x948>
 8006416:	e011      	b.n	800643c <_dtoa_r+0x8d4>
 8006418:	d0c9      	beq.n	80063ae <_dtoa_r+0x846>
 800641a:	9a05      	ldr	r2, [sp, #20]
 800641c:	331c      	adds	r3, #28
 800641e:	441a      	add	r2, r3
 8006420:	9205      	str	r2, [sp, #20]
 8006422:	441d      	add	r5, r3
 8006424:	4498      	add	r8, r3
 8006426:	e7c2      	b.n	80063ae <_dtoa_r+0x846>
 8006428:	4603      	mov	r3, r0
 800642a:	e7f6      	b.n	800641a <_dtoa_r+0x8b2>
 800642c:	f1b9 0f00 	cmp.w	r9, #0
 8006430:	dc38      	bgt.n	80064a4 <_dtoa_r+0x93c>
 8006432:	9b06      	ldr	r3, [sp, #24]
 8006434:	2b02      	cmp	r3, #2
 8006436:	dd35      	ble.n	80064a4 <_dtoa_r+0x93c>
 8006438:	f8cd 9008 	str.w	r9, [sp, #8]
 800643c:	9b02      	ldr	r3, [sp, #8]
 800643e:	b963      	cbnz	r3, 800645a <_dtoa_r+0x8f2>
 8006440:	4639      	mov	r1, r7
 8006442:	2205      	movs	r2, #5
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fcd0 	bl	8006dea <__multadd>
 800644a:	4601      	mov	r1, r0
 800644c:	4607      	mov	r7, r0
 800644e:	9804      	ldr	r0, [sp, #16]
 8006450:	f000 fed4 	bl	80071fc <__mcmp>
 8006454:	2800      	cmp	r0, #0
 8006456:	f73f adcc 	bgt.w	8005ff2 <_dtoa_r+0x48a>
 800645a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800645c:	465d      	mov	r5, fp
 800645e:	ea6f 0a03 	mvn.w	sl, r3
 8006462:	f04f 0900 	mov.w	r9, #0
 8006466:	4639      	mov	r1, r7
 8006468:	4620      	mov	r0, r4
 800646a:	f000 fca7 	bl	8006dbc <_Bfree>
 800646e:	2e00      	cmp	r6, #0
 8006470:	f43f aeb7 	beq.w	80061e2 <_dtoa_r+0x67a>
 8006474:	f1b9 0f00 	cmp.w	r9, #0
 8006478:	d005      	beq.n	8006486 <_dtoa_r+0x91e>
 800647a:	45b1      	cmp	r9, r6
 800647c:	d003      	beq.n	8006486 <_dtoa_r+0x91e>
 800647e:	4649      	mov	r1, r9
 8006480:	4620      	mov	r0, r4
 8006482:	f000 fc9b 	bl	8006dbc <_Bfree>
 8006486:	4631      	mov	r1, r6
 8006488:	4620      	mov	r0, r4
 800648a:	f000 fc97 	bl	8006dbc <_Bfree>
 800648e:	e6a8      	b.n	80061e2 <_dtoa_r+0x67a>
 8006490:	2700      	movs	r7, #0
 8006492:	463e      	mov	r6, r7
 8006494:	e7e1      	b.n	800645a <_dtoa_r+0x8f2>
 8006496:	f8dd a020 	ldr.w	sl, [sp, #32]
 800649a:	463e      	mov	r6, r7
 800649c:	e5a9      	b.n	8005ff2 <_dtoa_r+0x48a>
 800649e:	bf00      	nop
 80064a0:	40240000 	.word	0x40240000
 80064a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 80fa 	beq.w	80066a4 <_dtoa_r+0xb3c>
 80064b0:	2d00      	cmp	r5, #0
 80064b2:	dd05      	ble.n	80064c0 <_dtoa_r+0x958>
 80064b4:	4631      	mov	r1, r6
 80064b6:	462a      	mov	r2, r5
 80064b8:	4620      	mov	r0, r4
 80064ba:	f000 fe4b 	bl	8007154 <__lshift>
 80064be:	4606      	mov	r6, r0
 80064c0:	9b07      	ldr	r3, [sp, #28]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d04c      	beq.n	8006560 <_dtoa_r+0x9f8>
 80064c6:	6871      	ldr	r1, [r6, #4]
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fc43 	bl	8006d54 <_Balloc>
 80064ce:	6932      	ldr	r2, [r6, #16]
 80064d0:	3202      	adds	r2, #2
 80064d2:	4605      	mov	r5, r0
 80064d4:	0092      	lsls	r2, r2, #2
 80064d6:	f106 010c 	add.w	r1, r6, #12
 80064da:	300c      	adds	r0, #12
 80064dc:	f7fd fd83 	bl	8003fe6 <memcpy>
 80064e0:	2201      	movs	r2, #1
 80064e2:	4629      	mov	r1, r5
 80064e4:	4620      	mov	r0, r4
 80064e6:	f000 fe35 	bl	8007154 <__lshift>
 80064ea:	9b00      	ldr	r3, [sp, #0]
 80064ec:	f8cd b014 	str.w	fp, [sp, #20]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	46b1      	mov	r9, r6
 80064f6:	9307      	str	r3, [sp, #28]
 80064f8:	4606      	mov	r6, r0
 80064fa:	4639      	mov	r1, r7
 80064fc:	9804      	ldr	r0, [sp, #16]
 80064fe:	f7ff faa6 	bl	8005a4e <quorem>
 8006502:	4649      	mov	r1, r9
 8006504:	4605      	mov	r5, r0
 8006506:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800650a:	9804      	ldr	r0, [sp, #16]
 800650c:	f000 fe76 	bl	80071fc <__mcmp>
 8006510:	4632      	mov	r2, r6
 8006512:	9000      	str	r0, [sp, #0]
 8006514:	4639      	mov	r1, r7
 8006516:	4620      	mov	r0, r4
 8006518:	f000 fe8a 	bl	8007230 <__mdiff>
 800651c:	68c3      	ldr	r3, [r0, #12]
 800651e:	4602      	mov	r2, r0
 8006520:	bb03      	cbnz	r3, 8006564 <_dtoa_r+0x9fc>
 8006522:	4601      	mov	r1, r0
 8006524:	9008      	str	r0, [sp, #32]
 8006526:	9804      	ldr	r0, [sp, #16]
 8006528:	f000 fe68 	bl	80071fc <__mcmp>
 800652c:	9a08      	ldr	r2, [sp, #32]
 800652e:	4603      	mov	r3, r0
 8006530:	4611      	mov	r1, r2
 8006532:	4620      	mov	r0, r4
 8006534:	9308      	str	r3, [sp, #32]
 8006536:	f000 fc41 	bl	8006dbc <_Bfree>
 800653a:	9b08      	ldr	r3, [sp, #32]
 800653c:	b9a3      	cbnz	r3, 8006568 <_dtoa_r+0xa00>
 800653e:	9a06      	ldr	r2, [sp, #24]
 8006540:	b992      	cbnz	r2, 8006568 <_dtoa_r+0xa00>
 8006542:	9a07      	ldr	r2, [sp, #28]
 8006544:	b982      	cbnz	r2, 8006568 <_dtoa_r+0xa00>
 8006546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800654a:	d029      	beq.n	80065a0 <_dtoa_r+0xa38>
 800654c:	9b00      	ldr	r3, [sp, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	dd01      	ble.n	8006556 <_dtoa_r+0x9ee>
 8006552:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006556:	9b05      	ldr	r3, [sp, #20]
 8006558:	1c5d      	adds	r5, r3, #1
 800655a:	f883 8000 	strb.w	r8, [r3]
 800655e:	e782      	b.n	8006466 <_dtoa_r+0x8fe>
 8006560:	4630      	mov	r0, r6
 8006562:	e7c2      	b.n	80064ea <_dtoa_r+0x982>
 8006564:	2301      	movs	r3, #1
 8006566:	e7e3      	b.n	8006530 <_dtoa_r+0x9c8>
 8006568:	9a00      	ldr	r2, [sp, #0]
 800656a:	2a00      	cmp	r2, #0
 800656c:	db04      	blt.n	8006578 <_dtoa_r+0xa10>
 800656e:	d125      	bne.n	80065bc <_dtoa_r+0xa54>
 8006570:	9a06      	ldr	r2, [sp, #24]
 8006572:	bb1a      	cbnz	r2, 80065bc <_dtoa_r+0xa54>
 8006574:	9a07      	ldr	r2, [sp, #28]
 8006576:	bb0a      	cbnz	r2, 80065bc <_dtoa_r+0xa54>
 8006578:	2b00      	cmp	r3, #0
 800657a:	ddec      	ble.n	8006556 <_dtoa_r+0x9ee>
 800657c:	2201      	movs	r2, #1
 800657e:	9904      	ldr	r1, [sp, #16]
 8006580:	4620      	mov	r0, r4
 8006582:	f000 fde7 	bl	8007154 <__lshift>
 8006586:	4639      	mov	r1, r7
 8006588:	9004      	str	r0, [sp, #16]
 800658a:	f000 fe37 	bl	80071fc <__mcmp>
 800658e:	2800      	cmp	r0, #0
 8006590:	dc03      	bgt.n	800659a <_dtoa_r+0xa32>
 8006592:	d1e0      	bne.n	8006556 <_dtoa_r+0x9ee>
 8006594:	f018 0f01 	tst.w	r8, #1
 8006598:	d0dd      	beq.n	8006556 <_dtoa_r+0x9ee>
 800659a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800659e:	d1d8      	bne.n	8006552 <_dtoa_r+0x9ea>
 80065a0:	9b05      	ldr	r3, [sp, #20]
 80065a2:	9a05      	ldr	r2, [sp, #20]
 80065a4:	1c5d      	adds	r5, r3, #1
 80065a6:	2339      	movs	r3, #57	; 0x39
 80065a8:	7013      	strb	r3, [r2, #0]
 80065aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065ae:	2b39      	cmp	r3, #57	; 0x39
 80065b0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80065b4:	d04f      	beq.n	8006656 <_dtoa_r+0xaee>
 80065b6:	3301      	adds	r3, #1
 80065b8:	7013      	strb	r3, [r2, #0]
 80065ba:	e754      	b.n	8006466 <_dtoa_r+0x8fe>
 80065bc:	9a05      	ldr	r2, [sp, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f102 0501 	add.w	r5, r2, #1
 80065c4:	dd06      	ble.n	80065d4 <_dtoa_r+0xa6c>
 80065c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065ca:	d0e9      	beq.n	80065a0 <_dtoa_r+0xa38>
 80065cc:	f108 0801 	add.w	r8, r8, #1
 80065d0:	9b05      	ldr	r3, [sp, #20]
 80065d2:	e7c2      	b.n	800655a <_dtoa_r+0x9f2>
 80065d4:	9a02      	ldr	r2, [sp, #8]
 80065d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80065da:	eba5 030b 	sub.w	r3, r5, fp
 80065de:	4293      	cmp	r3, r2
 80065e0:	d021      	beq.n	8006626 <_dtoa_r+0xabe>
 80065e2:	2300      	movs	r3, #0
 80065e4:	220a      	movs	r2, #10
 80065e6:	9904      	ldr	r1, [sp, #16]
 80065e8:	4620      	mov	r0, r4
 80065ea:	f000 fbfe 	bl	8006dea <__multadd>
 80065ee:	45b1      	cmp	r9, r6
 80065f0:	9004      	str	r0, [sp, #16]
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	f04f 020a 	mov.w	r2, #10
 80065fa:	4649      	mov	r1, r9
 80065fc:	4620      	mov	r0, r4
 80065fe:	d105      	bne.n	800660c <_dtoa_r+0xaa4>
 8006600:	f000 fbf3 	bl	8006dea <__multadd>
 8006604:	4681      	mov	r9, r0
 8006606:	4606      	mov	r6, r0
 8006608:	9505      	str	r5, [sp, #20]
 800660a:	e776      	b.n	80064fa <_dtoa_r+0x992>
 800660c:	f000 fbed 	bl	8006dea <__multadd>
 8006610:	4631      	mov	r1, r6
 8006612:	4681      	mov	r9, r0
 8006614:	2300      	movs	r3, #0
 8006616:	220a      	movs	r2, #10
 8006618:	4620      	mov	r0, r4
 800661a:	f000 fbe6 	bl	8006dea <__multadd>
 800661e:	4606      	mov	r6, r0
 8006620:	e7f2      	b.n	8006608 <_dtoa_r+0xaa0>
 8006622:	f04f 0900 	mov.w	r9, #0
 8006626:	2201      	movs	r2, #1
 8006628:	9904      	ldr	r1, [sp, #16]
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fd92 	bl	8007154 <__lshift>
 8006630:	4639      	mov	r1, r7
 8006632:	9004      	str	r0, [sp, #16]
 8006634:	f000 fde2 	bl	80071fc <__mcmp>
 8006638:	2800      	cmp	r0, #0
 800663a:	dcb6      	bgt.n	80065aa <_dtoa_r+0xa42>
 800663c:	d102      	bne.n	8006644 <_dtoa_r+0xadc>
 800663e:	f018 0f01 	tst.w	r8, #1
 8006642:	d1b2      	bne.n	80065aa <_dtoa_r+0xa42>
 8006644:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006648:	2b30      	cmp	r3, #48	; 0x30
 800664a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800664e:	f47f af0a 	bne.w	8006466 <_dtoa_r+0x8fe>
 8006652:	4615      	mov	r5, r2
 8006654:	e7f6      	b.n	8006644 <_dtoa_r+0xadc>
 8006656:	4593      	cmp	fp, r2
 8006658:	d105      	bne.n	8006666 <_dtoa_r+0xafe>
 800665a:	2331      	movs	r3, #49	; 0x31
 800665c:	f10a 0a01 	add.w	sl, sl, #1
 8006660:	f88b 3000 	strb.w	r3, [fp]
 8006664:	e6ff      	b.n	8006466 <_dtoa_r+0x8fe>
 8006666:	4615      	mov	r5, r2
 8006668:	e79f      	b.n	80065aa <_dtoa_r+0xa42>
 800666a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80066d0 <_dtoa_r+0xb68>
 800666e:	e007      	b.n	8006680 <_dtoa_r+0xb18>
 8006670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006672:	f8df b060 	ldr.w	fp, [pc, #96]	; 80066d4 <_dtoa_r+0xb6c>
 8006676:	b11b      	cbz	r3, 8006680 <_dtoa_r+0xb18>
 8006678:	f10b 0308 	add.w	r3, fp, #8
 800667c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	4658      	mov	r0, fp
 8006682:	b017      	add	sp, #92	; 0x5c
 8006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006688:	9b06      	ldr	r3, [sp, #24]
 800668a:	2b01      	cmp	r3, #1
 800668c:	f77f ae35 	ble.w	80062fa <_dtoa_r+0x792>
 8006690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006692:	9307      	str	r3, [sp, #28]
 8006694:	e649      	b.n	800632a <_dtoa_r+0x7c2>
 8006696:	9b02      	ldr	r3, [sp, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc03      	bgt.n	80066a4 <_dtoa_r+0xb3c>
 800669c:	9b06      	ldr	r3, [sp, #24]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	f73f aecc 	bgt.w	800643c <_dtoa_r+0x8d4>
 80066a4:	465d      	mov	r5, fp
 80066a6:	4639      	mov	r1, r7
 80066a8:	9804      	ldr	r0, [sp, #16]
 80066aa:	f7ff f9d0 	bl	8005a4e <quorem>
 80066ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80066b2:	f805 8b01 	strb.w	r8, [r5], #1
 80066b6:	9a02      	ldr	r2, [sp, #8]
 80066b8:	eba5 030b 	sub.w	r3, r5, fp
 80066bc:	429a      	cmp	r2, r3
 80066be:	ddb0      	ble.n	8006622 <_dtoa_r+0xaba>
 80066c0:	2300      	movs	r3, #0
 80066c2:	220a      	movs	r2, #10
 80066c4:	9904      	ldr	r1, [sp, #16]
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 fb8f 	bl	8006dea <__multadd>
 80066cc:	9004      	str	r0, [sp, #16]
 80066ce:	e7ea      	b.n	80066a6 <_dtoa_r+0xb3e>
 80066d0:	08007a92 	.word	0x08007a92
 80066d4:	08007c11 	.word	0x08007c11

080066d8 <rshift>:
 80066d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066da:	6906      	ldr	r6, [r0, #16]
 80066dc:	114b      	asrs	r3, r1, #5
 80066de:	429e      	cmp	r6, r3
 80066e0:	f100 0414 	add.w	r4, r0, #20
 80066e4:	dd30      	ble.n	8006748 <rshift+0x70>
 80066e6:	f011 011f 	ands.w	r1, r1, #31
 80066ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80066ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80066f2:	d108      	bne.n	8006706 <rshift+0x2e>
 80066f4:	4621      	mov	r1, r4
 80066f6:	42b2      	cmp	r2, r6
 80066f8:	460b      	mov	r3, r1
 80066fa:	d211      	bcs.n	8006720 <rshift+0x48>
 80066fc:	f852 3b04 	ldr.w	r3, [r2], #4
 8006700:	f841 3b04 	str.w	r3, [r1], #4
 8006704:	e7f7      	b.n	80066f6 <rshift+0x1e>
 8006706:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800670a:	f1c1 0c20 	rsb	ip, r1, #32
 800670e:	40cd      	lsrs	r5, r1
 8006710:	3204      	adds	r2, #4
 8006712:	4623      	mov	r3, r4
 8006714:	42b2      	cmp	r2, r6
 8006716:	4617      	mov	r7, r2
 8006718:	d30c      	bcc.n	8006734 <rshift+0x5c>
 800671a:	601d      	str	r5, [r3, #0]
 800671c:	b105      	cbz	r5, 8006720 <rshift+0x48>
 800671e:	3304      	adds	r3, #4
 8006720:	1b1a      	subs	r2, r3, r4
 8006722:	42a3      	cmp	r3, r4
 8006724:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006728:	bf08      	it	eq
 800672a:	2300      	moveq	r3, #0
 800672c:	6102      	str	r2, [r0, #16]
 800672e:	bf08      	it	eq
 8006730:	6143      	streq	r3, [r0, #20]
 8006732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006734:	683f      	ldr	r7, [r7, #0]
 8006736:	fa07 f70c 	lsl.w	r7, r7, ip
 800673a:	433d      	orrs	r5, r7
 800673c:	f843 5b04 	str.w	r5, [r3], #4
 8006740:	f852 5b04 	ldr.w	r5, [r2], #4
 8006744:	40cd      	lsrs	r5, r1
 8006746:	e7e5      	b.n	8006714 <rshift+0x3c>
 8006748:	4623      	mov	r3, r4
 800674a:	e7e9      	b.n	8006720 <rshift+0x48>

0800674c <__hexdig_fun>:
 800674c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006750:	2b09      	cmp	r3, #9
 8006752:	d802      	bhi.n	800675a <__hexdig_fun+0xe>
 8006754:	3820      	subs	r0, #32
 8006756:	b2c0      	uxtb	r0, r0
 8006758:	4770      	bx	lr
 800675a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800675e:	2b05      	cmp	r3, #5
 8006760:	d801      	bhi.n	8006766 <__hexdig_fun+0x1a>
 8006762:	3847      	subs	r0, #71	; 0x47
 8006764:	e7f7      	b.n	8006756 <__hexdig_fun+0xa>
 8006766:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800676a:	2b05      	cmp	r3, #5
 800676c:	d801      	bhi.n	8006772 <__hexdig_fun+0x26>
 800676e:	3827      	subs	r0, #39	; 0x27
 8006770:	e7f1      	b.n	8006756 <__hexdig_fun+0xa>
 8006772:	2000      	movs	r0, #0
 8006774:	4770      	bx	lr

08006776 <__gethex>:
 8006776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677a:	b08b      	sub	sp, #44	; 0x2c
 800677c:	468a      	mov	sl, r1
 800677e:	9002      	str	r0, [sp, #8]
 8006780:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006782:	9306      	str	r3, [sp, #24]
 8006784:	4690      	mov	r8, r2
 8006786:	f000 facd 	bl	8006d24 <__localeconv_l>
 800678a:	6803      	ldr	r3, [r0, #0]
 800678c:	9303      	str	r3, [sp, #12]
 800678e:	4618      	mov	r0, r3
 8006790:	f7f9 fd26 	bl	80001e0 <strlen>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	9001      	str	r0, [sp, #4]
 8006798:	4403      	add	r3, r0
 800679a:	f04f 0b00 	mov.w	fp, #0
 800679e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80067a2:	9307      	str	r3, [sp, #28]
 80067a4:	f8da 3000 	ldr.w	r3, [sl]
 80067a8:	3302      	adds	r3, #2
 80067aa:	461f      	mov	r7, r3
 80067ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80067b0:	2830      	cmp	r0, #48	; 0x30
 80067b2:	d06c      	beq.n	800688e <__gethex+0x118>
 80067b4:	f7ff ffca 	bl	800674c <__hexdig_fun>
 80067b8:	4604      	mov	r4, r0
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d16a      	bne.n	8006894 <__gethex+0x11e>
 80067be:	9a01      	ldr	r2, [sp, #4]
 80067c0:	9903      	ldr	r1, [sp, #12]
 80067c2:	4638      	mov	r0, r7
 80067c4:	f001 f8de 	bl	8007984 <strncmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d166      	bne.n	800689a <__gethex+0x124>
 80067cc:	9b01      	ldr	r3, [sp, #4]
 80067ce:	5cf8      	ldrb	r0, [r7, r3]
 80067d0:	18fe      	adds	r6, r7, r3
 80067d2:	f7ff ffbb 	bl	800674c <__hexdig_fun>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d062      	beq.n	80068a0 <__gethex+0x12a>
 80067da:	4633      	mov	r3, r6
 80067dc:	7818      	ldrb	r0, [r3, #0]
 80067de:	2830      	cmp	r0, #48	; 0x30
 80067e0:	461f      	mov	r7, r3
 80067e2:	f103 0301 	add.w	r3, r3, #1
 80067e6:	d0f9      	beq.n	80067dc <__gethex+0x66>
 80067e8:	f7ff ffb0 	bl	800674c <__hexdig_fun>
 80067ec:	fab0 f580 	clz	r5, r0
 80067f0:	096d      	lsrs	r5, r5, #5
 80067f2:	4634      	mov	r4, r6
 80067f4:	f04f 0b01 	mov.w	fp, #1
 80067f8:	463a      	mov	r2, r7
 80067fa:	4616      	mov	r6, r2
 80067fc:	3201      	adds	r2, #1
 80067fe:	7830      	ldrb	r0, [r6, #0]
 8006800:	f7ff ffa4 	bl	800674c <__hexdig_fun>
 8006804:	2800      	cmp	r0, #0
 8006806:	d1f8      	bne.n	80067fa <__gethex+0x84>
 8006808:	9a01      	ldr	r2, [sp, #4]
 800680a:	9903      	ldr	r1, [sp, #12]
 800680c:	4630      	mov	r0, r6
 800680e:	f001 f8b9 	bl	8007984 <strncmp>
 8006812:	b950      	cbnz	r0, 800682a <__gethex+0xb4>
 8006814:	b954      	cbnz	r4, 800682c <__gethex+0xb6>
 8006816:	9b01      	ldr	r3, [sp, #4]
 8006818:	18f4      	adds	r4, r6, r3
 800681a:	4622      	mov	r2, r4
 800681c:	4616      	mov	r6, r2
 800681e:	3201      	adds	r2, #1
 8006820:	7830      	ldrb	r0, [r6, #0]
 8006822:	f7ff ff93 	bl	800674c <__hexdig_fun>
 8006826:	2800      	cmp	r0, #0
 8006828:	d1f8      	bne.n	800681c <__gethex+0xa6>
 800682a:	b10c      	cbz	r4, 8006830 <__gethex+0xba>
 800682c:	1ba4      	subs	r4, r4, r6
 800682e:	00a4      	lsls	r4, r4, #2
 8006830:	7833      	ldrb	r3, [r6, #0]
 8006832:	2b50      	cmp	r3, #80	; 0x50
 8006834:	d001      	beq.n	800683a <__gethex+0xc4>
 8006836:	2b70      	cmp	r3, #112	; 0x70
 8006838:	d140      	bne.n	80068bc <__gethex+0x146>
 800683a:	7873      	ldrb	r3, [r6, #1]
 800683c:	2b2b      	cmp	r3, #43	; 0x2b
 800683e:	d031      	beq.n	80068a4 <__gethex+0x12e>
 8006840:	2b2d      	cmp	r3, #45	; 0x2d
 8006842:	d033      	beq.n	80068ac <__gethex+0x136>
 8006844:	1c71      	adds	r1, r6, #1
 8006846:	f04f 0900 	mov.w	r9, #0
 800684a:	7808      	ldrb	r0, [r1, #0]
 800684c:	f7ff ff7e 	bl	800674c <__hexdig_fun>
 8006850:	1e43      	subs	r3, r0, #1
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b18      	cmp	r3, #24
 8006856:	d831      	bhi.n	80068bc <__gethex+0x146>
 8006858:	f1a0 0210 	sub.w	r2, r0, #16
 800685c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006860:	f7ff ff74 	bl	800674c <__hexdig_fun>
 8006864:	1e43      	subs	r3, r0, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b18      	cmp	r3, #24
 800686a:	d922      	bls.n	80068b2 <__gethex+0x13c>
 800686c:	f1b9 0f00 	cmp.w	r9, #0
 8006870:	d000      	beq.n	8006874 <__gethex+0xfe>
 8006872:	4252      	negs	r2, r2
 8006874:	4414      	add	r4, r2
 8006876:	f8ca 1000 	str.w	r1, [sl]
 800687a:	b30d      	cbz	r5, 80068c0 <__gethex+0x14a>
 800687c:	f1bb 0f00 	cmp.w	fp, #0
 8006880:	bf0c      	ite	eq
 8006882:	2706      	moveq	r7, #6
 8006884:	2700      	movne	r7, #0
 8006886:	4638      	mov	r0, r7
 8006888:	b00b      	add	sp, #44	; 0x2c
 800688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688e:	f10b 0b01 	add.w	fp, fp, #1
 8006892:	e78a      	b.n	80067aa <__gethex+0x34>
 8006894:	2500      	movs	r5, #0
 8006896:	462c      	mov	r4, r5
 8006898:	e7ae      	b.n	80067f8 <__gethex+0x82>
 800689a:	463e      	mov	r6, r7
 800689c:	2501      	movs	r5, #1
 800689e:	e7c7      	b.n	8006830 <__gethex+0xba>
 80068a0:	4604      	mov	r4, r0
 80068a2:	e7fb      	b.n	800689c <__gethex+0x126>
 80068a4:	f04f 0900 	mov.w	r9, #0
 80068a8:	1cb1      	adds	r1, r6, #2
 80068aa:	e7ce      	b.n	800684a <__gethex+0xd4>
 80068ac:	f04f 0901 	mov.w	r9, #1
 80068b0:	e7fa      	b.n	80068a8 <__gethex+0x132>
 80068b2:	230a      	movs	r3, #10
 80068b4:	fb03 0202 	mla	r2, r3, r2, r0
 80068b8:	3a10      	subs	r2, #16
 80068ba:	e7cf      	b.n	800685c <__gethex+0xe6>
 80068bc:	4631      	mov	r1, r6
 80068be:	e7da      	b.n	8006876 <__gethex+0x100>
 80068c0:	1bf3      	subs	r3, r6, r7
 80068c2:	3b01      	subs	r3, #1
 80068c4:	4629      	mov	r1, r5
 80068c6:	2b07      	cmp	r3, #7
 80068c8:	dc49      	bgt.n	800695e <__gethex+0x1e8>
 80068ca:	9802      	ldr	r0, [sp, #8]
 80068cc:	f000 fa42 	bl	8006d54 <_Balloc>
 80068d0:	9b01      	ldr	r3, [sp, #4]
 80068d2:	f100 0914 	add.w	r9, r0, #20
 80068d6:	f04f 0b00 	mov.w	fp, #0
 80068da:	f1c3 0301 	rsb	r3, r3, #1
 80068de:	4605      	mov	r5, r0
 80068e0:	f8cd 9010 	str.w	r9, [sp, #16]
 80068e4:	46da      	mov	sl, fp
 80068e6:	9308      	str	r3, [sp, #32]
 80068e8:	42b7      	cmp	r7, r6
 80068ea:	d33b      	bcc.n	8006964 <__gethex+0x1ee>
 80068ec:	9804      	ldr	r0, [sp, #16]
 80068ee:	f840 ab04 	str.w	sl, [r0], #4
 80068f2:	eba0 0009 	sub.w	r0, r0, r9
 80068f6:	1080      	asrs	r0, r0, #2
 80068f8:	6128      	str	r0, [r5, #16]
 80068fa:	0147      	lsls	r7, r0, #5
 80068fc:	4650      	mov	r0, sl
 80068fe:	f000 faed 	bl	8006edc <__hi0bits>
 8006902:	f8d8 6000 	ldr.w	r6, [r8]
 8006906:	1a3f      	subs	r7, r7, r0
 8006908:	42b7      	cmp	r7, r6
 800690a:	dd64      	ble.n	80069d6 <__gethex+0x260>
 800690c:	1bbf      	subs	r7, r7, r6
 800690e:	4639      	mov	r1, r7
 8006910:	4628      	mov	r0, r5
 8006912:	f000 fdfd 	bl	8007510 <__any_on>
 8006916:	4682      	mov	sl, r0
 8006918:	b178      	cbz	r0, 800693a <__gethex+0x1c4>
 800691a:	1e7b      	subs	r3, r7, #1
 800691c:	1159      	asrs	r1, r3, #5
 800691e:	f003 021f 	and.w	r2, r3, #31
 8006922:	f04f 0a01 	mov.w	sl, #1
 8006926:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800692a:	fa0a f202 	lsl.w	r2, sl, r2
 800692e:	420a      	tst	r2, r1
 8006930:	d003      	beq.n	800693a <__gethex+0x1c4>
 8006932:	4553      	cmp	r3, sl
 8006934:	dc46      	bgt.n	80069c4 <__gethex+0x24e>
 8006936:	f04f 0a02 	mov.w	sl, #2
 800693a:	4639      	mov	r1, r7
 800693c:	4628      	mov	r0, r5
 800693e:	f7ff fecb 	bl	80066d8 <rshift>
 8006942:	443c      	add	r4, r7
 8006944:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006948:	42a3      	cmp	r3, r4
 800694a:	da52      	bge.n	80069f2 <__gethex+0x27c>
 800694c:	4629      	mov	r1, r5
 800694e:	9802      	ldr	r0, [sp, #8]
 8006950:	f000 fa34 	bl	8006dbc <_Bfree>
 8006954:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006956:	2300      	movs	r3, #0
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	27a3      	movs	r7, #163	; 0xa3
 800695c:	e793      	b.n	8006886 <__gethex+0x110>
 800695e:	3101      	adds	r1, #1
 8006960:	105b      	asrs	r3, r3, #1
 8006962:	e7b0      	b.n	80068c6 <__gethex+0x150>
 8006964:	1e73      	subs	r3, r6, #1
 8006966:	9305      	str	r3, [sp, #20]
 8006968:	9a07      	ldr	r2, [sp, #28]
 800696a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800696e:	4293      	cmp	r3, r2
 8006970:	d018      	beq.n	80069a4 <__gethex+0x22e>
 8006972:	f1bb 0f20 	cmp.w	fp, #32
 8006976:	d107      	bne.n	8006988 <__gethex+0x212>
 8006978:	9b04      	ldr	r3, [sp, #16]
 800697a:	f8c3 a000 	str.w	sl, [r3]
 800697e:	3304      	adds	r3, #4
 8006980:	f04f 0a00 	mov.w	sl, #0
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	46d3      	mov	fp, sl
 8006988:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800698c:	f7ff fede 	bl	800674c <__hexdig_fun>
 8006990:	f000 000f 	and.w	r0, r0, #15
 8006994:	fa00 f00b 	lsl.w	r0, r0, fp
 8006998:	ea4a 0a00 	orr.w	sl, sl, r0
 800699c:	f10b 0b04 	add.w	fp, fp, #4
 80069a0:	9b05      	ldr	r3, [sp, #20]
 80069a2:	e00d      	b.n	80069c0 <__gethex+0x24a>
 80069a4:	9b05      	ldr	r3, [sp, #20]
 80069a6:	9a08      	ldr	r2, [sp, #32]
 80069a8:	4413      	add	r3, r2
 80069aa:	42bb      	cmp	r3, r7
 80069ac:	d3e1      	bcc.n	8006972 <__gethex+0x1fc>
 80069ae:	4618      	mov	r0, r3
 80069b0:	9a01      	ldr	r2, [sp, #4]
 80069b2:	9903      	ldr	r1, [sp, #12]
 80069b4:	9309      	str	r3, [sp, #36]	; 0x24
 80069b6:	f000 ffe5 	bl	8007984 <strncmp>
 80069ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069bc:	2800      	cmp	r0, #0
 80069be:	d1d8      	bne.n	8006972 <__gethex+0x1fc>
 80069c0:	461e      	mov	r6, r3
 80069c2:	e791      	b.n	80068e8 <__gethex+0x172>
 80069c4:	1eb9      	subs	r1, r7, #2
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 fda2 	bl	8007510 <__any_on>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d0b2      	beq.n	8006936 <__gethex+0x1c0>
 80069d0:	f04f 0a03 	mov.w	sl, #3
 80069d4:	e7b1      	b.n	800693a <__gethex+0x1c4>
 80069d6:	da09      	bge.n	80069ec <__gethex+0x276>
 80069d8:	1bf7      	subs	r7, r6, r7
 80069da:	4629      	mov	r1, r5
 80069dc:	463a      	mov	r2, r7
 80069de:	9802      	ldr	r0, [sp, #8]
 80069e0:	f000 fbb8 	bl	8007154 <__lshift>
 80069e4:	1be4      	subs	r4, r4, r7
 80069e6:	4605      	mov	r5, r0
 80069e8:	f100 0914 	add.w	r9, r0, #20
 80069ec:	f04f 0a00 	mov.w	sl, #0
 80069f0:	e7a8      	b.n	8006944 <__gethex+0x1ce>
 80069f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80069f6:	42a0      	cmp	r0, r4
 80069f8:	dd6a      	ble.n	8006ad0 <__gethex+0x35a>
 80069fa:	1b04      	subs	r4, r0, r4
 80069fc:	42a6      	cmp	r6, r4
 80069fe:	dc2e      	bgt.n	8006a5e <__gethex+0x2e8>
 8006a00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d022      	beq.n	8006a4e <__gethex+0x2d8>
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d024      	beq.n	8006a56 <__gethex+0x2e0>
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d115      	bne.n	8006a3c <__gethex+0x2c6>
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d113      	bne.n	8006a3c <__gethex+0x2c6>
 8006a14:	2e01      	cmp	r6, #1
 8006a16:	dc0b      	bgt.n	8006a30 <__gethex+0x2ba>
 8006a18:	9a06      	ldr	r2, [sp, #24]
 8006a1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	2301      	movs	r3, #1
 8006a22:	612b      	str	r3, [r5, #16]
 8006a24:	f8c9 3000 	str.w	r3, [r9]
 8006a28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a2a:	2762      	movs	r7, #98	; 0x62
 8006a2c:	601d      	str	r5, [r3, #0]
 8006a2e:	e72a      	b.n	8006886 <__gethex+0x110>
 8006a30:	1e71      	subs	r1, r6, #1
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 fd6c 	bl	8007510 <__any_on>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d1ed      	bne.n	8006a18 <__gethex+0x2a2>
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	9802      	ldr	r0, [sp, #8]
 8006a40:	f000 f9bc 	bl	8006dbc <_Bfree>
 8006a44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a46:	2300      	movs	r3, #0
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	2750      	movs	r7, #80	; 0x50
 8006a4c:	e71b      	b.n	8006886 <__gethex+0x110>
 8006a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0e1      	beq.n	8006a18 <__gethex+0x2a2>
 8006a54:	e7f2      	b.n	8006a3c <__gethex+0x2c6>
 8006a56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1dd      	bne.n	8006a18 <__gethex+0x2a2>
 8006a5c:	e7ee      	b.n	8006a3c <__gethex+0x2c6>
 8006a5e:	1e67      	subs	r7, r4, #1
 8006a60:	f1ba 0f00 	cmp.w	sl, #0
 8006a64:	d131      	bne.n	8006aca <__gethex+0x354>
 8006a66:	b127      	cbz	r7, 8006a72 <__gethex+0x2fc>
 8006a68:	4639      	mov	r1, r7
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 fd50 	bl	8007510 <__any_on>
 8006a70:	4682      	mov	sl, r0
 8006a72:	117a      	asrs	r2, r7, #5
 8006a74:	2301      	movs	r3, #1
 8006a76:	f007 071f 	and.w	r7, r7, #31
 8006a7a:	fa03 f707 	lsl.w	r7, r3, r7
 8006a7e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006a82:	4621      	mov	r1, r4
 8006a84:	421f      	tst	r7, r3
 8006a86:	4628      	mov	r0, r5
 8006a88:	bf18      	it	ne
 8006a8a:	f04a 0a02 	orrne.w	sl, sl, #2
 8006a8e:	1b36      	subs	r6, r6, r4
 8006a90:	f7ff fe22 	bl	80066d8 <rshift>
 8006a94:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006a98:	2702      	movs	r7, #2
 8006a9a:	f1ba 0f00 	cmp.w	sl, #0
 8006a9e:	d048      	beq.n	8006b32 <__gethex+0x3bc>
 8006aa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d015      	beq.n	8006ad4 <__gethex+0x35e>
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d017      	beq.n	8006adc <__gethex+0x366>
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d109      	bne.n	8006ac4 <__gethex+0x34e>
 8006ab0:	f01a 0f02 	tst.w	sl, #2
 8006ab4:	d006      	beq.n	8006ac4 <__gethex+0x34e>
 8006ab6:	f8d9 3000 	ldr.w	r3, [r9]
 8006aba:	ea4a 0a03 	orr.w	sl, sl, r3
 8006abe:	f01a 0f01 	tst.w	sl, #1
 8006ac2:	d10e      	bne.n	8006ae2 <__gethex+0x36c>
 8006ac4:	f047 0710 	orr.w	r7, r7, #16
 8006ac8:	e033      	b.n	8006b32 <__gethex+0x3bc>
 8006aca:	f04f 0a01 	mov.w	sl, #1
 8006ace:	e7d0      	b.n	8006a72 <__gethex+0x2fc>
 8006ad0:	2701      	movs	r7, #1
 8006ad2:	e7e2      	b.n	8006a9a <__gethex+0x324>
 8006ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ad6:	f1c3 0301 	rsb	r3, r3, #1
 8006ada:	9315      	str	r3, [sp, #84]	; 0x54
 8006adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f0      	beq.n	8006ac4 <__gethex+0x34e>
 8006ae2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006ae6:	f105 0314 	add.w	r3, r5, #20
 8006aea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006aee:	eb03 010a 	add.w	r1, r3, sl
 8006af2:	f04f 0c00 	mov.w	ip, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006afc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006b00:	d01c      	beq.n	8006b3c <__gethex+0x3c6>
 8006b02:	3201      	adds	r2, #1
 8006b04:	6002      	str	r2, [r0, #0]
 8006b06:	2f02      	cmp	r7, #2
 8006b08:	f105 0314 	add.w	r3, r5, #20
 8006b0c:	d138      	bne.n	8006b80 <__gethex+0x40a>
 8006b0e:	f8d8 2000 	ldr.w	r2, [r8]
 8006b12:	3a01      	subs	r2, #1
 8006b14:	42b2      	cmp	r2, r6
 8006b16:	d10a      	bne.n	8006b2e <__gethex+0x3b8>
 8006b18:	1171      	asrs	r1, r6, #5
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f006 061f 	and.w	r6, r6, #31
 8006b20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b24:	fa02 f606 	lsl.w	r6, r2, r6
 8006b28:	421e      	tst	r6, r3
 8006b2a:	bf18      	it	ne
 8006b2c:	4617      	movne	r7, r2
 8006b2e:	f047 0720 	orr.w	r7, r7, #32
 8006b32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b34:	601d      	str	r5, [r3, #0]
 8006b36:	9b06      	ldr	r3, [sp, #24]
 8006b38:	601c      	str	r4, [r3, #0]
 8006b3a:	e6a4      	b.n	8006886 <__gethex+0x110>
 8006b3c:	4299      	cmp	r1, r3
 8006b3e:	f843 cc04 	str.w	ip, [r3, #-4]
 8006b42:	d8d8      	bhi.n	8006af6 <__gethex+0x380>
 8006b44:	68ab      	ldr	r3, [r5, #8]
 8006b46:	4599      	cmp	r9, r3
 8006b48:	db12      	blt.n	8006b70 <__gethex+0x3fa>
 8006b4a:	6869      	ldr	r1, [r5, #4]
 8006b4c:	9802      	ldr	r0, [sp, #8]
 8006b4e:	3101      	adds	r1, #1
 8006b50:	f000 f900 	bl	8006d54 <_Balloc>
 8006b54:	692a      	ldr	r2, [r5, #16]
 8006b56:	3202      	adds	r2, #2
 8006b58:	f105 010c 	add.w	r1, r5, #12
 8006b5c:	4683      	mov	fp, r0
 8006b5e:	0092      	lsls	r2, r2, #2
 8006b60:	300c      	adds	r0, #12
 8006b62:	f7fd fa40 	bl	8003fe6 <memcpy>
 8006b66:	4629      	mov	r1, r5
 8006b68:	9802      	ldr	r0, [sp, #8]
 8006b6a:	f000 f927 	bl	8006dbc <_Bfree>
 8006b6e:	465d      	mov	r5, fp
 8006b70:	692b      	ldr	r3, [r5, #16]
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006b78:	612a      	str	r2, [r5, #16]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	615a      	str	r2, [r3, #20]
 8006b7e:	e7c2      	b.n	8006b06 <__gethex+0x390>
 8006b80:	692a      	ldr	r2, [r5, #16]
 8006b82:	454a      	cmp	r2, r9
 8006b84:	dd0b      	ble.n	8006b9e <__gethex+0x428>
 8006b86:	2101      	movs	r1, #1
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f7ff fda5 	bl	80066d8 <rshift>
 8006b8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b92:	3401      	adds	r4, #1
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	f6ff aed9 	blt.w	800694c <__gethex+0x1d6>
 8006b9a:	2701      	movs	r7, #1
 8006b9c:	e7c7      	b.n	8006b2e <__gethex+0x3b8>
 8006b9e:	f016 061f 	ands.w	r6, r6, #31
 8006ba2:	d0fa      	beq.n	8006b9a <__gethex+0x424>
 8006ba4:	449a      	add	sl, r3
 8006ba6:	f1c6 0620 	rsb	r6, r6, #32
 8006baa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006bae:	f000 f995 	bl	8006edc <__hi0bits>
 8006bb2:	42b0      	cmp	r0, r6
 8006bb4:	dbe7      	blt.n	8006b86 <__gethex+0x410>
 8006bb6:	e7f0      	b.n	8006b9a <__gethex+0x424>

08006bb8 <L_shift>:
 8006bb8:	f1c2 0208 	rsb	r2, r2, #8
 8006bbc:	0092      	lsls	r2, r2, #2
 8006bbe:	b570      	push	{r4, r5, r6, lr}
 8006bc0:	f1c2 0620 	rsb	r6, r2, #32
 8006bc4:	6843      	ldr	r3, [r0, #4]
 8006bc6:	6804      	ldr	r4, [r0, #0]
 8006bc8:	fa03 f506 	lsl.w	r5, r3, r6
 8006bcc:	432c      	orrs	r4, r5
 8006bce:	40d3      	lsrs	r3, r2
 8006bd0:	6004      	str	r4, [r0, #0]
 8006bd2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006bd6:	4288      	cmp	r0, r1
 8006bd8:	d3f4      	bcc.n	8006bc4 <L_shift+0xc>
 8006bda:	bd70      	pop	{r4, r5, r6, pc}

08006bdc <__match>:
 8006bdc:	b530      	push	{r4, r5, lr}
 8006bde:	6803      	ldr	r3, [r0, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be6:	b914      	cbnz	r4, 8006bee <__match+0x12>
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	2001      	movs	r0, #1
 8006bec:	bd30      	pop	{r4, r5, pc}
 8006bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006bf6:	2d19      	cmp	r5, #25
 8006bf8:	bf98      	it	ls
 8006bfa:	3220      	addls	r2, #32
 8006bfc:	42a2      	cmp	r2, r4
 8006bfe:	d0f0      	beq.n	8006be2 <__match+0x6>
 8006c00:	2000      	movs	r0, #0
 8006c02:	e7f3      	b.n	8006bec <__match+0x10>

08006c04 <__hexnan>:
 8006c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	680b      	ldr	r3, [r1, #0]
 8006c0a:	6801      	ldr	r1, [r0, #0]
 8006c0c:	115f      	asrs	r7, r3, #5
 8006c0e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006c12:	f013 031f 	ands.w	r3, r3, #31
 8006c16:	b087      	sub	sp, #28
 8006c18:	bf18      	it	ne
 8006c1a:	3704      	addne	r7, #4
 8006c1c:	2500      	movs	r5, #0
 8006c1e:	1f3e      	subs	r6, r7, #4
 8006c20:	4682      	mov	sl, r0
 8006c22:	4690      	mov	r8, r2
 8006c24:	9301      	str	r3, [sp, #4]
 8006c26:	f847 5c04 	str.w	r5, [r7, #-4]
 8006c2a:	46b1      	mov	r9, r6
 8006c2c:	4634      	mov	r4, r6
 8006c2e:	9502      	str	r5, [sp, #8]
 8006c30:	46ab      	mov	fp, r5
 8006c32:	784a      	ldrb	r2, [r1, #1]
 8006c34:	1c4b      	adds	r3, r1, #1
 8006c36:	9303      	str	r3, [sp, #12]
 8006c38:	b342      	cbz	r2, 8006c8c <__hexnan+0x88>
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	9105      	str	r1, [sp, #20]
 8006c3e:	9204      	str	r2, [sp, #16]
 8006c40:	f7ff fd84 	bl	800674c <__hexdig_fun>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d143      	bne.n	8006cd0 <__hexnan+0xcc>
 8006c48:	9a04      	ldr	r2, [sp, #16]
 8006c4a:	9905      	ldr	r1, [sp, #20]
 8006c4c:	2a20      	cmp	r2, #32
 8006c4e:	d818      	bhi.n	8006c82 <__hexnan+0x7e>
 8006c50:	9b02      	ldr	r3, [sp, #8]
 8006c52:	459b      	cmp	fp, r3
 8006c54:	dd13      	ble.n	8006c7e <__hexnan+0x7a>
 8006c56:	454c      	cmp	r4, r9
 8006c58:	d206      	bcs.n	8006c68 <__hexnan+0x64>
 8006c5a:	2d07      	cmp	r5, #7
 8006c5c:	dc04      	bgt.n	8006c68 <__hexnan+0x64>
 8006c5e:	462a      	mov	r2, r5
 8006c60:	4649      	mov	r1, r9
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7ff ffa8 	bl	8006bb8 <L_shift>
 8006c68:	4544      	cmp	r4, r8
 8006c6a:	d944      	bls.n	8006cf6 <__hexnan+0xf2>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f1a4 0904 	sub.w	r9, r4, #4
 8006c72:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c76:	f8cd b008 	str.w	fp, [sp, #8]
 8006c7a:	464c      	mov	r4, r9
 8006c7c:	461d      	mov	r5, r3
 8006c7e:	9903      	ldr	r1, [sp, #12]
 8006c80:	e7d7      	b.n	8006c32 <__hexnan+0x2e>
 8006c82:	2a29      	cmp	r2, #41	; 0x29
 8006c84:	d14a      	bne.n	8006d1c <__hexnan+0x118>
 8006c86:	3102      	adds	r1, #2
 8006c88:	f8ca 1000 	str.w	r1, [sl]
 8006c8c:	f1bb 0f00 	cmp.w	fp, #0
 8006c90:	d044      	beq.n	8006d1c <__hexnan+0x118>
 8006c92:	454c      	cmp	r4, r9
 8006c94:	d206      	bcs.n	8006ca4 <__hexnan+0xa0>
 8006c96:	2d07      	cmp	r5, #7
 8006c98:	dc04      	bgt.n	8006ca4 <__hexnan+0xa0>
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f7ff ff8a 	bl	8006bb8 <L_shift>
 8006ca4:	4544      	cmp	r4, r8
 8006ca6:	d928      	bls.n	8006cfa <__hexnan+0xf6>
 8006ca8:	4643      	mov	r3, r8
 8006caa:	f854 2b04 	ldr.w	r2, [r4], #4
 8006cae:	f843 2b04 	str.w	r2, [r3], #4
 8006cb2:	42a6      	cmp	r6, r4
 8006cb4:	d2f9      	bcs.n	8006caa <__hexnan+0xa6>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f843 2b04 	str.w	r2, [r3], #4
 8006cbc:	429e      	cmp	r6, r3
 8006cbe:	d2fb      	bcs.n	8006cb8 <__hexnan+0xb4>
 8006cc0:	6833      	ldr	r3, [r6, #0]
 8006cc2:	b91b      	cbnz	r3, 8006ccc <__hexnan+0xc8>
 8006cc4:	4546      	cmp	r6, r8
 8006cc6:	d127      	bne.n	8006d18 <__hexnan+0x114>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	6033      	str	r3, [r6, #0]
 8006ccc:	2005      	movs	r0, #5
 8006cce:	e026      	b.n	8006d1e <__hexnan+0x11a>
 8006cd0:	3501      	adds	r5, #1
 8006cd2:	2d08      	cmp	r5, #8
 8006cd4:	f10b 0b01 	add.w	fp, fp, #1
 8006cd8:	dd06      	ble.n	8006ce8 <__hexnan+0xe4>
 8006cda:	4544      	cmp	r4, r8
 8006cdc:	d9cf      	bls.n	8006c7e <__hexnan+0x7a>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ce4:	2501      	movs	r5, #1
 8006ce6:	3c04      	subs	r4, #4
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	f000 000f 	and.w	r0, r0, #15
 8006cee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006cf2:	6020      	str	r0, [r4, #0]
 8006cf4:	e7c3      	b.n	8006c7e <__hexnan+0x7a>
 8006cf6:	2508      	movs	r5, #8
 8006cf8:	e7c1      	b.n	8006c7e <__hexnan+0x7a>
 8006cfa:	9b01      	ldr	r3, [sp, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0df      	beq.n	8006cc0 <__hexnan+0xbc>
 8006d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d04:	f1c3 0320 	rsb	r3, r3, #32
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006d10:	401a      	ands	r2, r3
 8006d12:	f847 2c04 	str.w	r2, [r7, #-4]
 8006d16:	e7d3      	b.n	8006cc0 <__hexnan+0xbc>
 8006d18:	3e04      	subs	r6, #4
 8006d1a:	e7d1      	b.n	8006cc0 <__hexnan+0xbc>
 8006d1c:	2004      	movs	r0, #4
 8006d1e:	b007      	add	sp, #28
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d24 <__localeconv_l>:
 8006d24:	30f0      	adds	r0, #240	; 0xf0
 8006d26:	4770      	bx	lr

08006d28 <_localeconv_r>:
 8006d28:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <_localeconv_r+0x14>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6a18      	ldr	r0, [r3, #32]
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <_localeconv_r+0x18>)
 8006d30:	2800      	cmp	r0, #0
 8006d32:	bf08      	it	eq
 8006d34:	4618      	moveq	r0, r3
 8006d36:	30f0      	adds	r0, #240	; 0xf0
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000038 	.word	0x20000038
 8006d40:	2000009c 	.word	0x2000009c

08006d44 <malloc>:
 8006d44:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <malloc+0xc>)
 8006d46:	4601      	mov	r1, r0
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	f000 bc5f 	b.w	800760c <_malloc_r>
 8006d4e:	bf00      	nop
 8006d50:	20000038 	.word	0x20000038

08006d54 <_Balloc>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d58:	4604      	mov	r4, r0
 8006d5a:	460e      	mov	r6, r1
 8006d5c:	b93d      	cbnz	r5, 8006d6e <_Balloc+0x1a>
 8006d5e:	2010      	movs	r0, #16
 8006d60:	f7ff fff0 	bl	8006d44 <malloc>
 8006d64:	6260      	str	r0, [r4, #36]	; 0x24
 8006d66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d6a:	6005      	str	r5, [r0, #0]
 8006d6c:	60c5      	str	r5, [r0, #12]
 8006d6e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d70:	68eb      	ldr	r3, [r5, #12]
 8006d72:	b183      	cbz	r3, 8006d96 <_Balloc+0x42>
 8006d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d7c:	b9b8      	cbnz	r0, 8006dae <_Balloc+0x5a>
 8006d7e:	2101      	movs	r1, #1
 8006d80:	fa01 f506 	lsl.w	r5, r1, r6
 8006d84:	1d6a      	adds	r2, r5, #5
 8006d86:	0092      	lsls	r2, r2, #2
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 fbe2 	bl	8007552 <_calloc_r>
 8006d8e:	b160      	cbz	r0, 8006daa <_Balloc+0x56>
 8006d90:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006d94:	e00e      	b.n	8006db4 <_Balloc+0x60>
 8006d96:	2221      	movs	r2, #33	; 0x21
 8006d98:	2104      	movs	r1, #4
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 fbd9 	bl	8007552 <_calloc_r>
 8006da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006da2:	60e8      	str	r0, [r5, #12]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e4      	bne.n	8006d74 <_Balloc+0x20>
 8006daa:	2000      	movs	r0, #0
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
 8006dae:	6802      	ldr	r2, [r0, #0]
 8006db0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006db4:	2300      	movs	r3, #0
 8006db6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dba:	e7f7      	b.n	8006dac <_Balloc+0x58>

08006dbc <_Bfree>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	b93c      	cbnz	r4, 8006dd6 <_Bfree+0x1a>
 8006dc6:	2010      	movs	r0, #16
 8006dc8:	f7ff ffbc 	bl	8006d44 <malloc>
 8006dcc:	6270      	str	r0, [r6, #36]	; 0x24
 8006dce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dd2:	6004      	str	r4, [r0, #0]
 8006dd4:	60c4      	str	r4, [r0, #12]
 8006dd6:	b13d      	cbz	r5, 8006de8 <_Bfree+0x2c>
 8006dd8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006dda:	686a      	ldr	r2, [r5, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006de2:	6029      	str	r1, [r5, #0]
 8006de4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006de8:	bd70      	pop	{r4, r5, r6, pc}

08006dea <__multadd>:
 8006dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dee:	690d      	ldr	r5, [r1, #16]
 8006df0:	461f      	mov	r7, r3
 8006df2:	4606      	mov	r6, r0
 8006df4:	460c      	mov	r4, r1
 8006df6:	f101 0c14 	add.w	ip, r1, #20
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f8dc 0000 	ldr.w	r0, [ip]
 8006e00:	b281      	uxth	r1, r0
 8006e02:	fb02 7101 	mla	r1, r2, r1, r7
 8006e06:	0c0f      	lsrs	r7, r1, #16
 8006e08:	0c00      	lsrs	r0, r0, #16
 8006e0a:	fb02 7000 	mla	r0, r2, r0, r7
 8006e0e:	b289      	uxth	r1, r1
 8006e10:	3301      	adds	r3, #1
 8006e12:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006e16:	429d      	cmp	r5, r3
 8006e18:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006e1c:	f84c 1b04 	str.w	r1, [ip], #4
 8006e20:	dcec      	bgt.n	8006dfc <__multadd+0x12>
 8006e22:	b1d7      	cbz	r7, 8006e5a <__multadd+0x70>
 8006e24:	68a3      	ldr	r3, [r4, #8]
 8006e26:	42ab      	cmp	r3, r5
 8006e28:	dc12      	bgt.n	8006e50 <__multadd+0x66>
 8006e2a:	6861      	ldr	r1, [r4, #4]
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	3101      	adds	r1, #1
 8006e30:	f7ff ff90 	bl	8006d54 <_Balloc>
 8006e34:	6922      	ldr	r2, [r4, #16]
 8006e36:	3202      	adds	r2, #2
 8006e38:	f104 010c 	add.w	r1, r4, #12
 8006e3c:	4680      	mov	r8, r0
 8006e3e:	0092      	lsls	r2, r2, #2
 8006e40:	300c      	adds	r0, #12
 8006e42:	f7fd f8d0 	bl	8003fe6 <memcpy>
 8006e46:	4621      	mov	r1, r4
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7ff ffb7 	bl	8006dbc <_Bfree>
 8006e4e:	4644      	mov	r4, r8
 8006e50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e54:	3501      	adds	r5, #1
 8006e56:	615f      	str	r7, [r3, #20]
 8006e58:	6125      	str	r5, [r4, #16]
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e60 <__s2b>:
 8006e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e64:	460c      	mov	r4, r1
 8006e66:	4615      	mov	r5, r2
 8006e68:	461f      	mov	r7, r3
 8006e6a:	2209      	movs	r2, #9
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	4606      	mov	r6, r0
 8006e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e74:	2100      	movs	r1, #0
 8006e76:	2201      	movs	r2, #1
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	db20      	blt.n	8006ebe <__s2b+0x5e>
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7ff ff69 	bl	8006d54 <_Balloc>
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	6143      	str	r3, [r0, #20]
 8006e86:	2d09      	cmp	r5, #9
 8006e88:	f04f 0301 	mov.w	r3, #1
 8006e8c:	6103      	str	r3, [r0, #16]
 8006e8e:	dd19      	ble.n	8006ec4 <__s2b+0x64>
 8006e90:	f104 0809 	add.w	r8, r4, #9
 8006e94:	46c1      	mov	r9, r8
 8006e96:	442c      	add	r4, r5
 8006e98:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006e9c:	4601      	mov	r1, r0
 8006e9e:	3b30      	subs	r3, #48	; 0x30
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7ff ffa1 	bl	8006dea <__multadd>
 8006ea8:	45a1      	cmp	r9, r4
 8006eaa:	d1f5      	bne.n	8006e98 <__s2b+0x38>
 8006eac:	eb08 0405 	add.w	r4, r8, r5
 8006eb0:	3c08      	subs	r4, #8
 8006eb2:	1b2d      	subs	r5, r5, r4
 8006eb4:	1963      	adds	r3, r4, r5
 8006eb6:	42bb      	cmp	r3, r7
 8006eb8:	db07      	blt.n	8006eca <__s2b+0x6a>
 8006eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ebe:	0052      	lsls	r2, r2, #1
 8006ec0:	3101      	adds	r1, #1
 8006ec2:	e7d9      	b.n	8006e78 <__s2b+0x18>
 8006ec4:	340a      	adds	r4, #10
 8006ec6:	2509      	movs	r5, #9
 8006ec8:	e7f3      	b.n	8006eb2 <__s2b+0x52>
 8006eca:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ece:	4601      	mov	r1, r0
 8006ed0:	3b30      	subs	r3, #48	; 0x30
 8006ed2:	220a      	movs	r2, #10
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff ff88 	bl	8006dea <__multadd>
 8006eda:	e7eb      	b.n	8006eb4 <__s2b+0x54>

08006edc <__hi0bits>:
 8006edc:	0c02      	lsrs	r2, r0, #16
 8006ede:	0412      	lsls	r2, r2, #16
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	b9b2      	cbnz	r2, 8006f12 <__hi0bits+0x36>
 8006ee4:	0403      	lsls	r3, r0, #16
 8006ee6:	2010      	movs	r0, #16
 8006ee8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006eec:	bf04      	itt	eq
 8006eee:	021b      	lsleq	r3, r3, #8
 8006ef0:	3008      	addeq	r0, #8
 8006ef2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ef6:	bf04      	itt	eq
 8006ef8:	011b      	lsleq	r3, r3, #4
 8006efa:	3004      	addeq	r0, #4
 8006efc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006f00:	bf04      	itt	eq
 8006f02:	009b      	lsleq	r3, r3, #2
 8006f04:	3002      	addeq	r0, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	db06      	blt.n	8006f18 <__hi0bits+0x3c>
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	d503      	bpl.n	8006f16 <__hi0bits+0x3a>
 8006f0e:	3001      	adds	r0, #1
 8006f10:	4770      	bx	lr
 8006f12:	2000      	movs	r0, #0
 8006f14:	e7e8      	b.n	8006ee8 <__hi0bits+0xc>
 8006f16:	2020      	movs	r0, #32
 8006f18:	4770      	bx	lr

08006f1a <__lo0bits>:
 8006f1a:	6803      	ldr	r3, [r0, #0]
 8006f1c:	f013 0207 	ands.w	r2, r3, #7
 8006f20:	4601      	mov	r1, r0
 8006f22:	d00b      	beq.n	8006f3c <__lo0bits+0x22>
 8006f24:	07da      	lsls	r2, r3, #31
 8006f26:	d423      	bmi.n	8006f70 <__lo0bits+0x56>
 8006f28:	0798      	lsls	r0, r3, #30
 8006f2a:	bf49      	itett	mi
 8006f2c:	085b      	lsrmi	r3, r3, #1
 8006f2e:	089b      	lsrpl	r3, r3, #2
 8006f30:	2001      	movmi	r0, #1
 8006f32:	600b      	strmi	r3, [r1, #0]
 8006f34:	bf5c      	itt	pl
 8006f36:	600b      	strpl	r3, [r1, #0]
 8006f38:	2002      	movpl	r0, #2
 8006f3a:	4770      	bx	lr
 8006f3c:	b298      	uxth	r0, r3
 8006f3e:	b9a8      	cbnz	r0, 8006f6c <__lo0bits+0x52>
 8006f40:	0c1b      	lsrs	r3, r3, #16
 8006f42:	2010      	movs	r0, #16
 8006f44:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f48:	bf04      	itt	eq
 8006f4a:	0a1b      	lsreq	r3, r3, #8
 8006f4c:	3008      	addeq	r0, #8
 8006f4e:	071a      	lsls	r2, r3, #28
 8006f50:	bf04      	itt	eq
 8006f52:	091b      	lsreq	r3, r3, #4
 8006f54:	3004      	addeq	r0, #4
 8006f56:	079a      	lsls	r2, r3, #30
 8006f58:	bf04      	itt	eq
 8006f5a:	089b      	lsreq	r3, r3, #2
 8006f5c:	3002      	addeq	r0, #2
 8006f5e:	07da      	lsls	r2, r3, #31
 8006f60:	d402      	bmi.n	8006f68 <__lo0bits+0x4e>
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	d006      	beq.n	8006f74 <__lo0bits+0x5a>
 8006f66:	3001      	adds	r0, #1
 8006f68:	600b      	str	r3, [r1, #0]
 8006f6a:	4770      	bx	lr
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	e7e9      	b.n	8006f44 <__lo0bits+0x2a>
 8006f70:	2000      	movs	r0, #0
 8006f72:	4770      	bx	lr
 8006f74:	2020      	movs	r0, #32
 8006f76:	4770      	bx	lr

08006f78 <__i2b>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	f7ff fee9 	bl	8006d54 <_Balloc>
 8006f82:	2201      	movs	r2, #1
 8006f84:	6144      	str	r4, [r0, #20]
 8006f86:	6102      	str	r2, [r0, #16]
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <__multiply>:
 8006f8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8e:	4614      	mov	r4, r2
 8006f90:	690a      	ldr	r2, [r1, #16]
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	bfb8      	it	lt
 8006f98:	460b      	movlt	r3, r1
 8006f9a:	4688      	mov	r8, r1
 8006f9c:	bfbc      	itt	lt
 8006f9e:	46a0      	movlt	r8, r4
 8006fa0:	461c      	movlt	r4, r3
 8006fa2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006fa6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006fae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006fb2:	eb07 0609 	add.w	r6, r7, r9
 8006fb6:	42b3      	cmp	r3, r6
 8006fb8:	bfb8      	it	lt
 8006fba:	3101      	addlt	r1, #1
 8006fbc:	f7ff feca 	bl	8006d54 <_Balloc>
 8006fc0:	f100 0514 	add.w	r5, r0, #20
 8006fc4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006fc8:	462b      	mov	r3, r5
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4573      	cmp	r3, lr
 8006fce:	d316      	bcc.n	8006ffe <__multiply+0x74>
 8006fd0:	f104 0214 	add.w	r2, r4, #20
 8006fd4:	f108 0114 	add.w	r1, r8, #20
 8006fd8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006fdc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	9b00      	ldr	r3, [sp, #0]
 8006fe4:	9201      	str	r2, [sp, #4]
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d80c      	bhi.n	8007004 <__multiply+0x7a>
 8006fea:	2e00      	cmp	r6, #0
 8006fec:	dd03      	ble.n	8006ff6 <__multiply+0x6c>
 8006fee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d05d      	beq.n	80070b2 <__multiply+0x128>
 8006ff6:	6106      	str	r6, [r0, #16]
 8006ff8:	b003      	add	sp, #12
 8006ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffe:	f843 2b04 	str.w	r2, [r3], #4
 8007002:	e7e3      	b.n	8006fcc <__multiply+0x42>
 8007004:	f8b2 b000 	ldrh.w	fp, [r2]
 8007008:	f1bb 0f00 	cmp.w	fp, #0
 800700c:	d023      	beq.n	8007056 <__multiply+0xcc>
 800700e:	4689      	mov	r9, r1
 8007010:	46ac      	mov	ip, r5
 8007012:	f04f 0800 	mov.w	r8, #0
 8007016:	f859 4b04 	ldr.w	r4, [r9], #4
 800701a:	f8dc a000 	ldr.w	sl, [ip]
 800701e:	b2a3      	uxth	r3, r4
 8007020:	fa1f fa8a 	uxth.w	sl, sl
 8007024:	fb0b a303 	mla	r3, fp, r3, sl
 8007028:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800702c:	f8dc 4000 	ldr.w	r4, [ip]
 8007030:	4443      	add	r3, r8
 8007032:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007036:	fb0b 840a 	mla	r4, fp, sl, r8
 800703a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800703e:	46e2      	mov	sl, ip
 8007040:	b29b      	uxth	r3, r3
 8007042:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007046:	454f      	cmp	r7, r9
 8007048:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800704c:	f84a 3b04 	str.w	r3, [sl], #4
 8007050:	d82b      	bhi.n	80070aa <__multiply+0x120>
 8007052:	f8cc 8004 	str.w	r8, [ip, #4]
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800705c:	3204      	adds	r2, #4
 800705e:	f1ba 0f00 	cmp.w	sl, #0
 8007062:	d020      	beq.n	80070a6 <__multiply+0x11c>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	4689      	mov	r9, r1
 8007068:	46a8      	mov	r8, r5
 800706a:	f04f 0b00 	mov.w	fp, #0
 800706e:	f8b9 c000 	ldrh.w	ip, [r9]
 8007072:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007076:	fb0a 440c 	mla	r4, sl, ip, r4
 800707a:	445c      	add	r4, fp
 800707c:	46c4      	mov	ip, r8
 800707e:	b29b      	uxth	r3, r3
 8007080:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007084:	f84c 3b04 	str.w	r3, [ip], #4
 8007088:	f859 3b04 	ldr.w	r3, [r9], #4
 800708c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007090:	0c1b      	lsrs	r3, r3, #16
 8007092:	fb0a b303 	mla	r3, sl, r3, fp
 8007096:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800709a:	454f      	cmp	r7, r9
 800709c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80070a0:	d805      	bhi.n	80070ae <__multiply+0x124>
 80070a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80070a6:	3504      	adds	r5, #4
 80070a8:	e79b      	b.n	8006fe2 <__multiply+0x58>
 80070aa:	46d4      	mov	ip, sl
 80070ac:	e7b3      	b.n	8007016 <__multiply+0x8c>
 80070ae:	46e0      	mov	r8, ip
 80070b0:	e7dd      	b.n	800706e <__multiply+0xe4>
 80070b2:	3e01      	subs	r6, #1
 80070b4:	e799      	b.n	8006fea <__multiply+0x60>
	...

080070b8 <__pow5mult>:
 80070b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070bc:	4615      	mov	r5, r2
 80070be:	f012 0203 	ands.w	r2, r2, #3
 80070c2:	4606      	mov	r6, r0
 80070c4:	460f      	mov	r7, r1
 80070c6:	d007      	beq.n	80070d8 <__pow5mult+0x20>
 80070c8:	3a01      	subs	r2, #1
 80070ca:	4c21      	ldr	r4, [pc, #132]	; (8007150 <__pow5mult+0x98>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070d2:	f7ff fe8a 	bl	8006dea <__multadd>
 80070d6:	4607      	mov	r7, r0
 80070d8:	10ad      	asrs	r5, r5, #2
 80070da:	d035      	beq.n	8007148 <__pow5mult+0x90>
 80070dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070de:	b93c      	cbnz	r4, 80070f0 <__pow5mult+0x38>
 80070e0:	2010      	movs	r0, #16
 80070e2:	f7ff fe2f 	bl	8006d44 <malloc>
 80070e6:	6270      	str	r0, [r6, #36]	; 0x24
 80070e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070ec:	6004      	str	r4, [r0, #0]
 80070ee:	60c4      	str	r4, [r0, #12]
 80070f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070f8:	b94c      	cbnz	r4, 800710e <__pow5mult+0x56>
 80070fa:	f240 2171 	movw	r1, #625	; 0x271
 80070fe:	4630      	mov	r0, r6
 8007100:	f7ff ff3a 	bl	8006f78 <__i2b>
 8007104:	2300      	movs	r3, #0
 8007106:	f8c8 0008 	str.w	r0, [r8, #8]
 800710a:	4604      	mov	r4, r0
 800710c:	6003      	str	r3, [r0, #0]
 800710e:	f04f 0800 	mov.w	r8, #0
 8007112:	07eb      	lsls	r3, r5, #31
 8007114:	d50a      	bpl.n	800712c <__pow5mult+0x74>
 8007116:	4639      	mov	r1, r7
 8007118:	4622      	mov	r2, r4
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff ff35 	bl	8006f8a <__multiply>
 8007120:	4639      	mov	r1, r7
 8007122:	4681      	mov	r9, r0
 8007124:	4630      	mov	r0, r6
 8007126:	f7ff fe49 	bl	8006dbc <_Bfree>
 800712a:	464f      	mov	r7, r9
 800712c:	106d      	asrs	r5, r5, #1
 800712e:	d00b      	beq.n	8007148 <__pow5mult+0x90>
 8007130:	6820      	ldr	r0, [r4, #0]
 8007132:	b938      	cbnz	r0, 8007144 <__pow5mult+0x8c>
 8007134:	4622      	mov	r2, r4
 8007136:	4621      	mov	r1, r4
 8007138:	4630      	mov	r0, r6
 800713a:	f7ff ff26 	bl	8006f8a <__multiply>
 800713e:	6020      	str	r0, [r4, #0]
 8007140:	f8c0 8000 	str.w	r8, [r0]
 8007144:	4604      	mov	r4, r0
 8007146:	e7e4      	b.n	8007112 <__pow5mult+0x5a>
 8007148:	4638      	mov	r0, r7
 800714a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714e:	bf00      	nop
 8007150:	08007d70 	.word	0x08007d70

08007154 <__lshift>:
 8007154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	460c      	mov	r4, r1
 800715a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6849      	ldr	r1, [r1, #4]
 8007162:	eb0a 0903 	add.w	r9, sl, r3
 8007166:	68a3      	ldr	r3, [r4, #8]
 8007168:	4607      	mov	r7, r0
 800716a:	4616      	mov	r6, r2
 800716c:	f109 0501 	add.w	r5, r9, #1
 8007170:	42ab      	cmp	r3, r5
 8007172:	db32      	blt.n	80071da <__lshift+0x86>
 8007174:	4638      	mov	r0, r7
 8007176:	f7ff fded 	bl	8006d54 <_Balloc>
 800717a:	2300      	movs	r3, #0
 800717c:	4680      	mov	r8, r0
 800717e:	f100 0114 	add.w	r1, r0, #20
 8007182:	461a      	mov	r2, r3
 8007184:	4553      	cmp	r3, sl
 8007186:	db2b      	blt.n	80071e0 <__lshift+0x8c>
 8007188:	6920      	ldr	r0, [r4, #16]
 800718a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800718e:	f104 0314 	add.w	r3, r4, #20
 8007192:	f016 021f 	ands.w	r2, r6, #31
 8007196:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800719a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800719e:	d025      	beq.n	80071ec <__lshift+0x98>
 80071a0:	f1c2 0e20 	rsb	lr, r2, #32
 80071a4:	2000      	movs	r0, #0
 80071a6:	681e      	ldr	r6, [r3, #0]
 80071a8:	468a      	mov	sl, r1
 80071aa:	4096      	lsls	r6, r2
 80071ac:	4330      	orrs	r0, r6
 80071ae:	f84a 0b04 	str.w	r0, [sl], #4
 80071b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80071b6:	459c      	cmp	ip, r3
 80071b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80071bc:	d814      	bhi.n	80071e8 <__lshift+0x94>
 80071be:	6048      	str	r0, [r1, #4]
 80071c0:	b108      	cbz	r0, 80071c6 <__lshift+0x72>
 80071c2:	f109 0502 	add.w	r5, r9, #2
 80071c6:	3d01      	subs	r5, #1
 80071c8:	4638      	mov	r0, r7
 80071ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80071ce:	4621      	mov	r1, r4
 80071d0:	f7ff fdf4 	bl	8006dbc <_Bfree>
 80071d4:	4640      	mov	r0, r8
 80071d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071da:	3101      	adds	r1, #1
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	e7c7      	b.n	8007170 <__lshift+0x1c>
 80071e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80071e4:	3301      	adds	r3, #1
 80071e6:	e7cd      	b.n	8007184 <__lshift+0x30>
 80071e8:	4651      	mov	r1, sl
 80071ea:	e7dc      	b.n	80071a6 <__lshift+0x52>
 80071ec:	3904      	subs	r1, #4
 80071ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80071f6:	459c      	cmp	ip, r3
 80071f8:	d8f9      	bhi.n	80071ee <__lshift+0x9a>
 80071fa:	e7e4      	b.n	80071c6 <__lshift+0x72>

080071fc <__mcmp>:
 80071fc:	6903      	ldr	r3, [r0, #16]
 80071fe:	690a      	ldr	r2, [r1, #16]
 8007200:	1a9b      	subs	r3, r3, r2
 8007202:	b530      	push	{r4, r5, lr}
 8007204:	d10c      	bne.n	8007220 <__mcmp+0x24>
 8007206:	0092      	lsls	r2, r2, #2
 8007208:	3014      	adds	r0, #20
 800720a:	3114      	adds	r1, #20
 800720c:	1884      	adds	r4, r0, r2
 800720e:	4411      	add	r1, r2
 8007210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007218:	4295      	cmp	r5, r2
 800721a:	d003      	beq.n	8007224 <__mcmp+0x28>
 800721c:	d305      	bcc.n	800722a <__mcmp+0x2e>
 800721e:	2301      	movs	r3, #1
 8007220:	4618      	mov	r0, r3
 8007222:	bd30      	pop	{r4, r5, pc}
 8007224:	42a0      	cmp	r0, r4
 8007226:	d3f3      	bcc.n	8007210 <__mcmp+0x14>
 8007228:	e7fa      	b.n	8007220 <__mcmp+0x24>
 800722a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800722e:	e7f7      	b.n	8007220 <__mcmp+0x24>

08007230 <__mdiff>:
 8007230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	460d      	mov	r5, r1
 8007236:	4607      	mov	r7, r0
 8007238:	4611      	mov	r1, r2
 800723a:	4628      	mov	r0, r5
 800723c:	4614      	mov	r4, r2
 800723e:	f7ff ffdd 	bl	80071fc <__mcmp>
 8007242:	1e06      	subs	r6, r0, #0
 8007244:	d108      	bne.n	8007258 <__mdiff+0x28>
 8007246:	4631      	mov	r1, r6
 8007248:	4638      	mov	r0, r7
 800724a:	f7ff fd83 	bl	8006d54 <_Balloc>
 800724e:	2301      	movs	r3, #1
 8007250:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007258:	bfa4      	itt	ge
 800725a:	4623      	movge	r3, r4
 800725c:	462c      	movge	r4, r5
 800725e:	4638      	mov	r0, r7
 8007260:	6861      	ldr	r1, [r4, #4]
 8007262:	bfa6      	itte	ge
 8007264:	461d      	movge	r5, r3
 8007266:	2600      	movge	r6, #0
 8007268:	2601      	movlt	r6, #1
 800726a:	f7ff fd73 	bl	8006d54 <_Balloc>
 800726e:	692b      	ldr	r3, [r5, #16]
 8007270:	60c6      	str	r6, [r0, #12]
 8007272:	6926      	ldr	r6, [r4, #16]
 8007274:	f105 0914 	add.w	r9, r5, #20
 8007278:	f104 0214 	add.w	r2, r4, #20
 800727c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007280:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007284:	f100 0514 	add.w	r5, r0, #20
 8007288:	f04f 0e00 	mov.w	lr, #0
 800728c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007290:	f859 4b04 	ldr.w	r4, [r9], #4
 8007294:	fa1e f18a 	uxtah	r1, lr, sl
 8007298:	b2a3      	uxth	r3, r4
 800729a:	1ac9      	subs	r1, r1, r3
 800729c:	0c23      	lsrs	r3, r4, #16
 800729e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80072a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80072a6:	b289      	uxth	r1, r1
 80072a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80072ac:	45c8      	cmp	r8, r9
 80072ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80072b2:	4694      	mov	ip, r2
 80072b4:	f845 3b04 	str.w	r3, [r5], #4
 80072b8:	d8e8      	bhi.n	800728c <__mdiff+0x5c>
 80072ba:	45bc      	cmp	ip, r7
 80072bc:	d304      	bcc.n	80072c8 <__mdiff+0x98>
 80072be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80072c2:	b183      	cbz	r3, 80072e6 <__mdiff+0xb6>
 80072c4:	6106      	str	r6, [r0, #16]
 80072c6:	e7c5      	b.n	8007254 <__mdiff+0x24>
 80072c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80072cc:	fa1e f381 	uxtah	r3, lr, r1
 80072d0:	141a      	asrs	r2, r3, #16
 80072d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80072e0:	f845 3b04 	str.w	r3, [r5], #4
 80072e4:	e7e9      	b.n	80072ba <__mdiff+0x8a>
 80072e6:	3e01      	subs	r6, #1
 80072e8:	e7e9      	b.n	80072be <__mdiff+0x8e>
	...

080072ec <__ulp>:
 80072ec:	4b12      	ldr	r3, [pc, #72]	; (8007338 <__ulp+0x4c>)
 80072ee:	ee10 2a90 	vmov	r2, s1
 80072f2:	401a      	ands	r2, r3
 80072f4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	dd04      	ble.n	8007306 <__ulp+0x1a>
 80072fc:	2000      	movs	r0, #0
 80072fe:	4619      	mov	r1, r3
 8007300:	ec41 0b10 	vmov	d0, r0, r1
 8007304:	4770      	bx	lr
 8007306:	425b      	negs	r3, r3
 8007308:	151b      	asrs	r3, r3, #20
 800730a:	2b13      	cmp	r3, #19
 800730c:	f04f 0000 	mov.w	r0, #0
 8007310:	f04f 0100 	mov.w	r1, #0
 8007314:	dc04      	bgt.n	8007320 <__ulp+0x34>
 8007316:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800731a:	fa42 f103 	asr.w	r1, r2, r3
 800731e:	e7ef      	b.n	8007300 <__ulp+0x14>
 8007320:	3b14      	subs	r3, #20
 8007322:	2b1e      	cmp	r3, #30
 8007324:	f04f 0201 	mov.w	r2, #1
 8007328:	bfda      	itte	le
 800732a:	f1c3 031f 	rsble	r3, r3, #31
 800732e:	fa02 f303 	lslle.w	r3, r2, r3
 8007332:	4613      	movgt	r3, r2
 8007334:	4618      	mov	r0, r3
 8007336:	e7e3      	b.n	8007300 <__ulp+0x14>
 8007338:	7ff00000 	.word	0x7ff00000

0800733c <__b2d>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	6905      	ldr	r5, [r0, #16]
 8007340:	f100 0714 	add.w	r7, r0, #20
 8007344:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007348:	1f2e      	subs	r6, r5, #4
 800734a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800734e:	4620      	mov	r0, r4
 8007350:	f7ff fdc4 	bl	8006edc <__hi0bits>
 8007354:	f1c0 0320 	rsb	r3, r0, #32
 8007358:	280a      	cmp	r0, #10
 800735a:	600b      	str	r3, [r1, #0]
 800735c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80073d4 <__b2d+0x98>
 8007360:	dc14      	bgt.n	800738c <__b2d+0x50>
 8007362:	f1c0 0e0b 	rsb	lr, r0, #11
 8007366:	fa24 f10e 	lsr.w	r1, r4, lr
 800736a:	42b7      	cmp	r7, r6
 800736c:	ea41 030c 	orr.w	r3, r1, ip
 8007370:	bf34      	ite	cc
 8007372:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007376:	2100      	movcs	r1, #0
 8007378:	3015      	adds	r0, #21
 800737a:	fa04 f000 	lsl.w	r0, r4, r0
 800737e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007382:	ea40 0201 	orr.w	r2, r0, r1
 8007386:	ec43 2b10 	vmov	d0, r2, r3
 800738a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738c:	42b7      	cmp	r7, r6
 800738e:	bf3a      	itte	cc
 8007390:	f1a5 0608 	subcc.w	r6, r5, #8
 8007394:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007398:	2100      	movcs	r1, #0
 800739a:	380b      	subs	r0, #11
 800739c:	d015      	beq.n	80073ca <__b2d+0x8e>
 800739e:	4084      	lsls	r4, r0
 80073a0:	f1c0 0520 	rsb	r5, r0, #32
 80073a4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80073a8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80073ac:	42be      	cmp	r6, r7
 80073ae:	fa21 fc05 	lsr.w	ip, r1, r5
 80073b2:	ea44 030c 	orr.w	r3, r4, ip
 80073b6:	bf8c      	ite	hi
 80073b8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80073bc:	2400      	movls	r4, #0
 80073be:	fa01 f000 	lsl.w	r0, r1, r0
 80073c2:	40ec      	lsrs	r4, r5
 80073c4:	ea40 0204 	orr.w	r2, r0, r4
 80073c8:	e7dd      	b.n	8007386 <__b2d+0x4a>
 80073ca:	ea44 030c 	orr.w	r3, r4, ip
 80073ce:	460a      	mov	r2, r1
 80073d0:	e7d9      	b.n	8007386 <__b2d+0x4a>
 80073d2:	bf00      	nop
 80073d4:	3ff00000 	.word	0x3ff00000

080073d8 <__d2b>:
 80073d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	460e      	mov	r6, r1
 80073de:	2101      	movs	r1, #1
 80073e0:	ec59 8b10 	vmov	r8, r9, d0
 80073e4:	4615      	mov	r5, r2
 80073e6:	f7ff fcb5 	bl	8006d54 <_Balloc>
 80073ea:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80073ee:	4607      	mov	r7, r0
 80073f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073f4:	bb34      	cbnz	r4, 8007444 <__d2b+0x6c>
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	f1b8 0300 	subs.w	r3, r8, #0
 80073fc:	d027      	beq.n	800744e <__d2b+0x76>
 80073fe:	a802      	add	r0, sp, #8
 8007400:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007404:	f7ff fd89 	bl	8006f1a <__lo0bits>
 8007408:	9900      	ldr	r1, [sp, #0]
 800740a:	b1f0      	cbz	r0, 800744a <__d2b+0x72>
 800740c:	9a01      	ldr	r2, [sp, #4]
 800740e:	f1c0 0320 	rsb	r3, r0, #32
 8007412:	fa02 f303 	lsl.w	r3, r2, r3
 8007416:	430b      	orrs	r3, r1
 8007418:	40c2      	lsrs	r2, r0
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	9201      	str	r2, [sp, #4]
 800741e:	9b01      	ldr	r3, [sp, #4]
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	bf14      	ite	ne
 8007426:	2102      	movne	r1, #2
 8007428:	2101      	moveq	r1, #1
 800742a:	6139      	str	r1, [r7, #16]
 800742c:	b1c4      	cbz	r4, 8007460 <__d2b+0x88>
 800742e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007432:	4404      	add	r4, r0
 8007434:	6034      	str	r4, [r6, #0]
 8007436:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800743a:	6028      	str	r0, [r5, #0]
 800743c:	4638      	mov	r0, r7
 800743e:	b003      	add	sp, #12
 8007440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007448:	e7d5      	b.n	80073f6 <__d2b+0x1e>
 800744a:	6179      	str	r1, [r7, #20]
 800744c:	e7e7      	b.n	800741e <__d2b+0x46>
 800744e:	a801      	add	r0, sp, #4
 8007450:	f7ff fd63 	bl	8006f1a <__lo0bits>
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	2101      	movs	r1, #1
 800745a:	6139      	str	r1, [r7, #16]
 800745c:	3020      	adds	r0, #32
 800745e:	e7e5      	b.n	800742c <__d2b+0x54>
 8007460:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007464:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007468:	6030      	str	r0, [r6, #0]
 800746a:	6918      	ldr	r0, [r3, #16]
 800746c:	f7ff fd36 	bl	8006edc <__hi0bits>
 8007470:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007474:	e7e1      	b.n	800743a <__d2b+0x62>

08007476 <__ratio>:
 8007476:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	4688      	mov	r8, r1
 800747c:	4669      	mov	r1, sp
 800747e:	4681      	mov	r9, r0
 8007480:	f7ff ff5c 	bl	800733c <__b2d>
 8007484:	a901      	add	r1, sp, #4
 8007486:	4640      	mov	r0, r8
 8007488:	ec57 6b10 	vmov	r6, r7, d0
 800748c:	f7ff ff56 	bl	800733c <__b2d>
 8007490:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007494:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007498:	eba3 0c02 	sub.w	ip, r3, r2
 800749c:	e9dd 3200 	ldrd	r3, r2, [sp]
 80074a0:	1a9b      	subs	r3, r3, r2
 80074a2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80074a6:	ec5b ab10 	vmov	sl, fp, d0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bfce      	itee	gt
 80074ae:	463a      	movgt	r2, r7
 80074b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80074b4:	465a      	movle	r2, fp
 80074b6:	4659      	mov	r1, fp
 80074b8:	463d      	mov	r5, r7
 80074ba:	bfd4      	ite	le
 80074bc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80074c0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80074c4:	4630      	mov	r0, r6
 80074c6:	ee10 2a10 	vmov	r2, s0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4629      	mov	r1, r5
 80074ce:	f7f9 f9c5 	bl	800085c <__aeabi_ddiv>
 80074d2:	ec41 0b10 	vmov	d0, r0, r1
 80074d6:	b003      	add	sp, #12
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074dc <__copybits>:
 80074dc:	3901      	subs	r1, #1
 80074de:	b510      	push	{r4, lr}
 80074e0:	1149      	asrs	r1, r1, #5
 80074e2:	6914      	ldr	r4, [r2, #16]
 80074e4:	3101      	adds	r1, #1
 80074e6:	f102 0314 	add.w	r3, r2, #20
 80074ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80074f2:	42a3      	cmp	r3, r4
 80074f4:	4602      	mov	r2, r0
 80074f6:	d303      	bcc.n	8007500 <__copybits+0x24>
 80074f8:	2300      	movs	r3, #0
 80074fa:	428a      	cmp	r2, r1
 80074fc:	d305      	bcc.n	800750a <__copybits+0x2e>
 80074fe:	bd10      	pop	{r4, pc}
 8007500:	f853 2b04 	ldr.w	r2, [r3], #4
 8007504:	f840 2b04 	str.w	r2, [r0], #4
 8007508:	e7f3      	b.n	80074f2 <__copybits+0x16>
 800750a:	f842 3b04 	str.w	r3, [r2], #4
 800750e:	e7f4      	b.n	80074fa <__copybits+0x1e>

08007510 <__any_on>:
 8007510:	f100 0214 	add.w	r2, r0, #20
 8007514:	6900      	ldr	r0, [r0, #16]
 8007516:	114b      	asrs	r3, r1, #5
 8007518:	4298      	cmp	r0, r3
 800751a:	b510      	push	{r4, lr}
 800751c:	db11      	blt.n	8007542 <__any_on+0x32>
 800751e:	dd0a      	ble.n	8007536 <__any_on+0x26>
 8007520:	f011 011f 	ands.w	r1, r1, #31
 8007524:	d007      	beq.n	8007536 <__any_on+0x26>
 8007526:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800752a:	fa24 f001 	lsr.w	r0, r4, r1
 800752e:	fa00 f101 	lsl.w	r1, r0, r1
 8007532:	428c      	cmp	r4, r1
 8007534:	d10b      	bne.n	800754e <__any_on+0x3e>
 8007536:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800753a:	4293      	cmp	r3, r2
 800753c:	d803      	bhi.n	8007546 <__any_on+0x36>
 800753e:	2000      	movs	r0, #0
 8007540:	bd10      	pop	{r4, pc}
 8007542:	4603      	mov	r3, r0
 8007544:	e7f7      	b.n	8007536 <__any_on+0x26>
 8007546:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800754a:	2900      	cmp	r1, #0
 800754c:	d0f5      	beq.n	800753a <__any_on+0x2a>
 800754e:	2001      	movs	r0, #1
 8007550:	e7f6      	b.n	8007540 <__any_on+0x30>

08007552 <_calloc_r>:
 8007552:	b538      	push	{r3, r4, r5, lr}
 8007554:	fb02 f401 	mul.w	r4, r2, r1
 8007558:	4621      	mov	r1, r4
 800755a:	f000 f857 	bl	800760c <_malloc_r>
 800755e:	4605      	mov	r5, r0
 8007560:	b118      	cbz	r0, 800756a <_calloc_r+0x18>
 8007562:	4622      	mov	r2, r4
 8007564:	2100      	movs	r1, #0
 8007566:	f7fc fd49 	bl	8003ffc <memset>
 800756a:	4628      	mov	r0, r5
 800756c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007570 <_free_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4605      	mov	r5, r0
 8007574:	2900      	cmp	r1, #0
 8007576:	d045      	beq.n	8007604 <_free_r+0x94>
 8007578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800757c:	1f0c      	subs	r4, r1, #4
 800757e:	2b00      	cmp	r3, #0
 8007580:	bfb8      	it	lt
 8007582:	18e4      	addlt	r4, r4, r3
 8007584:	f000 fa29 	bl	80079da <__malloc_lock>
 8007588:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <_free_r+0x98>)
 800758a:	6813      	ldr	r3, [r2, #0]
 800758c:	4610      	mov	r0, r2
 800758e:	b933      	cbnz	r3, 800759e <_free_r+0x2e>
 8007590:	6063      	str	r3, [r4, #4]
 8007592:	6014      	str	r4, [r2, #0]
 8007594:	4628      	mov	r0, r5
 8007596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800759a:	f000 ba1f 	b.w	80079dc <__malloc_unlock>
 800759e:	42a3      	cmp	r3, r4
 80075a0:	d90c      	bls.n	80075bc <_free_r+0x4c>
 80075a2:	6821      	ldr	r1, [r4, #0]
 80075a4:	1862      	adds	r2, r4, r1
 80075a6:	4293      	cmp	r3, r2
 80075a8:	bf04      	itt	eq
 80075aa:	681a      	ldreq	r2, [r3, #0]
 80075ac:	685b      	ldreq	r3, [r3, #4]
 80075ae:	6063      	str	r3, [r4, #4]
 80075b0:	bf04      	itt	eq
 80075b2:	1852      	addeq	r2, r2, r1
 80075b4:	6022      	streq	r2, [r4, #0]
 80075b6:	6004      	str	r4, [r0, #0]
 80075b8:	e7ec      	b.n	8007594 <_free_r+0x24>
 80075ba:	4613      	mov	r3, r2
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	b10a      	cbz	r2, 80075c4 <_free_r+0x54>
 80075c0:	42a2      	cmp	r2, r4
 80075c2:	d9fa      	bls.n	80075ba <_free_r+0x4a>
 80075c4:	6819      	ldr	r1, [r3, #0]
 80075c6:	1858      	adds	r0, r3, r1
 80075c8:	42a0      	cmp	r0, r4
 80075ca:	d10b      	bne.n	80075e4 <_free_r+0x74>
 80075cc:	6820      	ldr	r0, [r4, #0]
 80075ce:	4401      	add	r1, r0
 80075d0:	1858      	adds	r0, r3, r1
 80075d2:	4282      	cmp	r2, r0
 80075d4:	6019      	str	r1, [r3, #0]
 80075d6:	d1dd      	bne.n	8007594 <_free_r+0x24>
 80075d8:	6810      	ldr	r0, [r2, #0]
 80075da:	6852      	ldr	r2, [r2, #4]
 80075dc:	605a      	str	r2, [r3, #4]
 80075de:	4401      	add	r1, r0
 80075e0:	6019      	str	r1, [r3, #0]
 80075e2:	e7d7      	b.n	8007594 <_free_r+0x24>
 80075e4:	d902      	bls.n	80075ec <_free_r+0x7c>
 80075e6:	230c      	movs	r3, #12
 80075e8:	602b      	str	r3, [r5, #0]
 80075ea:	e7d3      	b.n	8007594 <_free_r+0x24>
 80075ec:	6820      	ldr	r0, [r4, #0]
 80075ee:	1821      	adds	r1, r4, r0
 80075f0:	428a      	cmp	r2, r1
 80075f2:	bf04      	itt	eq
 80075f4:	6811      	ldreq	r1, [r2, #0]
 80075f6:	6852      	ldreq	r2, [r2, #4]
 80075f8:	6062      	str	r2, [r4, #4]
 80075fa:	bf04      	itt	eq
 80075fc:	1809      	addeq	r1, r1, r0
 80075fe:	6021      	streq	r1, [r4, #0]
 8007600:	605c      	str	r4, [r3, #4]
 8007602:	e7c7      	b.n	8007594 <_free_r+0x24>
 8007604:	bd38      	pop	{r3, r4, r5, pc}
 8007606:	bf00      	nop
 8007608:	2000027c 	.word	0x2000027c

0800760c <_malloc_r>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	1ccd      	adds	r5, r1, #3
 8007610:	f025 0503 	bic.w	r5, r5, #3
 8007614:	3508      	adds	r5, #8
 8007616:	2d0c      	cmp	r5, #12
 8007618:	bf38      	it	cc
 800761a:	250c      	movcc	r5, #12
 800761c:	2d00      	cmp	r5, #0
 800761e:	4606      	mov	r6, r0
 8007620:	db01      	blt.n	8007626 <_malloc_r+0x1a>
 8007622:	42a9      	cmp	r1, r5
 8007624:	d903      	bls.n	800762e <_malloc_r+0x22>
 8007626:	230c      	movs	r3, #12
 8007628:	6033      	str	r3, [r6, #0]
 800762a:	2000      	movs	r0, #0
 800762c:	bd70      	pop	{r4, r5, r6, pc}
 800762e:	f000 f9d4 	bl	80079da <__malloc_lock>
 8007632:	4a21      	ldr	r2, [pc, #132]	; (80076b8 <_malloc_r+0xac>)
 8007634:	6814      	ldr	r4, [r2, #0]
 8007636:	4621      	mov	r1, r4
 8007638:	b991      	cbnz	r1, 8007660 <_malloc_r+0x54>
 800763a:	4c20      	ldr	r4, [pc, #128]	; (80076bc <_malloc_r+0xb0>)
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	b91b      	cbnz	r3, 8007648 <_malloc_r+0x3c>
 8007640:	4630      	mov	r0, r6
 8007642:	f000 f98f 	bl	8007964 <_sbrk_r>
 8007646:	6020      	str	r0, [r4, #0]
 8007648:	4629      	mov	r1, r5
 800764a:	4630      	mov	r0, r6
 800764c:	f000 f98a 	bl	8007964 <_sbrk_r>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d124      	bne.n	800769e <_malloc_r+0x92>
 8007654:	230c      	movs	r3, #12
 8007656:	6033      	str	r3, [r6, #0]
 8007658:	4630      	mov	r0, r6
 800765a:	f000 f9bf 	bl	80079dc <__malloc_unlock>
 800765e:	e7e4      	b.n	800762a <_malloc_r+0x1e>
 8007660:	680b      	ldr	r3, [r1, #0]
 8007662:	1b5b      	subs	r3, r3, r5
 8007664:	d418      	bmi.n	8007698 <_malloc_r+0x8c>
 8007666:	2b0b      	cmp	r3, #11
 8007668:	d90f      	bls.n	800768a <_malloc_r+0x7e>
 800766a:	600b      	str	r3, [r1, #0]
 800766c:	50cd      	str	r5, [r1, r3]
 800766e:	18cc      	adds	r4, r1, r3
 8007670:	4630      	mov	r0, r6
 8007672:	f000 f9b3 	bl	80079dc <__malloc_unlock>
 8007676:	f104 000b 	add.w	r0, r4, #11
 800767a:	1d23      	adds	r3, r4, #4
 800767c:	f020 0007 	bic.w	r0, r0, #7
 8007680:	1ac3      	subs	r3, r0, r3
 8007682:	d0d3      	beq.n	800762c <_malloc_r+0x20>
 8007684:	425a      	negs	r2, r3
 8007686:	50e2      	str	r2, [r4, r3]
 8007688:	e7d0      	b.n	800762c <_malloc_r+0x20>
 800768a:	428c      	cmp	r4, r1
 800768c:	684b      	ldr	r3, [r1, #4]
 800768e:	bf16      	itet	ne
 8007690:	6063      	strne	r3, [r4, #4]
 8007692:	6013      	streq	r3, [r2, #0]
 8007694:	460c      	movne	r4, r1
 8007696:	e7eb      	b.n	8007670 <_malloc_r+0x64>
 8007698:	460c      	mov	r4, r1
 800769a:	6849      	ldr	r1, [r1, #4]
 800769c:	e7cc      	b.n	8007638 <_malloc_r+0x2c>
 800769e:	1cc4      	adds	r4, r0, #3
 80076a0:	f024 0403 	bic.w	r4, r4, #3
 80076a4:	42a0      	cmp	r0, r4
 80076a6:	d005      	beq.n	80076b4 <_malloc_r+0xa8>
 80076a8:	1a21      	subs	r1, r4, r0
 80076aa:	4630      	mov	r0, r6
 80076ac:	f000 f95a 	bl	8007964 <_sbrk_r>
 80076b0:	3001      	adds	r0, #1
 80076b2:	d0cf      	beq.n	8007654 <_malloc_r+0x48>
 80076b4:	6025      	str	r5, [r4, #0]
 80076b6:	e7db      	b.n	8007670 <_malloc_r+0x64>
 80076b8:	2000027c 	.word	0x2000027c
 80076bc:	20000280 	.word	0x20000280

080076c0 <__ssputs_r>:
 80076c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c4:	688e      	ldr	r6, [r1, #8]
 80076c6:	429e      	cmp	r6, r3
 80076c8:	4682      	mov	sl, r0
 80076ca:	460c      	mov	r4, r1
 80076cc:	4690      	mov	r8, r2
 80076ce:	4699      	mov	r9, r3
 80076d0:	d837      	bhi.n	8007742 <__ssputs_r+0x82>
 80076d2:	898a      	ldrh	r2, [r1, #12]
 80076d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076d8:	d031      	beq.n	800773e <__ssputs_r+0x7e>
 80076da:	6825      	ldr	r5, [r4, #0]
 80076dc:	6909      	ldr	r1, [r1, #16]
 80076de:	1a6f      	subs	r7, r5, r1
 80076e0:	6965      	ldr	r5, [r4, #20]
 80076e2:	2302      	movs	r3, #2
 80076e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80076ec:	f109 0301 	add.w	r3, r9, #1
 80076f0:	443b      	add	r3, r7
 80076f2:	429d      	cmp	r5, r3
 80076f4:	bf38      	it	cc
 80076f6:	461d      	movcc	r5, r3
 80076f8:	0553      	lsls	r3, r2, #21
 80076fa:	d530      	bpl.n	800775e <__ssputs_r+0x9e>
 80076fc:	4629      	mov	r1, r5
 80076fe:	f7ff ff85 	bl	800760c <_malloc_r>
 8007702:	4606      	mov	r6, r0
 8007704:	b950      	cbnz	r0, 800771c <__ssputs_r+0x5c>
 8007706:	230c      	movs	r3, #12
 8007708:	f8ca 3000 	str.w	r3, [sl]
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771c:	463a      	mov	r2, r7
 800771e:	6921      	ldr	r1, [r4, #16]
 8007720:	f7fc fc61 	bl	8003fe6 <memcpy>
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800772a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800772e:	81a3      	strh	r3, [r4, #12]
 8007730:	6126      	str	r6, [r4, #16]
 8007732:	6165      	str	r5, [r4, #20]
 8007734:	443e      	add	r6, r7
 8007736:	1bed      	subs	r5, r5, r7
 8007738:	6026      	str	r6, [r4, #0]
 800773a:	60a5      	str	r5, [r4, #8]
 800773c:	464e      	mov	r6, r9
 800773e:	454e      	cmp	r6, r9
 8007740:	d900      	bls.n	8007744 <__ssputs_r+0x84>
 8007742:	464e      	mov	r6, r9
 8007744:	4632      	mov	r2, r6
 8007746:	4641      	mov	r1, r8
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	f000 f92d 	bl	80079a8 <memmove>
 800774e:	68a3      	ldr	r3, [r4, #8]
 8007750:	1b9b      	subs	r3, r3, r6
 8007752:	60a3      	str	r3, [r4, #8]
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	441e      	add	r6, r3
 8007758:	6026      	str	r6, [r4, #0]
 800775a:	2000      	movs	r0, #0
 800775c:	e7dc      	b.n	8007718 <__ssputs_r+0x58>
 800775e:	462a      	mov	r2, r5
 8007760:	f000 f93d 	bl	80079de <_realloc_r>
 8007764:	4606      	mov	r6, r0
 8007766:	2800      	cmp	r0, #0
 8007768:	d1e2      	bne.n	8007730 <__ssputs_r+0x70>
 800776a:	6921      	ldr	r1, [r4, #16]
 800776c:	4650      	mov	r0, sl
 800776e:	f7ff feff 	bl	8007570 <_free_r>
 8007772:	e7c8      	b.n	8007706 <__ssputs_r+0x46>

08007774 <_svfiprintf_r>:
 8007774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	461d      	mov	r5, r3
 800777a:	898b      	ldrh	r3, [r1, #12]
 800777c:	061f      	lsls	r7, r3, #24
 800777e:	b09d      	sub	sp, #116	; 0x74
 8007780:	4680      	mov	r8, r0
 8007782:	460c      	mov	r4, r1
 8007784:	4616      	mov	r6, r2
 8007786:	d50f      	bpl.n	80077a8 <_svfiprintf_r+0x34>
 8007788:	690b      	ldr	r3, [r1, #16]
 800778a:	b96b      	cbnz	r3, 80077a8 <_svfiprintf_r+0x34>
 800778c:	2140      	movs	r1, #64	; 0x40
 800778e:	f7ff ff3d 	bl	800760c <_malloc_r>
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	6120      	str	r0, [r4, #16]
 8007796:	b928      	cbnz	r0, 80077a4 <_svfiprintf_r+0x30>
 8007798:	230c      	movs	r3, #12
 800779a:	f8c8 3000 	str.w	r3, [r8]
 800779e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077a2:	e0c8      	b.n	8007936 <_svfiprintf_r+0x1c2>
 80077a4:	2340      	movs	r3, #64	; 0x40
 80077a6:	6163      	str	r3, [r4, #20]
 80077a8:	2300      	movs	r3, #0
 80077aa:	9309      	str	r3, [sp, #36]	; 0x24
 80077ac:	2320      	movs	r3, #32
 80077ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077b2:	2330      	movs	r3, #48	; 0x30
 80077b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077b8:	9503      	str	r5, [sp, #12]
 80077ba:	f04f 0b01 	mov.w	fp, #1
 80077be:	4637      	mov	r7, r6
 80077c0:	463d      	mov	r5, r7
 80077c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80077c6:	b10b      	cbz	r3, 80077cc <_svfiprintf_r+0x58>
 80077c8:	2b25      	cmp	r3, #37	; 0x25
 80077ca:	d13e      	bne.n	800784a <_svfiprintf_r+0xd6>
 80077cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80077d0:	d00b      	beq.n	80077ea <_svfiprintf_r+0x76>
 80077d2:	4653      	mov	r3, sl
 80077d4:	4632      	mov	r2, r6
 80077d6:	4621      	mov	r1, r4
 80077d8:	4640      	mov	r0, r8
 80077da:	f7ff ff71 	bl	80076c0 <__ssputs_r>
 80077de:	3001      	adds	r0, #1
 80077e0:	f000 80a4 	beq.w	800792c <_svfiprintf_r+0x1b8>
 80077e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e6:	4453      	add	r3, sl
 80077e8:	9309      	str	r3, [sp, #36]	; 0x24
 80077ea:	783b      	ldrb	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 809d 	beq.w	800792c <_svfiprintf_r+0x1b8>
 80077f2:	2300      	movs	r3, #0
 80077f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	9307      	str	r3, [sp, #28]
 8007800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007804:	931a      	str	r3, [sp, #104]	; 0x68
 8007806:	462f      	mov	r7, r5
 8007808:	2205      	movs	r2, #5
 800780a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800780e:	4850      	ldr	r0, [pc, #320]	; (8007950 <_svfiprintf_r+0x1dc>)
 8007810:	f7f8 fcee 	bl	80001f0 <memchr>
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	b9d0      	cbnz	r0, 800784e <_svfiprintf_r+0xda>
 8007818:	06d9      	lsls	r1, r3, #27
 800781a:	bf44      	itt	mi
 800781c:	2220      	movmi	r2, #32
 800781e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007822:	071a      	lsls	r2, r3, #28
 8007824:	bf44      	itt	mi
 8007826:	222b      	movmi	r2, #43	; 0x2b
 8007828:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800782c:	782a      	ldrb	r2, [r5, #0]
 800782e:	2a2a      	cmp	r2, #42	; 0x2a
 8007830:	d015      	beq.n	800785e <_svfiprintf_r+0xea>
 8007832:	9a07      	ldr	r2, [sp, #28]
 8007834:	462f      	mov	r7, r5
 8007836:	2000      	movs	r0, #0
 8007838:	250a      	movs	r5, #10
 800783a:	4639      	mov	r1, r7
 800783c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007840:	3b30      	subs	r3, #48	; 0x30
 8007842:	2b09      	cmp	r3, #9
 8007844:	d94d      	bls.n	80078e2 <_svfiprintf_r+0x16e>
 8007846:	b1b8      	cbz	r0, 8007878 <_svfiprintf_r+0x104>
 8007848:	e00f      	b.n	800786a <_svfiprintf_r+0xf6>
 800784a:	462f      	mov	r7, r5
 800784c:	e7b8      	b.n	80077c0 <_svfiprintf_r+0x4c>
 800784e:	4a40      	ldr	r2, [pc, #256]	; (8007950 <_svfiprintf_r+0x1dc>)
 8007850:	1a80      	subs	r0, r0, r2
 8007852:	fa0b f000 	lsl.w	r0, fp, r0
 8007856:	4318      	orrs	r0, r3
 8007858:	9004      	str	r0, [sp, #16]
 800785a:	463d      	mov	r5, r7
 800785c:	e7d3      	b.n	8007806 <_svfiprintf_r+0x92>
 800785e:	9a03      	ldr	r2, [sp, #12]
 8007860:	1d11      	adds	r1, r2, #4
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	9103      	str	r1, [sp, #12]
 8007866:	2a00      	cmp	r2, #0
 8007868:	db01      	blt.n	800786e <_svfiprintf_r+0xfa>
 800786a:	9207      	str	r2, [sp, #28]
 800786c:	e004      	b.n	8007878 <_svfiprintf_r+0x104>
 800786e:	4252      	negs	r2, r2
 8007870:	f043 0302 	orr.w	r3, r3, #2
 8007874:	9207      	str	r2, [sp, #28]
 8007876:	9304      	str	r3, [sp, #16]
 8007878:	783b      	ldrb	r3, [r7, #0]
 800787a:	2b2e      	cmp	r3, #46	; 0x2e
 800787c:	d10c      	bne.n	8007898 <_svfiprintf_r+0x124>
 800787e:	787b      	ldrb	r3, [r7, #1]
 8007880:	2b2a      	cmp	r3, #42	; 0x2a
 8007882:	d133      	bne.n	80078ec <_svfiprintf_r+0x178>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	1d1a      	adds	r2, r3, #4
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	9203      	str	r2, [sp, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	bfb8      	it	lt
 8007890:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007894:	3702      	adds	r7, #2
 8007896:	9305      	str	r3, [sp, #20]
 8007898:	4d2e      	ldr	r5, [pc, #184]	; (8007954 <_svfiprintf_r+0x1e0>)
 800789a:	7839      	ldrb	r1, [r7, #0]
 800789c:	2203      	movs	r2, #3
 800789e:	4628      	mov	r0, r5
 80078a0:	f7f8 fca6 	bl	80001f0 <memchr>
 80078a4:	b138      	cbz	r0, 80078b6 <_svfiprintf_r+0x142>
 80078a6:	2340      	movs	r3, #64	; 0x40
 80078a8:	1b40      	subs	r0, r0, r5
 80078aa:	fa03 f000 	lsl.w	r0, r3, r0
 80078ae:	9b04      	ldr	r3, [sp, #16]
 80078b0:	4303      	orrs	r3, r0
 80078b2:	3701      	adds	r7, #1
 80078b4:	9304      	str	r3, [sp, #16]
 80078b6:	7839      	ldrb	r1, [r7, #0]
 80078b8:	4827      	ldr	r0, [pc, #156]	; (8007958 <_svfiprintf_r+0x1e4>)
 80078ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078be:	2206      	movs	r2, #6
 80078c0:	1c7e      	adds	r6, r7, #1
 80078c2:	f7f8 fc95 	bl	80001f0 <memchr>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d038      	beq.n	800793c <_svfiprintf_r+0x1c8>
 80078ca:	4b24      	ldr	r3, [pc, #144]	; (800795c <_svfiprintf_r+0x1e8>)
 80078cc:	bb13      	cbnz	r3, 8007914 <_svfiprintf_r+0x1a0>
 80078ce:	9b03      	ldr	r3, [sp, #12]
 80078d0:	3307      	adds	r3, #7
 80078d2:	f023 0307 	bic.w	r3, r3, #7
 80078d6:	3308      	adds	r3, #8
 80078d8:	9303      	str	r3, [sp, #12]
 80078da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078dc:	444b      	add	r3, r9
 80078de:	9309      	str	r3, [sp, #36]	; 0x24
 80078e0:	e76d      	b.n	80077be <_svfiprintf_r+0x4a>
 80078e2:	fb05 3202 	mla	r2, r5, r2, r3
 80078e6:	2001      	movs	r0, #1
 80078e8:	460f      	mov	r7, r1
 80078ea:	e7a6      	b.n	800783a <_svfiprintf_r+0xc6>
 80078ec:	2300      	movs	r3, #0
 80078ee:	3701      	adds	r7, #1
 80078f0:	9305      	str	r3, [sp, #20]
 80078f2:	4619      	mov	r1, r3
 80078f4:	250a      	movs	r5, #10
 80078f6:	4638      	mov	r0, r7
 80078f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078fc:	3a30      	subs	r2, #48	; 0x30
 80078fe:	2a09      	cmp	r2, #9
 8007900:	d903      	bls.n	800790a <_svfiprintf_r+0x196>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0c8      	beq.n	8007898 <_svfiprintf_r+0x124>
 8007906:	9105      	str	r1, [sp, #20]
 8007908:	e7c6      	b.n	8007898 <_svfiprintf_r+0x124>
 800790a:	fb05 2101 	mla	r1, r5, r1, r2
 800790e:	2301      	movs	r3, #1
 8007910:	4607      	mov	r7, r0
 8007912:	e7f0      	b.n	80078f6 <_svfiprintf_r+0x182>
 8007914:	ab03      	add	r3, sp, #12
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	4622      	mov	r2, r4
 800791a:	4b11      	ldr	r3, [pc, #68]	; (8007960 <_svfiprintf_r+0x1ec>)
 800791c:	a904      	add	r1, sp, #16
 800791e:	4640      	mov	r0, r8
 8007920:	f7fc fc08 	bl	8004134 <_printf_float>
 8007924:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007928:	4681      	mov	r9, r0
 800792a:	d1d6      	bne.n	80078da <_svfiprintf_r+0x166>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	065b      	lsls	r3, r3, #25
 8007930:	f53f af35 	bmi.w	800779e <_svfiprintf_r+0x2a>
 8007934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007936:	b01d      	add	sp, #116	; 0x74
 8007938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793c:	ab03      	add	r3, sp, #12
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4622      	mov	r2, r4
 8007942:	4b07      	ldr	r3, [pc, #28]	; (8007960 <_svfiprintf_r+0x1ec>)
 8007944:	a904      	add	r1, sp, #16
 8007946:	4640      	mov	r0, r8
 8007948:	f7fc feaa 	bl	80046a0 <_printf_i>
 800794c:	e7ea      	b.n	8007924 <_svfiprintf_r+0x1b0>
 800794e:	bf00      	nop
 8007950:	08007d7c 	.word	0x08007d7c
 8007954:	08007d82 	.word	0x08007d82
 8007958:	08007d86 	.word	0x08007d86
 800795c:	08004135 	.word	0x08004135
 8007960:	080076c1 	.word	0x080076c1

08007964 <_sbrk_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4c06      	ldr	r4, [pc, #24]	; (8007980 <_sbrk_r+0x1c>)
 8007968:	2300      	movs	r3, #0
 800796a:	4605      	mov	r5, r0
 800796c:	4608      	mov	r0, r1
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	f7fc f922 	bl	8003bb8 <_sbrk>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_sbrk_r+0x1a>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	b103      	cbz	r3, 800797e <_sbrk_r+0x1a>
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	20000a28 	.word	0x20000a28

08007984 <strncmp>:
 8007984:	b510      	push	{r4, lr}
 8007986:	b16a      	cbz	r2, 80079a4 <strncmp+0x20>
 8007988:	3901      	subs	r1, #1
 800798a:	1884      	adds	r4, r0, r2
 800798c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007990:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007994:	4293      	cmp	r3, r2
 8007996:	d103      	bne.n	80079a0 <strncmp+0x1c>
 8007998:	42a0      	cmp	r0, r4
 800799a:	d001      	beq.n	80079a0 <strncmp+0x1c>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f5      	bne.n	800798c <strncmp+0x8>
 80079a0:	1a98      	subs	r0, r3, r2
 80079a2:	bd10      	pop	{r4, pc}
 80079a4:	4610      	mov	r0, r2
 80079a6:	e7fc      	b.n	80079a2 <strncmp+0x1e>

080079a8 <memmove>:
 80079a8:	4288      	cmp	r0, r1
 80079aa:	b510      	push	{r4, lr}
 80079ac:	eb01 0302 	add.w	r3, r1, r2
 80079b0:	d807      	bhi.n	80079c2 <memmove+0x1a>
 80079b2:	1e42      	subs	r2, r0, #1
 80079b4:	4299      	cmp	r1, r3
 80079b6:	d00a      	beq.n	80079ce <memmove+0x26>
 80079b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80079c0:	e7f8      	b.n	80079b4 <memmove+0xc>
 80079c2:	4283      	cmp	r3, r0
 80079c4:	d9f5      	bls.n	80079b2 <memmove+0xa>
 80079c6:	1881      	adds	r1, r0, r2
 80079c8:	1ad2      	subs	r2, r2, r3
 80079ca:	42d3      	cmn	r3, r2
 80079cc:	d100      	bne.n	80079d0 <memmove+0x28>
 80079ce:	bd10      	pop	{r4, pc}
 80079d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80079d8:	e7f7      	b.n	80079ca <memmove+0x22>

080079da <__malloc_lock>:
 80079da:	4770      	bx	lr

080079dc <__malloc_unlock>:
 80079dc:	4770      	bx	lr

080079de <_realloc_r>:
 80079de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e0:	4607      	mov	r7, r0
 80079e2:	4614      	mov	r4, r2
 80079e4:	460e      	mov	r6, r1
 80079e6:	b921      	cbnz	r1, 80079f2 <_realloc_r+0x14>
 80079e8:	4611      	mov	r1, r2
 80079ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079ee:	f7ff be0d 	b.w	800760c <_malloc_r>
 80079f2:	b922      	cbnz	r2, 80079fe <_realloc_r+0x20>
 80079f4:	f7ff fdbc 	bl	8007570 <_free_r>
 80079f8:	4625      	mov	r5, r4
 80079fa:	4628      	mov	r0, r5
 80079fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079fe:	f000 f814 	bl	8007a2a <_malloc_usable_size_r>
 8007a02:	42a0      	cmp	r0, r4
 8007a04:	d20f      	bcs.n	8007a26 <_realloc_r+0x48>
 8007a06:	4621      	mov	r1, r4
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f7ff fdff 	bl	800760c <_malloc_r>
 8007a0e:	4605      	mov	r5, r0
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d0f2      	beq.n	80079fa <_realloc_r+0x1c>
 8007a14:	4631      	mov	r1, r6
 8007a16:	4622      	mov	r2, r4
 8007a18:	f7fc fae5 	bl	8003fe6 <memcpy>
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f7ff fda6 	bl	8007570 <_free_r>
 8007a24:	e7e9      	b.n	80079fa <_realloc_r+0x1c>
 8007a26:	4635      	mov	r5, r6
 8007a28:	e7e7      	b.n	80079fa <_realloc_r+0x1c>

08007a2a <_malloc_usable_size_r>:
 8007a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a2e:	1f18      	subs	r0, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bfbc      	itt	lt
 8007a34:	580b      	ldrlt	r3, [r1, r0]
 8007a36:	18c0      	addlt	r0, r0, r3
 8007a38:	4770      	bx	lr
	...

08007a3c <_init>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	bf00      	nop
 8007a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a42:	bc08      	pop	{r3}
 8007a44:	469e      	mov	lr, r3
 8007a46:	4770      	bx	lr

08007a48 <_fini>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr
