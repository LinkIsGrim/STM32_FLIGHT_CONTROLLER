
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  0800e348  0800e348  0001e348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebd0  0800ebd0  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebd0  0800ebd0  0001ebd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebd8  0800ebd8  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebd8  0800ebd8  0001ebd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebdc  0800ebdc  0001ebdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800ebe0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048fc  20000268  0800ee48  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004b64  0800ee48  00024b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002df34  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b9e  00000000  00000000  0004e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00014109  00000000  00000000  00053d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d10  00000000  00000000  00067e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001da0  00000000  00000000  00069b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001d0fb  00000000  00000000  0006b928  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001b36b  00000000  00000000  00088a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009e304  00000000  00000000  000a3d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00142092  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000681c  00000000  00000000  00142110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e330 	.word	0x0800e330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800e330 	.word	0x0800e330

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f98:	b500      	push	{lr}
 8000f9a:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f9c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000fa0:	f88d 200d 	strb.w	r2, [sp, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2302      	movs	r3, #2
 8000faa:	aa03      	add	r2, sp, #12
 8000fac:	4601      	mov	r1, r0
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <writeByte+0x24>)
 8000fb0:	f002 ff52 	bl	8003e58 <HAL_I2C_Master_Transmit>
}
 8000fb4:	b005      	add	sp, #20
 8000fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fba:	bf00      	nop
 8000fbc:	20004394 	.word	0x20004394

08000fc0 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	b084      	sub	sp, #16
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000fc4:	a904      	add	r1, sp, #16
 8000fc6:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000fca:	4605      	mov	r5, r0
 8000fcc:	4c09      	ldr	r4, [pc, #36]	; (8000ff4 <readByte+0x34>)
 8000fce:	260a      	movs	r6, #10
 8000fd0:	9600      	str	r6, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f002 ff3d 	bl	8003e58 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8000fde:	9600      	str	r6, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	aa03      	add	r2, sp, #12
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f002 fff0 	bl	8003fcc <HAL_I2C_Master_Receive>

	return data[0];
}
 8000fec:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	20004394 	.word	0x20004394

08000ff8 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000ff8:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	21d0      	movs	r1, #208	; 0xd0
 8001000:	f003 f94c 	bl	800429c <HAL_I2C_IsDeviceReady>
 8001004:	b100      	cbz	r0, 8001008 <imu_init+0x10>
 8001006:	e7fe      	b.n	8001006 <imu_init+0xe>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8001008:	2120      	movs	r1, #32
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <imu_init+0x3c>)
 800100c:	f002 fc38 	bl	8003880 <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001010:	2275      	movs	r2, #117	; 0x75
 8001012:	21d1      	movs	r1, #209	; 0xd1
 8001014:	20d0      	movs	r0, #208	; 0xd0
 8001016:	f7ff ffd3 	bl	8000fc0 <readByte>
 800101a:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 800101c:	2871      	cmp	r0, #113	; 0x71
 800101e:	d106      	bne.n	800102e <imu_init+0x36>
		printf("MPU9250 online..\r\n");
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <imu_init+0x40>)
 8001022:	f009 fe19 	bl	800ac58 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8001026:	4621      	mov	r1, r4
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <imu_init+0x44>)
 800102a:	f009 fda1 	bl	800ab70 <iprintf>
}
 800102e:	2000      	movs	r0, #0
 8001030:	bd10      	pop	{r4, pc}
 8001032:	bf00      	nop
 8001034:	40020000 	.word	0x40020000
 8001038:	0800e380 	.word	0x0800e380
 800103c:	0800e394 	.word	0x0800e394

08001040 <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 8001040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	4688      	mov	r8, r1
 8001048:	461c      	mov	r4, r3
 800104a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 800104c:	a908      	add	r1, sp, #32
 800104e:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001052:	4e0e      	ldr	r6, [pc, #56]	; (800108c <readBytes+0x4c>)
 8001054:	270a      	movs	r7, #10
 8001056:	9700      	str	r7, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	460a      	mov	r2, r1
 800105c:	4601      	mov	r1, r0
 800105e:	4630      	mov	r0, r6
 8001060:	f002 fefa 	bl	8003e58 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001064:	9700      	str	r7, [sp, #0]
 8001066:	4623      	mov	r3, r4
 8001068:	aa04      	add	r2, sp, #16
 800106a:	4641      	mov	r1, r8
 800106c:	4630      	mov	r0, r6
 800106e:	f002 ffad 	bl	8003fcc <HAL_I2C_Master_Receive>

	for (int ii = 0; ii < count; ii++) {
 8001072:	2300      	movs	r3, #0
 8001074:	e005      	b.n	8001082 <readBytes+0x42>
		dest[ii] = data[ii];
 8001076:	aa08      	add	r2, sp, #32
 8001078:	441a      	add	r2, r3
 800107a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800107e:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 8001080:	3301      	adds	r3, #1
 8001082:	429c      	cmp	r4, r3
 8001084:	dcf7      	bgt.n	8001076 <readBytes+0x36>
	}
}
 8001086:	b008      	add	sp, #32
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800108c:	20004394 	.word	0x20004394

08001090 <getMres>:

void getMres() {

	switch (Mscale) {
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <getMres+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b113      	cbz	r3, 800109c <getMres+0xc>
 8001096:	2b01      	cmp	r3, #1
 8001098:	d004      	beq.n	80010a4 <getMres+0x14>
 800109a:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <getMres+0x20>)
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <getMres+0x24>)
 80010a0:	601a      	str	r2, [r3, #0]
		break;
 80010a2:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <getMres+0x20>)
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <getMres+0x28>)
 80010a8:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010aa:	4770      	bx	lr
 80010ac:	20000001 	.word	0x20000001
 80010b0:	2000442c 	.word	0x2000442c
 80010b4:	40a4d84e 	.word	0x40a4d84e
 80010b8:	3fa4d84e 	.word	0x3fa4d84e

080010bc <getGres>:

void getGres() {
	switch (Gscale) {
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <getGres+0x30>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d812      	bhi.n	80010ea <getGres+0x2e>
 80010c4:	e8df f003 	tbb	[pc, r3]
 80010c8:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <getGres+0x34>)
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <getGres+0x38>)
 80010d0:	601a      	str	r2, [r3, #0]
		break;
 80010d2:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <getGres+0x34>)
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <getGres+0x3c>)
 80010d8:	601a      	str	r2, [r3, #0]
		break;
 80010da:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <getGres+0x34>)
 80010de:	4a07      	ldr	r2, [pc, #28]	; (80010fc <getGres+0x40>)
 80010e0:	601a      	str	r2, [r3, #0]
		break;
 80010e2:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <getGres+0x34>)
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <getGres+0x44>)
 80010e8:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010ea:	4770      	bx	lr
 80010ec:	20000285 	.word	0x20000285
 80010f0:	20004410 	.word	0x20004410
 80010f4:	3bfa0000 	.word	0x3bfa0000
 80010f8:	3c7a0000 	.word	0x3c7a0000
 80010fc:	3cfa0000 	.word	0x3cfa0000
 8001100:	3d7a0000 	.word	0x3d7a0000

08001104 <getAres>:

void getAres() {
	switch (Ascale) {
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <getAres+0x38>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d816      	bhi.n	800113a <getAres+0x36>
 800110c:	e8df f003 	tbb	[pc, r3]
 8001110:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <getAres+0x3c>)
 8001116:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800111a:	601a      	str	r2, [r3, #0]
		break;
 800111c:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <getAres+0x3c>)
 8001120:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001124:	601a      	str	r2, [r3, #0]
		break;
 8001126:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <getAres+0x3c>)
 800112a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800112e:	601a      	str	r2, [r3, #0]
		break;
 8001130:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 8001132:	4b03      	ldr	r3, [pc, #12]	; (8001140 <getAres+0x3c>)
 8001134:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001138:	601a      	str	r2, [r3, #0]
		break;
	}
}
 800113a:	4770      	bx	lr
 800113c:	20000284 	.word	0x20000284
 8001140:	20004404 	.word	0x20004404

08001144 <readAccelData>:

void readAccelData(int16_t * destination) {
 8001144:	b510      	push	{r4, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800114a:	ab02      	add	r3, sp, #8
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2306      	movs	r3, #6
 8001150:	223b      	movs	r2, #59	; 0x3b
 8001152:	21d1      	movs	r1, #209	; 0xd1
 8001154:	20d0      	movs	r0, #208	; 0xd0
 8001156:	f7ff ff73 	bl	8001040 <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800115a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800115e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001166:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001168:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800116c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001170:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001174:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001176:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800117a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800117e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001182:	80a3      	strh	r3, [r4, #4]
}
 8001184:	b004      	add	sp, #16
 8001186:	bd10      	pop	{r4, pc}

08001188 <readGyroData>:

void readGyroData(int16_t * destination) {
 8001188:	b510      	push	{r4, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800118e:	ab02      	add	r3, sp, #8
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2306      	movs	r3, #6
 8001194:	2243      	movs	r2, #67	; 0x43
 8001196:	21d1      	movs	r1, #209	; 0xd1
 8001198:	20d0      	movs	r0, #208	; 0xd0
 800119a:	f7ff ff51 	bl	8001040 <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800119e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80011a2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80011a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011aa:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80011ac:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80011b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011b8:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011ba:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011be:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011c6:	80a3      	strh	r3, [r4, #4]
}
 80011c8:	b004      	add	sp, #16
 80011ca:	bd10      	pop	{r4, pc}

080011cc <readMagData>:

void readMagData(int16_t * destination) {
 80011cc:	b510      	push	{r4, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 80011d2:	2202      	movs	r2, #2
 80011d4:	2119      	movs	r1, #25
 80011d6:	2018      	movs	r0, #24
 80011d8:	f7ff fef2 	bl	8000fc0 <readByte>
 80011dc:	f010 0f01 	tst.w	r0, #1
 80011e0:	d101      	bne.n	80011e6 <readMagData+0x1a>
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
		}
	}
}
 80011e2:	b004      	add	sp, #16
 80011e4:	bd10      	pop	{r4, pc}
		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7, &rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
 80011e6:	ab02      	add	r3, sp, #8
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2307      	movs	r3, #7
 80011ec:	2203      	movs	r2, #3
 80011ee:	2119      	movs	r1, #25
 80011f0:	2018      	movs	r0, #24
 80011f2:	f7ff ff25 	bl	8001040 <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 80011f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 80011fa:	f013 0f08 	tst.w	r3, #8
 80011fe:	d1f0      	bne.n	80011e2 <readMagData+0x16>
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 8001200:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001204:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001208:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 800120c:	8023      	strh	r3, [r4, #0]
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 800120e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001212:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 800121a:	8063      	strh	r3, [r4, #2]
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 800121c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001220:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001224:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 8001228:	80a3      	strh	r3, [r4, #4]
}
 800122a:	e7da      	b.n	80011e2 <readMagData+0x16>

0800122c <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 800122c:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	216b      	movs	r1, #107	; 0x6b
 8001232:	20d0      	movs	r0, #208	; 0xd0
 8001234:	f7ff feb0 	bl	8000f98 <writeByte>
	HAL_Delay(100);
 8001238:	2064      	movs	r0, #100	; 0x64
 800123a:	f001 fed5 	bl	8002fe8 <HAL_Delay>
}
 800123e:	bd08      	pop	{r3, pc}

08001240 <initAK8963>:

void initAK8963(float * destination) {
 8001240:	b510      	push	{r4, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001246:	2200      	movs	r2, #0
 8001248:	210a      	movs	r1, #10
 800124a:	2018      	movs	r0, #24
 800124c:	f7ff fea4 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001250:	200a      	movs	r0, #10
 8001252:	f001 fec9 	bl	8002fe8 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001256:	220f      	movs	r2, #15
 8001258:	210a      	movs	r1, #10
 800125a:	2018      	movs	r0, #24
 800125c:	f7ff fe9c 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001260:	200a      	movs	r0, #10
 8001262:	f001 fec1 	bl	8002fe8 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 8001266:	ab03      	add	r3, sp, #12
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2303      	movs	r3, #3
 800126c:	2210      	movs	r2, #16
 800126e:	2119      	movs	r1, #25
 8001270:	2018      	movs	r0, #24
 8001272:	f7ff fee5 	bl	8001040 <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001276:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800127a:	3b80      	subs	r3, #128	; 0x80
 800127c:	ee07 3a10 	vmov	s14, r3
 8001280:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001284:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80012fc <initAK8963+0xbc>
 8001288:	ee27 7a06 	vmul.f32	s14, s14, s12
 800128c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001290:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001294:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001298:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800129c:	3b80      	subs	r3, #128	; 0x80
 800129e:	ee07 3a10 	vmov	s14, r3
 80012a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80012aa:	ee37 7a26 	vadd.f32	s14, s14, s13
 80012ae:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 80012b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012b6:	3b80      	subs	r3, #128	; 0x80
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80012c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012c8:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012cc:	2200      	movs	r2, #0
 80012ce:	210a      	movs	r1, #10
 80012d0:	2018      	movs	r0, #24
 80012d2:	f7ff fe61 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 80012d6:	200a      	movs	r0, #10
 80012d8:	f001 fe86 	bl	8002fe8 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <initAK8963+0xc0>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <initAK8963+0xc4>)
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	210a      	movs	r1, #10
 80012ec:	2018      	movs	r0, #24
 80012ee:	f7ff fe53 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 80012f2:	200a      	movs	r0, #10
 80012f4:	f001 fe78 	bl	8002fe8 <HAL_Delay>
}
 80012f8:	b004      	add	sp, #16
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	3b800000 	.word	0x3b800000
 8001300:	20000001 	.word	0x20000001
 8001304:	20000000 	.word	0x20000000

08001308 <initMPU9250>:
	    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
	    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];

}

void initMPU9250() {
 8001308:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 800130a:	2200      	movs	r2, #0
 800130c:	216b      	movs	r1, #107	; 0x6b
 800130e:	20d0      	movs	r0, #208	; 0xd0
 8001310:	f7ff fe42 	bl	8000f98 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f001 fe67 	bl	8002fe8 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800131a:	2201      	movs	r2, #1
 800131c:	216b      	movs	r1, #107	; 0x6b
 800131e:	20d0      	movs	r0, #208	; 0xd0
 8001320:	f7ff fe3a 	bl	8000f98 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 8001324:	2200      	movs	r2, #0
 8001326:	211a      	movs	r1, #26
 8001328:	20d0      	movs	r0, #208	; 0xd0
 800132a:	f7ff fe35 	bl	8000f98 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 800132e:	2200      	movs	r2, #0
 8001330:	2119      	movs	r1, #25
 8001332:	20d0      	movs	r0, #208	; 0xd0
 8001334:	f7ff fe30 	bl	8000f98 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001338:	221b      	movs	r2, #27
 800133a:	21d1      	movs	r1, #209	; 0xd1
 800133c:	4608      	mov	r0, r1
 800133e:	f7ff fe3f 	bl	8000fc0 <readByte>
 8001342:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001344:	f000 021f 	and.w	r2, r0, #31
 8001348:	211b      	movs	r1, #27
 800134a:	20d0      	movs	r0, #208	; 0xd0
 800134c:	f7ff fe24 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001350:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001354:	211b      	movs	r1, #27
 8001356:	20d0      	movs	r0, #208	; 0xd0
 8001358:	f7ff fe1e 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <initMPU9250+0xd8>)
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	211b      	movs	r1, #27
 8001368:	20d0      	movs	r0, #208	; 0xd0
 800136a:	f7ff fe15 	bl	8000f98 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 800136e:	221c      	movs	r2, #28
 8001370:	21d1      	movs	r1, #209	; 0xd1
 8001372:	4608      	mov	r0, r1
 8001374:	f7ff fe24 	bl	8000fc0 <readByte>
 8001378:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 800137a:	f000 021f 	and.w	r2, r0, #31
 800137e:	211c      	movs	r1, #28
 8001380:	20d0      	movs	r0, #208	; 0xd0
 8001382:	f7ff fe09 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001386:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 800138a:	211c      	movs	r1, #28
 800138c:	20d0      	movs	r0, #208	; 0xd0
 800138e:	f7ff fe03 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <initMPU9250+0xdc>)
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	211c      	movs	r1, #28
 800139e:	20d0      	movs	r0, #208	; 0xd0
 80013a0:	f7ff fdfa 	bl	8000f98 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 80013a4:	221d      	movs	r2, #29
 80013a6:	21d1      	movs	r1, #209	; 0xd1
 80013a8:	4608      	mov	r0, r1
 80013aa:	f7ff fe09 	bl	8000fc0 <readByte>
 80013ae:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80013b0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013b4:	211d      	movs	r1, #29
 80013b6:	20d0      	movs	r0, #208	; 0xd0
 80013b8:	f7ff fdee 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80013bc:	f044 0203 	orr.w	r2, r4, #3
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	211d      	movs	r1, #29
 80013c4:	20d0      	movs	r0, #208	; 0xd0
 80013c6:	f7ff fde7 	bl	8000f98 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013ca:	2222      	movs	r2, #34	; 0x22
 80013cc:	2137      	movs	r1, #55	; 0x37
 80013ce:	20d0      	movs	r0, #208	; 0xd0
 80013d0:	f7ff fde2 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013d4:	2201      	movs	r2, #1
 80013d6:	2138      	movs	r1, #56	; 0x38
 80013d8:	20d0      	movs	r0, #208	; 0xd0
 80013da:	f7ff fddd 	bl	8000f98 <writeByte>
}
 80013de:	bd10      	pop	{r4, pc}
 80013e0:	20000285 	.word	0x20000285
 80013e4:	20000284 	.word	0x20000284

080013e8 <MPU9250SelfTest>:
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
}

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	ed2d 8b08 	vpush	{d8-d11}
 80013f0:	b093      	sub	sp, #76	; 0x4c
 80013f2:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 80013f4:	2400      	movs	r4, #0
 80013f6:	9410      	str	r4, [sp, #64]	; 0x40
 80013f8:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80013fc:	4622      	mov	r2, r4
 80013fe:	2119      	movs	r1, #25
 8001400:	20d0      	movs	r0, #208	; 0xd0
 8001402:	f7ff fdc9 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001406:	2202      	movs	r2, #2
 8001408:	211a      	movs	r1, #26
 800140a:	20d0      	movs	r0, #208	; 0xd0
 800140c:	f7ff fdc4 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 8001410:	2201      	movs	r2, #1
 8001412:	211b      	movs	r1, #27
 8001414:	20d0      	movs	r0, #208	; 0xd0
 8001416:	f7ff fdbf 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800141a:	2202      	movs	r2, #2
 800141c:	211d      	movs	r1, #29
 800141e:	20d0      	movs	r0, #208	; 0xd0
 8001420:	f7ff fdba 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 8001424:	2201      	movs	r2, #1
 8001426:	211c      	movs	r1, #28
 8001428:	20d0      	movs	r0, #208	; 0xd0
 800142a:	f7ff fdb5 	bl	8000f98 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800142e:	e051      	b.n	80014d4 <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001430:	ae10      	add	r6, sp, #64	; 0x40
 8001432:	9600      	str	r6, [sp, #0]
 8001434:	2306      	movs	r3, #6
 8001436:	223b      	movs	r2, #59	; 0x3b
 8001438:	21d1      	movs	r1, #209	; 0xd1
 800143a:	20d0      	movs	r0, #208	; 0xd0
 800143c:	f7ff fe00 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001440:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001444:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001448:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800144c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8001450:	4413      	add	r3, r2
 8001452:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001456:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800145a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800145e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001462:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8001466:	4413      	add	r3, r2
 8001468:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800146c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001470:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001474:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001478:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800147c:	4413      	add	r3, r2
 800147e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001482:	9600      	str	r6, [sp, #0]
 8001484:	2306      	movs	r3, #6
 8001486:	2243      	movs	r2, #67	; 0x43
 8001488:	21d1      	movs	r1, #209	; 0xd1
 800148a:	20d0      	movs	r0, #208	; 0xd0
 800148c:	f7ff fdd8 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001490:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001494:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001498:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800149c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80014a0:	4413      	add	r3, r2
 80014a2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80014a6:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80014aa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80014ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014b2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80014b6:	4413      	add	r3, r2
 80014b8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80014bc:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80014c0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80014c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014c8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80014cc:	4413      	add	r3, r2
 80014ce:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80014d2:	3401      	adds	r4, #1
 80014d4:	2cc7      	cmp	r4, #199	; 0xc7
 80014d6:	ddab      	ble.n	8001430 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80014d8:	2400      	movs	r4, #0
 80014da:	e016      	b.n	800150a <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 80014dc:	ab12      	add	r3, sp, #72	; 0x48
 80014de:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80014e2:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 80014e6:	48c0      	ldr	r0, [pc, #768]	; (80017e8 <MPU9250SelfTest+0x400>)
 80014e8:	fb80 6302 	smull	r6, r3, r0, r2
 80014ec:	17d2      	asrs	r2, r2, #31
 80014ee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80014f2:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 80014f6:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 80014fa:	fb80 2003 	smull	r2, r0, r0, r3
 80014fe:	17db      	asrs	r3, r3, #31
 8001500:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001504:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001508:	3401      	adds	r4, #1
 800150a:	2c02      	cmp	r4, #2
 800150c:	dde6      	ble.n	80014dc <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 800150e:	22e0      	movs	r2, #224	; 0xe0
 8001510:	211c      	movs	r1, #28
 8001512:	20d0      	movs	r0, #208	; 0xd0
 8001514:	f7ff fd40 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001518:	22e0      	movs	r2, #224	; 0xe0
 800151a:	211b      	movs	r1, #27
 800151c:	20d0      	movs	r0, #208	; 0xd0
 800151e:	f7ff fd3b 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001522:	2019      	movs	r0, #25
 8001524:	f001 fd60 	bl	8002fe8 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001528:	2400      	movs	r4, #0
 800152a:	e051      	b.n	80015d0 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800152c:	ae10      	add	r6, sp, #64	; 0x40
 800152e:	9600      	str	r6, [sp, #0]
 8001530:	2306      	movs	r3, #6
 8001532:	223b      	movs	r2, #59	; 0x3b
 8001534:	21d1      	movs	r1, #209	; 0xd1
 8001536:	20d0      	movs	r0, #208	; 0xd0
 8001538:	f7ff fd82 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800153c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001540:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001548:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800154c:	4413      	add	r3, r2
 800154e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001552:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001556:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800155a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800155e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8001562:	4413      	add	r3, r2
 8001564:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001568:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800156c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001570:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001574:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8001578:	4413      	add	r3, r2
 800157a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800157e:	9600      	str	r6, [sp, #0]
 8001580:	2306      	movs	r3, #6
 8001582:	2243      	movs	r2, #67	; 0x43
 8001584:	21d1      	movs	r1, #209	; 0xd1
 8001586:	20d0      	movs	r0, #208	; 0xd0
 8001588:	f7ff fd5a 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800158c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001590:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001598:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800159c:	4413      	add	r3, r2
 800159e:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80015a2:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80015a6:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80015aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015ae:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80015b2:	4413      	add	r3, r2
 80015b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80015b8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80015bc:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80015c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80015c8:	4413      	add	r3, r2
 80015ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80015ce:	3401      	adds	r4, #1
 80015d0:	2cc7      	cmp	r4, #199	; 0xc7
 80015d2:	ddab      	ble.n	800152c <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80015d4:	2400      	movs	r4, #0
 80015d6:	e016      	b.n	8001606 <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 80015d8:	ab12      	add	r3, sp, #72	; 0x48
 80015da:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80015de:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 80015e2:	4881      	ldr	r0, [pc, #516]	; (80017e8 <MPU9250SelfTest+0x400>)
 80015e4:	fb80 6302 	smull	r6, r3, r0, r2
 80015e8:	17d2      	asrs	r2, r2, #31
 80015ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80015ee:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 80015f2:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 80015f6:	fb80 2003 	smull	r2, r0, r0, r3
 80015fa:	17db      	asrs	r3, r3, #31
 80015fc:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001600:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001604:	3401      	adds	r4, #1
 8001606:	2c02      	cmp	r4, #2
 8001608:	dde6      	ble.n	80015d8 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 800160a:	2200      	movs	r2, #0
 800160c:	211c      	movs	r1, #28
 800160e:	20d0      	movs	r0, #208	; 0xd0
 8001610:	f7ff fcc2 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 8001614:	2200      	movs	r2, #0
 8001616:	211b      	movs	r1, #27
 8001618:	20d0      	movs	r0, #208	; 0xd0
 800161a:	f7ff fcbd 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 800161e:	2019      	movs	r0, #25
 8001620:	f001 fce2 	bl	8002fe8 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001624:	220d      	movs	r2, #13
 8001626:	21d1      	movs	r1, #209	; 0xd1
 8001628:	20d0      	movs	r0, #208	; 0xd0
 800162a:	f7ff fcc9 	bl	8000fc0 <readByte>
 800162e:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001632:	220e      	movs	r2, #14
 8001634:	21d1      	movs	r1, #209	; 0xd1
 8001636:	20d0      	movs	r0, #208	; 0xd0
 8001638:	f7ff fcc2 	bl	8000fc0 <readByte>
 800163c:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001640:	220f      	movs	r2, #15
 8001642:	21d1      	movs	r1, #209	; 0xd1
 8001644:	20d0      	movs	r0, #208	; 0xd0
 8001646:	f7ff fcbb 	bl	8000fc0 <readByte>
 800164a:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800164e:	2200      	movs	r2, #0
 8001650:	21d1      	movs	r1, #209	; 0xd1
 8001652:	20d0      	movs	r0, #208	; 0xd0
 8001654:	f7ff fcb4 	bl	8000fc0 <readByte>
 8001658:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800165c:	2201      	movs	r2, #1
 800165e:	21d1      	movs	r1, #209	; 0xd1
 8001660:	20d0      	movs	r0, #208	; 0xd0
 8001662:	f7ff fcad 	bl	8000fc0 <readByte>
 8001666:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800166a:	2202      	movs	r2, #2
 800166c:	21d1      	movs	r1, #209	; 0xd1
 800166e:	20d0      	movs	r0, #208	; 0xd0
 8001670:	f7ff fca6 	bl	8000fc0 <readByte>
 8001674:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001678:	eef8 7a48 	vcvt.f32.u32	s15, s16
 800167c:	ee17 0a90 	vmov	r0, s15
 8001680:	f7fe ff6a 	bl	8000558 <__aeabi_f2d>
 8001684:	2200      	movs	r2, #0
 8001686:	4b59      	ldr	r3, [pc, #356]	; (80017ec <MPU9250SelfTest+0x404>)
 8001688:	f7fe fe06 	bl	8000298 <__aeabi_dsub>
 800168c:	ed9f 8b52 	vldr	d8, [pc, #328]	; 80017d8 <MPU9250SelfTest+0x3f0>
 8001690:	ec41 0b11 	vmov	d1, r0, r1
 8001694:	eeb0 0a48 	vmov.f32	s0, s16
 8001698:	eef0 0a68 	vmov.f32	s1, s17
 800169c:	f007 f85c 	bl	8008758 <pow>
 80016a0:	a34f      	add	r3, pc, #316	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	ec51 0b10 	vmov	r0, r1, d0
 80016aa:	f7fe ffad 	bl	8000608 <__aeabi_dmul>
 80016ae:	f7ff faa3 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 80016b2:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 80016b4:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 80016b8:	ee17 0a90 	vmov	r0, s15
 80016bc:	f7fe ff4c 	bl	8000558 <__aeabi_f2d>
 80016c0:	2200      	movs	r2, #0
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <MPU9250SelfTest+0x404>)
 80016c4:	f7fe fde8 	bl	8000298 <__aeabi_dsub>
 80016c8:	ec41 0b11 	vmov	d1, r0, r1
 80016cc:	eeb0 0a48 	vmov.f32	s0, s16
 80016d0:	eef0 0a68 	vmov.f32	s1, s17
 80016d4:	f007 f840 	bl	8008758 <pow>
 80016d8:	a341      	add	r3, pc, #260	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	ec51 0b10 	vmov	r0, r1, d0
 80016e2:	f7fe ff91 	bl	8000608 <__aeabi_dmul>
 80016e6:	f7ff fa87 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 80016ea:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 80016ec:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 80016f0:	ee17 0a90 	vmov	r0, s15
 80016f4:	f7fe ff30 	bl	8000558 <__aeabi_f2d>
 80016f8:	2200      	movs	r2, #0
 80016fa:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <MPU9250SelfTest+0x404>)
 80016fc:	f7fe fdcc 	bl	8000298 <__aeabi_dsub>
 8001700:	ec41 0b11 	vmov	d1, r0, r1
 8001704:	eeb0 0a48 	vmov.f32	s0, s16
 8001708:	eef0 0a68 	vmov.f32	s1, s17
 800170c:	f007 f824 	bl	8008758 <pow>
 8001710:	a333      	add	r3, pc, #204	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	ec51 0b10 	vmov	r0, r1, d0
 800171a:	f7fe ff75 	bl	8000608 <__aeabi_dmul>
 800171e:	f7ff fa6b 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 8001722:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8001724:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe ff14 	bl	8000558 <__aeabi_f2d>
 8001730:	2200      	movs	r2, #0
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <MPU9250SelfTest+0x404>)
 8001734:	f7fe fdb0 	bl	8000298 <__aeabi_dsub>
 8001738:	ec41 0b11 	vmov	d1, r0, r1
 800173c:	eeb0 0a48 	vmov.f32	s0, s16
 8001740:	eef0 0a68 	vmov.f32	s1, s17
 8001744:	f007 f808 	bl	8008758 <pow>
 8001748:	a325      	add	r3, pc, #148	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	ec51 0b10 	vmov	r0, r1, d0
 8001752:	f7fe ff59 	bl	8000608 <__aeabi_dmul>
 8001756:	f7ff fa4f 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 800175a:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 800175c:	eef8 7a69 	vcvt.f32.u32	s15, s19
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe fef8 	bl	8000558 <__aeabi_f2d>
 8001768:	2200      	movs	r2, #0
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <MPU9250SelfTest+0x404>)
 800176c:	f7fe fd94 	bl	8000298 <__aeabi_dsub>
 8001770:	ec41 0b11 	vmov	d1, r0, r1
 8001774:	eeb0 0a48 	vmov.f32	s0, s16
 8001778:	eef0 0a68 	vmov.f32	s1, s17
 800177c:	f006 ffec 	bl	8008758 <pow>
 8001780:	a317      	add	r3, pc, #92	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	ec51 0b10 	vmov	r0, r1, d0
 800178a:	f7fe ff3d 	bl	8000608 <__aeabi_dmul>
 800178e:	f7ff fa33 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001792:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001794:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001798:	ee17 0a90 	vmov	r0, s15
 800179c:	f7fe fedc 	bl	8000558 <__aeabi_f2d>
 80017a0:	2200      	movs	r2, #0
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MPU9250SelfTest+0x404>)
 80017a4:	f7fe fd78 	bl	8000298 <__aeabi_dsub>
 80017a8:	ec41 0b11 	vmov	d1, r0, r1
 80017ac:	eeb0 0a48 	vmov.f32	s0, s16
 80017b0:	eef0 0a68 	vmov.f32	s1, s17
 80017b4:	f006 ffd0 	bl	8008758 <pow>
 80017b8:	a309      	add	r3, pc, #36	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	ec51 0b10 	vmov	r0, r1, d0
 80017c2:	f7fe ff21 	bl	8000608 <__aeabi_dmul>
 80017c6:	f7ff fa17 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 80017ca:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80017cc:	f04f 0800 	mov.w	r8, #0
 80017d0:	e05f      	b.n	8001892 <MPU9250SelfTest+0x4aa>
 80017d2:	bf00      	nop
 80017d4:	f3af 8000 	nop.w
 80017d8:	c28f5c29 	.word	0xc28f5c29
 80017dc:	3ff028f5 	.word	0x3ff028f5
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40a47800 	.word	0x40a47800
 80017e8:	51eb851f 	.word	0x51eb851f
 80017ec:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 80017f0:	ab12      	add	r3, sp, #72	; 0x48
 80017f2:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 80017f6:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 80017fa:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 80017fe:	1ac0      	subs	r0, r0, r3
 8001800:	ee07 0a90 	vmov	s15, r0
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001808:	ee17 0a90 	vmov	r0, s15
 800180c:	f7fe fea4 	bl	8000558 <__aeabi_f2d>
 8001810:	2200      	movs	r2, #0
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <MPU9250SelfTest+0x4bc>)
 8001814:	f7fe fef8 	bl	8000608 <__aeabi_dmul>
 8001818:	4606      	mov	r6, r0
 800181a:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 800181c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001820:	ab12      	add	r3, sp, #72	; 0x48
 8001822:	444b      	add	r3, r9
 8001824:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001828:	f7fe fe96 	bl	8000558 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 800182c:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4630      	mov	r0, r6
 8001834:	4639      	mov	r1, r7
 8001836:	f7ff f811 	bl	800085c <__aeabi_ddiv>
 800183a:	f7ff f9dd 	bl	8000bf8 <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 800183e:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001842:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001846:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 800184a:	1ac0      	subs	r0, r0, r3
 800184c:	ee07 0a90 	vmov	s15, r0
 8001850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001854:	ee17 0a90 	vmov	r0, s15
 8001858:	f7fe fe7e 	bl	8000558 <__aeabi_f2d>
 800185c:	2200      	movs	r2, #0
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MPU9250SelfTest+0x4bc>)
 8001860:	f7fe fed2 	bl	8000608 <__aeabi_dmul>
 8001864:	4606      	mov	r6, r0
 8001866:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001868:	f108 0403 	add.w	r4, r8, #3
 800186c:	00a4      	lsls	r4, r4, #2
 800186e:	ab12      	add	r3, sp, #72	; 0x48
 8001870:	4423      	add	r3, r4
 8001872:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001876:	f7fe fe6f 	bl	8000558 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 800187a:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4630      	mov	r0, r6
 8001882:	4639      	mov	r1, r7
 8001884:	f7fe ffea 	bl	800085c <__aeabi_ddiv>
 8001888:	f7ff f9b6 	bl	8000bf8 <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 800188c:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 800188e:	f108 0801 	add.w	r8, r8, #1
 8001892:	f1b8 0f02 	cmp.w	r8, #2
 8001896:	ddab      	ble.n	80017f0 <MPU9250SelfTest+0x408>
	}

}
 8001898:	b013      	add	sp, #76	; 0x4c
 800189a:	ecbd 8b08 	vpop	{d8-d11}
 800189e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018a2:	bf00      	nop
 80018a4:	40590000 	.word	0x40590000

080018a8 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 80018a8:	b508      	push	{r3, lr}
	resetMPU9250();
 80018aa:	f7ff fcbf 	bl	800122c <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <imu_calibrate+0x40>)
 80018b0:	f7ff fd9a 	bl	80013e8 <MPU9250SelfTest>
	HAL_Delay(500);
 80018b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b8:	f001 fb96 	bl	8002fe8 <HAL_Delay>
	HAL_Delay(500);
 80018bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c0:	f001 fb92 	bl	8002fe8 <HAL_Delay>
	initMPU9250();
 80018c4:	f7ff fd20 	bl	8001308 <initMPU9250>
	initAK8963(magCalibration);
 80018c8:	4808      	ldr	r0, [pc, #32]	; (80018ec <imu_calibrate+0x44>)
 80018ca:	f7ff fcb9 	bl	8001240 <initAK8963>
	HAL_Delay(500);
 80018ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d2:	f001 fb89 	bl	8002fe8 <HAL_Delay>
	getAres(); // Get accelerometer sensitivity
 80018d6:	f7ff fc15 	bl	8001104 <getAres>
	getGres(); // Get gyro sensitivity
 80018da:	f7ff fbef 	bl	80010bc <getGres>
	getMres(); // Get magnetometer sensitivity
 80018de:	f7ff fbd7 	bl	8001090 <getMres>
}
 80018e2:	2000      	movs	r0, #0
 80018e4:	bd08      	pop	{r3, pc}
 80018e6:	bf00      	nop
 80018e8:	2000437c 	.word	0x2000437c
 80018ec:	2000001c 	.word	0x2000001c

080018f0 <MahonyQuaternionUpdate>:
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 80018f0:	ee61 7a01 	vmul.f32	s15, s2, s2
		float gz, float mx, float my, float mz) {
 80018f4:	b530      	push	{r4, r5, lr}
	norm = sqrt(ax * ax + ay * ay + az * az);
 80018f6:	eee0 7aa0 	vfma.f32	s15, s1, s1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 80018fa:	4cb9      	ldr	r4, [pc, #740]	; (8001be0 <MahonyQuaternionUpdate+0x2f0>)
		float gz, float mx, float my, float mz) {
 80018fc:	ed2d 8b10 	vpush	{d8-d15}
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001900:	eee0 7a00 	vfma.f32	s15, s0, s0
		float gz, float mx, float my, float mz) {
 8001904:	b089      	sub	sp, #36	; 0x24
 8001906:	eeb0 aa41 	vmov.f32	s20, s2
	norm = sqrt(ax * ax + ay * ay + az * az);
 800190a:	ee17 0a90 	vmov	r0, s15
		float gz, float mx, float my, float mz) {
 800190e:	eeb0 ca61 	vmov.f32	s24, s3
 8001912:	eeb0 ea42 	vmov.f32	s28, s4
 8001916:	eef0 da62 	vmov.f32	s27, s5
 800191a:	eef0 ba43 	vmov.f32	s23, s6
 800191e:	eeb0 ba63 	vmov.f32	s22, s7
 8001922:	eef0 ca44 	vmov.f32	s25, s8
 8001926:	eef0 8a60 	vmov.f32	s17, s1
 800192a:	eeb0 8a40 	vmov.f32	s16, s0
	norm = sqrt(ax * ax + ay * ay + az * az);
 800192e:	f7fe fe13 	bl	8000558 <__aeabi_f2d>
 8001932:	ec41 0b10 	vmov	d0, r0, r1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001936:	ed94 9a00 	vldr	s18, [r4]
 800193a:	ed94 da01 	vldr	s26, [r4, #4]
 800193e:	edd4 aa02 	vldr	s21, [r4, #8]
 8001942:	edd4 9a03 	vldr	s19, [r4, #12]
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001946:	f007 f877 	bl	8008a38 <sqrt>
 800194a:	ec51 0b10 	vmov	r0, r1, d0
 800194e:	f7ff f953 	bl	8000bf8 <__aeabi_d2f>
 8001952:	ee0e 0a90 	vmov	s29, r0
	if (norm == 0.0f)
 8001956:	eef5 ea40 	vcmp.f32	s29, #0.0
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	d103      	bne.n	8001968 <MahonyQuaternionUpdate+0x78>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001960:	b009      	add	sp, #36	; 0x24
 8001962:	ecbd 8b10 	vpop	{d8-d15}
 8001966:	bd30      	pop	{r4, r5, pc}
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001968:	ee6c 7aac 	vmul.f32	s15, s25, s25
 800196c:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8001970:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8001974:	ee17 0a90 	vmov	r0, s15
 8001978:	f7fe fdee 	bl	8000558 <__aeabi_f2d>
 800197c:	ec41 0b10 	vmov	d0, r0, r1
 8001980:	f007 f85a 	bl	8008a38 <sqrt>
 8001984:	ec51 0b10 	vmov	r0, r1, d0
 8001988:	f7ff f936 	bl	8000bf8 <__aeabi_d2f>
 800198c:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001990:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	d0e2      	beq.n	8001960 <MahonyQuaternionUpdate+0x70>
	norm = 1.0f / norm;        // use reciprocal for division
 800199a:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
	norm = 1.0f / norm;        // use reciprocal for division
 800199e:	ee8f 4a27 	vdiv.f32	s8, s30, s15
 80019a2:	2500      	movs	r5, #0
	float q4q4 = q4 * q4;
 80019a4:	ee29 6aa9 	vmul.f32	s12, s19, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019a8:	ee2d 7a4d 	vnmul.f32	s14, s26, s26
	float q2q3 = q2 * q3;
 80019ac:	ee6d 6a2a 	vmul.f32	s13, s26, s21
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019b0:	ee77 7a46 	vsub.f32	s15, s14, s12
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019b4:	eef1 5a49 	vneg.f32	s11, s18
 80019b8:	eef0 4a46 	vmov.f32	s9, s12
 80019bc:	eef6 fa00 	vmov.f32	s31, #96	; 0x3f000000  0.5
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019c0:	eef0 3a66 	vmov.f32	s7, s13
	my *= norm;
 80019c4:	ee2b ba04 	vmul.f32	s22, s22, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019c8:	eee5 6aa9 	vfma.f32	s13, s11, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019cc:	eee9 3a29 	vfma.f32	s7, s18, s19
 80019d0:	ee77 7aaf 	vadd.f32	s15, s15, s31
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019d4:	eeea 4aaa 	vfma.f32	s9, s21, s21
	float q3q4 = q3 * q4;
 80019d8:	ee2a 5aa9 	vmul.f32	s10, s21, s19
	mx *= norm;
 80019dc:	ee6b ba84 	vmul.f32	s23, s23, s8
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019e0:	ee67 7a8b 	vmul.f32	s15, s15, s22
	norm = 1.0f / norm;        // use reciprocal for division
 80019e4:	ee8f 1a2e 	vdiv.f32	s2, s30, s29
			+ 2.0f * mz * (q3q4 - q1q2);
 80019e8:	eeb0 3a45 	vmov.f32	s6, s10
	mz *= norm;
 80019ec:	ee6c ea84 	vmul.f32	s29, s25, s8
	float q2q4 = q2 * q4;
 80019f0:	ee6d ca29 	vmul.f32	s25, s26, s19
			+ 2.0f * mz * (q3q4 - q1q2);
 80019f4:	eea5 3a8d 	vfma.f32	s6, s11, s26
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019f8:	ee7f 4ae4 	vsub.f32	s9, s31, s9
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019fc:	eee3 7aab 	vfma.f32	s15, s7, s23
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a00:	ee66 3a8b 	vmul.f32	s7, s13, s22
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a04:	eeb0 4a6c 	vmov.f32	s8, s25
 8001a08:	eea9 4a2a 	vfma.f32	s8, s18, s21
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a0c:	eee4 3aab 	vfma.f32	s7, s9, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a10:	eee3 7a2e 	vfma.f32	s15, s6, s29
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a14:	eee4 3a2e 	vfma.f32	s7, s8, s29
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a18:	ee77 7aa7 	vadd.f32	s15, s15, s15
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a1c:	ee73 3aa3 	vadd.f32	s7, s7, s7
	bx = sqrt((hx * hx) + (hy * hy));
 8001a20:	ee67 7aa7 	vmul.f32	s15, s15, s15
	ax *= norm;
 8001a24:	ee28 8a01 	vmul.f32	s16, s16, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001a28:	eee3 7aa3 	vfma.f32	s15, s7, s7
	ay *= norm;
 8001a2c:	ee68 8a81 	vmul.f32	s17, s17, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001a30:	ee17 0a90 	vmov	r0, s15
	az *= norm;
 8001a34:	ee2a aa01 	vmul.f32	s20, s20, s2
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a38:	ed8d 7a07 	vstr	s14, [sp, #28]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a3c:	ed8d 6a06 	vstr	s12, [sp, #24]
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a40:	ed8d 5a05 	vstr	s10, [sp, #20]
 8001a44:	edcd 5a04 	vstr	s11, [sp, #16]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a48:	edcd 6a03 	vstr	s13, [sp, #12]
 8001a4c:	edcd 4a02 	vstr	s9, [sp, #8]
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a50:	ed8d 4a01 	vstr	s8, [sp, #4]
	bx = sqrt((hx * hx) + (hy * hy));
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	ec41 0b10 	vmov	d0, r0, r1
 8001a5c:	f006 ffec 	bl	8008a38 <sqrt>
 8001a60:	ec51 0b10 	vmov	r0, r1, d0
 8001a64:	f7ff f8c8 	bl	8000bf8 <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a68:	ed9d 5a05 	vldr	s10, [sp, #20]
 8001a6c:	eddd 5a04 	vldr	s11, [sp, #16]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001a70:	ed9d 7a07 	vldr	s14, [sp, #28]
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001a74:	ed9d 6a06 	vldr	s12, [sp, #24]
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001a78:	eddd 4a02 	vldr	s9, [sp, #8]
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001a7c:	ed9d 4a01 	vldr	s8, [sp, #4]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001a80:	eddd 6a03 	vldr	s13, [sp, #12]
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001a84:	4a57      	ldr	r2, [pc, #348]	; (8001be4 <MahonyQuaternionUpdate+0x2f4>)
		eInt[0] = 0.0f;     // prevent integral wind up
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <MahonyQuaternionUpdate+0x2f8>)
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a88:	eea9 5a0d 	vfma.f32	s10, s18, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001a8c:	601d      	str	r5, [r3, #0]
		eInt[1] = 0.0f;
 8001a8e:	605d      	str	r5, [r3, #4]
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a90:	eee5 caaa 	vfma.f32	s25, s11, s21
		eInt[2] = 0.0f;
 8001a94:	609d      	str	r5, [r3, #8]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001a96:	eeb1 3a6a 	vneg.f32	s6, s21
 8001a9a:	eef0 5a47 	vmov.f32	s11, s14
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a9e:	ee65 7a0b 	vmul.f32	s15, s10, s22
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001aa2:	eee3 5a2a 	vfma.f32	s11, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001aa6:	eeec 7aab 	vfma.f32	s15, s25, s23
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001aaa:	ee75 5aaf 	vadd.f32	s11, s11, s31
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001aae:	eea9 7a09 	vfma.f32	s14, s18, s18
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ab2:	eee5 7aae 	vfma.f32	s15, s11, s29
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ab6:	eea3 7a2a 	vfma.f32	s14, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001aba:	ee77 7aa7 	vadd.f32	s15, s15, s15
	bx = sqrt((hx * hx) + (hy * hy));
 8001abe:	ee03 0a90 	vmov	s7, r0
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ac2:	ee37 6a06 	vadd.f32	s12, s14, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ac6:	ee2c 3aa7 	vmul.f32	s6, s25, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001aca:	ee7c caac 	vadd.f32	s25, s25, s25
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ace:	eea4 3aa3 	vfma.f32	s6, s9, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001ad2:	ee66 4a48 	vnmul.f32	s9, s12, s16
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001ad6:	ee25 7aa7 	vmul.f32	s14, s11, s15
	vy = 2.0f * (q1q2 + q3q4);
 8001ada:	ee75 5a05 	vadd.f32	s11, s10, s10
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001ade:	eeea 4a2c 	vfma.f32	s9, s20, s25
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001ae2:	eea4 7a23 	vfma.f32	s14, s8, s7
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001ae6:	ee25 1aca 	vnmul.f32	s2, s11, s20
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001aea:	ee65 7a27 	vmul.f32	s15, s10, s15
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001aee:	eea8 1a86 	vfma.f32	s2, s17, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001af2:	ee33 5a03 	vadd.f32	s10, s6, s6
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001af6:	eee6 7aa3 	vfma.f32	s15, s13, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001afa:	eef0 6a64 	vmov.f32	s13, s9
 8001afe:	eeee 6a85 	vfma.f32	s13, s29, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001b02:	ee37 7a07 	vadd.f32	s14, s14, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b06:	ee6c cae8 	vnmul.f32	s25, s25, s17
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b0a:	eeab 1a07 	vfma.f32	s2, s22, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b0e:	eee8 ca25 	vfma.f32	s25, s16, s11
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001b12:	eeeb 6ac7 	vfms.f32	s13, s23, s14
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001b16:	ee77 7aa7 	vadd.f32	s15, s15, s15
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b1a:	eeb0 8a6a 	vmov.f32	s16, s21
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b1e:	eeae 1ae7 	vfms.f32	s2, s29, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b22:	eeeb caa7 	vfma.f32	s25, s23, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001b26:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	gy = gy + Kp * ey + Ki * eInt[1];
 8001b2a:	eea6 eaa7 	vfma.f32	s28, s13, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001b2e:	eea1 ca27 	vfma.f32	s24, s2, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b32:	eeeb ca45 	vfms.f32	s25, s22, s10
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b36:	ee6a 6a8e 	vmul.f32	s13, s21, s28
	gz = gz + Kp * ez + Ki * eInt[2];
 8001b3a:	eeec daa7 	vfma.f32	s27, s25, s15
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b3e:	eeed 6a0c 	vfma.f32	s13, s26, s24
 8001b42:	edd2 7a00 	vldr	s15, [r2]
 8001b46:	eee9 6aad 	vfma.f32	s13, s19, s27
 8001b4a:	ee67 faaf 	vmul.f32	s31, s15, s31
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b4e:	ee29 7a8c 	vmul.f32	s14, s19, s24
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b52:	eea6 9aef 	vfms.f32	s18, s13, s31
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b56:	ee6e 7a69 	vnmul.f32	s15, s28, s19
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b5a:	eead 7a6d 	vfms.f32	s14, s26, s27
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b5e:	eeea 7aad 	vfma.f32	s15, s21, s27
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b62:	eeae 7a09 	vfma.f32	s14, s28, s18
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b66:	eeec 7a09 	vfma.f32	s15, s24, s18
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b6a:	eea7 8a2f 	vfma.f32	s16, s14, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b6e:	ee2c ca6a 	vnmul.f32	s24, s24, s21
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b72:	eef0 8a4d 	vmov.f32	s17, s26
 8001b76:	eee7 8aaf 	vfma.f32	s17, s15, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b7a:	eead ca0e 	vfma.f32	s24, s26, s28
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b7e:	ee68 7a08 	vmul.f32	s15, s16, s16
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b82:	eead ca89 	vfma.f32	s24, s27, s18
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b86:	eee8 7aa8 	vfma.f32	s15, s17, s17
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b8a:	eeec 9a2f 	vfma.f32	s19, s24, s31
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b8e:	eee9 7a09 	vfma.f32	s15, s18, s18
 8001b92:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8001b96:	ee17 0a90 	vmov	r0, s15
 8001b9a:	f7fe fcdd 	bl	8000558 <__aeabi_f2d>
 8001b9e:	ec41 0b10 	vmov	d0, r0, r1
 8001ba2:	f006 ff49 	bl	8008a38 <sqrt>
 8001ba6:	ec51 0b10 	vmov	r0, r1, d0
 8001baa:	f7ff f825 	bl	8000bf8 <__aeabi_d2f>
	norm = 1.0f / norm;
 8001bae:	ee07 0a90 	vmov	s15, r0
 8001bb2:	eecf 7a27 	vdiv.f32	s15, s30, s15
	q[1] = q2 * norm;
 8001bb6:	ee68 8aa7 	vmul.f32	s17, s17, s15
	q[2] = q3 * norm;
 8001bba:	ee28 8a27 	vmul.f32	s16, s16, s15
	q[3] = q4 * norm;
 8001bbe:	ee69 9aa7 	vmul.f32	s19, s19, s15
	q[0] = q1 * norm;
 8001bc2:	ee29 9a27 	vmul.f32	s18, s18, s15
	q[1] = q2 * norm;
 8001bc6:	edc4 8a01 	vstr	s17, [r4, #4]
	q[2] = q3 * norm;
 8001bca:	ed84 8a02 	vstr	s16, [r4, #8]
	q[3] = q4 * norm;
 8001bce:	edc4 9a03 	vstr	s19, [r4, #12]
	q[0] = q1 * norm;
 8001bd2:	ed84 9a00 	vstr	s18, [r4]
}
 8001bd6:	b009      	add	sp, #36	; 0x24
 8001bd8:	ecbd 8b10 	vpop	{d8-d15}
 8001bdc:	bd30      	pop	{r4, r5, pc}
 8001bde:	bf00      	nop
 8001be0:	20000040 	.word	0x20000040
 8001be4:	2000028c 	.word	0x2000028c
 8001be8:	20000290 	.word	0x20000290
 8001bec:	00000000 	.word	0x00000000

08001bf0 <calc_RollPitchYaw>:
void calc_RollPitchYaw(float *roll, float *pitch, float *yaw, float *yaw_rate) {
 8001bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bf4:	4607      	mov	r7, r0
 8001bf6:	4689      	mov	r9, r1
 8001bf8:	4690      	mov	r8, r2
 8001bfa:	461c      	mov	r4, r3
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 8001bfc:	223a      	movs	r2, #58	; 0x3a
 8001bfe:	21d1      	movs	r1, #209	; 0xd1
 8001c00:	20d0      	movs	r0, #208	; 0xd0
 8001c02:	f7ff f9dd 	bl	8000fc0 <readByte>
 8001c06:	f010 0f01 	tst.w	r0, #1
 8001c0a:	f040 80eb 	bne.w	8001de4 <calc_RollPitchYaw+0x1f4>
	*yaw_rate = gz;
 8001c0e:	4bde      	ldr	r3, [pc, #888]	; (8001f88 <calc_RollPitchYaw+0x398>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6023      	str	r3, [r4, #0]
	Now = htim11.Instance->CNT;
 8001c14:	4bdd      	ldr	r3, [pc, #884]	; (8001f8c <calc_RollPitchYaw+0x39c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c20:	4bdb      	ldr	r3, [pc, #876]	; (8001f90 <calc_RollPitchYaw+0x3a0>)
 8001c22:	edc3 7a00 	vstr	s15, [r3]
	if(Now - lastUpdate < 0){
 8001c26:	4bdb      	ldr	r3, [pc, #876]	; (8001f94 <calc_RollPitchYaw+0x3a4>)
 8001c28:	edd3 6a00 	vldr	s13, [r3]
 8001c2c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8001c30:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c38:	f100 818e 	bmi.w	8001f58 <calc_RollPitchYaw+0x368>
	deltat = (float) ((Now - lastUpdate) * (1 / (TIMER_CLK_FREQ / 100.0f))); // set integration time by time elapsed since last filter update
 8001c3c:	eddf 6ad6 	vldr	s13, [pc, #856]	; 8001f98 <calc_RollPitchYaw+0x3a8>
 8001c40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c44:	4bd5      	ldr	r3, [pc, #852]	; (8001f9c <calc_RollPitchYaw+0x3ac>)
 8001c46:	ed83 7a00 	vstr	s14, [r3]
	lastUpdate = Now;
 8001c4a:	4bd2      	ldr	r3, [pc, #840]	; (8001f94 <calc_RollPitchYaw+0x3a4>)
 8001c4c:	edc3 7a00 	vstr	s15, [r3]
	sum += deltat;
 8001c50:	4ed3      	ldr	r6, [pc, #844]	; (8001fa0 <calc_RollPitchYaw+0x3b0>)
 8001c52:	edd6 7a00 	vldr	s15, [r6]
 8001c56:	4bd1      	ldr	r3, [pc, #836]	; (8001f9c <calc_RollPitchYaw+0x3ac>)
 8001c58:	ed93 7a00 	vldr	s14, [r3]
 8001c5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c60:	edc6 7a00 	vstr	s15, [r6]
	sumCount++;
 8001c64:	4dcf      	ldr	r5, [pc, #828]	; (8001fa4 <calc_RollPitchYaw+0x3b4>)
 8001c66:	682b      	ldr	r3, [r5, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	602b      	str	r3, [r5, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 8001c6c:	4bce      	ldr	r3, [pc, #824]	; (8001fa8 <calc_RollPitchYaw+0x3b8>)
 8001c6e:	edd3 1a00 	vldr	s3, [r3]
 8001c72:	eddf 7ace 	vldr	s15, [pc, #824]	; 8001fac <calc_RollPitchYaw+0x3bc>
 8001c76:	ee61 1aa7 	vmul.f32	s3, s3, s15
 8001c7a:	4bcd      	ldr	r3, [pc, #820]	; (8001fb0 <calc_RollPitchYaw+0x3c0>)
 8001c7c:	ed93 2a00 	vldr	s4, [r3]
 8001c80:	ee22 2a27 	vmul.f32	s4, s4, s15
 8001c84:	4bc0      	ldr	r3, [pc, #768]	; (8001f88 <calc_RollPitchYaw+0x398>)
 8001c86:	edd3 2a00 	vldr	s5, [r3]
 8001c8a:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8001c8e:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8001fb4 <calc_RollPitchYaw+0x3c4>
 8001c92:	4bc9      	ldr	r3, [pc, #804]	; (8001fb8 <calc_RollPitchYaw+0x3c8>)
 8001c94:	ed93 4a00 	vldr	s8, [r3]
 8001c98:	4bc8      	ldr	r3, [pc, #800]	; (8001fbc <calc_RollPitchYaw+0x3cc>)
 8001c9a:	edd3 3a00 	vldr	s7, [r3]
 8001c9e:	4bc8      	ldr	r3, [pc, #800]	; (8001fc0 <calc_RollPitchYaw+0x3d0>)
 8001ca0:	ed93 3a00 	vldr	s6, [r3]
 8001ca4:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 8001ca8:	ee82 2a27 	vdiv.f32	s4, s4, s15
 8001cac:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8001cb0:	4bc4      	ldr	r3, [pc, #784]	; (8001fc4 <calc_RollPitchYaw+0x3d4>)
 8001cb2:	ed93 1a00 	vldr	s2, [r3]
 8001cb6:	4bc4      	ldr	r3, [pc, #784]	; (8001fc8 <calc_RollPitchYaw+0x3d8>)
 8001cb8:	edd3 0a00 	vldr	s1, [r3]
 8001cbc:	4bc3      	ldr	r3, [pc, #780]	; (8001fcc <calc_RollPitchYaw+0x3dc>)
 8001cbe:	ed93 0a00 	vldr	s0, [r3]
 8001cc2:	f7ff fe15 	bl	80018f0 <MahonyQuaternionUpdate>
	*yaw = atan2f(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8001cc6:	4cc2      	ldr	r4, [pc, #776]	; (8001fd0 <calc_RollPitchYaw+0x3e0>)
 8001cc8:	edd4 6a01 	vldr	s13, [r4, #4]
 8001ccc:	ed94 7a02 	vldr	s14, [r4, #8]
 8001cd0:	ee26 0a87 	vmul.f32	s0, s13, s14
 8001cd4:	edd4 7a00 	vldr	s15, [r4]
 8001cd8:	edd4 0a03 	vldr	s1, [r4, #12]
 8001cdc:	ee27 6aa0 	vmul.f32	s12, s15, s1
 8001ce0:	ee30 0a06 	vadd.f32	s0, s0, s12
 8001ce4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ce8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8001cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cf0:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001cf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cf8:	ee60 0aa0 	vmul.f32	s1, s1, s1
 8001cfc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8001d00:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001d04:	f006 ff4a 	bl	8008b9c <atan2f>
 8001d08:	ed88 0a00 	vstr	s0, [r8]
	*pitch = -asinf(2.0 * (q[1] * q[3] - q[0] * q[2]));
 8001d0c:	ed94 0a01 	vldr	s0, [r4, #4]
 8001d10:	edd4 7a03 	vldr	s15, [r4, #12]
 8001d14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001d18:	edd4 7a00 	vldr	s15, [r4]
 8001d1c:	ed94 7a02 	vldr	s14, [r4, #8]
 8001d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d24:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001d28:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001d2c:	f006 fede 	bl	8008aec <asinf>
 8001d30:	eeb1 0a40 	vneg.f32	s0, s0
 8001d34:	ed89 0a00 	vstr	s0, [r9]
	*roll = atan2f(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8001d38:	edd4 7a00 	vldr	s15, [r4]
 8001d3c:	edd4 6a01 	vldr	s13, [r4, #4]
 8001d40:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8001d44:	ed94 7a02 	vldr	s14, [r4, #8]
 8001d48:	edd4 0a03 	vldr	s1, [r4, #12]
 8001d4c:	ee27 6a20 	vmul.f32	s12, s14, s1
 8001d50:	ee30 0a06 	vadd.f32	s0, s0, s12
 8001d54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d58:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8001d5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d60:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001d64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d68:	ee60 0aa0 	vmul.f32	s1, s1, s1
 8001d6c:	ee77 0aa0 	vadd.f32	s1, s15, s1
 8001d70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001d74:	f006 ff12 	bl	8008b9c <atan2f>
 8001d78:	ed87 0a00 	vstr	s0, [r7]
	*pitch *= 180.0 / PI;
 8001d7c:	f8d9 0000 	ldr.w	r0, [r9]
 8001d80:	f7fe fbea 	bl	8000558 <__aeabi_f2d>
 8001d84:	a37c      	add	r3, pc, #496	; (adr r3, 8001f78 <calc_RollPitchYaw+0x388>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe fc3d 	bl	8000608 <__aeabi_dmul>
 8001d8e:	f7fe ff33 	bl	8000bf8 <__aeabi_d2f>
 8001d92:	f8c9 0000 	str.w	r0, [r9]
	*yaw *= 180.0 / PI;
 8001d96:	f8d8 0000 	ldr.w	r0, [r8]
 8001d9a:	f7fe fbdd 	bl	8000558 <__aeabi_f2d>
 8001d9e:	a376      	add	r3, pc, #472	; (adr r3, 8001f78 <calc_RollPitchYaw+0x388>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc30 	bl	8000608 <__aeabi_dmul>
 8001da8:	f7fe ff26 	bl	8000bf8 <__aeabi_d2f>
	*yaw -=  -0.6; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8001dac:	f7fe fbd4 	bl	8000558 <__aeabi_f2d>
 8001db0:	a373      	add	r3, pc, #460	; (adr r3, 8001f80 <calc_RollPitchYaw+0x390>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fa71 	bl	800029c <__adddf3>
 8001dba:	f7fe ff1d 	bl	8000bf8 <__aeabi_d2f>
 8001dbe:	f8c8 0000 	str.w	r0, [r8]
	*roll *= 180.0 / PI;
 8001dc2:	6838      	ldr	r0, [r7, #0]
 8001dc4:	f7fe fbc8 	bl	8000558 <__aeabi_f2d>
 8001dc8:	a36b      	add	r3, pc, #428	; (adr r3, 8001f78 <calc_RollPitchYaw+0x388>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fc1b 	bl	8000608 <__aeabi_dmul>
 8001dd2:	f7fe ff11 	bl	8000bf8 <__aeabi_d2f>
 8001dd6:	6038      	str	r0, [r7, #0]
	sum = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6033      	str	r3, [r6, #0]
	sumCount = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	602b      	str	r3, [r5, #0]
}
 8001de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		readAccelData(accelCount);  // Read the x/y/z adc values
 8001de4:	4d7b      	ldr	r5, [pc, #492]	; (8001fd4 <calc_RollPitchYaw+0x3e4>)
 8001de6:	4628      	mov	r0, r5
 8001de8:	f7ff f9ac 	bl	8001144 <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 8001dec:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001df0:	ee07 3a10 	vmov	s14, r3
 8001df4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001df8:	4b77      	ldr	r3, [pc, #476]	; (8001fd8 <calc_RollPitchYaw+0x3e8>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <calc_RollPitchYaw+0x3ec>)
 8001e04:	edd3 6a00 	vldr	s13, [r3]
 8001e08:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001e0c:	4a6f      	ldr	r2, [pc, #444]	; (8001fcc <calc_RollPitchYaw+0x3dc>)
 8001e0e:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 8001e12:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8001e16:	ee07 2a10 	vmov	s14, r2
 8001e1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e22:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e26:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001e2a:	4a67      	ldr	r2, [pc, #412]	; (8001fc8 <calc_RollPitchYaw+0x3d8>)
 8001e2c:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 8001e30:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8001e34:	ee07 2a10 	vmov	s14, r2
 8001e38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e40:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e48:	4b5e      	ldr	r3, [pc, #376]	; (8001fc4 <calc_RollPitchYaw+0x3d4>)
 8001e4a:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 8001e4e:	4d64      	ldr	r5, [pc, #400]	; (8001fe0 <calc_RollPitchYaw+0x3f0>)
 8001e50:	4628      	mov	r0, r5
 8001e52:	f7ff f999 	bl	8001188 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8001e56:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001e5a:	ee07 3a10 	vmov	s14, r3
 8001e5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e62:	4b60      	ldr	r3, [pc, #384]	; (8001fe4 <calc_RollPitchYaw+0x3f4>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <calc_RollPitchYaw+0x3f8>)
 8001e6e:	edd3 6a00 	vldr	s13, [r3]
 8001e72:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001e76:	4a4c      	ldr	r2, [pc, #304]	; (8001fa8 <calc_RollPitchYaw+0x3b8>)
 8001e78:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8001e7c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8001e80:	ee07 2a10 	vmov	s14, r2
 8001e84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e90:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001e94:	4a46      	ldr	r2, [pc, #280]	; (8001fb0 <calc_RollPitchYaw+0x3c0>)
 8001e96:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8001e9a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8001e9e:	ee07 2a10 	vmov	s14, r2
 8001ea2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eaa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001eae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eb2:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <calc_RollPitchYaw+0x398>)
 8001eb4:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 8001eb8:	4d4c      	ldr	r5, [pc, #304]	; (8001fec <calc_RollPitchYaw+0x3fc>)
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f7ff f986 	bl	80011cc <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 8001ec0:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001ec4:	ee06 3a90 	vmov	s13, r3
 8001ec8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001ecc:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <calc_RollPitchYaw+0x400>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ed6:	4a47      	ldr	r2, [pc, #284]	; (8001ff4 <calc_RollPitchYaw+0x404>)
 8001ed8:	ed92 7a00 	vldr	s14, [r2]
 8001edc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001ee0:	4b45      	ldr	r3, [pc, #276]	; (8001ff8 <calc_RollPitchYaw+0x408>)
 8001ee2:	ed93 7a00 	vldr	s14, [r3]
 8001ee6:	ee76 6ac7 	vsub.f32	s13, s13, s14
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 8001eea:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8001eee:	ee07 1a10 	vmov	s14, r1
 8001ef2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ef6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001efa:	ed92 6a01 	vldr	s12, [r2, #4]
 8001efe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001f02:	ed93 6a01 	vldr	s12, [r3, #4]
 8001f06:	ee37 7a46 	vsub.f32	s14, s14, s12
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 8001f0a:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8001f0e:	ee06 1a10 	vmov	s12, r1
 8001f12:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001f16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001f1a:	ed92 6a02 	vldr	s12, [r2, #8]
 8001f1e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001f22:	ed93 6a02 	vldr	s12, [r3, #8]
 8001f26:	ee77 7ac6 	vsub.f32	s15, s15, s12
		mx *= magscale[0];
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <calc_RollPitchYaw+0x40c>)
 8001f2c:	ed93 6a00 	vldr	s12, [r3]
 8001f30:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001f34:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <calc_RollPitchYaw+0x3cc>)
 8001f36:	edc2 6a00 	vstr	s13, [r2]
		my *= magscale[1];
 8001f3a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f3e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f42:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <calc_RollPitchYaw+0x3d0>)
 8001f44:	ed82 7a00 	vstr	s14, [r2]
		mz *= magscale[2];
 8001f48:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <calc_RollPitchYaw+0x3c8>)
 8001f52:	edc3 7a00 	vstr	s15, [r3]
 8001f56:	e65a      	b.n	8001c0e <calc_RollPitchYaw+0x1e>
		deltat = (float) (((65535-lastUpdate)+Now) * (1 / (TIMER_CLK_FREQ / 100.0f)));
 8001f58:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002000 <calc_RollPitchYaw+0x410>
 8001f5c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001f60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f64:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001f98 <calc_RollPitchYaw+0x3a8>
 8001f68:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <calc_RollPitchYaw+0x3ac>)
 8001f6e:	ed83 7a00 	vstr	s14, [r3]
 8001f72:	e66a      	b.n	8001c4a <calc_RollPitchYaw+0x5a>
 8001f74:	f3af 8000 	nop.w
 8001f78:	0d03cf26 	.word	0x0d03cf26
 8001f7c:	404ca5dc 	.word	0x404ca5dc
 8001f80:	33333333 	.word	0x33333333
 8001f84:	3fe33333 	.word	0x3fe33333
 8001f88:	2000440c 	.word	0x2000440c
 8001f8c:	20004a80 	.word	0x20004a80
 8001f90:	20000288 	.word	0x20000288
 8001f94:	2000029c 	.word	0x2000029c
 8001f98:	358637bd 	.word	0x358637bd
 8001f9c:	2000028c 	.word	0x2000028c
 8001fa0:	200002a0 	.word	0x200002a0
 8001fa4:	200002a4 	.word	0x200002a4
 8001fa8:	20004430 	.word	0x20004430
 8001fac:	40490fdb 	.word	0x40490fdb
 8001fb0:	200043e8 	.word	0x200043e8
 8001fb4:	43340000 	.word	0x43340000
 8001fb8:	20004414 	.word	0x20004414
 8001fbc:	20004438 	.word	0x20004438
 8001fc0:	200043fc 	.word	0x200043fc
 8001fc4:	200043ec 	.word	0x200043ec
 8001fc8:	20004434 	.word	0x20004434
 8001fcc:	20004400 	.word	0x20004400
 8001fd0:	20000040 	.word	0x20000040
 8001fd4:	20004374 	.word	0x20004374
 8001fd8:	20004404 	.word	0x20004404
 8001fdc:	20000004 	.word	0x20000004
 8001fe0:	200043f4 	.word	0x200043f4
 8001fe4:	20004410 	.word	0x20004410
 8001fe8:	20000010 	.word	0x20000010
 8001fec:	2000441c 	.word	0x2000441c
 8001ff0:	2000442c 	.word	0x2000442c
 8001ff4:	2000001c 	.word	0x2000001c
 8001ff8:	20000028 	.word	0x20000028
 8001ffc:	20000034 	.word	0x20000034
 8002000:	477fff00 	.word	0x477fff00

08002004 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 1;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8002004:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 8002006:	f000 ffad 	bl	8002f64 <DWT_Delay>

}
 800200a:	bd08      	pop	{r3, pc}

0800200c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800200c:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800200e:	b938      	cbnz	r0, 8002020 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <NRF24_csn+0x24>)
 8002014:	8819      	ldrh	r1, [r3, #0]
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <NRF24_csn+0x28>)
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	f001 fc2b 	bl	8003874 <HAL_GPIO_WritePin>
}
 800201e:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8002020:	2201      	movs	r2, #1
 8002022:	4b03      	ldr	r3, [pc, #12]	; (8002030 <NRF24_csn+0x24>)
 8002024:	8819      	ldrh	r1, [r3, #0]
 8002026:	4b03      	ldr	r3, [pc, #12]	; (8002034 <NRF24_csn+0x28>)
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	f001 fc23 	bl	8003874 <HAL_GPIO_WritePin>
 800202e:	e7f6      	b.n	800201e <NRF24_csn+0x12>
 8002030:	200002aa 	.word	0x200002aa
 8002034:	200002ac 	.word	0x200002ac

08002038 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8002038:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800203a:	b938      	cbnz	r0, 800204c <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <NRF24_ce+0x24>)
 8002040:	8819      	ldrh	r1, [r3, #0]
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <NRF24_ce+0x28>)
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	f001 fc15 	bl	8003874 <HAL_GPIO_WritePin>
}
 800204a:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	4b03      	ldr	r3, [pc, #12]	; (800205c <NRF24_ce+0x24>)
 8002050:	8819      	ldrh	r1, [r3, #0]
 8002052:	4b03      	ldr	r3, [pc, #12]	; (8002060 <NRF24_ce+0x28>)
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	f001 fc0d 	bl	8003874 <HAL_GPIO_WritePin>
 800205a:	e7f6      	b.n	800204a <NRF24_ce+0x12>
 800205c:	200002a8 	.word	0x200002a8
 8002060:	200002ac 	.word	0x200002ac

08002064 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8002064:	b510      	push	{r4, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800206a:	2000      	movs	r0, #0
 800206c:	f7ff ffce 	bl	800200c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002070:	f004 041f 	and.w	r4, r4, #31
 8002074:	a902      	add	r1, sp, #8
 8002076:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 800207a:	4c0a      	ldr	r4, [pc, #40]	; (80020a4 <NRF24_read_register+0x40>)
 800207c:	2302      	movs	r3, #2
 800207e:	2201      	movs	r2, #1
 8002080:	4620      	mov	r0, r4
 8002082:	f002 fdfd 	bl	8004c80 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1,2);
 8002086:	2302      	movs	r3, #2
 8002088:	2201      	movs	r2, #1
 800208a:	f10d 0105 	add.w	r1, sp, #5
 800208e:	4620      	mov	r0, r4
 8002090:	f002 ffda 	bl	8005048 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	retData = spiBuf[1];
 8002094:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 8002098:	2001      	movs	r0, #1
 800209a:	f7ff ffb7 	bl	800200c <NRF24_csn>
	return retData;
}
 800209e:	4620      	mov	r0, r4
 80020a0:	b002      	add	sp, #8
 80020a2:	bd10      	pop	{r4, pc}
 80020a4:	200002b0 	.word	0x200002b0

080020a8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	4604      	mov	r4, r0
 80020ae:	460d      	mov	r5, r1
 80020b0:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff ffaa 	bl	800200c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80020b8:	f004 041f 	and.w	r4, r4, #31
 80020bc:	a902      	add	r1, sp, #8
 80020be:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 80020c2:	4c08      	ldr	r4, [pc, #32]	; (80020e4 <NRF24_read_registerN+0x3c>)
 80020c4:	2302      	movs	r3, #2
 80020c6:	2201      	movs	r2, #1
 80020c8:	4620      	mov	r0, r4
 80020ca:	f002 fdd9 	bl	8004c80 <HAL_SPI_Transmit>
	//while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, len,2);
 80020ce:	2302      	movs	r3, #2
 80020d0:	4632      	mov	r2, r6
 80020d2:	4629      	mov	r1, r5
 80020d4:	4620      	mov	r0, r4
 80020d6:	f002 ffb7 	bl	8005048 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80020da:	2001      	movs	r0, #1
 80020dc:	f7ff ff96 	bl	800200c <NRF24_csn>
}
 80020e0:	b002      	add	sp, #8
 80020e2:	bd70      	pop	{r4, r5, r6, pc}
 80020e4:	200002b0 	.word	0x200002b0

080020e8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80020e8:	b530      	push	{r4, r5, lr}
 80020ea:	b083      	sub	sp, #12
 80020ec:	4604      	mov	r4, r0
 80020ee:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff ff8b 	bl	800200c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80020f6:	f044 0420 	orr.w	r4, r4, #32
 80020fa:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80020fe:	f88d 5005 	strb.w	r5, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2,10);
 8002102:	230a      	movs	r3, #10
 8002104:	2202      	movs	r2, #2
 8002106:	a901      	add	r1, sp, #4
 8002108:	4803      	ldr	r0, [pc, #12]	; (8002118 <NRF24_write_register+0x30>)
 800210a:	f002 fdb9 	bl	8004c80 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800210e:	2001      	movs	r0, #1
 8002110:	f7ff ff7c 	bl	800200c <NRF24_csn>
}
 8002114:	b003      	add	sp, #12
 8002116:	bd30      	pop	{r4, r5, pc}
 8002118:	200002b0 	.word	0x200002b0

0800211c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800211c:	b570      	push	{r4, r5, r6, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
 8002124:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff ff70 	bl	800200c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800212c:	f044 0420 	orr.w	r4, r4, #32
 8002130:	a902      	add	r1, sp, #8
 8002132:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8002136:	4c08      	ldr	r4, [pc, #32]	; (8002158 <NRF24_write_registerN+0x3c>)
 8002138:	2302      	movs	r3, #2
 800213a:	2201      	movs	r2, #1
 800213c:	4620      	mov	r0, r4
 800213e:	f002 fd9f 	bl	8004c80 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len,2);
 8002142:	2302      	movs	r3, #2
 8002144:	4632      	mov	r2, r6
 8002146:	4629      	mov	r1, r5
 8002148:	4620      	mov	r0, r4
 800214a:	f002 fd99 	bl	8004c80 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff ff5c 	bl	800200c <NRF24_csn>
}
 8002154:	b002      	add	sp, #8
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	200002b0 	.word	0x200002b0

0800215c <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800215c:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800215e:	21ff      	movs	r1, #255	; 0xff
 8002160:	20e1      	movs	r0, #225	; 0xe1
 8002162:	f7ff ffc1 	bl	80020e8 <NRF24_write_register>
}
 8002166:	bd08      	pop	{r3, pc}

08002168 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8002168:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800216a:	21ff      	movs	r1, #255	; 0xff
 800216c:	20e2      	movs	r0, #226	; 0xe2
 800216e:	f7ff ffbb 	bl	80020e8 <NRF24_write_register>
}
 8002172:	bd08      	pop	{r3, pc}

08002174 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8002174:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8002176:	2007      	movs	r0, #7
 8002178:	f7ff ff74 	bl	8002064 <NRF24_read_register>
	return statReg;
}
 800217c:	bd08      	pop	{r3, pc}
	...

08002180 <NRF24_startListening>:
	NRF24_powerDown();

}
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002180:	b508      	push	{r3, lr}
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff ff6e 	bl	8002064 <NRF24_read_register>
 8002188:	f040 0103 	orr.w	r1, r0, #3
 800218c:	b2c9      	uxtb	r1, r1
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff ffaa 	bl	80020e8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <NRF24_startListening+0x40>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	4313      	orrs	r3, r2
 800219c:	d10a      	bne.n	80021b4 <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 800219e:	f7ff ffdd 	bl	800215c <NRF24_flush_tx>
	NRF24_flush_rx();
 80021a2:	f7ff ffe1 	bl	8002168 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f7ff ff46 	bl	8002038 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80021ac:	2096      	movs	r0, #150	; 0x96
 80021ae:	f7ff ff29 	bl	8002004 <NRF24_DelayMicroSeconds>
}
 80021b2:	bd08      	pop	{r3, pc}
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80021b4:	2205      	movs	r2, #5
 80021b6:	4902      	ldr	r1, [pc, #8]	; (80021c0 <NRF24_startListening+0x40>)
 80021b8:	200a      	movs	r0, #10
 80021ba:	f7ff ffaf 	bl	800211c <NRF24_write_registerN>
 80021be:	e7ee      	b.n	800219e <NRF24_startListening+0x1e>
 80021c0:	20000350 	.word	0x20000350

080021c4 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80021c4:	b510      	push	{r4, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 80021cc:	4604      	mov	r4, r0
 80021ce:	b920      	cbnz	r0, 80021da <NRF24_openReadingPipe+0x16>
		pipe0_reading_address = address;
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <NRF24_openReadingPipe+0x60>)
 80021d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80021d6:	e9c3 0100 	strd	r0, r1, [r3]

	if(number <= 6)
 80021da:	2c06      	cmp	r4, #6
 80021dc:	d818      	bhi.n	8002210 <NRF24_openReadingPipe+0x4c>
	{
		if(number < 2)
 80021de:	2c01      	cmp	r4, #1
 80021e0:	d918      	bls.n	8002214 <NRF24_openReadingPipe+0x50>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	4669      	mov	r1, sp
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <NRF24_openReadingPipe+0x64>)
 80021e8:	5d18      	ldrb	r0, [r3, r4]
 80021ea:	f7ff ff97 	bl	800211c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <NRF24_openReadingPipe+0x68>)
 80021f0:	7819      	ldrb	r1, [r3, #0]
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <NRF24_openReadingPipe+0x6c>)
 80021f4:	5d18      	ldrb	r0, [r3, r4]
 80021f6:	f7ff ff77 	bl	80020e8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80021fa:	2002      	movs	r0, #2
 80021fc:	f7ff ff32 	bl	8002064 <NRF24_read_register>
 8002200:	b240      	sxtb	r0, r0
 8002202:	2101      	movs	r1, #1
 8002204:	40a1      	lsls	r1, r4
 8002206:	4301      	orrs	r1, r0
 8002208:	b2c9      	uxtb	r1, r1
 800220a:	2002      	movs	r0, #2
 800220c:	f7ff ff6c 	bl	80020e8 <NRF24_write_register>
	}

}
 8002210:	b002      	add	sp, #8
 8002212:	bd10      	pop	{r4, pc}
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8002214:	2205      	movs	r2, #5
 8002216:	4669      	mov	r1, sp
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <NRF24_openReadingPipe+0x64>)
 800221a:	5d18      	ldrb	r0, [r3, r4]
 800221c:	f7ff ff7e 	bl	800211c <NRF24_write_registerN>
 8002220:	e7e5      	b.n	80021ee <NRF24_openReadingPipe+0x2a>
 8002222:	bf00      	nop
 8002224:	20000350 	.word	0x20000350
 8002228:	0800e3ac 	.word	0x0800e3ac
 800222c:	20000348 	.word	0x20000348
 8002230:	0800e3b4 	.word	0x0800e3b4

08002234 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8002234:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8002236:	f001 010f 	and.w	r1, r1, #15
 800223a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800223e:	b2c9      	uxtb	r1, r1
 8002240:	2004      	movs	r0, #4
 8002242:	f7ff ff51 	bl	80020e8 <NRF24_write_register>
}
 8002246:	bd08      	pop	{r3, pc}

08002248 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8002248:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800224a:	4601      	mov	r1, r0
 800224c:	287f      	cmp	r0, #127	; 0x7f
 800224e:	bf28      	it	cs
 8002250:	217f      	movcs	r1, #127	; 0x7f
 8002252:	2005      	movs	r0, #5
 8002254:	f7ff ff48 	bl	80020e8 <NRF24_write_register>
}
 8002258:	bd08      	pop	{r3, pc}
	...

0800225c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 800225c:	2820      	cmp	r0, #32
 800225e:	bf28      	it	cs
 8002260:	2020      	movcs	r0, #32
 8002262:	4b01      	ldr	r3, [pc, #4]	; (8002268 <NRF24_setPayloadSize+0xc>)
 8002264:	7018      	strb	r0, [r3, #0]
}
 8002266:	4770      	bx	lr
 8002268:	20000348 	.word	0x20000348

0800226c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 800226c:	4b01      	ldr	r3, [pc, #4]	; (8002274 <NRF24_getPayloadSize+0x8>)
 800226e:	7818      	ldrb	r0, [r3, #0]
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000348 	.word	0x20000348

08002278 <NRF24_read_payload>:
{
 8002278:	b570      	push	{r4, r5, r6, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	4606      	mov	r6, r0
 800227e:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002280:	f7ff fff4 	bl	800226c <NRF24_getPayloadSize>
 8002284:	4604      	mov	r4, r0
 8002286:	42a8      	cmp	r0, r5
 8002288:	d817      	bhi.n	80022ba <NRF24_read_payload+0x42>
	NRF24_csn(0);
 800228a:	2000      	movs	r0, #0
 800228c:	f7ff febe 	bl	800200c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8002290:	a902      	add	r1, sp, #8
 8002292:	2361      	movs	r3, #97	; 0x61
 8002294:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1,10);
 8002298:	4d09      	ldr	r5, [pc, #36]	; (80022c0 <NRF24_read_payload+0x48>)
 800229a:	230a      	movs	r3, #10
 800229c:	2201      	movs	r2, #1
 800229e:	4628      	mov	r0, r5
 80022a0:	f002 fcee 	bl	8004c80 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len,10);
 80022a4:	230a      	movs	r3, #10
 80022a6:	b2a2      	uxth	r2, r4
 80022a8:	4631      	mov	r1, r6
 80022aa:	4628      	mov	r0, r5
 80022ac:	f002 fecc 	bl	8005048 <HAL_SPI_Receive>
	NRF24_csn(1);
 80022b0:	2001      	movs	r0, #1
 80022b2:	f7ff feab 	bl	800200c <NRF24_csn>
}
 80022b6:	b002      	add	sp, #8
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80022ba:	462c      	mov	r4, r5
 80022bc:	e7e5      	b.n	800228a <NRF24_read_payload+0x12>
 80022be:	bf00      	nop
 80022c0:	200002b0 	.word	0x200002b0

080022c4 <NRF24_read>:
{
 80022c4:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 80022c6:	f7ff ffd7 	bl	8002278 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80022ca:	2017      	movs	r0, #23
 80022cc:	f7ff feca 	bl	8002064 <NRF24_read_register>
 80022d0:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 80022d4:	f7ff ff48 	bl	8002168 <NRF24_flush_rx>
}
 80022d8:	4620      	mov	r0, r4
 80022da:	bd10      	pop	{r4, pc}

080022dc <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 80022dc:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80022de:	201d      	movs	r0, #29
 80022e0:	f7ff fec0 	bl	8002064 <NRF24_read_register>
 80022e4:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80022e8:	201d      	movs	r0, #29
 80022ea:	f7ff fefd 	bl	80020e8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80022ee:	2100      	movs	r1, #0
 80022f0:	201c      	movs	r0, #28
 80022f2:	f7ff fef9 	bl	80020e8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 80022f6:	bd08      	pop	{r3, pc}

080022f8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80022f8:	b508      	push	{r3, lr}
	if ( enable )
 80022fa:	b920      	cbnz	r0, 8002306 <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 80022fc:	2100      	movs	r1, #0
 80022fe:	2001      	movs	r0, #1
 8002300:	f7ff fef2 	bl	80020e8 <NRF24_write_register>
}
 8002304:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 8002306:	213f      	movs	r1, #63	; 0x3f
 8002308:	2001      	movs	r0, #1
 800230a:	f7ff feed 	bl	80020e8 <NRF24_write_register>
 800230e:	e7f9      	b.n	8002304 <NRF24_setAutoAck+0xc>

08002310 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8002310:	b510      	push	{r4, lr}
 8002312:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002314:	2006      	movs	r0, #6
 8002316:	f7ff fea5 	bl	8002064 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800231a:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 800231e:	2c03      	cmp	r4, #3
 8002320:	d009      	beq.n	8002336 <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 8002322:	2c02      	cmp	r4, #2
 8002324:	d00d      	beq.n	8002342 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 8002326:	2c01      	cmp	r4, #1
 8002328:	d00e      	beq.n	8002348 <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 800232a:	b134      	cbz	r4, 800233a <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 800232c:	2c04      	cmp	r4, #4
 800232e:	d104      	bne.n	800233a <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002330:	f041 0106 	orr.w	r1, r1, #6
 8002334:	e001      	b.n	800233a <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002336:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 800233a:	2006      	movs	r0, #6
 800233c:	f7ff fed4 	bl	80020e8 <NRF24_write_register>
}
 8002340:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 8002342:	f041 0104 	orr.w	r1, r1, #4
 8002346:	e7f8      	b.n	800233a <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 8002348:	f041 0102 	orr.w	r1, r1, #2
 800234c:	e7f5      	b.n	800233a <NRF24_setPALevel+0x2a>

0800234e <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800234e:	b538      	push	{r3, r4, r5, lr}
 8002350:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002352:	2006      	movs	r0, #6
 8002354:	f7ff fe86 	bl	8002064 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8002358:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 800235c:	2d02      	cmp	r5, #2
 800235e:	d00c      	beq.n	800237a <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 8002360:	2d01      	cmp	r5, #1
 8002362:	d00d      	beq.n	8002380 <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 8002364:	4621      	mov	r1, r4
 8002366:	2006      	movs	r0, #6
 8002368:	f7ff febe 	bl	80020e8 <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800236c:	2006      	movs	r0, #6
 800236e:	f7ff fe79 	bl	8002064 <NRF24_read_register>
 8002372:	42a0      	cmp	r0, r4
 8002374:	d007      	beq.n	8002386 <NRF24_setDataRate+0x38>
	bool result = false;
 8002376:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 8002378:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 800237a:	f044 0420 	orr.w	r4, r4, #32
 800237e:	e7f1      	b.n	8002364 <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 8002380:	f044 0408 	orr.w	r4, r4, #8
 8002384:	e7ee      	b.n	8002364 <NRF24_setDataRate+0x16>
		result = true;
 8002386:	2001      	movs	r0, #1
 8002388:	e7f6      	b.n	8002378 <NRF24_setDataRate+0x2a>

0800238a <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800238a:	b510      	push	{r4, lr}
 800238c:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800238e:	2000      	movs	r0, #0
 8002390:	f7ff fe68 	bl	8002064 <NRF24_read_register>
 8002394:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 8002398:	b11c      	cbz	r4, 80023a2 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 800239a:	2c01      	cmp	r4, #1
 800239c:	d005      	beq.n	80023aa <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 800239e:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff fea0 	bl	80020e8 <NRF24_write_register>
}
 80023a8:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 80023aa:	f041 0108 	orr.w	r1, r1, #8
 80023ae:	e7f8      	b.n	80023a2 <NRF24_setCRCLength+0x18>

080023b0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80023b0:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff fe56 	bl	8002064 <NRF24_read_register>
 80023b8:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 80023bc:	2000      	movs	r0, #0
 80023be:	f7ff fe93 	bl	80020e8 <NRF24_write_register>
}
 80023c2:	bd08      	pop	{r3, pc}

080023c4 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 80023c8:	f7ff fed4 	bl	8002174 <NRF24_get_status>
 80023cc:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf14      	ite	ne
 80023d4:	2501      	movne	r5, #1
 80023d6:	2500      	moveq	r5, #0

	if (result)
 80023d8:	d00b      	beq.n	80023f2 <NRF24_availablePipe+0x2e>
 80023da:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 80023dc:	b116      	cbz	r6, 80023e4 <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80023de:	f3c0 0342 	ubfx	r3, r0, #1, #3
 80023e2:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80023e4:	2140      	movs	r1, #64	; 0x40
 80023e6:	2007      	movs	r0, #7
 80023e8:	f7ff fe7e 	bl	80020e8 <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 80023ec:	f014 0f20 	tst.w	r4, #32
 80023f0:	d101      	bne.n	80023f6 <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 80023f2:	4628      	mov	r0, r5
 80023f4:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80023f6:	2120      	movs	r1, #32
 80023f8:	2007      	movs	r0, #7
 80023fa:	f7ff fe75 	bl	80020e8 <NRF24_write_register>
 80023fe:	e7f8      	b.n	80023f2 <NRF24_availablePipe+0x2e>

08002400 <NRF24_available>:
{
 8002400:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 8002402:	2000      	movs	r0, #0
 8002404:	f7ff ffde 	bl	80023c4 <NRF24_availablePipe>
}
 8002408:	bd08      	pop	{r3, pc}

0800240a <NRF24_writeAckPayload>:
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 800240a:	b570      	push	{r4, r5, r6, lr}
 800240c:	4604      	mov	r4, r0
 800240e:	460d      	mov	r5, r1
	const uint8_t* current = (uint8_t *)buf;
	const uint8_t max_payload_size = 32;
	uint8_t data_len = MIN(len,max_payload_size);
 8002410:	2a20      	cmp	r2, #32
 8002412:	bf28      	it	cs
 8002414:	2220      	movcs	r2, #32
 8002416:	4616      	mov	r6, r2

	NRF24_csn(0);
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff fdf7 	bl	800200c <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 800241e:	f004 0007 	and.w	r0, r4, #7
 8002422:	4632      	mov	r2, r6
 8002424:	4629      	mov	r1, r5
 8002426:	f040 00a8 	orr.w	r0, r0, #168	; 0xa8
 800242a:	f7ff fe77 	bl	800211c <NRF24_write_registerN>
	NRF24_csn(1);
 800242e:	2001      	movs	r0, #1
 8002430:	f7ff fdec 	bl	800200c <NRF24_csn>
}
 8002434:	bd70      	pop	{r4, r5, r6, pc}

08002436 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8002436:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002438:	2170      	movs	r1, #112	; 0x70
 800243a:	2007      	movs	r0, #7
 800243c:	f7ff fe54 	bl	80020e8 <NRF24_write_register>
}
 8002440:	bd08      	pop	{r3, pc}
	...

08002444 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8002444:	b500      	push	{lr}
 8002446:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff fddf 	bl	800200c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800244e:	2350      	movs	r3, #80	; 0x50
 8002450:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 8002454:	2373      	movs	r3, #115	; 0x73
 8002456:	f88d 3005 	strb.w	r3, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2,2);
 800245a:	2302      	movs	r3, #2
 800245c:	461a      	mov	r2, r3
 800245e:	a901      	add	r1, sp, #4
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <NRF24_ACTIVATE_cmd+0x30>)
 8002462:	f002 fc0d 	bl	8004c80 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}

	NRF24_csn(1);
 8002466:	2001      	movs	r0, #1
 8002468:	f7ff fdd0 	bl	800200c <NRF24_csn>
}
 800246c:	b003      	add	sp, #12
 800246e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002472:	bf00      	nop
 8002474:	200002b0 	.word	0x200002b0

08002478 <NRF24_enableAckPayload>:
{
 8002478:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800247a:	201d      	movs	r0, #29
 800247c:	f7ff fdf2 	bl	8002064 <NRF24_read_register>
 8002480:	f040 0106 	orr.w	r1, r0, #6
 8002484:	b2c9      	uxtb	r1, r1
 8002486:	201d      	movs	r0, #29
 8002488:	f7ff fe2e 	bl	80020e8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800248c:	201d      	movs	r0, #29
 800248e:	f7ff fde9 	bl	8002064 <NRF24_read_register>
 8002492:	b148      	cbz	r0, 80024a8 <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002494:	201c      	movs	r0, #28
 8002496:	f7ff fde5 	bl	8002064 <NRF24_read_register>
 800249a:	f040 0103 	orr.w	r1, r0, #3
 800249e:	b2c9      	uxtb	r1, r1
 80024a0:	201c      	movs	r0, #28
 80024a2:	f7ff fe21 	bl	80020e8 <NRF24_write_register>
}
 80024a6:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 80024a8:	f7ff ffcc 	bl	8002444 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80024ac:	201d      	movs	r0, #29
 80024ae:	f7ff fdd9 	bl	8002064 <NRF24_read_register>
 80024b2:	f040 0106 	orr.w	r1, r0, #6
 80024b6:	b2c9      	uxtb	r1, r1
 80024b8:	201d      	movs	r0, #29
 80024ba:	f7ff fe15 	bl	80020e8 <NRF24_write_register>
 80024be:	e7e9      	b.n	8002494 <NRF24_enableAckPayload+0x1c>

080024c0 <NRF24_begin>:
{
 80024c0:	b082      	sub	sp, #8
 80024c2:	b570      	push	{r4, r5, r6, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	4606      	mov	r6, r0
 80024c8:	460d      	mov	r5, r1
 80024ca:	4614      	mov	r4, r2
 80024cc:	9307      	str	r3, [sp, #28]
	memcpy(&nrf24_hspi, &hspi2, sizeof(hspi2));
 80024ce:	2258      	movs	r2, #88	; 0x58
 80024d0:	4961      	ldr	r1, [pc, #388]	; (8002658 <NRF24_begin+0x198>)
 80024d2:	4862      	ldr	r0, [pc, #392]	; (800265c <NRF24_begin+0x19c>)
 80024d4:	f007 fcfb 	bl	8009ece <memcpy>
	nrf24_PORT = nrf24PORT;
 80024d8:	4b61      	ldr	r3, [pc, #388]	; (8002660 <NRF24_begin+0x1a0>)
 80024da:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80024dc:	4b61      	ldr	r3, [pc, #388]	; (8002664 <NRF24_begin+0x1a4>)
 80024de:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80024e0:	4b61      	ldr	r3, [pc, #388]	; (8002668 <NRF24_begin+0x1a8>)
 80024e2:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7ff fd91 	bl	800200c <NRF24_csn>
	NRF24_ce(0);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff fda4 	bl	8002038 <NRF24_ce>
	HAL_Delay(5);
 80024f0:	2005      	movs	r0, #5
 80024f2:	f000 fd79 	bl	8002fe8 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 80024f6:	2108      	movs	r1, #8
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff fdf5 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80024fe:	213f      	movs	r1, #63	; 0x3f
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fdf1 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8002506:	2103      	movs	r1, #3
 8002508:	2002      	movs	r0, #2
 800250a:	f7ff fded 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800250e:	2103      	movs	r1, #3
 8002510:	4608      	mov	r0, r1
 8002512:	f7ff fde9 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8002516:	2103      	movs	r1, #3
 8002518:	2004      	movs	r0, #4
 800251a:	f7ff fde5 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800251e:	2102      	movs	r1, #2
 8002520:	2005      	movs	r0, #5
 8002522:	f7ff fde1 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8002526:	210f      	movs	r1, #15
 8002528:	2006      	movs	r0, #6
 800252a:	f7ff fddd 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800252e:	210e      	movs	r1, #14
 8002530:	2007      	movs	r0, #7
 8002532:	f7ff fdd9 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8002536:	2100      	movs	r1, #0
 8002538:	2008      	movs	r0, #8
 800253a:	f7ff fdd5 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800253e:	2100      	movs	r1, #0
 8002540:	2009      	movs	r0, #9
 8002542:	f7ff fdd1 	bl	80020e8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8002546:	24e7      	movs	r4, #231	; 0xe7
 8002548:	f88d 4004 	strb.w	r4, [sp, #4]
 800254c:	f88d 4003 	strb.w	r4, [sp, #3]
 8002550:	f88d 4002 	strb.w	r4, [sp, #2]
 8002554:	f88d 4001 	strb.w	r4, [sp, #1]
 8002558:	ad02      	add	r5, sp, #8
 800255a:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800255e:	2205      	movs	r2, #5
 8002560:	4629      	mov	r1, r5
 8002562:	200a      	movs	r0, #10
 8002564:	f7ff fdda 	bl	800211c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8002568:	23c2      	movs	r3, #194	; 0xc2
 800256a:	f88d 3004 	strb.w	r3, [sp, #4]
 800256e:	f88d 3003 	strb.w	r3, [sp, #3]
 8002572:	f88d 3002 	strb.w	r3, [sp, #2]
 8002576:	f88d 3001 	strb.w	r3, [sp, #1]
 800257a:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800257e:	2205      	movs	r2, #5
 8002580:	4629      	mov	r1, r5
 8002582:	200b      	movs	r0, #11
 8002584:	f7ff fdca 	bl	800211c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8002588:	21c3      	movs	r1, #195	; 0xc3
 800258a:	200c      	movs	r0, #12
 800258c:	f7ff fdac 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8002590:	21c4      	movs	r1, #196	; 0xc4
 8002592:	200d      	movs	r0, #13
 8002594:	f7ff fda8 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8002598:	21c5      	movs	r1, #197	; 0xc5
 800259a:	200e      	movs	r0, #14
 800259c:	f7ff fda4 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80025a0:	21c6      	movs	r1, #198	; 0xc6
 80025a2:	200f      	movs	r0, #15
 80025a4:	f7ff fda0 	bl	80020e8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80025a8:	f88d 4004 	strb.w	r4, [sp, #4]
 80025ac:	f88d 4003 	strb.w	r4, [sp, #3]
 80025b0:	f88d 4002 	strb.w	r4, [sp, #2]
 80025b4:	f88d 4001 	strb.w	r4, [sp, #1]
 80025b8:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80025bc:	2205      	movs	r2, #5
 80025be:	4629      	mov	r1, r5
 80025c0:	2010      	movs	r0, #16
 80025c2:	f7ff fdab 	bl	800211c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80025c6:	2100      	movs	r1, #0
 80025c8:	2011      	movs	r0, #17
 80025ca:	f7ff fd8d 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80025ce:	2100      	movs	r1, #0
 80025d0:	2012      	movs	r0, #18
 80025d2:	f7ff fd89 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80025d6:	2100      	movs	r1, #0
 80025d8:	2013      	movs	r0, #19
 80025da:	f7ff fd85 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80025de:	2100      	movs	r1, #0
 80025e0:	2014      	movs	r0, #20
 80025e2:	f7ff fd81 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80025e6:	2100      	movs	r1, #0
 80025e8:	2015      	movs	r0, #21
 80025ea:	f7ff fd7d 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80025ee:	2100      	movs	r1, #0
 80025f0:	2016      	movs	r0, #22
 80025f2:	f7ff fd79 	bl	80020e8 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 80025f6:	f7ff ff25 	bl	8002444 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80025fa:	2100      	movs	r1, #0
 80025fc:	201c      	movs	r0, #28
 80025fe:	f7ff fd73 	bl	80020e8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8002602:	2100      	movs	r1, #0
 8002604:	201d      	movs	r0, #29
 8002606:	f7ff fd6f 	bl	80020e8 <NRF24_write_register>
	NRF24_setRetries(15, 15);
 800260a:	210f      	movs	r1, #15
 800260c:	4608      	mov	r0, r1
 800260e:	f7ff fe11 	bl	8002234 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 8002612:	2002      	movs	r0, #2
 8002614:	f7ff fe7c 	bl	8002310 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fe98 	bl	800234e <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 800261e:	2002      	movs	r0, #2
 8002620:	f7ff feb3 	bl	800238a <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 8002624:	f7ff fe5a 	bl	80022dc <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 8002628:	2020      	movs	r0, #32
 800262a:	f7ff fe17 	bl	800225c <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 800262e:	2001      	movs	r0, #1
 8002630:	f7ff fe62 	bl	80022f8 <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 8002634:	f7ff ff20 	bl	8002478 <NRF24_enableAckPayload>
	NRF24_resetStatus();
 8002638:	f7ff fefd 	bl	8002436 <NRF24_resetStatus>
	NRF24_setChannel(76);
 800263c:	204c      	movs	r0, #76	; 0x4c
 800263e:	f7ff fe03 	bl	8002248 <NRF24_setChannel>
	NRF24_flush_tx();
 8002642:	f7ff fd8b 	bl	800215c <NRF24_flush_tx>
	NRF24_flush_rx();
 8002646:	f7ff fd8f 	bl	8002168 <NRF24_flush_rx>
	NRF24_powerDown();
 800264a:	f7ff feb1 	bl	80023b0 <NRF24_powerDown>
}
 800264e:	b002      	add	sp, #8
 8002650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002654:	b002      	add	sp, #8
 8002656:	4770      	bx	lr
 8002658:	20004968 	.word	0x20004968
 800265c:	200002b0 	.word	0x200002b0
 8002660:	200002ac 	.word	0x200002ac
 8002664:	200002aa 	.word	0x200002aa
 8002668:	200002a8 	.word	0x200002a8

0800266c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002670:	ac07      	add	r4, sp, #28
 8002672:	4dc4      	ldr	r5, [pc, #784]	; (8002984 <printRadioSettings+0x318>)
 8002674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	f824 3b02 	strh.w	r3, [r4], #2
 8002686:	0c1b      	lsrs	r3, r3, #16
 8002688:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800268a:	a807      	add	r0, sp, #28
 800268c:	f7fd fda8 	bl	80001e0 <strlen>
 8002690:	230a      	movs	r3, #10
 8002692:	b282      	uxth	r2, r0
 8002694:	a907      	add	r1, sp, #28
 8002696:	48bc      	ldr	r0, [pc, #752]	; (8002988 <printRadioSettings+0x31c>)
 8002698:	f003 fb6a 	bl	8005d70 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff fce1 	bl	8002064 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 80026a2:	f010 0f08 	tst.w	r0, #8
 80026a6:	f000 8261 	beq.w	8002b6c <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80026aa:	f010 0f04 	tst.w	r0, #4
 80026ae:	f000 8251 	beq.w	8002b54 <printRadioSettings+0x4e8>
 80026b2:	ac07      	add	r4, sp, #28
 80026b4:	4db5      	ldr	r5, [pc, #724]	; (800298c <printRadioSettings+0x320>)
 80026b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80026c2:	a807      	add	r0, sp, #28
 80026c4:	f7fd fd8c 	bl	80001e0 <strlen>
 80026c8:	4caf      	ldr	r4, [pc, #700]	; (8002988 <printRadioSettings+0x31c>)
 80026ca:	230a      	movs	r3, #10
 80026cc:	b282      	uxth	r2, r0
 80026ce:	a907      	add	r1, sp, #28
 80026d0:	4620      	mov	r0, r4
 80026d2:	f003 fb4d 	bl	8005d70 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80026d6:	2001      	movs	r0, #1
 80026d8:	f7ff fcc4 	bl	8002064 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80026dc:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80026e0:	9303      	str	r3, [sp, #12]
 80026e2:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80026f8:	f000 0201 	and.w	r2, r0, #1
 80026fc:	49a4      	ldr	r1, [pc, #656]	; (8002990 <printRadioSettings+0x324>)
 80026fe:	a807      	add	r0, sp, #28
 8002700:	f008 fab8 	bl	800ac74 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002704:	a807      	add	r0, sp, #28
 8002706:	f7fd fd6b 	bl	80001e0 <strlen>
 800270a:	230a      	movs	r3, #10
 800270c:	b282      	uxth	r2, r0
 800270e:	a907      	add	r1, sp, #28
 8002710:	4620      	mov	r0, r4
 8002712:	f003 fb2d 	bl	8005d70 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8002716:	2002      	movs	r0, #2
 8002718:	f7ff fca4 	bl	8002064 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800271c:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002720:	9303      	str	r3, [sp, #12]
 8002722:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002726:	9302      	str	r3, [sp, #8]
 8002728:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002738:	f000 0201 	and.w	r2, r0, #1
 800273c:	4995      	ldr	r1, [pc, #596]	; (8002994 <printRadioSettings+0x328>)
 800273e:	a807      	add	r0, sp, #28
 8002740:	f008 fa98 	bl	800ac74 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002744:	a807      	add	r0, sp, #28
 8002746:	f7fd fd4b 	bl	80001e0 <strlen>
 800274a:	230a      	movs	r3, #10
 800274c:	b282      	uxth	r2, r0
 800274e:	a907      	add	r1, sp, #28
 8002750:	4620      	mov	r0, r4
 8002752:	f003 fb0d 	bl	8005d70 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8002756:	2003      	movs	r0, #3
 8002758:	f7ff fc84 	bl	8002064 <NRF24_read_register>
 800275c:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8002760:	3202      	adds	r2, #2
 8002762:	498d      	ldr	r1, [pc, #564]	; (8002998 <printRadioSettings+0x32c>)
 8002764:	a807      	add	r0, sp, #28
 8002766:	f008 fa85 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800276a:	a807      	add	r0, sp, #28
 800276c:	f7fd fd38 	bl	80001e0 <strlen>
 8002770:	230a      	movs	r3, #10
 8002772:	b282      	uxth	r2, r0
 8002774:	a907      	add	r1, sp, #28
 8002776:	4620      	mov	r0, r4
 8002778:	f003 fafa 	bl	8005d70 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800277c:	2005      	movs	r0, #5
 800277e:	f7ff fc71 	bl	8002064 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8002782:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8002786:	4985      	ldr	r1, [pc, #532]	; (800299c <printRadioSettings+0x330>)
 8002788:	a807      	add	r0, sp, #28
 800278a:	f008 fa73 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800278e:	a807      	add	r0, sp, #28
 8002790:	f7fd fd26 	bl	80001e0 <strlen>
 8002794:	230a      	movs	r3, #10
 8002796:	b282      	uxth	r2, r0
 8002798:	a907      	add	r1, sp, #28
 800279a:	4620      	mov	r0, r4
 800279c:	f003 fae8 	bl	8005d70 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80027a0:	2006      	movs	r0, #6
 80027a2:	f7ff fc5f 	bl	8002064 <NRF24_read_register>
 80027a6:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80027a8:	f010 0f08 	tst.w	r0, #8
 80027ac:	f000 81e5 	beq.w	8002b7a <printRadioSettings+0x50e>
 80027b0:	ad07      	add	r5, sp, #28
 80027b2:	4e7b      	ldr	r6, [pc, #492]	; (80029a0 <printRadioSettings+0x334>)
 80027b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80027bc:	f845 0b04 	str.w	r0, [r5], #4
 80027c0:	f825 1b02 	strh.w	r1, [r5], #2
 80027c4:	0c09      	lsrs	r1, r1, #16
 80027c6:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027c8:	a807      	add	r0, sp, #28
 80027ca:	f7fd fd09 	bl	80001e0 <strlen>
 80027ce:	230a      	movs	r3, #10
 80027d0:	b282      	uxth	r2, r0
 80027d2:	a907      	add	r1, sp, #28
 80027d4:	486c      	ldr	r0, [pc, #432]	; (8002988 <printRadioSettings+0x31c>)
 80027d6:	f003 facb 	bl	8005d70 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 80027da:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80027de:	2c00      	cmp	r4, #0
 80027e0:	f000 81d8 	beq.w	8002b94 <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80027e4:	2c01      	cmp	r4, #1
 80027e6:	f000 81dc 	beq.w	8002ba2 <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80027ea:	2c02      	cmp	r4, #2
 80027ec:	f000 81e0 	beq.w	8002bb0 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80027f0:	2c03      	cmp	r4, #3
 80027f2:	f000 81e7 	beq.w	8002bc4 <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027f6:	a807      	add	r0, sp, #28
 80027f8:	f7fd fcf2 	bl	80001e0 <strlen>
 80027fc:	4c62      	ldr	r4, [pc, #392]	; (8002988 <printRadioSettings+0x31c>)
 80027fe:	230a      	movs	r3, #10
 8002800:	b282      	uxth	r2, r0
 8002802:	a907      	add	r1, sp, #28
 8002804:	4620      	mov	r0, r4
 8002806:	f003 fab3 	bl	8005d70 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800280a:	2205      	movs	r2, #5
 800280c:	a905      	add	r1, sp, #20
 800280e:	200a      	movs	r0, #10
 8002810:	f7ff fc4a 	bl	80020a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002814:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002818:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800281c:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002820:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002824:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002828:	9502      	str	r5, [sp, #8]
 800282a:	9001      	str	r0, [sp, #4]
 800282c:	9100      	str	r1, [sp, #0]
 800282e:	495d      	ldr	r1, [pc, #372]	; (80029a4 <printRadioSettings+0x338>)
 8002830:	a807      	add	r0, sp, #28
 8002832:	f008 fa1f 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002836:	a807      	add	r0, sp, #28
 8002838:	f7fd fcd2 	bl	80001e0 <strlen>
 800283c:	230a      	movs	r3, #10
 800283e:	b282      	uxth	r2, r0
 8002840:	a907      	add	r1, sp, #28
 8002842:	4620      	mov	r0, r4
 8002844:	f003 fa94 	bl	8005d70 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8002848:	2205      	movs	r2, #5
 800284a:	a905      	add	r1, sp, #20
 800284c:	200b      	movs	r0, #11
 800284e:	f7ff fc2b 	bl	80020a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002852:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002856:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800285a:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800285e:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002862:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002866:	9502      	str	r5, [sp, #8]
 8002868:	9001      	str	r0, [sp, #4]
 800286a:	9100      	str	r1, [sp, #0]
 800286c:	494e      	ldr	r1, [pc, #312]	; (80029a8 <printRadioSettings+0x33c>)
 800286e:	a807      	add	r0, sp, #28
 8002870:	f008 fa00 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002874:	a807      	add	r0, sp, #28
 8002876:	f7fd fcb3 	bl	80001e0 <strlen>
 800287a:	230a      	movs	r3, #10
 800287c:	b282      	uxth	r2, r0
 800287e:	a907      	add	r1, sp, #28
 8002880:	4620      	mov	r0, r4
 8002882:	f003 fa75 	bl	8005d70 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8002886:	2201      	movs	r2, #1
 8002888:	a905      	add	r1, sp, #20
 800288a:	200c      	movs	r0, #12
 800288c:	f7ff fc0c 	bl	80020a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002890:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002894:	4945      	ldr	r1, [pc, #276]	; (80029ac <printRadioSettings+0x340>)
 8002896:	a807      	add	r0, sp, #28
 8002898:	f008 f9ec 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800289c:	a807      	add	r0, sp, #28
 800289e:	f7fd fc9f 	bl	80001e0 <strlen>
 80028a2:	230a      	movs	r3, #10
 80028a4:	b282      	uxth	r2, r0
 80028a6:	a907      	add	r1, sp, #28
 80028a8:	4620      	mov	r0, r4
 80028aa:	f003 fa61 	bl	8005d70 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80028ae:	2201      	movs	r2, #1
 80028b0:	a905      	add	r1, sp, #20
 80028b2:	200d      	movs	r0, #13
 80028b4:	f7ff fbf8 	bl	80020a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80028b8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80028bc:	493c      	ldr	r1, [pc, #240]	; (80029b0 <printRadioSettings+0x344>)
 80028be:	a807      	add	r0, sp, #28
 80028c0:	f008 f9d8 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028c4:	a807      	add	r0, sp, #28
 80028c6:	f7fd fc8b 	bl	80001e0 <strlen>
 80028ca:	230a      	movs	r3, #10
 80028cc:	b282      	uxth	r2, r0
 80028ce:	a907      	add	r1, sp, #28
 80028d0:	4620      	mov	r0, r4
 80028d2:	f003 fa4d 	bl	8005d70 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80028d6:	2201      	movs	r2, #1
 80028d8:	a905      	add	r1, sp, #20
 80028da:	200e      	movs	r0, #14
 80028dc:	f7ff fbe4 	bl	80020a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80028e0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80028e4:	4933      	ldr	r1, [pc, #204]	; (80029b4 <printRadioSettings+0x348>)
 80028e6:	a807      	add	r0, sp, #28
 80028e8:	f008 f9c4 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028ec:	a807      	add	r0, sp, #28
 80028ee:	f7fd fc77 	bl	80001e0 <strlen>
 80028f2:	230a      	movs	r3, #10
 80028f4:	b282      	uxth	r2, r0
 80028f6:	a907      	add	r1, sp, #28
 80028f8:	4620      	mov	r0, r4
 80028fa:	f003 fa39 	bl	8005d70 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80028fe:	2201      	movs	r2, #1
 8002900:	a905      	add	r1, sp, #20
 8002902:	200f      	movs	r0, #15
 8002904:	f7ff fbd0 	bl	80020a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002908:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800290c:	492a      	ldr	r1, [pc, #168]	; (80029b8 <printRadioSettings+0x34c>)
 800290e:	a807      	add	r0, sp, #28
 8002910:	f008 f9b0 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002914:	a807      	add	r0, sp, #28
 8002916:	f7fd fc63 	bl	80001e0 <strlen>
 800291a:	230a      	movs	r3, #10
 800291c:	b282      	uxth	r2, r0
 800291e:	a907      	add	r1, sp, #28
 8002920:	4620      	mov	r0, r4
 8002922:	f003 fa25 	bl	8005d70 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8002926:	2205      	movs	r2, #5
 8002928:	a905      	add	r1, sp, #20
 800292a:	2010      	movs	r0, #16
 800292c:	f7ff fbbc 	bl	80020a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002930:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002934:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002938:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800293c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002940:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002944:	9502      	str	r5, [sp, #8]
 8002946:	9001      	str	r0, [sp, #4]
 8002948:	9100      	str	r1, [sp, #0]
 800294a:	491c      	ldr	r1, [pc, #112]	; (80029bc <printRadioSettings+0x350>)
 800294c:	a807      	add	r0, sp, #28
 800294e:	f008 f991 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002952:	a807      	add	r0, sp, #28
 8002954:	f7fd fc44 	bl	80001e0 <strlen>
 8002958:	230a      	movs	r3, #10
 800295a:	b282      	uxth	r2, r0
 800295c:	a907      	add	r1, sp, #28
 800295e:	4620      	mov	r0, r4
 8002960:	f003 fa06 	bl	8005d70 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8002964:	2011      	movs	r0, #17
 8002966:	f7ff fb7d 	bl	8002064 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800296a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800296e:	4914      	ldr	r1, [pc, #80]	; (80029c0 <printRadioSettings+0x354>)
 8002970:	a807      	add	r0, sp, #28
 8002972:	f008 f97f 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002976:	a807      	add	r0, sp, #28
 8002978:	f7fd fc32 	bl	80001e0 <strlen>
 800297c:	230a      	movs	r3, #10
 800297e:	b282      	uxth	r2, r0
 8002980:	e020      	b.n	80029c4 <printRadioSettings+0x358>
 8002982:	bf00      	nop
 8002984:	0800e3bc 	.word	0x0800e3bc
 8002988:	20000308 	.word	0x20000308
 800298c:	0800e3f0 	.word	0x0800e3f0
 8002990:	0800e43c 	.word	0x0800e43c
 8002994:	0800e480 	.word	0x0800e480
 8002998:	0800e4cc 	.word	0x0800e4cc
 800299c:	0800e4e8 	.word	0x0800e4e8
 80029a0:	0800e4fc 	.word	0x0800e4fc
 80029a4:	0800e57c 	.word	0x0800e57c
 80029a8:	0800e5ac 	.word	0x0800e5ac
 80029ac:	0800e5dc 	.word	0x0800e5dc
 80029b0:	0800e604 	.word	0x0800e604
 80029b4:	0800e62c 	.word	0x0800e62c
 80029b8:	0800e654 	.word	0x0800e654
 80029bc:	0800e67c 	.word	0x0800e67c
 80029c0:	0800e6a8 	.word	0x0800e6a8
 80029c4:	a907      	add	r1, sp, #28
 80029c6:	4620      	mov	r0, r4
 80029c8:	f003 f9d2 	bl	8005d70 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80029cc:	2012      	movs	r0, #18
 80029ce:	f7ff fb49 	bl	8002064 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80029d2:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80029d6:	498a      	ldr	r1, [pc, #552]	; (8002c00 <printRadioSettings+0x594>)
 80029d8:	a807      	add	r0, sp, #28
 80029da:	f008 f94b 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029de:	a807      	add	r0, sp, #28
 80029e0:	f7fd fbfe 	bl	80001e0 <strlen>
 80029e4:	230a      	movs	r3, #10
 80029e6:	b282      	uxth	r2, r0
 80029e8:	a907      	add	r1, sp, #28
 80029ea:	4620      	mov	r0, r4
 80029ec:	f003 f9c0 	bl	8005d70 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80029f0:	2013      	movs	r0, #19
 80029f2:	f7ff fb37 	bl	8002064 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80029f6:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80029fa:	4982      	ldr	r1, [pc, #520]	; (8002c04 <printRadioSettings+0x598>)
 80029fc:	a807      	add	r0, sp, #28
 80029fe:	f008 f939 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a02:	a807      	add	r0, sp, #28
 8002a04:	f7fd fbec 	bl	80001e0 <strlen>
 8002a08:	230a      	movs	r3, #10
 8002a0a:	b282      	uxth	r2, r0
 8002a0c:	a907      	add	r1, sp, #28
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f003 f9ae 	bl	8005d70 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8002a14:	2014      	movs	r0, #20
 8002a16:	f7ff fb25 	bl	8002064 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a1a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a1e:	497a      	ldr	r1, [pc, #488]	; (8002c08 <printRadioSettings+0x59c>)
 8002a20:	a807      	add	r0, sp, #28
 8002a22:	f008 f927 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a26:	a807      	add	r0, sp, #28
 8002a28:	f7fd fbda 	bl	80001e0 <strlen>
 8002a2c:	230a      	movs	r3, #10
 8002a2e:	b282      	uxth	r2, r0
 8002a30:	a907      	add	r1, sp, #28
 8002a32:	4620      	mov	r0, r4
 8002a34:	f003 f99c 	bl	8005d70 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8002a38:	2015      	movs	r0, #21
 8002a3a:	f7ff fb13 	bl	8002064 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a3e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a42:	4972      	ldr	r1, [pc, #456]	; (8002c0c <printRadioSettings+0x5a0>)
 8002a44:	a807      	add	r0, sp, #28
 8002a46:	f008 f915 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a4a:	a807      	add	r0, sp, #28
 8002a4c:	f7fd fbc8 	bl	80001e0 <strlen>
 8002a50:	230a      	movs	r3, #10
 8002a52:	b282      	uxth	r2, r0
 8002a54:	a907      	add	r1, sp, #28
 8002a56:	4620      	mov	r0, r4
 8002a58:	f003 f98a 	bl	8005d70 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8002a5c:	2016      	movs	r0, #22
 8002a5e:	f7ff fb01 	bl	8002064 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a62:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a66:	496a      	ldr	r1, [pc, #424]	; (8002c10 <printRadioSettings+0x5a4>)
 8002a68:	a807      	add	r0, sp, #28
 8002a6a:	f008 f903 	bl	800ac74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a6e:	a807      	add	r0, sp, #28
 8002a70:	f7fd fbb6 	bl	80001e0 <strlen>
 8002a74:	230a      	movs	r3, #10
 8002a76:	b282      	uxth	r2, r0
 8002a78:	a907      	add	r1, sp, #28
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f003 f978 	bl	8005d70 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8002a80:	201c      	movs	r0, #28
 8002a82:	f7ff faef 	bl	8002064 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a86:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002a8a:	9303      	str	r3, [sp, #12]
 8002a8c:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002a90:	9302      	str	r3, [sp, #8]
 8002a92:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002aa2:	f000 0201 	and.w	r2, r0, #1
 8002aa6:	495b      	ldr	r1, [pc, #364]	; (8002c14 <printRadioSettings+0x5a8>)
 8002aa8:	a807      	add	r0, sp, #28
 8002aaa:	f008 f8e3 	bl	800ac74 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002aae:	a807      	add	r0, sp, #28
 8002ab0:	f7fd fb96 	bl	80001e0 <strlen>
 8002ab4:	230a      	movs	r3, #10
 8002ab6:	b282      	uxth	r2, r0
 8002ab8:	a907      	add	r1, sp, #28
 8002aba:	4620      	mov	r0, r4
 8002abc:	f003 f958 	bl	8005d70 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002ac0:	201d      	movs	r0, #29
 8002ac2:	f7ff facf 	bl	8002064 <NRF24_read_register>
 8002ac6:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002ac8:	f010 0f04 	tst.w	r0, #4
 8002acc:	f000 8081 	beq.w	8002bd2 <printRadioSettings+0x566>
 8002ad0:	ac07      	add	r4, sp, #28
 8002ad2:	4d51      	ldr	r5, [pc, #324]	; (8002c18 <printRadioSettings+0x5ac>)
 8002ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002adc:	f844 0b04 	str.w	r0, [r4], #4
 8002ae0:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002ae2:	a807      	add	r0, sp, #28
 8002ae4:	f7fd fb7c 	bl	80001e0 <strlen>
 8002ae8:	230a      	movs	r3, #10
 8002aea:	b282      	uxth	r2, r0
 8002aec:	a907      	add	r1, sp, #28
 8002aee:	484b      	ldr	r0, [pc, #300]	; (8002c1c <printRadioSettings+0x5b0>)
 8002af0:	f003 f93e 	bl	8005d70 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002af4:	f016 0f02 	tst.w	r6, #2
 8002af8:	d178      	bne.n	8002bec <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002afa:	ac07      	add	r4, sp, #28
 8002afc:	4d48      	ldr	r5, [pc, #288]	; (8002c20 <printRadioSettings+0x5b4>)
 8002afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b06:	c403      	stmia	r4!, {r0, r1}
 8002b08:	f824 2b02 	strh.w	r2, [r4], #2
 8002b0c:	0c12      	lsrs	r2, r2, #16
 8002b0e:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b10:	a807      	add	r0, sp, #28
 8002b12:	f7fd fb65 	bl	80001e0 <strlen>
 8002b16:	4e41      	ldr	r6, [pc, #260]	; (8002c1c <printRadioSettings+0x5b0>)
 8002b18:	230a      	movs	r3, #10
 8002b1a:	b282      	uxth	r2, r0
 8002b1c:	a907      	add	r1, sp, #28
 8002b1e:	4630      	mov	r0, r6
 8002b20:	f003 f926 	bl	8005d70 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002b24:	ac07      	add	r4, sp, #28
 8002b26:	4d3f      	ldr	r5, [pc, #252]	; (8002c24 <printRadioSettings+0x5b8>)
 8002b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	f824 3b02 	strh.w	r3, [r4], #2
 8002b3a:	0c1b      	lsrs	r3, r3, #16
 8002b3c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b3e:	a807      	add	r0, sp, #28
 8002b40:	f7fd fb4e 	bl	80001e0 <strlen>
 8002b44:	230a      	movs	r3, #10
 8002b46:	b282      	uxth	r2, r0
 8002b48:	a907      	add	r1, sp, #28
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	f003 f910 	bl	8005d70 <HAL_UART_Transmit>
}
 8002b50:	b020      	add	sp, #128	; 0x80
 8002b52:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8002b54:	ac07      	add	r4, sp, #28
 8002b56:	4d34      	ldr	r5, [pc, #208]	; (8002c28 <printRadioSettings+0x5bc>)
 8002b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b60:	c403      	stmia	r4!, {r0, r1}
 8002b62:	f824 2b02 	strh.w	r2, [r4], #2
 8002b66:	0c12      	lsrs	r2, r2, #16
 8002b68:	7022      	strb	r2, [r4, #0]
 8002b6a:	e5aa      	b.n	80026c2 <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8002b6c:	ac07      	add	r4, sp, #28
 8002b6e:	4d2f      	ldr	r5, [pc, #188]	; (8002c2c <printRadioSettings+0x5c0>)
 8002b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	6023      	str	r3, [r4, #0]
 8002b78:	e5a3      	b.n	80026c2 <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8002b7a:	ad07      	add	r5, sp, #28
 8002b7c:	4e2c      	ldr	r6, [pc, #176]	; (8002c30 <printRadioSettings+0x5c4>)
 8002b7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b82:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002b86:	f845 0b04 	str.w	r0, [r5], #4
 8002b8a:	f825 1b02 	strh.w	r1, [r5], #2
 8002b8e:	0c09      	lsrs	r1, r1, #16
 8002b90:	7029      	strb	r1, [r5, #0]
 8002b92:	e619      	b.n	80027c8 <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002b94:	ac07      	add	r4, sp, #28
 8002b96:	4d27      	ldr	r5, [pc, #156]	; (8002c34 <printRadioSettings+0x5c8>)
 8002b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	6023      	str	r3, [r4, #0]
 8002ba0:	e629      	b.n	80027f6 <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002ba2:	ac07      	add	r4, sp, #28
 8002ba4:	4d24      	ldr	r5, [pc, #144]	; (8002c38 <printRadioSettings+0x5cc>)
 8002ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002baa:	682b      	ldr	r3, [r5, #0]
 8002bac:	6023      	str	r3, [r4, #0]
 8002bae:	e622      	b.n	80027f6 <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002bb0:	ac07      	add	r4, sp, #28
 8002bb2:	4d22      	ldr	r5, [pc, #136]	; (8002c3c <printRadioSettings+0x5d0>)
 8002bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bb8:	682b      	ldr	r3, [r5, #0]
 8002bba:	f824 3b02 	strh.w	r3, [r4], #2
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	7023      	strb	r3, [r4, #0]
 8002bc2:	e618      	b.n	80027f6 <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002bc4:	ac07      	add	r4, sp, #28
 8002bc6:	4d1e      	ldr	r5, [pc, #120]	; (8002c40 <printRadioSettings+0x5d4>)
 8002bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	8023      	strh	r3, [r4, #0]
 8002bd0:	e611      	b.n	80027f6 <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002bd2:	ac07      	add	r4, sp, #28
 8002bd4:	4d1b      	ldr	r5, [pc, #108]	; (8002c44 <printRadioSettings+0x5d8>)
 8002bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bde:	f844 0b04 	str.w	r0, [r4], #4
 8002be2:	f824 1b02 	strh.w	r1, [r4], #2
 8002be6:	0c09      	lsrs	r1, r1, #16
 8002be8:	7021      	strb	r1, [r4, #0]
 8002bea:	e77a      	b.n	8002ae2 <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002bec:	ac07      	add	r4, sp, #28
 8002bee:	4d16      	ldr	r5, [pc, #88]	; (8002c48 <printRadioSettings+0x5dc>)
 8002bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bf8:	c403      	stmia	r4!, {r0, r1}
 8002bfa:	8022      	strh	r2, [r4, #0]
 8002bfc:	e788      	b.n	8002b10 <printRadioSettings+0x4a4>
 8002bfe:	bf00      	nop
 8002c00:	0800e6c4 	.word	0x0800e6c4
 8002c04:	0800e6e0 	.word	0x0800e6e0
 8002c08:	0800e6fc 	.word	0x0800e6fc
 8002c0c:	0800e718 	.word	0x0800e718
 8002c10:	0800e734 	.word	0x0800e734
 8002c14:	0800e750 	.word	0x0800e750
 8002c18:	0800e79c 	.word	0x0800e79c
 8002c1c:	20000308 	.word	0x20000308
 8002c20:	0800e7e8 	.word	0x0800e7e8
 8002c24:	0800e3bc 	.word	0x0800e3bc
 8002c28:	0800e40c 	.word	0x0800e40c
 8002c2c:	0800e428 	.word	0x0800e428
 8002c30:	0800e514 	.word	0x0800e514
 8002c34:	0800e52c 	.word	0x0800e52c
 8002c38:	0800e540 	.word	0x0800e540
 8002c3c:	0800e554 	.word	0x0800e554
 8002c40:	0800e568 	.word	0x0800e568
 8002c44:	0800e7b4 	.word	0x0800e7b4
 8002c48:	0800e7cc 	.word	0x0800e7cc

08002c4c <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = roll_setpoint - IMU_roll_value;
 8002c4c:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <pid_calculate_roll+0xac>)
 8002c52:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <pid_calculate_roll+0xb0>)
 8002c58:	edd3 6a00 	vldr	s13, [r3]
 8002c5c:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <pid_calculate_roll+0xb4>)
 8002c62:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8002c66:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <pid_calculate_roll+0xb8>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002c70:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002d08 <pid_calculate_roll+0xbc>
 8002c74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <pid_calculate_roll+0xc0>)
 8002c7a:	ed93 7a00 	vldr	s14, [r3]
 8002c7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c82:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <pid_calculate_roll+0xc4>)
 8002c88:	ed93 6a00 	vldr	s12, [r3]
 8002c8c:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002c90:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002c94:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <pid_calculate_roll+0xc8>)
 8002c96:	ed92 6a00 	vldr	s12, [r2]
 8002c9a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002c9e:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <pid_calculate_roll+0xcc>)
 8002ca0:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8002ca4:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8002ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <pid_calculate_roll+0xd0>)
 8002cb2:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <pid_calculate_roll+0xd4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	425a      	negs	r2, r3
 8002cbc:	ee07 2a10 	vmov	s14, r2
 8002cc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ccc:	d40c      	bmi.n	8002ce8 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 8002cce:	ee07 3a10 	vmov	s14, r3
 8002cd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cde:	dd06      	ble.n	8002cee <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <pid_calculate_roll+0xd0>)
 8002ce2:	ed83 7a00 	vstr	s14, [r3]
 8002ce6:	e002      	b.n	8002cee <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <pid_calculate_roll+0xd0>)
 8002cea:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <pid_calculate_roll+0xd0>)
 8002cf0:	ed93 0a00 	vldr	s0, [r3]
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000364 	.word	0x20000364
 8002cfc:	20000084 	.word	0x20000084
 8002d00:	20004450 	.word	0x20004450
 8002d04:	20000080 	.word	0x20000080
 8002d08:	3b03126f 	.word	0x3b03126f
 8002d0c:	2000445c 	.word	0x2000445c
 8002d10:	20000368 	.word	0x20000368
 8002d14:	2000007c 	.word	0x2000007c
 8002d18:	2000443c 	.word	0x2000443c
 8002d1c:	2000036c 	.word	0x2000036c
 8002d20:	20000054 	.word	0x20000054

08002d24 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <reset_pid_roll+0x14>)
 8002d28:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8002d2a:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <reset_pid_roll+0x18>)
 8002d2c:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 8002d2e:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <reset_pid_roll+0x1c>)
 8002d30:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <reset_pid_roll+0x20>)
 8002d34:	6013      	str	r3, [r2, #0]

}
 8002d36:	4770      	bx	lr
 8002d38:	20004450 	.word	0x20004450
 8002d3c:	2000445c 	.word	0x2000445c
 8002d40:	2000443c 	.word	0x2000443c
 8002d44:	2000036c 	.word	0x2000036c

08002d48 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = pitch_setpoint - IMU_pitch_value ;
 8002d48:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <pid_calculate_pitch+0xac>)
 8002d4e:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 8002d52:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <pid_calculate_pitch+0xb0>)
 8002d54:	edd3 6a00 	vldr	s13, [r3]
 8002d58:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <pid_calculate_pitch+0xb4>)
 8002d5e:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8002d62:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <pid_calculate_pitch+0xb8>)
 8002d64:	edd3 7a00 	vldr	s15, [r3]
 8002d68:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002d6c:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002e04 <pid_calculate_pitch+0xbc>
 8002d70:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <pid_calculate_pitch+0xc0>)
 8002d76:	ed93 7a00 	vldr	s14, [r3]
 8002d7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d7e:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <pid_calculate_pitch+0xc4>)
 8002d84:	ed93 6a00 	vldr	s12, [r3]
 8002d88:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002d8c:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002d90:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <pid_calculate_pitch+0xc8>)
 8002d92:	ed92 6a00 	vldr	s12, [r2]
 8002d96:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <pid_calculate_pitch+0xcc>)
 8002d9c:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 8002da0:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8002da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dac:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <pid_calculate_pitch+0xd0>)
 8002dae:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <pid_calculate_pitch+0xd4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	425a      	negs	r2, r3
 8002db8:	ee07 2a10 	vmov	s14, r2
 8002dbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	d40c      	bmi.n	8002de4 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8002dca:	ee07 3a10 	vmov	s14, r3
 8002dce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dda:	dd06      	ble.n	8002dea <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <pid_calculate_pitch+0xd0>)
 8002dde:	ed83 7a00 	vstr	s14, [r3]
 8002de2:	e002      	b.n	8002dea <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <pid_calculate_pitch+0xd0>)
 8002de6:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <pid_calculate_pitch+0xd0>)
 8002dec:	ed93 0a00 	vldr	s0, [r3]
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000358 	.word	0x20000358
 8002df8:	20000078 	.word	0x20000078
 8002dfc:	20004448 	.word	0x20004448
 8002e00:	20000074 	.word	0x20000074
 8002e04:	3b03126f 	.word	0x3b03126f
 8002e08:	2000444c 	.word	0x2000444c
 8002e0c:	2000035c 	.word	0x2000035c
 8002e10:	20000070 	.word	0x20000070
 8002e14:	20004440 	.word	0x20004440
 8002e18:	20000360 	.word	0x20000360
 8002e1c:	20000050 	.word	0x20000050

08002e20 <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <reset_pid_pitch+0x14>)
 8002e24:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8002e26:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <reset_pid_pitch+0x18>)
 8002e28:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8002e2a:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <reset_pid_pitch+0x1c>)
 8002e2c:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 8002e2e:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <reset_pid_pitch+0x20>)
 8002e30:	6013      	str	r3, [r2, #0]

}
 8002e32:	4770      	bx	lr
 8002e34:	20004448 	.word	0x20004448
 8002e38:	2000444c 	.word	0x2000444c
 8002e3c:	20004440 	.word	0x20004440
 8002e40:	20000360 	.word	0x20000360

08002e44 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = yaw_setpoint - IMU_yaw_value;
 8002e44:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8002e48:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <pid_calculate_yaw+0xac>)
 8002e4a:	edc3 0a00 	vstr	s1, [r3]
//	else
//		yaw_error = yaw_error;//do nothing


	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 8002e4e:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <pid_calculate_yaw+0xb0>)
 8002e50:	edd3 6a00 	vldr	s13, [r3]
 8002e54:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <pid_calculate_yaw+0xb4>)
 8002e5a:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 8002e5e:	4b27      	ldr	r3, [pc, #156]	; (8002efc <pid_calculate_yaw+0xb8>)
 8002e60:	edd3 7a00 	vldr	s15, [r3]
 8002e64:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002e68:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002f00 <pid_calculate_yaw+0xbc>
 8002e6c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <pid_calculate_yaw+0xc0>)
 8002e72:	ed93 7a00 	vldr	s14, [r3]
 8002e76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e7a:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 8002e7e:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <pid_calculate_yaw+0xc4>)
 8002e80:	ed93 6a00 	vldr	s12, [r3]
 8002e84:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002e88:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002e8c:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <pid_calculate_yaw+0xc8>)
 8002e8e:	ed92 6a00 	vldr	s12, [r2]
 8002e92:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002e96:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <pid_calculate_yaw+0xcc>)
 8002e98:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 8002e9c:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 8002ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <pid_calculate_yaw+0xd0>)
 8002eaa:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <pid_calculate_yaw+0xd4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	425a      	negs	r2, r3
 8002eb4:	ee07 2a10 	vmov	s14, r2
 8002eb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	d40c      	bmi.n	8002ee0 <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 8002ec6:	ee07 3a10 	vmov	s14, r3
 8002eca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	dd06      	ble.n	8002ee6 <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <pid_calculate_yaw+0xd0>)
 8002eda:	ed83 7a00 	vstr	s14, [r3]
 8002ede:	e002      	b.n	8002ee6 <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <pid_calculate_yaw+0xd0>)
 8002ee2:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <pid_calculate_yaw+0xd0>)
 8002ee8:	ed93 0a00 	vldr	s0, [r3]
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000370 	.word	0x20000370
 8002ef4:	2000008c 	.word	0x2000008c
 8002ef8:	20004458 	.word	0x20004458
 8002efc:	20000088 	.word	0x20000088
 8002f00:	3b03126f 	.word	0x3b03126f
 8002f04:	20004454 	.word	0x20004454
 8002f08:	20000374 	.word	0x20000374
 8002f0c:	200040d0 	.word	0x200040d0
 8002f10:	20004444 	.word	0x20004444
 8002f14:	20000378 	.word	0x20000378
 8002f18:	20000058 	.word	0x20000058

08002f1c <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <reset_pid_yaw+0x14>)
 8002f20:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 8002f22:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <reset_pid_yaw+0x18>)
 8002f24:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8002f26:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <reset_pid_yaw+0x1c>)
 8002f28:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 8002f2a:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <reset_pid_yaw+0x20>)
 8002f2c:	6013      	str	r3, [r2, #0]

}
 8002f2e:	4770      	bx	lr
 8002f30:	20004458 	.word	0x20004458
 8002f34:	20004454 	.word	0x20004454
 8002f38:	20004444 	.word	0x20004444
 8002f3c:	20000378 	.word	0x20000378

08002f40 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <DWT_Init+0x1c>)
 8002f42:	68d3      	ldr	r3, [r2, #12]
 8002f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f48:	60d3      	str	r3, [r2, #12]
        //DWT->LAR = 0xC5ACCE55;
        DWT->CYCCNT = 0;
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <DWT_Init+0x20>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000edf0 	.word	0xe000edf0
 8002f60:	e0001000 	.word	0xe0001000

08002f64 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT, delayTicks = us * (SystemCoreClock/1000000);
 8002f64:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <DWT_Delay+0x20>)
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <DWT_Delay+0x24>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4907      	ldr	r1, [pc, #28]	; (8002f8c <DWT_Delay+0x28>)
 8002f6e:	fba1 1303 	umull	r1, r3, r1, r3
 8002f72:	0c9b      	lsrs	r3, r3, #18
 8002f74:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <DWT_Delay+0x20>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	4283      	cmp	r3, r0
 8002f80:	d3fa      	bcc.n	8002f78 <DWT_Delay+0x14>
}
 8002f82:	4770      	bx	lr
 8002f84:	e0001000 	.word	0xe0001000
 8002f88:	20000090 	.word	0x20000090
 8002f8c:	431bde83 	.word	0x431bde83

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_Init+0x30>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fa2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002faa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fac:	2003      	movs	r0, #3
 8002fae:	f000 f82f 	bl	8003010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fb2:	2005      	movs	r0, #5
 8002fb4:	f005 f8f6 	bl	80081a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb8:	f005 f8c2 	bl	8008140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	bd08      	pop	{r3, pc}
 8002fc0:	40023c00 	.word	0x40023c00

08002fc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002fc4:	4a03      	ldr	r2, [pc, #12]	; (8002fd4 <HAL_IncTick+0x10>)
 8002fc6:	6811      	ldr	r1, [r2, #0]
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_IncTick+0x14>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	440b      	add	r3, r1
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20004460 	.word	0x20004460
 8002fd8:	2000005c 	.word	0x2000005c

08002fdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002fdc:	4b01      	ldr	r3, [pc, #4]	; (8002fe4 <HAL_GetTick+0x8>)
 8002fde:	6818      	ldr	r0, [r3, #0]
}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20004460 	.word	0x20004460

08002fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff fff6 	bl	8002fdc <HAL_GetTick>
 8002ff0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002ff6:	d002      	beq.n	8002ffe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <HAL_Delay+0x24>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ffe:	f7ff ffed 	bl	8002fdc <HAL_GetTick>
 8003002:	1b40      	subs	r0, r0, r5
 8003004:	42a0      	cmp	r0, r4
 8003006:	d3fa      	bcc.n	8002ffe <HAL_Delay+0x16>
  {
  }
}
 8003008:	bd38      	pop	{r3, r4, r5, pc}
 800300a:	bf00      	nop
 800300c:	2000005c 	.word	0x2000005c

08003010 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003010:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003012:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003014:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	0200      	lsls	r0, r0, #8
 800301e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003022:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8003024:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8003028:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800302c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003034:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <HAL_NVIC_SetPriority+0x60>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800303e:	f1c3 0407 	rsb	r4, r3, #7
 8003042:	2c04      	cmp	r4, #4
 8003044:	bf28      	it	cs
 8003046:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003048:	1d1d      	adds	r5, r3, #4
 800304a:	2d06      	cmp	r5, #6
 800304c:	d918      	bls.n	8003080 <HAL_NVIC_SetPriority+0x4c>
 800304e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003054:	fa05 f404 	lsl.w	r4, r5, r4
 8003058:	ea21 0104 	bic.w	r1, r1, r4
 800305c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800305e:	fa05 f303 	lsl.w	r3, r5, r3
 8003062:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003066:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003068:	2800      	cmp	r0, #0
 800306a:	db0b      	blt.n	8003084 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306c:	0109      	lsls	r1, r1, #4
 800306e:	b2c9      	uxtb	r1, r1
 8003070:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003074:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003078:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800307c:	bc30      	pop	{r4, r5}
 800307e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003080:	2300      	movs	r3, #0
 8003082:	e7e5      	b.n	8003050 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003084:	f000 000f 	and.w	r0, r0, #15
 8003088:	0109      	lsls	r1, r1, #4
 800308a:	b2c9      	uxtb	r1, r1
 800308c:	4b02      	ldr	r3, [pc, #8]	; (8003098 <HAL_NVIC_SetPriority+0x64>)
 800308e:	5419      	strb	r1, [r3, r0]
 8003090:	e7f4      	b.n	800307c <HAL_NVIC_SetPriority+0x48>
 8003092:	bf00      	nop
 8003094:	e000ed00 	.word	0xe000ed00
 8003098:	e000ed14 	.word	0xe000ed14

0800309c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800309c:	2800      	cmp	r0, #0
 800309e:	db07      	blt.n	80030b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a0:	f000 021f 	and.w	r2, r0, #31
 80030a4:	0940      	lsrs	r0, r0, #5
 80030a6:	2301      	movs	r3, #1
 80030a8:	4093      	lsls	r3, r2
 80030aa:	4a02      	ldr	r2, [pc, #8]	; (80030b4 <HAL_NVIC_EnableIRQ+0x18>)
 80030ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000e100 	.word	0xe000e100

080030b8 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030b8:	b168      	cbz	r0, 80030d6 <HAL_CRC_Init+0x1e>
{
 80030ba:	b510      	push	{r4, lr}
 80030bc:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030be:	7943      	ldrb	r3, [r0, #5]
 80030c0:	b12b      	cbz	r3, 80030ce <HAL_CRC_Init+0x16>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80030c6:	2301      	movs	r3, #1
 80030c8:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80030ca:	2000      	movs	r0, #0
}
 80030cc:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80030ce:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80030d0:	f004 fd38 	bl	8007b44 <HAL_CRC_MspInit>
 80030d4:	e7f5      	b.n	80030c2 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80030d6:	2001      	movs	r0, #1
}
 80030d8:	4770      	bx	lr
	...

080030dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030dc:	6802      	ldr	r2, [r0, #0]
 80030de:	b2d3      	uxtb	r3, r2
 80030e0:	3b10      	subs	r3, #16
 80030e2:	490b      	ldr	r1, [pc, #44]	; (8003110 <DMA_CalcBaseAndBitshift+0x34>)
 80030e4:	fba1 1303 	umull	r1, r3, r1, r3
 80030e8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ea:	490a      	ldr	r1, [pc, #40]	; (8003114 <DMA_CalcBaseAndBitshift+0x38>)
 80030ec:	5cc9      	ldrb	r1, [r1, r3]
 80030ee:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d806      	bhi.n	8003102 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030f4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80030f8:	f022 0203 	bic.w	r2, r2, #3
 80030fc:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80030fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003100:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003102:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8003106:	f022 0203 	bic.w	r2, r2, #3
 800310a:	3204      	adds	r2, #4
 800310c:	6582      	str	r2, [r0, #88]	; 0x58
 800310e:	e7f6      	b.n	80030fe <DMA_CalcBaseAndBitshift+0x22>
 8003110:	aaaaaaab 	.word	0xaaaaaaab
 8003114:	0800e804 	.word	0x0800e804

08003118 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003118:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800311a:	6982      	ldr	r2, [r0, #24]
 800311c:	b992      	cbnz	r2, 8003144 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800311e:	2b01      	cmp	r3, #1
 8003120:	d00a      	beq.n	8003138 <DMA_CheckFifoParam+0x20>
 8003122:	b11b      	cbz	r3, 800312c <DMA_CheckFifoParam+0x14>
 8003124:	2b02      	cmp	r3, #2
 8003126:	d001      	beq.n	800312c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2000      	movs	r0, #0
 800312a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800312e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003132:	d12c      	bne.n	800318e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2000      	movs	r0, #0
 8003136:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003138:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800313a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800313e:	d028      	beq.n	8003192 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8003140:	2000      	movs	r0, #0
 8003142:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003144:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003148:	d005      	beq.n	8003156 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800314a:	2b02      	cmp	r3, #2
 800314c:	d929      	bls.n	80031a2 <DMA_CheckFifoParam+0x8a>
 800314e:	2b03      	cmp	r3, #3
 8003150:	d015      	beq.n	800317e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2000      	movs	r0, #0
 8003154:	4770      	bx	lr
    switch (tmp)
 8003156:	2b03      	cmp	r3, #3
 8003158:	d803      	bhi.n	8003162 <DMA_CheckFifoParam+0x4a>
 800315a:	e8df f003 	tbb	[pc, r3]
 800315e:	041c      	.short	0x041c
 8003160:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2000      	movs	r0, #0
 8003164:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003166:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003168:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800316c:	d115      	bne.n	800319a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800316e:	2000      	movs	r0, #0
 8003170:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003172:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003174:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003178:	d011      	beq.n	800319e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800317a:	2000      	movs	r0, #0
 800317c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800317e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003180:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003184:	d001      	beq.n	800318a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8003186:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003188:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800318a:	2000      	movs	r0, #0
 800318c:	4770      	bx	lr
        status = HAL_ERROR;
 800318e:	2001      	movs	r0, #1
 8003190:	4770      	bx	lr
        status = HAL_ERROR;
 8003192:	2001      	movs	r0, #1
 8003194:	4770      	bx	lr
      status = HAL_ERROR;
 8003196:	2001      	movs	r0, #1
 8003198:	4770      	bx	lr
        status = HAL_ERROR;
 800319a:	2001      	movs	r0, #1
 800319c:	4770      	bx	lr
        status = HAL_ERROR;
 800319e:	2001      	movs	r0, #1
 80031a0:	4770      	bx	lr
      status = HAL_ERROR;
 80031a2:	2001      	movs	r0, #1
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_DMA_Init>:
{
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80031ac:	f7ff ff16 	bl	8002fdc <HAL_GetTick>
  if(hdma == NULL)
 80031b0:	2c00      	cmp	r4, #0
 80031b2:	d05b      	beq.n	800326c <HAL_DMA_Init+0xc4>
 80031b4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80031b6:	2300      	movs	r3, #0
 80031b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80031bc:	2302      	movs	r3, #2
 80031be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80031c2:	6822      	ldr	r2, [r4, #0]
 80031c4:	6813      	ldr	r3, [r2, #0]
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	f012 0f01 	tst.w	r2, #1
 80031d4:	d00a      	beq.n	80031ec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d6:	f7ff ff01 	bl	8002fdc <HAL_GetTick>
 80031da:	1b40      	subs	r0, r0, r5
 80031dc:	2805      	cmp	r0, #5
 80031de:	d9f5      	bls.n	80031cc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e0:	2320      	movs	r3, #32
 80031e2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e4:	2003      	movs	r0, #3
 80031e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80031ec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031ee:	4820      	ldr	r0, [pc, #128]	; (8003270 <HAL_DMA_Init+0xc8>)
 80031f0:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f2:	6861      	ldr	r1, [r4, #4]
 80031f4:	68a2      	ldr	r2, [r4, #8]
 80031f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f8:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031fa:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fc:	6921      	ldr	r1, [r4, #16]
 80031fe:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003200:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003202:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003204:	69a1      	ldr	r1, [r4, #24]
 8003206:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003208:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800320c:	6a21      	ldr	r1, [r4, #32]
 800320e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003210:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003212:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003214:	2904      	cmp	r1, #4
 8003216:	d01e      	beq.n	8003256 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8003218:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800321a:	6826      	ldr	r6, [r4, #0]
 800321c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800321e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8003222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003224:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003226:	2b04      	cmp	r3, #4
 8003228:	d107      	bne.n	800323a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800322a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800322c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800322e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003230:	b11b      	cbz	r3, 800323a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003232:	4620      	mov	r0, r4
 8003234:	f7ff ff70 	bl	8003118 <DMA_CheckFifoParam>
 8003238:	b990      	cbnz	r0, 8003260 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800323a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800323c:	4620      	mov	r0, r4
 800323e:	f7ff ff4d 	bl	80030dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003242:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003244:	233f      	movs	r3, #63	; 0x3f
 8003246:	4093      	lsls	r3, r2
 8003248:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800324a:	2000      	movs	r0, #0
 800324c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800324e:	2301      	movs	r3, #1
 8003250:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003254:	e7c9      	b.n	80031ea <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003256:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003258:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800325a:	4301      	orrs	r1, r0
 800325c:	430a      	orrs	r2, r1
 800325e:	e7db      	b.n	8003218 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003260:	2340      	movs	r3, #64	; 0x40
 8003262:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003264:	2001      	movs	r0, #1
 8003266:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800326a:	e7be      	b.n	80031ea <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800326c:	2001      	movs	r0, #1
 800326e:	e7bc      	b.n	80031ea <HAL_DMA_Init+0x42>
 8003270:	f010803f 	.word	0xf010803f

08003274 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003274:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d003      	beq.n	8003286 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003282:	2001      	movs	r0, #1
 8003284:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003286:	2305      	movs	r3, #5
 8003288:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800328c:	6802      	ldr	r2, [r0, #0]
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003296:	2000      	movs	r0, #0
}
 8003298:	4770      	bx	lr
	...

0800329c <HAL_DMA_IRQHandler>:
{
 800329c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329e:	b083      	sub	sp, #12
 80032a0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032a6:	4b72      	ldr	r3, [pc, #456]	; (8003470 <HAL_DMA_IRQHandler+0x1d4>)
 80032a8:	681d      	ldr	r5, [r3, #0]
 80032aa:	4b72      	ldr	r3, [pc, #456]	; (8003474 <HAL_DMA_IRQHandler+0x1d8>)
 80032ac:	fba3 3505 	umull	r3, r5, r3, r5
 80032b0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80032b4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80032b8:	2308      	movs	r3, #8
 80032ba:	4093      	lsls	r3, r2
 80032bc:	4233      	tst	r3, r6
 80032be:	d010      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032c0:	6803      	ldr	r3, [r0, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	f012 0f04 	tst.w	r2, #4
 80032c8:	d00b      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	f022 0204 	bic.w	r2, r2, #4
 80032d0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032d2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80032d4:	2308      	movs	r3, #8
 80032d6:	4093      	lsls	r3, r2
 80032d8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032da:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032e4:	2301      	movs	r3, #1
 80032e6:	4093      	lsls	r3, r2
 80032e8:	4233      	tst	r3, r6
 80032ea:	d009      	beq.n	8003300 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032ec:	6822      	ldr	r2, [r4, #0]
 80032ee:	6952      	ldr	r2, [r2, #20]
 80032f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032f4:	d004      	beq.n	8003300 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032f6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032fa:	f043 0302 	orr.w	r3, r3, #2
 80032fe:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003300:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003302:	2304      	movs	r3, #4
 8003304:	4093      	lsls	r3, r2
 8003306:	4233      	tst	r3, r6
 8003308:	d009      	beq.n	800331e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	f012 0f02 	tst.w	r2, #2
 8003312:	d004      	beq.n	800331e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003314:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003316:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800331e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003320:	2310      	movs	r3, #16
 8003322:	4093      	lsls	r3, r2
 8003324:	4233      	tst	r3, r6
 8003326:	d024      	beq.n	8003372 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	f012 0f08 	tst.w	r2, #8
 8003330:	d01f      	beq.n	8003372 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003332:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800333c:	d00d      	beq.n	800335a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003344:	d104      	bne.n	8003350 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8003346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003348:	b19b      	cbz	r3, 8003372 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800334a:	4620      	mov	r0, r4
 800334c:	4798      	blx	r3
 800334e:	e010      	b.n	8003372 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003350:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003352:	b173      	cbz	r3, 8003372 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8003354:	4620      	mov	r0, r4
 8003356:	4798      	blx	r3
 8003358:	e00b      	b.n	8003372 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003360:	d103      	bne.n	800336a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	f022 0208 	bic.w	r2, r2, #8
 8003368:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800336a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800336c:	b10b      	cbz	r3, 8003372 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800336e:	4620      	mov	r0, r4
 8003370:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003372:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003374:	2320      	movs	r3, #32
 8003376:	4093      	lsls	r3, r2
 8003378:	4233      	tst	r3, r6
 800337a:	d055      	beq.n	8003428 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	f012 0f10 	tst.w	r2, #16
 8003384:	d050      	beq.n	8003428 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003386:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003388:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b05      	cmp	r3, #5
 8003390:	d00e      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800339a:	d033      	beq.n	8003404 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80033a2:	d12a      	bne.n	80033fa <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80033a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d03e      	beq.n	8003428 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80033aa:	4620      	mov	r0, r4
 80033ac:	4798      	blx	r3
 80033ae:	e03b      	b.n	8003428 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b0:	6822      	ldr	r2, [r4, #0]
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	f023 0316 	bic.w	r3, r3, #22
 80033b8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ba:	6822      	ldr	r2, [r4, #0]
 80033bc:	6953      	ldr	r3, [r2, #20]
 80033be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033c6:	b1a3      	cbz	r3, 80033f2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033c8:	6822      	ldr	r2, [r4, #0]
 80033ca:	6813      	ldr	r3, [r2, #0]
 80033cc:	f023 0308 	bic.w	r3, r3, #8
 80033d0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80033d4:	233f      	movs	r3, #63	; 0x3f
 80033d6:	4093      	lsls	r3, r2
 80033d8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80033da:	2300      	movs	r3, #0
 80033dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80033e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d03f      	beq.n	800346c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80033ec:	4620      	mov	r0, r4
 80033ee:	4798      	blx	r3
 80033f0:	e03c      	b.n	800346c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e7      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x12c>
 80033f8:	e7eb      	b.n	80033d2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80033fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033fc:	b1a3      	cbz	r3, 8003428 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80033fe:	4620      	mov	r0, r4
 8003400:	4798      	blx	r3
 8003402:	e011      	b.n	8003428 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	f412 7f80 	tst.w	r2, #256	; 0x100
 800340a:	d109      	bne.n	8003420 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	f022 0210 	bic.w	r2, r2, #16
 8003412:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8003414:	2300      	movs	r3, #0
 8003416:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800341a:	2301      	movs	r3, #1
 800341c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8003420:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003422:	b10b      	cbz	r3, 8003428 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8003424:	4620      	mov	r0, r4
 8003426:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003428:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800342a:	b1fb      	cbz	r3, 800346c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800342c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800342e:	f013 0f01 	tst.w	r3, #1
 8003432:	d017      	beq.n	8003464 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003434:	2305      	movs	r3, #5
 8003436:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800343a:	6822      	ldr	r2, [r4, #0]
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003444:	9b01      	ldr	r3, [sp, #4]
 8003446:	3301      	adds	r3, #1
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	42ab      	cmp	r3, r5
 800344c:	d804      	bhi.n	8003458 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f013 0f01 	tst.w	r3, #1
 8003456:	d1f5      	bne.n	8003444 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8003458:	2300      	movs	r3, #0
 800345a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800345e:	2301      	movs	r3, #1
 8003460:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003464:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003466:	b10b      	cbz	r3, 800346c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003468:	4620      	mov	r0, r4
 800346a:	4798      	blx	r3
}
 800346c:	b003      	add	sp, #12
 800346e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003470:	20000090 	.word	0x20000090
 8003474:	1b4e81b5 	.word	0x1b4e81b5

08003478 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f013 0f10 	tst.w	r3, #16
 8003480:	d007      	beq.n	8003492 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003482:	4a26      	ldr	r2, [pc, #152]	; (800351c <FLASH_SetErrorCode+0xa4>)
 8003484:	69d3      	ldr	r3, [r2, #28]
 8003486:	f043 0310 	orr.w	r3, r3, #16
 800348a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800348c:	4b22      	ldr	r3, [pc, #136]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 800348e:	2210      	movs	r2, #16
 8003490:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f013 0f20 	tst.w	r3, #32
 800349a:	d007      	beq.n	80034ac <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <FLASH_SetErrorCode+0xa4>)
 800349e:	69d3      	ldr	r3, [r2, #28]
 80034a0:	f043 0308 	orr.w	r3, r3, #8
 80034a4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80034a6:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 80034a8:	2220      	movs	r2, #32
 80034aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80034b4:	d007      	beq.n	80034c6 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80034b6:	4a19      	ldr	r2, [pc, #100]	; (800351c <FLASH_SetErrorCode+0xa4>)
 80034b8:	69d3      	ldr	r3, [r2, #28]
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 80034c2:	2240      	movs	r2, #64	; 0x40
 80034c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034ce:	d007      	beq.n	80034e0 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80034d0:	4a12      	ldr	r2, [pc, #72]	; (800351c <FLASH_SetErrorCode+0xa4>)
 80034d2:	69d3      	ldr	r3, [r2, #28]
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80034e0:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034e8:	d008      	beq.n	80034fc <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80034ea:	4a0c      	ldr	r2, [pc, #48]	; (800351c <FLASH_SetErrorCode+0xa4>)
 80034ec:	69d3      	ldr	r3, [r2, #28]
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 80034f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034fa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f013 0f02 	tst.w	r3, #2
 8003504:	d007      	beq.n	8003516 <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003506:	4a05      	ldr	r2, [pc, #20]	; (800351c <FLASH_SetErrorCode+0xa4>)
 8003508:	69d3      	ldr	r3, [r2, #28]
 800350a:	f043 0320 	orr.w	r3, r3, #32
 800350e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003510:	4b01      	ldr	r3, [pc, #4]	; (8003518 <FLASH_SetErrorCode+0xa0>)
 8003512:	2202      	movs	r2, #2
 8003514:	60da      	str	r2, [r3, #12]
  }
}
 8003516:	4770      	bx	lr
 8003518:	40023c00 	.word	0x40023c00
 800351c:	20004464 	.word	0x20004464

08003520 <HAL_FLASH_EndOfOperationCallback>:
}
 8003520:	4770      	bx	lr

08003522 <HAL_FLASH_OperationErrorCallback>:
}
 8003522:	4770      	bx	lr

08003524 <HAL_FLASH_IRQHandler>:
{
 8003524:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003526:	4b3a      	ldr	r3, [pc, #232]	; (8003610 <HAL_FLASH_IRQHandler+0xec>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 800352e:	d013      	beq.n	8003558 <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003530:	4b38      	ldr	r3, [pc, #224]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d03b      	beq.n	80035b2 <HAL_FLASH_IRQHandler+0x8e>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d03c      	beq.n	80035be <HAL_FLASH_IRQHandler+0x9a>
      addresstmp = pFlash.Address;
 8003544:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 8003546:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 8003548:	f7ff ff96 	bl	8003478 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800354c:	4620      	mov	r0, r4
 800354e:	f7ff ffe8 	bl	8003522 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003552:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003558:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <HAL_FLASH_IRQHandler+0xec>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f013 0f01 	tst.w	r3, #1
 8003560:	d013      	beq.n	800358a <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003562:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_FLASH_IRQHandler+0xec>)
 8003564:	2201      	movs	r2, #1
 8003566:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003568:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	4293      	cmp	r3, r2
 8003570:	d028      	beq.n	80035c4 <HAL_FLASH_IRQHandler+0xa0>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8003572:	4b28      	ldr	r3, [pc, #160]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d041      	beq.n	8003600 <HAL_FLASH_IRQHandler+0xdc>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 800357e:	6958      	ldr	r0, [r3, #20]
 8003580:	f7ff ffce 	bl	8003520 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b97b      	cbnz	r3, 80035b0 <HAL_FLASH_IRQHandler+0x8c>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8003590:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <HAL_FLASH_IRQHandler+0xec>)
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003598:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80035a0:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80035a8:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80035aa:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	761a      	strb	r2, [r3, #24]
}
 80035b0:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 80035b4:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 80035b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	e7c4      	b.n	8003548 <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 80035c0:	691c      	ldr	r4, [r3, #16]
 80035c2:	e7c1      	b.n	8003548 <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	3a01      	subs	r2, #1
 80035ca:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	b15b      	cbz	r3, 80035e8 <HAL_FLASH_IRQHandler+0xc4>
        addresstmp = pFlash.Sector;
 80035d0:	4c10      	ldr	r4, [pc, #64]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 80035d2:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80035d4:	f7ff ffa4 	bl	8003520 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 80035d8:	68e3      	ldr	r3, [r4, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 80035de:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80035e0:	7a21      	ldrb	r1, [r4, #8]
 80035e2:	f000 f819 	bl	8003618 <FLASH_Erase_Sector>
 80035e6:	e7d0      	b.n	800358a <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 80035ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80035ee:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 80035f4:	f000 f83c 	bl	8003670 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80035f8:	4620      	mov	r0, r4
 80035fa:	f7ff ff91 	bl	8003520 <HAL_FLASH_EndOfOperationCallback>
 80035fe:	e7c4      	b.n	800358a <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 8003600:	f000 f836 	bl	8003670 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <HAL_FLASH_IRQHandler+0xf0>)
 8003606:	6918      	ldr	r0, [r3, #16]
 8003608:	f7ff ff8a 	bl	8003520 <HAL_FLASH_EndOfOperationCallback>
 800360c:	e7ba      	b.n	8003584 <HAL_FLASH_IRQHandler+0x60>
 800360e:	bf00      	nop
 8003610:	40023c00 	.word	0x40023c00
 8003614:	20004464 	.word	0x20004464

08003618 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003618:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800361a:	b149      	cbz	r1, 8003630 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800361c:	2901      	cmp	r1, #1
 800361e:	d021      	beq.n	8003664 <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003620:	2902      	cmp	r1, #2
 8003622:	d002      	beq.n	800362a <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003624:	f44f 7440 	mov.w	r4, #768	; 0x300
 8003628:	e003      	b.n	8003632 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 800362a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800362e:	e000      	b.n	8003632 <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8003630:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <FLASH_Erase_Sector+0x54>)
 8003634:	6919      	ldr	r1, [r3, #16]
 8003636:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800363a:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	4322      	orrs	r2, r4
 8003640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003648:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8003650:	f040 0002 	orr.w	r0, r0, #2
 8003654:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800365c:	611a      	str	r2, [r3, #16]
}
 800365e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003662:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003664:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003668:	e7e3      	b.n	8003632 <FLASH_Erase_Sector+0x1a>
 800366a:	bf00      	nop
 800366c:	40023c00 	.word	0x40023c00

08003670 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <FLASH_FlushCaches+0x5c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003678:	d010      	beq.n	800369c <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <FLASH_FlushCaches+0x5c>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003682:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003692:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <FLASH_FlushCaches+0x5c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80036a4:	d010      	beq.n	80036c8 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <FLASH_FlushCaches+0x5c>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ae:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036be:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036c6:	601a      	str	r2, [r3, #0]
  }
}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40023c00 	.word	0x40023c00

080036d0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b0f      	cmp	r3, #15
 80036d4:	f200 80c5 	bhi.w	8003862 <HAL_GPIO_Init+0x192>
{
 80036d8:	b4f0      	push	{r4, r5, r6, r7}
 80036da:	b082      	sub	sp, #8
 80036dc:	e039      	b.n	8003752 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036de:	2204      	movs	r2, #4
 80036e0:	e000      	b.n	80036e4 <HAL_GPIO_Init+0x14>
 80036e2:	2200      	movs	r2, #0
 80036e4:	40b2      	lsls	r2, r6
 80036e6:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e8:	3402      	adds	r4, #2
 80036ea:	4e5e      	ldr	r6, [pc, #376]	; (8003864 <HAL_GPIO_Init+0x194>)
 80036ec:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036f0:	4a5d      	ldr	r2, [pc, #372]	; (8003868 <HAL_GPIO_Init+0x198>)
 80036f2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80036f4:	43ea      	mvns	r2, r5
 80036f6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036fa:	684f      	ldr	r7, [r1, #4]
 80036fc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003700:	d001      	beq.n	8003706 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8003702:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8003706:	4c58      	ldr	r4, [pc, #352]	; (8003868 <HAL_GPIO_Init+0x198>)
 8003708:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800370a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800370c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003710:	684f      	ldr	r7, [r1, #4]
 8003712:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003716:	d001      	beq.n	800371c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8003718:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800371c:	4c52      	ldr	r4, [pc, #328]	; (8003868 <HAL_GPIO_Init+0x198>)
 800371e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003720:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003722:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003726:	684f      	ldr	r7, [r1, #4]
 8003728:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800372c:	d001      	beq.n	8003732 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800372e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8003732:	4c4d      	ldr	r4, [pc, #308]	; (8003868 <HAL_GPIO_Init+0x198>)
 8003734:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003736:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003738:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800373a:	684e      	ldr	r6, [r1, #4]
 800373c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003740:	d001      	beq.n	8003746 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8003742:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003746:	4c48      	ldr	r4, [pc, #288]	; (8003868 <HAL_GPIO_Init+0x198>)
 8003748:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374a:	3301      	adds	r3, #1
 800374c:	2b0f      	cmp	r3, #15
 800374e:	f200 8085 	bhi.w	800385c <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 8003752:	2201      	movs	r2, #1
 8003754:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003756:	680c      	ldr	r4, [r1, #0]
 8003758:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 800375c:	42aa      	cmp	r2, r5
 800375e:	d1f4      	bne.n	800374a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003760:	684c      	ldr	r4, [r1, #4]
 8003762:	2c02      	cmp	r4, #2
 8003764:	d001      	beq.n	800376a <HAL_GPIO_Init+0x9a>
 8003766:	2c12      	cmp	r4, #18
 8003768:	d110      	bne.n	800378c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 800376a:	08de      	lsrs	r6, r3, #3
 800376c:	3608      	adds	r6, #8
 800376e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003772:	f003 0407 	and.w	r4, r3, #7
 8003776:	00a7      	lsls	r7, r4, #2
 8003778:	240f      	movs	r4, #15
 800377a:	40bc      	lsls	r4, r7
 800377c:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003780:	690c      	ldr	r4, [r1, #16]
 8003782:	40bc      	lsls	r4, r7
 8003784:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8003788:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 800378c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800378e:	005f      	lsls	r7, r3, #1
 8003790:	2603      	movs	r6, #3
 8003792:	40be      	lsls	r6, r7
 8003794:	43f6      	mvns	r6, r6
 8003796:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800379a:	684c      	ldr	r4, [r1, #4]
 800379c:	f004 0403 	and.w	r4, r4, #3
 80037a0:	40bc      	lsls	r4, r7
 80037a2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80037a6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037a8:	684c      	ldr	r4, [r1, #4]
 80037aa:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80037ae:	f1bc 0f01 	cmp.w	ip, #1
 80037b2:	d903      	bls.n	80037bc <HAL_GPIO_Init+0xec>
 80037b4:	2c11      	cmp	r4, #17
 80037b6:	d001      	beq.n	80037bc <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037b8:	2c12      	cmp	r4, #18
 80037ba:	d110      	bne.n	80037de <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 80037bc:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037be:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037c2:	68cc      	ldr	r4, [r1, #12]
 80037c4:	40bc      	lsls	r4, r7
 80037c6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 80037ca:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80037cc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037ce:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037d2:	684c      	ldr	r4, [r1, #4]
 80037d4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80037d8:	409c      	lsls	r4, r3
 80037da:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80037dc:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80037de:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037e0:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e2:	688a      	ldr	r2, [r1, #8]
 80037e4:	40ba      	lsls	r2, r7
 80037e6:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80037e8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037ea:	684a      	ldr	r2, [r1, #4]
 80037ec:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80037f0:	d0ab      	beq.n	800374a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f2:	2200      	movs	r2, #0
 80037f4:	9201      	str	r2, [sp, #4]
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <HAL_GPIO_Init+0x19c>)
 80037f8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80037fa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80037fe:	6454      	str	r4, [r2, #68]	; 0x44
 8003800:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003802:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003806:	9201      	str	r2, [sp, #4]
 8003808:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800380a:	089c      	lsrs	r4, r3, #2
 800380c:	1ca6      	adds	r6, r4, #2
 800380e:	4a15      	ldr	r2, [pc, #84]	; (8003864 <HAL_GPIO_Init+0x194>)
 8003810:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003814:	f003 0203 	and.w	r2, r3, #3
 8003818:	0096      	lsls	r6, r2, #2
 800381a:	220f      	movs	r2, #15
 800381c:	40b2      	lsls	r2, r6
 800381e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003822:	4a13      	ldr	r2, [pc, #76]	; (8003870 <HAL_GPIO_Init+0x1a0>)
 8003824:	4290      	cmp	r0, r2
 8003826:	f43f af5c 	beq.w	80036e2 <HAL_GPIO_Init+0x12>
 800382a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800382e:	4290      	cmp	r0, r2
 8003830:	d00e      	beq.n	8003850 <HAL_GPIO_Init+0x180>
 8003832:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003836:	4290      	cmp	r0, r2
 8003838:	d00c      	beq.n	8003854 <HAL_GPIO_Init+0x184>
 800383a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800383e:	4290      	cmp	r0, r2
 8003840:	d00a      	beq.n	8003858 <HAL_GPIO_Init+0x188>
 8003842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003846:	4290      	cmp	r0, r2
 8003848:	f43f af49 	beq.w	80036de <HAL_GPIO_Init+0xe>
 800384c:	2207      	movs	r2, #7
 800384e:	e749      	b.n	80036e4 <HAL_GPIO_Init+0x14>
 8003850:	2201      	movs	r2, #1
 8003852:	e747      	b.n	80036e4 <HAL_GPIO_Init+0x14>
 8003854:	2202      	movs	r2, #2
 8003856:	e745      	b.n	80036e4 <HAL_GPIO_Init+0x14>
 8003858:	2203      	movs	r2, #3
 800385a:	e743      	b.n	80036e4 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800385c:	b002      	add	sp, #8
 800385e:	bcf0      	pop	{r4, r5, r6, r7}
 8003860:	4770      	bx	lr
 8003862:	4770      	bx	lr
 8003864:	40013800 	.word	0x40013800
 8003868:	40013c00 	.word	0x40013c00
 800386c:	40023800 	.word	0x40023800
 8003870:	40020000 	.word	0x40020000

08003874 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003874:	b912      	cbnz	r2, 800387c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003876:	0409      	lsls	r1, r1, #16
 8003878:	6181      	str	r1, [r0, #24]
  }
}
 800387a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800387c:	6181      	str	r1, [r0, #24]
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003880:	6943      	ldr	r3, [r0, #20]
 8003882:	ea31 0303 	bics.w	r3, r1, r3
 8003886:	d001      	beq.n	800388c <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8003888:	6181      	str	r1, [r0, #24]
  }
}
 800388a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800388c:	0409      	lsls	r1, r1, #16
 800388e:	6181      	str	r1, [r0, #24]
 8003890:	4770      	bx	lr

08003892 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003892:	4770      	bx	lr

08003894 <HAL_GPIO_EXTI_IRQHandler>:
{
 8003894:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	4203      	tst	r3, r0
 800389c:	d100      	bne.n	80038a0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800389e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038a0:	4b02      	ldr	r3, [pc, #8]	; (80038ac <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80038a2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038a4:	f7ff fff5 	bl	8003892 <HAL_GPIO_EXTI_Callback>
}
 80038a8:	e7f9      	b.n	800389e <HAL_GPIO_EXTI_IRQHandler+0xa>
 80038aa:	bf00      	nop
 80038ac:	40013c00 	.word	0x40013c00

080038b0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038b0:	6803      	ldr	r3, [r0, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80038b8:	d011      	beq.n	80038de <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038c4:	2220      	movs	r2, #32
 80038c6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ca:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80038d0:	f042 0204 	orr.w	r2, r2, #4
 80038d4:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80038da:	2001      	movs	r0, #1
 80038dc:	4770      	bx	lr
  }
  return HAL_OK;
 80038de:	2000      	movs	r0, #0
}
 80038e0:	4770      	bx	lr

080038e2 <I2C_WaitOnFlagUntilTimeout>:
{
 80038e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e4:	4606      	mov	r6, r0
 80038e6:	460c      	mov	r4, r1
 80038e8:	4617      	mov	r7, r2
 80038ea:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ec:	e022      	b.n	8003934 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7ff fb75 	bl	8002fdc <HAL_GetTick>
 80038f2:	9b06      	ldr	r3, [sp, #24]
 80038f4:	1ac0      	subs	r0, r0, r3
 80038f6:	42a8      	cmp	r0, r5
 80038f8:	d800      	bhi.n	80038fc <I2C_WaitOnFlagUntilTimeout+0x1a>
 80038fa:	b9dd      	cbnz	r5, 8003934 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003900:	2220      	movs	r2, #32
 8003902:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003906:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800390c:	f042 0220 	orr.w	r2, r2, #32
 8003910:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003912:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8003916:	2001      	movs	r0, #1
 8003918:	e01a      	b.n	8003950 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800391a:	6833      	ldr	r3, [r6, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	ea24 0303 	bic.w	r3, r4, r3
 8003922:	b29b      	uxth	r3, r3
 8003924:	fab3 f383 	clz	r3, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	429f      	cmp	r7, r3
 800392c:	d10f      	bne.n	800394e <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800392e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003932:	d1dc      	bne.n	80038ee <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003934:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8003938:	2b01      	cmp	r3, #1
 800393a:	d0ee      	beq.n	800391a <I2C_WaitOnFlagUntilTimeout+0x38>
 800393c:	6833      	ldr	r3, [r6, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	ea24 0303 	bic.w	r3, r4, r3
 8003944:	b29b      	uxth	r3, r3
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	e7ed      	b.n	800392a <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 800394e:	2000      	movs	r0, #0
}
 8003950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003952 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003954:	4604      	mov	r4, r0
 8003956:	460d      	mov	r5, r1
 8003958:	4616      	mov	r6, r2
 800395a:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800395c:	e03c      	b.n	80039d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003964:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800396c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800396e:	2300      	movs	r3, #0
 8003970:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003972:	2220      	movs	r2, #32
 8003974:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003978:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800397c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800397e:	f042 0204 	orr.w	r2, r2, #4
 8003982:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003984:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003988:	2001      	movs	r0, #1
 800398a:	e033      	b.n	80039f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7ff fb26 	bl	8002fdc <HAL_GetTick>
 8003990:	1bc0      	subs	r0, r0, r7
 8003992:	42b0      	cmp	r0, r6
 8003994:	d800      	bhi.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8003996:	b9fe      	cbnz	r6, 80039d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003998:	2300      	movs	r3, #0
 800399a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800399c:	2220      	movs	r2, #32
 800399e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039a8:	f042 0220 	orr.w	r2, r2, #32
 80039ac:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80039ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80039b2:	2001      	movs	r0, #1
 80039b4:	e01e      	b.n	80039f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	ea25 0303 	bic.w	r3, r5, r3
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3300      	adds	r3, #0
 80039c2:	bf18      	it	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	b1a3      	cbz	r3, 80039f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80039d0:	d1c5      	bne.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 80039d2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80039d6:	d1d9      	bne.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d0ea      	beq.n	80039b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	ea25 0303 	bic.w	r3, r5, r3
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3300      	adds	r3, #0
 80039ec:	bf18      	it	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	e7e9      	b.n	80039c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80039f2:	2000      	movs	r0, #0
}
 80039f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039f8 <I2C_MasterRequestWrite>:
{
 80039f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fa:	b083      	sub	sp, #12
 80039fc:	4604      	mov	r4, r0
 80039fe:	460f      	mov	r7, r1
 8003a00:	4615      	mov	r5, r2
 8003a02:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d00d      	beq.n	8003a26 <I2C_MasterRequestWrite+0x2e>
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d00b      	beq.n	8003a26 <I2C_MasterRequestWrite+0x2e>
 8003a0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a12:	d008      	beq.n	8003a26 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a14:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003a16:	2b12      	cmp	r3, #18
 8003a18:	d10a      	bne.n	8003a30 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1a:	6802      	ldr	r2, [r0, #0]
 8003a1c:	6813      	ldr	r3, [r2, #0]
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	e004      	b.n	8003a30 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	6813      	ldr	r3, [r2, #0]
 8003a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a30:	9600      	str	r6, [sp, #0]
 8003a32:	462b      	mov	r3, r5
 8003a34:	2200      	movs	r2, #0
 8003a36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f7ff ff51 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 8003a40:	bb18      	cbnz	r0, 8003a8a <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a48:	d10d      	bne.n	8003a66 <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003a50:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a52:	4633      	mov	r3, r6
 8003a54:	462a      	mov	r2, r5
 8003a56:	4910      	ldr	r1, [pc, #64]	; (8003a98 <I2C_MasterRequestWrite+0xa0>)
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7ff ff7a 	bl	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	b1a0      	cbz	r0, 8003a8c <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e012      	b.n	8003a8c <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a66:	11fb      	asrs	r3, r7, #7
 8003a68:	6822      	ldr	r2, [r4, #0]
 8003a6a:	f003 0306 	and.w	r3, r3, #6
 8003a6e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003a72:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a74:	4633      	mov	r3, r6
 8003a76:	462a      	mov	r2, r5
 8003a78:	4908      	ldr	r1, [pc, #32]	; (8003a9c <I2C_MasterRequestWrite+0xa4>)
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f7ff ff69 	bl	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a80:	b938      	cbnz	r0, 8003a92 <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	b2ff      	uxtb	r7, r7
 8003a86:	611f      	str	r7, [r3, #16]
 8003a88:	e7e3      	b.n	8003a52 <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	b003      	add	sp, #12
 8003a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e7fa      	b.n	8003a8c <I2C_MasterRequestWrite+0x94>
 8003a96:	bf00      	nop
 8003a98:	00010002 	.word	0x00010002
 8003a9c:	00010008 	.word	0x00010008

08003aa0 <I2C_MasterRequestRead>:
{
 8003aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	460d      	mov	r5, r1
 8003aaa:	4616      	mov	r6, r2
 8003aac:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab0:	6801      	ldr	r1, [r0, #0]
 8003ab2:	680b      	ldr	r3, [r1, #0]
 8003ab4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ab8:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aba:	2a08      	cmp	r2, #8
 8003abc:	d00d      	beq.n	8003ada <I2C_MasterRequestRead+0x3a>
 8003abe:	2a01      	cmp	r2, #1
 8003ac0:	d00b      	beq.n	8003ada <I2C_MasterRequestRead+0x3a>
 8003ac2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003ac6:	d008      	beq.n	8003ada <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ac8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003aca:	2b11      	cmp	r3, #17
 8003acc:	d10a      	bne.n	8003ae4 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ace:	6802      	ldr	r2, [r0, #0]
 8003ad0:	6813      	ldr	r3, [r2, #0]
 8003ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e004      	b.n	8003ae4 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ada:	6822      	ldr	r2, [r4, #0]
 8003adc:	6813      	ldr	r3, [r2, #0]
 8003ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae4:	9700      	str	r7, [sp, #0]
 8003ae6:	4633      	mov	r3, r6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff fef7 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d149      	bne.n	8003b8c <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003af8:	6923      	ldr	r3, [r4, #16]
 8003afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003afe:	d10f      	bne.n	8003b20 <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	f045 0501 	orr.w	r5, r5, #1
 8003b06:	b2ed      	uxtb	r5, r5
 8003b08:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	4923      	ldr	r1, [pc, #140]	; (8003b9c <I2C_MasterRequestRead+0xfc>)
 8003b10:	4620      	mov	r0, r4
 8003b12:	f7ff ff1e 	bl	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d038      	beq.n	8003b8e <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e036      	b.n	8003b8e <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b20:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8003b24:	f008 0806 	and.w	r8, r8, #6
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8003b2e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b30:	463b      	mov	r3, r7
 8003b32:	4632      	mov	r2, r6
 8003b34:	491a      	ldr	r1, [pc, #104]	; (8003ba0 <I2C_MasterRequestRead+0x100>)
 8003b36:	4620      	mov	r0, r4
 8003b38:	f7ff ff0b 	bl	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b3c:	b108      	cbz	r0, 8003b42 <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e025      	b.n	8003b8e <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	b2ed      	uxtb	r5, r5
 8003b46:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b48:	463b      	mov	r3, r7
 8003b4a:	4632      	mov	r2, r6
 8003b4c:	4913      	ldr	r1, [pc, #76]	; (8003b9c <I2C_MasterRequestRead+0xfc>)
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f7ff feff 	bl	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b54:	b108      	cbz	r0, 8003b5a <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e019      	b.n	8003b8e <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	9203      	str	r2, [sp, #12]
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	6959      	ldr	r1, [r3, #20]
 8003b62:	9103      	str	r1, [sp, #12]
 8003b64:	6999      	ldr	r1, [r3, #24]
 8003b66:	9103      	str	r1, [sp, #12]
 8003b68:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003b70:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b72:	9700      	str	r7, [sp, #0]
 8003b74:	4633      	mov	r3, r6
 8003b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f7ff feb1 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 8003b80:	b948      	cbnz	r0, 8003b96 <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8003b88:	6113      	str	r3, [r2, #16]
 8003b8a:	e7be      	b.n	8003b0a <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	b004      	add	sp, #16
 8003b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e7f9      	b.n	8003b8e <I2C_MasterRequestRead+0xee>
 8003b9a:	bf00      	nop
 8003b9c:	00010002 	.word	0x00010002
 8003ba0:	00010008 	.word	0x00010008

08003ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	460d      	mov	r5, r1
 8003baa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003bb4:	d11c      	bne.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7ff fe7a 	bl	80038b0 <I2C_IsAcknowledgeFailed>
 8003bbc:	b9d0      	cbnz	r0, 8003bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003bc2:	d0f3      	beq.n	8003bac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc4:	f7ff fa0a 	bl	8002fdc <HAL_GetTick>
 8003bc8:	1b80      	subs	r0, r0, r6
 8003bca:	42a8      	cmp	r0, r5
 8003bcc:	d801      	bhi.n	8003bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003bce:	2d00      	cmp	r5, #0
 8003bd0:	d1ec      	bne.n	8003bac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bdc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003be2:	f042 0220 	orr.w	r2, r2, #32
 8003be6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003be8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003bec:	2001      	movs	r0, #1
 8003bee:	e000      	b.n	8003bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003bf0:	2000      	movs	r0, #0
}
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	e7fc      	b.n	8003bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08003bf8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	460d      	mov	r5, r1
 8003bfe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f013 0f04 	tst.w	r3, #4
 8003c08:	d11c      	bne.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f7ff fe50 	bl	80038b0 <I2C_IsAcknowledgeFailed>
 8003c10:	b9d0      	cbnz	r0, 8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003c12:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003c16:	d0f3      	beq.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c18:	f7ff f9e0 	bl	8002fdc <HAL_GetTick>
 8003c1c:	1b80      	subs	r0, r0, r6
 8003c1e:	42a8      	cmp	r0, r5
 8003c20:	d801      	bhi.n	8003c26 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	d1ec      	bne.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c36:	f042 0220 	orr.w	r2, r2, #32
 8003c3a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003c40:	2001      	movs	r0, #1
 8003c42:	e000      	b.n	8003c46 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003c44:	2000      	movs	r0, #0
}
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003c48:	2001      	movs	r0, #1
 8003c4a:	e7fc      	b.n	8003c46 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	4605      	mov	r5, r0
 8003c50:	460c      	mov	r4, r1
 8003c52:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	695a      	ldr	r2, [r3, #20]
 8003c58:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c5c:	d129      	bne.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	f012 0f10 	tst.w	r2, #16
 8003c64:	d115      	bne.n	8003c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7ff f9b9 	bl	8002fdc <HAL_GetTick>
 8003c6a:	1b80      	subs	r0, r0, r6
 8003c6c:	42a0      	cmp	r0, r4
 8003c6e:	d801      	bhi.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8003c70:	2c00      	cmp	r4, #0
 8003c72:	d1ef      	bne.n	8003c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c82:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003c84:	f042 0220 	orr.w	r2, r2, #32
 8003c88:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003c8a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003c8e:	2001      	movs	r0, #1
}
 8003c90:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c92:	f06f 0210 	mvn.w	r2, #16
 8003c96:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ca6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003ca8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003caa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003cae:	2001      	movs	r0, #1
 8003cb0:	e7ee      	b.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e7ec      	b.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08003cb8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	f000 80be 	beq.w	8003e3a <HAL_I2C_Init+0x182>
{
 8003cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cc2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d06b      	beq.n	8003da2 <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cca:	2324      	movs	r3, #36	; 0x24
 8003ccc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003cd0:	6822      	ldr	r2, [r4, #0]
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cda:	f000 fe8b 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cde:	6862      	ldr	r2, [r4, #4]
 8003ce0:	4b58      	ldr	r3, [pc, #352]	; (8003e44 <HAL_I2C_Init+0x18c>)
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d862      	bhi.n	8003dac <HAL_I2C_Init+0xf4>
 8003ce6:	4b58      	ldr	r3, [pc, #352]	; (8003e48 <HAL_I2C_Init+0x190>)
 8003ce8:	4298      	cmp	r0, r3
 8003cea:	bf8c      	ite	hi
 8003cec:	2300      	movhi	r3, #0
 8003cee:	2301      	movls	r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f040 80a4 	bne.w	8003e3e <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8003cf6:	4b55      	ldr	r3, [pc, #340]	; (8003e4c <HAL_I2C_Init+0x194>)
 8003cf8:	fba3 2300 	umull	r2, r3, r3, r0
 8003cfc:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cfe:	6821      	ldr	r1, [r4, #0]
 8003d00:	684a      	ldr	r2, [r1, #4]
 8003d02:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003d06:	431a      	orrs	r2, r3
 8003d08:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d0a:	6825      	ldr	r5, [r4, #0]
 8003d0c:	6a2a      	ldr	r2, [r5, #32]
 8003d0e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003d12:	6866      	ldr	r6, [r4, #4]
 8003d14:	494b      	ldr	r1, [pc, #300]	; (8003e44 <HAL_I2C_Init+0x18c>)
 8003d16:	428e      	cmp	r6, r1
 8003d18:	d84e      	bhi.n	8003db8 <HAL_I2C_Init+0x100>
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d20:	6825      	ldr	r5, [r4, #0]
 8003d22:	69e9      	ldr	r1, [r5, #28]
 8003d24:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003d28:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003d2c:	6863      	ldr	r3, [r4, #4]
 8003d2e:	4a45      	ldr	r2, [pc, #276]	; (8003e44 <HAL_I2C_Init+0x18c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d84b      	bhi.n	8003dcc <HAL_I2C_Init+0x114>
 8003d34:	3801      	subs	r0, #1
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf38      	it	cc
 8003d46:	2304      	movcc	r3, #4
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d4c:	6821      	ldr	r1, [r4, #0]
 8003d4e:	680b      	ldr	r3, [r1, #0]
 8003d50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d54:	69e2      	ldr	r2, [r4, #28]
 8003d56:	6a20      	ldr	r0, [r4, #32]
 8003d58:	4302      	orrs	r2, r0
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d5e:	6821      	ldr	r1, [r4, #0]
 8003d60:	688b      	ldr	r3, [r1, #8]
 8003d62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d6a:	6922      	ldr	r2, [r4, #16]
 8003d6c:	68e0      	ldr	r0, [r4, #12]
 8003d6e:	4302      	orrs	r2, r0
 8003d70:	4313      	orrs	r3, r2
 8003d72:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d74:	6821      	ldr	r1, [r4, #0]
 8003d76:	68cb      	ldr	r3, [r1, #12]
 8003d78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d7c:	6962      	ldr	r2, [r4, #20]
 8003d7e:	69a0      	ldr	r0, [r4, #24]
 8003d80:	4302      	orrs	r2, r0
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	6813      	ldr	r3, [r2, #0]
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d90:	2000      	movs	r0, #0
 8003d92:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d94:	2320      	movs	r3, #32
 8003d96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d9a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003da2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003da6:	f004 f893 	bl	8007ed0 <HAL_I2C_MspInit>
 8003daa:	e78e      	b.n	8003cca <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dac:	4b28      	ldr	r3, [pc, #160]	; (8003e50 <HAL_I2C_Init+0x198>)
 8003dae:	4298      	cmp	r0, r3
 8003db0:	bf8c      	ite	hi
 8003db2:	2300      	movhi	r3, #0
 8003db4:	2301      	movls	r3, #1
 8003db6:	e79b      	b.n	8003cf0 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003db8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	4924      	ldr	r1, [pc, #144]	; (8003e54 <HAL_I2C_Init+0x19c>)
 8003dc2:	fba1 1303 	umull	r1, r3, r1, r3
 8003dc6:	099b      	lsrs	r3, r3, #6
 8003dc8:	3301      	adds	r3, #1
 8003dca:	e7a7      	b.n	8003d1c <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dcc:	68a2      	ldr	r2, [r4, #8]
 8003dce:	b9ba      	cbnz	r2, 8003e00 <HAL_I2C_Init+0x148>
 8003dd0:	1e46      	subs	r6, r0, #1
 8003dd2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8003dd6:	fbb6 f6f7 	udiv	r6, r6, r7
 8003dda:	3601      	adds	r6, #1
 8003ddc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003de0:	fab6 f686 	clz	r6, r6
 8003de4:	0976      	lsrs	r6, r6, #5
 8003de6:	bb36      	cbnz	r6, 8003e36 <HAL_I2C_Init+0x17e>
 8003de8:	b9c2      	cbnz	r2, 8003e1c <HAL_I2C_Init+0x164>
 8003dea:	3801      	subs	r0, #1
 8003dec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003dfa:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003dfe:	e7a3      	b.n	8003d48 <HAL_I2C_Init+0x90>
 8003e00:	1e46      	subs	r6, r0, #1
 8003e02:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003e06:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003e0a:	fbb6 f6f7 	udiv	r6, r6, r7
 8003e0e:	3601      	adds	r6, #1
 8003e10:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003e14:	fab6 f686 	clz	r6, r6
 8003e18:	0976      	lsrs	r6, r6, #5
 8003e1a:	e7e4      	b.n	8003de6 <HAL_I2C_Init+0x12e>
 8003e1c:	3801      	subs	r0, #1
 8003e1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e26:	fbb0 f2f3 	udiv	r2, r0, r3
 8003e2a:	3201      	adds	r2, #1
 8003e2c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003e30:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003e34:	e788      	b.n	8003d48 <HAL_I2C_Init+0x90>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e786      	b.n	8003d48 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003e3a:	2001      	movs	r0, #1
}
 8003e3c:	4770      	bx	lr
    return HAL_ERROR;
 8003e3e:	2001      	movs	r0, #1
 8003e40:	e7ae      	b.n	8003da0 <HAL_I2C_Init+0xe8>
 8003e42:	bf00      	nop
 8003e44:	000186a0 	.word	0x000186a0
 8003e48:	001e847f 	.word	0x001e847f
 8003e4c:	431bde83 	.word	0x431bde83
 8003e50:	003d08ff 	.word	0x003d08ff
 8003e54:	10624dd3 	.word	0x10624dd3

08003e58 <HAL_I2C_Master_Transmit>:
{
 8003e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	4604      	mov	r4, r0
 8003e60:	460e      	mov	r6, r1
 8003e62:	4690      	mov	r8, r2
 8003e64:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003e66:	f7ff f8b9 	bl	8002fdc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d004      	beq.n	8003e7e <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8003e74:	2602      	movs	r6, #2
}
 8003e76:	4630      	mov	r0, r6
 8003e78:	b004      	add	sp, #16
 8003e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e7e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e80:	9000      	str	r0, [sp, #0]
 8003e82:	2319      	movs	r3, #25
 8003e84:	2201      	movs	r2, #1
 8003e86:	494f      	ldr	r1, [pc, #316]	; (8003fc4 <HAL_I2C_Master_Transmit+0x16c>)
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f7ff fd2a 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	f040 8091 	bne.w	8003fb6 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8003e94:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f000 808e 	beq.w	8003fba <HAL_I2C_Master_Transmit+0x162>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	f012 0f01 	tst.w	r2, #1
 8003eac:	d103      	bne.n	8003eb6 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ebe:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ec0:	2321      	movs	r3, #33	; 0x21
 8003ec2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003ed0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ed4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ed8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eda:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <HAL_I2C_Master_Transmit+0x170>)
 8003edc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ede:	462b      	mov	r3, r5
 8003ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f7ff fd87 	bl	80039f8 <I2C_MasterRequestWrite>
 8003eea:	4606      	mov	r6, r0
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d166      	bne.n	8003fbe <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	9303      	str	r3, [sp, #12]
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	9203      	str	r2, [sp, #12]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003f00:	e012      	b.n	8003f28 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d001      	beq.n	8003f0c <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8003f08:	2601      	movs	r6, #1
 8003f0a:	e7b4      	b.n	8003e76 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	6822      	ldr	r2, [r4, #0]
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f14:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003f16:	2601      	movs	r6, #1
 8003f18:	e7ad      	b.n	8003e76 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1a:	462a      	mov	r2, r5
 8003f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7ff fe6a 	bl	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d12c      	bne.n	8003f82 <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8003f28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d035      	beq.n	8003f9a <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2e:	462a      	mov	r2, r5
 8003f30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f32:	4620      	mov	r0, r4
 8003f34:	f7ff fe36 	bl	8003ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d1e2      	bne.n	8003f02 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	7812      	ldrb	r2, [r2, #0]
 8003f42:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f46:	1c4b      	adds	r3, r1, #1
 8003f48:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003f52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	6950      	ldr	r0, [r2, #20]
 8003f5e:	f010 0f04 	tst.w	r0, #4
 8003f62:	d0da      	beq.n	8003f1a <HAL_I2C_Master_Transmit+0xc2>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0d8      	beq.n	8003f1a <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f68:	784b      	ldrb	r3, [r1, #1]
 8003f6a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f6e:	3301      	adds	r3, #1
 8003f70:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003f72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003f7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	8523      	strh	r3, [r4, #40]	; 0x28
 8003f80:	e7cb      	b.n	8003f1a <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8003f88:	2601      	movs	r6, #1
 8003f8a:	e774      	b.n	8003e76 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	6813      	ldr	r3, [r2, #0]
 8003f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f94:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003f96:	2601      	movs	r6, #1
 8003f98:	e76d      	b.n	8003e76 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	6813      	ldr	r3, [r2, #0]
 8003f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fa2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	2320      	movs	r3, #32
 8003fa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003fb0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003fb4:	e75f      	b.n	8003e76 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8003fb6:	2602      	movs	r6, #2
 8003fb8:	e75d      	b.n	8003e76 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003fba:	2602      	movs	r6, #2
 8003fbc:	e75b      	b.n	8003e76 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8003fbe:	2601      	movs	r6, #1
 8003fc0:	e759      	b.n	8003e76 <HAL_I2C_Master_Transmit+0x1e>
 8003fc2:	bf00      	nop
 8003fc4:	00100002 	.word	0x00100002
 8003fc8:	ffff0000 	.word	0xffff0000

08003fcc <HAL_I2C_Master_Receive>:
{
 8003fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	460e      	mov	r6, r1
 8003fd6:	4690      	mov	r8, r2
 8003fd8:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003fda:	f7fe ffff 	bl	8002fdc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fde:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d004      	beq.n	8003ff2 <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8003fe8:	2602      	movs	r6, #2
}
 8003fea:	4630      	mov	r0, r6
 8003fec:	b006      	add	sp, #24
 8003fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff4:	9000      	str	r0, [sp, #0]
 8003ff6:	2319      	movs	r3, #25
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	499e      	ldr	r1, [pc, #632]	; (8004274 <HAL_I2C_Master_Receive+0x2a8>)
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f7ff fc70 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 8004002:	2800      	cmp	r0, #0
 8004004:	f040 8134 	bne.w	8004270 <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 8004008:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800400c:	2b01      	cmp	r3, #1
 800400e:	f000 8137 	beq.w	8004280 <HAL_I2C_Master_Receive+0x2b4>
 8004012:	2301      	movs	r3, #1
 8004014:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	f012 0f01 	tst.w	r2, #1
 8004020:	d103      	bne.n	800402a <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	6813      	ldr	r3, [r2, #0]
 800402e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004032:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004034:	2322      	movs	r3, #34	; 0x22
 8004036:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800403a:	2310      	movs	r3, #16
 800403c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004040:	2300      	movs	r3, #0
 8004042:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004044:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004048:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800404a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800404c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800404e:	4b8a      	ldr	r3, [pc, #552]	; (8004278 <HAL_I2C_Master_Receive+0x2ac>)
 8004050:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004052:	462b      	mov	r3, r5
 8004054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004056:	4631      	mov	r1, r6
 8004058:	4620      	mov	r0, r4
 800405a:	f7ff fd21 	bl	8003aa0 <I2C_MasterRequestRead>
 800405e:	4606      	mov	r6, r0
 8004060:	2800      	cmp	r0, #0
 8004062:	f040 810f 	bne.w	8004284 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 8004066:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004068:	b95b      	cbnz	r3, 8004082 <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	9302      	str	r3, [sp, #8]
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	9202      	str	r2, [sp, #8]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	9202      	str	r2, [sp, #8]
 8004076:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e077      	b.n	8004172 <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 8004082:	2b01      	cmp	r3, #1
 8004084:	d00f      	beq.n	80040a6 <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 8004086:	2b02      	cmp	r3, #2
 8004088:	d01f      	beq.n	80040ca <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	6813      	ldr	r3, [r2, #0]
 800408e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004092:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004094:	2300      	movs	r3, #0
 8004096:	9305      	str	r3, [sp, #20]
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	9205      	str	r2, [sp, #20]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	9305      	str	r3, [sp, #20]
 80040a2:	9b05      	ldr	r3, [sp, #20]
 80040a4:	e065      	b.n	8004172 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	6813      	ldr	r3, [r2, #0]
 80040aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ae:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b0:	2300      	movs	r3, #0
 80040b2:	9303      	str	r3, [sp, #12]
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	9203      	str	r2, [sp, #12]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	9203      	str	r2, [sp, #12]
 80040be:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e053      	b.n	8004172 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	6813      	ldr	r3, [r2, #0]
 80040ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d2:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d4:	6822      	ldr	r2, [r4, #0]
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040dc:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040de:	2300      	movs	r3, #0
 80040e0:	9304      	str	r3, [sp, #16]
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	9204      	str	r2, [sp, #16]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	9304      	str	r3, [sp, #16]
 80040ec:	9b04      	ldr	r3, [sp, #16]
 80040ee:	e040      	b.n	8004172 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f0:	462a      	mov	r2, r5
 80040f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7ff fda9 	bl	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	f040 80c4 	bne.w	8004288 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004106:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800410a:	3301      	adds	r3, #1
 800410c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800410e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004114:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004116:	3b01      	subs	r3, #1
 8004118:	b29b      	uxth	r3, r3
 800411a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800411c:	e029      	b.n	8004172 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800411e:	9500      	str	r5, [sp, #0]
 8004120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004122:	2200      	movs	r2, #0
 8004124:	4955      	ldr	r1, [pc, #340]	; (800427c <HAL_I2C_Master_Receive+0x2b0>)
 8004126:	4620      	mov	r0, r4
 8004128:	f7ff fbdb 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 800412c:	2800      	cmp	r0, #0
 800412e:	f040 80ad 	bne.w	800428c <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004132:	6822      	ldr	r2, [r4, #0]
 8004134:	6813      	ldr	r3, [r2, #0]
 8004136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800413a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004142:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004144:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004146:	1c53      	adds	r3, r2, #1
 8004148:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800414a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800414c:	3b01      	subs	r3, #1
 800414e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004150:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004152:	3b01      	subs	r3, #1
 8004154:	b29b      	uxth	r3, r3
 8004156:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800415e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004160:	3301      	adds	r3, #1
 8004162:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004164:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004166:	3b01      	subs	r3, #1
 8004168:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800416a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800416c:	3b01      	subs	r3, #1
 800416e:	b29b      	uxth	r3, r3
 8004170:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004172:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004174:	2b00      	cmp	r3, #0
 8004176:	d072      	beq.n	800425e <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8004178:	2b03      	cmp	r3, #3
 800417a:	d849      	bhi.n	8004210 <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 800417c:	2b01      	cmp	r3, #1
 800417e:	d0b7      	beq.n	80040f0 <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 8004180:	2b02      	cmp	r3, #2
 8004182:	d0cc      	beq.n	800411e <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004184:	9500      	str	r5, [sp, #0]
 8004186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004188:	2200      	movs	r2, #0
 800418a:	493c      	ldr	r1, [pc, #240]	; (800427c <HAL_I2C_Master_Receive+0x2b0>)
 800418c:	4620      	mov	r0, r4
 800418e:	f7ff fba8 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 8004192:	2800      	cmp	r0, #0
 8004194:	d17c      	bne.n	8004290 <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004196:	6822      	ldr	r2, [r4, #0]
 8004198:	6813      	ldr	r3, [r2, #0]
 800419a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800419e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041a6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80041a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041aa:	3301      	adds	r3, #1
 80041ac:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041bc:	9500      	str	r5, [sp, #0]
 80041be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041c0:	2200      	movs	r2, #0
 80041c2:	492e      	ldr	r1, [pc, #184]	; (800427c <HAL_I2C_Master_Receive+0x2b0>)
 80041c4:	4620      	mov	r0, r4
 80041c6:	f7ff fb8c 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 80041ca:	2800      	cmp	r0, #0
 80041cc:	d162      	bne.n	8004294 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	6822      	ldr	r2, [r4, #0]
 80041d0:	6813      	ldr	r3, [r2, #0]
 80041d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041de:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80041e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041e2:	1c53      	adds	r3, r2, #1
 80041e4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80041fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041fc:	3301      	adds	r3, #1
 80041fe:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004200:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004206:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004208:	3b01      	subs	r3, #1
 800420a:	b29b      	uxth	r3, r3
 800420c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800420e:	e7b0      	b.n	8004172 <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004210:	462a      	mov	r2, r5
 8004212:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004214:	4620      	mov	r0, r4
 8004216:	f7ff fd19 	bl	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800421a:	2800      	cmp	r0, #0
 800421c:	d13c      	bne.n	8004298 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004224:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004226:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004228:	1c53      	adds	r3, r2, #1
 800422a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800422c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800422e:	3b01      	subs	r3, #1
 8004230:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004232:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004234:	3b01      	subs	r3, #1
 8004236:	b29b      	uxth	r3, r3
 8004238:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	6959      	ldr	r1, [r3, #20]
 800423e:	f011 0f04 	tst.w	r1, #4
 8004242:	d096      	beq.n	8004172 <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800424a:	3301      	adds	r3, #1
 800424c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800424e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004250:	3b01      	subs	r3, #1
 8004252:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004254:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004256:	3b01      	subs	r3, #1
 8004258:	b29b      	uxth	r3, r3
 800425a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800425c:	e789      	b.n	8004172 <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800425e:	2320      	movs	r3, #32
 8004260:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	2300      	movs	r3, #0
 8004266:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800426a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800426e:	e6bc      	b.n	8003fea <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 8004270:	2602      	movs	r6, #2
 8004272:	e6ba      	b.n	8003fea <HAL_I2C_Master_Receive+0x1e>
 8004274:	00100002 	.word	0x00100002
 8004278:	ffff0000 	.word	0xffff0000
 800427c:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8004280:	2602      	movs	r6, #2
 8004282:	e6b2      	b.n	8003fea <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8004284:	2601      	movs	r6, #1
 8004286:	e6b0      	b.n	8003fea <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004288:	2601      	movs	r6, #1
 800428a:	e6ae      	b.n	8003fea <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 800428c:	2601      	movs	r6, #1
 800428e:	e6ac      	b.n	8003fea <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004290:	2601      	movs	r6, #1
 8004292:	e6aa      	b.n	8003fea <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004294:	2601      	movs	r6, #1
 8004296:	e6a8      	b.n	8003fea <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8004298:	2601      	movs	r6, #1
 800429a:	e6a6      	b.n	8003fea <HAL_I2C_Master_Receive+0x1e>

0800429c <HAL_I2C_IsDeviceReady>:
{
 800429c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042a0:	b085      	sub	sp, #20
 80042a2:	4604      	mov	r4, r0
 80042a4:	4688      	mov	r8, r1
 80042a6:	4691      	mov	r9, r2
 80042a8:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80042aa:	f7fe fe97 	bl	8002fdc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d004      	beq.n	80042c2 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	b005      	add	sp, #20
 80042be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042c2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042c4:	9000      	str	r0, [sp, #0]
 80042c6:	2319      	movs	r3, #25
 80042c8:	2201      	movs	r2, #1
 80042ca:	4954      	ldr	r1, [pc, #336]	; (800441c <HAL_I2C_IsDeviceReady+0x180>)
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7ff fb08 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	f040 8097 	bne.w	8004406 <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 80042d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f000 8094 	beq.w	800440a <HAL_I2C_IsDeviceReady+0x16e>
 80042e2:	2301      	movs	r3, #1
 80042e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	f012 0f01 	tst.w	r2, #1
 80042f0:	d103      	bne.n	80042fa <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042fa:	6822      	ldr	r2, [r4, #0]
 80042fc:	6813      	ldr	r3, [r2, #0]
 80042fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004302:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004304:	2324      	movs	r3, #36	; 0x24
 8004306:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430a:	2300      	movs	r3, #0
 800430c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800430e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8004312:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8004314:	2701      	movs	r7, #1
 8004316:	e034      	b.n	8004382 <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004318:	23a0      	movs	r3, #160	; 0xa0
 800431a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004326:	6959      	ldr	r1, [r3, #20]
 8004328:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800432c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2ba0      	cmp	r3, #160	; 0xa0
 8004334:	d009      	beq.n	800434a <HAL_I2C_IsDeviceReady+0xae>
 8004336:	b942      	cbnz	r2, 800434a <HAL_I2C_IsDeviceReady+0xae>
 8004338:	b939      	cbnz	r1, 800434a <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800433a:	f7fe fe4f 	bl	8002fdc <HAL_GetTick>
 800433e:	1b80      	subs	r0, r0, r6
 8004340:	42a8      	cmp	r0, r5
 8004342:	d8e9      	bhi.n	8004318 <HAL_I2C_IsDeviceReady+0x7c>
 8004344:	2d00      	cmp	r5, #0
 8004346:	d1ea      	bne.n	800431e <HAL_I2C_IsDeviceReady+0x82>
 8004348:	e7e6      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 800434a:	2320      	movs	r3, #32
 800434c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	f012 0f02 	tst.w	r2, #2
 8004358:	d131      	bne.n	80043be <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004360:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004368:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800436a:	9600      	str	r6, [sp, #0]
 800436c:	2319      	movs	r3, #25
 800436e:	2201      	movs	r2, #1
 8004370:	492a      	ldr	r1, [pc, #168]	; (800441c <HAL_I2C_IsDeviceReady+0x180>)
 8004372:	4620      	mov	r0, r4
 8004374:	f7ff fab5 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 8004378:	2800      	cmp	r0, #0
 800437a:	d14c      	bne.n	8004416 <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 800437c:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800437e:	454f      	cmp	r7, r9
 8004380:	d239      	bcs.n	80043f6 <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	6813      	ldr	r3, [r2, #0]
 8004386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438a:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800438c:	9600      	str	r6, [sp, #0]
 800438e:	462b      	mov	r3, r5
 8004390:	2200      	movs	r2, #0
 8004392:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004396:	4620      	mov	r0, r4
 8004398:	f7ff faa3 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 800439c:	2800      	cmp	r0, #0
 800439e:	d136      	bne.n	800440e <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 80043a6:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80043a8:	f7fe fe18 	bl	8002fdc <HAL_GetTick>
 80043ac:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043b6:	6959      	ldr	r1, [r3, #20]
 80043b8:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043bc:	e7b6      	b.n	800432c <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c6:	2300      	movs	r3, #0
 80043c8:	9303      	str	r3, [sp, #12]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	9203      	str	r2, [sp, #12]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	9303      	str	r3, [sp, #12]
 80043d4:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043d6:	9600      	str	r6, [sp, #0]
 80043d8:	2319      	movs	r3, #25
 80043da:	2201      	movs	r2, #1
 80043dc:	490f      	ldr	r1, [pc, #60]	; (800441c <HAL_I2C_IsDeviceReady+0x180>)
 80043de:	4620      	mov	r0, r4
 80043e0:	f7ff fa7f 	bl	80038e2 <I2C_WaitOnFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	b9a0      	cbnz	r0, 8004412 <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 80043e8:	2220      	movs	r2, #32
 80043ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80043ee:	2200      	movs	r2, #0
 80043f0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 80043f4:	e761      	b.n	80042ba <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	2320      	movs	r3, #32
 80043f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80043fc:	2300      	movs	r3, #0
 80043fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e759      	b.n	80042ba <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
 8004408:	e757      	b.n	80042ba <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800440a:	2302      	movs	r3, #2
 800440c:	e755      	b.n	80042ba <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e753      	b.n	80042ba <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e751      	b.n	80042ba <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e74f      	b.n	80042ba <HAL_I2C_IsDeviceReady+0x1e>
 800441a:	bf00      	nop
 800441c:	00100002 	.word	0x00100002

08004420 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004420:	2800      	cmp	r0, #0
 8004422:	f000 81bb 	beq.w	800479c <HAL_RCC_OscConfig+0x37c>
{
 8004426:	b570      	push	{r4, r5, r6, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442c:	6803      	ldr	r3, [r0, #0]
 800442e:	f013 0f01 	tst.w	r3, #1
 8004432:	d03b      	beq.n	80044ac <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004434:	4ba7      	ldr	r3, [pc, #668]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b04      	cmp	r3, #4
 800443e:	d02c      	beq.n	800449a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004440:	4ba4      	ldr	r3, [pc, #656]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004448:	2b08      	cmp	r3, #8
 800444a:	d021      	beq.n	8004490 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444c:	6863      	ldr	r3, [r4, #4]
 800444e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004452:	d04f      	beq.n	80044f4 <HAL_RCC_OscConfig+0xd4>
 8004454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004458:	d052      	beq.n	8004500 <HAL_RCC_OscConfig+0xe0>
 800445a:	4b9e      	ldr	r3, [pc, #632]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800446a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800446c:	6863      	ldr	r3, [r4, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d050      	beq.n	8004514 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004472:	f7fe fdb3 	bl	8002fdc <HAL_GetTick>
 8004476:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004478:	4b96      	ldr	r3, [pc, #600]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004480:	d114      	bne.n	80044ac <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004482:	f7fe fdab 	bl	8002fdc <HAL_GetTick>
 8004486:	1b40      	subs	r0, r0, r5
 8004488:	2864      	cmp	r0, #100	; 0x64
 800448a:	d9f5      	bls.n	8004478 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800448c:	2003      	movs	r0, #3
 800448e:	e18a      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004490:	4b90      	ldr	r3, [pc, #576]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004498:	d0d8      	beq.n	800444c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449a:	4b8e      	ldr	r3, [pc, #568]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80044a2:	d003      	beq.n	80044ac <HAL_RCC_OscConfig+0x8c>
 80044a4:	6863      	ldr	r3, [r4, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 817a 	beq.w	80047a0 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	f013 0f02 	tst.w	r3, #2
 80044b2:	d055      	beq.n	8004560 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044b4:	4b87      	ldr	r3, [pc, #540]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f013 0f0c 	tst.w	r3, #12
 80044bc:	d03e      	beq.n	800453c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044be:	4b85      	ldr	r3, [pc, #532]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d033      	beq.n	8004532 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044ca:	68e3      	ldr	r3, [r4, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d068      	beq.n	80045a2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d0:	4b81      	ldr	r3, [pc, #516]	; (80046d8 <HAL_RCC_OscConfig+0x2b8>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fe fd81 	bl	8002fdc <HAL_GetTick>
 80044da:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	4b7d      	ldr	r3, [pc, #500]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f013 0f02 	tst.w	r3, #2
 80044e4:	d154      	bne.n	8004590 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e6:	f7fe fd79 	bl	8002fdc <HAL_GetTick>
 80044ea:	1b40      	subs	r0, r0, r5
 80044ec:	2802      	cmp	r0, #2
 80044ee:	d9f5      	bls.n	80044dc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80044f0:	2003      	movs	r0, #3
 80044f2:	e158      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f4:	4a77      	ldr	r2, [pc, #476]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 80044f6:	6813      	ldr	r3, [r2, #0]
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e7b5      	b.n	800446c <HAL_RCC_OscConfig+0x4c>
 8004500:	4b74      	ldr	r3, [pc, #464]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e7ab      	b.n	800446c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004514:	f7fe fd62 	bl	8002fdc <HAL_GetTick>
 8004518:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451a:	4b6e      	ldr	r3, [pc, #440]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004522:	d0c3      	beq.n	80044ac <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004524:	f7fe fd5a 	bl	8002fdc <HAL_GetTick>
 8004528:	1b40      	subs	r0, r0, r5
 800452a:	2864      	cmp	r0, #100	; 0x64
 800452c:	d9f5      	bls.n	800451a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800452e:	2003      	movs	r0, #3
 8004530:	e139      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004532:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800453a:	d1c6      	bne.n	80044ca <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453c:	4b65      	ldr	r3, [pc, #404]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f013 0f02 	tst.w	r3, #2
 8004544:	d004      	beq.n	8004550 <HAL_RCC_OscConfig+0x130>
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d001      	beq.n	8004550 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 800454c:	2001      	movs	r0, #1
 800454e:	e12a      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004550:	4a60      	ldr	r2, [pc, #384]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004558:	6921      	ldr	r1, [r4, #16]
 800455a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800455e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	f013 0f08 	tst.w	r3, #8
 8004566:	d040      	beq.n	80045ea <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004568:	6963      	ldr	r3, [r4, #20]
 800456a:	b363      	cbz	r3, 80045c6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456c:	4b5b      	ldr	r3, [pc, #364]	; (80046dc <HAL_RCC_OscConfig+0x2bc>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004572:	f7fe fd33 	bl	8002fdc <HAL_GetTick>
 8004576:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004578:	4b56      	ldr	r3, [pc, #344]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 800457a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457c:	f013 0f02 	tst.w	r3, #2
 8004580:	d133      	bne.n	80045ea <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004582:	f7fe fd2b 	bl	8002fdc <HAL_GetTick>
 8004586:	1b40      	subs	r0, r0, r5
 8004588:	2802      	cmp	r0, #2
 800458a:	d9f5      	bls.n	8004578 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800458c:	2003      	movs	r0, #3
 800458e:	e10a      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4a50      	ldr	r2, [pc, #320]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004598:	6921      	ldr	r1, [r4, #16]
 800459a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	e7de      	b.n	8004560 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80045a2:	4b4d      	ldr	r3, [pc, #308]	; (80046d8 <HAL_RCC_OscConfig+0x2b8>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80045a8:	f7fe fd18 	bl	8002fdc <HAL_GetTick>
 80045ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ae:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f013 0f02 	tst.w	r3, #2
 80045b6:	d0d3      	beq.n	8004560 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b8:	f7fe fd10 	bl	8002fdc <HAL_GetTick>
 80045bc:	1b40      	subs	r0, r0, r5
 80045be:	2802      	cmp	r0, #2
 80045c0:	d9f5      	bls.n	80045ae <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80045c2:	2003      	movs	r0, #3
 80045c4:	e0ef      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c6:	4b45      	ldr	r3, [pc, #276]	; (80046dc <HAL_RCC_OscConfig+0x2bc>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045cc:	f7fe fd06 	bl	8002fdc <HAL_GetTick>
 80045d0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d2:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 80045d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d6:	f013 0f02 	tst.w	r3, #2
 80045da:	d006      	beq.n	80045ea <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045dc:	f7fe fcfe 	bl	8002fdc <HAL_GetTick>
 80045e0:	1b40      	subs	r0, r0, r5
 80045e2:	2802      	cmp	r0, #2
 80045e4:	d9f5      	bls.n	80045d2 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80045e6:	2003      	movs	r0, #3
 80045e8:	e0dd      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	f013 0f04 	tst.w	r3, #4
 80045f0:	d079      	beq.n	80046e6 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f2:	4b38      	ldr	r3, [pc, #224]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80045fa:	d133      	bne.n	8004664 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fc:	2300      	movs	r3, #0
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	4b34      	ldr	r3, [pc, #208]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 8004602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004614:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004616:	4b32      	ldr	r3, [pc, #200]	; (80046e0 <HAL_RCC_OscConfig+0x2c0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800461e:	d023      	beq.n	8004668 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004620:	68a3      	ldr	r3, [r4, #8]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d034      	beq.n	8004690 <HAL_RCC_OscConfig+0x270>
 8004626:	2b05      	cmp	r3, #5
 8004628:	d038      	beq.n	800469c <HAL_RCC_OscConfig+0x27c>
 800462a:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 800462c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	671a      	str	r2, [r3, #112]	; 0x70
 8004634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004636:	f022 0204 	bic.w	r2, r2, #4
 800463a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800463c:	68a3      	ldr	r3, [r4, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d036      	beq.n	80046b0 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fe fccb 	bl	8002fdc <HAL_GetTick>
 8004646:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004648:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	f013 0f02 	tst.w	r3, #2
 8004650:	d148      	bne.n	80046e4 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004652:	f7fe fcc3 	bl	8002fdc <HAL_GetTick>
 8004656:	1b80      	subs	r0, r0, r6
 8004658:	f241 3388 	movw	r3, #5000	; 0x1388
 800465c:	4298      	cmp	r0, r3
 800465e:	d9f3      	bls.n	8004648 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8004660:	2003      	movs	r0, #3
 8004662:	e0a0      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8004664:	2500      	movs	r5, #0
 8004666:	e7d6      	b.n	8004616 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004668:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <HAL_RCC_OscConfig+0x2c0>)
 800466a:	6813      	ldr	r3, [r2, #0]
 800466c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004670:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004672:	f7fe fcb3 	bl	8002fdc <HAL_GetTick>
 8004676:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_RCC_OscConfig+0x2c0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004680:	d1ce      	bne.n	8004620 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004682:	f7fe fcab 	bl	8002fdc <HAL_GetTick>
 8004686:	1b80      	subs	r0, r0, r6
 8004688:	2802      	cmp	r0, #2
 800468a:	d9f5      	bls.n	8004678 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 800468c:	2003      	movs	r0, #3
 800468e:	e08a      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004690:	4a10      	ldr	r2, [pc, #64]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 8004692:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
 800469a:	e7cf      	b.n	800463c <HAL_RCC_OscConfig+0x21c>
 800469c:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 800469e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046a0:	f042 0204 	orr.w	r2, r2, #4
 80046a4:	671a      	str	r2, [r3, #112]	; 0x70
 80046a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046a8:	f042 0201 	orr.w	r2, r2, #1
 80046ac:	671a      	str	r2, [r3, #112]	; 0x70
 80046ae:	e7c5      	b.n	800463c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b0:	f7fe fc94 	bl	8002fdc <HAL_GetTick>
 80046b4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b6:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <HAL_RCC_OscConfig+0x2b4>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	f013 0f02 	tst.w	r3, #2
 80046be:	d011      	beq.n	80046e4 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c0:	f7fe fc8c 	bl	8002fdc <HAL_GetTick>
 80046c4:	1b80      	subs	r0, r0, r6
 80046c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80046ca:	4298      	cmp	r0, r3
 80046cc:	d9f3      	bls.n	80046b6 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80046ce:	2003      	movs	r0, #3
 80046d0:	e069      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800
 80046d8:	42470000 	.word	0x42470000
 80046dc:	42470e80 	.word	0x42470e80
 80046e0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046e4:	b9e5      	cbnz	r5, 8004720 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e6:	69a3      	ldr	r3, [r4, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d05b      	beq.n	80047a4 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ec:	4a30      	ldr	r2, [pc, #192]	; (80047b0 <HAL_RCC_OscConfig+0x390>)
 80046ee:	6892      	ldr	r2, [r2, #8]
 80046f0:	f002 020c 	and.w	r2, r2, #12
 80046f4:	2a08      	cmp	r2, #8
 80046f6:	d058      	beq.n	80047aa <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d017      	beq.n	800472c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fc:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <HAL_RCC_OscConfig+0x394>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fe fc6b 	bl	8002fdc <HAL_GetTick>
 8004706:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004708:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <HAL_RCC_OscConfig+0x390>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004710:	d042      	beq.n	8004798 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004712:	f7fe fc63 	bl	8002fdc <HAL_GetTick>
 8004716:	1b00      	subs	r0, r0, r4
 8004718:	2802      	cmp	r0, #2
 800471a:	d9f5      	bls.n	8004708 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800471c:	2003      	movs	r0, #3
 800471e:	e042      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004720:	4a23      	ldr	r2, [pc, #140]	; (80047b0 <HAL_RCC_OscConfig+0x390>)
 8004722:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004728:	6413      	str	r3, [r2, #64]	; 0x40
 800472a:	e7dc      	b.n	80046e6 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 800472c:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <HAL_RCC_OscConfig+0x394>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004732:	f7fe fc53 	bl	8002fdc <HAL_GetTick>
 8004736:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_RCC_OscConfig+0x390>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004740:	d006      	beq.n	8004750 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004742:	f7fe fc4b 	bl	8002fdc <HAL_GetTick>
 8004746:	1b40      	subs	r0, r0, r5
 8004748:	2802      	cmp	r0, #2
 800474a:	d9f5      	bls.n	8004738 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800474c:	2003      	movs	r0, #3
 800474e:	e02a      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004750:	69e3      	ldr	r3, [r4, #28]
 8004752:	6a22      	ldr	r2, [r4, #32]
 8004754:	4313      	orrs	r3, r2
 8004756:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004758:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800475c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800475e:	0852      	lsrs	r2, r2, #1
 8004760:	3a01      	subs	r2, #1
 8004762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004766:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004768:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800476c:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <HAL_RCC_OscConfig+0x390>)
 800476e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_RCC_OscConfig+0x394>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004776:	f7fe fc31 	bl	8002fdc <HAL_GetTick>
 800477a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_OscConfig+0x390>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004784:	d106      	bne.n	8004794 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fe fc29 	bl	8002fdc <HAL_GetTick>
 800478a:	1b00      	subs	r0, r0, r4
 800478c:	2802      	cmp	r0, #2
 800478e:	d9f5      	bls.n	800477c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8004790:	2003      	movs	r0, #3
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004794:	2000      	movs	r0, #0
 8004796:	e006      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
 8004798:	2000      	movs	r0, #0
 800479a:	e004      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 800479c:	2001      	movs	r0, #1
}
 800479e:	4770      	bx	lr
        return HAL_ERROR;
 80047a0:	2001      	movs	r0, #1
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 80047a4:	2000      	movs	r0, #0
}
 80047a6:	b002      	add	sp, #8
 80047a8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80047aa:	2001      	movs	r0, #1
 80047ac:	e7fb      	b.n	80047a6 <HAL_RCC_OscConfig+0x386>
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	42470060 	.word	0x42470060

080047b8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b8:	4b32      	ldr	r3, [pc, #200]	; (8004884 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 030c 	and.w	r3, r3, #12
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d05c      	beq.n	800487e <HAL_RCC_GetSysClockFreq+0xc6>
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c8:	482f      	ldr	r0, [pc, #188]	; (8004888 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047ca:	4770      	bx	lr
{
 80047cc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d0:	4b2c      	ldr	r3, [pc, #176]	; (8004884 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80047de:	d02b      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e0:	4b28      	ldr	r3, [pc, #160]	; (8004884 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80047e8:	461e      	mov	r6, r3
 80047ea:	2700      	movs	r7, #0
 80047ec:	015c      	lsls	r4, r3, #5
 80047ee:	2500      	movs	r5, #0
 80047f0:	1ae4      	subs	r4, r4, r3
 80047f2:	eb65 0507 	sbc.w	r5, r5, r7
 80047f6:	01a9      	lsls	r1, r5, #6
 80047f8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80047fc:	01a0      	lsls	r0, r4, #6
 80047fe:	1b00      	subs	r0, r0, r4
 8004800:	eb61 0105 	sbc.w	r1, r1, r5
 8004804:	00cb      	lsls	r3, r1, #3
 8004806:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800480a:	00c4      	lsls	r4, r0, #3
 800480c:	19a0      	adds	r0, r4, r6
 800480e:	eb43 0107 	adc.w	r1, r3, r7
 8004812:	024b      	lsls	r3, r1, #9
 8004814:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004818:	0244      	lsls	r4, r0, #9
 800481a:	4620      	mov	r0, r4
 800481c:	4619      	mov	r1, r3
 800481e:	2300      	movs	r3, #0
 8004820:	f7fc fa3a 	bl	8000c98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800482c:	3301      	adds	r3, #1
 800482e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004830:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004834:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004838:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_RCC_GetSysClockFreq+0xcc>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004840:	461e      	mov	r6, r3
 8004842:	2700      	movs	r7, #0
 8004844:	015c      	lsls	r4, r3, #5
 8004846:	2500      	movs	r5, #0
 8004848:	1ae4      	subs	r4, r4, r3
 800484a:	eb65 0507 	sbc.w	r5, r5, r7
 800484e:	01a9      	lsls	r1, r5, #6
 8004850:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004854:	01a0      	lsls	r0, r4, #6
 8004856:	1b00      	subs	r0, r0, r4
 8004858:	eb61 0105 	sbc.w	r1, r1, r5
 800485c:	00cb      	lsls	r3, r1, #3
 800485e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004862:	00c4      	lsls	r4, r0, #3
 8004864:	19a0      	adds	r0, r4, r6
 8004866:	eb43 0107 	adc.w	r1, r3, r7
 800486a:	028b      	lsls	r3, r1, #10
 800486c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004870:	0284      	lsls	r4, r0, #10
 8004872:	4620      	mov	r0, r4
 8004874:	4619      	mov	r1, r3
 8004876:	2300      	movs	r3, #0
 8004878:	f7fc fa0e 	bl	8000c98 <__aeabi_uldivmod>
 800487c:	e7d2      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 800487e:	4803      	ldr	r0, [pc, #12]	; (800488c <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	00f42400 	.word	0x00f42400
 800488c:	007a1200 	.word	0x007a1200

08004890 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004890:	2800      	cmp	r0, #0
 8004892:	f000 809d 	beq.w	80049d0 <HAL_RCC_ClockConfig+0x140>
{
 8004896:	b570      	push	{r4, r5, r6, lr}
 8004898:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800489a:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <HAL_RCC_ClockConfig+0x148>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	428b      	cmp	r3, r1
 80048a4:	d209      	bcs.n	80048ba <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	b2cb      	uxtb	r3, r1
 80048a8:	4a4b      	ldr	r2, [pc, #300]	; (80049d8 <HAL_RCC_ClockConfig+0x148>)
 80048aa:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ac:	6813      	ldr	r3, [r2, #0]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	428b      	cmp	r3, r1
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80048b6:	2001      	movs	r0, #1
}
 80048b8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f013 0f02 	tst.w	r3, #2
 80048c0:	d017      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c2:	f013 0f04 	tst.w	r3, #4
 80048c6:	d004      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c8:	4a44      	ldr	r2, [pc, #272]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 80048ca:	6893      	ldr	r3, [r2, #8]
 80048cc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048d0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	f013 0f08 	tst.w	r3, #8
 80048d8:	d004      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048da:	4a40      	ldr	r2, [pc, #256]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 80048dc:	6893      	ldr	r3, [r2, #8]
 80048de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048e2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4a3d      	ldr	r2, [pc, #244]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 80048e6:	6893      	ldr	r3, [r2, #8]
 80048e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ec:	68a0      	ldr	r0, [r4, #8]
 80048ee:	4303      	orrs	r3, r0
 80048f0:	6093      	str	r3, [r2, #8]
 80048f2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	f013 0f01 	tst.w	r3, #1
 80048fa:	d032      	beq.n	8004962 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fc:	6863      	ldr	r3, [r4, #4]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d021      	beq.n	8004946 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004902:	1e9a      	subs	r2, r3, #2
 8004904:	2a01      	cmp	r2, #1
 8004906:	d925      	bls.n	8004954 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004908:	4a34      	ldr	r2, [pc, #208]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	f012 0f02 	tst.w	r2, #2
 8004910:	d060      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004912:	4932      	ldr	r1, [pc, #200]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 8004914:	688a      	ldr	r2, [r1, #8]
 8004916:	f022 0203 	bic.w	r2, r2, #3
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800491e:	f7fe fb5d 	bl	8002fdc <HAL_GetTick>
 8004922:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	6862      	ldr	r2, [r4, #4]
 800492e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004932:	d016      	beq.n	8004962 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fe fb52 	bl	8002fdc <HAL_GetTick>
 8004938:	1b80      	subs	r0, r0, r6
 800493a:	f241 3388 	movw	r3, #5000	; 0x1388
 800493e:	4298      	cmp	r0, r3
 8004940:	d9f0      	bls.n	8004924 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8004942:	2003      	movs	r0, #3
 8004944:	e7b8      	b.n	80048b8 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004946:	4a25      	ldr	r2, [pc, #148]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800494e:	d1e0      	bne.n	8004912 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004950:	2001      	movs	r0, #1
 8004952:	e7b1      	b.n	80048b8 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004954:	4a21      	ldr	r2, [pc, #132]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800495c:	d1d9      	bne.n	8004912 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800495e:	2001      	movs	r0, #1
 8004960:	e7aa      	b.n	80048b8 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_RCC_ClockConfig+0x148>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	42ab      	cmp	r3, r5
 800496c:	d909      	bls.n	8004982 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	b2ea      	uxtb	r2, r5
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_RCC_ClockConfig+0x148>)
 8004972:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	42ab      	cmp	r3, r5
 800497c:	d001      	beq.n	8004982 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800497e:	2001      	movs	r0, #1
 8004980:	e79a      	b.n	80048b8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	f013 0f04 	tst.w	r3, #4
 8004988:	d006      	beq.n	8004998 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800498a:	4a14      	ldr	r2, [pc, #80]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 800498c:	6893      	ldr	r3, [r2, #8]
 800498e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004992:	68e1      	ldr	r1, [r4, #12]
 8004994:	430b      	orrs	r3, r1
 8004996:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	f013 0f08 	tst.w	r3, #8
 800499e:	d007      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049a0:	4a0e      	ldr	r2, [pc, #56]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 80049a2:	6893      	ldr	r3, [r2, #8]
 80049a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80049a8:	6921      	ldr	r1, [r4, #16]
 80049aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80049ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049b0:	f7ff ff02 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_ClockConfig+0x14c>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049bc:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <HAL_RCC_ClockConfig+0x150>)
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	40d8      	lsrs	r0, r3
 80049c2:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <HAL_RCC_ClockConfig+0x154>)
 80049c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80049c6:	2005      	movs	r0, #5
 80049c8:	f003 fbec 	bl	80081a4 <HAL_InitTick>
  return HAL_OK;
 80049cc:	2000      	movs	r0, #0
 80049ce:	e773      	b.n	80048b8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80049d0:	2001      	movs	r0, #1
}
 80049d2:	4770      	bx	lr
        return HAL_ERROR;
 80049d4:	2001      	movs	r0, #1
 80049d6:	e76f      	b.n	80048b8 <HAL_RCC_ClockConfig+0x28>
 80049d8:	40023c00 	.word	0x40023c00
 80049dc:	40023800 	.word	0x40023800
 80049e0:	0800e82c 	.word	0x0800e82c
 80049e4:	20000090 	.word	0x20000090

080049e8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80049e8:	4b01      	ldr	r3, [pc, #4]	; (80049f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000090 	.word	0x20000090

080049f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049f6:	f7ff fff7 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 80049fa:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <HAL_RCC_GetPCLK1Freq+0x18>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004a02:	4a03      	ldr	r2, [pc, #12]	; (8004a10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004a04:	5cd3      	ldrb	r3, [r2, r3]
}
 8004a06:	40d8      	lsrs	r0, r3
 8004a08:	bd08      	pop	{r3, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	0800e83c 	.word	0x0800e83c

08004a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a14:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a16:	f7ff ffe7 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a1a:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004a22:	4a03      	ldr	r2, [pc, #12]	; (8004a30 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004a24:	5cd3      	ldrb	r3, [r2, r3]
}
 8004a26:	40d8      	lsrs	r0, r3
 8004a28:	bd08      	pop	{r3, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	0800e83c 	.word	0x0800e83c

08004a34 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a34:	230f      	movs	r3, #15
 8004a36:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCC_GetClockConfig+0x34>)
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	f002 0203 	and.w	r2, r2, #3
 8004a40:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004a48:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004a50:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	08db      	lsrs	r3, r3, #3
 8004a56:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004a5a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <HAL_RCC_GetClockConfig+0x38>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	600b      	str	r3, [r1, #0]
}
 8004a66:	4770      	bx	lr
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40023c00 	.word	0x40023c00

08004a70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	4605      	mov	r5, r0
 8004a74:	460f      	mov	r7, r1
 8004a76:	4616      	mov	r6, r2
 8004a78:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	ea37 0303 	bics.w	r3, r7, r3
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	42b3      	cmp	r3, r6
 8004a8a:	d037      	beq.n	8004afc <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a8c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004a90:	d0f3      	beq.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a92:	f7fe faa3 	bl	8002fdc <HAL_GetTick>
 8004a96:	9b06      	ldr	r3, [sp, #24]
 8004a98:	1ac0      	subs	r0, r0, r3
 8004a9a:	42a0      	cmp	r0, r4
 8004a9c:	d201      	bcs.n	8004aa2 <SPI_WaitFlagStateUntilTimeout+0x32>
 8004a9e:	2c00      	cmp	r4, #0
 8004aa0:	d1eb      	bne.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aa2:	682a      	ldr	r2, [r5, #0]
 8004aa4:	6853      	ldr	r3, [r2, #4]
 8004aa6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004aaa:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aac:	686b      	ldr	r3, [r5, #4]
 8004aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab2:	d00b      	beq.n	8004acc <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ab4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aba:	d014      	beq.n	8004ae6 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ac8:	2003      	movs	r0, #3
 8004aca:	e018      	b.n	8004afe <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004acc:	68ab      	ldr	r3, [r5, #8]
 8004ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad2:	d002      	beq.n	8004ada <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad8:	d1ec      	bne.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8004ada:	682a      	ldr	r2, [r5, #0]
 8004adc:	6813      	ldr	r3, [r2, #0]
 8004ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e7e6      	b.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004ae6:	682a      	ldr	r2, [r5, #0]
 8004ae8:	6813      	ldr	r3, [r2, #0]
 8004aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	682a      	ldr	r2, [r5, #0]
 8004af2:	6813      	ldr	r3, [r2, #0]
 8004af4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e7df      	b.n	8004abc <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8004afc:	2000      	movs	r0, #0
}
 8004afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b530      	push	{r4, r5, lr}
 8004b02:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b04:	4c16      	ldr	r4, [pc, #88]	; (8004b60 <SPI_EndRxTxTransaction+0x60>)
 8004b06:	6824      	ldr	r4, [r4, #0]
 8004b08:	4d16      	ldr	r5, [pc, #88]	; (8004b64 <SPI_EndRxTxTransaction+0x64>)
 8004b0a:	fba5 3404 	umull	r3, r4, r5, r4
 8004b0e:	0d64      	lsrs	r4, r4, #21
 8004b10:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004b14:	fb05 f404 	mul.w	r4, r5, r4
 8004b18:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b1a:	6844      	ldr	r4, [r0, #4]
 8004b1c:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8004b20:	d00b      	beq.n	8004b3a <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	b1c3      	cbz	r3, 8004b58 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8004b26:	9b03      	ldr	r3, [sp, #12]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b2c:	6803      	ldr	r3, [r0, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b34:	d1f5      	bne.n	8004b22 <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e00f      	b.n	8004b5a <SPI_EndRxTxTransaction+0x5a>
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3e:	9200      	str	r2, [sp, #0]
 8004b40:	2200      	movs	r2, #0
 8004b42:	2180      	movs	r1, #128	; 0x80
 8004b44:	f7ff ff94 	bl	8004a70 <SPI_WaitFlagStateUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	b130      	cbz	r0, 8004b5a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b4e:	f043 0320 	orr.w	r3, r3, #32
 8004b52:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e000      	b.n	8004b5a <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	b005      	add	sp, #20
 8004b5e:	bd30      	pop	{r4, r5, pc}
 8004b60:	20000090 	.word	0x20000090
 8004b64:	165e9f81 	.word	0x165e9f81

08004b68 <SPI_EndRxTransaction>:
{
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b6e:	6840      	ldr	r0, [r0, #4]
 8004b70:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004b74:	d016      	beq.n	8004ba4 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b76:	6860      	ldr	r0, [r4, #4]
 8004b78:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004b7c:	d12e      	bne.n	8004bdc <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b7e:	68a3      	ldr	r3, [r4, #8]
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b84:	d01b      	beq.n	8004bbe <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b86:	9200      	str	r2, [sp, #0]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2180      	movs	r1, #128	; 0x80
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f7ff ff6e 	bl	8004a70 <SPI_WaitFlagStateUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	b350      	cbz	r0, 8004bee <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b9a:	f043 0320 	orr.w	r3, r3, #32
 8004b9e:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e024      	b.n	8004bee <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba4:	68a3      	ldr	r3, [r4, #8]
 8004ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004baa:	d002      	beq.n	8004bb2 <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb0:	d1e1      	bne.n	8004b76 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 8004bb2:	6820      	ldr	r0, [r4, #0]
 8004bb4:	6803      	ldr	r3, [r0, #0]
 8004bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bba:	6003      	str	r3, [r0, #0]
 8004bbc:	e7db      	b.n	8004b76 <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bbe:	9200      	str	r2, [sp, #0]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f7ff ff52 	bl	8004a70 <SPI_WaitFlagStateUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	b170      	cbz	r0, 8004bee <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004bd2:	f043 0320 	orr.w	r3, r3, #32
 8004bd6:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e008      	b.n	8004bee <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bdc:	9200      	str	r2, [sp, #0]
 8004bde:	460b      	mov	r3, r1
 8004be0:	2200      	movs	r2, #0
 8004be2:	2101      	movs	r1, #1
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7ff ff43 	bl	8004a70 <SPI_WaitFlagStateUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	b910      	cbnz	r0, 8004bf4 <SPI_EndRxTransaction+0x8c>
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004bf6:	f043 0320 	orr.w	r3, r3, #32
 8004bfa:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e7f6      	b.n	8004bee <SPI_EndRxTransaction+0x86>

08004c00 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d03b      	beq.n	8004c7c <HAL_SPI_Init+0x7c>
{
 8004c04:	b510      	push	{r4, lr}
 8004c06:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c0c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d02e      	beq.n	8004c72 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004c14:	2302      	movs	r3, #2
 8004c16:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004c1a:	6822      	ldr	r2, [r4, #0]
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c22:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c24:	6863      	ldr	r3, [r4, #4]
 8004c26:	68a2      	ldr	r2, [r4, #8]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	68e2      	ldr	r2, [r4, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	6922      	ldr	r2, [r4, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	6962      	ldr	r2, [r4, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	69a2      	ldr	r2, [r4, #24]
 8004c38:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	69e2      	ldr	r2, [r4, #28]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	6a22      	ldr	r2, [r4, #32]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c4e:	8b63      	ldrh	r3, [r4, #26]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	69d3      	ldr	r3, [r2, #28]
 8004c60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c64:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c66:	2000      	movs	r0, #0
 8004c68:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004c70:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004c72:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004c76:	f003 fa0d 	bl	8008094 <HAL_SPI_MspInit>
 8004c7a:	e7cb      	b.n	8004c14 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8004c7c:	2001      	movs	r0, #1
}
 8004c7e:	4770      	bx	lr

08004c80 <HAL_SPI_Transmit>:
{
 8004c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c84:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004c86:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004c8a:	2c01      	cmp	r4, #1
 8004c8c:	f000 80c3 	beq.w	8004e16 <HAL_SPI_Transmit+0x196>
 8004c90:	461d      	mov	r5, r3
 8004c92:	4617      	mov	r7, r2
 8004c94:	4688      	mov	r8, r1
 8004c96:	4604      	mov	r4, r0
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004c9e:	f7fe f99d 	bl	8002fdc <HAL_GetTick>
 8004ca2:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004ca4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d009      	beq.n	8004cc2 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8004cae:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004cbc:	b002      	add	sp, #8
 8004cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004cc2:	f1b8 0f00 	cmp.w	r8, #0
 8004cc6:	f000 8098 	beq.w	8004dfa <HAL_SPI_Transmit+0x17a>
 8004cca:	2f00      	cmp	r7, #0
 8004ccc:	f000 8097 	beq.w	8004dfe <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cda:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cde:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ce0:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ce2:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ce4:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ce6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ce8:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cea:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cec:	68a3      	ldr	r3, [r4, #8]
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf2:	d01c      	beq.n	8004d2e <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004cfc:	d103      	bne.n	8004d06 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d04:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d06:	68e3      	ldr	r3, [r4, #12]
 8004d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0c:	d015      	beq.n	8004d3a <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d0e:	6863      	ldr	r3, [r4, #4]
 8004d10:	b10b      	cbz	r3, 8004d16 <HAL_SPI_Transmit+0x96>
 8004d12:	2f01      	cmp	r7, #1
 8004d14:	d149      	bne.n	8004daa <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d16:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	7812      	ldrb	r2, [r2, #0]
 8004d1c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d20:	3301      	adds	r3, #1
 8004d22:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004d24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004d2c:	e03d      	b.n	8004daa <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	6813      	ldr	r3, [r2, #0]
 8004d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	e7dc      	b.n	8004cf4 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d3a:	6863      	ldr	r3, [r4, #4]
 8004d3c:	b10b      	cbz	r3, 8004d42 <HAL_SPI_Transmit+0xc2>
 8004d3e:	2f01      	cmp	r7, #1
 8004d40:	d115      	bne.n	8004d6e <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	8812      	ldrh	r2, [r2, #0]
 8004d48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004d50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004d58:	e009      	b.n	8004d6e <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d5a:	f7fe f93f 	bl	8002fdc <HAL_GetTick>
 8004d5e:	1b80      	subs	r0, r0, r6
 8004d60:	42a8      	cmp	r0, r5
 8004d62:	d302      	bcc.n	8004d6a <HAL_SPI_Transmit+0xea>
 8004d64:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004d68:	d14b      	bne.n	8004e02 <HAL_SPI_Transmit+0x182>
 8004d6a:	2d00      	cmp	r5, #0
 8004d6c:	d04b      	beq.n	8004e06 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 8004d6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d02c      	beq.n	8004dd0 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	f012 0f02 	tst.w	r2, #2
 8004d7e:	d0ec      	beq.n	8004d5a <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d82:	8812      	ldrh	r2, [r2, #0]
 8004d84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d88:	3302      	adds	r3, #2
 8004d8a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004d94:	e7eb      	b.n	8004d6e <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d96:	f7fe f921 	bl	8002fdc <HAL_GetTick>
 8004d9a:	1b80      	subs	r0, r0, r6
 8004d9c:	42a8      	cmp	r0, r5
 8004d9e:	d302      	bcc.n	8004da6 <HAL_SPI_Transmit+0x126>
 8004da0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004da4:	d131      	bne.n	8004e0a <HAL_SPI_Transmit+0x18a>
 8004da6:	2d00      	cmp	r5, #0
 8004da8:	d031      	beq.n	8004e0e <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8004daa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	b17b      	cbz	r3, 8004dd0 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	f012 0f02 	tst.w	r2, #2
 8004db8:	d0ed      	beq.n	8004d96 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004dbc:	7812      	ldrb	r2, [r2, #0]
 8004dbe:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004dc6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004dce:	e7ec      	b.n	8004daa <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7ff fe93 	bl	8004b00 <SPI_EndRxTxTransaction>
 8004dda:	b108      	cbz	r0, 8004de0 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ddc:	2320      	movs	r3, #32
 8004dde:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004de0:	68a3      	ldr	r3, [r4, #8]
 8004de2:	b933      	cbnz	r3, 8004df2 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	9201      	str	r2, [sp, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004df4:	b96b      	cbnz	r3, 8004e12 <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004df6:	2000      	movs	r0, #0
 8004df8:	e75a      	b.n	8004cb0 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	e758      	b.n	8004cb0 <HAL_SPI_Transmit+0x30>
 8004dfe:	2001      	movs	r0, #1
 8004e00:	e756      	b.n	8004cb0 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004e02:	2003      	movs	r0, #3
 8004e04:	e754      	b.n	8004cb0 <HAL_SPI_Transmit+0x30>
 8004e06:	2003      	movs	r0, #3
 8004e08:	e752      	b.n	8004cb0 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004e0a:	2003      	movs	r0, #3
 8004e0c:	e750      	b.n	8004cb0 <HAL_SPI_Transmit+0x30>
 8004e0e:	2003      	movs	r0, #3
 8004e10:	e74e      	b.n	8004cb0 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004e12:	2001      	movs	r0, #1
 8004e14:	e74c      	b.n	8004cb0 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8004e16:	2002      	movs	r0, #2
 8004e18:	e750      	b.n	8004cbc <HAL_SPI_Transmit+0x3c>

08004e1a <HAL_SPI_TransmitReceive>:
{
 8004e1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004e24:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004e28:	2c01      	cmp	r4, #1
 8004e2a:	f000 810b 	beq.w	8005044 <HAL_SPI_TransmitReceive+0x22a>
 8004e2e:	461d      	mov	r5, r3
 8004e30:	4617      	mov	r7, r2
 8004e32:	460e      	mov	r6, r1
 8004e34:	4604      	mov	r4, r0
 8004e36:	2301      	movs	r3, #1
 8004e38:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004e3c:	f7fe f8ce 	bl	8002fdc <HAL_GetTick>
 8004e40:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8004e42:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8004e46:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8004e48:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e4a:	2801      	cmp	r0, #1
 8004e4c:	d015      	beq.n	8004e7a <HAL_SPI_TransmitReceive+0x60>
 8004e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e52:	d00a      	beq.n	8004e6a <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004e56:	2201      	movs	r2, #1
 8004e58:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	b003      	add	sp, #12
 8004e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e6a:	68a3      	ldr	r3, [r4, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 80db 	bne.w	8005028 <HAL_SPI_TransmitReceive+0x20e>
 8004e72:	2804      	cmp	r0, #4
 8004e74:	d001      	beq.n	8004e7a <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
 8004e78:	e7ed      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e7a:	2e00      	cmp	r6, #0
 8004e7c:	f000 80d6 	beq.w	800502c <HAL_SPI_TransmitReceive+0x212>
 8004e80:	2f00      	cmp	r7, #0
 8004e82:	f000 80d5 	beq.w	8005030 <HAL_SPI_TransmitReceive+0x216>
 8004e86:	2d00      	cmp	r5, #0
 8004e88:	f000 80d4 	beq.w	8005034 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e8c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d002      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e96:	2305      	movs	r3, #5
 8004e98:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ea0:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ea2:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ea4:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ea6:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ea8:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004eaa:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8004eac:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004eae:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004eb8:	d103      	bne.n	8004ec2 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ec0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ec2:	68e3      	ldr	r3, [r4, #12]
 8004ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec8:	d010      	beq.n	8004eec <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eca:	6863      	ldr	r3, [r4, #4]
 8004ecc:	b10b      	cbz	r3, 8004ed2 <HAL_SPI_TransmitReceive+0xb8>
 8004ece:	2d01      	cmp	r5, #1
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004edc:	3301      	adds	r3, #1
 8004ede:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004ee0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004ee8:	2501      	movs	r5, #1
 8004eea:	e069      	b.n	8004fc0 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	b10b      	cbz	r3, 8004ef4 <HAL_SPI_TransmitReceive+0xda>
 8004ef0:	2d01      	cmp	r5, #1
 8004ef2:	d10a      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	8812      	ldrh	r2, [r2, #0]
 8004efa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004efc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004efe:	3302      	adds	r3, #2
 8004f00:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004f0a:	2501      	movs	r5, #1
 8004f0c:	e01b      	b.n	8004f46 <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	f012 0f01 	tst.w	r2, #1
 8004f16:	d00d      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x11a>
 8004f18:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004f1a:	b292      	uxth	r2, r2
 8004f1c:	b152      	cbz	r2, 8004f34 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f26:	3302      	adds	r3, #2
 8004f28:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004f2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004f32:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f34:	f7fe f852 	bl	8002fdc <HAL_GetTick>
 8004f38:	eba0 0009 	sub.w	r0, r0, r9
 8004f3c:	4540      	cmp	r0, r8
 8004f3e:	d302      	bcc.n	8004f46 <HAL_SPI_TransmitReceive+0x12c>
 8004f40:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004f44:	d178      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	b91b      	cbnz	r3, 8004f54 <HAL_SPI_TransmitReceive+0x13a>
 8004f4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d052      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	f012 0f02 	tst.w	r2, #2
 8004f5c:	d0d7      	beq.n	8004f0e <HAL_SPI_TransmitReceive+0xf4>
 8004f5e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004f60:	b292      	uxth	r2, r2
 8004f62:	2a00      	cmp	r2, #0
 8004f64:	d0d3      	beq.n	8004f0e <HAL_SPI_TransmitReceive+0xf4>
 8004f66:	2d00      	cmp	r5, #0
 8004f68:	d0d1      	beq.n	8004f0e <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f6c:	8812      	ldrh	r2, [r2, #0]
 8004f6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f72:	3302      	adds	r3, #2
 8004f74:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004f76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004f7e:	2500      	movs	r5, #0
 8004f80:	e7c5      	b.n	8004f0e <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	f012 0f01 	tst.w	r2, #1
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x18e>
 8004f8c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004f8e:	b292      	uxth	r2, r2
 8004f90:	b152      	cbz	r2, 8004fa8 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004f9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004fa6:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fa8:	f7fe f818 	bl	8002fdc <HAL_GetTick>
 8004fac:	eba0 0009 	sub.w	r0, r0, r9
 8004fb0:	4540      	cmp	r0, r8
 8004fb2:	d302      	bcc.n	8004fba <HAL_SPI_TransmitReceive+0x1a0>
 8004fb4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004fb8:	d140      	bne.n	800503c <HAL_SPI_TransmitReceive+0x222>
 8004fba:	f1b8 0f00 	cmp.w	r8, #0
 8004fbe:	d03f      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	b913      	cbnz	r3, 8004fcc <HAL_SPI_TransmitReceive+0x1b2>
 8004fc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	b1b3      	cbz	r3, 8004ffa <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	f012 0f02 	tst.w	r2, #2
 8004fd4:	d0d5      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x168>
 8004fd6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004fd8:	b292      	uxth	r2, r2
 8004fda:	2a00      	cmp	r2, #0
 8004fdc:	d0d1      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x168>
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	d0cf      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fe2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fe4:	7812      	ldrb	r2, [r2, #0]
 8004fe6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004fe8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fea:	3301      	adds	r3, #1
 8004fec:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004fee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	e7c3      	b.n	8004f82 <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ffa:	464a      	mov	r2, r9
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	4620      	mov	r0, r4
 8005000:	f7ff fd7e 	bl	8004b00 <SPI_EndRxTxTransaction>
 8005004:	4603      	mov	r3, r0
 8005006:	b118      	cbz	r0, 8005010 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005008:	2320      	movs	r3, #32
 800500a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
    goto error;
 800500e:	e722      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005010:	68a2      	ldr	r2, [r4, #8]
 8005012:	2a00      	cmp	r2, #0
 8005014:	f47f af1f 	bne.w	8004e56 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005018:	9201      	str	r2, [sp, #4]
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	68d1      	ldr	r1, [r2, #12]
 800501e:	9101      	str	r1, [sp, #4]
 8005020:	6892      	ldr	r2, [r2, #8]
 8005022:	9201      	str	r2, [sp, #4]
 8005024:	9a01      	ldr	r2, [sp, #4]
 8005026:	e716      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 8005028:	2302      	movs	r3, #2
 800502a:	e714      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e712      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x3c>
 8005030:	2301      	movs	r3, #1
 8005032:	e710      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x3c>
 8005034:	2301      	movs	r3, #1
 8005036:	e70e      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e70c      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e70a      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x3c>
 8005040:	2303      	movs	r3, #3
 8005042:	e708      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8005044:	2302      	movs	r3, #2
 8005046:	e70c      	b.n	8004e62 <HAL_SPI_TransmitReceive+0x48>

08005048 <HAL_SPI_Receive>:
{
 8005048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	4604      	mov	r4, r0
 8005050:	460f      	mov	r7, r1
 8005052:	4690      	mov	r8, r2
 8005054:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005056:	6843      	ldr	r3, [r0, #4]
 8005058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505c:	d019      	beq.n	8005092 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 800505e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005062:	2b01      	cmp	r3, #1
 8005064:	f000 809f 	beq.w	80051a6 <HAL_SPI_Receive+0x15e>
 8005068:	2301      	movs	r3, #1
 800506a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800506e:	f7fd ffb5 	bl	8002fdc <HAL_GetTick>
 8005072:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005074:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d015      	beq.n	80050aa <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 800507e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005080:	2301      	movs	r3, #1
 8005082:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005086:	2300      	movs	r3, #0
 8005088:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800508c:	b002      	add	sp, #8
 800508e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005092:	6883      	ldr	r3, [r0, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e2      	bne.n	800505e <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005098:	2304      	movs	r3, #4
 800509a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800509e:	9500      	str	r5, [sp, #0]
 80050a0:	4613      	mov	r3, r2
 80050a2:	460a      	mov	r2, r1
 80050a4:	f7ff feb9 	bl	8004e1a <HAL_SPI_TransmitReceive>
 80050a8:	e7f0      	b.n	800508c <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 80050aa:	2f00      	cmp	r7, #0
 80050ac:	d06d      	beq.n	800518a <HAL_SPI_Receive+0x142>
 80050ae:	f1b8 0f00 	cmp.w	r8, #0
 80050b2:	d06c      	beq.n	800518e <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050b4:	2304      	movs	r3, #4
 80050b6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050be:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80050c0:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80050c4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050c8:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80050ca:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80050cc:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80050ce:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050d0:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d2:	68a3      	ldr	r3, [r4, #8]
 80050d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d8:	d00b      	beq.n	80050f2 <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050e2:	d103      	bne.n	80050ec <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ea:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80050ec:	68e3      	ldr	r3, [r4, #12]
 80050ee:	b183      	cbz	r3, 8005112 <HAL_SPI_Receive+0xca>
 80050f0:	e02c      	b.n	800514c <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	6813      	ldr	r3, [r2, #0]
 80050f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	e7ed      	b.n	80050da <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050fe:	f7fd ff6d 	bl	8002fdc <HAL_GetTick>
 8005102:	1b80      	subs	r0, r0, r6
 8005104:	42a8      	cmp	r0, r5
 8005106:	d302      	bcc.n	800510e <HAL_SPI_Receive+0xc6>
 8005108:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800510c:	d141      	bne.n	8005192 <HAL_SPI_Receive+0x14a>
 800510e:	2d00      	cmp	r5, #0
 8005110:	d041      	beq.n	8005196 <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 8005112:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d02b      	beq.n	8005172 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	f012 0f01 	tst.w	r2, #1
 8005122:	d0ec      	beq.n	80050fe <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005124:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005126:	7b1b      	ldrb	r3, [r3, #12]
 8005128:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800512a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800512c:	3301      	adds	r3, #1
 800512e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005130:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005132:	3b01      	subs	r3, #1
 8005134:	b29b      	uxth	r3, r3
 8005136:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005138:	e7eb      	b.n	8005112 <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800513a:	f7fd ff4f 	bl	8002fdc <HAL_GetTick>
 800513e:	1b80      	subs	r0, r0, r6
 8005140:	42a8      	cmp	r0, r5
 8005142:	d302      	bcc.n	800514a <HAL_SPI_Receive+0x102>
 8005144:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005148:	d127      	bne.n	800519a <HAL_SPI_Receive+0x152>
 800514a:	b345      	cbz	r5, 800519e <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 800514c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800514e:	b29b      	uxth	r3, r3
 8005150:	b17b      	cbz	r3, 8005172 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	f012 0f01 	tst.w	r2, #1
 800515a:	d0ee      	beq.n	800513a <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005164:	3302      	adds	r3, #2
 8005166:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005168:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800516a:	3b01      	subs	r3, #1
 800516c:	b29b      	uxth	r3, r3
 800516e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005170:	e7ec      	b.n	800514c <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005172:	4632      	mov	r2, r6
 8005174:	4629      	mov	r1, r5
 8005176:	4620      	mov	r0, r4
 8005178:	f7ff fcf6 	bl	8004b68 <SPI_EndRxTransaction>
 800517c:	b108      	cbz	r0, 8005182 <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800517e:	2320      	movs	r3, #32
 8005180:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005182:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005184:	b96b      	cbnz	r3, 80051a2 <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005186:	2000      	movs	r0, #0
 8005188:	e77a      	b.n	8005080 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800518a:	2001      	movs	r0, #1
 800518c:	e778      	b.n	8005080 <HAL_SPI_Receive+0x38>
 800518e:	2001      	movs	r0, #1
 8005190:	e776      	b.n	8005080 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8005192:	2003      	movs	r0, #3
 8005194:	e774      	b.n	8005080 <HAL_SPI_Receive+0x38>
 8005196:	2003      	movs	r0, #3
 8005198:	e772      	b.n	8005080 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800519a:	2003      	movs	r0, #3
 800519c:	e770      	b.n	8005080 <HAL_SPI_Receive+0x38>
 800519e:	2003      	movs	r0, #3
 80051a0:	e76e      	b.n	8005080 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 80051a2:	2001      	movs	r0, #1
 80051a4:	e76c      	b.n	8005080 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 80051a6:	2002      	movs	r0, #2
 80051a8:	e770      	b.n	800508c <HAL_SPI_Receive+0x44>

080051aa <HAL_SPI_ErrorCallback>:
}
 80051aa:	4770      	bx	lr

080051ac <HAL_SPI_IRQHandler>:
{
 80051ac:	b530      	push	{r4, r5, lr}
 80051ae:	b085      	sub	sp, #20
 80051b0:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80051b2:	6802      	ldr	r2, [r0, #0]
 80051b4:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80051b6:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80051b8:	f3c3 1180 	ubfx	r1, r3, #6, #1
 80051bc:	b949      	cbnz	r1, 80051d2 <HAL_SPI_IRQHandler+0x26>
 80051be:	f013 0f01 	tst.w	r3, #1
 80051c2:	d006      	beq.n	80051d2 <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051c8:	d003      	beq.n	80051d2 <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 80051ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051cc:	4620      	mov	r0, r4
 80051ce:	4798      	blx	r3
    return;
 80051d0:	e008      	b.n	80051e4 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80051d2:	f013 0f02 	tst.w	r3, #2
 80051d6:	d007      	beq.n	80051e8 <HAL_SPI_IRQHandler+0x3c>
 80051d8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80051dc:	d004      	beq.n	80051e8 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 80051de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051e0:	4620      	mov	r0, r4
 80051e2:	4798      	blx	r3
}
 80051e4:	b005      	add	sp, #20
 80051e6:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051e8:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80051ec:	b91d      	cbnz	r5, 80051f6 <HAL_SPI_IRQHandler+0x4a>
 80051ee:	b911      	cbnz	r1, 80051f6 <HAL_SPI_IRQHandler+0x4a>
 80051f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80051f4:	d0f6      	beq.n	80051e4 <HAL_SPI_IRQHandler+0x38>
 80051f6:	f010 0f20 	tst.w	r0, #32
 80051fa:	d0f3      	beq.n	80051e4 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051fc:	b179      	cbz	r1, 800521e <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051fe:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8005202:	b2c9      	uxtb	r1, r1
 8005204:	2903      	cmp	r1, #3
 8005206:	d053      	beq.n	80052b0 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005208:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800520a:	f041 0104 	orr.w	r1, r1, #4
 800520e:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005210:	2100      	movs	r1, #0
 8005212:	9100      	str	r1, [sp, #0]
 8005214:	68d1      	ldr	r1, [r2, #12]
 8005216:	9100      	str	r1, [sp, #0]
 8005218:	6891      	ldr	r1, [r2, #8]
 800521a:	9100      	str	r1, [sp, #0]
 800521c:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800521e:	b165      	cbz	r5, 800523a <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005220:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005222:	f041 0101 	orr.w	r1, r1, #1
 8005226:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005228:	2100      	movs	r1, #0
 800522a:	9102      	str	r1, [sp, #8]
 800522c:	6891      	ldr	r1, [r2, #8]
 800522e:	9102      	str	r1, [sp, #8]
 8005230:	6811      	ldr	r1, [r2, #0]
 8005232:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005236:	6011      	str	r1, [r2, #0]
 8005238:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800523a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800523e:	d009      	beq.n	8005254 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005240:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005242:	f043 0308 	orr.w	r3, r3, #8
 8005246:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005248:	2300      	movs	r3, #0
 800524a:	9303      	str	r3, [sp, #12]
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	9303      	str	r3, [sp, #12]
 8005252:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005254:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0c4      	beq.n	80051e4 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800525a:	6822      	ldr	r2, [r4, #0]
 800525c:	6853      	ldr	r3, [r2, #4]
 800525e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005262:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005264:	2301      	movs	r3, #1
 8005266:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800526a:	f010 0f03 	tst.w	r0, #3
 800526e:	d027      	beq.n	80052c0 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005270:	6822      	ldr	r2, [r4, #0]
 8005272:	6853      	ldr	r3, [r2, #4]
 8005274:	f023 0303 	bic.w	r3, r3, #3
 8005278:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800527a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800527c:	b14b      	cbz	r3, 8005292 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800527e:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <HAL_SPI_IRQHandler+0x11c>)
 8005280:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005282:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005284:	f7fd fff6 	bl	8003274 <HAL_DMA_Abort_IT>
 8005288:	b118      	cbz	r0, 8005292 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800528a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800528c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005290:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005292:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0a5      	beq.n	80051e4 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005298:	4a0b      	ldr	r2, [pc, #44]	; (80052c8 <HAL_SPI_IRQHandler+0x11c>)
 800529a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800529c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800529e:	f7fd ffe9 	bl	8003274 <HAL_DMA_Abort_IT>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d09e      	beq.n	80051e4 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ac:	6563      	str	r3, [r4, #84]	; 0x54
 80052ae:	e799      	b.n	80051e4 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b0:	2300      	movs	r3, #0
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	68d3      	ldr	r3, [r2, #12]
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	6893      	ldr	r3, [r2, #8]
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	9b01      	ldr	r3, [sp, #4]
        return;
 80052be:	e791      	b.n	80051e4 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 80052c0:	4620      	mov	r0, r4
 80052c2:	f7ff ff72 	bl	80051aa <HAL_SPI_ErrorCallback>
 80052c6:	e78d      	b.n	80051e4 <HAL_SPI_IRQHandler+0x38>
 80052c8:	080052cd 	.word	0x080052cd

080052cc <SPI_DMAAbortOnError>:
{
 80052cc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80052d4:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80052d6:	f7ff ff68 	bl	80051aa <HAL_SPI_ErrorCallback>
}
 80052da:	bd08      	pop	{r3, pc}

080052dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052dc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052de:	6a03      	ldr	r3, [r0, #32]
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ea:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052ec:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f0:	680d      	ldr	r5, [r1, #0]
 80052f2:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052f6:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052fa:	688b      	ldr	r3, [r1, #8]
 80052fc:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052fe:	4d0d      	ldr	r5, [pc, #52]	; (8005334 <TIM_OC1_SetConfig+0x58>)
 8005300:	42a8      	cmp	r0, r5
 8005302:	d009      	beq.n	8005318 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005304:	4d0b      	ldr	r5, [pc, #44]	; (8005334 <TIM_OC1_SetConfig+0x58>)
 8005306:	42a8      	cmp	r0, r5
 8005308:	d00d      	beq.n	8005326 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800530c:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530e:	684a      	ldr	r2, [r1, #4]
 8005310:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005312:	6203      	str	r3, [r0, #32]
}
 8005314:	bc70      	pop	{r4, r5, r6}
 8005316:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8005318:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800531c:	68cc      	ldr	r4, [r1, #12]
 800531e:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8005320:	f023 0304 	bic.w	r3, r3, #4
 8005324:	e7ee      	b.n	8005304 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005326:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800532a:	694c      	ldr	r4, [r1, #20]
 800532c:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 800532e:	698a      	ldr	r2, [r1, #24]
 8005330:	4322      	orrs	r2, r4
 8005332:	e7ea      	b.n	800530a <TIM_OC1_SetConfig+0x2e>
 8005334:	40010000 	.word	0x40010000

08005338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800533a:	6a03      	ldr	r3, [r0, #32]
 800533c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005340:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005346:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005348:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800534c:	680d      	ldr	r5, [r1, #0]
 800534e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005354:	688d      	ldr	r5, [r1, #8]
 8005356:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800535a:	4d0f      	ldr	r5, [pc, #60]	; (8005398 <TIM_OC3_SetConfig+0x60>)
 800535c:	42a8      	cmp	r0, r5
 800535e:	d009      	beq.n	8005374 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005360:	4d0d      	ldr	r5, [pc, #52]	; (8005398 <TIM_OC3_SetConfig+0x60>)
 8005362:	42a8      	cmp	r0, r5
 8005364:	d00e      	beq.n	8005384 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005366:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005368:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800536a:	684a      	ldr	r2, [r1, #4]
 800536c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536e:	6203      	str	r3, [r0, #32]
}
 8005370:	bc30      	pop	{r4, r5}
 8005372:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8005374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005378:	68cd      	ldr	r5, [r1, #12]
 800537a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800537e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005382:	e7ed      	b.n	8005360 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005384:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005388:	694d      	ldr	r5, [r1, #20]
 800538a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800538e:	698d      	ldr	r5, [r1, #24]
 8005390:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8005394:	e7e7      	b.n	8005366 <TIM_OC3_SetConfig+0x2e>
 8005396:	bf00      	nop
 8005398:	40010000 	.word	0x40010000

0800539c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800539e:	6a03      	ldr	r3, [r0, #32]
 80053a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053ac:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b0:	680d      	ldr	r5, [r1, #0]
 80053b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053ba:	688d      	ldr	r5, [r1, #8]
 80053bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	4d07      	ldr	r5, [pc, #28]	; (80053e0 <TIM_OC4_SetConfig+0x44>)
 80053c2:	42a8      	cmp	r0, r5
 80053c4:	d006      	beq.n	80053d4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053ca:	684a      	ldr	r2, [r1, #4]
 80053cc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ce:	6203      	str	r3, [r0, #32]
}
 80053d0:	bc30      	pop	{r4, r5}
 80053d2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053d4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053d8:	694d      	ldr	r5, [r1, #20]
 80053da:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80053de:	e7f2      	b.n	80053c6 <TIM_OC4_SetConfig+0x2a>
 80053e0:	40010000 	.word	0x40010000

080053e4 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	2302      	movs	r3, #2
 80053e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ea:	6802      	ldr	r2, [r0, #0]
 80053ec:	6893      	ldr	r3, [r2, #8]
 80053ee:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f2:	2b06      	cmp	r3, #6
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80053fe:	2301      	movs	r3, #1
 8005400:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005404:	2000      	movs	r0, #0
 8005406:	4770      	bx	lr

08005408 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005408:	6802      	ldr	r2, [r0, #0]
 800540a:	68d3      	ldr	r3, [r2, #12]
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005412:	6802      	ldr	r2, [r0, #0]
 8005414:	6893      	ldr	r3, [r2, #8]
 8005416:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541a:	2b06      	cmp	r3, #6
 800541c:	d003      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 800541e:	6813      	ldr	r3, [r2, #0]
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	6013      	str	r3, [r2, #0]
}
 8005426:	2000      	movs	r0, #0
 8005428:	4770      	bx	lr

0800542a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800542a:	4770      	bx	lr

0800542c <HAL_TIM_IC_CaptureCallback>:
}
 800542c:	4770      	bx	lr

0800542e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800542e:	4770      	bx	lr

08005430 <HAL_TIM_TriggerCallback>:
}
 8005430:	4770      	bx	lr

08005432 <HAL_TIM_IRQHandler>:
{
 8005432:	b510      	push	{r4, lr}
 8005434:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005436:	6803      	ldr	r3, [r0, #0]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	f012 0f02 	tst.w	r2, #2
 800543e:	d011      	beq.n	8005464 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	f012 0f02 	tst.w	r2, #2
 8005446:	d00d      	beq.n	8005464 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005448:	f06f 0202 	mvn.w	r2, #2
 800544c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800544e:	2301      	movs	r3, #1
 8005450:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005452:	6803      	ldr	r3, [r0, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f013 0f03 	tst.w	r3, #3
 800545a:	d070      	beq.n	800553e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800545c:	f7ff ffe6 	bl	800542c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005460:	2300      	movs	r3, #0
 8005462:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	f012 0f04 	tst.w	r2, #4
 800546c:	d012      	beq.n	8005494 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	f012 0f04 	tst.w	r2, #4
 8005474:	d00e      	beq.n	8005494 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005476:	f06f 0204 	mvn.w	r2, #4
 800547a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800547c:	2302      	movs	r3, #2
 800547e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005488:	d05f      	beq.n	800554a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	4620      	mov	r0, r4
 800548c:	f7ff ffce 	bl	800542c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005490:	2300      	movs	r3, #0
 8005492:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	f012 0f08 	tst.w	r2, #8
 800549c:	d012      	beq.n	80054c4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	f012 0f08 	tst.w	r2, #8
 80054a4:	d00e      	beq.n	80054c4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054a6:	f06f 0208 	mvn.w	r2, #8
 80054aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ac:	2304      	movs	r3, #4
 80054ae:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f013 0f03 	tst.w	r3, #3
 80054b8:	d04e      	beq.n	8005558 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	4620      	mov	r0, r4
 80054bc:	f7ff ffb6 	bl	800542c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c0:	2300      	movs	r3, #0
 80054c2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	f012 0f10 	tst.w	r2, #16
 80054cc:	d012      	beq.n	80054f4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	f012 0f10 	tst.w	r2, #16
 80054d4:	d00e      	beq.n	80054f4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054d6:	f06f 0210 	mvn.w	r2, #16
 80054da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054dc:	2308      	movs	r3, #8
 80054de:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80054e8:	d03d      	beq.n	8005566 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	4620      	mov	r0, r4
 80054ec:	f7ff ff9e 	bl	800542c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f0:	2300      	movs	r3, #0
 80054f2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	f012 0f01 	tst.w	r2, #1
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	f012 0f01 	tst.w	r2, #1
 8005504:	d136      	bne.n	8005574 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800550e:	d003      	beq.n	8005518 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005516:	d134      	bne.n	8005582 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005520:	d003      	beq.n	800552a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005528:	d132      	bne.n	8005590 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	f012 0f20 	tst.w	r2, #32
 8005532:	d003      	beq.n	800553c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	f012 0f20 	tst.w	r2, #32
 800553a:	d130      	bne.n	800559e <HAL_TIM_IRQHandler+0x16c>
}
 800553c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800553e:	f7ff ff74 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005542:	4620      	mov	r0, r4
 8005544:	f7ff ff73 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
 8005548:	e78a      	b.n	8005460 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	4620      	mov	r0, r4
 800554c:	f7ff ff6d 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	4620      	mov	r0, r4
 8005552:	f7ff ff6c 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
 8005556:	e79b      	b.n	8005490 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005558:	4620      	mov	r0, r4
 800555a:	f7ff ff66 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff ff65 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
 8005564:	e7ac      	b.n	80054c0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005566:	4620      	mov	r0, r4
 8005568:	f7ff ff5f 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff ff5e 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
 8005572:	e7bd      	b.n	80054f0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005574:	f06f 0201 	mvn.w	r2, #1
 8005578:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800557a:	4620      	mov	r0, r4
 800557c:	f002 fd5a 	bl	8008034 <HAL_TIM_PeriodElapsedCallback>
 8005580:	e7c1      	b.n	8005506 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005582:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005586:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005588:	4620      	mov	r0, r4
 800558a:	f000 f9b3 	bl	80058f4 <HAL_TIMEx_BreakCallback>
 800558e:	e7c3      	b.n	8005518 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005594:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005596:	4620      	mov	r0, r4
 8005598:	f7ff ff4a 	bl	8005430 <HAL_TIM_TriggerCallback>
 800559c:	e7c5      	b.n	800552a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800559e:	f06f 0220 	mvn.w	r2, #32
 80055a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 f9a4 	bl	80058f2 <HAL_TIMEx_CommutCallback>
}
 80055aa:	e7c7      	b.n	800553c <HAL_TIM_IRQHandler+0x10a>

080055ac <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80055ac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ae:	4a25      	ldr	r2, [pc, #148]	; (8005644 <TIM_Base_SetConfig+0x98>)
 80055b0:	4290      	cmp	r0, r2
 80055b2:	d00e      	beq.n	80055d2 <TIM_Base_SetConfig+0x26>
 80055b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055b8:	d00b      	beq.n	80055d2 <TIM_Base_SetConfig+0x26>
 80055ba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80055be:	4290      	cmp	r0, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_Base_SetConfig+0x26>
 80055c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055c6:	4290      	cmp	r0, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_Base_SetConfig+0x26>
 80055ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ce:	4290      	cmp	r0, r2
 80055d0:	d103      	bne.n	80055da <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055d6:	684a      	ldr	r2, [r1, #4]
 80055d8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055da:	4a1a      	ldr	r2, [pc, #104]	; (8005644 <TIM_Base_SetConfig+0x98>)
 80055dc:	4290      	cmp	r0, r2
 80055de:	d01a      	beq.n	8005616 <TIM_Base_SetConfig+0x6a>
 80055e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055e4:	d017      	beq.n	8005616 <TIM_Base_SetConfig+0x6a>
 80055e6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80055ea:	4290      	cmp	r0, r2
 80055ec:	d013      	beq.n	8005616 <TIM_Base_SetConfig+0x6a>
 80055ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055f2:	4290      	cmp	r0, r2
 80055f4:	d00f      	beq.n	8005616 <TIM_Base_SetConfig+0x6a>
 80055f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055fa:	4290      	cmp	r0, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_Base_SetConfig+0x6a>
 80055fe:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005602:	4290      	cmp	r0, r2
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0x6a>
 8005606:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800560a:	4290      	cmp	r0, r2
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0x6a>
 800560e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005612:	4290      	cmp	r0, r2
 8005614:	d103      	bne.n	800561e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561a:	68ca      	ldr	r2, [r1, #12]
 800561c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800561e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005622:	694a      	ldr	r2, [r1, #20]
 8005624:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005626:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005628:	688b      	ldr	r3, [r1, #8]
 800562a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800562c:	680b      	ldr	r3, [r1, #0]
 800562e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005630:	4b04      	ldr	r3, [pc, #16]	; (8005644 <TIM_Base_SetConfig+0x98>)
 8005632:	4298      	cmp	r0, r3
 8005634:	d002      	beq.n	800563c <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8005636:	2301      	movs	r3, #1
 8005638:	6143      	str	r3, [r0, #20]
}
 800563a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800563c:	690b      	ldr	r3, [r1, #16]
 800563e:	6303      	str	r3, [r0, #48]	; 0x30
 8005640:	e7f9      	b.n	8005636 <TIM_Base_SetConfig+0x8a>
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000

08005648 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005648:	b1a8      	cbz	r0, 8005676 <HAL_TIM_Base_Init+0x2e>
{
 800564a:	b510      	push	{r4, lr}
 800564c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005652:	b15b      	cbz	r3, 800566c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	2302      	movs	r3, #2
 8005656:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565a:	1d21      	adds	r1, r4, #4
 800565c:	6820      	ldr	r0, [r4, #0]
 800565e:	f7ff ffa5 	bl	80055ac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005662:	2301      	movs	r3, #1
 8005664:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005668:	2000      	movs	r0, #0
}
 800566a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800566c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005670:	f002 fec0 	bl	80083f4 <HAL_TIM_Base_MspInit>
 8005674:	e7ee      	b.n	8005654 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005676:	2001      	movs	r0, #1
}
 8005678:	4770      	bx	lr

0800567a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800567a:	b1a8      	cbz	r0, 80056a8 <HAL_TIM_PWM_Init+0x2e>
{
 800567c:	b510      	push	{r4, lr}
 800567e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005680:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005684:	b15b      	cbz	r3, 800569e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005686:	2302      	movs	r3, #2
 8005688:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568c:	1d21      	adds	r1, r4, #4
 800568e:	6820      	ldr	r0, [r4, #0]
 8005690:	f7ff ff8c 	bl	80055ac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005694:	2301      	movs	r3, #1
 8005696:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800569a:	2000      	movs	r0, #0
}
 800569c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800569e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80056a2:	f002 fe8f 	bl	80083c4 <HAL_TIM_PWM_MspInit>
 80056a6:	e7ee      	b.n	8005686 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80056a8:	2001      	movs	r0, #1
}
 80056aa:	4770      	bx	lr

080056ac <TIM_OC2_SetConfig>:
{
 80056ac:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ae:	6a03      	ldr	r3, [r0, #32]
 80056b0:	f023 0310 	bic.w	r3, r3, #16
 80056b4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80056b6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80056b8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80056ba:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056bc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c0:	680d      	ldr	r5, [r1, #0]
 80056c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80056c6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056ca:	688d      	ldr	r5, [r1, #8]
 80056cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056d0:	4d0e      	ldr	r5, [pc, #56]	; (800570c <TIM_OC2_SetConfig+0x60>)
 80056d2:	42a8      	cmp	r0, r5
 80056d4:	d009      	beq.n	80056ea <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d6:	4d0d      	ldr	r5, [pc, #52]	; (800570c <TIM_OC2_SetConfig+0x60>)
 80056d8:	42a8      	cmp	r0, r5
 80056da:	d00e      	beq.n	80056fa <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80056dc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056de:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80056e0:	684a      	ldr	r2, [r1, #4]
 80056e2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80056e4:	6203      	str	r3, [r0, #32]
}
 80056e6:	bc30      	pop	{r4, r5}
 80056e8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80056ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ee:	68cd      	ldr	r5, [r1, #12]
 80056f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80056f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f8:	e7ed      	b.n	80056d6 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056fa:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056fe:	694d      	ldr	r5, [r1, #20]
 8005700:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005704:	698d      	ldr	r5, [r1, #24]
 8005706:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800570a:	e7e7      	b.n	80056dc <TIM_OC2_SetConfig+0x30>
 800570c:	40010000 	.word	0x40010000

08005710 <HAL_TIM_PWM_ConfigChannel>:
{
 8005710:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005712:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d066      	beq.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800571a:	460d      	mov	r5, r1
 800571c:	4604      	mov	r4, r0
 800571e:	2301      	movs	r3, #1
 8005720:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	2302      	movs	r3, #2
 8005726:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800572a:	2a0c      	cmp	r2, #12
 800572c:	d81a      	bhi.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x54>
 800572e:	e8df f002 	tbb	[pc, r2]
 8005732:	1907      	.short	0x1907
 8005734:	19201919 	.word	0x19201919
 8005738:	19341919 	.word	0x19341919
 800573c:	1919      	.short	0x1919
 800573e:	47          	.byte	0x47
 800573f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005740:	6800      	ldr	r0, [r0, #0]
 8005742:	f7ff fdcb 	bl	80052dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	6993      	ldr	r3, [r2, #24]
 800574a:	f043 0308 	orr.w	r3, r3, #8
 800574e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	6993      	ldr	r3, [r2, #24]
 8005754:	f023 0304 	bic.w	r3, r3, #4
 8005758:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	6993      	ldr	r3, [r2, #24]
 800575e:	6929      	ldr	r1, [r5, #16]
 8005760:	430b      	orrs	r3, r1
 8005762:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005764:	2301      	movs	r3, #1
 8005766:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800576a:	2000      	movs	r0, #0
 800576c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005770:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005772:	6800      	ldr	r0, [r0, #0]
 8005774:	f7ff ff9a 	bl	80056ac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	6993      	ldr	r3, [r2, #24]
 800577c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005780:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005782:	6822      	ldr	r2, [r4, #0]
 8005784:	6993      	ldr	r3, [r2, #24]
 8005786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800578a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800578c:	6822      	ldr	r2, [r4, #0]
 800578e:	6993      	ldr	r3, [r2, #24]
 8005790:	6929      	ldr	r1, [r5, #16]
 8005792:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005796:	6193      	str	r3, [r2, #24]
      break;
 8005798:	e7e4      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	f7ff fdcc 	bl	8005338 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	69d3      	ldr	r3, [r2, #28]
 80057a4:	f043 0308 	orr.w	r3, r3, #8
 80057a8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	69d3      	ldr	r3, [r2, #28]
 80057ae:	f023 0304 	bic.w	r3, r3, #4
 80057b2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057b4:	6822      	ldr	r2, [r4, #0]
 80057b6:	69d3      	ldr	r3, [r2, #28]
 80057b8:	6929      	ldr	r1, [r5, #16]
 80057ba:	430b      	orrs	r3, r1
 80057bc:	61d3      	str	r3, [r2, #28]
      break;
 80057be:	e7d1      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057c0:	6800      	ldr	r0, [r0, #0]
 80057c2:	f7ff fdeb 	bl	800539c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	69d3      	ldr	r3, [r2, #28]
 80057ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057ce:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	69d3      	ldr	r3, [r2, #28]
 80057d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	69d3      	ldr	r3, [r2, #28]
 80057de:	6929      	ldr	r1, [r5, #16]
 80057e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80057e4:	61d3      	str	r3, [r2, #28]
      break;
 80057e6:	e7bd      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80057e8:	2002      	movs	r0, #2
 80057ea:	e7c1      	b.n	8005770 <HAL_TIM_PWM_ConfigChannel+0x60>

080057ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057ec:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057ee:	f001 011f 	and.w	r1, r1, #31
 80057f2:	2301      	movs	r3, #1
 80057f4:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057f8:	6a03      	ldr	r3, [r0, #32]
 80057fa:	ea23 0304 	bic.w	r3, r3, r4
 80057fe:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005800:	6a03      	ldr	r3, [r0, #32]
 8005802:	408a      	lsls	r2, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	6203      	str	r3, [r0, #32]
}
 8005808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <HAL_TIM_PWM_Start>:
{
 8005810:	b510      	push	{r4, lr}
 8005812:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005814:	2201      	movs	r2, #1
 8005816:	6800      	ldr	r0, [r0, #0]
 8005818:	f7ff ffe8 	bl	80057ec <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <HAL_TIM_PWM_Start+0x38>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00b      	beq.n	800583c <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	6893      	ldr	r3, [r2, #8]
 8005828:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582c:	2b06      	cmp	r3, #6
 800582e:	d003      	beq.n	8005838 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8005830:	6813      	ldr	r3, [r2, #0]
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	6013      	str	r3, [r2, #0]
}
 8005838:	2000      	movs	r0, #0
 800583a:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800583c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005842:	645a      	str	r2, [r3, #68]	; 0x44
 8005844:	e7ee      	b.n	8005824 <HAL_TIM_PWM_Start+0x14>
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000

0800584c <HAL_TIM_PWM_Stop>:
{
 800584c:	b510      	push	{r4, lr}
 800584e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005850:	2200      	movs	r2, #0
 8005852:	6800      	ldr	r0, [r0, #0]
 8005854:	f7ff ffca 	bl	80057ec <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <HAL_TIM_PWM_Stop+0x5c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d013      	beq.n	8005888 <HAL_TIM_PWM_Stop+0x3c>
  __HAL_TIM_DISABLE(htim);
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	6a19      	ldr	r1, [r3, #32]
 8005864:	f241 1211 	movw	r2, #4369	; 0x1111
 8005868:	4211      	tst	r1, r2
 800586a:	d108      	bne.n	800587e <HAL_TIM_PWM_Stop+0x32>
 800586c:	6a19      	ldr	r1, [r3, #32]
 800586e:	f240 4244 	movw	r2, #1092	; 0x444
 8005872:	4211      	tst	r1, r2
 8005874:	d103      	bne.n	800587e <HAL_TIM_PWM_Stop+0x32>
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800587e:	2301      	movs	r3, #1
 8005880:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005884:	2000      	movs	r0, #0
 8005886:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005888:	6a19      	ldr	r1, [r3, #32]
 800588a:	f241 1211 	movw	r2, #4369	; 0x1111
 800588e:	4211      	tst	r1, r2
 8005890:	d1e6      	bne.n	8005860 <HAL_TIM_PWM_Stop+0x14>
 8005892:	6a19      	ldr	r1, [r3, #32]
 8005894:	f240 4244 	movw	r2, #1092	; 0x444
 8005898:	4211      	tst	r1, r2
 800589a:	d1e1      	bne.n	8005860 <HAL_TIM_PWM_Stop+0x14>
 800589c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800589e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058a2:	645a      	str	r2, [r3, #68]	; 0x44
 80058a4:	e7dc      	b.n	8005860 <HAL_TIM_PWM_Stop+0x14>
 80058a6:	bf00      	nop
 80058a8:	40010000 	.word	0x40010000

080058ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d01c      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 80058b4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80058b6:	2601      	movs	r6, #1
 80058b8:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	2302      	movs	r3, #2
 80058be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c2:	6802      	ldr	r2, [r0, #0]
 80058c4:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c6:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c8:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058cc:	680c      	ldr	r4, [r1, #0]
 80058ce:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80058d0:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d4:	684b      	ldr	r3, [r1, #4]
 80058d6:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d8:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058da:	6802      	ldr	r2, [r0, #0]
 80058dc:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058de:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e2:	2300      	movs	r3, #0
 80058e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80058e8:	4618      	mov	r0, r3
}
 80058ea:	bc70      	pop	{r4, r5, r6}
 80058ec:	4770      	bx	lr
  __HAL_LOCK(htim);
 80058ee:	2002      	movs	r0, #2
}
 80058f0:	4770      	bx	lr

080058f2 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f4:	4770      	bx	lr

080058f6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f6:	6802      	ldr	r2, [r0, #0]
 80058f8:	68d3      	ldr	r3, [r2, #12]
 80058fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058fe:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005900:	6802      	ldr	r2, [r0, #0]
 8005902:	6953      	ldr	r3, [r2, #20]
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800590a:	2320      	movs	r3, #32
 800590c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8005910:	4770      	bx	lr

08005912 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005912:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b21      	cmp	r3, #33	; 0x21
 800591a:	d12a      	bne.n	8005972 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800591c:	6883      	ldr	r3, [r0, #8]
 800591e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005922:	d016      	beq.n	8005952 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005924:	6a03      	ldr	r3, [r0, #32]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	6202      	str	r2, [r0, #32]
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	6803      	ldr	r3, [r0, #0]
 800592e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005930:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005932:	3b01      	subs	r3, #1
 8005934:	b29b      	uxth	r3, r3
 8005936:	84c3      	strh	r3, [r0, #38]	; 0x26
 8005938:	b9eb      	cbnz	r3, 8005976 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800593a:	6802      	ldr	r2, [r0, #0]
 800593c:	68d3      	ldr	r3, [r2, #12]
 800593e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005942:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005944:	6802      	ldr	r2, [r0, #0]
 8005946:	68d3      	ldr	r3, [r2, #12]
 8005948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800594c:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 800594e:	2000      	movs	r0, #0
 8005950:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005952:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	6802      	ldr	r2, [r0, #0]
 8005958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595c:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800595e:	6903      	ldr	r3, [r0, #16]
 8005960:	b91b      	cbnz	r3, 800596a <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8005962:	6a03      	ldr	r3, [r0, #32]
 8005964:	3302      	adds	r3, #2
 8005966:	6203      	str	r3, [r0, #32]
 8005968:	e7e2      	b.n	8005930 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 800596a:	6a03      	ldr	r3, [r0, #32]
 800596c:	3301      	adds	r3, #1
 800596e:	6203      	str	r3, [r0, #32]
 8005970:	e7de      	b.n	8005930 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8005972:	2002      	movs	r0, #2
 8005974:	4770      	bx	lr
    return HAL_OK;
 8005976:	2000      	movs	r0, #0
  }
}
 8005978:	4770      	bx	lr
	...

0800597c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005980:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005982:	6802      	ldr	r2, [r0, #0]
 8005984:	6913      	ldr	r3, [r2, #16]
 8005986:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800598a:	68c1      	ldr	r1, [r0, #12]
 800598c:	430b      	orrs	r3, r1
 800598e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005990:	6883      	ldr	r3, [r0, #8]
 8005992:	6902      	ldr	r2, [r0, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	6942      	ldr	r2, [r0, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	69c2      	ldr	r2, [r0, #28]
 800599c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800599e:	6801      	ldr	r1, [r0, #0]
 80059a0:	68cb      	ldr	r3, [r1, #12]
 80059a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80059a6:	f023 030c 	bic.w	r3, r3, #12
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ae:	6802      	ldr	r2, [r0, #0]
 80059b0:	6953      	ldr	r3, [r2, #20]
 80059b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b6:	6981      	ldr	r1, [r0, #24]
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059bc:	69c3      	ldr	r3, [r0, #28]
 80059be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c2:	d060      	beq.n	8005a86 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059c4:	6803      	ldr	r3, [r0, #0]
 80059c6:	4ab8      	ldr	r2, [pc, #736]	; (8005ca8 <UART_SetConfig+0x32c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	f000 8114 	beq.w	8005bf6 <UART_SetConfig+0x27a>
 80059ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059d2:	4293      	cmp	r3, r2
 80059d4:	f000 810f 	beq.w	8005bf6 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80059d8:	f7ff f80c 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 80059dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80059e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80059e4:	6865      	ldr	r5, [r4, #4]
 80059e6:	00ad      	lsls	r5, r5, #2
 80059e8:	fbb0 f5f5 	udiv	r5, r0, r5
 80059ec:	4faf      	ldr	r7, [pc, #700]	; (8005cac <UART_SetConfig+0x330>)
 80059ee:	fba7 3505 	umull	r3, r5, r7, r5
 80059f2:	096d      	lsrs	r5, r5, #5
 80059f4:	012e      	lsls	r6, r5, #4
 80059f6:	f7fe fffd 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 80059fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80059fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a02:	6865      	ldr	r5, [r4, #4]
 8005a04:	00ad      	lsls	r5, r5, #2
 8005a06:	fbb0 f9f5 	udiv	r9, r0, r5
 8005a0a:	f7fe fff3 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 8005a0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a16:	6865      	ldr	r5, [r4, #4]
 8005a18:	00ad      	lsls	r5, r5, #2
 8005a1a:	fbb0 f5f5 	udiv	r5, r0, r5
 8005a1e:	fba7 3505 	umull	r3, r5, r7, r5
 8005a22:	096d      	lsrs	r5, r5, #5
 8005a24:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005a28:	fb08 9515 	mls	r5, r8, r5, r9
 8005a2c:	012d      	lsls	r5, r5, #4
 8005a2e:	3532      	adds	r5, #50	; 0x32
 8005a30:	fba7 3505 	umull	r3, r5, r7, r5
 8005a34:	096d      	lsrs	r5, r5, #5
 8005a36:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005a3a:	4435      	add	r5, r6
 8005a3c:	f7fe ffda 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 8005a40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a48:	6866      	ldr	r6, [r4, #4]
 8005a4a:	00b6      	lsls	r6, r6, #2
 8005a4c:	fbb0 f6f6 	udiv	r6, r0, r6
 8005a50:	f7fe ffd0 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 8005a54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a64:	fba7 3000 	umull	r3, r0, r7, r0
 8005a68:	0940      	lsrs	r0, r0, #5
 8005a6a:	fb08 6810 	mls	r8, r8, r0, r6
 8005a6e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005a72:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005a76:	fba7 3708 	umull	r3, r7, r7, r8
 8005a7a:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	442f      	add	r7, r5
 8005a82:	609f      	str	r7, [r3, #8]
    }
  }
}
 8005a84:	e10d      	b.n	8005ca2 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a86:	6803      	ldr	r3, [r0, #0]
 8005a88:	4a87      	ldr	r2, [pc, #540]	; (8005ca8 <UART_SetConfig+0x32c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d05b      	beq.n	8005b46 <UART_SetConfig+0x1ca>
 8005a8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d057      	beq.n	8005b46 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005a96:	f7fe ffad 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 8005a9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005aa2:	6865      	ldr	r5, [r4, #4]
 8005aa4:	006d      	lsls	r5, r5, #1
 8005aa6:	fbb0 f5f5 	udiv	r5, r0, r5
 8005aaa:	4f80      	ldr	r7, [pc, #512]	; (8005cac <UART_SetConfig+0x330>)
 8005aac:	fba7 3505 	umull	r3, r5, r7, r5
 8005ab0:	096d      	lsrs	r5, r5, #5
 8005ab2:	012e      	lsls	r6, r5, #4
 8005ab4:	f7fe ff9e 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 8005ab8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005abc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ac0:	6865      	ldr	r5, [r4, #4]
 8005ac2:	006d      	lsls	r5, r5, #1
 8005ac4:	fbb0 f9f5 	udiv	r9, r0, r5
 8005ac8:	f7fe ff94 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 8005acc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ad0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ad4:	6865      	ldr	r5, [r4, #4]
 8005ad6:	006d      	lsls	r5, r5, #1
 8005ad8:	fbb0 f5f5 	udiv	r5, r0, r5
 8005adc:	fba7 3505 	umull	r3, r5, r7, r5
 8005ae0:	096d      	lsrs	r5, r5, #5
 8005ae2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005ae6:	fb08 9515 	mls	r5, r8, r5, r9
 8005aea:	00ed      	lsls	r5, r5, #3
 8005aec:	3532      	adds	r5, #50	; 0x32
 8005aee:	fba7 3505 	umull	r3, r5, r7, r5
 8005af2:	096d      	lsrs	r5, r5, #5
 8005af4:	006d      	lsls	r5, r5, #1
 8005af6:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005afa:	4435      	add	r5, r6
 8005afc:	f7fe ff7a 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 8005b00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b08:	6866      	ldr	r6, [r4, #4]
 8005b0a:	0076      	lsls	r6, r6, #1
 8005b0c:	fbb0 f6f6 	udiv	r6, r0, r6
 8005b10:	f7fe ff70 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 8005b14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b24:	fba7 2303 	umull	r2, r3, r7, r3
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	fb08 6813 	mls	r8, r8, r3, r6
 8005b2e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005b32:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005b36:	fba7 3708 	umull	r3, r7, r7, r8
 8005b3a:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	442f      	add	r7, r5
 8005b42:	609f      	str	r7, [r3, #8]
 8005b44:	e0ad      	b.n	8005ca2 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005b46:	f7fe ff65 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005b4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b52:	6865      	ldr	r5, [r4, #4]
 8005b54:	006d      	lsls	r5, r5, #1
 8005b56:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b5a:	4f54      	ldr	r7, [pc, #336]	; (8005cac <UART_SetConfig+0x330>)
 8005b5c:	fba7 3505 	umull	r3, r5, r7, r5
 8005b60:	096d      	lsrs	r5, r5, #5
 8005b62:	012e      	lsls	r6, r5, #4
 8005b64:	f7fe ff56 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005b68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b70:	6865      	ldr	r5, [r4, #4]
 8005b72:	006d      	lsls	r5, r5, #1
 8005b74:	fbb0 f9f5 	udiv	r9, r0, r5
 8005b78:	f7fe ff4c 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005b7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b84:	6865      	ldr	r5, [r4, #4]
 8005b86:	006d      	lsls	r5, r5, #1
 8005b88:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b8c:	fba7 3505 	umull	r3, r5, r7, r5
 8005b90:	096d      	lsrs	r5, r5, #5
 8005b92:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005b96:	fb08 9515 	mls	r5, r8, r5, r9
 8005b9a:	00ed      	lsls	r5, r5, #3
 8005b9c:	3532      	adds	r5, #50	; 0x32
 8005b9e:	fba7 3505 	umull	r3, r5, r7, r5
 8005ba2:	096d      	lsrs	r5, r5, #5
 8005ba4:	006d      	lsls	r5, r5, #1
 8005ba6:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005baa:	4435      	add	r5, r6
 8005bac:	f7fe ff32 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005bb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bb8:	6866      	ldr	r6, [r4, #4]
 8005bba:	0076      	lsls	r6, r6, #1
 8005bbc:	fbb0 f6f6 	udiv	r6, r0, r6
 8005bc0:	f7fe ff28 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005bc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bcc:	6863      	ldr	r3, [r4, #4]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bd4:	fba7 2303 	umull	r2, r3, r7, r3
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	fb08 6813 	mls	r8, r8, r3, r6
 8005bde:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005be2:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005be6:	fba7 3708 	umull	r3, r7, r7, r8
 8005bea:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	442f      	add	r7, r5
 8005bf2:	609f      	str	r7, [r3, #8]
 8005bf4:	e055      	b.n	8005ca2 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005bf6:	f7fe ff0d 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c02:	6865      	ldr	r5, [r4, #4]
 8005c04:	00ad      	lsls	r5, r5, #2
 8005c06:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c0a:	4f28      	ldr	r7, [pc, #160]	; (8005cac <UART_SetConfig+0x330>)
 8005c0c:	fba7 3505 	umull	r3, r5, r7, r5
 8005c10:	096d      	lsrs	r5, r5, #5
 8005c12:	012e      	lsls	r6, r5, #4
 8005c14:	f7fe fefe 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005c18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c20:	6865      	ldr	r5, [r4, #4]
 8005c22:	00ad      	lsls	r5, r5, #2
 8005c24:	fbb0 f9f5 	udiv	r9, r0, r5
 8005c28:	f7fe fef4 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005c2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c34:	6865      	ldr	r5, [r4, #4]
 8005c36:	00ad      	lsls	r5, r5, #2
 8005c38:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c3c:	fba7 3505 	umull	r3, r5, r7, r5
 8005c40:	096d      	lsrs	r5, r5, #5
 8005c42:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005c46:	fb08 9515 	mls	r5, r8, r5, r9
 8005c4a:	012d      	lsls	r5, r5, #4
 8005c4c:	3532      	adds	r5, #50	; 0x32
 8005c4e:	fba7 3505 	umull	r3, r5, r7, r5
 8005c52:	096d      	lsrs	r5, r5, #5
 8005c54:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005c58:	4435      	add	r5, r6
 8005c5a:	f7fe fedb 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005c5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c66:	6866      	ldr	r6, [r4, #4]
 8005c68:	00b6      	lsls	r6, r6, #2
 8005c6a:	fbb0 f6f6 	udiv	r6, r0, r6
 8005c6e:	f7fe fed1 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005c72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c82:	fba7 3000 	umull	r3, r0, r7, r0
 8005c86:	0940      	lsrs	r0, r0, #5
 8005c88:	fb08 6810 	mls	r8, r8, r0, r6
 8005c8c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005c90:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005c94:	fba7 3708 	umull	r3, r7, r7, r8
 8005c98:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	442f      	add	r7, r5
 8005ca0:	609f      	str	r7, [r3, #8]
}
 8005ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40011000 	.word	0x40011000
 8005cac:	51eb851f 	.word	0x51eb851f

08005cb0 <UART_WaitOnFlagUntilTimeout>:
{
 8005cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	4616      	mov	r6, r2
 8005cba:	4698      	mov	r8, r3
 8005cbc:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cbe:	682b      	ldr	r3, [r5, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	ea37 0303 	bics.w	r3, r7, r3
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2301      	moveq	r3, #1
 8005cca:	2300      	movne	r3, #0
 8005ccc:	42b3      	cmp	r3, r6
 8005cce:	d11d      	bne.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005cd0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005cd4:	d0f3      	beq.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cd6:	b12c      	cbz	r4, 8005ce4 <UART_WaitOnFlagUntilTimeout+0x34>
 8005cd8:	f7fd f980 	bl	8002fdc <HAL_GetTick>
 8005cdc:	eba0 0008 	sub.w	r0, r0, r8
 8005ce0:	42a0      	cmp	r0, r4
 8005ce2:	d9ec      	bls.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ce4:	682a      	ldr	r2, [r5, #0]
 8005ce6:	68d3      	ldr	r3, [r2, #12]
 8005ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cec:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cee:	682a      	ldr	r2, [r5, #0]
 8005cf0:	6953      	ldr	r3, [r2, #20]
 8005cf2:	f023 0301 	bic.w	r3, r3, #1
 8005cf6:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8005d02:	2300      	movs	r3, #0
 8005d04:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8005d08:	2003      	movs	r0, #3
 8005d0a:	e000      	b.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8005d0c:	2000      	movs	r0, #0
}
 8005d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d12 <HAL_UART_Init>:
  if (huart == NULL)
 8005d12:	b358      	cbz	r0, 8005d6c <HAL_UART_Init+0x5a>
{
 8005d14:	b510      	push	{r4, lr}
 8005d16:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005d18:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005d1c:	b30b      	cbz	r3, 8005d62 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005d1e:	2324      	movs	r3, #36	; 0x24
 8005d20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005d24:	6822      	ldr	r2, [r4, #0]
 8005d26:	68d3      	ldr	r3, [r2, #12]
 8005d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d2c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f7ff fe24 	bl	800597c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d34:	6822      	ldr	r2, [r4, #0]
 8005d36:	6913      	ldr	r3, [r2, #16]
 8005d38:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005d3c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	6953      	ldr	r3, [r2, #20]
 8005d42:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005d46:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	68d3      	ldr	r3, [r2, #12]
 8005d4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d50:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d52:	2000      	movs	r0, #0
 8005d54:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d56:	2320      	movs	r3, #32
 8005d58:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d5c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8005d60:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005d62:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005d66:	f002 fc1d 	bl	80085a4 <HAL_UART_MspInit>
 8005d6a:	e7d8      	b.n	8005d1e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005d6c:	2001      	movs	r0, #1
}
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UART_Transmit>:
{
 8005d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005d78:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d155      	bne.n	8005e2e <HAL_UART_Transmit+0xbe>
 8005d82:	4604      	mov	r4, r0
 8005d84:	460d      	mov	r5, r1
 8005d86:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	d055      	beq.n	8005e38 <HAL_UART_Transmit+0xc8>
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	d055      	beq.n	8005e3c <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8005d90:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d053      	beq.n	8005e40 <HAL_UART_Transmit+0xd0>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da2:	2321      	movs	r3, #33	; 0x21
 8005da4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8005da8:	f7fd f918 	bl	8002fdc <HAL_GetTick>
 8005dac:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005dae:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005db2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005db6:	e010      	b.n	8005dda <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005db8:	9600      	str	r6, [sp, #0]
 8005dba:	463b      	mov	r3, r7
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2180      	movs	r1, #128	; 0x80
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7ff ff75 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d13c      	bne.n	8005e44 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005dca:	882b      	ldrh	r3, [r5, #0]
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	b9c3      	cbnz	r3, 8005e0a <HAL_UART_Transmit+0x9a>
          pData += 2U;
 8005dd8:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8005dda:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	b1b3      	cbz	r3, 8005e0e <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8005de0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005de8:	68a3      	ldr	r3, [r4, #8]
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dee:	d0e3      	beq.n	8005db8 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005df0:	9600      	str	r6, [sp, #0]
 8005df2:	463b      	mov	r3, r7
 8005df4:	2200      	movs	r2, #0
 8005df6:	2180      	movs	r1, #128	; 0x80
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f7ff ff59 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005dfe:	bb18      	cbnz	r0, 8005e48 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005e00:	782a      	ldrb	r2, [r5, #0]
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	3501      	adds	r5, #1
 8005e08:	e7e7      	b.n	8005dda <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8005e0a:	3501      	adds	r5, #1
 8005e0c:	e7e5      	b.n	8005dda <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e0e:	9600      	str	r6, [sp, #0]
 8005e10:	463b      	mov	r3, r7
 8005e12:	2200      	movs	r2, #0
 8005e14:	2140      	movs	r1, #64	; 0x40
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7ff ff4a 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	b9a8      	cbnz	r0, 8005e4c <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8005e20:	2220      	movs	r2, #32
 8005e22:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8005e26:	2200      	movs	r2, #0
 8005e28:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8005e2c:	e000      	b.n	8005e30 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8005e2e:	2302      	movs	r3, #2
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	b002      	add	sp, #8
 8005e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e7f9      	b.n	8005e30 <HAL_UART_Transmit+0xc0>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e7f7      	b.n	8005e30 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8005e40:	2302      	movs	r3, #2
 8005e42:	e7f5      	b.n	8005e30 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e7f3      	b.n	8005e30 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e7f1      	b.n	8005e30 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e7ef      	b.n	8005e30 <HAL_UART_Transmit+0xc0>

08005e50 <HAL_UART_TxCpltCallback>:
}
 8005e50:	4770      	bx	lr

08005e52 <UART_EndTransmit_IT>:
{
 8005e52:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e54:	6801      	ldr	r1, [r0, #0]
 8005e56:	68cb      	ldr	r3, [r1, #12]
 8005e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5c:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005e5e:	2320      	movs	r3, #32
 8005e60:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005e64:	f7ff fff4 	bl	8005e50 <HAL_UART_TxCpltCallback>
}
 8005e68:	2000      	movs	r0, #0
 8005e6a:	bd08      	pop	{r3, pc}

08005e6c <HAL_UART_RxCpltCallback>:
}
 8005e6c:	4770      	bx	lr

08005e6e <UART_Receive_IT>:
{
 8005e6e:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e70:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b22      	cmp	r3, #34	; 0x22
 8005e78:	d145      	bne.n	8005f06 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e7a:	6883      	ldr	r3, [r0, #8]
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e80:	d00e      	beq.n	8005ea0 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e82:	6903      	ldr	r3, [r0, #16]
 8005e84:	bb03      	cbnz	r3, 8005ec8 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e86:	6803      	ldr	r3, [r0, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e8c:	1c59      	adds	r1, r3, #1
 8005e8e:	6281      	str	r1, [r0, #40]	; 0x28
 8005e90:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8005e92:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005e9a:	b1f3      	cbz	r3, 8005eda <UART_Receive_IT+0x6c>
    return HAL_OK;
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e033      	b.n	8005f08 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005ea0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ea2:	6903      	ldr	r3, [r0, #16]
 8005ea4:	b943      	cbnz	r3, 8005eb8 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ea6:	6803      	ldr	r3, [r0, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eae:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8005eb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005eb2:	3302      	adds	r3, #2
 8005eb4:	6283      	str	r3, [r0, #40]	; 0x28
 8005eb6:	e7ec      	b.n	8005e92 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005eb8:	6803      	ldr	r3, [r0, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8005ec0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	6283      	str	r3, [r0, #40]	; 0x28
 8005ec6:	e7e4      	b.n	8005e92 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ec8:	6803      	ldr	r3, [r0, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005ece:	1c51      	adds	r1, r2, #1
 8005ed0:	6281      	str	r1, [r0, #40]	; 0x28
 8005ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed6:	7013      	strb	r3, [r2, #0]
 8005ed8:	e7db      	b.n	8005e92 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005eda:	6802      	ldr	r2, [r0, #0]
 8005edc:	68d3      	ldr	r3, [r2, #12]
 8005ede:	f023 0320 	bic.w	r3, r3, #32
 8005ee2:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ee4:	6802      	ldr	r2, [r0, #0]
 8005ee6:	68d3      	ldr	r3, [r2, #12]
 8005ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eec:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eee:	6802      	ldr	r2, [r0, #0]
 8005ef0:	6953      	ldr	r3, [r2, #20]
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
 8005ef6:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	2320      	movs	r3, #32
 8005efa:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005efe:	f7ff ffb5 	bl	8005e6c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8005f02:	2000      	movs	r0, #0
 8005f04:	e000      	b.n	8005f08 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8005f06:	2002      	movs	r0, #2
}
 8005f08:	bd08      	pop	{r3, pc}

08005f0a <HAL_UART_ErrorCallback>:
}
 8005f0a:	4770      	bx	lr

08005f0c <HAL_UART_IRQHandler>:
{
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f10:	6802      	ldr	r2, [r0, #0]
 8005f12:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f14:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f16:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8005f18:	f013 000f 	ands.w	r0, r3, #15
 8005f1c:	d105      	bne.n	8005f2a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f1e:	f013 0f20 	tst.w	r3, #32
 8005f22:	d002      	beq.n	8005f2a <HAL_UART_IRQHandler+0x1e>
 8005f24:	f011 0f20 	tst.w	r1, #32
 8005f28:	d153      	bne.n	8005fd2 <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d067      	beq.n	8005ffe <HAL_UART_IRQHandler+0xf2>
 8005f2e:	f012 0201 	ands.w	r2, r2, #1
 8005f32:	d102      	bne.n	8005f3a <HAL_UART_IRQHandler+0x2e>
 8005f34:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005f38:	d061      	beq.n	8005ffe <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f3a:	f013 0f01 	tst.w	r3, #1
 8005f3e:	d006      	beq.n	8005f4e <HAL_UART_IRQHandler+0x42>
 8005f40:	f411 7f80 	tst.w	r1, #256	; 0x100
 8005f44:	d003      	beq.n	8005f4e <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f46:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005f48:	f040 0001 	orr.w	r0, r0, #1
 8005f4c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f4e:	f013 0f04 	tst.w	r3, #4
 8005f52:	d004      	beq.n	8005f5e <HAL_UART_IRQHandler+0x52>
 8005f54:	b11a      	cbz	r2, 8005f5e <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005f58:	f040 0002 	orr.w	r0, r0, #2
 8005f5c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f5e:	f013 0f02 	tst.w	r3, #2
 8005f62:	d004      	beq.n	8005f6e <HAL_UART_IRQHandler+0x62>
 8005f64:	b11a      	cbz	r2, 8005f6e <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005f68:	f040 0004 	orr.w	r0, r0, #4
 8005f6c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f6e:	f013 0f08 	tst.w	r3, #8
 8005f72:	d004      	beq.n	8005f7e <HAL_UART_IRQHandler+0x72>
 8005f74:	b11a      	cbz	r2, 8005f7e <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005f78:	f042 0208 	orr.w	r2, r2, #8
 8005f7c:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	d048      	beq.n	8006016 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f84:	f013 0f20 	tst.w	r3, #32
 8005f88:	d002      	beq.n	8005f90 <HAL_UART_IRQHandler+0x84>
 8005f8a:	f011 0f20 	tst.w	r1, #32
 8005f8e:	d124      	bne.n	8005fda <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005f9a:	f012 0f08 	tst.w	r2, #8
 8005f9e:	d100      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x96>
 8005fa0:	b33b      	cbz	r3, 8005ff2 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f7ff fca7 	bl	80058f6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005fb0:	d01b      	beq.n	8005fea <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb2:	695a      	ldr	r2, [r3, #20]
 8005fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fbc:	b18b      	cbz	r3, 8005fe2 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fbe:	4a1a      	ldr	r2, [pc, #104]	; (8006028 <HAL_UART_IRQHandler+0x11c>)
 8005fc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fc2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005fc4:	f7fd f956 	bl	8003274 <HAL_DMA_Abort_IT>
 8005fc8:	b328      	cbz	r0, 8006016 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005fcc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005fce:	4798      	blx	r3
 8005fd0:	e021      	b.n	8006016 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7ff ff4b 	bl	8005e6e <UART_Receive_IT>
      return;
 8005fd8:	e01d      	b.n	8006016 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7ff ff47 	bl	8005e6e <UART_Receive_IT>
 8005fe0:	e7d6      	b.n	8005f90 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7ff ff91 	bl	8005f0a <HAL_UART_ErrorCallback>
 8005fe8:	e015      	b.n	8006016 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8005fea:	4620      	mov	r0, r4
 8005fec:	f7ff ff8d 	bl	8005f0a <HAL_UART_ErrorCallback>
 8005ff0:	e011      	b.n	8006016 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f7ff ff89 	bl	8005f0a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005ffc:	e00b      	b.n	8006016 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ffe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006002:	d002      	beq.n	800600a <HAL_UART_IRQHandler+0xfe>
 8006004:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006008:	d106      	bne.n	8006018 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800600a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800600e:	d002      	beq.n	8006016 <HAL_UART_IRQHandler+0x10a>
 8006010:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006014:	d104      	bne.n	8006020 <HAL_UART_IRQHandler+0x114>
}
 8006016:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8006018:	4620      	mov	r0, r4
 800601a:	f7ff fc7a 	bl	8005912 <UART_Transmit_IT>
    return;
 800601e:	e7fa      	b.n	8006016 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8006020:	4620      	mov	r0, r4
 8006022:	f7ff ff16 	bl	8005e52 <UART_EndTransmit_IT>
    return;
 8006026:	e7f6      	b.n	8006016 <HAL_UART_IRQHandler+0x10a>
 8006028:	0800602d 	.word	0x0800602d

0800602c <UART_DMAAbortOnError>:
{
 800602c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8006030:	2300      	movs	r3, #0
 8006032:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006034:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006036:	f7ff ff68 	bl	8005f0a <HAL_UART_ErrorCallback>
}
 800603a:	bd08      	pop	{r3, pc}

0800603c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800603c:	2884      	cmp	r0, #132	; 0x84
 800603e:	d001      	beq.n	8006044 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8006040:	3003      	adds	r0, #3
 8006042:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006044:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8006046:	4770      	bx	lr

08006048 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006048:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800604a:	f000 fca5 	bl	8006998 <vTaskStartScheduler>
  
  return osOK;
}
 800604e:	2000      	movs	r0, #0
 8006050:	bd08      	pop	{r3, pc}

08006052 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006056:	b087      	sub	sp, #28
 8006058:	4604      	mov	r4, r0
 800605a:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800605c:	6945      	ldr	r5, [r0, #20]
 800605e:	b1a5      	cbz	r5, 800608a <osThreadCreate+0x38>
 8006060:	6986      	ldr	r6, [r0, #24]
 8006062:	b196      	cbz	r6, 800608a <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006064:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006068:	f8d0 9000 	ldr.w	r9, [r0]
 800606c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006070:	f7ff ffe4 	bl	800603c <makeFreeRtosPriority>
 8006074:	6922      	ldr	r2, [r4, #16]
 8006076:	9602      	str	r6, [sp, #8]
 8006078:	9501      	str	r5, [sp, #4]
 800607a:	9000      	str	r0, [sp, #0]
 800607c:	463b      	mov	r3, r7
 800607e:	4649      	mov	r1, r9
 8006080:	4640      	mov	r0, r8
 8006082:	f000 fc1d 	bl	80068c0 <xTaskCreateStatic>
 8006086:	9005      	str	r0, [sp, #20]
 8006088:	e013      	b.n	80060b2 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800608a:	6865      	ldr	r5, [r4, #4]
 800608c:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800608e:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006092:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8006096:	f7ff ffd1 	bl	800603c <makeFreeRtosPriority>
 800609a:	ab05      	add	r3, sp, #20
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	9000      	str	r0, [sp, #0]
 80060a0:	463b      	mov	r3, r7
 80060a2:	fa1f f288 	uxth.w	r2, r8
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	f000 fc42 	bl	8006932 <xTaskCreate>
 80060ae:	2801      	cmp	r0, #1
 80060b0:	d103      	bne.n	80060ba <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80060b2:	9805      	ldr	r0, [sp, #20]
}
 80060b4:	b007      	add	sp, #28
 80060b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 80060ba:	2000      	movs	r0, #0
 80060bc:	e7fa      	b.n	80060b4 <osThreadCreate+0x62>

080060be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80060be:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80060c0:	4603      	mov	r3, r0
 80060c2:	b900      	cbnz	r0, 80060c6 <osDelay+0x8>
 80060c4:	2301      	movs	r3, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fdaa 	bl	8006c20 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80060cc:	2000      	movs	r0, #0
 80060ce:	bd08      	pop	{r3, pc}

080060d0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80060d0:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80060d2:	6841      	ldr	r1, [r0, #4]
 80060d4:	b119      	cbz	r1, 80060de <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80060d6:	2001      	movs	r0, #1
 80060d8:	f000 fa63 	bl	80065a2 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80060dc:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 80060de:	2001      	movs	r0, #1
 80060e0:	f000 fa54 	bl	800658c <xQueueCreateMutex>
 80060e4:	e7fa      	b.n	80060dc <osMutexCreate+0xc>

080060e6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060e6:	f100 0308 	add.w	r3, r0, #8
 80060ea:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060f0:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060f2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060f4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060fa:	4770      	bx	lr

080060fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006100:	4770      	bx	lr

08006102 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006102:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006104:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800610e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006110:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006112:	6803      	ldr	r3, [r0, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	6003      	str	r3, [r0, #0]
}
 8006118:	4770      	bx	lr

0800611a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800611a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800611c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800611e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006122:	d002      	beq.n	800612a <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006124:	f100 0208 	add.w	r2, r0, #8
 8006128:	e002      	b.n	8006130 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800612a:	6902      	ldr	r2, [r0, #16]
 800612c:	e004      	b.n	8006138 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800612e:	461a      	mov	r2, r3
 8006130:	6853      	ldr	r3, [r2, #4]
 8006132:	681c      	ldr	r4, [r3, #0]
 8006134:	42ac      	cmp	r4, r5
 8006136:	d9fa      	bls.n	800612e <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006138:	6853      	ldr	r3, [r2, #4]
 800613a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800613c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800613e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006140:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006142:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006144:	6803      	ldr	r3, [r0, #0]
 8006146:	3301      	adds	r3, #1
 8006148:	6003      	str	r3, [r0, #0]
}
 800614a:	bc30      	pop	{r4, r5}
 800614c:	4770      	bx	lr

0800614e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800614e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006150:	6842      	ldr	r2, [r0, #4]
 8006152:	6881      	ldr	r1, [r0, #8]
 8006154:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006156:	6882      	ldr	r2, [r0, #8]
 8006158:	6841      	ldr	r1, [r0, #4]
 800615a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	4282      	cmp	r2, r0
 8006160:	d006      	beq.n	8006170 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006162:	2200      	movs	r2, #0
 8006164:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	3a01      	subs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800616c:	6818      	ldr	r0, [r3, #0]
}
 800616e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006170:	6882      	ldr	r2, [r0, #8]
 8006172:	605a      	str	r2, [r3, #4]
 8006174:	e7f5      	b.n	8006162 <uxListRemove+0x14>

08006176 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006176:	b510      	push	{r4, lr}
 8006178:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800617a:	f000 ff43 	bl	8007004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800617e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006180:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006182:	429a      	cmp	r2, r3
 8006184:	d004      	beq.n	8006190 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8006186:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8006188:	f000 ff5e 	bl	8007048 <vPortExitCritical>

	return xReturn;
}
 800618c:	4620      	mov	r0, r4
 800618e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8006190:	2401      	movs	r4, #1
 8006192:	e7f9      	b.n	8006188 <prvIsQueueFull+0x12>

08006194 <prvCopyDataToQueue>:
{
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	4604      	mov	r4, r0
 8006198:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800619a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800619c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800619e:	b95a      	cbnz	r2, 80061b8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061a0:	6803      	ldr	r3, [r0, #0]
 80061a2:	b11b      	cbz	r3, 80061ac <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80061a4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061a6:	3501      	adds	r5, #1
 80061a8:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80061ac:	6840      	ldr	r0, [r0, #4]
 80061ae:	f000 fe69 	bl	8006e84 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	6063      	str	r3, [r4, #4]
 80061b6:	e7f6      	b.n	80061a6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80061b8:	b96e      	cbnz	r6, 80061d6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80061ba:	6880      	ldr	r0, [r0, #8]
 80061bc:	f003 fe87 	bl	8009ece <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80061c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80061c2:	68a3      	ldr	r3, [r4, #8]
 80061c4:	4413      	add	r3, r2
 80061c6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061c8:	6862      	ldr	r2, [r4, #4]
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d319      	bcc.n	8006202 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80061d2:	2000      	movs	r0, #0
 80061d4:	e7e7      	b.n	80061a6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d6:	68c0      	ldr	r0, [r0, #12]
 80061d8:	f003 fe79 	bl	8009ece <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80061dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80061de:	4252      	negs	r2, r2
 80061e0:	68e3      	ldr	r3, [r4, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061e6:	6821      	ldr	r1, [r4, #0]
 80061e8:	428b      	cmp	r3, r1
 80061ea:	d202      	bcs.n	80061f2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	441a      	add	r2, r3
 80061f0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80061f2:	2e02      	cmp	r6, #2
 80061f4:	d001      	beq.n	80061fa <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80061f6:	2000      	movs	r0, #0
 80061f8:	e7d5      	b.n	80061a6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061fa:	b125      	cbz	r5, 8006206 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80061fc:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80061fe:	2000      	movs	r0, #0
 8006200:	e7d1      	b.n	80061a6 <prvCopyDataToQueue+0x12>
 8006202:	2000      	movs	r0, #0
 8006204:	e7cf      	b.n	80061a6 <prvCopyDataToQueue+0x12>
 8006206:	2000      	movs	r0, #0
 8006208:	e7cd      	b.n	80061a6 <prvCopyDataToQueue+0x12>

0800620a <prvUnlockQueue>:
{
 800620a:	b538      	push	{r3, r4, r5, lr}
 800620c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800620e:	f000 fef9 	bl	8007004 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006212:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8006216:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006218:	e003      	b.n	8006222 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800621a:	f000 fe1d 	bl	8006e58 <vTaskMissedYield>
			--cTxLock;
 800621e:	3c01      	subs	r4, #1
 8006220:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006222:	2c00      	cmp	r4, #0
 8006224:	dd08      	ble.n	8006238 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006228:	b133      	cbz	r3, 8006238 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800622a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800622e:	f000 fd81 	bl	8006d34 <xTaskRemoveFromEventList>
 8006232:	2800      	cmp	r0, #0
 8006234:	d0f3      	beq.n	800621e <prvUnlockQueue+0x14>
 8006236:	e7f0      	b.n	800621a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8006238:	23ff      	movs	r3, #255	; 0xff
 800623a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800623e:	f000 ff03 	bl	8007048 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006242:	f000 fedf 	bl	8007004 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006246:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800624a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800624c:	e003      	b.n	8006256 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 800624e:	f000 fe03 	bl	8006e58 <vTaskMissedYield>
				--cRxLock;
 8006252:	3c01      	subs	r4, #1
 8006254:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006256:	2c00      	cmp	r4, #0
 8006258:	dd08      	ble.n	800626c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800625a:	692b      	ldr	r3, [r5, #16]
 800625c:	b133      	cbz	r3, 800626c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800625e:	f105 0010 	add.w	r0, r5, #16
 8006262:	f000 fd67 	bl	8006d34 <xTaskRemoveFromEventList>
 8006266:	2800      	cmp	r0, #0
 8006268:	d0f3      	beq.n	8006252 <prvUnlockQueue+0x48>
 800626a:	e7f0      	b.n	800624e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800626c:	23ff      	movs	r3, #255	; 0xff
 800626e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006272:	f000 fee9 	bl	8007048 <vPortExitCritical>
}
 8006276:	bd38      	pop	{r3, r4, r5, pc}

08006278 <xQueueGenericReset>:
{
 8006278:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800627a:	b940      	cbnz	r0, 800628e <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	e7fe      	b.n	800628c <xQueueGenericReset+0x14>
 800628e:	4604      	mov	r4, r0
 8006290:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8006292:	f000 feb7 	bl	8007004 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006296:	6821      	ldr	r1, [r4, #0]
 8006298:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800629a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800629c:	fb03 1002 	mla	r0, r3, r2, r1
 80062a0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062a2:	2000      	movs	r0, #0
 80062a4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062a6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80062a8:	3a01      	subs	r2, #1
 80062aa:	fb02 1303 	mla	r3, r2, r3, r1
 80062ae:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062b0:	23ff      	movs	r3, #255	; 0xff
 80062b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80062b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80062ba:	b9a5      	cbnz	r5, 80062e6 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062bc:	6923      	ldr	r3, [r4, #16]
 80062be:	b91b      	cbnz	r3, 80062c8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80062c0:	f000 fec2 	bl	8007048 <vPortExitCritical>
}
 80062c4:	2001      	movs	r0, #1
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062c8:	f104 0010 	add.w	r0, r4, #16
 80062cc:	f000 fd32 	bl	8006d34 <xTaskRemoveFromEventList>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d0f5      	beq.n	80062c0 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 80062d4:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <xQueueGenericReset+0x80>)
 80062d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	e7ec      	b.n	80062c0 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062e6:	f104 0010 	add.w	r0, r4, #16
 80062ea:	f7ff fefc 	bl	80060e6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80062f2:	f7ff fef8 	bl	80060e6 <vListInitialise>
 80062f6:	e7e3      	b.n	80062c0 <xQueueGenericReset+0x48>
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <prvInitialiseNewQueue>:
{
 80062fc:	b510      	push	{r4, lr}
 80062fe:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006300:	460c      	mov	r4, r1
 8006302:	b139      	cbz	r1, 8006314 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006304:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8006306:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006308:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800630a:	2101      	movs	r1, #1
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ffb3 	bl	8006278 <xQueueGenericReset>
}
 8006312:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006314:	601b      	str	r3, [r3, #0]
 8006316:	e7f6      	b.n	8006306 <prvInitialiseNewQueue+0xa>

08006318 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006318:	b940      	cbnz	r0, 800632c <xQueueGenericCreateStatic+0x14>
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	e7fe      	b.n	800632a <xQueueGenericCreateStatic+0x12>
	{
 800632c:	b510      	push	{r4, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8006332:	b153      	cbz	r3, 800634a <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006334:	b192      	cbz	r2, 800635c <xQueueGenericCreateStatic+0x44>
 8006336:	b989      	cbnz	r1, 800635c <xQueueGenericCreateStatic+0x44>
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	e7fe      	b.n	8006348 <xQueueGenericCreateStatic+0x30>
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	e7fe      	b.n	800635a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800635c:	b94a      	cbnz	r2, 8006372 <xQueueGenericCreateStatic+0x5a>
 800635e:	b141      	cbz	r1, 8006372 <xQueueGenericCreateStatic+0x5a>
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	e7fe      	b.n	8006370 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006372:	2048      	movs	r0, #72	; 0x48
 8006374:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006376:	9803      	ldr	r0, [sp, #12]
 8006378:	2848      	cmp	r0, #72	; 0x48
 800637a:	d008      	beq.n	800638e <xQueueGenericCreateStatic+0x76>
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	e7fe      	b.n	800638c <xQueueGenericCreateStatic+0x74>
 800638e:	4620      	mov	r0, r4
 8006390:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006392:	2301      	movs	r3, #1
 8006394:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006398:	9400      	str	r4, [sp, #0]
 800639a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800639e:	f7ff ffad 	bl	80062fc <prvInitialiseNewQueue>
	}
 80063a2:	4620      	mov	r0, r4
 80063a4:	b004      	add	sp, #16
 80063a6:	bd10      	pop	{r4, pc}

080063a8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063a8:	b940      	cbnz	r0, 80063bc <xQueueGenericCreate+0x14>
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	e7fe      	b.n	80063ba <xQueueGenericCreate+0x12>
	{
 80063bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063be:	b083      	sub	sp, #12
 80063c0:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 80063c2:	b111      	cbz	r1, 80063ca <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c4:	fb01 f000 	mul.w	r0, r1, r0
 80063c8:	e000      	b.n	80063cc <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 80063ca:	2000      	movs	r0, #0
 80063cc:	4617      	mov	r7, r2
 80063ce:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80063d0:	3048      	adds	r0, #72	; 0x48
 80063d2:	f000 ff9f 	bl	8007314 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80063d6:	4605      	mov	r5, r0
 80063d8:	b150      	cbz	r0, 80063f0 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063da:	2300      	movs	r3, #0
 80063dc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063e0:	9000      	str	r0, [sp, #0]
 80063e2:	463b      	mov	r3, r7
 80063e4:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80063e8:	4621      	mov	r1, r4
 80063ea:	4630      	mov	r0, r6
 80063ec:	f7ff ff86 	bl	80062fc <prvInitialiseNewQueue>
	}
 80063f0:	4628      	mov	r0, r5
 80063f2:	b003      	add	sp, #12
 80063f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080063f8 <xQueueGenericSend>:
{
 80063f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063fa:	b085      	sub	sp, #20
 80063fc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80063fe:	b160      	cbz	r0, 800641a <xQueueGenericSend+0x22>
 8006400:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006402:	b999      	cbnz	r1, 800642c <xQueueGenericSend+0x34>
 8006404:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006406:	b18a      	cbz	r2, 800642c <xQueueGenericSend+0x34>
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	e7fe      	b.n	8006418 <xQueueGenericSend+0x20>
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	e7fe      	b.n	800642a <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800642c:	2b02      	cmp	r3, #2
 800642e:	d10b      	bne.n	8006448 <xQueueGenericSend+0x50>
 8006430:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006432:	2a01      	cmp	r2, #1
 8006434:	d008      	beq.n	8006448 <xQueueGenericSend+0x50>
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	e7fe      	b.n	8006446 <xQueueGenericSend+0x4e>
 8006448:	461e      	mov	r6, r3
 800644a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800644c:	f000 fd0a 	bl	8006e64 <xTaskGetSchedulerState>
 8006450:	b950      	cbnz	r0, 8006468 <xQueueGenericSend+0x70>
 8006452:	9b01      	ldr	r3, [sp, #4]
 8006454:	b153      	cbz	r3, 800646c <xQueueGenericSend+0x74>
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	e7fe      	b.n	8006466 <xQueueGenericSend+0x6e>
 8006468:	2500      	movs	r5, #0
 800646a:	e03a      	b.n	80064e2 <xQueueGenericSend+0xea>
 800646c:	2500      	movs	r5, #0
 800646e:	e038      	b.n	80064e2 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006470:	4632      	mov	r2, r6
 8006472:	4639      	mov	r1, r7
 8006474:	4620      	mov	r0, r4
 8006476:	f7ff fe8d 	bl	8006194 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800647a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800647c:	b94b      	cbnz	r3, 8006492 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 800647e:	b1a8      	cbz	r0, 80064ac <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8006480:	4b3b      	ldr	r3, [pc, #236]	; (8006570 <xQueueGenericSend+0x178>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	e00c      	b.n	80064ac <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006492:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006496:	f000 fc4d 	bl	8006d34 <xTaskRemoveFromEventList>
 800649a:	b138      	cbz	r0, 80064ac <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 800649c:	4b34      	ldr	r3, [pc, #208]	; (8006570 <xQueueGenericSend+0x178>)
 800649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80064ac:	f000 fdcc 	bl	8007048 <vPortExitCritical>
				return pdPASS;
 80064b0:	2001      	movs	r0, #1
}
 80064b2:	b005      	add	sp, #20
 80064b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80064b6:	f000 fdc7 	bl	8007048 <vPortExitCritical>
					return errQUEUE_FULL;
 80064ba:	2000      	movs	r0, #0
 80064bc:	e7f9      	b.n	80064b2 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064be:	a802      	add	r0, sp, #8
 80064c0:	f000 fc7e 	bl	8006dc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064c4:	2501      	movs	r5, #1
 80064c6:	e019      	b.n	80064fc <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 80064c8:	2300      	movs	r3, #0
 80064ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80064ce:	e021      	b.n	8006514 <xQueueGenericSend+0x11c>
 80064d0:	2300      	movs	r3, #0
 80064d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064d6:	e023      	b.n	8006520 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 80064d8:	4620      	mov	r0, r4
 80064da:	f7ff fe96 	bl	800620a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064de:	f000 fb25 	bl	8006b2c <xTaskResumeAll>
		taskENTER_CRITICAL();
 80064e2:	f000 fd8f 	bl	8007004 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80064e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d3c0      	bcc.n	8006470 <xQueueGenericSend+0x78>
 80064ee:	2e02      	cmp	r6, #2
 80064f0:	d0be      	beq.n	8006470 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 80064f2:	9b01      	ldr	r3, [sp, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0de      	beq.n	80064b6 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 80064f8:	2d00      	cmp	r5, #0
 80064fa:	d0e0      	beq.n	80064be <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 80064fc:	f000 fda4 	bl	8007048 <vPortExitCritical>
		vTaskSuspendAll();
 8006500:	f000 fa80 	bl	8006a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006504:	f000 fd7e 	bl	8007004 <vPortEnterCritical>
 8006508:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800650c:	b25b      	sxtb	r3, r3
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006512:	d0d9      	beq.n	80064c8 <xQueueGenericSend+0xd0>
 8006514:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006518:	b25b      	sxtb	r3, r3
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800651e:	d0d7      	beq.n	80064d0 <xQueueGenericSend+0xd8>
 8006520:	f000 fd92 	bl	8007048 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006524:	a901      	add	r1, sp, #4
 8006526:	a802      	add	r0, sp, #8
 8006528:	f000 fc56 	bl	8006dd8 <xTaskCheckForTimeOut>
 800652c:	b9c8      	cbnz	r0, 8006562 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff fe21 	bl	8006176 <prvIsQueueFull>
 8006534:	2800      	cmp	r0, #0
 8006536:	d0cf      	beq.n	80064d8 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006538:	9901      	ldr	r1, [sp, #4]
 800653a:	f104 0010 	add.w	r0, r4, #16
 800653e:	f000 fbe1 	bl	8006d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006542:	4620      	mov	r0, r4
 8006544:	f7ff fe61 	bl	800620a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006548:	f000 faf0 	bl	8006b2c <xTaskResumeAll>
 800654c:	2800      	cmp	r0, #0
 800654e:	d1c8      	bne.n	80064e2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8006550:	4b07      	ldr	r3, [pc, #28]	; (8006570 <xQueueGenericSend+0x178>)
 8006552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	e7bf      	b.n	80064e2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8006562:	4620      	mov	r0, r4
 8006564:	f7ff fe51 	bl	800620a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006568:	f000 fae0 	bl	8006b2c <xTaskResumeAll>
			return errQUEUE_FULL;
 800656c:	2000      	movs	r0, #0
 800656e:	e7a0      	b.n	80064b2 <xQueueGenericSend+0xba>
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8006574:	b148      	cbz	r0, 800658a <prvInitialiseMutex+0x16>
	{
 8006576:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8006578:	2100      	movs	r1, #0
 800657a:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800657c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800657e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006580:	460b      	mov	r3, r1
 8006582:	460a      	mov	r2, r1
 8006584:	f7ff ff38 	bl	80063f8 <xQueueGenericSend>
	}
 8006588:	bd08      	pop	{r3, pc}
 800658a:	4770      	bx	lr

0800658c <xQueueCreateMutex>:
	{
 800658c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800658e:	4602      	mov	r2, r0
 8006590:	2100      	movs	r1, #0
 8006592:	2001      	movs	r0, #1
 8006594:	f7ff ff08 	bl	80063a8 <xQueueGenericCreate>
 8006598:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800659a:	f7ff ffeb 	bl	8006574 <prvInitialiseMutex>
	}
 800659e:	4620      	mov	r0, r4
 80065a0:	bd10      	pop	{r4, pc}

080065a2 <xQueueCreateMutexStatic>:
	{
 80065a2:	b510      	push	{r4, lr}
 80065a4:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80065a6:	9000      	str	r0, [sp, #0]
 80065a8:	460b      	mov	r3, r1
 80065aa:	2200      	movs	r2, #0
 80065ac:	4611      	mov	r1, r2
 80065ae:	2001      	movs	r0, #1
 80065b0:	f7ff feb2 	bl	8006318 <xQueueGenericCreateStatic>
 80065b4:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80065b6:	f7ff ffdd 	bl	8006574 <prvInitialiseMutex>
	}
 80065ba:	4620      	mov	r0, r4
 80065bc:	b002      	add	sp, #8
 80065be:	bd10      	pop	{r4, pc}

080065c0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065c0:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <prvResetNextTaskUnblockTime+0x24>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	b13b      	cbz	r3, 80065d8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065c8:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <prvResetNextTaskUnblockTime+0x24>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <prvResetNextTaskUnblockTime+0x28>)
 80065d4:	601a      	str	r2, [r3, #0]
	}
}
 80065d6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 80065d8:	4b03      	ldr	r3, [pc, #12]	; (80065e8 <prvResetNextTaskUnblockTime+0x28>)
 80065da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000380 	.word	0x20000380
 80065e8:	20000454 	.word	0x20000454

080065ec <prvInitialiseNewTask>:
{
 80065ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	4680      	mov	r8, r0
 80065f2:	4699      	mov	r9, r3
 80065f4:	9d08      	ldr	r5, [sp, #32]
 80065f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80065f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80065fa:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80065fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006600:	3a01      	subs	r2, #1
 8006602:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006606:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800660a:	2300      	movs	r3, #0
 800660c:	2b0f      	cmp	r3, #15
 800660e:	d807      	bhi.n	8006620 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006610:	5cc8      	ldrb	r0, [r1, r3]
 8006612:	18e2      	adds	r2, r4, r3
 8006614:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8006618:	5cca      	ldrb	r2, [r1, r3]
 800661a:	b10a      	cbz	r2, 8006620 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800661c:	3301      	adds	r3, #1
 800661e:	e7f5      	b.n	800660c <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006620:	2300      	movs	r3, #0
 8006622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006626:	2d06      	cmp	r5, #6
 8006628:	d900      	bls.n	800662c <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800662a:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800662c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800662e:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006630:	f04f 0a00 	mov.w	sl, #0
 8006634:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006638:	1d20      	adds	r0, r4, #4
 800663a:	f7ff fd5f 	bl	80060fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800663e:	f104 0018 	add.w	r0, r4, #24
 8006642:	f7ff fd5b 	bl	80060fc <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006646:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006648:	f1c5 0507 	rsb	r5, r5, #7
 800664c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800664e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006650:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006654:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006658:	464a      	mov	r2, r9
 800665a:	4641      	mov	r1, r8
 800665c:	4630      	mov	r0, r6
 800665e:	f000 fca7 	bl	8006fb0 <pxPortInitialiseStack>
 8006662:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006664:	b107      	cbz	r7, 8006668 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006666:	603c      	str	r4, [r7, #0]
}
 8006668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800666c <prvInitialiseTaskLists>:
{
 800666c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800666e:	2400      	movs	r4, #0
 8006670:	e007      	b.n	8006682 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006672:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006676:	0093      	lsls	r3, r2, #2
 8006678:	480e      	ldr	r0, [pc, #56]	; (80066b4 <prvInitialiseTaskLists+0x48>)
 800667a:	4418      	add	r0, r3
 800667c:	f7ff fd33 	bl	80060e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006680:	3401      	adds	r4, #1
 8006682:	2c06      	cmp	r4, #6
 8006684:	d9f5      	bls.n	8006672 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8006686:	4d0c      	ldr	r5, [pc, #48]	; (80066b8 <prvInitialiseTaskLists+0x4c>)
 8006688:	4628      	mov	r0, r5
 800668a:	f7ff fd2c 	bl	80060e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800668e:	4c0b      	ldr	r4, [pc, #44]	; (80066bc <prvInitialiseTaskLists+0x50>)
 8006690:	4620      	mov	r0, r4
 8006692:	f7ff fd28 	bl	80060e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006696:	480a      	ldr	r0, [pc, #40]	; (80066c0 <prvInitialiseTaskLists+0x54>)
 8006698:	f7ff fd25 	bl	80060e6 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800669c:	4809      	ldr	r0, [pc, #36]	; (80066c4 <prvInitialiseTaskLists+0x58>)
 800669e:	f7ff fd22 	bl	80060e6 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80066a2:	4809      	ldr	r0, [pc, #36]	; (80066c8 <prvInitialiseTaskLists+0x5c>)
 80066a4:	f7ff fd1f 	bl	80060e6 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80066a8:	4b08      	ldr	r3, [pc, #32]	; (80066cc <prvInitialiseTaskLists+0x60>)
 80066aa:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066ac:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <prvInitialiseTaskLists+0x64>)
 80066ae:	601c      	str	r4, [r3, #0]
}
 80066b0:	bd38      	pop	{r3, r4, r5, pc}
 80066b2:	bf00      	nop
 80066b4:	20000388 	.word	0x20000388
 80066b8:	2000042c 	.word	0x2000042c
 80066bc:	20000440 	.word	0x20000440
 80066c0:	2000045c 	.word	0x2000045c
 80066c4:	20000488 	.word	0x20000488
 80066c8:	20000474 	.word	0x20000474
 80066cc:	20000380 	.word	0x20000380
 80066d0:	20000384 	.word	0x20000384

080066d4 <prvAddNewTaskToReadyList>:
{
 80066d4:	b510      	push	{r4, lr}
 80066d6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80066d8:	f000 fc94 	bl	8007004 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80066dc:	4a20      	ldr	r2, [pc, #128]	; (8006760 <prvAddNewTaskToReadyList+0x8c>)
 80066de:	6813      	ldr	r3, [r2, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066e4:	4b1f      	ldr	r3, [pc, #124]	; (8006764 <prvAddNewTaskToReadyList+0x90>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	b15b      	cbz	r3, 8006702 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80066ea:	4b1f      	ldr	r3, [pc, #124]	; (8006768 <prvAddNewTaskToReadyList+0x94>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	b96b      	cbnz	r3, 800670c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066f0:	4b1c      	ldr	r3, [pc, #112]	; (8006764 <prvAddNewTaskToReadyList+0x90>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d807      	bhi.n	800670c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80066fc:	4b19      	ldr	r3, [pc, #100]	; (8006764 <prvAddNewTaskToReadyList+0x90>)
 80066fe:	601c      	str	r4, [r3, #0]
 8006700:	e004      	b.n	800670c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8006702:	4b18      	ldr	r3, [pc, #96]	; (8006764 <prvAddNewTaskToReadyList+0x90>)
 8006704:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006706:	6813      	ldr	r3, [r2, #0]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d026      	beq.n	800675a <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 800670c:	4a17      	ldr	r2, [pc, #92]	; (800676c <prvAddNewTaskToReadyList+0x98>)
 800670e:	6813      	ldr	r3, [r2, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006714:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006716:	2201      	movs	r2, #1
 8006718:	409a      	lsls	r2, r3
 800671a:	4915      	ldr	r1, [pc, #84]	; (8006770 <prvAddNewTaskToReadyList+0x9c>)
 800671c:	6808      	ldr	r0, [r1, #0]
 800671e:	4302      	orrs	r2, r0
 8006720:	600a      	str	r2, [r1, #0]
 8006722:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006726:	009a      	lsls	r2, r3, #2
 8006728:	1d21      	adds	r1, r4, #4
 800672a:	4812      	ldr	r0, [pc, #72]	; (8006774 <prvAddNewTaskToReadyList+0xa0>)
 800672c:	4410      	add	r0, r2
 800672e:	f7ff fce8 	bl	8006102 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006732:	f000 fc89 	bl	8007048 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006736:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <prvAddNewTaskToReadyList+0x94>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	b16b      	cbz	r3, 8006758 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <prvAddNewTaskToReadyList+0x90>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006742:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006744:	429a      	cmp	r2, r3
 8006746:	d207      	bcs.n	8006758 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8006748:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <prvAddNewTaskToReadyList+0xa4>)
 800674a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	f3bf 8f6f 	isb	sy
}
 8006758:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800675a:	f7ff ff87 	bl	800666c <prvInitialiseTaskLists>
 800675e:	e7d5      	b.n	800670c <prvAddNewTaskToReadyList+0x38>
 8006760:	20000414 	.word	0x20000414
 8006764:	2000037c 	.word	0x2000037c
 8006768:	20000470 	.word	0x20000470
 800676c:	20000424 	.word	0x20000424
 8006770:	20000428 	.word	0x20000428
 8006774:	20000388 	.word	0x20000388
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <prvDeleteTCB>:
	{
 800677c:	b510      	push	{r4, lr}
 800677e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006780:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006784:	b933      	cbnz	r3, 8006794 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8006786:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006788:	f000 fe48 	bl	800741c <vPortFree>
				vPortFree( pxTCB );
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fe45 	bl	800741c <vPortFree>
	}
 8006792:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006794:	2b01      	cmp	r3, #1
 8006796:	d00a      	beq.n	80067ae <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006798:	2b02      	cmp	r3, #2
 800679a:	d0fa      	beq.n	8006792 <prvDeleteTCB+0x16>
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	e7fe      	b.n	80067ac <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 80067ae:	f000 fe35 	bl	800741c <vPortFree>
 80067b2:	e7ee      	b.n	8006792 <prvDeleteTCB+0x16>

080067b4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067b4:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <prvCheckTasksWaitingTermination+0x40>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	b1d3      	cbz	r3, 80067f0 <prvCheckTasksWaitingTermination+0x3c>
{
 80067ba:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80067bc:	f000 fc22 	bl	8007004 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80067c0:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <prvCheckTasksWaitingTermination+0x44>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c6:	1d20      	adds	r0, r4, #4
 80067c8:	f7ff fcc1 	bl	800614e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067cc:	4a0b      	ldr	r2, [pc, #44]	; (80067fc <prvCheckTasksWaitingTermination+0x48>)
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067d4:	4a07      	ldr	r2, [pc, #28]	; (80067f4 <prvCheckTasksWaitingTermination+0x40>)
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	3b01      	subs	r3, #1
 80067da:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80067dc:	f000 fc34 	bl	8007048 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80067e0:	4620      	mov	r0, r4
 80067e2:	f7ff ffcb 	bl	800677c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067e6:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <prvCheckTasksWaitingTermination+0x40>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e6      	bne.n	80067bc <prvCheckTasksWaitingTermination+0x8>
}
 80067ee:	bd10      	pop	{r4, pc}
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000418 	.word	0x20000418
 80067f8:	20000488 	.word	0x20000488
 80067fc:	20000414 	.word	0x20000414

08006800 <prvIdleTask>:
{
 8006800:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8006802:	f7ff ffd7 	bl	80067b4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006806:	4b06      	ldr	r3, [pc, #24]	; (8006820 <prvIdleTask+0x20>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d9f9      	bls.n	8006802 <prvIdleTask+0x2>
				taskYIELD();
 800680e:	4b05      	ldr	r3, [pc, #20]	; (8006824 <prvIdleTask+0x24>)
 8006810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	e7f0      	b.n	8006802 <prvIdleTask+0x2>
 8006820:	20000388 	.word	0x20000388
 8006824:	e000ed04 	.word	0xe000ed04

08006828 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4604      	mov	r4, r0
 800682c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800682e:	4b1d      	ldr	r3, [pc, #116]	; (80068a4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006830:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006832:	4b1d      	ldr	r3, [pc, #116]	; (80068a8 <prvAddCurrentTaskToDelayedList+0x80>)
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	3004      	adds	r0, #4
 8006838:	f7ff fc89 	bl	800614e <uxListRemove>
 800683c:	b950      	cbnz	r0, 8006854 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800683e:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <prvAddCurrentTaskToDelayedList+0x80>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006844:	2301      	movs	r3, #1
 8006846:	fa03 f202 	lsl.w	r2, r3, r2
 800684a:	4918      	ldr	r1, [pc, #96]	; (80068ac <prvAddCurrentTaskToDelayedList+0x84>)
 800684c:	680b      	ldr	r3, [r1, #0]
 800684e:	ea23 0302 	bic.w	r3, r3, r2
 8006852:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006854:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8006858:	d013      	beq.n	8006882 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800685a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800685c:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <prvAddCurrentTaskToDelayedList+0x80>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006862:	42a5      	cmp	r5, r4
 8006864:	d816      	bhi.n	8006894 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006866:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <prvAddCurrentTaskToDelayedList+0x88>)
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <prvAddCurrentTaskToDelayedList+0x80>)
 800686c:	6819      	ldr	r1, [r3, #0]
 800686e:	3104      	adds	r1, #4
 8006870:	f7ff fc53 	bl	800611a <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8006874:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <prvAddCurrentTaskToDelayedList+0x8c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	42a3      	cmp	r3, r4
 800687a:	d912      	bls.n	80068a2 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800687c:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <prvAddCurrentTaskToDelayedList+0x8c>)
 800687e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006880:	e00f      	b.n	80068a2 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006882:	2e00      	cmp	r6, #0
 8006884:	d0e9      	beq.n	800685a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006886:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <prvAddCurrentTaskToDelayedList+0x80>)
 8006888:	6819      	ldr	r1, [r3, #0]
 800688a:	3104      	adds	r1, #4
 800688c:	480a      	ldr	r0, [pc, #40]	; (80068b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800688e:	f7ff fc38 	bl	8006102 <vListInsertEnd>
 8006892:	e006      	b.n	80068a2 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006894:	4b09      	ldr	r3, [pc, #36]	; (80068bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <prvAddCurrentTaskToDelayedList+0x80>)
 800689a:	6819      	ldr	r1, [r3, #0]
 800689c:	3104      	adds	r1, #4
 800689e:	f7ff fc3c 	bl	800611a <vListInsert>
}
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	2000049c 	.word	0x2000049c
 80068a8:	2000037c 	.word	0x2000037c
 80068ac:	20000428 	.word	0x20000428
 80068b0:	20000380 	.word	0x20000380
 80068b4:	20000454 	.word	0x20000454
 80068b8:	20000474 	.word	0x20000474
 80068bc:	20000384 	.word	0x20000384

080068c0 <xTaskCreateStatic>:
	{
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80068c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80068c8:	b945      	cbnz	r5, 80068dc <xTaskCreateStatic+0x1c>
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	e7fe      	b.n	80068da <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80068dc:	b944      	cbnz	r4, 80068f0 <xTaskCreateStatic+0x30>
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	e7fe      	b.n	80068ee <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80068f0:	2654      	movs	r6, #84	; 0x54
 80068f2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068f4:	9e04      	ldr	r6, [sp, #16]
 80068f6:	2e54      	cmp	r6, #84	; 0x54
 80068f8:	d008      	beq.n	800690c <xTaskCreateStatic+0x4c>
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	e7fe      	b.n	800690a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800690c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800690e:	2502      	movs	r5, #2
 8006910:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006914:	2500      	movs	r5, #0
 8006916:	9503      	str	r5, [sp, #12]
 8006918:	9402      	str	r4, [sp, #8]
 800691a:	ad05      	add	r5, sp, #20
 800691c:	9501      	str	r5, [sp, #4]
 800691e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006920:	9500      	str	r5, [sp, #0]
 8006922:	f7ff fe63 	bl	80065ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006926:	4620      	mov	r0, r4
 8006928:	f7ff fed4 	bl	80066d4 <prvAddNewTaskToReadyList>
	}
 800692c:	9805      	ldr	r0, [sp, #20]
 800692e:	b006      	add	sp, #24
 8006930:	bd70      	pop	{r4, r5, r6, pc}

08006932 <xTaskCreate>:
	{
 8006932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006936:	b085      	sub	sp, #20
 8006938:	4607      	mov	r7, r0
 800693a:	4688      	mov	r8, r1
 800693c:	4615      	mov	r5, r2
 800693e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006940:	0090      	lsls	r0, r2, #2
 8006942:	f000 fce7 	bl	8007314 <pvPortMalloc>
			if( pxStack != NULL )
 8006946:	b308      	cbz	r0, 800698c <xTaskCreate+0x5a>
 8006948:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800694a:	2054      	movs	r0, #84	; 0x54
 800694c:	f000 fce2 	bl	8007314 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006950:	4604      	mov	r4, r0
 8006952:	b1b8      	cbz	r0, 8006984 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8006954:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8006956:	b1e4      	cbz	r4, 8006992 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006958:	2300      	movs	r3, #0
 800695a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800695e:	9303      	str	r3, [sp, #12]
 8006960:	9402      	str	r4, [sp, #8]
 8006962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	464b      	mov	r3, r9
 800696c:	462a      	mov	r2, r5
 800696e:	4641      	mov	r1, r8
 8006970:	4638      	mov	r0, r7
 8006972:	f7ff fe3b 	bl	80065ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006976:	4620      	mov	r0, r4
 8006978:	f7ff feac 	bl	80066d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800697c:	2001      	movs	r0, #1
	}
 800697e:	b005      	add	sp, #20
 8006980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006984:	4630      	mov	r0, r6
 8006986:	f000 fd49 	bl	800741c <vPortFree>
 800698a:	e7e4      	b.n	8006956 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800698c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006990:	e7f5      	b.n	800697e <xTaskCreate+0x4c>
 8006992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8006996:	e7f2      	b.n	800697e <xTaskCreate+0x4c>

08006998 <vTaskStartScheduler>:
{
 8006998:	b510      	push	{r4, lr}
 800699a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800699c:	2400      	movs	r4, #0
 800699e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069a0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069a2:	aa07      	add	r2, sp, #28
 80069a4:	a906      	add	r1, sp, #24
 80069a6:	a805      	add	r0, sp, #20
 80069a8:	f001 f976 	bl	8007c98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069ac:	9b05      	ldr	r3, [sp, #20]
 80069ae:	9302      	str	r3, [sp, #8]
 80069b0:	9b06      	ldr	r3, [sp, #24]
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	9400      	str	r4, [sp, #0]
 80069b6:	4623      	mov	r3, r4
 80069b8:	9a07      	ldr	r2, [sp, #28]
 80069ba:	490d      	ldr	r1, [pc, #52]	; (80069f0 <vTaskStartScheduler+0x58>)
 80069bc:	480d      	ldr	r0, [pc, #52]	; (80069f4 <vTaskStartScheduler+0x5c>)
 80069be:	f7ff ff7f 	bl	80068c0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80069c2:	b908      	cbnz	r0, 80069c8 <vTaskStartScheduler+0x30>
}
 80069c4:	b008      	add	sp, #32
 80069c6:	bd10      	pop	{r4, pc}
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80069d8:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <vTaskStartScheduler+0x60>)
 80069da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069e0:	4b06      	ldr	r3, [pc, #24]	; (80069fc <vTaskStartScheduler+0x64>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80069e6:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <vTaskStartScheduler+0x68>)
 80069e8:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80069ea:	f000 fbad 	bl	8007148 <xPortStartScheduler>
 80069ee:	e7e9      	b.n	80069c4 <vTaskStartScheduler+0x2c>
 80069f0:	0800e80c 	.word	0x0800e80c
 80069f4:	08006801 	.word	0x08006801
 80069f8:	20000454 	.word	0x20000454
 80069fc:	20000470 	.word	0x20000470
 8006a00:	2000049c 	.word	0x2000049c

08006a04 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006a04:	4a02      	ldr	r2, [pc, #8]	; (8006a10 <vTaskSuspendAll+0xc>)
 8006a06:	6813      	ldr	r3, [r2, #0]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	6013      	str	r3, [r2, #0]
}
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	20000420 	.word	0x20000420

08006a14 <xTaskIncrementTick>:
{
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a16:	4b3a      	ldr	r3, [pc, #232]	; (8006b00 <xTaskIncrementTick+0xec>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d164      	bne.n	8006ae8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a1e:	4b39      	ldr	r3, [pc, #228]	; (8006b04 <xTaskIncrementTick+0xf0>)
 8006a20:	681d      	ldr	r5, [r3, #0]
 8006a22:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006a24:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a26:	b9c5      	cbnz	r5, 8006a5a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006a28:	4b37      	ldr	r3, [pc, #220]	; (8006b08 <xTaskIncrementTick+0xf4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	b143      	cbz	r3, 8006a42 <xTaskIncrementTick+0x2e>
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	e7fe      	b.n	8006a40 <xTaskIncrementTick+0x2c>
 8006a42:	4a31      	ldr	r2, [pc, #196]	; (8006b08 <xTaskIncrementTick+0xf4>)
 8006a44:	6811      	ldr	r1, [r2, #0]
 8006a46:	4b31      	ldr	r3, [pc, #196]	; (8006b0c <xTaskIncrementTick+0xf8>)
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	6010      	str	r0, [r2, #0]
 8006a4c:	6019      	str	r1, [r3, #0]
 8006a4e:	4a30      	ldr	r2, [pc, #192]	; (8006b10 <xTaskIncrementTick+0xfc>)
 8006a50:	6813      	ldr	r3, [r2, #0]
 8006a52:	3301      	adds	r3, #1
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	f7ff fdb3 	bl	80065c0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a5a:	4b2e      	ldr	r3, [pc, #184]	; (8006b14 <xTaskIncrementTick+0x100>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	42ab      	cmp	r3, r5
 8006a60:	d938      	bls.n	8006ad4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8006a62:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a64:	4b2c      	ldr	r3, [pc, #176]	; (8006b18 <xTaskIncrementTick+0x104>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a6e:	009a      	lsls	r2, r3, #2
 8006a70:	4b2a      	ldr	r3, [pc, #168]	; (8006b1c <xTaskIncrementTick+0x108>)
 8006a72:	589b      	ldr	r3, [r3, r2]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d93c      	bls.n	8006af2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8006a78:	2401      	movs	r4, #1
 8006a7a:	e03a      	b.n	8006af2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8006a7c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a7e:	4b22      	ldr	r3, [pc, #136]	; (8006b08 <xTaskIncrementTick+0xf4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	b343      	cbz	r3, 8006ad8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <xTaskIncrementTick+0xf4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a8e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006a90:	429d      	cmp	r5, r3
 8006a92:	d326      	bcc.n	8006ae2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a94:	1d37      	adds	r7, r6, #4
 8006a96:	4638      	mov	r0, r7
 8006a98:	f7ff fb59 	bl	800614e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a9c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006a9e:	b11b      	cbz	r3, 8006aa8 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aa0:	f106 0018 	add.w	r0, r6, #24
 8006aa4:	f7ff fb53 	bl	800614e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aa8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006aaa:	2201      	movs	r2, #1
 8006aac:	409a      	lsls	r2, r3
 8006aae:	491c      	ldr	r1, [pc, #112]	; (8006b20 <xTaskIncrementTick+0x10c>)
 8006ab0:	6808      	ldr	r0, [r1, #0]
 8006ab2:	4302      	orrs	r2, r0
 8006ab4:	600a      	str	r2, [r1, #0]
 8006ab6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006aba:	009a      	lsls	r2, r3, #2
 8006abc:	4639      	mov	r1, r7
 8006abe:	4817      	ldr	r0, [pc, #92]	; (8006b1c <xTaskIncrementTick+0x108>)
 8006ac0:	4410      	add	r0, r2
 8006ac2:	f7ff fb1e 	bl	8006102 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ac6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006ac8:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <xTaskIncrementTick+0x104>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d2d4      	bcs.n	8006a7c <xTaskIncrementTick+0x68>
 8006ad2:	e7d4      	b.n	8006a7e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8006ad4:	2400      	movs	r4, #0
 8006ad6:	e7d2      	b.n	8006a7e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <xTaskIncrementTick+0x100>)
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ade:	601a      	str	r2, [r3, #0]
					break;
 8006ae0:	e7c0      	b.n	8006a64 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8006ae2:	4a0c      	ldr	r2, [pc, #48]	; (8006b14 <xTaskIncrementTick+0x100>)
 8006ae4:	6013      	str	r3, [r2, #0]
						break;
 8006ae6:	e7bd      	b.n	8006a64 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8006ae8:	4a0e      	ldr	r2, [pc, #56]	; (8006b24 <xTaskIncrementTick+0x110>)
 8006aea:	6813      	ldr	r3, [r2, #0]
 8006aec:	3301      	adds	r3, #1
 8006aee:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006af0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8006af2:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <xTaskIncrementTick+0x114>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	b103      	cbz	r3, 8006afa <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8006af8:	2401      	movs	r4, #1
}
 8006afa:	4620      	mov	r0, r4
 8006afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000420 	.word	0x20000420
 8006b04:	2000049c 	.word	0x2000049c
 8006b08:	20000380 	.word	0x20000380
 8006b0c:	20000384 	.word	0x20000384
 8006b10:	20000458 	.word	0x20000458
 8006b14:	20000454 	.word	0x20000454
 8006b18:	2000037c 	.word	0x2000037c
 8006b1c:	20000388 	.word	0x20000388
 8006b20:	20000428 	.word	0x20000428
 8006b24:	2000041c 	.word	0x2000041c
 8006b28:	200004a0 	.word	0x200004a0

08006b2c <xTaskResumeAll>:
{
 8006b2c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8006b2e:	4b33      	ldr	r3, [pc, #204]	; (8006bfc <xTaskResumeAll+0xd0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	b943      	cbnz	r3, 8006b46 <xTaskResumeAll+0x1a>
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	e7fe      	b.n	8006b44 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8006b46:	f000 fa5d 	bl	8007004 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006b4a:	4b2c      	ldr	r3, [pc, #176]	; (8006bfc <xTaskResumeAll+0xd0>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	3a01      	subs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d14d      	bne.n	8006bf4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b58:	4b29      	ldr	r3, [pc, #164]	; (8006c00 <xTaskResumeAll+0xd4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	b923      	cbnz	r3, 8006b68 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8006b5e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006b60:	f000 fa72 	bl	8007048 <vPortExitCritical>
}
 8006b64:	4620      	mov	r0, r4
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8006b68:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b6a:	4b26      	ldr	r3, [pc, #152]	; (8006c04 <xTaskResumeAll+0xd8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	b31b      	cbz	r3, 8006bb8 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b70:	4b24      	ldr	r3, [pc, #144]	; (8006c04 <xTaskResumeAll+0xd8>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b76:	f104 0018 	add.w	r0, r4, #24
 8006b7a:	f7ff fae8 	bl	800614e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b7e:	1d25      	adds	r5, r4, #4
 8006b80:	4628      	mov	r0, r5
 8006b82:	f7ff fae4 	bl	800614e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b88:	2201      	movs	r2, #1
 8006b8a:	409a      	lsls	r2, r3
 8006b8c:	491e      	ldr	r1, [pc, #120]	; (8006c08 <xTaskResumeAll+0xdc>)
 8006b8e:	6808      	ldr	r0, [r1, #0]
 8006b90:	4302      	orrs	r2, r0
 8006b92:	600a      	str	r2, [r1, #0]
 8006b94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b98:	009a      	lsls	r2, r3, #2
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	481b      	ldr	r0, [pc, #108]	; (8006c0c <xTaskResumeAll+0xe0>)
 8006b9e:	4410      	add	r0, r2
 8006ba0:	f7ff faaf 	bl	8006102 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ba4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ba6:	4b1a      	ldr	r3, [pc, #104]	; (8006c10 <xTaskResumeAll+0xe4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d3dc      	bcc.n	8006b6a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8006bb0:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <xTaskResumeAll+0xe8>)
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e7d8      	b.n	8006b6a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8006bb8:	b10c      	cbz	r4, 8006bbe <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8006bba:	f7ff fd01 	bl	80065c0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006bbe:	4b16      	ldr	r3, [pc, #88]	; (8006c18 <xTaskResumeAll+0xec>)
 8006bc0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006bc2:	b154      	cbz	r4, 8006bda <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8006bc4:	f7ff ff26 	bl	8006a14 <xTaskIncrementTick>
 8006bc8:	b110      	cbz	r0, 8006bd0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006bca:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <xTaskResumeAll+0xe8>)
 8006bcc:	2201      	movs	r2, #1
 8006bce:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006bd0:	3c01      	subs	r4, #1
 8006bd2:	d1f7      	bne.n	8006bc4 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8006bd4:	4b10      	ldr	r3, [pc, #64]	; (8006c18 <xTaskResumeAll+0xec>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006bda:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <xTaskResumeAll+0xe8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	b15b      	cbz	r3, 8006bf8 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8006be0:	4b0e      	ldr	r3, [pc, #56]	; (8006c1c <xTaskResumeAll+0xf0>)
 8006be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006bf0:	2401      	movs	r4, #1
 8006bf2:	e7b5      	b.n	8006b60 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8006bf4:	2400      	movs	r4, #0
 8006bf6:	e7b3      	b.n	8006b60 <xTaskResumeAll+0x34>
 8006bf8:	2400      	movs	r4, #0
 8006bfa:	e7b1      	b.n	8006b60 <xTaskResumeAll+0x34>
 8006bfc:	20000420 	.word	0x20000420
 8006c00:	20000414 	.word	0x20000414
 8006c04:	2000045c 	.word	0x2000045c
 8006c08:	20000428 	.word	0x20000428
 8006c0c:	20000388 	.word	0x20000388
 8006c10:	2000037c 	.word	0x2000037c
 8006c14:	200004a0 	.word	0x200004a0
 8006c18:	2000041c 	.word	0x2000041c
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <vTaskDelay>:
	{
 8006c20:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c22:	b1a8      	cbz	r0, 8006c50 <vTaskDelay+0x30>
 8006c24:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006c26:	4b0f      	ldr	r3, [pc, #60]	; (8006c64 <vTaskDelay+0x44>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	b143      	cbz	r3, 8006c3e <vTaskDelay+0x1e>
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	e7fe      	b.n	8006c3c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006c3e:	f7ff fee1 	bl	8006a04 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c42:	2100      	movs	r1, #0
 8006c44:	4620      	mov	r0, r4
 8006c46:	f7ff fdef 	bl	8006828 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006c4a:	f7ff ff6f 	bl	8006b2c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006c4e:	b938      	cbnz	r0, 8006c60 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8006c50:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <vTaskDelay+0x48>)
 8006c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	f3bf 8f6f 	isb	sy
	}
 8006c60:	bd10      	pop	{r4, pc}
 8006c62:	bf00      	nop
 8006c64:	20000420 	.word	0x20000420
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c6c:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <vTaskSwitchContext+0x84>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	b11b      	cbz	r3, 8006c7a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006c72:	4b20      	ldr	r3, [pc, #128]	; (8006cf4 <vTaskSwitchContext+0x88>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006c7a:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <vTaskSwitchContext+0x88>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c80:	4b1d      	ldr	r3, [pc, #116]	; (8006cf8 <vTaskSwitchContext+0x8c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c84:	fab3 f383 	clz	r3, r3
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f1c3 031f 	rsb	r3, r3, #31
 8006c8e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006c92:	008a      	lsls	r2, r1, #2
 8006c94:	4919      	ldr	r1, [pc, #100]	; (8006cfc <vTaskSwitchContext+0x90>)
 8006c96:	588a      	ldr	r2, [r1, r2]
 8006c98:	b942      	cbnz	r2, 8006cac <vTaskSwitchContext+0x40>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	e7fe      	b.n	8006caa <vTaskSwitchContext+0x3e>
{
 8006cac:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006cae:	4813      	ldr	r0, [pc, #76]	; (8006cfc <vTaskSwitchContext+0x90>)
 8006cb0:	009a      	lsls	r2, r3, #2
 8006cb2:	18d4      	adds	r4, r2, r3
 8006cb4:	00a1      	lsls	r1, r4, #2
 8006cb6:	4401      	add	r1, r0
 8006cb8:	684c      	ldr	r4, [r1, #4]
 8006cba:	6864      	ldr	r4, [r4, #4]
 8006cbc:	604c      	str	r4, [r1, #4]
 8006cbe:	441a      	add	r2, r3
 8006cc0:	0091      	lsls	r1, r2, #2
 8006cc2:	3108      	adds	r1, #8
 8006cc4:	4408      	add	r0, r1
 8006cc6:	4284      	cmp	r4, r0
 8006cc8:	d00b      	beq.n	8006ce2 <vTaskSwitchContext+0x76>
 8006cca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006cce:	009a      	lsls	r2, r3, #2
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <vTaskSwitchContext+0x90>)
 8006cd2:	4413      	add	r3, r2
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <vTaskSwitchContext+0x94>)
 8006cda:	601a      	str	r2, [r3, #0]
}
 8006cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ce0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ce2:	6861      	ldr	r1, [r4, #4]
 8006ce4:	4805      	ldr	r0, [pc, #20]	; (8006cfc <vTaskSwitchContext+0x90>)
 8006ce6:	2214      	movs	r2, #20
 8006ce8:	fb02 0203 	mla	r2, r2, r3, r0
 8006cec:	6051      	str	r1, [r2, #4]
 8006cee:	e7ec      	b.n	8006cca <vTaskSwitchContext+0x5e>
 8006cf0:	20000420 	.word	0x20000420
 8006cf4:	200004a0 	.word	0x200004a0
 8006cf8:	20000428 	.word	0x20000428
 8006cfc:	20000388 	.word	0x20000388
 8006d00:	2000037c 	.word	0x2000037c

08006d04 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006d04:	b940      	cbnz	r0, 8006d18 <vTaskPlaceOnEventList+0x14>
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	e7fe      	b.n	8006d16 <vTaskPlaceOnEventList+0x12>
{
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d1c:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <vTaskPlaceOnEventList+0x2c>)
 8006d1e:	6819      	ldr	r1, [r3, #0]
 8006d20:	3118      	adds	r1, #24
 8006d22:	f7ff f9fa 	bl	800611a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d26:	2101      	movs	r1, #1
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f7ff fd7d 	bl	8006828 <prvAddCurrentTaskToDelayedList>
}
 8006d2e:	bd10      	pop	{r4, pc}
 8006d30:	2000037c 	.word	0x2000037c

08006d34 <xTaskRemoveFromEventList>:
{
 8006d34:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d36:	68c3      	ldr	r3, [r0, #12]
 8006d38:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006d3a:	b944      	cbnz	r4, 8006d4e <xTaskRemoveFromEventList+0x1a>
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	e7fe      	b.n	8006d4c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d4e:	f104 0518 	add.w	r5, r4, #24
 8006d52:	4628      	mov	r0, r5
 8006d54:	f7ff f9fb 	bl	800614e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d58:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <xTaskRemoveFromEventList+0x74>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	b9e3      	cbnz	r3, 8006d98 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d5e:	1d25      	adds	r5, r4, #4
 8006d60:	4628      	mov	r0, r5
 8006d62:	f7ff f9f4 	bl	800614e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d68:	2201      	movs	r2, #1
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	490f      	ldr	r1, [pc, #60]	; (8006dac <xTaskRemoveFromEventList+0x78>)
 8006d6e:	6808      	ldr	r0, [r1, #0]
 8006d70:	4302      	orrs	r2, r0
 8006d72:	600a      	str	r2, [r1, #0]
 8006d74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006d78:	009a      	lsls	r2, r3, #2
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	480c      	ldr	r0, [pc, #48]	; (8006db0 <xTaskRemoveFromEventList+0x7c>)
 8006d7e:	4410      	add	r0, r2
 8006d80:	f7ff f9bf 	bl	8006102 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <xTaskRemoveFromEventList+0x80>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d908      	bls.n	8006da2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8006d90:	2001      	movs	r0, #1
 8006d92:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <xTaskRemoveFromEventList+0x84>)
 8006d94:	6018      	str	r0, [r3, #0]
}
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d98:	4629      	mov	r1, r5
 8006d9a:	4808      	ldr	r0, [pc, #32]	; (8006dbc <xTaskRemoveFromEventList+0x88>)
 8006d9c:	f7ff f9b1 	bl	8006102 <vListInsertEnd>
 8006da0:	e7f0      	b.n	8006d84 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8006da2:	2000      	movs	r0, #0
	return xReturn;
 8006da4:	e7f7      	b.n	8006d96 <xTaskRemoveFromEventList+0x62>
 8006da6:	bf00      	nop
 8006da8:	20000420 	.word	0x20000420
 8006dac:	20000428 	.word	0x20000428
 8006db0:	20000388 	.word	0x20000388
 8006db4:	2000037c 	.word	0x2000037c
 8006db8:	200004a0 	.word	0x200004a0
 8006dbc:	2000045c 	.word	0x2000045c

08006dc0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dc0:	4b03      	ldr	r3, [pc, #12]	; (8006dd0 <vTaskInternalSetTimeOutState+0x10>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dc6:	4b03      	ldr	r3, [pc, #12]	; (8006dd4 <vTaskInternalSetTimeOutState+0x14>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6043      	str	r3, [r0, #4]
}
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	20000458 	.word	0x20000458
 8006dd4:	2000049c 	.word	0x2000049c

08006dd8 <xTaskCheckForTimeOut>:
{
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006dda:	b150      	cbz	r0, 8006df2 <xTaskCheckForTimeOut+0x1a>
 8006ddc:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006dde:	b989      	cbnz	r1, 8006e04 <xTaskCheckForTimeOut+0x2c>
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	e7fe      	b.n	8006df0 <xTaskCheckForTimeOut+0x18>
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	e7fe      	b.n	8006e02 <xTaskCheckForTimeOut+0x2a>
 8006e04:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8006e06:	f000 f8fd 	bl	8007004 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006e0a:	4b11      	ldr	r3, [pc, #68]	; (8006e50 <xTaskCheckForTimeOut+0x78>)
 8006e0c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e0e:	6868      	ldr	r0, [r5, #4]
 8006e10:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e18:	d016      	beq.n	8006e48 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e1a:	682f      	ldr	r7, [r5, #0]
 8006e1c:	4e0d      	ldr	r6, [pc, #52]	; (8006e54 <xTaskCheckForTimeOut+0x7c>)
 8006e1e:	6836      	ldr	r6, [r6, #0]
 8006e20:	42b7      	cmp	r7, r6
 8006e22:	d001      	beq.n	8006e28 <xTaskCheckForTimeOut+0x50>
 8006e24:	4288      	cmp	r0, r1
 8006e26:	d911      	bls.n	8006e4c <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d803      	bhi.n	8006e34 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006e30:	2401      	movs	r4, #1
 8006e32:	e005      	b.n	8006e40 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f7ff ffc1 	bl	8006dc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e3e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006e40:	f000 f902 	bl	8007048 <vPortExitCritical>
}
 8006e44:	4620      	mov	r0, r4
 8006e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8006e48:	2400      	movs	r4, #0
 8006e4a:	e7f9      	b.n	8006e40 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8006e4c:	2401      	movs	r4, #1
 8006e4e:	e7f7      	b.n	8006e40 <xTaskCheckForTimeOut+0x68>
 8006e50:	2000049c 	.word	0x2000049c
 8006e54:	20000458 	.word	0x20000458

08006e58 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006e58:	4b01      	ldr	r3, [pc, #4]	; (8006e60 <vTaskMissedYield+0x8>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]
}
 8006e5e:	4770      	bx	lr
 8006e60:	200004a0 	.word	0x200004a0

08006e64 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006e64:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <xTaskGetSchedulerState+0x18>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	b133      	cbz	r3, 8006e78 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <xTaskGetSchedulerState+0x1c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	b10b      	cbz	r3, 8006e74 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e70:	2000      	movs	r0, #0
	}
 8006e72:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8006e74:	2002      	movs	r0, #2
 8006e76:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e78:	2001      	movs	r0, #1
 8006e7a:	4770      	bx	lr
 8006e7c:	20000470 	.word	0x20000470
 8006e80:	20000420 	.word	0x20000420

08006e84 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d049      	beq.n	8006f1c <xTaskPriorityDisinherit+0x98>
	{
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006e8c:	4a26      	ldr	r2, [pc, #152]	; (8006f28 <xTaskPriorityDisinherit+0xa4>)
 8006e8e:	6812      	ldr	r2, [r2, #0]
 8006e90:	4282      	cmp	r2, r0
 8006e92:	d008      	beq.n	8006ea6 <xTaskPriorityDisinherit+0x22>
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	e7fe      	b.n	8006ea4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ea6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006ea8:	b942      	cbnz	r2, 8006ebc <xTaskPriorityDisinherit+0x38>
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	e7fe      	b.n	8006eba <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ec0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006ec2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006ec4:	4288      	cmp	r0, r1
 8006ec6:	d02b      	beq.n	8006f20 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ec8:	bb62      	cbnz	r2, 8006f24 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eca:	1d25      	adds	r5, r4, #4
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f7ff f93e 	bl	800614e <uxListRemove>
 8006ed2:	b970      	cbnz	r0, 8006ef2 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ed4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ed6:	2314      	movs	r3, #20
 8006ed8:	fb03 f302 	mul.w	r3, r3, r2
 8006edc:	4913      	ldr	r1, [pc, #76]	; (8006f2c <xTaskPriorityDisinherit+0xa8>)
 8006ede:	58cb      	ldr	r3, [r1, r3]
 8006ee0:	b93b      	cbnz	r3, 8006ef2 <xTaskPriorityDisinherit+0x6e>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	fa03 f202 	lsl.w	r2, r3, r2
 8006ee8:	4911      	ldr	r1, [pc, #68]	; (8006f30 <xTaskPriorityDisinherit+0xac>)
 8006eea:	680b      	ldr	r3, [r1, #0]
 8006eec:	ea23 0302 	bic.w	r3, r3, r2
 8006ef0:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ef2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef6:	f1c3 0207 	rsb	r2, r3, #7
 8006efa:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006efc:	2401      	movs	r4, #1
 8006efe:	fa04 f203 	lsl.w	r2, r4, r3
 8006f02:	490b      	ldr	r1, [pc, #44]	; (8006f30 <xTaskPriorityDisinherit+0xac>)
 8006f04:	6808      	ldr	r0, [r1, #0]
 8006f06:	4302      	orrs	r2, r0
 8006f08:	600a      	str	r2, [r1, #0]
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	4a07      	ldr	r2, [pc, #28]	; (8006f2c <xTaskPriorityDisinherit+0xa8>)
 8006f0e:	2014      	movs	r0, #20
 8006f10:	fb00 2003 	mla	r0, r0, r3, r2
 8006f14:	f7ff f8f5 	bl	8006102 <vListInsertEnd>
					xReturn = pdTRUE;
 8006f18:	4620      	mov	r0, r4
	}
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8006f1c:	2000      	movs	r0, #0
	}
 8006f1e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006f20:	2000      	movs	r0, #0
 8006f22:	e7fa      	b.n	8006f1a <xTaskPriorityDisinherit+0x96>
 8006f24:	2000      	movs	r0, #0
		return xReturn;
 8006f26:	e7f8      	b.n	8006f1a <xTaskPriorityDisinherit+0x96>
 8006f28:	2000037c 	.word	0x2000037c
 8006f2c:	20000388 	.word	0x20000388
 8006f30:	20000428 	.word	0x20000428

08006f34 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f34:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <prvTaskExitError+0x3c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f42:	d008      	beq.n	8006f56 <prvTaskExitError+0x22>
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	e7fe      	b.n	8006f54 <prvTaskExitError+0x20>
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0fc      	beq.n	8006f66 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f6c:	b002      	add	sp, #8
 8006f6e:	4770      	bx	lr
 8006f70:	20000060 	.word	0x20000060

08006f74 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f74:	4808      	ldr	r0, [pc, #32]	; (8006f98 <prvPortStartFirstTask+0x24>)
 8006f76:	6800      	ldr	r0, [r0, #0]
 8006f78:	6800      	ldr	r0, [r0, #0]
 8006f7a:	f380 8808 	msr	MSP, r0
 8006f7e:	f04f 0000 	mov.w	r0, #0
 8006f82:	f380 8814 	msr	CONTROL, r0
 8006f86:	b662      	cpsie	i
 8006f88:	b661      	cpsie	f
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	df00      	svc	0
 8006f94:	bf00      	nop
 8006f96:	0000      	.short	0x0000
 8006f98:	e000ed08 	.word	0xe000ed08

08006f9c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f9c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fac <vPortEnableVFP+0x10>
 8006fa0:	6801      	ldr	r1, [r0, #0]
 8006fa2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fa6:	6001      	str	r1, [r0, #0]
 8006fa8:	4770      	bx	lr
 8006faa:	0000      	.short	0x0000
 8006fac:	e000ed88 	.word	0xe000ed88

08006fb0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fb4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fb8:	f021 0101 	bic.w	r1, r1, #1
 8006fbc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <pxPortInitialiseStack+0x28>)
 8006fc2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fc6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fca:	f06f 0302 	mvn.w	r3, #2
 8006fce:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006fd2:	3844      	subs	r0, #68	; 0x44
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	08006f35 	.word	0x08006f35
 8006fdc:	00000000 	.word	0x00000000

08006fe0 <SVC_Handler>:
	__asm volatile (
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <pxCurrentTCBConst2>)
 8006fe2:	6819      	ldr	r1, [r3, #0]
 8006fe4:	6808      	ldr	r0, [r1, #0]
 8006fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fea:	f380 8809 	msr	PSP, r0
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f04f 0000 	mov.w	r0, #0
 8006ff6:	f380 8811 	msr	BASEPRI, r0
 8006ffa:	4770      	bx	lr
 8006ffc:	f3af 8000 	nop.w

08007000 <pxCurrentTCBConst2>:
 8007000:	2000037c 	.word	0x2000037c

08007004 <vPortEnterCritical>:
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007014:	4a0a      	ldr	r2, [pc, #40]	; (8007040 <vPortEnterCritical+0x3c>)
 8007016:	6813      	ldr	r3, [r2, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800701c:	2b01      	cmp	r3, #1
 800701e:	d000      	beq.n	8007022 <vPortEnterCritical+0x1e>
}
 8007020:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007022:	4b08      	ldr	r3, [pc, #32]	; (8007044 <vPortEnterCritical+0x40>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f013 0fff 	tst.w	r3, #255	; 0xff
 800702a:	d0f9      	beq.n	8007020 <vPortEnterCritical+0x1c>
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	e7fe      	b.n	800703c <vPortEnterCritical+0x38>
 800703e:	bf00      	nop
 8007040:	20000060 	.word	0x20000060
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007048:	4b09      	ldr	r3, [pc, #36]	; (8007070 <vPortExitCritical+0x28>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	b943      	cbnz	r3, 8007060 <vPortExitCritical+0x18>
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	e7fe      	b.n	800705e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007060:	3b01      	subs	r3, #1
 8007062:	4a03      	ldr	r2, [pc, #12]	; (8007070 <vPortExitCritical+0x28>)
 8007064:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007066:	b90b      	cbnz	r3, 800706c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007068:	f383 8811 	msr	BASEPRI, r3
}
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20000060 	.word	0x20000060
	...

08007080 <PendSV_Handler>:
	__asm volatile
 8007080:	f3ef 8009 	mrs	r0, PSP
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <pxCurrentTCBConst>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	f01e 0f10 	tst.w	lr, #16
 8007090:	bf08      	it	eq
 8007092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709a:	6010      	str	r0, [r2, #0]
 800709c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070a4:	f380 8811 	msr	BASEPRI, r0
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f7ff fddc 	bl	8006c6c <vTaskSwitchContext>
 80070b4:	f04f 0000 	mov.w	r0, #0
 80070b8:	f380 8811 	msr	BASEPRI, r0
 80070bc:	bc09      	pop	{r0, r3}
 80070be:	6819      	ldr	r1, [r3, #0]
 80070c0:	6808      	ldr	r0, [r1, #0]
 80070c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c6:	f01e 0f10 	tst.w	lr, #16
 80070ca:	bf08      	it	eq
 80070cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070d0:	f380 8809 	msr	PSP, r0
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	f3af 8000 	nop.w

080070e0 <pxCurrentTCBConst>:
 80070e0:	2000037c 	.word	0x2000037c

080070e4 <SysTick_Handler>:
{
 80070e4:	b508      	push	{r3, lr}
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80070f6:	f7ff fc8d 	bl	8006a14 <xTaskIncrementTick>
 80070fa:	b118      	cbz	r0, 8007104 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <SysTick_Handler+0x28>)
 80070fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007102:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007104:	2300      	movs	r3, #0
 8007106:	f383 8811 	msr	BASEPRI, r3
}
 800710a:	bd08      	pop	{r3, pc}
 800710c:	e000ed04 	.word	0xe000ed04

08007110 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007110:	4a08      	ldr	r2, [pc, #32]	; (8007134 <vPortSetupTimerInterrupt+0x24>)
 8007112:	2300      	movs	r3, #0
 8007114:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007116:	4908      	ldr	r1, [pc, #32]	; (8007138 <vPortSetupTimerInterrupt+0x28>)
 8007118:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800711a:	4b08      	ldr	r3, [pc, #32]	; (800713c <vPortSetupTimerInterrupt+0x2c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4908      	ldr	r1, [pc, #32]	; (8007140 <vPortSetupTimerInterrupt+0x30>)
 8007120:	fba1 1303 	umull	r1, r3, r1, r3
 8007124:	099b      	lsrs	r3, r3, #6
 8007126:	3b01      	subs	r3, #1
 8007128:	4906      	ldr	r1, [pc, #24]	; (8007144 <vPortSetupTimerInterrupt+0x34>)
 800712a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800712c:	2307      	movs	r3, #7
 800712e:	6013      	str	r3, [r2, #0]
}
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	e000e010 	.word	0xe000e010
 8007138:	e000e018 	.word	0xe000e018
 800713c:	20000090 	.word	0x20000090
 8007140:	10624dd3 	.word	0x10624dd3
 8007144:	e000e014 	.word	0xe000e014

08007148 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007148:	4b3a      	ldr	r3, [pc, #232]	; (8007234 <xPortStartScheduler+0xec>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	4b3a      	ldr	r3, [pc, #232]	; (8007238 <xPortStartScheduler+0xf0>)
 800714e:	429a      	cmp	r2, r3
 8007150:	d00d      	beq.n	800716e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007152:	4b38      	ldr	r3, [pc, #224]	; (8007234 <xPortStartScheduler+0xec>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4b39      	ldr	r3, [pc, #228]	; (800723c <xPortStartScheduler+0xf4>)
 8007158:	429a      	cmp	r2, r3
 800715a:	d111      	bne.n	8007180 <xPortStartScheduler+0x38>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	e7fe      	b.n	800716c <xPortStartScheduler+0x24>
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	e7fe      	b.n	800717e <xPortStartScheduler+0x36>
{
 8007180:	b510      	push	{r4, lr}
 8007182:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007184:	4b2e      	ldr	r3, [pc, #184]	; (8007240 <xPortStartScheduler+0xf8>)
 8007186:	781a      	ldrb	r2, [r3, #0]
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800718c:	22ff      	movs	r2, #255	; 0xff
 800718e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007198:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800719c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071a0:	4a28      	ldr	r2, [pc, #160]	; (8007244 <xPortStartScheduler+0xfc>)
 80071a2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071a4:	4b28      	ldr	r3, [pc, #160]	; (8007248 <xPortStartScheduler+0x100>)
 80071a6:	2207      	movs	r2, #7
 80071a8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071aa:	e009      	b.n	80071c0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 80071ac:	4a26      	ldr	r2, [pc, #152]	; (8007248 <xPortStartScheduler+0x100>)
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071c8:	d1f0      	bne.n	80071ac <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071ca:	4b1f      	ldr	r3, [pc, #124]	; (8007248 <xPortStartScheduler+0x100>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d008      	beq.n	80071e4 <xPortStartScheduler+0x9c>
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	e7fe      	b.n	80071e2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071e4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071ea:	4a17      	ldr	r2, [pc, #92]	; (8007248 <xPortStartScheduler+0x100>)
 80071ec:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071ee:	9b01      	ldr	r3, [sp, #4]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	4a13      	ldr	r2, [pc, #76]	; (8007240 <xPortStartScheduler+0xf8>)
 80071f4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071f6:	4b15      	ldr	r3, [pc, #84]	; (800724c <xPortStartScheduler+0x104>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80071fe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007206:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007208:	f7ff ff82 	bl	8007110 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800720c:	2400      	movs	r4, #0
 800720e:	4b10      	ldr	r3, [pc, #64]	; (8007250 <xPortStartScheduler+0x108>)
 8007210:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8007212:	f7ff fec3 	bl	8006f9c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007216:	4a0f      	ldr	r2, [pc, #60]	; (8007254 <xPortStartScheduler+0x10c>)
 8007218:	6813      	ldr	r3, [r2, #0]
 800721a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800721e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007220:	f7ff fea8 	bl	8006f74 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007224:	f7ff fd22 	bl	8006c6c <vTaskSwitchContext>
	prvTaskExitError();
 8007228:	f7ff fe84 	bl	8006f34 <prvTaskExitError>
}
 800722c:	4620      	mov	r0, r4
 800722e:	b002      	add	sp, #8
 8007230:	bd10      	pop	{r4, pc}
 8007232:	bf00      	nop
 8007234:	e000ed00 	.word	0xe000ed00
 8007238:	410fc271 	.word	0x410fc271
 800723c:	410fc270 	.word	0x410fc270
 8007240:	e000e400 	.word	0xe000e400
 8007244:	200004a4 	.word	0x200004a4
 8007248:	200004a8 	.word	0x200004a8
 800724c:	e000ed20 	.word	0xe000ed20
 8007250:	20000060 	.word	0x20000060
 8007254:	e000ef34 	.word	0xe000ef34

08007258 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007258:	4a12      	ldr	r2, [pc, #72]	; (80072a4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800725a:	f012 0f07 	tst.w	r2, #7
 800725e:	d01e      	beq.n	800729e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007260:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007262:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007266:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800726a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800726c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800726e:	480e      	ldr	r0, [pc, #56]	; (80072a8 <prvHeapInit+0x50>)
 8007270:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007272:	2100      	movs	r1, #0
 8007274:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007276:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007278:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800727a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800727e:	480b      	ldr	r0, [pc, #44]	; (80072ac <prvHeapInit+0x54>)
 8007280:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007282:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007284:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007286:	1a99      	subs	r1, r3, r2
 8007288:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800728a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800728c:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <prvHeapInit+0x58>)
 800728e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007290:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <prvHeapInit+0x5c>)
 8007292:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <prvHeapInit+0x60>)
 8007296:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800729a:	601a      	str	r2, [r3, #0]
}
 800729c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800729e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072a2:	e7e4      	b.n	800726e <prvHeapInit+0x16>
 80072a4:	200004b0 	.word	0x200004b0
 80072a8:	200040bc 	.word	0x200040bc
 80072ac:	200004ac 	.word	0x200004ac
 80072b0:	200040b8 	.word	0x200040b8
 80072b4:	200040b4 	.word	0x200040b4
 80072b8:	200040b0 	.word	0x200040b0

080072bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072bc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <prvInsertBlockIntoFreeList+0x50>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4282      	cmp	r2, r0
 80072c4:	d31b      	bcc.n	80072fe <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072c6:	6859      	ldr	r1, [r3, #4]
 80072c8:	185c      	adds	r4, r3, r1
 80072ca:	4284      	cmp	r4, r0
 80072cc:	d103      	bne.n	80072d6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072ce:	6840      	ldr	r0, [r0, #4]
 80072d0:	4401      	add	r1, r0
 80072d2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072d4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072d6:	6841      	ldr	r1, [r0, #4]
 80072d8:	1844      	adds	r4, r0, r1
 80072da:	42a2      	cmp	r2, r4
 80072dc:	d113      	bne.n	8007306 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072de:	4c0c      	ldr	r4, [pc, #48]	; (8007310 <prvInsertBlockIntoFreeList+0x54>)
 80072e0:	6824      	ldr	r4, [r4, #0]
 80072e2:	42a2      	cmp	r2, r4
 80072e4:	d00d      	beq.n	8007302 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072e6:	6852      	ldr	r2, [r2, #4]
 80072e8:	4411      	add	r1, r2
 80072ea:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	6812      	ldr	r2, [r2, #0]
 80072f0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072f2:	4298      	cmp	r0, r3
 80072f4:	d000      	beq.n	80072f8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072f6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072fc:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072fe:	4613      	mov	r3, r2
 8007300:	e7de      	b.n	80072c0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007302:	6004      	str	r4, [r0, #0]
 8007304:	e7f5      	b.n	80072f2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007306:	6002      	str	r2, [r0, #0]
 8007308:	e7f3      	b.n	80072f2 <prvInsertBlockIntoFreeList+0x36>
 800730a:	bf00      	nop
 800730c:	200040bc 	.word	0x200040bc
 8007310:	200004ac 	.word	0x200004ac

08007314 <pvPortMalloc>:
{
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007318:	f7ff fb74 	bl	8006a04 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800731c:	4b3a      	ldr	r3, [pc, #232]	; (8007408 <pvPortMalloc+0xf4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	b1bb      	cbz	r3, 8007352 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007322:	4b3a      	ldr	r3, [pc, #232]	; (800740c <pvPortMalloc+0xf8>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	421c      	tst	r4, r3
 8007328:	d163      	bne.n	80073f2 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800732a:	b1ac      	cbz	r4, 8007358 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800732c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800732e:	f014 0f07 	tst.w	r4, #7
 8007332:	d011      	beq.n	8007358 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007334:	f024 0407 	bic.w	r4, r4, #7
 8007338:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800733a:	f004 0307 	and.w	r3, r4, #7
 800733e:	b15b      	cbz	r3, 8007358 <pvPortMalloc+0x44>
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	e7fe      	b.n	8007350 <pvPortMalloc+0x3c>
			prvHeapInit();
 8007352:	f7ff ff81 	bl	8007258 <prvHeapInit>
 8007356:	e7e4      	b.n	8007322 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007358:	2c00      	cmp	r4, #0
 800735a:	d04c      	beq.n	80073f6 <pvPortMalloc+0xe2>
 800735c:	4b2c      	ldr	r3, [pc, #176]	; (8007410 <pvPortMalloc+0xfc>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	42a3      	cmp	r3, r4
 8007362:	d34a      	bcc.n	80073fa <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8007364:	4b2b      	ldr	r3, [pc, #172]	; (8007414 <pvPortMalloc+0x100>)
 8007366:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007368:	e001      	b.n	800736e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800736a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800736c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800736e:	686a      	ldr	r2, [r5, #4]
 8007370:	42a2      	cmp	r2, r4
 8007372:	d202      	bcs.n	800737a <pvPortMalloc+0x66>
 8007374:	682a      	ldr	r2, [r5, #0]
 8007376:	2a00      	cmp	r2, #0
 8007378:	d1f7      	bne.n	800736a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800737a:	4a23      	ldr	r2, [pc, #140]	; (8007408 <pvPortMalloc+0xf4>)
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	42aa      	cmp	r2, r5
 8007380:	d03d      	beq.n	80073fe <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007382:	681e      	ldr	r6, [r3, #0]
 8007384:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007386:	682a      	ldr	r2, [r5, #0]
 8007388:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800738a:	686b      	ldr	r3, [r5, #4]
 800738c:	1b1b      	subs	r3, r3, r4
 800738e:	2b10      	cmp	r3, #16
 8007390:	d910      	bls.n	80073b4 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007392:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007394:	f010 0f07 	tst.w	r0, #7
 8007398:	d008      	beq.n	80073ac <pvPortMalloc+0x98>
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	e7fe      	b.n	80073aa <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073ac:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073ae:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073b0:	f7ff ff84 	bl	80072bc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073b4:	686a      	ldr	r2, [r5, #4]
 80073b6:	4916      	ldr	r1, [pc, #88]	; (8007410 <pvPortMalloc+0xfc>)
 80073b8:	680b      	ldr	r3, [r1, #0]
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073be:	4916      	ldr	r1, [pc, #88]	; (8007418 <pvPortMalloc+0x104>)
 80073c0:	6809      	ldr	r1, [r1, #0]
 80073c2:	428b      	cmp	r3, r1
 80073c4:	d201      	bcs.n	80073ca <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073c6:	4914      	ldr	r1, [pc, #80]	; (8007418 <pvPortMalloc+0x104>)
 80073c8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073ca:	4b10      	ldr	r3, [pc, #64]	; (800740c <pvPortMalloc+0xf8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80073d6:	f7ff fba9 	bl	8006b2c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073da:	f016 0f07 	tst.w	r6, #7
 80073de:	d010      	beq.n	8007402 <pvPortMalloc+0xee>
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	e7fe      	b.n	80073f0 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 80073f2:	2600      	movs	r6, #0
 80073f4:	e7ef      	b.n	80073d6 <pvPortMalloc+0xc2>
 80073f6:	2600      	movs	r6, #0
 80073f8:	e7ed      	b.n	80073d6 <pvPortMalloc+0xc2>
 80073fa:	2600      	movs	r6, #0
 80073fc:	e7eb      	b.n	80073d6 <pvPortMalloc+0xc2>
 80073fe:	2600      	movs	r6, #0
 8007400:	e7e9      	b.n	80073d6 <pvPortMalloc+0xc2>
}
 8007402:	4630      	mov	r0, r6
 8007404:	bd70      	pop	{r4, r5, r6, pc}
 8007406:	bf00      	nop
 8007408:	200004ac 	.word	0x200004ac
 800740c:	200040b0 	.word	0x200040b0
 8007410:	200040b4 	.word	0x200040b4
 8007414:	200040bc 	.word	0x200040bc
 8007418:	200040b8 	.word	0x200040b8

0800741c <vPortFree>:
	if( pv != NULL )
 800741c:	b380      	cbz	r0, 8007480 <vPortFree+0x64>
{
 800741e:	b538      	push	{r3, r4, r5, lr}
 8007420:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8007422:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007426:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800742a:	4916      	ldr	r1, [pc, #88]	; (8007484 <vPortFree+0x68>)
 800742c:	6809      	ldr	r1, [r1, #0]
 800742e:	420a      	tst	r2, r1
 8007430:	d108      	bne.n	8007444 <vPortFree+0x28>
 8007432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	e7fe      	b.n	8007442 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007444:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8007448:	b140      	cbz	r0, 800745c <vPortFree+0x40>
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	e7fe      	b.n	800745a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800745c:	ea22 0201 	bic.w	r2, r2, r1
 8007460:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8007464:	f7ff face 	bl	8006a04 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007468:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800746c:	4a06      	ldr	r2, [pc, #24]	; (8007488 <vPortFree+0x6c>)
 800746e:	6813      	ldr	r3, [r2, #0]
 8007470:	440b      	add	r3, r1
 8007472:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007474:	4628      	mov	r0, r5
 8007476:	f7ff ff21 	bl	80072bc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800747a:	f7ff fb57 	bl	8006b2c <xTaskResumeAll>
}
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	200040b0 	.word	0x200040b0
 8007488:	200040b4 	.word	0x200040b4

0800748c <RF_init>:
//float pitch_i_gain = 0;   //2.0
//float pitch_d_gain = 0;  //0.42
/////////////////////////////////////////////////////////////////
////////////////////// Init NRF24L01 Module /////////////////////
/////////////////////////////////////////////////////////////////
void RF_init() {
 800748c:	b510      	push	{r4, lr}
 800748e:	b096      	sub	sp, #88	; 0x58

#if NRF24
	DWT_Init(); //Enable some of the MCUs special registers so we can get microsecond (us) delays
 8007490:	f7fb fd56 	bl	8002f40 <DWT_Init>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 8007494:	4c10      	ldr	r4, [pc, #64]	; (80074d8 <RF_init+0x4c>)
 8007496:	2254      	movs	r2, #84	; 0x54
 8007498:	1d21      	adds	r1, r4, #4
 800749a:	4668      	mov	r0, sp
 800749c:	f002 fd17 	bl	8009ece <memcpy>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80074aa:	480c      	ldr	r0, [pc, #48]	; (80074dc <RF_init+0x50>)
 80074ac:	f7fb f808 	bl	80024c0 <NRF24_begin>
	//nrf24_DebugUART_Init(huart6);
	NRF24_enableAckPayload();
 80074b0:	f7fa ffe2 	bl	8002478 <NRF24_enableAckPayload>
	NRF24_setAutoAck(true);
 80074b4:	2001      	movs	r0, #1
 80074b6:	f7fa ff1f 	bl	80022f8 <NRF24_setAutoAck>
	NRF24_openReadingPipe(1, TxpipeAddrs);
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <RF_init+0x54>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	2001      	movs	r0, #1
 80074c2:	f7fa fe7f 	bl	80021c4 <NRF24_openReadingPipe>
	NRF24_startListening();
 80074c6:	f7fa fe5b 	bl	8002180 <NRF24_startListening>

	printRadioSettings();
 80074ca:	f7fb f8cf 	bl	800266c <printRadioSettings>

	Rx_Data.kill_rx = 0;
 80074ce:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <RF_init+0x58>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	725a      	strb	r2, [r3, #9]
#endif

}
 80074d4:	b016      	add	sp, #88	; 0x58
 80074d6:	bd10      	pop	{r4, pc}
 80074d8:	20004968 	.word	0x20004968
 80074dc:	40020400 	.word	0x40020400
 80074e0:	20000068 	.word	0x20000068
 80074e4:	200044c4 	.word	0x200044c4

080074e8 <packAckPayData_0>:

}

//	Pack acknowledge payload data 0 - sent every control loop, which will be sent back to controller once drone has successfully
//	received a payload from it
void packAckPayData_0(float roll, float pitch, float yaw) {
 80074e8:	b510      	push	{r4, lr}
 80074ea:	ed2d 8b04 	vpush	{d8-d9}
 80074ee:	eeb0 9a60 	vmov.f32	s18, s1
 80074f2:	eef0 8a41 	vmov.f32	s17, s2

	//ID for packet 0
	AckPayload_0[0] = 0x03;
 80074f6:	4c21      	ldr	r4, [pc, #132]	; (800757c <packAckPayData_0+0x94>)
 80074f8:	2303      	movs	r3, #3
 80074fa:	7023      	strb	r3, [r4, #0]

	//Next 2 bytes = Battery level
	AckPayload_0[1] = batteryLevel;
 80074fc:	4b20      	ldr	r3, [pc, #128]	; (8007580 <packAckPayData_0+0x98>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	7063      	strb	r3, [r4, #1]
	AckPayload_0[2] = batteryLevel >> 8;
 8007502:	0a1b      	lsrs	r3, r3, #8
 8007504:	70a3      	strb	r3, [r4, #2]

	//Next 4 bytes = IMU Roll
	int16_t roll_tx = round(roll * 100);
 8007506:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8007584 <packAckPayData_0+0x9c>
 800750a:	ee60 7a08 	vmul.f32	s15, s0, s16
 800750e:	ee17 0a90 	vmov	r0, s15
 8007512:	f7f9 f821 	bl	8000558 <__aeabi_f2d>
 8007516:	ec41 0b10 	vmov	d0, r0, r1
 800751a:	f001 f8d3 	bl	80086c4 <round>
 800751e:	ec51 0b10 	vmov	r0, r1, d0
 8007522:	f7f9 fb21 	bl	8000b68 <__aeabi_d2iz>
 8007526:	b200      	sxth	r0, r0
	AckPayload_0[3] = roll_tx;
 8007528:	70e0      	strb	r0, [r4, #3]
	AckPayload_0[4] = roll_tx >> 8;
 800752a:	1200      	asrs	r0, r0, #8
 800752c:	7120      	strb	r0, [r4, #4]

	//Next  4 bytes = IMU Pitch
	int16_t pitch_tx = round(pitch * 100);
 800752e:	ee69 7a08 	vmul.f32	s15, s18, s16
 8007532:	ee17 0a90 	vmov	r0, s15
 8007536:	f7f9 f80f 	bl	8000558 <__aeabi_f2d>
 800753a:	ec41 0b10 	vmov	d0, r0, r1
 800753e:	f001 f8c1 	bl	80086c4 <round>
 8007542:	ec51 0b10 	vmov	r0, r1, d0
 8007546:	f7f9 fb0f 	bl	8000b68 <__aeabi_d2iz>
 800754a:	b200      	sxth	r0, r0
	AckPayload_0[5] = pitch_tx;
 800754c:	7160      	strb	r0, [r4, #5]
	AckPayload_0[6] = pitch_tx >> 8;
 800754e:	1200      	asrs	r0, r0, #8
 8007550:	71a0      	strb	r0, [r4, #6]

	//Next  4 bytes = IMU Yaw
	int16_t yaw_tx = round(yaw * 100);
 8007552:	ee68 7a88 	vmul.f32	s15, s17, s16
 8007556:	ee17 0a90 	vmov	r0, s15
 800755a:	f7f8 fffd 	bl	8000558 <__aeabi_f2d>
 800755e:	ec41 0b10 	vmov	d0, r0, r1
 8007562:	f001 f8af 	bl	80086c4 <round>
 8007566:	ec51 0b10 	vmov	r0, r1, d0
 800756a:	f7f9 fafd 	bl	8000b68 <__aeabi_d2iz>
 800756e:	b200      	sxth	r0, r0
	AckPayload_0[7] = yaw_tx;
 8007570:	71e0      	strb	r0, [r4, #7]
	AckPayload_0[8] = yaw_tx >> 8;
 8007572:	1200      	asrs	r0, r0, #8
 8007574:	7220      	strb	r0, [r4, #8]

}
 8007576:	ecbd 8b04 	vpop	{d8-d9}
 800757a:	bd10      	pop	{r4, pc}
 800757c:	200044a4 	.word	0x200044a4
 8007580:	200040c4 	.word	0x200040c4
 8007584:	42c80000 	.word	0x42c80000

08007588 <packAckPayData_1>:

//	Pack acknowledge payload data 1 - sent every second, contains GPS data
void packAckPayData_1() {
 8007588:	b508      	push	{r3, lr}

	//ID for packet 1
	AckPayload_1[0] = 0xFF;
 800758a:	4803      	ldr	r0, [pc, #12]	; (8007598 <packAckPayData_1+0x10>)
 800758c:	23ff      	movs	r3, #255	; 0xff
 800758e:	7003      	strb	r3, [r0, #0]

	getGPSData(AckPayload_1);
 8007590:	f000 fb32 	bl	8007bf8 <getGPSData>

}
 8007594:	bd08      	pop	{r3, pc}
 8007596:	bf00      	nop
 8007598:	20004484 	.word	0x20004484

0800759c <kill>:


/*
 *  Kill function disables PWM outputs, turning off motors
 */
void kill() {
 800759c:	b510      	push	{r4, lr}
	htim4.Instance->CCR1 = 1250;
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <kill+0x34>)
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80075a6:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = 1250;
 80075a8:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 1250;
 80075aa:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 1250;
 80075ac:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80075ae:	2100      	movs	r1, #0
 80075b0:	4620      	mov	r0, r4
 80075b2:	f7fe f94b 	bl	800584c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80075b6:	2104      	movs	r1, #4
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7fe f947 	bl	800584c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80075be:	2108      	movs	r1, #8
 80075c0:	4620      	mov	r0, r4
 80075c2:	f7fe f943 	bl	800584c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 80075c6:	210c      	movs	r1, #12
 80075c8:	4620      	mov	r0, r4
 80075ca:	f7fe f93f 	bl	800584c <HAL_TIM_PWM_Stop>
}
 80075ce:	bd10      	pop	{r4, pc}
 80075d0:	20004a00 	.word	0x20004a00

080075d4 <unpackRxData>:
void unpackRxData() {
 80075d4:	b508      	push	{r3, lr}
	Rx_Data.L_Joystick_XPos = (RxData[0] & 0xFF) | (RxData[1] << 8);
 80075d6:	4b12      	ldr	r3, [pc, #72]	; (8007620 <unpackRxData+0x4c>)
 80075d8:	7819      	ldrb	r1, [r3, #0]
 80075da:	785a      	ldrb	r2, [r3, #1]
 80075dc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80075e0:	4a10      	ldr	r2, [pc, #64]	; (8007624 <unpackRxData+0x50>)
 80075e2:	8011      	strh	r1, [r2, #0]
	Rx_Data.L_Joystick_YPos = (RxData[2] & 0xFF) | (RxData[3] << 8);
 80075e4:	7899      	ldrb	r1, [r3, #2]
 80075e6:	78d8      	ldrb	r0, [r3, #3]
 80075e8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80075ec:	8051      	strh	r1, [r2, #2]
	Rx_Data.R_Joystick_XPos = (RxData[4] & 0xFF) | (RxData[5] << 8);
 80075ee:	7919      	ldrb	r1, [r3, #4]
 80075f0:	7958      	ldrb	r0, [r3, #5]
 80075f2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80075f6:	8091      	strh	r1, [r2, #4]
	Rx_Data.R_Joystick_YPos = (RxData[6] & 0xFF) | (RxData[7] << 8);
 80075f8:	7999      	ldrb	r1, [r3, #6]
 80075fa:	79d8      	ldrb	r0, [r3, #7]
 80075fc:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007600:	80d1      	strh	r1, [r2, #6]
	Rx_Data.airmode = (RxData[8] >> 0) & 1;
 8007602:	7a1b      	ldrb	r3, [r3, #8]
 8007604:	f003 0101 	and.w	r1, r3, #1
 8007608:	7211      	strb	r1, [r2, #8]
	Rx_Data.kill_rx = (RxData[8] >> 1) & 1;
 800760a:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800760e:	7251      	strb	r1, [r2, #9]
	if (Rx_Data.kill_rx && RxData[8] <= 0x03) {
 8007610:	b109      	cbz	r1, 8007616 <unpackRxData+0x42>
 8007612:	2b03      	cmp	r3, #3
 8007614:	d900      	bls.n	8007618 <unpackRxData+0x44>
}
 8007616:	bd08      	pop	{r3, pc}
		kill();
 8007618:	f7ff ffc0 	bl	800759c <kill>
}
 800761c:	e7fb      	b.n	8007616 <unpackRxData+0x42>
 800761e:	bf00      	nop
 8007620:	200044d0 	.word	0x200044d0
 8007624:	200044c4 	.word	0x200044c4

08007628 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007628:	ee30 0a60 	vsub.f32	s0, s0, s1
 800762c:	ee32 2a61 	vsub.f32	s4, s4, s3
 8007630:	ee20 2a02 	vmul.f32	s4, s0, s4
 8007634:	ee31 1a60 	vsub.f32	s2, s2, s1
 8007638:	ee82 0a01 	vdiv.f32	s0, s4, s2
}
 800763c:	ee30 0a21 	vadd.f32	s0, s0, s3
 8007640:	4770      	bx	lr
 8007642:	0000      	movs	r0, r0
 8007644:	0000      	movs	r0, r0
	...

08007648 <RF_TxRx>:
uint16_t RF_TxRx(uint16_t *throttle, int *p_setpoint, int *r_setpoint, float *y_setpoint, float roll, float pitch, float yaw) {
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	ed2d 8b02 	vpush	{d8}
 800764e:	4606      	mov	r6, r0
 8007650:	460c      	mov	r4, r1
 8007652:	4615      	mov	r5, r2
 8007654:	461f      	mov	r7, r3
	packAckPayData_0(roll, pitch, yaw);
 8007656:	f7ff ff47 	bl	80074e8 <packAckPayData_0>
	if (loop_counter == CRTL_LOOP_FREQ - 1) {
 800765a:	4b7d      	ldr	r3, [pc, #500]	; (8007850 <RF_TxRx+0x208>)
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007662:	4293      	cmp	r3, r2
 8007664:	d011      	beq.n	800768a <RF_TxRx+0x42>
		loop_counter++;
 8007666:	3301      	adds	r3, #1
 8007668:	4a79      	ldr	r2, [pc, #484]	; (8007850 <RF_TxRx+0x208>)
 800766a:	8013      	strh	r3, [r2, #0]
	if (NRF24_available()) {
 800766c:	f7fa fec8 	bl	8002400 <NRF24_available>
 8007670:	b988      	cbnz	r0, 8007696 <RF_TxRx+0x4e>
		packetsLostCtr++;
 8007672:	4a78      	ldr	r2, [pc, #480]	; (8007854 <RF_TxRx+0x20c>)
 8007674:	6813      	ldr	r3, [r2, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	6013      	str	r3, [r2, #0]
		if(packetsLostCtr > 10){
 800767a:	2b0a      	cmp	r3, #10
 800767c:	f200 80dd 	bhi.w	800783a <RF_TxRx+0x1f2>
		return packetsLostCtr;
 8007680:	4b74      	ldr	r3, [pc, #464]	; (8007854 <RF_TxRx+0x20c>)
 8007682:	8818      	ldrh	r0, [r3, #0]
}
 8007684:	ecbd 8b02 	vpop	{d8}
 8007688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		packAckPayData_1();
 800768a:	f7ff ff7d 	bl	8007588 <packAckPayData_1>
		loop_counter = 0;
 800768e:	4b70      	ldr	r3, [pc, #448]	; (8007850 <RF_TxRx+0x208>)
 8007690:	2200      	movs	r2, #0
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	e7ea      	b.n	800766c <RF_TxRx+0x24>
		NRF24_read(RxData, 32);
 8007696:	2120      	movs	r1, #32
 8007698:	486f      	ldr	r0, [pc, #444]	; (8007858 <RF_TxRx+0x210>)
 800769a:	f7fa fe13 	bl	80022c4 <NRF24_read>
		packetsLostCtr = 0;
 800769e:	4b6d      	ldr	r3, [pc, #436]	; (8007854 <RF_TxRx+0x20c>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
		if (loop_counter == CRTL_LOOP_FREQ - 1) {
 80076a4:	4b6a      	ldr	r3, [pc, #424]	; (8007850 <RF_TxRx+0x208>)
 80076a6:	881a      	ldrh	r2, [r3, #0]
 80076a8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80076ac:	429a      	cmp	r2, r3
 80076ae:	f000 80be 	beq.w	800782e <RF_TxRx+0x1e6>
			NRF24_writeAckPayload(1, AckPayload_0, 32);
 80076b2:	2220      	movs	r2, #32
 80076b4:	4969      	ldr	r1, [pc, #420]	; (800785c <RF_TxRx+0x214>)
 80076b6:	2001      	movs	r0, #1
 80076b8:	f7fa fea7 	bl	800240a <NRF24_writeAckPayload>
		unpackRxData();
 80076bc:	f7ff ff8a 	bl	80075d4 <unpackRxData>
		Rx_Data.R_Joystick_YPos = 	4096 - Rx_Data.R_Joystick_YPos;
 80076c0:	4b67      	ldr	r3, [pc, #412]	; (8007860 <RF_TxRx+0x218>)
 80076c2:	88da      	ldrh	r2, [r3, #6]
 80076c4:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80076c8:	80da      	strh	r2, [r3, #6]
		Rx_Data.R_Joystick_XPos = 	4096 - Rx_Data.R_Joystick_XPos;
 80076ca:	889a      	ldrh	r2, [r3, #4]
 80076cc:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80076d0:	809a      	strh	r2, [r3, #4]
		*throttle = map(Rx_Data.L_Joystick_YPos, 850, 3300, ESC_MIN, ESC_MAX);
 80076d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80076d6:	ee00 3a10 	vmov	s0, r3
 80076da:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8007864 <RF_TxRx+0x21c>
 80076de:	eddf 1a62 	vldr	s3, [pc, #392]	; 8007868 <RF_TxRx+0x220>
 80076e2:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800786c <RF_TxRx+0x224>
 80076e6:	eddf 0a62 	vldr	s1, [pc, #392]	; 8007870 <RF_TxRx+0x228>
 80076ea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80076ee:	f7ff ff9b 	bl	8007628 <map>
 80076f2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80076f6:	ee10 3a10 	vmov	r3, s0
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	8033      	strh	r3, [r6, #0]
		if (*throttle < ESC_MIN + 200) {
 80076fe:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8007702:	4293      	cmp	r3, r2
 8007704:	d802      	bhi.n	800770c <RF_TxRx+0xc4>
			*throttle = ESC_MIN;
 8007706:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800770a:	8033      	strh	r3, [r6, #0]
		if (*throttle > ESC_MAX - 200) {
 800770c:	8832      	ldrh	r2, [r6, #0]
 800770e:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8007712:	429a      	cmp	r2, r3
 8007714:	d902      	bls.n	800771c <RF_TxRx+0xd4>
			*throttle = ESC_MAX;
 8007716:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800771a:	8033      	strh	r3, [r6, #0]
		*r_setpoint = map(Rx_Data.R_Joystick_XPos, 350, 3940, -MAX_ANGLE, MAX_ANGLE);
 800771c:	4b50      	ldr	r3, [pc, #320]	; (8007860 <RF_TxRx+0x218>)
 800771e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007722:	ee00 3a10 	vmov	s0, r3
 8007726:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 800772a:	eefb 1a04 	vmov.f32	s3, #180	; 0xc1a00000 -20.0
 800772e:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8007874 <RF_TxRx+0x22c>
 8007732:	eddf 0a51 	vldr	s1, [pc, #324]	; 8007878 <RF_TxRx+0x230>
 8007736:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800773a:	f7ff ff75 	bl	8007628 <map>
 800773e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
		*r_setpoint += 1;
 8007742:	ee10 3a10 	vmov	r3, s0
 8007746:	3301      	adds	r3, #1
 8007748:	602b      	str	r3, [r5, #0]
		if(*r_setpoint > MAX_ANGLE) *r_setpoint = (float) MAX_ANGLE;
 800774a:	2b14      	cmp	r3, #20
 800774c:	dd01      	ble.n	8007752 <RF_TxRx+0x10a>
 800774e:	2314      	movs	r3, #20
 8007750:	602b      	str	r3, [r5, #0]
		if(*r_setpoint < -MAX_ANGLE) *r_setpoint = (float) -MAX_ANGLE;
 8007752:	682b      	ldr	r3, [r5, #0]
 8007754:	f113 0f14 	cmn.w	r3, #20
 8007758:	da02      	bge.n	8007760 <RF_TxRx+0x118>
 800775a:	f06f 0313 	mvn.w	r3, #19
 800775e:	602b      	str	r3, [r5, #0]
		*p_setpoint = map(Rx_Data.R_Joystick_YPos, 370, 3980, -MAX_ANGLE, MAX_ANGLE);
 8007760:	4b3f      	ldr	r3, [pc, #252]	; (8007860 <RF_TxRx+0x218>)
 8007762:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007766:	ee00 3a10 	vmov	s0, r3
 800776a:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 800776e:	eefb 1a04 	vmov.f32	s3, #180	; 0xc1a00000 -20.0
 8007772:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800787c <RF_TxRx+0x234>
 8007776:	eddf 0a42 	vldr	s1, [pc, #264]	; 8007880 <RF_TxRx+0x238>
 800777a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800777e:	f7ff ff53 	bl	8007628 <map>
 8007782:	eebd 0ac0 	vcvt.s32.f32	s0, s0
		*p_setpoint += 1;
 8007786:	ee10 3a10 	vmov	r3, s0
 800778a:	3301      	adds	r3, #1
 800778c:	6023      	str	r3, [r4, #0]
		if(*p_setpoint > MAX_ANGLE) *p_setpoint = (float) MAX_ANGLE;
 800778e:	2b14      	cmp	r3, #20
 8007790:	dd01      	ble.n	8007796 <RF_TxRx+0x14e>
 8007792:	2314      	movs	r3, #20
 8007794:	6023      	str	r3, [r4, #0]
		if(*p_setpoint < -MAX_ANGLE) *p_setpoint = (float) -MAX_ANGLE;
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	f113 0f14 	cmn.w	r3, #20
 800779c:	da02      	bge.n	80077a4 <RF_TxRx+0x15c>
 800779e:	f06f 0313 	mvn.w	r3, #19
 80077a2:	6023      	str	r3, [r4, #0]
		yaw_rx = map(Rx_Data.L_Joystick_XPos, 260, 3900, -YAW_TURN_RATE, YAW_TURN_RATE);
 80077a4:	4b2e      	ldr	r3, [pc, #184]	; (8007860 <RF_TxRx+0x218>)
 80077a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077aa:	ee00 3a10 	vmov	s0, r3
 80077ae:	ed9f 8a35 	vldr	s16, [pc, #212]	; 8007884 <RF_TxRx+0x23c>
 80077b2:	eeb0 2a48 	vmov.f32	s4, s16
 80077b6:	eddf 1a34 	vldr	s3, [pc, #208]	; 8007888 <RF_TxRx+0x240>
 80077ba:	ed9f 1a34 	vldr	s2, [pc, #208]	; 800788c <RF_TxRx+0x244>
 80077be:	eddf 0a34 	vldr	s1, [pc, #208]	; 8007890 <RF_TxRx+0x248>
 80077c2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80077c6:	f7ff ff2f 	bl	8007628 <map>
 80077ca:	4b32      	ldr	r3, [pc, #200]	; (8007894 <RF_TxRx+0x24c>)
 80077cc:	ed83 0a00 	vstr	s0, [r3]
		if(yaw_rx>YAW_TURN_RATE) {yaw_rx = YAW_TURN_RATE;}
 80077d0:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80077d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d8:	dd01      	ble.n	80077de <RF_TxRx+0x196>
 80077da:	ed83 8a00 	vstr	s16, [r3]
		if(yaw_rx<-YAW_TURN_RATE) {yaw_rx = -YAW_TURN_RATE;}
 80077de:	4b2d      	ldr	r3, [pc, #180]	; (8007894 <RF_TxRx+0x24c>)
 80077e0:	ed93 7a00 	vldr	s14, [r3]
 80077e4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007888 <RF_TxRx+0x240>
 80077e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f0:	d501      	bpl.n	80077f6 <RF_TxRx+0x1ae>
 80077f2:	edc3 7a00 	vstr	s15, [r3]
		if(yaw_rx > -0.1 && yaw_rx < 0.1){ yaw_rx = 0.0000000f;}
 80077f6:	4b27      	ldr	r3, [pc, #156]	; (8007894 <RF_TxRx+0x24c>)
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	f7f8 fead 	bl	8000558 <__aeabi_f2d>
 80077fe:	4604      	mov	r4, r0
 8007800:	460d      	mov	r5, r1
 8007802:	a30f      	add	r3, pc, #60	; (adr r3, 8007840 <RF_TxRx+0x1f8>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f7f9 f98e 	bl	8000b28 <__aeabi_dcmpgt>
 800780c:	b150      	cbz	r0, 8007824 <RF_TxRx+0x1dc>
 800780e:	a30e      	add	r3, pc, #56	; (adr r3, 8007848 <RF_TxRx+0x200>)
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	4620      	mov	r0, r4
 8007816:	4629      	mov	r1, r5
 8007818:	f7f9 f968 	bl	8000aec <__aeabi_dcmplt>
 800781c:	b110      	cbz	r0, 8007824 <RF_TxRx+0x1dc>
 800781e:	4b1d      	ldr	r3, [pc, #116]	; (8007894 <RF_TxRx+0x24c>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
		(*y_setpoint) = yaw_rx;
 8007824:	4b1b      	ldr	r3, [pc, #108]	; (8007894 <RF_TxRx+0x24c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	603b      	str	r3, [r7, #0]
	return 0;
 800782a:	2000      	movs	r0, #0
 800782c:	e72a      	b.n	8007684 <RF_TxRx+0x3c>
			NRF24_writeAckPayload(1, AckPayload_1, 32);
 800782e:	2220      	movs	r2, #32
 8007830:	4919      	ldr	r1, [pc, #100]	; (8007898 <RF_TxRx+0x250>)
 8007832:	2001      	movs	r0, #1
 8007834:	f7fa fde9 	bl	800240a <NRF24_writeAckPayload>
 8007838:	e740      	b.n	80076bc <RF_TxRx+0x74>
			kill();
 800783a:	f7ff feaf 	bl	800759c <kill>
 800783e:	e71f      	b.n	8007680 <RF_TxRx+0x38>
 8007840:	9999999a 	.word	0x9999999a
 8007844:	bfb99999 	.word	0xbfb99999
 8007848:	9999999a 	.word	0x9999999a
 800784c:	3fb99999 	.word	0x3fb99999
 8007850:	200040c8 	.word	0x200040c8
 8007854:	200040cc 	.word	0x200040cc
 8007858:	200044d0 	.word	0x200044d0
 800785c:	200044a4 	.word	0x200044a4
 8007860:	200044c4 	.word	0x200044c4
 8007864:	451c4000 	.word	0x451c4000
 8007868:	449c4000 	.word	0x449c4000
 800786c:	454e4000 	.word	0x454e4000
 8007870:	44548000 	.word	0x44548000
 8007874:	45764000 	.word	0x45764000
 8007878:	43af0000 	.word	0x43af0000
 800787c:	4578c000 	.word	0x4578c000
 8007880:	43b90000 	.word	0x43b90000
 8007884:	43340000 	.word	0x43340000
 8007888:	c3340000 	.word	0xc3340000
 800788c:	4573c000 	.word	0x4573c000
 8007890:	43820000 	.word	0x43820000
 8007894:	200040d4 	.word	0x200040d4
 8007898:	20004484 	.word	0x20004484

0800789c <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 800789c:	4b01      	ldr	r3, [pc, #4]	; (80078a4 <PWM1_Set+0x8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6358      	str	r0, [r3, #52]	; 0x34
}
 80078a2:	4770      	bx	lr
 80078a4:	20004a00 	.word	0x20004a00

080078a8 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 80078a8:	4b01      	ldr	r3, [pc, #4]	; (80078b0 <PWM2_Set+0x8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6398      	str	r0, [r3, #56]	; 0x38

}
 80078ae:	4770      	bx	lr
 80078b0:	20004a00 	.word	0x20004a00

080078b4 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 80078b4:	4b01      	ldr	r3, [pc, #4]	; (80078bc <PWM3_Set+0x8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 80078ba:	4770      	bx	lr
 80078bc:	20004a00 	.word	0x20004a00

080078c0 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 80078c0:	4b01      	ldr	r3, [pc, #4]	; (80078c8 <PWM4_Set+0x8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6418      	str	r0, [r3, #64]	; 0x40
}
 80078c6:	4770      	bx	lr
 80078c8:	20004a00 	.word	0x20004a00

080078cc <CL_init>:
void CL_init() {
 80078cc:	b510      	push	{r4, lr}
	RF_init();
 80078ce:	f7ff fddd 	bl	800748c <RF_init>
	HAL_TIM_Base_Start(&htim11);
 80078d2:	4816      	ldr	r0, [pc, #88]	; (800792c <CL_init+0x60>)
 80078d4:	f7fd fd86 	bl	80053e4 <HAL_TIM_Base_Start>
	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 80078d8:	4815      	ldr	r0, [pc, #84]	; (8007930 <CL_init+0x64>)
 80078da:	f7f9 fb8d 	bl	8000ff8 <imu_init>
 80078de:	b308      	cbz	r0, 8007924 <CL_init+0x58>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80078e0:	4c14      	ldr	r4, [pc, #80]	; (8007934 <CL_init+0x68>)
 80078e2:	2100      	movs	r1, #0
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7fd ff93 	bl	8005810 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80078ea:	2104      	movs	r1, #4
 80078ec:	4620      	mov	r0, r4
 80078ee:	f7fd ff8f 	bl	8005810 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80078f2:	2108      	movs	r1, #8
 80078f4:	4620      	mov	r0, r4
 80078f6:	f7fd ff8b 	bl	8005810 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80078fa:	210c      	movs	r1, #12
 80078fc:	4620      	mov	r0, r4
 80078fe:	f7fd ff87 	bl	8005810 <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8007902:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8007906:	f7ff ffc9 	bl	800789c <PWM1_Set>
	PWM2_Set(2500);
 800790a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800790e:	f7ff ffcb 	bl	80078a8 <PWM2_Set>
	PWM3_Set(2500);
 8007912:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8007916:	f7ff ffcd 	bl	80078b4 <PWM3_Set>
	PWM4_Set(2500);
 800791a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800791e:	f7ff ffcf 	bl	80078c0 <PWM4_Set>
}
 8007922:	bd10      	pop	{r4, pc}
		imu_calibrate();
 8007924:	f7f9 ffc0 	bl	80018a8 <imu_calibrate>
 8007928:	e7da      	b.n	80078e0 <CL_init+0x14>
 800792a:	bf00      	nop
 800792c:	20004a80 	.word	0x20004a80
 8007930:	20004394 	.word	0x20004394
 8007934:	20004a00 	.word	0x20004a00

08007938 <CL_main>:
void CL_main() {
 8007938:	b570      	push	{r4, r5, r6, lr}
	RF_TxRx(&throttle, &pitch_setpoint, &roll_setpoint, &yaw_setpoint, imu_roll,
 800793a:	4e6a      	ldr	r6, [pc, #424]	; (8007ae4 <CL_main+0x1ac>)
 800793c:	4d6a      	ldr	r5, [pc, #424]	; (8007ae8 <CL_main+0x1b0>)
 800793e:	4c6b      	ldr	r4, [pc, #428]	; (8007aec <CL_main+0x1b4>)
 8007940:	ed96 1a00 	vldr	s2, [r6]
 8007944:	edd5 0a00 	vldr	s1, [r5]
 8007948:	ed94 0a00 	vldr	s0, [r4]
 800794c:	4b68      	ldr	r3, [pc, #416]	; (8007af0 <CL_main+0x1b8>)
 800794e:	4a69      	ldr	r2, [pc, #420]	; (8007af4 <CL_main+0x1bc>)
 8007950:	4969      	ldr	r1, [pc, #420]	; (8007af8 <CL_main+0x1c0>)
 8007952:	486a      	ldr	r0, [pc, #424]	; (8007afc <CL_main+0x1c4>)
 8007954:	f7ff fe78 	bl	8007648 <RF_TxRx>
	calc_RollPitchYaw(&imu_roll, &imu_pitch, &imu_yaw, &imu_yaw_rate);
 8007958:	4b69      	ldr	r3, [pc, #420]	; (8007b00 <CL_main+0x1c8>)
 800795a:	4632      	mov	r2, r6
 800795c:	4629      	mov	r1, r5
 800795e:	4620      	mov	r0, r4
 8007960:	f7fa f946 	bl	8001bf0 <calc_RollPitchYaw>
	if (Rx_Data.airmode && throttle > 1250) {
 8007964:	4b67      	ldr	r3, [pc, #412]	; (8007b04 <CL_main+0x1cc>)
 8007966:	7a1b      	ldrb	r3, [r3, #8]
 8007968:	b133      	cbz	r3, 8007978 <CL_main+0x40>
 800796a:	4b64      	ldr	r3, [pc, #400]	; (8007afc <CL_main+0x1c4>)
 800796c:	881a      	ldrh	r2, [r3, #0]
 800796e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8007972:	429a      	cmp	r2, r3
 8007974:	f200 808f 	bhi.w	8007a96 <CL_main+0x15e>
		pid_output_roll = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	4a63      	ldr	r2, [pc, #396]	; (8007b08 <CL_main+0x1d0>)
 800797c:	6013      	str	r3, [r2, #0]
		pid_output_pitch = 0;
 800797e:	4a63      	ldr	r2, [pc, #396]	; (8007b0c <CL_main+0x1d4>)
 8007980:	6013      	str	r3, [r2, #0]
		pid_output_yaw = 0;
 8007982:	4a63      	ldr	r2, [pc, #396]	; (8007b10 <CL_main+0x1d8>)
 8007984:	6013      	str	r3, [r2, #0]
		reset_pid_roll();
 8007986:	f7fb f9cd 	bl	8002d24 <reset_pid_roll>
		reset_pid_pitch();
 800798a:	f7fb fa49 	bl	8002e20 <reset_pid_pitch>
		reset_pid_yaw();
 800798e:	f7fb fac5 	bl	8002f1c <reset_pid_yaw>
	esc1_total = throttle + (int) pid_output_roll + (int) pid_output_pitch + (int) pid_output_yaw;
 8007992:	4b5a      	ldr	r3, [pc, #360]	; (8007afc <CL_main+0x1c4>)
 8007994:	8819      	ldrh	r1, [r3, #0]
 8007996:	4b5c      	ldr	r3, [pc, #368]	; (8007b08 <CL_main+0x1d0>)
 8007998:	edd3 7a00 	vldr	s15, [r3]
 800799c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079a0:	ee17 2a90 	vmov	r2, s15
 80079a4:	188b      	adds	r3, r1, r2
 80079a6:	4859      	ldr	r0, [pc, #356]	; (8007b0c <CL_main+0x1d4>)
 80079a8:	edd0 7a00 	vldr	s15, [r0]
 80079ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079b0:	ee17 4a90 	vmov	r4, s15
 80079b4:	191d      	adds	r5, r3, r4
 80079b6:	4856      	ldr	r0, [pc, #344]	; (8007b10 <CL_main+0x1d8>)
 80079b8:	edd0 7a00 	vldr	s15, [r0]
 80079bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079c0:	ee17 0a90 	vmov	r0, s15
 80079c4:	4405      	add	r5, r0
 80079c6:	4e53      	ldr	r6, [pc, #332]	; (8007b14 <CL_main+0x1dc>)
 80079c8:	6035      	str	r5, [r6, #0]
	esc2_total = throttle + (int) pid_output_roll - (int) pid_output_pitch - (int) pid_output_yaw;
 80079ca:	1b1b      	subs	r3, r3, r4
 80079cc:	1a1b      	subs	r3, r3, r0
 80079ce:	4e52      	ldr	r6, [pc, #328]	; (8007b18 <CL_main+0x1e0>)
 80079d0:	6033      	str	r3, [r6, #0]
	esc3_total = throttle - (int) pid_output_roll + (int) pid_output_pitch - (int) pid_output_yaw;
 80079d2:	1a8a      	subs	r2, r1, r2
 80079d4:	18a1      	adds	r1, r4, r2
 80079d6:	1a09      	subs	r1, r1, r0
 80079d8:	4e50      	ldr	r6, [pc, #320]	; (8007b1c <CL_main+0x1e4>)
 80079da:	6031      	str	r1, [r6, #0]
	esc4_total = throttle - (int) pid_output_roll - (int) pid_output_pitch + (int) pid_output_yaw;
 80079dc:	1b12      	subs	r2, r2, r4
 80079de:	4402      	add	r2, r0
 80079e0:	484f      	ldr	r0, [pc, #316]	; (8007b20 <CL_main+0x1e8>)
 80079e2:	6002      	str	r2, [r0, #0]
	if (esc1_total < ESC_MIN) {
 80079e4:	f240 40e1 	movw	r0, #1249	; 0x4e1
 80079e8:	4285      	cmp	r5, r0
 80079ea:	dc03      	bgt.n	80079f4 <CL_main+0xbc>
		esc1_total = ESC_MIN;
 80079ec:	4849      	ldr	r0, [pc, #292]	; (8007b14 <CL_main+0x1dc>)
 80079ee:	f240 44e2 	movw	r4, #1250	; 0x4e2
 80079f2:	6004      	str	r4, [r0, #0]
	if (esc1_total > ESC_MAX) {
 80079f4:	4847      	ldr	r0, [pc, #284]	; (8007b14 <CL_main+0x1dc>)
 80079f6:	6804      	ldr	r4, [r0, #0]
 80079f8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80079fc:	4284      	cmp	r4, r0
 80079fe:	dd03      	ble.n	8007a08 <CL_main+0xd0>
		esc1_total = ESC_MAX;
 8007a00:	4844      	ldr	r0, [pc, #272]	; (8007b14 <CL_main+0x1dc>)
 8007a02:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8007a06:	6004      	str	r4, [r0, #0]
	if (esc2_total < ESC_MIN) {
 8007a08:	f240 40e1 	movw	r0, #1249	; 0x4e1
 8007a0c:	4283      	cmp	r3, r0
 8007a0e:	dc03      	bgt.n	8007a18 <CL_main+0xe0>
		esc2_total = ESC_MIN;
 8007a10:	4b41      	ldr	r3, [pc, #260]	; (8007b18 <CL_main+0x1e0>)
 8007a12:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007a16:	6018      	str	r0, [r3, #0]
	if (esc2_total > ESC_MAX) {
 8007a18:	4b3f      	ldr	r3, [pc, #252]	; (8007b18 <CL_main+0x1e0>)
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007a20:	4298      	cmp	r0, r3
 8007a22:	dd03      	ble.n	8007a2c <CL_main+0xf4>
		esc2_total = ESC_MAX;
 8007a24:	4b3c      	ldr	r3, [pc, #240]	; (8007b18 <CL_main+0x1e0>)
 8007a26:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8007a2a:	6018      	str	r0, [r3, #0]
	if (esc3_total < ESC_MIN) {
 8007a2c:	f240 43e1 	movw	r3, #1249	; 0x4e1
 8007a30:	4299      	cmp	r1, r3
 8007a32:	dc03      	bgt.n	8007a3c <CL_main+0x104>
		esc3_total = ESC_MIN;
 8007a34:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <CL_main+0x1e4>)
 8007a36:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8007a3a:	6019      	str	r1, [r3, #0]
	if (esc3_total > ESC_MAX) {
 8007a3c:	4b37      	ldr	r3, [pc, #220]	; (8007b1c <CL_main+0x1e4>)
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007a44:	4299      	cmp	r1, r3
 8007a46:	dd03      	ble.n	8007a50 <CL_main+0x118>
		esc3_total = ESC_MAX;
 8007a48:	4b34      	ldr	r3, [pc, #208]	; (8007b1c <CL_main+0x1e4>)
 8007a4a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8007a4e:	6019      	str	r1, [r3, #0]
	if (esc4_total < ESC_MIN) {
 8007a50:	f240 43e1 	movw	r3, #1249	; 0x4e1
 8007a54:	429a      	cmp	r2, r3
 8007a56:	dc03      	bgt.n	8007a60 <CL_main+0x128>
		esc4_total = ESC_MIN;
 8007a58:	4b31      	ldr	r3, [pc, #196]	; (8007b20 <CL_main+0x1e8>)
 8007a5a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007a5e:	601a      	str	r2, [r3, #0]
	if (esc4_total > ESC_MAX) {
 8007a60:	4b2f      	ldr	r3, [pc, #188]	; (8007b20 <CL_main+0x1e8>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	dd03      	ble.n	8007a74 <CL_main+0x13c>
		esc4_total = ESC_MAX;
 8007a6c:	4b2c      	ldr	r3, [pc, #176]	; (8007b20 <CL_main+0x1e8>)
 8007a6e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007a72:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8007a74:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <CL_main+0x1dc>)
 8007a76:	8818      	ldrh	r0, [r3, #0]
 8007a78:	f7ff ff10 	bl	800789c <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8007a7c:	4b26      	ldr	r3, [pc, #152]	; (8007b18 <CL_main+0x1e0>)
 8007a7e:	8818      	ldrh	r0, [r3, #0]
 8007a80:	f7ff ff12 	bl	80078a8 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8007a84:	4b25      	ldr	r3, [pc, #148]	; (8007b1c <CL_main+0x1e4>)
 8007a86:	8818      	ldrh	r0, [r3, #0]
 8007a88:	f7ff ff14 	bl	80078b4 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8007a8c:	4b24      	ldr	r3, [pc, #144]	; (8007b20 <CL_main+0x1e8>)
 8007a8e:	8818      	ldrh	r0, [r3, #0]
 8007a90:	f7ff ff16 	bl	80078c0 <PWM4_Set>
}
 8007a94:	bd70      	pop	{r4, r5, r6, pc}
		pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, pitch_setpoint);
 8007a96:	4b18      	ldr	r3, [pc, #96]	; (8007af8 <CL_main+0x1c0>)
 8007a98:	edd3 0a00 	vldr	s1, [r3]
 8007a9c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	ed95 0a00 	vldr	s0, [r5]
 8007aa6:	f7fb f94f 	bl	8002d48 <pid_calculate_pitch>
 8007aaa:	4b18      	ldr	r3, [pc, #96]	; (8007b0c <CL_main+0x1d4>)
 8007aac:	ed83 0a00 	vstr	s0, [r3]
		pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 8007ab0:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <CL_main+0x1bc>)
 8007ab2:	edd3 0a00 	vldr	s1, [r3]
 8007ab6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007aba:	2000      	movs	r0, #0
 8007abc:	ed94 0a00 	vldr	s0, [r4]
 8007ac0:	f7fb f8c4 	bl	8002c4c <pid_calculate_roll>
 8007ac4:	4b10      	ldr	r3, [pc, #64]	; (8007b08 <CL_main+0x1d0>)
 8007ac6:	ed83 0a00 	vstr	s0, [r3]
		pid_output_yaw = pid_calculate_yaw(imu_yaw_rate, 0, yaw_setpoint);
 8007aca:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <CL_main+0x1b8>)
 8007acc:	edd3 0a00 	vldr	s1, [r3]
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <CL_main+0x1c8>)
 8007ad4:	ed93 0a00 	vldr	s0, [r3]
 8007ad8:	f7fb f9b4 	bl	8002e44 <pid_calculate_yaw>
 8007adc:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <CL_main+0x1d8>)
 8007ade:	ed83 0a00 	vstr	s0, [r3]
 8007ae2:	e756      	b.n	8007992 <CL_main+0x5a>
 8007ae4:	200040f0 	.word	0x200040f0
 8007ae8:	200040e8 	.word	0x200040e8
 8007aec:	200040ec 	.word	0x200040ec
 8007af0:	20004110 	.word	0x20004110
 8007af4:	20004108 	.word	0x20004108
 8007af8:	20004104 	.word	0x20004104
 8007afc:	2000410c 	.word	0x2000410c
 8007b00:	200040f4 	.word	0x200040f4
 8007b04:	200044c4 	.word	0x200044c4
 8007b08:	200040fc 	.word	0x200040fc
 8007b0c:	200040f8 	.word	0x200040f8
 8007b10:	20004100 	.word	0x20004100
 8007b14:	200040d8 	.word	0x200040d8
 8007b18:	200040dc 	.word	0x200040dc
 8007b1c:	200040e0 	.word	0x200040e0
 8007b20:	200040e4 	.word	0x200040e4

08007b24 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8007b24:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8007b26:	4805      	ldr	r0, [pc, #20]	; (8007b3c <MX_CRC_Init+0x18>)
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <MX_CRC_Init+0x1c>)
 8007b2a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007b2c:	f7fb fac4 	bl	80030b8 <HAL_CRC_Init>
 8007b30:	b900      	cbnz	r0, 8007b34 <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 8007b32:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007b34:	f000 fa8a 	bl	800804c <Error_Handler>
}
 8007b38:	e7fb      	b.n	8007b32 <MX_CRC_Init+0xe>
 8007b3a:	bf00      	nop
 8007b3c:	200044f4 	.word	0x200044f4
 8007b40:	40023000 	.word	0x40023000

08007b44 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8007b44:	6802      	ldr	r2, [r0, #0]
 8007b46:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <HAL_CRC_MspInit+0x28>)
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d000      	beq.n	8007b4e <HAL_CRC_MspInit+0xa>
 8007b4c:	4770      	bx	lr
{
 8007b4e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007b50:	2300      	movs	r3, #0
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <HAL_CRC_MspInit+0x2c>)
 8007b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8007b68:	b002      	add	sp, #8
 8007b6a:	4770      	bx	lr
 8007b6c:	40023000 	.word	0x40023000
 8007b70:	40023800 	.word	0x40023800

08007b74 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007b74:	b500      	push	{lr}
 8007b76:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007b78:	2200      	movs	r2, #0
 8007b7a:	9201      	str	r2, [sp, #4]
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <MX_DMA_Init+0x30>)
 8007b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b80:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8007b84:	6319      	str	r1, [r3, #48]	; 0x30
 8007b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8007b90:	2106      	movs	r1, #6
 8007b92:	2039      	movs	r0, #57	; 0x39
 8007b94:	f7fb fa4e 	bl	8003034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007b98:	2039      	movs	r0, #57	; 0x39
 8007b9a:	f7fb fa7f 	bl	800309c <HAL_NVIC_EnableIRQ>

}
 8007b9e:	b003      	add	sp, #12
 8007ba0:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ba4:	40023800 	.word	0x40023800

08007ba8 <StartControlLoop>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 8007ba8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartControlLoop */

	CL_init();
 8007baa:	f7ff fe8f 	bl	80078cc <CL_init>
	HAL_TIM_Base_Start(&htim10);
 8007bae:	480b      	ldr	r0, [pc, #44]	; (8007bdc <StartControlLoop+0x34>)
 8007bb0:	f7fd fc18 	bl	80053e4 <HAL_TIM_Base_Start>

	/* Infinite loop */
	for (;;) {

		tim1 = htim10.Instance->CNT;
 8007bb4:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <StartControlLoop+0x34>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bba:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <StartControlLoop+0x38>)
 8007bbc:	601a      	str	r2, [r3, #0]

		diff = tim1-tim2;
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	4908      	ldr	r1, [pc, #32]	; (8007be4 <StartControlLoop+0x3c>)
 8007bc2:	6808      	ldr	r0, [r1, #0]
 8007bc4:	1a12      	subs	r2, r2, r0
 8007bc6:	4808      	ldr	r0, [pc, #32]	; (8007be8 <StartControlLoop+0x40>)
 8007bc8:	6002      	str	r2, [r0, #0]

		tim2 = tim1;
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	600b      	str	r3, [r1, #0]

		CL_main();
 8007bce:	f7ff feb3 	bl	8007938 <CL_main>
		//2ms = 500Hz rate
		osDelay(2);
 8007bd2:	2002      	movs	r0, #2
 8007bd4:	f7fe fa73 	bl	80060be <osDelay>
 8007bd8:	e7ec      	b.n	8007bb4 <StartControlLoop+0xc>
 8007bda:	bf00      	nop
 8007bdc:	20004a40 	.word	0x20004a40
 8007be0:	20004964 	.word	0x20004964
 8007be4:	2000493c 	.word	0x2000493c
 8007be8:	20004960 	.word	0x20004960

08007bec <StartGPSUpdate>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSUpdate */
void StartGPSUpdate(void const * argument)
{
 8007bec:	b508      	push	{r3, lr}



	/* Infinite loop */
	for (;;) {
		osDelay(10);
 8007bee:	200a      	movs	r0, #10
 8007bf0:	f7fe fa65 	bl	80060be <osDelay>
 8007bf4:	e7fb      	b.n	8007bee <StartGPSUpdate+0x2>
	...

08007bf8 <getGPSData>:
	}
	//}

}

void getGPSData(uint8_t *ack_payload_1) {
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4604      	mov	r4, r0

	//Goto element [1]
	ack_payload_1++;

	//[1] = no of sattelites tracked
	*ack_payload_1 = GPS.sattelite_no;
 8007bfc:	4d24      	ldr	r5, [pc, #144]	; (8007c90 <getGPSData+0x98>)
 8007bfe:	7e2b      	ldrb	r3, [r5, #24]
 8007c00:	7043      	strb	r3, [r0, #1]
	ack_payload_1++;
	//[2] = Fix quality
	*ack_payload_1 = GPS.fix_quality;
 8007c02:	7e6b      	ldrb	r3, [r5, #25]
 8007c04:	7083      	strb	r3, [r0, #2]
	ack_payload_1++;
	//[3] = Day
	*ack_payload_1 = GPS.Day;
 8007c06:	782b      	ldrb	r3, [r5, #0]
 8007c08:	70c3      	strb	r3, [r0, #3]
	ack_payload_1++;
	//[4] = Month
	*ack_payload_1 = GPS.Month;
 8007c0a:	786b      	ldrb	r3, [r5, #1]
 8007c0c:	7103      	strb	r3, [r0, #4]
	ack_payload_1++;
	//[5] = Year
	*ack_payload_1 = GPS.Year;
 8007c0e:	78ab      	ldrb	r3, [r5, #2]
 8007c10:	7143      	strb	r3, [r0, #5]
	ack_payload_1++;
	//[6] = Hour
	*ack_payload_1 = GPS.Hours;
 8007c12:	78eb      	ldrb	r3, [r5, #3]
 8007c14:	7183      	strb	r3, [r0, #6]
	ack_payload_1++;
	//[7] = Minutes
	*ack_payload_1 = GPS.Minutes;
 8007c16:	792b      	ldrb	r3, [r5, #4]
 8007c18:	71c3      	strb	r3, [r0, #7]
	ack_payload_1++;
	//[8] = Seconds
	*ack_payload_1 = GPS.Seconds;
 8007c1a:	796b      	ldrb	r3, [r5, #5]
 8007c1c:	7203      	strb	r3, [r0, #8]
	ack_payload_1++;

	//[9] - [10] = GPS speed in KM/H
	int16_t GPS_speed_tx = round(GPS.Speed * 100);
 8007c1e:	ed95 7a04 	vldr	s14, [r5, #16]
 8007c22:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007c94 <getGPSData+0x9c>
 8007c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2a:	ee17 0a90 	vmov	r0, s15
 8007c2e:	f7f8 fc93 	bl	8000558 <__aeabi_f2d>
 8007c32:	ec41 0b10 	vmov	d0, r0, r1
 8007c36:	f000 fd45 	bl	80086c4 <round>
 8007c3a:	ec51 0b10 	vmov	r0, r1, d0
 8007c3e:	f7f8 ff93 	bl	8000b68 <__aeabi_d2iz>
 8007c42:	b200      	sxth	r0, r0
	*ack_payload_1 = GPS_speed_tx;
 8007c44:	7260      	strb	r0, [r4, #9]
	ack_payload_1++;
	*ack_payload_1 = GPS_speed_tx >> 8;
 8007c46:	1200      	asrs	r0, r0, #8
 8007c48:	72a0      	strb	r0, [r4, #10]
	ack_payload_1++;

	//[11] - [14] = Longitude
	unsigned char temp[sizeof(float)];
	memcpy(temp, &GPS.Longitude, sizeof(float));
 8007c4a:	68ab      	ldr	r3, [r5, #8]

	*ack_payload_1 = temp[0];
 8007c4c:	72e3      	strb	r3, [r4, #11]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8007c4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007c52:	7322      	strb	r2, [r4, #12]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8007c54:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007c58:	7362      	strb	r2, [r4, #13]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8007c5a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007c5e:	73a3      	strb	r3, [r4, #14]
	ack_payload_1++;

	//[15] - [18] = Longitude
	memcpy(temp, &GPS.Latitude, sizeof(GPS.Latitude));
 8007c60:	68eb      	ldr	r3, [r5, #12]

	*ack_payload_1 = temp[0];
 8007c62:	73e3      	strb	r3, [r4, #15]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8007c64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007c68:	7422      	strb	r2, [r4, #16]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8007c6a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007c6e:	7462      	strb	r2, [r4, #17]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8007c70:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007c74:	74a3      	strb	r3, [r4, #18]
	ack_payload_1++;

	//[19] - [22] = Longitude
	memcpy(temp, &GPS.Altitude, sizeof(GPS.Altitude));
 8007c76:	696b      	ldr	r3, [r5, #20]

	*ack_payload_1 = temp[0];
 8007c78:	74e3      	strb	r3, [r4, #19]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8007c7a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007c7e:	7522      	strb	r2, [r4, #20]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8007c80:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007c84:	7562      	strb	r2, [r4, #21]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8007c86:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007c8a:	75a3      	strb	r3, [r4, #22]
	ack_payload_1++;

}
 8007c8c:	bd38      	pop	{r3, r4, r5, pc}
 8007c8e:	bf00      	nop
 8007c90:	20004940 	.word	0x20004940
 8007c94:	42c80000 	.word	0x42c80000

08007c98 <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007c98:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <vApplicationGetIdleTaskMemory+0x10>)
 8007c9a:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007c9c:	4b03      	ldr	r3, [pc, #12]	; (8007cac <vApplicationGetIdleTaskMemory+0x14>)
 8007c9e:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007ca0:	2380      	movs	r3, #128	; 0x80
 8007ca2:	6013      	str	r3, [r2, #0]
}
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	20004314 	.word	0x20004314
 8007cac:	20004114 	.word	0x20004114

08007cb0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8007cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb2:	b091      	sub	sp, #68	; 0x44
  osMutexDef(GPSDataMutex);
 8007cb4:	2700      	movs	r7, #0
 8007cb6:	970e      	str	r7, [sp, #56]	; 0x38
 8007cb8:	970f      	str	r7, [sp, #60]	; 0x3c
  GPSDataMutexHandle = osMutexCreate(osMutex(GPSDataMutex));
 8007cba:	a80e      	add	r0, sp, #56	; 0x38
 8007cbc:	f7fe fa08 	bl	80060d0 <osMutexCreate>
 8007cc0:	4b10      	ldr	r3, [pc, #64]	; (8007d04 <MX_FREERTOS_Init+0x54>)
 8007cc2:	6018      	str	r0, [r3, #0]
  osThreadDef(ControlLoop, StartControlLoop, osPriorityRealtime, 0, 1024);
 8007cc4:	4c10      	ldr	r4, [pc, #64]	; (8007d08 <MX_FREERTOS_Init+0x58>)
 8007cc6:	ad07      	add	r5, sp, #28
 8007cc8:	4626      	mov	r6, r4
 8007cca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cce:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007cd2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ControlLoopHandle = osThreadCreate(osThread(ControlLoop), NULL);
 8007cd6:	4639      	mov	r1, r7
 8007cd8:	a807      	add	r0, sp, #28
 8007cda:	f7fe f9ba 	bl	8006052 <osThreadCreate>
 8007cde:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <MX_FREERTOS_Init+0x5c>)
 8007ce0:	6018      	str	r0, [r3, #0]
  osThreadDef(GPSUpdate, StartGPSUpdate, osPriorityIdle, 0, 128);
 8007ce2:	466d      	mov	r5, sp
 8007ce4:	341c      	adds	r4, #28
 8007ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007cee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSUpdateHandle = osThreadCreate(osThread(GPSUpdate), NULL);
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	4668      	mov	r0, sp
 8007cf6:	f7fe f9ac 	bl	8006052 <osThreadCreate>
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <MX_FREERTOS_Init+0x60>)
 8007cfc:	6018      	str	r0, [r3, #0]
}
 8007cfe:	b011      	add	sp, #68	; 0x44
 8007d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d02:	bf00      	nop
 8007d04:	2000495c 	.word	0x2000495c
 8007d08:	0800e348 	.word	0x0800e348
 8007d0c:	200044fc 	.word	0x200044fc
 8007d10:	20004500 	.word	0x20004500

08007d14 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d18:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d1a:	2400      	movs	r4, #0
 8007d1c:	9405      	str	r4, [sp, #20]
 8007d1e:	9406      	str	r4, [sp, #24]
 8007d20:	9407      	str	r4, [sp, #28]
 8007d22:	9408      	str	r4, [sp, #32]
 8007d24:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d26:	9400      	str	r4, [sp, #0]
 8007d28:	4b53      	ldr	r3, [pc, #332]	; (8007e78 <MX_GPIO_Init+0x164>)
 8007d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d2c:	f042 0204 	orr.w	r2, r2, #4
 8007d30:	631a      	str	r2, [r3, #48]	; 0x30
 8007d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d34:	f002 0204 	and.w	r2, r2, #4
 8007d38:	9200      	str	r2, [sp, #0]
 8007d3a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d3c:	9401      	str	r4, [sp, #4]
 8007d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d44:	631a      	str	r2, [r3, #48]	; 0x30
 8007d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d48:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007d4c:	9201      	str	r2, [sp, #4]
 8007d4e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d50:	9402      	str	r4, [sp, #8]
 8007d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
 8007d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d5c:	f002 0201 	and.w	r2, r2, #1
 8007d60:	9202      	str	r2, [sp, #8]
 8007d62:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d64:	9403      	str	r4, [sp, #12]
 8007d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d68:	f042 0202 	orr.w	r2, r2, #2
 8007d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8007d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d70:	f002 0202 	and.w	r2, r2, #2
 8007d74:	9203      	str	r2, [sp, #12]
 8007d76:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d78:	9404      	str	r4, [sp, #16]
 8007d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d7c:	f042 0208 	orr.w	r2, r2, #8
 8007d80:	631a      	str	r2, [r3, #48]	; 0x30
 8007d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	9304      	str	r3, [sp, #16]
 8007d8a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8007d8c:	4e3b      	ldr	r6, [pc, #236]	; (8007e7c <MX_GPIO_Init+0x168>)
 8007d8e:	4622      	mov	r2, r4
 8007d90:	2120      	movs	r1, #32
 8007d92:	4630      	mov	r0, r6
 8007d94:	f7fb fd6e 	bl	8003874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8007d98:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8007e90 <MX_GPIO_Init+0x17c>
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	2120      	movs	r1, #32
 8007da0:	4648      	mov	r0, r9
 8007da2:	f7fb fd67 	bl	8003874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8007da6:	4f36      	ldr	r7, [pc, #216]	; (8007e80 <MX_GPIO_Init+0x16c>)
 8007da8:	4622      	mov	r2, r4
 8007daa:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8007dae:	4638      	mov	r0, r7
 8007db0:	f7fb fd60 	bl	8003874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC3 PC4 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8007db4:	f64f 731b 	movw	r3, #65307	; 0xff1b
 8007db8:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007dba:	2503      	movs	r5, #3
 8007dbc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dbe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dc0:	a905      	add	r1, sp, #20
 8007dc2:	4648      	mov	r0, r9
 8007dc4:	f7fb fc84 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007dc8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007dca:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dcc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007dce:	a905      	add	r1, sp, #20
 8007dd0:	482c      	ldr	r0, [pc, #176]	; (8007e84 <MX_GPIO_Init+0x170>)
 8007dd2:	f7fb fc7d 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA6 PA7 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007dd6:	f649 63df 	movw	r3, #40671	; 0x9edf
 8007dda:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ddc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dde:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007de0:	a905      	add	r1, sp, #20
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7fb fc74 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007de8:	f04f 0a20 	mov.w	sl, #32
 8007dec:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007df0:	f04f 0801 	mov.w	r8, #1
 8007df4:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dfa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfc:	a905      	add	r1, sp, #20
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f7fb fc66 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007e04:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e08:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e0c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e0e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e10:	a905      	add	r1, sp, #20
 8007e12:	4648      	mov	r0, r9
 8007e14:	f7fb fc5c 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8007e18:	2337      	movs	r3, #55	; 0x37
 8007e1a:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e1c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e1e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e20:	a905      	add	r1, sp, #20
 8007e22:	4638      	mov	r0, r7
 8007e24:	f7fb fc54 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8007e28:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8007e2c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e2e:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e32:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e34:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e36:	a905      	add	r1, sp, #20
 8007e38:	4638      	mov	r0, r7
 8007e3a:	f7fb fc49 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 8007e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007e44:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <MX_GPIO_Init+0x174>)
 8007e46:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e48:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 8007e4a:	a905      	add	r1, sp, #20
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f7fb fc3f 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007e52:	2304      	movs	r3, #4
 8007e54:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e56:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e58:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e5a:	a905      	add	r1, sp, #20
 8007e5c:	480b      	ldr	r0, [pc, #44]	; (8007e8c <MX_GPIO_Init+0x178>)
 8007e5e:	f7fb fc37 	bl	80036d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8007e62:	4622      	mov	r2, r4
 8007e64:	2107      	movs	r1, #7
 8007e66:	2017      	movs	r0, #23
 8007e68:	f7fb f8e4 	bl	8003034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007e6c:	2017      	movs	r0, #23
 8007e6e:	f7fb f915 	bl	800309c <HAL_NVIC_EnableIRQ>

}
 8007e72:	b00a      	add	sp, #40	; 0x28
 8007e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e78:	40023800 	.word	0x40023800
 8007e7c:	40020000 	.word	0x40020000
 8007e80:	40020400 	.word	0x40020400
 8007e84:	40021c00 	.word	0x40021c00
 8007e88:	10110000 	.word	0x10110000
 8007e8c:	40020c00 	.word	0x40020c00
 8007e90:	40020800 	.word	0x40020800

08007e94 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007e94:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8007e96:	480b      	ldr	r0, [pc, #44]	; (8007ec4 <MX_I2C2_Init+0x30>)
 8007e98:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <MX_I2C2_Init+0x34>)
 8007e9a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <MX_I2C2_Init+0x38>)
 8007e9e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007ea4:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007ea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007eaa:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007eac:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007eae:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007eb0:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007eb2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007eb4:	f7fb ff00 	bl	8003cb8 <HAL_I2C_Init>
 8007eb8:	b900      	cbnz	r0, 8007ebc <MX_I2C2_Init+0x28>
  {
    Error_Handler();
  }

}
 8007eba:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007ebc:	f000 f8c6 	bl	800804c <Error_Handler>
}
 8007ec0:	e7fb      	b.n	8007eba <MX_I2C2_Init+0x26>
 8007ec2:	bf00      	nop
 8007ec4:	20004394 	.word	0x20004394
 8007ec8:	40005800 	.word	0x40005800
 8007ecc:	00061a80 	.word	0x00061a80

08007ed0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ed4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	9303      	str	r3, [sp, #12]
 8007eda:	9304      	str	r3, [sp, #16]
 8007edc:	9305      	str	r3, [sp, #20]
 8007ede:	9306      	str	r3, [sp, #24]
 8007ee0:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8007ee2:	6802      	ldr	r2, [r0, #0]
 8007ee4:	4b1e      	ldr	r3, [pc, #120]	; (8007f60 <HAL_I2C_MspInit+0x90>)
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d002      	beq.n	8007ef0 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007eea:	b009      	add	sp, #36	; 0x24
 8007eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ef0:	2500      	movs	r5, #0
 8007ef2:	9501      	str	r5, [sp, #4]
 8007ef4:	4c1b      	ldr	r4, [pc, #108]	; (8007f64 <HAL_I2C_MspInit+0x94>)
 8007ef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007ef8:	f043 0302 	orr.w	r3, r3, #2
 8007efc:	6323      	str	r3, [r4, #48]	; 0x30
 8007efe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f0e:	f04f 0912 	mov.w	r9, #18
 8007f12:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f16:	f04f 0801 	mov.w	r8, #1
 8007f1a:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f1e:	2703      	movs	r7, #3
 8007f20:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007f22:	2304      	movs	r3, #4
 8007f24:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f26:	4e10      	ldr	r6, [pc, #64]	; (8007f68 <HAL_I2C_MspInit+0x98>)
 8007f28:	a903      	add	r1, sp, #12
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7fb fbd0 	bl	80036d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007f30:	2308      	movs	r3, #8
 8007f32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f34:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f38:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f3c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8007f3e:	2309      	movs	r3, #9
 8007f40:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f42:	a903      	add	r1, sp, #12
 8007f44:	4630      	mov	r0, r6
 8007f46:	f7fb fbc3 	bl	80036d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007f4a:	9502      	str	r5, [sp, #8]
 8007f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f52:	6423      	str	r3, [r4, #64]	; 0x40
 8007f54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f5a:	9302      	str	r3, [sp, #8]
 8007f5c:	9b02      	ldr	r3, [sp, #8]
}
 8007f5e:	e7c4      	b.n	8007eea <HAL_I2C_MspInit+0x1a>
 8007f60:	40005800 	.word	0x40005800
 8007f64:	40023800 	.word	0x40023800
 8007f68:	40020400 	.word	0x40020400

08007f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f6c:	b530      	push	{r4, r5, lr}
 8007f6e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f70:	2230      	movs	r2, #48	; 0x30
 8007f72:	2100      	movs	r1, #0
 8007f74:	a808      	add	r0, sp, #32
 8007f76:	f001 ffb5 	bl	8009ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f7a:	2400      	movs	r4, #0
 8007f7c:	9403      	str	r4, [sp, #12]
 8007f7e:	9404      	str	r4, [sp, #16]
 8007f80:	9405      	str	r4, [sp, #20]
 8007f82:	9406      	str	r4, [sp, #24]
 8007f84:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f86:	9401      	str	r4, [sp, #4]
 8007f88:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <SystemClock_Config+0x88>)
 8007f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f90:	641a      	str	r2, [r3, #64]	; 0x40
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f9c:	9402      	str	r4, [sp, #8]
 8007f9e:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <SystemClock_Config+0x8c>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fae:	9302      	str	r3, [sp, #8]
 8007fb0:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007fb2:	2502      	movs	r5, #2
 8007fb4:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007fba:	2310      	movs	r3, #16
 8007fbc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fbe:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007fc0:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007fc2:	2308      	movs	r3, #8
 8007fc4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8007fc6:	2364      	movs	r3, #100	; 0x64
 8007fc8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007fca:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007fcc:	2304      	movs	r3, #4
 8007fce:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fd0:	a808      	add	r0, sp, #32
 8007fd2:	f7fc fa25 	bl	8004420 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fd6:	230f      	movs	r3, #15
 8007fd8:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007fda:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007fdc:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fe2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007fe4:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007fe6:	2103      	movs	r1, #3
 8007fe8:	a803      	add	r0, sp, #12
 8007fea:	f7fc fc51 	bl	8004890 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8007fee:	b015      	add	sp, #84	; 0x54
 8007ff0:	bd30      	pop	{r4, r5, pc}
 8007ff2:	bf00      	nop
 8007ff4:	40023800 	.word	0x40023800
 8007ff8:	40007000 	.word	0x40007000

08007ffc <main>:
{
 8007ffc:	b508      	push	{r3, lr}
  HAL_Init();
 8007ffe:	f7fa ffc7 	bl	8002f90 <HAL_Init>
  SystemClock_Config();
 8008002:	f7ff ffb3 	bl	8007f6c <SystemClock_Config>
  MX_GPIO_Init();
 8008006:	f7ff fe85 	bl	8007d14 <MX_GPIO_Init>
  MX_DMA_Init();
 800800a:	f7ff fdb3 	bl	8007b74 <MX_DMA_Init>
  MX_I2C2_Init();
 800800e:	f7ff ff41 	bl	8007e94 <MX_I2C2_Init>
  MX_TIM4_Init();
 8008012:	f000 fa4f 	bl	80084b4 <MX_TIM4_Init>
  MX_SPI2_Init();
 8008016:	f000 f81b 	bl	8008050 <MX_SPI2_Init>
  MX_CRC_Init();
 800801a:	f7ff fd83 	bl	8007b24 <MX_CRC_Init>
  MX_TIM11_Init();
 800801e:	f000 f9b9 	bl	8008394 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8008022:	f000 faa5 	bl	8008570 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8008026:	f000 f99b 	bl	8008360 <MX_TIM10_Init>
  MX_FREERTOS_Init();
 800802a:	f7ff fe41 	bl	8007cb0 <MX_FREERTOS_Init>
  osKernelStart();
 800802e:	f7fe f80b 	bl	8006048 <osKernelStart>
 8008032:	e7fe      	b.n	8008032 <main+0x36>

08008034 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8008036:	6802      	ldr	r2, [r0, #0]
 8008038:	4b03      	ldr	r3, [pc, #12]	; (8008048 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800803a:	429a      	cmp	r2, r3
 800803c:	d000      	beq.n	8008040 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800803e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8008040:	f7fa ffc0 	bl	8002fc4 <HAL_IncTick>
}
 8008044:	e7fb      	b.n	800803e <HAL_TIM_PeriodElapsedCallback+0xa>
 8008046:	bf00      	nop
 8008048:	40010000 	.word	0x40010000

0800804c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800804c:	4770      	bx	lr
	...

08008050 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008050:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8008052:	480e      	ldr	r0, [pc, #56]	; (800808c <MX_SPI2_Init+0x3c>)
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <MX_SPI2_Init+0x40>)
 8008056:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008058:	f44f 7382 	mov.w	r3, #260	; 0x104
 800805c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800805e:	2300      	movs	r3, #0
 8008060:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008062:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008064:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008066:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800806c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800806e:	2220      	movs	r2, #32
 8008070:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008072:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008074:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008076:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008078:	230a      	movs	r3, #10
 800807a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800807c:	f7fc fdc0 	bl	8004c00 <HAL_SPI_Init>
 8008080:	b900      	cbnz	r0, 8008084 <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 8008082:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008084:	f7ff ffe2 	bl	800804c <Error_Handler>
}
 8008088:	e7fb      	b.n	8008082 <MX_SPI2_Init+0x32>
 800808a:	bf00      	nop
 800808c:	20004968 	.word	0x20004968
 8008090:	40003800 	.word	0x40003800

08008094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008096:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008098:	2300      	movs	r3, #0
 800809a:	9303      	str	r3, [sp, #12]
 800809c:	9304      	str	r3, [sp, #16]
 800809e:	9305      	str	r3, [sp, #20]
 80080a0:	9306      	str	r3, [sp, #24]
 80080a2:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 80080a4:	6802      	ldr	r2, [r0, #0]
 80080a6:	4b23      	ldr	r3, [pc, #140]	; (8008134 <HAL_SPI_MspInit+0xa0>)
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d001      	beq.n	80080b0 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80080ac:	b009      	add	sp, #36	; 0x24
 80080ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80080b0:	2400      	movs	r4, #0
 80080b2:	9400      	str	r4, [sp, #0]
 80080b4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80080b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080be:	641a      	str	r2, [r3, #64]	; 0x40
 80080c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80080c6:	9200      	str	r2, [sp, #0]
 80080c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080ca:	9401      	str	r4, [sp, #4]
 80080cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ce:	f042 0204 	orr.w	r2, r2, #4
 80080d2:	631a      	str	r2, [r3, #48]	; 0x30
 80080d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d6:	f002 0204 	and.w	r2, r2, #4
 80080da:	9201      	str	r2, [sp, #4]
 80080dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080de:	9402      	str	r4, [sp, #8]
 80080e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e2:	f042 0202 	orr.w	r2, r2, #2
 80080e6:	631a      	str	r2, [r3, #48]	; 0x30
 80080e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	9302      	str	r3, [sp, #8]
 80080f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80080f2:	2304      	movs	r3, #4
 80080f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f6:	2702      	movs	r7, #2
 80080f8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080fa:	2603      	movs	r6, #3
 80080fc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80080fe:	2505      	movs	r5, #5
 8008100:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008102:	a903      	add	r1, sp, #12
 8008104:	480c      	ldr	r0, [pc, #48]	; (8008138 <HAL_SPI_MspInit+0xa4>)
 8008106:	f7fb fae3 	bl	80036d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800810a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800810e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008110:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008112:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008114:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008116:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008118:	a903      	add	r1, sp, #12
 800811a:	4808      	ldr	r0, [pc, #32]	; (800813c <HAL_SPI_MspInit+0xa8>)
 800811c:	f7fb fad8 	bl	80036d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8008120:	4622      	mov	r2, r4
 8008122:	4629      	mov	r1, r5
 8008124:	2024      	movs	r0, #36	; 0x24
 8008126:	f7fa ff85 	bl	8003034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800812a:	2024      	movs	r0, #36	; 0x24
 800812c:	f7fa ffb6 	bl	800309c <HAL_NVIC_EnableIRQ>
}
 8008130:	e7bc      	b.n	80080ac <HAL_SPI_MspInit+0x18>
 8008132:	bf00      	nop
 8008134:	40003800 	.word	0x40003800
 8008138:	40020800 	.word	0x40020800
 800813c:	40020400 	.word	0x40020400

08008140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008140:	b510      	push	{r4, lr}
 8008142:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008144:	2400      	movs	r4, #0
 8008146:	9400      	str	r4, [sp, #0]
 8008148:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <HAL_MspInit+0x60>)
 800814a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800814c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008150:	645a      	str	r2, [r3, #68]	; 0x44
 8008152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008154:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008158:	9200      	str	r2, [sp, #0]
 800815a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800815c:	9401      	str	r4, [sp, #4]
 800815e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008160:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008164:	641a      	str	r2, [r3, #64]	; 0x40
 8008166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008170:	4622      	mov	r2, r4
 8008172:	210f      	movs	r1, #15
 8008174:	f06f 0001 	mvn.w	r0, #1
 8008178:	f7fa ff5c 	bl	8003034 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 11, 0);
 800817c:	4622      	mov	r2, r4
 800817e:	210b      	movs	r1, #11
 8008180:	2004      	movs	r0, #4
 8008182:	f7fa ff57 	bl	8003034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8008186:	2004      	movs	r0, #4
 8008188:	f7fa ff88 	bl	800309c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 10, 0);
 800818c:	4622      	mov	r2, r4
 800818e:	210a      	movs	r1, #10
 8008190:	2005      	movs	r0, #5
 8008192:	f7fa ff4f 	bl	8003034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8008196:	2005      	movs	r0, #5
 8008198:	f7fa ff80 	bl	800309c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800819c:	b002      	add	sp, #8
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	40023800 	.word	0x40023800

080081a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081a4:	b510      	push	{r4, lr}
 80081a6:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80081a8:	2200      	movs	r2, #0
 80081aa:	4601      	mov	r1, r0
 80081ac:	2019      	movs	r0, #25
 80081ae:	f7fa ff41 	bl	8003034 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80081b2:	2019      	movs	r0, #25
 80081b4:	f7fa ff72 	bl	800309c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80081b8:	2400      	movs	r4, #0
 80081ba:	9401      	str	r4, [sp, #4]
 80081bc:	4b13      	ldr	r3, [pc, #76]	; (800820c <HAL_InitTick+0x68>)
 80081be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081c0:	f042 0201 	orr.w	r2, r2, #1
 80081c4:	645a      	str	r2, [r3, #68]	; 0x44
 80081c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80081d0:	a902      	add	r1, sp, #8
 80081d2:	a803      	add	r0, sp, #12
 80081d4:	f7fc fc2e 	bl	8004a34 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80081d8:	f7fc fc1c 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80081dc:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <HAL_InitTick+0x6c>)
 80081de:	fba3 2300 	umull	r2, r3, r3, r0
 80081e2:	0c9b      	lsrs	r3, r3, #18
 80081e4:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80081e6:	480b      	ldr	r0, [pc, #44]	; (8008214 <HAL_InitTick+0x70>)
 80081e8:	4a0b      	ldr	r2, [pc, #44]	; (8008218 <HAL_InitTick+0x74>)
 80081ea:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80081ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80081f0:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80081f2:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80081f4:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081f6:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80081f8:	f7fd fa26 	bl	8005648 <HAL_TIM_Base_Init>
 80081fc:	b110      	cbz	r0, 8008204 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80081fe:	2001      	movs	r0, #1
}
 8008200:	b008      	add	sp, #32
 8008202:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8008204:	4803      	ldr	r0, [pc, #12]	; (8008214 <HAL_InitTick+0x70>)
 8008206:	f7fd f8ff 	bl	8005408 <HAL_TIM_Base_Start_IT>
 800820a:	e7f9      	b.n	8008200 <HAL_InitTick+0x5c>
 800820c:	40023800 	.word	0x40023800
 8008210:	431bde83 	.word	0x431bde83
 8008214:	200049c0 	.word	0x200049c0
 8008218:	40010000 	.word	0x40010000

0800821c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800821c:	4770      	bx	lr

0800821e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800821e:	e7fe      	b.n	800821e <HardFault_Handler>

08008220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008220:	e7fe      	b.n	8008220 <MemManage_Handler>

08008222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008222:	e7fe      	b.n	8008222 <BusFault_Handler>

08008224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008224:	e7fe      	b.n	8008224 <UsageFault_Handler>

08008226 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008226:	4770      	bx	lr

08008228 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8008228:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800822a:	f7fb f97b 	bl	8003524 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800822e:	bd08      	pop	{r3, pc}

08008230 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8008230:	4770      	bx	lr

08008232 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008232:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8008234:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008238:	f7fb fb2c 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800823c:	bd08      	pop	{r3, pc}
	...

08008240 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008240:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008242:	4803      	ldr	r0, [pc, #12]	; (8008250 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8008244:	f7fd f8f5 	bl	8005432 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8008248:	4802      	ldr	r0, [pc, #8]	; (8008254 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800824a:	f7fd f8f2 	bl	8005432 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800824e:	bd08      	pop	{r3, pc}
 8008250:	200049c0 	.word	0x200049c0
 8008254:	20004a40 	.word	0x20004a40

08008258 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008258:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800825a:	4802      	ldr	r0, [pc, #8]	; (8008264 <SPI2_IRQHandler+0xc>)
 800825c:	f7fc ffa6 	bl	80051ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008260:	bd08      	pop	{r3, pc}
 8008262:	bf00      	nop
 8008264:	20004968 	.word	0x20004968

08008268 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008268:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800826a:	4802      	ldr	r0, [pc, #8]	; (8008274 <DMA2_Stream1_IRQHandler+0xc>)
 800826c:	f7fb f816 	bl	800329c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008270:	bd08      	pop	{r3, pc}
 8008272:	bf00      	nop
 8008274:	20004ac0 	.word	0x20004ac0

08008278 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008278:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800827a:	4802      	ldr	r0, [pc, #8]	; (8008284 <USART6_IRQHandler+0xc>)
 800827c:	f7fd fe46 	bl	8005f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	//UART_timeout();
  /* USER CODE END USART6_IRQn 1 */
}
 8008280:	bd08      	pop	{r3, pc}
 8008282:	bf00      	nop
 8008284:	20004b20 	.word	0x20004b20

08008288 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	460d      	mov	r5, r1
 800828c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800828e:	2400      	movs	r4, #0
 8008290:	e004      	b.n	800829c <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8008292:	f3af 8000 	nop.w
 8008296:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008298:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 800829a:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800829c:	42b4      	cmp	r4, r6
 800829e:	dbf8      	blt.n	8008292 <_read+0xa>
	}

return len;
}
 80082a0:	4630      	mov	r0, r6
 80082a2:	bd70      	pop	{r4, r5, r6, pc}

080082a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082a8:	2400      	movs	r4, #0
 80082aa:	e005      	b.n	80082b8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80082ac:	1c4d      	adds	r5, r1, #1
 80082ae:	7808      	ldrb	r0, [r1, #0]
 80082b0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082b4:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 80082b6:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082b8:	42b4      	cmp	r4, r6
 80082ba:	dbf7      	blt.n	80082ac <_write+0x8>
	}
	return len;
}
 80082bc:	4630      	mov	r0, r6
 80082be:	bd70      	pop	{r4, r5, r6, pc}

080082c0 <_close>:

int _close(int file)
{
	return -1;
}
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082c4:	4770      	bx	lr

080082c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80082c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082ca:	604b      	str	r3, [r1, #4]
	return 0;
}
 80082cc:	2000      	movs	r0, #0
 80082ce:	4770      	bx	lr

080082d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80082d0:	2001      	movs	r0, #1
 80082d2:	4770      	bx	lr

080082d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80082d4:	2000      	movs	r0, #0
 80082d6:	4770      	bx	lr

080082d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80082d8:	b508      	push	{r3, lr}
 80082da:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80082dc:	4a0b      	ldr	r2, [pc, #44]	; (800830c <_sbrk+0x34>)
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	b142      	cbz	r2, 80082f4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80082e2:	4a0a      	ldr	r2, [pc, #40]	; (800830c <_sbrk+0x34>)
 80082e4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80082e6:	4403      	add	r3, r0
 80082e8:	466a      	mov	r2, sp
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d806      	bhi.n	80082fc <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80082ee:	4a07      	ldr	r2, [pc, #28]	; (800830c <_sbrk+0x34>)
 80082f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80082f2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80082f4:	4a05      	ldr	r2, [pc, #20]	; (800830c <_sbrk+0x34>)
 80082f6:	4906      	ldr	r1, [pc, #24]	; (8008310 <_sbrk+0x38>)
 80082f8:	6011      	str	r1, [r2, #0]
 80082fa:	e7f2      	b.n	80082e2 <_sbrk+0xa>
		errno = ENOMEM;
 80082fc:	f001 fda8 	bl	8009e50 <__errno>
 8008300:	230c      	movs	r3, #12
 8008302:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8008304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008308:	e7f3      	b.n	80082f2 <_sbrk+0x1a>
 800830a:	bf00      	nop
 800830c:	20004368 	.word	0x20004368
 8008310:	20004b68 	.word	0x20004b68

08008314 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008314:	490f      	ldr	r1, [pc, #60]	; (8008354 <SystemInit+0x40>)
 8008316:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800831a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800831e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008322:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <SystemInit+0x44>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	f042 0201 	orr.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800832c:	2000      	movs	r0, #0
 800832e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008336:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800833a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800833c:	4a07      	ldr	r2, [pc, #28]	; (800835c <SystemInit+0x48>)
 800833e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008346:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008348:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800834a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800834e:	608b      	str	r3, [r1, #8]
#endif
}
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	e000ed00 	.word	0xe000ed00
 8008358:	40023800 	.word	0x40023800
 800835c:	24003010 	.word	0x24003010

08008360 <MX_TIM10_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8008360:	b508      	push	{r3, lr}

  htim10.Instance = TIM10;
 8008362:	480a      	ldr	r0, [pc, #40]	; (800838c <MX_TIM10_Init+0x2c>)
 8008364:	4b0a      	ldr	r3, [pc, #40]	; (8008390 <MX_TIM10_Init+0x30>)
 8008366:	6003      	str	r3, [r0, #0]
  htim10.Init.Prescaler = 10000;
 8008368:	f242 7310 	movw	r3, #10000	; 0x2710
 800836c:	6043      	str	r3, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800836e:	2300      	movs	r3, #0
 8008370:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 1000;
 8008372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008376:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008378:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800837a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800837c:	f7fd f964 	bl	8005648 <HAL_TIM_Base_Init>
 8008380:	b900      	cbnz	r0, 8008384 <MX_TIM10_Init+0x24>
  {
    Error_Handler();
  }

}
 8008382:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008384:	f7ff fe62 	bl	800804c <Error_Handler>
}
 8008388:	e7fb      	b.n	8008382 <MX_TIM10_Init+0x22>
 800838a:	bf00      	nop
 800838c:	20004a40 	.word	0x20004a40
 8008390:	40014400 	.word	0x40014400

08008394 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8008394:	b508      	push	{r3, lr}

  htim11.Instance = TIM11;
 8008396:	4809      	ldr	r0, [pc, #36]	; (80083bc <MX_TIM11_Init+0x28>)
 8008398:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <MX_TIM11_Init+0x2c>)
 800839a:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100;
 800839c:	2364      	movs	r3, #100	; 0x64
 800839e:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083a0:	2300      	movs	r3, #0
 80083a2:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 80083a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083a8:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083aa:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083ac:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80083ae:	f7fd f94b 	bl	8005648 <HAL_TIM_Base_Init>
 80083b2:	b900      	cbnz	r0, 80083b6 <MX_TIM11_Init+0x22>
  {
    Error_Handler();
  }

}
 80083b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80083b6:	f7ff fe49 	bl	800804c <Error_Handler>
}
 80083ba:	e7fb      	b.n	80083b4 <MX_TIM11_Init+0x20>
 80083bc:	20004a80 	.word	0x20004a80
 80083c0:	40014800 	.word	0x40014800

080083c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 80083c4:	6802      	ldr	r2, [r0, #0]
 80083c6:	4b09      	ldr	r3, [pc, #36]	; (80083ec <HAL_TIM_PWM_MspInit+0x28>)
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d000      	beq.n	80083ce <HAL_TIM_PWM_MspInit+0xa>
 80083cc:	4770      	bx	lr
{
 80083ce:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80083d0:	2300      	movs	r3, #0
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <HAL_TIM_PWM_MspInit+0x2c>)
 80083d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083d8:	f042 0204 	orr.w	r2, r2, #4
 80083dc:	641a      	str	r2, [r3, #64]	; 0x40
 80083de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80083e8:	b002      	add	sp, #8
 80083ea:	4770      	bx	lr
 80083ec:	40000800 	.word	0x40000800
 80083f0:	40023800 	.word	0x40023800

080083f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80083f4:	b500      	push	{lr}
 80083f6:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM10)
 80083f8:	6803      	ldr	r3, [r0, #0]
 80083fa:	4a15      	ldr	r2, [pc, #84]	; (8008450 <HAL_TIM_Base_MspInit+0x5c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d005      	beq.n	800840c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM11)
 8008400:	4a14      	ldr	r2, [pc, #80]	; (8008454 <HAL_TIM_Base_MspInit+0x60>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d016      	beq.n	8008434 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8008406:	b003      	add	sp, #12
 8008408:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 800840c:	2200      	movs	r2, #0
 800840e:	9200      	str	r2, [sp, #0]
 8008410:	4b11      	ldr	r3, [pc, #68]	; (8008458 <HAL_TIM_Base_MspInit+0x64>)
 8008412:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008414:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008418:	6459      	str	r1, [r3, #68]	; 0x44
 800841a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8008424:	2105      	movs	r1, #5
 8008426:	2019      	movs	r0, #25
 8008428:	f7fa fe04 	bl	8003034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800842c:	2019      	movs	r0, #25
 800842e:	f7fa fe35 	bl	800309c <HAL_NVIC_EnableIRQ>
 8008432:	e7e8      	b.n	8008406 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8008434:	2300      	movs	r3, #0
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	4b07      	ldr	r3, [pc, #28]	; (8008458 <HAL_TIM_Base_MspInit+0x64>)
 800843a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800843c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008440:	645a      	str	r2, [r3, #68]	; 0x44
 8008442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	9b01      	ldr	r3, [sp, #4]
}
 800844c:	e7db      	b.n	8008406 <HAL_TIM_Base_MspInit+0x12>
 800844e:	bf00      	nop
 8008450:	40014400 	.word	0x40014400
 8008454:	40014800 	.word	0x40014800
 8008458:	40023800 	.word	0x40023800

0800845c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800845c:	b500      	push	{lr}
 800845e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008460:	2300      	movs	r3, #0
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	9302      	str	r3, [sp, #8]
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 800846c:	6802      	ldr	r2, [r0, #0]
 800846e:	4b0e      	ldr	r3, [pc, #56]	; (80084a8 <HAL_TIM_MspPostInit+0x4c>)
 8008470:	429a      	cmp	r2, r3
 8008472:	d002      	beq.n	800847a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008474:	b007      	add	sp, #28
 8008476:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800847a:	2300      	movs	r3, #0
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	4b0b      	ldr	r3, [pc, #44]	; (80084ac <HAL_TIM_MspPostInit+0x50>)
 8008480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008482:	f042 0202 	orr.w	r2, r2, #2
 8008486:	631a      	str	r2, [r3, #48]	; 0x30
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008492:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008496:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008498:	2302      	movs	r3, #2
 800849a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800849c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800849e:	a901      	add	r1, sp, #4
 80084a0:	4803      	ldr	r0, [pc, #12]	; (80084b0 <HAL_TIM_MspPostInit+0x54>)
 80084a2:	f7fb f915 	bl	80036d0 <HAL_GPIO_Init>
}
 80084a6:	e7e5      	b.n	8008474 <HAL_TIM_MspPostInit+0x18>
 80084a8:	40000800 	.word	0x40000800
 80084ac:	40023800 	.word	0x40023800
 80084b0:	40020400 	.word	0x40020400

080084b4 <MX_TIM4_Init>:
{
 80084b4:	b500      	push	{lr}
 80084b6:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084b8:	2300      	movs	r3, #0
 80084ba:	9308      	str	r3, [sp, #32]
 80084bc:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80084be:	9301      	str	r3, [sp, #4]
 80084c0:	9302      	str	r3, [sp, #8]
 80084c2:	9303      	str	r3, [sp, #12]
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	9305      	str	r3, [sp, #20]
 80084c8:	9306      	str	r3, [sp, #24]
 80084ca:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80084cc:	4826      	ldr	r0, [pc, #152]	; (8008568 <MX_TIM4_Init+0xb4>)
 80084ce:	4a27      	ldr	r2, [pc, #156]	; (800856c <MX_TIM4_Init+0xb8>)
 80084d0:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9;
 80084d2:	2209      	movs	r2, #9
 80084d4:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084d6:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 20000;
 80084d8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80084dc:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084de:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084e0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80084e2:	f7fd f8ca 	bl	800567a <HAL_TIM_PWM_Init>
 80084e6:	bb68      	cbnz	r0, 8008544 <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80084e8:	2300      	movs	r3, #0
 80084ea:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084ec:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80084ee:	a908      	add	r1, sp, #32
 80084f0:	481d      	ldr	r0, [pc, #116]	; (8008568 <MX_TIM4_Init+0xb4>)
 80084f2:	f7fd f9db 	bl	80058ac <HAL_TIMEx_MasterConfigSynchronization>
 80084f6:	bb40      	cbnz	r0, 800854a <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80084f8:	2360      	movs	r3, #96	; 0x60
 80084fa:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80084fc:	2200      	movs	r2, #0
 80084fe:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008500:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8008502:	2304      	movs	r3, #4
 8008504:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008506:	eb0d 0103 	add.w	r1, sp, r3
 800850a:	4817      	ldr	r0, [pc, #92]	; (8008568 <MX_TIM4_Init+0xb4>)
 800850c:	f7fd f900 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 8008510:	b9f0      	cbnz	r0, 8008550 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008512:	2204      	movs	r2, #4
 8008514:	eb0d 0102 	add.w	r1, sp, r2
 8008518:	4813      	ldr	r0, [pc, #76]	; (8008568 <MX_TIM4_Init+0xb4>)
 800851a:	f7fd f8f9 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 800851e:	b9d0      	cbnz	r0, 8008556 <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008520:	2208      	movs	r2, #8
 8008522:	a901      	add	r1, sp, #4
 8008524:	4810      	ldr	r0, [pc, #64]	; (8008568 <MX_TIM4_Init+0xb4>)
 8008526:	f7fd f8f3 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 800852a:	b9b8      	cbnz	r0, 800855c <MX_TIM4_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800852c:	220c      	movs	r2, #12
 800852e:	a901      	add	r1, sp, #4
 8008530:	480d      	ldr	r0, [pc, #52]	; (8008568 <MX_TIM4_Init+0xb4>)
 8008532:	f7fd f8ed 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 8008536:	b9a0      	cbnz	r0, 8008562 <MX_TIM4_Init+0xae>
  HAL_TIM_MspPostInit(&htim4);
 8008538:	480b      	ldr	r0, [pc, #44]	; (8008568 <MX_TIM4_Init+0xb4>)
 800853a:	f7ff ff8f 	bl	800845c <HAL_TIM_MspPostInit>
}
 800853e:	b00b      	add	sp, #44	; 0x2c
 8008540:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008544:	f7ff fd82 	bl	800804c <Error_Handler>
 8008548:	e7ce      	b.n	80084e8 <MX_TIM4_Init+0x34>
    Error_Handler();
 800854a:	f7ff fd7f 	bl	800804c <Error_Handler>
 800854e:	e7d3      	b.n	80084f8 <MX_TIM4_Init+0x44>
    Error_Handler();
 8008550:	f7ff fd7c 	bl	800804c <Error_Handler>
 8008554:	e7dd      	b.n	8008512 <MX_TIM4_Init+0x5e>
    Error_Handler();
 8008556:	f7ff fd79 	bl	800804c <Error_Handler>
 800855a:	e7e1      	b.n	8008520 <MX_TIM4_Init+0x6c>
    Error_Handler();
 800855c:	f7ff fd76 	bl	800804c <Error_Handler>
 8008560:	e7e4      	b.n	800852c <MX_TIM4_Init+0x78>
    Error_Handler();
 8008562:	f7ff fd73 	bl	800804c <Error_Handler>
 8008566:	e7e7      	b.n	8008538 <MX_TIM4_Init+0x84>
 8008568:	20004a00 	.word	0x20004a00
 800856c:	40000800 	.word	0x40000800

08008570 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008570:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8008572:	480a      	ldr	r0, [pc, #40]	; (800859c <MX_USART6_UART_Init+0x2c>)
 8008574:	4b0a      	ldr	r3, [pc, #40]	; (80085a0 <MX_USART6_UART_Init+0x30>)
 8008576:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 9600;
 8008578:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800857c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800857e:	2300      	movs	r3, #0
 8008580:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008582:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008584:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008586:	220c      	movs	r2, #12
 8008588:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800858a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800858c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800858e:	f7fd fbc0 	bl	8005d12 <HAL_UART_Init>
 8008592:	b900      	cbnz	r0, 8008596 <MX_USART6_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8008594:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008596:	f7ff fd59 	bl	800804c <Error_Handler>
}
 800859a:	e7fb      	b.n	8008594 <MX_USART6_UART_Init+0x24>
 800859c:	20004b20 	.word	0x20004b20
 80085a0:	40011400 	.word	0x40011400

080085a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80085a4:	b530      	push	{r4, r5, lr}
 80085a6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085a8:	2300      	movs	r3, #0
 80085aa:	9303      	str	r3, [sp, #12]
 80085ac:	9304      	str	r3, [sp, #16]
 80085ae:	9305      	str	r3, [sp, #20]
 80085b0:	9306      	str	r3, [sp, #24]
 80085b2:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 80085b4:	6802      	ldr	r2, [r0, #0]
 80085b6:	4b2a      	ldr	r3, [pc, #168]	; (8008660 <HAL_UART_MspInit+0xbc>)
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d001      	beq.n	80085c0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART6_MspInit 1 */
    // Enable RX idle interrupt, which we use to handle variable-length messages
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
  /* USER CODE END USART6_MspInit 1 */
  }
}
 80085bc:	b009      	add	sp, #36	; 0x24
 80085be:	bd30      	pop	{r4, r5, pc}
 80085c0:	4604      	mov	r4, r0
    __HAL_RCC_USART6_CLK_ENABLE();
 80085c2:	2500      	movs	r5, #0
 80085c4:	9501      	str	r5, [sp, #4]
 80085c6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80085ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085cc:	f042 0220 	orr.w	r2, r2, #32
 80085d0:	645a      	str	r2, [r3, #68]	; 0x44
 80085d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085d4:	f002 0220 	and.w	r2, r2, #32
 80085d8:	9201      	str	r2, [sp, #4]
 80085da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085dc:	9502      	str	r5, [sp, #8]
 80085de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085e0:	f042 0204 	orr.w	r2, r2, #4
 80085e4:	631a      	str	r2, [r3, #48]	; 0x30
 80085e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	9302      	str	r3, [sp, #8]
 80085ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80085f0:	23c0      	movs	r3, #192	; 0xc0
 80085f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f4:	2302      	movs	r3, #2
 80085f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80085f8:	2301      	movs	r3, #1
 80085fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085fc:	2303      	movs	r3, #3
 80085fe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008600:	2308      	movs	r3, #8
 8008602:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008604:	a903      	add	r1, sp, #12
 8008606:	4817      	ldr	r0, [pc, #92]	; (8008664 <HAL_UART_MspInit+0xc0>)
 8008608:	f7fb f862 	bl	80036d0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800860c:	4816      	ldr	r0, [pc, #88]	; (8008668 <HAL_UART_MspInit+0xc4>)
 800860e:	4b17      	ldr	r3, [pc, #92]	; (800866c <HAL_UART_MspInit+0xc8>)
 8008610:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8008612:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8008616:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008618:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800861a:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800861c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008620:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008622:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008624:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8008626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800862a:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800862c:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800862e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8008630:	f7fa fdba 	bl	80031a8 <HAL_DMA_Init>
 8008634:	b980      	cbnz	r0, 8008658 <HAL_UART_MspInit+0xb4>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8008636:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <HAL_UART_MspInit+0xc4>)
 8008638:	6363      	str	r3, [r4, #52]	; 0x34
 800863a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 800863c:	2200      	movs	r2, #0
 800863e:	2106      	movs	r1, #6
 8008640:	2047      	movs	r0, #71	; 0x47
 8008642:	f7fa fcf7 	bl	8003034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8008646:	2047      	movs	r0, #71	; 0x47
 8008648:	f7fa fd28 	bl	800309c <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
 800864c:	6822      	ldr	r2, [r4, #0]
 800864e:	68d3      	ldr	r3, [r2, #12]
 8008650:	f043 0310 	orr.w	r3, r3, #16
 8008654:	60d3      	str	r3, [r2, #12]
}
 8008656:	e7b1      	b.n	80085bc <HAL_UART_MspInit+0x18>
      Error_Handler();
 8008658:	f7ff fcf8 	bl	800804c <Error_Handler>
 800865c:	e7eb      	b.n	8008636 <HAL_UART_MspInit+0x92>
 800865e:	bf00      	nop
 8008660:	40011400 	.word	0x40011400
 8008664:	40020800 	.word	0x40020800
 8008668:	20004ac0 	.word	0x20004ac0
 800866c:	40026428 	.word	0x40026428

08008670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80086a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008674:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008676:	e003      	b.n	8008680 <LoopCopyDataInit>

08008678 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008678:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800867a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800867c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800867e:	3104      	adds	r1, #4

08008680 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008680:	480b      	ldr	r0, [pc, #44]	; (80086b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008682:	4b0c      	ldr	r3, [pc, #48]	; (80086b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008684:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008686:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008688:	d3f6      	bcc.n	8008678 <CopyDataInit>
  ldr  r2, =_sbss
 800868a:	4a0b      	ldr	r2, [pc, #44]	; (80086b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800868c:	e002      	b.n	8008694 <LoopFillZerobss>

0800868e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800868e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008690:	f842 3b04 	str.w	r3, [r2], #4

08008694 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008694:	4b09      	ldr	r3, [pc, #36]	; (80086bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008696:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008698:	d3f9      	bcc.n	800868e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800869a:	f7ff fe3b 	bl	8008314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800869e:	f001 fbdd 	bl	8009e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80086a2:	f7ff fcab 	bl	8007ffc <main>
  bx  lr    
 80086a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80086a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80086ac:	0800ebe0 	.word	0x0800ebe0
  ldr  r0, =_sdata
 80086b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80086b4:	20000268 	.word	0x20000268
  ldr  r2, =_sbss
 80086b8:	20000268 	.word	0x20000268
  ldr  r3, = _ebss
 80086bc:	20004b64 	.word	0x20004b64

080086c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80086c0:	e7fe      	b.n	80086c0 <ADC_IRQHandler>
	...

080086c4 <round>:
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c6:	ec57 6b10 	vmov	r6, r7, d0
 80086ca:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80086ce:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80086d2:	2c13      	cmp	r4, #19
 80086d4:	463b      	mov	r3, r7
 80086d6:	463d      	mov	r5, r7
 80086d8:	dc17      	bgt.n	800870a <round+0x46>
 80086da:	2c00      	cmp	r4, #0
 80086dc:	da09      	bge.n	80086f2 <round+0x2e>
 80086de:	3401      	adds	r4, #1
 80086e0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80086e4:	d103      	bne.n	80086ee <round+0x2a>
 80086e6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80086ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086ee:	2100      	movs	r1, #0
 80086f0:	e02c      	b.n	800874c <round+0x88>
 80086f2:	4a18      	ldr	r2, [pc, #96]	; (8008754 <round+0x90>)
 80086f4:	4122      	asrs	r2, r4
 80086f6:	4217      	tst	r7, r2
 80086f8:	d100      	bne.n	80086fc <round+0x38>
 80086fa:	b19e      	cbz	r6, 8008724 <round+0x60>
 80086fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008700:	4123      	asrs	r3, r4
 8008702:	442b      	add	r3, r5
 8008704:	ea23 0302 	bic.w	r3, r3, r2
 8008708:	e7f1      	b.n	80086ee <round+0x2a>
 800870a:	2c33      	cmp	r4, #51	; 0x33
 800870c:	dd0d      	ble.n	800872a <round+0x66>
 800870e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008712:	d107      	bne.n	8008724 <round+0x60>
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	ee10 2a10 	vmov	r2, s0
 800871c:	f7f7 fdbe 	bl	800029c <__adddf3>
 8008720:	4606      	mov	r6, r0
 8008722:	460f      	mov	r7, r1
 8008724:	ec47 6b10 	vmov	d0, r6, r7
 8008728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800872a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800872e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008732:	40d0      	lsrs	r0, r2
 8008734:	4206      	tst	r6, r0
 8008736:	d0f5      	beq.n	8008724 <round+0x60>
 8008738:	2201      	movs	r2, #1
 800873a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800873e:	fa02 f404 	lsl.w	r4, r2, r4
 8008742:	1931      	adds	r1, r6, r4
 8008744:	bf28      	it	cs
 8008746:	189b      	addcs	r3, r3, r2
 8008748:	ea21 0100 	bic.w	r1, r1, r0
 800874c:	461f      	mov	r7, r3
 800874e:	460e      	mov	r6, r1
 8008750:	e7e8      	b.n	8008724 <round+0x60>
 8008752:	bf00      	nop
 8008754:	000fffff 	.word	0x000fffff

08008758 <pow>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	ed2d 8b04 	vpush	{d8-d9}
 8008760:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008a34 <pow+0x2dc>
 8008764:	b08d      	sub	sp, #52	; 0x34
 8008766:	ec57 6b10 	vmov	r6, r7, d0
 800876a:	ec55 4b11 	vmov	r4, r5, d1
 800876e:	f000 fa17 	bl	8008ba0 <__ieee754_pow>
 8008772:	f999 3000 	ldrsb.w	r3, [r9]
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	3301      	adds	r3, #1
 800877a:	eeb0 8a40 	vmov.f32	s16, s0
 800877e:	eef0 8a60 	vmov.f32	s17, s1
 8008782:	46c8      	mov	r8, r9
 8008784:	d05f      	beq.n	8008846 <pow+0xee>
 8008786:	4622      	mov	r2, r4
 8008788:	462b      	mov	r3, r5
 800878a:	4620      	mov	r0, r4
 800878c:	4629      	mov	r1, r5
 800878e:	f7f8 f9d5 	bl	8000b3c <__aeabi_dcmpun>
 8008792:	4683      	mov	fp, r0
 8008794:	2800      	cmp	r0, #0
 8008796:	d156      	bne.n	8008846 <pow+0xee>
 8008798:	4632      	mov	r2, r6
 800879a:	463b      	mov	r3, r7
 800879c:	4630      	mov	r0, r6
 800879e:	4639      	mov	r1, r7
 80087a0:	f7f8 f9cc 	bl	8000b3c <__aeabi_dcmpun>
 80087a4:	9001      	str	r0, [sp, #4]
 80087a6:	b1e8      	cbz	r0, 80087e4 <pow+0x8c>
 80087a8:	2200      	movs	r2, #0
 80087aa:	2300      	movs	r3, #0
 80087ac:	4620      	mov	r0, r4
 80087ae:	4629      	mov	r1, r5
 80087b0:	f7f8 f992 	bl	8000ad8 <__aeabi_dcmpeq>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d046      	beq.n	8008846 <pow+0xee>
 80087b8:	2301      	movs	r3, #1
 80087ba:	9302      	str	r3, [sp, #8]
 80087bc:	4b96      	ldr	r3, [pc, #600]	; (8008a18 <pow+0x2c0>)
 80087be:	9303      	str	r3, [sp, #12]
 80087c0:	4b96      	ldr	r3, [pc, #600]	; (8008a1c <pow+0x2c4>)
 80087c2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80087c6:	2200      	movs	r2, #0
 80087c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087cc:	9b00      	ldr	r3, [sp, #0]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80087d4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80087d8:	d033      	beq.n	8008842 <pow+0xea>
 80087da:	a802      	add	r0, sp, #8
 80087dc:	f001 f948 	bl	8009a70 <matherr>
 80087e0:	bb48      	cbnz	r0, 8008836 <pow+0xde>
 80087e2:	e05d      	b.n	80088a0 <pow+0x148>
 80087e4:	f04f 0a00 	mov.w	sl, #0
 80087e8:	f04f 0b00 	mov.w	fp, #0
 80087ec:	4652      	mov	r2, sl
 80087ee:	465b      	mov	r3, fp
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	f7f8 f970 	bl	8000ad8 <__aeabi_dcmpeq>
 80087f8:	ec4b ab19 	vmov	d9, sl, fp
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d054      	beq.n	80088aa <pow+0x152>
 8008800:	4652      	mov	r2, sl
 8008802:	465b      	mov	r3, fp
 8008804:	4620      	mov	r0, r4
 8008806:	4629      	mov	r1, r5
 8008808:	f7f8 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800880c:	4680      	mov	r8, r0
 800880e:	b318      	cbz	r0, 8008858 <pow+0x100>
 8008810:	2301      	movs	r3, #1
 8008812:	9302      	str	r3, [sp, #8]
 8008814:	4b80      	ldr	r3, [pc, #512]	; (8008a18 <pow+0x2c0>)
 8008816:	9303      	str	r3, [sp, #12]
 8008818:	9b01      	ldr	r3, [sp, #4]
 800881a:	930a      	str	r3, [sp, #40]	; 0x28
 800881c:	9b00      	ldr	r3, [sp, #0]
 800881e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008822:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008826:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0d5      	beq.n	80087da <pow+0x82>
 800882e:	4b7b      	ldr	r3, [pc, #492]	; (8008a1c <pow+0x2c4>)
 8008830:	2200      	movs	r2, #0
 8008832:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008838:	b11b      	cbz	r3, 8008842 <pow+0xea>
 800883a:	f001 fb09 	bl	8009e50 <__errno>
 800883e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008840:	6003      	str	r3, [r0, #0]
 8008842:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008846:	eeb0 0a48 	vmov.f32	s0, s16
 800884a:	eef0 0a68 	vmov.f32	s1, s17
 800884e:	b00d      	add	sp, #52	; 0x34
 8008850:	ecbd 8b04 	vpop	{d8-d9}
 8008854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008858:	ec45 4b10 	vmov	d0, r4, r5
 800885c:	f001 f900 	bl	8009a60 <finite>
 8008860:	2800      	cmp	r0, #0
 8008862:	d0f0      	beq.n	8008846 <pow+0xee>
 8008864:	4652      	mov	r2, sl
 8008866:	465b      	mov	r3, fp
 8008868:	4620      	mov	r0, r4
 800886a:	4629      	mov	r1, r5
 800886c:	f7f8 f93e 	bl	8000aec <__aeabi_dcmplt>
 8008870:	2800      	cmp	r0, #0
 8008872:	d0e8      	beq.n	8008846 <pow+0xee>
 8008874:	2301      	movs	r3, #1
 8008876:	9302      	str	r3, [sp, #8]
 8008878:	4b67      	ldr	r3, [pc, #412]	; (8008a18 <pow+0x2c0>)
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	f999 3000 	ldrsb.w	r3, [r9]
 8008880:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008884:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008888:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800888c:	b913      	cbnz	r3, 8008894 <pow+0x13c>
 800888e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008892:	e7a2      	b.n	80087da <pow+0x82>
 8008894:	4962      	ldr	r1, [pc, #392]	; (8008a20 <pow+0x2c8>)
 8008896:	2000      	movs	r0, #0
 8008898:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d19c      	bne.n	80087da <pow+0x82>
 80088a0:	f001 fad6 	bl	8009e50 <__errno>
 80088a4:	2321      	movs	r3, #33	; 0x21
 80088a6:	6003      	str	r3, [r0, #0]
 80088a8:	e7c5      	b.n	8008836 <pow+0xde>
 80088aa:	eeb0 0a48 	vmov.f32	s0, s16
 80088ae:	eef0 0a68 	vmov.f32	s1, s17
 80088b2:	f001 f8d5 	bl	8009a60 <finite>
 80088b6:	9000      	str	r0, [sp, #0]
 80088b8:	2800      	cmp	r0, #0
 80088ba:	f040 8081 	bne.w	80089c0 <pow+0x268>
 80088be:	ec47 6b10 	vmov	d0, r6, r7
 80088c2:	f001 f8cd 	bl	8009a60 <finite>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d07a      	beq.n	80089c0 <pow+0x268>
 80088ca:	ec45 4b10 	vmov	d0, r4, r5
 80088ce:	f001 f8c7 	bl	8009a60 <finite>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d074      	beq.n	80089c0 <pow+0x268>
 80088d6:	ec53 2b18 	vmov	r2, r3, d8
 80088da:	ee18 0a10 	vmov	r0, s16
 80088de:	4619      	mov	r1, r3
 80088e0:	f7f8 f92c 	bl	8000b3c <__aeabi_dcmpun>
 80088e4:	f999 9000 	ldrsb.w	r9, [r9]
 80088e8:	4b4b      	ldr	r3, [pc, #300]	; (8008a18 <pow+0x2c0>)
 80088ea:	b1b0      	cbz	r0, 800891a <pow+0x1c2>
 80088ec:	2201      	movs	r2, #1
 80088ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088f2:	9b00      	ldr	r3, [sp, #0]
 80088f4:	930a      	str	r3, [sp, #40]	; 0x28
 80088f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80088fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80088fe:	f1b9 0f00 	cmp.w	r9, #0
 8008902:	d0c4      	beq.n	800888e <pow+0x136>
 8008904:	4652      	mov	r2, sl
 8008906:	465b      	mov	r3, fp
 8008908:	4650      	mov	r0, sl
 800890a:	4659      	mov	r1, fp
 800890c:	f7f7 ffa6 	bl	800085c <__aeabi_ddiv>
 8008910:	f1b9 0f02 	cmp.w	r9, #2
 8008914:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008918:	e7c1      	b.n	800889e <pow+0x146>
 800891a:	2203      	movs	r2, #3
 800891c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008920:	900a      	str	r0, [sp, #40]	; 0x28
 8008922:	4629      	mov	r1, r5
 8008924:	4620      	mov	r0, r4
 8008926:	2200      	movs	r2, #0
 8008928:	4b3e      	ldr	r3, [pc, #248]	; (8008a24 <pow+0x2cc>)
 800892a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800892e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008932:	f7f7 fe69 	bl	8000608 <__aeabi_dmul>
 8008936:	4604      	mov	r4, r0
 8008938:	460d      	mov	r5, r1
 800893a:	f1b9 0f00 	cmp.w	r9, #0
 800893e:	d124      	bne.n	800898a <pow+0x232>
 8008940:	4b39      	ldr	r3, [pc, #228]	; (8008a28 <pow+0x2d0>)
 8008942:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008946:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800894a:	4630      	mov	r0, r6
 800894c:	4652      	mov	r2, sl
 800894e:	465b      	mov	r3, fp
 8008950:	4639      	mov	r1, r7
 8008952:	f7f8 f8cb 	bl	8000aec <__aeabi_dcmplt>
 8008956:	2800      	cmp	r0, #0
 8008958:	d056      	beq.n	8008a08 <pow+0x2b0>
 800895a:	ec45 4b10 	vmov	d0, r4, r5
 800895e:	f001 f893 	bl	8009a88 <rint>
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	ec51 0b10 	vmov	r0, r1, d0
 800896a:	f7f8 f8b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800896e:	b920      	cbnz	r0, 800897a <pow+0x222>
 8008970:	4b2e      	ldr	r3, [pc, #184]	; (8008a2c <pow+0x2d4>)
 8008972:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008976:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800897a:	f998 3000 	ldrsb.w	r3, [r8]
 800897e:	2b02      	cmp	r3, #2
 8008980:	d142      	bne.n	8008a08 <pow+0x2b0>
 8008982:	f001 fa65 	bl	8009e50 <__errno>
 8008986:	2322      	movs	r3, #34	; 0x22
 8008988:	e78d      	b.n	80088a6 <pow+0x14e>
 800898a:	4b29      	ldr	r3, [pc, #164]	; (8008a30 <pow+0x2d8>)
 800898c:	2200      	movs	r2, #0
 800898e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008992:	4630      	mov	r0, r6
 8008994:	4652      	mov	r2, sl
 8008996:	465b      	mov	r3, fp
 8008998:	4639      	mov	r1, r7
 800899a:	f7f8 f8a7 	bl	8000aec <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d0eb      	beq.n	800897a <pow+0x222>
 80089a2:	ec45 4b10 	vmov	d0, r4, r5
 80089a6:	f001 f86f 	bl	8009a88 <rint>
 80089aa:	4622      	mov	r2, r4
 80089ac:	462b      	mov	r3, r5
 80089ae:	ec51 0b10 	vmov	r0, r1, d0
 80089b2:	f7f8 f891 	bl	8000ad8 <__aeabi_dcmpeq>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d1df      	bne.n	800897a <pow+0x222>
 80089ba:	2200      	movs	r2, #0
 80089bc:	4b18      	ldr	r3, [pc, #96]	; (8008a20 <pow+0x2c8>)
 80089be:	e7da      	b.n	8008976 <pow+0x21e>
 80089c0:	2200      	movs	r2, #0
 80089c2:	2300      	movs	r3, #0
 80089c4:	ec51 0b18 	vmov	r0, r1, d8
 80089c8:	f7f8 f886 	bl	8000ad8 <__aeabi_dcmpeq>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f43f af3a 	beq.w	8008846 <pow+0xee>
 80089d2:	ec47 6b10 	vmov	d0, r6, r7
 80089d6:	f001 f843 	bl	8009a60 <finite>
 80089da:	2800      	cmp	r0, #0
 80089dc:	f43f af33 	beq.w	8008846 <pow+0xee>
 80089e0:	ec45 4b10 	vmov	d0, r4, r5
 80089e4:	f001 f83c 	bl	8009a60 <finite>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f43f af2c 	beq.w	8008846 <pow+0xee>
 80089ee:	2304      	movs	r3, #4
 80089f0:	9302      	str	r3, [sp, #8]
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <pow+0x2c0>)
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	2300      	movs	r3, #0
 80089f8:	930a      	str	r3, [sp, #40]	; 0x28
 80089fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80089fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008a02:	ed8d 9b08 	vstr	d9, [sp, #32]
 8008a06:	e7b8      	b.n	800897a <pow+0x222>
 8008a08:	a802      	add	r0, sp, #8
 8008a0a:	f001 f831 	bl	8009a70 <matherr>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f47f af11 	bne.w	8008836 <pow+0xde>
 8008a14:	e7b5      	b.n	8008982 <pow+0x22a>
 8008a16:	bf00      	nop
 8008a18:	0800e844 	.word	0x0800e844
 8008a1c:	3ff00000 	.word	0x3ff00000
 8008a20:	fff00000 	.word	0xfff00000
 8008a24:	3fe00000 	.word	0x3fe00000
 8008a28:	47efffff 	.word	0x47efffff
 8008a2c:	c7efffff 	.word	0xc7efffff
 8008a30:	7ff00000 	.word	0x7ff00000
 8008a34:	20000094 	.word	0x20000094

08008a38 <sqrt>:
 8008a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	ed2d 8b02 	vpush	{d8}
 8008a40:	b08b      	sub	sp, #44	; 0x2c
 8008a42:	ec55 4b10 	vmov	r4, r5, d0
 8008a46:	f000 fdb9 	bl	80095bc <__ieee754_sqrt>
 8008a4a:	4b26      	ldr	r3, [pc, #152]	; (8008ae4 <sqrt+0xac>)
 8008a4c:	eeb0 8a40 	vmov.f32	s16, s0
 8008a50:	eef0 8a60 	vmov.f32	s17, s1
 8008a54:	f993 6000 	ldrsb.w	r6, [r3]
 8008a58:	1c73      	adds	r3, r6, #1
 8008a5a:	d02a      	beq.n	8008ab2 <sqrt+0x7a>
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	462b      	mov	r3, r5
 8008a60:	4620      	mov	r0, r4
 8008a62:	4629      	mov	r1, r5
 8008a64:	f7f8 f86a 	bl	8000b3c <__aeabi_dcmpun>
 8008a68:	4607      	mov	r7, r0
 8008a6a:	bb10      	cbnz	r0, 8008ab2 <sqrt+0x7a>
 8008a6c:	f04f 0800 	mov.w	r8, #0
 8008a70:	f04f 0900 	mov.w	r9, #0
 8008a74:	4642      	mov	r2, r8
 8008a76:	464b      	mov	r3, r9
 8008a78:	4620      	mov	r0, r4
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	f7f8 f836 	bl	8000aec <__aeabi_dcmplt>
 8008a80:	b1b8      	cbz	r0, 8008ab2 <sqrt+0x7a>
 8008a82:	2301      	movs	r3, #1
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4b18      	ldr	r3, [pc, #96]	; (8008ae8 <sqrt+0xb0>)
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	9708      	str	r7, [sp, #32]
 8008a8c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008a90:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008a94:	b9b6      	cbnz	r6, 8008ac4 <sqrt+0x8c>
 8008a96:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008a9a:	4668      	mov	r0, sp
 8008a9c:	f000 ffe8 	bl	8009a70 <matherr>
 8008aa0:	b1d0      	cbz	r0, 8008ad8 <sqrt+0xa0>
 8008aa2:	9b08      	ldr	r3, [sp, #32]
 8008aa4:	b11b      	cbz	r3, 8008aae <sqrt+0x76>
 8008aa6:	f001 f9d3 	bl	8009e50 <__errno>
 8008aaa:	9b08      	ldr	r3, [sp, #32]
 8008aac:	6003      	str	r3, [r0, #0]
 8008aae:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008ab2:	eeb0 0a48 	vmov.f32	s0, s16
 8008ab6:	eef0 0a68 	vmov.f32	s1, s17
 8008aba:	b00b      	add	sp, #44	; 0x2c
 8008abc:	ecbd 8b02 	vpop	{d8}
 8008ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ac4:	4642      	mov	r2, r8
 8008ac6:	464b      	mov	r3, r9
 8008ac8:	4640      	mov	r0, r8
 8008aca:	4649      	mov	r1, r9
 8008acc:	f7f7 fec6 	bl	800085c <__aeabi_ddiv>
 8008ad0:	2e02      	cmp	r6, #2
 8008ad2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ad6:	d1e0      	bne.n	8008a9a <sqrt+0x62>
 8008ad8:	f001 f9ba 	bl	8009e50 <__errno>
 8008adc:	2321      	movs	r3, #33	; 0x21
 8008ade:	6003      	str	r3, [r0, #0]
 8008ae0:	e7df      	b.n	8008aa2 <sqrt+0x6a>
 8008ae2:	bf00      	nop
 8008ae4:	20000094 	.word	0x20000094
 8008ae8:	0800e848 	.word	0x0800e848

08008aec <asinf>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	ed2d 8b02 	vpush	{d8}
 8008af2:	4c27      	ldr	r4, [pc, #156]	; (8008b90 <asinf+0xa4>)
 8008af4:	b08a      	sub	sp, #40	; 0x28
 8008af6:	eeb0 8a40 	vmov.f32	s16, s0
 8008afa:	f000 fe0f 	bl	800971c <__ieee754_asinf>
 8008afe:	f994 3000 	ldrsb.w	r3, [r4]
 8008b02:	3301      	adds	r3, #1
 8008b04:	eef0 8a40 	vmov.f32	s17, s0
 8008b08:	d03c      	beq.n	8008b84 <asinf+0x98>
 8008b0a:	eeb4 8a48 	vcmp.f32	s16, s16
 8008b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b12:	d637      	bvs.n	8008b84 <asinf+0x98>
 8008b14:	eeb0 0a48 	vmov.f32	s0, s16
 8008b18:	f001 f984 	bl	8009e24 <fabsf>
 8008b1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008b20:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b28:	dd2c      	ble.n	8008b84 <asinf+0x98>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	4b19      	ldr	r3, [pc, #100]	; (8008b94 <asinf+0xa8>)
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	ee18 0a10 	vmov	r0, s16
 8008b36:	2300      	movs	r3, #0
 8008b38:	9308      	str	r3, [sp, #32]
 8008b3a:	f7f7 fd0d 	bl	8000558 <__aeabi_f2d>
 8008b3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b46:	4814      	ldr	r0, [pc, #80]	; (8008b98 <asinf+0xac>)
 8008b48:	f000 ff96 	bl	8009a78 <nan>
 8008b4c:	f994 3000 	ldrsb.w	r3, [r4]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008b56:	d104      	bne.n	8008b62 <asinf+0x76>
 8008b58:	f001 f97a 	bl	8009e50 <__errno>
 8008b5c:	2321      	movs	r3, #33	; 0x21
 8008b5e:	6003      	str	r3, [r0, #0]
 8008b60:	e004      	b.n	8008b6c <asinf+0x80>
 8008b62:	4668      	mov	r0, sp
 8008b64:	f000 ff84 	bl	8009a70 <matherr>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d0f5      	beq.n	8008b58 <asinf+0x6c>
 8008b6c:	9b08      	ldr	r3, [sp, #32]
 8008b6e:	b11b      	cbz	r3, 8008b78 <asinf+0x8c>
 8008b70:	f001 f96e 	bl	8009e50 <__errno>
 8008b74:	9b08      	ldr	r3, [sp, #32]
 8008b76:	6003      	str	r3, [r0, #0]
 8008b78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b7c:	f7f8 f83c 	bl	8000bf8 <__aeabi_d2f>
 8008b80:	ee08 0a90 	vmov	s17, r0
 8008b84:	eeb0 0a68 	vmov.f32	s0, s17
 8008b88:	b00a      	add	sp, #40	; 0x28
 8008b8a:	ecbd 8b02 	vpop	{d8}
 8008b8e:	bd10      	pop	{r4, pc}
 8008b90:	20000094 	.word	0x20000094
 8008b94:	0800e84d 	.word	0x0800e84d
 8008b98:	0800ebc1 	.word	0x0800ebc1

08008b9c <atan2f>:
 8008b9c:	f000 bea6 	b.w	80098ec <__ieee754_atan2f>

08008ba0 <__ieee754_pow>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	b091      	sub	sp, #68	; 0x44
 8008ba6:	ed8d 1b00 	vstr	d1, [sp]
 8008baa:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008bae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008bb2:	ea58 0302 	orrs.w	r3, r8, r2
 8008bb6:	ec57 6b10 	vmov	r6, r7, d0
 8008bba:	f000 84be 	beq.w	800953a <__ieee754_pow+0x99a>
 8008bbe:	4b7a      	ldr	r3, [pc, #488]	; (8008da8 <__ieee754_pow+0x208>)
 8008bc0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008bc4:	429c      	cmp	r4, r3
 8008bc6:	463d      	mov	r5, r7
 8008bc8:	ee10 aa10 	vmov	sl, s0
 8008bcc:	dc09      	bgt.n	8008be2 <__ieee754_pow+0x42>
 8008bce:	d103      	bne.n	8008bd8 <__ieee754_pow+0x38>
 8008bd0:	b93e      	cbnz	r6, 8008be2 <__ieee754_pow+0x42>
 8008bd2:	45a0      	cmp	r8, r4
 8008bd4:	dc0d      	bgt.n	8008bf2 <__ieee754_pow+0x52>
 8008bd6:	e001      	b.n	8008bdc <__ieee754_pow+0x3c>
 8008bd8:	4598      	cmp	r8, r3
 8008bda:	dc02      	bgt.n	8008be2 <__ieee754_pow+0x42>
 8008bdc:	4598      	cmp	r8, r3
 8008bde:	d10e      	bne.n	8008bfe <__ieee754_pow+0x5e>
 8008be0:	b16a      	cbz	r2, 8008bfe <__ieee754_pow+0x5e>
 8008be2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008be6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008bea:	ea54 030a 	orrs.w	r3, r4, sl
 8008bee:	f000 84a4 	beq.w	800953a <__ieee754_pow+0x99a>
 8008bf2:	486e      	ldr	r0, [pc, #440]	; (8008dac <__ieee754_pow+0x20c>)
 8008bf4:	b011      	add	sp, #68	; 0x44
 8008bf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfa:	f000 bf3d 	b.w	8009a78 <nan>
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	da53      	bge.n	8008caa <__ieee754_pow+0x10a>
 8008c02:	4b6b      	ldr	r3, [pc, #428]	; (8008db0 <__ieee754_pow+0x210>)
 8008c04:	4598      	cmp	r8, r3
 8008c06:	dc4d      	bgt.n	8008ca4 <__ieee754_pow+0x104>
 8008c08:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008c0c:	4598      	cmp	r8, r3
 8008c0e:	dd4c      	ble.n	8008caa <__ieee754_pow+0x10a>
 8008c10:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c14:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c18:	2b14      	cmp	r3, #20
 8008c1a:	dd26      	ble.n	8008c6a <__ieee754_pow+0xca>
 8008c1c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c20:	fa22 f103 	lsr.w	r1, r2, r3
 8008c24:	fa01 f303 	lsl.w	r3, r1, r3
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d13e      	bne.n	8008caa <__ieee754_pow+0x10a>
 8008c2c:	f001 0101 	and.w	r1, r1, #1
 8008c30:	f1c1 0b02 	rsb	fp, r1, #2
 8008c34:	2a00      	cmp	r2, #0
 8008c36:	d15b      	bne.n	8008cf0 <__ieee754_pow+0x150>
 8008c38:	4b5b      	ldr	r3, [pc, #364]	; (8008da8 <__ieee754_pow+0x208>)
 8008c3a:	4598      	cmp	r8, r3
 8008c3c:	d124      	bne.n	8008c88 <__ieee754_pow+0xe8>
 8008c3e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008c42:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008c46:	ea53 030a 	orrs.w	r3, r3, sl
 8008c4a:	f000 8476 	beq.w	800953a <__ieee754_pow+0x99a>
 8008c4e:	4b59      	ldr	r3, [pc, #356]	; (8008db4 <__ieee754_pow+0x214>)
 8008c50:	429c      	cmp	r4, r3
 8008c52:	dd2d      	ble.n	8008cb0 <__ieee754_pow+0x110>
 8008c54:	f1b9 0f00 	cmp.w	r9, #0
 8008c58:	f280 8473 	bge.w	8009542 <__ieee754_pow+0x9a2>
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	2100      	movs	r1, #0
 8008c60:	ec41 0b10 	vmov	d0, r0, r1
 8008c64:	b011      	add	sp, #68	; 0x44
 8008c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6a:	2a00      	cmp	r2, #0
 8008c6c:	d13e      	bne.n	8008cec <__ieee754_pow+0x14c>
 8008c6e:	f1c3 0314 	rsb	r3, r3, #20
 8008c72:	fa48 f103 	asr.w	r1, r8, r3
 8008c76:	fa01 f303 	lsl.w	r3, r1, r3
 8008c7a:	4543      	cmp	r3, r8
 8008c7c:	f040 8469 	bne.w	8009552 <__ieee754_pow+0x9b2>
 8008c80:	f001 0101 	and.w	r1, r1, #1
 8008c84:	f1c1 0b02 	rsb	fp, r1, #2
 8008c88:	4b4b      	ldr	r3, [pc, #300]	; (8008db8 <__ieee754_pow+0x218>)
 8008c8a:	4598      	cmp	r8, r3
 8008c8c:	d118      	bne.n	8008cc0 <__ieee754_pow+0x120>
 8008c8e:	f1b9 0f00 	cmp.w	r9, #0
 8008c92:	f280 845a 	bge.w	800954a <__ieee754_pow+0x9aa>
 8008c96:	4948      	ldr	r1, [pc, #288]	; (8008db8 <__ieee754_pow+0x218>)
 8008c98:	4632      	mov	r2, r6
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	f7f7 fddd 	bl	800085c <__aeabi_ddiv>
 8008ca2:	e7dd      	b.n	8008c60 <__ieee754_pow+0xc0>
 8008ca4:	f04f 0b02 	mov.w	fp, #2
 8008ca8:	e7c4      	b.n	8008c34 <__ieee754_pow+0x94>
 8008caa:	f04f 0b00 	mov.w	fp, #0
 8008cae:	e7c1      	b.n	8008c34 <__ieee754_pow+0x94>
 8008cb0:	f1b9 0f00 	cmp.w	r9, #0
 8008cb4:	dad2      	bge.n	8008c5c <__ieee754_pow+0xbc>
 8008cb6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008cba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008cbe:	e7cf      	b.n	8008c60 <__ieee754_pow+0xc0>
 8008cc0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008cc4:	d106      	bne.n	8008cd4 <__ieee754_pow+0x134>
 8008cc6:	4632      	mov	r2, r6
 8008cc8:	463b      	mov	r3, r7
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	f7f7 fc9b 	bl	8000608 <__aeabi_dmul>
 8008cd2:	e7c5      	b.n	8008c60 <__ieee754_pow+0xc0>
 8008cd4:	4b39      	ldr	r3, [pc, #228]	; (8008dbc <__ieee754_pow+0x21c>)
 8008cd6:	4599      	cmp	r9, r3
 8008cd8:	d10a      	bne.n	8008cf0 <__ieee754_pow+0x150>
 8008cda:	2d00      	cmp	r5, #0
 8008cdc:	db08      	blt.n	8008cf0 <__ieee754_pow+0x150>
 8008cde:	ec47 6b10 	vmov	d0, r6, r7
 8008ce2:	b011      	add	sp, #68	; 0x44
 8008ce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	f000 bc68 	b.w	80095bc <__ieee754_sqrt>
 8008cec:	f04f 0b00 	mov.w	fp, #0
 8008cf0:	ec47 6b10 	vmov	d0, r6, r7
 8008cf4:	f000 feab 	bl	8009a4e <fabs>
 8008cf8:	ec51 0b10 	vmov	r0, r1, d0
 8008cfc:	f1ba 0f00 	cmp.w	sl, #0
 8008d00:	d127      	bne.n	8008d52 <__ieee754_pow+0x1b2>
 8008d02:	b124      	cbz	r4, 8008d0e <__ieee754_pow+0x16e>
 8008d04:	4b2c      	ldr	r3, [pc, #176]	; (8008db8 <__ieee754_pow+0x218>)
 8008d06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d121      	bne.n	8008d52 <__ieee754_pow+0x1b2>
 8008d0e:	f1b9 0f00 	cmp.w	r9, #0
 8008d12:	da05      	bge.n	8008d20 <__ieee754_pow+0x180>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	2000      	movs	r0, #0
 8008d1a:	4927      	ldr	r1, [pc, #156]	; (8008db8 <__ieee754_pow+0x218>)
 8008d1c:	f7f7 fd9e 	bl	800085c <__aeabi_ddiv>
 8008d20:	2d00      	cmp	r5, #0
 8008d22:	da9d      	bge.n	8008c60 <__ieee754_pow+0xc0>
 8008d24:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d2c:	ea54 030b 	orrs.w	r3, r4, fp
 8008d30:	d108      	bne.n	8008d44 <__ieee754_pow+0x1a4>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4610      	mov	r0, r2
 8008d38:	4619      	mov	r1, r3
 8008d3a:	f7f7 faad 	bl	8000298 <__aeabi_dsub>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	e7ac      	b.n	8008c9e <__ieee754_pow+0xfe>
 8008d44:	f1bb 0f01 	cmp.w	fp, #1
 8008d48:	d18a      	bne.n	8008c60 <__ieee754_pow+0xc0>
 8008d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d4e:	4619      	mov	r1, r3
 8008d50:	e786      	b.n	8008c60 <__ieee754_pow+0xc0>
 8008d52:	0fed      	lsrs	r5, r5, #31
 8008d54:	1e6b      	subs	r3, r5, #1
 8008d56:	930d      	str	r3, [sp, #52]	; 0x34
 8008d58:	ea5b 0303 	orrs.w	r3, fp, r3
 8008d5c:	d102      	bne.n	8008d64 <__ieee754_pow+0x1c4>
 8008d5e:	4632      	mov	r2, r6
 8008d60:	463b      	mov	r3, r7
 8008d62:	e7e8      	b.n	8008d36 <__ieee754_pow+0x196>
 8008d64:	4b16      	ldr	r3, [pc, #88]	; (8008dc0 <__ieee754_pow+0x220>)
 8008d66:	4598      	cmp	r8, r3
 8008d68:	f340 80fe 	ble.w	8008f68 <__ieee754_pow+0x3c8>
 8008d6c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008d70:	4598      	cmp	r8, r3
 8008d72:	dd0a      	ble.n	8008d8a <__ieee754_pow+0x1ea>
 8008d74:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <__ieee754_pow+0x214>)
 8008d76:	429c      	cmp	r4, r3
 8008d78:	dc0d      	bgt.n	8008d96 <__ieee754_pow+0x1f6>
 8008d7a:	f1b9 0f00 	cmp.w	r9, #0
 8008d7e:	f6bf af6d 	bge.w	8008c5c <__ieee754_pow+0xbc>
 8008d82:	a307      	add	r3, pc, #28	; (adr r3, 8008da0 <__ieee754_pow+0x200>)
 8008d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d88:	e79f      	b.n	8008cca <__ieee754_pow+0x12a>
 8008d8a:	4b0e      	ldr	r3, [pc, #56]	; (8008dc4 <__ieee754_pow+0x224>)
 8008d8c:	429c      	cmp	r4, r3
 8008d8e:	ddf4      	ble.n	8008d7a <__ieee754_pow+0x1da>
 8008d90:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <__ieee754_pow+0x218>)
 8008d92:	429c      	cmp	r4, r3
 8008d94:	dd18      	ble.n	8008dc8 <__ieee754_pow+0x228>
 8008d96:	f1b9 0f00 	cmp.w	r9, #0
 8008d9a:	dcf2      	bgt.n	8008d82 <__ieee754_pow+0x1e2>
 8008d9c:	e75e      	b.n	8008c5c <__ieee754_pow+0xbc>
 8008d9e:	bf00      	nop
 8008da0:	8800759c 	.word	0x8800759c
 8008da4:	7e37e43c 	.word	0x7e37e43c
 8008da8:	7ff00000 	.word	0x7ff00000
 8008dac:	0800ebc1 	.word	0x0800ebc1
 8008db0:	433fffff 	.word	0x433fffff
 8008db4:	3fefffff 	.word	0x3fefffff
 8008db8:	3ff00000 	.word	0x3ff00000
 8008dbc:	3fe00000 	.word	0x3fe00000
 8008dc0:	41e00000 	.word	0x41e00000
 8008dc4:	3feffffe 	.word	0x3feffffe
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4b63      	ldr	r3, [pc, #396]	; (8008f58 <__ieee754_pow+0x3b8>)
 8008dcc:	f7f7 fa64 	bl	8000298 <__aeabi_dsub>
 8008dd0:	a355      	add	r3, pc, #340	; (adr r3, 8008f28 <__ieee754_pow+0x388>)
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	460d      	mov	r5, r1
 8008dda:	f7f7 fc15 	bl	8000608 <__aeabi_dmul>
 8008dde:	a354      	add	r3, pc, #336	; (adr r3, 8008f30 <__ieee754_pow+0x390>)
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	4606      	mov	r6, r0
 8008de6:	460f      	mov	r7, r1
 8008de8:	4620      	mov	r0, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	f7f7 fc0c 	bl	8000608 <__aeabi_dmul>
 8008df0:	2200      	movs	r2, #0
 8008df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df6:	4b59      	ldr	r3, [pc, #356]	; (8008f5c <__ieee754_pow+0x3bc>)
 8008df8:	4620      	mov	r0, r4
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f7f7 fc04 	bl	8000608 <__aeabi_dmul>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	a14c      	add	r1, pc, #304	; (adr r1, 8008f38 <__ieee754_pow+0x398>)
 8008e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e0a:	f7f7 fa45 	bl	8000298 <__aeabi_dsub>
 8008e0e:	4622      	mov	r2, r4
 8008e10:	462b      	mov	r3, r5
 8008e12:	f7f7 fbf9 	bl	8000608 <__aeabi_dmul>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	4950      	ldr	r1, [pc, #320]	; (8008f60 <__ieee754_pow+0x3c0>)
 8008e1e:	f7f7 fa3b 	bl	8000298 <__aeabi_dsub>
 8008e22:	4622      	mov	r2, r4
 8008e24:	462b      	mov	r3, r5
 8008e26:	4680      	mov	r8, r0
 8008e28:	4689      	mov	r9, r1
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	f7f7 fbeb 	bl	8000608 <__aeabi_dmul>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 fbe5 	bl	8000608 <__aeabi_dmul>
 8008e3e:	a340      	add	r3, pc, #256	; (adr r3, 8008f40 <__ieee754_pow+0x3a0>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	f7f7 fbe0 	bl	8000608 <__aeabi_dmul>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e50:	f7f7 fa22 	bl	8000298 <__aeabi_dsub>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f7f7 fa1c 	bl	800029c <__adddf3>
 8008e64:	2000      	movs	r0, #0
 8008e66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e6a:	4632      	mov	r2, r6
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	f7f7 fa13 	bl	8000298 <__aeabi_dsub>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fa0d 	bl	8000298 <__aeabi_dsub>
 8008e7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e80:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008e84:	4313      	orrs	r3, r2
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	f040 81eb 	bne.w	8009264 <__ieee754_pow+0x6c4>
 8008e8e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008f48 <__ieee754_pow+0x3a8>
 8008e92:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008e96:	2400      	movs	r4, #0
 8008e98:	4622      	mov	r2, r4
 8008e9a:	462b      	mov	r3, r5
 8008e9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ea0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ea4:	f7f7 f9f8 	bl	8000298 <__aeabi_dsub>
 8008ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eac:	f7f7 fbac 	bl	8000608 <__aeabi_dmul>
 8008eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4689      	mov	r9, r1
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 fba4 	bl	8000608 <__aeabi_dmul>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	f7f7 f9e8 	bl	800029c <__adddf3>
 8008ecc:	4622      	mov	r2, r4
 8008ece:	462b      	mov	r3, r5
 8008ed0:	4680      	mov	r8, r0
 8008ed2:	4689      	mov	r9, r1
 8008ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ed8:	f7f7 fb96 	bl	8000608 <__aeabi_dmul>
 8008edc:	460b      	mov	r3, r1
 8008ede:	4604      	mov	r4, r0
 8008ee0:	460d      	mov	r5, r1
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	e9cd 4500 	strd	r4, r5, [sp]
 8008eec:	f7f7 f9d6 	bl	800029c <__adddf3>
 8008ef0:	4b1c      	ldr	r3, [pc, #112]	; (8008f64 <__ieee754_pow+0x3c4>)
 8008ef2:	4299      	cmp	r1, r3
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	460f      	mov	r7, r1
 8008ef8:	468b      	mov	fp, r1
 8008efa:	f340 82f7 	ble.w	80094ec <__ieee754_pow+0x94c>
 8008efe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008f02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008f06:	4303      	orrs	r3, r0
 8008f08:	f000 81ea 	beq.w	80092e0 <__ieee754_pow+0x740>
 8008f0c:	a310      	add	r3, pc, #64	; (adr r3, 8008f50 <__ieee754_pow+0x3b0>)
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f16:	f7f7 fb77 	bl	8000608 <__aeabi_dmul>
 8008f1a:	a30d      	add	r3, pc, #52	; (adr r3, 8008f50 <__ieee754_pow+0x3b0>)
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	e6d5      	b.n	8008cce <__ieee754_pow+0x12e>
 8008f22:	bf00      	nop
 8008f24:	f3af 8000 	nop.w
 8008f28:	60000000 	.word	0x60000000
 8008f2c:	3ff71547 	.word	0x3ff71547
 8008f30:	f85ddf44 	.word	0xf85ddf44
 8008f34:	3e54ae0b 	.word	0x3e54ae0b
 8008f38:	55555555 	.word	0x55555555
 8008f3c:	3fd55555 	.word	0x3fd55555
 8008f40:	652b82fe 	.word	0x652b82fe
 8008f44:	3ff71547 	.word	0x3ff71547
 8008f48:	00000000 	.word	0x00000000
 8008f4c:	bff00000 	.word	0xbff00000
 8008f50:	8800759c 	.word	0x8800759c
 8008f54:	7e37e43c 	.word	0x7e37e43c
 8008f58:	3ff00000 	.word	0x3ff00000
 8008f5c:	3fd00000 	.word	0x3fd00000
 8008f60:	3fe00000 	.word	0x3fe00000
 8008f64:	408fffff 	.word	0x408fffff
 8008f68:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	da05      	bge.n	8008f7e <__ieee754_pow+0x3de>
 8008f72:	4bd3      	ldr	r3, [pc, #844]	; (80092c0 <__ieee754_pow+0x720>)
 8008f74:	f7f7 fb48 	bl	8000608 <__aeabi_dmul>
 8008f78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	1523      	asrs	r3, r4, #20
 8008f80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f84:	4413      	add	r3, r2
 8008f86:	9309      	str	r3, [sp, #36]	; 0x24
 8008f88:	4bce      	ldr	r3, [pc, #824]	; (80092c4 <__ieee754_pow+0x724>)
 8008f8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008f92:	429c      	cmp	r4, r3
 8008f94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f98:	dd08      	ble.n	8008fac <__ieee754_pow+0x40c>
 8008f9a:	4bcb      	ldr	r3, [pc, #812]	; (80092c8 <__ieee754_pow+0x728>)
 8008f9c:	429c      	cmp	r4, r3
 8008f9e:	f340 815e 	ble.w	800925e <__ieee754_pow+0x6be>
 8008fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008fac:	f04f 0a00 	mov.w	sl, #0
 8008fb0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008fb4:	930c      	str	r3, [sp, #48]	; 0x30
 8008fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fb8:	4bc4      	ldr	r3, [pc, #784]	; (80092cc <__ieee754_pow+0x72c>)
 8008fba:	4413      	add	r3, r2
 8008fbc:	ed93 7b00 	vldr	d7, [r3]
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	ec53 2b17 	vmov	r2, r3, d7
 8008fc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008fce:	f7f7 f963 	bl	8000298 <__aeabi_dsub>
 8008fd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460f      	mov	r7, r1
 8008fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fde:	f7f7 f95d 	bl	800029c <__adddf3>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	49b9      	ldr	r1, [pc, #740]	; (80092d0 <__ieee754_pow+0x730>)
 8008fea:	f7f7 fc37 	bl	800085c <__aeabi_ddiv>
 8008fee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	f7f7 fb05 	bl	8000608 <__aeabi_dmul>
 8008ffe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009002:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009006:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800900a:	2300      	movs	r3, #0
 800900c:	9302      	str	r3, [sp, #8]
 800900e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009012:	106d      	asrs	r5, r5, #1
 8009014:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009018:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800901c:	2200      	movs	r2, #0
 800901e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009022:	4640      	mov	r0, r8
 8009024:	4649      	mov	r1, r9
 8009026:	4614      	mov	r4, r2
 8009028:	461d      	mov	r5, r3
 800902a:	f7f7 faed 	bl	8000608 <__aeabi_dmul>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4630      	mov	r0, r6
 8009034:	4639      	mov	r1, r7
 8009036:	f7f7 f92f 	bl	8000298 <__aeabi_dsub>
 800903a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800903e:	4606      	mov	r6, r0
 8009040:	460f      	mov	r7, r1
 8009042:	4620      	mov	r0, r4
 8009044:	4629      	mov	r1, r5
 8009046:	f7f7 f927 	bl	8000298 <__aeabi_dsub>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009052:	f7f7 f921 	bl	8000298 <__aeabi_dsub>
 8009056:	4642      	mov	r2, r8
 8009058:	464b      	mov	r3, r9
 800905a:	f7f7 fad5 	bl	8000608 <__aeabi_dmul>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4630      	mov	r0, r6
 8009064:	4639      	mov	r1, r7
 8009066:	f7f7 f917 	bl	8000298 <__aeabi_dsub>
 800906a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800906e:	f7f7 facb 	bl	8000608 <__aeabi_dmul>
 8009072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009076:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800907a:	4610      	mov	r0, r2
 800907c:	4619      	mov	r1, r3
 800907e:	f7f7 fac3 	bl	8000608 <__aeabi_dmul>
 8009082:	a37b      	add	r3, pc, #492	; (adr r3, 8009270 <__ieee754_pow+0x6d0>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	4604      	mov	r4, r0
 800908a:	460d      	mov	r5, r1
 800908c:	f7f7 fabc 	bl	8000608 <__aeabi_dmul>
 8009090:	a379      	add	r3, pc, #484	; (adr r3, 8009278 <__ieee754_pow+0x6d8>)
 8009092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009096:	f7f7 f901 	bl	800029c <__adddf3>
 800909a:	4622      	mov	r2, r4
 800909c:	462b      	mov	r3, r5
 800909e:	f7f7 fab3 	bl	8000608 <__aeabi_dmul>
 80090a2:	a377      	add	r3, pc, #476	; (adr r3, 8009280 <__ieee754_pow+0x6e0>)
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	f7f7 f8f8 	bl	800029c <__adddf3>
 80090ac:	4622      	mov	r2, r4
 80090ae:	462b      	mov	r3, r5
 80090b0:	f7f7 faaa 	bl	8000608 <__aeabi_dmul>
 80090b4:	a374      	add	r3, pc, #464	; (adr r3, 8009288 <__ieee754_pow+0x6e8>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 f8ef 	bl	800029c <__adddf3>
 80090be:	4622      	mov	r2, r4
 80090c0:	462b      	mov	r3, r5
 80090c2:	f7f7 faa1 	bl	8000608 <__aeabi_dmul>
 80090c6:	a372      	add	r3, pc, #456	; (adr r3, 8009290 <__ieee754_pow+0x6f0>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	f7f7 f8e6 	bl	800029c <__adddf3>
 80090d0:	4622      	mov	r2, r4
 80090d2:	462b      	mov	r3, r5
 80090d4:	f7f7 fa98 	bl	8000608 <__aeabi_dmul>
 80090d8:	a36f      	add	r3, pc, #444	; (adr r3, 8009298 <__ieee754_pow+0x6f8>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	f7f7 f8dd 	bl	800029c <__adddf3>
 80090e2:	4622      	mov	r2, r4
 80090e4:	4606      	mov	r6, r0
 80090e6:	460f      	mov	r7, r1
 80090e8:	462b      	mov	r3, r5
 80090ea:	4620      	mov	r0, r4
 80090ec:	4629      	mov	r1, r5
 80090ee:	f7f7 fa8b 	bl	8000608 <__aeabi_dmul>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4630      	mov	r0, r6
 80090f8:	4639      	mov	r1, r7
 80090fa:	f7f7 fa85 	bl	8000608 <__aeabi_dmul>
 80090fe:	4642      	mov	r2, r8
 8009100:	4604      	mov	r4, r0
 8009102:	460d      	mov	r5, r1
 8009104:	464b      	mov	r3, r9
 8009106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800910a:	f7f7 f8c7 	bl	800029c <__adddf3>
 800910e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009112:	f7f7 fa79 	bl	8000608 <__aeabi_dmul>
 8009116:	4622      	mov	r2, r4
 8009118:	462b      	mov	r3, r5
 800911a:	f7f7 f8bf 	bl	800029c <__adddf3>
 800911e:	4642      	mov	r2, r8
 8009120:	4606      	mov	r6, r0
 8009122:	460f      	mov	r7, r1
 8009124:	464b      	mov	r3, r9
 8009126:	4640      	mov	r0, r8
 8009128:	4649      	mov	r1, r9
 800912a:	f7f7 fa6d 	bl	8000608 <__aeabi_dmul>
 800912e:	2200      	movs	r2, #0
 8009130:	4b68      	ldr	r3, [pc, #416]	; (80092d4 <__ieee754_pow+0x734>)
 8009132:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009136:	f7f7 f8b1 	bl	800029c <__adddf3>
 800913a:	4632      	mov	r2, r6
 800913c:	463b      	mov	r3, r7
 800913e:	f7f7 f8ad 	bl	800029c <__adddf3>
 8009142:	9802      	ldr	r0, [sp, #8]
 8009144:	460d      	mov	r5, r1
 8009146:	4604      	mov	r4, r0
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4640      	mov	r0, r8
 800914e:	4649      	mov	r1, r9
 8009150:	f7f7 fa5a 	bl	8000608 <__aeabi_dmul>
 8009154:	2200      	movs	r2, #0
 8009156:	4680      	mov	r8, r0
 8009158:	4689      	mov	r9, r1
 800915a:	4b5e      	ldr	r3, [pc, #376]	; (80092d4 <__ieee754_pow+0x734>)
 800915c:	4620      	mov	r0, r4
 800915e:	4629      	mov	r1, r5
 8009160:	f7f7 f89a 	bl	8000298 <__aeabi_dsub>
 8009164:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009168:	f7f7 f896 	bl	8000298 <__aeabi_dsub>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4630      	mov	r0, r6
 8009172:	4639      	mov	r1, r7
 8009174:	f7f7 f890 	bl	8000298 <__aeabi_dsub>
 8009178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800917c:	f7f7 fa44 	bl	8000608 <__aeabi_dmul>
 8009180:	4622      	mov	r2, r4
 8009182:	4606      	mov	r6, r0
 8009184:	460f      	mov	r7, r1
 8009186:	462b      	mov	r3, r5
 8009188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800918c:	f7f7 fa3c 	bl	8000608 <__aeabi_dmul>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4630      	mov	r0, r6
 8009196:	4639      	mov	r1, r7
 8009198:	f7f7 f880 	bl	800029c <__adddf3>
 800919c:	4606      	mov	r6, r0
 800919e:	460f      	mov	r7, r1
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 f878 	bl	800029c <__adddf3>
 80091ac:	9802      	ldr	r0, [sp, #8]
 80091ae:	a33c      	add	r3, pc, #240	; (adr r3, 80092a0 <__ieee754_pow+0x700>)
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	4604      	mov	r4, r0
 80091b6:	460d      	mov	r5, r1
 80091b8:	f7f7 fa26 	bl	8000608 <__aeabi_dmul>
 80091bc:	4642      	mov	r2, r8
 80091be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091c2:	464b      	mov	r3, r9
 80091c4:	4620      	mov	r0, r4
 80091c6:	4629      	mov	r1, r5
 80091c8:	f7f7 f866 	bl	8000298 <__aeabi_dsub>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4630      	mov	r0, r6
 80091d2:	4639      	mov	r1, r7
 80091d4:	f7f7 f860 	bl	8000298 <__aeabi_dsub>
 80091d8:	a333      	add	r3, pc, #204	; (adr r3, 80092a8 <__ieee754_pow+0x708>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f7f7 fa13 	bl	8000608 <__aeabi_dmul>
 80091e2:	a333      	add	r3, pc, #204	; (adr r3, 80092b0 <__ieee754_pow+0x710>)
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	4606      	mov	r6, r0
 80091ea:	460f      	mov	r7, r1
 80091ec:	4620      	mov	r0, r4
 80091ee:	4629      	mov	r1, r5
 80091f0:	f7f7 fa0a 	bl	8000608 <__aeabi_dmul>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 f84e 	bl	800029c <__adddf3>
 8009200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009202:	4b35      	ldr	r3, [pc, #212]	; (80092d8 <__ieee754_pow+0x738>)
 8009204:	4413      	add	r3, r2
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f7 f847 	bl	800029c <__adddf3>
 800920e:	4604      	mov	r4, r0
 8009210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009212:	460d      	mov	r5, r1
 8009214:	f7f7 f98e 	bl	8000534 <__aeabi_i2d>
 8009218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800921a:	4b30      	ldr	r3, [pc, #192]	; (80092dc <__ieee754_pow+0x73c>)
 800921c:	4413      	add	r3, r2
 800921e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009222:	4606      	mov	r6, r0
 8009224:	460f      	mov	r7, r1
 8009226:	4622      	mov	r2, r4
 8009228:	462b      	mov	r3, r5
 800922a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800922e:	f7f7 f835 	bl	800029c <__adddf3>
 8009232:	4642      	mov	r2, r8
 8009234:	464b      	mov	r3, r9
 8009236:	f7f7 f831 	bl	800029c <__adddf3>
 800923a:	4632      	mov	r2, r6
 800923c:	463b      	mov	r3, r7
 800923e:	f7f7 f82d 	bl	800029c <__adddf3>
 8009242:	9802      	ldr	r0, [sp, #8]
 8009244:	4632      	mov	r2, r6
 8009246:	463b      	mov	r3, r7
 8009248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800924c:	f7f7 f824 	bl	8000298 <__aeabi_dsub>
 8009250:	4642      	mov	r2, r8
 8009252:	464b      	mov	r3, r9
 8009254:	f7f7 f820 	bl	8000298 <__aeabi_dsub>
 8009258:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800925c:	e607      	b.n	8008e6e <__ieee754_pow+0x2ce>
 800925e:	f04f 0a01 	mov.w	sl, #1
 8009262:	e6a5      	b.n	8008fb0 <__ieee754_pow+0x410>
 8009264:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80092b8 <__ieee754_pow+0x718>
 8009268:	e613      	b.n	8008e92 <__ieee754_pow+0x2f2>
 800926a:	bf00      	nop
 800926c:	f3af 8000 	nop.w
 8009270:	4a454eef 	.word	0x4a454eef
 8009274:	3fca7e28 	.word	0x3fca7e28
 8009278:	93c9db65 	.word	0x93c9db65
 800927c:	3fcd864a 	.word	0x3fcd864a
 8009280:	a91d4101 	.word	0xa91d4101
 8009284:	3fd17460 	.word	0x3fd17460
 8009288:	518f264d 	.word	0x518f264d
 800928c:	3fd55555 	.word	0x3fd55555
 8009290:	db6fabff 	.word	0xdb6fabff
 8009294:	3fdb6db6 	.word	0x3fdb6db6
 8009298:	33333303 	.word	0x33333303
 800929c:	3fe33333 	.word	0x3fe33333
 80092a0:	e0000000 	.word	0xe0000000
 80092a4:	3feec709 	.word	0x3feec709
 80092a8:	dc3a03fd 	.word	0xdc3a03fd
 80092ac:	3feec709 	.word	0x3feec709
 80092b0:	145b01f5 	.word	0x145b01f5
 80092b4:	be3e2fe0 	.word	0xbe3e2fe0
 80092b8:	00000000 	.word	0x00000000
 80092bc:	3ff00000 	.word	0x3ff00000
 80092c0:	43400000 	.word	0x43400000
 80092c4:	0003988e 	.word	0x0003988e
 80092c8:	000bb679 	.word	0x000bb679
 80092cc:	0800e858 	.word	0x0800e858
 80092d0:	3ff00000 	.word	0x3ff00000
 80092d4:	40080000 	.word	0x40080000
 80092d8:	0800e878 	.word	0x0800e878
 80092dc:	0800e868 	.word	0x0800e868
 80092e0:	a3b4      	add	r3, pc, #720	; (adr r3, 80095b4 <__ieee754_pow+0xa14>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	4640      	mov	r0, r8
 80092e8:	4649      	mov	r1, r9
 80092ea:	f7f6 ffd7 	bl	800029c <__adddf3>
 80092ee:	4622      	mov	r2, r4
 80092f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092f4:	462b      	mov	r3, r5
 80092f6:	4630      	mov	r0, r6
 80092f8:	4639      	mov	r1, r7
 80092fa:	f7f6 ffcd 	bl	8000298 <__aeabi_dsub>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009306:	f7f7 fc0f 	bl	8000b28 <__aeabi_dcmpgt>
 800930a:	2800      	cmp	r0, #0
 800930c:	f47f adfe 	bne.w	8008f0c <__ieee754_pow+0x36c>
 8009310:	4aa3      	ldr	r2, [pc, #652]	; (80095a0 <__ieee754_pow+0xa00>)
 8009312:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009316:	4293      	cmp	r3, r2
 8009318:	f340 810a 	ble.w	8009530 <__ieee754_pow+0x990>
 800931c:	151b      	asrs	r3, r3, #20
 800931e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009322:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009326:	fa4a f303 	asr.w	r3, sl, r3
 800932a:	445b      	add	r3, fp
 800932c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009330:	4e9c      	ldr	r6, [pc, #624]	; (80095a4 <__ieee754_pow+0xa04>)
 8009332:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009336:	4116      	asrs	r6, r2
 8009338:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800933c:	2000      	movs	r0, #0
 800933e:	ea23 0106 	bic.w	r1, r3, r6
 8009342:	f1c2 0214 	rsb	r2, r2, #20
 8009346:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800934a:	fa4a fa02 	asr.w	sl, sl, r2
 800934e:	f1bb 0f00 	cmp.w	fp, #0
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4620      	mov	r0, r4
 8009358:	4629      	mov	r1, r5
 800935a:	bfb8      	it	lt
 800935c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009360:	f7f6 ff9a 	bl	8000298 <__aeabi_dsub>
 8009364:	e9cd 0100 	strd	r0, r1, [sp]
 8009368:	4642      	mov	r2, r8
 800936a:	464b      	mov	r3, r9
 800936c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009370:	f7f6 ff94 	bl	800029c <__adddf3>
 8009374:	2000      	movs	r0, #0
 8009376:	a378      	add	r3, pc, #480	; (adr r3, 8009558 <__ieee754_pow+0x9b8>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	4604      	mov	r4, r0
 800937e:	460d      	mov	r5, r1
 8009380:	f7f7 f942 	bl	8000608 <__aeabi_dmul>
 8009384:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009388:	4606      	mov	r6, r0
 800938a:	460f      	mov	r7, r1
 800938c:	4620      	mov	r0, r4
 800938e:	4629      	mov	r1, r5
 8009390:	f7f6 ff82 	bl	8000298 <__aeabi_dsub>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4640      	mov	r0, r8
 800939a:	4649      	mov	r1, r9
 800939c:	f7f6 ff7c 	bl	8000298 <__aeabi_dsub>
 80093a0:	a36f      	add	r3, pc, #444	; (adr r3, 8009560 <__ieee754_pow+0x9c0>)
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	f7f7 f92f 	bl	8000608 <__aeabi_dmul>
 80093aa:	a36f      	add	r3, pc, #444	; (adr r3, 8009568 <__ieee754_pow+0x9c8>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	4680      	mov	r8, r0
 80093b2:	4689      	mov	r9, r1
 80093b4:	4620      	mov	r0, r4
 80093b6:	4629      	mov	r1, r5
 80093b8:	f7f7 f926 	bl	8000608 <__aeabi_dmul>
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	4640      	mov	r0, r8
 80093c2:	4649      	mov	r1, r9
 80093c4:	f7f6 ff6a 	bl	800029c <__adddf3>
 80093c8:	4604      	mov	r4, r0
 80093ca:	460d      	mov	r5, r1
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	f7f6 ff62 	bl	800029c <__adddf3>
 80093d8:	4632      	mov	r2, r6
 80093da:	463b      	mov	r3, r7
 80093dc:	4680      	mov	r8, r0
 80093de:	4689      	mov	r9, r1
 80093e0:	f7f6 ff5a 	bl	8000298 <__aeabi_dsub>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4620      	mov	r0, r4
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7f6 ff54 	bl	8000298 <__aeabi_dsub>
 80093f0:	4642      	mov	r2, r8
 80093f2:	4606      	mov	r6, r0
 80093f4:	460f      	mov	r7, r1
 80093f6:	464b      	mov	r3, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7f7 f904 	bl	8000608 <__aeabi_dmul>
 8009400:	a35b      	add	r3, pc, #364	; (adr r3, 8009570 <__ieee754_pow+0x9d0>)
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	4604      	mov	r4, r0
 8009408:	460d      	mov	r5, r1
 800940a:	f7f7 f8fd 	bl	8000608 <__aeabi_dmul>
 800940e:	a35a      	add	r3, pc, #360	; (adr r3, 8009578 <__ieee754_pow+0x9d8>)
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f7f6 ff40 	bl	8000298 <__aeabi_dsub>
 8009418:	4622      	mov	r2, r4
 800941a:	462b      	mov	r3, r5
 800941c:	f7f7 f8f4 	bl	8000608 <__aeabi_dmul>
 8009420:	a357      	add	r3, pc, #348	; (adr r3, 8009580 <__ieee754_pow+0x9e0>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	f7f6 ff39 	bl	800029c <__adddf3>
 800942a:	4622      	mov	r2, r4
 800942c:	462b      	mov	r3, r5
 800942e:	f7f7 f8eb 	bl	8000608 <__aeabi_dmul>
 8009432:	a355      	add	r3, pc, #340	; (adr r3, 8009588 <__ieee754_pow+0x9e8>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f7f6 ff2e 	bl	8000298 <__aeabi_dsub>
 800943c:	4622      	mov	r2, r4
 800943e:	462b      	mov	r3, r5
 8009440:	f7f7 f8e2 	bl	8000608 <__aeabi_dmul>
 8009444:	a352      	add	r3, pc, #328	; (adr r3, 8009590 <__ieee754_pow+0x9f0>)
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	f7f6 ff27 	bl	800029c <__adddf3>
 800944e:	4622      	mov	r2, r4
 8009450:	462b      	mov	r3, r5
 8009452:	f7f7 f8d9 	bl	8000608 <__aeabi_dmul>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4640      	mov	r0, r8
 800945c:	4649      	mov	r1, r9
 800945e:	f7f6 ff1b 	bl	8000298 <__aeabi_dsub>
 8009462:	4604      	mov	r4, r0
 8009464:	460d      	mov	r5, r1
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	4640      	mov	r0, r8
 800946c:	4649      	mov	r1, r9
 800946e:	f7f7 f8cb 	bl	8000608 <__aeabi_dmul>
 8009472:	2200      	movs	r2, #0
 8009474:	e9cd 0100 	strd	r0, r1, [sp]
 8009478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800947c:	4620      	mov	r0, r4
 800947e:	4629      	mov	r1, r5
 8009480:	f7f6 ff0a 	bl	8000298 <__aeabi_dsub>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800948c:	f7f7 f9e6 	bl	800085c <__aeabi_ddiv>
 8009490:	4632      	mov	r2, r6
 8009492:	4604      	mov	r4, r0
 8009494:	460d      	mov	r5, r1
 8009496:	463b      	mov	r3, r7
 8009498:	4640      	mov	r0, r8
 800949a:	4649      	mov	r1, r9
 800949c:	f7f7 f8b4 	bl	8000608 <__aeabi_dmul>
 80094a0:	4632      	mov	r2, r6
 80094a2:	463b      	mov	r3, r7
 80094a4:	f7f6 fefa 	bl	800029c <__adddf3>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	4620      	mov	r0, r4
 80094ae:	4629      	mov	r1, r5
 80094b0:	f7f6 fef2 	bl	8000298 <__aeabi_dsub>
 80094b4:	4642      	mov	r2, r8
 80094b6:	464b      	mov	r3, r9
 80094b8:	f7f6 feee 	bl	8000298 <__aeabi_dsub>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	2000      	movs	r0, #0
 80094c2:	4939      	ldr	r1, [pc, #228]	; (80095a8 <__ieee754_pow+0xa08>)
 80094c4:	f7f6 fee8 	bl	8000298 <__aeabi_dsub>
 80094c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80094cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	da2f      	bge.n	8009536 <__ieee754_pow+0x996>
 80094d6:	4650      	mov	r0, sl
 80094d8:	ec43 2b10 	vmov	d0, r2, r3
 80094dc:	f000 fb58 	bl	8009b90 <scalbn>
 80094e0:	ec51 0b10 	vmov	r0, r1, d0
 80094e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094e8:	f7ff bbf1 	b.w	8008cce <__ieee754_pow+0x12e>
 80094ec:	4b2f      	ldr	r3, [pc, #188]	; (80095ac <__ieee754_pow+0xa0c>)
 80094ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80094f2:	429e      	cmp	r6, r3
 80094f4:	f77f af0c 	ble.w	8009310 <__ieee754_pow+0x770>
 80094f8:	4b2d      	ldr	r3, [pc, #180]	; (80095b0 <__ieee754_pow+0xa10>)
 80094fa:	440b      	add	r3, r1
 80094fc:	4303      	orrs	r3, r0
 80094fe:	d00b      	beq.n	8009518 <__ieee754_pow+0x978>
 8009500:	a325      	add	r3, pc, #148	; (adr r3, 8009598 <__ieee754_pow+0x9f8>)
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800950a:	f7f7 f87d 	bl	8000608 <__aeabi_dmul>
 800950e:	a322      	add	r3, pc, #136	; (adr r3, 8009598 <__ieee754_pow+0x9f8>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f7ff bbdb 	b.w	8008cce <__ieee754_pow+0x12e>
 8009518:	4622      	mov	r2, r4
 800951a:	462b      	mov	r3, r5
 800951c:	f7f6 febc 	bl	8000298 <__aeabi_dsub>
 8009520:	4642      	mov	r2, r8
 8009522:	464b      	mov	r3, r9
 8009524:	f7f7 faf6 	bl	8000b14 <__aeabi_dcmpge>
 8009528:	2800      	cmp	r0, #0
 800952a:	f43f aef1 	beq.w	8009310 <__ieee754_pow+0x770>
 800952e:	e7e7      	b.n	8009500 <__ieee754_pow+0x960>
 8009530:	f04f 0a00 	mov.w	sl, #0
 8009534:	e718      	b.n	8009368 <__ieee754_pow+0x7c8>
 8009536:	4621      	mov	r1, r4
 8009538:	e7d4      	b.n	80094e4 <__ieee754_pow+0x944>
 800953a:	2000      	movs	r0, #0
 800953c:	491a      	ldr	r1, [pc, #104]	; (80095a8 <__ieee754_pow+0xa08>)
 800953e:	f7ff bb8f 	b.w	8008c60 <__ieee754_pow+0xc0>
 8009542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009546:	f7ff bb8b 	b.w	8008c60 <__ieee754_pow+0xc0>
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	f7ff bb87 	b.w	8008c60 <__ieee754_pow+0xc0>
 8009552:	4693      	mov	fp, r2
 8009554:	f7ff bb98 	b.w	8008c88 <__ieee754_pow+0xe8>
 8009558:	00000000 	.word	0x00000000
 800955c:	3fe62e43 	.word	0x3fe62e43
 8009560:	fefa39ef 	.word	0xfefa39ef
 8009564:	3fe62e42 	.word	0x3fe62e42
 8009568:	0ca86c39 	.word	0x0ca86c39
 800956c:	be205c61 	.word	0xbe205c61
 8009570:	72bea4d0 	.word	0x72bea4d0
 8009574:	3e663769 	.word	0x3e663769
 8009578:	c5d26bf1 	.word	0xc5d26bf1
 800957c:	3ebbbd41 	.word	0x3ebbbd41
 8009580:	af25de2c 	.word	0xaf25de2c
 8009584:	3f11566a 	.word	0x3f11566a
 8009588:	16bebd93 	.word	0x16bebd93
 800958c:	3f66c16c 	.word	0x3f66c16c
 8009590:	5555553e 	.word	0x5555553e
 8009594:	3fc55555 	.word	0x3fc55555
 8009598:	c2f8f359 	.word	0xc2f8f359
 800959c:	01a56e1f 	.word	0x01a56e1f
 80095a0:	3fe00000 	.word	0x3fe00000
 80095a4:	000fffff 	.word	0x000fffff
 80095a8:	3ff00000 	.word	0x3ff00000
 80095ac:	4090cbff 	.word	0x4090cbff
 80095b0:	3f6f3400 	.word	0x3f6f3400
 80095b4:	652b82fe 	.word	0x652b82fe
 80095b8:	3c971547 	.word	0x3c971547

080095bc <__ieee754_sqrt>:
 80095bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c0:	4955      	ldr	r1, [pc, #340]	; (8009718 <__ieee754_sqrt+0x15c>)
 80095c2:	ec55 4b10 	vmov	r4, r5, d0
 80095c6:	43a9      	bics	r1, r5
 80095c8:	462b      	mov	r3, r5
 80095ca:	462a      	mov	r2, r5
 80095cc:	d112      	bne.n	80095f4 <__ieee754_sqrt+0x38>
 80095ce:	ee10 2a10 	vmov	r2, s0
 80095d2:	ee10 0a10 	vmov	r0, s0
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7f7 f816 	bl	8000608 <__aeabi_dmul>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4620      	mov	r0, r4
 80095e2:	4629      	mov	r1, r5
 80095e4:	f7f6 fe5a 	bl	800029c <__adddf3>
 80095e8:	4604      	mov	r4, r0
 80095ea:	460d      	mov	r5, r1
 80095ec:	ec45 4b10 	vmov	d0, r4, r5
 80095f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	ee10 0a10 	vmov	r0, s0
 80095fa:	4621      	mov	r1, r4
 80095fc:	dc0f      	bgt.n	800961e <__ieee754_sqrt+0x62>
 80095fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009602:	4330      	orrs	r0, r6
 8009604:	d0f2      	beq.n	80095ec <__ieee754_sqrt+0x30>
 8009606:	b155      	cbz	r5, 800961e <__ieee754_sqrt+0x62>
 8009608:	ee10 2a10 	vmov	r2, s0
 800960c:	4620      	mov	r0, r4
 800960e:	4629      	mov	r1, r5
 8009610:	f7f6 fe42 	bl	8000298 <__aeabi_dsub>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	f7f7 f920 	bl	800085c <__aeabi_ddiv>
 800961c:	e7e4      	b.n	80095e8 <__ieee754_sqrt+0x2c>
 800961e:	151b      	asrs	r3, r3, #20
 8009620:	d073      	beq.n	800970a <__ieee754_sqrt+0x14e>
 8009622:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009626:	07dd      	lsls	r5, r3, #31
 8009628:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800962c:	bf48      	it	mi
 800962e:	0fc8      	lsrmi	r0, r1, #31
 8009630:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009634:	bf44      	itt	mi
 8009636:	0049      	lslmi	r1, r1, #1
 8009638:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800963c:	2500      	movs	r5, #0
 800963e:	1058      	asrs	r0, r3, #1
 8009640:	0fcb      	lsrs	r3, r1, #31
 8009642:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009646:	0049      	lsls	r1, r1, #1
 8009648:	2316      	movs	r3, #22
 800964a:	462c      	mov	r4, r5
 800964c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009650:	19a7      	adds	r7, r4, r6
 8009652:	4297      	cmp	r7, r2
 8009654:	bfde      	ittt	le
 8009656:	19bc      	addle	r4, r7, r6
 8009658:	1bd2      	suble	r2, r2, r7
 800965a:	19ad      	addle	r5, r5, r6
 800965c:	0fcf      	lsrs	r7, r1, #31
 800965e:	3b01      	subs	r3, #1
 8009660:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009664:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009668:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800966c:	d1f0      	bne.n	8009650 <__ieee754_sqrt+0x94>
 800966e:	f04f 0c20 	mov.w	ip, #32
 8009672:	469e      	mov	lr, r3
 8009674:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009678:	42a2      	cmp	r2, r4
 800967a:	eb06 070e 	add.w	r7, r6, lr
 800967e:	dc02      	bgt.n	8009686 <__ieee754_sqrt+0xca>
 8009680:	d112      	bne.n	80096a8 <__ieee754_sqrt+0xec>
 8009682:	428f      	cmp	r7, r1
 8009684:	d810      	bhi.n	80096a8 <__ieee754_sqrt+0xec>
 8009686:	2f00      	cmp	r7, #0
 8009688:	eb07 0e06 	add.w	lr, r7, r6
 800968c:	da42      	bge.n	8009714 <__ieee754_sqrt+0x158>
 800968e:	f1be 0f00 	cmp.w	lr, #0
 8009692:	db3f      	blt.n	8009714 <__ieee754_sqrt+0x158>
 8009694:	f104 0801 	add.w	r8, r4, #1
 8009698:	1b12      	subs	r2, r2, r4
 800969a:	428f      	cmp	r7, r1
 800969c:	bf88      	it	hi
 800969e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80096a2:	1bc9      	subs	r1, r1, r7
 80096a4:	4433      	add	r3, r6
 80096a6:	4644      	mov	r4, r8
 80096a8:	0052      	lsls	r2, r2, #1
 80096aa:	f1bc 0c01 	subs.w	ip, ip, #1
 80096ae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80096b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096ba:	d1dd      	bne.n	8009678 <__ieee754_sqrt+0xbc>
 80096bc:	430a      	orrs	r2, r1
 80096be:	d006      	beq.n	80096ce <__ieee754_sqrt+0x112>
 80096c0:	1c5c      	adds	r4, r3, #1
 80096c2:	bf13      	iteet	ne
 80096c4:	3301      	addne	r3, #1
 80096c6:	3501      	addeq	r5, #1
 80096c8:	4663      	moveq	r3, ip
 80096ca:	f023 0301 	bicne.w	r3, r3, #1
 80096ce:	106a      	asrs	r2, r5, #1
 80096d0:	085b      	lsrs	r3, r3, #1
 80096d2:	07e9      	lsls	r1, r5, #31
 80096d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80096d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80096dc:	bf48      	it	mi
 80096de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80096e2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80096e6:	461c      	mov	r4, r3
 80096e8:	e780      	b.n	80095ec <__ieee754_sqrt+0x30>
 80096ea:	0aca      	lsrs	r2, r1, #11
 80096ec:	3815      	subs	r0, #21
 80096ee:	0549      	lsls	r1, r1, #21
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	d0fa      	beq.n	80096ea <__ieee754_sqrt+0x12e>
 80096f4:	02d6      	lsls	r6, r2, #11
 80096f6:	d50a      	bpl.n	800970e <__ieee754_sqrt+0x152>
 80096f8:	f1c3 0420 	rsb	r4, r3, #32
 80096fc:	fa21 f404 	lsr.w	r4, r1, r4
 8009700:	1e5d      	subs	r5, r3, #1
 8009702:	4099      	lsls	r1, r3
 8009704:	4322      	orrs	r2, r4
 8009706:	1b43      	subs	r3, r0, r5
 8009708:	e78b      	b.n	8009622 <__ieee754_sqrt+0x66>
 800970a:	4618      	mov	r0, r3
 800970c:	e7f0      	b.n	80096f0 <__ieee754_sqrt+0x134>
 800970e:	0052      	lsls	r2, r2, #1
 8009710:	3301      	adds	r3, #1
 8009712:	e7ef      	b.n	80096f4 <__ieee754_sqrt+0x138>
 8009714:	46a0      	mov	r8, r4
 8009716:	e7bf      	b.n	8009698 <__ieee754_sqrt+0xdc>
 8009718:	7ff00000 	.word	0x7ff00000

0800971c <__ieee754_asinf>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	ee10 5a10 	vmov	r5, s0
 8009722:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009726:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800972a:	ed2d 8b04 	vpush	{d8-d9}
 800972e:	d10c      	bne.n	800974a <__ieee754_asinf+0x2e>
 8009730:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80098ac <__ieee754_asinf+0x190>
 8009734:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80098b0 <__ieee754_asinf+0x194>
 8009738:	ee60 7a27 	vmul.f32	s15, s0, s15
 800973c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009740:	eeb0 0a67 	vmov.f32	s0, s15
 8009744:	ecbd 8b04 	vpop	{d8-d9}
 8009748:	bd38      	pop	{r3, r4, r5, pc}
 800974a:	dd04      	ble.n	8009756 <__ieee754_asinf+0x3a>
 800974c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009750:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009754:	e7f6      	b.n	8009744 <__ieee754_asinf+0x28>
 8009756:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800975a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800975e:	da0b      	bge.n	8009778 <__ieee754_asinf+0x5c>
 8009760:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8009764:	da52      	bge.n	800980c <__ieee754_asinf+0xf0>
 8009766:	eddf 7a53 	vldr	s15, [pc, #332]	; 80098b4 <__ieee754_asinf+0x198>
 800976a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800976e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009776:	dce5      	bgt.n	8009744 <__ieee754_asinf+0x28>
 8009778:	f000 fb54 	bl	8009e24 <fabsf>
 800977c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8009780:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8009784:	ee20 8a08 	vmul.f32	s16, s0, s16
 8009788:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80098b8 <__ieee754_asinf+0x19c>
 800978c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80098bc <__ieee754_asinf+0x1a0>
 8009790:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 80098c0 <__ieee754_asinf+0x1a4>
 8009794:	eea8 7a27 	vfma.f32	s14, s16, s15
 8009798:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80098c4 <__ieee754_asinf+0x1a8>
 800979c:	eee7 7a08 	vfma.f32	s15, s14, s16
 80097a0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80098c8 <__ieee754_asinf+0x1ac>
 80097a4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80097a8:	eddf 7a48 	vldr	s15, [pc, #288]	; 80098cc <__ieee754_asinf+0x1b0>
 80097ac:	eee7 7a08 	vfma.f32	s15, s14, s16
 80097b0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80098d0 <__ieee754_asinf+0x1b4>
 80097b4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80097b8:	eddf 7a46 	vldr	s15, [pc, #280]	; 80098d4 <__ieee754_asinf+0x1b8>
 80097bc:	eee8 7a07 	vfma.f32	s15, s16, s14
 80097c0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80098d8 <__ieee754_asinf+0x1bc>
 80097c4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80097c8:	eddf 7a44 	vldr	s15, [pc, #272]	; 80098dc <__ieee754_asinf+0x1c0>
 80097cc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80097d0:	eeb0 0a48 	vmov.f32	s0, s16
 80097d4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80097d8:	f000 f936 	bl	8009a48 <__ieee754_sqrtf>
 80097dc:	4b40      	ldr	r3, [pc, #256]	; (80098e0 <__ieee754_asinf+0x1c4>)
 80097de:	ee29 9a08 	vmul.f32	s18, s18, s16
 80097e2:	429c      	cmp	r4, r3
 80097e4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80097e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80097ec:	dd3d      	ble.n	800986a <__ieee754_asinf+0x14e>
 80097ee:	eea0 0a06 	vfma.f32	s0, s0, s12
 80097f2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80098e4 <__ieee754_asinf+0x1c8>
 80097f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80097fa:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80098b0 <__ieee754_asinf+0x194>
 80097fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009802:	2d00      	cmp	r5, #0
 8009804:	bfd8      	it	le
 8009806:	eeb1 0a40 	vnegle.f32	s0, s0
 800980a:	e79b      	b.n	8009744 <__ieee754_asinf+0x28>
 800980c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009810:	eddf 6a29 	vldr	s13, [pc, #164]	; 80098b8 <__ieee754_asinf+0x19c>
 8009814:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80098bc <__ieee754_asinf+0x1a0>
 8009818:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80098d0 <__ieee754_asinf+0x1b4>
 800981c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009820:	eddf 6a28 	vldr	s13, [pc, #160]	; 80098c4 <__ieee754_asinf+0x1a8>
 8009824:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009828:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80098c8 <__ieee754_asinf+0x1ac>
 800982c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009830:	eddf 6a26 	vldr	s13, [pc, #152]	; 80098cc <__ieee754_asinf+0x1b0>
 8009834:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009838:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80098c0 <__ieee754_asinf+0x1a4>
 800983c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009840:	eddf 6a24 	vldr	s13, [pc, #144]	; 80098d4 <__ieee754_asinf+0x1b8>
 8009844:	eee7 6a86 	vfma.f32	s13, s15, s12
 8009848:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80098d8 <__ieee754_asinf+0x1bc>
 800984c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8009850:	eddf 6a22 	vldr	s13, [pc, #136]	; 80098dc <__ieee754_asinf+0x1c0>
 8009854:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800985c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8009860:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8009864:	eea0 0a27 	vfma.f32	s0, s0, s15
 8009868:	e76c      	b.n	8009744 <__ieee754_asinf+0x28>
 800986a:	ee10 3a10 	vmov	r3, s0
 800986e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009872:	f023 030f 	bic.w	r3, r3, #15
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef1 6a67 	vneg.f32	s13, s15
 800987e:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8009882:	ee70 5a00 	vadd.f32	s11, s0, s0
 8009886:	ee37 0a80 	vadd.f32	s0, s15, s0
 800988a:	eddf 7a08 	vldr	s15, [pc, #32]	; 80098ac <__ieee754_asinf+0x190>
 800988e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8009892:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80098e8 <__ieee754_asinf+0x1cc>
 8009896:	eee5 7a47 	vfms.f32	s15, s10, s14
 800989a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800989e:	eeb0 6a40 	vmov.f32	s12, s0
 80098a2:	eea6 6a87 	vfma.f32	s12, s13, s14
 80098a6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80098aa:	e7a8      	b.n	80097fe <__ieee754_asinf+0xe2>
 80098ac:	b33bbd2e 	.word	0xb33bbd2e
 80098b0:	3fc90fdb 	.word	0x3fc90fdb
 80098b4:	7149f2ca 	.word	0x7149f2ca
 80098b8:	3811ef08 	.word	0x3811ef08
 80098bc:	3a4f7f04 	.word	0x3a4f7f04
 80098c0:	3e2aaaab 	.word	0x3e2aaaab
 80098c4:	bd241146 	.word	0xbd241146
 80098c8:	3e4e0aa8 	.word	0x3e4e0aa8
 80098cc:	bea6b090 	.word	0xbea6b090
 80098d0:	3d9dc62e 	.word	0x3d9dc62e
 80098d4:	bf303361 	.word	0xbf303361
 80098d8:	4001572d 	.word	0x4001572d
 80098dc:	c019d139 	.word	0xc019d139
 80098e0:	3f799999 	.word	0x3f799999
 80098e4:	333bbd2e 	.word	0x333bbd2e
 80098e8:	3f490fdb 	.word	0x3f490fdb

080098ec <__ieee754_atan2f>:
 80098ec:	ee10 2a90 	vmov	r2, s1
 80098f0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80098f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80098f8:	b510      	push	{r4, lr}
 80098fa:	eef0 7a40 	vmov.f32	s15, s0
 80098fe:	dc06      	bgt.n	800990e <__ieee754_atan2f+0x22>
 8009900:	ee10 0a10 	vmov	r0, s0
 8009904:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009908:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800990c:	dd04      	ble.n	8009918 <__ieee754_atan2f+0x2c>
 800990e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009912:	eeb0 0a67 	vmov.f32	s0, s15
 8009916:	bd10      	pop	{r4, pc}
 8009918:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800991c:	d103      	bne.n	8009926 <__ieee754_atan2f+0x3a>
 800991e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009922:	f000 b9ab 	b.w	8009c7c <atanf>
 8009926:	1794      	asrs	r4, r2, #30
 8009928:	f004 0402 	and.w	r4, r4, #2
 800992c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009930:	b943      	cbnz	r3, 8009944 <__ieee754_atan2f+0x58>
 8009932:	2c02      	cmp	r4, #2
 8009934:	d06e      	beq.n	8009a14 <__ieee754_atan2f+0x128>
 8009936:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8009a1c <__ieee754_atan2f+0x130>
 800993a:	2c03      	cmp	r4, #3
 800993c:	bf08      	it	eq
 800993e:	eef0 7a47 	vmoveq.f32	s15, s14
 8009942:	e7e6      	b.n	8009912 <__ieee754_atan2f+0x26>
 8009944:	b941      	cbnz	r1, 8009958 <__ieee754_atan2f+0x6c>
 8009946:	eddf 7a36 	vldr	s15, [pc, #216]	; 8009a20 <__ieee754_atan2f+0x134>
 800994a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009a24 <__ieee754_atan2f+0x138>
 800994e:	2800      	cmp	r0, #0
 8009950:	bfb8      	it	lt
 8009952:	eef0 7a47 	vmovlt.f32	s15, s14
 8009956:	e7dc      	b.n	8009912 <__ieee754_atan2f+0x26>
 8009958:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800995c:	d122      	bne.n	80099a4 <__ieee754_atan2f+0xb8>
 800995e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009962:	d112      	bne.n	800998a <__ieee754_atan2f+0x9e>
 8009964:	2c02      	cmp	r4, #2
 8009966:	d00a      	beq.n	800997e <__ieee754_atan2f+0x92>
 8009968:	2c03      	cmp	r4, #3
 800996a:	d00b      	beq.n	8009984 <__ieee754_atan2f+0x98>
 800996c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8009a28 <__ieee754_atan2f+0x13c>
 8009970:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009a2c <__ieee754_atan2f+0x140>
 8009974:	2c01      	cmp	r4, #1
 8009976:	bf18      	it	ne
 8009978:	eef0 7a47 	vmovne.f32	s15, s14
 800997c:	e7c9      	b.n	8009912 <__ieee754_atan2f+0x26>
 800997e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8009a30 <__ieee754_atan2f+0x144>
 8009982:	e7c6      	b.n	8009912 <__ieee754_atan2f+0x26>
 8009984:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009a34 <__ieee754_atan2f+0x148>
 8009988:	e7c3      	b.n	8009912 <__ieee754_atan2f+0x26>
 800998a:	2c02      	cmp	r4, #2
 800998c:	d042      	beq.n	8009a14 <__ieee754_atan2f+0x128>
 800998e:	2c03      	cmp	r4, #3
 8009990:	d005      	beq.n	800999e <__ieee754_atan2f+0xb2>
 8009992:	2c01      	cmp	r4, #1
 8009994:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009a38 <__ieee754_atan2f+0x14c>
 8009998:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009a3c <__ieee754_atan2f+0x150>
 800999c:	e7eb      	b.n	8009976 <__ieee754_atan2f+0x8a>
 800999e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009a1c <__ieee754_atan2f+0x130>
 80099a2:	e7b6      	b.n	8009912 <__ieee754_atan2f+0x26>
 80099a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80099a8:	d0cd      	beq.n	8009946 <__ieee754_atan2f+0x5a>
 80099aa:	1a5b      	subs	r3, r3, r1
 80099ac:	15db      	asrs	r3, r3, #23
 80099ae:	2b3c      	cmp	r3, #60	; 0x3c
 80099b0:	dc1a      	bgt.n	80099e8 <__ieee754_atan2f+0xfc>
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	da01      	bge.n	80099ba <__ieee754_atan2f+0xce>
 80099b6:	333c      	adds	r3, #60	; 0x3c
 80099b8:	db19      	blt.n	80099ee <__ieee754_atan2f+0x102>
 80099ba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80099be:	f000 fa31 	bl	8009e24 <fabsf>
 80099c2:	f000 f95b 	bl	8009c7c <atanf>
 80099c6:	eef0 7a40 	vmov.f32	s15, s0
 80099ca:	2c01      	cmp	r4, #1
 80099cc:	d012      	beq.n	80099f4 <__ieee754_atan2f+0x108>
 80099ce:	2c02      	cmp	r4, #2
 80099d0:	d017      	beq.n	8009a02 <__ieee754_atan2f+0x116>
 80099d2:	2c00      	cmp	r4, #0
 80099d4:	d09d      	beq.n	8009912 <__ieee754_atan2f+0x26>
 80099d6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009a40 <__ieee754_atan2f+0x154>
 80099da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099de:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009a44 <__ieee754_atan2f+0x158>
 80099e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099e6:	e794      	b.n	8009912 <__ieee754_atan2f+0x26>
 80099e8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009a20 <__ieee754_atan2f+0x134>
 80099ec:	e7ed      	b.n	80099ca <__ieee754_atan2f+0xde>
 80099ee:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009a3c <__ieee754_atan2f+0x150>
 80099f2:	e7ea      	b.n	80099ca <__ieee754_atan2f+0xde>
 80099f4:	ee17 3a90 	vmov	r3, s15
 80099f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099fc:	ee07 3a90 	vmov	s15, r3
 8009a00:	e787      	b.n	8009912 <__ieee754_atan2f+0x26>
 8009a02:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009a40 <__ieee754_atan2f+0x154>
 8009a06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a0a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009a44 <__ieee754_atan2f+0x158>
 8009a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a12:	e77e      	b.n	8009912 <__ieee754_atan2f+0x26>
 8009a14:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009a44 <__ieee754_atan2f+0x158>
 8009a18:	e77b      	b.n	8009912 <__ieee754_atan2f+0x26>
 8009a1a:	bf00      	nop
 8009a1c:	c0490fdb 	.word	0xc0490fdb
 8009a20:	3fc90fdb 	.word	0x3fc90fdb
 8009a24:	bfc90fdb 	.word	0xbfc90fdb
 8009a28:	bf490fdb 	.word	0xbf490fdb
 8009a2c:	3f490fdb 	.word	0x3f490fdb
 8009a30:	4016cbe4 	.word	0x4016cbe4
 8009a34:	c016cbe4 	.word	0xc016cbe4
 8009a38:	80000000 	.word	0x80000000
 8009a3c:	00000000 	.word	0x00000000
 8009a40:	33bbbd2e 	.word	0x33bbbd2e
 8009a44:	40490fdb 	.word	0x40490fdb

08009a48 <__ieee754_sqrtf>:
 8009a48:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009a4c:	4770      	bx	lr

08009a4e <fabs>:
 8009a4e:	ec51 0b10 	vmov	r0, r1, d0
 8009a52:	ee10 2a10 	vmov	r2, s0
 8009a56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a5a:	ec43 2b10 	vmov	d0, r2, r3
 8009a5e:	4770      	bx	lr

08009a60 <finite>:
 8009a60:	ee10 3a90 	vmov	r3, s1
 8009a64:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009a68:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009a6c:	0fc0      	lsrs	r0, r0, #31
 8009a6e:	4770      	bx	lr

08009a70 <matherr>:
 8009a70:	2000      	movs	r0, #0
 8009a72:	4770      	bx	lr
 8009a74:	0000      	movs	r0, r0
	...

08009a78 <nan>:
 8009a78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a80 <nan+0x8>
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	00000000 	.word	0x00000000
 8009a84:	7ff80000 	.word	0x7ff80000

08009a88 <rint>:
 8009a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a8a:	ec51 0b10 	vmov	r0, r1, d0
 8009a8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009a92:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009a96:	2e13      	cmp	r6, #19
 8009a98:	460b      	mov	r3, r1
 8009a9a:	ee10 4a10 	vmov	r4, s0
 8009a9e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009aa2:	dc56      	bgt.n	8009b52 <rint+0xca>
 8009aa4:	2e00      	cmp	r6, #0
 8009aa6:	da2b      	bge.n	8009b00 <rint+0x78>
 8009aa8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009aac:	4302      	orrs	r2, r0
 8009aae:	d023      	beq.n	8009af8 <rint+0x70>
 8009ab0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009ab4:	4302      	orrs	r2, r0
 8009ab6:	4254      	negs	r4, r2
 8009ab8:	4314      	orrs	r4, r2
 8009aba:	0c4b      	lsrs	r3, r1, #17
 8009abc:	0b24      	lsrs	r4, r4, #12
 8009abe:	045b      	lsls	r3, r3, #17
 8009ac0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009ac4:	ea44 0103 	orr.w	r1, r4, r3
 8009ac8:	460b      	mov	r3, r1
 8009aca:	492f      	ldr	r1, [pc, #188]	; (8009b88 <rint+0x100>)
 8009acc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009ad0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7f6 fbdf 	bl	800029c <__adddf3>
 8009ade:	e9cd 0100 	strd	r0, r1, [sp]
 8009ae2:	463b      	mov	r3, r7
 8009ae4:	4632      	mov	r2, r6
 8009ae6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aea:	f7f6 fbd5 	bl	8000298 <__aeabi_dsub>
 8009aee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009af2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009af6:	4639      	mov	r1, r7
 8009af8:	ec41 0b10 	vmov	d0, r0, r1
 8009afc:	b003      	add	sp, #12
 8009afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b00:	4a22      	ldr	r2, [pc, #136]	; (8009b8c <rint+0x104>)
 8009b02:	4132      	asrs	r2, r6
 8009b04:	ea01 0702 	and.w	r7, r1, r2
 8009b08:	4307      	orrs	r7, r0
 8009b0a:	d0f5      	beq.n	8009af8 <rint+0x70>
 8009b0c:	0852      	lsrs	r2, r2, #1
 8009b0e:	4011      	ands	r1, r2
 8009b10:	430c      	orrs	r4, r1
 8009b12:	d00b      	beq.n	8009b2c <rint+0xa4>
 8009b14:	ea23 0202 	bic.w	r2, r3, r2
 8009b18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b1c:	2e13      	cmp	r6, #19
 8009b1e:	fa43 f306 	asr.w	r3, r3, r6
 8009b22:	bf0c      	ite	eq
 8009b24:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009b28:	2400      	movne	r4, #0
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	4916      	ldr	r1, [pc, #88]	; (8009b88 <rint+0x100>)
 8009b2e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009b32:	4622      	mov	r2, r4
 8009b34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b38:	4620      	mov	r0, r4
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	f7f6 fbae 	bl	800029c <__adddf3>
 8009b40:	e9cd 0100 	strd	r0, r1, [sp]
 8009b44:	4622      	mov	r2, r4
 8009b46:	462b      	mov	r3, r5
 8009b48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b4c:	f7f6 fba4 	bl	8000298 <__aeabi_dsub>
 8009b50:	e7d2      	b.n	8009af8 <rint+0x70>
 8009b52:	2e33      	cmp	r6, #51	; 0x33
 8009b54:	dd07      	ble.n	8009b66 <rint+0xde>
 8009b56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009b5a:	d1cd      	bne.n	8009af8 <rint+0x70>
 8009b5c:	ee10 2a10 	vmov	r2, s0
 8009b60:	f7f6 fb9c 	bl	800029c <__adddf3>
 8009b64:	e7c8      	b.n	8009af8 <rint+0x70>
 8009b66:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b6e:	40f2      	lsrs	r2, r6
 8009b70:	4210      	tst	r0, r2
 8009b72:	d0c1      	beq.n	8009af8 <rint+0x70>
 8009b74:	0852      	lsrs	r2, r2, #1
 8009b76:	4210      	tst	r0, r2
 8009b78:	bf1f      	itttt	ne
 8009b7a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009b7e:	ea20 0202 	bicne.w	r2, r0, r2
 8009b82:	4134      	asrne	r4, r6
 8009b84:	4314      	orrne	r4, r2
 8009b86:	e7d1      	b.n	8009b2c <rint+0xa4>
 8009b88:	0800e888 	.word	0x0800e888
 8009b8c:	000fffff 	.word	0x000fffff

08009b90 <scalbn>:
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	ec55 4b10 	vmov	r4, r5, d0
 8009b96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	b9aa      	cbnz	r2, 8009bcc <scalbn+0x3c>
 8009ba0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009ba4:	4323      	orrs	r3, r4
 8009ba6:	d03b      	beq.n	8009c20 <scalbn+0x90>
 8009ba8:	4b31      	ldr	r3, [pc, #196]	; (8009c70 <scalbn+0xe0>)
 8009baa:	4629      	mov	r1, r5
 8009bac:	2200      	movs	r2, #0
 8009bae:	ee10 0a10 	vmov	r0, s0
 8009bb2:	f7f6 fd29 	bl	8000608 <__aeabi_dmul>
 8009bb6:	4b2f      	ldr	r3, [pc, #188]	; (8009c74 <scalbn+0xe4>)
 8009bb8:	429e      	cmp	r6, r3
 8009bba:	4604      	mov	r4, r0
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	da12      	bge.n	8009be6 <scalbn+0x56>
 8009bc0:	a327      	add	r3, pc, #156	; (adr r3, 8009c60 <scalbn+0xd0>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	f7f6 fd1f 	bl	8000608 <__aeabi_dmul>
 8009bca:	e009      	b.n	8009be0 <scalbn+0x50>
 8009bcc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009bd0:	428a      	cmp	r2, r1
 8009bd2:	d10c      	bne.n	8009bee <scalbn+0x5e>
 8009bd4:	ee10 2a10 	vmov	r2, s0
 8009bd8:	4620      	mov	r0, r4
 8009bda:	4629      	mov	r1, r5
 8009bdc:	f7f6 fb5e 	bl	800029c <__adddf3>
 8009be0:	4604      	mov	r4, r0
 8009be2:	460d      	mov	r5, r1
 8009be4:	e01c      	b.n	8009c20 <scalbn+0x90>
 8009be6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009bea:	460b      	mov	r3, r1
 8009bec:	3a36      	subs	r2, #54	; 0x36
 8009bee:	4432      	add	r2, r6
 8009bf0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009bf4:	428a      	cmp	r2, r1
 8009bf6:	dd0b      	ble.n	8009c10 <scalbn+0x80>
 8009bf8:	ec45 4b11 	vmov	d1, r4, r5
 8009bfc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009c68 <scalbn+0xd8>
 8009c00:	f000 f917 	bl	8009e32 <copysign>
 8009c04:	a318      	add	r3, pc, #96	; (adr r3, 8009c68 <scalbn+0xd8>)
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	ec51 0b10 	vmov	r0, r1, d0
 8009c0e:	e7da      	b.n	8009bc6 <scalbn+0x36>
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	dd08      	ble.n	8009c26 <scalbn+0x96>
 8009c14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c20:	ec45 4b10 	vmov	d0, r4, r5
 8009c24:	bd70      	pop	{r4, r5, r6, pc}
 8009c26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009c2a:	da0d      	bge.n	8009c48 <scalbn+0xb8>
 8009c2c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009c30:	429e      	cmp	r6, r3
 8009c32:	ec45 4b11 	vmov	d1, r4, r5
 8009c36:	dce1      	bgt.n	8009bfc <scalbn+0x6c>
 8009c38:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009c60 <scalbn+0xd0>
 8009c3c:	f000 f8f9 	bl	8009e32 <copysign>
 8009c40:	a307      	add	r3, pc, #28	; (adr r3, 8009c60 <scalbn+0xd0>)
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	e7e0      	b.n	8009c0a <scalbn+0x7a>
 8009c48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c4c:	3236      	adds	r2, #54	; 0x36
 8009c4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c56:	4620      	mov	r0, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	4b06      	ldr	r3, [pc, #24]	; (8009c78 <scalbn+0xe8>)
 8009c5e:	e7b2      	b.n	8009bc6 <scalbn+0x36>
 8009c60:	c2f8f359 	.word	0xc2f8f359
 8009c64:	01a56e1f 	.word	0x01a56e1f
 8009c68:	8800759c 	.word	0x8800759c
 8009c6c:	7e37e43c 	.word	0x7e37e43c
 8009c70:	43500000 	.word	0x43500000
 8009c74:	ffff3cb0 	.word	0xffff3cb0
 8009c78:	3c900000 	.word	0x3c900000

08009c7c <atanf>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	ee10 5a10 	vmov	r5, s0
 8009c82:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009c86:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009c8a:	eef0 7a40 	vmov.f32	s15, s0
 8009c8e:	db10      	blt.n	8009cb2 <atanf+0x36>
 8009c90:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009c94:	dd04      	ble.n	8009ca0 <atanf+0x24>
 8009c96:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009dd8 <atanf+0x15c>
 8009ca4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009ddc <atanf+0x160>
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	bfd8      	it	le
 8009cac:	eef0 7a47 	vmovle.f32	s15, s14
 8009cb0:	e7f3      	b.n	8009c9a <atanf+0x1e>
 8009cb2:	4b4b      	ldr	r3, [pc, #300]	; (8009de0 <atanf+0x164>)
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	dc10      	bgt.n	8009cda <atanf+0x5e>
 8009cb8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009cbc:	da0a      	bge.n	8009cd4 <atanf+0x58>
 8009cbe:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009de4 <atanf+0x168>
 8009cc2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd2:	dce2      	bgt.n	8009c9a <atanf+0x1e>
 8009cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cd8:	e013      	b.n	8009d02 <atanf+0x86>
 8009cda:	f000 f8a3 	bl	8009e24 <fabsf>
 8009cde:	4b42      	ldr	r3, [pc, #264]	; (8009de8 <atanf+0x16c>)
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	dc4f      	bgt.n	8009d84 <atanf+0x108>
 8009ce4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	dc41      	bgt.n	8009d70 <atanf+0xf4>
 8009cec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009cf0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009cf4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009cfe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009d08:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009dec <atanf+0x170>
 8009d0c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009df0 <atanf+0x174>
 8009d10:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009df4 <atanf+0x178>
 8009d14:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009d18:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009d1c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009df8 <atanf+0x17c>
 8009d20:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009d24:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009dfc <atanf+0x180>
 8009d28:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d2c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009e00 <atanf+0x184>
 8009d30:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009d34:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009e04 <atanf+0x188>
 8009d38:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d3c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009e08 <atanf+0x18c>
 8009d40:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009d44:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009e0c <atanf+0x190>
 8009d48:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009d4c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009e10 <atanf+0x194>
 8009d50:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009d54:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009e14 <atanf+0x198>
 8009d58:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009d5c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009d60:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d68:	d121      	bne.n	8009dae <atanf+0x132>
 8009d6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d6e:	e794      	b.n	8009c9a <atanf+0x1e>
 8009d70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009d74:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009d78:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009d82:	e7be      	b.n	8009d02 <atanf+0x86>
 8009d84:	4b24      	ldr	r3, [pc, #144]	; (8009e18 <atanf+0x19c>)
 8009d86:	429c      	cmp	r4, r3
 8009d88:	dc0b      	bgt.n	8009da2 <atanf+0x126>
 8009d8a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d92:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009d96:	2302      	movs	r3, #2
 8009d98:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da0:	e7af      	b.n	8009d02 <atanf+0x86>
 8009da2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009da6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009daa:	2303      	movs	r3, #3
 8009dac:	e7a9      	b.n	8009d02 <atanf+0x86>
 8009dae:	4a1b      	ldr	r2, [pc, #108]	; (8009e1c <atanf+0x1a0>)
 8009db0:	491b      	ldr	r1, [pc, #108]	; (8009e20 <atanf+0x1a4>)
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	441a      	add	r2, r3
 8009db6:	440b      	add	r3, r1
 8009db8:	edd3 6a00 	vldr	s13, [r3]
 8009dbc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009dc0:	2d00      	cmp	r5, #0
 8009dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dc6:	ed92 7a00 	vldr	s14, [r2]
 8009dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dce:	bfb8      	it	lt
 8009dd0:	eef1 7a67 	vneglt.f32	s15, s15
 8009dd4:	e761      	b.n	8009c9a <atanf+0x1e>
 8009dd6:	bf00      	nop
 8009dd8:	bfc90fdb 	.word	0xbfc90fdb
 8009ddc:	3fc90fdb 	.word	0x3fc90fdb
 8009de0:	3edfffff 	.word	0x3edfffff
 8009de4:	7149f2ca 	.word	0x7149f2ca
 8009de8:	3f97ffff 	.word	0x3f97ffff
 8009dec:	3c8569d7 	.word	0x3c8569d7
 8009df0:	3d4bda59 	.word	0x3d4bda59
 8009df4:	bd6ef16b 	.word	0xbd6ef16b
 8009df8:	3d886b35 	.word	0x3d886b35
 8009dfc:	3dba2e6e 	.word	0x3dba2e6e
 8009e00:	3e124925 	.word	0x3e124925
 8009e04:	3eaaaaab 	.word	0x3eaaaaab
 8009e08:	bd15a221 	.word	0xbd15a221
 8009e0c:	bd9d8795 	.word	0xbd9d8795
 8009e10:	bde38e38 	.word	0xbde38e38
 8009e14:	be4ccccd 	.word	0xbe4ccccd
 8009e18:	401bffff 	.word	0x401bffff
 8009e1c:	0800e898 	.word	0x0800e898
 8009e20:	0800e8a8 	.word	0x0800e8a8

08009e24 <fabsf>:
 8009e24:	ee10 3a10 	vmov	r3, s0
 8009e28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e2c:	ee00 3a10 	vmov	s0, r3
 8009e30:	4770      	bx	lr

08009e32 <copysign>:
 8009e32:	ec51 0b10 	vmov	r0, r1, d0
 8009e36:	ee11 0a90 	vmov	r0, s3
 8009e3a:	ee10 2a10 	vmov	r2, s0
 8009e3e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009e42:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009e46:	ea41 0300 	orr.w	r3, r1, r0
 8009e4a:	ec43 2b10 	vmov	d0, r2, r3
 8009e4e:	4770      	bx	lr

08009e50 <__errno>:
 8009e50:	4b01      	ldr	r3, [pc, #4]	; (8009e58 <__errno+0x8>)
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	20000098 	.word	0x20000098

08009e5c <__libc_init_array>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	4e0d      	ldr	r6, [pc, #52]	; (8009e94 <__libc_init_array+0x38>)
 8009e60:	4c0d      	ldr	r4, [pc, #52]	; (8009e98 <__libc_init_array+0x3c>)
 8009e62:	1ba4      	subs	r4, r4, r6
 8009e64:	10a4      	asrs	r4, r4, #2
 8009e66:	2500      	movs	r5, #0
 8009e68:	42a5      	cmp	r5, r4
 8009e6a:	d109      	bne.n	8009e80 <__libc_init_array+0x24>
 8009e6c:	4e0b      	ldr	r6, [pc, #44]	; (8009e9c <__libc_init_array+0x40>)
 8009e6e:	4c0c      	ldr	r4, [pc, #48]	; (8009ea0 <__libc_init_array+0x44>)
 8009e70:	f004 fa5e 	bl	800e330 <_init>
 8009e74:	1ba4      	subs	r4, r4, r6
 8009e76:	10a4      	asrs	r4, r4, #2
 8009e78:	2500      	movs	r5, #0
 8009e7a:	42a5      	cmp	r5, r4
 8009e7c:	d105      	bne.n	8009e8a <__libc_init_array+0x2e>
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e84:	4798      	blx	r3
 8009e86:	3501      	adds	r5, #1
 8009e88:	e7ee      	b.n	8009e68 <__libc_init_array+0xc>
 8009e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e8e:	4798      	blx	r3
 8009e90:	3501      	adds	r5, #1
 8009e92:	e7f2      	b.n	8009e7a <__libc_init_array+0x1e>
 8009e94:	0800ebd8 	.word	0x0800ebd8
 8009e98:	0800ebd8 	.word	0x0800ebd8
 8009e9c:	0800ebd8 	.word	0x0800ebd8
 8009ea0:	0800ebdc 	.word	0x0800ebdc

08009ea4 <__locale_ctype_ptr_l>:
 8009ea4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009ea8:	4770      	bx	lr

08009eaa <__ascii_mbtowc>:
 8009eaa:	b082      	sub	sp, #8
 8009eac:	b901      	cbnz	r1, 8009eb0 <__ascii_mbtowc+0x6>
 8009eae:	a901      	add	r1, sp, #4
 8009eb0:	b142      	cbz	r2, 8009ec4 <__ascii_mbtowc+0x1a>
 8009eb2:	b14b      	cbz	r3, 8009ec8 <__ascii_mbtowc+0x1e>
 8009eb4:	7813      	ldrb	r3, [r2, #0]
 8009eb6:	600b      	str	r3, [r1, #0]
 8009eb8:	7812      	ldrb	r2, [r2, #0]
 8009eba:	1c10      	adds	r0, r2, #0
 8009ebc:	bf18      	it	ne
 8009ebe:	2001      	movne	r0, #1
 8009ec0:	b002      	add	sp, #8
 8009ec2:	4770      	bx	lr
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	e7fb      	b.n	8009ec0 <__ascii_mbtowc+0x16>
 8009ec8:	f06f 0001 	mvn.w	r0, #1
 8009ecc:	e7f8      	b.n	8009ec0 <__ascii_mbtowc+0x16>

08009ece <memcpy>:
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	1e43      	subs	r3, r0, #1
 8009ed2:	440a      	add	r2, r1
 8009ed4:	4291      	cmp	r1, r2
 8009ed6:	d100      	bne.n	8009eda <memcpy+0xc>
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ee2:	e7f7      	b.n	8009ed4 <memcpy+0x6>

08009ee4 <memset>:
 8009ee4:	4402      	add	r2, r0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d100      	bne.n	8009eee <memset+0xa>
 8009eec:	4770      	bx	lr
 8009eee:	f803 1b01 	strb.w	r1, [r3], #1
 8009ef2:	e7f9      	b.n	8009ee8 <memset+0x4>

08009ef4 <__cvt>:
 8009ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef8:	ec55 4b10 	vmov	r4, r5, d0
 8009efc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009efe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	460e      	mov	r6, r1
 8009f06:	4691      	mov	r9, r2
 8009f08:	4619      	mov	r1, r3
 8009f0a:	bfb8      	it	lt
 8009f0c:	4622      	movlt	r2, r4
 8009f0e:	462b      	mov	r3, r5
 8009f10:	f027 0720 	bic.w	r7, r7, #32
 8009f14:	bfbb      	ittet	lt
 8009f16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f1a:	461d      	movlt	r5, r3
 8009f1c:	2300      	movge	r3, #0
 8009f1e:	232d      	movlt	r3, #45	; 0x2d
 8009f20:	bfb8      	it	lt
 8009f22:	4614      	movlt	r4, r2
 8009f24:	2f46      	cmp	r7, #70	; 0x46
 8009f26:	700b      	strb	r3, [r1, #0]
 8009f28:	d004      	beq.n	8009f34 <__cvt+0x40>
 8009f2a:	2f45      	cmp	r7, #69	; 0x45
 8009f2c:	d100      	bne.n	8009f30 <__cvt+0x3c>
 8009f2e:	3601      	adds	r6, #1
 8009f30:	2102      	movs	r1, #2
 8009f32:	e000      	b.n	8009f36 <__cvt+0x42>
 8009f34:	2103      	movs	r1, #3
 8009f36:	ab03      	add	r3, sp, #12
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	ab02      	add	r3, sp, #8
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	4632      	mov	r2, r6
 8009f40:	4653      	mov	r3, sl
 8009f42:	ec45 4b10 	vmov	d0, r4, r5
 8009f46:	f001 febf 	bl	800bcc8 <_dtoa_r>
 8009f4a:	2f47      	cmp	r7, #71	; 0x47
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	d102      	bne.n	8009f56 <__cvt+0x62>
 8009f50:	f019 0f01 	tst.w	r9, #1
 8009f54:	d026      	beq.n	8009fa4 <__cvt+0xb0>
 8009f56:	2f46      	cmp	r7, #70	; 0x46
 8009f58:	eb08 0906 	add.w	r9, r8, r6
 8009f5c:	d111      	bne.n	8009f82 <__cvt+0x8e>
 8009f5e:	f898 3000 	ldrb.w	r3, [r8]
 8009f62:	2b30      	cmp	r3, #48	; 0x30
 8009f64:	d10a      	bne.n	8009f7c <__cvt+0x88>
 8009f66:	2200      	movs	r2, #0
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f7f6 fdb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f72:	b918      	cbnz	r0, 8009f7c <__cvt+0x88>
 8009f74:	f1c6 0601 	rsb	r6, r6, #1
 8009f78:	f8ca 6000 	str.w	r6, [sl]
 8009f7c:	f8da 3000 	ldr.w	r3, [sl]
 8009f80:	4499      	add	r9, r3
 8009f82:	2200      	movs	r2, #0
 8009f84:	2300      	movs	r3, #0
 8009f86:	4620      	mov	r0, r4
 8009f88:	4629      	mov	r1, r5
 8009f8a:	f7f6 fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f8e:	b938      	cbnz	r0, 8009fa0 <__cvt+0xac>
 8009f90:	2230      	movs	r2, #48	; 0x30
 8009f92:	9b03      	ldr	r3, [sp, #12]
 8009f94:	454b      	cmp	r3, r9
 8009f96:	d205      	bcs.n	8009fa4 <__cvt+0xb0>
 8009f98:	1c59      	adds	r1, r3, #1
 8009f9a:	9103      	str	r1, [sp, #12]
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	e7f8      	b.n	8009f92 <__cvt+0x9e>
 8009fa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fa4:	9b03      	ldr	r3, [sp, #12]
 8009fa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fa8:	eba3 0308 	sub.w	r3, r3, r8
 8009fac:	4640      	mov	r0, r8
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	b004      	add	sp, #16
 8009fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009fb6 <__exponent>:
 8009fb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fb8:	2900      	cmp	r1, #0
 8009fba:	4604      	mov	r4, r0
 8009fbc:	bfba      	itte	lt
 8009fbe:	4249      	neglt	r1, r1
 8009fc0:	232d      	movlt	r3, #45	; 0x2d
 8009fc2:	232b      	movge	r3, #43	; 0x2b
 8009fc4:	2909      	cmp	r1, #9
 8009fc6:	f804 2b02 	strb.w	r2, [r4], #2
 8009fca:	7043      	strb	r3, [r0, #1]
 8009fcc:	dd20      	ble.n	800a010 <__exponent+0x5a>
 8009fce:	f10d 0307 	add.w	r3, sp, #7
 8009fd2:	461f      	mov	r7, r3
 8009fd4:	260a      	movs	r6, #10
 8009fd6:	fb91 f5f6 	sdiv	r5, r1, r6
 8009fda:	fb06 1115 	mls	r1, r6, r5, r1
 8009fde:	3130      	adds	r1, #48	; 0x30
 8009fe0:	2d09      	cmp	r5, #9
 8009fe2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fe6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009fea:	4629      	mov	r1, r5
 8009fec:	dc09      	bgt.n	800a002 <__exponent+0x4c>
 8009fee:	3130      	adds	r1, #48	; 0x30
 8009ff0:	3b02      	subs	r3, #2
 8009ff2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009ff6:	42bb      	cmp	r3, r7
 8009ff8:	4622      	mov	r2, r4
 8009ffa:	d304      	bcc.n	800a006 <__exponent+0x50>
 8009ffc:	1a10      	subs	r0, r2, r0
 8009ffe:	b003      	add	sp, #12
 800a000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a002:	4613      	mov	r3, r2
 800a004:	e7e7      	b.n	8009fd6 <__exponent+0x20>
 800a006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a00a:	f804 2b01 	strb.w	r2, [r4], #1
 800a00e:	e7f2      	b.n	8009ff6 <__exponent+0x40>
 800a010:	2330      	movs	r3, #48	; 0x30
 800a012:	4419      	add	r1, r3
 800a014:	7083      	strb	r3, [r0, #2]
 800a016:	1d02      	adds	r2, r0, #4
 800a018:	70c1      	strb	r1, [r0, #3]
 800a01a:	e7ef      	b.n	8009ffc <__exponent+0x46>

0800a01c <_printf_float>:
 800a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	b08d      	sub	sp, #52	; 0x34
 800a022:	460c      	mov	r4, r1
 800a024:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a028:	4616      	mov	r6, r2
 800a02a:	461f      	mov	r7, r3
 800a02c:	4605      	mov	r5, r0
 800a02e:	f003 f8a5 	bl	800d17c <_localeconv_r>
 800a032:	6803      	ldr	r3, [r0, #0]
 800a034:	9304      	str	r3, [sp, #16]
 800a036:	4618      	mov	r0, r3
 800a038:	f7f6 f8d2 	bl	80001e0 <strlen>
 800a03c:	2300      	movs	r3, #0
 800a03e:	930a      	str	r3, [sp, #40]	; 0x28
 800a040:	f8d8 3000 	ldr.w	r3, [r8]
 800a044:	9005      	str	r0, [sp, #20]
 800a046:	3307      	adds	r3, #7
 800a048:	f023 0307 	bic.w	r3, r3, #7
 800a04c:	f103 0208 	add.w	r2, r3, #8
 800a050:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a054:	f8d4 b000 	ldr.w	fp, [r4]
 800a058:	f8c8 2000 	str.w	r2, [r8]
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a064:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a068:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a06c:	9307      	str	r3, [sp, #28]
 800a06e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a076:	4ba7      	ldr	r3, [pc, #668]	; (800a314 <_printf_float+0x2f8>)
 800a078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a07c:	f7f6 fd5e 	bl	8000b3c <__aeabi_dcmpun>
 800a080:	bb70      	cbnz	r0, 800a0e0 <_printf_float+0xc4>
 800a082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a086:	4ba3      	ldr	r3, [pc, #652]	; (800a314 <_printf_float+0x2f8>)
 800a088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a08c:	f7f6 fd38 	bl	8000b00 <__aeabi_dcmple>
 800a090:	bb30      	cbnz	r0, 800a0e0 <_printf_float+0xc4>
 800a092:	2200      	movs	r2, #0
 800a094:	2300      	movs	r3, #0
 800a096:	4640      	mov	r0, r8
 800a098:	4649      	mov	r1, r9
 800a09a:	f7f6 fd27 	bl	8000aec <__aeabi_dcmplt>
 800a09e:	b110      	cbz	r0, 800a0a6 <_printf_float+0x8a>
 800a0a0:	232d      	movs	r3, #45	; 0x2d
 800a0a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a6:	4a9c      	ldr	r2, [pc, #624]	; (800a318 <_printf_float+0x2fc>)
 800a0a8:	4b9c      	ldr	r3, [pc, #624]	; (800a31c <_printf_float+0x300>)
 800a0aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a0ae:	bf8c      	ite	hi
 800a0b0:	4690      	movhi	r8, r2
 800a0b2:	4698      	movls	r8, r3
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	f02b 0204 	bic.w	r2, fp, #4
 800a0ba:	6123      	str	r3, [r4, #16]
 800a0bc:	6022      	str	r2, [r4, #0]
 800a0be:	f04f 0900 	mov.w	r9, #0
 800a0c2:	9700      	str	r7, [sp, #0]
 800a0c4:	4633      	mov	r3, r6
 800a0c6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f000 f9e6 	bl	800a49c <_printf_common>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	f040 808d 	bne.w	800a1f0 <_printf_float+0x1d4>
 800a0d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0da:	b00d      	add	sp, #52	; 0x34
 800a0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e0:	4642      	mov	r2, r8
 800a0e2:	464b      	mov	r3, r9
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	f7f6 fd28 	bl	8000b3c <__aeabi_dcmpun>
 800a0ec:	b110      	cbz	r0, 800a0f4 <_printf_float+0xd8>
 800a0ee:	4a8c      	ldr	r2, [pc, #560]	; (800a320 <_printf_float+0x304>)
 800a0f0:	4b8c      	ldr	r3, [pc, #560]	; (800a324 <_printf_float+0x308>)
 800a0f2:	e7da      	b.n	800a0aa <_printf_float+0x8e>
 800a0f4:	6861      	ldr	r1, [r4, #4]
 800a0f6:	1c4b      	adds	r3, r1, #1
 800a0f8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a0fc:	a80a      	add	r0, sp, #40	; 0x28
 800a0fe:	d13e      	bne.n	800a17e <_printf_float+0x162>
 800a100:	2306      	movs	r3, #6
 800a102:	6063      	str	r3, [r4, #4]
 800a104:	2300      	movs	r3, #0
 800a106:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a10a:	ab09      	add	r3, sp, #36	; 0x24
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	ec49 8b10 	vmov	d0, r8, r9
 800a112:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a116:	6022      	str	r2, [r4, #0]
 800a118:	f8cd a004 	str.w	sl, [sp, #4]
 800a11c:	6861      	ldr	r1, [r4, #4]
 800a11e:	4628      	mov	r0, r5
 800a120:	f7ff fee8 	bl	8009ef4 <__cvt>
 800a124:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a128:	2b47      	cmp	r3, #71	; 0x47
 800a12a:	4680      	mov	r8, r0
 800a12c:	d109      	bne.n	800a142 <_printf_float+0x126>
 800a12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a130:	1cd8      	adds	r0, r3, #3
 800a132:	db02      	blt.n	800a13a <_printf_float+0x11e>
 800a134:	6862      	ldr	r2, [r4, #4]
 800a136:	4293      	cmp	r3, r2
 800a138:	dd47      	ble.n	800a1ca <_printf_float+0x1ae>
 800a13a:	f1aa 0a02 	sub.w	sl, sl, #2
 800a13e:	fa5f fa8a 	uxtb.w	sl, sl
 800a142:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a146:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a148:	d824      	bhi.n	800a194 <_printf_float+0x178>
 800a14a:	3901      	subs	r1, #1
 800a14c:	4652      	mov	r2, sl
 800a14e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a152:	9109      	str	r1, [sp, #36]	; 0x24
 800a154:	f7ff ff2f 	bl	8009fb6 <__exponent>
 800a158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a15a:	1813      	adds	r3, r2, r0
 800a15c:	2a01      	cmp	r2, #1
 800a15e:	4681      	mov	r9, r0
 800a160:	6123      	str	r3, [r4, #16]
 800a162:	dc02      	bgt.n	800a16a <_printf_float+0x14e>
 800a164:	6822      	ldr	r2, [r4, #0]
 800a166:	07d1      	lsls	r1, r2, #31
 800a168:	d501      	bpl.n	800a16e <_printf_float+0x152>
 800a16a:	3301      	adds	r3, #1
 800a16c:	6123      	str	r3, [r4, #16]
 800a16e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0a5      	beq.n	800a0c2 <_printf_float+0xa6>
 800a176:	232d      	movs	r3, #45	; 0x2d
 800a178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a17c:	e7a1      	b.n	800a0c2 <_printf_float+0xa6>
 800a17e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a182:	f000 8177 	beq.w	800a474 <_printf_float+0x458>
 800a186:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a18a:	d1bb      	bne.n	800a104 <_printf_float+0xe8>
 800a18c:	2900      	cmp	r1, #0
 800a18e:	d1b9      	bne.n	800a104 <_printf_float+0xe8>
 800a190:	2301      	movs	r3, #1
 800a192:	e7b6      	b.n	800a102 <_printf_float+0xe6>
 800a194:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a198:	d119      	bne.n	800a1ce <_printf_float+0x1b2>
 800a19a:	2900      	cmp	r1, #0
 800a19c:	6863      	ldr	r3, [r4, #4]
 800a19e:	dd0c      	ble.n	800a1ba <_printf_float+0x19e>
 800a1a0:	6121      	str	r1, [r4, #16]
 800a1a2:	b913      	cbnz	r3, 800a1aa <_printf_float+0x18e>
 800a1a4:	6822      	ldr	r2, [r4, #0]
 800a1a6:	07d2      	lsls	r2, r2, #31
 800a1a8:	d502      	bpl.n	800a1b0 <_printf_float+0x194>
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	440b      	add	r3, r1
 800a1ae:	6123      	str	r3, [r4, #16]
 800a1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b2:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1b4:	f04f 0900 	mov.w	r9, #0
 800a1b8:	e7d9      	b.n	800a16e <_printf_float+0x152>
 800a1ba:	b913      	cbnz	r3, 800a1c2 <_printf_float+0x1a6>
 800a1bc:	6822      	ldr	r2, [r4, #0]
 800a1be:	07d0      	lsls	r0, r2, #31
 800a1c0:	d501      	bpl.n	800a1c6 <_printf_float+0x1aa>
 800a1c2:	3302      	adds	r3, #2
 800a1c4:	e7f3      	b.n	800a1ae <_printf_float+0x192>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e7f1      	b.n	800a1ae <_printf_float+0x192>
 800a1ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a1ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	db05      	blt.n	800a1e2 <_printf_float+0x1c6>
 800a1d6:	6822      	ldr	r2, [r4, #0]
 800a1d8:	6123      	str	r3, [r4, #16]
 800a1da:	07d1      	lsls	r1, r2, #31
 800a1dc:	d5e8      	bpl.n	800a1b0 <_printf_float+0x194>
 800a1de:	3301      	adds	r3, #1
 800a1e0:	e7e5      	b.n	800a1ae <_printf_float+0x192>
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bfd4      	ite	le
 800a1e6:	f1c3 0302 	rsble	r3, r3, #2
 800a1ea:	2301      	movgt	r3, #1
 800a1ec:	4413      	add	r3, r2
 800a1ee:	e7de      	b.n	800a1ae <_printf_float+0x192>
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	055a      	lsls	r2, r3, #21
 800a1f4:	d407      	bmi.n	800a206 <_printf_float+0x1ea>
 800a1f6:	6923      	ldr	r3, [r4, #16]
 800a1f8:	4642      	mov	r2, r8
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b8      	blx	r7
 800a200:	3001      	adds	r0, #1
 800a202:	d12b      	bne.n	800a25c <_printf_float+0x240>
 800a204:	e767      	b.n	800a0d6 <_printf_float+0xba>
 800a206:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a20a:	f240 80dc 	bls.w	800a3c6 <_printf_float+0x3aa>
 800a20e:	2200      	movs	r2, #0
 800a210:	2300      	movs	r3, #0
 800a212:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a216:	f7f6 fc5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d033      	beq.n	800a286 <_printf_float+0x26a>
 800a21e:	2301      	movs	r3, #1
 800a220:	4a41      	ldr	r2, [pc, #260]	; (800a328 <_printf_float+0x30c>)
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	47b8      	blx	r7
 800a228:	3001      	adds	r0, #1
 800a22a:	f43f af54 	beq.w	800a0d6 <_printf_float+0xba>
 800a22e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a232:	429a      	cmp	r2, r3
 800a234:	db02      	blt.n	800a23c <_printf_float+0x220>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	07d8      	lsls	r0, r3, #31
 800a23a:	d50f      	bpl.n	800a25c <_printf_float+0x240>
 800a23c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a240:	4631      	mov	r1, r6
 800a242:	4628      	mov	r0, r5
 800a244:	47b8      	blx	r7
 800a246:	3001      	adds	r0, #1
 800a248:	f43f af45 	beq.w	800a0d6 <_printf_float+0xba>
 800a24c:	f04f 0800 	mov.w	r8, #0
 800a250:	f104 091a 	add.w	r9, r4, #26
 800a254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a256:	3b01      	subs	r3, #1
 800a258:	4543      	cmp	r3, r8
 800a25a:	dc09      	bgt.n	800a270 <_printf_float+0x254>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	079b      	lsls	r3, r3, #30
 800a260:	f100 8103 	bmi.w	800a46a <_printf_float+0x44e>
 800a264:	68e0      	ldr	r0, [r4, #12]
 800a266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a268:	4298      	cmp	r0, r3
 800a26a:	bfb8      	it	lt
 800a26c:	4618      	movlt	r0, r3
 800a26e:	e734      	b.n	800a0da <_printf_float+0xbe>
 800a270:	2301      	movs	r3, #1
 800a272:	464a      	mov	r2, r9
 800a274:	4631      	mov	r1, r6
 800a276:	4628      	mov	r0, r5
 800a278:	47b8      	blx	r7
 800a27a:	3001      	adds	r0, #1
 800a27c:	f43f af2b 	beq.w	800a0d6 <_printf_float+0xba>
 800a280:	f108 0801 	add.w	r8, r8, #1
 800a284:	e7e6      	b.n	800a254 <_printf_float+0x238>
 800a286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a288:	2b00      	cmp	r3, #0
 800a28a:	dc2b      	bgt.n	800a2e4 <_printf_float+0x2c8>
 800a28c:	2301      	movs	r3, #1
 800a28e:	4a26      	ldr	r2, [pc, #152]	; (800a328 <_printf_float+0x30c>)
 800a290:	4631      	mov	r1, r6
 800a292:	4628      	mov	r0, r5
 800a294:	47b8      	blx	r7
 800a296:	3001      	adds	r0, #1
 800a298:	f43f af1d 	beq.w	800a0d6 <_printf_float+0xba>
 800a29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a29e:	b923      	cbnz	r3, 800a2aa <_printf_float+0x28e>
 800a2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a2:	b913      	cbnz	r3, 800a2aa <_printf_float+0x28e>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	07d9      	lsls	r1, r3, #31
 800a2a8:	d5d8      	bpl.n	800a25c <_printf_float+0x240>
 800a2aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	47b8      	blx	r7
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	f43f af0e 	beq.w	800a0d6 <_printf_float+0xba>
 800a2ba:	f04f 0900 	mov.w	r9, #0
 800a2be:	f104 0a1a 	add.w	sl, r4, #26
 800a2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c4:	425b      	negs	r3, r3
 800a2c6:	454b      	cmp	r3, r9
 800a2c8:	dc01      	bgt.n	800a2ce <_printf_float+0x2b2>
 800a2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2cc:	e794      	b.n	800a1f8 <_printf_float+0x1dc>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	4652      	mov	r2, sl
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47b8      	blx	r7
 800a2d8:	3001      	adds	r0, #1
 800a2da:	f43f aefc 	beq.w	800a0d6 <_printf_float+0xba>
 800a2de:	f109 0901 	add.w	r9, r9, #1
 800a2e2:	e7ee      	b.n	800a2c2 <_printf_float+0x2a6>
 800a2e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	bfa8      	it	ge
 800a2ec:	461a      	movge	r2, r3
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	4691      	mov	r9, r2
 800a2f2:	dd07      	ble.n	800a304 <_printf_float+0x2e8>
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4642      	mov	r2, r8
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	f43f aee9 	beq.w	800a0d6 <_printf_float+0xba>
 800a304:	f104 031a 	add.w	r3, r4, #26
 800a308:	f04f 0b00 	mov.w	fp, #0
 800a30c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a310:	9306      	str	r3, [sp, #24]
 800a312:	e015      	b.n	800a340 <_printf_float+0x324>
 800a314:	7fefffff 	.word	0x7fefffff
 800a318:	0800e84f 	.word	0x0800e84f
 800a31c:	0800e8c6 	.word	0x0800e8c6
 800a320:	0800e8ce 	.word	0x0800e8ce
 800a324:	0800e8ca 	.word	0x0800e8ca
 800a328:	0800e8d2 	.word	0x0800e8d2
 800a32c:	2301      	movs	r3, #1
 800a32e:	9a06      	ldr	r2, [sp, #24]
 800a330:	4631      	mov	r1, r6
 800a332:	4628      	mov	r0, r5
 800a334:	47b8      	blx	r7
 800a336:	3001      	adds	r0, #1
 800a338:	f43f aecd 	beq.w	800a0d6 <_printf_float+0xba>
 800a33c:	f10b 0b01 	add.w	fp, fp, #1
 800a340:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a344:	ebaa 0309 	sub.w	r3, sl, r9
 800a348:	455b      	cmp	r3, fp
 800a34a:	dcef      	bgt.n	800a32c <_printf_float+0x310>
 800a34c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a350:	429a      	cmp	r2, r3
 800a352:	44d0      	add	r8, sl
 800a354:	db15      	blt.n	800a382 <_printf_float+0x366>
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	07da      	lsls	r2, r3, #31
 800a35a:	d412      	bmi.n	800a382 <_printf_float+0x366>
 800a35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a35e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a360:	eba3 020a 	sub.w	r2, r3, sl
 800a364:	eba3 0a01 	sub.w	sl, r3, r1
 800a368:	4592      	cmp	sl, r2
 800a36a:	bfa8      	it	ge
 800a36c:	4692      	movge	sl, r2
 800a36e:	f1ba 0f00 	cmp.w	sl, #0
 800a372:	dc0e      	bgt.n	800a392 <_printf_float+0x376>
 800a374:	f04f 0800 	mov.w	r8, #0
 800a378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a37c:	f104 091a 	add.w	r9, r4, #26
 800a380:	e019      	b.n	800a3b6 <_printf_float+0x39a>
 800a382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	d1e5      	bne.n	800a35c <_printf_float+0x340>
 800a390:	e6a1      	b.n	800a0d6 <_printf_float+0xba>
 800a392:	4653      	mov	r3, sl
 800a394:	4642      	mov	r2, r8
 800a396:	4631      	mov	r1, r6
 800a398:	4628      	mov	r0, r5
 800a39a:	47b8      	blx	r7
 800a39c:	3001      	adds	r0, #1
 800a39e:	d1e9      	bne.n	800a374 <_printf_float+0x358>
 800a3a0:	e699      	b.n	800a0d6 <_printf_float+0xba>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	464a      	mov	r2, r9
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b8      	blx	r7
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	f43f ae92 	beq.w	800a0d6 <_printf_float+0xba>
 800a3b2:	f108 0801 	add.w	r8, r8, #1
 800a3b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3ba:	1a9b      	subs	r3, r3, r2
 800a3bc:	eba3 030a 	sub.w	r3, r3, sl
 800a3c0:	4543      	cmp	r3, r8
 800a3c2:	dcee      	bgt.n	800a3a2 <_printf_float+0x386>
 800a3c4:	e74a      	b.n	800a25c <_printf_float+0x240>
 800a3c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3c8:	2a01      	cmp	r2, #1
 800a3ca:	dc01      	bgt.n	800a3d0 <_printf_float+0x3b4>
 800a3cc:	07db      	lsls	r3, r3, #31
 800a3ce:	d53a      	bpl.n	800a446 <_printf_float+0x42a>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	4642      	mov	r2, r8
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	47b8      	blx	r7
 800a3da:	3001      	adds	r0, #1
 800a3dc:	f43f ae7b 	beq.w	800a0d6 <_printf_float+0xba>
 800a3e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3e4:	4631      	mov	r1, r6
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	47b8      	blx	r7
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	f108 0801 	add.w	r8, r8, #1
 800a3f0:	f43f ae71 	beq.w	800a0d6 <_printf_float+0xba>
 800a3f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800a3fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a400:	2300      	movs	r3, #0
 800a402:	f7f6 fb69 	bl	8000ad8 <__aeabi_dcmpeq>
 800a406:	b9c8      	cbnz	r0, 800a43c <_printf_float+0x420>
 800a408:	4653      	mov	r3, sl
 800a40a:	4642      	mov	r2, r8
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	d10e      	bne.n	800a434 <_printf_float+0x418>
 800a416:	e65e      	b.n	800a0d6 <_printf_float+0xba>
 800a418:	2301      	movs	r3, #1
 800a41a:	4652      	mov	r2, sl
 800a41c:	4631      	mov	r1, r6
 800a41e:	4628      	mov	r0, r5
 800a420:	47b8      	blx	r7
 800a422:	3001      	adds	r0, #1
 800a424:	f43f ae57 	beq.w	800a0d6 <_printf_float+0xba>
 800a428:	f108 0801 	add.w	r8, r8, #1
 800a42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a42e:	3b01      	subs	r3, #1
 800a430:	4543      	cmp	r3, r8
 800a432:	dcf1      	bgt.n	800a418 <_printf_float+0x3fc>
 800a434:	464b      	mov	r3, r9
 800a436:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a43a:	e6de      	b.n	800a1fa <_printf_float+0x1de>
 800a43c:	f04f 0800 	mov.w	r8, #0
 800a440:	f104 0a1a 	add.w	sl, r4, #26
 800a444:	e7f2      	b.n	800a42c <_printf_float+0x410>
 800a446:	2301      	movs	r3, #1
 800a448:	e7df      	b.n	800a40a <_printf_float+0x3ee>
 800a44a:	2301      	movs	r3, #1
 800a44c:	464a      	mov	r2, r9
 800a44e:	4631      	mov	r1, r6
 800a450:	4628      	mov	r0, r5
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	f43f ae3e 	beq.w	800a0d6 <_printf_float+0xba>
 800a45a:	f108 0801 	add.w	r8, r8, #1
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a462:	1a9b      	subs	r3, r3, r2
 800a464:	4543      	cmp	r3, r8
 800a466:	dcf0      	bgt.n	800a44a <_printf_float+0x42e>
 800a468:	e6fc      	b.n	800a264 <_printf_float+0x248>
 800a46a:	f04f 0800 	mov.w	r8, #0
 800a46e:	f104 0919 	add.w	r9, r4, #25
 800a472:	e7f4      	b.n	800a45e <_printf_float+0x442>
 800a474:	2900      	cmp	r1, #0
 800a476:	f43f ae8b 	beq.w	800a190 <_printf_float+0x174>
 800a47a:	2300      	movs	r3, #0
 800a47c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a480:	ab09      	add	r3, sp, #36	; 0x24
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	ec49 8b10 	vmov	d0, r8, r9
 800a488:	6022      	str	r2, [r4, #0]
 800a48a:	f8cd a004 	str.w	sl, [sp, #4]
 800a48e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a492:	4628      	mov	r0, r5
 800a494:	f7ff fd2e 	bl	8009ef4 <__cvt>
 800a498:	4680      	mov	r8, r0
 800a49a:	e648      	b.n	800a12e <_printf_float+0x112>

0800a49c <_printf_common>:
 800a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a0:	4691      	mov	r9, r2
 800a4a2:	461f      	mov	r7, r3
 800a4a4:	688a      	ldr	r2, [r1, #8]
 800a4a6:	690b      	ldr	r3, [r1, #16]
 800a4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	bfb8      	it	lt
 800a4b0:	4613      	movlt	r3, r2
 800a4b2:	f8c9 3000 	str.w	r3, [r9]
 800a4b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	460c      	mov	r4, r1
 800a4be:	b112      	cbz	r2, 800a4c6 <_printf_common+0x2a>
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	f8c9 3000 	str.w	r3, [r9]
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	0699      	lsls	r1, r3, #26
 800a4ca:	bf42      	ittt	mi
 800a4cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a4d0:	3302      	addmi	r3, #2
 800a4d2:	f8c9 3000 	strmi.w	r3, [r9]
 800a4d6:	6825      	ldr	r5, [r4, #0]
 800a4d8:	f015 0506 	ands.w	r5, r5, #6
 800a4dc:	d107      	bne.n	800a4ee <_printf_common+0x52>
 800a4de:	f104 0a19 	add.w	sl, r4, #25
 800a4e2:	68e3      	ldr	r3, [r4, #12]
 800a4e4:	f8d9 2000 	ldr.w	r2, [r9]
 800a4e8:	1a9b      	subs	r3, r3, r2
 800a4ea:	42ab      	cmp	r3, r5
 800a4ec:	dc28      	bgt.n	800a540 <_printf_common+0xa4>
 800a4ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a4f2:	6822      	ldr	r2, [r4, #0]
 800a4f4:	3300      	adds	r3, #0
 800a4f6:	bf18      	it	ne
 800a4f8:	2301      	movne	r3, #1
 800a4fa:	0692      	lsls	r2, r2, #26
 800a4fc:	d42d      	bmi.n	800a55a <_printf_common+0xbe>
 800a4fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a502:	4639      	mov	r1, r7
 800a504:	4630      	mov	r0, r6
 800a506:	47c0      	blx	r8
 800a508:	3001      	adds	r0, #1
 800a50a:	d020      	beq.n	800a54e <_printf_common+0xb2>
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	68e5      	ldr	r5, [r4, #12]
 800a510:	f8d9 2000 	ldr.w	r2, [r9]
 800a514:	f003 0306 	and.w	r3, r3, #6
 800a518:	2b04      	cmp	r3, #4
 800a51a:	bf08      	it	eq
 800a51c:	1aad      	subeq	r5, r5, r2
 800a51e:	68a3      	ldr	r3, [r4, #8]
 800a520:	6922      	ldr	r2, [r4, #16]
 800a522:	bf0c      	ite	eq
 800a524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a528:	2500      	movne	r5, #0
 800a52a:	4293      	cmp	r3, r2
 800a52c:	bfc4      	itt	gt
 800a52e:	1a9b      	subgt	r3, r3, r2
 800a530:	18ed      	addgt	r5, r5, r3
 800a532:	f04f 0900 	mov.w	r9, #0
 800a536:	341a      	adds	r4, #26
 800a538:	454d      	cmp	r5, r9
 800a53a:	d11a      	bne.n	800a572 <_printf_common+0xd6>
 800a53c:	2000      	movs	r0, #0
 800a53e:	e008      	b.n	800a552 <_printf_common+0xb6>
 800a540:	2301      	movs	r3, #1
 800a542:	4652      	mov	r2, sl
 800a544:	4639      	mov	r1, r7
 800a546:	4630      	mov	r0, r6
 800a548:	47c0      	blx	r8
 800a54a:	3001      	adds	r0, #1
 800a54c:	d103      	bne.n	800a556 <_printf_common+0xba>
 800a54e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a556:	3501      	adds	r5, #1
 800a558:	e7c3      	b.n	800a4e2 <_printf_common+0x46>
 800a55a:	18e1      	adds	r1, r4, r3
 800a55c:	1c5a      	adds	r2, r3, #1
 800a55e:	2030      	movs	r0, #48	; 0x30
 800a560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a564:	4422      	add	r2, r4
 800a566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a56a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a56e:	3302      	adds	r3, #2
 800a570:	e7c5      	b.n	800a4fe <_printf_common+0x62>
 800a572:	2301      	movs	r3, #1
 800a574:	4622      	mov	r2, r4
 800a576:	4639      	mov	r1, r7
 800a578:	4630      	mov	r0, r6
 800a57a:	47c0      	blx	r8
 800a57c:	3001      	adds	r0, #1
 800a57e:	d0e6      	beq.n	800a54e <_printf_common+0xb2>
 800a580:	f109 0901 	add.w	r9, r9, #1
 800a584:	e7d8      	b.n	800a538 <_printf_common+0x9c>
	...

0800a588 <_printf_i>:
 800a588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a58c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a590:	460c      	mov	r4, r1
 800a592:	7e09      	ldrb	r1, [r1, #24]
 800a594:	b085      	sub	sp, #20
 800a596:	296e      	cmp	r1, #110	; 0x6e
 800a598:	4617      	mov	r7, r2
 800a59a:	4606      	mov	r6, r0
 800a59c:	4698      	mov	r8, r3
 800a59e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5a0:	f000 80b3 	beq.w	800a70a <_printf_i+0x182>
 800a5a4:	d822      	bhi.n	800a5ec <_printf_i+0x64>
 800a5a6:	2963      	cmp	r1, #99	; 0x63
 800a5a8:	d036      	beq.n	800a618 <_printf_i+0x90>
 800a5aa:	d80a      	bhi.n	800a5c2 <_printf_i+0x3a>
 800a5ac:	2900      	cmp	r1, #0
 800a5ae:	f000 80b9 	beq.w	800a724 <_printf_i+0x19c>
 800a5b2:	2958      	cmp	r1, #88	; 0x58
 800a5b4:	f000 8083 	beq.w	800a6be <_printf_i+0x136>
 800a5b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a5c0:	e032      	b.n	800a628 <_printf_i+0xa0>
 800a5c2:	2964      	cmp	r1, #100	; 0x64
 800a5c4:	d001      	beq.n	800a5ca <_printf_i+0x42>
 800a5c6:	2969      	cmp	r1, #105	; 0x69
 800a5c8:	d1f6      	bne.n	800a5b8 <_printf_i+0x30>
 800a5ca:	6820      	ldr	r0, [r4, #0]
 800a5cc:	6813      	ldr	r3, [r2, #0]
 800a5ce:	0605      	lsls	r5, r0, #24
 800a5d0:	f103 0104 	add.w	r1, r3, #4
 800a5d4:	d52a      	bpl.n	800a62c <_printf_i+0xa4>
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6011      	str	r1, [r2, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	da03      	bge.n	800a5e6 <_printf_i+0x5e>
 800a5de:	222d      	movs	r2, #45	; 0x2d
 800a5e0:	425b      	negs	r3, r3
 800a5e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a5e6:	486f      	ldr	r0, [pc, #444]	; (800a7a4 <_printf_i+0x21c>)
 800a5e8:	220a      	movs	r2, #10
 800a5ea:	e039      	b.n	800a660 <_printf_i+0xd8>
 800a5ec:	2973      	cmp	r1, #115	; 0x73
 800a5ee:	f000 809d 	beq.w	800a72c <_printf_i+0x1a4>
 800a5f2:	d808      	bhi.n	800a606 <_printf_i+0x7e>
 800a5f4:	296f      	cmp	r1, #111	; 0x6f
 800a5f6:	d020      	beq.n	800a63a <_printf_i+0xb2>
 800a5f8:	2970      	cmp	r1, #112	; 0x70
 800a5fa:	d1dd      	bne.n	800a5b8 <_printf_i+0x30>
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	f043 0320 	orr.w	r3, r3, #32
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	e003      	b.n	800a60e <_printf_i+0x86>
 800a606:	2975      	cmp	r1, #117	; 0x75
 800a608:	d017      	beq.n	800a63a <_printf_i+0xb2>
 800a60a:	2978      	cmp	r1, #120	; 0x78
 800a60c:	d1d4      	bne.n	800a5b8 <_printf_i+0x30>
 800a60e:	2378      	movs	r3, #120	; 0x78
 800a610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a614:	4864      	ldr	r0, [pc, #400]	; (800a7a8 <_printf_i+0x220>)
 800a616:	e055      	b.n	800a6c4 <_printf_i+0x13c>
 800a618:	6813      	ldr	r3, [r2, #0]
 800a61a:	1d19      	adds	r1, r3, #4
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6011      	str	r1, [r2, #0]
 800a620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a628:	2301      	movs	r3, #1
 800a62a:	e08c      	b.n	800a746 <_printf_i+0x1be>
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6011      	str	r1, [r2, #0]
 800a630:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a634:	bf18      	it	ne
 800a636:	b21b      	sxthne	r3, r3
 800a638:	e7cf      	b.n	800a5da <_printf_i+0x52>
 800a63a:	6813      	ldr	r3, [r2, #0]
 800a63c:	6825      	ldr	r5, [r4, #0]
 800a63e:	1d18      	adds	r0, r3, #4
 800a640:	6010      	str	r0, [r2, #0]
 800a642:	0628      	lsls	r0, r5, #24
 800a644:	d501      	bpl.n	800a64a <_printf_i+0xc2>
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	e002      	b.n	800a650 <_printf_i+0xc8>
 800a64a:	0668      	lsls	r0, r5, #25
 800a64c:	d5fb      	bpl.n	800a646 <_printf_i+0xbe>
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	4854      	ldr	r0, [pc, #336]	; (800a7a4 <_printf_i+0x21c>)
 800a652:	296f      	cmp	r1, #111	; 0x6f
 800a654:	bf14      	ite	ne
 800a656:	220a      	movne	r2, #10
 800a658:	2208      	moveq	r2, #8
 800a65a:	2100      	movs	r1, #0
 800a65c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a660:	6865      	ldr	r5, [r4, #4]
 800a662:	60a5      	str	r5, [r4, #8]
 800a664:	2d00      	cmp	r5, #0
 800a666:	f2c0 8095 	blt.w	800a794 <_printf_i+0x20c>
 800a66a:	6821      	ldr	r1, [r4, #0]
 800a66c:	f021 0104 	bic.w	r1, r1, #4
 800a670:	6021      	str	r1, [r4, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d13d      	bne.n	800a6f2 <_printf_i+0x16a>
 800a676:	2d00      	cmp	r5, #0
 800a678:	f040 808e 	bne.w	800a798 <_printf_i+0x210>
 800a67c:	4665      	mov	r5, ip
 800a67e:	2a08      	cmp	r2, #8
 800a680:	d10b      	bne.n	800a69a <_printf_i+0x112>
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	07db      	lsls	r3, r3, #31
 800a686:	d508      	bpl.n	800a69a <_printf_i+0x112>
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	6862      	ldr	r2, [r4, #4]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	bfde      	ittt	le
 800a690:	2330      	movle	r3, #48	; 0x30
 800a692:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a696:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a69a:	ebac 0305 	sub.w	r3, ip, r5
 800a69e:	6123      	str	r3, [r4, #16]
 800a6a0:	f8cd 8000 	str.w	r8, [sp]
 800a6a4:	463b      	mov	r3, r7
 800a6a6:	aa03      	add	r2, sp, #12
 800a6a8:	4621      	mov	r1, r4
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff fef6 	bl	800a49c <_printf_common>
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d14d      	bne.n	800a750 <_printf_i+0x1c8>
 800a6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6b8:	b005      	add	sp, #20
 800a6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6be:	4839      	ldr	r0, [pc, #228]	; (800a7a4 <_printf_i+0x21c>)
 800a6c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a6c4:	6813      	ldr	r3, [r2, #0]
 800a6c6:	6821      	ldr	r1, [r4, #0]
 800a6c8:	1d1d      	adds	r5, r3, #4
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6015      	str	r5, [r2, #0]
 800a6ce:	060a      	lsls	r2, r1, #24
 800a6d0:	d50b      	bpl.n	800a6ea <_printf_i+0x162>
 800a6d2:	07ca      	lsls	r2, r1, #31
 800a6d4:	bf44      	itt	mi
 800a6d6:	f041 0120 	orrmi.w	r1, r1, #32
 800a6da:	6021      	strmi	r1, [r4, #0]
 800a6dc:	b91b      	cbnz	r3, 800a6e6 <_printf_i+0x15e>
 800a6de:	6822      	ldr	r2, [r4, #0]
 800a6e0:	f022 0220 	bic.w	r2, r2, #32
 800a6e4:	6022      	str	r2, [r4, #0]
 800a6e6:	2210      	movs	r2, #16
 800a6e8:	e7b7      	b.n	800a65a <_printf_i+0xd2>
 800a6ea:	064d      	lsls	r5, r1, #25
 800a6ec:	bf48      	it	mi
 800a6ee:	b29b      	uxthmi	r3, r3
 800a6f0:	e7ef      	b.n	800a6d2 <_printf_i+0x14a>
 800a6f2:	4665      	mov	r5, ip
 800a6f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6f8:	fb02 3311 	mls	r3, r2, r1, r3
 800a6fc:	5cc3      	ldrb	r3, [r0, r3]
 800a6fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a702:	460b      	mov	r3, r1
 800a704:	2900      	cmp	r1, #0
 800a706:	d1f5      	bne.n	800a6f4 <_printf_i+0x16c>
 800a708:	e7b9      	b.n	800a67e <_printf_i+0xf6>
 800a70a:	6813      	ldr	r3, [r2, #0]
 800a70c:	6825      	ldr	r5, [r4, #0]
 800a70e:	6961      	ldr	r1, [r4, #20]
 800a710:	1d18      	adds	r0, r3, #4
 800a712:	6010      	str	r0, [r2, #0]
 800a714:	0628      	lsls	r0, r5, #24
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	d501      	bpl.n	800a71e <_printf_i+0x196>
 800a71a:	6019      	str	r1, [r3, #0]
 800a71c:	e002      	b.n	800a724 <_printf_i+0x19c>
 800a71e:	066a      	lsls	r2, r5, #25
 800a720:	d5fb      	bpl.n	800a71a <_printf_i+0x192>
 800a722:	8019      	strh	r1, [r3, #0]
 800a724:	2300      	movs	r3, #0
 800a726:	6123      	str	r3, [r4, #16]
 800a728:	4665      	mov	r5, ip
 800a72a:	e7b9      	b.n	800a6a0 <_printf_i+0x118>
 800a72c:	6813      	ldr	r3, [r2, #0]
 800a72e:	1d19      	adds	r1, r3, #4
 800a730:	6011      	str	r1, [r2, #0]
 800a732:	681d      	ldr	r5, [r3, #0]
 800a734:	6862      	ldr	r2, [r4, #4]
 800a736:	2100      	movs	r1, #0
 800a738:	4628      	mov	r0, r5
 800a73a:	f7f5 fd59 	bl	80001f0 <memchr>
 800a73e:	b108      	cbz	r0, 800a744 <_printf_i+0x1bc>
 800a740:	1b40      	subs	r0, r0, r5
 800a742:	6060      	str	r0, [r4, #4]
 800a744:	6863      	ldr	r3, [r4, #4]
 800a746:	6123      	str	r3, [r4, #16]
 800a748:	2300      	movs	r3, #0
 800a74a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a74e:	e7a7      	b.n	800a6a0 <_printf_i+0x118>
 800a750:	6923      	ldr	r3, [r4, #16]
 800a752:	462a      	mov	r2, r5
 800a754:	4639      	mov	r1, r7
 800a756:	4630      	mov	r0, r6
 800a758:	47c0      	blx	r8
 800a75a:	3001      	adds	r0, #1
 800a75c:	d0aa      	beq.n	800a6b4 <_printf_i+0x12c>
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	079b      	lsls	r3, r3, #30
 800a762:	d413      	bmi.n	800a78c <_printf_i+0x204>
 800a764:	68e0      	ldr	r0, [r4, #12]
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	4298      	cmp	r0, r3
 800a76a:	bfb8      	it	lt
 800a76c:	4618      	movlt	r0, r3
 800a76e:	e7a3      	b.n	800a6b8 <_printf_i+0x130>
 800a770:	2301      	movs	r3, #1
 800a772:	464a      	mov	r2, r9
 800a774:	4639      	mov	r1, r7
 800a776:	4630      	mov	r0, r6
 800a778:	47c0      	blx	r8
 800a77a:	3001      	adds	r0, #1
 800a77c:	d09a      	beq.n	800a6b4 <_printf_i+0x12c>
 800a77e:	3501      	adds	r5, #1
 800a780:	68e3      	ldr	r3, [r4, #12]
 800a782:	9a03      	ldr	r2, [sp, #12]
 800a784:	1a9b      	subs	r3, r3, r2
 800a786:	42ab      	cmp	r3, r5
 800a788:	dcf2      	bgt.n	800a770 <_printf_i+0x1e8>
 800a78a:	e7eb      	b.n	800a764 <_printf_i+0x1dc>
 800a78c:	2500      	movs	r5, #0
 800a78e:	f104 0919 	add.w	r9, r4, #25
 800a792:	e7f5      	b.n	800a780 <_printf_i+0x1f8>
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1ac      	bne.n	800a6f2 <_printf_i+0x16a>
 800a798:	7803      	ldrb	r3, [r0, #0]
 800a79a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a79e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7a2:	e76c      	b.n	800a67e <_printf_i+0xf6>
 800a7a4:	0800e8d4 	.word	0x0800e8d4
 800a7a8:	0800e8e5 	.word	0x0800e8e5

0800a7ac <_scanf_float>:
 800a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	469a      	mov	sl, r3
 800a7b2:	688b      	ldr	r3, [r1, #8]
 800a7b4:	4616      	mov	r6, r2
 800a7b6:	1e5a      	subs	r2, r3, #1
 800a7b8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a7bc:	b087      	sub	sp, #28
 800a7be:	bf83      	ittte	hi
 800a7c0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800a7c4:	189b      	addhi	r3, r3, r2
 800a7c6:	9301      	strhi	r3, [sp, #4]
 800a7c8:	2300      	movls	r3, #0
 800a7ca:	bf86      	itte	hi
 800a7cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a7d0:	608b      	strhi	r3, [r1, #8]
 800a7d2:	9301      	strls	r3, [sp, #4]
 800a7d4:	680b      	ldr	r3, [r1, #0]
 800a7d6:	4688      	mov	r8, r1
 800a7d8:	f04f 0b00 	mov.w	fp, #0
 800a7dc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a7e0:	f848 3b1c 	str.w	r3, [r8], #28
 800a7e4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	4645      	mov	r5, r8
 800a7ee:	465a      	mov	r2, fp
 800a7f0:	46d9      	mov	r9, fp
 800a7f2:	f8cd b008 	str.w	fp, [sp, #8]
 800a7f6:	68a1      	ldr	r1, [r4, #8]
 800a7f8:	b181      	cbz	r1, 800a81c <_scanf_float+0x70>
 800a7fa:	6833      	ldr	r3, [r6, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b49      	cmp	r3, #73	; 0x49
 800a800:	d071      	beq.n	800a8e6 <_scanf_float+0x13a>
 800a802:	d84d      	bhi.n	800a8a0 <_scanf_float+0xf4>
 800a804:	2b39      	cmp	r3, #57	; 0x39
 800a806:	d840      	bhi.n	800a88a <_scanf_float+0xde>
 800a808:	2b31      	cmp	r3, #49	; 0x31
 800a80a:	f080 8088 	bcs.w	800a91e <_scanf_float+0x172>
 800a80e:	2b2d      	cmp	r3, #45	; 0x2d
 800a810:	f000 8090 	beq.w	800a934 <_scanf_float+0x188>
 800a814:	d815      	bhi.n	800a842 <_scanf_float+0x96>
 800a816:	2b2b      	cmp	r3, #43	; 0x2b
 800a818:	f000 808c 	beq.w	800a934 <_scanf_float+0x188>
 800a81c:	f1b9 0f00 	cmp.w	r9, #0
 800a820:	d003      	beq.n	800a82a <_scanf_float+0x7e>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	3a01      	subs	r2, #1
 800a82c:	2a01      	cmp	r2, #1
 800a82e:	f200 80ea 	bhi.w	800aa06 <_scanf_float+0x25a>
 800a832:	4545      	cmp	r5, r8
 800a834:	f200 80dc 	bhi.w	800a9f0 <_scanf_float+0x244>
 800a838:	2601      	movs	r6, #1
 800a83a:	4630      	mov	r0, r6
 800a83c:	b007      	add	sp, #28
 800a83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a842:	2b2e      	cmp	r3, #46	; 0x2e
 800a844:	f000 809f 	beq.w	800a986 <_scanf_float+0x1da>
 800a848:	2b30      	cmp	r3, #48	; 0x30
 800a84a:	d1e7      	bne.n	800a81c <_scanf_float+0x70>
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800a852:	d064      	beq.n	800a91e <_scanf_float+0x172>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800a85a:	6020      	str	r0, [r4, #0]
 800a85c:	f109 0901 	add.w	r9, r9, #1
 800a860:	b11b      	cbz	r3, 800a86a <_scanf_float+0xbe>
 800a862:	3b01      	subs	r3, #1
 800a864:	3101      	adds	r1, #1
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	60a1      	str	r1, [r4, #8]
 800a86a:	68a3      	ldr	r3, [r4, #8]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	60a3      	str	r3, [r4, #8]
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	3301      	adds	r3, #1
 800a874:	6123      	str	r3, [r4, #16]
 800a876:	6873      	ldr	r3, [r6, #4]
 800a878:	3b01      	subs	r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	6073      	str	r3, [r6, #4]
 800a87e:	f340 80ac 	ble.w	800a9da <_scanf_float+0x22e>
 800a882:	6833      	ldr	r3, [r6, #0]
 800a884:	3301      	adds	r3, #1
 800a886:	6033      	str	r3, [r6, #0]
 800a888:	e7b5      	b.n	800a7f6 <_scanf_float+0x4a>
 800a88a:	2b45      	cmp	r3, #69	; 0x45
 800a88c:	f000 8085 	beq.w	800a99a <_scanf_float+0x1ee>
 800a890:	2b46      	cmp	r3, #70	; 0x46
 800a892:	d06a      	beq.n	800a96a <_scanf_float+0x1be>
 800a894:	2b41      	cmp	r3, #65	; 0x41
 800a896:	d1c1      	bne.n	800a81c <_scanf_float+0x70>
 800a898:	2a01      	cmp	r2, #1
 800a89a:	d1bf      	bne.n	800a81c <_scanf_float+0x70>
 800a89c:	2202      	movs	r2, #2
 800a89e:	e046      	b.n	800a92e <_scanf_float+0x182>
 800a8a0:	2b65      	cmp	r3, #101	; 0x65
 800a8a2:	d07a      	beq.n	800a99a <_scanf_float+0x1ee>
 800a8a4:	d818      	bhi.n	800a8d8 <_scanf_float+0x12c>
 800a8a6:	2b54      	cmp	r3, #84	; 0x54
 800a8a8:	d066      	beq.n	800a978 <_scanf_float+0x1cc>
 800a8aa:	d811      	bhi.n	800a8d0 <_scanf_float+0x124>
 800a8ac:	2b4e      	cmp	r3, #78	; 0x4e
 800a8ae:	d1b5      	bne.n	800a81c <_scanf_float+0x70>
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	d146      	bne.n	800a942 <_scanf_float+0x196>
 800a8b4:	f1b9 0f00 	cmp.w	r9, #0
 800a8b8:	d145      	bne.n	800a946 <_scanf_float+0x19a>
 800a8ba:	6821      	ldr	r1, [r4, #0]
 800a8bc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a8c0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a8c4:	d13f      	bne.n	800a946 <_scanf_float+0x19a>
 800a8c6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a8ca:	6021      	str	r1, [r4, #0]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	e02e      	b.n	800a92e <_scanf_float+0x182>
 800a8d0:	2b59      	cmp	r3, #89	; 0x59
 800a8d2:	d01e      	beq.n	800a912 <_scanf_float+0x166>
 800a8d4:	2b61      	cmp	r3, #97	; 0x61
 800a8d6:	e7de      	b.n	800a896 <_scanf_float+0xea>
 800a8d8:	2b6e      	cmp	r3, #110	; 0x6e
 800a8da:	d0e9      	beq.n	800a8b0 <_scanf_float+0x104>
 800a8dc:	d815      	bhi.n	800a90a <_scanf_float+0x15e>
 800a8de:	2b66      	cmp	r3, #102	; 0x66
 800a8e0:	d043      	beq.n	800a96a <_scanf_float+0x1be>
 800a8e2:	2b69      	cmp	r3, #105	; 0x69
 800a8e4:	d19a      	bne.n	800a81c <_scanf_float+0x70>
 800a8e6:	f1bb 0f00 	cmp.w	fp, #0
 800a8ea:	d138      	bne.n	800a95e <_scanf_float+0x1b2>
 800a8ec:	f1b9 0f00 	cmp.w	r9, #0
 800a8f0:	d197      	bne.n	800a822 <_scanf_float+0x76>
 800a8f2:	6821      	ldr	r1, [r4, #0]
 800a8f4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a8f8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a8fc:	d195      	bne.n	800a82a <_scanf_float+0x7e>
 800a8fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a902:	6021      	str	r1, [r4, #0]
 800a904:	f04f 0b01 	mov.w	fp, #1
 800a908:	e011      	b.n	800a92e <_scanf_float+0x182>
 800a90a:	2b74      	cmp	r3, #116	; 0x74
 800a90c:	d034      	beq.n	800a978 <_scanf_float+0x1cc>
 800a90e:	2b79      	cmp	r3, #121	; 0x79
 800a910:	d184      	bne.n	800a81c <_scanf_float+0x70>
 800a912:	f1bb 0f07 	cmp.w	fp, #7
 800a916:	d181      	bne.n	800a81c <_scanf_float+0x70>
 800a918:	f04f 0b08 	mov.w	fp, #8
 800a91c:	e007      	b.n	800a92e <_scanf_float+0x182>
 800a91e:	eb12 0f0b 	cmn.w	r2, fp
 800a922:	f47f af7b 	bne.w	800a81c <_scanf_float+0x70>
 800a926:	6821      	ldr	r1, [r4, #0]
 800a928:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a92c:	6021      	str	r1, [r4, #0]
 800a92e:	702b      	strb	r3, [r5, #0]
 800a930:	3501      	adds	r5, #1
 800a932:	e79a      	b.n	800a86a <_scanf_float+0xbe>
 800a934:	6821      	ldr	r1, [r4, #0]
 800a936:	0608      	lsls	r0, r1, #24
 800a938:	f57f af70 	bpl.w	800a81c <_scanf_float+0x70>
 800a93c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a940:	e7f4      	b.n	800a92c <_scanf_float+0x180>
 800a942:	2a02      	cmp	r2, #2
 800a944:	d047      	beq.n	800a9d6 <_scanf_float+0x22a>
 800a946:	f1bb 0f01 	cmp.w	fp, #1
 800a94a:	d003      	beq.n	800a954 <_scanf_float+0x1a8>
 800a94c:	f1bb 0f04 	cmp.w	fp, #4
 800a950:	f47f af64 	bne.w	800a81c <_scanf_float+0x70>
 800a954:	f10b 0b01 	add.w	fp, fp, #1
 800a958:	fa5f fb8b 	uxtb.w	fp, fp
 800a95c:	e7e7      	b.n	800a92e <_scanf_float+0x182>
 800a95e:	f1bb 0f03 	cmp.w	fp, #3
 800a962:	d0f7      	beq.n	800a954 <_scanf_float+0x1a8>
 800a964:	f1bb 0f05 	cmp.w	fp, #5
 800a968:	e7f2      	b.n	800a950 <_scanf_float+0x1a4>
 800a96a:	f1bb 0f02 	cmp.w	fp, #2
 800a96e:	f47f af55 	bne.w	800a81c <_scanf_float+0x70>
 800a972:	f04f 0b03 	mov.w	fp, #3
 800a976:	e7da      	b.n	800a92e <_scanf_float+0x182>
 800a978:	f1bb 0f06 	cmp.w	fp, #6
 800a97c:	f47f af4e 	bne.w	800a81c <_scanf_float+0x70>
 800a980:	f04f 0b07 	mov.w	fp, #7
 800a984:	e7d3      	b.n	800a92e <_scanf_float+0x182>
 800a986:	6821      	ldr	r1, [r4, #0]
 800a988:	0588      	lsls	r0, r1, #22
 800a98a:	f57f af47 	bpl.w	800a81c <_scanf_float+0x70>
 800a98e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a992:	6021      	str	r1, [r4, #0]
 800a994:	f8cd 9008 	str.w	r9, [sp, #8]
 800a998:	e7c9      	b.n	800a92e <_scanf_float+0x182>
 800a99a:	6821      	ldr	r1, [r4, #0]
 800a99c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a9a0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a9a4:	d006      	beq.n	800a9b4 <_scanf_float+0x208>
 800a9a6:	0548      	lsls	r0, r1, #21
 800a9a8:	f57f af38 	bpl.w	800a81c <_scanf_float+0x70>
 800a9ac:	f1b9 0f00 	cmp.w	r9, #0
 800a9b0:	f43f af3b 	beq.w	800a82a <_scanf_float+0x7e>
 800a9b4:	0588      	lsls	r0, r1, #22
 800a9b6:	bf58      	it	pl
 800a9b8:	9802      	ldrpl	r0, [sp, #8]
 800a9ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a9be:	bf58      	it	pl
 800a9c0:	eba9 0000 	subpl.w	r0, r9, r0
 800a9c4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a9c8:	bf58      	it	pl
 800a9ca:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a9ce:	6021      	str	r1, [r4, #0]
 800a9d0:	f04f 0900 	mov.w	r9, #0
 800a9d4:	e7ab      	b.n	800a92e <_scanf_float+0x182>
 800a9d6:	2203      	movs	r2, #3
 800a9d8:	e7a9      	b.n	800a92e <_scanf_float+0x182>
 800a9da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a9de:	9205      	str	r2, [sp, #20]
 800a9e0:	4631      	mov	r1, r6
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	4798      	blx	r3
 800a9e6:	9a05      	ldr	r2, [sp, #20]
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f43f af04 	beq.w	800a7f6 <_scanf_float+0x4a>
 800a9ee:	e715      	b.n	800a81c <_scanf_float+0x70>
 800a9f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a9f8:	4632      	mov	r2, r6
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	4798      	blx	r3
 800a9fe:	6923      	ldr	r3, [r4, #16]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	6123      	str	r3, [r4, #16]
 800aa04:	e715      	b.n	800a832 <_scanf_float+0x86>
 800aa06:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800aa0a:	2b06      	cmp	r3, #6
 800aa0c:	d80a      	bhi.n	800aa24 <_scanf_float+0x278>
 800aa0e:	f1bb 0f02 	cmp.w	fp, #2
 800aa12:	d968      	bls.n	800aae6 <_scanf_float+0x33a>
 800aa14:	f1ab 0b03 	sub.w	fp, fp, #3
 800aa18:	fa5f fb8b 	uxtb.w	fp, fp
 800aa1c:	eba5 0b0b 	sub.w	fp, r5, fp
 800aa20:	455d      	cmp	r5, fp
 800aa22:	d14b      	bne.n	800aabc <_scanf_float+0x310>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	05da      	lsls	r2, r3, #23
 800aa28:	d51f      	bpl.n	800aa6a <_scanf_float+0x2be>
 800aa2a:	055b      	lsls	r3, r3, #21
 800aa2c:	d468      	bmi.n	800ab00 <_scanf_float+0x354>
 800aa2e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aa32:	6923      	ldr	r3, [r4, #16]
 800aa34:	2965      	cmp	r1, #101	; 0x65
 800aa36:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800aa3a:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800aa3e:	6123      	str	r3, [r4, #16]
 800aa40:	d00d      	beq.n	800aa5e <_scanf_float+0x2b2>
 800aa42:	2945      	cmp	r1, #69	; 0x45
 800aa44:	d00b      	beq.n	800aa5e <_scanf_float+0x2b2>
 800aa46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa4a:	4632      	mov	r2, r6
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	4798      	blx	r3
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	f1a5 0b02 	sub.w	fp, r5, #2
 800aa5c:	6123      	str	r3, [r4, #16]
 800aa5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa62:	4632      	mov	r2, r6
 800aa64:	4638      	mov	r0, r7
 800aa66:	4798      	blx	r3
 800aa68:	465d      	mov	r5, fp
 800aa6a:	6826      	ldr	r6, [r4, #0]
 800aa6c:	f016 0610 	ands.w	r6, r6, #16
 800aa70:	d17a      	bne.n	800ab68 <_scanf_float+0x3bc>
 800aa72:	702e      	strb	r6, [r5, #0]
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa7e:	d142      	bne.n	800ab06 <_scanf_float+0x35a>
 800aa80:	9b02      	ldr	r3, [sp, #8]
 800aa82:	eba9 0303 	sub.w	r3, r9, r3
 800aa86:	425a      	negs	r2, r3
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d149      	bne.n	800ab20 <_scanf_float+0x374>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	4641      	mov	r1, r8
 800aa90:	4638      	mov	r0, r7
 800aa92:	f000 ff21 	bl	800b8d8 <_strtod_r>
 800aa96:	6825      	ldr	r5, [r4, #0]
 800aa98:	f8da 3000 	ldr.w	r3, [sl]
 800aa9c:	f015 0f02 	tst.w	r5, #2
 800aaa0:	f103 0204 	add.w	r2, r3, #4
 800aaa4:	ec59 8b10 	vmov	r8, r9, d0
 800aaa8:	f8ca 2000 	str.w	r2, [sl]
 800aaac:	d043      	beq.n	800ab36 <_scanf_float+0x38a>
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	e9c3 8900 	strd	r8, r9, [r3]
 800aab4:	68e3      	ldr	r3, [r4, #12]
 800aab6:	3301      	adds	r3, #1
 800aab8:	60e3      	str	r3, [r4, #12]
 800aaba:	e6be      	b.n	800a83a <_scanf_float+0x8e>
 800aabc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aac0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800aac4:	4632      	mov	r2, r6
 800aac6:	4638      	mov	r0, r7
 800aac8:	4798      	blx	r3
 800aaca:	6923      	ldr	r3, [r4, #16]
 800aacc:	3b01      	subs	r3, #1
 800aace:	6123      	str	r3, [r4, #16]
 800aad0:	e7a6      	b.n	800aa20 <_scanf_float+0x274>
 800aad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aad6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800aada:	4632      	mov	r2, r6
 800aadc:	4638      	mov	r0, r7
 800aade:	4798      	blx	r3
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	6123      	str	r3, [r4, #16]
 800aae6:	4545      	cmp	r5, r8
 800aae8:	d8f3      	bhi.n	800aad2 <_scanf_float+0x326>
 800aaea:	e6a5      	b.n	800a838 <_scanf_float+0x8c>
 800aaec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aaf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800aaf4:	4632      	mov	r2, r6
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	4798      	blx	r3
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	3b01      	subs	r3, #1
 800aafe:	6123      	str	r3, [r4, #16]
 800ab00:	4545      	cmp	r5, r8
 800ab02:	d8f3      	bhi.n	800aaec <_scanf_float+0x340>
 800ab04:	e698      	b.n	800a838 <_scanf_float+0x8c>
 800ab06:	9b03      	ldr	r3, [sp, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d0bf      	beq.n	800aa8c <_scanf_float+0x2e0>
 800ab0c:	9904      	ldr	r1, [sp, #16]
 800ab0e:	230a      	movs	r3, #10
 800ab10:	4632      	mov	r2, r6
 800ab12:	3101      	adds	r1, #1
 800ab14:	4638      	mov	r0, r7
 800ab16:	f000 ff6b 	bl	800b9f0 <_strtol_r>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	9d04      	ldr	r5, [sp, #16]
 800ab1e:	1ac2      	subs	r2, r0, r3
 800ab20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ab24:	429d      	cmp	r5, r3
 800ab26:	bf28      	it	cs
 800ab28:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ab2c:	490f      	ldr	r1, [pc, #60]	; (800ab6c <_scanf_float+0x3c0>)
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f000 f8a0 	bl	800ac74 <siprintf>
 800ab34:	e7aa      	b.n	800aa8c <_scanf_float+0x2e0>
 800ab36:	f015 0504 	ands.w	r5, r5, #4
 800ab3a:	d1b8      	bne.n	800aaae <_scanf_float+0x302>
 800ab3c:	681f      	ldr	r7, [r3, #0]
 800ab3e:	ee10 2a10 	vmov	r2, s0
 800ab42:	464b      	mov	r3, r9
 800ab44:	ee10 0a10 	vmov	r0, s0
 800ab48:	4649      	mov	r1, r9
 800ab4a:	f7f5 fff7 	bl	8000b3c <__aeabi_dcmpun>
 800ab4e:	b128      	cbz	r0, 800ab5c <_scanf_float+0x3b0>
 800ab50:	4628      	mov	r0, r5
 800ab52:	f000 f889 	bl	800ac68 <nanf>
 800ab56:	ed87 0a00 	vstr	s0, [r7]
 800ab5a:	e7ab      	b.n	800aab4 <_scanf_float+0x308>
 800ab5c:	4640      	mov	r0, r8
 800ab5e:	4649      	mov	r1, r9
 800ab60:	f7f6 f84a 	bl	8000bf8 <__aeabi_d2f>
 800ab64:	6038      	str	r0, [r7, #0]
 800ab66:	e7a5      	b.n	800aab4 <_scanf_float+0x308>
 800ab68:	2600      	movs	r6, #0
 800ab6a:	e666      	b.n	800a83a <_scanf_float+0x8e>
 800ab6c:	0800e8f6 	.word	0x0800e8f6

0800ab70 <iprintf>:
 800ab70:	b40f      	push	{r0, r1, r2, r3}
 800ab72:	4b0a      	ldr	r3, [pc, #40]	; (800ab9c <iprintf+0x2c>)
 800ab74:	b513      	push	{r0, r1, r4, lr}
 800ab76:	681c      	ldr	r4, [r3, #0]
 800ab78:	b124      	cbz	r4, 800ab84 <iprintf+0x14>
 800ab7a:	69a3      	ldr	r3, [r4, #24]
 800ab7c:	b913      	cbnz	r3, 800ab84 <iprintf+0x14>
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f001 ff4a 	bl	800ca18 <__sinit>
 800ab84:	ab05      	add	r3, sp, #20
 800ab86:	9a04      	ldr	r2, [sp, #16]
 800ab88:	68a1      	ldr	r1, [r4, #8]
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f003 f9a1 	bl	800ded4 <_vfiprintf_r>
 800ab92:	b002      	add	sp, #8
 800ab94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab98:	b004      	add	sp, #16
 800ab9a:	4770      	bx	lr
 800ab9c:	20000098 	.word	0x20000098

0800aba0 <_puts_r>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	460e      	mov	r6, r1
 800aba4:	4605      	mov	r5, r0
 800aba6:	b118      	cbz	r0, 800abb0 <_puts_r+0x10>
 800aba8:	6983      	ldr	r3, [r0, #24]
 800abaa:	b90b      	cbnz	r3, 800abb0 <_puts_r+0x10>
 800abac:	f001 ff34 	bl	800ca18 <__sinit>
 800abb0:	69ab      	ldr	r3, [r5, #24]
 800abb2:	68ac      	ldr	r4, [r5, #8]
 800abb4:	b913      	cbnz	r3, 800abbc <_puts_r+0x1c>
 800abb6:	4628      	mov	r0, r5
 800abb8:	f001 ff2e 	bl	800ca18 <__sinit>
 800abbc:	4b23      	ldr	r3, [pc, #140]	; (800ac4c <_puts_r+0xac>)
 800abbe:	429c      	cmp	r4, r3
 800abc0:	d117      	bne.n	800abf2 <_puts_r+0x52>
 800abc2:	686c      	ldr	r4, [r5, #4]
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	071b      	lsls	r3, r3, #28
 800abc8:	d51d      	bpl.n	800ac06 <_puts_r+0x66>
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	b1db      	cbz	r3, 800ac06 <_puts_r+0x66>
 800abce:	3e01      	subs	r6, #1
 800abd0:	68a3      	ldr	r3, [r4, #8]
 800abd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abd6:	3b01      	subs	r3, #1
 800abd8:	60a3      	str	r3, [r4, #8]
 800abda:	b9e9      	cbnz	r1, 800ac18 <_puts_r+0x78>
 800abdc:	2b00      	cmp	r3, #0
 800abde:	da2e      	bge.n	800ac3e <_puts_r+0x9e>
 800abe0:	4622      	mov	r2, r4
 800abe2:	210a      	movs	r1, #10
 800abe4:	4628      	mov	r0, r5
 800abe6:	f000 ff15 	bl	800ba14 <__swbuf_r>
 800abea:	3001      	adds	r0, #1
 800abec:	d011      	beq.n	800ac12 <_puts_r+0x72>
 800abee:	200a      	movs	r0, #10
 800abf0:	e011      	b.n	800ac16 <_puts_r+0x76>
 800abf2:	4b17      	ldr	r3, [pc, #92]	; (800ac50 <_puts_r+0xb0>)
 800abf4:	429c      	cmp	r4, r3
 800abf6:	d101      	bne.n	800abfc <_puts_r+0x5c>
 800abf8:	68ac      	ldr	r4, [r5, #8]
 800abfa:	e7e3      	b.n	800abc4 <_puts_r+0x24>
 800abfc:	4b15      	ldr	r3, [pc, #84]	; (800ac54 <_puts_r+0xb4>)
 800abfe:	429c      	cmp	r4, r3
 800ac00:	bf08      	it	eq
 800ac02:	68ec      	ldreq	r4, [r5, #12]
 800ac04:	e7de      	b.n	800abc4 <_puts_r+0x24>
 800ac06:	4621      	mov	r1, r4
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f000 ff63 	bl	800bad4 <__swsetup_r>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d0dd      	beq.n	800abce <_puts_r+0x2e>
 800ac12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	da04      	bge.n	800ac26 <_puts_r+0x86>
 800ac1c:	69a2      	ldr	r2, [r4, #24]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	dc06      	bgt.n	800ac30 <_puts_r+0x90>
 800ac22:	290a      	cmp	r1, #10
 800ac24:	d004      	beq.n	800ac30 <_puts_r+0x90>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	1c5a      	adds	r2, r3, #1
 800ac2a:	6022      	str	r2, [r4, #0]
 800ac2c:	7019      	strb	r1, [r3, #0]
 800ac2e:	e7cf      	b.n	800abd0 <_puts_r+0x30>
 800ac30:	4622      	mov	r2, r4
 800ac32:	4628      	mov	r0, r5
 800ac34:	f000 feee 	bl	800ba14 <__swbuf_r>
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d1c9      	bne.n	800abd0 <_puts_r+0x30>
 800ac3c:	e7e9      	b.n	800ac12 <_puts_r+0x72>
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	200a      	movs	r0, #10
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	6022      	str	r2, [r4, #0]
 800ac46:	7018      	strb	r0, [r3, #0]
 800ac48:	e7e5      	b.n	800ac16 <_puts_r+0x76>
 800ac4a:	bf00      	nop
 800ac4c:	0800ea80 	.word	0x0800ea80
 800ac50:	0800eaa0 	.word	0x0800eaa0
 800ac54:	0800ea60 	.word	0x0800ea60

0800ac58 <puts>:
 800ac58:	4b02      	ldr	r3, [pc, #8]	; (800ac64 <puts+0xc>)
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	6818      	ldr	r0, [r3, #0]
 800ac5e:	f7ff bf9f 	b.w	800aba0 <_puts_r>
 800ac62:	bf00      	nop
 800ac64:	20000098 	.word	0x20000098

0800ac68 <nanf>:
 800ac68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac70 <nanf+0x8>
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	7fc00000 	.word	0x7fc00000

0800ac74 <siprintf>:
 800ac74:	b40e      	push	{r1, r2, r3}
 800ac76:	b500      	push	{lr}
 800ac78:	b09c      	sub	sp, #112	; 0x70
 800ac7a:	ab1d      	add	r3, sp, #116	; 0x74
 800ac7c:	9002      	str	r0, [sp, #8]
 800ac7e:	9006      	str	r0, [sp, #24]
 800ac80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac84:	4809      	ldr	r0, [pc, #36]	; (800acac <siprintf+0x38>)
 800ac86:	9107      	str	r1, [sp, #28]
 800ac88:	9104      	str	r1, [sp, #16]
 800ac8a:	4909      	ldr	r1, [pc, #36]	; (800acb0 <siprintf+0x3c>)
 800ac8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac90:	9105      	str	r1, [sp, #20]
 800ac92:	6800      	ldr	r0, [r0, #0]
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	a902      	add	r1, sp, #8
 800ac98:	f002 fffa 	bl	800dc90 <_svfiprintf_r>
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	701a      	strb	r2, [r3, #0]
 800aca2:	b01c      	add	sp, #112	; 0x70
 800aca4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aca8:	b003      	add	sp, #12
 800acaa:	4770      	bx	lr
 800acac:	20000098 	.word	0x20000098
 800acb0:	ffff0208 	.word	0xffff0208

0800acb4 <sulp>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	4604      	mov	r4, r0
 800acb8:	460d      	mov	r5, r1
 800acba:	ec45 4b10 	vmov	d0, r4, r5
 800acbe:	4616      	mov	r6, r2
 800acc0:	f002 fda2 	bl	800d808 <__ulp>
 800acc4:	ec51 0b10 	vmov	r0, r1, d0
 800acc8:	b17e      	cbz	r6, 800acea <sulp+0x36>
 800acca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	dd09      	ble.n	800acea <sulp+0x36>
 800acd6:	051b      	lsls	r3, r3, #20
 800acd8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800acdc:	2400      	movs	r4, #0
 800acde:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ace2:	4622      	mov	r2, r4
 800ace4:	462b      	mov	r3, r5
 800ace6:	f7f5 fc8f 	bl	8000608 <__aeabi_dmul>
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	0000      	movs	r0, r0
	...

0800acf0 <_strtod_l>:
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	461f      	mov	r7, r3
 800acf6:	b0a1      	sub	sp, #132	; 0x84
 800acf8:	2300      	movs	r3, #0
 800acfa:	4681      	mov	r9, r0
 800acfc:	4638      	mov	r0, r7
 800acfe:	460e      	mov	r6, r1
 800ad00:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad02:	931c      	str	r3, [sp, #112]	; 0x70
 800ad04:	f002 fa38 	bl	800d178 <__localeconv_l>
 800ad08:	4680      	mov	r8, r0
 800ad0a:	6800      	ldr	r0, [r0, #0]
 800ad0c:	f7f5 fa68 	bl	80001e0 <strlen>
 800ad10:	f04f 0a00 	mov.w	sl, #0
 800ad14:	4604      	mov	r4, r0
 800ad16:	f04f 0b00 	mov.w	fp, #0
 800ad1a:	961b      	str	r6, [sp, #108]	; 0x6c
 800ad1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad1e:	781a      	ldrb	r2, [r3, #0]
 800ad20:	2a0d      	cmp	r2, #13
 800ad22:	d832      	bhi.n	800ad8a <_strtod_l+0x9a>
 800ad24:	2a09      	cmp	r2, #9
 800ad26:	d236      	bcs.n	800ad96 <_strtod_l+0xa6>
 800ad28:	2a00      	cmp	r2, #0
 800ad2a:	d03e      	beq.n	800adaa <_strtod_l+0xba>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	930d      	str	r3, [sp, #52]	; 0x34
 800ad30:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ad32:	782b      	ldrb	r3, [r5, #0]
 800ad34:	2b30      	cmp	r3, #48	; 0x30
 800ad36:	f040 80ac 	bne.w	800ae92 <_strtod_l+0x1a2>
 800ad3a:	786b      	ldrb	r3, [r5, #1]
 800ad3c:	2b58      	cmp	r3, #88	; 0x58
 800ad3e:	d001      	beq.n	800ad44 <_strtod_l+0x54>
 800ad40:	2b78      	cmp	r3, #120	; 0x78
 800ad42:	d167      	bne.n	800ae14 <_strtod_l+0x124>
 800ad44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	ab1c      	add	r3, sp, #112	; 0x70
 800ad4a:	9300      	str	r3, [sp, #0]
 800ad4c:	9702      	str	r7, [sp, #8]
 800ad4e:	ab1d      	add	r3, sp, #116	; 0x74
 800ad50:	4a88      	ldr	r2, [pc, #544]	; (800af74 <_strtod_l+0x284>)
 800ad52:	a91b      	add	r1, sp, #108	; 0x6c
 800ad54:	4648      	mov	r0, r9
 800ad56:	f001 ff38 	bl	800cbca <__gethex>
 800ad5a:	f010 0407 	ands.w	r4, r0, #7
 800ad5e:	4606      	mov	r6, r0
 800ad60:	d005      	beq.n	800ad6e <_strtod_l+0x7e>
 800ad62:	2c06      	cmp	r4, #6
 800ad64:	d12b      	bne.n	800adbe <_strtod_l+0xce>
 800ad66:	3501      	adds	r5, #1
 800ad68:	2300      	movs	r3, #0
 800ad6a:	951b      	str	r5, [sp, #108]	; 0x6c
 800ad6c:	930d      	str	r3, [sp, #52]	; 0x34
 800ad6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f040 859a 	bne.w	800b8aa <_strtod_l+0xbba>
 800ad76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad78:	b1e3      	cbz	r3, 800adb4 <_strtod_l+0xc4>
 800ad7a:	4652      	mov	r2, sl
 800ad7c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad80:	ec43 2b10 	vmov	d0, r2, r3
 800ad84:	b021      	add	sp, #132	; 0x84
 800ad86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8a:	2a2b      	cmp	r2, #43	; 0x2b
 800ad8c:	d015      	beq.n	800adba <_strtod_l+0xca>
 800ad8e:	2a2d      	cmp	r2, #45	; 0x2d
 800ad90:	d004      	beq.n	800ad9c <_strtod_l+0xac>
 800ad92:	2a20      	cmp	r2, #32
 800ad94:	d1ca      	bne.n	800ad2c <_strtod_l+0x3c>
 800ad96:	3301      	adds	r3, #1
 800ad98:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad9a:	e7bf      	b.n	800ad1c <_strtod_l+0x2c>
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	920d      	str	r2, [sp, #52]	; 0x34
 800ada0:	1c5a      	adds	r2, r3, #1
 800ada2:	921b      	str	r2, [sp, #108]	; 0x6c
 800ada4:	785b      	ldrb	r3, [r3, #1]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1c2      	bne.n	800ad30 <_strtod_l+0x40>
 800adaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adac:	961b      	str	r6, [sp, #108]	; 0x6c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f040 8579 	bne.w	800b8a6 <_strtod_l+0xbb6>
 800adb4:	4652      	mov	r2, sl
 800adb6:	465b      	mov	r3, fp
 800adb8:	e7e2      	b.n	800ad80 <_strtod_l+0x90>
 800adba:	2200      	movs	r2, #0
 800adbc:	e7ef      	b.n	800ad9e <_strtod_l+0xae>
 800adbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800adc0:	b13a      	cbz	r2, 800add2 <_strtod_l+0xe2>
 800adc2:	2135      	movs	r1, #53	; 0x35
 800adc4:	a81e      	add	r0, sp, #120	; 0x78
 800adc6:	f002 fe17 	bl	800d9f8 <__copybits>
 800adca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800adcc:	4648      	mov	r0, r9
 800adce:	f002 fa83 	bl	800d2d8 <_Bfree>
 800add2:	3c01      	subs	r4, #1
 800add4:	2c04      	cmp	r4, #4
 800add6:	d806      	bhi.n	800ade6 <_strtod_l+0xf6>
 800add8:	e8df f004 	tbb	[pc, r4]
 800addc:	1714030a 	.word	0x1714030a
 800ade0:	0a          	.byte	0x0a
 800ade1:	00          	.byte	0x00
 800ade2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ade6:	0730      	lsls	r0, r6, #28
 800ade8:	d5c1      	bpl.n	800ad6e <_strtod_l+0x7e>
 800adea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800adee:	e7be      	b.n	800ad6e <_strtod_l+0x7e>
 800adf0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800adf4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800adf6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800adfa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800adfe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae02:	e7f0      	b.n	800ade6 <_strtod_l+0xf6>
 800ae04:	f8df b170 	ldr.w	fp, [pc, #368]	; 800af78 <_strtod_l+0x288>
 800ae08:	e7ed      	b.n	800ade6 <_strtod_l+0xf6>
 800ae0a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ae0e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ae12:	e7e8      	b.n	800ade6 <_strtod_l+0xf6>
 800ae14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae1a:	785b      	ldrb	r3, [r3, #1]
 800ae1c:	2b30      	cmp	r3, #48	; 0x30
 800ae1e:	d0f9      	beq.n	800ae14 <_strtod_l+0x124>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d0a4      	beq.n	800ad6e <_strtod_l+0x7e>
 800ae24:	2301      	movs	r3, #1
 800ae26:	2500      	movs	r5, #0
 800ae28:	9306      	str	r3, [sp, #24]
 800ae2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae2c:	9308      	str	r3, [sp, #32]
 800ae2e:	9507      	str	r5, [sp, #28]
 800ae30:	9505      	str	r5, [sp, #20]
 800ae32:	220a      	movs	r2, #10
 800ae34:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ae36:	7807      	ldrb	r7, [r0, #0]
 800ae38:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ae3c:	b2d9      	uxtb	r1, r3
 800ae3e:	2909      	cmp	r1, #9
 800ae40:	d929      	bls.n	800ae96 <_strtod_l+0x1a6>
 800ae42:	4622      	mov	r2, r4
 800ae44:	f8d8 1000 	ldr.w	r1, [r8]
 800ae48:	f003 f9ad 	bl	800e1a6 <strncmp>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d031      	beq.n	800aeb4 <_strtod_l+0x1c4>
 800ae50:	2000      	movs	r0, #0
 800ae52:	9c05      	ldr	r4, [sp, #20]
 800ae54:	9004      	str	r0, [sp, #16]
 800ae56:	463b      	mov	r3, r7
 800ae58:	4602      	mov	r2, r0
 800ae5a:	2b65      	cmp	r3, #101	; 0x65
 800ae5c:	d001      	beq.n	800ae62 <_strtod_l+0x172>
 800ae5e:	2b45      	cmp	r3, #69	; 0x45
 800ae60:	d114      	bne.n	800ae8c <_strtod_l+0x19c>
 800ae62:	b924      	cbnz	r4, 800ae6e <_strtod_l+0x17e>
 800ae64:	b910      	cbnz	r0, 800ae6c <_strtod_l+0x17c>
 800ae66:	9b06      	ldr	r3, [sp, #24]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d09e      	beq.n	800adaa <_strtod_l+0xba>
 800ae6c:	2400      	movs	r4, #0
 800ae6e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ae70:	1c73      	adds	r3, r6, #1
 800ae72:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae74:	7873      	ldrb	r3, [r6, #1]
 800ae76:	2b2b      	cmp	r3, #43	; 0x2b
 800ae78:	d078      	beq.n	800af6c <_strtod_l+0x27c>
 800ae7a:	2b2d      	cmp	r3, #45	; 0x2d
 800ae7c:	d070      	beq.n	800af60 <_strtod_l+0x270>
 800ae7e:	f04f 0c00 	mov.w	ip, #0
 800ae82:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800ae86:	2f09      	cmp	r7, #9
 800ae88:	d97c      	bls.n	800af84 <_strtod_l+0x294>
 800ae8a:	961b      	str	r6, [sp, #108]	; 0x6c
 800ae8c:	f04f 0e00 	mov.w	lr, #0
 800ae90:	e09a      	b.n	800afc8 <_strtod_l+0x2d8>
 800ae92:	2300      	movs	r3, #0
 800ae94:	e7c7      	b.n	800ae26 <_strtod_l+0x136>
 800ae96:	9905      	ldr	r1, [sp, #20]
 800ae98:	2908      	cmp	r1, #8
 800ae9a:	bfdd      	ittte	le
 800ae9c:	9907      	ldrle	r1, [sp, #28]
 800ae9e:	fb02 3301 	mlale	r3, r2, r1, r3
 800aea2:	9307      	strle	r3, [sp, #28]
 800aea4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800aea8:	9b05      	ldr	r3, [sp, #20]
 800aeaa:	3001      	adds	r0, #1
 800aeac:	3301      	adds	r3, #1
 800aeae:	9305      	str	r3, [sp, #20]
 800aeb0:	901b      	str	r0, [sp, #108]	; 0x6c
 800aeb2:	e7bf      	b.n	800ae34 <_strtod_l+0x144>
 800aeb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aeb6:	191a      	adds	r2, r3, r4
 800aeb8:	921b      	str	r2, [sp, #108]	; 0x6c
 800aeba:	9a05      	ldr	r2, [sp, #20]
 800aebc:	5d1b      	ldrb	r3, [r3, r4]
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	d037      	beq.n	800af32 <_strtod_l+0x242>
 800aec2:	9c05      	ldr	r4, [sp, #20]
 800aec4:	4602      	mov	r2, r0
 800aec6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aeca:	2909      	cmp	r1, #9
 800aecc:	d913      	bls.n	800aef6 <_strtod_l+0x206>
 800aece:	2101      	movs	r1, #1
 800aed0:	9104      	str	r1, [sp, #16]
 800aed2:	e7c2      	b.n	800ae5a <_strtod_l+0x16a>
 800aed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aed6:	1c5a      	adds	r2, r3, #1
 800aed8:	921b      	str	r2, [sp, #108]	; 0x6c
 800aeda:	785b      	ldrb	r3, [r3, #1]
 800aedc:	3001      	adds	r0, #1
 800aede:	2b30      	cmp	r3, #48	; 0x30
 800aee0:	d0f8      	beq.n	800aed4 <_strtod_l+0x1e4>
 800aee2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800aee6:	2a08      	cmp	r2, #8
 800aee8:	f200 84e4 	bhi.w	800b8b4 <_strtod_l+0xbc4>
 800aeec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aeee:	9208      	str	r2, [sp, #32]
 800aef0:	4602      	mov	r2, r0
 800aef2:	2000      	movs	r0, #0
 800aef4:	4604      	mov	r4, r0
 800aef6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800aefa:	f100 0101 	add.w	r1, r0, #1
 800aefe:	d012      	beq.n	800af26 <_strtod_l+0x236>
 800af00:	440a      	add	r2, r1
 800af02:	eb00 0c04 	add.w	ip, r0, r4
 800af06:	4621      	mov	r1, r4
 800af08:	270a      	movs	r7, #10
 800af0a:	458c      	cmp	ip, r1
 800af0c:	d113      	bne.n	800af36 <_strtod_l+0x246>
 800af0e:	1821      	adds	r1, r4, r0
 800af10:	2908      	cmp	r1, #8
 800af12:	f104 0401 	add.w	r4, r4, #1
 800af16:	4404      	add	r4, r0
 800af18:	dc19      	bgt.n	800af4e <_strtod_l+0x25e>
 800af1a:	9b07      	ldr	r3, [sp, #28]
 800af1c:	210a      	movs	r1, #10
 800af1e:	fb01 e303 	mla	r3, r1, r3, lr
 800af22:	9307      	str	r3, [sp, #28]
 800af24:	2100      	movs	r1, #0
 800af26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af28:	1c58      	adds	r0, r3, #1
 800af2a:	901b      	str	r0, [sp, #108]	; 0x6c
 800af2c:	785b      	ldrb	r3, [r3, #1]
 800af2e:	4608      	mov	r0, r1
 800af30:	e7c9      	b.n	800aec6 <_strtod_l+0x1d6>
 800af32:	9805      	ldr	r0, [sp, #20]
 800af34:	e7d3      	b.n	800aede <_strtod_l+0x1ee>
 800af36:	2908      	cmp	r1, #8
 800af38:	f101 0101 	add.w	r1, r1, #1
 800af3c:	dc03      	bgt.n	800af46 <_strtod_l+0x256>
 800af3e:	9b07      	ldr	r3, [sp, #28]
 800af40:	437b      	muls	r3, r7
 800af42:	9307      	str	r3, [sp, #28]
 800af44:	e7e1      	b.n	800af0a <_strtod_l+0x21a>
 800af46:	2910      	cmp	r1, #16
 800af48:	bfd8      	it	le
 800af4a:	437d      	mulle	r5, r7
 800af4c:	e7dd      	b.n	800af0a <_strtod_l+0x21a>
 800af4e:	2c10      	cmp	r4, #16
 800af50:	bfdc      	itt	le
 800af52:	210a      	movle	r1, #10
 800af54:	fb01 e505 	mlale	r5, r1, r5, lr
 800af58:	e7e4      	b.n	800af24 <_strtod_l+0x234>
 800af5a:	2301      	movs	r3, #1
 800af5c:	9304      	str	r3, [sp, #16]
 800af5e:	e781      	b.n	800ae64 <_strtod_l+0x174>
 800af60:	f04f 0c01 	mov.w	ip, #1
 800af64:	1cb3      	adds	r3, r6, #2
 800af66:	931b      	str	r3, [sp, #108]	; 0x6c
 800af68:	78b3      	ldrb	r3, [r6, #2]
 800af6a:	e78a      	b.n	800ae82 <_strtod_l+0x192>
 800af6c:	f04f 0c00 	mov.w	ip, #0
 800af70:	e7f8      	b.n	800af64 <_strtod_l+0x274>
 800af72:	bf00      	nop
 800af74:	0800e8fc 	.word	0x0800e8fc
 800af78:	7ff00000 	.word	0x7ff00000
 800af7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af7e:	1c5f      	adds	r7, r3, #1
 800af80:	971b      	str	r7, [sp, #108]	; 0x6c
 800af82:	785b      	ldrb	r3, [r3, #1]
 800af84:	2b30      	cmp	r3, #48	; 0x30
 800af86:	d0f9      	beq.n	800af7c <_strtod_l+0x28c>
 800af88:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800af8c:	2f08      	cmp	r7, #8
 800af8e:	f63f af7d 	bhi.w	800ae8c <_strtod_l+0x19c>
 800af92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800af96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af98:	930a      	str	r3, [sp, #40]	; 0x28
 800af9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af9c:	1c5f      	adds	r7, r3, #1
 800af9e:	971b      	str	r7, [sp, #108]	; 0x6c
 800afa0:	785b      	ldrb	r3, [r3, #1]
 800afa2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800afa6:	f1b8 0f09 	cmp.w	r8, #9
 800afaa:	d937      	bls.n	800b01c <_strtod_l+0x32c>
 800afac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800afae:	1a7f      	subs	r7, r7, r1
 800afb0:	2f08      	cmp	r7, #8
 800afb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800afb6:	dc37      	bgt.n	800b028 <_strtod_l+0x338>
 800afb8:	45be      	cmp	lr, r7
 800afba:	bfa8      	it	ge
 800afbc:	46be      	movge	lr, r7
 800afbe:	f1bc 0f00 	cmp.w	ip, #0
 800afc2:	d001      	beq.n	800afc8 <_strtod_l+0x2d8>
 800afc4:	f1ce 0e00 	rsb	lr, lr, #0
 800afc8:	2c00      	cmp	r4, #0
 800afca:	d151      	bne.n	800b070 <_strtod_l+0x380>
 800afcc:	2800      	cmp	r0, #0
 800afce:	f47f aece 	bne.w	800ad6e <_strtod_l+0x7e>
 800afd2:	9a06      	ldr	r2, [sp, #24]
 800afd4:	2a00      	cmp	r2, #0
 800afd6:	f47f aeca 	bne.w	800ad6e <_strtod_l+0x7e>
 800afda:	9a04      	ldr	r2, [sp, #16]
 800afdc:	2a00      	cmp	r2, #0
 800afde:	f47f aee4 	bne.w	800adaa <_strtod_l+0xba>
 800afe2:	2b4e      	cmp	r3, #78	; 0x4e
 800afe4:	d027      	beq.n	800b036 <_strtod_l+0x346>
 800afe6:	dc21      	bgt.n	800b02c <_strtod_l+0x33c>
 800afe8:	2b49      	cmp	r3, #73	; 0x49
 800afea:	f47f aede 	bne.w	800adaa <_strtod_l+0xba>
 800afee:	49a0      	ldr	r1, [pc, #640]	; (800b270 <_strtod_l+0x580>)
 800aff0:	a81b      	add	r0, sp, #108	; 0x6c
 800aff2:	f002 f81d 	bl	800d030 <__match>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	f43f aed7 	beq.w	800adaa <_strtod_l+0xba>
 800affc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800affe:	499d      	ldr	r1, [pc, #628]	; (800b274 <_strtod_l+0x584>)
 800b000:	3b01      	subs	r3, #1
 800b002:	a81b      	add	r0, sp, #108	; 0x6c
 800b004:	931b      	str	r3, [sp, #108]	; 0x6c
 800b006:	f002 f813 	bl	800d030 <__match>
 800b00a:	b910      	cbnz	r0, 800b012 <_strtod_l+0x322>
 800b00c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b00e:	3301      	adds	r3, #1
 800b010:	931b      	str	r3, [sp, #108]	; 0x6c
 800b012:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b288 <_strtod_l+0x598>
 800b016:	f04f 0a00 	mov.w	sl, #0
 800b01a:	e6a8      	b.n	800ad6e <_strtod_l+0x7e>
 800b01c:	210a      	movs	r1, #10
 800b01e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b022:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b026:	e7b8      	b.n	800af9a <_strtod_l+0x2aa>
 800b028:	46be      	mov	lr, r7
 800b02a:	e7c8      	b.n	800afbe <_strtod_l+0x2ce>
 800b02c:	2b69      	cmp	r3, #105	; 0x69
 800b02e:	d0de      	beq.n	800afee <_strtod_l+0x2fe>
 800b030:	2b6e      	cmp	r3, #110	; 0x6e
 800b032:	f47f aeba 	bne.w	800adaa <_strtod_l+0xba>
 800b036:	4990      	ldr	r1, [pc, #576]	; (800b278 <_strtod_l+0x588>)
 800b038:	a81b      	add	r0, sp, #108	; 0x6c
 800b03a:	f001 fff9 	bl	800d030 <__match>
 800b03e:	2800      	cmp	r0, #0
 800b040:	f43f aeb3 	beq.w	800adaa <_strtod_l+0xba>
 800b044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	2b28      	cmp	r3, #40	; 0x28
 800b04a:	d10e      	bne.n	800b06a <_strtod_l+0x37a>
 800b04c:	aa1e      	add	r2, sp, #120	; 0x78
 800b04e:	498b      	ldr	r1, [pc, #556]	; (800b27c <_strtod_l+0x58c>)
 800b050:	a81b      	add	r0, sp, #108	; 0x6c
 800b052:	f002 f801 	bl	800d058 <__hexnan>
 800b056:	2805      	cmp	r0, #5
 800b058:	d107      	bne.n	800b06a <_strtod_l+0x37a>
 800b05a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b05c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b060:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b064:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b068:	e681      	b.n	800ad6e <_strtod_l+0x7e>
 800b06a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b290 <_strtod_l+0x5a0>
 800b06e:	e7d2      	b.n	800b016 <_strtod_l+0x326>
 800b070:	ebae 0302 	sub.w	r3, lr, r2
 800b074:	9306      	str	r3, [sp, #24]
 800b076:	9b05      	ldr	r3, [sp, #20]
 800b078:	9807      	ldr	r0, [sp, #28]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	bf08      	it	eq
 800b07e:	4623      	moveq	r3, r4
 800b080:	2c10      	cmp	r4, #16
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	46a0      	mov	r8, r4
 800b086:	bfa8      	it	ge
 800b088:	f04f 0810 	movge.w	r8, #16
 800b08c:	f7f5 fa42 	bl	8000514 <__aeabi_ui2d>
 800b090:	2c09      	cmp	r4, #9
 800b092:	4682      	mov	sl, r0
 800b094:	468b      	mov	fp, r1
 800b096:	dc13      	bgt.n	800b0c0 <_strtod_l+0x3d0>
 800b098:	9b06      	ldr	r3, [sp, #24]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f43f ae67 	beq.w	800ad6e <_strtod_l+0x7e>
 800b0a0:	9b06      	ldr	r3, [sp, #24]
 800b0a2:	dd7a      	ble.n	800b19a <_strtod_l+0x4aa>
 800b0a4:	2b16      	cmp	r3, #22
 800b0a6:	dc61      	bgt.n	800b16c <_strtod_l+0x47c>
 800b0a8:	4a75      	ldr	r2, [pc, #468]	; (800b280 <_strtod_l+0x590>)
 800b0aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b0ae:	e9de 0100 	ldrd	r0, r1, [lr]
 800b0b2:	4652      	mov	r2, sl
 800b0b4:	465b      	mov	r3, fp
 800b0b6:	f7f5 faa7 	bl	8000608 <__aeabi_dmul>
 800b0ba:	4682      	mov	sl, r0
 800b0bc:	468b      	mov	fp, r1
 800b0be:	e656      	b.n	800ad6e <_strtod_l+0x7e>
 800b0c0:	4b6f      	ldr	r3, [pc, #444]	; (800b280 <_strtod_l+0x590>)
 800b0c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b0c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b0ca:	f7f5 fa9d 	bl	8000608 <__aeabi_dmul>
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	460f      	mov	r7, r1
 800b0d4:	f7f5 fa1e 	bl	8000514 <__aeabi_ui2d>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4630      	mov	r0, r6
 800b0de:	4639      	mov	r1, r7
 800b0e0:	f7f5 f8dc 	bl	800029c <__adddf3>
 800b0e4:	2c0f      	cmp	r4, #15
 800b0e6:	4682      	mov	sl, r0
 800b0e8:	468b      	mov	fp, r1
 800b0ea:	ddd5      	ble.n	800b098 <_strtod_l+0x3a8>
 800b0ec:	9b06      	ldr	r3, [sp, #24]
 800b0ee:	eba4 0808 	sub.w	r8, r4, r8
 800b0f2:	4498      	add	r8, r3
 800b0f4:	f1b8 0f00 	cmp.w	r8, #0
 800b0f8:	f340 8096 	ble.w	800b228 <_strtod_l+0x538>
 800b0fc:	f018 030f 	ands.w	r3, r8, #15
 800b100:	d00a      	beq.n	800b118 <_strtod_l+0x428>
 800b102:	495f      	ldr	r1, [pc, #380]	; (800b280 <_strtod_l+0x590>)
 800b104:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b108:	4652      	mov	r2, sl
 800b10a:	465b      	mov	r3, fp
 800b10c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b110:	f7f5 fa7a 	bl	8000608 <__aeabi_dmul>
 800b114:	4682      	mov	sl, r0
 800b116:	468b      	mov	fp, r1
 800b118:	f038 080f 	bics.w	r8, r8, #15
 800b11c:	d073      	beq.n	800b206 <_strtod_l+0x516>
 800b11e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b122:	dd47      	ble.n	800b1b4 <_strtod_l+0x4c4>
 800b124:	2400      	movs	r4, #0
 800b126:	46a0      	mov	r8, r4
 800b128:	9407      	str	r4, [sp, #28]
 800b12a:	9405      	str	r4, [sp, #20]
 800b12c:	2322      	movs	r3, #34	; 0x22
 800b12e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b288 <_strtod_l+0x598>
 800b132:	f8c9 3000 	str.w	r3, [r9]
 800b136:	f04f 0a00 	mov.w	sl, #0
 800b13a:	9b07      	ldr	r3, [sp, #28]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f43f ae16 	beq.w	800ad6e <_strtod_l+0x7e>
 800b142:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b144:	4648      	mov	r0, r9
 800b146:	f002 f8c7 	bl	800d2d8 <_Bfree>
 800b14a:	9905      	ldr	r1, [sp, #20]
 800b14c:	4648      	mov	r0, r9
 800b14e:	f002 f8c3 	bl	800d2d8 <_Bfree>
 800b152:	4641      	mov	r1, r8
 800b154:	4648      	mov	r0, r9
 800b156:	f002 f8bf 	bl	800d2d8 <_Bfree>
 800b15a:	9907      	ldr	r1, [sp, #28]
 800b15c:	4648      	mov	r0, r9
 800b15e:	f002 f8bb 	bl	800d2d8 <_Bfree>
 800b162:	4621      	mov	r1, r4
 800b164:	4648      	mov	r0, r9
 800b166:	f002 f8b7 	bl	800d2d8 <_Bfree>
 800b16a:	e600      	b.n	800ad6e <_strtod_l+0x7e>
 800b16c:	9a06      	ldr	r2, [sp, #24]
 800b16e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b172:	4293      	cmp	r3, r2
 800b174:	dbba      	blt.n	800b0ec <_strtod_l+0x3fc>
 800b176:	4d42      	ldr	r5, [pc, #264]	; (800b280 <_strtod_l+0x590>)
 800b178:	f1c4 040f 	rsb	r4, r4, #15
 800b17c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b180:	4652      	mov	r2, sl
 800b182:	465b      	mov	r3, fp
 800b184:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b188:	f7f5 fa3e 	bl	8000608 <__aeabi_dmul>
 800b18c:	9b06      	ldr	r3, [sp, #24]
 800b18e:	1b1c      	subs	r4, r3, r4
 800b190:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b194:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b198:	e78d      	b.n	800b0b6 <_strtod_l+0x3c6>
 800b19a:	f113 0f16 	cmn.w	r3, #22
 800b19e:	dba5      	blt.n	800b0ec <_strtod_l+0x3fc>
 800b1a0:	4a37      	ldr	r2, [pc, #220]	; (800b280 <_strtod_l+0x590>)
 800b1a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b1a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b1aa:	4650      	mov	r0, sl
 800b1ac:	4659      	mov	r1, fp
 800b1ae:	f7f5 fb55 	bl	800085c <__aeabi_ddiv>
 800b1b2:	e782      	b.n	800b0ba <_strtod_l+0x3ca>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4e33      	ldr	r6, [pc, #204]	; (800b284 <_strtod_l+0x594>)
 800b1b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b1bc:	4650      	mov	r0, sl
 800b1be:	4659      	mov	r1, fp
 800b1c0:	461d      	mov	r5, r3
 800b1c2:	f1b8 0f01 	cmp.w	r8, #1
 800b1c6:	dc21      	bgt.n	800b20c <_strtod_l+0x51c>
 800b1c8:	b10b      	cbz	r3, 800b1ce <_strtod_l+0x4de>
 800b1ca:	4682      	mov	sl, r0
 800b1cc:	468b      	mov	fp, r1
 800b1ce:	4b2d      	ldr	r3, [pc, #180]	; (800b284 <_strtod_l+0x594>)
 800b1d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b1d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b1d8:	4652      	mov	r2, sl
 800b1da:	465b      	mov	r3, fp
 800b1dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b1e0:	f7f5 fa12 	bl	8000608 <__aeabi_dmul>
 800b1e4:	4b28      	ldr	r3, [pc, #160]	; (800b288 <_strtod_l+0x598>)
 800b1e6:	460a      	mov	r2, r1
 800b1e8:	400b      	ands	r3, r1
 800b1ea:	4928      	ldr	r1, [pc, #160]	; (800b28c <_strtod_l+0x59c>)
 800b1ec:	428b      	cmp	r3, r1
 800b1ee:	4682      	mov	sl, r0
 800b1f0:	d898      	bhi.n	800b124 <_strtod_l+0x434>
 800b1f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b1f6:	428b      	cmp	r3, r1
 800b1f8:	bf86      	itte	hi
 800b1fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b294 <_strtod_l+0x5a4>
 800b1fe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b202:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b206:	2300      	movs	r3, #0
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	e077      	b.n	800b2fc <_strtod_l+0x60c>
 800b20c:	f018 0f01 	tst.w	r8, #1
 800b210:	d006      	beq.n	800b220 <_strtod_l+0x530>
 800b212:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	f7f5 f9f5 	bl	8000608 <__aeabi_dmul>
 800b21e:	2301      	movs	r3, #1
 800b220:	3501      	adds	r5, #1
 800b222:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b226:	e7cc      	b.n	800b1c2 <_strtod_l+0x4d2>
 800b228:	d0ed      	beq.n	800b206 <_strtod_l+0x516>
 800b22a:	f1c8 0800 	rsb	r8, r8, #0
 800b22e:	f018 020f 	ands.w	r2, r8, #15
 800b232:	d00a      	beq.n	800b24a <_strtod_l+0x55a>
 800b234:	4b12      	ldr	r3, [pc, #72]	; (800b280 <_strtod_l+0x590>)
 800b236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b23a:	4650      	mov	r0, sl
 800b23c:	4659      	mov	r1, fp
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	f7f5 fb0b 	bl	800085c <__aeabi_ddiv>
 800b246:	4682      	mov	sl, r0
 800b248:	468b      	mov	fp, r1
 800b24a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b24e:	d0da      	beq.n	800b206 <_strtod_l+0x516>
 800b250:	f1b8 0f1f 	cmp.w	r8, #31
 800b254:	dd20      	ble.n	800b298 <_strtod_l+0x5a8>
 800b256:	2400      	movs	r4, #0
 800b258:	46a0      	mov	r8, r4
 800b25a:	9407      	str	r4, [sp, #28]
 800b25c:	9405      	str	r4, [sp, #20]
 800b25e:	2322      	movs	r3, #34	; 0x22
 800b260:	f04f 0a00 	mov.w	sl, #0
 800b264:	f04f 0b00 	mov.w	fp, #0
 800b268:	f8c9 3000 	str.w	r3, [r9]
 800b26c:	e765      	b.n	800b13a <_strtod_l+0x44a>
 800b26e:	bf00      	nop
 800b270:	0800e850 	.word	0x0800e850
 800b274:	0800ea54 	.word	0x0800ea54
 800b278:	0800e8cf 	.word	0x0800e8cf
 800b27c:	0800e910 	.word	0x0800e910
 800b280:	0800eae8 	.word	0x0800eae8
 800b284:	0800eac0 	.word	0x0800eac0
 800b288:	7ff00000 	.word	0x7ff00000
 800b28c:	7ca00000 	.word	0x7ca00000
 800b290:	fff80000 	.word	0xfff80000
 800b294:	7fefffff 	.word	0x7fefffff
 800b298:	f018 0310 	ands.w	r3, r8, #16
 800b29c:	bf18      	it	ne
 800b29e:	236a      	movne	r3, #106	; 0x6a
 800b2a0:	4da0      	ldr	r5, [pc, #640]	; (800b524 <_strtod_l+0x834>)
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	4650      	mov	r0, sl
 800b2a6:	4659      	mov	r1, fp
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f1b8 0f00 	cmp.w	r8, #0
 800b2ae:	f300 810a 	bgt.w	800b4c6 <_strtod_l+0x7d6>
 800b2b2:	b10b      	cbz	r3, 800b2b8 <_strtod_l+0x5c8>
 800b2b4:	4682      	mov	sl, r0
 800b2b6:	468b      	mov	fp, r1
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	b1bb      	cbz	r3, 800b2ec <_strtod_l+0x5fc>
 800b2bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b2c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	4659      	mov	r1, fp
 800b2c8:	dd10      	ble.n	800b2ec <_strtod_l+0x5fc>
 800b2ca:	2b1f      	cmp	r3, #31
 800b2cc:	f340 8107 	ble.w	800b4de <_strtod_l+0x7ee>
 800b2d0:	2b34      	cmp	r3, #52	; 0x34
 800b2d2:	bfde      	ittt	le
 800b2d4:	3b20      	suble	r3, #32
 800b2d6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800b2da:	fa02 f303 	lslle.w	r3, r2, r3
 800b2de:	f04f 0a00 	mov.w	sl, #0
 800b2e2:	bfcc      	ite	gt
 800b2e4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b2e8:	ea03 0b01 	andle.w	fp, r3, r1
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	4650      	mov	r0, sl
 800b2f2:	4659      	mov	r1, fp
 800b2f4:	f7f5 fbf0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1ac      	bne.n	800b256 <_strtod_l+0x566>
 800b2fc:	9b07      	ldr	r3, [sp, #28]
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	9a05      	ldr	r2, [sp, #20]
 800b302:	9908      	ldr	r1, [sp, #32]
 800b304:	4623      	mov	r3, r4
 800b306:	4648      	mov	r0, r9
 800b308:	f002 f838 	bl	800d37c <__s2b>
 800b30c:	9007      	str	r0, [sp, #28]
 800b30e:	2800      	cmp	r0, #0
 800b310:	f43f af08 	beq.w	800b124 <_strtod_l+0x434>
 800b314:	9a06      	ldr	r2, [sp, #24]
 800b316:	9b06      	ldr	r3, [sp, #24]
 800b318:	2a00      	cmp	r2, #0
 800b31a:	f1c3 0300 	rsb	r3, r3, #0
 800b31e:	bfa8      	it	ge
 800b320:	2300      	movge	r3, #0
 800b322:	930e      	str	r3, [sp, #56]	; 0x38
 800b324:	2400      	movs	r4, #0
 800b326:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b32a:	9316      	str	r3, [sp, #88]	; 0x58
 800b32c:	46a0      	mov	r8, r4
 800b32e:	9b07      	ldr	r3, [sp, #28]
 800b330:	4648      	mov	r0, r9
 800b332:	6859      	ldr	r1, [r3, #4]
 800b334:	f001 ff9c 	bl	800d270 <_Balloc>
 800b338:	9005      	str	r0, [sp, #20]
 800b33a:	2800      	cmp	r0, #0
 800b33c:	f43f aef6 	beq.w	800b12c <_strtod_l+0x43c>
 800b340:	9b07      	ldr	r3, [sp, #28]
 800b342:	691a      	ldr	r2, [r3, #16]
 800b344:	3202      	adds	r2, #2
 800b346:	f103 010c 	add.w	r1, r3, #12
 800b34a:	0092      	lsls	r2, r2, #2
 800b34c:	300c      	adds	r0, #12
 800b34e:	f7fe fdbe 	bl	8009ece <memcpy>
 800b352:	aa1e      	add	r2, sp, #120	; 0x78
 800b354:	a91d      	add	r1, sp, #116	; 0x74
 800b356:	ec4b ab10 	vmov	d0, sl, fp
 800b35a:	4648      	mov	r0, r9
 800b35c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b360:	f002 fac8 	bl	800d8f4 <__d2b>
 800b364:	901c      	str	r0, [sp, #112]	; 0x70
 800b366:	2800      	cmp	r0, #0
 800b368:	f43f aee0 	beq.w	800b12c <_strtod_l+0x43c>
 800b36c:	2101      	movs	r1, #1
 800b36e:	4648      	mov	r0, r9
 800b370:	f002 f890 	bl	800d494 <__i2b>
 800b374:	4680      	mov	r8, r0
 800b376:	2800      	cmp	r0, #0
 800b378:	f43f aed8 	beq.w	800b12c <_strtod_l+0x43c>
 800b37c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b37e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b380:	2e00      	cmp	r6, #0
 800b382:	bfab      	itete	ge
 800b384:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b386:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b388:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b38a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b38c:	bfac      	ite	ge
 800b38e:	18f7      	addge	r7, r6, r3
 800b390:	1b9d      	sublt	r5, r3, r6
 800b392:	9b04      	ldr	r3, [sp, #16]
 800b394:	1af6      	subs	r6, r6, r3
 800b396:	4416      	add	r6, r2
 800b398:	4b63      	ldr	r3, [pc, #396]	; (800b528 <_strtod_l+0x838>)
 800b39a:	3e01      	subs	r6, #1
 800b39c:	429e      	cmp	r6, r3
 800b39e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b3a2:	f280 80af 	bge.w	800b504 <_strtod_l+0x814>
 800b3a6:	1b9b      	subs	r3, r3, r6
 800b3a8:	2b1f      	cmp	r3, #31
 800b3aa:	eba2 0203 	sub.w	r2, r2, r3
 800b3ae:	f04f 0101 	mov.w	r1, #1
 800b3b2:	f300 809b 	bgt.w	800b4ec <_strtod_l+0x7fc>
 800b3b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3bc:	2300      	movs	r3, #0
 800b3be:	930a      	str	r3, [sp, #40]	; 0x28
 800b3c0:	18be      	adds	r6, r7, r2
 800b3c2:	9b04      	ldr	r3, [sp, #16]
 800b3c4:	42b7      	cmp	r7, r6
 800b3c6:	4415      	add	r5, r2
 800b3c8:	441d      	add	r5, r3
 800b3ca:	463b      	mov	r3, r7
 800b3cc:	bfa8      	it	ge
 800b3ce:	4633      	movge	r3, r6
 800b3d0:	42ab      	cmp	r3, r5
 800b3d2:	bfa8      	it	ge
 800b3d4:	462b      	movge	r3, r5
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	bfc2      	ittt	gt
 800b3da:	1af6      	subgt	r6, r6, r3
 800b3dc:	1aed      	subgt	r5, r5, r3
 800b3de:	1aff      	subgt	r7, r7, r3
 800b3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3e2:	b1bb      	cbz	r3, 800b414 <_strtod_l+0x724>
 800b3e4:	4641      	mov	r1, r8
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	4648      	mov	r0, r9
 800b3ea:	f002 f8f3 	bl	800d5d4 <__pow5mult>
 800b3ee:	4680      	mov	r8, r0
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	f43f ae9b 	beq.w	800b12c <_strtod_l+0x43c>
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b3fa:	4648      	mov	r0, r9
 800b3fc:	f002 f853 	bl	800d4a6 <__multiply>
 800b400:	900c      	str	r0, [sp, #48]	; 0x30
 800b402:	2800      	cmp	r0, #0
 800b404:	f43f ae92 	beq.w	800b12c <_strtod_l+0x43c>
 800b408:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b40a:	4648      	mov	r0, r9
 800b40c:	f001 ff64 	bl	800d2d8 <_Bfree>
 800b410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b412:	931c      	str	r3, [sp, #112]	; 0x70
 800b414:	2e00      	cmp	r6, #0
 800b416:	dc7a      	bgt.n	800b50e <_strtod_l+0x81e>
 800b418:	9b06      	ldr	r3, [sp, #24]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	dd08      	ble.n	800b430 <_strtod_l+0x740>
 800b41e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b420:	9905      	ldr	r1, [sp, #20]
 800b422:	4648      	mov	r0, r9
 800b424:	f002 f8d6 	bl	800d5d4 <__pow5mult>
 800b428:	9005      	str	r0, [sp, #20]
 800b42a:	2800      	cmp	r0, #0
 800b42c:	f43f ae7e 	beq.w	800b12c <_strtod_l+0x43c>
 800b430:	2d00      	cmp	r5, #0
 800b432:	dd08      	ble.n	800b446 <_strtod_l+0x756>
 800b434:	462a      	mov	r2, r5
 800b436:	9905      	ldr	r1, [sp, #20]
 800b438:	4648      	mov	r0, r9
 800b43a:	f002 f919 	bl	800d670 <__lshift>
 800b43e:	9005      	str	r0, [sp, #20]
 800b440:	2800      	cmp	r0, #0
 800b442:	f43f ae73 	beq.w	800b12c <_strtod_l+0x43c>
 800b446:	2f00      	cmp	r7, #0
 800b448:	dd08      	ble.n	800b45c <_strtod_l+0x76c>
 800b44a:	4641      	mov	r1, r8
 800b44c:	463a      	mov	r2, r7
 800b44e:	4648      	mov	r0, r9
 800b450:	f002 f90e 	bl	800d670 <__lshift>
 800b454:	4680      	mov	r8, r0
 800b456:	2800      	cmp	r0, #0
 800b458:	f43f ae68 	beq.w	800b12c <_strtod_l+0x43c>
 800b45c:	9a05      	ldr	r2, [sp, #20]
 800b45e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b460:	4648      	mov	r0, r9
 800b462:	f002 f973 	bl	800d74c <__mdiff>
 800b466:	4604      	mov	r4, r0
 800b468:	2800      	cmp	r0, #0
 800b46a:	f43f ae5f 	beq.w	800b12c <_strtod_l+0x43c>
 800b46e:	68c3      	ldr	r3, [r0, #12]
 800b470:	930c      	str	r3, [sp, #48]	; 0x30
 800b472:	2300      	movs	r3, #0
 800b474:	60c3      	str	r3, [r0, #12]
 800b476:	4641      	mov	r1, r8
 800b478:	f002 f94e 	bl	800d718 <__mcmp>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	da55      	bge.n	800b52c <_strtod_l+0x83c>
 800b480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b482:	b9e3      	cbnz	r3, 800b4be <_strtod_l+0x7ce>
 800b484:	f1ba 0f00 	cmp.w	sl, #0
 800b488:	d119      	bne.n	800b4be <_strtod_l+0x7ce>
 800b48a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b48e:	b9b3      	cbnz	r3, 800b4be <_strtod_l+0x7ce>
 800b490:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b494:	0d1b      	lsrs	r3, r3, #20
 800b496:	051b      	lsls	r3, r3, #20
 800b498:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b49c:	d90f      	bls.n	800b4be <_strtod_l+0x7ce>
 800b49e:	6963      	ldr	r3, [r4, #20]
 800b4a0:	b913      	cbnz	r3, 800b4a8 <_strtod_l+0x7b8>
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	dd0a      	ble.n	800b4be <_strtod_l+0x7ce>
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	4648      	mov	r0, r9
 800b4ae:	f002 f8df 	bl	800d670 <__lshift>
 800b4b2:	4641      	mov	r1, r8
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	f002 f92f 	bl	800d718 <__mcmp>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	dc67      	bgt.n	800b58e <_strtod_l+0x89e>
 800b4be:	9b04      	ldr	r3, [sp, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d171      	bne.n	800b5a8 <_strtod_l+0x8b8>
 800b4c4:	e63d      	b.n	800b142 <_strtod_l+0x452>
 800b4c6:	f018 0f01 	tst.w	r8, #1
 800b4ca:	d004      	beq.n	800b4d6 <_strtod_l+0x7e6>
 800b4cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4d0:	f7f5 f89a 	bl	8000608 <__aeabi_dmul>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b4da:	3508      	adds	r5, #8
 800b4dc:	e6e5      	b.n	800b2aa <_strtod_l+0x5ba>
 800b4de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e6:	ea03 0a0a 	and.w	sl, r3, sl
 800b4ea:	e6ff      	b.n	800b2ec <_strtod_l+0x5fc>
 800b4ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b4f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b4f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b4f8:	36e2      	adds	r6, #226	; 0xe2
 800b4fa:	fa01 f306 	lsl.w	r3, r1, r6
 800b4fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b500:	910f      	str	r1, [sp, #60]	; 0x3c
 800b502:	e75d      	b.n	800b3c0 <_strtod_l+0x6d0>
 800b504:	2300      	movs	r3, #0
 800b506:	930a      	str	r3, [sp, #40]	; 0x28
 800b508:	2301      	movs	r3, #1
 800b50a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b50c:	e758      	b.n	800b3c0 <_strtod_l+0x6d0>
 800b50e:	4632      	mov	r2, r6
 800b510:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b512:	4648      	mov	r0, r9
 800b514:	f002 f8ac 	bl	800d670 <__lshift>
 800b518:	901c      	str	r0, [sp, #112]	; 0x70
 800b51a:	2800      	cmp	r0, #0
 800b51c:	f47f af7c 	bne.w	800b418 <_strtod_l+0x728>
 800b520:	e604      	b.n	800b12c <_strtod_l+0x43c>
 800b522:	bf00      	nop
 800b524:	0800e928 	.word	0x0800e928
 800b528:	fffffc02 	.word	0xfffffc02
 800b52c:	465d      	mov	r5, fp
 800b52e:	f040 8086 	bne.w	800b63e <_strtod_l+0x94e>
 800b532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b534:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b538:	b32a      	cbz	r2, 800b586 <_strtod_l+0x896>
 800b53a:	4aaf      	ldr	r2, [pc, #700]	; (800b7f8 <_strtod_l+0xb08>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d153      	bne.n	800b5e8 <_strtod_l+0x8f8>
 800b540:	9b04      	ldr	r3, [sp, #16]
 800b542:	4650      	mov	r0, sl
 800b544:	b1d3      	cbz	r3, 800b57c <_strtod_l+0x88c>
 800b546:	4aad      	ldr	r2, [pc, #692]	; (800b7fc <_strtod_l+0xb0c>)
 800b548:	402a      	ands	r2, r5
 800b54a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b54e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b552:	d816      	bhi.n	800b582 <_strtod_l+0x892>
 800b554:	0d12      	lsrs	r2, r2, #20
 800b556:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b55a:	fa01 f303 	lsl.w	r3, r1, r3
 800b55e:	4298      	cmp	r0, r3
 800b560:	d142      	bne.n	800b5e8 <_strtod_l+0x8f8>
 800b562:	4ba7      	ldr	r3, [pc, #668]	; (800b800 <_strtod_l+0xb10>)
 800b564:	429d      	cmp	r5, r3
 800b566:	d102      	bne.n	800b56e <_strtod_l+0x87e>
 800b568:	3001      	adds	r0, #1
 800b56a:	f43f addf 	beq.w	800b12c <_strtod_l+0x43c>
 800b56e:	4ba3      	ldr	r3, [pc, #652]	; (800b7fc <_strtod_l+0xb0c>)
 800b570:	402b      	ands	r3, r5
 800b572:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b576:	f04f 0a00 	mov.w	sl, #0
 800b57a:	e7a0      	b.n	800b4be <_strtod_l+0x7ce>
 800b57c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b580:	e7ed      	b.n	800b55e <_strtod_l+0x86e>
 800b582:	460b      	mov	r3, r1
 800b584:	e7eb      	b.n	800b55e <_strtod_l+0x86e>
 800b586:	bb7b      	cbnz	r3, 800b5e8 <_strtod_l+0x8f8>
 800b588:	f1ba 0f00 	cmp.w	sl, #0
 800b58c:	d12c      	bne.n	800b5e8 <_strtod_l+0x8f8>
 800b58e:	9904      	ldr	r1, [sp, #16]
 800b590:	4a9a      	ldr	r2, [pc, #616]	; (800b7fc <_strtod_l+0xb0c>)
 800b592:	465b      	mov	r3, fp
 800b594:	b1f1      	cbz	r1, 800b5d4 <_strtod_l+0x8e4>
 800b596:	ea02 010b 	and.w	r1, r2, fp
 800b59a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b59e:	dc19      	bgt.n	800b5d4 <_strtod_l+0x8e4>
 800b5a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b5a4:	f77f ae5b 	ble.w	800b25e <_strtod_l+0x56e>
 800b5a8:	4a96      	ldr	r2, [pc, #600]	; (800b804 <_strtod_l+0xb14>)
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b5b0:	4650      	mov	r0, sl
 800b5b2:	4659      	mov	r1, fp
 800b5b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b5b8:	f7f5 f826 	bl	8000608 <__aeabi_dmul>
 800b5bc:	4682      	mov	sl, r0
 800b5be:	468b      	mov	fp, r1
 800b5c0:	2900      	cmp	r1, #0
 800b5c2:	f47f adbe 	bne.w	800b142 <_strtod_l+0x452>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	f47f adbb 	bne.w	800b142 <_strtod_l+0x452>
 800b5cc:	2322      	movs	r3, #34	; 0x22
 800b5ce:	f8c9 3000 	str.w	r3, [r9]
 800b5d2:	e5b6      	b.n	800b142 <_strtod_l+0x452>
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b5da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b5de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b5e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b5e6:	e76a      	b.n	800b4be <_strtod_l+0x7ce>
 800b5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ea:	b193      	cbz	r3, 800b612 <_strtod_l+0x922>
 800b5ec:	422b      	tst	r3, r5
 800b5ee:	f43f af66 	beq.w	800b4be <_strtod_l+0x7ce>
 800b5f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5f4:	9a04      	ldr	r2, [sp, #16]
 800b5f6:	4650      	mov	r0, sl
 800b5f8:	4659      	mov	r1, fp
 800b5fa:	b173      	cbz	r3, 800b61a <_strtod_l+0x92a>
 800b5fc:	f7ff fb5a 	bl	800acb4 <sulp>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b608:	f7f4 fe48 	bl	800029c <__adddf3>
 800b60c:	4682      	mov	sl, r0
 800b60e:	468b      	mov	fp, r1
 800b610:	e755      	b.n	800b4be <_strtod_l+0x7ce>
 800b612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b614:	ea13 0f0a 	tst.w	r3, sl
 800b618:	e7e9      	b.n	800b5ee <_strtod_l+0x8fe>
 800b61a:	f7ff fb4b 	bl	800acb4 <sulp>
 800b61e:	4602      	mov	r2, r0
 800b620:	460b      	mov	r3, r1
 800b622:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b626:	f7f4 fe37 	bl	8000298 <__aeabi_dsub>
 800b62a:	2200      	movs	r2, #0
 800b62c:	2300      	movs	r3, #0
 800b62e:	4682      	mov	sl, r0
 800b630:	468b      	mov	fp, r1
 800b632:	f7f5 fa51 	bl	8000ad8 <__aeabi_dcmpeq>
 800b636:	2800      	cmp	r0, #0
 800b638:	f47f ae11 	bne.w	800b25e <_strtod_l+0x56e>
 800b63c:	e73f      	b.n	800b4be <_strtod_l+0x7ce>
 800b63e:	4641      	mov	r1, r8
 800b640:	4620      	mov	r0, r4
 800b642:	f002 f9a6 	bl	800d992 <__ratio>
 800b646:	ec57 6b10 	vmov	r6, r7, d0
 800b64a:	2200      	movs	r2, #0
 800b64c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b650:	ee10 0a10 	vmov	r0, s0
 800b654:	4639      	mov	r1, r7
 800b656:	f7f5 fa53 	bl	8000b00 <__aeabi_dcmple>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d077      	beq.n	800b74e <_strtod_l+0xa5e>
 800b65e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b660:	2b00      	cmp	r3, #0
 800b662:	d04a      	beq.n	800b6fa <_strtod_l+0xa0a>
 800b664:	4b68      	ldr	r3, [pc, #416]	; (800b808 <_strtod_l+0xb18>)
 800b666:	2200      	movs	r2, #0
 800b668:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b66c:	4f66      	ldr	r7, [pc, #408]	; (800b808 <_strtod_l+0xb18>)
 800b66e:	2600      	movs	r6, #0
 800b670:	4b62      	ldr	r3, [pc, #392]	; (800b7fc <_strtod_l+0xb0c>)
 800b672:	402b      	ands	r3, r5
 800b674:	930f      	str	r3, [sp, #60]	; 0x3c
 800b676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b678:	4b64      	ldr	r3, [pc, #400]	; (800b80c <_strtod_l+0xb1c>)
 800b67a:	429a      	cmp	r2, r3
 800b67c:	f040 80ce 	bne.w	800b81c <_strtod_l+0xb2c>
 800b680:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b684:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b688:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b68c:	ec4b ab10 	vmov	d0, sl, fp
 800b690:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b694:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b698:	f002 f8b6 	bl	800d808 <__ulp>
 800b69c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b6a0:	ec53 2b10 	vmov	r2, r3, d0
 800b6a4:	f7f4 ffb0 	bl	8000608 <__aeabi_dmul>
 800b6a8:	4652      	mov	r2, sl
 800b6aa:	465b      	mov	r3, fp
 800b6ac:	f7f4 fdf6 	bl	800029c <__adddf3>
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	4952      	ldr	r1, [pc, #328]	; (800b7fc <_strtod_l+0xb0c>)
 800b6b4:	4a56      	ldr	r2, [pc, #344]	; (800b810 <_strtod_l+0xb20>)
 800b6b6:	4019      	ands	r1, r3
 800b6b8:	4291      	cmp	r1, r2
 800b6ba:	4682      	mov	sl, r0
 800b6bc:	d95b      	bls.n	800b776 <_strtod_l+0xa86>
 800b6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d103      	bne.n	800b6d0 <_strtod_l+0x9e0>
 800b6c8:	9b08      	ldr	r3, [sp, #32]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	f43f ad2e 	beq.w	800b12c <_strtod_l+0x43c>
 800b6d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b800 <_strtod_l+0xb10>
 800b6d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b6d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6da:	4648      	mov	r0, r9
 800b6dc:	f001 fdfc 	bl	800d2d8 <_Bfree>
 800b6e0:	9905      	ldr	r1, [sp, #20]
 800b6e2:	4648      	mov	r0, r9
 800b6e4:	f001 fdf8 	bl	800d2d8 <_Bfree>
 800b6e8:	4641      	mov	r1, r8
 800b6ea:	4648      	mov	r0, r9
 800b6ec:	f001 fdf4 	bl	800d2d8 <_Bfree>
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	4648      	mov	r0, r9
 800b6f4:	f001 fdf0 	bl	800d2d8 <_Bfree>
 800b6f8:	e619      	b.n	800b32e <_strtod_l+0x63e>
 800b6fa:	f1ba 0f00 	cmp.w	sl, #0
 800b6fe:	d11a      	bne.n	800b736 <_strtod_l+0xa46>
 800b700:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b704:	b9eb      	cbnz	r3, 800b742 <_strtod_l+0xa52>
 800b706:	2200      	movs	r2, #0
 800b708:	4b3f      	ldr	r3, [pc, #252]	; (800b808 <_strtod_l+0xb18>)
 800b70a:	4630      	mov	r0, r6
 800b70c:	4639      	mov	r1, r7
 800b70e:	f7f5 f9ed 	bl	8000aec <__aeabi_dcmplt>
 800b712:	b9c8      	cbnz	r0, 800b748 <_strtod_l+0xa58>
 800b714:	4630      	mov	r0, r6
 800b716:	4639      	mov	r1, r7
 800b718:	2200      	movs	r2, #0
 800b71a:	4b3e      	ldr	r3, [pc, #248]	; (800b814 <_strtod_l+0xb24>)
 800b71c:	f7f4 ff74 	bl	8000608 <__aeabi_dmul>
 800b720:	4606      	mov	r6, r0
 800b722:	460f      	mov	r7, r1
 800b724:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b728:	9618      	str	r6, [sp, #96]	; 0x60
 800b72a:	9319      	str	r3, [sp, #100]	; 0x64
 800b72c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b730:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b734:	e79c      	b.n	800b670 <_strtod_l+0x980>
 800b736:	f1ba 0f01 	cmp.w	sl, #1
 800b73a:	d102      	bne.n	800b742 <_strtod_l+0xa52>
 800b73c:	2d00      	cmp	r5, #0
 800b73e:	f43f ad8e 	beq.w	800b25e <_strtod_l+0x56e>
 800b742:	2200      	movs	r2, #0
 800b744:	4b34      	ldr	r3, [pc, #208]	; (800b818 <_strtod_l+0xb28>)
 800b746:	e78f      	b.n	800b668 <_strtod_l+0x978>
 800b748:	2600      	movs	r6, #0
 800b74a:	4f32      	ldr	r7, [pc, #200]	; (800b814 <_strtod_l+0xb24>)
 800b74c:	e7ea      	b.n	800b724 <_strtod_l+0xa34>
 800b74e:	4b31      	ldr	r3, [pc, #196]	; (800b814 <_strtod_l+0xb24>)
 800b750:	4630      	mov	r0, r6
 800b752:	4639      	mov	r1, r7
 800b754:	2200      	movs	r2, #0
 800b756:	f7f4 ff57 	bl	8000608 <__aeabi_dmul>
 800b75a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b75c:	4606      	mov	r6, r0
 800b75e:	460f      	mov	r7, r1
 800b760:	b933      	cbnz	r3, 800b770 <_strtod_l+0xa80>
 800b762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b766:	9010      	str	r0, [sp, #64]	; 0x40
 800b768:	9311      	str	r3, [sp, #68]	; 0x44
 800b76a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b76e:	e7df      	b.n	800b730 <_strtod_l+0xa40>
 800b770:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b774:	e7f9      	b.n	800b76a <_strtod_l+0xa7a>
 800b776:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b77a:	9b04      	ldr	r3, [sp, #16]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1ab      	bne.n	800b6d8 <_strtod_l+0x9e8>
 800b780:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b784:	0d1b      	lsrs	r3, r3, #20
 800b786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b788:	051b      	lsls	r3, r3, #20
 800b78a:	429a      	cmp	r2, r3
 800b78c:	465d      	mov	r5, fp
 800b78e:	d1a3      	bne.n	800b6d8 <_strtod_l+0x9e8>
 800b790:	4639      	mov	r1, r7
 800b792:	4630      	mov	r0, r6
 800b794:	f7f5 f9e8 	bl	8000b68 <__aeabi_d2iz>
 800b798:	f7f4 fecc 	bl	8000534 <__aeabi_i2d>
 800b79c:	460b      	mov	r3, r1
 800b79e:	4602      	mov	r2, r0
 800b7a0:	4639      	mov	r1, r7
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f7f4 fd78 	bl	8000298 <__aeabi_dsub>
 800b7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	b933      	cbnz	r3, 800b7be <_strtod_l+0xace>
 800b7b0:	f1ba 0f00 	cmp.w	sl, #0
 800b7b4:	d103      	bne.n	800b7be <_strtod_l+0xace>
 800b7b6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b7ba:	2d00      	cmp	r5, #0
 800b7bc:	d06d      	beq.n	800b89a <_strtod_l+0xbaa>
 800b7be:	a30a      	add	r3, pc, #40	; (adr r3, 800b7e8 <_strtod_l+0xaf8>)
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	f7f5 f990 	bl	8000aec <__aeabi_dcmplt>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	f47f acb8 	bne.w	800b142 <_strtod_l+0x452>
 800b7d2:	a307      	add	r3, pc, #28	; (adr r3, 800b7f0 <_strtod_l+0xb00>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	4630      	mov	r0, r6
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f5 f9a4 	bl	8000b28 <__aeabi_dcmpgt>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	f43f af79 	beq.w	800b6d8 <_strtod_l+0x9e8>
 800b7e6:	e4ac      	b.n	800b142 <_strtod_l+0x452>
 800b7e8:	94a03595 	.word	0x94a03595
 800b7ec:	3fdfffff 	.word	0x3fdfffff
 800b7f0:	35afe535 	.word	0x35afe535
 800b7f4:	3fe00000 	.word	0x3fe00000
 800b7f8:	000fffff 	.word	0x000fffff
 800b7fc:	7ff00000 	.word	0x7ff00000
 800b800:	7fefffff 	.word	0x7fefffff
 800b804:	39500000 	.word	0x39500000
 800b808:	3ff00000 	.word	0x3ff00000
 800b80c:	7fe00000 	.word	0x7fe00000
 800b810:	7c9fffff 	.word	0x7c9fffff
 800b814:	3fe00000 	.word	0x3fe00000
 800b818:	bff00000 	.word	0xbff00000
 800b81c:	9b04      	ldr	r3, [sp, #16]
 800b81e:	b333      	cbz	r3, 800b86e <_strtod_l+0xb7e>
 800b820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b822:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b826:	d822      	bhi.n	800b86e <_strtod_l+0xb7e>
 800b828:	a327      	add	r3, pc, #156	; (adr r3, 800b8c8 <_strtod_l+0xbd8>)
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	4630      	mov	r0, r6
 800b830:	4639      	mov	r1, r7
 800b832:	f7f5 f965 	bl	8000b00 <__aeabi_dcmple>
 800b836:	b1a0      	cbz	r0, 800b862 <_strtod_l+0xb72>
 800b838:	4639      	mov	r1, r7
 800b83a:	4630      	mov	r0, r6
 800b83c:	f7f5 f9bc 	bl	8000bb8 <__aeabi_d2uiz>
 800b840:	2800      	cmp	r0, #0
 800b842:	bf08      	it	eq
 800b844:	2001      	moveq	r0, #1
 800b846:	f7f4 fe65 	bl	8000514 <__aeabi_ui2d>
 800b84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b84c:	4606      	mov	r6, r0
 800b84e:	460f      	mov	r7, r1
 800b850:	bb03      	cbnz	r3, 800b894 <_strtod_l+0xba4>
 800b852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b856:	9012      	str	r0, [sp, #72]	; 0x48
 800b858:	9313      	str	r3, [sp, #76]	; 0x4c
 800b85a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b85e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b864:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b866:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b86a:	1a9b      	subs	r3, r3, r2
 800b86c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b86e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b872:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b876:	f001 ffc7 	bl	800d808 <__ulp>
 800b87a:	4650      	mov	r0, sl
 800b87c:	ec53 2b10 	vmov	r2, r3, d0
 800b880:	4659      	mov	r1, fp
 800b882:	f7f4 fec1 	bl	8000608 <__aeabi_dmul>
 800b886:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b88a:	f7f4 fd07 	bl	800029c <__adddf3>
 800b88e:	4682      	mov	sl, r0
 800b890:	468b      	mov	fp, r1
 800b892:	e772      	b.n	800b77a <_strtod_l+0xa8a>
 800b894:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b898:	e7df      	b.n	800b85a <_strtod_l+0xb6a>
 800b89a:	a30d      	add	r3, pc, #52	; (adr r3, 800b8d0 <_strtod_l+0xbe0>)
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	f7f5 f924 	bl	8000aec <__aeabi_dcmplt>
 800b8a4:	e79c      	b.n	800b7e0 <_strtod_l+0xaf0>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	930d      	str	r3, [sp, #52]	; 0x34
 800b8aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	f7ff ba61 	b.w	800ad76 <_strtod_l+0x86>
 800b8b4:	2b65      	cmp	r3, #101	; 0x65
 800b8b6:	f04f 0200 	mov.w	r2, #0
 800b8ba:	f43f ab4e 	beq.w	800af5a <_strtod_l+0x26a>
 800b8be:	2101      	movs	r1, #1
 800b8c0:	4614      	mov	r4, r2
 800b8c2:	9104      	str	r1, [sp, #16]
 800b8c4:	f7ff bacb 	b.w	800ae5e <_strtod_l+0x16e>
 800b8c8:	ffc00000 	.word	0xffc00000
 800b8cc:	41dfffff 	.word	0x41dfffff
 800b8d0:	94a03595 	.word	0x94a03595
 800b8d4:	3fcfffff 	.word	0x3fcfffff

0800b8d8 <_strtod_r>:
 800b8d8:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <_strtod_r+0x18>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	b410      	push	{r4}
 800b8de:	6a1b      	ldr	r3, [r3, #32]
 800b8e0:	4c04      	ldr	r4, [pc, #16]	; (800b8f4 <_strtod_r+0x1c>)
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bf08      	it	eq
 800b8e6:	4623      	moveq	r3, r4
 800b8e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ec:	f7ff ba00 	b.w	800acf0 <_strtod_l>
 800b8f0:	20000098 	.word	0x20000098
 800b8f4:	200000fc 	.word	0x200000fc

0800b8f8 <_strtol_l.isra.0>:
 800b8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8fc:	4680      	mov	r8, r0
 800b8fe:	4689      	mov	r9, r1
 800b900:	4692      	mov	sl, r2
 800b902:	461e      	mov	r6, r3
 800b904:	460f      	mov	r7, r1
 800b906:	463d      	mov	r5, r7
 800b908:	9808      	ldr	r0, [sp, #32]
 800b90a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b90e:	f7fe fac9 	bl	8009ea4 <__locale_ctype_ptr_l>
 800b912:	4420      	add	r0, r4
 800b914:	7843      	ldrb	r3, [r0, #1]
 800b916:	f013 0308 	ands.w	r3, r3, #8
 800b91a:	d132      	bne.n	800b982 <_strtol_l.isra.0+0x8a>
 800b91c:	2c2d      	cmp	r4, #45	; 0x2d
 800b91e:	d132      	bne.n	800b986 <_strtol_l.isra.0+0x8e>
 800b920:	787c      	ldrb	r4, [r7, #1]
 800b922:	1cbd      	adds	r5, r7, #2
 800b924:	2201      	movs	r2, #1
 800b926:	2e00      	cmp	r6, #0
 800b928:	d05d      	beq.n	800b9e6 <_strtol_l.isra.0+0xee>
 800b92a:	2e10      	cmp	r6, #16
 800b92c:	d109      	bne.n	800b942 <_strtol_l.isra.0+0x4a>
 800b92e:	2c30      	cmp	r4, #48	; 0x30
 800b930:	d107      	bne.n	800b942 <_strtol_l.isra.0+0x4a>
 800b932:	782b      	ldrb	r3, [r5, #0]
 800b934:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b938:	2b58      	cmp	r3, #88	; 0x58
 800b93a:	d14f      	bne.n	800b9dc <_strtol_l.isra.0+0xe4>
 800b93c:	786c      	ldrb	r4, [r5, #1]
 800b93e:	2610      	movs	r6, #16
 800b940:	3502      	adds	r5, #2
 800b942:	2a00      	cmp	r2, #0
 800b944:	bf14      	ite	ne
 800b946:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b94a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b94e:	2700      	movs	r7, #0
 800b950:	fbb1 fcf6 	udiv	ip, r1, r6
 800b954:	4638      	mov	r0, r7
 800b956:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b95a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b95e:	2b09      	cmp	r3, #9
 800b960:	d817      	bhi.n	800b992 <_strtol_l.isra.0+0x9a>
 800b962:	461c      	mov	r4, r3
 800b964:	42a6      	cmp	r6, r4
 800b966:	dd23      	ble.n	800b9b0 <_strtol_l.isra.0+0xb8>
 800b968:	1c7b      	adds	r3, r7, #1
 800b96a:	d007      	beq.n	800b97c <_strtol_l.isra.0+0x84>
 800b96c:	4584      	cmp	ip, r0
 800b96e:	d31c      	bcc.n	800b9aa <_strtol_l.isra.0+0xb2>
 800b970:	d101      	bne.n	800b976 <_strtol_l.isra.0+0x7e>
 800b972:	45a6      	cmp	lr, r4
 800b974:	db19      	blt.n	800b9aa <_strtol_l.isra.0+0xb2>
 800b976:	fb00 4006 	mla	r0, r0, r6, r4
 800b97a:	2701      	movs	r7, #1
 800b97c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b980:	e7eb      	b.n	800b95a <_strtol_l.isra.0+0x62>
 800b982:	462f      	mov	r7, r5
 800b984:	e7bf      	b.n	800b906 <_strtol_l.isra.0+0xe>
 800b986:	2c2b      	cmp	r4, #43	; 0x2b
 800b988:	bf04      	itt	eq
 800b98a:	1cbd      	addeq	r5, r7, #2
 800b98c:	787c      	ldrbeq	r4, [r7, #1]
 800b98e:	461a      	mov	r2, r3
 800b990:	e7c9      	b.n	800b926 <_strtol_l.isra.0+0x2e>
 800b992:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b996:	2b19      	cmp	r3, #25
 800b998:	d801      	bhi.n	800b99e <_strtol_l.isra.0+0xa6>
 800b99a:	3c37      	subs	r4, #55	; 0x37
 800b99c:	e7e2      	b.n	800b964 <_strtol_l.isra.0+0x6c>
 800b99e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b9a2:	2b19      	cmp	r3, #25
 800b9a4:	d804      	bhi.n	800b9b0 <_strtol_l.isra.0+0xb8>
 800b9a6:	3c57      	subs	r4, #87	; 0x57
 800b9a8:	e7dc      	b.n	800b964 <_strtol_l.isra.0+0x6c>
 800b9aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b9ae:	e7e5      	b.n	800b97c <_strtol_l.isra.0+0x84>
 800b9b0:	1c7b      	adds	r3, r7, #1
 800b9b2:	d108      	bne.n	800b9c6 <_strtol_l.isra.0+0xce>
 800b9b4:	2322      	movs	r3, #34	; 0x22
 800b9b6:	f8c8 3000 	str.w	r3, [r8]
 800b9ba:	4608      	mov	r0, r1
 800b9bc:	f1ba 0f00 	cmp.w	sl, #0
 800b9c0:	d107      	bne.n	800b9d2 <_strtol_l.isra.0+0xda>
 800b9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c6:	b102      	cbz	r2, 800b9ca <_strtol_l.isra.0+0xd2>
 800b9c8:	4240      	negs	r0, r0
 800b9ca:	f1ba 0f00 	cmp.w	sl, #0
 800b9ce:	d0f8      	beq.n	800b9c2 <_strtol_l.isra.0+0xca>
 800b9d0:	b10f      	cbz	r7, 800b9d6 <_strtol_l.isra.0+0xde>
 800b9d2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800b9d6:	f8ca 9000 	str.w	r9, [sl]
 800b9da:	e7f2      	b.n	800b9c2 <_strtol_l.isra.0+0xca>
 800b9dc:	2430      	movs	r4, #48	; 0x30
 800b9de:	2e00      	cmp	r6, #0
 800b9e0:	d1af      	bne.n	800b942 <_strtol_l.isra.0+0x4a>
 800b9e2:	2608      	movs	r6, #8
 800b9e4:	e7ad      	b.n	800b942 <_strtol_l.isra.0+0x4a>
 800b9e6:	2c30      	cmp	r4, #48	; 0x30
 800b9e8:	d0a3      	beq.n	800b932 <_strtol_l.isra.0+0x3a>
 800b9ea:	260a      	movs	r6, #10
 800b9ec:	e7a9      	b.n	800b942 <_strtol_l.isra.0+0x4a>
	...

0800b9f0 <_strtol_r>:
 800b9f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9f2:	4c06      	ldr	r4, [pc, #24]	; (800ba0c <_strtol_r+0x1c>)
 800b9f4:	4d06      	ldr	r5, [pc, #24]	; (800ba10 <_strtol_r+0x20>)
 800b9f6:	6824      	ldr	r4, [r4, #0]
 800b9f8:	6a24      	ldr	r4, [r4, #32]
 800b9fa:	2c00      	cmp	r4, #0
 800b9fc:	bf08      	it	eq
 800b9fe:	462c      	moveq	r4, r5
 800ba00:	9400      	str	r4, [sp, #0]
 800ba02:	f7ff ff79 	bl	800b8f8 <_strtol_l.isra.0>
 800ba06:	b003      	add	sp, #12
 800ba08:	bd30      	pop	{r4, r5, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20000098 	.word	0x20000098
 800ba10:	200000fc 	.word	0x200000fc

0800ba14 <__swbuf_r>:
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	460e      	mov	r6, r1
 800ba18:	4614      	mov	r4, r2
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	b118      	cbz	r0, 800ba26 <__swbuf_r+0x12>
 800ba1e:	6983      	ldr	r3, [r0, #24]
 800ba20:	b90b      	cbnz	r3, 800ba26 <__swbuf_r+0x12>
 800ba22:	f000 fff9 	bl	800ca18 <__sinit>
 800ba26:	4b21      	ldr	r3, [pc, #132]	; (800baac <__swbuf_r+0x98>)
 800ba28:	429c      	cmp	r4, r3
 800ba2a:	d12a      	bne.n	800ba82 <__swbuf_r+0x6e>
 800ba2c:	686c      	ldr	r4, [r5, #4]
 800ba2e:	69a3      	ldr	r3, [r4, #24]
 800ba30:	60a3      	str	r3, [r4, #8]
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	071a      	lsls	r2, r3, #28
 800ba36:	d52e      	bpl.n	800ba96 <__swbuf_r+0x82>
 800ba38:	6923      	ldr	r3, [r4, #16]
 800ba3a:	b363      	cbz	r3, 800ba96 <__swbuf_r+0x82>
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	6820      	ldr	r0, [r4, #0]
 800ba40:	1ac0      	subs	r0, r0, r3
 800ba42:	6963      	ldr	r3, [r4, #20]
 800ba44:	b2f6      	uxtb	r6, r6
 800ba46:	4283      	cmp	r3, r0
 800ba48:	4637      	mov	r7, r6
 800ba4a:	dc04      	bgt.n	800ba56 <__swbuf_r+0x42>
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f000 ff78 	bl	800c944 <_fflush_r>
 800ba54:	bb28      	cbnz	r0, 800baa2 <__swbuf_r+0x8e>
 800ba56:	68a3      	ldr	r3, [r4, #8]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	60a3      	str	r3, [r4, #8]
 800ba5c:	6823      	ldr	r3, [r4, #0]
 800ba5e:	1c5a      	adds	r2, r3, #1
 800ba60:	6022      	str	r2, [r4, #0]
 800ba62:	701e      	strb	r6, [r3, #0]
 800ba64:	6963      	ldr	r3, [r4, #20]
 800ba66:	3001      	adds	r0, #1
 800ba68:	4283      	cmp	r3, r0
 800ba6a:	d004      	beq.n	800ba76 <__swbuf_r+0x62>
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	07db      	lsls	r3, r3, #31
 800ba70:	d519      	bpl.n	800baa6 <__swbuf_r+0x92>
 800ba72:	2e0a      	cmp	r6, #10
 800ba74:	d117      	bne.n	800baa6 <__swbuf_r+0x92>
 800ba76:	4621      	mov	r1, r4
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f000 ff63 	bl	800c944 <_fflush_r>
 800ba7e:	b190      	cbz	r0, 800baa6 <__swbuf_r+0x92>
 800ba80:	e00f      	b.n	800baa2 <__swbuf_r+0x8e>
 800ba82:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <__swbuf_r+0x9c>)
 800ba84:	429c      	cmp	r4, r3
 800ba86:	d101      	bne.n	800ba8c <__swbuf_r+0x78>
 800ba88:	68ac      	ldr	r4, [r5, #8]
 800ba8a:	e7d0      	b.n	800ba2e <__swbuf_r+0x1a>
 800ba8c:	4b09      	ldr	r3, [pc, #36]	; (800bab4 <__swbuf_r+0xa0>)
 800ba8e:	429c      	cmp	r4, r3
 800ba90:	bf08      	it	eq
 800ba92:	68ec      	ldreq	r4, [r5, #12]
 800ba94:	e7cb      	b.n	800ba2e <__swbuf_r+0x1a>
 800ba96:	4621      	mov	r1, r4
 800ba98:	4628      	mov	r0, r5
 800ba9a:	f000 f81b 	bl	800bad4 <__swsetup_r>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d0cc      	beq.n	800ba3c <__swbuf_r+0x28>
 800baa2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800baa6:	4638      	mov	r0, r7
 800baa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baaa:	bf00      	nop
 800baac:	0800ea80 	.word	0x0800ea80
 800bab0:	0800eaa0 	.word	0x0800eaa0
 800bab4:	0800ea60 	.word	0x0800ea60

0800bab8 <__ascii_wctomb>:
 800bab8:	b149      	cbz	r1, 800bace <__ascii_wctomb+0x16>
 800baba:	2aff      	cmp	r2, #255	; 0xff
 800babc:	bf85      	ittet	hi
 800babe:	238a      	movhi	r3, #138	; 0x8a
 800bac0:	6003      	strhi	r3, [r0, #0]
 800bac2:	700a      	strbls	r2, [r1, #0]
 800bac4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bac8:	bf98      	it	ls
 800baca:	2001      	movls	r0, #1
 800bacc:	4770      	bx	lr
 800bace:	4608      	mov	r0, r1
 800bad0:	4770      	bx	lr
	...

0800bad4 <__swsetup_r>:
 800bad4:	4b32      	ldr	r3, [pc, #200]	; (800bba0 <__swsetup_r+0xcc>)
 800bad6:	b570      	push	{r4, r5, r6, lr}
 800bad8:	681d      	ldr	r5, [r3, #0]
 800bada:	4606      	mov	r6, r0
 800badc:	460c      	mov	r4, r1
 800bade:	b125      	cbz	r5, 800baea <__swsetup_r+0x16>
 800bae0:	69ab      	ldr	r3, [r5, #24]
 800bae2:	b913      	cbnz	r3, 800baea <__swsetup_r+0x16>
 800bae4:	4628      	mov	r0, r5
 800bae6:	f000 ff97 	bl	800ca18 <__sinit>
 800baea:	4b2e      	ldr	r3, [pc, #184]	; (800bba4 <__swsetup_r+0xd0>)
 800baec:	429c      	cmp	r4, r3
 800baee:	d10f      	bne.n	800bb10 <__swsetup_r+0x3c>
 800baf0:	686c      	ldr	r4, [r5, #4]
 800baf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	0715      	lsls	r5, r2, #28
 800bafa:	d42c      	bmi.n	800bb56 <__swsetup_r+0x82>
 800bafc:	06d0      	lsls	r0, r2, #27
 800bafe:	d411      	bmi.n	800bb24 <__swsetup_r+0x50>
 800bb00:	2209      	movs	r2, #9
 800bb02:	6032      	str	r2, [r6, #0]
 800bb04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb08:	81a3      	strh	r3, [r4, #12]
 800bb0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb0e:	e03e      	b.n	800bb8e <__swsetup_r+0xba>
 800bb10:	4b25      	ldr	r3, [pc, #148]	; (800bba8 <__swsetup_r+0xd4>)
 800bb12:	429c      	cmp	r4, r3
 800bb14:	d101      	bne.n	800bb1a <__swsetup_r+0x46>
 800bb16:	68ac      	ldr	r4, [r5, #8]
 800bb18:	e7eb      	b.n	800baf2 <__swsetup_r+0x1e>
 800bb1a:	4b24      	ldr	r3, [pc, #144]	; (800bbac <__swsetup_r+0xd8>)
 800bb1c:	429c      	cmp	r4, r3
 800bb1e:	bf08      	it	eq
 800bb20:	68ec      	ldreq	r4, [r5, #12]
 800bb22:	e7e6      	b.n	800baf2 <__swsetup_r+0x1e>
 800bb24:	0751      	lsls	r1, r2, #29
 800bb26:	d512      	bpl.n	800bb4e <__swsetup_r+0x7a>
 800bb28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb2a:	b141      	cbz	r1, 800bb3e <__swsetup_r+0x6a>
 800bb2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb30:	4299      	cmp	r1, r3
 800bb32:	d002      	beq.n	800bb3a <__swsetup_r+0x66>
 800bb34:	4630      	mov	r0, r6
 800bb36:	f001 ffa9 	bl	800da8c <_free_r>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	2300      	movs	r3, #0
 800bb48:	6063      	str	r3, [r4, #4]
 800bb4a:	6923      	ldr	r3, [r4, #16]
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	f043 0308 	orr.w	r3, r3, #8
 800bb54:	81a3      	strh	r3, [r4, #12]
 800bb56:	6923      	ldr	r3, [r4, #16]
 800bb58:	b94b      	cbnz	r3, 800bb6e <__swsetup_r+0x9a>
 800bb5a:	89a3      	ldrh	r3, [r4, #12]
 800bb5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb64:	d003      	beq.n	800bb6e <__swsetup_r+0x9a>
 800bb66:	4621      	mov	r1, r4
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f001 fb39 	bl	800d1e0 <__smakebuf_r>
 800bb6e:	89a2      	ldrh	r2, [r4, #12]
 800bb70:	f012 0301 	ands.w	r3, r2, #1
 800bb74:	d00c      	beq.n	800bb90 <__swsetup_r+0xbc>
 800bb76:	2300      	movs	r3, #0
 800bb78:	60a3      	str	r3, [r4, #8]
 800bb7a:	6963      	ldr	r3, [r4, #20]
 800bb7c:	425b      	negs	r3, r3
 800bb7e:	61a3      	str	r3, [r4, #24]
 800bb80:	6923      	ldr	r3, [r4, #16]
 800bb82:	b953      	cbnz	r3, 800bb9a <__swsetup_r+0xc6>
 800bb84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bb8c:	d1ba      	bne.n	800bb04 <__swsetup_r+0x30>
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}
 800bb90:	0792      	lsls	r2, r2, #30
 800bb92:	bf58      	it	pl
 800bb94:	6963      	ldrpl	r3, [r4, #20]
 800bb96:	60a3      	str	r3, [r4, #8]
 800bb98:	e7f2      	b.n	800bb80 <__swsetup_r+0xac>
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	e7f7      	b.n	800bb8e <__swsetup_r+0xba>
 800bb9e:	bf00      	nop
 800bba0:	20000098 	.word	0x20000098
 800bba4:	0800ea80 	.word	0x0800ea80
 800bba8:	0800eaa0 	.word	0x0800eaa0
 800bbac:	0800ea60 	.word	0x0800ea60

0800bbb0 <quorem>:
 800bbb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb4:	6903      	ldr	r3, [r0, #16]
 800bbb6:	690c      	ldr	r4, [r1, #16]
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	4680      	mov	r8, r0
 800bbbc:	f2c0 8082 	blt.w	800bcc4 <quorem+0x114>
 800bbc0:	3c01      	subs	r4, #1
 800bbc2:	f101 0714 	add.w	r7, r1, #20
 800bbc6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bbca:	f100 0614 	add.w	r6, r0, #20
 800bbce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bbd2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bbd6:	eb06 030c 	add.w	r3, r6, ip
 800bbda:	3501      	adds	r5, #1
 800bbdc:	eb07 090c 	add.w	r9, r7, ip
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	fbb0 f5f5 	udiv	r5, r0, r5
 800bbe6:	b395      	cbz	r5, 800bc4e <quorem+0x9e>
 800bbe8:	f04f 0a00 	mov.w	sl, #0
 800bbec:	4638      	mov	r0, r7
 800bbee:	46b6      	mov	lr, r6
 800bbf0:	46d3      	mov	fp, sl
 800bbf2:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbf6:	b293      	uxth	r3, r2
 800bbf8:	fb05 a303 	mla	r3, r5, r3, sl
 800bbfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	ebab 0303 	sub.w	r3, fp, r3
 800bc06:	0c12      	lsrs	r2, r2, #16
 800bc08:	f8de b000 	ldr.w	fp, [lr]
 800bc0c:	fb05 a202 	mla	r2, r5, r2, sl
 800bc10:	fa13 f38b 	uxtah	r3, r3, fp
 800bc14:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bc18:	fa1f fb82 	uxth.w	fp, r2
 800bc1c:	f8de 2000 	ldr.w	r2, [lr]
 800bc20:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bc24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc2e:	4581      	cmp	r9, r0
 800bc30:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bc34:	f84e 3b04 	str.w	r3, [lr], #4
 800bc38:	d2db      	bcs.n	800bbf2 <quorem+0x42>
 800bc3a:	f856 300c 	ldr.w	r3, [r6, ip]
 800bc3e:	b933      	cbnz	r3, 800bc4e <quorem+0x9e>
 800bc40:	9b01      	ldr	r3, [sp, #4]
 800bc42:	3b04      	subs	r3, #4
 800bc44:	429e      	cmp	r6, r3
 800bc46:	461a      	mov	r2, r3
 800bc48:	d330      	bcc.n	800bcac <quorem+0xfc>
 800bc4a:	f8c8 4010 	str.w	r4, [r8, #16]
 800bc4e:	4640      	mov	r0, r8
 800bc50:	f001 fd62 	bl	800d718 <__mcmp>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	db25      	blt.n	800bca4 <quorem+0xf4>
 800bc58:	3501      	adds	r5, #1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f04f 0c00 	mov.w	ip, #0
 800bc60:	f857 2b04 	ldr.w	r2, [r7], #4
 800bc64:	f8d0 e000 	ldr.w	lr, [r0]
 800bc68:	b293      	uxth	r3, r2
 800bc6a:	ebac 0303 	sub.w	r3, ip, r3
 800bc6e:	0c12      	lsrs	r2, r2, #16
 800bc70:	fa13 f38e 	uxtah	r3, r3, lr
 800bc74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc82:	45b9      	cmp	r9, r7
 800bc84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc88:	f840 3b04 	str.w	r3, [r0], #4
 800bc8c:	d2e8      	bcs.n	800bc60 <quorem+0xb0>
 800bc8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bc92:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bc96:	b92a      	cbnz	r2, 800bca4 <quorem+0xf4>
 800bc98:	3b04      	subs	r3, #4
 800bc9a:	429e      	cmp	r6, r3
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	d30b      	bcc.n	800bcb8 <quorem+0x108>
 800bca0:	f8c8 4010 	str.w	r4, [r8, #16]
 800bca4:	4628      	mov	r0, r5
 800bca6:	b003      	add	sp, #12
 800bca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcac:	6812      	ldr	r2, [r2, #0]
 800bcae:	3b04      	subs	r3, #4
 800bcb0:	2a00      	cmp	r2, #0
 800bcb2:	d1ca      	bne.n	800bc4a <quorem+0x9a>
 800bcb4:	3c01      	subs	r4, #1
 800bcb6:	e7c5      	b.n	800bc44 <quorem+0x94>
 800bcb8:	6812      	ldr	r2, [r2, #0]
 800bcba:	3b04      	subs	r3, #4
 800bcbc:	2a00      	cmp	r2, #0
 800bcbe:	d1ef      	bne.n	800bca0 <quorem+0xf0>
 800bcc0:	3c01      	subs	r4, #1
 800bcc2:	e7ea      	b.n	800bc9a <quorem+0xea>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	e7ee      	b.n	800bca6 <quorem+0xf6>

0800bcc8 <_dtoa_r>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	ec57 6b10 	vmov	r6, r7, d0
 800bcd0:	b097      	sub	sp, #92	; 0x5c
 800bcd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcd4:	9106      	str	r1, [sp, #24]
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	920b      	str	r2, [sp, #44]	; 0x2c
 800bcda:	9312      	str	r3, [sp, #72]	; 0x48
 800bcdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bce0:	e9cd 6700 	strd	r6, r7, [sp]
 800bce4:	b93d      	cbnz	r5, 800bcf6 <_dtoa_r+0x2e>
 800bce6:	2010      	movs	r0, #16
 800bce8:	f001 faba 	bl	800d260 <malloc>
 800bcec:	6260      	str	r0, [r4, #36]	; 0x24
 800bcee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcf2:	6005      	str	r5, [r0, #0]
 800bcf4:	60c5      	str	r5, [r0, #12]
 800bcf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcf8:	6819      	ldr	r1, [r3, #0]
 800bcfa:	b151      	cbz	r1, 800bd12 <_dtoa_r+0x4a>
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	604a      	str	r2, [r1, #4]
 800bd00:	2301      	movs	r3, #1
 800bd02:	4093      	lsls	r3, r2
 800bd04:	608b      	str	r3, [r1, #8]
 800bd06:	4620      	mov	r0, r4
 800bd08:	f001 fae6 	bl	800d2d8 <_Bfree>
 800bd0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd0e:	2200      	movs	r2, #0
 800bd10:	601a      	str	r2, [r3, #0]
 800bd12:	1e3b      	subs	r3, r7, #0
 800bd14:	bfbb      	ittet	lt
 800bd16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd1a:	9301      	strlt	r3, [sp, #4]
 800bd1c:	2300      	movge	r3, #0
 800bd1e:	2201      	movlt	r2, #1
 800bd20:	bfac      	ite	ge
 800bd22:	f8c8 3000 	strge.w	r3, [r8]
 800bd26:	f8c8 2000 	strlt.w	r2, [r8]
 800bd2a:	4baf      	ldr	r3, [pc, #700]	; (800bfe8 <_dtoa_r+0x320>)
 800bd2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bd30:	ea33 0308 	bics.w	r3, r3, r8
 800bd34:	d114      	bne.n	800bd60 <_dtoa_r+0x98>
 800bd36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd38:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd3c:	6013      	str	r3, [r2, #0]
 800bd3e:	9b00      	ldr	r3, [sp, #0]
 800bd40:	b923      	cbnz	r3, 800bd4c <_dtoa_r+0x84>
 800bd42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bd46:	2800      	cmp	r0, #0
 800bd48:	f000 8542 	beq.w	800c7d0 <_dtoa_r+0xb08>
 800bd4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bffc <_dtoa_r+0x334>
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 8544 	beq.w	800c7e0 <_dtoa_r+0xb18>
 800bd58:	f10b 0303 	add.w	r3, fp, #3
 800bd5c:	f000 bd3e 	b.w	800c7dc <_dtoa_r+0xb14>
 800bd60:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd64:	2200      	movs	r2, #0
 800bd66:	2300      	movs	r3, #0
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	f7f4 feb4 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd70:	4681      	mov	r9, r0
 800bd72:	b168      	cbz	r0, 800bd90 <_dtoa_r+0xc8>
 800bd74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd76:	2301      	movs	r3, #1
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 8524 	beq.w	800c7ca <_dtoa_r+0xb02>
 800bd82:	4b9a      	ldr	r3, [pc, #616]	; (800bfec <_dtoa_r+0x324>)
 800bd84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd86:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800bd8a:	6013      	str	r3, [r2, #0]
 800bd8c:	f000 bd28 	b.w	800c7e0 <_dtoa_r+0xb18>
 800bd90:	aa14      	add	r2, sp, #80	; 0x50
 800bd92:	a915      	add	r1, sp, #84	; 0x54
 800bd94:	ec47 6b10 	vmov	d0, r6, r7
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f001 fdab 	bl	800d8f4 <__d2b>
 800bd9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bda2:	9004      	str	r0, [sp, #16]
 800bda4:	2d00      	cmp	r5, #0
 800bda6:	d07c      	beq.n	800bea2 <_dtoa_r+0x1da>
 800bda8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bdb0:	46b2      	mov	sl, r6
 800bdb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bdb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bdba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	4b8b      	ldr	r3, [pc, #556]	; (800bff0 <_dtoa_r+0x328>)
 800bdc2:	4650      	mov	r0, sl
 800bdc4:	4659      	mov	r1, fp
 800bdc6:	f7f4 fa67 	bl	8000298 <__aeabi_dsub>
 800bdca:	a381      	add	r3, pc, #516	; (adr r3, 800bfd0 <_dtoa_r+0x308>)
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	f7f4 fc1a 	bl	8000608 <__aeabi_dmul>
 800bdd4:	a380      	add	r3, pc, #512	; (adr r3, 800bfd8 <_dtoa_r+0x310>)
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	f7f4 fa5f 	bl	800029c <__adddf3>
 800bdde:	4606      	mov	r6, r0
 800bde0:	4628      	mov	r0, r5
 800bde2:	460f      	mov	r7, r1
 800bde4:	f7f4 fba6 	bl	8000534 <__aeabi_i2d>
 800bde8:	a37d      	add	r3, pc, #500	; (adr r3, 800bfe0 <_dtoa_r+0x318>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 fc0b 	bl	8000608 <__aeabi_dmul>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	4639      	mov	r1, r7
 800bdfa:	f7f4 fa4f 	bl	800029c <__adddf3>
 800bdfe:	4606      	mov	r6, r0
 800be00:	460f      	mov	r7, r1
 800be02:	f7f4 feb1 	bl	8000b68 <__aeabi_d2iz>
 800be06:	2200      	movs	r2, #0
 800be08:	4682      	mov	sl, r0
 800be0a:	2300      	movs	r3, #0
 800be0c:	4630      	mov	r0, r6
 800be0e:	4639      	mov	r1, r7
 800be10:	f7f4 fe6c 	bl	8000aec <__aeabi_dcmplt>
 800be14:	b148      	cbz	r0, 800be2a <_dtoa_r+0x162>
 800be16:	4650      	mov	r0, sl
 800be18:	f7f4 fb8c 	bl	8000534 <__aeabi_i2d>
 800be1c:	4632      	mov	r2, r6
 800be1e:	463b      	mov	r3, r7
 800be20:	f7f4 fe5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800be24:	b908      	cbnz	r0, 800be2a <_dtoa_r+0x162>
 800be26:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800be2a:	f1ba 0f16 	cmp.w	sl, #22
 800be2e:	d859      	bhi.n	800bee4 <_dtoa_r+0x21c>
 800be30:	4970      	ldr	r1, [pc, #448]	; (800bff4 <_dtoa_r+0x32c>)
 800be32:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800be36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be3e:	f7f4 fe73 	bl	8000b28 <__aeabi_dcmpgt>
 800be42:	2800      	cmp	r0, #0
 800be44:	d050      	beq.n	800bee8 <_dtoa_r+0x220>
 800be46:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800be4a:	2300      	movs	r3, #0
 800be4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800be4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be50:	1b5d      	subs	r5, r3, r5
 800be52:	f1b5 0801 	subs.w	r8, r5, #1
 800be56:	bf49      	itett	mi
 800be58:	f1c5 0301 	rsbmi	r3, r5, #1
 800be5c:	2300      	movpl	r3, #0
 800be5e:	9305      	strmi	r3, [sp, #20]
 800be60:	f04f 0800 	movmi.w	r8, #0
 800be64:	bf58      	it	pl
 800be66:	9305      	strpl	r3, [sp, #20]
 800be68:	f1ba 0f00 	cmp.w	sl, #0
 800be6c:	db3e      	blt.n	800beec <_dtoa_r+0x224>
 800be6e:	2300      	movs	r3, #0
 800be70:	44d0      	add	r8, sl
 800be72:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800be76:	9307      	str	r3, [sp, #28]
 800be78:	9b06      	ldr	r3, [sp, #24]
 800be7a:	2b09      	cmp	r3, #9
 800be7c:	f200 8090 	bhi.w	800bfa0 <_dtoa_r+0x2d8>
 800be80:	2b05      	cmp	r3, #5
 800be82:	bfc4      	itt	gt
 800be84:	3b04      	subgt	r3, #4
 800be86:	9306      	strgt	r3, [sp, #24]
 800be88:	9b06      	ldr	r3, [sp, #24]
 800be8a:	f1a3 0302 	sub.w	r3, r3, #2
 800be8e:	bfcc      	ite	gt
 800be90:	2500      	movgt	r5, #0
 800be92:	2501      	movle	r5, #1
 800be94:	2b03      	cmp	r3, #3
 800be96:	f200 808f 	bhi.w	800bfb8 <_dtoa_r+0x2f0>
 800be9a:	e8df f003 	tbb	[pc, r3]
 800be9e:	7f7d      	.short	0x7f7d
 800bea0:	7131      	.short	0x7131
 800bea2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bea6:	441d      	add	r5, r3
 800bea8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800beac:	2820      	cmp	r0, #32
 800beae:	dd13      	ble.n	800bed8 <_dtoa_r+0x210>
 800beb0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800beb4:	9b00      	ldr	r3, [sp, #0]
 800beb6:	fa08 f800 	lsl.w	r8, r8, r0
 800beba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bebe:	fa23 f000 	lsr.w	r0, r3, r0
 800bec2:	ea48 0000 	orr.w	r0, r8, r0
 800bec6:	f7f4 fb25 	bl	8000514 <__aeabi_ui2d>
 800beca:	2301      	movs	r3, #1
 800becc:	4682      	mov	sl, r0
 800bece:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bed2:	3d01      	subs	r5, #1
 800bed4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bed6:	e772      	b.n	800bdbe <_dtoa_r+0xf6>
 800bed8:	9b00      	ldr	r3, [sp, #0]
 800beda:	f1c0 0020 	rsb	r0, r0, #32
 800bede:	fa03 f000 	lsl.w	r0, r3, r0
 800bee2:	e7f0      	b.n	800bec6 <_dtoa_r+0x1fe>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e7b1      	b.n	800be4c <_dtoa_r+0x184>
 800bee8:	900f      	str	r0, [sp, #60]	; 0x3c
 800beea:	e7b0      	b.n	800be4e <_dtoa_r+0x186>
 800beec:	9b05      	ldr	r3, [sp, #20]
 800beee:	eba3 030a 	sub.w	r3, r3, sl
 800bef2:	9305      	str	r3, [sp, #20]
 800bef4:	f1ca 0300 	rsb	r3, sl, #0
 800bef8:	9307      	str	r3, [sp, #28]
 800befa:	2300      	movs	r3, #0
 800befc:	930e      	str	r3, [sp, #56]	; 0x38
 800befe:	e7bb      	b.n	800be78 <_dtoa_r+0x1b0>
 800bf00:	2301      	movs	r3, #1
 800bf02:	930a      	str	r3, [sp, #40]	; 0x28
 800bf04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	dd59      	ble.n	800bfbe <_dtoa_r+0x2f6>
 800bf0a:	9302      	str	r3, [sp, #8]
 800bf0c:	4699      	mov	r9, r3
 800bf0e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf10:	2200      	movs	r2, #0
 800bf12:	6072      	str	r2, [r6, #4]
 800bf14:	2204      	movs	r2, #4
 800bf16:	f102 0014 	add.w	r0, r2, #20
 800bf1a:	4298      	cmp	r0, r3
 800bf1c:	6871      	ldr	r1, [r6, #4]
 800bf1e:	d953      	bls.n	800bfc8 <_dtoa_r+0x300>
 800bf20:	4620      	mov	r0, r4
 800bf22:	f001 f9a5 	bl	800d270 <_Balloc>
 800bf26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf28:	6030      	str	r0, [r6, #0]
 800bf2a:	f1b9 0f0e 	cmp.w	r9, #14
 800bf2e:	f8d3 b000 	ldr.w	fp, [r3]
 800bf32:	f200 80e6 	bhi.w	800c102 <_dtoa_r+0x43a>
 800bf36:	2d00      	cmp	r5, #0
 800bf38:	f000 80e3 	beq.w	800c102 <_dtoa_r+0x43a>
 800bf3c:	ed9d 7b00 	vldr	d7, [sp]
 800bf40:	f1ba 0f00 	cmp.w	sl, #0
 800bf44:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bf48:	dd74      	ble.n	800c034 <_dtoa_r+0x36c>
 800bf4a:	4a2a      	ldr	r2, [pc, #168]	; (800bff4 <_dtoa_r+0x32c>)
 800bf4c:	f00a 030f 	and.w	r3, sl, #15
 800bf50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf54:	ed93 7b00 	vldr	d7, [r3]
 800bf58:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bf5c:	06f0      	lsls	r0, r6, #27
 800bf5e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bf62:	d565      	bpl.n	800c030 <_dtoa_r+0x368>
 800bf64:	4b24      	ldr	r3, [pc, #144]	; (800bff8 <_dtoa_r+0x330>)
 800bf66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf6e:	f7f4 fc75 	bl	800085c <__aeabi_ddiv>
 800bf72:	e9cd 0100 	strd	r0, r1, [sp]
 800bf76:	f006 060f 	and.w	r6, r6, #15
 800bf7a:	2503      	movs	r5, #3
 800bf7c:	4f1e      	ldr	r7, [pc, #120]	; (800bff8 <_dtoa_r+0x330>)
 800bf7e:	e04c      	b.n	800c01a <_dtoa_r+0x352>
 800bf80:	2301      	movs	r3, #1
 800bf82:	930a      	str	r3, [sp, #40]	; 0x28
 800bf84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf86:	4453      	add	r3, sl
 800bf88:	f103 0901 	add.w	r9, r3, #1
 800bf8c:	9302      	str	r3, [sp, #8]
 800bf8e:	464b      	mov	r3, r9
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	bfb8      	it	lt
 800bf94:	2301      	movlt	r3, #1
 800bf96:	e7ba      	b.n	800bf0e <_dtoa_r+0x246>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	e7b2      	b.n	800bf02 <_dtoa_r+0x23a>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	e7f0      	b.n	800bf82 <_dtoa_r+0x2ba>
 800bfa0:	2501      	movs	r5, #1
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	9306      	str	r3, [sp, #24]
 800bfa6:	950a      	str	r5, [sp, #40]	; 0x28
 800bfa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfac:	9302      	str	r3, [sp, #8]
 800bfae:	4699      	mov	r9, r3
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2312      	movs	r3, #18
 800bfb4:	920b      	str	r2, [sp, #44]	; 0x2c
 800bfb6:	e7aa      	b.n	800bf0e <_dtoa_r+0x246>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	930a      	str	r3, [sp, #40]	; 0x28
 800bfbc:	e7f4      	b.n	800bfa8 <_dtoa_r+0x2e0>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	9302      	str	r3, [sp, #8]
 800bfc2:	4699      	mov	r9, r3
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	e7f5      	b.n	800bfb4 <_dtoa_r+0x2ec>
 800bfc8:	3101      	adds	r1, #1
 800bfca:	6071      	str	r1, [r6, #4]
 800bfcc:	0052      	lsls	r2, r2, #1
 800bfce:	e7a2      	b.n	800bf16 <_dtoa_r+0x24e>
 800bfd0:	636f4361 	.word	0x636f4361
 800bfd4:	3fd287a7 	.word	0x3fd287a7
 800bfd8:	8b60c8b3 	.word	0x8b60c8b3
 800bfdc:	3fc68a28 	.word	0x3fc68a28
 800bfe0:	509f79fb 	.word	0x509f79fb
 800bfe4:	3fd34413 	.word	0x3fd34413
 800bfe8:	7ff00000 	.word	0x7ff00000
 800bfec:	0800e8d3 	.word	0x0800e8d3
 800bff0:	3ff80000 	.word	0x3ff80000
 800bff4:	0800eae8 	.word	0x0800eae8
 800bff8:	0800eac0 	.word	0x0800eac0
 800bffc:	0800ea5a 	.word	0x0800ea5a
 800c000:	07f1      	lsls	r1, r6, #31
 800c002:	d508      	bpl.n	800c016 <_dtoa_r+0x34e>
 800c004:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c00c:	f7f4 fafc 	bl	8000608 <__aeabi_dmul>
 800c010:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c014:	3501      	adds	r5, #1
 800c016:	1076      	asrs	r6, r6, #1
 800c018:	3708      	adds	r7, #8
 800c01a:	2e00      	cmp	r6, #0
 800c01c:	d1f0      	bne.n	800c000 <_dtoa_r+0x338>
 800c01e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c022:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c026:	f7f4 fc19 	bl	800085c <__aeabi_ddiv>
 800c02a:	e9cd 0100 	strd	r0, r1, [sp]
 800c02e:	e01a      	b.n	800c066 <_dtoa_r+0x39e>
 800c030:	2502      	movs	r5, #2
 800c032:	e7a3      	b.n	800bf7c <_dtoa_r+0x2b4>
 800c034:	f000 80a0 	beq.w	800c178 <_dtoa_r+0x4b0>
 800c038:	f1ca 0600 	rsb	r6, sl, #0
 800c03c:	4b9f      	ldr	r3, [pc, #636]	; (800c2bc <_dtoa_r+0x5f4>)
 800c03e:	4fa0      	ldr	r7, [pc, #640]	; (800c2c0 <_dtoa_r+0x5f8>)
 800c040:	f006 020f 	and.w	r2, r6, #15
 800c044:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c050:	f7f4 fada 	bl	8000608 <__aeabi_dmul>
 800c054:	e9cd 0100 	strd	r0, r1, [sp]
 800c058:	1136      	asrs	r6, r6, #4
 800c05a:	2300      	movs	r3, #0
 800c05c:	2502      	movs	r5, #2
 800c05e:	2e00      	cmp	r6, #0
 800c060:	d17f      	bne.n	800c162 <_dtoa_r+0x49a>
 800c062:	2b00      	cmp	r3, #0
 800c064:	d1e1      	bne.n	800c02a <_dtoa_r+0x362>
 800c066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 8087 	beq.w	800c17c <_dtoa_r+0x4b4>
 800c06e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c072:	2200      	movs	r2, #0
 800c074:	4b93      	ldr	r3, [pc, #588]	; (800c2c4 <_dtoa_r+0x5fc>)
 800c076:	4630      	mov	r0, r6
 800c078:	4639      	mov	r1, r7
 800c07a:	f7f4 fd37 	bl	8000aec <__aeabi_dcmplt>
 800c07e:	2800      	cmp	r0, #0
 800c080:	d07c      	beq.n	800c17c <_dtoa_r+0x4b4>
 800c082:	f1b9 0f00 	cmp.w	r9, #0
 800c086:	d079      	beq.n	800c17c <_dtoa_r+0x4b4>
 800c088:	9b02      	ldr	r3, [sp, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	dd35      	ble.n	800c0fa <_dtoa_r+0x432>
 800c08e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c092:	9308      	str	r3, [sp, #32]
 800c094:	4639      	mov	r1, r7
 800c096:	2200      	movs	r2, #0
 800c098:	4b8b      	ldr	r3, [pc, #556]	; (800c2c8 <_dtoa_r+0x600>)
 800c09a:	4630      	mov	r0, r6
 800c09c:	f7f4 fab4 	bl	8000608 <__aeabi_dmul>
 800c0a0:	e9cd 0100 	strd	r0, r1, [sp]
 800c0a4:	9f02      	ldr	r7, [sp, #8]
 800c0a6:	3501      	adds	r5, #1
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f7f4 fa43 	bl	8000534 <__aeabi_i2d>
 800c0ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0b2:	f7f4 faa9 	bl	8000608 <__aeabi_dmul>
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	4b84      	ldr	r3, [pc, #528]	; (800c2cc <_dtoa_r+0x604>)
 800c0ba:	f7f4 f8ef 	bl	800029c <__adddf3>
 800c0be:	4605      	mov	r5, r0
 800c0c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c0c4:	2f00      	cmp	r7, #0
 800c0c6:	d15d      	bne.n	800c184 <_dtoa_r+0x4bc>
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	4b81      	ldr	r3, [pc, #516]	; (800c2d0 <_dtoa_r+0x608>)
 800c0cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0d0:	f7f4 f8e2 	bl	8000298 <__aeabi_dsub>
 800c0d4:	462a      	mov	r2, r5
 800c0d6:	4633      	mov	r3, r6
 800c0d8:	e9cd 0100 	strd	r0, r1, [sp]
 800c0dc:	f7f4 fd24 	bl	8000b28 <__aeabi_dcmpgt>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	f040 8288 	bne.w	800c5f6 <_dtoa_r+0x92e>
 800c0e6:	462a      	mov	r2, r5
 800c0e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c0ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0f0:	f7f4 fcfc 	bl	8000aec <__aeabi_dcmplt>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	f040 827c 	bne.w	800c5f2 <_dtoa_r+0x92a>
 800c0fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0fe:	e9cd 2300 	strd	r2, r3, [sp]
 800c102:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c104:	2b00      	cmp	r3, #0
 800c106:	f2c0 8150 	blt.w	800c3aa <_dtoa_r+0x6e2>
 800c10a:	f1ba 0f0e 	cmp.w	sl, #14
 800c10e:	f300 814c 	bgt.w	800c3aa <_dtoa_r+0x6e2>
 800c112:	4b6a      	ldr	r3, [pc, #424]	; (800c2bc <_dtoa_r+0x5f4>)
 800c114:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c118:	ed93 7b00 	vldr	d7, [r3]
 800c11c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c11e:	2b00      	cmp	r3, #0
 800c120:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c124:	f280 80d8 	bge.w	800c2d8 <_dtoa_r+0x610>
 800c128:	f1b9 0f00 	cmp.w	r9, #0
 800c12c:	f300 80d4 	bgt.w	800c2d8 <_dtoa_r+0x610>
 800c130:	f040 825e 	bne.w	800c5f0 <_dtoa_r+0x928>
 800c134:	2200      	movs	r2, #0
 800c136:	4b66      	ldr	r3, [pc, #408]	; (800c2d0 <_dtoa_r+0x608>)
 800c138:	ec51 0b17 	vmov	r0, r1, d7
 800c13c:	f7f4 fa64 	bl	8000608 <__aeabi_dmul>
 800c140:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c144:	f7f4 fce6 	bl	8000b14 <__aeabi_dcmpge>
 800c148:	464f      	mov	r7, r9
 800c14a:	464e      	mov	r6, r9
 800c14c:	2800      	cmp	r0, #0
 800c14e:	f040 8234 	bne.w	800c5ba <_dtoa_r+0x8f2>
 800c152:	2331      	movs	r3, #49	; 0x31
 800c154:	f10b 0501 	add.w	r5, fp, #1
 800c158:	f88b 3000 	strb.w	r3, [fp]
 800c15c:	f10a 0a01 	add.w	sl, sl, #1
 800c160:	e22f      	b.n	800c5c2 <_dtoa_r+0x8fa>
 800c162:	07f2      	lsls	r2, r6, #31
 800c164:	d505      	bpl.n	800c172 <_dtoa_r+0x4aa>
 800c166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c16a:	f7f4 fa4d 	bl	8000608 <__aeabi_dmul>
 800c16e:	3501      	adds	r5, #1
 800c170:	2301      	movs	r3, #1
 800c172:	1076      	asrs	r6, r6, #1
 800c174:	3708      	adds	r7, #8
 800c176:	e772      	b.n	800c05e <_dtoa_r+0x396>
 800c178:	2502      	movs	r5, #2
 800c17a:	e774      	b.n	800c066 <_dtoa_r+0x39e>
 800c17c:	f8cd a020 	str.w	sl, [sp, #32]
 800c180:	464f      	mov	r7, r9
 800c182:	e791      	b.n	800c0a8 <_dtoa_r+0x3e0>
 800c184:	4b4d      	ldr	r3, [pc, #308]	; (800c2bc <_dtoa_r+0x5f4>)
 800c186:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c18a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c190:	2b00      	cmp	r3, #0
 800c192:	d047      	beq.n	800c224 <_dtoa_r+0x55c>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	2000      	movs	r0, #0
 800c19a:	494e      	ldr	r1, [pc, #312]	; (800c2d4 <_dtoa_r+0x60c>)
 800c19c:	f7f4 fb5e 	bl	800085c <__aeabi_ddiv>
 800c1a0:	462a      	mov	r2, r5
 800c1a2:	4633      	mov	r3, r6
 800c1a4:	f7f4 f878 	bl	8000298 <__aeabi_dsub>
 800c1a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c1ac:	465d      	mov	r5, fp
 800c1ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1b2:	f7f4 fcd9 	bl	8000b68 <__aeabi_d2iz>
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	f7f4 f9bc 	bl	8000534 <__aeabi_i2d>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	460b      	mov	r3, r1
 800c1c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1c4:	f7f4 f868 	bl	8000298 <__aeabi_dsub>
 800c1c8:	3630      	adds	r6, #48	; 0x30
 800c1ca:	f805 6b01 	strb.w	r6, [r5], #1
 800c1ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c1d2:	e9cd 0100 	strd	r0, r1, [sp]
 800c1d6:	f7f4 fc89 	bl	8000aec <__aeabi_dcmplt>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d163      	bne.n	800c2a6 <_dtoa_r+0x5de>
 800c1de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	4937      	ldr	r1, [pc, #220]	; (800c2c4 <_dtoa_r+0x5fc>)
 800c1e6:	f7f4 f857 	bl	8000298 <__aeabi_dsub>
 800c1ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c1ee:	f7f4 fc7d 	bl	8000aec <__aeabi_dcmplt>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	f040 80b7 	bne.w	800c366 <_dtoa_r+0x69e>
 800c1f8:	eba5 030b 	sub.w	r3, r5, fp
 800c1fc:	429f      	cmp	r7, r3
 800c1fe:	f77f af7c 	ble.w	800c0fa <_dtoa_r+0x432>
 800c202:	2200      	movs	r2, #0
 800c204:	4b30      	ldr	r3, [pc, #192]	; (800c2c8 <_dtoa_r+0x600>)
 800c206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c20a:	f7f4 f9fd 	bl	8000608 <__aeabi_dmul>
 800c20e:	2200      	movs	r2, #0
 800c210:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c214:	4b2c      	ldr	r3, [pc, #176]	; (800c2c8 <_dtoa_r+0x600>)
 800c216:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c21a:	f7f4 f9f5 	bl	8000608 <__aeabi_dmul>
 800c21e:	e9cd 0100 	strd	r0, r1, [sp]
 800c222:	e7c4      	b.n	800c1ae <_dtoa_r+0x4e6>
 800c224:	462a      	mov	r2, r5
 800c226:	4633      	mov	r3, r6
 800c228:	f7f4 f9ee 	bl	8000608 <__aeabi_dmul>
 800c22c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c230:	eb0b 0507 	add.w	r5, fp, r7
 800c234:	465e      	mov	r6, fp
 800c236:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c23a:	f7f4 fc95 	bl	8000b68 <__aeabi_d2iz>
 800c23e:	4607      	mov	r7, r0
 800c240:	f7f4 f978 	bl	8000534 <__aeabi_i2d>
 800c244:	3730      	adds	r7, #48	; 0x30
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c24e:	f7f4 f823 	bl	8000298 <__aeabi_dsub>
 800c252:	f806 7b01 	strb.w	r7, [r6], #1
 800c256:	42ae      	cmp	r6, r5
 800c258:	e9cd 0100 	strd	r0, r1, [sp]
 800c25c:	f04f 0200 	mov.w	r2, #0
 800c260:	d126      	bne.n	800c2b0 <_dtoa_r+0x5e8>
 800c262:	4b1c      	ldr	r3, [pc, #112]	; (800c2d4 <_dtoa_r+0x60c>)
 800c264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c268:	f7f4 f818 	bl	800029c <__adddf3>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c274:	f7f4 fc58 	bl	8000b28 <__aeabi_dcmpgt>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d174      	bne.n	800c366 <_dtoa_r+0x69e>
 800c27c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c280:	2000      	movs	r0, #0
 800c282:	4914      	ldr	r1, [pc, #80]	; (800c2d4 <_dtoa_r+0x60c>)
 800c284:	f7f4 f808 	bl	8000298 <__aeabi_dsub>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c290:	f7f4 fc2c 	bl	8000aec <__aeabi_dcmplt>
 800c294:	2800      	cmp	r0, #0
 800c296:	f43f af30 	beq.w	800c0fa <_dtoa_r+0x432>
 800c29a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c29e:	2b30      	cmp	r3, #48	; 0x30
 800c2a0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c2a4:	d002      	beq.n	800c2ac <_dtoa_r+0x5e4>
 800c2a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c2aa:	e04a      	b.n	800c342 <_dtoa_r+0x67a>
 800c2ac:	4615      	mov	r5, r2
 800c2ae:	e7f4      	b.n	800c29a <_dtoa_r+0x5d2>
 800c2b0:	4b05      	ldr	r3, [pc, #20]	; (800c2c8 <_dtoa_r+0x600>)
 800c2b2:	f7f4 f9a9 	bl	8000608 <__aeabi_dmul>
 800c2b6:	e9cd 0100 	strd	r0, r1, [sp]
 800c2ba:	e7bc      	b.n	800c236 <_dtoa_r+0x56e>
 800c2bc:	0800eae8 	.word	0x0800eae8
 800c2c0:	0800eac0 	.word	0x0800eac0
 800c2c4:	3ff00000 	.word	0x3ff00000
 800c2c8:	40240000 	.word	0x40240000
 800c2cc:	401c0000 	.word	0x401c0000
 800c2d0:	40140000 	.word	0x40140000
 800c2d4:	3fe00000 	.word	0x3fe00000
 800c2d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c2dc:	465d      	mov	r5, fp
 800c2de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	4639      	mov	r1, r7
 800c2e6:	f7f4 fab9 	bl	800085c <__aeabi_ddiv>
 800c2ea:	f7f4 fc3d 	bl	8000b68 <__aeabi_d2iz>
 800c2ee:	4680      	mov	r8, r0
 800c2f0:	f7f4 f920 	bl	8000534 <__aeabi_i2d>
 800c2f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2f8:	f7f4 f986 	bl	8000608 <__aeabi_dmul>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4630      	mov	r0, r6
 800c302:	4639      	mov	r1, r7
 800c304:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c308:	f7f3 ffc6 	bl	8000298 <__aeabi_dsub>
 800c30c:	f805 6b01 	strb.w	r6, [r5], #1
 800c310:	eba5 060b 	sub.w	r6, r5, fp
 800c314:	45b1      	cmp	r9, r6
 800c316:	4602      	mov	r2, r0
 800c318:	460b      	mov	r3, r1
 800c31a:	d139      	bne.n	800c390 <_dtoa_r+0x6c8>
 800c31c:	f7f3 ffbe 	bl	800029c <__adddf3>
 800c320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c324:	4606      	mov	r6, r0
 800c326:	460f      	mov	r7, r1
 800c328:	f7f4 fbfe 	bl	8000b28 <__aeabi_dcmpgt>
 800c32c:	b9c8      	cbnz	r0, 800c362 <_dtoa_r+0x69a>
 800c32e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c332:	4630      	mov	r0, r6
 800c334:	4639      	mov	r1, r7
 800c336:	f7f4 fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800c33a:	b110      	cbz	r0, 800c342 <_dtoa_r+0x67a>
 800c33c:	f018 0f01 	tst.w	r8, #1
 800c340:	d10f      	bne.n	800c362 <_dtoa_r+0x69a>
 800c342:	9904      	ldr	r1, [sp, #16]
 800c344:	4620      	mov	r0, r4
 800c346:	f000 ffc7 	bl	800d2d8 <_Bfree>
 800c34a:	2300      	movs	r3, #0
 800c34c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c34e:	702b      	strb	r3, [r5, #0]
 800c350:	f10a 0301 	add.w	r3, sl, #1
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 8241 	beq.w	800c7e0 <_dtoa_r+0xb18>
 800c35e:	601d      	str	r5, [r3, #0]
 800c360:	e23e      	b.n	800c7e0 <_dtoa_r+0xb18>
 800c362:	f8cd a020 	str.w	sl, [sp, #32]
 800c366:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c36a:	2a39      	cmp	r2, #57	; 0x39
 800c36c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c370:	d108      	bne.n	800c384 <_dtoa_r+0x6bc>
 800c372:	459b      	cmp	fp, r3
 800c374:	d10a      	bne.n	800c38c <_dtoa_r+0x6c4>
 800c376:	9b08      	ldr	r3, [sp, #32]
 800c378:	3301      	adds	r3, #1
 800c37a:	9308      	str	r3, [sp, #32]
 800c37c:	2330      	movs	r3, #48	; 0x30
 800c37e:	f88b 3000 	strb.w	r3, [fp]
 800c382:	465b      	mov	r3, fp
 800c384:	781a      	ldrb	r2, [r3, #0]
 800c386:	3201      	adds	r2, #1
 800c388:	701a      	strb	r2, [r3, #0]
 800c38a:	e78c      	b.n	800c2a6 <_dtoa_r+0x5de>
 800c38c:	461d      	mov	r5, r3
 800c38e:	e7ea      	b.n	800c366 <_dtoa_r+0x69e>
 800c390:	2200      	movs	r2, #0
 800c392:	4b9b      	ldr	r3, [pc, #620]	; (800c600 <_dtoa_r+0x938>)
 800c394:	f7f4 f938 	bl	8000608 <__aeabi_dmul>
 800c398:	2200      	movs	r2, #0
 800c39a:	2300      	movs	r3, #0
 800c39c:	4606      	mov	r6, r0
 800c39e:	460f      	mov	r7, r1
 800c3a0:	f7f4 fb9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d09a      	beq.n	800c2de <_dtoa_r+0x616>
 800c3a8:	e7cb      	b.n	800c342 <_dtoa_r+0x67a>
 800c3aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3ac:	2a00      	cmp	r2, #0
 800c3ae:	f000 808b 	beq.w	800c4c8 <_dtoa_r+0x800>
 800c3b2:	9a06      	ldr	r2, [sp, #24]
 800c3b4:	2a01      	cmp	r2, #1
 800c3b6:	dc6e      	bgt.n	800c496 <_dtoa_r+0x7ce>
 800c3b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3ba:	2a00      	cmp	r2, #0
 800c3bc:	d067      	beq.n	800c48e <_dtoa_r+0x7c6>
 800c3be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3c2:	9f07      	ldr	r7, [sp, #28]
 800c3c4:	9d05      	ldr	r5, [sp, #20]
 800c3c6:	9a05      	ldr	r2, [sp, #20]
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	441a      	add	r2, r3
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	9205      	str	r2, [sp, #20]
 800c3d0:	4498      	add	r8, r3
 800c3d2:	f001 f85f 	bl	800d494 <__i2b>
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	2d00      	cmp	r5, #0
 800c3da:	dd0c      	ble.n	800c3f6 <_dtoa_r+0x72e>
 800c3dc:	f1b8 0f00 	cmp.w	r8, #0
 800c3e0:	dd09      	ble.n	800c3f6 <_dtoa_r+0x72e>
 800c3e2:	4545      	cmp	r5, r8
 800c3e4:	9a05      	ldr	r2, [sp, #20]
 800c3e6:	462b      	mov	r3, r5
 800c3e8:	bfa8      	it	ge
 800c3ea:	4643      	movge	r3, r8
 800c3ec:	1ad2      	subs	r2, r2, r3
 800c3ee:	9205      	str	r2, [sp, #20]
 800c3f0:	1aed      	subs	r5, r5, r3
 800c3f2:	eba8 0803 	sub.w	r8, r8, r3
 800c3f6:	9b07      	ldr	r3, [sp, #28]
 800c3f8:	b1eb      	cbz	r3, 800c436 <_dtoa_r+0x76e>
 800c3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d067      	beq.n	800c4d0 <_dtoa_r+0x808>
 800c400:	b18f      	cbz	r7, 800c426 <_dtoa_r+0x75e>
 800c402:	4631      	mov	r1, r6
 800c404:	463a      	mov	r2, r7
 800c406:	4620      	mov	r0, r4
 800c408:	f001 f8e4 	bl	800d5d4 <__pow5mult>
 800c40c:	9a04      	ldr	r2, [sp, #16]
 800c40e:	4601      	mov	r1, r0
 800c410:	4606      	mov	r6, r0
 800c412:	4620      	mov	r0, r4
 800c414:	f001 f847 	bl	800d4a6 <__multiply>
 800c418:	9904      	ldr	r1, [sp, #16]
 800c41a:	9008      	str	r0, [sp, #32]
 800c41c:	4620      	mov	r0, r4
 800c41e:	f000 ff5b 	bl	800d2d8 <_Bfree>
 800c422:	9b08      	ldr	r3, [sp, #32]
 800c424:	9304      	str	r3, [sp, #16]
 800c426:	9b07      	ldr	r3, [sp, #28]
 800c428:	1bda      	subs	r2, r3, r7
 800c42a:	d004      	beq.n	800c436 <_dtoa_r+0x76e>
 800c42c:	9904      	ldr	r1, [sp, #16]
 800c42e:	4620      	mov	r0, r4
 800c430:	f001 f8d0 	bl	800d5d4 <__pow5mult>
 800c434:	9004      	str	r0, [sp, #16]
 800c436:	2101      	movs	r1, #1
 800c438:	4620      	mov	r0, r4
 800c43a:	f001 f82b 	bl	800d494 <__i2b>
 800c43e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c440:	4607      	mov	r7, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 81d0 	beq.w	800c7e8 <_dtoa_r+0xb20>
 800c448:	461a      	mov	r2, r3
 800c44a:	4601      	mov	r1, r0
 800c44c:	4620      	mov	r0, r4
 800c44e:	f001 f8c1 	bl	800d5d4 <__pow5mult>
 800c452:	9b06      	ldr	r3, [sp, #24]
 800c454:	2b01      	cmp	r3, #1
 800c456:	4607      	mov	r7, r0
 800c458:	dc40      	bgt.n	800c4dc <_dtoa_r+0x814>
 800c45a:	9b00      	ldr	r3, [sp, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d139      	bne.n	800c4d4 <_dtoa_r+0x80c>
 800c460:	9b01      	ldr	r3, [sp, #4]
 800c462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c466:	2b00      	cmp	r3, #0
 800c468:	d136      	bne.n	800c4d8 <_dtoa_r+0x810>
 800c46a:	9b01      	ldr	r3, [sp, #4]
 800c46c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c470:	0d1b      	lsrs	r3, r3, #20
 800c472:	051b      	lsls	r3, r3, #20
 800c474:	b12b      	cbz	r3, 800c482 <_dtoa_r+0x7ba>
 800c476:	9b05      	ldr	r3, [sp, #20]
 800c478:	3301      	adds	r3, #1
 800c47a:	9305      	str	r3, [sp, #20]
 800c47c:	f108 0801 	add.w	r8, r8, #1
 800c480:	2301      	movs	r3, #1
 800c482:	9307      	str	r3, [sp, #28]
 800c484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c486:	2b00      	cmp	r3, #0
 800c488:	d12a      	bne.n	800c4e0 <_dtoa_r+0x818>
 800c48a:	2001      	movs	r0, #1
 800c48c:	e030      	b.n	800c4f0 <_dtoa_r+0x828>
 800c48e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c490:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c494:	e795      	b.n	800c3c2 <_dtoa_r+0x6fa>
 800c496:	9b07      	ldr	r3, [sp, #28]
 800c498:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c49c:	42bb      	cmp	r3, r7
 800c49e:	bfbf      	itttt	lt
 800c4a0:	9b07      	ldrlt	r3, [sp, #28]
 800c4a2:	9707      	strlt	r7, [sp, #28]
 800c4a4:	1afa      	sublt	r2, r7, r3
 800c4a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c4a8:	bfbb      	ittet	lt
 800c4aa:	189b      	addlt	r3, r3, r2
 800c4ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c4ae:	1bdf      	subge	r7, r3, r7
 800c4b0:	2700      	movlt	r7, #0
 800c4b2:	f1b9 0f00 	cmp.w	r9, #0
 800c4b6:	bfb5      	itete	lt
 800c4b8:	9b05      	ldrlt	r3, [sp, #20]
 800c4ba:	9d05      	ldrge	r5, [sp, #20]
 800c4bc:	eba3 0509 	sublt.w	r5, r3, r9
 800c4c0:	464b      	movge	r3, r9
 800c4c2:	bfb8      	it	lt
 800c4c4:	2300      	movlt	r3, #0
 800c4c6:	e77e      	b.n	800c3c6 <_dtoa_r+0x6fe>
 800c4c8:	9f07      	ldr	r7, [sp, #28]
 800c4ca:	9d05      	ldr	r5, [sp, #20]
 800c4cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c4ce:	e783      	b.n	800c3d8 <_dtoa_r+0x710>
 800c4d0:	9a07      	ldr	r2, [sp, #28]
 800c4d2:	e7ab      	b.n	800c42c <_dtoa_r+0x764>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	e7d4      	b.n	800c482 <_dtoa_r+0x7ba>
 800c4d8:	9b00      	ldr	r3, [sp, #0]
 800c4da:	e7d2      	b.n	800c482 <_dtoa_r+0x7ba>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	9307      	str	r3, [sp, #28]
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c4e6:	6918      	ldr	r0, [r3, #16]
 800c4e8:	f000 ff86 	bl	800d3f8 <__hi0bits>
 800c4ec:	f1c0 0020 	rsb	r0, r0, #32
 800c4f0:	4440      	add	r0, r8
 800c4f2:	f010 001f 	ands.w	r0, r0, #31
 800c4f6:	d047      	beq.n	800c588 <_dtoa_r+0x8c0>
 800c4f8:	f1c0 0320 	rsb	r3, r0, #32
 800c4fc:	2b04      	cmp	r3, #4
 800c4fe:	dd3b      	ble.n	800c578 <_dtoa_r+0x8b0>
 800c500:	9b05      	ldr	r3, [sp, #20]
 800c502:	f1c0 001c 	rsb	r0, r0, #28
 800c506:	4403      	add	r3, r0
 800c508:	9305      	str	r3, [sp, #20]
 800c50a:	4405      	add	r5, r0
 800c50c:	4480      	add	r8, r0
 800c50e:	9b05      	ldr	r3, [sp, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	dd05      	ble.n	800c520 <_dtoa_r+0x858>
 800c514:	461a      	mov	r2, r3
 800c516:	9904      	ldr	r1, [sp, #16]
 800c518:	4620      	mov	r0, r4
 800c51a:	f001 f8a9 	bl	800d670 <__lshift>
 800c51e:	9004      	str	r0, [sp, #16]
 800c520:	f1b8 0f00 	cmp.w	r8, #0
 800c524:	dd05      	ble.n	800c532 <_dtoa_r+0x86a>
 800c526:	4639      	mov	r1, r7
 800c528:	4642      	mov	r2, r8
 800c52a:	4620      	mov	r0, r4
 800c52c:	f001 f8a0 	bl	800d670 <__lshift>
 800c530:	4607      	mov	r7, r0
 800c532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c534:	b353      	cbz	r3, 800c58c <_dtoa_r+0x8c4>
 800c536:	4639      	mov	r1, r7
 800c538:	9804      	ldr	r0, [sp, #16]
 800c53a:	f001 f8ed 	bl	800d718 <__mcmp>
 800c53e:	2800      	cmp	r0, #0
 800c540:	da24      	bge.n	800c58c <_dtoa_r+0x8c4>
 800c542:	2300      	movs	r3, #0
 800c544:	220a      	movs	r2, #10
 800c546:	9904      	ldr	r1, [sp, #16]
 800c548:	4620      	mov	r0, r4
 800c54a:	f000 fedc 	bl	800d306 <__multadd>
 800c54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c550:	9004      	str	r0, [sp, #16]
 800c552:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 814d 	beq.w	800c7f6 <_dtoa_r+0xb2e>
 800c55c:	2300      	movs	r3, #0
 800c55e:	4631      	mov	r1, r6
 800c560:	220a      	movs	r2, #10
 800c562:	4620      	mov	r0, r4
 800c564:	f000 fecf 	bl	800d306 <__multadd>
 800c568:	9b02      	ldr	r3, [sp, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	4606      	mov	r6, r0
 800c56e:	dc4f      	bgt.n	800c610 <_dtoa_r+0x948>
 800c570:	9b06      	ldr	r3, [sp, #24]
 800c572:	2b02      	cmp	r3, #2
 800c574:	dd4c      	ble.n	800c610 <_dtoa_r+0x948>
 800c576:	e011      	b.n	800c59c <_dtoa_r+0x8d4>
 800c578:	d0c9      	beq.n	800c50e <_dtoa_r+0x846>
 800c57a:	9a05      	ldr	r2, [sp, #20]
 800c57c:	331c      	adds	r3, #28
 800c57e:	441a      	add	r2, r3
 800c580:	9205      	str	r2, [sp, #20]
 800c582:	441d      	add	r5, r3
 800c584:	4498      	add	r8, r3
 800c586:	e7c2      	b.n	800c50e <_dtoa_r+0x846>
 800c588:	4603      	mov	r3, r0
 800c58a:	e7f6      	b.n	800c57a <_dtoa_r+0x8b2>
 800c58c:	f1b9 0f00 	cmp.w	r9, #0
 800c590:	dc38      	bgt.n	800c604 <_dtoa_r+0x93c>
 800c592:	9b06      	ldr	r3, [sp, #24]
 800c594:	2b02      	cmp	r3, #2
 800c596:	dd35      	ble.n	800c604 <_dtoa_r+0x93c>
 800c598:	f8cd 9008 	str.w	r9, [sp, #8]
 800c59c:	9b02      	ldr	r3, [sp, #8]
 800c59e:	b963      	cbnz	r3, 800c5ba <_dtoa_r+0x8f2>
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	2205      	movs	r2, #5
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f000 feae 	bl	800d306 <__multadd>
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	4607      	mov	r7, r0
 800c5ae:	9804      	ldr	r0, [sp, #16]
 800c5b0:	f001 f8b2 	bl	800d718 <__mcmp>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	f73f adcc 	bgt.w	800c152 <_dtoa_r+0x48a>
 800c5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5bc:	465d      	mov	r5, fp
 800c5be:	ea6f 0a03 	mvn.w	sl, r3
 800c5c2:	f04f 0900 	mov.w	r9, #0
 800c5c6:	4639      	mov	r1, r7
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f000 fe85 	bl	800d2d8 <_Bfree>
 800c5ce:	2e00      	cmp	r6, #0
 800c5d0:	f43f aeb7 	beq.w	800c342 <_dtoa_r+0x67a>
 800c5d4:	f1b9 0f00 	cmp.w	r9, #0
 800c5d8:	d005      	beq.n	800c5e6 <_dtoa_r+0x91e>
 800c5da:	45b1      	cmp	r9, r6
 800c5dc:	d003      	beq.n	800c5e6 <_dtoa_r+0x91e>
 800c5de:	4649      	mov	r1, r9
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 fe79 	bl	800d2d8 <_Bfree>
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f000 fe75 	bl	800d2d8 <_Bfree>
 800c5ee:	e6a8      	b.n	800c342 <_dtoa_r+0x67a>
 800c5f0:	2700      	movs	r7, #0
 800c5f2:	463e      	mov	r6, r7
 800c5f4:	e7e1      	b.n	800c5ba <_dtoa_r+0x8f2>
 800c5f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c5fa:	463e      	mov	r6, r7
 800c5fc:	e5a9      	b.n	800c152 <_dtoa_r+0x48a>
 800c5fe:	bf00      	nop
 800c600:	40240000 	.word	0x40240000
 800c604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c606:	f8cd 9008 	str.w	r9, [sp, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f000 80fa 	beq.w	800c804 <_dtoa_r+0xb3c>
 800c610:	2d00      	cmp	r5, #0
 800c612:	dd05      	ble.n	800c620 <_dtoa_r+0x958>
 800c614:	4631      	mov	r1, r6
 800c616:	462a      	mov	r2, r5
 800c618:	4620      	mov	r0, r4
 800c61a:	f001 f829 	bl	800d670 <__lshift>
 800c61e:	4606      	mov	r6, r0
 800c620:	9b07      	ldr	r3, [sp, #28]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d04c      	beq.n	800c6c0 <_dtoa_r+0x9f8>
 800c626:	6871      	ldr	r1, [r6, #4]
 800c628:	4620      	mov	r0, r4
 800c62a:	f000 fe21 	bl	800d270 <_Balloc>
 800c62e:	6932      	ldr	r2, [r6, #16]
 800c630:	3202      	adds	r2, #2
 800c632:	4605      	mov	r5, r0
 800c634:	0092      	lsls	r2, r2, #2
 800c636:	f106 010c 	add.w	r1, r6, #12
 800c63a:	300c      	adds	r0, #12
 800c63c:	f7fd fc47 	bl	8009ece <memcpy>
 800c640:	2201      	movs	r2, #1
 800c642:	4629      	mov	r1, r5
 800c644:	4620      	mov	r0, r4
 800c646:	f001 f813 	bl	800d670 <__lshift>
 800c64a:	9b00      	ldr	r3, [sp, #0]
 800c64c:	f8cd b014 	str.w	fp, [sp, #20]
 800c650:	f003 0301 	and.w	r3, r3, #1
 800c654:	46b1      	mov	r9, r6
 800c656:	9307      	str	r3, [sp, #28]
 800c658:	4606      	mov	r6, r0
 800c65a:	4639      	mov	r1, r7
 800c65c:	9804      	ldr	r0, [sp, #16]
 800c65e:	f7ff faa7 	bl	800bbb0 <quorem>
 800c662:	4649      	mov	r1, r9
 800c664:	4605      	mov	r5, r0
 800c666:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c66a:	9804      	ldr	r0, [sp, #16]
 800c66c:	f001 f854 	bl	800d718 <__mcmp>
 800c670:	4632      	mov	r2, r6
 800c672:	9000      	str	r0, [sp, #0]
 800c674:	4639      	mov	r1, r7
 800c676:	4620      	mov	r0, r4
 800c678:	f001 f868 	bl	800d74c <__mdiff>
 800c67c:	68c3      	ldr	r3, [r0, #12]
 800c67e:	4602      	mov	r2, r0
 800c680:	bb03      	cbnz	r3, 800c6c4 <_dtoa_r+0x9fc>
 800c682:	4601      	mov	r1, r0
 800c684:	9008      	str	r0, [sp, #32]
 800c686:	9804      	ldr	r0, [sp, #16]
 800c688:	f001 f846 	bl	800d718 <__mcmp>
 800c68c:	9a08      	ldr	r2, [sp, #32]
 800c68e:	4603      	mov	r3, r0
 800c690:	4611      	mov	r1, r2
 800c692:	4620      	mov	r0, r4
 800c694:	9308      	str	r3, [sp, #32]
 800c696:	f000 fe1f 	bl	800d2d8 <_Bfree>
 800c69a:	9b08      	ldr	r3, [sp, #32]
 800c69c:	b9a3      	cbnz	r3, 800c6c8 <_dtoa_r+0xa00>
 800c69e:	9a06      	ldr	r2, [sp, #24]
 800c6a0:	b992      	cbnz	r2, 800c6c8 <_dtoa_r+0xa00>
 800c6a2:	9a07      	ldr	r2, [sp, #28]
 800c6a4:	b982      	cbnz	r2, 800c6c8 <_dtoa_r+0xa00>
 800c6a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c6aa:	d029      	beq.n	800c700 <_dtoa_r+0xa38>
 800c6ac:	9b00      	ldr	r3, [sp, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	dd01      	ble.n	800c6b6 <_dtoa_r+0x9ee>
 800c6b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c6b6:	9b05      	ldr	r3, [sp, #20]
 800c6b8:	1c5d      	adds	r5, r3, #1
 800c6ba:	f883 8000 	strb.w	r8, [r3]
 800c6be:	e782      	b.n	800c5c6 <_dtoa_r+0x8fe>
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	e7c2      	b.n	800c64a <_dtoa_r+0x982>
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e7e3      	b.n	800c690 <_dtoa_r+0x9c8>
 800c6c8:	9a00      	ldr	r2, [sp, #0]
 800c6ca:	2a00      	cmp	r2, #0
 800c6cc:	db04      	blt.n	800c6d8 <_dtoa_r+0xa10>
 800c6ce:	d125      	bne.n	800c71c <_dtoa_r+0xa54>
 800c6d0:	9a06      	ldr	r2, [sp, #24]
 800c6d2:	bb1a      	cbnz	r2, 800c71c <_dtoa_r+0xa54>
 800c6d4:	9a07      	ldr	r2, [sp, #28]
 800c6d6:	bb0a      	cbnz	r2, 800c71c <_dtoa_r+0xa54>
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	ddec      	ble.n	800c6b6 <_dtoa_r+0x9ee>
 800c6dc:	2201      	movs	r2, #1
 800c6de:	9904      	ldr	r1, [sp, #16]
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 ffc5 	bl	800d670 <__lshift>
 800c6e6:	4639      	mov	r1, r7
 800c6e8:	9004      	str	r0, [sp, #16]
 800c6ea:	f001 f815 	bl	800d718 <__mcmp>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	dc03      	bgt.n	800c6fa <_dtoa_r+0xa32>
 800c6f2:	d1e0      	bne.n	800c6b6 <_dtoa_r+0x9ee>
 800c6f4:	f018 0f01 	tst.w	r8, #1
 800c6f8:	d0dd      	beq.n	800c6b6 <_dtoa_r+0x9ee>
 800c6fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c6fe:	d1d8      	bne.n	800c6b2 <_dtoa_r+0x9ea>
 800c700:	9b05      	ldr	r3, [sp, #20]
 800c702:	9a05      	ldr	r2, [sp, #20]
 800c704:	1c5d      	adds	r5, r3, #1
 800c706:	2339      	movs	r3, #57	; 0x39
 800c708:	7013      	strb	r3, [r2, #0]
 800c70a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c70e:	2b39      	cmp	r3, #57	; 0x39
 800c710:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c714:	d04f      	beq.n	800c7b6 <_dtoa_r+0xaee>
 800c716:	3301      	adds	r3, #1
 800c718:	7013      	strb	r3, [r2, #0]
 800c71a:	e754      	b.n	800c5c6 <_dtoa_r+0x8fe>
 800c71c:	9a05      	ldr	r2, [sp, #20]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f102 0501 	add.w	r5, r2, #1
 800c724:	dd06      	ble.n	800c734 <_dtoa_r+0xa6c>
 800c726:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c72a:	d0e9      	beq.n	800c700 <_dtoa_r+0xa38>
 800c72c:	f108 0801 	add.w	r8, r8, #1
 800c730:	9b05      	ldr	r3, [sp, #20]
 800c732:	e7c2      	b.n	800c6ba <_dtoa_r+0x9f2>
 800c734:	9a02      	ldr	r2, [sp, #8]
 800c736:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c73a:	eba5 030b 	sub.w	r3, r5, fp
 800c73e:	4293      	cmp	r3, r2
 800c740:	d021      	beq.n	800c786 <_dtoa_r+0xabe>
 800c742:	2300      	movs	r3, #0
 800c744:	220a      	movs	r2, #10
 800c746:	9904      	ldr	r1, [sp, #16]
 800c748:	4620      	mov	r0, r4
 800c74a:	f000 fddc 	bl	800d306 <__multadd>
 800c74e:	45b1      	cmp	r9, r6
 800c750:	9004      	str	r0, [sp, #16]
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	f04f 020a 	mov.w	r2, #10
 800c75a:	4649      	mov	r1, r9
 800c75c:	4620      	mov	r0, r4
 800c75e:	d105      	bne.n	800c76c <_dtoa_r+0xaa4>
 800c760:	f000 fdd1 	bl	800d306 <__multadd>
 800c764:	4681      	mov	r9, r0
 800c766:	4606      	mov	r6, r0
 800c768:	9505      	str	r5, [sp, #20]
 800c76a:	e776      	b.n	800c65a <_dtoa_r+0x992>
 800c76c:	f000 fdcb 	bl	800d306 <__multadd>
 800c770:	4631      	mov	r1, r6
 800c772:	4681      	mov	r9, r0
 800c774:	2300      	movs	r3, #0
 800c776:	220a      	movs	r2, #10
 800c778:	4620      	mov	r0, r4
 800c77a:	f000 fdc4 	bl	800d306 <__multadd>
 800c77e:	4606      	mov	r6, r0
 800c780:	e7f2      	b.n	800c768 <_dtoa_r+0xaa0>
 800c782:	f04f 0900 	mov.w	r9, #0
 800c786:	2201      	movs	r2, #1
 800c788:	9904      	ldr	r1, [sp, #16]
 800c78a:	4620      	mov	r0, r4
 800c78c:	f000 ff70 	bl	800d670 <__lshift>
 800c790:	4639      	mov	r1, r7
 800c792:	9004      	str	r0, [sp, #16]
 800c794:	f000 ffc0 	bl	800d718 <__mcmp>
 800c798:	2800      	cmp	r0, #0
 800c79a:	dcb6      	bgt.n	800c70a <_dtoa_r+0xa42>
 800c79c:	d102      	bne.n	800c7a4 <_dtoa_r+0xadc>
 800c79e:	f018 0f01 	tst.w	r8, #1
 800c7a2:	d1b2      	bne.n	800c70a <_dtoa_r+0xa42>
 800c7a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c7a8:	2b30      	cmp	r3, #48	; 0x30
 800c7aa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c7ae:	f47f af0a 	bne.w	800c5c6 <_dtoa_r+0x8fe>
 800c7b2:	4615      	mov	r5, r2
 800c7b4:	e7f6      	b.n	800c7a4 <_dtoa_r+0xadc>
 800c7b6:	4593      	cmp	fp, r2
 800c7b8:	d105      	bne.n	800c7c6 <_dtoa_r+0xafe>
 800c7ba:	2331      	movs	r3, #49	; 0x31
 800c7bc:	f10a 0a01 	add.w	sl, sl, #1
 800c7c0:	f88b 3000 	strb.w	r3, [fp]
 800c7c4:	e6ff      	b.n	800c5c6 <_dtoa_r+0x8fe>
 800c7c6:	4615      	mov	r5, r2
 800c7c8:	e79f      	b.n	800c70a <_dtoa_r+0xa42>
 800c7ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c830 <_dtoa_r+0xb68>
 800c7ce:	e007      	b.n	800c7e0 <_dtoa_r+0xb18>
 800c7d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c834 <_dtoa_r+0xb6c>
 800c7d6:	b11b      	cbz	r3, 800c7e0 <_dtoa_r+0xb18>
 800c7d8:	f10b 0308 	add.w	r3, fp, #8
 800c7dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7de:	6013      	str	r3, [r2, #0]
 800c7e0:	4658      	mov	r0, fp
 800c7e2:	b017      	add	sp, #92	; 0x5c
 800c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e8:	9b06      	ldr	r3, [sp, #24]
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	f77f ae35 	ble.w	800c45a <_dtoa_r+0x792>
 800c7f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7f2:	9307      	str	r3, [sp, #28]
 800c7f4:	e649      	b.n	800c48a <_dtoa_r+0x7c2>
 800c7f6:	9b02      	ldr	r3, [sp, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dc03      	bgt.n	800c804 <_dtoa_r+0xb3c>
 800c7fc:	9b06      	ldr	r3, [sp, #24]
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	f73f aecc 	bgt.w	800c59c <_dtoa_r+0x8d4>
 800c804:	465d      	mov	r5, fp
 800c806:	4639      	mov	r1, r7
 800c808:	9804      	ldr	r0, [sp, #16]
 800c80a:	f7ff f9d1 	bl	800bbb0 <quorem>
 800c80e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c812:	f805 8b01 	strb.w	r8, [r5], #1
 800c816:	9a02      	ldr	r2, [sp, #8]
 800c818:	eba5 030b 	sub.w	r3, r5, fp
 800c81c:	429a      	cmp	r2, r3
 800c81e:	ddb0      	ble.n	800c782 <_dtoa_r+0xaba>
 800c820:	2300      	movs	r3, #0
 800c822:	220a      	movs	r2, #10
 800c824:	9904      	ldr	r1, [sp, #16]
 800c826:	4620      	mov	r0, r4
 800c828:	f000 fd6d 	bl	800d306 <__multadd>
 800c82c:	9004      	str	r0, [sp, #16]
 800c82e:	e7ea      	b.n	800c806 <_dtoa_r+0xb3e>
 800c830:	0800e8d2 	.word	0x0800e8d2
 800c834:	0800ea51 	.word	0x0800ea51

0800c838 <__sflush_r>:
 800c838:	898a      	ldrh	r2, [r1, #12]
 800c83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c83e:	4605      	mov	r5, r0
 800c840:	0710      	lsls	r0, r2, #28
 800c842:	460c      	mov	r4, r1
 800c844:	d458      	bmi.n	800c8f8 <__sflush_r+0xc0>
 800c846:	684b      	ldr	r3, [r1, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	dc05      	bgt.n	800c858 <__sflush_r+0x20>
 800c84c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c84e:	2b00      	cmp	r3, #0
 800c850:	dc02      	bgt.n	800c858 <__sflush_r+0x20>
 800c852:	2000      	movs	r0, #0
 800c854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c85a:	2e00      	cmp	r6, #0
 800c85c:	d0f9      	beq.n	800c852 <__sflush_r+0x1a>
 800c85e:	2300      	movs	r3, #0
 800c860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c864:	682f      	ldr	r7, [r5, #0]
 800c866:	6a21      	ldr	r1, [r4, #32]
 800c868:	602b      	str	r3, [r5, #0]
 800c86a:	d032      	beq.n	800c8d2 <__sflush_r+0x9a>
 800c86c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c86e:	89a3      	ldrh	r3, [r4, #12]
 800c870:	075a      	lsls	r2, r3, #29
 800c872:	d505      	bpl.n	800c880 <__sflush_r+0x48>
 800c874:	6863      	ldr	r3, [r4, #4]
 800c876:	1ac0      	subs	r0, r0, r3
 800c878:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c87a:	b10b      	cbz	r3, 800c880 <__sflush_r+0x48>
 800c87c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c87e:	1ac0      	subs	r0, r0, r3
 800c880:	2300      	movs	r3, #0
 800c882:	4602      	mov	r2, r0
 800c884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c886:	6a21      	ldr	r1, [r4, #32]
 800c888:	4628      	mov	r0, r5
 800c88a:	47b0      	blx	r6
 800c88c:	1c43      	adds	r3, r0, #1
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	d106      	bne.n	800c8a0 <__sflush_r+0x68>
 800c892:	6829      	ldr	r1, [r5, #0]
 800c894:	291d      	cmp	r1, #29
 800c896:	d848      	bhi.n	800c92a <__sflush_r+0xf2>
 800c898:	4a29      	ldr	r2, [pc, #164]	; (800c940 <__sflush_r+0x108>)
 800c89a:	40ca      	lsrs	r2, r1
 800c89c:	07d6      	lsls	r6, r2, #31
 800c89e:	d544      	bpl.n	800c92a <__sflush_r+0xf2>
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	6062      	str	r2, [r4, #4]
 800c8a4:	04d9      	lsls	r1, r3, #19
 800c8a6:	6922      	ldr	r2, [r4, #16]
 800c8a8:	6022      	str	r2, [r4, #0]
 800c8aa:	d504      	bpl.n	800c8b6 <__sflush_r+0x7e>
 800c8ac:	1c42      	adds	r2, r0, #1
 800c8ae:	d101      	bne.n	800c8b4 <__sflush_r+0x7c>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	b903      	cbnz	r3, 800c8b6 <__sflush_r+0x7e>
 800c8b4:	6560      	str	r0, [r4, #84]	; 0x54
 800c8b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8b8:	602f      	str	r7, [r5, #0]
 800c8ba:	2900      	cmp	r1, #0
 800c8bc:	d0c9      	beq.n	800c852 <__sflush_r+0x1a>
 800c8be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8c2:	4299      	cmp	r1, r3
 800c8c4:	d002      	beq.n	800c8cc <__sflush_r+0x94>
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f001 f8e0 	bl	800da8c <_free_r>
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	6360      	str	r0, [r4, #52]	; 0x34
 800c8d0:	e7c0      	b.n	800c854 <__sflush_r+0x1c>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	47b0      	blx	r6
 800c8d8:	1c41      	adds	r1, r0, #1
 800c8da:	d1c8      	bne.n	800c86e <__sflush_r+0x36>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d0c5      	beq.n	800c86e <__sflush_r+0x36>
 800c8e2:	2b1d      	cmp	r3, #29
 800c8e4:	d001      	beq.n	800c8ea <__sflush_r+0xb2>
 800c8e6:	2b16      	cmp	r3, #22
 800c8e8:	d101      	bne.n	800c8ee <__sflush_r+0xb6>
 800c8ea:	602f      	str	r7, [r5, #0]
 800c8ec:	e7b1      	b.n	800c852 <__sflush_r+0x1a>
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8f4:	81a3      	strh	r3, [r4, #12]
 800c8f6:	e7ad      	b.n	800c854 <__sflush_r+0x1c>
 800c8f8:	690f      	ldr	r7, [r1, #16]
 800c8fa:	2f00      	cmp	r7, #0
 800c8fc:	d0a9      	beq.n	800c852 <__sflush_r+0x1a>
 800c8fe:	0793      	lsls	r3, r2, #30
 800c900:	680e      	ldr	r6, [r1, #0]
 800c902:	bf08      	it	eq
 800c904:	694b      	ldreq	r3, [r1, #20]
 800c906:	600f      	str	r7, [r1, #0]
 800c908:	bf18      	it	ne
 800c90a:	2300      	movne	r3, #0
 800c90c:	eba6 0807 	sub.w	r8, r6, r7
 800c910:	608b      	str	r3, [r1, #8]
 800c912:	f1b8 0f00 	cmp.w	r8, #0
 800c916:	dd9c      	ble.n	800c852 <__sflush_r+0x1a>
 800c918:	4643      	mov	r3, r8
 800c91a:	463a      	mov	r2, r7
 800c91c:	6a21      	ldr	r1, [r4, #32]
 800c91e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c920:	4628      	mov	r0, r5
 800c922:	47b0      	blx	r6
 800c924:	2800      	cmp	r0, #0
 800c926:	dc06      	bgt.n	800c936 <__sflush_r+0xfe>
 800c928:	89a3      	ldrh	r3, [r4, #12]
 800c92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c92e:	81a3      	strh	r3, [r4, #12]
 800c930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c934:	e78e      	b.n	800c854 <__sflush_r+0x1c>
 800c936:	4407      	add	r7, r0
 800c938:	eba8 0800 	sub.w	r8, r8, r0
 800c93c:	e7e9      	b.n	800c912 <__sflush_r+0xda>
 800c93e:	bf00      	nop
 800c940:	20400001 	.word	0x20400001

0800c944 <_fflush_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	690b      	ldr	r3, [r1, #16]
 800c948:	4605      	mov	r5, r0
 800c94a:	460c      	mov	r4, r1
 800c94c:	b1db      	cbz	r3, 800c986 <_fflush_r+0x42>
 800c94e:	b118      	cbz	r0, 800c958 <_fflush_r+0x14>
 800c950:	6983      	ldr	r3, [r0, #24]
 800c952:	b90b      	cbnz	r3, 800c958 <_fflush_r+0x14>
 800c954:	f000 f860 	bl	800ca18 <__sinit>
 800c958:	4b0c      	ldr	r3, [pc, #48]	; (800c98c <_fflush_r+0x48>)
 800c95a:	429c      	cmp	r4, r3
 800c95c:	d109      	bne.n	800c972 <_fflush_r+0x2e>
 800c95e:	686c      	ldr	r4, [r5, #4]
 800c960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c964:	b17b      	cbz	r3, 800c986 <_fflush_r+0x42>
 800c966:	4621      	mov	r1, r4
 800c968:	4628      	mov	r0, r5
 800c96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c96e:	f7ff bf63 	b.w	800c838 <__sflush_r>
 800c972:	4b07      	ldr	r3, [pc, #28]	; (800c990 <_fflush_r+0x4c>)
 800c974:	429c      	cmp	r4, r3
 800c976:	d101      	bne.n	800c97c <_fflush_r+0x38>
 800c978:	68ac      	ldr	r4, [r5, #8]
 800c97a:	e7f1      	b.n	800c960 <_fflush_r+0x1c>
 800c97c:	4b05      	ldr	r3, [pc, #20]	; (800c994 <_fflush_r+0x50>)
 800c97e:	429c      	cmp	r4, r3
 800c980:	bf08      	it	eq
 800c982:	68ec      	ldreq	r4, [r5, #12]
 800c984:	e7ec      	b.n	800c960 <_fflush_r+0x1c>
 800c986:	2000      	movs	r0, #0
 800c988:	bd38      	pop	{r3, r4, r5, pc}
 800c98a:	bf00      	nop
 800c98c:	0800ea80 	.word	0x0800ea80
 800c990:	0800eaa0 	.word	0x0800eaa0
 800c994:	0800ea60 	.word	0x0800ea60

0800c998 <std>:
 800c998:	2300      	movs	r3, #0
 800c99a:	b510      	push	{r4, lr}
 800c99c:	4604      	mov	r4, r0
 800c99e:	e9c0 3300 	strd	r3, r3, [r0]
 800c9a2:	6083      	str	r3, [r0, #8]
 800c9a4:	8181      	strh	r1, [r0, #12]
 800c9a6:	6643      	str	r3, [r0, #100]	; 0x64
 800c9a8:	81c2      	strh	r2, [r0, #14]
 800c9aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9ae:	6183      	str	r3, [r0, #24]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	2208      	movs	r2, #8
 800c9b4:	305c      	adds	r0, #92	; 0x5c
 800c9b6:	f7fd fa95 	bl	8009ee4 <memset>
 800c9ba:	4b05      	ldr	r3, [pc, #20]	; (800c9d0 <std+0x38>)
 800c9bc:	6263      	str	r3, [r4, #36]	; 0x24
 800c9be:	4b05      	ldr	r3, [pc, #20]	; (800c9d4 <std+0x3c>)
 800c9c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9c2:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <std+0x40>)
 800c9c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9c6:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <std+0x44>)
 800c9c8:	6224      	str	r4, [r4, #32]
 800c9ca:	6323      	str	r3, [r4, #48]	; 0x30
 800c9cc:	bd10      	pop	{r4, pc}
 800c9ce:	bf00      	nop
 800c9d0:	0800e121 	.word	0x0800e121
 800c9d4:	0800e143 	.word	0x0800e143
 800c9d8:	0800e17b 	.word	0x0800e17b
 800c9dc:	0800e19f 	.word	0x0800e19f

0800c9e0 <_cleanup_r>:
 800c9e0:	4901      	ldr	r1, [pc, #4]	; (800c9e8 <_cleanup_r+0x8>)
 800c9e2:	f000 b885 	b.w	800caf0 <_fwalk_reent>
 800c9e6:	bf00      	nop
 800c9e8:	0800c945 	.word	0x0800c945

0800c9ec <__sfmoreglue>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	1e4a      	subs	r2, r1, #1
 800c9f0:	2568      	movs	r5, #104	; 0x68
 800c9f2:	4355      	muls	r5, r2
 800c9f4:	460e      	mov	r6, r1
 800c9f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9fa:	f001 f895 	bl	800db28 <_malloc_r>
 800c9fe:	4604      	mov	r4, r0
 800ca00:	b140      	cbz	r0, 800ca14 <__sfmoreglue+0x28>
 800ca02:	2100      	movs	r1, #0
 800ca04:	e9c0 1600 	strd	r1, r6, [r0]
 800ca08:	300c      	adds	r0, #12
 800ca0a:	60a0      	str	r0, [r4, #8]
 800ca0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca10:	f7fd fa68 	bl	8009ee4 <memset>
 800ca14:	4620      	mov	r0, r4
 800ca16:	bd70      	pop	{r4, r5, r6, pc}

0800ca18 <__sinit>:
 800ca18:	6983      	ldr	r3, [r0, #24]
 800ca1a:	b510      	push	{r4, lr}
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	bb33      	cbnz	r3, 800ca6e <__sinit+0x56>
 800ca20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ca24:	6503      	str	r3, [r0, #80]	; 0x50
 800ca26:	4b12      	ldr	r3, [pc, #72]	; (800ca70 <__sinit+0x58>)
 800ca28:	4a12      	ldr	r2, [pc, #72]	; (800ca74 <__sinit+0x5c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	6282      	str	r2, [r0, #40]	; 0x28
 800ca2e:	4298      	cmp	r0, r3
 800ca30:	bf04      	itt	eq
 800ca32:	2301      	moveq	r3, #1
 800ca34:	6183      	streq	r3, [r0, #24]
 800ca36:	f000 f81f 	bl	800ca78 <__sfp>
 800ca3a:	6060      	str	r0, [r4, #4]
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f000 f81b 	bl	800ca78 <__sfp>
 800ca42:	60a0      	str	r0, [r4, #8]
 800ca44:	4620      	mov	r0, r4
 800ca46:	f000 f817 	bl	800ca78 <__sfp>
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	60e0      	str	r0, [r4, #12]
 800ca4e:	2104      	movs	r1, #4
 800ca50:	6860      	ldr	r0, [r4, #4]
 800ca52:	f7ff ffa1 	bl	800c998 <std>
 800ca56:	2201      	movs	r2, #1
 800ca58:	2109      	movs	r1, #9
 800ca5a:	68a0      	ldr	r0, [r4, #8]
 800ca5c:	f7ff ff9c 	bl	800c998 <std>
 800ca60:	2202      	movs	r2, #2
 800ca62:	2112      	movs	r1, #18
 800ca64:	68e0      	ldr	r0, [r4, #12]
 800ca66:	f7ff ff97 	bl	800c998 <std>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	61a3      	str	r3, [r4, #24]
 800ca6e:	bd10      	pop	{r4, pc}
 800ca70:	0800e8b8 	.word	0x0800e8b8
 800ca74:	0800c9e1 	.word	0x0800c9e1

0800ca78 <__sfp>:
 800ca78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7a:	4b1b      	ldr	r3, [pc, #108]	; (800cae8 <__sfp+0x70>)
 800ca7c:	681e      	ldr	r6, [r3, #0]
 800ca7e:	69b3      	ldr	r3, [r6, #24]
 800ca80:	4607      	mov	r7, r0
 800ca82:	b913      	cbnz	r3, 800ca8a <__sfp+0x12>
 800ca84:	4630      	mov	r0, r6
 800ca86:	f7ff ffc7 	bl	800ca18 <__sinit>
 800ca8a:	3648      	adds	r6, #72	; 0x48
 800ca8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca90:	3b01      	subs	r3, #1
 800ca92:	d503      	bpl.n	800ca9c <__sfp+0x24>
 800ca94:	6833      	ldr	r3, [r6, #0]
 800ca96:	b133      	cbz	r3, 800caa6 <__sfp+0x2e>
 800ca98:	6836      	ldr	r6, [r6, #0]
 800ca9a:	e7f7      	b.n	800ca8c <__sfp+0x14>
 800ca9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800caa0:	b16d      	cbz	r5, 800cabe <__sfp+0x46>
 800caa2:	3468      	adds	r4, #104	; 0x68
 800caa4:	e7f4      	b.n	800ca90 <__sfp+0x18>
 800caa6:	2104      	movs	r1, #4
 800caa8:	4638      	mov	r0, r7
 800caaa:	f7ff ff9f 	bl	800c9ec <__sfmoreglue>
 800caae:	6030      	str	r0, [r6, #0]
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d1f1      	bne.n	800ca98 <__sfp+0x20>
 800cab4:	230c      	movs	r3, #12
 800cab6:	603b      	str	r3, [r7, #0]
 800cab8:	4604      	mov	r4, r0
 800caba:	4620      	mov	r0, r4
 800cabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cabe:	4b0b      	ldr	r3, [pc, #44]	; (800caec <__sfp+0x74>)
 800cac0:	6665      	str	r5, [r4, #100]	; 0x64
 800cac2:	e9c4 5500 	strd	r5, r5, [r4]
 800cac6:	60a5      	str	r5, [r4, #8]
 800cac8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cacc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cad0:	2208      	movs	r2, #8
 800cad2:	4629      	mov	r1, r5
 800cad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cad8:	f7fd fa04 	bl	8009ee4 <memset>
 800cadc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cae4:	e7e9      	b.n	800caba <__sfp+0x42>
 800cae6:	bf00      	nop
 800cae8:	0800e8b8 	.word	0x0800e8b8
 800caec:	ffff0001 	.word	0xffff0001

0800caf0 <_fwalk_reent>:
 800caf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf4:	4680      	mov	r8, r0
 800caf6:	4689      	mov	r9, r1
 800caf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cafc:	2600      	movs	r6, #0
 800cafe:	b914      	cbnz	r4, 800cb06 <_fwalk_reent+0x16>
 800cb00:	4630      	mov	r0, r6
 800cb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cb0a:	3f01      	subs	r7, #1
 800cb0c:	d501      	bpl.n	800cb12 <_fwalk_reent+0x22>
 800cb0e:	6824      	ldr	r4, [r4, #0]
 800cb10:	e7f5      	b.n	800cafe <_fwalk_reent+0xe>
 800cb12:	89ab      	ldrh	r3, [r5, #12]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d907      	bls.n	800cb28 <_fwalk_reent+0x38>
 800cb18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	d003      	beq.n	800cb28 <_fwalk_reent+0x38>
 800cb20:	4629      	mov	r1, r5
 800cb22:	4640      	mov	r0, r8
 800cb24:	47c8      	blx	r9
 800cb26:	4306      	orrs	r6, r0
 800cb28:	3568      	adds	r5, #104	; 0x68
 800cb2a:	e7ee      	b.n	800cb0a <_fwalk_reent+0x1a>

0800cb2c <rshift>:
 800cb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2e:	6906      	ldr	r6, [r0, #16]
 800cb30:	114b      	asrs	r3, r1, #5
 800cb32:	429e      	cmp	r6, r3
 800cb34:	f100 0414 	add.w	r4, r0, #20
 800cb38:	dd30      	ble.n	800cb9c <rshift+0x70>
 800cb3a:	f011 011f 	ands.w	r1, r1, #31
 800cb3e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800cb42:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800cb46:	d108      	bne.n	800cb5a <rshift+0x2e>
 800cb48:	4621      	mov	r1, r4
 800cb4a:	42b2      	cmp	r2, r6
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	d211      	bcs.n	800cb74 <rshift+0x48>
 800cb50:	f852 3b04 	ldr.w	r3, [r2], #4
 800cb54:	f841 3b04 	str.w	r3, [r1], #4
 800cb58:	e7f7      	b.n	800cb4a <rshift+0x1e>
 800cb5a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800cb5e:	f1c1 0c20 	rsb	ip, r1, #32
 800cb62:	40cd      	lsrs	r5, r1
 800cb64:	3204      	adds	r2, #4
 800cb66:	4623      	mov	r3, r4
 800cb68:	42b2      	cmp	r2, r6
 800cb6a:	4617      	mov	r7, r2
 800cb6c:	d30c      	bcc.n	800cb88 <rshift+0x5c>
 800cb6e:	601d      	str	r5, [r3, #0]
 800cb70:	b105      	cbz	r5, 800cb74 <rshift+0x48>
 800cb72:	3304      	adds	r3, #4
 800cb74:	1b1a      	subs	r2, r3, r4
 800cb76:	42a3      	cmp	r3, r4
 800cb78:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb7c:	bf08      	it	eq
 800cb7e:	2300      	moveq	r3, #0
 800cb80:	6102      	str	r2, [r0, #16]
 800cb82:	bf08      	it	eq
 800cb84:	6143      	streq	r3, [r0, #20]
 800cb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb88:	683f      	ldr	r7, [r7, #0]
 800cb8a:	fa07 f70c 	lsl.w	r7, r7, ip
 800cb8e:	433d      	orrs	r5, r7
 800cb90:	f843 5b04 	str.w	r5, [r3], #4
 800cb94:	f852 5b04 	ldr.w	r5, [r2], #4
 800cb98:	40cd      	lsrs	r5, r1
 800cb9a:	e7e5      	b.n	800cb68 <rshift+0x3c>
 800cb9c:	4623      	mov	r3, r4
 800cb9e:	e7e9      	b.n	800cb74 <rshift+0x48>

0800cba0 <__hexdig_fun>:
 800cba0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cba4:	2b09      	cmp	r3, #9
 800cba6:	d802      	bhi.n	800cbae <__hexdig_fun+0xe>
 800cba8:	3820      	subs	r0, #32
 800cbaa:	b2c0      	uxtb	r0, r0
 800cbac:	4770      	bx	lr
 800cbae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cbb2:	2b05      	cmp	r3, #5
 800cbb4:	d801      	bhi.n	800cbba <__hexdig_fun+0x1a>
 800cbb6:	3847      	subs	r0, #71	; 0x47
 800cbb8:	e7f7      	b.n	800cbaa <__hexdig_fun+0xa>
 800cbba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cbbe:	2b05      	cmp	r3, #5
 800cbc0:	d801      	bhi.n	800cbc6 <__hexdig_fun+0x26>
 800cbc2:	3827      	subs	r0, #39	; 0x27
 800cbc4:	e7f1      	b.n	800cbaa <__hexdig_fun+0xa>
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	4770      	bx	lr

0800cbca <__gethex>:
 800cbca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbce:	b08b      	sub	sp, #44	; 0x2c
 800cbd0:	468a      	mov	sl, r1
 800cbd2:	9002      	str	r0, [sp, #8]
 800cbd4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cbd6:	9306      	str	r3, [sp, #24]
 800cbd8:	4690      	mov	r8, r2
 800cbda:	f000 facd 	bl	800d178 <__localeconv_l>
 800cbde:	6803      	ldr	r3, [r0, #0]
 800cbe0:	9303      	str	r3, [sp, #12]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7f3 fafc 	bl	80001e0 <strlen>
 800cbe8:	9b03      	ldr	r3, [sp, #12]
 800cbea:	9001      	str	r0, [sp, #4]
 800cbec:	4403      	add	r3, r0
 800cbee:	f04f 0b00 	mov.w	fp, #0
 800cbf2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cbf6:	9307      	str	r3, [sp, #28]
 800cbf8:	f8da 3000 	ldr.w	r3, [sl]
 800cbfc:	3302      	adds	r3, #2
 800cbfe:	461f      	mov	r7, r3
 800cc00:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc04:	2830      	cmp	r0, #48	; 0x30
 800cc06:	d06c      	beq.n	800cce2 <__gethex+0x118>
 800cc08:	f7ff ffca 	bl	800cba0 <__hexdig_fun>
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	d16a      	bne.n	800cce8 <__gethex+0x11e>
 800cc12:	9a01      	ldr	r2, [sp, #4]
 800cc14:	9903      	ldr	r1, [sp, #12]
 800cc16:	4638      	mov	r0, r7
 800cc18:	f001 fac5 	bl	800e1a6 <strncmp>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d166      	bne.n	800ccee <__gethex+0x124>
 800cc20:	9b01      	ldr	r3, [sp, #4]
 800cc22:	5cf8      	ldrb	r0, [r7, r3]
 800cc24:	18fe      	adds	r6, r7, r3
 800cc26:	f7ff ffbb 	bl	800cba0 <__hexdig_fun>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d062      	beq.n	800ccf4 <__gethex+0x12a>
 800cc2e:	4633      	mov	r3, r6
 800cc30:	7818      	ldrb	r0, [r3, #0]
 800cc32:	2830      	cmp	r0, #48	; 0x30
 800cc34:	461f      	mov	r7, r3
 800cc36:	f103 0301 	add.w	r3, r3, #1
 800cc3a:	d0f9      	beq.n	800cc30 <__gethex+0x66>
 800cc3c:	f7ff ffb0 	bl	800cba0 <__hexdig_fun>
 800cc40:	fab0 f580 	clz	r5, r0
 800cc44:	096d      	lsrs	r5, r5, #5
 800cc46:	4634      	mov	r4, r6
 800cc48:	f04f 0b01 	mov.w	fp, #1
 800cc4c:	463a      	mov	r2, r7
 800cc4e:	4616      	mov	r6, r2
 800cc50:	3201      	adds	r2, #1
 800cc52:	7830      	ldrb	r0, [r6, #0]
 800cc54:	f7ff ffa4 	bl	800cba0 <__hexdig_fun>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d1f8      	bne.n	800cc4e <__gethex+0x84>
 800cc5c:	9a01      	ldr	r2, [sp, #4]
 800cc5e:	9903      	ldr	r1, [sp, #12]
 800cc60:	4630      	mov	r0, r6
 800cc62:	f001 faa0 	bl	800e1a6 <strncmp>
 800cc66:	b950      	cbnz	r0, 800cc7e <__gethex+0xb4>
 800cc68:	b954      	cbnz	r4, 800cc80 <__gethex+0xb6>
 800cc6a:	9b01      	ldr	r3, [sp, #4]
 800cc6c:	18f4      	adds	r4, r6, r3
 800cc6e:	4622      	mov	r2, r4
 800cc70:	4616      	mov	r6, r2
 800cc72:	3201      	adds	r2, #1
 800cc74:	7830      	ldrb	r0, [r6, #0]
 800cc76:	f7ff ff93 	bl	800cba0 <__hexdig_fun>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d1f8      	bne.n	800cc70 <__gethex+0xa6>
 800cc7e:	b10c      	cbz	r4, 800cc84 <__gethex+0xba>
 800cc80:	1ba4      	subs	r4, r4, r6
 800cc82:	00a4      	lsls	r4, r4, #2
 800cc84:	7833      	ldrb	r3, [r6, #0]
 800cc86:	2b50      	cmp	r3, #80	; 0x50
 800cc88:	d001      	beq.n	800cc8e <__gethex+0xc4>
 800cc8a:	2b70      	cmp	r3, #112	; 0x70
 800cc8c:	d140      	bne.n	800cd10 <__gethex+0x146>
 800cc8e:	7873      	ldrb	r3, [r6, #1]
 800cc90:	2b2b      	cmp	r3, #43	; 0x2b
 800cc92:	d031      	beq.n	800ccf8 <__gethex+0x12e>
 800cc94:	2b2d      	cmp	r3, #45	; 0x2d
 800cc96:	d033      	beq.n	800cd00 <__gethex+0x136>
 800cc98:	1c71      	adds	r1, r6, #1
 800cc9a:	f04f 0900 	mov.w	r9, #0
 800cc9e:	7808      	ldrb	r0, [r1, #0]
 800cca0:	f7ff ff7e 	bl	800cba0 <__hexdig_fun>
 800cca4:	1e43      	subs	r3, r0, #1
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	2b18      	cmp	r3, #24
 800ccaa:	d831      	bhi.n	800cd10 <__gethex+0x146>
 800ccac:	f1a0 0210 	sub.w	r2, r0, #16
 800ccb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ccb4:	f7ff ff74 	bl	800cba0 <__hexdig_fun>
 800ccb8:	1e43      	subs	r3, r0, #1
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b18      	cmp	r3, #24
 800ccbe:	d922      	bls.n	800cd06 <__gethex+0x13c>
 800ccc0:	f1b9 0f00 	cmp.w	r9, #0
 800ccc4:	d000      	beq.n	800ccc8 <__gethex+0xfe>
 800ccc6:	4252      	negs	r2, r2
 800ccc8:	4414      	add	r4, r2
 800ccca:	f8ca 1000 	str.w	r1, [sl]
 800ccce:	b30d      	cbz	r5, 800cd14 <__gethex+0x14a>
 800ccd0:	f1bb 0f00 	cmp.w	fp, #0
 800ccd4:	bf0c      	ite	eq
 800ccd6:	2706      	moveq	r7, #6
 800ccd8:	2700      	movne	r7, #0
 800ccda:	4638      	mov	r0, r7
 800ccdc:	b00b      	add	sp, #44	; 0x2c
 800ccde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce2:	f10b 0b01 	add.w	fp, fp, #1
 800cce6:	e78a      	b.n	800cbfe <__gethex+0x34>
 800cce8:	2500      	movs	r5, #0
 800ccea:	462c      	mov	r4, r5
 800ccec:	e7ae      	b.n	800cc4c <__gethex+0x82>
 800ccee:	463e      	mov	r6, r7
 800ccf0:	2501      	movs	r5, #1
 800ccf2:	e7c7      	b.n	800cc84 <__gethex+0xba>
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	e7fb      	b.n	800ccf0 <__gethex+0x126>
 800ccf8:	f04f 0900 	mov.w	r9, #0
 800ccfc:	1cb1      	adds	r1, r6, #2
 800ccfe:	e7ce      	b.n	800cc9e <__gethex+0xd4>
 800cd00:	f04f 0901 	mov.w	r9, #1
 800cd04:	e7fa      	b.n	800ccfc <__gethex+0x132>
 800cd06:	230a      	movs	r3, #10
 800cd08:	fb03 0202 	mla	r2, r3, r2, r0
 800cd0c:	3a10      	subs	r2, #16
 800cd0e:	e7cf      	b.n	800ccb0 <__gethex+0xe6>
 800cd10:	4631      	mov	r1, r6
 800cd12:	e7da      	b.n	800ccca <__gethex+0x100>
 800cd14:	1bf3      	subs	r3, r6, r7
 800cd16:	3b01      	subs	r3, #1
 800cd18:	4629      	mov	r1, r5
 800cd1a:	2b07      	cmp	r3, #7
 800cd1c:	dc49      	bgt.n	800cdb2 <__gethex+0x1e8>
 800cd1e:	9802      	ldr	r0, [sp, #8]
 800cd20:	f000 faa6 	bl	800d270 <_Balloc>
 800cd24:	9b01      	ldr	r3, [sp, #4]
 800cd26:	f100 0914 	add.w	r9, r0, #20
 800cd2a:	f04f 0b00 	mov.w	fp, #0
 800cd2e:	f1c3 0301 	rsb	r3, r3, #1
 800cd32:	4605      	mov	r5, r0
 800cd34:	f8cd 9010 	str.w	r9, [sp, #16]
 800cd38:	46da      	mov	sl, fp
 800cd3a:	9308      	str	r3, [sp, #32]
 800cd3c:	42b7      	cmp	r7, r6
 800cd3e:	d33b      	bcc.n	800cdb8 <__gethex+0x1ee>
 800cd40:	9804      	ldr	r0, [sp, #16]
 800cd42:	f840 ab04 	str.w	sl, [r0], #4
 800cd46:	eba0 0009 	sub.w	r0, r0, r9
 800cd4a:	1080      	asrs	r0, r0, #2
 800cd4c:	6128      	str	r0, [r5, #16]
 800cd4e:	0147      	lsls	r7, r0, #5
 800cd50:	4650      	mov	r0, sl
 800cd52:	f000 fb51 	bl	800d3f8 <__hi0bits>
 800cd56:	f8d8 6000 	ldr.w	r6, [r8]
 800cd5a:	1a3f      	subs	r7, r7, r0
 800cd5c:	42b7      	cmp	r7, r6
 800cd5e:	dd64      	ble.n	800ce2a <__gethex+0x260>
 800cd60:	1bbf      	subs	r7, r7, r6
 800cd62:	4639      	mov	r1, r7
 800cd64:	4628      	mov	r0, r5
 800cd66:	f000 fe61 	bl	800da2c <__any_on>
 800cd6a:	4682      	mov	sl, r0
 800cd6c:	b178      	cbz	r0, 800cd8e <__gethex+0x1c4>
 800cd6e:	1e7b      	subs	r3, r7, #1
 800cd70:	1159      	asrs	r1, r3, #5
 800cd72:	f003 021f 	and.w	r2, r3, #31
 800cd76:	f04f 0a01 	mov.w	sl, #1
 800cd7a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cd7e:	fa0a f202 	lsl.w	r2, sl, r2
 800cd82:	420a      	tst	r2, r1
 800cd84:	d003      	beq.n	800cd8e <__gethex+0x1c4>
 800cd86:	4553      	cmp	r3, sl
 800cd88:	dc46      	bgt.n	800ce18 <__gethex+0x24e>
 800cd8a:	f04f 0a02 	mov.w	sl, #2
 800cd8e:	4639      	mov	r1, r7
 800cd90:	4628      	mov	r0, r5
 800cd92:	f7ff fecb 	bl	800cb2c <rshift>
 800cd96:	443c      	add	r4, r7
 800cd98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd9c:	42a3      	cmp	r3, r4
 800cd9e:	da52      	bge.n	800ce46 <__gethex+0x27c>
 800cda0:	4629      	mov	r1, r5
 800cda2:	9802      	ldr	r0, [sp, #8]
 800cda4:	f000 fa98 	bl	800d2d8 <_Bfree>
 800cda8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdaa:	2300      	movs	r3, #0
 800cdac:	6013      	str	r3, [r2, #0]
 800cdae:	27a3      	movs	r7, #163	; 0xa3
 800cdb0:	e793      	b.n	800ccda <__gethex+0x110>
 800cdb2:	3101      	adds	r1, #1
 800cdb4:	105b      	asrs	r3, r3, #1
 800cdb6:	e7b0      	b.n	800cd1a <__gethex+0x150>
 800cdb8:	1e73      	subs	r3, r6, #1
 800cdba:	9305      	str	r3, [sp, #20]
 800cdbc:	9a07      	ldr	r2, [sp, #28]
 800cdbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d018      	beq.n	800cdf8 <__gethex+0x22e>
 800cdc6:	f1bb 0f20 	cmp.w	fp, #32
 800cdca:	d107      	bne.n	800cddc <__gethex+0x212>
 800cdcc:	9b04      	ldr	r3, [sp, #16]
 800cdce:	f8c3 a000 	str.w	sl, [r3]
 800cdd2:	3304      	adds	r3, #4
 800cdd4:	f04f 0a00 	mov.w	sl, #0
 800cdd8:	9304      	str	r3, [sp, #16]
 800cdda:	46d3      	mov	fp, sl
 800cddc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cde0:	f7ff fede 	bl	800cba0 <__hexdig_fun>
 800cde4:	f000 000f 	and.w	r0, r0, #15
 800cde8:	fa00 f00b 	lsl.w	r0, r0, fp
 800cdec:	ea4a 0a00 	orr.w	sl, sl, r0
 800cdf0:	f10b 0b04 	add.w	fp, fp, #4
 800cdf4:	9b05      	ldr	r3, [sp, #20]
 800cdf6:	e00d      	b.n	800ce14 <__gethex+0x24a>
 800cdf8:	9b05      	ldr	r3, [sp, #20]
 800cdfa:	9a08      	ldr	r2, [sp, #32]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	42bb      	cmp	r3, r7
 800ce00:	d3e1      	bcc.n	800cdc6 <__gethex+0x1fc>
 800ce02:	4618      	mov	r0, r3
 800ce04:	9a01      	ldr	r2, [sp, #4]
 800ce06:	9903      	ldr	r1, [sp, #12]
 800ce08:	9309      	str	r3, [sp, #36]	; 0x24
 800ce0a:	f001 f9cc 	bl	800e1a6 <strncmp>
 800ce0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d1d8      	bne.n	800cdc6 <__gethex+0x1fc>
 800ce14:	461e      	mov	r6, r3
 800ce16:	e791      	b.n	800cd3c <__gethex+0x172>
 800ce18:	1eb9      	subs	r1, r7, #2
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	f000 fe06 	bl	800da2c <__any_on>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	d0b2      	beq.n	800cd8a <__gethex+0x1c0>
 800ce24:	f04f 0a03 	mov.w	sl, #3
 800ce28:	e7b1      	b.n	800cd8e <__gethex+0x1c4>
 800ce2a:	da09      	bge.n	800ce40 <__gethex+0x276>
 800ce2c:	1bf7      	subs	r7, r6, r7
 800ce2e:	4629      	mov	r1, r5
 800ce30:	463a      	mov	r2, r7
 800ce32:	9802      	ldr	r0, [sp, #8]
 800ce34:	f000 fc1c 	bl	800d670 <__lshift>
 800ce38:	1be4      	subs	r4, r4, r7
 800ce3a:	4605      	mov	r5, r0
 800ce3c:	f100 0914 	add.w	r9, r0, #20
 800ce40:	f04f 0a00 	mov.w	sl, #0
 800ce44:	e7a8      	b.n	800cd98 <__gethex+0x1ce>
 800ce46:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ce4a:	42a0      	cmp	r0, r4
 800ce4c:	dd6a      	ble.n	800cf24 <__gethex+0x35a>
 800ce4e:	1b04      	subs	r4, r0, r4
 800ce50:	42a6      	cmp	r6, r4
 800ce52:	dc2e      	bgt.n	800ceb2 <__gethex+0x2e8>
 800ce54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	d022      	beq.n	800cea2 <__gethex+0x2d8>
 800ce5c:	2b03      	cmp	r3, #3
 800ce5e:	d024      	beq.n	800ceaa <__gethex+0x2e0>
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d115      	bne.n	800ce90 <__gethex+0x2c6>
 800ce64:	42a6      	cmp	r6, r4
 800ce66:	d113      	bne.n	800ce90 <__gethex+0x2c6>
 800ce68:	2e01      	cmp	r6, #1
 800ce6a:	dc0b      	bgt.n	800ce84 <__gethex+0x2ba>
 800ce6c:	9a06      	ldr	r2, [sp, #24]
 800ce6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce72:	6013      	str	r3, [r2, #0]
 800ce74:	2301      	movs	r3, #1
 800ce76:	612b      	str	r3, [r5, #16]
 800ce78:	f8c9 3000 	str.w	r3, [r9]
 800ce7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce7e:	2762      	movs	r7, #98	; 0x62
 800ce80:	601d      	str	r5, [r3, #0]
 800ce82:	e72a      	b.n	800ccda <__gethex+0x110>
 800ce84:	1e71      	subs	r1, r6, #1
 800ce86:	4628      	mov	r0, r5
 800ce88:	f000 fdd0 	bl	800da2c <__any_on>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d1ed      	bne.n	800ce6c <__gethex+0x2a2>
 800ce90:	4629      	mov	r1, r5
 800ce92:	9802      	ldr	r0, [sp, #8]
 800ce94:	f000 fa20 	bl	800d2d8 <_Bfree>
 800ce98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	6013      	str	r3, [r2, #0]
 800ce9e:	2750      	movs	r7, #80	; 0x50
 800cea0:	e71b      	b.n	800ccda <__gethex+0x110>
 800cea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d0e1      	beq.n	800ce6c <__gethex+0x2a2>
 800cea8:	e7f2      	b.n	800ce90 <__gethex+0x2c6>
 800ceaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d1dd      	bne.n	800ce6c <__gethex+0x2a2>
 800ceb0:	e7ee      	b.n	800ce90 <__gethex+0x2c6>
 800ceb2:	1e67      	subs	r7, r4, #1
 800ceb4:	f1ba 0f00 	cmp.w	sl, #0
 800ceb8:	d131      	bne.n	800cf1e <__gethex+0x354>
 800ceba:	b127      	cbz	r7, 800cec6 <__gethex+0x2fc>
 800cebc:	4639      	mov	r1, r7
 800cebe:	4628      	mov	r0, r5
 800cec0:	f000 fdb4 	bl	800da2c <__any_on>
 800cec4:	4682      	mov	sl, r0
 800cec6:	117a      	asrs	r2, r7, #5
 800cec8:	2301      	movs	r3, #1
 800ceca:	f007 071f 	and.w	r7, r7, #31
 800cece:	fa03 f707 	lsl.w	r7, r3, r7
 800ced2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ced6:	4621      	mov	r1, r4
 800ced8:	421f      	tst	r7, r3
 800ceda:	4628      	mov	r0, r5
 800cedc:	bf18      	it	ne
 800cede:	f04a 0a02 	orrne.w	sl, sl, #2
 800cee2:	1b36      	subs	r6, r6, r4
 800cee4:	f7ff fe22 	bl	800cb2c <rshift>
 800cee8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ceec:	2702      	movs	r7, #2
 800ceee:	f1ba 0f00 	cmp.w	sl, #0
 800cef2:	d048      	beq.n	800cf86 <__gethex+0x3bc>
 800cef4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d015      	beq.n	800cf28 <__gethex+0x35e>
 800cefc:	2b03      	cmp	r3, #3
 800cefe:	d017      	beq.n	800cf30 <__gethex+0x366>
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d109      	bne.n	800cf18 <__gethex+0x34e>
 800cf04:	f01a 0f02 	tst.w	sl, #2
 800cf08:	d006      	beq.n	800cf18 <__gethex+0x34e>
 800cf0a:	f8d9 3000 	ldr.w	r3, [r9]
 800cf0e:	ea4a 0a03 	orr.w	sl, sl, r3
 800cf12:	f01a 0f01 	tst.w	sl, #1
 800cf16:	d10e      	bne.n	800cf36 <__gethex+0x36c>
 800cf18:	f047 0710 	orr.w	r7, r7, #16
 800cf1c:	e033      	b.n	800cf86 <__gethex+0x3bc>
 800cf1e:	f04f 0a01 	mov.w	sl, #1
 800cf22:	e7d0      	b.n	800cec6 <__gethex+0x2fc>
 800cf24:	2701      	movs	r7, #1
 800cf26:	e7e2      	b.n	800ceee <__gethex+0x324>
 800cf28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf2a:	f1c3 0301 	rsb	r3, r3, #1
 800cf2e:	9315      	str	r3, [sp, #84]	; 0x54
 800cf30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d0f0      	beq.n	800cf18 <__gethex+0x34e>
 800cf36:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800cf3a:	f105 0314 	add.w	r3, r5, #20
 800cf3e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800cf42:	eb03 010a 	add.w	r1, r3, sl
 800cf46:	f04f 0c00 	mov.w	ip, #0
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf50:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800cf54:	d01c      	beq.n	800cf90 <__gethex+0x3c6>
 800cf56:	3201      	adds	r2, #1
 800cf58:	6002      	str	r2, [r0, #0]
 800cf5a:	2f02      	cmp	r7, #2
 800cf5c:	f105 0314 	add.w	r3, r5, #20
 800cf60:	d138      	bne.n	800cfd4 <__gethex+0x40a>
 800cf62:	f8d8 2000 	ldr.w	r2, [r8]
 800cf66:	3a01      	subs	r2, #1
 800cf68:	42b2      	cmp	r2, r6
 800cf6a:	d10a      	bne.n	800cf82 <__gethex+0x3b8>
 800cf6c:	1171      	asrs	r1, r6, #5
 800cf6e:	2201      	movs	r2, #1
 800cf70:	f006 061f 	and.w	r6, r6, #31
 800cf74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf78:	fa02 f606 	lsl.w	r6, r2, r6
 800cf7c:	421e      	tst	r6, r3
 800cf7e:	bf18      	it	ne
 800cf80:	4617      	movne	r7, r2
 800cf82:	f047 0720 	orr.w	r7, r7, #32
 800cf86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf88:	601d      	str	r5, [r3, #0]
 800cf8a:	9b06      	ldr	r3, [sp, #24]
 800cf8c:	601c      	str	r4, [r3, #0]
 800cf8e:	e6a4      	b.n	800ccda <__gethex+0x110>
 800cf90:	4299      	cmp	r1, r3
 800cf92:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf96:	d8d8      	bhi.n	800cf4a <__gethex+0x380>
 800cf98:	68ab      	ldr	r3, [r5, #8]
 800cf9a:	4599      	cmp	r9, r3
 800cf9c:	db12      	blt.n	800cfc4 <__gethex+0x3fa>
 800cf9e:	6869      	ldr	r1, [r5, #4]
 800cfa0:	9802      	ldr	r0, [sp, #8]
 800cfa2:	3101      	adds	r1, #1
 800cfa4:	f000 f964 	bl	800d270 <_Balloc>
 800cfa8:	692a      	ldr	r2, [r5, #16]
 800cfaa:	3202      	adds	r2, #2
 800cfac:	f105 010c 	add.w	r1, r5, #12
 800cfb0:	4683      	mov	fp, r0
 800cfb2:	0092      	lsls	r2, r2, #2
 800cfb4:	300c      	adds	r0, #12
 800cfb6:	f7fc ff8a 	bl	8009ece <memcpy>
 800cfba:	4629      	mov	r1, r5
 800cfbc:	9802      	ldr	r0, [sp, #8]
 800cfbe:	f000 f98b 	bl	800d2d8 <_Bfree>
 800cfc2:	465d      	mov	r5, fp
 800cfc4:	692b      	ldr	r3, [r5, #16]
 800cfc6:	1c5a      	adds	r2, r3, #1
 800cfc8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cfcc:	612a      	str	r2, [r5, #16]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	615a      	str	r2, [r3, #20]
 800cfd2:	e7c2      	b.n	800cf5a <__gethex+0x390>
 800cfd4:	692a      	ldr	r2, [r5, #16]
 800cfd6:	454a      	cmp	r2, r9
 800cfd8:	dd0b      	ble.n	800cff2 <__gethex+0x428>
 800cfda:	2101      	movs	r1, #1
 800cfdc:	4628      	mov	r0, r5
 800cfde:	f7ff fda5 	bl	800cb2c <rshift>
 800cfe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cfe6:	3401      	adds	r4, #1
 800cfe8:	42a3      	cmp	r3, r4
 800cfea:	f6ff aed9 	blt.w	800cda0 <__gethex+0x1d6>
 800cfee:	2701      	movs	r7, #1
 800cff0:	e7c7      	b.n	800cf82 <__gethex+0x3b8>
 800cff2:	f016 061f 	ands.w	r6, r6, #31
 800cff6:	d0fa      	beq.n	800cfee <__gethex+0x424>
 800cff8:	449a      	add	sl, r3
 800cffa:	f1c6 0620 	rsb	r6, r6, #32
 800cffe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d002:	f000 f9f9 	bl	800d3f8 <__hi0bits>
 800d006:	42b0      	cmp	r0, r6
 800d008:	dbe7      	blt.n	800cfda <__gethex+0x410>
 800d00a:	e7f0      	b.n	800cfee <__gethex+0x424>

0800d00c <L_shift>:
 800d00c:	f1c2 0208 	rsb	r2, r2, #8
 800d010:	0092      	lsls	r2, r2, #2
 800d012:	b570      	push	{r4, r5, r6, lr}
 800d014:	f1c2 0620 	rsb	r6, r2, #32
 800d018:	6843      	ldr	r3, [r0, #4]
 800d01a:	6804      	ldr	r4, [r0, #0]
 800d01c:	fa03 f506 	lsl.w	r5, r3, r6
 800d020:	432c      	orrs	r4, r5
 800d022:	40d3      	lsrs	r3, r2
 800d024:	6004      	str	r4, [r0, #0]
 800d026:	f840 3f04 	str.w	r3, [r0, #4]!
 800d02a:	4288      	cmp	r0, r1
 800d02c:	d3f4      	bcc.n	800d018 <L_shift+0xc>
 800d02e:	bd70      	pop	{r4, r5, r6, pc}

0800d030 <__match>:
 800d030:	b530      	push	{r4, r5, lr}
 800d032:	6803      	ldr	r3, [r0, #0]
 800d034:	3301      	adds	r3, #1
 800d036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d03a:	b914      	cbnz	r4, 800d042 <__match+0x12>
 800d03c:	6003      	str	r3, [r0, #0]
 800d03e:	2001      	movs	r0, #1
 800d040:	bd30      	pop	{r4, r5, pc}
 800d042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d046:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d04a:	2d19      	cmp	r5, #25
 800d04c:	bf98      	it	ls
 800d04e:	3220      	addls	r2, #32
 800d050:	42a2      	cmp	r2, r4
 800d052:	d0f0      	beq.n	800d036 <__match+0x6>
 800d054:	2000      	movs	r0, #0
 800d056:	e7f3      	b.n	800d040 <__match+0x10>

0800d058 <__hexnan>:
 800d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	680b      	ldr	r3, [r1, #0]
 800d05e:	6801      	ldr	r1, [r0, #0]
 800d060:	115f      	asrs	r7, r3, #5
 800d062:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d066:	f013 031f 	ands.w	r3, r3, #31
 800d06a:	b087      	sub	sp, #28
 800d06c:	bf18      	it	ne
 800d06e:	3704      	addne	r7, #4
 800d070:	2500      	movs	r5, #0
 800d072:	1f3e      	subs	r6, r7, #4
 800d074:	4682      	mov	sl, r0
 800d076:	4690      	mov	r8, r2
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	f847 5c04 	str.w	r5, [r7, #-4]
 800d07e:	46b1      	mov	r9, r6
 800d080:	4634      	mov	r4, r6
 800d082:	9502      	str	r5, [sp, #8]
 800d084:	46ab      	mov	fp, r5
 800d086:	784a      	ldrb	r2, [r1, #1]
 800d088:	1c4b      	adds	r3, r1, #1
 800d08a:	9303      	str	r3, [sp, #12]
 800d08c:	b342      	cbz	r2, 800d0e0 <__hexnan+0x88>
 800d08e:	4610      	mov	r0, r2
 800d090:	9105      	str	r1, [sp, #20]
 800d092:	9204      	str	r2, [sp, #16]
 800d094:	f7ff fd84 	bl	800cba0 <__hexdig_fun>
 800d098:	2800      	cmp	r0, #0
 800d09a:	d143      	bne.n	800d124 <__hexnan+0xcc>
 800d09c:	9a04      	ldr	r2, [sp, #16]
 800d09e:	9905      	ldr	r1, [sp, #20]
 800d0a0:	2a20      	cmp	r2, #32
 800d0a2:	d818      	bhi.n	800d0d6 <__hexnan+0x7e>
 800d0a4:	9b02      	ldr	r3, [sp, #8]
 800d0a6:	459b      	cmp	fp, r3
 800d0a8:	dd13      	ble.n	800d0d2 <__hexnan+0x7a>
 800d0aa:	454c      	cmp	r4, r9
 800d0ac:	d206      	bcs.n	800d0bc <__hexnan+0x64>
 800d0ae:	2d07      	cmp	r5, #7
 800d0b0:	dc04      	bgt.n	800d0bc <__hexnan+0x64>
 800d0b2:	462a      	mov	r2, r5
 800d0b4:	4649      	mov	r1, r9
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f7ff ffa8 	bl	800d00c <L_shift>
 800d0bc:	4544      	cmp	r4, r8
 800d0be:	d944      	bls.n	800d14a <__hexnan+0xf2>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	f1a4 0904 	sub.w	r9, r4, #4
 800d0c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0ca:	f8cd b008 	str.w	fp, [sp, #8]
 800d0ce:	464c      	mov	r4, r9
 800d0d0:	461d      	mov	r5, r3
 800d0d2:	9903      	ldr	r1, [sp, #12]
 800d0d4:	e7d7      	b.n	800d086 <__hexnan+0x2e>
 800d0d6:	2a29      	cmp	r2, #41	; 0x29
 800d0d8:	d14a      	bne.n	800d170 <__hexnan+0x118>
 800d0da:	3102      	adds	r1, #2
 800d0dc:	f8ca 1000 	str.w	r1, [sl]
 800d0e0:	f1bb 0f00 	cmp.w	fp, #0
 800d0e4:	d044      	beq.n	800d170 <__hexnan+0x118>
 800d0e6:	454c      	cmp	r4, r9
 800d0e8:	d206      	bcs.n	800d0f8 <__hexnan+0xa0>
 800d0ea:	2d07      	cmp	r5, #7
 800d0ec:	dc04      	bgt.n	800d0f8 <__hexnan+0xa0>
 800d0ee:	462a      	mov	r2, r5
 800d0f0:	4649      	mov	r1, r9
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f7ff ff8a 	bl	800d00c <L_shift>
 800d0f8:	4544      	cmp	r4, r8
 800d0fa:	d928      	bls.n	800d14e <__hexnan+0xf6>
 800d0fc:	4643      	mov	r3, r8
 800d0fe:	f854 2b04 	ldr.w	r2, [r4], #4
 800d102:	f843 2b04 	str.w	r2, [r3], #4
 800d106:	42a6      	cmp	r6, r4
 800d108:	d2f9      	bcs.n	800d0fe <__hexnan+0xa6>
 800d10a:	2200      	movs	r2, #0
 800d10c:	f843 2b04 	str.w	r2, [r3], #4
 800d110:	429e      	cmp	r6, r3
 800d112:	d2fb      	bcs.n	800d10c <__hexnan+0xb4>
 800d114:	6833      	ldr	r3, [r6, #0]
 800d116:	b91b      	cbnz	r3, 800d120 <__hexnan+0xc8>
 800d118:	4546      	cmp	r6, r8
 800d11a:	d127      	bne.n	800d16c <__hexnan+0x114>
 800d11c:	2301      	movs	r3, #1
 800d11e:	6033      	str	r3, [r6, #0]
 800d120:	2005      	movs	r0, #5
 800d122:	e026      	b.n	800d172 <__hexnan+0x11a>
 800d124:	3501      	adds	r5, #1
 800d126:	2d08      	cmp	r5, #8
 800d128:	f10b 0b01 	add.w	fp, fp, #1
 800d12c:	dd06      	ble.n	800d13c <__hexnan+0xe4>
 800d12e:	4544      	cmp	r4, r8
 800d130:	d9cf      	bls.n	800d0d2 <__hexnan+0x7a>
 800d132:	2300      	movs	r3, #0
 800d134:	f844 3c04 	str.w	r3, [r4, #-4]
 800d138:	2501      	movs	r5, #1
 800d13a:	3c04      	subs	r4, #4
 800d13c:	6822      	ldr	r2, [r4, #0]
 800d13e:	f000 000f 	and.w	r0, r0, #15
 800d142:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d146:	6020      	str	r0, [r4, #0]
 800d148:	e7c3      	b.n	800d0d2 <__hexnan+0x7a>
 800d14a:	2508      	movs	r5, #8
 800d14c:	e7c1      	b.n	800d0d2 <__hexnan+0x7a>
 800d14e:	9b01      	ldr	r3, [sp, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d0df      	beq.n	800d114 <__hexnan+0xbc>
 800d154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d158:	f1c3 0320 	rsb	r3, r3, #32
 800d15c:	fa22 f303 	lsr.w	r3, r2, r3
 800d160:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d164:	401a      	ands	r2, r3
 800d166:	f847 2c04 	str.w	r2, [r7, #-4]
 800d16a:	e7d3      	b.n	800d114 <__hexnan+0xbc>
 800d16c:	3e04      	subs	r6, #4
 800d16e:	e7d1      	b.n	800d114 <__hexnan+0xbc>
 800d170:	2004      	movs	r0, #4
 800d172:	b007      	add	sp, #28
 800d174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d178 <__localeconv_l>:
 800d178:	30f0      	adds	r0, #240	; 0xf0
 800d17a:	4770      	bx	lr

0800d17c <_localeconv_r>:
 800d17c:	4b04      	ldr	r3, [pc, #16]	; (800d190 <_localeconv_r+0x14>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6a18      	ldr	r0, [r3, #32]
 800d182:	4b04      	ldr	r3, [pc, #16]	; (800d194 <_localeconv_r+0x18>)
 800d184:	2800      	cmp	r0, #0
 800d186:	bf08      	it	eq
 800d188:	4618      	moveq	r0, r3
 800d18a:	30f0      	adds	r0, #240	; 0xf0
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	20000098 	.word	0x20000098
 800d194:	200000fc 	.word	0x200000fc

0800d198 <__swhatbuf_r>:
 800d198:	b570      	push	{r4, r5, r6, lr}
 800d19a:	460e      	mov	r6, r1
 800d19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a0:	2900      	cmp	r1, #0
 800d1a2:	b096      	sub	sp, #88	; 0x58
 800d1a4:	4614      	mov	r4, r2
 800d1a6:	461d      	mov	r5, r3
 800d1a8:	da07      	bge.n	800d1ba <__swhatbuf_r+0x22>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	602b      	str	r3, [r5, #0]
 800d1ae:	89b3      	ldrh	r3, [r6, #12]
 800d1b0:	061a      	lsls	r2, r3, #24
 800d1b2:	d410      	bmi.n	800d1d6 <__swhatbuf_r+0x3e>
 800d1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1b8:	e00e      	b.n	800d1d8 <__swhatbuf_r+0x40>
 800d1ba:	466a      	mov	r2, sp
 800d1bc:	f001 f828 	bl	800e210 <_fstat_r>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	dbf2      	blt.n	800d1aa <__swhatbuf_r+0x12>
 800d1c4:	9a01      	ldr	r2, [sp, #4]
 800d1c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1ce:	425a      	negs	r2, r3
 800d1d0:	415a      	adcs	r2, r3
 800d1d2:	602a      	str	r2, [r5, #0]
 800d1d4:	e7ee      	b.n	800d1b4 <__swhatbuf_r+0x1c>
 800d1d6:	2340      	movs	r3, #64	; 0x40
 800d1d8:	2000      	movs	r0, #0
 800d1da:	6023      	str	r3, [r4, #0]
 800d1dc:	b016      	add	sp, #88	; 0x58
 800d1de:	bd70      	pop	{r4, r5, r6, pc}

0800d1e0 <__smakebuf_r>:
 800d1e0:	898b      	ldrh	r3, [r1, #12]
 800d1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1e4:	079d      	lsls	r5, r3, #30
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	460c      	mov	r4, r1
 800d1ea:	d507      	bpl.n	800d1fc <__smakebuf_r+0x1c>
 800d1ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	6123      	str	r3, [r4, #16]
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	6163      	str	r3, [r4, #20]
 800d1f8:	b002      	add	sp, #8
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
 800d1fc:	ab01      	add	r3, sp, #4
 800d1fe:	466a      	mov	r2, sp
 800d200:	f7ff ffca 	bl	800d198 <__swhatbuf_r>
 800d204:	9900      	ldr	r1, [sp, #0]
 800d206:	4605      	mov	r5, r0
 800d208:	4630      	mov	r0, r6
 800d20a:	f000 fc8d 	bl	800db28 <_malloc_r>
 800d20e:	b948      	cbnz	r0, 800d224 <__smakebuf_r+0x44>
 800d210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d214:	059a      	lsls	r2, r3, #22
 800d216:	d4ef      	bmi.n	800d1f8 <__smakebuf_r+0x18>
 800d218:	f023 0303 	bic.w	r3, r3, #3
 800d21c:	f043 0302 	orr.w	r3, r3, #2
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	e7e3      	b.n	800d1ec <__smakebuf_r+0xc>
 800d224:	4b0d      	ldr	r3, [pc, #52]	; (800d25c <__smakebuf_r+0x7c>)
 800d226:	62b3      	str	r3, [r6, #40]	; 0x28
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	6020      	str	r0, [r4, #0]
 800d22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d230:	81a3      	strh	r3, [r4, #12]
 800d232:	9b00      	ldr	r3, [sp, #0]
 800d234:	6163      	str	r3, [r4, #20]
 800d236:	9b01      	ldr	r3, [sp, #4]
 800d238:	6120      	str	r0, [r4, #16]
 800d23a:	b15b      	cbz	r3, 800d254 <__smakebuf_r+0x74>
 800d23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d240:	4630      	mov	r0, r6
 800d242:	f000 fff7 	bl	800e234 <_isatty_r>
 800d246:	b128      	cbz	r0, 800d254 <__smakebuf_r+0x74>
 800d248:	89a3      	ldrh	r3, [r4, #12]
 800d24a:	f023 0303 	bic.w	r3, r3, #3
 800d24e:	f043 0301 	orr.w	r3, r3, #1
 800d252:	81a3      	strh	r3, [r4, #12]
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	431d      	orrs	r5, r3
 800d258:	81a5      	strh	r5, [r4, #12]
 800d25a:	e7cd      	b.n	800d1f8 <__smakebuf_r+0x18>
 800d25c:	0800c9e1 	.word	0x0800c9e1

0800d260 <malloc>:
 800d260:	4b02      	ldr	r3, [pc, #8]	; (800d26c <malloc+0xc>)
 800d262:	4601      	mov	r1, r0
 800d264:	6818      	ldr	r0, [r3, #0]
 800d266:	f000 bc5f 	b.w	800db28 <_malloc_r>
 800d26a:	bf00      	nop
 800d26c:	20000098 	.word	0x20000098

0800d270 <_Balloc>:
 800d270:	b570      	push	{r4, r5, r6, lr}
 800d272:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d274:	4604      	mov	r4, r0
 800d276:	460e      	mov	r6, r1
 800d278:	b93d      	cbnz	r5, 800d28a <_Balloc+0x1a>
 800d27a:	2010      	movs	r0, #16
 800d27c:	f7ff fff0 	bl	800d260 <malloc>
 800d280:	6260      	str	r0, [r4, #36]	; 0x24
 800d282:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d286:	6005      	str	r5, [r0, #0]
 800d288:	60c5      	str	r5, [r0, #12]
 800d28a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d28c:	68eb      	ldr	r3, [r5, #12]
 800d28e:	b183      	cbz	r3, 800d2b2 <_Balloc+0x42>
 800d290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d298:	b9b8      	cbnz	r0, 800d2ca <_Balloc+0x5a>
 800d29a:	2101      	movs	r1, #1
 800d29c:	fa01 f506 	lsl.w	r5, r1, r6
 800d2a0:	1d6a      	adds	r2, r5, #5
 800d2a2:	0092      	lsls	r2, r2, #2
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f000 fbe2 	bl	800da6e <_calloc_r>
 800d2aa:	b160      	cbz	r0, 800d2c6 <_Balloc+0x56>
 800d2ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d2b0:	e00e      	b.n	800d2d0 <_Balloc+0x60>
 800d2b2:	2221      	movs	r2, #33	; 0x21
 800d2b4:	2104      	movs	r1, #4
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f000 fbd9 	bl	800da6e <_calloc_r>
 800d2bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2be:	60e8      	str	r0, [r5, #12]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1e4      	bne.n	800d290 <_Balloc+0x20>
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ca:	6802      	ldr	r2, [r0, #0]
 800d2cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2d6:	e7f7      	b.n	800d2c8 <_Balloc+0x58>

0800d2d8 <_Bfree>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d2dc:	4606      	mov	r6, r0
 800d2de:	460d      	mov	r5, r1
 800d2e0:	b93c      	cbnz	r4, 800d2f2 <_Bfree+0x1a>
 800d2e2:	2010      	movs	r0, #16
 800d2e4:	f7ff ffbc 	bl	800d260 <malloc>
 800d2e8:	6270      	str	r0, [r6, #36]	; 0x24
 800d2ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2ee:	6004      	str	r4, [r0, #0]
 800d2f0:	60c4      	str	r4, [r0, #12]
 800d2f2:	b13d      	cbz	r5, 800d304 <_Bfree+0x2c>
 800d2f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d2f6:	686a      	ldr	r2, [r5, #4]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2fe:	6029      	str	r1, [r5, #0]
 800d300:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d304:	bd70      	pop	{r4, r5, r6, pc}

0800d306 <__multadd>:
 800d306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d30a:	690d      	ldr	r5, [r1, #16]
 800d30c:	461f      	mov	r7, r3
 800d30e:	4606      	mov	r6, r0
 800d310:	460c      	mov	r4, r1
 800d312:	f101 0c14 	add.w	ip, r1, #20
 800d316:	2300      	movs	r3, #0
 800d318:	f8dc 0000 	ldr.w	r0, [ip]
 800d31c:	b281      	uxth	r1, r0
 800d31e:	fb02 7101 	mla	r1, r2, r1, r7
 800d322:	0c0f      	lsrs	r7, r1, #16
 800d324:	0c00      	lsrs	r0, r0, #16
 800d326:	fb02 7000 	mla	r0, r2, r0, r7
 800d32a:	b289      	uxth	r1, r1
 800d32c:	3301      	adds	r3, #1
 800d32e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d332:	429d      	cmp	r5, r3
 800d334:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d338:	f84c 1b04 	str.w	r1, [ip], #4
 800d33c:	dcec      	bgt.n	800d318 <__multadd+0x12>
 800d33e:	b1d7      	cbz	r7, 800d376 <__multadd+0x70>
 800d340:	68a3      	ldr	r3, [r4, #8]
 800d342:	42ab      	cmp	r3, r5
 800d344:	dc12      	bgt.n	800d36c <__multadd+0x66>
 800d346:	6861      	ldr	r1, [r4, #4]
 800d348:	4630      	mov	r0, r6
 800d34a:	3101      	adds	r1, #1
 800d34c:	f7ff ff90 	bl	800d270 <_Balloc>
 800d350:	6922      	ldr	r2, [r4, #16]
 800d352:	3202      	adds	r2, #2
 800d354:	f104 010c 	add.w	r1, r4, #12
 800d358:	4680      	mov	r8, r0
 800d35a:	0092      	lsls	r2, r2, #2
 800d35c:	300c      	adds	r0, #12
 800d35e:	f7fc fdb6 	bl	8009ece <memcpy>
 800d362:	4621      	mov	r1, r4
 800d364:	4630      	mov	r0, r6
 800d366:	f7ff ffb7 	bl	800d2d8 <_Bfree>
 800d36a:	4644      	mov	r4, r8
 800d36c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d370:	3501      	adds	r5, #1
 800d372:	615f      	str	r7, [r3, #20]
 800d374:	6125      	str	r5, [r4, #16]
 800d376:	4620      	mov	r0, r4
 800d378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d37c <__s2b>:
 800d37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d380:	460c      	mov	r4, r1
 800d382:	4615      	mov	r5, r2
 800d384:	461f      	mov	r7, r3
 800d386:	2209      	movs	r2, #9
 800d388:	3308      	adds	r3, #8
 800d38a:	4606      	mov	r6, r0
 800d38c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d390:	2100      	movs	r1, #0
 800d392:	2201      	movs	r2, #1
 800d394:	429a      	cmp	r2, r3
 800d396:	db20      	blt.n	800d3da <__s2b+0x5e>
 800d398:	4630      	mov	r0, r6
 800d39a:	f7ff ff69 	bl	800d270 <_Balloc>
 800d39e:	9b08      	ldr	r3, [sp, #32]
 800d3a0:	6143      	str	r3, [r0, #20]
 800d3a2:	2d09      	cmp	r5, #9
 800d3a4:	f04f 0301 	mov.w	r3, #1
 800d3a8:	6103      	str	r3, [r0, #16]
 800d3aa:	dd19      	ble.n	800d3e0 <__s2b+0x64>
 800d3ac:	f104 0809 	add.w	r8, r4, #9
 800d3b0:	46c1      	mov	r9, r8
 800d3b2:	442c      	add	r4, r5
 800d3b4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d3b8:	4601      	mov	r1, r0
 800d3ba:	3b30      	subs	r3, #48	; 0x30
 800d3bc:	220a      	movs	r2, #10
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f7ff ffa1 	bl	800d306 <__multadd>
 800d3c4:	45a1      	cmp	r9, r4
 800d3c6:	d1f5      	bne.n	800d3b4 <__s2b+0x38>
 800d3c8:	eb08 0405 	add.w	r4, r8, r5
 800d3cc:	3c08      	subs	r4, #8
 800d3ce:	1b2d      	subs	r5, r5, r4
 800d3d0:	1963      	adds	r3, r4, r5
 800d3d2:	42bb      	cmp	r3, r7
 800d3d4:	db07      	blt.n	800d3e6 <__s2b+0x6a>
 800d3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3da:	0052      	lsls	r2, r2, #1
 800d3dc:	3101      	adds	r1, #1
 800d3de:	e7d9      	b.n	800d394 <__s2b+0x18>
 800d3e0:	340a      	adds	r4, #10
 800d3e2:	2509      	movs	r5, #9
 800d3e4:	e7f3      	b.n	800d3ce <__s2b+0x52>
 800d3e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d3ea:	4601      	mov	r1, r0
 800d3ec:	3b30      	subs	r3, #48	; 0x30
 800d3ee:	220a      	movs	r2, #10
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	f7ff ff88 	bl	800d306 <__multadd>
 800d3f6:	e7eb      	b.n	800d3d0 <__s2b+0x54>

0800d3f8 <__hi0bits>:
 800d3f8:	0c02      	lsrs	r2, r0, #16
 800d3fa:	0412      	lsls	r2, r2, #16
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	b9b2      	cbnz	r2, 800d42e <__hi0bits+0x36>
 800d400:	0403      	lsls	r3, r0, #16
 800d402:	2010      	movs	r0, #16
 800d404:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d408:	bf04      	itt	eq
 800d40a:	021b      	lsleq	r3, r3, #8
 800d40c:	3008      	addeq	r0, #8
 800d40e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d412:	bf04      	itt	eq
 800d414:	011b      	lsleq	r3, r3, #4
 800d416:	3004      	addeq	r0, #4
 800d418:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d41c:	bf04      	itt	eq
 800d41e:	009b      	lsleq	r3, r3, #2
 800d420:	3002      	addeq	r0, #2
 800d422:	2b00      	cmp	r3, #0
 800d424:	db06      	blt.n	800d434 <__hi0bits+0x3c>
 800d426:	005b      	lsls	r3, r3, #1
 800d428:	d503      	bpl.n	800d432 <__hi0bits+0x3a>
 800d42a:	3001      	adds	r0, #1
 800d42c:	4770      	bx	lr
 800d42e:	2000      	movs	r0, #0
 800d430:	e7e8      	b.n	800d404 <__hi0bits+0xc>
 800d432:	2020      	movs	r0, #32
 800d434:	4770      	bx	lr

0800d436 <__lo0bits>:
 800d436:	6803      	ldr	r3, [r0, #0]
 800d438:	f013 0207 	ands.w	r2, r3, #7
 800d43c:	4601      	mov	r1, r0
 800d43e:	d00b      	beq.n	800d458 <__lo0bits+0x22>
 800d440:	07da      	lsls	r2, r3, #31
 800d442:	d423      	bmi.n	800d48c <__lo0bits+0x56>
 800d444:	0798      	lsls	r0, r3, #30
 800d446:	bf49      	itett	mi
 800d448:	085b      	lsrmi	r3, r3, #1
 800d44a:	089b      	lsrpl	r3, r3, #2
 800d44c:	2001      	movmi	r0, #1
 800d44e:	600b      	strmi	r3, [r1, #0]
 800d450:	bf5c      	itt	pl
 800d452:	600b      	strpl	r3, [r1, #0]
 800d454:	2002      	movpl	r0, #2
 800d456:	4770      	bx	lr
 800d458:	b298      	uxth	r0, r3
 800d45a:	b9a8      	cbnz	r0, 800d488 <__lo0bits+0x52>
 800d45c:	0c1b      	lsrs	r3, r3, #16
 800d45e:	2010      	movs	r0, #16
 800d460:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d464:	bf04      	itt	eq
 800d466:	0a1b      	lsreq	r3, r3, #8
 800d468:	3008      	addeq	r0, #8
 800d46a:	071a      	lsls	r2, r3, #28
 800d46c:	bf04      	itt	eq
 800d46e:	091b      	lsreq	r3, r3, #4
 800d470:	3004      	addeq	r0, #4
 800d472:	079a      	lsls	r2, r3, #30
 800d474:	bf04      	itt	eq
 800d476:	089b      	lsreq	r3, r3, #2
 800d478:	3002      	addeq	r0, #2
 800d47a:	07da      	lsls	r2, r3, #31
 800d47c:	d402      	bmi.n	800d484 <__lo0bits+0x4e>
 800d47e:	085b      	lsrs	r3, r3, #1
 800d480:	d006      	beq.n	800d490 <__lo0bits+0x5a>
 800d482:	3001      	adds	r0, #1
 800d484:	600b      	str	r3, [r1, #0]
 800d486:	4770      	bx	lr
 800d488:	4610      	mov	r0, r2
 800d48a:	e7e9      	b.n	800d460 <__lo0bits+0x2a>
 800d48c:	2000      	movs	r0, #0
 800d48e:	4770      	bx	lr
 800d490:	2020      	movs	r0, #32
 800d492:	4770      	bx	lr

0800d494 <__i2b>:
 800d494:	b510      	push	{r4, lr}
 800d496:	460c      	mov	r4, r1
 800d498:	2101      	movs	r1, #1
 800d49a:	f7ff fee9 	bl	800d270 <_Balloc>
 800d49e:	2201      	movs	r2, #1
 800d4a0:	6144      	str	r4, [r0, #20]
 800d4a2:	6102      	str	r2, [r0, #16]
 800d4a4:	bd10      	pop	{r4, pc}

0800d4a6 <__multiply>:
 800d4a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4aa:	4614      	mov	r4, r2
 800d4ac:	690a      	ldr	r2, [r1, #16]
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	bfb8      	it	lt
 800d4b4:	460b      	movlt	r3, r1
 800d4b6:	4688      	mov	r8, r1
 800d4b8:	bfbc      	itt	lt
 800d4ba:	46a0      	movlt	r8, r4
 800d4bc:	461c      	movlt	r4, r3
 800d4be:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d4c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d4c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4ca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4ce:	eb07 0609 	add.w	r6, r7, r9
 800d4d2:	42b3      	cmp	r3, r6
 800d4d4:	bfb8      	it	lt
 800d4d6:	3101      	addlt	r1, #1
 800d4d8:	f7ff feca 	bl	800d270 <_Balloc>
 800d4dc:	f100 0514 	add.w	r5, r0, #20
 800d4e0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d4e4:	462b      	mov	r3, r5
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	4573      	cmp	r3, lr
 800d4ea:	d316      	bcc.n	800d51a <__multiply+0x74>
 800d4ec:	f104 0214 	add.w	r2, r4, #20
 800d4f0:	f108 0114 	add.w	r1, r8, #20
 800d4f4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d4f8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	9b00      	ldr	r3, [sp, #0]
 800d500:	9201      	str	r2, [sp, #4]
 800d502:	4293      	cmp	r3, r2
 800d504:	d80c      	bhi.n	800d520 <__multiply+0x7a>
 800d506:	2e00      	cmp	r6, #0
 800d508:	dd03      	ble.n	800d512 <__multiply+0x6c>
 800d50a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d05d      	beq.n	800d5ce <__multiply+0x128>
 800d512:	6106      	str	r6, [r0, #16]
 800d514:	b003      	add	sp, #12
 800d516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51a:	f843 2b04 	str.w	r2, [r3], #4
 800d51e:	e7e3      	b.n	800d4e8 <__multiply+0x42>
 800d520:	f8b2 b000 	ldrh.w	fp, [r2]
 800d524:	f1bb 0f00 	cmp.w	fp, #0
 800d528:	d023      	beq.n	800d572 <__multiply+0xcc>
 800d52a:	4689      	mov	r9, r1
 800d52c:	46ac      	mov	ip, r5
 800d52e:	f04f 0800 	mov.w	r8, #0
 800d532:	f859 4b04 	ldr.w	r4, [r9], #4
 800d536:	f8dc a000 	ldr.w	sl, [ip]
 800d53a:	b2a3      	uxth	r3, r4
 800d53c:	fa1f fa8a 	uxth.w	sl, sl
 800d540:	fb0b a303 	mla	r3, fp, r3, sl
 800d544:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d548:	f8dc 4000 	ldr.w	r4, [ip]
 800d54c:	4443      	add	r3, r8
 800d54e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d552:	fb0b 840a 	mla	r4, fp, sl, r8
 800d556:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d55a:	46e2      	mov	sl, ip
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d562:	454f      	cmp	r7, r9
 800d564:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d568:	f84a 3b04 	str.w	r3, [sl], #4
 800d56c:	d82b      	bhi.n	800d5c6 <__multiply+0x120>
 800d56e:	f8cc 8004 	str.w	r8, [ip, #4]
 800d572:	9b01      	ldr	r3, [sp, #4]
 800d574:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d578:	3204      	adds	r2, #4
 800d57a:	f1ba 0f00 	cmp.w	sl, #0
 800d57e:	d020      	beq.n	800d5c2 <__multiply+0x11c>
 800d580:	682b      	ldr	r3, [r5, #0]
 800d582:	4689      	mov	r9, r1
 800d584:	46a8      	mov	r8, r5
 800d586:	f04f 0b00 	mov.w	fp, #0
 800d58a:	f8b9 c000 	ldrh.w	ip, [r9]
 800d58e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d592:	fb0a 440c 	mla	r4, sl, ip, r4
 800d596:	445c      	add	r4, fp
 800d598:	46c4      	mov	ip, r8
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d5a0:	f84c 3b04 	str.w	r3, [ip], #4
 800d5a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5a8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d5ac:	0c1b      	lsrs	r3, r3, #16
 800d5ae:	fb0a b303 	mla	r3, sl, r3, fp
 800d5b2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d5b6:	454f      	cmp	r7, r9
 800d5b8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d5bc:	d805      	bhi.n	800d5ca <__multiply+0x124>
 800d5be:	f8c8 3004 	str.w	r3, [r8, #4]
 800d5c2:	3504      	adds	r5, #4
 800d5c4:	e79b      	b.n	800d4fe <__multiply+0x58>
 800d5c6:	46d4      	mov	ip, sl
 800d5c8:	e7b3      	b.n	800d532 <__multiply+0x8c>
 800d5ca:	46e0      	mov	r8, ip
 800d5cc:	e7dd      	b.n	800d58a <__multiply+0xe4>
 800d5ce:	3e01      	subs	r6, #1
 800d5d0:	e799      	b.n	800d506 <__multiply+0x60>
	...

0800d5d4 <__pow5mult>:
 800d5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5d8:	4615      	mov	r5, r2
 800d5da:	f012 0203 	ands.w	r2, r2, #3
 800d5de:	4606      	mov	r6, r0
 800d5e0:	460f      	mov	r7, r1
 800d5e2:	d007      	beq.n	800d5f4 <__pow5mult+0x20>
 800d5e4:	3a01      	subs	r2, #1
 800d5e6:	4c21      	ldr	r4, [pc, #132]	; (800d66c <__pow5mult+0x98>)
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5ee:	f7ff fe8a 	bl	800d306 <__multadd>
 800d5f2:	4607      	mov	r7, r0
 800d5f4:	10ad      	asrs	r5, r5, #2
 800d5f6:	d035      	beq.n	800d664 <__pow5mult+0x90>
 800d5f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d5fa:	b93c      	cbnz	r4, 800d60c <__pow5mult+0x38>
 800d5fc:	2010      	movs	r0, #16
 800d5fe:	f7ff fe2f 	bl	800d260 <malloc>
 800d602:	6270      	str	r0, [r6, #36]	; 0x24
 800d604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d608:	6004      	str	r4, [r0, #0]
 800d60a:	60c4      	str	r4, [r0, #12]
 800d60c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d614:	b94c      	cbnz	r4, 800d62a <__pow5mult+0x56>
 800d616:	f240 2171 	movw	r1, #625	; 0x271
 800d61a:	4630      	mov	r0, r6
 800d61c:	f7ff ff3a 	bl	800d494 <__i2b>
 800d620:	2300      	movs	r3, #0
 800d622:	f8c8 0008 	str.w	r0, [r8, #8]
 800d626:	4604      	mov	r4, r0
 800d628:	6003      	str	r3, [r0, #0]
 800d62a:	f04f 0800 	mov.w	r8, #0
 800d62e:	07eb      	lsls	r3, r5, #31
 800d630:	d50a      	bpl.n	800d648 <__pow5mult+0x74>
 800d632:	4639      	mov	r1, r7
 800d634:	4622      	mov	r2, r4
 800d636:	4630      	mov	r0, r6
 800d638:	f7ff ff35 	bl	800d4a6 <__multiply>
 800d63c:	4639      	mov	r1, r7
 800d63e:	4681      	mov	r9, r0
 800d640:	4630      	mov	r0, r6
 800d642:	f7ff fe49 	bl	800d2d8 <_Bfree>
 800d646:	464f      	mov	r7, r9
 800d648:	106d      	asrs	r5, r5, #1
 800d64a:	d00b      	beq.n	800d664 <__pow5mult+0x90>
 800d64c:	6820      	ldr	r0, [r4, #0]
 800d64e:	b938      	cbnz	r0, 800d660 <__pow5mult+0x8c>
 800d650:	4622      	mov	r2, r4
 800d652:	4621      	mov	r1, r4
 800d654:	4630      	mov	r0, r6
 800d656:	f7ff ff26 	bl	800d4a6 <__multiply>
 800d65a:	6020      	str	r0, [r4, #0]
 800d65c:	f8c0 8000 	str.w	r8, [r0]
 800d660:	4604      	mov	r4, r0
 800d662:	e7e4      	b.n	800d62e <__pow5mult+0x5a>
 800d664:	4638      	mov	r0, r7
 800d666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d66a:	bf00      	nop
 800d66c:	0800ebb0 	.word	0x0800ebb0

0800d670 <__lshift>:
 800d670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d674:	460c      	mov	r4, r1
 800d676:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d67a:	6923      	ldr	r3, [r4, #16]
 800d67c:	6849      	ldr	r1, [r1, #4]
 800d67e:	eb0a 0903 	add.w	r9, sl, r3
 800d682:	68a3      	ldr	r3, [r4, #8]
 800d684:	4607      	mov	r7, r0
 800d686:	4616      	mov	r6, r2
 800d688:	f109 0501 	add.w	r5, r9, #1
 800d68c:	42ab      	cmp	r3, r5
 800d68e:	db32      	blt.n	800d6f6 <__lshift+0x86>
 800d690:	4638      	mov	r0, r7
 800d692:	f7ff fded 	bl	800d270 <_Balloc>
 800d696:	2300      	movs	r3, #0
 800d698:	4680      	mov	r8, r0
 800d69a:	f100 0114 	add.w	r1, r0, #20
 800d69e:	461a      	mov	r2, r3
 800d6a0:	4553      	cmp	r3, sl
 800d6a2:	db2b      	blt.n	800d6fc <__lshift+0x8c>
 800d6a4:	6920      	ldr	r0, [r4, #16]
 800d6a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6aa:	f104 0314 	add.w	r3, r4, #20
 800d6ae:	f016 021f 	ands.w	r2, r6, #31
 800d6b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6b6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6ba:	d025      	beq.n	800d708 <__lshift+0x98>
 800d6bc:	f1c2 0e20 	rsb	lr, r2, #32
 800d6c0:	2000      	movs	r0, #0
 800d6c2:	681e      	ldr	r6, [r3, #0]
 800d6c4:	468a      	mov	sl, r1
 800d6c6:	4096      	lsls	r6, r2
 800d6c8:	4330      	orrs	r0, r6
 800d6ca:	f84a 0b04 	str.w	r0, [sl], #4
 800d6ce:	f853 0b04 	ldr.w	r0, [r3], #4
 800d6d2:	459c      	cmp	ip, r3
 800d6d4:	fa20 f00e 	lsr.w	r0, r0, lr
 800d6d8:	d814      	bhi.n	800d704 <__lshift+0x94>
 800d6da:	6048      	str	r0, [r1, #4]
 800d6dc:	b108      	cbz	r0, 800d6e2 <__lshift+0x72>
 800d6de:	f109 0502 	add.w	r5, r9, #2
 800d6e2:	3d01      	subs	r5, #1
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	f8c8 5010 	str.w	r5, [r8, #16]
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	f7ff fdf4 	bl	800d2d8 <_Bfree>
 800d6f0:	4640      	mov	r0, r8
 800d6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f6:	3101      	adds	r1, #1
 800d6f8:	005b      	lsls	r3, r3, #1
 800d6fa:	e7c7      	b.n	800d68c <__lshift+0x1c>
 800d6fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d700:	3301      	adds	r3, #1
 800d702:	e7cd      	b.n	800d6a0 <__lshift+0x30>
 800d704:	4651      	mov	r1, sl
 800d706:	e7dc      	b.n	800d6c2 <__lshift+0x52>
 800d708:	3904      	subs	r1, #4
 800d70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d70e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d712:	459c      	cmp	ip, r3
 800d714:	d8f9      	bhi.n	800d70a <__lshift+0x9a>
 800d716:	e7e4      	b.n	800d6e2 <__lshift+0x72>

0800d718 <__mcmp>:
 800d718:	6903      	ldr	r3, [r0, #16]
 800d71a:	690a      	ldr	r2, [r1, #16]
 800d71c:	1a9b      	subs	r3, r3, r2
 800d71e:	b530      	push	{r4, r5, lr}
 800d720:	d10c      	bne.n	800d73c <__mcmp+0x24>
 800d722:	0092      	lsls	r2, r2, #2
 800d724:	3014      	adds	r0, #20
 800d726:	3114      	adds	r1, #20
 800d728:	1884      	adds	r4, r0, r2
 800d72a:	4411      	add	r1, r2
 800d72c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d730:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d734:	4295      	cmp	r5, r2
 800d736:	d003      	beq.n	800d740 <__mcmp+0x28>
 800d738:	d305      	bcc.n	800d746 <__mcmp+0x2e>
 800d73a:	2301      	movs	r3, #1
 800d73c:	4618      	mov	r0, r3
 800d73e:	bd30      	pop	{r4, r5, pc}
 800d740:	42a0      	cmp	r0, r4
 800d742:	d3f3      	bcc.n	800d72c <__mcmp+0x14>
 800d744:	e7fa      	b.n	800d73c <__mcmp+0x24>
 800d746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d74a:	e7f7      	b.n	800d73c <__mcmp+0x24>

0800d74c <__mdiff>:
 800d74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d750:	460d      	mov	r5, r1
 800d752:	4607      	mov	r7, r0
 800d754:	4611      	mov	r1, r2
 800d756:	4628      	mov	r0, r5
 800d758:	4614      	mov	r4, r2
 800d75a:	f7ff ffdd 	bl	800d718 <__mcmp>
 800d75e:	1e06      	subs	r6, r0, #0
 800d760:	d108      	bne.n	800d774 <__mdiff+0x28>
 800d762:	4631      	mov	r1, r6
 800d764:	4638      	mov	r0, r7
 800d766:	f7ff fd83 	bl	800d270 <_Balloc>
 800d76a:	2301      	movs	r3, #1
 800d76c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d774:	bfa4      	itt	ge
 800d776:	4623      	movge	r3, r4
 800d778:	462c      	movge	r4, r5
 800d77a:	4638      	mov	r0, r7
 800d77c:	6861      	ldr	r1, [r4, #4]
 800d77e:	bfa6      	itte	ge
 800d780:	461d      	movge	r5, r3
 800d782:	2600      	movge	r6, #0
 800d784:	2601      	movlt	r6, #1
 800d786:	f7ff fd73 	bl	800d270 <_Balloc>
 800d78a:	692b      	ldr	r3, [r5, #16]
 800d78c:	60c6      	str	r6, [r0, #12]
 800d78e:	6926      	ldr	r6, [r4, #16]
 800d790:	f105 0914 	add.w	r9, r5, #20
 800d794:	f104 0214 	add.w	r2, r4, #20
 800d798:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d79c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d7a0:	f100 0514 	add.w	r5, r0, #20
 800d7a4:	f04f 0e00 	mov.w	lr, #0
 800d7a8:	f852 ab04 	ldr.w	sl, [r2], #4
 800d7ac:	f859 4b04 	ldr.w	r4, [r9], #4
 800d7b0:	fa1e f18a 	uxtah	r1, lr, sl
 800d7b4:	b2a3      	uxth	r3, r4
 800d7b6:	1ac9      	subs	r1, r1, r3
 800d7b8:	0c23      	lsrs	r3, r4, #16
 800d7ba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d7be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d7c2:	b289      	uxth	r1, r1
 800d7c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d7c8:	45c8      	cmp	r8, r9
 800d7ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d7ce:	4694      	mov	ip, r2
 800d7d0:	f845 3b04 	str.w	r3, [r5], #4
 800d7d4:	d8e8      	bhi.n	800d7a8 <__mdiff+0x5c>
 800d7d6:	45bc      	cmp	ip, r7
 800d7d8:	d304      	bcc.n	800d7e4 <__mdiff+0x98>
 800d7da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d7de:	b183      	cbz	r3, 800d802 <__mdiff+0xb6>
 800d7e0:	6106      	str	r6, [r0, #16]
 800d7e2:	e7c5      	b.n	800d770 <__mdiff+0x24>
 800d7e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d7e8:	fa1e f381 	uxtah	r3, lr, r1
 800d7ec:	141a      	asrs	r2, r3, #16
 800d7ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d7fc:	f845 3b04 	str.w	r3, [r5], #4
 800d800:	e7e9      	b.n	800d7d6 <__mdiff+0x8a>
 800d802:	3e01      	subs	r6, #1
 800d804:	e7e9      	b.n	800d7da <__mdiff+0x8e>
	...

0800d808 <__ulp>:
 800d808:	4b12      	ldr	r3, [pc, #72]	; (800d854 <__ulp+0x4c>)
 800d80a:	ee10 2a90 	vmov	r2, s1
 800d80e:	401a      	ands	r2, r3
 800d810:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d814:	2b00      	cmp	r3, #0
 800d816:	dd04      	ble.n	800d822 <__ulp+0x1a>
 800d818:	2000      	movs	r0, #0
 800d81a:	4619      	mov	r1, r3
 800d81c:	ec41 0b10 	vmov	d0, r0, r1
 800d820:	4770      	bx	lr
 800d822:	425b      	negs	r3, r3
 800d824:	151b      	asrs	r3, r3, #20
 800d826:	2b13      	cmp	r3, #19
 800d828:	f04f 0000 	mov.w	r0, #0
 800d82c:	f04f 0100 	mov.w	r1, #0
 800d830:	dc04      	bgt.n	800d83c <__ulp+0x34>
 800d832:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d836:	fa42 f103 	asr.w	r1, r2, r3
 800d83a:	e7ef      	b.n	800d81c <__ulp+0x14>
 800d83c:	3b14      	subs	r3, #20
 800d83e:	2b1e      	cmp	r3, #30
 800d840:	f04f 0201 	mov.w	r2, #1
 800d844:	bfda      	itte	le
 800d846:	f1c3 031f 	rsble	r3, r3, #31
 800d84a:	fa02 f303 	lslle.w	r3, r2, r3
 800d84e:	4613      	movgt	r3, r2
 800d850:	4618      	mov	r0, r3
 800d852:	e7e3      	b.n	800d81c <__ulp+0x14>
 800d854:	7ff00000 	.word	0x7ff00000

0800d858 <__b2d>:
 800d858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85a:	6905      	ldr	r5, [r0, #16]
 800d85c:	f100 0714 	add.w	r7, r0, #20
 800d860:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d864:	1f2e      	subs	r6, r5, #4
 800d866:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d86a:	4620      	mov	r0, r4
 800d86c:	f7ff fdc4 	bl	800d3f8 <__hi0bits>
 800d870:	f1c0 0320 	rsb	r3, r0, #32
 800d874:	280a      	cmp	r0, #10
 800d876:	600b      	str	r3, [r1, #0]
 800d878:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d8f0 <__b2d+0x98>
 800d87c:	dc14      	bgt.n	800d8a8 <__b2d+0x50>
 800d87e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d882:	fa24 f10e 	lsr.w	r1, r4, lr
 800d886:	42b7      	cmp	r7, r6
 800d888:	ea41 030c 	orr.w	r3, r1, ip
 800d88c:	bf34      	ite	cc
 800d88e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d892:	2100      	movcs	r1, #0
 800d894:	3015      	adds	r0, #21
 800d896:	fa04 f000 	lsl.w	r0, r4, r0
 800d89a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d89e:	ea40 0201 	orr.w	r2, r0, r1
 800d8a2:	ec43 2b10 	vmov	d0, r2, r3
 800d8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8a8:	42b7      	cmp	r7, r6
 800d8aa:	bf3a      	itte	cc
 800d8ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800d8b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d8b4:	2100      	movcs	r1, #0
 800d8b6:	380b      	subs	r0, #11
 800d8b8:	d015      	beq.n	800d8e6 <__b2d+0x8e>
 800d8ba:	4084      	lsls	r4, r0
 800d8bc:	f1c0 0520 	rsb	r5, r0, #32
 800d8c0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d8c4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d8c8:	42be      	cmp	r6, r7
 800d8ca:	fa21 fc05 	lsr.w	ip, r1, r5
 800d8ce:	ea44 030c 	orr.w	r3, r4, ip
 800d8d2:	bf8c      	ite	hi
 800d8d4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d8d8:	2400      	movls	r4, #0
 800d8da:	fa01 f000 	lsl.w	r0, r1, r0
 800d8de:	40ec      	lsrs	r4, r5
 800d8e0:	ea40 0204 	orr.w	r2, r0, r4
 800d8e4:	e7dd      	b.n	800d8a2 <__b2d+0x4a>
 800d8e6:	ea44 030c 	orr.w	r3, r4, ip
 800d8ea:	460a      	mov	r2, r1
 800d8ec:	e7d9      	b.n	800d8a2 <__b2d+0x4a>
 800d8ee:	bf00      	nop
 800d8f0:	3ff00000 	.word	0x3ff00000

0800d8f4 <__d2b>:
 800d8f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8f8:	460e      	mov	r6, r1
 800d8fa:	2101      	movs	r1, #1
 800d8fc:	ec59 8b10 	vmov	r8, r9, d0
 800d900:	4615      	mov	r5, r2
 800d902:	f7ff fcb5 	bl	800d270 <_Balloc>
 800d906:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d90a:	4607      	mov	r7, r0
 800d90c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d910:	bb34      	cbnz	r4, 800d960 <__d2b+0x6c>
 800d912:	9301      	str	r3, [sp, #4]
 800d914:	f1b8 0300 	subs.w	r3, r8, #0
 800d918:	d027      	beq.n	800d96a <__d2b+0x76>
 800d91a:	a802      	add	r0, sp, #8
 800d91c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d920:	f7ff fd89 	bl	800d436 <__lo0bits>
 800d924:	9900      	ldr	r1, [sp, #0]
 800d926:	b1f0      	cbz	r0, 800d966 <__d2b+0x72>
 800d928:	9a01      	ldr	r2, [sp, #4]
 800d92a:	f1c0 0320 	rsb	r3, r0, #32
 800d92e:	fa02 f303 	lsl.w	r3, r2, r3
 800d932:	430b      	orrs	r3, r1
 800d934:	40c2      	lsrs	r2, r0
 800d936:	617b      	str	r3, [r7, #20]
 800d938:	9201      	str	r2, [sp, #4]
 800d93a:	9b01      	ldr	r3, [sp, #4]
 800d93c:	61bb      	str	r3, [r7, #24]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	bf14      	ite	ne
 800d942:	2102      	movne	r1, #2
 800d944:	2101      	moveq	r1, #1
 800d946:	6139      	str	r1, [r7, #16]
 800d948:	b1c4      	cbz	r4, 800d97c <__d2b+0x88>
 800d94a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d94e:	4404      	add	r4, r0
 800d950:	6034      	str	r4, [r6, #0]
 800d952:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d956:	6028      	str	r0, [r5, #0]
 800d958:	4638      	mov	r0, r7
 800d95a:	b003      	add	sp, #12
 800d95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d964:	e7d5      	b.n	800d912 <__d2b+0x1e>
 800d966:	6179      	str	r1, [r7, #20]
 800d968:	e7e7      	b.n	800d93a <__d2b+0x46>
 800d96a:	a801      	add	r0, sp, #4
 800d96c:	f7ff fd63 	bl	800d436 <__lo0bits>
 800d970:	9b01      	ldr	r3, [sp, #4]
 800d972:	617b      	str	r3, [r7, #20]
 800d974:	2101      	movs	r1, #1
 800d976:	6139      	str	r1, [r7, #16]
 800d978:	3020      	adds	r0, #32
 800d97a:	e7e5      	b.n	800d948 <__d2b+0x54>
 800d97c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d980:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d984:	6030      	str	r0, [r6, #0]
 800d986:	6918      	ldr	r0, [r3, #16]
 800d988:	f7ff fd36 	bl	800d3f8 <__hi0bits>
 800d98c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d990:	e7e1      	b.n	800d956 <__d2b+0x62>

0800d992 <__ratio>:
 800d992:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d996:	4688      	mov	r8, r1
 800d998:	4669      	mov	r1, sp
 800d99a:	4681      	mov	r9, r0
 800d99c:	f7ff ff5c 	bl	800d858 <__b2d>
 800d9a0:	a901      	add	r1, sp, #4
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	ec57 6b10 	vmov	r6, r7, d0
 800d9a8:	f7ff ff56 	bl	800d858 <__b2d>
 800d9ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d9b4:	eba3 0c02 	sub.w	ip, r3, r2
 800d9b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d9bc:	1a9b      	subs	r3, r3, r2
 800d9be:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d9c2:	ec5b ab10 	vmov	sl, fp, d0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	bfce      	itee	gt
 800d9ca:	463a      	movgt	r2, r7
 800d9cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d9d0:	465a      	movle	r2, fp
 800d9d2:	4659      	mov	r1, fp
 800d9d4:	463d      	mov	r5, r7
 800d9d6:	bfd4      	ite	le
 800d9d8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d9dc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	ee10 2a10 	vmov	r2, s0
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	4629      	mov	r1, r5
 800d9ea:	f7f2 ff37 	bl	800085c <__aeabi_ddiv>
 800d9ee:	ec41 0b10 	vmov	d0, r0, r1
 800d9f2:	b003      	add	sp, #12
 800d9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9f8 <__copybits>:
 800d9f8:	3901      	subs	r1, #1
 800d9fa:	b510      	push	{r4, lr}
 800d9fc:	1149      	asrs	r1, r1, #5
 800d9fe:	6914      	ldr	r4, [r2, #16]
 800da00:	3101      	adds	r1, #1
 800da02:	f102 0314 	add.w	r3, r2, #20
 800da06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da0e:	42a3      	cmp	r3, r4
 800da10:	4602      	mov	r2, r0
 800da12:	d303      	bcc.n	800da1c <__copybits+0x24>
 800da14:	2300      	movs	r3, #0
 800da16:	428a      	cmp	r2, r1
 800da18:	d305      	bcc.n	800da26 <__copybits+0x2e>
 800da1a:	bd10      	pop	{r4, pc}
 800da1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da20:	f840 2b04 	str.w	r2, [r0], #4
 800da24:	e7f3      	b.n	800da0e <__copybits+0x16>
 800da26:	f842 3b04 	str.w	r3, [r2], #4
 800da2a:	e7f4      	b.n	800da16 <__copybits+0x1e>

0800da2c <__any_on>:
 800da2c:	f100 0214 	add.w	r2, r0, #20
 800da30:	6900      	ldr	r0, [r0, #16]
 800da32:	114b      	asrs	r3, r1, #5
 800da34:	4298      	cmp	r0, r3
 800da36:	b510      	push	{r4, lr}
 800da38:	db11      	blt.n	800da5e <__any_on+0x32>
 800da3a:	dd0a      	ble.n	800da52 <__any_on+0x26>
 800da3c:	f011 011f 	ands.w	r1, r1, #31
 800da40:	d007      	beq.n	800da52 <__any_on+0x26>
 800da42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da46:	fa24 f001 	lsr.w	r0, r4, r1
 800da4a:	fa00 f101 	lsl.w	r1, r0, r1
 800da4e:	428c      	cmp	r4, r1
 800da50:	d10b      	bne.n	800da6a <__any_on+0x3e>
 800da52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da56:	4293      	cmp	r3, r2
 800da58:	d803      	bhi.n	800da62 <__any_on+0x36>
 800da5a:	2000      	movs	r0, #0
 800da5c:	bd10      	pop	{r4, pc}
 800da5e:	4603      	mov	r3, r0
 800da60:	e7f7      	b.n	800da52 <__any_on+0x26>
 800da62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da66:	2900      	cmp	r1, #0
 800da68:	d0f5      	beq.n	800da56 <__any_on+0x2a>
 800da6a:	2001      	movs	r0, #1
 800da6c:	e7f6      	b.n	800da5c <__any_on+0x30>

0800da6e <_calloc_r>:
 800da6e:	b538      	push	{r3, r4, r5, lr}
 800da70:	fb02 f401 	mul.w	r4, r2, r1
 800da74:	4621      	mov	r1, r4
 800da76:	f000 f857 	bl	800db28 <_malloc_r>
 800da7a:	4605      	mov	r5, r0
 800da7c:	b118      	cbz	r0, 800da86 <_calloc_r+0x18>
 800da7e:	4622      	mov	r2, r4
 800da80:	2100      	movs	r1, #0
 800da82:	f7fc fa2f 	bl	8009ee4 <memset>
 800da86:	4628      	mov	r0, r5
 800da88:	bd38      	pop	{r3, r4, r5, pc}
	...

0800da8c <_free_r>:
 800da8c:	b538      	push	{r3, r4, r5, lr}
 800da8e:	4605      	mov	r5, r0
 800da90:	2900      	cmp	r1, #0
 800da92:	d045      	beq.n	800db20 <_free_r+0x94>
 800da94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da98:	1f0c      	subs	r4, r1, #4
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	bfb8      	it	lt
 800da9e:	18e4      	addlt	r4, r4, r3
 800daa0:	f000 fc03 	bl	800e2aa <__malloc_lock>
 800daa4:	4a1f      	ldr	r2, [pc, #124]	; (800db24 <_free_r+0x98>)
 800daa6:	6813      	ldr	r3, [r2, #0]
 800daa8:	4610      	mov	r0, r2
 800daaa:	b933      	cbnz	r3, 800daba <_free_r+0x2e>
 800daac:	6063      	str	r3, [r4, #4]
 800daae:	6014      	str	r4, [r2, #0]
 800dab0:	4628      	mov	r0, r5
 800dab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dab6:	f000 bbf9 	b.w	800e2ac <__malloc_unlock>
 800daba:	42a3      	cmp	r3, r4
 800dabc:	d90c      	bls.n	800dad8 <_free_r+0x4c>
 800dabe:	6821      	ldr	r1, [r4, #0]
 800dac0:	1862      	adds	r2, r4, r1
 800dac2:	4293      	cmp	r3, r2
 800dac4:	bf04      	itt	eq
 800dac6:	681a      	ldreq	r2, [r3, #0]
 800dac8:	685b      	ldreq	r3, [r3, #4]
 800daca:	6063      	str	r3, [r4, #4]
 800dacc:	bf04      	itt	eq
 800dace:	1852      	addeq	r2, r2, r1
 800dad0:	6022      	streq	r2, [r4, #0]
 800dad2:	6004      	str	r4, [r0, #0]
 800dad4:	e7ec      	b.n	800dab0 <_free_r+0x24>
 800dad6:	4613      	mov	r3, r2
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	b10a      	cbz	r2, 800dae0 <_free_r+0x54>
 800dadc:	42a2      	cmp	r2, r4
 800dade:	d9fa      	bls.n	800dad6 <_free_r+0x4a>
 800dae0:	6819      	ldr	r1, [r3, #0]
 800dae2:	1858      	adds	r0, r3, r1
 800dae4:	42a0      	cmp	r0, r4
 800dae6:	d10b      	bne.n	800db00 <_free_r+0x74>
 800dae8:	6820      	ldr	r0, [r4, #0]
 800daea:	4401      	add	r1, r0
 800daec:	1858      	adds	r0, r3, r1
 800daee:	4282      	cmp	r2, r0
 800daf0:	6019      	str	r1, [r3, #0]
 800daf2:	d1dd      	bne.n	800dab0 <_free_r+0x24>
 800daf4:	6810      	ldr	r0, [r2, #0]
 800daf6:	6852      	ldr	r2, [r2, #4]
 800daf8:	605a      	str	r2, [r3, #4]
 800dafa:	4401      	add	r1, r0
 800dafc:	6019      	str	r1, [r3, #0]
 800dafe:	e7d7      	b.n	800dab0 <_free_r+0x24>
 800db00:	d902      	bls.n	800db08 <_free_r+0x7c>
 800db02:	230c      	movs	r3, #12
 800db04:	602b      	str	r3, [r5, #0]
 800db06:	e7d3      	b.n	800dab0 <_free_r+0x24>
 800db08:	6820      	ldr	r0, [r4, #0]
 800db0a:	1821      	adds	r1, r4, r0
 800db0c:	428a      	cmp	r2, r1
 800db0e:	bf04      	itt	eq
 800db10:	6811      	ldreq	r1, [r2, #0]
 800db12:	6852      	ldreq	r2, [r2, #4]
 800db14:	6062      	str	r2, [r4, #4]
 800db16:	bf04      	itt	eq
 800db18:	1809      	addeq	r1, r1, r0
 800db1a:	6021      	streq	r1, [r4, #0]
 800db1c:	605c      	str	r4, [r3, #4]
 800db1e:	e7c7      	b.n	800dab0 <_free_r+0x24>
 800db20:	bd38      	pop	{r3, r4, r5, pc}
 800db22:	bf00      	nop
 800db24:	2000436c 	.word	0x2000436c

0800db28 <_malloc_r>:
 800db28:	b570      	push	{r4, r5, r6, lr}
 800db2a:	1ccd      	adds	r5, r1, #3
 800db2c:	f025 0503 	bic.w	r5, r5, #3
 800db30:	3508      	adds	r5, #8
 800db32:	2d0c      	cmp	r5, #12
 800db34:	bf38      	it	cc
 800db36:	250c      	movcc	r5, #12
 800db38:	2d00      	cmp	r5, #0
 800db3a:	4606      	mov	r6, r0
 800db3c:	db01      	blt.n	800db42 <_malloc_r+0x1a>
 800db3e:	42a9      	cmp	r1, r5
 800db40:	d903      	bls.n	800db4a <_malloc_r+0x22>
 800db42:	230c      	movs	r3, #12
 800db44:	6033      	str	r3, [r6, #0]
 800db46:	2000      	movs	r0, #0
 800db48:	bd70      	pop	{r4, r5, r6, pc}
 800db4a:	f000 fbae 	bl	800e2aa <__malloc_lock>
 800db4e:	4a21      	ldr	r2, [pc, #132]	; (800dbd4 <_malloc_r+0xac>)
 800db50:	6814      	ldr	r4, [r2, #0]
 800db52:	4621      	mov	r1, r4
 800db54:	b991      	cbnz	r1, 800db7c <_malloc_r+0x54>
 800db56:	4c20      	ldr	r4, [pc, #128]	; (800dbd8 <_malloc_r+0xb0>)
 800db58:	6823      	ldr	r3, [r4, #0]
 800db5a:	b91b      	cbnz	r3, 800db64 <_malloc_r+0x3c>
 800db5c:	4630      	mov	r0, r6
 800db5e:	f000 facf 	bl	800e100 <_sbrk_r>
 800db62:	6020      	str	r0, [r4, #0]
 800db64:	4629      	mov	r1, r5
 800db66:	4630      	mov	r0, r6
 800db68:	f000 faca 	bl	800e100 <_sbrk_r>
 800db6c:	1c43      	adds	r3, r0, #1
 800db6e:	d124      	bne.n	800dbba <_malloc_r+0x92>
 800db70:	230c      	movs	r3, #12
 800db72:	6033      	str	r3, [r6, #0]
 800db74:	4630      	mov	r0, r6
 800db76:	f000 fb99 	bl	800e2ac <__malloc_unlock>
 800db7a:	e7e4      	b.n	800db46 <_malloc_r+0x1e>
 800db7c:	680b      	ldr	r3, [r1, #0]
 800db7e:	1b5b      	subs	r3, r3, r5
 800db80:	d418      	bmi.n	800dbb4 <_malloc_r+0x8c>
 800db82:	2b0b      	cmp	r3, #11
 800db84:	d90f      	bls.n	800dba6 <_malloc_r+0x7e>
 800db86:	600b      	str	r3, [r1, #0]
 800db88:	50cd      	str	r5, [r1, r3]
 800db8a:	18cc      	adds	r4, r1, r3
 800db8c:	4630      	mov	r0, r6
 800db8e:	f000 fb8d 	bl	800e2ac <__malloc_unlock>
 800db92:	f104 000b 	add.w	r0, r4, #11
 800db96:	1d23      	adds	r3, r4, #4
 800db98:	f020 0007 	bic.w	r0, r0, #7
 800db9c:	1ac3      	subs	r3, r0, r3
 800db9e:	d0d3      	beq.n	800db48 <_malloc_r+0x20>
 800dba0:	425a      	negs	r2, r3
 800dba2:	50e2      	str	r2, [r4, r3]
 800dba4:	e7d0      	b.n	800db48 <_malloc_r+0x20>
 800dba6:	428c      	cmp	r4, r1
 800dba8:	684b      	ldr	r3, [r1, #4]
 800dbaa:	bf16      	itet	ne
 800dbac:	6063      	strne	r3, [r4, #4]
 800dbae:	6013      	streq	r3, [r2, #0]
 800dbb0:	460c      	movne	r4, r1
 800dbb2:	e7eb      	b.n	800db8c <_malloc_r+0x64>
 800dbb4:	460c      	mov	r4, r1
 800dbb6:	6849      	ldr	r1, [r1, #4]
 800dbb8:	e7cc      	b.n	800db54 <_malloc_r+0x2c>
 800dbba:	1cc4      	adds	r4, r0, #3
 800dbbc:	f024 0403 	bic.w	r4, r4, #3
 800dbc0:	42a0      	cmp	r0, r4
 800dbc2:	d005      	beq.n	800dbd0 <_malloc_r+0xa8>
 800dbc4:	1a21      	subs	r1, r4, r0
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	f000 fa9a 	bl	800e100 <_sbrk_r>
 800dbcc:	3001      	adds	r0, #1
 800dbce:	d0cf      	beq.n	800db70 <_malloc_r+0x48>
 800dbd0:	6025      	str	r5, [r4, #0]
 800dbd2:	e7db      	b.n	800db8c <_malloc_r+0x64>
 800dbd4:	2000436c 	.word	0x2000436c
 800dbd8:	20004370 	.word	0x20004370

0800dbdc <__ssputs_r>:
 800dbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbe0:	688e      	ldr	r6, [r1, #8]
 800dbe2:	429e      	cmp	r6, r3
 800dbe4:	4682      	mov	sl, r0
 800dbe6:	460c      	mov	r4, r1
 800dbe8:	4690      	mov	r8, r2
 800dbea:	4699      	mov	r9, r3
 800dbec:	d837      	bhi.n	800dc5e <__ssputs_r+0x82>
 800dbee:	898a      	ldrh	r2, [r1, #12]
 800dbf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbf4:	d031      	beq.n	800dc5a <__ssputs_r+0x7e>
 800dbf6:	6825      	ldr	r5, [r4, #0]
 800dbf8:	6909      	ldr	r1, [r1, #16]
 800dbfa:	1a6f      	subs	r7, r5, r1
 800dbfc:	6965      	ldr	r5, [r4, #20]
 800dbfe:	2302      	movs	r3, #2
 800dc00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc04:	fb95 f5f3 	sdiv	r5, r5, r3
 800dc08:	f109 0301 	add.w	r3, r9, #1
 800dc0c:	443b      	add	r3, r7
 800dc0e:	429d      	cmp	r5, r3
 800dc10:	bf38      	it	cc
 800dc12:	461d      	movcc	r5, r3
 800dc14:	0553      	lsls	r3, r2, #21
 800dc16:	d530      	bpl.n	800dc7a <__ssputs_r+0x9e>
 800dc18:	4629      	mov	r1, r5
 800dc1a:	f7ff ff85 	bl	800db28 <_malloc_r>
 800dc1e:	4606      	mov	r6, r0
 800dc20:	b950      	cbnz	r0, 800dc38 <__ssputs_r+0x5c>
 800dc22:	230c      	movs	r3, #12
 800dc24:	f8ca 3000 	str.w	r3, [sl]
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc2e:	81a3      	strh	r3, [r4, #12]
 800dc30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc38:	463a      	mov	r2, r7
 800dc3a:	6921      	ldr	r1, [r4, #16]
 800dc3c:	f7fc f947 	bl	8009ece <memcpy>
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc4a:	81a3      	strh	r3, [r4, #12]
 800dc4c:	6126      	str	r6, [r4, #16]
 800dc4e:	6165      	str	r5, [r4, #20]
 800dc50:	443e      	add	r6, r7
 800dc52:	1bed      	subs	r5, r5, r7
 800dc54:	6026      	str	r6, [r4, #0]
 800dc56:	60a5      	str	r5, [r4, #8]
 800dc58:	464e      	mov	r6, r9
 800dc5a:	454e      	cmp	r6, r9
 800dc5c:	d900      	bls.n	800dc60 <__ssputs_r+0x84>
 800dc5e:	464e      	mov	r6, r9
 800dc60:	4632      	mov	r2, r6
 800dc62:	4641      	mov	r1, r8
 800dc64:	6820      	ldr	r0, [r4, #0]
 800dc66:	f000 fb07 	bl	800e278 <memmove>
 800dc6a:	68a3      	ldr	r3, [r4, #8]
 800dc6c:	1b9b      	subs	r3, r3, r6
 800dc6e:	60a3      	str	r3, [r4, #8]
 800dc70:	6823      	ldr	r3, [r4, #0]
 800dc72:	441e      	add	r6, r3
 800dc74:	6026      	str	r6, [r4, #0]
 800dc76:	2000      	movs	r0, #0
 800dc78:	e7dc      	b.n	800dc34 <__ssputs_r+0x58>
 800dc7a:	462a      	mov	r2, r5
 800dc7c:	f000 fb17 	bl	800e2ae <_realloc_r>
 800dc80:	4606      	mov	r6, r0
 800dc82:	2800      	cmp	r0, #0
 800dc84:	d1e2      	bne.n	800dc4c <__ssputs_r+0x70>
 800dc86:	6921      	ldr	r1, [r4, #16]
 800dc88:	4650      	mov	r0, sl
 800dc8a:	f7ff feff 	bl	800da8c <_free_r>
 800dc8e:	e7c8      	b.n	800dc22 <__ssputs_r+0x46>

0800dc90 <_svfiprintf_r>:
 800dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	461d      	mov	r5, r3
 800dc96:	898b      	ldrh	r3, [r1, #12]
 800dc98:	061f      	lsls	r7, r3, #24
 800dc9a:	b09d      	sub	sp, #116	; 0x74
 800dc9c:	4680      	mov	r8, r0
 800dc9e:	460c      	mov	r4, r1
 800dca0:	4616      	mov	r6, r2
 800dca2:	d50f      	bpl.n	800dcc4 <_svfiprintf_r+0x34>
 800dca4:	690b      	ldr	r3, [r1, #16]
 800dca6:	b96b      	cbnz	r3, 800dcc4 <_svfiprintf_r+0x34>
 800dca8:	2140      	movs	r1, #64	; 0x40
 800dcaa:	f7ff ff3d 	bl	800db28 <_malloc_r>
 800dcae:	6020      	str	r0, [r4, #0]
 800dcb0:	6120      	str	r0, [r4, #16]
 800dcb2:	b928      	cbnz	r0, 800dcc0 <_svfiprintf_r+0x30>
 800dcb4:	230c      	movs	r3, #12
 800dcb6:	f8c8 3000 	str.w	r3, [r8]
 800dcba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcbe:	e0c8      	b.n	800de52 <_svfiprintf_r+0x1c2>
 800dcc0:	2340      	movs	r3, #64	; 0x40
 800dcc2:	6163      	str	r3, [r4, #20]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	9309      	str	r3, [sp, #36]	; 0x24
 800dcc8:	2320      	movs	r3, #32
 800dcca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcce:	2330      	movs	r3, #48	; 0x30
 800dcd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcd4:	9503      	str	r5, [sp, #12]
 800dcd6:	f04f 0b01 	mov.w	fp, #1
 800dcda:	4637      	mov	r7, r6
 800dcdc:	463d      	mov	r5, r7
 800dcde:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dce2:	b10b      	cbz	r3, 800dce8 <_svfiprintf_r+0x58>
 800dce4:	2b25      	cmp	r3, #37	; 0x25
 800dce6:	d13e      	bne.n	800dd66 <_svfiprintf_r+0xd6>
 800dce8:	ebb7 0a06 	subs.w	sl, r7, r6
 800dcec:	d00b      	beq.n	800dd06 <_svfiprintf_r+0x76>
 800dcee:	4653      	mov	r3, sl
 800dcf0:	4632      	mov	r2, r6
 800dcf2:	4621      	mov	r1, r4
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	f7ff ff71 	bl	800dbdc <__ssputs_r>
 800dcfa:	3001      	adds	r0, #1
 800dcfc:	f000 80a4 	beq.w	800de48 <_svfiprintf_r+0x1b8>
 800dd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd02:	4453      	add	r3, sl
 800dd04:	9309      	str	r3, [sp, #36]	; 0x24
 800dd06:	783b      	ldrb	r3, [r7, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f000 809d 	beq.w	800de48 <_svfiprintf_r+0x1b8>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd18:	9304      	str	r3, [sp, #16]
 800dd1a:	9307      	str	r3, [sp, #28]
 800dd1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd20:	931a      	str	r3, [sp, #104]	; 0x68
 800dd22:	462f      	mov	r7, r5
 800dd24:	2205      	movs	r2, #5
 800dd26:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dd2a:	4850      	ldr	r0, [pc, #320]	; (800de6c <_svfiprintf_r+0x1dc>)
 800dd2c:	f7f2 fa60 	bl	80001f0 <memchr>
 800dd30:	9b04      	ldr	r3, [sp, #16]
 800dd32:	b9d0      	cbnz	r0, 800dd6a <_svfiprintf_r+0xda>
 800dd34:	06d9      	lsls	r1, r3, #27
 800dd36:	bf44      	itt	mi
 800dd38:	2220      	movmi	r2, #32
 800dd3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd3e:	071a      	lsls	r2, r3, #28
 800dd40:	bf44      	itt	mi
 800dd42:	222b      	movmi	r2, #43	; 0x2b
 800dd44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd48:	782a      	ldrb	r2, [r5, #0]
 800dd4a:	2a2a      	cmp	r2, #42	; 0x2a
 800dd4c:	d015      	beq.n	800dd7a <_svfiprintf_r+0xea>
 800dd4e:	9a07      	ldr	r2, [sp, #28]
 800dd50:	462f      	mov	r7, r5
 800dd52:	2000      	movs	r0, #0
 800dd54:	250a      	movs	r5, #10
 800dd56:	4639      	mov	r1, r7
 800dd58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd5c:	3b30      	subs	r3, #48	; 0x30
 800dd5e:	2b09      	cmp	r3, #9
 800dd60:	d94d      	bls.n	800ddfe <_svfiprintf_r+0x16e>
 800dd62:	b1b8      	cbz	r0, 800dd94 <_svfiprintf_r+0x104>
 800dd64:	e00f      	b.n	800dd86 <_svfiprintf_r+0xf6>
 800dd66:	462f      	mov	r7, r5
 800dd68:	e7b8      	b.n	800dcdc <_svfiprintf_r+0x4c>
 800dd6a:	4a40      	ldr	r2, [pc, #256]	; (800de6c <_svfiprintf_r+0x1dc>)
 800dd6c:	1a80      	subs	r0, r0, r2
 800dd6e:	fa0b f000 	lsl.w	r0, fp, r0
 800dd72:	4318      	orrs	r0, r3
 800dd74:	9004      	str	r0, [sp, #16]
 800dd76:	463d      	mov	r5, r7
 800dd78:	e7d3      	b.n	800dd22 <_svfiprintf_r+0x92>
 800dd7a:	9a03      	ldr	r2, [sp, #12]
 800dd7c:	1d11      	adds	r1, r2, #4
 800dd7e:	6812      	ldr	r2, [r2, #0]
 800dd80:	9103      	str	r1, [sp, #12]
 800dd82:	2a00      	cmp	r2, #0
 800dd84:	db01      	blt.n	800dd8a <_svfiprintf_r+0xfa>
 800dd86:	9207      	str	r2, [sp, #28]
 800dd88:	e004      	b.n	800dd94 <_svfiprintf_r+0x104>
 800dd8a:	4252      	negs	r2, r2
 800dd8c:	f043 0302 	orr.w	r3, r3, #2
 800dd90:	9207      	str	r2, [sp, #28]
 800dd92:	9304      	str	r3, [sp, #16]
 800dd94:	783b      	ldrb	r3, [r7, #0]
 800dd96:	2b2e      	cmp	r3, #46	; 0x2e
 800dd98:	d10c      	bne.n	800ddb4 <_svfiprintf_r+0x124>
 800dd9a:	787b      	ldrb	r3, [r7, #1]
 800dd9c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd9e:	d133      	bne.n	800de08 <_svfiprintf_r+0x178>
 800dda0:	9b03      	ldr	r3, [sp, #12]
 800dda2:	1d1a      	adds	r2, r3, #4
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	9203      	str	r2, [sp, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	bfb8      	it	lt
 800ddac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ddb0:	3702      	adds	r7, #2
 800ddb2:	9305      	str	r3, [sp, #20]
 800ddb4:	4d2e      	ldr	r5, [pc, #184]	; (800de70 <_svfiprintf_r+0x1e0>)
 800ddb6:	7839      	ldrb	r1, [r7, #0]
 800ddb8:	2203      	movs	r2, #3
 800ddba:	4628      	mov	r0, r5
 800ddbc:	f7f2 fa18 	bl	80001f0 <memchr>
 800ddc0:	b138      	cbz	r0, 800ddd2 <_svfiprintf_r+0x142>
 800ddc2:	2340      	movs	r3, #64	; 0x40
 800ddc4:	1b40      	subs	r0, r0, r5
 800ddc6:	fa03 f000 	lsl.w	r0, r3, r0
 800ddca:	9b04      	ldr	r3, [sp, #16]
 800ddcc:	4303      	orrs	r3, r0
 800ddce:	3701      	adds	r7, #1
 800ddd0:	9304      	str	r3, [sp, #16]
 800ddd2:	7839      	ldrb	r1, [r7, #0]
 800ddd4:	4827      	ldr	r0, [pc, #156]	; (800de74 <_svfiprintf_r+0x1e4>)
 800ddd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddda:	2206      	movs	r2, #6
 800dddc:	1c7e      	adds	r6, r7, #1
 800ddde:	f7f2 fa07 	bl	80001f0 <memchr>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d038      	beq.n	800de58 <_svfiprintf_r+0x1c8>
 800dde6:	4b24      	ldr	r3, [pc, #144]	; (800de78 <_svfiprintf_r+0x1e8>)
 800dde8:	bb13      	cbnz	r3, 800de30 <_svfiprintf_r+0x1a0>
 800ddea:	9b03      	ldr	r3, [sp, #12]
 800ddec:	3307      	adds	r3, #7
 800ddee:	f023 0307 	bic.w	r3, r3, #7
 800ddf2:	3308      	adds	r3, #8
 800ddf4:	9303      	str	r3, [sp, #12]
 800ddf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf8:	444b      	add	r3, r9
 800ddfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ddfc:	e76d      	b.n	800dcda <_svfiprintf_r+0x4a>
 800ddfe:	fb05 3202 	mla	r2, r5, r2, r3
 800de02:	2001      	movs	r0, #1
 800de04:	460f      	mov	r7, r1
 800de06:	e7a6      	b.n	800dd56 <_svfiprintf_r+0xc6>
 800de08:	2300      	movs	r3, #0
 800de0a:	3701      	adds	r7, #1
 800de0c:	9305      	str	r3, [sp, #20]
 800de0e:	4619      	mov	r1, r3
 800de10:	250a      	movs	r5, #10
 800de12:	4638      	mov	r0, r7
 800de14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de18:	3a30      	subs	r2, #48	; 0x30
 800de1a:	2a09      	cmp	r2, #9
 800de1c:	d903      	bls.n	800de26 <_svfiprintf_r+0x196>
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d0c8      	beq.n	800ddb4 <_svfiprintf_r+0x124>
 800de22:	9105      	str	r1, [sp, #20]
 800de24:	e7c6      	b.n	800ddb4 <_svfiprintf_r+0x124>
 800de26:	fb05 2101 	mla	r1, r5, r1, r2
 800de2a:	2301      	movs	r3, #1
 800de2c:	4607      	mov	r7, r0
 800de2e:	e7f0      	b.n	800de12 <_svfiprintf_r+0x182>
 800de30:	ab03      	add	r3, sp, #12
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	4622      	mov	r2, r4
 800de36:	4b11      	ldr	r3, [pc, #68]	; (800de7c <_svfiprintf_r+0x1ec>)
 800de38:	a904      	add	r1, sp, #16
 800de3a:	4640      	mov	r0, r8
 800de3c:	f7fc f8ee 	bl	800a01c <_printf_float>
 800de40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800de44:	4681      	mov	r9, r0
 800de46:	d1d6      	bne.n	800ddf6 <_svfiprintf_r+0x166>
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	065b      	lsls	r3, r3, #25
 800de4c:	f53f af35 	bmi.w	800dcba <_svfiprintf_r+0x2a>
 800de50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de52:	b01d      	add	sp, #116	; 0x74
 800de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de58:	ab03      	add	r3, sp, #12
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	4622      	mov	r2, r4
 800de5e:	4b07      	ldr	r3, [pc, #28]	; (800de7c <_svfiprintf_r+0x1ec>)
 800de60:	a904      	add	r1, sp, #16
 800de62:	4640      	mov	r0, r8
 800de64:	f7fc fb90 	bl	800a588 <_printf_i>
 800de68:	e7ea      	b.n	800de40 <_svfiprintf_r+0x1b0>
 800de6a:	bf00      	nop
 800de6c:	0800ebbc 	.word	0x0800ebbc
 800de70:	0800ebc2 	.word	0x0800ebc2
 800de74:	0800ebc6 	.word	0x0800ebc6
 800de78:	0800a01d 	.word	0x0800a01d
 800de7c:	0800dbdd 	.word	0x0800dbdd

0800de80 <__sfputc_r>:
 800de80:	6893      	ldr	r3, [r2, #8]
 800de82:	3b01      	subs	r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	b410      	push	{r4}
 800de88:	6093      	str	r3, [r2, #8]
 800de8a:	da08      	bge.n	800de9e <__sfputc_r+0x1e>
 800de8c:	6994      	ldr	r4, [r2, #24]
 800de8e:	42a3      	cmp	r3, r4
 800de90:	db01      	blt.n	800de96 <__sfputc_r+0x16>
 800de92:	290a      	cmp	r1, #10
 800de94:	d103      	bne.n	800de9e <__sfputc_r+0x1e>
 800de96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de9a:	f7fd bdbb 	b.w	800ba14 <__swbuf_r>
 800de9e:	6813      	ldr	r3, [r2, #0]
 800dea0:	1c58      	adds	r0, r3, #1
 800dea2:	6010      	str	r0, [r2, #0]
 800dea4:	7019      	strb	r1, [r3, #0]
 800dea6:	4608      	mov	r0, r1
 800dea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deac:	4770      	bx	lr

0800deae <__sfputs_r>:
 800deae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb0:	4606      	mov	r6, r0
 800deb2:	460f      	mov	r7, r1
 800deb4:	4614      	mov	r4, r2
 800deb6:	18d5      	adds	r5, r2, r3
 800deb8:	42ac      	cmp	r4, r5
 800deba:	d101      	bne.n	800dec0 <__sfputs_r+0x12>
 800debc:	2000      	movs	r0, #0
 800debe:	e007      	b.n	800ded0 <__sfputs_r+0x22>
 800dec0:	463a      	mov	r2, r7
 800dec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec6:	4630      	mov	r0, r6
 800dec8:	f7ff ffda 	bl	800de80 <__sfputc_r>
 800decc:	1c43      	adds	r3, r0, #1
 800dece:	d1f3      	bne.n	800deb8 <__sfputs_r+0xa>
 800ded0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ded4 <_vfiprintf_r>:
 800ded4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	460c      	mov	r4, r1
 800deda:	b09d      	sub	sp, #116	; 0x74
 800dedc:	4617      	mov	r7, r2
 800dede:	461d      	mov	r5, r3
 800dee0:	4606      	mov	r6, r0
 800dee2:	b118      	cbz	r0, 800deec <_vfiprintf_r+0x18>
 800dee4:	6983      	ldr	r3, [r0, #24]
 800dee6:	b90b      	cbnz	r3, 800deec <_vfiprintf_r+0x18>
 800dee8:	f7fe fd96 	bl	800ca18 <__sinit>
 800deec:	4b7c      	ldr	r3, [pc, #496]	; (800e0e0 <_vfiprintf_r+0x20c>)
 800deee:	429c      	cmp	r4, r3
 800def0:	d158      	bne.n	800dfa4 <_vfiprintf_r+0xd0>
 800def2:	6874      	ldr	r4, [r6, #4]
 800def4:	89a3      	ldrh	r3, [r4, #12]
 800def6:	0718      	lsls	r0, r3, #28
 800def8:	d55e      	bpl.n	800dfb8 <_vfiprintf_r+0xe4>
 800defa:	6923      	ldr	r3, [r4, #16]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d05b      	beq.n	800dfb8 <_vfiprintf_r+0xe4>
 800df00:	2300      	movs	r3, #0
 800df02:	9309      	str	r3, [sp, #36]	; 0x24
 800df04:	2320      	movs	r3, #32
 800df06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df0a:	2330      	movs	r3, #48	; 0x30
 800df0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df10:	9503      	str	r5, [sp, #12]
 800df12:	f04f 0b01 	mov.w	fp, #1
 800df16:	46b8      	mov	r8, r7
 800df18:	4645      	mov	r5, r8
 800df1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800df1e:	b10b      	cbz	r3, 800df24 <_vfiprintf_r+0x50>
 800df20:	2b25      	cmp	r3, #37	; 0x25
 800df22:	d154      	bne.n	800dfce <_vfiprintf_r+0xfa>
 800df24:	ebb8 0a07 	subs.w	sl, r8, r7
 800df28:	d00b      	beq.n	800df42 <_vfiprintf_r+0x6e>
 800df2a:	4653      	mov	r3, sl
 800df2c:	463a      	mov	r2, r7
 800df2e:	4621      	mov	r1, r4
 800df30:	4630      	mov	r0, r6
 800df32:	f7ff ffbc 	bl	800deae <__sfputs_r>
 800df36:	3001      	adds	r0, #1
 800df38:	f000 80c2 	beq.w	800e0c0 <_vfiprintf_r+0x1ec>
 800df3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df3e:	4453      	add	r3, sl
 800df40:	9309      	str	r3, [sp, #36]	; 0x24
 800df42:	f898 3000 	ldrb.w	r3, [r8]
 800df46:	2b00      	cmp	r3, #0
 800df48:	f000 80ba 	beq.w	800e0c0 <_vfiprintf_r+0x1ec>
 800df4c:	2300      	movs	r3, #0
 800df4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df56:	9304      	str	r3, [sp, #16]
 800df58:	9307      	str	r3, [sp, #28]
 800df5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df5e:	931a      	str	r3, [sp, #104]	; 0x68
 800df60:	46a8      	mov	r8, r5
 800df62:	2205      	movs	r2, #5
 800df64:	f818 1b01 	ldrb.w	r1, [r8], #1
 800df68:	485e      	ldr	r0, [pc, #376]	; (800e0e4 <_vfiprintf_r+0x210>)
 800df6a:	f7f2 f941 	bl	80001f0 <memchr>
 800df6e:	9b04      	ldr	r3, [sp, #16]
 800df70:	bb78      	cbnz	r0, 800dfd2 <_vfiprintf_r+0xfe>
 800df72:	06d9      	lsls	r1, r3, #27
 800df74:	bf44      	itt	mi
 800df76:	2220      	movmi	r2, #32
 800df78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df7c:	071a      	lsls	r2, r3, #28
 800df7e:	bf44      	itt	mi
 800df80:	222b      	movmi	r2, #43	; 0x2b
 800df82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df86:	782a      	ldrb	r2, [r5, #0]
 800df88:	2a2a      	cmp	r2, #42	; 0x2a
 800df8a:	d02a      	beq.n	800dfe2 <_vfiprintf_r+0x10e>
 800df8c:	9a07      	ldr	r2, [sp, #28]
 800df8e:	46a8      	mov	r8, r5
 800df90:	2000      	movs	r0, #0
 800df92:	250a      	movs	r5, #10
 800df94:	4641      	mov	r1, r8
 800df96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df9a:	3b30      	subs	r3, #48	; 0x30
 800df9c:	2b09      	cmp	r3, #9
 800df9e:	d969      	bls.n	800e074 <_vfiprintf_r+0x1a0>
 800dfa0:	b360      	cbz	r0, 800dffc <_vfiprintf_r+0x128>
 800dfa2:	e024      	b.n	800dfee <_vfiprintf_r+0x11a>
 800dfa4:	4b50      	ldr	r3, [pc, #320]	; (800e0e8 <_vfiprintf_r+0x214>)
 800dfa6:	429c      	cmp	r4, r3
 800dfa8:	d101      	bne.n	800dfae <_vfiprintf_r+0xda>
 800dfaa:	68b4      	ldr	r4, [r6, #8]
 800dfac:	e7a2      	b.n	800def4 <_vfiprintf_r+0x20>
 800dfae:	4b4f      	ldr	r3, [pc, #316]	; (800e0ec <_vfiprintf_r+0x218>)
 800dfb0:	429c      	cmp	r4, r3
 800dfb2:	bf08      	it	eq
 800dfb4:	68f4      	ldreq	r4, [r6, #12]
 800dfb6:	e79d      	b.n	800def4 <_vfiprintf_r+0x20>
 800dfb8:	4621      	mov	r1, r4
 800dfba:	4630      	mov	r0, r6
 800dfbc:	f7fd fd8a 	bl	800bad4 <__swsetup_r>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d09d      	beq.n	800df00 <_vfiprintf_r+0x2c>
 800dfc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfc8:	b01d      	add	sp, #116	; 0x74
 800dfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfce:	46a8      	mov	r8, r5
 800dfd0:	e7a2      	b.n	800df18 <_vfiprintf_r+0x44>
 800dfd2:	4a44      	ldr	r2, [pc, #272]	; (800e0e4 <_vfiprintf_r+0x210>)
 800dfd4:	1a80      	subs	r0, r0, r2
 800dfd6:	fa0b f000 	lsl.w	r0, fp, r0
 800dfda:	4318      	orrs	r0, r3
 800dfdc:	9004      	str	r0, [sp, #16]
 800dfde:	4645      	mov	r5, r8
 800dfe0:	e7be      	b.n	800df60 <_vfiprintf_r+0x8c>
 800dfe2:	9a03      	ldr	r2, [sp, #12]
 800dfe4:	1d11      	adds	r1, r2, #4
 800dfe6:	6812      	ldr	r2, [r2, #0]
 800dfe8:	9103      	str	r1, [sp, #12]
 800dfea:	2a00      	cmp	r2, #0
 800dfec:	db01      	blt.n	800dff2 <_vfiprintf_r+0x11e>
 800dfee:	9207      	str	r2, [sp, #28]
 800dff0:	e004      	b.n	800dffc <_vfiprintf_r+0x128>
 800dff2:	4252      	negs	r2, r2
 800dff4:	f043 0302 	orr.w	r3, r3, #2
 800dff8:	9207      	str	r2, [sp, #28]
 800dffa:	9304      	str	r3, [sp, #16]
 800dffc:	f898 3000 	ldrb.w	r3, [r8]
 800e000:	2b2e      	cmp	r3, #46	; 0x2e
 800e002:	d10e      	bne.n	800e022 <_vfiprintf_r+0x14e>
 800e004:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e008:	2b2a      	cmp	r3, #42	; 0x2a
 800e00a:	d138      	bne.n	800e07e <_vfiprintf_r+0x1aa>
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	1d1a      	adds	r2, r3, #4
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	9203      	str	r2, [sp, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	bfb8      	it	lt
 800e018:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e01c:	f108 0802 	add.w	r8, r8, #2
 800e020:	9305      	str	r3, [sp, #20]
 800e022:	4d33      	ldr	r5, [pc, #204]	; (800e0f0 <_vfiprintf_r+0x21c>)
 800e024:	f898 1000 	ldrb.w	r1, [r8]
 800e028:	2203      	movs	r2, #3
 800e02a:	4628      	mov	r0, r5
 800e02c:	f7f2 f8e0 	bl	80001f0 <memchr>
 800e030:	b140      	cbz	r0, 800e044 <_vfiprintf_r+0x170>
 800e032:	2340      	movs	r3, #64	; 0x40
 800e034:	1b40      	subs	r0, r0, r5
 800e036:	fa03 f000 	lsl.w	r0, r3, r0
 800e03a:	9b04      	ldr	r3, [sp, #16]
 800e03c:	4303      	orrs	r3, r0
 800e03e:	f108 0801 	add.w	r8, r8, #1
 800e042:	9304      	str	r3, [sp, #16]
 800e044:	f898 1000 	ldrb.w	r1, [r8]
 800e048:	482a      	ldr	r0, [pc, #168]	; (800e0f4 <_vfiprintf_r+0x220>)
 800e04a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e04e:	2206      	movs	r2, #6
 800e050:	f108 0701 	add.w	r7, r8, #1
 800e054:	f7f2 f8cc 	bl	80001f0 <memchr>
 800e058:	2800      	cmp	r0, #0
 800e05a:	d037      	beq.n	800e0cc <_vfiprintf_r+0x1f8>
 800e05c:	4b26      	ldr	r3, [pc, #152]	; (800e0f8 <_vfiprintf_r+0x224>)
 800e05e:	bb1b      	cbnz	r3, 800e0a8 <_vfiprintf_r+0x1d4>
 800e060:	9b03      	ldr	r3, [sp, #12]
 800e062:	3307      	adds	r3, #7
 800e064:	f023 0307 	bic.w	r3, r3, #7
 800e068:	3308      	adds	r3, #8
 800e06a:	9303      	str	r3, [sp, #12]
 800e06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e06e:	444b      	add	r3, r9
 800e070:	9309      	str	r3, [sp, #36]	; 0x24
 800e072:	e750      	b.n	800df16 <_vfiprintf_r+0x42>
 800e074:	fb05 3202 	mla	r2, r5, r2, r3
 800e078:	2001      	movs	r0, #1
 800e07a:	4688      	mov	r8, r1
 800e07c:	e78a      	b.n	800df94 <_vfiprintf_r+0xc0>
 800e07e:	2300      	movs	r3, #0
 800e080:	f108 0801 	add.w	r8, r8, #1
 800e084:	9305      	str	r3, [sp, #20]
 800e086:	4619      	mov	r1, r3
 800e088:	250a      	movs	r5, #10
 800e08a:	4640      	mov	r0, r8
 800e08c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e090:	3a30      	subs	r2, #48	; 0x30
 800e092:	2a09      	cmp	r2, #9
 800e094:	d903      	bls.n	800e09e <_vfiprintf_r+0x1ca>
 800e096:	2b00      	cmp	r3, #0
 800e098:	d0c3      	beq.n	800e022 <_vfiprintf_r+0x14e>
 800e09a:	9105      	str	r1, [sp, #20]
 800e09c:	e7c1      	b.n	800e022 <_vfiprintf_r+0x14e>
 800e09e:	fb05 2101 	mla	r1, r5, r1, r2
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	4680      	mov	r8, r0
 800e0a6:	e7f0      	b.n	800e08a <_vfiprintf_r+0x1b6>
 800e0a8:	ab03      	add	r3, sp, #12
 800e0aa:	9300      	str	r3, [sp, #0]
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	4b13      	ldr	r3, [pc, #76]	; (800e0fc <_vfiprintf_r+0x228>)
 800e0b0:	a904      	add	r1, sp, #16
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f7fb ffb2 	bl	800a01c <_printf_float>
 800e0b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e0bc:	4681      	mov	r9, r0
 800e0be:	d1d5      	bne.n	800e06c <_vfiprintf_r+0x198>
 800e0c0:	89a3      	ldrh	r3, [r4, #12]
 800e0c2:	065b      	lsls	r3, r3, #25
 800e0c4:	f53f af7e 	bmi.w	800dfc4 <_vfiprintf_r+0xf0>
 800e0c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0ca:	e77d      	b.n	800dfc8 <_vfiprintf_r+0xf4>
 800e0cc:	ab03      	add	r3, sp, #12
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	4622      	mov	r2, r4
 800e0d2:	4b0a      	ldr	r3, [pc, #40]	; (800e0fc <_vfiprintf_r+0x228>)
 800e0d4:	a904      	add	r1, sp, #16
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	f7fc fa56 	bl	800a588 <_printf_i>
 800e0dc:	e7ec      	b.n	800e0b8 <_vfiprintf_r+0x1e4>
 800e0de:	bf00      	nop
 800e0e0:	0800ea80 	.word	0x0800ea80
 800e0e4:	0800ebbc 	.word	0x0800ebbc
 800e0e8:	0800eaa0 	.word	0x0800eaa0
 800e0ec:	0800ea60 	.word	0x0800ea60
 800e0f0:	0800ebc2 	.word	0x0800ebc2
 800e0f4:	0800ebc6 	.word	0x0800ebc6
 800e0f8:	0800a01d 	.word	0x0800a01d
 800e0fc:	0800deaf 	.word	0x0800deaf

0800e100 <_sbrk_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4c06      	ldr	r4, [pc, #24]	; (800e11c <_sbrk_r+0x1c>)
 800e104:	2300      	movs	r3, #0
 800e106:	4605      	mov	r5, r0
 800e108:	4608      	mov	r0, r1
 800e10a:	6023      	str	r3, [r4, #0]
 800e10c:	f7fa f8e4 	bl	80082d8 <_sbrk>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	d102      	bne.n	800e11a <_sbrk_r+0x1a>
 800e114:	6823      	ldr	r3, [r4, #0]
 800e116:	b103      	cbz	r3, 800e11a <_sbrk_r+0x1a>
 800e118:	602b      	str	r3, [r5, #0]
 800e11a:	bd38      	pop	{r3, r4, r5, pc}
 800e11c:	20004b60 	.word	0x20004b60

0800e120 <__sread>:
 800e120:	b510      	push	{r4, lr}
 800e122:	460c      	mov	r4, r1
 800e124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e128:	f000 f8e8 	bl	800e2fc <_read_r>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	bfab      	itete	ge
 800e130:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e132:	89a3      	ldrhlt	r3, [r4, #12]
 800e134:	181b      	addge	r3, r3, r0
 800e136:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e13a:	bfac      	ite	ge
 800e13c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e13e:	81a3      	strhlt	r3, [r4, #12]
 800e140:	bd10      	pop	{r4, pc}

0800e142 <__swrite>:
 800e142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e146:	461f      	mov	r7, r3
 800e148:	898b      	ldrh	r3, [r1, #12]
 800e14a:	05db      	lsls	r3, r3, #23
 800e14c:	4605      	mov	r5, r0
 800e14e:	460c      	mov	r4, r1
 800e150:	4616      	mov	r6, r2
 800e152:	d505      	bpl.n	800e160 <__swrite+0x1e>
 800e154:	2302      	movs	r3, #2
 800e156:	2200      	movs	r2, #0
 800e158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e15c:	f000 f87a 	bl	800e254 <_lseek_r>
 800e160:	89a3      	ldrh	r3, [r4, #12]
 800e162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e16a:	81a3      	strh	r3, [r4, #12]
 800e16c:	4632      	mov	r2, r6
 800e16e:	463b      	mov	r3, r7
 800e170:	4628      	mov	r0, r5
 800e172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e176:	f000 b829 	b.w	800e1cc <_write_r>

0800e17a <__sseek>:
 800e17a:	b510      	push	{r4, lr}
 800e17c:	460c      	mov	r4, r1
 800e17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e182:	f000 f867 	bl	800e254 <_lseek_r>
 800e186:	1c43      	adds	r3, r0, #1
 800e188:	89a3      	ldrh	r3, [r4, #12]
 800e18a:	bf15      	itete	ne
 800e18c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e18e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e196:	81a3      	strheq	r3, [r4, #12]
 800e198:	bf18      	it	ne
 800e19a:	81a3      	strhne	r3, [r4, #12]
 800e19c:	bd10      	pop	{r4, pc}

0800e19e <__sclose>:
 800e19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1a2:	f000 b825 	b.w	800e1f0 <_close_r>

0800e1a6 <strncmp>:
 800e1a6:	b510      	push	{r4, lr}
 800e1a8:	b16a      	cbz	r2, 800e1c6 <strncmp+0x20>
 800e1aa:	3901      	subs	r1, #1
 800e1ac:	1884      	adds	r4, r0, r2
 800e1ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e1b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d103      	bne.n	800e1c2 <strncmp+0x1c>
 800e1ba:	42a0      	cmp	r0, r4
 800e1bc:	d001      	beq.n	800e1c2 <strncmp+0x1c>
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1f5      	bne.n	800e1ae <strncmp+0x8>
 800e1c2:	1a98      	subs	r0, r3, r2
 800e1c4:	bd10      	pop	{r4, pc}
 800e1c6:	4610      	mov	r0, r2
 800e1c8:	e7fc      	b.n	800e1c4 <strncmp+0x1e>
	...

0800e1cc <_write_r>:
 800e1cc:	b538      	push	{r3, r4, r5, lr}
 800e1ce:	4c07      	ldr	r4, [pc, #28]	; (800e1ec <_write_r+0x20>)
 800e1d0:	4605      	mov	r5, r0
 800e1d2:	4608      	mov	r0, r1
 800e1d4:	4611      	mov	r1, r2
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	6022      	str	r2, [r4, #0]
 800e1da:	461a      	mov	r2, r3
 800e1dc:	f7fa f862 	bl	80082a4 <_write>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d102      	bne.n	800e1ea <_write_r+0x1e>
 800e1e4:	6823      	ldr	r3, [r4, #0]
 800e1e6:	b103      	cbz	r3, 800e1ea <_write_r+0x1e>
 800e1e8:	602b      	str	r3, [r5, #0]
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	20004b60 	.word	0x20004b60

0800e1f0 <_close_r>:
 800e1f0:	b538      	push	{r3, r4, r5, lr}
 800e1f2:	4c06      	ldr	r4, [pc, #24]	; (800e20c <_close_r+0x1c>)
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	4608      	mov	r0, r1
 800e1fa:	6023      	str	r3, [r4, #0]
 800e1fc:	f7fa f860 	bl	80082c0 <_close>
 800e200:	1c43      	adds	r3, r0, #1
 800e202:	d102      	bne.n	800e20a <_close_r+0x1a>
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	b103      	cbz	r3, 800e20a <_close_r+0x1a>
 800e208:	602b      	str	r3, [r5, #0]
 800e20a:	bd38      	pop	{r3, r4, r5, pc}
 800e20c:	20004b60 	.word	0x20004b60

0800e210 <_fstat_r>:
 800e210:	b538      	push	{r3, r4, r5, lr}
 800e212:	4c07      	ldr	r4, [pc, #28]	; (800e230 <_fstat_r+0x20>)
 800e214:	2300      	movs	r3, #0
 800e216:	4605      	mov	r5, r0
 800e218:	4608      	mov	r0, r1
 800e21a:	4611      	mov	r1, r2
 800e21c:	6023      	str	r3, [r4, #0]
 800e21e:	f7fa f852 	bl	80082c6 <_fstat>
 800e222:	1c43      	adds	r3, r0, #1
 800e224:	d102      	bne.n	800e22c <_fstat_r+0x1c>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	b103      	cbz	r3, 800e22c <_fstat_r+0x1c>
 800e22a:	602b      	str	r3, [r5, #0]
 800e22c:	bd38      	pop	{r3, r4, r5, pc}
 800e22e:	bf00      	nop
 800e230:	20004b60 	.word	0x20004b60

0800e234 <_isatty_r>:
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	4c06      	ldr	r4, [pc, #24]	; (800e250 <_isatty_r+0x1c>)
 800e238:	2300      	movs	r3, #0
 800e23a:	4605      	mov	r5, r0
 800e23c:	4608      	mov	r0, r1
 800e23e:	6023      	str	r3, [r4, #0]
 800e240:	f7fa f846 	bl	80082d0 <_isatty>
 800e244:	1c43      	adds	r3, r0, #1
 800e246:	d102      	bne.n	800e24e <_isatty_r+0x1a>
 800e248:	6823      	ldr	r3, [r4, #0]
 800e24a:	b103      	cbz	r3, 800e24e <_isatty_r+0x1a>
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	bd38      	pop	{r3, r4, r5, pc}
 800e250:	20004b60 	.word	0x20004b60

0800e254 <_lseek_r>:
 800e254:	b538      	push	{r3, r4, r5, lr}
 800e256:	4c07      	ldr	r4, [pc, #28]	; (800e274 <_lseek_r+0x20>)
 800e258:	4605      	mov	r5, r0
 800e25a:	4608      	mov	r0, r1
 800e25c:	4611      	mov	r1, r2
 800e25e:	2200      	movs	r2, #0
 800e260:	6022      	str	r2, [r4, #0]
 800e262:	461a      	mov	r2, r3
 800e264:	f7fa f836 	bl	80082d4 <_lseek>
 800e268:	1c43      	adds	r3, r0, #1
 800e26a:	d102      	bne.n	800e272 <_lseek_r+0x1e>
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	b103      	cbz	r3, 800e272 <_lseek_r+0x1e>
 800e270:	602b      	str	r3, [r5, #0]
 800e272:	bd38      	pop	{r3, r4, r5, pc}
 800e274:	20004b60 	.word	0x20004b60

0800e278 <memmove>:
 800e278:	4288      	cmp	r0, r1
 800e27a:	b510      	push	{r4, lr}
 800e27c:	eb01 0302 	add.w	r3, r1, r2
 800e280:	d807      	bhi.n	800e292 <memmove+0x1a>
 800e282:	1e42      	subs	r2, r0, #1
 800e284:	4299      	cmp	r1, r3
 800e286:	d00a      	beq.n	800e29e <memmove+0x26>
 800e288:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e28c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e290:	e7f8      	b.n	800e284 <memmove+0xc>
 800e292:	4283      	cmp	r3, r0
 800e294:	d9f5      	bls.n	800e282 <memmove+0xa>
 800e296:	1881      	adds	r1, r0, r2
 800e298:	1ad2      	subs	r2, r2, r3
 800e29a:	42d3      	cmn	r3, r2
 800e29c:	d100      	bne.n	800e2a0 <memmove+0x28>
 800e29e:	bd10      	pop	{r4, pc}
 800e2a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e2a8:	e7f7      	b.n	800e29a <memmove+0x22>

0800e2aa <__malloc_lock>:
 800e2aa:	4770      	bx	lr

0800e2ac <__malloc_unlock>:
 800e2ac:	4770      	bx	lr

0800e2ae <_realloc_r>:
 800e2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b0:	4607      	mov	r7, r0
 800e2b2:	4614      	mov	r4, r2
 800e2b4:	460e      	mov	r6, r1
 800e2b6:	b921      	cbnz	r1, 800e2c2 <_realloc_r+0x14>
 800e2b8:	4611      	mov	r1, r2
 800e2ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2be:	f7ff bc33 	b.w	800db28 <_malloc_r>
 800e2c2:	b922      	cbnz	r2, 800e2ce <_realloc_r+0x20>
 800e2c4:	f7ff fbe2 	bl	800da8c <_free_r>
 800e2c8:	4625      	mov	r5, r4
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2ce:	f000 f827 	bl	800e320 <_malloc_usable_size_r>
 800e2d2:	42a0      	cmp	r0, r4
 800e2d4:	d20f      	bcs.n	800e2f6 <_realloc_r+0x48>
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	4638      	mov	r0, r7
 800e2da:	f7ff fc25 	bl	800db28 <_malloc_r>
 800e2de:	4605      	mov	r5, r0
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d0f2      	beq.n	800e2ca <_realloc_r+0x1c>
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	4622      	mov	r2, r4
 800e2e8:	f7fb fdf1 	bl	8009ece <memcpy>
 800e2ec:	4631      	mov	r1, r6
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	f7ff fbcc 	bl	800da8c <_free_r>
 800e2f4:	e7e9      	b.n	800e2ca <_realloc_r+0x1c>
 800e2f6:	4635      	mov	r5, r6
 800e2f8:	e7e7      	b.n	800e2ca <_realloc_r+0x1c>
	...

0800e2fc <_read_r>:
 800e2fc:	b538      	push	{r3, r4, r5, lr}
 800e2fe:	4c07      	ldr	r4, [pc, #28]	; (800e31c <_read_r+0x20>)
 800e300:	4605      	mov	r5, r0
 800e302:	4608      	mov	r0, r1
 800e304:	4611      	mov	r1, r2
 800e306:	2200      	movs	r2, #0
 800e308:	6022      	str	r2, [r4, #0]
 800e30a:	461a      	mov	r2, r3
 800e30c:	f7f9 ffbc 	bl	8008288 <_read>
 800e310:	1c43      	adds	r3, r0, #1
 800e312:	d102      	bne.n	800e31a <_read_r+0x1e>
 800e314:	6823      	ldr	r3, [r4, #0]
 800e316:	b103      	cbz	r3, 800e31a <_read_r+0x1e>
 800e318:	602b      	str	r3, [r5, #0]
 800e31a:	bd38      	pop	{r3, r4, r5, pc}
 800e31c:	20004b60 	.word	0x20004b60

0800e320 <_malloc_usable_size_r>:
 800e320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e324:	1f18      	subs	r0, r3, #4
 800e326:	2b00      	cmp	r3, #0
 800e328:	bfbc      	itt	lt
 800e32a:	580b      	ldrlt	r3, [r1, r0]
 800e32c:	18c0      	addlt	r0, r0, r3
 800e32e:	4770      	bx	lr

0800e330 <_init>:
 800e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e332:	bf00      	nop
 800e334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e336:	bc08      	pop	{r3}
 800e338:	469e      	mov	lr, r3
 800e33a:	4770      	bx	lr

0800e33c <_fini>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	bf00      	nop
 800e340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e342:	bc08      	pop	{r3}
 800e344:	469e      	mov	lr, r3
 800e346:	4770      	bx	lr
