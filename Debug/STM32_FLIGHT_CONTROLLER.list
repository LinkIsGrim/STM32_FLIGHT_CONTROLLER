
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a66c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800a810  0800a810  0001a810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae18  0800ae18  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae18  0800ae18  0001ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae20  0800ae20  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae20  0800ae20  0001ae20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae24  0800ae24  0001ae24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800ae28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000250  0800b078  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  0800b078  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001925d  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bfa  00000000  00000000  000394dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f608  00000000  00000000  0003c0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001388  00000000  00000000  0004b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001310  00000000  00000000  0004ca68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001832a  00000000  00000000  0004dd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000e5b4  00000000  00000000  000660a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00098d3f  00000000  00000000  00074656  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0010d395  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000469c  00000000  00000000  0010d410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a7f4 	.word	0x0800a7f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	0800a7f4 	.word	0x0800a7f4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <strlen>:
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d72:	2a00      	cmp	r2, #0
 8000d74:	d1fb      	bne.n	8000d6e <strlen+0x2>
 8000d76:	1a18      	subs	r0, r3, r0
 8000d78:	3801      	subs	r0, #1
 8000d7a:	4770      	bx	lr
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <memchr>:
 8000d80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d84:	2a10      	cmp	r2, #16
 8000d86:	db2b      	blt.n	8000de0 <memchr+0x60>
 8000d88:	f010 0f07 	tst.w	r0, #7
 8000d8c:	d008      	beq.n	8000da0 <memchr+0x20>
 8000d8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d92:	3a01      	subs	r2, #1
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d02d      	beq.n	8000df4 <memchr+0x74>
 8000d98:	f010 0f07 	tst.w	r0, #7
 8000d9c:	b342      	cbz	r2, 8000df0 <memchr+0x70>
 8000d9e:	d1f6      	bne.n	8000d8e <memchr+0xe>
 8000da0:	b4f0      	push	{r4, r5, r6, r7}
 8000da2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000da6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000daa:	f022 0407 	bic.w	r4, r2, #7
 8000dae:	f07f 0700 	mvns.w	r7, #0
 8000db2:	2300      	movs	r3, #0
 8000db4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000db8:	3c08      	subs	r4, #8
 8000dba:	ea85 0501 	eor.w	r5, r5, r1
 8000dbe:	ea86 0601 	eor.w	r6, r6, r1
 8000dc2:	fa85 f547 	uadd8	r5, r5, r7
 8000dc6:	faa3 f587 	sel	r5, r3, r7
 8000dca:	fa86 f647 	uadd8	r6, r6, r7
 8000dce:	faa5 f687 	sel	r6, r5, r7
 8000dd2:	b98e      	cbnz	r6, 8000df8 <memchr+0x78>
 8000dd4:	d1ee      	bne.n	8000db4 <memchr+0x34>
 8000dd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000dd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000ddc:	f002 0207 	and.w	r2, r2, #7
 8000de0:	b132      	cbz	r2, 8000df0 <memchr+0x70>
 8000de2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000de6:	3a01      	subs	r2, #1
 8000de8:	ea83 0301 	eor.w	r3, r3, r1
 8000dec:	b113      	cbz	r3, 8000df4 <memchr+0x74>
 8000dee:	d1f8      	bne.n	8000de2 <memchr+0x62>
 8000df0:	2000      	movs	r0, #0
 8000df2:	4770      	bx	lr
 8000df4:	3801      	subs	r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	bf06      	itte	eq
 8000dfc:	4635      	moveq	r5, r6
 8000dfe:	3803      	subeq	r0, #3
 8000e00:	3807      	subne	r0, #7
 8000e02:	f015 0f01 	tst.w	r5, #1
 8000e06:	d107      	bne.n	8000e18 <memchr+0x98>
 8000e08:	3001      	adds	r0, #1
 8000e0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000e0e:	bf02      	ittt	eq
 8000e10:	3001      	addeq	r0, #1
 8000e12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000e16:	3001      	addeq	r0, #1
 8000e18:	bcf0      	pop	{r4, r5, r6, r7}
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <__gedf2>:
 8000e20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e24:	e006      	b.n	8000e34 <__cmpdf2+0x4>
 8000e26:	bf00      	nop

08000e28 <__ledf2>:
 8000e28:	f04f 0c01 	mov.w	ip, #1
 8000e2c:	e002      	b.n	8000e34 <__cmpdf2+0x4>
 8000e2e:	bf00      	nop

08000e30 <__cmpdf2>:
 8000e30:	f04f 0c01 	mov.w	ip, #1
 8000e34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e44:	bf18      	it	ne
 8000e46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000e4a:	d01b      	beq.n	8000e84 <__cmpdf2+0x54>
 8000e4c:	b001      	add	sp, #4
 8000e4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e52:	bf0c      	ite	eq
 8000e54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e58:	ea91 0f03 	teqne	r1, r3
 8000e5c:	bf02      	ittt	eq
 8000e5e:	ea90 0f02 	teqeq	r0, r2
 8000e62:	2000      	moveq	r0, #0
 8000e64:	4770      	bxeq	lr
 8000e66:	f110 0f00 	cmn.w	r0, #0
 8000e6a:	ea91 0f03 	teq	r1, r3
 8000e6e:	bf58      	it	pl
 8000e70:	4299      	cmppl	r1, r3
 8000e72:	bf08      	it	eq
 8000e74:	4290      	cmpeq	r0, r2
 8000e76:	bf2c      	ite	cs
 8000e78:	17d8      	asrcs	r0, r3, #31
 8000e7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e7e:	f040 0001 	orr.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e8c:	d102      	bne.n	8000e94 <__cmpdf2+0x64>
 8000e8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e92:	d107      	bne.n	8000ea4 <__cmpdf2+0x74>
 8000e94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e9c:	d1d6      	bne.n	8000e4c <__cmpdf2+0x1c>
 8000e9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ea2:	d0d3      	beq.n	8000e4c <__cmpdf2+0x1c>
 8000ea4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <__aeabi_cdrcmple>:
 8000eac:	4684      	mov	ip, r0
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4662      	mov	r2, ip
 8000eb2:	468c      	mov	ip, r1
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4663      	mov	r3, ip
 8000eb8:	e000      	b.n	8000ebc <__aeabi_cdcmpeq>
 8000eba:	bf00      	nop

08000ebc <__aeabi_cdcmpeq>:
 8000ebc:	b501      	push	{r0, lr}
 8000ebe:	f7ff ffb7 	bl	8000e30 <__cmpdf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd01      	pop	{r0, pc}

08000ecc <__aeabi_dcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cdcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_dcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cdcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_dcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cdcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_dcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffce 	bl	8000eac <__aeabi_cdrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_dcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc4 	bl	8000eac <__aeabi_cdrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_dcmpun>:
 8000f30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f38:	d102      	bne.n	8000f40 <__aeabi_dcmpun+0x10>
 8000f3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000f3e:	d10a      	bne.n	8000f56 <__aeabi_dcmpun+0x26>
 8000f40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f48:	d102      	bne.n	8000f50 <__aeabi_dcmpun+0x20>
 8000f4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000f4e:	d102      	bne.n	8000f56 <__aeabi_dcmpun+0x26>
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0001 	mov.w	r0, #1
 8000f5a:	4770      	bx	lr

08000f5c <get_roll>:
}

float get_roll(){

	return roll;
}
 8000f5c:	4b01      	ldr	r3, [pc, #4]	; (8000f64 <get_roll+0x8>)
 8000f5e:	ed93 0a00 	vldr	s0, [r3]
 8000f62:	4770      	bx	lr
 8000f64:	200003d8 	.word	0x200003d8

08000f68 <get_pitch>:

float get_pitch(){

	return pitch;
}
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <get_pitch+0x8>)
 8000f6a:	ed93 0a00 	vldr	s0, [r3]
 8000f6e:	4770      	bx	lr
 8000f70:	200003d4 	.word	0x200003d4

08000f74 <get_yaw>:

float get_yaw(){

	return yaw;
}
 8000f74:	4b01      	ldr	r3, [pc, #4]	; (8000f7c <get_yaw+0x8>)
 8000f76:	ed93 0a00 	vldr	s0, [r3]
 8000f7a:	4770      	bx	lr
 8000f7c:	200003c8 	.word	0x200003c8

08000f80 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f80:	b500      	push	{lr}
 8000f82:	b083      	sub	sp, #12
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f84:	f88d 1004 	strb.w	r1, [sp, #4]
	data_write[1] = data;
 8000f88:	f88d 2005 	strb.w	r2, [sp, #5]

	//Blocking
	//HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);

	//Non blocking - DMA
	I2cTxCplt = 0;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <writeByte+0x2c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_DMA(&hi2c2, address_tx, data_write, 2);
 8000f92:	2302      	movs	r3, #2
 8000f94:	aa01      	add	r2, sp, #4
 8000f96:	4601      	mov	r1, r0
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <writeByte+0x30>)
 8000f9a:	f002 fc59 	bl	8003850 <HAL_I2C_Master_Transmit_DMA>
	while(!I2cTxCplt){
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <writeByte+0x2c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0fb      	beq.n	8000f9e <writeByte+0x1e>

	}

}
 8000fa6:	b003      	add	sp, #12
 8000fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fac:	2000026f 	.word	0x2000026f
 8000fb0:	20000344 	.word	0x20000344

08000fb4 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000fb4:	b510      	push	{r4, lr}
 8000fb6:	b082      	sub	sp, #8
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000fb8:	a902      	add	r1, sp, #8
 8000fba:	f801 2d08 	strb.w	r2, [r1, #-8]!
//	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
//	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);


	//Non blocking - DMA
	I2cTxCplt = 0;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <readByte+0x48>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_DMA(&hi2c2, address_tx, data_write, 1);
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	460a      	mov	r2, r1
 8000fca:	4601      	mov	r1, r0
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <readByte+0x4c>)
 8000fce:	f002 fc3f 	bl	8003850 <HAL_I2C_Master_Transmit_DMA>
	while(!I2cTxCplt){
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <readByte+0x48>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0fb      	beq.n	8000fd2 <readByte+0x1e>
	}

	I2cRxCplt = 0;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <readByte+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive_DMA(&hi2c2, address_tx, data, 1);
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	aa01      	add	r2, sp, #4
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <readByte+0x4c>)
 8000fe8:	f002 fcea 	bl	80039c0 <HAL_I2C_Master_Receive_DMA>
	while(!I2cRxCplt){
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <readByte+0x50>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0fb      	beq.n	8000fec <readByte+0x38>




	return data[0];
}
 8000ff4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	2000026f 	.word	0x2000026f
 8001000:	20000344 	.word	0x20000344
 8001004:	2000026e 	.word	0x2000026e

08001008 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8001008:	b510      	push	{r4, lr}
 800100a:	4604      	mov	r4, r0
	printf("STM32 Online..\r\n");
 800100c:	480f      	ldr	r0, [pc, #60]	; (800104c <imu_init+0x44>)
 800100e:	f005 ffa7 	bl	8006f60 <puts>
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	2202      	movs	r2, #2
 8001016:	21d0      	movs	r1, #208	; 0xd0
 8001018:	4620      	mov	r0, r4
 800101a:	f002 fd89 	bl	8003b30 <HAL_I2C_IsDeviceReady>
 800101e:	b100      	cbz	r0, 8001022 <imu_init+0x1a>
 8001020:	e7fe      	b.n	8001020 <imu_init+0x18>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8001022:	2120      	movs	r1, #32
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <imu_init+0x48>)
 8001026:	f002 f955 	bl	80032d4 <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800102a:	2275      	movs	r2, #117	; 0x75
 800102c:	21d1      	movs	r1, #209	; 0xd1
 800102e:	20d0      	movs	r0, #208	; 0xd0
 8001030:	f7ff ffc0 	bl	8000fb4 <readByte>
 8001034:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 8001036:	2871      	cmp	r0, #113	; 0x71
 8001038:	d106      	bne.n	8001048 <imu_init+0x40>
		printf("MPU9250 online..\r\n");
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <imu_init+0x4c>)
 800103c:	f005 ff90 	bl	8006f60 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8001040:	4621      	mov	r1, r4
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <imu_init+0x50>)
 8001044:	f005 ff18 	bl	8006e78 <iprintf>
}
 8001048:	2000      	movs	r0, #0
 800104a:	bd10      	pop	{r4, pc}
 800104c:	0800aa6c 	.word	0x0800aa6c
 8001050:	40020000 	.word	0x40020000
 8001054:	0800aa7c 	.word	0x0800aa7c
 8001058:	0800aa90 	.word	0x0800aa90

0800105c <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 800105c:	b530      	push	{r4, r5, lr}
 800105e:	b083      	sub	sp, #12
 8001060:	461d      	mov	r5, r3


	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8001062:	a902      	add	r1, sp, #8
 8001064:	f801 2d04 	strb.w	r2, [r1, #-4]!
//	for (int ii = 0; ii < count; ii++) {
//		dest[ii] = data[ii];
//	}

	//Non blocking - DMA
	I2cTxCplt = 0;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <readBytes+0x48>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_DMA(&hi2c2, address_tx, data_write, 1);
 800106e:	4604      	mov	r4, r0
 8001070:	2301      	movs	r3, #1
 8001072:	460a      	mov	r2, r1
 8001074:	4601      	mov	r1, r0
 8001076:	480c      	ldr	r0, [pc, #48]	; (80010a8 <readBytes+0x4c>)
 8001078:	f002 fbea 	bl	8003850 <HAL_I2C_Master_Transmit_DMA>
	while(!I2cTxCplt){
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <readBytes+0x48>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0fb      	beq.n	800107c <readBytes+0x20>
	}

	I2cRxCplt = 0;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <readBytes+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive_DMA(&hi2c2, address_tx, dest, count);
 800108a:	462b      	mov	r3, r5
 800108c:	9a06      	ldr	r2, [sp, #24]
 800108e:	4621      	mov	r1, r4
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <readBytes+0x4c>)
 8001092:	f002 fc95 	bl	80039c0 <HAL_I2C_Master_Receive_DMA>
	while(!I2cRxCplt){
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <readBytes+0x50>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0fb      	beq.n	8001096 <readBytes+0x3a>
	}
}
 800109e:	b003      	add	sp, #12
 80010a0:	bd30      	pop	{r4, r5, pc}
 80010a2:	bf00      	nop
 80010a4:	2000026f 	.word	0x2000026f
 80010a8:	20000344 	.word	0x20000344
 80010ac:	2000026e 	.word	0x2000026e

080010b0 <getMres>:

void getMres() {

	switch (Mscale) {
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <getMres+0x1c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b113      	cbz	r3, 80010bc <getMres+0xc>
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d004      	beq.n	80010c4 <getMres+0x14>
 80010ba:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <getMres+0x20>)
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <getMres+0x24>)
 80010c0:	601a      	str	r2, [r3, #0]
		break;
 80010c2:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <getMres+0x20>)
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <getMres+0x28>)
 80010c8:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010ca:	4770      	bx	lr
 80010cc:	20000001 	.word	0x20000001
 80010d0:	200003dc 	.word	0x200003dc
 80010d4:	40a4d84e 	.word	0x40a4d84e
 80010d8:	3fa4d84e 	.word	0x3fa4d84e

080010dc <getGres>:

void getGres() {
	switch (Gscale) {
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <getGres+0x30>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d812      	bhi.n	800110a <getGres+0x2e>
 80010e4:	e8df f003 	tbb	[pc, r3]
 80010e8:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <getGres+0x34>)
 80010ee:	4a09      	ldr	r2, [pc, #36]	; (8001114 <getGres+0x38>)
 80010f0:	601a      	str	r2, [r3, #0]
		break;
 80010f2:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <getGres+0x34>)
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <getGres+0x3c>)
 80010f8:	601a      	str	r2, [r3, #0]
		break;
 80010fa:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <getGres+0x34>)
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <getGres+0x40>)
 8001100:	601a      	str	r2, [r3, #0]
		break;
 8001102:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 8001104:	4b02      	ldr	r3, [pc, #8]	; (8001110 <getGres+0x34>)
 8001106:	4a06      	ldr	r2, [pc, #24]	; (8001120 <getGres+0x44>)
 8001108:	601a      	str	r2, [r3, #0]
		break;
	}
}
 800110a:	4770      	bx	lr
 800110c:	2000026d 	.word	0x2000026d
 8001110:	200003c0 	.word	0x200003c0
 8001114:	3bfa0000 	.word	0x3bfa0000
 8001118:	3c7a0000 	.word	0x3c7a0000
 800111c:	3cfa0000 	.word	0x3cfa0000
 8001120:	3d7a0000 	.word	0x3d7a0000

08001124 <getAres>:

void getAres() {
	switch (Ascale) {
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <getAres+0x38>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d816      	bhi.n	800115a <getAres+0x36>
 800112c:	e8df f003 	tbb	[pc, r3]
 8001130:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <getAres+0x3c>)
 8001136:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800113a:	601a      	str	r2, [r3, #0]
		break;
 800113c:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <getAres+0x3c>)
 8001140:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001144:	601a      	str	r2, [r3, #0]
		break;
 8001146:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <getAres+0x3c>)
 800114a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800114e:	601a      	str	r2, [r3, #0]
		break;
 8001150:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 8001152:	4b03      	ldr	r3, [pc, #12]	; (8001160 <getAres+0x3c>)
 8001154:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001158:	601a      	str	r2, [r3, #0]
		break;
	}
}
 800115a:	4770      	bx	lr
 800115c:	2000026c 	.word	0x2000026c
 8001160:	200003b4 	.word	0x200003b4

08001164 <readAccelData>:

void readAccelData(int16_t * destination) {
 8001164:	b510      	push	{r4, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800116a:	ab02      	add	r3, sp, #8
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2306      	movs	r3, #6
 8001170:	223b      	movs	r2, #59	; 0x3b
 8001172:	21d1      	movs	r1, #209	; 0xd1
 8001174:	20d0      	movs	r0, #208	; 0xd0
 8001176:	f7ff ff71 	bl	800105c <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800117a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800117e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001182:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001186:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001188:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800118c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001190:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001194:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001196:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800119a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800119e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011a2:	80a3      	strh	r3, [r4, #4]
}
 80011a4:	b004      	add	sp, #16
 80011a6:	bd10      	pop	{r4, pc}

080011a8 <readGyroData>:

void readGyroData(int16_t * destination) {
 80011a8:	b510      	push	{r4, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 80011ae:	ab02      	add	r3, sp, #8
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2306      	movs	r3, #6
 80011b4:	2243      	movs	r2, #67	; 0x43
 80011b6:	21d1      	movs	r1, #209	; 0xd1
 80011b8:	20d0      	movs	r0, #208	; 0xd0
 80011ba:	f7ff ff4f 	bl	800105c <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80011be:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80011c2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80011c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011ca:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80011cc:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80011d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011d8:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011da:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011de:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011e6:	80a3      	strh	r3, [r4, #4]
}
 80011e8:	b004      	add	sp, #16
 80011ea:	bd10      	pop	{r4, pc}

080011ec <readMagData>:

void readMagData(int16_t * destination) {
 80011ec:	b510      	push	{r4, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 80011f2:	2202      	movs	r2, #2
 80011f4:	2119      	movs	r1, #25
 80011f6:	2018      	movs	r0, #24
 80011f8:	f7ff fedc 	bl	8000fb4 <readByte>
 80011fc:	f010 0f01 	tst.w	r0, #1
 8001200:	d101      	bne.n	8001206 <readMagData+0x1a>
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
		}
	}
}
 8001202:	b004      	add	sp, #16
 8001204:	bd10      	pop	{r4, pc}
		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7, &rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
 8001206:	ab02      	add	r3, sp, #8
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2307      	movs	r3, #7
 800120c:	2203      	movs	r2, #3
 800120e:	2119      	movs	r1, #25
 8001210:	2018      	movs	r0, #24
 8001212:	f7ff ff23 	bl	800105c <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 8001216:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 800121a:	f013 0f08 	tst.w	r3, #8
 800121e:	d1f0      	bne.n	8001202 <readMagData+0x16>
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 8001220:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001224:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001228:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 800122c:	8023      	strh	r3, [r4, #0]
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 800122e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001232:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001236:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 800123a:	8063      	strh	r3, [r4, #2]
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 800123c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001240:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001244:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 8001248:	80a3      	strh	r3, [r4, #4]
}
 800124a:	e7da      	b.n	8001202 <readMagData+0x16>

0800124c <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 800124c:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	216b      	movs	r1, #107	; 0x6b
 8001252:	20d0      	movs	r0, #208	; 0xd0
 8001254:	f7ff fe94 	bl	8000f80 <writeByte>
	HAL_Delay(100);
 8001258:	2064      	movs	r0, #100	; 0x64
 800125a:	f001 fb29 	bl	80028b0 <HAL_Delay>
}
 800125e:	bd08      	pop	{r3, pc}

08001260 <initAK8963>:

void initAK8963(float * destination) {
 8001260:	b510      	push	{r4, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001266:	2200      	movs	r2, #0
 8001268:	210a      	movs	r1, #10
 800126a:	2018      	movs	r0, #24
 800126c:	f7ff fe88 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 8001270:	200a      	movs	r0, #10
 8001272:	f001 fb1d 	bl	80028b0 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001276:	220f      	movs	r2, #15
 8001278:	210a      	movs	r1, #10
 800127a:	2018      	movs	r0, #24
 800127c:	f7ff fe80 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 8001280:	200a      	movs	r0, #10
 8001282:	f001 fb15 	bl	80028b0 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 8001286:	ab03      	add	r3, sp, #12
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2303      	movs	r3, #3
 800128c:	2210      	movs	r2, #16
 800128e:	2119      	movs	r1, #25
 8001290:	2018      	movs	r0, #24
 8001292:	f7ff fee3 	bl	800105c <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001296:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800129a:	3b80      	subs	r3, #128	; 0x80
 800129c:	ee07 3a10 	vmov	s14, r3
 80012a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012a4:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 800131c <initAK8963+0xbc>
 80012a8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80012ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80012b4:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 80012b8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80012bc:	3b80      	subs	r3, #128	; 0x80
 80012be:	ee07 3a10 	vmov	s14, r3
 80012c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012c6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80012ca:	ee37 7a26 	vadd.f32	s14, s14, s13
 80012ce:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 80012d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012d6:	3b80      	subs	r3, #128	; 0x80
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80012e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012e8:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012ec:	2200      	movs	r2, #0
 80012ee:	210a      	movs	r1, #10
 80012f0:	2018      	movs	r0, #24
 80012f2:	f7ff fe45 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f001 fada 	bl	80028b0 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <initAK8963+0xc0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4a08      	ldr	r2, [pc, #32]	; (8001324 <initAK8963+0xc4>)
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	210a      	movs	r1, #10
 800130c:	2018      	movs	r0, #24
 800130e:	f7ff fe37 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 8001312:	200a      	movs	r0, #10
 8001314:	f001 facc 	bl	80028b0 <HAL_Delay>
}
 8001318:	b004      	add	sp, #16
 800131a:	bd10      	pop	{r4, pc}
 800131c:	3b800000 	.word	0x3b800000
 8001320:	20000001 	.word	0x20000001
 8001324:	20000000 	.word	0x20000000

08001328 <initMPU9250>:

void initMPU9250() {
 8001328:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 800132a:	2200      	movs	r2, #0
 800132c:	216b      	movs	r1, #107	; 0x6b
 800132e:	20d0      	movs	r0, #208	; 0xd0
 8001330:	f7ff fe26 	bl	8000f80 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f001 fabb 	bl	80028b0 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800133a:	2201      	movs	r2, #1
 800133c:	216b      	movs	r1, #107	; 0x6b
 800133e:	20d0      	movs	r0, #208	; 0xd0
 8001340:	f7ff fe1e 	bl	8000f80 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 8001344:	2200      	movs	r2, #0
 8001346:	211a      	movs	r1, #26
 8001348:	20d0      	movs	r0, #208	; 0xd0
 800134a:	f7ff fe19 	bl	8000f80 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 800134e:	2200      	movs	r2, #0
 8001350:	2119      	movs	r1, #25
 8001352:	20d0      	movs	r0, #208	; 0xd0
 8001354:	f7ff fe14 	bl	8000f80 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001358:	221b      	movs	r2, #27
 800135a:	21d1      	movs	r1, #209	; 0xd1
 800135c:	4608      	mov	r0, r1
 800135e:	f7ff fe29 	bl	8000fb4 <readByte>
 8001362:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001364:	f000 021f 	and.w	r2, r0, #31
 8001368:	211b      	movs	r1, #27
 800136a:	20d0      	movs	r0, #208	; 0xd0
 800136c:	f7ff fe08 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001370:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001374:	211b      	movs	r1, #27
 8001376:	20d0      	movs	r0, #208	; 0xd0
 8001378:	f7ff fe02 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <initMPU9250+0xd8>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	211b      	movs	r1, #27
 8001388:	20d0      	movs	r0, #208	; 0xd0
 800138a:	f7ff fdf9 	bl	8000f80 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 800138e:	221c      	movs	r2, #28
 8001390:	21d1      	movs	r1, #209	; 0xd1
 8001392:	4608      	mov	r0, r1
 8001394:	f7ff fe0e 	bl	8000fb4 <readByte>
 8001398:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 800139a:	f000 021f 	and.w	r2, r0, #31
 800139e:	211c      	movs	r1, #28
 80013a0:	20d0      	movs	r0, #208	; 0xd0
 80013a2:	f7ff fded 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 80013a6:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 80013aa:	211c      	movs	r1, #28
 80013ac:	20d0      	movs	r0, #208	; 0xd0
 80013ae:	f7ff fde7 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <initMPU9250+0xdc>)
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	211c      	movs	r1, #28
 80013be:	20d0      	movs	r0, #208	; 0xd0
 80013c0:	f7ff fdde 	bl	8000f80 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 80013c4:	221d      	movs	r2, #29
 80013c6:	21d1      	movs	r1, #209	; 0xd1
 80013c8:	4608      	mov	r0, r1
 80013ca:	f7ff fdf3 	bl	8000fb4 <readByte>
 80013ce:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80013d0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013d4:	211d      	movs	r1, #29
 80013d6:	20d0      	movs	r0, #208	; 0xd0
 80013d8:	f7ff fdd2 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80013dc:	f044 0203 	orr.w	r2, r4, #3
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	211d      	movs	r1, #29
 80013e4:	20d0      	movs	r0, #208	; 0xd0
 80013e6:	f7ff fdcb 	bl	8000f80 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013ea:	2222      	movs	r2, #34	; 0x22
 80013ec:	2137      	movs	r1, #55	; 0x37
 80013ee:	20d0      	movs	r0, #208	; 0xd0
 80013f0:	f7ff fdc6 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013f4:	2201      	movs	r2, #1
 80013f6:	2138      	movs	r1, #56	; 0x38
 80013f8:	20d0      	movs	r0, #208	; 0xd0
 80013fa:	f7ff fdc1 	bl	8000f80 <writeByte>
}
 80013fe:	bd10      	pop	{r4, pc}
 8001400:	2000026d 	.word	0x2000026d
 8001404:	2000026c 	.word	0x2000026c

08001408 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2) {
 8001408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800140c:	b08c      	sub	sp, #48	; 0x30
 800140e:	4607      	mov	r7, r0
 8001410:	460e      	mov	r6, r1
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };
 8001412:	2400      	movs	r4, #0
 8001414:	9406      	str	r4, [sp, #24]
 8001416:	9407      	str	r4, [sp, #28]
 8001418:	9408      	str	r4, [sp, #32]
 800141a:	9403      	str	r4, [sp, #12]
 800141c:	9404      	str	r4, [sp, #16]
 800141e:	9405      	str	r4, [sp, #20]

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	216b      	movs	r1, #107	; 0x6b
 8001424:	20d0      	movs	r0, #208	; 0xd0
 8001426:	f7ff fdab 	bl	8000f80 <writeByte>
	HAL_Delay(100);
 800142a:	2064      	movs	r0, #100	; 0x64
 800142c:	f001 fa40 	bl	80028b0 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01);
 8001430:	2201      	movs	r2, #1
 8001432:	216b      	movs	r1, #107	; 0x6b
 8001434:	20d0      	movs	r0, #208	; 0xd0
 8001436:	f7ff fda3 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_2, 0x00);
 800143a:	4622      	mov	r2, r4
 800143c:	216c      	movs	r1, #108	; 0x6c
 800143e:	20d0      	movs	r0, #208	; 0xd0
 8001440:	f7ff fd9e 	bl	8000f80 <writeByte>
	HAL_Delay(200);
 8001444:	20c8      	movs	r0, #200	; 0xc8
 8001446:	f001 fa33 	bl	80028b0 <HAL_Delay>

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x00); // Disable all interrupts
 800144a:	4622      	mov	r2, r4
 800144c:	2138      	movs	r1, #56	; 0x38
 800144e:	20d0      	movs	r0, #208	; 0xd0
 8001450:	f7ff fd96 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00);      // Disable FIFO
 8001454:	4622      	mov	r2, r4
 8001456:	2123      	movs	r1, #35	; 0x23
 8001458:	20d0      	movs	r0, #208	; 0xd0
 800145a:	f7ff fd91 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Turn on internal clock source
 800145e:	4622      	mov	r2, r4
 8001460:	216b      	movs	r1, #107	; 0x6b
 8001462:	20d0      	movs	r0, #208	; 0xd0
 8001464:	f7ff fd8c 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001468:	4622      	mov	r2, r4
 800146a:	2124      	movs	r1, #36	; 0x24
 800146c:	20d0      	movs	r0, #208	; 0xd0
 800146e:	f7ff fd87 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x00); // Disable FIFO and I2C master modes
 8001472:	4622      	mov	r2, r4
 8001474:	216a      	movs	r1, #106	; 0x6a
 8001476:	20d0      	movs	r0, #208	; 0xd0
 8001478:	f7ff fd82 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 800147c:	220c      	movs	r2, #12
 800147e:	216a      	movs	r1, #106	; 0x6a
 8001480:	20d0      	movs	r0, #208	; 0xd0
 8001482:	f7ff fd7d 	bl	8000f80 <writeByte>
	HAL_Delay(15);
 8001486:	200f      	movs	r0, #15
 8001488:	f001 fa12 	bl	80028b0 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x01); // Set low-pass filter to 188 Hz
 800148c:	2201      	movs	r2, #1
 800148e:	211a      	movs	r1, #26
 8001490:	20d0      	movs	r0, #208	; 0xd0
 8001492:	f7ff fd75 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set sample rate to 1 kHz
 8001496:	4622      	mov	r2, r4
 8001498:	2119      	movs	r1, #25
 800149a:	20d0      	movs	r0, #208	; 0xd0
 800149c:	f7ff fd70 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80014a0:	4622      	mov	r2, r4
 80014a2:	211b      	movs	r1, #27
 80014a4:	20d0      	movs	r0, #208	; 0xd0
 80014a6:	f7ff fd6b 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 80014aa:	4622      	mov	r2, r4
 80014ac:	211c      	movs	r1, #28
 80014ae:	20d0      	movs	r0, #208	; 0xd0
 80014b0:	f7ff fd66 	bl	8000f80 <writeByte>

	uint16_t gyrosensitivity = 131;   // = 131 LSB/degrees/sec
	uint16_t accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x40);   // Enable FIFO
 80014b4:	2240      	movs	r2, #64	; 0x40
 80014b6:	216a      	movs	r1, #106	; 0x6a
 80014b8:	20d0      	movs	r0, #208	; 0xd0
 80014ba:	f7ff fd61 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 80014be:	2278      	movs	r2, #120	; 0x78
 80014c0:	2123      	movs	r1, #35	; 0x23
 80014c2:	20d0      	movs	r0, #208	; 0xd0
 80014c4:	f7ff fd5c 	bl	8000f80 <writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 80014c8:	2028      	movs	r0, #40	; 0x28
 80014ca:	f001 f9f1 	bl	80028b0 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00); // Disable gyro and accelerometer sensors for FIFO
 80014ce:	4622      	mov	r2, r4
 80014d0:	2123      	movs	r1, #35	; 0x23
 80014d2:	20d0      	movs	r0, #208	; 0xd0
 80014d4:	f7ff fd54 	bl	8000f80 <writeByte>
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80014d8:	ab09      	add	r3, sp, #36	; 0x24
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2302      	movs	r3, #2
 80014de:	2272      	movs	r2, #114	; 0x72
 80014e0:	21d1      	movs	r1, #209	; 0xd1
 80014e2:	20d0      	movs	r0, #208	; 0xd0
 80014e4:	f7ff fdba 	bl	800105c <readBytes>
	fifo_count = ((uint16_t) data[0] << 8) | data[1];
 80014e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80014ec:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80014f0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 80014f4:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <calibrateMPU9250+0x2a4>)
 80014f6:	fba3 3505 	umull	r3, r5, r3, r5
 80014fa:	08ed      	lsrs	r5, r5, #3

	for (ii = 0; ii < packet_count; ii++) {
 80014fc:	e045      	b.n	800158a <calibrateMPU9250+0x182>
		int16_t accel_temp[3] = { 0, 0, 0 }, gyro_temp[3] = { 0, 0, 0 };
		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_R_W, 12,
 80014fe:	ab09      	add	r3, sp, #36	; 0x24
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	230c      	movs	r3, #12
 8001504:	2274      	movs	r2, #116	; 0x74
 8001506:	21d1      	movs	r1, #209	; 0xd1
 8001508:	20d0      	movs	r0, #208	; 0xd0
 800150a:	f7ff fda7 	bl	800105c <readBytes>
				&data[0]); // read data for averaging
		accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]); // Form signed 16-bit integer for each sample in FIFO
 800150e:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8001512:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 8001516:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
		accel_temp[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 800151a:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
 800151e:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 8001522:	ea40 2e0e 	orr.w	lr, r0, lr, lsl #8
		accel_temp[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 8001526:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 800152a:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 800152e:	ea40 2c0c 	orr.w	ip, r0, ip, lsl #8
		gyro_temp[0] = (int16_t) (((int16_t) data[6] << 8) | data[7]);
 8001532:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8001536:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 800153a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		gyro_temp[1] = (int16_t) (((int16_t) data[8] << 8) | data[9]);
 800153e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8001542:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8001546:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		gyro_temp[2] = (int16_t) (((int16_t) data[10] << 8) | data[11]);
 800154a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 800154e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8001552:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001556:	9803      	ldr	r0, [sp, #12]
 8001558:	fa00 f088 	sxtah	r0, r0, r8
 800155c:	9003      	str	r0, [sp, #12]
		accel_bias[1] += (int32_t) accel_temp[1];
 800155e:	9804      	ldr	r0, [sp, #16]
 8001560:	fa00 f08e 	sxtah	r0, r0, lr
 8001564:	9004      	str	r0, [sp, #16]
		accel_bias[2] += (int32_t) accel_temp[2];
 8001566:	9805      	ldr	r0, [sp, #20]
 8001568:	fa00 f08c 	sxtah	r0, r0, ip
 800156c:	9005      	str	r0, [sp, #20]
		gyro_bias[0] += (int32_t) gyro_temp[0];
 800156e:	9806      	ldr	r0, [sp, #24]
 8001570:	fa00 f181 	sxtah	r1, r0, r1
 8001574:	9106      	str	r1, [sp, #24]
		gyro_bias[1] += (int32_t) gyro_temp[1];
 8001576:	9907      	ldr	r1, [sp, #28]
 8001578:	fa01 f282 	sxtah	r2, r1, r2
 800157c:	9207      	str	r2, [sp, #28]
		gyro_bias[2] += (int32_t) gyro_temp[2];
 800157e:	9a08      	ldr	r2, [sp, #32]
 8001580:	fa02 f383 	sxtah	r3, r2, r3
 8001584:	9308      	str	r3, [sp, #32]
	for (ii = 0; ii < packet_count; ii++) {
 8001586:	3401      	adds	r4, #1
 8001588:	b2a4      	uxth	r4, r4
 800158a:	42ac      	cmp	r4, r5
 800158c:	d3b7      	bcc.n	80014fe <calibrateMPU9250+0xf6>

	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 800158e:	9b03      	ldr	r3, [sp, #12]
 8001590:	fb93 f8f5 	sdiv	r8, r3, r5
	accel_bias[1] /= (int32_t) packet_count;
 8001594:	9b04      	ldr	r3, [sp, #16]
 8001596:	fb93 f4f5 	sdiv	r4, r3, r5
	accel_bias[2] /= (int32_t) packet_count;
 800159a:	9805      	ldr	r0, [sp, #20]
 800159c:	fb90 f0f5 	sdiv	r0, r0, r5
	gyro_bias[0] /= (int32_t) packet_count;
 80015a0:	9906      	ldr	r1, [sp, #24]
 80015a2:	fb91 f1f5 	sdiv	r1, r1, r5
	gyro_bias[1] /= (int32_t) packet_count;
 80015a6:	9a07      	ldr	r2, [sp, #28]
 80015a8:	fb92 f2f5 	sdiv	r2, r2, r5
	gyro_bias[2] /= (int32_t) packet_count;
 80015ac:	9b08      	ldr	r3, [sp, #32]
 80015ae:	fb93 f5f5 	sdiv	r5, r3, r5

	if (accel_bias[2] > 0L) {
 80015b2:	2800      	cmp	r0, #0
 80015b4:	dd4f      	ble.n	8001656 <calibrateMPU9250+0x24e>
		accel_bias[2] -= (int32_t) accelsensitivity;
 80015b6:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 80015ba:	9005      	str	r0, [sp, #20]
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
	}

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80015bc:	424b      	negs	r3, r1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db4d      	blt.n	800165e <calibrateMPU9250+0x256>
 80015c2:	1098      	asrs	r0, r3, #2
 80015c4:	129b      	asrs	r3, r3, #10
 80015c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80015ca:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 80015ce:	4253      	negs	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db46      	blt.n	8001662 <calibrateMPU9250+0x25a>
 80015d4:	1098      	asrs	r0, r3, #2
 80015d6:	129b      	asrs	r3, r3, #10
 80015d8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
 80015dc:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 80015e0:	426b      	negs	r3, r5
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db3f      	blt.n	8001666 <calibrateMPU9250+0x25e>
 80015e6:	1098      	asrs	r0, r3, #2
 80015e8:	129b      	asrs	r3, r3, #10
 80015ea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	data[5] = (-gyro_bias[2] / 4) & 0xFF;
 80015ee:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_H, data[2]);
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_L, data[5]);
	 */
	dest1[0] = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 80015f2:	ee07 1a90 	vmov	s15, r1
 80015f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fa:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80016b0 <calibrateMPU9250+0x2a8>
 80015fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001602:	edc7 6a00 	vstr	s13, [r7]
	dest1[1] = (float) gyro_bias[1] / (float) gyrosensitivity;
 8001606:	ee07 2a90 	vmov	s15, r2
 800160a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001612:	edc7 6a01 	vstr	s13, [r7, #4]
	dest1[2] = (float) gyro_bias[2] / (float) gyrosensitivity;
 8001616:	ee07 5a90 	vmov	s15, r5
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001622:	edc7 6a02 	vstr	s13, [r7, #8]
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8001626:	ad09      	add	r5, sp, #36	; 0x24
 8001628:	9500      	str	r5, [sp, #0]
 800162a:	2302      	movs	r3, #2
 800162c:	2277      	movs	r2, #119	; 0x77
 800162e:	21d1      	movs	r1, #209	; 0xd1
 8001630:	20d0      	movs	r0, #208	; 0xd0
 8001632:	f7ff fd13 	bl	800105c <readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, YA_OFFSET_H, 2, &data[0]);
 8001636:	9500      	str	r5, [sp, #0]
 8001638:	2302      	movs	r3, #2
 800163a:	227a      	movs	r2, #122	; 0x7a
 800163c:	21d1      	movs	r1, #209	; 0xd1
 800163e:	20d0      	movs	r0, #208	; 0xd0
 8001640:	f7ff fd0c 	bl	800105c <readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ZA_OFFSET_H, 2, &data[0]);
 8001644:	9500      	str	r5, [sp, #0]
 8001646:	2302      	movs	r3, #2
 8001648:	227d      	movs	r2, #125	; 0x7d
 800164a:	21d1      	movs	r1, #209	; 0xd1
 800164c:	20d0      	movs	r0, #208	; 0xd0
 800164e:	f7ff fd05 	bl	800105c <readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t) data[0] << 8) | data[1];

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = { 0, 0, 0 }; // Define array to hold mask bit for each accelerometer bias axis

	for (ii = 0; ii < 3; ii++) {
 8001652:	2300      	movs	r3, #0
 8001654:	e00b      	b.n	800166e <calibrateMPU9250+0x266>
		accel_bias[2] += (int32_t) accelsensitivity;
 8001656:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800165a:	9005      	str	r0, [sp, #20]
 800165c:	e7ae      	b.n	80015bc <calibrateMPU9250+0x1b4>
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800165e:	3303      	adds	r3, #3
 8001660:	e7af      	b.n	80015c2 <calibrateMPU9250+0x1ba>
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8001662:	3303      	adds	r3, #3
 8001664:	e7b6      	b.n	80015d4 <calibrateMPU9250+0x1cc>
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8001666:	3303      	adds	r3, #3
 8001668:	e7bd      	b.n	80015e6 <calibrateMPU9250+0x1de>
	for (ii = 0; ii < 3; ii++) {
 800166a:	3301      	adds	r3, #1
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d9fb      	bls.n	800166a <calibrateMPU9250+0x262>
	 writeByte(MPU9250_ADDRESS_TX, YA_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_L, data[5]);
	 */
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
 8001672:	ee07 8a90 	vmov	s15, r8
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80016b4 <calibrateMPU9250+0x2ac>
 800167e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001682:	edc6 7a00 	vstr	s15, [r6]
	dest2[1] = (float) accel_bias[1] / (float) accelsensitivity;
 8001686:	ee07 4a90 	vmov	s15, r4
 800168a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001692:	edc6 7a01 	vstr	s15, [r6, #4]
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 8001696:	eddd 7a05 	vldr	s15, [sp, #20]
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a2:	edc6 7a02 	vstr	s15, [r6, #8]
}
 80016a6:	b00c      	add	sp, #48	; 0x30
 80016a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ac:	aaaaaaab 	.word	0xaaaaaaab
 80016b0:	43030000 	.word	0x43030000
 80016b4:	38800000 	.word	0x38800000

080016b8 <MPU9250SelfTest>:
 }


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 80016b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016bc:	ed2d 8b08 	vpush	{d8-d11}
 80016c0:	b093      	sub	sp, #76	; 0x4c
 80016c2:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 80016c4:	2400      	movs	r4, #0
 80016c6:	9410      	str	r4, [sp, #64]	; 0x40
 80016c8:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80016cc:	4622      	mov	r2, r4
 80016ce:	2119      	movs	r1, #25
 80016d0:	20d0      	movs	r0, #208	; 0xd0
 80016d2:	f7ff fc55 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80016d6:	2202      	movs	r2, #2
 80016d8:	211a      	movs	r1, #26
 80016da:	20d0      	movs	r0, #208	; 0xd0
 80016dc:	f7ff fc50 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 80016e0:	2201      	movs	r2, #1
 80016e2:	211b      	movs	r1, #27
 80016e4:	20d0      	movs	r0, #208	; 0xd0
 80016e6:	f7ff fc4b 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80016ea:	2202      	movs	r2, #2
 80016ec:	211d      	movs	r1, #29
 80016ee:	20d0      	movs	r0, #208	; 0xd0
 80016f0:	f7ff fc46 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 80016f4:	2201      	movs	r2, #1
 80016f6:	211c      	movs	r1, #28
 80016f8:	20d0      	movs	r0, #208	; 0xd0
 80016fa:	f7ff fc41 	bl	8000f80 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80016fe:	e051      	b.n	80017a4 <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001700:	ae10      	add	r6, sp, #64	; 0x40
 8001702:	9600      	str	r6, [sp, #0]
 8001704:	2306      	movs	r3, #6
 8001706:	223b      	movs	r2, #59	; 0x3b
 8001708:	21d1      	movs	r1, #209	; 0xd1
 800170a:	20d0      	movs	r0, #208	; 0xd0
 800170c:	f7ff fca6 	bl	800105c <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001710:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001714:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001718:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800171c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8001720:	4413      	add	r3, r2
 8001722:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001726:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800172a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800172e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001732:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8001736:	4413      	add	r3, r2
 8001738:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800173c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001740:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001744:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001748:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800174c:	4413      	add	r3, r2
 800174e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001752:	9600      	str	r6, [sp, #0]
 8001754:	2306      	movs	r3, #6
 8001756:	2243      	movs	r2, #67	; 0x43
 8001758:	21d1      	movs	r1, #209	; 0xd1
 800175a:	20d0      	movs	r0, #208	; 0xd0
 800175c:	f7ff fc7e 	bl	800105c <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001760:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001764:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001768:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800176c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8001770:	4413      	add	r3, r2
 8001772:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001776:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800177a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800177e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001782:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8001786:	4413      	add	r3, r2
 8001788:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800178c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001790:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001794:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001798:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800179c:	4413      	add	r3, r2
 800179e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80017a2:	3401      	adds	r4, #1
 80017a4:	2cc7      	cmp	r4, #199	; 0xc7
 80017a6:	ddab      	ble.n	8001700 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80017a8:	2400      	movs	r4, #0
 80017aa:	e016      	b.n	80017da <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 80017ac:	ab12      	add	r3, sp, #72	; 0x48
 80017ae:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80017b2:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 80017b6:	48c0      	ldr	r0, [pc, #768]	; (8001ab8 <MPU9250SelfTest+0x400>)
 80017b8:	fb80 6302 	smull	r6, r3, r0, r2
 80017bc:	17d2      	asrs	r2, r2, #31
 80017be:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80017c2:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 80017c6:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 80017ca:	fb80 2003 	smull	r2, r0, r0, r3
 80017ce:	17db      	asrs	r3, r3, #31
 80017d0:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 80017d4:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80017d8:	3401      	adds	r4, #1
 80017da:	2c02      	cmp	r4, #2
 80017dc:	dde6      	ble.n	80017ac <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80017de:	22e0      	movs	r2, #224	; 0xe0
 80017e0:	211c      	movs	r1, #28
 80017e2:	20d0      	movs	r0, #208	; 0xd0
 80017e4:	f7ff fbcc 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80017e8:	22e0      	movs	r2, #224	; 0xe0
 80017ea:	211b      	movs	r1, #27
 80017ec:	20d0      	movs	r0, #208	; 0xd0
 80017ee:	f7ff fbc7 	bl	8000f80 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80017f2:	2019      	movs	r0, #25
 80017f4:	f001 f85c 	bl	80028b0 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80017f8:	2400      	movs	r4, #0
 80017fa:	e051      	b.n	80018a0 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80017fc:	ae10      	add	r6, sp, #64	; 0x40
 80017fe:	9600      	str	r6, [sp, #0]
 8001800:	2306      	movs	r3, #6
 8001802:	223b      	movs	r2, #59	; 0x3b
 8001804:	21d1      	movs	r1, #209	; 0xd1
 8001806:	20d0      	movs	r0, #208	; 0xd0
 8001808:	f7ff fc28 	bl	800105c <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800180c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001810:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001814:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001818:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800181c:	4413      	add	r3, r2
 800181e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001822:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001826:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800182a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800182e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8001832:	4413      	add	r3, r2
 8001834:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001838:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800183c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001840:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001844:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8001848:	4413      	add	r3, r2
 800184a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800184e:	9600      	str	r6, [sp, #0]
 8001850:	2306      	movs	r3, #6
 8001852:	2243      	movs	r2, #67	; 0x43
 8001854:	21d1      	movs	r1, #209	; 0xd1
 8001856:	20d0      	movs	r0, #208	; 0xd0
 8001858:	f7ff fc00 	bl	800105c <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800185c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001860:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001864:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001868:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800186c:	4413      	add	r3, r2
 800186e:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001872:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001876:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800187a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800187e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8001882:	4413      	add	r3, r2
 8001884:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001888:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800188c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001890:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001894:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8001898:	4413      	add	r3, r2
 800189a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 800189e:	3401      	adds	r4, #1
 80018a0:	2cc7      	cmp	r4, #199	; 0xc7
 80018a2:	ddab      	ble.n	80017fc <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80018a4:	2400      	movs	r4, #0
 80018a6:	e016      	b.n	80018d6 <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 80018a8:	ab12      	add	r3, sp, #72	; 0x48
 80018aa:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80018ae:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 80018b2:	4881      	ldr	r0, [pc, #516]	; (8001ab8 <MPU9250SelfTest+0x400>)
 80018b4:	fb80 6302 	smull	r6, r3, r0, r2
 80018b8:	17d2      	asrs	r2, r2, #31
 80018ba:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80018be:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 80018c2:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 80018c6:	fb80 2003 	smull	r2, r0, r0, r3
 80018ca:	17db      	asrs	r3, r3, #31
 80018cc:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 80018d0:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80018d4:	3401      	adds	r4, #1
 80018d6:	2c02      	cmp	r4, #2
 80018d8:	dde6      	ble.n	80018a8 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 80018da:	2200      	movs	r2, #0
 80018dc:	211c      	movs	r1, #28
 80018de:	20d0      	movs	r0, #208	; 0xd0
 80018e0:	f7ff fb4e 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 80018e4:	2200      	movs	r2, #0
 80018e6:	211b      	movs	r1, #27
 80018e8:	20d0      	movs	r0, #208	; 0xd0
 80018ea:	f7ff fb49 	bl	8000f80 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80018ee:	2019      	movs	r0, #25
 80018f0:	f000 ffde 	bl	80028b0 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018f4:	220d      	movs	r2, #13
 80018f6:	21d1      	movs	r1, #209	; 0xd1
 80018f8:	20d0      	movs	r0, #208	; 0xd0
 80018fa:	f7ff fb5b 	bl	8000fb4 <readByte>
 80018fe:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001902:	220e      	movs	r2, #14
 8001904:	21d1      	movs	r1, #209	; 0xd1
 8001906:	20d0      	movs	r0, #208	; 0xd0
 8001908:	f7ff fb54 	bl	8000fb4 <readByte>
 800190c:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001910:	220f      	movs	r2, #15
 8001912:	21d1      	movs	r1, #209	; 0xd1
 8001914:	20d0      	movs	r0, #208	; 0xd0
 8001916:	f7ff fb4d 	bl	8000fb4 <readByte>
 800191a:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800191e:	2200      	movs	r2, #0
 8001920:	21d1      	movs	r1, #209	; 0xd1
 8001922:	20d0      	movs	r0, #208	; 0xd0
 8001924:	f7ff fb46 	bl	8000fb4 <readByte>
 8001928:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800192c:	2201      	movs	r2, #1
 800192e:	21d1      	movs	r1, #209	; 0xd1
 8001930:	20d0      	movs	r0, #208	; 0xd0
 8001932:	f7ff fb3f 	bl	8000fb4 <readByte>
 8001936:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800193a:	2202      	movs	r2, #2
 800193c:	21d1      	movs	r1, #209	; 0xd1
 800193e:	20d0      	movs	r0, #208	; 0xd0
 8001940:	f7ff fb38 	bl	8000fb4 <readByte>
 8001944:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001948:	eef8 7a48 	vcvt.f32.u32	s15, s16
 800194c:	ee17 0a90 	vmov	r0, s15
 8001950:	f7fe fdaa 	bl	80004a8 <__aeabi_f2d>
 8001954:	2200      	movs	r2, #0
 8001956:	4b59      	ldr	r3, [pc, #356]	; (8001abc <MPU9250SelfTest+0x404>)
 8001958:	f7fe fc46 	bl	80001e8 <__aeabi_dsub>
 800195c:	ed9f 8b52 	vldr	d8, [pc, #328]	; 8001aa8 <MPU9250SelfTest+0x3f0>
 8001960:	ec41 0b11 	vmov	d1, r0, r1
 8001964:	eeb0 0a48 	vmov.f32	s0, s16
 8001968:	eef0 0a68 	vmov.f32	s1, s17
 800196c:	f007 fa02 	bl	8008d74 <pow>
 8001970:	a34f      	add	r3, pc, #316	; (adr r3, 8001ab0 <MPU9250SelfTest+0x3f8>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	ec51 0b10 	vmov	r0, r1, d0
 800197a:	f7fe fded 	bl	8000558 <__aeabi_dmul>
 800197e:	f7ff f825 	bl	80009cc <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 8001982:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8001984:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 8001988:	ee17 0a90 	vmov	r0, s15
 800198c:	f7fe fd8c 	bl	80004a8 <__aeabi_f2d>
 8001990:	2200      	movs	r2, #0
 8001992:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <MPU9250SelfTest+0x404>)
 8001994:	f7fe fc28 	bl	80001e8 <__aeabi_dsub>
 8001998:	ec41 0b11 	vmov	d1, r0, r1
 800199c:	eeb0 0a48 	vmov.f32	s0, s16
 80019a0:	eef0 0a68 	vmov.f32	s1, s17
 80019a4:	f007 f9e6 	bl	8008d74 <pow>
 80019a8:	a341      	add	r3, pc, #260	; (adr r3, 8001ab0 <MPU9250SelfTest+0x3f8>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	ec51 0b10 	vmov	r0, r1, d0
 80019b2:	f7fe fdd1 	bl	8000558 <__aeabi_dmul>
 80019b6:	f7ff f809 	bl	80009cc <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 80019ba:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 80019bc:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 80019c0:	ee17 0a90 	vmov	r0, s15
 80019c4:	f7fe fd70 	bl	80004a8 <__aeabi_f2d>
 80019c8:	2200      	movs	r2, #0
 80019ca:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <MPU9250SelfTest+0x404>)
 80019cc:	f7fe fc0c 	bl	80001e8 <__aeabi_dsub>
 80019d0:	ec41 0b11 	vmov	d1, r0, r1
 80019d4:	eeb0 0a48 	vmov.f32	s0, s16
 80019d8:	eef0 0a68 	vmov.f32	s1, s17
 80019dc:	f007 f9ca 	bl	8008d74 <pow>
 80019e0:	a333      	add	r3, pc, #204	; (adr r3, 8001ab0 <MPU9250SelfTest+0x3f8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	ec51 0b10 	vmov	r0, r1, d0
 80019ea:	f7fe fdb5 	bl	8000558 <__aeabi_dmul>
 80019ee:	f7fe ffed 	bl	80009cc <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 80019f2:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 80019f4:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 80019f8:	ee17 0a90 	vmov	r0, s15
 80019fc:	f7fe fd54 	bl	80004a8 <__aeabi_f2d>
 8001a00:	2200      	movs	r2, #0
 8001a02:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <MPU9250SelfTest+0x404>)
 8001a04:	f7fe fbf0 	bl	80001e8 <__aeabi_dsub>
 8001a08:	ec41 0b11 	vmov	d1, r0, r1
 8001a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8001a10:	eef0 0a68 	vmov.f32	s1, s17
 8001a14:	f007 f9ae 	bl	8008d74 <pow>
 8001a18:	a325      	add	r3, pc, #148	; (adr r3, 8001ab0 <MPU9250SelfTest+0x3f8>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	ec51 0b10 	vmov	r0, r1, d0
 8001a22:	f7fe fd99 	bl	8000558 <__aeabi_dmul>
 8001a26:	f7fe ffd1 	bl	80009cc <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 8001a2a:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8001a2c:	eef8 7a69 	vcvt.f32.u32	s15, s19
 8001a30:	ee17 0a90 	vmov	r0, s15
 8001a34:	f7fe fd38 	bl	80004a8 <__aeabi_f2d>
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <MPU9250SelfTest+0x404>)
 8001a3c:	f7fe fbd4 	bl	80001e8 <__aeabi_dsub>
 8001a40:	ec41 0b11 	vmov	d1, r0, r1
 8001a44:	eeb0 0a48 	vmov.f32	s0, s16
 8001a48:	eef0 0a68 	vmov.f32	s1, s17
 8001a4c:	f007 f992 	bl	8008d74 <pow>
 8001a50:	a317      	add	r3, pc, #92	; (adr r3, 8001ab0 <MPU9250SelfTest+0x3f8>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	ec51 0b10 	vmov	r0, r1, d0
 8001a5a:	f7fe fd7d 	bl	8000558 <__aeabi_dmul>
 8001a5e:	f7fe ffb5 	bl	80009cc <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001a62:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001a64:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001a68:	ee17 0a90 	vmov	r0, s15
 8001a6c:	f7fe fd1c 	bl	80004a8 <__aeabi_f2d>
 8001a70:	2200      	movs	r2, #0
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MPU9250SelfTest+0x404>)
 8001a74:	f7fe fbb8 	bl	80001e8 <__aeabi_dsub>
 8001a78:	ec41 0b11 	vmov	d1, r0, r1
 8001a7c:	eeb0 0a48 	vmov.f32	s0, s16
 8001a80:	eef0 0a68 	vmov.f32	s1, s17
 8001a84:	f007 f976 	bl	8008d74 <pow>
 8001a88:	a309      	add	r3, pc, #36	; (adr r3, 8001ab0 <MPU9250SelfTest+0x3f8>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	ec51 0b10 	vmov	r0, r1, d0
 8001a92:	f7fe fd61 	bl	8000558 <__aeabi_dmul>
 8001a96:	f7fe ff99 	bl	80009cc <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 8001a9a:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8001a9c:	f04f 0800 	mov.w	r8, #0
 8001aa0:	e05f      	b.n	8001b62 <MPU9250SelfTest+0x4aa>
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	c28f5c29 	.word	0xc28f5c29
 8001aac:	3ff028f5 	.word	0x3ff028f5
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	40a47800 	.word	0x40a47800
 8001ab8:	51eb851f 	.word	0x51eb851f
 8001abc:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001ac0:	ab12      	add	r3, sp, #72	; 0x48
 8001ac2:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 8001ac6:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 8001aca:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 8001ace:	1ac0      	subs	r0, r0, r3
 8001ad0:	ee07 0a90 	vmov	s15, r0
 8001ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad8:	ee17 0a90 	vmov	r0, s15
 8001adc:	f7fe fce4 	bl	80004a8 <__aeabi_f2d>
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <MPU9250SelfTest+0x4bc>)
 8001ae4:	f7fe fd38 	bl	8000558 <__aeabi_dmul>
 8001ae8:	4606      	mov	r6, r0
 8001aea:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 8001aec:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001af0:	ab12      	add	r3, sp, #72	; 0x48
 8001af2:	444b      	add	r3, r9
 8001af4:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001af8:	f7fe fcd6 	bl	80004a8 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001afc:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4630      	mov	r0, r6
 8001b04:	4639      	mov	r1, r7
 8001b06:	f7fe fe51 	bl	80007ac <__aeabi_ddiv>
 8001b0a:	f7fe ff5f 	bl	80009cc <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001b0e:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b12:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001b16:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 8001b1a:	1ac0      	subs	r0, r0, r3
 8001b1c:	ee07 0a90 	vmov	s15, r0
 8001b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b24:	ee17 0a90 	vmov	r0, s15
 8001b28:	f7fe fcbe 	bl	80004a8 <__aeabi_f2d>
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MPU9250SelfTest+0x4bc>)
 8001b30:	f7fe fd12 	bl	8000558 <__aeabi_dmul>
 8001b34:	4606      	mov	r6, r0
 8001b36:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001b38:	f108 0403 	add.w	r4, r8, #3
 8001b3c:	00a4      	lsls	r4, r4, #2
 8001b3e:	ab12      	add	r3, sp, #72	; 0x48
 8001b40:	4423      	add	r3, r4
 8001b42:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001b46:	f7fe fcaf 	bl	80004a8 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b4a:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4630      	mov	r0, r6
 8001b52:	4639      	mov	r1, r7
 8001b54:	f7fe fe2a 	bl	80007ac <__aeabi_ddiv>
 8001b58:	f7fe ff38 	bl	80009cc <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b5c:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8001b5e:	f108 0801 	add.w	r8, r8, #1
 8001b62:	f1b8 0f02 	cmp.w	r8, #2
 8001b66:	ddab      	ble.n	8001ac0 <MPU9250SelfTest+0x408>
	}

}
 8001b68:	b013      	add	sp, #76	; 0x4c
 8001b6a:	ecbd 8b08 	vpop	{d8-d11}
 8001b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b72:	bf00      	nop
 8001b74:	40590000 	.word	0x40590000

08001b78 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 8001b78:	b538      	push	{r3, r4, r5, lr}
	resetMPU9250();
 8001b7a:	f7ff fb67 	bl	800124c <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 8001b7e:	4c56      	ldr	r4, [pc, #344]	; (8001cd8 <imu_calibrate+0x160>)
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7ff fd99 	bl	80016b8 <MPU9250SelfTest>
	printf(	"x-axis self test: acceleration trim within : %f of factory value\n\r", SelfTest[0]);
 8001b86:	6820      	ldr	r0, [r4, #0]
 8001b88:	f7fe fc8e 	bl	80004a8 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4852      	ldr	r0, [pc, #328]	; (8001cdc <imu_calibrate+0x164>)
 8001b92:	f005 f971 	bl	8006e78 <iprintf>
	printf(
 8001b96:	6860      	ldr	r0, [r4, #4]
 8001b98:	f7fe fc86 	bl	80004a8 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	484f      	ldr	r0, [pc, #316]	; (8001ce0 <imu_calibrate+0x168>)
 8001ba2:	f005 f969 	bl	8006e78 <iprintf>
	printf(
 8001ba6:	68a0      	ldr	r0, [r4, #8]
 8001ba8:	f7fe fc7e 	bl	80004a8 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	484c      	ldr	r0, [pc, #304]	; (8001ce4 <imu_calibrate+0x16c>)
 8001bb2:	f005 f961 	bl	8006e78 <iprintf>
	printf("x-axis self test: gyration trim within : %f  of factory value\n\r",
 8001bb6:	68e0      	ldr	r0, [r4, #12]
 8001bb8:	f7fe fc76 	bl	80004a8 <__aeabi_f2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4849      	ldr	r0, [pc, #292]	; (8001ce8 <imu_calibrate+0x170>)
 8001bc2:	f005 f959 	bl	8006e78 <iprintf>
	printf("y-axis self test: gyration trim within : %f  of factory value\n\r",
 8001bc6:	6920      	ldr	r0, [r4, #16]
 8001bc8:	f7fe fc6e 	bl	80004a8 <__aeabi_f2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4846      	ldr	r0, [pc, #280]	; (8001cec <imu_calibrate+0x174>)
 8001bd2:	f005 f951 	bl	8006e78 <iprintf>
	printf("z-axis self test: gyration trim within : %f  of factory value\n\r",
 8001bd6:	6960      	ldr	r0, [r4, #20]
 8001bd8:	f7fe fc66 	bl	80004a8 <__aeabi_f2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4843      	ldr	r0, [pc, #268]	; (8001cf0 <imu_calibrate+0x178>)
 8001be2:	f005 f949 	bl	8006e78 <iprintf>
	calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8001be6:	4c43      	ldr	r4, [pc, #268]	; (8001cf4 <imu_calibrate+0x17c>)
 8001be8:	4d43      	ldr	r5, [pc, #268]	; (8001cf8 <imu_calibrate+0x180>)
 8001bea:	4621      	mov	r1, r4
 8001bec:	4628      	mov	r0, r5
 8001bee:	f7ff fc0b 	bl	8001408 <calibrateMPU9250>
	printf("x gyro bias = %f\n\r", gyroBias[0]);
 8001bf2:	6828      	ldr	r0, [r5, #0]
 8001bf4:	f7fe fc58 	bl	80004a8 <__aeabi_f2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	483f      	ldr	r0, [pc, #252]	; (8001cfc <imu_calibrate+0x184>)
 8001bfe:	f005 f93b 	bl	8006e78 <iprintf>
	printf("y gyro bias = %f\n\r", gyroBias[1]);
 8001c02:	6868      	ldr	r0, [r5, #4]
 8001c04:	f7fe fc50 	bl	80004a8 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	483c      	ldr	r0, [pc, #240]	; (8001d00 <imu_calibrate+0x188>)
 8001c0e:	f005 f933 	bl	8006e78 <iprintf>
	printf("z gyro bias = %f\n\r", gyroBias[2]);
 8001c12:	68a8      	ldr	r0, [r5, #8]
 8001c14:	f7fe fc48 	bl	80004a8 <__aeabi_f2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4839      	ldr	r0, [pc, #228]	; (8001d04 <imu_calibrate+0x18c>)
 8001c1e:	f005 f92b 	bl	8006e78 <iprintf>
	printf("x accel bias = %f\n\r", accelBias[0]);
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	f7fe fc40 	bl	80004a8 <__aeabi_f2d>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4836      	ldr	r0, [pc, #216]	; (8001d08 <imu_calibrate+0x190>)
 8001c2e:	f005 f923 	bl	8006e78 <iprintf>
	printf("y accel bias = %f\n\r", accelBias[1]);
 8001c32:	6860      	ldr	r0, [r4, #4]
 8001c34:	f7fe fc38 	bl	80004a8 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4833      	ldr	r0, [pc, #204]	; (8001d0c <imu_calibrate+0x194>)
 8001c3e:	f005 f91b 	bl	8006e78 <iprintf>
	printf("z accel bias = %f\n\r", accelBias[2]);
 8001c42:	68a0      	ldr	r0, [r4, #8]
 8001c44:	f7fe fc30 	bl	80004a8 <__aeabi_f2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4830      	ldr	r0, [pc, #192]	; (8001d10 <imu_calibrate+0x198>)
 8001c4e:	f005 f913 	bl	8006e78 <iprintf>
	initMPU9250();
 8001c52:	f7ff fb69 	bl	8001328 <initMPU9250>
	initAK8963(magCalibration);
 8001c56:	482f      	ldr	r0, [pc, #188]	; (8001d14 <imu_calibrate+0x19c>)
 8001c58:	f7ff fb02 	bl	8001260 <initAK8963>
	printf("Accelerometer full-scale range = %f  g\n\r", 2.0f*(float)(1<<Ascale));
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <imu_calibrate+0x1a0>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2401      	movs	r4, #1
 8001c62:	fa04 f303 	lsl.w	r3, r4, r3
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c72:	ee17 0a90 	vmov	r0, s15
 8001c76:	f7fe fc17 	bl	80004a8 <__aeabi_f2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4827      	ldr	r0, [pc, #156]	; (8001d1c <imu_calibrate+0x1a4>)
 8001c80:	f005 f8fa 	bl	8006e78 <iprintf>
	printf("Gyroscope full-scale range = %f  deg/s\n\r", 250.0f*(float)(1<<Gscale));
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <imu_calibrate+0x1a8>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	409c      	lsls	r4, r3
 8001c8a:	ee07 4a90 	vmov	s15, r4
 8001c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c92:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001d24 <imu_calibrate+0x1ac>
 8001c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9a:	ee17 0a90 	vmov	r0, s15
 8001c9e:	f7fe fc03 	bl	80004a8 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4820      	ldr	r0, [pc, #128]	; (8001d28 <imu_calibrate+0x1b0>)
 8001ca8:	f005 f8e6 	bl	8006e78 <iprintf>
	getAres(); // Get accelerometer sensitivity
 8001cac:	f7ff fa3a 	bl	8001124 <getAres>
	getGres(); // Get gyro sensitivity
 8001cb0:	f7ff fa14 	bl	80010dc <getGres>
	getMres(); // Get magnetometer sensitivity
 8001cb4:	f7ff f9fc 	bl	80010b0 <getMres>
	magbias[0]	=	64.231575;
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <imu_calibrate+0x1b4>)
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <imu_calibrate+0x1b8>)
 8001cbc:	601a      	str	r2, [r3, #0]
	magbias[1]	=	-151.403;
 8001cbe:	4a1d      	ldr	r2, [pc, #116]	; (8001d34 <imu_calibrate+0x1bc>)
 8001cc0:	605a      	str	r2, [r3, #4]
	magbias[2]	=	117.918869;
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <imu_calibrate+0x1c0>)
 8001cc4:	609a      	str	r2, [r3, #8]
	magScale[0]	=	0.698056817;
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <imu_calibrate+0x1c4>)
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <imu_calibrate+0x1c8>)
 8001cca:	601a      	str	r2, [r3, #0]
	magScale[1]	=	1.17042613;
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <imu_calibrate+0x1cc>)
 8001cce:	605a      	str	r2, [r3, #4]
	magScale[2]	=	1.4024024;
 8001cd0:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <imu_calibrate+0x1d0>)
 8001cd2:	609a      	str	r2, [r3, #8]
}
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	bd38      	pop	{r3, r4, r5, pc}
 8001cd8:	2000032c 	.word	0x2000032c
 8001cdc:	0800a810 	.word	0x0800a810
 8001ce0:	0800a854 	.word	0x0800a854
 8001ce4:	0800a898 	.word	0x0800a898
 8001ce8:	0800a8dc 	.word	0x0800a8dc
 8001cec:	0800a91c 	.word	0x0800a91c
 8001cf0:	0800a95c 	.word	0x0800a95c
 8001cf4:	20000274 	.word	0x20000274
 8001cf8:	20000290 	.word	0x20000290
 8001cfc:	0800a99c 	.word	0x0800a99c
 8001d00:	0800a9b0 	.word	0x0800a9b0
 8001d04:	0800a9c4 	.word	0x0800a9c4
 8001d08:	0800a9d8 	.word	0x0800a9d8
 8001d0c:	0800a9ec 	.word	0x0800a9ec
 8001d10:	0800aa00 	.word	0x0800aa00
 8001d14:	200002a0 	.word	0x200002a0
 8001d18:	2000026c 	.word	0x2000026c
 8001d1c:	0800aa14 	.word	0x0800aa14
 8001d20:	2000026d 	.word	0x2000026d
 8001d24:	437a0000 	.word	0x437a0000
 8001d28:	0800aa40 	.word	0x0800aa40
 8001d2c:	200002ac 	.word	0x200002ac
 8001d30:	42807691 	.word	0x42807691
 8001d34:	c317672b 	.word	0xc317672b
 8001d38:	42ebd676 	.word	0x42ebd676
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	3f32b3da 	.word	0x3f32b3da
 8001d44:	3f95d086 	.word	0x3f95d086
 8001d48:	3fb381ec 	.word	0x3fb381ec

08001d4c <MahonyQuaternionUpdate>:
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d4c:	ee61 7a01 	vmul.f32	s15, s2, s2
		float gz, float mx, float my, float mz) {
 8001d50:	b530      	push	{r4, r5, lr}
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d52:	eee0 7aa0 	vfma.f32	s15, s1, s1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001d56:	4cb9      	ldr	r4, [pc, #740]	; (800203c <MahonyQuaternionUpdate+0x2f0>)
		float gz, float mx, float my, float mz) {
 8001d58:	ed2d 8b10 	vpush	{d8-d15}
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d5c:	eee0 7a00 	vfma.f32	s15, s0, s0
		float gz, float mx, float my, float mz) {
 8001d60:	b089      	sub	sp, #36	; 0x24
 8001d62:	eeb0 aa41 	vmov.f32	s20, s2
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d66:	ee17 0a90 	vmov	r0, s15
		float gz, float mx, float my, float mz) {
 8001d6a:	eeb0 ca61 	vmov.f32	s24, s3
 8001d6e:	eeb0 ea42 	vmov.f32	s28, s4
 8001d72:	eef0 da62 	vmov.f32	s27, s5
 8001d76:	eef0 ba43 	vmov.f32	s23, s6
 8001d7a:	eeb0 ba63 	vmov.f32	s22, s7
 8001d7e:	eef0 ca44 	vmov.f32	s25, s8
 8001d82:	eef0 8a60 	vmov.f32	s17, s1
 8001d86:	eeb0 8a40 	vmov.f32	s16, s0
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d8a:	f7fe fb8d 	bl	80004a8 <__aeabi_f2d>
 8001d8e:	ec41 0b10 	vmov	d0, r0, r1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001d92:	ed94 9a00 	vldr	s18, [r4]
 8001d96:	ed94 da01 	vldr	s26, [r4, #4]
 8001d9a:	edd4 aa02 	vldr	s21, [r4, #8]
 8001d9e:	edd4 9a03 	vldr	s19, [r4, #12]
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001da2:	f007 f957 	bl	8009054 <sqrt>
 8001da6:	ec51 0b10 	vmov	r0, r1, d0
 8001daa:	f7fe fe0f 	bl	80009cc <__aeabi_d2f>
 8001dae:	ee0e 0a90 	vmov	s29, r0
	if (norm == 0.0f)
 8001db2:	eef5 ea40 	vcmp.f32	s29, #0.0
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	d103      	bne.n	8001dc4 <MahonyQuaternionUpdate+0x78>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001dbc:	b009      	add	sp, #36	; 0x24
 8001dbe:	ecbd 8b10 	vpop	{d8-d15}
 8001dc2:	bd30      	pop	{r4, r5, pc}
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001dc4:	ee6c 7aac 	vmul.f32	s15, s25, s25
 8001dc8:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8001dcc:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8001dd0:	ee17 0a90 	vmov	r0, s15
 8001dd4:	f7fe fb68 	bl	80004a8 <__aeabi_f2d>
 8001dd8:	ec41 0b10 	vmov	d0, r0, r1
 8001ddc:	f007 f93a 	bl	8009054 <sqrt>
 8001de0:	ec51 0b10 	vmov	r0, r1, d0
 8001de4:	f7fe fdf2 	bl	80009cc <__aeabi_d2f>
 8001de8:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001dec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	d0e2      	beq.n	8001dbc <MahonyQuaternionUpdate+0x70>
	norm = 1.0f / norm;        // use reciprocal for division
 8001df6:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
	norm = 1.0f / norm;        // use reciprocal for division
 8001dfa:	ee8f 4a27 	vdiv.f32	s8, s30, s15
 8001dfe:	2500      	movs	r5, #0
	float q4q4 = q4 * q4;
 8001e00:	ee29 6aa9 	vmul.f32	s12, s19, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e04:	ee2d 7a4d 	vnmul.f32	s14, s26, s26
	float q2q3 = q2 * q3;
 8001e08:	ee6d 6a2a 	vmul.f32	s13, s26, s21
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e0c:	ee77 7a46 	vsub.f32	s15, s14, s12
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e10:	eef1 5a49 	vneg.f32	s11, s18
 8001e14:	eef0 4a46 	vmov.f32	s9, s12
 8001e18:	eef6 fa00 	vmov.f32	s31, #96	; 0x3f000000  0.5
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e1c:	eef0 3a66 	vmov.f32	s7, s13
	my *= norm;
 8001e20:	ee2b ba04 	vmul.f32	s22, s22, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e24:	eee5 6aa9 	vfma.f32	s13, s11, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e28:	eee9 3a29 	vfma.f32	s7, s18, s19
 8001e2c:	ee77 7aaf 	vadd.f32	s15, s15, s31
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e30:	eeea 4aaa 	vfma.f32	s9, s21, s21
	float q3q4 = q3 * q4;
 8001e34:	ee2a 5aa9 	vmul.f32	s10, s21, s19
	mx *= norm;
 8001e38:	ee6b ba84 	vmul.f32	s23, s23, s8
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e3c:	ee67 7a8b 	vmul.f32	s15, s15, s22
	norm = 1.0f / norm;        // use reciprocal for division
 8001e40:	ee8f 1a2e 	vdiv.f32	s2, s30, s29
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e44:	eeb0 3a45 	vmov.f32	s6, s10
	mz *= norm;
 8001e48:	ee6c ea84 	vmul.f32	s29, s25, s8
	float q2q4 = q2 * q4;
 8001e4c:	ee6d ca29 	vmul.f32	s25, s26, s19
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e50:	eea5 3a8d 	vfma.f32	s6, s11, s26
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e54:	ee7f 4ae4 	vsub.f32	s9, s31, s9
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e58:	eee3 7aab 	vfma.f32	s15, s7, s23
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e5c:	ee66 3a8b 	vmul.f32	s7, s13, s22
			+ 2.0f * mz * (q2q4 + q1q3);
 8001e60:	eeb0 4a6c 	vmov.f32	s8, s25
 8001e64:	eea9 4a2a 	vfma.f32	s8, s18, s21
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e68:	eee4 3aab 	vfma.f32	s7, s9, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e6c:	eee3 7a2e 	vfma.f32	s15, s6, s29
			+ 2.0f * mz * (q2q4 + q1q3);
 8001e70:	eee4 3a2e 	vfma.f32	s7, s8, s29
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e74:	ee77 7aa7 	vadd.f32	s15, s15, s15
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e78:	ee73 3aa3 	vadd.f32	s7, s7, s7
	bx = sqrt((hx * hx) + (hy * hy));
 8001e7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
	ax *= norm;
 8001e80:	ee28 8a01 	vmul.f32	s16, s16, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001e84:	eee3 7aa3 	vfma.f32	s15, s7, s7
	ay *= norm;
 8001e88:	ee68 8a81 	vmul.f32	s17, s17, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001e8c:	ee17 0a90 	vmov	r0, s15
	az *= norm;
 8001e90:	ee2a aa01 	vmul.f32	s20, s20, s2
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e94:	ed8d 7a07 	vstr	s14, [sp, #28]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e98:	ed8d 6a06 	vstr	s12, [sp, #24]
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e9c:	ed8d 5a05 	vstr	s10, [sp, #20]
 8001ea0:	edcd 5a04 	vstr	s11, [sp, #16]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001ea4:	edcd 6a03 	vstr	s13, [sp, #12]
 8001ea8:	edcd 4a02 	vstr	s9, [sp, #8]
			+ 2.0f * mz * (q2q4 + q1q3);
 8001eac:	ed8d 4a01 	vstr	s8, [sp, #4]
	bx = sqrt((hx * hx) + (hy * hy));
 8001eb0:	f7fe fafa 	bl	80004a8 <__aeabi_f2d>
 8001eb4:	ec41 0b10 	vmov	d0, r0, r1
 8001eb8:	f007 f8cc 	bl	8009054 <sqrt>
 8001ebc:	ec51 0b10 	vmov	r0, r1, d0
 8001ec0:	f7fe fd84 	bl	80009cc <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ec4:	ed9d 5a05 	vldr	s10, [sp, #20]
 8001ec8:	eddd 5a04 	vldr	s11, [sp, #16]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ecc:	ed9d 7a07 	vldr	s14, [sp, #28]
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ed0:	ed9d 6a06 	vldr	s12, [sp, #24]
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ed4:	eddd 4a02 	vldr	s9, [sp, #8]
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001ed8:	ed9d 4a01 	vldr	s8, [sp, #4]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001edc:	eddd 6a03 	vldr	s13, [sp, #12]
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001ee0:	4a57      	ldr	r2, [pc, #348]	; (8002040 <MahonyQuaternionUpdate+0x2f4>)
		eInt[0] = 0.0f;     // prevent integral wind up
 8001ee2:	4b58      	ldr	r3, [pc, #352]	; (8002044 <MahonyQuaternionUpdate+0x2f8>)
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ee4:	eea9 5a0d 	vfma.f32	s10, s18, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001ee8:	601d      	str	r5, [r3, #0]
		eInt[1] = 0.0f;
 8001eea:	605d      	str	r5, [r3, #4]
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001eec:	eee5 caaa 	vfma.f32	s25, s11, s21
		eInt[2] = 0.0f;
 8001ef0:	609d      	str	r5, [r3, #8]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ef2:	eeb1 3a6a 	vneg.f32	s6, s21
 8001ef6:	eef0 5a47 	vmov.f32	s11, s14
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001efa:	ee65 7a0b 	vmul.f32	s15, s10, s22
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001efe:	eee3 5a2a 	vfma.f32	s11, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001f02:	eeec 7aab 	vfma.f32	s15, s25, s23
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001f06:	ee75 5aaf 	vadd.f32	s11, s11, s31
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001f0a:	eea9 7a09 	vfma.f32	s14, s18, s18
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001f0e:	eee5 7aae 	vfma.f32	s15, s11, s29
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001f12:	eea3 7a2a 	vfma.f32	s14, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001f16:	ee77 7aa7 	vadd.f32	s15, s15, s15
	bx = sqrt((hx * hx) + (hy * hy));
 8001f1a:	ee03 0a90 	vmov	s7, r0
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001f1e:	ee37 6a06 	vadd.f32	s12, s14, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001f22:	ee2c 3aa7 	vmul.f32	s6, s25, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001f26:	ee7c caac 	vadd.f32	s25, s25, s25
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001f2a:	eea4 3aa3 	vfma.f32	s6, s9, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f2e:	ee66 4a48 	vnmul.f32	s9, s12, s16
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f32:	ee25 7aa7 	vmul.f32	s14, s11, s15
	vy = 2.0f * (q1q2 + q3q4);
 8001f36:	ee75 5a05 	vadd.f32	s11, s10, s10
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f3a:	eeea 4a2c 	vfma.f32	s9, s20, s25
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f3e:	eea4 7a23 	vfma.f32	s14, s8, s7
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f42:	ee25 1aca 	vnmul.f32	s2, s11, s20
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f46:	ee65 7a27 	vmul.f32	s15, s10, s15
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f4a:	eea8 1a86 	vfma.f32	s2, s17, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001f4e:	ee33 5a03 	vadd.f32	s10, s6, s6
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f52:	eee6 7aa3 	vfma.f32	s15, s13, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f56:	eef0 6a64 	vmov.f32	s13, s9
 8001f5a:	eeee 6a85 	vfma.f32	s13, s29, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f5e:	ee37 7a07 	vadd.f32	s14, s14, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f62:	ee6c cae8 	vnmul.f32	s25, s25, s17
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f66:	eeab 1a07 	vfma.f32	s2, s22, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f6a:	eee8 ca25 	vfma.f32	s25, s16, s11
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f6e:	eeeb 6ac7 	vfms.f32	s13, s23, s14
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f72:	ee77 7aa7 	vadd.f32	s15, s15, s15
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001f76:	eeb0 8a6a 	vmov.f32	s16, s21
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f7a:	eeae 1ae7 	vfms.f32	s2, s29, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f7e:	eeeb caa7 	vfma.f32	s25, s23, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001f82:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	gy = gy + Kp * ey + Ki * eInt[1];
 8001f86:	eea6 eaa7 	vfma.f32	s28, s13, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001f8a:	eea1 ca27 	vfma.f32	s24, s2, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f8e:	eeeb ca45 	vfms.f32	s25, s22, s10
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001f92:	ee6a 6a8e 	vmul.f32	s13, s21, s28
	gz = gz + Kp * ez + Ki * eInt[2];
 8001f96:	eeec daa7 	vfma.f32	s27, s25, s15
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001f9a:	eeed 6a0c 	vfma.f32	s13, s26, s24
 8001f9e:	edd2 7a00 	vldr	s15, [r2]
 8001fa2:	eee9 6aad 	vfma.f32	s13, s19, s27
 8001fa6:	ee67 faaf 	vmul.f32	s31, s15, s31
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001faa:	ee29 7a8c 	vmul.f32	s14, s19, s24
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001fae:	eea6 9aef 	vfms.f32	s18, s13, s31
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001fb2:	ee6e 7a69 	vnmul.f32	s15, s28, s19
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001fb6:	eead 7a6d 	vfms.f32	s14, s26, s27
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001fba:	eeea 7aad 	vfma.f32	s15, s21, s27
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001fbe:	eeae 7a09 	vfma.f32	s14, s28, s18
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001fc2:	eeec 7a09 	vfma.f32	s15, s24, s18
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001fc6:	eea7 8a2f 	vfma.f32	s16, s14, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001fca:	ee2c ca6a 	vnmul.f32	s24, s24, s21
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001fce:	eef0 8a4d 	vmov.f32	s17, s26
 8001fd2:	eee7 8aaf 	vfma.f32	s17, s15, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001fd6:	eead ca0e 	vfma.f32	s24, s26, s28
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001fda:	ee68 7a08 	vmul.f32	s15, s16, s16
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001fde:	eead ca89 	vfma.f32	s24, s27, s18
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001fe2:	eee8 7aa8 	vfma.f32	s15, s17, s17
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001fe6:	eeec 9a2f 	vfma.f32	s19, s24, s31
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001fea:	eee9 7a09 	vfma.f32	s15, s18, s18
 8001fee:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8001ff2:	ee17 0a90 	vmov	r0, s15
 8001ff6:	f7fe fa57 	bl	80004a8 <__aeabi_f2d>
 8001ffa:	ec41 0b10 	vmov	d0, r0, r1
 8001ffe:	f007 f829 	bl	8009054 <sqrt>
 8002002:	ec51 0b10 	vmov	r0, r1, d0
 8002006:	f7fe fce1 	bl	80009cc <__aeabi_d2f>
	norm = 1.0f / norm;
 800200a:	ee07 0a90 	vmov	s15, r0
 800200e:	eecf 7a27 	vdiv.f32	s15, s30, s15
	q[1] = q2 * norm;
 8002012:	ee68 8aa7 	vmul.f32	s17, s17, s15
	q[2] = q3 * norm;
 8002016:	ee28 8a27 	vmul.f32	s16, s16, s15
	q[3] = q4 * norm;
 800201a:	ee69 9aa7 	vmul.f32	s19, s19, s15
	q[0] = q1 * norm;
 800201e:	ee29 9a27 	vmul.f32	s18, s18, s15
	q[1] = q2 * norm;
 8002022:	edc4 8a01 	vstr	s17, [r4, #4]
	q[2] = q3 * norm;
 8002026:	ed84 8a02 	vstr	s16, [r4, #8]
	q[3] = q4 * norm;
 800202a:	edc4 9a03 	vstr	s19, [r4, #12]
	q[0] = q1 * norm;
 800202e:	ed84 9a00 	vstr	s18, [r4]
}
 8002032:	b009      	add	sp, #36	; 0x24
 8002034:	ecbd 8b10 	vpop	{d8-d15}
 8002038:	bd30      	pop	{r4, r5, pc}
 800203a:	bf00      	nop
 800203c:	20000010 	.word	0x20000010
 8002040:	20000280 	.word	0x20000280
 8002044:	20000284 	.word	0x20000284

08002048 <calc_RollPitchYaw>:
void calc_RollPitchYaw(int counter_value) {
 8002048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800204c:	ed2d 8b04 	vpush	{d8-d9}
 8002050:	ee08 0a10 	vmov	s16, r0
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 8002054:	223a      	movs	r2, #58	; 0x3a
 8002056:	21d1      	movs	r1, #209	; 0xd1
 8002058:	20d0      	movs	r0, #208	; 0xd0
 800205a:	f7fe ffab 	bl	8000fb4 <readByte>
 800205e:	f010 0f01 	tst.w	r0, #1
 8002062:	f040 8157 	bne.w	8002314 <calc_RollPitchYaw+0x2cc>
	Now = counter_value;
 8002066:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 800206a:	4b95      	ldr	r3, [pc, #596]	; (80022c0 <calc_RollPitchYaw+0x278>)
 800206c:	edc3 7a00 	vstr	s15, [r3]
	if(Now - lastUpdate < 0){
 8002070:	4b94      	ldr	r3, [pc, #592]	; (80022c4 <calc_RollPitchYaw+0x27c>)
 8002072:	edd3 6a00 	vldr	s13, [r3]
 8002076:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800207a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	f100 8201 	bmi.w	8002488 <calc_RollPitchYaw+0x440>
	deltat = (float) ((Now - lastUpdate) * (1 / (TIMER_CLK_FREQ / 100.0f))); // set integration time by time elapsed since last filter update
 8002086:	eddf 6a90 	vldr	s13, [pc, #576]	; 80022c8 <calc_RollPitchYaw+0x280>
 800208a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800208e:	4b8f      	ldr	r3, [pc, #572]	; (80022cc <calc_RollPitchYaw+0x284>)
 8002090:	ed83 7a00 	vstr	s14, [r3]
	lastUpdate = Now;
 8002094:	4b8b      	ldr	r3, [pc, #556]	; (80022c4 <calc_RollPitchYaw+0x27c>)
 8002096:	edc3 7a00 	vstr	s15, [r3]
	sum += deltat;
 800209a:	4e8d      	ldr	r6, [pc, #564]	; (80022d0 <calc_RollPitchYaw+0x288>)
 800209c:	edd6 7a00 	vldr	s15, [r6]
 80020a0:	4b8a      	ldr	r3, [pc, #552]	; (80022cc <calc_RollPitchYaw+0x284>)
 80020a2:	ed93 7a00 	vldr	s14, [r3]
 80020a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020aa:	edc6 7a00 	vstr	s15, [r6]
	sumCount++;
 80020ae:	4d89      	ldr	r5, [pc, #548]	; (80022d4 <calc_RollPitchYaw+0x28c>)
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	602b      	str	r3, [r5, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <calc_RollPitchYaw+0x290>)
 80020b8:	edd3 1a00 	vldr	s3, [r3]
 80020bc:	eddf 7a87 	vldr	s15, [pc, #540]	; 80022dc <calc_RollPitchYaw+0x294>
 80020c0:	ee61 1aa7 	vmul.f32	s3, s3, s15
 80020c4:	4b86      	ldr	r3, [pc, #536]	; (80022e0 <calc_RollPitchYaw+0x298>)
 80020c6:	ed93 2a00 	vldr	s4, [r3]
 80020ca:	ee22 2a27 	vmul.f32	s4, s4, s15
 80020ce:	4b85      	ldr	r3, [pc, #532]	; (80022e4 <calc_RollPitchYaw+0x29c>)
 80020d0:	edd3 2a00 	vldr	s5, [r3]
 80020d4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80020d8:	eddf 7a83 	vldr	s15, [pc, #524]	; 80022e8 <calc_RollPitchYaw+0x2a0>
 80020dc:	4b83      	ldr	r3, [pc, #524]	; (80022ec <calc_RollPitchYaw+0x2a4>)
 80020de:	ed93 4a00 	vldr	s8, [r3]
 80020e2:	4b83      	ldr	r3, [pc, #524]	; (80022f0 <calc_RollPitchYaw+0x2a8>)
 80020e4:	edd3 3a00 	vldr	s7, [r3]
 80020e8:	4b82      	ldr	r3, [pc, #520]	; (80022f4 <calc_RollPitchYaw+0x2ac>)
 80020ea:	ed93 3a00 	vldr	s6, [r3]
 80020ee:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 80020f2:	ee82 2a27 	vdiv.f32	s4, s4, s15
 80020f6:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 80020fa:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <calc_RollPitchYaw+0x2b0>)
 80020fc:	ed93 1a00 	vldr	s2, [r3]
 8002100:	4b7e      	ldr	r3, [pc, #504]	; (80022fc <calc_RollPitchYaw+0x2b4>)
 8002102:	edd3 0a00 	vldr	s1, [r3]
 8002106:	4b7e      	ldr	r3, [pc, #504]	; (8002300 <calc_RollPitchYaw+0x2b8>)
 8002108:	ed93 0a00 	vldr	s0, [r3]
 800210c:	f7ff fe1e 	bl	8001d4c <MahonyQuaternionUpdate>
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8002110:	4c7c      	ldr	r4, [pc, #496]	; (8002304 <calc_RollPitchYaw+0x2bc>)
 8002112:	edd4 9a01 	vldr	s19, [r4, #4]
 8002116:	ed94 9a02 	vldr	s18, [r4, #8]
 800211a:	ee29 7a89 	vmul.f32	s14, s19, s18
 800211e:	ed94 8a00 	vldr	s16, [r4]
 8002122:	edd4 8a03 	vldr	s17, [r4, #12]
 8002126:	ee68 7a28 	vmul.f32	s15, s16, s17
 800212a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212e:	ee17 0a90 	vmov	r0, s15
 8002132:	f7fe f9b9 	bl	80004a8 <__aeabi_f2d>
 8002136:	4680      	mov	r8, r0
 8002138:	4689      	mov	r9, r1
 800213a:	ee28 8a08 	vmul.f32	s16, s16, s16
 800213e:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8002142:	ee38 8a29 	vadd.f32	s16, s16, s19
 8002146:	ee29 9a09 	vmul.f32	s18, s18, s18
 800214a:	ee38 8a49 	vsub.f32	s16, s16, s18
 800214e:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8002152:	ee78 7a68 	vsub.f32	s15, s16, s17
 8002156:	ee17 0a90 	vmov	r0, s15
 800215a:	f7fe f9a5 	bl	80004a8 <__aeabi_f2d>
 800215e:	4682      	mov	sl, r0
 8002160:	468b      	mov	fp, r1
 8002162:	4642      	mov	r2, r8
 8002164:	464b      	mov	r3, r9
 8002166:	4640      	mov	r0, r8
 8002168:	4649      	mov	r1, r9
 800216a:	f7fe f83f 	bl	80001ec <__adddf3>
 800216e:	ec4b ab11 	vmov	d1, sl, fp
 8002172:	ec41 0b10 	vmov	d0, r0, r1
 8002176:	f006 fdfb 	bl	8008d70 <atan2>
 800217a:	ec51 0b10 	vmov	r0, r1, d0
 800217e:	f7fe fc25 	bl	80009cc <__aeabi_d2f>
 8002182:	4f61      	ldr	r7, [pc, #388]	; (8002308 <calc_RollPitchYaw+0x2c0>)
 8002184:	6038      	str	r0, [r7, #0]
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 8002186:	ed94 7a01 	vldr	s14, [r4, #4]
 800218a:	edd4 7a03 	vldr	s15, [r4, #12]
 800218e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002192:	edd4 7a00 	vldr	s15, [r4]
 8002196:	edd4 6a02 	vldr	s13, [r4, #8]
 800219a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800219e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a2:	ee17 0a90 	vmov	r0, s15
 80021a6:	f7fe f97f 	bl	80004a8 <__aeabi_f2d>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	f7fe f81d 	bl	80001ec <__adddf3>
 80021b2:	ec41 0b10 	vmov	d0, r0, r1
 80021b6:	f006 fd83 	bl	8008cc0 <asin>
 80021ba:	ec51 0b10 	vmov	r0, r1, d0
 80021be:	f7fe fc05 	bl	80009cc <__aeabi_d2f>
 80021c2:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8002310 <calc_RollPitchYaw+0x2c8>
 80021c6:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80021ca:	f8ca 0000 	str.w	r0, [sl]
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 80021ce:	ed94 8a00 	vldr	s16, [r4]
 80021d2:	edd4 9a01 	vldr	s19, [r4, #4]
 80021d6:	ee28 7a29 	vmul.f32	s14, s16, s19
 80021da:	ed94 9a02 	vldr	s18, [r4, #8]
 80021de:	edd4 8a03 	vldr	s17, [r4, #12]
 80021e2:	ee69 7a28 	vmul.f32	s15, s18, s17
 80021e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ea:	ee17 0a90 	vmov	r0, s15
 80021ee:	f7fe f95b 	bl	80004a8 <__aeabi_f2d>
 80021f2:	4680      	mov	r8, r0
 80021f4:	4689      	mov	r9, r1
 80021f6:	ee28 8a08 	vmul.f32	s16, s16, s16
 80021fa:	ee69 9aa9 	vmul.f32	s19, s19, s19
 80021fe:	ee38 8a69 	vsub.f32	s16, s16, s19
 8002202:	ee29 9a09 	vmul.f32	s18, s18, s18
 8002206:	ee38 8a49 	vsub.f32	s16, s16, s18
 800220a:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800220e:	ee78 7a28 	vadd.f32	s15, s16, s17
 8002212:	ee17 0a90 	vmov	r0, s15
 8002216:	f7fe f947 	bl	80004a8 <__aeabi_f2d>
 800221a:	ec41 0b18 	vmov	d8, r0, r1
 800221e:	4642      	mov	r2, r8
 8002220:	464b      	mov	r3, r9
 8002222:	4640      	mov	r0, r8
 8002224:	4649      	mov	r1, r9
 8002226:	f7fd ffe1 	bl	80001ec <__adddf3>
 800222a:	eeb0 1a48 	vmov.f32	s2, s16
 800222e:	eef0 1a68 	vmov.f32	s3, s17
 8002232:	ec41 0b10 	vmov	d0, r0, r1
 8002236:	f006 fd9b 	bl	8008d70 <atan2>
 800223a:	ec51 0b10 	vmov	r0, r1, d0
 800223e:	f7fe fbc5 	bl	80009cc <__aeabi_d2f>
 8002242:	4604      	mov	r4, r0
	pitch *= 180.0 / PI;
 8002244:	f8da 0000 	ldr.w	r0, [sl]
 8002248:	f7fe f92e 	bl	80004a8 <__aeabi_f2d>
 800224c:	a318      	add	r3, pc, #96	; (adr r3, 80022b0 <calc_RollPitchYaw+0x268>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f981 	bl	8000558 <__aeabi_dmul>
 8002256:	f7fe fbb9 	bl	80009cc <__aeabi_d2f>
 800225a:	f8ca 0000 	str.w	r0, [sl]
	yaw *= 180.0 / PI;
 800225e:	6838      	ldr	r0, [r7, #0]
 8002260:	f7fe f922 	bl	80004a8 <__aeabi_f2d>
 8002264:	a312      	add	r3, pc, #72	; (adr r3, 80022b0 <calc_RollPitchYaw+0x268>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	f7fe f975 	bl	8000558 <__aeabi_dmul>
 800226e:	f7fe fbad 	bl	80009cc <__aeabi_d2f>
	yaw -=  -0.27; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8002272:	f7fe f919 	bl	80004a8 <__aeabi_f2d>
 8002276:	a310      	add	r3, pc, #64	; (adr r3, 80022b8 <calc_RollPitchYaw+0x270>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fd ffb6 	bl	80001ec <__adddf3>
 8002280:	f7fe fba4 	bl	80009cc <__aeabi_d2f>
 8002284:	6038      	str	r0, [r7, #0]
	roll *= 180.0 / PI;
 8002286:	4620      	mov	r0, r4
 8002288:	f7fe f90e 	bl	80004a8 <__aeabi_f2d>
 800228c:	a308      	add	r3, pc, #32	; (adr r3, 80022b0 <calc_RollPitchYaw+0x268>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fe f961 	bl	8000558 <__aeabi_dmul>
 8002296:	f7fe fb99 	bl	80009cc <__aeabi_d2f>
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <calc_RollPitchYaw+0x2c4>)
 800229c:	6018      	str	r0, [r3, #0]
	sum = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	6033      	str	r3, [r6, #0]
	sumCount = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	602b      	str	r3, [r5, #0]
}
 80022a6:	ecbd 8b04 	vpop	{d8-d9}
 80022aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022ae:	bf00      	nop
 80022b0:	0d03cf26 	.word	0x0d03cf26
 80022b4:	404ca5dc 	.word	0x404ca5dc
 80022b8:	147ae148 	.word	0x147ae148
 80022bc:	3fd147ae 	.word	0x3fd147ae
 80022c0:	20000270 	.word	0x20000270
 80022c4:	2000029c 	.word	0x2000029c
 80022c8:	358637bd 	.word	0x358637bd
 80022cc:	20000280 	.word	0x20000280
 80022d0:	200002b8 	.word	0x200002b8
 80022d4:	200002bc 	.word	0x200002bc
 80022d8:	200003e0 	.word	0x200003e0
 80022dc:	40490fdb 	.word	0x40490fdb
 80022e0:	20000398 	.word	0x20000398
 80022e4:	200003bc 	.word	0x200003bc
 80022e8:	43340000 	.word	0x43340000
 80022ec:	200003c4 	.word	0x200003c4
 80022f0:	200003e8 	.word	0x200003e8
 80022f4:	200003ac 	.word	0x200003ac
 80022f8:	2000039c 	.word	0x2000039c
 80022fc:	200003e4 	.word	0x200003e4
 8002300:	200003b0 	.word	0x200003b0
 8002304:	20000010 	.word	0x20000010
 8002308:	200003c8 	.word	0x200003c8
 800230c:	200003d8 	.word	0x200003d8
 8002310:	200003d4 	.word	0x200003d4
		readAccelData(accelCount);  // Read the x/y/z adc values
 8002314:	4c63      	ldr	r4, [pc, #396]	; (80024a4 <calc_RollPitchYaw+0x45c>)
 8002316:	4620      	mov	r0, r4
 8002318:	f7fe ff24 	bl	8001164 <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 800231c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002320:	ee07 3a10 	vmov	s14, r3
 8002324:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002328:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <calc_RollPitchYaw+0x460>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002332:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <calc_RollPitchYaw+0x464>)
 8002334:	edd3 6a00 	vldr	s13, [r3]
 8002338:	ee37 7a66 	vsub.f32	s14, s14, s13
 800233c:	4a5c      	ldr	r2, [pc, #368]	; (80024b0 <calc_RollPitchYaw+0x468>)
 800233e:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 8002342:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8002346:	ee07 2a10 	vmov	s14, r2
 800234a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800234e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002352:	edd3 6a01 	vldr	s13, [r3, #4]
 8002356:	ee37 7a66 	vsub.f32	s14, s14, s13
 800235a:	4a56      	ldr	r2, [pc, #344]	; (80024b4 <calc_RollPitchYaw+0x46c>)
 800235c:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 8002360:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8002364:	ee07 2a10 	vmov	s14, r2
 8002368:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800236c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002370:	ed93 7a02 	vldr	s14, [r3, #8]
 8002374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002378:	4b4f      	ldr	r3, [pc, #316]	; (80024b8 <calc_RollPitchYaw+0x470>)
 800237a:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 800237e:	4c4f      	ldr	r4, [pc, #316]	; (80024bc <calc_RollPitchYaw+0x474>)
 8002380:	4620      	mov	r0, r4
 8002382:	f7fe ff11 	bl	80011a8 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8002386:	f9b4 3000 	ldrsh.w	r3, [r4]
 800238a:	ee07 3a10 	vmov	s14, r3
 800238e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002392:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <calc_RollPitchYaw+0x478>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239c:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <calc_RollPitchYaw+0x47c>)
 800239e:	edd3 6a00 	vldr	s13, [r3]
 80023a2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80023a6:	4a48      	ldr	r2, [pc, #288]	; (80024c8 <calc_RollPitchYaw+0x480>)
 80023a8:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 80023ac:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80023b0:	ee07 2a10 	vmov	s14, r2
 80023b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80023c0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80023c4:	4a41      	ldr	r2, [pc, #260]	; (80024cc <calc_RollPitchYaw+0x484>)
 80023c6:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 80023ca:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80023ce:	ee07 2a10 	vmov	s14, r2
 80023d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023da:	ed93 7a02 	vldr	s14, [r3, #8]
 80023de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <calc_RollPitchYaw+0x488>)
 80023e4:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 80023e8:	4c3a      	ldr	r4, [pc, #232]	; (80024d4 <calc_RollPitchYaw+0x48c>)
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7fe fefe 	bl	80011ec <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 80023f0:	f9b4 3000 	ldrsh.w	r3, [r4]
 80023f4:	ee06 3a90 	vmov	s13, r3
 80023f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <calc_RollPitchYaw+0x490>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002406:	4a35      	ldr	r2, [pc, #212]	; (80024dc <calc_RollPitchYaw+0x494>)
 8002408:	ed92 7a00 	vldr	s14, [r2]
 800240c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002410:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <calc_RollPitchYaw+0x498>)
 8002412:	ed93 7a00 	vldr	s14, [r3]
 8002416:	ee76 6ac7 	vsub.f32	s13, s13, s14
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 800241a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800241e:	ee07 1a10 	vmov	s14, r1
 8002422:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800242a:	ed92 6a01 	vldr	s12, [r2, #4]
 800242e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002432:	ed93 6a01 	vldr	s12, [r3, #4]
 8002436:	ee37 7a46 	vsub.f32	s14, s14, s12
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 800243a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800243e:	ee06 1a10 	vmov	s12, r1
 8002442:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002446:	ee67 7a86 	vmul.f32	s15, s15, s12
 800244a:	ed92 6a02 	vldr	s12, [r2, #8]
 800244e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002452:	ed93 6a02 	vldr	s12, [r3, #8]
 8002456:	ee77 7ac6 	vsub.f32	s15, s15, s12
	      mx *= magScale[0];
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <calc_RollPitchYaw+0x49c>)
 800245c:	ed93 6a00 	vldr	s12, [r3]
 8002460:	ee66 6a86 	vmul.f32	s13, s13, s12
 8002464:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <calc_RollPitchYaw+0x4a0>)
 8002466:	edc2 6a00 	vstr	s13, [r2]
	      my *= magScale[1];
 800246a:	edd3 6a01 	vldr	s13, [r3, #4]
 800246e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002472:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <calc_RollPitchYaw+0x4a4>)
 8002474:	ed82 7a00 	vstr	s14, [r2]
	      mz *= magScale[2];
 8002478:	ed93 7a02 	vldr	s14, [r3, #8]
 800247c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <calc_RollPitchYaw+0x4a8>)
 8002482:	edc3 7a00 	vstr	s15, [r3]
 8002486:	e5ee      	b.n	8002066 <calc_RollPitchYaw+0x1e>
		deltat = (float) (((65535-lastUpdate)+Now) * (1 / (TIMER_CLK_FREQ / 100.0f)));
 8002488:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80024f4 <calc_RollPitchYaw+0x4ac>
 800248c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002494:	eddf 6a18 	vldr	s13, [pc, #96]	; 80024f8 <calc_RollPitchYaw+0x4b0>
 8002498:	ee27 7a26 	vmul.f32	s14, s14, s13
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <calc_RollPitchYaw+0x4b4>)
 800249e:	ed83 7a00 	vstr	s14, [r3]
 80024a2:	e5f7      	b.n	8002094 <calc_RollPitchYaw+0x4c>
 80024a4:	20000324 	.word	0x20000324
 80024a8:	200003b4 	.word	0x200003b4
 80024ac:	20000274 	.word	0x20000274
 80024b0:	200003b0 	.word	0x200003b0
 80024b4:	200003e4 	.word	0x200003e4
 80024b8:	2000039c 	.word	0x2000039c
 80024bc:	200003a4 	.word	0x200003a4
 80024c0:	200003c0 	.word	0x200003c0
 80024c4:	20000290 	.word	0x20000290
 80024c8:	200003e0 	.word	0x200003e0
 80024cc:	20000398 	.word	0x20000398
 80024d0:	200003bc 	.word	0x200003bc
 80024d4:	200003cc 	.word	0x200003cc
 80024d8:	200003dc 	.word	0x200003dc
 80024dc:	200002a0 	.word	0x200002a0
 80024e0:	200002ac 	.word	0x200002ac
 80024e4:	20000004 	.word	0x20000004
 80024e8:	200003e8 	.word	0x200003e8
 80024ec:	200003ac 	.word	0x200003ac
 80024f0:	200003c4 	.word	0x200003c4
 80024f4:	477fff00 	.word	0x477fff00
 80024f8:	358637bd 	.word	0x358637bd
 80024fc:	20000280 	.word	0x20000280

08002500 <HAL_I2C_MasterTxCpltCallback>:



void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){

	I2cTxCplt = 1;
 8002500:	4b01      	ldr	r3, [pc, #4]	; (8002508 <HAL_I2C_MasterTxCpltCallback+0x8>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]

}
 8002506:	4770      	bx	lr
 8002508:	2000026f 	.word	0x2000026f

0800250c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){

	I2cRxCplt = 1;
 800250c:	4b01      	ldr	r3, [pc, #4]	; (8002514 <HAL_I2C_MasterRxCpltCallback+0x8>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]

}
 8002512:	4770      	bx	lr
 8002514:	2000026e 	.word	0x2000026e

08002518 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 8002518:	ee70 0a60 	vsub.f32	s1, s0, s1
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <pid_calculate_roll+0xac>)
 800251e:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8002522:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <pid_calculate_roll+0xb0>)
 8002524:	edd3 6a00 	vldr	s13, [r3]
 8002528:	ee60 6aa6 	vmul.f32	s13, s1, s13
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <pid_calculate_roll+0xb4>)
 800252e:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <pid_calculate_roll+0xb8>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ee60 7aa7 	vmul.f32	s15, s1, s15
 800253c:	eddf 5a25 	vldr	s11, [pc, #148]	; 80025d4 <pid_calculate_roll+0xbc>
 8002540:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <pid_calculate_roll+0xc0>)
 8002546:	ed93 7a00 	vldr	s14, [r3]
 800254a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800254e:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <pid_calculate_roll+0xc4>)
 8002554:	ed93 6a00 	vldr	s12, [r3]
 8002558:	ee30 6ac6 	vsub.f32	s12, s1, s12
 800255c:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002560:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <pid_calculate_roll+0xc8>)
 8002562:	ed92 6a00 	vldr	s12, [r2]
 8002566:	ee27 7a06 	vmul.f32	s14, s14, s12
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <pid_calculate_roll+0xcc>)
 800256c:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8002570:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8002574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <pid_calculate_roll+0xd0>)
 800257e:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <pid_calculate_roll+0xd4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	425a      	negs	r2, r3
 8002588:	ee07 2a10 	vmov	s14, r2
 800258c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d40c      	bmi.n	80025b4 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 800259a:	ee07 3a10 	vmov	s14, r3
 800259e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025aa:	dd06      	ble.n	80025ba <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <pid_calculate_roll+0xd0>)
 80025ae:	ed83 7a00 	vstr	s14, [r3]
 80025b2:	e002      	b.n	80025ba <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <pid_calculate_roll+0xd0>)
 80025b6:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <pid_calculate_roll+0xd0>)
 80025bc:	ed93 0a00 	vldr	s0, [r3]
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	200002cc 	.word	0x200002cc
 80025c8:	20000038 	.word	0x20000038
 80025cc:	20000400 	.word	0x20000400
 80025d0:	20000034 	.word	0x20000034
 80025d4:	3b012912 	.word	0x3b012912
 80025d8:	2000040c 	.word	0x2000040c
 80025dc:	200002d0 	.word	0x200002d0
 80025e0:	20000030 	.word	0x20000030
 80025e4:	200003ec 	.word	0x200003ec
 80025e8:	200002d4 	.word	0x200002d4
 80025ec:	2000003c 	.word	0x2000003c

080025f0 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	4a04      	ldr	r2, [pc, #16]	; (8002604 <reset_pid_roll+0x14>)
 80025f4:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 80025f6:	4a04      	ldr	r2, [pc, #16]	; (8002608 <reset_pid_roll+0x18>)
 80025f8:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 80025fa:	4a04      	ldr	r2, [pc, #16]	; (800260c <reset_pid_roll+0x1c>)
 80025fc:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <reset_pid_roll+0x20>)
 8002600:	6013      	str	r3, [r2, #0]

}
 8002602:	4770      	bx	lr
 8002604:	20000400 	.word	0x20000400
 8002608:	2000040c 	.word	0x2000040c
 800260c:	200003ec 	.word	0x200003ec
 8002610:	200002d4 	.word	0x200002d4

08002614 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 8002614:	ee70 0a60 	vsub.f32	s1, s0, s1
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <pid_calculate_pitch+0xac>)
 800261a:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <pid_calculate_pitch+0xb0>)
 8002620:	edd3 6a00 	vldr	s13, [r3]
 8002624:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <pid_calculate_pitch+0xb4>)
 800262a:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <pid_calculate_pitch+0xb8>)
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002638:	eddf 5a25 	vldr	s11, [pc, #148]	; 80026d0 <pid_calculate_pitch+0xbc>
 800263c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002640:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <pid_calculate_pitch+0xc0>)
 8002642:	ed93 7a00 	vldr	s14, [r3]
 8002646:	ee77 7a87 	vadd.f32	s15, s15, s14
 800264a:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <pid_calculate_pitch+0xc4>)
 8002650:	ed93 6a00 	vldr	s12, [r3]
 8002654:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002658:	ee86 7a25 	vdiv.f32	s14, s12, s11
 800265c:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <pid_calculate_pitch+0xc8>)
 800265e:	ed92 6a00 	vldr	s12, [r2]
 8002662:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002666:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <pid_calculate_pitch+0xcc>)
 8002668:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 800266c:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8002670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <pid_calculate_pitch+0xd0>)
 800267a:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <pid_calculate_pitch+0xd4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	425a      	negs	r2, r3
 8002684:	ee07 2a10 	vmov	s14, r2
 8002688:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800268c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	d40c      	bmi.n	80026b0 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8002696:	ee07 3a10 	vmov	s14, r3
 800269a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800269e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	dd06      	ble.n	80026b6 <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <pid_calculate_pitch+0xd0>)
 80026aa:	ed83 7a00 	vstr	s14, [r3]
 80026ae:	e002      	b.n	80026b6 <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <pid_calculate_pitch+0xd0>)
 80026b2:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <pid_calculate_pitch+0xd0>)
 80026b8:	ed93 0a00 	vldr	s0, [r3]
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	200002c0 	.word	0x200002c0
 80026c4:	20000028 	.word	0x20000028
 80026c8:	200003f8 	.word	0x200003f8
 80026cc:	20000024 	.word	0x20000024
 80026d0:	3b012912 	.word	0x3b012912
 80026d4:	200003fc 	.word	0x200003fc
 80026d8:	200002c4 	.word	0x200002c4
 80026dc:	20000020 	.word	0x20000020
 80026e0:	200003f0 	.word	0x200003f0
 80026e4:	200002c8 	.word	0x200002c8
 80026e8:	2000002c 	.word	0x2000002c

080026ec <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	4a04      	ldr	r2, [pc, #16]	; (8002700 <reset_pid_pitch+0x14>)
 80026f0:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <reset_pid_pitch+0x18>)
 80026f4:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <reset_pid_pitch+0x1c>)
 80026f8:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 80026fa:	4a04      	ldr	r2, [pc, #16]	; (800270c <reset_pid_pitch+0x20>)
 80026fc:	6013      	str	r3, [r2, #0]

}
 80026fe:	4770      	bx	lr
 8002700:	200003f8 	.word	0x200003f8
 8002704:	200003fc 	.word	0x200003fc
 8002708:	200003f0 	.word	0x200003f0
 800270c:	200002c8 	.word	0x200002c8

08002710 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = IMU_yaw_value - yaw_setpoint;
 8002710:	ee70 0a60 	vsub.f32	s1, s0, s1
 8002714:	4b29      	ldr	r3, [pc, #164]	; (80027bc <pid_calculate_yaw+0xac>)
 8002716:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 800271a:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <pid_calculate_yaw+0xb0>)
 800271c:	edd3 6a00 	vldr	s13, [r3]
 8002720:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <pid_calculate_yaw+0xb4>)
 8002726:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 800272a:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <pid_calculate_yaw+0xb8>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002734:	eddf 5a25 	vldr	s11, [pc, #148]	; 80027cc <pid_calculate_yaw+0xbc>
 8002738:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <pid_calculate_yaw+0xc0>)
 800273e:	ed93 7a00 	vldr	s14, [r3]
 8002742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002746:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <pid_calculate_yaw+0xc4>)
 800274c:	ed93 6a00 	vldr	s12, [r3]
 8002750:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002754:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <pid_calculate_yaw+0xc8>)
 800275a:	ed92 6a00 	vldr	s12, [r2]
 800275e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002762:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <pid_calculate_yaw+0xcc>)
 8002764:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 8002768:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 800276c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <pid_calculate_yaw+0xd0>)
 8002776:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 800277a:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <pid_calculate_yaw+0xd4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	425a      	negs	r2, r3
 8002780:	ee07 2a10 	vmov	s14, r2
 8002784:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002790:	d40c      	bmi.n	80027ac <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 8002792:	ee07 3a10 	vmov	s14, r3
 8002796:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800279a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	dd06      	ble.n	80027b2 <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <pid_calculate_yaw+0xd0>)
 80027a6:	ed83 7a00 	vstr	s14, [r3]
 80027aa:	e002      	b.n	80027b2 <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <pid_calculate_yaw+0xd0>)
 80027ae:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <pid_calculate_yaw+0xd0>)
 80027b4:	ed93 0a00 	vldr	s0, [r3]
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	200002d8 	.word	0x200002d8
 80027c0:	20000048 	.word	0x20000048
 80027c4:	20000408 	.word	0x20000408
 80027c8:	20000044 	.word	0x20000044
 80027cc:	3b012912 	.word	0x3b012912
 80027d0:	20000404 	.word	0x20000404
 80027d4:	200002dc 	.word	0x200002dc
 80027d8:	20000040 	.word	0x20000040
 80027dc:	200003f4 	.word	0x200003f4
 80027e0:	200002e0 	.word	0x200002e0
 80027e4:	2000004c 	.word	0x2000004c

080027e8 <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <reset_pid_yaw+0x14>)
 80027ec:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 80027ee:	4a04      	ldr	r2, [pc, #16]	; (8002800 <reset_pid_yaw+0x18>)
 80027f0:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 80027f2:	4a04      	ldr	r2, [pc, #16]	; (8002804 <reset_pid_yaw+0x1c>)
 80027f4:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 80027f6:	4a04      	ldr	r2, [pc, #16]	; (8002808 <reset_pid_yaw+0x20>)
 80027f8:	6013      	str	r3, [r2, #0]

}
 80027fa:	4770      	bx	lr
 80027fc:	20000408 	.word	0x20000408
 8002800:	20000404 	.word	0x20000404
 8002804:	200003f4 	.word	0x200003f4
 8002808:	200002e0 	.word	0x200002e0

0800280c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b510      	push	{r4, lr}
 800280e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_InitTick+0x40>)
 8002812:	7818      	ldrb	r0, [r3, #0]
 8002814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002818:	fbb3 f3f0 	udiv	r3, r3, r0
 800281c:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <HAL_InitTick+0x44>)
 800281e:	6810      	ldr	r0, [r2, #0]
 8002820:	fbb0 f0f3 	udiv	r0, r0, r3
 8002824:	f000 fa44 	bl	8002cb0 <HAL_SYSTICK_Config>
 8002828:	b968      	cbnz	r0, 8002846 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	2c0f      	cmp	r4, #15
 800282c:	d901      	bls.n	8002832 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800282e:	2001      	movs	r0, #1
 8002830:	e00a      	b.n	8002848 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002832:	2200      	movs	r2, #0
 8002834:	4621      	mov	r1, r4
 8002836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800283a:	f000 f9f7 	bl	8002c2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_InitTick+0x48>)
 8002840:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2000      	movs	r0, #0
 8002844:	e000      	b.n	8002848 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002846:	2001      	movs	r0, #1
}
 8002848:	bd10      	pop	{r4, pc}
 800284a:	bf00      	nop
 800284c:	20000050 	.word	0x20000050
 8002850:	20000078 	.word	0x20000078
 8002854:	20000054 	.word	0x20000054

08002858 <HAL_Init>:
{
 8002858:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_Init+0x30>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002862:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800286a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002872:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002874:	2003      	movs	r0, #3
 8002876:	f000 f9c7 	bl	8002c08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff ffc6 	bl	800280c <HAL_InitTick>
  HAL_MspInit();
 8002880:	f003 fba2 	bl	8005fc8 <HAL_MspInit>
}
 8002884:	2000      	movs	r0, #0
 8002886:	bd08      	pop	{r3, pc}
 8002888:	40023c00 	.word	0x40023c00

0800288c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800288c:	4a03      	ldr	r2, [pc, #12]	; (800289c <HAL_IncTick+0x10>)
 800288e:	6811      	ldr	r1, [r2, #0]
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <HAL_IncTick+0x14>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	440b      	add	r3, r1
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000410 	.word	0x20000410
 80028a0:	20000050 	.word	0x20000050

080028a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80028a4:	4b01      	ldr	r3, [pc, #4]	; (80028ac <HAL_GetTick+0x8>)
 80028a6:	6818      	ldr	r0, [r3, #0]
}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000410 	.word	0x20000410

080028b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b0:	b538      	push	{r3, r4, r5, lr}
 80028b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7ff fff6 	bl	80028a4 <HAL_GetTick>
 80028b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ba:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80028be:	d002      	beq.n	80028c6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_Delay+0x24>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028c6:	f7ff ffed 	bl	80028a4 <HAL_GetTick>
 80028ca:	1b40      	subs	r0, r0, r5
 80028cc:	42a0      	cmp	r0, r4
 80028ce:	d3fa      	bcc.n	80028c6 <HAL_Delay+0x16>
  {
  }
}
 80028d0:	bd38      	pop	{r3, r4, r5, pc}
 80028d2:	bf00      	nop
 80028d4:	20000050 	.word	0x20000050

080028d8 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028d8:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <ADC_Init+0x12c>)
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80028e0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	6841      	ldr	r1, [r0, #4]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ea:	6802      	ldr	r2, [r0, #0]
 80028ec:	6853      	ldr	r3, [r2, #4]
 80028ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028f4:	6802      	ldr	r2, [r0, #0]
 80028f6:	6853      	ldr	r3, [r2, #4]
 80028f8:	6901      	ldr	r1, [r0, #16]
 80028fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80028fe:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002900:	6802      	ldr	r2, [r0, #0]
 8002902:	6853      	ldr	r3, [r2, #4]
 8002904:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002908:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800290a:	6802      	ldr	r2, [r0, #0]
 800290c:	6853      	ldr	r3, [r2, #4]
 800290e:	6881      	ldr	r1, [r0, #8]
 8002910:	430b      	orrs	r3, r1
 8002912:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002914:	6802      	ldr	r2, [r0, #0]
 8002916:	6893      	ldr	r3, [r2, #8]
 8002918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800291c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800291e:	6802      	ldr	r2, [r0, #0]
 8002920:	6893      	ldr	r3, [r2, #8]
 8002922:	68c1      	ldr	r1, [r0, #12]
 8002924:	430b      	orrs	r3, r1
 8002926:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002928:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800292a:	4b37      	ldr	r3, [pc, #220]	; (8002a08 <ADC_Init+0x130>)
 800292c:	429a      	cmp	r2, r3
 800292e:	d04b      	beq.n	80029c8 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002930:	6802      	ldr	r2, [r0, #0]
 8002932:	6893      	ldr	r3, [r2, #8]
 8002934:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002938:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800293a:	6802      	ldr	r2, [r0, #0]
 800293c:	6893      	ldr	r3, [r2, #8]
 800293e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002940:	430b      	orrs	r3, r1
 8002942:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002944:	6802      	ldr	r2, [r0, #0]
 8002946:	6893      	ldr	r3, [r2, #8]
 8002948:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800294c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800294e:	6802      	ldr	r2, [r0, #0]
 8002950:	6893      	ldr	r3, [r2, #8]
 8002952:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002954:	430b      	orrs	r3, r1
 8002956:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002958:	6802      	ldr	r2, [r0, #0]
 800295a:	6893      	ldr	r3, [r2, #8]
 800295c:	f023 0302 	bic.w	r3, r3, #2
 8002960:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002962:	6802      	ldr	r2, [r0, #0]
 8002964:	6893      	ldr	r3, [r2, #8]
 8002966:	7e01      	ldrb	r1, [r0, #24]
 8002968:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800296c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800296e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d133      	bne.n	80029de <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002976:	6802      	ldr	r2, [r0, #0]
 8002978:	6853      	ldr	r3, [r2, #4]
 800297a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800297e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002980:	6802      	ldr	r2, [r0, #0]
 8002982:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002984:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002988:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800298a:	6801      	ldr	r1, [r0, #0]
 800298c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800298e:	69c2      	ldr	r2, [r0, #28]
 8002990:	3a01      	subs	r2, #1
 8002992:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002996:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002998:	6802      	ldr	r2, [r0, #0]
 800299a:	6893      	ldr	r3, [r2, #8]
 800299c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029a0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029a2:	6802      	ldr	r2, [r0, #0]
 80029a4:	6893      	ldr	r3, [r2, #8]
 80029a6:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80029aa:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80029ae:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029b0:	6802      	ldr	r2, [r0, #0]
 80029b2:	6893      	ldr	r3, [r2, #8]
 80029b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029b8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029ba:	6802      	ldr	r2, [r0, #0]
 80029bc:	6893      	ldr	r3, [r2, #8]
 80029be:	6941      	ldr	r1, [r0, #20]
 80029c0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80029c4:	6093      	str	r3, [r2, #8]
}
 80029c6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029c8:	6802      	ldr	r2, [r0, #0]
 80029ca:	6893      	ldr	r3, [r2, #8]
 80029cc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80029d0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029d2:	6802      	ldr	r2, [r0, #0]
 80029d4:	6893      	ldr	r3, [r2, #8]
 80029d6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80029da:	6093      	str	r3, [r2, #8]
 80029dc:	e7bc      	b.n	8002958 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029de:	6802      	ldr	r2, [r0, #0]
 80029e0:	6853      	ldr	r3, [r2, #4]
 80029e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e6:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029e8:	6802      	ldr	r2, [r0, #0]
 80029ea:	6853      	ldr	r3, [r2, #4]
 80029ec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029f0:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029f2:	6801      	ldr	r1, [r0, #0]
 80029f4:	684b      	ldr	r3, [r1, #4]
 80029f6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80029f8:	3a01      	subs	r2, #1
 80029fa:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80029fe:	604b      	str	r3, [r1, #4]
 8002a00:	e7be      	b.n	8002980 <ADC_Init+0xa8>
 8002a02:	bf00      	nop
 8002a04:	40012300 	.word	0x40012300
 8002a08:	0f000001 	.word	0x0f000001

08002a0c <HAL_ADC_Init>:
  if(hadc == NULL)
 8002a0c:	b338      	cbz	r0, 8002a5e <HAL_ADC_Init+0x52>
{
 8002a0e:	b510      	push	{r4, lr}
 8002a10:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a14:	b143      	cbz	r3, 8002a28 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a18:	f013 0f10 	tst.w	r3, #16
 8002a1c:	d00b      	beq.n	8002a36 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002a20:	2300      	movs	r3, #0
 8002a22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002a26:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8002a28:	f003 faea 	bl	8006000 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002a30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002a34:	e7ef      	b.n	8002a16 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8002a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a3c:	f023 0302 	bic.w	r3, r3, #2
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7ff ff46 	bl	80028d8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6423      	str	r3, [r4, #64]	; 0x40
 8002a5c:	e7e0      	b.n	8002a20 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8002a5e:	2001      	movs	r0, #1
}
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_ADC_ConfigChannel>:
{
 8002a64:	b430      	push	{r4, r5}
 8002a66:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002a6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f000 80bd 	beq.w	8002bf0 <HAL_ADC_ConfigChannel+0x18c>
 8002a76:	2301      	movs	r3, #1
 8002a78:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a7c:	680b      	ldr	r3, [r1, #0]
 8002a7e:	2b09      	cmp	r3, #9
 8002a80:	d93e      	bls.n	8002b00 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a82:	6805      	ldr	r5, [r0, #0]
 8002a84:	68ea      	ldr	r2, [r5, #12]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a8c:	3b1e      	subs	r3, #30
 8002a8e:	2407      	movs	r4, #7
 8002a90:	fa04 f303 	lsl.w	r3, r4, r3
 8002a94:	ea22 0303 	bic.w	r3, r2, r3
 8002a98:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a9a:	6805      	ldr	r5, [r0, #0]
 8002a9c:	68ea      	ldr	r2, [r5, #12]
 8002a9e:	688c      	ldr	r4, [r1, #8]
 8002aa0:	880b      	ldrh	r3, [r1, #0]
 8002aa2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002aa6:	3b1e      	subs	r3, #30
 8002aa8:	fa04 f303 	lsl.w	r3, r4, r3
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8002ab0:	684b      	ldr	r3, [r1, #4]
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d83a      	bhi.n	8002b2c <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ab6:	6805      	ldr	r5, [r0, #0]
 8002ab8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002aba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002abe:	3b05      	subs	r3, #5
 8002ac0:	241f      	movs	r4, #31
 8002ac2:	fa04 f303 	lsl.w	r3, r4, r3
 8002ac6:	ea22 0303 	bic.w	r3, r2, r3
 8002aca:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002acc:	6805      	ldr	r5, [r0, #0]
 8002ace:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002ad0:	684b      	ldr	r3, [r1, #4]
 8002ad2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ad6:	3b05      	subs	r3, #5
 8002ad8:	880c      	ldrh	r4, [r1, #0]
 8002ada:	fa04 f303 	lsl.w	r3, r4, r3
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ae2:	6802      	ldr	r2, [r0, #0]
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_ADC_ConfigChannel+0x190>)
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d050      	beq.n	8002b8c <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002aea:	6802      	ldr	r2, [r0, #0]
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_ADC_ConfigChannel+0x190>)
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d059      	beq.n	8002ba6 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8002af2:	2300      	movs	r3, #0
 8002af4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002af8:	4618      	mov	r0, r3
}
 8002afa:	b002      	add	sp, #8
 8002afc:	bc30      	pop	{r4, r5}
 8002afe:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b00:	6805      	ldr	r5, [r0, #0]
 8002b02:	692a      	ldr	r2, [r5, #16]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002b0a:	2407      	movs	r4, #7
 8002b0c:	fa04 f303 	lsl.w	r3, r4, r3
 8002b10:	ea22 0303 	bic.w	r3, r2, r3
 8002b14:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b16:	6805      	ldr	r5, [r0, #0]
 8002b18:	692a      	ldr	r2, [r5, #16]
 8002b1a:	688c      	ldr	r4, [r1, #8]
 8002b1c:	880b      	ldrh	r3, [r1, #0]
 8002b1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002b22:	fa04 f303 	lsl.w	r3, r4, r3
 8002b26:	4313      	orrs	r3, r2
 8002b28:	612b      	str	r3, [r5, #16]
 8002b2a:	e7c1      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d816      	bhi.n	8002b5e <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b30:	6805      	ldr	r5, [r0, #0]
 8002b32:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002b34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b38:	3b23      	subs	r3, #35	; 0x23
 8002b3a:	241f      	movs	r4, #31
 8002b3c:	fa04 f303 	lsl.w	r3, r4, r3
 8002b40:	ea22 0303 	bic.w	r3, r2, r3
 8002b44:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b46:	6805      	ldr	r5, [r0, #0]
 8002b48:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002b4a:	684b      	ldr	r3, [r1, #4]
 8002b4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b50:	3b23      	subs	r3, #35	; 0x23
 8002b52:	880c      	ldrh	r4, [r1, #0]
 8002b54:	fa04 f303 	lsl.w	r3, r4, r3
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	632b      	str	r3, [r5, #48]	; 0x30
 8002b5c:	e7c1      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b5e:	6805      	ldr	r5, [r0, #0]
 8002b60:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002b62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b66:	3b41      	subs	r3, #65	; 0x41
 8002b68:	241f      	movs	r4, #31
 8002b6a:	fa04 f303 	lsl.w	r3, r4, r3
 8002b6e:	ea22 0303 	bic.w	r3, r2, r3
 8002b72:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b74:	6805      	ldr	r5, [r0, #0]
 8002b76:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002b78:	684b      	ldr	r3, [r1, #4]
 8002b7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b7e:	3b41      	subs	r3, #65	; 0x41
 8002b80:	880c      	ldrh	r4, [r1, #0]
 8002b82:	fa04 f303 	lsl.w	r3, r4, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002b8a:	e7aa      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b8c:	680b      	ldr	r3, [r1, #0]
 8002b8e:	2b12      	cmp	r3, #18
 8002b90:	d1ab      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_ADC_ConfigChannel+0x194>)
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002b9a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	e7a1      	b.n	8002aea <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ba6:	680b      	ldr	r3, [r1, #0]
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <HAL_ADC_ConfigChannel+0x198>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d001      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x14e>
 8002bae:	2b11      	cmp	r3, #17
 8002bb0:	d19f      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_ADC_ConfigChannel+0x194>)
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002bba:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002bc2:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002bc4:	680a      	ldr	r2, [r1, #0]
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HAL_ADC_ConfigChannel+0x198>)
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d192      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <HAL_ADC_ConfigChannel+0x19c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <HAL_ADC_ConfigChannel+0x1a0>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	0c9b      	lsrs	r3, r3, #18
 8002bd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bdc:	005a      	lsls	r2, r3, #1
 8002bde:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 8002be2:	9b01      	ldr	r3, [sp, #4]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002be8:	9b01      	ldr	r3, [sp, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f9      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x17e>
 8002bee:	e780      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	e782      	b.n	8002afa <HAL_ADC_ConfigChannel+0x96>
 8002bf4:	40012000 	.word	0x40012000
 8002bf8:	40012300 	.word	0x40012300
 8002bfc:	10000012 	.word	0x10000012
 8002c00:	20000078 	.word	0x20000078
 8002c04:	431bde83 	.word	0x431bde83

08002c08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002c0a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c14:	0200      	lsls	r0, r0, #8
 8002c16:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002c1c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002c20:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002c24:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_NVIC_SetPriority+0x60>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c36:	f1c3 0407 	rsb	r4, r3, #7
 8002c3a:	2c04      	cmp	r4, #4
 8002c3c:	bf28      	it	cs
 8002c3e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c40:	1d1d      	adds	r5, r3, #4
 8002c42:	2d06      	cmp	r5, #6
 8002c44:	d918      	bls.n	8002c78 <HAL_NVIC_SetPriority+0x4c>
 8002c46:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c4c:	fa05 f404 	lsl.w	r4, r5, r4
 8002c50:	ea21 0104 	bic.w	r1, r1, r4
 8002c54:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c56:	fa05 f303 	lsl.w	r3, r5, r3
 8002c5a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002c60:	2800      	cmp	r0, #0
 8002c62:	db0b      	blt.n	8002c7c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	0109      	lsls	r1, r1, #4
 8002c66:	b2c9      	uxtb	r1, r1
 8002c68:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002c6c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002c70:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c74:	bc30      	pop	{r4, r5}
 8002c76:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e7e5      	b.n	8002c48 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7c:	f000 000f 	and.w	r0, r0, #15
 8002c80:	0109      	lsls	r1, r1, #4
 8002c82:	b2c9      	uxtb	r1, r1
 8002c84:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <HAL_NVIC_SetPriority+0x64>)
 8002c86:	5419      	strb	r1, [r3, r0]
 8002c88:	e7f4      	b.n	8002c74 <HAL_NVIC_SetPriority+0x48>
 8002c8a:	bf00      	nop
 8002c8c:	e000ed00 	.word	0xe000ed00
 8002c90:	e000ed14 	.word	0xe000ed14

08002c94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c94:	2800      	cmp	r0, #0
 8002c96:	db07      	blt.n	8002ca8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c98:	f000 021f 	and.w	r2, r0, #31
 8002c9c:	0940      	lsrs	r0, r0, #5
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	4093      	lsls	r3, r2
 8002ca2:	4a02      	ldr	r2, [pc, #8]	; (8002cac <HAL_NVIC_EnableIRQ+0x18>)
 8002ca4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb0:	3801      	subs	r0, #1
 8002cb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002cb6:	d20a      	bcs.n	8002cce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_SYSTICK_Config+0x24>)
 8002cba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbc:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <HAL_SYSTICK_Config+0x28>)
 8002cbe:	21f0      	movs	r1, #240	; 0xf0
 8002cc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002cce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e010 	.word	0xe000e010
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cdc:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cde:	6805      	ldr	r5, [r0, #0]
 8002ce0:	682c      	ldr	r4, [r5, #0]
 8002ce2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002ce6:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ce8:	6804      	ldr	r4, [r0, #0]
 8002cea:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cec:	6883      	ldr	r3, [r0, #8]
 8002cee:	2b40      	cmp	r3, #64	; 0x40
 8002cf0:	d005      	beq.n	8002cfe <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002cf2:	6803      	ldr	r3, [r0, #0]
 8002cf4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002cf6:	6803      	ldr	r3, [r0, #0]
 8002cf8:	60da      	str	r2, [r3, #12]
  }
}
 8002cfa:	bc30      	pop	{r4, r5}
 8002cfc:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002cfe:	6803      	ldr	r3, [r0, #0]
 8002d00:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002d02:	6803      	ldr	r3, [r0, #0]
 8002d04:	60d9      	str	r1, [r3, #12]
 8002d06:	e7f8      	b.n	8002cfa <DMA_SetConfig+0x1e>

08002d08 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d08:	6802      	ldr	r2, [r0, #0]
 8002d0a:	b2d3      	uxtb	r3, r2
 8002d0c:	3b10      	subs	r3, #16
 8002d0e:	490b      	ldr	r1, [pc, #44]	; (8002d3c <DMA_CalcBaseAndBitshift+0x34>)
 8002d10:	fba1 1303 	umull	r1, r3, r1, r3
 8002d14:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d16:	490a      	ldr	r1, [pc, #40]	; (8002d40 <DMA_CalcBaseAndBitshift+0x38>)
 8002d18:	5cc9      	ldrb	r1, [r1, r3]
 8002d1a:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d806      	bhi.n	8002d2e <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d20:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002d24:	f022 0203 	bic.w	r2, r2, #3
 8002d28:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002d2a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002d2c:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d2e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002d32:	f022 0203 	bic.w	r2, r2, #3
 8002d36:	3204      	adds	r2, #4
 8002d38:	6582      	str	r2, [r0, #88]	; 0x58
 8002d3a:	e7f6      	b.n	8002d2a <DMA_CalcBaseAndBitshift+0x22>
 8002d3c:	aaaaaaab 	.word	0xaaaaaaab
 8002d40:	0800aaa8 	.word	0x0800aaa8

08002d44 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d44:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d46:	6982      	ldr	r2, [r0, #24]
 8002d48:	b992      	cbnz	r2, 8002d70 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d00a      	beq.n	8002d64 <DMA_CheckFifoParam+0x20>
 8002d4e:	b11b      	cbz	r3, 8002d58 <DMA_CheckFifoParam+0x14>
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d001      	beq.n	8002d58 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002d54:	2000      	movs	r0, #0
 8002d56:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d5a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002d5e:	d12c      	bne.n	8002dba <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2000      	movs	r0, #0
 8002d62:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d64:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d6a:	d028      	beq.n	8002dbe <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d70:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002d74:	d005      	beq.n	8002d82 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d929      	bls.n	8002dce <DMA_CheckFifoParam+0x8a>
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d015      	beq.n	8002daa <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2000      	movs	r0, #0
 8002d80:	4770      	bx	lr
    switch (tmp)
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d803      	bhi.n	8002d8e <DMA_CheckFifoParam+0x4a>
 8002d86:	e8df f003 	tbb	[pc, r3]
 8002d8a:	041c      	.short	0x041c
 8002d8c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002d8e:	2000      	movs	r0, #0
 8002d90:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d92:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002d98:	d115      	bne.n	8002dc6 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002da0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002da4:	d011      	beq.n	8002dca <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2000      	movs	r0, #0
 8002da8:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002daa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002dac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002db0:	d001      	beq.n	8002db6 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002db2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002db4:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2000      	movs	r0, #0
 8002db8:	4770      	bx	lr
        status = HAL_ERROR;
 8002dba:	2001      	movs	r0, #1
 8002dbc:	4770      	bx	lr
        status = HAL_ERROR;
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	4770      	bx	lr
      status = HAL_ERROR;
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	4770      	bx	lr
        status = HAL_ERROR;
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	4770      	bx	lr
        status = HAL_ERROR;
 8002dca:	2001      	movs	r0, #1
 8002dcc:	4770      	bx	lr
      status = HAL_ERROR;
 8002dce:	2001      	movs	r0, #1
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_DMA_Init>:
{
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff fd64 	bl	80028a4 <HAL_GetTick>
  if(hdma == NULL)
 8002ddc:	2c00      	cmp	r4, #0
 8002dde:	d05b      	beq.n	8002e98 <HAL_DMA_Init+0xc4>
 8002de0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8002de2:	2300      	movs	r3, #0
 8002de4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002de8:	2302      	movs	r3, #2
 8002dea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002dee:	6822      	ldr	r2, [r4, #0]
 8002df0:	6813      	ldr	r3, [r2, #0]
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	f012 0f01 	tst.w	r2, #1
 8002e00:	d00a      	beq.n	8002e18 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e02:	f7ff fd4f 	bl	80028a4 <HAL_GetTick>
 8002e06:	1b40      	subs	r0, r0, r5
 8002e08:	2805      	cmp	r0, #5
 8002e0a:	d9f5      	bls.n	8002df8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e10:	2003      	movs	r0, #3
 8002e12:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002e18:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e1a:	4820      	ldr	r0, [pc, #128]	; (8002e9c <HAL_DMA_Init+0xc8>)
 8002e1c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e1e:	6861      	ldr	r1, [r4, #4]
 8002e20:	68a2      	ldr	r2, [r4, #8]
 8002e22:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e24:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e26:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e28:	6921      	ldr	r1, [r4, #16]
 8002e2a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e30:	69a1      	ldr	r1, [r4, #24]
 8002e32:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e34:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e36:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e38:	6a21      	ldr	r1, [r4, #32]
 8002e3a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e3c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e40:	2904      	cmp	r1, #4
 8002e42:	d01e      	beq.n	8002e82 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002e44:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002e46:	6826      	ldr	r6, [r4, #0]
 8002e48:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e4a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e50:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d107      	bne.n	8002e66 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002e56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e58:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e5c:	b11b      	cbz	r3, 8002e66 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f7ff ff70 	bl	8002d44 <DMA_CheckFifoParam>
 8002e64:	b990      	cbnz	r0, 8002e8c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002e66:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7ff ff4d 	bl	8002d08 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e70:	233f      	movs	r3, #63	; 0x3f
 8002e72:	4093      	lsls	r3, r2
 8002e74:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e76:	2000      	movs	r0, #0
 8002e78:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002e80:	e7c9      	b.n	8002e16 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e84:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e86:	4301      	orrs	r1, r0
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	e7db      	b.n	8002e44 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e8c:	2340      	movs	r3, #64	; 0x40
 8002e8e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002e90:	2001      	movs	r0, #1
 8002e92:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002e96:	e7be      	b.n	8002e16 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002e98:	2001      	movs	r0, #1
 8002e9a:	e7bc      	b.n	8002e16 <HAL_DMA_Init+0x42>
 8002e9c:	f010803f 	.word	0xf010803f

08002ea0 <HAL_DMA_Start_IT>:
{
 8002ea0:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea2:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002ea4:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002ea8:	2c01      	cmp	r4, #1
 8002eaa:	d031      	beq.n	8002f10 <HAL_DMA_Start_IT+0x70>
 8002eac:	2401      	movs	r4, #1
 8002eae:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eb2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002eb6:	b2e4      	uxtb	r4, r4
 8002eb8:	2c01      	cmp	r4, #1
 8002eba:	d004      	beq.n	8002ec6 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8002ec2:	2002      	movs	r0, #2
}
 8002ec4:	bd38      	pop	{r3, r4, r5, pc}
 8002ec6:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec8:	2002      	movs	r0, #2
 8002eca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ece:	2000      	movs	r0, #0
 8002ed0:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f7ff ff02 	bl	8002cdc <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002eda:	233f      	movs	r3, #63	; 0x3f
 8002edc:	4093      	lsls	r3, r2
 8002ede:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ee0:	6822      	ldr	r2, [r4, #0]
 8002ee2:	6813      	ldr	r3, [r2, #0]
 8002ee4:	f043 0316 	orr.w	r3, r3, #22
 8002ee8:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002eea:	6822      	ldr	r2, [r4, #0]
 8002eec:	6953      	ldr	r3, [r2, #20]
 8002eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef2:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002ef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ef6:	b123      	cbz	r3, 8002f02 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ef8:	6822      	ldr	r2, [r4, #0]
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	f043 0308 	orr.w	r3, r3, #8
 8002f00:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	6813      	ldr	r3, [r2, #0]
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	e7d9      	b.n	8002ec4 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002f10:	2002      	movs	r0, #2
 8002f12:	e7d7      	b.n	8002ec4 <HAL_DMA_Start_IT+0x24>

08002f14 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f14:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002f22:	2001      	movs	r0, #1
 8002f24:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f26:	2305      	movs	r3, #5
 8002f28:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002f2c:	6802      	ldr	r2, [r0, #0]
 8002f2e:	6813      	ldr	r3, [r2, #0]
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002f36:	2000      	movs	r0, #0
}
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_DMA_IRQHandler>:
{
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f46:	4b72      	ldr	r3, [pc, #456]	; (8003110 <HAL_DMA_IRQHandler+0x1d4>)
 8002f48:	681d      	ldr	r5, [r3, #0]
 8002f4a:	4b72      	ldr	r3, [pc, #456]	; (8003114 <HAL_DMA_IRQHandler+0x1d8>)
 8002f4c:	fba3 3505 	umull	r3, r5, r3, r5
 8002f50:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f52:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002f54:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f56:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002f58:	2308      	movs	r3, #8
 8002f5a:	4093      	lsls	r3, r2
 8002f5c:	4233      	tst	r3, r6
 8002f5e:	d010      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f60:	6803      	ldr	r3, [r0, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	f012 0f04 	tst.w	r2, #4
 8002f68:	d00b      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	f022 0204 	bic.w	r2, r2, #4
 8002f70:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f72:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002f74:	2308      	movs	r3, #8
 8002f76:	4093      	lsls	r3, r2
 8002f78:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f7a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f82:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002f84:	2301      	movs	r3, #1
 8002f86:	4093      	lsls	r3, r2
 8002f88:	4233      	tst	r3, r6
 8002f8a:	d009      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f8c:	6822      	ldr	r2, [r4, #0]
 8002f8e:	6952      	ldr	r2, [r2, #20]
 8002f90:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002f94:	d004      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f96:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	4093      	lsls	r3, r2
 8002fa6:	4233      	tst	r3, r6
 8002fa8:	d009      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002faa:	6822      	ldr	r2, [r4, #0]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	f012 0f02 	tst.w	r2, #2
 8002fb2:	d004      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fb4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	4093      	lsls	r3, r2
 8002fc4:	4233      	tst	r3, r6
 8002fc6:	d024      	beq.n	8003012 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fc8:	6822      	ldr	r2, [r4, #0]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	f012 0f08 	tst.w	r2, #8
 8002fd0:	d01f      	beq.n	8003012 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fd2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002fdc:	d00d      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002fe4:	d104      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fe8:	b19b      	cbz	r3, 8003012 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002fea:	4620      	mov	r0, r4
 8002fec:	4798      	blx	r3
 8002fee:	e010      	b.n	8003012 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ff0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ff2:	b173      	cbz	r3, 8003012 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	4798      	blx	r3
 8002ff8:	e00b      	b.n	8003012 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003000:	d103      	bne.n	800300a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f022 0208 	bic.w	r2, r2, #8
 8003008:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800300a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800300c:	b10b      	cbz	r3, 8003012 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800300e:	4620      	mov	r0, r4
 8003010:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003012:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003014:	2320      	movs	r3, #32
 8003016:	4093      	lsls	r3, r2
 8003018:	4233      	tst	r3, r6
 800301a:	d055      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	f012 0f10 	tst.w	r2, #16
 8003024:	d050      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003026:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003028:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b05      	cmp	r3, #5
 8003030:	d00e      	beq.n	8003050 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800303a:	d033      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003042:	d12a      	bne.n	800309a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8003044:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003046:	2b00      	cmp	r3, #0
 8003048:	d03e      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800304a:	4620      	mov	r0, r4
 800304c:	4798      	blx	r3
 800304e:	e03b      	b.n	80030c8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	6813      	ldr	r3, [r2, #0]
 8003054:	f023 0316 	bic.w	r3, r3, #22
 8003058:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800305a:	6822      	ldr	r2, [r4, #0]
 800305c:	6953      	ldr	r3, [r2, #20]
 800305e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003062:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003066:	b1a3      	cbz	r3, 8003092 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003068:	6822      	ldr	r2, [r4, #0]
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	f023 0308 	bic.w	r3, r3, #8
 8003070:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003072:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003074:	233f      	movs	r3, #63	; 0x3f
 8003076:	4093      	lsls	r3, r2
 8003078:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800307a:	2300      	movs	r3, #0
 800307c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003080:	2301      	movs	r3, #1
 8003082:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8003086:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003088:	2b00      	cmp	r3, #0
 800308a:	d03f      	beq.n	800310c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800308c:	4620      	mov	r0, r4
 800308e:	4798      	blx	r3
 8003090:	e03c      	b.n	800310c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003092:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e7      	bne.n	8003068 <HAL_DMA_IRQHandler+0x12c>
 8003098:	e7eb      	b.n	8003072 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800309a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800309c:	b1a3      	cbz	r3, 80030c8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800309e:	4620      	mov	r0, r4
 80030a0:	4798      	blx	r3
 80030a2:	e011      	b.n	80030c8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80030aa:	d109      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	f022 0210 	bic.w	r2, r2, #16
 80030b2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80030b4:	2300      	movs	r3, #0
 80030b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80030c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030c2:	b10b      	cbz	r3, 80030c8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80030c4:	4620      	mov	r0, r4
 80030c6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030ca:	b1fb      	cbz	r3, 800310c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030ce:	f013 0f01 	tst.w	r3, #1
 80030d2:	d017      	beq.n	8003104 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80030d4:	2305      	movs	r3, #5
 80030d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80030da:	6822      	ldr	r2, [r4, #0]
 80030dc:	6813      	ldr	r3, [r2, #0]
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80030e4:	9b01      	ldr	r3, [sp, #4]
 80030e6:	3301      	adds	r3, #1
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	42ab      	cmp	r3, r5
 80030ec:	d804      	bhi.n	80030f8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f013 0f01 	tst.w	r3, #1
 80030f6:	d1f5      	bne.n	80030e4 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80030f8:	2300      	movs	r3, #0
 80030fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80030fe:	2301      	movs	r3, #1
 8003100:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003104:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003106:	b10b      	cbz	r3, 800310c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003108:	4620      	mov	r0, r4
 800310a:	4798      	blx	r3
}
 800310c:	b003      	add	sp, #12
 800310e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003110:	20000078 	.word	0x20000078
 8003114:	1b4e81b5 	.word	0x1b4e81b5

08003118 <HAL_DMA_GetState>:
  return hdma->State;
 8003118:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800311c:	4770      	bx	lr

0800311e <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800311e:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8003120:	4770      	bx	lr
	...

08003124 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003124:	2300      	movs	r3, #0
 8003126:	2b0f      	cmp	r3, #15
 8003128:	f200 80c5 	bhi.w	80032b6 <HAL_GPIO_Init+0x192>
{
 800312c:	b4f0      	push	{r4, r5, r6, r7}
 800312e:	b082      	sub	sp, #8
 8003130:	e039      	b.n	80031a6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003132:	2204      	movs	r2, #4
 8003134:	e000      	b.n	8003138 <HAL_GPIO_Init+0x14>
 8003136:	2200      	movs	r2, #0
 8003138:	40b2      	lsls	r2, r6
 800313a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800313c:	3402      	adds	r4, #2
 800313e:	4e5e      	ldr	r6, [pc, #376]	; (80032b8 <HAL_GPIO_Init+0x194>)
 8003140:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003144:	4a5d      	ldr	r2, [pc, #372]	; (80032bc <HAL_GPIO_Init+0x198>)
 8003146:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003148:	43ea      	mvns	r2, r5
 800314a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800314e:	684f      	ldr	r7, [r1, #4]
 8003150:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003154:	d001      	beq.n	800315a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8003156:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800315a:	4c58      	ldr	r4, [pc, #352]	; (80032bc <HAL_GPIO_Init+0x198>)
 800315c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800315e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003160:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003164:	684f      	ldr	r7, [r1, #4]
 8003166:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800316a:	d001      	beq.n	8003170 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 800316c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8003170:	4c52      	ldr	r4, [pc, #328]	; (80032bc <HAL_GPIO_Init+0x198>)
 8003172:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003174:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003176:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800317a:	684f      	ldr	r7, [r1, #4]
 800317c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003180:	d001      	beq.n	8003186 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8003182:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8003186:	4c4d      	ldr	r4, [pc, #308]	; (80032bc <HAL_GPIO_Init+0x198>)
 8003188:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800318a:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800318c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800318e:	684e      	ldr	r6, [r1, #4]
 8003190:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003194:	d001      	beq.n	800319a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8003196:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800319a:	4c48      	ldr	r4, [pc, #288]	; (80032bc <HAL_GPIO_Init+0x198>)
 800319c:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800319e:	3301      	adds	r3, #1
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	f200 8085 	bhi.w	80032b0 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 80031a6:	2201      	movs	r2, #1
 80031a8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031aa:	680c      	ldr	r4, [r1, #0]
 80031ac:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80031b0:	42aa      	cmp	r2, r5
 80031b2:	d1f4      	bne.n	800319e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b4:	684c      	ldr	r4, [r1, #4]
 80031b6:	2c02      	cmp	r4, #2
 80031b8:	d001      	beq.n	80031be <HAL_GPIO_Init+0x9a>
 80031ba:	2c12      	cmp	r4, #18
 80031bc:	d110      	bne.n	80031e0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 80031be:	08de      	lsrs	r6, r3, #3
 80031c0:	3608      	adds	r6, #8
 80031c2:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031c6:	f003 0407 	and.w	r4, r3, #7
 80031ca:	00a7      	lsls	r7, r4, #2
 80031cc:	240f      	movs	r4, #15
 80031ce:	40bc      	lsls	r4, r7
 80031d0:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d4:	690c      	ldr	r4, [r1, #16]
 80031d6:	40bc      	lsls	r4, r7
 80031d8:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 80031dc:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80031e0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031e2:	005f      	lsls	r7, r3, #1
 80031e4:	2603      	movs	r6, #3
 80031e6:	40be      	lsls	r6, r7
 80031e8:	43f6      	mvns	r6, r6
 80031ea:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031ee:	684c      	ldr	r4, [r1, #4]
 80031f0:	f004 0403 	and.w	r4, r4, #3
 80031f4:	40bc      	lsls	r4, r7
 80031f6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80031fa:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031fc:	684c      	ldr	r4, [r1, #4]
 80031fe:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8003202:	f1bc 0f01 	cmp.w	ip, #1
 8003206:	d903      	bls.n	8003210 <HAL_GPIO_Init+0xec>
 8003208:	2c11      	cmp	r4, #17
 800320a:	d001      	beq.n	8003210 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800320c:	2c12      	cmp	r4, #18
 800320e:	d110      	bne.n	8003232 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8003210:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003212:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003216:	68cc      	ldr	r4, [r1, #12]
 8003218:	40bc      	lsls	r4, r7
 800321a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800321e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003220:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003222:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003226:	684c      	ldr	r4, [r1, #4]
 8003228:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800322c:	409c      	lsls	r4, r3
 800322e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8003230:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003232:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003234:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003236:	688a      	ldr	r2, [r1, #8]
 8003238:	40ba      	lsls	r2, r7
 800323a:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 800323c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800323e:	684a      	ldr	r2, [r1, #4]
 8003240:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003244:	d0ab      	beq.n	800319e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003246:	2200      	movs	r2, #0
 8003248:	9201      	str	r2, [sp, #4]
 800324a:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <HAL_GPIO_Init+0x19c>)
 800324c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800324e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003252:	6454      	str	r4, [r2, #68]	; 0x44
 8003254:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003256:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800325a:	9201      	str	r2, [sp, #4]
 800325c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800325e:	089c      	lsrs	r4, r3, #2
 8003260:	1ca6      	adds	r6, r4, #2
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_GPIO_Init+0x194>)
 8003264:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	0096      	lsls	r6, r2, #2
 800326e:	220f      	movs	r2, #15
 8003270:	40b2      	lsls	r2, r6
 8003272:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003276:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <HAL_GPIO_Init+0x1a0>)
 8003278:	4290      	cmp	r0, r2
 800327a:	f43f af5c 	beq.w	8003136 <HAL_GPIO_Init+0x12>
 800327e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003282:	4290      	cmp	r0, r2
 8003284:	d00e      	beq.n	80032a4 <HAL_GPIO_Init+0x180>
 8003286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800328a:	4290      	cmp	r0, r2
 800328c:	d00c      	beq.n	80032a8 <HAL_GPIO_Init+0x184>
 800328e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003292:	4290      	cmp	r0, r2
 8003294:	d00a      	beq.n	80032ac <HAL_GPIO_Init+0x188>
 8003296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800329a:	4290      	cmp	r0, r2
 800329c:	f43f af49 	beq.w	8003132 <HAL_GPIO_Init+0xe>
 80032a0:	2207      	movs	r2, #7
 80032a2:	e749      	b.n	8003138 <HAL_GPIO_Init+0x14>
 80032a4:	2201      	movs	r2, #1
 80032a6:	e747      	b.n	8003138 <HAL_GPIO_Init+0x14>
 80032a8:	2202      	movs	r2, #2
 80032aa:	e745      	b.n	8003138 <HAL_GPIO_Init+0x14>
 80032ac:	2203      	movs	r2, #3
 80032ae:	e743      	b.n	8003138 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80032b0:	b002      	add	sp, #8
 80032b2:	bcf0      	pop	{r4, r5, r6, r7}
 80032b4:	4770      	bx	lr
 80032b6:	4770      	bx	lr
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40013c00 	.word	0x40013c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40020000 	.word	0x40020000

080032c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c8:	b912      	cbnz	r2, 80032d0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ca:	0409      	lsls	r1, r1, #16
 80032cc:	6181      	str	r1, [r0, #24]
  }
}
 80032ce:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80032d0:	6181      	str	r1, [r0, #24]
 80032d2:	4770      	bx	lr

080032d4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80032d4:	6943      	ldr	r3, [r0, #20]
 80032d6:	ea31 0303 	bics.w	r3, r1, r3
 80032da:	d001      	beq.n	80032e0 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80032dc:	6181      	str	r1, [r0, #24]
  }
}
 80032de:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032e0:	0409      	lsls	r1, r1, #16
 80032e2:	6181      	str	r1, [r0, #24]
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032e8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	4203      	tst	r3, r0
 80032f0:	d100      	bne.n	80032f4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80032f2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032f4:	4b02      	ldr	r3, [pc, #8]	; (8003300 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80032f6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032f8:	f002 fe56 	bl	8005fa8 <HAL_GPIO_EXTI_Callback>
}
 80032fc:	e7f9      	b.n	80032f2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80032fe:	bf00      	nop
 8003300:	40013c00 	.word	0x40013c00

08003304 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003304:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d00a      	beq.n	8003324 <I2C_Master_SB+0x20>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800330e:	6903      	ldr	r3, [r0, #16]
 8003310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003314:	d015      	beq.n	8003342 <I2C_Master_SB+0x3e>
        }
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8003316:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003318:	2b00      	cmp	r3, #0
 800331a:	d036      	beq.n	800338a <I2C_Master_SB+0x86>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if (hi2c->EventCount == 1U)
 800331c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800331e:	2b01      	cmp	r3, #1
 8003320:	d03d      	beq.n	800339e <I2C_Master_SB+0x9a>
      {
        /* Do nothing */
      }
    }
  }
}
 8003322:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8003324:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003326:	b92b      	cbnz	r3, 8003334 <I2C_Master_SB+0x30>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003328:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800332a:	6802      	ldr	r2, [r0, #0]
 800332c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003330:	6113      	str	r3, [r2, #16]
 8003332:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003334:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003336:	6802      	ldr	r2, [r0, #0]
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	6113      	str	r3, [r2, #16]
 8003340:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003342:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b21      	cmp	r3, #33	; 0x21
 800334a:	d00f      	beq.n	800336c <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800334c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800334e:	6802      	ldr	r2, [r0, #0]
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	6113      	str	r3, [r2, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003358:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800335a:	b16b      	cbz	r3, 8003378 <I2C_Master_SB+0x74>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	b17b      	cbz	r3, 8003380 <I2C_Master_SB+0x7c>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003360:	6802      	ldr	r2, [r0, #0]
 8003362:	6853      	ldr	r3, [r2, #4]
 8003364:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003368:	6053      	str	r3, [r2, #4]
 800336a:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800336c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800336e:	6802      	ldr	r2, [r0, #0]
 8003370:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003374:	6113      	str	r3, [r2, #16]
 8003376:	e7ef      	b.n	8003358 <I2C_Master_SB+0x54>
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003378:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800337a:	2a00      	cmp	r2, #0
 800337c:	d1ee      	bne.n	800335c <I2C_Master_SB+0x58>
 800337e:	e7d0      	b.n	8003322 <I2C_Master_SB+0x1e>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003380:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1eb      	bne.n	8003360 <I2C_Master_SB+0x5c>
 8003388:	e7cb      	b.n	8003322 <I2C_Master_SB+0x1e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800338a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800338c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8003390:	6802      	ldr	r2, [r0, #0]
 8003392:	f003 0306 	and.w	r3, r3, #6
 8003396:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800339a:	6113      	str	r3, [r2, #16]
 800339c:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800339e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033a0:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80033a4:	6802      	ldr	r2, [r0, #0]
 80033a6:	f003 0306 	and.w	r3, r3, #6
 80033aa:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 80033ae:	6113      	str	r3, [r2, #16]
}
 80033b0:	e7b7      	b.n	8003322 <I2C_Master_SB+0x1e>

080033b2 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80033b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033b4:	6802      	ldr	r2, [r0, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	6113      	str	r3, [r2, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80033ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033bc:	b13b      	cbz	r3, 80033ce <I2C_Master_ADD10+0x1c>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	b14b      	cbz	r3, 80033d6 <I2C_Master_ADD10+0x24>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033c2:	6802      	ldr	r2, [r0, #0]
 80033c4:	6853      	ldr	r3, [r2, #4]
 80033c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033ca:	6053      	str	r3, [r2, #4]
    }
  }
}
 80033cc:	4770      	bx	lr
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80033ce:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80033d0:	2a00      	cmp	r2, #0
 80033d2:	d1f4      	bne.n	80033be <I2C_Master_ADD10+0xc>
 80033d4:	e7fa      	b.n	80033cc <I2C_Master_ADD10+0x1a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80033d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f1      	bne.n	80033c2 <I2C_Master_ADD10+0x10>
 80033de:	e7f5      	b.n	80033cc <I2C_Master_ADD10+0x1a>

080033e0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b410      	push	{r4}
 80033e2:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80033e4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80033e8:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80033ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80033ec:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b22      	cmp	r3, #34	; 0x22
 80033f6:	d00b      	beq.n	8003410 <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f8:	2300      	movs	r3, #0
 80033fa:	9309      	str	r3, [sp, #36]	; 0x24
 80033fc:	6803      	ldr	r3, [r0, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	9209      	str	r2, [sp, #36]	; 0x24
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	9309      	str	r3, [sp, #36]	; 0x24
 8003406:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 8003408:	b00b      	add	sp, #44	; 0x2c
 800340a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800340e:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003410:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003412:	b90b      	cbnz	r3, 8003418 <I2C_Master_ADDR+0x38>
 8003414:	2a40      	cmp	r2, #64	; 0x40
 8003416:	d017      	beq.n	8003448 <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003418:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800341a:	b91b      	cbnz	r3, 8003424 <I2C_Master_ADDR+0x44>
 800341c:	6903      	ldr	r3, [r0, #16]
 800341e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003422:	d019      	beq.n	8003458 <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 8003424:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d125      	bne.n	8003478 <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342c:	9302      	str	r3, [sp, #8]
 800342e:	6803      	ldr	r3, [r0, #0]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	9202      	str	r2, [sp, #8]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	9202      	str	r2, [sp, #8]
 8003438:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	6503      	str	r3, [r0, #80]	; 0x50
 8003446:	e7df      	b.n	8003408 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	6803      	ldr	r3, [r0, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	9200      	str	r2, [sp, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	9b00      	ldr	r3, [sp, #0]
 8003456:	e7d7      	b.n	8003408 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003458:	2300      	movs	r3, #0
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	6803      	ldr	r3, [r0, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	9201      	str	r2, [sp, #4]
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	9201      	str	r2, [sp, #4]
 8003466:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800346e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003470:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003472:	3301      	adds	r3, #1
 8003474:	6503      	str	r3, [r0, #80]	; 0x50
 8003476:	e7c7      	b.n	8003408 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8003478:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d025      	beq.n	80034cc <I2C_Master_ADDR+0xec>
      else if (hi2c->XferCount == 2U)
 8003480:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d07b      	beq.n	8003580 <I2C_Master_ADDR+0x1a0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003488:	6802      	ldr	r2, [r0, #0]
 800348a:	6813      	ldr	r3, [r2, #0]
 800348c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003490:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003492:	6803      	ldr	r3, [r0, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800349a:	d00e      	beq.n	80034ba <I2C_Master_ADDR+0xda>
 800349c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80034a0:	d007      	beq.n	80034b2 <I2C_Master_ADDR+0xd2>
 80034a2:	2901      	cmp	r1, #1
 80034a4:	d005      	beq.n	80034b2 <I2C_Master_ADDR+0xd2>
 80034a6:	2908      	cmp	r1, #8
 80034a8:	d003      	beq.n	80034b2 <I2C_Master_ADDR+0xd2>
 80034aa:	2910      	cmp	r1, #16
 80034ac:	d001      	beq.n	80034b2 <I2C_Master_ADDR+0xd2>
 80034ae:	2920      	cmp	r1, #32
 80034b0:	d103      	bne.n	80034ba <I2C_Master_ADDR+0xda>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034b8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ba:	2300      	movs	r3, #0
 80034bc:	9308      	str	r3, [sp, #32]
 80034be:	6803      	ldr	r3, [r0, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	9208      	str	r2, [sp, #32]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	9308      	str	r3, [sp, #32]
 80034c8:	9b08      	ldr	r3, [sp, #32]
 80034ca:	e7ba      	b.n	8003442 <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80034cc:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80034d0:	d011      	beq.n	80034f6 <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80034d2:	2908      	cmp	r1, #8
 80034d4:	d034      	beq.n	8003540 <I2C_Master_ADDR+0x160>
 80034d6:	2920      	cmp	r1, #32
 80034d8:	d032      	beq.n	8003540 <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80034da:	2c12      	cmp	r4, #18
 80034dc:	d02e      	beq.n	800353c <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034de:	2904      	cmp	r1, #4
 80034e0:	d040      	beq.n	8003564 <I2C_Master_ADDR+0x184>
 80034e2:	2902      	cmp	r1, #2
 80034e4:	d03e      	beq.n	8003564 <I2C_Master_ADDR+0x184>
 80034e6:	2910      	cmp	r1, #16
 80034e8:	d03c      	beq.n	8003564 <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ea:	6802      	ldr	r2, [r0, #0]
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e03b      	b.n	800356e <I2C_Master_ADDR+0x18e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f6:	6802      	ldr	r2, [r0, #0]
 80034f8:	6813      	ldr	r3, [r2, #0]
 80034fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fe:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003500:	6803      	ldr	r3, [r0, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003508:	d00c      	beq.n	8003524 <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003510:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	9303      	str	r3, [sp, #12]
 8003516:	6803      	ldr	r3, [r0, #0]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	9203      	str	r2, [sp, #12]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	9303      	str	r3, [sp, #12]
 8003520:	9b03      	ldr	r3, [sp, #12]
 8003522:	e78e      	b.n	8003442 <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003524:	2200      	movs	r2, #0
 8003526:	9204      	str	r2, [sp, #16]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	9204      	str	r2, [sp, #16]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	9204      	str	r2, [sp, #16]
 8003530:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e782      	b.n	8003442 <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800353c:	2901      	cmp	r1, #1
 800353e:	d0ce      	beq.n	80034de <I2C_Master_ADDR+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003540:	6802      	ldr	r2, [r0, #0]
 8003542:	6813      	ldr	r3, [r2, #0]
 8003544:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003548:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354a:	2300      	movs	r3, #0
 800354c:	9306      	str	r3, [sp, #24]
 800354e:	6803      	ldr	r3, [r0, #0]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	9206      	str	r2, [sp, #24]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	9206      	str	r2, [sp, #24]
 8003558:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e76e      	b.n	8003442 <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003564:	6802      	ldr	r2, [r0, #0]
 8003566:	6813      	ldr	r3, [r2, #0]
 8003568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800356c:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356e:	2300      	movs	r3, #0
 8003570:	9305      	str	r3, [sp, #20]
 8003572:	6803      	ldr	r3, [r0, #0]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	9205      	str	r2, [sp, #20]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	9305      	str	r3, [sp, #20]
 800357c:	9b05      	ldr	r3, [sp, #20]
 800357e:	e760      	b.n	8003442 <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003580:	2904      	cmp	r1, #4
 8003582:	d00e      	beq.n	80035a2 <I2C_Master_ADDR+0x1c2>
 8003584:	2902      	cmp	r1, #2
 8003586:	d00c      	beq.n	80035a2 <I2C_Master_ADDR+0x1c2>
 8003588:	2910      	cmp	r1, #16
 800358a:	d00a      	beq.n	80035a2 <I2C_Master_ADDR+0x1c2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358c:	6802      	ldr	r2, [r0, #0]
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003594:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003596:	6802      	ldr	r2, [r0, #0]
 8003598:	6813      	ldr	r3, [r2, #0]
 800359a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	e004      	b.n	80035ac <I2C_Master_ADDR+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a2:	6802      	ldr	r2, [r0, #0]
 80035a4:	6813      	ldr	r3, [r2, #0]
 80035a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035aa:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80035ac:	6803      	ldr	r3, [r0, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80035b4:	d00e      	beq.n	80035d4 <I2C_Master_ADDR+0x1f4>
 80035b6:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80035ba:	d007      	beq.n	80035cc <I2C_Master_ADDR+0x1ec>
 80035bc:	2901      	cmp	r1, #1
 80035be:	d005      	beq.n	80035cc <I2C_Master_ADDR+0x1ec>
 80035c0:	2908      	cmp	r1, #8
 80035c2:	d003      	beq.n	80035cc <I2C_Master_ADDR+0x1ec>
 80035c4:	2910      	cmp	r1, #16
 80035c6:	d001      	beq.n	80035cc <I2C_Master_ADDR+0x1ec>
 80035c8:	2920      	cmp	r1, #32
 80035ca:	d103      	bne.n	80035d4 <I2C_Master_ADDR+0x1f4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035d2:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d4:	2300      	movs	r3, #0
 80035d6:	9307      	str	r3, [sp, #28]
 80035d8:	6803      	ldr	r3, [r0, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	9207      	str	r2, [sp, #28]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	9307      	str	r3, [sp, #28]
 80035e2:	9b07      	ldr	r3, [sp, #28]
 80035e4:	e72d      	b.n	8003442 <I2C_Master_ADDR+0x62>

080035e6 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 80035e6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b153      	cbz	r3, 8003602 <I2C_SlaveTransmit_BTF+0x1c>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80035ee:	6803      	ldr	r3, [r0, #0]
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035f6:	3301      	adds	r3, #1
 80035f8:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035fa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29b      	uxth	r3, r3
 8003600:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8003602:	4770      	bx	lr

08003604 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8003604:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	b153      	cbz	r3, 8003620 <I2C_SlaveReceive_BTF+0x1c>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	6803      	ldr	r3, [r0, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003610:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003612:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003614:	3301      	adds	r3, #1
 8003616:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003618:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800361a:	3b01      	subs	r3, #1
 800361c:	b29b      	uxth	r3, r3
 800361e:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8003620:	4770      	bx	lr

08003622 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003622:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003624:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003628:	d004      	beq.n	8003634 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800362a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800362c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003630:	d003      	beq.n	800363a <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003632:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003634:	2301      	movs	r3, #1
 8003636:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003638:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800363a:	2308      	movs	r3, #8
 800363c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800363e:	e7f8      	b.n	8003632 <I2C_ConvertOtherXferOptions+0x10>

08003640 <I2C_WaitOnFlagUntilTimeout>:
{
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	4606      	mov	r6, r0
 8003644:	460c      	mov	r4, r1
 8003646:	4617      	mov	r7, r2
 8003648:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364a:	e022      	b.n	8003692 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364c:	f7ff f92a 	bl	80028a4 <HAL_GetTick>
 8003650:	9b06      	ldr	r3, [sp, #24]
 8003652:	1ac0      	subs	r0, r0, r3
 8003654:	42a8      	cmp	r0, r5
 8003656:	d800      	bhi.n	800365a <I2C_WaitOnFlagUntilTimeout+0x1a>
 8003658:	b9dd      	cbnz	r5, 8003692 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800365a:	2300      	movs	r3, #0
 800365c:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800365e:	2220      	movs	r2, #32
 8003660:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003664:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003668:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800366a:	f042 0220 	orr.w	r2, r2, #32
 800366e:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003670:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8003674:	2001      	movs	r0, #1
 8003676:	e01a      	b.n	80036ae <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003678:	6833      	ldr	r3, [r6, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	ea24 0303 	bic.w	r3, r4, r3
 8003680:	b29b      	uxth	r3, r3
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	429f      	cmp	r7, r3
 800368a:	d10f      	bne.n	80036ac <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800368c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003690:	d1dc      	bne.n	800364c <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003692:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8003696:	2b01      	cmp	r3, #1
 8003698:	d0ee      	beq.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x38>
 800369a:	6833      	ldr	r3, [r6, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	ea24 0303 	bic.w	r3, r4, r3
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	fab3 f383 	clz	r3, r3
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	e7ed      	b.n	8003688 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 80036ac:	2000      	movs	r0, #0
}
 80036ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036b0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80036b0:	2800      	cmp	r0, #0
 80036b2:	f000 80be 	beq.w	8003832 <HAL_I2C_Init+0x182>
{
 80036b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d06b      	beq.n	800379a <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c2:	2324      	movs	r3, #36	; 0x24
 80036c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80036c8:	6822      	ldr	r2, [r4, #0]
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d2:	f001 fc03 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036d6:	6862      	ldr	r2, [r4, #4]
 80036d8:	4b58      	ldr	r3, [pc, #352]	; (800383c <HAL_I2C_Init+0x18c>)
 80036da:	429a      	cmp	r2, r3
 80036dc:	d862      	bhi.n	80037a4 <HAL_I2C_Init+0xf4>
 80036de:	4b58      	ldr	r3, [pc, #352]	; (8003840 <HAL_I2C_Init+0x190>)
 80036e0:	4298      	cmp	r0, r3
 80036e2:	bf8c      	ite	hi
 80036e4:	2300      	movhi	r3, #0
 80036e6:	2301      	movls	r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 80a4 	bne.w	8003836 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 80036ee:	4b55      	ldr	r3, [pc, #340]	; (8003844 <HAL_I2C_Init+0x194>)
 80036f0:	fba3 2300 	umull	r2, r3, r3, r0
 80036f4:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036f6:	6821      	ldr	r1, [r4, #0]
 80036f8:	684a      	ldr	r2, [r1, #4]
 80036fa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80036fe:	431a      	orrs	r2, r3
 8003700:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003702:	6825      	ldr	r5, [r4, #0]
 8003704:	6a2a      	ldr	r2, [r5, #32]
 8003706:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800370a:	6866      	ldr	r6, [r4, #4]
 800370c:	494b      	ldr	r1, [pc, #300]	; (800383c <HAL_I2C_Init+0x18c>)
 800370e:	428e      	cmp	r6, r1
 8003710:	d84e      	bhi.n	80037b0 <HAL_I2C_Init+0x100>
 8003712:	3301      	adds	r3, #1
 8003714:	4313      	orrs	r3, r2
 8003716:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003718:	6825      	ldr	r5, [r4, #0]
 800371a:	69e9      	ldr	r1, [r5, #28]
 800371c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003720:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003724:	6863      	ldr	r3, [r4, #4]
 8003726:	4a45      	ldr	r2, [pc, #276]	; (800383c <HAL_I2C_Init+0x18c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d84b      	bhi.n	80037c4 <HAL_I2C_Init+0x114>
 800372c:	3801      	subs	r0, #1
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fbb0 f3f3 	udiv	r3, r0, r3
 8003734:	3301      	adds	r3, #1
 8003736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373a:	2b04      	cmp	r3, #4
 800373c:	bf38      	it	cc
 800373e:	2304      	movcc	r3, #4
 8003740:	430b      	orrs	r3, r1
 8003742:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003744:	6821      	ldr	r1, [r4, #0]
 8003746:	680b      	ldr	r3, [r1, #0]
 8003748:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800374c:	69e2      	ldr	r2, [r4, #28]
 800374e:	6a20      	ldr	r0, [r4, #32]
 8003750:	4302      	orrs	r2, r0
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003756:	6821      	ldr	r1, [r4, #0]
 8003758:	688b      	ldr	r3, [r1, #8]
 800375a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800375e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003762:	6922      	ldr	r2, [r4, #16]
 8003764:	68e0      	ldr	r0, [r4, #12]
 8003766:	4302      	orrs	r2, r0
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800376c:	6821      	ldr	r1, [r4, #0]
 800376e:	68cb      	ldr	r3, [r1, #12]
 8003770:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003774:	6962      	ldr	r2, [r4, #20]
 8003776:	69a0      	ldr	r0, [r4, #24]
 8003778:	4302      	orrs	r2, r0
 800377a:	4313      	orrs	r3, r2
 800377c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	6813      	ldr	r3, [r2, #0]
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	2000      	movs	r0, #0
 800378a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800378c:	2320      	movs	r3, #32
 800378e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003792:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800379a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800379e:	f002 fc63 	bl	8006068 <HAL_I2C_MspInit>
 80037a2:	e78e      	b.n	80036c2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037a4:	4b28      	ldr	r3, [pc, #160]	; (8003848 <HAL_I2C_Init+0x198>)
 80037a6:	4298      	cmp	r0, r3
 80037a8:	bf8c      	ite	hi
 80037aa:	2300      	movhi	r3, #0
 80037ac:	2301      	movls	r3, #1
 80037ae:	e79b      	b.n	80036e8 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4924      	ldr	r1, [pc, #144]	; (800384c <HAL_I2C_Init+0x19c>)
 80037ba:	fba1 1303 	umull	r1, r3, r1, r3
 80037be:	099b      	lsrs	r3, r3, #6
 80037c0:	3301      	adds	r3, #1
 80037c2:	e7a7      	b.n	8003714 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037c4:	68a2      	ldr	r2, [r4, #8]
 80037c6:	b9ba      	cbnz	r2, 80037f8 <HAL_I2C_Init+0x148>
 80037c8:	1e46      	subs	r6, r0, #1
 80037ca:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80037ce:	fbb6 f6f7 	udiv	r6, r6, r7
 80037d2:	3601      	adds	r6, #1
 80037d4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80037d8:	fab6 f686 	clz	r6, r6
 80037dc:	0976      	lsrs	r6, r6, #5
 80037de:	bb36      	cbnz	r6, 800382e <HAL_I2C_Init+0x17e>
 80037e0:	b9c2      	cbnz	r2, 8003814 <HAL_I2C_Init+0x164>
 80037e2:	3801      	subs	r0, #1
 80037e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80037e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ec:	3301      	adds	r3, #1
 80037ee:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80037f2:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80037f6:	e7a3      	b.n	8003740 <HAL_I2C_Init+0x90>
 80037f8:	1e46      	subs	r6, r0, #1
 80037fa:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80037fe:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003802:	fbb6 f6f7 	udiv	r6, r6, r7
 8003806:	3601      	adds	r6, #1
 8003808:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800380c:	fab6 f686 	clz	r6, r6
 8003810:	0976      	lsrs	r6, r6, #5
 8003812:	e7e4      	b.n	80037de <HAL_I2C_Init+0x12e>
 8003814:	3801      	subs	r0, #1
 8003816:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800381a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800381e:	fbb0 f2f3 	udiv	r2, r0, r3
 8003822:	3201      	adds	r2, #1
 8003824:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003828:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 800382c:	e788      	b.n	8003740 <HAL_I2C_Init+0x90>
 800382e:	2301      	movs	r3, #1
 8003830:	e786      	b.n	8003740 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003832:	2001      	movs	r0, #1
}
 8003834:	4770      	bx	lr
    return HAL_ERROR;
 8003836:	2001      	movs	r0, #1
 8003838:	e7ae      	b.n	8003798 <HAL_I2C_Init+0xe8>
 800383a:	bf00      	nop
 800383c:	000186a0 	.word	0x000186a0
 8003840:	001e847f 	.word	0x001e847f
 8003844:	431bde83 	.word	0x431bde83
 8003848:	003d08ff 	.word	0x003d08ff
 800384c:	10624dd3 	.word	0x10624dd3

08003850 <HAL_I2C_Master_Transmit_DMA>:
{
 8003850:	b530      	push	{r4, r5, lr}
 8003852:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8003854:	2400      	movs	r4, #0
 8003856:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003858:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800385c:	b2e4      	uxtb	r4, r4
 800385e:	2c20      	cmp	r4, #32
 8003860:	f040 809e 	bne.w	80039a0 <HAL_I2C_Master_Transmit_DMA+0x150>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003864:	4c51      	ldr	r4, [pc, #324]	; (80039ac <HAL_I2C_Master_Transmit_DMA+0x15c>)
 8003866:	6824      	ldr	r4, [r4, #0]
 8003868:	08e4      	lsrs	r4, r4, #3
 800386a:	4d51      	ldr	r5, [pc, #324]	; (80039b0 <HAL_I2C_Master_Transmit_DMA+0x160>)
 800386c:	fba5 5404 	umull	r5, r4, r5, r4
 8003870:	0a24      	lsrs	r4, r4, #8
 8003872:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003876:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800387a:	9401      	str	r4, [sp, #4]
      count--;
 800387c:	9c01      	ldr	r4, [sp, #4]
 800387e:	3c01      	subs	r4, #1
 8003880:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8003882:	9c01      	ldr	r4, [sp, #4]
 8003884:	2c00      	cmp	r4, #0
 8003886:	d03d      	beq.n	8003904 <HAL_I2C_Master_Transmit_DMA+0xb4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003888:	6804      	ldr	r4, [r0, #0]
 800388a:	69a5      	ldr	r5, [r4, #24]
 800388c:	f015 0f02 	tst.w	r5, #2
 8003890:	d1f4      	bne.n	800387c <HAL_I2C_Master_Transmit_DMA+0x2c>
    __HAL_LOCK(hi2c);
 8003892:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8003896:	2d01      	cmp	r5, #1
 8003898:	f000 8086 	beq.w	80039a8 <HAL_I2C_Master_Transmit_DMA+0x158>
 800389c:	2501      	movs	r5, #1
 800389e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038a2:	6825      	ldr	r5, [r4, #0]
 80038a4:	f015 0f01 	tst.w	r5, #1
 80038a8:	d103      	bne.n	80038b2 <HAL_I2C_Master_Transmit_DMA+0x62>
      __HAL_I2C_ENABLE(hi2c);
 80038aa:	6825      	ldr	r5, [r4, #0]
 80038ac:	f045 0501 	orr.w	r5, r5, #1
 80038b0:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b2:	6805      	ldr	r5, [r0, #0]
 80038b4:	682c      	ldr	r4, [r5, #0]
 80038b6:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80038ba:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038bc:	2421      	movs	r4, #33	; 0x21
 80038be:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038c2:	2410      	movs	r4, #16
 80038c4:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c8:	2400      	movs	r4, #0
 80038ca:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80038cc:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ce:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d6:	4a37      	ldr	r2, [pc, #220]	; (80039b4 <HAL_I2C_Master_Transmit_DMA+0x164>)
 80038d8:	62c2      	str	r2, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80038da:	6441      	str	r1, [r0, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 80038dc:	bb0b      	cbnz	r3, 8003922 <HAL_I2C_Master_Transmit_DMA+0xd2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	6802      	ldr	r2, [r0, #0]
 80038e0:	6813      	ldr	r3, [r2, #0]
 80038e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038e6:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038e8:	6802      	ldr	r2, [r0, #0]
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80038f2:	2300      	movs	r3, #0
 80038f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f8:	6801      	ldr	r1, [r0, #0]
 80038fa:	684a      	ldr	r2, [r1, #4]
 80038fc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003900:	604a      	str	r2, [r1, #4]
 8003902:	e04e      	b.n	80039a2 <HAL_I2C_Master_Transmit_DMA+0x152>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003904:	2300      	movs	r3, #0
 8003906:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003908:	2220      	movs	r2, #32
 800390a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003912:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003914:	f042 0220 	orr.w	r2, r2, #32
 8003918:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800391a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e03f      	b.n	80039a2 <HAL_I2C_Master_Transmit_DMA+0x152>
 8003922:	4604      	mov	r4, r0
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003924:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003926:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <HAL_I2C_Master_Transmit_DMA+0x168>)
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800392a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800392c:	4a23      	ldr	r2, [pc, #140]	; (80039bc <HAL_I2C_Master_Transmit_DMA+0x16c>)
 800392e:	64da      	str	r2, [r3, #76]	; 0x4c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003930:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003932:	2300      	movs	r3, #0
 8003934:	6413      	str	r3, [r2, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003936:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003938:	6453      	str	r3, [r2, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800393a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800393c:	6493      	str	r3, [r2, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800393e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003940:	6513      	str	r3, [r2, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003942:	6802      	ldr	r2, [r0, #0]
 8003944:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8003946:	3210      	adds	r2, #16
 8003948:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800394a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800394c:	f7ff faa8 	bl	8002ea0 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8003950:	4603      	mov	r3, r0
 8003952:	b9b8      	cbnz	r0, 8003984 <HAL_I2C_Master_Transmit_DMA+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003954:	6821      	ldr	r1, [r4, #0]
 8003956:	680a      	ldr	r2, [r1, #0]
 8003958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800395c:	600a      	str	r2, [r1, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395e:	6821      	ldr	r1, [r4, #0]
 8003960:	680a      	ldr	r2, [r1, #0]
 8003962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003966:	600a      	str	r2, [r1, #0]
        __HAL_UNLOCK(hi2c);
 8003968:	2200      	movs	r2, #0
 800396a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800396e:	6821      	ldr	r1, [r4, #0]
 8003970:	684a      	ldr	r2, [r1, #4]
 8003972:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003976:	604a      	str	r2, [r1, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003978:	6821      	ldr	r1, [r4, #0]
 800397a:	684a      	ldr	r2, [r1, #4]
 800397c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003980:	604a      	str	r2, [r1, #4]
 8003982:	e00e      	b.n	80039a2 <HAL_I2C_Master_Transmit_DMA+0x152>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003984:	2320      	movs	r3, #32
 8003986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800398a:	2200      	movs	r2, #0
 800398c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003990:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003992:	f043 0310 	orr.w	r3, r3, #16
 8003996:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003998:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_I2C_Master_Transmit_DMA+0x152>
    return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	b003      	add	sp, #12
 80039a6:	bd30      	pop	{r4, r5, pc}
    __HAL_LOCK(hi2c);
 80039a8:	2302      	movs	r3, #2
 80039aa:	e7fa      	b.n	80039a2 <HAL_I2C_Master_Transmit_DMA+0x152>
 80039ac:	20000078 	.word	0x20000078
 80039b0:	14f8b589 	.word	0x14f8b589
 80039b4:	ffff0000 	.word	0xffff0000
 80039b8:	0800421d 	.word	0x0800421d
 80039bc:	080041df 	.word	0x080041df

080039c0 <HAL_I2C_Master_Receive_DMA>:
{
 80039c0:	b530      	push	{r4, r5, lr}
 80039c2:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80039c4:	2400      	movs	r4, #0
 80039c6:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c8:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80039cc:	b2e4      	uxtb	r4, r4
 80039ce:	2c20      	cmp	r4, #32
 80039d0:	f040 809e 	bne.w	8003b10 <HAL_I2C_Master_Receive_DMA+0x150>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80039d4:	4c51      	ldr	r4, [pc, #324]	; (8003b1c <HAL_I2C_Master_Receive_DMA+0x15c>)
 80039d6:	6824      	ldr	r4, [r4, #0]
 80039d8:	08e4      	lsrs	r4, r4, #3
 80039da:	4d51      	ldr	r5, [pc, #324]	; (8003b20 <HAL_I2C_Master_Receive_DMA+0x160>)
 80039dc:	fba5 5404 	umull	r5, r4, r5, r4
 80039e0:	0a24      	lsrs	r4, r4, #8
 80039e2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80039e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80039ea:	9401      	str	r4, [sp, #4]
      count--;
 80039ec:	9c01      	ldr	r4, [sp, #4]
 80039ee:	3c01      	subs	r4, #1
 80039f0:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 80039f2:	9c01      	ldr	r4, [sp, #4]
 80039f4:	2c00      	cmp	r4, #0
 80039f6:	d03d      	beq.n	8003a74 <HAL_I2C_Master_Receive_DMA+0xb4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80039f8:	6804      	ldr	r4, [r0, #0]
 80039fa:	69a5      	ldr	r5, [r4, #24]
 80039fc:	f015 0f02 	tst.w	r5, #2
 8003a00:	d1f4      	bne.n	80039ec <HAL_I2C_Master_Receive_DMA+0x2c>
    __HAL_LOCK(hi2c);
 8003a02:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8003a06:	2d01      	cmp	r5, #1
 8003a08:	f000 8086 	beq.w	8003b18 <HAL_I2C_Master_Receive_DMA+0x158>
 8003a0c:	2501      	movs	r5, #1
 8003a0e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a12:	6825      	ldr	r5, [r4, #0]
 8003a14:	f015 0f01 	tst.w	r5, #1
 8003a18:	d103      	bne.n	8003a22 <HAL_I2C_Master_Receive_DMA+0x62>
      __HAL_I2C_ENABLE(hi2c);
 8003a1a:	6825      	ldr	r5, [r4, #0]
 8003a1c:	f045 0501 	orr.w	r5, r5, #1
 8003a20:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a22:	6805      	ldr	r5, [r0, #0]
 8003a24:	682c      	ldr	r4, [r5, #0]
 8003a26:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8003a2a:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a2c:	2422      	movs	r4, #34	; 0x22
 8003a2e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a32:	2410      	movs	r4, #16
 8003a34:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a38:	2400      	movs	r4, #0
 8003a3a:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003a3c:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a3e:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a40:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a46:	4a37      	ldr	r2, [pc, #220]	; (8003b24 <HAL_I2C_Master_Receive_DMA+0x164>)
 8003a48:	62c2      	str	r2, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003a4a:	6441      	str	r1, [r0, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 8003a4c:	bb0b      	cbnz	r3, 8003a92 <HAL_I2C_Master_Receive_DMA+0xd2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4e:	6802      	ldr	r2, [r0, #0]
 8003a50:	6813      	ldr	r3, [r2, #0]
 8003a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a56:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a58:	6802      	ldr	r2, [r0, #0]
 8003a5a:	6813      	ldr	r3, [r2, #0]
 8003a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a60:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003a62:	2300      	movs	r3, #0
 8003a64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a68:	6801      	ldr	r1, [r0, #0]
 8003a6a:	684a      	ldr	r2, [r1, #4]
 8003a6c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003a70:	604a      	str	r2, [r1, #4]
 8003a72:	e04e      	b.n	8003b12 <HAL_I2C_Master_Receive_DMA+0x152>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a82:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003a84:	f042 0220 	orr.w	r2, r2, #32
 8003a88:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003a8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e03f      	b.n	8003b12 <HAL_I2C_Master_Receive_DMA+0x152>
 8003a92:	4604      	mov	r4, r0
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003a94:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a96:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <HAL_I2C_Master_Receive_DMA+0x168>)
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003a9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a9c:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <HAL_I2C_Master_Receive_DMA+0x16c>)
 8003a9e:	64da      	str	r2, [r3, #76]	; 0x4c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003aa0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	6413      	str	r3, [r2, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003aa6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003aa8:	6453      	str	r3, [r2, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003aaa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003aac:	6493      	str	r3, [r2, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003aae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003ab0:	6513      	str	r3, [r2, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003ab2:	6801      	ldr	r1, [r0, #0]
 8003ab4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8003ab6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003ab8:	3110      	adds	r1, #16
 8003aba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003abc:	f7ff f9f0 	bl	8002ea0 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	b9b8      	cbnz	r0, 8003af4 <HAL_I2C_Master_Receive_DMA+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac4:	6821      	ldr	r1, [r4, #0]
 8003ac6:	680a      	ldr	r2, [r1, #0]
 8003ac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003acc:	600a      	str	r2, [r1, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ace:	6821      	ldr	r1, [r4, #0]
 8003ad0:	680a      	ldr	r2, [r1, #0]
 8003ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad6:	600a      	str	r2, [r1, #0]
        __HAL_UNLOCK(hi2c);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ade:	6821      	ldr	r1, [r4, #0]
 8003ae0:	684a      	ldr	r2, [r1, #4]
 8003ae2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ae6:	604a      	str	r2, [r1, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ae8:	6821      	ldr	r1, [r4, #0]
 8003aea:	684a      	ldr	r2, [r1, #4]
 8003aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af0:	604a      	str	r2, [r1, #4]
 8003af2:	e00e      	b.n	8003b12 <HAL_I2C_Master_Receive_DMA+0x152>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003af4:	2320      	movs	r3, #32
 8003af6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003afa:	2200      	movs	r2, #0
 8003afc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003b00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b02:	f043 0310 	orr.w	r3, r3, #16
 8003b06:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b08:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_I2C_Master_Receive_DMA+0x152>
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	b003      	add	sp, #12
 8003b16:	bd30      	pop	{r4, r5, pc}
    __HAL_LOCK(hi2c);
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e7fa      	b.n	8003b12 <HAL_I2C_Master_Receive_DMA+0x152>
 8003b1c:	20000078 	.word	0x20000078
 8003b20:	14f8b589 	.word	0x14f8b589
 8003b24:	ffff0000 	.word	0xffff0000
 8003b28:	0800421d 	.word	0x0800421d
 8003b2c:	080041df 	.word	0x080041df

08003b30 <HAL_I2C_IsDeviceReady>:
{
 8003b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b34:	b085      	sub	sp, #20
 8003b36:	4604      	mov	r4, r0
 8003b38:	4688      	mov	r8, r1
 8003b3a:	4691      	mov	r9, r2
 8003b3c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003b3e:	f7fe feb1 	bl	80028a4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b42:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d004      	beq.n	8003b56 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	b005      	add	sp, #20
 8003b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b56:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b58:	9000      	str	r0, [sp, #0]
 8003b5a:	2319      	movs	r3, #25
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4954      	ldr	r1, [pc, #336]	; (8003cb0 <HAL_I2C_IsDeviceReady+0x180>)
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff fd6d 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	f040 8097 	bne.w	8003c9a <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 8003b6c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f000 8094 	beq.w	8003c9e <HAL_I2C_IsDeviceReady+0x16e>
 8003b76:	2301      	movs	r3, #1
 8003b78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	f012 0f01 	tst.w	r2, #1
 8003b84:	d103      	bne.n	8003b8e <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b8e:	6822      	ldr	r2, [r4, #0]
 8003b90:	6813      	ldr	r3, [r2, #0]
 8003b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b96:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b98:	2324      	movs	r3, #36	; 0x24
 8003b9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003ba6:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8003ba8:	2701      	movs	r7, #1
 8003baa:	e034      	b.n	8003c16 <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bac:	23a0      	movs	r3, #160	; 0xa0
 8003bae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bba:	6959      	ldr	r1, [r3, #20]
 8003bbc:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bc0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2ba0      	cmp	r3, #160	; 0xa0
 8003bc8:	d009      	beq.n	8003bde <HAL_I2C_IsDeviceReady+0xae>
 8003bca:	b942      	cbnz	r2, 8003bde <HAL_I2C_IsDeviceReady+0xae>
 8003bcc:	b939      	cbnz	r1, 8003bde <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fe fe69 	bl	80028a4 <HAL_GetTick>
 8003bd2:	1b80      	subs	r0, r0, r6
 8003bd4:	42a8      	cmp	r0, r5
 8003bd6:	d8e9      	bhi.n	8003bac <HAL_I2C_IsDeviceReady+0x7c>
 8003bd8:	2d00      	cmp	r5, #0
 8003bda:	d1ea      	bne.n	8003bb2 <HAL_I2C_IsDeviceReady+0x82>
 8003bdc:	e7e6      	b.n	8003bac <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	2320      	movs	r3, #32
 8003be0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	f012 0f02 	tst.w	r2, #2
 8003bec:	d131      	bne.n	8003c52 <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bfc:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bfe:	9600      	str	r6, [sp, #0]
 8003c00:	2319      	movs	r3, #25
 8003c02:	2201      	movs	r2, #1
 8003c04:	492a      	ldr	r1, [pc, #168]	; (8003cb0 <HAL_I2C_IsDeviceReady+0x180>)
 8003c06:	4620      	mov	r0, r4
 8003c08:	f7ff fd1a 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d14c      	bne.n	8003caa <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8003c10:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8003c12:	454f      	cmp	r7, r9
 8003c14:	d239      	bcs.n	8003c8a <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c16:	6822      	ldr	r2, [r4, #0]
 8003c18:	6813      	ldr	r3, [r2, #0]
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1e:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c20:	9600      	str	r6, [sp, #0]
 8003c22:	462b      	mov	r3, r5
 8003c24:	2200      	movs	r2, #0
 8003c26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff fd08 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d136      	bne.n	8003ca2 <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8003c3a:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003c3c:	f7fe fe32 	bl	80028a4 <HAL_GetTick>
 8003c40:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c4a:	6959      	ldr	r1, [r3, #20]
 8003c4c:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c50:	e7b6      	b.n	8003bc0 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9303      	str	r3, [sp, #12]
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	9203      	str	r2, [sp, #12]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	9303      	str	r3, [sp, #12]
 8003c68:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6a:	9600      	str	r6, [sp, #0]
 8003c6c:	2319      	movs	r3, #25
 8003c6e:	2201      	movs	r2, #1
 8003c70:	490f      	ldr	r1, [pc, #60]	; (8003cb0 <HAL_I2C_IsDeviceReady+0x180>)
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7ff fce4 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	b9a0      	cbnz	r0, 8003ca6 <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003c82:	2200      	movs	r2, #0
 8003c84:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8003c88:	e761      	b.n	8003b4e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003c90:	2300      	movs	r3, #0
 8003c92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e759      	b.n	8003b4e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e757      	b.n	8003b4e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e755      	b.n	8003b4e <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e753      	b.n	8003b4e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e751      	b.n	8003b4e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e74f      	b.n	8003b4e <HAL_I2C_IsDeviceReady+0x1e>
 8003cae:	bf00      	nop
 8003cb0:	00100002 	.word	0x00100002

08003cb4 <HAL_I2C_SlaveTxCpltCallback>:
}
 8003cb4:	4770      	bx	lr

08003cb6 <I2C_SlaveTransmit_TXE>:
{
 8003cb6:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cbc:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8003cbe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	b17b      	cbz	r3, 8003ce4 <I2C_SlaveTransmit_TXE+0x2e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003cc6:	6803      	ldr	r3, [r0, #0]
 8003cc8:	7809      	ldrb	r1, [r1, #0]
 8003cca:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8003ccc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003cce:	3301      	adds	r3, #1
 8003cd0:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003cd2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cda:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	b90b      	cbnz	r3, 8003ce4 <I2C_SlaveTransmit_TXE+0x2e>
 8003ce0:	2a29      	cmp	r2, #41	; 0x29
 8003ce2:	d000      	beq.n	8003ce6 <I2C_SlaveTransmit_TXE+0x30>
}
 8003ce4:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ce6:	6802      	ldr	r2, [r0, #0]
 8003ce8:	6853      	ldr	r3, [r2, #4]
 8003cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cee:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cf0:	2321      	movs	r3, #33	; 0x21
 8003cf2:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cf4:	2328      	movs	r3, #40	; 0x28
 8003cf6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cfa:	f7ff ffdb 	bl	8003cb4 <HAL_I2C_SlaveTxCpltCallback>
}
 8003cfe:	e7f1      	b.n	8003ce4 <I2C_SlaveTransmit_TXE+0x2e>

08003d00 <HAL_I2C_SlaveRxCpltCallback>:
}
 8003d00:	4770      	bx	lr

08003d02 <I2C_SlaveReceive_RXNE>:
{
 8003d02:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d08:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8003d0a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	b17b      	cbz	r3, 8003d30 <I2C_SlaveReceive_RXNE+0x2e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	6803      	ldr	r3, [r0, #0]
 8003d12:	6919      	ldr	r1, [r3, #16]
 8003d14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d16:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8003d18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003d1e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d26:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	b90b      	cbnz	r3, 8003d30 <I2C_SlaveReceive_RXNE+0x2e>
 8003d2c:	2a2a      	cmp	r2, #42	; 0x2a
 8003d2e:	d000      	beq.n	8003d32 <I2C_SlaveReceive_RXNE+0x30>
}
 8003d30:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d32:	6802      	ldr	r2, [r0, #0]
 8003d34:	6853      	ldr	r3, [r2, #4]
 8003d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d3a:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d3c:	2322      	movs	r3, #34	; 0x22
 8003d3e:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d40:	2328      	movs	r3, #40	; 0x28
 8003d42:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d46:	f7ff ffdb 	bl	8003d00 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d4a:	e7f1      	b.n	8003d30 <I2C_SlaveReceive_RXNE+0x2e>

08003d4c <HAL_I2C_AddrCallback>:
}
 8003d4c:	4770      	bx	lr

08003d4e <I2C_Slave_ADDR>:
{
 8003d4e:	b508      	push	{r3, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d50:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d58:	2b28      	cmp	r3, #40	; 0x28
 8003d5a:	d007      	beq.n	8003d6c <I2C_Slave_ADDR+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d5c:	6803      	ldr	r3, [r0, #0]
 8003d5e:	f06f 0202 	mvn.w	r2, #2
 8003d62:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003d64:	2300      	movs	r3, #0
 8003d66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003d6a:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d6c:	6802      	ldr	r2, [r0, #0]
 8003d6e:	6853      	ldr	r3, [r2, #4]
 8003d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d74:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d76:	f011 0f04 	tst.w	r1, #4
 8003d7a:	d00b      	beq.n	8003d94 <I2C_Slave_ADDR+0x46>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d7c:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003d82:	d109      	bne.n	8003d98 <I2C_Slave_ADDR+0x4a>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d84:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 8003d86:	2100      	movs	r1, #0
 8003d88:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7ff ffdd 	bl	8003d4c <HAL_I2C_AddrCallback>
 8003d92:	e7ea      	b.n	8003d6a <I2C_Slave_ADDR+0x1c>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e7f2      	b.n	8003d7e <I2C_Slave_ADDR+0x30>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d98:	8b02      	ldrh	r2, [r0, #24]
 8003d9a:	e7f4      	b.n	8003d86 <I2C_Slave_ADDR+0x38>

08003d9c <HAL_I2C_ListenCpltCallback>:
}
 8003d9c:	4770      	bx	lr
	...

08003da0 <I2C_Slave_AF>:
{
 8003da0:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003da2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003da6:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003da8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003daa:	2a08      	cmp	r2, #8
 8003dac:	d001      	beq.n	8003db2 <I2C_Slave_AF+0x12>
 8003dae:	2a20      	cmp	r2, #32
 8003db0:	d101      	bne.n	8003db6 <I2C_Slave_AF+0x16>
 8003db2:	2b28      	cmp	r3, #40	; 0x28
 8003db4:	d006      	beq.n	8003dc4 <I2C_Slave_AF+0x24>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003db6:	2b21      	cmp	r3, #33	; 0x21
 8003db8:	d01e      	beq.n	8003df8 <I2C_Slave_AF+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dba:	6803      	ldr	r3, [r0, #0]
 8003dbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dc0:	615a      	str	r2, [r3, #20]
}
 8003dc2:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <I2C_Slave_AF+0x90>)
 8003dc6:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dc8:	6802      	ldr	r2, [r0, #0]
 8003dca:	6853      	ldr	r3, [r2, #4]
 8003dcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dd0:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd2:	6803      	ldr	r3, [r0, #0]
 8003dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dd8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	6802      	ldr	r2, [r0, #0]
 8003ddc:	6813      	ldr	r3, [r2, #0]
 8003dde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de2:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003de8:	2220      	movs	r2, #32
 8003dea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dee:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003df2:	f7ff ffd3 	bl	8003d9c <HAL_I2C_ListenCpltCallback>
 8003df6:	e7e4      	b.n	8003dc2 <I2C_Slave_AF+0x22>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003df8:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <I2C_Slave_AF+0x90>)
 8003dfa:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dfc:	2321      	movs	r3, #33	; 0x21
 8003dfe:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e00:	2320      	movs	r3, #32
 8003e02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e0c:	6802      	ldr	r2, [r0, #0]
 8003e0e:	6853      	ldr	r3, [r2, #4]
 8003e10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e14:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e16:	6803      	ldr	r3, [r0, #0]
 8003e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e1c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	6802      	ldr	r2, [r0, #0]
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e26:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e28:	f7ff ff44 	bl	8003cb4 <HAL_I2C_SlaveTxCpltCallback>
 8003e2c:	e7c9      	b.n	8003dc2 <I2C_Slave_AF+0x22>
 8003e2e:	bf00      	nop
 8003e30:	ffff0000 	.word	0xffff0000

08003e34 <HAL_I2C_MemTxCpltCallback>:
}
 8003e34:	4770      	bx	lr

08003e36 <I2C_MasterTransmit_TXE>:
{
 8003e36:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e38:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e3e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003e42:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e44:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e46:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8003e48:	b909      	cbnz	r1, 8003e4e <I2C_MasterTransmit_TXE+0x18>
 8003e4a:	2b21      	cmp	r3, #33	; 0x21
 8003e4c:	d004      	beq.n	8003e58 <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e4e:	2b21      	cmp	r3, #33	; 0x21
 8003e50:	d03b      	beq.n	8003eca <I2C_MasterTransmit_TXE+0x94>
 8003e52:	2a40      	cmp	r2, #64	; 0x40
 8003e54:	d037      	beq.n	8003ec6 <I2C_MasterTransmit_TXE+0x90>
}
 8003e56:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e58:	2c08      	cmp	r4, #8
 8003e5a:	d004      	beq.n	8003e66 <I2C_MasterTransmit_TXE+0x30>
 8003e5c:	2c20      	cmp	r4, #32
 8003e5e:	d002      	beq.n	8003e66 <I2C_MasterTransmit_TXE+0x30>
 8003e60:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8003e64:	d119      	bne.n	8003e9a <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e66:	6802      	ldr	r2, [r0, #0]
 8003e68:	6853      	ldr	r3, [r2, #4]
 8003e6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e6e:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e70:	6802      	ldr	r2, [r0, #0]
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e78:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	2320      	movs	r3, #32
 8003e80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e84:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d015      	beq.n	8003eba <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e94:	f7fe fb34 	bl	8002500 <HAL_I2C_MasterTxCpltCallback>
 8003e98:	e7dd      	b.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e9a:	6802      	ldr	r2, [r0, #0]
 8003e9c:	6853      	ldr	r3, [r2, #4]
 8003e9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ea2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ea4:	2311      	movs	r3, #17
 8003ea6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	2320      	movs	r3, #32
 8003eb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eb4:	f7fe fb24 	bl	8002500 <HAL_I2C_MasterTxCpltCallback>
 8003eb8:	e7cd      	b.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ec0:	f7ff ffb8 	bl	8003e34 <HAL_I2C_MemTxCpltCallback>
 8003ec4:	e7c7      	b.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ec6:	2b22      	cmp	r3, #34	; 0x22
 8003ec8:	d1c5      	bne.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8003eca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	b183      	cbz	r3, 8003ef2 <I2C_MasterTransmit_TXE+0xbc>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ed0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d011      	beq.n	8003efe <I2C_MasterTransmit_TXE+0xc8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eda:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003edc:	6803      	ldr	r3, [r0, #0]
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ee2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 8003ee8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8003ef0:	e7b1      	b.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef2:	6802      	ldr	r2, [r0, #0]
 8003ef4:	6853      	ldr	r3, [r2, #4]
 8003ef6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003efa:	6053      	str	r3, [r2, #4]
 8003efc:	e7ab      	b.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
        if (hi2c->EventCount == 0U)
 8003efe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003f00:	b99b      	cbnz	r3, 8003f2a <I2C_MasterTransmit_TXE+0xf4>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f02:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d008      	beq.n	8003f1a <I2C_MasterTransmit_TXE+0xe4>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f08:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003f0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003f0e:	6802      	ldr	r2, [r0, #0]
 8003f10:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 8003f12:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003f14:	3301      	adds	r3, #1
 8003f16:	6503      	str	r3, [r0, #80]	; 0x50
 8003f18:	e79d      	b.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f1a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003f1c:	6802      	ldr	r2, [r0, #0]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2U;
 8003f22:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003f24:	3302      	adds	r3, #2
 8003f26:	6503      	str	r3, [r0, #80]	; 0x50
 8003f28:	e795      	b.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
        else if (hi2c->EventCount == 1U)
 8003f2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d018      	beq.n	8003f62 <I2C_MasterTransmit_TXE+0x12c>
        else if (hi2c->EventCount == 2U)
 8003f30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d18f      	bne.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b22      	cmp	r3, #34	; 0x22
 8003f3e:	d018      	beq.n	8003f72 <I2C_MasterTransmit_TXE+0x13c>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f40:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b21      	cmp	r3, #33	; 0x21
 8003f48:	d185      	bne.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003f4c:	6803      	ldr	r3, [r0, #0]
 8003f4e:	7812      	ldrb	r2, [r2, #0]
 8003f50:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8003f52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f54:	3301      	adds	r3, #1
 8003f56:	6243      	str	r3, [r0, #36]	; 0x24
            hi2c->XferCount--;
 8003f58:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	8543      	strh	r3, [r0, #42]	; 0x2a
 8003f60:	e779      	b.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f62:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003f64:	6802      	ldr	r2, [r0, #0]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 8003f6a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	6503      	str	r3, [r0, #80]	; 0x50
 8003f70:	e771      	b.n	8003e56 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f72:	6802      	ldr	r2, [r0, #0]
 8003f74:	6813      	ldr	r3, [r2, #0]
 8003f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	e76b      	b.n	8003e56 <I2C_MasterTransmit_TXE+0x20>

08003f7e <I2C_MasterTransmit_BTF>:
{
 8003f7e:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f80:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b21      	cmp	r3, #33	; 0x21
 8003f8a:	d000      	beq.n	8003f8e <I2C_MasterTransmit_BTF+0x10>
}
 8003f8c:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8003f8e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	bb03      	cbnz	r3, 8003fd6 <I2C_MasterTransmit_BTF+0x58>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f94:	2a08      	cmp	r2, #8
 8003f96:	d004      	beq.n	8003fa2 <I2C_MasterTransmit_BTF+0x24>
 8003f98:	2a20      	cmp	r2, #32
 8003f9a:	d002      	beq.n	8003fa2 <I2C_MasterTransmit_BTF+0x24>
 8003f9c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003fa0:	d125      	bne.n	8003fee <I2C_MasterTransmit_BTF+0x70>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fa2:	6802      	ldr	r2, [r0, #0]
 8003fa4:	6853      	ldr	r3, [r2, #4]
 8003fa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003faa:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	6802      	ldr	r2, [r0, #0]
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fb4:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	2320      	movs	r3, #32
 8003fbc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fc0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d021      	beq.n	800400e <I2C_MasterTransmit_BTF+0x90>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fd0:	f7fe fa96 	bl	8002500 <HAL_I2C_MasterTxCpltCallback>
}
 8003fd4:	e7da      	b.n	8003f8c <I2C_MasterTransmit_BTF+0xe>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003fd8:	6803      	ldr	r3, [r0, #0]
 8003fda:	7812      	ldrb	r2, [r2, #0]
 8003fdc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003fde:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003fe4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	8543      	strh	r3, [r0, #42]	; 0x2a
 8003fec:	e7ce      	b.n	8003f8c <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fee:	6802      	ldr	r2, [r0, #0]
 8003ff0:	6853      	ldr	r3, [r2, #4]
 8003ff2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ff6:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ff8:	2311      	movs	r3, #17
 8003ffa:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004002:	2320      	movs	r3, #32
 8004004:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004008:	f7fe fa7a 	bl	8002500 <HAL_I2C_MasterTxCpltCallback>
 800400c:	e7be      	b.n	8003f8c <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800400e:	2300      	movs	r3, #0
 8004010:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004014:	f7ff ff0e 	bl	8003e34 <HAL_I2C_MemTxCpltCallback>
 8004018:	e7b8      	b.n	8003f8c <I2C_MasterTransmit_BTF+0xe>

0800401a <HAL_I2C_MemRxCpltCallback>:
}
 800401a:	4770      	bx	lr

0800401c <I2C_MasterReceive_RXNE>:
{
 800401c:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800401e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b22      	cmp	r3, #34	; 0x22
 8004026:	d000      	beq.n	800402a <I2C_MasterReceive_RXNE+0xe>
}
 8004028:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 800402a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 800402e:	2b03      	cmp	r3, #3
 8004030:	d914      	bls.n	800405c <I2C_MasterReceive_RXNE+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004032:	6803      	ldr	r3, [r0, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004038:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800403a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800403c:	3301      	adds	r3, #1
 800403e:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8004040:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004042:	3b01      	subs	r3, #1
 8004044:	b29b      	uxth	r3, r3
 8004046:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8004048:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b03      	cmp	r3, #3
 800404e:	d1eb      	bne.n	8004028 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004050:	6802      	ldr	r2, [r0, #0]
 8004052:	6853      	ldr	r3, [r2, #4]
 8004054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004058:	6053      	str	r3, [r2, #4]
 800405a:	e7e5      	b.n	8004028 <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800405c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800405e:	2a02      	cmp	r2, #2
 8004060:	d0e2      	beq.n	8004028 <I2C_MasterReceive_RXNE+0xc>
 8004062:	2b01      	cmp	r3, #1
 8004064:	d8e0      	bhi.n	8004028 <I2C_MasterReceive_RXNE+0xc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004066:	6802      	ldr	r2, [r0, #0]
 8004068:	6813      	ldr	r3, [r2, #0]
 800406a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800406e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004070:	6802      	ldr	r2, [r0, #0]
 8004072:	6853      	ldr	r3, [r2, #4]
 8004074:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004078:	6053      	str	r3, [r2, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407a:	6803      	ldr	r3, [r0, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004080:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004082:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004084:	3301      	adds	r3, #1
 8004086:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8004088:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800408a:	3b01      	subs	r3, #1
 800408c:	b29b      	uxth	r3, r3
 800408e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004090:	2320      	movs	r3, #32
 8004092:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004096:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d007      	beq.n	80040b0 <I2C_MasterReceive_RXNE+0x94>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040a6:	2312      	movs	r3, #18
 80040a8:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80040aa:	f7fe fa2f 	bl	800250c <HAL_I2C_MasterRxCpltCallback>
}
 80040ae:	e7bb      	b.n	8004028 <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80040b6:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80040b8:	f7ff ffaf 	bl	800401a <HAL_I2C_MemRxCpltCallback>
 80040bc:	e7b4      	b.n	8004028 <I2C_MasterReceive_RXNE+0xc>

080040be <I2C_MasterReceive_BTF>:
{
 80040be:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80040c2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d013      	beq.n	80040f2 <I2C_MasterReceive_BTF+0x34>
  else if (hi2c->XferCount == 3U)
 80040ca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d020      	beq.n	8004114 <I2C_MasterReceive_BTF+0x56>
  else if (hi2c->XferCount == 2U)
 80040d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d036      	beq.n	8004148 <I2C_MasterReceive_BTF+0x8a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040da:	6803      	ldr	r3, [r0, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80040e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80040e4:	3301      	adds	r3, #1
 80040e6:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80040e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80040f0:	e00f      	b.n	8004112 <I2C_MasterReceive_BTF+0x54>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040f2:	6802      	ldr	r2, [r0, #0]
 80040f4:	6853      	ldr	r3, [r2, #4]
 80040f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040fa:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fc:	6803      	ldr	r3, [r0, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004102:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004104:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004106:	3301      	adds	r3, #1
 8004108:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800410a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800410c:	3b01      	subs	r3, #1
 800410e:	b29b      	uxth	r3, r3
 8004110:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8004112:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004114:	6801      	ldr	r1, [r0, #0]
 8004116:	684b      	ldr	r3, [r1, #4]
 8004118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800411c:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800411e:	2a04      	cmp	r2, #4
 8004120:	d006      	beq.n	8004130 <I2C_MasterReceive_BTF+0x72>
 8004122:	2a02      	cmp	r2, #2
 8004124:	d004      	beq.n	8004130 <I2C_MasterReceive_BTF+0x72>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004126:	6802      	ldr	r2, [r0, #0]
 8004128:	6813      	ldr	r3, [r2, #0]
 800412a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800412e:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004130:	6803      	ldr	r3, [r0, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004136:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004138:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800413a:	3301      	adds	r3, #1
 800413c:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800413e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004140:	3b01      	subs	r3, #1
 8004142:	b29b      	uxth	r3, r3
 8004144:	8543      	strh	r3, [r0, #42]	; 0x2a
 8004146:	e7e4      	b.n	8004112 <I2C_MasterReceive_BTF+0x54>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004148:	2a01      	cmp	r2, #1
 800414a:	d00b      	beq.n	8004164 <I2C_MasterReceive_BTF+0xa6>
 800414c:	2a10      	cmp	r2, #16
 800414e:	d009      	beq.n	8004164 <I2C_MasterReceive_BTF+0xa6>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004150:	2a04      	cmp	r2, #4
 8004152:	d036      	beq.n	80041c2 <I2C_MasterReceive_BTF+0x104>
 8004154:	2a02      	cmp	r2, #2
 8004156:	d034      	beq.n	80041c2 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	6802      	ldr	r2, [r0, #0]
 800415a:	6813      	ldr	r3, [r2, #0]
 800415c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e004      	b.n	800416e <I2C_MasterReceive_BTF+0xb0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004164:	6802      	ldr	r2, [r0, #0]
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416c:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416e:	6803      	ldr	r3, [r0, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004174:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004176:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004178:	1c53      	adds	r3, r2, #1
 800417a:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800417c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800417e:	3b01      	subs	r3, #1
 8004180:	b29b      	uxth	r3, r3
 8004182:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004184:	6803      	ldr	r3, [r0, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 800418a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800418c:	3301      	adds	r3, #1
 800418e:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8004190:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004192:	3b01      	subs	r3, #1
 8004194:	b29b      	uxth	r3, r3
 8004196:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004198:	6802      	ldr	r2, [r0, #0]
 800419a:	6853      	ldr	r3, [r2, #4]
 800419c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a0:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	2320      	movs	r3, #32
 80041a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041a8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d00d      	beq.n	80041ce <I2C_MasterReceive_BTF+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80041b8:	2312      	movs	r3, #18
 80041ba:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80041bc:	f7fe f9a6 	bl	800250c <HAL_I2C_MasterRxCpltCallback>
 80041c0:	e7a7      	b.n	8004112 <I2C_MasterReceive_BTF+0x54>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c2:	6802      	ldr	r2, [r0, #0]
 80041c4:	6813      	ldr	r3, [r2, #0]
 80041c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e7cf      	b.n	800416e <I2C_MasterReceive_BTF+0xb0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80041d4:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80041d6:	f7ff ff20 	bl	800401a <HAL_I2C_MemRxCpltCallback>
 80041da:	e79a      	b.n	8004112 <I2C_MasterReceive_BTF+0x54>

080041dc <HAL_I2C_ErrorCallback>:
}
 80041dc:	4770      	bx	lr

080041de <I2C_DMAError>:
{
 80041de:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 80041e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80041e4:	2300      	movs	r3, #0
 80041e6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80041e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041ea:	63d3      	str	r3, [r2, #60]	; 0x3c
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80041ec:	f7fe ff97 	bl	800311e <HAL_DMA_GetError>
 80041f0:	2802      	cmp	r0, #2
 80041f2:	d012      	beq.n	800421a <I2C_DMAError+0x3c>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041fc:	6013      	str	r3, [r2, #0]
    hi2c->XferCount = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 8004202:	2220      	movs	r2, #32
 8004204:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004208:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800420c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800420e:	f043 0310 	orr.w	r3, r3, #16
 8004212:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004214:	4620      	mov	r0, r4
 8004216:	f7ff ffe1 	bl	80041dc <HAL_I2C_ErrorCallback>
}
 800421a:	bd10      	pop	{r4, pc}

0800421c <I2C_DMAXferCplt>:
{
 800421c:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800421e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004220:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004226:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800422a:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800422c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800422e:	6820      	ldr	r0, [r4, #0]
 8004230:	6842      	ldr	r2, [r0, #4]
 8004232:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004236:	6042      	str	r2, [r0, #4]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8004238:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800423a:	2200      	movs	r2, #0
 800423c:	63c2      	str	r2, [r0, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800423e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004240:	63c2      	str	r2, [r0, #60]	; 0x3c
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004242:	f003 0221 	and.w	r2, r3, #33	; 0x21
 8004246:	2a21      	cmp	r2, #33	; 0x21
 8004248:	d041      	beq.n	80042ce <I2C_DMAXferCplt+0xb2>
 800424a:	f003 0222 	and.w	r2, r3, #34	; 0x22
 800424e:	2a22      	cmp	r2, #34	; 0x22
 8004250:	d03b      	beq.n	80042ca <I2C_DMAXferCplt+0xae>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004252:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004256:	2b00      	cmp	r3, #0
 8004258:	d049      	beq.n	80042ee <I2C_DMAXferCplt+0xd2>
    if (hi2c->XferCount == (uint16_t)1)
 800425a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	d058      	beq.n	8004314 <I2C_DMAXferCplt+0xf8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	6853      	ldr	r3, [r2, #4]
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	6053      	str	r3, [r2, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800426c:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004270:	d006      	beq.n	8004280 <I2C_DMAXferCplt+0x64>
 8004272:	2d08      	cmp	r5, #8
 8004274:	d004      	beq.n	8004280 <I2C_DMAXferCplt+0x64>
 8004276:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 800427a:	d001      	beq.n	8004280 <I2C_DMAXferCplt+0x64>
 800427c:	2d20      	cmp	r5, #32
 800427e:	d104      	bne.n	800428a <I2C_DMAXferCplt+0x6e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	6813      	ldr	r3, [r2, #0]
 8004284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004288:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800428a:	6822      	ldr	r2, [r4, #0]
 800428c:	6853      	ldr	r3, [r2, #4]
 800428e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004292:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004294:	6822      	ldr	r2, [r4, #0]
 8004296:	6853      	ldr	r3, [r2, #4]
 8004298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800429c:	6053      	str	r3, [r2, #4]
    hi2c->XferCount = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d13b      	bne.n	8004320 <I2C_DMAXferCplt+0x104>
      hi2c->State = HAL_I2C_STATE_READY;
 80042a8:	2320      	movs	r3, #32
 80042aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ae:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d037      	beq.n	8004328 <I2C_DMAXferCplt+0x10c>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042be:	2312      	movs	r3, #18
 80042c0:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7fe f922 	bl	800250c <HAL_I2C_MasterRxCpltCallback>
}
 80042c8:	e011      	b.n	80042ee <I2C_DMAXferCplt+0xd2>
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80042ca:	2920      	cmp	r1, #32
 80042cc:	d1c1      	bne.n	8004252 <I2C_DMAXferCplt+0x36>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042ce:	6821      	ldr	r1, [r4, #0]
 80042d0:	684a      	ldr	r2, [r1, #4]
 80042d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d6:	604a      	str	r2, [r1, #4]
    hi2c->XferCount = 0U;
 80042d8:	2200      	movs	r2, #0
 80042da:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80042dc:	2b29      	cmp	r3, #41	; 0x29
 80042de:	d007      	beq.n	80042f0 <I2C_DMAXferCplt+0xd4>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042e0:	2b2a      	cmp	r3, #42	; 0x2a
 80042e2:	d00e      	beq.n	8004302 <I2C_DMAXferCplt+0xe6>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	6853      	ldr	r3, [r2, #4]
 80042e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80042ec:	6053      	str	r3, [r2, #4]
}
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042f0:	2321      	movs	r3, #33	; 0x21
 80042f2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042f4:	2328      	movs	r3, #40	; 0x28
 80042f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042fa:	4620      	mov	r0, r4
 80042fc:	f7ff fcda 	bl	8003cb4 <HAL_I2C_SlaveTxCpltCallback>
 8004300:	e7f0      	b.n	80042e4 <I2C_DMAXferCplt+0xc8>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004302:	2322      	movs	r3, #34	; 0x22
 8004304:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004306:	2328      	movs	r3, #40	; 0x28
 8004308:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800430c:	4620      	mov	r0, r4
 800430e:	f7ff fcf7 	bl	8003d00 <HAL_I2C_SlaveRxCpltCallback>
 8004312:	e7e7      	b.n	80042e4 <I2C_DMAXferCplt+0xc8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004314:	6822      	ldr	r2, [r4, #0]
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e7a0      	b.n	8004262 <I2C_DMAXferCplt+0x46>
      HAL_I2C_ErrorCallback(hi2c);
 8004320:	4620      	mov	r0, r4
 8004322:	f7ff ff5b 	bl	80041dc <HAL_I2C_ErrorCallback>
 8004326:	e7e2      	b.n	80042ee <I2C_DMAXferCplt+0xd2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	2300      	movs	r3, #0
 800432a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800432e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004330:	4620      	mov	r0, r4
 8004332:	f7ff fe72 	bl	800401a <HAL_I2C_MemRxCpltCallback>
 8004336:	e7da      	b.n	80042ee <I2C_DMAXferCplt+0xd2>

08004338 <HAL_I2C_AbortCpltCallback>:
}
 8004338:	4770      	bx	lr

0800433a <I2C_DMAAbort>:
{
 800433a:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800433c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800433e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  hi2c->hdmatx->XferCpltCallback = NULL;
 8004342:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004344:	2300      	movs	r3, #0
 8004346:	63cb      	str	r3, [r1, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8004348:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800434a:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434c:	6804      	ldr	r4, [r0, #0]
 800434e:	6821      	ldr	r1, [r4, #0]
 8004350:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004354:	6021      	str	r1, [r4, #0]
  hi2c->XferCount = 0U;
 8004356:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004358:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800435a:	650b      	str	r3, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800435c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800435e:	650b      	str	r3, [r1, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8004360:	6801      	ldr	r1, [r0, #0]
 8004362:	680b      	ldr	r3, [r1, #0]
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800436a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b60      	cmp	r3, #96	; 0x60
 8004372:	d00d      	beq.n	8004390 <I2C_DMAAbort+0x56>
 8004374:	b2d2      	uxtb	r2, r2
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004376:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800437a:	2a28      	cmp	r2, #40	; 0x28
 800437c:	d012      	beq.n	80043a4 <I2C_DMAAbort+0x6a>
      hi2c->State = HAL_I2C_STATE_READY;
 800437e:	2320      	movs	r3, #32
 8004380:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004384:	2300      	movs	r3, #0
 8004386:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800438a:	f7ff ff27 	bl	80041dc <HAL_I2C_ErrorCallback>
}
 800438e:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 8004390:	2320      	movs	r3, #32
 8004392:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004396:	2300      	movs	r3, #0
 8004398:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800439c:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800439e:	f7ff ffcb 	bl	8004338 <HAL_I2C_AbortCpltCallback>
 80043a2:	e7f4      	b.n	800438e <I2C_DMAAbort+0x54>
      __HAL_I2C_ENABLE(hi2c);
 80043a4:	6802      	ldr	r2, [r0, #0]
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ae:	6802      	ldr	r2, [r0, #0]
 80043b0:	6813      	ldr	r3, [r2, #0]
 80043b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043b6:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043bc:	2328      	movs	r3, #40	; 0x28
 80043be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80043c2:	e7e2      	b.n	800438a <I2C_DMAAbort+0x50>

080043c4 <I2C_ITError>:
{
 80043c4:	b510      	push	{r4, lr}
 80043c6:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043ce:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	2a10      	cmp	r2, #16
 80043d6:	d033      	beq.n	8004440 <I2C_ITError+0x7c>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043d8:	f003 0228 	and.w	r2, r3, #40	; 0x28
 80043dc:	2a28      	cmp	r2, #40	; 0x28
 80043de:	d037      	beq.n	8004450 <I2C_ITError+0x8c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	6852      	ldr	r2, [r2, #4]
 80043e4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80043e8:	d104      	bne.n	80043f4 <I2C_ITError+0x30>
 80043ea:	2b60      	cmp	r3, #96	; 0x60
 80043ec:	d002      	beq.n	80043f4 <I2C_ITError+0x30>
      hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	2320      	movs	r3, #32
 80043f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004404:	d048      	beq.n	8004498 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800440c:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800440e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004410:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d020      	beq.n	800445c <I2C_ITError+0x98>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800441a:	4b42      	ldr	r3, [pc, #264]	; (8004524 <I2C_ITError+0x160>)
 800441c:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800441e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004420:	f7fe fd78 	bl	8002f14 <HAL_DMA_Abort_IT>
 8004424:	2800      	cmp	r0, #0
 8004426:	d049      	beq.n	80044bc <I2C_ITError+0xf8>
        __HAL_I2C_DISABLE(hi2c);
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	6813      	ldr	r3, [r2, #0]
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004432:	2320      	movs	r3, #32
 8004434:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004438:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800443a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800443c:	4798      	blx	r3
 800443e:	e03d      	b.n	80044bc <I2C_ITError+0xf8>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004440:	2b22      	cmp	r3, #34	; 0x22
 8004442:	d1c9      	bne.n	80043d8 <I2C_ITError+0x14>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004444:	6801      	ldr	r1, [r0, #0]
 8004446:	680a      	ldr	r2, [r1, #0]
 8004448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800444c:	600a      	str	r2, [r1, #0]
 800444e:	e7c3      	b.n	80043d8 <I2C_ITError+0x14>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004450:	2300      	movs	r3, #0
 8004452:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004454:	2328      	movs	r3, #40	; 0x28
 8004456:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800445a:	e7cf      	b.n	80043fc <I2C_ITError+0x38>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800445c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800445e:	4a31      	ldr	r2, [pc, #196]	; (8004524 <I2C_ITError+0x160>)
 8004460:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004462:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004464:	f7fe fd56 	bl	8002f14 <HAL_DMA_Abort_IT>
 8004468:	b340      	cbz	r0, 80044bc <I2C_ITError+0xf8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004472:	d005      	beq.n	8004480 <I2C_ITError+0xbc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004478:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800447a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800447c:	3301      	adds	r3, #1
 800447e:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8004480:	6822      	ldr	r2, [r4, #0]
 8004482:	6813      	ldr	r3, [r2, #0]
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800448a:	2320      	movs	r3, #32
 800448c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004490:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004492:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004494:	4798      	blx	r3
 8004496:	e011      	b.n	80044bc <I2C_ITError+0xf8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004498:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	2a60      	cmp	r2, #96	; 0x60
 80044a0:	d016      	beq.n	80044d0 <I2C_ITError+0x10c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044a8:	d005      	beq.n	80044b6 <I2C_ITError+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ae:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80044b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044b2:	3301      	adds	r3, #1
 80044b4:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7ff fe90 	bl	80041dc <HAL_I2C_ErrorCallback>
  CurrentState = hi2c->State;
 80044bc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80044c4:	f012 0f04 	tst.w	r2, #4
 80044c8:	d001      	beq.n	80044ce <I2C_ITError+0x10a>
 80044ca:	2b28      	cmp	r3, #40	; 0x28
 80044cc:	d018      	beq.n	8004500 <I2C_ITError+0x13c>
}
 80044ce:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80044d0:	2220      	movs	r2, #32
 80044d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d6:	2200      	movs	r2, #0
 80044d8:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044e0:	d005      	beq.n	80044ee <I2C_ITError+0x12a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044e6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80044e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ea:	3301      	adds	r3, #1
 80044ec:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	6813      	ldr	r3, [r2, #0]
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80044f8:	4620      	mov	r0, r4
 80044fa:	f7ff ff1d 	bl	8004338 <HAL_I2C_AbortCpltCallback>
 80044fe:	e7dd      	b.n	80044bc <I2C_ITError+0xf8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	6853      	ldr	r3, [r2, #4]
 8004504:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004508:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800450a:	4b07      	ldr	r3, [pc, #28]	; (8004528 <I2C_ITError+0x164>)
 800450c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	2300      	movs	r3, #0
 8004510:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004512:	2220      	movs	r2, #32
 8004514:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004518:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff fc3d 	bl	8003d9c <HAL_I2C_ListenCpltCallback>
}
 8004522:	e7d4      	b.n	80044ce <I2C_ITError+0x10a>
 8004524:	0800433b 	.word	0x0800433b
 8004528:	ffff0000 	.word	0xffff0000

0800452c <I2C_Slave_STOPF>:
{
 800452c:	b530      	push	{r4, r5, lr}
 800452e:	b083      	sub	sp, #12
 8004530:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004532:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8004536:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004538:	6802      	ldr	r2, [r0, #0]
 800453a:	6853      	ldr	r3, [r2, #4]
 800453c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004540:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	6803      	ldr	r3, [r0, #0]
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	9201      	str	r2, [sp, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	6802      	ldr	r2, [r0, #0]
 8004558:	6813      	ldr	r3, [r2, #0]
 800455a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800455e:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004560:	6803      	ldr	r3, [r0, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004568:	d038      	beq.n	80045dc <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800456a:	2d22      	cmp	r5, #34	; 0x22
 800456c:	d021      	beq.n	80045b2 <I2C_Slave_STOPF+0x86>
 800456e:	2d2a      	cmp	r5, #42	; 0x2a
 8004570:	d01f      	beq.n	80045b2 <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004572:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	6852      	ldr	r2, [r2, #4]
 8004578:	b292      	uxth	r2, r2
 800457a:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800457c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800457e:	b292      	uxth	r2, r2
 8004580:	b11a      	cbz	r2, 800458a <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004582:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004584:	f042 0204 	orr.w	r2, r2, #4
 8004588:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004590:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004592:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004594:	f7fe fdc0 	bl	8003118 <HAL_DMA_GetState>
 8004598:	2801      	cmp	r0, #1
 800459a:	d01f      	beq.n	80045dc <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800459c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800459e:	4a43      	ldr	r2, [pc, #268]	; (80046ac <I2C_Slave_STOPF+0x180>)
 80045a0:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80045a4:	f7fe fcb6 	bl	8002f14 <HAL_DMA_Abort_IT>
 80045a8:	b1c0      	cbz	r0, 80045dc <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80045ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80045ae:	4798      	blx	r3
 80045b0:	e014      	b.n	80045dc <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80045b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	6852      	ldr	r2, [r2, #4]
 80045b8:	b292      	uxth	r2, r2
 80045ba:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80045bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80045be:	b292      	uxth	r2, r2
 80045c0:	b11a      	cbz	r2, 80045ca <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80045c4:	f042 0204 	orr.w	r2, r2, #4
 80045c8:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d0:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80045d4:	f7fe fda0 	bl	8003118 <HAL_DMA_GetState>
 80045d8:	2801      	cmp	r0, #1
 80045da:	d140      	bne.n	800465e <I2C_Slave_STOPF+0x132>
  if (hi2c->XferCount != 0U)
 80045dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	b323      	cbz	r3, 800462c <I2C_Slave_STOPF+0x100>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	f012 0f04 	tst.w	r2, #4
 80045ea:	d009      	beq.n	8004600 <I2C_Slave_STOPF+0xd4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045f0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80045f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045f4:	3301      	adds	r3, #1
 80045f6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80045f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004608:	d009      	beq.n	800461e <I2C_Slave_STOPF+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800460e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004612:	3301      	adds	r3, #1
 8004614:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004616:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004618:	3b01      	subs	r3, #1
 800461a:	b29b      	uxth	r3, r3
 800461c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800461e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	b11b      	cbz	r3, 800462c <I2C_Slave_STOPF+0x100>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004624:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004626:	f043 0304 	orr.w	r3, r3, #4
 800462a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800462c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800462e:	bb13      	cbnz	r3, 8004676 <I2C_Slave_STOPF+0x14a>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004630:	2d2a      	cmp	r5, #42	; 0x2a
 8004632:	d025      	beq.n	8004680 <I2C_Slave_STOPF+0x154>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004634:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b28      	cmp	r3, #40	; 0x28
 800463c:	d029      	beq.n	8004692 <I2C_Slave_STOPF+0x166>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800463e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004640:	2b22      	cmp	r3, #34	; 0x22
 8004642:	d001      	beq.n	8004648 <I2C_Slave_STOPF+0x11c>
 8004644:	2d22      	cmp	r5, #34	; 0x22
 8004646:	d119      	bne.n	800467c <I2C_Slave_STOPF+0x150>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004648:	2300      	movs	r3, #0
 800464a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800464c:	2220      	movs	r2, #32
 800464e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004652:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004656:	4620      	mov	r0, r4
 8004658:	f7ff fb52 	bl	8003d00 <HAL_I2C_SlaveRxCpltCallback>
}
 800465c:	e00e      	b.n	800467c <I2C_Slave_STOPF+0x150>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800465e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004660:	4a12      	ldr	r2, [pc, #72]	; (80046ac <I2C_Slave_STOPF+0x180>)
 8004662:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004664:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004666:	f7fe fc55 	bl	8002f14 <HAL_DMA_Abort_IT>
 800466a:	2800      	cmp	r0, #0
 800466c:	d0b6      	beq.n	80045dc <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800466e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004670:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004672:	4798      	blx	r3
 8004674:	e7b2      	b.n	80045dc <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8004676:	4620      	mov	r0, r4
 8004678:	f7ff fea4 	bl	80043c4 <I2C_ITError>
}
 800467c:	b003      	add	sp, #12
 800467e:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8004680:	2300      	movs	r3, #0
 8004682:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004684:	2328      	movs	r3, #40	; 0x28
 8004686:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800468a:	4620      	mov	r0, r4
 800468c:	f7ff fb38 	bl	8003d00 <HAL_I2C_SlaveRxCpltCallback>
 8004690:	e7d0      	b.n	8004634 <I2C_Slave_STOPF+0x108>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <I2C_Slave_STOPF+0x184>)
 8004694:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004696:	2300      	movs	r3, #0
 8004698:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800469a:	2220      	movs	r2, #32
 800469c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046a4:	4620      	mov	r0, r4
 80046a6:	f7ff fb79 	bl	8003d9c <HAL_I2C_ListenCpltCallback>
 80046aa:	e7e7      	b.n	800467c <I2C_Slave_STOPF+0x150>
 80046ac:	0800433b 	.word	0x0800433b
 80046b0:	ffff0000 	.word	0xffff0000

080046b4 <HAL_I2C_EV_IRQHandler>:
{
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046b8:	6802      	ldr	r2, [r0, #0]
 80046ba:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046bc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046be:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80046c2:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d014      	beq.n	80046f6 <HAL_I2C_EV_IRQHandler+0x42>
 80046cc:	b2c8      	uxtb	r0, r1
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d011      	beq.n	80046f6 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d071      	beq.n	80047bc <HAL_I2C_EV_IRQHandler+0x108>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046d8:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 80046da:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046dc:	f013 0f02 	tst.w	r3, #2
 80046e0:	d06f      	beq.n	80047c2 <HAL_I2C_EV_IRQHandler+0x10e>
 80046e2:	f415 7f00 	tst.w	r5, #512	; 0x200
 80046e6:	d06c      	beq.n	80047c2 <HAL_I2C_EV_IRQHandler+0x10e>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046ea:	b103      	cbz	r3, 80046ee <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046ec:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80046ee:	4620      	mov	r0, r4
 80046f0:	f7ff fb2d 	bl	8003d4e <I2C_Slave_ADDR>
}
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046f6:	6990      	ldr	r0, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046f8:	6953      	ldr	r3, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046fa:	f013 0101 	ands.w	r1, r3, #1
 80046fe:	d105      	bne.n	800470c <HAL_I2C_EV_IRQHandler+0x58>
 8004700:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8004704:	d0f6      	beq.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
 8004706:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 800470a:	d0f3      	beq.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800470c:	b111      	cbz	r1, 8004714 <HAL_I2C_EV_IRQHandler+0x60>
 800470e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004712:	d125      	bne.n	8004760 <HAL_I2C_EV_IRQHandler+0xac>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004714:	f013 0f08 	tst.w	r3, #8
 8004718:	d002      	beq.n	8004720 <HAL_I2C_EV_IRQHandler+0x6c>
 800471a:	f415 7f00 	tst.w	r5, #512	; 0x200
 800471e:	d126      	bne.n	800476e <HAL_I2C_EV_IRQHandler+0xba>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004720:	f013 0f02 	tst.w	r3, #2
 8004724:	d002      	beq.n	800472c <HAL_I2C_EV_IRQHandler+0x78>
 8004726:	f415 7f00 	tst.w	r5, #512	; 0x200
 800472a:	d124      	bne.n	8004776 <HAL_I2C_EV_IRQHandler+0xc2>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800472c:	f010 0f04 	tst.w	r0, #4
 8004730:	d029      	beq.n	8004786 <HAL_I2C_EV_IRQHandler+0xd2>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004732:	6852      	ldr	r2, [r2, #4]
 8004734:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004738:	d1dc      	bne.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800473a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800473e:	d005      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x98>
 8004740:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004744:	d002      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x98>
 8004746:	f013 0f04 	tst.w	r3, #4
 800474a:	d018      	beq.n	800477e <HAL_I2C_EV_IRQHandler+0xca>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800474c:	f013 0f04 	tst.w	r3, #4
 8004750:	d0d0      	beq.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
 8004752:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004756:	d0cd      	beq.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_BTF(hi2c);
 8004758:	4620      	mov	r0, r4
 800475a:	f7ff fc10 	bl	8003f7e <I2C_MasterTransmit_BTF>
 800475e:	e7c9      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8004760:	4620      	mov	r0, r4
 8004762:	f7fe ff5e 	bl	8003622 <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8004766:	4620      	mov	r0, r4
 8004768:	f7fe fdcc 	bl	8003304 <I2C_Master_SB>
 800476c:	e7c2      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 800476e:	4620      	mov	r0, r4
 8004770:	f7fe fe1f 	bl	80033b2 <I2C_Master_ADD10>
 8004774:	e7be      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8004776:	4620      	mov	r0, r4
 8004778:	f7fe fe32 	bl	80033e0 <I2C_Master_ADDR>
 800477c:	e7ba      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 800477e:	4620      	mov	r0, r4
 8004780:	f7ff fb59 	bl	8003e36 <I2C_MasterTransmit_TXE>
 8004784:	e7b6      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004786:	6852      	ldr	r2, [r2, #4]
 8004788:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800478c:	d1b2      	bne.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800478e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004792:	d005      	beq.n	80047a0 <HAL_I2C_EV_IRQHandler+0xec>
 8004794:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004798:	d002      	beq.n	80047a0 <HAL_I2C_EV_IRQHandler+0xec>
 800479a:	f013 0f04 	tst.w	r3, #4
 800479e:	d009      	beq.n	80047b4 <HAL_I2C_EV_IRQHandler+0x100>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a0:	f013 0f04 	tst.w	r3, #4
 80047a4:	d0a6      	beq.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
 80047a6:	f415 7f00 	tst.w	r5, #512	; 0x200
 80047aa:	d0a3      	beq.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7ff fc86 	bl	80040be <I2C_MasterReceive_BTF>
 80047b2:	e79f      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 80047b4:	4620      	mov	r0, r4
 80047b6:	f7ff fc31 	bl	800401c <I2C_MasterReceive_RXNE>
 80047ba:	e79b      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047bc:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047be:	6953      	ldr	r3, [r2, #20]
 80047c0:	e78c      	b.n	80046dc <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c2:	f013 0f10 	tst.w	r3, #16
 80047c6:	d002      	beq.n	80047ce <HAL_I2C_EV_IRQHandler+0x11a>
 80047c8:	f415 7f00 	tst.w	r5, #512	; 0x200
 80047cc:	d117      	bne.n	80047fe <HAL_I2C_EV_IRQHandler+0x14a>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047ce:	2821      	cmp	r0, #33	; 0x21
 80047d0:	d019      	beq.n	8004806 <HAL_I2C_EV_IRQHandler+0x152>
 80047d2:	2829      	cmp	r0, #41	; 0x29
 80047d4:	d017      	beq.n	8004806 <HAL_I2C_EV_IRQHandler+0x152>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80047da:	d005      	beq.n	80047e8 <HAL_I2C_EV_IRQHandler+0x134>
 80047dc:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80047e0:	d002      	beq.n	80047e8 <HAL_I2C_EV_IRQHandler+0x134>
 80047e2:	f013 0f04 	tst.w	r3, #4
 80047e6:	d027      	beq.n	8004838 <HAL_I2C_EV_IRQHandler+0x184>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e8:	f013 0f04 	tst.w	r3, #4
 80047ec:	d082      	beq.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
 80047ee:	f415 7f00 	tst.w	r5, #512	; 0x200
 80047f2:	f43f af7f 	beq.w	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 80047f6:	4620      	mov	r0, r4
 80047f8:	f7fe ff04 	bl	8003604 <I2C_SlaveReceive_BTF>
 80047fc:	e77a      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff fe94 	bl	800452c <I2C_Slave_STOPF>
 8004804:	e776      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004806:	f013 0f80 	tst.w	r3, #128	; 0x80
 800480a:	d005      	beq.n	8004818 <HAL_I2C_EV_IRQHandler+0x164>
 800480c:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004810:	d002      	beq.n	8004818 <HAL_I2C_EV_IRQHandler+0x164>
 8004812:	f013 0f04 	tst.w	r3, #4
 8004816:	d00b      	beq.n	8004830 <HAL_I2C_EV_IRQHandler+0x17c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004818:	f013 0f04 	tst.w	r3, #4
 800481c:	f43f af6a 	beq.w	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
 8004820:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004824:	f43f af66 	beq.w	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8004828:	4620      	mov	r0, r4
 800482a:	f7fe fedc 	bl	80035e6 <I2C_SlaveTransmit_BTF>
 800482e:	e761      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8004830:	4620      	mov	r0, r4
 8004832:	f7ff fa40 	bl	8003cb6 <I2C_SlaveTransmit_TXE>
 8004836:	e75d      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8004838:	4620      	mov	r0, r4
 800483a:	f7ff fa62 	bl	8003d02 <I2C_SlaveReceive_RXNE>
 800483e:	e759      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x40>

08004840 <HAL_I2C_ER_IRQHandler>:
{
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004844:	6803      	ldr	r3, [r0, #0]
 8004846:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004848:	685f      	ldr	r7, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800484a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800484e:	d007      	beq.n	8004860 <HAL_I2C_ER_IRQHandler+0x20>
 8004850:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004854:	d03b      	beq.n	80048ce <HAL_I2C_ER_IRQHandler+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004856:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800485a:	615a      	str	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 800485c:	2601      	movs	r6, #1
 800485e:	e000      	b.n	8004862 <HAL_I2C_ER_IRQHandler+0x22>
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004860:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004862:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004866:	d008      	beq.n	800487a <HAL_I2C_ER_IRQHandler+0x3a>
 8004868:	f417 7f80 	tst.w	r7, #256	; 0x100
 800486c:	d005      	beq.n	800487a <HAL_I2C_ER_IRQHandler+0x3a>
    error |= HAL_I2C_ERROR_ARLO;
 800486e:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004878:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800487a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800487e:	d018      	beq.n	80048b2 <HAL_I2C_ER_IRQHandler+0x72>
 8004880:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004884:	d015      	beq.n	80048b2 <HAL_I2C_ER_IRQHandler+0x72>
    tmp1 = hi2c->Mode;
 8004886:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800488a:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 800488c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800488e:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 8004890:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004894:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8004896:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004898:	2b20      	cmp	r3, #32
 800489a:	d01a      	beq.n	80048d2 <HAL_I2C_ER_IRQHandler+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048a2:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80048a4:	f046 0604 	orr.w	r6, r6, #4
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80048a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d01d      	beq.n	80048ee <HAL_I2C_ER_IRQHandler+0xae>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048b2:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80048b6:	d008      	beq.n	80048ca <HAL_I2C_ER_IRQHandler+0x8a>
 80048b8:	f417 7f80 	tst.w	r7, #256	; 0x100
 80048bc:	d005      	beq.n	80048ca <HAL_I2C_ER_IRQHandler+0x8a>
    error |= HAL_I2C_ERROR_OVR;
 80048be:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80048c8:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 80048ca:	b9b6      	cbnz	r6, 80048fa <HAL_I2C_ER_IRQHandler+0xba>
}
 80048cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80048ce:	2600      	movs	r6, #0
 80048d0:	e7c7      	b.n	8004862 <HAL_I2C_ER_IRQHandler+0x22>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80048d2:	2900      	cmp	r1, #0
 80048d4:	d1e2      	bne.n	800489c <HAL_I2C_ER_IRQHandler+0x5c>
 80048d6:	2a21      	cmp	r2, #33	; 0x21
 80048d8:	d005      	beq.n	80048e6 <HAL_I2C_ER_IRQHandler+0xa6>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80048da:	2a29      	cmp	r2, #41	; 0x29
 80048dc:	d003      	beq.n	80048e6 <HAL_I2C_ER_IRQHandler+0xa6>
 80048de:	2a28      	cmp	r2, #40	; 0x28
 80048e0:	d1dc      	bne.n	800489c <HAL_I2C_ER_IRQHandler+0x5c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80048e2:	2821      	cmp	r0, #33	; 0x21
 80048e4:	d1da      	bne.n	800489c <HAL_I2C_ER_IRQHandler+0x5c>
      I2C_Slave_AF(hi2c);
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7ff fa5a 	bl	8003da0 <I2C_Slave_AF>
 80048ec:	e7e1      	b.n	80048b2 <HAL_I2C_ER_IRQHandler+0x72>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	6822      	ldr	r2, [r4, #0]
 80048f0:	6813      	ldr	r3, [r2, #0]
 80048f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e7db      	b.n	80048b2 <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= error;
 80048fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048fc:	431e      	orrs	r6, r3
 80048fe:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8004900:	4620      	mov	r0, r4
 8004902:	f7ff fd5f 	bl	80043c4 <I2C_ITError>
}
 8004906:	e7e1      	b.n	80048cc <HAL_I2C_ER_IRQHandler+0x8c>

08004908 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004908:	2800      	cmp	r0, #0
 800490a:	f000 81bb 	beq.w	8004c84 <HAL_RCC_OscConfig+0x37c>
{
 800490e:	b570      	push	{r4, r5, r6, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004914:	6803      	ldr	r3, [r0, #0]
 8004916:	f013 0f01 	tst.w	r3, #1
 800491a:	d03b      	beq.n	8004994 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800491c:	4ba7      	ldr	r3, [pc, #668]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b04      	cmp	r3, #4
 8004926:	d02c      	beq.n	8004982 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004928:	4ba4      	ldr	r3, [pc, #656]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004930:	2b08      	cmp	r3, #8
 8004932:	d021      	beq.n	8004978 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004934:	6863      	ldr	r3, [r4, #4]
 8004936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493a:	d04f      	beq.n	80049dc <HAL_RCC_OscConfig+0xd4>
 800493c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004940:	d052      	beq.n	80049e8 <HAL_RCC_OscConfig+0xe0>
 8004942:	4b9e      	ldr	r3, [pc, #632]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004952:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d050      	beq.n	80049fc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495a:	f7fd ffa3 	bl	80028a4 <HAL_GetTick>
 800495e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004960:	4b96      	ldr	r3, [pc, #600]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004968:	d114      	bne.n	8004994 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800496a:	f7fd ff9b 	bl	80028a4 <HAL_GetTick>
 800496e:	1b40      	subs	r0, r0, r5
 8004970:	2864      	cmp	r0, #100	; 0x64
 8004972:	d9f5      	bls.n	8004960 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004974:	2003      	movs	r0, #3
 8004976:	e18a      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004978:	4b90      	ldr	r3, [pc, #576]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004980:	d0d8      	beq.n	8004934 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004982:	4b8e      	ldr	r3, [pc, #568]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800498a:	d003      	beq.n	8004994 <HAL_RCC_OscConfig+0x8c>
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 817a 	beq.w	8004c88 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	f013 0f02 	tst.w	r3, #2
 800499a:	d055      	beq.n	8004a48 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800499c:	4b87      	ldr	r3, [pc, #540]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f013 0f0c 	tst.w	r3, #12
 80049a4:	d03e      	beq.n	8004a24 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049a6:	4b85      	ldr	r3, [pc, #532]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d033      	beq.n	8004a1a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d068      	beq.n	8004a8a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049b8:	4b81      	ldr	r3, [pc, #516]	; (8004bc0 <HAL_RCC_OscConfig+0x2b8>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049be:	f7fd ff71 	bl	80028a4 <HAL_GetTick>
 80049c2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c4:	4b7d      	ldr	r3, [pc, #500]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f013 0f02 	tst.w	r3, #2
 80049cc:	d154      	bne.n	8004a78 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ce:	f7fd ff69 	bl	80028a4 <HAL_GetTick>
 80049d2:	1b40      	subs	r0, r0, r5
 80049d4:	2802      	cmp	r0, #2
 80049d6:	d9f5      	bls.n	80049c4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80049d8:	2003      	movs	r0, #3
 80049da:	e158      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049dc:	4a77      	ldr	r2, [pc, #476]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 80049de:	6813      	ldr	r3, [r2, #0]
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e7b5      	b.n	8004954 <HAL_RCC_OscConfig+0x4c>
 80049e8:	4b74      	ldr	r3, [pc, #464]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e7ab      	b.n	8004954 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80049fc:	f7fd ff52 	bl	80028a4 <HAL_GetTick>
 8004a00:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a02:	4b6e      	ldr	r3, [pc, #440]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a0a:	d0c3      	beq.n	8004994 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fd ff4a 	bl	80028a4 <HAL_GetTick>
 8004a10:	1b40      	subs	r0, r0, r5
 8004a12:	2864      	cmp	r0, #100	; 0x64
 8004a14:	d9f5      	bls.n	8004a02 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8004a16:	2003      	movs	r0, #3
 8004a18:	e139      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1a:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004a22:	d1c6      	bne.n	80049b2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a24:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f013 0f02 	tst.w	r3, #2
 8004a2c:	d004      	beq.n	8004a38 <HAL_RCC_OscConfig+0x130>
 8004a2e:	68e3      	ldr	r3, [r4, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8004a34:	2001      	movs	r0, #1
 8004a36:	e12a      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a38:	4a60      	ldr	r2, [pc, #384]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004a3a:	6813      	ldr	r3, [r2, #0]
 8004a3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a40:	6921      	ldr	r1, [r4, #16]
 8004a42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a46:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	f013 0f08 	tst.w	r3, #8
 8004a4e:	d040      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a50:	6963      	ldr	r3, [r4, #20]
 8004a52:	b363      	cbz	r3, 8004aae <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a54:	4b5b      	ldr	r3, [pc, #364]	; (8004bc4 <HAL_RCC_OscConfig+0x2bc>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5a:	f7fd ff23 	bl	80028a4 <HAL_GetTick>
 8004a5e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a60:	4b56      	ldr	r3, [pc, #344]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a64:	f013 0f02 	tst.w	r3, #2
 8004a68:	d133      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6a:	f7fd ff1b 	bl	80028a4 <HAL_GetTick>
 8004a6e:	1b40      	subs	r0, r0, r5
 8004a70:	2802      	cmp	r0, #2
 8004a72:	d9f5      	bls.n	8004a60 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004a74:	2003      	movs	r0, #3
 8004a76:	e10a      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a78:	4a50      	ldr	r2, [pc, #320]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a80:	6921      	ldr	r1, [r4, #16]
 8004a82:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e7de      	b.n	8004a48 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8004a8a:	4b4d      	ldr	r3, [pc, #308]	; (8004bc0 <HAL_RCC_OscConfig+0x2b8>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004a90:	f7fd ff08 	bl	80028a4 <HAL_GetTick>
 8004a94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a96:	4b49      	ldr	r3, [pc, #292]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f013 0f02 	tst.w	r3, #2
 8004a9e:	d0d3      	beq.n	8004a48 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa0:	f7fd ff00 	bl	80028a4 <HAL_GetTick>
 8004aa4:	1b40      	subs	r0, r0, r5
 8004aa6:	2802      	cmp	r0, #2
 8004aa8:	d9f5      	bls.n	8004a96 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8004aaa:	2003      	movs	r0, #3
 8004aac:	e0ef      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aae:	4b45      	ldr	r3, [pc, #276]	; (8004bc4 <HAL_RCC_OscConfig+0x2bc>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab4:	f7fd fef6 	bl	80028a4 <HAL_GetTick>
 8004ab8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aba:	4b40      	ldr	r3, [pc, #256]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004abe:	f013 0f02 	tst.w	r3, #2
 8004ac2:	d006      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac4:	f7fd feee 	bl	80028a4 <HAL_GetTick>
 8004ac8:	1b40      	subs	r0, r0, r5
 8004aca:	2802      	cmp	r0, #2
 8004acc:	d9f5      	bls.n	8004aba <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8004ace:	2003      	movs	r0, #3
 8004ad0:	e0dd      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	f013 0f04 	tst.w	r3, #4
 8004ad8:	d079      	beq.n	8004bce <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ada:	4b38      	ldr	r3, [pc, #224]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004ae2:	d133      	bne.n	8004b4c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	4b34      	ldr	r3, [pc, #208]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004afc:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afe:	4b32      	ldr	r3, [pc, #200]	; (8004bc8 <HAL_RCC_OscConfig+0x2c0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b06:	d023      	beq.n	8004b50 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b08:	68a3      	ldr	r3, [r4, #8]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d034      	beq.n	8004b78 <HAL_RCC_OscConfig+0x270>
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	d038      	beq.n	8004b84 <HAL_RCC_OscConfig+0x27c>
 8004b12:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004b14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b16:	f022 0201 	bic.w	r2, r2, #1
 8004b1a:	671a      	str	r2, [r3, #112]	; 0x70
 8004b1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b1e:	f022 0204 	bic.w	r2, r2, #4
 8004b22:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b24:	68a3      	ldr	r3, [r4, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d036      	beq.n	8004b98 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2a:	f7fd febb 	bl	80028a4 <HAL_GetTick>
 8004b2e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b30:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	f013 0f02 	tst.w	r3, #2
 8004b38:	d148      	bne.n	8004bcc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3a:	f7fd feb3 	bl	80028a4 <HAL_GetTick>
 8004b3e:	1b80      	subs	r0, r0, r6
 8004b40:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b44:	4298      	cmp	r0, r3
 8004b46:	d9f3      	bls.n	8004b30 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8004b48:	2003      	movs	r0, #3
 8004b4a:	e0a0      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8004b4c:	2500      	movs	r5, #0
 8004b4e:	e7d6      	b.n	8004afe <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b50:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <HAL_RCC_OscConfig+0x2c0>)
 8004b52:	6813      	ldr	r3, [r2, #0]
 8004b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b58:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004b5a:	f7fd fea3 	bl	80028a4 <HAL_GetTick>
 8004b5e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_RCC_OscConfig+0x2c0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b68:	d1ce      	bne.n	8004b08 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6a:	f7fd fe9b 	bl	80028a4 <HAL_GetTick>
 8004b6e:	1b80      	subs	r0, r0, r6
 8004b70:	2802      	cmp	r0, #2
 8004b72:	d9f5      	bls.n	8004b60 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8004b74:	2003      	movs	r0, #3
 8004b76:	e08a      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b78:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004b7a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	6713      	str	r3, [r2, #112]	; 0x70
 8004b82:	e7cf      	b.n	8004b24 <HAL_RCC_OscConfig+0x21c>
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004b86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b88:	f042 0204 	orr.w	r2, r2, #4
 8004b8c:	671a      	str	r2, [r3, #112]	; 0x70
 8004b8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	671a      	str	r2, [r3, #112]	; 0x70
 8004b96:	e7c5      	b.n	8004b24 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b98:	f7fd fe84 	bl	80028a4 <HAL_GetTick>
 8004b9c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <HAL_RCC_OscConfig+0x2b4>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	f013 0f02 	tst.w	r3, #2
 8004ba6:	d011      	beq.n	8004bcc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba8:	f7fd fe7c 	bl	80028a4 <HAL_GetTick>
 8004bac:	1b80      	subs	r0, r0, r6
 8004bae:	f241 3388 	movw	r3, #5000	; 0x1388
 8004bb2:	4298      	cmp	r0, r3
 8004bb4:	d9f3      	bls.n	8004b9e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8004bb6:	2003      	movs	r0, #3
 8004bb8:	e069      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	42470000 	.word	0x42470000
 8004bc4:	42470e80 	.word	0x42470e80
 8004bc8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bcc:	b9e5      	cbnz	r5, 8004c08 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bce:	69a3      	ldr	r3, [r4, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d05b      	beq.n	8004c8c <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bd4:	4a30      	ldr	r2, [pc, #192]	; (8004c98 <HAL_RCC_OscConfig+0x390>)
 8004bd6:	6892      	ldr	r2, [r2, #8]
 8004bd8:	f002 020c 	and.w	r2, r2, #12
 8004bdc:	2a08      	cmp	r2, #8
 8004bde:	d058      	beq.n	8004c92 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d017      	beq.n	8004c14 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <HAL_RCC_OscConfig+0x394>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fd fe5b 	bl	80028a4 <HAL_GetTick>
 8004bee:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf0:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <HAL_RCC_OscConfig+0x390>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004bf8:	d042      	beq.n	8004c80 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bfa:	f7fd fe53 	bl	80028a4 <HAL_GetTick>
 8004bfe:	1b00      	subs	r0, r0, r4
 8004c00:	2802      	cmp	r0, #2
 8004c02:	d9f5      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004c04:	2003      	movs	r0, #3
 8004c06:	e042      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c08:	4a23      	ldr	r2, [pc, #140]	; (8004c98 <HAL_RCC_OscConfig+0x390>)
 8004c0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c10:	6413      	str	r3, [r2, #64]	; 0x40
 8004c12:	e7dc      	b.n	8004bce <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8004c14:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <HAL_RCC_OscConfig+0x394>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c1a:	f7fd fe43 	bl	80028a4 <HAL_GetTick>
 8004c1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c20:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCC_OscConfig+0x390>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c28:	d006      	beq.n	8004c38 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2a:	f7fd fe3b 	bl	80028a4 <HAL_GetTick>
 8004c2e:	1b40      	subs	r0, r0, r5
 8004c30:	2802      	cmp	r0, #2
 8004c32:	d9f5      	bls.n	8004c20 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8004c34:	2003      	movs	r0, #3
 8004c36:	e02a      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c38:	69e3      	ldr	r3, [r4, #28]
 8004c3a:	6a22      	ldr	r2, [r4, #32]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004c40:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004c44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004c46:	0852      	lsrs	r2, r2, #1
 8004c48:	3a01      	subs	r2, #1
 8004c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c50:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c54:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <HAL_RCC_OscConfig+0x390>)
 8004c56:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004c58:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_RCC_OscConfig+0x394>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c5e:	f7fd fe21 	bl	80028a4 <HAL_GetTick>
 8004c62:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <HAL_RCC_OscConfig+0x390>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6e:	f7fd fe19 	bl	80028a4 <HAL_GetTick>
 8004c72:	1b00      	subs	r0, r0, r4
 8004c74:	2802      	cmp	r0, #2
 8004c76:	d9f5      	bls.n	8004c64 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8004c78:	2003      	movs	r0, #3
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	e006      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
 8004c80:	2000      	movs	r0, #0
 8004c82:	e004      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8004c84:	2001      	movs	r0, #1
}
 8004c86:	4770      	bx	lr
        return HAL_ERROR;
 8004c88:	2001      	movs	r0, #1
 8004c8a:	e000      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8004c8c:	2000      	movs	r0, #0
}
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004c92:	2001      	movs	r0, #1
 8004c94:	e7fb      	b.n	8004c8e <HAL_RCC_OscConfig+0x386>
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	42470060 	.word	0x42470060

08004ca0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca0:	4b32      	ldr	r3, [pc, #200]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d05c      	beq.n	8004d66 <HAL_RCC_GetSysClockFreq+0xc6>
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb0:	482f      	ldr	r0, [pc, #188]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004cb2:	4770      	bx	lr
{
 8004cb4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cb8:	4b2c      	ldr	r3, [pc, #176]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004cc6:	d02b      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc8:	4b28      	ldr	r3, [pc, #160]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004cd0:	461e      	mov	r6, r3
 8004cd2:	2700      	movs	r7, #0
 8004cd4:	015c      	lsls	r4, r3, #5
 8004cd6:	2500      	movs	r5, #0
 8004cd8:	1ae4      	subs	r4, r4, r3
 8004cda:	eb65 0507 	sbc.w	r5, r5, r7
 8004cde:	01a9      	lsls	r1, r5, #6
 8004ce0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004ce4:	01a0      	lsls	r0, r4, #6
 8004ce6:	1b00      	subs	r0, r0, r4
 8004ce8:	eb61 0105 	sbc.w	r1, r1, r5
 8004cec:	00cb      	lsls	r3, r1, #3
 8004cee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004cf2:	00c4      	lsls	r4, r0, #3
 8004cf4:	19a0      	adds	r0, r4, r6
 8004cf6:	eb43 0107 	adc.w	r1, r3, r7
 8004cfa:	024b      	lsls	r3, r1, #9
 8004cfc:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004d00:	0244      	lsls	r4, r0, #9
 8004d02:	4620      	mov	r0, r4
 8004d04:	4619      	mov	r1, r3
 8004d06:	2300      	movs	r3, #0
 8004d08:	f7fb feb0 	bl	8000a6c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d0c:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004d14:	3301      	adds	r3, #1
 8004d16:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004d18:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004d1c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d20:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004d28:	461e      	mov	r6, r3
 8004d2a:	2700      	movs	r7, #0
 8004d2c:	015c      	lsls	r4, r3, #5
 8004d2e:	2500      	movs	r5, #0
 8004d30:	1ae4      	subs	r4, r4, r3
 8004d32:	eb65 0507 	sbc.w	r5, r5, r7
 8004d36:	01a9      	lsls	r1, r5, #6
 8004d38:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004d3c:	01a0      	lsls	r0, r4, #6
 8004d3e:	1b00      	subs	r0, r0, r4
 8004d40:	eb61 0105 	sbc.w	r1, r1, r5
 8004d44:	00cb      	lsls	r3, r1, #3
 8004d46:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004d4a:	00c4      	lsls	r4, r0, #3
 8004d4c:	19a0      	adds	r0, r4, r6
 8004d4e:	eb43 0107 	adc.w	r1, r3, r7
 8004d52:	028b      	lsls	r3, r1, #10
 8004d54:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004d58:	0284      	lsls	r4, r0, #10
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f7fb fe84 	bl	8000a6c <__aeabi_uldivmod>
 8004d64:	e7d2      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8004d66:	4803      	ldr	r0, [pc, #12]	; (8004d74 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	007a1200 	.word	0x007a1200

08004d78 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	f000 809d 	beq.w	8004eb8 <HAL_RCC_ClockConfig+0x140>
{
 8004d7e:	b570      	push	{r4, r5, r6, lr}
 8004d80:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d82:	4b4f      	ldr	r3, [pc, #316]	; (8004ec0 <HAL_RCC_ClockConfig+0x148>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	428b      	cmp	r3, r1
 8004d8c:	d209      	bcs.n	8004da2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	b2cb      	uxtb	r3, r1
 8004d90:	4a4b      	ldr	r2, [pc, #300]	; (8004ec0 <HAL_RCC_ClockConfig+0x148>)
 8004d92:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	428b      	cmp	r3, r1
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8004d9e:	2001      	movs	r0, #1
}
 8004da0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f013 0f02 	tst.w	r3, #2
 8004da8:	d017      	beq.n	8004dda <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004daa:	f013 0f04 	tst.w	r3, #4
 8004dae:	d004      	beq.n	8004dba <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004db0:	4a44      	ldr	r2, [pc, #272]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004db2:	6893      	ldr	r3, [r2, #8]
 8004db4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004db8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	f013 0f08 	tst.w	r3, #8
 8004dc0:	d004      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc2:	4a40      	ldr	r2, [pc, #256]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004dc4:	6893      	ldr	r3, [r2, #8]
 8004dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dca:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dcc:	4a3d      	ldr	r2, [pc, #244]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004dce:	6893      	ldr	r3, [r2, #8]
 8004dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd4:	68a0      	ldr	r0, [r4, #8]
 8004dd6:	4303      	orrs	r3, r0
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	f013 0f01 	tst.w	r3, #1
 8004de2:	d032      	beq.n	8004e4a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d021      	beq.n	8004e2e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dea:	1e9a      	subs	r2, r3, #2
 8004dec:	2a01      	cmp	r2, #1
 8004dee:	d925      	bls.n	8004e3c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df0:	4a34      	ldr	r2, [pc, #208]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	f012 0f02 	tst.w	r2, #2
 8004df8:	d060      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dfa:	4932      	ldr	r1, [pc, #200]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004dfc:	688a      	ldr	r2, [r1, #8]
 8004dfe:	f022 0203 	bic.w	r2, r2, #3
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004e06:	f7fd fd4d 	bl	80028a4 <HAL_GetTick>
 8004e0a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0c:	4b2d      	ldr	r3, [pc, #180]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	6862      	ldr	r2, [r4, #4]
 8004e16:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e1a:	d016      	beq.n	8004e4a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e1c:	f7fd fd42 	bl	80028a4 <HAL_GetTick>
 8004e20:	1b80      	subs	r0, r0, r6
 8004e22:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e26:	4298      	cmp	r0, r3
 8004e28:	d9f0      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8004e2a:	2003      	movs	r0, #3
 8004e2c:	e7b8      	b.n	8004da0 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	4a25      	ldr	r2, [pc, #148]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004e36:	d1e0      	bne.n	8004dfa <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004e38:	2001      	movs	r0, #1
 8004e3a:	e7b1      	b.n	8004da0 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3c:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004e44:	d1d9      	bne.n	8004dfa <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004e46:	2001      	movs	r0, #1
 8004e48:	e7aa      	b.n	8004da0 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <HAL_RCC_ClockConfig+0x148>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	42ab      	cmp	r3, r5
 8004e54:	d909      	bls.n	8004e6a <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	b2ea      	uxtb	r2, r5
 8004e58:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_RCC_ClockConfig+0x148>)
 8004e5a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	42ab      	cmp	r3, r5
 8004e64:	d001      	beq.n	8004e6a <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8004e66:	2001      	movs	r0, #1
 8004e68:	e79a      	b.n	8004da0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	f013 0f04 	tst.w	r3, #4
 8004e70:	d006      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e72:	4a14      	ldr	r2, [pc, #80]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004e74:	6893      	ldr	r3, [r2, #8]
 8004e76:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004e7a:	68e1      	ldr	r1, [r4, #12]
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	f013 0f08 	tst.w	r3, #8
 8004e86:	d007      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e88:	4a0e      	ldr	r2, [pc, #56]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004e8a:	6893      	ldr	r3, [r2, #8]
 8004e8c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e90:	6921      	ldr	r1, [r4, #16]
 8004e92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e96:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e98:	f7ff ff02 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_ClockConfig+0x14c>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ea4:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <HAL_RCC_ClockConfig+0x150>)
 8004ea6:	5cd3      	ldrb	r3, [r2, r3]
 8004ea8:	40d8      	lsrs	r0, r3
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <HAL_RCC_ClockConfig+0x154>)
 8004eac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f7fd fcac 	bl	800280c <HAL_InitTick>
  return HAL_OK;
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e773      	b.n	8004da0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004eb8:	2001      	movs	r0, #1
}
 8004eba:	4770      	bx	lr
        return HAL_ERROR;
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	e76f      	b.n	8004da0 <HAL_RCC_ClockConfig+0x28>
 8004ec0:	40023c00 	.word	0x40023c00
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	0800aab0 	.word	0x0800aab0
 8004ecc:	20000078 	.word	0x20000078

08004ed0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004ed0:	4b01      	ldr	r3, [pc, #4]	; (8004ed8 <HAL_RCC_GetHCLKFreq+0x8>)
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000078 	.word	0x20000078

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ede:	f7ff fff7 	bl	8004ed0 <HAL_RCC_GetHCLKFreq>
 8004ee2:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004eea:	4a03      	ldr	r2, [pc, #12]	; (8004ef8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004eec:	5cd3      	ldrb	r3, [r2, r3]
}
 8004eee:	40d8      	lsrs	r0, r3
 8004ef0:	bd08      	pop	{r3, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	0800aac0 	.word	0x0800aac0

08004efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004efc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004efe:	f7ff ffe7 	bl	8004ed0 <HAL_RCC_GetHCLKFreq>
 8004f02:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004f0a:	4a03      	ldr	r2, [pc, #12]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004f0c:	5cd3      	ldrb	r3, [r2, r3]
}
 8004f0e:	40d8      	lsrs	r0, r3
 8004f10:	bd08      	pop	{r3, pc}
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800
 8004f18:	0800aac0 	.word	0x0800aac0

08004f1c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d03b      	beq.n	8004f98 <HAL_SPI_Init+0x7c>
{
 8004f20:	b510      	push	{r4, lr}
 8004f22:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f28:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d02e      	beq.n	8004f8e <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f30:	2302      	movs	r3, #2
 8004f32:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	6813      	ldr	r3, [r2, #0]
 8004f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3e:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f40:	6863      	ldr	r3, [r4, #4]
 8004f42:	68a2      	ldr	r2, [r4, #8]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	68e2      	ldr	r2, [r4, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	6922      	ldr	r2, [r4, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	6962      	ldr	r2, [r4, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	69a2      	ldr	r2, [r4, #24]
 8004f54:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	69e2      	ldr	r2, [r4, #28]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	6a22      	ldr	r2, [r4, #32]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004f64:	6822      	ldr	r2, [r4, #0]
 8004f66:	430b      	orrs	r3, r1
 8004f68:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f6a:	8b63      	ldrh	r3, [r4, #26]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f78:	6822      	ldr	r2, [r4, #0]
 8004f7a:	69d3      	ldr	r3, [r2, #28]
 8004f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f80:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f82:	2000      	movs	r0, #0
 8004f84:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8004f8c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004f8e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004f92:	f001 f907 	bl	80061a4 <HAL_SPI_MspInit>
 8004f96:	e7cb      	b.n	8004f30 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8004f98:	2001      	movs	r0, #1
}
 8004f9a:	4770      	bx	lr

08004f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f9e:	6a03      	ldr	r3, [r0, #32]
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004faa:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fac:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb0:	680d      	ldr	r5, [r1, #0]
 8004fb2:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fb6:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fba:	688b      	ldr	r3, [r1, #8]
 8004fbc:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fbe:	4d0d      	ldr	r5, [pc, #52]	; (8004ff4 <TIM_OC1_SetConfig+0x58>)
 8004fc0:	42a8      	cmp	r0, r5
 8004fc2:	d009      	beq.n	8004fd8 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc4:	4d0b      	ldr	r5, [pc, #44]	; (8004ff4 <TIM_OC1_SetConfig+0x58>)
 8004fc6:	42a8      	cmp	r0, r5
 8004fc8:	d00d      	beq.n	8004fe6 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fcc:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fce:	684a      	ldr	r2, [r1, #4]
 8004fd0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd2:	6203      	str	r3, [r0, #32]
}
 8004fd4:	bc70      	pop	{r4, r5, r6}
 8004fd6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fd8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004fdc:	68cc      	ldr	r4, [r1, #12]
 8004fde:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fe0:	f023 0304 	bic.w	r3, r3, #4
 8004fe4:	e7ee      	b.n	8004fc4 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fe6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004fea:	694c      	ldr	r4, [r1, #20]
 8004fec:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fee:	698a      	ldr	r2, [r1, #24]
 8004ff0:	4322      	orrs	r2, r4
 8004ff2:	e7ea      	b.n	8004fca <TIM_OC1_SetConfig+0x2e>
 8004ff4:	40010000 	.word	0x40010000

08004ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ffa:	6a03      	ldr	r3, [r0, #32]
 8004ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005000:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005004:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005006:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005008:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800500c:	680d      	ldr	r5, [r1, #0]
 800500e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005014:	688d      	ldr	r5, [r1, #8]
 8005016:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800501a:	4d0f      	ldr	r5, [pc, #60]	; (8005058 <TIM_OC3_SetConfig+0x60>)
 800501c:	42a8      	cmp	r0, r5
 800501e:	d009      	beq.n	8005034 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005020:	4d0d      	ldr	r5, [pc, #52]	; (8005058 <TIM_OC3_SetConfig+0x60>)
 8005022:	42a8      	cmp	r0, r5
 8005024:	d00e      	beq.n	8005044 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005028:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800502a:	684a      	ldr	r2, [r1, #4]
 800502c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502e:	6203      	str	r3, [r0, #32]
}
 8005030:	bc30      	pop	{r4, r5}
 8005032:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8005034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005038:	68cd      	ldr	r5, [r1, #12]
 800503a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800503e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005042:	e7ed      	b.n	8005020 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005044:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005048:	694d      	ldr	r5, [r1, #20]
 800504a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800504e:	698d      	ldr	r5, [r1, #24]
 8005050:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8005054:	e7e7      	b.n	8005026 <TIM_OC3_SetConfig+0x2e>
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000

0800505c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800505e:	6a03      	ldr	r3, [r0, #32]
 8005060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005064:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005066:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005068:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800506c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005070:	680d      	ldr	r5, [r1, #0]
 8005072:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800507a:	688d      	ldr	r5, [r1, #8]
 800507c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005080:	4d07      	ldr	r5, [pc, #28]	; (80050a0 <TIM_OC4_SetConfig+0x44>)
 8005082:	42a8      	cmp	r0, r5
 8005084:	d006      	beq.n	8005094 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005086:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005088:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800508a:	684a      	ldr	r2, [r1, #4]
 800508c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508e:	6203      	str	r3, [r0, #32]
}
 8005090:	bc30      	pop	{r4, r5}
 8005092:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005094:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005098:	694d      	ldr	r5, [r1, #20]
 800509a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800509e:	e7f2      	b.n	8005086 <TIM_OC4_SetConfig+0x2a>
 80050a0:	40010000 	.word	0x40010000

080050a4 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	2302      	movs	r3, #2
 80050a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050aa:	6802      	ldr	r2, [r0, #0]
 80050ac:	6893      	ldr	r3, [r2, #8]
 80050ae:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b2:	2b06      	cmp	r3, #6
 80050b4:	d003      	beq.n	80050be <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80050be:	2301      	movs	r3, #1
 80050c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80050c4:	2000      	movs	r0, #0
 80050c6:	4770      	bx	lr

080050c8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80050c8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ca:	4a25      	ldr	r2, [pc, #148]	; (8005160 <TIM_Base_SetConfig+0x98>)
 80050cc:	4290      	cmp	r0, r2
 80050ce:	d00e      	beq.n	80050ee <TIM_Base_SetConfig+0x26>
 80050d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80050d4:	d00b      	beq.n	80050ee <TIM_Base_SetConfig+0x26>
 80050d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80050da:	4290      	cmp	r0, r2
 80050dc:	d007      	beq.n	80050ee <TIM_Base_SetConfig+0x26>
 80050de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050e2:	4290      	cmp	r0, r2
 80050e4:	d003      	beq.n	80050ee <TIM_Base_SetConfig+0x26>
 80050e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ea:	4290      	cmp	r0, r2
 80050ec:	d103      	bne.n	80050f6 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80050f2:	684a      	ldr	r2, [r1, #4]
 80050f4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050f6:	4a1a      	ldr	r2, [pc, #104]	; (8005160 <TIM_Base_SetConfig+0x98>)
 80050f8:	4290      	cmp	r0, r2
 80050fa:	d01a      	beq.n	8005132 <TIM_Base_SetConfig+0x6a>
 80050fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005100:	d017      	beq.n	8005132 <TIM_Base_SetConfig+0x6a>
 8005102:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005106:	4290      	cmp	r0, r2
 8005108:	d013      	beq.n	8005132 <TIM_Base_SetConfig+0x6a>
 800510a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800510e:	4290      	cmp	r0, r2
 8005110:	d00f      	beq.n	8005132 <TIM_Base_SetConfig+0x6a>
 8005112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005116:	4290      	cmp	r0, r2
 8005118:	d00b      	beq.n	8005132 <TIM_Base_SetConfig+0x6a>
 800511a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800511e:	4290      	cmp	r0, r2
 8005120:	d007      	beq.n	8005132 <TIM_Base_SetConfig+0x6a>
 8005122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005126:	4290      	cmp	r0, r2
 8005128:	d003      	beq.n	8005132 <TIM_Base_SetConfig+0x6a>
 800512a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800512e:	4290      	cmp	r0, r2
 8005130:	d103      	bne.n	800513a <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	68ca      	ldr	r2, [r1, #12]
 8005138:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800513a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513e:	694a      	ldr	r2, [r1, #20]
 8005140:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005142:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005144:	688b      	ldr	r3, [r1, #8]
 8005146:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005148:	680b      	ldr	r3, [r1, #0]
 800514a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <TIM_Base_SetConfig+0x98>)
 800514e:	4298      	cmp	r0, r3
 8005150:	d002      	beq.n	8005158 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8005152:	2301      	movs	r3, #1
 8005154:	6143      	str	r3, [r0, #20]
}
 8005156:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8005158:	690b      	ldr	r3, [r1, #16]
 800515a:	6303      	str	r3, [r0, #48]	; 0x30
 800515c:	e7f9      	b.n	8005152 <TIM_Base_SetConfig+0x8a>
 800515e:	bf00      	nop
 8005160:	40010000 	.word	0x40010000

08005164 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005164:	b1a8      	cbz	r0, 8005192 <HAL_TIM_Base_Init+0x2e>
{
 8005166:	b510      	push	{r4, lr}
 8005168:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800516a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800516e:	b15b      	cbz	r3, 8005188 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	2302      	movs	r3, #2
 8005172:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005176:	1d21      	adds	r1, r4, #4
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	f7ff ffa5 	bl	80050c8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800517e:	2301      	movs	r3, #1
 8005180:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005184:	2000      	movs	r0, #0
}
 8005186:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005188:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800518c:	f001 f870 	bl	8006270 <HAL_TIM_Base_MspInit>
 8005190:	e7ee      	b.n	8005170 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005192:	2001      	movs	r0, #1
}
 8005194:	4770      	bx	lr

08005196 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005196:	b1a8      	cbz	r0, 80051c4 <HAL_TIM_PWM_Init+0x2e>
{
 8005198:	b510      	push	{r4, lr}
 800519a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800519c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051a0:	b15b      	cbz	r3, 80051ba <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80051a2:	2302      	movs	r3, #2
 80051a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a8:	1d21      	adds	r1, r4, #4
 80051aa:	6820      	ldr	r0, [r4, #0]
 80051ac:	f7ff ff8c 	bl	80050c8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80051b6:	2000      	movs	r0, #0
}
 80051b8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80051ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80051be:	f001 f83f 	bl	8006240 <HAL_TIM_PWM_MspInit>
 80051c2:	e7ee      	b.n	80051a2 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80051c4:	2001      	movs	r0, #1
}
 80051c6:	4770      	bx	lr

080051c8 <TIM_OC2_SetConfig>:
{
 80051c8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ca:	6a03      	ldr	r3, [r0, #32]
 80051cc:	f023 0310 	bic.w	r3, r3, #16
 80051d0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80051d2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80051d4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80051d6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051dc:	680d      	ldr	r5, [r1, #0]
 80051de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80051e2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051e6:	688d      	ldr	r5, [r1, #8]
 80051e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051ec:	4d0e      	ldr	r5, [pc, #56]	; (8005228 <TIM_OC2_SetConfig+0x60>)
 80051ee:	42a8      	cmp	r0, r5
 80051f0:	d009      	beq.n	8005206 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f2:	4d0d      	ldr	r5, [pc, #52]	; (8005228 <TIM_OC2_SetConfig+0x60>)
 80051f4:	42a8      	cmp	r0, r5
 80051f6:	d00e      	beq.n	8005216 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80051f8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80051fa:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80051fc:	684a      	ldr	r2, [r1, #4]
 80051fe:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005200:	6203      	str	r3, [r0, #32]
}
 8005202:	bc30      	pop	{r4, r5}
 8005204:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8005206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800520a:	68cd      	ldr	r5, [r1, #12]
 800520c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005214:	e7ed      	b.n	80051f2 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005216:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800521a:	694d      	ldr	r5, [r1, #20]
 800521c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005220:	698d      	ldr	r5, [r1, #24]
 8005222:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005226:	e7e7      	b.n	80051f8 <TIM_OC2_SetConfig+0x30>
 8005228:	40010000 	.word	0x40010000

0800522c <HAL_TIM_PWM_ConfigChannel>:
{
 800522c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800522e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d066      	beq.n	8005304 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8005236:	460d      	mov	r5, r1
 8005238:	4604      	mov	r4, r0
 800523a:	2301      	movs	r3, #1
 800523c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	2302      	movs	r3, #2
 8005242:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8005246:	2a0c      	cmp	r2, #12
 8005248:	d81a      	bhi.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x54>
 800524a:	e8df f002 	tbb	[pc, r2]
 800524e:	1907      	.short	0x1907
 8005250:	19201919 	.word	0x19201919
 8005254:	19341919 	.word	0x19341919
 8005258:	1919      	.short	0x1919
 800525a:	47          	.byte	0x47
 800525b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800525c:	6800      	ldr	r0, [r0, #0]
 800525e:	f7ff fe9d 	bl	8004f9c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005262:	6822      	ldr	r2, [r4, #0]
 8005264:	6993      	ldr	r3, [r2, #24]
 8005266:	f043 0308 	orr.w	r3, r3, #8
 800526a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800526c:	6822      	ldr	r2, [r4, #0]
 800526e:	6993      	ldr	r3, [r2, #24]
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005276:	6822      	ldr	r2, [r4, #0]
 8005278:	6993      	ldr	r3, [r2, #24]
 800527a:	6929      	ldr	r1, [r5, #16]
 800527c:	430b      	orrs	r3, r1
 800527e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005280:	2301      	movs	r3, #1
 8005282:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005286:	2000      	movs	r0, #0
 8005288:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800528c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800528e:	6800      	ldr	r0, [r0, #0]
 8005290:	f7ff ff9a 	bl	80051c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	6993      	ldr	r3, [r2, #24]
 8005298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800529c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	6993      	ldr	r3, [r2, #24]
 80052a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052a8:	6822      	ldr	r2, [r4, #0]
 80052aa:	6993      	ldr	r3, [r2, #24]
 80052ac:	6929      	ldr	r1, [r5, #16]
 80052ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80052b2:	6193      	str	r3, [r2, #24]
      break;
 80052b4:	e7e4      	b.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052b6:	6800      	ldr	r0, [r0, #0]
 80052b8:	f7ff fe9e 	bl	8004ff8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052bc:	6822      	ldr	r2, [r4, #0]
 80052be:	69d3      	ldr	r3, [r2, #28]
 80052c0:	f043 0308 	orr.w	r3, r3, #8
 80052c4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	69d3      	ldr	r3, [r2, #28]
 80052ca:	f023 0304 	bic.w	r3, r3, #4
 80052ce:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052d0:	6822      	ldr	r2, [r4, #0]
 80052d2:	69d3      	ldr	r3, [r2, #28]
 80052d4:	6929      	ldr	r1, [r5, #16]
 80052d6:	430b      	orrs	r3, r1
 80052d8:	61d3      	str	r3, [r2, #28]
      break;
 80052da:	e7d1      	b.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052dc:	6800      	ldr	r0, [r0, #0]
 80052de:	f7ff febd 	bl	800505c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	69d3      	ldr	r3, [r2, #28]
 80052e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052ea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	69d3      	ldr	r3, [r2, #28]
 80052f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	69d3      	ldr	r3, [r2, #28]
 80052fa:	6929      	ldr	r1, [r5, #16]
 80052fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005300:	61d3      	str	r3, [r2, #28]
      break;
 8005302:	e7bd      	b.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8005304:	2002      	movs	r0, #2
 8005306:	e7c1      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x60>

08005308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005308:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800530a:	f001 011f 	and.w	r1, r1, #31
 800530e:	2301      	movs	r3, #1
 8005310:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005314:	6a03      	ldr	r3, [r0, #32]
 8005316:	ea23 0304 	bic.w	r3, r3, r4
 800531a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800531c:	6a03      	ldr	r3, [r0, #32]
 800531e:	408a      	lsls	r2, r1
 8005320:	4313      	orrs	r3, r2
 8005322:	6203      	str	r3, [r0, #32]
}
 8005324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <HAL_TIM_PWM_Start>:
{
 800532c:	b510      	push	{r4, lr}
 800532e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005330:	2201      	movs	r2, #1
 8005332:	6800      	ldr	r0, [r0, #0]
 8005334:	f7ff ffe8 	bl	8005308 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <HAL_TIM_PWM_Start+0x38>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00b      	beq.n	8005358 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005340:	6822      	ldr	r2, [r4, #0]
 8005342:	6893      	ldr	r3, [r2, #8]
 8005344:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	2b06      	cmp	r3, #6
 800534a:	d003      	beq.n	8005354 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 800534c:	6813      	ldr	r3, [r2, #0]
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	6013      	str	r3, [r2, #0]
}
 8005354:	2000      	movs	r0, #0
 8005356:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8005358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800535e:	645a      	str	r2, [r3, #68]	; 0x44
 8005360:	e7ee      	b.n	8005340 <HAL_TIM_PWM_Start+0x14>
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000

08005368 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005368:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d01c      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8005370:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8005372:	2601      	movs	r6, #1
 8005374:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	2302      	movs	r3, #2
 800537a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800537e:	6802      	ldr	r2, [r0, #0]
 8005380:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005382:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005384:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	680c      	ldr	r4, [r1, #0]
 800538a:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800538c:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005390:	684b      	ldr	r3, [r1, #4]
 8005392:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005394:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005396:	6802      	ldr	r2, [r0, #0]
 8005398:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800539a:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800539e:	2300      	movs	r3, #0
 80053a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80053a4:	4618      	mov	r0, r3
}
 80053a6:	bc70      	pop	{r4, r5, r6}
 80053a8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80053aa:	2002      	movs	r0, #2
}
 80053ac:	4770      	bx	lr
	...

080053b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b4:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b6:	6802      	ldr	r2, [r0, #0]
 80053b8:	6913      	ldr	r3, [r2, #16]
 80053ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053be:	68c1      	ldr	r1, [r0, #12]
 80053c0:	430b      	orrs	r3, r1
 80053c2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053c4:	6883      	ldr	r3, [r0, #8]
 80053c6:	6902      	ldr	r2, [r0, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	6942      	ldr	r2, [r0, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	69c2      	ldr	r2, [r0, #28]
 80053d0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80053d2:	6801      	ldr	r1, [r0, #0]
 80053d4:	68cb      	ldr	r3, [r1, #12]
 80053d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80053da:	f023 030c 	bic.w	r3, r3, #12
 80053de:	4313      	orrs	r3, r2
 80053e0:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053e2:	6802      	ldr	r2, [r0, #0]
 80053e4:	6953      	ldr	r3, [r2, #20]
 80053e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ea:	6981      	ldr	r1, [r0, #24]
 80053ec:	430b      	orrs	r3, r1
 80053ee:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f0:	69c3      	ldr	r3, [r0, #28]
 80053f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f6:	d060      	beq.n	80054ba <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f8:	6803      	ldr	r3, [r0, #0]
 80053fa:	4ab8      	ldr	r2, [pc, #736]	; (80056dc <UART_SetConfig+0x32c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	f000 8114 	beq.w	800562a <UART_SetConfig+0x27a>
 8005402:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005406:	4293      	cmp	r3, r2
 8005408:	f000 810f 	beq.w	800562a <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800540c:	f7ff fd66 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8005410:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005414:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005418:	6865      	ldr	r5, [r4, #4]
 800541a:	00ad      	lsls	r5, r5, #2
 800541c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005420:	4faf      	ldr	r7, [pc, #700]	; (80056e0 <UART_SetConfig+0x330>)
 8005422:	fba7 3505 	umull	r3, r5, r7, r5
 8005426:	096d      	lsrs	r5, r5, #5
 8005428:	012e      	lsls	r6, r5, #4
 800542a:	f7ff fd57 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 800542e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005432:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005436:	6865      	ldr	r5, [r4, #4]
 8005438:	00ad      	lsls	r5, r5, #2
 800543a:	fbb0 f9f5 	udiv	r9, r0, r5
 800543e:	f7ff fd4d 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8005442:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005446:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800544a:	6865      	ldr	r5, [r4, #4]
 800544c:	00ad      	lsls	r5, r5, #2
 800544e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005452:	fba7 3505 	umull	r3, r5, r7, r5
 8005456:	096d      	lsrs	r5, r5, #5
 8005458:	f04f 0864 	mov.w	r8, #100	; 0x64
 800545c:	fb08 9515 	mls	r5, r8, r5, r9
 8005460:	012d      	lsls	r5, r5, #4
 8005462:	3532      	adds	r5, #50	; 0x32
 8005464:	fba7 3505 	umull	r3, r5, r7, r5
 8005468:	096d      	lsrs	r5, r5, #5
 800546a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800546e:	4435      	add	r5, r6
 8005470:	f7ff fd34 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8005474:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005478:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800547c:	6866      	ldr	r6, [r4, #4]
 800547e:	00b6      	lsls	r6, r6, #2
 8005480:	fbb0 f6f6 	udiv	r6, r0, r6
 8005484:	f7ff fd2a 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8005488:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800548c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005490:	6863      	ldr	r3, [r4, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	fbb0 f0f3 	udiv	r0, r0, r3
 8005498:	fba7 3000 	umull	r3, r0, r7, r0
 800549c:	0940      	lsrs	r0, r0, #5
 800549e:	fb08 6810 	mls	r8, r8, r0, r6
 80054a2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80054a6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80054aa:	fba7 3708 	umull	r3, r7, r7, r8
 80054ae:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	442f      	add	r7, r5
 80054b6:	609f      	str	r7, [r3, #8]
    }
  }
}
 80054b8:	e10d      	b.n	80056d6 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054ba:	6803      	ldr	r3, [r0, #0]
 80054bc:	4a87      	ldr	r2, [pc, #540]	; (80056dc <UART_SetConfig+0x32c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d05b      	beq.n	800557a <UART_SetConfig+0x1ca>
 80054c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d057      	beq.n	800557a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80054ca:	f7ff fd07 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80054ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80054d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80054d6:	6865      	ldr	r5, [r4, #4]
 80054d8:	006d      	lsls	r5, r5, #1
 80054da:	fbb0 f5f5 	udiv	r5, r0, r5
 80054de:	4f80      	ldr	r7, [pc, #512]	; (80056e0 <UART_SetConfig+0x330>)
 80054e0:	fba7 3505 	umull	r3, r5, r7, r5
 80054e4:	096d      	lsrs	r5, r5, #5
 80054e6:	012e      	lsls	r6, r5, #4
 80054e8:	f7ff fcf8 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80054ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80054f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80054f4:	6865      	ldr	r5, [r4, #4]
 80054f6:	006d      	lsls	r5, r5, #1
 80054f8:	fbb0 f9f5 	udiv	r9, r0, r5
 80054fc:	f7ff fcee 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8005500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005504:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005508:	6865      	ldr	r5, [r4, #4]
 800550a:	006d      	lsls	r5, r5, #1
 800550c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005510:	fba7 3505 	umull	r3, r5, r7, r5
 8005514:	096d      	lsrs	r5, r5, #5
 8005516:	f04f 0864 	mov.w	r8, #100	; 0x64
 800551a:	fb08 9515 	mls	r5, r8, r5, r9
 800551e:	00ed      	lsls	r5, r5, #3
 8005520:	3532      	adds	r5, #50	; 0x32
 8005522:	fba7 3505 	umull	r3, r5, r7, r5
 8005526:	096d      	lsrs	r5, r5, #5
 8005528:	006d      	lsls	r5, r5, #1
 800552a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800552e:	4435      	add	r5, r6
 8005530:	f7ff fcd4 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8005534:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005538:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800553c:	6866      	ldr	r6, [r4, #4]
 800553e:	0076      	lsls	r6, r6, #1
 8005540:	fbb0 f6f6 	udiv	r6, r0, r6
 8005544:	f7ff fcca 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8005548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800554c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005550:	6863      	ldr	r3, [r4, #4]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	fbb0 f3f3 	udiv	r3, r0, r3
 8005558:	fba7 2303 	umull	r2, r3, r7, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	fb08 6813 	mls	r8, r8, r3, r6
 8005562:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005566:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800556a:	fba7 3708 	umull	r3, r7, r7, r8
 800556e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	442f      	add	r7, r5
 8005576:	609f      	str	r7, [r3, #8]
 8005578:	e0ad      	b.n	80056d6 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800557a:	f7ff fcbf 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 800557e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005582:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005586:	6865      	ldr	r5, [r4, #4]
 8005588:	006d      	lsls	r5, r5, #1
 800558a:	fbb0 f5f5 	udiv	r5, r0, r5
 800558e:	4f54      	ldr	r7, [pc, #336]	; (80056e0 <UART_SetConfig+0x330>)
 8005590:	fba7 3505 	umull	r3, r5, r7, r5
 8005594:	096d      	lsrs	r5, r5, #5
 8005596:	012e      	lsls	r6, r5, #4
 8005598:	f7ff fcb0 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 800559c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055a4:	6865      	ldr	r5, [r4, #4]
 80055a6:	006d      	lsls	r5, r5, #1
 80055a8:	fbb0 f9f5 	udiv	r9, r0, r5
 80055ac:	f7ff fca6 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 80055b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055b8:	6865      	ldr	r5, [r4, #4]
 80055ba:	006d      	lsls	r5, r5, #1
 80055bc:	fbb0 f5f5 	udiv	r5, r0, r5
 80055c0:	fba7 3505 	umull	r3, r5, r7, r5
 80055c4:	096d      	lsrs	r5, r5, #5
 80055c6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80055ca:	fb08 9515 	mls	r5, r8, r5, r9
 80055ce:	00ed      	lsls	r5, r5, #3
 80055d0:	3532      	adds	r5, #50	; 0x32
 80055d2:	fba7 3505 	umull	r3, r5, r7, r5
 80055d6:	096d      	lsrs	r5, r5, #5
 80055d8:	006d      	lsls	r5, r5, #1
 80055da:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80055de:	4435      	add	r5, r6
 80055e0:	f7ff fc8c 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 80055e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055ec:	6866      	ldr	r6, [r4, #4]
 80055ee:	0076      	lsls	r6, r6, #1
 80055f0:	fbb0 f6f6 	udiv	r6, r0, r6
 80055f4:	f7ff fc82 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 80055f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005600:	6863      	ldr	r3, [r4, #4]
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	fbb0 f3f3 	udiv	r3, r0, r3
 8005608:	fba7 2303 	umull	r2, r3, r7, r3
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	fb08 6813 	mls	r8, r8, r3, r6
 8005612:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005616:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800561a:	fba7 3708 	umull	r3, r7, r7, r8
 800561e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	442f      	add	r7, r5
 8005626:	609f      	str	r7, [r3, #8]
 8005628:	e055      	b.n	80056d6 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800562a:	f7ff fc67 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 800562e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005632:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005636:	6865      	ldr	r5, [r4, #4]
 8005638:	00ad      	lsls	r5, r5, #2
 800563a:	fbb0 f5f5 	udiv	r5, r0, r5
 800563e:	4f28      	ldr	r7, [pc, #160]	; (80056e0 <UART_SetConfig+0x330>)
 8005640:	fba7 3505 	umull	r3, r5, r7, r5
 8005644:	096d      	lsrs	r5, r5, #5
 8005646:	012e      	lsls	r6, r5, #4
 8005648:	f7ff fc58 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 800564c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005650:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005654:	6865      	ldr	r5, [r4, #4]
 8005656:	00ad      	lsls	r5, r5, #2
 8005658:	fbb0 f9f5 	udiv	r9, r0, r5
 800565c:	f7ff fc4e 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 8005660:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005664:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005668:	6865      	ldr	r5, [r4, #4]
 800566a:	00ad      	lsls	r5, r5, #2
 800566c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005670:	fba7 3505 	umull	r3, r5, r7, r5
 8005674:	096d      	lsrs	r5, r5, #5
 8005676:	f04f 0864 	mov.w	r8, #100	; 0x64
 800567a:	fb08 9515 	mls	r5, r8, r5, r9
 800567e:	012d      	lsls	r5, r5, #4
 8005680:	3532      	adds	r5, #50	; 0x32
 8005682:	fba7 3505 	umull	r3, r5, r7, r5
 8005686:	096d      	lsrs	r5, r5, #5
 8005688:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800568c:	4435      	add	r5, r6
 800568e:	f7ff fc35 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 8005692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005696:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800569a:	6866      	ldr	r6, [r4, #4]
 800569c:	00b6      	lsls	r6, r6, #2
 800569e:	fbb0 f6f6 	udiv	r6, r0, r6
 80056a2:	f7ff fc2b 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 80056a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056ae:	6863      	ldr	r3, [r4, #4]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80056b6:	fba7 3000 	umull	r3, r0, r7, r0
 80056ba:	0940      	lsrs	r0, r0, #5
 80056bc:	fb08 6810 	mls	r8, r8, r0, r6
 80056c0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80056c4:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80056c8:	fba7 3708 	umull	r3, r7, r7, r8
 80056cc:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	442f      	add	r7, r5
 80056d4:	609f      	str	r7, [r3, #8]
}
 80056d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056da:	bf00      	nop
 80056dc:	40011000 	.word	0x40011000
 80056e0:	51eb851f 	.word	0x51eb851f

080056e4 <UART_WaitOnFlagUntilTimeout>:
{
 80056e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e8:	4605      	mov	r5, r0
 80056ea:	460f      	mov	r7, r1
 80056ec:	4616      	mov	r6, r2
 80056ee:	4698      	mov	r8, r3
 80056f0:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f2:	682b      	ldr	r3, [r5, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	ea37 0303 	bics.w	r3, r7, r3
 80056fa:	bf0c      	ite	eq
 80056fc:	2301      	moveq	r3, #1
 80056fe:	2300      	movne	r3, #0
 8005700:	42b3      	cmp	r3, r6
 8005702:	d11d      	bne.n	8005740 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005704:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005708:	d0f3      	beq.n	80056f2 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800570a:	b12c      	cbz	r4, 8005718 <UART_WaitOnFlagUntilTimeout+0x34>
 800570c:	f7fd f8ca 	bl	80028a4 <HAL_GetTick>
 8005710:	eba0 0008 	sub.w	r0, r0, r8
 8005714:	42a0      	cmp	r0, r4
 8005716:	d9ec      	bls.n	80056f2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005718:	682a      	ldr	r2, [r5, #0]
 800571a:	68d3      	ldr	r3, [r2, #12]
 800571c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005720:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	682a      	ldr	r2, [r5, #0]
 8005724:	6953      	ldr	r3, [r2, #20]
 8005726:	f023 0301 	bic.w	r3, r3, #1
 800572a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800572c:	2320      	movs	r3, #32
 800572e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005732:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8005736:	2300      	movs	r3, #0
 8005738:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 800573c:	2003      	movs	r0, #3
 800573e:	e000      	b.n	8005742 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8005740:	2000      	movs	r0, #0
}
 8005742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005746 <HAL_UART_Init>:
  if (huart == NULL)
 8005746:	b358      	cbz	r0, 80057a0 <HAL_UART_Init+0x5a>
{
 8005748:	b510      	push	{r4, lr}
 800574a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800574c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005750:	b30b      	cbz	r3, 8005796 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005752:	2324      	movs	r3, #36	; 0x24
 8005754:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	68d3      	ldr	r3, [r2, #12]
 800575c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005760:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005762:	4620      	mov	r0, r4
 8005764:	f7ff fe24 	bl	80053b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	6913      	ldr	r3, [r2, #16]
 800576c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005770:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005772:	6822      	ldr	r2, [r4, #0]
 8005774:	6953      	ldr	r3, [r2, #20]
 8005776:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800577a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800577c:	6822      	ldr	r2, [r4, #0]
 800577e:	68d3      	ldr	r3, [r2, #12]
 8005780:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005784:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005786:	2000      	movs	r0, #0
 8005788:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800578a:	2320      	movs	r3, #32
 800578c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005790:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8005794:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005796:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800579a:	f000 fdad 	bl	80062f8 <HAL_UART_MspInit>
 800579e:	e7d8      	b.n	8005752 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80057a0:	2001      	movs	r0, #1
}
 80057a2:	4770      	bx	lr

080057a4 <HAL_UART_Transmit>:
{
 80057a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80057ac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d155      	bne.n	8005862 <HAL_UART_Transmit+0xbe>
 80057b6:	4604      	mov	r4, r0
 80057b8:	460d      	mov	r5, r1
 80057ba:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80057bc:	2900      	cmp	r1, #0
 80057be:	d055      	beq.n	800586c <HAL_UART_Transmit+0xc8>
 80057c0:	2a00      	cmp	r2, #0
 80057c2:	d055      	beq.n	8005870 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80057c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d053      	beq.n	8005874 <HAL_UART_Transmit+0xd0>
 80057cc:	2301      	movs	r3, #1
 80057ce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d6:	2321      	movs	r3, #33	; 0x21
 80057d8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80057dc:	f7fd f862 	bl	80028a4 <HAL_GetTick>
 80057e0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80057e2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80057e6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057ea:	e010      	b.n	800580e <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ec:	9600      	str	r6, [sp, #0]
 80057ee:	463b      	mov	r3, r7
 80057f0:	2200      	movs	r2, #0
 80057f2:	2180      	movs	r1, #128	; 0x80
 80057f4:	4620      	mov	r0, r4
 80057f6:	f7ff ff75 	bl	80056e4 <UART_WaitOnFlagUntilTimeout>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d13c      	bne.n	8005878 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80057fe:	882b      	ldrh	r3, [r5, #0]
 8005800:	6822      	ldr	r2, [r4, #0]
 8005802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005806:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005808:	6923      	ldr	r3, [r4, #16]
 800580a:	b9c3      	cbnz	r3, 800583e <HAL_UART_Transmit+0x9a>
          pData += 2U;
 800580c:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800580e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005810:	b29b      	uxth	r3, r3
 8005812:	b1b3      	cbz	r3, 8005842 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8005814:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005816:	3b01      	subs	r3, #1
 8005818:	b29b      	uxth	r3, r3
 800581a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800581c:	68a3      	ldr	r3, [r4, #8]
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	d0e3      	beq.n	80057ec <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005824:	9600      	str	r6, [sp, #0]
 8005826:	463b      	mov	r3, r7
 8005828:	2200      	movs	r2, #0
 800582a:	2180      	movs	r1, #128	; 0x80
 800582c:	4620      	mov	r0, r4
 800582e:	f7ff ff59 	bl	80056e4 <UART_WaitOnFlagUntilTimeout>
 8005832:	bb18      	cbnz	r0, 800587c <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005834:	782a      	ldrb	r2, [r5, #0]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	3501      	adds	r5, #1
 800583c:	e7e7      	b.n	800580e <HAL_UART_Transmit+0x6a>
          pData += 1U;
 800583e:	3501      	adds	r5, #1
 8005840:	e7e5      	b.n	800580e <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005842:	9600      	str	r6, [sp, #0]
 8005844:	463b      	mov	r3, r7
 8005846:	2200      	movs	r2, #0
 8005848:	2140      	movs	r1, #64	; 0x40
 800584a:	4620      	mov	r0, r4
 800584c:	f7ff ff4a 	bl	80056e4 <UART_WaitOnFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	b9a8      	cbnz	r0, 8005880 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8005854:	2220      	movs	r2, #32
 8005856:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800585a:	2200      	movs	r2, #0
 800585c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8005860:	e000      	b.n	8005864 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
}
 8005864:	4618      	mov	r0, r3
 8005866:	b002      	add	sp, #8
 8005868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e7f9      	b.n	8005864 <HAL_UART_Transmit+0xc0>
 8005870:	2301      	movs	r3, #1
 8005872:	e7f7      	b.n	8005864 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8005874:	2302      	movs	r3, #2
 8005876:	e7f5      	b.n	8005864 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e7f3      	b.n	8005864 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e7f1      	b.n	8005864 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e7ef      	b.n	8005864 <HAL_UART_Transmit+0xc0>

08005884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005888:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800588a:	2400      	movs	r4, #0
 800588c:	9403      	str	r4, [sp, #12]
 800588e:	9404      	str	r4, [sp, #16]
 8005890:	9405      	str	r4, [sp, #20]
 8005892:	9406      	str	r4, [sp, #24]
 8005894:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005896:	9400      	str	r4, [sp, #0]
 8005898:	4b3c      	ldr	r3, [pc, #240]	; (800598c <MX_GPIO_Init+0x108>)
 800589a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800589c:	f042 0204 	orr.w	r2, r2, #4
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30
 80058a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a4:	f002 0204 	and.w	r2, r2, #4
 80058a8:	9200      	str	r2, [sp, #0]
 80058aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ac:	9401      	str	r4, [sp, #4]
 80058ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	631a      	str	r2, [r3, #48]	; 0x30
 80058b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b8:	f002 0201 	and.w	r2, r2, #1
 80058bc:	9201      	str	r2, [sp, #4]
 80058be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058c0:	9402      	str	r4, [sp, #8]
 80058c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058c4:	f042 0202 	orr.w	r2, r2, #2
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	9302      	str	r3, [sp, #8]
 80058d2:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80058d4:	4e2e      	ldr	r6, [pc, #184]	; (8005990 <MX_GPIO_Init+0x10c>)
 80058d6:	4622      	mov	r2, r4
 80058d8:	2120      	movs	r1, #32
 80058da:	4630      	mov	r0, r6
 80058dc:	f7fd fcf4 	bl	80032c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80058e0:	4f2c      	ldr	r7, [pc, #176]	; (8005994 <MX_GPIO_Init+0x110>)
 80058e2:	4622      	mov	r2, r4
 80058e4:	2120      	movs	r1, #32
 80058e6:	4638      	mov	r0, r7
 80058e8:	f7fd fcee 	bl	80032c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80058ec:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005998 <MX_GPIO_Init+0x114>
 80058f0:	4622      	mov	r2, r4
 80058f2:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80058f6:	4648      	mov	r0, r9
 80058f8:	f7fd fce6 	bl	80032c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80058fc:	f04f 0a20 	mov.w	sl, #32
 8005900:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005904:	2501      	movs	r5, #1
 8005906:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005908:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800590a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800590c:	a903      	add	r1, sp, #12
 800590e:	4630      	mov	r0, r6
 8005910:	f7fd fc08 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : kill_Pin */
  GPIO_InitStruct.Pin = kill_Pin;
 8005914:	2310      	movs	r3, #16
 8005916:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005918:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800599c <MX_GPIO_Init+0x118>
 800591c:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005920:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(kill_GPIO_Port, &GPIO_InitStruct);
 8005922:	a903      	add	r1, sp, #12
 8005924:	4638      	mov	r0, r7
 8005926:	f7fd fbfd 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800592a:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800592e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005930:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005932:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005934:	a903      	add	r1, sp, #12
 8005936:	4638      	mov	r0, r7
 8005938:	f7fd fbf4 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800593c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8005940:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005942:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005944:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005946:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005948:	a903      	add	r1, sp, #12
 800594a:	4648      	mov	r0, r9
 800594c:	f7fd fbea 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_RE_INT_Pin */
  GPIO_InitStruct.Pin = PWM_RE_INT_Pin;
 8005950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005954:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005956:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(PWM_RE_INT_GPIO_Port, &GPIO_InitStruct);
 800595c:	a903      	add	r1, sp, #12
 800595e:	4630      	mov	r0, r6
 8005960:	f7fd fbe0 	bl	8003124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005964:	4622      	mov	r2, r4
 8005966:	4621      	mov	r1, r4
 8005968:	200a      	movs	r0, #10
 800596a:	f7fd f95f 	bl	8002c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800596e:	200a      	movs	r0, #10
 8005970:	f7fd f990 	bl	8002c94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8005974:	4622      	mov	r2, r4
 8005976:	2104      	movs	r1, #4
 8005978:	2017      	movs	r0, #23
 800597a:	f7fd f957 	bl	8002c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800597e:	2017      	movs	r0, #23
 8005980:	f7fd f988 	bl	8002c94 <HAL_NVIC_EnableIRQ>

}
 8005984:	b008      	add	sp, #32
 8005986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598a:	bf00      	nop
 800598c:	40023800 	.word	0x40023800
 8005990:	40020000 	.word	0x40020000
 8005994:	40020800 	.word	0x40020800
 8005998:	40020400 	.word	0x40020400
 800599c:	10110000 	.word	0x10110000

080059a0 <MX_DMA_Init>:
{
 80059a0:	b510      	push	{r4, lr}
 80059a2:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80059a4:	2400      	movs	r4, #0
 80059a6:	9401      	str	r4, [sp, #4]
 80059a8:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <MX_DMA_Init+0x40>)
 80059aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ac:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80059bc:	4622      	mov	r2, r4
 80059be:	4621      	mov	r1, r4
 80059c0:	200d      	movs	r0, #13
 80059c2:	f7fd f933 	bl	8002c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80059c6:	200d      	movs	r0, #13
 80059c8:	f7fd f964 	bl	8002c94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80059cc:	4622      	mov	r2, r4
 80059ce:	4621      	mov	r1, r4
 80059d0:	202f      	movs	r0, #47	; 0x2f
 80059d2:	f7fd f92b 	bl	8002c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80059d6:	202f      	movs	r0, #47	; 0x2f
 80059d8:	f7fd f95c 	bl	8002c94 <HAL_NVIC_EnableIRQ>
}
 80059dc:	b002      	add	sp, #8
 80059de:	bd10      	pop	{r4, pc}
 80059e0:	40023800 	.word	0x40023800

080059e4 <MX_USART2_UART_Init>:
{
 80059e4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80059e6:	4808      	ldr	r0, [pc, #32]	; (8005a08 <MX_USART2_UART_Init+0x24>)
 80059e8:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <MX_USART2_UART_Init+0x28>)
 80059ea:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80059ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80059f0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059f2:	2300      	movs	r3, #0
 80059f4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80059f6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80059f8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80059fa:	220c      	movs	r2, #12
 80059fc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059fe:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a00:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a02:	f7ff fea0 	bl	8005746 <HAL_UART_Init>
}
 8005a06:	bd08      	pop	{r3, pc}
 8005a08:	20000688 	.word	0x20000688
 8005a0c:	40004400 	.word	0x40004400

08005a10 <MX_USART6_UART_Init>:
{
 8005a10:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8005a12:	4808      	ldr	r0, [pc, #32]	; (8005a34 <MX_USART6_UART_Init+0x24>)
 8005a14:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <MX_USART6_UART_Init+0x28>)
 8005a16:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8005a18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005a1c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005a22:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005a24:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005a26:	220c      	movs	r2, #12
 8005a28:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a2a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a2c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005a2e:	f7ff fe8a 	bl	8005746 <HAL_UART_Init>
}
 8005a32:	bd08      	pop	{r3, pc}
 8005a34:	20000624 	.word	0x20000624
 8005a38:	40011400 	.word	0x40011400

08005a3c <MX_I2C2_Init>:
{
 8005a3c:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8005a3e:	4809      	ldr	r0, [pc, #36]	; (8005a64 <MX_I2C2_Init+0x28>)
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <MX_I2C2_Init+0x2c>)
 8005a42:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <MX_I2C2_Init+0x30>)
 8005a46:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005a4c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a52:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a54:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005a56:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a58:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a5a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005a5c:	f7fd fe28 	bl	80036b0 <HAL_I2C_Init>
}
 8005a60:	bd08      	pop	{r3, pc}
 8005a62:	bf00      	nop
 8005a64:	20000344 	.word	0x20000344
 8005a68:	40005800 	.word	0x40005800
 8005a6c:	00061a80 	.word	0x00061a80

08005a70 <MX_TIM4_Init>:
{
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	b08a      	sub	sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a74:	2400      	movs	r4, #0
 8005a76:	9408      	str	r4, [sp, #32]
 8005a78:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a7a:	9401      	str	r4, [sp, #4]
 8005a7c:	9402      	str	r4, [sp, #8]
 8005a7e:	9403      	str	r4, [sp, #12]
 8005a80:	9404      	str	r4, [sp, #16]
 8005a82:	9405      	str	r4, [sp, #20]
 8005a84:	9406      	str	r4, [sp, #24]
 8005a86:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 8005a88:	4d1b      	ldr	r5, [pc, #108]	; (8005af8 <MX_TIM4_Init+0x88>)
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <MX_TIM4_Init+0x8c>)
 8005a8c:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 9;
 8005a8e:	2309      	movs	r3, #9
 8005a90:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a92:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 20000;
 8005a94:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005a98:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a9a:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a9c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f7ff fb79 	bl	8005196 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005aa4:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005aa6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005aa8:	a908      	add	r1, sp, #32
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7ff fc5c 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ab0:	2360      	movs	r3, #96	; 0x60
 8005ab2:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8005ab4:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ab6:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005ab8:	2604      	movs	r6, #4
 8005aba:	9605      	str	r6, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005abc:	4622      	mov	r2, r4
 8005abe:	eb0d 0106 	add.w	r1, sp, r6
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f7ff fbb2 	bl	800522c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ac8:	4632      	mov	r2, r6
 8005aca:	eb0d 0106 	add.w	r1, sp, r6
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f7ff fbac 	bl	800522c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	eb0d 0106 	add.w	r1, sp, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7ff fba6 	bl	800522c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005ae0:	220c      	movs	r2, #12
 8005ae2:	eb0d 0106 	add.w	r1, sp, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f7ff fba0 	bl	800522c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8005aec:	4628      	mov	r0, r5
 8005aee:	f000 fbd7 	bl	80062a0 <HAL_TIM_MspPostInit>
}
 8005af2:	b00a      	add	sp, #40	; 0x28
 8005af4:	bd70      	pop	{r4, r5, r6, pc}
 8005af6:	bf00      	nop
 8005af8:	20000470 	.word	0x20000470
 8005afc:	40000800 	.word	0x40000800

08005b00 <MX_ADC1_Init>:
{
 8005b00:	b530      	push	{r4, r5, lr}
 8005b02:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8005b04:	2300      	movs	r3, #0
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	9302      	str	r3, [sp, #8]
 8005b0c:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8005b0e:	4c11      	ldr	r4, [pc, #68]	; (8005b54 <MX_ADC1_Init+0x54>)
 8005b10:	4a11      	ldr	r2, [pc, #68]	; (8005b58 <MX_ADC1_Init+0x58>)
 8005b12:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005b14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b18:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005b1a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005b1c:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005b1e:	2501      	movs	r5, #1
 8005b20:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005b22:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005b26:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005b28:	4a0c      	ldr	r2, [pc, #48]	; (8005b5c <MX_ADC1_Init+0x5c>)
 8005b2a:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b2c:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005b2e:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005b30:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005b34:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005b36:	4620      	mov	r0, r4
 8005b38:	f7fc ff68 	bl	8002a0c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_7;
 8005b3c:	2307      	movs	r3, #7
 8005b3e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8005b40:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8005b42:	2302      	movs	r3, #2
 8005b44:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b46:	4669      	mov	r1, sp
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f7fc ff8b 	bl	8002a64 <HAL_ADC_ConfigChannel>
}
 8005b4e:	b005      	add	sp, #20
 8005b50:	bd30      	pop	{r4, r5, pc}
 8005b52:	bf00      	nop
 8005b54:	20000570 	.word	0x20000570
 8005b58:	40012000 	.word	0x40012000
 8005b5c:	0f000001 	.word	0x0f000001

08005b60 <MX_SPI2_Init>:
{
 8005b60:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8005b62:	480c      	ldr	r0, [pc, #48]	; (8005b94 <MX_SPI2_Init+0x34>)
 8005b64:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <MX_SPI2_Init+0x38>)
 8005b66:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005b68:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005b6c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b72:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b74:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b76:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005b7e:	2220      	movs	r2, #32
 8005b80:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b82:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b84:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b86:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005b88:	230a      	movs	r3, #10
 8005b8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005b8c:	f7ff f9c6 	bl	8004f1c <HAL_SPI_Init>
}
 8005b90:	bd08      	pop	{r3, pc}
 8005b92:	bf00      	nop
 8005b94:	20000418 	.word	0x20000418
 8005b98:	40003800 	.word	0x40003800

08005b9c <MX_TIM11_Init>:
{
 8005b9c:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8005b9e:	4807      	ldr	r0, [pc, #28]	; (8005bbc <MX_TIM11_Init+0x20>)
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <MX_TIM11_Init+0x24>)
 8005ba2:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100-1;
 8005ba4:	2363      	movs	r3, #99	; 0x63
 8005ba6:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535-1;
 8005bac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005bb0:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bb2:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bb4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005bb6:	f7ff fad5 	bl	8005164 <HAL_TIM_Base_Init>
}
 8005bba:	bd08      	pop	{r3, pc}
 8005bbc:	200005d8 	.word	0x200005d8
 8005bc0:	40014800 	.word	0x40014800

08005bc4 <SystemClock_Config>:
{
 8005bc4:	b530      	push	{r4, r5, lr}
 8005bc6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bc8:	2230      	movs	r2, #48	; 0x30
 8005bca:	2100      	movs	r1, #0
 8005bcc:	a808      	add	r0, sp, #32
 8005bce:	f000 fcee 	bl	80065ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005bd2:	2400      	movs	r4, #0
 8005bd4:	9403      	str	r4, [sp, #12]
 8005bd6:	9404      	str	r4, [sp, #16]
 8005bd8:	9405      	str	r4, [sp, #20]
 8005bda:	9406      	str	r4, [sp, #24]
 8005bdc:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005bde:	9401      	str	r4, [sp, #4]
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <SystemClock_Config+0x88>)
 8005be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bf4:	9402      	str	r4, [sp, #8]
 8005bf6:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <SystemClock_Config+0x8c>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c06:	9302      	str	r3, [sp, #8]
 8005c08:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005c0a:	2502      	movs	r5, #2
 8005c0c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005c12:	2310      	movs	r3, #16
 8005c14:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c16:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005c18:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005c1a:	2308      	movs	r3, #8
 8005c1c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005c1e:	2364      	movs	r3, #100	; 0x64
 8005c20:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005c22:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005c24:	2304      	movs	r3, #4
 8005c26:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c28:	a808      	add	r0, sp, #32
 8005c2a:	f7fe fe6d 	bl	8004908 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c2e:	230f      	movs	r3, #15
 8005c30:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c32:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c34:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c3a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c3c:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005c3e:	2103      	movs	r1, #3
 8005c40:	a803      	add	r0, sp, #12
 8005c42:	f7ff f899 	bl	8004d78 <HAL_RCC_ClockConfig>
}
 8005c46:	b015      	add	sp, #84	; 0x54
 8005c48:	bd30      	pop	{r4, r5, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40007000 	.word	0x40007000

08005c54 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8005c54:	4b01      	ldr	r3, [pc, #4]	; (8005c5c <PWM1_Set+0x8>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6358      	str	r0, [r3, #52]	; 0x34
}
 8005c5a:	4770      	bx	lr
 8005c5c:	20000470 	.word	0x20000470

08005c60 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8005c60:	4b01      	ldr	r3, [pc, #4]	; (8005c68 <PWM2_Set+0x8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6398      	str	r0, [r3, #56]	; 0x38

}
 8005c66:	4770      	bx	lr
 8005c68:	20000470 	.word	0x20000470

08005c6c <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8005c6c:	4b01      	ldr	r3, [pc, #4]	; (8005c74 <PWM3_Set+0x8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8005c72:	4770      	bx	lr
 8005c74:	20000470 	.word	0x20000470

08005c78 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8005c78:	4b01      	ldr	r3, [pc, #4]	; (8005c80 <PWM4_Set+0x8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6418      	str	r0, [r3, #64]	; 0x40
}
 8005c7e:	4770      	bx	lr
 8005c80:	20000470 	.word	0x20000470

08005c84 <main>:
{
 8005c84:	b510      	push	{r4, lr}
  HAL_Init();
 8005c86:	f7fc fde7 	bl	8002858 <HAL_Init>
  SystemClock_Config();
 8005c8a:	f7ff ff9b 	bl	8005bc4 <SystemClock_Config>
  MX_GPIO_Init();
 8005c8e:	f7ff fdf9 	bl	8005884 <MX_GPIO_Init>
  MX_DMA_Init();
 8005c92:	f7ff fe85 	bl	80059a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005c96:	f7ff fea5 	bl	80059e4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8005c9a:	f7ff fecf 	bl	8005a3c <MX_I2C2_Init>
  MX_TIM4_Init();
 8005c9e:	f7ff fee7 	bl	8005a70 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8005ca2:	f7ff feb5 	bl	8005a10 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8005ca6:	f7ff ff2b 	bl	8005b00 <MX_ADC1_Init>
  MX_SPI2_Init();
 8005caa:	f7ff ff59 	bl	8005b60 <MX_SPI2_Init>
  MX_TIM11_Init();
 8005cae:	f7ff ff75 	bl	8005b9c <MX_TIM11_Init>
	HAL_TIM_Base_Start(&htim11);
 8005cb2:	481c      	ldr	r0, [pc, #112]	; (8005d24 <main+0xa0>)
 8005cb4:	f7ff f9f6 	bl	80050a4 <HAL_TIM_Base_Start>
	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 8005cb8:	481b      	ldr	r0, [pc, #108]	; (8005d28 <main+0xa4>)
 8005cba:	f7fb f9a5 	bl	8001008 <imu_init>
 8005cbe:	b108      	cbz	r0, 8005cc4 <main+0x40>
{
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e008      	b.n	8005cd6 <main+0x52>
		imu_calibrate();
 8005cc4:	f7fb ff58 	bl	8001b78 <imu_calibrate>
 8005cc8:	e7fa      	b.n	8005cc0 <main+0x3c>
		AckPayload_0[i] = 0;
 8005cca:	2200      	movs	r2, #0
 8005ccc:	4917      	ldr	r1, [pc, #92]	; (8005d2c <main+0xa8>)
 8005cce:	54ca      	strb	r2, [r1, r3]
		AckPayload_1[i] = 0;
 8005cd0:	4917      	ldr	r1, [pc, #92]	; (8005d30 <main+0xac>)
 8005cd2:	54ca      	strb	r2, [r1, r3]
	for (int i = 0; i < 31; ++i) {
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	2b1e      	cmp	r3, #30
 8005cd8:	ddf7      	ble.n	8005cca <main+0x46>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005cda:	4c16      	ldr	r4, [pc, #88]	; (8005d34 <main+0xb0>)
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f7ff fb24 	bl	800532c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005ce4:	2104      	movs	r1, #4
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7ff fb20 	bl	800532c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005cec:	2108      	movs	r1, #8
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f7ff fb1c 	bl	800532c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8005cf4:	210c      	movs	r1, #12
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f7ff fb18 	bl	800532c <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8005cfc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005d00:	f7ff ffa8 	bl	8005c54 <PWM1_Set>
	PWM2_Set(2500);
 8005d04:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005d08:	f7ff ffaa 	bl	8005c60 <PWM2_Set>
	PWM3_Set(2500);
 8005d0c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005d10:	f7ff ffac 	bl	8005c6c <PWM3_Set>
	PWM4_Set(2500);
 8005d14:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005d18:	f7ff ffae 	bl	8005c78 <PWM4_Set>
		main_loop = 1;
 8005d1c:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <main+0xb4>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e7fb      	b.n	8005d1c <main+0x98>
 8005d24:	200005d8 	.word	0x200005d8
 8005d28:	20000344 	.word	0x20000344
 8005d2c:	200005b8 	.word	0x200005b8
 8005d30:	20000058 	.word	0x20000058
 8005d34:	20000470 	.word	0x20000470
 8005d38:	200002f8 	.word	0x200002f8

08005d3c <pulse_posedge_handler>:
 * (1 CW)     (3 CCW)
 *
 * This function gets called by the GPIO_EXTI callback when the PWM_RE_INT_Pin triggers an interrupt,
 * which is on the rising edge of every PWM pulse.
 */
void pulse_posedge_handler() {
 8005d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d3e:	b083      	sub	sp, #12

	//Only want this to happen in main loop - not during init sequence
	if (main_loop) {
 8005d40:	4b77      	ldr	r3, [pc, #476]	; (8005f20 <pulse_posedge_handler+0x1e4>)
 8005d42:	781c      	ldrb	r4, [r3, #0]
 8005d44:	b90c      	cbnz	r4, 8005d4a <pulse_posedge_handler+0xe>

#endif

	}

}
 8005d46:	b003      	add	sp, #12
 8005d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tim11_count = htim11.Instance->CNT; //read TIM11 counter value, used for integral calculations
 8005d4a:	4f76      	ldr	r7, [pc, #472]	; (8005f24 <pulse_posedge_handler+0x1e8>)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005d50:	4e75      	ldr	r6, [pc, #468]	; (8005f28 <pulse_posedge_handler+0x1ec>)
 8005d52:	6035      	str	r5, [r6, #0]
		calc_RollPitchYaw(tim11_count);
 8005d54:	4628      	mov	r0, r5
 8005d56:	f7fc f977 	bl	8002048 <calc_RollPitchYaw>
		tim11_count = htim11.Instance->CNT; //read TIM11 counter value, used for integral calculations
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005d5e:	6030      	str	r0, [r6, #0]
		volatile int deltat = tim2-tim1;
 8005d60:	1b40      	subs	r0, r0, r5
 8005d62:	9001      	str	r0, [sp, #4]
		imu_pitch = get_pitch();
 8005d64:	f7fb f900 	bl	8000f68 <get_pitch>
 8005d68:	4b70      	ldr	r3, [pc, #448]	; (8005f2c <pulse_posedge_handler+0x1f0>)
 8005d6a:	ed83 0a00 	vstr	s0, [r3]
		imu_roll = get_roll();
 8005d6e:	f7fb f8f5 	bl	8000f5c <get_roll>
 8005d72:	4b6f      	ldr	r3, [pc, #444]	; (8005f30 <pulse_posedge_handler+0x1f4>)
 8005d74:	ed83 0a00 	vstr	s0, [r3]
		imu_yaw = get_yaw();
 8005d78:	f7fb f8fc 	bl	8000f74 <get_yaw>
 8005d7c:	4b6d      	ldr	r3, [pc, #436]	; (8005f34 <pulse_posedge_handler+0x1f8>)
 8005d7e:	ed83 0a00 	vstr	s0, [r3]
		if (imu_yaw > 0 && !done) {
 8005d82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8a:	f340 80ae 	ble.w	8005eea <pulse_posedge_handler+0x1ae>
			imu_yaw -= 180.0f;
 8005d8e:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8005f38 <pulse_posedge_handler+0x1fc>
 8005d92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005d96:	ed83 0a00 	vstr	s0, [r3]
		if (imu_yaw < 0 && !done) {
 8005d9a:	4b66      	ldr	r3, [pc, #408]	; (8005f34 <pulse_posedge_handler+0x1f8>)
 8005d9c:	edd3 7a00 	vldr	s15, [r3]
 8005da0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da8:	f100 80a1 	bmi.w	8005eee <pulse_posedge_handler+0x1b2>
		if (airmode) {
 8005dac:	4b63      	ldr	r3, [pc, #396]	; (8005f3c <pulse_posedge_handler+0x200>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80a6 	beq.w	8005f02 <pulse_posedge_handler+0x1c6>
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, 0);
 8005db6:	eddf 0a62 	vldr	s1, [pc, #392]	; 8005f40 <pulse_posedge_handler+0x204>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	4b5b      	ldr	r3, [pc, #364]	; (8005f2c <pulse_posedge_handler+0x1f0>)
 8005dbe:	ed93 0a00 	vldr	s0, [r3]
 8005dc2:	f7fc fc27 	bl	8002614 <pid_calculate_pitch>
 8005dc6:	4b5f      	ldr	r3, [pc, #380]	; (8005f44 <pulse_posedge_handler+0x208>)
 8005dc8:	ed83 0a00 	vstr	s0, [r3]
			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 8005dcc:	4b5e      	ldr	r3, [pc, #376]	; (8005f48 <pulse_posedge_handler+0x20c>)
 8005dce:	edd3 0a00 	vldr	s1, [r3]
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	4b56      	ldr	r3, [pc, #344]	; (8005f30 <pulse_posedge_handler+0x1f4>)
 8005dd6:	ed93 0a00 	vldr	s0, [r3]
 8005dda:	f7fc fb9d 	bl	8002518 <pid_calculate_roll>
 8005dde:	4b5b      	ldr	r3, [pc, #364]	; (8005f4c <pulse_posedge_handler+0x210>)
 8005de0:	ed83 0a00 	vstr	s0, [r3]
			pid_output_yaw = pid_calculate_yaw(imu_yaw, 0, yaw_setpoint);
 8005de4:	4b5a      	ldr	r3, [pc, #360]	; (8005f50 <pulse_posedge_handler+0x214>)
 8005de6:	edd3 0a00 	vldr	s1, [r3]
 8005dea:	2000      	movs	r0, #0
 8005dec:	4b51      	ldr	r3, [pc, #324]	; (8005f34 <pulse_posedge_handler+0x1f8>)
 8005dee:	ed93 0a00 	vldr	s0, [r3]
 8005df2:	f7fc fc8d 	bl	8002710 <pid_calculate_yaw>
 8005df6:	4b57      	ldr	r3, [pc, #348]	; (8005f54 <pulse_posedge_handler+0x218>)
 8005df8:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 8005dfc:	4b56      	ldr	r3, [pc, #344]	; (8005f58 <pulse_posedge_handler+0x21c>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	4b52      	ldr	r3, [pc, #328]	; (8005f4c <pulse_posedge_handler+0x210>)
 8005e02:	edd3 7a00 	vldr	s15, [r3]
 8005e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e0a:	ee17 1a90 	vmov	r1, s15
 8005e0e:	1a42      	subs	r2, r0, r1
 8005e10:	4b4c      	ldr	r3, [pc, #304]	; (8005f44 <pulse_posedge_handler+0x208>)
 8005e12:	edd3 7a00 	vldr	s15, [r3]
 8005e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e1a:	ee17 3a90 	vmov	r3, s15
 8005e1e:	1ad4      	subs	r4, r2, r3
 8005e20:	4d4e      	ldr	r5, [pc, #312]	; (8005f5c <pulse_posedge_handler+0x220>)
 8005e22:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 8005e24:	441a      	add	r2, r3
 8005e26:	4d4e      	ldr	r5, [pc, #312]	; (8005f60 <pulse_posedge_handler+0x224>)
 8005e28:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 8005e2a:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 8005e2c:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 8005e2e:	4d4d      	ldr	r5, [pc, #308]	; (8005f64 <pulse_posedge_handler+0x228>)
 8005e30:	6028      	str	r0, [r5, #0]
				+ (int) pid_output_pitch;
 8005e32:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 8005e34:	494c      	ldr	r1, [pc, #304]	; (8005f68 <pulse_posedge_handler+0x22c>)
 8005e36:	600b      	str	r3, [r1, #0]
		if (esc1_total < ESC_MIN) {
 8005e38:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8005e3c:	428c      	cmp	r4, r1
 8005e3e:	dc03      	bgt.n	8005e48 <pulse_posedge_handler+0x10c>
			esc1_total = ESC_MIN;
 8005e40:	4946      	ldr	r1, [pc, #280]	; (8005f5c <pulse_posedge_handler+0x220>)
 8005e42:	f240 44e2 	movw	r4, #1250	; 0x4e2
 8005e46:	600c      	str	r4, [r1, #0]
		if (esc1_total > ESC_MAX) {
 8005e48:	4944      	ldr	r1, [pc, #272]	; (8005f5c <pulse_posedge_handler+0x220>)
 8005e4a:	680c      	ldr	r4, [r1, #0]
 8005e4c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8005e50:	428c      	cmp	r4, r1
 8005e52:	dd03      	ble.n	8005e5c <pulse_posedge_handler+0x120>
			esc1_total = ESC_MAX;
 8005e54:	4941      	ldr	r1, [pc, #260]	; (8005f5c <pulse_posedge_handler+0x220>)
 8005e56:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8005e5a:	600c      	str	r4, [r1, #0]
		if (esc2_total < ESC_MIN) {
 8005e5c:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8005e60:	428a      	cmp	r2, r1
 8005e62:	dc03      	bgt.n	8005e6c <pulse_posedge_handler+0x130>
			esc2_total = ESC_MIN;
 8005e64:	4a3e      	ldr	r2, [pc, #248]	; (8005f60 <pulse_posedge_handler+0x224>)
 8005e66:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8005e6a:	6011      	str	r1, [r2, #0]
		if (esc2_total > ESC_MAX) {
 8005e6c:	4a3c      	ldr	r2, [pc, #240]	; (8005f60 <pulse_posedge_handler+0x224>)
 8005e6e:	6811      	ldr	r1, [r2, #0]
 8005e70:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005e74:	4291      	cmp	r1, r2
 8005e76:	dd03      	ble.n	8005e80 <pulse_posedge_handler+0x144>
			esc2_total = ESC_MAX;
 8005e78:	4a39      	ldr	r2, [pc, #228]	; (8005f60 <pulse_posedge_handler+0x224>)
 8005e7a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8005e7e:	6011      	str	r1, [r2, #0]
		if (esc3_total < ESC_MIN) {
 8005e80:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8005e84:	4290      	cmp	r0, r2
 8005e86:	dc03      	bgt.n	8005e90 <pulse_posedge_handler+0x154>
			esc3_total = ESC_MIN;
 8005e88:	4a36      	ldr	r2, [pc, #216]	; (8005f64 <pulse_posedge_handler+0x228>)
 8005e8a:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8005e8e:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 8005e90:	4a34      	ldr	r2, [pc, #208]	; (8005f64 <pulse_posedge_handler+0x228>)
 8005e92:	6811      	ldr	r1, [r2, #0]
 8005e94:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005e98:	4291      	cmp	r1, r2
 8005e9a:	dd03      	ble.n	8005ea4 <pulse_posedge_handler+0x168>
			esc3_total = ESC_MAX;
 8005e9c:	4a31      	ldr	r2, [pc, #196]	; (8005f64 <pulse_posedge_handler+0x228>)
 8005e9e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8005ea2:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 8005ea4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	dc03      	bgt.n	8005eb4 <pulse_posedge_handler+0x178>
			esc4_total = ESC_MIN;
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <pulse_posedge_handler+0x22c>)
 8005eae:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8005eb2:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 8005eb4:	4b2c      	ldr	r3, [pc, #176]	; (8005f68 <pulse_posedge_handler+0x22c>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	dd03      	ble.n	8005ec8 <pulse_posedge_handler+0x18c>
			esc4_total = ESC_MAX;
 8005ec0:	4b29      	ldr	r3, [pc, #164]	; (8005f68 <pulse_posedge_handler+0x22c>)
 8005ec2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005ec6:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8005ec8:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <pulse_posedge_handler+0x220>)
 8005eca:	8818      	ldrh	r0, [r3, #0]
 8005ecc:	f7ff fec2 	bl	8005c54 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8005ed0:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <pulse_posedge_handler+0x224>)
 8005ed2:	8818      	ldrh	r0, [r3, #0]
 8005ed4:	f7ff fec4 	bl	8005c60 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8005ed8:	4b22      	ldr	r3, [pc, #136]	; (8005f64 <pulse_posedge_handler+0x228>)
 8005eda:	8818      	ldrh	r0, [r3, #0]
 8005edc:	f7ff fec6 	bl	8005c6c <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8005ee0:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <pulse_posedge_handler+0x22c>)
 8005ee2:	8818      	ldrh	r0, [r3, #0]
 8005ee4:	f7ff fec8 	bl	8005c78 <PWM4_Set>
}
 8005ee8:	e72d      	b.n	8005d46 <pulse_posedge_handler+0xa>
		bool done = 0;
 8005eea:	2400      	movs	r4, #0
 8005eec:	e755      	b.n	8005d9a <pulse_posedge_handler+0x5e>
		if (imu_yaw < 0 && !done) {
 8005eee:	2c00      	cmp	r4, #0
 8005ef0:	f47f af5c 	bne.w	8005dac <pulse_posedge_handler+0x70>
			imu_yaw += 180.0f;
 8005ef4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005f38 <pulse_posedge_handler+0x1fc>
 8005ef8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005efc:	edc3 7a00 	vstr	s15, [r3]
 8005f00:	e754      	b.n	8005dac <pulse_posedge_handler+0x70>
			pid_output_roll = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	4a11      	ldr	r2, [pc, #68]	; (8005f4c <pulse_posedge_handler+0x210>)
 8005f06:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 8005f08:	4a0e      	ldr	r2, [pc, #56]	; (8005f44 <pulse_posedge_handler+0x208>)
 8005f0a:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 8005f0c:	4a11      	ldr	r2, [pc, #68]	; (8005f54 <pulse_posedge_handler+0x218>)
 8005f0e:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8005f10:	f7fc fb6e 	bl	80025f0 <reset_pid_roll>
			reset_pid_pitch();
 8005f14:	f7fc fbea 	bl	80026ec <reset_pid_pitch>
			reset_pid_yaw();
 8005f18:	f7fc fc66 	bl	80027e8 <reset_pid_yaw>
 8005f1c:	e76e      	b.n	8005dfc <pulse_posedge_handler+0xc0>
 8005f1e:	bf00      	nop
 8005f20:	200002f8 	.word	0x200002f8
 8005f24:	200005d8 	.word	0x200005d8
 8005f28:	20000310 	.word	0x20000310
 8005f2c:	20000620 	.word	0x20000620
 8005f30:	2000061c 	.word	0x2000061c
 8005f34:	20000414 	.word	0x20000414
 8005f38:	43340000 	.word	0x43340000
 8005f3c:	200002e4 	.word	0x200002e4
 8005f40:	00000000 	.word	0x00000000
 8005f44:	200002fc 	.word	0x200002fc
 8005f48:	20000308 	.word	0x20000308
 8005f4c:	20000300 	.word	0x20000300
 8005f50:	20000314 	.word	0x20000314
 8005f54:	20000304 	.word	0x20000304
 8005f58:	2000030c 	.word	0x2000030c
 8005f5c:	200002e8 	.word	0x200002e8
 8005f60:	200002ec 	.word	0x200002ec
 8005f64:	200002f0 	.word	0x200002f0
 8005f68:	200002f4 	.word	0x200002f4

08005f6c <__io_putchar>:
/*
 *	Some functions to allow the program to use printf,
 *	from http://www.emcu.eu/how-to-implement-printf-for-send-message-via-usb-on-stm32-nucleo-boards-using-atollic/
 *
 */
int __io_putchar(int ch) {
 8005f6c:	b510      	push	{r4, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	4604      	mov	r4, r0
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8005f72:	a902      	add	r1, sp, #8
 8005f74:	f801 0d04 	strb.w	r0, [r1, #-4]!

	HAL_UART_Transmit(&huart6, &*c, 1, 10);
 8005f78:	230a      	movs	r3, #10
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4802      	ldr	r0, [pc, #8]	; (8005f88 <__io_putchar+0x1c>)
 8005f7e:	f7ff fc11 	bl	80057a4 <HAL_UART_Transmit>
	return ch;
}
 8005f82:	4620      	mov	r0, r4
 8005f84:	b002      	add	sp, #8
 8005f86:	bd10      	pop	{r4, pc}
 8005f88:	20000624 	.word	0x20000624

08005f8c <_write>:

int _write(int file, char *ptr, int len) {
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	4616      	mov	r6, r2
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005f90:	2400      	movs	r4, #0
 8005f92:	e005      	b.n	8005fa0 <_write+0x14>
		__io_putchar(*ptr++);
 8005f94:	1c4d      	adds	r5, r1, #1
 8005f96:	7808      	ldrb	r0, [r1, #0]
 8005f98:	f7ff ffe8 	bl	8005f6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005f9c:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8005f9e:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005fa0:	42b4      	cmp	r4, r6
 8005fa2:	dbf7      	blt.n	8005f94 <_write+0x8>
	}
	return len;
}
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}

08005fa8 <HAL_GPIO_EXTI_Callback>:

//GPIO interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

//GPIO pin configured to capture rising edge interrupt of PWM signals
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 8005fa8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005fac:	d000      	beq.n	8005fb0 <HAL_GPIO_EXTI_Callback+0x8>
 8005fae:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005fb0:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 8005fb2:	4b03      	ldr	r3, [pc, #12]	; (8005fc0 <HAL_GPIO_EXTI_Callback+0x18>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	b903      	cbnz	r3, 8005fba <HAL_GPIO_EXTI_Callback+0x12>

	if (GPIO_Pin == kill_Pin && main_loop) {
		//kill();
	}

}
 8005fb8:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 8005fba:	f7ff febf 	bl	8005d3c <pulse_posedge_handler>
}
 8005fbe:	e7fb      	b.n	8005fb8 <HAL_GPIO_EXTI_Callback+0x10>
 8005fc0:	200002f8 	.word	0x200002f8

08005fc4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005fc4:	4770      	bx	lr
	...

08005fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fc8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fca:	2100      	movs	r1, #0
 8005fcc:	9100      	str	r1, [sp, #0]
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <HAL_MspInit+0x34>)
 8005fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fd6:	645a      	str	r2, [r3, #68]	; 0x44
 8005fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fda:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005fde:	9200      	str	r2, [sp, #0]
 8005fe0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fe2:	9101      	str	r1, [sp, #4]
 8005fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fe6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff2:	9301      	str	r3, [sp, #4]
 8005ff4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ff6:	b002      	add	sp, #8
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40023800 	.word	0x40023800

08006000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006000:	b500      	push	{lr}
 8006002:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006004:	2300      	movs	r3, #0
 8006006:	9303      	str	r3, [sp, #12]
 8006008:	9304      	str	r3, [sp, #16]
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	9306      	str	r3, [sp, #24]
 800600e:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8006010:	6802      	ldr	r2, [r0, #0]
 8006012:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006016:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800601a:	429a      	cmp	r2, r3
 800601c:	d002      	beq.n	8006024 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800601e:	b009      	add	sp, #36	; 0x24
 8006020:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006024:	2100      	movs	r1, #0
 8006026:	9101      	str	r1, [sp, #4]
 8006028:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800602c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800602e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006032:	645a      	str	r2, [r3, #68]	; 0x44
 8006034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006036:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800603a:	9201      	str	r2, [sp, #4]
 800603c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800603e:	9102      	str	r1, [sp, #8]
 8006040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	9302      	str	r3, [sp, #8]
 8006050:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006052:	2380      	movs	r3, #128	; 0x80
 8006054:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006056:	2303      	movs	r3, #3
 8006058:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800605a:	a903      	add	r1, sp, #12
 800605c:	4801      	ldr	r0, [pc, #4]	; (8006064 <HAL_ADC_MspInit+0x64>)
 800605e:	f7fd f861 	bl	8003124 <HAL_GPIO_Init>
}
 8006062:	e7dc      	b.n	800601e <HAL_ADC_MspInit+0x1e>
 8006064:	40020000 	.word	0x40020000

08006068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800606e:	2300      	movs	r3, #0
 8006070:	9303      	str	r3, [sp, #12]
 8006072:	9304      	str	r3, [sp, #16]
 8006074:	9305      	str	r3, [sp, #20]
 8006076:	9306      	str	r3, [sp, #24]
 8006078:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 800607a:	6802      	ldr	r2, [r0, #0]
 800607c:	4b42      	ldr	r3, [pc, #264]	; (8006188 <HAL_I2C_MspInit+0x120>)
 800607e:	429a      	cmp	r2, r3
 8006080:	d002      	beq.n	8006088 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006082:	b009      	add	sp, #36	; 0x24
 8006084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006088:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800608a:	2500      	movs	r5, #0
 800608c:	9501      	str	r5, [sp, #4]
 800608e:	4e3f      	ldr	r6, [pc, #252]	; (800618c <HAL_I2C_MspInit+0x124>)
 8006090:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8006092:	f043 0302 	orr.w	r3, r3, #2
 8006096:	6333      	str	r3, [r6, #48]	; 0x30
 8006098:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80060a2:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80060a6:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060a8:	f04f 0b12 	mov.w	fp, #18
 80060ac:	f8cd b010 	str.w	fp, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060b0:	f04f 0a01 	mov.w	sl, #1
 80060b4:	f8cd a014 	str.w	sl, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060b8:	f04f 0903 	mov.w	r9, #3
 80060bc:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80060c0:	2304      	movs	r3, #4
 80060c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060c4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80061a0 <HAL_I2C_MspInit+0x138>
 80060c8:	a903      	add	r1, sp, #12
 80060ca:	4640      	mov	r0, r8
 80060cc:	f7fd f82a 	bl	8003124 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80060d0:	2308      	movs	r3, #8
 80060d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060d4:	f8cd b010 	str.w	fp, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060d8:	f8cd a014 	str.w	sl, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060dc:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80060e0:	2309      	movs	r3, #9
 80060e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060e4:	a903      	add	r1, sp, #12
 80060e6:	4640      	mov	r0, r8
 80060e8:	f7fd f81c 	bl	8003124 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80060ec:	9502      	str	r5, [sp, #8]
 80060ee:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80060f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060f4:	6433      	str	r3, [r6, #64]	; 0x40
 80060f6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80060f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060fc:	9302      	str	r3, [sp, #8]
 80060fe:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8006100:	4823      	ldr	r0, [pc, #140]	; (8006190 <HAL_I2C_MspInit+0x128>)
 8006102:	4b24      	ldr	r3, [pc, #144]	; (8006194 <HAL_I2C_MspInit+0x12c>)
 8006104:	6003      	str	r3, [r0, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8006106:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 800610a:	6043      	str	r3, [r0, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800610c:	6085      	str	r5, [r0, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800610e:	60c5      	str	r5, [r0, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006110:	6107      	str	r7, [r0, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006112:	6145      	str	r5, [r0, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006114:	6185      	str	r5, [r0, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8006116:	61c5      	str	r5, [r0, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006118:	6205      	str	r5, [r0, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800611a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800611c:	f7fc fe5a 	bl	8002dd4 <HAL_DMA_Init>
 8006120:	bb58      	cbnz	r0, 800617a <HAL_I2C_MspInit+0x112>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8006122:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <HAL_I2C_MspInit+0x128>)
 8006124:	63a3      	str	r3, [r4, #56]	; 0x38
 8006126:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8006128:	481b      	ldr	r0, [pc, #108]	; (8006198 <HAL_I2C_MspInit+0x130>)
 800612a:	4b1c      	ldr	r3, [pc, #112]	; (800619c <HAL_I2C_MspInit+0x134>)
 800612c:	6003      	str	r3, [r0, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800612e:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8006132:	6043      	str	r3, [r0, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006134:	2340      	movs	r3, #64	; 0x40
 8006136:	6083      	str	r3, [r0, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006138:	2300      	movs	r3, #0
 800613a:	60c3      	str	r3, [r0, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800613c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006140:	6102      	str	r2, [r0, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006142:	6143      	str	r3, [r0, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006144:	6183      	str	r3, [r0, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8006146:	61c3      	str	r3, [r0, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006148:	6203      	str	r3, [r0, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800614a:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800614c:	f7fc fe42 	bl	8002dd4 <HAL_DMA_Init>
 8006150:	b9b0      	cbnz	r0, 8006180 <HAL_I2C_MspInit+0x118>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8006152:	4b11      	ldr	r3, [pc, #68]	; (8006198 <HAL_I2C_MspInit+0x130>)
 8006154:	6363      	str	r3, [r4, #52]	; 0x34
 8006156:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8006158:	2200      	movs	r2, #0
 800615a:	4611      	mov	r1, r2
 800615c:	2021      	movs	r0, #33	; 0x21
 800615e:	f7fc fd65 	bl	8002c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006162:	2021      	movs	r0, #33	; 0x21
 8006164:	f7fc fd96 	bl	8002c94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8006168:	2200      	movs	r2, #0
 800616a:	4611      	mov	r1, r2
 800616c:	2022      	movs	r0, #34	; 0x22
 800616e:	f7fc fd5d 	bl	8002c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006172:	2022      	movs	r0, #34	; 0x22
 8006174:	f7fc fd8e 	bl	8002c94 <HAL_NVIC_EnableIRQ>
}
 8006178:	e783      	b.n	8006082 <HAL_I2C_MspInit+0x1a>
      Error_Handler();
 800617a:	f7ff ff23 	bl	8005fc4 <Error_Handler>
 800617e:	e7d0      	b.n	8006122 <HAL_I2C_MspInit+0xba>
      Error_Handler();
 8006180:	f7ff ff20 	bl	8005fc4 <Error_Handler>
 8006184:	e7e5      	b.n	8006152 <HAL_I2C_MspInit+0xea>
 8006186:	bf00      	nop
 8006188:	40005800 	.word	0x40005800
 800618c:	40023800 	.word	0x40023800
 8006190:	200004b0 	.word	0x200004b0
 8006194:	40026040 	.word	0x40026040
 8006198:	20000510 	.word	0x20000510
 800619c:	400260b8 	.word	0x400260b8
 80061a0:	40020400 	.word	0x40020400

080061a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80061a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a8:	2300      	movs	r3, #0
 80061aa:	9303      	str	r3, [sp, #12]
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	9306      	str	r3, [sp, #24]
 80061b2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 80061b4:	6802      	ldr	r2, [r0, #0]
 80061b6:	4b1f      	ldr	r3, [pc, #124]	; (8006234 <HAL_SPI_MspInit+0x90>)
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d001      	beq.n	80061c0 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80061bc:	b009      	add	sp, #36	; 0x24
 80061be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061c0:	2400      	movs	r4, #0
 80061c2:	9400      	str	r4, [sp, #0]
 80061c4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80061c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40
 80061d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80061d6:	9200      	str	r2, [sp, #0]
 80061d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061da:	9401      	str	r4, [sp, #4]
 80061dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061de:	f042 0204 	orr.w	r2, r2, #4
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
 80061e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e6:	f002 0204 	and.w	r2, r2, #4
 80061ea:	9201      	str	r2, [sp, #4]
 80061ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ee:	9402      	str	r4, [sp, #8]
 80061f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f2:	f042 0202 	orr.w	r2, r2, #2
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	9302      	str	r3, [sp, #8]
 8006200:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006202:	2304      	movs	r3, #4
 8006204:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006206:	2702      	movs	r7, #2
 8006208:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800620a:	2603      	movs	r6, #3
 800620c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800620e:	2505      	movs	r5, #5
 8006210:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006212:	a903      	add	r1, sp, #12
 8006214:	4808      	ldr	r0, [pc, #32]	; (8006238 <HAL_SPI_MspInit+0x94>)
 8006216:	f7fc ff85 	bl	8003124 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800621a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800621e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006220:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006222:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006224:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006226:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006228:	a903      	add	r1, sp, #12
 800622a:	4804      	ldr	r0, [pc, #16]	; (800623c <HAL_SPI_MspInit+0x98>)
 800622c:	f7fc ff7a 	bl	8003124 <HAL_GPIO_Init>
}
 8006230:	e7c4      	b.n	80061bc <HAL_SPI_MspInit+0x18>
 8006232:	bf00      	nop
 8006234:	40003800 	.word	0x40003800
 8006238:	40020800 	.word	0x40020800
 800623c:	40020400 	.word	0x40020400

08006240 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 8006240:	6802      	ldr	r2, [r0, #0]
 8006242:	4b09      	ldr	r3, [pc, #36]	; (8006268 <HAL_TIM_PWM_MspInit+0x28>)
 8006244:	429a      	cmp	r2, r3
 8006246:	d000      	beq.n	800624a <HAL_TIM_PWM_MspInit+0xa>
 8006248:	4770      	bx	lr
{
 800624a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800624c:	2300      	movs	r3, #0
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <HAL_TIM_PWM_MspInit+0x2c>)
 8006252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006254:	f042 0204 	orr.w	r2, r2, #4
 8006258:	641a      	str	r2, [r3, #64]	; 0x40
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006264:	b002      	add	sp, #8
 8006266:	4770      	bx	lr
 8006268:	40000800 	.word	0x40000800
 800626c:	40023800 	.word	0x40023800

08006270 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8006270:	6802      	ldr	r2, [r0, #0]
 8006272:	4b09      	ldr	r3, [pc, #36]	; (8006298 <HAL_TIM_Base_MspInit+0x28>)
 8006274:	429a      	cmp	r2, r3
 8006276:	d000      	beq.n	800627a <HAL_TIM_Base_MspInit+0xa>
 8006278:	4770      	bx	lr
{
 800627a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800627c:	2300      	movs	r3, #0
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <HAL_TIM_Base_MspInit+0x2c>)
 8006282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006284:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006288:	645a      	str	r2, [r3, #68]	; 0x44
 800628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8006294:	b002      	add	sp, #8
 8006296:	4770      	bx	lr
 8006298:	40014800 	.word	0x40014800
 800629c:	40023800 	.word	0x40023800

080062a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80062a0:	b500      	push	{lr}
 80062a2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a4:	2300      	movs	r3, #0
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	9302      	str	r3, [sp, #8]
 80062aa:	9303      	str	r3, [sp, #12]
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 80062b0:	6802      	ldr	r2, [r0, #0]
 80062b2:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <HAL_TIM_MspPostInit+0x4c>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d002      	beq.n	80062be <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80062b8:	b007      	add	sp, #28
 80062ba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062be:	2300      	movs	r3, #0
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_TIM_MspPostInit+0x50>)
 80062c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c6:	f042 0202 	orr.w	r2, r2, #2
 80062ca:	631a      	str	r2, [r3, #48]	; 0x30
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80062d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80062da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062dc:	2302      	movs	r3, #2
 80062de:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80062e0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062e2:	a901      	add	r1, sp, #4
 80062e4:	4803      	ldr	r0, [pc, #12]	; (80062f4 <HAL_TIM_MspPostInit+0x54>)
 80062e6:	f7fc ff1d 	bl	8003124 <HAL_GPIO_Init>
}
 80062ea:	e7e5      	b.n	80062b8 <HAL_TIM_MspPostInit+0x18>
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40023800 	.word	0x40023800
 80062f4:	40020400 	.word	0x40020400

080062f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80062f8:	b500      	push	{lr}
 80062fa:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062fc:	2300      	movs	r3, #0
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	9306      	str	r3, [sp, #24]
 8006302:	9307      	str	r3, [sp, #28]
 8006304:	9308      	str	r3, [sp, #32]
 8006306:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 8006308:	6803      	ldr	r3, [r0, #0]
 800630a:	4a29      	ldr	r2, [pc, #164]	; (80063b0 <HAL_UART_MspInit+0xb8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d005      	beq.n	800631c <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8006310:	4a28      	ldr	r2, [pc, #160]	; (80063b4 <HAL_UART_MspInit+0xbc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d027      	beq.n	8006366 <HAL_UART_MspInit+0x6e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006316:	b00b      	add	sp, #44	; 0x2c
 8006318:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800631c:	2100      	movs	r1, #0
 800631e:	9101      	str	r1, [sp, #4]
 8006320:	4b25      	ldr	r3, [pc, #148]	; (80063b8 <HAL_UART_MspInit+0xc0>)
 8006322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006324:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006328:	641a      	str	r2, [r3, #64]	; 0x40
 800632a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800632c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006330:	9201      	str	r2, [sp, #4]
 8006332:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006334:	9102      	str	r1, [sp, #8]
 8006336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006338:	f042 0201 	orr.w	r2, r2, #1
 800633c:	631a      	str	r2, [r3, #48]	; 0x30
 800633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	9302      	str	r3, [sp, #8]
 8006346:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006348:	230c      	movs	r3, #12
 800634a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800634c:	2302      	movs	r3, #2
 800634e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006350:	2301      	movs	r3, #1
 8006352:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006354:	2303      	movs	r3, #3
 8006356:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006358:	2307      	movs	r3, #7
 800635a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800635c:	a905      	add	r1, sp, #20
 800635e:	4817      	ldr	r0, [pc, #92]	; (80063bc <HAL_UART_MspInit+0xc4>)
 8006360:	f7fc fee0 	bl	8003124 <HAL_GPIO_Init>
 8006364:	e7d7      	b.n	8006316 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006366:	2100      	movs	r1, #0
 8006368:	9103      	str	r1, [sp, #12]
 800636a:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <HAL_UART_MspInit+0xc0>)
 800636c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800636e:	f042 0220 	orr.w	r2, r2, #32
 8006372:	645a      	str	r2, [r3, #68]	; 0x44
 8006374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006376:	f002 0220 	and.w	r2, r2, #32
 800637a:	9203      	str	r2, [sp, #12]
 800637c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800637e:	9104      	str	r1, [sp, #16]
 8006380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006382:	f042 0204 	orr.w	r2, r2, #4
 8006386:	631a      	str	r2, [r3, #48]	; 0x30
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	9304      	str	r3, [sp, #16]
 8006390:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006392:	23c0      	movs	r3, #192	; 0xc0
 8006394:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006396:	2302      	movs	r3, #2
 8006398:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800639a:	2301      	movs	r3, #1
 800639c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800639e:	2303      	movs	r3, #3
 80063a0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80063a2:	2308      	movs	r3, #8
 80063a4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063a6:	a905      	add	r1, sp, #20
 80063a8:	4805      	ldr	r0, [pc, #20]	; (80063c0 <HAL_UART_MspInit+0xc8>)
 80063aa:	f7fc febb 	bl	8003124 <HAL_GPIO_Init>
}
 80063ae:	e7b2      	b.n	8006316 <HAL_UART_MspInit+0x1e>
 80063b0:	40004400 	.word	0x40004400
 80063b4:	40011400 	.word	0x40011400
 80063b8:	40023800 	.word	0x40023800
 80063bc:	40020000 	.word	0x40020000
 80063c0:	40020800 	.word	0x40020800

080063c4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80063c4:	4770      	bx	lr

080063c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063c6:	e7fe      	b.n	80063c6 <HardFault_Handler>

080063c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063c8:	e7fe      	b.n	80063c8 <MemManage_Handler>

080063ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063ca:	e7fe      	b.n	80063ca <BusFault_Handler>

080063cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063cc:	e7fe      	b.n	80063cc <UsageFault_Handler>

080063ce <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063ce:	4770      	bx	lr

080063d0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063d0:	4770      	bx	lr

080063d2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063d2:	4770      	bx	lr

080063d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063d6:	f7fc fa59 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063da:	bd08      	pop	{r3, pc}

080063dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80063dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80063de:	2010      	movs	r0, #16
 80063e0:	f7fc ff82 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80063e4:	bd08      	pop	{r3, pc}
	...

080063e8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80063e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80063ea:	4802      	ldr	r0, [pc, #8]	; (80063f4 <DMA1_Stream2_IRQHandler+0xc>)
 80063ec:	f7fc fda6 	bl	8002f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80063f0:	bd08      	pop	{r3, pc}
 80063f2:	bf00      	nop
 80063f4:	200004b0 	.word	0x200004b0

080063f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80063f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80063fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80063fe:	f7fc ff73 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006402:	bd08      	pop	{r3, pc}

08006404 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8006404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8006406:	4802      	ldr	r0, [pc, #8]	; (8006410 <I2C2_EV_IRQHandler+0xc>)
 8006408:	f7fe f954 	bl	80046b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800640c:	bd08      	pop	{r3, pc}
 800640e:	bf00      	nop
 8006410:	20000344 	.word	0x20000344

08006414 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8006414:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8006416:	4802      	ldr	r0, [pc, #8]	; (8006420 <I2C2_ER_IRQHandler+0xc>)
 8006418:	f7fe fa12 	bl	8004840 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800641c:	bd08      	pop	{r3, pc}
 800641e:	bf00      	nop
 8006420:	20000344 	.word	0x20000344

08006424 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8006424:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8006426:	4802      	ldr	r0, [pc, #8]	; (8006430 <DMA1_Stream7_IRQHandler+0xc>)
 8006428:	f7fc fd88 	bl	8002f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800642c:	bd08      	pop	{r3, pc}
 800642e:	bf00      	nop
 8006430:	20000510 	.word	0x20000510

08006434 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	460d      	mov	r5, r1
 8006438:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800643a:	2400      	movs	r4, #0
 800643c:	e004      	b.n	8006448 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 800643e:	f3af 8000 	nop.w
 8006442:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006444:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8006446:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006448:	42b4      	cmp	r4, r6
 800644a:	dbf8      	blt.n	800643e <_read+0xa>
	}

return len;
}
 800644c:	4630      	mov	r0, r6
 800644e:	bd70      	pop	{r4, r5, r6, pc}

08006450 <_close>:
}

int _close(int file)
{
	return -1;
}
 8006450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006454:	4770      	bx	lr

08006456 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800645a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800645c:	2000      	movs	r0, #0
 800645e:	4770      	bx	lr

08006460 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006460:	2001      	movs	r0, #1
 8006462:	4770      	bx	lr

08006464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006464:	2000      	movs	r0, #0
 8006466:	4770      	bx	lr

08006468 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006468:	b508      	push	{r3, lr}
 800646a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800646c:	4a0b      	ldr	r2, [pc, #44]	; (800649c <_sbrk+0x34>)
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	b142      	cbz	r2, 8006484 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8006472:	4a0a      	ldr	r2, [pc, #40]	; (800649c <_sbrk+0x34>)
 8006474:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8006476:	4403      	add	r3, r0
 8006478:	466a      	mov	r2, sp
 800647a:	4293      	cmp	r3, r2
 800647c:	d806      	bhi.n	800648c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800647e:	4a07      	ldr	r2, [pc, #28]	; (800649c <_sbrk+0x34>)
 8006480:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8006482:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8006484:	4a05      	ldr	r2, [pc, #20]	; (800649c <_sbrk+0x34>)
 8006486:	4906      	ldr	r1, [pc, #24]	; (80064a0 <_sbrk+0x38>)
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	e7f2      	b.n	8006472 <_sbrk+0xa>
		errno = ENOMEM;
 800648c:	f000 f85a 	bl	8006544 <__errno>
 8006490:	230c      	movs	r3, #12
 8006492:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006498:	e7f3      	b.n	8006482 <_sbrk+0x1a>
 800649a:	bf00      	nop
 800649c:	20000318 	.word	0x20000318
 80064a0:	200006d0 	.word	0x200006d0

080064a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064a4:	490f      	ldr	r1, [pc, #60]	; (80064e4 <SystemInit+0x40>)
 80064a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80064aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80064b2:	4b0d      	ldr	r3, [pc, #52]	; (80064e8 <SystemInit+0x44>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80064bc:	2000      	movs	r0, #0
 80064be:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80064c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80064cc:	4a07      	ldr	r2, [pc, #28]	; (80064ec <SystemInit+0x48>)
 80064ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80064d8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80064da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064de:	608b      	str	r3, [r1, #8]
#endif
}
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	e000ed00 	.word	0xe000ed00
 80064e8:	40023800 	.word	0x40023800
 80064ec:	24003010 	.word	0x24003010

080064f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80064f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006528 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80064f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80064f6:	e003      	b.n	8006500 <LoopCopyDataInit>

080064f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80064fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80064fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80064fe:	3104      	adds	r1, #4

08006500 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006500:	480b      	ldr	r0, [pc, #44]	; (8006530 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006504:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006506:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006508:	d3f6      	bcc.n	80064f8 <CopyDataInit>
  ldr  r2, =_sbss
 800650a:	4a0b      	ldr	r2, [pc, #44]	; (8006538 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800650c:	e002      	b.n	8006514 <LoopFillZerobss>

0800650e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800650e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006510:	f842 3b04 	str.w	r3, [r2], #4

08006514 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006514:	4b09      	ldr	r3, [pc, #36]	; (800653c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006516:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006518:	d3f9      	bcc.n	800650e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800651a:	f7ff ffc3 	bl	80064a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800651e:	f000 f817 	bl	8006550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006522:	f7ff fbaf 	bl	8005c84 <main>
  bx  lr    
 8006526:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006528:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800652c:	0800ae28 	.word	0x0800ae28
  ldr  r0, =_sdata
 8006530:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006534:	20000250 	.word	0x20000250
  ldr  r2, =_sbss
 8006538:	20000250 	.word	0x20000250
  ldr  r3, = _ebss
 800653c:	200006d0 	.word	0x200006d0

08006540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006540:	e7fe      	b.n	8006540 <ADC_IRQHandler>
	...

08006544 <__errno>:
 8006544:	4b01      	ldr	r3, [pc, #4]	; (800654c <__errno+0x8>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	2000007c 	.word	0x2000007c

08006550 <__libc_init_array>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4e0d      	ldr	r6, [pc, #52]	; (8006588 <__libc_init_array+0x38>)
 8006554:	4c0d      	ldr	r4, [pc, #52]	; (800658c <__libc_init_array+0x3c>)
 8006556:	1ba4      	subs	r4, r4, r6
 8006558:	10a4      	asrs	r4, r4, #2
 800655a:	2500      	movs	r5, #0
 800655c:	42a5      	cmp	r5, r4
 800655e:	d109      	bne.n	8006574 <__libc_init_array+0x24>
 8006560:	4e0b      	ldr	r6, [pc, #44]	; (8006590 <__libc_init_array+0x40>)
 8006562:	4c0c      	ldr	r4, [pc, #48]	; (8006594 <__libc_init_array+0x44>)
 8006564:	f004 f946 	bl	800a7f4 <_init>
 8006568:	1ba4      	subs	r4, r4, r6
 800656a:	10a4      	asrs	r4, r4, #2
 800656c:	2500      	movs	r5, #0
 800656e:	42a5      	cmp	r5, r4
 8006570:	d105      	bne.n	800657e <__libc_init_array+0x2e>
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006578:	4798      	blx	r3
 800657a:	3501      	adds	r5, #1
 800657c:	e7ee      	b.n	800655c <__libc_init_array+0xc>
 800657e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006582:	4798      	blx	r3
 8006584:	3501      	adds	r5, #1
 8006586:	e7f2      	b.n	800656e <__libc_init_array+0x1e>
 8006588:	0800ae20 	.word	0x0800ae20
 800658c:	0800ae20 	.word	0x0800ae20
 8006590:	0800ae20 	.word	0x0800ae20
 8006594:	0800ae24 	.word	0x0800ae24

08006598 <memcpy>:
 8006598:	b510      	push	{r4, lr}
 800659a:	1e43      	subs	r3, r0, #1
 800659c:	440a      	add	r2, r1
 800659e:	4291      	cmp	r1, r2
 80065a0:	d100      	bne.n	80065a4 <memcpy+0xc>
 80065a2:	bd10      	pop	{r4, pc}
 80065a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ac:	e7f7      	b.n	800659e <memcpy+0x6>

080065ae <memset>:
 80065ae:	4402      	add	r2, r0
 80065b0:	4603      	mov	r3, r0
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d100      	bne.n	80065b8 <memset+0xa>
 80065b6:	4770      	bx	lr
 80065b8:	f803 1b01 	strb.w	r1, [r3], #1
 80065bc:	e7f9      	b.n	80065b2 <memset+0x4>

080065be <__cvt>:
 80065be:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065c2:	ec55 4b10 	vmov	r4, r5, d0
 80065c6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80065c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065cc:	2d00      	cmp	r5, #0
 80065ce:	460e      	mov	r6, r1
 80065d0:	4691      	mov	r9, r2
 80065d2:	4619      	mov	r1, r3
 80065d4:	bfb8      	it	lt
 80065d6:	4622      	movlt	r2, r4
 80065d8:	462b      	mov	r3, r5
 80065da:	f027 0720 	bic.w	r7, r7, #32
 80065de:	bfbb      	ittet	lt
 80065e0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065e4:	461d      	movlt	r5, r3
 80065e6:	2300      	movge	r3, #0
 80065e8:	232d      	movlt	r3, #45	; 0x2d
 80065ea:	bfb8      	it	lt
 80065ec:	4614      	movlt	r4, r2
 80065ee:	2f46      	cmp	r7, #70	; 0x46
 80065f0:	700b      	strb	r3, [r1, #0]
 80065f2:	d004      	beq.n	80065fe <__cvt+0x40>
 80065f4:	2f45      	cmp	r7, #69	; 0x45
 80065f6:	d100      	bne.n	80065fa <__cvt+0x3c>
 80065f8:	3601      	adds	r6, #1
 80065fa:	2102      	movs	r1, #2
 80065fc:	e000      	b.n	8006600 <__cvt+0x42>
 80065fe:	2103      	movs	r1, #3
 8006600:	ab03      	add	r3, sp, #12
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	ab02      	add	r3, sp, #8
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	4632      	mov	r2, r6
 800660a:	4653      	mov	r3, sl
 800660c:	ec45 4b10 	vmov	d0, r4, r5
 8006610:	f000 fdfa 	bl	8007208 <_dtoa_r>
 8006614:	2f47      	cmp	r7, #71	; 0x47
 8006616:	4680      	mov	r8, r0
 8006618:	d102      	bne.n	8006620 <__cvt+0x62>
 800661a:	f019 0f01 	tst.w	r9, #1
 800661e:	d026      	beq.n	800666e <__cvt+0xb0>
 8006620:	2f46      	cmp	r7, #70	; 0x46
 8006622:	eb08 0906 	add.w	r9, r8, r6
 8006626:	d111      	bne.n	800664c <__cvt+0x8e>
 8006628:	f898 3000 	ldrb.w	r3, [r8]
 800662c:	2b30      	cmp	r3, #48	; 0x30
 800662e:	d10a      	bne.n	8006646 <__cvt+0x88>
 8006630:	2200      	movs	r2, #0
 8006632:	2300      	movs	r3, #0
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	f7fa fc48 	bl	8000ecc <__aeabi_dcmpeq>
 800663c:	b918      	cbnz	r0, 8006646 <__cvt+0x88>
 800663e:	f1c6 0601 	rsb	r6, r6, #1
 8006642:	f8ca 6000 	str.w	r6, [sl]
 8006646:	f8da 3000 	ldr.w	r3, [sl]
 800664a:	4499      	add	r9, r3
 800664c:	2200      	movs	r2, #0
 800664e:	2300      	movs	r3, #0
 8006650:	4620      	mov	r0, r4
 8006652:	4629      	mov	r1, r5
 8006654:	f7fa fc3a 	bl	8000ecc <__aeabi_dcmpeq>
 8006658:	b938      	cbnz	r0, 800666a <__cvt+0xac>
 800665a:	2230      	movs	r2, #48	; 0x30
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	454b      	cmp	r3, r9
 8006660:	d205      	bcs.n	800666e <__cvt+0xb0>
 8006662:	1c59      	adds	r1, r3, #1
 8006664:	9103      	str	r1, [sp, #12]
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	e7f8      	b.n	800665c <__cvt+0x9e>
 800666a:	f8cd 900c 	str.w	r9, [sp, #12]
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006672:	eba3 0308 	sub.w	r3, r3, r8
 8006676:	4640      	mov	r0, r8
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	b004      	add	sp, #16
 800667c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006680 <__exponent>:
 8006680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006682:	2900      	cmp	r1, #0
 8006684:	4604      	mov	r4, r0
 8006686:	bfba      	itte	lt
 8006688:	4249      	neglt	r1, r1
 800668a:	232d      	movlt	r3, #45	; 0x2d
 800668c:	232b      	movge	r3, #43	; 0x2b
 800668e:	2909      	cmp	r1, #9
 8006690:	f804 2b02 	strb.w	r2, [r4], #2
 8006694:	7043      	strb	r3, [r0, #1]
 8006696:	dd20      	ble.n	80066da <__exponent+0x5a>
 8006698:	f10d 0307 	add.w	r3, sp, #7
 800669c:	461f      	mov	r7, r3
 800669e:	260a      	movs	r6, #10
 80066a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80066a4:	fb06 1115 	mls	r1, r6, r5, r1
 80066a8:	3130      	adds	r1, #48	; 0x30
 80066aa:	2d09      	cmp	r5, #9
 80066ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066b0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80066b4:	4629      	mov	r1, r5
 80066b6:	dc09      	bgt.n	80066cc <__exponent+0x4c>
 80066b8:	3130      	adds	r1, #48	; 0x30
 80066ba:	3b02      	subs	r3, #2
 80066bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80066c0:	42bb      	cmp	r3, r7
 80066c2:	4622      	mov	r2, r4
 80066c4:	d304      	bcc.n	80066d0 <__exponent+0x50>
 80066c6:	1a10      	subs	r0, r2, r0
 80066c8:	b003      	add	sp, #12
 80066ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066cc:	4613      	mov	r3, r2
 80066ce:	e7e7      	b.n	80066a0 <__exponent+0x20>
 80066d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066d4:	f804 2b01 	strb.w	r2, [r4], #1
 80066d8:	e7f2      	b.n	80066c0 <__exponent+0x40>
 80066da:	2330      	movs	r3, #48	; 0x30
 80066dc:	4419      	add	r1, r3
 80066de:	7083      	strb	r3, [r0, #2]
 80066e0:	1d02      	adds	r2, r0, #4
 80066e2:	70c1      	strb	r1, [r0, #3]
 80066e4:	e7ef      	b.n	80066c6 <__exponent+0x46>
	...

080066e8 <_printf_float>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	b08d      	sub	sp, #52	; 0x34
 80066ee:	460c      	mov	r4, r1
 80066f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80066f4:	4616      	mov	r6, r2
 80066f6:	461f      	mov	r7, r3
 80066f8:	4605      	mov	r5, r0
 80066fa:	f001 fcb7 	bl	800806c <_localeconv_r>
 80066fe:	6803      	ldr	r3, [r0, #0]
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	4618      	mov	r0, r3
 8006704:	f7fa fb32 	bl	8000d6c <strlen>
 8006708:	2300      	movs	r3, #0
 800670a:	930a      	str	r3, [sp, #40]	; 0x28
 800670c:	f8d8 3000 	ldr.w	r3, [r8]
 8006710:	9005      	str	r0, [sp, #20]
 8006712:	3307      	adds	r3, #7
 8006714:	f023 0307 	bic.w	r3, r3, #7
 8006718:	f103 0208 	add.w	r2, r3, #8
 800671c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006720:	f8d4 b000 	ldr.w	fp, [r4]
 8006724:	f8c8 2000 	str.w	r2, [r8]
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006730:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006734:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006738:	9307      	str	r3, [sp, #28]
 800673a:	f8cd 8018 	str.w	r8, [sp, #24]
 800673e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006742:	4ba7      	ldr	r3, [pc, #668]	; (80069e0 <_printf_float+0x2f8>)
 8006744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006748:	f7fa fbf2 	bl	8000f30 <__aeabi_dcmpun>
 800674c:	bb70      	cbnz	r0, 80067ac <_printf_float+0xc4>
 800674e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006752:	4ba3      	ldr	r3, [pc, #652]	; (80069e0 <_printf_float+0x2f8>)
 8006754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006758:	f7fa fbcc 	bl	8000ef4 <__aeabi_dcmple>
 800675c:	bb30      	cbnz	r0, 80067ac <_printf_float+0xc4>
 800675e:	2200      	movs	r2, #0
 8006760:	2300      	movs	r3, #0
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	f7fa fbbb 	bl	8000ee0 <__aeabi_dcmplt>
 800676a:	b110      	cbz	r0, 8006772 <_printf_float+0x8a>
 800676c:	232d      	movs	r3, #45	; 0x2d
 800676e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006772:	4a9c      	ldr	r2, [pc, #624]	; (80069e4 <_printf_float+0x2fc>)
 8006774:	4b9c      	ldr	r3, [pc, #624]	; (80069e8 <_printf_float+0x300>)
 8006776:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800677a:	bf8c      	ite	hi
 800677c:	4690      	movhi	r8, r2
 800677e:	4698      	movls	r8, r3
 8006780:	2303      	movs	r3, #3
 8006782:	f02b 0204 	bic.w	r2, fp, #4
 8006786:	6123      	str	r3, [r4, #16]
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	f04f 0900 	mov.w	r9, #0
 800678e:	9700      	str	r7, [sp, #0]
 8006790:	4633      	mov	r3, r6
 8006792:	aa0b      	add	r2, sp, #44	; 0x2c
 8006794:	4621      	mov	r1, r4
 8006796:	4628      	mov	r0, r5
 8006798:	f000 f9e6 	bl	8006b68 <_printf_common>
 800679c:	3001      	adds	r0, #1
 800679e:	f040 808d 	bne.w	80068bc <_printf_float+0x1d4>
 80067a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067a6:	b00d      	add	sp, #52	; 0x34
 80067a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ac:	4642      	mov	r2, r8
 80067ae:	464b      	mov	r3, r9
 80067b0:	4640      	mov	r0, r8
 80067b2:	4649      	mov	r1, r9
 80067b4:	f7fa fbbc 	bl	8000f30 <__aeabi_dcmpun>
 80067b8:	b110      	cbz	r0, 80067c0 <_printf_float+0xd8>
 80067ba:	4a8c      	ldr	r2, [pc, #560]	; (80069ec <_printf_float+0x304>)
 80067bc:	4b8c      	ldr	r3, [pc, #560]	; (80069f0 <_printf_float+0x308>)
 80067be:	e7da      	b.n	8006776 <_printf_float+0x8e>
 80067c0:	6861      	ldr	r1, [r4, #4]
 80067c2:	1c4b      	adds	r3, r1, #1
 80067c4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80067c8:	a80a      	add	r0, sp, #40	; 0x28
 80067ca:	d13e      	bne.n	800684a <_printf_float+0x162>
 80067cc:	2306      	movs	r3, #6
 80067ce:	6063      	str	r3, [r4, #4]
 80067d0:	2300      	movs	r3, #0
 80067d2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80067d6:	ab09      	add	r3, sp, #36	; 0x24
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	ec49 8b10 	vmov	d0, r8, r9
 80067de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067e2:	6022      	str	r2, [r4, #0]
 80067e4:	f8cd a004 	str.w	sl, [sp, #4]
 80067e8:	6861      	ldr	r1, [r4, #4]
 80067ea:	4628      	mov	r0, r5
 80067ec:	f7ff fee7 	bl	80065be <__cvt>
 80067f0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80067f4:	2b47      	cmp	r3, #71	; 0x47
 80067f6:	4680      	mov	r8, r0
 80067f8:	d109      	bne.n	800680e <_printf_float+0x126>
 80067fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fc:	1cd8      	adds	r0, r3, #3
 80067fe:	db02      	blt.n	8006806 <_printf_float+0x11e>
 8006800:	6862      	ldr	r2, [r4, #4]
 8006802:	4293      	cmp	r3, r2
 8006804:	dd47      	ble.n	8006896 <_printf_float+0x1ae>
 8006806:	f1aa 0a02 	sub.w	sl, sl, #2
 800680a:	fa5f fa8a 	uxtb.w	sl, sl
 800680e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006812:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006814:	d824      	bhi.n	8006860 <_printf_float+0x178>
 8006816:	3901      	subs	r1, #1
 8006818:	4652      	mov	r2, sl
 800681a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800681e:	9109      	str	r1, [sp, #36]	; 0x24
 8006820:	f7ff ff2e 	bl	8006680 <__exponent>
 8006824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006826:	1813      	adds	r3, r2, r0
 8006828:	2a01      	cmp	r2, #1
 800682a:	4681      	mov	r9, r0
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	dc02      	bgt.n	8006836 <_printf_float+0x14e>
 8006830:	6822      	ldr	r2, [r4, #0]
 8006832:	07d1      	lsls	r1, r2, #31
 8006834:	d501      	bpl.n	800683a <_printf_float+0x152>
 8006836:	3301      	adds	r3, #1
 8006838:	6123      	str	r3, [r4, #16]
 800683a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0a5      	beq.n	800678e <_printf_float+0xa6>
 8006842:	232d      	movs	r3, #45	; 0x2d
 8006844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006848:	e7a1      	b.n	800678e <_printf_float+0xa6>
 800684a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800684e:	f000 8177 	beq.w	8006b40 <_printf_float+0x458>
 8006852:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006856:	d1bb      	bne.n	80067d0 <_printf_float+0xe8>
 8006858:	2900      	cmp	r1, #0
 800685a:	d1b9      	bne.n	80067d0 <_printf_float+0xe8>
 800685c:	2301      	movs	r3, #1
 800685e:	e7b6      	b.n	80067ce <_printf_float+0xe6>
 8006860:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006864:	d119      	bne.n	800689a <_printf_float+0x1b2>
 8006866:	2900      	cmp	r1, #0
 8006868:	6863      	ldr	r3, [r4, #4]
 800686a:	dd0c      	ble.n	8006886 <_printf_float+0x19e>
 800686c:	6121      	str	r1, [r4, #16]
 800686e:	b913      	cbnz	r3, 8006876 <_printf_float+0x18e>
 8006870:	6822      	ldr	r2, [r4, #0]
 8006872:	07d2      	lsls	r2, r2, #31
 8006874:	d502      	bpl.n	800687c <_printf_float+0x194>
 8006876:	3301      	adds	r3, #1
 8006878:	440b      	add	r3, r1
 800687a:	6123      	str	r3, [r4, #16]
 800687c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006880:	f04f 0900 	mov.w	r9, #0
 8006884:	e7d9      	b.n	800683a <_printf_float+0x152>
 8006886:	b913      	cbnz	r3, 800688e <_printf_float+0x1a6>
 8006888:	6822      	ldr	r2, [r4, #0]
 800688a:	07d0      	lsls	r0, r2, #31
 800688c:	d501      	bpl.n	8006892 <_printf_float+0x1aa>
 800688e:	3302      	adds	r3, #2
 8006890:	e7f3      	b.n	800687a <_printf_float+0x192>
 8006892:	2301      	movs	r3, #1
 8006894:	e7f1      	b.n	800687a <_printf_float+0x192>
 8006896:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800689a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800689e:	4293      	cmp	r3, r2
 80068a0:	db05      	blt.n	80068ae <_printf_float+0x1c6>
 80068a2:	6822      	ldr	r2, [r4, #0]
 80068a4:	6123      	str	r3, [r4, #16]
 80068a6:	07d1      	lsls	r1, r2, #31
 80068a8:	d5e8      	bpl.n	800687c <_printf_float+0x194>
 80068aa:	3301      	adds	r3, #1
 80068ac:	e7e5      	b.n	800687a <_printf_float+0x192>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bfd4      	ite	le
 80068b2:	f1c3 0302 	rsble	r3, r3, #2
 80068b6:	2301      	movgt	r3, #1
 80068b8:	4413      	add	r3, r2
 80068ba:	e7de      	b.n	800687a <_printf_float+0x192>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	055a      	lsls	r2, r3, #21
 80068c0:	d407      	bmi.n	80068d2 <_printf_float+0x1ea>
 80068c2:	6923      	ldr	r3, [r4, #16]
 80068c4:	4642      	mov	r2, r8
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	d12b      	bne.n	8006928 <_printf_float+0x240>
 80068d0:	e767      	b.n	80067a2 <_printf_float+0xba>
 80068d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80068d6:	f240 80dc 	bls.w	8006a92 <_printf_float+0x3aa>
 80068da:	2200      	movs	r2, #0
 80068dc:	2300      	movs	r3, #0
 80068de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068e2:	f7fa faf3 	bl	8000ecc <__aeabi_dcmpeq>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d033      	beq.n	8006952 <_printf_float+0x26a>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4a41      	ldr	r2, [pc, #260]	; (80069f4 <_printf_float+0x30c>)
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	f43f af54 	beq.w	80067a2 <_printf_float+0xba>
 80068fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068fe:	429a      	cmp	r2, r3
 8006900:	db02      	blt.n	8006908 <_printf_float+0x220>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	07d8      	lsls	r0, r3, #31
 8006906:	d50f      	bpl.n	8006928 <_printf_float+0x240>
 8006908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800690c:	4631      	mov	r1, r6
 800690e:	4628      	mov	r0, r5
 8006910:	47b8      	blx	r7
 8006912:	3001      	adds	r0, #1
 8006914:	f43f af45 	beq.w	80067a2 <_printf_float+0xba>
 8006918:	f04f 0800 	mov.w	r8, #0
 800691c:	f104 091a 	add.w	r9, r4, #26
 8006920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006922:	3b01      	subs	r3, #1
 8006924:	4543      	cmp	r3, r8
 8006926:	dc09      	bgt.n	800693c <_printf_float+0x254>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	079b      	lsls	r3, r3, #30
 800692c:	f100 8103 	bmi.w	8006b36 <_printf_float+0x44e>
 8006930:	68e0      	ldr	r0, [r4, #12]
 8006932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006934:	4298      	cmp	r0, r3
 8006936:	bfb8      	it	lt
 8006938:	4618      	movlt	r0, r3
 800693a:	e734      	b.n	80067a6 <_printf_float+0xbe>
 800693c:	2301      	movs	r3, #1
 800693e:	464a      	mov	r2, r9
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f af2b 	beq.w	80067a2 <_printf_float+0xba>
 800694c:	f108 0801 	add.w	r8, r8, #1
 8006950:	e7e6      	b.n	8006920 <_printf_float+0x238>
 8006952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	dc2b      	bgt.n	80069b0 <_printf_float+0x2c8>
 8006958:	2301      	movs	r3, #1
 800695a:	4a26      	ldr	r2, [pc, #152]	; (80069f4 <_printf_float+0x30c>)
 800695c:	4631      	mov	r1, r6
 800695e:	4628      	mov	r0, r5
 8006960:	47b8      	blx	r7
 8006962:	3001      	adds	r0, #1
 8006964:	f43f af1d 	beq.w	80067a2 <_printf_float+0xba>
 8006968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696a:	b923      	cbnz	r3, 8006976 <_printf_float+0x28e>
 800696c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696e:	b913      	cbnz	r3, 8006976 <_printf_float+0x28e>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	07d9      	lsls	r1, r3, #31
 8006974:	d5d8      	bpl.n	8006928 <_printf_float+0x240>
 8006976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800697a:	4631      	mov	r1, r6
 800697c:	4628      	mov	r0, r5
 800697e:	47b8      	blx	r7
 8006980:	3001      	adds	r0, #1
 8006982:	f43f af0e 	beq.w	80067a2 <_printf_float+0xba>
 8006986:	f04f 0900 	mov.w	r9, #0
 800698a:	f104 0a1a 	add.w	sl, r4, #26
 800698e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006990:	425b      	negs	r3, r3
 8006992:	454b      	cmp	r3, r9
 8006994:	dc01      	bgt.n	800699a <_printf_float+0x2b2>
 8006996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006998:	e794      	b.n	80068c4 <_printf_float+0x1dc>
 800699a:	2301      	movs	r3, #1
 800699c:	4652      	mov	r2, sl
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b8      	blx	r7
 80069a4:	3001      	adds	r0, #1
 80069a6:	f43f aefc 	beq.w	80067a2 <_printf_float+0xba>
 80069aa:	f109 0901 	add.w	r9, r9, #1
 80069ae:	e7ee      	b.n	800698e <_printf_float+0x2a6>
 80069b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069b4:	429a      	cmp	r2, r3
 80069b6:	bfa8      	it	ge
 80069b8:	461a      	movge	r2, r3
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	4691      	mov	r9, r2
 80069be:	dd07      	ble.n	80069d0 <_printf_float+0x2e8>
 80069c0:	4613      	mov	r3, r2
 80069c2:	4631      	mov	r1, r6
 80069c4:	4642      	mov	r2, r8
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f aee9 	beq.w	80067a2 <_printf_float+0xba>
 80069d0:	f104 031a 	add.w	r3, r4, #26
 80069d4:	f04f 0b00 	mov.w	fp, #0
 80069d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069dc:	9306      	str	r3, [sp, #24]
 80069de:	e015      	b.n	8006a0c <_printf_float+0x324>
 80069e0:	7fefffff 	.word	0x7fefffff
 80069e4:	0800aad0 	.word	0x0800aad0
 80069e8:	0800aacc 	.word	0x0800aacc
 80069ec:	0800aad8 	.word	0x0800aad8
 80069f0:	0800aad4 	.word	0x0800aad4
 80069f4:	0800aadc 	.word	0x0800aadc
 80069f8:	2301      	movs	r3, #1
 80069fa:	9a06      	ldr	r2, [sp, #24]
 80069fc:	4631      	mov	r1, r6
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	f43f aecd 	beq.w	80067a2 <_printf_float+0xba>
 8006a08:	f10b 0b01 	add.w	fp, fp, #1
 8006a0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a10:	ebaa 0309 	sub.w	r3, sl, r9
 8006a14:	455b      	cmp	r3, fp
 8006a16:	dcef      	bgt.n	80069f8 <_printf_float+0x310>
 8006a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	44d0      	add	r8, sl
 8006a20:	db15      	blt.n	8006a4e <_printf_float+0x366>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	07da      	lsls	r2, r3, #31
 8006a26:	d412      	bmi.n	8006a4e <_printf_float+0x366>
 8006a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a2c:	eba3 020a 	sub.w	r2, r3, sl
 8006a30:	eba3 0a01 	sub.w	sl, r3, r1
 8006a34:	4592      	cmp	sl, r2
 8006a36:	bfa8      	it	ge
 8006a38:	4692      	movge	sl, r2
 8006a3a:	f1ba 0f00 	cmp.w	sl, #0
 8006a3e:	dc0e      	bgt.n	8006a5e <_printf_float+0x376>
 8006a40:	f04f 0800 	mov.w	r8, #0
 8006a44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a48:	f104 091a 	add.w	r9, r4, #26
 8006a4c:	e019      	b.n	8006a82 <_printf_float+0x39a>
 8006a4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d1e5      	bne.n	8006a28 <_printf_float+0x340>
 8006a5c:	e6a1      	b.n	80067a2 <_printf_float+0xba>
 8006a5e:	4653      	mov	r3, sl
 8006a60:	4642      	mov	r2, r8
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d1e9      	bne.n	8006a40 <_printf_float+0x358>
 8006a6c:	e699      	b.n	80067a2 <_printf_float+0xba>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	464a      	mov	r2, r9
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f ae92 	beq.w	80067a2 <_printf_float+0xba>
 8006a7e:	f108 0801 	add.w	r8, r8, #1
 8006a82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	eba3 030a 	sub.w	r3, r3, sl
 8006a8c:	4543      	cmp	r3, r8
 8006a8e:	dcee      	bgt.n	8006a6e <_printf_float+0x386>
 8006a90:	e74a      	b.n	8006928 <_printf_float+0x240>
 8006a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a94:	2a01      	cmp	r2, #1
 8006a96:	dc01      	bgt.n	8006a9c <_printf_float+0x3b4>
 8006a98:	07db      	lsls	r3, r3, #31
 8006a9a:	d53a      	bpl.n	8006b12 <_printf_float+0x42a>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f43f ae7b 	beq.w	80067a2 <_printf_float+0xba>
 8006aac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f108 0801 	add.w	r8, r8, #1
 8006abc:	f43f ae71 	beq.w	80067a2 <_printf_float+0xba>
 8006ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006ac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006acc:	2300      	movs	r3, #0
 8006ace:	f7fa f9fd 	bl	8000ecc <__aeabi_dcmpeq>
 8006ad2:	b9c8      	cbnz	r0, 8006b08 <_printf_float+0x420>
 8006ad4:	4653      	mov	r3, sl
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d10e      	bne.n	8006b00 <_printf_float+0x418>
 8006ae2:	e65e      	b.n	80067a2 <_printf_float+0xba>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	4652      	mov	r2, sl
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	f43f ae57 	beq.w	80067a2 <_printf_float+0xba>
 8006af4:	f108 0801 	add.w	r8, r8, #1
 8006af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afa:	3b01      	subs	r3, #1
 8006afc:	4543      	cmp	r3, r8
 8006afe:	dcf1      	bgt.n	8006ae4 <_printf_float+0x3fc>
 8006b00:	464b      	mov	r3, r9
 8006b02:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b06:	e6de      	b.n	80068c6 <_printf_float+0x1de>
 8006b08:	f04f 0800 	mov.w	r8, #0
 8006b0c:	f104 0a1a 	add.w	sl, r4, #26
 8006b10:	e7f2      	b.n	8006af8 <_printf_float+0x410>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e7df      	b.n	8006ad6 <_printf_float+0x3ee>
 8006b16:	2301      	movs	r3, #1
 8006b18:	464a      	mov	r2, r9
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b8      	blx	r7
 8006b20:	3001      	adds	r0, #1
 8006b22:	f43f ae3e 	beq.w	80067a2 <_printf_float+0xba>
 8006b26:	f108 0801 	add.w	r8, r8, #1
 8006b2a:	68e3      	ldr	r3, [r4, #12]
 8006b2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	4543      	cmp	r3, r8
 8006b32:	dcf0      	bgt.n	8006b16 <_printf_float+0x42e>
 8006b34:	e6fc      	b.n	8006930 <_printf_float+0x248>
 8006b36:	f04f 0800 	mov.w	r8, #0
 8006b3a:	f104 0919 	add.w	r9, r4, #25
 8006b3e:	e7f4      	b.n	8006b2a <_printf_float+0x442>
 8006b40:	2900      	cmp	r1, #0
 8006b42:	f43f ae8b 	beq.w	800685c <_printf_float+0x174>
 8006b46:	2300      	movs	r3, #0
 8006b48:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006b4c:	ab09      	add	r3, sp, #36	; 0x24
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	ec49 8b10 	vmov	d0, r8, r9
 8006b54:	6022      	str	r2, [r4, #0]
 8006b56:	f8cd a004 	str.w	sl, [sp, #4]
 8006b5a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f7ff fd2d 	bl	80065be <__cvt>
 8006b64:	4680      	mov	r8, r0
 8006b66:	e648      	b.n	80067fa <_printf_float+0x112>

08006b68 <_printf_common>:
 8006b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	4691      	mov	r9, r2
 8006b6e:	461f      	mov	r7, r3
 8006b70:	688a      	ldr	r2, [r1, #8]
 8006b72:	690b      	ldr	r3, [r1, #16]
 8006b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	bfb8      	it	lt
 8006b7c:	4613      	movlt	r3, r2
 8006b7e:	f8c9 3000 	str.w	r3, [r9]
 8006b82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b86:	4606      	mov	r6, r0
 8006b88:	460c      	mov	r4, r1
 8006b8a:	b112      	cbz	r2, 8006b92 <_printf_common+0x2a>
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	f8c9 3000 	str.w	r3, [r9]
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	0699      	lsls	r1, r3, #26
 8006b96:	bf42      	ittt	mi
 8006b98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b9c:	3302      	addmi	r3, #2
 8006b9e:	f8c9 3000 	strmi.w	r3, [r9]
 8006ba2:	6825      	ldr	r5, [r4, #0]
 8006ba4:	f015 0506 	ands.w	r5, r5, #6
 8006ba8:	d107      	bne.n	8006bba <_printf_common+0x52>
 8006baa:	f104 0a19 	add.w	sl, r4, #25
 8006bae:	68e3      	ldr	r3, [r4, #12]
 8006bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	42ab      	cmp	r3, r5
 8006bb8:	dc28      	bgt.n	8006c0c <_printf_common+0xa4>
 8006bba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	3300      	adds	r3, #0
 8006bc2:	bf18      	it	ne
 8006bc4:	2301      	movne	r3, #1
 8006bc6:	0692      	lsls	r2, r2, #26
 8006bc8:	d42d      	bmi.n	8006c26 <_printf_common+0xbe>
 8006bca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bce:	4639      	mov	r1, r7
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	47c0      	blx	r8
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d020      	beq.n	8006c1a <_printf_common+0xb2>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	68e5      	ldr	r5, [r4, #12]
 8006bdc:	f8d9 2000 	ldr.w	r2, [r9]
 8006be0:	f003 0306 	and.w	r3, r3, #6
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	bf08      	it	eq
 8006be8:	1aad      	subeq	r5, r5, r2
 8006bea:	68a3      	ldr	r3, [r4, #8]
 8006bec:	6922      	ldr	r2, [r4, #16]
 8006bee:	bf0c      	ite	eq
 8006bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bf4:	2500      	movne	r5, #0
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	bfc4      	itt	gt
 8006bfa:	1a9b      	subgt	r3, r3, r2
 8006bfc:	18ed      	addgt	r5, r5, r3
 8006bfe:	f04f 0900 	mov.w	r9, #0
 8006c02:	341a      	adds	r4, #26
 8006c04:	454d      	cmp	r5, r9
 8006c06:	d11a      	bne.n	8006c3e <_printf_common+0xd6>
 8006c08:	2000      	movs	r0, #0
 8006c0a:	e008      	b.n	8006c1e <_printf_common+0xb6>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	4652      	mov	r2, sl
 8006c10:	4639      	mov	r1, r7
 8006c12:	4630      	mov	r0, r6
 8006c14:	47c0      	blx	r8
 8006c16:	3001      	adds	r0, #1
 8006c18:	d103      	bne.n	8006c22 <_printf_common+0xba>
 8006c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c22:	3501      	adds	r5, #1
 8006c24:	e7c3      	b.n	8006bae <_printf_common+0x46>
 8006c26:	18e1      	adds	r1, r4, r3
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	2030      	movs	r0, #48	; 0x30
 8006c2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c30:	4422      	add	r2, r4
 8006c32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c3a:	3302      	adds	r3, #2
 8006c3c:	e7c5      	b.n	8006bca <_printf_common+0x62>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4622      	mov	r2, r4
 8006c42:	4639      	mov	r1, r7
 8006c44:	4630      	mov	r0, r6
 8006c46:	47c0      	blx	r8
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d0e6      	beq.n	8006c1a <_printf_common+0xb2>
 8006c4c:	f109 0901 	add.w	r9, r9, #1
 8006c50:	e7d8      	b.n	8006c04 <_printf_common+0x9c>
	...

08006c54 <_printf_i>:
 8006c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	7e09      	ldrb	r1, [r1, #24]
 8006c60:	b085      	sub	sp, #20
 8006c62:	296e      	cmp	r1, #110	; 0x6e
 8006c64:	4617      	mov	r7, r2
 8006c66:	4606      	mov	r6, r0
 8006c68:	4698      	mov	r8, r3
 8006c6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c6c:	f000 80b3 	beq.w	8006dd6 <_printf_i+0x182>
 8006c70:	d822      	bhi.n	8006cb8 <_printf_i+0x64>
 8006c72:	2963      	cmp	r1, #99	; 0x63
 8006c74:	d036      	beq.n	8006ce4 <_printf_i+0x90>
 8006c76:	d80a      	bhi.n	8006c8e <_printf_i+0x3a>
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	f000 80b9 	beq.w	8006df0 <_printf_i+0x19c>
 8006c7e:	2958      	cmp	r1, #88	; 0x58
 8006c80:	f000 8083 	beq.w	8006d8a <_printf_i+0x136>
 8006c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c8c:	e032      	b.n	8006cf4 <_printf_i+0xa0>
 8006c8e:	2964      	cmp	r1, #100	; 0x64
 8006c90:	d001      	beq.n	8006c96 <_printf_i+0x42>
 8006c92:	2969      	cmp	r1, #105	; 0x69
 8006c94:	d1f6      	bne.n	8006c84 <_printf_i+0x30>
 8006c96:	6820      	ldr	r0, [r4, #0]
 8006c98:	6813      	ldr	r3, [r2, #0]
 8006c9a:	0605      	lsls	r5, r0, #24
 8006c9c:	f103 0104 	add.w	r1, r3, #4
 8006ca0:	d52a      	bpl.n	8006cf8 <_printf_i+0xa4>
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6011      	str	r1, [r2, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da03      	bge.n	8006cb2 <_printf_i+0x5e>
 8006caa:	222d      	movs	r2, #45	; 0x2d
 8006cac:	425b      	negs	r3, r3
 8006cae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006cb2:	486f      	ldr	r0, [pc, #444]	; (8006e70 <_printf_i+0x21c>)
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	e039      	b.n	8006d2c <_printf_i+0xd8>
 8006cb8:	2973      	cmp	r1, #115	; 0x73
 8006cba:	f000 809d 	beq.w	8006df8 <_printf_i+0x1a4>
 8006cbe:	d808      	bhi.n	8006cd2 <_printf_i+0x7e>
 8006cc0:	296f      	cmp	r1, #111	; 0x6f
 8006cc2:	d020      	beq.n	8006d06 <_printf_i+0xb2>
 8006cc4:	2970      	cmp	r1, #112	; 0x70
 8006cc6:	d1dd      	bne.n	8006c84 <_printf_i+0x30>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	f043 0320 	orr.w	r3, r3, #32
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	e003      	b.n	8006cda <_printf_i+0x86>
 8006cd2:	2975      	cmp	r1, #117	; 0x75
 8006cd4:	d017      	beq.n	8006d06 <_printf_i+0xb2>
 8006cd6:	2978      	cmp	r1, #120	; 0x78
 8006cd8:	d1d4      	bne.n	8006c84 <_printf_i+0x30>
 8006cda:	2378      	movs	r3, #120	; 0x78
 8006cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ce0:	4864      	ldr	r0, [pc, #400]	; (8006e74 <_printf_i+0x220>)
 8006ce2:	e055      	b.n	8006d90 <_printf_i+0x13c>
 8006ce4:	6813      	ldr	r3, [r2, #0]
 8006ce6:	1d19      	adds	r1, r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6011      	str	r1, [r2, #0]
 8006cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e08c      	b.n	8006e12 <_printf_i+0x1be>
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6011      	str	r1, [r2, #0]
 8006cfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d00:	bf18      	it	ne
 8006d02:	b21b      	sxthne	r3, r3
 8006d04:	e7cf      	b.n	8006ca6 <_printf_i+0x52>
 8006d06:	6813      	ldr	r3, [r2, #0]
 8006d08:	6825      	ldr	r5, [r4, #0]
 8006d0a:	1d18      	adds	r0, r3, #4
 8006d0c:	6010      	str	r0, [r2, #0]
 8006d0e:	0628      	lsls	r0, r5, #24
 8006d10:	d501      	bpl.n	8006d16 <_printf_i+0xc2>
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	e002      	b.n	8006d1c <_printf_i+0xc8>
 8006d16:	0668      	lsls	r0, r5, #25
 8006d18:	d5fb      	bpl.n	8006d12 <_printf_i+0xbe>
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	4854      	ldr	r0, [pc, #336]	; (8006e70 <_printf_i+0x21c>)
 8006d1e:	296f      	cmp	r1, #111	; 0x6f
 8006d20:	bf14      	ite	ne
 8006d22:	220a      	movne	r2, #10
 8006d24:	2208      	moveq	r2, #8
 8006d26:	2100      	movs	r1, #0
 8006d28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d2c:	6865      	ldr	r5, [r4, #4]
 8006d2e:	60a5      	str	r5, [r4, #8]
 8006d30:	2d00      	cmp	r5, #0
 8006d32:	f2c0 8095 	blt.w	8006e60 <_printf_i+0x20c>
 8006d36:	6821      	ldr	r1, [r4, #0]
 8006d38:	f021 0104 	bic.w	r1, r1, #4
 8006d3c:	6021      	str	r1, [r4, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d13d      	bne.n	8006dbe <_printf_i+0x16a>
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	f040 808e 	bne.w	8006e64 <_printf_i+0x210>
 8006d48:	4665      	mov	r5, ip
 8006d4a:	2a08      	cmp	r2, #8
 8006d4c:	d10b      	bne.n	8006d66 <_printf_i+0x112>
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	07db      	lsls	r3, r3, #31
 8006d52:	d508      	bpl.n	8006d66 <_printf_i+0x112>
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	6862      	ldr	r2, [r4, #4]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	bfde      	ittt	le
 8006d5c:	2330      	movle	r3, #48	; 0x30
 8006d5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d62:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006d66:	ebac 0305 	sub.w	r3, ip, r5
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	f8cd 8000 	str.w	r8, [sp]
 8006d70:	463b      	mov	r3, r7
 8006d72:	aa03      	add	r2, sp, #12
 8006d74:	4621      	mov	r1, r4
 8006d76:	4630      	mov	r0, r6
 8006d78:	f7ff fef6 	bl	8006b68 <_printf_common>
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d14d      	bne.n	8006e1c <_printf_i+0x1c8>
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d84:	b005      	add	sp, #20
 8006d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d8a:	4839      	ldr	r0, [pc, #228]	; (8006e70 <_printf_i+0x21c>)
 8006d8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d90:	6813      	ldr	r3, [r2, #0]
 8006d92:	6821      	ldr	r1, [r4, #0]
 8006d94:	1d1d      	adds	r5, r3, #4
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6015      	str	r5, [r2, #0]
 8006d9a:	060a      	lsls	r2, r1, #24
 8006d9c:	d50b      	bpl.n	8006db6 <_printf_i+0x162>
 8006d9e:	07ca      	lsls	r2, r1, #31
 8006da0:	bf44      	itt	mi
 8006da2:	f041 0120 	orrmi.w	r1, r1, #32
 8006da6:	6021      	strmi	r1, [r4, #0]
 8006da8:	b91b      	cbnz	r3, 8006db2 <_printf_i+0x15e>
 8006daa:	6822      	ldr	r2, [r4, #0]
 8006dac:	f022 0220 	bic.w	r2, r2, #32
 8006db0:	6022      	str	r2, [r4, #0]
 8006db2:	2210      	movs	r2, #16
 8006db4:	e7b7      	b.n	8006d26 <_printf_i+0xd2>
 8006db6:	064d      	lsls	r5, r1, #25
 8006db8:	bf48      	it	mi
 8006dba:	b29b      	uxthmi	r3, r3
 8006dbc:	e7ef      	b.n	8006d9e <_printf_i+0x14a>
 8006dbe:	4665      	mov	r5, ip
 8006dc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dc4:	fb02 3311 	mls	r3, r2, r1, r3
 8006dc8:	5cc3      	ldrb	r3, [r0, r3]
 8006dca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006dce:	460b      	mov	r3, r1
 8006dd0:	2900      	cmp	r1, #0
 8006dd2:	d1f5      	bne.n	8006dc0 <_printf_i+0x16c>
 8006dd4:	e7b9      	b.n	8006d4a <_printf_i+0xf6>
 8006dd6:	6813      	ldr	r3, [r2, #0]
 8006dd8:	6825      	ldr	r5, [r4, #0]
 8006dda:	6961      	ldr	r1, [r4, #20]
 8006ddc:	1d18      	adds	r0, r3, #4
 8006dde:	6010      	str	r0, [r2, #0]
 8006de0:	0628      	lsls	r0, r5, #24
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	d501      	bpl.n	8006dea <_printf_i+0x196>
 8006de6:	6019      	str	r1, [r3, #0]
 8006de8:	e002      	b.n	8006df0 <_printf_i+0x19c>
 8006dea:	066a      	lsls	r2, r5, #25
 8006dec:	d5fb      	bpl.n	8006de6 <_printf_i+0x192>
 8006dee:	8019      	strh	r1, [r3, #0]
 8006df0:	2300      	movs	r3, #0
 8006df2:	6123      	str	r3, [r4, #16]
 8006df4:	4665      	mov	r5, ip
 8006df6:	e7b9      	b.n	8006d6c <_printf_i+0x118>
 8006df8:	6813      	ldr	r3, [r2, #0]
 8006dfa:	1d19      	adds	r1, r3, #4
 8006dfc:	6011      	str	r1, [r2, #0]
 8006dfe:	681d      	ldr	r5, [r3, #0]
 8006e00:	6862      	ldr	r2, [r4, #4]
 8006e02:	2100      	movs	r1, #0
 8006e04:	4628      	mov	r0, r5
 8006e06:	f7f9 ffbb 	bl	8000d80 <memchr>
 8006e0a:	b108      	cbz	r0, 8006e10 <_printf_i+0x1bc>
 8006e0c:	1b40      	subs	r0, r0, r5
 8006e0e:	6060      	str	r0, [r4, #4]
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	6123      	str	r3, [r4, #16]
 8006e14:	2300      	movs	r3, #0
 8006e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e1a:	e7a7      	b.n	8006d6c <_printf_i+0x118>
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	462a      	mov	r2, r5
 8006e20:	4639      	mov	r1, r7
 8006e22:	4630      	mov	r0, r6
 8006e24:	47c0      	blx	r8
 8006e26:	3001      	adds	r0, #1
 8006e28:	d0aa      	beq.n	8006d80 <_printf_i+0x12c>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	079b      	lsls	r3, r3, #30
 8006e2e:	d413      	bmi.n	8006e58 <_printf_i+0x204>
 8006e30:	68e0      	ldr	r0, [r4, #12]
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	4298      	cmp	r0, r3
 8006e36:	bfb8      	it	lt
 8006e38:	4618      	movlt	r0, r3
 8006e3a:	e7a3      	b.n	8006d84 <_printf_i+0x130>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	464a      	mov	r2, r9
 8006e40:	4639      	mov	r1, r7
 8006e42:	4630      	mov	r0, r6
 8006e44:	47c0      	blx	r8
 8006e46:	3001      	adds	r0, #1
 8006e48:	d09a      	beq.n	8006d80 <_printf_i+0x12c>
 8006e4a:	3501      	adds	r5, #1
 8006e4c:	68e3      	ldr	r3, [r4, #12]
 8006e4e:	9a03      	ldr	r2, [sp, #12]
 8006e50:	1a9b      	subs	r3, r3, r2
 8006e52:	42ab      	cmp	r3, r5
 8006e54:	dcf2      	bgt.n	8006e3c <_printf_i+0x1e8>
 8006e56:	e7eb      	b.n	8006e30 <_printf_i+0x1dc>
 8006e58:	2500      	movs	r5, #0
 8006e5a:	f104 0919 	add.w	r9, r4, #25
 8006e5e:	e7f5      	b.n	8006e4c <_printf_i+0x1f8>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1ac      	bne.n	8006dbe <_printf_i+0x16a>
 8006e64:	7803      	ldrb	r3, [r0, #0]
 8006e66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e6e:	e76c      	b.n	8006d4a <_printf_i+0xf6>
 8006e70:	0800aade 	.word	0x0800aade
 8006e74:	0800aaef 	.word	0x0800aaef

08006e78 <iprintf>:
 8006e78:	b40f      	push	{r0, r1, r2, r3}
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <iprintf+0x2c>)
 8006e7c:	b513      	push	{r0, r1, r4, lr}
 8006e7e:	681c      	ldr	r4, [r3, #0]
 8006e80:	b124      	cbz	r4, 8006e8c <iprintf+0x14>
 8006e82:	69a3      	ldr	r3, [r4, #24]
 8006e84:	b913      	cbnz	r3, 8006e8c <iprintf+0x14>
 8006e86:	4620      	mov	r0, r4
 8006e88:	f001 f866 	bl	8007f58 <__sinit>
 8006e8c:	ab05      	add	r3, sp, #20
 8006e8e:	9a04      	ldr	r2, [sp, #16]
 8006e90:	68a1      	ldr	r1, [r4, #8]
 8006e92:	9301      	str	r3, [sp, #4]
 8006e94:	4620      	mov	r0, r4
 8006e96:	f001 fd1f 	bl	80088d8 <_vfiprintf_r>
 8006e9a:	b002      	add	sp, #8
 8006e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea0:	b004      	add	sp, #16
 8006ea2:	4770      	bx	lr
 8006ea4:	2000007c 	.word	0x2000007c

08006ea8 <_puts_r>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	460e      	mov	r6, r1
 8006eac:	4605      	mov	r5, r0
 8006eae:	b118      	cbz	r0, 8006eb8 <_puts_r+0x10>
 8006eb0:	6983      	ldr	r3, [r0, #24]
 8006eb2:	b90b      	cbnz	r3, 8006eb8 <_puts_r+0x10>
 8006eb4:	f001 f850 	bl	8007f58 <__sinit>
 8006eb8:	69ab      	ldr	r3, [r5, #24]
 8006eba:	68ac      	ldr	r4, [r5, #8]
 8006ebc:	b913      	cbnz	r3, 8006ec4 <_puts_r+0x1c>
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f001 f84a 	bl	8007f58 <__sinit>
 8006ec4:	4b23      	ldr	r3, [pc, #140]	; (8006f54 <_puts_r+0xac>)
 8006ec6:	429c      	cmp	r4, r3
 8006ec8:	d117      	bne.n	8006efa <_puts_r+0x52>
 8006eca:	686c      	ldr	r4, [r5, #4]
 8006ecc:	89a3      	ldrh	r3, [r4, #12]
 8006ece:	071b      	lsls	r3, r3, #28
 8006ed0:	d51d      	bpl.n	8006f0e <_puts_r+0x66>
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	b1db      	cbz	r3, 8006f0e <_puts_r+0x66>
 8006ed6:	3e01      	subs	r6, #1
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	60a3      	str	r3, [r4, #8]
 8006ee2:	b9e9      	cbnz	r1, 8006f20 <_puts_r+0x78>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	da2e      	bge.n	8006f46 <_puts_r+0x9e>
 8006ee8:	4622      	mov	r2, r4
 8006eea:	210a      	movs	r1, #10
 8006eec:	4628      	mov	r0, r5
 8006eee:	f000 f83f 	bl	8006f70 <__swbuf_r>
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d011      	beq.n	8006f1a <_puts_r+0x72>
 8006ef6:	200a      	movs	r0, #10
 8006ef8:	e011      	b.n	8006f1e <_puts_r+0x76>
 8006efa:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <_puts_r+0xb0>)
 8006efc:	429c      	cmp	r4, r3
 8006efe:	d101      	bne.n	8006f04 <_puts_r+0x5c>
 8006f00:	68ac      	ldr	r4, [r5, #8]
 8006f02:	e7e3      	b.n	8006ecc <_puts_r+0x24>
 8006f04:	4b15      	ldr	r3, [pc, #84]	; (8006f5c <_puts_r+0xb4>)
 8006f06:	429c      	cmp	r4, r3
 8006f08:	bf08      	it	eq
 8006f0a:	68ec      	ldreq	r4, [r5, #12]
 8006f0c:	e7de      	b.n	8006ecc <_puts_r+0x24>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4628      	mov	r0, r5
 8006f12:	f000 f87f 	bl	8007014 <__swsetup_r>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d0dd      	beq.n	8006ed6 <_puts_r+0x2e>
 8006f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	da04      	bge.n	8006f2e <_puts_r+0x86>
 8006f24:	69a2      	ldr	r2, [r4, #24]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	dc06      	bgt.n	8006f38 <_puts_r+0x90>
 8006f2a:	290a      	cmp	r1, #10
 8006f2c:	d004      	beq.n	8006f38 <_puts_r+0x90>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	6022      	str	r2, [r4, #0]
 8006f34:	7019      	strb	r1, [r3, #0]
 8006f36:	e7cf      	b.n	8006ed8 <_puts_r+0x30>
 8006f38:	4622      	mov	r2, r4
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f000 f818 	bl	8006f70 <__swbuf_r>
 8006f40:	3001      	adds	r0, #1
 8006f42:	d1c9      	bne.n	8006ed8 <_puts_r+0x30>
 8006f44:	e7e9      	b.n	8006f1a <_puts_r+0x72>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	200a      	movs	r0, #10
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	6022      	str	r2, [r4, #0]
 8006f4e:	7018      	strb	r0, [r3, #0]
 8006f50:	e7e5      	b.n	8006f1e <_puts_r+0x76>
 8006f52:	bf00      	nop
 8006f54:	0800ab30 	.word	0x0800ab30
 8006f58:	0800ab50 	.word	0x0800ab50
 8006f5c:	0800ab10 	.word	0x0800ab10

08006f60 <puts>:
 8006f60:	4b02      	ldr	r3, [pc, #8]	; (8006f6c <puts+0xc>)
 8006f62:	4601      	mov	r1, r0
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	f7ff bf9f 	b.w	8006ea8 <_puts_r>
 8006f6a:	bf00      	nop
 8006f6c:	2000007c 	.word	0x2000007c

08006f70 <__swbuf_r>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	460e      	mov	r6, r1
 8006f74:	4614      	mov	r4, r2
 8006f76:	4605      	mov	r5, r0
 8006f78:	b118      	cbz	r0, 8006f82 <__swbuf_r+0x12>
 8006f7a:	6983      	ldr	r3, [r0, #24]
 8006f7c:	b90b      	cbnz	r3, 8006f82 <__swbuf_r+0x12>
 8006f7e:	f000 ffeb 	bl	8007f58 <__sinit>
 8006f82:	4b21      	ldr	r3, [pc, #132]	; (8007008 <__swbuf_r+0x98>)
 8006f84:	429c      	cmp	r4, r3
 8006f86:	d12a      	bne.n	8006fde <__swbuf_r+0x6e>
 8006f88:	686c      	ldr	r4, [r5, #4]
 8006f8a:	69a3      	ldr	r3, [r4, #24]
 8006f8c:	60a3      	str	r3, [r4, #8]
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	071a      	lsls	r2, r3, #28
 8006f92:	d52e      	bpl.n	8006ff2 <__swbuf_r+0x82>
 8006f94:	6923      	ldr	r3, [r4, #16]
 8006f96:	b363      	cbz	r3, 8006ff2 <__swbuf_r+0x82>
 8006f98:	6923      	ldr	r3, [r4, #16]
 8006f9a:	6820      	ldr	r0, [r4, #0]
 8006f9c:	1ac0      	subs	r0, r0, r3
 8006f9e:	6963      	ldr	r3, [r4, #20]
 8006fa0:	b2f6      	uxtb	r6, r6
 8006fa2:	4283      	cmp	r3, r0
 8006fa4:	4637      	mov	r7, r6
 8006fa6:	dc04      	bgt.n	8006fb2 <__swbuf_r+0x42>
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 ff6a 	bl	8007e84 <_fflush_r>
 8006fb0:	bb28      	cbnz	r0, 8006ffe <__swbuf_r+0x8e>
 8006fb2:	68a3      	ldr	r3, [r4, #8]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	60a3      	str	r3, [r4, #8]
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	6022      	str	r2, [r4, #0]
 8006fbe:	701e      	strb	r6, [r3, #0]
 8006fc0:	6963      	ldr	r3, [r4, #20]
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	4283      	cmp	r3, r0
 8006fc6:	d004      	beq.n	8006fd2 <__swbuf_r+0x62>
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	07db      	lsls	r3, r3, #31
 8006fcc:	d519      	bpl.n	8007002 <__swbuf_r+0x92>
 8006fce:	2e0a      	cmp	r6, #10
 8006fd0:	d117      	bne.n	8007002 <__swbuf_r+0x92>
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f000 ff55 	bl	8007e84 <_fflush_r>
 8006fda:	b190      	cbz	r0, 8007002 <__swbuf_r+0x92>
 8006fdc:	e00f      	b.n	8006ffe <__swbuf_r+0x8e>
 8006fde:	4b0b      	ldr	r3, [pc, #44]	; (800700c <__swbuf_r+0x9c>)
 8006fe0:	429c      	cmp	r4, r3
 8006fe2:	d101      	bne.n	8006fe8 <__swbuf_r+0x78>
 8006fe4:	68ac      	ldr	r4, [r5, #8]
 8006fe6:	e7d0      	b.n	8006f8a <__swbuf_r+0x1a>
 8006fe8:	4b09      	ldr	r3, [pc, #36]	; (8007010 <__swbuf_r+0xa0>)
 8006fea:	429c      	cmp	r4, r3
 8006fec:	bf08      	it	eq
 8006fee:	68ec      	ldreq	r4, [r5, #12]
 8006ff0:	e7cb      	b.n	8006f8a <__swbuf_r+0x1a>
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f000 f80d 	bl	8007014 <__swsetup_r>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d0cc      	beq.n	8006f98 <__swbuf_r+0x28>
 8006ffe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007002:	4638      	mov	r0, r7
 8007004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007006:	bf00      	nop
 8007008:	0800ab30 	.word	0x0800ab30
 800700c:	0800ab50 	.word	0x0800ab50
 8007010:	0800ab10 	.word	0x0800ab10

08007014 <__swsetup_r>:
 8007014:	4b32      	ldr	r3, [pc, #200]	; (80070e0 <__swsetup_r+0xcc>)
 8007016:	b570      	push	{r4, r5, r6, lr}
 8007018:	681d      	ldr	r5, [r3, #0]
 800701a:	4606      	mov	r6, r0
 800701c:	460c      	mov	r4, r1
 800701e:	b125      	cbz	r5, 800702a <__swsetup_r+0x16>
 8007020:	69ab      	ldr	r3, [r5, #24]
 8007022:	b913      	cbnz	r3, 800702a <__swsetup_r+0x16>
 8007024:	4628      	mov	r0, r5
 8007026:	f000 ff97 	bl	8007f58 <__sinit>
 800702a:	4b2e      	ldr	r3, [pc, #184]	; (80070e4 <__swsetup_r+0xd0>)
 800702c:	429c      	cmp	r4, r3
 800702e:	d10f      	bne.n	8007050 <__swsetup_r+0x3c>
 8007030:	686c      	ldr	r4, [r5, #4]
 8007032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007036:	b29a      	uxth	r2, r3
 8007038:	0715      	lsls	r5, r2, #28
 800703a:	d42c      	bmi.n	8007096 <__swsetup_r+0x82>
 800703c:	06d0      	lsls	r0, r2, #27
 800703e:	d411      	bmi.n	8007064 <__swsetup_r+0x50>
 8007040:	2209      	movs	r2, #9
 8007042:	6032      	str	r2, [r6, #0]
 8007044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800704e:	e03e      	b.n	80070ce <__swsetup_r+0xba>
 8007050:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <__swsetup_r+0xd4>)
 8007052:	429c      	cmp	r4, r3
 8007054:	d101      	bne.n	800705a <__swsetup_r+0x46>
 8007056:	68ac      	ldr	r4, [r5, #8]
 8007058:	e7eb      	b.n	8007032 <__swsetup_r+0x1e>
 800705a:	4b24      	ldr	r3, [pc, #144]	; (80070ec <__swsetup_r+0xd8>)
 800705c:	429c      	cmp	r4, r3
 800705e:	bf08      	it	eq
 8007060:	68ec      	ldreq	r4, [r5, #12]
 8007062:	e7e6      	b.n	8007032 <__swsetup_r+0x1e>
 8007064:	0751      	lsls	r1, r2, #29
 8007066:	d512      	bpl.n	800708e <__swsetup_r+0x7a>
 8007068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800706a:	b141      	cbz	r1, 800707e <__swsetup_r+0x6a>
 800706c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007070:	4299      	cmp	r1, r3
 8007072:	d002      	beq.n	800707a <__swsetup_r+0x66>
 8007074:	4630      	mov	r0, r6
 8007076:	f001 fb5d 	bl	8008734 <_free_r>
 800707a:	2300      	movs	r3, #0
 800707c:	6363      	str	r3, [r4, #52]	; 0x34
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	2300      	movs	r3, #0
 8007088:	6063      	str	r3, [r4, #4]
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f043 0308 	orr.w	r3, r3, #8
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	b94b      	cbnz	r3, 80070ae <__swsetup_r+0x9a>
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a4:	d003      	beq.n	80070ae <__swsetup_r+0x9a>
 80070a6:	4621      	mov	r1, r4
 80070a8:	4630      	mov	r0, r6
 80070aa:	f001 f811 	bl	80080d0 <__smakebuf_r>
 80070ae:	89a2      	ldrh	r2, [r4, #12]
 80070b0:	f012 0301 	ands.w	r3, r2, #1
 80070b4:	d00c      	beq.n	80070d0 <__swsetup_r+0xbc>
 80070b6:	2300      	movs	r3, #0
 80070b8:	60a3      	str	r3, [r4, #8]
 80070ba:	6963      	ldr	r3, [r4, #20]
 80070bc:	425b      	negs	r3, r3
 80070be:	61a3      	str	r3, [r4, #24]
 80070c0:	6923      	ldr	r3, [r4, #16]
 80070c2:	b953      	cbnz	r3, 80070da <__swsetup_r+0xc6>
 80070c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80070cc:	d1ba      	bne.n	8007044 <__swsetup_r+0x30>
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	0792      	lsls	r2, r2, #30
 80070d2:	bf58      	it	pl
 80070d4:	6963      	ldrpl	r3, [r4, #20]
 80070d6:	60a3      	str	r3, [r4, #8]
 80070d8:	e7f2      	b.n	80070c0 <__swsetup_r+0xac>
 80070da:	2000      	movs	r0, #0
 80070dc:	e7f7      	b.n	80070ce <__swsetup_r+0xba>
 80070de:	bf00      	nop
 80070e0:	2000007c 	.word	0x2000007c
 80070e4:	0800ab30 	.word	0x0800ab30
 80070e8:	0800ab50 	.word	0x0800ab50
 80070ec:	0800ab10 	.word	0x0800ab10

080070f0 <quorem>:
 80070f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	6903      	ldr	r3, [r0, #16]
 80070f6:	690c      	ldr	r4, [r1, #16]
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	4680      	mov	r8, r0
 80070fc:	f2c0 8082 	blt.w	8007204 <quorem+0x114>
 8007100:	3c01      	subs	r4, #1
 8007102:	f101 0714 	add.w	r7, r1, #20
 8007106:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800710a:	f100 0614 	add.w	r6, r0, #20
 800710e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007112:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007116:	eb06 030c 	add.w	r3, r6, ip
 800711a:	3501      	adds	r5, #1
 800711c:	eb07 090c 	add.w	r9, r7, ip
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	fbb0 f5f5 	udiv	r5, r0, r5
 8007126:	b395      	cbz	r5, 800718e <quorem+0x9e>
 8007128:	f04f 0a00 	mov.w	sl, #0
 800712c:	4638      	mov	r0, r7
 800712e:	46b6      	mov	lr, r6
 8007130:	46d3      	mov	fp, sl
 8007132:	f850 2b04 	ldr.w	r2, [r0], #4
 8007136:	b293      	uxth	r3, r2
 8007138:	fb05 a303 	mla	r3, r5, r3, sl
 800713c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007140:	b29b      	uxth	r3, r3
 8007142:	ebab 0303 	sub.w	r3, fp, r3
 8007146:	0c12      	lsrs	r2, r2, #16
 8007148:	f8de b000 	ldr.w	fp, [lr]
 800714c:	fb05 a202 	mla	r2, r5, r2, sl
 8007150:	fa13 f38b 	uxtah	r3, r3, fp
 8007154:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007158:	fa1f fb82 	uxth.w	fp, r2
 800715c:	f8de 2000 	ldr.w	r2, [lr]
 8007160:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007168:	b29b      	uxth	r3, r3
 800716a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800716e:	4581      	cmp	r9, r0
 8007170:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007174:	f84e 3b04 	str.w	r3, [lr], #4
 8007178:	d2db      	bcs.n	8007132 <quorem+0x42>
 800717a:	f856 300c 	ldr.w	r3, [r6, ip]
 800717e:	b933      	cbnz	r3, 800718e <quorem+0x9e>
 8007180:	9b01      	ldr	r3, [sp, #4]
 8007182:	3b04      	subs	r3, #4
 8007184:	429e      	cmp	r6, r3
 8007186:	461a      	mov	r2, r3
 8007188:	d330      	bcc.n	80071ec <quorem+0xfc>
 800718a:	f8c8 4010 	str.w	r4, [r8, #16]
 800718e:	4640      	mov	r0, r8
 8007190:	f001 f9fc 	bl	800858c <__mcmp>
 8007194:	2800      	cmp	r0, #0
 8007196:	db25      	blt.n	80071e4 <quorem+0xf4>
 8007198:	3501      	adds	r5, #1
 800719a:	4630      	mov	r0, r6
 800719c:	f04f 0c00 	mov.w	ip, #0
 80071a0:	f857 2b04 	ldr.w	r2, [r7], #4
 80071a4:	f8d0 e000 	ldr.w	lr, [r0]
 80071a8:	b293      	uxth	r3, r2
 80071aa:	ebac 0303 	sub.w	r3, ip, r3
 80071ae:	0c12      	lsrs	r2, r2, #16
 80071b0:	fa13 f38e 	uxtah	r3, r3, lr
 80071b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071bc:	b29b      	uxth	r3, r3
 80071be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071c2:	45b9      	cmp	r9, r7
 80071c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071c8:	f840 3b04 	str.w	r3, [r0], #4
 80071cc:	d2e8      	bcs.n	80071a0 <quorem+0xb0>
 80071ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80071d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80071d6:	b92a      	cbnz	r2, 80071e4 <quorem+0xf4>
 80071d8:	3b04      	subs	r3, #4
 80071da:	429e      	cmp	r6, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	d30b      	bcc.n	80071f8 <quorem+0x108>
 80071e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80071e4:	4628      	mov	r0, r5
 80071e6:	b003      	add	sp, #12
 80071e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	3b04      	subs	r3, #4
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	d1ca      	bne.n	800718a <quorem+0x9a>
 80071f4:	3c01      	subs	r4, #1
 80071f6:	e7c5      	b.n	8007184 <quorem+0x94>
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	3b04      	subs	r3, #4
 80071fc:	2a00      	cmp	r2, #0
 80071fe:	d1ef      	bne.n	80071e0 <quorem+0xf0>
 8007200:	3c01      	subs	r4, #1
 8007202:	e7ea      	b.n	80071da <quorem+0xea>
 8007204:	2000      	movs	r0, #0
 8007206:	e7ee      	b.n	80071e6 <quorem+0xf6>

08007208 <_dtoa_r>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	ec57 6b10 	vmov	r6, r7, d0
 8007210:	b097      	sub	sp, #92	; 0x5c
 8007212:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007214:	9106      	str	r1, [sp, #24]
 8007216:	4604      	mov	r4, r0
 8007218:	920b      	str	r2, [sp, #44]	; 0x2c
 800721a:	9312      	str	r3, [sp, #72]	; 0x48
 800721c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007220:	e9cd 6700 	strd	r6, r7, [sp]
 8007224:	b93d      	cbnz	r5, 8007236 <_dtoa_r+0x2e>
 8007226:	2010      	movs	r0, #16
 8007228:	f000 ff92 	bl	8008150 <malloc>
 800722c:	6260      	str	r0, [r4, #36]	; 0x24
 800722e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007232:	6005      	str	r5, [r0, #0]
 8007234:	60c5      	str	r5, [r0, #12]
 8007236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007238:	6819      	ldr	r1, [r3, #0]
 800723a:	b151      	cbz	r1, 8007252 <_dtoa_r+0x4a>
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	604a      	str	r2, [r1, #4]
 8007240:	2301      	movs	r3, #1
 8007242:	4093      	lsls	r3, r2
 8007244:	608b      	str	r3, [r1, #8]
 8007246:	4620      	mov	r0, r4
 8007248:	f000 ffbe 	bl	80081c8 <_Bfree>
 800724c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	1e3b      	subs	r3, r7, #0
 8007254:	bfbb      	ittet	lt
 8007256:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800725a:	9301      	strlt	r3, [sp, #4]
 800725c:	2300      	movge	r3, #0
 800725e:	2201      	movlt	r2, #1
 8007260:	bfac      	ite	ge
 8007262:	f8c8 3000 	strge.w	r3, [r8]
 8007266:	f8c8 2000 	strlt.w	r2, [r8]
 800726a:	4baf      	ldr	r3, [pc, #700]	; (8007528 <_dtoa_r+0x320>)
 800726c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007270:	ea33 0308 	bics.w	r3, r3, r8
 8007274:	d114      	bne.n	80072a0 <_dtoa_r+0x98>
 8007276:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007278:	f242 730f 	movw	r3, #9999	; 0x270f
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	9b00      	ldr	r3, [sp, #0]
 8007280:	b923      	cbnz	r3, 800728c <_dtoa_r+0x84>
 8007282:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007286:	2800      	cmp	r0, #0
 8007288:	f000 8542 	beq.w	8007d10 <_dtoa_r+0xb08>
 800728c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800728e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800753c <_dtoa_r+0x334>
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8544 	beq.w	8007d20 <_dtoa_r+0xb18>
 8007298:	f10b 0303 	add.w	r3, fp, #3
 800729c:	f000 bd3e 	b.w	8007d1c <_dtoa_r+0xb14>
 80072a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072a4:	2200      	movs	r2, #0
 80072a6:	2300      	movs	r3, #0
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 fe0e 	bl	8000ecc <__aeabi_dcmpeq>
 80072b0:	4681      	mov	r9, r0
 80072b2:	b168      	cbz	r0, 80072d0 <_dtoa_r+0xc8>
 80072b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072b6:	2301      	movs	r3, #1
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8524 	beq.w	8007d0a <_dtoa_r+0xb02>
 80072c2:	4b9a      	ldr	r3, [pc, #616]	; (800752c <_dtoa_r+0x324>)
 80072c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072c6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	f000 bd28 	b.w	8007d20 <_dtoa_r+0xb18>
 80072d0:	aa14      	add	r2, sp, #80	; 0x50
 80072d2:	a915      	add	r1, sp, #84	; 0x54
 80072d4:	ec47 6b10 	vmov	d0, r6, r7
 80072d8:	4620      	mov	r0, r4
 80072da:	f001 f9ce 	bl	800867a <__d2b>
 80072de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80072e2:	9004      	str	r0, [sp, #16]
 80072e4:	2d00      	cmp	r5, #0
 80072e6:	d07c      	beq.n	80073e2 <_dtoa_r+0x1da>
 80072e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80072f0:	46b2      	mov	sl, r6
 80072f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80072f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80072fe:	2200      	movs	r2, #0
 8007300:	4b8b      	ldr	r3, [pc, #556]	; (8007530 <_dtoa_r+0x328>)
 8007302:	4650      	mov	r0, sl
 8007304:	4659      	mov	r1, fp
 8007306:	f7f8 ff6f 	bl	80001e8 <__aeabi_dsub>
 800730a:	a381      	add	r3, pc, #516	; (adr r3, 8007510 <_dtoa_r+0x308>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f7f9 f922 	bl	8000558 <__aeabi_dmul>
 8007314:	a380      	add	r3, pc, #512	; (adr r3, 8007518 <_dtoa_r+0x310>)
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f7f8 ff67 	bl	80001ec <__adddf3>
 800731e:	4606      	mov	r6, r0
 8007320:	4628      	mov	r0, r5
 8007322:	460f      	mov	r7, r1
 8007324:	f7f9 f8ae 	bl	8000484 <__aeabi_i2d>
 8007328:	a37d      	add	r3, pc, #500	; (adr r3, 8007520 <_dtoa_r+0x318>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f7f9 f913 	bl	8000558 <__aeabi_dmul>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	4630      	mov	r0, r6
 8007338:	4639      	mov	r1, r7
 800733a:	f7f8 ff57 	bl	80001ec <__adddf3>
 800733e:	4606      	mov	r6, r0
 8007340:	460f      	mov	r7, r1
 8007342:	f7f9 fb1b 	bl	800097c <__aeabi_d2iz>
 8007346:	2200      	movs	r2, #0
 8007348:	4682      	mov	sl, r0
 800734a:	2300      	movs	r3, #0
 800734c:	4630      	mov	r0, r6
 800734e:	4639      	mov	r1, r7
 8007350:	f7f9 fdc6 	bl	8000ee0 <__aeabi_dcmplt>
 8007354:	b148      	cbz	r0, 800736a <_dtoa_r+0x162>
 8007356:	4650      	mov	r0, sl
 8007358:	f7f9 f894 	bl	8000484 <__aeabi_i2d>
 800735c:	4632      	mov	r2, r6
 800735e:	463b      	mov	r3, r7
 8007360:	f7f9 fdb4 	bl	8000ecc <__aeabi_dcmpeq>
 8007364:	b908      	cbnz	r0, 800736a <_dtoa_r+0x162>
 8007366:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800736a:	f1ba 0f16 	cmp.w	sl, #22
 800736e:	d859      	bhi.n	8007424 <_dtoa_r+0x21c>
 8007370:	4970      	ldr	r1, [pc, #448]	; (8007534 <_dtoa_r+0x32c>)
 8007372:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007376:	e9dd 2300 	ldrd	r2, r3, [sp]
 800737a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800737e:	f7f9 fdcd 	bl	8000f1c <__aeabi_dcmpgt>
 8007382:	2800      	cmp	r0, #0
 8007384:	d050      	beq.n	8007428 <_dtoa_r+0x220>
 8007386:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800738a:	2300      	movs	r3, #0
 800738c:	930f      	str	r3, [sp, #60]	; 0x3c
 800738e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007390:	1b5d      	subs	r5, r3, r5
 8007392:	f1b5 0801 	subs.w	r8, r5, #1
 8007396:	bf49      	itett	mi
 8007398:	f1c5 0301 	rsbmi	r3, r5, #1
 800739c:	2300      	movpl	r3, #0
 800739e:	9305      	strmi	r3, [sp, #20]
 80073a0:	f04f 0800 	movmi.w	r8, #0
 80073a4:	bf58      	it	pl
 80073a6:	9305      	strpl	r3, [sp, #20]
 80073a8:	f1ba 0f00 	cmp.w	sl, #0
 80073ac:	db3e      	blt.n	800742c <_dtoa_r+0x224>
 80073ae:	2300      	movs	r3, #0
 80073b0:	44d0      	add	r8, sl
 80073b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80073b6:	9307      	str	r3, [sp, #28]
 80073b8:	9b06      	ldr	r3, [sp, #24]
 80073ba:	2b09      	cmp	r3, #9
 80073bc:	f200 8090 	bhi.w	80074e0 <_dtoa_r+0x2d8>
 80073c0:	2b05      	cmp	r3, #5
 80073c2:	bfc4      	itt	gt
 80073c4:	3b04      	subgt	r3, #4
 80073c6:	9306      	strgt	r3, [sp, #24]
 80073c8:	9b06      	ldr	r3, [sp, #24]
 80073ca:	f1a3 0302 	sub.w	r3, r3, #2
 80073ce:	bfcc      	ite	gt
 80073d0:	2500      	movgt	r5, #0
 80073d2:	2501      	movle	r5, #1
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	f200 808f 	bhi.w	80074f8 <_dtoa_r+0x2f0>
 80073da:	e8df f003 	tbb	[pc, r3]
 80073de:	7f7d      	.short	0x7f7d
 80073e0:	7131      	.short	0x7131
 80073e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80073e6:	441d      	add	r5, r3
 80073e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80073ec:	2820      	cmp	r0, #32
 80073ee:	dd13      	ble.n	8007418 <_dtoa_r+0x210>
 80073f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80073f4:	9b00      	ldr	r3, [sp, #0]
 80073f6:	fa08 f800 	lsl.w	r8, r8, r0
 80073fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80073fe:	fa23 f000 	lsr.w	r0, r3, r0
 8007402:	ea48 0000 	orr.w	r0, r8, r0
 8007406:	f7f9 f82d 	bl	8000464 <__aeabi_ui2d>
 800740a:	2301      	movs	r3, #1
 800740c:	4682      	mov	sl, r0
 800740e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007412:	3d01      	subs	r5, #1
 8007414:	9313      	str	r3, [sp, #76]	; 0x4c
 8007416:	e772      	b.n	80072fe <_dtoa_r+0xf6>
 8007418:	9b00      	ldr	r3, [sp, #0]
 800741a:	f1c0 0020 	rsb	r0, r0, #32
 800741e:	fa03 f000 	lsl.w	r0, r3, r0
 8007422:	e7f0      	b.n	8007406 <_dtoa_r+0x1fe>
 8007424:	2301      	movs	r3, #1
 8007426:	e7b1      	b.n	800738c <_dtoa_r+0x184>
 8007428:	900f      	str	r0, [sp, #60]	; 0x3c
 800742a:	e7b0      	b.n	800738e <_dtoa_r+0x186>
 800742c:	9b05      	ldr	r3, [sp, #20]
 800742e:	eba3 030a 	sub.w	r3, r3, sl
 8007432:	9305      	str	r3, [sp, #20]
 8007434:	f1ca 0300 	rsb	r3, sl, #0
 8007438:	9307      	str	r3, [sp, #28]
 800743a:	2300      	movs	r3, #0
 800743c:	930e      	str	r3, [sp, #56]	; 0x38
 800743e:	e7bb      	b.n	80073b8 <_dtoa_r+0x1b0>
 8007440:	2301      	movs	r3, #1
 8007442:	930a      	str	r3, [sp, #40]	; 0x28
 8007444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007446:	2b00      	cmp	r3, #0
 8007448:	dd59      	ble.n	80074fe <_dtoa_r+0x2f6>
 800744a:	9302      	str	r3, [sp, #8]
 800744c:	4699      	mov	r9, r3
 800744e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007450:	2200      	movs	r2, #0
 8007452:	6072      	str	r2, [r6, #4]
 8007454:	2204      	movs	r2, #4
 8007456:	f102 0014 	add.w	r0, r2, #20
 800745a:	4298      	cmp	r0, r3
 800745c:	6871      	ldr	r1, [r6, #4]
 800745e:	d953      	bls.n	8007508 <_dtoa_r+0x300>
 8007460:	4620      	mov	r0, r4
 8007462:	f000 fe7d 	bl	8008160 <_Balloc>
 8007466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007468:	6030      	str	r0, [r6, #0]
 800746a:	f1b9 0f0e 	cmp.w	r9, #14
 800746e:	f8d3 b000 	ldr.w	fp, [r3]
 8007472:	f200 80e6 	bhi.w	8007642 <_dtoa_r+0x43a>
 8007476:	2d00      	cmp	r5, #0
 8007478:	f000 80e3 	beq.w	8007642 <_dtoa_r+0x43a>
 800747c:	ed9d 7b00 	vldr	d7, [sp]
 8007480:	f1ba 0f00 	cmp.w	sl, #0
 8007484:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007488:	dd74      	ble.n	8007574 <_dtoa_r+0x36c>
 800748a:	4a2a      	ldr	r2, [pc, #168]	; (8007534 <_dtoa_r+0x32c>)
 800748c:	f00a 030f 	and.w	r3, sl, #15
 8007490:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007494:	ed93 7b00 	vldr	d7, [r3]
 8007498:	ea4f 162a 	mov.w	r6, sl, asr #4
 800749c:	06f0      	lsls	r0, r6, #27
 800749e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80074a2:	d565      	bpl.n	8007570 <_dtoa_r+0x368>
 80074a4:	4b24      	ldr	r3, [pc, #144]	; (8007538 <_dtoa_r+0x330>)
 80074a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074ae:	f7f9 f97d 	bl	80007ac <__aeabi_ddiv>
 80074b2:	e9cd 0100 	strd	r0, r1, [sp]
 80074b6:	f006 060f 	and.w	r6, r6, #15
 80074ba:	2503      	movs	r5, #3
 80074bc:	4f1e      	ldr	r7, [pc, #120]	; (8007538 <_dtoa_r+0x330>)
 80074be:	e04c      	b.n	800755a <_dtoa_r+0x352>
 80074c0:	2301      	movs	r3, #1
 80074c2:	930a      	str	r3, [sp, #40]	; 0x28
 80074c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c6:	4453      	add	r3, sl
 80074c8:	f103 0901 	add.w	r9, r3, #1
 80074cc:	9302      	str	r3, [sp, #8]
 80074ce:	464b      	mov	r3, r9
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	bfb8      	it	lt
 80074d4:	2301      	movlt	r3, #1
 80074d6:	e7ba      	b.n	800744e <_dtoa_r+0x246>
 80074d8:	2300      	movs	r3, #0
 80074da:	e7b2      	b.n	8007442 <_dtoa_r+0x23a>
 80074dc:	2300      	movs	r3, #0
 80074de:	e7f0      	b.n	80074c2 <_dtoa_r+0x2ba>
 80074e0:	2501      	movs	r5, #1
 80074e2:	2300      	movs	r3, #0
 80074e4:	9306      	str	r3, [sp, #24]
 80074e6:	950a      	str	r5, [sp, #40]	; 0x28
 80074e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ec:	9302      	str	r3, [sp, #8]
 80074ee:	4699      	mov	r9, r3
 80074f0:	2200      	movs	r2, #0
 80074f2:	2312      	movs	r3, #18
 80074f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80074f6:	e7aa      	b.n	800744e <_dtoa_r+0x246>
 80074f8:	2301      	movs	r3, #1
 80074fa:	930a      	str	r3, [sp, #40]	; 0x28
 80074fc:	e7f4      	b.n	80074e8 <_dtoa_r+0x2e0>
 80074fe:	2301      	movs	r3, #1
 8007500:	9302      	str	r3, [sp, #8]
 8007502:	4699      	mov	r9, r3
 8007504:	461a      	mov	r2, r3
 8007506:	e7f5      	b.n	80074f4 <_dtoa_r+0x2ec>
 8007508:	3101      	adds	r1, #1
 800750a:	6071      	str	r1, [r6, #4]
 800750c:	0052      	lsls	r2, r2, #1
 800750e:	e7a2      	b.n	8007456 <_dtoa_r+0x24e>
 8007510:	636f4361 	.word	0x636f4361
 8007514:	3fd287a7 	.word	0x3fd287a7
 8007518:	8b60c8b3 	.word	0x8b60c8b3
 800751c:	3fc68a28 	.word	0x3fc68a28
 8007520:	509f79fb 	.word	0x509f79fb
 8007524:	3fd34413 	.word	0x3fd34413
 8007528:	7ff00000 	.word	0x7ff00000
 800752c:	0800aadd 	.word	0x0800aadd
 8007530:	3ff80000 	.word	0x3ff80000
 8007534:	0800ab98 	.word	0x0800ab98
 8007538:	0800ab70 	.word	0x0800ab70
 800753c:	0800ab09 	.word	0x0800ab09
 8007540:	07f1      	lsls	r1, r6, #31
 8007542:	d508      	bpl.n	8007556 <_dtoa_r+0x34e>
 8007544:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754c:	f7f9 f804 	bl	8000558 <__aeabi_dmul>
 8007550:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007554:	3501      	adds	r5, #1
 8007556:	1076      	asrs	r6, r6, #1
 8007558:	3708      	adds	r7, #8
 800755a:	2e00      	cmp	r6, #0
 800755c:	d1f0      	bne.n	8007540 <_dtoa_r+0x338>
 800755e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007562:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007566:	f7f9 f921 	bl	80007ac <__aeabi_ddiv>
 800756a:	e9cd 0100 	strd	r0, r1, [sp]
 800756e:	e01a      	b.n	80075a6 <_dtoa_r+0x39e>
 8007570:	2502      	movs	r5, #2
 8007572:	e7a3      	b.n	80074bc <_dtoa_r+0x2b4>
 8007574:	f000 80a0 	beq.w	80076b8 <_dtoa_r+0x4b0>
 8007578:	f1ca 0600 	rsb	r6, sl, #0
 800757c:	4b9f      	ldr	r3, [pc, #636]	; (80077fc <_dtoa_r+0x5f4>)
 800757e:	4fa0      	ldr	r7, [pc, #640]	; (8007800 <_dtoa_r+0x5f8>)
 8007580:	f006 020f 	and.w	r2, r6, #15
 8007584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007590:	f7f8 ffe2 	bl	8000558 <__aeabi_dmul>
 8007594:	e9cd 0100 	strd	r0, r1, [sp]
 8007598:	1136      	asrs	r6, r6, #4
 800759a:	2300      	movs	r3, #0
 800759c:	2502      	movs	r5, #2
 800759e:	2e00      	cmp	r6, #0
 80075a0:	d17f      	bne.n	80076a2 <_dtoa_r+0x49a>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e1      	bne.n	800756a <_dtoa_r+0x362>
 80075a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 8087 	beq.w	80076bc <_dtoa_r+0x4b4>
 80075ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075b2:	2200      	movs	r2, #0
 80075b4:	4b93      	ldr	r3, [pc, #588]	; (8007804 <_dtoa_r+0x5fc>)
 80075b6:	4630      	mov	r0, r6
 80075b8:	4639      	mov	r1, r7
 80075ba:	f7f9 fc91 	bl	8000ee0 <__aeabi_dcmplt>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d07c      	beq.n	80076bc <_dtoa_r+0x4b4>
 80075c2:	f1b9 0f00 	cmp.w	r9, #0
 80075c6:	d079      	beq.n	80076bc <_dtoa_r+0x4b4>
 80075c8:	9b02      	ldr	r3, [sp, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	dd35      	ble.n	800763a <_dtoa_r+0x432>
 80075ce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80075d2:	9308      	str	r3, [sp, #32]
 80075d4:	4639      	mov	r1, r7
 80075d6:	2200      	movs	r2, #0
 80075d8:	4b8b      	ldr	r3, [pc, #556]	; (8007808 <_dtoa_r+0x600>)
 80075da:	4630      	mov	r0, r6
 80075dc:	f7f8 ffbc 	bl	8000558 <__aeabi_dmul>
 80075e0:	e9cd 0100 	strd	r0, r1, [sp]
 80075e4:	9f02      	ldr	r7, [sp, #8]
 80075e6:	3501      	adds	r5, #1
 80075e8:	4628      	mov	r0, r5
 80075ea:	f7f8 ff4b 	bl	8000484 <__aeabi_i2d>
 80075ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075f2:	f7f8 ffb1 	bl	8000558 <__aeabi_dmul>
 80075f6:	2200      	movs	r2, #0
 80075f8:	4b84      	ldr	r3, [pc, #528]	; (800780c <_dtoa_r+0x604>)
 80075fa:	f7f8 fdf7 	bl	80001ec <__adddf3>
 80075fe:	4605      	mov	r5, r0
 8007600:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007604:	2f00      	cmp	r7, #0
 8007606:	d15d      	bne.n	80076c4 <_dtoa_r+0x4bc>
 8007608:	2200      	movs	r2, #0
 800760a:	4b81      	ldr	r3, [pc, #516]	; (8007810 <_dtoa_r+0x608>)
 800760c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007610:	f7f8 fdea 	bl	80001e8 <__aeabi_dsub>
 8007614:	462a      	mov	r2, r5
 8007616:	4633      	mov	r3, r6
 8007618:	e9cd 0100 	strd	r0, r1, [sp]
 800761c:	f7f9 fc7e 	bl	8000f1c <__aeabi_dcmpgt>
 8007620:	2800      	cmp	r0, #0
 8007622:	f040 8288 	bne.w	8007b36 <_dtoa_r+0x92e>
 8007626:	462a      	mov	r2, r5
 8007628:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800762c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007630:	f7f9 fc56 	bl	8000ee0 <__aeabi_dcmplt>
 8007634:	2800      	cmp	r0, #0
 8007636:	f040 827c 	bne.w	8007b32 <_dtoa_r+0x92a>
 800763a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800763e:	e9cd 2300 	strd	r2, r3, [sp]
 8007642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007644:	2b00      	cmp	r3, #0
 8007646:	f2c0 8150 	blt.w	80078ea <_dtoa_r+0x6e2>
 800764a:	f1ba 0f0e 	cmp.w	sl, #14
 800764e:	f300 814c 	bgt.w	80078ea <_dtoa_r+0x6e2>
 8007652:	4b6a      	ldr	r3, [pc, #424]	; (80077fc <_dtoa_r+0x5f4>)
 8007654:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007658:	ed93 7b00 	vldr	d7, [r3]
 800765c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765e:	2b00      	cmp	r3, #0
 8007660:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007664:	f280 80d8 	bge.w	8007818 <_dtoa_r+0x610>
 8007668:	f1b9 0f00 	cmp.w	r9, #0
 800766c:	f300 80d4 	bgt.w	8007818 <_dtoa_r+0x610>
 8007670:	f040 825e 	bne.w	8007b30 <_dtoa_r+0x928>
 8007674:	2200      	movs	r2, #0
 8007676:	4b66      	ldr	r3, [pc, #408]	; (8007810 <_dtoa_r+0x608>)
 8007678:	ec51 0b17 	vmov	r0, r1, d7
 800767c:	f7f8 ff6c 	bl	8000558 <__aeabi_dmul>
 8007680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007684:	f7f9 fc40 	bl	8000f08 <__aeabi_dcmpge>
 8007688:	464f      	mov	r7, r9
 800768a:	464e      	mov	r6, r9
 800768c:	2800      	cmp	r0, #0
 800768e:	f040 8234 	bne.w	8007afa <_dtoa_r+0x8f2>
 8007692:	2331      	movs	r3, #49	; 0x31
 8007694:	f10b 0501 	add.w	r5, fp, #1
 8007698:	f88b 3000 	strb.w	r3, [fp]
 800769c:	f10a 0a01 	add.w	sl, sl, #1
 80076a0:	e22f      	b.n	8007b02 <_dtoa_r+0x8fa>
 80076a2:	07f2      	lsls	r2, r6, #31
 80076a4:	d505      	bpl.n	80076b2 <_dtoa_r+0x4aa>
 80076a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076aa:	f7f8 ff55 	bl	8000558 <__aeabi_dmul>
 80076ae:	3501      	adds	r5, #1
 80076b0:	2301      	movs	r3, #1
 80076b2:	1076      	asrs	r6, r6, #1
 80076b4:	3708      	adds	r7, #8
 80076b6:	e772      	b.n	800759e <_dtoa_r+0x396>
 80076b8:	2502      	movs	r5, #2
 80076ba:	e774      	b.n	80075a6 <_dtoa_r+0x39e>
 80076bc:	f8cd a020 	str.w	sl, [sp, #32]
 80076c0:	464f      	mov	r7, r9
 80076c2:	e791      	b.n	80075e8 <_dtoa_r+0x3e0>
 80076c4:	4b4d      	ldr	r3, [pc, #308]	; (80077fc <_dtoa_r+0x5f4>)
 80076c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80076ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d047      	beq.n	8007764 <_dtoa_r+0x55c>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	2000      	movs	r0, #0
 80076da:	494e      	ldr	r1, [pc, #312]	; (8007814 <_dtoa_r+0x60c>)
 80076dc:	f7f9 f866 	bl	80007ac <__aeabi_ddiv>
 80076e0:	462a      	mov	r2, r5
 80076e2:	4633      	mov	r3, r6
 80076e4:	f7f8 fd80 	bl	80001e8 <__aeabi_dsub>
 80076e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80076ec:	465d      	mov	r5, fp
 80076ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076f2:	f7f9 f943 	bl	800097c <__aeabi_d2iz>
 80076f6:	4606      	mov	r6, r0
 80076f8:	f7f8 fec4 	bl	8000484 <__aeabi_i2d>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007704:	f7f8 fd70 	bl	80001e8 <__aeabi_dsub>
 8007708:	3630      	adds	r6, #48	; 0x30
 800770a:	f805 6b01 	strb.w	r6, [r5], #1
 800770e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007712:	e9cd 0100 	strd	r0, r1, [sp]
 8007716:	f7f9 fbe3 	bl	8000ee0 <__aeabi_dcmplt>
 800771a:	2800      	cmp	r0, #0
 800771c:	d163      	bne.n	80077e6 <_dtoa_r+0x5de>
 800771e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007722:	2000      	movs	r0, #0
 8007724:	4937      	ldr	r1, [pc, #220]	; (8007804 <_dtoa_r+0x5fc>)
 8007726:	f7f8 fd5f 	bl	80001e8 <__aeabi_dsub>
 800772a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800772e:	f7f9 fbd7 	bl	8000ee0 <__aeabi_dcmplt>
 8007732:	2800      	cmp	r0, #0
 8007734:	f040 80b7 	bne.w	80078a6 <_dtoa_r+0x69e>
 8007738:	eba5 030b 	sub.w	r3, r5, fp
 800773c:	429f      	cmp	r7, r3
 800773e:	f77f af7c 	ble.w	800763a <_dtoa_r+0x432>
 8007742:	2200      	movs	r2, #0
 8007744:	4b30      	ldr	r3, [pc, #192]	; (8007808 <_dtoa_r+0x600>)
 8007746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800774a:	f7f8 ff05 	bl	8000558 <__aeabi_dmul>
 800774e:	2200      	movs	r2, #0
 8007750:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007754:	4b2c      	ldr	r3, [pc, #176]	; (8007808 <_dtoa_r+0x600>)
 8007756:	e9dd 0100 	ldrd	r0, r1, [sp]
 800775a:	f7f8 fefd 	bl	8000558 <__aeabi_dmul>
 800775e:	e9cd 0100 	strd	r0, r1, [sp]
 8007762:	e7c4      	b.n	80076ee <_dtoa_r+0x4e6>
 8007764:	462a      	mov	r2, r5
 8007766:	4633      	mov	r3, r6
 8007768:	f7f8 fef6 	bl	8000558 <__aeabi_dmul>
 800776c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007770:	eb0b 0507 	add.w	r5, fp, r7
 8007774:	465e      	mov	r6, fp
 8007776:	e9dd 0100 	ldrd	r0, r1, [sp]
 800777a:	f7f9 f8ff 	bl	800097c <__aeabi_d2iz>
 800777e:	4607      	mov	r7, r0
 8007780:	f7f8 fe80 	bl	8000484 <__aeabi_i2d>
 8007784:	3730      	adds	r7, #48	; 0x30
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800778e:	f7f8 fd2b 	bl	80001e8 <__aeabi_dsub>
 8007792:	f806 7b01 	strb.w	r7, [r6], #1
 8007796:	42ae      	cmp	r6, r5
 8007798:	e9cd 0100 	strd	r0, r1, [sp]
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	d126      	bne.n	80077f0 <_dtoa_r+0x5e8>
 80077a2:	4b1c      	ldr	r3, [pc, #112]	; (8007814 <_dtoa_r+0x60c>)
 80077a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077a8:	f7f8 fd20 	bl	80001ec <__adddf3>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077b4:	f7f9 fbb2 	bl	8000f1c <__aeabi_dcmpgt>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d174      	bne.n	80078a6 <_dtoa_r+0x69e>
 80077bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077c0:	2000      	movs	r0, #0
 80077c2:	4914      	ldr	r1, [pc, #80]	; (8007814 <_dtoa_r+0x60c>)
 80077c4:	f7f8 fd10 	bl	80001e8 <__aeabi_dsub>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077d0:	f7f9 fb86 	bl	8000ee0 <__aeabi_dcmplt>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	f43f af30 	beq.w	800763a <_dtoa_r+0x432>
 80077da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077de:	2b30      	cmp	r3, #48	; 0x30
 80077e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80077e4:	d002      	beq.n	80077ec <_dtoa_r+0x5e4>
 80077e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80077ea:	e04a      	b.n	8007882 <_dtoa_r+0x67a>
 80077ec:	4615      	mov	r5, r2
 80077ee:	e7f4      	b.n	80077da <_dtoa_r+0x5d2>
 80077f0:	4b05      	ldr	r3, [pc, #20]	; (8007808 <_dtoa_r+0x600>)
 80077f2:	f7f8 feb1 	bl	8000558 <__aeabi_dmul>
 80077f6:	e9cd 0100 	strd	r0, r1, [sp]
 80077fa:	e7bc      	b.n	8007776 <_dtoa_r+0x56e>
 80077fc:	0800ab98 	.word	0x0800ab98
 8007800:	0800ab70 	.word	0x0800ab70
 8007804:	3ff00000 	.word	0x3ff00000
 8007808:	40240000 	.word	0x40240000
 800780c:	401c0000 	.word	0x401c0000
 8007810:	40140000 	.word	0x40140000
 8007814:	3fe00000 	.word	0x3fe00000
 8007818:	e9dd 6700 	ldrd	r6, r7, [sp]
 800781c:	465d      	mov	r5, fp
 800781e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007822:	4630      	mov	r0, r6
 8007824:	4639      	mov	r1, r7
 8007826:	f7f8 ffc1 	bl	80007ac <__aeabi_ddiv>
 800782a:	f7f9 f8a7 	bl	800097c <__aeabi_d2iz>
 800782e:	4680      	mov	r8, r0
 8007830:	f7f8 fe28 	bl	8000484 <__aeabi_i2d>
 8007834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007838:	f7f8 fe8e 	bl	8000558 <__aeabi_dmul>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007848:	f7f8 fcce 	bl	80001e8 <__aeabi_dsub>
 800784c:	f805 6b01 	strb.w	r6, [r5], #1
 8007850:	eba5 060b 	sub.w	r6, r5, fp
 8007854:	45b1      	cmp	r9, r6
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	d139      	bne.n	80078d0 <_dtoa_r+0x6c8>
 800785c:	f7f8 fcc6 	bl	80001ec <__adddf3>
 8007860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	f7f9 fb58 	bl	8000f1c <__aeabi_dcmpgt>
 800786c:	b9c8      	cbnz	r0, 80078a2 <_dtoa_r+0x69a>
 800786e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f9 fb29 	bl	8000ecc <__aeabi_dcmpeq>
 800787a:	b110      	cbz	r0, 8007882 <_dtoa_r+0x67a>
 800787c:	f018 0f01 	tst.w	r8, #1
 8007880:	d10f      	bne.n	80078a2 <_dtoa_r+0x69a>
 8007882:	9904      	ldr	r1, [sp, #16]
 8007884:	4620      	mov	r0, r4
 8007886:	f000 fc9f 	bl	80081c8 <_Bfree>
 800788a:	2300      	movs	r3, #0
 800788c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800788e:	702b      	strb	r3, [r5, #0]
 8007890:	f10a 0301 	add.w	r3, sl, #1
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 8241 	beq.w	8007d20 <_dtoa_r+0xb18>
 800789e:	601d      	str	r5, [r3, #0]
 80078a0:	e23e      	b.n	8007d20 <_dtoa_r+0xb18>
 80078a2:	f8cd a020 	str.w	sl, [sp, #32]
 80078a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078aa:	2a39      	cmp	r2, #57	; 0x39
 80078ac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80078b0:	d108      	bne.n	80078c4 <_dtoa_r+0x6bc>
 80078b2:	459b      	cmp	fp, r3
 80078b4:	d10a      	bne.n	80078cc <_dtoa_r+0x6c4>
 80078b6:	9b08      	ldr	r3, [sp, #32]
 80078b8:	3301      	adds	r3, #1
 80078ba:	9308      	str	r3, [sp, #32]
 80078bc:	2330      	movs	r3, #48	; 0x30
 80078be:	f88b 3000 	strb.w	r3, [fp]
 80078c2:	465b      	mov	r3, fp
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	3201      	adds	r2, #1
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	e78c      	b.n	80077e6 <_dtoa_r+0x5de>
 80078cc:	461d      	mov	r5, r3
 80078ce:	e7ea      	b.n	80078a6 <_dtoa_r+0x69e>
 80078d0:	2200      	movs	r2, #0
 80078d2:	4b9b      	ldr	r3, [pc, #620]	; (8007b40 <_dtoa_r+0x938>)
 80078d4:	f7f8 fe40 	bl	8000558 <__aeabi_dmul>
 80078d8:	2200      	movs	r2, #0
 80078da:	2300      	movs	r3, #0
 80078dc:	4606      	mov	r6, r0
 80078de:	460f      	mov	r7, r1
 80078e0:	f7f9 faf4 	bl	8000ecc <__aeabi_dcmpeq>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d09a      	beq.n	800781e <_dtoa_r+0x616>
 80078e8:	e7cb      	b.n	8007882 <_dtoa_r+0x67a>
 80078ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ec:	2a00      	cmp	r2, #0
 80078ee:	f000 808b 	beq.w	8007a08 <_dtoa_r+0x800>
 80078f2:	9a06      	ldr	r2, [sp, #24]
 80078f4:	2a01      	cmp	r2, #1
 80078f6:	dc6e      	bgt.n	80079d6 <_dtoa_r+0x7ce>
 80078f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078fa:	2a00      	cmp	r2, #0
 80078fc:	d067      	beq.n	80079ce <_dtoa_r+0x7c6>
 80078fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007902:	9f07      	ldr	r7, [sp, #28]
 8007904:	9d05      	ldr	r5, [sp, #20]
 8007906:	9a05      	ldr	r2, [sp, #20]
 8007908:	2101      	movs	r1, #1
 800790a:	441a      	add	r2, r3
 800790c:	4620      	mov	r0, r4
 800790e:	9205      	str	r2, [sp, #20]
 8007910:	4498      	add	r8, r3
 8007912:	f000 fcf9 	bl	8008308 <__i2b>
 8007916:	4606      	mov	r6, r0
 8007918:	2d00      	cmp	r5, #0
 800791a:	dd0c      	ble.n	8007936 <_dtoa_r+0x72e>
 800791c:	f1b8 0f00 	cmp.w	r8, #0
 8007920:	dd09      	ble.n	8007936 <_dtoa_r+0x72e>
 8007922:	4545      	cmp	r5, r8
 8007924:	9a05      	ldr	r2, [sp, #20]
 8007926:	462b      	mov	r3, r5
 8007928:	bfa8      	it	ge
 800792a:	4643      	movge	r3, r8
 800792c:	1ad2      	subs	r2, r2, r3
 800792e:	9205      	str	r2, [sp, #20]
 8007930:	1aed      	subs	r5, r5, r3
 8007932:	eba8 0803 	sub.w	r8, r8, r3
 8007936:	9b07      	ldr	r3, [sp, #28]
 8007938:	b1eb      	cbz	r3, 8007976 <_dtoa_r+0x76e>
 800793a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800793c:	2b00      	cmp	r3, #0
 800793e:	d067      	beq.n	8007a10 <_dtoa_r+0x808>
 8007940:	b18f      	cbz	r7, 8007966 <_dtoa_r+0x75e>
 8007942:	4631      	mov	r1, r6
 8007944:	463a      	mov	r2, r7
 8007946:	4620      	mov	r0, r4
 8007948:	f000 fd7e 	bl	8008448 <__pow5mult>
 800794c:	9a04      	ldr	r2, [sp, #16]
 800794e:	4601      	mov	r1, r0
 8007950:	4606      	mov	r6, r0
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fce1 	bl	800831a <__multiply>
 8007958:	9904      	ldr	r1, [sp, #16]
 800795a:	9008      	str	r0, [sp, #32]
 800795c:	4620      	mov	r0, r4
 800795e:	f000 fc33 	bl	80081c8 <_Bfree>
 8007962:	9b08      	ldr	r3, [sp, #32]
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	9b07      	ldr	r3, [sp, #28]
 8007968:	1bda      	subs	r2, r3, r7
 800796a:	d004      	beq.n	8007976 <_dtoa_r+0x76e>
 800796c:	9904      	ldr	r1, [sp, #16]
 800796e:	4620      	mov	r0, r4
 8007970:	f000 fd6a 	bl	8008448 <__pow5mult>
 8007974:	9004      	str	r0, [sp, #16]
 8007976:	2101      	movs	r1, #1
 8007978:	4620      	mov	r0, r4
 800797a:	f000 fcc5 	bl	8008308 <__i2b>
 800797e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007980:	4607      	mov	r7, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 81d0 	beq.w	8007d28 <_dtoa_r+0xb20>
 8007988:	461a      	mov	r2, r3
 800798a:	4601      	mov	r1, r0
 800798c:	4620      	mov	r0, r4
 800798e:	f000 fd5b 	bl	8008448 <__pow5mult>
 8007992:	9b06      	ldr	r3, [sp, #24]
 8007994:	2b01      	cmp	r3, #1
 8007996:	4607      	mov	r7, r0
 8007998:	dc40      	bgt.n	8007a1c <_dtoa_r+0x814>
 800799a:	9b00      	ldr	r3, [sp, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d139      	bne.n	8007a14 <_dtoa_r+0x80c>
 80079a0:	9b01      	ldr	r3, [sp, #4]
 80079a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d136      	bne.n	8007a18 <_dtoa_r+0x810>
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079b0:	0d1b      	lsrs	r3, r3, #20
 80079b2:	051b      	lsls	r3, r3, #20
 80079b4:	b12b      	cbz	r3, 80079c2 <_dtoa_r+0x7ba>
 80079b6:	9b05      	ldr	r3, [sp, #20]
 80079b8:	3301      	adds	r3, #1
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	f108 0801 	add.w	r8, r8, #1
 80079c0:	2301      	movs	r3, #1
 80079c2:	9307      	str	r3, [sp, #28]
 80079c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d12a      	bne.n	8007a20 <_dtoa_r+0x818>
 80079ca:	2001      	movs	r0, #1
 80079cc:	e030      	b.n	8007a30 <_dtoa_r+0x828>
 80079ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079d4:	e795      	b.n	8007902 <_dtoa_r+0x6fa>
 80079d6:	9b07      	ldr	r3, [sp, #28]
 80079d8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80079dc:	42bb      	cmp	r3, r7
 80079de:	bfbf      	itttt	lt
 80079e0:	9b07      	ldrlt	r3, [sp, #28]
 80079e2:	9707      	strlt	r7, [sp, #28]
 80079e4:	1afa      	sublt	r2, r7, r3
 80079e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80079e8:	bfbb      	ittet	lt
 80079ea:	189b      	addlt	r3, r3, r2
 80079ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80079ee:	1bdf      	subge	r7, r3, r7
 80079f0:	2700      	movlt	r7, #0
 80079f2:	f1b9 0f00 	cmp.w	r9, #0
 80079f6:	bfb5      	itete	lt
 80079f8:	9b05      	ldrlt	r3, [sp, #20]
 80079fa:	9d05      	ldrge	r5, [sp, #20]
 80079fc:	eba3 0509 	sublt.w	r5, r3, r9
 8007a00:	464b      	movge	r3, r9
 8007a02:	bfb8      	it	lt
 8007a04:	2300      	movlt	r3, #0
 8007a06:	e77e      	b.n	8007906 <_dtoa_r+0x6fe>
 8007a08:	9f07      	ldr	r7, [sp, #28]
 8007a0a:	9d05      	ldr	r5, [sp, #20]
 8007a0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007a0e:	e783      	b.n	8007918 <_dtoa_r+0x710>
 8007a10:	9a07      	ldr	r2, [sp, #28]
 8007a12:	e7ab      	b.n	800796c <_dtoa_r+0x764>
 8007a14:	2300      	movs	r3, #0
 8007a16:	e7d4      	b.n	80079c2 <_dtoa_r+0x7ba>
 8007a18:	9b00      	ldr	r3, [sp, #0]
 8007a1a:	e7d2      	b.n	80079c2 <_dtoa_r+0x7ba>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9307      	str	r3, [sp, #28]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007a26:	6918      	ldr	r0, [r3, #16]
 8007a28:	f000 fc20 	bl	800826c <__hi0bits>
 8007a2c:	f1c0 0020 	rsb	r0, r0, #32
 8007a30:	4440      	add	r0, r8
 8007a32:	f010 001f 	ands.w	r0, r0, #31
 8007a36:	d047      	beq.n	8007ac8 <_dtoa_r+0x8c0>
 8007a38:	f1c0 0320 	rsb	r3, r0, #32
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	dd3b      	ble.n	8007ab8 <_dtoa_r+0x8b0>
 8007a40:	9b05      	ldr	r3, [sp, #20]
 8007a42:	f1c0 001c 	rsb	r0, r0, #28
 8007a46:	4403      	add	r3, r0
 8007a48:	9305      	str	r3, [sp, #20]
 8007a4a:	4405      	add	r5, r0
 8007a4c:	4480      	add	r8, r0
 8007a4e:	9b05      	ldr	r3, [sp, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dd05      	ble.n	8007a60 <_dtoa_r+0x858>
 8007a54:	461a      	mov	r2, r3
 8007a56:	9904      	ldr	r1, [sp, #16]
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f000 fd43 	bl	80084e4 <__lshift>
 8007a5e:	9004      	str	r0, [sp, #16]
 8007a60:	f1b8 0f00 	cmp.w	r8, #0
 8007a64:	dd05      	ble.n	8007a72 <_dtoa_r+0x86a>
 8007a66:	4639      	mov	r1, r7
 8007a68:	4642      	mov	r2, r8
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 fd3a 	bl	80084e4 <__lshift>
 8007a70:	4607      	mov	r7, r0
 8007a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a74:	b353      	cbz	r3, 8007acc <_dtoa_r+0x8c4>
 8007a76:	4639      	mov	r1, r7
 8007a78:	9804      	ldr	r0, [sp, #16]
 8007a7a:	f000 fd87 	bl	800858c <__mcmp>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	da24      	bge.n	8007acc <_dtoa_r+0x8c4>
 8007a82:	2300      	movs	r3, #0
 8007a84:	220a      	movs	r2, #10
 8007a86:	9904      	ldr	r1, [sp, #16]
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fbb4 	bl	80081f6 <__multadd>
 8007a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a90:	9004      	str	r0, [sp, #16]
 8007a92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 814d 	beq.w	8007d36 <_dtoa_r+0xb2e>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	220a      	movs	r2, #10
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 fba7 	bl	80081f6 <__multadd>
 8007aa8:	9b02      	ldr	r3, [sp, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	4606      	mov	r6, r0
 8007aae:	dc4f      	bgt.n	8007b50 <_dtoa_r+0x948>
 8007ab0:	9b06      	ldr	r3, [sp, #24]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	dd4c      	ble.n	8007b50 <_dtoa_r+0x948>
 8007ab6:	e011      	b.n	8007adc <_dtoa_r+0x8d4>
 8007ab8:	d0c9      	beq.n	8007a4e <_dtoa_r+0x846>
 8007aba:	9a05      	ldr	r2, [sp, #20]
 8007abc:	331c      	adds	r3, #28
 8007abe:	441a      	add	r2, r3
 8007ac0:	9205      	str	r2, [sp, #20]
 8007ac2:	441d      	add	r5, r3
 8007ac4:	4498      	add	r8, r3
 8007ac6:	e7c2      	b.n	8007a4e <_dtoa_r+0x846>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	e7f6      	b.n	8007aba <_dtoa_r+0x8b2>
 8007acc:	f1b9 0f00 	cmp.w	r9, #0
 8007ad0:	dc38      	bgt.n	8007b44 <_dtoa_r+0x93c>
 8007ad2:	9b06      	ldr	r3, [sp, #24]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	dd35      	ble.n	8007b44 <_dtoa_r+0x93c>
 8007ad8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007adc:	9b02      	ldr	r3, [sp, #8]
 8007ade:	b963      	cbnz	r3, 8007afa <_dtoa_r+0x8f2>
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	2205      	movs	r2, #5
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f000 fb86 	bl	80081f6 <__multadd>
 8007aea:	4601      	mov	r1, r0
 8007aec:	4607      	mov	r7, r0
 8007aee:	9804      	ldr	r0, [sp, #16]
 8007af0:	f000 fd4c 	bl	800858c <__mcmp>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	f73f adcc 	bgt.w	8007692 <_dtoa_r+0x48a>
 8007afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afc:	465d      	mov	r5, fp
 8007afe:	ea6f 0a03 	mvn.w	sl, r3
 8007b02:	f04f 0900 	mov.w	r9, #0
 8007b06:	4639      	mov	r1, r7
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fb5d 	bl	80081c8 <_Bfree>
 8007b0e:	2e00      	cmp	r6, #0
 8007b10:	f43f aeb7 	beq.w	8007882 <_dtoa_r+0x67a>
 8007b14:	f1b9 0f00 	cmp.w	r9, #0
 8007b18:	d005      	beq.n	8007b26 <_dtoa_r+0x91e>
 8007b1a:	45b1      	cmp	r9, r6
 8007b1c:	d003      	beq.n	8007b26 <_dtoa_r+0x91e>
 8007b1e:	4649      	mov	r1, r9
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 fb51 	bl	80081c8 <_Bfree>
 8007b26:	4631      	mov	r1, r6
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 fb4d 	bl	80081c8 <_Bfree>
 8007b2e:	e6a8      	b.n	8007882 <_dtoa_r+0x67a>
 8007b30:	2700      	movs	r7, #0
 8007b32:	463e      	mov	r6, r7
 8007b34:	e7e1      	b.n	8007afa <_dtoa_r+0x8f2>
 8007b36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007b3a:	463e      	mov	r6, r7
 8007b3c:	e5a9      	b.n	8007692 <_dtoa_r+0x48a>
 8007b3e:	bf00      	nop
 8007b40:	40240000 	.word	0x40240000
 8007b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b46:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 80fa 	beq.w	8007d44 <_dtoa_r+0xb3c>
 8007b50:	2d00      	cmp	r5, #0
 8007b52:	dd05      	ble.n	8007b60 <_dtoa_r+0x958>
 8007b54:	4631      	mov	r1, r6
 8007b56:	462a      	mov	r2, r5
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 fcc3 	bl	80084e4 <__lshift>
 8007b5e:	4606      	mov	r6, r0
 8007b60:	9b07      	ldr	r3, [sp, #28]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d04c      	beq.n	8007c00 <_dtoa_r+0x9f8>
 8007b66:	6871      	ldr	r1, [r6, #4]
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 faf9 	bl	8008160 <_Balloc>
 8007b6e:	6932      	ldr	r2, [r6, #16]
 8007b70:	3202      	adds	r2, #2
 8007b72:	4605      	mov	r5, r0
 8007b74:	0092      	lsls	r2, r2, #2
 8007b76:	f106 010c 	add.w	r1, r6, #12
 8007b7a:	300c      	adds	r0, #12
 8007b7c:	f7fe fd0c 	bl	8006598 <memcpy>
 8007b80:	2201      	movs	r2, #1
 8007b82:	4629      	mov	r1, r5
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fcad 	bl	80084e4 <__lshift>
 8007b8a:	9b00      	ldr	r3, [sp, #0]
 8007b8c:	f8cd b014 	str.w	fp, [sp, #20]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	46b1      	mov	r9, r6
 8007b96:	9307      	str	r3, [sp, #28]
 8007b98:	4606      	mov	r6, r0
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	9804      	ldr	r0, [sp, #16]
 8007b9e:	f7ff faa7 	bl	80070f0 <quorem>
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007baa:	9804      	ldr	r0, [sp, #16]
 8007bac:	f000 fcee 	bl	800858c <__mcmp>
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	9000      	str	r0, [sp, #0]
 8007bb4:	4639      	mov	r1, r7
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 fd02 	bl	80085c0 <__mdiff>
 8007bbc:	68c3      	ldr	r3, [r0, #12]
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	bb03      	cbnz	r3, 8007c04 <_dtoa_r+0x9fc>
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	9008      	str	r0, [sp, #32]
 8007bc6:	9804      	ldr	r0, [sp, #16]
 8007bc8:	f000 fce0 	bl	800858c <__mcmp>
 8007bcc:	9a08      	ldr	r2, [sp, #32]
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	9308      	str	r3, [sp, #32]
 8007bd6:	f000 faf7 	bl	80081c8 <_Bfree>
 8007bda:	9b08      	ldr	r3, [sp, #32]
 8007bdc:	b9a3      	cbnz	r3, 8007c08 <_dtoa_r+0xa00>
 8007bde:	9a06      	ldr	r2, [sp, #24]
 8007be0:	b992      	cbnz	r2, 8007c08 <_dtoa_r+0xa00>
 8007be2:	9a07      	ldr	r2, [sp, #28]
 8007be4:	b982      	cbnz	r2, 8007c08 <_dtoa_r+0xa00>
 8007be6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007bea:	d029      	beq.n	8007c40 <_dtoa_r+0xa38>
 8007bec:	9b00      	ldr	r3, [sp, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	dd01      	ble.n	8007bf6 <_dtoa_r+0x9ee>
 8007bf2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007bf6:	9b05      	ldr	r3, [sp, #20]
 8007bf8:	1c5d      	adds	r5, r3, #1
 8007bfa:	f883 8000 	strb.w	r8, [r3]
 8007bfe:	e782      	b.n	8007b06 <_dtoa_r+0x8fe>
 8007c00:	4630      	mov	r0, r6
 8007c02:	e7c2      	b.n	8007b8a <_dtoa_r+0x982>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e7e3      	b.n	8007bd0 <_dtoa_r+0x9c8>
 8007c08:	9a00      	ldr	r2, [sp, #0]
 8007c0a:	2a00      	cmp	r2, #0
 8007c0c:	db04      	blt.n	8007c18 <_dtoa_r+0xa10>
 8007c0e:	d125      	bne.n	8007c5c <_dtoa_r+0xa54>
 8007c10:	9a06      	ldr	r2, [sp, #24]
 8007c12:	bb1a      	cbnz	r2, 8007c5c <_dtoa_r+0xa54>
 8007c14:	9a07      	ldr	r2, [sp, #28]
 8007c16:	bb0a      	cbnz	r2, 8007c5c <_dtoa_r+0xa54>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	ddec      	ble.n	8007bf6 <_dtoa_r+0x9ee>
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	9904      	ldr	r1, [sp, #16]
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 fc5f 	bl	80084e4 <__lshift>
 8007c26:	4639      	mov	r1, r7
 8007c28:	9004      	str	r0, [sp, #16]
 8007c2a:	f000 fcaf 	bl	800858c <__mcmp>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	dc03      	bgt.n	8007c3a <_dtoa_r+0xa32>
 8007c32:	d1e0      	bne.n	8007bf6 <_dtoa_r+0x9ee>
 8007c34:	f018 0f01 	tst.w	r8, #1
 8007c38:	d0dd      	beq.n	8007bf6 <_dtoa_r+0x9ee>
 8007c3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c3e:	d1d8      	bne.n	8007bf2 <_dtoa_r+0x9ea>
 8007c40:	9b05      	ldr	r3, [sp, #20]
 8007c42:	9a05      	ldr	r2, [sp, #20]
 8007c44:	1c5d      	adds	r5, r3, #1
 8007c46:	2339      	movs	r3, #57	; 0x39
 8007c48:	7013      	strb	r3, [r2, #0]
 8007c4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c4e:	2b39      	cmp	r3, #57	; 0x39
 8007c50:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007c54:	d04f      	beq.n	8007cf6 <_dtoa_r+0xaee>
 8007c56:	3301      	adds	r3, #1
 8007c58:	7013      	strb	r3, [r2, #0]
 8007c5a:	e754      	b.n	8007b06 <_dtoa_r+0x8fe>
 8007c5c:	9a05      	ldr	r2, [sp, #20]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f102 0501 	add.w	r5, r2, #1
 8007c64:	dd06      	ble.n	8007c74 <_dtoa_r+0xa6c>
 8007c66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c6a:	d0e9      	beq.n	8007c40 <_dtoa_r+0xa38>
 8007c6c:	f108 0801 	add.w	r8, r8, #1
 8007c70:	9b05      	ldr	r3, [sp, #20]
 8007c72:	e7c2      	b.n	8007bfa <_dtoa_r+0x9f2>
 8007c74:	9a02      	ldr	r2, [sp, #8]
 8007c76:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007c7a:	eba5 030b 	sub.w	r3, r5, fp
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d021      	beq.n	8007cc6 <_dtoa_r+0xabe>
 8007c82:	2300      	movs	r3, #0
 8007c84:	220a      	movs	r2, #10
 8007c86:	9904      	ldr	r1, [sp, #16]
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 fab4 	bl	80081f6 <__multadd>
 8007c8e:	45b1      	cmp	r9, r6
 8007c90:	9004      	str	r0, [sp, #16]
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	f04f 020a 	mov.w	r2, #10
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	d105      	bne.n	8007cac <_dtoa_r+0xaa4>
 8007ca0:	f000 faa9 	bl	80081f6 <__multadd>
 8007ca4:	4681      	mov	r9, r0
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	9505      	str	r5, [sp, #20]
 8007caa:	e776      	b.n	8007b9a <_dtoa_r+0x992>
 8007cac:	f000 faa3 	bl	80081f6 <__multadd>
 8007cb0:	4631      	mov	r1, r6
 8007cb2:	4681      	mov	r9, r0
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	220a      	movs	r2, #10
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 fa9c 	bl	80081f6 <__multadd>
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	e7f2      	b.n	8007ca8 <_dtoa_r+0xaa0>
 8007cc2:	f04f 0900 	mov.w	r9, #0
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	9904      	ldr	r1, [sp, #16]
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 fc0a 	bl	80084e4 <__lshift>
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	9004      	str	r0, [sp, #16]
 8007cd4:	f000 fc5a 	bl	800858c <__mcmp>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	dcb6      	bgt.n	8007c4a <_dtoa_r+0xa42>
 8007cdc:	d102      	bne.n	8007ce4 <_dtoa_r+0xadc>
 8007cde:	f018 0f01 	tst.w	r8, #1
 8007ce2:	d1b2      	bne.n	8007c4a <_dtoa_r+0xa42>
 8007ce4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ce8:	2b30      	cmp	r3, #48	; 0x30
 8007cea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007cee:	f47f af0a 	bne.w	8007b06 <_dtoa_r+0x8fe>
 8007cf2:	4615      	mov	r5, r2
 8007cf4:	e7f6      	b.n	8007ce4 <_dtoa_r+0xadc>
 8007cf6:	4593      	cmp	fp, r2
 8007cf8:	d105      	bne.n	8007d06 <_dtoa_r+0xafe>
 8007cfa:	2331      	movs	r3, #49	; 0x31
 8007cfc:	f10a 0a01 	add.w	sl, sl, #1
 8007d00:	f88b 3000 	strb.w	r3, [fp]
 8007d04:	e6ff      	b.n	8007b06 <_dtoa_r+0x8fe>
 8007d06:	4615      	mov	r5, r2
 8007d08:	e79f      	b.n	8007c4a <_dtoa_r+0xa42>
 8007d0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007d70 <_dtoa_r+0xb68>
 8007d0e:	e007      	b.n	8007d20 <_dtoa_r+0xb18>
 8007d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d12:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007d74 <_dtoa_r+0xb6c>
 8007d16:	b11b      	cbz	r3, 8007d20 <_dtoa_r+0xb18>
 8007d18:	f10b 0308 	add.w	r3, fp, #8
 8007d1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	4658      	mov	r0, fp
 8007d22:	b017      	add	sp, #92	; 0x5c
 8007d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d28:	9b06      	ldr	r3, [sp, #24]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	f77f ae35 	ble.w	800799a <_dtoa_r+0x792>
 8007d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d32:	9307      	str	r3, [sp, #28]
 8007d34:	e649      	b.n	80079ca <_dtoa_r+0x7c2>
 8007d36:	9b02      	ldr	r3, [sp, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dc03      	bgt.n	8007d44 <_dtoa_r+0xb3c>
 8007d3c:	9b06      	ldr	r3, [sp, #24]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	f73f aecc 	bgt.w	8007adc <_dtoa_r+0x8d4>
 8007d44:	465d      	mov	r5, fp
 8007d46:	4639      	mov	r1, r7
 8007d48:	9804      	ldr	r0, [sp, #16]
 8007d4a:	f7ff f9d1 	bl	80070f0 <quorem>
 8007d4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d52:	f805 8b01 	strb.w	r8, [r5], #1
 8007d56:	9a02      	ldr	r2, [sp, #8]
 8007d58:	eba5 030b 	sub.w	r3, r5, fp
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	ddb0      	ble.n	8007cc2 <_dtoa_r+0xaba>
 8007d60:	2300      	movs	r3, #0
 8007d62:	220a      	movs	r2, #10
 8007d64:	9904      	ldr	r1, [sp, #16]
 8007d66:	4620      	mov	r0, r4
 8007d68:	f000 fa45 	bl	80081f6 <__multadd>
 8007d6c:	9004      	str	r0, [sp, #16]
 8007d6e:	e7ea      	b.n	8007d46 <_dtoa_r+0xb3e>
 8007d70:	0800aadc 	.word	0x0800aadc
 8007d74:	0800ab00 	.word	0x0800ab00

08007d78 <__sflush_r>:
 8007d78:	898a      	ldrh	r2, [r1, #12]
 8007d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7e:	4605      	mov	r5, r0
 8007d80:	0710      	lsls	r0, r2, #28
 8007d82:	460c      	mov	r4, r1
 8007d84:	d458      	bmi.n	8007e38 <__sflush_r+0xc0>
 8007d86:	684b      	ldr	r3, [r1, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	dc05      	bgt.n	8007d98 <__sflush_r+0x20>
 8007d8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	dc02      	bgt.n	8007d98 <__sflush_r+0x20>
 8007d92:	2000      	movs	r0, #0
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d9a:	2e00      	cmp	r6, #0
 8007d9c:	d0f9      	beq.n	8007d92 <__sflush_r+0x1a>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007da4:	682f      	ldr	r7, [r5, #0]
 8007da6:	6a21      	ldr	r1, [r4, #32]
 8007da8:	602b      	str	r3, [r5, #0]
 8007daa:	d032      	beq.n	8007e12 <__sflush_r+0x9a>
 8007dac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	075a      	lsls	r2, r3, #29
 8007db2:	d505      	bpl.n	8007dc0 <__sflush_r+0x48>
 8007db4:	6863      	ldr	r3, [r4, #4]
 8007db6:	1ac0      	subs	r0, r0, r3
 8007db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dba:	b10b      	cbz	r3, 8007dc0 <__sflush_r+0x48>
 8007dbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dbe:	1ac0      	subs	r0, r0, r3
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dc6:	6a21      	ldr	r1, [r4, #32]
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b0      	blx	r6
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	d106      	bne.n	8007de0 <__sflush_r+0x68>
 8007dd2:	6829      	ldr	r1, [r5, #0]
 8007dd4:	291d      	cmp	r1, #29
 8007dd6:	d848      	bhi.n	8007e6a <__sflush_r+0xf2>
 8007dd8:	4a29      	ldr	r2, [pc, #164]	; (8007e80 <__sflush_r+0x108>)
 8007dda:	40ca      	lsrs	r2, r1
 8007ddc:	07d6      	lsls	r6, r2, #31
 8007dde:	d544      	bpl.n	8007e6a <__sflush_r+0xf2>
 8007de0:	2200      	movs	r2, #0
 8007de2:	6062      	str	r2, [r4, #4]
 8007de4:	04d9      	lsls	r1, r3, #19
 8007de6:	6922      	ldr	r2, [r4, #16]
 8007de8:	6022      	str	r2, [r4, #0]
 8007dea:	d504      	bpl.n	8007df6 <__sflush_r+0x7e>
 8007dec:	1c42      	adds	r2, r0, #1
 8007dee:	d101      	bne.n	8007df4 <__sflush_r+0x7c>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b903      	cbnz	r3, 8007df6 <__sflush_r+0x7e>
 8007df4:	6560      	str	r0, [r4, #84]	; 0x54
 8007df6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007df8:	602f      	str	r7, [r5, #0]
 8007dfa:	2900      	cmp	r1, #0
 8007dfc:	d0c9      	beq.n	8007d92 <__sflush_r+0x1a>
 8007dfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e02:	4299      	cmp	r1, r3
 8007e04:	d002      	beq.n	8007e0c <__sflush_r+0x94>
 8007e06:	4628      	mov	r0, r5
 8007e08:	f000 fc94 	bl	8008734 <_free_r>
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	6360      	str	r0, [r4, #52]	; 0x34
 8007e10:	e7c0      	b.n	8007d94 <__sflush_r+0x1c>
 8007e12:	2301      	movs	r3, #1
 8007e14:	4628      	mov	r0, r5
 8007e16:	47b0      	blx	r6
 8007e18:	1c41      	adds	r1, r0, #1
 8007e1a:	d1c8      	bne.n	8007dae <__sflush_r+0x36>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0c5      	beq.n	8007dae <__sflush_r+0x36>
 8007e22:	2b1d      	cmp	r3, #29
 8007e24:	d001      	beq.n	8007e2a <__sflush_r+0xb2>
 8007e26:	2b16      	cmp	r3, #22
 8007e28:	d101      	bne.n	8007e2e <__sflush_r+0xb6>
 8007e2a:	602f      	str	r7, [r5, #0]
 8007e2c:	e7b1      	b.n	8007d92 <__sflush_r+0x1a>
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	e7ad      	b.n	8007d94 <__sflush_r+0x1c>
 8007e38:	690f      	ldr	r7, [r1, #16]
 8007e3a:	2f00      	cmp	r7, #0
 8007e3c:	d0a9      	beq.n	8007d92 <__sflush_r+0x1a>
 8007e3e:	0793      	lsls	r3, r2, #30
 8007e40:	680e      	ldr	r6, [r1, #0]
 8007e42:	bf08      	it	eq
 8007e44:	694b      	ldreq	r3, [r1, #20]
 8007e46:	600f      	str	r7, [r1, #0]
 8007e48:	bf18      	it	ne
 8007e4a:	2300      	movne	r3, #0
 8007e4c:	eba6 0807 	sub.w	r8, r6, r7
 8007e50:	608b      	str	r3, [r1, #8]
 8007e52:	f1b8 0f00 	cmp.w	r8, #0
 8007e56:	dd9c      	ble.n	8007d92 <__sflush_r+0x1a>
 8007e58:	4643      	mov	r3, r8
 8007e5a:	463a      	mov	r2, r7
 8007e5c:	6a21      	ldr	r1, [r4, #32]
 8007e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e60:	4628      	mov	r0, r5
 8007e62:	47b0      	blx	r6
 8007e64:	2800      	cmp	r0, #0
 8007e66:	dc06      	bgt.n	8007e76 <__sflush_r+0xfe>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e6e:	81a3      	strh	r3, [r4, #12]
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e74:	e78e      	b.n	8007d94 <__sflush_r+0x1c>
 8007e76:	4407      	add	r7, r0
 8007e78:	eba8 0800 	sub.w	r8, r8, r0
 8007e7c:	e7e9      	b.n	8007e52 <__sflush_r+0xda>
 8007e7e:	bf00      	nop
 8007e80:	20400001 	.word	0x20400001

08007e84 <_fflush_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	690b      	ldr	r3, [r1, #16]
 8007e88:	4605      	mov	r5, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	b1db      	cbz	r3, 8007ec6 <_fflush_r+0x42>
 8007e8e:	b118      	cbz	r0, 8007e98 <_fflush_r+0x14>
 8007e90:	6983      	ldr	r3, [r0, #24]
 8007e92:	b90b      	cbnz	r3, 8007e98 <_fflush_r+0x14>
 8007e94:	f000 f860 	bl	8007f58 <__sinit>
 8007e98:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <_fflush_r+0x48>)
 8007e9a:	429c      	cmp	r4, r3
 8007e9c:	d109      	bne.n	8007eb2 <_fflush_r+0x2e>
 8007e9e:	686c      	ldr	r4, [r5, #4]
 8007ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ea4:	b17b      	cbz	r3, 8007ec6 <_fflush_r+0x42>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eae:	f7ff bf63 	b.w	8007d78 <__sflush_r>
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <_fflush_r+0x4c>)
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	d101      	bne.n	8007ebc <_fflush_r+0x38>
 8007eb8:	68ac      	ldr	r4, [r5, #8]
 8007eba:	e7f1      	b.n	8007ea0 <_fflush_r+0x1c>
 8007ebc:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <_fflush_r+0x50>)
 8007ebe:	429c      	cmp	r4, r3
 8007ec0:	bf08      	it	eq
 8007ec2:	68ec      	ldreq	r4, [r5, #12]
 8007ec4:	e7ec      	b.n	8007ea0 <_fflush_r+0x1c>
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	bd38      	pop	{r3, r4, r5, pc}
 8007eca:	bf00      	nop
 8007ecc:	0800ab30 	.word	0x0800ab30
 8007ed0:	0800ab50 	.word	0x0800ab50
 8007ed4:	0800ab10 	.word	0x0800ab10

08007ed8 <std>:
 8007ed8:	2300      	movs	r3, #0
 8007eda:	b510      	push	{r4, lr}
 8007edc:	4604      	mov	r4, r0
 8007ede:	e9c0 3300 	strd	r3, r3, [r0]
 8007ee2:	6083      	str	r3, [r0, #8]
 8007ee4:	8181      	strh	r1, [r0, #12]
 8007ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ee8:	81c2      	strh	r2, [r0, #14]
 8007eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eee:	6183      	str	r3, [r0, #24]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	2208      	movs	r2, #8
 8007ef4:	305c      	adds	r0, #92	; 0x5c
 8007ef6:	f7fe fb5a 	bl	80065ae <memset>
 8007efa:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <std+0x38>)
 8007efc:	6263      	str	r3, [r4, #36]	; 0x24
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <std+0x3c>)
 8007f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f02:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <std+0x40>)
 8007f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f06:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <std+0x44>)
 8007f08:	6224      	str	r4, [r4, #32]
 8007f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f0c:	bd10      	pop	{r4, pc}
 8007f0e:	bf00      	nop
 8007f10:	08008b25 	.word	0x08008b25
 8007f14:	08008b47 	.word	0x08008b47
 8007f18:	08008b7f 	.word	0x08008b7f
 8007f1c:	08008ba3 	.word	0x08008ba3

08007f20 <_cleanup_r>:
 8007f20:	4901      	ldr	r1, [pc, #4]	; (8007f28 <_cleanup_r+0x8>)
 8007f22:	f000 b885 	b.w	8008030 <_fwalk_reent>
 8007f26:	bf00      	nop
 8007f28:	08007e85 	.word	0x08007e85

08007f2c <__sfmoreglue>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	1e4a      	subs	r2, r1, #1
 8007f30:	2568      	movs	r5, #104	; 0x68
 8007f32:	4355      	muls	r5, r2
 8007f34:	460e      	mov	r6, r1
 8007f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f3a:	f000 fc49 	bl	80087d0 <_malloc_r>
 8007f3e:	4604      	mov	r4, r0
 8007f40:	b140      	cbz	r0, 8007f54 <__sfmoreglue+0x28>
 8007f42:	2100      	movs	r1, #0
 8007f44:	e9c0 1600 	strd	r1, r6, [r0]
 8007f48:	300c      	adds	r0, #12
 8007f4a:	60a0      	str	r0, [r4, #8]
 8007f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f50:	f7fe fb2d 	bl	80065ae <memset>
 8007f54:	4620      	mov	r0, r4
 8007f56:	bd70      	pop	{r4, r5, r6, pc}

08007f58 <__sinit>:
 8007f58:	6983      	ldr	r3, [r0, #24]
 8007f5a:	b510      	push	{r4, lr}
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	bb33      	cbnz	r3, 8007fae <__sinit+0x56>
 8007f60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007f64:	6503      	str	r3, [r0, #80]	; 0x50
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <__sinit+0x58>)
 8007f68:	4a12      	ldr	r2, [pc, #72]	; (8007fb4 <__sinit+0x5c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6282      	str	r2, [r0, #40]	; 0x28
 8007f6e:	4298      	cmp	r0, r3
 8007f70:	bf04      	itt	eq
 8007f72:	2301      	moveq	r3, #1
 8007f74:	6183      	streq	r3, [r0, #24]
 8007f76:	f000 f81f 	bl	8007fb8 <__sfp>
 8007f7a:	6060      	str	r0, [r4, #4]
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 f81b 	bl	8007fb8 <__sfp>
 8007f82:	60a0      	str	r0, [r4, #8]
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 f817 	bl	8007fb8 <__sfp>
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	60e0      	str	r0, [r4, #12]
 8007f8e:	2104      	movs	r1, #4
 8007f90:	6860      	ldr	r0, [r4, #4]
 8007f92:	f7ff ffa1 	bl	8007ed8 <std>
 8007f96:	2201      	movs	r2, #1
 8007f98:	2109      	movs	r1, #9
 8007f9a:	68a0      	ldr	r0, [r4, #8]
 8007f9c:	f7ff ff9c 	bl	8007ed8 <std>
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	2112      	movs	r1, #18
 8007fa4:	68e0      	ldr	r0, [r4, #12]
 8007fa6:	f7ff ff97 	bl	8007ed8 <std>
 8007faa:	2301      	movs	r3, #1
 8007fac:	61a3      	str	r3, [r4, #24]
 8007fae:	bd10      	pop	{r4, pc}
 8007fb0:	0800aac8 	.word	0x0800aac8
 8007fb4:	08007f21 	.word	0x08007f21

08007fb8 <__sfp>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <__sfp+0x70>)
 8007fbc:	681e      	ldr	r6, [r3, #0]
 8007fbe:	69b3      	ldr	r3, [r6, #24]
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	b913      	cbnz	r3, 8007fca <__sfp+0x12>
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f7ff ffc7 	bl	8007f58 <__sinit>
 8007fca:	3648      	adds	r6, #72	; 0x48
 8007fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	d503      	bpl.n	8007fdc <__sfp+0x24>
 8007fd4:	6833      	ldr	r3, [r6, #0]
 8007fd6:	b133      	cbz	r3, 8007fe6 <__sfp+0x2e>
 8007fd8:	6836      	ldr	r6, [r6, #0]
 8007fda:	e7f7      	b.n	8007fcc <__sfp+0x14>
 8007fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fe0:	b16d      	cbz	r5, 8007ffe <__sfp+0x46>
 8007fe2:	3468      	adds	r4, #104	; 0x68
 8007fe4:	e7f4      	b.n	8007fd0 <__sfp+0x18>
 8007fe6:	2104      	movs	r1, #4
 8007fe8:	4638      	mov	r0, r7
 8007fea:	f7ff ff9f 	bl	8007f2c <__sfmoreglue>
 8007fee:	6030      	str	r0, [r6, #0]
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d1f1      	bne.n	8007fd8 <__sfp+0x20>
 8007ff4:	230c      	movs	r3, #12
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ffe:	4b0b      	ldr	r3, [pc, #44]	; (800802c <__sfp+0x74>)
 8008000:	6665      	str	r5, [r4, #100]	; 0x64
 8008002:	e9c4 5500 	strd	r5, r5, [r4]
 8008006:	60a5      	str	r5, [r4, #8]
 8008008:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800800c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008010:	2208      	movs	r2, #8
 8008012:	4629      	mov	r1, r5
 8008014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008018:	f7fe fac9 	bl	80065ae <memset>
 800801c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008024:	e7e9      	b.n	8007ffa <__sfp+0x42>
 8008026:	bf00      	nop
 8008028:	0800aac8 	.word	0x0800aac8
 800802c:	ffff0001 	.word	0xffff0001

08008030 <_fwalk_reent>:
 8008030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008034:	4680      	mov	r8, r0
 8008036:	4689      	mov	r9, r1
 8008038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800803c:	2600      	movs	r6, #0
 800803e:	b914      	cbnz	r4, 8008046 <_fwalk_reent+0x16>
 8008040:	4630      	mov	r0, r6
 8008042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008046:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800804a:	3f01      	subs	r7, #1
 800804c:	d501      	bpl.n	8008052 <_fwalk_reent+0x22>
 800804e:	6824      	ldr	r4, [r4, #0]
 8008050:	e7f5      	b.n	800803e <_fwalk_reent+0xe>
 8008052:	89ab      	ldrh	r3, [r5, #12]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d907      	bls.n	8008068 <_fwalk_reent+0x38>
 8008058:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800805c:	3301      	adds	r3, #1
 800805e:	d003      	beq.n	8008068 <_fwalk_reent+0x38>
 8008060:	4629      	mov	r1, r5
 8008062:	4640      	mov	r0, r8
 8008064:	47c8      	blx	r9
 8008066:	4306      	orrs	r6, r0
 8008068:	3568      	adds	r5, #104	; 0x68
 800806a:	e7ee      	b.n	800804a <_fwalk_reent+0x1a>

0800806c <_localeconv_r>:
 800806c:	4b04      	ldr	r3, [pc, #16]	; (8008080 <_localeconv_r+0x14>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6a18      	ldr	r0, [r3, #32]
 8008072:	4b04      	ldr	r3, [pc, #16]	; (8008084 <_localeconv_r+0x18>)
 8008074:	2800      	cmp	r0, #0
 8008076:	bf08      	it	eq
 8008078:	4618      	moveq	r0, r3
 800807a:	30f0      	adds	r0, #240	; 0xf0
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	2000007c 	.word	0x2000007c
 8008084:	200000e0 	.word	0x200000e0

08008088 <__swhatbuf_r>:
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	460e      	mov	r6, r1
 800808c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008090:	2900      	cmp	r1, #0
 8008092:	b096      	sub	sp, #88	; 0x58
 8008094:	4614      	mov	r4, r2
 8008096:	461d      	mov	r5, r3
 8008098:	da07      	bge.n	80080aa <__swhatbuf_r+0x22>
 800809a:	2300      	movs	r3, #0
 800809c:	602b      	str	r3, [r5, #0]
 800809e:	89b3      	ldrh	r3, [r6, #12]
 80080a0:	061a      	lsls	r2, r3, #24
 80080a2:	d410      	bmi.n	80080c6 <__swhatbuf_r+0x3e>
 80080a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a8:	e00e      	b.n	80080c8 <__swhatbuf_r+0x40>
 80080aa:	466a      	mov	r2, sp
 80080ac:	f000 fda0 	bl	8008bf0 <_fstat_r>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	dbf2      	blt.n	800809a <__swhatbuf_r+0x12>
 80080b4:	9a01      	ldr	r2, [sp, #4]
 80080b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080be:	425a      	negs	r2, r3
 80080c0:	415a      	adcs	r2, r3
 80080c2:	602a      	str	r2, [r5, #0]
 80080c4:	e7ee      	b.n	80080a4 <__swhatbuf_r+0x1c>
 80080c6:	2340      	movs	r3, #64	; 0x40
 80080c8:	2000      	movs	r0, #0
 80080ca:	6023      	str	r3, [r4, #0]
 80080cc:	b016      	add	sp, #88	; 0x58
 80080ce:	bd70      	pop	{r4, r5, r6, pc}

080080d0 <__smakebuf_r>:
 80080d0:	898b      	ldrh	r3, [r1, #12]
 80080d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080d4:	079d      	lsls	r5, r3, #30
 80080d6:	4606      	mov	r6, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	d507      	bpl.n	80080ec <__smakebuf_r+0x1c>
 80080dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	6123      	str	r3, [r4, #16]
 80080e4:	2301      	movs	r3, #1
 80080e6:	6163      	str	r3, [r4, #20]
 80080e8:	b002      	add	sp, #8
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	ab01      	add	r3, sp, #4
 80080ee:	466a      	mov	r2, sp
 80080f0:	f7ff ffca 	bl	8008088 <__swhatbuf_r>
 80080f4:	9900      	ldr	r1, [sp, #0]
 80080f6:	4605      	mov	r5, r0
 80080f8:	4630      	mov	r0, r6
 80080fa:	f000 fb69 	bl	80087d0 <_malloc_r>
 80080fe:	b948      	cbnz	r0, 8008114 <__smakebuf_r+0x44>
 8008100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008104:	059a      	lsls	r2, r3, #22
 8008106:	d4ef      	bmi.n	80080e8 <__smakebuf_r+0x18>
 8008108:	f023 0303 	bic.w	r3, r3, #3
 800810c:	f043 0302 	orr.w	r3, r3, #2
 8008110:	81a3      	strh	r3, [r4, #12]
 8008112:	e7e3      	b.n	80080dc <__smakebuf_r+0xc>
 8008114:	4b0d      	ldr	r3, [pc, #52]	; (800814c <__smakebuf_r+0x7c>)
 8008116:	62b3      	str	r3, [r6, #40]	; 0x28
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	6020      	str	r0, [r4, #0]
 800811c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	9b00      	ldr	r3, [sp, #0]
 8008124:	6163      	str	r3, [r4, #20]
 8008126:	9b01      	ldr	r3, [sp, #4]
 8008128:	6120      	str	r0, [r4, #16]
 800812a:	b15b      	cbz	r3, 8008144 <__smakebuf_r+0x74>
 800812c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008130:	4630      	mov	r0, r6
 8008132:	f000 fd6f 	bl	8008c14 <_isatty_r>
 8008136:	b128      	cbz	r0, 8008144 <__smakebuf_r+0x74>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	f023 0303 	bic.w	r3, r3, #3
 800813e:	f043 0301 	orr.w	r3, r3, #1
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	431d      	orrs	r5, r3
 8008148:	81a5      	strh	r5, [r4, #12]
 800814a:	e7cd      	b.n	80080e8 <__smakebuf_r+0x18>
 800814c:	08007f21 	.word	0x08007f21

08008150 <malloc>:
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <malloc+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f000 bb3b 	b.w	80087d0 <_malloc_r>
 800815a:	bf00      	nop
 800815c:	2000007c 	.word	0x2000007c

08008160 <_Balloc>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008164:	4604      	mov	r4, r0
 8008166:	460e      	mov	r6, r1
 8008168:	b93d      	cbnz	r5, 800817a <_Balloc+0x1a>
 800816a:	2010      	movs	r0, #16
 800816c:	f7ff fff0 	bl	8008150 <malloc>
 8008170:	6260      	str	r0, [r4, #36]	; 0x24
 8008172:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008176:	6005      	str	r5, [r0, #0]
 8008178:	60c5      	str	r5, [r0, #12]
 800817a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800817c:	68eb      	ldr	r3, [r5, #12]
 800817e:	b183      	cbz	r3, 80081a2 <_Balloc+0x42>
 8008180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008188:	b9b8      	cbnz	r0, 80081ba <_Balloc+0x5a>
 800818a:	2101      	movs	r1, #1
 800818c:	fa01 f506 	lsl.w	r5, r1, r6
 8008190:	1d6a      	adds	r2, r5, #5
 8008192:	0092      	lsls	r2, r2, #2
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fabf 	bl	8008718 <_calloc_r>
 800819a:	b160      	cbz	r0, 80081b6 <_Balloc+0x56>
 800819c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80081a0:	e00e      	b.n	80081c0 <_Balloc+0x60>
 80081a2:	2221      	movs	r2, #33	; 0x21
 80081a4:	2104      	movs	r1, #4
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 fab6 	bl	8008718 <_calloc_r>
 80081ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081ae:	60e8      	str	r0, [r5, #12]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e4      	bne.n	8008180 <_Balloc+0x20>
 80081b6:	2000      	movs	r0, #0
 80081b8:	bd70      	pop	{r4, r5, r6, pc}
 80081ba:	6802      	ldr	r2, [r0, #0]
 80081bc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80081c0:	2300      	movs	r3, #0
 80081c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081c6:	e7f7      	b.n	80081b8 <_Balloc+0x58>

080081c8 <_Bfree>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80081cc:	4606      	mov	r6, r0
 80081ce:	460d      	mov	r5, r1
 80081d0:	b93c      	cbnz	r4, 80081e2 <_Bfree+0x1a>
 80081d2:	2010      	movs	r0, #16
 80081d4:	f7ff ffbc 	bl	8008150 <malloc>
 80081d8:	6270      	str	r0, [r6, #36]	; 0x24
 80081da:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081de:	6004      	str	r4, [r0, #0]
 80081e0:	60c4      	str	r4, [r0, #12]
 80081e2:	b13d      	cbz	r5, 80081f4 <_Bfree+0x2c>
 80081e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081e6:	686a      	ldr	r2, [r5, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081ee:	6029      	str	r1, [r5, #0]
 80081f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80081f4:	bd70      	pop	{r4, r5, r6, pc}

080081f6 <__multadd>:
 80081f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fa:	690d      	ldr	r5, [r1, #16]
 80081fc:	461f      	mov	r7, r3
 80081fe:	4606      	mov	r6, r0
 8008200:	460c      	mov	r4, r1
 8008202:	f101 0c14 	add.w	ip, r1, #20
 8008206:	2300      	movs	r3, #0
 8008208:	f8dc 0000 	ldr.w	r0, [ip]
 800820c:	b281      	uxth	r1, r0
 800820e:	fb02 7101 	mla	r1, r2, r1, r7
 8008212:	0c0f      	lsrs	r7, r1, #16
 8008214:	0c00      	lsrs	r0, r0, #16
 8008216:	fb02 7000 	mla	r0, r2, r0, r7
 800821a:	b289      	uxth	r1, r1
 800821c:	3301      	adds	r3, #1
 800821e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008222:	429d      	cmp	r5, r3
 8008224:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008228:	f84c 1b04 	str.w	r1, [ip], #4
 800822c:	dcec      	bgt.n	8008208 <__multadd+0x12>
 800822e:	b1d7      	cbz	r7, 8008266 <__multadd+0x70>
 8008230:	68a3      	ldr	r3, [r4, #8]
 8008232:	42ab      	cmp	r3, r5
 8008234:	dc12      	bgt.n	800825c <__multadd+0x66>
 8008236:	6861      	ldr	r1, [r4, #4]
 8008238:	4630      	mov	r0, r6
 800823a:	3101      	adds	r1, #1
 800823c:	f7ff ff90 	bl	8008160 <_Balloc>
 8008240:	6922      	ldr	r2, [r4, #16]
 8008242:	3202      	adds	r2, #2
 8008244:	f104 010c 	add.w	r1, r4, #12
 8008248:	4680      	mov	r8, r0
 800824a:	0092      	lsls	r2, r2, #2
 800824c:	300c      	adds	r0, #12
 800824e:	f7fe f9a3 	bl	8006598 <memcpy>
 8008252:	4621      	mov	r1, r4
 8008254:	4630      	mov	r0, r6
 8008256:	f7ff ffb7 	bl	80081c8 <_Bfree>
 800825a:	4644      	mov	r4, r8
 800825c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008260:	3501      	adds	r5, #1
 8008262:	615f      	str	r7, [r3, #20]
 8008264:	6125      	str	r5, [r4, #16]
 8008266:	4620      	mov	r0, r4
 8008268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800826c <__hi0bits>:
 800826c:	0c02      	lsrs	r2, r0, #16
 800826e:	0412      	lsls	r2, r2, #16
 8008270:	4603      	mov	r3, r0
 8008272:	b9b2      	cbnz	r2, 80082a2 <__hi0bits+0x36>
 8008274:	0403      	lsls	r3, r0, #16
 8008276:	2010      	movs	r0, #16
 8008278:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800827c:	bf04      	itt	eq
 800827e:	021b      	lsleq	r3, r3, #8
 8008280:	3008      	addeq	r0, #8
 8008282:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008286:	bf04      	itt	eq
 8008288:	011b      	lsleq	r3, r3, #4
 800828a:	3004      	addeq	r0, #4
 800828c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008290:	bf04      	itt	eq
 8008292:	009b      	lsleq	r3, r3, #2
 8008294:	3002      	addeq	r0, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	db06      	blt.n	80082a8 <__hi0bits+0x3c>
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	d503      	bpl.n	80082a6 <__hi0bits+0x3a>
 800829e:	3001      	adds	r0, #1
 80082a0:	4770      	bx	lr
 80082a2:	2000      	movs	r0, #0
 80082a4:	e7e8      	b.n	8008278 <__hi0bits+0xc>
 80082a6:	2020      	movs	r0, #32
 80082a8:	4770      	bx	lr

080082aa <__lo0bits>:
 80082aa:	6803      	ldr	r3, [r0, #0]
 80082ac:	f013 0207 	ands.w	r2, r3, #7
 80082b0:	4601      	mov	r1, r0
 80082b2:	d00b      	beq.n	80082cc <__lo0bits+0x22>
 80082b4:	07da      	lsls	r2, r3, #31
 80082b6:	d423      	bmi.n	8008300 <__lo0bits+0x56>
 80082b8:	0798      	lsls	r0, r3, #30
 80082ba:	bf49      	itett	mi
 80082bc:	085b      	lsrmi	r3, r3, #1
 80082be:	089b      	lsrpl	r3, r3, #2
 80082c0:	2001      	movmi	r0, #1
 80082c2:	600b      	strmi	r3, [r1, #0]
 80082c4:	bf5c      	itt	pl
 80082c6:	600b      	strpl	r3, [r1, #0]
 80082c8:	2002      	movpl	r0, #2
 80082ca:	4770      	bx	lr
 80082cc:	b298      	uxth	r0, r3
 80082ce:	b9a8      	cbnz	r0, 80082fc <__lo0bits+0x52>
 80082d0:	0c1b      	lsrs	r3, r3, #16
 80082d2:	2010      	movs	r0, #16
 80082d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082d8:	bf04      	itt	eq
 80082da:	0a1b      	lsreq	r3, r3, #8
 80082dc:	3008      	addeq	r0, #8
 80082de:	071a      	lsls	r2, r3, #28
 80082e0:	bf04      	itt	eq
 80082e2:	091b      	lsreq	r3, r3, #4
 80082e4:	3004      	addeq	r0, #4
 80082e6:	079a      	lsls	r2, r3, #30
 80082e8:	bf04      	itt	eq
 80082ea:	089b      	lsreq	r3, r3, #2
 80082ec:	3002      	addeq	r0, #2
 80082ee:	07da      	lsls	r2, r3, #31
 80082f0:	d402      	bmi.n	80082f8 <__lo0bits+0x4e>
 80082f2:	085b      	lsrs	r3, r3, #1
 80082f4:	d006      	beq.n	8008304 <__lo0bits+0x5a>
 80082f6:	3001      	adds	r0, #1
 80082f8:	600b      	str	r3, [r1, #0]
 80082fa:	4770      	bx	lr
 80082fc:	4610      	mov	r0, r2
 80082fe:	e7e9      	b.n	80082d4 <__lo0bits+0x2a>
 8008300:	2000      	movs	r0, #0
 8008302:	4770      	bx	lr
 8008304:	2020      	movs	r0, #32
 8008306:	4770      	bx	lr

08008308 <__i2b>:
 8008308:	b510      	push	{r4, lr}
 800830a:	460c      	mov	r4, r1
 800830c:	2101      	movs	r1, #1
 800830e:	f7ff ff27 	bl	8008160 <_Balloc>
 8008312:	2201      	movs	r2, #1
 8008314:	6144      	str	r4, [r0, #20]
 8008316:	6102      	str	r2, [r0, #16]
 8008318:	bd10      	pop	{r4, pc}

0800831a <__multiply>:
 800831a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831e:	4614      	mov	r4, r2
 8008320:	690a      	ldr	r2, [r1, #16]
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	429a      	cmp	r2, r3
 8008326:	bfb8      	it	lt
 8008328:	460b      	movlt	r3, r1
 800832a:	4688      	mov	r8, r1
 800832c:	bfbc      	itt	lt
 800832e:	46a0      	movlt	r8, r4
 8008330:	461c      	movlt	r4, r3
 8008332:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008336:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800833a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800833e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008342:	eb07 0609 	add.w	r6, r7, r9
 8008346:	42b3      	cmp	r3, r6
 8008348:	bfb8      	it	lt
 800834a:	3101      	addlt	r1, #1
 800834c:	f7ff ff08 	bl	8008160 <_Balloc>
 8008350:	f100 0514 	add.w	r5, r0, #20
 8008354:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008358:	462b      	mov	r3, r5
 800835a:	2200      	movs	r2, #0
 800835c:	4573      	cmp	r3, lr
 800835e:	d316      	bcc.n	800838e <__multiply+0x74>
 8008360:	f104 0214 	add.w	r2, r4, #20
 8008364:	f108 0114 	add.w	r1, r8, #20
 8008368:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800836c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	9b00      	ldr	r3, [sp, #0]
 8008374:	9201      	str	r2, [sp, #4]
 8008376:	4293      	cmp	r3, r2
 8008378:	d80c      	bhi.n	8008394 <__multiply+0x7a>
 800837a:	2e00      	cmp	r6, #0
 800837c:	dd03      	ble.n	8008386 <__multiply+0x6c>
 800837e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008382:	2b00      	cmp	r3, #0
 8008384:	d05d      	beq.n	8008442 <__multiply+0x128>
 8008386:	6106      	str	r6, [r0, #16]
 8008388:	b003      	add	sp, #12
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	f843 2b04 	str.w	r2, [r3], #4
 8008392:	e7e3      	b.n	800835c <__multiply+0x42>
 8008394:	f8b2 b000 	ldrh.w	fp, [r2]
 8008398:	f1bb 0f00 	cmp.w	fp, #0
 800839c:	d023      	beq.n	80083e6 <__multiply+0xcc>
 800839e:	4689      	mov	r9, r1
 80083a0:	46ac      	mov	ip, r5
 80083a2:	f04f 0800 	mov.w	r8, #0
 80083a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80083aa:	f8dc a000 	ldr.w	sl, [ip]
 80083ae:	b2a3      	uxth	r3, r4
 80083b0:	fa1f fa8a 	uxth.w	sl, sl
 80083b4:	fb0b a303 	mla	r3, fp, r3, sl
 80083b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083bc:	f8dc 4000 	ldr.w	r4, [ip]
 80083c0:	4443      	add	r3, r8
 80083c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80083c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80083ca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80083ce:	46e2      	mov	sl, ip
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80083d6:	454f      	cmp	r7, r9
 80083d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80083dc:	f84a 3b04 	str.w	r3, [sl], #4
 80083e0:	d82b      	bhi.n	800843a <__multiply+0x120>
 80083e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80083e6:	9b01      	ldr	r3, [sp, #4]
 80083e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80083ec:	3204      	adds	r2, #4
 80083ee:	f1ba 0f00 	cmp.w	sl, #0
 80083f2:	d020      	beq.n	8008436 <__multiply+0x11c>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	4689      	mov	r9, r1
 80083f8:	46a8      	mov	r8, r5
 80083fa:	f04f 0b00 	mov.w	fp, #0
 80083fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8008402:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008406:	fb0a 440c 	mla	r4, sl, ip, r4
 800840a:	445c      	add	r4, fp
 800840c:	46c4      	mov	ip, r8
 800840e:	b29b      	uxth	r3, r3
 8008410:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008414:	f84c 3b04 	str.w	r3, [ip], #4
 8008418:	f859 3b04 	ldr.w	r3, [r9], #4
 800841c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008420:	0c1b      	lsrs	r3, r3, #16
 8008422:	fb0a b303 	mla	r3, sl, r3, fp
 8008426:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800842a:	454f      	cmp	r7, r9
 800842c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008430:	d805      	bhi.n	800843e <__multiply+0x124>
 8008432:	f8c8 3004 	str.w	r3, [r8, #4]
 8008436:	3504      	adds	r5, #4
 8008438:	e79b      	b.n	8008372 <__multiply+0x58>
 800843a:	46d4      	mov	ip, sl
 800843c:	e7b3      	b.n	80083a6 <__multiply+0x8c>
 800843e:	46e0      	mov	r8, ip
 8008440:	e7dd      	b.n	80083fe <__multiply+0xe4>
 8008442:	3e01      	subs	r6, #1
 8008444:	e799      	b.n	800837a <__multiply+0x60>
	...

08008448 <__pow5mult>:
 8008448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800844c:	4615      	mov	r5, r2
 800844e:	f012 0203 	ands.w	r2, r2, #3
 8008452:	4606      	mov	r6, r0
 8008454:	460f      	mov	r7, r1
 8008456:	d007      	beq.n	8008468 <__pow5mult+0x20>
 8008458:	3a01      	subs	r2, #1
 800845a:	4c21      	ldr	r4, [pc, #132]	; (80084e0 <__pow5mult+0x98>)
 800845c:	2300      	movs	r3, #0
 800845e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008462:	f7ff fec8 	bl	80081f6 <__multadd>
 8008466:	4607      	mov	r7, r0
 8008468:	10ad      	asrs	r5, r5, #2
 800846a:	d035      	beq.n	80084d8 <__pow5mult+0x90>
 800846c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800846e:	b93c      	cbnz	r4, 8008480 <__pow5mult+0x38>
 8008470:	2010      	movs	r0, #16
 8008472:	f7ff fe6d 	bl	8008150 <malloc>
 8008476:	6270      	str	r0, [r6, #36]	; 0x24
 8008478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800847c:	6004      	str	r4, [r0, #0]
 800847e:	60c4      	str	r4, [r0, #12]
 8008480:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008488:	b94c      	cbnz	r4, 800849e <__pow5mult+0x56>
 800848a:	f240 2171 	movw	r1, #625	; 0x271
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ff3a 	bl	8008308 <__i2b>
 8008494:	2300      	movs	r3, #0
 8008496:	f8c8 0008 	str.w	r0, [r8, #8]
 800849a:	4604      	mov	r4, r0
 800849c:	6003      	str	r3, [r0, #0]
 800849e:	f04f 0800 	mov.w	r8, #0
 80084a2:	07eb      	lsls	r3, r5, #31
 80084a4:	d50a      	bpl.n	80084bc <__pow5mult+0x74>
 80084a6:	4639      	mov	r1, r7
 80084a8:	4622      	mov	r2, r4
 80084aa:	4630      	mov	r0, r6
 80084ac:	f7ff ff35 	bl	800831a <__multiply>
 80084b0:	4639      	mov	r1, r7
 80084b2:	4681      	mov	r9, r0
 80084b4:	4630      	mov	r0, r6
 80084b6:	f7ff fe87 	bl	80081c8 <_Bfree>
 80084ba:	464f      	mov	r7, r9
 80084bc:	106d      	asrs	r5, r5, #1
 80084be:	d00b      	beq.n	80084d8 <__pow5mult+0x90>
 80084c0:	6820      	ldr	r0, [r4, #0]
 80084c2:	b938      	cbnz	r0, 80084d4 <__pow5mult+0x8c>
 80084c4:	4622      	mov	r2, r4
 80084c6:	4621      	mov	r1, r4
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7ff ff26 	bl	800831a <__multiply>
 80084ce:	6020      	str	r0, [r4, #0]
 80084d0:	f8c0 8000 	str.w	r8, [r0]
 80084d4:	4604      	mov	r4, r0
 80084d6:	e7e4      	b.n	80084a2 <__pow5mult+0x5a>
 80084d8:	4638      	mov	r0, r7
 80084da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084de:	bf00      	nop
 80084e0:	0800ac60 	.word	0x0800ac60

080084e4 <__lshift>:
 80084e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	460c      	mov	r4, r1
 80084ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	6849      	ldr	r1, [r1, #4]
 80084f2:	eb0a 0903 	add.w	r9, sl, r3
 80084f6:	68a3      	ldr	r3, [r4, #8]
 80084f8:	4607      	mov	r7, r0
 80084fa:	4616      	mov	r6, r2
 80084fc:	f109 0501 	add.w	r5, r9, #1
 8008500:	42ab      	cmp	r3, r5
 8008502:	db32      	blt.n	800856a <__lshift+0x86>
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff fe2b 	bl	8008160 <_Balloc>
 800850a:	2300      	movs	r3, #0
 800850c:	4680      	mov	r8, r0
 800850e:	f100 0114 	add.w	r1, r0, #20
 8008512:	461a      	mov	r2, r3
 8008514:	4553      	cmp	r3, sl
 8008516:	db2b      	blt.n	8008570 <__lshift+0x8c>
 8008518:	6920      	ldr	r0, [r4, #16]
 800851a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800851e:	f104 0314 	add.w	r3, r4, #20
 8008522:	f016 021f 	ands.w	r2, r6, #31
 8008526:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800852a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800852e:	d025      	beq.n	800857c <__lshift+0x98>
 8008530:	f1c2 0e20 	rsb	lr, r2, #32
 8008534:	2000      	movs	r0, #0
 8008536:	681e      	ldr	r6, [r3, #0]
 8008538:	468a      	mov	sl, r1
 800853a:	4096      	lsls	r6, r2
 800853c:	4330      	orrs	r0, r6
 800853e:	f84a 0b04 	str.w	r0, [sl], #4
 8008542:	f853 0b04 	ldr.w	r0, [r3], #4
 8008546:	459c      	cmp	ip, r3
 8008548:	fa20 f00e 	lsr.w	r0, r0, lr
 800854c:	d814      	bhi.n	8008578 <__lshift+0x94>
 800854e:	6048      	str	r0, [r1, #4]
 8008550:	b108      	cbz	r0, 8008556 <__lshift+0x72>
 8008552:	f109 0502 	add.w	r5, r9, #2
 8008556:	3d01      	subs	r5, #1
 8008558:	4638      	mov	r0, r7
 800855a:	f8c8 5010 	str.w	r5, [r8, #16]
 800855e:	4621      	mov	r1, r4
 8008560:	f7ff fe32 	bl	80081c8 <_Bfree>
 8008564:	4640      	mov	r0, r8
 8008566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856a:	3101      	adds	r1, #1
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	e7c7      	b.n	8008500 <__lshift+0x1c>
 8008570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008574:	3301      	adds	r3, #1
 8008576:	e7cd      	b.n	8008514 <__lshift+0x30>
 8008578:	4651      	mov	r1, sl
 800857a:	e7dc      	b.n	8008536 <__lshift+0x52>
 800857c:	3904      	subs	r1, #4
 800857e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008582:	f841 2f04 	str.w	r2, [r1, #4]!
 8008586:	459c      	cmp	ip, r3
 8008588:	d8f9      	bhi.n	800857e <__lshift+0x9a>
 800858a:	e7e4      	b.n	8008556 <__lshift+0x72>

0800858c <__mcmp>:
 800858c:	6903      	ldr	r3, [r0, #16]
 800858e:	690a      	ldr	r2, [r1, #16]
 8008590:	1a9b      	subs	r3, r3, r2
 8008592:	b530      	push	{r4, r5, lr}
 8008594:	d10c      	bne.n	80085b0 <__mcmp+0x24>
 8008596:	0092      	lsls	r2, r2, #2
 8008598:	3014      	adds	r0, #20
 800859a:	3114      	adds	r1, #20
 800859c:	1884      	adds	r4, r0, r2
 800859e:	4411      	add	r1, r2
 80085a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085a8:	4295      	cmp	r5, r2
 80085aa:	d003      	beq.n	80085b4 <__mcmp+0x28>
 80085ac:	d305      	bcc.n	80085ba <__mcmp+0x2e>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4618      	mov	r0, r3
 80085b2:	bd30      	pop	{r4, r5, pc}
 80085b4:	42a0      	cmp	r0, r4
 80085b6:	d3f3      	bcc.n	80085a0 <__mcmp+0x14>
 80085b8:	e7fa      	b.n	80085b0 <__mcmp+0x24>
 80085ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085be:	e7f7      	b.n	80085b0 <__mcmp+0x24>

080085c0 <__mdiff>:
 80085c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c4:	460d      	mov	r5, r1
 80085c6:	4607      	mov	r7, r0
 80085c8:	4611      	mov	r1, r2
 80085ca:	4628      	mov	r0, r5
 80085cc:	4614      	mov	r4, r2
 80085ce:	f7ff ffdd 	bl	800858c <__mcmp>
 80085d2:	1e06      	subs	r6, r0, #0
 80085d4:	d108      	bne.n	80085e8 <__mdiff+0x28>
 80085d6:	4631      	mov	r1, r6
 80085d8:	4638      	mov	r0, r7
 80085da:	f7ff fdc1 	bl	8008160 <_Balloc>
 80085de:	2301      	movs	r3, #1
 80085e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80085e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e8:	bfa4      	itt	ge
 80085ea:	4623      	movge	r3, r4
 80085ec:	462c      	movge	r4, r5
 80085ee:	4638      	mov	r0, r7
 80085f0:	6861      	ldr	r1, [r4, #4]
 80085f2:	bfa6      	itte	ge
 80085f4:	461d      	movge	r5, r3
 80085f6:	2600      	movge	r6, #0
 80085f8:	2601      	movlt	r6, #1
 80085fa:	f7ff fdb1 	bl	8008160 <_Balloc>
 80085fe:	692b      	ldr	r3, [r5, #16]
 8008600:	60c6      	str	r6, [r0, #12]
 8008602:	6926      	ldr	r6, [r4, #16]
 8008604:	f105 0914 	add.w	r9, r5, #20
 8008608:	f104 0214 	add.w	r2, r4, #20
 800860c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008610:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008614:	f100 0514 	add.w	r5, r0, #20
 8008618:	f04f 0e00 	mov.w	lr, #0
 800861c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008620:	f859 4b04 	ldr.w	r4, [r9], #4
 8008624:	fa1e f18a 	uxtah	r1, lr, sl
 8008628:	b2a3      	uxth	r3, r4
 800862a:	1ac9      	subs	r1, r1, r3
 800862c:	0c23      	lsrs	r3, r4, #16
 800862e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008632:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008636:	b289      	uxth	r1, r1
 8008638:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800863c:	45c8      	cmp	r8, r9
 800863e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008642:	4694      	mov	ip, r2
 8008644:	f845 3b04 	str.w	r3, [r5], #4
 8008648:	d8e8      	bhi.n	800861c <__mdiff+0x5c>
 800864a:	45bc      	cmp	ip, r7
 800864c:	d304      	bcc.n	8008658 <__mdiff+0x98>
 800864e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008652:	b183      	cbz	r3, 8008676 <__mdiff+0xb6>
 8008654:	6106      	str	r6, [r0, #16]
 8008656:	e7c5      	b.n	80085e4 <__mdiff+0x24>
 8008658:	f85c 1b04 	ldr.w	r1, [ip], #4
 800865c:	fa1e f381 	uxtah	r3, lr, r1
 8008660:	141a      	asrs	r2, r3, #16
 8008662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008666:	b29b      	uxth	r3, r3
 8008668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800866c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008670:	f845 3b04 	str.w	r3, [r5], #4
 8008674:	e7e9      	b.n	800864a <__mdiff+0x8a>
 8008676:	3e01      	subs	r6, #1
 8008678:	e7e9      	b.n	800864e <__mdiff+0x8e>

0800867a <__d2b>:
 800867a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800867e:	460e      	mov	r6, r1
 8008680:	2101      	movs	r1, #1
 8008682:	ec59 8b10 	vmov	r8, r9, d0
 8008686:	4615      	mov	r5, r2
 8008688:	f7ff fd6a 	bl	8008160 <_Balloc>
 800868c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008690:	4607      	mov	r7, r0
 8008692:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008696:	bb34      	cbnz	r4, 80086e6 <__d2b+0x6c>
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	f1b8 0300 	subs.w	r3, r8, #0
 800869e:	d027      	beq.n	80086f0 <__d2b+0x76>
 80086a0:	a802      	add	r0, sp, #8
 80086a2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80086a6:	f7ff fe00 	bl	80082aa <__lo0bits>
 80086aa:	9900      	ldr	r1, [sp, #0]
 80086ac:	b1f0      	cbz	r0, 80086ec <__d2b+0x72>
 80086ae:	9a01      	ldr	r2, [sp, #4]
 80086b0:	f1c0 0320 	rsb	r3, r0, #32
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	430b      	orrs	r3, r1
 80086ba:	40c2      	lsrs	r2, r0
 80086bc:	617b      	str	r3, [r7, #20]
 80086be:	9201      	str	r2, [sp, #4]
 80086c0:	9b01      	ldr	r3, [sp, #4]
 80086c2:	61bb      	str	r3, [r7, #24]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bf14      	ite	ne
 80086c8:	2102      	movne	r1, #2
 80086ca:	2101      	moveq	r1, #1
 80086cc:	6139      	str	r1, [r7, #16]
 80086ce:	b1c4      	cbz	r4, 8008702 <__d2b+0x88>
 80086d0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80086d4:	4404      	add	r4, r0
 80086d6:	6034      	str	r4, [r6, #0]
 80086d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086dc:	6028      	str	r0, [r5, #0]
 80086de:	4638      	mov	r0, r7
 80086e0:	b003      	add	sp, #12
 80086e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086ea:	e7d5      	b.n	8008698 <__d2b+0x1e>
 80086ec:	6179      	str	r1, [r7, #20]
 80086ee:	e7e7      	b.n	80086c0 <__d2b+0x46>
 80086f0:	a801      	add	r0, sp, #4
 80086f2:	f7ff fdda 	bl	80082aa <__lo0bits>
 80086f6:	9b01      	ldr	r3, [sp, #4]
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	2101      	movs	r1, #1
 80086fc:	6139      	str	r1, [r7, #16]
 80086fe:	3020      	adds	r0, #32
 8008700:	e7e5      	b.n	80086ce <__d2b+0x54>
 8008702:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008706:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800870a:	6030      	str	r0, [r6, #0]
 800870c:	6918      	ldr	r0, [r3, #16]
 800870e:	f7ff fdad 	bl	800826c <__hi0bits>
 8008712:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008716:	e7e1      	b.n	80086dc <__d2b+0x62>

08008718 <_calloc_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	fb02 f401 	mul.w	r4, r2, r1
 800871e:	4621      	mov	r1, r4
 8008720:	f000 f856 	bl	80087d0 <_malloc_r>
 8008724:	4605      	mov	r5, r0
 8008726:	b118      	cbz	r0, 8008730 <_calloc_r+0x18>
 8008728:	4622      	mov	r2, r4
 800872a:	2100      	movs	r1, #0
 800872c:	f7fd ff3f 	bl	80065ae <memset>
 8008730:	4628      	mov	r0, r5
 8008732:	bd38      	pop	{r3, r4, r5, pc}

08008734 <_free_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4605      	mov	r5, r0
 8008738:	2900      	cmp	r1, #0
 800873a:	d045      	beq.n	80087c8 <_free_r+0x94>
 800873c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008740:	1f0c      	subs	r4, r1, #4
 8008742:	2b00      	cmp	r3, #0
 8008744:	bfb8      	it	lt
 8008746:	18e4      	addlt	r4, r4, r3
 8008748:	f000 fa98 	bl	8008c7c <__malloc_lock>
 800874c:	4a1f      	ldr	r2, [pc, #124]	; (80087cc <_free_r+0x98>)
 800874e:	6813      	ldr	r3, [r2, #0]
 8008750:	4610      	mov	r0, r2
 8008752:	b933      	cbnz	r3, 8008762 <_free_r+0x2e>
 8008754:	6063      	str	r3, [r4, #4]
 8008756:	6014      	str	r4, [r2, #0]
 8008758:	4628      	mov	r0, r5
 800875a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875e:	f000 ba8e 	b.w	8008c7e <__malloc_unlock>
 8008762:	42a3      	cmp	r3, r4
 8008764:	d90c      	bls.n	8008780 <_free_r+0x4c>
 8008766:	6821      	ldr	r1, [r4, #0]
 8008768:	1862      	adds	r2, r4, r1
 800876a:	4293      	cmp	r3, r2
 800876c:	bf04      	itt	eq
 800876e:	681a      	ldreq	r2, [r3, #0]
 8008770:	685b      	ldreq	r3, [r3, #4]
 8008772:	6063      	str	r3, [r4, #4]
 8008774:	bf04      	itt	eq
 8008776:	1852      	addeq	r2, r2, r1
 8008778:	6022      	streq	r2, [r4, #0]
 800877a:	6004      	str	r4, [r0, #0]
 800877c:	e7ec      	b.n	8008758 <_free_r+0x24>
 800877e:	4613      	mov	r3, r2
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	b10a      	cbz	r2, 8008788 <_free_r+0x54>
 8008784:	42a2      	cmp	r2, r4
 8008786:	d9fa      	bls.n	800877e <_free_r+0x4a>
 8008788:	6819      	ldr	r1, [r3, #0]
 800878a:	1858      	adds	r0, r3, r1
 800878c:	42a0      	cmp	r0, r4
 800878e:	d10b      	bne.n	80087a8 <_free_r+0x74>
 8008790:	6820      	ldr	r0, [r4, #0]
 8008792:	4401      	add	r1, r0
 8008794:	1858      	adds	r0, r3, r1
 8008796:	4282      	cmp	r2, r0
 8008798:	6019      	str	r1, [r3, #0]
 800879a:	d1dd      	bne.n	8008758 <_free_r+0x24>
 800879c:	6810      	ldr	r0, [r2, #0]
 800879e:	6852      	ldr	r2, [r2, #4]
 80087a0:	605a      	str	r2, [r3, #4]
 80087a2:	4401      	add	r1, r0
 80087a4:	6019      	str	r1, [r3, #0]
 80087a6:	e7d7      	b.n	8008758 <_free_r+0x24>
 80087a8:	d902      	bls.n	80087b0 <_free_r+0x7c>
 80087aa:	230c      	movs	r3, #12
 80087ac:	602b      	str	r3, [r5, #0]
 80087ae:	e7d3      	b.n	8008758 <_free_r+0x24>
 80087b0:	6820      	ldr	r0, [r4, #0]
 80087b2:	1821      	adds	r1, r4, r0
 80087b4:	428a      	cmp	r2, r1
 80087b6:	bf04      	itt	eq
 80087b8:	6811      	ldreq	r1, [r2, #0]
 80087ba:	6852      	ldreq	r2, [r2, #4]
 80087bc:	6062      	str	r2, [r4, #4]
 80087be:	bf04      	itt	eq
 80087c0:	1809      	addeq	r1, r1, r0
 80087c2:	6021      	streq	r1, [r4, #0]
 80087c4:	605c      	str	r4, [r3, #4]
 80087c6:	e7c7      	b.n	8008758 <_free_r+0x24>
 80087c8:	bd38      	pop	{r3, r4, r5, pc}
 80087ca:	bf00      	nop
 80087cc:	2000031c 	.word	0x2000031c

080087d0 <_malloc_r>:
 80087d0:	b570      	push	{r4, r5, r6, lr}
 80087d2:	1ccd      	adds	r5, r1, #3
 80087d4:	f025 0503 	bic.w	r5, r5, #3
 80087d8:	3508      	adds	r5, #8
 80087da:	2d0c      	cmp	r5, #12
 80087dc:	bf38      	it	cc
 80087de:	250c      	movcc	r5, #12
 80087e0:	2d00      	cmp	r5, #0
 80087e2:	4606      	mov	r6, r0
 80087e4:	db01      	blt.n	80087ea <_malloc_r+0x1a>
 80087e6:	42a9      	cmp	r1, r5
 80087e8:	d903      	bls.n	80087f2 <_malloc_r+0x22>
 80087ea:	230c      	movs	r3, #12
 80087ec:	6033      	str	r3, [r6, #0]
 80087ee:	2000      	movs	r0, #0
 80087f0:	bd70      	pop	{r4, r5, r6, pc}
 80087f2:	f000 fa43 	bl	8008c7c <__malloc_lock>
 80087f6:	4a21      	ldr	r2, [pc, #132]	; (800887c <_malloc_r+0xac>)
 80087f8:	6814      	ldr	r4, [r2, #0]
 80087fa:	4621      	mov	r1, r4
 80087fc:	b991      	cbnz	r1, 8008824 <_malloc_r+0x54>
 80087fe:	4c20      	ldr	r4, [pc, #128]	; (8008880 <_malloc_r+0xb0>)
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	b91b      	cbnz	r3, 800880c <_malloc_r+0x3c>
 8008804:	4630      	mov	r0, r6
 8008806:	f000 f97d 	bl	8008b04 <_sbrk_r>
 800880a:	6020      	str	r0, [r4, #0]
 800880c:	4629      	mov	r1, r5
 800880e:	4630      	mov	r0, r6
 8008810:	f000 f978 	bl	8008b04 <_sbrk_r>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d124      	bne.n	8008862 <_malloc_r+0x92>
 8008818:	230c      	movs	r3, #12
 800881a:	6033      	str	r3, [r6, #0]
 800881c:	4630      	mov	r0, r6
 800881e:	f000 fa2e 	bl	8008c7e <__malloc_unlock>
 8008822:	e7e4      	b.n	80087ee <_malloc_r+0x1e>
 8008824:	680b      	ldr	r3, [r1, #0]
 8008826:	1b5b      	subs	r3, r3, r5
 8008828:	d418      	bmi.n	800885c <_malloc_r+0x8c>
 800882a:	2b0b      	cmp	r3, #11
 800882c:	d90f      	bls.n	800884e <_malloc_r+0x7e>
 800882e:	600b      	str	r3, [r1, #0]
 8008830:	50cd      	str	r5, [r1, r3]
 8008832:	18cc      	adds	r4, r1, r3
 8008834:	4630      	mov	r0, r6
 8008836:	f000 fa22 	bl	8008c7e <__malloc_unlock>
 800883a:	f104 000b 	add.w	r0, r4, #11
 800883e:	1d23      	adds	r3, r4, #4
 8008840:	f020 0007 	bic.w	r0, r0, #7
 8008844:	1ac3      	subs	r3, r0, r3
 8008846:	d0d3      	beq.n	80087f0 <_malloc_r+0x20>
 8008848:	425a      	negs	r2, r3
 800884a:	50e2      	str	r2, [r4, r3]
 800884c:	e7d0      	b.n	80087f0 <_malloc_r+0x20>
 800884e:	428c      	cmp	r4, r1
 8008850:	684b      	ldr	r3, [r1, #4]
 8008852:	bf16      	itet	ne
 8008854:	6063      	strne	r3, [r4, #4]
 8008856:	6013      	streq	r3, [r2, #0]
 8008858:	460c      	movne	r4, r1
 800885a:	e7eb      	b.n	8008834 <_malloc_r+0x64>
 800885c:	460c      	mov	r4, r1
 800885e:	6849      	ldr	r1, [r1, #4]
 8008860:	e7cc      	b.n	80087fc <_malloc_r+0x2c>
 8008862:	1cc4      	adds	r4, r0, #3
 8008864:	f024 0403 	bic.w	r4, r4, #3
 8008868:	42a0      	cmp	r0, r4
 800886a:	d005      	beq.n	8008878 <_malloc_r+0xa8>
 800886c:	1a21      	subs	r1, r4, r0
 800886e:	4630      	mov	r0, r6
 8008870:	f000 f948 	bl	8008b04 <_sbrk_r>
 8008874:	3001      	adds	r0, #1
 8008876:	d0cf      	beq.n	8008818 <_malloc_r+0x48>
 8008878:	6025      	str	r5, [r4, #0]
 800887a:	e7db      	b.n	8008834 <_malloc_r+0x64>
 800887c:	2000031c 	.word	0x2000031c
 8008880:	20000320 	.word	0x20000320

08008884 <__sfputc_r>:
 8008884:	6893      	ldr	r3, [r2, #8]
 8008886:	3b01      	subs	r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	b410      	push	{r4}
 800888c:	6093      	str	r3, [r2, #8]
 800888e:	da08      	bge.n	80088a2 <__sfputc_r+0x1e>
 8008890:	6994      	ldr	r4, [r2, #24]
 8008892:	42a3      	cmp	r3, r4
 8008894:	db01      	blt.n	800889a <__sfputc_r+0x16>
 8008896:	290a      	cmp	r1, #10
 8008898:	d103      	bne.n	80088a2 <__sfputc_r+0x1e>
 800889a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800889e:	f7fe bb67 	b.w	8006f70 <__swbuf_r>
 80088a2:	6813      	ldr	r3, [r2, #0]
 80088a4:	1c58      	adds	r0, r3, #1
 80088a6:	6010      	str	r0, [r2, #0]
 80088a8:	7019      	strb	r1, [r3, #0]
 80088aa:	4608      	mov	r0, r1
 80088ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <__sfputs_r>:
 80088b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	4614      	mov	r4, r2
 80088ba:	18d5      	adds	r5, r2, r3
 80088bc:	42ac      	cmp	r4, r5
 80088be:	d101      	bne.n	80088c4 <__sfputs_r+0x12>
 80088c0:	2000      	movs	r0, #0
 80088c2:	e007      	b.n	80088d4 <__sfputs_r+0x22>
 80088c4:	463a      	mov	r2, r7
 80088c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ca:	4630      	mov	r0, r6
 80088cc:	f7ff ffda 	bl	8008884 <__sfputc_r>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d1f3      	bne.n	80088bc <__sfputs_r+0xa>
 80088d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088d8 <_vfiprintf_r>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	460c      	mov	r4, r1
 80088de:	b09d      	sub	sp, #116	; 0x74
 80088e0:	4617      	mov	r7, r2
 80088e2:	461d      	mov	r5, r3
 80088e4:	4606      	mov	r6, r0
 80088e6:	b118      	cbz	r0, 80088f0 <_vfiprintf_r+0x18>
 80088e8:	6983      	ldr	r3, [r0, #24]
 80088ea:	b90b      	cbnz	r3, 80088f0 <_vfiprintf_r+0x18>
 80088ec:	f7ff fb34 	bl	8007f58 <__sinit>
 80088f0:	4b7c      	ldr	r3, [pc, #496]	; (8008ae4 <_vfiprintf_r+0x20c>)
 80088f2:	429c      	cmp	r4, r3
 80088f4:	d158      	bne.n	80089a8 <_vfiprintf_r+0xd0>
 80088f6:	6874      	ldr	r4, [r6, #4]
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	0718      	lsls	r0, r3, #28
 80088fc:	d55e      	bpl.n	80089bc <_vfiprintf_r+0xe4>
 80088fe:	6923      	ldr	r3, [r4, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d05b      	beq.n	80089bc <_vfiprintf_r+0xe4>
 8008904:	2300      	movs	r3, #0
 8008906:	9309      	str	r3, [sp, #36]	; 0x24
 8008908:	2320      	movs	r3, #32
 800890a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800890e:	2330      	movs	r3, #48	; 0x30
 8008910:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008914:	9503      	str	r5, [sp, #12]
 8008916:	f04f 0b01 	mov.w	fp, #1
 800891a:	46b8      	mov	r8, r7
 800891c:	4645      	mov	r5, r8
 800891e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008922:	b10b      	cbz	r3, 8008928 <_vfiprintf_r+0x50>
 8008924:	2b25      	cmp	r3, #37	; 0x25
 8008926:	d154      	bne.n	80089d2 <_vfiprintf_r+0xfa>
 8008928:	ebb8 0a07 	subs.w	sl, r8, r7
 800892c:	d00b      	beq.n	8008946 <_vfiprintf_r+0x6e>
 800892e:	4653      	mov	r3, sl
 8008930:	463a      	mov	r2, r7
 8008932:	4621      	mov	r1, r4
 8008934:	4630      	mov	r0, r6
 8008936:	f7ff ffbc 	bl	80088b2 <__sfputs_r>
 800893a:	3001      	adds	r0, #1
 800893c:	f000 80c2 	beq.w	8008ac4 <_vfiprintf_r+0x1ec>
 8008940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008942:	4453      	add	r3, sl
 8008944:	9309      	str	r3, [sp, #36]	; 0x24
 8008946:	f898 3000 	ldrb.w	r3, [r8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 80ba 	beq.w	8008ac4 <_vfiprintf_r+0x1ec>
 8008950:	2300      	movs	r3, #0
 8008952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	9307      	str	r3, [sp, #28]
 800895e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008962:	931a      	str	r3, [sp, #104]	; 0x68
 8008964:	46a8      	mov	r8, r5
 8008966:	2205      	movs	r2, #5
 8008968:	f818 1b01 	ldrb.w	r1, [r8], #1
 800896c:	485e      	ldr	r0, [pc, #376]	; (8008ae8 <_vfiprintf_r+0x210>)
 800896e:	f7f8 fa07 	bl	8000d80 <memchr>
 8008972:	9b04      	ldr	r3, [sp, #16]
 8008974:	bb78      	cbnz	r0, 80089d6 <_vfiprintf_r+0xfe>
 8008976:	06d9      	lsls	r1, r3, #27
 8008978:	bf44      	itt	mi
 800897a:	2220      	movmi	r2, #32
 800897c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008980:	071a      	lsls	r2, r3, #28
 8008982:	bf44      	itt	mi
 8008984:	222b      	movmi	r2, #43	; 0x2b
 8008986:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800898a:	782a      	ldrb	r2, [r5, #0]
 800898c:	2a2a      	cmp	r2, #42	; 0x2a
 800898e:	d02a      	beq.n	80089e6 <_vfiprintf_r+0x10e>
 8008990:	9a07      	ldr	r2, [sp, #28]
 8008992:	46a8      	mov	r8, r5
 8008994:	2000      	movs	r0, #0
 8008996:	250a      	movs	r5, #10
 8008998:	4641      	mov	r1, r8
 800899a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800899e:	3b30      	subs	r3, #48	; 0x30
 80089a0:	2b09      	cmp	r3, #9
 80089a2:	d969      	bls.n	8008a78 <_vfiprintf_r+0x1a0>
 80089a4:	b360      	cbz	r0, 8008a00 <_vfiprintf_r+0x128>
 80089a6:	e024      	b.n	80089f2 <_vfiprintf_r+0x11a>
 80089a8:	4b50      	ldr	r3, [pc, #320]	; (8008aec <_vfiprintf_r+0x214>)
 80089aa:	429c      	cmp	r4, r3
 80089ac:	d101      	bne.n	80089b2 <_vfiprintf_r+0xda>
 80089ae:	68b4      	ldr	r4, [r6, #8]
 80089b0:	e7a2      	b.n	80088f8 <_vfiprintf_r+0x20>
 80089b2:	4b4f      	ldr	r3, [pc, #316]	; (8008af0 <_vfiprintf_r+0x218>)
 80089b4:	429c      	cmp	r4, r3
 80089b6:	bf08      	it	eq
 80089b8:	68f4      	ldreq	r4, [r6, #12]
 80089ba:	e79d      	b.n	80088f8 <_vfiprintf_r+0x20>
 80089bc:	4621      	mov	r1, r4
 80089be:	4630      	mov	r0, r6
 80089c0:	f7fe fb28 	bl	8007014 <__swsetup_r>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d09d      	beq.n	8008904 <_vfiprintf_r+0x2c>
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089cc:	b01d      	add	sp, #116	; 0x74
 80089ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d2:	46a8      	mov	r8, r5
 80089d4:	e7a2      	b.n	800891c <_vfiprintf_r+0x44>
 80089d6:	4a44      	ldr	r2, [pc, #272]	; (8008ae8 <_vfiprintf_r+0x210>)
 80089d8:	1a80      	subs	r0, r0, r2
 80089da:	fa0b f000 	lsl.w	r0, fp, r0
 80089de:	4318      	orrs	r0, r3
 80089e0:	9004      	str	r0, [sp, #16]
 80089e2:	4645      	mov	r5, r8
 80089e4:	e7be      	b.n	8008964 <_vfiprintf_r+0x8c>
 80089e6:	9a03      	ldr	r2, [sp, #12]
 80089e8:	1d11      	adds	r1, r2, #4
 80089ea:	6812      	ldr	r2, [r2, #0]
 80089ec:	9103      	str	r1, [sp, #12]
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	db01      	blt.n	80089f6 <_vfiprintf_r+0x11e>
 80089f2:	9207      	str	r2, [sp, #28]
 80089f4:	e004      	b.n	8008a00 <_vfiprintf_r+0x128>
 80089f6:	4252      	negs	r2, r2
 80089f8:	f043 0302 	orr.w	r3, r3, #2
 80089fc:	9207      	str	r2, [sp, #28]
 80089fe:	9304      	str	r3, [sp, #16]
 8008a00:	f898 3000 	ldrb.w	r3, [r8]
 8008a04:	2b2e      	cmp	r3, #46	; 0x2e
 8008a06:	d10e      	bne.n	8008a26 <_vfiprintf_r+0x14e>
 8008a08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0e:	d138      	bne.n	8008a82 <_vfiprintf_r+0x1aa>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	1d1a      	adds	r2, r3, #4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	9203      	str	r2, [sp, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfb8      	it	lt
 8008a1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a20:	f108 0802 	add.w	r8, r8, #2
 8008a24:	9305      	str	r3, [sp, #20]
 8008a26:	4d33      	ldr	r5, [pc, #204]	; (8008af4 <_vfiprintf_r+0x21c>)
 8008a28:	f898 1000 	ldrb.w	r1, [r8]
 8008a2c:	2203      	movs	r2, #3
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f7f8 f9a6 	bl	8000d80 <memchr>
 8008a34:	b140      	cbz	r0, 8008a48 <_vfiprintf_r+0x170>
 8008a36:	2340      	movs	r3, #64	; 0x40
 8008a38:	1b40      	subs	r0, r0, r5
 8008a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	4303      	orrs	r3, r0
 8008a42:	f108 0801 	add.w	r8, r8, #1
 8008a46:	9304      	str	r3, [sp, #16]
 8008a48:	f898 1000 	ldrb.w	r1, [r8]
 8008a4c:	482a      	ldr	r0, [pc, #168]	; (8008af8 <_vfiprintf_r+0x220>)
 8008a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a52:	2206      	movs	r2, #6
 8008a54:	f108 0701 	add.w	r7, r8, #1
 8008a58:	f7f8 f992 	bl	8000d80 <memchr>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d037      	beq.n	8008ad0 <_vfiprintf_r+0x1f8>
 8008a60:	4b26      	ldr	r3, [pc, #152]	; (8008afc <_vfiprintf_r+0x224>)
 8008a62:	bb1b      	cbnz	r3, 8008aac <_vfiprintf_r+0x1d4>
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	3307      	adds	r3, #7
 8008a68:	f023 0307 	bic.w	r3, r3, #7
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	9303      	str	r3, [sp, #12]
 8008a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a72:	444b      	add	r3, r9
 8008a74:	9309      	str	r3, [sp, #36]	; 0x24
 8008a76:	e750      	b.n	800891a <_vfiprintf_r+0x42>
 8008a78:	fb05 3202 	mla	r2, r5, r2, r3
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	4688      	mov	r8, r1
 8008a80:	e78a      	b.n	8008998 <_vfiprintf_r+0xc0>
 8008a82:	2300      	movs	r3, #0
 8008a84:	f108 0801 	add.w	r8, r8, #1
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	250a      	movs	r5, #10
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a94:	3a30      	subs	r2, #48	; 0x30
 8008a96:	2a09      	cmp	r2, #9
 8008a98:	d903      	bls.n	8008aa2 <_vfiprintf_r+0x1ca>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0c3      	beq.n	8008a26 <_vfiprintf_r+0x14e>
 8008a9e:	9105      	str	r1, [sp, #20]
 8008aa0:	e7c1      	b.n	8008a26 <_vfiprintf_r+0x14e>
 8008aa2:	fb05 2101 	mla	r1, r5, r1, r2
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	e7f0      	b.n	8008a8e <_vfiprintf_r+0x1b6>
 8008aac:	ab03      	add	r3, sp, #12
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	4622      	mov	r2, r4
 8008ab2:	4b13      	ldr	r3, [pc, #76]	; (8008b00 <_vfiprintf_r+0x228>)
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7fd fe16 	bl	80066e8 <_printf_float>
 8008abc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008ac0:	4681      	mov	r9, r0
 8008ac2:	d1d5      	bne.n	8008a70 <_vfiprintf_r+0x198>
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	065b      	lsls	r3, r3, #25
 8008ac8:	f53f af7e 	bmi.w	80089c8 <_vfiprintf_r+0xf0>
 8008acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ace:	e77d      	b.n	80089cc <_vfiprintf_r+0xf4>
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	4b0a      	ldr	r3, [pc, #40]	; (8008b00 <_vfiprintf_r+0x228>)
 8008ad8:	a904      	add	r1, sp, #16
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7fe f8ba 	bl	8006c54 <_printf_i>
 8008ae0:	e7ec      	b.n	8008abc <_vfiprintf_r+0x1e4>
 8008ae2:	bf00      	nop
 8008ae4:	0800ab30 	.word	0x0800ab30
 8008ae8:	0800ac6c 	.word	0x0800ac6c
 8008aec:	0800ab50 	.word	0x0800ab50
 8008af0:	0800ab10 	.word	0x0800ab10
 8008af4:	0800ac72 	.word	0x0800ac72
 8008af8:	0800ac76 	.word	0x0800ac76
 8008afc:	080066e9 	.word	0x080066e9
 8008b00:	080088b3 	.word	0x080088b3

08008b04 <_sbrk_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4c06      	ldr	r4, [pc, #24]	; (8008b20 <_sbrk_r+0x1c>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	6023      	str	r3, [r4, #0]
 8008b10:	f7fd fcaa 	bl	8006468 <_sbrk>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_sbrk_r+0x1a>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_sbrk_r+0x1a>
 8008b1c:	602b      	str	r3, [r5, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	200006cc 	.word	0x200006cc

08008b24 <__sread>:
 8008b24:	b510      	push	{r4, lr}
 8008b26:	460c      	mov	r4, r1
 8008b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b2c:	f000 f8a8 	bl	8008c80 <_read_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	bfab      	itete	ge
 8008b34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b36:	89a3      	ldrhlt	r3, [r4, #12]
 8008b38:	181b      	addge	r3, r3, r0
 8008b3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b3e:	bfac      	ite	ge
 8008b40:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b42:	81a3      	strhlt	r3, [r4, #12]
 8008b44:	bd10      	pop	{r4, pc}

08008b46 <__swrite>:
 8008b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4a:	461f      	mov	r7, r3
 8008b4c:	898b      	ldrh	r3, [r1, #12]
 8008b4e:	05db      	lsls	r3, r3, #23
 8008b50:	4605      	mov	r5, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	4616      	mov	r6, r2
 8008b56:	d505      	bpl.n	8008b64 <__swrite+0x1e>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b60:	f000 f868 	bl	8008c34 <_lseek_r>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	4632      	mov	r2, r6
 8008b72:	463b      	mov	r3, r7
 8008b74:	4628      	mov	r0, r5
 8008b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7a:	f000 b817 	b.w	8008bac <_write_r>

08008b7e <__sseek>:
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	460c      	mov	r4, r1
 8008b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b86:	f000 f855 	bl	8008c34 <_lseek_r>
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	bf15      	itete	ne
 8008b90:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b9a:	81a3      	strheq	r3, [r4, #12]
 8008b9c:	bf18      	it	ne
 8008b9e:	81a3      	strhne	r3, [r4, #12]
 8008ba0:	bd10      	pop	{r4, pc}

08008ba2 <__sclose>:
 8008ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba6:	f000 b813 	b.w	8008bd0 <_close_r>
	...

08008bac <_write_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4c07      	ldr	r4, [pc, #28]	; (8008bcc <_write_r+0x20>)
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	4608      	mov	r0, r1
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	6022      	str	r2, [r4, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f7fd f9e6 	bl	8005f8c <_write>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_write_r+0x1e>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_write_r+0x1e>
 8008bc8:	602b      	str	r3, [r5, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	200006cc 	.word	0x200006cc

08008bd0 <_close_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4c06      	ldr	r4, [pc, #24]	; (8008bec <_close_r+0x1c>)
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	f7fd fc38 	bl	8006450 <_close>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_close_r+0x1a>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_close_r+0x1a>
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	200006cc 	.word	0x200006cc

08008bf0 <_fstat_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4c07      	ldr	r4, [pc, #28]	; (8008c10 <_fstat_r+0x20>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	f7fd fc2a 	bl	8006456 <_fstat>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d102      	bne.n	8008c0c <_fstat_r+0x1c>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	b103      	cbz	r3, 8008c0c <_fstat_r+0x1c>
 8008c0a:	602b      	str	r3, [r5, #0]
 8008c0c:	bd38      	pop	{r3, r4, r5, pc}
 8008c0e:	bf00      	nop
 8008c10:	200006cc 	.word	0x200006cc

08008c14 <_isatty_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4c06      	ldr	r4, [pc, #24]	; (8008c30 <_isatty_r+0x1c>)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	f7fd fc1e 	bl	8006460 <_isatty>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_isatty_r+0x1a>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_isatty_r+0x1a>
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	200006cc 	.word	0x200006cc

08008c34 <_lseek_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4c07      	ldr	r4, [pc, #28]	; (8008c54 <_lseek_r+0x20>)
 8008c38:	4605      	mov	r5, r0
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	6022      	str	r2, [r4, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f7fd fc0e 	bl	8006464 <_lseek>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_lseek_r+0x1e>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_lseek_r+0x1e>
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	200006cc 	.word	0x200006cc

08008c58 <__ascii_mbtowc>:
 8008c58:	b082      	sub	sp, #8
 8008c5a:	b901      	cbnz	r1, 8008c5e <__ascii_mbtowc+0x6>
 8008c5c:	a901      	add	r1, sp, #4
 8008c5e:	b142      	cbz	r2, 8008c72 <__ascii_mbtowc+0x1a>
 8008c60:	b14b      	cbz	r3, 8008c76 <__ascii_mbtowc+0x1e>
 8008c62:	7813      	ldrb	r3, [r2, #0]
 8008c64:	600b      	str	r3, [r1, #0]
 8008c66:	7812      	ldrb	r2, [r2, #0]
 8008c68:	1c10      	adds	r0, r2, #0
 8008c6a:	bf18      	it	ne
 8008c6c:	2001      	movne	r0, #1
 8008c6e:	b002      	add	sp, #8
 8008c70:	4770      	bx	lr
 8008c72:	4610      	mov	r0, r2
 8008c74:	e7fb      	b.n	8008c6e <__ascii_mbtowc+0x16>
 8008c76:	f06f 0001 	mvn.w	r0, #1
 8008c7a:	e7f8      	b.n	8008c6e <__ascii_mbtowc+0x16>

08008c7c <__malloc_lock>:
 8008c7c:	4770      	bx	lr

08008c7e <__malloc_unlock>:
 8008c7e:	4770      	bx	lr

08008c80 <_read_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4c07      	ldr	r4, [pc, #28]	; (8008ca0 <_read_r+0x20>)
 8008c84:	4605      	mov	r5, r0
 8008c86:	4608      	mov	r0, r1
 8008c88:	4611      	mov	r1, r2
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	6022      	str	r2, [r4, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f7fd fbd0 	bl	8006434 <_read>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	d102      	bne.n	8008c9e <_read_r+0x1e>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	b103      	cbz	r3, 8008c9e <_read_r+0x1e>
 8008c9c:	602b      	str	r3, [r5, #0]
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	200006cc 	.word	0x200006cc

08008ca4 <__ascii_wctomb>:
 8008ca4:	b149      	cbz	r1, 8008cba <__ascii_wctomb+0x16>
 8008ca6:	2aff      	cmp	r2, #255	; 0xff
 8008ca8:	bf85      	ittet	hi
 8008caa:	238a      	movhi	r3, #138	; 0x8a
 8008cac:	6003      	strhi	r3, [r0, #0]
 8008cae:	700a      	strbls	r2, [r1, #0]
 8008cb0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008cb4:	bf98      	it	ls
 8008cb6:	2001      	movls	r0, #1
 8008cb8:	4770      	bx	lr
 8008cba:	4608      	mov	r0, r1
 8008cbc:	4770      	bx	lr
	...

08008cc0 <asin>:
 8008cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cc2:	ed2d 8b02 	vpush	{d8}
 8008cc6:	4e26      	ldr	r6, [pc, #152]	; (8008d60 <asin+0xa0>)
 8008cc8:	b08b      	sub	sp, #44	; 0x2c
 8008cca:	ec55 4b10 	vmov	r4, r5, d0
 8008cce:	f000 fa1b 	bl	8009108 <__ieee754_asin>
 8008cd2:	f996 3000 	ldrsb.w	r3, [r6]
 8008cd6:	eeb0 8a40 	vmov.f32	s16, s0
 8008cda:	eef0 8a60 	vmov.f32	s17, s1
 8008cde:	3301      	adds	r3, #1
 8008ce0:	d036      	beq.n	8008d50 <asin+0x90>
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f7f8 f921 	bl	8000f30 <__aeabi_dcmpun>
 8008cee:	4607      	mov	r7, r0
 8008cf0:	bb70      	cbnz	r0, 8008d50 <asin+0x90>
 8008cf2:	ec45 4b10 	vmov	d0, r4, r5
 8008cf6:	f001 fc57 	bl	800a5a8 <fabs>
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	4b19      	ldr	r3, [pc, #100]	; (8008d64 <asin+0xa4>)
 8008cfe:	ec51 0b10 	vmov	r0, r1, d0
 8008d02:	f7f8 f90b 	bl	8000f1c <__aeabi_dcmpgt>
 8008d06:	b318      	cbz	r0, 8008d50 <asin+0x90>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	4816      	ldr	r0, [pc, #88]	; (8008d68 <asin+0xa8>)
 8008d0e:	4b17      	ldr	r3, [pc, #92]	; (8008d6c <asin+0xac>)
 8008d10:	9301      	str	r3, [sp, #4]
 8008d12:	9708      	str	r7, [sp, #32]
 8008d14:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008d18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008d1c:	f001 fc58 	bl	800a5d0 <nan>
 8008d20:	f996 3000 	ldrsb.w	r3, [r6]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008d2a:	d104      	bne.n	8008d36 <asin+0x76>
 8008d2c:	f7fd fc0a 	bl	8006544 <__errno>
 8008d30:	2321      	movs	r3, #33	; 0x21
 8008d32:	6003      	str	r3, [r0, #0]
 8008d34:	e004      	b.n	8008d40 <asin+0x80>
 8008d36:	4668      	mov	r0, sp
 8008d38:	f001 fc47 	bl	800a5ca <matherr>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d0f5      	beq.n	8008d2c <asin+0x6c>
 8008d40:	9b08      	ldr	r3, [sp, #32]
 8008d42:	b11b      	cbz	r3, 8008d4c <asin+0x8c>
 8008d44:	f7fd fbfe 	bl	8006544 <__errno>
 8008d48:	9b08      	ldr	r3, [sp, #32]
 8008d4a:	6003      	str	r3, [r0, #0]
 8008d4c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008d50:	eeb0 0a48 	vmov.f32	s0, s16
 8008d54:	eef0 0a68 	vmov.f32	s1, s17
 8008d58:	b00b      	add	sp, #44	; 0x2c
 8008d5a:	ecbd 8b02 	vpop	{d8}
 8008d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d60:	2000024c 	.word	0x2000024c
 8008d64:	3ff00000 	.word	0x3ff00000
 8008d68:	0800ac71 	.word	0x0800ac71
 8008d6c:	0800ad88 	.word	0x0800ad88

08008d70 <atan2>:
 8008d70:	f000 bbda 	b.w	8009528 <__ieee754_atan2>

08008d74 <pow>:
 8008d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d78:	ed2d 8b04 	vpush	{d8-d9}
 8008d7c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009050 <pow+0x2dc>
 8008d80:	b08d      	sub	sp, #52	; 0x34
 8008d82:	ec57 6b10 	vmov	r6, r7, d0
 8008d86:	ec55 4b11 	vmov	r4, r5, d1
 8008d8a:	f000 fcad 	bl	80096e8 <__ieee754_pow>
 8008d8e:	f999 3000 	ldrsb.w	r3, [r9]
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	3301      	adds	r3, #1
 8008d96:	eeb0 8a40 	vmov.f32	s16, s0
 8008d9a:	eef0 8a60 	vmov.f32	s17, s1
 8008d9e:	46c8      	mov	r8, r9
 8008da0:	d05f      	beq.n	8008e62 <pow+0xee>
 8008da2:	4622      	mov	r2, r4
 8008da4:	462b      	mov	r3, r5
 8008da6:	4620      	mov	r0, r4
 8008da8:	4629      	mov	r1, r5
 8008daa:	f7f8 f8c1 	bl	8000f30 <__aeabi_dcmpun>
 8008dae:	4683      	mov	fp, r0
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d156      	bne.n	8008e62 <pow+0xee>
 8008db4:	4632      	mov	r2, r6
 8008db6:	463b      	mov	r3, r7
 8008db8:	4630      	mov	r0, r6
 8008dba:	4639      	mov	r1, r7
 8008dbc:	f7f8 f8b8 	bl	8000f30 <__aeabi_dcmpun>
 8008dc0:	9001      	str	r0, [sp, #4]
 8008dc2:	b1e8      	cbz	r0, 8008e00 <pow+0x8c>
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	4620      	mov	r0, r4
 8008dca:	4629      	mov	r1, r5
 8008dcc:	f7f8 f87e 	bl	8000ecc <__aeabi_dcmpeq>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d046      	beq.n	8008e62 <pow+0xee>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	9302      	str	r3, [sp, #8]
 8008dd8:	4b96      	ldr	r3, [pc, #600]	; (8009034 <pow+0x2c0>)
 8008dda:	9303      	str	r3, [sp, #12]
 8008ddc:	4b96      	ldr	r3, [pc, #600]	; (8009038 <pow+0x2c4>)
 8008dde:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008de2:	2200      	movs	r2, #0
 8008de4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008de8:	9b00      	ldr	r3, [sp, #0]
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008df0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008df4:	d033      	beq.n	8008e5e <pow+0xea>
 8008df6:	a802      	add	r0, sp, #8
 8008df8:	f001 fbe7 	bl	800a5ca <matherr>
 8008dfc:	bb48      	cbnz	r0, 8008e52 <pow+0xde>
 8008dfe:	e05d      	b.n	8008ebc <pow+0x148>
 8008e00:	f04f 0a00 	mov.w	sl, #0
 8008e04:	f04f 0b00 	mov.w	fp, #0
 8008e08:	4652      	mov	r2, sl
 8008e0a:	465b      	mov	r3, fp
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7f8 f85c 	bl	8000ecc <__aeabi_dcmpeq>
 8008e14:	ec4b ab19 	vmov	d9, sl, fp
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d054      	beq.n	8008ec6 <pow+0x152>
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	465b      	mov	r3, fp
 8008e20:	4620      	mov	r0, r4
 8008e22:	4629      	mov	r1, r5
 8008e24:	f7f8 f852 	bl	8000ecc <__aeabi_dcmpeq>
 8008e28:	4680      	mov	r8, r0
 8008e2a:	b318      	cbz	r0, 8008e74 <pow+0x100>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	4b80      	ldr	r3, [pc, #512]	; (8009034 <pow+0x2c0>)
 8008e32:	9303      	str	r3, [sp, #12]
 8008e34:	9b01      	ldr	r3, [sp, #4]
 8008e36:	930a      	str	r3, [sp, #40]	; 0x28
 8008e38:	9b00      	ldr	r3, [sp, #0]
 8008e3a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008e3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008e42:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0d5      	beq.n	8008df6 <pow+0x82>
 8008e4a:	4b7b      	ldr	r3, [pc, #492]	; (8009038 <pow+0x2c4>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e54:	b11b      	cbz	r3, 8008e5e <pow+0xea>
 8008e56:	f7fd fb75 	bl	8006544 <__errno>
 8008e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e5c:	6003      	str	r3, [r0, #0]
 8008e5e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008e62:	eeb0 0a48 	vmov.f32	s0, s16
 8008e66:	eef0 0a68 	vmov.f32	s1, s17
 8008e6a:	b00d      	add	sp, #52	; 0x34
 8008e6c:	ecbd 8b04 	vpop	{d8-d9}
 8008e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e74:	ec45 4b10 	vmov	d0, r4, r5
 8008e78:	f001 fb9f 	bl	800a5ba <finite>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d0f0      	beq.n	8008e62 <pow+0xee>
 8008e80:	4652      	mov	r2, sl
 8008e82:	465b      	mov	r3, fp
 8008e84:	4620      	mov	r0, r4
 8008e86:	4629      	mov	r1, r5
 8008e88:	f7f8 f82a 	bl	8000ee0 <__aeabi_dcmplt>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d0e8      	beq.n	8008e62 <pow+0xee>
 8008e90:	2301      	movs	r3, #1
 8008e92:	9302      	str	r3, [sp, #8]
 8008e94:	4b67      	ldr	r3, [pc, #412]	; (8009034 <pow+0x2c0>)
 8008e96:	9303      	str	r3, [sp, #12]
 8008e98:	f999 3000 	ldrsb.w	r3, [r9]
 8008e9c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008ea0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008ea4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008ea8:	b913      	cbnz	r3, 8008eb0 <pow+0x13c>
 8008eaa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008eae:	e7a2      	b.n	8008df6 <pow+0x82>
 8008eb0:	4962      	ldr	r1, [pc, #392]	; (800903c <pow+0x2c8>)
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d19c      	bne.n	8008df6 <pow+0x82>
 8008ebc:	f7fd fb42 	bl	8006544 <__errno>
 8008ec0:	2321      	movs	r3, #33	; 0x21
 8008ec2:	6003      	str	r3, [r0, #0]
 8008ec4:	e7c5      	b.n	8008e52 <pow+0xde>
 8008ec6:	eeb0 0a48 	vmov.f32	s0, s16
 8008eca:	eef0 0a68 	vmov.f32	s1, s17
 8008ece:	f001 fb74 	bl	800a5ba <finite>
 8008ed2:	9000      	str	r0, [sp, #0]
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f040 8081 	bne.w	8008fdc <pow+0x268>
 8008eda:	ec47 6b10 	vmov	d0, r6, r7
 8008ede:	f001 fb6c 	bl	800a5ba <finite>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d07a      	beq.n	8008fdc <pow+0x268>
 8008ee6:	ec45 4b10 	vmov	d0, r4, r5
 8008eea:	f001 fb66 	bl	800a5ba <finite>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d074      	beq.n	8008fdc <pow+0x268>
 8008ef2:	ec53 2b18 	vmov	r2, r3, d8
 8008ef6:	ee18 0a10 	vmov	r0, s16
 8008efa:	4619      	mov	r1, r3
 8008efc:	f7f8 f818 	bl	8000f30 <__aeabi_dcmpun>
 8008f00:	f999 9000 	ldrsb.w	r9, [r9]
 8008f04:	4b4b      	ldr	r3, [pc, #300]	; (8009034 <pow+0x2c0>)
 8008f06:	b1b0      	cbz	r0, 8008f36 <pow+0x1c2>
 8008f08:	2201      	movs	r2, #1
 8008f0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f0e:	9b00      	ldr	r3, [sp, #0]
 8008f10:	930a      	str	r3, [sp, #40]	; 0x28
 8008f12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008f16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008f1a:	f1b9 0f00 	cmp.w	r9, #0
 8008f1e:	d0c4      	beq.n	8008eaa <pow+0x136>
 8008f20:	4652      	mov	r2, sl
 8008f22:	465b      	mov	r3, fp
 8008f24:	4650      	mov	r0, sl
 8008f26:	4659      	mov	r1, fp
 8008f28:	f7f7 fc40 	bl	80007ac <__aeabi_ddiv>
 8008f2c:	f1b9 0f02 	cmp.w	r9, #2
 8008f30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f34:	e7c1      	b.n	8008eba <pow+0x146>
 8008f36:	2203      	movs	r2, #3
 8008f38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f3c:	900a      	str	r0, [sp, #40]	; 0x28
 8008f3e:	4629      	mov	r1, r5
 8008f40:	4620      	mov	r0, r4
 8008f42:	2200      	movs	r2, #0
 8008f44:	4b3e      	ldr	r3, [pc, #248]	; (8009040 <pow+0x2cc>)
 8008f46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008f4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008f4e:	f7f7 fb03 	bl	8000558 <__aeabi_dmul>
 8008f52:	4604      	mov	r4, r0
 8008f54:	460d      	mov	r5, r1
 8008f56:	f1b9 0f00 	cmp.w	r9, #0
 8008f5a:	d124      	bne.n	8008fa6 <pow+0x232>
 8008f5c:	4b39      	ldr	r3, [pc, #228]	; (8009044 <pow+0x2d0>)
 8008f5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008f62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f66:	4630      	mov	r0, r6
 8008f68:	4652      	mov	r2, sl
 8008f6a:	465b      	mov	r3, fp
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 ffb7 	bl	8000ee0 <__aeabi_dcmplt>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d056      	beq.n	8009024 <pow+0x2b0>
 8008f76:	ec45 4b10 	vmov	d0, r4, r5
 8008f7a:	f001 fb31 	bl	800a5e0 <rint>
 8008f7e:	4622      	mov	r2, r4
 8008f80:	462b      	mov	r3, r5
 8008f82:	ec51 0b10 	vmov	r0, r1, d0
 8008f86:	f7f7 ffa1 	bl	8000ecc <__aeabi_dcmpeq>
 8008f8a:	b920      	cbnz	r0, 8008f96 <pow+0x222>
 8008f8c:	4b2e      	ldr	r3, [pc, #184]	; (8009048 <pow+0x2d4>)
 8008f8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008f92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f96:	f998 3000 	ldrsb.w	r3, [r8]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d142      	bne.n	8009024 <pow+0x2b0>
 8008f9e:	f7fd fad1 	bl	8006544 <__errno>
 8008fa2:	2322      	movs	r3, #34	; 0x22
 8008fa4:	e78d      	b.n	8008ec2 <pow+0x14e>
 8008fa6:	4b29      	ldr	r3, [pc, #164]	; (800904c <pow+0x2d8>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008fae:	4630      	mov	r0, r6
 8008fb0:	4652      	mov	r2, sl
 8008fb2:	465b      	mov	r3, fp
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	f7f7 ff93 	bl	8000ee0 <__aeabi_dcmplt>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d0eb      	beq.n	8008f96 <pow+0x222>
 8008fbe:	ec45 4b10 	vmov	d0, r4, r5
 8008fc2:	f001 fb0d 	bl	800a5e0 <rint>
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	462b      	mov	r3, r5
 8008fca:	ec51 0b10 	vmov	r0, r1, d0
 8008fce:	f7f7 ff7d 	bl	8000ecc <__aeabi_dcmpeq>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d1df      	bne.n	8008f96 <pow+0x222>
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	4b18      	ldr	r3, [pc, #96]	; (800903c <pow+0x2c8>)
 8008fda:	e7da      	b.n	8008f92 <pow+0x21e>
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2300      	movs	r3, #0
 8008fe0:	ec51 0b18 	vmov	r0, r1, d8
 8008fe4:	f7f7 ff72 	bl	8000ecc <__aeabi_dcmpeq>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	f43f af3a 	beq.w	8008e62 <pow+0xee>
 8008fee:	ec47 6b10 	vmov	d0, r6, r7
 8008ff2:	f001 fae2 	bl	800a5ba <finite>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f43f af33 	beq.w	8008e62 <pow+0xee>
 8008ffc:	ec45 4b10 	vmov	d0, r4, r5
 8009000:	f001 fadb 	bl	800a5ba <finite>
 8009004:	2800      	cmp	r0, #0
 8009006:	f43f af2c 	beq.w	8008e62 <pow+0xee>
 800900a:	2304      	movs	r3, #4
 800900c:	9302      	str	r3, [sp, #8]
 800900e:	4b09      	ldr	r3, [pc, #36]	; (8009034 <pow+0x2c0>)
 8009010:	9303      	str	r3, [sp, #12]
 8009012:	2300      	movs	r3, #0
 8009014:	930a      	str	r3, [sp, #40]	; 0x28
 8009016:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800901a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800901e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009022:	e7b8      	b.n	8008f96 <pow+0x222>
 8009024:	a802      	add	r0, sp, #8
 8009026:	f001 fad0 	bl	800a5ca <matherr>
 800902a:	2800      	cmp	r0, #0
 800902c:	f47f af11 	bne.w	8008e52 <pow+0xde>
 8009030:	e7b5      	b.n	8008f9e <pow+0x22a>
 8009032:	bf00      	nop
 8009034:	0800ad8d 	.word	0x0800ad8d
 8009038:	3ff00000 	.word	0x3ff00000
 800903c:	fff00000 	.word	0xfff00000
 8009040:	3fe00000 	.word	0x3fe00000
 8009044:	47efffff 	.word	0x47efffff
 8009048:	c7efffff 	.word	0xc7efffff
 800904c:	7ff00000 	.word	0x7ff00000
 8009050:	2000024c 	.word	0x2000024c

08009054 <sqrt>:
 8009054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009058:	ed2d 8b02 	vpush	{d8}
 800905c:	b08b      	sub	sp, #44	; 0x2c
 800905e:	ec55 4b10 	vmov	r4, r5, d0
 8009062:	f001 f84f 	bl	800a104 <__ieee754_sqrt>
 8009066:	4b26      	ldr	r3, [pc, #152]	; (8009100 <sqrt+0xac>)
 8009068:	eeb0 8a40 	vmov.f32	s16, s0
 800906c:	eef0 8a60 	vmov.f32	s17, s1
 8009070:	f993 6000 	ldrsb.w	r6, [r3]
 8009074:	1c73      	adds	r3, r6, #1
 8009076:	d02a      	beq.n	80090ce <sqrt+0x7a>
 8009078:	4622      	mov	r2, r4
 800907a:	462b      	mov	r3, r5
 800907c:	4620      	mov	r0, r4
 800907e:	4629      	mov	r1, r5
 8009080:	f7f7 ff56 	bl	8000f30 <__aeabi_dcmpun>
 8009084:	4607      	mov	r7, r0
 8009086:	bb10      	cbnz	r0, 80090ce <sqrt+0x7a>
 8009088:	f04f 0800 	mov.w	r8, #0
 800908c:	f04f 0900 	mov.w	r9, #0
 8009090:	4642      	mov	r2, r8
 8009092:	464b      	mov	r3, r9
 8009094:	4620      	mov	r0, r4
 8009096:	4629      	mov	r1, r5
 8009098:	f7f7 ff22 	bl	8000ee0 <__aeabi_dcmplt>
 800909c:	b1b8      	cbz	r0, 80090ce <sqrt+0x7a>
 800909e:	2301      	movs	r3, #1
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	4b18      	ldr	r3, [pc, #96]	; (8009104 <sqrt+0xb0>)
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	9708      	str	r7, [sp, #32]
 80090a8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80090ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80090b0:	b9b6      	cbnz	r6, 80090e0 <sqrt+0x8c>
 80090b2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80090b6:	4668      	mov	r0, sp
 80090b8:	f001 fa87 	bl	800a5ca <matherr>
 80090bc:	b1d0      	cbz	r0, 80090f4 <sqrt+0xa0>
 80090be:	9b08      	ldr	r3, [sp, #32]
 80090c0:	b11b      	cbz	r3, 80090ca <sqrt+0x76>
 80090c2:	f7fd fa3f 	bl	8006544 <__errno>
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	6003      	str	r3, [r0, #0]
 80090ca:	ed9d 8b06 	vldr	d8, [sp, #24]
 80090ce:	eeb0 0a48 	vmov.f32	s0, s16
 80090d2:	eef0 0a68 	vmov.f32	s1, s17
 80090d6:	b00b      	add	sp, #44	; 0x2c
 80090d8:	ecbd 8b02 	vpop	{d8}
 80090dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	4640      	mov	r0, r8
 80090e6:	4649      	mov	r1, r9
 80090e8:	f7f7 fb60 	bl	80007ac <__aeabi_ddiv>
 80090ec:	2e02      	cmp	r6, #2
 80090ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090f2:	d1e0      	bne.n	80090b6 <sqrt+0x62>
 80090f4:	f7fd fa26 	bl	8006544 <__errno>
 80090f8:	2321      	movs	r3, #33	; 0x21
 80090fa:	6003      	str	r3, [r0, #0]
 80090fc:	e7df      	b.n	80090be <sqrt+0x6a>
 80090fe:	bf00      	nop
 8009100:	2000024c 	.word	0x2000024c
 8009104:	0800ad91 	.word	0x0800ad91

08009108 <__ieee754_asin>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	ec55 4b10 	vmov	r4, r5, d0
 8009110:	4bcb      	ldr	r3, [pc, #812]	; (8009440 <__ieee754_asin+0x338>)
 8009112:	b087      	sub	sp, #28
 8009114:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8009118:	429f      	cmp	r7, r3
 800911a:	9501      	str	r5, [sp, #4]
 800911c:	dd31      	ble.n	8009182 <__ieee754_asin+0x7a>
 800911e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8009122:	ee10 3a10 	vmov	r3, s0
 8009126:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800912a:	433b      	orrs	r3, r7
 800912c:	d117      	bne.n	800915e <__ieee754_asin+0x56>
 800912e:	a3aa      	add	r3, pc, #680	; (adr r3, 80093d8 <__ieee754_asin+0x2d0>)
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	ee10 0a10 	vmov	r0, s0
 8009138:	4629      	mov	r1, r5
 800913a:	f7f7 fa0d 	bl	8000558 <__aeabi_dmul>
 800913e:	a3a8      	add	r3, pc, #672	; (adr r3, 80093e0 <__ieee754_asin+0x2d8>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	4606      	mov	r6, r0
 8009146:	460f      	mov	r7, r1
 8009148:	4620      	mov	r0, r4
 800914a:	4629      	mov	r1, r5
 800914c:	f7f7 fa04 	bl	8000558 <__aeabi_dmul>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4630      	mov	r0, r6
 8009156:	4639      	mov	r1, r7
 8009158:	f7f7 f848 	bl	80001ec <__adddf3>
 800915c:	e00a      	b.n	8009174 <__ieee754_asin+0x6c>
 800915e:	ee10 2a10 	vmov	r2, s0
 8009162:	462b      	mov	r3, r5
 8009164:	4620      	mov	r0, r4
 8009166:	4629      	mov	r1, r5
 8009168:	f7f7 f83e 	bl	80001e8 <__aeabi_dsub>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	f7f7 fb1c 	bl	80007ac <__aeabi_ddiv>
 8009174:	4604      	mov	r4, r0
 8009176:	460d      	mov	r5, r1
 8009178:	ec45 4b10 	vmov	d0, r4, r5
 800917c:	b007      	add	sp, #28
 800917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009182:	4bb0      	ldr	r3, [pc, #704]	; (8009444 <__ieee754_asin+0x33c>)
 8009184:	429f      	cmp	r7, r3
 8009186:	dc11      	bgt.n	80091ac <__ieee754_asin+0xa4>
 8009188:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800918c:	f280 80ae 	bge.w	80092ec <__ieee754_asin+0x1e4>
 8009190:	a395      	add	r3, pc, #596	; (adr r3, 80093e8 <__ieee754_asin+0x2e0>)
 8009192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009196:	ee10 0a10 	vmov	r0, s0
 800919a:	4629      	mov	r1, r5
 800919c:	f7f7 f826 	bl	80001ec <__adddf3>
 80091a0:	2200      	movs	r2, #0
 80091a2:	4ba9      	ldr	r3, [pc, #676]	; (8009448 <__ieee754_asin+0x340>)
 80091a4:	f7f7 feba 	bl	8000f1c <__aeabi_dcmpgt>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d1e5      	bne.n	8009178 <__ieee754_asin+0x70>
 80091ac:	ec45 4b10 	vmov	d0, r4, r5
 80091b0:	f001 f9fa 	bl	800a5a8 <fabs>
 80091b4:	2000      	movs	r0, #0
 80091b6:	ec53 2b10 	vmov	r2, r3, d0
 80091ba:	49a3      	ldr	r1, [pc, #652]	; (8009448 <__ieee754_asin+0x340>)
 80091bc:	f7f7 f814 	bl	80001e8 <__aeabi_dsub>
 80091c0:	2200      	movs	r2, #0
 80091c2:	4ba2      	ldr	r3, [pc, #648]	; (800944c <__ieee754_asin+0x344>)
 80091c4:	f7f7 f9c8 	bl	8000558 <__aeabi_dmul>
 80091c8:	a389      	add	r3, pc, #548	; (adr r3, 80093f0 <__ieee754_asin+0x2e8>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	4604      	mov	r4, r0
 80091d0:	460d      	mov	r5, r1
 80091d2:	f7f7 f9c1 	bl	8000558 <__aeabi_dmul>
 80091d6:	a388      	add	r3, pc, #544	; (adr r3, 80093f8 <__ieee754_asin+0x2f0>)
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f7f7 f806 	bl	80001ec <__adddf3>
 80091e0:	4622      	mov	r2, r4
 80091e2:	462b      	mov	r3, r5
 80091e4:	f7f7 f9b8 	bl	8000558 <__aeabi_dmul>
 80091e8:	a385      	add	r3, pc, #532	; (adr r3, 8009400 <__ieee754_asin+0x2f8>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7f6 fffb 	bl	80001e8 <__aeabi_dsub>
 80091f2:	4622      	mov	r2, r4
 80091f4:	462b      	mov	r3, r5
 80091f6:	f7f7 f9af 	bl	8000558 <__aeabi_dmul>
 80091fa:	a383      	add	r3, pc, #524	; (adr r3, 8009408 <__ieee754_asin+0x300>)
 80091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009200:	f7f6 fff4 	bl	80001ec <__adddf3>
 8009204:	4622      	mov	r2, r4
 8009206:	462b      	mov	r3, r5
 8009208:	f7f7 f9a6 	bl	8000558 <__aeabi_dmul>
 800920c:	a380      	add	r3, pc, #512	; (adr r3, 8009410 <__ieee754_asin+0x308>)
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	f7f6 ffe9 	bl	80001e8 <__aeabi_dsub>
 8009216:	4622      	mov	r2, r4
 8009218:	462b      	mov	r3, r5
 800921a:	f7f7 f99d 	bl	8000558 <__aeabi_dmul>
 800921e:	a37e      	add	r3, pc, #504	; (adr r3, 8009418 <__ieee754_asin+0x310>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f6 ffe2 	bl	80001ec <__adddf3>
 8009228:	4622      	mov	r2, r4
 800922a:	462b      	mov	r3, r5
 800922c:	f7f7 f994 	bl	8000558 <__aeabi_dmul>
 8009230:	a37b      	add	r3, pc, #492	; (adr r3, 8009420 <__ieee754_asin+0x318>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	4680      	mov	r8, r0
 8009238:	4689      	mov	r9, r1
 800923a:	4620      	mov	r0, r4
 800923c:	4629      	mov	r1, r5
 800923e:	f7f7 f98b 	bl	8000558 <__aeabi_dmul>
 8009242:	a379      	add	r3, pc, #484	; (adr r3, 8009428 <__ieee754_asin+0x320>)
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	f7f6 ffce 	bl	80001e8 <__aeabi_dsub>
 800924c:	4622      	mov	r2, r4
 800924e:	462b      	mov	r3, r5
 8009250:	f7f7 f982 	bl	8000558 <__aeabi_dmul>
 8009254:	a376      	add	r3, pc, #472	; (adr r3, 8009430 <__ieee754_asin+0x328>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f6 ffc7 	bl	80001ec <__adddf3>
 800925e:	4622      	mov	r2, r4
 8009260:	462b      	mov	r3, r5
 8009262:	f7f7 f979 	bl	8000558 <__aeabi_dmul>
 8009266:	a374      	add	r3, pc, #464	; (adr r3, 8009438 <__ieee754_asin+0x330>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f7f6 ffbc 	bl	80001e8 <__aeabi_dsub>
 8009270:	4622      	mov	r2, r4
 8009272:	462b      	mov	r3, r5
 8009274:	f7f7 f970 	bl	8000558 <__aeabi_dmul>
 8009278:	4b73      	ldr	r3, [pc, #460]	; (8009448 <__ieee754_asin+0x340>)
 800927a:	2200      	movs	r2, #0
 800927c:	f7f6 ffb6 	bl	80001ec <__adddf3>
 8009280:	ec45 4b10 	vmov	d0, r4, r5
 8009284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009288:	f000 ff3c 	bl	800a104 <__ieee754_sqrt>
 800928c:	4b70      	ldr	r3, [pc, #448]	; (8009450 <__ieee754_asin+0x348>)
 800928e:	429f      	cmp	r7, r3
 8009290:	ec5b ab10 	vmov	sl, fp, d0
 8009294:	f340 80de 	ble.w	8009454 <__ieee754_asin+0x34c>
 8009298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800929c:	4640      	mov	r0, r8
 800929e:	4649      	mov	r1, r9
 80092a0:	f7f7 fa84 	bl	80007ac <__aeabi_ddiv>
 80092a4:	4652      	mov	r2, sl
 80092a6:	465b      	mov	r3, fp
 80092a8:	f7f7 f956 	bl	8000558 <__aeabi_dmul>
 80092ac:	4652      	mov	r2, sl
 80092ae:	465b      	mov	r3, fp
 80092b0:	f7f6 ff9c 	bl	80001ec <__adddf3>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	f7f6 ff98 	bl	80001ec <__adddf3>
 80092bc:	a348      	add	r3, pc, #288	; (adr r3, 80093e0 <__ieee754_asin+0x2d8>)
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	f7f6 ff91 	bl	80001e8 <__aeabi_dsub>
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	a143      	add	r1, pc, #268	; (adr r1, 80093d8 <__ieee754_asin+0x2d0>)
 80092cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d0:	f7f6 ff8a 	bl	80001e8 <__aeabi_dsub>
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfdc      	itt	le
 80092da:	4602      	movle	r2, r0
 80092dc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80092e0:	4604      	mov	r4, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	bfdc      	itt	le
 80092e6:	4614      	movle	r4, r2
 80092e8:	461d      	movle	r5, r3
 80092ea:	e745      	b.n	8009178 <__ieee754_asin+0x70>
 80092ec:	ee10 2a10 	vmov	r2, s0
 80092f0:	ee10 0a10 	vmov	r0, s0
 80092f4:	462b      	mov	r3, r5
 80092f6:	4629      	mov	r1, r5
 80092f8:	f7f7 f92e 	bl	8000558 <__aeabi_dmul>
 80092fc:	a33c      	add	r3, pc, #240	; (adr r3, 80093f0 <__ieee754_asin+0x2e8>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	4606      	mov	r6, r0
 8009304:	460f      	mov	r7, r1
 8009306:	f7f7 f927 	bl	8000558 <__aeabi_dmul>
 800930a:	a33b      	add	r3, pc, #236	; (adr r3, 80093f8 <__ieee754_asin+0x2f0>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	f7f6 ff6c 	bl	80001ec <__adddf3>
 8009314:	4632      	mov	r2, r6
 8009316:	463b      	mov	r3, r7
 8009318:	f7f7 f91e 	bl	8000558 <__aeabi_dmul>
 800931c:	a338      	add	r3, pc, #224	; (adr r3, 8009400 <__ieee754_asin+0x2f8>)
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7f6 ff61 	bl	80001e8 <__aeabi_dsub>
 8009326:	4632      	mov	r2, r6
 8009328:	463b      	mov	r3, r7
 800932a:	f7f7 f915 	bl	8000558 <__aeabi_dmul>
 800932e:	a336      	add	r3, pc, #216	; (adr r3, 8009408 <__ieee754_asin+0x300>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f7f6 ff5a 	bl	80001ec <__adddf3>
 8009338:	4632      	mov	r2, r6
 800933a:	463b      	mov	r3, r7
 800933c:	f7f7 f90c 	bl	8000558 <__aeabi_dmul>
 8009340:	a333      	add	r3, pc, #204	; (adr r3, 8009410 <__ieee754_asin+0x308>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	f7f6 ff4f 	bl	80001e8 <__aeabi_dsub>
 800934a:	4632      	mov	r2, r6
 800934c:	463b      	mov	r3, r7
 800934e:	f7f7 f903 	bl	8000558 <__aeabi_dmul>
 8009352:	a331      	add	r3, pc, #196	; (adr r3, 8009418 <__ieee754_asin+0x310>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f7f6 ff48 	bl	80001ec <__adddf3>
 800935c:	4632      	mov	r2, r6
 800935e:	463b      	mov	r3, r7
 8009360:	f7f7 f8fa 	bl	8000558 <__aeabi_dmul>
 8009364:	a32e      	add	r3, pc, #184	; (adr r3, 8009420 <__ieee754_asin+0x318>)
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	4680      	mov	r8, r0
 800936c:	4689      	mov	r9, r1
 800936e:	4630      	mov	r0, r6
 8009370:	4639      	mov	r1, r7
 8009372:	f7f7 f8f1 	bl	8000558 <__aeabi_dmul>
 8009376:	a32c      	add	r3, pc, #176	; (adr r3, 8009428 <__ieee754_asin+0x320>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	f7f6 ff34 	bl	80001e8 <__aeabi_dsub>
 8009380:	4632      	mov	r2, r6
 8009382:	463b      	mov	r3, r7
 8009384:	f7f7 f8e8 	bl	8000558 <__aeabi_dmul>
 8009388:	a329      	add	r3, pc, #164	; (adr r3, 8009430 <__ieee754_asin+0x328>)
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	f7f6 ff2d 	bl	80001ec <__adddf3>
 8009392:	4632      	mov	r2, r6
 8009394:	463b      	mov	r3, r7
 8009396:	f7f7 f8df 	bl	8000558 <__aeabi_dmul>
 800939a:	a327      	add	r3, pc, #156	; (adr r3, 8009438 <__ieee754_asin+0x330>)
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	f7f6 ff22 	bl	80001e8 <__aeabi_dsub>
 80093a4:	4632      	mov	r2, r6
 80093a6:	463b      	mov	r3, r7
 80093a8:	f7f7 f8d6 	bl	8000558 <__aeabi_dmul>
 80093ac:	2200      	movs	r2, #0
 80093ae:	4b26      	ldr	r3, [pc, #152]	; (8009448 <__ieee754_asin+0x340>)
 80093b0:	f7f6 ff1c 	bl	80001ec <__adddf3>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4640      	mov	r0, r8
 80093ba:	4649      	mov	r1, r9
 80093bc:	f7f7 f9f6 	bl	80007ac <__aeabi_ddiv>
 80093c0:	4622      	mov	r2, r4
 80093c2:	462b      	mov	r3, r5
 80093c4:	f7f7 f8c8 	bl	8000558 <__aeabi_dmul>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	e6c2      	b.n	8009158 <__ieee754_asin+0x50>
 80093d2:	bf00      	nop
 80093d4:	f3af 8000 	nop.w
 80093d8:	54442d18 	.word	0x54442d18
 80093dc:	3ff921fb 	.word	0x3ff921fb
 80093e0:	33145c07 	.word	0x33145c07
 80093e4:	3c91a626 	.word	0x3c91a626
 80093e8:	8800759c 	.word	0x8800759c
 80093ec:	7e37e43c 	.word	0x7e37e43c
 80093f0:	0dfdf709 	.word	0x0dfdf709
 80093f4:	3f023de1 	.word	0x3f023de1
 80093f8:	7501b288 	.word	0x7501b288
 80093fc:	3f49efe0 	.word	0x3f49efe0
 8009400:	b5688f3b 	.word	0xb5688f3b
 8009404:	3fa48228 	.word	0x3fa48228
 8009408:	0e884455 	.word	0x0e884455
 800940c:	3fc9c155 	.word	0x3fc9c155
 8009410:	03eb6f7d 	.word	0x03eb6f7d
 8009414:	3fd4d612 	.word	0x3fd4d612
 8009418:	55555555 	.word	0x55555555
 800941c:	3fc55555 	.word	0x3fc55555
 8009420:	b12e9282 	.word	0xb12e9282
 8009424:	3fb3b8c5 	.word	0x3fb3b8c5
 8009428:	1b8d0159 	.word	0x1b8d0159
 800942c:	3fe6066c 	.word	0x3fe6066c
 8009430:	9c598ac8 	.word	0x9c598ac8
 8009434:	40002ae5 	.word	0x40002ae5
 8009438:	1c8a2d4b 	.word	0x1c8a2d4b
 800943c:	40033a27 	.word	0x40033a27
 8009440:	3fefffff 	.word	0x3fefffff
 8009444:	3fdfffff 	.word	0x3fdfffff
 8009448:	3ff00000 	.word	0x3ff00000
 800944c:	3fe00000 	.word	0x3fe00000
 8009450:	3fef3332 	.word	0x3fef3332
 8009454:	ee10 2a10 	vmov	r2, s0
 8009458:	ee10 0a10 	vmov	r0, s0
 800945c:	465b      	mov	r3, fp
 800945e:	4659      	mov	r1, fp
 8009460:	f7f6 fec4 	bl	80001ec <__adddf3>
 8009464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800946c:	4640      	mov	r0, r8
 800946e:	4649      	mov	r1, r9
 8009470:	f7f7 f99c 	bl	80007ac <__aeabi_ddiv>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800947c:	f7f7 f86c 	bl	8000558 <__aeabi_dmul>
 8009480:	2600      	movs	r6, #0
 8009482:	4680      	mov	r8, r0
 8009484:	4689      	mov	r9, r1
 8009486:	4632      	mov	r2, r6
 8009488:	465b      	mov	r3, fp
 800948a:	4630      	mov	r0, r6
 800948c:	4659      	mov	r1, fp
 800948e:	f7f7 f863 	bl	8000558 <__aeabi_dmul>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4620      	mov	r0, r4
 8009498:	4629      	mov	r1, r5
 800949a:	f7f6 fea5 	bl	80001e8 <__aeabi_dsub>
 800949e:	4632      	mov	r2, r6
 80094a0:	4604      	mov	r4, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	465b      	mov	r3, fp
 80094a6:	4650      	mov	r0, sl
 80094a8:	4659      	mov	r1, fp
 80094aa:	f7f6 fe9f 	bl	80001ec <__adddf3>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4620      	mov	r0, r4
 80094b4:	4629      	mov	r1, r5
 80094b6:	f7f7 f979 	bl	80007ac <__aeabi_ddiv>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	f7f6 fe95 	bl	80001ec <__adddf3>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	a114      	add	r1, pc, #80	; (adr r1, 8009518 <__ieee754_asin+0x410>)
 80094c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094cc:	f7f6 fe8c 	bl	80001e8 <__aeabi_dsub>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4640      	mov	r0, r8
 80094d6:	4649      	mov	r1, r9
 80094d8:	f7f6 fe86 	bl	80001e8 <__aeabi_dsub>
 80094dc:	465f      	mov	r7, fp
 80094de:	4604      	mov	r4, r0
 80094e0:	460d      	mov	r5, r1
 80094e2:	4632      	mov	r2, r6
 80094e4:	465b      	mov	r3, fp
 80094e6:	4630      	mov	r0, r6
 80094e8:	4639      	mov	r1, r7
 80094ea:	f7f6 fe7f 	bl	80001ec <__adddf3>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	a10b      	add	r1, pc, #44	; (adr r1, 8009520 <__ieee754_asin+0x418>)
 80094f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f8:	f7f6 fe76 	bl	80001e8 <__aeabi_dsub>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4620      	mov	r0, r4
 8009502:	4629      	mov	r1, r5
 8009504:	f7f6 fe70 	bl	80001e8 <__aeabi_dsub>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	a104      	add	r1, pc, #16	; (adr r1, 8009520 <__ieee754_asin+0x418>)
 800950e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009512:	e6dd      	b.n	80092d0 <__ieee754_asin+0x1c8>
 8009514:	f3af 8000 	nop.w
 8009518:	33145c07 	.word	0x33145c07
 800951c:	3c91a626 	.word	0x3c91a626
 8009520:	54442d18 	.word	0x54442d18
 8009524:	3fe921fb 	.word	0x3fe921fb

08009528 <__ieee754_atan2>:
 8009528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800952c:	ec57 6b11 	vmov	r6, r7, d1
 8009530:	4273      	negs	r3, r6
 8009532:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009536:	4333      	orrs	r3, r6
 8009538:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80096e0 <__ieee754_atan2+0x1b8>
 800953c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009540:	4573      	cmp	r3, lr
 8009542:	ec51 0b10 	vmov	r0, r1, d0
 8009546:	ee11 8a10 	vmov	r8, s2
 800954a:	d80a      	bhi.n	8009562 <__ieee754_atan2+0x3a>
 800954c:	4244      	negs	r4, r0
 800954e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009552:	4304      	orrs	r4, r0
 8009554:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009558:	4574      	cmp	r4, lr
 800955a:	468c      	mov	ip, r1
 800955c:	ee10 9a10 	vmov	r9, s0
 8009560:	d907      	bls.n	8009572 <__ieee754_atan2+0x4a>
 8009562:	4632      	mov	r2, r6
 8009564:	463b      	mov	r3, r7
 8009566:	f7f6 fe41 	bl	80001ec <__adddf3>
 800956a:	ec41 0b10 	vmov	d0, r0, r1
 800956e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009572:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009576:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800957a:	4334      	orrs	r4, r6
 800957c:	d103      	bne.n	8009586 <__ieee754_atan2+0x5e>
 800957e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009582:	f000 be71 	b.w	800a268 <atan>
 8009586:	17bc      	asrs	r4, r7, #30
 8009588:	f004 0402 	and.w	r4, r4, #2
 800958c:	ea53 0909 	orrs.w	r9, r3, r9
 8009590:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009594:	d107      	bne.n	80095a6 <__ieee754_atan2+0x7e>
 8009596:	2c02      	cmp	r4, #2
 8009598:	d073      	beq.n	8009682 <__ieee754_atan2+0x15a>
 800959a:	2c03      	cmp	r4, #3
 800959c:	d1e5      	bne.n	800956a <__ieee754_atan2+0x42>
 800959e:	a13e      	add	r1, pc, #248	; (adr r1, 8009698 <__ieee754_atan2+0x170>)
 80095a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a4:	e7e1      	b.n	800956a <__ieee754_atan2+0x42>
 80095a6:	ea52 0808 	orrs.w	r8, r2, r8
 80095aa:	d106      	bne.n	80095ba <__ieee754_atan2+0x92>
 80095ac:	f1bc 0f00 	cmp.w	ip, #0
 80095b0:	da6b      	bge.n	800968a <__ieee754_atan2+0x162>
 80095b2:	a13b      	add	r1, pc, #236	; (adr r1, 80096a0 <__ieee754_atan2+0x178>)
 80095b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095b8:	e7d7      	b.n	800956a <__ieee754_atan2+0x42>
 80095ba:	4572      	cmp	r2, lr
 80095bc:	d120      	bne.n	8009600 <__ieee754_atan2+0xd8>
 80095be:	4293      	cmp	r3, r2
 80095c0:	d111      	bne.n	80095e6 <__ieee754_atan2+0xbe>
 80095c2:	2c02      	cmp	r4, #2
 80095c4:	d007      	beq.n	80095d6 <__ieee754_atan2+0xae>
 80095c6:	2c03      	cmp	r4, #3
 80095c8:	d009      	beq.n	80095de <__ieee754_atan2+0xb6>
 80095ca:	2c01      	cmp	r4, #1
 80095cc:	d155      	bne.n	800967a <__ieee754_atan2+0x152>
 80095ce:	a136      	add	r1, pc, #216	; (adr r1, 80096a8 <__ieee754_atan2+0x180>)
 80095d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d4:	e7c9      	b.n	800956a <__ieee754_atan2+0x42>
 80095d6:	a136      	add	r1, pc, #216	; (adr r1, 80096b0 <__ieee754_atan2+0x188>)
 80095d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095dc:	e7c5      	b.n	800956a <__ieee754_atan2+0x42>
 80095de:	a136      	add	r1, pc, #216	; (adr r1, 80096b8 <__ieee754_atan2+0x190>)
 80095e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e4:	e7c1      	b.n	800956a <__ieee754_atan2+0x42>
 80095e6:	2c02      	cmp	r4, #2
 80095e8:	d04b      	beq.n	8009682 <__ieee754_atan2+0x15a>
 80095ea:	2c03      	cmp	r4, #3
 80095ec:	d0d7      	beq.n	800959e <__ieee754_atan2+0x76>
 80095ee:	2c01      	cmp	r4, #1
 80095f0:	f04f 0000 	mov.w	r0, #0
 80095f4:	d102      	bne.n	80095fc <__ieee754_atan2+0xd4>
 80095f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80095fa:	e7b6      	b.n	800956a <__ieee754_atan2+0x42>
 80095fc:	2100      	movs	r1, #0
 80095fe:	e7b4      	b.n	800956a <__ieee754_atan2+0x42>
 8009600:	4573      	cmp	r3, lr
 8009602:	d0d3      	beq.n	80095ac <__ieee754_atan2+0x84>
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	151b      	asrs	r3, r3, #20
 8009608:	2b3c      	cmp	r3, #60	; 0x3c
 800960a:	dc1e      	bgt.n	800964a <__ieee754_atan2+0x122>
 800960c:	2f00      	cmp	r7, #0
 800960e:	da01      	bge.n	8009614 <__ieee754_atan2+0xec>
 8009610:	333c      	adds	r3, #60	; 0x3c
 8009612:	db1e      	blt.n	8009652 <__ieee754_atan2+0x12a>
 8009614:	4632      	mov	r2, r6
 8009616:	463b      	mov	r3, r7
 8009618:	f7f7 f8c8 	bl	80007ac <__aeabi_ddiv>
 800961c:	ec41 0b10 	vmov	d0, r0, r1
 8009620:	f000 ffc2 	bl	800a5a8 <fabs>
 8009624:	f000 fe20 	bl	800a268 <atan>
 8009628:	ec51 0b10 	vmov	r0, r1, d0
 800962c:	2c01      	cmp	r4, #1
 800962e:	d013      	beq.n	8009658 <__ieee754_atan2+0x130>
 8009630:	2c02      	cmp	r4, #2
 8009632:	d015      	beq.n	8009660 <__ieee754_atan2+0x138>
 8009634:	2c00      	cmp	r4, #0
 8009636:	d098      	beq.n	800956a <__ieee754_atan2+0x42>
 8009638:	a321      	add	r3, pc, #132	; (adr r3, 80096c0 <__ieee754_atan2+0x198>)
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	f7f6 fdd3 	bl	80001e8 <__aeabi_dsub>
 8009642:	a321      	add	r3, pc, #132	; (adr r3, 80096c8 <__ieee754_atan2+0x1a0>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	e014      	b.n	8009674 <__ieee754_atan2+0x14c>
 800964a:	a121      	add	r1, pc, #132	; (adr r1, 80096d0 <__ieee754_atan2+0x1a8>)
 800964c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009650:	e7ec      	b.n	800962c <__ieee754_atan2+0x104>
 8009652:	2000      	movs	r0, #0
 8009654:	2100      	movs	r1, #0
 8009656:	e7e9      	b.n	800962c <__ieee754_atan2+0x104>
 8009658:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800965c:	4619      	mov	r1, r3
 800965e:	e784      	b.n	800956a <__ieee754_atan2+0x42>
 8009660:	a317      	add	r3, pc, #92	; (adr r3, 80096c0 <__ieee754_atan2+0x198>)
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	f7f6 fdbf 	bl	80001e8 <__aeabi_dsub>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	a116      	add	r1, pc, #88	; (adr r1, 80096c8 <__ieee754_atan2+0x1a0>)
 8009670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009674:	f7f6 fdb8 	bl	80001e8 <__aeabi_dsub>
 8009678:	e777      	b.n	800956a <__ieee754_atan2+0x42>
 800967a:	a117      	add	r1, pc, #92	; (adr r1, 80096d8 <__ieee754_atan2+0x1b0>)
 800967c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009680:	e773      	b.n	800956a <__ieee754_atan2+0x42>
 8009682:	a111      	add	r1, pc, #68	; (adr r1, 80096c8 <__ieee754_atan2+0x1a0>)
 8009684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009688:	e76f      	b.n	800956a <__ieee754_atan2+0x42>
 800968a:	a111      	add	r1, pc, #68	; (adr r1, 80096d0 <__ieee754_atan2+0x1a8>)
 800968c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009690:	e76b      	b.n	800956a <__ieee754_atan2+0x42>
 8009692:	bf00      	nop
 8009694:	f3af 8000 	nop.w
 8009698:	54442d18 	.word	0x54442d18
 800969c:	c00921fb 	.word	0xc00921fb
 80096a0:	54442d18 	.word	0x54442d18
 80096a4:	bff921fb 	.word	0xbff921fb
 80096a8:	54442d18 	.word	0x54442d18
 80096ac:	bfe921fb 	.word	0xbfe921fb
 80096b0:	7f3321d2 	.word	0x7f3321d2
 80096b4:	4002d97c 	.word	0x4002d97c
 80096b8:	7f3321d2 	.word	0x7f3321d2
 80096bc:	c002d97c 	.word	0xc002d97c
 80096c0:	33145c07 	.word	0x33145c07
 80096c4:	3ca1a626 	.word	0x3ca1a626
 80096c8:	54442d18 	.word	0x54442d18
 80096cc:	400921fb 	.word	0x400921fb
 80096d0:	54442d18 	.word	0x54442d18
 80096d4:	3ff921fb 	.word	0x3ff921fb
 80096d8:	54442d18 	.word	0x54442d18
 80096dc:	3fe921fb 	.word	0x3fe921fb
 80096e0:	7ff00000 	.word	0x7ff00000
 80096e4:	00000000 	.word	0x00000000

080096e8 <__ieee754_pow>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	b091      	sub	sp, #68	; 0x44
 80096ee:	ed8d 1b00 	vstr	d1, [sp]
 80096f2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80096f6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80096fa:	ea58 0302 	orrs.w	r3, r8, r2
 80096fe:	ec57 6b10 	vmov	r6, r7, d0
 8009702:	f000 84be 	beq.w	800a082 <__ieee754_pow+0x99a>
 8009706:	4b7a      	ldr	r3, [pc, #488]	; (80098f0 <__ieee754_pow+0x208>)
 8009708:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800970c:	429c      	cmp	r4, r3
 800970e:	463d      	mov	r5, r7
 8009710:	ee10 aa10 	vmov	sl, s0
 8009714:	dc09      	bgt.n	800972a <__ieee754_pow+0x42>
 8009716:	d103      	bne.n	8009720 <__ieee754_pow+0x38>
 8009718:	b93e      	cbnz	r6, 800972a <__ieee754_pow+0x42>
 800971a:	45a0      	cmp	r8, r4
 800971c:	dc0d      	bgt.n	800973a <__ieee754_pow+0x52>
 800971e:	e001      	b.n	8009724 <__ieee754_pow+0x3c>
 8009720:	4598      	cmp	r8, r3
 8009722:	dc02      	bgt.n	800972a <__ieee754_pow+0x42>
 8009724:	4598      	cmp	r8, r3
 8009726:	d10e      	bne.n	8009746 <__ieee754_pow+0x5e>
 8009728:	b16a      	cbz	r2, 8009746 <__ieee754_pow+0x5e>
 800972a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800972e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009732:	ea54 030a 	orrs.w	r3, r4, sl
 8009736:	f000 84a4 	beq.w	800a082 <__ieee754_pow+0x99a>
 800973a:	486e      	ldr	r0, [pc, #440]	; (80098f4 <__ieee754_pow+0x20c>)
 800973c:	b011      	add	sp, #68	; 0x44
 800973e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009742:	f000 bf45 	b.w	800a5d0 <nan>
 8009746:	2d00      	cmp	r5, #0
 8009748:	da53      	bge.n	80097f2 <__ieee754_pow+0x10a>
 800974a:	4b6b      	ldr	r3, [pc, #428]	; (80098f8 <__ieee754_pow+0x210>)
 800974c:	4598      	cmp	r8, r3
 800974e:	dc4d      	bgt.n	80097ec <__ieee754_pow+0x104>
 8009750:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009754:	4598      	cmp	r8, r3
 8009756:	dd4c      	ble.n	80097f2 <__ieee754_pow+0x10a>
 8009758:	ea4f 5328 	mov.w	r3, r8, asr #20
 800975c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009760:	2b14      	cmp	r3, #20
 8009762:	dd26      	ble.n	80097b2 <__ieee754_pow+0xca>
 8009764:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009768:	fa22 f103 	lsr.w	r1, r2, r3
 800976c:	fa01 f303 	lsl.w	r3, r1, r3
 8009770:	4293      	cmp	r3, r2
 8009772:	d13e      	bne.n	80097f2 <__ieee754_pow+0x10a>
 8009774:	f001 0101 	and.w	r1, r1, #1
 8009778:	f1c1 0b02 	rsb	fp, r1, #2
 800977c:	2a00      	cmp	r2, #0
 800977e:	d15b      	bne.n	8009838 <__ieee754_pow+0x150>
 8009780:	4b5b      	ldr	r3, [pc, #364]	; (80098f0 <__ieee754_pow+0x208>)
 8009782:	4598      	cmp	r8, r3
 8009784:	d124      	bne.n	80097d0 <__ieee754_pow+0xe8>
 8009786:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800978a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800978e:	ea53 030a 	orrs.w	r3, r3, sl
 8009792:	f000 8476 	beq.w	800a082 <__ieee754_pow+0x99a>
 8009796:	4b59      	ldr	r3, [pc, #356]	; (80098fc <__ieee754_pow+0x214>)
 8009798:	429c      	cmp	r4, r3
 800979a:	dd2d      	ble.n	80097f8 <__ieee754_pow+0x110>
 800979c:	f1b9 0f00 	cmp.w	r9, #0
 80097a0:	f280 8473 	bge.w	800a08a <__ieee754_pow+0x9a2>
 80097a4:	2000      	movs	r0, #0
 80097a6:	2100      	movs	r1, #0
 80097a8:	ec41 0b10 	vmov	d0, r0, r1
 80097ac:	b011      	add	sp, #68	; 0x44
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	2a00      	cmp	r2, #0
 80097b4:	d13e      	bne.n	8009834 <__ieee754_pow+0x14c>
 80097b6:	f1c3 0314 	rsb	r3, r3, #20
 80097ba:	fa48 f103 	asr.w	r1, r8, r3
 80097be:	fa01 f303 	lsl.w	r3, r1, r3
 80097c2:	4543      	cmp	r3, r8
 80097c4:	f040 8469 	bne.w	800a09a <__ieee754_pow+0x9b2>
 80097c8:	f001 0101 	and.w	r1, r1, #1
 80097cc:	f1c1 0b02 	rsb	fp, r1, #2
 80097d0:	4b4b      	ldr	r3, [pc, #300]	; (8009900 <__ieee754_pow+0x218>)
 80097d2:	4598      	cmp	r8, r3
 80097d4:	d118      	bne.n	8009808 <__ieee754_pow+0x120>
 80097d6:	f1b9 0f00 	cmp.w	r9, #0
 80097da:	f280 845a 	bge.w	800a092 <__ieee754_pow+0x9aa>
 80097de:	4948      	ldr	r1, [pc, #288]	; (8009900 <__ieee754_pow+0x218>)
 80097e0:	4632      	mov	r2, r6
 80097e2:	463b      	mov	r3, r7
 80097e4:	2000      	movs	r0, #0
 80097e6:	f7f6 ffe1 	bl	80007ac <__aeabi_ddiv>
 80097ea:	e7dd      	b.n	80097a8 <__ieee754_pow+0xc0>
 80097ec:	f04f 0b02 	mov.w	fp, #2
 80097f0:	e7c4      	b.n	800977c <__ieee754_pow+0x94>
 80097f2:	f04f 0b00 	mov.w	fp, #0
 80097f6:	e7c1      	b.n	800977c <__ieee754_pow+0x94>
 80097f8:	f1b9 0f00 	cmp.w	r9, #0
 80097fc:	dad2      	bge.n	80097a4 <__ieee754_pow+0xbc>
 80097fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009802:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009806:	e7cf      	b.n	80097a8 <__ieee754_pow+0xc0>
 8009808:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800980c:	d106      	bne.n	800981c <__ieee754_pow+0x134>
 800980e:	4632      	mov	r2, r6
 8009810:	463b      	mov	r3, r7
 8009812:	4610      	mov	r0, r2
 8009814:	4619      	mov	r1, r3
 8009816:	f7f6 fe9f 	bl	8000558 <__aeabi_dmul>
 800981a:	e7c5      	b.n	80097a8 <__ieee754_pow+0xc0>
 800981c:	4b39      	ldr	r3, [pc, #228]	; (8009904 <__ieee754_pow+0x21c>)
 800981e:	4599      	cmp	r9, r3
 8009820:	d10a      	bne.n	8009838 <__ieee754_pow+0x150>
 8009822:	2d00      	cmp	r5, #0
 8009824:	db08      	blt.n	8009838 <__ieee754_pow+0x150>
 8009826:	ec47 6b10 	vmov	d0, r6, r7
 800982a:	b011      	add	sp, #68	; 0x44
 800982c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009830:	f000 bc68 	b.w	800a104 <__ieee754_sqrt>
 8009834:	f04f 0b00 	mov.w	fp, #0
 8009838:	ec47 6b10 	vmov	d0, r6, r7
 800983c:	f000 feb4 	bl	800a5a8 <fabs>
 8009840:	ec51 0b10 	vmov	r0, r1, d0
 8009844:	f1ba 0f00 	cmp.w	sl, #0
 8009848:	d127      	bne.n	800989a <__ieee754_pow+0x1b2>
 800984a:	b124      	cbz	r4, 8009856 <__ieee754_pow+0x16e>
 800984c:	4b2c      	ldr	r3, [pc, #176]	; (8009900 <__ieee754_pow+0x218>)
 800984e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009852:	429a      	cmp	r2, r3
 8009854:	d121      	bne.n	800989a <__ieee754_pow+0x1b2>
 8009856:	f1b9 0f00 	cmp.w	r9, #0
 800985a:	da05      	bge.n	8009868 <__ieee754_pow+0x180>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	2000      	movs	r0, #0
 8009862:	4927      	ldr	r1, [pc, #156]	; (8009900 <__ieee754_pow+0x218>)
 8009864:	f7f6 ffa2 	bl	80007ac <__aeabi_ddiv>
 8009868:	2d00      	cmp	r5, #0
 800986a:	da9d      	bge.n	80097a8 <__ieee754_pow+0xc0>
 800986c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009870:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009874:	ea54 030b 	orrs.w	r3, r4, fp
 8009878:	d108      	bne.n	800988c <__ieee754_pow+0x1a4>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4610      	mov	r0, r2
 8009880:	4619      	mov	r1, r3
 8009882:	f7f6 fcb1 	bl	80001e8 <__aeabi_dsub>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	e7ac      	b.n	80097e6 <__ieee754_pow+0xfe>
 800988c:	f1bb 0f01 	cmp.w	fp, #1
 8009890:	d18a      	bne.n	80097a8 <__ieee754_pow+0xc0>
 8009892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009896:	4619      	mov	r1, r3
 8009898:	e786      	b.n	80097a8 <__ieee754_pow+0xc0>
 800989a:	0fed      	lsrs	r5, r5, #31
 800989c:	1e6b      	subs	r3, r5, #1
 800989e:	930d      	str	r3, [sp, #52]	; 0x34
 80098a0:	ea5b 0303 	orrs.w	r3, fp, r3
 80098a4:	d102      	bne.n	80098ac <__ieee754_pow+0x1c4>
 80098a6:	4632      	mov	r2, r6
 80098a8:	463b      	mov	r3, r7
 80098aa:	e7e8      	b.n	800987e <__ieee754_pow+0x196>
 80098ac:	4b16      	ldr	r3, [pc, #88]	; (8009908 <__ieee754_pow+0x220>)
 80098ae:	4598      	cmp	r8, r3
 80098b0:	f340 80fe 	ble.w	8009ab0 <__ieee754_pow+0x3c8>
 80098b4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80098b8:	4598      	cmp	r8, r3
 80098ba:	dd0a      	ble.n	80098d2 <__ieee754_pow+0x1ea>
 80098bc:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <__ieee754_pow+0x214>)
 80098be:	429c      	cmp	r4, r3
 80098c0:	dc0d      	bgt.n	80098de <__ieee754_pow+0x1f6>
 80098c2:	f1b9 0f00 	cmp.w	r9, #0
 80098c6:	f6bf af6d 	bge.w	80097a4 <__ieee754_pow+0xbc>
 80098ca:	a307      	add	r3, pc, #28	; (adr r3, 80098e8 <__ieee754_pow+0x200>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	e79f      	b.n	8009812 <__ieee754_pow+0x12a>
 80098d2:	4b0e      	ldr	r3, [pc, #56]	; (800990c <__ieee754_pow+0x224>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	ddf4      	ble.n	80098c2 <__ieee754_pow+0x1da>
 80098d8:	4b09      	ldr	r3, [pc, #36]	; (8009900 <__ieee754_pow+0x218>)
 80098da:	429c      	cmp	r4, r3
 80098dc:	dd18      	ble.n	8009910 <__ieee754_pow+0x228>
 80098de:	f1b9 0f00 	cmp.w	r9, #0
 80098e2:	dcf2      	bgt.n	80098ca <__ieee754_pow+0x1e2>
 80098e4:	e75e      	b.n	80097a4 <__ieee754_pow+0xbc>
 80098e6:	bf00      	nop
 80098e8:	8800759c 	.word	0x8800759c
 80098ec:	7e37e43c 	.word	0x7e37e43c
 80098f0:	7ff00000 	.word	0x7ff00000
 80098f4:	0800ac71 	.word	0x0800ac71
 80098f8:	433fffff 	.word	0x433fffff
 80098fc:	3fefffff 	.word	0x3fefffff
 8009900:	3ff00000 	.word	0x3ff00000
 8009904:	3fe00000 	.word	0x3fe00000
 8009908:	41e00000 	.word	0x41e00000
 800990c:	3feffffe 	.word	0x3feffffe
 8009910:	2200      	movs	r2, #0
 8009912:	4b63      	ldr	r3, [pc, #396]	; (8009aa0 <__ieee754_pow+0x3b8>)
 8009914:	f7f6 fc68 	bl	80001e8 <__aeabi_dsub>
 8009918:	a355      	add	r3, pc, #340	; (adr r3, 8009a70 <__ieee754_pow+0x388>)
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	4604      	mov	r4, r0
 8009920:	460d      	mov	r5, r1
 8009922:	f7f6 fe19 	bl	8000558 <__aeabi_dmul>
 8009926:	a354      	add	r3, pc, #336	; (adr r3, 8009a78 <__ieee754_pow+0x390>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	4606      	mov	r6, r0
 800992e:	460f      	mov	r7, r1
 8009930:	4620      	mov	r0, r4
 8009932:	4629      	mov	r1, r5
 8009934:	f7f6 fe10 	bl	8000558 <__aeabi_dmul>
 8009938:	2200      	movs	r2, #0
 800993a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800993e:	4b59      	ldr	r3, [pc, #356]	; (8009aa4 <__ieee754_pow+0x3bc>)
 8009940:	4620      	mov	r0, r4
 8009942:	4629      	mov	r1, r5
 8009944:	f7f6 fe08 	bl	8000558 <__aeabi_dmul>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	a14c      	add	r1, pc, #304	; (adr r1, 8009a80 <__ieee754_pow+0x398>)
 800994e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009952:	f7f6 fc49 	bl	80001e8 <__aeabi_dsub>
 8009956:	4622      	mov	r2, r4
 8009958:	462b      	mov	r3, r5
 800995a:	f7f6 fdfd 	bl	8000558 <__aeabi_dmul>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	2000      	movs	r0, #0
 8009964:	4950      	ldr	r1, [pc, #320]	; (8009aa8 <__ieee754_pow+0x3c0>)
 8009966:	f7f6 fc3f 	bl	80001e8 <__aeabi_dsub>
 800996a:	4622      	mov	r2, r4
 800996c:	462b      	mov	r3, r5
 800996e:	4680      	mov	r8, r0
 8009970:	4689      	mov	r9, r1
 8009972:	4620      	mov	r0, r4
 8009974:	4629      	mov	r1, r5
 8009976:	f7f6 fdef 	bl	8000558 <__aeabi_dmul>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	4640      	mov	r0, r8
 8009980:	4649      	mov	r1, r9
 8009982:	f7f6 fde9 	bl	8000558 <__aeabi_dmul>
 8009986:	a340      	add	r3, pc, #256	; (adr r3, 8009a88 <__ieee754_pow+0x3a0>)
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f7f6 fde4 	bl	8000558 <__aeabi_dmul>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009998:	f7f6 fc26 	bl	80001e8 <__aeabi_dsub>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4604      	mov	r4, r0
 80099a2:	460d      	mov	r5, r1
 80099a4:	4630      	mov	r0, r6
 80099a6:	4639      	mov	r1, r7
 80099a8:	f7f6 fc20 	bl	80001ec <__adddf3>
 80099ac:	2000      	movs	r0, #0
 80099ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099b2:	4632      	mov	r2, r6
 80099b4:	463b      	mov	r3, r7
 80099b6:	f7f6 fc17 	bl	80001e8 <__aeabi_dsub>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4620      	mov	r0, r4
 80099c0:	4629      	mov	r1, r5
 80099c2:	f7f6 fc11 	bl	80001e8 <__aeabi_dsub>
 80099c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099c8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80099cc:	4313      	orrs	r3, r2
 80099ce:	4606      	mov	r6, r0
 80099d0:	460f      	mov	r7, r1
 80099d2:	f040 81eb 	bne.w	8009dac <__ieee754_pow+0x6c4>
 80099d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009a90 <__ieee754_pow+0x3a8>
 80099da:	e9dd 4500 	ldrd	r4, r5, [sp]
 80099de:	2400      	movs	r4, #0
 80099e0:	4622      	mov	r2, r4
 80099e2:	462b      	mov	r3, r5
 80099e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099ec:	f7f6 fbfc 	bl	80001e8 <__aeabi_dsub>
 80099f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099f4:	f7f6 fdb0 	bl	8000558 <__aeabi_dmul>
 80099f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099fc:	4680      	mov	r8, r0
 80099fe:	4689      	mov	r9, r1
 8009a00:	4630      	mov	r0, r6
 8009a02:	4639      	mov	r1, r7
 8009a04:	f7f6 fda8 	bl	8000558 <__aeabi_dmul>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	4649      	mov	r1, r9
 8009a10:	f7f6 fbec 	bl	80001ec <__adddf3>
 8009a14:	4622      	mov	r2, r4
 8009a16:	462b      	mov	r3, r5
 8009a18:	4680      	mov	r8, r0
 8009a1a:	4689      	mov	r9, r1
 8009a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a20:	f7f6 fd9a 	bl	8000558 <__aeabi_dmul>
 8009a24:	460b      	mov	r3, r1
 8009a26:	4604      	mov	r4, r0
 8009a28:	460d      	mov	r5, r1
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	4640      	mov	r0, r8
 8009a30:	e9cd 4500 	strd	r4, r5, [sp]
 8009a34:	f7f6 fbda 	bl	80001ec <__adddf3>
 8009a38:	4b1c      	ldr	r3, [pc, #112]	; (8009aac <__ieee754_pow+0x3c4>)
 8009a3a:	4299      	cmp	r1, r3
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	468b      	mov	fp, r1
 8009a42:	f340 82f7 	ble.w	800a034 <__ieee754_pow+0x94c>
 8009a46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009a4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009a4e:	4303      	orrs	r3, r0
 8009a50:	f000 81ea 	beq.w	8009e28 <__ieee754_pow+0x740>
 8009a54:	a310      	add	r3, pc, #64	; (adr r3, 8009a98 <__ieee754_pow+0x3b0>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a5e:	f7f6 fd7b 	bl	8000558 <__aeabi_dmul>
 8009a62:	a30d      	add	r3, pc, #52	; (adr r3, 8009a98 <__ieee754_pow+0x3b0>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	e6d5      	b.n	8009816 <__ieee754_pow+0x12e>
 8009a6a:	bf00      	nop
 8009a6c:	f3af 8000 	nop.w
 8009a70:	60000000 	.word	0x60000000
 8009a74:	3ff71547 	.word	0x3ff71547
 8009a78:	f85ddf44 	.word	0xf85ddf44
 8009a7c:	3e54ae0b 	.word	0x3e54ae0b
 8009a80:	55555555 	.word	0x55555555
 8009a84:	3fd55555 	.word	0x3fd55555
 8009a88:	652b82fe 	.word	0x652b82fe
 8009a8c:	3ff71547 	.word	0x3ff71547
 8009a90:	00000000 	.word	0x00000000
 8009a94:	bff00000 	.word	0xbff00000
 8009a98:	8800759c 	.word	0x8800759c
 8009a9c:	7e37e43c 	.word	0x7e37e43c
 8009aa0:	3ff00000 	.word	0x3ff00000
 8009aa4:	3fd00000 	.word	0x3fd00000
 8009aa8:	3fe00000 	.word	0x3fe00000
 8009aac:	408fffff 	.word	0x408fffff
 8009ab0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009ab4:	f04f 0200 	mov.w	r2, #0
 8009ab8:	da05      	bge.n	8009ac6 <__ieee754_pow+0x3de>
 8009aba:	4bd3      	ldr	r3, [pc, #844]	; (8009e08 <__ieee754_pow+0x720>)
 8009abc:	f7f6 fd4c 	bl	8000558 <__aeabi_dmul>
 8009ac0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	1523      	asrs	r3, r4, #20
 8009ac8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009acc:	4413      	add	r3, r2
 8009ace:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad0:	4bce      	ldr	r3, [pc, #824]	; (8009e0c <__ieee754_pow+0x724>)
 8009ad2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009ad6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009ada:	429c      	cmp	r4, r3
 8009adc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ae0:	dd08      	ble.n	8009af4 <__ieee754_pow+0x40c>
 8009ae2:	4bcb      	ldr	r3, [pc, #812]	; (8009e10 <__ieee754_pow+0x728>)
 8009ae4:	429c      	cmp	r4, r3
 8009ae6:	f340 815e 	ble.w	8009da6 <__ieee754_pow+0x6be>
 8009aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aec:	3301      	adds	r3, #1
 8009aee:	9309      	str	r3, [sp, #36]	; 0x24
 8009af0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009af4:	f04f 0a00 	mov.w	sl, #0
 8009af8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009afc:	930c      	str	r3, [sp, #48]	; 0x30
 8009afe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b00:	4bc4      	ldr	r3, [pc, #784]	; (8009e14 <__ieee754_pow+0x72c>)
 8009b02:	4413      	add	r3, r2
 8009b04:	ed93 7b00 	vldr	d7, [r3]
 8009b08:	4629      	mov	r1, r5
 8009b0a:	ec53 2b17 	vmov	r2, r3, d7
 8009b0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009b16:	f7f6 fb67 	bl	80001e8 <__aeabi_dsub>
 8009b1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b1e:	4606      	mov	r6, r0
 8009b20:	460f      	mov	r7, r1
 8009b22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b26:	f7f6 fb61 	bl	80001ec <__adddf3>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	2000      	movs	r0, #0
 8009b30:	49b9      	ldr	r1, [pc, #740]	; (8009e18 <__ieee754_pow+0x730>)
 8009b32:	f7f6 fe3b 	bl	80007ac <__aeabi_ddiv>
 8009b36:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4630      	mov	r0, r6
 8009b40:	4639      	mov	r1, r7
 8009b42:	f7f6 fd09 	bl	8000558 <__aeabi_dmul>
 8009b46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b4a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009b52:	2300      	movs	r3, #0
 8009b54:	9302      	str	r3, [sp, #8]
 8009b56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b5a:	106d      	asrs	r5, r5, #1
 8009b5c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009b60:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009b64:	2200      	movs	r2, #0
 8009b66:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	4614      	mov	r4, r2
 8009b70:	461d      	mov	r5, r3
 8009b72:	f7f6 fcf1 	bl	8000558 <__aeabi_dmul>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 fb33 	bl	80001e8 <__aeabi_dsub>
 8009b82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7f6 fb2b 	bl	80001e8 <__aeabi_dsub>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b9a:	f7f6 fb25 	bl	80001e8 <__aeabi_dsub>
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	464b      	mov	r3, r9
 8009ba2:	f7f6 fcd9 	bl	8000558 <__aeabi_dmul>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4630      	mov	r0, r6
 8009bac:	4639      	mov	r1, r7
 8009bae:	f7f6 fb1b 	bl	80001e8 <__aeabi_dsub>
 8009bb2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009bb6:	f7f6 fccf 	bl	8000558 <__aeabi_dmul>
 8009bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f7f6 fcc7 	bl	8000558 <__aeabi_dmul>
 8009bca:	a37b      	add	r3, pc, #492	; (adr r3, 8009db8 <__ieee754_pow+0x6d0>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	460d      	mov	r5, r1
 8009bd4:	f7f6 fcc0 	bl	8000558 <__aeabi_dmul>
 8009bd8:	a379      	add	r3, pc, #484	; (adr r3, 8009dc0 <__ieee754_pow+0x6d8>)
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f7f6 fb05 	bl	80001ec <__adddf3>
 8009be2:	4622      	mov	r2, r4
 8009be4:	462b      	mov	r3, r5
 8009be6:	f7f6 fcb7 	bl	8000558 <__aeabi_dmul>
 8009bea:	a377      	add	r3, pc, #476	; (adr r3, 8009dc8 <__ieee754_pow+0x6e0>)
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	f7f6 fafc 	bl	80001ec <__adddf3>
 8009bf4:	4622      	mov	r2, r4
 8009bf6:	462b      	mov	r3, r5
 8009bf8:	f7f6 fcae 	bl	8000558 <__aeabi_dmul>
 8009bfc:	a374      	add	r3, pc, #464	; (adr r3, 8009dd0 <__ieee754_pow+0x6e8>)
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	f7f6 faf3 	bl	80001ec <__adddf3>
 8009c06:	4622      	mov	r2, r4
 8009c08:	462b      	mov	r3, r5
 8009c0a:	f7f6 fca5 	bl	8000558 <__aeabi_dmul>
 8009c0e:	a372      	add	r3, pc, #456	; (adr r3, 8009dd8 <__ieee754_pow+0x6f0>)
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	f7f6 faea 	bl	80001ec <__adddf3>
 8009c18:	4622      	mov	r2, r4
 8009c1a:	462b      	mov	r3, r5
 8009c1c:	f7f6 fc9c 	bl	8000558 <__aeabi_dmul>
 8009c20:	a36f      	add	r3, pc, #444	; (adr r3, 8009de0 <__ieee754_pow+0x6f8>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	f7f6 fae1 	bl	80001ec <__adddf3>
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	460f      	mov	r7, r1
 8009c30:	462b      	mov	r3, r5
 8009c32:	4620      	mov	r0, r4
 8009c34:	4629      	mov	r1, r5
 8009c36:	f7f6 fc8f 	bl	8000558 <__aeabi_dmul>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4630      	mov	r0, r6
 8009c40:	4639      	mov	r1, r7
 8009c42:	f7f6 fc89 	bl	8000558 <__aeabi_dmul>
 8009c46:	4642      	mov	r2, r8
 8009c48:	4604      	mov	r4, r0
 8009c4a:	460d      	mov	r5, r1
 8009c4c:	464b      	mov	r3, r9
 8009c4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c52:	f7f6 facb 	bl	80001ec <__adddf3>
 8009c56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c5a:	f7f6 fc7d 	bl	8000558 <__aeabi_dmul>
 8009c5e:	4622      	mov	r2, r4
 8009c60:	462b      	mov	r3, r5
 8009c62:	f7f6 fac3 	bl	80001ec <__adddf3>
 8009c66:	4642      	mov	r2, r8
 8009c68:	4606      	mov	r6, r0
 8009c6a:	460f      	mov	r7, r1
 8009c6c:	464b      	mov	r3, r9
 8009c6e:	4640      	mov	r0, r8
 8009c70:	4649      	mov	r1, r9
 8009c72:	f7f6 fc71 	bl	8000558 <__aeabi_dmul>
 8009c76:	2200      	movs	r2, #0
 8009c78:	4b68      	ldr	r3, [pc, #416]	; (8009e1c <__ieee754_pow+0x734>)
 8009c7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c7e:	f7f6 fab5 	bl	80001ec <__adddf3>
 8009c82:	4632      	mov	r2, r6
 8009c84:	463b      	mov	r3, r7
 8009c86:	f7f6 fab1 	bl	80001ec <__adddf3>
 8009c8a:	9802      	ldr	r0, [sp, #8]
 8009c8c:	460d      	mov	r5, r1
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	4640      	mov	r0, r8
 8009c96:	4649      	mov	r1, r9
 8009c98:	f7f6 fc5e 	bl	8000558 <__aeabi_dmul>
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	4680      	mov	r8, r0
 8009ca0:	4689      	mov	r9, r1
 8009ca2:	4b5e      	ldr	r3, [pc, #376]	; (8009e1c <__ieee754_pow+0x734>)
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	f7f6 fa9e 	bl	80001e8 <__aeabi_dsub>
 8009cac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cb0:	f7f6 fa9a 	bl	80001e8 <__aeabi_dsub>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4630      	mov	r0, r6
 8009cba:	4639      	mov	r1, r7
 8009cbc:	f7f6 fa94 	bl	80001e8 <__aeabi_dsub>
 8009cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc4:	f7f6 fc48 	bl	8000558 <__aeabi_dmul>
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4606      	mov	r6, r0
 8009ccc:	460f      	mov	r7, r1
 8009cce:	462b      	mov	r3, r5
 8009cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cd4:	f7f6 fc40 	bl	8000558 <__aeabi_dmul>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4639      	mov	r1, r7
 8009ce0:	f7f6 fa84 	bl	80001ec <__adddf3>
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	460f      	mov	r7, r1
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4640      	mov	r0, r8
 8009cee:	4649      	mov	r1, r9
 8009cf0:	f7f6 fa7c 	bl	80001ec <__adddf3>
 8009cf4:	9802      	ldr	r0, [sp, #8]
 8009cf6:	a33c      	add	r3, pc, #240	; (adr r3, 8009de8 <__ieee754_pow+0x700>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	460d      	mov	r5, r1
 8009d00:	f7f6 fc2a 	bl	8000558 <__aeabi_dmul>
 8009d04:	4642      	mov	r2, r8
 8009d06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d0a:	464b      	mov	r3, r9
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	4629      	mov	r1, r5
 8009d10:	f7f6 fa6a 	bl	80001e8 <__aeabi_dsub>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 fa64 	bl	80001e8 <__aeabi_dsub>
 8009d20:	a333      	add	r3, pc, #204	; (adr r3, 8009df0 <__ieee754_pow+0x708>)
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f7f6 fc17 	bl	8000558 <__aeabi_dmul>
 8009d2a:	a333      	add	r3, pc, #204	; (adr r3, 8009df8 <__ieee754_pow+0x710>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	4606      	mov	r6, r0
 8009d32:	460f      	mov	r7, r1
 8009d34:	4620      	mov	r0, r4
 8009d36:	4629      	mov	r1, r5
 8009d38:	f7f6 fc0e 	bl	8000558 <__aeabi_dmul>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4630      	mov	r0, r6
 8009d42:	4639      	mov	r1, r7
 8009d44:	f7f6 fa52 	bl	80001ec <__adddf3>
 8009d48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d4a:	4b35      	ldr	r3, [pc, #212]	; (8009e20 <__ieee754_pow+0x738>)
 8009d4c:	4413      	add	r3, r2
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	f7f6 fa4b 	bl	80001ec <__adddf3>
 8009d56:	4604      	mov	r4, r0
 8009d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d5a:	460d      	mov	r5, r1
 8009d5c:	f7f6 fb92 	bl	8000484 <__aeabi_i2d>
 8009d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d62:	4b30      	ldr	r3, [pc, #192]	; (8009e24 <__ieee754_pow+0x73c>)
 8009d64:	4413      	add	r3, r2
 8009d66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	4622      	mov	r2, r4
 8009d70:	462b      	mov	r3, r5
 8009d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d76:	f7f6 fa39 	bl	80001ec <__adddf3>
 8009d7a:	4642      	mov	r2, r8
 8009d7c:	464b      	mov	r3, r9
 8009d7e:	f7f6 fa35 	bl	80001ec <__adddf3>
 8009d82:	4632      	mov	r2, r6
 8009d84:	463b      	mov	r3, r7
 8009d86:	f7f6 fa31 	bl	80001ec <__adddf3>
 8009d8a:	9802      	ldr	r0, [sp, #8]
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	463b      	mov	r3, r7
 8009d90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d94:	f7f6 fa28 	bl	80001e8 <__aeabi_dsub>
 8009d98:	4642      	mov	r2, r8
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	f7f6 fa24 	bl	80001e8 <__aeabi_dsub>
 8009da0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009da4:	e607      	b.n	80099b6 <__ieee754_pow+0x2ce>
 8009da6:	f04f 0a01 	mov.w	sl, #1
 8009daa:	e6a5      	b.n	8009af8 <__ieee754_pow+0x410>
 8009dac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009e00 <__ieee754_pow+0x718>
 8009db0:	e613      	b.n	80099da <__ieee754_pow+0x2f2>
 8009db2:	bf00      	nop
 8009db4:	f3af 8000 	nop.w
 8009db8:	4a454eef 	.word	0x4a454eef
 8009dbc:	3fca7e28 	.word	0x3fca7e28
 8009dc0:	93c9db65 	.word	0x93c9db65
 8009dc4:	3fcd864a 	.word	0x3fcd864a
 8009dc8:	a91d4101 	.word	0xa91d4101
 8009dcc:	3fd17460 	.word	0x3fd17460
 8009dd0:	518f264d 	.word	0x518f264d
 8009dd4:	3fd55555 	.word	0x3fd55555
 8009dd8:	db6fabff 	.word	0xdb6fabff
 8009ddc:	3fdb6db6 	.word	0x3fdb6db6
 8009de0:	33333303 	.word	0x33333303
 8009de4:	3fe33333 	.word	0x3fe33333
 8009de8:	e0000000 	.word	0xe0000000
 8009dec:	3feec709 	.word	0x3feec709
 8009df0:	dc3a03fd 	.word	0xdc3a03fd
 8009df4:	3feec709 	.word	0x3feec709
 8009df8:	145b01f5 	.word	0x145b01f5
 8009dfc:	be3e2fe0 	.word	0xbe3e2fe0
 8009e00:	00000000 	.word	0x00000000
 8009e04:	3ff00000 	.word	0x3ff00000
 8009e08:	43400000 	.word	0x43400000
 8009e0c:	0003988e 	.word	0x0003988e
 8009e10:	000bb679 	.word	0x000bb679
 8009e14:	0800ad98 	.word	0x0800ad98
 8009e18:	3ff00000 	.word	0x3ff00000
 8009e1c:	40080000 	.word	0x40080000
 8009e20:	0800adb8 	.word	0x0800adb8
 8009e24:	0800ada8 	.word	0x0800ada8
 8009e28:	a3b4      	add	r3, pc, #720	; (adr r3, 800a0fc <__ieee754_pow+0xa14>)
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	4640      	mov	r0, r8
 8009e30:	4649      	mov	r1, r9
 8009e32:	f7f6 f9db 	bl	80001ec <__adddf3>
 8009e36:	4622      	mov	r2, r4
 8009e38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7f6 f9d1 	bl	80001e8 <__aeabi_dsub>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e4e:	f7f7 f865 	bl	8000f1c <__aeabi_dcmpgt>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	f47f adfe 	bne.w	8009a54 <__ieee754_pow+0x36c>
 8009e58:	4aa3      	ldr	r2, [pc, #652]	; (800a0e8 <__ieee754_pow+0xa00>)
 8009e5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	f340 810a 	ble.w	800a078 <__ieee754_pow+0x990>
 8009e64:	151b      	asrs	r3, r3, #20
 8009e66:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009e6a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009e6e:	fa4a f303 	asr.w	r3, sl, r3
 8009e72:	445b      	add	r3, fp
 8009e74:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009e78:	4e9c      	ldr	r6, [pc, #624]	; (800a0ec <__ieee754_pow+0xa04>)
 8009e7a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009e7e:	4116      	asrs	r6, r2
 8009e80:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009e84:	2000      	movs	r0, #0
 8009e86:	ea23 0106 	bic.w	r1, r3, r6
 8009e8a:	f1c2 0214 	rsb	r2, r2, #20
 8009e8e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009e92:	fa4a fa02 	asr.w	sl, sl, r2
 8009e96:	f1bb 0f00 	cmp.w	fp, #0
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	bfb8      	it	lt
 8009ea4:	f1ca 0a00 	rsblt	sl, sl, #0
 8009ea8:	f7f6 f99e 	bl	80001e8 <__aeabi_dsub>
 8009eac:	e9cd 0100 	strd	r0, r1, [sp]
 8009eb0:	4642      	mov	r2, r8
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eb8:	f7f6 f998 	bl	80001ec <__adddf3>
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	a378      	add	r3, pc, #480	; (adr r3, 800a0a0 <__ieee754_pow+0x9b8>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	460d      	mov	r5, r1
 8009ec8:	f7f6 fb46 	bl	8000558 <__aeabi_dmul>
 8009ecc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	f7f6 f986 	bl	80001e8 <__aeabi_dsub>
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	4649      	mov	r1, r9
 8009ee4:	f7f6 f980 	bl	80001e8 <__aeabi_dsub>
 8009ee8:	a36f      	add	r3, pc, #444	; (adr r3, 800a0a8 <__ieee754_pow+0x9c0>)
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f7f6 fb33 	bl	8000558 <__aeabi_dmul>
 8009ef2:	a36f      	add	r3, pc, #444	; (adr r3, 800a0b0 <__ieee754_pow+0x9c8>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	4680      	mov	r8, r0
 8009efa:	4689      	mov	r9, r1
 8009efc:	4620      	mov	r0, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	f7f6 fb2a 	bl	8000558 <__aeabi_dmul>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4640      	mov	r0, r8
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	f7f6 f96e 	bl	80001ec <__adddf3>
 8009f10:	4604      	mov	r4, r0
 8009f12:	460d      	mov	r5, r1
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4630      	mov	r0, r6
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	f7f6 f966 	bl	80001ec <__adddf3>
 8009f20:	4632      	mov	r2, r6
 8009f22:	463b      	mov	r3, r7
 8009f24:	4680      	mov	r8, r0
 8009f26:	4689      	mov	r9, r1
 8009f28:	f7f6 f95e 	bl	80001e8 <__aeabi_dsub>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4620      	mov	r0, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7f6 f958 	bl	80001e8 <__aeabi_dsub>
 8009f38:	4642      	mov	r2, r8
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	460f      	mov	r7, r1
 8009f3e:	464b      	mov	r3, r9
 8009f40:	4640      	mov	r0, r8
 8009f42:	4649      	mov	r1, r9
 8009f44:	f7f6 fb08 	bl	8000558 <__aeabi_dmul>
 8009f48:	a35b      	add	r3, pc, #364	; (adr r3, 800a0b8 <__ieee754_pow+0x9d0>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	4604      	mov	r4, r0
 8009f50:	460d      	mov	r5, r1
 8009f52:	f7f6 fb01 	bl	8000558 <__aeabi_dmul>
 8009f56:	a35a      	add	r3, pc, #360	; (adr r3, 800a0c0 <__ieee754_pow+0x9d8>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f7f6 f944 	bl	80001e8 <__aeabi_dsub>
 8009f60:	4622      	mov	r2, r4
 8009f62:	462b      	mov	r3, r5
 8009f64:	f7f6 faf8 	bl	8000558 <__aeabi_dmul>
 8009f68:	a357      	add	r3, pc, #348	; (adr r3, 800a0c8 <__ieee754_pow+0x9e0>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f7f6 f93d 	bl	80001ec <__adddf3>
 8009f72:	4622      	mov	r2, r4
 8009f74:	462b      	mov	r3, r5
 8009f76:	f7f6 faef 	bl	8000558 <__aeabi_dmul>
 8009f7a:	a355      	add	r3, pc, #340	; (adr r3, 800a0d0 <__ieee754_pow+0x9e8>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 f932 	bl	80001e8 <__aeabi_dsub>
 8009f84:	4622      	mov	r2, r4
 8009f86:	462b      	mov	r3, r5
 8009f88:	f7f6 fae6 	bl	8000558 <__aeabi_dmul>
 8009f8c:	a352      	add	r3, pc, #328	; (adr r3, 800a0d8 <__ieee754_pow+0x9f0>)
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f7f6 f92b 	bl	80001ec <__adddf3>
 8009f96:	4622      	mov	r2, r4
 8009f98:	462b      	mov	r3, r5
 8009f9a:	f7f6 fadd 	bl	8000558 <__aeabi_dmul>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	f7f6 f91f 	bl	80001e8 <__aeabi_dsub>
 8009faa:	4604      	mov	r4, r0
 8009fac:	460d      	mov	r5, r1
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	f7f6 facf 	bl	8000558 <__aeabi_dmul>
 8009fba:	2200      	movs	r2, #0
 8009fbc:	e9cd 0100 	strd	r0, r1, [sp]
 8009fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	f7f6 f90e 	bl	80001e8 <__aeabi_dsub>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fd4:	f7f6 fbea 	bl	80007ac <__aeabi_ddiv>
 8009fd8:	4632      	mov	r2, r6
 8009fda:	4604      	mov	r4, r0
 8009fdc:	460d      	mov	r5, r1
 8009fde:	463b      	mov	r3, r7
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	f7f6 fab8 	bl	8000558 <__aeabi_dmul>
 8009fe8:	4632      	mov	r2, r6
 8009fea:	463b      	mov	r3, r7
 8009fec:	f7f6 f8fe 	bl	80001ec <__adddf3>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	4629      	mov	r1, r5
 8009ff8:	f7f6 f8f6 	bl	80001e8 <__aeabi_dsub>
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	464b      	mov	r3, r9
 800a000:	f7f6 f8f2 	bl	80001e8 <__aeabi_dsub>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	2000      	movs	r0, #0
 800a00a:	4939      	ldr	r1, [pc, #228]	; (800a0f0 <__ieee754_pow+0xa08>)
 800a00c:	f7f6 f8ec 	bl	80001e8 <__aeabi_dsub>
 800a010:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a014:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	da2f      	bge.n	800a07e <__ieee754_pow+0x996>
 800a01e:	4650      	mov	r0, sl
 800a020:	ec43 2b10 	vmov	d0, r2, r3
 800a024:	f000 fb60 	bl	800a6e8 <scalbn>
 800a028:	ec51 0b10 	vmov	r0, r1, d0
 800a02c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a030:	f7ff bbf1 	b.w	8009816 <__ieee754_pow+0x12e>
 800a034:	4b2f      	ldr	r3, [pc, #188]	; (800a0f4 <__ieee754_pow+0xa0c>)
 800a036:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a03a:	429e      	cmp	r6, r3
 800a03c:	f77f af0c 	ble.w	8009e58 <__ieee754_pow+0x770>
 800a040:	4b2d      	ldr	r3, [pc, #180]	; (800a0f8 <__ieee754_pow+0xa10>)
 800a042:	440b      	add	r3, r1
 800a044:	4303      	orrs	r3, r0
 800a046:	d00b      	beq.n	800a060 <__ieee754_pow+0x978>
 800a048:	a325      	add	r3, pc, #148	; (adr r3, 800a0e0 <__ieee754_pow+0x9f8>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a052:	f7f6 fa81 	bl	8000558 <__aeabi_dmul>
 800a056:	a322      	add	r3, pc, #136	; (adr r3, 800a0e0 <__ieee754_pow+0x9f8>)
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	f7ff bbdb 	b.w	8009816 <__ieee754_pow+0x12e>
 800a060:	4622      	mov	r2, r4
 800a062:	462b      	mov	r3, r5
 800a064:	f7f6 f8c0 	bl	80001e8 <__aeabi_dsub>
 800a068:	4642      	mov	r2, r8
 800a06a:	464b      	mov	r3, r9
 800a06c:	f7f6 ff4c 	bl	8000f08 <__aeabi_dcmpge>
 800a070:	2800      	cmp	r0, #0
 800a072:	f43f aef1 	beq.w	8009e58 <__ieee754_pow+0x770>
 800a076:	e7e7      	b.n	800a048 <__ieee754_pow+0x960>
 800a078:	f04f 0a00 	mov.w	sl, #0
 800a07c:	e718      	b.n	8009eb0 <__ieee754_pow+0x7c8>
 800a07e:	4621      	mov	r1, r4
 800a080:	e7d4      	b.n	800a02c <__ieee754_pow+0x944>
 800a082:	2000      	movs	r0, #0
 800a084:	491a      	ldr	r1, [pc, #104]	; (800a0f0 <__ieee754_pow+0xa08>)
 800a086:	f7ff bb8f 	b.w	80097a8 <__ieee754_pow+0xc0>
 800a08a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a08e:	f7ff bb8b 	b.w	80097a8 <__ieee754_pow+0xc0>
 800a092:	4630      	mov	r0, r6
 800a094:	4639      	mov	r1, r7
 800a096:	f7ff bb87 	b.w	80097a8 <__ieee754_pow+0xc0>
 800a09a:	4693      	mov	fp, r2
 800a09c:	f7ff bb98 	b.w	80097d0 <__ieee754_pow+0xe8>
 800a0a0:	00000000 	.word	0x00000000
 800a0a4:	3fe62e43 	.word	0x3fe62e43
 800a0a8:	fefa39ef 	.word	0xfefa39ef
 800a0ac:	3fe62e42 	.word	0x3fe62e42
 800a0b0:	0ca86c39 	.word	0x0ca86c39
 800a0b4:	be205c61 	.word	0xbe205c61
 800a0b8:	72bea4d0 	.word	0x72bea4d0
 800a0bc:	3e663769 	.word	0x3e663769
 800a0c0:	c5d26bf1 	.word	0xc5d26bf1
 800a0c4:	3ebbbd41 	.word	0x3ebbbd41
 800a0c8:	af25de2c 	.word	0xaf25de2c
 800a0cc:	3f11566a 	.word	0x3f11566a
 800a0d0:	16bebd93 	.word	0x16bebd93
 800a0d4:	3f66c16c 	.word	0x3f66c16c
 800a0d8:	5555553e 	.word	0x5555553e
 800a0dc:	3fc55555 	.word	0x3fc55555
 800a0e0:	c2f8f359 	.word	0xc2f8f359
 800a0e4:	01a56e1f 	.word	0x01a56e1f
 800a0e8:	3fe00000 	.word	0x3fe00000
 800a0ec:	000fffff 	.word	0x000fffff
 800a0f0:	3ff00000 	.word	0x3ff00000
 800a0f4:	4090cbff 	.word	0x4090cbff
 800a0f8:	3f6f3400 	.word	0x3f6f3400
 800a0fc:	652b82fe 	.word	0x652b82fe
 800a100:	3c971547 	.word	0x3c971547

0800a104 <__ieee754_sqrt>:
 800a104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a108:	4955      	ldr	r1, [pc, #340]	; (800a260 <__ieee754_sqrt+0x15c>)
 800a10a:	ec55 4b10 	vmov	r4, r5, d0
 800a10e:	43a9      	bics	r1, r5
 800a110:	462b      	mov	r3, r5
 800a112:	462a      	mov	r2, r5
 800a114:	d112      	bne.n	800a13c <__ieee754_sqrt+0x38>
 800a116:	ee10 2a10 	vmov	r2, s0
 800a11a:	ee10 0a10 	vmov	r0, s0
 800a11e:	4629      	mov	r1, r5
 800a120:	f7f6 fa1a 	bl	8000558 <__aeabi_dmul>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4620      	mov	r0, r4
 800a12a:	4629      	mov	r1, r5
 800a12c:	f7f6 f85e 	bl	80001ec <__adddf3>
 800a130:	4604      	mov	r4, r0
 800a132:	460d      	mov	r5, r1
 800a134:	ec45 4b10 	vmov	d0, r4, r5
 800a138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a13c:	2d00      	cmp	r5, #0
 800a13e:	ee10 0a10 	vmov	r0, s0
 800a142:	4621      	mov	r1, r4
 800a144:	dc0f      	bgt.n	800a166 <__ieee754_sqrt+0x62>
 800a146:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a14a:	4330      	orrs	r0, r6
 800a14c:	d0f2      	beq.n	800a134 <__ieee754_sqrt+0x30>
 800a14e:	b155      	cbz	r5, 800a166 <__ieee754_sqrt+0x62>
 800a150:	ee10 2a10 	vmov	r2, s0
 800a154:	4620      	mov	r0, r4
 800a156:	4629      	mov	r1, r5
 800a158:	f7f6 f846 	bl	80001e8 <__aeabi_dsub>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	f7f6 fb24 	bl	80007ac <__aeabi_ddiv>
 800a164:	e7e4      	b.n	800a130 <__ieee754_sqrt+0x2c>
 800a166:	151b      	asrs	r3, r3, #20
 800a168:	d073      	beq.n	800a252 <__ieee754_sqrt+0x14e>
 800a16a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a16e:	07dd      	lsls	r5, r3, #31
 800a170:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a174:	bf48      	it	mi
 800a176:	0fc8      	lsrmi	r0, r1, #31
 800a178:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a17c:	bf44      	itt	mi
 800a17e:	0049      	lslmi	r1, r1, #1
 800a180:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a184:	2500      	movs	r5, #0
 800a186:	1058      	asrs	r0, r3, #1
 800a188:	0fcb      	lsrs	r3, r1, #31
 800a18a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a18e:	0049      	lsls	r1, r1, #1
 800a190:	2316      	movs	r3, #22
 800a192:	462c      	mov	r4, r5
 800a194:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a198:	19a7      	adds	r7, r4, r6
 800a19a:	4297      	cmp	r7, r2
 800a19c:	bfde      	ittt	le
 800a19e:	19bc      	addle	r4, r7, r6
 800a1a0:	1bd2      	suble	r2, r2, r7
 800a1a2:	19ad      	addle	r5, r5, r6
 800a1a4:	0fcf      	lsrs	r7, r1, #31
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a1ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a1b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a1b4:	d1f0      	bne.n	800a198 <__ieee754_sqrt+0x94>
 800a1b6:	f04f 0c20 	mov.w	ip, #32
 800a1ba:	469e      	mov	lr, r3
 800a1bc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a1c0:	42a2      	cmp	r2, r4
 800a1c2:	eb06 070e 	add.w	r7, r6, lr
 800a1c6:	dc02      	bgt.n	800a1ce <__ieee754_sqrt+0xca>
 800a1c8:	d112      	bne.n	800a1f0 <__ieee754_sqrt+0xec>
 800a1ca:	428f      	cmp	r7, r1
 800a1cc:	d810      	bhi.n	800a1f0 <__ieee754_sqrt+0xec>
 800a1ce:	2f00      	cmp	r7, #0
 800a1d0:	eb07 0e06 	add.w	lr, r7, r6
 800a1d4:	da42      	bge.n	800a25c <__ieee754_sqrt+0x158>
 800a1d6:	f1be 0f00 	cmp.w	lr, #0
 800a1da:	db3f      	blt.n	800a25c <__ieee754_sqrt+0x158>
 800a1dc:	f104 0801 	add.w	r8, r4, #1
 800a1e0:	1b12      	subs	r2, r2, r4
 800a1e2:	428f      	cmp	r7, r1
 800a1e4:	bf88      	it	hi
 800a1e6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a1ea:	1bc9      	subs	r1, r1, r7
 800a1ec:	4433      	add	r3, r6
 800a1ee:	4644      	mov	r4, r8
 800a1f0:	0052      	lsls	r2, r2, #1
 800a1f2:	f1bc 0c01 	subs.w	ip, ip, #1
 800a1f6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a1fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a1fe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a202:	d1dd      	bne.n	800a1c0 <__ieee754_sqrt+0xbc>
 800a204:	430a      	orrs	r2, r1
 800a206:	d006      	beq.n	800a216 <__ieee754_sqrt+0x112>
 800a208:	1c5c      	adds	r4, r3, #1
 800a20a:	bf13      	iteet	ne
 800a20c:	3301      	addne	r3, #1
 800a20e:	3501      	addeq	r5, #1
 800a210:	4663      	moveq	r3, ip
 800a212:	f023 0301 	bicne.w	r3, r3, #1
 800a216:	106a      	asrs	r2, r5, #1
 800a218:	085b      	lsrs	r3, r3, #1
 800a21a:	07e9      	lsls	r1, r5, #31
 800a21c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a220:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a224:	bf48      	it	mi
 800a226:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a22a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a22e:	461c      	mov	r4, r3
 800a230:	e780      	b.n	800a134 <__ieee754_sqrt+0x30>
 800a232:	0aca      	lsrs	r2, r1, #11
 800a234:	3815      	subs	r0, #21
 800a236:	0549      	lsls	r1, r1, #21
 800a238:	2a00      	cmp	r2, #0
 800a23a:	d0fa      	beq.n	800a232 <__ieee754_sqrt+0x12e>
 800a23c:	02d6      	lsls	r6, r2, #11
 800a23e:	d50a      	bpl.n	800a256 <__ieee754_sqrt+0x152>
 800a240:	f1c3 0420 	rsb	r4, r3, #32
 800a244:	fa21 f404 	lsr.w	r4, r1, r4
 800a248:	1e5d      	subs	r5, r3, #1
 800a24a:	4099      	lsls	r1, r3
 800a24c:	4322      	orrs	r2, r4
 800a24e:	1b43      	subs	r3, r0, r5
 800a250:	e78b      	b.n	800a16a <__ieee754_sqrt+0x66>
 800a252:	4618      	mov	r0, r3
 800a254:	e7f0      	b.n	800a238 <__ieee754_sqrt+0x134>
 800a256:	0052      	lsls	r2, r2, #1
 800a258:	3301      	adds	r3, #1
 800a25a:	e7ef      	b.n	800a23c <__ieee754_sqrt+0x138>
 800a25c:	46a0      	mov	r8, r4
 800a25e:	e7bf      	b.n	800a1e0 <__ieee754_sqrt+0xdc>
 800a260:	7ff00000 	.word	0x7ff00000
 800a264:	00000000 	.word	0x00000000

0800a268 <atan>:
 800a268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	ec55 4b10 	vmov	r4, r5, d0
 800a270:	4bc3      	ldr	r3, [pc, #780]	; (800a580 <atan+0x318>)
 800a272:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a276:	429e      	cmp	r6, r3
 800a278:	46ab      	mov	fp, r5
 800a27a:	dd18      	ble.n	800a2ae <atan+0x46>
 800a27c:	4bc1      	ldr	r3, [pc, #772]	; (800a584 <atan+0x31c>)
 800a27e:	429e      	cmp	r6, r3
 800a280:	dc01      	bgt.n	800a286 <atan+0x1e>
 800a282:	d109      	bne.n	800a298 <atan+0x30>
 800a284:	b144      	cbz	r4, 800a298 <atan+0x30>
 800a286:	4622      	mov	r2, r4
 800a288:	462b      	mov	r3, r5
 800a28a:	4620      	mov	r0, r4
 800a28c:	4629      	mov	r1, r5
 800a28e:	f7f5 ffad 	bl	80001ec <__adddf3>
 800a292:	4604      	mov	r4, r0
 800a294:	460d      	mov	r5, r1
 800a296:	e006      	b.n	800a2a6 <atan+0x3e>
 800a298:	f1bb 0f00 	cmp.w	fp, #0
 800a29c:	f340 8131 	ble.w	800a502 <atan+0x29a>
 800a2a0:	a59b      	add	r5, pc, #620	; (adr r5, 800a510 <atan+0x2a8>)
 800a2a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a2a6:	ec45 4b10 	vmov	d0, r4, r5
 800a2aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ae:	4bb6      	ldr	r3, [pc, #728]	; (800a588 <atan+0x320>)
 800a2b0:	429e      	cmp	r6, r3
 800a2b2:	dc14      	bgt.n	800a2de <atan+0x76>
 800a2b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a2b8:	429e      	cmp	r6, r3
 800a2ba:	dc0d      	bgt.n	800a2d8 <atan+0x70>
 800a2bc:	a396      	add	r3, pc, #600	; (adr r3, 800a518 <atan+0x2b0>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	ee10 0a10 	vmov	r0, s0
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f7f5 ff90 	bl	80001ec <__adddf3>
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	4baf      	ldr	r3, [pc, #700]	; (800a58c <atan+0x324>)
 800a2d0:	f7f6 fe24 	bl	8000f1c <__aeabi_dcmpgt>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d1e6      	bne.n	800a2a6 <atan+0x3e>
 800a2d8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a2dc:	e02b      	b.n	800a336 <atan+0xce>
 800a2de:	f000 f963 	bl	800a5a8 <fabs>
 800a2e2:	4bab      	ldr	r3, [pc, #684]	; (800a590 <atan+0x328>)
 800a2e4:	429e      	cmp	r6, r3
 800a2e6:	ec55 4b10 	vmov	r4, r5, d0
 800a2ea:	f300 80bf 	bgt.w	800a46c <atan+0x204>
 800a2ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a2f2:	429e      	cmp	r6, r3
 800a2f4:	f300 80a0 	bgt.w	800a438 <atan+0x1d0>
 800a2f8:	ee10 2a10 	vmov	r2, s0
 800a2fc:	ee10 0a10 	vmov	r0, s0
 800a300:	462b      	mov	r3, r5
 800a302:	4629      	mov	r1, r5
 800a304:	f7f5 ff72 	bl	80001ec <__adddf3>
 800a308:	2200      	movs	r2, #0
 800a30a:	4ba0      	ldr	r3, [pc, #640]	; (800a58c <atan+0x324>)
 800a30c:	f7f5 ff6c 	bl	80001e8 <__aeabi_dsub>
 800a310:	2200      	movs	r2, #0
 800a312:	4606      	mov	r6, r0
 800a314:	460f      	mov	r7, r1
 800a316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a31a:	4620      	mov	r0, r4
 800a31c:	4629      	mov	r1, r5
 800a31e:	f7f5 ff65 	bl	80001ec <__adddf3>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	4630      	mov	r0, r6
 800a328:	4639      	mov	r1, r7
 800a32a:	f7f6 fa3f 	bl	80007ac <__aeabi_ddiv>
 800a32e:	f04f 0a00 	mov.w	sl, #0
 800a332:	4604      	mov	r4, r0
 800a334:	460d      	mov	r5, r1
 800a336:	4622      	mov	r2, r4
 800a338:	462b      	mov	r3, r5
 800a33a:	4620      	mov	r0, r4
 800a33c:	4629      	mov	r1, r5
 800a33e:	f7f6 f90b 	bl	8000558 <__aeabi_dmul>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4680      	mov	r8, r0
 800a348:	4689      	mov	r9, r1
 800a34a:	f7f6 f905 	bl	8000558 <__aeabi_dmul>
 800a34e:	a374      	add	r3, pc, #464	; (adr r3, 800a520 <atan+0x2b8>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	4606      	mov	r6, r0
 800a356:	460f      	mov	r7, r1
 800a358:	f7f6 f8fe 	bl	8000558 <__aeabi_dmul>
 800a35c:	a372      	add	r3, pc, #456	; (adr r3, 800a528 <atan+0x2c0>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ff43 	bl	80001ec <__adddf3>
 800a366:	4632      	mov	r2, r6
 800a368:	463b      	mov	r3, r7
 800a36a:	f7f6 f8f5 	bl	8000558 <__aeabi_dmul>
 800a36e:	a370      	add	r3, pc, #448	; (adr r3, 800a530 <atan+0x2c8>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 ff3a 	bl	80001ec <__adddf3>
 800a378:	4632      	mov	r2, r6
 800a37a:	463b      	mov	r3, r7
 800a37c:	f7f6 f8ec 	bl	8000558 <__aeabi_dmul>
 800a380:	a36d      	add	r3, pc, #436	; (adr r3, 800a538 <atan+0x2d0>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f5 ff31 	bl	80001ec <__adddf3>
 800a38a:	4632      	mov	r2, r6
 800a38c:	463b      	mov	r3, r7
 800a38e:	f7f6 f8e3 	bl	8000558 <__aeabi_dmul>
 800a392:	a36b      	add	r3, pc, #428	; (adr r3, 800a540 <atan+0x2d8>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f5 ff28 	bl	80001ec <__adddf3>
 800a39c:	4632      	mov	r2, r6
 800a39e:	463b      	mov	r3, r7
 800a3a0:	f7f6 f8da 	bl	8000558 <__aeabi_dmul>
 800a3a4:	a368      	add	r3, pc, #416	; (adr r3, 800a548 <atan+0x2e0>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	f7f5 ff1f 	bl	80001ec <__adddf3>
 800a3ae:	4642      	mov	r2, r8
 800a3b0:	464b      	mov	r3, r9
 800a3b2:	f7f6 f8d1 	bl	8000558 <__aeabi_dmul>
 800a3b6:	a366      	add	r3, pc, #408	; (adr r3, 800a550 <atan+0x2e8>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	4680      	mov	r8, r0
 800a3be:	4689      	mov	r9, r1
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	f7f6 f8c8 	bl	8000558 <__aeabi_dmul>
 800a3c8:	a363      	add	r3, pc, #396	; (adr r3, 800a558 <atan+0x2f0>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f7f5 ff0b 	bl	80001e8 <__aeabi_dsub>
 800a3d2:	4632      	mov	r2, r6
 800a3d4:	463b      	mov	r3, r7
 800a3d6:	f7f6 f8bf 	bl	8000558 <__aeabi_dmul>
 800a3da:	a361      	add	r3, pc, #388	; (adr r3, 800a560 <atan+0x2f8>)
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	f7f5 ff02 	bl	80001e8 <__aeabi_dsub>
 800a3e4:	4632      	mov	r2, r6
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	f7f6 f8b6 	bl	8000558 <__aeabi_dmul>
 800a3ec:	a35e      	add	r3, pc, #376	; (adr r3, 800a568 <atan+0x300>)
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	f7f5 fef9 	bl	80001e8 <__aeabi_dsub>
 800a3f6:	4632      	mov	r2, r6
 800a3f8:	463b      	mov	r3, r7
 800a3fa:	f7f6 f8ad 	bl	8000558 <__aeabi_dmul>
 800a3fe:	a35c      	add	r3, pc, #368	; (adr r3, 800a570 <atan+0x308>)
 800a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a404:	f7f5 fef0 	bl	80001e8 <__aeabi_dsub>
 800a408:	4632      	mov	r2, r6
 800a40a:	463b      	mov	r3, r7
 800a40c:	f7f6 f8a4 	bl	8000558 <__aeabi_dmul>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	4640      	mov	r0, r8
 800a416:	4649      	mov	r1, r9
 800a418:	f7f5 fee8 	bl	80001ec <__adddf3>
 800a41c:	4622      	mov	r2, r4
 800a41e:	462b      	mov	r3, r5
 800a420:	f7f6 f89a 	bl	8000558 <__aeabi_dmul>
 800a424:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	d14b      	bne.n	800a4c6 <atan+0x25e>
 800a42e:	4620      	mov	r0, r4
 800a430:	4629      	mov	r1, r5
 800a432:	f7f5 fed9 	bl	80001e8 <__aeabi_dsub>
 800a436:	e72c      	b.n	800a292 <atan+0x2a>
 800a438:	ee10 0a10 	vmov	r0, s0
 800a43c:	2200      	movs	r2, #0
 800a43e:	4b53      	ldr	r3, [pc, #332]	; (800a58c <atan+0x324>)
 800a440:	4629      	mov	r1, r5
 800a442:	f7f5 fed1 	bl	80001e8 <__aeabi_dsub>
 800a446:	2200      	movs	r2, #0
 800a448:	4606      	mov	r6, r0
 800a44a:	460f      	mov	r7, r1
 800a44c:	4b4f      	ldr	r3, [pc, #316]	; (800a58c <atan+0x324>)
 800a44e:	4620      	mov	r0, r4
 800a450:	4629      	mov	r1, r5
 800a452:	f7f5 fecb 	bl	80001ec <__adddf3>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4630      	mov	r0, r6
 800a45c:	4639      	mov	r1, r7
 800a45e:	f7f6 f9a5 	bl	80007ac <__aeabi_ddiv>
 800a462:	f04f 0a01 	mov.w	sl, #1
 800a466:	4604      	mov	r4, r0
 800a468:	460d      	mov	r5, r1
 800a46a:	e764      	b.n	800a336 <atan+0xce>
 800a46c:	4b49      	ldr	r3, [pc, #292]	; (800a594 <atan+0x32c>)
 800a46e:	429e      	cmp	r6, r3
 800a470:	dc1d      	bgt.n	800a4ae <atan+0x246>
 800a472:	ee10 0a10 	vmov	r0, s0
 800a476:	2200      	movs	r2, #0
 800a478:	4b47      	ldr	r3, [pc, #284]	; (800a598 <atan+0x330>)
 800a47a:	4629      	mov	r1, r5
 800a47c:	f7f5 feb4 	bl	80001e8 <__aeabi_dsub>
 800a480:	2200      	movs	r2, #0
 800a482:	4606      	mov	r6, r0
 800a484:	460f      	mov	r7, r1
 800a486:	4b44      	ldr	r3, [pc, #272]	; (800a598 <atan+0x330>)
 800a488:	4620      	mov	r0, r4
 800a48a:	4629      	mov	r1, r5
 800a48c:	f7f6 f864 	bl	8000558 <__aeabi_dmul>
 800a490:	2200      	movs	r2, #0
 800a492:	4b3e      	ldr	r3, [pc, #248]	; (800a58c <atan+0x324>)
 800a494:	f7f5 feaa 	bl	80001ec <__adddf3>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	4630      	mov	r0, r6
 800a49e:	4639      	mov	r1, r7
 800a4a0:	f7f6 f984 	bl	80007ac <__aeabi_ddiv>
 800a4a4:	f04f 0a02 	mov.w	sl, #2
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	460d      	mov	r5, r1
 800a4ac:	e743      	b.n	800a336 <atan+0xce>
 800a4ae:	462b      	mov	r3, r5
 800a4b0:	ee10 2a10 	vmov	r2, s0
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	4939      	ldr	r1, [pc, #228]	; (800a59c <atan+0x334>)
 800a4b8:	f7f6 f978 	bl	80007ac <__aeabi_ddiv>
 800a4bc:	f04f 0a03 	mov.w	sl, #3
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	460d      	mov	r5, r1
 800a4c4:	e737      	b.n	800a336 <atan+0xce>
 800a4c6:	4b36      	ldr	r3, [pc, #216]	; (800a5a0 <atan+0x338>)
 800a4c8:	4e36      	ldr	r6, [pc, #216]	; (800a5a4 <atan+0x33c>)
 800a4ca:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a4ce:	4456      	add	r6, sl
 800a4d0:	449a      	add	sl, r3
 800a4d2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a4d6:	f7f5 fe87 	bl	80001e8 <__aeabi_dsub>
 800a4da:	4622      	mov	r2, r4
 800a4dc:	462b      	mov	r3, r5
 800a4de:	f7f5 fe83 	bl	80001e8 <__aeabi_dsub>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a4ea:	f7f5 fe7d 	bl	80001e8 <__aeabi_dsub>
 800a4ee:	f1bb 0f00 	cmp.w	fp, #0
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	460d      	mov	r5, r1
 800a4f6:	f6bf aed6 	bge.w	800a2a6 <atan+0x3e>
 800a4fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4fe:	461d      	mov	r5, r3
 800a500:	e6d1      	b.n	800a2a6 <atan+0x3e>
 800a502:	a51d      	add	r5, pc, #116	; (adr r5, 800a578 <atan+0x310>)
 800a504:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a508:	e6cd      	b.n	800a2a6 <atan+0x3e>
 800a50a:	bf00      	nop
 800a50c:	f3af 8000 	nop.w
 800a510:	54442d18 	.word	0x54442d18
 800a514:	3ff921fb 	.word	0x3ff921fb
 800a518:	8800759c 	.word	0x8800759c
 800a51c:	7e37e43c 	.word	0x7e37e43c
 800a520:	e322da11 	.word	0xe322da11
 800a524:	3f90ad3a 	.word	0x3f90ad3a
 800a528:	24760deb 	.word	0x24760deb
 800a52c:	3fa97b4b 	.word	0x3fa97b4b
 800a530:	a0d03d51 	.word	0xa0d03d51
 800a534:	3fb10d66 	.word	0x3fb10d66
 800a538:	c54c206e 	.word	0xc54c206e
 800a53c:	3fb745cd 	.word	0x3fb745cd
 800a540:	920083ff 	.word	0x920083ff
 800a544:	3fc24924 	.word	0x3fc24924
 800a548:	5555550d 	.word	0x5555550d
 800a54c:	3fd55555 	.word	0x3fd55555
 800a550:	2c6a6c2f 	.word	0x2c6a6c2f
 800a554:	bfa2b444 	.word	0xbfa2b444
 800a558:	52defd9a 	.word	0x52defd9a
 800a55c:	3fadde2d 	.word	0x3fadde2d
 800a560:	af749a6d 	.word	0xaf749a6d
 800a564:	3fb3b0f2 	.word	0x3fb3b0f2
 800a568:	fe231671 	.word	0xfe231671
 800a56c:	3fbc71c6 	.word	0x3fbc71c6
 800a570:	9998ebc4 	.word	0x9998ebc4
 800a574:	3fc99999 	.word	0x3fc99999
 800a578:	54442d18 	.word	0x54442d18
 800a57c:	bff921fb 	.word	0xbff921fb
 800a580:	440fffff 	.word	0x440fffff
 800a584:	7ff00000 	.word	0x7ff00000
 800a588:	3fdbffff 	.word	0x3fdbffff
 800a58c:	3ff00000 	.word	0x3ff00000
 800a590:	3ff2ffff 	.word	0x3ff2ffff
 800a594:	40037fff 	.word	0x40037fff
 800a598:	3ff80000 	.word	0x3ff80000
 800a59c:	bff00000 	.word	0xbff00000
 800a5a0:	0800ade8 	.word	0x0800ade8
 800a5a4:	0800adc8 	.word	0x0800adc8

0800a5a8 <fabs>:
 800a5a8:	ec51 0b10 	vmov	r0, r1, d0
 800a5ac:	ee10 2a10 	vmov	r2, s0
 800a5b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5b4:	ec43 2b10 	vmov	d0, r2, r3
 800a5b8:	4770      	bx	lr

0800a5ba <finite>:
 800a5ba:	ee10 3a90 	vmov	r3, s1
 800a5be:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a5c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a5c6:	0fc0      	lsrs	r0, r0, #31
 800a5c8:	4770      	bx	lr

0800a5ca <matherr>:
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <nan>:
 800a5d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a5d8 <nan+0x8>
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	00000000 	.word	0x00000000
 800a5dc:	7ff80000 	.word	0x7ff80000

0800a5e0 <rint>:
 800a5e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5e2:	ec51 0b10 	vmov	r0, r1, d0
 800a5e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a5ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a5ee:	2e13      	cmp	r6, #19
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	ee10 4a10 	vmov	r4, s0
 800a5f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a5fa:	dc56      	bgt.n	800a6aa <rint+0xca>
 800a5fc:	2e00      	cmp	r6, #0
 800a5fe:	da2b      	bge.n	800a658 <rint+0x78>
 800a600:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a604:	4302      	orrs	r2, r0
 800a606:	d023      	beq.n	800a650 <rint+0x70>
 800a608:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a60c:	4302      	orrs	r2, r0
 800a60e:	4254      	negs	r4, r2
 800a610:	4314      	orrs	r4, r2
 800a612:	0c4b      	lsrs	r3, r1, #17
 800a614:	0b24      	lsrs	r4, r4, #12
 800a616:	045b      	lsls	r3, r3, #17
 800a618:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a61c:	ea44 0103 	orr.w	r1, r4, r3
 800a620:	460b      	mov	r3, r1
 800a622:	492f      	ldr	r1, [pc, #188]	; (800a6e0 <rint+0x100>)
 800a624:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a628:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a62c:	4602      	mov	r2, r0
 800a62e:	4639      	mov	r1, r7
 800a630:	4630      	mov	r0, r6
 800a632:	f7f5 fddb 	bl	80001ec <__adddf3>
 800a636:	e9cd 0100 	strd	r0, r1, [sp]
 800a63a:	463b      	mov	r3, r7
 800a63c:	4632      	mov	r2, r6
 800a63e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a642:	f7f5 fdd1 	bl	80001e8 <__aeabi_dsub>
 800a646:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a64a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a64e:	4639      	mov	r1, r7
 800a650:	ec41 0b10 	vmov	d0, r0, r1
 800a654:	b003      	add	sp, #12
 800a656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a658:	4a22      	ldr	r2, [pc, #136]	; (800a6e4 <rint+0x104>)
 800a65a:	4132      	asrs	r2, r6
 800a65c:	ea01 0702 	and.w	r7, r1, r2
 800a660:	4307      	orrs	r7, r0
 800a662:	d0f5      	beq.n	800a650 <rint+0x70>
 800a664:	0852      	lsrs	r2, r2, #1
 800a666:	4011      	ands	r1, r2
 800a668:	430c      	orrs	r4, r1
 800a66a:	d00b      	beq.n	800a684 <rint+0xa4>
 800a66c:	ea23 0202 	bic.w	r2, r3, r2
 800a670:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a674:	2e13      	cmp	r6, #19
 800a676:	fa43 f306 	asr.w	r3, r3, r6
 800a67a:	bf0c      	ite	eq
 800a67c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a680:	2400      	movne	r4, #0
 800a682:	4313      	orrs	r3, r2
 800a684:	4916      	ldr	r1, [pc, #88]	; (800a6e0 <rint+0x100>)
 800a686:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a68a:	4622      	mov	r2, r4
 800a68c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a690:	4620      	mov	r0, r4
 800a692:	4629      	mov	r1, r5
 800a694:	f7f5 fdaa 	bl	80001ec <__adddf3>
 800a698:	e9cd 0100 	strd	r0, r1, [sp]
 800a69c:	4622      	mov	r2, r4
 800a69e:	462b      	mov	r3, r5
 800a6a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6a4:	f7f5 fda0 	bl	80001e8 <__aeabi_dsub>
 800a6a8:	e7d2      	b.n	800a650 <rint+0x70>
 800a6aa:	2e33      	cmp	r6, #51	; 0x33
 800a6ac:	dd07      	ble.n	800a6be <rint+0xde>
 800a6ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a6b2:	d1cd      	bne.n	800a650 <rint+0x70>
 800a6b4:	ee10 2a10 	vmov	r2, s0
 800a6b8:	f7f5 fd98 	bl	80001ec <__adddf3>
 800a6bc:	e7c8      	b.n	800a650 <rint+0x70>
 800a6be:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a6c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6c6:	40f2      	lsrs	r2, r6
 800a6c8:	4210      	tst	r0, r2
 800a6ca:	d0c1      	beq.n	800a650 <rint+0x70>
 800a6cc:	0852      	lsrs	r2, r2, #1
 800a6ce:	4210      	tst	r0, r2
 800a6d0:	bf1f      	itttt	ne
 800a6d2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a6d6:	ea20 0202 	bicne.w	r2, r0, r2
 800a6da:	4134      	asrne	r4, r6
 800a6dc:	4314      	orrne	r4, r2
 800a6de:	e7d1      	b.n	800a684 <rint+0xa4>
 800a6e0:	0800ae08 	.word	0x0800ae08
 800a6e4:	000fffff 	.word	0x000fffff

0800a6e8 <scalbn>:
 800a6e8:	b570      	push	{r4, r5, r6, lr}
 800a6ea:	ec55 4b10 	vmov	r4, r5, d0
 800a6ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	462b      	mov	r3, r5
 800a6f6:	b9aa      	cbnz	r2, 800a724 <scalbn+0x3c>
 800a6f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a6fc:	4323      	orrs	r3, r4
 800a6fe:	d03b      	beq.n	800a778 <scalbn+0x90>
 800a700:	4b31      	ldr	r3, [pc, #196]	; (800a7c8 <scalbn+0xe0>)
 800a702:	4629      	mov	r1, r5
 800a704:	2200      	movs	r2, #0
 800a706:	ee10 0a10 	vmov	r0, s0
 800a70a:	f7f5 ff25 	bl	8000558 <__aeabi_dmul>
 800a70e:	4b2f      	ldr	r3, [pc, #188]	; (800a7cc <scalbn+0xe4>)
 800a710:	429e      	cmp	r6, r3
 800a712:	4604      	mov	r4, r0
 800a714:	460d      	mov	r5, r1
 800a716:	da12      	bge.n	800a73e <scalbn+0x56>
 800a718:	a327      	add	r3, pc, #156	; (adr r3, 800a7b8 <scalbn+0xd0>)
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	f7f5 ff1b 	bl	8000558 <__aeabi_dmul>
 800a722:	e009      	b.n	800a738 <scalbn+0x50>
 800a724:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a728:	428a      	cmp	r2, r1
 800a72a:	d10c      	bne.n	800a746 <scalbn+0x5e>
 800a72c:	ee10 2a10 	vmov	r2, s0
 800a730:	4620      	mov	r0, r4
 800a732:	4629      	mov	r1, r5
 800a734:	f7f5 fd5a 	bl	80001ec <__adddf3>
 800a738:	4604      	mov	r4, r0
 800a73a:	460d      	mov	r5, r1
 800a73c:	e01c      	b.n	800a778 <scalbn+0x90>
 800a73e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a742:	460b      	mov	r3, r1
 800a744:	3a36      	subs	r2, #54	; 0x36
 800a746:	4432      	add	r2, r6
 800a748:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a74c:	428a      	cmp	r2, r1
 800a74e:	dd0b      	ble.n	800a768 <scalbn+0x80>
 800a750:	ec45 4b11 	vmov	d1, r4, r5
 800a754:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a7c0 <scalbn+0xd8>
 800a758:	f000 f83c 	bl	800a7d4 <copysign>
 800a75c:	a318      	add	r3, pc, #96	; (adr r3, 800a7c0 <scalbn+0xd8>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	ec51 0b10 	vmov	r0, r1, d0
 800a766:	e7da      	b.n	800a71e <scalbn+0x36>
 800a768:	2a00      	cmp	r2, #0
 800a76a:	dd08      	ble.n	800a77e <scalbn+0x96>
 800a76c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a770:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a774:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a778:	ec45 4b10 	vmov	d0, r4, r5
 800a77c:	bd70      	pop	{r4, r5, r6, pc}
 800a77e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a782:	da0d      	bge.n	800a7a0 <scalbn+0xb8>
 800a784:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a788:	429e      	cmp	r6, r3
 800a78a:	ec45 4b11 	vmov	d1, r4, r5
 800a78e:	dce1      	bgt.n	800a754 <scalbn+0x6c>
 800a790:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a7b8 <scalbn+0xd0>
 800a794:	f000 f81e 	bl	800a7d4 <copysign>
 800a798:	a307      	add	r3, pc, #28	; (adr r3, 800a7b8 <scalbn+0xd0>)
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	e7e0      	b.n	800a762 <scalbn+0x7a>
 800a7a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a7a4:	3236      	adds	r2, #54	; 0x36
 800a7a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a7aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <scalbn+0xe8>)
 800a7b6:	e7b2      	b.n	800a71e <scalbn+0x36>
 800a7b8:	c2f8f359 	.word	0xc2f8f359
 800a7bc:	01a56e1f 	.word	0x01a56e1f
 800a7c0:	8800759c 	.word	0x8800759c
 800a7c4:	7e37e43c 	.word	0x7e37e43c
 800a7c8:	43500000 	.word	0x43500000
 800a7cc:	ffff3cb0 	.word	0xffff3cb0
 800a7d0:	3c900000 	.word	0x3c900000

0800a7d4 <copysign>:
 800a7d4:	ec51 0b10 	vmov	r0, r1, d0
 800a7d8:	ee11 0a90 	vmov	r0, s3
 800a7dc:	ee10 2a10 	vmov	r2, s0
 800a7e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a7e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a7e8:	ea41 0300 	orr.w	r3, r1, r0
 800a7ec:	ec43 2b10 	vmov	d0, r2, r3
 800a7f0:	4770      	bx	lr
	...

0800a7f4 <_init>:
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	bf00      	nop
 800a7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fa:	bc08      	pop	{r3}
 800a7fc:	469e      	mov	lr, r3
 800a7fe:	4770      	bx	lr

0800a800 <_fini>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	bf00      	nop
 800a804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a806:	bc08      	pop	{r3}
 800a808:	469e      	mov	lr, r3
 800a80a:	4770      	bx	lr
