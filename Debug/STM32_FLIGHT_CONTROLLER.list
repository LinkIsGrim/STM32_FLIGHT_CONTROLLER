
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006378  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08006510  08006510  00016510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067dc  080067dc  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067e4  080067e4  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e4  080067e4  000167e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  080067ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  2000023c  08006a28  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08006a28  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e6c  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025b0  00000000  00000000  000380d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e5d2  00000000  00000000  0003a688  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001230  00000000  00000000  00048c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000011c0  00000000  00000000  00049e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001799a  00000000  00000000  0004b050  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d396  00000000  00000000  000629ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00097f3f  00000000  00000000  0006fd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00107cbf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e58  00000000  00000000  00107d3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000023c 	.word	0x2000023c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080064f8 	.word	0x080064f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000240 	.word	0x20000240
 80001d4:	080064f8 	.word	0x080064f8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a78:	f000 b972 	b.w	8000d60 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9e08      	ldr	r6, [sp, #32]
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4688      	mov	r8, r1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d14b      	bne.n	8000b3a <__udivmoddi4+0xa6>
 8000aa2:	428a      	cmp	r2, r1
 8000aa4:	4615      	mov	r5, r2
 8000aa6:	d967      	bls.n	8000b78 <__udivmoddi4+0xe4>
 8000aa8:	fab2 f282 	clz	r2, r2
 8000aac:	b14a      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000aae:	f1c2 0720 	rsb	r7, r2, #32
 8000ab2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ab6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aba:	4095      	lsls	r5, r2
 8000abc:	ea47 0803 	orr.w	r8, r7, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ac6:	0c23      	lsrs	r3, r4, #16
 8000ac8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000acc:	fa1f fc85 	uxth.w	ip, r5
 8000ad0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ad4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad8:	fb07 f10c 	mul.w	r1, r7, ip
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x60>
 8000ae0:	18eb      	adds	r3, r5, r3
 8000ae2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000ae6:	f080 811b 	bcs.w	8000d20 <__udivmoddi4+0x28c>
 8000aea:	4299      	cmp	r1, r3
 8000aec:	f240 8118 	bls.w	8000d20 <__udivmoddi4+0x28c>
 8000af0:	3f02      	subs	r7, #2
 8000af2:	442b      	add	r3, r5
 8000af4:	1a5b      	subs	r3, r3, r1
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000afc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b08:	45a4      	cmp	ip, r4
 8000b0a:	d909      	bls.n	8000b20 <__udivmoddi4+0x8c>
 8000b0c:	192c      	adds	r4, r5, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b12:	f080 8107 	bcs.w	8000d24 <__udivmoddi4+0x290>
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	f240 8104 	bls.w	8000d24 <__udivmoddi4+0x290>
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	442c      	add	r4, r5
 8000b20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b24:	eba4 040c 	sub.w	r4, r4, ip
 8000b28:	2700      	movs	r7, #0
 8000b2a:	b11e      	cbz	r6, 8000b34 <__udivmoddi4+0xa0>
 8000b2c:	40d4      	lsrs	r4, r2
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e9c6 4300 	strd	r4, r3, [r6]
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0xbe>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	f000 80eb 	beq.w	8000d1a <__udivmoddi4+0x286>
 8000b44:	2700      	movs	r7, #0
 8000b46:	e9c6 0100 	strd	r0, r1, [r6]
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f783 	clz	r7, r3
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d147      	bne.n	8000bea <__udivmoddi4+0x156>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xd0>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80fa 	bhi.w	8000d58 <__udivmoddi4+0x2c4>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0303 	sbc.w	r3, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d0e0      	beq.n	8000b34 <__udivmoddi4+0xa0>
 8000b72:	e9c6 4800 	strd	r4, r8, [r6]
 8000b76:	e7dd      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000b78:	b902      	cbnz	r2, 8000b7c <__udivmoddi4+0xe8>
 8000b7a:	deff      	udf	#255	; 0xff
 8000b7c:	fab2 f282 	clz	r2, r2
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	f040 808f 	bne.w	8000ca4 <__udivmoddi4+0x210>
 8000b86:	1b49      	subs	r1, r1, r5
 8000b88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8c:	fa1f f885 	uxth.w	r8, r5
 8000b90:	2701      	movs	r7, #1
 8000b92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b96:	0c23      	lsrs	r3, r4, #16
 8000b98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x122>
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2bc>
 8000bb6:	4684      	mov	ip, r0
 8000bb8:	1a59      	subs	r1, r3, r1
 8000bba:	b2a3      	uxth	r3, r4
 8000bbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc8:	fb08 f800 	mul.w	r8, r8, r0
 8000bcc:	45a0      	cmp	r8, r4
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x14c>
 8000bd0:	192c      	adds	r4, r5, r4
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x14a>
 8000bd8:	45a0      	cmp	r8, r4
 8000bda:	f200 80b6 	bhi.w	8000d4a <__udivmoddi4+0x2b6>
 8000bde:	4618      	mov	r0, r3
 8000be0:	eba4 0408 	sub.w	r4, r4, r8
 8000be4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be8:	e79f      	b.n	8000b2a <__udivmoddi4+0x96>
 8000bea:	f1c7 0c20 	rsb	ip, r7, #32
 8000bee:	40bb      	lsls	r3, r7
 8000bf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c08:	4325      	orrs	r5, r4
 8000c0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c0e:	0c2c      	lsrs	r4, r5, #16
 8000c10:	fb08 3319 	mls	r3, r8, r9, r3
 8000c14:	fa1f fa8e 	uxth.w	sl, lr
 8000c18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c20:	429c      	cmp	r4, r3
 8000c22:	fa02 f207 	lsl.w	r2, r2, r7
 8000c26:	fa00 f107 	lsl.w	r1, r0, r7
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c30:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c34:	f080 8087 	bcs.w	8000d46 <__udivmoddi4+0x2b2>
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	f240 8084 	bls.w	8000d46 <__udivmoddi4+0x2b2>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4473      	add	r3, lr
 8000c44:	1b1b      	subs	r3, r3, r4
 8000c46:	b2ad      	uxth	r5, r5
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c58:	45a2      	cmp	sl, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1da>
 8000c5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c64:	d26b      	bcs.n	8000d3e <__udivmoddi4+0x2aa>
 8000c66:	45a2      	cmp	sl, r4
 8000c68:	d969      	bls.n	8000d3e <__udivmoddi4+0x2aa>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4474      	add	r4, lr
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	fba0 8902 	umull	r8, r9, r0, r2
 8000c76:	eba4 040a 	sub.w	r4, r4, sl
 8000c7a:	454c      	cmp	r4, r9
 8000c7c:	46c2      	mov	sl, r8
 8000c7e:	464b      	mov	r3, r9
 8000c80:	d354      	bcc.n	8000d2c <__udivmoddi4+0x298>
 8000c82:	d051      	beq.n	8000d28 <__udivmoddi4+0x294>
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d069      	beq.n	8000d5c <__udivmoddi4+0x2c8>
 8000c88:	ebb1 050a 	subs.w	r5, r1, sl
 8000c8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c94:	40fd      	lsrs	r5, r7
 8000c96:	40fc      	lsrs	r4, r7
 8000c98:	ea4c 0505 	orr.w	r5, ip, r5
 8000c9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	e747      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000ca4:	f1c2 0320 	rsb	r3, r2, #32
 8000ca8:	fa20 f703 	lsr.w	r7, r0, r3
 8000cac:	4095      	lsls	r5, r2
 8000cae:	fa01 f002 	lsl.w	r0, r1, r2
 8000cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	4338      	orrs	r0, r7
 8000cbc:	0c01      	lsrs	r1, r0, #16
 8000cbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cc2:	fa1f f885 	uxth.w	r8, r5
 8000cc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb07 f308 	mul.w	r3, r7, r8
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d907      	bls.n	8000cea <__udivmoddi4+0x256>
 8000cda:	1869      	adds	r1, r5, r1
 8000cdc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ce0:	d22f      	bcs.n	8000d42 <__udivmoddi4+0x2ae>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d92d      	bls.n	8000d42 <__udivmoddi4+0x2ae>
 8000ce6:	3f02      	subs	r7, #2
 8000ce8:	4429      	add	r1, r5
 8000cea:	1acb      	subs	r3, r1, r3
 8000cec:	b281      	uxth	r1, r0
 8000cee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfa:	fb00 f308 	mul.w	r3, r0, r8
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x27e>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d08:	d217      	bcs.n	8000d3a <__udivmoddi4+0x2a6>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d915      	bls.n	8000d3a <__udivmoddi4+0x2a6>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1ac9      	subs	r1, r1, r3
 8000d14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d18:	e73b      	b.n	8000b92 <__udivmoddi4+0xfe>
 8000d1a:	4637      	mov	r7, r6
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	e709      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000d20:	4607      	mov	r7, r0
 8000d22:	e6e7      	b.n	8000af4 <__udivmoddi4+0x60>
 8000d24:	4618      	mov	r0, r3
 8000d26:	e6fb      	b.n	8000b20 <__udivmoddi4+0x8c>
 8000d28:	4541      	cmp	r1, r8
 8000d2a:	d2ab      	bcs.n	8000c84 <__udivmoddi4+0x1f0>
 8000d2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d30:	eb69 020e 	sbc.w	r2, r9, lr
 8000d34:	3801      	subs	r0, #1
 8000d36:	4613      	mov	r3, r2
 8000d38:	e7a4      	b.n	8000c84 <__udivmoddi4+0x1f0>
 8000d3a:	4660      	mov	r0, ip
 8000d3c:	e7e9      	b.n	8000d12 <__udivmoddi4+0x27e>
 8000d3e:	4618      	mov	r0, r3
 8000d40:	e795      	b.n	8000c6e <__udivmoddi4+0x1da>
 8000d42:	4667      	mov	r7, ip
 8000d44:	e7d1      	b.n	8000cea <__udivmoddi4+0x256>
 8000d46:	4681      	mov	r9, r0
 8000d48:	e77c      	b.n	8000c44 <__udivmoddi4+0x1b0>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	442c      	add	r4, r5
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0x14c>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	442b      	add	r3, r5
 8000d56:	e72f      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d58:	4638      	mov	r0, r7
 8000d5a:	e708      	b.n	8000b6e <__udivmoddi4+0xda>
 8000d5c:	4637      	mov	r7, r6
 8000d5e:	e6e9      	b.n	8000b34 <__udivmoddi4+0xa0>

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <strlen>:
 8000d64:	4603      	mov	r3, r0
 8000d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d1fb      	bne.n	8000d66 <strlen+0x2>
 8000d6e:	1a18      	subs	r0, r3, r0
 8000d70:	3801      	subs	r0, #1
 8000d72:	4770      	bx	lr

08000d74 <__gedf2>:
 8000d74:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d78:	e006      	b.n	8000d88 <__cmpdf2+0x4>
 8000d7a:	bf00      	nop

08000d7c <__ledf2>:
 8000d7c:	f04f 0c01 	mov.w	ip, #1
 8000d80:	e002      	b.n	8000d88 <__cmpdf2+0x4>
 8000d82:	bf00      	nop

08000d84 <__cmpdf2>:
 8000d84:	f04f 0c01 	mov.w	ip, #1
 8000d88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d9e:	d01b      	beq.n	8000dd8 <__cmpdf2+0x54>
 8000da0:	b001      	add	sp, #4
 8000da2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000da6:	bf0c      	ite	eq
 8000da8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000dac:	ea91 0f03 	teqne	r1, r3
 8000db0:	bf02      	ittt	eq
 8000db2:	ea90 0f02 	teqeq	r0, r2
 8000db6:	2000      	moveq	r0, #0
 8000db8:	4770      	bxeq	lr
 8000dba:	f110 0f00 	cmn.w	r0, #0
 8000dbe:	ea91 0f03 	teq	r1, r3
 8000dc2:	bf58      	it	pl
 8000dc4:	4299      	cmppl	r1, r3
 8000dc6:	bf08      	it	eq
 8000dc8:	4290      	cmpeq	r0, r2
 8000dca:	bf2c      	ite	cs
 8000dcc:	17d8      	asrcs	r0, r3, #31
 8000dce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000dd2:	f040 0001 	orr.w	r0, r0, #1
 8000dd6:	4770      	bx	lr
 8000dd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ddc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000de0:	d102      	bne.n	8000de8 <__cmpdf2+0x64>
 8000de2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000de6:	d107      	bne.n	8000df8 <__cmpdf2+0x74>
 8000de8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000dec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000df0:	d1d6      	bne.n	8000da0 <__cmpdf2+0x1c>
 8000df2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000df6:	d0d3      	beq.n	8000da0 <__cmpdf2+0x1c>
 8000df8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <__aeabi_cdrcmple>:
 8000e00:	4684      	mov	ip, r0
 8000e02:	4610      	mov	r0, r2
 8000e04:	4662      	mov	r2, ip
 8000e06:	468c      	mov	ip, r1
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4663      	mov	r3, ip
 8000e0c:	e000      	b.n	8000e10 <__aeabi_cdcmpeq>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_cdcmpeq>:
 8000e10:	b501      	push	{r0, lr}
 8000e12:	f7ff ffb7 	bl	8000d84 <__cmpdf2>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	bf48      	it	mi
 8000e1a:	f110 0f00 	cmnmi.w	r0, #0
 8000e1e:	bd01      	pop	{r0, pc}

08000e20 <__aeabi_dcmpeq>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff fff4 	bl	8000e10 <__aeabi_cdcmpeq>
 8000e28:	bf0c      	ite	eq
 8000e2a:	2001      	moveq	r0, #1
 8000e2c:	2000      	movne	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_dcmplt>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffea 	bl	8000e10 <__aeabi_cdcmpeq>
 8000e3c:	bf34      	ite	cc
 8000e3e:	2001      	movcc	r0, #1
 8000e40:	2000      	movcs	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_dcmple>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffe0 	bl	8000e10 <__aeabi_cdcmpeq>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_dcmpge>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffce 	bl	8000e00 <__aeabi_cdrcmple>
 8000e64:	bf94      	ite	ls
 8000e66:	2001      	movls	r0, #1
 8000e68:	2000      	movhi	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_dcmpgt>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff ffc4 	bl	8000e00 <__aeabi_cdrcmple>
 8000e78:	bf34      	ite	cc
 8000e7a:	2001      	movcc	r0, #1
 8000e7c:	2000      	movcs	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_dcmpun>:
 8000e84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e8c:	d102      	bne.n	8000e94 <__aeabi_dcmpun+0x10>
 8000e8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e92:	d10a      	bne.n	8000eaa <__aeabi_dcmpun+0x26>
 8000e94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e9c:	d102      	bne.n	8000ea4 <__aeabi_dcmpun+0x20>
 8000e9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ea2:	d102      	bne.n	8000eaa <__aeabi_dcmpun+0x26>
 8000ea4:	f04f 0000 	mov.w	r0, #0
 8000ea8:	4770      	bx	lr
 8000eaa:	f04f 0001 	mov.w	r0, #1
 8000eae:	4770      	bx	lr

08000eb0 <writeByte>:
}

// I2C read/write functions for the MPU9250 sensors
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)

{
 8000eb0:	b500      	push	{lr}
 8000eb2:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000eb4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000eb8:	f88d 200d 	strb.w	r2, [sp, #13]

	HAL_I2C_Master_Transmit(&hi2c2, 0xD0, data_write, 2, 10);
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	aa03      	add	r2, sp, #12
 8000ec4:	21d0      	movs	r1, #208	; 0xd0
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <writeByte+0x24>)
 8000ec8:	f001 fc38 	bl	800273c <HAL_I2C_Master_Transmit>

}
 8000ecc:	b005      	add	sp, #20
 8000ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ed2:	bf00      	nop
 8000ed4:	20000320 	.word	0x20000320

08000ed8 <readByte>:

uint8_t readByte(uint8_t address, uint8_t subAddress) {
 8000ed8:	b530      	push	{r4, r5, lr}
 8000eda:	b085      	sub	sp, #20
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000edc:	aa04      	add	r2, sp, #16
 8000ede:	f802 1d08 	strb.w	r1, [r2, #-8]!

	HAL_I2C_Master_Transmit(&hi2c2, 0xD0, data_write, 1, 10); //Send adress of register ONLY
 8000ee2:	4c09      	ldr	r4, [pc, #36]	; (8000f08 <readByte+0x30>)
 8000ee4:	250a      	movs	r5, #10
 8000ee6:	9500      	str	r5, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	21d0      	movs	r1, #208	; 0xd0
 8000eec:	4620      	mov	r0, r4
 8000eee:	f001 fc25 	bl	800273c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0xD1, data, 1, 10);
 8000ef2:	9500      	str	r5, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	aa03      	add	r2, sp, #12
 8000ef8:	21d1      	movs	r1, #209	; 0xd1
 8000efa:	4620      	mov	r0, r4
 8000efc:	f001 fcd8 	bl	80028b0 <HAL_I2C_Master_Receive>

	return data[0];

}
 8000f00:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000f04:	b005      	add	sp, #20
 8000f06:	bd30      	pop	{r4, r5, pc}
 8000f08:	20000320 	.word	0x20000320

08000f0c <readBytes>:

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count,
		uint8_t * dest) {
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	4617      	mov	r7, r2
 8000f12:	461e      	mov	r6, r3

	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000f14:	aa04      	add	r2, sp, #16
 8000f16:	f802 1d04 	strb.w	r1, [r2, #-4]!

	HAL_I2C_Master_Transmit(&hi2c2, 0xD0, data_write, 1, 10);
 8000f1a:	4c08      	ldr	r4, [pc, #32]	; (8000f3c <readBytes+0x30>)
 8000f1c:	250a      	movs	r5, #10
 8000f1e:	9500      	str	r5, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	21d0      	movs	r1, #208	; 0xd0
 8000f24:	4620      	mov	r0, r4
 8000f26:	f001 fc09 	bl	800273c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0xD1, dest, count, 10);
 8000f2a:	9500      	str	r5, [sp, #0]
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4632      	mov	r2, r6
 8000f30:	21d1      	movs	r1, #209	; 0xd1
 8000f32:	4620      	mov	r0, r4
 8000f34:	f001 fcbc 	bl	80028b0 <HAL_I2C_Master_Receive>

}
 8000f38:	b005      	add	sp, #20
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3c:	20000320 	.word	0x20000320

08000f40 <readMPU9250Data>:
void readMPU9250Data(uint8_t MPUnum, int16_t * destination) {
 8000f40:	b510      	push	{r4, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	460c      	mov	r4, r1
	readBytes(MPUnum, ACCEL_XOUT_H, 14, &rawData[0]); // Read the 14 raw data registers into data array
 8000f46:	466b      	mov	r3, sp
 8000f48:	220e      	movs	r2, #14
 8000f4a:	213b      	movs	r1, #59	; 0x3b
 8000f4c:	f7ff ffde 	bl	8000f0c <readBytes>
	destination[0] = ((int16_t) rawData[0] << 8) | rawData[1]; // Turn the MSB and LSB into a signed 16-bit value
 8000f50:	f89d 2000 	ldrb.w	r2, [sp]
 8000f54:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000f58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f5c:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t) rawData[2] << 8) | rawData[3];
 8000f5e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8000f62:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000f66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f6a:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t) rawData[4] << 8) | rawData[5];
 8000f6c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000f70:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f78:	80a3      	strh	r3, [r4, #4]
	destination[3] = ((int16_t) rawData[6] << 8) | rawData[7];
 8000f7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000f7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000f82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f86:	80e3      	strh	r3, [r4, #6]
	destination[4] = ((int16_t) rawData[8] << 8) | rawData[9];
 8000f88:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000f8c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000f90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f94:	8123      	strh	r3, [r4, #8]
	destination[5] = ((int16_t) rawData[10] << 8) | rawData[11];
 8000f96:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8000f9a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8000f9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fa2:	8163      	strh	r3, [r4, #10]
	destination[6] = ((int16_t) rawData[12] << 8) | rawData[13];
 8000fa4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000fa8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8000fac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fb0:	81a3      	strh	r3, [r4, #12]
}
 8000fb2:	b004      	add	sp, #16
 8000fb4:	bd10      	pop	{r4, pc}

08000fb6 <readMagData>:
void readMagData(uint8_t MPUnum, int16_t * destination) {
 8000fb6:	b530      	push	{r4, r5, lr}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
	writeByte(MPUnum, I2C_SLV0_ADDR, AK8963_ADDRESS | 0x80); // Set the I2C slave address of AK8963 and set for read.
 8000fbe:	228c      	movs	r2, #140	; 0x8c
 8000fc0:	2125      	movs	r1, #37	; 0x25
 8000fc2:	f7ff ff75 	bl	8000eb0 <writeByte>
	writeByte(MPUnum, I2C_SLV0_REG, AK8963_XOUT_L); // I2C slave 0 register address from where to begin data transfer
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	2126      	movs	r1, #38	; 0x26
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f7ff ff70 	bl	8000eb0 <writeByte>
	writeByte(MPUnum, I2C_SLV0_CTRL, 0x87);       // Enable I2C and read 7 bytes
 8000fd0:	2287      	movs	r2, #135	; 0x87
 8000fd2:	2127      	movs	r1, #39	; 0x27
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f7ff ff6b 	bl	8000eb0 <writeByte>
	readBytes(MPUnum, EXT_SENS_DATA_00, 7, &rawData[0]); // Read the x-, y-, and z-axis calibration values
 8000fda:	466b      	mov	r3, sp
 8000fdc:	2207      	movs	r2, #7
 8000fde:	2149      	movs	r1, #73	; 0x49
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f7ff ff93 	bl	8000f0c <readBytes>
	uint8_t c = rawData[6]; // End data read by reading ST2 register
 8000fe6:	f89d 3006 	ldrb.w	r3, [sp, #6]
	if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 8000fea:	f013 0f08 	tst.w	r3, #8
 8000fee:	d114      	bne.n	800101a <readMagData+0x64>
		destination[0] = ((int16_t) rawData[1] << 8) | rawData[0]; // Turn the MSB and LSB into a signed 16-bit value
 8000ff0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8000ff4:	f89d 3000 	ldrb.w	r3, [sp]
 8000ff8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ffc:	802b      	strh	r3, [r5, #0]
		destination[1] = ((int16_t) rawData[3] << 8) | rawData[2]; // Data stored as little Endian
 8000ffe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001002:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001006:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800100a:	806b      	strh	r3, [r5, #2]
		destination[2] = ((int16_t) rawData[5] << 8) | rawData[4];
 800100c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001010:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001014:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001018:	80ab      	strh	r3, [r5, #4]
}
 800101a:	b003      	add	sp, #12
 800101c:	bd30      	pop	{r4, r5, pc}
	...

08001020 <MadgwickQuaternionUpdate1>:
// device orientation -- which can be converted to yaw, pitch, and roll. Useful for stabilizing quadcopters, etc.
// The performance of the orientation filter is at least as good as conventional Kalman-based filtering algorithms
// but is much less computationally intensive---it can be performed on a 3.3 V Pro Mini operating at 8 MHz!
__attribute__((optimize("O3"))) void MadgwickQuaternionUpdate1(float ax,
		float ay, float az, float gx, float gy, float gz, float mx, float my,
		float mz) {
 8001020:	b510      	push	{r4, lr}
 8001022:	ed2d 8b10 	vpush	{d8-d15}
 8001026:	eef0 aa40 	vmov.f32	s21, s0
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 800102a:	ee20 0aa0 	vmul.f32	s0, s1, s1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 800102e:	4cf8      	ldr	r4, [pc, #992]	; (8001410 <MadgwickQuaternionUpdate1+0x3f0>)
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8001030:	eeaa 0aaa 	vfma.f32	s0, s21, s21
		float mz) {
 8001034:	b08c      	sub	sp, #48	; 0x30
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001036:	ed94 aa00 	vldr	s20, [r4]
 800103a:	edd4 9a01 	vldr	s19, [r4, #4]
 800103e:	ed94 8a02 	vldr	s16, [r4, #8]
 8001042:	edd4 8a03 	vldr	s17, [r4, #12]
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8001046:	eea1 0a01 	vfma.f32	s0, s2, s2
 800104a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	eef1 cac0 	vsqrt.f32	s25, s0
 8001056:	f100 81b8 	bmi.w	80013ca <MadgwickQuaternionUpdate1+0x3aa>
	if (norm == 0.0f)
 800105a:	eef5 ca40 	vcmp.f32	s25, #0.0
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	d103      	bne.n	800106c <MadgwickQuaternionUpdate1+0x4c>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001064:	b00c      	add	sp, #48	; 0x30
 8001066:	ecbd 8b10 	vpop	{d8-d15}
 800106a:	bd10      	pop	{r4, pc}
	norm = sqrtf(mx * mx + my * my + mz * mz);
 800106c:	ee23 0aa3 	vmul.f32	s0, s7, s7
 8001070:	eea3 0a03 	vfma.f32	s0, s6, s6
 8001074:	eea4 0a04 	vfma.f32	s0, s8, s8
 8001078:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001080:	eeb1 9ac0 	vsqrt.f32	s18, s0
 8001084:	f100 81ca 	bmi.w	800141c <MadgwickQuaternionUpdate1+0x3fc>
	if (norm == 0.0f)
 8001088:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	d0e8      	beq.n	8001064 <MadgwickQuaternionUpdate1+0x44>
	norm = 1.0f / norm;
 8001092:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001096:	ee87 ba89 	vdiv.f32	s22, s15, s18
	float _2q1 = 2.0f * q1;
 800109a:	ee3a da0a 	vadd.f32	s26, s20, s20
	mx *= norm;
 800109e:	ee23 ca0b 	vmul.f32	s24, s6, s22
	my *= norm;
 80010a2:	ee63 ba8b 	vmul.f32	s23, s7, s22
	float q1q1 = q1 * q1;
 80010a6:	ee6a 7a0a 	vmul.f32	s15, s20, s20
	_2q1mx = 2.0f * q1 * mx;
 80010aa:	ee2d 5a0c 	vmul.f32	s10, s26, s24
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 80010ae:	ee27 0aab 	vmul.f32	s0, s15, s23
	_2q1my = 2.0f * q1 * my;
 80010b2:	ee2d 9a2b 	vmul.f32	s18, s26, s23
	mz *= norm;
 80010b6:	ee24 ba0b 	vmul.f32	s22, s8, s22
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 80010ba:	eea8 0a85 	vfma.f32	s0, s17, s10
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 80010be:	ee69 4a68 	vnmul.f32	s9, s18, s17
	_2q1mz = 2.0f * q1 * mz;
 80010c2:	ee2d 7a0b 	vmul.f32	s14, s26, s22
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 80010c6:	eee7 4a8c 	vfma.f32	s9, s15, s24
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 80010ca:	eeb1 6a69 	vneg.f32	s12, s19
	float _2q2 = 2.0f * q2;
 80010ce:	ee79 daa9 	vadd.f32	s27, s19, s19
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 80010d2:	eea6 0a07 	vfma.f32	s0, s12, s14
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 80010d6:	eee8 4a07 	vfma.f32	s9, s16, s14
	_2q2mx = 2.0f * q2 * mx;
 80010da:	ee6d 5a8c 	vmul.f32	s11, s27, s24
	float q2q2 = q2 * q2;
 80010de:	ee29 faa9 	vmul.f32	s30, s19, s19
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 80010e2:	eea8 0a25 	vfma.f32	s0, s16, s11
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 80010e6:	eeef 4a0c 	vfma.f32	s9, s30, s24
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 80010ea:	eef1 6a4f 	vneg.f32	s13, s30
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 80010ee:	ee2d 7aab 	vmul.f32	s14, s27, s23
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 80010f2:	eea6 0aab 	vfma.f32	s0, s13, s23
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 80010f6:	eee7 4a08 	vfma.f32	s9, s14, s16
	float q3q3 = q3 * q3;
 80010fa:	ee68 ea08 	vmul.f32	s29, s16, s16
			+ _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 80010fe:	ee2d 7a8b 	vmul.f32	s14, s27, s22
			+ my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8001102:	eeae 0aab 	vfma.f32	s0, s29, s23
	float _2q3 = 2.0f * q3;
 8001106:	ee38 ea08 	vadd.f32	s28, s16, s16
			+ _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800110a:	eee7 4a28 	vfma.f32	s9, s14, s17
			+ my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 800110e:	ee2e 4a0b 	vmul.f32	s8, s28, s22
			+ _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8001112:	eeb1 7a6e 	vneg.f32	s14, s29
			+ my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8001116:	eea4 0a28 	vfma.f32	s0, s8, s17
	float q4q4 = q4 * q4;
 800111a:	ee68 faa8 	vmul.f32	s31, s17, s17
			+ _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800111e:	eee7 4a0c 	vfma.f32	s9, s14, s24
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 8001122:	eeb1 4a6f 	vneg.f32	s8, s31
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 8001126:	eea4 0a2b 	vfma.f32	s0, s8, s23
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 800112a:	eee4 4a0c 	vfma.f32	s9, s8, s24
	_2bx = sqrtf(hx * hx + hy * hy);
 800112e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001132:	eea4 0aa4 	vfma.f32	s0, s9, s9
 8001136:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	eef1 4ac0 	vsqrt.f32	s9, s0
 8001142:	f100 818e 	bmi.w	8001462 <MadgwickQuaternionUpdate1+0x442>
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 8001146:	ee29 9a89 	vmul.f32	s18, s19, s18
	norm = 1.0f / norm;
 800114a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 800114e:	eea5 9a48 	vfms.f32	s18, s10, s16
	norm = 1.0f / norm;
 8001152:	ee84 5a2c 	vdiv.f32	s10, s8, s25
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 8001156:	eea7 9a8b 	vfma.f32	s18, s15, s22
			+ _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 800115a:	ee2e 3a2b 	vmul.f32	s6, s28, s23
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 800115e:	eef0 7a49 	vmov.f32	s15, s18
 8001162:	eee8 7aa5 	vfma.f32	s15, s17, s11
	float q1q2 = q1 * q2;
 8001166:	ee6a 3a29 	vmul.f32	s7, s20, s19
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 800116a:	eee6 7a8b 	vfma.f32	s15, s13, s22
	float _2q3q4 = 2.0f * q3 * q4;
 800116e:	ee28 0a8e 	vmul.f32	s0, s17, s28
			+ _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8001172:	eee3 7a28 	vfma.f32	s15, s6, s17
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8001176:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 800117a:	eea3 0a83 	vfma.f32	s0, s7, s6
			+ _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 800117e:	eee7 7a0b 	vfma.f32	s15, s14, s22
	float q2q4 = q2 * q4;
 8001182:	ee69 5aa8 	vmul.f32	s11, s19, s17
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8001186:	ee6d ca48 	vnmul.f32	s25, s26, s16
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 800118a:	eea6 4a83 	vfma.f32	s8, s13, s6
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 800118e:	eef0 6a40 	vmov.f32	s13, s0
 8001192:	eee0 6ac5 	vfms.f32	s13, s1, s10
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8001196:	eee5 ca83 	vfma.f32	s25, s11, s6
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 800119a:	eeb1 0a4a 	vneg.f32	s0, s20
 800119e:	eef0 0a65 	vmov.f32	s1, s11
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 80011a2:	eeef 7a8b 	vfma.f32	s15, s31, s22
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 80011a6:	eee0 0a08 	vfma.f32	s1, s0, s16
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 80011aa:	eea7 4a03 	vfma.f32	s8, s14, s6
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 80011ae:	eeea cac5 	vfms.f32	s25, s21, s10
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 80011b2:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80011b6:	ee20 3aa7 	vmul.f32	s6, s1, s15
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 80011ba:	ee66 0a8d 	vmul.f32	s1, s13, s26
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 80011be:	ee79 aa6e 	vsub.f32	s21, s18, s29
	float _2q4 = 2.0f * q4;
 80011c2:	ee38 7aa8 	vadd.f32	s14, s17, s17
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 80011c6:	eea1 4a45 	vfms.f32	s8, s2, s10
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 80011ca:	eeb0 5a60 	vmov.f32	s10, s1
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 80011ce:	ee7a faef 	vsub.f32	s31, s21, s31
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 80011d2:	eeac 5a87 	vfma.f32	s10, s25, s14
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 80011d6:	ee68 0aca 	vnmul.f32	s1, s17, s20
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 80011da:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 80011de:	eeaf 3aa4 	vfma.f32	s6, s31, s9
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 80011e2:	eef0 fa60 	vmov.f32	s31, s1
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 80011e6:	ee61 0a69 	vnmul.f32	s1, s2, s19
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 80011ea:	eee8 3a28 	vfma.f32	s7, s16, s17
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 80011ee:	eea0 5a84 	vfma.f32	s10, s1, s8
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 80011f2:	eee9 fa88 	vfma.f32	s31, s19, s16
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80011f6:	ee39 fa4f 	vsub.f32	s30, s18, s30
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 80011fa:	ee63 3aa7 	vmul.f32	s7, s7, s15
			+ _2q4 * (2.0f * q1q2 + _2q3q4 - ay)
 80011fe:	ee26 9a87 	vmul.f32	s18, s13, s14
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8001202:	eef0 0a45 	vmov.f32	s1, s10
	_4bx = 2.0f * _2bx;
 8001206:	ee34 5aa4 	vadd.f32	s10, s9, s9
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800120a:	eeea 5a08 	vfma.f32	s11, s20, s16
 800120e:	ee3f fa6e 	vsub.f32	s30, s30, s29
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 8001212:	ee66 aaad 	vmul.f32	s21, s13, s27
			+ _2q4 * (2.0f * q1q2 + _2q3q4 - ay)
 8001216:	eead 9a6c 	vfms.f32	s18, s26, s25
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 800121a:	eeef 3aa4 	vfma.f32	s7, s31, s9
			+ _2bx * q3
 800121e:	ee28 da24 	vmul.f32	s26, s16, s9
			+ (-_4bx * q3 - _2bz * q1)
 8001222:	eef1 fa45 	vneg.f32	s31, s10
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8001226:	ee2f fa27 	vmul.f32	s30, s30, s15
			+ (-_4bx * q3 - _2bz * q1)
 800122a:	ee2f 7a88 	vmul.f32	s14, s31, s16
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 800122e:	ee33 3a4c 	vsub.f32	s6, s6, s24
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 8001232:	eeee aa6c 	vfms.f32	s21, s28, s25
			+ _2bz * q4
 8001236:	ee28 caa7 	vmul.f32	s24, s17, s15
			+ (_2bx * q3 + _2bz * q1)
 800123a:	eeb0 5a4d 	vmov.f32	s10, s26
 800123e:	eeaa 5a27 	vfma.f32	s10, s20, s15
			+ (-_4bx * q3 - _2bz * q1)
 8001242:	eea0 7a27 	vfma.f32	s14, s0, s15
			- 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8001246:	ee28 1a01 	vmul.f32	s2, s16, s2
	_4bz = 2.0f * _2bz;
 800124a:	ee37 0aa7 	vadd.f32	s0, s15, s15
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800124e:	eea5 faa4 	vfma.f32	s30, s11, s9
			- _2bz * q3
 8001252:	ee68 5a27 	vmul.f32	s11, s16, s15
			+ (-_2bx * q4 + _2bz * q2)
 8001256:	ee69 7aa7 	vmul.f32	s15, s19, s15
			+ _2bz * q4
 800125a:	eee3 0a0c 	vfma.f32	s1, s6, s24
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 800125e:	ee73 3aeb 	vsub.f32	s7, s7, s23
			- 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8001262:	eea4 9a41 	vfms.f32	s18, s8, s2
			+ (-_2bx * q4 + _2bz * q2)
 8001266:	eef0 ba67 	vmov.f32	s23, s15
 800126a:	eeb1 1a64 	vneg.f32	s2, s9
			+ (_2bx * q4 - _4bz * q2)
 800126e:	ee20 4a69 	vnmul.f32	s8, s0, s19
			- _2bz * q3
 8001272:	eee5 aac3 	vfms.f32	s21, s11, s6
			+ (-_2bx * q4 + _2bz * q2)
 8001276:	eee1 ba28 	vfma.f32	s23, s2, s17
			+ (_2bx * q3 + _2bz * q1)
 800127a:	eee3 0a85 	vfma.f32	s1, s7, s10
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 800127e:	ee26 ea8e 	vmul.f32	s28, s13, s28
			+ (_2bx * q4 - _4bz * q2)
 8001282:	eea8 4aa4 	vfma.f32	s8, s17, s9
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8001286:	ee3f fa4b 	vsub.f32	s30, s30, s22
			+ (_2bx * q2 + _2bz * q4)
 800128a:	ee29 5aa4 	vmul.f32	s10, s19, s9
			+ (-_4bx * q3 - _2bz * q1)
 800128e:	eea3 9a07 	vfma.f32	s18, s6, s14
			+ (-_4bx * q4 + _2bz * q2)
 8001292:	eeef 7aa8 	vfma.f32	s15, s31, s17
			+ (-_2bx * q4 + _2bz * q2)
 8001296:	eeeb aaa3 	vfma.f32	s21, s23, s7
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 800129a:	eeac eaad 	vfma.f32	s28, s25, s27
			+ (_2bx * q1 - _4bz * q3)
 800129e:	ee60 6a48 	vnmul.f32	s13, s0, s16
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 80012a2:	eeef 0a04 	vfma.f32	s1, s30, s8
			+ (_2bx * q2 + _2bz * q4)
 80012a6:	ee3c ca05 	vadd.f32	s24, s24, s10
			+ (_2bx * q1 - _4bz * q3)
 80012aa:	eeea 6a24 	vfma.f32	s13, s20, s9
			+ (_2bx * q2 + _2bz * q4)
 80012ae:	eea3 9a8c 	vfma.f32	s18, s7, s24
			+ (-_2bx * q1 + _2bz * q3)
 80012b2:	eee1 5a0a 	vfma.f32	s11, s2, s20
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 80012b6:	eeed aa0f 	vfma.f32	s21, s26, s30
			+ (-_4bx * q4 + _2bz * q2)
 80012ba:	eea3 ea27 	vfma.f32	s28, s6, s15
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4); // normalise step magnitude
 80012be:	ee20 0aa0 	vmul.f32	s0, s1, s1
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
 80012c2:	eeaf 9a26 	vfma.f32	s18, s30, s13
			+ (-_2bx * q1 + _2bz * q3)
 80012c6:	eea3 eaa5 	vfma.f32	s28, s7, s11
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4); // normalise step magnitude
 80012ca:	eeaa 0aaa 	vfma.f32	s0, s21, s21
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 80012ce:	eeaf ea05 	vfma.f32	s28, s30, s10
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4); // normalise step magnitude
 80012d2:	eea9 0a09 	vfma.f32	s0, s18, s18
 80012d6:	eeae 0a0e 	vfma.f32	s0, s28, s28
 80012da:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	eeb1 bac0 	vsqrt.f32	s22, s0
 80012e6:	f100 80f2 	bmi.w	80014ce <MadgwickQuaternionUpdate1+0x4ae>
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 80012ea:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <MadgwickQuaternionUpdate1+0x3f4>)
	q1 += qDot1 * deltat1;
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <MadgwickQuaternionUpdate1+0x3f8>)
	norm = 1.0f / norm;
 80012ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80012f2:	eec7 5a8b 	vdiv.f32	s11, s15, s22
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 80012f6:	ee22 7a48 	vnmul.f32	s14, s4, s16
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80012fa:	ee28 5a22 	vmul.f32	s10, s16, s5
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 80012fe:	eea6 7a21 	vfma.f32	s14, s12, s3
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8001302:	eeaa 5a21 	vfma.f32	s10, s20, s3
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8001306:	eef1 6a68 	vneg.f32	s13, s17
 800130a:	eeb0 6a47 	vmov.f32	s12, s14
 800130e:	edd2 7a00 	vldr	s15, [r2]
	q1 += qDot1 * deltat1;
 8001312:	ed93 7a00 	vldr	s14, [r3]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8001316:	eea6 5a82 	vfma.f32	s10, s13, s4
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 800131a:	eea6 6aa2 	vfma.f32	s12, s13, s5
	s2 *= norm;
 800131e:	ee60 0aa5 	vmul.f32	s1, s1, s11
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8001322:	ee62 6ae9 	vnmul.f32	s13, s5, s19
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8001326:	ee67 0ae0 	vnmul.f32	s1, s15, s1
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 800132a:	eeea 6a02 	vfma.f32	s13, s20, s4
	s1 *= norm;
 800132e:	ee6a aaa5 	vmul.f32	s21, s21, s11
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8001332:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8001336:	ee67 aaea 	vnmul.f32	s21, s15, s21
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800133a:	ee29 2a82 	vmul.f32	s4, s19, s4
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 800133e:	eee5 0a24 	vfma.f32	s1, s10, s9
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8001342:	eee8 6aa1 	vfma.f32	s13, s17, s3
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8001346:	eeaa 2a22 	vfma.f32	s4, s20, s5
	s3 *= norm;
 800134a:	ee29 9a25 	vmul.f32	s18, s18, s11
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 800134e:	eee6 aa24 	vfma.f32	s21, s12, s9
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8001352:	ee27 9ac9 	vnmul.f32	s18, s15, s18
	q2 += qDot2 * deltat1;
 8001356:	eee7 9a20 	vfma.f32	s19, s14, s1
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 800135a:	eea6 9aa4 	vfma.f32	s18, s13, s9
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800135e:	eea8 2a61 	vfms.f32	s4, s16, s3
	s4 *= norm;
 8001362:	ee2e ea25 	vmul.f32	s28, s28, s11
	q1 += qDot1 * deltat1;
 8001366:	eea7 aa2a 	vfma.f32	s20, s14, s21
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800136a:	ee67 7ace 	vnmul.f32	s15, s15, s28
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4); // normalise quaternion
 800136e:	ee29 0aa9 	vmul.f32	s0, s19, s19
	q3 += qDot3 * deltat1;
 8001372:	eea7 8a09 	vfma.f32	s16, s14, s18
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8001376:	eee2 7a24 	vfma.f32	s15, s4, s9
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4); // normalise quaternion
 800137a:	eeaa 0a0a 	vfma.f32	s0, s20, s20
	q4 += qDot4 * deltat1;
 800137e:	eee7 8a27 	vfma.f32	s17, s14, s15
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4); // normalise quaternion
 8001382:	eea8 0a08 	vfma.f32	s0, s16, s16
 8001386:	eea8 0aa8 	vfma.f32	s0, s17, s17
 800138a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	eeb1 9ac0 	vsqrt.f32	s18, s0
 8001396:	f100 8097 	bmi.w	80014c8 <MadgwickQuaternionUpdate1+0x4a8>
	norm = 1.0f / norm;
 800139a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800139e:	eec7 7a09 	vdiv.f32	s15, s14, s18
	q[0] = q1 * norm;
 80013a2:	ee2a aa27 	vmul.f32	s20, s20, s15
	q[1] = q2 * norm;
 80013a6:	ee69 9aa7 	vmul.f32	s19, s19, s15
	q[2] = q3 * norm;
 80013aa:	ee28 8a27 	vmul.f32	s16, s16, s15
	q[3] = q4 * norm;
 80013ae:	ee68 8aa7 	vmul.f32	s17, s17, s15
	q[0] = q1 * norm;
 80013b2:	ed84 aa00 	vstr	s20, [r4]
	q[1] = q2 * norm;
 80013b6:	edc4 9a01 	vstr	s19, [r4, #4]
	q[2] = q3 * norm;
 80013ba:	ed84 8a02 	vstr	s16, [r4, #8]
	q[3] = q4 * norm;
 80013be:	edc4 8a03 	vstr	s17, [r4, #12]
}
 80013c2:	b00c      	add	sp, #48	; 0x30
 80013c4:	ecbd 8b10 	vpop	{d8-d15}
 80013c8:	bd10      	pop	{r4, pc}
 80013ca:	ed8d 4a07 	vstr	s8, [sp, #28]
 80013ce:	edcd 3a06 	vstr	s7, [sp, #24]
 80013d2:	ed8d 3a05 	vstr	s6, [sp, #20]
 80013d6:	edcd 2a04 	vstr	s5, [sp, #16]
 80013da:	ed8d 2a03 	vstr	s4, [sp, #12]
 80013de:	edcd 1a02 	vstr	s3, [sp, #8]
 80013e2:	ed8d 1a01 	vstr	s2, [sp, #4]
 80013e6:	edcd 0a00 	vstr	s1, [sp]
	norm = sqrtf(ax * ax + ay * ay + az * az);
 80013ea:	f004 fdb3 	bl	8005f54 <sqrtf>
 80013ee:	ed9d 4a07 	vldr	s8, [sp, #28]
 80013f2:	eddd 3a06 	vldr	s7, [sp, #24]
 80013f6:	ed9d 3a05 	vldr	s6, [sp, #20]
 80013fa:	eddd 2a04 	vldr	s5, [sp, #16]
 80013fe:	ed9d 2a03 	vldr	s4, [sp, #12]
 8001402:	eddd 1a02 	vldr	s3, [sp, #8]
 8001406:	ed9d 1a01 	vldr	s2, [sp, #4]
 800140a:	eddd 0a00 	vldr	s1, [sp]
 800140e:	e624      	b.n	800105a <MadgwickQuaternionUpdate1+0x3a>
 8001410:	2000002c 	.word	0x2000002c
 8001414:	2000000c 	.word	0x2000000c
 8001418:	2000025c 	.word	0x2000025c
 800141c:	ed8d 4a07 	vstr	s8, [sp, #28]
 8001420:	edcd 3a06 	vstr	s7, [sp, #24]
 8001424:	ed8d 3a05 	vstr	s6, [sp, #20]
 8001428:	edcd 2a04 	vstr	s5, [sp, #16]
 800142c:	ed8d 2a03 	vstr	s4, [sp, #12]
 8001430:	edcd 1a02 	vstr	s3, [sp, #8]
 8001434:	ed8d 1a01 	vstr	s2, [sp, #4]
 8001438:	edcd 0a00 	vstr	s1, [sp]
	norm = sqrtf(mx * mx + my * my + mz * mz);
 800143c:	f004 fd8a 	bl	8005f54 <sqrtf>
 8001440:	ed9d 4a07 	vldr	s8, [sp, #28]
 8001444:	eddd 3a06 	vldr	s7, [sp, #24]
 8001448:	ed9d 3a05 	vldr	s6, [sp, #20]
 800144c:	eddd 2a04 	vldr	s5, [sp, #16]
 8001450:	ed9d 2a03 	vldr	s4, [sp, #12]
 8001454:	eddd 1a02 	vldr	s3, [sp, #8]
 8001458:	ed9d 1a01 	vldr	s2, [sp, #4]
 800145c:	eddd 0a00 	vldr	s1, [sp]
 8001460:	e612      	b.n	8001088 <MadgwickQuaternionUpdate1+0x68>
 8001462:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8001466:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 800146a:	ed8d 6a09 	vstr	s12, [sp, #36]	; 0x24
 800146e:	edcd 2a08 	vstr	s5, [sp, #32]
 8001472:	ed8d 2a07 	vstr	s4, [sp, #28]
 8001476:	edcd 1a06 	vstr	s3, [sp, #24]
 800147a:	ed8d 1a05 	vstr	s2, [sp, #20]
 800147e:	edcd 0a04 	vstr	s1, [sp, #16]
 8001482:	edcd 4a03 	vstr	s9, [sp, #12]
 8001486:	edcd 5a02 	vstr	s11, [sp, #8]
 800148a:	ed8d 5a01 	vstr	s10, [sp, #4]
 800148e:	edcd 7a00 	vstr	s15, [sp]
	_2bx = sqrtf(hx * hx + hy * hy);
 8001492:	f004 fd5f 	bl	8005f54 <sqrtf>
 8001496:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 800149a:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 800149e:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 80014a2:	eddd 2a08 	vldr	s5, [sp, #32]
 80014a6:	ed9d 2a07 	vldr	s4, [sp, #28]
 80014aa:	eddd 1a06 	vldr	s3, [sp, #24]
 80014ae:	ed9d 1a05 	vldr	s2, [sp, #20]
 80014b2:	eddd 0a04 	vldr	s1, [sp, #16]
 80014b6:	eddd 4a03 	vldr	s9, [sp, #12]
 80014ba:	eddd 5a02 	vldr	s11, [sp, #8]
 80014be:	ed9d 5a01 	vldr	s10, [sp, #4]
 80014c2:	eddd 7a00 	vldr	s15, [sp]
 80014c6:	e63e      	b.n	8001146 <MadgwickQuaternionUpdate1+0x126>
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4); // normalise quaternion
 80014c8:	f004 fd44 	bl	8005f54 <sqrtf>
 80014cc:	e765      	b.n	800139a <MadgwickQuaternionUpdate1+0x37a>
 80014ce:	ed8d 6a04 	vstr	s12, [sp, #16]
 80014d2:	edcd 2a03 	vstr	s5, [sp, #12]
 80014d6:	ed8d 2a02 	vstr	s4, [sp, #8]
 80014da:	edcd 1a01 	vstr	s3, [sp, #4]
 80014de:	edcd 0a00 	vstr	s1, [sp]
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4); // normalise step magnitude
 80014e2:	f004 fd37 	bl	8005f54 <sqrtf>
 80014e6:	ed9d 6a04 	vldr	s12, [sp, #16]
 80014ea:	eddd 2a03 	vldr	s5, [sp, #12]
 80014ee:	ed9d 2a02 	vldr	s4, [sp, #8]
 80014f2:	eddd 1a01 	vldr	s3, [sp, #4]
 80014f6:	eddd 0a00 	vldr	s1, [sp]
 80014fa:	e6f6      	b.n	80012ea <MadgwickQuaternionUpdate1+0x2ca>

080014fc <calculate_euler>:

#define TIMER_MAX_LOAD 65535.0f
#define TIMER_CLK_FREQ 100000000.0f
#define TIMER_PRESCALER 100.0f

void calculate_euler(int tim_counter_value) {
 80014fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001500:	4605      	mov	r5, r0


	// If intPin1 goes high, either all data registers have new data
   // On interrupt, read data
	      intFlag1 = false;     // reset newData flag
 8001502:	2000      	movs	r0, #0
 8001504:	4bd6      	ldr	r3, [pc, #856]	; (8001860 <calculate_euler+0x364>)
 8001506:	7018      	strb	r0, [r3, #0]

	      if (readByte(0, INT_STATUS) & 0x01){
 8001508:	213a      	movs	r1, #58	; 0x3a
 800150a:	f7ff fce5 	bl	8000ed8 <readByte>
 800150e:	f010 0f01 	tst.w	r0, #1
 8001512:	d101      	bne.n	8001518 <calculate_euler+0x1c>
	    lin_ay1 = ay1 + a32;
	    lin_az1 = az1 - a33;
	      }
	    /* end of MPU9250 1 interrupt handling */

}
 8001514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    readMPU9250Data(MPU1, MPU9250Data1); // INT cleared on any read
 8001518:	4cd2      	ldr	r4, [pc, #840]	; (8001864 <calculate_euler+0x368>)
 800151a:	4621      	mov	r1, r4
 800151c:	2068      	movs	r0, #104	; 0x68
 800151e:	f7ff fd0f 	bl	8000f40 <readMPU9250Data>
	     ax1 = (float)MPU9250Data1[0]*aRes - accelBias1[0];  // get actual g value, this depends on scale being set
 8001522:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001526:	ee07 3a10 	vmov	s14, r3
 800152a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800152e:	4bce      	ldr	r3, [pc, #824]	; (8001868 <calculate_euler+0x36c>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001538:	4bcc      	ldr	r3, [pc, #816]	; (800186c <calculate_euler+0x370>)
 800153a:	edd3 6a00 	vldr	s13, [r3]
 800153e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001542:	4acb      	ldr	r2, [pc, #812]	; (8001870 <calculate_euler+0x374>)
 8001544:	ed82 7a00 	vstr	s14, [r2]
	     ay1 = (float)MPU9250Data1[1]*aRes - accelBias1[1];
 8001548:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800154c:	ee07 2a10 	vmov	s14, r2
 8001550:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001554:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001558:	edd3 6a01 	vldr	s13, [r3, #4]
 800155c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001560:	4ac4      	ldr	r2, [pc, #784]	; (8001874 <calculate_euler+0x378>)
 8001562:	ed82 7a00 	vstr	s14, [r2]
	     az1 = (float)MPU9250Data1[2]*aRes - accelBias1[2];
 8001566:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800156a:	ee07 2a10 	vmov	s14, r2
 800156e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001576:	ed93 7a02 	vldr	s14, [r3, #8]
 800157a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800157e:	4bbe      	ldr	r3, [pc, #760]	; (8001878 <calculate_euler+0x37c>)
 8001580:	edc3 7a00 	vstr	s15, [r3]
	     gx1 = (float)MPU9250Data1[4]*gRes;  // get actual gyro value, this depends on scale being set
 8001584:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001588:	ee07 3a10 	vmov	s14, r3
 800158c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001590:	4bba      	ldr	r3, [pc, #744]	; (800187c <calculate_euler+0x380>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159a:	4bb9      	ldr	r3, [pc, #740]	; (8001880 <calculate_euler+0x384>)
 800159c:	ed83 7a00 	vstr	s14, [r3]
	     gy1 = (float)MPU9250Data1[5]*gRes;
 80015a0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80015a4:	ee07 3a10 	vmov	s14, r3
 80015a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80015ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015b0:	4bb4      	ldr	r3, [pc, #720]	; (8001884 <calculate_euler+0x388>)
 80015b2:	ed83 7a00 	vstr	s14, [r3]
	     gz1 = (float)MPU9250Data1[6]*gRes;
 80015b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015ba:	ee07 3a10 	vmov	s14, r3
 80015be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80015c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c6:	4bb0      	ldr	r3, [pc, #704]	; (8001888 <calculate_euler+0x38c>)
 80015c8:	edc3 7a00 	vstr	s15, [r3]
	      readMagData(MPU1, magCount1);  // Read the x/y/z adc values
 80015cc:	4caf      	ldr	r4, [pc, #700]	; (800188c <calculate_euler+0x390>)
 80015ce:	4621      	mov	r1, r4
 80015d0:	2068      	movs	r0, #104	; 0x68
 80015d2:	f7ff fcf0 	bl	8000fb6 <readMagData>
	      mx1 = (float)magCount1[0]*mRes*magCalibration1[0] - magBias1[0];  // get actual magnetometer value, this depends on scale being set
 80015d6:	f9b4 3000 	ldrsh.w	r3, [r4]
 80015da:	ee06 3a90 	vmov	s13, r3
 80015de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80015e2:	4bab      	ldr	r3, [pc, #684]	; (8001890 <calculate_euler+0x394>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015ec:	4aa9      	ldr	r2, [pc, #676]	; (8001894 <calculate_euler+0x398>)
 80015ee:	ed92 7a00 	vldr	s14, [r2]
 80015f2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80015f6:	4ba8      	ldr	r3, [pc, #672]	; (8001898 <calculate_euler+0x39c>)
 80015f8:	ed93 7a00 	vldr	s14, [r3]
 80015fc:	ee76 6ac7 	vsub.f32	s13, s13, s14
	      my1 = (float)magCount1[1]*mRes*magCalibration1[1] - magBias1[1];
 8001600:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8001604:	ee07 1a10 	vmov	s14, r1
 8001608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800160c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001610:	ed92 6a01 	vldr	s12, [r2, #4]
 8001614:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001618:	ed93 6a01 	vldr	s12, [r3, #4]
 800161c:	ee37 7a46 	vsub.f32	s14, s14, s12
	      mz1 = (float)magCount1[2]*mRes*magCalibration1[2] - magBias1[2];
 8001620:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8001624:	ee06 1a10 	vmov	s12, r1
 8001628:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800162c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001630:	ed92 6a02 	vldr	s12, [r2, #8]
 8001634:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001638:	ed93 6a02 	vldr	s12, [r3, #8]
 800163c:	ee77 7ac6 	vsub.f32	s15, s15, s12
	      mx1 *= magScale1[0];
 8001640:	4b96      	ldr	r3, [pc, #600]	; (800189c <calculate_euler+0x3a0>)
 8001642:	ed93 6a00 	vldr	s12, [r3]
 8001646:	ee66 6a86 	vmul.f32	s13, s13, s12
 800164a:	4a95      	ldr	r2, [pc, #596]	; (80018a0 <calculate_euler+0x3a4>)
 800164c:	edc2 6a00 	vstr	s13, [r2]
	      my1 *= magScale1[1];
 8001650:	edd3 6a01 	vldr	s13, [r3, #4]
 8001654:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001658:	4a92      	ldr	r2, [pc, #584]	; (80018a4 <calculate_euler+0x3a8>)
 800165a:	ed82 7a00 	vstr	s14, [r2]
	      mz1 *= magScale1[2];
 800165e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	4b90      	ldr	r3, [pc, #576]	; (80018a8 <calculate_euler+0x3ac>)
 8001668:	edc3 7a00 	vstr	s15, [r3]
	    for(uint8_t i = 0; i < 10; i++) { // iterate a fixed number of times per data read cycle
 800166c:	2400      	movs	r4, #0
 800166e:	e04f      	b.n	8001710 <calculate_euler+0x214>
	    Now1 = tim_counter_value;
 8001670:	4b8e      	ldr	r3, [pc, #568]	; (80018ac <calculate_euler+0x3b0>)
 8001672:	601d      	str	r5, [r3, #0]
		deltat1 = (float) ((Now1 - lastUpdate1) * (1 / (TIMER_CLK_FREQ / TIMER_PRESCALER))); // set integration time by time elapsed since last filter update
 8001674:	4a8e      	ldr	r2, [pc, #568]	; (80018b0 <calculate_euler+0x3b4>)
 8001676:	6813      	ldr	r3, [r2, #0]
 8001678:	1aeb      	subs	r3, r5, r3
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001682:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80018b4 <calculate_euler+0x3b8>
 8001686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <calculate_euler+0x3bc>)
 800168c:	edc3 7a00 	vstr	s15, [r3]
	    lastUpdate1 = Now1;
 8001690:	6015      	str	r5, [r2, #0]
	    sum1 += deltat1; // sum for averaging filter update rate
 8001692:	4b8a      	ldr	r3, [pc, #552]	; (80018bc <calculate_euler+0x3c0>)
 8001694:	ed93 7a00 	vldr	s14, [r3]
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	edc3 7a00 	vstr	s15, [r3]
	    sumCount1++;
 80016a0:	4a87      	ldr	r2, [pc, #540]	; (80018c0 <calculate_euler+0x3c4>)
 80016a2:	6813      	ldr	r3, [r2, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	6013      	str	r3, [r2, #0]
	    MadgwickQuaternionUpdate1(-ax1, +ay1, +az1, gx1*pi/180.0f, -gy1*pi/180.0f, -gz1*pi/180.0f,  my1,  -mx1, mz1);
 80016a8:	4b86      	ldr	r3, [pc, #536]	; (80018c4 <calculate_euler+0x3c8>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	4b74      	ldr	r3, [pc, #464]	; (8001880 <calculate_euler+0x384>)
 80016b0:	edd3 1a00 	vldr	s3, [r3]
 80016b4:	ee67 1aa1 	vmul.f32	s3, s15, s3
 80016b8:	4b72      	ldr	r3, [pc, #456]	; (8001884 <calculate_euler+0x388>)
 80016ba:	ed93 2a00 	vldr	s4, [r3]
 80016be:	ee22 2a67 	vnmul.f32	s4, s4, s15
 80016c2:	4b71      	ldr	r3, [pc, #452]	; (8001888 <calculate_euler+0x38c>)
 80016c4:	edd3 2a00 	vldr	s5, [r3]
 80016c8:	ee62 2ae7 	vnmul.f32	s5, s5, s15
 80016cc:	4b74      	ldr	r3, [pc, #464]	; (80018a0 <calculate_euler+0x3a4>)
 80016ce:	edd3 3a00 	vldr	s7, [r3]
 80016d2:	eddf 7a7d 	vldr	s15, [pc, #500]	; 80018c8 <calculate_euler+0x3cc>
 80016d6:	4b66      	ldr	r3, [pc, #408]	; (8001870 <calculate_euler+0x374>)
 80016d8:	ed93 0a00 	vldr	s0, [r3]
 80016dc:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <calculate_euler+0x3ac>)
 80016de:	ed93 4a00 	vldr	s8, [r3]
 80016e2:	eef1 3a63 	vneg.f32	s7, s7
 80016e6:	4b6f      	ldr	r3, [pc, #444]	; (80018a4 <calculate_euler+0x3a8>)
 80016e8:	ed93 3a00 	vldr	s6, [r3]
 80016ec:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 80016f0:	ee82 2a27 	vdiv.f32	s4, s4, s15
 80016f4:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 80016f8:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <calculate_euler+0x37c>)
 80016fa:	ed93 1a00 	vldr	s2, [r3]
 80016fe:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <calculate_euler+0x378>)
 8001700:	edd3 0a00 	vldr	s1, [r3]
 8001704:	eeb1 0a40 	vneg.f32	s0, s0
 8001708:	f7ff fc8a 	bl	8001020 <MadgwickQuaternionUpdate1>
	    for(uint8_t i = 0; i < 10; i++) { // iterate a fixed number of times per data read cycle
 800170c:	3401      	adds	r4, #1
 800170e:	b2e4      	uxtb	r4, r4
 8001710:	2c09      	cmp	r4, #9
 8001712:	d9ad      	bls.n	8001670 <calculate_euler+0x174>
	    a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8001714:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <calculate_euler+0x3d0>)
 8001716:	edd3 7a01 	vldr	s15, [r3, #4]
 800171a:	ed93 7a02 	vldr	s14, [r3, #8]
 800171e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001722:	edd3 5a00 	vldr	s11, [r3]
 8001726:	ed93 0a03 	vldr	s0, [r3, #12]
 800172a:	ee25 6a80 	vmul.f32	s12, s11, s0
 800172e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001732:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8001736:	4d66      	ldr	r5, [pc, #408]	; (80018d0 <calculate_euler+0x3d4>)
 8001738:	edc5 6a00 	vstr	s13, [r5]
	    a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 800173c:	ee65 6aa5 	vmul.f32	s13, s11, s11
 8001740:	ee27 4aa7 	vmul.f32	s8, s15, s15
 8001744:	ee36 6a84 	vadd.f32	s12, s13, s8
 8001748:	ee67 4a07 	vmul.f32	s9, s14, s14
 800174c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8001750:	ee20 5a00 	vmul.f32	s10, s0, s0
 8001754:	ee36 6a45 	vsub.f32	s12, s12, s10
 8001758:	4e5e      	ldr	r6, [pc, #376]	; (80018d4 <calculate_euler+0x3d8>)
 800175a:	ed86 6a00 	vstr	s12, [r6]
	    a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 800175e:	ee27 6aa5 	vmul.f32	s12, s15, s11
 8001762:	ee67 3a00 	vmul.f32	s7, s14, s0
 8001766:	ee36 6a23 	vadd.f32	s12, s12, s7
 800176a:	ee36 6a06 	vadd.f32	s12, s12, s12
 800176e:	4f5a      	ldr	r7, [pc, #360]	; (80018d8 <calculate_euler+0x3dc>)
 8001770:	ed87 6a00 	vstr	s12, [r7]
	    a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 8001774:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001778:	ee27 7a25 	vmul.f32	s14, s14, s11
 800177c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001780:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001784:	4b55      	ldr	r3, [pc, #340]	; (80018dc <calculate_euler+0x3e0>)
 8001786:	ed83 0a00 	vstr	s0, [r3]
	    a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 800178a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800178e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8001792:	ee75 6a26 	vadd.f32	s13, s10, s13
 8001796:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80018f8 <calculate_euler+0x3fc>
 800179a:	edc8 6a00 	vstr	s13, [r8]
	    pitch1 = -asinf(a32);
 800179e:	f004 fb7f 	bl	8005ea0 <asinf>
 80017a2:	eeb1 0a40 	vneg.f32	s0, s0
 80017a6:	4c4e      	ldr	r4, [pc, #312]	; (80018e0 <calculate_euler+0x3e4>)
 80017a8:	ed84 0a00 	vstr	s0, [r4]
	    roll1  = atan2f(a31, a33);
 80017ac:	edd8 0a00 	vldr	s1, [r8]
 80017b0:	ed97 0a00 	vldr	s0, [r7]
 80017b4:	f004 fbcc 	bl	8005f50 <atan2f>
 80017b8:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <calculate_euler+0x3e8>)
 80017ba:	ed83 0a00 	vstr	s0, [r3]
	    yaw1   = atan2f(a12, a22);
 80017be:	edd6 0a00 	vldr	s1, [r6]
 80017c2:	ed95 0a00 	vldr	s0, [r5]
 80017c6:	f004 fbc3 	bl	8005f50 <atan2f>
	    pitch1 *= 180.0f / pi;
 80017ca:	4b3e      	ldr	r3, [pc, #248]	; (80018c4 <calculate_euler+0x3c8>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80018c8 <calculate_euler+0x3cc>
 80017d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d8:	edd4 7a00 	vldr	s15, [r4]
 80017dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e0:	edc4 7a00 	vstr	s15, [r4]
	    yaw1   *= 180.0f / pi;
 80017e4:	ee20 0a07 	vmul.f32	s0, s0, s14
	    yaw1   += -0.27f; // Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04
 80017e8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80018e8 <calculate_euler+0x3ec>
 80017ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 80017f0:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <calculate_euler+0x3f0>)
 80017f2:	ed83 0a00 	vstr	s0, [r3]
	    if(yaw1 < 0) yaw1   += 360.0f; // Ensure yaw stays between 0 and 360
 80017f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80017fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fe:	d428      	bmi.n	8001852 <calculate_euler+0x356>
	    roll1  *= 180.0f / pi;
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <calculate_euler+0x3e8>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180a:	edc3 7a00 	vstr	s15, [r3]
	    lin_ax1 = ax1 + a31;
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <calculate_euler+0x374>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <calculate_euler+0x3dc>)
 8001816:	ed93 7a00 	vldr	s14, [r3]
 800181a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <calculate_euler+0x3f4>)
 8001820:	edc3 7a00 	vstr	s15, [r3]
	    lin_ay1 = ay1 + a32;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <calculate_euler+0x378>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <calculate_euler+0x3e0>)
 800182c:	ed93 7a00 	vldr	s14, [r3]
 8001830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <calculate_euler+0x3f8>)
 8001836:	edc3 7a00 	vstr	s15, [r3]
	    lin_az1 = az1 - a33;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <calculate_euler+0x37c>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <calculate_euler+0x3fc>)
 8001842:	ed93 7a00 	vldr	s14, [r3]
 8001846:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <calculate_euler+0x400>)
 800184c:	edc3 7a00 	vstr	s15, [r3]
}
 8001850:	e660      	b.n	8001514 <calculate_euler+0x18>
	    if(yaw1 < 0) yaw1   += 360.0f; // Ensure yaw stays between 0 and 360
 8001852:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001900 <calculate_euler+0x404>
 8001856:	ee30 0a27 	vadd.f32	s0, s0, s15
 800185a:	ed83 0a00 	vstr	s0, [r3]
 800185e:	e7cf      	b.n	8001800 <calculate_euler+0x304>
 8001860:	20000260 	.word	0x20000260
 8001864:	200003c0 	.word	0x200003c0
 8001868:	200003d4 	.word	0x200003d4
 800186c:	20000000 	.word	0x20000000
 8001870:	200003f4 	.word	0x200003f4
 8001874:	200003b8 	.word	0x200003b8
 8001878:	200002f4 	.word	0x200002f4
 800187c:	2000041c 	.word	0x2000041c
 8001880:	200002f8 	.word	0x200002f8
 8001884:	20000400 	.word	0x20000400
 8001888:	200003ac 	.word	0x200003ac
 800188c:	20000318 	.word	0x20000318
 8001890:	2000042c 	.word	0x2000042c
 8001894:	20000268 	.word	0x20000268
 8001898:	20000010 	.word	0x20000010
 800189c:	2000001c 	.word	0x2000001c
 80018a0:	20000408 	.word	0x20000408
 80018a4:	200002dc 	.word	0x200002dc
 80018a8:	200003f0 	.word	0x200003f0
 80018ac:	20000258 	.word	0x20000258
 80018b0:	20000264 	.word	0x20000264
 80018b4:	358637bd 	.word	0x358637bd
 80018b8:	2000025c 	.word	0x2000025c
 80018bc:	20000274 	.word	0x20000274
 80018c0:	20000278 	.word	0x20000278
 80018c4:	20000028 	.word	0x20000028
 80018c8:	43340000 	.word	0x43340000
 80018cc:	2000002c 	.word	0x2000002c
 80018d0:	200003d8 	.word	0x200003d8
 80018d4:	200003f8 	.word	0x200003f8
 80018d8:	2000040c 	.word	0x2000040c
 80018dc:	20000418 	.word	0x20000418
 80018e0:	20000428 	.word	0x20000428
 80018e4:	200002ec 	.word	0x200002ec
 80018e8:	3e8a3d71 	.word	0x3e8a3d71
 80018ec:	20000414 	.word	0x20000414
 80018f0:	200002f0 	.word	0x200002f0
 80018f4:	2000038c 	.word	0x2000038c
 80018f8:	200002d8 	.word	0x200002d8
 80018fc:	200002e8 	.word	0x200002e8
 8001900:	43b40000 	.word	0x43b40000

08001904 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 8001904:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <pid_calculate_roll+0xac>)
 800190a:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 800190e:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <pid_calculate_roll+0xb0>)
 8001910:	edd3 6a00 	vldr	s13, [r3]
 8001914:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <pid_calculate_roll+0xb4>)
 800191a:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <pid_calculate_roll+0xb8>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8001928:	eddf 5a25 	vldr	s11, [pc, #148]	; 80019c0 <pid_calculate_roll+0xbc>
 800192c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <pid_calculate_roll+0xc0>)
 8001932:	ed93 7a00 	vldr	s14, [r3]
 8001936:	ee77 7a87 	vadd.f32	s15, s15, s14
 800193a:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <pid_calculate_roll+0xc4>)
 8001940:	ed93 6a00 	vldr	s12, [r3]
 8001944:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8001948:	ee86 7a25 	vdiv.f32	s14, s12, s11
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <pid_calculate_roll+0xc8>)
 800194e:	ed92 6a00 	vldr	s12, [r2]
 8001952:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <pid_calculate_roll+0xcc>)
 8001958:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 800195c:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8001960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <pid_calculate_roll+0xd0>)
 800196a:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <pid_calculate_roll+0xd4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	425a      	negs	r2, r3
 8001974:	ee07 2a10 	vmov	s14, r2
 8001978:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800197c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	d40c      	bmi.n	80019a0 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 8001986:	ee07 3a10 	vmov	s14, r3
 800198a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800198e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	dd06      	ble.n	80019a6 <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <pid_calculate_roll+0xd0>)
 800199a:	ed83 7a00 	vstr	s14, [r3]
 800199e:	e002      	b.n	80019a6 <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <pid_calculate_roll+0xd0>)
 80019a2:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <pid_calculate_roll+0xd0>)
 80019a8:	ed93 0a00 	vldr	s0, [r3]
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000288 	.word	0x20000288
 80019b4:	20000054 	.word	0x20000054
 80019b8:	20000458 	.word	0x20000458
 80019bc:	20000050 	.word	0x20000050
 80019c0:	3b012912 	.word	0x3b012912
 80019c4:	20000464 	.word	0x20000464
 80019c8:	2000028c 	.word	0x2000028c
 80019cc:	2000004c 	.word	0x2000004c
 80019d0:	20000444 	.word	0x20000444
 80019d4:	20000290 	.word	0x20000290
 80019d8:	20000058 	.word	0x20000058

080019dc <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <reset_pid_roll+0x14>)
 80019e0:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <reset_pid_roll+0x18>)
 80019e4:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <reset_pid_roll+0x1c>)
 80019e8:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <reset_pid_roll+0x20>)
 80019ec:	6013      	str	r3, [r2, #0]

}
 80019ee:	4770      	bx	lr
 80019f0:	20000458 	.word	0x20000458
 80019f4:	20000464 	.word	0x20000464
 80019f8:	20000444 	.word	0x20000444
 80019fc:	20000290 	.word	0x20000290

08001a00 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 8001a00:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <pid_calculate_pitch+0xac>)
 8001a06:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <pid_calculate_pitch+0xb0>)
 8001a0c:	edd3 6a00 	vldr	s13, [r3]
 8001a10:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <pid_calculate_pitch+0xb4>)
 8001a16:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8001a1a:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <pid_calculate_pitch+0xb8>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8001a24:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001abc <pid_calculate_pitch+0xbc>
 8001a28:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <pid_calculate_pitch+0xc0>)
 8001a2e:	ed93 7a00 	vldr	s14, [r3]
 8001a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a36:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <pid_calculate_pitch+0xc4>)
 8001a3c:	ed93 6a00 	vldr	s12, [r3]
 8001a40:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8001a44:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8001a48:	4a1f      	ldr	r2, [pc, #124]	; (8001ac8 <pid_calculate_pitch+0xc8>)
 8001a4a:	ed92 6a00 	vldr	s12, [r2]
 8001a4e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001a52:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <pid_calculate_pitch+0xcc>)
 8001a54:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 8001a58:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8001a5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <pid_calculate_pitch+0xd0>)
 8001a66:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <pid_calculate_pitch+0xd4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	425a      	negs	r2, r3
 8001a70:	ee07 2a10 	vmov	s14, r2
 8001a74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	d40c      	bmi.n	8001a9c <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8001a82:	ee07 3a10 	vmov	s14, r3
 8001a86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	dd06      	ble.n	8001aa2 <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <pid_calculate_pitch+0xd0>)
 8001a96:	ed83 7a00 	vstr	s14, [r3]
 8001a9a:	e002      	b.n	8001aa2 <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <pid_calculate_pitch+0xd0>)
 8001a9e:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <pid_calculate_pitch+0xd0>)
 8001aa4:	ed93 0a00 	vldr	s0, [r3]
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	2000027c 	.word	0x2000027c
 8001ab0:	20000044 	.word	0x20000044
 8001ab4:	20000450 	.word	0x20000450
 8001ab8:	20000040 	.word	0x20000040
 8001abc:	3b012912 	.word	0x3b012912
 8001ac0:	20000454 	.word	0x20000454
 8001ac4:	20000280 	.word	0x20000280
 8001ac8:	2000003c 	.word	0x2000003c
 8001acc:	20000448 	.word	0x20000448
 8001ad0:	20000284 	.word	0x20000284
 8001ad4:	20000048 	.word	0x20000048

08001ad8 <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <reset_pid_pitch+0x14>)
 8001adc:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <reset_pid_pitch+0x18>)
 8001ae0:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <reset_pid_pitch+0x1c>)
 8001ae4:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <reset_pid_pitch+0x20>)
 8001ae8:	6013      	str	r3, [r2, #0]

}
 8001aea:	4770      	bx	lr
 8001aec:	20000450 	.word	0x20000450
 8001af0:	20000454 	.word	0x20000454
 8001af4:	20000448 	.word	0x20000448
 8001af8:	20000284 	.word	0x20000284

08001afc <reset_pid_yaw>:
	return yaw_output;
}

void reset_pid_yaw(){

	yaw_p = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <reset_pid_yaw+0x14>)
 8001b00:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <reset_pid_yaw+0x18>)
 8001b04:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <reset_pid_yaw+0x1c>)
 8001b08:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <reset_pid_yaw+0x20>)
 8001b0c:	6013      	str	r3, [r2, #0]

}
 8001b0e:	4770      	bx	lr
 8001b10:	20000460 	.word	0x20000460
 8001b14:	2000045c 	.word	0x2000045c
 8001b18:	2000044c 	.word	0x2000044c
 8001b1c:	20000294 	.word	0x20000294

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b510      	push	{r4, lr}
 8001b22:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_InitTick+0x40>)
 8001b26:	7818      	ldrb	r0, [r3, #0]
 8001b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b30:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <HAL_InitTick+0x44>)
 8001b32:	6810      	ldr	r0, [r2, #0]
 8001b34:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b38:	f000 fa30 	bl	8001f9c <HAL_SYSTICK_Config>
 8001b3c:	b968      	cbnz	r0, 8001b5a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	2c0f      	cmp	r4, #15
 8001b40:	d901      	bls.n	8001b46 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001b42:	2001      	movs	r0, #1
 8001b44:	e00a      	b.n	8001b5c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b46:	2200      	movs	r2, #0
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b4e:	f000 f9e3 	bl	8001f18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_InitTick+0x48>)
 8001b54:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2000      	movs	r0, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001b5a:	2001      	movs	r0, #1
}
 8001b5c:	bd10      	pop	{r4, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000005c 	.word	0x2000005c
 8001b64:	20000064 	.word	0x20000064
 8001b68:	20000060 	.word	0x20000060

08001b6c <HAL_Init>:
{
 8001b6c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_Init+0x30>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b7e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b86:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 f9b3 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff ffc6 	bl	8001b20 <HAL_InitTick>
  HAL_MspInit();
 8001b94:	f002 f9f8 	bl	8003f88 <HAL_MspInit>
}
 8001b98:	2000      	movs	r0, #0
 8001b9a:	bd08      	pop	{r3, pc}
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ba0:	4a03      	ldr	r2, [pc, #12]	; (8001bb0 <HAL_IncTick+0x10>)
 8001ba2:	6811      	ldr	r1, [r2, #0]
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_IncTick+0x14>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	440b      	add	r3, r1
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000468 	.word	0x20000468
 8001bb4:	2000005c 	.word	0x2000005c

08001bb8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001bb8:	4b01      	ldr	r3, [pc, #4]	; (8001bc0 <HAL_GetTick+0x8>)
 8001bba:	6818      	ldr	r0, [r3, #0]
}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000468 	.word	0x20000468

08001bc4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bc4:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <ADC_Init+0x12c>)
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001bcc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	6841      	ldr	r1, [r0, #4]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bd6:	6802      	ldr	r2, [r0, #0]
 8001bd8:	6853      	ldr	r3, [r2, #4]
 8001bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bde:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001be0:	6802      	ldr	r2, [r0, #0]
 8001be2:	6853      	ldr	r3, [r2, #4]
 8001be4:	6901      	ldr	r1, [r0, #16]
 8001be6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001bea:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bec:	6802      	ldr	r2, [r0, #0]
 8001bee:	6853      	ldr	r3, [r2, #4]
 8001bf0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001bf4:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bf6:	6802      	ldr	r2, [r0, #0]
 8001bf8:	6853      	ldr	r3, [r2, #4]
 8001bfa:	6881      	ldr	r1, [r0, #8]
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c00:	6802      	ldr	r2, [r0, #0]
 8001c02:	6893      	ldr	r3, [r2, #8]
 8001c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c08:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c0a:	6802      	ldr	r2, [r0, #0]
 8001c0c:	6893      	ldr	r3, [r2, #8]
 8001c0e:	68c1      	ldr	r1, [r0, #12]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c14:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001c16:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <ADC_Init+0x130>)
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d04b      	beq.n	8001cb4 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c1c:	6802      	ldr	r2, [r0, #0]
 8001c1e:	6893      	ldr	r3, [r2, #8]
 8001c20:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001c24:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c26:	6802      	ldr	r2, [r0, #0]
 8001c28:	6893      	ldr	r3, [r2, #8]
 8001c2a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c30:	6802      	ldr	r2, [r0, #0]
 8001c32:	6893      	ldr	r3, [r2, #8]
 8001c34:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001c38:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c3a:	6802      	ldr	r2, [r0, #0]
 8001c3c:	6893      	ldr	r3, [r2, #8]
 8001c3e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c44:	6802      	ldr	r2, [r0, #0]
 8001c46:	6893      	ldr	r3, [r2, #8]
 8001c48:	f023 0302 	bic.w	r3, r3, #2
 8001c4c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c4e:	6802      	ldr	r2, [r0, #0]
 8001c50:	6893      	ldr	r3, [r2, #8]
 8001c52:	7e01      	ldrb	r1, [r0, #24]
 8001c54:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001c58:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c5a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d133      	bne.n	8001cca <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c62:	6802      	ldr	r2, [r0, #0]
 8001c64:	6853      	ldr	r3, [r2, #4]
 8001c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c6a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c6c:	6802      	ldr	r2, [r0, #0]
 8001c6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001c74:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c76:	6801      	ldr	r1, [r0, #0]
 8001c78:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001c7a:	69c2      	ldr	r2, [r0, #28]
 8001c7c:	3a01      	subs	r2, #1
 8001c7e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001c82:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c84:	6802      	ldr	r2, [r0, #0]
 8001c86:	6893      	ldr	r3, [r2, #8]
 8001c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c8c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c8e:	6802      	ldr	r2, [r0, #0]
 8001c90:	6893      	ldr	r3, [r2, #8]
 8001c92:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001c96:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001c9a:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c9c:	6802      	ldr	r2, [r0, #0]
 8001c9e:	6893      	ldr	r3, [r2, #8]
 8001ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ca4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca6:	6802      	ldr	r2, [r0, #0]
 8001ca8:	6893      	ldr	r3, [r2, #8]
 8001caa:	6941      	ldr	r1, [r0, #20]
 8001cac:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001cb0:	6093      	str	r3, [r2, #8]
}
 8001cb2:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb4:	6802      	ldr	r2, [r0, #0]
 8001cb6:	6893      	ldr	r3, [r2, #8]
 8001cb8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001cbc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cbe:	6802      	ldr	r2, [r0, #0]
 8001cc0:	6893      	ldr	r3, [r2, #8]
 8001cc2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001cc6:	6093      	str	r3, [r2, #8]
 8001cc8:	e7bc      	b.n	8001c44 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cca:	6802      	ldr	r2, [r0, #0]
 8001ccc:	6853      	ldr	r3, [r2, #4]
 8001cce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd2:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cd4:	6802      	ldr	r2, [r0, #0]
 8001cd6:	6853      	ldr	r3, [r2, #4]
 8001cd8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001cdc:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cde:	6801      	ldr	r1, [r0, #0]
 8001ce0:	684b      	ldr	r3, [r1, #4]
 8001ce2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001cea:	604b      	str	r3, [r1, #4]
 8001cec:	e7be      	b.n	8001c6c <ADC_Init+0xa8>
 8001cee:	bf00      	nop
 8001cf0:	40012300 	.word	0x40012300
 8001cf4:	0f000001 	.word	0x0f000001

08001cf8 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001cf8:	b338      	cbz	r0, 8001d4a <HAL_ADC_Init+0x52>
{
 8001cfa:	b510      	push	{r4, lr}
 8001cfc:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d00:	b143      	cbz	r3, 8001d14 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d04:	f013 0f10 	tst.w	r3, #16
 8001d08:	d00b      	beq.n	8001d22 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001d0a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001d12:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001d14:	f002 f954 	bl	8003fc0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001d1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001d20:	e7ef      	b.n	8001d02 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d28:	f023 0302 	bic.w	r3, r3, #2
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff ff46 	bl	8001bc4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6423      	str	r3, [r4, #64]	; 0x40
 8001d48:	e7e0      	b.n	8001d0c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
}
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_ADC_ConfigChannel>:
{
 8001d50:	b430      	push	{r4, r5}
 8001d52:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001d58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	f000 80bd 	beq.w	8001edc <HAL_ADC_ConfigChannel+0x18c>
 8001d62:	2301      	movs	r3, #1
 8001d64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d68:	680b      	ldr	r3, [r1, #0]
 8001d6a:	2b09      	cmp	r3, #9
 8001d6c:	d93e      	bls.n	8001dec <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d6e:	6805      	ldr	r5, [r0, #0]
 8001d70:	68ea      	ldr	r2, [r5, #12]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d78:	3b1e      	subs	r3, #30
 8001d7a:	2407      	movs	r4, #7
 8001d7c:	fa04 f303 	lsl.w	r3, r4, r3
 8001d80:	ea22 0303 	bic.w	r3, r2, r3
 8001d84:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d86:	6805      	ldr	r5, [r0, #0]
 8001d88:	68ea      	ldr	r2, [r5, #12]
 8001d8a:	688c      	ldr	r4, [r1, #8]
 8001d8c:	880b      	ldrh	r3, [r1, #0]
 8001d8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d92:	3b1e      	subs	r3, #30
 8001d94:	fa04 f303 	lsl.w	r3, r4, r3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8001d9c:	684b      	ldr	r3, [r1, #4]
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d83a      	bhi.n	8001e18 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001da2:	6805      	ldr	r5, [r0, #0]
 8001da4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001da6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001daa:	3b05      	subs	r3, #5
 8001dac:	241f      	movs	r4, #31
 8001dae:	fa04 f303 	lsl.w	r3, r4, r3
 8001db2:	ea22 0303 	bic.w	r3, r2, r3
 8001db6:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001db8:	6805      	ldr	r5, [r0, #0]
 8001dba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001dbc:	684b      	ldr	r3, [r1, #4]
 8001dbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001dc2:	3b05      	subs	r3, #5
 8001dc4:	880c      	ldrh	r4, [r1, #0]
 8001dc6:	fa04 f303 	lsl.w	r3, r4, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dce:	6802      	ldr	r2, [r0, #0]
 8001dd0:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_ADC_ConfigChannel+0x190>)
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d050      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dd6:	6802      	ldr	r2, [r0, #0]
 8001dd8:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_ADC_ConfigChannel+0x190>)
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d059      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8001dde:	2300      	movs	r3, #0
 8001de0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001de4:	4618      	mov	r0, r3
}
 8001de6:	b002      	add	sp, #8
 8001de8:	bc30      	pop	{r4, r5}
 8001dea:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dec:	6805      	ldr	r5, [r0, #0]
 8001dee:	692a      	ldr	r2, [r5, #16]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001df6:	2407      	movs	r4, #7
 8001df8:	fa04 f303 	lsl.w	r3, r4, r3
 8001dfc:	ea22 0303 	bic.w	r3, r2, r3
 8001e00:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e02:	6805      	ldr	r5, [r0, #0]
 8001e04:	692a      	ldr	r2, [r5, #16]
 8001e06:	688c      	ldr	r4, [r1, #8]
 8001e08:	880b      	ldrh	r3, [r1, #0]
 8001e0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e0e:	fa04 f303 	lsl.w	r3, r4, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	612b      	str	r3, [r5, #16]
 8001e16:	e7c1      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8001e18:	2b0c      	cmp	r3, #12
 8001e1a:	d816      	bhi.n	8001e4a <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e1c:	6805      	ldr	r5, [r0, #0]
 8001e1e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001e20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e24:	3b23      	subs	r3, #35	; 0x23
 8001e26:	241f      	movs	r4, #31
 8001e28:	fa04 f303 	lsl.w	r3, r4, r3
 8001e2c:	ea22 0303 	bic.w	r3, r2, r3
 8001e30:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e32:	6805      	ldr	r5, [r0, #0]
 8001e34:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001e36:	684b      	ldr	r3, [r1, #4]
 8001e38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e3c:	3b23      	subs	r3, #35	; 0x23
 8001e3e:	880c      	ldrh	r4, [r1, #0]
 8001e40:	fa04 f303 	lsl.w	r3, r4, r3
 8001e44:	4313      	orrs	r3, r2
 8001e46:	632b      	str	r3, [r5, #48]	; 0x30
 8001e48:	e7c1      	b.n	8001dce <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e4a:	6805      	ldr	r5, [r0, #0]
 8001e4c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001e4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e52:	3b41      	subs	r3, #65	; 0x41
 8001e54:	241f      	movs	r4, #31
 8001e56:	fa04 f303 	lsl.w	r3, r4, r3
 8001e5a:	ea22 0303 	bic.w	r3, r2, r3
 8001e5e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e60:	6805      	ldr	r5, [r0, #0]
 8001e62:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001e64:	684b      	ldr	r3, [r1, #4]
 8001e66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e6a:	3b41      	subs	r3, #65	; 0x41
 8001e6c:	880c      	ldrh	r4, [r1, #0]
 8001e6e:	fa04 f303 	lsl.w	r3, r4, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001e76:	e7aa      	b.n	8001dce <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e78:	680b      	ldr	r3, [r1, #0]
 8001e7a:	2b12      	cmp	r3, #18
 8001e7c:	d1ab      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_ADC_ConfigChannel+0x194>)
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001e86:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	e7a1      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e92:	680b      	ldr	r3, [r1, #0]
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_ADC_ConfigChannel+0x198>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d001      	beq.n	8001e9e <HAL_ADC_ConfigChannel+0x14e>
 8001e9a:	2b11      	cmp	r3, #17
 8001e9c:	d19f      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_ADC_ConfigChannel+0x194>)
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001ea6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001eae:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001eb0:	680a      	ldr	r2, [r1, #0]
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_ADC_ConfigChannel+0x198>)
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d192      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_ADC_ConfigChannel+0x19c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <HAL_ADC_ConfigChannel+0x1a0>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0c9b      	lsrs	r3, r3, #18
 8001ec4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ec8:	005a      	lsls	r2, r3, #1
 8001eca:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8001ecc:	e002      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 8001ece:	9b01      	ldr	r3, [sp, #4]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001ed4:	9b01      	ldr	r3, [sp, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f9      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x17e>
 8001eda:	e780      	b.n	8001dde <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8001edc:	2002      	movs	r0, #2
 8001ede:	e782      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x96>
 8001ee0:	40012000 	.word	0x40012000
 8001ee4:	40012300 	.word	0x40012300
 8001ee8:	10000012 	.word	0x10000012
 8001eec:	20000064 	.word	0x20000064
 8001ef0:	431bde83 	.word	0x431bde83

08001ef4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ef6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001efc:	041b      	lsls	r3, r3, #16
 8001efe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f00:	0200      	lsls	r0, r0, #8
 8001f02:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f06:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001f08:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001f0c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f10:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f18:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_NVIC_SetPriority+0x60>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f22:	f1c3 0407 	rsb	r4, r3, #7
 8001f26:	2c04      	cmp	r4, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2c:	1d1d      	adds	r5, r3, #4
 8001f2e:	2d06      	cmp	r5, #6
 8001f30:	d918      	bls.n	8001f64 <HAL_NVIC_SetPriority+0x4c>
 8001f32:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001f38:	fa05 f404 	lsl.w	r4, r5, r4
 8001f3c:	ea21 0104 	bic.w	r1, r1, r4
 8001f40:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f42:	fa05 f303 	lsl.w	r3, r5, r3
 8001f46:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	db0b      	blt.n	8001f68 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	0109      	lsls	r1, r1, #4
 8001f52:	b2c9      	uxtb	r1, r1
 8001f54:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f58:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f5c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f60:	bc30      	pop	{r4, r5}
 8001f62:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f64:	2300      	movs	r3, #0
 8001f66:	e7e5      	b.n	8001f34 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	f000 000f 	and.w	r0, r0, #15
 8001f6c:	0109      	lsls	r1, r1, #4
 8001f6e:	b2c9      	uxtb	r1, r1
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <HAL_NVIC_SetPriority+0x64>)
 8001f72:	5419      	strb	r1, [r3, r0]
 8001f74:	e7f4      	b.n	8001f60 <HAL_NVIC_SetPriority+0x48>
 8001f76:	bf00      	nop
 8001f78:	e000ed00 	.word	0xe000ed00
 8001f7c:	e000ed14 	.word	0xe000ed14

08001f80 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f80:	2800      	cmp	r0, #0
 8001f82:	db07      	blt.n	8001f94 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f84:	f000 021f 	and.w	r2, r0, #31
 8001f88:	0940      	lsrs	r0, r0, #5
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	4a02      	ldr	r2, [pc, #8]	; (8001f98 <HAL_NVIC_EnableIRQ+0x18>)
 8001f90:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	3801      	subs	r0, #1
 8001f9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001fa2:	d20a      	bcs.n	8001fba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_SYSTICK_Config+0x24>)
 8001fa6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <HAL_SYSTICK_Config+0x28>)
 8001faa:	21f0      	movs	r1, #240	; 0xf0
 8001fac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001fba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2b0f      	cmp	r3, #15
 8001fcc:	f200 80c5 	bhi.w	800215a <HAL_GPIO_Init+0x192>
{
 8001fd0:	b4f0      	push	{r4, r5, r6, r7}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	e039      	b.n	800204a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	e000      	b.n	8001fdc <HAL_GPIO_Init+0x14>
 8001fda:	2200      	movs	r2, #0
 8001fdc:	40b2      	lsls	r2, r6
 8001fde:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe0:	3402      	adds	r4, #2
 8001fe2:	4e5e      	ldr	r6, [pc, #376]	; (800215c <HAL_GPIO_Init+0x194>)
 8001fe4:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe8:	4a5d      	ldr	r2, [pc, #372]	; (8002160 <HAL_GPIO_Init+0x198>)
 8001fea:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	43ea      	mvns	r2, r5
 8001fee:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff2:	684f      	ldr	r7, [r1, #4]
 8001ff4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001ff8:	d001      	beq.n	8001ffe <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001ffa:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001ffe:	4c58      	ldr	r4, [pc, #352]	; (8002160 <HAL_GPIO_Init+0x198>)
 8002000:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002002:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002004:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002008:	684f      	ldr	r7, [r1, #4]
 800200a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800200e:	d001      	beq.n	8002014 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002010:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002014:	4c52      	ldr	r4, [pc, #328]	; (8002160 <HAL_GPIO_Init+0x198>)
 8002016:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002018:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800201a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800201e:	684f      	ldr	r7, [r1, #4]
 8002020:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002024:	d001      	beq.n	800202a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002026:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800202a:	4c4d      	ldr	r4, [pc, #308]	; (8002160 <HAL_GPIO_Init+0x198>)
 800202c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800202e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002030:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002032:	684e      	ldr	r6, [r1, #4]
 8002034:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002038:	d001      	beq.n	800203e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800203a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800203e:	4c48      	ldr	r4, [pc, #288]	; (8002160 <HAL_GPIO_Init+0x198>)
 8002040:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	3301      	adds	r3, #1
 8002044:	2b0f      	cmp	r3, #15
 8002046:	f200 8085 	bhi.w	8002154 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 800204a:	2201      	movs	r2, #1
 800204c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	680c      	ldr	r4, [r1, #0]
 8002050:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002054:	42aa      	cmp	r2, r5
 8002056:	d1f4      	bne.n	8002042 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002058:	684c      	ldr	r4, [r1, #4]
 800205a:	2c02      	cmp	r4, #2
 800205c:	d001      	beq.n	8002062 <HAL_GPIO_Init+0x9a>
 800205e:	2c12      	cmp	r4, #18
 8002060:	d110      	bne.n	8002084 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8002062:	08de      	lsrs	r6, r3, #3
 8002064:	3608      	adds	r6, #8
 8002066:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206a:	f003 0407 	and.w	r4, r3, #7
 800206e:	00a7      	lsls	r7, r4, #2
 8002070:	240f      	movs	r4, #15
 8002072:	40bc      	lsls	r4, r7
 8002074:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002078:	690c      	ldr	r4, [r1, #16]
 800207a:	40bc      	lsls	r4, r7
 800207c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8002080:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002084:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	005f      	lsls	r7, r3, #1
 8002088:	2603      	movs	r6, #3
 800208a:	40be      	lsls	r6, r7
 800208c:	43f6      	mvns	r6, r6
 800208e:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002092:	684c      	ldr	r4, [r1, #4]
 8002094:	f004 0403 	and.w	r4, r4, #3
 8002098:	40bc      	lsls	r4, r7
 800209a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800209e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020a0:	684c      	ldr	r4, [r1, #4]
 80020a2:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80020a6:	f1bc 0f01 	cmp.w	ip, #1
 80020aa:	d903      	bls.n	80020b4 <HAL_GPIO_Init+0xec>
 80020ac:	2c11      	cmp	r4, #17
 80020ae:	d001      	beq.n	80020b4 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b0:	2c12      	cmp	r4, #18
 80020b2:	d110      	bne.n	80020d6 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 80020b4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b6:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ba:	68cc      	ldr	r4, [r1, #12]
 80020bc:	40bc      	lsls	r4, r7
 80020be:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 80020c2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80020c4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c6:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020ca:	684c      	ldr	r4, [r1, #4]
 80020cc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80020d0:	409c      	lsls	r4, r3
 80020d2:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80020d4:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80020d6:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d8:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020da:	688a      	ldr	r2, [r1, #8]
 80020dc:	40ba      	lsls	r2, r7
 80020de:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80020e0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e2:	684a      	ldr	r2, [r1, #4]
 80020e4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80020e8:	d0ab      	beq.n	8002042 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	2200      	movs	r2, #0
 80020ec:	9201      	str	r2, [sp, #4]
 80020ee:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_GPIO_Init+0x19c>)
 80020f0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80020f2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80020f6:	6454      	str	r4, [r2, #68]	; 0x44
 80020f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80020fe:	9201      	str	r2, [sp, #4]
 8002100:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002102:	089c      	lsrs	r4, r3, #2
 8002104:	1ca6      	adds	r6, r4, #2
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <HAL_GPIO_Init+0x194>)
 8002108:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	0096      	lsls	r6, r2, #2
 8002112:	220f      	movs	r2, #15
 8002114:	40b2      	lsls	r2, r6
 8002116:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <HAL_GPIO_Init+0x1a0>)
 800211c:	4290      	cmp	r0, r2
 800211e:	f43f af5c 	beq.w	8001fda <HAL_GPIO_Init+0x12>
 8002122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002126:	4290      	cmp	r0, r2
 8002128:	d00e      	beq.n	8002148 <HAL_GPIO_Init+0x180>
 800212a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800212e:	4290      	cmp	r0, r2
 8002130:	d00c      	beq.n	800214c <HAL_GPIO_Init+0x184>
 8002132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002136:	4290      	cmp	r0, r2
 8002138:	d00a      	beq.n	8002150 <HAL_GPIO_Init+0x188>
 800213a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800213e:	4290      	cmp	r0, r2
 8002140:	f43f af49 	beq.w	8001fd6 <HAL_GPIO_Init+0xe>
 8002144:	2207      	movs	r2, #7
 8002146:	e749      	b.n	8001fdc <HAL_GPIO_Init+0x14>
 8002148:	2201      	movs	r2, #1
 800214a:	e747      	b.n	8001fdc <HAL_GPIO_Init+0x14>
 800214c:	2202      	movs	r2, #2
 800214e:	e745      	b.n	8001fdc <HAL_GPIO_Init+0x14>
 8002150:	2203      	movs	r2, #3
 8002152:	e743      	b.n	8001fdc <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002154:	b002      	add	sp, #8
 8002156:	bcf0      	pop	{r4, r5, r6, r7}
 8002158:	4770      	bx	lr
 800215a:	4770      	bx	lr
 800215c:	40013800 	.word	0x40013800
 8002160:	40013c00 	.word	0x40013c00
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000

0800216c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	b912      	cbnz	r2, 8002174 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	0409      	lsls	r1, r1, #16
 8002170:	6181      	str	r1, [r0, #24]
  }
}
 8002172:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002174:	6181      	str	r1, [r0, #24]
 8002176:	4770      	bx	lr

08002178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002178:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	4203      	tst	r3, r0
 8002180:	d100      	bne.n	8002184 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002182:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002184:	4b02      	ldr	r3, [pc, #8]	; (8002190 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002186:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002188:	f001 fef0 	bl	8003f6c <HAL_GPIO_EXTI_Callback>
}
 800218c:	e7f9      	b.n	8002182 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800218e:	bf00      	nop
 8002190:	40013c00 	.word	0x40013c00

08002194 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002194:	6803      	ldr	r3, [r0, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800219c:	d011      	beq.n	80021c2 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021a8:	2220      	movs	r2, #32
 80021aa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ae:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80021b4:	f042 0204 	orr.w	r2, r2, #4
 80021b8:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80021be:	2001      	movs	r0, #1
 80021c0:	4770      	bx	lr
  }
  return HAL_OK;
 80021c2:	2000      	movs	r0, #0
}
 80021c4:	4770      	bx	lr

080021c6 <I2C_WaitOnFlagUntilTimeout>:
{
 80021c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c8:	4606      	mov	r6, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	4617      	mov	r7, r2
 80021ce:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d0:	e022      	b.n	8002218 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d2:	f7ff fcf1 	bl	8001bb8 <HAL_GetTick>
 80021d6:	9b06      	ldr	r3, [sp, #24]
 80021d8:	1ac0      	subs	r0, r0, r3
 80021da:	42a8      	cmp	r0, r5
 80021dc:	d800      	bhi.n	80021e0 <I2C_WaitOnFlagUntilTimeout+0x1a>
 80021de:	b9dd      	cbnz	r5, 8002218 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021e4:	2220      	movs	r2, #32
 80021e6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021ea:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021ee:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80021f0:	f042 0220 	orr.w	r2, r2, #32
 80021f4:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80021f6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80021fa:	2001      	movs	r0, #1
 80021fc:	e01a      	b.n	8002234 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021fe:	6833      	ldr	r3, [r6, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	ea24 0303 	bic.w	r3, r4, r3
 8002206:	b29b      	uxth	r3, r3
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	429f      	cmp	r7, r3
 8002210:	d10f      	bne.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002212:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002216:	d1dc      	bne.n	80021d2 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002218:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800221c:	2b01      	cmp	r3, #1
 800221e:	d0ee      	beq.n	80021fe <I2C_WaitOnFlagUntilTimeout+0x38>
 8002220:	6833      	ldr	r3, [r6, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	ea24 0303 	bic.w	r3, r4, r3
 8002228:	b29b      	uxth	r3, r3
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	e7ed      	b.n	800220e <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8002232:	2000      	movs	r0, #0
}
 8002234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002236 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002238:	4604      	mov	r4, r0
 800223a:	460d      	mov	r5, r1
 800223c:	4616      	mov	r6, r2
 800223e:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002240:	e03c      	b.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002248:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002250:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002252:	2300      	movs	r3, #0
 8002254:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002256:	2220      	movs	r2, #32
 8002258:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800225c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002260:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002262:	f042 0204 	orr.w	r2, r2, #4
 8002266:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002268:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800226c:	2001      	movs	r0, #1
 800226e:	e033      	b.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002270:	f7ff fca2 	bl	8001bb8 <HAL_GetTick>
 8002274:	1bc0      	subs	r0, r0, r7
 8002276:	42b0      	cmp	r0, r6
 8002278:	d800      	bhi.n	800227c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 800227a:	b9fe      	cbnz	r6, 80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800227c:	2300      	movs	r3, #0
 800227e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002280:	2220      	movs	r2, #32
 8002282:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002286:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800228a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800228c:	f042 0220 	orr.w	r2, r2, #32
 8002290:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002292:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002296:	2001      	movs	r0, #1
 8002298:	e01e      	b.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	ea25 0303 	bic.w	r3, r5, r3
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3300      	adds	r3, #0
 80022a6:	bf18      	it	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	b1a3      	cbz	r3, 80022d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80022b4:	d1c5      	bne.n	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80022ba:	d1d9      	bne.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022bc:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d0ea      	beq.n	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	ea25 0303 	bic.w	r3, r5, r3
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3300      	adds	r3, #0
 80022d0:	bf18      	it	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	e7e9      	b.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80022d6:	2000      	movs	r0, #0
}
 80022d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022dc <I2C_MasterRequestWrite>:
{
 80022dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022de:	b083      	sub	sp, #12
 80022e0:	4604      	mov	r4, r0
 80022e2:	460f      	mov	r7, r1
 80022e4:	4615      	mov	r5, r2
 80022e6:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d00d      	beq.n	800230a <I2C_MasterRequestWrite+0x2e>
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d00b      	beq.n	800230a <I2C_MasterRequestWrite+0x2e>
 80022f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022f6:	d008      	beq.n	800230a <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	d10a      	bne.n	8002314 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022fe:	6802      	ldr	r2, [r0, #0]
 8002300:	6813      	ldr	r3, [r2, #0]
 8002302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	e004      	b.n	8002314 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800230a:	6822      	ldr	r2, [r4, #0]
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002312:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002314:	9600      	str	r6, [sp, #0]
 8002316:	462b      	mov	r3, r5
 8002318:	2200      	movs	r2, #0
 800231a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800231e:	4620      	mov	r0, r4
 8002320:	f7ff ff51 	bl	80021c6 <I2C_WaitOnFlagUntilTimeout>
 8002324:	bb18      	cbnz	r0, 800236e <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002326:	6923      	ldr	r3, [r4, #16]
 8002328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800232c:	d10d      	bne.n	800234a <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002334:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002336:	4633      	mov	r3, r6
 8002338:	462a      	mov	r2, r5
 800233a:	4910      	ldr	r1, [pc, #64]	; (800237c <I2C_MasterRequestWrite+0xa0>)
 800233c:	4620      	mov	r0, r4
 800233e:	f7ff ff7a 	bl	8002236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	b1a0      	cbz	r0, 8002370 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e012      	b.n	8002370 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800234a:	11fb      	asrs	r3, r7, #7
 800234c:	6822      	ldr	r2, [r4, #0]
 800234e:	f003 0306 	and.w	r3, r3, #6
 8002352:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002356:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002358:	4633      	mov	r3, r6
 800235a:	462a      	mov	r2, r5
 800235c:	4908      	ldr	r1, [pc, #32]	; (8002380 <I2C_MasterRequestWrite+0xa4>)
 800235e:	4620      	mov	r0, r4
 8002360:	f7ff ff69 	bl	8002236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002364:	b938      	cbnz	r0, 8002376 <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	b2ff      	uxtb	r7, r7
 800236a:	611f      	str	r7, [r3, #16]
 800236c:	e7e3      	b.n	8002336 <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	b003      	add	sp, #12
 8002374:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e7fa      	b.n	8002370 <I2C_MasterRequestWrite+0x94>
 800237a:	bf00      	nop
 800237c:	00010002 	.word	0x00010002
 8002380:	00010008 	.word	0x00010008

08002384 <I2C_MasterRequestRead>:
{
 8002384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	4604      	mov	r4, r0
 800238c:	460d      	mov	r5, r1
 800238e:	4616      	mov	r6, r2
 8002390:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002392:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002394:	6801      	ldr	r1, [r0, #0]
 8002396:	680b      	ldr	r3, [r1, #0]
 8002398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239c:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800239e:	2a08      	cmp	r2, #8
 80023a0:	d00d      	beq.n	80023be <I2C_MasterRequestRead+0x3a>
 80023a2:	2a01      	cmp	r2, #1
 80023a4:	d00b      	beq.n	80023be <I2C_MasterRequestRead+0x3a>
 80023a6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80023aa:	d008      	beq.n	80023be <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80023ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023ae:	2b11      	cmp	r3, #17
 80023b0:	d10a      	bne.n	80023c8 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023b2:	6802      	ldr	r2, [r0, #0]
 80023b4:	6813      	ldr	r3, [r2, #0]
 80023b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e004      	b.n	80023c8 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023be:	6822      	ldr	r2, [r4, #0]
 80023c0:	6813      	ldr	r3, [r2, #0]
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023c8:	9700      	str	r7, [sp, #0]
 80023ca:	4633      	mov	r3, r6
 80023cc:	2200      	movs	r2, #0
 80023ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023d2:	4620      	mov	r0, r4
 80023d4:	f7ff fef7 	bl	80021c6 <I2C_WaitOnFlagUntilTimeout>
 80023d8:	2800      	cmp	r0, #0
 80023da:	d149      	bne.n	8002470 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023dc:	6923      	ldr	r3, [r4, #16]
 80023de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023e2:	d10f      	bne.n	8002404 <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	f045 0501 	orr.w	r5, r5, #1
 80023ea:	b2ed      	uxtb	r5, r5
 80023ec:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ee:	463b      	mov	r3, r7
 80023f0:	4632      	mov	r2, r6
 80023f2:	4923      	ldr	r1, [pc, #140]	; (8002480 <I2C_MasterRequestRead+0xfc>)
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7ff ff1e 	bl	8002236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d038      	beq.n	8002472 <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e036      	b.n	8002472 <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002404:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8002408:	f008 0806 	and.w	r8, r8, #6
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002412:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002414:	463b      	mov	r3, r7
 8002416:	4632      	mov	r2, r6
 8002418:	491a      	ldr	r1, [pc, #104]	; (8002484 <I2C_MasterRequestRead+0x100>)
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff ff0b 	bl	8002236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002420:	b108      	cbz	r0, 8002426 <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e025      	b.n	8002472 <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	b2ed      	uxtb	r5, r5
 800242a:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800242c:	463b      	mov	r3, r7
 800242e:	4632      	mov	r2, r6
 8002430:	4913      	ldr	r1, [pc, #76]	; (8002480 <I2C_MasterRequestRead+0xfc>)
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff feff 	bl	8002236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002438:	b108      	cbz	r0, 800243e <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e019      	b.n	8002472 <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243e:	2200      	movs	r2, #0
 8002440:	9203      	str	r2, [sp, #12]
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	6959      	ldr	r1, [r3, #20]
 8002446:	9103      	str	r1, [sp, #12]
 8002448:	6999      	ldr	r1, [r3, #24]
 800244a:	9103      	str	r1, [sp, #12]
 800244c:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002454:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002456:	9700      	str	r7, [sp, #0]
 8002458:	4633      	mov	r3, r6
 800245a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800245e:	4620      	mov	r0, r4
 8002460:	f7ff feb1 	bl	80021c6 <I2C_WaitOnFlagUntilTimeout>
 8002464:	b948      	cbnz	r0, 800247a <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002466:	6822      	ldr	r2, [r4, #0]
 8002468:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800246c:	6113      	str	r3, [r2, #16]
 800246e:	e7be      	b.n	80023ee <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	b004      	add	sp, #16
 8002476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e7f9      	b.n	8002472 <I2C_MasterRequestRead+0xee>
 800247e:	bf00      	nop
 8002480:	00010002 	.word	0x00010002
 8002484:	00010008 	.word	0x00010008

08002488 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	4604      	mov	r4, r0
 800248c:	460d      	mov	r5, r1
 800248e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002498:	d11c      	bne.n	80024d4 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800249a:	4620      	mov	r0, r4
 800249c:	f7ff fe7a 	bl	8002194 <I2C_IsAcknowledgeFailed>
 80024a0:	b9d0      	cbnz	r0, 80024d8 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80024a2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80024a6:	d0f3      	beq.n	8002490 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a8:	f7ff fb86 	bl	8001bb8 <HAL_GetTick>
 80024ac:	1b80      	subs	r0, r0, r6
 80024ae:	42a8      	cmp	r0, r5
 80024b0:	d801      	bhi.n	80024b6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	d1ec      	bne.n	8002490 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024ba:	2220      	movs	r2, #32
 80024bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024c6:	f042 0220 	orr.w	r2, r2, #32
 80024ca:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80024cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80024d0:	2001      	movs	r0, #1
 80024d2:	e000      	b.n	80024d6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80024d4:	2000      	movs	r0, #0
}
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
 80024da:	e7fc      	b.n	80024d6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080024dc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	4604      	mov	r4, r0
 80024e0:	460d      	mov	r5, r1
 80024e2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f013 0f04 	tst.w	r3, #4
 80024ec:	d11c      	bne.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7ff fe50 	bl	8002194 <I2C_IsAcknowledgeFailed>
 80024f4:	b9d0      	cbnz	r0, 800252c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80024fa:	d0f3      	beq.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fc:	f7ff fb5c 	bl	8001bb8 <HAL_GetTick>
 8002500:	1b80      	subs	r0, r0, r6
 8002502:	42a8      	cmp	r0, r5
 8002504:	d801      	bhi.n	800250a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002506:	2d00      	cmp	r5, #0
 8002508:	d1ec      	bne.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800250a:	2300      	movs	r3, #0
 800250c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800250e:	2220      	movs	r2, #32
 8002510:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002514:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800251a:	f042 0220 	orr.w	r2, r2, #32
 800251e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002520:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002524:	2001      	movs	r0, #1
 8002526:	e000      	b.n	800252a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002528:	2000      	movs	r0, #0
}
 800252a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800252c:	2001      	movs	r0, #1
 800252e:	e7fc      	b.n	800252a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002530 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	4605      	mov	r5, r0
 8002534:	460c      	mov	r4, r1
 8002536:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002540:	d129      	bne.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	f012 0f10 	tst.w	r2, #16
 8002548:	d115      	bne.n	8002576 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7ff fb35 	bl	8001bb8 <HAL_GetTick>
 800254e:	1b80      	subs	r0, r0, r6
 8002550:	42a0      	cmp	r0, r4
 8002552:	d801      	bhi.n	8002558 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8002554:	2c00      	cmp	r4, #0
 8002556:	d1ef      	bne.n	8002538 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002558:	2300      	movs	r3, #0
 800255a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800255c:	2220      	movs	r2, #32
 800255e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002562:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002566:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002568:	f042 0220 	orr.w	r2, r2, #32
 800256c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800256e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002572:	2001      	movs	r0, #1
}
 8002574:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002576:	f06f 0210 	mvn.w	r2, #16
 800257a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800257c:	2300      	movs	r3, #0
 800257e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002580:	2220      	movs	r2, #32
 8002582:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002586:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800258a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800258c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800258e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002592:	2001      	movs	r0, #1
 8002594:	e7ee      	b.n	8002574 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8002596:	2000      	movs	r0, #0
 8002598:	e7ec      	b.n	8002574 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

0800259c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800259c:	2800      	cmp	r0, #0
 800259e:	f000 80be 	beq.w	800271e <HAL_I2C_Init+0x182>
{
 80025a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d06b      	beq.n	8002686 <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80025ae:	2324      	movs	r3, #36	; 0x24
 80025b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80025b4:	6822      	ldr	r2, [r4, #0]
 80025b6:	6813      	ldr	r3, [r2, #0]
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025be:	f000 fdc9 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025c2:	6862      	ldr	r2, [r4, #4]
 80025c4:	4b58      	ldr	r3, [pc, #352]	; (8002728 <HAL_I2C_Init+0x18c>)
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d862      	bhi.n	8002690 <HAL_I2C_Init+0xf4>
 80025ca:	4b58      	ldr	r3, [pc, #352]	; (800272c <HAL_I2C_Init+0x190>)
 80025cc:	4298      	cmp	r0, r3
 80025ce:	bf8c      	ite	hi
 80025d0:	2300      	movhi	r3, #0
 80025d2:	2301      	movls	r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 80a4 	bne.w	8002722 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 80025da:	4b55      	ldr	r3, [pc, #340]	; (8002730 <HAL_I2C_Init+0x194>)
 80025dc:	fba3 2300 	umull	r2, r3, r3, r0
 80025e0:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025e2:	6821      	ldr	r1, [r4, #0]
 80025e4:	684a      	ldr	r2, [r1, #4]
 80025e6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80025ea:	431a      	orrs	r2, r3
 80025ec:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ee:	6825      	ldr	r5, [r4, #0]
 80025f0:	6a2a      	ldr	r2, [r5, #32]
 80025f2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80025f6:	6866      	ldr	r6, [r4, #4]
 80025f8:	494b      	ldr	r1, [pc, #300]	; (8002728 <HAL_I2C_Init+0x18c>)
 80025fa:	428e      	cmp	r6, r1
 80025fc:	d84e      	bhi.n	800269c <HAL_I2C_Init+0x100>
 80025fe:	3301      	adds	r3, #1
 8002600:	4313      	orrs	r3, r2
 8002602:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002604:	6825      	ldr	r5, [r4, #0]
 8002606:	69e9      	ldr	r1, [r5, #28]
 8002608:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800260c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002610:	6863      	ldr	r3, [r4, #4]
 8002612:	4a45      	ldr	r2, [pc, #276]	; (8002728 <HAL_I2C_Init+0x18c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d84b      	bhi.n	80026b0 <HAL_I2C_Init+0x114>
 8002618:	3801      	subs	r0, #1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	2b04      	cmp	r3, #4
 8002628:	bf38      	it	cc
 800262a:	2304      	movcc	r3, #4
 800262c:	430b      	orrs	r3, r1
 800262e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002630:	6821      	ldr	r1, [r4, #0]
 8002632:	680b      	ldr	r3, [r1, #0]
 8002634:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002638:	69e2      	ldr	r2, [r4, #28]
 800263a:	6a20      	ldr	r0, [r4, #32]
 800263c:	4302      	orrs	r2, r0
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002642:	6821      	ldr	r1, [r4, #0]
 8002644:	688b      	ldr	r3, [r1, #8]
 8002646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800264a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800264e:	6922      	ldr	r2, [r4, #16]
 8002650:	68e0      	ldr	r0, [r4, #12]
 8002652:	4302      	orrs	r2, r0
 8002654:	4313      	orrs	r3, r2
 8002656:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002658:	6821      	ldr	r1, [r4, #0]
 800265a:	68cb      	ldr	r3, [r1, #12]
 800265c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002660:	6962      	ldr	r2, [r4, #20]
 8002662:	69a0      	ldr	r0, [r4, #24]
 8002664:	4302      	orrs	r2, r0
 8002666:	4313      	orrs	r3, r2
 8002668:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	6813      	ldr	r3, [r2, #0]
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002674:	2000      	movs	r0, #0
 8002676:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002678:	2320      	movs	r3, #32
 800267a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800267e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002680:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002686:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800268a:	f001 fccd 	bl	8004028 <HAL_I2C_MspInit>
 800268e:	e78e      	b.n	80025ae <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_I2C_Init+0x198>)
 8002692:	4298      	cmp	r0, r3
 8002694:	bf8c      	ite	hi
 8002696:	2300      	movhi	r3, #0
 8002698:	2301      	movls	r3, #1
 800269a:	e79b      	b.n	80025d4 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800269c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4924      	ldr	r1, [pc, #144]	; (8002738 <HAL_I2C_Init+0x19c>)
 80026a6:	fba1 1303 	umull	r1, r3, r1, r3
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	3301      	adds	r3, #1
 80026ae:	e7a7      	b.n	8002600 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b0:	68a2      	ldr	r2, [r4, #8]
 80026b2:	b9ba      	cbnz	r2, 80026e4 <HAL_I2C_Init+0x148>
 80026b4:	1e46      	subs	r6, r0, #1
 80026b6:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80026ba:	fbb6 f6f7 	udiv	r6, r6, r7
 80026be:	3601      	adds	r6, #1
 80026c0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80026c4:	fab6 f686 	clz	r6, r6
 80026c8:	0976      	lsrs	r6, r6, #5
 80026ca:	bb36      	cbnz	r6, 800271a <HAL_I2C_Init+0x17e>
 80026cc:	b9c2      	cbnz	r2, 8002700 <HAL_I2C_Init+0x164>
 80026ce:	3801      	subs	r0, #1
 80026d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80026de:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80026e2:	e7a3      	b.n	800262c <HAL_I2C_Init+0x90>
 80026e4:	1e46      	subs	r6, r0, #1
 80026e6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80026ea:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80026ee:	fbb6 f6f7 	udiv	r6, r6, r7
 80026f2:	3601      	adds	r6, #1
 80026f4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80026f8:	fab6 f686 	clz	r6, r6
 80026fc:	0976      	lsrs	r6, r6, #5
 80026fe:	e7e4      	b.n	80026ca <HAL_I2C_Init+0x12e>
 8002700:	3801      	subs	r0, #1
 8002702:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002706:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800270a:	fbb0 f2f3 	udiv	r2, r0, r3
 800270e:	3201      	adds	r2, #1
 8002710:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002714:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8002718:	e788      	b.n	800262c <HAL_I2C_Init+0x90>
 800271a:	2301      	movs	r3, #1
 800271c:	e786      	b.n	800262c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800271e:	2001      	movs	r0, #1
}
 8002720:	4770      	bx	lr
    return HAL_ERROR;
 8002722:	2001      	movs	r0, #1
 8002724:	e7ae      	b.n	8002684 <HAL_I2C_Init+0xe8>
 8002726:	bf00      	nop
 8002728:	000186a0 	.word	0x000186a0
 800272c:	001e847f 	.word	0x001e847f
 8002730:	431bde83 	.word	0x431bde83
 8002734:	003d08ff 	.word	0x003d08ff
 8002738:	10624dd3 	.word	0x10624dd3

0800273c <HAL_I2C_Master_Transmit>:
{
 800273c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	4604      	mov	r4, r0
 8002744:	460e      	mov	r6, r1
 8002746:	4690      	mov	r8, r2
 8002748:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800274a:	f7ff fa35 	bl	8001bb8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b20      	cmp	r3, #32
 8002756:	d004      	beq.n	8002762 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8002758:	2602      	movs	r6, #2
}
 800275a:	4630      	mov	r0, r6
 800275c:	b004      	add	sp, #16
 800275e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002762:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002764:	9000      	str	r0, [sp, #0]
 8002766:	2319      	movs	r3, #25
 8002768:	2201      	movs	r2, #1
 800276a:	494f      	ldr	r1, [pc, #316]	; (80028a8 <HAL_I2C_Master_Transmit+0x16c>)
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff fd2a 	bl	80021c6 <I2C_WaitOnFlagUntilTimeout>
 8002772:	2800      	cmp	r0, #0
 8002774:	f040 8091 	bne.w	800289a <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8002778:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	f000 808e 	beq.w	800289e <HAL_I2C_Master_Transmit+0x162>
 8002782:	2301      	movs	r3, #1
 8002784:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	f012 0f01 	tst.w	r2, #1
 8002790:	d103      	bne.n	800279a <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800279a:	6822      	ldr	r2, [r4, #0]
 800279c:	6813      	ldr	r3, [r2, #0]
 800279e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027a2:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027a4:	2321      	movs	r3, #33	; 0x21
 80027a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027aa:	2310      	movs	r3, #16
 80027ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80027b4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027b8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027bc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_I2C_Master_Transmit+0x170>)
 80027c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027c2:	462b      	mov	r3, r5
 80027c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027c6:	4631      	mov	r1, r6
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7ff fd87 	bl	80022dc <I2C_MasterRequestWrite>
 80027ce:	4606      	mov	r6, r0
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d166      	bne.n	80028a2 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d4:	2300      	movs	r3, #0
 80027d6:	9303      	str	r3, [sp, #12]
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	9203      	str	r2, [sp, #12]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	9303      	str	r3, [sp, #12]
 80027e2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80027e4:	e012      	b.n	800280c <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d001      	beq.n	80027f0 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80027ec:	2601      	movs	r6, #1
 80027ee:	e7b4      	b.n	800275a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	6822      	ldr	r2, [r4, #0]
 80027f2:	6813      	ldr	r3, [r2, #0]
 80027f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f8:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80027fa:	2601      	movs	r6, #1
 80027fc:	e7ad      	b.n	800275a <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fe:	462a      	mov	r2, r5
 8002800:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002802:	4620      	mov	r0, r4
 8002804:	f7ff fe6a 	bl	80024dc <I2C_WaitOnBTFFlagUntilTimeout>
 8002808:	2800      	cmp	r0, #0
 800280a:	d12c      	bne.n	8002866 <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 800280c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800280e:	2b00      	cmp	r3, #0
 8002810:	d035      	beq.n	800287e <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002812:	462a      	mov	r2, r5
 8002814:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff fe36 	bl	8002488 <I2C_WaitOnTXEFlagUntilTimeout>
 800281c:	2800      	cmp	r0, #0
 800281e:	d1e2      	bne.n	80027e6 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002820:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002828:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800282a:	1c4b      	adds	r3, r1, #1
 800282c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800282e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002830:	3b01      	subs	r3, #1
 8002832:	b29b      	uxth	r3, r3
 8002834:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002836:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	6950      	ldr	r0, [r2, #20]
 8002842:	f010 0f04 	tst.w	r0, #4
 8002846:	d0da      	beq.n	80027fe <HAL_I2C_Master_Transmit+0xc2>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0d8      	beq.n	80027fe <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800284c:	784b      	ldrb	r3, [r1, #1]
 800284e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8002850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002852:	3301      	adds	r3, #1
 8002854:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002856:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002858:	3b01      	subs	r3, #1
 800285a:	b29b      	uxth	r3, r3
 800285c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800285e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	8523      	strh	r3, [r4, #40]	; 0x28
 8002864:	e7cb      	b.n	80027fe <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002868:	2b04      	cmp	r3, #4
 800286a:	d001      	beq.n	8002870 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 800286c:	2601      	movs	r6, #1
 800286e:	e774      	b.n	800275a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	6822      	ldr	r2, [r4, #0]
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002878:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800287a:	2601      	movs	r6, #1
 800287c:	e76d      	b.n	800275a <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	6822      	ldr	r2, [r4, #0]
 8002880:	6813      	ldr	r3, [r2, #0]
 8002882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002886:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002888:	2320      	movs	r3, #32
 800288a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800288e:	2300      	movs	r3, #0
 8002890:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002894:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002898:	e75f      	b.n	800275a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 800289a:	2602      	movs	r6, #2
 800289c:	e75d      	b.n	800275a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800289e:	2602      	movs	r6, #2
 80028a0:	e75b      	b.n	800275a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 80028a2:	2601      	movs	r6, #1
 80028a4:	e759      	b.n	800275a <HAL_I2C_Master_Transmit+0x1e>
 80028a6:	bf00      	nop
 80028a8:	00100002 	.word	0x00100002
 80028ac:	ffff0000 	.word	0xffff0000

080028b0 <HAL_I2C_Master_Receive>:
{
 80028b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	4604      	mov	r4, r0
 80028b8:	460e      	mov	r6, r1
 80028ba:	4690      	mov	r8, r2
 80028bc:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80028be:	f7ff f97b 	bl	8001bb8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d004      	beq.n	80028d6 <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 80028cc:	2602      	movs	r6, #2
}
 80028ce:	4630      	mov	r0, r6
 80028d0:	b006      	add	sp, #24
 80028d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028d6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028d8:	9000      	str	r0, [sp, #0]
 80028da:	2319      	movs	r3, #25
 80028dc:	2201      	movs	r2, #1
 80028de:	499e      	ldr	r1, [pc, #632]	; (8002b58 <HAL_I2C_Master_Receive+0x2a8>)
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff fc70 	bl	80021c6 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	2800      	cmp	r0, #0
 80028e8:	f040 8134 	bne.w	8002b54 <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 80028ec:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	f000 8137 	beq.w	8002b64 <HAL_I2C_Master_Receive+0x2b4>
 80028f6:	2301      	movs	r3, #1
 80028f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f012 0f01 	tst.w	r2, #1
 8002904:	d103      	bne.n	800290e <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800290e:	6822      	ldr	r2, [r4, #0]
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002916:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002918:	2322      	movs	r3, #34	; 0x22
 800291a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800291e:	2310      	movs	r3, #16
 8002920:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002924:	2300      	movs	r3, #0
 8002926:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002928:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800292c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800292e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002930:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002932:	4b8a      	ldr	r3, [pc, #552]	; (8002b5c <HAL_I2C_Master_Receive+0x2ac>)
 8002934:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002936:	462b      	mov	r3, r5
 8002938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800293a:	4631      	mov	r1, r6
 800293c:	4620      	mov	r0, r4
 800293e:	f7ff fd21 	bl	8002384 <I2C_MasterRequestRead>
 8002942:	4606      	mov	r6, r0
 8002944:	2800      	cmp	r0, #0
 8002946:	f040 810f 	bne.w	8002b68 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 800294a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800294c:	b95b      	cbnz	r3, 8002966 <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	9202      	str	r2, [sp, #8]
 8002956:	699a      	ldr	r2, [r3, #24]
 8002958:	9202      	str	r2, [sp, #8]
 800295a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e077      	b.n	8002a56 <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 8002966:	2b01      	cmp	r3, #1
 8002968:	d00f      	beq.n	800298a <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 800296a:	2b02      	cmp	r3, #2
 800296c:	d01f      	beq.n	80029ae <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296e:	6822      	ldr	r2, [r4, #0]
 8002970:	6813      	ldr	r3, [r2, #0]
 8002972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002976:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002978:	2300      	movs	r3, #0
 800297a:	9305      	str	r3, [sp, #20]
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	9205      	str	r2, [sp, #20]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	9305      	str	r3, [sp, #20]
 8002986:	9b05      	ldr	r3, [sp, #20]
 8002988:	e065      	b.n	8002a56 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298a:	6822      	ldr	r2, [r4, #0]
 800298c:	6813      	ldr	r3, [r2, #0]
 800298e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002992:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002994:	2300      	movs	r3, #0
 8002996:	9303      	str	r3, [sp, #12]
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	9203      	str	r2, [sp, #12]
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	9203      	str	r2, [sp, #12]
 80029a2:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e053      	b.n	8002a56 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	6822      	ldr	r2, [r4, #0]
 80029b0:	6813      	ldr	r3, [r2, #0]
 80029b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029b6:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b8:	6822      	ldr	r2, [r4, #0]
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029c0:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c2:	2300      	movs	r3, #0
 80029c4:	9304      	str	r3, [sp, #16]
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	9204      	str	r2, [sp, #16]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	9304      	str	r3, [sp, #16]
 80029d0:	9b04      	ldr	r3, [sp, #16]
 80029d2:	e040      	b.n	8002a56 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d4:	462a      	mov	r2, r5
 80029d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff fda9 	bl	8002530 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029de:	2800      	cmp	r0, #0
 80029e0:	f040 80c4 	bne.w	8002b6c <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029ea:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80029ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029ee:	3301      	adds	r3, #1
 80029f0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80029f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80029f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002a00:	e029      	b.n	8002a56 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a02:	9500      	str	r5, [sp, #0]
 8002a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a06:	2200      	movs	r2, #0
 8002a08:	4955      	ldr	r1, [pc, #340]	; (8002b60 <HAL_I2C_Master_Receive+0x2b0>)
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f7ff fbdb 	bl	80021c6 <I2C_WaitOnFlagUntilTimeout>
 8002a10:	2800      	cmp	r0, #0
 8002a12:	f040 80ad 	bne.w	8002b70 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	6813      	ldr	r3, [r2, #0]
 8002a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a1e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a26:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002a28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a2a:	1c53      	adds	r3, r2, #1
 8002a2c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002a2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002a34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a44:	3301      	adds	r3, #1
 8002a46:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002a48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002a4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d072      	beq.n	8002b42 <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d849      	bhi.n	8002af4 <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d0b7      	beq.n	80029d4 <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d0cc      	beq.n	8002a02 <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a68:	9500      	str	r5, [sp, #0]
 8002a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	493c      	ldr	r1, [pc, #240]	; (8002b60 <HAL_I2C_Master_Receive+0x2b0>)
 8002a70:	4620      	mov	r0, r4
 8002a72:	f7ff fba8 	bl	80021c6 <I2C_WaitOnFlagUntilTimeout>
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d17c      	bne.n	8002b74 <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a82:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a8a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a8e:	3301      	adds	r3, #1
 8002a90:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002a92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a94:	3b01      	subs	r3, #1
 8002a96:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002a98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aa0:	9500      	str	r5, [sp, #0]
 8002aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	492e      	ldr	r1, [pc, #184]	; (8002b60 <HAL_I2C_Master_Receive+0x2b0>)
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7ff fb8c 	bl	80021c6 <I2C_WaitOnFlagUntilTimeout>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d162      	bne.n	8002b78 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	6813      	ldr	r3, [r2, #0]
 8002ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aba:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ac2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002ac4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ac6:	1c53      	adds	r3, r2, #1
 8002ac8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002aca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002acc:	3b01      	subs	r3, #1
 8002ace:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002ad0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002ae4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002aea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002af2:	e7b0      	b.n	8002a56 <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af4:	462a      	mov	r2, r5
 8002af6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002af8:	4620      	mov	r0, r4
 8002afa:	f7ff fd19 	bl	8002530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d13c      	bne.n	8002b7c <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b0c:	1c53      	adds	r3, r2, #1
 8002b0e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002b10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b12:	3b01      	subs	r3, #1
 8002b14:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002b16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	6959      	ldr	r1, [r3, #20]
 8002b22:	f011 0f04 	tst.w	r1, #4
 8002b26:	d096      	beq.n	8002a56 <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b2e:	3301      	adds	r3, #1
 8002b30:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002b32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002b40:	e789      	b.n	8002a56 <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	2320      	movs	r3, #32
 8002b44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002b4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002b52:	e6bc      	b.n	80028ce <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 8002b54:	2602      	movs	r6, #2
 8002b56:	e6ba      	b.n	80028ce <HAL_I2C_Master_Receive+0x1e>
 8002b58:	00100002 	.word	0x00100002
 8002b5c:	ffff0000 	.word	0xffff0000
 8002b60:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8002b64:	2602      	movs	r6, #2
 8002b66:	e6b2      	b.n	80028ce <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8002b68:	2601      	movs	r6, #1
 8002b6a:	e6b0      	b.n	80028ce <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8002b6c:	2601      	movs	r6, #1
 8002b6e:	e6ae      	b.n	80028ce <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8002b70:	2601      	movs	r6, #1
 8002b72:	e6ac      	b.n	80028ce <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8002b74:	2601      	movs	r6, #1
 8002b76:	e6aa      	b.n	80028ce <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8002b78:	2601      	movs	r6, #1
 8002b7a:	e6a8      	b.n	80028ce <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8002b7c:	2601      	movs	r6, #1
 8002b7e:	e6a6      	b.n	80028ce <HAL_I2C_Master_Receive+0x1e>

08002b80 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b80:	2800      	cmp	r0, #0
 8002b82:	f000 81bb 	beq.w	8002efc <HAL_RCC_OscConfig+0x37c>
{
 8002b86:	b570      	push	{r4, r5, r6, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8c:	6803      	ldr	r3, [r0, #0]
 8002b8e:	f013 0f01 	tst.w	r3, #1
 8002b92:	d03b      	beq.n	8002c0c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b94:	4ba7      	ldr	r3, [pc, #668]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d02c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba0:	4ba4      	ldr	r3, [pc, #656]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d021      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bac:	6863      	ldr	r3, [r4, #4]
 8002bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb2:	d04f      	beq.n	8002c54 <HAL_RCC_OscConfig+0xd4>
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d052      	beq.n	8002c60 <HAL_RCC_OscConfig+0xe0>
 8002bba:	4b9e      	ldr	r3, [pc, #632]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bcc:	6863      	ldr	r3, [r4, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d050      	beq.n	8002c74 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fff1 	bl	8001bb8 <HAL_GetTick>
 8002bd6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd8:	4b96      	ldr	r3, [pc, #600]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002be0:	d114      	bne.n	8002c0c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be2:	f7fe ffe9 	bl	8001bb8 <HAL_GetTick>
 8002be6:	1b40      	subs	r0, r0, r5
 8002be8:	2864      	cmp	r0, #100	; 0x64
 8002bea:	d9f5      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002bec:	2003      	movs	r0, #3
 8002bee:	e18a      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf0:	4b90      	ldr	r3, [pc, #576]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002bf8:	d0d8      	beq.n	8002bac <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfa:	4b8e      	ldr	r3, [pc, #568]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c02:	d003      	beq.n	8002c0c <HAL_RCC_OscConfig+0x8c>
 8002c04:	6863      	ldr	r3, [r4, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 817a 	beq.w	8002f00 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	f013 0f02 	tst.w	r3, #2
 8002c12:	d055      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c14:	4b87      	ldr	r3, [pc, #540]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f013 0f0c 	tst.w	r3, #12
 8002c1c:	d03e      	beq.n	8002c9c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1e:	4b85      	ldr	r3, [pc, #532]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d033      	beq.n	8002c92 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c2a:	68e3      	ldr	r3, [r4, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d068      	beq.n	8002d02 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c30:	4b81      	ldr	r3, [pc, #516]	; (8002e38 <HAL_RCC_OscConfig+0x2b8>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7fe ffbf 	bl	8001bb8 <HAL_GetTick>
 8002c3a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f013 0f02 	tst.w	r3, #2
 8002c44:	d154      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c46:	f7fe ffb7 	bl	8001bb8 <HAL_GetTick>
 8002c4a:	1b40      	subs	r0, r0, r5
 8002c4c:	2802      	cmp	r0, #2
 8002c4e:	d9f5      	bls.n	8002c3c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002c50:	2003      	movs	r0, #3
 8002c52:	e158      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c54:	4a77      	ldr	r2, [pc, #476]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e7b5      	b.n	8002bcc <HAL_RCC_OscConfig+0x4c>
 8002c60:	4b74      	ldr	r3, [pc, #464]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e7ab      	b.n	8002bcc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002c74:	f7fe ffa0 	bl	8001bb8 <HAL_GetTick>
 8002c78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b6e      	ldr	r3, [pc, #440]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c82:	d0c3      	beq.n	8002c0c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe ff98 	bl	8001bb8 <HAL_GetTick>
 8002c88:	1b40      	subs	r0, r0, r5
 8002c8a:	2864      	cmp	r0, #100	; 0x64
 8002c8c:	d9f5      	bls.n	8002c7a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002c8e:	2003      	movs	r0, #3
 8002c90:	e139      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c9a:	d1c6      	bne.n	8002c2a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9c:	4b65      	ldr	r3, [pc, #404]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f013 0f02 	tst.w	r3, #2
 8002ca4:	d004      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x130>
 8002ca6:	68e3      	ldr	r3, [r4, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8002cac:	2001      	movs	r0, #1
 8002cae:	e12a      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb0:	4a60      	ldr	r2, [pc, #384]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002cb2:	6813      	ldr	r3, [r2, #0]
 8002cb4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cb8:	6921      	ldr	r1, [r4, #16]
 8002cba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cbe:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	f013 0f08 	tst.w	r3, #8
 8002cc6:	d040      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc8:	6963      	ldr	r3, [r4, #20]
 8002cca:	b363      	cbz	r3, 8002d26 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ccc:	4b5b      	ldr	r3, [pc, #364]	; (8002e3c <HAL_RCC_OscConfig+0x2bc>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7fe ff71 	bl	8001bb8 <HAL_GetTick>
 8002cd6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd8:	4b56      	ldr	r3, [pc, #344]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	f013 0f02 	tst.w	r3, #2
 8002ce0:	d133      	bne.n	8002d4a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce2:	f7fe ff69 	bl	8001bb8 <HAL_GetTick>
 8002ce6:	1b40      	subs	r0, r0, r5
 8002ce8:	2802      	cmp	r0, #2
 8002cea:	d9f5      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002cec:	2003      	movs	r0, #3
 8002cee:	e10a      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4a50      	ldr	r2, [pc, #320]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cf8:	6921      	ldr	r1, [r4, #16]
 8002cfa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	e7de      	b.n	8002cc0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002d02:	4b4d      	ldr	r3, [pc, #308]	; (8002e38 <HAL_RCC_OscConfig+0x2b8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d08:	f7fe ff56 	bl	8001bb8 <HAL_GetTick>
 8002d0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f013 0f02 	tst.w	r3, #2
 8002d16:	d0d3      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d18:	f7fe ff4e 	bl	8001bb8 <HAL_GetTick>
 8002d1c:	1b40      	subs	r0, r0, r5
 8002d1e:	2802      	cmp	r0, #2
 8002d20:	d9f5      	bls.n	8002d0e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002d22:	2003      	movs	r0, #3
 8002d24:	e0ef      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d26:	4b45      	ldr	r3, [pc, #276]	; (8002e3c <HAL_RCC_OscConfig+0x2bc>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2c:	f7fe ff44 	bl	8001bb8 <HAL_GetTick>
 8002d30:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d32:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	f013 0f02 	tst.w	r3, #2
 8002d3a:	d006      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fe ff3c 	bl	8001bb8 <HAL_GetTick>
 8002d40:	1b40      	subs	r0, r0, r5
 8002d42:	2802      	cmp	r0, #2
 8002d44:	d9f5      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8002d46:	2003      	movs	r0, #3
 8002d48:	e0dd      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f013 0f04 	tst.w	r3, #4
 8002d50:	d079      	beq.n	8002e46 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d5a:	d133      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d74:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <HAL_RCC_OscConfig+0x2c0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d7e:	d023      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	68a3      	ldr	r3, [r4, #8]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d034      	beq.n	8002df0 <HAL_RCC_OscConfig+0x270>
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d038      	beq.n	8002dfc <HAL_RCC_OscConfig+0x27c>
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	671a      	str	r2, [r3, #112]	; 0x70
 8002d94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d96:	f022 0204 	bic.w	r2, r2, #4
 8002d9a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d9c:	68a3      	ldr	r3, [r4, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d036      	beq.n	8002e10 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe ff09 	bl	8001bb8 <HAL_GetTick>
 8002da6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	f013 0f02 	tst.w	r3, #2
 8002db0:	d148      	bne.n	8002e44 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe ff01 	bl	8001bb8 <HAL_GetTick>
 8002db6:	1b80      	subs	r0, r0, r6
 8002db8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dbc:	4298      	cmp	r0, r3
 8002dbe:	d9f3      	bls.n	8002da8 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	e0a0      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8002dc4:	2500      	movs	r5, #0
 8002dc6:	e7d6      	b.n	8002d76 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <HAL_RCC_OscConfig+0x2c0>)
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fef1 	bl	8001bb8 <HAL_GetTick>
 8002dd6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCC_OscConfig+0x2c0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002de0:	d1ce      	bne.n	8002d80 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fe fee9 	bl	8001bb8 <HAL_GetTick>
 8002de6:	1b80      	subs	r0, r0, r6
 8002de8:	2802      	cmp	r0, #2
 8002dea:	d9f5      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002dec:	2003      	movs	r0, #3
 8002dee:	e08a      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df0:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002df2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfa:	e7cf      	b.n	8002d9c <HAL_RCC_OscConfig+0x21c>
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e00:	f042 0204 	orr.w	r2, r2, #4
 8002e04:	671a      	str	r2, [r3, #112]	; 0x70
 8002e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	671a      	str	r2, [r3, #112]	; 0x70
 8002e0e:	e7c5      	b.n	8002d9c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e10:	f7fe fed2 	bl	8001bb8 <HAL_GetTick>
 8002e14:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	f013 0f02 	tst.w	r3, #2
 8002e1e:	d011      	beq.n	8002e44 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe feca 	bl	8001bb8 <HAL_GetTick>
 8002e24:	1b80      	subs	r0, r0, r6
 8002e26:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e2a:	4298      	cmp	r0, r3
 8002e2c:	d9f3      	bls.n	8002e16 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8002e2e:	2003      	movs	r0, #3
 8002e30:	e069      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
 8002e38:	42470000 	.word	0x42470000
 8002e3c:	42470e80 	.word	0x42470e80
 8002e40:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e44:	b9e5      	cbnz	r5, 8002e80 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e46:	69a3      	ldr	r3, [r4, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d05b      	beq.n	8002f04 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e4c:	4a30      	ldr	r2, [pc, #192]	; (8002f10 <HAL_RCC_OscConfig+0x390>)
 8002e4e:	6892      	ldr	r2, [r2, #8]
 8002e50:	f002 020c 	and.w	r2, r2, #12
 8002e54:	2a08      	cmp	r2, #8
 8002e56:	d058      	beq.n	8002f0a <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d017      	beq.n	8002e8c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <HAL_RCC_OscConfig+0x394>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fe fea9 	bl	8001bb8 <HAL_GetTick>
 8002e66:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <HAL_RCC_OscConfig+0x390>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e70:	d042      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe fea1 	bl	8001bb8 <HAL_GetTick>
 8002e76:	1b00      	subs	r0, r0, r4
 8002e78:	2802      	cmp	r0, #2
 8002e7a:	d9f5      	bls.n	8002e68 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	e042      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4a23      	ldr	r2, [pc, #140]	; (8002f10 <HAL_RCC_OscConfig+0x390>)
 8002e82:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	e7dc      	b.n	8002e46 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <HAL_RCC_OscConfig+0x394>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e92:	f7fe fe91 	bl	8001bb8 <HAL_GetTick>
 8002e96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_RCC_OscConfig+0x390>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ea0:	d006      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7fe fe89 	bl	8001bb8 <HAL_GetTick>
 8002ea6:	1b40      	subs	r0, r0, r5
 8002ea8:	2802      	cmp	r0, #2
 8002eaa:	d9f5      	bls.n	8002e98 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002eac:	2003      	movs	r0, #3
 8002eae:	e02a      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb0:	69e3      	ldr	r3, [r4, #28]
 8002eb2:	6a22      	ldr	r2, [r4, #32]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002eb8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002ebc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ebe:	0852      	lsrs	r2, r2, #1
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ec6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ec8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ecc:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <HAL_RCC_OscConfig+0x390>)
 8002ece:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_RCC_OscConfig+0x394>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fe6f 	bl	8001bb8 <HAL_GetTick>
 8002eda:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <HAL_RCC_OscConfig+0x390>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fe fe67 	bl	8001bb8 <HAL_GetTick>
 8002eea:	1b00      	subs	r0, r0, r4
 8002eec:	2802      	cmp	r0, #2
 8002eee:	d9f5      	bls.n	8002edc <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002ef0:	2003      	movs	r0, #3
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	e006      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
 8002ef8:	2000      	movs	r0, #0
 8002efa:	e004      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8002efc:	2001      	movs	r0, #1
}
 8002efe:	4770      	bx	lr
        return HAL_ERROR;
 8002f00:	2001      	movs	r0, #1
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8002f04:	2000      	movs	r0, #0
}
 8002f06:	b002      	add	sp, #8
 8002f08:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	e7fb      	b.n	8002f06 <HAL_RCC_OscConfig+0x386>
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	42470060 	.word	0x42470060

08002f18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f18:	4b32      	ldr	r3, [pc, #200]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d05c      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0xc6>
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	482f      	ldr	r0, [pc, #188]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f2a:	4770      	bx	lr
{
 8002f2c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002f3e:	d02b      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f40:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002f48:	461e      	mov	r6, r3
 8002f4a:	2700      	movs	r7, #0
 8002f4c:	015c      	lsls	r4, r3, #5
 8002f4e:	2500      	movs	r5, #0
 8002f50:	1ae4      	subs	r4, r4, r3
 8002f52:	eb65 0507 	sbc.w	r5, r5, r7
 8002f56:	01a9      	lsls	r1, r5, #6
 8002f58:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002f5c:	01a0      	lsls	r0, r4, #6
 8002f5e:	1b00      	subs	r0, r0, r4
 8002f60:	eb61 0105 	sbc.w	r1, r1, r5
 8002f64:	00cb      	lsls	r3, r1, #3
 8002f66:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002f6a:	00c4      	lsls	r4, r0, #3
 8002f6c:	19a0      	adds	r0, r4, r6
 8002f6e:	eb43 0107 	adc.w	r1, r3, r7
 8002f72:	024b      	lsls	r3, r1, #9
 8002f74:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002f78:	0244      	lsls	r4, r0, #9
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f7fd fd70 	bl	8000a64 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002f90:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f94:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002fa0:	461e      	mov	r6, r3
 8002fa2:	2700      	movs	r7, #0
 8002fa4:	015c      	lsls	r4, r3, #5
 8002fa6:	2500      	movs	r5, #0
 8002fa8:	1ae4      	subs	r4, r4, r3
 8002faa:	eb65 0507 	sbc.w	r5, r5, r7
 8002fae:	01a9      	lsls	r1, r5, #6
 8002fb0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002fb4:	01a0      	lsls	r0, r4, #6
 8002fb6:	1b00      	subs	r0, r0, r4
 8002fb8:	eb61 0105 	sbc.w	r1, r1, r5
 8002fbc:	00cb      	lsls	r3, r1, #3
 8002fbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002fc2:	00c4      	lsls	r4, r0, #3
 8002fc4:	19a0      	adds	r0, r4, r6
 8002fc6:	eb43 0107 	adc.w	r1, r3, r7
 8002fca:	028b      	lsls	r3, r1, #10
 8002fcc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002fd0:	0284      	lsls	r4, r0, #10
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f7fd fd44 	bl	8000a64 <__aeabi_uldivmod>
 8002fdc:	e7d2      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8002fde:	4803      	ldr	r0, [pc, #12]	; (8002fec <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	00f42400 	.word	0x00f42400
 8002fec:	007a1200 	.word	0x007a1200

08002ff0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	f000 809d 	beq.w	8003130 <HAL_RCC_ClockConfig+0x140>
{
 8002ff6:	b570      	push	{r4, r5, r6, lr}
 8002ff8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffa:	4b4f      	ldr	r3, [pc, #316]	; (8003138 <HAL_RCC_ClockConfig+0x148>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	428b      	cmp	r3, r1
 8003004:	d209      	bcs.n	800301a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	b2cb      	uxtb	r3, r1
 8003008:	4a4b      	ldr	r2, [pc, #300]	; (8003138 <HAL_RCC_ClockConfig+0x148>)
 800300a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300c:	6813      	ldr	r3, [r2, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	428b      	cmp	r3, r1
 8003014:	d001      	beq.n	800301a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8003016:	2001      	movs	r0, #1
}
 8003018:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	f013 0f02 	tst.w	r3, #2
 8003020:	d017      	beq.n	8003052 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003022:	f013 0f04 	tst.w	r3, #4
 8003026:	d004      	beq.n	8003032 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003028:	4a44      	ldr	r2, [pc, #272]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 800302a:	6893      	ldr	r3, [r2, #8]
 800302c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003030:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	f013 0f08 	tst.w	r3, #8
 8003038:	d004      	beq.n	8003044 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800303a:	4a40      	ldr	r2, [pc, #256]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 800303c:	6893      	ldr	r3, [r2, #8]
 800303e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003042:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4a3d      	ldr	r2, [pc, #244]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 8003046:	6893      	ldr	r3, [r2, #8]
 8003048:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800304c:	68a0      	ldr	r0, [r4, #8]
 800304e:	4303      	orrs	r3, r0
 8003050:	6093      	str	r3, [r2, #8]
 8003052:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	f013 0f01 	tst.w	r3, #1
 800305a:	d032      	beq.n	80030c2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305c:	6863      	ldr	r3, [r4, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d021      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003062:	1e9a      	subs	r2, r3, #2
 8003064:	2a01      	cmp	r2, #1
 8003066:	d925      	bls.n	80030b4 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003068:	4a34      	ldr	r2, [pc, #208]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	f012 0f02 	tst.w	r2, #2
 8003070:	d060      	beq.n	8003134 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003072:	4932      	ldr	r1, [pc, #200]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 8003074:	688a      	ldr	r2, [r1, #8]
 8003076:	f022 0203 	bic.w	r2, r2, #3
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800307e:	f7fe fd9b 	bl	8001bb8 <HAL_GetTick>
 8003082:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003084:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	6862      	ldr	r2, [r4, #4]
 800308e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003092:	d016      	beq.n	80030c2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fe fd90 	bl	8001bb8 <HAL_GetTick>
 8003098:	1b80      	subs	r0, r0, r6
 800309a:	f241 3388 	movw	r3, #5000	; 0x1388
 800309e:	4298      	cmp	r0, r3
 80030a0:	d9f0      	bls.n	8003084 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80030a2:	2003      	movs	r0, #3
 80030a4:	e7b8      	b.n	8003018 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4a25      	ldr	r2, [pc, #148]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80030ae:	d1e0      	bne.n	8003072 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80030b0:	2001      	movs	r0, #1
 80030b2:	e7b1      	b.n	8003018 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	4a21      	ldr	r2, [pc, #132]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80030bc:	d1d9      	bne.n	8003072 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80030be:	2001      	movs	r0, #1
 80030c0:	e7aa      	b.n	8003018 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_RCC_ClockConfig+0x148>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	42ab      	cmp	r3, r5
 80030cc:	d909      	bls.n	80030e2 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	b2ea      	uxtb	r2, r5
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x148>)
 80030d2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	42ab      	cmp	r3, r5
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 80030de:	2001      	movs	r0, #1
 80030e0:	e79a      	b.n	8003018 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	f013 0f04 	tst.w	r3, #4
 80030e8:	d006      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ea:	4a14      	ldr	r2, [pc, #80]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 80030ec:	6893      	ldr	r3, [r2, #8]
 80030ee:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80030f2:	68e1      	ldr	r1, [r4, #12]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	f013 0f08 	tst.w	r3, #8
 80030fe:	d007      	beq.n	8003110 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003100:	4a0e      	ldr	r2, [pc, #56]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 8003102:	6893      	ldr	r3, [r2, #8]
 8003104:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003108:	6921      	ldr	r1, [r4, #16]
 800310a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800310e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003110:	f7ff ff02 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCC_ClockConfig+0x14c>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800311c:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_RCC_ClockConfig+0x150>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	40d8      	lsrs	r0, r3
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_RCC_ClockConfig+0x154>)
 8003124:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fe fcfa 	bl	8001b20 <HAL_InitTick>
  return HAL_OK;
 800312c:	2000      	movs	r0, #0
 800312e:	e773      	b.n	8003018 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003130:	2001      	movs	r0, #1
}
 8003132:	4770      	bx	lr
        return HAL_ERROR;
 8003134:	2001      	movs	r0, #1
 8003136:	e76f      	b.n	8003018 <HAL_RCC_ClockConfig+0x28>
 8003138:	40023c00 	.word	0x40023c00
 800313c:	40023800 	.word	0x40023800
 8003140:	08006510 	.word	0x08006510
 8003144:	20000064 	.word	0x20000064

08003148 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003148:	4b01      	ldr	r3, [pc, #4]	; (8003150 <HAL_RCC_GetHCLKFreq+0x8>)
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000064 	.word	0x20000064

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003156:	f7ff fff7 	bl	8003148 <HAL_RCC_GetHCLKFreq>
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <HAL_RCC_GetPCLK1Freq+0x18>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003162:	4a03      	ldr	r2, [pc, #12]	; (8003170 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003164:	5cd3      	ldrb	r3, [r2, r3]
}
 8003166:	40d8      	lsrs	r0, r3
 8003168:	bd08      	pop	{r3, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800
 8003170:	08006520 	.word	0x08006520

08003174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003174:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003176:	f7ff ffe7 	bl	8003148 <HAL_RCC_GetHCLKFreq>
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_RCC_GetPCLK2Freq+0x18>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003182:	4a03      	ldr	r2, [pc, #12]	; (8003190 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003184:	5cd3      	ldrb	r3, [r2, r3]
}
 8003186:	40d8      	lsrs	r0, r3
 8003188:	bd08      	pop	{r3, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	08006520 	.word	0x08006520

08003194 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003194:	2800      	cmp	r0, #0
 8003196:	d03b      	beq.n	8003210 <HAL_SPI_Init+0x7c>
{
 8003198:	b510      	push	{r4, lr}
 800319a:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02e      	beq.n	8003206 <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a8:	2302      	movs	r3, #2
 80031aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031ae:	6822      	ldr	r2, [r4, #0]
 80031b0:	6813      	ldr	r3, [r2, #0]
 80031b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b6:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80031b8:	6863      	ldr	r3, [r4, #4]
 80031ba:	68a2      	ldr	r2, [r4, #8]
 80031bc:	4313      	orrs	r3, r2
 80031be:	68e2      	ldr	r2, [r4, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	6922      	ldr	r2, [r4, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	6962      	ldr	r2, [r4, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	69a2      	ldr	r2, [r4, #24]
 80031cc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80031d0:	4313      	orrs	r3, r2
 80031d2:	69e2      	ldr	r2, [r4, #28]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	6a22      	ldr	r2, [r4, #32]
 80031d8:	4313      	orrs	r3, r2
 80031da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80031dc:	6822      	ldr	r2, [r4, #0]
 80031de:	430b      	orrs	r3, r1
 80031e0:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80031e2:	8b63      	ldrh	r3, [r4, #26]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	69d3      	ldr	r3, [r2, #28]
 80031f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f8:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031fa:	2000      	movs	r0, #0
 80031fc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031fe:	2301      	movs	r3, #1
 8003200:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8003204:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003206:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800320a:	f000 ff5b 	bl	80040c4 <HAL_SPI_MspInit>
 800320e:	e7cb      	b.n	80031a8 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8003210:	2001      	movs	r0, #1
}
 8003212:	4770      	bx	lr

08003214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003214:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003216:	6a03      	ldr	r3, [r0, #32]
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003220:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003222:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003224:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003228:	680d      	ldr	r5, [r1, #0]
 800322a:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800322e:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003232:	688b      	ldr	r3, [r1, #8]
 8003234:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003236:	4d0d      	ldr	r5, [pc, #52]	; (800326c <TIM_OC1_SetConfig+0x58>)
 8003238:	42a8      	cmp	r0, r5
 800323a:	d009      	beq.n	8003250 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323c:	4d0b      	ldr	r5, [pc, #44]	; (800326c <TIM_OC1_SetConfig+0x58>)
 800323e:	42a8      	cmp	r0, r5
 8003240:	d00d      	beq.n	800325e <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003242:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003244:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003246:	684a      	ldr	r2, [r1, #4]
 8003248:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324a:	6203      	str	r3, [r0, #32]
}
 800324c:	bc70      	pop	{r4, r5, r6}
 800324e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003250:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003254:	68cc      	ldr	r4, [r1, #12]
 8003256:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	e7ee      	b.n	800323c <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800325e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003262:	694c      	ldr	r4, [r1, #20]
 8003264:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8003266:	698a      	ldr	r2, [r1, #24]
 8003268:	4322      	orrs	r2, r4
 800326a:	e7ea      	b.n	8003242 <TIM_OC1_SetConfig+0x2e>
 800326c:	40010000 	.word	0x40010000

08003270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003272:	6a03      	ldr	r3, [r0, #32]
 8003274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003278:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003280:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003284:	680d      	ldr	r5, [r1, #0]
 8003286:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800328c:	688d      	ldr	r5, [r1, #8]
 800328e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003292:	4d0f      	ldr	r5, [pc, #60]	; (80032d0 <TIM_OC3_SetConfig+0x60>)
 8003294:	42a8      	cmp	r0, r5
 8003296:	d009      	beq.n	80032ac <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003298:	4d0d      	ldr	r5, [pc, #52]	; (80032d0 <TIM_OC3_SetConfig+0x60>)
 800329a:	42a8      	cmp	r0, r5
 800329c:	d00e      	beq.n	80032bc <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a0:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032a2:	684a      	ldr	r2, [r1, #4]
 80032a4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a6:	6203      	str	r3, [r0, #32]
}
 80032a8:	bc30      	pop	{r4, r5}
 80032aa:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032b0:	68cd      	ldr	r5, [r1, #12]
 80032b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80032b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ba:	e7ed      	b.n	8003298 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032bc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032c0:	694d      	ldr	r5, [r1, #20]
 80032c2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032c6:	698d      	ldr	r5, [r1, #24]
 80032c8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80032cc:	e7e7      	b.n	800329e <TIM_OC3_SetConfig+0x2e>
 80032ce:	bf00      	nop
 80032d0:	40010000 	.word	0x40010000

080032d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032d6:	6a03      	ldr	r3, [r0, #32]
 80032d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032e2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e8:	680d      	ldr	r5, [r1, #0]
 80032ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032f2:	688d      	ldr	r5, [r1, #8]
 80032f4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f8:	4d07      	ldr	r5, [pc, #28]	; (8003318 <TIM_OC4_SetConfig+0x44>)
 80032fa:	42a8      	cmp	r0, r5
 80032fc:	d006      	beq.n	800330c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003300:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003302:	684a      	ldr	r2, [r1, #4]
 8003304:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003306:	6203      	str	r3, [r0, #32]
}
 8003308:	bc30      	pop	{r4, r5}
 800330a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800330c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003310:	694d      	ldr	r5, [r1, #20]
 8003312:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003316:	e7f2      	b.n	80032fe <TIM_OC4_SetConfig+0x2a>
 8003318:	40010000 	.word	0x40010000

0800331c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800331c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800331e:	4a25      	ldr	r2, [pc, #148]	; (80033b4 <TIM_Base_SetConfig+0x98>)
 8003320:	4290      	cmp	r0, r2
 8003322:	d00e      	beq.n	8003342 <TIM_Base_SetConfig+0x26>
 8003324:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0x26>
 800332a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800332e:	4290      	cmp	r0, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0x26>
 8003332:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003336:	4290      	cmp	r0, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0x26>
 800333a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800333e:	4290      	cmp	r0, r2
 8003340:	d103      	bne.n	800334a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003346:	684a      	ldr	r2, [r1, #4]
 8003348:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <TIM_Base_SetConfig+0x98>)
 800334c:	4290      	cmp	r0, r2
 800334e:	d01a      	beq.n	8003386 <TIM_Base_SetConfig+0x6a>
 8003350:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003354:	d017      	beq.n	8003386 <TIM_Base_SetConfig+0x6a>
 8003356:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800335a:	4290      	cmp	r0, r2
 800335c:	d013      	beq.n	8003386 <TIM_Base_SetConfig+0x6a>
 800335e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003362:	4290      	cmp	r0, r2
 8003364:	d00f      	beq.n	8003386 <TIM_Base_SetConfig+0x6a>
 8003366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800336a:	4290      	cmp	r0, r2
 800336c:	d00b      	beq.n	8003386 <TIM_Base_SetConfig+0x6a>
 800336e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003372:	4290      	cmp	r0, r2
 8003374:	d007      	beq.n	8003386 <TIM_Base_SetConfig+0x6a>
 8003376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800337a:	4290      	cmp	r0, r2
 800337c:	d003      	beq.n	8003386 <TIM_Base_SetConfig+0x6a>
 800337e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003382:	4290      	cmp	r0, r2
 8003384:	d103      	bne.n	800338e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338a:	68ca      	ldr	r2, [r1, #12]
 800338c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800338e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003392:	694a      	ldr	r2, [r1, #20]
 8003394:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003396:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003398:	688b      	ldr	r3, [r1, #8]
 800339a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800339c:	680b      	ldr	r3, [r1, #0]
 800339e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <TIM_Base_SetConfig+0x98>)
 80033a2:	4298      	cmp	r0, r3
 80033a4:	d002      	beq.n	80033ac <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80033a6:	2301      	movs	r3, #1
 80033a8:	6143      	str	r3, [r0, #20]
}
 80033aa:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80033ac:	690b      	ldr	r3, [r1, #16]
 80033ae:	6303      	str	r3, [r0, #48]	; 0x30
 80033b0:	e7f9      	b.n	80033a6 <TIM_Base_SetConfig+0x8a>
 80033b2:	bf00      	nop
 80033b4:	40010000 	.word	0x40010000

080033b8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80033b8:	b1a8      	cbz	r0, 80033e6 <HAL_TIM_Base_Init+0x2e>
{
 80033ba:	b510      	push	{r4, lr}
 80033bc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80033be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033c2:	b15b      	cbz	r3, 80033dc <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	2302      	movs	r3, #2
 80033c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ca:	1d21      	adds	r1, r4, #4
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	f7ff ffa5 	bl	800331c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80033d8:	2000      	movs	r0, #0
}
 80033da:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80033dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80033e0:	f000 fed6 	bl	8004190 <HAL_TIM_Base_MspInit>
 80033e4:	e7ee      	b.n	80033c4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80033e6:	2001      	movs	r0, #1
}
 80033e8:	4770      	bx	lr

080033ea <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80033ea:	b1a8      	cbz	r0, 8003418 <HAL_TIM_PWM_Init+0x2e>
{
 80033ec:	b510      	push	{r4, lr}
 80033ee:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80033f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033f4:	b15b      	cbz	r3, 800340e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80033f6:	2302      	movs	r3, #2
 80033f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	1d21      	adds	r1, r4, #4
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	f7ff ff8c 	bl	800331c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003404:	2301      	movs	r3, #1
 8003406:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800340a:	2000      	movs	r0, #0
}
 800340c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800340e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003412:	f000 fea5 	bl	8004160 <HAL_TIM_PWM_MspInit>
 8003416:	e7ee      	b.n	80033f6 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003418:	2001      	movs	r0, #1
}
 800341a:	4770      	bx	lr

0800341c <TIM_OC2_SetConfig>:
{
 800341c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800341e:	6a03      	ldr	r3, [r0, #32]
 8003420:	f023 0310 	bic.w	r3, r3, #16
 8003424:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003426:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003428:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800342a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800342c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003430:	680d      	ldr	r5, [r1, #0]
 8003432:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003436:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800343a:	688d      	ldr	r5, [r1, #8]
 800343c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003440:	4d0e      	ldr	r5, [pc, #56]	; (800347c <TIM_OC2_SetConfig+0x60>)
 8003442:	42a8      	cmp	r0, r5
 8003444:	d009      	beq.n	800345a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003446:	4d0d      	ldr	r5, [pc, #52]	; (800347c <TIM_OC2_SetConfig+0x60>)
 8003448:	42a8      	cmp	r0, r5
 800344a:	d00e      	beq.n	800346a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 800344c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800344e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003450:	684a      	ldr	r2, [r1, #4]
 8003452:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003454:	6203      	str	r3, [r0, #32]
}
 8003456:	bc30      	pop	{r4, r5}
 8003458:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800345a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800345e:	68cd      	ldr	r5, [r1, #12]
 8003460:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003468:	e7ed      	b.n	8003446 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800346a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800346e:	694d      	ldr	r5, [r1, #20]
 8003470:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003474:	698d      	ldr	r5, [r1, #24]
 8003476:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800347a:	e7e7      	b.n	800344c <TIM_OC2_SetConfig+0x30>
 800347c:	40010000 	.word	0x40010000

08003480 <HAL_TIM_PWM_ConfigChannel>:
{
 8003480:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003482:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d066      	beq.n	8003558 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800348a:	460d      	mov	r5, r1
 800348c:	4604      	mov	r4, r0
 800348e:	2301      	movs	r3, #1
 8003490:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	2302      	movs	r3, #2
 8003496:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800349a:	2a0c      	cmp	r2, #12
 800349c:	d81a      	bhi.n	80034d4 <HAL_TIM_PWM_ConfigChannel+0x54>
 800349e:	e8df f002 	tbb	[pc, r2]
 80034a2:	1907      	.short	0x1907
 80034a4:	19201919 	.word	0x19201919
 80034a8:	19341919 	.word	0x19341919
 80034ac:	1919      	.short	0x1919
 80034ae:	47          	.byte	0x47
 80034af:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034b0:	6800      	ldr	r0, [r0, #0]
 80034b2:	f7ff feaf 	bl	8003214 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034b6:	6822      	ldr	r2, [r4, #0]
 80034b8:	6993      	ldr	r3, [r2, #24]
 80034ba:	f043 0308 	orr.w	r3, r3, #8
 80034be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c0:	6822      	ldr	r2, [r4, #0]
 80034c2:	6993      	ldr	r3, [r2, #24]
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034ca:	6822      	ldr	r2, [r4, #0]
 80034cc:	6993      	ldr	r3, [r2, #24]
 80034ce:	6929      	ldr	r1, [r5, #16]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80034da:	2000      	movs	r0, #0
 80034dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e2:	6800      	ldr	r0, [r0, #0]
 80034e4:	f7ff ff9a 	bl	800341c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034e8:	6822      	ldr	r2, [r4, #0]
 80034ea:	6993      	ldr	r3, [r2, #24]
 80034ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034f0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	6993      	ldr	r3, [r2, #24]
 80034f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	6993      	ldr	r3, [r2, #24]
 8003500:	6929      	ldr	r1, [r5, #16]
 8003502:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003506:	6193      	str	r3, [r2, #24]
      break;
 8003508:	e7e4      	b.n	80034d4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	f7ff feb0 	bl	8003270 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003510:	6822      	ldr	r2, [r4, #0]
 8003512:	69d3      	ldr	r3, [r2, #28]
 8003514:	f043 0308 	orr.w	r3, r3, #8
 8003518:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	69d3      	ldr	r3, [r2, #28]
 800351e:	f023 0304 	bic.w	r3, r3, #4
 8003522:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	69d3      	ldr	r3, [r2, #28]
 8003528:	6929      	ldr	r1, [r5, #16]
 800352a:	430b      	orrs	r3, r1
 800352c:	61d3      	str	r3, [r2, #28]
      break;
 800352e:	e7d1      	b.n	80034d4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003530:	6800      	ldr	r0, [r0, #0]
 8003532:	f7ff fecf 	bl	80032d4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	69d3      	ldr	r3, [r2, #28]
 800353a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800353e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003540:	6822      	ldr	r2, [r4, #0]
 8003542:	69d3      	ldr	r3, [r2, #28]
 8003544:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003548:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800354a:	6822      	ldr	r2, [r4, #0]
 800354c:	69d3      	ldr	r3, [r2, #28]
 800354e:	6929      	ldr	r1, [r5, #16]
 8003550:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003554:	61d3      	str	r3, [r2, #28]
      break;
 8003556:	e7bd      	b.n	80034d4 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8003558:	2002      	movs	r0, #2
 800355a:	e7c1      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x60>

0800355c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800355c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800355e:	f001 011f 	and.w	r1, r1, #31
 8003562:	2301      	movs	r3, #1
 8003564:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003568:	6a03      	ldr	r3, [r0, #32]
 800356a:	ea23 0304 	bic.w	r3, r3, r4
 800356e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003570:	6a03      	ldr	r3, [r0, #32]
 8003572:	408a      	lsls	r2, r1
 8003574:	4313      	orrs	r3, r2
 8003576:	6203      	str	r3, [r0, #32]
}
 8003578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_TIM_PWM_Start>:
{
 8003580:	b510      	push	{r4, lr}
 8003582:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003584:	2201      	movs	r2, #1
 8003586:	6800      	ldr	r0, [r0, #0]
 8003588:	f7ff ffe8 	bl	800355c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <HAL_TIM_PWM_Start+0x38>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00b      	beq.n	80035ac <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	6893      	ldr	r3, [r2, #8]
 8003598:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359c:	2b06      	cmp	r3, #6
 800359e:	d003      	beq.n	80035a8 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 80035a0:	6813      	ldr	r3, [r2, #0]
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	2000      	movs	r0, #0
 80035aa:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80035ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
 80035b4:	e7ee      	b.n	8003594 <HAL_TIM_PWM_Start+0x14>
 80035b6:	bf00      	nop
 80035b8:	40010000 	.word	0x40010000

080035bc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d01c      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 80035c4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80035c6:	2601      	movs	r6, #1
 80035c8:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	2302      	movs	r3, #2
 80035ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d2:	6802      	ldr	r2, [r0, #0]
 80035d4:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d6:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035d8:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035dc:	680c      	ldr	r4, [r1, #0]
 80035de:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80035e0:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e4:	684b      	ldr	r3, [r1, #4]
 80035e6:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035e8:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035ea:	6802      	ldr	r2, [r0, #0]
 80035ec:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ee:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f2:	2300      	movs	r3, #0
 80035f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80035f8:	4618      	mov	r0, r3
}
 80035fa:	bc70      	pop	{r4, r5, r6}
 80035fc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80035fe:	2002      	movs	r0, #2
}
 8003600:	4770      	bx	lr
	...

08003604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003608:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800360a:	6802      	ldr	r2, [r0, #0]
 800360c:	6913      	ldr	r3, [r2, #16]
 800360e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003612:	68c1      	ldr	r1, [r0, #12]
 8003614:	430b      	orrs	r3, r1
 8003616:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003618:	6883      	ldr	r3, [r0, #8]
 800361a:	6902      	ldr	r2, [r0, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	6942      	ldr	r2, [r0, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	69c2      	ldr	r2, [r0, #28]
 8003624:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003626:	6801      	ldr	r1, [r0, #0]
 8003628:	68cb      	ldr	r3, [r1, #12]
 800362a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800362e:	f023 030c 	bic.w	r3, r3, #12
 8003632:	4313      	orrs	r3, r2
 8003634:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003636:	6802      	ldr	r2, [r0, #0]
 8003638:	6953      	ldr	r3, [r2, #20]
 800363a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363e:	6981      	ldr	r1, [r0, #24]
 8003640:	430b      	orrs	r3, r1
 8003642:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003644:	69c3      	ldr	r3, [r0, #28]
 8003646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800364a:	d060      	beq.n	800370e <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800364c:	6803      	ldr	r3, [r0, #0]
 800364e:	4ab8      	ldr	r2, [pc, #736]	; (8003930 <UART_SetConfig+0x32c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	f000 8114 	beq.w	800387e <UART_SetConfig+0x27a>
 8003656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800365a:	4293      	cmp	r3, r2
 800365c:	f000 810f 	beq.w	800387e <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003660:	f7ff fd78 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8003664:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003668:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800366c:	6865      	ldr	r5, [r4, #4]
 800366e:	00ad      	lsls	r5, r5, #2
 8003670:	fbb0 f5f5 	udiv	r5, r0, r5
 8003674:	4faf      	ldr	r7, [pc, #700]	; (8003934 <UART_SetConfig+0x330>)
 8003676:	fba7 3505 	umull	r3, r5, r7, r5
 800367a:	096d      	lsrs	r5, r5, #5
 800367c:	012e      	lsls	r6, r5, #4
 800367e:	f7ff fd69 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8003682:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003686:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800368a:	6865      	ldr	r5, [r4, #4]
 800368c:	00ad      	lsls	r5, r5, #2
 800368e:	fbb0 f9f5 	udiv	r9, r0, r5
 8003692:	f7ff fd5f 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8003696:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800369a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800369e:	6865      	ldr	r5, [r4, #4]
 80036a0:	00ad      	lsls	r5, r5, #2
 80036a2:	fbb0 f5f5 	udiv	r5, r0, r5
 80036a6:	fba7 3505 	umull	r3, r5, r7, r5
 80036aa:	096d      	lsrs	r5, r5, #5
 80036ac:	f04f 0864 	mov.w	r8, #100	; 0x64
 80036b0:	fb08 9515 	mls	r5, r8, r5, r9
 80036b4:	012d      	lsls	r5, r5, #4
 80036b6:	3532      	adds	r5, #50	; 0x32
 80036b8:	fba7 3505 	umull	r3, r5, r7, r5
 80036bc:	096d      	lsrs	r5, r5, #5
 80036be:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80036c2:	4435      	add	r5, r6
 80036c4:	f7ff fd46 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 80036c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036d0:	6866      	ldr	r6, [r4, #4]
 80036d2:	00b6      	lsls	r6, r6, #2
 80036d4:	fbb0 f6f6 	udiv	r6, r0, r6
 80036d8:	f7ff fd3c 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 80036dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80036ec:	fba7 3000 	umull	r3, r0, r7, r0
 80036f0:	0940      	lsrs	r0, r0, #5
 80036f2:	fb08 6810 	mls	r8, r8, r0, r6
 80036f6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80036fa:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80036fe:	fba7 3708 	umull	r3, r7, r7, r8
 8003702:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	442f      	add	r7, r5
 800370a:	609f      	str	r7, [r3, #8]
    }
  }
}
 800370c:	e10d      	b.n	800392a <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800370e:	6803      	ldr	r3, [r0, #0]
 8003710:	4a87      	ldr	r2, [pc, #540]	; (8003930 <UART_SetConfig+0x32c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d05b      	beq.n	80037ce <UART_SetConfig+0x1ca>
 8003716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800371a:	4293      	cmp	r3, r2
 800371c:	d057      	beq.n	80037ce <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800371e:	f7ff fd19 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8003722:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003726:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800372a:	6865      	ldr	r5, [r4, #4]
 800372c:	006d      	lsls	r5, r5, #1
 800372e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003732:	4f80      	ldr	r7, [pc, #512]	; (8003934 <UART_SetConfig+0x330>)
 8003734:	fba7 3505 	umull	r3, r5, r7, r5
 8003738:	096d      	lsrs	r5, r5, #5
 800373a:	012e      	lsls	r6, r5, #4
 800373c:	f7ff fd0a 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8003740:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003744:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003748:	6865      	ldr	r5, [r4, #4]
 800374a:	006d      	lsls	r5, r5, #1
 800374c:	fbb0 f9f5 	udiv	r9, r0, r5
 8003750:	f7ff fd00 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8003754:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003758:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800375c:	6865      	ldr	r5, [r4, #4]
 800375e:	006d      	lsls	r5, r5, #1
 8003760:	fbb0 f5f5 	udiv	r5, r0, r5
 8003764:	fba7 3505 	umull	r3, r5, r7, r5
 8003768:	096d      	lsrs	r5, r5, #5
 800376a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800376e:	fb08 9515 	mls	r5, r8, r5, r9
 8003772:	00ed      	lsls	r5, r5, #3
 8003774:	3532      	adds	r5, #50	; 0x32
 8003776:	fba7 3505 	umull	r3, r5, r7, r5
 800377a:	096d      	lsrs	r5, r5, #5
 800377c:	006d      	lsls	r5, r5, #1
 800377e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8003782:	4435      	add	r5, r6
 8003784:	f7ff fce6 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8003788:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800378c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003790:	6866      	ldr	r6, [r4, #4]
 8003792:	0076      	lsls	r6, r6, #1
 8003794:	fbb0 f6f6 	udiv	r6, r0, r6
 8003798:	f7ff fcdc 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 800379c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037a4:	6863      	ldr	r3, [r4, #4]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ac:	fba7 2303 	umull	r2, r3, r7, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	fb08 6813 	mls	r8, r8, r3, r6
 80037b6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80037ba:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80037be:	fba7 3708 	umull	r3, r7, r7, r8
 80037c2:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	442f      	add	r7, r5
 80037ca:	609f      	str	r7, [r3, #8]
 80037cc:	e0ad      	b.n	800392a <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80037ce:	f7ff fcd1 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 80037d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037da:	6865      	ldr	r5, [r4, #4]
 80037dc:	006d      	lsls	r5, r5, #1
 80037de:	fbb0 f5f5 	udiv	r5, r0, r5
 80037e2:	4f54      	ldr	r7, [pc, #336]	; (8003934 <UART_SetConfig+0x330>)
 80037e4:	fba7 3505 	umull	r3, r5, r7, r5
 80037e8:	096d      	lsrs	r5, r5, #5
 80037ea:	012e      	lsls	r6, r5, #4
 80037ec:	f7ff fcc2 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 80037f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037f8:	6865      	ldr	r5, [r4, #4]
 80037fa:	006d      	lsls	r5, r5, #1
 80037fc:	fbb0 f9f5 	udiv	r9, r0, r5
 8003800:	f7ff fcb8 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 8003804:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800380c:	6865      	ldr	r5, [r4, #4]
 800380e:	006d      	lsls	r5, r5, #1
 8003810:	fbb0 f5f5 	udiv	r5, r0, r5
 8003814:	fba7 3505 	umull	r3, r5, r7, r5
 8003818:	096d      	lsrs	r5, r5, #5
 800381a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800381e:	fb08 9515 	mls	r5, r8, r5, r9
 8003822:	00ed      	lsls	r5, r5, #3
 8003824:	3532      	adds	r5, #50	; 0x32
 8003826:	fba7 3505 	umull	r3, r5, r7, r5
 800382a:	096d      	lsrs	r5, r5, #5
 800382c:	006d      	lsls	r5, r5, #1
 800382e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8003832:	4435      	add	r5, r6
 8003834:	f7ff fc9e 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 8003838:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800383c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003840:	6866      	ldr	r6, [r4, #4]
 8003842:	0076      	lsls	r6, r6, #1
 8003844:	fbb0 f6f6 	udiv	r6, r0, r6
 8003848:	f7ff fc94 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 800384c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003850:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003854:	6863      	ldr	r3, [r4, #4]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fbb0 f3f3 	udiv	r3, r0, r3
 800385c:	fba7 2303 	umull	r2, r3, r7, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	fb08 6813 	mls	r8, r8, r3, r6
 8003866:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800386a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800386e:	fba7 3708 	umull	r3, r7, r7, r8
 8003872:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	442f      	add	r7, r5
 800387a:	609f      	str	r7, [r3, #8]
 800387c:	e055      	b.n	800392a <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800387e:	f7ff fc79 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 8003882:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003886:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800388a:	6865      	ldr	r5, [r4, #4]
 800388c:	00ad      	lsls	r5, r5, #2
 800388e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003892:	4f28      	ldr	r7, [pc, #160]	; (8003934 <UART_SetConfig+0x330>)
 8003894:	fba7 3505 	umull	r3, r5, r7, r5
 8003898:	096d      	lsrs	r5, r5, #5
 800389a:	012e      	lsls	r6, r5, #4
 800389c:	f7ff fc6a 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 80038a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038a8:	6865      	ldr	r5, [r4, #4]
 80038aa:	00ad      	lsls	r5, r5, #2
 80038ac:	fbb0 f9f5 	udiv	r9, r0, r5
 80038b0:	f7ff fc60 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 80038b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038bc:	6865      	ldr	r5, [r4, #4]
 80038be:	00ad      	lsls	r5, r5, #2
 80038c0:	fbb0 f5f5 	udiv	r5, r0, r5
 80038c4:	fba7 3505 	umull	r3, r5, r7, r5
 80038c8:	096d      	lsrs	r5, r5, #5
 80038ca:	f04f 0864 	mov.w	r8, #100	; 0x64
 80038ce:	fb08 9515 	mls	r5, r8, r5, r9
 80038d2:	012d      	lsls	r5, r5, #4
 80038d4:	3532      	adds	r5, #50	; 0x32
 80038d6:	fba7 3505 	umull	r3, r5, r7, r5
 80038da:	096d      	lsrs	r5, r5, #5
 80038dc:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80038e0:	4435      	add	r5, r6
 80038e2:	f7ff fc47 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 80038e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038ee:	6866      	ldr	r6, [r4, #4]
 80038f0:	00b6      	lsls	r6, r6, #2
 80038f2:	fbb0 f6f6 	udiv	r6, r0, r6
 80038f6:	f7ff fc3d 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 80038fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003902:	6863      	ldr	r3, [r4, #4]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	fbb0 f0f3 	udiv	r0, r0, r3
 800390a:	fba7 3000 	umull	r3, r0, r7, r0
 800390e:	0940      	lsrs	r0, r0, #5
 8003910:	fb08 6810 	mls	r8, r8, r0, r6
 8003914:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8003918:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800391c:	fba7 3708 	umull	r3, r7, r7, r8
 8003920:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	442f      	add	r7, r5
 8003928:	609f      	str	r7, [r3, #8]
}
 800392a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800392e:	bf00      	nop
 8003930:	40011000 	.word	0x40011000
 8003934:	51eb851f 	.word	0x51eb851f

08003938 <HAL_UART_Init>:
  if (huart == NULL)
 8003938:	b358      	cbz	r0, 8003992 <HAL_UART_Init+0x5a>
{
 800393a:	b510      	push	{r4, lr}
 800393c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800393e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003942:	b30b      	cbz	r3, 8003988 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003944:	2324      	movs	r3, #36	; 0x24
 8003946:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	68d3      	ldr	r3, [r2, #12]
 800394e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003952:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003954:	4620      	mov	r0, r4
 8003956:	f7ff fe55 	bl	8003604 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	6913      	ldr	r3, [r2, #16]
 800395e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003962:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003964:	6822      	ldr	r2, [r4, #0]
 8003966:	6953      	ldr	r3, [r2, #20]
 8003968:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800396c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	68d3      	ldr	r3, [r2, #12]
 8003972:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003976:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003978:	2000      	movs	r0, #0
 800397a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800397c:	2320      	movs	r3, #32
 800397e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003982:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003986:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003988:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800398c:	f000 fc44 	bl	8004218 <HAL_UART_MspInit>
 8003990:	e7d8      	b.n	8003944 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003992:	2001      	movs	r0, #1
}
 8003994:	4770      	bx	lr
	...

08003998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399e:	2400      	movs	r4, #0
 80039a0:	9403      	str	r4, [sp, #12]
 80039a2:	9404      	str	r4, [sp, #16]
 80039a4:	9405      	str	r4, [sp, #20]
 80039a6:	9406      	str	r4, [sp, #24]
 80039a8:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039aa:	9400      	str	r4, [sp, #0]
 80039ac:	4b3c      	ldr	r3, [pc, #240]	; (8003aa0 <MX_GPIO_Init+0x108>)
 80039ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b0:	f042 0204 	orr.w	r2, r2, #4
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
 80039b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b8:	f002 0204 	and.w	r2, r2, #4
 80039bc:	9200      	str	r2, [sp, #0]
 80039be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c0:	9401      	str	r4, [sp, #4]
 80039c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
 80039ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039cc:	f002 0201 	and.w	r2, r2, #1
 80039d0:	9201      	str	r2, [sp, #4]
 80039d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d4:	9402      	str	r4, [sp, #8]
 80039d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d8:	f042 0202 	orr.w	r2, r2, #2
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	9302      	str	r3, [sp, #8]
 80039e6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80039e8:	4e2e      	ldr	r6, [pc, #184]	; (8003aa4 <MX_GPIO_Init+0x10c>)
 80039ea:	4622      	mov	r2, r4
 80039ec:	2120      	movs	r1, #32
 80039ee:	4630      	mov	r0, r6
 80039f0:	f7fe fbbc 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80039f4:	4f2c      	ldr	r7, [pc, #176]	; (8003aa8 <MX_GPIO_Init+0x110>)
 80039f6:	4622      	mov	r2, r4
 80039f8:	2120      	movs	r1, #32
 80039fa:	4638      	mov	r0, r7
 80039fc:	f7fe fbb6 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8003a00:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003aac <MX_GPIO_Init+0x114>
 8003a04:	4622      	mov	r2, r4
 8003a06:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8003a0a:	4648      	mov	r0, r9
 8003a0c:	f7fe fbae 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003a10:	f04f 0a20 	mov.w	sl, #32
 8003a14:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a18:	2501      	movs	r5, #1
 8003a1a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a20:	a903      	add	r1, sp, #12
 8003a22:	4630      	mov	r0, r6
 8003a24:	f7fe fad0 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : kill_Pin */
  GPIO_InitStruct.Pin = kill_Pin;
 8003a28:	2310      	movs	r3, #16
 8003a2a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a2c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8003ab0 <MX_GPIO_Init+0x118>
 8003a30:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a34:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(kill_GPIO_Port, &GPIO_InitStruct);
 8003a36:	a903      	add	r1, sp, #12
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f7fe fac5 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003a3e:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a42:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a46:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a48:	a903      	add	r1, sp, #12
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	f7fe fabc 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8003a50:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003a54:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a56:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5c:	a903      	add	r1, sp, #12
 8003a5e:	4648      	mov	r0, r9
 8003a60:	f7fe fab2 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_RE_INT_Pin */
  GPIO_InitStruct.Pin = PWM_RE_INT_Pin;
 8003a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a68:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a6a:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(PWM_RE_INT_GPIO_Port, &GPIO_InitStruct);
 8003a70:	a903      	add	r1, sp, #12
 8003a72:	4630      	mov	r0, r6
 8003a74:	f7fe faa8 	bl	8001fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003a78:	4622      	mov	r2, r4
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	200a      	movs	r0, #10
 8003a7e:	f7fe fa4b 	bl	8001f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003a82:	200a      	movs	r0, #10
 8003a84:	f7fe fa7c 	bl	8001f80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8003a88:	4622      	mov	r2, r4
 8003a8a:	2104      	movs	r1, #4
 8003a8c:	2017      	movs	r0, #23
 8003a8e:	f7fe fa43 	bl	8001f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a92:	2017      	movs	r0, #23
 8003a94:	f7fe fa74 	bl	8001f80 <HAL_NVIC_EnableIRQ>

}
 8003a98:	b008      	add	sp, #32
 8003a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	40020800 	.word	0x40020800
 8003aac:	40020400 	.word	0x40020400
 8003ab0:	10110000 	.word	0x10110000

08003ab4 <MX_USART2_UART_Init>:
{
 8003ab4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8003ab6:	4808      	ldr	r0, [pc, #32]	; (8003ad8 <MX_USART2_UART_Init+0x24>)
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <MX_USART2_UART_Init+0x28>)
 8003aba:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003abc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003ac0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ac6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ac8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003aca:	220c      	movs	r2, #12
 8003acc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ace:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ad0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ad2:	f7ff ff31 	bl	8003938 <HAL_UART_Init>
}
 8003ad6:	bd08      	pop	{r3, pc}
 8003ad8:	20000634 	.word	0x20000634
 8003adc:	40004400 	.word	0x40004400

08003ae0 <MX_USART6_UART_Init>:
{
 8003ae0:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8003ae2:	4808      	ldr	r0, [pc, #32]	; (8003b04 <MX_USART6_UART_Init+0x24>)
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <MX_USART6_UART_Init+0x28>)
 8003ae6:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8003ae8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003aec:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003aee:	2300      	movs	r3, #0
 8003af0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003af2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003af4:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003af6:	220c      	movs	r2, #12
 8003af8:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afa:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003afc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003afe:	f7ff ff1b 	bl	8003938 <HAL_UART_Init>
}
 8003b02:	bd08      	pop	{r3, pc}
 8003b04:	200005cc 	.word	0x200005cc
 8003b08:	40011400 	.word	0x40011400

08003b0c <MX_I2C2_Init>:
{
 8003b0c:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8003b0e:	4809      	ldr	r0, [pc, #36]	; (8003b34 <MX_I2C2_Init+0x28>)
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <MX_I2C2_Init+0x2c>)
 8003b12:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <MX_I2C2_Init+0x30>)
 8003b16:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003b1c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b22:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b24:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003b26:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b28:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b2a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b2c:	f7fe fd36 	bl	800259c <HAL_I2C_Init>
}
 8003b30:	bd08      	pop	{r3, pc}
 8003b32:	bf00      	nop
 8003b34:	20000320 	.word	0x20000320
 8003b38:	40005800 	.word	0x40005800
 8003b3c:	00061a80 	.word	0x00061a80

08003b40 <MX_TIM4_Init>:
{
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b44:	2400      	movs	r4, #0
 8003b46:	9408      	str	r4, [sp, #32]
 8003b48:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b4a:	9401      	str	r4, [sp, #4]
 8003b4c:	9402      	str	r4, [sp, #8]
 8003b4e:	9403      	str	r4, [sp, #12]
 8003b50:	9404      	str	r4, [sp, #16]
 8003b52:	9405      	str	r4, [sp, #20]
 8003b54:	9406      	str	r4, [sp, #24]
 8003b56:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 8003b58:	4d1b      	ldr	r5, [pc, #108]	; (8003bc8 <MX_TIM4_Init+0x88>)
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <MX_TIM4_Init+0x8c>)
 8003b5c:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 9;
 8003b5e:	2309      	movs	r3, #9
 8003b60:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b62:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 20000;
 8003b64:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003b68:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b6a:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b6c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f7ff fc3b 	bl	80033ea <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b74:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b76:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b78:	a908      	add	r1, sp, #32
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f7ff fd1e 	bl	80035bc <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b80:	2360      	movs	r3, #96	; 0x60
 8003b82:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003b84:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b86:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003b88:	2604      	movs	r6, #4
 8003b8a:	9605      	str	r6, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	eb0d 0106 	add.w	r1, sp, r6
 8003b92:	4628      	mov	r0, r5
 8003b94:	f7ff fc74 	bl	8003480 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b98:	4632      	mov	r2, r6
 8003b9a:	eb0d 0106 	add.w	r1, sp, r6
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7ff fc6e 	bl	8003480 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	eb0d 0106 	add.w	r1, sp, r6
 8003baa:	4628      	mov	r0, r5
 8003bac:	f7ff fc68 	bl	8003480 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bb0:	220c      	movs	r2, #12
 8003bb2:	eb0d 0106 	add.w	r1, sp, r6
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f7ff fc62 	bl	8003480 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f000 faff 	bl	80041c0 <HAL_TIM_MspPostInit>
}
 8003bc2:	b00a      	add	sp, #40	; 0x28
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200004d0 	.word	0x200004d0
 8003bcc:	40000800 	.word	0x40000800

08003bd0 <MX_ADC1_Init>:
{
 8003bd0:	b530      	push	{r4, r5, lr}
 8003bd2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	9302      	str	r3, [sp, #8]
 8003bdc:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8003bde:	4c11      	ldr	r4, [pc, #68]	; (8003c24 <MX_ADC1_Init+0x54>)
 8003be0:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <MX_ADC1_Init+0x58>)
 8003be2:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003be8:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003bea:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003bec:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003bee:	2501      	movs	r5, #1
 8003bf0:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003bf2:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bf8:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <MX_ADC1_Init+0x5c>)
 8003bfa:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bfc:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003bfe:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003c00:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c04:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c06:	4620      	mov	r0, r4
 8003c08:	f7fe f876 	bl	8001cf8 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_7;
 8003c0c:	2307      	movs	r3, #7
 8003c0e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8003c10:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8003c12:	2302      	movs	r3, #2
 8003c14:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c16:	4669      	mov	r1, sp
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7fe f899 	bl	8001d50 <HAL_ADC_ConfigChannel>
}
 8003c1e:	b005      	add	sp, #20
 8003c20:	bd30      	pop	{r4, r5, pc}
 8003c22:	bf00      	nop
 8003c24:	2000051c 	.word	0x2000051c
 8003c28:	40012000 	.word	0x40012000
 8003c2c:	0f000001 	.word	0x0f000001

08003c30 <MX_SPI2_Init>:
{
 8003c30:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8003c32:	480c      	ldr	r0, [pc, #48]	; (8003c64 <MX_SPI2_Init+0x34>)
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <MX_SPI2_Init+0x38>)
 8003c36:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c38:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003c3c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c42:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c44:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c46:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003c4e:	2220      	movs	r2, #32
 8003c50:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c52:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c54:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c56:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c58:	230a      	movs	r3, #10
 8003c5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c5c:	f7ff fa9a 	bl	8003194 <HAL_SPI_Init>
}
 8003c60:	bd08      	pop	{r3, pc}
 8003c62:	bf00      	nop
 8003c64:	20000474 	.word	0x20000474
 8003c68:	40003800 	.word	0x40003800

08003c6c <MX_TIM11_Init>:
{
 8003c6c:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8003c6e:	4807      	ldr	r0, [pc, #28]	; (8003c8c <MX_TIM11_Init+0x20>)
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <MX_TIM11_Init+0x24>)
 8003c72:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100-1;
 8003c74:	2363      	movs	r3, #99	; 0x63
 8003c76:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535-1;
 8003c7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c80:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c82:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c84:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003c86:	f7ff fb97 	bl	80033b8 <HAL_TIM_Base_Init>
}
 8003c8a:	bd08      	pop	{r3, pc}
 8003c8c:	20000584 	.word	0x20000584
 8003c90:	40014800 	.word	0x40014800

08003c94 <SystemClock_Config>:
{
 8003c94:	b530      	push	{r4, r5, lr}
 8003c96:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c98:	2230      	movs	r2, #48	; 0x30
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	a808      	add	r0, sp, #32
 8003c9e:	f000 fbdc 	bl	800445a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ca2:	2400      	movs	r4, #0
 8003ca4:	9403      	str	r4, [sp, #12]
 8003ca6:	9404      	str	r4, [sp, #16]
 8003ca8:	9405      	str	r4, [sp, #20]
 8003caa:	9406      	str	r4, [sp, #24]
 8003cac:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	9401      	str	r4, [sp, #4]
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <SystemClock_Config+0x88>)
 8003cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc4:	9402      	str	r4, [sp, #8]
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <SystemClock_Config+0x8c>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cd6:	9302      	str	r3, [sp, #8]
 8003cd8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cda:	2502      	movs	r5, #2
 8003cdc:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ce2:	2310      	movs	r3, #16
 8003ce4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ce6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ce8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003cea:	2308      	movs	r3, #8
 8003cec:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003cee:	2364      	movs	r3, #100	; 0x64
 8003cf0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cf2:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cf8:	a808      	add	r0, sp, #32
 8003cfa:	f7fe ff41 	bl	8002b80 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cfe:	230f      	movs	r3, #15
 8003d00:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d02:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d04:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d0a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d0c:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003d0e:	2103      	movs	r1, #3
 8003d10:	a803      	add	r0, sp, #12
 8003d12:	f7ff f96d 	bl	8002ff0 <HAL_RCC_ClockConfig>
}
 8003d16:	b015      	add	sp, #84	; 0x54
 8003d18:	bd30      	pop	{r4, r5, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40007000 	.word	0x40007000

08003d24 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8003d24:	4b01      	ldr	r3, [pc, #4]	; (8003d2c <PWM1_Set+0x8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6358      	str	r0, [r3, #52]	; 0x34
}
 8003d2a:	4770      	bx	lr
 8003d2c:	200004d0 	.word	0x200004d0

08003d30 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8003d30:	4b01      	ldr	r3, [pc, #4]	; (8003d38 <PWM2_Set+0x8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6398      	str	r0, [r3, #56]	; 0x38

}
 8003d36:	4770      	bx	lr
 8003d38:	200004d0 	.word	0x200004d0

08003d3c <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8003d3c:	4b01      	ldr	r3, [pc, #4]	; (8003d44 <PWM3_Set+0x8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8003d42:	4770      	bx	lr
 8003d44:	200004d0 	.word	0x200004d0

08003d48 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8003d48:	4b01      	ldr	r3, [pc, #4]	; (8003d50 <PWM4_Set+0x8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6418      	str	r0, [r3, #64]	; 0x40
}
 8003d4e:	4770      	bx	lr
 8003d50:	200004d0 	.word	0x200004d0

08003d54 <main>:
{
 8003d54:	b508      	push	{r3, lr}
  HAL_Init();
 8003d56:	f7fd ff09 	bl	8001b6c <HAL_Init>
  SystemClock_Config();
 8003d5a:	f7ff ff9b 	bl	8003c94 <SystemClock_Config>
  MX_GPIO_Init();
 8003d5e:	f7ff fe1b 	bl	8003998 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d62:	f7ff fea7 	bl	8003ab4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003d66:	f7ff fed1 	bl	8003b0c <MX_I2C2_Init>
  MX_TIM4_Init();
 8003d6a:	f7ff fee9 	bl	8003b40 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8003d6e:	f7ff feb7 	bl	8003ae0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8003d72:	f7ff ff2d 	bl	8003bd0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003d76:	f7ff ff5b 	bl	8003c30 <MX_SPI2_Init>
  MX_TIM11_Init();
 8003d7a:	f7ff ff77 	bl	8003c6c <MX_TIM11_Init>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003d7e:	4c12      	ldr	r4, [pc, #72]	; (8003dc8 <main+0x74>)
 8003d80:	2100      	movs	r1, #0
 8003d82:	4620      	mov	r0, r4
 8003d84:	f7ff fbfc 	bl	8003580 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003d88:	2104      	movs	r1, #4
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff fbf8 	bl	8003580 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003d90:	2108      	movs	r1, #8
 8003d92:	4620      	mov	r0, r4
 8003d94:	f7ff fbf4 	bl	8003580 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003d98:	210c      	movs	r1, #12
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f7ff fbf0 	bl	8003580 <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8003da0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003da4:	f7ff ffbe 	bl	8003d24 <PWM1_Set>
	PWM2_Set(2500);
 8003da8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003dac:	f7ff ffc0 	bl	8003d30 <PWM2_Set>
	PWM3_Set(2500);
 8003db0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003db4:	f7ff ffc2 	bl	8003d3c <PWM3_Set>
	PWM4_Set(2500);
 8003db8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003dbc:	f7ff ffc4 	bl	8003d48 <PWM4_Set>
		main_loop = 1;
 8003dc0:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <main+0x78>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e7fb      	b.n	8003dc0 <main+0x6c>
 8003dc8:	200004d0 	.word	0x200004d0
 8003dcc:	200002ac 	.word	0x200002ac

08003dd0 <pulse_posedge_handler>:
 * (1 CW)     (3 CCW)
 *
 * This function gets called by the GPIO_EXTI callback when the PWM_RE_INT_Pin triggers an interrupt,
 * which is on the rising edge of every PWM pulse.
 */
void pulse_posedge_handler() {
 8003dd0:	b538      	push	{r3, r4, r5, lr}

	//Only want this to happen in main loop - not during init sequence
	if (main_loop) {
 8003dd2:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <pulse_posedge_handler+0x15c>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b903      	cbnz	r3, 8003dda <pulse_posedge_handler+0xa>

#endif

	}

}
 8003dd8:	bd38      	pop	{r3, r4, r5, pc}
		tim11_count = htim11.Instance->CNT; //read TIM11 counter value, used for integral calculations
 8003dda:	4b55      	ldr	r3, [pc, #340]	; (8003f30 <pulse_posedge_handler+0x160>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003de0:	4b54      	ldr	r3, [pc, #336]	; (8003f34 <pulse_posedge_handler+0x164>)
 8003de2:	6018      	str	r0, [r3, #0]
		calculate_euler(tim11_count);
 8003de4:	f7fd fb8a 	bl	80014fc <calculate_euler>
		if (airmode) {
 8003de8:	4b53      	ldr	r3, [pc, #332]	; (8003f38 <pulse_posedge_handler+0x168>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 808f 	beq.w	8003f10 <pulse_posedge_handler+0x140>
			pid_output_pitch = pid_calculate_pitch(pitch, 0,
 8003df2:	4b52      	ldr	r3, [pc, #328]	; (8003f3c <pulse_posedge_handler+0x16c>)
 8003df4:	edd3 0a00 	vldr	s1, [r3]
 8003df8:	2000      	movs	r0, #0
 8003dfa:	4b51      	ldr	r3, [pc, #324]	; (8003f40 <pulse_posedge_handler+0x170>)
 8003dfc:	ed93 0a00 	vldr	s0, [r3]
 8003e00:	f7fd fdfe 	bl	8001a00 <pid_calculate_pitch>
 8003e04:	4b4f      	ldr	r3, [pc, #316]	; (8003f44 <pulse_posedge_handler+0x174>)
 8003e06:	ed83 0a00 	vstr	s0, [r3]
			pid_output_roll = pid_calculate_roll(roll, 0, roll_setpoint);
 8003e0a:	4b4f      	ldr	r3, [pc, #316]	; (8003f48 <pulse_posedge_handler+0x178>)
 8003e0c:	edd3 0a00 	vldr	s1, [r3]
 8003e10:	2000      	movs	r0, #0
 8003e12:	4b4e      	ldr	r3, [pc, #312]	; (8003f4c <pulse_posedge_handler+0x17c>)
 8003e14:	ed93 0a00 	vldr	s0, [r3]
 8003e18:	f7fd fd74 	bl	8001904 <pid_calculate_roll>
 8003e1c:	4b4c      	ldr	r3, [pc, #304]	; (8003f50 <pulse_posedge_handler+0x180>)
 8003e1e:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 8003e22:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <pulse_posedge_handler+0x184>)
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	4b4a      	ldr	r3, [pc, #296]	; (8003f50 <pulse_posedge_handler+0x180>)
 8003e28:	edd3 7a00 	vldr	s15, [r3]
 8003e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e30:	ee17 1a90 	vmov	r1, s15
 8003e34:	1a42      	subs	r2, r0, r1
 8003e36:	4b43      	ldr	r3, [pc, #268]	; (8003f44 <pulse_posedge_handler+0x174>)
 8003e38:	edd3 7a00 	vldr	s15, [r3]
 8003e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e40:	ee17 3a90 	vmov	r3, s15
 8003e44:	1ad4      	subs	r4, r2, r3
 8003e46:	4d44      	ldr	r5, [pc, #272]	; (8003f58 <pulse_posedge_handler+0x188>)
 8003e48:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 8003e4a:	441a      	add	r2, r3
 8003e4c:	4d43      	ldr	r5, [pc, #268]	; (8003f5c <pulse_posedge_handler+0x18c>)
 8003e4e:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 8003e50:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 8003e52:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 8003e54:	4d42      	ldr	r5, [pc, #264]	; (8003f60 <pulse_posedge_handler+0x190>)
 8003e56:	6028      	str	r0, [r5, #0]
				+ (int) pid_output_pitch;
 8003e58:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 8003e5a:	4942      	ldr	r1, [pc, #264]	; (8003f64 <pulse_posedge_handler+0x194>)
 8003e5c:	600b      	str	r3, [r1, #0]
		if (esc1_total < ESC_MIN) {
 8003e5e:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8003e62:	428c      	cmp	r4, r1
 8003e64:	dc03      	bgt.n	8003e6e <pulse_posedge_handler+0x9e>
			esc1_total = ESC_MIN;
 8003e66:	493c      	ldr	r1, [pc, #240]	; (8003f58 <pulse_posedge_handler+0x188>)
 8003e68:	f240 44e2 	movw	r4, #1250	; 0x4e2
 8003e6c:	600c      	str	r4, [r1, #0]
		if (esc1_total > ESC_MAX) {
 8003e6e:	493a      	ldr	r1, [pc, #232]	; (8003f58 <pulse_posedge_handler+0x188>)
 8003e70:	680c      	ldr	r4, [r1, #0]
 8003e72:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003e76:	428c      	cmp	r4, r1
 8003e78:	dd03      	ble.n	8003e82 <pulse_posedge_handler+0xb2>
			esc1_total = ESC_MAX;
 8003e7a:	4937      	ldr	r1, [pc, #220]	; (8003f58 <pulse_posedge_handler+0x188>)
 8003e7c:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8003e80:	600c      	str	r4, [r1, #0]
		if (esc2_total < ESC_MIN) {
 8003e82:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8003e86:	428a      	cmp	r2, r1
 8003e88:	dc03      	bgt.n	8003e92 <pulse_posedge_handler+0xc2>
			esc2_total = ESC_MIN;
 8003e8a:	4a34      	ldr	r2, [pc, #208]	; (8003f5c <pulse_posedge_handler+0x18c>)
 8003e8c:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003e90:	6011      	str	r1, [r2, #0]
		if (esc2_total > ESC_MAX) {
 8003e92:	4a32      	ldr	r2, [pc, #200]	; (8003f5c <pulse_posedge_handler+0x18c>)
 8003e94:	6811      	ldr	r1, [r2, #0]
 8003e96:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003e9a:	4291      	cmp	r1, r2
 8003e9c:	dd03      	ble.n	8003ea6 <pulse_posedge_handler+0xd6>
			esc2_total = ESC_MAX;
 8003e9e:	4a2f      	ldr	r2, [pc, #188]	; (8003f5c <pulse_posedge_handler+0x18c>)
 8003ea0:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003ea4:	6011      	str	r1, [r2, #0]
		if (esc3_total < ESC_MIN) {
 8003ea6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8003eaa:	4290      	cmp	r0, r2
 8003eac:	dc03      	bgt.n	8003eb6 <pulse_posedge_handler+0xe6>
			esc3_total = ESC_MIN;
 8003eae:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <pulse_posedge_handler+0x190>)
 8003eb0:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003eb4:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 8003eb6:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <pulse_posedge_handler+0x190>)
 8003eb8:	6811      	ldr	r1, [r2, #0]
 8003eba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003ebe:	4291      	cmp	r1, r2
 8003ec0:	dd03      	ble.n	8003eca <pulse_posedge_handler+0xfa>
			esc3_total = ESC_MAX;
 8003ec2:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <pulse_posedge_handler+0x190>)
 8003ec4:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003ec8:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 8003eca:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	dc03      	bgt.n	8003eda <pulse_posedge_handler+0x10a>
			esc4_total = ESC_MIN;
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <pulse_posedge_handler+0x194>)
 8003ed4:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8003ed8:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <pulse_posedge_handler+0x194>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	dd03      	ble.n	8003eee <pulse_posedge_handler+0x11e>
			esc4_total = ESC_MAX;
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <pulse_posedge_handler+0x194>)
 8003ee8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003eec:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8003eee:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <pulse_posedge_handler+0x188>)
 8003ef0:	8818      	ldrh	r0, [r3, #0]
 8003ef2:	f7ff ff17 	bl	8003d24 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8003ef6:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <pulse_posedge_handler+0x18c>)
 8003ef8:	8818      	ldrh	r0, [r3, #0]
 8003efa:	f7ff ff19 	bl	8003d30 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8003efe:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <pulse_posedge_handler+0x190>)
 8003f00:	8818      	ldrh	r0, [r3, #0]
 8003f02:	f7ff ff1b 	bl	8003d3c <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8003f06:	4b17      	ldr	r3, [pc, #92]	; (8003f64 <pulse_posedge_handler+0x194>)
 8003f08:	8818      	ldrh	r0, [r3, #0]
 8003f0a:	f7ff ff1d 	bl	8003d48 <PWM4_Set>
}
 8003f0e:	e763      	b.n	8003dd8 <pulse_posedge_handler+0x8>
			pid_output_roll = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <pulse_posedge_handler+0x180>)
 8003f14:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 8003f16:	4a0b      	ldr	r2, [pc, #44]	; (8003f44 <pulse_posedge_handler+0x174>)
 8003f18:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 8003f1a:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <pulse_posedge_handler+0x198>)
 8003f1c:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8003f1e:	f7fd fd5d 	bl	80019dc <reset_pid_roll>
			reset_pid_pitch();
 8003f22:	f7fd fdd9 	bl	8001ad8 <reset_pid_pitch>
			reset_pid_yaw();
 8003f26:	f7fd fde9 	bl	8001afc <reset_pid_yaw>
 8003f2a:	e77a      	b.n	8003e22 <pulse_posedge_handler+0x52>
 8003f2c:	200002ac 	.word	0x200002ac
 8003f30:	20000584 	.word	0x20000584
 8003f34:	200002c8 	.word	0x200002c8
 8003f38:	20000298 	.word	0x20000298
 8003f3c:	200002bc 	.word	0x200002bc
 8003f40:	20000674 	.word	0x20000674
 8003f44:	200002b0 	.word	0x200002b0
 8003f48:	200002c0 	.word	0x200002c0
 8003f4c:	20000678 	.word	0x20000678
 8003f50:	200002b4 	.word	0x200002b4
 8003f54:	200002c4 	.word	0x200002c4
 8003f58:	2000029c 	.word	0x2000029c
 8003f5c:	200002a0 	.word	0x200002a0
 8003f60:	200002a4 	.word	0x200002a4
 8003f64:	200002a8 	.word	0x200002a8
 8003f68:	200002b8 	.word	0x200002b8

08003f6c <HAL_GPIO_EXTI_Callback>:

//GPIO interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

//GPIO pin configured to capture rising edge interrupt of PWM signals
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 8003f6c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003f70:	d000      	beq.n	8003f74 <HAL_GPIO_EXTI_Callback+0x8>
 8003f72:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003f74:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 8003f76:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x18>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b903      	cbnz	r3, 8003f7e <HAL_GPIO_EXTI_Callback+0x12>

	if (GPIO_Pin == kill_Pin && main_loop) {
		//kill();
	}

}
 8003f7c:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 8003f7e:	f7ff ff27 	bl	8003dd0 <pulse_posedge_handler>
}
 8003f82:	e7fb      	b.n	8003f7c <HAL_GPIO_EXTI_Callback+0x10>
 8003f84:	200002ac 	.word	0x200002ac

08003f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f88:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	9100      	str	r1, [sp, #0]
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_MspInit+0x34>)
 8003f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
 8003f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003f9e:	9200      	str	r2, [sp, #0]
 8003fa0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	9101      	str	r1, [sp, #4]
 8003fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fa6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fb6:	b002      	add	sp, #8
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800

08003fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003fc0:	b500      	push	{lr}
 8003fc2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9303      	str	r3, [sp, #12]
 8003fc8:	9304      	str	r3, [sp, #16]
 8003fca:	9305      	str	r3, [sp, #20]
 8003fcc:	9306      	str	r3, [sp, #24]
 8003fce:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8003fd0:	6802      	ldr	r2, [r0, #0]
 8003fd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fd6:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d002      	beq.n	8003fe4 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fde:	b009      	add	sp, #36	; 0x24
 8003fe0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	9101      	str	r1, [sp, #4]
 8003fe8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff2:	645a      	str	r2, [r3, #68]	; 0x44
 8003ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003ffa:	9201      	str	r2, [sp, #4]
 8003ffc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	9102      	str	r1, [sp, #8]
 8004000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	9302      	str	r3, [sp, #8]
 8004010:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004016:	2303      	movs	r3, #3
 8004018:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401a:	a903      	add	r1, sp, #12
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <HAL_ADC_MspInit+0x64>)
 800401e:	f7fd ffd3 	bl	8001fc8 <HAL_GPIO_Init>
}
 8004022:	e7dc      	b.n	8003fde <HAL_ADC_MspInit+0x1e>
 8004024:	40020000 	.word	0x40020000

08004028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800402c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402e:	2300      	movs	r3, #0
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	9304      	str	r3, [sp, #16]
 8004034:	9305      	str	r3, [sp, #20]
 8004036:	9306      	str	r3, [sp, #24]
 8004038:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 800403a:	6802      	ldr	r2, [r0, #0]
 800403c:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <HAL_I2C_MspInit+0x90>)
 800403e:	429a      	cmp	r2, r3
 8004040:	d002      	beq.n	8004048 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004042:	b009      	add	sp, #36	; 0x24
 8004044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004048:	2500      	movs	r5, #0
 800404a:	9501      	str	r5, [sp, #4]
 800404c:	4c1b      	ldr	r4, [pc, #108]	; (80040bc <HAL_I2C_MspInit+0x94>)
 800404e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	6323      	str	r3, [r4, #48]	; 0x30
 8004056:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004064:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004066:	f04f 0912 	mov.w	r9, #18
 800406a:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800406e:	f04f 0801 	mov.w	r8, #1
 8004072:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004076:	2703      	movs	r7, #3
 8004078:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800407a:	2304      	movs	r3, #4
 800407c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407e:	4e10      	ldr	r6, [pc, #64]	; (80040c0 <HAL_I2C_MspInit+0x98>)
 8004080:	a903      	add	r1, sp, #12
 8004082:	4630      	mov	r0, r6
 8004084:	f7fd ffa0 	bl	8001fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004088:	2308      	movs	r3, #8
 800408a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800408c:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004090:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004094:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004096:	2309      	movs	r3, #9
 8004098:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800409a:	a903      	add	r1, sp, #12
 800409c:	4630      	mov	r0, r6
 800409e:	f7fd ff93 	bl	8001fc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80040a2:	9502      	str	r5, [sp, #8]
 80040a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040aa:	6423      	str	r3, [r4, #64]	; 0x40
 80040ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b2:	9302      	str	r3, [sp, #8]
 80040b4:	9b02      	ldr	r3, [sp, #8]
}
 80040b6:	e7c4      	b.n	8004042 <HAL_I2C_MspInit+0x1a>
 80040b8:	40005800 	.word	0x40005800
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40020400 	.word	0x40020400

080040c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c8:	2300      	movs	r3, #0
 80040ca:	9303      	str	r3, [sp, #12]
 80040cc:	9304      	str	r3, [sp, #16]
 80040ce:	9305      	str	r3, [sp, #20]
 80040d0:	9306      	str	r3, [sp, #24]
 80040d2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 80040d4:	6802      	ldr	r2, [r0, #0]
 80040d6:	4b1f      	ldr	r3, [pc, #124]	; (8004154 <HAL_SPI_MspInit+0x90>)
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80040dc:	b009      	add	sp, #36	; 0x24
 80040de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040e0:	2400      	movs	r4, #0
 80040e2:	9400      	str	r4, [sp, #0]
 80040e4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80040e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40
 80040f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80040f6:	9200      	str	r2, [sp, #0]
 80040f8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040fa:	9401      	str	r4, [sp, #4]
 80040fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040fe:	f042 0204 	orr.w	r2, r2, #4
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
 8004104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004106:	f002 0204 	and.w	r2, r2, #4
 800410a:	9201      	str	r2, [sp, #4]
 800410c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800410e:	9402      	str	r4, [sp, #8]
 8004110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004112:	f042 0202 	orr.w	r2, r2, #2
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	9302      	str	r3, [sp, #8]
 8004120:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004122:	2304      	movs	r3, #4
 8004124:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004126:	2702      	movs	r7, #2
 8004128:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800412a:	2603      	movs	r6, #3
 800412c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800412e:	2505      	movs	r5, #5
 8004130:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004132:	a903      	add	r1, sp, #12
 8004134:	4808      	ldr	r0, [pc, #32]	; (8004158 <HAL_SPI_MspInit+0x94>)
 8004136:	f7fd ff47 	bl	8001fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800413a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800413e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004140:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004142:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004144:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004146:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004148:	a903      	add	r1, sp, #12
 800414a:	4804      	ldr	r0, [pc, #16]	; (800415c <HAL_SPI_MspInit+0x98>)
 800414c:	f7fd ff3c 	bl	8001fc8 <HAL_GPIO_Init>
}
 8004150:	e7c4      	b.n	80040dc <HAL_SPI_MspInit+0x18>
 8004152:	bf00      	nop
 8004154:	40003800 	.word	0x40003800
 8004158:	40020800 	.word	0x40020800
 800415c:	40020400 	.word	0x40020400

08004160 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 8004160:	6802      	ldr	r2, [r0, #0]
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_TIM_PWM_MspInit+0x28>)
 8004164:	429a      	cmp	r2, r3
 8004166:	d000      	beq.n	800416a <HAL_TIM_PWM_MspInit+0xa>
 8004168:	4770      	bx	lr
{
 800416a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800416c:	2300      	movs	r3, #0
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_TIM_PWM_MspInit+0x2c>)
 8004172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004174:	f042 0204 	orr.w	r2, r2, #4
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004184:	b002      	add	sp, #8
 8004186:	4770      	bx	lr
 8004188:	40000800 	.word	0x40000800
 800418c:	40023800 	.word	0x40023800

08004190 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8004190:	6802      	ldr	r2, [r0, #0]
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_TIM_Base_MspInit+0x28>)
 8004194:	429a      	cmp	r2, r3
 8004196:	d000      	beq.n	800419a <HAL_TIM_Base_MspInit+0xa>
 8004198:	4770      	bx	lr
{
 800419a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800419c:	2300      	movs	r3, #0
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_TIM_Base_MspInit+0x2c>)
 80041a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80041b4:	b002      	add	sp, #8
 80041b6:	4770      	bx	lr
 80041b8:	40014800 	.word	0x40014800
 80041bc:	40023800 	.word	0x40023800

080041c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041c0:	b500      	push	{lr}
 80041c2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c4:	2300      	movs	r3, #0
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	9302      	str	r3, [sp, #8]
 80041ca:	9303      	str	r3, [sp, #12]
 80041cc:	9304      	str	r3, [sp, #16]
 80041ce:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 80041d0:	6802      	ldr	r2, [r0, #0]
 80041d2:	4b0e      	ldr	r3, [pc, #56]	; (800420c <HAL_TIM_MspPostInit+0x4c>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d002      	beq.n	80041de <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80041d8:	b007      	add	sp, #28
 80041da:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_TIM_MspPostInit+0x50>)
 80041e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e6:	f042 0202 	orr.w	r2, r2, #2
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80041f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80041fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fc:	2302      	movs	r3, #2
 80041fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004200:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004202:	a901      	add	r1, sp, #4
 8004204:	4803      	ldr	r0, [pc, #12]	; (8004214 <HAL_TIM_MspPostInit+0x54>)
 8004206:	f7fd fedf 	bl	8001fc8 <HAL_GPIO_Init>
}
 800420a:	e7e5      	b.n	80041d8 <HAL_TIM_MspPostInit+0x18>
 800420c:	40000800 	.word	0x40000800
 8004210:	40023800 	.word	0x40023800
 8004214:	40020400 	.word	0x40020400

08004218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004218:	b500      	push	{lr}
 800421a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421c:	2300      	movs	r3, #0
 800421e:	9305      	str	r3, [sp, #20]
 8004220:	9306      	str	r3, [sp, #24]
 8004222:	9307      	str	r3, [sp, #28]
 8004224:	9308      	str	r3, [sp, #32]
 8004226:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 8004228:	6803      	ldr	r3, [r0, #0]
 800422a:	4a29      	ldr	r2, [pc, #164]	; (80042d0 <HAL_UART_MspInit+0xb8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d005      	beq.n	800423c <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8004230:	4a28      	ldr	r2, [pc, #160]	; (80042d4 <HAL_UART_MspInit+0xbc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_UART_MspInit+0x6e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004236:	b00b      	add	sp, #44	; 0x2c
 8004238:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800423c:	2100      	movs	r1, #0
 800423e:	9101      	str	r1, [sp, #4]
 8004240:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_UART_MspInit+0xc0>)
 8004242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004244:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
 800424a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004250:	9201      	str	r2, [sp, #4]
 8004252:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004254:	9102      	str	r1, [sp, #8]
 8004256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004258:	f042 0201 	orr.w	r2, r2, #1
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	9302      	str	r3, [sp, #8]
 8004266:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004268:	230c      	movs	r3, #12
 800426a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426c:	2302      	movs	r3, #2
 800426e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004270:	2301      	movs	r3, #1
 8004272:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004274:	2303      	movs	r3, #3
 8004276:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004278:	2307      	movs	r3, #7
 800427a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427c:	a905      	add	r1, sp, #20
 800427e:	4817      	ldr	r0, [pc, #92]	; (80042dc <HAL_UART_MspInit+0xc4>)
 8004280:	f7fd fea2 	bl	8001fc8 <HAL_GPIO_Init>
 8004284:	e7d7      	b.n	8004236 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004286:	2100      	movs	r1, #0
 8004288:	9103      	str	r1, [sp, #12]
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_UART_MspInit+0xc0>)
 800428c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428e:	f042 0220 	orr.w	r2, r2, #32
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
 8004294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004296:	f002 0220 	and.w	r2, r2, #32
 800429a:	9203      	str	r2, [sp, #12]
 800429c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800429e:	9104      	str	r1, [sp, #16]
 80042a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a2:	f042 0204 	orr.w	r2, r2, #4
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	9304      	str	r3, [sp, #16]
 80042b0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042b2:	23c0      	movs	r3, #192	; 0xc0
 80042b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b6:	2302      	movs	r3, #2
 80042b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042ba:	2301      	movs	r3, #1
 80042bc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042be:	2303      	movs	r3, #3
 80042c0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80042c2:	2308      	movs	r3, #8
 80042c4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042c6:	a905      	add	r1, sp, #20
 80042c8:	4805      	ldr	r0, [pc, #20]	; (80042e0 <HAL_UART_MspInit+0xc8>)
 80042ca:	f7fd fe7d 	bl	8001fc8 <HAL_GPIO_Init>
}
 80042ce:	e7b2      	b.n	8004236 <HAL_UART_MspInit+0x1e>
 80042d0:	40004400 	.word	0x40004400
 80042d4:	40011400 	.word	0x40011400
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40020000 	.word	0x40020000
 80042e0:	40020800 	.word	0x40020800

080042e4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042e4:	4770      	bx	lr

080042e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042e6:	e7fe      	b.n	80042e6 <HardFault_Handler>

080042e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042e8:	e7fe      	b.n	80042e8 <MemManage_Handler>

080042ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042ea:	e7fe      	b.n	80042ea <BusFault_Handler>

080042ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042ec:	e7fe      	b.n	80042ec <UsageFault_Handler>

080042ee <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042ee:	4770      	bx	lr

080042f0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042f0:	4770      	bx	lr

080042f2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042f2:	4770      	bx	lr

080042f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042f6:	f7fd fc53 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042fa:	bd08      	pop	{r3, pc}

080042fc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80042fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80042fe:	2010      	movs	r0, #16
 8004300:	f7fd ff3a 	bl	8002178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004304:	bd08      	pop	{r3, pc}

08004306 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004306:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004308:	f44f 7080 	mov.w	r0, #256	; 0x100
 800430c:	f7fd ff34 	bl	8002178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004310:	bd08      	pop	{r3, pc}
	...

08004314 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004314:	b508      	push	{r3, lr}
 8004316:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004318:	4a0b      	ldr	r2, [pc, #44]	; (8004348 <_sbrk+0x34>)
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	b142      	cbz	r2, 8004330 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <_sbrk+0x34>)
 8004320:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004322:	4403      	add	r3, r0
 8004324:	466a      	mov	r2, sp
 8004326:	4293      	cmp	r3, r2
 8004328:	d806      	bhi.n	8004338 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800432a:	4a07      	ldr	r2, [pc, #28]	; (8004348 <_sbrk+0x34>)
 800432c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800432e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004330:	4a05      	ldr	r2, [pc, #20]	; (8004348 <_sbrk+0x34>)
 8004332:	4906      	ldr	r1, [pc, #24]	; (800434c <_sbrk+0x38>)
 8004334:	6011      	str	r1, [r2, #0]
 8004336:	e7f2      	b.n	800431e <_sbrk+0xa>
		errno = ENOMEM;
 8004338:	f000 f85a 	bl	80043f0 <__errno>
 800433c:	230c      	movs	r3, #12
 800433e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004344:	e7f3      	b.n	800432e <_sbrk+0x1a>
 8004346:	bf00      	nop
 8004348:	200002cc 	.word	0x200002cc
 800434c:	20000690 	.word	0x20000690

08004350 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004350:	490f      	ldr	r1, [pc, #60]	; (8004390 <SystemInit+0x40>)
 8004352:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004356:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <SystemInit+0x44>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004368:	2000      	movs	r0, #0
 800436a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004372:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004376:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004378:	4a07      	ldr	r2, [pc, #28]	; (8004398 <SystemInit+0x48>)
 800437a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004382:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004384:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004386:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800438a:	608b      	str	r3, [r1, #8]
#endif
}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000ed00 	.word	0xe000ed00
 8004394:	40023800 	.word	0x40023800
 8004398:	24003010 	.word	0x24003010

0800439c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800439c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043a2:	e003      	b.n	80043ac <LoopCopyDataInit>

080043a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80043a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043aa:	3104      	adds	r1, #4

080043ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043ac:	480b      	ldr	r0, [pc, #44]	; (80043dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043ae:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80043b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043b4:	d3f6      	bcc.n	80043a4 <CopyDataInit>
  ldr  r2, =_sbss
 80043b6:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80043b8:	e002      	b.n	80043c0 <LoopFillZerobss>

080043ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043bc:	f842 3b04 	str.w	r3, [r2], #4

080043c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043c4:	d3f9      	bcc.n	80043ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043c6:	f7ff ffc3 	bl	8004350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043ca:	f000 f817 	bl	80043fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043ce:	f7ff fcc1 	bl	8003d54 <main>
  bx  lr    
 80043d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80043d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80043d8:	080067ec 	.word	0x080067ec
  ldr  r0, =_sdata
 80043dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043e0:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 80043e4:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 80043e8:	20000690 	.word	0x20000690

080043ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043ec:	e7fe      	b.n	80043ec <ADC_IRQHandler>
	...

080043f0 <__errno>:
 80043f0:	4b01      	ldr	r3, [pc, #4]	; (80043f8 <__errno+0x8>)
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000068 	.word	0x20000068

080043fc <__libc_init_array>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4e0d      	ldr	r6, [pc, #52]	; (8004434 <__libc_init_array+0x38>)
 8004400:	4c0d      	ldr	r4, [pc, #52]	; (8004438 <__libc_init_array+0x3c>)
 8004402:	1ba4      	subs	r4, r4, r6
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	2500      	movs	r5, #0
 8004408:	42a5      	cmp	r5, r4
 800440a:	d109      	bne.n	8004420 <__libc_init_array+0x24>
 800440c:	4e0b      	ldr	r6, [pc, #44]	; (800443c <__libc_init_array+0x40>)
 800440e:	4c0c      	ldr	r4, [pc, #48]	; (8004440 <__libc_init_array+0x44>)
 8004410:	f002 f872 	bl	80064f8 <_init>
 8004414:	1ba4      	subs	r4, r4, r6
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	2500      	movs	r5, #0
 800441a:	42a5      	cmp	r5, r4
 800441c:	d105      	bne.n	800442a <__libc_init_array+0x2e>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004424:	4798      	blx	r3
 8004426:	3501      	adds	r5, #1
 8004428:	e7ee      	b.n	8004408 <__libc_init_array+0xc>
 800442a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800442e:	4798      	blx	r3
 8004430:	3501      	adds	r5, #1
 8004432:	e7f2      	b.n	800441a <__libc_init_array+0x1e>
 8004434:	080067e4 	.word	0x080067e4
 8004438:	080067e4 	.word	0x080067e4
 800443c:	080067e4 	.word	0x080067e4
 8004440:	080067e8 	.word	0x080067e8

08004444 <memcpy>:
 8004444:	b510      	push	{r4, lr}
 8004446:	1e43      	subs	r3, r0, #1
 8004448:	440a      	add	r2, r1
 800444a:	4291      	cmp	r1, r2
 800444c:	d100      	bne.n	8004450 <memcpy+0xc>
 800444e:	bd10      	pop	{r4, pc}
 8004450:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004454:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004458:	e7f7      	b.n	800444a <memcpy+0x6>

0800445a <memset>:
 800445a:	4402      	add	r2, r0
 800445c:	4603      	mov	r3, r0
 800445e:	4293      	cmp	r3, r2
 8004460:	d100      	bne.n	8004464 <memset+0xa>
 8004462:	4770      	bx	lr
 8004464:	f803 1b01 	strb.w	r1, [r3], #1
 8004468:	e7f9      	b.n	800445e <memset+0x4>

0800446a <__cvt>:
 800446a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800446e:	ec55 4b10 	vmov	r4, r5, d0
 8004472:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004474:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004478:	2d00      	cmp	r5, #0
 800447a:	460e      	mov	r6, r1
 800447c:	4691      	mov	r9, r2
 800447e:	4619      	mov	r1, r3
 8004480:	bfb8      	it	lt
 8004482:	4622      	movlt	r2, r4
 8004484:	462b      	mov	r3, r5
 8004486:	f027 0720 	bic.w	r7, r7, #32
 800448a:	bfbb      	ittet	lt
 800448c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004490:	461d      	movlt	r5, r3
 8004492:	2300      	movge	r3, #0
 8004494:	232d      	movlt	r3, #45	; 0x2d
 8004496:	bfb8      	it	lt
 8004498:	4614      	movlt	r4, r2
 800449a:	2f46      	cmp	r7, #70	; 0x46
 800449c:	700b      	strb	r3, [r1, #0]
 800449e:	d004      	beq.n	80044aa <__cvt+0x40>
 80044a0:	2f45      	cmp	r7, #69	; 0x45
 80044a2:	d100      	bne.n	80044a6 <__cvt+0x3c>
 80044a4:	3601      	adds	r6, #1
 80044a6:	2102      	movs	r1, #2
 80044a8:	e000      	b.n	80044ac <__cvt+0x42>
 80044aa:	2103      	movs	r1, #3
 80044ac:	ab03      	add	r3, sp, #12
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	ab02      	add	r3, sp, #8
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	4632      	mov	r2, r6
 80044b6:	4653      	mov	r3, sl
 80044b8:	ec45 4b10 	vmov	d0, r4, r5
 80044bc:	f000 fbac 	bl	8004c18 <_dtoa_r>
 80044c0:	2f47      	cmp	r7, #71	; 0x47
 80044c2:	4680      	mov	r8, r0
 80044c4:	d102      	bne.n	80044cc <__cvt+0x62>
 80044c6:	f019 0f01 	tst.w	r9, #1
 80044ca:	d026      	beq.n	800451a <__cvt+0xb0>
 80044cc:	2f46      	cmp	r7, #70	; 0x46
 80044ce:	eb08 0906 	add.w	r9, r8, r6
 80044d2:	d111      	bne.n	80044f8 <__cvt+0x8e>
 80044d4:	f898 3000 	ldrb.w	r3, [r8]
 80044d8:	2b30      	cmp	r3, #48	; 0x30
 80044da:	d10a      	bne.n	80044f2 <__cvt+0x88>
 80044dc:	2200      	movs	r2, #0
 80044de:	2300      	movs	r3, #0
 80044e0:	4620      	mov	r0, r4
 80044e2:	4629      	mov	r1, r5
 80044e4:	f7fc fc9c 	bl	8000e20 <__aeabi_dcmpeq>
 80044e8:	b918      	cbnz	r0, 80044f2 <__cvt+0x88>
 80044ea:	f1c6 0601 	rsb	r6, r6, #1
 80044ee:	f8ca 6000 	str.w	r6, [sl]
 80044f2:	f8da 3000 	ldr.w	r3, [sl]
 80044f6:	4499      	add	r9, r3
 80044f8:	2200      	movs	r2, #0
 80044fa:	2300      	movs	r3, #0
 80044fc:	4620      	mov	r0, r4
 80044fe:	4629      	mov	r1, r5
 8004500:	f7fc fc8e 	bl	8000e20 <__aeabi_dcmpeq>
 8004504:	b938      	cbnz	r0, 8004516 <__cvt+0xac>
 8004506:	2230      	movs	r2, #48	; 0x30
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	454b      	cmp	r3, r9
 800450c:	d205      	bcs.n	800451a <__cvt+0xb0>
 800450e:	1c59      	adds	r1, r3, #1
 8004510:	9103      	str	r1, [sp, #12]
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e7f8      	b.n	8004508 <__cvt+0x9e>
 8004516:	f8cd 900c 	str.w	r9, [sp, #12]
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800451e:	eba3 0308 	sub.w	r3, r3, r8
 8004522:	4640      	mov	r0, r8
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	b004      	add	sp, #16
 8004528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800452c <__exponent>:
 800452c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800452e:	2900      	cmp	r1, #0
 8004530:	4604      	mov	r4, r0
 8004532:	bfba      	itte	lt
 8004534:	4249      	neglt	r1, r1
 8004536:	232d      	movlt	r3, #45	; 0x2d
 8004538:	232b      	movge	r3, #43	; 0x2b
 800453a:	2909      	cmp	r1, #9
 800453c:	f804 2b02 	strb.w	r2, [r4], #2
 8004540:	7043      	strb	r3, [r0, #1]
 8004542:	dd20      	ble.n	8004586 <__exponent+0x5a>
 8004544:	f10d 0307 	add.w	r3, sp, #7
 8004548:	461f      	mov	r7, r3
 800454a:	260a      	movs	r6, #10
 800454c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004550:	fb06 1115 	mls	r1, r6, r5, r1
 8004554:	3130      	adds	r1, #48	; 0x30
 8004556:	2d09      	cmp	r5, #9
 8004558:	f803 1c01 	strb.w	r1, [r3, #-1]
 800455c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004560:	4629      	mov	r1, r5
 8004562:	dc09      	bgt.n	8004578 <__exponent+0x4c>
 8004564:	3130      	adds	r1, #48	; 0x30
 8004566:	3b02      	subs	r3, #2
 8004568:	f802 1c01 	strb.w	r1, [r2, #-1]
 800456c:	42bb      	cmp	r3, r7
 800456e:	4622      	mov	r2, r4
 8004570:	d304      	bcc.n	800457c <__exponent+0x50>
 8004572:	1a10      	subs	r0, r2, r0
 8004574:	b003      	add	sp, #12
 8004576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004578:	4613      	mov	r3, r2
 800457a:	e7e7      	b.n	800454c <__exponent+0x20>
 800457c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004580:	f804 2b01 	strb.w	r2, [r4], #1
 8004584:	e7f2      	b.n	800456c <__exponent+0x40>
 8004586:	2330      	movs	r3, #48	; 0x30
 8004588:	4419      	add	r1, r3
 800458a:	7083      	strb	r3, [r0, #2]
 800458c:	1d02      	adds	r2, r0, #4
 800458e:	70c1      	strb	r1, [r0, #3]
 8004590:	e7ef      	b.n	8004572 <__exponent+0x46>
	...

08004594 <_printf_float>:
 8004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004598:	b08d      	sub	sp, #52	; 0x34
 800459a:	460c      	mov	r4, r1
 800459c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80045a0:	4616      	mov	r6, r2
 80045a2:	461f      	mov	r7, r3
 80045a4:	4605      	mov	r5, r0
 80045a6:	f001 f8ef 	bl	8005788 <_localeconv_r>
 80045aa:	6803      	ldr	r3, [r0, #0]
 80045ac:	9304      	str	r3, [sp, #16]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fc fbd8 	bl	8000d64 <strlen>
 80045b4:	2300      	movs	r3, #0
 80045b6:	930a      	str	r3, [sp, #40]	; 0x28
 80045b8:	f8d8 3000 	ldr.w	r3, [r8]
 80045bc:	9005      	str	r0, [sp, #20]
 80045be:	3307      	adds	r3, #7
 80045c0:	f023 0307 	bic.w	r3, r3, #7
 80045c4:	f103 0208 	add.w	r2, r3, #8
 80045c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80045cc:	f8d4 b000 	ldr.w	fp, [r4]
 80045d0:	f8c8 2000 	str.w	r2, [r8]
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045dc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80045e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045e4:	9307      	str	r3, [sp, #28]
 80045e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80045ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045ee:	4ba7      	ldr	r3, [pc, #668]	; (800488c <_printf_float+0x2f8>)
 80045f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045f4:	f7fc fc46 	bl	8000e84 <__aeabi_dcmpun>
 80045f8:	bb70      	cbnz	r0, 8004658 <_printf_float+0xc4>
 80045fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045fe:	4ba3      	ldr	r3, [pc, #652]	; (800488c <_printf_float+0x2f8>)
 8004600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004604:	f7fc fc20 	bl	8000e48 <__aeabi_dcmple>
 8004608:	bb30      	cbnz	r0, 8004658 <_printf_float+0xc4>
 800460a:	2200      	movs	r2, #0
 800460c:	2300      	movs	r3, #0
 800460e:	4640      	mov	r0, r8
 8004610:	4649      	mov	r1, r9
 8004612:	f7fc fc0f 	bl	8000e34 <__aeabi_dcmplt>
 8004616:	b110      	cbz	r0, 800461e <_printf_float+0x8a>
 8004618:	232d      	movs	r3, #45	; 0x2d
 800461a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800461e:	4a9c      	ldr	r2, [pc, #624]	; (8004890 <_printf_float+0x2fc>)
 8004620:	4b9c      	ldr	r3, [pc, #624]	; (8004894 <_printf_float+0x300>)
 8004622:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004626:	bf8c      	ite	hi
 8004628:	4690      	movhi	r8, r2
 800462a:	4698      	movls	r8, r3
 800462c:	2303      	movs	r3, #3
 800462e:	f02b 0204 	bic.w	r2, fp, #4
 8004632:	6123      	str	r3, [r4, #16]
 8004634:	6022      	str	r2, [r4, #0]
 8004636:	f04f 0900 	mov.w	r9, #0
 800463a:	9700      	str	r7, [sp, #0]
 800463c:	4633      	mov	r3, r6
 800463e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004640:	4621      	mov	r1, r4
 8004642:	4628      	mov	r0, r5
 8004644:	f000 f9e6 	bl	8004a14 <_printf_common>
 8004648:	3001      	adds	r0, #1
 800464a:	f040 808d 	bne.w	8004768 <_printf_float+0x1d4>
 800464e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004652:	b00d      	add	sp, #52	; 0x34
 8004654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004658:	4642      	mov	r2, r8
 800465a:	464b      	mov	r3, r9
 800465c:	4640      	mov	r0, r8
 800465e:	4649      	mov	r1, r9
 8004660:	f7fc fc10 	bl	8000e84 <__aeabi_dcmpun>
 8004664:	b110      	cbz	r0, 800466c <_printf_float+0xd8>
 8004666:	4a8c      	ldr	r2, [pc, #560]	; (8004898 <_printf_float+0x304>)
 8004668:	4b8c      	ldr	r3, [pc, #560]	; (800489c <_printf_float+0x308>)
 800466a:	e7da      	b.n	8004622 <_printf_float+0x8e>
 800466c:	6861      	ldr	r1, [r4, #4]
 800466e:	1c4b      	adds	r3, r1, #1
 8004670:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004674:	a80a      	add	r0, sp, #40	; 0x28
 8004676:	d13e      	bne.n	80046f6 <_printf_float+0x162>
 8004678:	2306      	movs	r3, #6
 800467a:	6063      	str	r3, [r4, #4]
 800467c:	2300      	movs	r3, #0
 800467e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004682:	ab09      	add	r3, sp, #36	; 0x24
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	ec49 8b10 	vmov	d0, r8, r9
 800468a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800468e:	6022      	str	r2, [r4, #0]
 8004690:	f8cd a004 	str.w	sl, [sp, #4]
 8004694:	6861      	ldr	r1, [r4, #4]
 8004696:	4628      	mov	r0, r5
 8004698:	f7ff fee7 	bl	800446a <__cvt>
 800469c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80046a0:	2b47      	cmp	r3, #71	; 0x47
 80046a2:	4680      	mov	r8, r0
 80046a4:	d109      	bne.n	80046ba <_printf_float+0x126>
 80046a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a8:	1cd8      	adds	r0, r3, #3
 80046aa:	db02      	blt.n	80046b2 <_printf_float+0x11e>
 80046ac:	6862      	ldr	r2, [r4, #4]
 80046ae:	4293      	cmp	r3, r2
 80046b0:	dd47      	ble.n	8004742 <_printf_float+0x1ae>
 80046b2:	f1aa 0a02 	sub.w	sl, sl, #2
 80046b6:	fa5f fa8a 	uxtb.w	sl, sl
 80046ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80046be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046c0:	d824      	bhi.n	800470c <_printf_float+0x178>
 80046c2:	3901      	subs	r1, #1
 80046c4:	4652      	mov	r2, sl
 80046c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046ca:	9109      	str	r1, [sp, #36]	; 0x24
 80046cc:	f7ff ff2e 	bl	800452c <__exponent>
 80046d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046d2:	1813      	adds	r3, r2, r0
 80046d4:	2a01      	cmp	r2, #1
 80046d6:	4681      	mov	r9, r0
 80046d8:	6123      	str	r3, [r4, #16]
 80046da:	dc02      	bgt.n	80046e2 <_printf_float+0x14e>
 80046dc:	6822      	ldr	r2, [r4, #0]
 80046de:	07d1      	lsls	r1, r2, #31
 80046e0:	d501      	bpl.n	80046e6 <_printf_float+0x152>
 80046e2:	3301      	adds	r3, #1
 80046e4:	6123      	str	r3, [r4, #16]
 80046e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0a5      	beq.n	800463a <_printf_float+0xa6>
 80046ee:	232d      	movs	r3, #45	; 0x2d
 80046f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f4:	e7a1      	b.n	800463a <_printf_float+0xa6>
 80046f6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80046fa:	f000 8177 	beq.w	80049ec <_printf_float+0x458>
 80046fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004702:	d1bb      	bne.n	800467c <_printf_float+0xe8>
 8004704:	2900      	cmp	r1, #0
 8004706:	d1b9      	bne.n	800467c <_printf_float+0xe8>
 8004708:	2301      	movs	r3, #1
 800470a:	e7b6      	b.n	800467a <_printf_float+0xe6>
 800470c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004710:	d119      	bne.n	8004746 <_printf_float+0x1b2>
 8004712:	2900      	cmp	r1, #0
 8004714:	6863      	ldr	r3, [r4, #4]
 8004716:	dd0c      	ble.n	8004732 <_printf_float+0x19e>
 8004718:	6121      	str	r1, [r4, #16]
 800471a:	b913      	cbnz	r3, 8004722 <_printf_float+0x18e>
 800471c:	6822      	ldr	r2, [r4, #0]
 800471e:	07d2      	lsls	r2, r2, #31
 8004720:	d502      	bpl.n	8004728 <_printf_float+0x194>
 8004722:	3301      	adds	r3, #1
 8004724:	440b      	add	r3, r1
 8004726:	6123      	str	r3, [r4, #16]
 8004728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800472a:	65a3      	str	r3, [r4, #88]	; 0x58
 800472c:	f04f 0900 	mov.w	r9, #0
 8004730:	e7d9      	b.n	80046e6 <_printf_float+0x152>
 8004732:	b913      	cbnz	r3, 800473a <_printf_float+0x1a6>
 8004734:	6822      	ldr	r2, [r4, #0]
 8004736:	07d0      	lsls	r0, r2, #31
 8004738:	d501      	bpl.n	800473e <_printf_float+0x1aa>
 800473a:	3302      	adds	r3, #2
 800473c:	e7f3      	b.n	8004726 <_printf_float+0x192>
 800473e:	2301      	movs	r3, #1
 8004740:	e7f1      	b.n	8004726 <_printf_float+0x192>
 8004742:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004746:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800474a:	4293      	cmp	r3, r2
 800474c:	db05      	blt.n	800475a <_printf_float+0x1c6>
 800474e:	6822      	ldr	r2, [r4, #0]
 8004750:	6123      	str	r3, [r4, #16]
 8004752:	07d1      	lsls	r1, r2, #31
 8004754:	d5e8      	bpl.n	8004728 <_printf_float+0x194>
 8004756:	3301      	adds	r3, #1
 8004758:	e7e5      	b.n	8004726 <_printf_float+0x192>
 800475a:	2b00      	cmp	r3, #0
 800475c:	bfd4      	ite	le
 800475e:	f1c3 0302 	rsble	r3, r3, #2
 8004762:	2301      	movgt	r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	e7de      	b.n	8004726 <_printf_float+0x192>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	055a      	lsls	r2, r3, #21
 800476c:	d407      	bmi.n	800477e <_printf_float+0x1ea>
 800476e:	6923      	ldr	r3, [r4, #16]
 8004770:	4642      	mov	r2, r8
 8004772:	4631      	mov	r1, r6
 8004774:	4628      	mov	r0, r5
 8004776:	47b8      	blx	r7
 8004778:	3001      	adds	r0, #1
 800477a:	d12b      	bne.n	80047d4 <_printf_float+0x240>
 800477c:	e767      	b.n	800464e <_printf_float+0xba>
 800477e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004782:	f240 80dc 	bls.w	800493e <_printf_float+0x3aa>
 8004786:	2200      	movs	r2, #0
 8004788:	2300      	movs	r3, #0
 800478a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800478e:	f7fc fb47 	bl	8000e20 <__aeabi_dcmpeq>
 8004792:	2800      	cmp	r0, #0
 8004794:	d033      	beq.n	80047fe <_printf_float+0x26a>
 8004796:	2301      	movs	r3, #1
 8004798:	4a41      	ldr	r2, [pc, #260]	; (80048a0 <_printf_float+0x30c>)
 800479a:	4631      	mov	r1, r6
 800479c:	4628      	mov	r0, r5
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	f43f af54 	beq.w	800464e <_printf_float+0xba>
 80047a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047aa:	429a      	cmp	r2, r3
 80047ac:	db02      	blt.n	80047b4 <_printf_float+0x220>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	07d8      	lsls	r0, r3, #31
 80047b2:	d50f      	bpl.n	80047d4 <_printf_float+0x240>
 80047b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047b8:	4631      	mov	r1, r6
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b8      	blx	r7
 80047be:	3001      	adds	r0, #1
 80047c0:	f43f af45 	beq.w	800464e <_printf_float+0xba>
 80047c4:	f04f 0800 	mov.w	r8, #0
 80047c8:	f104 091a 	add.w	r9, r4, #26
 80047cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ce:	3b01      	subs	r3, #1
 80047d0:	4543      	cmp	r3, r8
 80047d2:	dc09      	bgt.n	80047e8 <_printf_float+0x254>
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	079b      	lsls	r3, r3, #30
 80047d8:	f100 8103 	bmi.w	80049e2 <_printf_float+0x44e>
 80047dc:	68e0      	ldr	r0, [r4, #12]
 80047de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047e0:	4298      	cmp	r0, r3
 80047e2:	bfb8      	it	lt
 80047e4:	4618      	movlt	r0, r3
 80047e6:	e734      	b.n	8004652 <_printf_float+0xbe>
 80047e8:	2301      	movs	r3, #1
 80047ea:	464a      	mov	r2, r9
 80047ec:	4631      	mov	r1, r6
 80047ee:	4628      	mov	r0, r5
 80047f0:	47b8      	blx	r7
 80047f2:	3001      	adds	r0, #1
 80047f4:	f43f af2b 	beq.w	800464e <_printf_float+0xba>
 80047f8:	f108 0801 	add.w	r8, r8, #1
 80047fc:	e7e6      	b.n	80047cc <_printf_float+0x238>
 80047fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004800:	2b00      	cmp	r3, #0
 8004802:	dc2b      	bgt.n	800485c <_printf_float+0x2c8>
 8004804:	2301      	movs	r3, #1
 8004806:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <_printf_float+0x30c>)
 8004808:	4631      	mov	r1, r6
 800480a:	4628      	mov	r0, r5
 800480c:	47b8      	blx	r7
 800480e:	3001      	adds	r0, #1
 8004810:	f43f af1d 	beq.w	800464e <_printf_float+0xba>
 8004814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004816:	b923      	cbnz	r3, 8004822 <_printf_float+0x28e>
 8004818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800481a:	b913      	cbnz	r3, 8004822 <_printf_float+0x28e>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	07d9      	lsls	r1, r3, #31
 8004820:	d5d8      	bpl.n	80047d4 <_printf_float+0x240>
 8004822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004826:	4631      	mov	r1, r6
 8004828:	4628      	mov	r0, r5
 800482a:	47b8      	blx	r7
 800482c:	3001      	adds	r0, #1
 800482e:	f43f af0e 	beq.w	800464e <_printf_float+0xba>
 8004832:	f04f 0900 	mov.w	r9, #0
 8004836:	f104 0a1a 	add.w	sl, r4, #26
 800483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483c:	425b      	negs	r3, r3
 800483e:	454b      	cmp	r3, r9
 8004840:	dc01      	bgt.n	8004846 <_printf_float+0x2b2>
 8004842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004844:	e794      	b.n	8004770 <_printf_float+0x1dc>
 8004846:	2301      	movs	r3, #1
 8004848:	4652      	mov	r2, sl
 800484a:	4631      	mov	r1, r6
 800484c:	4628      	mov	r0, r5
 800484e:	47b8      	blx	r7
 8004850:	3001      	adds	r0, #1
 8004852:	f43f aefc 	beq.w	800464e <_printf_float+0xba>
 8004856:	f109 0901 	add.w	r9, r9, #1
 800485a:	e7ee      	b.n	800483a <_printf_float+0x2a6>
 800485c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800485e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004860:	429a      	cmp	r2, r3
 8004862:	bfa8      	it	ge
 8004864:	461a      	movge	r2, r3
 8004866:	2a00      	cmp	r2, #0
 8004868:	4691      	mov	r9, r2
 800486a:	dd07      	ble.n	800487c <_printf_float+0x2e8>
 800486c:	4613      	mov	r3, r2
 800486e:	4631      	mov	r1, r6
 8004870:	4642      	mov	r2, r8
 8004872:	4628      	mov	r0, r5
 8004874:	47b8      	blx	r7
 8004876:	3001      	adds	r0, #1
 8004878:	f43f aee9 	beq.w	800464e <_printf_float+0xba>
 800487c:	f104 031a 	add.w	r3, r4, #26
 8004880:	f04f 0b00 	mov.w	fp, #0
 8004884:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004888:	9306      	str	r3, [sp, #24]
 800488a:	e015      	b.n	80048b8 <_printf_float+0x324>
 800488c:	7fefffff 	.word	0x7fefffff
 8004890:	080067b1 	.word	0x080067b1
 8004894:	08006528 	.word	0x08006528
 8004898:	08006530 	.word	0x08006530
 800489c:	0800652c 	.word	0x0800652c
 80048a0:	08006534 	.word	0x08006534
 80048a4:	2301      	movs	r3, #1
 80048a6:	9a06      	ldr	r2, [sp, #24]
 80048a8:	4631      	mov	r1, r6
 80048aa:	4628      	mov	r0, r5
 80048ac:	47b8      	blx	r7
 80048ae:	3001      	adds	r0, #1
 80048b0:	f43f aecd 	beq.w	800464e <_printf_float+0xba>
 80048b4:	f10b 0b01 	add.w	fp, fp, #1
 80048b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80048bc:	ebaa 0309 	sub.w	r3, sl, r9
 80048c0:	455b      	cmp	r3, fp
 80048c2:	dcef      	bgt.n	80048a4 <_printf_float+0x310>
 80048c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048c8:	429a      	cmp	r2, r3
 80048ca:	44d0      	add	r8, sl
 80048cc:	db15      	blt.n	80048fa <_printf_float+0x366>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	07da      	lsls	r2, r3, #31
 80048d2:	d412      	bmi.n	80048fa <_printf_float+0x366>
 80048d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048d8:	eba3 020a 	sub.w	r2, r3, sl
 80048dc:	eba3 0a01 	sub.w	sl, r3, r1
 80048e0:	4592      	cmp	sl, r2
 80048e2:	bfa8      	it	ge
 80048e4:	4692      	movge	sl, r2
 80048e6:	f1ba 0f00 	cmp.w	sl, #0
 80048ea:	dc0e      	bgt.n	800490a <_printf_float+0x376>
 80048ec:	f04f 0800 	mov.w	r8, #0
 80048f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80048f4:	f104 091a 	add.w	r9, r4, #26
 80048f8:	e019      	b.n	800492e <_printf_float+0x39a>
 80048fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048fe:	4631      	mov	r1, r6
 8004900:	4628      	mov	r0, r5
 8004902:	47b8      	blx	r7
 8004904:	3001      	adds	r0, #1
 8004906:	d1e5      	bne.n	80048d4 <_printf_float+0x340>
 8004908:	e6a1      	b.n	800464e <_printf_float+0xba>
 800490a:	4653      	mov	r3, sl
 800490c:	4642      	mov	r2, r8
 800490e:	4631      	mov	r1, r6
 8004910:	4628      	mov	r0, r5
 8004912:	47b8      	blx	r7
 8004914:	3001      	adds	r0, #1
 8004916:	d1e9      	bne.n	80048ec <_printf_float+0x358>
 8004918:	e699      	b.n	800464e <_printf_float+0xba>
 800491a:	2301      	movs	r3, #1
 800491c:	464a      	mov	r2, r9
 800491e:	4631      	mov	r1, r6
 8004920:	4628      	mov	r0, r5
 8004922:	47b8      	blx	r7
 8004924:	3001      	adds	r0, #1
 8004926:	f43f ae92 	beq.w	800464e <_printf_float+0xba>
 800492a:	f108 0801 	add.w	r8, r8, #1
 800492e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	eba3 030a 	sub.w	r3, r3, sl
 8004938:	4543      	cmp	r3, r8
 800493a:	dcee      	bgt.n	800491a <_printf_float+0x386>
 800493c:	e74a      	b.n	80047d4 <_printf_float+0x240>
 800493e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004940:	2a01      	cmp	r2, #1
 8004942:	dc01      	bgt.n	8004948 <_printf_float+0x3b4>
 8004944:	07db      	lsls	r3, r3, #31
 8004946:	d53a      	bpl.n	80049be <_printf_float+0x42a>
 8004948:	2301      	movs	r3, #1
 800494a:	4642      	mov	r2, r8
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	f43f ae7b 	beq.w	800464e <_printf_float+0xba>
 8004958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800495c:	4631      	mov	r1, r6
 800495e:	4628      	mov	r0, r5
 8004960:	47b8      	blx	r7
 8004962:	3001      	adds	r0, #1
 8004964:	f108 0801 	add.w	r8, r8, #1
 8004968:	f43f ae71 	beq.w	800464e <_printf_float+0xba>
 800496c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800496e:	2200      	movs	r2, #0
 8004970:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004974:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004978:	2300      	movs	r3, #0
 800497a:	f7fc fa51 	bl	8000e20 <__aeabi_dcmpeq>
 800497e:	b9c8      	cbnz	r0, 80049b4 <_printf_float+0x420>
 8004980:	4653      	mov	r3, sl
 8004982:	4642      	mov	r2, r8
 8004984:	4631      	mov	r1, r6
 8004986:	4628      	mov	r0, r5
 8004988:	47b8      	blx	r7
 800498a:	3001      	adds	r0, #1
 800498c:	d10e      	bne.n	80049ac <_printf_float+0x418>
 800498e:	e65e      	b.n	800464e <_printf_float+0xba>
 8004990:	2301      	movs	r3, #1
 8004992:	4652      	mov	r2, sl
 8004994:	4631      	mov	r1, r6
 8004996:	4628      	mov	r0, r5
 8004998:	47b8      	blx	r7
 800499a:	3001      	adds	r0, #1
 800499c:	f43f ae57 	beq.w	800464e <_printf_float+0xba>
 80049a0:	f108 0801 	add.w	r8, r8, #1
 80049a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a6:	3b01      	subs	r3, #1
 80049a8:	4543      	cmp	r3, r8
 80049aa:	dcf1      	bgt.n	8004990 <_printf_float+0x3fc>
 80049ac:	464b      	mov	r3, r9
 80049ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049b2:	e6de      	b.n	8004772 <_printf_float+0x1de>
 80049b4:	f04f 0800 	mov.w	r8, #0
 80049b8:	f104 0a1a 	add.w	sl, r4, #26
 80049bc:	e7f2      	b.n	80049a4 <_printf_float+0x410>
 80049be:	2301      	movs	r3, #1
 80049c0:	e7df      	b.n	8004982 <_printf_float+0x3ee>
 80049c2:	2301      	movs	r3, #1
 80049c4:	464a      	mov	r2, r9
 80049c6:	4631      	mov	r1, r6
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b8      	blx	r7
 80049cc:	3001      	adds	r0, #1
 80049ce:	f43f ae3e 	beq.w	800464e <_printf_float+0xba>
 80049d2:	f108 0801 	add.w	r8, r8, #1
 80049d6:	68e3      	ldr	r3, [r4, #12]
 80049d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	4543      	cmp	r3, r8
 80049de:	dcf0      	bgt.n	80049c2 <_printf_float+0x42e>
 80049e0:	e6fc      	b.n	80047dc <_printf_float+0x248>
 80049e2:	f04f 0800 	mov.w	r8, #0
 80049e6:	f104 0919 	add.w	r9, r4, #25
 80049ea:	e7f4      	b.n	80049d6 <_printf_float+0x442>
 80049ec:	2900      	cmp	r1, #0
 80049ee:	f43f ae8b 	beq.w	8004708 <_printf_float+0x174>
 80049f2:	2300      	movs	r3, #0
 80049f4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80049f8:	ab09      	add	r3, sp, #36	; 0x24
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	ec49 8b10 	vmov	d0, r8, r9
 8004a00:	6022      	str	r2, [r4, #0]
 8004a02:	f8cd a004 	str.w	sl, [sp, #4]
 8004a06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f7ff fd2d 	bl	800446a <__cvt>
 8004a10:	4680      	mov	r8, r0
 8004a12:	e648      	b.n	80046a6 <_printf_float+0x112>

08004a14 <_printf_common>:
 8004a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a18:	4691      	mov	r9, r2
 8004a1a:	461f      	mov	r7, r3
 8004a1c:	688a      	ldr	r2, [r1, #8]
 8004a1e:	690b      	ldr	r3, [r1, #16]
 8004a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a24:	4293      	cmp	r3, r2
 8004a26:	bfb8      	it	lt
 8004a28:	4613      	movlt	r3, r2
 8004a2a:	f8c9 3000 	str.w	r3, [r9]
 8004a2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a32:	4606      	mov	r6, r0
 8004a34:	460c      	mov	r4, r1
 8004a36:	b112      	cbz	r2, 8004a3e <_printf_common+0x2a>
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f8c9 3000 	str.w	r3, [r9]
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	0699      	lsls	r1, r3, #26
 8004a42:	bf42      	ittt	mi
 8004a44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a48:	3302      	addmi	r3, #2
 8004a4a:	f8c9 3000 	strmi.w	r3, [r9]
 8004a4e:	6825      	ldr	r5, [r4, #0]
 8004a50:	f015 0506 	ands.w	r5, r5, #6
 8004a54:	d107      	bne.n	8004a66 <_printf_common+0x52>
 8004a56:	f104 0a19 	add.w	sl, r4, #25
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	42ab      	cmp	r3, r5
 8004a64:	dc28      	bgt.n	8004ab8 <_printf_common+0xa4>
 8004a66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a6a:	6822      	ldr	r2, [r4, #0]
 8004a6c:	3300      	adds	r3, #0
 8004a6e:	bf18      	it	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	0692      	lsls	r2, r2, #26
 8004a74:	d42d      	bmi.n	8004ad2 <_printf_common+0xbe>
 8004a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a7a:	4639      	mov	r1, r7
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	47c0      	blx	r8
 8004a80:	3001      	adds	r0, #1
 8004a82:	d020      	beq.n	8004ac6 <_printf_common+0xb2>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	68e5      	ldr	r5, [r4, #12]
 8004a88:	f8d9 2000 	ldr.w	r2, [r9]
 8004a8c:	f003 0306 	and.w	r3, r3, #6
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	bf08      	it	eq
 8004a94:	1aad      	subeq	r5, r5, r2
 8004a96:	68a3      	ldr	r3, [r4, #8]
 8004a98:	6922      	ldr	r2, [r4, #16]
 8004a9a:	bf0c      	ite	eq
 8004a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aa0:	2500      	movne	r5, #0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bfc4      	itt	gt
 8004aa6:	1a9b      	subgt	r3, r3, r2
 8004aa8:	18ed      	addgt	r5, r5, r3
 8004aaa:	f04f 0900 	mov.w	r9, #0
 8004aae:	341a      	adds	r4, #26
 8004ab0:	454d      	cmp	r5, r9
 8004ab2:	d11a      	bne.n	8004aea <_printf_common+0xd6>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e008      	b.n	8004aca <_printf_common+0xb6>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4652      	mov	r2, sl
 8004abc:	4639      	mov	r1, r7
 8004abe:	4630      	mov	r0, r6
 8004ac0:	47c0      	blx	r8
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d103      	bne.n	8004ace <_printf_common+0xba>
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ace:	3501      	adds	r5, #1
 8004ad0:	e7c3      	b.n	8004a5a <_printf_common+0x46>
 8004ad2:	18e1      	adds	r1, r4, r3
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	2030      	movs	r0, #48	; 0x30
 8004ad8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004adc:	4422      	add	r2, r4
 8004ade:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ae2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	e7c5      	b.n	8004a76 <_printf_common+0x62>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4622      	mov	r2, r4
 8004aee:	4639      	mov	r1, r7
 8004af0:	4630      	mov	r0, r6
 8004af2:	47c0      	blx	r8
 8004af4:	3001      	adds	r0, #1
 8004af6:	d0e6      	beq.n	8004ac6 <_printf_common+0xb2>
 8004af8:	f109 0901 	add.w	r9, r9, #1
 8004afc:	e7d8      	b.n	8004ab0 <_printf_common+0x9c>

08004afe <quorem>:
 8004afe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b02:	6903      	ldr	r3, [r0, #16]
 8004b04:	690c      	ldr	r4, [r1, #16]
 8004b06:	42a3      	cmp	r3, r4
 8004b08:	4680      	mov	r8, r0
 8004b0a:	f2c0 8082 	blt.w	8004c12 <quorem+0x114>
 8004b0e:	3c01      	subs	r4, #1
 8004b10:	f101 0714 	add.w	r7, r1, #20
 8004b14:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004b18:	f100 0614 	add.w	r6, r0, #20
 8004b1c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b20:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b24:	eb06 030c 	add.w	r3, r6, ip
 8004b28:	3501      	adds	r5, #1
 8004b2a:	eb07 090c 	add.w	r9, r7, ip
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b34:	b395      	cbz	r5, 8004b9c <quorem+0x9e>
 8004b36:	f04f 0a00 	mov.w	sl, #0
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	46b6      	mov	lr, r6
 8004b3e:	46d3      	mov	fp, sl
 8004b40:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b44:	b293      	uxth	r3, r2
 8004b46:	fb05 a303 	mla	r3, r5, r3, sl
 8004b4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	ebab 0303 	sub.w	r3, fp, r3
 8004b54:	0c12      	lsrs	r2, r2, #16
 8004b56:	f8de b000 	ldr.w	fp, [lr]
 8004b5a:	fb05 a202 	mla	r2, r5, r2, sl
 8004b5e:	fa13 f38b 	uxtah	r3, r3, fp
 8004b62:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b66:	fa1f fb82 	uxth.w	fp, r2
 8004b6a:	f8de 2000 	ldr.w	r2, [lr]
 8004b6e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b7c:	4581      	cmp	r9, r0
 8004b7e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004b82:	f84e 3b04 	str.w	r3, [lr], #4
 8004b86:	d2db      	bcs.n	8004b40 <quorem+0x42>
 8004b88:	f856 300c 	ldr.w	r3, [r6, ip]
 8004b8c:	b933      	cbnz	r3, 8004b9c <quorem+0x9e>
 8004b8e:	9b01      	ldr	r3, [sp, #4]
 8004b90:	3b04      	subs	r3, #4
 8004b92:	429e      	cmp	r6, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	d330      	bcc.n	8004bfa <quorem+0xfc>
 8004b98:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	f001 f81f 	bl	8005be0 <__mcmp>
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	db25      	blt.n	8004bf2 <quorem+0xf4>
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f04f 0c00 	mov.w	ip, #0
 8004bae:	f857 2b04 	ldr.w	r2, [r7], #4
 8004bb2:	f8d0 e000 	ldr.w	lr, [r0]
 8004bb6:	b293      	uxth	r3, r2
 8004bb8:	ebac 0303 	sub.w	r3, ip, r3
 8004bbc:	0c12      	lsrs	r2, r2, #16
 8004bbe:	fa13 f38e 	uxtah	r3, r3, lr
 8004bc2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bd0:	45b9      	cmp	r9, r7
 8004bd2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bd6:	f840 3b04 	str.w	r3, [r0], #4
 8004bda:	d2e8      	bcs.n	8004bae <quorem+0xb0>
 8004bdc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004be0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004be4:	b92a      	cbnz	r2, 8004bf2 <quorem+0xf4>
 8004be6:	3b04      	subs	r3, #4
 8004be8:	429e      	cmp	r6, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	d30b      	bcc.n	8004c06 <quorem+0x108>
 8004bee:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	b003      	add	sp, #12
 8004bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	3b04      	subs	r3, #4
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	d1ca      	bne.n	8004b98 <quorem+0x9a>
 8004c02:	3c01      	subs	r4, #1
 8004c04:	e7c5      	b.n	8004b92 <quorem+0x94>
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	d1ef      	bne.n	8004bee <quorem+0xf0>
 8004c0e:	3c01      	subs	r4, #1
 8004c10:	e7ea      	b.n	8004be8 <quorem+0xea>
 8004c12:	2000      	movs	r0, #0
 8004c14:	e7ee      	b.n	8004bf4 <quorem+0xf6>
	...

08004c18 <_dtoa_r>:
 8004c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1c:	ec57 6b10 	vmov	r6, r7, d0
 8004c20:	b097      	sub	sp, #92	; 0x5c
 8004c22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c24:	9106      	str	r1, [sp, #24]
 8004c26:	4604      	mov	r4, r0
 8004c28:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c2a:	9312      	str	r3, [sp, #72]	; 0x48
 8004c2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c30:	e9cd 6700 	strd	r6, r7, [sp]
 8004c34:	b93d      	cbnz	r5, 8004c46 <_dtoa_r+0x2e>
 8004c36:	2010      	movs	r0, #16
 8004c38:	f000 fdb4 	bl	80057a4 <malloc>
 8004c3c:	6260      	str	r0, [r4, #36]	; 0x24
 8004c3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c42:	6005      	str	r5, [r0, #0]
 8004c44:	60c5      	str	r5, [r0, #12]
 8004c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c48:	6819      	ldr	r1, [r3, #0]
 8004c4a:	b151      	cbz	r1, 8004c62 <_dtoa_r+0x4a>
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	604a      	str	r2, [r1, #4]
 8004c50:	2301      	movs	r3, #1
 8004c52:	4093      	lsls	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
 8004c56:	4620      	mov	r0, r4
 8004c58:	f000 fde0 	bl	800581c <_Bfree>
 8004c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	1e3b      	subs	r3, r7, #0
 8004c64:	bfbb      	ittet	lt
 8004c66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c6a:	9301      	strlt	r3, [sp, #4]
 8004c6c:	2300      	movge	r3, #0
 8004c6e:	2201      	movlt	r2, #1
 8004c70:	bfac      	ite	ge
 8004c72:	f8c8 3000 	strge.w	r3, [r8]
 8004c76:	f8c8 2000 	strlt.w	r2, [r8]
 8004c7a:	4baf      	ldr	r3, [pc, #700]	; (8004f38 <_dtoa_r+0x320>)
 8004c7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004c80:	ea33 0308 	bics.w	r3, r3, r8
 8004c84:	d114      	bne.n	8004cb0 <_dtoa_r+0x98>
 8004c86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c88:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	9b00      	ldr	r3, [sp, #0]
 8004c90:	b923      	cbnz	r3, 8004c9c <_dtoa_r+0x84>
 8004c92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004c96:	2800      	cmp	r0, #0
 8004c98:	f000 8542 	beq.w	8005720 <_dtoa_r+0xb08>
 8004c9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004f4c <_dtoa_r+0x334>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8544 	beq.w	8005730 <_dtoa_r+0xb18>
 8004ca8:	f10b 0303 	add.w	r3, fp, #3
 8004cac:	f000 bd3e 	b.w	800572c <_dtoa_r+0xb14>
 8004cb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	4630      	mov	r0, r6
 8004cba:	4639      	mov	r1, r7
 8004cbc:	f7fc f8b0 	bl	8000e20 <__aeabi_dcmpeq>
 8004cc0:	4681      	mov	r9, r0
 8004cc2:	b168      	cbz	r0, 8004ce0 <_dtoa_r+0xc8>
 8004cc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8524 	beq.w	800571a <_dtoa_r+0xb02>
 8004cd2:	4b9a      	ldr	r3, [pc, #616]	; (8004f3c <_dtoa_r+0x324>)
 8004cd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cd6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	f000 bd28 	b.w	8005730 <_dtoa_r+0xb18>
 8004ce0:	aa14      	add	r2, sp, #80	; 0x50
 8004ce2:	a915      	add	r1, sp, #84	; 0x54
 8004ce4:	ec47 6b10 	vmov	d0, r6, r7
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f000 fff0 	bl	8005cce <__d2b>
 8004cee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004cf2:	9004      	str	r0, [sp, #16]
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	d07c      	beq.n	8004df2 <_dtoa_r+0x1da>
 8004cf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004cfc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004d00:	46b2      	mov	sl, r6
 8004d02:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004d06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004d0e:	2200      	movs	r2, #0
 8004d10:	4b8b      	ldr	r3, [pc, #556]	; (8004f40 <_dtoa_r+0x328>)
 8004d12:	4650      	mov	r0, sl
 8004d14:	4659      	mov	r1, fp
 8004d16:	f7fb fa63 	bl	80001e0 <__aeabi_dsub>
 8004d1a:	a381      	add	r3, pc, #516	; (adr r3, 8004f20 <_dtoa_r+0x308>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fc16 	bl	8000550 <__aeabi_dmul>
 8004d24:	a380      	add	r3, pc, #512	; (adr r3, 8004f28 <_dtoa_r+0x310>)
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f7fb fa5b 	bl	80001e4 <__adddf3>
 8004d2e:	4606      	mov	r6, r0
 8004d30:	4628      	mov	r0, r5
 8004d32:	460f      	mov	r7, r1
 8004d34:	f7fb fba2 	bl	800047c <__aeabi_i2d>
 8004d38:	a37d      	add	r3, pc, #500	; (adr r3, 8004f30 <_dtoa_r+0x318>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fc07 	bl	8000550 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4630      	mov	r0, r6
 8004d48:	4639      	mov	r1, r7
 8004d4a:	f7fb fa4b 	bl	80001e4 <__adddf3>
 8004d4e:	4606      	mov	r6, r0
 8004d50:	460f      	mov	r7, r1
 8004d52:	f7fb fe0f 	bl	8000974 <__aeabi_d2iz>
 8004d56:	2200      	movs	r2, #0
 8004d58:	4682      	mov	sl, r0
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	4639      	mov	r1, r7
 8004d60:	f7fc f868 	bl	8000e34 <__aeabi_dcmplt>
 8004d64:	b148      	cbz	r0, 8004d7a <_dtoa_r+0x162>
 8004d66:	4650      	mov	r0, sl
 8004d68:	f7fb fb88 	bl	800047c <__aeabi_i2d>
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	463b      	mov	r3, r7
 8004d70:	f7fc f856 	bl	8000e20 <__aeabi_dcmpeq>
 8004d74:	b908      	cbnz	r0, 8004d7a <_dtoa_r+0x162>
 8004d76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d7a:	f1ba 0f16 	cmp.w	sl, #22
 8004d7e:	d859      	bhi.n	8004e34 <_dtoa_r+0x21c>
 8004d80:	4970      	ldr	r1, [pc, #448]	; (8004f44 <_dtoa_r+0x32c>)
 8004d82:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d8e:	f7fc f86f 	bl	8000e70 <__aeabi_dcmpgt>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d050      	beq.n	8004e38 <_dtoa_r+0x220>
 8004d96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004da0:	1b5d      	subs	r5, r3, r5
 8004da2:	f1b5 0801 	subs.w	r8, r5, #1
 8004da6:	bf49      	itett	mi
 8004da8:	f1c5 0301 	rsbmi	r3, r5, #1
 8004dac:	2300      	movpl	r3, #0
 8004dae:	9305      	strmi	r3, [sp, #20]
 8004db0:	f04f 0800 	movmi.w	r8, #0
 8004db4:	bf58      	it	pl
 8004db6:	9305      	strpl	r3, [sp, #20]
 8004db8:	f1ba 0f00 	cmp.w	sl, #0
 8004dbc:	db3e      	blt.n	8004e3c <_dtoa_r+0x224>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	44d0      	add	r8, sl
 8004dc2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004dc6:	9307      	str	r3, [sp, #28]
 8004dc8:	9b06      	ldr	r3, [sp, #24]
 8004dca:	2b09      	cmp	r3, #9
 8004dcc:	f200 8090 	bhi.w	8004ef0 <_dtoa_r+0x2d8>
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	bfc4      	itt	gt
 8004dd4:	3b04      	subgt	r3, #4
 8004dd6:	9306      	strgt	r3, [sp, #24]
 8004dd8:	9b06      	ldr	r3, [sp, #24]
 8004dda:	f1a3 0302 	sub.w	r3, r3, #2
 8004dde:	bfcc      	ite	gt
 8004de0:	2500      	movgt	r5, #0
 8004de2:	2501      	movle	r5, #1
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	f200 808f 	bhi.w	8004f08 <_dtoa_r+0x2f0>
 8004dea:	e8df f003 	tbb	[pc, r3]
 8004dee:	7f7d      	.short	0x7f7d
 8004df0:	7131      	.short	0x7131
 8004df2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004df6:	441d      	add	r5, r3
 8004df8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004dfc:	2820      	cmp	r0, #32
 8004dfe:	dd13      	ble.n	8004e28 <_dtoa_r+0x210>
 8004e00:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004e04:	9b00      	ldr	r3, [sp, #0]
 8004e06:	fa08 f800 	lsl.w	r8, r8, r0
 8004e0a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e0e:	fa23 f000 	lsr.w	r0, r3, r0
 8004e12:	ea48 0000 	orr.w	r0, r8, r0
 8004e16:	f7fb fb21 	bl	800045c <__aeabi_ui2d>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4682      	mov	sl, r0
 8004e1e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004e22:	3d01      	subs	r5, #1
 8004e24:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e26:	e772      	b.n	8004d0e <_dtoa_r+0xf6>
 8004e28:	9b00      	ldr	r3, [sp, #0]
 8004e2a:	f1c0 0020 	rsb	r0, r0, #32
 8004e2e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e32:	e7f0      	b.n	8004e16 <_dtoa_r+0x1fe>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e7b1      	b.n	8004d9c <_dtoa_r+0x184>
 8004e38:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e3a:	e7b0      	b.n	8004d9e <_dtoa_r+0x186>
 8004e3c:	9b05      	ldr	r3, [sp, #20]
 8004e3e:	eba3 030a 	sub.w	r3, r3, sl
 8004e42:	9305      	str	r3, [sp, #20]
 8004e44:	f1ca 0300 	rsb	r3, sl, #0
 8004e48:	9307      	str	r3, [sp, #28]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e4e:	e7bb      	b.n	8004dc8 <_dtoa_r+0x1b0>
 8004e50:	2301      	movs	r3, #1
 8004e52:	930a      	str	r3, [sp, #40]	; 0x28
 8004e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	dd59      	ble.n	8004f0e <_dtoa_r+0x2f6>
 8004e5a:	9302      	str	r3, [sp, #8]
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e60:	2200      	movs	r2, #0
 8004e62:	6072      	str	r2, [r6, #4]
 8004e64:	2204      	movs	r2, #4
 8004e66:	f102 0014 	add.w	r0, r2, #20
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	6871      	ldr	r1, [r6, #4]
 8004e6e:	d953      	bls.n	8004f18 <_dtoa_r+0x300>
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 fc9f 	bl	80057b4 <_Balloc>
 8004e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e78:	6030      	str	r0, [r6, #0]
 8004e7a:	f1b9 0f0e 	cmp.w	r9, #14
 8004e7e:	f8d3 b000 	ldr.w	fp, [r3]
 8004e82:	f200 80e6 	bhi.w	8005052 <_dtoa_r+0x43a>
 8004e86:	2d00      	cmp	r5, #0
 8004e88:	f000 80e3 	beq.w	8005052 <_dtoa_r+0x43a>
 8004e8c:	ed9d 7b00 	vldr	d7, [sp]
 8004e90:	f1ba 0f00 	cmp.w	sl, #0
 8004e94:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004e98:	dd74      	ble.n	8004f84 <_dtoa_r+0x36c>
 8004e9a:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <_dtoa_r+0x32c>)
 8004e9c:	f00a 030f 	and.w	r3, sl, #15
 8004ea0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ea4:	ed93 7b00 	vldr	d7, [r3]
 8004ea8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004eac:	06f0      	lsls	r0, r6, #27
 8004eae:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004eb2:	d565      	bpl.n	8004f80 <_dtoa_r+0x368>
 8004eb4:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <_dtoa_r+0x330>)
 8004eb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004eba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ebe:	f7fb fc71 	bl	80007a4 <__aeabi_ddiv>
 8004ec2:	e9cd 0100 	strd	r0, r1, [sp]
 8004ec6:	f006 060f 	and.w	r6, r6, #15
 8004eca:	2503      	movs	r5, #3
 8004ecc:	4f1e      	ldr	r7, [pc, #120]	; (8004f48 <_dtoa_r+0x330>)
 8004ece:	e04c      	b.n	8004f6a <_dtoa_r+0x352>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed6:	4453      	add	r3, sl
 8004ed8:	f103 0901 	add.w	r9, r3, #1
 8004edc:	9302      	str	r3, [sp, #8]
 8004ede:	464b      	mov	r3, r9
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	bfb8      	it	lt
 8004ee4:	2301      	movlt	r3, #1
 8004ee6:	e7ba      	b.n	8004e5e <_dtoa_r+0x246>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e7b2      	b.n	8004e52 <_dtoa_r+0x23a>
 8004eec:	2300      	movs	r3, #0
 8004eee:	e7f0      	b.n	8004ed2 <_dtoa_r+0x2ba>
 8004ef0:	2501      	movs	r5, #1
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9306      	str	r3, [sp, #24]
 8004ef6:	950a      	str	r5, [sp, #40]	; 0x28
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004efc:	9302      	str	r3, [sp, #8]
 8004efe:	4699      	mov	r9, r3
 8004f00:	2200      	movs	r2, #0
 8004f02:	2312      	movs	r3, #18
 8004f04:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f06:	e7aa      	b.n	8004e5e <_dtoa_r+0x246>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f0c:	e7f4      	b.n	8004ef8 <_dtoa_r+0x2e0>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	9302      	str	r3, [sp, #8]
 8004f12:	4699      	mov	r9, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	e7f5      	b.n	8004f04 <_dtoa_r+0x2ec>
 8004f18:	3101      	adds	r1, #1
 8004f1a:	6071      	str	r1, [r6, #4]
 8004f1c:	0052      	lsls	r2, r2, #1
 8004f1e:	e7a2      	b.n	8004e66 <_dtoa_r+0x24e>
 8004f20:	636f4361 	.word	0x636f4361
 8004f24:	3fd287a7 	.word	0x3fd287a7
 8004f28:	8b60c8b3 	.word	0x8b60c8b3
 8004f2c:	3fc68a28 	.word	0x3fc68a28
 8004f30:	509f79fb 	.word	0x509f79fb
 8004f34:	3fd34413 	.word	0x3fd34413
 8004f38:	7ff00000 	.word	0x7ff00000
 8004f3c:	08006535 	.word	0x08006535
 8004f40:	3ff80000 	.word	0x3ff80000
 8004f44:	080065d0 	.word	0x080065d0
 8004f48:	080065a8 	.word	0x080065a8
 8004f4c:	0800653f 	.word	0x0800653f
 8004f50:	07f1      	lsls	r1, r6, #31
 8004f52:	d508      	bpl.n	8004f66 <_dtoa_r+0x34e>
 8004f54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f5c:	f7fb faf8 	bl	8000550 <__aeabi_dmul>
 8004f60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f64:	3501      	adds	r5, #1
 8004f66:	1076      	asrs	r6, r6, #1
 8004f68:	3708      	adds	r7, #8
 8004f6a:	2e00      	cmp	r6, #0
 8004f6c:	d1f0      	bne.n	8004f50 <_dtoa_r+0x338>
 8004f6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f76:	f7fb fc15 	bl	80007a4 <__aeabi_ddiv>
 8004f7a:	e9cd 0100 	strd	r0, r1, [sp]
 8004f7e:	e01a      	b.n	8004fb6 <_dtoa_r+0x39e>
 8004f80:	2502      	movs	r5, #2
 8004f82:	e7a3      	b.n	8004ecc <_dtoa_r+0x2b4>
 8004f84:	f000 80a0 	beq.w	80050c8 <_dtoa_r+0x4b0>
 8004f88:	f1ca 0600 	rsb	r6, sl, #0
 8004f8c:	4b9f      	ldr	r3, [pc, #636]	; (800520c <_dtoa_r+0x5f4>)
 8004f8e:	4fa0      	ldr	r7, [pc, #640]	; (8005210 <_dtoa_r+0x5f8>)
 8004f90:	f006 020f 	and.w	r2, r6, #15
 8004f94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fa0:	f7fb fad6 	bl	8000550 <__aeabi_dmul>
 8004fa4:	e9cd 0100 	strd	r0, r1, [sp]
 8004fa8:	1136      	asrs	r6, r6, #4
 8004faa:	2300      	movs	r3, #0
 8004fac:	2502      	movs	r5, #2
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	d17f      	bne.n	80050b2 <_dtoa_r+0x49a>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e1      	bne.n	8004f7a <_dtoa_r+0x362>
 8004fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8087 	beq.w	80050cc <_dtoa_r+0x4b4>
 8004fbe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	4b93      	ldr	r3, [pc, #588]	; (8005214 <_dtoa_r+0x5fc>)
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	4639      	mov	r1, r7
 8004fca:	f7fb ff33 	bl	8000e34 <__aeabi_dcmplt>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d07c      	beq.n	80050cc <_dtoa_r+0x4b4>
 8004fd2:	f1b9 0f00 	cmp.w	r9, #0
 8004fd6:	d079      	beq.n	80050cc <_dtoa_r+0x4b4>
 8004fd8:	9b02      	ldr	r3, [sp, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	dd35      	ble.n	800504a <_dtoa_r+0x432>
 8004fde:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004fe2:	9308      	str	r3, [sp, #32]
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	4b8b      	ldr	r3, [pc, #556]	; (8005218 <_dtoa_r+0x600>)
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7fb fab0 	bl	8000550 <__aeabi_dmul>
 8004ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8004ff4:	9f02      	ldr	r7, [sp, #8]
 8004ff6:	3501      	adds	r5, #1
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f7fb fa3f 	bl	800047c <__aeabi_i2d>
 8004ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005002:	f7fb faa5 	bl	8000550 <__aeabi_dmul>
 8005006:	2200      	movs	r2, #0
 8005008:	4b84      	ldr	r3, [pc, #528]	; (800521c <_dtoa_r+0x604>)
 800500a:	f7fb f8eb 	bl	80001e4 <__adddf3>
 800500e:	4605      	mov	r5, r0
 8005010:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005014:	2f00      	cmp	r7, #0
 8005016:	d15d      	bne.n	80050d4 <_dtoa_r+0x4bc>
 8005018:	2200      	movs	r2, #0
 800501a:	4b81      	ldr	r3, [pc, #516]	; (8005220 <_dtoa_r+0x608>)
 800501c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005020:	f7fb f8de 	bl	80001e0 <__aeabi_dsub>
 8005024:	462a      	mov	r2, r5
 8005026:	4633      	mov	r3, r6
 8005028:	e9cd 0100 	strd	r0, r1, [sp]
 800502c:	f7fb ff20 	bl	8000e70 <__aeabi_dcmpgt>
 8005030:	2800      	cmp	r0, #0
 8005032:	f040 8288 	bne.w	8005546 <_dtoa_r+0x92e>
 8005036:	462a      	mov	r2, r5
 8005038:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800503c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005040:	f7fb fef8 	bl	8000e34 <__aeabi_dcmplt>
 8005044:	2800      	cmp	r0, #0
 8005046:	f040 827c 	bne.w	8005542 <_dtoa_r+0x92a>
 800504a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800504e:	e9cd 2300 	strd	r2, r3, [sp]
 8005052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005054:	2b00      	cmp	r3, #0
 8005056:	f2c0 8150 	blt.w	80052fa <_dtoa_r+0x6e2>
 800505a:	f1ba 0f0e 	cmp.w	sl, #14
 800505e:	f300 814c 	bgt.w	80052fa <_dtoa_r+0x6e2>
 8005062:	4b6a      	ldr	r3, [pc, #424]	; (800520c <_dtoa_r+0x5f4>)
 8005064:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005068:	ed93 7b00 	vldr	d7, [r3]
 800506c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800506e:	2b00      	cmp	r3, #0
 8005070:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005074:	f280 80d8 	bge.w	8005228 <_dtoa_r+0x610>
 8005078:	f1b9 0f00 	cmp.w	r9, #0
 800507c:	f300 80d4 	bgt.w	8005228 <_dtoa_r+0x610>
 8005080:	f040 825e 	bne.w	8005540 <_dtoa_r+0x928>
 8005084:	2200      	movs	r2, #0
 8005086:	4b66      	ldr	r3, [pc, #408]	; (8005220 <_dtoa_r+0x608>)
 8005088:	ec51 0b17 	vmov	r0, r1, d7
 800508c:	f7fb fa60 	bl	8000550 <__aeabi_dmul>
 8005090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005094:	f7fb fee2 	bl	8000e5c <__aeabi_dcmpge>
 8005098:	464f      	mov	r7, r9
 800509a:	464e      	mov	r6, r9
 800509c:	2800      	cmp	r0, #0
 800509e:	f040 8234 	bne.w	800550a <_dtoa_r+0x8f2>
 80050a2:	2331      	movs	r3, #49	; 0x31
 80050a4:	f10b 0501 	add.w	r5, fp, #1
 80050a8:	f88b 3000 	strb.w	r3, [fp]
 80050ac:	f10a 0a01 	add.w	sl, sl, #1
 80050b0:	e22f      	b.n	8005512 <_dtoa_r+0x8fa>
 80050b2:	07f2      	lsls	r2, r6, #31
 80050b4:	d505      	bpl.n	80050c2 <_dtoa_r+0x4aa>
 80050b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ba:	f7fb fa49 	bl	8000550 <__aeabi_dmul>
 80050be:	3501      	adds	r5, #1
 80050c0:	2301      	movs	r3, #1
 80050c2:	1076      	asrs	r6, r6, #1
 80050c4:	3708      	adds	r7, #8
 80050c6:	e772      	b.n	8004fae <_dtoa_r+0x396>
 80050c8:	2502      	movs	r5, #2
 80050ca:	e774      	b.n	8004fb6 <_dtoa_r+0x39e>
 80050cc:	f8cd a020 	str.w	sl, [sp, #32]
 80050d0:	464f      	mov	r7, r9
 80050d2:	e791      	b.n	8004ff8 <_dtoa_r+0x3e0>
 80050d4:	4b4d      	ldr	r3, [pc, #308]	; (800520c <_dtoa_r+0x5f4>)
 80050d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80050de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d047      	beq.n	8005174 <_dtoa_r+0x55c>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	2000      	movs	r0, #0
 80050ea:	494e      	ldr	r1, [pc, #312]	; (8005224 <_dtoa_r+0x60c>)
 80050ec:	f7fb fb5a 	bl	80007a4 <__aeabi_ddiv>
 80050f0:	462a      	mov	r2, r5
 80050f2:	4633      	mov	r3, r6
 80050f4:	f7fb f874 	bl	80001e0 <__aeabi_dsub>
 80050f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80050fc:	465d      	mov	r5, fp
 80050fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005102:	f7fb fc37 	bl	8000974 <__aeabi_d2iz>
 8005106:	4606      	mov	r6, r0
 8005108:	f7fb f9b8 	bl	800047c <__aeabi_i2d>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005114:	f7fb f864 	bl	80001e0 <__aeabi_dsub>
 8005118:	3630      	adds	r6, #48	; 0x30
 800511a:	f805 6b01 	strb.w	r6, [r5], #1
 800511e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005122:	e9cd 0100 	strd	r0, r1, [sp]
 8005126:	f7fb fe85 	bl	8000e34 <__aeabi_dcmplt>
 800512a:	2800      	cmp	r0, #0
 800512c:	d163      	bne.n	80051f6 <_dtoa_r+0x5de>
 800512e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005132:	2000      	movs	r0, #0
 8005134:	4937      	ldr	r1, [pc, #220]	; (8005214 <_dtoa_r+0x5fc>)
 8005136:	f7fb f853 	bl	80001e0 <__aeabi_dsub>
 800513a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800513e:	f7fb fe79 	bl	8000e34 <__aeabi_dcmplt>
 8005142:	2800      	cmp	r0, #0
 8005144:	f040 80b7 	bne.w	80052b6 <_dtoa_r+0x69e>
 8005148:	eba5 030b 	sub.w	r3, r5, fp
 800514c:	429f      	cmp	r7, r3
 800514e:	f77f af7c 	ble.w	800504a <_dtoa_r+0x432>
 8005152:	2200      	movs	r2, #0
 8005154:	4b30      	ldr	r3, [pc, #192]	; (8005218 <_dtoa_r+0x600>)
 8005156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800515a:	f7fb f9f9 	bl	8000550 <__aeabi_dmul>
 800515e:	2200      	movs	r2, #0
 8005160:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005164:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <_dtoa_r+0x600>)
 8005166:	e9dd 0100 	ldrd	r0, r1, [sp]
 800516a:	f7fb f9f1 	bl	8000550 <__aeabi_dmul>
 800516e:	e9cd 0100 	strd	r0, r1, [sp]
 8005172:	e7c4      	b.n	80050fe <_dtoa_r+0x4e6>
 8005174:	462a      	mov	r2, r5
 8005176:	4633      	mov	r3, r6
 8005178:	f7fb f9ea 	bl	8000550 <__aeabi_dmul>
 800517c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005180:	eb0b 0507 	add.w	r5, fp, r7
 8005184:	465e      	mov	r6, fp
 8005186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800518a:	f7fb fbf3 	bl	8000974 <__aeabi_d2iz>
 800518e:	4607      	mov	r7, r0
 8005190:	f7fb f974 	bl	800047c <__aeabi_i2d>
 8005194:	3730      	adds	r7, #48	; 0x30
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800519e:	f7fb f81f 	bl	80001e0 <__aeabi_dsub>
 80051a2:	f806 7b01 	strb.w	r7, [r6], #1
 80051a6:	42ae      	cmp	r6, r5
 80051a8:	e9cd 0100 	strd	r0, r1, [sp]
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	d126      	bne.n	8005200 <_dtoa_r+0x5e8>
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <_dtoa_r+0x60c>)
 80051b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051b8:	f7fb f814 	bl	80001e4 <__adddf3>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051c4:	f7fb fe54 	bl	8000e70 <__aeabi_dcmpgt>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d174      	bne.n	80052b6 <_dtoa_r+0x69e>
 80051cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051d0:	2000      	movs	r0, #0
 80051d2:	4914      	ldr	r1, [pc, #80]	; (8005224 <_dtoa_r+0x60c>)
 80051d4:	f7fb f804 	bl	80001e0 <__aeabi_dsub>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051e0:	f7fb fe28 	bl	8000e34 <__aeabi_dcmplt>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f43f af30 	beq.w	800504a <_dtoa_r+0x432>
 80051ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051ee:	2b30      	cmp	r3, #48	; 0x30
 80051f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80051f4:	d002      	beq.n	80051fc <_dtoa_r+0x5e4>
 80051f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80051fa:	e04a      	b.n	8005292 <_dtoa_r+0x67a>
 80051fc:	4615      	mov	r5, r2
 80051fe:	e7f4      	b.n	80051ea <_dtoa_r+0x5d2>
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <_dtoa_r+0x600>)
 8005202:	f7fb f9a5 	bl	8000550 <__aeabi_dmul>
 8005206:	e9cd 0100 	strd	r0, r1, [sp]
 800520a:	e7bc      	b.n	8005186 <_dtoa_r+0x56e>
 800520c:	080065d0 	.word	0x080065d0
 8005210:	080065a8 	.word	0x080065a8
 8005214:	3ff00000 	.word	0x3ff00000
 8005218:	40240000 	.word	0x40240000
 800521c:	401c0000 	.word	0x401c0000
 8005220:	40140000 	.word	0x40140000
 8005224:	3fe00000 	.word	0x3fe00000
 8005228:	e9dd 6700 	ldrd	r6, r7, [sp]
 800522c:	465d      	mov	r5, fp
 800522e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005232:	4630      	mov	r0, r6
 8005234:	4639      	mov	r1, r7
 8005236:	f7fb fab5 	bl	80007a4 <__aeabi_ddiv>
 800523a:	f7fb fb9b 	bl	8000974 <__aeabi_d2iz>
 800523e:	4680      	mov	r8, r0
 8005240:	f7fb f91c 	bl	800047c <__aeabi_i2d>
 8005244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005248:	f7fb f982 	bl	8000550 <__aeabi_dmul>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4630      	mov	r0, r6
 8005252:	4639      	mov	r1, r7
 8005254:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005258:	f7fa ffc2 	bl	80001e0 <__aeabi_dsub>
 800525c:	f805 6b01 	strb.w	r6, [r5], #1
 8005260:	eba5 060b 	sub.w	r6, r5, fp
 8005264:	45b1      	cmp	r9, r6
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	d139      	bne.n	80052e0 <_dtoa_r+0x6c8>
 800526c:	f7fa ffba 	bl	80001e4 <__adddf3>
 8005270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005274:	4606      	mov	r6, r0
 8005276:	460f      	mov	r7, r1
 8005278:	f7fb fdfa 	bl	8000e70 <__aeabi_dcmpgt>
 800527c:	b9c8      	cbnz	r0, 80052b2 <_dtoa_r+0x69a>
 800527e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005282:	4630      	mov	r0, r6
 8005284:	4639      	mov	r1, r7
 8005286:	f7fb fdcb 	bl	8000e20 <__aeabi_dcmpeq>
 800528a:	b110      	cbz	r0, 8005292 <_dtoa_r+0x67a>
 800528c:	f018 0f01 	tst.w	r8, #1
 8005290:	d10f      	bne.n	80052b2 <_dtoa_r+0x69a>
 8005292:	9904      	ldr	r1, [sp, #16]
 8005294:	4620      	mov	r0, r4
 8005296:	f000 fac1 	bl	800581c <_Bfree>
 800529a:	2300      	movs	r3, #0
 800529c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800529e:	702b      	strb	r3, [r5, #0]
 80052a0:	f10a 0301 	add.w	r3, sl, #1
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8241 	beq.w	8005730 <_dtoa_r+0xb18>
 80052ae:	601d      	str	r5, [r3, #0]
 80052b0:	e23e      	b.n	8005730 <_dtoa_r+0xb18>
 80052b2:	f8cd a020 	str.w	sl, [sp, #32]
 80052b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052ba:	2a39      	cmp	r2, #57	; 0x39
 80052bc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80052c0:	d108      	bne.n	80052d4 <_dtoa_r+0x6bc>
 80052c2:	459b      	cmp	fp, r3
 80052c4:	d10a      	bne.n	80052dc <_dtoa_r+0x6c4>
 80052c6:	9b08      	ldr	r3, [sp, #32]
 80052c8:	3301      	adds	r3, #1
 80052ca:	9308      	str	r3, [sp, #32]
 80052cc:	2330      	movs	r3, #48	; 0x30
 80052ce:	f88b 3000 	strb.w	r3, [fp]
 80052d2:	465b      	mov	r3, fp
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	3201      	adds	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	e78c      	b.n	80051f6 <_dtoa_r+0x5de>
 80052dc:	461d      	mov	r5, r3
 80052de:	e7ea      	b.n	80052b6 <_dtoa_r+0x69e>
 80052e0:	2200      	movs	r2, #0
 80052e2:	4b9b      	ldr	r3, [pc, #620]	; (8005550 <_dtoa_r+0x938>)
 80052e4:	f7fb f934 	bl	8000550 <__aeabi_dmul>
 80052e8:	2200      	movs	r2, #0
 80052ea:	2300      	movs	r3, #0
 80052ec:	4606      	mov	r6, r0
 80052ee:	460f      	mov	r7, r1
 80052f0:	f7fb fd96 	bl	8000e20 <__aeabi_dcmpeq>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d09a      	beq.n	800522e <_dtoa_r+0x616>
 80052f8:	e7cb      	b.n	8005292 <_dtoa_r+0x67a>
 80052fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052fc:	2a00      	cmp	r2, #0
 80052fe:	f000 808b 	beq.w	8005418 <_dtoa_r+0x800>
 8005302:	9a06      	ldr	r2, [sp, #24]
 8005304:	2a01      	cmp	r2, #1
 8005306:	dc6e      	bgt.n	80053e6 <_dtoa_r+0x7ce>
 8005308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800530a:	2a00      	cmp	r2, #0
 800530c:	d067      	beq.n	80053de <_dtoa_r+0x7c6>
 800530e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005312:	9f07      	ldr	r7, [sp, #28]
 8005314:	9d05      	ldr	r5, [sp, #20]
 8005316:	9a05      	ldr	r2, [sp, #20]
 8005318:	2101      	movs	r1, #1
 800531a:	441a      	add	r2, r3
 800531c:	4620      	mov	r0, r4
 800531e:	9205      	str	r2, [sp, #20]
 8005320:	4498      	add	r8, r3
 8005322:	f000 fb1b 	bl	800595c <__i2b>
 8005326:	4606      	mov	r6, r0
 8005328:	2d00      	cmp	r5, #0
 800532a:	dd0c      	ble.n	8005346 <_dtoa_r+0x72e>
 800532c:	f1b8 0f00 	cmp.w	r8, #0
 8005330:	dd09      	ble.n	8005346 <_dtoa_r+0x72e>
 8005332:	4545      	cmp	r5, r8
 8005334:	9a05      	ldr	r2, [sp, #20]
 8005336:	462b      	mov	r3, r5
 8005338:	bfa8      	it	ge
 800533a:	4643      	movge	r3, r8
 800533c:	1ad2      	subs	r2, r2, r3
 800533e:	9205      	str	r2, [sp, #20]
 8005340:	1aed      	subs	r5, r5, r3
 8005342:	eba8 0803 	sub.w	r8, r8, r3
 8005346:	9b07      	ldr	r3, [sp, #28]
 8005348:	b1eb      	cbz	r3, 8005386 <_dtoa_r+0x76e>
 800534a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d067      	beq.n	8005420 <_dtoa_r+0x808>
 8005350:	b18f      	cbz	r7, 8005376 <_dtoa_r+0x75e>
 8005352:	4631      	mov	r1, r6
 8005354:	463a      	mov	r2, r7
 8005356:	4620      	mov	r0, r4
 8005358:	f000 fba0 	bl	8005a9c <__pow5mult>
 800535c:	9a04      	ldr	r2, [sp, #16]
 800535e:	4601      	mov	r1, r0
 8005360:	4606      	mov	r6, r0
 8005362:	4620      	mov	r0, r4
 8005364:	f000 fb03 	bl	800596e <__multiply>
 8005368:	9904      	ldr	r1, [sp, #16]
 800536a:	9008      	str	r0, [sp, #32]
 800536c:	4620      	mov	r0, r4
 800536e:	f000 fa55 	bl	800581c <_Bfree>
 8005372:	9b08      	ldr	r3, [sp, #32]
 8005374:	9304      	str	r3, [sp, #16]
 8005376:	9b07      	ldr	r3, [sp, #28]
 8005378:	1bda      	subs	r2, r3, r7
 800537a:	d004      	beq.n	8005386 <_dtoa_r+0x76e>
 800537c:	9904      	ldr	r1, [sp, #16]
 800537e:	4620      	mov	r0, r4
 8005380:	f000 fb8c 	bl	8005a9c <__pow5mult>
 8005384:	9004      	str	r0, [sp, #16]
 8005386:	2101      	movs	r1, #1
 8005388:	4620      	mov	r0, r4
 800538a:	f000 fae7 	bl	800595c <__i2b>
 800538e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005390:	4607      	mov	r7, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 81d0 	beq.w	8005738 <_dtoa_r+0xb20>
 8005398:	461a      	mov	r2, r3
 800539a:	4601      	mov	r1, r0
 800539c:	4620      	mov	r0, r4
 800539e:	f000 fb7d 	bl	8005a9c <__pow5mult>
 80053a2:	9b06      	ldr	r3, [sp, #24]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	4607      	mov	r7, r0
 80053a8:	dc40      	bgt.n	800542c <_dtoa_r+0x814>
 80053aa:	9b00      	ldr	r3, [sp, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d139      	bne.n	8005424 <_dtoa_r+0x80c>
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d136      	bne.n	8005428 <_dtoa_r+0x810>
 80053ba:	9b01      	ldr	r3, [sp, #4]
 80053bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053c0:	0d1b      	lsrs	r3, r3, #20
 80053c2:	051b      	lsls	r3, r3, #20
 80053c4:	b12b      	cbz	r3, 80053d2 <_dtoa_r+0x7ba>
 80053c6:	9b05      	ldr	r3, [sp, #20]
 80053c8:	3301      	adds	r3, #1
 80053ca:	9305      	str	r3, [sp, #20]
 80053cc:	f108 0801 	add.w	r8, r8, #1
 80053d0:	2301      	movs	r3, #1
 80053d2:	9307      	str	r3, [sp, #28]
 80053d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d12a      	bne.n	8005430 <_dtoa_r+0x818>
 80053da:	2001      	movs	r0, #1
 80053dc:	e030      	b.n	8005440 <_dtoa_r+0x828>
 80053de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053e4:	e795      	b.n	8005312 <_dtoa_r+0x6fa>
 80053e6:	9b07      	ldr	r3, [sp, #28]
 80053e8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80053ec:	42bb      	cmp	r3, r7
 80053ee:	bfbf      	itttt	lt
 80053f0:	9b07      	ldrlt	r3, [sp, #28]
 80053f2:	9707      	strlt	r7, [sp, #28]
 80053f4:	1afa      	sublt	r2, r7, r3
 80053f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80053f8:	bfbb      	ittet	lt
 80053fa:	189b      	addlt	r3, r3, r2
 80053fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80053fe:	1bdf      	subge	r7, r3, r7
 8005400:	2700      	movlt	r7, #0
 8005402:	f1b9 0f00 	cmp.w	r9, #0
 8005406:	bfb5      	itete	lt
 8005408:	9b05      	ldrlt	r3, [sp, #20]
 800540a:	9d05      	ldrge	r5, [sp, #20]
 800540c:	eba3 0509 	sublt.w	r5, r3, r9
 8005410:	464b      	movge	r3, r9
 8005412:	bfb8      	it	lt
 8005414:	2300      	movlt	r3, #0
 8005416:	e77e      	b.n	8005316 <_dtoa_r+0x6fe>
 8005418:	9f07      	ldr	r7, [sp, #28]
 800541a:	9d05      	ldr	r5, [sp, #20]
 800541c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800541e:	e783      	b.n	8005328 <_dtoa_r+0x710>
 8005420:	9a07      	ldr	r2, [sp, #28]
 8005422:	e7ab      	b.n	800537c <_dtoa_r+0x764>
 8005424:	2300      	movs	r3, #0
 8005426:	e7d4      	b.n	80053d2 <_dtoa_r+0x7ba>
 8005428:	9b00      	ldr	r3, [sp, #0]
 800542a:	e7d2      	b.n	80053d2 <_dtoa_r+0x7ba>
 800542c:	2300      	movs	r3, #0
 800542e:	9307      	str	r3, [sp, #28]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005436:	6918      	ldr	r0, [r3, #16]
 8005438:	f000 fa42 	bl	80058c0 <__hi0bits>
 800543c:	f1c0 0020 	rsb	r0, r0, #32
 8005440:	4440      	add	r0, r8
 8005442:	f010 001f 	ands.w	r0, r0, #31
 8005446:	d047      	beq.n	80054d8 <_dtoa_r+0x8c0>
 8005448:	f1c0 0320 	rsb	r3, r0, #32
 800544c:	2b04      	cmp	r3, #4
 800544e:	dd3b      	ble.n	80054c8 <_dtoa_r+0x8b0>
 8005450:	9b05      	ldr	r3, [sp, #20]
 8005452:	f1c0 001c 	rsb	r0, r0, #28
 8005456:	4403      	add	r3, r0
 8005458:	9305      	str	r3, [sp, #20]
 800545a:	4405      	add	r5, r0
 800545c:	4480      	add	r8, r0
 800545e:	9b05      	ldr	r3, [sp, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	dd05      	ble.n	8005470 <_dtoa_r+0x858>
 8005464:	461a      	mov	r2, r3
 8005466:	9904      	ldr	r1, [sp, #16]
 8005468:	4620      	mov	r0, r4
 800546a:	f000 fb65 	bl	8005b38 <__lshift>
 800546e:	9004      	str	r0, [sp, #16]
 8005470:	f1b8 0f00 	cmp.w	r8, #0
 8005474:	dd05      	ble.n	8005482 <_dtoa_r+0x86a>
 8005476:	4639      	mov	r1, r7
 8005478:	4642      	mov	r2, r8
 800547a:	4620      	mov	r0, r4
 800547c:	f000 fb5c 	bl	8005b38 <__lshift>
 8005480:	4607      	mov	r7, r0
 8005482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005484:	b353      	cbz	r3, 80054dc <_dtoa_r+0x8c4>
 8005486:	4639      	mov	r1, r7
 8005488:	9804      	ldr	r0, [sp, #16]
 800548a:	f000 fba9 	bl	8005be0 <__mcmp>
 800548e:	2800      	cmp	r0, #0
 8005490:	da24      	bge.n	80054dc <_dtoa_r+0x8c4>
 8005492:	2300      	movs	r3, #0
 8005494:	220a      	movs	r2, #10
 8005496:	9904      	ldr	r1, [sp, #16]
 8005498:	4620      	mov	r0, r4
 800549a:	f000 f9d6 	bl	800584a <__multadd>
 800549e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a0:	9004      	str	r0, [sp, #16]
 80054a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 814d 	beq.w	8005746 <_dtoa_r+0xb2e>
 80054ac:	2300      	movs	r3, #0
 80054ae:	4631      	mov	r1, r6
 80054b0:	220a      	movs	r2, #10
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 f9c9 	bl	800584a <__multadd>
 80054b8:	9b02      	ldr	r3, [sp, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	4606      	mov	r6, r0
 80054be:	dc4f      	bgt.n	8005560 <_dtoa_r+0x948>
 80054c0:	9b06      	ldr	r3, [sp, #24]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	dd4c      	ble.n	8005560 <_dtoa_r+0x948>
 80054c6:	e011      	b.n	80054ec <_dtoa_r+0x8d4>
 80054c8:	d0c9      	beq.n	800545e <_dtoa_r+0x846>
 80054ca:	9a05      	ldr	r2, [sp, #20]
 80054cc:	331c      	adds	r3, #28
 80054ce:	441a      	add	r2, r3
 80054d0:	9205      	str	r2, [sp, #20]
 80054d2:	441d      	add	r5, r3
 80054d4:	4498      	add	r8, r3
 80054d6:	e7c2      	b.n	800545e <_dtoa_r+0x846>
 80054d8:	4603      	mov	r3, r0
 80054da:	e7f6      	b.n	80054ca <_dtoa_r+0x8b2>
 80054dc:	f1b9 0f00 	cmp.w	r9, #0
 80054e0:	dc38      	bgt.n	8005554 <_dtoa_r+0x93c>
 80054e2:	9b06      	ldr	r3, [sp, #24]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	dd35      	ble.n	8005554 <_dtoa_r+0x93c>
 80054e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80054ec:	9b02      	ldr	r3, [sp, #8]
 80054ee:	b963      	cbnz	r3, 800550a <_dtoa_r+0x8f2>
 80054f0:	4639      	mov	r1, r7
 80054f2:	2205      	movs	r2, #5
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 f9a8 	bl	800584a <__multadd>
 80054fa:	4601      	mov	r1, r0
 80054fc:	4607      	mov	r7, r0
 80054fe:	9804      	ldr	r0, [sp, #16]
 8005500:	f000 fb6e 	bl	8005be0 <__mcmp>
 8005504:	2800      	cmp	r0, #0
 8005506:	f73f adcc 	bgt.w	80050a2 <_dtoa_r+0x48a>
 800550a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800550c:	465d      	mov	r5, fp
 800550e:	ea6f 0a03 	mvn.w	sl, r3
 8005512:	f04f 0900 	mov.w	r9, #0
 8005516:	4639      	mov	r1, r7
 8005518:	4620      	mov	r0, r4
 800551a:	f000 f97f 	bl	800581c <_Bfree>
 800551e:	2e00      	cmp	r6, #0
 8005520:	f43f aeb7 	beq.w	8005292 <_dtoa_r+0x67a>
 8005524:	f1b9 0f00 	cmp.w	r9, #0
 8005528:	d005      	beq.n	8005536 <_dtoa_r+0x91e>
 800552a:	45b1      	cmp	r9, r6
 800552c:	d003      	beq.n	8005536 <_dtoa_r+0x91e>
 800552e:	4649      	mov	r1, r9
 8005530:	4620      	mov	r0, r4
 8005532:	f000 f973 	bl	800581c <_Bfree>
 8005536:	4631      	mov	r1, r6
 8005538:	4620      	mov	r0, r4
 800553a:	f000 f96f 	bl	800581c <_Bfree>
 800553e:	e6a8      	b.n	8005292 <_dtoa_r+0x67a>
 8005540:	2700      	movs	r7, #0
 8005542:	463e      	mov	r6, r7
 8005544:	e7e1      	b.n	800550a <_dtoa_r+0x8f2>
 8005546:	f8dd a020 	ldr.w	sl, [sp, #32]
 800554a:	463e      	mov	r6, r7
 800554c:	e5a9      	b.n	80050a2 <_dtoa_r+0x48a>
 800554e:	bf00      	nop
 8005550:	40240000 	.word	0x40240000
 8005554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005556:	f8cd 9008 	str.w	r9, [sp, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80fa 	beq.w	8005754 <_dtoa_r+0xb3c>
 8005560:	2d00      	cmp	r5, #0
 8005562:	dd05      	ble.n	8005570 <_dtoa_r+0x958>
 8005564:	4631      	mov	r1, r6
 8005566:	462a      	mov	r2, r5
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fae5 	bl	8005b38 <__lshift>
 800556e:	4606      	mov	r6, r0
 8005570:	9b07      	ldr	r3, [sp, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d04c      	beq.n	8005610 <_dtoa_r+0x9f8>
 8005576:	6871      	ldr	r1, [r6, #4]
 8005578:	4620      	mov	r0, r4
 800557a:	f000 f91b 	bl	80057b4 <_Balloc>
 800557e:	6932      	ldr	r2, [r6, #16]
 8005580:	3202      	adds	r2, #2
 8005582:	4605      	mov	r5, r0
 8005584:	0092      	lsls	r2, r2, #2
 8005586:	f106 010c 	add.w	r1, r6, #12
 800558a:	300c      	adds	r0, #12
 800558c:	f7fe ff5a 	bl	8004444 <memcpy>
 8005590:	2201      	movs	r2, #1
 8005592:	4629      	mov	r1, r5
 8005594:	4620      	mov	r0, r4
 8005596:	f000 facf 	bl	8005b38 <__lshift>
 800559a:	9b00      	ldr	r3, [sp, #0]
 800559c:	f8cd b014 	str.w	fp, [sp, #20]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	46b1      	mov	r9, r6
 80055a6:	9307      	str	r3, [sp, #28]
 80055a8:	4606      	mov	r6, r0
 80055aa:	4639      	mov	r1, r7
 80055ac:	9804      	ldr	r0, [sp, #16]
 80055ae:	f7ff faa6 	bl	8004afe <quorem>
 80055b2:	4649      	mov	r1, r9
 80055b4:	4605      	mov	r5, r0
 80055b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80055ba:	9804      	ldr	r0, [sp, #16]
 80055bc:	f000 fb10 	bl	8005be0 <__mcmp>
 80055c0:	4632      	mov	r2, r6
 80055c2:	9000      	str	r0, [sp, #0]
 80055c4:	4639      	mov	r1, r7
 80055c6:	4620      	mov	r0, r4
 80055c8:	f000 fb24 	bl	8005c14 <__mdiff>
 80055cc:	68c3      	ldr	r3, [r0, #12]
 80055ce:	4602      	mov	r2, r0
 80055d0:	bb03      	cbnz	r3, 8005614 <_dtoa_r+0x9fc>
 80055d2:	4601      	mov	r1, r0
 80055d4:	9008      	str	r0, [sp, #32]
 80055d6:	9804      	ldr	r0, [sp, #16]
 80055d8:	f000 fb02 	bl	8005be0 <__mcmp>
 80055dc:	9a08      	ldr	r2, [sp, #32]
 80055de:	4603      	mov	r3, r0
 80055e0:	4611      	mov	r1, r2
 80055e2:	4620      	mov	r0, r4
 80055e4:	9308      	str	r3, [sp, #32]
 80055e6:	f000 f919 	bl	800581c <_Bfree>
 80055ea:	9b08      	ldr	r3, [sp, #32]
 80055ec:	b9a3      	cbnz	r3, 8005618 <_dtoa_r+0xa00>
 80055ee:	9a06      	ldr	r2, [sp, #24]
 80055f0:	b992      	cbnz	r2, 8005618 <_dtoa_r+0xa00>
 80055f2:	9a07      	ldr	r2, [sp, #28]
 80055f4:	b982      	cbnz	r2, 8005618 <_dtoa_r+0xa00>
 80055f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055fa:	d029      	beq.n	8005650 <_dtoa_r+0xa38>
 80055fc:	9b00      	ldr	r3, [sp, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	dd01      	ble.n	8005606 <_dtoa_r+0x9ee>
 8005602:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	1c5d      	adds	r5, r3, #1
 800560a:	f883 8000 	strb.w	r8, [r3]
 800560e:	e782      	b.n	8005516 <_dtoa_r+0x8fe>
 8005610:	4630      	mov	r0, r6
 8005612:	e7c2      	b.n	800559a <_dtoa_r+0x982>
 8005614:	2301      	movs	r3, #1
 8005616:	e7e3      	b.n	80055e0 <_dtoa_r+0x9c8>
 8005618:	9a00      	ldr	r2, [sp, #0]
 800561a:	2a00      	cmp	r2, #0
 800561c:	db04      	blt.n	8005628 <_dtoa_r+0xa10>
 800561e:	d125      	bne.n	800566c <_dtoa_r+0xa54>
 8005620:	9a06      	ldr	r2, [sp, #24]
 8005622:	bb1a      	cbnz	r2, 800566c <_dtoa_r+0xa54>
 8005624:	9a07      	ldr	r2, [sp, #28]
 8005626:	bb0a      	cbnz	r2, 800566c <_dtoa_r+0xa54>
 8005628:	2b00      	cmp	r3, #0
 800562a:	ddec      	ble.n	8005606 <_dtoa_r+0x9ee>
 800562c:	2201      	movs	r2, #1
 800562e:	9904      	ldr	r1, [sp, #16]
 8005630:	4620      	mov	r0, r4
 8005632:	f000 fa81 	bl	8005b38 <__lshift>
 8005636:	4639      	mov	r1, r7
 8005638:	9004      	str	r0, [sp, #16]
 800563a:	f000 fad1 	bl	8005be0 <__mcmp>
 800563e:	2800      	cmp	r0, #0
 8005640:	dc03      	bgt.n	800564a <_dtoa_r+0xa32>
 8005642:	d1e0      	bne.n	8005606 <_dtoa_r+0x9ee>
 8005644:	f018 0f01 	tst.w	r8, #1
 8005648:	d0dd      	beq.n	8005606 <_dtoa_r+0x9ee>
 800564a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800564e:	d1d8      	bne.n	8005602 <_dtoa_r+0x9ea>
 8005650:	9b05      	ldr	r3, [sp, #20]
 8005652:	9a05      	ldr	r2, [sp, #20]
 8005654:	1c5d      	adds	r5, r3, #1
 8005656:	2339      	movs	r3, #57	; 0x39
 8005658:	7013      	strb	r3, [r2, #0]
 800565a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800565e:	2b39      	cmp	r3, #57	; 0x39
 8005660:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005664:	d04f      	beq.n	8005706 <_dtoa_r+0xaee>
 8005666:	3301      	adds	r3, #1
 8005668:	7013      	strb	r3, [r2, #0]
 800566a:	e754      	b.n	8005516 <_dtoa_r+0x8fe>
 800566c:	9a05      	ldr	r2, [sp, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f102 0501 	add.w	r5, r2, #1
 8005674:	dd06      	ble.n	8005684 <_dtoa_r+0xa6c>
 8005676:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800567a:	d0e9      	beq.n	8005650 <_dtoa_r+0xa38>
 800567c:	f108 0801 	add.w	r8, r8, #1
 8005680:	9b05      	ldr	r3, [sp, #20]
 8005682:	e7c2      	b.n	800560a <_dtoa_r+0x9f2>
 8005684:	9a02      	ldr	r2, [sp, #8]
 8005686:	f805 8c01 	strb.w	r8, [r5, #-1]
 800568a:	eba5 030b 	sub.w	r3, r5, fp
 800568e:	4293      	cmp	r3, r2
 8005690:	d021      	beq.n	80056d6 <_dtoa_r+0xabe>
 8005692:	2300      	movs	r3, #0
 8005694:	220a      	movs	r2, #10
 8005696:	9904      	ldr	r1, [sp, #16]
 8005698:	4620      	mov	r0, r4
 800569a:	f000 f8d6 	bl	800584a <__multadd>
 800569e:	45b1      	cmp	r9, r6
 80056a0:	9004      	str	r0, [sp, #16]
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	f04f 020a 	mov.w	r2, #10
 80056aa:	4649      	mov	r1, r9
 80056ac:	4620      	mov	r0, r4
 80056ae:	d105      	bne.n	80056bc <_dtoa_r+0xaa4>
 80056b0:	f000 f8cb 	bl	800584a <__multadd>
 80056b4:	4681      	mov	r9, r0
 80056b6:	4606      	mov	r6, r0
 80056b8:	9505      	str	r5, [sp, #20]
 80056ba:	e776      	b.n	80055aa <_dtoa_r+0x992>
 80056bc:	f000 f8c5 	bl	800584a <__multadd>
 80056c0:	4631      	mov	r1, r6
 80056c2:	4681      	mov	r9, r0
 80056c4:	2300      	movs	r3, #0
 80056c6:	220a      	movs	r2, #10
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 f8be 	bl	800584a <__multadd>
 80056ce:	4606      	mov	r6, r0
 80056d0:	e7f2      	b.n	80056b8 <_dtoa_r+0xaa0>
 80056d2:	f04f 0900 	mov.w	r9, #0
 80056d6:	2201      	movs	r2, #1
 80056d8:	9904      	ldr	r1, [sp, #16]
 80056da:	4620      	mov	r0, r4
 80056dc:	f000 fa2c 	bl	8005b38 <__lshift>
 80056e0:	4639      	mov	r1, r7
 80056e2:	9004      	str	r0, [sp, #16]
 80056e4:	f000 fa7c 	bl	8005be0 <__mcmp>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	dcb6      	bgt.n	800565a <_dtoa_r+0xa42>
 80056ec:	d102      	bne.n	80056f4 <_dtoa_r+0xadc>
 80056ee:	f018 0f01 	tst.w	r8, #1
 80056f2:	d1b2      	bne.n	800565a <_dtoa_r+0xa42>
 80056f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056f8:	2b30      	cmp	r3, #48	; 0x30
 80056fa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80056fe:	f47f af0a 	bne.w	8005516 <_dtoa_r+0x8fe>
 8005702:	4615      	mov	r5, r2
 8005704:	e7f6      	b.n	80056f4 <_dtoa_r+0xadc>
 8005706:	4593      	cmp	fp, r2
 8005708:	d105      	bne.n	8005716 <_dtoa_r+0xafe>
 800570a:	2331      	movs	r3, #49	; 0x31
 800570c:	f10a 0a01 	add.w	sl, sl, #1
 8005710:	f88b 3000 	strb.w	r3, [fp]
 8005714:	e6ff      	b.n	8005516 <_dtoa_r+0x8fe>
 8005716:	4615      	mov	r5, r2
 8005718:	e79f      	b.n	800565a <_dtoa_r+0xa42>
 800571a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005780 <_dtoa_r+0xb68>
 800571e:	e007      	b.n	8005730 <_dtoa_r+0xb18>
 8005720:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005722:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005784 <_dtoa_r+0xb6c>
 8005726:	b11b      	cbz	r3, 8005730 <_dtoa_r+0xb18>
 8005728:	f10b 0308 	add.w	r3, fp, #8
 800572c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	4658      	mov	r0, fp
 8005732:	b017      	add	sp, #92	; 0x5c
 8005734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005738:	9b06      	ldr	r3, [sp, #24]
 800573a:	2b01      	cmp	r3, #1
 800573c:	f77f ae35 	ble.w	80053aa <_dtoa_r+0x792>
 8005740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005742:	9307      	str	r3, [sp, #28]
 8005744:	e649      	b.n	80053da <_dtoa_r+0x7c2>
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	dc03      	bgt.n	8005754 <_dtoa_r+0xb3c>
 800574c:	9b06      	ldr	r3, [sp, #24]
 800574e:	2b02      	cmp	r3, #2
 8005750:	f73f aecc 	bgt.w	80054ec <_dtoa_r+0x8d4>
 8005754:	465d      	mov	r5, fp
 8005756:	4639      	mov	r1, r7
 8005758:	9804      	ldr	r0, [sp, #16]
 800575a:	f7ff f9d0 	bl	8004afe <quorem>
 800575e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005762:	f805 8b01 	strb.w	r8, [r5], #1
 8005766:	9a02      	ldr	r2, [sp, #8]
 8005768:	eba5 030b 	sub.w	r3, r5, fp
 800576c:	429a      	cmp	r2, r3
 800576e:	ddb0      	ble.n	80056d2 <_dtoa_r+0xaba>
 8005770:	2300      	movs	r3, #0
 8005772:	220a      	movs	r2, #10
 8005774:	9904      	ldr	r1, [sp, #16]
 8005776:	4620      	mov	r0, r4
 8005778:	f000 f867 	bl	800584a <__multadd>
 800577c:	9004      	str	r0, [sp, #16]
 800577e:	e7ea      	b.n	8005756 <_dtoa_r+0xb3e>
 8005780:	08006534 	.word	0x08006534
 8005784:	08006536 	.word	0x08006536

08005788 <_localeconv_r>:
 8005788:	4b04      	ldr	r3, [pc, #16]	; (800579c <_localeconv_r+0x14>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6a18      	ldr	r0, [r3, #32]
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <_localeconv_r+0x18>)
 8005790:	2800      	cmp	r0, #0
 8005792:	bf08      	it	eq
 8005794:	4618      	moveq	r0, r3
 8005796:	30f0      	adds	r0, #240	; 0xf0
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000068 	.word	0x20000068
 80057a0:	200000cc 	.word	0x200000cc

080057a4 <malloc>:
 80057a4:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <malloc+0xc>)
 80057a6:	4601      	mov	r1, r0
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	f000 baed 	b.w	8005d88 <_malloc_r>
 80057ae:	bf00      	nop
 80057b0:	20000068 	.word	0x20000068

080057b4 <_Balloc>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057b8:	4604      	mov	r4, r0
 80057ba:	460e      	mov	r6, r1
 80057bc:	b93d      	cbnz	r5, 80057ce <_Balloc+0x1a>
 80057be:	2010      	movs	r0, #16
 80057c0:	f7ff fff0 	bl	80057a4 <malloc>
 80057c4:	6260      	str	r0, [r4, #36]	; 0x24
 80057c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057ca:	6005      	str	r5, [r0, #0]
 80057cc:	60c5      	str	r5, [r0, #12]
 80057ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80057d0:	68eb      	ldr	r3, [r5, #12]
 80057d2:	b183      	cbz	r3, 80057f6 <_Balloc+0x42>
 80057d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80057dc:	b9b8      	cbnz	r0, 800580e <_Balloc+0x5a>
 80057de:	2101      	movs	r1, #1
 80057e0:	fa01 f506 	lsl.w	r5, r1, r6
 80057e4:	1d6a      	adds	r2, r5, #5
 80057e6:	0092      	lsls	r2, r2, #2
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 fabf 	bl	8005d6c <_calloc_r>
 80057ee:	b160      	cbz	r0, 800580a <_Balloc+0x56>
 80057f0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80057f4:	e00e      	b.n	8005814 <_Balloc+0x60>
 80057f6:	2221      	movs	r2, #33	; 0x21
 80057f8:	2104      	movs	r1, #4
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 fab6 	bl	8005d6c <_calloc_r>
 8005800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005802:	60e8      	str	r0, [r5, #12]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e4      	bne.n	80057d4 <_Balloc+0x20>
 800580a:	2000      	movs	r0, #0
 800580c:	bd70      	pop	{r4, r5, r6, pc}
 800580e:	6802      	ldr	r2, [r0, #0]
 8005810:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005814:	2300      	movs	r3, #0
 8005816:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800581a:	e7f7      	b.n	800580c <_Balloc+0x58>

0800581c <_Bfree>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005820:	4606      	mov	r6, r0
 8005822:	460d      	mov	r5, r1
 8005824:	b93c      	cbnz	r4, 8005836 <_Bfree+0x1a>
 8005826:	2010      	movs	r0, #16
 8005828:	f7ff ffbc 	bl	80057a4 <malloc>
 800582c:	6270      	str	r0, [r6, #36]	; 0x24
 800582e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005832:	6004      	str	r4, [r0, #0]
 8005834:	60c4      	str	r4, [r0, #12]
 8005836:	b13d      	cbz	r5, 8005848 <_Bfree+0x2c>
 8005838:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800583a:	686a      	ldr	r2, [r5, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005842:	6029      	str	r1, [r5, #0]
 8005844:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005848:	bd70      	pop	{r4, r5, r6, pc}

0800584a <__multadd>:
 800584a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584e:	690d      	ldr	r5, [r1, #16]
 8005850:	461f      	mov	r7, r3
 8005852:	4606      	mov	r6, r0
 8005854:	460c      	mov	r4, r1
 8005856:	f101 0c14 	add.w	ip, r1, #20
 800585a:	2300      	movs	r3, #0
 800585c:	f8dc 0000 	ldr.w	r0, [ip]
 8005860:	b281      	uxth	r1, r0
 8005862:	fb02 7101 	mla	r1, r2, r1, r7
 8005866:	0c0f      	lsrs	r7, r1, #16
 8005868:	0c00      	lsrs	r0, r0, #16
 800586a:	fb02 7000 	mla	r0, r2, r0, r7
 800586e:	b289      	uxth	r1, r1
 8005870:	3301      	adds	r3, #1
 8005872:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005876:	429d      	cmp	r5, r3
 8005878:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800587c:	f84c 1b04 	str.w	r1, [ip], #4
 8005880:	dcec      	bgt.n	800585c <__multadd+0x12>
 8005882:	b1d7      	cbz	r7, 80058ba <__multadd+0x70>
 8005884:	68a3      	ldr	r3, [r4, #8]
 8005886:	42ab      	cmp	r3, r5
 8005888:	dc12      	bgt.n	80058b0 <__multadd+0x66>
 800588a:	6861      	ldr	r1, [r4, #4]
 800588c:	4630      	mov	r0, r6
 800588e:	3101      	adds	r1, #1
 8005890:	f7ff ff90 	bl	80057b4 <_Balloc>
 8005894:	6922      	ldr	r2, [r4, #16]
 8005896:	3202      	adds	r2, #2
 8005898:	f104 010c 	add.w	r1, r4, #12
 800589c:	4680      	mov	r8, r0
 800589e:	0092      	lsls	r2, r2, #2
 80058a0:	300c      	adds	r0, #12
 80058a2:	f7fe fdcf 	bl	8004444 <memcpy>
 80058a6:	4621      	mov	r1, r4
 80058a8:	4630      	mov	r0, r6
 80058aa:	f7ff ffb7 	bl	800581c <_Bfree>
 80058ae:	4644      	mov	r4, r8
 80058b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058b4:	3501      	adds	r5, #1
 80058b6:	615f      	str	r7, [r3, #20]
 80058b8:	6125      	str	r5, [r4, #16]
 80058ba:	4620      	mov	r0, r4
 80058bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058c0 <__hi0bits>:
 80058c0:	0c02      	lsrs	r2, r0, #16
 80058c2:	0412      	lsls	r2, r2, #16
 80058c4:	4603      	mov	r3, r0
 80058c6:	b9b2      	cbnz	r2, 80058f6 <__hi0bits+0x36>
 80058c8:	0403      	lsls	r3, r0, #16
 80058ca:	2010      	movs	r0, #16
 80058cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80058d0:	bf04      	itt	eq
 80058d2:	021b      	lsleq	r3, r3, #8
 80058d4:	3008      	addeq	r0, #8
 80058d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80058da:	bf04      	itt	eq
 80058dc:	011b      	lsleq	r3, r3, #4
 80058de:	3004      	addeq	r0, #4
 80058e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80058e4:	bf04      	itt	eq
 80058e6:	009b      	lsleq	r3, r3, #2
 80058e8:	3002      	addeq	r0, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	db06      	blt.n	80058fc <__hi0bits+0x3c>
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	d503      	bpl.n	80058fa <__hi0bits+0x3a>
 80058f2:	3001      	adds	r0, #1
 80058f4:	4770      	bx	lr
 80058f6:	2000      	movs	r0, #0
 80058f8:	e7e8      	b.n	80058cc <__hi0bits+0xc>
 80058fa:	2020      	movs	r0, #32
 80058fc:	4770      	bx	lr

080058fe <__lo0bits>:
 80058fe:	6803      	ldr	r3, [r0, #0]
 8005900:	f013 0207 	ands.w	r2, r3, #7
 8005904:	4601      	mov	r1, r0
 8005906:	d00b      	beq.n	8005920 <__lo0bits+0x22>
 8005908:	07da      	lsls	r2, r3, #31
 800590a:	d423      	bmi.n	8005954 <__lo0bits+0x56>
 800590c:	0798      	lsls	r0, r3, #30
 800590e:	bf49      	itett	mi
 8005910:	085b      	lsrmi	r3, r3, #1
 8005912:	089b      	lsrpl	r3, r3, #2
 8005914:	2001      	movmi	r0, #1
 8005916:	600b      	strmi	r3, [r1, #0]
 8005918:	bf5c      	itt	pl
 800591a:	600b      	strpl	r3, [r1, #0]
 800591c:	2002      	movpl	r0, #2
 800591e:	4770      	bx	lr
 8005920:	b298      	uxth	r0, r3
 8005922:	b9a8      	cbnz	r0, 8005950 <__lo0bits+0x52>
 8005924:	0c1b      	lsrs	r3, r3, #16
 8005926:	2010      	movs	r0, #16
 8005928:	f013 0fff 	tst.w	r3, #255	; 0xff
 800592c:	bf04      	itt	eq
 800592e:	0a1b      	lsreq	r3, r3, #8
 8005930:	3008      	addeq	r0, #8
 8005932:	071a      	lsls	r2, r3, #28
 8005934:	bf04      	itt	eq
 8005936:	091b      	lsreq	r3, r3, #4
 8005938:	3004      	addeq	r0, #4
 800593a:	079a      	lsls	r2, r3, #30
 800593c:	bf04      	itt	eq
 800593e:	089b      	lsreq	r3, r3, #2
 8005940:	3002      	addeq	r0, #2
 8005942:	07da      	lsls	r2, r3, #31
 8005944:	d402      	bmi.n	800594c <__lo0bits+0x4e>
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	d006      	beq.n	8005958 <__lo0bits+0x5a>
 800594a:	3001      	adds	r0, #1
 800594c:	600b      	str	r3, [r1, #0]
 800594e:	4770      	bx	lr
 8005950:	4610      	mov	r0, r2
 8005952:	e7e9      	b.n	8005928 <__lo0bits+0x2a>
 8005954:	2000      	movs	r0, #0
 8005956:	4770      	bx	lr
 8005958:	2020      	movs	r0, #32
 800595a:	4770      	bx	lr

0800595c <__i2b>:
 800595c:	b510      	push	{r4, lr}
 800595e:	460c      	mov	r4, r1
 8005960:	2101      	movs	r1, #1
 8005962:	f7ff ff27 	bl	80057b4 <_Balloc>
 8005966:	2201      	movs	r2, #1
 8005968:	6144      	str	r4, [r0, #20]
 800596a:	6102      	str	r2, [r0, #16]
 800596c:	bd10      	pop	{r4, pc}

0800596e <__multiply>:
 800596e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005972:	4614      	mov	r4, r2
 8005974:	690a      	ldr	r2, [r1, #16]
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	429a      	cmp	r2, r3
 800597a:	bfb8      	it	lt
 800597c:	460b      	movlt	r3, r1
 800597e:	4688      	mov	r8, r1
 8005980:	bfbc      	itt	lt
 8005982:	46a0      	movlt	r8, r4
 8005984:	461c      	movlt	r4, r3
 8005986:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800598a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800598e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005992:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005996:	eb07 0609 	add.w	r6, r7, r9
 800599a:	42b3      	cmp	r3, r6
 800599c:	bfb8      	it	lt
 800599e:	3101      	addlt	r1, #1
 80059a0:	f7ff ff08 	bl	80057b4 <_Balloc>
 80059a4:	f100 0514 	add.w	r5, r0, #20
 80059a8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80059ac:	462b      	mov	r3, r5
 80059ae:	2200      	movs	r2, #0
 80059b0:	4573      	cmp	r3, lr
 80059b2:	d316      	bcc.n	80059e2 <__multiply+0x74>
 80059b4:	f104 0214 	add.w	r2, r4, #20
 80059b8:	f108 0114 	add.w	r1, r8, #20
 80059bc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80059c0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	9b00      	ldr	r3, [sp, #0]
 80059c8:	9201      	str	r2, [sp, #4]
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d80c      	bhi.n	80059e8 <__multiply+0x7a>
 80059ce:	2e00      	cmp	r6, #0
 80059d0:	dd03      	ble.n	80059da <__multiply+0x6c>
 80059d2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d05d      	beq.n	8005a96 <__multiply+0x128>
 80059da:	6106      	str	r6, [r0, #16]
 80059dc:	b003      	add	sp, #12
 80059de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e2:	f843 2b04 	str.w	r2, [r3], #4
 80059e6:	e7e3      	b.n	80059b0 <__multiply+0x42>
 80059e8:	f8b2 b000 	ldrh.w	fp, [r2]
 80059ec:	f1bb 0f00 	cmp.w	fp, #0
 80059f0:	d023      	beq.n	8005a3a <__multiply+0xcc>
 80059f2:	4689      	mov	r9, r1
 80059f4:	46ac      	mov	ip, r5
 80059f6:	f04f 0800 	mov.w	r8, #0
 80059fa:	f859 4b04 	ldr.w	r4, [r9], #4
 80059fe:	f8dc a000 	ldr.w	sl, [ip]
 8005a02:	b2a3      	uxth	r3, r4
 8005a04:	fa1f fa8a 	uxth.w	sl, sl
 8005a08:	fb0b a303 	mla	r3, fp, r3, sl
 8005a0c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a10:	f8dc 4000 	ldr.w	r4, [ip]
 8005a14:	4443      	add	r3, r8
 8005a16:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005a1a:	fb0b 840a 	mla	r4, fp, sl, r8
 8005a1e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005a22:	46e2      	mov	sl, ip
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a2a:	454f      	cmp	r7, r9
 8005a2c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005a30:	f84a 3b04 	str.w	r3, [sl], #4
 8005a34:	d82b      	bhi.n	8005a8e <__multiply+0x120>
 8005a36:	f8cc 8004 	str.w	r8, [ip, #4]
 8005a3a:	9b01      	ldr	r3, [sp, #4]
 8005a3c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005a40:	3204      	adds	r2, #4
 8005a42:	f1ba 0f00 	cmp.w	sl, #0
 8005a46:	d020      	beq.n	8005a8a <__multiply+0x11c>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	4689      	mov	r9, r1
 8005a4c:	46a8      	mov	r8, r5
 8005a4e:	f04f 0b00 	mov.w	fp, #0
 8005a52:	f8b9 c000 	ldrh.w	ip, [r9]
 8005a56:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005a5a:	fb0a 440c 	mla	r4, sl, ip, r4
 8005a5e:	445c      	add	r4, fp
 8005a60:	46c4      	mov	ip, r8
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a68:	f84c 3b04 	str.w	r3, [ip], #4
 8005a6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a70:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	fb0a b303 	mla	r3, sl, r3, fp
 8005a7a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005a7e:	454f      	cmp	r7, r9
 8005a80:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005a84:	d805      	bhi.n	8005a92 <__multiply+0x124>
 8005a86:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a8a:	3504      	adds	r5, #4
 8005a8c:	e79b      	b.n	80059c6 <__multiply+0x58>
 8005a8e:	46d4      	mov	ip, sl
 8005a90:	e7b3      	b.n	80059fa <__multiply+0x8c>
 8005a92:	46e0      	mov	r8, ip
 8005a94:	e7dd      	b.n	8005a52 <__multiply+0xe4>
 8005a96:	3e01      	subs	r6, #1
 8005a98:	e799      	b.n	80059ce <__multiply+0x60>
	...

08005a9c <__pow5mult>:
 8005a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa0:	4615      	mov	r5, r2
 8005aa2:	f012 0203 	ands.w	r2, r2, #3
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	460f      	mov	r7, r1
 8005aaa:	d007      	beq.n	8005abc <__pow5mult+0x20>
 8005aac:	3a01      	subs	r2, #1
 8005aae:	4c21      	ldr	r4, [pc, #132]	; (8005b34 <__pow5mult+0x98>)
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ab6:	f7ff fec8 	bl	800584a <__multadd>
 8005aba:	4607      	mov	r7, r0
 8005abc:	10ad      	asrs	r5, r5, #2
 8005abe:	d035      	beq.n	8005b2c <__pow5mult+0x90>
 8005ac0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ac2:	b93c      	cbnz	r4, 8005ad4 <__pow5mult+0x38>
 8005ac4:	2010      	movs	r0, #16
 8005ac6:	f7ff fe6d 	bl	80057a4 <malloc>
 8005aca:	6270      	str	r0, [r6, #36]	; 0x24
 8005acc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ad0:	6004      	str	r4, [r0, #0]
 8005ad2:	60c4      	str	r4, [r0, #12]
 8005ad4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005adc:	b94c      	cbnz	r4, 8005af2 <__pow5mult+0x56>
 8005ade:	f240 2171 	movw	r1, #625	; 0x271
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f7ff ff3a 	bl	800595c <__i2b>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f8c8 0008 	str.w	r0, [r8, #8]
 8005aee:	4604      	mov	r4, r0
 8005af0:	6003      	str	r3, [r0, #0]
 8005af2:	f04f 0800 	mov.w	r8, #0
 8005af6:	07eb      	lsls	r3, r5, #31
 8005af8:	d50a      	bpl.n	8005b10 <__pow5mult+0x74>
 8005afa:	4639      	mov	r1, r7
 8005afc:	4622      	mov	r2, r4
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7ff ff35 	bl	800596e <__multiply>
 8005b04:	4639      	mov	r1, r7
 8005b06:	4681      	mov	r9, r0
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f7ff fe87 	bl	800581c <_Bfree>
 8005b0e:	464f      	mov	r7, r9
 8005b10:	106d      	asrs	r5, r5, #1
 8005b12:	d00b      	beq.n	8005b2c <__pow5mult+0x90>
 8005b14:	6820      	ldr	r0, [r4, #0]
 8005b16:	b938      	cbnz	r0, 8005b28 <__pow5mult+0x8c>
 8005b18:	4622      	mov	r2, r4
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f7ff ff26 	bl	800596e <__multiply>
 8005b22:	6020      	str	r0, [r4, #0]
 8005b24:	f8c0 8000 	str.w	r8, [r0]
 8005b28:	4604      	mov	r4, r0
 8005b2a:	e7e4      	b.n	8005af6 <__pow5mult+0x5a>
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b32:	bf00      	nop
 8005b34:	08006698 	.word	0x08006698

08005b38 <__lshift>:
 8005b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	6849      	ldr	r1, [r1, #4]
 8005b46:	eb0a 0903 	add.w	r9, sl, r3
 8005b4a:	68a3      	ldr	r3, [r4, #8]
 8005b4c:	4607      	mov	r7, r0
 8005b4e:	4616      	mov	r6, r2
 8005b50:	f109 0501 	add.w	r5, r9, #1
 8005b54:	42ab      	cmp	r3, r5
 8005b56:	db32      	blt.n	8005bbe <__lshift+0x86>
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f7ff fe2b 	bl	80057b4 <_Balloc>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	4680      	mov	r8, r0
 8005b62:	f100 0114 	add.w	r1, r0, #20
 8005b66:	461a      	mov	r2, r3
 8005b68:	4553      	cmp	r3, sl
 8005b6a:	db2b      	blt.n	8005bc4 <__lshift+0x8c>
 8005b6c:	6920      	ldr	r0, [r4, #16]
 8005b6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b72:	f104 0314 	add.w	r3, r4, #20
 8005b76:	f016 021f 	ands.w	r2, r6, #31
 8005b7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b7e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b82:	d025      	beq.n	8005bd0 <__lshift+0x98>
 8005b84:	f1c2 0e20 	rsb	lr, r2, #32
 8005b88:	2000      	movs	r0, #0
 8005b8a:	681e      	ldr	r6, [r3, #0]
 8005b8c:	468a      	mov	sl, r1
 8005b8e:	4096      	lsls	r6, r2
 8005b90:	4330      	orrs	r0, r6
 8005b92:	f84a 0b04 	str.w	r0, [sl], #4
 8005b96:	f853 0b04 	ldr.w	r0, [r3], #4
 8005b9a:	459c      	cmp	ip, r3
 8005b9c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005ba0:	d814      	bhi.n	8005bcc <__lshift+0x94>
 8005ba2:	6048      	str	r0, [r1, #4]
 8005ba4:	b108      	cbz	r0, 8005baa <__lshift+0x72>
 8005ba6:	f109 0502 	add.w	r5, r9, #2
 8005baa:	3d01      	subs	r5, #1
 8005bac:	4638      	mov	r0, r7
 8005bae:	f8c8 5010 	str.w	r5, [r8, #16]
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	f7ff fe32 	bl	800581c <_Bfree>
 8005bb8:	4640      	mov	r0, r8
 8005bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bbe:	3101      	adds	r1, #1
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	e7c7      	b.n	8005b54 <__lshift+0x1c>
 8005bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	e7cd      	b.n	8005b68 <__lshift+0x30>
 8005bcc:	4651      	mov	r1, sl
 8005bce:	e7dc      	b.n	8005b8a <__lshift+0x52>
 8005bd0:	3904      	subs	r1, #4
 8005bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bda:	459c      	cmp	ip, r3
 8005bdc:	d8f9      	bhi.n	8005bd2 <__lshift+0x9a>
 8005bde:	e7e4      	b.n	8005baa <__lshift+0x72>

08005be0 <__mcmp>:
 8005be0:	6903      	ldr	r3, [r0, #16]
 8005be2:	690a      	ldr	r2, [r1, #16]
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	b530      	push	{r4, r5, lr}
 8005be8:	d10c      	bne.n	8005c04 <__mcmp+0x24>
 8005bea:	0092      	lsls	r2, r2, #2
 8005bec:	3014      	adds	r0, #20
 8005bee:	3114      	adds	r1, #20
 8005bf0:	1884      	adds	r4, r0, r2
 8005bf2:	4411      	add	r1, r2
 8005bf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005bf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005bfc:	4295      	cmp	r5, r2
 8005bfe:	d003      	beq.n	8005c08 <__mcmp+0x28>
 8005c00:	d305      	bcc.n	8005c0e <__mcmp+0x2e>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4618      	mov	r0, r3
 8005c06:	bd30      	pop	{r4, r5, pc}
 8005c08:	42a0      	cmp	r0, r4
 8005c0a:	d3f3      	bcc.n	8005bf4 <__mcmp+0x14>
 8005c0c:	e7fa      	b.n	8005c04 <__mcmp+0x24>
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c12:	e7f7      	b.n	8005c04 <__mcmp+0x24>

08005c14 <__mdiff>:
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	460d      	mov	r5, r1
 8005c1a:	4607      	mov	r7, r0
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	4628      	mov	r0, r5
 8005c20:	4614      	mov	r4, r2
 8005c22:	f7ff ffdd 	bl	8005be0 <__mcmp>
 8005c26:	1e06      	subs	r6, r0, #0
 8005c28:	d108      	bne.n	8005c3c <__mdiff+0x28>
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f7ff fdc1 	bl	80057b4 <_Balloc>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3c:	bfa4      	itt	ge
 8005c3e:	4623      	movge	r3, r4
 8005c40:	462c      	movge	r4, r5
 8005c42:	4638      	mov	r0, r7
 8005c44:	6861      	ldr	r1, [r4, #4]
 8005c46:	bfa6      	itte	ge
 8005c48:	461d      	movge	r5, r3
 8005c4a:	2600      	movge	r6, #0
 8005c4c:	2601      	movlt	r6, #1
 8005c4e:	f7ff fdb1 	bl	80057b4 <_Balloc>
 8005c52:	692b      	ldr	r3, [r5, #16]
 8005c54:	60c6      	str	r6, [r0, #12]
 8005c56:	6926      	ldr	r6, [r4, #16]
 8005c58:	f105 0914 	add.w	r9, r5, #20
 8005c5c:	f104 0214 	add.w	r2, r4, #20
 8005c60:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005c64:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005c68:	f100 0514 	add.w	r5, r0, #20
 8005c6c:	f04f 0e00 	mov.w	lr, #0
 8005c70:	f852 ab04 	ldr.w	sl, [r2], #4
 8005c74:	f859 4b04 	ldr.w	r4, [r9], #4
 8005c78:	fa1e f18a 	uxtah	r1, lr, sl
 8005c7c:	b2a3      	uxth	r3, r4
 8005c7e:	1ac9      	subs	r1, r1, r3
 8005c80:	0c23      	lsrs	r3, r4, #16
 8005c82:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005c86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c8a:	b289      	uxth	r1, r1
 8005c8c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005c90:	45c8      	cmp	r8, r9
 8005c92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005c96:	4694      	mov	ip, r2
 8005c98:	f845 3b04 	str.w	r3, [r5], #4
 8005c9c:	d8e8      	bhi.n	8005c70 <__mdiff+0x5c>
 8005c9e:	45bc      	cmp	ip, r7
 8005ca0:	d304      	bcc.n	8005cac <__mdiff+0x98>
 8005ca2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005ca6:	b183      	cbz	r3, 8005cca <__mdiff+0xb6>
 8005ca8:	6106      	str	r6, [r0, #16]
 8005caa:	e7c5      	b.n	8005c38 <__mdiff+0x24>
 8005cac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005cb0:	fa1e f381 	uxtah	r3, lr, r1
 8005cb4:	141a      	asrs	r2, r3, #16
 8005cb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cc0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005cc4:	f845 3b04 	str.w	r3, [r5], #4
 8005cc8:	e7e9      	b.n	8005c9e <__mdiff+0x8a>
 8005cca:	3e01      	subs	r6, #1
 8005ccc:	e7e9      	b.n	8005ca2 <__mdiff+0x8e>

08005cce <__d2b>:
 8005cce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cd2:	460e      	mov	r6, r1
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	ec59 8b10 	vmov	r8, r9, d0
 8005cda:	4615      	mov	r5, r2
 8005cdc:	f7ff fd6a 	bl	80057b4 <_Balloc>
 8005ce0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005ce4:	4607      	mov	r7, r0
 8005ce6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cea:	bb34      	cbnz	r4, 8005d3a <__d2b+0x6c>
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	f1b8 0300 	subs.w	r3, r8, #0
 8005cf2:	d027      	beq.n	8005d44 <__d2b+0x76>
 8005cf4:	a802      	add	r0, sp, #8
 8005cf6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005cfa:	f7ff fe00 	bl	80058fe <__lo0bits>
 8005cfe:	9900      	ldr	r1, [sp, #0]
 8005d00:	b1f0      	cbz	r0, 8005d40 <__d2b+0x72>
 8005d02:	9a01      	ldr	r2, [sp, #4]
 8005d04:	f1c0 0320 	rsb	r3, r0, #32
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	40c2      	lsrs	r2, r0
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	9201      	str	r2, [sp, #4]
 8005d14:	9b01      	ldr	r3, [sp, #4]
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf14      	ite	ne
 8005d1c:	2102      	movne	r1, #2
 8005d1e:	2101      	moveq	r1, #1
 8005d20:	6139      	str	r1, [r7, #16]
 8005d22:	b1c4      	cbz	r4, 8005d56 <__d2b+0x88>
 8005d24:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005d28:	4404      	add	r4, r0
 8005d2a:	6034      	str	r4, [r6, #0]
 8005d2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d30:	6028      	str	r0, [r5, #0]
 8005d32:	4638      	mov	r0, r7
 8005d34:	b003      	add	sp, #12
 8005d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d3e:	e7d5      	b.n	8005cec <__d2b+0x1e>
 8005d40:	6179      	str	r1, [r7, #20]
 8005d42:	e7e7      	b.n	8005d14 <__d2b+0x46>
 8005d44:	a801      	add	r0, sp, #4
 8005d46:	f7ff fdda 	bl	80058fe <__lo0bits>
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	2101      	movs	r1, #1
 8005d50:	6139      	str	r1, [r7, #16]
 8005d52:	3020      	adds	r0, #32
 8005d54:	e7e5      	b.n	8005d22 <__d2b+0x54>
 8005d56:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005d5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d5e:	6030      	str	r0, [r6, #0]
 8005d60:	6918      	ldr	r0, [r3, #16]
 8005d62:	f7ff fdad 	bl	80058c0 <__hi0bits>
 8005d66:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005d6a:	e7e1      	b.n	8005d30 <__d2b+0x62>

08005d6c <_calloc_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	fb02 f401 	mul.w	r4, r2, r1
 8005d72:	4621      	mov	r1, r4
 8005d74:	f000 f808 	bl	8005d88 <_malloc_r>
 8005d78:	4605      	mov	r5, r0
 8005d7a:	b118      	cbz	r0, 8005d84 <_calloc_r+0x18>
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	2100      	movs	r1, #0
 8005d80:	f7fe fb6b 	bl	800445a <memset>
 8005d84:	4628      	mov	r0, r5
 8005d86:	bd38      	pop	{r3, r4, r5, pc}

08005d88 <_malloc_r>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	1ccd      	adds	r5, r1, #3
 8005d8c:	f025 0503 	bic.w	r5, r5, #3
 8005d90:	3508      	adds	r5, #8
 8005d92:	2d0c      	cmp	r5, #12
 8005d94:	bf38      	it	cc
 8005d96:	250c      	movcc	r5, #12
 8005d98:	2d00      	cmp	r5, #0
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	db01      	blt.n	8005da2 <_malloc_r+0x1a>
 8005d9e:	42a9      	cmp	r1, r5
 8005da0:	d903      	bls.n	8005daa <_malloc_r+0x22>
 8005da2:	230c      	movs	r3, #12
 8005da4:	6033      	str	r3, [r6, #0]
 8005da6:	2000      	movs	r0, #0
 8005da8:	bd70      	pop	{r4, r5, r6, pc}
 8005daa:	f000 f869 	bl	8005e80 <__malloc_lock>
 8005dae:	4a21      	ldr	r2, [pc, #132]	; (8005e34 <_malloc_r+0xac>)
 8005db0:	6814      	ldr	r4, [r2, #0]
 8005db2:	4621      	mov	r1, r4
 8005db4:	b991      	cbnz	r1, 8005ddc <_malloc_r+0x54>
 8005db6:	4c20      	ldr	r4, [pc, #128]	; (8005e38 <_malloc_r+0xb0>)
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	b91b      	cbnz	r3, 8005dc4 <_malloc_r+0x3c>
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f000 f83d 	bl	8005e3c <_sbrk_r>
 8005dc2:	6020      	str	r0, [r4, #0]
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f000 f838 	bl	8005e3c <_sbrk_r>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d124      	bne.n	8005e1a <_malloc_r+0x92>
 8005dd0:	230c      	movs	r3, #12
 8005dd2:	6033      	str	r3, [r6, #0]
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f000 f854 	bl	8005e82 <__malloc_unlock>
 8005dda:	e7e4      	b.n	8005da6 <_malloc_r+0x1e>
 8005ddc:	680b      	ldr	r3, [r1, #0]
 8005dde:	1b5b      	subs	r3, r3, r5
 8005de0:	d418      	bmi.n	8005e14 <_malloc_r+0x8c>
 8005de2:	2b0b      	cmp	r3, #11
 8005de4:	d90f      	bls.n	8005e06 <_malloc_r+0x7e>
 8005de6:	600b      	str	r3, [r1, #0]
 8005de8:	50cd      	str	r5, [r1, r3]
 8005dea:	18cc      	adds	r4, r1, r3
 8005dec:	4630      	mov	r0, r6
 8005dee:	f000 f848 	bl	8005e82 <__malloc_unlock>
 8005df2:	f104 000b 	add.w	r0, r4, #11
 8005df6:	1d23      	adds	r3, r4, #4
 8005df8:	f020 0007 	bic.w	r0, r0, #7
 8005dfc:	1ac3      	subs	r3, r0, r3
 8005dfe:	d0d3      	beq.n	8005da8 <_malloc_r+0x20>
 8005e00:	425a      	negs	r2, r3
 8005e02:	50e2      	str	r2, [r4, r3]
 8005e04:	e7d0      	b.n	8005da8 <_malloc_r+0x20>
 8005e06:	428c      	cmp	r4, r1
 8005e08:	684b      	ldr	r3, [r1, #4]
 8005e0a:	bf16      	itet	ne
 8005e0c:	6063      	strne	r3, [r4, #4]
 8005e0e:	6013      	streq	r3, [r2, #0]
 8005e10:	460c      	movne	r4, r1
 8005e12:	e7eb      	b.n	8005dec <_malloc_r+0x64>
 8005e14:	460c      	mov	r4, r1
 8005e16:	6849      	ldr	r1, [r1, #4]
 8005e18:	e7cc      	b.n	8005db4 <_malloc_r+0x2c>
 8005e1a:	1cc4      	adds	r4, r0, #3
 8005e1c:	f024 0403 	bic.w	r4, r4, #3
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	d005      	beq.n	8005e30 <_malloc_r+0xa8>
 8005e24:	1a21      	subs	r1, r4, r0
 8005e26:	4630      	mov	r0, r6
 8005e28:	f000 f808 	bl	8005e3c <_sbrk_r>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d0cf      	beq.n	8005dd0 <_malloc_r+0x48>
 8005e30:	6025      	str	r5, [r4, #0]
 8005e32:	e7db      	b.n	8005dec <_malloc_r+0x64>
 8005e34:	200002d0 	.word	0x200002d0
 8005e38:	200002d4 	.word	0x200002d4

08005e3c <_sbrk_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4c06      	ldr	r4, [pc, #24]	; (8005e58 <_sbrk_r+0x1c>)
 8005e40:	2300      	movs	r3, #0
 8005e42:	4605      	mov	r5, r0
 8005e44:	4608      	mov	r0, r1
 8005e46:	6023      	str	r3, [r4, #0]
 8005e48:	f7fe fa64 	bl	8004314 <_sbrk>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d102      	bne.n	8005e56 <_sbrk_r+0x1a>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	b103      	cbz	r3, 8005e56 <_sbrk_r+0x1a>
 8005e54:	602b      	str	r3, [r5, #0]
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	2000068c 	.word	0x2000068c

08005e5c <__ascii_mbtowc>:
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	b901      	cbnz	r1, 8005e62 <__ascii_mbtowc+0x6>
 8005e60:	a901      	add	r1, sp, #4
 8005e62:	b142      	cbz	r2, 8005e76 <__ascii_mbtowc+0x1a>
 8005e64:	b14b      	cbz	r3, 8005e7a <__ascii_mbtowc+0x1e>
 8005e66:	7813      	ldrb	r3, [r2, #0]
 8005e68:	600b      	str	r3, [r1, #0]
 8005e6a:	7812      	ldrb	r2, [r2, #0]
 8005e6c:	1c10      	adds	r0, r2, #0
 8005e6e:	bf18      	it	ne
 8005e70:	2001      	movne	r0, #1
 8005e72:	b002      	add	sp, #8
 8005e74:	4770      	bx	lr
 8005e76:	4610      	mov	r0, r2
 8005e78:	e7fb      	b.n	8005e72 <__ascii_mbtowc+0x16>
 8005e7a:	f06f 0001 	mvn.w	r0, #1
 8005e7e:	e7f8      	b.n	8005e72 <__ascii_mbtowc+0x16>

08005e80 <__malloc_lock>:
 8005e80:	4770      	bx	lr

08005e82 <__malloc_unlock>:
 8005e82:	4770      	bx	lr

08005e84 <__ascii_wctomb>:
 8005e84:	b149      	cbz	r1, 8005e9a <__ascii_wctomb+0x16>
 8005e86:	2aff      	cmp	r2, #255	; 0xff
 8005e88:	bf85      	ittet	hi
 8005e8a:	238a      	movhi	r3, #138	; 0x8a
 8005e8c:	6003      	strhi	r3, [r0, #0]
 8005e8e:	700a      	strbls	r2, [r1, #0]
 8005e90:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005e94:	bf98      	it	ls
 8005e96:	2001      	movls	r0, #1
 8005e98:	4770      	bx	lr
 8005e9a:	4608      	mov	r0, r1
 8005e9c:	4770      	bx	lr
	...

08005ea0 <asinf>:
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	ed2d 8b02 	vpush	{d8}
 8005ea6:	4c27      	ldr	r4, [pc, #156]	; (8005f44 <asinf+0xa4>)
 8005ea8:	b08a      	sub	sp, #40	; 0x28
 8005eaa:	eeb0 8a40 	vmov.f32	s16, s0
 8005eae:	f000 f8a1 	bl	8005ff4 <__ieee754_asinf>
 8005eb2:	f994 3000 	ldrsb.w	r3, [r4]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	eef0 8a40 	vmov.f32	s17, s0
 8005ebc:	d03c      	beq.n	8005f38 <asinf+0x98>
 8005ebe:	eeb4 8a48 	vcmp.f32	s16, s16
 8005ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec6:	d637      	bvs.n	8005f38 <asinf+0x98>
 8005ec8:	eeb0 0a48 	vmov.f32	s0, s16
 8005ecc:	f000 fb0c 	bl	80064e8 <fabsf>
 8005ed0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005ed4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005edc:	dd2c      	ble.n	8005f38 <asinf+0x98>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <asinf+0xa8>)
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	ee18 0a10 	vmov	r0, s16
 8005eea:	2300      	movs	r3, #0
 8005eec:	9308      	str	r3, [sp, #32]
 8005eee:	f7fa fad7 	bl	80004a0 <__aeabi_f2d>
 8005ef2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005efa:	4814      	ldr	r0, [pc, #80]	; (8005f4c <asinf+0xac>)
 8005efc:	f000 fa18 	bl	8006330 <nan>
 8005f00:	f994 3000 	ldrsb.w	r3, [r4]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005f0a:	d104      	bne.n	8005f16 <asinf+0x76>
 8005f0c:	f7fe fa70 	bl	80043f0 <__errno>
 8005f10:	2321      	movs	r3, #33	; 0x21
 8005f12:	6003      	str	r3, [r0, #0]
 8005f14:	e004      	b.n	8005f20 <asinf+0x80>
 8005f16:	4668      	mov	r0, sp
 8005f18:	f000 fa05 	bl	8006326 <matherr>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d0f5      	beq.n	8005f0c <asinf+0x6c>
 8005f20:	9b08      	ldr	r3, [sp, #32]
 8005f22:	b11b      	cbz	r3, 8005f2c <asinf+0x8c>
 8005f24:	f7fe fa64 	bl	80043f0 <__errno>
 8005f28:	9b08      	ldr	r3, [sp, #32]
 8005f2a:	6003      	str	r3, [r0, #0]
 8005f2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f30:	f7fa fd48 	bl	80009c4 <__aeabi_d2f>
 8005f34:	ee08 0a90 	vmov	s17, r0
 8005f38:	eeb0 0a68 	vmov.f32	s0, s17
 8005f3c:	b00a      	add	sp, #40	; 0x28
 8005f3e:	ecbd 8b02 	vpop	{d8}
 8005f42:	bd10      	pop	{r4, pc}
 8005f44:	20000238 	.word	0x20000238
 8005f48:	080067af 	.word	0x080067af
 8005f4c:	080066ad 	.word	0x080066ad

08005f50 <atan2f>:
 8005f50:	f000 b938 	b.w	80061c4 <__ieee754_atan2f>

08005f54 <sqrtf>:
 8005f54:	b510      	push	{r4, lr}
 8005f56:	ed2d 8b02 	vpush	{d8}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	eeb0 8a40 	vmov.f32	s16, s0
 8005f60:	f000 f9de 	bl	8006320 <__ieee754_sqrtf>
 8005f64:	4b21      	ldr	r3, [pc, #132]	; (8005fec <sqrtf+0x98>)
 8005f66:	f993 4000 	ldrsb.w	r4, [r3]
 8005f6a:	1c63      	adds	r3, r4, #1
 8005f6c:	d02c      	beq.n	8005fc8 <sqrtf+0x74>
 8005f6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8005f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f76:	d627      	bvs.n	8005fc8 <sqrtf+0x74>
 8005f78:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f80:	d522      	bpl.n	8005fc8 <sqrtf+0x74>
 8005f82:	2301      	movs	r3, #1
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <sqrtf+0x9c>)
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	ee18 0a10 	vmov	r0, s16
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9308      	str	r3, [sp, #32]
 8005f92:	f7fa fa85 	bl	80004a0 <__aeabi_f2d>
 8005f96:	2200      	movs	r2, #0
 8005f98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	b9ac      	cbnz	r4, 8005fd0 <sqrtf+0x7c>
 8005fa4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005fa8:	4668      	mov	r0, sp
 8005faa:	f000 f9bc 	bl	8006326 <matherr>
 8005fae:	b1b8      	cbz	r0, 8005fe0 <sqrtf+0x8c>
 8005fb0:	9b08      	ldr	r3, [sp, #32]
 8005fb2:	b11b      	cbz	r3, 8005fbc <sqrtf+0x68>
 8005fb4:	f7fe fa1c 	bl	80043f0 <__errno>
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	6003      	str	r3, [r0, #0]
 8005fbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fc0:	f7fa fd00 	bl	80009c4 <__aeabi_d2f>
 8005fc4:	ee00 0a10 	vmov	s0, r0
 8005fc8:	b00a      	add	sp, #40	; 0x28
 8005fca:	ecbd 8b02 	vpop	{d8}
 8005fce:	bd10      	pop	{r4, pc}
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f7fa fbe6 	bl	80007a4 <__aeabi_ddiv>
 8005fd8:	2c02      	cmp	r4, #2
 8005fda:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005fde:	d1e3      	bne.n	8005fa8 <sqrtf+0x54>
 8005fe0:	f7fe fa06 	bl	80043f0 <__errno>
 8005fe4:	2321      	movs	r3, #33	; 0x21
 8005fe6:	6003      	str	r3, [r0, #0]
 8005fe8:	e7e2      	b.n	8005fb0 <sqrtf+0x5c>
 8005fea:	bf00      	nop
 8005fec:	20000238 	.word	0x20000238
 8005ff0:	080067b5 	.word	0x080067b5

08005ff4 <__ieee754_asinf>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	ee10 5a10 	vmov	r5, s0
 8005ffa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005ffe:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006002:	ed2d 8b04 	vpush	{d8-d9}
 8006006:	d10c      	bne.n	8006022 <__ieee754_asinf+0x2e>
 8006008:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8006184 <__ieee754_asinf+0x190>
 800600c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006188 <__ieee754_asinf+0x194>
 8006010:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006014:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006018:	eeb0 0a67 	vmov.f32	s0, s15
 800601c:	ecbd 8b04 	vpop	{d8-d9}
 8006020:	bd38      	pop	{r3, r4, r5, pc}
 8006022:	dd04      	ble.n	800602e <__ieee754_asinf+0x3a>
 8006024:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006028:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800602c:	e7f6      	b.n	800601c <__ieee754_asinf+0x28>
 800602e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006032:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006036:	da0b      	bge.n	8006050 <__ieee754_asinf+0x5c>
 8006038:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800603c:	da52      	bge.n	80060e4 <__ieee754_asinf+0xf0>
 800603e:	eddf 7a53 	vldr	s15, [pc, #332]	; 800618c <__ieee754_asinf+0x198>
 8006042:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006046:	eef4 7ae8 	vcmpe.f32	s15, s17
 800604a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604e:	dce5      	bgt.n	800601c <__ieee754_asinf+0x28>
 8006050:	f000 fa4a 	bl	80064e8 <fabsf>
 8006054:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8006058:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800605c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8006060:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8006190 <__ieee754_asinf+0x19c>
 8006064:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8006194 <__ieee754_asinf+0x1a0>
 8006068:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8006198 <__ieee754_asinf+0x1a4>
 800606c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8006070:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800619c <__ieee754_asinf+0x1a8>
 8006074:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006078:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80061a0 <__ieee754_asinf+0x1ac>
 800607c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006080:	eddf 7a48 	vldr	s15, [pc, #288]	; 80061a4 <__ieee754_asinf+0x1b0>
 8006084:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006088:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80061a8 <__ieee754_asinf+0x1b4>
 800608c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8006090:	eddf 7a46 	vldr	s15, [pc, #280]	; 80061ac <__ieee754_asinf+0x1b8>
 8006094:	eee8 7a07 	vfma.f32	s15, s16, s14
 8006098:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80061b0 <__ieee754_asinf+0x1bc>
 800609c:	eea7 7a88 	vfma.f32	s14, s15, s16
 80060a0:	eddf 7a44 	vldr	s15, [pc, #272]	; 80061b4 <__ieee754_asinf+0x1c0>
 80060a4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80060a8:	eeb0 0a48 	vmov.f32	s0, s16
 80060ac:	eee7 8a88 	vfma.f32	s17, s15, s16
 80060b0:	f000 f936 	bl	8006320 <__ieee754_sqrtf>
 80060b4:	4b40      	ldr	r3, [pc, #256]	; (80061b8 <__ieee754_asinf+0x1c4>)
 80060b6:	ee29 9a08 	vmul.f32	s18, s18, s16
 80060ba:	429c      	cmp	r4, r3
 80060bc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80060c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80060c4:	dd3d      	ble.n	8006142 <__ieee754_asinf+0x14e>
 80060c6:	eea0 0a06 	vfma.f32	s0, s0, s12
 80060ca:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80061bc <__ieee754_asinf+0x1c8>
 80060ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 80060d2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8006188 <__ieee754_asinf+0x194>
 80060d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80060da:	2d00      	cmp	r5, #0
 80060dc:	bfd8      	it	le
 80060de:	eeb1 0a40 	vnegle.f32	s0, s0
 80060e2:	e79b      	b.n	800601c <__ieee754_asinf+0x28>
 80060e4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80060e8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8006190 <__ieee754_asinf+0x19c>
 80060ec:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006194 <__ieee754_asinf+0x1a0>
 80060f0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80061a8 <__ieee754_asinf+0x1b4>
 80060f4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80060f8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800619c <__ieee754_asinf+0x1a8>
 80060fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006100:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80061a0 <__ieee754_asinf+0x1ac>
 8006104:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006108:	eddf 6a26 	vldr	s13, [pc, #152]	; 80061a4 <__ieee754_asinf+0x1b0>
 800610c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006110:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006198 <__ieee754_asinf+0x1a4>
 8006114:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006118:	eddf 6a24 	vldr	s13, [pc, #144]	; 80061ac <__ieee754_asinf+0x1b8>
 800611c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8006120:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80061b0 <__ieee754_asinf+0x1bc>
 8006124:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8006128:	eddf 6a22 	vldr	s13, [pc, #136]	; 80061b4 <__ieee754_asinf+0x1c0>
 800612c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006134:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8006138:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800613c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8006140:	e76c      	b.n	800601c <__ieee754_asinf+0x28>
 8006142:	ee10 3a10 	vmov	r3, s0
 8006146:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800614a:	f023 030f 	bic.w	r3, r3, #15
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef1 6a67 	vneg.f32	s13, s15
 8006156:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800615a:	ee70 5a00 	vadd.f32	s11, s0, s0
 800615e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006162:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006184 <__ieee754_asinf+0x190>
 8006166:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800616a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80061c0 <__ieee754_asinf+0x1cc>
 800616e:	eee5 7a47 	vfms.f32	s15, s10, s14
 8006172:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8006176:	eeb0 6a40 	vmov.f32	s12, s0
 800617a:	eea6 6a87 	vfma.f32	s12, s13, s14
 800617e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006182:	e7a8      	b.n	80060d6 <__ieee754_asinf+0xe2>
 8006184:	b33bbd2e 	.word	0xb33bbd2e
 8006188:	3fc90fdb 	.word	0x3fc90fdb
 800618c:	7149f2ca 	.word	0x7149f2ca
 8006190:	3811ef08 	.word	0x3811ef08
 8006194:	3a4f7f04 	.word	0x3a4f7f04
 8006198:	3e2aaaab 	.word	0x3e2aaaab
 800619c:	bd241146 	.word	0xbd241146
 80061a0:	3e4e0aa8 	.word	0x3e4e0aa8
 80061a4:	bea6b090 	.word	0xbea6b090
 80061a8:	3d9dc62e 	.word	0x3d9dc62e
 80061ac:	bf303361 	.word	0xbf303361
 80061b0:	4001572d 	.word	0x4001572d
 80061b4:	c019d139 	.word	0xc019d139
 80061b8:	3f799999 	.word	0x3f799999
 80061bc:	333bbd2e 	.word	0x333bbd2e
 80061c0:	3f490fdb 	.word	0x3f490fdb

080061c4 <__ieee754_atan2f>:
 80061c4:	ee10 2a90 	vmov	r2, s1
 80061c8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80061cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80061d0:	b510      	push	{r4, lr}
 80061d2:	eef0 7a40 	vmov.f32	s15, s0
 80061d6:	dc06      	bgt.n	80061e6 <__ieee754_atan2f+0x22>
 80061d8:	ee10 0a10 	vmov	r0, s0
 80061dc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80061e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80061e4:	dd04      	ble.n	80061f0 <__ieee754_atan2f+0x2c>
 80061e6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80061ea:	eeb0 0a67 	vmov.f32	s0, s15
 80061ee:	bd10      	pop	{r4, pc}
 80061f0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80061f4:	d103      	bne.n	80061fe <__ieee754_atan2f+0x3a>
 80061f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061fa:	f000 b8a1 	b.w	8006340 <atanf>
 80061fe:	1794      	asrs	r4, r2, #30
 8006200:	f004 0402 	and.w	r4, r4, #2
 8006204:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006208:	b943      	cbnz	r3, 800621c <__ieee754_atan2f+0x58>
 800620a:	2c02      	cmp	r4, #2
 800620c:	d06e      	beq.n	80062ec <__ieee754_atan2f+0x128>
 800620e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80062f4 <__ieee754_atan2f+0x130>
 8006212:	2c03      	cmp	r4, #3
 8006214:	bf08      	it	eq
 8006216:	eef0 7a47 	vmoveq.f32	s15, s14
 800621a:	e7e6      	b.n	80061ea <__ieee754_atan2f+0x26>
 800621c:	b941      	cbnz	r1, 8006230 <__ieee754_atan2f+0x6c>
 800621e:	eddf 7a36 	vldr	s15, [pc, #216]	; 80062f8 <__ieee754_atan2f+0x134>
 8006222:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80062fc <__ieee754_atan2f+0x138>
 8006226:	2800      	cmp	r0, #0
 8006228:	bfb8      	it	lt
 800622a:	eef0 7a47 	vmovlt.f32	s15, s14
 800622e:	e7dc      	b.n	80061ea <__ieee754_atan2f+0x26>
 8006230:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006234:	d122      	bne.n	800627c <__ieee754_atan2f+0xb8>
 8006236:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800623a:	d112      	bne.n	8006262 <__ieee754_atan2f+0x9e>
 800623c:	2c02      	cmp	r4, #2
 800623e:	d00a      	beq.n	8006256 <__ieee754_atan2f+0x92>
 8006240:	2c03      	cmp	r4, #3
 8006242:	d00b      	beq.n	800625c <__ieee754_atan2f+0x98>
 8006244:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006300 <__ieee754_atan2f+0x13c>
 8006248:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006304 <__ieee754_atan2f+0x140>
 800624c:	2c01      	cmp	r4, #1
 800624e:	bf18      	it	ne
 8006250:	eef0 7a47 	vmovne.f32	s15, s14
 8006254:	e7c9      	b.n	80061ea <__ieee754_atan2f+0x26>
 8006256:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8006308 <__ieee754_atan2f+0x144>
 800625a:	e7c6      	b.n	80061ea <__ieee754_atan2f+0x26>
 800625c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800630c <__ieee754_atan2f+0x148>
 8006260:	e7c3      	b.n	80061ea <__ieee754_atan2f+0x26>
 8006262:	2c02      	cmp	r4, #2
 8006264:	d042      	beq.n	80062ec <__ieee754_atan2f+0x128>
 8006266:	2c03      	cmp	r4, #3
 8006268:	d005      	beq.n	8006276 <__ieee754_atan2f+0xb2>
 800626a:	2c01      	cmp	r4, #1
 800626c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8006310 <__ieee754_atan2f+0x14c>
 8006270:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8006314 <__ieee754_atan2f+0x150>
 8006274:	e7eb      	b.n	800624e <__ieee754_atan2f+0x8a>
 8006276:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80062f4 <__ieee754_atan2f+0x130>
 800627a:	e7b6      	b.n	80061ea <__ieee754_atan2f+0x26>
 800627c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006280:	d0cd      	beq.n	800621e <__ieee754_atan2f+0x5a>
 8006282:	1a5b      	subs	r3, r3, r1
 8006284:	15db      	asrs	r3, r3, #23
 8006286:	2b3c      	cmp	r3, #60	; 0x3c
 8006288:	dc1a      	bgt.n	80062c0 <__ieee754_atan2f+0xfc>
 800628a:	2a00      	cmp	r2, #0
 800628c:	da01      	bge.n	8006292 <__ieee754_atan2f+0xce>
 800628e:	333c      	adds	r3, #60	; 0x3c
 8006290:	db19      	blt.n	80062c6 <__ieee754_atan2f+0x102>
 8006292:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8006296:	f000 f927 	bl	80064e8 <fabsf>
 800629a:	f000 f851 	bl	8006340 <atanf>
 800629e:	eef0 7a40 	vmov.f32	s15, s0
 80062a2:	2c01      	cmp	r4, #1
 80062a4:	d012      	beq.n	80062cc <__ieee754_atan2f+0x108>
 80062a6:	2c02      	cmp	r4, #2
 80062a8:	d017      	beq.n	80062da <__ieee754_atan2f+0x116>
 80062aa:	2c00      	cmp	r4, #0
 80062ac:	d09d      	beq.n	80061ea <__ieee754_atan2f+0x26>
 80062ae:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006318 <__ieee754_atan2f+0x154>
 80062b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062b6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800631c <__ieee754_atan2f+0x158>
 80062ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062be:	e794      	b.n	80061ea <__ieee754_atan2f+0x26>
 80062c0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80062f8 <__ieee754_atan2f+0x134>
 80062c4:	e7ed      	b.n	80062a2 <__ieee754_atan2f+0xde>
 80062c6:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006314 <__ieee754_atan2f+0x150>
 80062ca:	e7ea      	b.n	80062a2 <__ieee754_atan2f+0xde>
 80062cc:	ee17 3a90 	vmov	r3, s15
 80062d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	e787      	b.n	80061ea <__ieee754_atan2f+0x26>
 80062da:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006318 <__ieee754_atan2f+0x154>
 80062de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062e2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800631c <__ieee754_atan2f+0x158>
 80062e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ea:	e77e      	b.n	80061ea <__ieee754_atan2f+0x26>
 80062ec:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800631c <__ieee754_atan2f+0x158>
 80062f0:	e77b      	b.n	80061ea <__ieee754_atan2f+0x26>
 80062f2:	bf00      	nop
 80062f4:	c0490fdb 	.word	0xc0490fdb
 80062f8:	3fc90fdb 	.word	0x3fc90fdb
 80062fc:	bfc90fdb 	.word	0xbfc90fdb
 8006300:	bf490fdb 	.word	0xbf490fdb
 8006304:	3f490fdb 	.word	0x3f490fdb
 8006308:	4016cbe4 	.word	0x4016cbe4
 800630c:	c016cbe4 	.word	0xc016cbe4
 8006310:	80000000 	.word	0x80000000
 8006314:	00000000 	.word	0x00000000
 8006318:	33bbbd2e 	.word	0x33bbbd2e
 800631c:	40490fdb 	.word	0x40490fdb

08006320 <__ieee754_sqrtf>:
 8006320:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006324:	4770      	bx	lr

08006326 <matherr>:
 8006326:	2000      	movs	r0, #0
 8006328:	4770      	bx	lr
 800632a:	0000      	movs	r0, r0
 800632c:	0000      	movs	r0, r0
	...

08006330 <nan>:
 8006330:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006338 <nan+0x8>
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	00000000 	.word	0x00000000
 800633c:	7ff80000 	.word	0x7ff80000

08006340 <atanf>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	ee10 5a10 	vmov	r5, s0
 8006346:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800634a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800634e:	eef0 7a40 	vmov.f32	s15, s0
 8006352:	db10      	blt.n	8006376 <atanf+0x36>
 8006354:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006358:	dd04      	ble.n	8006364 <atanf+0x24>
 800635a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800635e:	eeb0 0a67 	vmov.f32	s0, s15
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800649c <atanf+0x15c>
 8006368:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80064a0 <atanf+0x160>
 800636c:	2d00      	cmp	r5, #0
 800636e:	bfd8      	it	le
 8006370:	eef0 7a47 	vmovle.f32	s15, s14
 8006374:	e7f3      	b.n	800635e <atanf+0x1e>
 8006376:	4b4b      	ldr	r3, [pc, #300]	; (80064a4 <atanf+0x164>)
 8006378:	429c      	cmp	r4, r3
 800637a:	dc10      	bgt.n	800639e <atanf+0x5e>
 800637c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8006380:	da0a      	bge.n	8006398 <atanf+0x58>
 8006382:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80064a8 <atanf+0x168>
 8006386:	ee30 7a07 	vadd.f32	s14, s0, s14
 800638a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800638e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006396:	dce2      	bgt.n	800635e <atanf+0x1e>
 8006398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800639c:	e013      	b.n	80063c6 <atanf+0x86>
 800639e:	f000 f8a3 	bl	80064e8 <fabsf>
 80063a2:	4b42      	ldr	r3, [pc, #264]	; (80064ac <atanf+0x16c>)
 80063a4:	429c      	cmp	r4, r3
 80063a6:	dc4f      	bgt.n	8006448 <atanf+0x108>
 80063a8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80063ac:	429c      	cmp	r4, r3
 80063ae:	dc41      	bgt.n	8006434 <atanf+0xf4>
 80063b0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80063b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80063b8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80063bc:	2300      	movs	r3, #0
 80063be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80063c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80063cc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80064b0 <atanf+0x170>
 80063d0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80064b4 <atanf+0x174>
 80063d4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80064b8 <atanf+0x178>
 80063d8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80063dc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80063e0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80064bc <atanf+0x17c>
 80063e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80063e8:	eddf 5a35 	vldr	s11, [pc, #212]	; 80064c0 <atanf+0x180>
 80063ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 80063f0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80064c4 <atanf+0x184>
 80063f4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80063f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80064c8 <atanf+0x188>
 80063fc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006400:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80064cc <atanf+0x18c>
 8006404:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006408:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80064d0 <atanf+0x190>
 800640c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006410:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80064d4 <atanf+0x194>
 8006414:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006418:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80064d8 <atanf+0x198>
 800641c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006420:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006424:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800642c:	d121      	bne.n	8006472 <atanf+0x132>
 800642e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006432:	e794      	b.n	800635e <atanf+0x1e>
 8006434:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006438:	ee30 7a67 	vsub.f32	s14, s0, s15
 800643c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006440:	2301      	movs	r3, #1
 8006442:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006446:	e7be      	b.n	80063c6 <atanf+0x86>
 8006448:	4b24      	ldr	r3, [pc, #144]	; (80064dc <atanf+0x19c>)
 800644a:	429c      	cmp	r4, r3
 800644c:	dc0b      	bgt.n	8006466 <atanf+0x126>
 800644e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8006452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006456:	eea0 7a27 	vfma.f32	s14, s0, s15
 800645a:	2302      	movs	r3, #2
 800645c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006464:	e7af      	b.n	80063c6 <atanf+0x86>
 8006466:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800646a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800646e:	2303      	movs	r3, #3
 8006470:	e7a9      	b.n	80063c6 <atanf+0x86>
 8006472:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <atanf+0x1a0>)
 8006474:	491b      	ldr	r1, [pc, #108]	; (80064e4 <atanf+0x1a4>)
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	441a      	add	r2, r3
 800647a:	440b      	add	r3, r1
 800647c:	edd3 6a00 	vldr	s13, [r3]
 8006480:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006484:	2d00      	cmp	r5, #0
 8006486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800648a:	ed92 7a00 	vldr	s14, [r2]
 800648e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006492:	bfb8      	it	lt
 8006494:	eef1 7a67 	vneglt.f32	s15, s15
 8006498:	e761      	b.n	800635e <atanf+0x1e>
 800649a:	bf00      	nop
 800649c:	bfc90fdb 	.word	0xbfc90fdb
 80064a0:	3fc90fdb 	.word	0x3fc90fdb
 80064a4:	3edfffff 	.word	0x3edfffff
 80064a8:	7149f2ca 	.word	0x7149f2ca
 80064ac:	3f97ffff 	.word	0x3f97ffff
 80064b0:	3c8569d7 	.word	0x3c8569d7
 80064b4:	3d4bda59 	.word	0x3d4bda59
 80064b8:	bd6ef16b 	.word	0xbd6ef16b
 80064bc:	3d886b35 	.word	0x3d886b35
 80064c0:	3dba2e6e 	.word	0x3dba2e6e
 80064c4:	3e124925 	.word	0x3e124925
 80064c8:	3eaaaaab 	.word	0x3eaaaaab
 80064cc:	bd15a221 	.word	0xbd15a221
 80064d0:	bd9d8795 	.word	0xbd9d8795
 80064d4:	bde38e38 	.word	0xbde38e38
 80064d8:	be4ccccd 	.word	0xbe4ccccd
 80064dc:	401bffff 	.word	0x401bffff
 80064e0:	080067bc 	.word	0x080067bc
 80064e4:	080067cc 	.word	0x080067cc

080064e8 <fabsf>:
 80064e8:	ee10 3a10 	vmov	r3, s0
 80064ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064f0:	ee00 3a10 	vmov	s0, r3
 80064f4:	4770      	bx	lr
	...

080064f8 <_init>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	bf00      	nop
 80064fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fe:	bc08      	pop	{r3}
 8006500:	469e      	mov	lr, r3
 8006502:	4770      	bx	lr

08006504 <_fini>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	bf00      	nop
 8006508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650a:	bc08      	pop	{r3}
 800650c:	469e      	mov	lr, r3
 800650e:	4770      	bx	lr
