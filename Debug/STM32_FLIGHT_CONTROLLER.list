
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009624  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  080097c8  080097c8  000197c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc8  08009dc8  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  08009dc8  08009dc8  00019dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd0  08009dd0  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08009dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000250  0800a028  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  0800a028  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e74  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002897  00000000  00000000  000380f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000eaea  00000000  00000000  0003a98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000012c0  00000000  00000000  00049478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001258  00000000  00000000  0004a738  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000180ef  00000000  00000000  0004b990  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000da62  00000000  00000000  00063a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000989eb  00000000  00000000  000714e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00109ecc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000447c  00000000  00000000  00109f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080097ac 	.word	0x080097ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	080097ac 	.word	0x080097ac

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <strlen>:
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d72:	2a00      	cmp	r2, #0
 8000d74:	d1fb      	bne.n	8000d6e <strlen+0x2>
 8000d76:	1a18      	subs	r0, r3, r0
 8000d78:	3801      	subs	r0, #1
 8000d7a:	4770      	bx	lr
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <memchr>:
 8000d80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d84:	2a10      	cmp	r2, #16
 8000d86:	db2b      	blt.n	8000de0 <memchr+0x60>
 8000d88:	f010 0f07 	tst.w	r0, #7
 8000d8c:	d008      	beq.n	8000da0 <memchr+0x20>
 8000d8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d92:	3a01      	subs	r2, #1
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d02d      	beq.n	8000df4 <memchr+0x74>
 8000d98:	f010 0f07 	tst.w	r0, #7
 8000d9c:	b342      	cbz	r2, 8000df0 <memchr+0x70>
 8000d9e:	d1f6      	bne.n	8000d8e <memchr+0xe>
 8000da0:	b4f0      	push	{r4, r5, r6, r7}
 8000da2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000da6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000daa:	f022 0407 	bic.w	r4, r2, #7
 8000dae:	f07f 0700 	mvns.w	r7, #0
 8000db2:	2300      	movs	r3, #0
 8000db4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000db8:	3c08      	subs	r4, #8
 8000dba:	ea85 0501 	eor.w	r5, r5, r1
 8000dbe:	ea86 0601 	eor.w	r6, r6, r1
 8000dc2:	fa85 f547 	uadd8	r5, r5, r7
 8000dc6:	faa3 f587 	sel	r5, r3, r7
 8000dca:	fa86 f647 	uadd8	r6, r6, r7
 8000dce:	faa5 f687 	sel	r6, r5, r7
 8000dd2:	b98e      	cbnz	r6, 8000df8 <memchr+0x78>
 8000dd4:	d1ee      	bne.n	8000db4 <memchr+0x34>
 8000dd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000dd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000ddc:	f002 0207 	and.w	r2, r2, #7
 8000de0:	b132      	cbz	r2, 8000df0 <memchr+0x70>
 8000de2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000de6:	3a01      	subs	r2, #1
 8000de8:	ea83 0301 	eor.w	r3, r3, r1
 8000dec:	b113      	cbz	r3, 8000df4 <memchr+0x74>
 8000dee:	d1f8      	bne.n	8000de2 <memchr+0x62>
 8000df0:	2000      	movs	r0, #0
 8000df2:	4770      	bx	lr
 8000df4:	3801      	subs	r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	bf06      	itte	eq
 8000dfc:	4635      	moveq	r5, r6
 8000dfe:	3803      	subeq	r0, #3
 8000e00:	3807      	subne	r0, #7
 8000e02:	f015 0f01 	tst.w	r5, #1
 8000e06:	d107      	bne.n	8000e18 <memchr+0x98>
 8000e08:	3001      	adds	r0, #1
 8000e0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000e0e:	bf02      	ittt	eq
 8000e10:	3001      	addeq	r0, #1
 8000e12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000e16:	3001      	addeq	r0, #1
 8000e18:	bcf0      	pop	{r4, r5, r6, r7}
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <__gedf2>:
 8000e20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e24:	e006      	b.n	8000e34 <__cmpdf2+0x4>
 8000e26:	bf00      	nop

08000e28 <__ledf2>:
 8000e28:	f04f 0c01 	mov.w	ip, #1
 8000e2c:	e002      	b.n	8000e34 <__cmpdf2+0x4>
 8000e2e:	bf00      	nop

08000e30 <__cmpdf2>:
 8000e30:	f04f 0c01 	mov.w	ip, #1
 8000e34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e44:	bf18      	it	ne
 8000e46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000e4a:	d01b      	beq.n	8000e84 <__cmpdf2+0x54>
 8000e4c:	b001      	add	sp, #4
 8000e4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e52:	bf0c      	ite	eq
 8000e54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e58:	ea91 0f03 	teqne	r1, r3
 8000e5c:	bf02      	ittt	eq
 8000e5e:	ea90 0f02 	teqeq	r0, r2
 8000e62:	2000      	moveq	r0, #0
 8000e64:	4770      	bxeq	lr
 8000e66:	f110 0f00 	cmn.w	r0, #0
 8000e6a:	ea91 0f03 	teq	r1, r3
 8000e6e:	bf58      	it	pl
 8000e70:	4299      	cmppl	r1, r3
 8000e72:	bf08      	it	eq
 8000e74:	4290      	cmpeq	r0, r2
 8000e76:	bf2c      	ite	cs
 8000e78:	17d8      	asrcs	r0, r3, #31
 8000e7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e7e:	f040 0001 	orr.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e8c:	d102      	bne.n	8000e94 <__cmpdf2+0x64>
 8000e8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e92:	d107      	bne.n	8000ea4 <__cmpdf2+0x74>
 8000e94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e9c:	d1d6      	bne.n	8000e4c <__cmpdf2+0x1c>
 8000e9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ea2:	d0d3      	beq.n	8000e4c <__cmpdf2+0x1c>
 8000ea4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <__aeabi_cdrcmple>:
 8000eac:	4684      	mov	ip, r0
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4662      	mov	r2, ip
 8000eb2:	468c      	mov	ip, r1
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4663      	mov	r3, ip
 8000eb8:	e000      	b.n	8000ebc <__aeabi_cdcmpeq>
 8000eba:	bf00      	nop

08000ebc <__aeabi_cdcmpeq>:
 8000ebc:	b501      	push	{r0, lr}
 8000ebe:	f7ff ffb7 	bl	8000e30 <__cmpdf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd01      	pop	{r0, pc}

08000ecc <__aeabi_dcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cdcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_dcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cdcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_dcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cdcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_dcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffce 	bl	8000eac <__aeabi_cdrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_dcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc4 	bl	8000eac <__aeabi_cdrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_dcmpun>:
 8000f30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f38:	d102      	bne.n	8000f40 <__aeabi_dcmpun+0x10>
 8000f3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000f3e:	d10a      	bne.n	8000f56 <__aeabi_dcmpun+0x26>
 8000f40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f48:	d102      	bne.n	8000f50 <__aeabi_dcmpun+0x20>
 8000f4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000f4e:	d102      	bne.n	8000f56 <__aeabi_dcmpun+0x26>
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0001 	mov.w	r0, #1
 8000f5a:	4770      	bx	lr

08000f5c <get_roll>:
}

float get_roll(){

	return roll;
}
 8000f5c:	4b01      	ldr	r3, [pc, #4]	; (8000f64 <get_roll+0x8>)
 8000f5e:	ed93 0a00 	vldr	s0, [r3]
 8000f62:	4770      	bx	lr
 8000f64:	200003d8 	.word	0x200003d8

08000f68 <get_pitch>:

float get_pitch(){

	return pitch;
}
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <get_pitch+0x8>)
 8000f6a:	ed93 0a00 	vldr	s0, [r3]
 8000f6e:	4770      	bx	lr
 8000f70:	200003d4 	.word	0x200003d4

08000f74 <get_yaw>:

float get_yaw(){

	return yaw;
}
 8000f74:	4b01      	ldr	r3, [pc, #4]	; (8000f7c <get_yaw+0x8>)
 8000f76:	ed93 0a00 	vldr	s0, [r3]
 8000f7a:	4770      	bx	lr
 8000f7c:	200003c8 	.word	0x200003c8

08000f80 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f80:	b500      	push	{lr}
 8000f82:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f84:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000f88:	f88d 200d 	strb.w	r2, [sp, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2302      	movs	r3, #2
 8000f92:	aa03      	add	r2, sp, #12
 8000f94:	4601      	mov	r1, r0
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <writeByte+0x24>)
 8000f98:	f002 fa44 	bl	8003424 <HAL_I2C_Master_Transmit>
}
 8000f9c:	b005      	add	sp, #20
 8000f9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa2:	bf00      	nop
 8000fa4:	20000344 	.word	0x20000344

08000fa8 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	b084      	sub	sp, #16
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000fac:	a904      	add	r1, sp, #16
 8000fae:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000fb2:	4605      	mov	r5, r0
 8000fb4:	4c09      	ldr	r4, [pc, #36]	; (8000fdc <readByte+0x34>)
 8000fb6:	260a      	movs	r6, #10
 8000fb8:	9600      	str	r6, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	4601      	mov	r1, r0
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f002 fa2f 	bl	8003424 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8000fc6:	9600      	str	r6, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	aa03      	add	r2, sp, #12
 8000fcc:	4629      	mov	r1, r5
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f002 fae2 	bl	8003598 <HAL_I2C_Master_Receive>

	return data[0];
}
 8000fd4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000fd8:	b004      	add	sp, #16
 8000fda:	bd70      	pop	{r4, r5, r6, pc}
 8000fdc:	20000344 	.word	0x20000344

08000fe0 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	4604      	mov	r4, r0
	printf("STM32 Online..\r\n");
 8000fe4:	480f      	ldr	r0, [pc, #60]	; (8001024 <imu_init+0x44>)
 8000fe6:	f004 ff97 	bl	8005f18 <puts>
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	2202      	movs	r2, #2
 8000fee:	21d0      	movs	r1, #208	; 0xd0
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f002 fc39 	bl	8003868 <HAL_I2C_IsDeviceReady>
 8000ff6:	b100      	cbz	r0, 8000ffa <imu_init+0x1a>
 8000ff8:	e7fe      	b.n	8000ff8 <imu_init+0x18>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <imu_init+0x48>)
 8000ffe:	f001 ff25 	bl	8002e4c <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001002:	2275      	movs	r2, #117	; 0x75
 8001004:	21d1      	movs	r1, #209	; 0xd1
 8001006:	20d0      	movs	r0, #208	; 0xd0
 8001008:	f7ff ffce 	bl	8000fa8 <readByte>
 800100c:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 800100e:	2871      	cmp	r0, #113	; 0x71
 8001010:	d106      	bne.n	8001020 <imu_init+0x40>
		printf("MPU9250 online..\r\n");
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <imu_init+0x4c>)
 8001014:	f004 ff80 	bl	8005f18 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8001018:	4621      	mov	r1, r4
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <imu_init+0x50>)
 800101c:	f004 ff08 	bl	8005e30 <iprintf>
}
 8001020:	2000      	movs	r0, #0
 8001022:	bd10      	pop	{r4, pc}
 8001024:	08009a24 	.word	0x08009a24
 8001028:	40020000 	.word	0x40020000
 800102c:	08009a34 	.word	0x08009a34
 8001030:	08009a48 	.word	0x08009a48

08001034 <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 8001034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001038:	b088      	sub	sp, #32
 800103a:	4688      	mov	r8, r1
 800103c:	461c      	mov	r4, r3
 800103e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8001040:	a908      	add	r1, sp, #32
 8001042:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001046:	4e0e      	ldr	r6, [pc, #56]	; (8001080 <readBytes+0x4c>)
 8001048:	270a      	movs	r7, #10
 800104a:	9700      	str	r7, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	460a      	mov	r2, r1
 8001050:	4601      	mov	r1, r0
 8001052:	4630      	mov	r0, r6
 8001054:	f002 f9e6 	bl	8003424 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001058:	9700      	str	r7, [sp, #0]
 800105a:	4623      	mov	r3, r4
 800105c:	aa04      	add	r2, sp, #16
 800105e:	4641      	mov	r1, r8
 8001060:	4630      	mov	r0, r6
 8001062:	f002 fa99 	bl	8003598 <HAL_I2C_Master_Receive>

	for (int ii = 0; ii < count; ii++) {
 8001066:	2300      	movs	r3, #0
 8001068:	e005      	b.n	8001076 <readBytes+0x42>
		dest[ii] = data[ii];
 800106a:	aa08      	add	r2, sp, #32
 800106c:	441a      	add	r2, r3
 800106e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001072:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 8001074:	3301      	adds	r3, #1
 8001076:	429c      	cmp	r4, r3
 8001078:	dcf7      	bgt.n	800106a <readBytes+0x36>
	}
}
 800107a:	b008      	add	sp, #32
 800107c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001080:	20000344 	.word	0x20000344

08001084 <getMres>:

void getMres() {

	switch (Mscale) {
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <getMres+0x1c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b113      	cbz	r3, 8001090 <getMres+0xc>
 800108a:	2b01      	cmp	r3, #1
 800108c:	d004      	beq.n	8001098 <getMres+0x14>
 800108e:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <getMres+0x20>)
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <getMres+0x24>)
 8001094:	601a      	str	r2, [r3, #0]
		break;
 8001096:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <getMres+0x20>)
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <getMres+0x28>)
 800109c:	601a      	str	r2, [r3, #0]
		break;
	}
}
 800109e:	4770      	bx	lr
 80010a0:	20000001 	.word	0x20000001
 80010a4:	200003dc 	.word	0x200003dc
 80010a8:	40a4d84e 	.word	0x40a4d84e
 80010ac:	3fa4d84e 	.word	0x3fa4d84e

080010b0 <getGres>:

void getGres() {
	switch (Gscale) {
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <getGres+0x30>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d812      	bhi.n	80010de <getGres+0x2e>
 80010b8:	e8df f003 	tbb	[pc, r3]
 80010bc:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <getGres+0x34>)
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <getGres+0x38>)
 80010c4:	601a      	str	r2, [r3, #0]
		break;
 80010c6:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <getGres+0x34>)
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <getGres+0x3c>)
 80010cc:	601a      	str	r2, [r3, #0]
		break;
 80010ce:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <getGres+0x34>)
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <getGres+0x40>)
 80010d4:	601a      	str	r2, [r3, #0]
		break;
 80010d6:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80010d8:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <getGres+0x34>)
 80010da:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <getGres+0x44>)
 80010dc:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010de:	4770      	bx	lr
 80010e0:	2000026d 	.word	0x2000026d
 80010e4:	200003c0 	.word	0x200003c0
 80010e8:	3bfa0000 	.word	0x3bfa0000
 80010ec:	3c7a0000 	.word	0x3c7a0000
 80010f0:	3cfa0000 	.word	0x3cfa0000
 80010f4:	3d7a0000 	.word	0x3d7a0000

080010f8 <getAres>:

void getAres() {
	switch (Ascale) {
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <getAres+0x38>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d816      	bhi.n	800112e <getAres+0x36>
 8001100:	e8df f003 	tbb	[pc, r3]
 8001104:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <getAres+0x3c>)
 800110a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800110e:	601a      	str	r2, [r3, #0]
		break;
 8001110:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <getAres+0x3c>)
 8001114:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001118:	601a      	str	r2, [r3, #0]
		break;
 800111a:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <getAres+0x3c>)
 800111e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001122:	601a      	str	r2, [r3, #0]
		break;
 8001124:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 8001126:	4b03      	ldr	r3, [pc, #12]	; (8001134 <getAres+0x3c>)
 8001128:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800112c:	601a      	str	r2, [r3, #0]
		break;
	}
}
 800112e:	4770      	bx	lr
 8001130:	2000026c 	.word	0x2000026c
 8001134:	200003b4 	.word	0x200003b4

08001138 <readAccelData>:

void readAccelData(int16_t * destination) {
 8001138:	b510      	push	{r4, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800113e:	ab02      	add	r3, sp, #8
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2306      	movs	r3, #6
 8001144:	223b      	movs	r2, #59	; 0x3b
 8001146:	21d1      	movs	r1, #209	; 0xd1
 8001148:	20d0      	movs	r0, #208	; 0xd0
 800114a:	f7ff ff73 	bl	8001034 <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800114e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001152:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001156:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800115a:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800115c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001160:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001164:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001168:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800116a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800116e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001172:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001176:	80a3      	strh	r3, [r4, #4]
}
 8001178:	b004      	add	sp, #16
 800117a:	bd10      	pop	{r4, pc}

0800117c <readGyroData>:

void readGyroData(int16_t * destination) {
 800117c:	b510      	push	{r4, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001182:	ab02      	add	r3, sp, #8
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2306      	movs	r3, #6
 8001188:	2243      	movs	r2, #67	; 0x43
 800118a:	21d1      	movs	r1, #209	; 0xd1
 800118c:	20d0      	movs	r0, #208	; 0xd0
 800118e:	f7ff ff51 	bl	8001034 <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001192:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001196:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800119a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800119e:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80011a0:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80011a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011ac:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011ae:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011ba:	80a3      	strh	r3, [r4, #4]
}
 80011bc:	b004      	add	sp, #16
 80011be:	bd10      	pop	{r4, pc}

080011c0 <readMagData>:

void readMagData(int16_t * destination) {
 80011c0:	b510      	push	{r4, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 80011c6:	2202      	movs	r2, #2
 80011c8:	2119      	movs	r1, #25
 80011ca:	2018      	movs	r0, #24
 80011cc:	f7ff feec 	bl	8000fa8 <readByte>
 80011d0:	f010 0f01 	tst.w	r0, #1
 80011d4:	d101      	bne.n	80011da <readMagData+0x1a>
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
		}
	}
}
 80011d6:	b004      	add	sp, #16
 80011d8:	bd10      	pop	{r4, pc}
		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7, &rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
 80011da:	ab02      	add	r3, sp, #8
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2307      	movs	r3, #7
 80011e0:	2203      	movs	r2, #3
 80011e2:	2119      	movs	r1, #25
 80011e4:	2018      	movs	r0, #24
 80011e6:	f7ff ff25 	bl	8001034 <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 80011ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 80011ee:	f013 0f08 	tst.w	r3, #8
 80011f2:	d1f0      	bne.n	80011d6 <readMagData+0x16>
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 80011f4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80011f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80011fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 8001200:	8023      	strh	r3, [r4, #0]
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 8001202:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001206:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800120a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 800120e:	8063      	strh	r3, [r4, #2]
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 8001210:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001214:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001218:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 800121c:	80a3      	strh	r3, [r4, #4]
}
 800121e:	e7da      	b.n	80011d6 <readMagData+0x16>

08001220 <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 8001220:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	216b      	movs	r1, #107	; 0x6b
 8001226:	20d0      	movs	r0, #208	; 0xd0
 8001228:	f7ff feaa 	bl	8000f80 <writeByte>
	HAL_Delay(100);
 800122c:	2064      	movs	r0, #100	; 0x64
 800122e:	f001 fb1f 	bl	8002870 <HAL_Delay>
}
 8001232:	bd08      	pop	{r3, pc}

08001234 <initAK8963>:

void initAK8963(float * destination) {
 8001234:	b510      	push	{r4, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 800123a:	2200      	movs	r2, #0
 800123c:	210a      	movs	r1, #10
 800123e:	2018      	movs	r0, #24
 8001240:	f7ff fe9e 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 8001244:	200a      	movs	r0, #10
 8001246:	f001 fb13 	bl	8002870 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 800124a:	220f      	movs	r2, #15
 800124c:	210a      	movs	r1, #10
 800124e:	2018      	movs	r0, #24
 8001250:	f7ff fe96 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 8001254:	200a      	movs	r0, #10
 8001256:	f001 fb0b 	bl	8002870 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 800125a:	ab03      	add	r3, sp, #12
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2303      	movs	r3, #3
 8001260:	2210      	movs	r2, #16
 8001262:	2119      	movs	r1, #25
 8001264:	2018      	movs	r0, #24
 8001266:	f7ff fee5 	bl	8001034 <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 800126a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800126e:	3b80      	subs	r3, #128	; 0x80
 8001270:	ee07 3a10 	vmov	s14, r3
 8001274:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001278:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80012f0 <initAK8963+0xbc>
 800127c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001280:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001284:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001288:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 800128c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001290:	3b80      	subs	r3, #128	; 0x80
 8001292:	ee07 3a10 	vmov	s14, r3
 8001296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800129a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800129e:	ee37 7a26 	vadd.f32	s14, s14, s13
 80012a2:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 80012a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012aa:	3b80      	subs	r3, #128	; 0x80
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80012b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012bc:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012c0:	2200      	movs	r2, #0
 80012c2:	210a      	movs	r1, #10
 80012c4:	2018      	movs	r0, #24
 80012c6:	f7ff fe5b 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 80012ca:	200a      	movs	r0, #10
 80012cc:	f001 fad0 	bl	8002870 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <initAK8963+0xc0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <initAK8963+0xc4>)
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	210a      	movs	r1, #10
 80012e0:	2018      	movs	r0, #24
 80012e2:	f7ff fe4d 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 80012e6:	200a      	movs	r0, #10
 80012e8:	f001 fac2 	bl	8002870 <HAL_Delay>
}
 80012ec:	b004      	add	sp, #16
 80012ee:	bd10      	pop	{r4, pc}
 80012f0:	3b800000 	.word	0x3b800000
 80012f4:	20000001 	.word	0x20000001
 80012f8:	20000000 	.word	0x20000000

080012fc <initMPU9250>:

void initMPU9250() {
 80012fc:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80012fe:	2200      	movs	r2, #0
 8001300:	216b      	movs	r1, #107	; 0x6b
 8001302:	20d0      	movs	r0, #208	; 0xd0
 8001304:	f7ff fe3c 	bl	8000f80 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001308:	2064      	movs	r0, #100	; 0x64
 800130a:	f001 fab1 	bl	8002870 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800130e:	2201      	movs	r2, #1
 8001310:	216b      	movs	r1, #107	; 0x6b
 8001312:	20d0      	movs	r0, #208	; 0xd0
 8001314:	f7ff fe34 	bl	8000f80 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 8001318:	2200      	movs	r2, #0
 800131a:	211a      	movs	r1, #26
 800131c:	20d0      	movs	r0, #208	; 0xd0
 800131e:	f7ff fe2f 	bl	8000f80 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 8001322:	2200      	movs	r2, #0
 8001324:	2119      	movs	r1, #25
 8001326:	20d0      	movs	r0, #208	; 0xd0
 8001328:	f7ff fe2a 	bl	8000f80 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 800132c:	221b      	movs	r2, #27
 800132e:	21d1      	movs	r1, #209	; 0xd1
 8001330:	4608      	mov	r0, r1
 8001332:	f7ff fe39 	bl	8000fa8 <readByte>
 8001336:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001338:	f000 021f 	and.w	r2, r0, #31
 800133c:	211b      	movs	r1, #27
 800133e:	20d0      	movs	r0, #208	; 0xd0
 8001340:	f7ff fe1e 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001344:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001348:	211b      	movs	r1, #27
 800134a:	20d0      	movs	r0, #208	; 0xd0
 800134c:	f7ff fe18 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <initMPU9250+0xd8>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	211b      	movs	r1, #27
 800135c:	20d0      	movs	r0, #208	; 0xd0
 800135e:	f7ff fe0f 	bl	8000f80 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 8001362:	221c      	movs	r2, #28
 8001364:	21d1      	movs	r1, #209	; 0xd1
 8001366:	4608      	mov	r0, r1
 8001368:	f7ff fe1e 	bl	8000fa8 <readByte>
 800136c:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 800136e:	f000 021f 	and.w	r2, r0, #31
 8001372:	211c      	movs	r1, #28
 8001374:	20d0      	movs	r0, #208	; 0xd0
 8001376:	f7ff fe03 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 800137a:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 800137e:	211c      	movs	r1, #28
 8001380:	20d0      	movs	r0, #208	; 0xd0
 8001382:	f7ff fdfd 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <initMPU9250+0xdc>)
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	211c      	movs	r1, #28
 8001392:	20d0      	movs	r0, #208	; 0xd0
 8001394:	f7ff fdf4 	bl	8000f80 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 8001398:	221d      	movs	r2, #29
 800139a:	21d1      	movs	r1, #209	; 0xd1
 800139c:	4608      	mov	r0, r1
 800139e:	f7ff fe03 	bl	8000fa8 <readByte>
 80013a2:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80013a4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013a8:	211d      	movs	r1, #29
 80013aa:	20d0      	movs	r0, #208	; 0xd0
 80013ac:	f7ff fde8 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80013b0:	f044 0203 	orr.w	r2, r4, #3
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	211d      	movs	r1, #29
 80013b8:	20d0      	movs	r0, #208	; 0xd0
 80013ba:	f7ff fde1 	bl	8000f80 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013be:	2222      	movs	r2, #34	; 0x22
 80013c0:	2137      	movs	r1, #55	; 0x37
 80013c2:	20d0      	movs	r0, #208	; 0xd0
 80013c4:	f7ff fddc 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013c8:	2201      	movs	r2, #1
 80013ca:	2138      	movs	r1, #56	; 0x38
 80013cc:	20d0      	movs	r0, #208	; 0xd0
 80013ce:	f7ff fdd7 	bl	8000f80 <writeByte>
}
 80013d2:	bd10      	pop	{r4, pc}
 80013d4:	2000026d 	.word	0x2000026d
 80013d8:	2000026c 	.word	0x2000026c

080013dc <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2) {
 80013dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e0:	b08c      	sub	sp, #48	; 0x30
 80013e2:	4607      	mov	r7, r0
 80013e4:	460e      	mov	r6, r1
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };
 80013e6:	2400      	movs	r4, #0
 80013e8:	9406      	str	r4, [sp, #24]
 80013ea:	9407      	str	r4, [sp, #28]
 80013ec:	9408      	str	r4, [sp, #32]
 80013ee:	9403      	str	r4, [sp, #12]
 80013f0:	9404      	str	r4, [sp, #16]
 80013f2:	9405      	str	r4, [sp, #20]

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	216b      	movs	r1, #107	; 0x6b
 80013f8:	20d0      	movs	r0, #208	; 0xd0
 80013fa:	f7ff fdc1 	bl	8000f80 <writeByte>
	HAL_Delay(100);
 80013fe:	2064      	movs	r0, #100	; 0x64
 8001400:	f001 fa36 	bl	8002870 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01);
 8001404:	2201      	movs	r2, #1
 8001406:	216b      	movs	r1, #107	; 0x6b
 8001408:	20d0      	movs	r0, #208	; 0xd0
 800140a:	f7ff fdb9 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_2, 0x00);
 800140e:	4622      	mov	r2, r4
 8001410:	216c      	movs	r1, #108	; 0x6c
 8001412:	20d0      	movs	r0, #208	; 0xd0
 8001414:	f7ff fdb4 	bl	8000f80 <writeByte>
	HAL_Delay(200);
 8001418:	20c8      	movs	r0, #200	; 0xc8
 800141a:	f001 fa29 	bl	8002870 <HAL_Delay>

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x00); // Disable all interrupts
 800141e:	4622      	mov	r2, r4
 8001420:	2138      	movs	r1, #56	; 0x38
 8001422:	20d0      	movs	r0, #208	; 0xd0
 8001424:	f7ff fdac 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00);      // Disable FIFO
 8001428:	4622      	mov	r2, r4
 800142a:	2123      	movs	r1, #35	; 0x23
 800142c:	20d0      	movs	r0, #208	; 0xd0
 800142e:	f7ff fda7 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Turn on internal clock source
 8001432:	4622      	mov	r2, r4
 8001434:	216b      	movs	r1, #107	; 0x6b
 8001436:	20d0      	movs	r0, #208	; 0xd0
 8001438:	f7ff fda2 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, I2C_MST_CTRL, 0x00); // Disable I2C master
 800143c:	4622      	mov	r2, r4
 800143e:	2124      	movs	r1, #36	; 0x24
 8001440:	20d0      	movs	r0, #208	; 0xd0
 8001442:	f7ff fd9d 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x00); // Disable FIFO and I2C master modes
 8001446:	4622      	mov	r2, r4
 8001448:	216a      	movs	r1, #106	; 0x6a
 800144a:	20d0      	movs	r0, #208	; 0xd0
 800144c:	f7ff fd98 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001450:	220c      	movs	r2, #12
 8001452:	216a      	movs	r1, #106	; 0x6a
 8001454:	20d0      	movs	r0, #208	; 0xd0
 8001456:	f7ff fd93 	bl	8000f80 <writeByte>
	HAL_Delay(15);
 800145a:	200f      	movs	r0, #15
 800145c:	f001 fa08 	bl	8002870 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x01); // Set low-pass filter to 188 Hz
 8001460:	2201      	movs	r2, #1
 8001462:	211a      	movs	r1, #26
 8001464:	20d0      	movs	r0, #208	; 0xd0
 8001466:	f7ff fd8b 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set sample rate to 1 kHz
 800146a:	4622      	mov	r2, r4
 800146c:	2119      	movs	r1, #25
 800146e:	20d0      	movs	r0, #208	; 0xd0
 8001470:	f7ff fd86 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001474:	4622      	mov	r2, r4
 8001476:	211b      	movs	r1, #27
 8001478:	20d0      	movs	r0, #208	; 0xd0
 800147a:	f7ff fd81 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 800147e:	4622      	mov	r2, r4
 8001480:	211c      	movs	r1, #28
 8001482:	20d0      	movs	r0, #208	; 0xd0
 8001484:	f7ff fd7c 	bl	8000f80 <writeByte>

	uint16_t gyrosensitivity = 131;   // = 131 LSB/degrees/sec
	uint16_t accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x40);   // Enable FIFO
 8001488:	2240      	movs	r2, #64	; 0x40
 800148a:	216a      	movs	r1, #106	; 0x6a
 800148c:	20d0      	movs	r0, #208	; 0xd0
 800148e:	f7ff fd77 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001492:	2278      	movs	r2, #120	; 0x78
 8001494:	2123      	movs	r1, #35	; 0x23
 8001496:	20d0      	movs	r0, #208	; 0xd0
 8001498:	f7ff fd72 	bl	8000f80 <writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 800149c:	2028      	movs	r0, #40	; 0x28
 800149e:	f001 f9e7 	bl	8002870 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00); // Disable gyro and accelerometer sensors for FIFO
 80014a2:	4622      	mov	r2, r4
 80014a4:	2123      	movs	r1, #35	; 0x23
 80014a6:	20d0      	movs	r0, #208	; 0xd0
 80014a8:	f7ff fd6a 	bl	8000f80 <writeByte>
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80014ac:	ab09      	add	r3, sp, #36	; 0x24
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2302      	movs	r3, #2
 80014b2:	2272      	movs	r2, #114	; 0x72
 80014b4:	21d1      	movs	r1, #209	; 0xd1
 80014b6:	20d0      	movs	r0, #208	; 0xd0
 80014b8:	f7ff fdbc 	bl	8001034 <readBytes>
	fifo_count = ((uint16_t) data[0] << 8) | data[1];
 80014bc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80014c0:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80014c4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 80014c8:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <calibrateMPU9250+0x2a4>)
 80014ca:	fba3 3505 	umull	r3, r5, r3, r5
 80014ce:	08ed      	lsrs	r5, r5, #3

	for (ii = 0; ii < packet_count; ii++) {
 80014d0:	e045      	b.n	800155e <calibrateMPU9250+0x182>
		int16_t accel_temp[3] = { 0, 0, 0 }, gyro_temp[3] = { 0, 0, 0 };
		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_R_W, 12,
 80014d2:	ab09      	add	r3, sp, #36	; 0x24
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	230c      	movs	r3, #12
 80014d8:	2274      	movs	r2, #116	; 0x74
 80014da:	21d1      	movs	r1, #209	; 0xd1
 80014dc:	20d0      	movs	r0, #208	; 0xd0
 80014de:	f7ff fda9 	bl	8001034 <readBytes>
				&data[0]); // read data for averaging
		accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]); // Form signed 16-bit integer for each sample in FIFO
 80014e2:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80014e6:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 80014ea:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
		accel_temp[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 80014ee:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
 80014f2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 80014f6:	ea40 2e0e 	orr.w	lr, r0, lr, lsl #8
		accel_temp[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 80014fa:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 80014fe:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 8001502:	ea40 2c0c 	orr.w	ip, r0, ip, lsl #8
		gyro_temp[0] = (int16_t) (((int16_t) data[6] << 8) | data[7]);
 8001506:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 800150a:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 800150e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		gyro_temp[1] = (int16_t) (((int16_t) data[8] << 8) | data[9]);
 8001512:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8001516:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800151a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		gyro_temp[2] = (int16_t) (((int16_t) data[10] << 8) | data[11]);
 800151e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8001522:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8001526:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800152a:	9803      	ldr	r0, [sp, #12]
 800152c:	fa00 f088 	sxtah	r0, r0, r8
 8001530:	9003      	str	r0, [sp, #12]
		accel_bias[1] += (int32_t) accel_temp[1];
 8001532:	9804      	ldr	r0, [sp, #16]
 8001534:	fa00 f08e 	sxtah	r0, r0, lr
 8001538:	9004      	str	r0, [sp, #16]
		accel_bias[2] += (int32_t) accel_temp[2];
 800153a:	9805      	ldr	r0, [sp, #20]
 800153c:	fa00 f08c 	sxtah	r0, r0, ip
 8001540:	9005      	str	r0, [sp, #20]
		gyro_bias[0] += (int32_t) gyro_temp[0];
 8001542:	9806      	ldr	r0, [sp, #24]
 8001544:	fa00 f181 	sxtah	r1, r0, r1
 8001548:	9106      	str	r1, [sp, #24]
		gyro_bias[1] += (int32_t) gyro_temp[1];
 800154a:	9907      	ldr	r1, [sp, #28]
 800154c:	fa01 f282 	sxtah	r2, r1, r2
 8001550:	9207      	str	r2, [sp, #28]
		gyro_bias[2] += (int32_t) gyro_temp[2];
 8001552:	9a08      	ldr	r2, [sp, #32]
 8001554:	fa02 f383 	sxtah	r3, r2, r3
 8001558:	9308      	str	r3, [sp, #32]
	for (ii = 0; ii < packet_count; ii++) {
 800155a:	3401      	adds	r4, #1
 800155c:	b2a4      	uxth	r4, r4
 800155e:	42ac      	cmp	r4, r5
 8001560:	d3b7      	bcc.n	80014d2 <calibrateMPU9250+0xf6>

	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001562:	9b03      	ldr	r3, [sp, #12]
 8001564:	fb93 f8f5 	sdiv	r8, r3, r5
	accel_bias[1] /= (int32_t) packet_count;
 8001568:	9b04      	ldr	r3, [sp, #16]
 800156a:	fb93 f4f5 	sdiv	r4, r3, r5
	accel_bias[2] /= (int32_t) packet_count;
 800156e:	9805      	ldr	r0, [sp, #20]
 8001570:	fb90 f0f5 	sdiv	r0, r0, r5
	gyro_bias[0] /= (int32_t) packet_count;
 8001574:	9906      	ldr	r1, [sp, #24]
 8001576:	fb91 f1f5 	sdiv	r1, r1, r5
	gyro_bias[1] /= (int32_t) packet_count;
 800157a:	9a07      	ldr	r2, [sp, #28]
 800157c:	fb92 f2f5 	sdiv	r2, r2, r5
	gyro_bias[2] /= (int32_t) packet_count;
 8001580:	9b08      	ldr	r3, [sp, #32]
 8001582:	fb93 f5f5 	sdiv	r5, r3, r5

	if (accel_bias[2] > 0L) {
 8001586:	2800      	cmp	r0, #0
 8001588:	dd4f      	ble.n	800162a <calibrateMPU9250+0x24e>
		accel_bias[2] -= (int32_t) accelsensitivity;
 800158a:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 800158e:	9005      	str	r0, [sp, #20]
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
	}

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001590:	424b      	negs	r3, r1
 8001592:	2b00      	cmp	r3, #0
 8001594:	db4d      	blt.n	8001632 <calibrateMPU9250+0x256>
 8001596:	1098      	asrs	r0, r3, #2
 8001598:	129b      	asrs	r3, r3, #10
 800159a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800159e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 80015a2:	4253      	negs	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db46      	blt.n	8001636 <calibrateMPU9250+0x25a>
 80015a8:	1098      	asrs	r0, r3, #2
 80015aa:	129b      	asrs	r3, r3, #10
 80015ac:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
 80015b0:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 80015b4:	426b      	negs	r3, r5
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db3f      	blt.n	800163a <calibrateMPU9250+0x25e>
 80015ba:	1098      	asrs	r0, r3, #2
 80015bc:	129b      	asrs	r3, r3, #10
 80015be:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	data[5] = (-gyro_bias[2] / 4) & 0xFF;
 80015c2:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_H, data[2]);
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_L, data[5]);
	 */
	dest1[0] = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 80015c6:	ee07 1a90 	vmov	s15, r1
 80015ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ce:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001684 <calibrateMPU9250+0x2a8>
 80015d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015d6:	edc7 6a00 	vstr	s13, [r7]
	dest1[1] = (float) gyro_bias[1] / (float) gyrosensitivity;
 80015da:	ee07 2a90 	vmov	s15, r2
 80015de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015e6:	edc7 6a01 	vstr	s13, [r7, #4]
	dest1[2] = (float) gyro_bias[2] / (float) gyrosensitivity;
 80015ea:	ee07 5a90 	vmov	s15, r5
 80015ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015f6:	edc7 6a02 	vstr	s13, [r7, #8]
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80015fa:	ad09      	add	r5, sp, #36	; 0x24
 80015fc:	9500      	str	r5, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	2277      	movs	r2, #119	; 0x77
 8001602:	21d1      	movs	r1, #209	; 0xd1
 8001604:	20d0      	movs	r0, #208	; 0xd0
 8001606:	f7ff fd15 	bl	8001034 <readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, YA_OFFSET_H, 2, &data[0]);
 800160a:	9500      	str	r5, [sp, #0]
 800160c:	2302      	movs	r3, #2
 800160e:	227a      	movs	r2, #122	; 0x7a
 8001610:	21d1      	movs	r1, #209	; 0xd1
 8001612:	20d0      	movs	r0, #208	; 0xd0
 8001614:	f7ff fd0e 	bl	8001034 <readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ZA_OFFSET_H, 2, &data[0]);
 8001618:	9500      	str	r5, [sp, #0]
 800161a:	2302      	movs	r3, #2
 800161c:	227d      	movs	r2, #125	; 0x7d
 800161e:	21d1      	movs	r1, #209	; 0xd1
 8001620:	20d0      	movs	r0, #208	; 0xd0
 8001622:	f7ff fd07 	bl	8001034 <readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t) data[0] << 8) | data[1];

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = { 0, 0, 0 }; // Define array to hold mask bit for each accelerometer bias axis

	for (ii = 0; ii < 3; ii++) {
 8001626:	2300      	movs	r3, #0
 8001628:	e00b      	b.n	8001642 <calibrateMPU9250+0x266>
		accel_bias[2] += (int32_t) accelsensitivity;
 800162a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800162e:	9005      	str	r0, [sp, #20]
 8001630:	e7ae      	b.n	8001590 <calibrateMPU9250+0x1b4>
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001632:	3303      	adds	r3, #3
 8001634:	e7af      	b.n	8001596 <calibrateMPU9250+0x1ba>
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8001636:	3303      	adds	r3, #3
 8001638:	e7b6      	b.n	80015a8 <calibrateMPU9250+0x1cc>
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 800163a:	3303      	adds	r3, #3
 800163c:	e7bd      	b.n	80015ba <calibrateMPU9250+0x1de>
	for (ii = 0; ii < 3; ii++) {
 800163e:	3301      	adds	r3, #1
 8001640:	b29b      	uxth	r3, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d9fb      	bls.n	800163e <calibrateMPU9250+0x262>
	 writeByte(MPU9250_ADDRESS_TX, YA_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_L, data[5]);
	 */
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
 8001646:	ee07 8a90 	vmov	s15, r8
 800164a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001688 <calibrateMPU9250+0x2ac>
 8001652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001656:	edc6 7a00 	vstr	s15, [r6]
	dest2[1] = (float) accel_bias[1] / (float) accelsensitivity;
 800165a:	ee07 4a90 	vmov	s15, r4
 800165e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	edc6 7a01 	vstr	s15, [r6, #4]
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 800166a:	eddd 7a05 	vldr	s15, [sp, #20]
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001676:	edc6 7a02 	vstr	s15, [r6, #8]
}
 800167a:	b00c      	add	sp, #48	; 0x30
 800167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001680:	aaaaaaab 	.word	0xaaaaaaab
 8001684:	43030000 	.word	0x43030000
 8001688:	38800000 	.word	0x38800000
 800168c:	00000000 	.word	0x00000000

08001690 <MPU9250SelfTest>:
 }


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 8001690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001694:	ed2d 8b08 	vpush	{d8-d11}
 8001698:	b093      	sub	sp, #76	; 0x4c
 800169a:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 800169c:	2400      	movs	r4, #0
 800169e:	9410      	str	r4, [sp, #64]	; 0x40
 80016a0:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80016a4:	4622      	mov	r2, r4
 80016a6:	2119      	movs	r1, #25
 80016a8:	20d0      	movs	r0, #208	; 0xd0
 80016aa:	f7ff fc69 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80016ae:	2202      	movs	r2, #2
 80016b0:	211a      	movs	r1, #26
 80016b2:	20d0      	movs	r0, #208	; 0xd0
 80016b4:	f7ff fc64 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 80016b8:	2201      	movs	r2, #1
 80016ba:	211b      	movs	r1, #27
 80016bc:	20d0      	movs	r0, #208	; 0xd0
 80016be:	f7ff fc5f 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80016c2:	2202      	movs	r2, #2
 80016c4:	211d      	movs	r1, #29
 80016c6:	20d0      	movs	r0, #208	; 0xd0
 80016c8:	f7ff fc5a 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 80016cc:	2201      	movs	r2, #1
 80016ce:	211c      	movs	r1, #28
 80016d0:	20d0      	movs	r0, #208	; 0xd0
 80016d2:	f7ff fc55 	bl	8000f80 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80016d6:	e051      	b.n	800177c <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80016d8:	ae10      	add	r6, sp, #64	; 0x40
 80016da:	9600      	str	r6, [sp, #0]
 80016dc:	2306      	movs	r3, #6
 80016de:	223b      	movs	r2, #59	; 0x3b
 80016e0:	21d1      	movs	r1, #209	; 0xd1
 80016e2:	20d0      	movs	r0, #208	; 0xd0
 80016e4:	f7ff fca6 	bl	8001034 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80016e8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80016ec:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80016f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016f4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80016f8:	4413      	add	r3, r2
 80016fa:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80016fe:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001702:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8001706:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800170a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800170e:	4413      	add	r3, r2
 8001710:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001714:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001718:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800171c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001720:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8001724:	4413      	add	r3, r2
 8001726:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800172a:	9600      	str	r6, [sp, #0]
 800172c:	2306      	movs	r3, #6
 800172e:	2243      	movs	r2, #67	; 0x43
 8001730:	21d1      	movs	r1, #209	; 0xd1
 8001732:	20d0      	movs	r0, #208	; 0xd0
 8001734:	f7ff fc7e 	bl	8001034 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001738:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800173c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001740:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001744:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8001748:	4413      	add	r3, r2
 800174a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800174e:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001752:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8001756:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800175a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800175e:	4413      	add	r3, r2
 8001760:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001764:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001768:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800176c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001770:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8001774:	4413      	add	r3, r2
 8001776:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800177a:	3401      	adds	r4, #1
 800177c:	2cc7      	cmp	r4, #199	; 0xc7
 800177e:	ddab      	ble.n	80016d8 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001780:	2400      	movs	r4, #0
 8001782:	e016      	b.n	80017b2 <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 8001784:	ab12      	add	r3, sp, #72	; 0x48
 8001786:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800178a:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 800178e:	48c0      	ldr	r0, [pc, #768]	; (8001a90 <MPU9250SelfTest+0x400>)
 8001790:	fb80 6302 	smull	r6, r3, r0, r2
 8001794:	17d2      	asrs	r2, r2, #31
 8001796:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 800179a:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 800179e:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 80017a2:	fb80 2003 	smull	r2, r0, r0, r3
 80017a6:	17db      	asrs	r3, r3, #31
 80017a8:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 80017ac:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80017b0:	3401      	adds	r4, #1
 80017b2:	2c02      	cmp	r4, #2
 80017b4:	dde6      	ble.n	8001784 <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80017b6:	22e0      	movs	r2, #224	; 0xe0
 80017b8:	211c      	movs	r1, #28
 80017ba:	20d0      	movs	r0, #208	; 0xd0
 80017bc:	f7ff fbe0 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80017c0:	22e0      	movs	r2, #224	; 0xe0
 80017c2:	211b      	movs	r1, #27
 80017c4:	20d0      	movs	r0, #208	; 0xd0
 80017c6:	f7ff fbdb 	bl	8000f80 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80017ca:	2019      	movs	r0, #25
 80017cc:	f001 f850 	bl	8002870 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80017d0:	2400      	movs	r4, #0
 80017d2:	e051      	b.n	8001878 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80017d4:	ae10      	add	r6, sp, #64	; 0x40
 80017d6:	9600      	str	r6, [sp, #0]
 80017d8:	2306      	movs	r3, #6
 80017da:	223b      	movs	r2, #59	; 0x3b
 80017dc:	21d1      	movs	r1, #209	; 0xd1
 80017de:	20d0      	movs	r0, #208	; 0xd0
 80017e0:	f7ff fc28 	bl	8001034 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80017e4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80017e8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80017ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017f0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80017f4:	4413      	add	r3, r2
 80017f6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80017fa:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80017fe:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8001802:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001806:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800180a:	4413      	add	r3, r2
 800180c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001810:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001814:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001818:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800181c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8001820:	4413      	add	r3, r2
 8001822:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001826:	9600      	str	r6, [sp, #0]
 8001828:	2306      	movs	r3, #6
 800182a:	2243      	movs	r2, #67	; 0x43
 800182c:	21d1      	movs	r1, #209	; 0xd1
 800182e:	20d0      	movs	r0, #208	; 0xd0
 8001830:	f7ff fc00 	bl	8001034 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001834:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001838:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800183c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001840:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8001844:	4413      	add	r3, r2
 8001846:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800184a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800184e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8001852:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001856:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800185a:	4413      	add	r3, r2
 800185c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001860:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001864:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001868:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800186c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8001870:	4413      	add	r3, r2
 8001872:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001876:	3401      	adds	r4, #1
 8001878:	2cc7      	cmp	r4, #199	; 0xc7
 800187a:	ddab      	ble.n	80017d4 <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 800187c:	2400      	movs	r4, #0
 800187e:	e016      	b.n	80018ae <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 8001880:	ab12      	add	r3, sp, #72	; 0x48
 8001882:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8001886:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 800188a:	4881      	ldr	r0, [pc, #516]	; (8001a90 <MPU9250SelfTest+0x400>)
 800188c:	fb80 6302 	smull	r6, r3, r0, r2
 8001890:	17d2      	asrs	r2, r2, #31
 8001892:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8001896:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 800189a:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 800189e:	fb80 2003 	smull	r2, r0, r0, r3
 80018a2:	17db      	asrs	r3, r3, #31
 80018a4:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 80018a8:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80018ac:	3401      	adds	r4, #1
 80018ae:	2c02      	cmp	r4, #2
 80018b0:	dde6      	ble.n	8001880 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 80018b2:	2200      	movs	r2, #0
 80018b4:	211c      	movs	r1, #28
 80018b6:	20d0      	movs	r0, #208	; 0xd0
 80018b8:	f7ff fb62 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 80018bc:	2200      	movs	r2, #0
 80018be:	211b      	movs	r1, #27
 80018c0:	20d0      	movs	r0, #208	; 0xd0
 80018c2:	f7ff fb5d 	bl	8000f80 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80018c6:	2019      	movs	r0, #25
 80018c8:	f000 ffd2 	bl	8002870 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018cc:	220d      	movs	r2, #13
 80018ce:	21d1      	movs	r1, #209	; 0xd1
 80018d0:	20d0      	movs	r0, #208	; 0xd0
 80018d2:	f7ff fb69 	bl	8000fa8 <readByte>
 80018d6:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018da:	220e      	movs	r2, #14
 80018dc:	21d1      	movs	r1, #209	; 0xd1
 80018de:	20d0      	movs	r0, #208	; 0xd0
 80018e0:	f7ff fb62 	bl	8000fa8 <readByte>
 80018e4:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018e8:	220f      	movs	r2, #15
 80018ea:	21d1      	movs	r1, #209	; 0xd1
 80018ec:	20d0      	movs	r0, #208	; 0xd0
 80018ee:	f7ff fb5b 	bl	8000fa8 <readByte>
 80018f2:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018f6:	2200      	movs	r2, #0
 80018f8:	21d1      	movs	r1, #209	; 0xd1
 80018fa:	20d0      	movs	r0, #208	; 0xd0
 80018fc:	f7ff fb54 	bl	8000fa8 <readByte>
 8001900:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001904:	2201      	movs	r2, #1
 8001906:	21d1      	movs	r1, #209	; 0xd1
 8001908:	20d0      	movs	r0, #208	; 0xd0
 800190a:	f7ff fb4d 	bl	8000fa8 <readByte>
 800190e:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001912:	2202      	movs	r2, #2
 8001914:	21d1      	movs	r1, #209	; 0xd1
 8001916:	20d0      	movs	r0, #208	; 0xd0
 8001918:	f7ff fb46 	bl	8000fa8 <readByte>
 800191c:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001920:	eef8 7a48 	vcvt.f32.u32	s15, s16
 8001924:	ee17 0a90 	vmov	r0, s15
 8001928:	f7fe fdbe 	bl	80004a8 <__aeabi_f2d>
 800192c:	2200      	movs	r2, #0
 800192e:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <MPU9250SelfTest+0x404>)
 8001930:	f7fe fc5a 	bl	80001e8 <__aeabi_dsub>
 8001934:	ed9f 8b52 	vldr	d8, [pc, #328]	; 8001a80 <MPU9250SelfTest+0x3f0>
 8001938:	ec41 0b11 	vmov	d1, r0, r1
 800193c:	eeb0 0a48 	vmov.f32	s0, s16
 8001940:	eef0 0a68 	vmov.f32	s1, s17
 8001944:	f006 f9f2 	bl	8007d2c <pow>
 8001948:	a34f      	add	r3, pc, #316	; (adr r3, 8001a88 <MPU9250SelfTest+0x3f8>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	ec51 0b10 	vmov	r0, r1, d0
 8001952:	f7fe fe01 	bl	8000558 <__aeabi_dmul>
 8001956:	f7ff f839 	bl	80009cc <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 800195a:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 800195c:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 8001960:	ee17 0a90 	vmov	r0, s15
 8001964:	f7fe fda0 	bl	80004a8 <__aeabi_f2d>
 8001968:	2200      	movs	r2, #0
 800196a:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <MPU9250SelfTest+0x404>)
 800196c:	f7fe fc3c 	bl	80001e8 <__aeabi_dsub>
 8001970:	ec41 0b11 	vmov	d1, r0, r1
 8001974:	eeb0 0a48 	vmov.f32	s0, s16
 8001978:	eef0 0a68 	vmov.f32	s1, s17
 800197c:	f006 f9d6 	bl	8007d2c <pow>
 8001980:	a341      	add	r3, pc, #260	; (adr r3, 8001a88 <MPU9250SelfTest+0x3f8>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	ec51 0b10 	vmov	r0, r1, d0
 800198a:	f7fe fde5 	bl	8000558 <__aeabi_dmul>
 800198e:	f7ff f81d 	bl	80009cc <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 8001992:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 8001994:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 8001998:	ee17 0a90 	vmov	r0, s15
 800199c:	f7fe fd84 	bl	80004a8 <__aeabi_f2d>
 80019a0:	2200      	movs	r2, #0
 80019a2:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <MPU9250SelfTest+0x404>)
 80019a4:	f7fe fc20 	bl	80001e8 <__aeabi_dsub>
 80019a8:	ec41 0b11 	vmov	d1, r0, r1
 80019ac:	eeb0 0a48 	vmov.f32	s0, s16
 80019b0:	eef0 0a68 	vmov.f32	s1, s17
 80019b4:	f006 f9ba 	bl	8007d2c <pow>
 80019b8:	a333      	add	r3, pc, #204	; (adr r3, 8001a88 <MPU9250SelfTest+0x3f8>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	ec51 0b10 	vmov	r0, r1, d0
 80019c2:	f7fe fdc9 	bl	8000558 <__aeabi_dmul>
 80019c6:	f7ff f801 	bl	80009cc <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 80019ca:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 80019cc:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 80019d0:	ee17 0a90 	vmov	r0, s15
 80019d4:	f7fe fd68 	bl	80004a8 <__aeabi_f2d>
 80019d8:	2200      	movs	r2, #0
 80019da:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <MPU9250SelfTest+0x404>)
 80019dc:	f7fe fc04 	bl	80001e8 <__aeabi_dsub>
 80019e0:	ec41 0b11 	vmov	d1, r0, r1
 80019e4:	eeb0 0a48 	vmov.f32	s0, s16
 80019e8:	eef0 0a68 	vmov.f32	s1, s17
 80019ec:	f006 f99e 	bl	8007d2c <pow>
 80019f0:	a325      	add	r3, pc, #148	; (adr r3, 8001a88 <MPU9250SelfTest+0x3f8>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	ec51 0b10 	vmov	r0, r1, d0
 80019fa:	f7fe fdad 	bl	8000558 <__aeabi_dmul>
 80019fe:	f7fe ffe5 	bl	80009cc <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 8001a02:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8001a04:	eef8 7a69 	vcvt.f32.u32	s15, s19
 8001a08:	ee17 0a90 	vmov	r0, s15
 8001a0c:	f7fe fd4c 	bl	80004a8 <__aeabi_f2d>
 8001a10:	2200      	movs	r2, #0
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <MPU9250SelfTest+0x404>)
 8001a14:	f7fe fbe8 	bl	80001e8 <__aeabi_dsub>
 8001a18:	ec41 0b11 	vmov	d1, r0, r1
 8001a1c:	eeb0 0a48 	vmov.f32	s0, s16
 8001a20:	eef0 0a68 	vmov.f32	s1, s17
 8001a24:	f006 f982 	bl	8007d2c <pow>
 8001a28:	a317      	add	r3, pc, #92	; (adr r3, 8001a88 <MPU9250SelfTest+0x3f8>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	ec51 0b10 	vmov	r0, r1, d0
 8001a32:	f7fe fd91 	bl	8000558 <__aeabi_dmul>
 8001a36:	f7fe ffc9 	bl	80009cc <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001a3a:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001a3c:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001a40:	ee17 0a90 	vmov	r0, s15
 8001a44:	f7fe fd30 	bl	80004a8 <__aeabi_f2d>
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MPU9250SelfTest+0x404>)
 8001a4c:	f7fe fbcc 	bl	80001e8 <__aeabi_dsub>
 8001a50:	ec41 0b11 	vmov	d1, r0, r1
 8001a54:	eeb0 0a48 	vmov.f32	s0, s16
 8001a58:	eef0 0a68 	vmov.f32	s1, s17
 8001a5c:	f006 f966 	bl	8007d2c <pow>
 8001a60:	a309      	add	r3, pc, #36	; (adr r3, 8001a88 <MPU9250SelfTest+0x3f8>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	ec51 0b10 	vmov	r0, r1, d0
 8001a6a:	f7fe fd75 	bl	8000558 <__aeabi_dmul>
 8001a6e:	f7fe ffad 	bl	80009cc <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 8001a72:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8001a74:	f04f 0800 	mov.w	r8, #0
 8001a78:	e05f      	b.n	8001b3a <MPU9250SelfTest+0x4aa>
 8001a7a:	bf00      	nop
 8001a7c:	f3af 8000 	nop.w
 8001a80:	c28f5c29 	.word	0xc28f5c29
 8001a84:	3ff028f5 	.word	0x3ff028f5
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	40a47800 	.word	0x40a47800
 8001a90:	51eb851f 	.word	0x51eb851f
 8001a94:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001a98:	ab12      	add	r3, sp, #72	; 0x48
 8001a9a:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 8001a9e:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 8001aa2:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 8001aa6:	1ac0      	subs	r0, r0, r3
 8001aa8:	ee07 0a90 	vmov	s15, r0
 8001aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab0:	ee17 0a90 	vmov	r0, s15
 8001ab4:	f7fe fcf8 	bl	80004a8 <__aeabi_f2d>
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <MPU9250SelfTest+0x4bc>)
 8001abc:	f7fe fd4c 	bl	8000558 <__aeabi_dmul>
 8001ac0:	4606      	mov	r6, r0
 8001ac2:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 8001ac4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001ac8:	ab12      	add	r3, sp, #72	; 0x48
 8001aca:	444b      	add	r3, r9
 8001acc:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001ad0:	f7fe fcea 	bl	80004a8 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001ad4:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4630      	mov	r0, r6
 8001adc:	4639      	mov	r1, r7
 8001ade:	f7fe fe65 	bl	80007ac <__aeabi_ddiv>
 8001ae2:	f7fe ff73 	bl	80009cc <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001ae6:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001aea:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001aee:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 8001af2:	1ac0      	subs	r0, r0, r3
 8001af4:	ee07 0a90 	vmov	s15, r0
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	ee17 0a90 	vmov	r0, s15
 8001b00:	f7fe fcd2 	bl	80004a8 <__aeabi_f2d>
 8001b04:	2200      	movs	r2, #0
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MPU9250SelfTest+0x4bc>)
 8001b08:	f7fe fd26 	bl	8000558 <__aeabi_dmul>
 8001b0c:	4606      	mov	r6, r0
 8001b0e:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001b10:	f108 0403 	add.w	r4, r8, #3
 8001b14:	00a4      	lsls	r4, r4, #2
 8001b16:	ab12      	add	r3, sp, #72	; 0x48
 8001b18:	4423      	add	r3, r4
 8001b1a:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001b1e:	f7fe fcc3 	bl	80004a8 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b22:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4630      	mov	r0, r6
 8001b2a:	4639      	mov	r1, r7
 8001b2c:	f7fe fe3e 	bl	80007ac <__aeabi_ddiv>
 8001b30:	f7fe ff4c 	bl	80009cc <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b34:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8001b36:	f108 0801 	add.w	r8, r8, #1
 8001b3a:	f1b8 0f02 	cmp.w	r8, #2
 8001b3e:	ddab      	ble.n	8001a98 <MPU9250SelfTest+0x408>
	}

}
 8001b40:	b013      	add	sp, #76	; 0x4c
 8001b42:	ecbd 8b08 	vpop	{d8-d11}
 8001b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40590000 	.word	0x40590000

08001b50 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 8001b50:	b538      	push	{r3, r4, r5, lr}
	resetMPU9250();
 8001b52:	f7ff fb65 	bl	8001220 <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 8001b56:	4c56      	ldr	r4, [pc, #344]	; (8001cb0 <imu_calibrate+0x160>)
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff fd99 	bl	8001690 <MPU9250SelfTest>
	printf(	"x-axis self test: acceleration trim within : %f of factory value\n\r", SelfTest[0]);
 8001b5e:	6820      	ldr	r0, [r4, #0]
 8001b60:	f7fe fca2 	bl	80004a8 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4852      	ldr	r0, [pc, #328]	; (8001cb4 <imu_calibrate+0x164>)
 8001b6a:	f004 f961 	bl	8005e30 <iprintf>
	printf(
 8001b6e:	6860      	ldr	r0, [r4, #4]
 8001b70:	f7fe fc9a 	bl	80004a8 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	484f      	ldr	r0, [pc, #316]	; (8001cb8 <imu_calibrate+0x168>)
 8001b7a:	f004 f959 	bl	8005e30 <iprintf>
	printf(
 8001b7e:	68a0      	ldr	r0, [r4, #8]
 8001b80:	f7fe fc92 	bl	80004a8 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	484c      	ldr	r0, [pc, #304]	; (8001cbc <imu_calibrate+0x16c>)
 8001b8a:	f004 f951 	bl	8005e30 <iprintf>
	printf("x-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b8e:	68e0      	ldr	r0, [r4, #12]
 8001b90:	f7fe fc8a 	bl	80004a8 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4849      	ldr	r0, [pc, #292]	; (8001cc0 <imu_calibrate+0x170>)
 8001b9a:	f004 f949 	bl	8005e30 <iprintf>
	printf("y-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b9e:	6920      	ldr	r0, [r4, #16]
 8001ba0:	f7fe fc82 	bl	80004a8 <__aeabi_f2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4846      	ldr	r0, [pc, #280]	; (8001cc4 <imu_calibrate+0x174>)
 8001baa:	f004 f941 	bl	8005e30 <iprintf>
	printf("z-axis self test: gyration trim within : %f  of factory value\n\r",
 8001bae:	6960      	ldr	r0, [r4, #20]
 8001bb0:	f7fe fc7a 	bl	80004a8 <__aeabi_f2d>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4843      	ldr	r0, [pc, #268]	; (8001cc8 <imu_calibrate+0x178>)
 8001bba:	f004 f939 	bl	8005e30 <iprintf>
	calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8001bbe:	4c43      	ldr	r4, [pc, #268]	; (8001ccc <imu_calibrate+0x17c>)
 8001bc0:	4d43      	ldr	r5, [pc, #268]	; (8001cd0 <imu_calibrate+0x180>)
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f7ff fc09 	bl	80013dc <calibrateMPU9250>
	printf("x gyro bias = %f\n\r", gyroBias[0]);
 8001bca:	6828      	ldr	r0, [r5, #0]
 8001bcc:	f7fe fc6c 	bl	80004a8 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	483f      	ldr	r0, [pc, #252]	; (8001cd4 <imu_calibrate+0x184>)
 8001bd6:	f004 f92b 	bl	8005e30 <iprintf>
	printf("y gyro bias = %f\n\r", gyroBias[1]);
 8001bda:	6868      	ldr	r0, [r5, #4]
 8001bdc:	f7fe fc64 	bl	80004a8 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	483c      	ldr	r0, [pc, #240]	; (8001cd8 <imu_calibrate+0x188>)
 8001be6:	f004 f923 	bl	8005e30 <iprintf>
	printf("z gyro bias = %f\n\r", gyroBias[2]);
 8001bea:	68a8      	ldr	r0, [r5, #8]
 8001bec:	f7fe fc5c 	bl	80004a8 <__aeabi_f2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4839      	ldr	r0, [pc, #228]	; (8001cdc <imu_calibrate+0x18c>)
 8001bf6:	f004 f91b 	bl	8005e30 <iprintf>
	printf("x accel bias = %f\n\r", accelBias[0]);
 8001bfa:	6820      	ldr	r0, [r4, #0]
 8001bfc:	f7fe fc54 	bl	80004a8 <__aeabi_f2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4836      	ldr	r0, [pc, #216]	; (8001ce0 <imu_calibrate+0x190>)
 8001c06:	f004 f913 	bl	8005e30 <iprintf>
	printf("y accel bias = %f\n\r", accelBias[1]);
 8001c0a:	6860      	ldr	r0, [r4, #4]
 8001c0c:	f7fe fc4c 	bl	80004a8 <__aeabi_f2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4833      	ldr	r0, [pc, #204]	; (8001ce4 <imu_calibrate+0x194>)
 8001c16:	f004 f90b 	bl	8005e30 <iprintf>
	printf("z accel bias = %f\n\r", accelBias[2]);
 8001c1a:	68a0      	ldr	r0, [r4, #8]
 8001c1c:	f7fe fc44 	bl	80004a8 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4830      	ldr	r0, [pc, #192]	; (8001ce8 <imu_calibrate+0x198>)
 8001c26:	f004 f903 	bl	8005e30 <iprintf>
	initMPU9250();
 8001c2a:	f7ff fb67 	bl	80012fc <initMPU9250>
	initAK8963(magCalibration);
 8001c2e:	482f      	ldr	r0, [pc, #188]	; (8001cec <imu_calibrate+0x19c>)
 8001c30:	f7ff fb00 	bl	8001234 <initAK8963>
	printf("Accelerometer full-scale range = %f  g\n\r", 2.0f*(float)(1<<Ascale));
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <imu_calibrate+0x1a0>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2401      	movs	r4, #1
 8001c3a:	fa04 f303 	lsl.w	r3, r4, r3
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c4a:	ee17 0a90 	vmov	r0, s15
 8001c4e:	f7fe fc2b 	bl	80004a8 <__aeabi_f2d>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4827      	ldr	r0, [pc, #156]	; (8001cf4 <imu_calibrate+0x1a4>)
 8001c58:	f004 f8ea 	bl	8005e30 <iprintf>
	printf("Gyroscope full-scale range = %f  deg/s\n\r", 250.0f*(float)(1<<Gscale));
 8001c5c:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <imu_calibrate+0x1a8>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	409c      	lsls	r4, r3
 8001c62:	ee07 4a90 	vmov	s15, r4
 8001c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001cfc <imu_calibrate+0x1ac>
 8001c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c72:	ee17 0a90 	vmov	r0, s15
 8001c76:	f7fe fc17 	bl	80004a8 <__aeabi_f2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4820      	ldr	r0, [pc, #128]	; (8001d00 <imu_calibrate+0x1b0>)
 8001c80:	f004 f8d6 	bl	8005e30 <iprintf>
	getAres(); // Get accelerometer sensitivity
 8001c84:	f7ff fa38 	bl	80010f8 <getAres>
	getGres(); // Get gyro sensitivity
 8001c88:	f7ff fa12 	bl	80010b0 <getGres>
	getMres(); // Get magnetometer sensitivity
 8001c8c:	f7ff f9fa 	bl	8001084 <getMres>
	magbias[0]	=	64.231575;
 8001c90:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <imu_calibrate+0x1b4>)
 8001c92:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <imu_calibrate+0x1b8>)
 8001c94:	601a      	str	r2, [r3, #0]
	magbias[1]	=	-151.403;
 8001c96:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <imu_calibrate+0x1bc>)
 8001c98:	605a      	str	r2, [r3, #4]
	magbias[2]	=	117.918869;
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <imu_calibrate+0x1c0>)
 8001c9c:	609a      	str	r2, [r3, #8]
	magScale[0]	=	0.698056817;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <imu_calibrate+0x1c4>)
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <imu_calibrate+0x1c8>)
 8001ca2:	601a      	str	r2, [r3, #0]
	magScale[1]	=	1.17042613;
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <imu_calibrate+0x1cc>)
 8001ca6:	605a      	str	r2, [r3, #4]
	magScale[2]	=	1.4024024;
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <imu_calibrate+0x1d0>)
 8001caa:	609a      	str	r2, [r3, #8]
}
 8001cac:	2000      	movs	r0, #0
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
 8001cb0:	2000032c 	.word	0x2000032c
 8001cb4:	080097c8 	.word	0x080097c8
 8001cb8:	0800980c 	.word	0x0800980c
 8001cbc:	08009850 	.word	0x08009850
 8001cc0:	08009894 	.word	0x08009894
 8001cc4:	080098d4 	.word	0x080098d4
 8001cc8:	08009914 	.word	0x08009914
 8001ccc:	20000274 	.word	0x20000274
 8001cd0:	20000290 	.word	0x20000290
 8001cd4:	08009954 	.word	0x08009954
 8001cd8:	08009968 	.word	0x08009968
 8001cdc:	0800997c 	.word	0x0800997c
 8001ce0:	08009990 	.word	0x08009990
 8001ce4:	080099a4 	.word	0x080099a4
 8001ce8:	080099b8 	.word	0x080099b8
 8001cec:	200002a0 	.word	0x200002a0
 8001cf0:	2000026c 	.word	0x2000026c
 8001cf4:	080099cc 	.word	0x080099cc
 8001cf8:	2000026d 	.word	0x2000026d
 8001cfc:	437a0000 	.word	0x437a0000
 8001d00:	080099f8 	.word	0x080099f8
 8001d04:	200002ac 	.word	0x200002ac
 8001d08:	42807691 	.word	0x42807691
 8001d0c:	c317672b 	.word	0xc317672b
 8001d10:	42ebd676 	.word	0x42ebd676
 8001d14:	20000004 	.word	0x20000004
 8001d18:	3f32b3da 	.word	0x3f32b3da
 8001d1c:	3f95d086 	.word	0x3f95d086
 8001d20:	3fb381ec 	.word	0x3fb381ec

08001d24 <MahonyQuaternionUpdate>:
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d24:	ee61 7a01 	vmul.f32	s15, s2, s2
		float gz, float mx, float my, float mz) {
 8001d28:	b530      	push	{r4, r5, lr}
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d2a:	eee0 7aa0 	vfma.f32	s15, s1, s1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001d2e:	4cb9      	ldr	r4, [pc, #740]	; (8002014 <MahonyQuaternionUpdate+0x2f0>)
		float gz, float mx, float my, float mz) {
 8001d30:	ed2d 8b10 	vpush	{d8-d15}
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d34:	eee0 7a00 	vfma.f32	s15, s0, s0
		float gz, float mx, float my, float mz) {
 8001d38:	b089      	sub	sp, #36	; 0x24
 8001d3a:	eeb0 aa41 	vmov.f32	s20, s2
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d3e:	ee17 0a90 	vmov	r0, s15
		float gz, float mx, float my, float mz) {
 8001d42:	eeb0 ca61 	vmov.f32	s24, s3
 8001d46:	eeb0 ea42 	vmov.f32	s28, s4
 8001d4a:	eef0 da62 	vmov.f32	s27, s5
 8001d4e:	eef0 ba43 	vmov.f32	s23, s6
 8001d52:	eeb0 ba63 	vmov.f32	s22, s7
 8001d56:	eef0 ca44 	vmov.f32	s25, s8
 8001d5a:	eef0 8a60 	vmov.f32	s17, s1
 8001d5e:	eeb0 8a40 	vmov.f32	s16, s0
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d62:	f7fe fba1 	bl	80004a8 <__aeabi_f2d>
 8001d66:	ec41 0b10 	vmov	d0, r0, r1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001d6a:	ed94 9a00 	vldr	s18, [r4]
 8001d6e:	ed94 da01 	vldr	s26, [r4, #4]
 8001d72:	edd4 aa02 	vldr	s21, [r4, #8]
 8001d76:	edd4 9a03 	vldr	s19, [r4, #12]
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d7a:	f006 f947 	bl	800800c <sqrt>
 8001d7e:	ec51 0b10 	vmov	r0, r1, d0
 8001d82:	f7fe fe23 	bl	80009cc <__aeabi_d2f>
 8001d86:	ee0e 0a90 	vmov	s29, r0
	if (norm == 0.0f)
 8001d8a:	eef5 ea40 	vcmp.f32	s29, #0.0
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	d103      	bne.n	8001d9c <MahonyQuaternionUpdate+0x78>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001d94:	b009      	add	sp, #36	; 0x24
 8001d96:	ecbd 8b10 	vpop	{d8-d15}
 8001d9a:	bd30      	pop	{r4, r5, pc}
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001d9c:	ee6c 7aac 	vmul.f32	s15, s25, s25
 8001da0:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8001da4:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8001da8:	ee17 0a90 	vmov	r0, s15
 8001dac:	f7fe fb7c 	bl	80004a8 <__aeabi_f2d>
 8001db0:	ec41 0b10 	vmov	d0, r0, r1
 8001db4:	f006 f92a 	bl	800800c <sqrt>
 8001db8:	ec51 0b10 	vmov	r0, r1, d0
 8001dbc:	f7fe fe06 	bl	80009cc <__aeabi_d2f>
 8001dc0:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001dc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	d0e2      	beq.n	8001d94 <MahonyQuaternionUpdate+0x70>
	norm = 1.0f / norm;        // use reciprocal for division
 8001dce:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
	norm = 1.0f / norm;        // use reciprocal for division
 8001dd2:	ee8f 4a27 	vdiv.f32	s8, s30, s15
 8001dd6:	2500      	movs	r5, #0
	float q4q4 = q4 * q4;
 8001dd8:	ee29 6aa9 	vmul.f32	s12, s19, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001ddc:	ee2d 7a4d 	vnmul.f32	s14, s26, s26
	float q2q3 = q2 * q3;
 8001de0:	ee6d 6a2a 	vmul.f32	s13, s26, s21
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001de4:	ee77 7a46 	vsub.f32	s15, s14, s12
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001de8:	eef1 5a49 	vneg.f32	s11, s18
 8001dec:	eef0 4a46 	vmov.f32	s9, s12
 8001df0:	eef6 fa00 	vmov.f32	s31, #96	; 0x3f000000  0.5
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001df4:	eef0 3a66 	vmov.f32	s7, s13
	my *= norm;
 8001df8:	ee2b ba04 	vmul.f32	s22, s22, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001dfc:	eee5 6aa9 	vfma.f32	s13, s11, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e00:	eee9 3a29 	vfma.f32	s7, s18, s19
 8001e04:	ee77 7aaf 	vadd.f32	s15, s15, s31
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e08:	eeea 4aaa 	vfma.f32	s9, s21, s21
	float q3q4 = q3 * q4;
 8001e0c:	ee2a 5aa9 	vmul.f32	s10, s21, s19
	mx *= norm;
 8001e10:	ee6b ba84 	vmul.f32	s23, s23, s8
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e14:	ee67 7a8b 	vmul.f32	s15, s15, s22
	norm = 1.0f / norm;        // use reciprocal for division
 8001e18:	ee8f 1a2e 	vdiv.f32	s2, s30, s29
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e1c:	eeb0 3a45 	vmov.f32	s6, s10
	mz *= norm;
 8001e20:	ee6c ea84 	vmul.f32	s29, s25, s8
	float q2q4 = q2 * q4;
 8001e24:	ee6d ca29 	vmul.f32	s25, s26, s19
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e28:	eea5 3a8d 	vfma.f32	s6, s11, s26
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e2c:	ee7f 4ae4 	vsub.f32	s9, s31, s9
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e30:	eee3 7aab 	vfma.f32	s15, s7, s23
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e34:	ee66 3a8b 	vmul.f32	s7, s13, s22
			+ 2.0f * mz * (q2q4 + q1q3);
 8001e38:	eeb0 4a6c 	vmov.f32	s8, s25
 8001e3c:	eea9 4a2a 	vfma.f32	s8, s18, s21
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e40:	eee4 3aab 	vfma.f32	s7, s9, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e44:	eee3 7a2e 	vfma.f32	s15, s6, s29
			+ 2.0f * mz * (q2q4 + q1q3);
 8001e48:	eee4 3a2e 	vfma.f32	s7, s8, s29
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e50:	ee73 3aa3 	vadd.f32	s7, s7, s7
	bx = sqrt((hx * hx) + (hy * hy));
 8001e54:	ee67 7aa7 	vmul.f32	s15, s15, s15
	ax *= norm;
 8001e58:	ee28 8a01 	vmul.f32	s16, s16, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001e5c:	eee3 7aa3 	vfma.f32	s15, s7, s7
	ay *= norm;
 8001e60:	ee68 8a81 	vmul.f32	s17, s17, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001e64:	ee17 0a90 	vmov	r0, s15
	az *= norm;
 8001e68:	ee2a aa01 	vmul.f32	s20, s20, s2
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e6c:	ed8d 7a07 	vstr	s14, [sp, #28]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e70:	ed8d 6a06 	vstr	s12, [sp, #24]
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e74:	ed8d 5a05 	vstr	s10, [sp, #20]
 8001e78:	edcd 5a04 	vstr	s11, [sp, #16]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e7c:	edcd 6a03 	vstr	s13, [sp, #12]
 8001e80:	edcd 4a02 	vstr	s9, [sp, #8]
			+ 2.0f * mz * (q2q4 + q1q3);
 8001e84:	ed8d 4a01 	vstr	s8, [sp, #4]
	bx = sqrt((hx * hx) + (hy * hy));
 8001e88:	f7fe fb0e 	bl	80004a8 <__aeabi_f2d>
 8001e8c:	ec41 0b10 	vmov	d0, r0, r1
 8001e90:	f006 f8bc 	bl	800800c <sqrt>
 8001e94:	ec51 0b10 	vmov	r0, r1, d0
 8001e98:	f7fe fd98 	bl	80009cc <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001e9c:	ed9d 5a05 	vldr	s10, [sp, #20]
 8001ea0:	eddd 5a04 	vldr	s11, [sp, #16]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ea4:	ed9d 7a07 	vldr	s14, [sp, #28]
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ea8:	ed9d 6a06 	vldr	s12, [sp, #24]
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001eac:	eddd 4a02 	vldr	s9, [sp, #8]
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001eb0:	ed9d 4a01 	vldr	s8, [sp, #4]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001eb4:	eddd 6a03 	vldr	s13, [sp, #12]
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001eb8:	4a57      	ldr	r2, [pc, #348]	; (8002018 <MahonyQuaternionUpdate+0x2f4>)
		eInt[0] = 0.0f;     // prevent integral wind up
 8001eba:	4b58      	ldr	r3, [pc, #352]	; (800201c <MahonyQuaternionUpdate+0x2f8>)
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ebc:	eea9 5a0d 	vfma.f32	s10, s18, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001ec0:	601d      	str	r5, [r3, #0]
		eInt[1] = 0.0f;
 8001ec2:	605d      	str	r5, [r3, #4]
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ec4:	eee5 caaa 	vfma.f32	s25, s11, s21
		eInt[2] = 0.0f;
 8001ec8:	609d      	str	r5, [r3, #8]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001eca:	eeb1 3a6a 	vneg.f32	s6, s21
 8001ece:	eef0 5a47 	vmov.f32	s11, s14
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ed2:	ee65 7a0b 	vmul.f32	s15, s10, s22
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ed6:	eee3 5a2a 	vfma.f32	s11, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001eda:	eeec 7aab 	vfma.f32	s15, s25, s23
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ede:	ee75 5aaf 	vadd.f32	s11, s11, s31
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ee2:	eea9 7a09 	vfma.f32	s14, s18, s18
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ee6:	eee5 7aae 	vfma.f32	s15, s11, s29
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001eea:	eea3 7a2a 	vfma.f32	s14, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001eee:	ee77 7aa7 	vadd.f32	s15, s15, s15
	bx = sqrt((hx * hx) + (hy * hy));
 8001ef2:	ee03 0a90 	vmov	s7, r0
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ef6:	ee37 6a06 	vadd.f32	s12, s14, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001efa:	ee2c 3aa7 	vmul.f32	s6, s25, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001efe:	ee7c caac 	vadd.f32	s25, s25, s25
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001f02:	eea4 3aa3 	vfma.f32	s6, s9, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f06:	ee66 4a48 	vnmul.f32	s9, s12, s16
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f0a:	ee25 7aa7 	vmul.f32	s14, s11, s15
	vy = 2.0f * (q1q2 + q3q4);
 8001f0e:	ee75 5a05 	vadd.f32	s11, s10, s10
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f12:	eeea 4a2c 	vfma.f32	s9, s20, s25
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f16:	eea4 7a23 	vfma.f32	s14, s8, s7
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f1a:	ee25 1aca 	vnmul.f32	s2, s11, s20
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f1e:	ee65 7a27 	vmul.f32	s15, s10, s15
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f22:	eea8 1a86 	vfma.f32	s2, s17, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001f26:	ee33 5a03 	vadd.f32	s10, s6, s6
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f2a:	eee6 7aa3 	vfma.f32	s15, s13, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f2e:	eef0 6a64 	vmov.f32	s13, s9
 8001f32:	eeee 6a85 	vfma.f32	s13, s29, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f36:	ee37 7a07 	vadd.f32	s14, s14, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f3a:	ee6c cae8 	vnmul.f32	s25, s25, s17
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f3e:	eeab 1a07 	vfma.f32	s2, s22, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f42:	eee8 ca25 	vfma.f32	s25, s16, s11
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f46:	eeeb 6ac7 	vfms.f32	s13, s23, s14
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001f4e:	eeb0 8a6a 	vmov.f32	s16, s21
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f52:	eeae 1ae7 	vfms.f32	s2, s29, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f56:	eeeb caa7 	vfma.f32	s25, s23, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001f5a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	gy = gy + Kp * ey + Ki * eInt[1];
 8001f5e:	eea6 eaa7 	vfma.f32	s28, s13, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001f62:	eea1 ca27 	vfma.f32	s24, s2, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f66:	eeeb ca45 	vfms.f32	s25, s22, s10
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001f6a:	ee6a 6a8e 	vmul.f32	s13, s21, s28
	gz = gz + Kp * ez + Ki * eInt[2];
 8001f6e:	eeec daa7 	vfma.f32	s27, s25, s15
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001f72:	eeed 6a0c 	vfma.f32	s13, s26, s24
 8001f76:	edd2 7a00 	vldr	s15, [r2]
 8001f7a:	eee9 6aad 	vfma.f32	s13, s19, s27
 8001f7e:	ee67 faaf 	vmul.f32	s31, s15, s31
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001f82:	ee29 7a8c 	vmul.f32	s14, s19, s24
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001f86:	eea6 9aef 	vfms.f32	s18, s13, s31
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001f8a:	ee6e 7a69 	vnmul.f32	s15, s28, s19
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001f8e:	eead 7a6d 	vfms.f32	s14, s26, s27
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001f92:	eeea 7aad 	vfma.f32	s15, s21, s27
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001f96:	eeae 7a09 	vfma.f32	s14, s28, s18
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001f9a:	eeec 7a09 	vfma.f32	s15, s24, s18
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001f9e:	eea7 8a2f 	vfma.f32	s16, s14, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001fa2:	ee2c ca6a 	vnmul.f32	s24, s24, s21
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001fa6:	eef0 8a4d 	vmov.f32	s17, s26
 8001faa:	eee7 8aaf 	vfma.f32	s17, s15, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001fae:	eead ca0e 	vfma.f32	s24, s26, s28
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001fb2:	ee68 7a08 	vmul.f32	s15, s16, s16
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001fb6:	eead ca89 	vfma.f32	s24, s27, s18
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001fba:	eee8 7aa8 	vfma.f32	s15, s17, s17
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001fbe:	eeec 9a2f 	vfma.f32	s19, s24, s31
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001fc2:	eee9 7a09 	vfma.f32	s15, s18, s18
 8001fc6:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8001fca:	ee17 0a90 	vmov	r0, s15
 8001fce:	f7fe fa6b 	bl	80004a8 <__aeabi_f2d>
 8001fd2:	ec41 0b10 	vmov	d0, r0, r1
 8001fd6:	f006 f819 	bl	800800c <sqrt>
 8001fda:	ec51 0b10 	vmov	r0, r1, d0
 8001fde:	f7fe fcf5 	bl	80009cc <__aeabi_d2f>
	norm = 1.0f / norm;
 8001fe2:	ee07 0a90 	vmov	s15, r0
 8001fe6:	eecf 7a27 	vdiv.f32	s15, s30, s15
	q[1] = q2 * norm;
 8001fea:	ee68 8aa7 	vmul.f32	s17, s17, s15
	q[2] = q3 * norm;
 8001fee:	ee28 8a27 	vmul.f32	s16, s16, s15
	q[3] = q4 * norm;
 8001ff2:	ee69 9aa7 	vmul.f32	s19, s19, s15
	q[0] = q1 * norm;
 8001ff6:	ee29 9a27 	vmul.f32	s18, s18, s15
	q[1] = q2 * norm;
 8001ffa:	edc4 8a01 	vstr	s17, [r4, #4]
	q[2] = q3 * norm;
 8001ffe:	ed84 8a02 	vstr	s16, [r4, #8]
	q[3] = q4 * norm;
 8002002:	edc4 9a03 	vstr	s19, [r4, #12]
	q[0] = q1 * norm;
 8002006:	ed84 9a00 	vstr	s18, [r4]
}
 800200a:	b009      	add	sp, #36	; 0x24
 800200c:	ecbd 8b10 	vpop	{d8-d15}
 8002010:	bd30      	pop	{r4, r5, pc}
 8002012:	bf00      	nop
 8002014:	20000010 	.word	0x20000010
 8002018:	20000280 	.word	0x20000280
 800201c:	20000284 	.word	0x20000284

08002020 <calc_RollPitchYaw>:
void calc_RollPitchYaw(int counter_value) {
 8002020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002024:	ed2d 8b04 	vpush	{d8-d9}
 8002028:	ee08 0a10 	vmov	s16, r0
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 800202c:	223a      	movs	r2, #58	; 0x3a
 800202e:	21d1      	movs	r1, #209	; 0xd1
 8002030:	20d0      	movs	r0, #208	; 0xd0
 8002032:	f7fe ffb9 	bl	8000fa8 <readByte>
 8002036:	f010 0f01 	tst.w	r0, #1
 800203a:	f040 8157 	bne.w	80022ec <calc_RollPitchYaw+0x2cc>
	Now = counter_value;
 800203e:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 8002042:	4b95      	ldr	r3, [pc, #596]	; (8002298 <calc_RollPitchYaw+0x278>)
 8002044:	edc3 7a00 	vstr	s15, [r3]
	if(Now - lastUpdate < 0){
 8002048:	4b94      	ldr	r3, [pc, #592]	; (800229c <calc_RollPitchYaw+0x27c>)
 800204a:	edd3 6a00 	vldr	s13, [r3]
 800204e:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8002052:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	f100 8201 	bmi.w	8002460 <calc_RollPitchYaw+0x440>
	deltat = (float) ((Now - lastUpdate) * (1 / (TIMER_CLK_FREQ / 100.0f))); // set integration time by time elapsed since last filter update
 800205e:	eddf 6a90 	vldr	s13, [pc, #576]	; 80022a0 <calc_RollPitchYaw+0x280>
 8002062:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002066:	4b8f      	ldr	r3, [pc, #572]	; (80022a4 <calc_RollPitchYaw+0x284>)
 8002068:	ed83 7a00 	vstr	s14, [r3]
	lastUpdate = Now;
 800206c:	4b8b      	ldr	r3, [pc, #556]	; (800229c <calc_RollPitchYaw+0x27c>)
 800206e:	edc3 7a00 	vstr	s15, [r3]
	sum += deltat;
 8002072:	4e8d      	ldr	r6, [pc, #564]	; (80022a8 <calc_RollPitchYaw+0x288>)
 8002074:	edd6 7a00 	vldr	s15, [r6]
 8002078:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <calc_RollPitchYaw+0x284>)
 800207a:	ed93 7a00 	vldr	s14, [r3]
 800207e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002082:	edc6 7a00 	vstr	s15, [r6]
	sumCount++;
 8002086:	4d89      	ldr	r5, [pc, #548]	; (80022ac <calc_RollPitchYaw+0x28c>)
 8002088:	682b      	ldr	r3, [r5, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	602b      	str	r3, [r5, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 800208e:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <calc_RollPitchYaw+0x290>)
 8002090:	edd3 1a00 	vldr	s3, [r3]
 8002094:	eddf 7a87 	vldr	s15, [pc, #540]	; 80022b4 <calc_RollPitchYaw+0x294>
 8002098:	ee61 1aa7 	vmul.f32	s3, s3, s15
 800209c:	4b86      	ldr	r3, [pc, #536]	; (80022b8 <calc_RollPitchYaw+0x298>)
 800209e:	ed93 2a00 	vldr	s4, [r3]
 80020a2:	ee22 2a27 	vmul.f32	s4, s4, s15
 80020a6:	4b85      	ldr	r3, [pc, #532]	; (80022bc <calc_RollPitchYaw+0x29c>)
 80020a8:	edd3 2a00 	vldr	s5, [r3]
 80020ac:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80020b0:	eddf 7a83 	vldr	s15, [pc, #524]	; 80022c0 <calc_RollPitchYaw+0x2a0>
 80020b4:	4b83      	ldr	r3, [pc, #524]	; (80022c4 <calc_RollPitchYaw+0x2a4>)
 80020b6:	ed93 4a00 	vldr	s8, [r3]
 80020ba:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <calc_RollPitchYaw+0x2a8>)
 80020bc:	edd3 3a00 	vldr	s7, [r3]
 80020c0:	4b82      	ldr	r3, [pc, #520]	; (80022cc <calc_RollPitchYaw+0x2ac>)
 80020c2:	ed93 3a00 	vldr	s6, [r3]
 80020c6:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 80020ca:	ee82 2a27 	vdiv.f32	s4, s4, s15
 80020ce:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <calc_RollPitchYaw+0x2b0>)
 80020d4:	ed93 1a00 	vldr	s2, [r3]
 80020d8:	4b7e      	ldr	r3, [pc, #504]	; (80022d4 <calc_RollPitchYaw+0x2b4>)
 80020da:	edd3 0a00 	vldr	s1, [r3]
 80020de:	4b7e      	ldr	r3, [pc, #504]	; (80022d8 <calc_RollPitchYaw+0x2b8>)
 80020e0:	ed93 0a00 	vldr	s0, [r3]
 80020e4:	f7ff fe1e 	bl	8001d24 <MahonyQuaternionUpdate>
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 80020e8:	4c7c      	ldr	r4, [pc, #496]	; (80022dc <calc_RollPitchYaw+0x2bc>)
 80020ea:	edd4 9a01 	vldr	s19, [r4, #4]
 80020ee:	ed94 9a02 	vldr	s18, [r4, #8]
 80020f2:	ee29 7a89 	vmul.f32	s14, s19, s18
 80020f6:	ed94 8a00 	vldr	s16, [r4]
 80020fa:	edd4 8a03 	vldr	s17, [r4, #12]
 80020fe:	ee68 7a28 	vmul.f32	s15, s16, s17
 8002102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002106:	ee17 0a90 	vmov	r0, s15
 800210a:	f7fe f9cd 	bl	80004a8 <__aeabi_f2d>
 800210e:	4680      	mov	r8, r0
 8002110:	4689      	mov	r9, r1
 8002112:	ee28 8a08 	vmul.f32	s16, s16, s16
 8002116:	ee69 9aa9 	vmul.f32	s19, s19, s19
 800211a:	ee38 8a29 	vadd.f32	s16, s16, s19
 800211e:	ee29 9a09 	vmul.f32	s18, s18, s18
 8002122:	ee38 8a49 	vsub.f32	s16, s16, s18
 8002126:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800212a:	ee78 7a68 	vsub.f32	s15, s16, s17
 800212e:	ee17 0a90 	vmov	r0, s15
 8002132:	f7fe f9b9 	bl	80004a8 <__aeabi_f2d>
 8002136:	4682      	mov	sl, r0
 8002138:	468b      	mov	fp, r1
 800213a:	4642      	mov	r2, r8
 800213c:	464b      	mov	r3, r9
 800213e:	4640      	mov	r0, r8
 8002140:	4649      	mov	r1, r9
 8002142:	f7fe f853 	bl	80001ec <__adddf3>
 8002146:	ec4b ab11 	vmov	d1, sl, fp
 800214a:	ec41 0b10 	vmov	d0, r0, r1
 800214e:	f005 fdeb 	bl	8007d28 <atan2>
 8002152:	ec51 0b10 	vmov	r0, r1, d0
 8002156:	f7fe fc39 	bl	80009cc <__aeabi_d2f>
 800215a:	4f61      	ldr	r7, [pc, #388]	; (80022e0 <calc_RollPitchYaw+0x2c0>)
 800215c:	6038      	str	r0, [r7, #0]
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 800215e:	ed94 7a01 	vldr	s14, [r4, #4]
 8002162:	edd4 7a03 	vldr	s15, [r4, #12]
 8002166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800216a:	edd4 7a00 	vldr	s15, [r4]
 800216e:	edd4 6a02 	vldr	s13, [r4, #8]
 8002172:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217a:	ee17 0a90 	vmov	r0, s15
 800217e:	f7fe f993 	bl	80004a8 <__aeabi_f2d>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	f7fe f831 	bl	80001ec <__adddf3>
 800218a:	ec41 0b10 	vmov	d0, r0, r1
 800218e:	f005 fd73 	bl	8007c78 <asin>
 8002192:	ec51 0b10 	vmov	r0, r1, d0
 8002196:	f7fe fc19 	bl	80009cc <__aeabi_d2f>
 800219a:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80022e8 <calc_RollPitchYaw+0x2c8>
 800219e:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80021a2:	f8ca 0000 	str.w	r0, [sl]
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 80021a6:	ed94 8a00 	vldr	s16, [r4]
 80021aa:	edd4 9a01 	vldr	s19, [r4, #4]
 80021ae:	ee28 7a29 	vmul.f32	s14, s16, s19
 80021b2:	ed94 9a02 	vldr	s18, [r4, #8]
 80021b6:	edd4 8a03 	vldr	s17, [r4, #12]
 80021ba:	ee69 7a28 	vmul.f32	s15, s18, s17
 80021be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c2:	ee17 0a90 	vmov	r0, s15
 80021c6:	f7fe f96f 	bl	80004a8 <__aeabi_f2d>
 80021ca:	4680      	mov	r8, r0
 80021cc:	4689      	mov	r9, r1
 80021ce:	ee28 8a08 	vmul.f32	s16, s16, s16
 80021d2:	ee69 9aa9 	vmul.f32	s19, s19, s19
 80021d6:	ee38 8a69 	vsub.f32	s16, s16, s19
 80021da:	ee29 9a09 	vmul.f32	s18, s18, s18
 80021de:	ee38 8a49 	vsub.f32	s16, s16, s18
 80021e2:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80021e6:	ee78 7a28 	vadd.f32	s15, s16, s17
 80021ea:	ee17 0a90 	vmov	r0, s15
 80021ee:	f7fe f95b 	bl	80004a8 <__aeabi_f2d>
 80021f2:	ec41 0b18 	vmov	d8, r0, r1
 80021f6:	4642      	mov	r2, r8
 80021f8:	464b      	mov	r3, r9
 80021fa:	4640      	mov	r0, r8
 80021fc:	4649      	mov	r1, r9
 80021fe:	f7fd fff5 	bl	80001ec <__adddf3>
 8002202:	eeb0 1a48 	vmov.f32	s2, s16
 8002206:	eef0 1a68 	vmov.f32	s3, s17
 800220a:	ec41 0b10 	vmov	d0, r0, r1
 800220e:	f005 fd8b 	bl	8007d28 <atan2>
 8002212:	ec51 0b10 	vmov	r0, r1, d0
 8002216:	f7fe fbd9 	bl	80009cc <__aeabi_d2f>
 800221a:	4604      	mov	r4, r0
	pitch *= 180.0 / PI;
 800221c:	f8da 0000 	ldr.w	r0, [sl]
 8002220:	f7fe f942 	bl	80004a8 <__aeabi_f2d>
 8002224:	a318      	add	r3, pc, #96	; (adr r3, 8002288 <calc_RollPitchYaw+0x268>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	f7fe f995 	bl	8000558 <__aeabi_dmul>
 800222e:	f7fe fbcd 	bl	80009cc <__aeabi_d2f>
 8002232:	f8ca 0000 	str.w	r0, [sl]
	yaw *= 180.0 / PI;
 8002236:	6838      	ldr	r0, [r7, #0]
 8002238:	f7fe f936 	bl	80004a8 <__aeabi_f2d>
 800223c:	a312      	add	r3, pc, #72	; (adr r3, 8002288 <calc_RollPitchYaw+0x268>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	f7fe f989 	bl	8000558 <__aeabi_dmul>
 8002246:	f7fe fbc1 	bl	80009cc <__aeabi_d2f>
	yaw -=  -0.27; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 800224a:	f7fe f92d 	bl	80004a8 <__aeabi_f2d>
 800224e:	a310      	add	r3, pc, #64	; (adr r3, 8002290 <calc_RollPitchYaw+0x270>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fd ffca 	bl	80001ec <__adddf3>
 8002258:	f7fe fbb8 	bl	80009cc <__aeabi_d2f>
 800225c:	6038      	str	r0, [r7, #0]
	roll *= 180.0 / PI;
 800225e:	4620      	mov	r0, r4
 8002260:	f7fe f922 	bl	80004a8 <__aeabi_f2d>
 8002264:	a308      	add	r3, pc, #32	; (adr r3, 8002288 <calc_RollPitchYaw+0x268>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	f7fe f975 	bl	8000558 <__aeabi_dmul>
 800226e:	f7fe fbad 	bl	80009cc <__aeabi_d2f>
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <calc_RollPitchYaw+0x2c4>)
 8002274:	6018      	str	r0, [r3, #0]
	sum = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	6033      	str	r3, [r6, #0]
	sumCount = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	602b      	str	r3, [r5, #0]
}
 800227e:	ecbd 8b04 	vpop	{d8-d9}
 8002282:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002286:	bf00      	nop
 8002288:	0d03cf26 	.word	0x0d03cf26
 800228c:	404ca5dc 	.word	0x404ca5dc
 8002290:	147ae148 	.word	0x147ae148
 8002294:	3fd147ae 	.word	0x3fd147ae
 8002298:	20000270 	.word	0x20000270
 800229c:	2000029c 	.word	0x2000029c
 80022a0:	358637bd 	.word	0x358637bd
 80022a4:	20000280 	.word	0x20000280
 80022a8:	200002b8 	.word	0x200002b8
 80022ac:	200002bc 	.word	0x200002bc
 80022b0:	200003e0 	.word	0x200003e0
 80022b4:	40490fdb 	.word	0x40490fdb
 80022b8:	20000398 	.word	0x20000398
 80022bc:	200003bc 	.word	0x200003bc
 80022c0:	43340000 	.word	0x43340000
 80022c4:	200003c4 	.word	0x200003c4
 80022c8:	200003e8 	.word	0x200003e8
 80022cc:	200003ac 	.word	0x200003ac
 80022d0:	2000039c 	.word	0x2000039c
 80022d4:	200003e4 	.word	0x200003e4
 80022d8:	200003b0 	.word	0x200003b0
 80022dc:	20000010 	.word	0x20000010
 80022e0:	200003c8 	.word	0x200003c8
 80022e4:	200003d8 	.word	0x200003d8
 80022e8:	200003d4 	.word	0x200003d4
		readAccelData(accelCount);  // Read the x/y/z adc values
 80022ec:	4c63      	ldr	r4, [pc, #396]	; (800247c <calc_RollPitchYaw+0x45c>)
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7fe ff22 	bl	8001138 <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 80022f4:	f9b4 3000 	ldrsh.w	r3, [r4]
 80022f8:	ee07 3a10 	vmov	s14, r3
 80022fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002300:	4b5f      	ldr	r3, [pc, #380]	; (8002480 <calc_RollPitchYaw+0x460>)
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800230a:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <calc_RollPitchYaw+0x464>)
 800230c:	edd3 6a00 	vldr	s13, [r3]
 8002310:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002314:	4a5c      	ldr	r2, [pc, #368]	; (8002488 <calc_RollPitchYaw+0x468>)
 8002316:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 800231a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800231e:	ee07 2a10 	vmov	s14, r2
 8002322:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002326:	ee27 7a87 	vmul.f32	s14, s15, s14
 800232a:	edd3 6a01 	vldr	s13, [r3, #4]
 800232e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002332:	4a56      	ldr	r2, [pc, #344]	; (800248c <calc_RollPitchYaw+0x46c>)
 8002334:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 8002338:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800233c:	ee07 2a10 	vmov	s14, r2
 8002340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002348:	ed93 7a02 	vldr	s14, [r3, #8]
 800234c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002350:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <calc_RollPitchYaw+0x470>)
 8002352:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 8002356:	4c4f      	ldr	r4, [pc, #316]	; (8002494 <calc_RollPitchYaw+0x474>)
 8002358:	4620      	mov	r0, r4
 800235a:	f7fe ff0f 	bl	800117c <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 800235e:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002362:	ee07 3a10 	vmov	s14, r3
 8002366:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800236a:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <calc_RollPitchYaw+0x478>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002374:	4b49      	ldr	r3, [pc, #292]	; (800249c <calc_RollPitchYaw+0x47c>)
 8002376:	edd3 6a00 	vldr	s13, [r3]
 800237a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800237e:	4a48      	ldr	r2, [pc, #288]	; (80024a0 <calc_RollPitchYaw+0x480>)
 8002380:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8002384:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8002388:	ee07 2a10 	vmov	s14, r2
 800238c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002390:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002394:	edd3 6a01 	vldr	s13, [r3, #4]
 8002398:	ee37 7a66 	vsub.f32	s14, s14, s13
 800239c:	4a41      	ldr	r2, [pc, #260]	; (80024a4 <calc_RollPitchYaw+0x484>)
 800239e:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 80023a2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80023a6:	ee07 2a10 	vmov	s14, r2
 80023aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80023b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <calc_RollPitchYaw+0x488>)
 80023bc:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 80023c0:	4c3a      	ldr	r4, [pc, #232]	; (80024ac <calc_RollPitchYaw+0x48c>)
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7fe fefc 	bl	80011c0 <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 80023c8:	f9b4 3000 	ldrsh.w	r3, [r4]
 80023cc:	ee06 3a90 	vmov	s13, r3
 80023d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <calc_RollPitchYaw+0x490>)
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023de:	4a35      	ldr	r2, [pc, #212]	; (80024b4 <calc_RollPitchYaw+0x494>)
 80023e0:	ed92 7a00 	vldr	s14, [r2]
 80023e4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80023e8:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <calc_RollPitchYaw+0x498>)
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	ee76 6ac7 	vsub.f32	s13, s13, s14
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80023f2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80023f6:	ee07 1a10 	vmov	s14, r1
 80023fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002402:	ed92 6a01 	vldr	s12, [r2, #4]
 8002406:	ee27 7a06 	vmul.f32	s14, s14, s12
 800240a:	ed93 6a01 	vldr	s12, [r3, #4]
 800240e:	ee37 7a46 	vsub.f32	s14, s14, s12
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 8002412:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8002416:	ee06 1a10 	vmov	s12, r1
 800241a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800241e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002422:	ed92 6a02 	vldr	s12, [r2, #8]
 8002426:	ee67 7a86 	vmul.f32	s15, s15, s12
 800242a:	ed93 6a02 	vldr	s12, [r3, #8]
 800242e:	ee77 7ac6 	vsub.f32	s15, s15, s12
	      mx *= magScale[0];
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <calc_RollPitchYaw+0x49c>)
 8002434:	ed93 6a00 	vldr	s12, [r3]
 8002438:	ee66 6a86 	vmul.f32	s13, s13, s12
 800243c:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <calc_RollPitchYaw+0x4a0>)
 800243e:	edc2 6a00 	vstr	s13, [r2]
	      my *= magScale[1];
 8002442:	edd3 6a01 	vldr	s13, [r3, #4]
 8002446:	ee27 7a26 	vmul.f32	s14, s14, s13
 800244a:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <calc_RollPitchYaw+0x4a4>)
 800244c:	ed82 7a00 	vstr	s14, [r2]
	      mz *= magScale[2];
 8002450:	ed93 7a02 	vldr	s14, [r3, #8]
 8002454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <calc_RollPitchYaw+0x4a8>)
 800245a:	edc3 7a00 	vstr	s15, [r3]
 800245e:	e5ee      	b.n	800203e <calc_RollPitchYaw+0x1e>
		deltat = (float) (((65535-lastUpdate)+Now) * (1 / (TIMER_CLK_FREQ / 100.0f)));
 8002460:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80024cc <calc_RollPitchYaw+0x4ac>
 8002464:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002468:	ee37 7a87 	vadd.f32	s14, s15, s14
 800246c:	eddf 6a18 	vldr	s13, [pc, #96]	; 80024d0 <calc_RollPitchYaw+0x4b0>
 8002470:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002474:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <calc_RollPitchYaw+0x4b4>)
 8002476:	ed83 7a00 	vstr	s14, [r3]
 800247a:	e5f7      	b.n	800206c <calc_RollPitchYaw+0x4c>
 800247c:	20000324 	.word	0x20000324
 8002480:	200003b4 	.word	0x200003b4
 8002484:	20000274 	.word	0x20000274
 8002488:	200003b0 	.word	0x200003b0
 800248c:	200003e4 	.word	0x200003e4
 8002490:	2000039c 	.word	0x2000039c
 8002494:	200003a4 	.word	0x200003a4
 8002498:	200003c0 	.word	0x200003c0
 800249c:	20000290 	.word	0x20000290
 80024a0:	200003e0 	.word	0x200003e0
 80024a4:	20000398 	.word	0x20000398
 80024a8:	200003bc 	.word	0x200003bc
 80024ac:	200003cc 	.word	0x200003cc
 80024b0:	200003dc 	.word	0x200003dc
 80024b4:	200002a0 	.word	0x200002a0
 80024b8:	200002ac 	.word	0x200002ac
 80024bc:	20000004 	.word	0x20000004
 80024c0:	200003e8 	.word	0x200003e8
 80024c4:	200003ac 	.word	0x200003ac
 80024c8:	200003c4 	.word	0x200003c4
 80024cc:	477fff00 	.word	0x477fff00
 80024d0:	358637bd 	.word	0x358637bd
 80024d4:	20000280 	.word	0x20000280

080024d8 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 80024d8:	ee70 0a60 	vsub.f32	s1, s0, s1
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <pid_calculate_roll+0xac>)
 80024de:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 80024e2:	4b29      	ldr	r3, [pc, #164]	; (8002588 <pid_calculate_roll+0xb0>)
 80024e4:	edd3 6a00 	vldr	s13, [r3]
 80024e8:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80024ec:	4b27      	ldr	r3, [pc, #156]	; (800258c <pid_calculate_roll+0xb4>)
 80024ee:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <pid_calculate_roll+0xb8>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80024fc:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002594 <pid_calculate_roll+0xbc>
 8002500:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <pid_calculate_roll+0xc0>)
 8002506:	ed93 7a00 	vldr	s14, [r3]
 800250a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800250e:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <pid_calculate_roll+0xc4>)
 8002514:	ed93 6a00 	vldr	s12, [r3]
 8002518:	ee30 6ac6 	vsub.f32	s12, s1, s12
 800251c:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002520:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <pid_calculate_roll+0xc8>)
 8002522:	ed92 6a00 	vldr	s12, [r2]
 8002526:	ee27 7a06 	vmul.f32	s14, s14, s12
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <pid_calculate_roll+0xcc>)
 800252c:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8002530:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8002534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <pid_calculate_roll+0xd0>)
 800253e:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <pid_calculate_roll+0xd4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	425a      	negs	r2, r3
 8002548:	ee07 2a10 	vmov	s14, r2
 800254c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	d40c      	bmi.n	8002574 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 800255a:	ee07 3a10 	vmov	s14, r3
 800255e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	dd06      	ble.n	800257a <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <pid_calculate_roll+0xd0>)
 800256e:	ed83 7a00 	vstr	s14, [r3]
 8002572:	e002      	b.n	800257a <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <pid_calculate_roll+0xd0>)
 8002576:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <pid_calculate_roll+0xd0>)
 800257c:	ed93 0a00 	vldr	s0, [r3]
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200002cc 	.word	0x200002cc
 8002588:	20000038 	.word	0x20000038
 800258c:	20000400 	.word	0x20000400
 8002590:	20000034 	.word	0x20000034
 8002594:	3b012912 	.word	0x3b012912
 8002598:	2000040c 	.word	0x2000040c
 800259c:	200002d0 	.word	0x200002d0
 80025a0:	20000030 	.word	0x20000030
 80025a4:	200003ec 	.word	0x200003ec
 80025a8:	200002d4 	.word	0x200002d4
 80025ac:	2000003c 	.word	0x2000003c

080025b0 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <reset_pid_roll+0x14>)
 80025b4:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <reset_pid_roll+0x18>)
 80025b8:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 80025ba:	4a04      	ldr	r2, [pc, #16]	; (80025cc <reset_pid_roll+0x1c>)
 80025bc:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <reset_pid_roll+0x20>)
 80025c0:	6013      	str	r3, [r2, #0]

}
 80025c2:	4770      	bx	lr
 80025c4:	20000400 	.word	0x20000400
 80025c8:	2000040c 	.word	0x2000040c
 80025cc:	200003ec 	.word	0x200003ec
 80025d0:	200002d4 	.word	0x200002d4

080025d4 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 80025d4:	ee70 0a60 	vsub.f32	s1, s0, s1
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <pid_calculate_pitch+0xac>)
 80025da:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 80025de:	4b29      	ldr	r3, [pc, #164]	; (8002684 <pid_calculate_pitch+0xb0>)
 80025e0:	edd3 6a00 	vldr	s13, [r3]
 80025e4:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <pid_calculate_pitch+0xb4>)
 80025ea:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <pid_calculate_pitch+0xb8>)
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80025f8:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002690 <pid_calculate_pitch+0xbc>
 80025fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <pid_calculate_pitch+0xc0>)
 8002602:	ed93 7a00 	vldr	s14, [r3]
 8002606:	ee77 7a87 	vadd.f32	s15, s15, s14
 800260a:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <pid_calculate_pitch+0xc4>)
 8002610:	ed93 6a00 	vldr	s12, [r3]
 8002614:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002618:	ee86 7a25 	vdiv.f32	s14, s12, s11
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <pid_calculate_pitch+0xc8>)
 800261e:	ed92 6a00 	vldr	s12, [r2]
 8002622:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002626:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <pid_calculate_pitch+0xcc>)
 8002628:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 800262c:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8002630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <pid_calculate_pitch+0xd0>)
 800263a:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 800263e:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <pid_calculate_pitch+0xd4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	425a      	negs	r2, r3
 8002644:	ee07 2a10 	vmov	s14, r2
 8002648:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800264c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	d40c      	bmi.n	8002670 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8002656:	ee07 3a10 	vmov	s14, r3
 800265a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800265e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002666:	dd06      	ble.n	8002676 <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <pid_calculate_pitch+0xd0>)
 800266a:	ed83 7a00 	vstr	s14, [r3]
 800266e:	e002      	b.n	8002676 <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <pid_calculate_pitch+0xd0>)
 8002672:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <pid_calculate_pitch+0xd0>)
 8002678:	ed93 0a00 	vldr	s0, [r3]
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	200002c0 	.word	0x200002c0
 8002684:	20000028 	.word	0x20000028
 8002688:	200003f8 	.word	0x200003f8
 800268c:	20000024 	.word	0x20000024
 8002690:	3b012912 	.word	0x3b012912
 8002694:	200003fc 	.word	0x200003fc
 8002698:	200002c4 	.word	0x200002c4
 800269c:	20000020 	.word	0x20000020
 80026a0:	200003f0 	.word	0x200003f0
 80026a4:	200002c8 	.word	0x200002c8
 80026a8:	2000002c 	.word	0x2000002c

080026ac <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <reset_pid_pitch+0x14>)
 80026b0:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 80026b2:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <reset_pid_pitch+0x18>)
 80026b4:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 80026b6:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <reset_pid_pitch+0x1c>)
 80026b8:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 80026ba:	4a04      	ldr	r2, [pc, #16]	; (80026cc <reset_pid_pitch+0x20>)
 80026bc:	6013      	str	r3, [r2, #0]

}
 80026be:	4770      	bx	lr
 80026c0:	200003f8 	.word	0x200003f8
 80026c4:	200003fc 	.word	0x200003fc
 80026c8:	200003f0 	.word	0x200003f0
 80026cc:	200002c8 	.word	0x200002c8

080026d0 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = IMU_yaw_value - yaw_setpoint;
 80026d0:	ee70 0a60 	vsub.f32	s1, s0, s1
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <pid_calculate_yaw+0xac>)
 80026d6:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 80026da:	4b29      	ldr	r3, [pc, #164]	; (8002780 <pid_calculate_yaw+0xb0>)
 80026dc:	edd3 6a00 	vldr	s13, [r3]
 80026e0:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <pid_calculate_yaw+0xb4>)
 80026e6:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 80026ea:	4b27      	ldr	r3, [pc, #156]	; (8002788 <pid_calculate_yaw+0xb8>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80026f4:	eddf 5a25 	vldr	s11, [pc, #148]	; 800278c <pid_calculate_yaw+0xbc>
 80026f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <pid_calculate_yaw+0xc0>)
 80026fe:	ed93 7a00 	vldr	s14, [r3]
 8002702:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002706:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 800270a:	4b22      	ldr	r3, [pc, #136]	; (8002794 <pid_calculate_yaw+0xc4>)
 800270c:	ed93 6a00 	vldr	s12, [r3]
 8002710:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002714:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002718:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <pid_calculate_yaw+0xc8>)
 800271a:	ed92 6a00 	vldr	s12, [r2]
 800271e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002722:	4a1e      	ldr	r2, [pc, #120]	; (800279c <pid_calculate_yaw+0xcc>)
 8002724:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 8002728:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 800272c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <pid_calculate_yaw+0xd0>)
 8002736:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <pid_calculate_yaw+0xd4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	425a      	negs	r2, r3
 8002740:	ee07 2a10 	vmov	s14, r2
 8002744:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	d40c      	bmi.n	800276c <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 8002752:	ee07 3a10 	vmov	s14, r3
 8002756:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800275a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	dd06      	ble.n	8002772 <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <pid_calculate_yaw+0xd0>)
 8002766:	ed83 7a00 	vstr	s14, [r3]
 800276a:	e002      	b.n	8002772 <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <pid_calculate_yaw+0xd0>)
 800276e:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <pid_calculate_yaw+0xd0>)
 8002774:	ed93 0a00 	vldr	s0, [r3]
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	200002d8 	.word	0x200002d8
 8002780:	20000048 	.word	0x20000048
 8002784:	20000408 	.word	0x20000408
 8002788:	20000044 	.word	0x20000044
 800278c:	3b012912 	.word	0x3b012912
 8002790:	20000404 	.word	0x20000404
 8002794:	200002dc 	.word	0x200002dc
 8002798:	20000040 	.word	0x20000040
 800279c:	200003f4 	.word	0x200003f4
 80027a0:	200002e0 	.word	0x200002e0
 80027a4:	2000004c 	.word	0x2000004c

080027a8 <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <reset_pid_yaw+0x14>)
 80027ac:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 80027ae:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <reset_pid_yaw+0x18>)
 80027b0:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 80027b2:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <reset_pid_yaw+0x1c>)
 80027b4:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <reset_pid_yaw+0x20>)
 80027b8:	6013      	str	r3, [r2, #0]

}
 80027ba:	4770      	bx	lr
 80027bc:	20000408 	.word	0x20000408
 80027c0:	20000404 	.word	0x20000404
 80027c4:	200003f4 	.word	0x200003f4
 80027c8:	200002e0 	.word	0x200002e0

080027cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027cc:	b510      	push	{r4, lr}
 80027ce:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_InitTick+0x40>)
 80027d2:	7818      	ldrb	r0, [r3, #0]
 80027d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d8:	fbb3 f3f0 	udiv	r3, r3, r0
 80027dc:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <HAL_InitTick+0x44>)
 80027de:	6810      	ldr	r0, [r2, #0]
 80027e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80027e4:	f000 fa44 	bl	8002c70 <HAL_SYSTICK_Config>
 80027e8:	b968      	cbnz	r0, 8002806 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ea:	2c0f      	cmp	r4, #15
 80027ec:	d901      	bls.n	80027f2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80027ee:	2001      	movs	r0, #1
 80027f0:	e00a      	b.n	8002808 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f2:	2200      	movs	r2, #0
 80027f4:	4621      	mov	r1, r4
 80027f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027fa:	f000 f9f7 	bl	8002bec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_InitTick+0x48>)
 8002800:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002802:	2000      	movs	r0, #0
 8002804:	e000      	b.n	8002808 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002806:	2001      	movs	r0, #1
}
 8002808:	bd10      	pop	{r4, pc}
 800280a:	bf00      	nop
 800280c:	20000050 	.word	0x20000050
 8002810:	20000078 	.word	0x20000078
 8002814:	20000054 	.word	0x20000054

08002818 <HAL_Init>:
{
 8002818:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_Init+0x30>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002822:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800282a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002832:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002834:	2003      	movs	r0, #3
 8002836:	f000 f9c7 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800283a:	2000      	movs	r0, #0
 800283c:	f7ff ffc6 	bl	80027cc <HAL_InitTick>
  HAL_MspInit();
 8002840:	f002 fc0e 	bl	8005060 <HAL_MspInit>
}
 8002844:	2000      	movs	r0, #0
 8002846:	bd08      	pop	{r3, pc}
 8002848:	40023c00 	.word	0x40023c00

0800284c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800284c:	4a03      	ldr	r2, [pc, #12]	; (800285c <HAL_IncTick+0x10>)
 800284e:	6811      	ldr	r1, [r2, #0]
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_IncTick+0x14>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	440b      	add	r3, r1
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000410 	.word	0x20000410
 8002860:	20000050 	.word	0x20000050

08002864 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002864:	4b01      	ldr	r3, [pc, #4]	; (800286c <HAL_GetTick+0x8>)
 8002866:	6818      	ldr	r0, [r3, #0]
}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000410 	.word	0x20000410

08002870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002870:	b538      	push	{r3, r4, r5, lr}
 8002872:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff fff6 	bl	8002864 <HAL_GetTick>
 8002878:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800287e:	d002      	beq.n	8002886 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <HAL_Delay+0x24>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002886:	f7ff ffed 	bl	8002864 <HAL_GetTick>
 800288a:	1b40      	subs	r0, r0, r5
 800288c:	42a0      	cmp	r0, r4
 800288e:	d3fa      	bcc.n	8002886 <HAL_Delay+0x16>
  {
  }
}
 8002890:	bd38      	pop	{r3, r4, r5, pc}
 8002892:	bf00      	nop
 8002894:	20000050 	.word	0x20000050

08002898 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002898:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <ADC_Init+0x12c>)
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80028a0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	6841      	ldr	r1, [r0, #4]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028aa:	6802      	ldr	r2, [r0, #0]
 80028ac:	6853      	ldr	r3, [r2, #4]
 80028ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028b4:	6802      	ldr	r2, [r0, #0]
 80028b6:	6853      	ldr	r3, [r2, #4]
 80028b8:	6901      	ldr	r1, [r0, #16]
 80028ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80028be:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028c0:	6802      	ldr	r2, [r0, #0]
 80028c2:	6853      	ldr	r3, [r2, #4]
 80028c4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80028c8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ca:	6802      	ldr	r2, [r0, #0]
 80028cc:	6853      	ldr	r3, [r2, #4]
 80028ce:	6881      	ldr	r1, [r0, #8]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028d4:	6802      	ldr	r2, [r0, #0]
 80028d6:	6893      	ldr	r3, [r2, #8]
 80028d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028dc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028de:	6802      	ldr	r2, [r0, #0]
 80028e0:	6893      	ldr	r3, [r2, #8]
 80028e2:	68c1      	ldr	r1, [r0, #12]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80028ea:	4b37      	ldr	r3, [pc, #220]	; (80029c8 <ADC_Init+0x130>)
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d04b      	beq.n	8002988 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f0:	6802      	ldr	r2, [r0, #0]
 80028f2:	6893      	ldr	r3, [r2, #8]
 80028f4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80028f8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028fa:	6802      	ldr	r2, [r0, #0]
 80028fc:	6893      	ldr	r3, [r2, #8]
 80028fe:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002900:	430b      	orrs	r3, r1
 8002902:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002904:	6802      	ldr	r2, [r0, #0]
 8002906:	6893      	ldr	r3, [r2, #8]
 8002908:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800290c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800290e:	6802      	ldr	r2, [r0, #0]
 8002910:	6893      	ldr	r3, [r2, #8]
 8002912:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002914:	430b      	orrs	r3, r1
 8002916:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002918:	6802      	ldr	r2, [r0, #0]
 800291a:	6893      	ldr	r3, [r2, #8]
 800291c:	f023 0302 	bic.w	r3, r3, #2
 8002920:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002922:	6802      	ldr	r2, [r0, #0]
 8002924:	6893      	ldr	r3, [r2, #8]
 8002926:	7e01      	ldrb	r1, [r0, #24]
 8002928:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800292c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800292e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d133      	bne.n	800299e <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002936:	6802      	ldr	r2, [r0, #0]
 8002938:	6853      	ldr	r3, [r2, #4]
 800293a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800293e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002940:	6802      	ldr	r2, [r0, #0]
 8002942:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002944:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002948:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800294a:	6801      	ldr	r1, [r0, #0]
 800294c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800294e:	69c2      	ldr	r2, [r0, #28]
 8002950:	3a01      	subs	r2, #1
 8002952:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002956:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002958:	6802      	ldr	r2, [r0, #0]
 800295a:	6893      	ldr	r3, [r2, #8]
 800295c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002960:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002962:	6802      	ldr	r2, [r0, #0]
 8002964:	6893      	ldr	r3, [r2, #8]
 8002966:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800296a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800296e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002970:	6802      	ldr	r2, [r0, #0]
 8002972:	6893      	ldr	r3, [r2, #8]
 8002974:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002978:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800297a:	6802      	ldr	r2, [r0, #0]
 800297c:	6893      	ldr	r3, [r2, #8]
 800297e:	6941      	ldr	r1, [r0, #20]
 8002980:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002984:	6093      	str	r3, [r2, #8]
}
 8002986:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002988:	6802      	ldr	r2, [r0, #0]
 800298a:	6893      	ldr	r3, [r2, #8]
 800298c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002990:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002992:	6802      	ldr	r2, [r0, #0]
 8002994:	6893      	ldr	r3, [r2, #8]
 8002996:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800299a:	6093      	str	r3, [r2, #8]
 800299c:	e7bc      	b.n	8002918 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800299e:	6802      	ldr	r2, [r0, #0]
 80029a0:	6853      	ldr	r3, [r2, #4]
 80029a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029a6:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029a8:	6802      	ldr	r2, [r0, #0]
 80029aa:	6853      	ldr	r3, [r2, #4]
 80029ac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029b0:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029b2:	6801      	ldr	r1, [r0, #0]
 80029b4:	684b      	ldr	r3, [r1, #4]
 80029b6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80029b8:	3a01      	subs	r2, #1
 80029ba:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80029be:	604b      	str	r3, [r1, #4]
 80029c0:	e7be      	b.n	8002940 <ADC_Init+0xa8>
 80029c2:	bf00      	nop
 80029c4:	40012300 	.word	0x40012300
 80029c8:	0f000001 	.word	0x0f000001

080029cc <HAL_ADC_Init>:
  if(hadc == NULL)
 80029cc:	b338      	cbz	r0, 8002a1e <HAL_ADC_Init+0x52>
{
 80029ce:	b510      	push	{r4, lr}
 80029d0:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80029d4:	b143      	cbz	r3, 80029e8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029d8:	f013 0f10 	tst.w	r3, #16
 80029dc:	d00b      	beq.n	80029f6 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80029de:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80029e0:	2300      	movs	r3, #0
 80029e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80029e6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80029e8:	f002 fb56 	bl	8005098 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80029ec:	2300      	movs	r3, #0
 80029ee:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80029f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80029f4:	e7ef      	b.n	80029d6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80029f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029fc:	f023 0302 	bic.w	r3, r3, #2
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7ff ff46 	bl	8002898 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002a10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a12:	f023 0303 	bic.w	r3, r3, #3
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6423      	str	r3, [r4, #64]	; 0x40
 8002a1c:	e7e0      	b.n	80029e0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
}
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_ADC_ConfigChannel>:
{
 8002a24:	b430      	push	{r4, r5}
 8002a26:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002a2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	f000 80bd 	beq.w	8002bb0 <HAL_ADC_ConfigChannel+0x18c>
 8002a36:	2301      	movs	r3, #1
 8002a38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a3c:	680b      	ldr	r3, [r1, #0]
 8002a3e:	2b09      	cmp	r3, #9
 8002a40:	d93e      	bls.n	8002ac0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a42:	6805      	ldr	r5, [r0, #0]
 8002a44:	68ea      	ldr	r2, [r5, #12]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a4c:	3b1e      	subs	r3, #30
 8002a4e:	2407      	movs	r4, #7
 8002a50:	fa04 f303 	lsl.w	r3, r4, r3
 8002a54:	ea22 0303 	bic.w	r3, r2, r3
 8002a58:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a5a:	6805      	ldr	r5, [r0, #0]
 8002a5c:	68ea      	ldr	r2, [r5, #12]
 8002a5e:	688c      	ldr	r4, [r1, #8]
 8002a60:	880b      	ldrh	r3, [r1, #0]
 8002a62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a66:	3b1e      	subs	r3, #30
 8002a68:	fa04 f303 	lsl.w	r3, r4, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8002a70:	684b      	ldr	r3, [r1, #4]
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d83a      	bhi.n	8002aec <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a76:	6805      	ldr	r5, [r0, #0]
 8002a78:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002a7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a7e:	3b05      	subs	r3, #5
 8002a80:	241f      	movs	r4, #31
 8002a82:	fa04 f303 	lsl.w	r3, r4, r3
 8002a86:	ea22 0303 	bic.w	r3, r2, r3
 8002a8a:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a8c:	6805      	ldr	r5, [r0, #0]
 8002a8e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002a90:	684b      	ldr	r3, [r1, #4]
 8002a92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a96:	3b05      	subs	r3, #5
 8002a98:	880c      	ldrh	r4, [r1, #0]
 8002a9a:	fa04 f303 	lsl.w	r3, r4, r3
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002aa2:	6802      	ldr	r2, [r0, #0]
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_ADC_ConfigChannel+0x190>)
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d050      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002aaa:	6802      	ldr	r2, [r0, #0]
 8002aac:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_ADC_ConfigChannel+0x190>)
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d059      	beq.n	8002b66 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002ab8:	4618      	mov	r0, r3
}
 8002aba:	b002      	add	sp, #8
 8002abc:	bc30      	pop	{r4, r5}
 8002abe:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ac0:	6805      	ldr	r5, [r0, #0]
 8002ac2:	692a      	ldr	r2, [r5, #16]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002aca:	2407      	movs	r4, #7
 8002acc:	fa04 f303 	lsl.w	r3, r4, r3
 8002ad0:	ea22 0303 	bic.w	r3, r2, r3
 8002ad4:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ad6:	6805      	ldr	r5, [r0, #0]
 8002ad8:	692a      	ldr	r2, [r5, #16]
 8002ada:	688c      	ldr	r4, [r1, #8]
 8002adc:	880b      	ldrh	r3, [r1, #0]
 8002ade:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002ae2:	fa04 f303 	lsl.w	r3, r4, r3
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	612b      	str	r3, [r5, #16]
 8002aea:	e7c1      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8002aec:	2b0c      	cmp	r3, #12
 8002aee:	d816      	bhi.n	8002b1e <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002af0:	6805      	ldr	r5, [r0, #0]
 8002af2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002af4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002af8:	3b23      	subs	r3, #35	; 0x23
 8002afa:	241f      	movs	r4, #31
 8002afc:	fa04 f303 	lsl.w	r3, r4, r3
 8002b00:	ea22 0303 	bic.w	r3, r2, r3
 8002b04:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b06:	6805      	ldr	r5, [r0, #0]
 8002b08:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002b0a:	684b      	ldr	r3, [r1, #4]
 8002b0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b10:	3b23      	subs	r3, #35	; 0x23
 8002b12:	880c      	ldrh	r4, [r1, #0]
 8002b14:	fa04 f303 	lsl.w	r3, r4, r3
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	632b      	str	r3, [r5, #48]	; 0x30
 8002b1c:	e7c1      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b1e:	6805      	ldr	r5, [r0, #0]
 8002b20:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002b22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b26:	3b41      	subs	r3, #65	; 0x41
 8002b28:	241f      	movs	r4, #31
 8002b2a:	fa04 f303 	lsl.w	r3, r4, r3
 8002b2e:	ea22 0303 	bic.w	r3, r2, r3
 8002b32:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b34:	6805      	ldr	r5, [r0, #0]
 8002b36:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002b38:	684b      	ldr	r3, [r1, #4]
 8002b3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b3e:	3b41      	subs	r3, #65	; 0x41
 8002b40:	880c      	ldrh	r4, [r1, #0]
 8002b42:	fa04 f303 	lsl.w	r3, r4, r3
 8002b46:	4313      	orrs	r3, r2
 8002b48:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002b4a:	e7aa      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b4c:	680b      	ldr	r3, [r1, #0]
 8002b4e:	2b12      	cmp	r3, #18
 8002b50:	d1ab      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b52:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <HAL_ADC_ConfigChannel+0x194>)
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002b5a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	e7a1      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b66:	680b      	ldr	r3, [r1, #0]
 8002b68:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <HAL_ADC_ConfigChannel+0x198>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d001      	beq.n	8002b72 <HAL_ADC_ConfigChannel+0x14e>
 8002b6e:	2b11      	cmp	r3, #17
 8002b70:	d19f      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_ADC_ConfigChannel+0x194>)
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002b7a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b82:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002b84:	680a      	ldr	r2, [r1, #0]
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_ADC_ConfigChannel+0x198>)
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d192      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_ADC_ConfigChannel+0x19c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <HAL_ADC_ConfigChannel+0x1a0>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0c9b      	lsrs	r3, r3, #18
 8002b98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b9c:	005a      	lsls	r2, r3, #1
 8002b9e:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8002ba0:	e002      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 8002ba2:	9b01      	ldr	r3, [sp, #4]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002ba8:	9b01      	ldr	r3, [sp, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f9      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x17e>
 8002bae:	e780      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8002bb0:	2002      	movs	r0, #2
 8002bb2:	e782      	b.n	8002aba <HAL_ADC_ConfigChannel+0x96>
 8002bb4:	40012000 	.word	0x40012000
 8002bb8:	40012300 	.word	0x40012300
 8002bbc:	10000012 	.word	0x10000012
 8002bc0:	20000078 	.word	0x20000078
 8002bc4:	431bde83 	.word	0x431bde83

08002bc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc8:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002bca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bd0:	041b      	lsls	r3, r3, #16
 8002bd2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd4:	0200      	lsls	r0, r0, #8
 8002bd6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bda:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002bdc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002be0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002be4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HAL_NVIC_SetPriority+0x60>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf6:	f1c3 0407 	rsb	r4, r3, #7
 8002bfa:	2c04      	cmp	r4, #4
 8002bfc:	bf28      	it	cs
 8002bfe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c00:	1d1d      	adds	r5, r3, #4
 8002c02:	2d06      	cmp	r5, #6
 8002c04:	d918      	bls.n	8002c38 <HAL_NVIC_SetPriority+0x4c>
 8002c06:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c0c:	fa05 f404 	lsl.w	r4, r5, r4
 8002c10:	ea21 0104 	bic.w	r1, r1, r4
 8002c14:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c16:	fa05 f303 	lsl.w	r3, r5, r3
 8002c1a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002c20:	2800      	cmp	r0, #0
 8002c22:	db0b      	blt.n	8002c3c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c24:	0109      	lsls	r1, r1, #4
 8002c26:	b2c9      	uxtb	r1, r1
 8002c28:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002c2c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002c30:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c34:	bc30      	pop	{r4, r5}
 8002c36:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e7e5      	b.n	8002c08 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	f000 000f 	and.w	r0, r0, #15
 8002c40:	0109      	lsls	r1, r1, #4
 8002c42:	b2c9      	uxtb	r1, r1
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <HAL_NVIC_SetPriority+0x64>)
 8002c46:	5419      	strb	r1, [r3, r0]
 8002c48:	e7f4      	b.n	8002c34 <HAL_NVIC_SetPriority+0x48>
 8002c4a:	bf00      	nop
 8002c4c:	e000ed00 	.word	0xe000ed00
 8002c50:	e000ed14 	.word	0xe000ed14

08002c54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c54:	2800      	cmp	r0, #0
 8002c56:	db07      	blt.n	8002c68 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c58:	f000 021f 	and.w	r2, r0, #31
 8002c5c:	0940      	lsrs	r0, r0, #5
 8002c5e:	2301      	movs	r3, #1
 8002c60:	4093      	lsls	r3, r2
 8002c62:	4a02      	ldr	r2, [pc, #8]	; (8002c6c <HAL_NVIC_EnableIRQ+0x18>)
 8002c64:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000e100 	.word	0xe000e100

08002c70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	3801      	subs	r0, #1
 8002c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002c76:	d20a      	bcs.n	8002c8e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_SYSTICK_Config+0x24>)
 8002c7a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7c:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <HAL_SYSTICK_Config+0x28>)
 8002c7e:	21f0      	movs	r1, #240	; 0xf0
 8002c80:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c84:	2000      	movs	r0, #0
 8002c86:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c88:	2207      	movs	r2, #7
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c8e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000e010 	.word	0xe000e010
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	f200 80c5 	bhi.w	8002e2e <HAL_GPIO_Init+0x192>
{
 8002ca4:	b4f0      	push	{r4, r5, r6, r7}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	e039      	b.n	8002d1e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002caa:	2204      	movs	r2, #4
 8002cac:	e000      	b.n	8002cb0 <HAL_GPIO_Init+0x14>
 8002cae:	2200      	movs	r2, #0
 8002cb0:	40b2      	lsls	r2, r6
 8002cb2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb4:	3402      	adds	r4, #2
 8002cb6:	4e5e      	ldr	r6, [pc, #376]	; (8002e30 <HAL_GPIO_Init+0x194>)
 8002cb8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cbc:	4a5d      	ldr	r2, [pc, #372]	; (8002e34 <HAL_GPIO_Init+0x198>)
 8002cbe:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	43ea      	mvns	r2, r5
 8002cc2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cc6:	684f      	ldr	r7, [r1, #4]
 8002cc8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002ccc:	d001      	beq.n	8002cd2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002cce:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002cd2:	4c58      	ldr	r4, [pc, #352]	; (8002e34 <HAL_GPIO_Init+0x198>)
 8002cd4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002cd6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002cd8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cdc:	684f      	ldr	r7, [r1, #4]
 8002cde:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002ce2:	d001      	beq.n	8002ce8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002ce4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002ce8:	4c52      	ldr	r4, [pc, #328]	; (8002e34 <HAL_GPIO_Init+0x198>)
 8002cea:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cec:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002cee:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf2:	684f      	ldr	r7, [r1, #4]
 8002cf4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002cf8:	d001      	beq.n	8002cfe <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002cfa:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002cfe:	4c4d      	ldr	r4, [pc, #308]	; (8002e34 <HAL_GPIO_Init+0x198>)
 8002d00:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002d02:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d06:	684e      	ldr	r6, [r1, #4]
 8002d08:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002d0c:	d001      	beq.n	8002d12 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002d0e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002d12:	4c48      	ldr	r4, [pc, #288]	; (8002e34 <HAL_GPIO_Init+0x198>)
 8002d14:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	3301      	adds	r3, #1
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	f200 8085 	bhi.w	8002e28 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 8002d1e:	2201      	movs	r2, #1
 8002d20:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d22:	680c      	ldr	r4, [r1, #0]
 8002d24:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002d28:	42aa      	cmp	r2, r5
 8002d2a:	d1f4      	bne.n	8002d16 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d2c:	684c      	ldr	r4, [r1, #4]
 8002d2e:	2c02      	cmp	r4, #2
 8002d30:	d001      	beq.n	8002d36 <HAL_GPIO_Init+0x9a>
 8002d32:	2c12      	cmp	r4, #18
 8002d34:	d110      	bne.n	8002d58 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8002d36:	08de      	lsrs	r6, r3, #3
 8002d38:	3608      	adds	r6, #8
 8002d3a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d3e:	f003 0407 	and.w	r4, r3, #7
 8002d42:	00a7      	lsls	r7, r4, #2
 8002d44:	240f      	movs	r4, #15
 8002d46:	40bc      	lsls	r4, r7
 8002d48:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d4c:	690c      	ldr	r4, [r1, #16]
 8002d4e:	40bc      	lsls	r4, r7
 8002d50:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8002d54:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002d58:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d5a:	005f      	lsls	r7, r3, #1
 8002d5c:	2603      	movs	r6, #3
 8002d5e:	40be      	lsls	r6, r7
 8002d60:	43f6      	mvns	r6, r6
 8002d62:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d66:	684c      	ldr	r4, [r1, #4]
 8002d68:	f004 0403 	and.w	r4, r4, #3
 8002d6c:	40bc      	lsls	r4, r7
 8002d6e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002d72:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d74:	684c      	ldr	r4, [r1, #4]
 8002d76:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8002d7a:	f1bc 0f01 	cmp.w	ip, #1
 8002d7e:	d903      	bls.n	8002d88 <HAL_GPIO_Init+0xec>
 8002d80:	2c11      	cmp	r4, #17
 8002d82:	d001      	beq.n	8002d88 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d84:	2c12      	cmp	r4, #18
 8002d86:	d110      	bne.n	8002daa <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8002d88:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d8a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8e:	68cc      	ldr	r4, [r1, #12]
 8002d90:	40bc      	lsls	r4, r7
 8002d92:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8002d96:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d98:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9a:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d9e:	684c      	ldr	r4, [r1, #4]
 8002da0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002da4:	409c      	lsls	r4, r3
 8002da6:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8002da8:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002daa:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dac:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dae:	688a      	ldr	r2, [r1, #8]
 8002db0:	40ba      	lsls	r2, r7
 8002db2:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8002db4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002db6:	684a      	ldr	r2, [r1, #4]
 8002db8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002dbc:	d0ab      	beq.n	8002d16 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	9201      	str	r2, [sp, #4]
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_GPIO_Init+0x19c>)
 8002dc4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002dc6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002dca:	6454      	str	r4, [r2, #68]	; 0x44
 8002dcc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002dce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002dd2:	9201      	str	r2, [sp, #4]
 8002dd4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd6:	089c      	lsrs	r4, r3, #2
 8002dd8:	1ca6      	adds	r6, r4, #2
 8002dda:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <HAL_GPIO_Init+0x194>)
 8002ddc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	0096      	lsls	r6, r2, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	40b2      	lsls	r2, r6
 8002dea:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dee:	4a13      	ldr	r2, [pc, #76]	; (8002e3c <HAL_GPIO_Init+0x1a0>)
 8002df0:	4290      	cmp	r0, r2
 8002df2:	f43f af5c 	beq.w	8002cae <HAL_GPIO_Init+0x12>
 8002df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dfa:	4290      	cmp	r0, r2
 8002dfc:	d00e      	beq.n	8002e1c <HAL_GPIO_Init+0x180>
 8002dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e02:	4290      	cmp	r0, r2
 8002e04:	d00c      	beq.n	8002e20 <HAL_GPIO_Init+0x184>
 8002e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e0a:	4290      	cmp	r0, r2
 8002e0c:	d00a      	beq.n	8002e24 <HAL_GPIO_Init+0x188>
 8002e0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e12:	4290      	cmp	r0, r2
 8002e14:	f43f af49 	beq.w	8002caa <HAL_GPIO_Init+0xe>
 8002e18:	2207      	movs	r2, #7
 8002e1a:	e749      	b.n	8002cb0 <HAL_GPIO_Init+0x14>
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	e747      	b.n	8002cb0 <HAL_GPIO_Init+0x14>
 8002e20:	2202      	movs	r2, #2
 8002e22:	e745      	b.n	8002cb0 <HAL_GPIO_Init+0x14>
 8002e24:	2203      	movs	r2, #3
 8002e26:	e743      	b.n	8002cb0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002e28:	b002      	add	sp, #8
 8002e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	4770      	bx	lr
 8002e30:	40013800 	.word	0x40013800
 8002e34:	40013c00 	.word	0x40013c00
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020000 	.word	0x40020000

08002e40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	b912      	cbnz	r2, 8002e48 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e42:	0409      	lsls	r1, r1, #16
 8002e44:	6181      	str	r1, [r0, #24]
  }
}
 8002e46:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002e48:	6181      	str	r1, [r0, #24]
 8002e4a:	4770      	bx	lr

08002e4c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002e4c:	6943      	ldr	r3, [r0, #20]
 8002e4e:	ea31 0303 	bics.w	r3, r1, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e54:	6181      	str	r1, [r0, #24]
  }
}
 8002e56:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e58:	0409      	lsls	r1, r1, #16
 8002e5a:	6181      	str	r1, [r0, #24]
 8002e5c:	4770      	bx	lr
	...

08002e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e60:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4203      	tst	r3, r0
 8002e68:	d100      	bne.n	8002e6c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002e6a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e6c:	4b02      	ldr	r3, [pc, #8]	; (8002e78 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002e6e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e70:	f002 f8e8 	bl	8005044 <HAL_GPIO_EXTI_Callback>
}
 8002e74:	e7f9      	b.n	8002e6a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002e76:	bf00      	nop
 8002e78:	40013c00 	.word	0x40013c00

08002e7c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7c:	6803      	ldr	r3, [r0, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002e84:	d011      	beq.n	8002eaa <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	2220      	movs	r2, #32
 8002e92:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e96:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e9a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002e9c:	f042 0204 	orr.w	r2, r2, #4
 8002ea0:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	4770      	bx	lr
  }
  return HAL_OK;
 8002eaa:	2000      	movs	r0, #0
}
 8002eac:	4770      	bx	lr

08002eae <I2C_WaitOnFlagUntilTimeout>:
{
 8002eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb0:	4606      	mov	r6, r0
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	4617      	mov	r7, r2
 8002eb6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb8:	e022      	b.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7ff fcd3 	bl	8002864 <HAL_GetTick>
 8002ebe:	9b06      	ldr	r3, [sp, #24]
 8002ec0:	1ac0      	subs	r0, r0, r3
 8002ec2:	42a8      	cmp	r0, r5
 8002ec4:	d800      	bhi.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8002ec6:	b9dd      	cbnz	r5, 8002f00 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ed2:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ed6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002ed8:	f042 0220 	orr.w	r2, r2, #32
 8002edc:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ede:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	e01a      	b.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee6:	6833      	ldr	r3, [r6, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	ea24 0303 	bic.w	r3, r4, r3
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	429f      	cmp	r7, r3
 8002ef8:	d10f      	bne.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002efe:	d1dc      	bne.n	8002eba <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f00:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d0ee      	beq.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x38>
 8002f08:	6833      	ldr	r3, [r6, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	ea24 0303 	bic.w	r3, r4, r3
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	e7ed      	b.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8002f1a:	2000      	movs	r0, #0
}
 8002f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f20:	4604      	mov	r4, r0
 8002f22:	460d      	mov	r5, r1
 8002f24:	4616      	mov	r6, r2
 8002f26:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f28:	e03c      	b.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f30:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f38:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f48:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f4a:	f042 0204 	orr.w	r2, r2, #4
 8002f4e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002f50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
 8002f56:	e033      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f58:	f7ff fc84 	bl	8002864 <HAL_GetTick>
 8002f5c:	1bc0      	subs	r0, r0, r7
 8002f5e:	42b0      	cmp	r0, r6
 8002f60:	d800      	bhi.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8002f62:	b9fe      	cbnz	r6, 8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f74:	f042 0220 	orr.w	r2, r2, #32
 8002f78:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002f7e:	2001      	movs	r0, #1
 8002f80:	e01e      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	ea25 0303 	bic.w	r3, r5, r3
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3300      	adds	r3, #0
 8002f8e:	bf18      	it	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	b1a3      	cbz	r3, 8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002f9c:	d1c5      	bne.n	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8002fa2:	d1d9      	bne.n	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d0ea      	beq.n	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	ea25 0303 	bic.w	r3, r5, r3
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3300      	adds	r3, #0
 8002fb8:	bf18      	it	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	e7e9      	b.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8002fbe:	2000      	movs	r0, #0
}
 8002fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fc4 <I2C_MasterRequestWrite>:
{
 8002fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	4604      	mov	r4, r0
 8002fca:	460f      	mov	r7, r1
 8002fcc:	4615      	mov	r5, r2
 8002fce:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d00d      	beq.n	8002ff2 <I2C_MasterRequestWrite+0x2e>
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d00b      	beq.n	8002ff2 <I2C_MasterRequestWrite+0x2e>
 8002fda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fde:	d008      	beq.n	8002ff2 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fe0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002fe2:	2b12      	cmp	r3, #18
 8002fe4:	d10a      	bne.n	8002ffc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe6:	6802      	ldr	r2, [r0, #0]
 8002fe8:	6813      	ldr	r3, [r2, #0]
 8002fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e004      	b.n	8002ffc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	6813      	ldr	r3, [r2, #0]
 8002ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffa:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ffc:	9600      	str	r6, [sp, #0]
 8002ffe:	462b      	mov	r3, r5
 8003000:	2200      	movs	r2, #0
 8003002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003006:	4620      	mov	r0, r4
 8003008:	f7ff ff51 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 800300c:	bb18      	cbnz	r0, 8003056 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800300e:	6923      	ldr	r3, [r4, #16]
 8003010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003014:	d10d      	bne.n	8003032 <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800301c:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301e:	4633      	mov	r3, r6
 8003020:	462a      	mov	r2, r5
 8003022:	4910      	ldr	r1, [pc, #64]	; (8003064 <I2C_MasterRequestWrite+0xa0>)
 8003024:	4620      	mov	r0, r4
 8003026:	f7ff ff7a 	bl	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	b1a0      	cbz	r0, 8003058 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e012      	b.n	8003058 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003032:	11fb      	asrs	r3, r7, #7
 8003034:	6822      	ldr	r2, [r4, #0]
 8003036:	f003 0306 	and.w	r3, r3, #6
 800303a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800303e:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003040:	4633      	mov	r3, r6
 8003042:	462a      	mov	r2, r5
 8003044:	4908      	ldr	r1, [pc, #32]	; (8003068 <I2C_MasterRequestWrite+0xa4>)
 8003046:	4620      	mov	r0, r4
 8003048:	f7ff ff69 	bl	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800304c:	b938      	cbnz	r0, 800305e <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	b2ff      	uxtb	r7, r7
 8003052:	611f      	str	r7, [r3, #16]
 8003054:	e7e3      	b.n	800301e <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
}
 8003058:	4618      	mov	r0, r3
 800305a:	b003      	add	sp, #12
 800305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e7fa      	b.n	8003058 <I2C_MasterRequestWrite+0x94>
 8003062:	bf00      	nop
 8003064:	00010002 	.word	0x00010002
 8003068:	00010008 	.word	0x00010008

0800306c <I2C_MasterRequestRead>:
{
 800306c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	4604      	mov	r4, r0
 8003074:	460d      	mov	r5, r1
 8003076:	4616      	mov	r6, r2
 8003078:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800307a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307c:	6801      	ldr	r1, [r0, #0]
 800307e:	680b      	ldr	r3, [r1, #0]
 8003080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003084:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003086:	2a08      	cmp	r2, #8
 8003088:	d00d      	beq.n	80030a6 <I2C_MasterRequestRead+0x3a>
 800308a:	2a01      	cmp	r2, #1
 800308c:	d00b      	beq.n	80030a6 <I2C_MasterRequestRead+0x3a>
 800308e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003092:	d008      	beq.n	80030a6 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003094:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003096:	2b11      	cmp	r3, #17
 8003098:	d10a      	bne.n	80030b0 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309a:	6802      	ldr	r2, [r0, #0]
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	e004      	b.n	80030b0 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a6:	6822      	ldr	r2, [r4, #0]
 80030a8:	6813      	ldr	r3, [r2, #0]
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b0:	9700      	str	r7, [sp, #0]
 80030b2:	4633      	mov	r3, r6
 80030b4:	2200      	movs	r2, #0
 80030b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7ff fef7 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d149      	bne.n	8003158 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c4:	6923      	ldr	r3, [r4, #16]
 80030c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ca:	d10f      	bne.n	80030ec <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	f045 0501 	orr.w	r5, r5, #1
 80030d2:	b2ed      	uxtb	r5, r5
 80030d4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d6:	463b      	mov	r3, r7
 80030d8:	4632      	mov	r2, r6
 80030da:	4923      	ldr	r1, [pc, #140]	; (8003168 <I2C_MasterRequestRead+0xfc>)
 80030dc:	4620      	mov	r0, r4
 80030de:	f7ff ff1e 	bl	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2800      	cmp	r0, #0
 80030e6:	d038      	beq.n	800315a <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e036      	b.n	800315a <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030ec:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80030f0:	f008 0806 	and.w	r8, r8, #6
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80030fa:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030fc:	463b      	mov	r3, r7
 80030fe:	4632      	mov	r2, r6
 8003100:	491a      	ldr	r1, [pc, #104]	; (800316c <I2C_MasterRequestRead+0x100>)
 8003102:	4620      	mov	r0, r4
 8003104:	f7ff ff0b 	bl	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003108:	b108      	cbz	r0, 800310e <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e025      	b.n	800315a <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	b2ed      	uxtb	r5, r5
 8003112:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003114:	463b      	mov	r3, r7
 8003116:	4632      	mov	r2, r6
 8003118:	4913      	ldr	r1, [pc, #76]	; (8003168 <I2C_MasterRequestRead+0xfc>)
 800311a:	4620      	mov	r0, r4
 800311c:	f7ff feff 	bl	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003120:	b108      	cbz	r0, 8003126 <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e019      	b.n	800315a <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003126:	2200      	movs	r2, #0
 8003128:	9203      	str	r2, [sp, #12]
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	6959      	ldr	r1, [r3, #20]
 800312e:	9103      	str	r1, [sp, #12]
 8003130:	6999      	ldr	r1, [r3, #24]
 8003132:	9103      	str	r1, [sp, #12]
 8003134:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800313c:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800313e:	9700      	str	r7, [sp, #0]
 8003140:	4633      	mov	r3, r6
 8003142:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003146:	4620      	mov	r0, r4
 8003148:	f7ff feb1 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 800314c:	b948      	cbnz	r0, 8003162 <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8003154:	6113      	str	r3, [r2, #16]
 8003156:	e7be      	b.n	80030d6 <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
}
 800315a:	4618      	mov	r0, r3
 800315c:	b004      	add	sp, #16
 800315e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e7f9      	b.n	800315a <I2C_MasterRequestRead+0xee>
 8003166:	bf00      	nop
 8003168:	00010002 	.word	0x00010002
 800316c:	00010008 	.word	0x00010008

08003170 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	4604      	mov	r4, r0
 8003174:	460d      	mov	r5, r1
 8003176:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003180:	d11c      	bne.n	80031bc <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003182:	4620      	mov	r0, r4
 8003184:	f7ff fe7a 	bl	8002e7c <I2C_IsAcknowledgeFailed>
 8003188:	b9d0      	cbnz	r0, 80031c0 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800318a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800318e:	d0f3      	beq.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003190:	f7ff fb68 	bl	8002864 <HAL_GetTick>
 8003194:	1b80      	subs	r0, r0, r6
 8003196:	42a8      	cmp	r0, r5
 8003198:	d801      	bhi.n	800319e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800319a:	2d00      	cmp	r5, #0
 800319c:	d1ec      	bne.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800319e:	2300      	movs	r3, #0
 80031a0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031a2:	2220      	movs	r2, #32
 80031a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80031ae:	f042 0220 	orr.w	r2, r2, #32
 80031b2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80031b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80031b8:	2001      	movs	r0, #1
 80031ba:	e000      	b.n	80031be <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80031bc:	2000      	movs	r0, #0
}
 80031be:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80031c0:	2001      	movs	r0, #1
 80031c2:	e7fc      	b.n	80031be <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080031c4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	4604      	mov	r4, r0
 80031c8:	460d      	mov	r5, r1
 80031ca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f013 0f04 	tst.w	r3, #4
 80031d4:	d11c      	bne.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d6:	4620      	mov	r0, r4
 80031d8:	f7ff fe50 	bl	8002e7c <I2C_IsAcknowledgeFailed>
 80031dc:	b9d0      	cbnz	r0, 8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80031de:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80031e2:	d0f3      	beq.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7ff fb3e 	bl	8002864 <HAL_GetTick>
 80031e8:	1b80      	subs	r0, r0, r6
 80031ea:	42a8      	cmp	r0, r5
 80031ec:	d801      	bhi.n	80031f2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80031ee:	2d00      	cmp	r5, #0
 80031f0:	d1ec      	bne.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031f6:	2220      	movs	r2, #32
 80031f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003200:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003202:	f042 0220 	orr.w	r2, r2, #32
 8003206:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003208:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800320c:	2001      	movs	r0, #1
 800320e:	e000      	b.n	8003212 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003210:	2000      	movs	r0, #0
}
 8003212:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003214:	2001      	movs	r0, #1
 8003216:	e7fc      	b.n	8003212 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003218 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	4605      	mov	r5, r0
 800321c:	460c      	mov	r4, r1
 800321e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003228:	d129      	bne.n	800327e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	f012 0f10 	tst.w	r2, #16
 8003230:	d115      	bne.n	800325e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7ff fb17 	bl	8002864 <HAL_GetTick>
 8003236:	1b80      	subs	r0, r0, r6
 8003238:	42a0      	cmp	r0, r4
 800323a:	d801      	bhi.n	8003240 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 800323c:	2c00      	cmp	r4, #0
 800323e:	d1ef      	bne.n	8003220 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003240:	2300      	movs	r3, #0
 8003242:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003244:	2220      	movs	r2, #32
 8003246:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003250:	f042 0220 	orr.w	r2, r2, #32
 8003254:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003256:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800325a:	2001      	movs	r0, #1
}
 800325c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800325e:	f06f 0210 	mvn.w	r2, #16
 8003262:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003264:	2300      	movs	r3, #0
 8003266:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	2220      	movs	r2, #32
 800326a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003272:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003274:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003276:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800327a:	2001      	movs	r0, #1
 800327c:	e7ee      	b.n	800325c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 800327e:	2000      	movs	r0, #0
 8003280:	e7ec      	b.n	800325c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08003284 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003284:	2800      	cmp	r0, #0
 8003286:	f000 80be 	beq.w	8003406 <HAL_I2C_Init+0x182>
{
 800328a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003292:	2b00      	cmp	r3, #0
 8003294:	d06b      	beq.n	800336e <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003296:	2324      	movs	r3, #36	; 0x24
 8003298:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a6:	f000 fe8b 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032aa:	6862      	ldr	r2, [r4, #4]
 80032ac:	4b58      	ldr	r3, [pc, #352]	; (8003410 <HAL_I2C_Init+0x18c>)
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d862      	bhi.n	8003378 <HAL_I2C_Init+0xf4>
 80032b2:	4b58      	ldr	r3, [pc, #352]	; (8003414 <HAL_I2C_Init+0x190>)
 80032b4:	4298      	cmp	r0, r3
 80032b6:	bf8c      	ite	hi
 80032b8:	2300      	movhi	r3, #0
 80032ba:	2301      	movls	r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 80a4 	bne.w	800340a <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 80032c2:	4b55      	ldr	r3, [pc, #340]	; (8003418 <HAL_I2C_Init+0x194>)
 80032c4:	fba3 2300 	umull	r2, r3, r3, r0
 80032c8:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ca:	6821      	ldr	r1, [r4, #0]
 80032cc:	684a      	ldr	r2, [r1, #4]
 80032ce:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80032d2:	431a      	orrs	r2, r3
 80032d4:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032d6:	6825      	ldr	r5, [r4, #0]
 80032d8:	6a2a      	ldr	r2, [r5, #32]
 80032da:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80032de:	6866      	ldr	r6, [r4, #4]
 80032e0:	494b      	ldr	r1, [pc, #300]	; (8003410 <HAL_I2C_Init+0x18c>)
 80032e2:	428e      	cmp	r6, r1
 80032e4:	d84e      	bhi.n	8003384 <HAL_I2C_Init+0x100>
 80032e6:	3301      	adds	r3, #1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032ec:	6825      	ldr	r5, [r4, #0]
 80032ee:	69e9      	ldr	r1, [r5, #28]
 80032f0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80032f4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80032f8:	6863      	ldr	r3, [r4, #4]
 80032fa:	4a45      	ldr	r2, [pc, #276]	; (8003410 <HAL_I2C_Init+0x18c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d84b      	bhi.n	8003398 <HAL_I2C_Init+0x114>
 8003300:	3801      	subs	r0, #1
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fbb0 f3f3 	udiv	r3, r0, r3
 8003308:	3301      	adds	r3, #1
 800330a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330e:	2b04      	cmp	r3, #4
 8003310:	bf38      	it	cc
 8003312:	2304      	movcc	r3, #4
 8003314:	430b      	orrs	r3, r1
 8003316:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003318:	6821      	ldr	r1, [r4, #0]
 800331a:	680b      	ldr	r3, [r1, #0]
 800331c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003320:	69e2      	ldr	r2, [r4, #28]
 8003322:	6a20      	ldr	r0, [r4, #32]
 8003324:	4302      	orrs	r2, r0
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800332a:	6821      	ldr	r1, [r4, #0]
 800332c:	688b      	ldr	r3, [r1, #8]
 800332e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003336:	6922      	ldr	r2, [r4, #16]
 8003338:	68e0      	ldr	r0, [r4, #12]
 800333a:	4302      	orrs	r2, r0
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003340:	6821      	ldr	r1, [r4, #0]
 8003342:	68cb      	ldr	r3, [r1, #12]
 8003344:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003348:	6962      	ldr	r2, [r4, #20]
 800334a:	69a0      	ldr	r0, [r4, #24]
 800334c:	4302      	orrs	r2, r0
 800334e:	4313      	orrs	r3, r2
 8003350:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	2000      	movs	r0, #0
 800335e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003360:	2320      	movs	r3, #32
 8003362:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003366:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800336c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800336e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003372:	f001 fec5 	bl	8005100 <HAL_I2C_MspInit>
 8003376:	e78e      	b.n	8003296 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003378:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_I2C_Init+0x198>)
 800337a:	4298      	cmp	r0, r3
 800337c:	bf8c      	ite	hi
 800337e:	2300      	movhi	r3, #0
 8003380:	2301      	movls	r3, #1
 8003382:	e79b      	b.n	80032bc <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003384:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4924      	ldr	r1, [pc, #144]	; (8003420 <HAL_I2C_Init+0x19c>)
 800338e:	fba1 1303 	umull	r1, r3, r1, r3
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	3301      	adds	r3, #1
 8003396:	e7a7      	b.n	80032e8 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003398:	68a2      	ldr	r2, [r4, #8]
 800339a:	b9ba      	cbnz	r2, 80033cc <HAL_I2C_Init+0x148>
 800339c:	1e46      	subs	r6, r0, #1
 800339e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80033a2:	fbb6 f6f7 	udiv	r6, r6, r7
 80033a6:	3601      	adds	r6, #1
 80033a8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80033ac:	fab6 f686 	clz	r6, r6
 80033b0:	0976      	lsrs	r6, r6, #5
 80033b2:	bb36      	cbnz	r6, 8003402 <HAL_I2C_Init+0x17e>
 80033b4:	b9c2      	cbnz	r2, 80033e8 <HAL_I2C_Init+0x164>
 80033b6:	3801      	subs	r0, #1
 80033b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80033bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80033c6:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80033ca:	e7a3      	b.n	8003314 <HAL_I2C_Init+0x90>
 80033cc:	1e46      	subs	r6, r0, #1
 80033ce:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80033d2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80033d6:	fbb6 f6f7 	udiv	r6, r6, r7
 80033da:	3601      	adds	r6, #1
 80033dc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80033e0:	fab6 f686 	clz	r6, r6
 80033e4:	0976      	lsrs	r6, r6, #5
 80033e6:	e7e4      	b.n	80033b2 <HAL_I2C_Init+0x12e>
 80033e8:	3801      	subs	r0, #1
 80033ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033f2:	fbb0 f2f3 	udiv	r2, r0, r3
 80033f6:	3201      	adds	r2, #1
 80033f8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80033fc:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003400:	e788      	b.n	8003314 <HAL_I2C_Init+0x90>
 8003402:	2301      	movs	r3, #1
 8003404:	e786      	b.n	8003314 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003406:	2001      	movs	r0, #1
}
 8003408:	4770      	bx	lr
    return HAL_ERROR;
 800340a:	2001      	movs	r0, #1
 800340c:	e7ae      	b.n	800336c <HAL_I2C_Init+0xe8>
 800340e:	bf00      	nop
 8003410:	000186a0 	.word	0x000186a0
 8003414:	001e847f 	.word	0x001e847f
 8003418:	431bde83 	.word	0x431bde83
 800341c:	003d08ff 	.word	0x003d08ff
 8003420:	10624dd3 	.word	0x10624dd3

08003424 <HAL_I2C_Master_Transmit>:
{
 8003424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	4604      	mov	r4, r0
 800342c:	460e      	mov	r6, r1
 800342e:	4690      	mov	r8, r2
 8003430:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003432:	f7ff fa17 	bl	8002864 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b20      	cmp	r3, #32
 800343e:	d004      	beq.n	800344a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8003440:	2602      	movs	r6, #2
}
 8003442:	4630      	mov	r0, r6
 8003444:	b004      	add	sp, #16
 8003446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800344a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800344c:	9000      	str	r0, [sp, #0]
 800344e:	2319      	movs	r3, #25
 8003450:	2201      	movs	r2, #1
 8003452:	494f      	ldr	r1, [pc, #316]	; (8003590 <HAL_I2C_Master_Transmit+0x16c>)
 8003454:	4620      	mov	r0, r4
 8003456:	f7ff fd2a 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 800345a:	2800      	cmp	r0, #0
 800345c:	f040 8091 	bne.w	8003582 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8003460:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	f000 808e 	beq.w	8003586 <HAL_I2C_Master_Transmit+0x162>
 800346a:	2301      	movs	r3, #1
 800346c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	f012 0f01 	tst.w	r2, #1
 8003478:	d103      	bne.n	8003482 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800348a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800348c:	2321      	movs	r3, #33	; 0x21
 800348e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003492:	2310      	movs	r3, #16
 8003494:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003498:	2300      	movs	r3, #0
 800349a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800349c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034a0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034a4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a6:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <HAL_I2C_Master_Transmit+0x170>)
 80034a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034aa:	462b      	mov	r3, r5
 80034ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034ae:	4631      	mov	r1, r6
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7ff fd87 	bl	8002fc4 <I2C_MasterRequestWrite>
 80034b6:	4606      	mov	r6, r0
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d166      	bne.n	800358a <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034bc:	2300      	movs	r3, #0
 80034be:	9303      	str	r3, [sp, #12]
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	9203      	str	r2, [sp, #12]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	9303      	str	r3, [sp, #12]
 80034ca:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80034cc:	e012      	b.n	80034f4 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d001      	beq.n	80034d8 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80034d4:	2601      	movs	r6, #1
 80034d6:	e7b4      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	6822      	ldr	r2, [r4, #0]
 80034da:	6813      	ldr	r3, [r2, #0]
 80034dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80034e2:	2601      	movs	r6, #1
 80034e4:	e7ad      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e6:	462a      	mov	r2, r5
 80034e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7ff fe6a 	bl	80031c4 <I2C_WaitOnBTFFlagUntilTimeout>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d12c      	bne.n	800354e <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 80034f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d035      	beq.n	8003566 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fa:	462a      	mov	r2, r5
 80034fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80034fe:	4620      	mov	r0, r4
 8003500:	f7ff fe36 	bl	8003170 <I2C_WaitOnTXEFlagUntilTimeout>
 8003504:	2800      	cmp	r0, #0
 8003506:	d1e2      	bne.n	80034ce <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003508:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003510:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003512:	1c4b      	adds	r3, r1, #1
 8003514:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003516:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003518:	3b01      	subs	r3, #1
 800351a:	b29b      	uxth	r3, r3
 800351c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800351e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003520:	3b01      	subs	r3, #1
 8003522:	b29b      	uxth	r3, r3
 8003524:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003526:	6822      	ldr	r2, [r4, #0]
 8003528:	6950      	ldr	r0, [r2, #20]
 800352a:	f010 0f04 	tst.w	r0, #4
 800352e:	d0da      	beq.n	80034e6 <HAL_I2C_Master_Transmit+0xc2>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0d8      	beq.n	80034e6 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003534:	784b      	ldrb	r3, [r1, #1]
 8003536:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800353a:	3301      	adds	r3, #1
 800353c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800353e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003540:	3b01      	subs	r3, #1
 8003542:	b29b      	uxth	r3, r3
 8003544:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003546:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	8523      	strh	r3, [r4, #40]	; 0x28
 800354c:	e7cb      	b.n	80034e6 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003550:	2b04      	cmp	r3, #4
 8003552:	d001      	beq.n	8003558 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8003554:	2601      	movs	r6, #1
 8003556:	e774      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	6822      	ldr	r2, [r4, #0]
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003560:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003562:	2601      	movs	r6, #1
 8003564:	e76d      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	6813      	ldr	r3, [r2, #0]
 800356a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800356e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003570:	2320      	movs	r3, #32
 8003572:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003576:	2300      	movs	r3, #0
 8003578:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800357c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003580:	e75f      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8003582:	2602      	movs	r6, #2
 8003584:	e75d      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003586:	2602      	movs	r6, #2
 8003588:	e75b      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 800358a:	2601      	movs	r6, #1
 800358c:	e759      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1e>
 800358e:	bf00      	nop
 8003590:	00100002 	.word	0x00100002
 8003594:	ffff0000 	.word	0xffff0000

08003598 <HAL_I2C_Master_Receive>:
{
 8003598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	4604      	mov	r4, r0
 80035a0:	460e      	mov	r6, r1
 80035a2:	4690      	mov	r8, r2
 80035a4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80035a6:	f7ff f95d 	bl	8002864 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035aa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d004      	beq.n	80035be <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 80035b4:	2602      	movs	r6, #2
}
 80035b6:	4630      	mov	r0, r6
 80035b8:	b006      	add	sp, #24
 80035ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035be:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c0:	9000      	str	r0, [sp, #0]
 80035c2:	2319      	movs	r3, #25
 80035c4:	2201      	movs	r2, #1
 80035c6:	499e      	ldr	r1, [pc, #632]	; (8003840 <HAL_I2C_Master_Receive+0x2a8>)
 80035c8:	4620      	mov	r0, r4
 80035ca:	f7ff fc70 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	f040 8134 	bne.w	800383c <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 80035d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f000 8137 	beq.w	800384c <HAL_I2C_Master_Receive+0x2b4>
 80035de:	2301      	movs	r3, #1
 80035e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	f012 0f01 	tst.w	r2, #1
 80035ec:	d103      	bne.n	80035f6 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	6813      	ldr	r3, [r2, #0]
 80035fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035fe:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003600:	2322      	movs	r3, #34	; 0x22
 8003602:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003606:	2310      	movs	r3, #16
 8003608:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800360c:	2300      	movs	r3, #0
 800360e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003610:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003614:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003616:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003618:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361a:	4b8a      	ldr	r3, [pc, #552]	; (8003844 <HAL_I2C_Master_Receive+0x2ac>)
 800361c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800361e:	462b      	mov	r3, r5
 8003620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003622:	4631      	mov	r1, r6
 8003624:	4620      	mov	r0, r4
 8003626:	f7ff fd21 	bl	800306c <I2C_MasterRequestRead>
 800362a:	4606      	mov	r6, r0
 800362c:	2800      	cmp	r0, #0
 800362e:	f040 810f 	bne.w	8003850 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 8003632:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003634:	b95b      	cbnz	r3, 800364e <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003636:	9302      	str	r3, [sp, #8]
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	9202      	str	r2, [sp, #8]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	9202      	str	r2, [sp, #8]
 8003642:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e077      	b.n	800373e <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 800364e:	2b01      	cmp	r3, #1
 8003650:	d00f      	beq.n	8003672 <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 8003652:	2b02      	cmp	r3, #2
 8003654:	d01f      	beq.n	8003696 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800365e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003660:	2300      	movs	r3, #0
 8003662:	9305      	str	r3, [sp, #20]
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	9205      	str	r2, [sp, #20]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	9305      	str	r3, [sp, #20]
 800366e:	9b05      	ldr	r3, [sp, #20]
 8003670:	e065      	b.n	800373e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	6813      	ldr	r3, [r2, #0]
 8003676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800367a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367c:	2300      	movs	r3, #0
 800367e:	9303      	str	r3, [sp, #12]
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	9203      	str	r2, [sp, #12]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	9203      	str	r2, [sp, #12]
 800368a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e053      	b.n	800373e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003696:	6822      	ldr	r2, [r4, #0]
 8003698:	6813      	ldr	r3, [r2, #0]
 800369a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800369e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036a8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	9304      	str	r3, [sp, #16]
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	9204      	str	r2, [sp, #16]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	9304      	str	r3, [sp, #16]
 80036b8:	9b04      	ldr	r3, [sp, #16]
 80036ba:	e040      	b.n	800373e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036bc:	462a      	mov	r2, r5
 80036be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036c0:	4620      	mov	r0, r4
 80036c2:	f7ff fda9 	bl	8003218 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	f040 80c4 	bne.w	8003854 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036d2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80036d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036d6:	3301      	adds	r3, #1
 80036d8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80036da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036dc:	3b01      	subs	r3, #1
 80036de:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80036e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80036e8:	e029      	b.n	800373e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ea:	9500      	str	r5, [sp, #0]
 80036ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036ee:	2200      	movs	r2, #0
 80036f0:	4955      	ldr	r1, [pc, #340]	; (8003848 <HAL_I2C_Master_Receive+0x2b0>)
 80036f2:	4620      	mov	r0, r4
 80036f4:	f7ff fbdb 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	f040 80ad 	bne.w	8003858 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fe:	6822      	ldr	r2, [r4, #0]
 8003700:	6813      	ldr	r3, [r2, #0]
 8003702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003706:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800370e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003710:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003712:	1c53      	adds	r3, r2, #1
 8003714:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003716:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003718:	3b01      	subs	r3, #1
 800371a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800371c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800371e:	3b01      	subs	r3, #1
 8003720:	b29b      	uxth	r3, r3
 8003722:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800372a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800372c:	3301      	adds	r3, #1
 800372e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003730:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003732:	3b01      	subs	r3, #1
 8003734:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003736:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003738:	3b01      	subs	r3, #1
 800373a:	b29b      	uxth	r3, r3
 800373c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800373e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	d072      	beq.n	800382a <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8003744:	2b03      	cmp	r3, #3
 8003746:	d849      	bhi.n	80037dc <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8003748:	2b01      	cmp	r3, #1
 800374a:	d0b7      	beq.n	80036bc <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 800374c:	2b02      	cmp	r3, #2
 800374e:	d0cc      	beq.n	80036ea <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003750:	9500      	str	r5, [sp, #0]
 8003752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003754:	2200      	movs	r2, #0
 8003756:	493c      	ldr	r1, [pc, #240]	; (8003848 <HAL_I2C_Master_Receive+0x2b0>)
 8003758:	4620      	mov	r0, r4
 800375a:	f7ff fba8 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 800375e:	2800      	cmp	r0, #0
 8003760:	d17c      	bne.n	800385c <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	6813      	ldr	r3, [r2, #0]
 8003766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800376a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003772:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003776:	3301      	adds	r3, #1
 8003778:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800377a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800377c:	3b01      	subs	r3, #1
 800377e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003780:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003782:	3b01      	subs	r3, #1
 8003784:	b29b      	uxth	r3, r3
 8003786:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003788:	9500      	str	r5, [sp, #0]
 800378a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800378c:	2200      	movs	r2, #0
 800378e:	492e      	ldr	r1, [pc, #184]	; (8003848 <HAL_I2C_Master_Receive+0x2b0>)
 8003790:	4620      	mov	r0, r4
 8003792:	f7ff fb8c 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 8003796:	2800      	cmp	r0, #0
 8003798:	d162      	bne.n	8003860 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	6813      	ldr	r3, [r2, #0]
 800379e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037aa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80037ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037ae:	1c53      	adds	r3, r2, #1
 80037b0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80037b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80037b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29b      	uxth	r3, r3
 80037be:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80037c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037c8:	3301      	adds	r3, #1
 80037ca:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80037cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80037ce:	3b01      	subs	r3, #1
 80037d0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80037d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80037da:	e7b0      	b.n	800373e <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037dc:	462a      	mov	r2, r5
 80037de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff fd19 	bl	8003218 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d13c      	bne.n	8003864 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037f4:	1c53      	adds	r3, r2, #1
 80037f6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80037f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80037fa:	3b01      	subs	r3, #1
 80037fc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80037fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003800:	3b01      	subs	r3, #1
 8003802:	b29b      	uxth	r3, r3
 8003804:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	6959      	ldr	r1, [r3, #20]
 800380a:	f011 0f04 	tst.w	r1, #4
 800380e:	d096      	beq.n	800373e <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003816:	3301      	adds	r3, #1
 8003818:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800381a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800381c:	3b01      	subs	r3, #1
 800381e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003820:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003822:	3b01      	subs	r3, #1
 8003824:	b29b      	uxth	r3, r3
 8003826:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003828:	e789      	b.n	800373e <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800382a:	2320      	movs	r3, #32
 800382c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	2300      	movs	r3, #0
 8003832:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003836:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800383a:	e6bc      	b.n	80035b6 <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 800383c:	2602      	movs	r6, #2
 800383e:	e6ba      	b.n	80035b6 <HAL_I2C_Master_Receive+0x1e>
 8003840:	00100002 	.word	0x00100002
 8003844:	ffff0000 	.word	0xffff0000
 8003848:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 800384c:	2602      	movs	r6, #2
 800384e:	e6b2      	b.n	80035b6 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8003850:	2601      	movs	r6, #1
 8003852:	e6b0      	b.n	80035b6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003854:	2601      	movs	r6, #1
 8003856:	e6ae      	b.n	80035b6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003858:	2601      	movs	r6, #1
 800385a:	e6ac      	b.n	80035b6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 800385c:	2601      	movs	r6, #1
 800385e:	e6aa      	b.n	80035b6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003860:	2601      	movs	r6, #1
 8003862:	e6a8      	b.n	80035b6 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8003864:	2601      	movs	r6, #1
 8003866:	e6a6      	b.n	80035b6 <HAL_I2C_Master_Receive+0x1e>

08003868 <HAL_I2C_IsDeviceReady>:
{
 8003868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800386c:	b085      	sub	sp, #20
 800386e:	4604      	mov	r4, r0
 8003870:	4688      	mov	r8, r1
 8003872:	4691      	mov	r9, r2
 8003874:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003876:	f7fe fff5 	bl	8002864 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800387a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b20      	cmp	r3, #32
 8003882:	d004      	beq.n	800388e <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
}
 8003886:	4618      	mov	r0, r3
 8003888:	b005      	add	sp, #20
 800388a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800388e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003890:	9000      	str	r0, [sp, #0]
 8003892:	2319      	movs	r3, #25
 8003894:	2201      	movs	r2, #1
 8003896:	4954      	ldr	r1, [pc, #336]	; (80039e8 <HAL_I2C_IsDeviceReady+0x180>)
 8003898:	4620      	mov	r0, r4
 800389a:	f7ff fb08 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 800389e:	2800      	cmp	r0, #0
 80038a0:	f040 8097 	bne.w	80039d2 <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 80038a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	f000 8094 	beq.w	80039d6 <HAL_I2C_IsDeviceReady+0x16e>
 80038ae:	2301      	movs	r3, #1
 80038b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	f012 0f01 	tst.w	r2, #1
 80038bc:	d103      	bne.n	80038c6 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	f042 0201 	orr.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c6:	6822      	ldr	r2, [r4, #0]
 80038c8:	6813      	ldr	r3, [r2, #0]
 80038ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ce:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d0:	2324      	movs	r3, #36	; 0x24
 80038d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038da:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80038de:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 80038e0:	2701      	movs	r7, #1
 80038e2:	e034      	b.n	800394e <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038e4:	23a0      	movs	r3, #160	; 0xa0
 80038e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038f2:	6959      	ldr	r1, [r3, #20]
 80038f4:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2ba0      	cmp	r3, #160	; 0xa0
 8003900:	d009      	beq.n	8003916 <HAL_I2C_IsDeviceReady+0xae>
 8003902:	b942      	cbnz	r2, 8003916 <HAL_I2C_IsDeviceReady+0xae>
 8003904:	b939      	cbnz	r1, 8003916 <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fe ffad 	bl	8002864 <HAL_GetTick>
 800390a:	1b80      	subs	r0, r0, r6
 800390c:	42a8      	cmp	r0, r5
 800390e:	d8e9      	bhi.n	80038e4 <HAL_I2C_IsDeviceReady+0x7c>
 8003910:	2d00      	cmp	r5, #0
 8003912:	d1ea      	bne.n	80038ea <HAL_I2C_IsDeviceReady+0x82>
 8003914:	e7e6      	b.n	80038e4 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 8003916:	2320      	movs	r3, #32
 8003918:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	f012 0f02 	tst.w	r2, #2
 8003924:	d131      	bne.n	800398a <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003934:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003936:	9600      	str	r6, [sp, #0]
 8003938:	2319      	movs	r3, #25
 800393a:	2201      	movs	r2, #1
 800393c:	492a      	ldr	r1, [pc, #168]	; (80039e8 <HAL_I2C_IsDeviceReady+0x180>)
 800393e:	4620      	mov	r0, r4
 8003940:	f7ff fab5 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 8003944:	2800      	cmp	r0, #0
 8003946:	d14c      	bne.n	80039e2 <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8003948:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800394a:	454f      	cmp	r7, r9
 800394c:	d239      	bcs.n	80039c2 <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	6813      	ldr	r3, [r2, #0]
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003958:	9600      	str	r6, [sp, #0]
 800395a:	462b      	mov	r3, r5
 800395c:	2200      	movs	r2, #0
 800395e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003962:	4620      	mov	r0, r4
 8003964:	f7ff faa3 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 8003968:	2800      	cmp	r0, #0
 800396a:	d136      	bne.n	80039da <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8003972:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003974:	f7fe ff76 	bl	8002864 <HAL_GetTick>
 8003978:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003982:	6959      	ldr	r1, [r3, #20]
 8003984:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003988:	e7b6      	b.n	80038f8 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003990:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003992:	2300      	movs	r3, #0
 8003994:	9303      	str	r3, [sp, #12]
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	9203      	str	r2, [sp, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	9303      	str	r3, [sp, #12]
 80039a0:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039a2:	9600      	str	r6, [sp, #0]
 80039a4:	2319      	movs	r3, #25
 80039a6:	2201      	movs	r2, #1
 80039a8:	490f      	ldr	r1, [pc, #60]	; (80039e8 <HAL_I2C_IsDeviceReady+0x180>)
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7ff fa7f 	bl	8002eae <I2C_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	b9a0      	cbnz	r0, 80039de <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	2220      	movs	r2, #32
 80039b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80039ba:	2200      	movs	r2, #0
 80039bc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 80039c0:	e761      	b.n	8003886 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	2320      	movs	r3, #32
 80039c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80039c8:	2300      	movs	r3, #0
 80039ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e759      	b.n	8003886 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
 80039d4:	e757      	b.n	8003886 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80039d6:	2302      	movs	r3, #2
 80039d8:	e755      	b.n	8003886 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e753      	b.n	8003886 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e751      	b.n	8003886 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e74f      	b.n	8003886 <HAL_I2C_IsDeviceReady+0x1e>
 80039e6:	bf00      	nop
 80039e8:	00100002 	.word	0x00100002

080039ec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ec:	2800      	cmp	r0, #0
 80039ee:	f000 81bb 	beq.w	8003d68 <HAL_RCC_OscConfig+0x37c>
{
 80039f2:	b570      	push	{r4, r5, r6, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f8:	6803      	ldr	r3, [r0, #0]
 80039fa:	f013 0f01 	tst.w	r3, #1
 80039fe:	d03b      	beq.n	8003a78 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a00:	4ba7      	ldr	r3, [pc, #668]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d02c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0c:	4ba4      	ldr	r3, [pc, #656]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d021      	beq.n	8003a5c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a18:	6863      	ldr	r3, [r4, #4]
 8003a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1e:	d04f      	beq.n	8003ac0 <HAL_RCC_OscConfig+0xd4>
 8003a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a24:	d052      	beq.n	8003acc <HAL_RCC_OscConfig+0xe0>
 8003a26:	4b9e      	ldr	r3, [pc, #632]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a36:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a38:	6863      	ldr	r3, [r4, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d050      	beq.n	8003ae0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fe ff11 	bl	8002864 <HAL_GetTick>
 8003a42:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a44:	4b96      	ldr	r3, [pc, #600]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a4c:	d114      	bne.n	8003a78 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4e:	f7fe ff09 	bl	8002864 <HAL_GetTick>
 8003a52:	1b40      	subs	r0, r0, r5
 8003a54:	2864      	cmp	r0, #100	; 0x64
 8003a56:	d9f5      	bls.n	8003a44 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8003a58:	2003      	movs	r0, #3
 8003a5a:	e18a      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5c:	4b90      	ldr	r3, [pc, #576]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003a64:	d0d8      	beq.n	8003a18 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a66:	4b8e      	ldr	r3, [pc, #568]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a6e:	d003      	beq.n	8003a78 <HAL_RCC_OscConfig+0x8c>
 8003a70:	6863      	ldr	r3, [r4, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 817a 	beq.w	8003d6c <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	f013 0f02 	tst.w	r3, #2
 8003a7e:	d055      	beq.n	8003b2c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a80:	4b87      	ldr	r3, [pc, #540]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f013 0f0c 	tst.w	r3, #12
 8003a88:	d03e      	beq.n	8003b08 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b85      	ldr	r3, [pc, #532]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d033      	beq.n	8003afe <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a96:	68e3      	ldr	r3, [r4, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d068      	beq.n	8003b6e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9c:	4b81      	ldr	r3, [pc, #516]	; (8003ca4 <HAL_RCC_OscConfig+0x2b8>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fe fedf 	bl	8002864 <HAL_GetTick>
 8003aa6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	4b7d      	ldr	r3, [pc, #500]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f013 0f02 	tst.w	r3, #2
 8003ab0:	d154      	bne.n	8003b5c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7fe fed7 	bl	8002864 <HAL_GetTick>
 8003ab6:	1b40      	subs	r0, r0, r5
 8003ab8:	2802      	cmp	r0, #2
 8003aba:	d9f5      	bls.n	8003aa8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003abc:	2003      	movs	r0, #3
 8003abe:	e158      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac0:	4a77      	ldr	r2, [pc, #476]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003ac2:	6813      	ldr	r3, [r2, #0]
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e7b5      	b.n	8003a38 <HAL_RCC_OscConfig+0x4c>
 8003acc:	4b74      	ldr	r3, [pc, #464]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e7ab      	b.n	8003a38 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fec0 	bl	8002864 <HAL_GetTick>
 8003ae4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	4b6e      	ldr	r3, [pc, #440]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003aee:	d0c3      	beq.n	8003a78 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af0:	f7fe feb8 	bl	8002864 <HAL_GetTick>
 8003af4:	1b40      	subs	r0, r0, r5
 8003af6:	2864      	cmp	r0, #100	; 0x64
 8003af8:	d9f5      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8003afa:	2003      	movs	r0, #3
 8003afc:	e139      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afe:	4b68      	ldr	r3, [pc, #416]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003b06:	d1c6      	bne.n	8003a96 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b08:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f013 0f02 	tst.w	r3, #2
 8003b10:	d004      	beq.n	8003b1c <HAL_RCC_OscConfig+0x130>
 8003b12:	68e3      	ldr	r3, [r4, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8003b18:	2001      	movs	r0, #1
 8003b1a:	e12a      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4a60      	ldr	r2, [pc, #384]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003b1e:	6813      	ldr	r3, [r2, #0]
 8003b20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b24:	6921      	ldr	r1, [r4, #16]
 8003b26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b2a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	f013 0f08 	tst.w	r3, #8
 8003b32:	d040      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b34:	6963      	ldr	r3, [r4, #20]
 8003b36:	b363      	cbz	r3, 8003b92 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b38:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_RCC_OscConfig+0x2bc>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fe91 	bl	8002864 <HAL_GetTick>
 8003b42:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b44:	4b56      	ldr	r3, [pc, #344]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b48:	f013 0f02 	tst.w	r3, #2
 8003b4c:	d133      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4e:	f7fe fe89 	bl	8002864 <HAL_GetTick>
 8003b52:	1b40      	subs	r0, r0, r5
 8003b54:	2802      	cmp	r0, #2
 8003b56:	d9f5      	bls.n	8003b44 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003b58:	2003      	movs	r0, #3
 8003b5a:	e10a      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5c:	4a50      	ldr	r2, [pc, #320]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b64:	6921      	ldr	r1, [r4, #16]
 8003b66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	e7de      	b.n	8003b2c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003b6e:	4b4d      	ldr	r3, [pc, #308]	; (8003ca4 <HAL_RCC_OscConfig+0x2b8>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b74:	f7fe fe76 	bl	8002864 <HAL_GetTick>
 8003b78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f013 0f02 	tst.w	r3, #2
 8003b82:	d0d3      	beq.n	8003b2c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b84:	f7fe fe6e 	bl	8002864 <HAL_GetTick>
 8003b88:	1b40      	subs	r0, r0, r5
 8003b8a:	2802      	cmp	r0, #2
 8003b8c:	d9f5      	bls.n	8003b7a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003b8e:	2003      	movs	r0, #3
 8003b90:	e0ef      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b92:	4b45      	ldr	r3, [pc, #276]	; (8003ca8 <HAL_RCC_OscConfig+0x2bc>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fe fe64 	bl	8002864 <HAL_GetTick>
 8003b9c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9e:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba2:	f013 0f02 	tst.w	r3, #2
 8003ba6:	d006      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7fe fe5c 	bl	8002864 <HAL_GetTick>
 8003bac:	1b40      	subs	r0, r0, r5
 8003bae:	2802      	cmp	r0, #2
 8003bb0:	d9f5      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8003bb2:	2003      	movs	r0, #3
 8003bb4:	e0dd      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	f013 0f04 	tst.w	r3, #4
 8003bbc:	d079      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b38      	ldr	r3, [pc, #224]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003bc6:	d133      	bne.n	8003c30 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9301      	str	r3, [sp, #4]
 8003bcc:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003be0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be2:	4b32      	ldr	r3, [pc, #200]	; (8003cac <HAL_RCC_OscConfig+0x2c0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003bea:	d023      	beq.n	8003c34 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bec:	68a3      	ldr	r3, [r4, #8]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d034      	beq.n	8003c5c <HAL_RCC_OscConfig+0x270>
 8003bf2:	2b05      	cmp	r3, #5
 8003bf4:	d038      	beq.n	8003c68 <HAL_RCC_OscConfig+0x27c>
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	671a      	str	r2, [r3, #112]	; 0x70
 8003c00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c02:	f022 0204 	bic.w	r2, r2, #4
 8003c06:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c08:	68a3      	ldr	r3, [r4, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d036      	beq.n	8003c7c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0e:	f7fe fe29 	bl	8002864 <HAL_GetTick>
 8003c12:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	f013 0f02 	tst.w	r3, #2
 8003c1c:	d148      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fe fe21 	bl	8002864 <HAL_GetTick>
 8003c22:	1b80      	subs	r0, r0, r6
 8003c24:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c28:	4298      	cmp	r0, r3
 8003c2a:	d9f3      	bls.n	8003c14 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8003c2c:	2003      	movs	r0, #3
 8003c2e:	e0a0      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8003c30:	2500      	movs	r5, #0
 8003c32:	e7d6      	b.n	8003be2 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c34:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <HAL_RCC_OscConfig+0x2c0>)
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c3e:	f7fe fe11 	bl	8002864 <HAL_GetTick>
 8003c42:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_RCC_OscConfig+0x2c0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c4c:	d1ce      	bne.n	8003bec <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4e:	f7fe fe09 	bl	8002864 <HAL_GetTick>
 8003c52:	1b80      	subs	r0, r0, r6
 8003c54:	2802      	cmp	r0, #2
 8003c56:	d9f5      	bls.n	8003c44 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8003c58:	2003      	movs	r0, #3
 8003c5a:	e08a      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c5c:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003c5e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	e7cf      	b.n	8003c08 <HAL_RCC_OscConfig+0x21c>
 8003c68:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003c6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c6c:	f042 0204 	orr.w	r2, r2, #4
 8003c70:	671a      	str	r2, [r3, #112]	; 0x70
 8003c72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	671a      	str	r2, [r3, #112]	; 0x70
 8003c7a:	e7c5      	b.n	8003c08 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7c:	f7fe fdf2 	bl	8002864 <HAL_GetTick>
 8003c80:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	f013 0f02 	tst.w	r3, #2
 8003c8a:	d011      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8c:	f7fe fdea 	bl	8002864 <HAL_GetTick>
 8003c90:	1b80      	subs	r0, r0, r6
 8003c92:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c96:	4298      	cmp	r0, r3
 8003c98:	d9f3      	bls.n	8003c82 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8003c9a:	2003      	movs	r0, #3
 8003c9c:	e069      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	42470000 	.word	0x42470000
 8003ca8:	42470e80 	.word	0x42470e80
 8003cac:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cb0:	b9e5      	cbnz	r5, 8003cec <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb2:	69a3      	ldr	r3, [r4, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d05b      	beq.n	8003d70 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb8:	4a30      	ldr	r2, [pc, #192]	; (8003d7c <HAL_RCC_OscConfig+0x390>)
 8003cba:	6892      	ldr	r2, [r2, #8]
 8003cbc:	f002 020c 	and.w	r2, r2, #12
 8003cc0:	2a08      	cmp	r2, #8
 8003cc2:	d058      	beq.n	8003d76 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d017      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc8:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_RCC_OscConfig+0x394>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cce:	f7fe fdc9 	bl	8002864 <HAL_GetTick>
 8003cd2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd4:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <HAL_RCC_OscConfig+0x390>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003cdc:	d042      	beq.n	8003d64 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fe fdc1 	bl	8002864 <HAL_GetTick>
 8003ce2:	1b00      	subs	r0, r0, r4
 8003ce4:	2802      	cmp	r0, #2
 8003ce6:	d9f5      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003ce8:	2003      	movs	r0, #3
 8003cea:	e042      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cec:	4a23      	ldr	r2, [pc, #140]	; (8003d7c <HAL_RCC_OscConfig+0x390>)
 8003cee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf6:	e7dc      	b.n	8003cb2 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8003cf8:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <HAL_RCC_OscConfig+0x394>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003cfe:	f7fe fdb1 	bl	8002864 <HAL_GetTick>
 8003d02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <HAL_RCC_OscConfig+0x390>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d0c:	d006      	beq.n	8003d1c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fe fda9 	bl	8002864 <HAL_GetTick>
 8003d12:	1b40      	subs	r0, r0, r5
 8003d14:	2802      	cmp	r0, #2
 8003d16:	d9f5      	bls.n	8003d04 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8003d18:	2003      	movs	r0, #3
 8003d1a:	e02a      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d1c:	69e3      	ldr	r3, [r4, #28]
 8003d1e:	6a22      	ldr	r2, [r4, #32]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d24:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003d28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d2a:	0852      	lsrs	r2, r2, #1
 8003d2c:	3a01      	subs	r2, #1
 8003d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003d38:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_RCC_OscConfig+0x390>)
 8003d3a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x394>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d42:	f7fe fd8f 	bl	8002864 <HAL_GetTick>
 8003d46:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <HAL_RCC_OscConfig+0x390>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d50:	d106      	bne.n	8003d60 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fe fd87 	bl	8002864 <HAL_GetTick>
 8003d56:	1b00      	subs	r0, r0, r4
 8003d58:	2802      	cmp	r0, #2
 8003d5a:	d9f5      	bls.n	8003d48 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8003d5c:	2003      	movs	r0, #3
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003d60:	2000      	movs	r0, #0
 8003d62:	e006      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
 8003d64:	2000      	movs	r0, #0
 8003d66:	e004      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8003d68:	2001      	movs	r0, #1
}
 8003d6a:	4770      	bx	lr
        return HAL_ERROR;
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8003d70:	2000      	movs	r0, #0
}
 8003d72:	b002      	add	sp, #8
 8003d74:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003d76:	2001      	movs	r0, #1
 8003d78:	e7fb      	b.n	8003d72 <HAL_RCC_OscConfig+0x386>
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	42470060 	.word	0x42470060

08003d84 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d84:	4b32      	ldr	r3, [pc, #200]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d05c      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0xc6>
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	482f      	ldr	r0, [pc, #188]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d96:	4770      	bx	lr
{
 8003d98:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d9c:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003daa:	d02b      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dac:	4b28      	ldr	r3, [pc, #160]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003db4:	461e      	mov	r6, r3
 8003db6:	2700      	movs	r7, #0
 8003db8:	015c      	lsls	r4, r3, #5
 8003dba:	2500      	movs	r5, #0
 8003dbc:	1ae4      	subs	r4, r4, r3
 8003dbe:	eb65 0507 	sbc.w	r5, r5, r7
 8003dc2:	01a9      	lsls	r1, r5, #6
 8003dc4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003dc8:	01a0      	lsls	r0, r4, #6
 8003dca:	1b00      	subs	r0, r0, r4
 8003dcc:	eb61 0105 	sbc.w	r1, r1, r5
 8003dd0:	00cb      	lsls	r3, r1, #3
 8003dd2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003dd6:	00c4      	lsls	r4, r0, #3
 8003dd8:	19a0      	adds	r0, r4, r6
 8003dda:	eb43 0107 	adc.w	r1, r3, r7
 8003dde:	024b      	lsls	r3, r1, #9
 8003de0:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8003de4:	0244      	lsls	r4, r0, #9
 8003de6:	4620      	mov	r0, r4
 8003de8:	4619      	mov	r1, r3
 8003dea:	2300      	movs	r3, #0
 8003dec:	f7fc fe3e 	bl	8000a6c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003df0:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003df8:	3301      	adds	r3, #1
 8003dfa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003dfc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003e00:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003e0c:	461e      	mov	r6, r3
 8003e0e:	2700      	movs	r7, #0
 8003e10:	015c      	lsls	r4, r3, #5
 8003e12:	2500      	movs	r5, #0
 8003e14:	1ae4      	subs	r4, r4, r3
 8003e16:	eb65 0507 	sbc.w	r5, r5, r7
 8003e1a:	01a9      	lsls	r1, r5, #6
 8003e1c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003e20:	01a0      	lsls	r0, r4, #6
 8003e22:	1b00      	subs	r0, r0, r4
 8003e24:	eb61 0105 	sbc.w	r1, r1, r5
 8003e28:	00cb      	lsls	r3, r1, #3
 8003e2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003e2e:	00c4      	lsls	r4, r0, #3
 8003e30:	19a0      	adds	r0, r4, r6
 8003e32:	eb43 0107 	adc.w	r1, r3, r7
 8003e36:	028b      	lsls	r3, r1, #10
 8003e38:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003e3c:	0284      	lsls	r4, r0, #10
 8003e3e:	4620      	mov	r0, r4
 8003e40:	4619      	mov	r1, r3
 8003e42:	2300      	movs	r3, #0
 8003e44:	f7fc fe12 	bl	8000a6c <__aeabi_uldivmod>
 8003e48:	e7d2      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8003e4a:	4803      	ldr	r0, [pc, #12]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	00f42400 	.word	0x00f42400
 8003e58:	007a1200 	.word	0x007a1200

08003e5c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	f000 809d 	beq.w	8003f9c <HAL_RCC_ClockConfig+0x140>
{
 8003e62:	b570      	push	{r4, r5, r6, lr}
 8003e64:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e66:	4b4f      	ldr	r3, [pc, #316]	; (8003fa4 <HAL_RCC_ClockConfig+0x148>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	428b      	cmp	r3, r1
 8003e70:	d209      	bcs.n	8003e86 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	b2cb      	uxtb	r3, r1
 8003e74:	4a4b      	ldr	r2, [pc, #300]	; (8003fa4 <HAL_RCC_ClockConfig+0x148>)
 8003e76:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e78:	6813      	ldr	r3, [r2, #0]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	428b      	cmp	r3, r1
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8003e82:	2001      	movs	r0, #1
}
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f013 0f02 	tst.w	r3, #2
 8003e8c:	d017      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8e:	f013 0f04 	tst.w	r3, #4
 8003e92:	d004      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e94:	4a44      	ldr	r2, [pc, #272]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003e96:	6893      	ldr	r3, [r2, #8]
 8003e98:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e9c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	f013 0f08 	tst.w	r3, #8
 8003ea4:	d004      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea6:	4a40      	ldr	r2, [pc, #256]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003ea8:	6893      	ldr	r3, [r2, #8]
 8003eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4a3d      	ldr	r2, [pc, #244]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003eb2:	6893      	ldr	r3, [r2, #8]
 8003eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eb8:	68a0      	ldr	r0, [r4, #8]
 8003eba:	4303      	orrs	r3, r0
 8003ebc:	6093      	str	r3, [r2, #8]
 8003ebe:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	f013 0f01 	tst.w	r3, #1
 8003ec6:	d032      	beq.n	8003f2e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec8:	6863      	ldr	r3, [r4, #4]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d021      	beq.n	8003f12 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ece:	1e9a      	subs	r2, r3, #2
 8003ed0:	2a01      	cmp	r2, #1
 8003ed2:	d925      	bls.n	8003f20 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed4:	4a34      	ldr	r2, [pc, #208]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	f012 0f02 	tst.w	r2, #2
 8003edc:	d060      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4932      	ldr	r1, [pc, #200]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003ee0:	688a      	ldr	r2, [r1, #8]
 8003ee2:	f022 0203 	bic.w	r2, r2, #3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003eea:	f7fe fcbb 	bl	8002864 <HAL_GetTick>
 8003eee:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	6862      	ldr	r2, [r4, #4]
 8003efa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003efe:	d016      	beq.n	8003f2e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f00:	f7fe fcb0 	bl	8002864 <HAL_GetTick>
 8003f04:	1b80      	subs	r0, r0, r6
 8003f06:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f0a:	4298      	cmp	r0, r3
 8003f0c:	d9f0      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8003f0e:	2003      	movs	r0, #3
 8003f10:	e7b8      	b.n	8003e84 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	4a25      	ldr	r2, [pc, #148]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003f1a:	d1e0      	bne.n	8003ede <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	e7b1      	b.n	8003e84 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f20:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003f28:	d1d9      	bne.n	8003ede <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	e7aa      	b.n	8003e84 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_RCC_ClockConfig+0x148>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	42ab      	cmp	r3, r5
 8003f38:	d909      	bls.n	8003f4e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	b2ea      	uxtb	r2, r5
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_ClockConfig+0x148>)
 8003f3e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	42ab      	cmp	r3, r5
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8003f4a:	2001      	movs	r0, #1
 8003f4c:	e79a      	b.n	8003e84 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	f013 0f04 	tst.w	r3, #4
 8003f54:	d006      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f56:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003f58:	6893      	ldr	r3, [r2, #8]
 8003f5a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003f5e:	68e1      	ldr	r1, [r4, #12]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	f013 0f08 	tst.w	r3, #8
 8003f6a:	d007      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6c:	4a0e      	ldr	r2, [pc, #56]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003f6e:	6893      	ldr	r3, [r2, #8]
 8003f70:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003f74:	6921      	ldr	r1, [r4, #16]
 8003f76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f7a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f7c:	f7ff ff02 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x14c>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003f88:	4a08      	ldr	r2, [pc, #32]	; (8003fac <HAL_RCC_ClockConfig+0x150>)
 8003f8a:	5cd3      	ldrb	r3, [r2, r3]
 8003f8c:	40d8      	lsrs	r0, r3
 8003f8e:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <HAL_RCC_ClockConfig+0x154>)
 8003f90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f92:	2000      	movs	r0, #0
 8003f94:	f7fe fc1a 	bl	80027cc <HAL_InitTick>
  return HAL_OK;
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e773      	b.n	8003e84 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003f9c:	2001      	movs	r0, #1
}
 8003f9e:	4770      	bx	lr
        return HAL_ERROR;
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	e76f      	b.n	8003e84 <HAL_RCC_ClockConfig+0x28>
 8003fa4:	40023c00 	.word	0x40023c00
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	08009a60 	.word	0x08009a60
 8003fb0:	20000078 	.word	0x20000078

08003fb4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003fb4:	4b01      	ldr	r3, [pc, #4]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x8>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000078 	.word	0x20000078

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fc2:	f7ff fff7 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003fce:	4a03      	ldr	r2, [pc, #12]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003fd0:	5cd3      	ldrb	r3, [r2, r3]
}
 8003fd2:	40d8      	lsrs	r0, r3
 8003fd4:	bd08      	pop	{r3, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	08009a70 	.word	0x08009a70

08003fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fe2:	f7ff ffe7 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003fee:	4a03      	ldr	r2, [pc, #12]	; (8003ffc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003ff0:	5cd3      	ldrb	r3, [r2, r3]
}
 8003ff2:	40d8      	lsrs	r0, r3
 8003ff4:	bd08      	pop	{r3, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	08009a70 	.word	0x08009a70

08004000 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004000:	2800      	cmp	r0, #0
 8004002:	d03b      	beq.n	800407c <HAL_SPI_Init+0x7c>
{
 8004004:	b510      	push	{r4, lr}
 8004006:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004008:	2300      	movs	r3, #0
 800400a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800400c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004010:	2b00      	cmp	r3, #0
 8004012:	d02e      	beq.n	8004072 <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004014:	2302      	movs	r3, #2
 8004016:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800401a:	6822      	ldr	r2, [r4, #0]
 800401c:	6813      	ldr	r3, [r2, #0]
 800401e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004022:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004024:	6863      	ldr	r3, [r4, #4]
 8004026:	68a2      	ldr	r2, [r4, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	68e2      	ldr	r2, [r4, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	6922      	ldr	r2, [r4, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	6962      	ldr	r2, [r4, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	69a2      	ldr	r2, [r4, #24]
 8004038:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800403c:	4313      	orrs	r3, r2
 800403e:	69e2      	ldr	r2, [r4, #28]
 8004040:	4313      	orrs	r3, r2
 8004042:	6a22      	ldr	r2, [r4, #32]
 8004044:	4313      	orrs	r3, r2
 8004046:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	430b      	orrs	r3, r1
 800404c:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800404e:	8b63      	ldrh	r3, [r4, #26]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	430b      	orrs	r3, r1
 800405a:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800405c:	6822      	ldr	r2, [r4, #0]
 800405e:	69d3      	ldr	r3, [r2, #28]
 8004060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004064:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004066:	2000      	movs	r0, #0
 8004068:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800406a:	2301      	movs	r3, #1
 800406c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8004070:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004072:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004076:	f001 f891 	bl	800519c <HAL_SPI_MspInit>
 800407a:	e7cb      	b.n	8004014 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 800407c:	2001      	movs	r0, #1
}
 800407e:	4770      	bx	lr

08004080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004082:	6a03      	ldr	r3, [r0, #32]
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004090:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004094:	680d      	ldr	r5, [r1, #0]
 8004096:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800409e:	688b      	ldr	r3, [r1, #8]
 80040a0:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040a2:	4d0d      	ldr	r5, [pc, #52]	; (80040d8 <TIM_OC1_SetConfig+0x58>)
 80040a4:	42a8      	cmp	r0, r5
 80040a6:	d009      	beq.n	80040bc <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a8:	4d0b      	ldr	r5, [pc, #44]	; (80040d8 <TIM_OC1_SetConfig+0x58>)
 80040aa:	42a8      	cmp	r0, r5
 80040ac:	d00d      	beq.n	80040ca <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ae:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b0:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b2:	684a      	ldr	r2, [r1, #4]
 80040b4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b6:	6203      	str	r3, [r0, #32]
}
 80040b8:	bc70      	pop	{r4, r5, r6}
 80040ba:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80040c0:	68cc      	ldr	r4, [r1, #12]
 80040c2:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80040c4:	f023 0304 	bic.w	r3, r3, #4
 80040c8:	e7ee      	b.n	80040a8 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80040ce:	694c      	ldr	r4, [r1, #20]
 80040d0:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d2:	698a      	ldr	r2, [r1, #24]
 80040d4:	4322      	orrs	r2, r4
 80040d6:	e7ea      	b.n	80040ae <TIM_OC1_SetConfig+0x2e>
 80040d8:	40010000 	.word	0x40010000

080040dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040de:	6a03      	ldr	r3, [r0, #32]
 80040e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ea:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040ec:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	680d      	ldr	r5, [r1, #0]
 80040f2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040f8:	688d      	ldr	r5, [r1, #8]
 80040fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040fe:	4d0f      	ldr	r5, [pc, #60]	; (800413c <TIM_OC3_SetConfig+0x60>)
 8004100:	42a8      	cmp	r0, r5
 8004102:	d009      	beq.n	8004118 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004104:	4d0d      	ldr	r5, [pc, #52]	; (800413c <TIM_OC3_SetConfig+0x60>)
 8004106:	42a8      	cmp	r0, r5
 8004108:	d00e      	beq.n	8004128 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800410c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800410e:	684a      	ldr	r2, [r1, #4]
 8004110:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004112:	6203      	str	r3, [r0, #32]
}
 8004114:	bc30      	pop	{r4, r5}
 8004116:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800411c:	68cd      	ldr	r5, [r1, #12]
 800411e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004126:	e7ed      	b.n	8004104 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004128:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800412c:	694d      	ldr	r5, [r1, #20]
 800412e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004132:	698d      	ldr	r5, [r1, #24]
 8004134:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004138:	e7e7      	b.n	800410a <TIM_OC3_SetConfig+0x2e>
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000

08004140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004142:	6a03      	ldr	r3, [r0, #32]
 8004144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004148:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800414c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004150:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004154:	680d      	ldr	r5, [r1, #0]
 8004156:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800415a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800415e:	688d      	ldr	r5, [r1, #8]
 8004160:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004164:	4d07      	ldr	r5, [pc, #28]	; (8004184 <TIM_OC4_SetConfig+0x44>)
 8004166:	42a8      	cmp	r0, r5
 8004168:	d006      	beq.n	8004178 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800416c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800416e:	684a      	ldr	r2, [r1, #4]
 8004170:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004172:	6203      	str	r3, [r0, #32]
}
 8004174:	bc30      	pop	{r4, r5}
 8004176:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004178:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800417c:	694d      	ldr	r5, [r1, #20]
 800417e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004182:	e7f2      	b.n	800416a <TIM_OC4_SetConfig+0x2a>
 8004184:	40010000 	.word	0x40010000

08004188 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	2302      	movs	r3, #2
 800418a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800418e:	6802      	ldr	r2, [r0, #0]
 8004190:	6893      	ldr	r3, [r2, #8]
 8004192:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004196:	2b06      	cmp	r3, #6
 8004198:	d003      	beq.n	80041a2 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80041a8:	2000      	movs	r0, #0
 80041aa:	4770      	bx	lr

080041ac <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80041ac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ae:	4a25      	ldr	r2, [pc, #148]	; (8004244 <TIM_Base_SetConfig+0x98>)
 80041b0:	4290      	cmp	r0, r2
 80041b2:	d00e      	beq.n	80041d2 <TIM_Base_SetConfig+0x26>
 80041b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80041b8:	d00b      	beq.n	80041d2 <TIM_Base_SetConfig+0x26>
 80041ba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80041be:	4290      	cmp	r0, r2
 80041c0:	d007      	beq.n	80041d2 <TIM_Base_SetConfig+0x26>
 80041c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041c6:	4290      	cmp	r0, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_Base_SetConfig+0x26>
 80041ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041ce:	4290      	cmp	r0, r2
 80041d0:	d103      	bne.n	80041da <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80041d6:	684a      	ldr	r2, [r1, #4]
 80041d8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <TIM_Base_SetConfig+0x98>)
 80041dc:	4290      	cmp	r0, r2
 80041de:	d01a      	beq.n	8004216 <TIM_Base_SetConfig+0x6a>
 80041e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80041e4:	d017      	beq.n	8004216 <TIM_Base_SetConfig+0x6a>
 80041e6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80041ea:	4290      	cmp	r0, r2
 80041ec:	d013      	beq.n	8004216 <TIM_Base_SetConfig+0x6a>
 80041ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041f2:	4290      	cmp	r0, r2
 80041f4:	d00f      	beq.n	8004216 <TIM_Base_SetConfig+0x6a>
 80041f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041fa:	4290      	cmp	r0, r2
 80041fc:	d00b      	beq.n	8004216 <TIM_Base_SetConfig+0x6a>
 80041fe:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004202:	4290      	cmp	r0, r2
 8004204:	d007      	beq.n	8004216 <TIM_Base_SetConfig+0x6a>
 8004206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800420a:	4290      	cmp	r0, r2
 800420c:	d003      	beq.n	8004216 <TIM_Base_SetConfig+0x6a>
 800420e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004212:	4290      	cmp	r0, r2
 8004214:	d103      	bne.n	800421e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800421a:	68ca      	ldr	r2, [r1, #12]
 800421c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800421e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004222:	694a      	ldr	r2, [r1, #20]
 8004224:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004226:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004228:	688b      	ldr	r3, [r1, #8]
 800422a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800422c:	680b      	ldr	r3, [r1, #0]
 800422e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <TIM_Base_SetConfig+0x98>)
 8004232:	4298      	cmp	r0, r3
 8004234:	d002      	beq.n	800423c <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8004236:	2301      	movs	r3, #1
 8004238:	6143      	str	r3, [r0, #20]
}
 800423a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800423c:	690b      	ldr	r3, [r1, #16]
 800423e:	6303      	str	r3, [r0, #48]	; 0x30
 8004240:	e7f9      	b.n	8004236 <TIM_Base_SetConfig+0x8a>
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000

08004248 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004248:	b1a8      	cbz	r0, 8004276 <HAL_TIM_Base_Init+0x2e>
{
 800424a:	b510      	push	{r4, lr}
 800424c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800424e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004252:	b15b      	cbz	r3, 800426c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	2302      	movs	r3, #2
 8004256:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800425a:	1d21      	adds	r1, r4, #4
 800425c:	6820      	ldr	r0, [r4, #0]
 800425e:	f7ff ffa5 	bl	80041ac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004262:	2301      	movs	r3, #1
 8004264:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004268:	2000      	movs	r0, #0
}
 800426a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800426c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004270:	f000 fffa 	bl	8005268 <HAL_TIM_Base_MspInit>
 8004274:	e7ee      	b.n	8004254 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004276:	2001      	movs	r0, #1
}
 8004278:	4770      	bx	lr

0800427a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800427a:	b1a8      	cbz	r0, 80042a8 <HAL_TIM_PWM_Init+0x2e>
{
 800427c:	b510      	push	{r4, lr}
 800427e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004280:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004284:	b15b      	cbz	r3, 800429e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004286:	2302      	movs	r3, #2
 8004288:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428c:	1d21      	adds	r1, r4, #4
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	f7ff ff8c 	bl	80041ac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004294:	2301      	movs	r3, #1
 8004296:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800429a:	2000      	movs	r0, #0
}
 800429c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800429e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80042a2:	f000 ffc9 	bl	8005238 <HAL_TIM_PWM_MspInit>
 80042a6:	e7ee      	b.n	8004286 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80042a8:	2001      	movs	r0, #1
}
 80042aa:	4770      	bx	lr

080042ac <TIM_OC2_SetConfig>:
{
 80042ac:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ae:	6a03      	ldr	r3, [r0, #32]
 80042b0:	f023 0310 	bic.w	r3, r3, #16
 80042b4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80042b6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80042b8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80042ba:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042bc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c0:	680d      	ldr	r5, [r1, #0]
 80042c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80042c6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042ca:	688d      	ldr	r5, [r1, #8]
 80042cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042d0:	4d0e      	ldr	r5, [pc, #56]	; (800430c <TIM_OC2_SetConfig+0x60>)
 80042d2:	42a8      	cmp	r0, r5
 80042d4:	d009      	beq.n	80042ea <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d6:	4d0d      	ldr	r5, [pc, #52]	; (800430c <TIM_OC2_SetConfig+0x60>)
 80042d8:	42a8      	cmp	r0, r5
 80042da:	d00e      	beq.n	80042fa <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80042dc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80042de:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80042e0:	684a      	ldr	r2, [r1, #4]
 80042e2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80042e4:	6203      	str	r3, [r0, #32]
}
 80042e6:	bc30      	pop	{r4, r5}
 80042e8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80042ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042ee:	68cd      	ldr	r5, [r1, #12]
 80042f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80042f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f8:	e7ed      	b.n	80042d6 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042fa:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042fe:	694d      	ldr	r5, [r1, #20]
 8004300:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004304:	698d      	ldr	r5, [r1, #24]
 8004306:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800430a:	e7e7      	b.n	80042dc <TIM_OC2_SetConfig+0x30>
 800430c:	40010000 	.word	0x40010000

08004310 <HAL_TIM_PWM_ConfigChannel>:
{
 8004310:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004312:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004316:	2b01      	cmp	r3, #1
 8004318:	d066      	beq.n	80043e8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800431a:	460d      	mov	r5, r1
 800431c:	4604      	mov	r4, r0
 800431e:	2301      	movs	r3, #1
 8004320:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	2302      	movs	r3, #2
 8004326:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800432a:	2a0c      	cmp	r2, #12
 800432c:	d81a      	bhi.n	8004364 <HAL_TIM_PWM_ConfigChannel+0x54>
 800432e:	e8df f002 	tbb	[pc, r2]
 8004332:	1907      	.short	0x1907
 8004334:	19201919 	.word	0x19201919
 8004338:	19341919 	.word	0x19341919
 800433c:	1919      	.short	0x1919
 800433e:	47          	.byte	0x47
 800433f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004340:	6800      	ldr	r0, [r0, #0]
 8004342:	f7ff fe9d 	bl	8004080 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	6993      	ldr	r3, [r2, #24]
 800434a:	f043 0308 	orr.w	r3, r3, #8
 800434e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004350:	6822      	ldr	r2, [r4, #0]
 8004352:	6993      	ldr	r3, [r2, #24]
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	6993      	ldr	r3, [r2, #24]
 800435e:	6929      	ldr	r1, [r5, #16]
 8004360:	430b      	orrs	r3, r1
 8004362:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8004364:	2301      	movs	r3, #1
 8004366:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800436a:	2000      	movs	r0, #0
 800436c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004370:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004372:	6800      	ldr	r0, [r0, #0]
 8004374:	f7ff ff9a 	bl	80042ac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004378:	6822      	ldr	r2, [r4, #0]
 800437a:	6993      	ldr	r3, [r2, #24]
 800437c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004380:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	6993      	ldr	r3, [r2, #24]
 8004386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800438a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	6993      	ldr	r3, [r2, #24]
 8004390:	6929      	ldr	r1, [r5, #16]
 8004392:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004396:	6193      	str	r3, [r2, #24]
      break;
 8004398:	e7e4      	b.n	8004364 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800439a:	6800      	ldr	r0, [r0, #0]
 800439c:	f7ff fe9e 	bl	80040dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	69d3      	ldr	r3, [r2, #28]
 80043a4:	f043 0308 	orr.w	r3, r3, #8
 80043a8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	69d3      	ldr	r3, [r2, #28]
 80043ae:	f023 0304 	bic.w	r3, r3, #4
 80043b2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043b4:	6822      	ldr	r2, [r4, #0]
 80043b6:	69d3      	ldr	r3, [r2, #28]
 80043b8:	6929      	ldr	r1, [r5, #16]
 80043ba:	430b      	orrs	r3, r1
 80043bc:	61d3      	str	r3, [r2, #28]
      break;
 80043be:	e7d1      	b.n	8004364 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043c0:	6800      	ldr	r0, [r0, #0]
 80043c2:	f7ff febd 	bl	8004140 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043c6:	6822      	ldr	r2, [r4, #0]
 80043c8:	69d3      	ldr	r3, [r2, #28]
 80043ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043ce:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043d0:	6822      	ldr	r2, [r4, #0]
 80043d2:	69d3      	ldr	r3, [r2, #28]
 80043d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043d8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043da:	6822      	ldr	r2, [r4, #0]
 80043dc:	69d3      	ldr	r3, [r2, #28]
 80043de:	6929      	ldr	r1, [r5, #16]
 80043e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80043e4:	61d3      	str	r3, [r2, #28]
      break;
 80043e6:	e7bd      	b.n	8004364 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80043e8:	2002      	movs	r0, #2
 80043ea:	e7c1      	b.n	8004370 <HAL_TIM_PWM_ConfigChannel+0x60>

080043ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043ec:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043ee:	f001 011f 	and.w	r1, r1, #31
 80043f2:	2301      	movs	r3, #1
 80043f4:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043f8:	6a03      	ldr	r3, [r0, #32]
 80043fa:	ea23 0304 	bic.w	r3, r3, r4
 80043fe:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004400:	6a03      	ldr	r3, [r0, #32]
 8004402:	408a      	lsls	r2, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	6203      	str	r3, [r0, #32]
}
 8004408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_TIM_PWM_Start>:
{
 8004410:	b510      	push	{r4, lr}
 8004412:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004414:	2201      	movs	r2, #1
 8004416:	6800      	ldr	r0, [r0, #0]
 8004418:	f7ff ffe8 	bl	80043ec <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <HAL_TIM_PWM_Start+0x38>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00b      	beq.n	800443c <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004424:	6822      	ldr	r2, [r4, #0]
 8004426:	6893      	ldr	r3, [r2, #8]
 8004428:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442c:	2b06      	cmp	r3, #6
 800442e:	d003      	beq.n	8004438 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8004430:	6813      	ldr	r3, [r2, #0]
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6013      	str	r3, [r2, #0]
}
 8004438:	2000      	movs	r0, #0
 800443a:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800443c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004442:	645a      	str	r2, [r3, #68]	; 0x44
 8004444:	e7ee      	b.n	8004424 <HAL_TIM_PWM_Start+0x14>
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000

0800444c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d01c      	beq.n	800448e <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8004454:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8004456:	2601      	movs	r6, #1
 8004458:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	2302      	movs	r3, #2
 800445e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004462:	6802      	ldr	r2, [r0, #0]
 8004464:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004466:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004468:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800446c:	680c      	ldr	r4, [r1, #0]
 800446e:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004470:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004474:	684b      	ldr	r3, [r1, #4]
 8004476:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004478:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800447a:	6802      	ldr	r2, [r0, #0]
 800447c:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800447e:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004482:	2300      	movs	r3, #0
 8004484:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004488:	4618      	mov	r0, r3
}
 800448a:	bc70      	pop	{r4, r5, r6}
 800448c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800448e:	2002      	movs	r0, #2
}
 8004490:	4770      	bx	lr
	...

08004494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004498:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800449a:	6802      	ldr	r2, [r0, #0]
 800449c:	6913      	ldr	r3, [r2, #16]
 800449e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044a2:	68c1      	ldr	r1, [r0, #12]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044a8:	6883      	ldr	r3, [r0, #8]
 80044aa:	6902      	ldr	r2, [r0, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	6942      	ldr	r2, [r0, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	69c2      	ldr	r2, [r0, #28]
 80044b4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80044b6:	6801      	ldr	r1, [r0, #0]
 80044b8:	68cb      	ldr	r3, [r1, #12]
 80044ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80044be:	f023 030c 	bic.w	r3, r3, #12
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044c6:	6802      	ldr	r2, [r0, #0]
 80044c8:	6953      	ldr	r3, [r2, #20]
 80044ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ce:	6981      	ldr	r1, [r0, #24]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d4:	69c3      	ldr	r3, [r0, #28]
 80044d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044da:	d060      	beq.n	800459e <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044dc:	6803      	ldr	r3, [r0, #0]
 80044de:	4ab8      	ldr	r2, [pc, #736]	; (80047c0 <UART_SetConfig+0x32c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	f000 8114 	beq.w	800470e <UART_SetConfig+0x27a>
 80044e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044ea:	4293      	cmp	r3, r2
 80044ec:	f000 810f 	beq.w	800470e <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80044f0:	f7ff fd66 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 80044f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044fc:	6865      	ldr	r5, [r4, #4]
 80044fe:	00ad      	lsls	r5, r5, #2
 8004500:	fbb0 f5f5 	udiv	r5, r0, r5
 8004504:	4faf      	ldr	r7, [pc, #700]	; (80047c4 <UART_SetConfig+0x330>)
 8004506:	fba7 3505 	umull	r3, r5, r7, r5
 800450a:	096d      	lsrs	r5, r5, #5
 800450c:	012e      	lsls	r6, r5, #4
 800450e:	f7ff fd57 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8004512:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004516:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800451a:	6865      	ldr	r5, [r4, #4]
 800451c:	00ad      	lsls	r5, r5, #2
 800451e:	fbb0 f9f5 	udiv	r9, r0, r5
 8004522:	f7ff fd4d 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8004526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800452a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800452e:	6865      	ldr	r5, [r4, #4]
 8004530:	00ad      	lsls	r5, r5, #2
 8004532:	fbb0 f5f5 	udiv	r5, r0, r5
 8004536:	fba7 3505 	umull	r3, r5, r7, r5
 800453a:	096d      	lsrs	r5, r5, #5
 800453c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004540:	fb08 9515 	mls	r5, r8, r5, r9
 8004544:	012d      	lsls	r5, r5, #4
 8004546:	3532      	adds	r5, #50	; 0x32
 8004548:	fba7 3505 	umull	r3, r5, r7, r5
 800454c:	096d      	lsrs	r5, r5, #5
 800454e:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004552:	4435      	add	r5, r6
 8004554:	f7ff fd34 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8004558:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800455c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004560:	6866      	ldr	r6, [r4, #4]
 8004562:	00b6      	lsls	r6, r6, #2
 8004564:	fbb0 f6f6 	udiv	r6, r0, r6
 8004568:	f7ff fd2a 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 800456c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004570:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	fbb0 f0f3 	udiv	r0, r0, r3
 800457c:	fba7 3000 	umull	r3, r0, r7, r0
 8004580:	0940      	lsrs	r0, r0, #5
 8004582:	fb08 6810 	mls	r8, r8, r0, r6
 8004586:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800458a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800458e:	fba7 3708 	umull	r3, r7, r7, r8
 8004592:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	442f      	add	r7, r5
 800459a:	609f      	str	r7, [r3, #8]
    }
  }
}
 800459c:	e10d      	b.n	80047ba <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800459e:	6803      	ldr	r3, [r0, #0]
 80045a0:	4a87      	ldr	r2, [pc, #540]	; (80047c0 <UART_SetConfig+0x32c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d05b      	beq.n	800465e <UART_SetConfig+0x1ca>
 80045a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d057      	beq.n	800465e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80045ae:	f7ff fd07 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 80045b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045ba:	6865      	ldr	r5, [r4, #4]
 80045bc:	006d      	lsls	r5, r5, #1
 80045be:	fbb0 f5f5 	udiv	r5, r0, r5
 80045c2:	4f80      	ldr	r7, [pc, #512]	; (80047c4 <UART_SetConfig+0x330>)
 80045c4:	fba7 3505 	umull	r3, r5, r7, r5
 80045c8:	096d      	lsrs	r5, r5, #5
 80045ca:	012e      	lsls	r6, r5, #4
 80045cc:	f7ff fcf8 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 80045d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045d8:	6865      	ldr	r5, [r4, #4]
 80045da:	006d      	lsls	r5, r5, #1
 80045dc:	fbb0 f9f5 	udiv	r9, r0, r5
 80045e0:	f7ff fcee 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 80045e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045ec:	6865      	ldr	r5, [r4, #4]
 80045ee:	006d      	lsls	r5, r5, #1
 80045f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80045f4:	fba7 3505 	umull	r3, r5, r7, r5
 80045f8:	096d      	lsrs	r5, r5, #5
 80045fa:	f04f 0864 	mov.w	r8, #100	; 0x64
 80045fe:	fb08 9515 	mls	r5, r8, r5, r9
 8004602:	00ed      	lsls	r5, r5, #3
 8004604:	3532      	adds	r5, #50	; 0x32
 8004606:	fba7 3505 	umull	r3, r5, r7, r5
 800460a:	096d      	lsrs	r5, r5, #5
 800460c:	006d      	lsls	r5, r5, #1
 800460e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8004612:	4435      	add	r5, r6
 8004614:	f7ff fcd4 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8004618:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800461c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004620:	6866      	ldr	r6, [r4, #4]
 8004622:	0076      	lsls	r6, r6, #1
 8004624:	fbb0 f6f6 	udiv	r6, r0, r6
 8004628:	f7ff fcca 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 800462c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004634:	6863      	ldr	r3, [r4, #4]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fbb0 f3f3 	udiv	r3, r0, r3
 800463c:	fba7 2303 	umull	r2, r3, r7, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	fb08 6813 	mls	r8, r8, r3, r6
 8004646:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800464a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800464e:	fba7 3708 	umull	r3, r7, r7, r8
 8004652:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	442f      	add	r7, r5
 800465a:	609f      	str	r7, [r3, #8]
 800465c:	e0ad      	b.n	80047ba <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800465e:	f7ff fcbf 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8004662:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004666:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800466a:	6865      	ldr	r5, [r4, #4]
 800466c:	006d      	lsls	r5, r5, #1
 800466e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004672:	4f54      	ldr	r7, [pc, #336]	; (80047c4 <UART_SetConfig+0x330>)
 8004674:	fba7 3505 	umull	r3, r5, r7, r5
 8004678:	096d      	lsrs	r5, r5, #5
 800467a:	012e      	lsls	r6, r5, #4
 800467c:	f7ff fcb0 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8004680:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004684:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004688:	6865      	ldr	r5, [r4, #4]
 800468a:	006d      	lsls	r5, r5, #1
 800468c:	fbb0 f9f5 	udiv	r9, r0, r5
 8004690:	f7ff fca6 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8004694:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004698:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800469c:	6865      	ldr	r5, [r4, #4]
 800469e:	006d      	lsls	r5, r5, #1
 80046a0:	fbb0 f5f5 	udiv	r5, r0, r5
 80046a4:	fba7 3505 	umull	r3, r5, r7, r5
 80046a8:	096d      	lsrs	r5, r5, #5
 80046aa:	f04f 0864 	mov.w	r8, #100	; 0x64
 80046ae:	fb08 9515 	mls	r5, r8, r5, r9
 80046b2:	00ed      	lsls	r5, r5, #3
 80046b4:	3532      	adds	r5, #50	; 0x32
 80046b6:	fba7 3505 	umull	r3, r5, r7, r5
 80046ba:	096d      	lsrs	r5, r5, #5
 80046bc:	006d      	lsls	r5, r5, #1
 80046be:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80046c2:	4435      	add	r5, r6
 80046c4:	f7ff fc8c 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 80046c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046d0:	6866      	ldr	r6, [r4, #4]
 80046d2:	0076      	lsls	r6, r6, #1
 80046d4:	fbb0 f6f6 	udiv	r6, r0, r6
 80046d8:	f7ff fc82 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 80046dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046e4:	6863      	ldr	r3, [r4, #4]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ec:	fba7 2303 	umull	r2, r3, r7, r3
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	fb08 6813 	mls	r8, r8, r3, r6
 80046f6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80046fa:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80046fe:	fba7 3708 	umull	r3, r7, r7, r8
 8004702:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	442f      	add	r7, r5
 800470a:	609f      	str	r7, [r3, #8]
 800470c:	e055      	b.n	80047ba <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800470e:	f7ff fc67 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8004712:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004716:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800471a:	6865      	ldr	r5, [r4, #4]
 800471c:	00ad      	lsls	r5, r5, #2
 800471e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004722:	4f28      	ldr	r7, [pc, #160]	; (80047c4 <UART_SetConfig+0x330>)
 8004724:	fba7 3505 	umull	r3, r5, r7, r5
 8004728:	096d      	lsrs	r5, r5, #5
 800472a:	012e      	lsls	r6, r5, #4
 800472c:	f7ff fc58 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8004730:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004734:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004738:	6865      	ldr	r5, [r4, #4]
 800473a:	00ad      	lsls	r5, r5, #2
 800473c:	fbb0 f9f5 	udiv	r9, r0, r5
 8004740:	f7ff fc4e 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8004744:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004748:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800474c:	6865      	ldr	r5, [r4, #4]
 800474e:	00ad      	lsls	r5, r5, #2
 8004750:	fbb0 f5f5 	udiv	r5, r0, r5
 8004754:	fba7 3505 	umull	r3, r5, r7, r5
 8004758:	096d      	lsrs	r5, r5, #5
 800475a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800475e:	fb08 9515 	mls	r5, r8, r5, r9
 8004762:	012d      	lsls	r5, r5, #4
 8004764:	3532      	adds	r5, #50	; 0x32
 8004766:	fba7 3505 	umull	r3, r5, r7, r5
 800476a:	096d      	lsrs	r5, r5, #5
 800476c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004770:	4435      	add	r5, r6
 8004772:	f7ff fc35 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8004776:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800477a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800477e:	6866      	ldr	r6, [r4, #4]
 8004780:	00b6      	lsls	r6, r6, #2
 8004782:	fbb0 f6f6 	udiv	r6, r0, r6
 8004786:	f7ff fc2b 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 800478a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800478e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	fbb0 f0f3 	udiv	r0, r0, r3
 800479a:	fba7 3000 	umull	r3, r0, r7, r0
 800479e:	0940      	lsrs	r0, r0, #5
 80047a0:	fb08 6810 	mls	r8, r8, r0, r6
 80047a4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80047a8:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80047ac:	fba7 3708 	umull	r3, r7, r7, r8
 80047b0:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	442f      	add	r7, r5
 80047b8:	609f      	str	r7, [r3, #8]
}
 80047ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047be:	bf00      	nop
 80047c0:	40011000 	.word	0x40011000
 80047c4:	51eb851f 	.word	0x51eb851f

080047c8 <UART_WaitOnFlagUntilTimeout>:
{
 80047c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047cc:	4605      	mov	r5, r0
 80047ce:	460f      	mov	r7, r1
 80047d0:	4616      	mov	r6, r2
 80047d2:	4698      	mov	r8, r3
 80047d4:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d6:	682b      	ldr	r3, [r5, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	ea37 0303 	bics.w	r3, r7, r3
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	42b3      	cmp	r3, r6
 80047e6:	d11d      	bne.n	8004824 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80047e8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80047ec:	d0f3      	beq.n	80047d6 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ee:	b12c      	cbz	r4, 80047fc <UART_WaitOnFlagUntilTimeout+0x34>
 80047f0:	f7fe f838 	bl	8002864 <HAL_GetTick>
 80047f4:	eba0 0008 	sub.w	r0, r0, r8
 80047f8:	42a0      	cmp	r0, r4
 80047fa:	d9ec      	bls.n	80047d6 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047fc:	682a      	ldr	r2, [r5, #0]
 80047fe:	68d3      	ldr	r3, [r2, #12]
 8004800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004804:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	682a      	ldr	r2, [r5, #0]
 8004808:	6953      	ldr	r3, [r2, #20]
 800480a:	f023 0301 	bic.w	r3, r3, #1
 800480e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004810:	2320      	movs	r3, #32
 8004812:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004816:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800481a:	2300      	movs	r3, #0
 800481c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8004820:	2003      	movs	r0, #3
 8004822:	e000      	b.n	8004826 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8004824:	2000      	movs	r0, #0
}
 8004826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800482a <HAL_UART_Init>:
  if (huart == NULL)
 800482a:	b358      	cbz	r0, 8004884 <HAL_UART_Init+0x5a>
{
 800482c:	b510      	push	{r4, lr}
 800482e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004830:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004834:	b30b      	cbz	r3, 800487a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004836:	2324      	movs	r3, #36	; 0x24
 8004838:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	68d3      	ldr	r3, [r2, #12]
 8004840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004844:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004846:	4620      	mov	r0, r4
 8004848:	f7ff fe24 	bl	8004494 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	6913      	ldr	r3, [r2, #16]
 8004850:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004854:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	6953      	ldr	r3, [r2, #20]
 800485a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800485e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	68d3      	ldr	r3, [r2, #12]
 8004864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004868:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486a:	2000      	movs	r0, #0
 800486c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800486e:	2320      	movs	r3, #32
 8004870:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004874:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8004878:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800487a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800487e:	f000 fd37 	bl	80052f0 <HAL_UART_MspInit>
 8004882:	e7d8      	b.n	8004836 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004884:	2001      	movs	r0, #1
}
 8004886:	4770      	bx	lr

08004888 <HAL_UART_Transmit>:
{
 8004888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004890:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b20      	cmp	r3, #32
 8004898:	d155      	bne.n	8004946 <HAL_UART_Transmit+0xbe>
 800489a:	4604      	mov	r4, r0
 800489c:	460d      	mov	r5, r1
 800489e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80048a0:	2900      	cmp	r1, #0
 80048a2:	d055      	beq.n	8004950 <HAL_UART_Transmit+0xc8>
 80048a4:	2a00      	cmp	r2, #0
 80048a6:	d055      	beq.n	8004954 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80048a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d053      	beq.n	8004958 <HAL_UART_Transmit+0xd0>
 80048b0:	2301      	movs	r3, #1
 80048b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ba:	2321      	movs	r3, #33	; 0x21
 80048bc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80048c0:	f7fd ffd0 	bl	8002864 <HAL_GetTick>
 80048c4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80048c6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ca:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048ce:	e010      	b.n	80048f2 <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048d0:	9600      	str	r6, [sp, #0]
 80048d2:	463b      	mov	r3, r7
 80048d4:	2200      	movs	r2, #0
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	4620      	mov	r0, r4
 80048da:	f7ff ff75 	bl	80047c8 <UART_WaitOnFlagUntilTimeout>
 80048de:	2800      	cmp	r0, #0
 80048e0:	d13c      	bne.n	800495c <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80048e2:	882b      	ldrh	r3, [r5, #0]
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	b9c3      	cbnz	r3, 8004922 <HAL_UART_Transmit+0x9a>
          pData += 2U;
 80048f0:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80048f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	b1b3      	cbz	r3, 8004926 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 80048f8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004900:	68a3      	ldr	r3, [r4, #8]
 8004902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004906:	d0e3      	beq.n	80048d0 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004908:	9600      	str	r6, [sp, #0]
 800490a:	463b      	mov	r3, r7
 800490c:	2200      	movs	r2, #0
 800490e:	2180      	movs	r1, #128	; 0x80
 8004910:	4620      	mov	r0, r4
 8004912:	f7ff ff59 	bl	80047c8 <UART_WaitOnFlagUntilTimeout>
 8004916:	bb18      	cbnz	r0, 8004960 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004918:	782a      	ldrb	r2, [r5, #0]
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	3501      	adds	r5, #1
 8004920:	e7e7      	b.n	80048f2 <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8004922:	3501      	adds	r5, #1
 8004924:	e7e5      	b.n	80048f2 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004926:	9600      	str	r6, [sp, #0]
 8004928:	463b      	mov	r3, r7
 800492a:	2200      	movs	r2, #0
 800492c:	2140      	movs	r1, #64	; 0x40
 800492e:	4620      	mov	r0, r4
 8004930:	f7ff ff4a 	bl	80047c8 <UART_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	b9a8      	cbnz	r0, 8004964 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8004938:	2220      	movs	r2, #32
 800493a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800493e:	2200      	movs	r2, #0
 8004940:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8004944:	e000      	b.n	8004948 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8004946:	2302      	movs	r3, #2
}
 8004948:	4618      	mov	r0, r3
 800494a:	b002      	add	sp, #8
 800494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e7f9      	b.n	8004948 <HAL_UART_Transmit+0xc0>
 8004954:	2301      	movs	r3, #1
 8004956:	e7f7      	b.n	8004948 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8004958:	2302      	movs	r3, #2
 800495a:	e7f5      	b.n	8004948 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e7f3      	b.n	8004948 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e7f1      	b.n	8004948 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e7ef      	b.n	8004948 <HAL_UART_Transmit+0xc0>

08004968 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800496e:	2400      	movs	r4, #0
 8004970:	9403      	str	r4, [sp, #12]
 8004972:	9404      	str	r4, [sp, #16]
 8004974:	9405      	str	r4, [sp, #20]
 8004976:	9406      	str	r4, [sp, #24]
 8004978:	9407      	str	r4, [sp, #28]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800497a:	9400      	str	r4, [sp, #0]
 800497c:	4b3c      	ldr	r3, [pc, #240]	; (8004a70 <MX_GPIO_Init+0x108>)
 800497e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004980:	f042 0204 	orr.w	r2, r2, #4
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
 8004986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004988:	f002 0204 	and.w	r2, r2, #4
 800498c:	9200      	str	r2, [sp, #0]
 800498e:	9a00      	ldr	r2, [sp, #0]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004990:	9401      	str	r4, [sp, #4]
 8004992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	631a      	str	r2, [r3, #48]	; 0x30
 800499a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800499c:	f002 0201 	and.w	r2, r2, #1
 80049a0:	9201      	str	r2, [sp, #4]
 80049a2:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80049a4:	9402      	str	r4, [sp, #8]
 80049a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a8:	f042 0202 	orr.w	r2, r2, #2
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	9302      	str	r3, [sp, #8]
 80049b6:	9b02      	ldr	r3, [sp, #8]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80049b8:	4e2e      	ldr	r6, [pc, #184]	; (8004a74 <MX_GPIO_Init+0x10c>)
 80049ba:	4622      	mov	r2, r4
 80049bc:	2120      	movs	r1, #32
 80049be:	4630      	mov	r0, r6
 80049c0:	f7fe fa3e 	bl	8002e40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80049c4:	4f2c      	ldr	r7, [pc, #176]	; (8004a78 <MX_GPIO_Init+0x110>)
 80049c6:	4622      	mov	r2, r4
 80049c8:	2120      	movs	r1, #32
 80049ca:	4638      	mov	r0, r7
 80049cc:	f7fe fa38 	bl	8002e40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
 80049d0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004a7c <MX_GPIO_Init+0x114>
 80049d4:	4622      	mov	r2, r4
 80049d6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80049da:	4648      	mov	r0, r9
 80049dc:	f7fe fa30 	bl	8002e40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80049e0:	f04f 0a20 	mov.w	sl, #32
 80049e4:	f8cd a00c 	str.w	sl, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049e8:	2501      	movs	r5, #1
 80049ea:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ec:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ee:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f0:	a903      	add	r1, sp, #12
 80049f2:	4630      	mov	r0, r6
 80049f4:	f7fe f952 	bl	8002c9c <HAL_GPIO_Init>

	/*Configure GPIO pin : kill_Pin */
	GPIO_InitStruct.Pin = kill_Pin;
 80049f8:	2310      	movs	r3, #16
 80049fa:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049fc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8004a80 <MX_GPIO_Init+0x118>
 8004a00:	f8cd 8010 	str.w	r8, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a04:	9505      	str	r5, [sp, #20]
	HAL_GPIO_Init(kill_GPIO_Port, &GPIO_InitStruct);
 8004a06:	a903      	add	r1, sp, #12
 8004a08:	4638      	mov	r0, r7
 8004a0a:	f7fe f947 	bl	8002c9c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a0e:	f8cd a00c 	str.w	sl, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a12:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a16:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a18:	a903      	add	r1, sp, #12
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	f7fe f93e 	bl	8002c9c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_14;
 8004a20:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004a24:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a26:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2a:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2c:	a903      	add	r1, sp, #12
 8004a2e:	4648      	mov	r0, r9
 8004a30:	f7fe f934 	bl	8002c9c <HAL_GPIO_Init>

	/*Configure GPIO pin : PWM_RE_INT_Pin */
	GPIO_InitStruct.Pin = PWM_RE_INT_Pin;
 8004a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a38:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a3a:	f8cd 8010 	str.w	r8, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3e:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(PWM_RE_INT_GPIO_Port, &GPIO_InitStruct);
 8004a40:	a903      	add	r1, sp, #12
 8004a42:	4630      	mov	r0, r6
 8004a44:	f7fe f92a 	bl	8002c9c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004a48:	4622      	mov	r2, r4
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	200a      	movs	r0, #10
 8004a4e:	f7fe f8cd 	bl	8002bec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004a52:	200a      	movs	r0, #10
 8004a54:	f7fe f8fe 	bl	8002c54 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8004a58:	4622      	mov	r2, r4
 8004a5a:	2104      	movs	r1, #4
 8004a5c:	2017      	movs	r0, #23
 8004a5e:	f7fe f8c5 	bl	8002bec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a62:	2017      	movs	r0, #23
 8004a64:	f7fe f8f6 	bl	8002c54 <HAL_NVIC_EnableIRQ>

}
 8004a68:	b008      	add	sp, #32
 8004a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40020000 	.word	0x40020000
 8004a78:	40020800 	.word	0x40020800
 8004a7c:	40020400 	.word	0x40020400
 8004a80:	10110000 	.word	0x10110000

08004a84 <MX_USART2_UART_Init>:
static void MX_USART2_UART_Init(void) {
 8004a84:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 8004a86:	4808      	ldr	r0, [pc, #32]	; (8004aa8 <MX_USART2_UART_Init+0x24>)
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <MX_USART2_UART_Init+0x28>)
 8004a8a:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8004a8c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004a90:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a92:	2300      	movs	r3, #0
 8004a94:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004a96:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004a98:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004a9a:	220c      	movs	r2, #12
 8004a9c:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a9e:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004aa0:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004aa2:	f7ff fec2 	bl	800482a <HAL_UART_Init>
}
 8004aa6:	bd08      	pop	{r3, pc}
 8004aa8:	200005c8 	.word	0x200005c8
 8004aac:	40004400 	.word	0x40004400

08004ab0 <MX_USART6_UART_Init>:
static void MX_USART6_UART_Init(void) {
 8004ab0:	b508      	push	{r3, lr}
	huart6.Instance = USART6;
 8004ab2:	4808      	ldr	r0, [pc, #32]	; (8004ad4 <MX_USART6_UART_Init+0x24>)
 8004ab4:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <MX_USART6_UART_Init+0x28>)
 8004ab6:	6003      	str	r3, [r0, #0]
	huart6.Init.BaudRate = 115200;
 8004ab8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004abc:	6043      	str	r3, [r0, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6083      	str	r3, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8004ac2:	60c3      	str	r3, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8004ac4:	6103      	str	r3, [r0, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8004ac6:	220c      	movs	r2, #12
 8004ac8:	6142      	str	r2, [r0, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aca:	6183      	str	r3, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004acc:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8004ace:	f7ff feac 	bl	800482a <HAL_UART_Init>
}
 8004ad2:	bd08      	pop	{r3, pc}
 8004ad4:	20000564 	.word	0x20000564
 8004ad8:	40011400 	.word	0x40011400

08004adc <MX_I2C2_Init>:
static void MX_I2C2_Init(void) {
 8004adc:	b508      	push	{r3, lr}
	hi2c2.Instance = I2C2;
 8004ade:	4809      	ldr	r0, [pc, #36]	; (8004b04 <MX_I2C2_Init+0x28>)
 8004ae0:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <MX_I2C2_Init+0x2c>)
 8004ae2:	6003      	str	r3, [r0, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8004ae4:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <MX_I2C2_Init+0x30>)
 8004ae6:	6043      	str	r3, [r0, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	6083      	str	r3, [r0, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8004aec:	60c3      	str	r3, [r0, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004af2:	6102      	str	r2, [r0, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004af4:	6143      	str	r3, [r0, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8004af6:	6183      	str	r3, [r0, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004af8:	61c3      	str	r3, [r0, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004afa:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8004afc:	f7fe fbc2 	bl	8003284 <HAL_I2C_Init>
}
 8004b00:	bd08      	pop	{r3, pc}
 8004b02:	bf00      	nop
 8004b04:	20000344 	.word	0x20000344
 8004b08:	40005800 	.word	0x40005800
 8004b0c:	00061a80 	.word	0x00061a80

08004b10 <MX_TIM4_Init>:
static void MX_TIM4_Init(void) {
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004b14:	2400      	movs	r4, #0
 8004b16:	9408      	str	r4, [sp, #32]
 8004b18:	9409      	str	r4, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004b1a:	9401      	str	r4, [sp, #4]
 8004b1c:	9402      	str	r4, [sp, #8]
 8004b1e:	9403      	str	r4, [sp, #12]
 8004b20:	9404      	str	r4, [sp, #16]
 8004b22:	9405      	str	r4, [sp, #20]
 8004b24:	9406      	str	r4, [sp, #24]
 8004b26:	9407      	str	r4, [sp, #28]
	htim4.Instance = TIM4;
 8004b28:	4d1b      	ldr	r5, [pc, #108]	; (8004b98 <MX_TIM4_Init+0x88>)
 8004b2a:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <MX_TIM4_Init+0x8c>)
 8004b2c:	602b      	str	r3, [r5, #0]
	htim4.Init.Prescaler = 9;
 8004b2e:	2309      	movs	r3, #9
 8004b30:	606b      	str	r3, [r5, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b32:	60ac      	str	r4, [r5, #8]
	htim4.Init.Period = 20000;
 8004b34:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004b38:	60eb      	str	r3, [r5, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b3a:	612c      	str	r4, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b3c:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f7ff fb9b 	bl	800427a <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b44:	9408      	str	r4, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b46:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8004b48:	a908      	add	r1, sp, #32
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f7ff fc7e 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b50:	2360      	movs	r3, #96	; 0x60
 8004b52:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = 0;
 8004b54:	9402      	str	r4, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b56:	9403      	str	r4, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004b58:	2604      	movs	r6, #4
 8004b5a:	9605      	str	r6, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	eb0d 0106 	add.w	r1, sp, r6
 8004b62:	4628      	mov	r0, r5
 8004b64:	f7ff fbd4 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8004b68:	4632      	mov	r2, r6
 8004b6a:	eb0d 0106 	add.w	r1, sp, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f7ff fbce 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8004b74:	2208      	movs	r2, #8
 8004b76:	eb0d 0106 	add.w	r1, sp, r6
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f7ff fbc8 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8004b80:	220c      	movs	r2, #12
 8004b82:	eb0d 0106 	add.w	r1, sp, r6
 8004b86:	4628      	mov	r0, r5
 8004b88:	f7ff fbc2 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim4);
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f000 fb83 	bl	8005298 <HAL_TIM_MspPostInit>
}
 8004b92:	b00a      	add	sp, #40	; 0x28
 8004b94:	bd70      	pop	{r4, r5, r6, pc}
 8004b96:	bf00      	nop
 8004b98:	20000470 	.word	0x20000470
 8004b9c:	40000800 	.word	0x40000800

08004ba0 <MX_ADC1_Init>:
static void MX_ADC1_Init(void) {
 8004ba0:	b530      	push	{r4, r5, lr}
 8004ba2:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	9302      	str	r3, [sp, #8]
 8004bac:	9303      	str	r3, [sp, #12]
	hadc1.Instance = ADC1;
 8004bae:	4c11      	ldr	r4, [pc, #68]	; (8004bf4 <MX_ADC1_Init+0x54>)
 8004bb0:	4a11      	ldr	r2, [pc, #68]	; (8004bf8 <MX_ADC1_Init+0x58>)
 8004bb2:	6022      	str	r2, [r4, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004bb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bb8:	6062      	str	r2, [r4, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004bba:	60a3      	str	r3, [r4, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8004bbc:	6123      	str	r3, [r4, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8004bbe:	2501      	movs	r5, #1
 8004bc0:	7625      	strb	r5, [r4, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004bc2:	f884 3020 	strb.w	r3, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004bc6:	62e3      	str	r3, [r4, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004bc8:	4a0c      	ldr	r2, [pc, #48]	; (8004bfc <MX_ADC1_Init+0x5c>)
 8004bca:	62a2      	str	r2, [r4, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004bcc:	60e3      	str	r3, [r4, #12]
	hadc1.Init.NbrOfConversion = 1;
 8004bce:	61e5      	str	r5, [r4, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8004bd0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004bd4:	6165      	str	r5, [r4, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f7fd fef8 	bl	80029cc <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_7;
 8004bdc:	2307      	movs	r3, #7
 8004bde:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 1;
 8004be0:	9501      	str	r5, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8004be2:	2302      	movs	r3, #2
 8004be4:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004be6:	4669      	mov	r1, sp
 8004be8:	4620      	mov	r0, r4
 8004bea:	f7fd ff1b 	bl	8002a24 <HAL_ADC_ConfigChannel>
}
 8004bee:	b005      	add	sp, #20
 8004bf0:	bd30      	pop	{r4, r5, pc}
 8004bf2:	bf00      	nop
 8004bf4:	200004b0 	.word	0x200004b0
 8004bf8:	40012000 	.word	0x40012000
 8004bfc:	0f000001 	.word	0x0f000001

08004c00 <MX_SPI2_Init>:
static void MX_SPI2_Init(void) {
 8004c00:	b508      	push	{r3, lr}
	hspi2.Instance = SPI2;
 8004c02:	480c      	ldr	r0, [pc, #48]	; (8004c34 <MX_SPI2_Init+0x34>)
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <MX_SPI2_Init+0x38>)
 8004c06:	6003      	str	r3, [r0, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8004c08:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004c0c:	6043      	str	r3, [r0, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	6083      	str	r3, [r0, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c12:	60c3      	str	r3, [r0, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c14:	6103      	str	r3, [r0, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c16:	6143      	str	r3, [r0, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8004c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c1c:	6182      	str	r2, [r0, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004c1e:	2220      	movs	r2, #32
 8004c20:	61c2      	str	r2, [r0, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c22:	6203      	str	r3, [r0, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c24:	6243      	str	r3, [r0, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c26:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8004c28:	230a      	movs	r3, #10
 8004c2a:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8004c2c:	f7ff f9e8 	bl	8004000 <HAL_SPI_Init>
}
 8004c30:	bd08      	pop	{r3, pc}
 8004c32:	bf00      	nop
 8004c34:	20000418 	.word	0x20000418
 8004c38:	40003800 	.word	0x40003800

08004c3c <MX_TIM11_Init>:
static void MX_TIM11_Init(void) {
 8004c3c:	b508      	push	{r3, lr}
	htim11.Instance = TIM11;
 8004c3e:	4807      	ldr	r0, [pc, #28]	; (8004c5c <MX_TIM11_Init+0x20>)
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <MX_TIM11_Init+0x24>)
 8004c42:	6003      	str	r3, [r0, #0]
	htim11.Init.Prescaler = 100 - 1;
 8004c44:	2363      	movs	r3, #99	; 0x63
 8004c46:	6043      	str	r3, [r0, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6083      	str	r3, [r0, #8]
	htim11.Init.Period = 65535 - 1;
 8004c4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c50:	60c2      	str	r2, [r0, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c52:	6103      	str	r3, [r0, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c54:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8004c56:	f7ff faf7 	bl	8004248 <HAL_TIM_Base_Init>
}
 8004c5a:	bd08      	pop	{r3, pc}
 8004c5c:	20000518 	.word	0x20000518
 8004c60:	40014800 	.word	0x40014800

08004c64 <SystemClock_Config>:
void SystemClock_Config(void) {
 8004c64:	b530      	push	{r4, r5, lr}
 8004c66:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004c68:	2230      	movs	r2, #48	; 0x30
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	a808      	add	r0, sp, #32
 8004c6e:	f000 fc7a 	bl	8005566 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004c72:	2400      	movs	r4, #0
 8004c74:	9403      	str	r4, [sp, #12]
 8004c76:	9404      	str	r4, [sp, #16]
 8004c78:	9405      	str	r4, [sp, #20]
 8004c7a:	9406      	str	r4, [sp, #24]
 8004c7c:	9407      	str	r4, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE()
 8004c7e:	9401      	str	r4, [sp, #4]
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <SystemClock_Config+0x88>)
 8004c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c94:	9402      	str	r4, [sp, #8]
 8004c96:	4b16      	ldr	r3, [pc, #88]	; (8004cf0 <SystemClock_Config+0x8c>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ca6:	9302      	str	r3, [sp, #8]
 8004ca8:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004caa:	2502      	movs	r5, #2
 8004cac:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004cb2:	2310      	movs	r3, #16
 8004cb4:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cb6:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004cb8:	940f      	str	r4, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004cba:	2308      	movs	r3, #8
 8004cbc:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8004cbe:	2364      	movs	r3, #100	; 0x64
 8004cc0:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004cc2:	9512      	str	r5, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004cc8:	a808      	add	r0, sp, #32
 8004cca:	f7fe fe8f 	bl	80039ec <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004cce:	230f      	movs	r3, #15
 8004cd0:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cd2:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cd4:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cda:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cdc:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8004cde:	2103      	movs	r1, #3
 8004ce0:	a803      	add	r0, sp, #12
 8004ce2:	f7ff f8bb 	bl	8003e5c <HAL_RCC_ClockConfig>
}
 8004ce6:	b015      	add	sp, #84	; 0x54
 8004ce8:	bd30      	pop	{r4, r5, pc}
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40007000 	.word	0x40007000

08004cf4 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8004cf4:	4b01      	ldr	r3, [pc, #4]	; (8004cfc <PWM1_Set+0x8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6358      	str	r0, [r3, #52]	; 0x34
}
 8004cfa:	4770      	bx	lr
 8004cfc:	20000470 	.word	0x20000470

08004d00 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8004d00:	4b01      	ldr	r3, [pc, #4]	; (8004d08 <PWM2_Set+0x8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6398      	str	r0, [r3, #56]	; 0x38

}
 8004d06:	4770      	bx	lr
 8004d08:	20000470 	.word	0x20000470

08004d0c <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8004d0c:	4b01      	ldr	r3, [pc, #4]	; (8004d14 <PWM3_Set+0x8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8004d12:	4770      	bx	lr
 8004d14:	20000470 	.word	0x20000470

08004d18 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8004d18:	4b01      	ldr	r3, [pc, #4]	; (8004d20 <PWM4_Set+0x8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6418      	str	r0, [r3, #64]	; 0x40
}
 8004d1e:	4770      	bx	lr
 8004d20:	20000470 	.word	0x20000470

08004d24 <main>:
int main(void) {
 8004d24:	b510      	push	{r4, lr}
	HAL_Init();
 8004d26:	f7fd fd77 	bl	8002818 <HAL_Init>
	SystemClock_Config();
 8004d2a:	f7ff ff9b 	bl	8004c64 <SystemClock_Config>
	MX_GPIO_Init();
 8004d2e:	f7ff fe1b 	bl	8004968 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8004d32:	f7ff fea7 	bl	8004a84 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8004d36:	f7ff fed1 	bl	8004adc <MX_I2C2_Init>
	MX_TIM4_Init();
 8004d3a:	f7ff fee9 	bl	8004b10 <MX_TIM4_Init>
	MX_USART6_UART_Init();
 8004d3e:	f7ff feb7 	bl	8004ab0 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8004d42:	f7ff ff2d 	bl	8004ba0 <MX_ADC1_Init>
	MX_SPI2_Init();
 8004d46:	f7ff ff5b 	bl	8004c00 <MX_SPI2_Init>
	MX_TIM11_Init();
 8004d4a:	f7ff ff77 	bl	8004c3c <MX_TIM11_Init>
	HAL_TIM_Base_Start(&htim11);
 8004d4e:	481c      	ldr	r0, [pc, #112]	; (8004dc0 <main+0x9c>)
 8004d50:	f7ff fa1a 	bl	8004188 <HAL_TIM_Base_Start>
	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 8004d54:	481b      	ldr	r0, [pc, #108]	; (8004dc4 <main+0xa0>)
 8004d56:	f7fc f943 	bl	8000fe0 <imu_init>
 8004d5a:	b108      	cbz	r0, 8004d60 <main+0x3c>
int main(void) {
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e008      	b.n	8004d72 <main+0x4e>
		imu_calibrate();
 8004d60:	f7fc fef6 	bl	8001b50 <imu_calibrate>
 8004d64:	e7fa      	b.n	8004d5c <main+0x38>
		AckPayload_0[i] = 0;
 8004d66:	2200      	movs	r2, #0
 8004d68:	4917      	ldr	r1, [pc, #92]	; (8004dc8 <main+0xa4>)
 8004d6a:	54ca      	strb	r2, [r1, r3]
		AckPayload_1[i] = 0;
 8004d6c:	4917      	ldr	r1, [pc, #92]	; (8004dcc <main+0xa8>)
 8004d6e:	54ca      	strb	r2, [r1, r3]
	for (int i = 0; i < 31; ++i) {
 8004d70:	3301      	adds	r3, #1
 8004d72:	2b1e      	cmp	r3, #30
 8004d74:	ddf7      	ble.n	8004d66 <main+0x42>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004d76:	4c16      	ldr	r4, [pc, #88]	; (8004dd0 <main+0xac>)
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f7ff fb48 	bl	8004410 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004d80:	2104      	movs	r1, #4
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7ff fb44 	bl	8004410 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004d88:	2108      	movs	r1, #8
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f7ff fb40 	bl	8004410 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004d90:	210c      	movs	r1, #12
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7ff fb3c 	bl	8004410 <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8004d98:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004d9c:	f7ff ffaa 	bl	8004cf4 <PWM1_Set>
	PWM2_Set(2500);
 8004da0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004da4:	f7ff ffac 	bl	8004d00 <PWM2_Set>
	PWM3_Set(2500);
 8004da8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004dac:	f7ff ffae 	bl	8004d0c <PWM3_Set>
	PWM4_Set(2500);
 8004db0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004db4:	f7ff ffb0 	bl	8004d18 <PWM4_Set>
		main_loop = 1;
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <main+0xb0>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e7fb      	b.n	8004db8 <main+0x94>
 8004dc0:	20000518 	.word	0x20000518
 8004dc4:	20000344 	.word	0x20000344
 8004dc8:	200004f8 	.word	0x200004f8
 8004dcc:	20000058 	.word	0x20000058
 8004dd0:	20000470 	.word	0x20000470
 8004dd4:	200002f8 	.word	0x200002f8

08004dd8 <pulse_posedge_handler>:
 * (1 CW)     (3 CCW)
 *
 * This function gets called by the GPIO_EXTI callback when the PWM_RE_INT_Pin triggers an interrupt,
 * which is on the rising edge of every PWM pulse.
 */
void pulse_posedge_handler() {
 8004dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dda:	b083      	sub	sp, #12

	//Only want this to happen in main loop - not during init sequence
	if (main_loop) {
 8004ddc:	4b77      	ldr	r3, [pc, #476]	; (8004fbc <pulse_posedge_handler+0x1e4>)
 8004dde:	781c      	ldrb	r4, [r3, #0]
 8004de0:	b90c      	cbnz	r4, 8004de6 <pulse_posedge_handler+0xe>

#endif

	}

}
 8004de2:	b003      	add	sp, #12
 8004de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tim11_count = htim11.Instance->CNT; //read TIM11 counter value, used for integral calculations
 8004de6:	4f76      	ldr	r7, [pc, #472]	; (8004fc0 <pulse_posedge_handler+0x1e8>)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004dec:	4e75      	ldr	r6, [pc, #468]	; (8004fc4 <pulse_posedge_handler+0x1ec>)
 8004dee:	6035      	str	r5, [r6, #0]
		calc_RollPitchYaw(tim11_count);
 8004df0:	4628      	mov	r0, r5
 8004df2:	f7fd f915 	bl	8002020 <calc_RollPitchYaw>
		tim11_count = htim11.Instance->CNT; //read TIM11 counter value, used for integral calculations
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004dfa:	6030      	str	r0, [r6, #0]
		volatile int deltat = tim2-tim1;
 8004dfc:	1b40      	subs	r0, r0, r5
 8004dfe:	9001      	str	r0, [sp, #4]
		imu_pitch = get_pitch();
 8004e00:	f7fc f8b2 	bl	8000f68 <get_pitch>
 8004e04:	4b70      	ldr	r3, [pc, #448]	; (8004fc8 <pulse_posedge_handler+0x1f0>)
 8004e06:	ed83 0a00 	vstr	s0, [r3]
		imu_roll = get_roll();
 8004e0a:	f7fc f8a7 	bl	8000f5c <get_roll>
 8004e0e:	4b6f      	ldr	r3, [pc, #444]	; (8004fcc <pulse_posedge_handler+0x1f4>)
 8004e10:	ed83 0a00 	vstr	s0, [r3]
		imu_yaw = get_yaw();
 8004e14:	f7fc f8ae 	bl	8000f74 <get_yaw>
 8004e18:	4b6d      	ldr	r3, [pc, #436]	; (8004fd0 <pulse_posedge_handler+0x1f8>)
 8004e1a:	ed83 0a00 	vstr	s0, [r3]
		if (imu_yaw > 0 && !done) {
 8004e1e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e26:	f340 80ae 	ble.w	8004f86 <pulse_posedge_handler+0x1ae>
			imu_yaw -= 180.0f;
 8004e2a:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8004fd4 <pulse_posedge_handler+0x1fc>
 8004e2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004e32:	ed83 0a00 	vstr	s0, [r3]
		if (imu_yaw < 0 && !done) {
 8004e36:	4b66      	ldr	r3, [pc, #408]	; (8004fd0 <pulse_posedge_handler+0x1f8>)
 8004e38:	edd3 7a00 	vldr	s15, [r3]
 8004e3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e44:	f100 80a1 	bmi.w	8004f8a <pulse_posedge_handler+0x1b2>
		if (airmode) {
 8004e48:	4b63      	ldr	r3, [pc, #396]	; (8004fd8 <pulse_posedge_handler+0x200>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80a6 	beq.w	8004f9e <pulse_posedge_handler+0x1c6>
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, 0);
 8004e52:	eddf 0a62 	vldr	s1, [pc, #392]	; 8004fdc <pulse_posedge_handler+0x204>
 8004e56:	2000      	movs	r0, #0
 8004e58:	4b5b      	ldr	r3, [pc, #364]	; (8004fc8 <pulse_posedge_handler+0x1f0>)
 8004e5a:	ed93 0a00 	vldr	s0, [r3]
 8004e5e:	f7fd fbb9 	bl	80025d4 <pid_calculate_pitch>
 8004e62:	4b5f      	ldr	r3, [pc, #380]	; (8004fe0 <pulse_posedge_handler+0x208>)
 8004e64:	ed83 0a00 	vstr	s0, [r3]
			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 8004e68:	4b5e      	ldr	r3, [pc, #376]	; (8004fe4 <pulse_posedge_handler+0x20c>)
 8004e6a:	edd3 0a00 	vldr	s1, [r3]
 8004e6e:	2000      	movs	r0, #0
 8004e70:	4b56      	ldr	r3, [pc, #344]	; (8004fcc <pulse_posedge_handler+0x1f4>)
 8004e72:	ed93 0a00 	vldr	s0, [r3]
 8004e76:	f7fd fb2f 	bl	80024d8 <pid_calculate_roll>
 8004e7a:	4b5b      	ldr	r3, [pc, #364]	; (8004fe8 <pulse_posedge_handler+0x210>)
 8004e7c:	ed83 0a00 	vstr	s0, [r3]
			pid_output_yaw = pid_calculate_yaw(imu_yaw, 0, yaw_setpoint);
 8004e80:	4b5a      	ldr	r3, [pc, #360]	; (8004fec <pulse_posedge_handler+0x214>)
 8004e82:	edd3 0a00 	vldr	s1, [r3]
 8004e86:	2000      	movs	r0, #0
 8004e88:	4b51      	ldr	r3, [pc, #324]	; (8004fd0 <pulse_posedge_handler+0x1f8>)
 8004e8a:	ed93 0a00 	vldr	s0, [r3]
 8004e8e:	f7fd fc1f 	bl	80026d0 <pid_calculate_yaw>
 8004e92:	4b57      	ldr	r3, [pc, #348]	; (8004ff0 <pulse_posedge_handler+0x218>)
 8004e94:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 8004e98:	4b56      	ldr	r3, [pc, #344]	; (8004ff4 <pulse_posedge_handler+0x21c>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	4b52      	ldr	r3, [pc, #328]	; (8004fe8 <pulse_posedge_handler+0x210>)
 8004e9e:	edd3 7a00 	vldr	s15, [r3]
 8004ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ea6:	ee17 1a90 	vmov	r1, s15
 8004eaa:	1a42      	subs	r2, r0, r1
 8004eac:	4b4c      	ldr	r3, [pc, #304]	; (8004fe0 <pulse_posedge_handler+0x208>)
 8004eae:	edd3 7a00 	vldr	s15, [r3]
 8004eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eb6:	ee17 3a90 	vmov	r3, s15
 8004eba:	1ad4      	subs	r4, r2, r3
 8004ebc:	4d4e      	ldr	r5, [pc, #312]	; (8004ff8 <pulse_posedge_handler+0x220>)
 8004ebe:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 8004ec0:	441a      	add	r2, r3
 8004ec2:	4d4e      	ldr	r5, [pc, #312]	; (8004ffc <pulse_posedge_handler+0x224>)
 8004ec4:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 8004ec6:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 8004ec8:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 8004eca:	4d4d      	ldr	r5, [pc, #308]	; (8005000 <pulse_posedge_handler+0x228>)
 8004ecc:	6028      	str	r0, [r5, #0]
				+ (int) pid_output_pitch;
 8004ece:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 8004ed0:	494c      	ldr	r1, [pc, #304]	; (8005004 <pulse_posedge_handler+0x22c>)
 8004ed2:	600b      	str	r3, [r1, #0]
		if (esc1_total < ESC_MIN) {
 8004ed4:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8004ed8:	428c      	cmp	r4, r1
 8004eda:	dc03      	bgt.n	8004ee4 <pulse_posedge_handler+0x10c>
			esc1_total = ESC_MIN;
 8004edc:	4946      	ldr	r1, [pc, #280]	; (8004ff8 <pulse_posedge_handler+0x220>)
 8004ede:	f240 44e2 	movw	r4, #1250	; 0x4e2
 8004ee2:	600c      	str	r4, [r1, #0]
		if (esc1_total > ESC_MAX) {
 8004ee4:	4944      	ldr	r1, [pc, #272]	; (8004ff8 <pulse_posedge_handler+0x220>)
 8004ee6:	680c      	ldr	r4, [r1, #0]
 8004ee8:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004eec:	428c      	cmp	r4, r1
 8004eee:	dd03      	ble.n	8004ef8 <pulse_posedge_handler+0x120>
			esc1_total = ESC_MAX;
 8004ef0:	4941      	ldr	r1, [pc, #260]	; (8004ff8 <pulse_posedge_handler+0x220>)
 8004ef2:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8004ef6:	600c      	str	r4, [r1, #0]
		if (esc2_total < ESC_MIN) {
 8004ef8:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8004efc:	428a      	cmp	r2, r1
 8004efe:	dc03      	bgt.n	8004f08 <pulse_posedge_handler+0x130>
			esc2_total = ESC_MIN;
 8004f00:	4a3e      	ldr	r2, [pc, #248]	; (8004ffc <pulse_posedge_handler+0x224>)
 8004f02:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8004f06:	6011      	str	r1, [r2, #0]
		if (esc2_total > ESC_MAX) {
 8004f08:	4a3c      	ldr	r2, [pc, #240]	; (8004ffc <pulse_posedge_handler+0x224>)
 8004f0a:	6811      	ldr	r1, [r2, #0]
 8004f0c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004f10:	4291      	cmp	r1, r2
 8004f12:	dd03      	ble.n	8004f1c <pulse_posedge_handler+0x144>
			esc2_total = ESC_MAX;
 8004f14:	4a39      	ldr	r2, [pc, #228]	; (8004ffc <pulse_posedge_handler+0x224>)
 8004f16:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004f1a:	6011      	str	r1, [r2, #0]
		if (esc3_total < ESC_MIN) {
 8004f1c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8004f20:	4290      	cmp	r0, r2
 8004f22:	dc03      	bgt.n	8004f2c <pulse_posedge_handler+0x154>
			esc3_total = ESC_MIN;
 8004f24:	4a36      	ldr	r2, [pc, #216]	; (8005000 <pulse_posedge_handler+0x228>)
 8004f26:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8004f2a:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 8004f2c:	4a34      	ldr	r2, [pc, #208]	; (8005000 <pulse_posedge_handler+0x228>)
 8004f2e:	6811      	ldr	r1, [r2, #0]
 8004f30:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004f34:	4291      	cmp	r1, r2
 8004f36:	dd03      	ble.n	8004f40 <pulse_posedge_handler+0x168>
			esc3_total = ESC_MAX;
 8004f38:	4a31      	ldr	r2, [pc, #196]	; (8005000 <pulse_posedge_handler+0x228>)
 8004f3a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004f3e:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 8004f40:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8004f44:	4293      	cmp	r3, r2
 8004f46:	dc03      	bgt.n	8004f50 <pulse_posedge_handler+0x178>
			esc4_total = ESC_MIN;
 8004f48:	4b2e      	ldr	r3, [pc, #184]	; (8005004 <pulse_posedge_handler+0x22c>)
 8004f4a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8004f4e:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 8004f50:	4b2c      	ldr	r3, [pc, #176]	; (8005004 <pulse_posedge_handler+0x22c>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	dd03      	ble.n	8004f64 <pulse_posedge_handler+0x18c>
			esc4_total = ESC_MAX;
 8004f5c:	4b29      	ldr	r3, [pc, #164]	; (8005004 <pulse_posedge_handler+0x22c>)
 8004f5e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004f62:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8004f64:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <pulse_posedge_handler+0x220>)
 8004f66:	8818      	ldrh	r0, [r3, #0]
 8004f68:	f7ff fec4 	bl	8004cf4 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8004f6c:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <pulse_posedge_handler+0x224>)
 8004f6e:	8818      	ldrh	r0, [r3, #0]
 8004f70:	f7ff fec6 	bl	8004d00 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8004f74:	4b22      	ldr	r3, [pc, #136]	; (8005000 <pulse_posedge_handler+0x228>)
 8004f76:	8818      	ldrh	r0, [r3, #0]
 8004f78:	f7ff fec8 	bl	8004d0c <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8004f7c:	4b21      	ldr	r3, [pc, #132]	; (8005004 <pulse_posedge_handler+0x22c>)
 8004f7e:	8818      	ldrh	r0, [r3, #0]
 8004f80:	f7ff feca 	bl	8004d18 <PWM4_Set>
}
 8004f84:	e72d      	b.n	8004de2 <pulse_posedge_handler+0xa>
		bool done = 0;
 8004f86:	2400      	movs	r4, #0
 8004f88:	e755      	b.n	8004e36 <pulse_posedge_handler+0x5e>
		if (imu_yaw < 0 && !done) {
 8004f8a:	2c00      	cmp	r4, #0
 8004f8c:	f47f af5c 	bne.w	8004e48 <pulse_posedge_handler+0x70>
			imu_yaw += 180.0f;
 8004f90:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004fd4 <pulse_posedge_handler+0x1fc>
 8004f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f98:	edc3 7a00 	vstr	s15, [r3]
 8004f9c:	e754      	b.n	8004e48 <pulse_posedge_handler+0x70>
			pid_output_roll = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	4a11      	ldr	r2, [pc, #68]	; (8004fe8 <pulse_posedge_handler+0x210>)
 8004fa2:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 8004fa4:	4a0e      	ldr	r2, [pc, #56]	; (8004fe0 <pulse_posedge_handler+0x208>)
 8004fa6:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 8004fa8:	4a11      	ldr	r2, [pc, #68]	; (8004ff0 <pulse_posedge_handler+0x218>)
 8004faa:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8004fac:	f7fd fb00 	bl	80025b0 <reset_pid_roll>
			reset_pid_pitch();
 8004fb0:	f7fd fb7c 	bl	80026ac <reset_pid_pitch>
			reset_pid_yaw();
 8004fb4:	f7fd fbf8 	bl	80027a8 <reset_pid_yaw>
 8004fb8:	e76e      	b.n	8004e98 <pulse_posedge_handler+0xc0>
 8004fba:	bf00      	nop
 8004fbc:	200002f8 	.word	0x200002f8
 8004fc0:	20000518 	.word	0x20000518
 8004fc4:	20000310 	.word	0x20000310
 8004fc8:	20000560 	.word	0x20000560
 8004fcc:	2000055c 	.word	0x2000055c
 8004fd0:	20000414 	.word	0x20000414
 8004fd4:	43340000 	.word	0x43340000
 8004fd8:	200002e4 	.word	0x200002e4
 8004fdc:	00000000 	.word	0x00000000
 8004fe0:	200002fc 	.word	0x200002fc
 8004fe4:	20000308 	.word	0x20000308
 8004fe8:	20000300 	.word	0x20000300
 8004fec:	20000314 	.word	0x20000314
 8004ff0:	20000304 	.word	0x20000304
 8004ff4:	2000030c 	.word	0x2000030c
 8004ff8:	200002e8 	.word	0x200002e8
 8004ffc:	200002ec 	.word	0x200002ec
 8005000:	200002f0 	.word	0x200002f0
 8005004:	200002f4 	.word	0x200002f4

08005008 <__io_putchar>:
/*
 *	Some functions to allow the program to use printf,
 *	from http://www.emcu.eu/how-to-implement-printf-for-send-message-via-usb-on-stm32-nucleo-boards-using-atollic/
 *
 */
int __io_putchar(int ch) {
 8005008:	b510      	push	{r4, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	4604      	mov	r4, r0
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800500e:	a902      	add	r1, sp, #8
 8005010:	f801 0d04 	strb.w	r0, [r1, #-4]!

	HAL_UART_Transmit(&huart6, &*c, 1, 10);
 8005014:	230a      	movs	r3, #10
 8005016:	2201      	movs	r2, #1
 8005018:	4802      	ldr	r0, [pc, #8]	; (8005024 <__io_putchar+0x1c>)
 800501a:	f7ff fc35 	bl	8004888 <HAL_UART_Transmit>
	return ch;
}
 800501e:	4620      	mov	r0, r4
 8005020:	b002      	add	sp, #8
 8005022:	bd10      	pop	{r4, pc}
 8005024:	20000564 	.word	0x20000564

08005028 <_write>:

int _write(int file, char *ptr, int len) {
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	4616      	mov	r6, r2
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800502c:	2400      	movs	r4, #0
 800502e:	e005      	b.n	800503c <_write+0x14>
		__io_putchar(*ptr++);
 8005030:	1c4d      	adds	r5, r1, #1
 8005032:	7808      	ldrb	r0, [r1, #0]
 8005034:	f7ff ffe8 	bl	8005008 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005038:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 800503a:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800503c:	42b4      	cmp	r4, r6
 800503e:	dbf7      	blt.n	8005030 <_write+0x8>
	}
	return len;
}
 8005040:	4630      	mov	r0, r6
 8005042:	bd70      	pop	{r4, r5, r6, pc}

08005044 <HAL_GPIO_EXTI_Callback>:

//GPIO interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

//GPIO pin configured to capture rising edge interrupt of PWM signals
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 8005044:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005048:	d000      	beq.n	800504c <HAL_GPIO_EXTI_Callback+0x8>
 800504a:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800504c:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 800504e:	4b03      	ldr	r3, [pc, #12]	; (800505c <HAL_GPIO_EXTI_Callback+0x18>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b903      	cbnz	r3, 8005056 <HAL_GPIO_EXTI_Callback+0x12>

	if (GPIO_Pin == kill_Pin && main_loop) {
		//kill();
	}

}
 8005054:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 8005056:	f7ff febf 	bl	8004dd8 <pulse_posedge_handler>
}
 800505a:	e7fb      	b.n	8005054 <HAL_GPIO_EXTI_Callback+0x10>
 800505c:	200002f8 	.word	0x200002f8

08005060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005060:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005062:	2100      	movs	r1, #0
 8005064:	9100      	str	r1, [sp, #0]
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <HAL_MspInit+0x34>)
 8005068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800506a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800506e:	645a      	str	r2, [r3, #68]	; 0x44
 8005070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005072:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005076:	9200      	str	r2, [sp, #0]
 8005078:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	9101      	str	r1, [sp, #4]
 800507c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800507e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800508e:	b002      	add	sp, #8
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40023800 	.word	0x40023800

08005098 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005098:	b500      	push	{lr}
 800509a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800509c:	2300      	movs	r3, #0
 800509e:	9303      	str	r3, [sp, #12]
 80050a0:	9304      	str	r3, [sp, #16]
 80050a2:	9305      	str	r3, [sp, #20]
 80050a4:	9306      	str	r3, [sp, #24]
 80050a6:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80050a8:	6802      	ldr	r2, [r0, #0]
 80050aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050ae:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d002      	beq.n	80050bc <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80050b6:	b009      	add	sp, #36	; 0x24
 80050b8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80050bc:	2100      	movs	r1, #0
 80050be:	9101      	str	r1, [sp, #4]
 80050c0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80050c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ca:	645a      	str	r2, [r3, #68]	; 0x44
 80050cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ce:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80050d2:	9201      	str	r2, [sp, #4]
 80050d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d6:	9102      	str	r1, [sp, #8]
 80050d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	9302      	str	r3, [sp, #8]
 80050e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ee:	2303      	movs	r3, #3
 80050f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f2:	a903      	add	r1, sp, #12
 80050f4:	4801      	ldr	r0, [pc, #4]	; (80050fc <HAL_ADC_MspInit+0x64>)
 80050f6:	f7fd fdd1 	bl	8002c9c <HAL_GPIO_Init>
}
 80050fa:	e7dc      	b.n	80050b6 <HAL_ADC_MspInit+0x1e>
 80050fc:	40020000 	.word	0x40020000

08005100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005104:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005106:	2300      	movs	r3, #0
 8005108:	9303      	str	r3, [sp, #12]
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	9305      	str	r3, [sp, #20]
 800510e:	9306      	str	r3, [sp, #24]
 8005110:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8005112:	6802      	ldr	r2, [r0, #0]
 8005114:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <HAL_I2C_MspInit+0x90>)
 8005116:	429a      	cmp	r2, r3
 8005118:	d002      	beq.n	8005120 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800511a:	b009      	add	sp, #36	; 0x24
 800511c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005120:	2500      	movs	r5, #0
 8005122:	9501      	str	r5, [sp, #4]
 8005124:	4c1b      	ldr	r4, [pc, #108]	; (8005194 <HAL_I2C_MspInit+0x94>)
 8005126:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005128:	f043 0302 	orr.w	r3, r3, #2
 800512c:	6323      	str	r3, [r4, #48]	; 0x30
 800512e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800513e:	f04f 0912 	mov.w	r9, #18
 8005142:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005146:	f04f 0801 	mov.w	r8, #1
 800514a:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800514e:	2703      	movs	r7, #3
 8005150:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005152:	2304      	movs	r3, #4
 8005154:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005156:	4e10      	ldr	r6, [pc, #64]	; (8005198 <HAL_I2C_MspInit+0x98>)
 8005158:	a903      	add	r1, sp, #12
 800515a:	4630      	mov	r0, r6
 800515c:	f7fd fd9e 	bl	8002c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005160:	2308      	movs	r3, #8
 8005162:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005164:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005168:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800516e:	2309      	movs	r3, #9
 8005170:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005172:	a903      	add	r1, sp, #12
 8005174:	4630      	mov	r0, r6
 8005176:	f7fd fd91 	bl	8002c9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800517a:	9502      	str	r5, [sp, #8]
 800517c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800517e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005182:	6423      	str	r3, [r4, #64]	; 0x40
 8005184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	9302      	str	r3, [sp, #8]
 800518c:	9b02      	ldr	r3, [sp, #8]
}
 800518e:	e7c4      	b.n	800511a <HAL_I2C_MspInit+0x1a>
 8005190:	40005800 	.word	0x40005800
 8005194:	40023800 	.word	0x40023800
 8005198:	40020400 	.word	0x40020400

0800519c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800519c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a0:	2300      	movs	r3, #0
 80051a2:	9303      	str	r3, [sp, #12]
 80051a4:	9304      	str	r3, [sp, #16]
 80051a6:	9305      	str	r3, [sp, #20]
 80051a8:	9306      	str	r3, [sp, #24]
 80051aa:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 80051ac:	6802      	ldr	r2, [r0, #0]
 80051ae:	4b1f      	ldr	r3, [pc, #124]	; (800522c <HAL_SPI_MspInit+0x90>)
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80051b4:	b009      	add	sp, #36	; 0x24
 80051b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80051b8:	2400      	movs	r4, #0
 80051ba:	9400      	str	r4, [sp, #0]
 80051bc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80051c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40
 80051c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80051ce:	9200      	str	r2, [sp, #0]
 80051d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051d2:	9401      	str	r4, [sp, #4]
 80051d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d6:	f042 0204 	orr.w	r2, r2, #4
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
 80051dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051de:	f002 0204 	and.w	r2, r2, #4
 80051e2:	9201      	str	r2, [sp, #4]
 80051e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051e6:	9402      	str	r4, [sp, #8]
 80051e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ea:	f042 0202 	orr.w	r2, r2, #2
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	9302      	str	r3, [sp, #8]
 80051f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051fa:	2304      	movs	r3, #4
 80051fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2702      	movs	r7, #2
 8005200:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005202:	2603      	movs	r6, #3
 8005204:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005206:	2505      	movs	r5, #5
 8005208:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800520a:	a903      	add	r1, sp, #12
 800520c:	4808      	ldr	r0, [pc, #32]	; (8005230 <HAL_SPI_MspInit+0x94>)
 800520e:	f7fd fd45 	bl	8002c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005212:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005216:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005218:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800521c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800521e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005220:	a903      	add	r1, sp, #12
 8005222:	4804      	ldr	r0, [pc, #16]	; (8005234 <HAL_SPI_MspInit+0x98>)
 8005224:	f7fd fd3a 	bl	8002c9c <HAL_GPIO_Init>
}
 8005228:	e7c4      	b.n	80051b4 <HAL_SPI_MspInit+0x18>
 800522a:	bf00      	nop
 800522c:	40003800 	.word	0x40003800
 8005230:	40020800 	.word	0x40020800
 8005234:	40020400 	.word	0x40020400

08005238 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 8005238:	6802      	ldr	r2, [r0, #0]
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <HAL_TIM_PWM_MspInit+0x28>)
 800523c:	429a      	cmp	r2, r3
 800523e:	d000      	beq.n	8005242 <HAL_TIM_PWM_MspInit+0xa>
 8005240:	4770      	bx	lr
{
 8005242:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005244:	2300      	movs	r3, #0
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	4b06      	ldr	r3, [pc, #24]	; (8005264 <HAL_TIM_PWM_MspInit+0x2c>)
 800524a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800524c:	f042 0204 	orr.w	r2, r2, #4
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800525c:	b002      	add	sp, #8
 800525e:	4770      	bx	lr
 8005260:	40000800 	.word	0x40000800
 8005264:	40023800 	.word	0x40023800

08005268 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8005268:	6802      	ldr	r2, [r0, #0]
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <HAL_TIM_Base_MspInit+0x28>)
 800526c:	429a      	cmp	r2, r3
 800526e:	d000      	beq.n	8005272 <HAL_TIM_Base_MspInit+0xa>
 8005270:	4770      	bx	lr
{
 8005272:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005274:	2300      	movs	r3, #0
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_TIM_Base_MspInit+0x2c>)
 800527a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005280:	645a      	str	r2, [r3, #68]	; 0x44
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800528c:	b002      	add	sp, #8
 800528e:	4770      	bx	lr
 8005290:	40014800 	.word	0x40014800
 8005294:	40023800 	.word	0x40023800

08005298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005298:	b500      	push	{lr}
 800529a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800529c:	2300      	movs	r3, #0
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	9302      	str	r3, [sp, #8]
 80052a2:	9303      	str	r3, [sp, #12]
 80052a4:	9304      	str	r3, [sp, #16]
 80052a6:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 80052a8:	6802      	ldr	r2, [r0, #0]
 80052aa:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <HAL_TIM_MspPostInit+0x4c>)
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d002      	beq.n	80052b6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80052b0:	b007      	add	sp, #28
 80052b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b6:	2300      	movs	r3, #0
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_TIM_MspPostInit+0x50>)
 80052bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052be:	f042 0202 	orr.w	r2, r2, #2
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80052ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80052d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d4:	2302      	movs	r3, #2
 80052d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80052d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052da:	a901      	add	r1, sp, #4
 80052dc:	4803      	ldr	r0, [pc, #12]	; (80052ec <HAL_TIM_MspPostInit+0x54>)
 80052de:	f7fd fcdd 	bl	8002c9c <HAL_GPIO_Init>
}
 80052e2:	e7e5      	b.n	80052b0 <HAL_TIM_MspPostInit+0x18>
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40020400 	.word	0x40020400

080052f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052f0:	b500      	push	{lr}
 80052f2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f4:	2300      	movs	r3, #0
 80052f6:	9305      	str	r3, [sp, #20]
 80052f8:	9306      	str	r3, [sp, #24]
 80052fa:	9307      	str	r3, [sp, #28]
 80052fc:	9308      	str	r3, [sp, #32]
 80052fe:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 8005300:	6803      	ldr	r3, [r0, #0]
 8005302:	4a29      	ldr	r2, [pc, #164]	; (80053a8 <HAL_UART_MspInit+0xb8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d005      	beq.n	8005314 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8005308:	4a28      	ldr	r2, [pc, #160]	; (80053ac <HAL_UART_MspInit+0xbc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d027      	beq.n	800535e <HAL_UART_MspInit+0x6e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800530e:	b00b      	add	sp, #44	; 0x2c
 8005310:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8005314:	2100      	movs	r1, #0
 8005316:	9101      	str	r1, [sp, #4]
 8005318:	4b25      	ldr	r3, [pc, #148]	; (80053b0 <HAL_UART_MspInit+0xc0>)
 800531a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
 8005322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005324:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005328:	9201      	str	r2, [sp, #4]
 800532a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800532c:	9102      	str	r1, [sp, #8]
 800532e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005330:	f042 0201 	orr.w	r2, r2, #1
 8005334:	631a      	str	r2, [r3, #48]	; 0x30
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	9302      	str	r3, [sp, #8]
 800533e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005340:	230c      	movs	r3, #12
 8005342:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005344:	2302      	movs	r3, #2
 8005346:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005348:	2301      	movs	r3, #1
 800534a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800534c:	2303      	movs	r3, #3
 800534e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005350:	2307      	movs	r3, #7
 8005352:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005354:	a905      	add	r1, sp, #20
 8005356:	4817      	ldr	r0, [pc, #92]	; (80053b4 <HAL_UART_MspInit+0xc4>)
 8005358:	f7fd fca0 	bl	8002c9c <HAL_GPIO_Init>
 800535c:	e7d7      	b.n	800530e <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800535e:	2100      	movs	r1, #0
 8005360:	9103      	str	r1, [sp, #12]
 8005362:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <HAL_UART_MspInit+0xc0>)
 8005364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005366:	f042 0220 	orr.w	r2, r2, #32
 800536a:	645a      	str	r2, [r3, #68]	; 0x44
 800536c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800536e:	f002 0220 	and.w	r2, r2, #32
 8005372:	9203      	str	r2, [sp, #12]
 8005374:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005376:	9104      	str	r1, [sp, #16]
 8005378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537a:	f042 0204 	orr.w	r2, r2, #4
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	9304      	str	r3, [sp, #16]
 8005388:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800538a:	23c0      	movs	r3, #192	; 0xc0
 800538c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538e:	2302      	movs	r3, #2
 8005390:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005392:	2301      	movs	r3, #1
 8005394:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005396:	2303      	movs	r3, #3
 8005398:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800539a:	2308      	movs	r3, #8
 800539c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800539e:	a905      	add	r1, sp, #20
 80053a0:	4805      	ldr	r0, [pc, #20]	; (80053b8 <HAL_UART_MspInit+0xc8>)
 80053a2:	f7fd fc7b 	bl	8002c9c <HAL_GPIO_Init>
}
 80053a6:	e7b2      	b.n	800530e <HAL_UART_MspInit+0x1e>
 80053a8:	40004400 	.word	0x40004400
 80053ac:	40011400 	.word	0x40011400
 80053b0:	40023800 	.word	0x40023800
 80053b4:	40020000 	.word	0x40020000
 80053b8:	40020800 	.word	0x40020800

080053bc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80053bc:	4770      	bx	lr

080053be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053be:	e7fe      	b.n	80053be <HardFault_Handler>

080053c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053c0:	e7fe      	b.n	80053c0 <MemManage_Handler>

080053c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053c2:	e7fe      	b.n	80053c2 <BusFault_Handler>

080053c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053c4:	e7fe      	b.n	80053c4 <UsageFault_Handler>

080053c6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053c6:	4770      	bx	lr

080053c8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053c8:	4770      	bx	lr

080053ca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053ca:	4770      	bx	lr

080053cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053ce:	f7fd fa3d 	bl	800284c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053d2:	bd08      	pop	{r3, pc}

080053d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80053d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80053d6:	2010      	movs	r0, #16
 80053d8:	f7fd fd42 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80053dc:	bd08      	pop	{r3, pc}

080053de <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80053de:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80053e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053e4:	f7fd fd3c 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80053e8:	bd08      	pop	{r3, pc}

080053ea <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053ea:	b570      	push	{r4, r5, r6, lr}
 80053ec:	460d      	mov	r5, r1
 80053ee:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053f0:	2400      	movs	r4, #0
 80053f2:	e004      	b.n	80053fe <_read+0x14>
	{
		*ptr++ = __io_getchar();
 80053f4:	f3af 8000 	nop.w
 80053f8:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053fa:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 80053fc:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053fe:	42b4      	cmp	r4, r6
 8005400:	dbf8      	blt.n	80053f4 <_read+0xa>
	}

return len;
}
 8005402:	4630      	mov	r0, r6
 8005404:	bd70      	pop	{r4, r5, r6, pc}

08005406 <_close>:
}

int _close(int file)
{
	return -1;
}
 8005406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800540a:	4770      	bx	lr

0800540c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800540c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005410:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005412:	2000      	movs	r0, #0
 8005414:	4770      	bx	lr

08005416 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005416:	2001      	movs	r0, #1
 8005418:	4770      	bx	lr

0800541a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800541a:	2000      	movs	r0, #0
 800541c:	4770      	bx	lr
	...

08005420 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005420:	b508      	push	{r3, lr}
 8005422:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005424:	4a0b      	ldr	r2, [pc, #44]	; (8005454 <_sbrk+0x34>)
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	b142      	cbz	r2, 800543c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800542a:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <_sbrk+0x34>)
 800542c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800542e:	4403      	add	r3, r0
 8005430:	466a      	mov	r2, sp
 8005432:	4293      	cmp	r3, r2
 8005434:	d806      	bhi.n	8005444 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8005436:	4a07      	ldr	r2, [pc, #28]	; (8005454 <_sbrk+0x34>)
 8005438:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800543a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800543c:	4a05      	ldr	r2, [pc, #20]	; (8005454 <_sbrk+0x34>)
 800543e:	4906      	ldr	r1, [pc, #24]	; (8005458 <_sbrk+0x38>)
 8005440:	6011      	str	r1, [r2, #0]
 8005442:	e7f2      	b.n	800542a <_sbrk+0xa>
		errno = ENOMEM;
 8005444:	f000 f85a 	bl	80054fc <__errno>
 8005448:	230c      	movs	r3, #12
 800544a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800544c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005450:	e7f3      	b.n	800543a <_sbrk+0x1a>
 8005452:	bf00      	nop
 8005454:	20000318 	.word	0x20000318
 8005458:	20000610 	.word	0x20000610

0800545c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800545c:	490f      	ldr	r1, [pc, #60]	; (800549c <SystemInit+0x40>)
 800545e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005462:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800546a:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <SystemInit+0x44>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005474:	2000      	movs	r0, #0
 8005476:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800547e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005482:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005484:	4a07      	ldr	r2, [pc, #28]	; (80054a4 <SystemInit+0x48>)
 8005486:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800548e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005490:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005492:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005496:	608b      	str	r3, [r1, #8]
#endif
}
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	e000ed00 	.word	0xe000ed00
 80054a0:	40023800 	.word	0x40023800
 80054a4:	24003010 	.word	0x24003010

080054a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80054a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80054ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80054ae:	e003      	b.n	80054b8 <LoopCopyDataInit>

080054b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80054b0:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80054b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80054b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80054b6:	3104      	adds	r1, #4

080054b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80054b8:	480b      	ldr	r0, [pc, #44]	; (80054e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80054ba:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80054bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80054be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80054c0:	d3f6      	bcc.n	80054b0 <CopyDataInit>
  ldr  r2, =_sbss
 80054c2:	4a0b      	ldr	r2, [pc, #44]	; (80054f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80054c4:	e002      	b.n	80054cc <LoopFillZerobss>

080054c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80054c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80054c8:	f842 3b04 	str.w	r3, [r2], #4

080054cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80054ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80054d0:	d3f9      	bcc.n	80054c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80054d2:	f7ff ffc3 	bl	800545c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054d6:	f000 f817 	bl	8005508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054da:	f7ff fc23 	bl	8004d24 <main>
  bx  lr    
 80054de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80054e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80054e4:	08009dd8 	.word	0x08009dd8
  ldr  r0, =_sdata
 80054e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80054ec:	20000250 	.word	0x20000250
  ldr  r2, =_sbss
 80054f0:	20000250 	.word	0x20000250
  ldr  r3, = _ebss
 80054f4:	20000610 	.word	0x20000610

080054f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054f8:	e7fe      	b.n	80054f8 <ADC_IRQHandler>
	...

080054fc <__errno>:
 80054fc:	4b01      	ldr	r3, [pc, #4]	; (8005504 <__errno+0x8>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	2000007c 	.word	0x2000007c

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4e0d      	ldr	r6, [pc, #52]	; (8005540 <__libc_init_array+0x38>)
 800550c:	4c0d      	ldr	r4, [pc, #52]	; (8005544 <__libc_init_array+0x3c>)
 800550e:	1ba4      	subs	r4, r4, r6
 8005510:	10a4      	asrs	r4, r4, #2
 8005512:	2500      	movs	r5, #0
 8005514:	42a5      	cmp	r5, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	4e0b      	ldr	r6, [pc, #44]	; (8005548 <__libc_init_array+0x40>)
 800551a:	4c0c      	ldr	r4, [pc, #48]	; (800554c <__libc_init_array+0x44>)
 800551c:	f004 f946 	bl	80097ac <_init>
 8005520:	1ba4      	subs	r4, r4, r6
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	2500      	movs	r5, #0
 8005526:	42a5      	cmp	r5, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005530:	4798      	blx	r3
 8005532:	3501      	adds	r5, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800553a:	4798      	blx	r3
 800553c:	3501      	adds	r5, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	08009dd0 	.word	0x08009dd0
 8005544:	08009dd0 	.word	0x08009dd0
 8005548:	08009dd0 	.word	0x08009dd0
 800554c:	08009dd4 	.word	0x08009dd4

08005550 <memcpy>:
 8005550:	b510      	push	{r4, lr}
 8005552:	1e43      	subs	r3, r0, #1
 8005554:	440a      	add	r2, r1
 8005556:	4291      	cmp	r1, r2
 8005558:	d100      	bne.n	800555c <memcpy+0xc>
 800555a:	bd10      	pop	{r4, pc}
 800555c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005564:	e7f7      	b.n	8005556 <memcpy+0x6>

08005566 <memset>:
 8005566:	4402      	add	r2, r0
 8005568:	4603      	mov	r3, r0
 800556a:	4293      	cmp	r3, r2
 800556c:	d100      	bne.n	8005570 <memset+0xa>
 800556e:	4770      	bx	lr
 8005570:	f803 1b01 	strb.w	r1, [r3], #1
 8005574:	e7f9      	b.n	800556a <memset+0x4>

08005576 <__cvt>:
 8005576:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800557a:	ec55 4b10 	vmov	r4, r5, d0
 800557e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005580:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005584:	2d00      	cmp	r5, #0
 8005586:	460e      	mov	r6, r1
 8005588:	4691      	mov	r9, r2
 800558a:	4619      	mov	r1, r3
 800558c:	bfb8      	it	lt
 800558e:	4622      	movlt	r2, r4
 8005590:	462b      	mov	r3, r5
 8005592:	f027 0720 	bic.w	r7, r7, #32
 8005596:	bfbb      	ittet	lt
 8005598:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800559c:	461d      	movlt	r5, r3
 800559e:	2300      	movge	r3, #0
 80055a0:	232d      	movlt	r3, #45	; 0x2d
 80055a2:	bfb8      	it	lt
 80055a4:	4614      	movlt	r4, r2
 80055a6:	2f46      	cmp	r7, #70	; 0x46
 80055a8:	700b      	strb	r3, [r1, #0]
 80055aa:	d004      	beq.n	80055b6 <__cvt+0x40>
 80055ac:	2f45      	cmp	r7, #69	; 0x45
 80055ae:	d100      	bne.n	80055b2 <__cvt+0x3c>
 80055b0:	3601      	adds	r6, #1
 80055b2:	2102      	movs	r1, #2
 80055b4:	e000      	b.n	80055b8 <__cvt+0x42>
 80055b6:	2103      	movs	r1, #3
 80055b8:	ab03      	add	r3, sp, #12
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	ab02      	add	r3, sp, #8
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	4632      	mov	r2, r6
 80055c2:	4653      	mov	r3, sl
 80055c4:	ec45 4b10 	vmov	d0, r4, r5
 80055c8:	f000 fdfa 	bl	80061c0 <_dtoa_r>
 80055cc:	2f47      	cmp	r7, #71	; 0x47
 80055ce:	4680      	mov	r8, r0
 80055d0:	d102      	bne.n	80055d8 <__cvt+0x62>
 80055d2:	f019 0f01 	tst.w	r9, #1
 80055d6:	d026      	beq.n	8005626 <__cvt+0xb0>
 80055d8:	2f46      	cmp	r7, #70	; 0x46
 80055da:	eb08 0906 	add.w	r9, r8, r6
 80055de:	d111      	bne.n	8005604 <__cvt+0x8e>
 80055e0:	f898 3000 	ldrb.w	r3, [r8]
 80055e4:	2b30      	cmp	r3, #48	; 0x30
 80055e6:	d10a      	bne.n	80055fe <__cvt+0x88>
 80055e8:	2200      	movs	r2, #0
 80055ea:	2300      	movs	r3, #0
 80055ec:	4620      	mov	r0, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	f7fb fc6c 	bl	8000ecc <__aeabi_dcmpeq>
 80055f4:	b918      	cbnz	r0, 80055fe <__cvt+0x88>
 80055f6:	f1c6 0601 	rsb	r6, r6, #1
 80055fa:	f8ca 6000 	str.w	r6, [sl]
 80055fe:	f8da 3000 	ldr.w	r3, [sl]
 8005602:	4499      	add	r9, r3
 8005604:	2200      	movs	r2, #0
 8005606:	2300      	movs	r3, #0
 8005608:	4620      	mov	r0, r4
 800560a:	4629      	mov	r1, r5
 800560c:	f7fb fc5e 	bl	8000ecc <__aeabi_dcmpeq>
 8005610:	b938      	cbnz	r0, 8005622 <__cvt+0xac>
 8005612:	2230      	movs	r2, #48	; 0x30
 8005614:	9b03      	ldr	r3, [sp, #12]
 8005616:	454b      	cmp	r3, r9
 8005618:	d205      	bcs.n	8005626 <__cvt+0xb0>
 800561a:	1c59      	adds	r1, r3, #1
 800561c:	9103      	str	r1, [sp, #12]
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	e7f8      	b.n	8005614 <__cvt+0x9e>
 8005622:	f8cd 900c 	str.w	r9, [sp, #12]
 8005626:	9b03      	ldr	r3, [sp, #12]
 8005628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800562a:	eba3 0308 	sub.w	r3, r3, r8
 800562e:	4640      	mov	r0, r8
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	b004      	add	sp, #16
 8005634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005638 <__exponent>:
 8005638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800563a:	2900      	cmp	r1, #0
 800563c:	4604      	mov	r4, r0
 800563e:	bfba      	itte	lt
 8005640:	4249      	neglt	r1, r1
 8005642:	232d      	movlt	r3, #45	; 0x2d
 8005644:	232b      	movge	r3, #43	; 0x2b
 8005646:	2909      	cmp	r1, #9
 8005648:	f804 2b02 	strb.w	r2, [r4], #2
 800564c:	7043      	strb	r3, [r0, #1]
 800564e:	dd20      	ble.n	8005692 <__exponent+0x5a>
 8005650:	f10d 0307 	add.w	r3, sp, #7
 8005654:	461f      	mov	r7, r3
 8005656:	260a      	movs	r6, #10
 8005658:	fb91 f5f6 	sdiv	r5, r1, r6
 800565c:	fb06 1115 	mls	r1, r6, r5, r1
 8005660:	3130      	adds	r1, #48	; 0x30
 8005662:	2d09      	cmp	r5, #9
 8005664:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005668:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800566c:	4629      	mov	r1, r5
 800566e:	dc09      	bgt.n	8005684 <__exponent+0x4c>
 8005670:	3130      	adds	r1, #48	; 0x30
 8005672:	3b02      	subs	r3, #2
 8005674:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005678:	42bb      	cmp	r3, r7
 800567a:	4622      	mov	r2, r4
 800567c:	d304      	bcc.n	8005688 <__exponent+0x50>
 800567e:	1a10      	subs	r0, r2, r0
 8005680:	b003      	add	sp, #12
 8005682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005684:	4613      	mov	r3, r2
 8005686:	e7e7      	b.n	8005658 <__exponent+0x20>
 8005688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800568c:	f804 2b01 	strb.w	r2, [r4], #1
 8005690:	e7f2      	b.n	8005678 <__exponent+0x40>
 8005692:	2330      	movs	r3, #48	; 0x30
 8005694:	4419      	add	r1, r3
 8005696:	7083      	strb	r3, [r0, #2]
 8005698:	1d02      	adds	r2, r0, #4
 800569a:	70c1      	strb	r1, [r0, #3]
 800569c:	e7ef      	b.n	800567e <__exponent+0x46>
	...

080056a0 <_printf_float>:
 80056a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a4:	b08d      	sub	sp, #52	; 0x34
 80056a6:	460c      	mov	r4, r1
 80056a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80056ac:	4616      	mov	r6, r2
 80056ae:	461f      	mov	r7, r3
 80056b0:	4605      	mov	r5, r0
 80056b2:	f001 fcb7 	bl	8007024 <_localeconv_r>
 80056b6:	6803      	ldr	r3, [r0, #0]
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fb fb56 	bl	8000d6c <strlen>
 80056c0:	2300      	movs	r3, #0
 80056c2:	930a      	str	r3, [sp, #40]	; 0x28
 80056c4:	f8d8 3000 	ldr.w	r3, [r8]
 80056c8:	9005      	str	r0, [sp, #20]
 80056ca:	3307      	adds	r3, #7
 80056cc:	f023 0307 	bic.w	r3, r3, #7
 80056d0:	f103 0208 	add.w	r2, r3, #8
 80056d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80056d8:	f8d4 b000 	ldr.w	fp, [r4]
 80056dc:	f8c8 2000 	str.w	r2, [r8]
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80056ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056f0:	9307      	str	r3, [sp, #28]
 80056f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80056f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056fa:	4ba7      	ldr	r3, [pc, #668]	; (8005998 <_printf_float+0x2f8>)
 80056fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005700:	f7fb fc16 	bl	8000f30 <__aeabi_dcmpun>
 8005704:	bb70      	cbnz	r0, 8005764 <_printf_float+0xc4>
 8005706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800570a:	4ba3      	ldr	r3, [pc, #652]	; (8005998 <_printf_float+0x2f8>)
 800570c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005710:	f7fb fbf0 	bl	8000ef4 <__aeabi_dcmple>
 8005714:	bb30      	cbnz	r0, 8005764 <_printf_float+0xc4>
 8005716:	2200      	movs	r2, #0
 8005718:	2300      	movs	r3, #0
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fb fbdf 	bl	8000ee0 <__aeabi_dcmplt>
 8005722:	b110      	cbz	r0, 800572a <_printf_float+0x8a>
 8005724:	232d      	movs	r3, #45	; 0x2d
 8005726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800572a:	4a9c      	ldr	r2, [pc, #624]	; (800599c <_printf_float+0x2fc>)
 800572c:	4b9c      	ldr	r3, [pc, #624]	; (80059a0 <_printf_float+0x300>)
 800572e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005732:	bf8c      	ite	hi
 8005734:	4690      	movhi	r8, r2
 8005736:	4698      	movls	r8, r3
 8005738:	2303      	movs	r3, #3
 800573a:	f02b 0204 	bic.w	r2, fp, #4
 800573e:	6123      	str	r3, [r4, #16]
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	f04f 0900 	mov.w	r9, #0
 8005746:	9700      	str	r7, [sp, #0]
 8005748:	4633      	mov	r3, r6
 800574a:	aa0b      	add	r2, sp, #44	; 0x2c
 800574c:	4621      	mov	r1, r4
 800574e:	4628      	mov	r0, r5
 8005750:	f000 f9e6 	bl	8005b20 <_printf_common>
 8005754:	3001      	adds	r0, #1
 8005756:	f040 808d 	bne.w	8005874 <_printf_float+0x1d4>
 800575a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800575e:	b00d      	add	sp, #52	; 0x34
 8005760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005764:	4642      	mov	r2, r8
 8005766:	464b      	mov	r3, r9
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	f7fb fbe0 	bl	8000f30 <__aeabi_dcmpun>
 8005770:	b110      	cbz	r0, 8005778 <_printf_float+0xd8>
 8005772:	4a8c      	ldr	r2, [pc, #560]	; (80059a4 <_printf_float+0x304>)
 8005774:	4b8c      	ldr	r3, [pc, #560]	; (80059a8 <_printf_float+0x308>)
 8005776:	e7da      	b.n	800572e <_printf_float+0x8e>
 8005778:	6861      	ldr	r1, [r4, #4]
 800577a:	1c4b      	adds	r3, r1, #1
 800577c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005780:	a80a      	add	r0, sp, #40	; 0x28
 8005782:	d13e      	bne.n	8005802 <_printf_float+0x162>
 8005784:	2306      	movs	r3, #6
 8005786:	6063      	str	r3, [r4, #4]
 8005788:	2300      	movs	r3, #0
 800578a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800578e:	ab09      	add	r3, sp, #36	; 0x24
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	ec49 8b10 	vmov	d0, r8, r9
 8005796:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800579a:	6022      	str	r2, [r4, #0]
 800579c:	f8cd a004 	str.w	sl, [sp, #4]
 80057a0:	6861      	ldr	r1, [r4, #4]
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7ff fee7 	bl	8005576 <__cvt>
 80057a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80057ac:	2b47      	cmp	r3, #71	; 0x47
 80057ae:	4680      	mov	r8, r0
 80057b0:	d109      	bne.n	80057c6 <_printf_float+0x126>
 80057b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b4:	1cd8      	adds	r0, r3, #3
 80057b6:	db02      	blt.n	80057be <_printf_float+0x11e>
 80057b8:	6862      	ldr	r2, [r4, #4]
 80057ba:	4293      	cmp	r3, r2
 80057bc:	dd47      	ble.n	800584e <_printf_float+0x1ae>
 80057be:	f1aa 0a02 	sub.w	sl, sl, #2
 80057c2:	fa5f fa8a 	uxtb.w	sl, sl
 80057c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80057ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057cc:	d824      	bhi.n	8005818 <_printf_float+0x178>
 80057ce:	3901      	subs	r1, #1
 80057d0:	4652      	mov	r2, sl
 80057d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057d6:	9109      	str	r1, [sp, #36]	; 0x24
 80057d8:	f7ff ff2e 	bl	8005638 <__exponent>
 80057dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057de:	1813      	adds	r3, r2, r0
 80057e0:	2a01      	cmp	r2, #1
 80057e2:	4681      	mov	r9, r0
 80057e4:	6123      	str	r3, [r4, #16]
 80057e6:	dc02      	bgt.n	80057ee <_printf_float+0x14e>
 80057e8:	6822      	ldr	r2, [r4, #0]
 80057ea:	07d1      	lsls	r1, r2, #31
 80057ec:	d501      	bpl.n	80057f2 <_printf_float+0x152>
 80057ee:	3301      	adds	r3, #1
 80057f0:	6123      	str	r3, [r4, #16]
 80057f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0a5      	beq.n	8005746 <_printf_float+0xa6>
 80057fa:	232d      	movs	r3, #45	; 0x2d
 80057fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005800:	e7a1      	b.n	8005746 <_printf_float+0xa6>
 8005802:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005806:	f000 8177 	beq.w	8005af8 <_printf_float+0x458>
 800580a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800580e:	d1bb      	bne.n	8005788 <_printf_float+0xe8>
 8005810:	2900      	cmp	r1, #0
 8005812:	d1b9      	bne.n	8005788 <_printf_float+0xe8>
 8005814:	2301      	movs	r3, #1
 8005816:	e7b6      	b.n	8005786 <_printf_float+0xe6>
 8005818:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800581c:	d119      	bne.n	8005852 <_printf_float+0x1b2>
 800581e:	2900      	cmp	r1, #0
 8005820:	6863      	ldr	r3, [r4, #4]
 8005822:	dd0c      	ble.n	800583e <_printf_float+0x19e>
 8005824:	6121      	str	r1, [r4, #16]
 8005826:	b913      	cbnz	r3, 800582e <_printf_float+0x18e>
 8005828:	6822      	ldr	r2, [r4, #0]
 800582a:	07d2      	lsls	r2, r2, #31
 800582c:	d502      	bpl.n	8005834 <_printf_float+0x194>
 800582e:	3301      	adds	r3, #1
 8005830:	440b      	add	r3, r1
 8005832:	6123      	str	r3, [r4, #16]
 8005834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005836:	65a3      	str	r3, [r4, #88]	; 0x58
 8005838:	f04f 0900 	mov.w	r9, #0
 800583c:	e7d9      	b.n	80057f2 <_printf_float+0x152>
 800583e:	b913      	cbnz	r3, 8005846 <_printf_float+0x1a6>
 8005840:	6822      	ldr	r2, [r4, #0]
 8005842:	07d0      	lsls	r0, r2, #31
 8005844:	d501      	bpl.n	800584a <_printf_float+0x1aa>
 8005846:	3302      	adds	r3, #2
 8005848:	e7f3      	b.n	8005832 <_printf_float+0x192>
 800584a:	2301      	movs	r3, #1
 800584c:	e7f1      	b.n	8005832 <_printf_float+0x192>
 800584e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005852:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005856:	4293      	cmp	r3, r2
 8005858:	db05      	blt.n	8005866 <_printf_float+0x1c6>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	6123      	str	r3, [r4, #16]
 800585e:	07d1      	lsls	r1, r2, #31
 8005860:	d5e8      	bpl.n	8005834 <_printf_float+0x194>
 8005862:	3301      	adds	r3, #1
 8005864:	e7e5      	b.n	8005832 <_printf_float+0x192>
 8005866:	2b00      	cmp	r3, #0
 8005868:	bfd4      	ite	le
 800586a:	f1c3 0302 	rsble	r3, r3, #2
 800586e:	2301      	movgt	r3, #1
 8005870:	4413      	add	r3, r2
 8005872:	e7de      	b.n	8005832 <_printf_float+0x192>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	055a      	lsls	r2, r3, #21
 8005878:	d407      	bmi.n	800588a <_printf_float+0x1ea>
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	4642      	mov	r2, r8
 800587e:	4631      	mov	r1, r6
 8005880:	4628      	mov	r0, r5
 8005882:	47b8      	blx	r7
 8005884:	3001      	adds	r0, #1
 8005886:	d12b      	bne.n	80058e0 <_printf_float+0x240>
 8005888:	e767      	b.n	800575a <_printf_float+0xba>
 800588a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800588e:	f240 80dc 	bls.w	8005a4a <_printf_float+0x3aa>
 8005892:	2200      	movs	r2, #0
 8005894:	2300      	movs	r3, #0
 8005896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800589a:	f7fb fb17 	bl	8000ecc <__aeabi_dcmpeq>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d033      	beq.n	800590a <_printf_float+0x26a>
 80058a2:	2301      	movs	r3, #1
 80058a4:	4a41      	ldr	r2, [pc, #260]	; (80059ac <_printf_float+0x30c>)
 80058a6:	4631      	mov	r1, r6
 80058a8:	4628      	mov	r0, r5
 80058aa:	47b8      	blx	r7
 80058ac:	3001      	adds	r0, #1
 80058ae:	f43f af54 	beq.w	800575a <_printf_float+0xba>
 80058b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058b6:	429a      	cmp	r2, r3
 80058b8:	db02      	blt.n	80058c0 <_printf_float+0x220>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	07d8      	lsls	r0, r3, #31
 80058be:	d50f      	bpl.n	80058e0 <_printf_float+0x240>
 80058c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058c4:	4631      	mov	r1, r6
 80058c6:	4628      	mov	r0, r5
 80058c8:	47b8      	blx	r7
 80058ca:	3001      	adds	r0, #1
 80058cc:	f43f af45 	beq.w	800575a <_printf_float+0xba>
 80058d0:	f04f 0800 	mov.w	r8, #0
 80058d4:	f104 091a 	add.w	r9, r4, #26
 80058d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058da:	3b01      	subs	r3, #1
 80058dc:	4543      	cmp	r3, r8
 80058de:	dc09      	bgt.n	80058f4 <_printf_float+0x254>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	079b      	lsls	r3, r3, #30
 80058e4:	f100 8103 	bmi.w	8005aee <_printf_float+0x44e>
 80058e8:	68e0      	ldr	r0, [r4, #12]
 80058ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ec:	4298      	cmp	r0, r3
 80058ee:	bfb8      	it	lt
 80058f0:	4618      	movlt	r0, r3
 80058f2:	e734      	b.n	800575e <_printf_float+0xbe>
 80058f4:	2301      	movs	r3, #1
 80058f6:	464a      	mov	r2, r9
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f af2b 	beq.w	800575a <_printf_float+0xba>
 8005904:	f108 0801 	add.w	r8, r8, #1
 8005908:	e7e6      	b.n	80058d8 <_printf_float+0x238>
 800590a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	dc2b      	bgt.n	8005968 <_printf_float+0x2c8>
 8005910:	2301      	movs	r3, #1
 8005912:	4a26      	ldr	r2, [pc, #152]	; (80059ac <_printf_float+0x30c>)
 8005914:	4631      	mov	r1, r6
 8005916:	4628      	mov	r0, r5
 8005918:	47b8      	blx	r7
 800591a:	3001      	adds	r0, #1
 800591c:	f43f af1d 	beq.w	800575a <_printf_float+0xba>
 8005920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005922:	b923      	cbnz	r3, 800592e <_printf_float+0x28e>
 8005924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005926:	b913      	cbnz	r3, 800592e <_printf_float+0x28e>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	07d9      	lsls	r1, r3, #31
 800592c:	d5d8      	bpl.n	80058e0 <_printf_float+0x240>
 800592e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005932:	4631      	mov	r1, r6
 8005934:	4628      	mov	r0, r5
 8005936:	47b8      	blx	r7
 8005938:	3001      	adds	r0, #1
 800593a:	f43f af0e 	beq.w	800575a <_printf_float+0xba>
 800593e:	f04f 0900 	mov.w	r9, #0
 8005942:	f104 0a1a 	add.w	sl, r4, #26
 8005946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005948:	425b      	negs	r3, r3
 800594a:	454b      	cmp	r3, r9
 800594c:	dc01      	bgt.n	8005952 <_printf_float+0x2b2>
 800594e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005950:	e794      	b.n	800587c <_printf_float+0x1dc>
 8005952:	2301      	movs	r3, #1
 8005954:	4652      	mov	r2, sl
 8005956:	4631      	mov	r1, r6
 8005958:	4628      	mov	r0, r5
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	f43f aefc 	beq.w	800575a <_printf_float+0xba>
 8005962:	f109 0901 	add.w	r9, r9, #1
 8005966:	e7ee      	b.n	8005946 <_printf_float+0x2a6>
 8005968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800596a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800596c:	429a      	cmp	r2, r3
 800596e:	bfa8      	it	ge
 8005970:	461a      	movge	r2, r3
 8005972:	2a00      	cmp	r2, #0
 8005974:	4691      	mov	r9, r2
 8005976:	dd07      	ble.n	8005988 <_printf_float+0x2e8>
 8005978:	4613      	mov	r3, r2
 800597a:	4631      	mov	r1, r6
 800597c:	4642      	mov	r2, r8
 800597e:	4628      	mov	r0, r5
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	f43f aee9 	beq.w	800575a <_printf_float+0xba>
 8005988:	f104 031a 	add.w	r3, r4, #26
 800598c:	f04f 0b00 	mov.w	fp, #0
 8005990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005994:	9306      	str	r3, [sp, #24]
 8005996:	e015      	b.n	80059c4 <_printf_float+0x324>
 8005998:	7fefffff 	.word	0x7fefffff
 800599c:	08009a80 	.word	0x08009a80
 80059a0:	08009a7c 	.word	0x08009a7c
 80059a4:	08009a88 	.word	0x08009a88
 80059a8:	08009a84 	.word	0x08009a84
 80059ac:	08009a8c 	.word	0x08009a8c
 80059b0:	2301      	movs	r3, #1
 80059b2:	9a06      	ldr	r2, [sp, #24]
 80059b4:	4631      	mov	r1, r6
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b8      	blx	r7
 80059ba:	3001      	adds	r0, #1
 80059bc:	f43f aecd 	beq.w	800575a <_printf_float+0xba>
 80059c0:	f10b 0b01 	add.w	fp, fp, #1
 80059c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80059c8:	ebaa 0309 	sub.w	r3, sl, r9
 80059cc:	455b      	cmp	r3, fp
 80059ce:	dcef      	bgt.n	80059b0 <_printf_float+0x310>
 80059d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059d4:	429a      	cmp	r2, r3
 80059d6:	44d0      	add	r8, sl
 80059d8:	db15      	blt.n	8005a06 <_printf_float+0x366>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	07da      	lsls	r2, r3, #31
 80059de:	d412      	bmi.n	8005a06 <_printf_float+0x366>
 80059e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059e4:	eba3 020a 	sub.w	r2, r3, sl
 80059e8:	eba3 0a01 	sub.w	sl, r3, r1
 80059ec:	4592      	cmp	sl, r2
 80059ee:	bfa8      	it	ge
 80059f0:	4692      	movge	sl, r2
 80059f2:	f1ba 0f00 	cmp.w	sl, #0
 80059f6:	dc0e      	bgt.n	8005a16 <_printf_float+0x376>
 80059f8:	f04f 0800 	mov.w	r8, #0
 80059fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a00:	f104 091a 	add.w	r9, r4, #26
 8005a04:	e019      	b.n	8005a3a <_printf_float+0x39a>
 8005a06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a0a:	4631      	mov	r1, r6
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b8      	blx	r7
 8005a10:	3001      	adds	r0, #1
 8005a12:	d1e5      	bne.n	80059e0 <_printf_float+0x340>
 8005a14:	e6a1      	b.n	800575a <_printf_float+0xba>
 8005a16:	4653      	mov	r3, sl
 8005a18:	4642      	mov	r2, r8
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	47b8      	blx	r7
 8005a20:	3001      	adds	r0, #1
 8005a22:	d1e9      	bne.n	80059f8 <_printf_float+0x358>
 8005a24:	e699      	b.n	800575a <_printf_float+0xba>
 8005a26:	2301      	movs	r3, #1
 8005a28:	464a      	mov	r2, r9
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	47b8      	blx	r7
 8005a30:	3001      	adds	r0, #1
 8005a32:	f43f ae92 	beq.w	800575a <_printf_float+0xba>
 8005a36:	f108 0801 	add.w	r8, r8, #1
 8005a3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	eba3 030a 	sub.w	r3, r3, sl
 8005a44:	4543      	cmp	r3, r8
 8005a46:	dcee      	bgt.n	8005a26 <_printf_float+0x386>
 8005a48:	e74a      	b.n	80058e0 <_printf_float+0x240>
 8005a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a4c:	2a01      	cmp	r2, #1
 8005a4e:	dc01      	bgt.n	8005a54 <_printf_float+0x3b4>
 8005a50:	07db      	lsls	r3, r3, #31
 8005a52:	d53a      	bpl.n	8005aca <_printf_float+0x42a>
 8005a54:	2301      	movs	r3, #1
 8005a56:	4642      	mov	r2, r8
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f43f ae7b 	beq.w	800575a <_printf_float+0xba>
 8005a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b8      	blx	r7
 8005a6e:	3001      	adds	r0, #1
 8005a70:	f108 0801 	add.w	r8, r8, #1
 8005a74:	f43f ae71 	beq.w	800575a <_printf_float+0xba>
 8005a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005a80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a84:	2300      	movs	r3, #0
 8005a86:	f7fb fa21 	bl	8000ecc <__aeabi_dcmpeq>
 8005a8a:	b9c8      	cbnz	r0, 8005ac0 <_printf_float+0x420>
 8005a8c:	4653      	mov	r3, sl
 8005a8e:	4642      	mov	r2, r8
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	d10e      	bne.n	8005ab8 <_printf_float+0x418>
 8005a9a:	e65e      	b.n	800575a <_printf_float+0xba>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4652      	mov	r2, sl
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	47b8      	blx	r7
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	f43f ae57 	beq.w	800575a <_printf_float+0xba>
 8005aac:	f108 0801 	add.w	r8, r8, #1
 8005ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	4543      	cmp	r3, r8
 8005ab6:	dcf1      	bgt.n	8005a9c <_printf_float+0x3fc>
 8005ab8:	464b      	mov	r3, r9
 8005aba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005abe:	e6de      	b.n	800587e <_printf_float+0x1de>
 8005ac0:	f04f 0800 	mov.w	r8, #0
 8005ac4:	f104 0a1a 	add.w	sl, r4, #26
 8005ac8:	e7f2      	b.n	8005ab0 <_printf_float+0x410>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e7df      	b.n	8005a8e <_printf_float+0x3ee>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	464a      	mov	r2, r9
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b8      	blx	r7
 8005ad8:	3001      	adds	r0, #1
 8005ada:	f43f ae3e 	beq.w	800575a <_printf_float+0xba>
 8005ade:	f108 0801 	add.w	r8, r8, #1
 8005ae2:	68e3      	ldr	r3, [r4, #12]
 8005ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	4543      	cmp	r3, r8
 8005aea:	dcf0      	bgt.n	8005ace <_printf_float+0x42e>
 8005aec:	e6fc      	b.n	80058e8 <_printf_float+0x248>
 8005aee:	f04f 0800 	mov.w	r8, #0
 8005af2:	f104 0919 	add.w	r9, r4, #25
 8005af6:	e7f4      	b.n	8005ae2 <_printf_float+0x442>
 8005af8:	2900      	cmp	r1, #0
 8005afa:	f43f ae8b 	beq.w	8005814 <_printf_float+0x174>
 8005afe:	2300      	movs	r3, #0
 8005b00:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005b04:	ab09      	add	r3, sp, #36	; 0x24
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	ec49 8b10 	vmov	d0, r8, r9
 8005b0c:	6022      	str	r2, [r4, #0]
 8005b0e:	f8cd a004 	str.w	sl, [sp, #4]
 8005b12:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b16:	4628      	mov	r0, r5
 8005b18:	f7ff fd2d 	bl	8005576 <__cvt>
 8005b1c:	4680      	mov	r8, r0
 8005b1e:	e648      	b.n	80057b2 <_printf_float+0x112>

08005b20 <_printf_common>:
 8005b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b24:	4691      	mov	r9, r2
 8005b26:	461f      	mov	r7, r3
 8005b28:	688a      	ldr	r2, [r1, #8]
 8005b2a:	690b      	ldr	r3, [r1, #16]
 8005b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b30:	4293      	cmp	r3, r2
 8005b32:	bfb8      	it	lt
 8005b34:	4613      	movlt	r3, r2
 8005b36:	f8c9 3000 	str.w	r3, [r9]
 8005b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b3e:	4606      	mov	r6, r0
 8005b40:	460c      	mov	r4, r1
 8005b42:	b112      	cbz	r2, 8005b4a <_printf_common+0x2a>
 8005b44:	3301      	adds	r3, #1
 8005b46:	f8c9 3000 	str.w	r3, [r9]
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	0699      	lsls	r1, r3, #26
 8005b4e:	bf42      	ittt	mi
 8005b50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b54:	3302      	addmi	r3, #2
 8005b56:	f8c9 3000 	strmi.w	r3, [r9]
 8005b5a:	6825      	ldr	r5, [r4, #0]
 8005b5c:	f015 0506 	ands.w	r5, r5, #6
 8005b60:	d107      	bne.n	8005b72 <_printf_common+0x52>
 8005b62:	f104 0a19 	add.w	sl, r4, #25
 8005b66:	68e3      	ldr	r3, [r4, #12]
 8005b68:	f8d9 2000 	ldr.w	r2, [r9]
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	42ab      	cmp	r3, r5
 8005b70:	dc28      	bgt.n	8005bc4 <_printf_common+0xa4>
 8005b72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	3300      	adds	r3, #0
 8005b7a:	bf18      	it	ne
 8005b7c:	2301      	movne	r3, #1
 8005b7e:	0692      	lsls	r2, r2, #26
 8005b80:	d42d      	bmi.n	8005bde <_printf_common+0xbe>
 8005b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b86:	4639      	mov	r1, r7
 8005b88:	4630      	mov	r0, r6
 8005b8a:	47c0      	blx	r8
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d020      	beq.n	8005bd2 <_printf_common+0xb2>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	68e5      	ldr	r5, [r4, #12]
 8005b94:	f8d9 2000 	ldr.w	r2, [r9]
 8005b98:	f003 0306 	and.w	r3, r3, #6
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	bf08      	it	eq
 8005ba0:	1aad      	subeq	r5, r5, r2
 8005ba2:	68a3      	ldr	r3, [r4, #8]
 8005ba4:	6922      	ldr	r2, [r4, #16]
 8005ba6:	bf0c      	ite	eq
 8005ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bac:	2500      	movne	r5, #0
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	bfc4      	itt	gt
 8005bb2:	1a9b      	subgt	r3, r3, r2
 8005bb4:	18ed      	addgt	r5, r5, r3
 8005bb6:	f04f 0900 	mov.w	r9, #0
 8005bba:	341a      	adds	r4, #26
 8005bbc:	454d      	cmp	r5, r9
 8005bbe:	d11a      	bne.n	8005bf6 <_printf_common+0xd6>
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	e008      	b.n	8005bd6 <_printf_common+0xb6>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	4639      	mov	r1, r7
 8005bca:	4630      	mov	r0, r6
 8005bcc:	47c0      	blx	r8
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d103      	bne.n	8005bda <_printf_common+0xba>
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bda:	3501      	adds	r5, #1
 8005bdc:	e7c3      	b.n	8005b66 <_printf_common+0x46>
 8005bde:	18e1      	adds	r1, r4, r3
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	2030      	movs	r0, #48	; 0x30
 8005be4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005be8:	4422      	add	r2, r4
 8005bea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	e7c5      	b.n	8005b82 <_printf_common+0x62>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	47c0      	blx	r8
 8005c00:	3001      	adds	r0, #1
 8005c02:	d0e6      	beq.n	8005bd2 <_printf_common+0xb2>
 8005c04:	f109 0901 	add.w	r9, r9, #1
 8005c08:	e7d8      	b.n	8005bbc <_printf_common+0x9c>
	...

08005c0c <_printf_i>:
 8005c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c14:	460c      	mov	r4, r1
 8005c16:	7e09      	ldrb	r1, [r1, #24]
 8005c18:	b085      	sub	sp, #20
 8005c1a:	296e      	cmp	r1, #110	; 0x6e
 8005c1c:	4617      	mov	r7, r2
 8005c1e:	4606      	mov	r6, r0
 8005c20:	4698      	mov	r8, r3
 8005c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c24:	f000 80b3 	beq.w	8005d8e <_printf_i+0x182>
 8005c28:	d822      	bhi.n	8005c70 <_printf_i+0x64>
 8005c2a:	2963      	cmp	r1, #99	; 0x63
 8005c2c:	d036      	beq.n	8005c9c <_printf_i+0x90>
 8005c2e:	d80a      	bhi.n	8005c46 <_printf_i+0x3a>
 8005c30:	2900      	cmp	r1, #0
 8005c32:	f000 80b9 	beq.w	8005da8 <_printf_i+0x19c>
 8005c36:	2958      	cmp	r1, #88	; 0x58
 8005c38:	f000 8083 	beq.w	8005d42 <_printf_i+0x136>
 8005c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c44:	e032      	b.n	8005cac <_printf_i+0xa0>
 8005c46:	2964      	cmp	r1, #100	; 0x64
 8005c48:	d001      	beq.n	8005c4e <_printf_i+0x42>
 8005c4a:	2969      	cmp	r1, #105	; 0x69
 8005c4c:	d1f6      	bne.n	8005c3c <_printf_i+0x30>
 8005c4e:	6820      	ldr	r0, [r4, #0]
 8005c50:	6813      	ldr	r3, [r2, #0]
 8005c52:	0605      	lsls	r5, r0, #24
 8005c54:	f103 0104 	add.w	r1, r3, #4
 8005c58:	d52a      	bpl.n	8005cb0 <_printf_i+0xa4>
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6011      	str	r1, [r2, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da03      	bge.n	8005c6a <_printf_i+0x5e>
 8005c62:	222d      	movs	r2, #45	; 0x2d
 8005c64:	425b      	negs	r3, r3
 8005c66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c6a:	486f      	ldr	r0, [pc, #444]	; (8005e28 <_printf_i+0x21c>)
 8005c6c:	220a      	movs	r2, #10
 8005c6e:	e039      	b.n	8005ce4 <_printf_i+0xd8>
 8005c70:	2973      	cmp	r1, #115	; 0x73
 8005c72:	f000 809d 	beq.w	8005db0 <_printf_i+0x1a4>
 8005c76:	d808      	bhi.n	8005c8a <_printf_i+0x7e>
 8005c78:	296f      	cmp	r1, #111	; 0x6f
 8005c7a:	d020      	beq.n	8005cbe <_printf_i+0xb2>
 8005c7c:	2970      	cmp	r1, #112	; 0x70
 8005c7e:	d1dd      	bne.n	8005c3c <_printf_i+0x30>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	f043 0320 	orr.w	r3, r3, #32
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	e003      	b.n	8005c92 <_printf_i+0x86>
 8005c8a:	2975      	cmp	r1, #117	; 0x75
 8005c8c:	d017      	beq.n	8005cbe <_printf_i+0xb2>
 8005c8e:	2978      	cmp	r1, #120	; 0x78
 8005c90:	d1d4      	bne.n	8005c3c <_printf_i+0x30>
 8005c92:	2378      	movs	r3, #120	; 0x78
 8005c94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c98:	4864      	ldr	r0, [pc, #400]	; (8005e2c <_printf_i+0x220>)
 8005c9a:	e055      	b.n	8005d48 <_printf_i+0x13c>
 8005c9c:	6813      	ldr	r3, [r2, #0]
 8005c9e:	1d19      	adds	r1, r3, #4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6011      	str	r1, [r2, #0]
 8005ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cac:	2301      	movs	r3, #1
 8005cae:	e08c      	b.n	8005dca <_printf_i+0x1be>
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6011      	str	r1, [r2, #0]
 8005cb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cb8:	bf18      	it	ne
 8005cba:	b21b      	sxthne	r3, r3
 8005cbc:	e7cf      	b.n	8005c5e <_printf_i+0x52>
 8005cbe:	6813      	ldr	r3, [r2, #0]
 8005cc0:	6825      	ldr	r5, [r4, #0]
 8005cc2:	1d18      	adds	r0, r3, #4
 8005cc4:	6010      	str	r0, [r2, #0]
 8005cc6:	0628      	lsls	r0, r5, #24
 8005cc8:	d501      	bpl.n	8005cce <_printf_i+0xc2>
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	e002      	b.n	8005cd4 <_printf_i+0xc8>
 8005cce:	0668      	lsls	r0, r5, #25
 8005cd0:	d5fb      	bpl.n	8005cca <_printf_i+0xbe>
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	4854      	ldr	r0, [pc, #336]	; (8005e28 <_printf_i+0x21c>)
 8005cd6:	296f      	cmp	r1, #111	; 0x6f
 8005cd8:	bf14      	ite	ne
 8005cda:	220a      	movne	r2, #10
 8005cdc:	2208      	moveq	r2, #8
 8005cde:	2100      	movs	r1, #0
 8005ce0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ce4:	6865      	ldr	r5, [r4, #4]
 8005ce6:	60a5      	str	r5, [r4, #8]
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	f2c0 8095 	blt.w	8005e18 <_printf_i+0x20c>
 8005cee:	6821      	ldr	r1, [r4, #0]
 8005cf0:	f021 0104 	bic.w	r1, r1, #4
 8005cf4:	6021      	str	r1, [r4, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d13d      	bne.n	8005d76 <_printf_i+0x16a>
 8005cfa:	2d00      	cmp	r5, #0
 8005cfc:	f040 808e 	bne.w	8005e1c <_printf_i+0x210>
 8005d00:	4665      	mov	r5, ip
 8005d02:	2a08      	cmp	r2, #8
 8005d04:	d10b      	bne.n	8005d1e <_printf_i+0x112>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	07db      	lsls	r3, r3, #31
 8005d0a:	d508      	bpl.n	8005d1e <_printf_i+0x112>
 8005d0c:	6923      	ldr	r3, [r4, #16]
 8005d0e:	6862      	ldr	r2, [r4, #4]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	bfde      	ittt	le
 8005d14:	2330      	movle	r3, #48	; 0x30
 8005d16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d1a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d1e:	ebac 0305 	sub.w	r3, ip, r5
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	f8cd 8000 	str.w	r8, [sp]
 8005d28:	463b      	mov	r3, r7
 8005d2a:	aa03      	add	r2, sp, #12
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f7ff fef6 	bl	8005b20 <_printf_common>
 8005d34:	3001      	adds	r0, #1
 8005d36:	d14d      	bne.n	8005dd4 <_printf_i+0x1c8>
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d3c:	b005      	add	sp, #20
 8005d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d42:	4839      	ldr	r0, [pc, #228]	; (8005e28 <_printf_i+0x21c>)
 8005d44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d48:	6813      	ldr	r3, [r2, #0]
 8005d4a:	6821      	ldr	r1, [r4, #0]
 8005d4c:	1d1d      	adds	r5, r3, #4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6015      	str	r5, [r2, #0]
 8005d52:	060a      	lsls	r2, r1, #24
 8005d54:	d50b      	bpl.n	8005d6e <_printf_i+0x162>
 8005d56:	07ca      	lsls	r2, r1, #31
 8005d58:	bf44      	itt	mi
 8005d5a:	f041 0120 	orrmi.w	r1, r1, #32
 8005d5e:	6021      	strmi	r1, [r4, #0]
 8005d60:	b91b      	cbnz	r3, 8005d6a <_printf_i+0x15e>
 8005d62:	6822      	ldr	r2, [r4, #0]
 8005d64:	f022 0220 	bic.w	r2, r2, #32
 8005d68:	6022      	str	r2, [r4, #0]
 8005d6a:	2210      	movs	r2, #16
 8005d6c:	e7b7      	b.n	8005cde <_printf_i+0xd2>
 8005d6e:	064d      	lsls	r5, r1, #25
 8005d70:	bf48      	it	mi
 8005d72:	b29b      	uxthmi	r3, r3
 8005d74:	e7ef      	b.n	8005d56 <_printf_i+0x14a>
 8005d76:	4665      	mov	r5, ip
 8005d78:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d7c:	fb02 3311 	mls	r3, r2, r1, r3
 8005d80:	5cc3      	ldrb	r3, [r0, r3]
 8005d82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d86:	460b      	mov	r3, r1
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	d1f5      	bne.n	8005d78 <_printf_i+0x16c>
 8005d8c:	e7b9      	b.n	8005d02 <_printf_i+0xf6>
 8005d8e:	6813      	ldr	r3, [r2, #0]
 8005d90:	6825      	ldr	r5, [r4, #0]
 8005d92:	6961      	ldr	r1, [r4, #20]
 8005d94:	1d18      	adds	r0, r3, #4
 8005d96:	6010      	str	r0, [r2, #0]
 8005d98:	0628      	lsls	r0, r5, #24
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	d501      	bpl.n	8005da2 <_printf_i+0x196>
 8005d9e:	6019      	str	r1, [r3, #0]
 8005da0:	e002      	b.n	8005da8 <_printf_i+0x19c>
 8005da2:	066a      	lsls	r2, r5, #25
 8005da4:	d5fb      	bpl.n	8005d9e <_printf_i+0x192>
 8005da6:	8019      	strh	r1, [r3, #0]
 8005da8:	2300      	movs	r3, #0
 8005daa:	6123      	str	r3, [r4, #16]
 8005dac:	4665      	mov	r5, ip
 8005dae:	e7b9      	b.n	8005d24 <_printf_i+0x118>
 8005db0:	6813      	ldr	r3, [r2, #0]
 8005db2:	1d19      	adds	r1, r3, #4
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	681d      	ldr	r5, [r3, #0]
 8005db8:	6862      	ldr	r2, [r4, #4]
 8005dba:	2100      	movs	r1, #0
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f7fa ffdf 	bl	8000d80 <memchr>
 8005dc2:	b108      	cbz	r0, 8005dc8 <_printf_i+0x1bc>
 8005dc4:	1b40      	subs	r0, r0, r5
 8005dc6:	6060      	str	r0, [r4, #4]
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	6123      	str	r3, [r4, #16]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dd2:	e7a7      	b.n	8005d24 <_printf_i+0x118>
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	4639      	mov	r1, r7
 8005dda:	4630      	mov	r0, r6
 8005ddc:	47c0      	blx	r8
 8005dde:	3001      	adds	r0, #1
 8005de0:	d0aa      	beq.n	8005d38 <_printf_i+0x12c>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	079b      	lsls	r3, r3, #30
 8005de6:	d413      	bmi.n	8005e10 <_printf_i+0x204>
 8005de8:	68e0      	ldr	r0, [r4, #12]
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	4298      	cmp	r0, r3
 8005dee:	bfb8      	it	lt
 8005df0:	4618      	movlt	r0, r3
 8005df2:	e7a3      	b.n	8005d3c <_printf_i+0x130>
 8005df4:	2301      	movs	r3, #1
 8005df6:	464a      	mov	r2, r9
 8005df8:	4639      	mov	r1, r7
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	47c0      	blx	r8
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d09a      	beq.n	8005d38 <_printf_i+0x12c>
 8005e02:	3501      	adds	r5, #1
 8005e04:	68e3      	ldr	r3, [r4, #12]
 8005e06:	9a03      	ldr	r2, [sp, #12]
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	42ab      	cmp	r3, r5
 8005e0c:	dcf2      	bgt.n	8005df4 <_printf_i+0x1e8>
 8005e0e:	e7eb      	b.n	8005de8 <_printf_i+0x1dc>
 8005e10:	2500      	movs	r5, #0
 8005e12:	f104 0919 	add.w	r9, r4, #25
 8005e16:	e7f5      	b.n	8005e04 <_printf_i+0x1f8>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ac      	bne.n	8005d76 <_printf_i+0x16a>
 8005e1c:	7803      	ldrb	r3, [r0, #0]
 8005e1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e26:	e76c      	b.n	8005d02 <_printf_i+0xf6>
 8005e28:	08009a8e 	.word	0x08009a8e
 8005e2c:	08009a9f 	.word	0x08009a9f

08005e30 <iprintf>:
 8005e30:	b40f      	push	{r0, r1, r2, r3}
 8005e32:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <iprintf+0x2c>)
 8005e34:	b513      	push	{r0, r1, r4, lr}
 8005e36:	681c      	ldr	r4, [r3, #0]
 8005e38:	b124      	cbz	r4, 8005e44 <iprintf+0x14>
 8005e3a:	69a3      	ldr	r3, [r4, #24]
 8005e3c:	b913      	cbnz	r3, 8005e44 <iprintf+0x14>
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f001 f866 	bl	8006f10 <__sinit>
 8005e44:	ab05      	add	r3, sp, #20
 8005e46:	9a04      	ldr	r2, [sp, #16]
 8005e48:	68a1      	ldr	r1, [r4, #8]
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f001 fd1f 	bl	8007890 <_vfiprintf_r>
 8005e52:	b002      	add	sp, #8
 8005e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e58:	b004      	add	sp, #16
 8005e5a:	4770      	bx	lr
 8005e5c:	2000007c 	.word	0x2000007c

08005e60 <_puts_r>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	460e      	mov	r6, r1
 8005e64:	4605      	mov	r5, r0
 8005e66:	b118      	cbz	r0, 8005e70 <_puts_r+0x10>
 8005e68:	6983      	ldr	r3, [r0, #24]
 8005e6a:	b90b      	cbnz	r3, 8005e70 <_puts_r+0x10>
 8005e6c:	f001 f850 	bl	8006f10 <__sinit>
 8005e70:	69ab      	ldr	r3, [r5, #24]
 8005e72:	68ac      	ldr	r4, [r5, #8]
 8005e74:	b913      	cbnz	r3, 8005e7c <_puts_r+0x1c>
 8005e76:	4628      	mov	r0, r5
 8005e78:	f001 f84a 	bl	8006f10 <__sinit>
 8005e7c:	4b23      	ldr	r3, [pc, #140]	; (8005f0c <_puts_r+0xac>)
 8005e7e:	429c      	cmp	r4, r3
 8005e80:	d117      	bne.n	8005eb2 <_puts_r+0x52>
 8005e82:	686c      	ldr	r4, [r5, #4]
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	071b      	lsls	r3, r3, #28
 8005e88:	d51d      	bpl.n	8005ec6 <_puts_r+0x66>
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	b1db      	cbz	r3, 8005ec6 <_puts_r+0x66>
 8005e8e:	3e01      	subs	r6, #1
 8005e90:	68a3      	ldr	r3, [r4, #8]
 8005e92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e96:	3b01      	subs	r3, #1
 8005e98:	60a3      	str	r3, [r4, #8]
 8005e9a:	b9e9      	cbnz	r1, 8005ed8 <_puts_r+0x78>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da2e      	bge.n	8005efe <_puts_r+0x9e>
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	210a      	movs	r1, #10
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f000 f83f 	bl	8005f28 <__swbuf_r>
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d011      	beq.n	8005ed2 <_puts_r+0x72>
 8005eae:	200a      	movs	r0, #10
 8005eb0:	e011      	b.n	8005ed6 <_puts_r+0x76>
 8005eb2:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <_puts_r+0xb0>)
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	d101      	bne.n	8005ebc <_puts_r+0x5c>
 8005eb8:	68ac      	ldr	r4, [r5, #8]
 8005eba:	e7e3      	b.n	8005e84 <_puts_r+0x24>
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <_puts_r+0xb4>)
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	bf08      	it	eq
 8005ec2:	68ec      	ldreq	r4, [r5, #12]
 8005ec4:	e7de      	b.n	8005e84 <_puts_r+0x24>
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f000 f87f 	bl	8005fcc <__swsetup_r>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d0dd      	beq.n	8005e8e <_puts_r+0x2e>
 8005ed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	da04      	bge.n	8005ee6 <_puts_r+0x86>
 8005edc:	69a2      	ldr	r2, [r4, #24]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	dc06      	bgt.n	8005ef0 <_puts_r+0x90>
 8005ee2:	290a      	cmp	r1, #10
 8005ee4:	d004      	beq.n	8005ef0 <_puts_r+0x90>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	6022      	str	r2, [r4, #0]
 8005eec:	7019      	strb	r1, [r3, #0]
 8005eee:	e7cf      	b.n	8005e90 <_puts_r+0x30>
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 f818 	bl	8005f28 <__swbuf_r>
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d1c9      	bne.n	8005e90 <_puts_r+0x30>
 8005efc:	e7e9      	b.n	8005ed2 <_puts_r+0x72>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	200a      	movs	r0, #10
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	6022      	str	r2, [r4, #0]
 8005f06:	7018      	strb	r0, [r3, #0]
 8005f08:	e7e5      	b.n	8005ed6 <_puts_r+0x76>
 8005f0a:	bf00      	nop
 8005f0c:	08009ae0 	.word	0x08009ae0
 8005f10:	08009b00 	.word	0x08009b00
 8005f14:	08009ac0 	.word	0x08009ac0

08005f18 <puts>:
 8005f18:	4b02      	ldr	r3, [pc, #8]	; (8005f24 <puts+0xc>)
 8005f1a:	4601      	mov	r1, r0
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	f7ff bf9f 	b.w	8005e60 <_puts_r>
 8005f22:	bf00      	nop
 8005f24:	2000007c 	.word	0x2000007c

08005f28 <__swbuf_r>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	460e      	mov	r6, r1
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	4605      	mov	r5, r0
 8005f30:	b118      	cbz	r0, 8005f3a <__swbuf_r+0x12>
 8005f32:	6983      	ldr	r3, [r0, #24]
 8005f34:	b90b      	cbnz	r3, 8005f3a <__swbuf_r+0x12>
 8005f36:	f000 ffeb 	bl	8006f10 <__sinit>
 8005f3a:	4b21      	ldr	r3, [pc, #132]	; (8005fc0 <__swbuf_r+0x98>)
 8005f3c:	429c      	cmp	r4, r3
 8005f3e:	d12a      	bne.n	8005f96 <__swbuf_r+0x6e>
 8005f40:	686c      	ldr	r4, [r5, #4]
 8005f42:	69a3      	ldr	r3, [r4, #24]
 8005f44:	60a3      	str	r3, [r4, #8]
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	071a      	lsls	r2, r3, #28
 8005f4a:	d52e      	bpl.n	8005faa <__swbuf_r+0x82>
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	b363      	cbz	r3, 8005faa <__swbuf_r+0x82>
 8005f50:	6923      	ldr	r3, [r4, #16]
 8005f52:	6820      	ldr	r0, [r4, #0]
 8005f54:	1ac0      	subs	r0, r0, r3
 8005f56:	6963      	ldr	r3, [r4, #20]
 8005f58:	b2f6      	uxtb	r6, r6
 8005f5a:	4283      	cmp	r3, r0
 8005f5c:	4637      	mov	r7, r6
 8005f5e:	dc04      	bgt.n	8005f6a <__swbuf_r+0x42>
 8005f60:	4621      	mov	r1, r4
 8005f62:	4628      	mov	r0, r5
 8005f64:	f000 ff6a 	bl	8006e3c <_fflush_r>
 8005f68:	bb28      	cbnz	r0, 8005fb6 <__swbuf_r+0x8e>
 8005f6a:	68a3      	ldr	r3, [r4, #8]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	60a3      	str	r3, [r4, #8]
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	6022      	str	r2, [r4, #0]
 8005f76:	701e      	strb	r6, [r3, #0]
 8005f78:	6963      	ldr	r3, [r4, #20]
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	4283      	cmp	r3, r0
 8005f7e:	d004      	beq.n	8005f8a <__swbuf_r+0x62>
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	07db      	lsls	r3, r3, #31
 8005f84:	d519      	bpl.n	8005fba <__swbuf_r+0x92>
 8005f86:	2e0a      	cmp	r6, #10
 8005f88:	d117      	bne.n	8005fba <__swbuf_r+0x92>
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 ff55 	bl	8006e3c <_fflush_r>
 8005f92:	b190      	cbz	r0, 8005fba <__swbuf_r+0x92>
 8005f94:	e00f      	b.n	8005fb6 <__swbuf_r+0x8e>
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <__swbuf_r+0x9c>)
 8005f98:	429c      	cmp	r4, r3
 8005f9a:	d101      	bne.n	8005fa0 <__swbuf_r+0x78>
 8005f9c:	68ac      	ldr	r4, [r5, #8]
 8005f9e:	e7d0      	b.n	8005f42 <__swbuf_r+0x1a>
 8005fa0:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <__swbuf_r+0xa0>)
 8005fa2:	429c      	cmp	r4, r3
 8005fa4:	bf08      	it	eq
 8005fa6:	68ec      	ldreq	r4, [r5, #12]
 8005fa8:	e7cb      	b.n	8005f42 <__swbuf_r+0x1a>
 8005faa:	4621      	mov	r1, r4
 8005fac:	4628      	mov	r0, r5
 8005fae:	f000 f80d 	bl	8005fcc <__swsetup_r>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d0cc      	beq.n	8005f50 <__swbuf_r+0x28>
 8005fb6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005fba:	4638      	mov	r0, r7
 8005fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	08009ae0 	.word	0x08009ae0
 8005fc4:	08009b00 	.word	0x08009b00
 8005fc8:	08009ac0 	.word	0x08009ac0

08005fcc <__swsetup_r>:
 8005fcc:	4b32      	ldr	r3, [pc, #200]	; (8006098 <__swsetup_r+0xcc>)
 8005fce:	b570      	push	{r4, r5, r6, lr}
 8005fd0:	681d      	ldr	r5, [r3, #0]
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	b125      	cbz	r5, 8005fe2 <__swsetup_r+0x16>
 8005fd8:	69ab      	ldr	r3, [r5, #24]
 8005fda:	b913      	cbnz	r3, 8005fe2 <__swsetup_r+0x16>
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 ff97 	bl	8006f10 <__sinit>
 8005fe2:	4b2e      	ldr	r3, [pc, #184]	; (800609c <__swsetup_r+0xd0>)
 8005fe4:	429c      	cmp	r4, r3
 8005fe6:	d10f      	bne.n	8006008 <__swsetup_r+0x3c>
 8005fe8:	686c      	ldr	r4, [r5, #4]
 8005fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	0715      	lsls	r5, r2, #28
 8005ff2:	d42c      	bmi.n	800604e <__swsetup_r+0x82>
 8005ff4:	06d0      	lsls	r0, r2, #27
 8005ff6:	d411      	bmi.n	800601c <__swsetup_r+0x50>
 8005ff8:	2209      	movs	r2, #9
 8005ffa:	6032      	str	r2, [r6, #0]
 8005ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006006:	e03e      	b.n	8006086 <__swsetup_r+0xba>
 8006008:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <__swsetup_r+0xd4>)
 800600a:	429c      	cmp	r4, r3
 800600c:	d101      	bne.n	8006012 <__swsetup_r+0x46>
 800600e:	68ac      	ldr	r4, [r5, #8]
 8006010:	e7eb      	b.n	8005fea <__swsetup_r+0x1e>
 8006012:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <__swsetup_r+0xd8>)
 8006014:	429c      	cmp	r4, r3
 8006016:	bf08      	it	eq
 8006018:	68ec      	ldreq	r4, [r5, #12]
 800601a:	e7e6      	b.n	8005fea <__swsetup_r+0x1e>
 800601c:	0751      	lsls	r1, r2, #29
 800601e:	d512      	bpl.n	8006046 <__swsetup_r+0x7a>
 8006020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006022:	b141      	cbz	r1, 8006036 <__swsetup_r+0x6a>
 8006024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006028:	4299      	cmp	r1, r3
 800602a:	d002      	beq.n	8006032 <__swsetup_r+0x66>
 800602c:	4630      	mov	r0, r6
 800602e:	f001 fb5d 	bl	80076ec <_free_r>
 8006032:	2300      	movs	r3, #0
 8006034:	6363      	str	r3, [r4, #52]	; 0x34
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800603c:	81a3      	strh	r3, [r4, #12]
 800603e:	2300      	movs	r3, #0
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f043 0308 	orr.w	r3, r3, #8
 800604c:	81a3      	strh	r3, [r4, #12]
 800604e:	6923      	ldr	r3, [r4, #16]
 8006050:	b94b      	cbnz	r3, 8006066 <__swsetup_r+0x9a>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800605c:	d003      	beq.n	8006066 <__swsetup_r+0x9a>
 800605e:	4621      	mov	r1, r4
 8006060:	4630      	mov	r0, r6
 8006062:	f001 f811 	bl	8007088 <__smakebuf_r>
 8006066:	89a2      	ldrh	r2, [r4, #12]
 8006068:	f012 0301 	ands.w	r3, r2, #1
 800606c:	d00c      	beq.n	8006088 <__swsetup_r+0xbc>
 800606e:	2300      	movs	r3, #0
 8006070:	60a3      	str	r3, [r4, #8]
 8006072:	6963      	ldr	r3, [r4, #20]
 8006074:	425b      	negs	r3, r3
 8006076:	61a3      	str	r3, [r4, #24]
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	b953      	cbnz	r3, 8006092 <__swsetup_r+0xc6>
 800607c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006080:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006084:	d1ba      	bne.n	8005ffc <__swsetup_r+0x30>
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	0792      	lsls	r2, r2, #30
 800608a:	bf58      	it	pl
 800608c:	6963      	ldrpl	r3, [r4, #20]
 800608e:	60a3      	str	r3, [r4, #8]
 8006090:	e7f2      	b.n	8006078 <__swsetup_r+0xac>
 8006092:	2000      	movs	r0, #0
 8006094:	e7f7      	b.n	8006086 <__swsetup_r+0xba>
 8006096:	bf00      	nop
 8006098:	2000007c 	.word	0x2000007c
 800609c:	08009ae0 	.word	0x08009ae0
 80060a0:	08009b00 	.word	0x08009b00
 80060a4:	08009ac0 	.word	0x08009ac0

080060a8 <quorem>:
 80060a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	6903      	ldr	r3, [r0, #16]
 80060ae:	690c      	ldr	r4, [r1, #16]
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	4680      	mov	r8, r0
 80060b4:	f2c0 8082 	blt.w	80061bc <quorem+0x114>
 80060b8:	3c01      	subs	r4, #1
 80060ba:	f101 0714 	add.w	r7, r1, #20
 80060be:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80060c2:	f100 0614 	add.w	r6, r0, #20
 80060c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80060ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80060ce:	eb06 030c 	add.w	r3, r6, ip
 80060d2:	3501      	adds	r5, #1
 80060d4:	eb07 090c 	add.w	r9, r7, ip
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	fbb0 f5f5 	udiv	r5, r0, r5
 80060de:	b395      	cbz	r5, 8006146 <quorem+0x9e>
 80060e0:	f04f 0a00 	mov.w	sl, #0
 80060e4:	4638      	mov	r0, r7
 80060e6:	46b6      	mov	lr, r6
 80060e8:	46d3      	mov	fp, sl
 80060ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80060ee:	b293      	uxth	r3, r2
 80060f0:	fb05 a303 	mla	r3, r5, r3, sl
 80060f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ebab 0303 	sub.w	r3, fp, r3
 80060fe:	0c12      	lsrs	r2, r2, #16
 8006100:	f8de b000 	ldr.w	fp, [lr]
 8006104:	fb05 a202 	mla	r2, r5, r2, sl
 8006108:	fa13 f38b 	uxtah	r3, r3, fp
 800610c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006110:	fa1f fb82 	uxth.w	fp, r2
 8006114:	f8de 2000 	ldr.w	r2, [lr]
 8006118:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800611c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006120:	b29b      	uxth	r3, r3
 8006122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006126:	4581      	cmp	r9, r0
 8006128:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800612c:	f84e 3b04 	str.w	r3, [lr], #4
 8006130:	d2db      	bcs.n	80060ea <quorem+0x42>
 8006132:	f856 300c 	ldr.w	r3, [r6, ip]
 8006136:	b933      	cbnz	r3, 8006146 <quorem+0x9e>
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	3b04      	subs	r3, #4
 800613c:	429e      	cmp	r6, r3
 800613e:	461a      	mov	r2, r3
 8006140:	d330      	bcc.n	80061a4 <quorem+0xfc>
 8006142:	f8c8 4010 	str.w	r4, [r8, #16]
 8006146:	4640      	mov	r0, r8
 8006148:	f001 f9fc 	bl	8007544 <__mcmp>
 800614c:	2800      	cmp	r0, #0
 800614e:	db25      	blt.n	800619c <quorem+0xf4>
 8006150:	3501      	adds	r5, #1
 8006152:	4630      	mov	r0, r6
 8006154:	f04f 0c00 	mov.w	ip, #0
 8006158:	f857 2b04 	ldr.w	r2, [r7], #4
 800615c:	f8d0 e000 	ldr.w	lr, [r0]
 8006160:	b293      	uxth	r3, r2
 8006162:	ebac 0303 	sub.w	r3, ip, r3
 8006166:	0c12      	lsrs	r2, r2, #16
 8006168:	fa13 f38e 	uxtah	r3, r3, lr
 800616c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006174:	b29b      	uxth	r3, r3
 8006176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800617a:	45b9      	cmp	r9, r7
 800617c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006180:	f840 3b04 	str.w	r3, [r0], #4
 8006184:	d2e8      	bcs.n	8006158 <quorem+0xb0>
 8006186:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800618a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800618e:	b92a      	cbnz	r2, 800619c <quorem+0xf4>
 8006190:	3b04      	subs	r3, #4
 8006192:	429e      	cmp	r6, r3
 8006194:	461a      	mov	r2, r3
 8006196:	d30b      	bcc.n	80061b0 <quorem+0x108>
 8006198:	f8c8 4010 	str.w	r4, [r8, #16]
 800619c:	4628      	mov	r0, r5
 800619e:	b003      	add	sp, #12
 80061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	3b04      	subs	r3, #4
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	d1ca      	bne.n	8006142 <quorem+0x9a>
 80061ac:	3c01      	subs	r4, #1
 80061ae:	e7c5      	b.n	800613c <quorem+0x94>
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	3b04      	subs	r3, #4
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	d1ef      	bne.n	8006198 <quorem+0xf0>
 80061b8:	3c01      	subs	r4, #1
 80061ba:	e7ea      	b.n	8006192 <quorem+0xea>
 80061bc:	2000      	movs	r0, #0
 80061be:	e7ee      	b.n	800619e <quorem+0xf6>

080061c0 <_dtoa_r>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	ec57 6b10 	vmov	r6, r7, d0
 80061c8:	b097      	sub	sp, #92	; 0x5c
 80061ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061cc:	9106      	str	r1, [sp, #24]
 80061ce:	4604      	mov	r4, r0
 80061d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80061d2:	9312      	str	r3, [sp, #72]	; 0x48
 80061d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80061d8:	e9cd 6700 	strd	r6, r7, [sp]
 80061dc:	b93d      	cbnz	r5, 80061ee <_dtoa_r+0x2e>
 80061de:	2010      	movs	r0, #16
 80061e0:	f000 ff92 	bl	8007108 <malloc>
 80061e4:	6260      	str	r0, [r4, #36]	; 0x24
 80061e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061ea:	6005      	str	r5, [r0, #0]
 80061ec:	60c5      	str	r5, [r0, #12]
 80061ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061f0:	6819      	ldr	r1, [r3, #0]
 80061f2:	b151      	cbz	r1, 800620a <_dtoa_r+0x4a>
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	604a      	str	r2, [r1, #4]
 80061f8:	2301      	movs	r3, #1
 80061fa:	4093      	lsls	r3, r2
 80061fc:	608b      	str	r3, [r1, #8]
 80061fe:	4620      	mov	r0, r4
 8006200:	f000 ffbe 	bl	8007180 <_Bfree>
 8006204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	1e3b      	subs	r3, r7, #0
 800620c:	bfbb      	ittet	lt
 800620e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006212:	9301      	strlt	r3, [sp, #4]
 8006214:	2300      	movge	r3, #0
 8006216:	2201      	movlt	r2, #1
 8006218:	bfac      	ite	ge
 800621a:	f8c8 3000 	strge.w	r3, [r8]
 800621e:	f8c8 2000 	strlt.w	r2, [r8]
 8006222:	4baf      	ldr	r3, [pc, #700]	; (80064e0 <_dtoa_r+0x320>)
 8006224:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006228:	ea33 0308 	bics.w	r3, r3, r8
 800622c:	d114      	bne.n	8006258 <_dtoa_r+0x98>
 800622e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006230:	f242 730f 	movw	r3, #9999	; 0x270f
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	9b00      	ldr	r3, [sp, #0]
 8006238:	b923      	cbnz	r3, 8006244 <_dtoa_r+0x84>
 800623a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800623e:	2800      	cmp	r0, #0
 8006240:	f000 8542 	beq.w	8006cc8 <_dtoa_r+0xb08>
 8006244:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006246:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80064f4 <_dtoa_r+0x334>
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8544 	beq.w	8006cd8 <_dtoa_r+0xb18>
 8006250:	f10b 0303 	add.w	r3, fp, #3
 8006254:	f000 bd3e 	b.w	8006cd4 <_dtoa_r+0xb14>
 8006258:	e9dd 6700 	ldrd	r6, r7, [sp]
 800625c:	2200      	movs	r2, #0
 800625e:	2300      	movs	r3, #0
 8006260:	4630      	mov	r0, r6
 8006262:	4639      	mov	r1, r7
 8006264:	f7fa fe32 	bl	8000ecc <__aeabi_dcmpeq>
 8006268:	4681      	mov	r9, r0
 800626a:	b168      	cbz	r0, 8006288 <_dtoa_r+0xc8>
 800626c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800626e:	2301      	movs	r3, #1
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8524 	beq.w	8006cc2 <_dtoa_r+0xb02>
 800627a:	4b9a      	ldr	r3, [pc, #616]	; (80064e4 <_dtoa_r+0x324>)
 800627c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800627e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	f000 bd28 	b.w	8006cd8 <_dtoa_r+0xb18>
 8006288:	aa14      	add	r2, sp, #80	; 0x50
 800628a:	a915      	add	r1, sp, #84	; 0x54
 800628c:	ec47 6b10 	vmov	d0, r6, r7
 8006290:	4620      	mov	r0, r4
 8006292:	f001 f9ce 	bl	8007632 <__d2b>
 8006296:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800629a:	9004      	str	r0, [sp, #16]
 800629c:	2d00      	cmp	r5, #0
 800629e:	d07c      	beq.n	800639a <_dtoa_r+0x1da>
 80062a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80062a8:	46b2      	mov	sl, r6
 80062aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80062ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80062b6:	2200      	movs	r2, #0
 80062b8:	4b8b      	ldr	r3, [pc, #556]	; (80064e8 <_dtoa_r+0x328>)
 80062ba:	4650      	mov	r0, sl
 80062bc:	4659      	mov	r1, fp
 80062be:	f7f9 ff93 	bl	80001e8 <__aeabi_dsub>
 80062c2:	a381      	add	r3, pc, #516	; (adr r3, 80064c8 <_dtoa_r+0x308>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7fa f946 	bl	8000558 <__aeabi_dmul>
 80062cc:	a380      	add	r3, pc, #512	; (adr r3, 80064d0 <_dtoa_r+0x310>)
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f7f9 ff8b 	bl	80001ec <__adddf3>
 80062d6:	4606      	mov	r6, r0
 80062d8:	4628      	mov	r0, r5
 80062da:	460f      	mov	r7, r1
 80062dc:	f7fa f8d2 	bl	8000484 <__aeabi_i2d>
 80062e0:	a37d      	add	r3, pc, #500	; (adr r3, 80064d8 <_dtoa_r+0x318>)
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f7fa f937 	bl	8000558 <__aeabi_dmul>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4630      	mov	r0, r6
 80062f0:	4639      	mov	r1, r7
 80062f2:	f7f9 ff7b 	bl	80001ec <__adddf3>
 80062f6:	4606      	mov	r6, r0
 80062f8:	460f      	mov	r7, r1
 80062fa:	f7fa fb3f 	bl	800097c <__aeabi_d2iz>
 80062fe:	2200      	movs	r2, #0
 8006300:	4682      	mov	sl, r0
 8006302:	2300      	movs	r3, #0
 8006304:	4630      	mov	r0, r6
 8006306:	4639      	mov	r1, r7
 8006308:	f7fa fdea 	bl	8000ee0 <__aeabi_dcmplt>
 800630c:	b148      	cbz	r0, 8006322 <_dtoa_r+0x162>
 800630e:	4650      	mov	r0, sl
 8006310:	f7fa f8b8 	bl	8000484 <__aeabi_i2d>
 8006314:	4632      	mov	r2, r6
 8006316:	463b      	mov	r3, r7
 8006318:	f7fa fdd8 	bl	8000ecc <__aeabi_dcmpeq>
 800631c:	b908      	cbnz	r0, 8006322 <_dtoa_r+0x162>
 800631e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006322:	f1ba 0f16 	cmp.w	sl, #22
 8006326:	d859      	bhi.n	80063dc <_dtoa_r+0x21c>
 8006328:	4970      	ldr	r1, [pc, #448]	; (80064ec <_dtoa_r+0x32c>)
 800632a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800632e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006332:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006336:	f7fa fdf1 	bl	8000f1c <__aeabi_dcmpgt>
 800633a:	2800      	cmp	r0, #0
 800633c:	d050      	beq.n	80063e0 <_dtoa_r+0x220>
 800633e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006342:	2300      	movs	r3, #0
 8006344:	930f      	str	r3, [sp, #60]	; 0x3c
 8006346:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006348:	1b5d      	subs	r5, r3, r5
 800634a:	f1b5 0801 	subs.w	r8, r5, #1
 800634e:	bf49      	itett	mi
 8006350:	f1c5 0301 	rsbmi	r3, r5, #1
 8006354:	2300      	movpl	r3, #0
 8006356:	9305      	strmi	r3, [sp, #20]
 8006358:	f04f 0800 	movmi.w	r8, #0
 800635c:	bf58      	it	pl
 800635e:	9305      	strpl	r3, [sp, #20]
 8006360:	f1ba 0f00 	cmp.w	sl, #0
 8006364:	db3e      	blt.n	80063e4 <_dtoa_r+0x224>
 8006366:	2300      	movs	r3, #0
 8006368:	44d0      	add	r8, sl
 800636a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800636e:	9307      	str	r3, [sp, #28]
 8006370:	9b06      	ldr	r3, [sp, #24]
 8006372:	2b09      	cmp	r3, #9
 8006374:	f200 8090 	bhi.w	8006498 <_dtoa_r+0x2d8>
 8006378:	2b05      	cmp	r3, #5
 800637a:	bfc4      	itt	gt
 800637c:	3b04      	subgt	r3, #4
 800637e:	9306      	strgt	r3, [sp, #24]
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	f1a3 0302 	sub.w	r3, r3, #2
 8006386:	bfcc      	ite	gt
 8006388:	2500      	movgt	r5, #0
 800638a:	2501      	movle	r5, #1
 800638c:	2b03      	cmp	r3, #3
 800638e:	f200 808f 	bhi.w	80064b0 <_dtoa_r+0x2f0>
 8006392:	e8df f003 	tbb	[pc, r3]
 8006396:	7f7d      	.short	0x7f7d
 8006398:	7131      	.short	0x7131
 800639a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800639e:	441d      	add	r5, r3
 80063a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80063a4:	2820      	cmp	r0, #32
 80063a6:	dd13      	ble.n	80063d0 <_dtoa_r+0x210>
 80063a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80063ac:	9b00      	ldr	r3, [sp, #0]
 80063ae:	fa08 f800 	lsl.w	r8, r8, r0
 80063b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80063b6:	fa23 f000 	lsr.w	r0, r3, r0
 80063ba:	ea48 0000 	orr.w	r0, r8, r0
 80063be:	f7fa f851 	bl	8000464 <__aeabi_ui2d>
 80063c2:	2301      	movs	r3, #1
 80063c4:	4682      	mov	sl, r0
 80063c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80063ca:	3d01      	subs	r5, #1
 80063cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80063ce:	e772      	b.n	80062b6 <_dtoa_r+0xf6>
 80063d0:	9b00      	ldr	r3, [sp, #0]
 80063d2:	f1c0 0020 	rsb	r0, r0, #32
 80063d6:	fa03 f000 	lsl.w	r0, r3, r0
 80063da:	e7f0      	b.n	80063be <_dtoa_r+0x1fe>
 80063dc:	2301      	movs	r3, #1
 80063de:	e7b1      	b.n	8006344 <_dtoa_r+0x184>
 80063e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80063e2:	e7b0      	b.n	8006346 <_dtoa_r+0x186>
 80063e4:	9b05      	ldr	r3, [sp, #20]
 80063e6:	eba3 030a 	sub.w	r3, r3, sl
 80063ea:	9305      	str	r3, [sp, #20]
 80063ec:	f1ca 0300 	rsb	r3, sl, #0
 80063f0:	9307      	str	r3, [sp, #28]
 80063f2:	2300      	movs	r3, #0
 80063f4:	930e      	str	r3, [sp, #56]	; 0x38
 80063f6:	e7bb      	b.n	8006370 <_dtoa_r+0x1b0>
 80063f8:	2301      	movs	r3, #1
 80063fa:	930a      	str	r3, [sp, #40]	; 0x28
 80063fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd59      	ble.n	80064b6 <_dtoa_r+0x2f6>
 8006402:	9302      	str	r3, [sp, #8]
 8006404:	4699      	mov	r9, r3
 8006406:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006408:	2200      	movs	r2, #0
 800640a:	6072      	str	r2, [r6, #4]
 800640c:	2204      	movs	r2, #4
 800640e:	f102 0014 	add.w	r0, r2, #20
 8006412:	4298      	cmp	r0, r3
 8006414:	6871      	ldr	r1, [r6, #4]
 8006416:	d953      	bls.n	80064c0 <_dtoa_r+0x300>
 8006418:	4620      	mov	r0, r4
 800641a:	f000 fe7d 	bl	8007118 <_Balloc>
 800641e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006420:	6030      	str	r0, [r6, #0]
 8006422:	f1b9 0f0e 	cmp.w	r9, #14
 8006426:	f8d3 b000 	ldr.w	fp, [r3]
 800642a:	f200 80e6 	bhi.w	80065fa <_dtoa_r+0x43a>
 800642e:	2d00      	cmp	r5, #0
 8006430:	f000 80e3 	beq.w	80065fa <_dtoa_r+0x43a>
 8006434:	ed9d 7b00 	vldr	d7, [sp]
 8006438:	f1ba 0f00 	cmp.w	sl, #0
 800643c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006440:	dd74      	ble.n	800652c <_dtoa_r+0x36c>
 8006442:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <_dtoa_r+0x32c>)
 8006444:	f00a 030f 	and.w	r3, sl, #15
 8006448:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800644c:	ed93 7b00 	vldr	d7, [r3]
 8006450:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006454:	06f0      	lsls	r0, r6, #27
 8006456:	ed8d 7b08 	vstr	d7, [sp, #32]
 800645a:	d565      	bpl.n	8006528 <_dtoa_r+0x368>
 800645c:	4b24      	ldr	r3, [pc, #144]	; (80064f0 <_dtoa_r+0x330>)
 800645e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006462:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006466:	f7fa f9a1 	bl	80007ac <__aeabi_ddiv>
 800646a:	e9cd 0100 	strd	r0, r1, [sp]
 800646e:	f006 060f 	and.w	r6, r6, #15
 8006472:	2503      	movs	r5, #3
 8006474:	4f1e      	ldr	r7, [pc, #120]	; (80064f0 <_dtoa_r+0x330>)
 8006476:	e04c      	b.n	8006512 <_dtoa_r+0x352>
 8006478:	2301      	movs	r3, #1
 800647a:	930a      	str	r3, [sp, #40]	; 0x28
 800647c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800647e:	4453      	add	r3, sl
 8006480:	f103 0901 	add.w	r9, r3, #1
 8006484:	9302      	str	r3, [sp, #8]
 8006486:	464b      	mov	r3, r9
 8006488:	2b01      	cmp	r3, #1
 800648a:	bfb8      	it	lt
 800648c:	2301      	movlt	r3, #1
 800648e:	e7ba      	b.n	8006406 <_dtoa_r+0x246>
 8006490:	2300      	movs	r3, #0
 8006492:	e7b2      	b.n	80063fa <_dtoa_r+0x23a>
 8006494:	2300      	movs	r3, #0
 8006496:	e7f0      	b.n	800647a <_dtoa_r+0x2ba>
 8006498:	2501      	movs	r5, #1
 800649a:	2300      	movs	r3, #0
 800649c:	9306      	str	r3, [sp, #24]
 800649e:	950a      	str	r5, [sp, #40]	; 0x28
 80064a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a4:	9302      	str	r3, [sp, #8]
 80064a6:	4699      	mov	r9, r3
 80064a8:	2200      	movs	r2, #0
 80064aa:	2312      	movs	r3, #18
 80064ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80064ae:	e7aa      	b.n	8006406 <_dtoa_r+0x246>
 80064b0:	2301      	movs	r3, #1
 80064b2:	930a      	str	r3, [sp, #40]	; 0x28
 80064b4:	e7f4      	b.n	80064a0 <_dtoa_r+0x2e0>
 80064b6:	2301      	movs	r3, #1
 80064b8:	9302      	str	r3, [sp, #8]
 80064ba:	4699      	mov	r9, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	e7f5      	b.n	80064ac <_dtoa_r+0x2ec>
 80064c0:	3101      	adds	r1, #1
 80064c2:	6071      	str	r1, [r6, #4]
 80064c4:	0052      	lsls	r2, r2, #1
 80064c6:	e7a2      	b.n	800640e <_dtoa_r+0x24e>
 80064c8:	636f4361 	.word	0x636f4361
 80064cc:	3fd287a7 	.word	0x3fd287a7
 80064d0:	8b60c8b3 	.word	0x8b60c8b3
 80064d4:	3fc68a28 	.word	0x3fc68a28
 80064d8:	509f79fb 	.word	0x509f79fb
 80064dc:	3fd34413 	.word	0x3fd34413
 80064e0:	7ff00000 	.word	0x7ff00000
 80064e4:	08009a8d 	.word	0x08009a8d
 80064e8:	3ff80000 	.word	0x3ff80000
 80064ec:	08009b48 	.word	0x08009b48
 80064f0:	08009b20 	.word	0x08009b20
 80064f4:	08009ab9 	.word	0x08009ab9
 80064f8:	07f1      	lsls	r1, r6, #31
 80064fa:	d508      	bpl.n	800650e <_dtoa_r+0x34e>
 80064fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006504:	f7fa f828 	bl	8000558 <__aeabi_dmul>
 8006508:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800650c:	3501      	adds	r5, #1
 800650e:	1076      	asrs	r6, r6, #1
 8006510:	3708      	adds	r7, #8
 8006512:	2e00      	cmp	r6, #0
 8006514:	d1f0      	bne.n	80064f8 <_dtoa_r+0x338>
 8006516:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800651a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800651e:	f7fa f945 	bl	80007ac <__aeabi_ddiv>
 8006522:	e9cd 0100 	strd	r0, r1, [sp]
 8006526:	e01a      	b.n	800655e <_dtoa_r+0x39e>
 8006528:	2502      	movs	r5, #2
 800652a:	e7a3      	b.n	8006474 <_dtoa_r+0x2b4>
 800652c:	f000 80a0 	beq.w	8006670 <_dtoa_r+0x4b0>
 8006530:	f1ca 0600 	rsb	r6, sl, #0
 8006534:	4b9f      	ldr	r3, [pc, #636]	; (80067b4 <_dtoa_r+0x5f4>)
 8006536:	4fa0      	ldr	r7, [pc, #640]	; (80067b8 <_dtoa_r+0x5f8>)
 8006538:	f006 020f 	and.w	r2, r6, #15
 800653c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006548:	f7fa f806 	bl	8000558 <__aeabi_dmul>
 800654c:	e9cd 0100 	strd	r0, r1, [sp]
 8006550:	1136      	asrs	r6, r6, #4
 8006552:	2300      	movs	r3, #0
 8006554:	2502      	movs	r5, #2
 8006556:	2e00      	cmp	r6, #0
 8006558:	d17f      	bne.n	800665a <_dtoa_r+0x49a>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e1      	bne.n	8006522 <_dtoa_r+0x362>
 800655e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8087 	beq.w	8006674 <_dtoa_r+0x4b4>
 8006566:	e9dd 6700 	ldrd	r6, r7, [sp]
 800656a:	2200      	movs	r2, #0
 800656c:	4b93      	ldr	r3, [pc, #588]	; (80067bc <_dtoa_r+0x5fc>)
 800656e:	4630      	mov	r0, r6
 8006570:	4639      	mov	r1, r7
 8006572:	f7fa fcb5 	bl	8000ee0 <__aeabi_dcmplt>
 8006576:	2800      	cmp	r0, #0
 8006578:	d07c      	beq.n	8006674 <_dtoa_r+0x4b4>
 800657a:	f1b9 0f00 	cmp.w	r9, #0
 800657e:	d079      	beq.n	8006674 <_dtoa_r+0x4b4>
 8006580:	9b02      	ldr	r3, [sp, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	dd35      	ble.n	80065f2 <_dtoa_r+0x432>
 8006586:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800658a:	9308      	str	r3, [sp, #32]
 800658c:	4639      	mov	r1, r7
 800658e:	2200      	movs	r2, #0
 8006590:	4b8b      	ldr	r3, [pc, #556]	; (80067c0 <_dtoa_r+0x600>)
 8006592:	4630      	mov	r0, r6
 8006594:	f7f9 ffe0 	bl	8000558 <__aeabi_dmul>
 8006598:	e9cd 0100 	strd	r0, r1, [sp]
 800659c:	9f02      	ldr	r7, [sp, #8]
 800659e:	3501      	adds	r5, #1
 80065a0:	4628      	mov	r0, r5
 80065a2:	f7f9 ff6f 	bl	8000484 <__aeabi_i2d>
 80065a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065aa:	f7f9 ffd5 	bl	8000558 <__aeabi_dmul>
 80065ae:	2200      	movs	r2, #0
 80065b0:	4b84      	ldr	r3, [pc, #528]	; (80067c4 <_dtoa_r+0x604>)
 80065b2:	f7f9 fe1b 	bl	80001ec <__adddf3>
 80065b6:	4605      	mov	r5, r0
 80065b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80065bc:	2f00      	cmp	r7, #0
 80065be:	d15d      	bne.n	800667c <_dtoa_r+0x4bc>
 80065c0:	2200      	movs	r2, #0
 80065c2:	4b81      	ldr	r3, [pc, #516]	; (80067c8 <_dtoa_r+0x608>)
 80065c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065c8:	f7f9 fe0e 	bl	80001e8 <__aeabi_dsub>
 80065cc:	462a      	mov	r2, r5
 80065ce:	4633      	mov	r3, r6
 80065d0:	e9cd 0100 	strd	r0, r1, [sp]
 80065d4:	f7fa fca2 	bl	8000f1c <__aeabi_dcmpgt>
 80065d8:	2800      	cmp	r0, #0
 80065da:	f040 8288 	bne.w	8006aee <_dtoa_r+0x92e>
 80065de:	462a      	mov	r2, r5
 80065e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80065e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065e8:	f7fa fc7a 	bl	8000ee0 <__aeabi_dcmplt>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f040 827c 	bne.w	8006aea <_dtoa_r+0x92a>
 80065f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065f6:	e9cd 2300 	strd	r2, r3, [sp]
 80065fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f2c0 8150 	blt.w	80068a2 <_dtoa_r+0x6e2>
 8006602:	f1ba 0f0e 	cmp.w	sl, #14
 8006606:	f300 814c 	bgt.w	80068a2 <_dtoa_r+0x6e2>
 800660a:	4b6a      	ldr	r3, [pc, #424]	; (80067b4 <_dtoa_r+0x5f4>)
 800660c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006610:	ed93 7b00 	vldr	d7, [r3]
 8006614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006616:	2b00      	cmp	r3, #0
 8006618:	ed8d 7b02 	vstr	d7, [sp, #8]
 800661c:	f280 80d8 	bge.w	80067d0 <_dtoa_r+0x610>
 8006620:	f1b9 0f00 	cmp.w	r9, #0
 8006624:	f300 80d4 	bgt.w	80067d0 <_dtoa_r+0x610>
 8006628:	f040 825e 	bne.w	8006ae8 <_dtoa_r+0x928>
 800662c:	2200      	movs	r2, #0
 800662e:	4b66      	ldr	r3, [pc, #408]	; (80067c8 <_dtoa_r+0x608>)
 8006630:	ec51 0b17 	vmov	r0, r1, d7
 8006634:	f7f9 ff90 	bl	8000558 <__aeabi_dmul>
 8006638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800663c:	f7fa fc64 	bl	8000f08 <__aeabi_dcmpge>
 8006640:	464f      	mov	r7, r9
 8006642:	464e      	mov	r6, r9
 8006644:	2800      	cmp	r0, #0
 8006646:	f040 8234 	bne.w	8006ab2 <_dtoa_r+0x8f2>
 800664a:	2331      	movs	r3, #49	; 0x31
 800664c:	f10b 0501 	add.w	r5, fp, #1
 8006650:	f88b 3000 	strb.w	r3, [fp]
 8006654:	f10a 0a01 	add.w	sl, sl, #1
 8006658:	e22f      	b.n	8006aba <_dtoa_r+0x8fa>
 800665a:	07f2      	lsls	r2, r6, #31
 800665c:	d505      	bpl.n	800666a <_dtoa_r+0x4aa>
 800665e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006662:	f7f9 ff79 	bl	8000558 <__aeabi_dmul>
 8006666:	3501      	adds	r5, #1
 8006668:	2301      	movs	r3, #1
 800666a:	1076      	asrs	r6, r6, #1
 800666c:	3708      	adds	r7, #8
 800666e:	e772      	b.n	8006556 <_dtoa_r+0x396>
 8006670:	2502      	movs	r5, #2
 8006672:	e774      	b.n	800655e <_dtoa_r+0x39e>
 8006674:	f8cd a020 	str.w	sl, [sp, #32]
 8006678:	464f      	mov	r7, r9
 800667a:	e791      	b.n	80065a0 <_dtoa_r+0x3e0>
 800667c:	4b4d      	ldr	r3, [pc, #308]	; (80067b4 <_dtoa_r+0x5f4>)
 800667e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006682:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006688:	2b00      	cmp	r3, #0
 800668a:	d047      	beq.n	800671c <_dtoa_r+0x55c>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	2000      	movs	r0, #0
 8006692:	494e      	ldr	r1, [pc, #312]	; (80067cc <_dtoa_r+0x60c>)
 8006694:	f7fa f88a 	bl	80007ac <__aeabi_ddiv>
 8006698:	462a      	mov	r2, r5
 800669a:	4633      	mov	r3, r6
 800669c:	f7f9 fda4 	bl	80001e8 <__aeabi_dsub>
 80066a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80066a4:	465d      	mov	r5, fp
 80066a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066aa:	f7fa f967 	bl	800097c <__aeabi_d2iz>
 80066ae:	4606      	mov	r6, r0
 80066b0:	f7f9 fee8 	bl	8000484 <__aeabi_i2d>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066bc:	f7f9 fd94 	bl	80001e8 <__aeabi_dsub>
 80066c0:	3630      	adds	r6, #48	; 0x30
 80066c2:	f805 6b01 	strb.w	r6, [r5], #1
 80066c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066ca:	e9cd 0100 	strd	r0, r1, [sp]
 80066ce:	f7fa fc07 	bl	8000ee0 <__aeabi_dcmplt>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d163      	bne.n	800679e <_dtoa_r+0x5de>
 80066d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066da:	2000      	movs	r0, #0
 80066dc:	4937      	ldr	r1, [pc, #220]	; (80067bc <_dtoa_r+0x5fc>)
 80066de:	f7f9 fd83 	bl	80001e8 <__aeabi_dsub>
 80066e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066e6:	f7fa fbfb 	bl	8000ee0 <__aeabi_dcmplt>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	f040 80b7 	bne.w	800685e <_dtoa_r+0x69e>
 80066f0:	eba5 030b 	sub.w	r3, r5, fp
 80066f4:	429f      	cmp	r7, r3
 80066f6:	f77f af7c 	ble.w	80065f2 <_dtoa_r+0x432>
 80066fa:	2200      	movs	r2, #0
 80066fc:	4b30      	ldr	r3, [pc, #192]	; (80067c0 <_dtoa_r+0x600>)
 80066fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006702:	f7f9 ff29 	bl	8000558 <__aeabi_dmul>
 8006706:	2200      	movs	r2, #0
 8006708:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800670c:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <_dtoa_r+0x600>)
 800670e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006712:	f7f9 ff21 	bl	8000558 <__aeabi_dmul>
 8006716:	e9cd 0100 	strd	r0, r1, [sp]
 800671a:	e7c4      	b.n	80066a6 <_dtoa_r+0x4e6>
 800671c:	462a      	mov	r2, r5
 800671e:	4633      	mov	r3, r6
 8006720:	f7f9 ff1a 	bl	8000558 <__aeabi_dmul>
 8006724:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006728:	eb0b 0507 	add.w	r5, fp, r7
 800672c:	465e      	mov	r6, fp
 800672e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006732:	f7fa f923 	bl	800097c <__aeabi_d2iz>
 8006736:	4607      	mov	r7, r0
 8006738:	f7f9 fea4 	bl	8000484 <__aeabi_i2d>
 800673c:	3730      	adds	r7, #48	; 0x30
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006746:	f7f9 fd4f 	bl	80001e8 <__aeabi_dsub>
 800674a:	f806 7b01 	strb.w	r7, [r6], #1
 800674e:	42ae      	cmp	r6, r5
 8006750:	e9cd 0100 	strd	r0, r1, [sp]
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	d126      	bne.n	80067a8 <_dtoa_r+0x5e8>
 800675a:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <_dtoa_r+0x60c>)
 800675c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006760:	f7f9 fd44 	bl	80001ec <__adddf3>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	e9dd 0100 	ldrd	r0, r1, [sp]
 800676c:	f7fa fbd6 	bl	8000f1c <__aeabi_dcmpgt>
 8006770:	2800      	cmp	r0, #0
 8006772:	d174      	bne.n	800685e <_dtoa_r+0x69e>
 8006774:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006778:	2000      	movs	r0, #0
 800677a:	4914      	ldr	r1, [pc, #80]	; (80067cc <_dtoa_r+0x60c>)
 800677c:	f7f9 fd34 	bl	80001e8 <__aeabi_dsub>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006788:	f7fa fbaa 	bl	8000ee0 <__aeabi_dcmplt>
 800678c:	2800      	cmp	r0, #0
 800678e:	f43f af30 	beq.w	80065f2 <_dtoa_r+0x432>
 8006792:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006796:	2b30      	cmp	r3, #48	; 0x30
 8006798:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800679c:	d002      	beq.n	80067a4 <_dtoa_r+0x5e4>
 800679e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80067a2:	e04a      	b.n	800683a <_dtoa_r+0x67a>
 80067a4:	4615      	mov	r5, r2
 80067a6:	e7f4      	b.n	8006792 <_dtoa_r+0x5d2>
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <_dtoa_r+0x600>)
 80067aa:	f7f9 fed5 	bl	8000558 <__aeabi_dmul>
 80067ae:	e9cd 0100 	strd	r0, r1, [sp]
 80067b2:	e7bc      	b.n	800672e <_dtoa_r+0x56e>
 80067b4:	08009b48 	.word	0x08009b48
 80067b8:	08009b20 	.word	0x08009b20
 80067bc:	3ff00000 	.word	0x3ff00000
 80067c0:	40240000 	.word	0x40240000
 80067c4:	401c0000 	.word	0x401c0000
 80067c8:	40140000 	.word	0x40140000
 80067cc:	3fe00000 	.word	0x3fe00000
 80067d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80067d4:	465d      	mov	r5, fp
 80067d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067da:	4630      	mov	r0, r6
 80067dc:	4639      	mov	r1, r7
 80067de:	f7f9 ffe5 	bl	80007ac <__aeabi_ddiv>
 80067e2:	f7fa f8cb 	bl	800097c <__aeabi_d2iz>
 80067e6:	4680      	mov	r8, r0
 80067e8:	f7f9 fe4c 	bl	8000484 <__aeabi_i2d>
 80067ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067f0:	f7f9 feb2 	bl	8000558 <__aeabi_dmul>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4630      	mov	r0, r6
 80067fa:	4639      	mov	r1, r7
 80067fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006800:	f7f9 fcf2 	bl	80001e8 <__aeabi_dsub>
 8006804:	f805 6b01 	strb.w	r6, [r5], #1
 8006808:	eba5 060b 	sub.w	r6, r5, fp
 800680c:	45b1      	cmp	r9, r6
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	d139      	bne.n	8006888 <_dtoa_r+0x6c8>
 8006814:	f7f9 fcea 	bl	80001ec <__adddf3>
 8006818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800681c:	4606      	mov	r6, r0
 800681e:	460f      	mov	r7, r1
 8006820:	f7fa fb7c 	bl	8000f1c <__aeabi_dcmpgt>
 8006824:	b9c8      	cbnz	r0, 800685a <_dtoa_r+0x69a>
 8006826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800682a:	4630      	mov	r0, r6
 800682c:	4639      	mov	r1, r7
 800682e:	f7fa fb4d 	bl	8000ecc <__aeabi_dcmpeq>
 8006832:	b110      	cbz	r0, 800683a <_dtoa_r+0x67a>
 8006834:	f018 0f01 	tst.w	r8, #1
 8006838:	d10f      	bne.n	800685a <_dtoa_r+0x69a>
 800683a:	9904      	ldr	r1, [sp, #16]
 800683c:	4620      	mov	r0, r4
 800683e:	f000 fc9f 	bl	8007180 <_Bfree>
 8006842:	2300      	movs	r3, #0
 8006844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006846:	702b      	strb	r3, [r5, #0]
 8006848:	f10a 0301 	add.w	r3, sl, #1
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8241 	beq.w	8006cd8 <_dtoa_r+0xb18>
 8006856:	601d      	str	r5, [r3, #0]
 8006858:	e23e      	b.n	8006cd8 <_dtoa_r+0xb18>
 800685a:	f8cd a020 	str.w	sl, [sp, #32]
 800685e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006862:	2a39      	cmp	r2, #57	; 0x39
 8006864:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006868:	d108      	bne.n	800687c <_dtoa_r+0x6bc>
 800686a:	459b      	cmp	fp, r3
 800686c:	d10a      	bne.n	8006884 <_dtoa_r+0x6c4>
 800686e:	9b08      	ldr	r3, [sp, #32]
 8006870:	3301      	adds	r3, #1
 8006872:	9308      	str	r3, [sp, #32]
 8006874:	2330      	movs	r3, #48	; 0x30
 8006876:	f88b 3000 	strb.w	r3, [fp]
 800687a:	465b      	mov	r3, fp
 800687c:	781a      	ldrb	r2, [r3, #0]
 800687e:	3201      	adds	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	e78c      	b.n	800679e <_dtoa_r+0x5de>
 8006884:	461d      	mov	r5, r3
 8006886:	e7ea      	b.n	800685e <_dtoa_r+0x69e>
 8006888:	2200      	movs	r2, #0
 800688a:	4b9b      	ldr	r3, [pc, #620]	; (8006af8 <_dtoa_r+0x938>)
 800688c:	f7f9 fe64 	bl	8000558 <__aeabi_dmul>
 8006890:	2200      	movs	r2, #0
 8006892:	2300      	movs	r3, #0
 8006894:	4606      	mov	r6, r0
 8006896:	460f      	mov	r7, r1
 8006898:	f7fa fb18 	bl	8000ecc <__aeabi_dcmpeq>
 800689c:	2800      	cmp	r0, #0
 800689e:	d09a      	beq.n	80067d6 <_dtoa_r+0x616>
 80068a0:	e7cb      	b.n	800683a <_dtoa_r+0x67a>
 80068a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	f000 808b 	beq.w	80069c0 <_dtoa_r+0x800>
 80068aa:	9a06      	ldr	r2, [sp, #24]
 80068ac:	2a01      	cmp	r2, #1
 80068ae:	dc6e      	bgt.n	800698e <_dtoa_r+0x7ce>
 80068b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	d067      	beq.n	8006986 <_dtoa_r+0x7c6>
 80068b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068ba:	9f07      	ldr	r7, [sp, #28]
 80068bc:	9d05      	ldr	r5, [sp, #20]
 80068be:	9a05      	ldr	r2, [sp, #20]
 80068c0:	2101      	movs	r1, #1
 80068c2:	441a      	add	r2, r3
 80068c4:	4620      	mov	r0, r4
 80068c6:	9205      	str	r2, [sp, #20]
 80068c8:	4498      	add	r8, r3
 80068ca:	f000 fcf9 	bl	80072c0 <__i2b>
 80068ce:	4606      	mov	r6, r0
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	dd0c      	ble.n	80068ee <_dtoa_r+0x72e>
 80068d4:	f1b8 0f00 	cmp.w	r8, #0
 80068d8:	dd09      	ble.n	80068ee <_dtoa_r+0x72e>
 80068da:	4545      	cmp	r5, r8
 80068dc:	9a05      	ldr	r2, [sp, #20]
 80068de:	462b      	mov	r3, r5
 80068e0:	bfa8      	it	ge
 80068e2:	4643      	movge	r3, r8
 80068e4:	1ad2      	subs	r2, r2, r3
 80068e6:	9205      	str	r2, [sp, #20]
 80068e8:	1aed      	subs	r5, r5, r3
 80068ea:	eba8 0803 	sub.w	r8, r8, r3
 80068ee:	9b07      	ldr	r3, [sp, #28]
 80068f0:	b1eb      	cbz	r3, 800692e <_dtoa_r+0x76e>
 80068f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d067      	beq.n	80069c8 <_dtoa_r+0x808>
 80068f8:	b18f      	cbz	r7, 800691e <_dtoa_r+0x75e>
 80068fa:	4631      	mov	r1, r6
 80068fc:	463a      	mov	r2, r7
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fd7e 	bl	8007400 <__pow5mult>
 8006904:	9a04      	ldr	r2, [sp, #16]
 8006906:	4601      	mov	r1, r0
 8006908:	4606      	mov	r6, r0
 800690a:	4620      	mov	r0, r4
 800690c:	f000 fce1 	bl	80072d2 <__multiply>
 8006910:	9904      	ldr	r1, [sp, #16]
 8006912:	9008      	str	r0, [sp, #32]
 8006914:	4620      	mov	r0, r4
 8006916:	f000 fc33 	bl	8007180 <_Bfree>
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	9b07      	ldr	r3, [sp, #28]
 8006920:	1bda      	subs	r2, r3, r7
 8006922:	d004      	beq.n	800692e <_dtoa_r+0x76e>
 8006924:	9904      	ldr	r1, [sp, #16]
 8006926:	4620      	mov	r0, r4
 8006928:	f000 fd6a 	bl	8007400 <__pow5mult>
 800692c:	9004      	str	r0, [sp, #16]
 800692e:	2101      	movs	r1, #1
 8006930:	4620      	mov	r0, r4
 8006932:	f000 fcc5 	bl	80072c0 <__i2b>
 8006936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006938:	4607      	mov	r7, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 81d0 	beq.w	8006ce0 <_dtoa_r+0xb20>
 8006940:	461a      	mov	r2, r3
 8006942:	4601      	mov	r1, r0
 8006944:	4620      	mov	r0, r4
 8006946:	f000 fd5b 	bl	8007400 <__pow5mult>
 800694a:	9b06      	ldr	r3, [sp, #24]
 800694c:	2b01      	cmp	r3, #1
 800694e:	4607      	mov	r7, r0
 8006950:	dc40      	bgt.n	80069d4 <_dtoa_r+0x814>
 8006952:	9b00      	ldr	r3, [sp, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d139      	bne.n	80069cc <_dtoa_r+0x80c>
 8006958:	9b01      	ldr	r3, [sp, #4]
 800695a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800695e:	2b00      	cmp	r3, #0
 8006960:	d136      	bne.n	80069d0 <_dtoa_r+0x810>
 8006962:	9b01      	ldr	r3, [sp, #4]
 8006964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006968:	0d1b      	lsrs	r3, r3, #20
 800696a:	051b      	lsls	r3, r3, #20
 800696c:	b12b      	cbz	r3, 800697a <_dtoa_r+0x7ba>
 800696e:	9b05      	ldr	r3, [sp, #20]
 8006970:	3301      	adds	r3, #1
 8006972:	9305      	str	r3, [sp, #20]
 8006974:	f108 0801 	add.w	r8, r8, #1
 8006978:	2301      	movs	r3, #1
 800697a:	9307      	str	r3, [sp, #28]
 800697c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800697e:	2b00      	cmp	r3, #0
 8006980:	d12a      	bne.n	80069d8 <_dtoa_r+0x818>
 8006982:	2001      	movs	r0, #1
 8006984:	e030      	b.n	80069e8 <_dtoa_r+0x828>
 8006986:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006988:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800698c:	e795      	b.n	80068ba <_dtoa_r+0x6fa>
 800698e:	9b07      	ldr	r3, [sp, #28]
 8006990:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006994:	42bb      	cmp	r3, r7
 8006996:	bfbf      	itttt	lt
 8006998:	9b07      	ldrlt	r3, [sp, #28]
 800699a:	9707      	strlt	r7, [sp, #28]
 800699c:	1afa      	sublt	r2, r7, r3
 800699e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80069a0:	bfbb      	ittet	lt
 80069a2:	189b      	addlt	r3, r3, r2
 80069a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80069a6:	1bdf      	subge	r7, r3, r7
 80069a8:	2700      	movlt	r7, #0
 80069aa:	f1b9 0f00 	cmp.w	r9, #0
 80069ae:	bfb5      	itete	lt
 80069b0:	9b05      	ldrlt	r3, [sp, #20]
 80069b2:	9d05      	ldrge	r5, [sp, #20]
 80069b4:	eba3 0509 	sublt.w	r5, r3, r9
 80069b8:	464b      	movge	r3, r9
 80069ba:	bfb8      	it	lt
 80069bc:	2300      	movlt	r3, #0
 80069be:	e77e      	b.n	80068be <_dtoa_r+0x6fe>
 80069c0:	9f07      	ldr	r7, [sp, #28]
 80069c2:	9d05      	ldr	r5, [sp, #20]
 80069c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80069c6:	e783      	b.n	80068d0 <_dtoa_r+0x710>
 80069c8:	9a07      	ldr	r2, [sp, #28]
 80069ca:	e7ab      	b.n	8006924 <_dtoa_r+0x764>
 80069cc:	2300      	movs	r3, #0
 80069ce:	e7d4      	b.n	800697a <_dtoa_r+0x7ba>
 80069d0:	9b00      	ldr	r3, [sp, #0]
 80069d2:	e7d2      	b.n	800697a <_dtoa_r+0x7ba>
 80069d4:	2300      	movs	r3, #0
 80069d6:	9307      	str	r3, [sp, #28]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80069de:	6918      	ldr	r0, [r3, #16]
 80069e0:	f000 fc20 	bl	8007224 <__hi0bits>
 80069e4:	f1c0 0020 	rsb	r0, r0, #32
 80069e8:	4440      	add	r0, r8
 80069ea:	f010 001f 	ands.w	r0, r0, #31
 80069ee:	d047      	beq.n	8006a80 <_dtoa_r+0x8c0>
 80069f0:	f1c0 0320 	rsb	r3, r0, #32
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	dd3b      	ble.n	8006a70 <_dtoa_r+0x8b0>
 80069f8:	9b05      	ldr	r3, [sp, #20]
 80069fa:	f1c0 001c 	rsb	r0, r0, #28
 80069fe:	4403      	add	r3, r0
 8006a00:	9305      	str	r3, [sp, #20]
 8006a02:	4405      	add	r5, r0
 8006a04:	4480      	add	r8, r0
 8006a06:	9b05      	ldr	r3, [sp, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dd05      	ble.n	8006a18 <_dtoa_r+0x858>
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	9904      	ldr	r1, [sp, #16]
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fd43 	bl	800749c <__lshift>
 8006a16:	9004      	str	r0, [sp, #16]
 8006a18:	f1b8 0f00 	cmp.w	r8, #0
 8006a1c:	dd05      	ble.n	8006a2a <_dtoa_r+0x86a>
 8006a1e:	4639      	mov	r1, r7
 8006a20:	4642      	mov	r2, r8
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 fd3a 	bl	800749c <__lshift>
 8006a28:	4607      	mov	r7, r0
 8006a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a2c:	b353      	cbz	r3, 8006a84 <_dtoa_r+0x8c4>
 8006a2e:	4639      	mov	r1, r7
 8006a30:	9804      	ldr	r0, [sp, #16]
 8006a32:	f000 fd87 	bl	8007544 <__mcmp>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	da24      	bge.n	8006a84 <_dtoa_r+0x8c4>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	220a      	movs	r2, #10
 8006a3e:	9904      	ldr	r1, [sp, #16]
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 fbb4 	bl	80071ae <__multadd>
 8006a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a48:	9004      	str	r0, [sp, #16]
 8006a4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 814d 	beq.w	8006cee <_dtoa_r+0xb2e>
 8006a54:	2300      	movs	r3, #0
 8006a56:	4631      	mov	r1, r6
 8006a58:	220a      	movs	r2, #10
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 fba7 	bl	80071ae <__multadd>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	4606      	mov	r6, r0
 8006a66:	dc4f      	bgt.n	8006b08 <_dtoa_r+0x948>
 8006a68:	9b06      	ldr	r3, [sp, #24]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	dd4c      	ble.n	8006b08 <_dtoa_r+0x948>
 8006a6e:	e011      	b.n	8006a94 <_dtoa_r+0x8d4>
 8006a70:	d0c9      	beq.n	8006a06 <_dtoa_r+0x846>
 8006a72:	9a05      	ldr	r2, [sp, #20]
 8006a74:	331c      	adds	r3, #28
 8006a76:	441a      	add	r2, r3
 8006a78:	9205      	str	r2, [sp, #20]
 8006a7a:	441d      	add	r5, r3
 8006a7c:	4498      	add	r8, r3
 8006a7e:	e7c2      	b.n	8006a06 <_dtoa_r+0x846>
 8006a80:	4603      	mov	r3, r0
 8006a82:	e7f6      	b.n	8006a72 <_dtoa_r+0x8b2>
 8006a84:	f1b9 0f00 	cmp.w	r9, #0
 8006a88:	dc38      	bgt.n	8006afc <_dtoa_r+0x93c>
 8006a8a:	9b06      	ldr	r3, [sp, #24]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	dd35      	ble.n	8006afc <_dtoa_r+0x93c>
 8006a90:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a94:	9b02      	ldr	r3, [sp, #8]
 8006a96:	b963      	cbnz	r3, 8006ab2 <_dtoa_r+0x8f2>
 8006a98:	4639      	mov	r1, r7
 8006a9a:	2205      	movs	r2, #5
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 fb86 	bl	80071ae <__multadd>
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	9804      	ldr	r0, [sp, #16]
 8006aa8:	f000 fd4c 	bl	8007544 <__mcmp>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f73f adcc 	bgt.w	800664a <_dtoa_r+0x48a>
 8006ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab4:	465d      	mov	r5, fp
 8006ab6:	ea6f 0a03 	mvn.w	sl, r3
 8006aba:	f04f 0900 	mov.w	r9, #0
 8006abe:	4639      	mov	r1, r7
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fb5d 	bl	8007180 <_Bfree>
 8006ac6:	2e00      	cmp	r6, #0
 8006ac8:	f43f aeb7 	beq.w	800683a <_dtoa_r+0x67a>
 8006acc:	f1b9 0f00 	cmp.w	r9, #0
 8006ad0:	d005      	beq.n	8006ade <_dtoa_r+0x91e>
 8006ad2:	45b1      	cmp	r9, r6
 8006ad4:	d003      	beq.n	8006ade <_dtoa_r+0x91e>
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fb51 	bl	8007180 <_Bfree>
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 fb4d 	bl	8007180 <_Bfree>
 8006ae6:	e6a8      	b.n	800683a <_dtoa_r+0x67a>
 8006ae8:	2700      	movs	r7, #0
 8006aea:	463e      	mov	r6, r7
 8006aec:	e7e1      	b.n	8006ab2 <_dtoa_r+0x8f2>
 8006aee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006af2:	463e      	mov	r6, r7
 8006af4:	e5a9      	b.n	800664a <_dtoa_r+0x48a>
 8006af6:	bf00      	nop
 8006af8:	40240000 	.word	0x40240000
 8006afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afe:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 80fa 	beq.w	8006cfc <_dtoa_r+0xb3c>
 8006b08:	2d00      	cmp	r5, #0
 8006b0a:	dd05      	ble.n	8006b18 <_dtoa_r+0x958>
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	462a      	mov	r2, r5
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fcc3 	bl	800749c <__lshift>
 8006b16:	4606      	mov	r6, r0
 8006b18:	9b07      	ldr	r3, [sp, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d04c      	beq.n	8006bb8 <_dtoa_r+0x9f8>
 8006b1e:	6871      	ldr	r1, [r6, #4]
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 faf9 	bl	8007118 <_Balloc>
 8006b26:	6932      	ldr	r2, [r6, #16]
 8006b28:	3202      	adds	r2, #2
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	0092      	lsls	r2, r2, #2
 8006b2e:	f106 010c 	add.w	r1, r6, #12
 8006b32:	300c      	adds	r0, #12
 8006b34:	f7fe fd0c 	bl	8005550 <memcpy>
 8006b38:	2201      	movs	r2, #1
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fcad 	bl	800749c <__lshift>
 8006b42:	9b00      	ldr	r3, [sp, #0]
 8006b44:	f8cd b014 	str.w	fp, [sp, #20]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	46b1      	mov	r9, r6
 8006b4e:	9307      	str	r3, [sp, #28]
 8006b50:	4606      	mov	r6, r0
 8006b52:	4639      	mov	r1, r7
 8006b54:	9804      	ldr	r0, [sp, #16]
 8006b56:	f7ff faa7 	bl	80060a8 <quorem>
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b62:	9804      	ldr	r0, [sp, #16]
 8006b64:	f000 fcee 	bl	8007544 <__mcmp>
 8006b68:	4632      	mov	r2, r6
 8006b6a:	9000      	str	r0, [sp, #0]
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fd02 	bl	8007578 <__mdiff>
 8006b74:	68c3      	ldr	r3, [r0, #12]
 8006b76:	4602      	mov	r2, r0
 8006b78:	bb03      	cbnz	r3, 8006bbc <_dtoa_r+0x9fc>
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	9008      	str	r0, [sp, #32]
 8006b7e:	9804      	ldr	r0, [sp, #16]
 8006b80:	f000 fce0 	bl	8007544 <__mcmp>
 8006b84:	9a08      	ldr	r2, [sp, #32]
 8006b86:	4603      	mov	r3, r0
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	9308      	str	r3, [sp, #32]
 8006b8e:	f000 faf7 	bl	8007180 <_Bfree>
 8006b92:	9b08      	ldr	r3, [sp, #32]
 8006b94:	b9a3      	cbnz	r3, 8006bc0 <_dtoa_r+0xa00>
 8006b96:	9a06      	ldr	r2, [sp, #24]
 8006b98:	b992      	cbnz	r2, 8006bc0 <_dtoa_r+0xa00>
 8006b9a:	9a07      	ldr	r2, [sp, #28]
 8006b9c:	b982      	cbnz	r2, 8006bc0 <_dtoa_r+0xa00>
 8006b9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ba2:	d029      	beq.n	8006bf8 <_dtoa_r+0xa38>
 8006ba4:	9b00      	ldr	r3, [sp, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	dd01      	ble.n	8006bae <_dtoa_r+0x9ee>
 8006baa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006bae:	9b05      	ldr	r3, [sp, #20]
 8006bb0:	1c5d      	adds	r5, r3, #1
 8006bb2:	f883 8000 	strb.w	r8, [r3]
 8006bb6:	e782      	b.n	8006abe <_dtoa_r+0x8fe>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	e7c2      	b.n	8006b42 <_dtoa_r+0x982>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e7e3      	b.n	8006b88 <_dtoa_r+0x9c8>
 8006bc0:	9a00      	ldr	r2, [sp, #0]
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	db04      	blt.n	8006bd0 <_dtoa_r+0xa10>
 8006bc6:	d125      	bne.n	8006c14 <_dtoa_r+0xa54>
 8006bc8:	9a06      	ldr	r2, [sp, #24]
 8006bca:	bb1a      	cbnz	r2, 8006c14 <_dtoa_r+0xa54>
 8006bcc:	9a07      	ldr	r2, [sp, #28]
 8006bce:	bb0a      	cbnz	r2, 8006c14 <_dtoa_r+0xa54>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	ddec      	ble.n	8006bae <_dtoa_r+0x9ee>
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	9904      	ldr	r1, [sp, #16]
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 fc5f 	bl	800749c <__lshift>
 8006bde:	4639      	mov	r1, r7
 8006be0:	9004      	str	r0, [sp, #16]
 8006be2:	f000 fcaf 	bl	8007544 <__mcmp>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	dc03      	bgt.n	8006bf2 <_dtoa_r+0xa32>
 8006bea:	d1e0      	bne.n	8006bae <_dtoa_r+0x9ee>
 8006bec:	f018 0f01 	tst.w	r8, #1
 8006bf0:	d0dd      	beq.n	8006bae <_dtoa_r+0x9ee>
 8006bf2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bf6:	d1d8      	bne.n	8006baa <_dtoa_r+0x9ea>
 8006bf8:	9b05      	ldr	r3, [sp, #20]
 8006bfa:	9a05      	ldr	r2, [sp, #20]
 8006bfc:	1c5d      	adds	r5, r3, #1
 8006bfe:	2339      	movs	r3, #57	; 0x39
 8006c00:	7013      	strb	r3, [r2, #0]
 8006c02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c06:	2b39      	cmp	r3, #57	; 0x39
 8006c08:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006c0c:	d04f      	beq.n	8006cae <_dtoa_r+0xaee>
 8006c0e:	3301      	adds	r3, #1
 8006c10:	7013      	strb	r3, [r2, #0]
 8006c12:	e754      	b.n	8006abe <_dtoa_r+0x8fe>
 8006c14:	9a05      	ldr	r2, [sp, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f102 0501 	add.w	r5, r2, #1
 8006c1c:	dd06      	ble.n	8006c2c <_dtoa_r+0xa6c>
 8006c1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c22:	d0e9      	beq.n	8006bf8 <_dtoa_r+0xa38>
 8006c24:	f108 0801 	add.w	r8, r8, #1
 8006c28:	9b05      	ldr	r3, [sp, #20]
 8006c2a:	e7c2      	b.n	8006bb2 <_dtoa_r+0x9f2>
 8006c2c:	9a02      	ldr	r2, [sp, #8]
 8006c2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006c32:	eba5 030b 	sub.w	r3, r5, fp
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d021      	beq.n	8006c7e <_dtoa_r+0xabe>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	9904      	ldr	r1, [sp, #16]
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 fab4 	bl	80071ae <__multadd>
 8006c46:	45b1      	cmp	r9, r6
 8006c48:	9004      	str	r0, [sp, #16]
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	f04f 020a 	mov.w	r2, #10
 8006c52:	4649      	mov	r1, r9
 8006c54:	4620      	mov	r0, r4
 8006c56:	d105      	bne.n	8006c64 <_dtoa_r+0xaa4>
 8006c58:	f000 faa9 	bl	80071ae <__multadd>
 8006c5c:	4681      	mov	r9, r0
 8006c5e:	4606      	mov	r6, r0
 8006c60:	9505      	str	r5, [sp, #20]
 8006c62:	e776      	b.n	8006b52 <_dtoa_r+0x992>
 8006c64:	f000 faa3 	bl	80071ae <__multadd>
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4681      	mov	r9, r0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	220a      	movs	r2, #10
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fa9c 	bl	80071ae <__multadd>
 8006c76:	4606      	mov	r6, r0
 8006c78:	e7f2      	b.n	8006c60 <_dtoa_r+0xaa0>
 8006c7a:	f04f 0900 	mov.w	r9, #0
 8006c7e:	2201      	movs	r2, #1
 8006c80:	9904      	ldr	r1, [sp, #16]
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 fc0a 	bl	800749c <__lshift>
 8006c88:	4639      	mov	r1, r7
 8006c8a:	9004      	str	r0, [sp, #16]
 8006c8c:	f000 fc5a 	bl	8007544 <__mcmp>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	dcb6      	bgt.n	8006c02 <_dtoa_r+0xa42>
 8006c94:	d102      	bne.n	8006c9c <_dtoa_r+0xadc>
 8006c96:	f018 0f01 	tst.w	r8, #1
 8006c9a:	d1b2      	bne.n	8006c02 <_dtoa_r+0xa42>
 8006c9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ca0:	2b30      	cmp	r3, #48	; 0x30
 8006ca2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006ca6:	f47f af0a 	bne.w	8006abe <_dtoa_r+0x8fe>
 8006caa:	4615      	mov	r5, r2
 8006cac:	e7f6      	b.n	8006c9c <_dtoa_r+0xadc>
 8006cae:	4593      	cmp	fp, r2
 8006cb0:	d105      	bne.n	8006cbe <_dtoa_r+0xafe>
 8006cb2:	2331      	movs	r3, #49	; 0x31
 8006cb4:	f10a 0a01 	add.w	sl, sl, #1
 8006cb8:	f88b 3000 	strb.w	r3, [fp]
 8006cbc:	e6ff      	b.n	8006abe <_dtoa_r+0x8fe>
 8006cbe:	4615      	mov	r5, r2
 8006cc0:	e79f      	b.n	8006c02 <_dtoa_r+0xa42>
 8006cc2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006d28 <_dtoa_r+0xb68>
 8006cc6:	e007      	b.n	8006cd8 <_dtoa_r+0xb18>
 8006cc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cca:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006d2c <_dtoa_r+0xb6c>
 8006cce:	b11b      	cbz	r3, 8006cd8 <_dtoa_r+0xb18>
 8006cd0:	f10b 0308 	add.w	r3, fp, #8
 8006cd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	4658      	mov	r0, fp
 8006cda:	b017      	add	sp, #92	; 0x5c
 8006cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce0:	9b06      	ldr	r3, [sp, #24]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	f77f ae35 	ble.w	8006952 <_dtoa_r+0x792>
 8006ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cea:	9307      	str	r3, [sp, #28]
 8006cec:	e649      	b.n	8006982 <_dtoa_r+0x7c2>
 8006cee:	9b02      	ldr	r3, [sp, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dc03      	bgt.n	8006cfc <_dtoa_r+0xb3c>
 8006cf4:	9b06      	ldr	r3, [sp, #24]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	f73f aecc 	bgt.w	8006a94 <_dtoa_r+0x8d4>
 8006cfc:	465d      	mov	r5, fp
 8006cfe:	4639      	mov	r1, r7
 8006d00:	9804      	ldr	r0, [sp, #16]
 8006d02:	f7ff f9d1 	bl	80060a8 <quorem>
 8006d06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d0a:	f805 8b01 	strb.w	r8, [r5], #1
 8006d0e:	9a02      	ldr	r2, [sp, #8]
 8006d10:	eba5 030b 	sub.w	r3, r5, fp
 8006d14:	429a      	cmp	r2, r3
 8006d16:	ddb0      	ble.n	8006c7a <_dtoa_r+0xaba>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	220a      	movs	r2, #10
 8006d1c:	9904      	ldr	r1, [sp, #16]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 fa45 	bl	80071ae <__multadd>
 8006d24:	9004      	str	r0, [sp, #16]
 8006d26:	e7ea      	b.n	8006cfe <_dtoa_r+0xb3e>
 8006d28:	08009a8c 	.word	0x08009a8c
 8006d2c:	08009ab0 	.word	0x08009ab0

08006d30 <__sflush_r>:
 8006d30:	898a      	ldrh	r2, [r1, #12]
 8006d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d36:	4605      	mov	r5, r0
 8006d38:	0710      	lsls	r0, r2, #28
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	d458      	bmi.n	8006df0 <__sflush_r+0xc0>
 8006d3e:	684b      	ldr	r3, [r1, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dc05      	bgt.n	8006d50 <__sflush_r+0x20>
 8006d44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	dc02      	bgt.n	8006d50 <__sflush_r+0x20>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d52:	2e00      	cmp	r6, #0
 8006d54:	d0f9      	beq.n	8006d4a <__sflush_r+0x1a>
 8006d56:	2300      	movs	r3, #0
 8006d58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d5c:	682f      	ldr	r7, [r5, #0]
 8006d5e:	6a21      	ldr	r1, [r4, #32]
 8006d60:	602b      	str	r3, [r5, #0]
 8006d62:	d032      	beq.n	8006dca <__sflush_r+0x9a>
 8006d64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	075a      	lsls	r2, r3, #29
 8006d6a:	d505      	bpl.n	8006d78 <__sflush_r+0x48>
 8006d6c:	6863      	ldr	r3, [r4, #4]
 8006d6e:	1ac0      	subs	r0, r0, r3
 8006d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d72:	b10b      	cbz	r3, 8006d78 <__sflush_r+0x48>
 8006d74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d76:	1ac0      	subs	r0, r0, r3
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d7e:	6a21      	ldr	r1, [r4, #32]
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b0      	blx	r6
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	d106      	bne.n	8006d98 <__sflush_r+0x68>
 8006d8a:	6829      	ldr	r1, [r5, #0]
 8006d8c:	291d      	cmp	r1, #29
 8006d8e:	d848      	bhi.n	8006e22 <__sflush_r+0xf2>
 8006d90:	4a29      	ldr	r2, [pc, #164]	; (8006e38 <__sflush_r+0x108>)
 8006d92:	40ca      	lsrs	r2, r1
 8006d94:	07d6      	lsls	r6, r2, #31
 8006d96:	d544      	bpl.n	8006e22 <__sflush_r+0xf2>
 8006d98:	2200      	movs	r2, #0
 8006d9a:	6062      	str	r2, [r4, #4]
 8006d9c:	04d9      	lsls	r1, r3, #19
 8006d9e:	6922      	ldr	r2, [r4, #16]
 8006da0:	6022      	str	r2, [r4, #0]
 8006da2:	d504      	bpl.n	8006dae <__sflush_r+0x7e>
 8006da4:	1c42      	adds	r2, r0, #1
 8006da6:	d101      	bne.n	8006dac <__sflush_r+0x7c>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b903      	cbnz	r3, 8006dae <__sflush_r+0x7e>
 8006dac:	6560      	str	r0, [r4, #84]	; 0x54
 8006dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006db0:	602f      	str	r7, [r5, #0]
 8006db2:	2900      	cmp	r1, #0
 8006db4:	d0c9      	beq.n	8006d4a <__sflush_r+0x1a>
 8006db6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dba:	4299      	cmp	r1, r3
 8006dbc:	d002      	beq.n	8006dc4 <__sflush_r+0x94>
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 fc94 	bl	80076ec <_free_r>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	6360      	str	r0, [r4, #52]	; 0x34
 8006dc8:	e7c0      	b.n	8006d4c <__sflush_r+0x1c>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b0      	blx	r6
 8006dd0:	1c41      	adds	r1, r0, #1
 8006dd2:	d1c8      	bne.n	8006d66 <__sflush_r+0x36>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0c5      	beq.n	8006d66 <__sflush_r+0x36>
 8006dda:	2b1d      	cmp	r3, #29
 8006ddc:	d001      	beq.n	8006de2 <__sflush_r+0xb2>
 8006dde:	2b16      	cmp	r3, #22
 8006de0:	d101      	bne.n	8006de6 <__sflush_r+0xb6>
 8006de2:	602f      	str	r7, [r5, #0]
 8006de4:	e7b1      	b.n	8006d4a <__sflush_r+0x1a>
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dec:	81a3      	strh	r3, [r4, #12]
 8006dee:	e7ad      	b.n	8006d4c <__sflush_r+0x1c>
 8006df0:	690f      	ldr	r7, [r1, #16]
 8006df2:	2f00      	cmp	r7, #0
 8006df4:	d0a9      	beq.n	8006d4a <__sflush_r+0x1a>
 8006df6:	0793      	lsls	r3, r2, #30
 8006df8:	680e      	ldr	r6, [r1, #0]
 8006dfa:	bf08      	it	eq
 8006dfc:	694b      	ldreq	r3, [r1, #20]
 8006dfe:	600f      	str	r7, [r1, #0]
 8006e00:	bf18      	it	ne
 8006e02:	2300      	movne	r3, #0
 8006e04:	eba6 0807 	sub.w	r8, r6, r7
 8006e08:	608b      	str	r3, [r1, #8]
 8006e0a:	f1b8 0f00 	cmp.w	r8, #0
 8006e0e:	dd9c      	ble.n	8006d4a <__sflush_r+0x1a>
 8006e10:	4643      	mov	r3, r8
 8006e12:	463a      	mov	r2, r7
 8006e14:	6a21      	ldr	r1, [r4, #32]
 8006e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e18:	4628      	mov	r0, r5
 8006e1a:	47b0      	blx	r6
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	dc06      	bgt.n	8006e2e <__sflush_r+0xfe>
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e26:	81a3      	strh	r3, [r4, #12]
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e2c:	e78e      	b.n	8006d4c <__sflush_r+0x1c>
 8006e2e:	4407      	add	r7, r0
 8006e30:	eba8 0800 	sub.w	r8, r8, r0
 8006e34:	e7e9      	b.n	8006e0a <__sflush_r+0xda>
 8006e36:	bf00      	nop
 8006e38:	20400001 	.word	0x20400001

08006e3c <_fflush_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	690b      	ldr	r3, [r1, #16]
 8006e40:	4605      	mov	r5, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	b1db      	cbz	r3, 8006e7e <_fflush_r+0x42>
 8006e46:	b118      	cbz	r0, 8006e50 <_fflush_r+0x14>
 8006e48:	6983      	ldr	r3, [r0, #24]
 8006e4a:	b90b      	cbnz	r3, 8006e50 <_fflush_r+0x14>
 8006e4c:	f000 f860 	bl	8006f10 <__sinit>
 8006e50:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <_fflush_r+0x48>)
 8006e52:	429c      	cmp	r4, r3
 8006e54:	d109      	bne.n	8006e6a <_fflush_r+0x2e>
 8006e56:	686c      	ldr	r4, [r5, #4]
 8006e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5c:	b17b      	cbz	r3, 8006e7e <_fflush_r+0x42>
 8006e5e:	4621      	mov	r1, r4
 8006e60:	4628      	mov	r0, r5
 8006e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e66:	f7ff bf63 	b.w	8006d30 <__sflush_r>
 8006e6a:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <_fflush_r+0x4c>)
 8006e6c:	429c      	cmp	r4, r3
 8006e6e:	d101      	bne.n	8006e74 <_fflush_r+0x38>
 8006e70:	68ac      	ldr	r4, [r5, #8]
 8006e72:	e7f1      	b.n	8006e58 <_fflush_r+0x1c>
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <_fflush_r+0x50>)
 8006e76:	429c      	cmp	r4, r3
 8006e78:	bf08      	it	eq
 8006e7a:	68ec      	ldreq	r4, [r5, #12]
 8006e7c:	e7ec      	b.n	8006e58 <_fflush_r+0x1c>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
 8006e82:	bf00      	nop
 8006e84:	08009ae0 	.word	0x08009ae0
 8006e88:	08009b00 	.word	0x08009b00
 8006e8c:	08009ac0 	.word	0x08009ac0

08006e90 <std>:
 8006e90:	2300      	movs	r3, #0
 8006e92:	b510      	push	{r4, lr}
 8006e94:	4604      	mov	r4, r0
 8006e96:	e9c0 3300 	strd	r3, r3, [r0]
 8006e9a:	6083      	str	r3, [r0, #8]
 8006e9c:	8181      	strh	r1, [r0, #12]
 8006e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8006ea0:	81c2      	strh	r2, [r0, #14]
 8006ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ea6:	6183      	str	r3, [r0, #24]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	2208      	movs	r2, #8
 8006eac:	305c      	adds	r0, #92	; 0x5c
 8006eae:	f7fe fb5a 	bl	8005566 <memset>
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <std+0x38>)
 8006eb4:	6263      	str	r3, [r4, #36]	; 0x24
 8006eb6:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <std+0x3c>)
 8006eb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <std+0x40>)
 8006ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ebe:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <std+0x44>)
 8006ec0:	6224      	str	r4, [r4, #32]
 8006ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ec4:	bd10      	pop	{r4, pc}
 8006ec6:	bf00      	nop
 8006ec8:	08007add 	.word	0x08007add
 8006ecc:	08007aff 	.word	0x08007aff
 8006ed0:	08007b37 	.word	0x08007b37
 8006ed4:	08007b5b 	.word	0x08007b5b

08006ed8 <_cleanup_r>:
 8006ed8:	4901      	ldr	r1, [pc, #4]	; (8006ee0 <_cleanup_r+0x8>)
 8006eda:	f000 b885 	b.w	8006fe8 <_fwalk_reent>
 8006ede:	bf00      	nop
 8006ee0:	08006e3d 	.word	0x08006e3d

08006ee4 <__sfmoreglue>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	1e4a      	subs	r2, r1, #1
 8006ee8:	2568      	movs	r5, #104	; 0x68
 8006eea:	4355      	muls	r5, r2
 8006eec:	460e      	mov	r6, r1
 8006eee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ef2:	f000 fc49 	bl	8007788 <_malloc_r>
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	b140      	cbz	r0, 8006f0c <__sfmoreglue+0x28>
 8006efa:	2100      	movs	r1, #0
 8006efc:	e9c0 1600 	strd	r1, r6, [r0]
 8006f00:	300c      	adds	r0, #12
 8006f02:	60a0      	str	r0, [r4, #8]
 8006f04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f08:	f7fe fb2d 	bl	8005566 <memset>
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}

08006f10 <__sinit>:
 8006f10:	6983      	ldr	r3, [r0, #24]
 8006f12:	b510      	push	{r4, lr}
 8006f14:	4604      	mov	r4, r0
 8006f16:	bb33      	cbnz	r3, 8006f66 <__sinit+0x56>
 8006f18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006f1c:	6503      	str	r3, [r0, #80]	; 0x50
 8006f1e:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <__sinit+0x58>)
 8006f20:	4a12      	ldr	r2, [pc, #72]	; (8006f6c <__sinit+0x5c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6282      	str	r2, [r0, #40]	; 0x28
 8006f26:	4298      	cmp	r0, r3
 8006f28:	bf04      	itt	eq
 8006f2a:	2301      	moveq	r3, #1
 8006f2c:	6183      	streq	r3, [r0, #24]
 8006f2e:	f000 f81f 	bl	8006f70 <__sfp>
 8006f32:	6060      	str	r0, [r4, #4]
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 f81b 	bl	8006f70 <__sfp>
 8006f3a:	60a0      	str	r0, [r4, #8]
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 f817 	bl	8006f70 <__sfp>
 8006f42:	2200      	movs	r2, #0
 8006f44:	60e0      	str	r0, [r4, #12]
 8006f46:	2104      	movs	r1, #4
 8006f48:	6860      	ldr	r0, [r4, #4]
 8006f4a:	f7ff ffa1 	bl	8006e90 <std>
 8006f4e:	2201      	movs	r2, #1
 8006f50:	2109      	movs	r1, #9
 8006f52:	68a0      	ldr	r0, [r4, #8]
 8006f54:	f7ff ff9c 	bl	8006e90 <std>
 8006f58:	2202      	movs	r2, #2
 8006f5a:	2112      	movs	r1, #18
 8006f5c:	68e0      	ldr	r0, [r4, #12]
 8006f5e:	f7ff ff97 	bl	8006e90 <std>
 8006f62:	2301      	movs	r3, #1
 8006f64:	61a3      	str	r3, [r4, #24]
 8006f66:	bd10      	pop	{r4, pc}
 8006f68:	08009a78 	.word	0x08009a78
 8006f6c:	08006ed9 	.word	0x08006ed9

08006f70 <__sfp>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	4b1b      	ldr	r3, [pc, #108]	; (8006fe0 <__sfp+0x70>)
 8006f74:	681e      	ldr	r6, [r3, #0]
 8006f76:	69b3      	ldr	r3, [r6, #24]
 8006f78:	4607      	mov	r7, r0
 8006f7a:	b913      	cbnz	r3, 8006f82 <__sfp+0x12>
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f7ff ffc7 	bl	8006f10 <__sinit>
 8006f82:	3648      	adds	r6, #72	; 0x48
 8006f84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	d503      	bpl.n	8006f94 <__sfp+0x24>
 8006f8c:	6833      	ldr	r3, [r6, #0]
 8006f8e:	b133      	cbz	r3, 8006f9e <__sfp+0x2e>
 8006f90:	6836      	ldr	r6, [r6, #0]
 8006f92:	e7f7      	b.n	8006f84 <__sfp+0x14>
 8006f94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f98:	b16d      	cbz	r5, 8006fb6 <__sfp+0x46>
 8006f9a:	3468      	adds	r4, #104	; 0x68
 8006f9c:	e7f4      	b.n	8006f88 <__sfp+0x18>
 8006f9e:	2104      	movs	r1, #4
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f7ff ff9f 	bl	8006ee4 <__sfmoreglue>
 8006fa6:	6030      	str	r0, [r6, #0]
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d1f1      	bne.n	8006f90 <__sfp+0x20>
 8006fac:	230c      	movs	r3, #12
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <__sfp+0x74>)
 8006fb8:	6665      	str	r5, [r4, #100]	; 0x64
 8006fba:	e9c4 5500 	strd	r5, r5, [r4]
 8006fbe:	60a5      	str	r5, [r4, #8]
 8006fc0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006fc4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006fc8:	2208      	movs	r2, #8
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fd0:	f7fe fac9 	bl	8005566 <memset>
 8006fd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fdc:	e7e9      	b.n	8006fb2 <__sfp+0x42>
 8006fde:	bf00      	nop
 8006fe0:	08009a78 	.word	0x08009a78
 8006fe4:	ffff0001 	.word	0xffff0001

08006fe8 <_fwalk_reent>:
 8006fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fec:	4680      	mov	r8, r0
 8006fee:	4689      	mov	r9, r1
 8006ff0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	b914      	cbnz	r4, 8006ffe <_fwalk_reent+0x16>
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007002:	3f01      	subs	r7, #1
 8007004:	d501      	bpl.n	800700a <_fwalk_reent+0x22>
 8007006:	6824      	ldr	r4, [r4, #0]
 8007008:	e7f5      	b.n	8006ff6 <_fwalk_reent+0xe>
 800700a:	89ab      	ldrh	r3, [r5, #12]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d907      	bls.n	8007020 <_fwalk_reent+0x38>
 8007010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007014:	3301      	adds	r3, #1
 8007016:	d003      	beq.n	8007020 <_fwalk_reent+0x38>
 8007018:	4629      	mov	r1, r5
 800701a:	4640      	mov	r0, r8
 800701c:	47c8      	blx	r9
 800701e:	4306      	orrs	r6, r0
 8007020:	3568      	adds	r5, #104	; 0x68
 8007022:	e7ee      	b.n	8007002 <_fwalk_reent+0x1a>

08007024 <_localeconv_r>:
 8007024:	4b04      	ldr	r3, [pc, #16]	; (8007038 <_localeconv_r+0x14>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6a18      	ldr	r0, [r3, #32]
 800702a:	4b04      	ldr	r3, [pc, #16]	; (800703c <_localeconv_r+0x18>)
 800702c:	2800      	cmp	r0, #0
 800702e:	bf08      	it	eq
 8007030:	4618      	moveq	r0, r3
 8007032:	30f0      	adds	r0, #240	; 0xf0
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	2000007c 	.word	0x2000007c
 800703c:	200000e0 	.word	0x200000e0

08007040 <__swhatbuf_r>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	460e      	mov	r6, r1
 8007044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007048:	2900      	cmp	r1, #0
 800704a:	b096      	sub	sp, #88	; 0x58
 800704c:	4614      	mov	r4, r2
 800704e:	461d      	mov	r5, r3
 8007050:	da07      	bge.n	8007062 <__swhatbuf_r+0x22>
 8007052:	2300      	movs	r3, #0
 8007054:	602b      	str	r3, [r5, #0]
 8007056:	89b3      	ldrh	r3, [r6, #12]
 8007058:	061a      	lsls	r2, r3, #24
 800705a:	d410      	bmi.n	800707e <__swhatbuf_r+0x3e>
 800705c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007060:	e00e      	b.n	8007080 <__swhatbuf_r+0x40>
 8007062:	466a      	mov	r2, sp
 8007064:	f000 fda0 	bl	8007ba8 <_fstat_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	dbf2      	blt.n	8007052 <__swhatbuf_r+0x12>
 800706c:	9a01      	ldr	r2, [sp, #4]
 800706e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007072:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007076:	425a      	negs	r2, r3
 8007078:	415a      	adcs	r2, r3
 800707a:	602a      	str	r2, [r5, #0]
 800707c:	e7ee      	b.n	800705c <__swhatbuf_r+0x1c>
 800707e:	2340      	movs	r3, #64	; 0x40
 8007080:	2000      	movs	r0, #0
 8007082:	6023      	str	r3, [r4, #0]
 8007084:	b016      	add	sp, #88	; 0x58
 8007086:	bd70      	pop	{r4, r5, r6, pc}

08007088 <__smakebuf_r>:
 8007088:	898b      	ldrh	r3, [r1, #12]
 800708a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800708c:	079d      	lsls	r5, r3, #30
 800708e:	4606      	mov	r6, r0
 8007090:	460c      	mov	r4, r1
 8007092:	d507      	bpl.n	80070a4 <__smakebuf_r+0x1c>
 8007094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	6123      	str	r3, [r4, #16]
 800709c:	2301      	movs	r3, #1
 800709e:	6163      	str	r3, [r4, #20]
 80070a0:	b002      	add	sp, #8
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
 80070a4:	ab01      	add	r3, sp, #4
 80070a6:	466a      	mov	r2, sp
 80070a8:	f7ff ffca 	bl	8007040 <__swhatbuf_r>
 80070ac:	9900      	ldr	r1, [sp, #0]
 80070ae:	4605      	mov	r5, r0
 80070b0:	4630      	mov	r0, r6
 80070b2:	f000 fb69 	bl	8007788 <_malloc_r>
 80070b6:	b948      	cbnz	r0, 80070cc <__smakebuf_r+0x44>
 80070b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070bc:	059a      	lsls	r2, r3, #22
 80070be:	d4ef      	bmi.n	80070a0 <__smakebuf_r+0x18>
 80070c0:	f023 0303 	bic.w	r3, r3, #3
 80070c4:	f043 0302 	orr.w	r3, r3, #2
 80070c8:	81a3      	strh	r3, [r4, #12]
 80070ca:	e7e3      	b.n	8007094 <__smakebuf_r+0xc>
 80070cc:	4b0d      	ldr	r3, [pc, #52]	; (8007104 <__smakebuf_r+0x7c>)
 80070ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	6020      	str	r0, [r4, #0]
 80070d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	9b00      	ldr	r3, [sp, #0]
 80070dc:	6163      	str	r3, [r4, #20]
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	6120      	str	r0, [r4, #16]
 80070e2:	b15b      	cbz	r3, 80070fc <__smakebuf_r+0x74>
 80070e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070e8:	4630      	mov	r0, r6
 80070ea:	f000 fd6f 	bl	8007bcc <_isatty_r>
 80070ee:	b128      	cbz	r0, 80070fc <__smakebuf_r+0x74>
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	81a3      	strh	r3, [r4, #12]
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	431d      	orrs	r5, r3
 8007100:	81a5      	strh	r5, [r4, #12]
 8007102:	e7cd      	b.n	80070a0 <__smakebuf_r+0x18>
 8007104:	08006ed9 	.word	0x08006ed9

08007108 <malloc>:
 8007108:	4b02      	ldr	r3, [pc, #8]	; (8007114 <malloc+0xc>)
 800710a:	4601      	mov	r1, r0
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	f000 bb3b 	b.w	8007788 <_malloc_r>
 8007112:	bf00      	nop
 8007114:	2000007c 	.word	0x2000007c

08007118 <_Balloc>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800711c:	4604      	mov	r4, r0
 800711e:	460e      	mov	r6, r1
 8007120:	b93d      	cbnz	r5, 8007132 <_Balloc+0x1a>
 8007122:	2010      	movs	r0, #16
 8007124:	f7ff fff0 	bl	8007108 <malloc>
 8007128:	6260      	str	r0, [r4, #36]	; 0x24
 800712a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800712e:	6005      	str	r5, [r0, #0]
 8007130:	60c5      	str	r5, [r0, #12]
 8007132:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007134:	68eb      	ldr	r3, [r5, #12]
 8007136:	b183      	cbz	r3, 800715a <_Balloc+0x42>
 8007138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007140:	b9b8      	cbnz	r0, 8007172 <_Balloc+0x5a>
 8007142:	2101      	movs	r1, #1
 8007144:	fa01 f506 	lsl.w	r5, r1, r6
 8007148:	1d6a      	adds	r2, r5, #5
 800714a:	0092      	lsls	r2, r2, #2
 800714c:	4620      	mov	r0, r4
 800714e:	f000 fabf 	bl	80076d0 <_calloc_r>
 8007152:	b160      	cbz	r0, 800716e <_Balloc+0x56>
 8007154:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007158:	e00e      	b.n	8007178 <_Balloc+0x60>
 800715a:	2221      	movs	r2, #33	; 0x21
 800715c:	2104      	movs	r1, #4
 800715e:	4620      	mov	r0, r4
 8007160:	f000 fab6 	bl	80076d0 <_calloc_r>
 8007164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007166:	60e8      	str	r0, [r5, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e4      	bne.n	8007138 <_Balloc+0x20>
 800716e:	2000      	movs	r0, #0
 8007170:	bd70      	pop	{r4, r5, r6, pc}
 8007172:	6802      	ldr	r2, [r0, #0]
 8007174:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007178:	2300      	movs	r3, #0
 800717a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800717e:	e7f7      	b.n	8007170 <_Balloc+0x58>

08007180 <_Bfree>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007184:	4606      	mov	r6, r0
 8007186:	460d      	mov	r5, r1
 8007188:	b93c      	cbnz	r4, 800719a <_Bfree+0x1a>
 800718a:	2010      	movs	r0, #16
 800718c:	f7ff ffbc 	bl	8007108 <malloc>
 8007190:	6270      	str	r0, [r6, #36]	; 0x24
 8007192:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007196:	6004      	str	r4, [r0, #0]
 8007198:	60c4      	str	r4, [r0, #12]
 800719a:	b13d      	cbz	r5, 80071ac <_Bfree+0x2c>
 800719c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800719e:	686a      	ldr	r2, [r5, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071a6:	6029      	str	r1, [r5, #0]
 80071a8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80071ac:	bd70      	pop	{r4, r5, r6, pc}

080071ae <__multadd>:
 80071ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b2:	690d      	ldr	r5, [r1, #16]
 80071b4:	461f      	mov	r7, r3
 80071b6:	4606      	mov	r6, r0
 80071b8:	460c      	mov	r4, r1
 80071ba:	f101 0c14 	add.w	ip, r1, #20
 80071be:	2300      	movs	r3, #0
 80071c0:	f8dc 0000 	ldr.w	r0, [ip]
 80071c4:	b281      	uxth	r1, r0
 80071c6:	fb02 7101 	mla	r1, r2, r1, r7
 80071ca:	0c0f      	lsrs	r7, r1, #16
 80071cc:	0c00      	lsrs	r0, r0, #16
 80071ce:	fb02 7000 	mla	r0, r2, r0, r7
 80071d2:	b289      	uxth	r1, r1
 80071d4:	3301      	adds	r3, #1
 80071d6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80071da:	429d      	cmp	r5, r3
 80071dc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80071e0:	f84c 1b04 	str.w	r1, [ip], #4
 80071e4:	dcec      	bgt.n	80071c0 <__multadd+0x12>
 80071e6:	b1d7      	cbz	r7, 800721e <__multadd+0x70>
 80071e8:	68a3      	ldr	r3, [r4, #8]
 80071ea:	42ab      	cmp	r3, r5
 80071ec:	dc12      	bgt.n	8007214 <__multadd+0x66>
 80071ee:	6861      	ldr	r1, [r4, #4]
 80071f0:	4630      	mov	r0, r6
 80071f2:	3101      	adds	r1, #1
 80071f4:	f7ff ff90 	bl	8007118 <_Balloc>
 80071f8:	6922      	ldr	r2, [r4, #16]
 80071fa:	3202      	adds	r2, #2
 80071fc:	f104 010c 	add.w	r1, r4, #12
 8007200:	4680      	mov	r8, r0
 8007202:	0092      	lsls	r2, r2, #2
 8007204:	300c      	adds	r0, #12
 8007206:	f7fe f9a3 	bl	8005550 <memcpy>
 800720a:	4621      	mov	r1, r4
 800720c:	4630      	mov	r0, r6
 800720e:	f7ff ffb7 	bl	8007180 <_Bfree>
 8007212:	4644      	mov	r4, r8
 8007214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007218:	3501      	adds	r5, #1
 800721a:	615f      	str	r7, [r3, #20]
 800721c:	6125      	str	r5, [r4, #16]
 800721e:	4620      	mov	r0, r4
 8007220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007224 <__hi0bits>:
 8007224:	0c02      	lsrs	r2, r0, #16
 8007226:	0412      	lsls	r2, r2, #16
 8007228:	4603      	mov	r3, r0
 800722a:	b9b2      	cbnz	r2, 800725a <__hi0bits+0x36>
 800722c:	0403      	lsls	r3, r0, #16
 800722e:	2010      	movs	r0, #16
 8007230:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007234:	bf04      	itt	eq
 8007236:	021b      	lsleq	r3, r3, #8
 8007238:	3008      	addeq	r0, #8
 800723a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800723e:	bf04      	itt	eq
 8007240:	011b      	lsleq	r3, r3, #4
 8007242:	3004      	addeq	r0, #4
 8007244:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007248:	bf04      	itt	eq
 800724a:	009b      	lsleq	r3, r3, #2
 800724c:	3002      	addeq	r0, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	db06      	blt.n	8007260 <__hi0bits+0x3c>
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	d503      	bpl.n	800725e <__hi0bits+0x3a>
 8007256:	3001      	adds	r0, #1
 8007258:	4770      	bx	lr
 800725a:	2000      	movs	r0, #0
 800725c:	e7e8      	b.n	8007230 <__hi0bits+0xc>
 800725e:	2020      	movs	r0, #32
 8007260:	4770      	bx	lr

08007262 <__lo0bits>:
 8007262:	6803      	ldr	r3, [r0, #0]
 8007264:	f013 0207 	ands.w	r2, r3, #7
 8007268:	4601      	mov	r1, r0
 800726a:	d00b      	beq.n	8007284 <__lo0bits+0x22>
 800726c:	07da      	lsls	r2, r3, #31
 800726e:	d423      	bmi.n	80072b8 <__lo0bits+0x56>
 8007270:	0798      	lsls	r0, r3, #30
 8007272:	bf49      	itett	mi
 8007274:	085b      	lsrmi	r3, r3, #1
 8007276:	089b      	lsrpl	r3, r3, #2
 8007278:	2001      	movmi	r0, #1
 800727a:	600b      	strmi	r3, [r1, #0]
 800727c:	bf5c      	itt	pl
 800727e:	600b      	strpl	r3, [r1, #0]
 8007280:	2002      	movpl	r0, #2
 8007282:	4770      	bx	lr
 8007284:	b298      	uxth	r0, r3
 8007286:	b9a8      	cbnz	r0, 80072b4 <__lo0bits+0x52>
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	2010      	movs	r0, #16
 800728c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007290:	bf04      	itt	eq
 8007292:	0a1b      	lsreq	r3, r3, #8
 8007294:	3008      	addeq	r0, #8
 8007296:	071a      	lsls	r2, r3, #28
 8007298:	bf04      	itt	eq
 800729a:	091b      	lsreq	r3, r3, #4
 800729c:	3004      	addeq	r0, #4
 800729e:	079a      	lsls	r2, r3, #30
 80072a0:	bf04      	itt	eq
 80072a2:	089b      	lsreq	r3, r3, #2
 80072a4:	3002      	addeq	r0, #2
 80072a6:	07da      	lsls	r2, r3, #31
 80072a8:	d402      	bmi.n	80072b0 <__lo0bits+0x4e>
 80072aa:	085b      	lsrs	r3, r3, #1
 80072ac:	d006      	beq.n	80072bc <__lo0bits+0x5a>
 80072ae:	3001      	adds	r0, #1
 80072b0:	600b      	str	r3, [r1, #0]
 80072b2:	4770      	bx	lr
 80072b4:	4610      	mov	r0, r2
 80072b6:	e7e9      	b.n	800728c <__lo0bits+0x2a>
 80072b8:	2000      	movs	r0, #0
 80072ba:	4770      	bx	lr
 80072bc:	2020      	movs	r0, #32
 80072be:	4770      	bx	lr

080072c0 <__i2b>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	460c      	mov	r4, r1
 80072c4:	2101      	movs	r1, #1
 80072c6:	f7ff ff27 	bl	8007118 <_Balloc>
 80072ca:	2201      	movs	r2, #1
 80072cc:	6144      	str	r4, [r0, #20]
 80072ce:	6102      	str	r2, [r0, #16]
 80072d0:	bd10      	pop	{r4, pc}

080072d2 <__multiply>:
 80072d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d6:	4614      	mov	r4, r2
 80072d8:	690a      	ldr	r2, [r1, #16]
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	429a      	cmp	r2, r3
 80072de:	bfb8      	it	lt
 80072e0:	460b      	movlt	r3, r1
 80072e2:	4688      	mov	r8, r1
 80072e4:	bfbc      	itt	lt
 80072e6:	46a0      	movlt	r8, r4
 80072e8:	461c      	movlt	r4, r3
 80072ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072fa:	eb07 0609 	add.w	r6, r7, r9
 80072fe:	42b3      	cmp	r3, r6
 8007300:	bfb8      	it	lt
 8007302:	3101      	addlt	r1, #1
 8007304:	f7ff ff08 	bl	8007118 <_Balloc>
 8007308:	f100 0514 	add.w	r5, r0, #20
 800730c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007310:	462b      	mov	r3, r5
 8007312:	2200      	movs	r2, #0
 8007314:	4573      	cmp	r3, lr
 8007316:	d316      	bcc.n	8007346 <__multiply+0x74>
 8007318:	f104 0214 	add.w	r2, r4, #20
 800731c:	f108 0114 	add.w	r1, r8, #20
 8007320:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007324:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	9b00      	ldr	r3, [sp, #0]
 800732c:	9201      	str	r2, [sp, #4]
 800732e:	4293      	cmp	r3, r2
 8007330:	d80c      	bhi.n	800734c <__multiply+0x7a>
 8007332:	2e00      	cmp	r6, #0
 8007334:	dd03      	ble.n	800733e <__multiply+0x6c>
 8007336:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800733a:	2b00      	cmp	r3, #0
 800733c:	d05d      	beq.n	80073fa <__multiply+0x128>
 800733e:	6106      	str	r6, [r0, #16]
 8007340:	b003      	add	sp, #12
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	f843 2b04 	str.w	r2, [r3], #4
 800734a:	e7e3      	b.n	8007314 <__multiply+0x42>
 800734c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007350:	f1bb 0f00 	cmp.w	fp, #0
 8007354:	d023      	beq.n	800739e <__multiply+0xcc>
 8007356:	4689      	mov	r9, r1
 8007358:	46ac      	mov	ip, r5
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007362:	f8dc a000 	ldr.w	sl, [ip]
 8007366:	b2a3      	uxth	r3, r4
 8007368:	fa1f fa8a 	uxth.w	sl, sl
 800736c:	fb0b a303 	mla	r3, fp, r3, sl
 8007370:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007374:	f8dc 4000 	ldr.w	r4, [ip]
 8007378:	4443      	add	r3, r8
 800737a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800737e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007382:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007386:	46e2      	mov	sl, ip
 8007388:	b29b      	uxth	r3, r3
 800738a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800738e:	454f      	cmp	r7, r9
 8007390:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007394:	f84a 3b04 	str.w	r3, [sl], #4
 8007398:	d82b      	bhi.n	80073f2 <__multiply+0x120>
 800739a:	f8cc 8004 	str.w	r8, [ip, #4]
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80073a4:	3204      	adds	r2, #4
 80073a6:	f1ba 0f00 	cmp.w	sl, #0
 80073aa:	d020      	beq.n	80073ee <__multiply+0x11c>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	4689      	mov	r9, r1
 80073b0:	46a8      	mov	r8, r5
 80073b2:	f04f 0b00 	mov.w	fp, #0
 80073b6:	f8b9 c000 	ldrh.w	ip, [r9]
 80073ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80073be:	fb0a 440c 	mla	r4, sl, ip, r4
 80073c2:	445c      	add	r4, fp
 80073c4:	46c4      	mov	ip, r8
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80073cc:	f84c 3b04 	str.w	r3, [ip], #4
 80073d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80073d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80073d8:	0c1b      	lsrs	r3, r3, #16
 80073da:	fb0a b303 	mla	r3, sl, r3, fp
 80073de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80073e2:	454f      	cmp	r7, r9
 80073e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80073e8:	d805      	bhi.n	80073f6 <__multiply+0x124>
 80073ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80073ee:	3504      	adds	r5, #4
 80073f0:	e79b      	b.n	800732a <__multiply+0x58>
 80073f2:	46d4      	mov	ip, sl
 80073f4:	e7b3      	b.n	800735e <__multiply+0x8c>
 80073f6:	46e0      	mov	r8, ip
 80073f8:	e7dd      	b.n	80073b6 <__multiply+0xe4>
 80073fa:	3e01      	subs	r6, #1
 80073fc:	e799      	b.n	8007332 <__multiply+0x60>
	...

08007400 <__pow5mult>:
 8007400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007404:	4615      	mov	r5, r2
 8007406:	f012 0203 	ands.w	r2, r2, #3
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	d007      	beq.n	8007420 <__pow5mult+0x20>
 8007410:	3a01      	subs	r2, #1
 8007412:	4c21      	ldr	r4, [pc, #132]	; (8007498 <__pow5mult+0x98>)
 8007414:	2300      	movs	r3, #0
 8007416:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800741a:	f7ff fec8 	bl	80071ae <__multadd>
 800741e:	4607      	mov	r7, r0
 8007420:	10ad      	asrs	r5, r5, #2
 8007422:	d035      	beq.n	8007490 <__pow5mult+0x90>
 8007424:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007426:	b93c      	cbnz	r4, 8007438 <__pow5mult+0x38>
 8007428:	2010      	movs	r0, #16
 800742a:	f7ff fe6d 	bl	8007108 <malloc>
 800742e:	6270      	str	r0, [r6, #36]	; 0x24
 8007430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007434:	6004      	str	r4, [r0, #0]
 8007436:	60c4      	str	r4, [r0, #12]
 8007438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800743c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007440:	b94c      	cbnz	r4, 8007456 <__pow5mult+0x56>
 8007442:	f240 2171 	movw	r1, #625	; 0x271
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff ff3a 	bl	80072c0 <__i2b>
 800744c:	2300      	movs	r3, #0
 800744e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007452:	4604      	mov	r4, r0
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	f04f 0800 	mov.w	r8, #0
 800745a:	07eb      	lsls	r3, r5, #31
 800745c:	d50a      	bpl.n	8007474 <__pow5mult+0x74>
 800745e:	4639      	mov	r1, r7
 8007460:	4622      	mov	r2, r4
 8007462:	4630      	mov	r0, r6
 8007464:	f7ff ff35 	bl	80072d2 <__multiply>
 8007468:	4639      	mov	r1, r7
 800746a:	4681      	mov	r9, r0
 800746c:	4630      	mov	r0, r6
 800746e:	f7ff fe87 	bl	8007180 <_Bfree>
 8007472:	464f      	mov	r7, r9
 8007474:	106d      	asrs	r5, r5, #1
 8007476:	d00b      	beq.n	8007490 <__pow5mult+0x90>
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	b938      	cbnz	r0, 800748c <__pow5mult+0x8c>
 800747c:	4622      	mov	r2, r4
 800747e:	4621      	mov	r1, r4
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff ff26 	bl	80072d2 <__multiply>
 8007486:	6020      	str	r0, [r4, #0]
 8007488:	f8c0 8000 	str.w	r8, [r0]
 800748c:	4604      	mov	r4, r0
 800748e:	e7e4      	b.n	800745a <__pow5mult+0x5a>
 8007490:	4638      	mov	r0, r7
 8007492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007496:	bf00      	nop
 8007498:	08009c10 	.word	0x08009c10

0800749c <__lshift>:
 800749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	460c      	mov	r4, r1
 80074a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	6849      	ldr	r1, [r1, #4]
 80074aa:	eb0a 0903 	add.w	r9, sl, r3
 80074ae:	68a3      	ldr	r3, [r4, #8]
 80074b0:	4607      	mov	r7, r0
 80074b2:	4616      	mov	r6, r2
 80074b4:	f109 0501 	add.w	r5, r9, #1
 80074b8:	42ab      	cmp	r3, r5
 80074ba:	db32      	blt.n	8007522 <__lshift+0x86>
 80074bc:	4638      	mov	r0, r7
 80074be:	f7ff fe2b 	bl	8007118 <_Balloc>
 80074c2:	2300      	movs	r3, #0
 80074c4:	4680      	mov	r8, r0
 80074c6:	f100 0114 	add.w	r1, r0, #20
 80074ca:	461a      	mov	r2, r3
 80074cc:	4553      	cmp	r3, sl
 80074ce:	db2b      	blt.n	8007528 <__lshift+0x8c>
 80074d0:	6920      	ldr	r0, [r4, #16]
 80074d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074d6:	f104 0314 	add.w	r3, r4, #20
 80074da:	f016 021f 	ands.w	r2, r6, #31
 80074de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074e6:	d025      	beq.n	8007534 <__lshift+0x98>
 80074e8:	f1c2 0e20 	rsb	lr, r2, #32
 80074ec:	2000      	movs	r0, #0
 80074ee:	681e      	ldr	r6, [r3, #0]
 80074f0:	468a      	mov	sl, r1
 80074f2:	4096      	lsls	r6, r2
 80074f4:	4330      	orrs	r0, r6
 80074f6:	f84a 0b04 	str.w	r0, [sl], #4
 80074fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80074fe:	459c      	cmp	ip, r3
 8007500:	fa20 f00e 	lsr.w	r0, r0, lr
 8007504:	d814      	bhi.n	8007530 <__lshift+0x94>
 8007506:	6048      	str	r0, [r1, #4]
 8007508:	b108      	cbz	r0, 800750e <__lshift+0x72>
 800750a:	f109 0502 	add.w	r5, r9, #2
 800750e:	3d01      	subs	r5, #1
 8007510:	4638      	mov	r0, r7
 8007512:	f8c8 5010 	str.w	r5, [r8, #16]
 8007516:	4621      	mov	r1, r4
 8007518:	f7ff fe32 	bl	8007180 <_Bfree>
 800751c:	4640      	mov	r0, r8
 800751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007522:	3101      	adds	r1, #1
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	e7c7      	b.n	80074b8 <__lshift+0x1c>
 8007528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800752c:	3301      	adds	r3, #1
 800752e:	e7cd      	b.n	80074cc <__lshift+0x30>
 8007530:	4651      	mov	r1, sl
 8007532:	e7dc      	b.n	80074ee <__lshift+0x52>
 8007534:	3904      	subs	r1, #4
 8007536:	f853 2b04 	ldr.w	r2, [r3], #4
 800753a:	f841 2f04 	str.w	r2, [r1, #4]!
 800753e:	459c      	cmp	ip, r3
 8007540:	d8f9      	bhi.n	8007536 <__lshift+0x9a>
 8007542:	e7e4      	b.n	800750e <__lshift+0x72>

08007544 <__mcmp>:
 8007544:	6903      	ldr	r3, [r0, #16]
 8007546:	690a      	ldr	r2, [r1, #16]
 8007548:	1a9b      	subs	r3, r3, r2
 800754a:	b530      	push	{r4, r5, lr}
 800754c:	d10c      	bne.n	8007568 <__mcmp+0x24>
 800754e:	0092      	lsls	r2, r2, #2
 8007550:	3014      	adds	r0, #20
 8007552:	3114      	adds	r1, #20
 8007554:	1884      	adds	r4, r0, r2
 8007556:	4411      	add	r1, r2
 8007558:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800755c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007560:	4295      	cmp	r5, r2
 8007562:	d003      	beq.n	800756c <__mcmp+0x28>
 8007564:	d305      	bcc.n	8007572 <__mcmp+0x2e>
 8007566:	2301      	movs	r3, #1
 8007568:	4618      	mov	r0, r3
 800756a:	bd30      	pop	{r4, r5, pc}
 800756c:	42a0      	cmp	r0, r4
 800756e:	d3f3      	bcc.n	8007558 <__mcmp+0x14>
 8007570:	e7fa      	b.n	8007568 <__mcmp+0x24>
 8007572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007576:	e7f7      	b.n	8007568 <__mcmp+0x24>

08007578 <__mdiff>:
 8007578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	460d      	mov	r5, r1
 800757e:	4607      	mov	r7, r0
 8007580:	4611      	mov	r1, r2
 8007582:	4628      	mov	r0, r5
 8007584:	4614      	mov	r4, r2
 8007586:	f7ff ffdd 	bl	8007544 <__mcmp>
 800758a:	1e06      	subs	r6, r0, #0
 800758c:	d108      	bne.n	80075a0 <__mdiff+0x28>
 800758e:	4631      	mov	r1, r6
 8007590:	4638      	mov	r0, r7
 8007592:	f7ff fdc1 	bl	8007118 <_Balloc>
 8007596:	2301      	movs	r3, #1
 8007598:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800759c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a0:	bfa4      	itt	ge
 80075a2:	4623      	movge	r3, r4
 80075a4:	462c      	movge	r4, r5
 80075a6:	4638      	mov	r0, r7
 80075a8:	6861      	ldr	r1, [r4, #4]
 80075aa:	bfa6      	itte	ge
 80075ac:	461d      	movge	r5, r3
 80075ae:	2600      	movge	r6, #0
 80075b0:	2601      	movlt	r6, #1
 80075b2:	f7ff fdb1 	bl	8007118 <_Balloc>
 80075b6:	692b      	ldr	r3, [r5, #16]
 80075b8:	60c6      	str	r6, [r0, #12]
 80075ba:	6926      	ldr	r6, [r4, #16]
 80075bc:	f105 0914 	add.w	r9, r5, #20
 80075c0:	f104 0214 	add.w	r2, r4, #20
 80075c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80075c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80075cc:	f100 0514 	add.w	r5, r0, #20
 80075d0:	f04f 0e00 	mov.w	lr, #0
 80075d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80075d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80075dc:	fa1e f18a 	uxtah	r1, lr, sl
 80075e0:	b2a3      	uxth	r3, r4
 80075e2:	1ac9      	subs	r1, r1, r3
 80075e4:	0c23      	lsrs	r3, r4, #16
 80075e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80075ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80075ee:	b289      	uxth	r1, r1
 80075f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80075f4:	45c8      	cmp	r8, r9
 80075f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80075fa:	4694      	mov	ip, r2
 80075fc:	f845 3b04 	str.w	r3, [r5], #4
 8007600:	d8e8      	bhi.n	80075d4 <__mdiff+0x5c>
 8007602:	45bc      	cmp	ip, r7
 8007604:	d304      	bcc.n	8007610 <__mdiff+0x98>
 8007606:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800760a:	b183      	cbz	r3, 800762e <__mdiff+0xb6>
 800760c:	6106      	str	r6, [r0, #16]
 800760e:	e7c5      	b.n	800759c <__mdiff+0x24>
 8007610:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007614:	fa1e f381 	uxtah	r3, lr, r1
 8007618:	141a      	asrs	r2, r3, #16
 800761a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800761e:	b29b      	uxth	r3, r3
 8007620:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007624:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007628:	f845 3b04 	str.w	r3, [r5], #4
 800762c:	e7e9      	b.n	8007602 <__mdiff+0x8a>
 800762e:	3e01      	subs	r6, #1
 8007630:	e7e9      	b.n	8007606 <__mdiff+0x8e>

08007632 <__d2b>:
 8007632:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007636:	460e      	mov	r6, r1
 8007638:	2101      	movs	r1, #1
 800763a:	ec59 8b10 	vmov	r8, r9, d0
 800763e:	4615      	mov	r5, r2
 8007640:	f7ff fd6a 	bl	8007118 <_Balloc>
 8007644:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007648:	4607      	mov	r7, r0
 800764a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800764e:	bb34      	cbnz	r4, 800769e <__d2b+0x6c>
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	f1b8 0300 	subs.w	r3, r8, #0
 8007656:	d027      	beq.n	80076a8 <__d2b+0x76>
 8007658:	a802      	add	r0, sp, #8
 800765a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800765e:	f7ff fe00 	bl	8007262 <__lo0bits>
 8007662:	9900      	ldr	r1, [sp, #0]
 8007664:	b1f0      	cbz	r0, 80076a4 <__d2b+0x72>
 8007666:	9a01      	ldr	r2, [sp, #4]
 8007668:	f1c0 0320 	rsb	r3, r0, #32
 800766c:	fa02 f303 	lsl.w	r3, r2, r3
 8007670:	430b      	orrs	r3, r1
 8007672:	40c2      	lsrs	r2, r0
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	9201      	str	r2, [sp, #4]
 8007678:	9b01      	ldr	r3, [sp, #4]
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	bf14      	ite	ne
 8007680:	2102      	movne	r1, #2
 8007682:	2101      	moveq	r1, #1
 8007684:	6139      	str	r1, [r7, #16]
 8007686:	b1c4      	cbz	r4, 80076ba <__d2b+0x88>
 8007688:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800768c:	4404      	add	r4, r0
 800768e:	6034      	str	r4, [r6, #0]
 8007690:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007694:	6028      	str	r0, [r5, #0]
 8007696:	4638      	mov	r0, r7
 8007698:	b003      	add	sp, #12
 800769a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800769e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a2:	e7d5      	b.n	8007650 <__d2b+0x1e>
 80076a4:	6179      	str	r1, [r7, #20]
 80076a6:	e7e7      	b.n	8007678 <__d2b+0x46>
 80076a8:	a801      	add	r0, sp, #4
 80076aa:	f7ff fdda 	bl	8007262 <__lo0bits>
 80076ae:	9b01      	ldr	r3, [sp, #4]
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	2101      	movs	r1, #1
 80076b4:	6139      	str	r1, [r7, #16]
 80076b6:	3020      	adds	r0, #32
 80076b8:	e7e5      	b.n	8007686 <__d2b+0x54>
 80076ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80076be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076c2:	6030      	str	r0, [r6, #0]
 80076c4:	6918      	ldr	r0, [r3, #16]
 80076c6:	f7ff fdad 	bl	8007224 <__hi0bits>
 80076ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80076ce:	e7e1      	b.n	8007694 <__d2b+0x62>

080076d0 <_calloc_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	fb02 f401 	mul.w	r4, r2, r1
 80076d6:	4621      	mov	r1, r4
 80076d8:	f000 f856 	bl	8007788 <_malloc_r>
 80076dc:	4605      	mov	r5, r0
 80076de:	b118      	cbz	r0, 80076e8 <_calloc_r+0x18>
 80076e0:	4622      	mov	r2, r4
 80076e2:	2100      	movs	r1, #0
 80076e4:	f7fd ff3f 	bl	8005566 <memset>
 80076e8:	4628      	mov	r0, r5
 80076ea:	bd38      	pop	{r3, r4, r5, pc}

080076ec <_free_r>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	4605      	mov	r5, r0
 80076f0:	2900      	cmp	r1, #0
 80076f2:	d045      	beq.n	8007780 <_free_r+0x94>
 80076f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076f8:	1f0c      	subs	r4, r1, #4
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	bfb8      	it	lt
 80076fe:	18e4      	addlt	r4, r4, r3
 8007700:	f000 fa98 	bl	8007c34 <__malloc_lock>
 8007704:	4a1f      	ldr	r2, [pc, #124]	; (8007784 <_free_r+0x98>)
 8007706:	6813      	ldr	r3, [r2, #0]
 8007708:	4610      	mov	r0, r2
 800770a:	b933      	cbnz	r3, 800771a <_free_r+0x2e>
 800770c:	6063      	str	r3, [r4, #4]
 800770e:	6014      	str	r4, [r2, #0]
 8007710:	4628      	mov	r0, r5
 8007712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007716:	f000 ba8e 	b.w	8007c36 <__malloc_unlock>
 800771a:	42a3      	cmp	r3, r4
 800771c:	d90c      	bls.n	8007738 <_free_r+0x4c>
 800771e:	6821      	ldr	r1, [r4, #0]
 8007720:	1862      	adds	r2, r4, r1
 8007722:	4293      	cmp	r3, r2
 8007724:	bf04      	itt	eq
 8007726:	681a      	ldreq	r2, [r3, #0]
 8007728:	685b      	ldreq	r3, [r3, #4]
 800772a:	6063      	str	r3, [r4, #4]
 800772c:	bf04      	itt	eq
 800772e:	1852      	addeq	r2, r2, r1
 8007730:	6022      	streq	r2, [r4, #0]
 8007732:	6004      	str	r4, [r0, #0]
 8007734:	e7ec      	b.n	8007710 <_free_r+0x24>
 8007736:	4613      	mov	r3, r2
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	b10a      	cbz	r2, 8007740 <_free_r+0x54>
 800773c:	42a2      	cmp	r2, r4
 800773e:	d9fa      	bls.n	8007736 <_free_r+0x4a>
 8007740:	6819      	ldr	r1, [r3, #0]
 8007742:	1858      	adds	r0, r3, r1
 8007744:	42a0      	cmp	r0, r4
 8007746:	d10b      	bne.n	8007760 <_free_r+0x74>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	4401      	add	r1, r0
 800774c:	1858      	adds	r0, r3, r1
 800774e:	4282      	cmp	r2, r0
 8007750:	6019      	str	r1, [r3, #0]
 8007752:	d1dd      	bne.n	8007710 <_free_r+0x24>
 8007754:	6810      	ldr	r0, [r2, #0]
 8007756:	6852      	ldr	r2, [r2, #4]
 8007758:	605a      	str	r2, [r3, #4]
 800775a:	4401      	add	r1, r0
 800775c:	6019      	str	r1, [r3, #0]
 800775e:	e7d7      	b.n	8007710 <_free_r+0x24>
 8007760:	d902      	bls.n	8007768 <_free_r+0x7c>
 8007762:	230c      	movs	r3, #12
 8007764:	602b      	str	r3, [r5, #0]
 8007766:	e7d3      	b.n	8007710 <_free_r+0x24>
 8007768:	6820      	ldr	r0, [r4, #0]
 800776a:	1821      	adds	r1, r4, r0
 800776c:	428a      	cmp	r2, r1
 800776e:	bf04      	itt	eq
 8007770:	6811      	ldreq	r1, [r2, #0]
 8007772:	6852      	ldreq	r2, [r2, #4]
 8007774:	6062      	str	r2, [r4, #4]
 8007776:	bf04      	itt	eq
 8007778:	1809      	addeq	r1, r1, r0
 800777a:	6021      	streq	r1, [r4, #0]
 800777c:	605c      	str	r4, [r3, #4]
 800777e:	e7c7      	b.n	8007710 <_free_r+0x24>
 8007780:	bd38      	pop	{r3, r4, r5, pc}
 8007782:	bf00      	nop
 8007784:	2000031c 	.word	0x2000031c

08007788 <_malloc_r>:
 8007788:	b570      	push	{r4, r5, r6, lr}
 800778a:	1ccd      	adds	r5, r1, #3
 800778c:	f025 0503 	bic.w	r5, r5, #3
 8007790:	3508      	adds	r5, #8
 8007792:	2d0c      	cmp	r5, #12
 8007794:	bf38      	it	cc
 8007796:	250c      	movcc	r5, #12
 8007798:	2d00      	cmp	r5, #0
 800779a:	4606      	mov	r6, r0
 800779c:	db01      	blt.n	80077a2 <_malloc_r+0x1a>
 800779e:	42a9      	cmp	r1, r5
 80077a0:	d903      	bls.n	80077aa <_malloc_r+0x22>
 80077a2:	230c      	movs	r3, #12
 80077a4:	6033      	str	r3, [r6, #0]
 80077a6:	2000      	movs	r0, #0
 80077a8:	bd70      	pop	{r4, r5, r6, pc}
 80077aa:	f000 fa43 	bl	8007c34 <__malloc_lock>
 80077ae:	4a21      	ldr	r2, [pc, #132]	; (8007834 <_malloc_r+0xac>)
 80077b0:	6814      	ldr	r4, [r2, #0]
 80077b2:	4621      	mov	r1, r4
 80077b4:	b991      	cbnz	r1, 80077dc <_malloc_r+0x54>
 80077b6:	4c20      	ldr	r4, [pc, #128]	; (8007838 <_malloc_r+0xb0>)
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	b91b      	cbnz	r3, 80077c4 <_malloc_r+0x3c>
 80077bc:	4630      	mov	r0, r6
 80077be:	f000 f97d 	bl	8007abc <_sbrk_r>
 80077c2:	6020      	str	r0, [r4, #0]
 80077c4:	4629      	mov	r1, r5
 80077c6:	4630      	mov	r0, r6
 80077c8:	f000 f978 	bl	8007abc <_sbrk_r>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d124      	bne.n	800781a <_malloc_r+0x92>
 80077d0:	230c      	movs	r3, #12
 80077d2:	6033      	str	r3, [r6, #0]
 80077d4:	4630      	mov	r0, r6
 80077d6:	f000 fa2e 	bl	8007c36 <__malloc_unlock>
 80077da:	e7e4      	b.n	80077a6 <_malloc_r+0x1e>
 80077dc:	680b      	ldr	r3, [r1, #0]
 80077de:	1b5b      	subs	r3, r3, r5
 80077e0:	d418      	bmi.n	8007814 <_malloc_r+0x8c>
 80077e2:	2b0b      	cmp	r3, #11
 80077e4:	d90f      	bls.n	8007806 <_malloc_r+0x7e>
 80077e6:	600b      	str	r3, [r1, #0]
 80077e8:	50cd      	str	r5, [r1, r3]
 80077ea:	18cc      	adds	r4, r1, r3
 80077ec:	4630      	mov	r0, r6
 80077ee:	f000 fa22 	bl	8007c36 <__malloc_unlock>
 80077f2:	f104 000b 	add.w	r0, r4, #11
 80077f6:	1d23      	adds	r3, r4, #4
 80077f8:	f020 0007 	bic.w	r0, r0, #7
 80077fc:	1ac3      	subs	r3, r0, r3
 80077fe:	d0d3      	beq.n	80077a8 <_malloc_r+0x20>
 8007800:	425a      	negs	r2, r3
 8007802:	50e2      	str	r2, [r4, r3]
 8007804:	e7d0      	b.n	80077a8 <_malloc_r+0x20>
 8007806:	428c      	cmp	r4, r1
 8007808:	684b      	ldr	r3, [r1, #4]
 800780a:	bf16      	itet	ne
 800780c:	6063      	strne	r3, [r4, #4]
 800780e:	6013      	streq	r3, [r2, #0]
 8007810:	460c      	movne	r4, r1
 8007812:	e7eb      	b.n	80077ec <_malloc_r+0x64>
 8007814:	460c      	mov	r4, r1
 8007816:	6849      	ldr	r1, [r1, #4]
 8007818:	e7cc      	b.n	80077b4 <_malloc_r+0x2c>
 800781a:	1cc4      	adds	r4, r0, #3
 800781c:	f024 0403 	bic.w	r4, r4, #3
 8007820:	42a0      	cmp	r0, r4
 8007822:	d005      	beq.n	8007830 <_malloc_r+0xa8>
 8007824:	1a21      	subs	r1, r4, r0
 8007826:	4630      	mov	r0, r6
 8007828:	f000 f948 	bl	8007abc <_sbrk_r>
 800782c:	3001      	adds	r0, #1
 800782e:	d0cf      	beq.n	80077d0 <_malloc_r+0x48>
 8007830:	6025      	str	r5, [r4, #0]
 8007832:	e7db      	b.n	80077ec <_malloc_r+0x64>
 8007834:	2000031c 	.word	0x2000031c
 8007838:	20000320 	.word	0x20000320

0800783c <__sfputc_r>:
 800783c:	6893      	ldr	r3, [r2, #8]
 800783e:	3b01      	subs	r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	b410      	push	{r4}
 8007844:	6093      	str	r3, [r2, #8]
 8007846:	da08      	bge.n	800785a <__sfputc_r+0x1e>
 8007848:	6994      	ldr	r4, [r2, #24]
 800784a:	42a3      	cmp	r3, r4
 800784c:	db01      	blt.n	8007852 <__sfputc_r+0x16>
 800784e:	290a      	cmp	r1, #10
 8007850:	d103      	bne.n	800785a <__sfputc_r+0x1e>
 8007852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007856:	f7fe bb67 	b.w	8005f28 <__swbuf_r>
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	1c58      	adds	r0, r3, #1
 800785e:	6010      	str	r0, [r2, #0]
 8007860:	7019      	strb	r1, [r3, #0]
 8007862:	4608      	mov	r0, r1
 8007864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007868:	4770      	bx	lr

0800786a <__sfputs_r>:
 800786a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786c:	4606      	mov	r6, r0
 800786e:	460f      	mov	r7, r1
 8007870:	4614      	mov	r4, r2
 8007872:	18d5      	adds	r5, r2, r3
 8007874:	42ac      	cmp	r4, r5
 8007876:	d101      	bne.n	800787c <__sfputs_r+0x12>
 8007878:	2000      	movs	r0, #0
 800787a:	e007      	b.n	800788c <__sfputs_r+0x22>
 800787c:	463a      	mov	r2, r7
 800787e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007882:	4630      	mov	r0, r6
 8007884:	f7ff ffda 	bl	800783c <__sfputc_r>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d1f3      	bne.n	8007874 <__sfputs_r+0xa>
 800788c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007890 <_vfiprintf_r>:
 8007890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007894:	460c      	mov	r4, r1
 8007896:	b09d      	sub	sp, #116	; 0x74
 8007898:	4617      	mov	r7, r2
 800789a:	461d      	mov	r5, r3
 800789c:	4606      	mov	r6, r0
 800789e:	b118      	cbz	r0, 80078a8 <_vfiprintf_r+0x18>
 80078a0:	6983      	ldr	r3, [r0, #24]
 80078a2:	b90b      	cbnz	r3, 80078a8 <_vfiprintf_r+0x18>
 80078a4:	f7ff fb34 	bl	8006f10 <__sinit>
 80078a8:	4b7c      	ldr	r3, [pc, #496]	; (8007a9c <_vfiprintf_r+0x20c>)
 80078aa:	429c      	cmp	r4, r3
 80078ac:	d158      	bne.n	8007960 <_vfiprintf_r+0xd0>
 80078ae:	6874      	ldr	r4, [r6, #4]
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	0718      	lsls	r0, r3, #28
 80078b4:	d55e      	bpl.n	8007974 <_vfiprintf_r+0xe4>
 80078b6:	6923      	ldr	r3, [r4, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d05b      	beq.n	8007974 <_vfiprintf_r+0xe4>
 80078bc:	2300      	movs	r3, #0
 80078be:	9309      	str	r3, [sp, #36]	; 0x24
 80078c0:	2320      	movs	r3, #32
 80078c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078c6:	2330      	movs	r3, #48	; 0x30
 80078c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078cc:	9503      	str	r5, [sp, #12]
 80078ce:	f04f 0b01 	mov.w	fp, #1
 80078d2:	46b8      	mov	r8, r7
 80078d4:	4645      	mov	r5, r8
 80078d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078da:	b10b      	cbz	r3, 80078e0 <_vfiprintf_r+0x50>
 80078dc:	2b25      	cmp	r3, #37	; 0x25
 80078de:	d154      	bne.n	800798a <_vfiprintf_r+0xfa>
 80078e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80078e4:	d00b      	beq.n	80078fe <_vfiprintf_r+0x6e>
 80078e6:	4653      	mov	r3, sl
 80078e8:	463a      	mov	r2, r7
 80078ea:	4621      	mov	r1, r4
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7ff ffbc 	bl	800786a <__sfputs_r>
 80078f2:	3001      	adds	r0, #1
 80078f4:	f000 80c2 	beq.w	8007a7c <_vfiprintf_r+0x1ec>
 80078f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fa:	4453      	add	r3, sl
 80078fc:	9309      	str	r3, [sp, #36]	; 0x24
 80078fe:	f898 3000 	ldrb.w	r3, [r8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80ba 	beq.w	8007a7c <_vfiprintf_r+0x1ec>
 8007908:	2300      	movs	r3, #0
 800790a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800790e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	9307      	str	r3, [sp, #28]
 8007916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800791a:	931a      	str	r3, [sp, #104]	; 0x68
 800791c:	46a8      	mov	r8, r5
 800791e:	2205      	movs	r2, #5
 8007920:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007924:	485e      	ldr	r0, [pc, #376]	; (8007aa0 <_vfiprintf_r+0x210>)
 8007926:	f7f9 fa2b 	bl	8000d80 <memchr>
 800792a:	9b04      	ldr	r3, [sp, #16]
 800792c:	bb78      	cbnz	r0, 800798e <_vfiprintf_r+0xfe>
 800792e:	06d9      	lsls	r1, r3, #27
 8007930:	bf44      	itt	mi
 8007932:	2220      	movmi	r2, #32
 8007934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007938:	071a      	lsls	r2, r3, #28
 800793a:	bf44      	itt	mi
 800793c:	222b      	movmi	r2, #43	; 0x2b
 800793e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007942:	782a      	ldrb	r2, [r5, #0]
 8007944:	2a2a      	cmp	r2, #42	; 0x2a
 8007946:	d02a      	beq.n	800799e <_vfiprintf_r+0x10e>
 8007948:	9a07      	ldr	r2, [sp, #28]
 800794a:	46a8      	mov	r8, r5
 800794c:	2000      	movs	r0, #0
 800794e:	250a      	movs	r5, #10
 8007950:	4641      	mov	r1, r8
 8007952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007956:	3b30      	subs	r3, #48	; 0x30
 8007958:	2b09      	cmp	r3, #9
 800795a:	d969      	bls.n	8007a30 <_vfiprintf_r+0x1a0>
 800795c:	b360      	cbz	r0, 80079b8 <_vfiprintf_r+0x128>
 800795e:	e024      	b.n	80079aa <_vfiprintf_r+0x11a>
 8007960:	4b50      	ldr	r3, [pc, #320]	; (8007aa4 <_vfiprintf_r+0x214>)
 8007962:	429c      	cmp	r4, r3
 8007964:	d101      	bne.n	800796a <_vfiprintf_r+0xda>
 8007966:	68b4      	ldr	r4, [r6, #8]
 8007968:	e7a2      	b.n	80078b0 <_vfiprintf_r+0x20>
 800796a:	4b4f      	ldr	r3, [pc, #316]	; (8007aa8 <_vfiprintf_r+0x218>)
 800796c:	429c      	cmp	r4, r3
 800796e:	bf08      	it	eq
 8007970:	68f4      	ldreq	r4, [r6, #12]
 8007972:	e79d      	b.n	80078b0 <_vfiprintf_r+0x20>
 8007974:	4621      	mov	r1, r4
 8007976:	4630      	mov	r0, r6
 8007978:	f7fe fb28 	bl	8005fcc <__swsetup_r>
 800797c:	2800      	cmp	r0, #0
 800797e:	d09d      	beq.n	80078bc <_vfiprintf_r+0x2c>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007984:	b01d      	add	sp, #116	; 0x74
 8007986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798a:	46a8      	mov	r8, r5
 800798c:	e7a2      	b.n	80078d4 <_vfiprintf_r+0x44>
 800798e:	4a44      	ldr	r2, [pc, #272]	; (8007aa0 <_vfiprintf_r+0x210>)
 8007990:	1a80      	subs	r0, r0, r2
 8007992:	fa0b f000 	lsl.w	r0, fp, r0
 8007996:	4318      	orrs	r0, r3
 8007998:	9004      	str	r0, [sp, #16]
 800799a:	4645      	mov	r5, r8
 800799c:	e7be      	b.n	800791c <_vfiprintf_r+0x8c>
 800799e:	9a03      	ldr	r2, [sp, #12]
 80079a0:	1d11      	adds	r1, r2, #4
 80079a2:	6812      	ldr	r2, [r2, #0]
 80079a4:	9103      	str	r1, [sp, #12]
 80079a6:	2a00      	cmp	r2, #0
 80079a8:	db01      	blt.n	80079ae <_vfiprintf_r+0x11e>
 80079aa:	9207      	str	r2, [sp, #28]
 80079ac:	e004      	b.n	80079b8 <_vfiprintf_r+0x128>
 80079ae:	4252      	negs	r2, r2
 80079b0:	f043 0302 	orr.w	r3, r3, #2
 80079b4:	9207      	str	r2, [sp, #28]
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	f898 3000 	ldrb.w	r3, [r8]
 80079bc:	2b2e      	cmp	r3, #46	; 0x2e
 80079be:	d10e      	bne.n	80079de <_vfiprintf_r+0x14e>
 80079c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80079c4:	2b2a      	cmp	r3, #42	; 0x2a
 80079c6:	d138      	bne.n	8007a3a <_vfiprintf_r+0x1aa>
 80079c8:	9b03      	ldr	r3, [sp, #12]
 80079ca:	1d1a      	adds	r2, r3, #4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	9203      	str	r2, [sp, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bfb8      	it	lt
 80079d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80079d8:	f108 0802 	add.w	r8, r8, #2
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	4d33      	ldr	r5, [pc, #204]	; (8007aac <_vfiprintf_r+0x21c>)
 80079e0:	f898 1000 	ldrb.w	r1, [r8]
 80079e4:	2203      	movs	r2, #3
 80079e6:	4628      	mov	r0, r5
 80079e8:	f7f9 f9ca 	bl	8000d80 <memchr>
 80079ec:	b140      	cbz	r0, 8007a00 <_vfiprintf_r+0x170>
 80079ee:	2340      	movs	r3, #64	; 0x40
 80079f0:	1b40      	subs	r0, r0, r5
 80079f2:	fa03 f000 	lsl.w	r0, r3, r0
 80079f6:	9b04      	ldr	r3, [sp, #16]
 80079f8:	4303      	orrs	r3, r0
 80079fa:	f108 0801 	add.w	r8, r8, #1
 80079fe:	9304      	str	r3, [sp, #16]
 8007a00:	f898 1000 	ldrb.w	r1, [r8]
 8007a04:	482a      	ldr	r0, [pc, #168]	; (8007ab0 <_vfiprintf_r+0x220>)
 8007a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a0a:	2206      	movs	r2, #6
 8007a0c:	f108 0701 	add.w	r7, r8, #1
 8007a10:	f7f9 f9b6 	bl	8000d80 <memchr>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d037      	beq.n	8007a88 <_vfiprintf_r+0x1f8>
 8007a18:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <_vfiprintf_r+0x224>)
 8007a1a:	bb1b      	cbnz	r3, 8007a64 <_vfiprintf_r+0x1d4>
 8007a1c:	9b03      	ldr	r3, [sp, #12]
 8007a1e:	3307      	adds	r3, #7
 8007a20:	f023 0307 	bic.w	r3, r3, #7
 8007a24:	3308      	adds	r3, #8
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2a:	444b      	add	r3, r9
 8007a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2e:	e750      	b.n	80078d2 <_vfiprintf_r+0x42>
 8007a30:	fb05 3202 	mla	r2, r5, r2, r3
 8007a34:	2001      	movs	r0, #1
 8007a36:	4688      	mov	r8, r1
 8007a38:	e78a      	b.n	8007950 <_vfiprintf_r+0xc0>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f108 0801 	add.w	r8, r8, #1
 8007a40:	9305      	str	r3, [sp, #20]
 8007a42:	4619      	mov	r1, r3
 8007a44:	250a      	movs	r5, #10
 8007a46:	4640      	mov	r0, r8
 8007a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a4c:	3a30      	subs	r2, #48	; 0x30
 8007a4e:	2a09      	cmp	r2, #9
 8007a50:	d903      	bls.n	8007a5a <_vfiprintf_r+0x1ca>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0c3      	beq.n	80079de <_vfiprintf_r+0x14e>
 8007a56:	9105      	str	r1, [sp, #20]
 8007a58:	e7c1      	b.n	80079de <_vfiprintf_r+0x14e>
 8007a5a:	fb05 2101 	mla	r1, r5, r1, r2
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4680      	mov	r8, r0
 8007a62:	e7f0      	b.n	8007a46 <_vfiprintf_r+0x1b6>
 8007a64:	ab03      	add	r3, sp, #12
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4622      	mov	r2, r4
 8007a6a:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <_vfiprintf_r+0x228>)
 8007a6c:	a904      	add	r1, sp, #16
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f7fd fe16 	bl	80056a0 <_printf_float>
 8007a74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a78:	4681      	mov	r9, r0
 8007a7a:	d1d5      	bne.n	8007a28 <_vfiprintf_r+0x198>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	065b      	lsls	r3, r3, #25
 8007a80:	f53f af7e 	bmi.w	8007980 <_vfiprintf_r+0xf0>
 8007a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a86:	e77d      	b.n	8007984 <_vfiprintf_r+0xf4>
 8007a88:	ab03      	add	r3, sp, #12
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <_vfiprintf_r+0x228>)
 8007a90:	a904      	add	r1, sp, #16
 8007a92:	4630      	mov	r0, r6
 8007a94:	f7fe f8ba 	bl	8005c0c <_printf_i>
 8007a98:	e7ec      	b.n	8007a74 <_vfiprintf_r+0x1e4>
 8007a9a:	bf00      	nop
 8007a9c:	08009ae0 	.word	0x08009ae0
 8007aa0:	08009c1c 	.word	0x08009c1c
 8007aa4:	08009b00 	.word	0x08009b00
 8007aa8:	08009ac0 	.word	0x08009ac0
 8007aac:	08009c22 	.word	0x08009c22
 8007ab0:	08009c26 	.word	0x08009c26
 8007ab4:	080056a1 	.word	0x080056a1
 8007ab8:	0800786b 	.word	0x0800786b

08007abc <_sbrk_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4c06      	ldr	r4, [pc, #24]	; (8007ad8 <_sbrk_r+0x1c>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	f7fd fcaa 	bl	8005420 <_sbrk>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_sbrk_r+0x1a>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_sbrk_r+0x1a>
 8007ad4:	602b      	str	r3, [r5, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	2000060c 	.word	0x2000060c

08007adc <__sread>:
 8007adc:	b510      	push	{r4, lr}
 8007ade:	460c      	mov	r4, r1
 8007ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae4:	f000 f8a8 	bl	8007c38 <_read_r>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	bfab      	itete	ge
 8007aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007aee:	89a3      	ldrhlt	r3, [r4, #12]
 8007af0:	181b      	addge	r3, r3, r0
 8007af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007af6:	bfac      	ite	ge
 8007af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007afa:	81a3      	strhlt	r3, [r4, #12]
 8007afc:	bd10      	pop	{r4, pc}

08007afe <__swrite>:
 8007afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b02:	461f      	mov	r7, r3
 8007b04:	898b      	ldrh	r3, [r1, #12]
 8007b06:	05db      	lsls	r3, r3, #23
 8007b08:	4605      	mov	r5, r0
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	4616      	mov	r6, r2
 8007b0e:	d505      	bpl.n	8007b1c <__swrite+0x1e>
 8007b10:	2302      	movs	r3, #2
 8007b12:	2200      	movs	r2, #0
 8007b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b18:	f000 f868 	bl	8007bec <_lseek_r>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	4632      	mov	r2, r6
 8007b2a:	463b      	mov	r3, r7
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b32:	f000 b817 	b.w	8007b64 <_write_r>

08007b36 <__sseek>:
 8007b36:	b510      	push	{r4, lr}
 8007b38:	460c      	mov	r4, r1
 8007b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3e:	f000 f855 	bl	8007bec <_lseek_r>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	bf15      	itete	ne
 8007b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b52:	81a3      	strheq	r3, [r4, #12]
 8007b54:	bf18      	it	ne
 8007b56:	81a3      	strhne	r3, [r4, #12]
 8007b58:	bd10      	pop	{r4, pc}

08007b5a <__sclose>:
 8007b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5e:	f000 b813 	b.w	8007b88 <_close_r>
	...

08007b64 <_write_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4c07      	ldr	r4, [pc, #28]	; (8007b84 <_write_r+0x20>)
 8007b68:	4605      	mov	r5, r0
 8007b6a:	4608      	mov	r0, r1
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	6022      	str	r2, [r4, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	f7fd fa58 	bl	8005028 <_write>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_write_r+0x1e>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_write_r+0x1e>
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	2000060c 	.word	0x2000060c

08007b88 <_close_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4c06      	ldr	r4, [pc, #24]	; (8007ba4 <_close_r+0x1c>)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4605      	mov	r5, r0
 8007b90:	4608      	mov	r0, r1
 8007b92:	6023      	str	r3, [r4, #0]
 8007b94:	f7fd fc37 	bl	8005406 <_close>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_close_r+0x1a>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_close_r+0x1a>
 8007ba0:	602b      	str	r3, [r5, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	2000060c 	.word	0x2000060c

08007ba8 <_fstat_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4c07      	ldr	r4, [pc, #28]	; (8007bc8 <_fstat_r+0x20>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4605      	mov	r5, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	f7fd fc29 	bl	800540c <_fstat>
 8007bba:	1c43      	adds	r3, r0, #1
 8007bbc:	d102      	bne.n	8007bc4 <_fstat_r+0x1c>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	b103      	cbz	r3, 8007bc4 <_fstat_r+0x1c>
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	bd38      	pop	{r3, r4, r5, pc}
 8007bc6:	bf00      	nop
 8007bc8:	2000060c 	.word	0x2000060c

08007bcc <_isatty_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4c06      	ldr	r4, [pc, #24]	; (8007be8 <_isatty_r+0x1c>)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	6023      	str	r3, [r4, #0]
 8007bd8:	f7fd fc1d 	bl	8005416 <_isatty>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_isatty_r+0x1a>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_isatty_r+0x1a>
 8007be4:	602b      	str	r3, [r5, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	2000060c 	.word	0x2000060c

08007bec <_lseek_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4c07      	ldr	r4, [pc, #28]	; (8007c0c <_lseek_r+0x20>)
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	6022      	str	r2, [r4, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f7fd fc0d 	bl	800541a <_lseek>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_lseek_r+0x1e>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_lseek_r+0x1e>
 8007c08:	602b      	str	r3, [r5, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	2000060c 	.word	0x2000060c

08007c10 <__ascii_mbtowc>:
 8007c10:	b082      	sub	sp, #8
 8007c12:	b901      	cbnz	r1, 8007c16 <__ascii_mbtowc+0x6>
 8007c14:	a901      	add	r1, sp, #4
 8007c16:	b142      	cbz	r2, 8007c2a <__ascii_mbtowc+0x1a>
 8007c18:	b14b      	cbz	r3, 8007c2e <__ascii_mbtowc+0x1e>
 8007c1a:	7813      	ldrb	r3, [r2, #0]
 8007c1c:	600b      	str	r3, [r1, #0]
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	1c10      	adds	r0, r2, #0
 8007c22:	bf18      	it	ne
 8007c24:	2001      	movne	r0, #1
 8007c26:	b002      	add	sp, #8
 8007c28:	4770      	bx	lr
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	e7fb      	b.n	8007c26 <__ascii_mbtowc+0x16>
 8007c2e:	f06f 0001 	mvn.w	r0, #1
 8007c32:	e7f8      	b.n	8007c26 <__ascii_mbtowc+0x16>

08007c34 <__malloc_lock>:
 8007c34:	4770      	bx	lr

08007c36 <__malloc_unlock>:
 8007c36:	4770      	bx	lr

08007c38 <_read_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4c07      	ldr	r4, [pc, #28]	; (8007c58 <_read_r+0x20>)
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	4608      	mov	r0, r1
 8007c40:	4611      	mov	r1, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	6022      	str	r2, [r4, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	f7fd fbcf 	bl	80053ea <_read>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_read_r+0x1e>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_read_r+0x1e>
 8007c54:	602b      	str	r3, [r5, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	2000060c 	.word	0x2000060c

08007c5c <__ascii_wctomb>:
 8007c5c:	b149      	cbz	r1, 8007c72 <__ascii_wctomb+0x16>
 8007c5e:	2aff      	cmp	r2, #255	; 0xff
 8007c60:	bf85      	ittet	hi
 8007c62:	238a      	movhi	r3, #138	; 0x8a
 8007c64:	6003      	strhi	r3, [r0, #0]
 8007c66:	700a      	strbls	r2, [r1, #0]
 8007c68:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007c6c:	bf98      	it	ls
 8007c6e:	2001      	movls	r0, #1
 8007c70:	4770      	bx	lr
 8007c72:	4608      	mov	r0, r1
 8007c74:	4770      	bx	lr
	...

08007c78 <asin>:
 8007c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c7a:	ed2d 8b02 	vpush	{d8}
 8007c7e:	4e26      	ldr	r6, [pc, #152]	; (8007d18 <asin+0xa0>)
 8007c80:	b08b      	sub	sp, #44	; 0x2c
 8007c82:	ec55 4b10 	vmov	r4, r5, d0
 8007c86:	f000 fa1b 	bl	80080c0 <__ieee754_asin>
 8007c8a:	f996 3000 	ldrsb.w	r3, [r6]
 8007c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8007c92:	eef0 8a60 	vmov.f32	s17, s1
 8007c96:	3301      	adds	r3, #1
 8007c98:	d036      	beq.n	8007d08 <asin+0x90>
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	462b      	mov	r3, r5
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	f7f9 f945 	bl	8000f30 <__aeabi_dcmpun>
 8007ca6:	4607      	mov	r7, r0
 8007ca8:	bb70      	cbnz	r0, 8007d08 <asin+0x90>
 8007caa:	ec45 4b10 	vmov	d0, r4, r5
 8007cae:	f001 fc57 	bl	8009560 <fabs>
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4b19      	ldr	r3, [pc, #100]	; (8007d1c <asin+0xa4>)
 8007cb6:	ec51 0b10 	vmov	r0, r1, d0
 8007cba:	f7f9 f92f 	bl	8000f1c <__aeabi_dcmpgt>
 8007cbe:	b318      	cbz	r0, 8007d08 <asin+0x90>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	4816      	ldr	r0, [pc, #88]	; (8007d20 <asin+0xa8>)
 8007cc6:	4b17      	ldr	r3, [pc, #92]	; (8007d24 <asin+0xac>)
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	9708      	str	r7, [sp, #32]
 8007ccc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007cd0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007cd4:	f001 fc58 	bl	8009588 <nan>
 8007cd8:	f996 3000 	ldrsb.w	r3, [r6]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007ce2:	d104      	bne.n	8007cee <asin+0x76>
 8007ce4:	f7fd fc0a 	bl	80054fc <__errno>
 8007ce8:	2321      	movs	r3, #33	; 0x21
 8007cea:	6003      	str	r3, [r0, #0]
 8007cec:	e004      	b.n	8007cf8 <asin+0x80>
 8007cee:	4668      	mov	r0, sp
 8007cf0:	f001 fc47 	bl	8009582 <matherr>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d0f5      	beq.n	8007ce4 <asin+0x6c>
 8007cf8:	9b08      	ldr	r3, [sp, #32]
 8007cfa:	b11b      	cbz	r3, 8007d04 <asin+0x8c>
 8007cfc:	f7fd fbfe 	bl	80054fc <__errno>
 8007d00:	9b08      	ldr	r3, [sp, #32]
 8007d02:	6003      	str	r3, [r0, #0]
 8007d04:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007d08:	eeb0 0a48 	vmov.f32	s0, s16
 8007d0c:	eef0 0a68 	vmov.f32	s1, s17
 8007d10:	b00b      	add	sp, #44	; 0x2c
 8007d12:	ecbd 8b02 	vpop	{d8}
 8007d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d18:	2000024c 	.word	0x2000024c
 8007d1c:	3ff00000 	.word	0x3ff00000
 8007d20:	08009c21 	.word	0x08009c21
 8007d24:	08009d38 	.word	0x08009d38

08007d28 <atan2>:
 8007d28:	f000 bbda 	b.w	80084e0 <__ieee754_atan2>

08007d2c <pow>:
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	ed2d 8b04 	vpush	{d8-d9}
 8007d34:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008008 <pow+0x2dc>
 8007d38:	b08d      	sub	sp, #52	; 0x34
 8007d3a:	ec57 6b10 	vmov	r6, r7, d0
 8007d3e:	ec55 4b11 	vmov	r4, r5, d1
 8007d42:	f000 fcad 	bl	80086a0 <__ieee754_pow>
 8007d46:	f999 3000 	ldrsb.w	r3, [r9]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	eeb0 8a40 	vmov.f32	s16, s0
 8007d52:	eef0 8a60 	vmov.f32	s17, s1
 8007d56:	46c8      	mov	r8, r9
 8007d58:	d05f      	beq.n	8007e1a <pow+0xee>
 8007d5a:	4622      	mov	r2, r4
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	4620      	mov	r0, r4
 8007d60:	4629      	mov	r1, r5
 8007d62:	f7f9 f8e5 	bl	8000f30 <__aeabi_dcmpun>
 8007d66:	4683      	mov	fp, r0
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d156      	bne.n	8007e1a <pow+0xee>
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	463b      	mov	r3, r7
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f9 f8dc 	bl	8000f30 <__aeabi_dcmpun>
 8007d78:	9001      	str	r0, [sp, #4]
 8007d7a:	b1e8      	cbz	r0, 8007db8 <pow+0x8c>
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4620      	mov	r0, r4
 8007d82:	4629      	mov	r1, r5
 8007d84:	f7f9 f8a2 	bl	8000ecc <__aeabi_dcmpeq>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d046      	beq.n	8007e1a <pow+0xee>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	9302      	str	r3, [sp, #8]
 8007d90:	4b96      	ldr	r3, [pc, #600]	; (8007fec <pow+0x2c0>)
 8007d92:	9303      	str	r3, [sp, #12]
 8007d94:	4b96      	ldr	r3, [pc, #600]	; (8007ff0 <pow+0x2c4>)
 8007d96:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007da0:	9b00      	ldr	r3, [sp, #0]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007da8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007dac:	d033      	beq.n	8007e16 <pow+0xea>
 8007dae:	a802      	add	r0, sp, #8
 8007db0:	f001 fbe7 	bl	8009582 <matherr>
 8007db4:	bb48      	cbnz	r0, 8007e0a <pow+0xde>
 8007db6:	e05d      	b.n	8007e74 <pow+0x148>
 8007db8:	f04f 0a00 	mov.w	sl, #0
 8007dbc:	f04f 0b00 	mov.w	fp, #0
 8007dc0:	4652      	mov	r2, sl
 8007dc2:	465b      	mov	r3, fp
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	f7f9 f880 	bl	8000ecc <__aeabi_dcmpeq>
 8007dcc:	ec4b ab19 	vmov	d9, sl, fp
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d054      	beq.n	8007e7e <pow+0x152>
 8007dd4:	4652      	mov	r2, sl
 8007dd6:	465b      	mov	r3, fp
 8007dd8:	4620      	mov	r0, r4
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f7f9 f876 	bl	8000ecc <__aeabi_dcmpeq>
 8007de0:	4680      	mov	r8, r0
 8007de2:	b318      	cbz	r0, 8007e2c <pow+0x100>
 8007de4:	2301      	movs	r3, #1
 8007de6:	9302      	str	r3, [sp, #8]
 8007de8:	4b80      	ldr	r3, [pc, #512]	; (8007fec <pow+0x2c0>)
 8007dea:	9303      	str	r3, [sp, #12]
 8007dec:	9b01      	ldr	r3, [sp, #4]
 8007dee:	930a      	str	r3, [sp, #40]	; 0x28
 8007df0:	9b00      	ldr	r3, [sp, #0]
 8007df2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007df6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007dfa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0d5      	beq.n	8007dae <pow+0x82>
 8007e02:	4b7b      	ldr	r3, [pc, #492]	; (8007ff0 <pow+0x2c4>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e0c:	b11b      	cbz	r3, 8007e16 <pow+0xea>
 8007e0e:	f7fd fb75 	bl	80054fc <__errno>
 8007e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e14:	6003      	str	r3, [r0, #0]
 8007e16:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007e1a:	eeb0 0a48 	vmov.f32	s0, s16
 8007e1e:	eef0 0a68 	vmov.f32	s1, s17
 8007e22:	b00d      	add	sp, #52	; 0x34
 8007e24:	ecbd 8b04 	vpop	{d8-d9}
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	ec45 4b10 	vmov	d0, r4, r5
 8007e30:	f001 fb9f 	bl	8009572 <finite>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d0f0      	beq.n	8007e1a <pow+0xee>
 8007e38:	4652      	mov	r2, sl
 8007e3a:	465b      	mov	r3, fp
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	4629      	mov	r1, r5
 8007e40:	f7f9 f84e 	bl	8000ee0 <__aeabi_dcmplt>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d0e8      	beq.n	8007e1a <pow+0xee>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	9302      	str	r3, [sp, #8]
 8007e4c:	4b67      	ldr	r3, [pc, #412]	; (8007fec <pow+0x2c0>)
 8007e4e:	9303      	str	r3, [sp, #12]
 8007e50:	f999 3000 	ldrsb.w	r3, [r9]
 8007e54:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007e58:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e5c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007e60:	b913      	cbnz	r3, 8007e68 <pow+0x13c>
 8007e62:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007e66:	e7a2      	b.n	8007dae <pow+0x82>
 8007e68:	4962      	ldr	r1, [pc, #392]	; (8007ff4 <pow+0x2c8>)
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d19c      	bne.n	8007dae <pow+0x82>
 8007e74:	f7fd fb42 	bl	80054fc <__errno>
 8007e78:	2321      	movs	r3, #33	; 0x21
 8007e7a:	6003      	str	r3, [r0, #0]
 8007e7c:	e7c5      	b.n	8007e0a <pow+0xde>
 8007e7e:	eeb0 0a48 	vmov.f32	s0, s16
 8007e82:	eef0 0a68 	vmov.f32	s1, s17
 8007e86:	f001 fb74 	bl	8009572 <finite>
 8007e8a:	9000      	str	r0, [sp, #0]
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f040 8081 	bne.w	8007f94 <pow+0x268>
 8007e92:	ec47 6b10 	vmov	d0, r6, r7
 8007e96:	f001 fb6c 	bl	8009572 <finite>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d07a      	beq.n	8007f94 <pow+0x268>
 8007e9e:	ec45 4b10 	vmov	d0, r4, r5
 8007ea2:	f001 fb66 	bl	8009572 <finite>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d074      	beq.n	8007f94 <pow+0x268>
 8007eaa:	ec53 2b18 	vmov	r2, r3, d8
 8007eae:	ee18 0a10 	vmov	r0, s16
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f7f9 f83c 	bl	8000f30 <__aeabi_dcmpun>
 8007eb8:	f999 9000 	ldrsb.w	r9, [r9]
 8007ebc:	4b4b      	ldr	r3, [pc, #300]	; (8007fec <pow+0x2c0>)
 8007ebe:	b1b0      	cbz	r0, 8007eee <pow+0x1c2>
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ec6:	9b00      	ldr	r3, [sp, #0]
 8007ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8007eca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ece:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007ed2:	f1b9 0f00 	cmp.w	r9, #0
 8007ed6:	d0c4      	beq.n	8007e62 <pow+0x136>
 8007ed8:	4652      	mov	r2, sl
 8007eda:	465b      	mov	r3, fp
 8007edc:	4650      	mov	r0, sl
 8007ede:	4659      	mov	r1, fp
 8007ee0:	f7f8 fc64 	bl	80007ac <__aeabi_ddiv>
 8007ee4:	f1b9 0f02 	cmp.w	r9, #2
 8007ee8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007eec:	e7c1      	b.n	8007e72 <pow+0x146>
 8007eee:	2203      	movs	r2, #3
 8007ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ef4:	900a      	str	r0, [sp, #40]	; 0x28
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4620      	mov	r0, r4
 8007efa:	2200      	movs	r2, #0
 8007efc:	4b3e      	ldr	r3, [pc, #248]	; (8007ff8 <pow+0x2cc>)
 8007efe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007f02:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007f06:	f7f8 fb27 	bl	8000558 <__aeabi_dmul>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	460d      	mov	r5, r1
 8007f0e:	f1b9 0f00 	cmp.w	r9, #0
 8007f12:	d124      	bne.n	8007f5e <pow+0x232>
 8007f14:	4b39      	ldr	r3, [pc, #228]	; (8007ffc <pow+0x2d0>)
 8007f16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007f1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f1e:	4630      	mov	r0, r6
 8007f20:	4652      	mov	r2, sl
 8007f22:	465b      	mov	r3, fp
 8007f24:	4639      	mov	r1, r7
 8007f26:	f7f8 ffdb 	bl	8000ee0 <__aeabi_dcmplt>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d056      	beq.n	8007fdc <pow+0x2b0>
 8007f2e:	ec45 4b10 	vmov	d0, r4, r5
 8007f32:	f001 fb31 	bl	8009598 <rint>
 8007f36:	4622      	mov	r2, r4
 8007f38:	462b      	mov	r3, r5
 8007f3a:	ec51 0b10 	vmov	r0, r1, d0
 8007f3e:	f7f8 ffc5 	bl	8000ecc <__aeabi_dcmpeq>
 8007f42:	b920      	cbnz	r0, 8007f4e <pow+0x222>
 8007f44:	4b2e      	ldr	r3, [pc, #184]	; (8008000 <pow+0x2d4>)
 8007f46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007f4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f4e:	f998 3000 	ldrsb.w	r3, [r8]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d142      	bne.n	8007fdc <pow+0x2b0>
 8007f56:	f7fd fad1 	bl	80054fc <__errno>
 8007f5a:	2322      	movs	r3, #34	; 0x22
 8007f5c:	e78d      	b.n	8007e7a <pow+0x14e>
 8007f5e:	4b29      	ldr	r3, [pc, #164]	; (8008004 <pow+0x2d8>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f66:	4630      	mov	r0, r6
 8007f68:	4652      	mov	r2, sl
 8007f6a:	465b      	mov	r3, fp
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	f7f8 ffb7 	bl	8000ee0 <__aeabi_dcmplt>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d0eb      	beq.n	8007f4e <pow+0x222>
 8007f76:	ec45 4b10 	vmov	d0, r4, r5
 8007f7a:	f001 fb0d 	bl	8009598 <rint>
 8007f7e:	4622      	mov	r2, r4
 8007f80:	462b      	mov	r3, r5
 8007f82:	ec51 0b10 	vmov	r0, r1, d0
 8007f86:	f7f8 ffa1 	bl	8000ecc <__aeabi_dcmpeq>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d1df      	bne.n	8007f4e <pow+0x222>
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4b18      	ldr	r3, [pc, #96]	; (8007ff4 <pow+0x2c8>)
 8007f92:	e7da      	b.n	8007f4a <pow+0x21e>
 8007f94:	2200      	movs	r2, #0
 8007f96:	2300      	movs	r3, #0
 8007f98:	ec51 0b18 	vmov	r0, r1, d8
 8007f9c:	f7f8 ff96 	bl	8000ecc <__aeabi_dcmpeq>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f43f af3a 	beq.w	8007e1a <pow+0xee>
 8007fa6:	ec47 6b10 	vmov	d0, r6, r7
 8007faa:	f001 fae2 	bl	8009572 <finite>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f af33 	beq.w	8007e1a <pow+0xee>
 8007fb4:	ec45 4b10 	vmov	d0, r4, r5
 8007fb8:	f001 fadb 	bl	8009572 <finite>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	f43f af2c 	beq.w	8007e1a <pow+0xee>
 8007fc2:	2304      	movs	r3, #4
 8007fc4:	9302      	str	r3, [sp, #8]
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <pow+0x2c0>)
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8007fce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007fd2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007fd6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007fda:	e7b8      	b.n	8007f4e <pow+0x222>
 8007fdc:	a802      	add	r0, sp, #8
 8007fde:	f001 fad0 	bl	8009582 <matherr>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	f47f af11 	bne.w	8007e0a <pow+0xde>
 8007fe8:	e7b5      	b.n	8007f56 <pow+0x22a>
 8007fea:	bf00      	nop
 8007fec:	08009d3d 	.word	0x08009d3d
 8007ff0:	3ff00000 	.word	0x3ff00000
 8007ff4:	fff00000 	.word	0xfff00000
 8007ff8:	3fe00000 	.word	0x3fe00000
 8007ffc:	47efffff 	.word	0x47efffff
 8008000:	c7efffff 	.word	0xc7efffff
 8008004:	7ff00000 	.word	0x7ff00000
 8008008:	2000024c 	.word	0x2000024c

0800800c <sqrt>:
 800800c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008010:	ed2d 8b02 	vpush	{d8}
 8008014:	b08b      	sub	sp, #44	; 0x2c
 8008016:	ec55 4b10 	vmov	r4, r5, d0
 800801a:	f001 f84f 	bl	80090bc <__ieee754_sqrt>
 800801e:	4b26      	ldr	r3, [pc, #152]	; (80080b8 <sqrt+0xac>)
 8008020:	eeb0 8a40 	vmov.f32	s16, s0
 8008024:	eef0 8a60 	vmov.f32	s17, s1
 8008028:	f993 6000 	ldrsb.w	r6, [r3]
 800802c:	1c73      	adds	r3, r6, #1
 800802e:	d02a      	beq.n	8008086 <sqrt+0x7a>
 8008030:	4622      	mov	r2, r4
 8008032:	462b      	mov	r3, r5
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 ff7a 	bl	8000f30 <__aeabi_dcmpun>
 800803c:	4607      	mov	r7, r0
 800803e:	bb10      	cbnz	r0, 8008086 <sqrt+0x7a>
 8008040:	f04f 0800 	mov.w	r8, #0
 8008044:	f04f 0900 	mov.w	r9, #0
 8008048:	4642      	mov	r2, r8
 800804a:	464b      	mov	r3, r9
 800804c:	4620      	mov	r0, r4
 800804e:	4629      	mov	r1, r5
 8008050:	f7f8 ff46 	bl	8000ee0 <__aeabi_dcmplt>
 8008054:	b1b8      	cbz	r0, 8008086 <sqrt+0x7a>
 8008056:	2301      	movs	r3, #1
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	4b18      	ldr	r3, [pc, #96]	; (80080bc <sqrt+0xb0>)
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	9708      	str	r7, [sp, #32]
 8008060:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008064:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008068:	b9b6      	cbnz	r6, 8008098 <sqrt+0x8c>
 800806a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800806e:	4668      	mov	r0, sp
 8008070:	f001 fa87 	bl	8009582 <matherr>
 8008074:	b1d0      	cbz	r0, 80080ac <sqrt+0xa0>
 8008076:	9b08      	ldr	r3, [sp, #32]
 8008078:	b11b      	cbz	r3, 8008082 <sqrt+0x76>
 800807a:	f7fd fa3f 	bl	80054fc <__errno>
 800807e:	9b08      	ldr	r3, [sp, #32]
 8008080:	6003      	str	r3, [r0, #0]
 8008082:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008086:	eeb0 0a48 	vmov.f32	s0, s16
 800808a:	eef0 0a68 	vmov.f32	s1, s17
 800808e:	b00b      	add	sp, #44	; 0x2c
 8008090:	ecbd 8b02 	vpop	{d8}
 8008094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008098:	4642      	mov	r2, r8
 800809a:	464b      	mov	r3, r9
 800809c:	4640      	mov	r0, r8
 800809e:	4649      	mov	r1, r9
 80080a0:	f7f8 fb84 	bl	80007ac <__aeabi_ddiv>
 80080a4:	2e02      	cmp	r6, #2
 80080a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080aa:	d1e0      	bne.n	800806e <sqrt+0x62>
 80080ac:	f7fd fa26 	bl	80054fc <__errno>
 80080b0:	2321      	movs	r3, #33	; 0x21
 80080b2:	6003      	str	r3, [r0, #0]
 80080b4:	e7df      	b.n	8008076 <sqrt+0x6a>
 80080b6:	bf00      	nop
 80080b8:	2000024c 	.word	0x2000024c
 80080bc:	08009d41 	.word	0x08009d41

080080c0 <__ieee754_asin>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	ec55 4b10 	vmov	r4, r5, d0
 80080c8:	4bcb      	ldr	r3, [pc, #812]	; (80083f8 <__ieee754_asin+0x338>)
 80080ca:	b087      	sub	sp, #28
 80080cc:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80080d0:	429f      	cmp	r7, r3
 80080d2:	9501      	str	r5, [sp, #4]
 80080d4:	dd31      	ble.n	800813a <__ieee754_asin+0x7a>
 80080d6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80080da:	ee10 3a10 	vmov	r3, s0
 80080de:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80080e2:	433b      	orrs	r3, r7
 80080e4:	d117      	bne.n	8008116 <__ieee754_asin+0x56>
 80080e6:	a3aa      	add	r3, pc, #680	; (adr r3, 8008390 <__ieee754_asin+0x2d0>)
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	ee10 0a10 	vmov	r0, s0
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7f8 fa31 	bl	8000558 <__aeabi_dmul>
 80080f6:	a3a8      	add	r3, pc, #672	; (adr r3, 8008398 <__ieee754_asin+0x2d8>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	4606      	mov	r6, r0
 80080fe:	460f      	mov	r7, r1
 8008100:	4620      	mov	r0, r4
 8008102:	4629      	mov	r1, r5
 8008104:	f7f8 fa28 	bl	8000558 <__aeabi_dmul>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4630      	mov	r0, r6
 800810e:	4639      	mov	r1, r7
 8008110:	f7f8 f86c 	bl	80001ec <__adddf3>
 8008114:	e00a      	b.n	800812c <__ieee754_asin+0x6c>
 8008116:	ee10 2a10 	vmov	r2, s0
 800811a:	462b      	mov	r3, r5
 800811c:	4620      	mov	r0, r4
 800811e:	4629      	mov	r1, r5
 8008120:	f7f8 f862 	bl	80001e8 <__aeabi_dsub>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	f7f8 fb40 	bl	80007ac <__aeabi_ddiv>
 800812c:	4604      	mov	r4, r0
 800812e:	460d      	mov	r5, r1
 8008130:	ec45 4b10 	vmov	d0, r4, r5
 8008134:	b007      	add	sp, #28
 8008136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813a:	4bb0      	ldr	r3, [pc, #704]	; (80083fc <__ieee754_asin+0x33c>)
 800813c:	429f      	cmp	r7, r3
 800813e:	dc11      	bgt.n	8008164 <__ieee754_asin+0xa4>
 8008140:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8008144:	f280 80ae 	bge.w	80082a4 <__ieee754_asin+0x1e4>
 8008148:	a395      	add	r3, pc, #596	; (adr r3, 80083a0 <__ieee754_asin+0x2e0>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	ee10 0a10 	vmov	r0, s0
 8008152:	4629      	mov	r1, r5
 8008154:	f7f8 f84a 	bl	80001ec <__adddf3>
 8008158:	2200      	movs	r2, #0
 800815a:	4ba9      	ldr	r3, [pc, #676]	; (8008400 <__ieee754_asin+0x340>)
 800815c:	f7f8 fede 	bl	8000f1c <__aeabi_dcmpgt>
 8008160:	2800      	cmp	r0, #0
 8008162:	d1e5      	bne.n	8008130 <__ieee754_asin+0x70>
 8008164:	ec45 4b10 	vmov	d0, r4, r5
 8008168:	f001 f9fa 	bl	8009560 <fabs>
 800816c:	2000      	movs	r0, #0
 800816e:	ec53 2b10 	vmov	r2, r3, d0
 8008172:	49a3      	ldr	r1, [pc, #652]	; (8008400 <__ieee754_asin+0x340>)
 8008174:	f7f8 f838 	bl	80001e8 <__aeabi_dsub>
 8008178:	2200      	movs	r2, #0
 800817a:	4ba2      	ldr	r3, [pc, #648]	; (8008404 <__ieee754_asin+0x344>)
 800817c:	f7f8 f9ec 	bl	8000558 <__aeabi_dmul>
 8008180:	a389      	add	r3, pc, #548	; (adr r3, 80083a8 <__ieee754_asin+0x2e8>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	4604      	mov	r4, r0
 8008188:	460d      	mov	r5, r1
 800818a:	f7f8 f9e5 	bl	8000558 <__aeabi_dmul>
 800818e:	a388      	add	r3, pc, #544	; (adr r3, 80083b0 <__ieee754_asin+0x2f0>)
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	f7f8 f82a 	bl	80001ec <__adddf3>
 8008198:	4622      	mov	r2, r4
 800819a:	462b      	mov	r3, r5
 800819c:	f7f8 f9dc 	bl	8000558 <__aeabi_dmul>
 80081a0:	a385      	add	r3, pc, #532	; (adr r3, 80083b8 <__ieee754_asin+0x2f8>)
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f7f8 f81f 	bl	80001e8 <__aeabi_dsub>
 80081aa:	4622      	mov	r2, r4
 80081ac:	462b      	mov	r3, r5
 80081ae:	f7f8 f9d3 	bl	8000558 <__aeabi_dmul>
 80081b2:	a383      	add	r3, pc, #524	; (adr r3, 80083c0 <__ieee754_asin+0x300>)
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f7f8 f818 	bl	80001ec <__adddf3>
 80081bc:	4622      	mov	r2, r4
 80081be:	462b      	mov	r3, r5
 80081c0:	f7f8 f9ca 	bl	8000558 <__aeabi_dmul>
 80081c4:	a380      	add	r3, pc, #512	; (adr r3, 80083c8 <__ieee754_asin+0x308>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	f7f8 f80d 	bl	80001e8 <__aeabi_dsub>
 80081ce:	4622      	mov	r2, r4
 80081d0:	462b      	mov	r3, r5
 80081d2:	f7f8 f9c1 	bl	8000558 <__aeabi_dmul>
 80081d6:	a37e      	add	r3, pc, #504	; (adr r3, 80083d0 <__ieee754_asin+0x310>)
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	f7f8 f806 	bl	80001ec <__adddf3>
 80081e0:	4622      	mov	r2, r4
 80081e2:	462b      	mov	r3, r5
 80081e4:	f7f8 f9b8 	bl	8000558 <__aeabi_dmul>
 80081e8:	a37b      	add	r3, pc, #492	; (adr r3, 80083d8 <__ieee754_asin+0x318>)
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	4680      	mov	r8, r0
 80081f0:	4689      	mov	r9, r1
 80081f2:	4620      	mov	r0, r4
 80081f4:	4629      	mov	r1, r5
 80081f6:	f7f8 f9af 	bl	8000558 <__aeabi_dmul>
 80081fa:	a379      	add	r3, pc, #484	; (adr r3, 80083e0 <__ieee754_asin+0x320>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	f7f7 fff2 	bl	80001e8 <__aeabi_dsub>
 8008204:	4622      	mov	r2, r4
 8008206:	462b      	mov	r3, r5
 8008208:	f7f8 f9a6 	bl	8000558 <__aeabi_dmul>
 800820c:	a376      	add	r3, pc, #472	; (adr r3, 80083e8 <__ieee754_asin+0x328>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f7 ffeb 	bl	80001ec <__adddf3>
 8008216:	4622      	mov	r2, r4
 8008218:	462b      	mov	r3, r5
 800821a:	f7f8 f99d 	bl	8000558 <__aeabi_dmul>
 800821e:	a374      	add	r3, pc, #464	; (adr r3, 80083f0 <__ieee754_asin+0x330>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f7 ffe0 	bl	80001e8 <__aeabi_dsub>
 8008228:	4622      	mov	r2, r4
 800822a:	462b      	mov	r3, r5
 800822c:	f7f8 f994 	bl	8000558 <__aeabi_dmul>
 8008230:	4b73      	ldr	r3, [pc, #460]	; (8008400 <__ieee754_asin+0x340>)
 8008232:	2200      	movs	r2, #0
 8008234:	f7f7 ffda 	bl	80001ec <__adddf3>
 8008238:	ec45 4b10 	vmov	d0, r4, r5
 800823c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008240:	f000 ff3c 	bl	80090bc <__ieee754_sqrt>
 8008244:	4b70      	ldr	r3, [pc, #448]	; (8008408 <__ieee754_asin+0x348>)
 8008246:	429f      	cmp	r7, r3
 8008248:	ec5b ab10 	vmov	sl, fp, d0
 800824c:	f340 80de 	ble.w	800840c <__ieee754_asin+0x34c>
 8008250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008254:	4640      	mov	r0, r8
 8008256:	4649      	mov	r1, r9
 8008258:	f7f8 faa8 	bl	80007ac <__aeabi_ddiv>
 800825c:	4652      	mov	r2, sl
 800825e:	465b      	mov	r3, fp
 8008260:	f7f8 f97a 	bl	8000558 <__aeabi_dmul>
 8008264:	4652      	mov	r2, sl
 8008266:	465b      	mov	r3, fp
 8008268:	f7f7 ffc0 	bl	80001ec <__adddf3>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	f7f7 ffbc 	bl	80001ec <__adddf3>
 8008274:	a348      	add	r3, pc, #288	; (adr r3, 8008398 <__ieee754_asin+0x2d8>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	f7f7 ffb5 	bl	80001e8 <__aeabi_dsub>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	a143      	add	r1, pc, #268	; (adr r1, 8008390 <__ieee754_asin+0x2d0>)
 8008284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008288:	f7f7 ffae 	bl	80001e8 <__aeabi_dsub>
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	bfdc      	itt	le
 8008292:	4602      	movle	r2, r0
 8008294:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008298:	4604      	mov	r4, r0
 800829a:	460d      	mov	r5, r1
 800829c:	bfdc      	itt	le
 800829e:	4614      	movle	r4, r2
 80082a0:	461d      	movle	r5, r3
 80082a2:	e745      	b.n	8008130 <__ieee754_asin+0x70>
 80082a4:	ee10 2a10 	vmov	r2, s0
 80082a8:	ee10 0a10 	vmov	r0, s0
 80082ac:	462b      	mov	r3, r5
 80082ae:	4629      	mov	r1, r5
 80082b0:	f7f8 f952 	bl	8000558 <__aeabi_dmul>
 80082b4:	a33c      	add	r3, pc, #240	; (adr r3, 80083a8 <__ieee754_asin+0x2e8>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	4606      	mov	r6, r0
 80082bc:	460f      	mov	r7, r1
 80082be:	f7f8 f94b 	bl	8000558 <__aeabi_dmul>
 80082c2:	a33b      	add	r3, pc, #236	; (adr r3, 80083b0 <__ieee754_asin+0x2f0>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	f7f7 ff90 	bl	80001ec <__adddf3>
 80082cc:	4632      	mov	r2, r6
 80082ce:	463b      	mov	r3, r7
 80082d0:	f7f8 f942 	bl	8000558 <__aeabi_dmul>
 80082d4:	a338      	add	r3, pc, #224	; (adr r3, 80083b8 <__ieee754_asin+0x2f8>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f7f7 ff85 	bl	80001e8 <__aeabi_dsub>
 80082de:	4632      	mov	r2, r6
 80082e0:	463b      	mov	r3, r7
 80082e2:	f7f8 f939 	bl	8000558 <__aeabi_dmul>
 80082e6:	a336      	add	r3, pc, #216	; (adr r3, 80083c0 <__ieee754_asin+0x300>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f7f7 ff7e 	bl	80001ec <__adddf3>
 80082f0:	4632      	mov	r2, r6
 80082f2:	463b      	mov	r3, r7
 80082f4:	f7f8 f930 	bl	8000558 <__aeabi_dmul>
 80082f8:	a333      	add	r3, pc, #204	; (adr r3, 80083c8 <__ieee754_asin+0x308>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f7 ff73 	bl	80001e8 <__aeabi_dsub>
 8008302:	4632      	mov	r2, r6
 8008304:	463b      	mov	r3, r7
 8008306:	f7f8 f927 	bl	8000558 <__aeabi_dmul>
 800830a:	a331      	add	r3, pc, #196	; (adr r3, 80083d0 <__ieee754_asin+0x310>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f7 ff6c 	bl	80001ec <__adddf3>
 8008314:	4632      	mov	r2, r6
 8008316:	463b      	mov	r3, r7
 8008318:	f7f8 f91e 	bl	8000558 <__aeabi_dmul>
 800831c:	a32e      	add	r3, pc, #184	; (adr r3, 80083d8 <__ieee754_asin+0x318>)
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	4680      	mov	r8, r0
 8008324:	4689      	mov	r9, r1
 8008326:	4630      	mov	r0, r6
 8008328:	4639      	mov	r1, r7
 800832a:	f7f8 f915 	bl	8000558 <__aeabi_dmul>
 800832e:	a32c      	add	r3, pc, #176	; (adr r3, 80083e0 <__ieee754_asin+0x320>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f7f7 ff58 	bl	80001e8 <__aeabi_dsub>
 8008338:	4632      	mov	r2, r6
 800833a:	463b      	mov	r3, r7
 800833c:	f7f8 f90c 	bl	8000558 <__aeabi_dmul>
 8008340:	a329      	add	r3, pc, #164	; (adr r3, 80083e8 <__ieee754_asin+0x328>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	f7f7 ff51 	bl	80001ec <__adddf3>
 800834a:	4632      	mov	r2, r6
 800834c:	463b      	mov	r3, r7
 800834e:	f7f8 f903 	bl	8000558 <__aeabi_dmul>
 8008352:	a327      	add	r3, pc, #156	; (adr r3, 80083f0 <__ieee754_asin+0x330>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f7f7 ff46 	bl	80001e8 <__aeabi_dsub>
 800835c:	4632      	mov	r2, r6
 800835e:	463b      	mov	r3, r7
 8008360:	f7f8 f8fa 	bl	8000558 <__aeabi_dmul>
 8008364:	2200      	movs	r2, #0
 8008366:	4b26      	ldr	r3, [pc, #152]	; (8008400 <__ieee754_asin+0x340>)
 8008368:	f7f7 ff40 	bl	80001ec <__adddf3>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4640      	mov	r0, r8
 8008372:	4649      	mov	r1, r9
 8008374:	f7f8 fa1a 	bl	80007ac <__aeabi_ddiv>
 8008378:	4622      	mov	r2, r4
 800837a:	462b      	mov	r3, r5
 800837c:	f7f8 f8ec 	bl	8000558 <__aeabi_dmul>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4620      	mov	r0, r4
 8008386:	4629      	mov	r1, r5
 8008388:	e6c2      	b.n	8008110 <__ieee754_asin+0x50>
 800838a:	bf00      	nop
 800838c:	f3af 8000 	nop.w
 8008390:	54442d18 	.word	0x54442d18
 8008394:	3ff921fb 	.word	0x3ff921fb
 8008398:	33145c07 	.word	0x33145c07
 800839c:	3c91a626 	.word	0x3c91a626
 80083a0:	8800759c 	.word	0x8800759c
 80083a4:	7e37e43c 	.word	0x7e37e43c
 80083a8:	0dfdf709 	.word	0x0dfdf709
 80083ac:	3f023de1 	.word	0x3f023de1
 80083b0:	7501b288 	.word	0x7501b288
 80083b4:	3f49efe0 	.word	0x3f49efe0
 80083b8:	b5688f3b 	.word	0xb5688f3b
 80083bc:	3fa48228 	.word	0x3fa48228
 80083c0:	0e884455 	.word	0x0e884455
 80083c4:	3fc9c155 	.word	0x3fc9c155
 80083c8:	03eb6f7d 	.word	0x03eb6f7d
 80083cc:	3fd4d612 	.word	0x3fd4d612
 80083d0:	55555555 	.word	0x55555555
 80083d4:	3fc55555 	.word	0x3fc55555
 80083d8:	b12e9282 	.word	0xb12e9282
 80083dc:	3fb3b8c5 	.word	0x3fb3b8c5
 80083e0:	1b8d0159 	.word	0x1b8d0159
 80083e4:	3fe6066c 	.word	0x3fe6066c
 80083e8:	9c598ac8 	.word	0x9c598ac8
 80083ec:	40002ae5 	.word	0x40002ae5
 80083f0:	1c8a2d4b 	.word	0x1c8a2d4b
 80083f4:	40033a27 	.word	0x40033a27
 80083f8:	3fefffff 	.word	0x3fefffff
 80083fc:	3fdfffff 	.word	0x3fdfffff
 8008400:	3ff00000 	.word	0x3ff00000
 8008404:	3fe00000 	.word	0x3fe00000
 8008408:	3fef3332 	.word	0x3fef3332
 800840c:	ee10 2a10 	vmov	r2, s0
 8008410:	ee10 0a10 	vmov	r0, s0
 8008414:	465b      	mov	r3, fp
 8008416:	4659      	mov	r1, fp
 8008418:	f7f7 fee8 	bl	80001ec <__adddf3>
 800841c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008424:	4640      	mov	r0, r8
 8008426:	4649      	mov	r1, r9
 8008428:	f7f8 f9c0 	bl	80007ac <__aeabi_ddiv>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008434:	f7f8 f890 	bl	8000558 <__aeabi_dmul>
 8008438:	2600      	movs	r6, #0
 800843a:	4680      	mov	r8, r0
 800843c:	4689      	mov	r9, r1
 800843e:	4632      	mov	r2, r6
 8008440:	465b      	mov	r3, fp
 8008442:	4630      	mov	r0, r6
 8008444:	4659      	mov	r1, fp
 8008446:	f7f8 f887 	bl	8000558 <__aeabi_dmul>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4620      	mov	r0, r4
 8008450:	4629      	mov	r1, r5
 8008452:	f7f7 fec9 	bl	80001e8 <__aeabi_dsub>
 8008456:	4632      	mov	r2, r6
 8008458:	4604      	mov	r4, r0
 800845a:	460d      	mov	r5, r1
 800845c:	465b      	mov	r3, fp
 800845e:	4650      	mov	r0, sl
 8008460:	4659      	mov	r1, fp
 8008462:	f7f7 fec3 	bl	80001ec <__adddf3>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	4620      	mov	r0, r4
 800846c:	4629      	mov	r1, r5
 800846e:	f7f8 f99d 	bl	80007ac <__aeabi_ddiv>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	f7f7 feb9 	bl	80001ec <__adddf3>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	a114      	add	r1, pc, #80	; (adr r1, 80084d0 <__ieee754_asin+0x410>)
 8008480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008484:	f7f7 feb0 	bl	80001e8 <__aeabi_dsub>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4640      	mov	r0, r8
 800848e:	4649      	mov	r1, r9
 8008490:	f7f7 feaa 	bl	80001e8 <__aeabi_dsub>
 8008494:	465f      	mov	r7, fp
 8008496:	4604      	mov	r4, r0
 8008498:	460d      	mov	r5, r1
 800849a:	4632      	mov	r2, r6
 800849c:	465b      	mov	r3, fp
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f7 fea3 	bl	80001ec <__adddf3>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	a10b      	add	r1, pc, #44	; (adr r1, 80084d8 <__ieee754_asin+0x418>)
 80084ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084b0:	f7f7 fe9a 	bl	80001e8 <__aeabi_dsub>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4620      	mov	r0, r4
 80084ba:	4629      	mov	r1, r5
 80084bc:	f7f7 fe94 	bl	80001e8 <__aeabi_dsub>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	a104      	add	r1, pc, #16	; (adr r1, 80084d8 <__ieee754_asin+0x418>)
 80084c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ca:	e6dd      	b.n	8008288 <__ieee754_asin+0x1c8>
 80084cc:	f3af 8000 	nop.w
 80084d0:	33145c07 	.word	0x33145c07
 80084d4:	3c91a626 	.word	0x3c91a626
 80084d8:	54442d18 	.word	0x54442d18
 80084dc:	3fe921fb 	.word	0x3fe921fb

080084e0 <__ieee754_atan2>:
 80084e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e4:	ec57 6b11 	vmov	r6, r7, d1
 80084e8:	4273      	negs	r3, r6
 80084ea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80084ee:	4333      	orrs	r3, r6
 80084f0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008698 <__ieee754_atan2+0x1b8>
 80084f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80084f8:	4573      	cmp	r3, lr
 80084fa:	ec51 0b10 	vmov	r0, r1, d0
 80084fe:	ee11 8a10 	vmov	r8, s2
 8008502:	d80a      	bhi.n	800851a <__ieee754_atan2+0x3a>
 8008504:	4244      	negs	r4, r0
 8008506:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800850a:	4304      	orrs	r4, r0
 800850c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008510:	4574      	cmp	r4, lr
 8008512:	468c      	mov	ip, r1
 8008514:	ee10 9a10 	vmov	r9, s0
 8008518:	d907      	bls.n	800852a <__ieee754_atan2+0x4a>
 800851a:	4632      	mov	r2, r6
 800851c:	463b      	mov	r3, r7
 800851e:	f7f7 fe65 	bl	80001ec <__adddf3>
 8008522:	ec41 0b10 	vmov	d0, r0, r1
 8008526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800852a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800852e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008532:	4334      	orrs	r4, r6
 8008534:	d103      	bne.n	800853e <__ieee754_atan2+0x5e>
 8008536:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800853a:	f000 be71 	b.w	8009220 <atan>
 800853e:	17bc      	asrs	r4, r7, #30
 8008540:	f004 0402 	and.w	r4, r4, #2
 8008544:	ea53 0909 	orrs.w	r9, r3, r9
 8008548:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800854c:	d107      	bne.n	800855e <__ieee754_atan2+0x7e>
 800854e:	2c02      	cmp	r4, #2
 8008550:	d073      	beq.n	800863a <__ieee754_atan2+0x15a>
 8008552:	2c03      	cmp	r4, #3
 8008554:	d1e5      	bne.n	8008522 <__ieee754_atan2+0x42>
 8008556:	a13e      	add	r1, pc, #248	; (adr r1, 8008650 <__ieee754_atan2+0x170>)
 8008558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800855c:	e7e1      	b.n	8008522 <__ieee754_atan2+0x42>
 800855e:	ea52 0808 	orrs.w	r8, r2, r8
 8008562:	d106      	bne.n	8008572 <__ieee754_atan2+0x92>
 8008564:	f1bc 0f00 	cmp.w	ip, #0
 8008568:	da6b      	bge.n	8008642 <__ieee754_atan2+0x162>
 800856a:	a13b      	add	r1, pc, #236	; (adr r1, 8008658 <__ieee754_atan2+0x178>)
 800856c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008570:	e7d7      	b.n	8008522 <__ieee754_atan2+0x42>
 8008572:	4572      	cmp	r2, lr
 8008574:	d120      	bne.n	80085b8 <__ieee754_atan2+0xd8>
 8008576:	4293      	cmp	r3, r2
 8008578:	d111      	bne.n	800859e <__ieee754_atan2+0xbe>
 800857a:	2c02      	cmp	r4, #2
 800857c:	d007      	beq.n	800858e <__ieee754_atan2+0xae>
 800857e:	2c03      	cmp	r4, #3
 8008580:	d009      	beq.n	8008596 <__ieee754_atan2+0xb6>
 8008582:	2c01      	cmp	r4, #1
 8008584:	d155      	bne.n	8008632 <__ieee754_atan2+0x152>
 8008586:	a136      	add	r1, pc, #216	; (adr r1, 8008660 <__ieee754_atan2+0x180>)
 8008588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858c:	e7c9      	b.n	8008522 <__ieee754_atan2+0x42>
 800858e:	a136      	add	r1, pc, #216	; (adr r1, 8008668 <__ieee754_atan2+0x188>)
 8008590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008594:	e7c5      	b.n	8008522 <__ieee754_atan2+0x42>
 8008596:	a136      	add	r1, pc, #216	; (adr r1, 8008670 <__ieee754_atan2+0x190>)
 8008598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800859c:	e7c1      	b.n	8008522 <__ieee754_atan2+0x42>
 800859e:	2c02      	cmp	r4, #2
 80085a0:	d04b      	beq.n	800863a <__ieee754_atan2+0x15a>
 80085a2:	2c03      	cmp	r4, #3
 80085a4:	d0d7      	beq.n	8008556 <__ieee754_atan2+0x76>
 80085a6:	2c01      	cmp	r4, #1
 80085a8:	f04f 0000 	mov.w	r0, #0
 80085ac:	d102      	bne.n	80085b4 <__ieee754_atan2+0xd4>
 80085ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80085b2:	e7b6      	b.n	8008522 <__ieee754_atan2+0x42>
 80085b4:	2100      	movs	r1, #0
 80085b6:	e7b4      	b.n	8008522 <__ieee754_atan2+0x42>
 80085b8:	4573      	cmp	r3, lr
 80085ba:	d0d3      	beq.n	8008564 <__ieee754_atan2+0x84>
 80085bc:	1a9b      	subs	r3, r3, r2
 80085be:	151b      	asrs	r3, r3, #20
 80085c0:	2b3c      	cmp	r3, #60	; 0x3c
 80085c2:	dc1e      	bgt.n	8008602 <__ieee754_atan2+0x122>
 80085c4:	2f00      	cmp	r7, #0
 80085c6:	da01      	bge.n	80085cc <__ieee754_atan2+0xec>
 80085c8:	333c      	adds	r3, #60	; 0x3c
 80085ca:	db1e      	blt.n	800860a <__ieee754_atan2+0x12a>
 80085cc:	4632      	mov	r2, r6
 80085ce:	463b      	mov	r3, r7
 80085d0:	f7f8 f8ec 	bl	80007ac <__aeabi_ddiv>
 80085d4:	ec41 0b10 	vmov	d0, r0, r1
 80085d8:	f000 ffc2 	bl	8009560 <fabs>
 80085dc:	f000 fe20 	bl	8009220 <atan>
 80085e0:	ec51 0b10 	vmov	r0, r1, d0
 80085e4:	2c01      	cmp	r4, #1
 80085e6:	d013      	beq.n	8008610 <__ieee754_atan2+0x130>
 80085e8:	2c02      	cmp	r4, #2
 80085ea:	d015      	beq.n	8008618 <__ieee754_atan2+0x138>
 80085ec:	2c00      	cmp	r4, #0
 80085ee:	d098      	beq.n	8008522 <__ieee754_atan2+0x42>
 80085f0:	a321      	add	r3, pc, #132	; (adr r3, 8008678 <__ieee754_atan2+0x198>)
 80085f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f6:	f7f7 fdf7 	bl	80001e8 <__aeabi_dsub>
 80085fa:	a321      	add	r3, pc, #132	; (adr r3, 8008680 <__ieee754_atan2+0x1a0>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	e014      	b.n	800862c <__ieee754_atan2+0x14c>
 8008602:	a121      	add	r1, pc, #132	; (adr r1, 8008688 <__ieee754_atan2+0x1a8>)
 8008604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008608:	e7ec      	b.n	80085e4 <__ieee754_atan2+0x104>
 800860a:	2000      	movs	r0, #0
 800860c:	2100      	movs	r1, #0
 800860e:	e7e9      	b.n	80085e4 <__ieee754_atan2+0x104>
 8008610:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008614:	4619      	mov	r1, r3
 8008616:	e784      	b.n	8008522 <__ieee754_atan2+0x42>
 8008618:	a317      	add	r3, pc, #92	; (adr r3, 8008678 <__ieee754_atan2+0x198>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f7 fde3 	bl	80001e8 <__aeabi_dsub>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	a116      	add	r1, pc, #88	; (adr r1, 8008680 <__ieee754_atan2+0x1a0>)
 8008628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800862c:	f7f7 fddc 	bl	80001e8 <__aeabi_dsub>
 8008630:	e777      	b.n	8008522 <__ieee754_atan2+0x42>
 8008632:	a117      	add	r1, pc, #92	; (adr r1, 8008690 <__ieee754_atan2+0x1b0>)
 8008634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008638:	e773      	b.n	8008522 <__ieee754_atan2+0x42>
 800863a:	a111      	add	r1, pc, #68	; (adr r1, 8008680 <__ieee754_atan2+0x1a0>)
 800863c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008640:	e76f      	b.n	8008522 <__ieee754_atan2+0x42>
 8008642:	a111      	add	r1, pc, #68	; (adr r1, 8008688 <__ieee754_atan2+0x1a8>)
 8008644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008648:	e76b      	b.n	8008522 <__ieee754_atan2+0x42>
 800864a:	bf00      	nop
 800864c:	f3af 8000 	nop.w
 8008650:	54442d18 	.word	0x54442d18
 8008654:	c00921fb 	.word	0xc00921fb
 8008658:	54442d18 	.word	0x54442d18
 800865c:	bff921fb 	.word	0xbff921fb
 8008660:	54442d18 	.word	0x54442d18
 8008664:	bfe921fb 	.word	0xbfe921fb
 8008668:	7f3321d2 	.word	0x7f3321d2
 800866c:	4002d97c 	.word	0x4002d97c
 8008670:	7f3321d2 	.word	0x7f3321d2
 8008674:	c002d97c 	.word	0xc002d97c
 8008678:	33145c07 	.word	0x33145c07
 800867c:	3ca1a626 	.word	0x3ca1a626
 8008680:	54442d18 	.word	0x54442d18
 8008684:	400921fb 	.word	0x400921fb
 8008688:	54442d18 	.word	0x54442d18
 800868c:	3ff921fb 	.word	0x3ff921fb
 8008690:	54442d18 	.word	0x54442d18
 8008694:	3fe921fb 	.word	0x3fe921fb
 8008698:	7ff00000 	.word	0x7ff00000
 800869c:	00000000 	.word	0x00000000

080086a0 <__ieee754_pow>:
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	b091      	sub	sp, #68	; 0x44
 80086a6:	ed8d 1b00 	vstr	d1, [sp]
 80086aa:	e9dd 2900 	ldrd	r2, r9, [sp]
 80086ae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80086b2:	ea58 0302 	orrs.w	r3, r8, r2
 80086b6:	ec57 6b10 	vmov	r6, r7, d0
 80086ba:	f000 84be 	beq.w	800903a <__ieee754_pow+0x99a>
 80086be:	4b7a      	ldr	r3, [pc, #488]	; (80088a8 <__ieee754_pow+0x208>)
 80086c0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80086c4:	429c      	cmp	r4, r3
 80086c6:	463d      	mov	r5, r7
 80086c8:	ee10 aa10 	vmov	sl, s0
 80086cc:	dc09      	bgt.n	80086e2 <__ieee754_pow+0x42>
 80086ce:	d103      	bne.n	80086d8 <__ieee754_pow+0x38>
 80086d0:	b93e      	cbnz	r6, 80086e2 <__ieee754_pow+0x42>
 80086d2:	45a0      	cmp	r8, r4
 80086d4:	dc0d      	bgt.n	80086f2 <__ieee754_pow+0x52>
 80086d6:	e001      	b.n	80086dc <__ieee754_pow+0x3c>
 80086d8:	4598      	cmp	r8, r3
 80086da:	dc02      	bgt.n	80086e2 <__ieee754_pow+0x42>
 80086dc:	4598      	cmp	r8, r3
 80086de:	d10e      	bne.n	80086fe <__ieee754_pow+0x5e>
 80086e0:	b16a      	cbz	r2, 80086fe <__ieee754_pow+0x5e>
 80086e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80086e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80086ea:	ea54 030a 	orrs.w	r3, r4, sl
 80086ee:	f000 84a4 	beq.w	800903a <__ieee754_pow+0x99a>
 80086f2:	486e      	ldr	r0, [pc, #440]	; (80088ac <__ieee754_pow+0x20c>)
 80086f4:	b011      	add	sp, #68	; 0x44
 80086f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fa:	f000 bf45 	b.w	8009588 <nan>
 80086fe:	2d00      	cmp	r5, #0
 8008700:	da53      	bge.n	80087aa <__ieee754_pow+0x10a>
 8008702:	4b6b      	ldr	r3, [pc, #428]	; (80088b0 <__ieee754_pow+0x210>)
 8008704:	4598      	cmp	r8, r3
 8008706:	dc4d      	bgt.n	80087a4 <__ieee754_pow+0x104>
 8008708:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800870c:	4598      	cmp	r8, r3
 800870e:	dd4c      	ble.n	80087aa <__ieee754_pow+0x10a>
 8008710:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008714:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008718:	2b14      	cmp	r3, #20
 800871a:	dd26      	ble.n	800876a <__ieee754_pow+0xca>
 800871c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008720:	fa22 f103 	lsr.w	r1, r2, r3
 8008724:	fa01 f303 	lsl.w	r3, r1, r3
 8008728:	4293      	cmp	r3, r2
 800872a:	d13e      	bne.n	80087aa <__ieee754_pow+0x10a>
 800872c:	f001 0101 	and.w	r1, r1, #1
 8008730:	f1c1 0b02 	rsb	fp, r1, #2
 8008734:	2a00      	cmp	r2, #0
 8008736:	d15b      	bne.n	80087f0 <__ieee754_pow+0x150>
 8008738:	4b5b      	ldr	r3, [pc, #364]	; (80088a8 <__ieee754_pow+0x208>)
 800873a:	4598      	cmp	r8, r3
 800873c:	d124      	bne.n	8008788 <__ieee754_pow+0xe8>
 800873e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008742:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008746:	ea53 030a 	orrs.w	r3, r3, sl
 800874a:	f000 8476 	beq.w	800903a <__ieee754_pow+0x99a>
 800874e:	4b59      	ldr	r3, [pc, #356]	; (80088b4 <__ieee754_pow+0x214>)
 8008750:	429c      	cmp	r4, r3
 8008752:	dd2d      	ble.n	80087b0 <__ieee754_pow+0x110>
 8008754:	f1b9 0f00 	cmp.w	r9, #0
 8008758:	f280 8473 	bge.w	8009042 <__ieee754_pow+0x9a2>
 800875c:	2000      	movs	r0, #0
 800875e:	2100      	movs	r1, #0
 8008760:	ec41 0b10 	vmov	d0, r0, r1
 8008764:	b011      	add	sp, #68	; 0x44
 8008766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876a:	2a00      	cmp	r2, #0
 800876c:	d13e      	bne.n	80087ec <__ieee754_pow+0x14c>
 800876e:	f1c3 0314 	rsb	r3, r3, #20
 8008772:	fa48 f103 	asr.w	r1, r8, r3
 8008776:	fa01 f303 	lsl.w	r3, r1, r3
 800877a:	4543      	cmp	r3, r8
 800877c:	f040 8469 	bne.w	8009052 <__ieee754_pow+0x9b2>
 8008780:	f001 0101 	and.w	r1, r1, #1
 8008784:	f1c1 0b02 	rsb	fp, r1, #2
 8008788:	4b4b      	ldr	r3, [pc, #300]	; (80088b8 <__ieee754_pow+0x218>)
 800878a:	4598      	cmp	r8, r3
 800878c:	d118      	bne.n	80087c0 <__ieee754_pow+0x120>
 800878e:	f1b9 0f00 	cmp.w	r9, #0
 8008792:	f280 845a 	bge.w	800904a <__ieee754_pow+0x9aa>
 8008796:	4948      	ldr	r1, [pc, #288]	; (80088b8 <__ieee754_pow+0x218>)
 8008798:	4632      	mov	r2, r6
 800879a:	463b      	mov	r3, r7
 800879c:	2000      	movs	r0, #0
 800879e:	f7f8 f805 	bl	80007ac <__aeabi_ddiv>
 80087a2:	e7dd      	b.n	8008760 <__ieee754_pow+0xc0>
 80087a4:	f04f 0b02 	mov.w	fp, #2
 80087a8:	e7c4      	b.n	8008734 <__ieee754_pow+0x94>
 80087aa:	f04f 0b00 	mov.w	fp, #0
 80087ae:	e7c1      	b.n	8008734 <__ieee754_pow+0x94>
 80087b0:	f1b9 0f00 	cmp.w	r9, #0
 80087b4:	dad2      	bge.n	800875c <__ieee754_pow+0xbc>
 80087b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80087ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80087be:	e7cf      	b.n	8008760 <__ieee754_pow+0xc0>
 80087c0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80087c4:	d106      	bne.n	80087d4 <__ieee754_pow+0x134>
 80087c6:	4632      	mov	r2, r6
 80087c8:	463b      	mov	r3, r7
 80087ca:	4610      	mov	r0, r2
 80087cc:	4619      	mov	r1, r3
 80087ce:	f7f7 fec3 	bl	8000558 <__aeabi_dmul>
 80087d2:	e7c5      	b.n	8008760 <__ieee754_pow+0xc0>
 80087d4:	4b39      	ldr	r3, [pc, #228]	; (80088bc <__ieee754_pow+0x21c>)
 80087d6:	4599      	cmp	r9, r3
 80087d8:	d10a      	bne.n	80087f0 <__ieee754_pow+0x150>
 80087da:	2d00      	cmp	r5, #0
 80087dc:	db08      	blt.n	80087f0 <__ieee754_pow+0x150>
 80087de:	ec47 6b10 	vmov	d0, r6, r7
 80087e2:	b011      	add	sp, #68	; 0x44
 80087e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	f000 bc68 	b.w	80090bc <__ieee754_sqrt>
 80087ec:	f04f 0b00 	mov.w	fp, #0
 80087f0:	ec47 6b10 	vmov	d0, r6, r7
 80087f4:	f000 feb4 	bl	8009560 <fabs>
 80087f8:	ec51 0b10 	vmov	r0, r1, d0
 80087fc:	f1ba 0f00 	cmp.w	sl, #0
 8008800:	d127      	bne.n	8008852 <__ieee754_pow+0x1b2>
 8008802:	b124      	cbz	r4, 800880e <__ieee754_pow+0x16e>
 8008804:	4b2c      	ldr	r3, [pc, #176]	; (80088b8 <__ieee754_pow+0x218>)
 8008806:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800880a:	429a      	cmp	r2, r3
 800880c:	d121      	bne.n	8008852 <__ieee754_pow+0x1b2>
 800880e:	f1b9 0f00 	cmp.w	r9, #0
 8008812:	da05      	bge.n	8008820 <__ieee754_pow+0x180>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	2000      	movs	r0, #0
 800881a:	4927      	ldr	r1, [pc, #156]	; (80088b8 <__ieee754_pow+0x218>)
 800881c:	f7f7 ffc6 	bl	80007ac <__aeabi_ddiv>
 8008820:	2d00      	cmp	r5, #0
 8008822:	da9d      	bge.n	8008760 <__ieee754_pow+0xc0>
 8008824:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008828:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800882c:	ea54 030b 	orrs.w	r3, r4, fp
 8008830:	d108      	bne.n	8008844 <__ieee754_pow+0x1a4>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4610      	mov	r0, r2
 8008838:	4619      	mov	r1, r3
 800883a:	f7f7 fcd5 	bl	80001e8 <__aeabi_dsub>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	e7ac      	b.n	800879e <__ieee754_pow+0xfe>
 8008844:	f1bb 0f01 	cmp.w	fp, #1
 8008848:	d18a      	bne.n	8008760 <__ieee754_pow+0xc0>
 800884a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800884e:	4619      	mov	r1, r3
 8008850:	e786      	b.n	8008760 <__ieee754_pow+0xc0>
 8008852:	0fed      	lsrs	r5, r5, #31
 8008854:	1e6b      	subs	r3, r5, #1
 8008856:	930d      	str	r3, [sp, #52]	; 0x34
 8008858:	ea5b 0303 	orrs.w	r3, fp, r3
 800885c:	d102      	bne.n	8008864 <__ieee754_pow+0x1c4>
 800885e:	4632      	mov	r2, r6
 8008860:	463b      	mov	r3, r7
 8008862:	e7e8      	b.n	8008836 <__ieee754_pow+0x196>
 8008864:	4b16      	ldr	r3, [pc, #88]	; (80088c0 <__ieee754_pow+0x220>)
 8008866:	4598      	cmp	r8, r3
 8008868:	f340 80fe 	ble.w	8008a68 <__ieee754_pow+0x3c8>
 800886c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008870:	4598      	cmp	r8, r3
 8008872:	dd0a      	ble.n	800888a <__ieee754_pow+0x1ea>
 8008874:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <__ieee754_pow+0x214>)
 8008876:	429c      	cmp	r4, r3
 8008878:	dc0d      	bgt.n	8008896 <__ieee754_pow+0x1f6>
 800887a:	f1b9 0f00 	cmp.w	r9, #0
 800887e:	f6bf af6d 	bge.w	800875c <__ieee754_pow+0xbc>
 8008882:	a307      	add	r3, pc, #28	; (adr r3, 80088a0 <__ieee754_pow+0x200>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	e79f      	b.n	80087ca <__ieee754_pow+0x12a>
 800888a:	4b0e      	ldr	r3, [pc, #56]	; (80088c4 <__ieee754_pow+0x224>)
 800888c:	429c      	cmp	r4, r3
 800888e:	ddf4      	ble.n	800887a <__ieee754_pow+0x1da>
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <__ieee754_pow+0x218>)
 8008892:	429c      	cmp	r4, r3
 8008894:	dd18      	ble.n	80088c8 <__ieee754_pow+0x228>
 8008896:	f1b9 0f00 	cmp.w	r9, #0
 800889a:	dcf2      	bgt.n	8008882 <__ieee754_pow+0x1e2>
 800889c:	e75e      	b.n	800875c <__ieee754_pow+0xbc>
 800889e:	bf00      	nop
 80088a0:	8800759c 	.word	0x8800759c
 80088a4:	7e37e43c 	.word	0x7e37e43c
 80088a8:	7ff00000 	.word	0x7ff00000
 80088ac:	08009c21 	.word	0x08009c21
 80088b0:	433fffff 	.word	0x433fffff
 80088b4:	3fefffff 	.word	0x3fefffff
 80088b8:	3ff00000 	.word	0x3ff00000
 80088bc:	3fe00000 	.word	0x3fe00000
 80088c0:	41e00000 	.word	0x41e00000
 80088c4:	3feffffe 	.word	0x3feffffe
 80088c8:	2200      	movs	r2, #0
 80088ca:	4b63      	ldr	r3, [pc, #396]	; (8008a58 <__ieee754_pow+0x3b8>)
 80088cc:	f7f7 fc8c 	bl	80001e8 <__aeabi_dsub>
 80088d0:	a355      	add	r3, pc, #340	; (adr r3, 8008a28 <__ieee754_pow+0x388>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	f7f7 fe3d 	bl	8000558 <__aeabi_dmul>
 80088de:	a354      	add	r3, pc, #336	; (adr r3, 8008a30 <__ieee754_pow+0x390>)
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	4606      	mov	r6, r0
 80088e6:	460f      	mov	r7, r1
 80088e8:	4620      	mov	r0, r4
 80088ea:	4629      	mov	r1, r5
 80088ec:	f7f7 fe34 	bl	8000558 <__aeabi_dmul>
 80088f0:	2200      	movs	r2, #0
 80088f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088f6:	4b59      	ldr	r3, [pc, #356]	; (8008a5c <__ieee754_pow+0x3bc>)
 80088f8:	4620      	mov	r0, r4
 80088fa:	4629      	mov	r1, r5
 80088fc:	f7f7 fe2c 	bl	8000558 <__aeabi_dmul>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	a14c      	add	r1, pc, #304	; (adr r1, 8008a38 <__ieee754_pow+0x398>)
 8008906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800890a:	f7f7 fc6d 	bl	80001e8 <__aeabi_dsub>
 800890e:	4622      	mov	r2, r4
 8008910:	462b      	mov	r3, r5
 8008912:	f7f7 fe21 	bl	8000558 <__aeabi_dmul>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	2000      	movs	r0, #0
 800891c:	4950      	ldr	r1, [pc, #320]	; (8008a60 <__ieee754_pow+0x3c0>)
 800891e:	f7f7 fc63 	bl	80001e8 <__aeabi_dsub>
 8008922:	4622      	mov	r2, r4
 8008924:	462b      	mov	r3, r5
 8008926:	4680      	mov	r8, r0
 8008928:	4689      	mov	r9, r1
 800892a:	4620      	mov	r0, r4
 800892c:	4629      	mov	r1, r5
 800892e:	f7f7 fe13 	bl	8000558 <__aeabi_dmul>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4640      	mov	r0, r8
 8008938:	4649      	mov	r1, r9
 800893a:	f7f7 fe0d 	bl	8000558 <__aeabi_dmul>
 800893e:	a340      	add	r3, pc, #256	; (adr r3, 8008a40 <__ieee754_pow+0x3a0>)
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f7f7 fe08 	bl	8000558 <__aeabi_dmul>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008950:	f7f7 fc4a 	bl	80001e8 <__aeabi_dsub>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4604      	mov	r4, r0
 800895a:	460d      	mov	r5, r1
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f7 fc44 	bl	80001ec <__adddf3>
 8008964:	2000      	movs	r0, #0
 8008966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800896a:	4632      	mov	r2, r6
 800896c:	463b      	mov	r3, r7
 800896e:	f7f7 fc3b 	bl	80001e8 <__aeabi_dsub>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4620      	mov	r0, r4
 8008978:	4629      	mov	r1, r5
 800897a:	f7f7 fc35 	bl	80001e8 <__aeabi_dsub>
 800897e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008980:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008984:	4313      	orrs	r3, r2
 8008986:	4606      	mov	r6, r0
 8008988:	460f      	mov	r7, r1
 800898a:	f040 81eb 	bne.w	8008d64 <__ieee754_pow+0x6c4>
 800898e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008a48 <__ieee754_pow+0x3a8>
 8008992:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008996:	2400      	movs	r4, #0
 8008998:	4622      	mov	r2, r4
 800899a:	462b      	mov	r3, r5
 800899c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80089a4:	f7f7 fc20 	bl	80001e8 <__aeabi_dsub>
 80089a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ac:	f7f7 fdd4 	bl	8000558 <__aeabi_dmul>
 80089b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089b4:	4680      	mov	r8, r0
 80089b6:	4689      	mov	r9, r1
 80089b8:	4630      	mov	r0, r6
 80089ba:	4639      	mov	r1, r7
 80089bc:	f7f7 fdcc 	bl	8000558 <__aeabi_dmul>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4640      	mov	r0, r8
 80089c6:	4649      	mov	r1, r9
 80089c8:	f7f7 fc10 	bl	80001ec <__adddf3>
 80089cc:	4622      	mov	r2, r4
 80089ce:	462b      	mov	r3, r5
 80089d0:	4680      	mov	r8, r0
 80089d2:	4689      	mov	r9, r1
 80089d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089d8:	f7f7 fdbe 	bl	8000558 <__aeabi_dmul>
 80089dc:	460b      	mov	r3, r1
 80089de:	4604      	mov	r4, r0
 80089e0:	460d      	mov	r5, r1
 80089e2:	4602      	mov	r2, r0
 80089e4:	4649      	mov	r1, r9
 80089e6:	4640      	mov	r0, r8
 80089e8:	e9cd 4500 	strd	r4, r5, [sp]
 80089ec:	f7f7 fbfe 	bl	80001ec <__adddf3>
 80089f0:	4b1c      	ldr	r3, [pc, #112]	; (8008a64 <__ieee754_pow+0x3c4>)
 80089f2:	4299      	cmp	r1, r3
 80089f4:	4606      	mov	r6, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	468b      	mov	fp, r1
 80089fa:	f340 82f7 	ble.w	8008fec <__ieee754_pow+0x94c>
 80089fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008a02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008a06:	4303      	orrs	r3, r0
 8008a08:	f000 81ea 	beq.w	8008de0 <__ieee754_pow+0x740>
 8008a0c:	a310      	add	r3, pc, #64	; (adr r3, 8008a50 <__ieee754_pow+0x3b0>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a16:	f7f7 fd9f 	bl	8000558 <__aeabi_dmul>
 8008a1a:	a30d      	add	r3, pc, #52	; (adr r3, 8008a50 <__ieee754_pow+0x3b0>)
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	e6d5      	b.n	80087ce <__ieee754_pow+0x12e>
 8008a22:	bf00      	nop
 8008a24:	f3af 8000 	nop.w
 8008a28:	60000000 	.word	0x60000000
 8008a2c:	3ff71547 	.word	0x3ff71547
 8008a30:	f85ddf44 	.word	0xf85ddf44
 8008a34:	3e54ae0b 	.word	0x3e54ae0b
 8008a38:	55555555 	.word	0x55555555
 8008a3c:	3fd55555 	.word	0x3fd55555
 8008a40:	652b82fe 	.word	0x652b82fe
 8008a44:	3ff71547 	.word	0x3ff71547
 8008a48:	00000000 	.word	0x00000000
 8008a4c:	bff00000 	.word	0xbff00000
 8008a50:	8800759c 	.word	0x8800759c
 8008a54:	7e37e43c 	.word	0x7e37e43c
 8008a58:	3ff00000 	.word	0x3ff00000
 8008a5c:	3fd00000 	.word	0x3fd00000
 8008a60:	3fe00000 	.word	0x3fe00000
 8008a64:	408fffff 	.word	0x408fffff
 8008a68:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008a6c:	f04f 0200 	mov.w	r2, #0
 8008a70:	da05      	bge.n	8008a7e <__ieee754_pow+0x3de>
 8008a72:	4bd3      	ldr	r3, [pc, #844]	; (8008dc0 <__ieee754_pow+0x720>)
 8008a74:	f7f7 fd70 	bl	8000558 <__aeabi_dmul>
 8008a78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	1523      	asrs	r3, r4, #20
 8008a80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008a84:	4413      	add	r3, r2
 8008a86:	9309      	str	r3, [sp, #36]	; 0x24
 8008a88:	4bce      	ldr	r3, [pc, #824]	; (8008dc4 <__ieee754_pow+0x724>)
 8008a8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008a8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008a92:	429c      	cmp	r4, r3
 8008a94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a98:	dd08      	ble.n	8008aac <__ieee754_pow+0x40c>
 8008a9a:	4bcb      	ldr	r3, [pc, #812]	; (8008dc8 <__ieee754_pow+0x728>)
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	f340 815e 	ble.w	8008d5e <__ieee754_pow+0x6be>
 8008aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008aac:	f04f 0a00 	mov.w	sl, #0
 8008ab0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008ab4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ab6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ab8:	4bc4      	ldr	r3, [pc, #784]	; (8008dcc <__ieee754_pow+0x72c>)
 8008aba:	4413      	add	r3, r2
 8008abc:	ed93 7b00 	vldr	d7, [r3]
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	ec53 2b17 	vmov	r2, r3, d7
 8008ac6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008aca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008ace:	f7f7 fb8b 	bl	80001e8 <__aeabi_dsub>
 8008ad2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460f      	mov	r7, r1
 8008ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ade:	f7f7 fb85 	bl	80001ec <__adddf3>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	49b9      	ldr	r1, [pc, #740]	; (8008dd0 <__ieee754_pow+0x730>)
 8008aea:	f7f7 fe5f 	bl	80007ac <__aeabi_ddiv>
 8008aee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4630      	mov	r0, r6
 8008af8:	4639      	mov	r1, r7
 8008afa:	f7f7 fd2d 	bl	8000558 <__aeabi_dmul>
 8008afe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b02:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9302      	str	r3, [sp, #8]
 8008b0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b12:	106d      	asrs	r5, r5, #1
 8008b14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008b18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008b22:	4640      	mov	r0, r8
 8008b24:	4649      	mov	r1, r9
 8008b26:	4614      	mov	r4, r2
 8008b28:	461d      	mov	r5, r3
 8008b2a:	f7f7 fd15 	bl	8000558 <__aeabi_dmul>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4630      	mov	r0, r6
 8008b34:	4639      	mov	r1, r7
 8008b36:	f7f7 fb57 	bl	80001e8 <__aeabi_dsub>
 8008b3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b3e:	4606      	mov	r6, r0
 8008b40:	460f      	mov	r7, r1
 8008b42:	4620      	mov	r0, r4
 8008b44:	4629      	mov	r1, r5
 8008b46:	f7f7 fb4f 	bl	80001e8 <__aeabi_dsub>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b52:	f7f7 fb49 	bl	80001e8 <__aeabi_dsub>
 8008b56:	4642      	mov	r2, r8
 8008b58:	464b      	mov	r3, r9
 8008b5a:	f7f7 fcfd 	bl	8000558 <__aeabi_dmul>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	4630      	mov	r0, r6
 8008b64:	4639      	mov	r1, r7
 8008b66:	f7f7 fb3f 	bl	80001e8 <__aeabi_dsub>
 8008b6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008b6e:	f7f7 fcf3 	bl	8000558 <__aeabi_dmul>
 8008b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	f7f7 fceb 	bl	8000558 <__aeabi_dmul>
 8008b82:	a37b      	add	r3, pc, #492	; (adr r3, 8008d70 <__ieee754_pow+0x6d0>)
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	4604      	mov	r4, r0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	f7f7 fce4 	bl	8000558 <__aeabi_dmul>
 8008b90:	a379      	add	r3, pc, #484	; (adr r3, 8008d78 <__ieee754_pow+0x6d8>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f7f7 fb29 	bl	80001ec <__adddf3>
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	f7f7 fcdb 	bl	8000558 <__aeabi_dmul>
 8008ba2:	a377      	add	r3, pc, #476	; (adr r3, 8008d80 <__ieee754_pow+0x6e0>)
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f7f7 fb20 	bl	80001ec <__adddf3>
 8008bac:	4622      	mov	r2, r4
 8008bae:	462b      	mov	r3, r5
 8008bb0:	f7f7 fcd2 	bl	8000558 <__aeabi_dmul>
 8008bb4:	a374      	add	r3, pc, #464	; (adr r3, 8008d88 <__ieee754_pow+0x6e8>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fb17 	bl	80001ec <__adddf3>
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	f7f7 fcc9 	bl	8000558 <__aeabi_dmul>
 8008bc6:	a372      	add	r3, pc, #456	; (adr r3, 8008d90 <__ieee754_pow+0x6f0>)
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f7f7 fb0e 	bl	80001ec <__adddf3>
 8008bd0:	4622      	mov	r2, r4
 8008bd2:	462b      	mov	r3, r5
 8008bd4:	f7f7 fcc0 	bl	8000558 <__aeabi_dmul>
 8008bd8:	a36f      	add	r3, pc, #444	; (adr r3, 8008d98 <__ieee754_pow+0x6f8>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fb05 	bl	80001ec <__adddf3>
 8008be2:	4622      	mov	r2, r4
 8008be4:	4606      	mov	r6, r0
 8008be6:	460f      	mov	r7, r1
 8008be8:	462b      	mov	r3, r5
 8008bea:	4620      	mov	r0, r4
 8008bec:	4629      	mov	r1, r5
 8008bee:	f7f7 fcb3 	bl	8000558 <__aeabi_dmul>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 fcad 	bl	8000558 <__aeabi_dmul>
 8008bfe:	4642      	mov	r2, r8
 8008c00:	4604      	mov	r4, r0
 8008c02:	460d      	mov	r5, r1
 8008c04:	464b      	mov	r3, r9
 8008c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c0a:	f7f7 faef 	bl	80001ec <__adddf3>
 8008c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c12:	f7f7 fca1 	bl	8000558 <__aeabi_dmul>
 8008c16:	4622      	mov	r2, r4
 8008c18:	462b      	mov	r3, r5
 8008c1a:	f7f7 fae7 	bl	80001ec <__adddf3>
 8008c1e:	4642      	mov	r2, r8
 8008c20:	4606      	mov	r6, r0
 8008c22:	460f      	mov	r7, r1
 8008c24:	464b      	mov	r3, r9
 8008c26:	4640      	mov	r0, r8
 8008c28:	4649      	mov	r1, r9
 8008c2a:	f7f7 fc95 	bl	8000558 <__aeabi_dmul>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	4b68      	ldr	r3, [pc, #416]	; (8008dd4 <__ieee754_pow+0x734>)
 8008c32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008c36:	f7f7 fad9 	bl	80001ec <__adddf3>
 8008c3a:	4632      	mov	r2, r6
 8008c3c:	463b      	mov	r3, r7
 8008c3e:	f7f7 fad5 	bl	80001ec <__adddf3>
 8008c42:	9802      	ldr	r0, [sp, #8]
 8008c44:	460d      	mov	r5, r1
 8008c46:	4604      	mov	r4, r0
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	4649      	mov	r1, r9
 8008c50:	f7f7 fc82 	bl	8000558 <__aeabi_dmul>
 8008c54:	2200      	movs	r2, #0
 8008c56:	4680      	mov	r8, r0
 8008c58:	4689      	mov	r9, r1
 8008c5a:	4b5e      	ldr	r3, [pc, #376]	; (8008dd4 <__ieee754_pow+0x734>)
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	4629      	mov	r1, r5
 8008c60:	f7f7 fac2 	bl	80001e8 <__aeabi_dsub>
 8008c64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c68:	f7f7 fabe 	bl	80001e8 <__aeabi_dsub>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4630      	mov	r0, r6
 8008c72:	4639      	mov	r1, r7
 8008c74:	f7f7 fab8 	bl	80001e8 <__aeabi_dsub>
 8008c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c7c:	f7f7 fc6c 	bl	8000558 <__aeabi_dmul>
 8008c80:	4622      	mov	r2, r4
 8008c82:	4606      	mov	r6, r0
 8008c84:	460f      	mov	r7, r1
 8008c86:	462b      	mov	r3, r5
 8008c88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c8c:	f7f7 fc64 	bl	8000558 <__aeabi_dmul>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4630      	mov	r0, r6
 8008c96:	4639      	mov	r1, r7
 8008c98:	f7f7 faa8 	bl	80001ec <__adddf3>
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	460f      	mov	r7, r1
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	f7f7 faa0 	bl	80001ec <__adddf3>
 8008cac:	9802      	ldr	r0, [sp, #8]
 8008cae:	a33c      	add	r3, pc, #240	; (adr r3, 8008da0 <__ieee754_pow+0x700>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	f7f7 fc4e 	bl	8000558 <__aeabi_dmul>
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f7f7 fa8e 	bl	80001e8 <__aeabi_dsub>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	f7f7 fa88 	bl	80001e8 <__aeabi_dsub>
 8008cd8:	a333      	add	r3, pc, #204	; (adr r3, 8008da8 <__ieee754_pow+0x708>)
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f7f7 fc3b 	bl	8000558 <__aeabi_dmul>
 8008ce2:	a333      	add	r3, pc, #204	; (adr r3, 8008db0 <__ieee754_pow+0x710>)
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	4606      	mov	r6, r0
 8008cea:	460f      	mov	r7, r1
 8008cec:	4620      	mov	r0, r4
 8008cee:	4629      	mov	r1, r5
 8008cf0:	f7f7 fc32 	bl	8000558 <__aeabi_dmul>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 fa76 	bl	80001ec <__adddf3>
 8008d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d02:	4b35      	ldr	r3, [pc, #212]	; (8008dd8 <__ieee754_pow+0x738>)
 8008d04:	4413      	add	r3, r2
 8008d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0a:	f7f7 fa6f 	bl	80001ec <__adddf3>
 8008d0e:	4604      	mov	r4, r0
 8008d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d12:	460d      	mov	r5, r1
 8008d14:	f7f7 fbb6 	bl	8000484 <__aeabi_i2d>
 8008d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d1a:	4b30      	ldr	r3, [pc, #192]	; (8008ddc <__ieee754_pow+0x73c>)
 8008d1c:	4413      	add	r3, r2
 8008d1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d22:	4606      	mov	r6, r0
 8008d24:	460f      	mov	r7, r1
 8008d26:	4622      	mov	r2, r4
 8008d28:	462b      	mov	r3, r5
 8008d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d2e:	f7f7 fa5d 	bl	80001ec <__adddf3>
 8008d32:	4642      	mov	r2, r8
 8008d34:	464b      	mov	r3, r9
 8008d36:	f7f7 fa59 	bl	80001ec <__adddf3>
 8008d3a:	4632      	mov	r2, r6
 8008d3c:	463b      	mov	r3, r7
 8008d3e:	f7f7 fa55 	bl	80001ec <__adddf3>
 8008d42:	9802      	ldr	r0, [sp, #8]
 8008d44:	4632      	mov	r2, r6
 8008d46:	463b      	mov	r3, r7
 8008d48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d4c:	f7f7 fa4c 	bl	80001e8 <__aeabi_dsub>
 8008d50:	4642      	mov	r2, r8
 8008d52:	464b      	mov	r3, r9
 8008d54:	f7f7 fa48 	bl	80001e8 <__aeabi_dsub>
 8008d58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d5c:	e607      	b.n	800896e <__ieee754_pow+0x2ce>
 8008d5e:	f04f 0a01 	mov.w	sl, #1
 8008d62:	e6a5      	b.n	8008ab0 <__ieee754_pow+0x410>
 8008d64:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008db8 <__ieee754_pow+0x718>
 8008d68:	e613      	b.n	8008992 <__ieee754_pow+0x2f2>
 8008d6a:	bf00      	nop
 8008d6c:	f3af 8000 	nop.w
 8008d70:	4a454eef 	.word	0x4a454eef
 8008d74:	3fca7e28 	.word	0x3fca7e28
 8008d78:	93c9db65 	.word	0x93c9db65
 8008d7c:	3fcd864a 	.word	0x3fcd864a
 8008d80:	a91d4101 	.word	0xa91d4101
 8008d84:	3fd17460 	.word	0x3fd17460
 8008d88:	518f264d 	.word	0x518f264d
 8008d8c:	3fd55555 	.word	0x3fd55555
 8008d90:	db6fabff 	.word	0xdb6fabff
 8008d94:	3fdb6db6 	.word	0x3fdb6db6
 8008d98:	33333303 	.word	0x33333303
 8008d9c:	3fe33333 	.word	0x3fe33333
 8008da0:	e0000000 	.word	0xe0000000
 8008da4:	3feec709 	.word	0x3feec709
 8008da8:	dc3a03fd 	.word	0xdc3a03fd
 8008dac:	3feec709 	.word	0x3feec709
 8008db0:	145b01f5 	.word	0x145b01f5
 8008db4:	be3e2fe0 	.word	0xbe3e2fe0
 8008db8:	00000000 	.word	0x00000000
 8008dbc:	3ff00000 	.word	0x3ff00000
 8008dc0:	43400000 	.word	0x43400000
 8008dc4:	0003988e 	.word	0x0003988e
 8008dc8:	000bb679 	.word	0x000bb679
 8008dcc:	08009d48 	.word	0x08009d48
 8008dd0:	3ff00000 	.word	0x3ff00000
 8008dd4:	40080000 	.word	0x40080000
 8008dd8:	08009d68 	.word	0x08009d68
 8008ddc:	08009d58 	.word	0x08009d58
 8008de0:	a3b4      	add	r3, pc, #720	; (adr r3, 80090b4 <__ieee754_pow+0xa14>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	4640      	mov	r0, r8
 8008de8:	4649      	mov	r1, r9
 8008dea:	f7f7 f9ff 	bl	80001ec <__adddf3>
 8008dee:	4622      	mov	r2, r4
 8008df0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008df4:	462b      	mov	r3, r5
 8008df6:	4630      	mov	r0, r6
 8008df8:	4639      	mov	r1, r7
 8008dfa:	f7f7 f9f5 	bl	80001e8 <__aeabi_dsub>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e06:	f7f8 f889 	bl	8000f1c <__aeabi_dcmpgt>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	f47f adfe 	bne.w	8008a0c <__ieee754_pow+0x36c>
 8008e10:	4aa3      	ldr	r2, [pc, #652]	; (80090a0 <__ieee754_pow+0xa00>)
 8008e12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e16:	4293      	cmp	r3, r2
 8008e18:	f340 810a 	ble.w	8009030 <__ieee754_pow+0x990>
 8008e1c:	151b      	asrs	r3, r3, #20
 8008e1e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008e22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008e26:	fa4a f303 	asr.w	r3, sl, r3
 8008e2a:	445b      	add	r3, fp
 8008e2c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008e30:	4e9c      	ldr	r6, [pc, #624]	; (80090a4 <__ieee754_pow+0xa04>)
 8008e32:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008e36:	4116      	asrs	r6, r2
 8008e38:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	ea23 0106 	bic.w	r1, r3, r6
 8008e42:	f1c2 0214 	rsb	r2, r2, #20
 8008e46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008e4a:	fa4a fa02 	asr.w	sl, sl, r2
 8008e4e:	f1bb 0f00 	cmp.w	fp, #0
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4620      	mov	r0, r4
 8008e58:	4629      	mov	r1, r5
 8008e5a:	bfb8      	it	lt
 8008e5c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008e60:	f7f7 f9c2 	bl	80001e8 <__aeabi_dsub>
 8008e64:	e9cd 0100 	strd	r0, r1, [sp]
 8008e68:	4642      	mov	r2, r8
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e70:	f7f7 f9bc 	bl	80001ec <__adddf3>
 8008e74:	2000      	movs	r0, #0
 8008e76:	a378      	add	r3, pc, #480	; (adr r3, 8009058 <__ieee754_pow+0x9b8>)
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	460d      	mov	r5, r1
 8008e80:	f7f7 fb6a 	bl	8000558 <__aeabi_dmul>
 8008e84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e88:	4606      	mov	r6, r0
 8008e8a:	460f      	mov	r7, r1
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	4629      	mov	r1, r5
 8008e90:	f7f7 f9aa 	bl	80001e8 <__aeabi_dsub>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4640      	mov	r0, r8
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	f7f7 f9a4 	bl	80001e8 <__aeabi_dsub>
 8008ea0:	a36f      	add	r3, pc, #444	; (adr r3, 8009060 <__ieee754_pow+0x9c0>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f7f7 fb57 	bl	8000558 <__aeabi_dmul>
 8008eaa:	a36f      	add	r3, pc, #444	; (adr r3, 8009068 <__ieee754_pow+0x9c8>)
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	4689      	mov	r9, r1
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fb4e 	bl	8000558 <__aeabi_dmul>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	f7f7 f992 	bl	80001ec <__adddf3>
 8008ec8:	4604      	mov	r4, r0
 8008eca:	460d      	mov	r5, r1
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	f7f7 f98a 	bl	80001ec <__adddf3>
 8008ed8:	4632      	mov	r2, r6
 8008eda:	463b      	mov	r3, r7
 8008edc:	4680      	mov	r8, r0
 8008ede:	4689      	mov	r9, r1
 8008ee0:	f7f7 f982 	bl	80001e8 <__aeabi_dsub>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4620      	mov	r0, r4
 8008eea:	4629      	mov	r1, r5
 8008eec:	f7f7 f97c 	bl	80001e8 <__aeabi_dsub>
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460f      	mov	r7, r1
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	4640      	mov	r0, r8
 8008efa:	4649      	mov	r1, r9
 8008efc:	f7f7 fb2c 	bl	8000558 <__aeabi_dmul>
 8008f00:	a35b      	add	r3, pc, #364	; (adr r3, 8009070 <__ieee754_pow+0x9d0>)
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	4604      	mov	r4, r0
 8008f08:	460d      	mov	r5, r1
 8008f0a:	f7f7 fb25 	bl	8000558 <__aeabi_dmul>
 8008f0e:	a35a      	add	r3, pc, #360	; (adr r3, 8009078 <__ieee754_pow+0x9d8>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f7f7 f968 	bl	80001e8 <__aeabi_dsub>
 8008f18:	4622      	mov	r2, r4
 8008f1a:	462b      	mov	r3, r5
 8008f1c:	f7f7 fb1c 	bl	8000558 <__aeabi_dmul>
 8008f20:	a357      	add	r3, pc, #348	; (adr r3, 8009080 <__ieee754_pow+0x9e0>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 f961 	bl	80001ec <__adddf3>
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	f7f7 fb13 	bl	8000558 <__aeabi_dmul>
 8008f32:	a355      	add	r3, pc, #340	; (adr r3, 8009088 <__ieee754_pow+0x9e8>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	f7f7 f956 	bl	80001e8 <__aeabi_dsub>
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	462b      	mov	r3, r5
 8008f40:	f7f7 fb0a 	bl	8000558 <__aeabi_dmul>
 8008f44:	a352      	add	r3, pc, #328	; (adr r3, 8009090 <__ieee754_pow+0x9f0>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f94f 	bl	80001ec <__adddf3>
 8008f4e:	4622      	mov	r2, r4
 8008f50:	462b      	mov	r3, r5
 8008f52:	f7f7 fb01 	bl	8000558 <__aeabi_dmul>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	f7f7 f943 	bl	80001e8 <__aeabi_dsub>
 8008f62:	4604      	mov	r4, r0
 8008f64:	460d      	mov	r5, r1
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	f7f7 faf3 	bl	8000558 <__aeabi_dmul>
 8008f72:	2200      	movs	r2, #0
 8008f74:	e9cd 0100 	strd	r0, r1, [sp]
 8008f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f7f7 f932 	bl	80001e8 <__aeabi_dsub>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f8c:	f7f7 fc0e 	bl	80007ac <__aeabi_ddiv>
 8008f90:	4632      	mov	r2, r6
 8008f92:	4604      	mov	r4, r0
 8008f94:	460d      	mov	r5, r1
 8008f96:	463b      	mov	r3, r7
 8008f98:	4640      	mov	r0, r8
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	f7f7 fadc 	bl	8000558 <__aeabi_dmul>
 8008fa0:	4632      	mov	r2, r6
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	f7f7 f922 	bl	80001ec <__adddf3>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4620      	mov	r0, r4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f7f7 f91a 	bl	80001e8 <__aeabi_dsub>
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	f7f7 f916 	bl	80001e8 <__aeabi_dsub>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	4939      	ldr	r1, [pc, #228]	; (80090a8 <__ieee754_pow+0xa08>)
 8008fc4:	f7f7 f910 	bl	80001e8 <__aeabi_dsub>
 8008fc8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008fcc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	da2f      	bge.n	8009036 <__ieee754_pow+0x996>
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	ec43 2b10 	vmov	d0, r2, r3
 8008fdc:	f000 fb60 	bl	80096a0 <scalbn>
 8008fe0:	ec51 0b10 	vmov	r0, r1, d0
 8008fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fe8:	f7ff bbf1 	b.w	80087ce <__ieee754_pow+0x12e>
 8008fec:	4b2f      	ldr	r3, [pc, #188]	; (80090ac <__ieee754_pow+0xa0c>)
 8008fee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008ff2:	429e      	cmp	r6, r3
 8008ff4:	f77f af0c 	ble.w	8008e10 <__ieee754_pow+0x770>
 8008ff8:	4b2d      	ldr	r3, [pc, #180]	; (80090b0 <__ieee754_pow+0xa10>)
 8008ffa:	440b      	add	r3, r1
 8008ffc:	4303      	orrs	r3, r0
 8008ffe:	d00b      	beq.n	8009018 <__ieee754_pow+0x978>
 8009000:	a325      	add	r3, pc, #148	; (adr r3, 8009098 <__ieee754_pow+0x9f8>)
 8009002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800900a:	f7f7 faa5 	bl	8000558 <__aeabi_dmul>
 800900e:	a322      	add	r3, pc, #136	; (adr r3, 8009098 <__ieee754_pow+0x9f8>)
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	f7ff bbdb 	b.w	80087ce <__ieee754_pow+0x12e>
 8009018:	4622      	mov	r2, r4
 800901a:	462b      	mov	r3, r5
 800901c:	f7f7 f8e4 	bl	80001e8 <__aeabi_dsub>
 8009020:	4642      	mov	r2, r8
 8009022:	464b      	mov	r3, r9
 8009024:	f7f7 ff70 	bl	8000f08 <__aeabi_dcmpge>
 8009028:	2800      	cmp	r0, #0
 800902a:	f43f aef1 	beq.w	8008e10 <__ieee754_pow+0x770>
 800902e:	e7e7      	b.n	8009000 <__ieee754_pow+0x960>
 8009030:	f04f 0a00 	mov.w	sl, #0
 8009034:	e718      	b.n	8008e68 <__ieee754_pow+0x7c8>
 8009036:	4621      	mov	r1, r4
 8009038:	e7d4      	b.n	8008fe4 <__ieee754_pow+0x944>
 800903a:	2000      	movs	r0, #0
 800903c:	491a      	ldr	r1, [pc, #104]	; (80090a8 <__ieee754_pow+0xa08>)
 800903e:	f7ff bb8f 	b.w	8008760 <__ieee754_pow+0xc0>
 8009042:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009046:	f7ff bb8b 	b.w	8008760 <__ieee754_pow+0xc0>
 800904a:	4630      	mov	r0, r6
 800904c:	4639      	mov	r1, r7
 800904e:	f7ff bb87 	b.w	8008760 <__ieee754_pow+0xc0>
 8009052:	4693      	mov	fp, r2
 8009054:	f7ff bb98 	b.w	8008788 <__ieee754_pow+0xe8>
 8009058:	00000000 	.word	0x00000000
 800905c:	3fe62e43 	.word	0x3fe62e43
 8009060:	fefa39ef 	.word	0xfefa39ef
 8009064:	3fe62e42 	.word	0x3fe62e42
 8009068:	0ca86c39 	.word	0x0ca86c39
 800906c:	be205c61 	.word	0xbe205c61
 8009070:	72bea4d0 	.word	0x72bea4d0
 8009074:	3e663769 	.word	0x3e663769
 8009078:	c5d26bf1 	.word	0xc5d26bf1
 800907c:	3ebbbd41 	.word	0x3ebbbd41
 8009080:	af25de2c 	.word	0xaf25de2c
 8009084:	3f11566a 	.word	0x3f11566a
 8009088:	16bebd93 	.word	0x16bebd93
 800908c:	3f66c16c 	.word	0x3f66c16c
 8009090:	5555553e 	.word	0x5555553e
 8009094:	3fc55555 	.word	0x3fc55555
 8009098:	c2f8f359 	.word	0xc2f8f359
 800909c:	01a56e1f 	.word	0x01a56e1f
 80090a0:	3fe00000 	.word	0x3fe00000
 80090a4:	000fffff 	.word	0x000fffff
 80090a8:	3ff00000 	.word	0x3ff00000
 80090ac:	4090cbff 	.word	0x4090cbff
 80090b0:	3f6f3400 	.word	0x3f6f3400
 80090b4:	652b82fe 	.word	0x652b82fe
 80090b8:	3c971547 	.word	0x3c971547

080090bc <__ieee754_sqrt>:
 80090bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c0:	4955      	ldr	r1, [pc, #340]	; (8009218 <__ieee754_sqrt+0x15c>)
 80090c2:	ec55 4b10 	vmov	r4, r5, d0
 80090c6:	43a9      	bics	r1, r5
 80090c8:	462b      	mov	r3, r5
 80090ca:	462a      	mov	r2, r5
 80090cc:	d112      	bne.n	80090f4 <__ieee754_sqrt+0x38>
 80090ce:	ee10 2a10 	vmov	r2, s0
 80090d2:	ee10 0a10 	vmov	r0, s0
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7f7 fa3e 	bl	8000558 <__aeabi_dmul>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4620      	mov	r0, r4
 80090e2:	4629      	mov	r1, r5
 80090e4:	f7f7 f882 	bl	80001ec <__adddf3>
 80090e8:	4604      	mov	r4, r0
 80090ea:	460d      	mov	r5, r1
 80090ec:	ec45 4b10 	vmov	d0, r4, r5
 80090f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f4:	2d00      	cmp	r5, #0
 80090f6:	ee10 0a10 	vmov	r0, s0
 80090fa:	4621      	mov	r1, r4
 80090fc:	dc0f      	bgt.n	800911e <__ieee754_sqrt+0x62>
 80090fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009102:	4330      	orrs	r0, r6
 8009104:	d0f2      	beq.n	80090ec <__ieee754_sqrt+0x30>
 8009106:	b155      	cbz	r5, 800911e <__ieee754_sqrt+0x62>
 8009108:	ee10 2a10 	vmov	r2, s0
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 f86a 	bl	80001e8 <__aeabi_dsub>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	f7f7 fb48 	bl	80007ac <__aeabi_ddiv>
 800911c:	e7e4      	b.n	80090e8 <__ieee754_sqrt+0x2c>
 800911e:	151b      	asrs	r3, r3, #20
 8009120:	d073      	beq.n	800920a <__ieee754_sqrt+0x14e>
 8009122:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009126:	07dd      	lsls	r5, r3, #31
 8009128:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800912c:	bf48      	it	mi
 800912e:	0fc8      	lsrmi	r0, r1, #31
 8009130:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009134:	bf44      	itt	mi
 8009136:	0049      	lslmi	r1, r1, #1
 8009138:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800913c:	2500      	movs	r5, #0
 800913e:	1058      	asrs	r0, r3, #1
 8009140:	0fcb      	lsrs	r3, r1, #31
 8009142:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009146:	0049      	lsls	r1, r1, #1
 8009148:	2316      	movs	r3, #22
 800914a:	462c      	mov	r4, r5
 800914c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009150:	19a7      	adds	r7, r4, r6
 8009152:	4297      	cmp	r7, r2
 8009154:	bfde      	ittt	le
 8009156:	19bc      	addle	r4, r7, r6
 8009158:	1bd2      	suble	r2, r2, r7
 800915a:	19ad      	addle	r5, r5, r6
 800915c:	0fcf      	lsrs	r7, r1, #31
 800915e:	3b01      	subs	r3, #1
 8009160:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009164:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009168:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800916c:	d1f0      	bne.n	8009150 <__ieee754_sqrt+0x94>
 800916e:	f04f 0c20 	mov.w	ip, #32
 8009172:	469e      	mov	lr, r3
 8009174:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009178:	42a2      	cmp	r2, r4
 800917a:	eb06 070e 	add.w	r7, r6, lr
 800917e:	dc02      	bgt.n	8009186 <__ieee754_sqrt+0xca>
 8009180:	d112      	bne.n	80091a8 <__ieee754_sqrt+0xec>
 8009182:	428f      	cmp	r7, r1
 8009184:	d810      	bhi.n	80091a8 <__ieee754_sqrt+0xec>
 8009186:	2f00      	cmp	r7, #0
 8009188:	eb07 0e06 	add.w	lr, r7, r6
 800918c:	da42      	bge.n	8009214 <__ieee754_sqrt+0x158>
 800918e:	f1be 0f00 	cmp.w	lr, #0
 8009192:	db3f      	blt.n	8009214 <__ieee754_sqrt+0x158>
 8009194:	f104 0801 	add.w	r8, r4, #1
 8009198:	1b12      	subs	r2, r2, r4
 800919a:	428f      	cmp	r7, r1
 800919c:	bf88      	it	hi
 800919e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80091a2:	1bc9      	subs	r1, r1, r7
 80091a4:	4433      	add	r3, r6
 80091a6:	4644      	mov	r4, r8
 80091a8:	0052      	lsls	r2, r2, #1
 80091aa:	f1bc 0c01 	subs.w	ip, ip, #1
 80091ae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80091b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80091b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80091ba:	d1dd      	bne.n	8009178 <__ieee754_sqrt+0xbc>
 80091bc:	430a      	orrs	r2, r1
 80091be:	d006      	beq.n	80091ce <__ieee754_sqrt+0x112>
 80091c0:	1c5c      	adds	r4, r3, #1
 80091c2:	bf13      	iteet	ne
 80091c4:	3301      	addne	r3, #1
 80091c6:	3501      	addeq	r5, #1
 80091c8:	4663      	moveq	r3, ip
 80091ca:	f023 0301 	bicne.w	r3, r3, #1
 80091ce:	106a      	asrs	r2, r5, #1
 80091d0:	085b      	lsrs	r3, r3, #1
 80091d2:	07e9      	lsls	r1, r5, #31
 80091d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80091d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80091dc:	bf48      	it	mi
 80091de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80091e2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80091e6:	461c      	mov	r4, r3
 80091e8:	e780      	b.n	80090ec <__ieee754_sqrt+0x30>
 80091ea:	0aca      	lsrs	r2, r1, #11
 80091ec:	3815      	subs	r0, #21
 80091ee:	0549      	lsls	r1, r1, #21
 80091f0:	2a00      	cmp	r2, #0
 80091f2:	d0fa      	beq.n	80091ea <__ieee754_sqrt+0x12e>
 80091f4:	02d6      	lsls	r6, r2, #11
 80091f6:	d50a      	bpl.n	800920e <__ieee754_sqrt+0x152>
 80091f8:	f1c3 0420 	rsb	r4, r3, #32
 80091fc:	fa21 f404 	lsr.w	r4, r1, r4
 8009200:	1e5d      	subs	r5, r3, #1
 8009202:	4099      	lsls	r1, r3
 8009204:	4322      	orrs	r2, r4
 8009206:	1b43      	subs	r3, r0, r5
 8009208:	e78b      	b.n	8009122 <__ieee754_sqrt+0x66>
 800920a:	4618      	mov	r0, r3
 800920c:	e7f0      	b.n	80091f0 <__ieee754_sqrt+0x134>
 800920e:	0052      	lsls	r2, r2, #1
 8009210:	3301      	adds	r3, #1
 8009212:	e7ef      	b.n	80091f4 <__ieee754_sqrt+0x138>
 8009214:	46a0      	mov	r8, r4
 8009216:	e7bf      	b.n	8009198 <__ieee754_sqrt+0xdc>
 8009218:	7ff00000 	.word	0x7ff00000
 800921c:	00000000 	.word	0x00000000

08009220 <atan>:
 8009220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	ec55 4b10 	vmov	r4, r5, d0
 8009228:	4bc3      	ldr	r3, [pc, #780]	; (8009538 <atan+0x318>)
 800922a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800922e:	429e      	cmp	r6, r3
 8009230:	46ab      	mov	fp, r5
 8009232:	dd18      	ble.n	8009266 <atan+0x46>
 8009234:	4bc1      	ldr	r3, [pc, #772]	; (800953c <atan+0x31c>)
 8009236:	429e      	cmp	r6, r3
 8009238:	dc01      	bgt.n	800923e <atan+0x1e>
 800923a:	d109      	bne.n	8009250 <atan+0x30>
 800923c:	b144      	cbz	r4, 8009250 <atan+0x30>
 800923e:	4622      	mov	r2, r4
 8009240:	462b      	mov	r3, r5
 8009242:	4620      	mov	r0, r4
 8009244:	4629      	mov	r1, r5
 8009246:	f7f6 ffd1 	bl	80001ec <__adddf3>
 800924a:	4604      	mov	r4, r0
 800924c:	460d      	mov	r5, r1
 800924e:	e006      	b.n	800925e <atan+0x3e>
 8009250:	f1bb 0f00 	cmp.w	fp, #0
 8009254:	f340 8131 	ble.w	80094ba <atan+0x29a>
 8009258:	a59b      	add	r5, pc, #620	; (adr r5, 80094c8 <atan+0x2a8>)
 800925a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800925e:	ec45 4b10 	vmov	d0, r4, r5
 8009262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009266:	4bb6      	ldr	r3, [pc, #728]	; (8009540 <atan+0x320>)
 8009268:	429e      	cmp	r6, r3
 800926a:	dc14      	bgt.n	8009296 <atan+0x76>
 800926c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009270:	429e      	cmp	r6, r3
 8009272:	dc0d      	bgt.n	8009290 <atan+0x70>
 8009274:	a396      	add	r3, pc, #600	; (adr r3, 80094d0 <atan+0x2b0>)
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	ee10 0a10 	vmov	r0, s0
 800927e:	4629      	mov	r1, r5
 8009280:	f7f6 ffb4 	bl	80001ec <__adddf3>
 8009284:	2200      	movs	r2, #0
 8009286:	4baf      	ldr	r3, [pc, #700]	; (8009544 <atan+0x324>)
 8009288:	f7f7 fe48 	bl	8000f1c <__aeabi_dcmpgt>
 800928c:	2800      	cmp	r0, #0
 800928e:	d1e6      	bne.n	800925e <atan+0x3e>
 8009290:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009294:	e02b      	b.n	80092ee <atan+0xce>
 8009296:	f000 f963 	bl	8009560 <fabs>
 800929a:	4bab      	ldr	r3, [pc, #684]	; (8009548 <atan+0x328>)
 800929c:	429e      	cmp	r6, r3
 800929e:	ec55 4b10 	vmov	r4, r5, d0
 80092a2:	f300 80bf 	bgt.w	8009424 <atan+0x204>
 80092a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80092aa:	429e      	cmp	r6, r3
 80092ac:	f300 80a0 	bgt.w	80093f0 <atan+0x1d0>
 80092b0:	ee10 2a10 	vmov	r2, s0
 80092b4:	ee10 0a10 	vmov	r0, s0
 80092b8:	462b      	mov	r3, r5
 80092ba:	4629      	mov	r1, r5
 80092bc:	f7f6 ff96 	bl	80001ec <__adddf3>
 80092c0:	2200      	movs	r2, #0
 80092c2:	4ba0      	ldr	r3, [pc, #640]	; (8009544 <atan+0x324>)
 80092c4:	f7f6 ff90 	bl	80001e8 <__aeabi_dsub>
 80092c8:	2200      	movs	r2, #0
 80092ca:	4606      	mov	r6, r0
 80092cc:	460f      	mov	r7, r1
 80092ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092d2:	4620      	mov	r0, r4
 80092d4:	4629      	mov	r1, r5
 80092d6:	f7f6 ff89 	bl	80001ec <__adddf3>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4630      	mov	r0, r6
 80092e0:	4639      	mov	r1, r7
 80092e2:	f7f7 fa63 	bl	80007ac <__aeabi_ddiv>
 80092e6:	f04f 0a00 	mov.w	sl, #0
 80092ea:	4604      	mov	r4, r0
 80092ec:	460d      	mov	r5, r1
 80092ee:	4622      	mov	r2, r4
 80092f0:	462b      	mov	r3, r5
 80092f2:	4620      	mov	r0, r4
 80092f4:	4629      	mov	r1, r5
 80092f6:	f7f7 f92f 	bl	8000558 <__aeabi_dmul>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	4680      	mov	r8, r0
 8009300:	4689      	mov	r9, r1
 8009302:	f7f7 f929 	bl	8000558 <__aeabi_dmul>
 8009306:	a374      	add	r3, pc, #464	; (adr r3, 80094d8 <atan+0x2b8>)
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	4606      	mov	r6, r0
 800930e:	460f      	mov	r7, r1
 8009310:	f7f7 f922 	bl	8000558 <__aeabi_dmul>
 8009314:	a372      	add	r3, pc, #456	; (adr r3, 80094e0 <atan+0x2c0>)
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	f7f6 ff67 	bl	80001ec <__adddf3>
 800931e:	4632      	mov	r2, r6
 8009320:	463b      	mov	r3, r7
 8009322:	f7f7 f919 	bl	8000558 <__aeabi_dmul>
 8009326:	a370      	add	r3, pc, #448	; (adr r3, 80094e8 <atan+0x2c8>)
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	f7f6 ff5e 	bl	80001ec <__adddf3>
 8009330:	4632      	mov	r2, r6
 8009332:	463b      	mov	r3, r7
 8009334:	f7f7 f910 	bl	8000558 <__aeabi_dmul>
 8009338:	a36d      	add	r3, pc, #436	; (adr r3, 80094f0 <atan+0x2d0>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f6 ff55 	bl	80001ec <__adddf3>
 8009342:	4632      	mov	r2, r6
 8009344:	463b      	mov	r3, r7
 8009346:	f7f7 f907 	bl	8000558 <__aeabi_dmul>
 800934a:	a36b      	add	r3, pc, #428	; (adr r3, 80094f8 <atan+0x2d8>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	f7f6 ff4c 	bl	80001ec <__adddf3>
 8009354:	4632      	mov	r2, r6
 8009356:	463b      	mov	r3, r7
 8009358:	f7f7 f8fe 	bl	8000558 <__aeabi_dmul>
 800935c:	a368      	add	r3, pc, #416	; (adr r3, 8009500 <atan+0x2e0>)
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f7f6 ff43 	bl	80001ec <__adddf3>
 8009366:	4642      	mov	r2, r8
 8009368:	464b      	mov	r3, r9
 800936a:	f7f7 f8f5 	bl	8000558 <__aeabi_dmul>
 800936e:	a366      	add	r3, pc, #408	; (adr r3, 8009508 <atan+0x2e8>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	4680      	mov	r8, r0
 8009376:	4689      	mov	r9, r1
 8009378:	4630      	mov	r0, r6
 800937a:	4639      	mov	r1, r7
 800937c:	f7f7 f8ec 	bl	8000558 <__aeabi_dmul>
 8009380:	a363      	add	r3, pc, #396	; (adr r3, 8009510 <atan+0x2f0>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f7f6 ff2f 	bl	80001e8 <__aeabi_dsub>
 800938a:	4632      	mov	r2, r6
 800938c:	463b      	mov	r3, r7
 800938e:	f7f7 f8e3 	bl	8000558 <__aeabi_dmul>
 8009392:	a361      	add	r3, pc, #388	; (adr r3, 8009518 <atan+0x2f8>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f6 ff26 	bl	80001e8 <__aeabi_dsub>
 800939c:	4632      	mov	r2, r6
 800939e:	463b      	mov	r3, r7
 80093a0:	f7f7 f8da 	bl	8000558 <__aeabi_dmul>
 80093a4:	a35e      	add	r3, pc, #376	; (adr r3, 8009520 <atan+0x300>)
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	f7f6 ff1d 	bl	80001e8 <__aeabi_dsub>
 80093ae:	4632      	mov	r2, r6
 80093b0:	463b      	mov	r3, r7
 80093b2:	f7f7 f8d1 	bl	8000558 <__aeabi_dmul>
 80093b6:	a35c      	add	r3, pc, #368	; (adr r3, 8009528 <atan+0x308>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f6 ff14 	bl	80001e8 <__aeabi_dsub>
 80093c0:	4632      	mov	r2, r6
 80093c2:	463b      	mov	r3, r7
 80093c4:	f7f7 f8c8 	bl	8000558 <__aeabi_dmul>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4640      	mov	r0, r8
 80093ce:	4649      	mov	r1, r9
 80093d0:	f7f6 ff0c 	bl	80001ec <__adddf3>
 80093d4:	4622      	mov	r2, r4
 80093d6:	462b      	mov	r3, r5
 80093d8:	f7f7 f8be 	bl	8000558 <__aeabi_dmul>
 80093dc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	d14b      	bne.n	800947e <atan+0x25e>
 80093e6:	4620      	mov	r0, r4
 80093e8:	4629      	mov	r1, r5
 80093ea:	f7f6 fefd 	bl	80001e8 <__aeabi_dsub>
 80093ee:	e72c      	b.n	800924a <atan+0x2a>
 80093f0:	ee10 0a10 	vmov	r0, s0
 80093f4:	2200      	movs	r2, #0
 80093f6:	4b53      	ldr	r3, [pc, #332]	; (8009544 <atan+0x324>)
 80093f8:	4629      	mov	r1, r5
 80093fa:	f7f6 fef5 	bl	80001e8 <__aeabi_dsub>
 80093fe:	2200      	movs	r2, #0
 8009400:	4606      	mov	r6, r0
 8009402:	460f      	mov	r7, r1
 8009404:	4b4f      	ldr	r3, [pc, #316]	; (8009544 <atan+0x324>)
 8009406:	4620      	mov	r0, r4
 8009408:	4629      	mov	r1, r5
 800940a:	f7f6 feef 	bl	80001ec <__adddf3>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4630      	mov	r0, r6
 8009414:	4639      	mov	r1, r7
 8009416:	f7f7 f9c9 	bl	80007ac <__aeabi_ddiv>
 800941a:	f04f 0a01 	mov.w	sl, #1
 800941e:	4604      	mov	r4, r0
 8009420:	460d      	mov	r5, r1
 8009422:	e764      	b.n	80092ee <atan+0xce>
 8009424:	4b49      	ldr	r3, [pc, #292]	; (800954c <atan+0x32c>)
 8009426:	429e      	cmp	r6, r3
 8009428:	dc1d      	bgt.n	8009466 <atan+0x246>
 800942a:	ee10 0a10 	vmov	r0, s0
 800942e:	2200      	movs	r2, #0
 8009430:	4b47      	ldr	r3, [pc, #284]	; (8009550 <atan+0x330>)
 8009432:	4629      	mov	r1, r5
 8009434:	f7f6 fed8 	bl	80001e8 <__aeabi_dsub>
 8009438:	2200      	movs	r2, #0
 800943a:	4606      	mov	r6, r0
 800943c:	460f      	mov	r7, r1
 800943e:	4b44      	ldr	r3, [pc, #272]	; (8009550 <atan+0x330>)
 8009440:	4620      	mov	r0, r4
 8009442:	4629      	mov	r1, r5
 8009444:	f7f7 f888 	bl	8000558 <__aeabi_dmul>
 8009448:	2200      	movs	r2, #0
 800944a:	4b3e      	ldr	r3, [pc, #248]	; (8009544 <atan+0x324>)
 800944c:	f7f6 fece 	bl	80001ec <__adddf3>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	f7f7 f9a8 	bl	80007ac <__aeabi_ddiv>
 800945c:	f04f 0a02 	mov.w	sl, #2
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	e743      	b.n	80092ee <atan+0xce>
 8009466:	462b      	mov	r3, r5
 8009468:	ee10 2a10 	vmov	r2, s0
 800946c:	2000      	movs	r0, #0
 800946e:	4939      	ldr	r1, [pc, #228]	; (8009554 <atan+0x334>)
 8009470:	f7f7 f99c 	bl	80007ac <__aeabi_ddiv>
 8009474:	f04f 0a03 	mov.w	sl, #3
 8009478:	4604      	mov	r4, r0
 800947a:	460d      	mov	r5, r1
 800947c:	e737      	b.n	80092ee <atan+0xce>
 800947e:	4b36      	ldr	r3, [pc, #216]	; (8009558 <atan+0x338>)
 8009480:	4e36      	ldr	r6, [pc, #216]	; (800955c <atan+0x33c>)
 8009482:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009486:	4456      	add	r6, sl
 8009488:	449a      	add	sl, r3
 800948a:	e9da 2300 	ldrd	r2, r3, [sl]
 800948e:	f7f6 feab 	bl	80001e8 <__aeabi_dsub>
 8009492:	4622      	mov	r2, r4
 8009494:	462b      	mov	r3, r5
 8009496:	f7f6 fea7 	bl	80001e8 <__aeabi_dsub>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80094a2:	f7f6 fea1 	bl	80001e8 <__aeabi_dsub>
 80094a6:	f1bb 0f00 	cmp.w	fp, #0
 80094aa:	4604      	mov	r4, r0
 80094ac:	460d      	mov	r5, r1
 80094ae:	f6bf aed6 	bge.w	800925e <atan+0x3e>
 80094b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094b6:	461d      	mov	r5, r3
 80094b8:	e6d1      	b.n	800925e <atan+0x3e>
 80094ba:	a51d      	add	r5, pc, #116	; (adr r5, 8009530 <atan+0x310>)
 80094bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094c0:	e6cd      	b.n	800925e <atan+0x3e>
 80094c2:	bf00      	nop
 80094c4:	f3af 8000 	nop.w
 80094c8:	54442d18 	.word	0x54442d18
 80094cc:	3ff921fb 	.word	0x3ff921fb
 80094d0:	8800759c 	.word	0x8800759c
 80094d4:	7e37e43c 	.word	0x7e37e43c
 80094d8:	e322da11 	.word	0xe322da11
 80094dc:	3f90ad3a 	.word	0x3f90ad3a
 80094e0:	24760deb 	.word	0x24760deb
 80094e4:	3fa97b4b 	.word	0x3fa97b4b
 80094e8:	a0d03d51 	.word	0xa0d03d51
 80094ec:	3fb10d66 	.word	0x3fb10d66
 80094f0:	c54c206e 	.word	0xc54c206e
 80094f4:	3fb745cd 	.word	0x3fb745cd
 80094f8:	920083ff 	.word	0x920083ff
 80094fc:	3fc24924 	.word	0x3fc24924
 8009500:	5555550d 	.word	0x5555550d
 8009504:	3fd55555 	.word	0x3fd55555
 8009508:	2c6a6c2f 	.word	0x2c6a6c2f
 800950c:	bfa2b444 	.word	0xbfa2b444
 8009510:	52defd9a 	.word	0x52defd9a
 8009514:	3fadde2d 	.word	0x3fadde2d
 8009518:	af749a6d 	.word	0xaf749a6d
 800951c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009520:	fe231671 	.word	0xfe231671
 8009524:	3fbc71c6 	.word	0x3fbc71c6
 8009528:	9998ebc4 	.word	0x9998ebc4
 800952c:	3fc99999 	.word	0x3fc99999
 8009530:	54442d18 	.word	0x54442d18
 8009534:	bff921fb 	.word	0xbff921fb
 8009538:	440fffff 	.word	0x440fffff
 800953c:	7ff00000 	.word	0x7ff00000
 8009540:	3fdbffff 	.word	0x3fdbffff
 8009544:	3ff00000 	.word	0x3ff00000
 8009548:	3ff2ffff 	.word	0x3ff2ffff
 800954c:	40037fff 	.word	0x40037fff
 8009550:	3ff80000 	.word	0x3ff80000
 8009554:	bff00000 	.word	0xbff00000
 8009558:	08009d98 	.word	0x08009d98
 800955c:	08009d78 	.word	0x08009d78

08009560 <fabs>:
 8009560:	ec51 0b10 	vmov	r0, r1, d0
 8009564:	ee10 2a10 	vmov	r2, s0
 8009568:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800956c:	ec43 2b10 	vmov	d0, r2, r3
 8009570:	4770      	bx	lr

08009572 <finite>:
 8009572:	ee10 3a90 	vmov	r3, s1
 8009576:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800957a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800957e:	0fc0      	lsrs	r0, r0, #31
 8009580:	4770      	bx	lr

08009582 <matherr>:
 8009582:	2000      	movs	r0, #0
 8009584:	4770      	bx	lr
	...

08009588 <nan>:
 8009588:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009590 <nan+0x8>
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	00000000 	.word	0x00000000
 8009594:	7ff80000 	.word	0x7ff80000

08009598 <rint>:
 8009598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800959a:	ec51 0b10 	vmov	r0, r1, d0
 800959e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80095a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80095a6:	2e13      	cmp	r6, #19
 80095a8:	460b      	mov	r3, r1
 80095aa:	ee10 4a10 	vmov	r4, s0
 80095ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80095b2:	dc56      	bgt.n	8009662 <rint+0xca>
 80095b4:	2e00      	cmp	r6, #0
 80095b6:	da2b      	bge.n	8009610 <rint+0x78>
 80095b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80095bc:	4302      	orrs	r2, r0
 80095be:	d023      	beq.n	8009608 <rint+0x70>
 80095c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80095c4:	4302      	orrs	r2, r0
 80095c6:	4254      	negs	r4, r2
 80095c8:	4314      	orrs	r4, r2
 80095ca:	0c4b      	lsrs	r3, r1, #17
 80095cc:	0b24      	lsrs	r4, r4, #12
 80095ce:	045b      	lsls	r3, r3, #17
 80095d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80095d4:	ea44 0103 	orr.w	r1, r4, r3
 80095d8:	460b      	mov	r3, r1
 80095da:	492f      	ldr	r1, [pc, #188]	; (8009698 <rint+0x100>)
 80095dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80095e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80095e4:	4602      	mov	r2, r0
 80095e6:	4639      	mov	r1, r7
 80095e8:	4630      	mov	r0, r6
 80095ea:	f7f6 fdff 	bl	80001ec <__adddf3>
 80095ee:	e9cd 0100 	strd	r0, r1, [sp]
 80095f2:	463b      	mov	r3, r7
 80095f4:	4632      	mov	r2, r6
 80095f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095fa:	f7f6 fdf5 	bl	80001e8 <__aeabi_dsub>
 80095fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009602:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009606:	4639      	mov	r1, r7
 8009608:	ec41 0b10 	vmov	d0, r0, r1
 800960c:	b003      	add	sp, #12
 800960e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009610:	4a22      	ldr	r2, [pc, #136]	; (800969c <rint+0x104>)
 8009612:	4132      	asrs	r2, r6
 8009614:	ea01 0702 	and.w	r7, r1, r2
 8009618:	4307      	orrs	r7, r0
 800961a:	d0f5      	beq.n	8009608 <rint+0x70>
 800961c:	0852      	lsrs	r2, r2, #1
 800961e:	4011      	ands	r1, r2
 8009620:	430c      	orrs	r4, r1
 8009622:	d00b      	beq.n	800963c <rint+0xa4>
 8009624:	ea23 0202 	bic.w	r2, r3, r2
 8009628:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800962c:	2e13      	cmp	r6, #19
 800962e:	fa43 f306 	asr.w	r3, r3, r6
 8009632:	bf0c      	ite	eq
 8009634:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009638:	2400      	movne	r4, #0
 800963a:	4313      	orrs	r3, r2
 800963c:	4916      	ldr	r1, [pc, #88]	; (8009698 <rint+0x100>)
 800963e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009642:	4622      	mov	r2, r4
 8009644:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009648:	4620      	mov	r0, r4
 800964a:	4629      	mov	r1, r5
 800964c:	f7f6 fdce 	bl	80001ec <__adddf3>
 8009650:	e9cd 0100 	strd	r0, r1, [sp]
 8009654:	4622      	mov	r2, r4
 8009656:	462b      	mov	r3, r5
 8009658:	e9dd 0100 	ldrd	r0, r1, [sp]
 800965c:	f7f6 fdc4 	bl	80001e8 <__aeabi_dsub>
 8009660:	e7d2      	b.n	8009608 <rint+0x70>
 8009662:	2e33      	cmp	r6, #51	; 0x33
 8009664:	dd07      	ble.n	8009676 <rint+0xde>
 8009666:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800966a:	d1cd      	bne.n	8009608 <rint+0x70>
 800966c:	ee10 2a10 	vmov	r2, s0
 8009670:	f7f6 fdbc 	bl	80001ec <__adddf3>
 8009674:	e7c8      	b.n	8009608 <rint+0x70>
 8009676:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800967a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800967e:	40f2      	lsrs	r2, r6
 8009680:	4210      	tst	r0, r2
 8009682:	d0c1      	beq.n	8009608 <rint+0x70>
 8009684:	0852      	lsrs	r2, r2, #1
 8009686:	4210      	tst	r0, r2
 8009688:	bf1f      	itttt	ne
 800968a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800968e:	ea20 0202 	bicne.w	r2, r0, r2
 8009692:	4134      	asrne	r4, r6
 8009694:	4314      	orrne	r4, r2
 8009696:	e7d1      	b.n	800963c <rint+0xa4>
 8009698:	08009db8 	.word	0x08009db8
 800969c:	000fffff 	.word	0x000fffff

080096a0 <scalbn>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	ec55 4b10 	vmov	r4, r5, d0
 80096a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80096aa:	4606      	mov	r6, r0
 80096ac:	462b      	mov	r3, r5
 80096ae:	b9aa      	cbnz	r2, 80096dc <scalbn+0x3c>
 80096b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80096b4:	4323      	orrs	r3, r4
 80096b6:	d03b      	beq.n	8009730 <scalbn+0x90>
 80096b8:	4b31      	ldr	r3, [pc, #196]	; (8009780 <scalbn+0xe0>)
 80096ba:	4629      	mov	r1, r5
 80096bc:	2200      	movs	r2, #0
 80096be:	ee10 0a10 	vmov	r0, s0
 80096c2:	f7f6 ff49 	bl	8000558 <__aeabi_dmul>
 80096c6:	4b2f      	ldr	r3, [pc, #188]	; (8009784 <scalbn+0xe4>)
 80096c8:	429e      	cmp	r6, r3
 80096ca:	4604      	mov	r4, r0
 80096cc:	460d      	mov	r5, r1
 80096ce:	da12      	bge.n	80096f6 <scalbn+0x56>
 80096d0:	a327      	add	r3, pc, #156	; (adr r3, 8009770 <scalbn+0xd0>)
 80096d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d6:	f7f6 ff3f 	bl	8000558 <__aeabi_dmul>
 80096da:	e009      	b.n	80096f0 <scalbn+0x50>
 80096dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80096e0:	428a      	cmp	r2, r1
 80096e2:	d10c      	bne.n	80096fe <scalbn+0x5e>
 80096e4:	ee10 2a10 	vmov	r2, s0
 80096e8:	4620      	mov	r0, r4
 80096ea:	4629      	mov	r1, r5
 80096ec:	f7f6 fd7e 	bl	80001ec <__adddf3>
 80096f0:	4604      	mov	r4, r0
 80096f2:	460d      	mov	r5, r1
 80096f4:	e01c      	b.n	8009730 <scalbn+0x90>
 80096f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80096fa:	460b      	mov	r3, r1
 80096fc:	3a36      	subs	r2, #54	; 0x36
 80096fe:	4432      	add	r2, r6
 8009700:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009704:	428a      	cmp	r2, r1
 8009706:	dd0b      	ble.n	8009720 <scalbn+0x80>
 8009708:	ec45 4b11 	vmov	d1, r4, r5
 800970c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009778 <scalbn+0xd8>
 8009710:	f000 f83c 	bl	800978c <copysign>
 8009714:	a318      	add	r3, pc, #96	; (adr r3, 8009778 <scalbn+0xd8>)
 8009716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971a:	ec51 0b10 	vmov	r0, r1, d0
 800971e:	e7da      	b.n	80096d6 <scalbn+0x36>
 8009720:	2a00      	cmp	r2, #0
 8009722:	dd08      	ble.n	8009736 <scalbn+0x96>
 8009724:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009728:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800972c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009730:	ec45 4b10 	vmov	d0, r4, r5
 8009734:	bd70      	pop	{r4, r5, r6, pc}
 8009736:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800973a:	da0d      	bge.n	8009758 <scalbn+0xb8>
 800973c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009740:	429e      	cmp	r6, r3
 8009742:	ec45 4b11 	vmov	d1, r4, r5
 8009746:	dce1      	bgt.n	800970c <scalbn+0x6c>
 8009748:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009770 <scalbn+0xd0>
 800974c:	f000 f81e 	bl	800978c <copysign>
 8009750:	a307      	add	r3, pc, #28	; (adr r3, 8009770 <scalbn+0xd0>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	e7e0      	b.n	800971a <scalbn+0x7a>
 8009758:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800975c:	3236      	adds	r2, #54	; 0x36
 800975e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009762:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009766:	4620      	mov	r0, r4
 8009768:	4629      	mov	r1, r5
 800976a:	2200      	movs	r2, #0
 800976c:	4b06      	ldr	r3, [pc, #24]	; (8009788 <scalbn+0xe8>)
 800976e:	e7b2      	b.n	80096d6 <scalbn+0x36>
 8009770:	c2f8f359 	.word	0xc2f8f359
 8009774:	01a56e1f 	.word	0x01a56e1f
 8009778:	8800759c 	.word	0x8800759c
 800977c:	7e37e43c 	.word	0x7e37e43c
 8009780:	43500000 	.word	0x43500000
 8009784:	ffff3cb0 	.word	0xffff3cb0
 8009788:	3c900000 	.word	0x3c900000

0800978c <copysign>:
 800978c:	ec51 0b10 	vmov	r0, r1, d0
 8009790:	ee11 0a90 	vmov	r0, s3
 8009794:	ee10 2a10 	vmov	r2, s0
 8009798:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800979c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80097a0:	ea41 0300 	orr.w	r3, r1, r0
 80097a4:	ec43 2b10 	vmov	d0, r2, r3
 80097a8:	4770      	bx	lr
	...

080097ac <_init>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr

080097b8 <_fini>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr
